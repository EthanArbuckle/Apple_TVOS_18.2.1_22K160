unint64_t specialized static _ProcessInfo._getProcessName()()
{
  void *v0;
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v4;
  unint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void v14[6];
  void v15[2];
  v0 = (void *)static CommandLine.arguments.getter();
  if (!v0[2])
  {
    swift_bridgeObjectRelease();
    return 0LL;
  }

  v2 = v0[4];
  v1 = v0[5];
  swift_bridgeObjectRetain();
  v3 = swift_bridgeObjectRelease();
  v15[0] = 47LL;
  v15[1] = 0xE100000000000000LL;
  MEMORY[0x1895F8858](v3);
  v14[2] = v15;
  specialized BidirectionalCollection.lastIndex(where:)( partial apply for specialized closure #1 in BidirectionalCollection<>.lastIndex(of:),  (uint64_t)v14,  v2,  v1);
  if ((v4 & 1) != 0) {
    return v2;
  }
  result = String.index(after:)();
  v6 = HIBYTE(v1) & 0xF;
  if ((v1 & 0x2000000000000000LL) == 0) {
    v6 = v2 & 0xFFFFFFFFFFFFLL;
  }
  if (4 * v6 >= result >> 14)
  {
    v7 = String.subscript.getter();
    v9 = v8;
    v11 = v10;
    v13 = v12;
    swift_bridgeObjectRelease();
    v2 = MEMORY[0x186E1B610](v7, v9, v11, v13);
    swift_bridgeObjectRelease();
    return v2;
  }

  __break(1u);
  return result;
}

uint64_t specialized _ProcessInfo.processorCount.getter()
{
  return specialized _ProcessInfo.processorCount.getter(COERCE_DOUBLE(0x300000006LL));
}

uint64_t specialized _ProcessInfo.activeProcessorCount.getter()
{
  return specialized _ProcessInfo.processorCount.getter(COERCE_DOUBLE(0x1900000006LL));
}

uint64_t specialized _ProcessInfo.processorCount.getter(double a1)
{
  uint64_t v8 = *MEMORY[0x1895F89C0];
  int v7 = -1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Int32>);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1837232D0;
  *(double *)(inited + 32) = a1;
  size_t v6 = 4LL;
  int v3 = sysctl((int *)(inited + 32), 2u, &v7, &v6, 0LL, 0LL);
  swift_bridgeObjectRelease();
  int v4 = v7;
  if (v3) {
    return 0;
  }
  return v4;
}

void *ICUNumberFormatterBase.init(skeleton:localeIdentifier:preferences:)( uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v12 = *MEMORY[0x1895F89C0];
  outlined init with take of LocalePreferences?( a5,  (uint64_t)v11,  (uint64_t *)&demangling cache variable for type metadata for LocalePreferences?);
  outlined retain of LocalePreferences?( (uint64_t)v11,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined consume of LocalePreferences?);
  v5[3] = a1;
  v5[4] = a2;
  swift_bridgeObjectRetain();
  uint64_t v8 = specialized _copyCollectionToContiguousArray<A>(_:)(a1, a2);
  swift_bridgeObjectRelease();
  if (v8[2] >> 31) {
    __break(1u);
  }
  String.utf8CString.getter();
  swift_bridgeObjectRelease();
  uint64_t v9 = unumf_openForSkeletonAndLocale();
  swift_release();
  swift_release();
  if (v9)
  {
    v5[2] = v9;
  }

  else
  {
    swift_bridgeObjectRelease();
    type metadata accessor for ICUNumberFormatterBase();
    swift_deallocPartialClassInstance();
    return 0LL;
  }

  return v5;
}

uint64_t ICUNumberFormatterBase.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for ICUNumberFormatterBase()
{
  return objc_opt_self();
}

void ICUNumberFormatterBase.attributedFormatPositions(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __asm { BR              X10 }

uint64_t sub_183128538()
{
  uint64_t v2 = swift_retain_n();
  MEMORY[0x1895F8858](v2);
  swift_retain();
  specialized closure #1 in _withResizingUCharBuffer(initialSize:_:)((uint64_t)&v24, (uint64_t *)(v0 - 120));
  uint64_t v4 = *(void *)(v0 - 120);
  uint64_t v3 = *(void *)(v0 - 112);
  swift_release_n();
  if (!v3)
  {
    swift_release_n();
    return 0LL;
  }

  type metadata accessor for ICU.FieldPositer();
  uint64_t inited = swift_initStackObject();
  *(_DWORD *)(v0 - 120) = 0;
  uint64_t v6 = ufieldpositer_open();
  if (!v6)
  {
    __break(1u);
    swift_release_n();
    swift_willThrow();
    __break(1u);
    JUMPOUT(0x1831288D0LL);
  }

  *(void *)(inited + 16) = v6;
  if (*(int *)(v0 - 120) >= 1)
  {
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    swift_release();
    return 0LL;
  }

  *(_DWORD *)(v0 - 120) = 0;
  unumf_resultGetAllFieldPositions();
  if (*(int *)(v0 - 120) >= 1)
  {
    swift_release();
    swift_bridgeObjectRelease();
    swift_release_n();
    return 0LL;
  }

  *(void *)(v0 - 160) = 0LL;
  int v7 = ufieldpositer_next();
  *(void *)(v0 - 168) = inited;
  if ((v7 & 0x80000000) == 0)
  {
    int v8 = v7;
    uint64_t v9 = *(int *)(v0 - 160);
    uint64_t v10 = *(int *)(v0 - 156);
    v11 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  1LL,  1,  MEMORY[0x18961AFE8]);
    unint64_t v13 = v11[2];
    unint64_t v12 = v11[3];
    unint64_t v14 = v13 + 1;
    if (v13 >= v12 >> 1)
    {
      v23 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (void *)(v12 > 1),  v13 + 1,  1,  v11);
      unint64_t v14 = v13 + 1;
      v11 = v23;
    }

    v11[2] = v14;
    v15 = &v11[3 * v13];
    *((_DWORD *)v15 + 8) = v8;
    v15[5] = v10;
    v15[6] = v9;
    int v16 = ufieldpositer_next();
    if ((v16 & 0x80000000) == 0)
    {
      int v17 = v16;
      do
      {
        uint64_t v18 = *(int *)(v0 - 160);
        uint64_t v19 = *(int *)(v0 - 156);
        unint64_t v21 = v11[2];
        unint64_t v20 = v11[3];
        if (v21 >= v20 >> 1) {
          v11 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (void *)(v20 > 1),  v21 + 1,  1,  v11);
        }
        v11[2] = v21 + 1;
        v22 = &v11[3 * v21];
        *((_DWORD *)v22 + 8) = v17;
        v22[5] = v19;
        v22[6] = v18;
        int v17 = ufieldpositer_next();
      }

      while ((v17 & 0x80000000) == 0);
    }
  }

  swift_release_n();
  swift_setDeallocating();
  ufieldpositer_close();
  return v4;
}

uint64_t ICUNumberFormatterBase.FormatResult.init(formatter:value:)()
{
  uint64_t v1 = unumf_openResult();
  if (!v1) {
    __break(1u);
  }
  *(void *)(v0 + 16) = v1;
  unumf_formatInt();
  return v0;
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v1 = unumf_openResult();
  if (!v1) {
    __break(1u);
  }
  *(void *)(v0 + 16) = v1;
  unumf_formatDouble();
  return v0;
}

uint64_t ICUNumberFormatterBase.FormatResult.init(formatter:value:)( uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v20 = *MEMORY[0x1895F89C0];
  uint64_t v8 = unumf_openResult();
  if (!v8) {
LABEL_14:
  }
    __break(1u);
  *(void *)(v4 + 16) = v8;
  v17[0] = a2;
  v17[1] = a3;
  int v18 = a4;
  memset(v19, 0, sizeof(v19));
  uint64_t v9 = __NSDecimalString(_:_:)((uint64_t)v17, (uint64_t)v19);
  uint64_t v11 = v10;
  outlined destroy of Any?((uint64_t)v19, &demangling cache variable for type metadata for Any?);
  if ((v11 & 0x1000000000000000LL) != 0)
  {
    uint64_t v9 = static String._copying(_:)();
    uint64_t v14 = v13;
    swift_bridgeObjectRelease();
    uint64_t v11 = v14;
    if ((v14 & 0x2000000000000000LL) == 0)
    {
LABEL_4:
      if ((v9 & 0x1000000000000000LL) != 0)
      {
        uint64_t v12 = v9 & 0xFFFFFFFFFFFFLL;
      }

      else
      {
        _StringObject.sharedUTF8.getter();
        if (v16 < (uint64_t)0xFFFFFFFF80000000LL)
        {
          __break(1u);
LABEL_13:
          __break(1u);
          goto LABEL_14;
        }

        uint64_t v12 = v16;
      }

      if (v12 <= 0x7FFFFFFF) {
        goto LABEL_10;
      }
      goto LABEL_13;
    }
  }

  else if ((v11 & 0x2000000000000000LL) == 0)
  {
    goto LABEL_4;
  }

  *(void *)&v19[0] = v9;
  *((void *)&v19[0] + 1) = v11 & 0xFFFFFFFFFFFFFFLL;
LABEL_10:
  unumf_formatDecimal();
  swift_bridgeObjectRelease();
  return v4;
}

uint64_t ICUNumberFormatterBase.FormatResult.init(formatter:value:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = unumf_openResult();
  if (!v6) {
LABEL_13:
  }
    __break(1u);
  *(void *)(v3 + 16) = v6;
  if ((a3 & 0x1000000000000000LL) != 0)
  {
    a2 = static String._copying(_:)();
    uint64_t v9 = v8;
    swift_bridgeObjectRelease();
    if ((v9 & 0x2000000000000000LL) == 0)
    {
LABEL_4:
      if ((a2 & 0x1000000000000000LL) != 0)
      {
        uint64_t v7 = a2 & 0xFFFFFFFFFFFFLL;
      }

      else
      {
        _StringObject.sharedUTF8.getter();
        if (v11 < (uint64_t)0xFFFFFFFF80000000LL)
        {
          __break(1u);
LABEL_12:
          __break(1u);
          goto LABEL_13;
        }

        uint64_t v7 = v11;
      }

      if (v7 <= 0x7FFFFFFF) {
        goto LABEL_9;
      }
      goto LABEL_12;
    }
  }

  else if ((a3 & 0x2000000000000000LL) == 0)
  {
    goto LABEL_4;
  }

uint64_t ICUNumberFormatterBase.FormatResult.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for ICUNumberFormatterBase.FormatResult()
{
  return objc_opt_self();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance ICUNumberFormatter.Signature()
{
  return ICUNumberFormatter.Signature.hashValue.getter(type metadata accessor for ICUNumberFormatter.Signature);
}

void protocol witness for Hashable.hash(into:) in conformance ICUNumberFormatter.Signature(uint64_t a1)
{
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance ICUNumberFormatter.Signature( uint64_t a1, uint64_t a2)
{
  return specialized static ICUPercentNumberFormatter.Signature.== infix(_:_:)( a1,  a2,  type metadata accessor for ICUNumberFormatter.Signature);
}

uint64_t one-time initialization function for cache(uint64_t a1)
{
  return one-time initialization function for cache( a1,  &demangling cache variable for type metadata for LockedState<[ICUNumberFormatter.Signature : ICUNumberFormatter?]>._Buffer,  &static ICUNumberFormatter.cache,  (uint64_t *)algn_18C5CBA58);
}

{
  return one-time initialization function for cache( a1,  &demangling cache variable for type metadata for LockedState<[ICUCurrencyNumberFormatter.Signature : ICUCurrencyNumberFormatter?]>._Buffer,  &static ICUCurrencyNumberFormatter.cache,  (uint64_t *)algn_18C5CBA68);
}

{
  return one-time initialization function for cache( a1,  &demangling cache variable for type metadata for LockedState<[ICUPercentNumberFormatter.Signature : ICUPercentNumberFormatter?]>._Buffer,  &static ICUPercentNumberFormatter.cache,  (uint64_t *)algn_18C5CBA78);
}

{
  return one-time initialization function for cache( a1,  &demangling cache variable for type metadata for LockedState<[ICUByteCountNumberFormatter.Signature : ICUByteCountNumberFormatter?]>._Buffer,  static ICUByteCountNumberFormatter.cache,  (uint64_t *)&unk_18C5C4FE8);
}

{
  return one-time initialization function for cache( a1,  (uint64_t *)&demangling cache variable for type metadata for LockedState<[ICUMeasurementNumberFormatter.Signature : ICUMeasurementNumberFormatter?]>._Buffer,  &static ICUMeasurementNumberFormatter.cache,  (uint64_t *)algn_18C5C51A8);
}

uint64_t type metadata accessor for ICUNumberFormatter()
{
  return objc_opt_self();
}

void ICUCurrencyNumberFormatter.Signature.hash(into:)(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for FloatingPointRoundingRule();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1895F8858](v4);
  uint64_t v7 = &v59[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
  MEMORY[0x1895F8858](v8);
  uint64_t v10 = &v59[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  if (*(_BYTE *)(v1 + 8) == 1)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    Swift::UInt64 v11 = *(void *)v1;
    Hasher._combine(_:)(1u);
    if ((v11 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
      Swift::UInt64 v12 = v11;
    }
    else {
      Swift::UInt64 v12 = 0LL;
    }
    Hasher._combine(_:)(v12);
  }

  outlined init with take of LocalePreferences?( v1 + 16,  (uint64_t)v80,  &demangling cache variable for type metadata for NumberFormatStyleConfiguration.Precision?);
  specialized Optional<A>.hash(into:)();
  int v13 = *(unsigned __int8 *)(v1 + 73);
  if (v13 == 2)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    Swift::UInt v14 = v13 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v14);
  }

  unint64_t v15 = *(unsigned int *)(v1 + 74);
  if (*(_DWORD *)(v1 + 74) == 2)
  {
    LOBYTE(v16) = 0;
  }

  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v15 & 1);
    Hasher._combine(_:)((v15 >> 8) & 1);
    Hasher._combine(_:)(WORD1(v15) & 1);
    unsigned int v16 = BYTE3(v15) & 1;
  }

  Hasher._combine(_:)(v16);
  int v17 = *(unsigned __int8 *)(v1 + 78);
  if (v17 == 2)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    Swift::UInt v18 = v17 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v18);
  }

  uint64_t v19 = (int *)type metadata accessor for CurrencyFormatStyleConfiguration.Collection(0LL);
  outlined init with copy of (Hashable & Sendable)?( v1 + v19[9],  (uint64_t)v10,  &demangling cache variable for type metadata for FloatingPointRoundingRule?);
  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v5 + 48))(v10, 1LL, v4) == 1)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v5 + 32))(v7, v10, v4);
    Hasher._combine(_:)(1u);
    dispatch thunk of Hashable.hash(into:)();
    (*(void (**)(_BYTE *, uint64_t))(v5 + 8))(v7, v4);
  }

  uint64_t v20 = v1 + v19[10];
  int v21 = *(unsigned __int8 *)(v20 + 8);
  if (v21 == 255)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    Swift::UInt v22 = *(void *)v20;
    Hasher._combine(_:)(1u);
    if ((v21 & 1) != 0)
    {
      Hasher._combine(_:)(1uLL);
      if ((v22 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
        Swift::UInt64 v23 = v22;
      }
      else {
        Swift::UInt64 v23 = 0LL;
      }
      Hasher._combine(_:)(v23);
    }

    else
    {
      Hasher._combine(_:)(0LL);
      Hasher._combine(_:)(v22);
    }
  }

  Hasher._combine(_:)(*(unsigned __int8 *)(v1 + v19[11]));
  Swift::UInt v24 = *(unsigned __int8 *)(v1 + v19[12]);
  if (v24 == 3)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v24);
  }

  uint64_t v25 = type metadata accessor for ICUCurrencyNumberFormatter.Signature(0LL);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  outlined init with take of LocalePreferences?( v2 + *(int *)(v25 + 28),  (uint64_t)v78,  (uint64_t *)&demangling cache variable for type metadata for LocalePreferences?);
  outlined init with take of LocalePreferences?( (uint64_t)v78,  (uint64_t)v79,  (uint64_t *)&demangling cache variable for type metadata for LocalePreferences?);
  if (_s10Foundation17LocalePreferencesVSgWOg((uint64_t)v79) == 1)
  {
    Hasher._combine(_:)(0);
    return;
  }

  outlined init with take of LocalePreferences?( (uint64_t)v78,  (uint64_t)&v60,  (uint64_t *)&demangling cache variable for type metadata for LocalePreferences?);
  Hasher._combine(_:)(1u);
  if (v60 == 2)
  {
    Swift::UInt8 v26 = 0;
  }

  else
  {
    Swift::UInt8 v26 = v60 & 1;
    Hasher._combine(_:)(1u);
  }

  Hasher._combine(_:)(v26);
  uint64_t v27 = v61;
  if (!v61)
  {
    Hasher._combine(_:)(0);
    outlined retain of LocalePreferences(&v60);
    v32 = &v60;
    goto LABEL_46;
  }

  Hasher._combine(_:)(1u);
  Hasher._combine(_:)(*(void *)(v27 + 16));
  uint64_t v28 = *(void *)(v27 + 16);
  if (!v28)
  {
    outlined init with take of LocalePreferences?( (uint64_t)v78,  (uint64_t)v59,  (uint64_t *)&demangling cache variable for type metadata for LocalePreferences?);
    outlined retain of LocalePreferences?( (uint64_t)v78,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined copy of LocalePreferences?);
    v32 = (uint64_t *)v59;
LABEL_46:
    outlined retain of LocalePreferences(v32);
    if (!v62) {
      goto LABEL_40;
    }
    goto LABEL_47;
  }

  outlined retain of LocalePreferences?( (uint64_t)v78,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined copy of LocalePreferences?);
  outlined retain of LocalePreferences?( (uint64_t)v78,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined copy of LocalePreferences?);
  swift_bridgeObjectRetain();
  uint64_t v29 = v27 + 40;
  do
  {
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    v29 += 16LL;
    --v28;
  }

  while (v28);
  swift_bridgeObjectRelease();
  if (!v62)
  {
LABEL_40:
    Hasher._combine(_:)(0);
    if (!v63) {
      goto LABEL_41;
    }
    goto LABEL_48;
  }

Swift::Int ICUCurrencyNumberFormatter.Signature.hashValue.getter()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for FloatingPointRoundingRule();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1895F8858](v2);
  uint64_t v5 = &v58[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
  MEMORY[0x1895F8858](v6);
  uint64_t v8 = &v58[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  Hasher.init(_seed:)();
  if (*(_BYTE *)(v0 + 8) == 1)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    Swift::UInt64 v9 = *(void *)v0;
    Hasher._combine(_:)(1u);
    if ((v9 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
      Swift::UInt64 v10 = v9;
    }
    else {
      Swift::UInt64 v10 = 0LL;
    }
    Hasher._combine(_:)(v10);
  }

  outlined init with take of LocalePreferences?( v0 + 16,  (uint64_t)v80,  &demangling cache variable for type metadata for NumberFormatStyleConfiguration.Precision?);
  specialized Optional<A>.hash(into:)();
  int v11 = *(unsigned __int8 *)(v0 + 73);
  if (v11 == 2)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    Swift::UInt v12 = v11 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v12);
  }

  unint64_t v13 = *(unsigned int *)(v0 + 74);
  if (*(_DWORD *)(v0 + 74) == 2)
  {
    LOBYTE(v14) = 0;
  }

  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v13 & 1);
    Hasher._combine(_:)((v13 >> 8) & 1);
    Hasher._combine(_:)(WORD1(v13) & 1);
    unsigned int v14 = BYTE3(v13) & 1;
  }

  Hasher._combine(_:)(v14);
  int v15 = *(unsigned __int8 *)(v0 + 78);
  if (v15 == 2)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    Swift::UInt v16 = v15 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v16);
  }

  int v17 = (int *)type metadata accessor for CurrencyFormatStyleConfiguration.Collection(0LL);
  outlined init with copy of (Hashable & Sendable)?( v0 + v17[9],  (uint64_t)v8,  &demangling cache variable for type metadata for FloatingPointRoundingRule?);
  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v3 + 48))(v8, 1LL, v2) == 1)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v3 + 32))(v5, v8, v2);
    Hasher._combine(_:)(1u);
    dispatch thunk of Hashable.hash(into:)();
    (*(void (**)(_BYTE *, uint64_t))(v3 + 8))(v5, v2);
  }

  uint64_t v18 = v0 + v17[10];
  int v19 = *(unsigned __int8 *)(v18 + 8);
  if (v19 == 255)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    Swift::UInt v20 = *(void *)v18;
    Hasher._combine(_:)(1u);
    if ((v19 & 1) != 0)
    {
      Hasher._combine(_:)(1uLL);
      if ((v20 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
        Swift::UInt64 v21 = v20;
      }
      else {
        Swift::UInt64 v21 = 0LL;
      }
      Hasher._combine(_:)(v21);
    }

    else
    {
      Hasher._combine(_:)(0LL);
      Hasher._combine(_:)(v20);
    }
  }

  Hasher._combine(_:)(*(unsigned __int8 *)(v0 + v17[11]));
  Swift::UInt v22 = *(unsigned __int8 *)(v0 + v17[12]);
  if (v22 == 3)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v22);
  }

  uint64_t v23 = type metadata accessor for ICUCurrencyNumberFormatter.Signature(0LL);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  outlined init with take of LocalePreferences?( v1 + *(int *)(v23 + 28),  (uint64_t)v77,  (uint64_t *)&demangling cache variable for type metadata for LocalePreferences?);
  outlined init with take of LocalePreferences?( (uint64_t)v77,  (uint64_t)v78,  (uint64_t *)&demangling cache variable for type metadata for LocalePreferences?);
  if (_s10Foundation17LocalePreferencesVSgWOg((uint64_t)v78) == 1)
  {
    Hasher._combine(_:)(0);
    return Hasher._finalize()();
  }

  outlined init with take of LocalePreferences?( (uint64_t)v77,  (uint64_t)&v59,  (uint64_t *)&demangling cache variable for type metadata for LocalePreferences?);
  Hasher._combine(_:)(1u);
  if (v59 == 2)
  {
    Swift::UInt8 v24 = 0;
  }

  else
  {
    Swift::UInt8 v24 = v59 & 1;
    Hasher._combine(_:)(1u);
  }

  Hasher._combine(_:)(v24);
  uint64_t v25 = v60;
  if (!v60)
  {
    Hasher._combine(_:)(0);
    outlined retain of LocalePreferences(&v59);
    uint64_t v30 = &v59;
    goto LABEL_46;
  }

  Hasher._combine(_:)(1u);
  Hasher._combine(_:)(*(void *)(v25 + 16));
  uint64_t v26 = *(void *)(v25 + 16);
  if (!v26)
  {
    outlined init with take of LocalePreferences?( (uint64_t)v77,  (uint64_t)v58,  (uint64_t *)&demangling cache variable for type metadata for LocalePreferences?);
    outlined retain of LocalePreferences?( (uint64_t)v77,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined copy of LocalePreferences?);
    uint64_t v30 = (uint64_t *)v58;
LABEL_46:
    outlined retain of LocalePreferences(v30);
    if (!v61) {
      goto LABEL_40;
    }
    goto LABEL_47;
  }

  outlined retain of LocalePreferences?( (uint64_t)v77,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined copy of LocalePreferences?);
  outlined retain of LocalePreferences?( (uint64_t)v77,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined copy of LocalePreferences?);
  swift_bridgeObjectRetain();
  uint64_t v27 = v25 + 40;
  do
  {
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    v27 += 16LL;
    --v26;
  }

  while (v26);
  swift_bridgeObjectRelease();
  if (!v61)
  {
LABEL_40:
    Hasher._combine(_:)(0);
    if (!v62) {
      goto LABEL_41;
    }
    goto LABEL_48;
  }

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance ICUCurrencyNumberFormatter.Signature( uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for FloatingPointRoundingRule();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1895F8858](v4);
  uint64_t v7 = &v58[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
  MEMORY[0x1895F8858](v8);
  Swift::UInt64 v10 = &v58[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  Hasher.init(_seed:)();
  if (*(_BYTE *)(v2 + 8) == 1)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    Swift::UInt64 v11 = *(void *)v2;
    Hasher._combine(_:)(1u);
    if ((v11 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
      Swift::UInt64 v12 = v11;
    }
    else {
      Swift::UInt64 v12 = 0LL;
    }
    Hasher._combine(_:)(v12);
  }

  outlined init with take of LocalePreferences?( v2 + 16,  (uint64_t)v80,  &demangling cache variable for type metadata for NumberFormatStyleConfiguration.Precision?);
  specialized Optional<A>.hash(into:)();
  int v13 = *(unsigned __int8 *)(v2 + 73);
  if (v13 == 2)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    Swift::UInt v14 = v13 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v14);
  }

  unint64_t v15 = *(unsigned int *)(v2 + 74);
  if (*(_DWORD *)(v2 + 74) == 2)
  {
    LOBYTE(v16) = 0;
  }

  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v15 & 1);
    Hasher._combine(_:)((v15 >> 8) & 1);
    Hasher._combine(_:)(WORD1(v15) & 1);
    unsigned int v16 = BYTE3(v15) & 1;
  }

  Hasher._combine(_:)(v16);
  int v17 = *(unsigned __int8 *)(v2 + 78);
  if (v17 == 2)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    Swift::UInt v18 = v17 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v18);
  }

  int v19 = (int *)type metadata accessor for CurrencyFormatStyleConfiguration.Collection(0LL);
  outlined init with copy of (Hashable & Sendable)?( v2 + v19[9],  (uint64_t)v10,  &demangling cache variable for type metadata for FloatingPointRoundingRule?);
  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v5 + 48))(v10, 1LL, v4) == 1)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v5 + 32))(v7, v10, v4);
    Hasher._combine(_:)(1u);
    dispatch thunk of Hashable.hash(into:)();
    (*(void (**)(_BYTE *, uint64_t))(v5 + 8))(v7, v4);
  }

  uint64_t v20 = v2 + v19[10];
  int v21 = *(unsigned __int8 *)(v20 + 8);
  if (v21 == 255)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    Swift::UInt v22 = *(void *)v20;
    Hasher._combine(_:)(1u);
    if ((v21 & 1) != 0)
    {
      Hasher._combine(_:)(1uLL);
      if ((v22 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
        Swift::UInt64 v23 = v22;
      }
      else {
        Swift::UInt64 v23 = 0LL;
      }
      Hasher._combine(_:)(v23);
    }

    else
    {
      Hasher._combine(_:)(0LL);
      Hasher._combine(_:)(v22);
    }
  }

  Hasher._combine(_:)(*(unsigned __int8 *)(v2 + v19[11]));
  Swift::UInt v24 = *(unsigned __int8 *)(v2 + v19[12]);
  if (v24 == 3)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v24);
  }

  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  outlined init with take of LocalePreferences?( v2 + *(int *)(a2 + 28),  (uint64_t)v77,  (uint64_t *)&demangling cache variable for type metadata for LocalePreferences?);
  outlined init with take of LocalePreferences?( (uint64_t)v77,  (uint64_t)v78,  (uint64_t *)&demangling cache variable for type metadata for LocalePreferences?);
  if (_s10Foundation17LocalePreferencesVSgWOg((uint64_t)v78) == 1)
  {
    Hasher._combine(_:)(0);
    return Hasher._finalize()();
  }

  outlined init with take of LocalePreferences?( (uint64_t)v77,  (uint64_t)&v59,  (uint64_t *)&demangling cache variable for type metadata for LocalePreferences?);
  Hasher._combine(_:)(1u);
  if (v59 == 2)
  {
    Swift::UInt8 v25 = 0;
  }

  else
  {
    Swift::UInt8 v25 = v59 & 1;
    Hasher._combine(_:)(1u);
  }

  Hasher._combine(_:)(v25);
  uint64_t v26 = v60;
  if (!v60)
  {
    Hasher._combine(_:)(0);
    uint64_t v31 = &v59;
    goto LABEL_46;
  }

  Hasher._combine(_:)(1u);
  Hasher._combine(_:)(*(void *)(v26 + 16));
  uint64_t v27 = *(void *)(v26 + 16);
  if (!v27)
  {
    outlined init with take of LocalePreferences?( (uint64_t)v77,  (uint64_t)v58,  (uint64_t *)&demangling cache variable for type metadata for LocalePreferences?);
    uint64_t v31 = (uint64_t *)v58;
LABEL_46:
    outlined retain of LocalePreferences(v31);
    outlined retain of LocalePreferences(&v59);
    if (!v61) {
      goto LABEL_40;
    }
    goto LABEL_47;
  }

  outlined retain of LocalePreferences?( (uint64_t)v77,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined copy of LocalePreferences?);
  outlined retain of LocalePreferences?( (uint64_t)v77,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined copy of LocalePreferences?);
  swift_bridgeObjectRetain();
  uint64_t v28 = v26 + 40;
  do
  {
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    v28 += 16LL;
    --v27;
  }

  while (v27);
  swift_bridgeObjectRelease();
  if (!v61)
  {
LABEL_40:
    Hasher._combine(_:)(0);
    if (!v62) {
      goto LABEL_41;
    }
    goto LABEL_48;
  }

uint64_t static ICUCurrencyNumberFormatter.create<A>(for:)(void *a1, uint64_t a2, uint64_t a3)
{
  return static ICUCurrencyNumberFormatter.create<A>(for:)( a1,  a2,  a3,  (uint64_t (*)(void, uint64_t, uint64_t, __n128))type metadata accessor for IntegerFormatStyle.Currency);
}

{
  return static ICUCurrencyNumberFormatter.create<A>(for:)( a1,  a2,  a3,  (uint64_t (*)(void, uint64_t, uint64_t, __n128))type metadata accessor for FloatingPointFormatStyle.Currency);
}

uint64_t static ICUCurrencyNumberFormatter.create<A>(for:)( void *a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void, uint64_t, uint64_t, __n128))
{
  void (*v21)(void *__return_ptr, uint64_t, uint64_t);
  char *v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  os_unfair_lock_s *v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  os_unfair_lock_s *v37;
  uint64_t v38;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v40;
  char v41;
  unint64_t v42;
  uint64_t v43;
  BOOL v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  unint64_t v53;
  int *v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  unint64_t v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  int64_t v63;
  unint64_t v64;
  int64_t v65;
  int64_t v66;
  uint64_t v67;
  uint64_t result;
  uint64_t v69;
  unint64_t v70;
  int64_t v71;
  char *v72;
  uint64_t v73;
  int *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  os_unfair_lock_s *v78;
  char *v79;
  void v80[19];
  void *v81;
  void v82[18];
  _BYTE v83[152];
  uint64_t v8 = (int *)type metadata accessor for ICUCurrencyNumberFormatter.Signature(0LL);
  char v75 = *((void *)v8 - 1);
  MEMORY[0x1895F8858](v8);
  char v76 = (uint64_t)&v69 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __n128 v11 = MEMORY[0x1895F8858](v10);
  int v13 = (char *)&v69 - v12;
  v78 = (os_unfair_lock_s *)((char *)a1 + *(int *)(a4(0LL, a2, a3, v11) + 40));
  uint64_t v14 = a1[3];
  v79 = (char *)a1[2];
  uint64_t v15 = a1[1];
  uint64_t ObjectType = swift_getObjectType();
  int v17 = *(uint64_t (**)(uint64_t, uint64_t))(v15 + 472);
  swift_bridgeObjectRetain();
  swift_unknownObjectRetain();
  uint64_t v18 = v17(ObjectType, v15);
  uint64_t v20 = v19;
  swift_unknownObjectRelease();
  int v21 = *(void (**)(void *__return_ptr, uint64_t, uint64_t))(v15 + 464);
  swift_unknownObjectRetain();
  v21(v82, ObjectType, v15);
  swift_unknownObjectRelease();
  outlined init with take of LocalePreferences?( (uint64_t)v82,  (uint64_t)v83,  (uint64_t *)&demangling cache variable for type metadata for LocalePreferences?);
  outlined init with copy of ICUNumberFormatter.Signature( (uint64_t)v78,  (uint64_t)v13,  type metadata accessor for CurrencyFormatStyleConfiguration.Collection);
  Swift::UInt v22 = &v13[v8[5]];
  *(void *)Swift::UInt v22 = v79;
  *((void *)v22 + 1) = v14;
  Swift::UInt64 v23 = (uint64_t *)&v13[v8[6]];
  void *v23 = v18;
  v23[1] = v20;
  char v74 = v8;
  Swift::UInt v24 = (uint64_t)&v13[v8[7]];
  outlined init with take of LocalePreferences?( (uint64_t)v83,  v24,  (uint64_t *)&demangling cache variable for type metadata for LocalePreferences?);
  if (one-time initialization token for cache != -1) {
    swift_once();
  }
  uint64_t v26 = static ICUCurrencyNumberFormatter.cache;
  Swift::UInt8 v25 = *(void *)algn_18C5CBA68;
  uint64_t v27 = *(void *)algn_18C5CBA68 + 16LL;
  uint64_t v28 = (os_unfair_lock_s *)(*(void *)algn_18C5CBA68 + 24LL);
  swift_retain_n();
  os_unfair_lock_lock(v28);
  specialized closure #1 in FormatterCache.formatter(for:creator:)(v27, (uint64_t)v13, (uint64_t *)&v81);
  os_unfair_lock_unlock(v28);
  swift_release();
  uint64_t v29 = v81;
  if (v81 != (void *)1) {
    goto LABEL_53;
  }
  v79 = v13;
  uint64_t v30 = specialized static ICUCurrencyNumberFormatter.skeleton(for:)((uint64_t)v13);
  uint64_t v31 = v26;
  v33 = v32;
  v78 = v28;
  v35 = *v23;
  v34 = v23[1];
  outlined init with take of LocalePreferences?( v24,  (uint64_t)v82,  (uint64_t *)&demangling cache variable for type metadata for LocalePreferences?);
  swift_allocObject();
  outlined init with take of LocalePreferences?( (uint64_t)v82,  (uint64_t)v80,  (uint64_t *)&demangling cache variable for type metadata for LocalePreferences?);
  swift_bridgeObjectRetain();
  outlined retain of LocalePreferences?( (uint64_t)v82,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined copy of LocalePreferences?);
  id v36 = v34;
  id v37 = v78;
  uint64_t v29 = ICUNumberFormatterBase.init(skeleton:localeIdentifier:preferences:)(v30, v33, v35, v36, (uint64_t)v80);
  swift_retain();
  os_unfair_lock_lock(v37);
  id v38 = *(void *)(*(void *)(v25 + 16) + 16LL);
  char v77 = *(void *)(v25 + 16);
  if (v31 >= v38) {
    swift_bridgeObjectRetain();
  }
  else {
    *(void *)uint64_t v27 = MEMORY[0x18961AFF0];
  }
  swift_retain();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v80[0] = *(void *)v27;
  id v40 = v80[0];
  *(void *)uint64_t v27 = 0x8000000000000000LL;
  id v42 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v79);
  id v43 = *(void *)(v40 + 16);
  id v44 = (v41 & 1) == 0;
  id v45 = v43 + v44;
  if (__OFADD__(v43, v44))
  {
    __break(1u);
  }

  else
  {
    LOBYTE(v27) = v41;
    if (*(void *)(v40 + 24) < v45)
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)( v45,  isUniquelyReferenced_nonNull_native);
      int v13 = v79;
      id v46 = v80[0];
      id v47 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v79);
      if ((v27 & 1) != (v48 & 1)) {
        goto LABEL_56;
      }
      id v42 = v47;
      if ((v27 & 1) == 0) {
        goto LABEL_51;
      }
LABEL_14:
      id v49 = *(void *)(v46 + 56);
      swift_release();
      *(void *)(v49 + 8 * v42) = v29;
LABEL_52:
      *(void *)(v25 + 16) = v46;
      swift_bridgeObjectRelease();
      os_unfair_lock_unlock(v37);
      swift_release();
      swift_bridgeObjectRelease();
      outlined consume of ICUDateIntervalFormatter??((uint64_t)v81);
LABEL_53:
      swift_release();
      outlined destroy of ICUNumberFormatter.Signature( (uint64_t)v13,  type metadata accessor for ICUCurrencyNumberFormatter.Signature);
      return (uint64_t)v29;
    }

    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
    {
      id v46 = v40;
      int v13 = v79;
      if ((v41 & 1) != 0) {
        goto LABEL_14;
      }
LABEL_51:
      v67 = v76;
      outlined init with copy of ICUNumberFormatter.Signature( (uint64_t)v13,  v76,  type metadata accessor for ICUCurrencyNumberFormatter.Signature);
      specialized _NativeDictionary._insert(at:key:value:)(v42, v67, (uint64_t)v29, (void *)v46);
      goto LABEL_52;
    }
  }

  uint64_t v70 = v42;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<ICUCurrencyNumberFormatter.Signature, ICUCurrencyNumberFormatter?>);
  uint64_t v50 = static _DictionaryStorage.copy(original:)();
  id v46 = v50;
  if (!*(void *)(v40 + 16))
  {
LABEL_50:
    swift_bridgeObjectRelease();
    int v13 = v79;
    id v42 = v70;
    if ((v27 & 1) != 0) {
      goto LABEL_14;
    }
    goto LABEL_51;
  }

  uint64_t v51 = (char *)(v50 + 64);
  Swift::UInt v52 = 1LL << *(_BYTE *)(v46 + 32);
  uint64_t v72 = (char *)(v40 + 64);
  Swift::UInt v53 = (unint64_t)(v52 + 63) >> 6;
  if (v46 != v40 || v51 >= &v72[8 * v53]) {
    memmove(v51, v72, 8 * v53);
  }
  Swift::UInt8 v54 = 0LL;
  *(void *)(v46 + 16) = *(void *)(v40 + 16);
  Swift::UInt8 v55 = 1LL << *(_BYTE *)(v40 + 32);
  Swift::UInt8 v56 = -1LL;
  if (v55 < 64) {
    Swift::UInt8 v56 = ~(-1LL << v55);
  }
  Swift::UInt8 v57 = v56 & *(void *)(v40 + 64);
  uint64_t v71 = (unint64_t)(v55 + 63) >> 6;
  while (1)
  {
    id v37 = v78;
    if (v57)
    {
      char v73 = (v57 - 1) & v57;
      char v74 = v54;
      v58 = __clz(__rbit64(v57)) | ((void)v54 << 6);
      goto LABEL_24;
    }

    uint64_t v63 = (int64_t)v54 + 1;
    if (__OFADD__(v54, 1LL))
    {
      __break(1u);
      goto LABEL_55;
    }

    if (v63 >= v71) {
      goto LABEL_50;
    }
    uint64_t v64 = *(void *)&v72[8 * v63];
    uint64_t v65 = (int64_t)v54 + 1;
    if (!v64)
    {
      uint64_t v65 = v63 + 1;
      if (v63 + 1 >= v71) {
        goto LABEL_50;
      }
      uint64_t v64 = *(void *)&v72[8 * v65];
      if (!v64)
      {
        uint64_t v65 = v63 + 2;
        if (v63 + 2 >= v71) {
          goto LABEL_50;
        }
        uint64_t v64 = *(void *)&v72[8 * v65];
        if (!v64)
        {
          uint64_t v65 = v63 + 3;
          if (v63 + 3 >= v71) {
            goto LABEL_50;
          }
          uint64_t v64 = *(void *)&v72[8 * v65];
          if (!v64)
          {
            uint64_t v65 = v63 + 4;
            if (v63 + 4 >= v71) {
              goto LABEL_50;
            }
            uint64_t v64 = *(void *)&v72[8 * v65];
            if (!v64)
            {
              uint64_t v65 = v63 + 5;
              if (v63 + 5 >= v71) {
                goto LABEL_50;
              }
              uint64_t v64 = *(void *)&v72[8 * v65];
              if (!v64)
              {
                uint64_t v65 = v63 + 6;
                if (v63 + 6 >= v71) {
                  goto LABEL_50;
                }
                uint64_t v64 = *(void *)&v72[8 * v65];
                if (!v64)
                {
                  uint64_t v65 = v63 + 7;
                  if (v63 + 7 >= v71) {
                    goto LABEL_50;
                  }
                  uint64_t v64 = *(void *)&v72[8 * v65];
                  if (!v64) {
                    break;
                  }
                }
              }
            }
          }
        }
      }
    }

uint64_t type metadata accessor for ICUCurrencyNumberFormatter()
{
  return objc_opt_self();
}

void ICUNumberFormatter.Signature.hash(into:)(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v59 = a2;
  uint64_t v3 = v2;
  uint64_t v5 = type metadata accessor for FloatingPointRoundingRule();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1895F8858](v5);
  uint64_t v8 = &v60[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
  MEMORY[0x1895F8858](v9);
  __n128 v11 = &v60[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  if (*(_BYTE *)(v2 + 8) == 1)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    Swift::UInt64 v12 = *(void *)v2;
    Hasher._combine(_:)(1u);
    if ((v12 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
      Swift::UInt64 v13 = v12;
    }
    else {
      Swift::UInt64 v13 = 0LL;
    }
    Hasher._combine(_:)(v13);
  }

  outlined init with take of LocalePreferences?( v2 + 16,  (uint64_t)v81,  &demangling cache variable for type metadata for NumberFormatStyleConfiguration.Precision?);
  specialized Optional<A>.hash(into:)();
  int v14 = *(unsigned __int8 *)(v2 + 73);
  if (v14 == 2)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    Swift::UInt v15 = v14 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v15);
  }

  int v16 = *(unsigned __int16 *)(v2 + 74);
  unsigned int v17 = v16 | (*(unsigned __int8 *)(v2 + 76) << 16);
  if (v16 == 2)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v17 & 1);
    Hasher._combine(_:)((v17 >> 8) & 1);
    Hasher._combine(_:)(HIWORD(v17) & 1);
  }

  int v18 = *(unsigned __int8 *)(v2 + 77);
  if (v18 == 2)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    Swift::UInt v19 = v18 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v19);
  }

  uint64_t v20 = (int *)type metadata accessor for NumberFormatStyleConfiguration.Collection(0LL);
  outlined init with copy of (Hashable & Sendable)?( v2 + v20[9],  (uint64_t)v11,  &demangling cache variable for type metadata for FloatingPointRoundingRule?);
  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v6 + 48))(v11, 1LL, v5) == 1)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v6 + 32))(v8, v11, v5);
    Hasher._combine(_:)(1u);
    dispatch thunk of Hashable.hash(into:)();
    (*(void (**)(_BYTE *, uint64_t))(v6 + 8))(v8, v5);
  }

  uint64_t v21 = v2 + v20[10];
  int v22 = *(unsigned __int8 *)(v21 + 8);
  if (v22 == 255)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    Swift::UInt v23 = *(void *)v21;
    Hasher._combine(_:)(1u);
    if ((v22 & 1) != 0)
    {
      Hasher._combine(_:)(1uLL);
      if ((v23 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
        Swift::UInt64 v24 = v23;
      }
      else {
        Swift::UInt64 v24 = 0LL;
      }
      Hasher._combine(_:)(v24);
    }

    else
    {
      Hasher._combine(_:)(0LL);
      Hasher._combine(_:)(v23);
    }
  }

  Swift::UInt v25 = *(unsigned __int8 *)(v2 + v20[11]);
  if (v25 == 3)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v25);
  }

  uint64_t v26 = v59(0LL);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  outlined init with take of LocalePreferences?( v3 + *(int *)(v26 + 24),  (uint64_t)v79,  (uint64_t *)&demangling cache variable for type metadata for LocalePreferences?);
  outlined init with take of LocalePreferences?( (uint64_t)v79,  (uint64_t)v80,  (uint64_t *)&demangling cache variable for type metadata for LocalePreferences?);
  if (_s10Foundation17LocalePreferencesVSgWOg((uint64_t)v80) == 1)
  {
    Hasher._combine(_:)(0);
    return;
  }

  outlined init with take of LocalePreferences?( (uint64_t)v79,  (uint64_t)&v61,  (uint64_t *)&demangling cache variable for type metadata for LocalePreferences?);
  Hasher._combine(_:)(1u);
  if (v61 == 2)
  {
    Swift::UInt8 v27 = 0;
  }

  else
  {
    Swift::UInt8 v27 = v61 & 1;
    Hasher._combine(_:)(1u);
  }

  Hasher._combine(_:)(v27);
  uint64_t v28 = v62;
  if (!v62)
  {
    Hasher._combine(_:)(0);
    outlined retain of LocalePreferences(&v61);
    v33 = &v61;
    goto LABEL_46;
  }

  Hasher._combine(_:)(1u);
  Hasher._combine(_:)(*(void *)(v28 + 16));
  uint64_t v29 = *(void *)(v28 + 16);
  if (!v29)
  {
    outlined init with take of LocalePreferences?( (uint64_t)v79,  (uint64_t)v60,  (uint64_t *)&demangling cache variable for type metadata for LocalePreferences?);
    outlined retain of LocalePreferences?( (uint64_t)v79,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined copy of LocalePreferences?);
    v33 = (uint64_t *)v60;
LABEL_46:
    outlined retain of LocalePreferences(v33);
    if (!v63) {
      goto LABEL_40;
    }
    goto LABEL_47;
  }

  outlined retain of LocalePreferences?( (uint64_t)v79,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined copy of LocalePreferences?);
  outlined retain of LocalePreferences?( (uint64_t)v79,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined copy of LocalePreferences?);
  swift_bridgeObjectRetain();
  uint64_t v30 = v28 + 40;
  do
  {
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    v30 += 16LL;
    --v29;
  }

  while (v29);
  swift_bridgeObjectRelease();
  if (!v63)
  {
LABEL_40:
    Hasher._combine(_:)(0);
    if (!v64) {
      goto LABEL_41;
    }
    goto LABEL_48;
  }

Swift::Int ICUNumberFormatter.Signature.hashValue.getter(uint64_t (*a1)(void))
{
  uint64_t v3 = v1;
  uint64_t v4 = type metadata accessor for FloatingPointRoundingRule();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1895F8858](v4);
  uint64_t v7 = &v59[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
  MEMORY[0x1895F8858](v8);
  uint64_t v10 = &v59[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  Hasher.init(_seed:)();
  if (*(_BYTE *)(v1 + 8) == 1)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    Swift::UInt64 v11 = *(void *)v1;
    Hasher._combine(_:)(1u);
    if ((v11 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
      Swift::UInt64 v12 = v11;
    }
    else {
      Swift::UInt64 v12 = 0LL;
    }
    Hasher._combine(_:)(v12);
  }

  outlined init with take of LocalePreferences?( v1 + 16,  (uint64_t)v81,  &demangling cache variable for type metadata for NumberFormatStyleConfiguration.Precision?);
  specialized Optional<A>.hash(into:)();
  int v13 = *(unsigned __int8 *)(v1 + 73);
  if (v13 == 2)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    Swift::UInt v14 = v13 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v14);
  }

  int v15 = *(unsigned __int16 *)(v1 + 74);
  unsigned int v16 = v15 | (*(unsigned __int8 *)(v1 + 76) << 16);
  if (v15 == 2)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v16 & 1);
    Hasher._combine(_:)((v16 >> 8) & 1);
    Hasher._combine(_:)(HIWORD(v16) & 1);
  }

  int v17 = *(unsigned __int8 *)(v1 + 77);
  if (v17 == 2)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    Swift::UInt v18 = v17 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v18);
  }

  Swift::UInt v19 = (int *)type metadata accessor for NumberFormatStyleConfiguration.Collection(0LL);
  outlined init with copy of (Hashable & Sendable)?( v1 + v19[9],  (uint64_t)v10,  &demangling cache variable for type metadata for FloatingPointRoundingRule?);
  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v5 + 48))(v10, 1LL, v4) == 1)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v5 + 32))(v7, v10, v4);
    Hasher._combine(_:)(1u);
    dispatch thunk of Hashable.hash(into:)();
    (*(void (**)(_BYTE *, uint64_t))(v5 + 8))(v7, v4);
  }

  uint64_t v20 = v1 + v19[10];
  int v21 = *(unsigned __int8 *)(v20 + 8);
  if (v21 == 255)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    Swift::UInt v22 = *(void *)v20;
    Hasher._combine(_:)(1u);
    if ((v21 & 1) != 0)
    {
      Hasher._combine(_:)(1uLL);
      if ((v22 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
        Swift::UInt64 v23 = v22;
      }
      else {
        Swift::UInt64 v23 = 0LL;
      }
      Hasher._combine(_:)(v23);
    }

    else
    {
      Hasher._combine(_:)(0LL);
      Hasher._combine(_:)(v22);
    }
  }

  Swift::UInt v24 = *(unsigned __int8 *)(v1 + v19[11]);
  if (v24 == 3)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v24);
  }

  uint64_t v25 = a1(0LL);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  outlined init with take of LocalePreferences?( v3 + *(int *)(v25 + 24),  (uint64_t)v78,  (uint64_t *)&demangling cache variable for type metadata for LocalePreferences?);
  outlined init with take of LocalePreferences?( (uint64_t)v78,  (uint64_t)v79,  (uint64_t *)&demangling cache variable for type metadata for LocalePreferences?);
  if (_s10Foundation17LocalePreferencesVSgWOg((uint64_t)v79) == 1)
  {
    Hasher._combine(_:)(0);
    return Hasher._finalize()();
  }

  outlined init with take of LocalePreferences?( (uint64_t)v78,  (uint64_t)&v60,  (uint64_t *)&demangling cache variable for type metadata for LocalePreferences?);
  Hasher._combine(_:)(1u);
  if (v60 == 2)
  {
    Swift::UInt8 v26 = 0;
  }

  else
  {
    Swift::UInt8 v26 = v60 & 1;
    Hasher._combine(_:)(1u);
  }

  Hasher._combine(_:)(v26);
  uint64_t v27 = v61;
  if (!v61)
  {
    Hasher._combine(_:)(0);
    outlined retain of LocalePreferences(&v60);
    uint64_t v32 = &v60;
    goto LABEL_46;
  }

  Hasher._combine(_:)(1u);
  Hasher._combine(_:)(*(void *)(v27 + 16));
  uint64_t v28 = *(void *)(v27 + 16);
  if (!v28)
  {
    outlined init with take of LocalePreferences?( (uint64_t)v78,  (uint64_t)v59,  (uint64_t *)&demangling cache variable for type metadata for LocalePreferences?);
    outlined retain of LocalePreferences?( (uint64_t)v78,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined copy of LocalePreferences?);
    uint64_t v32 = (uint64_t *)v59;
LABEL_46:
    outlined retain of LocalePreferences(v32);
    if (!v62) {
      goto LABEL_40;
    }
    goto LABEL_47;
  }

  outlined retain of LocalePreferences?( (uint64_t)v78,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined copy of LocalePreferences?);
  outlined retain of LocalePreferences?( (uint64_t)v78,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined copy of LocalePreferences?);
  swift_bridgeObjectRetain();
  uint64_t v29 = v27 + 40;
  do
  {
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    v29 += 16LL;
    --v28;
  }

  while (v28);
  swift_bridgeObjectRelease();
  if (!v62)
  {
LABEL_40:
    Hasher._combine(_:)(0);
    if (!v63) {
      goto LABEL_41;
    }
    goto LABEL_48;
  }

Swift::Int protocol witness for Hashable.hashValue.getter in conformance ICUPercentNumberFormatter.Signature()
{
  return ICUNumberFormatter.Signature.hashValue.getter(type metadata accessor for ICUPercentNumberFormatter.Signature);
}

void protocol witness for Hashable.hash(into:) in conformance ICUPercentNumberFormatter.Signature( uint64_t a1)
{
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance ICUNumberFormatter.Signature( uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for FloatingPointRoundingRule();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1895F8858](v4);
  uint64_t v7 = &v58[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
  MEMORY[0x1895F8858](v8);
  uint64_t v10 = &v58[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  Hasher.init(_seed:)();
  if (*(_BYTE *)(v2 + 8) == 1)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    Swift::UInt64 v11 = *(void *)v2;
    Hasher._combine(_:)(1u);
    if ((v11 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
      Swift::UInt64 v12 = v11;
    }
    else {
      Swift::UInt64 v12 = 0LL;
    }
    Hasher._combine(_:)(v12);
  }

  outlined init with take of LocalePreferences?( v2 + 16,  (uint64_t)v80,  &demangling cache variable for type metadata for NumberFormatStyleConfiguration.Precision?);
  specialized Optional<A>.hash(into:)();
  int v13 = *(unsigned __int8 *)(v2 + 73);
  if (v13 == 2)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    Swift::UInt v14 = v13 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v14);
  }

  int v15 = *(unsigned __int16 *)(v2 + 74);
  unsigned int v16 = v15 | (*(unsigned __int8 *)(v2 + 76) << 16);
  if (v15 == 2)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v16 & 1);
    Hasher._combine(_:)((v16 >> 8) & 1);
    Hasher._combine(_:)(HIWORD(v16) & 1);
  }

  int v17 = *(unsigned __int8 *)(v2 + 77);
  if (v17 == 2)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    Swift::UInt v18 = v17 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v18);
  }

  Swift::UInt v19 = (int *)type metadata accessor for NumberFormatStyleConfiguration.Collection(0LL);
  outlined init with copy of (Hashable & Sendable)?( v2 + v19[9],  (uint64_t)v10,  &demangling cache variable for type metadata for FloatingPointRoundingRule?);
  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v5 + 48))(v10, 1LL, v4) == 1)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v5 + 32))(v7, v10, v4);
    Hasher._combine(_:)(1u);
    dispatch thunk of Hashable.hash(into:)();
    (*(void (**)(_BYTE *, uint64_t))(v5 + 8))(v7, v4);
  }

  uint64_t v20 = v2 + v19[10];
  int v21 = *(unsigned __int8 *)(v20 + 8);
  if (v21 == 255)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    Swift::UInt v22 = *(void *)v20;
    Hasher._combine(_:)(1u);
    if ((v21 & 1) != 0)
    {
      Hasher._combine(_:)(1uLL);
      if ((v22 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
        Swift::UInt64 v23 = v22;
      }
      else {
        Swift::UInt64 v23 = 0LL;
      }
      Hasher._combine(_:)(v23);
    }

    else
    {
      Hasher._combine(_:)(0LL);
      Hasher._combine(_:)(v22);
    }
  }

  Swift::UInt v24 = *(unsigned __int8 *)(v2 + v19[11]);
  if (v24 == 3)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v24);
  }

  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  outlined init with take of LocalePreferences?( v2 + *(int *)(a2 + 24),  (uint64_t)v77,  (uint64_t *)&demangling cache variable for type metadata for LocalePreferences?);
  outlined init with take of LocalePreferences?( (uint64_t)v77,  (uint64_t)v78,  (uint64_t *)&demangling cache variable for type metadata for LocalePreferences?);
  if (_s10Foundation17LocalePreferencesVSgWOg((uint64_t)v78) == 1)
  {
    Hasher._combine(_:)(0);
    return Hasher._finalize()();
  }

  outlined init with take of LocalePreferences?( (uint64_t)v77,  (uint64_t)&v59,  (uint64_t *)&demangling cache variable for type metadata for LocalePreferences?);
  Hasher._combine(_:)(1u);
  if (v59 == 2)
  {
    Swift::UInt8 v25 = 0;
  }

  else
  {
    Swift::UInt8 v25 = v59 & 1;
    Hasher._combine(_:)(1u);
  }

  Hasher._combine(_:)(v25);
  uint64_t v26 = v60;
  if (!v60)
  {
    Hasher._combine(_:)(0);
    uint64_t v31 = &v59;
    goto LABEL_46;
  }

  Hasher._combine(_:)(1u);
  Hasher._combine(_:)(*(void *)(v26 + 16));
  uint64_t v27 = *(void *)(v26 + 16);
  if (!v27)
  {
    outlined init with take of LocalePreferences?( (uint64_t)v77,  (uint64_t)v58,  (uint64_t *)&demangling cache variable for type metadata for LocalePreferences?);
    uint64_t v31 = (uint64_t *)v58;
LABEL_46:
    outlined retain of LocalePreferences(v31);
    outlined retain of LocalePreferences(&v59);
    if (!v61) {
      goto LABEL_40;
    }
    goto LABEL_47;
  }

  outlined retain of LocalePreferences?( (uint64_t)v77,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined copy of LocalePreferences?);
  outlined retain of LocalePreferences?( (uint64_t)v77,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined copy of LocalePreferences?);
  swift_bridgeObjectRetain();
  uint64_t v28 = v26 + 40;
  do
  {
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    v28 += 16LL;
    --v27;
  }

  while (v27);
  swift_bridgeObjectRelease();
  if (!v61)
  {
LABEL_40:
    Hasher._combine(_:)(0);
    if (!v62) {
      goto LABEL_41;
    }
    goto LABEL_48;
  }

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance ICUPercentNumberFormatter.Signature( uint64_t a1, uint64_t a2)
{
  return specialized static ICUPercentNumberFormatter.Signature.== infix(_:_:)( a1,  a2,  type metadata accessor for ICUPercentNumberFormatter.Signature);
}

uint64_t static ICUPercentNumberFormatter._create(with:)(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for ICUPercentNumberFormatter.Signature(0LL);
  uint64_t v50 = *(void *)(v2 - 8);
  MEMORY[0x1895F8858](v2);
  uint64_t v51 = (uint64_t)&v43 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (one-time initialization token for cache != -1) {
    swift_once();
  }
  uint64_t v5 = static ICUPercentNumberFormatter.cache;
  uint64_t v4 = *(void *)algn_18C5CBA78;
  uint64_t v6 = *(void *)algn_18C5CBA78 + 16LL;
  uint64_t v7 = (os_unfair_lock_s *)(*(void *)algn_18C5CBA78 + 24LL);
  swift_retain_n();
  os_unfair_lock_lock(v7);
  uint64_t v8 = specialized closure #1 in FormatterCache.formatter(for:creator:)(v6, a1);
  os_unfair_lock_unlock(v7);
  swift_release();
  if (v8 != 1) {
    goto LABEL_17;
  }
  closure #1 in static ICUPercentNumberFormatter._create(with:)(a1, &v53);
  swift_retain();
  os_unfair_lock_lock(v7);
  uint64_t v9 = *(void *)(v4 + 16);
  if (v5 >= *(void *)(v9 + 16)) {
    swift_bridgeObjectRetain();
  }
  else {
    *(void *)uint64_t v6 = MEMORY[0x18961AFF0];
  }
  uint64_t v8 = v53;
  swift_retain();
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v52 = *(void *)v6;
  uint64_t v11 = v52;
  *(void *)uint64_t v6 = 0x8000000000000000LL;
  uint64_t v13 = specialized __RawDictionaryStorage.find<A>(_:)(a1);
  uint64_t v14 = *(void *)(v11 + 16);
  BOOL v15 = (v12 & 1) == 0;
  uint64_t v16 = v14 + v15;
  if (__OFADD__(v14, v15))
  {
    __break(1u);
  }

  else
  {
    LOBYTE(v6) = v12;
    if (*(void *)(v11 + 24) < v16)
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)( v16,  isUniquelyReferenced_nonNull_native);
      uint64_t v17 = v52;
      uint64_t v18 = specialized __RawDictionaryStorage.find<A>(_:)(a1);
      if ((v6 & 1) != (v19 & 1)) {
        goto LABEL_54;
      }
      uint64_t v13 = v18;
      goto LABEL_13;
    }

    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
    {
      uint64_t v17 = v11;
LABEL_13:
      if ((v6 & 1) != 0)
      {
        uint64_t v20 = *(void *)(v17 + 56);
        uint64_t v21 = 8 * v13;
        swift_release();
        *(void *)(v20 + v21) = v8;
      }

      else
      {
        uint64_t v22 = a1;
        uint64_t v23 = v51;
        unint64_t v24 = v13;
        outlined init with copy of ICUNumberFormatter.Signature( v22,  v51,  type metadata accessor for ICUPercentNumberFormatter.Signature);
        specialized _NativeDictionary._insert(at:key:value:)(v24, v23, v8, (void *)v17);
      }

      *(void *)(v4 + 16) = v17;
      swift_bridgeObjectRelease();
      os_unfair_lock_unlock(v7);
      swift_release();
      swift_bridgeObjectRelease();
      outlined consume of ICUDateIntervalFormatter??(1LL);
LABEL_17:
      swift_release();
      return v8;
    }
  }

  uint64_t v44 = v13;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<ICUPercentNumberFormatter.Signature, ICUPercentNumberFormatter?>);
  uint64_t v26 = static _DictionaryStorage.copy(original:)();
  uint64_t v17 = v26;
  if (!*(void *)(v11 + 16))
  {
LABEL_51:
    swift_bridgeObjectRelease();
    uint64_t v13 = v44;
    goto LABEL_13;
  }

  uint64_t v43 = v9;
  uint64_t v27 = (char *)(v26 + 64);
  uint64_t v28 = 1LL << *(_BYTE *)(v17 + 32);
  id v46 = (char *)(v11 + 64);
  unint64_t v29 = (unint64_t)(v28 + 63) >> 6;
  if (v17 != v11 || v27 >= &v46[8 * v29]) {
    memmove(v27, v46, 8 * v29);
  }
  int64_t v30 = 0LL;
  *(void *)(v17 + 16) = *(void *)(v11 + 16);
  uint64_t v31 = 1LL << *(_BYTE *)(v11 + 32);
  uint64_t v32 = -1LL;
  if (v31 < 64) {
    uint64_t v32 = ~(-1LL << v31);
  }
  unint64_t v33 = v32 & *(void *)(v11 + 64);
  int64_t v45 = (unint64_t)(v31 + 63) >> 6;
  uint64_t v34 = v51;
  while (1)
  {
    if (v33)
    {
      uint64_t v48 = (v33 - 1) & v33;
      int64_t v49 = v30;
      unint64_t v35 = __clz(__rbit64(v33)) | (v30 << 6);
      goto LABEL_27;
    }

    int64_t v39 = v30 + 1;
    if (__OFADD__(v30, 1LL))
    {
      __break(1u);
      goto LABEL_53;
    }

    if (v39 >= v45) {
      goto LABEL_51;
    }
    unint64_t v40 = *(void *)&v46[8 * v39];
    int64_t v41 = v30 + 1;
    if (!v40)
    {
      int64_t v41 = v39 + 1;
      if (v39 + 1 >= v45) {
        goto LABEL_51;
      }
      unint64_t v40 = *(void *)&v46[8 * v41];
      if (!v40)
      {
        int64_t v41 = v39 + 2;
        if (v39 + 2 >= v45) {
          goto LABEL_51;
        }
        unint64_t v40 = *(void *)&v46[8 * v41];
        if (!v40)
        {
          int64_t v41 = v39 + 3;
          if (v39 + 3 >= v45) {
            goto LABEL_51;
          }
          unint64_t v40 = *(void *)&v46[8 * v41];
          if (!v40)
          {
            if (v39 + 4 >= v45) {
              goto LABEL_51;
            }
            int64_t v41 = v39 + 4;
            unint64_t v40 = *(void *)&v46[8 * v39 + 32];
            if (!v40)
            {
              if (v39 + 5 >= v45) {
                goto LABEL_51;
              }
              int64_t v41 = v39 + 5;
              unint64_t v40 = *(void *)&v46[8 * v39 + 40];
              if (!v40)
              {
                if (v39 + 6 >= v45) {
                  goto LABEL_51;
                }
                int64_t v41 = v39 + 6;
                unint64_t v40 = *(void *)&v46[8 * v39 + 48];
                if (!v40) {
                  break;
                }
              }
            }
          }
        }
      }
    }

void *closure #1 in static ICUPercentNumberFormatter._create(with:)@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v4 = 0x746E6563726570LL;
  uint64_t v19 = 0x746E6563726570LL;
  unint64_t v20 = 0xE700000000000000LL;
  NumberFormatStyleConfiguration.Collection.skeleton.getter();
  uint64_t v6 = v5;
  uint64_t v8 = v7;
  if (String.count.getter() < 1)
  {
    swift_bridgeObjectRelease();
    unint64_t v11 = 0xE700000000000000LL;
  }

  else
  {
    v18[0] = 32LL;
    v18[1] = 0xE100000000000000LL;
    v9._countAndFlagsBits = v6;
    v9._object = v8;
    String.append(_:)(v9);
    swift_bridgeObjectRelease();
    v10._countAndFlagsBits = 32LL;
    v10._object = (void *)0xE100000000000000LL;
    String.append(_:)(v10);
    swift_bridgeObjectRelease();
    uint64_t v4 = v19;
    unint64_t v11 = v20;
  }

  uint64_t v12 = type metadata accessor for ICUPercentNumberFormatter.Signature(0LL);
  uint64_t v13 = (uint64_t *)(a1 + *(int *)(v12 + 20));
  uint64_t v14 = *v13;
  uint64_t v15 = v13[1];
  outlined init with take of LocalePreferences?( a1 + *(int *)(v12 + 24),  (uint64_t)v18,  (uint64_t *)&demangling cache variable for type metadata for LocalePreferences?);
  swift_allocObject();
  outlined init with take of LocalePreferences?( (uint64_t)v18,  (uint64_t)v17,  (uint64_t *)&demangling cache variable for type metadata for LocalePreferences?);
  swift_bridgeObjectRetain();
  outlined retain of LocalePreferences?( (uint64_t)v18,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined copy of LocalePreferences?);
  uint64_t result = ICUNumberFormatterBase.init(skeleton:localeIdentifier:preferences:)(v4, v11, v14, v15, (uint64_t)v17);
  *a2 = result;
  return result;
}

uint64_t static ICUPercentNumberFormatter.create<A>(for:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return static ICUPercentNumberFormatter.create<A>(for:)( a1,  a2,  a3,  (uint64_t (*)(void, uint64_t, uint64_t, __n128))type metadata accessor for IntegerFormatStyle.Percent);
}

{
  return static ICUPercentNumberFormatter.create<A>(for:)( a1,  a2,  a3,  (uint64_t (*)(void, uint64_t, uint64_t, __n128))type metadata accessor for FloatingPointFormatStyle.Percent);
}

uint64_t static ICUPercentNumberFormatter.create(for:)(uint64_t a1)
{
  void (*v13)(void *__return_ptr, uint64_t, uint64_t);
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  os_unfair_lock_s *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  int64_t v46;
  unint64_t v47;
  uint64_t v48;
  int64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t result;
  uint64_t v53;
  uint64_t v54;
  int64_t v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  void v65[18];
  _BYTE v66[152];
  uint64_t v2 = type metadata accessor for ICUPercentNumberFormatter.Signature(0LL);
  uint64_t v60 = *(void *)(v2 - 8);
  uint64_t v3 = MEMORY[0x1895F8858](v2);
  uint64_t v61 = (uint64_t)&v53 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v3);
  uint64_t v6 = (char *)&v53 - v5;
  uint64_t v63 = a1 + *(int *)(type metadata accessor for NSDecimal.FormatStyle.Percent(0LL) + 20);
  uint64_t v7 = *(void *)(a1 + 8);
  uint64_t ObjectType = swift_getObjectType();
  Swift::String v9 = *(uint64_t (**)(uint64_t, uint64_t))(v7 + 472);
  swift_unknownObjectRetain();
  uint64_t v10 = v9(ObjectType, v7);
  uint64_t v12 = v11;
  swift_unknownObjectRelease();
  uint64_t v13 = *(void (**)(void *__return_ptr, uint64_t, uint64_t))(v7 + 464);
  swift_unknownObjectRetain();
  v13(v65, ObjectType, v7);
  swift_unknownObjectRelease();
  outlined init with take of LocalePreferences?( (uint64_t)v65,  (uint64_t)v66,  (uint64_t *)&demangling cache variable for type metadata for LocalePreferences?);
  outlined init with copy of ICUNumberFormatter.Signature( v63,  (uint64_t)v6,  type metadata accessor for NumberFormatStyleConfiguration.Collection);
  uint64_t v14 = (uint64_t *)&v6[*(int *)(v2 + 20)];
  *uint64_t v14 = v10;
  v14[1] = v12;
  uint64_t v63 = v2;
  outlined init with take of LocalePreferences?( (uint64_t)v66,  (uint64_t)&v6[*(int *)(v2 + 24)],  (uint64_t *)&demangling cache variable for type metadata for LocalePreferences?);
  if (one-time initialization token for cache != -1) {
    swift_once();
  }
  uint64_t v16 = static ICUPercentNumberFormatter.cache;
  uint64_t v15 = *(void *)algn_18C5CBA78;
  uint64_t v17 = (uint64_t *)(*(void *)algn_18C5CBA78 + 16LL);
  uint64_t v18 = (os_unfair_lock_s *)(*(void *)algn_18C5CBA78 + 24LL);
  swift_retain_n();
  os_unfair_lock_lock(v18);
  uint64_t v19 = specialized closure #1 in FormatterCache.formatter(for:creator:)((uint64_t)v17, (uint64_t)v6);
  os_unfair_lock_unlock(v18);
  swift_release();
  if (v19 != 1) {
    goto LABEL_53;
  }
  closure #1 in static ICUPercentNumberFormatter._create(with:)((uint64_t)v6, v65);
  swift_retain();
  os_unfair_lock_lock(v18);
  unint64_t v20 = *(void *)(v15 + 16);
  uint64_t v21 = (uint64_t)v6;
  if (v16 >= *(void *)(v20 + 16)) {
    swift_bridgeObjectRetain();
  }
  else {
    *uint64_t v17 = MEMORY[0x18961AFF0];
  }
  uint64_t v19 = v65[0];
  swift_retain();
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v64 = *v17;
  uint64_t v23 = v64;
  *uint64_t v17 = 0x8000000000000000LL;
  Swift::UInt8 v25 = specialized __RawDictionaryStorage.find<A>(_:)(v21);
  uint64_t v26 = *(void *)(v23 + 16);
  uint64_t v27 = (v24 & 1) == 0;
  uint64_t v28 = v26 + v27;
  if (__OFADD__(v26, v27))
  {
    __break(1u);
  }

  else
  {
    LOBYTE(v16) = v24;
    if (*(void *)(v23 + 24) < v28)
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)( v28,  isUniquelyReferenced_nonNull_native);
      unint64_t v29 = v64;
      uint64_t v6 = (char *)v21;
      int64_t v30 = specialized __RawDictionaryStorage.find<A>(_:)(v21);
      if ((v16 & 1) != (v31 & 1)) {
        goto LABEL_56;
      }
      Swift::UInt8 v25 = v30;
      if ((v16 & 1) == 0) {
        goto LABEL_51;
      }
LABEL_14:
      uint64_t v32 = *(void *)(v29 + 56);
      unint64_t v33 = 8 * v25;
      swift_release();
      *(void *)(v32 + v33) = v19;
LABEL_52:
      *(void *)(v15 + 16) = v29;
      swift_bridgeObjectRelease();
      os_unfair_lock_unlock(v18);
      swift_release();
      swift_bridgeObjectRelease();
      outlined consume of ICUDateIntervalFormatter??(1LL);
LABEL_53:
      swift_release();
      outlined destroy of ICUNumberFormatter.Signature( (uint64_t)v6,  type metadata accessor for ICUPercentNumberFormatter.Signature);
      return v19;
    }

    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
    {
      unint64_t v29 = v23;
      uint64_t v6 = (char *)v21;
      if ((v24 & 1) != 0) {
        goto LABEL_14;
      }
LABEL_51:
      uint64_t v50 = v61;
      uint64_t v51 = v25;
      outlined init with copy of ICUNumberFormatter.Signature( (uint64_t)v6,  v61,  type metadata accessor for ICUPercentNumberFormatter.Signature);
      specialized _NativeDictionary._insert(at:key:value:)(v51, v50, v19, (void *)v29);
      goto LABEL_52;
    }
  }

  Swift::UInt8 v54 = v25;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<ICUPercentNumberFormatter.Signature, ICUPercentNumberFormatter?>);
  uint64_t v34 = static _DictionaryStorage.copy(original:)();
  unint64_t v29 = v34;
  if (!*(void *)(v23 + 16))
  {
LABEL_50:
    swift_bridgeObjectRelease();
    uint64_t v6 = (char *)v21;
    Swift::UInt8 v25 = v54;
    if ((v16 & 1) != 0) {
      goto LABEL_14;
    }
    goto LABEL_51;
  }

  unint64_t v35 = (char *)(v34 + 64);
  uint64_t v36 = 1LL << *(_BYTE *)(v29 + 32);
  Swift::UInt8 v56 = (char *)(v23 + 64);
  uint64_t v37 = (unint64_t)(v36 + 63) >> 6;
  if (v29 != v23 || v35 >= &v56[8 * v37]) {
    memmove(v35, v56, 8 * v37);
  }
  uint64_t v38 = 0LL;
  *(void *)(v29 + 16) = *(void *)(v23 + 16);
  int64_t v39 = 1LL << *(_BYTE *)(v23 + 32);
  unint64_t v40 = -1LL;
  if (v39 < 64) {
    unint64_t v40 = ~(-1LL << v39);
  }
  int64_t v41 = v40 & *(void *)(v23 + 64);
  Swift::UInt8 v55 = (unint64_t)(v39 + 63) >> 6;
  Swift::UInt8 v57 = v20;
  int64_t v42 = v61;
  while (1)
  {
    if (v41)
    {
      uint64_t v62 = (v41 - 1) & v41;
      uint64_t v63 = v38;
      uint64_t v43 = __clz(__rbit64(v41)) | (v38 << 6);
      goto LABEL_24;
    }

    id v46 = v38 + 1;
    if (__OFADD__(v38, 1LL))
    {
      __break(1u);
      goto LABEL_55;
    }

    if (v46 >= v55) {
      goto LABEL_50;
    }
    unint64_t v47 = *(void *)&v56[8 * v46];
    uint64_t v48 = v38 + 1;
    if (!v47)
    {
      uint64_t v48 = v46 + 1;
      if (v46 + 1 >= v55) {
        goto LABEL_50;
      }
      unint64_t v47 = *(void *)&v56[8 * v48];
      if (!v47)
      {
        uint64_t v48 = v46 + 2;
        if (v46 + 2 >= v55) {
          goto LABEL_50;
        }
        unint64_t v47 = *(void *)&v56[8 * v48];
        if (!v47)
        {
          uint64_t v48 = v46 + 3;
          if (v46 + 3 >= v55) {
            goto LABEL_50;
          }
          unint64_t v47 = *(void *)&v56[8 * v48];
          if (!v47)
          {
            uint64_t v48 = v46 + 4;
            if (v46 + 4 >= v55) {
              goto LABEL_50;
            }
            unint64_t v47 = *(void *)&v56[8 * v48];
            if (!v47)
            {
              uint64_t v48 = v46 + 5;
              if (v46 + 5 >= v55) {
                goto LABEL_50;
              }
              unint64_t v47 = *(void *)&v56[8 * v48];
              if (!v47)
              {
                uint64_t v48 = v46 + 6;
                if (v46 + 6 >= v55) {
                  goto LABEL_50;
                }
                unint64_t v47 = *(void *)&v56[8 * v48];
                if (!v47)
                {
                  uint64_t v48 = v46 + 7;
                  if (v46 + 7 >= v55) {
                    goto LABEL_50;
                  }
                  unint64_t v47 = *(void *)&v56[8 * v48];
                  if (!v47) {
                    break;
                  }
                }
              }
            }
          }
        }
      }
    }

uint64_t static ICUPercentNumberFormatter.create<A>(for:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void, uint64_t, uint64_t, __n128))
{
  void (*v21)(void *__return_ptr, uint64_t, uint64_t);
  uint64_t *v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  os_unfair_lock_s *v27;
  uint64_t v28;
  uint64_t v29;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  BOOL v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  unint64_t v45;
  int64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  int64_t v54;
  unint64_t v55;
  int64_t v56;
  int64_t v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t result;
  uint64_t v61;
  uint64_t v62;
  int64_t v63;
  char *v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  int64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  void v73[18];
  _BYTE v74[152];
  uint64_t v8 = type metadata accessor for ICUPercentNumberFormatter.Signature(0LL);
  v69 = *(void *)(v8 - 8);
  MEMORY[0x1895F8858](v8);
  uint64_t v70 = (uint64_t)&v61 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __n128 v11 = MEMORY[0x1895F8858](v10);
  uint64_t v13 = (char *)&v61 - v12;
  uint64_t v14 = a1 + *(int *)(a4(0LL, a2, a3, v11) + 36);
  uint64_t v15 = *(void *)(a1 + 8);
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v17 = *(uint64_t (**)(uint64_t, uint64_t))(v15 + 472);
  swift_unknownObjectRetain();
  uint64_t v18 = v17(ObjectType, v15);
  uint64_t v20 = v19;
  swift_unknownObjectRelease();
  uint64_t v21 = *(void (**)(void *__return_ptr, uint64_t, uint64_t))(v15 + 464);
  swift_unknownObjectRetain();
  v21(v73, ObjectType, v15);
  swift_unknownObjectRelease();
  outlined init with take of LocalePreferences?( (uint64_t)v73,  (uint64_t)v74,  (uint64_t *)&demangling cache variable for type metadata for LocalePreferences?);
  outlined init with copy of ICUNumberFormatter.Signature( v14,  (uint64_t)v13,  type metadata accessor for NumberFormatStyleConfiguration.Collection);
  uint64_t v22 = (uint64_t *)&v13[*(int *)(v8 + 20)];
  void *v22 = v18;
  v22[1] = v20;
  outlined init with take of LocalePreferences?( (uint64_t)v74,  (uint64_t)&v13[*(int *)(v8 + 24)],  (uint64_t *)&demangling cache variable for type metadata for LocalePreferences?);
  if (one-time initialization token for cache != -1) {
    swift_once();
  }
  uint64_t v23 = &v61;
  Swift::UInt8 v25 = static ICUPercentNumberFormatter.cache;
  unint64_t v24 = *(void *)algn_18C5CBA78;
  uint64_t v26 = (uint64_t *)(*(void *)algn_18C5CBA78 + 16LL);
  uint64_t v27 = (os_unfair_lock_s *)(*(void *)algn_18C5CBA78 + 24LL);
  swift_retain_n();
  os_unfair_lock_lock(v27);
  uint64_t v28 = specialized closure #1 in FormatterCache.formatter(for:creator:)((uint64_t)v26, (uint64_t)v13);
  os_unfair_lock_unlock(v27);
  swift_release();
  if (v28 != 1) {
    goto LABEL_53;
  }
  closure #1 in static ICUPercentNumberFormatter._create(with:)((uint64_t)v13, v73);
  swift_retain();
  os_unfair_lock_lock(v27);
  unint64_t v29 = *(void *)(*(void *)(v24 + 16) + 16LL);
  uint64_t v71 = *(void *)(v24 + 16);
  if (v25 >= v29) {
    swift_bridgeObjectRetain();
  }
  else {
    *uint64_t v26 = MEMORY[0x18961AFF0];
  }
  uint64_t v28 = v73[0];
  swift_retain();
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v72 = *v26;
  uint64_t v31 = v72;
  *uint64_t v26 = 0x8000000000000000LL;
  unint64_t v33 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v13);
  uint64_t v34 = *(void *)(v31 + 16);
  unint64_t v35 = (v32 & 1) == 0;
  uint64_t v36 = v34 + v35;
  if (__OFADD__(v34, v35))
  {
    __break(1u);
  }

  else
  {
    LOBYTE(v23) = v32;
    if (*(void *)(v31 + 24) < v36)
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)( v36,  isUniquelyReferenced_nonNull_native);
      uint64_t v37 = v72;
      uint64_t v38 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v13);
      unint64_t v33 = v38;
LABEL_14:
      unint64_t v40 = *(void *)(v37 + 56);
      int64_t v41 = 8 * v33;
      swift_release();
      *(void *)(v40 + v41) = v28;
LABEL_52:
      *(void *)(v24 + 16) = v37;
      swift_bridgeObjectRelease();
      os_unfair_lock_unlock(v27);
      swift_release();
      swift_bridgeObjectRelease();
      outlined consume of ICUDateIntervalFormatter??(1LL);
LABEL_53:
      swift_release();
      outlined destroy of ICUNumberFormatter.Signature( (uint64_t)v13,  type metadata accessor for ICUPercentNumberFormatter.Signature);
      return v28;
    }

    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
    {
      uint64_t v37 = v31;
      if ((v32 & 1) != 0) {
        goto LABEL_14;
      }
LABEL_51:
      Swift::UInt8 v58 = v70;
      uint64_t v59 = v33;
      outlined init with copy of ICUNumberFormatter.Signature( (uint64_t)v13,  v70,  type metadata accessor for ICUPercentNumberFormatter.Signature);
      specialized _NativeDictionary._insert(at:key:value:)(v59, v58, v28, (void *)v37);
      goto LABEL_52;
    }
  }

  uint64_t v62 = v33;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<ICUPercentNumberFormatter.Signature, ICUPercentNumberFormatter?>);
  int64_t v42 = static _DictionaryStorage.copy(original:)();
  uint64_t v37 = v42;
  if (!*(void *)(v31 + 16))
  {
LABEL_50:
    swift_bridgeObjectRelease();
    unint64_t v33 = v62;
    goto LABEL_51;
  }

  uint64_t v43 = (char *)(v42 + 64);
  uint64_t v44 = 1LL << *(_BYTE *)(v37 + 32);
  uint64_t v64 = (char *)(v31 + 64);
  int64_t v45 = (unint64_t)(v44 + 63) >> 6;
  if (v37 != v31 || v43 >= &v64[8 * v45]) {
    memmove(v43, v64, 8 * v45);
  }
  id v46 = 0LL;
  *(void *)(v37 + 16) = *(void *)(v31 + 16);
  unint64_t v47 = 1LL << *(_BYTE *)(v31 + 32);
  uint64_t v48 = -1LL;
  if (v47 < 64) {
    uint64_t v48 = ~(-1LL << v47);
  }
  int64_t v49 = v48 & *(void *)(v31 + 64);
  uint64_t v63 = (unint64_t)(v47 + 63) >> 6;
  uint64_t v50 = v70;
  while (1)
  {
    if (v49)
    {
      v67 = (v49 - 1) & v49;
      v68 = v46;
      uint64_t v51 = __clz(__rbit64(v49)) | (v46 << 6);
      goto LABEL_24;
    }

    Swift::UInt8 v54 = v46 + 1;
    if (__OFADD__(v46, 1LL))
    {
      __break(1u);
      goto LABEL_55;
    }

    if (v54 >= v63) {
      goto LABEL_50;
    }
    Swift::UInt8 v55 = *(void *)&v64[8 * v54];
    Swift::UInt8 v56 = v46 + 1;
    if (!v55)
    {
      Swift::UInt8 v56 = v54 + 1;
      if (v54 + 1 >= v63) {
        goto LABEL_50;
      }
      Swift::UInt8 v55 = *(void *)&v64[8 * v56];
      if (!v55)
      {
        Swift::UInt8 v56 = v54 + 2;
        if (v54 + 2 >= v63) {
          goto LABEL_50;
        }
        Swift::UInt8 v55 = *(void *)&v64[8 * v56];
        if (!v55)
        {
          Swift::UInt8 v56 = v54 + 3;
          if (v54 + 3 >= v63) {
            goto LABEL_50;
          }
          Swift::UInt8 v55 = *(void *)&v64[8 * v56];
          if (!v55)
          {
            Swift::UInt8 v56 = v54 + 4;
            if (v54 + 4 >= v63) {
              goto LABEL_50;
            }
            Swift::UInt8 v55 = *(void *)&v64[8 * v56];
            if (!v55)
            {
              Swift::UInt8 v56 = v54 + 5;
              if (v54 + 5 >= v63) {
                goto LABEL_50;
              }
              Swift::UInt8 v55 = *(void *)&v64[8 * v56];
              if (!v55)
              {
                Swift::UInt8 v56 = v54 + 6;
                if (v54 + 6 >= v63) {
                  goto LABEL_50;
                }
                Swift::UInt8 v55 = *(void *)&v64[8 * v56];
                if (!v55)
                {
                  Swift::UInt8 v56 = v54 + 7;
                  if (v54 + 7 >= v63) {
                    goto LABEL_50;
                  }
                  Swift::UInt8 v55 = *(void *)&v64[8 * v56];
                  if (!v55) {
                    break;
                  }
                }
              }
            }
          }
        }
      }
    }

uint64_t ICUNumberFormatter.attributedFormat(_:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  char v4 = BYTE4(a3);
  ICUNumberFormatterBase.attributedFormatPositions(_:)(a1, a2, a3 & 0xFFFFFFFFFFLL);
  if (!v7) {
    __asm { BR              X10 }
  }

  unint64_t v9 = v6;
  uint64_t v10 = v7;
  uint64_t v11 = v8;
  swift_bridgeObjectRetain();
  BigString.init(_:)();
  AttributedString.init(_:attributes:)(v61, MEMORY[0x18961AFF0], MEMORY[0x18961AFF8], &v63);
  uint64_t v12 = v63;
  uint64_t v13 = *(void *)(v11 + 16);
  if (v13)
  {
    unint64_t v46 = v9;
    uint64_t v43 = a4;
    swift_bridgeObjectRetain();
    uint64_t v45 = v10;
    lazy protocol witness table accessor for type String and conformance String();
    uint64_t v14 = v11 + 48;
    do
    {
      uint64_t v51 = v13;
      int v15 = *(_DWORD *)(v14 - 16);
      unint64_t v53 = v46;
      *(void *)&__int128 v54 = v10;
      swift_bridgeObjectRetain();
      unint64_t v16 = String.Index.init<A>(utf16Offset:in:)();
      unint64_t v53 = v46;
      *(void *)&__int128 v54 = v10;
      swift_bridgeObjectRetain();
      unint64_t v17 = String.Index.init<A>(utf16Offset:in:)();
      if (v17 >> 14 < v16 >> 14)
      {
        __break(1u);
LABEL_25:
        __break(1u);
LABEL_26:
        __break(1u);
LABEL_27:
        _assertionFailure(_:_:file:line:flags:)();
        __break(1u);
        JUMPOUT(0x18312EFACLL);
      }

      unint64_t v18 = v17;
      swift_retain();
      specialized Range<>.init<A>(_range:in:)(v16, v18, (_OWORD *)v12, &v53);
      uint64_t v19 = v55;
      if ((void)v55 == 2LL) {
        goto LABEL_26;
      }
      uint64_t v48 = v54;
      unint64_t v49 = v53;
      uint64_t v47 = *((void *)&v54 + 1);
      uint64_t v20 = *((void *)&v55 + 1);
      uint64_t v22 = *((void *)&v56 + 1);
      uint64_t v21 = v56;
      uint64_t v50 = v57;
      __int128 v60 = MEMORY[0x18961AFF0];
      char v23 = 0;
      char v24 = 2;
      switch(v15)
      {
        case 0:
          goto LABEL_8;
        case 1:
          char v23 = 1;
LABEL_8:
          specialized AttributeContainer.subscript.setter(v23);
          break;
        case 2:
          goto LABEL_13;
        case 6:
          char v24 = 0;
          goto LABEL_13;
        case 7:
          char v24 = 3;
          goto LABEL_13;
        case 8:
          char v24 = 4;
          goto LABEL_13;
        case 10:
          char v24 = 1;
LABEL_13:
          specialized AttributeContainer.subscript.setter(v24);
          break;
        default:
          break;
      }

      __int128 v59 = v60;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        __int128 v25 = *(_OWORD *)(v12 + 32);
        v82[0] = *(_OWORD *)(v12 + 16);
        v82[1] = v25;
        v82[2] = *(_OWORD *)(v12 + 48);
        uint64_t v44 = v20;
        uint64_t v26 = v22;
        uint64_t v27 = *(void *)(v12 + 64);
        uint64_t v28 = *(void *)(v12 + 72);
        uint64_t v29 = v21;
        uint64_t v30 = *(void *)(v12 + 80);
        uint64_t v31 = *(void *)(v12 + 88);
        type metadata accessor for AttributedString.Guts();
        swift_allocObject();
        outlined retain of Locale((uint64_t)v82);
        swift_unknownObjectRetain();
        uint64_t v32 = v28;
        uint64_t v22 = v26;
        uint64_t v20 = v44;
        uint64_t v33 = v30;
        uint64_t v21 = v29;
        uint64_t v34 = AttributedString.Guts.init(string:runs:)(v82, v27, v32, v33, v31);
        swift_release();
        uint64_t v12 = v34;
      }

      __int128 v35 = *(_OWORD *)(v12 + 32);
      __int128 v79 = *(_OWORD *)(v12 + 16);
      __int128 v80 = v35;
      __int128 v81 = *(_OWORD *)(v12 + 48);
      BigString.startIndex.getter();
      BigString.endIndex.getter();
      unint64_t v71 = v49;
      uint64_t v72 = v48;
      uint64_t v73 = v47;
      uint64_t v74 = v19;
      uint64_t v75 = v20;
      uint64_t v76 = v21;
      uint64_t v77 = v22;
      uint64_t v78 = v50;
      BigString.unicodeScalars.getter();
      swift_retain_n();
      BigString.UnicodeScalarView.subscript.getter();
      swift_release();
      outlined release of Locale((uint64_t)v62);
      outlined release of Locale((uint64_t)&v63);
      __int128 v54 = v64;
      __int128 v55 = v65;
      __int128 v56 = v66;
      __int128 v57 = v67;
      unint64_t v53 = v12;
      if (one-time initialization token for currentIdentity != -1) {
        swift_once();
      }
      uint64_t v36 = (uint64_t *)(static AttributedString.currentIdentity + 16);
      uint64_t v37 = (os_unfair_lock_s *)(static AttributedString.currentIdentity + 24);
      swift_retain();
      os_unfair_lock_lock(v37);
      closure #1 in static AttributedString._nextModifyIdentity.getter(v36, &v52);
      os_unfair_lock_unlock(v37);
      swift_release();
      uint64_t v38 = v52;
      uint64_t v58 = v52;
      BigString.init()();
      uint64_t v52 = 0LL;
      MEMORY[0x186E20E78](&v52, 8LL);
      uint64_t v39 = v52;
      type metadata accessor for AttributedString.Guts();
      uint64_t v40 = swift_allocObject();
      uint64_t v10 = v45;
      if ((BigString.isEmpty.getter() & 1) == 0) {
        goto LABEL_25;
      }
      __int128 v41 = v69;
      *(_OWORD *)(v40 + 16) = v68;
      *(_OWORD *)(v40 + 32) = v41;
      *(_OWORD *)(v40 + 48) = v70;
      *(void *)(v40 + 64) = 0LL;
      *(void *)(v40 + 72) = 0LL;
      *(void *)(v40 + 80) = 0LL;
      *(void *)(v40 + 88) = v39;
      swift_release();
      LOBYTE(v52) = 0;
      AttributedSubstring.mergeAttributes(_:mergePolicy:)((uint64_t *)&v59, (char *)&v52);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (v58 != v38) {
        goto LABEL_27;
      }
      v14 += 24LL;
      uint64_t v12 = v53;
      swift_release();
      uint64_t v13 = v51 - 1;
    }

    while (v51 != 1);
    swift_bridgeObjectRelease();
    a4 = v43;
  }

  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  *a4 = v12;
  return result;
}

uint64_t type metadata accessor for ICUPercentNumberFormatter()
{
  return objc_opt_self();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance ICUByteCountNumberFormatter.Signature()
{
  return ICUByteCountNumberFormatter.Signature.hashValue.getter();
}

void protocol witness for Hashable.hash(into:) in conformance ICUByteCountNumberFormatter.Signature( uint64_t a1)
{
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance ICUByteCountNumberFormatter.Signature( uint64_t *a1, uint64_t *a2)
{
  return specialized static ICUByteCountNumberFormatter.Signature.== infix(_:_:)(a1, a2);
}

uint64_t ICUByteCountNumberFormatter.attributedFormat(_:unit:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char a4@<W3>, uint64_t *a5@<X8>)
{
  char v5 = BYTE4(a3);
  ICUNumberFormatterBase.attributedFormatPositions(_:)(a1, a2, a3 & 0xFFFFFFFFFFLL);
  if (!v8) {
    __asm { BR              X10 }
  }

  unint64_t v10 = v7;
  uint64_t v11 = v8;
  uint64_t v12 = v9;
  __int128 v41 = a5;
  swift_bridgeObjectRetain();
  BigString.init(_:)();
  AttributedString.init(_:attributes:)(v59, MEMORY[0x18961AFF0], MEMORY[0x18961AFF8], &v61);
  uint64_t v13 = v61;
  uint64_t v14 = *(void *)(v12 + 16);
  if (v14)
  {
    swift_bridgeObjectRetain();
    lazy protocol witness table accessor for type String and conformance String();
    uint64_t v15 = v12 + 48;
    uint64_t v43 = v11;
    do
    {
      uint64_t v49 = v14;
      uint64_t v16 = *(unsigned int *)(v15 - 16);
      unint64_t v51 = v10;
      *(void *)&__int128 v52 = v11;
      swift_bridgeObjectRetain();
      unint64_t v17 = String.Index.init<A>(utf16Offset:in:)();
      unint64_t v51 = v10;
      *(void *)&__int128 v52 = v11;
      swift_bridgeObjectRetain();
      unint64_t v18 = String.Index.init<A>(utf16Offset:in:)();
      if (v18 >> 14 < v17 >> 14)
      {
        __break(1u);
LABEL_27:
        __break(1u);
LABEL_28:
        __break(1u);
LABEL_29:
        _assertionFailure(_:_:file:line:flags:)();
        __break(1u);
        JUMPOUT(0x18312FD70LL);
      }

      unint64_t v19 = v18;
      swift_retain();
      specialized Range<>.init<A>(_range:in:)(v17, v19, (_OWORD *)v13, &v51);
      uint64_t v20 = v53;
      if ((void)v53 == 2LL) {
        goto LABEL_28;
      }
      uint64_t v46 = v52;
      unint64_t v47 = v51;
      uint64_t v45 = *((void *)&v52 + 1);
      uint64_t v21 = *((void *)&v53 + 1);
      uint64_t v23 = *((void *)&v54 + 1);
      uint64_t v22 = v54;
      uint64_t v48 = v55;
      __int128 v58 = MEMORY[0x18961AFF0];
      char v24 = 0;
      char v25 = 2;
      switch((int)v16)
      {
        case 0:
          goto LABEL_8;
        case 1:
          char v24 = 1;
LABEL_8:
          specialized AttributeContainer.subscript.setter(v24);
          break;
        case 2:
          goto LABEL_13;
        case 6:
          char v25 = 0;
          goto LABEL_13;
        case 7:
          char v25 = 3;
          goto LABEL_13;
        case 8:
          char v25 = 4;
          goto LABEL_13;
        case 10:
          char v25 = 1;
LABEL_13:
          specialized AttributeContainer.subscript.setter(v25);
          break;
        default:
          break;
      }

      AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.init(unumberFormatField:unit:)(v16, a4, &v51);
      __int128 v57 = v58;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        __int128 v26 = *(_OWORD *)(v13 + 32);
        v80[0] = *(_OWORD *)(v13 + 16);
        v80[1] = v26;
        v80[2] = *(_OWORD *)(v13 + 48);
        uint64_t v27 = *(void *)(v13 + 64);
        uint64_t v28 = *(void *)(v13 + 72);
        uint64_t v42 = v22;
        uint64_t v29 = *(void *)(v13 + 80);
        uint64_t v30 = *(void *)(v13 + 88);
        type metadata accessor for AttributedString.Guts();
        swift_allocObject();
        outlined retain of Locale((uint64_t)v80);
        swift_unknownObjectRetain();
        uint64_t v31 = v29;
        uint64_t v22 = v42;
        uint64_t v32 = AttributedString.Guts.init(string:runs:)(v80, v27, v28, v31, v30);
        swift_release();
        uint64_t v13 = v32;
      }

      __int128 v33 = *(_OWORD *)(v13 + 32);
      __int128 v77 = *(_OWORD *)(v13 + 16);
      __int128 v78 = v33;
      __int128 v79 = *(_OWORD *)(v13 + 48);
      BigString.startIndex.getter();
      BigString.endIndex.getter();
      unint64_t v69 = v47;
      uint64_t v70 = v46;
      uint64_t v71 = v45;
      uint64_t v72 = v20;
      uint64_t v73 = v21;
      uint64_t v74 = v22;
      uint64_t v75 = v23;
      uint64_t v76 = v48;
      BigString.unicodeScalars.getter();
      swift_retain_n();
      BigString.UnicodeScalarView.subscript.getter();
      swift_release();
      outlined release of Locale((uint64_t)v60);
      outlined release of Locale((uint64_t)&v61);
      __int128 v52 = v62;
      __int128 v53 = v63;
      __int128 v54 = v64;
      __int128 v55 = v65;
      unint64_t v51 = v13;
      if (one-time initialization token for currentIdentity != -1) {
        swift_once();
      }
      uint64_t v34 = (uint64_t *)(static AttributedString.currentIdentity + 16);
      __int128 v35 = (os_unfair_lock_s *)(static AttributedString.currentIdentity + 24);
      swift_retain();
      os_unfair_lock_lock(v35);
      closure #1 in static AttributedString._nextModifyIdentity.getter(v34, &v50);
      os_unfair_lock_unlock(v35);
      swift_release();
      uint64_t v36 = v50;
      uint64_t v56 = v50;
      BigString.init()();
      uint64_t v50 = 0LL;
      MEMORY[0x186E20E78](&v50, 8LL);
      uint64_t v37 = v50;
      type metadata accessor for AttributedString.Guts();
      uint64_t v38 = swift_allocObject();
      if ((BigString.isEmpty.getter() & 1) == 0) {
        goto LABEL_27;
      }
      __int128 v39 = v67;
      *(_OWORD *)(v38 + 16) = v66;
      *(_OWORD *)(v38 + 32) = v39;
      *(_OWORD *)(v38 + 48) = v68;
      *(void *)(v38 + 64) = 0LL;
      *(void *)(v38 + 72) = 0LL;
      *(void *)(v38 + 80) = 0LL;
      *(void *)(v38 + 88) = v37;
      swift_release();
      LOBYTE(v50) = 0;
      AttributedSubstring.mergeAttributes(_:mergePolicy:)((uint64_t *)&v57, (char *)&v50);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (v56 != v36) {
        goto LABEL_29;
      }
      v15 += 24LL;
      uint64_t v13 = v51;
      swift_release();
      uint64_t v14 = v49 - 1;
      uint64_t v11 = v43;
    }

    while (v49 != 1);
    swift_bridgeObjectRelease();
  }

  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  *__int128 v41 = v13;
  return result;
}

uint64_t type metadata accessor for ICUByteCountNumberFormatter()
{
  return objc_opt_self();
}

void ICUByteCountNumberFormatter.Signature.hash(into:)(uint64_t a1)
{
  if (_s10Foundation17LocalePreferencesVSgWOg((uint64_t)v55) == 1)
  {
    Hasher._combine(_:)(0);
    return;
  }

  outlined init with take of LocalePreferences?( (uint64_t)v54,  (uint64_t)&v36,  (uint64_t *)&demangling cache variable for type metadata for LocalePreferences?);
  Hasher._combine(_:)(1u);
  if (v36 == 2)
  {
    Swift::UInt8 v3 = 0;
  }

  else
  {
    Swift::UInt8 v3 = v36 & 1;
    Hasher._combine(_:)(1u);
  }

  Hasher._combine(_:)(v3);
  uint64_t v4 = v37;
  if (!v37)
  {
    Hasher._combine(_:)(0);
    outlined retain of LocalePreferences(&v36);
    uint64_t v9 = &v36;
    goto LABEL_17;
  }

  Hasher._combine(_:)(1u);
  Hasher._combine(_:)(*(void *)(v4 + 16));
  uint64_t v5 = *(void *)(v4 + 16);
  if (!v5)
  {
    outlined init with take of LocalePreferences?( (uint64_t)v54,  (uint64_t)v35,  (uint64_t *)&demangling cache variable for type metadata for LocalePreferences?);
    outlined retain of LocalePreferences?( (uint64_t)v54,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined copy of LocalePreferences?);
    uint64_t v9 = (uint64_t *)v35;
LABEL_17:
    outlined retain of LocalePreferences(v9);
    if (!v38) {
      goto LABEL_11;
    }
    goto LABEL_18;
  }

  outlined retain of LocalePreferences?( (uint64_t)v54,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined copy of LocalePreferences?);
  outlined retain of LocalePreferences?( (uint64_t)v54,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined copy of LocalePreferences?);
  swift_bridgeObjectRetain();
  uint64_t v6 = v4 + 40;
  do
  {
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    v6 += 16LL;
    --v5;
  }

  while (v5);
  swift_bridgeObjectRelease();
  if (!v38)
  {
LABEL_11:
    Hasher._combine(_:)(0);
    if (!v39) {
      goto LABEL_12;
    }
    goto LABEL_19;
  }

Swift::Int ICUByteCountNumberFormatter.Signature.hashValue.getter()
{
  if (_s10Foundation17LocalePreferencesVSgWOg((uint64_t)v55) == 1)
  {
    Hasher._combine(_:)(0);
    return Hasher._finalize()();
  }

  outlined init with take of LocalePreferences?( (uint64_t)v54,  (uint64_t)&v35,  (uint64_t *)&demangling cache variable for type metadata for LocalePreferences?);
  Hasher._combine(_:)(1u);
  if (v35 == 2)
  {
    Swift::UInt8 v1 = 0;
  }

  else
  {
    Swift::UInt8 v1 = v35 & 1;
    Hasher._combine(_:)(1u);
  }

  Hasher._combine(_:)(v1);
  uint64_t v2 = v36;
  if (!v36)
  {
    Hasher._combine(_:)(0);
    outlined retain of LocalePreferences(&v35);
    uint64_t v7 = &v35;
    goto LABEL_17;
  }

  Hasher._combine(_:)(1u);
  Hasher._combine(_:)(*(void *)(v2 + 16));
  uint64_t v3 = *(void *)(v2 + 16);
  if (!v3)
  {
    outlined init with take of LocalePreferences?( (uint64_t)v54,  (uint64_t)v34,  (uint64_t *)&demangling cache variable for type metadata for LocalePreferences?);
    outlined retain of LocalePreferences?( (uint64_t)v54,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined copy of LocalePreferences?);
    uint64_t v7 = (uint64_t *)v34;
LABEL_17:
    outlined retain of LocalePreferences(v7);
    if (!v37) {
      goto LABEL_11;
    }
    goto LABEL_18;
  }

  outlined retain of LocalePreferences?( (uint64_t)v54,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined copy of LocalePreferences?);
  outlined retain of LocalePreferences?( (uint64_t)v54,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined copy of LocalePreferences?);
  swift_bridgeObjectRetain();
  uint64_t v4 = v2 + 40;
  do
  {
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    v4 += 16LL;
    --v3;
  }

  while (v3);
  swift_bridgeObjectRelease();
  if (!v37)
  {
LABEL_11:
    Hasher._combine(_:)(0);
    if (!v38) {
      goto LABEL_12;
    }
    goto LABEL_19;
  }

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance ICUByteCountNumberFormatter.Signature()
{
  if (_s10Foundation17LocalePreferencesVSgWOg((uint64_t)v55) == 1)
  {
    Hasher._combine(_:)(0);
    return Hasher._finalize()();
  }

  outlined init with take of LocalePreferences?( (uint64_t)v54,  (uint64_t)&v35,  (uint64_t *)&demangling cache variable for type metadata for LocalePreferences?);
  Hasher._combine(_:)(1u);
  if (v35 == 2)
  {
    Swift::UInt8 v1 = 0;
  }

  else
  {
    Swift::UInt8 v1 = v35 & 1;
    Hasher._combine(_:)(1u);
  }

  Hasher._combine(_:)(v1);
  uint64_t v2 = v36;
  if (!v36)
  {
    Hasher._combine(_:)(0);
    uint64_t v7 = &v35;
    goto LABEL_17;
  }

  Hasher._combine(_:)(1u);
  Swift::UInt v3 = *(void *)(v2 + 16);
  Hasher._combine(_:)(v3);
  if (!v3)
  {
    outlined init with take of LocalePreferences?( (uint64_t)v54,  (uint64_t)v34,  (uint64_t *)&demangling cache variable for type metadata for LocalePreferences?);
    uint64_t v7 = (uint64_t *)v34;
LABEL_17:
    outlined retain of LocalePreferences(v7);
    outlined retain of LocalePreferences(&v35);
    if (!v37) {
      goto LABEL_11;
    }
    goto LABEL_18;
  }

  outlined retain of LocalePreferences?( (uint64_t)v54,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined copy of LocalePreferences?);
  outlined retain of LocalePreferences?( (uint64_t)v54,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined copy of LocalePreferences?);
  swift_bridgeObjectRetain();
  uint64_t v4 = v2 + 40;
  do
  {
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    v4 += 16LL;
    --v3;
  }

  while (v3);
  swift_bridgeObjectRelease();
  if (!v37)
  {
LABEL_11:
    Hasher._combine(_:)(0);
    if (!v38) {
      goto LABEL_12;
    }
    goto LABEL_19;
  }

uint64_t one-time initialization function for cache(uint64_t a1, uint64_t *a2, void *a3, uint64_t *a4)
{
  uint64_t result = swift_allocObject();
  *(_DWORD *)(result + 24) = 0;
  *(void *)(result + 16) = MEMORY[0x18961AFF0];
  *a3 = 100LL;
  *a4 = result;
  return result;
}

uint64_t ICUMeasurementNumberFormatter.Usage.rawValue.getter(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_183131474 + 4 * aH_5[a1]))( 0x746C7561666564LL,  0xE700000000000000LL);
}

uint64_t sub_183131474()
{
  return 0x6E6F73726570LL;
}

uint64_t sub_183131488()
{
  return 1685024614LL;
}

uint64_t sub_183131498()
{
  return 0x682D6E6F73726570LL;
}

uint64_t sub_1831314BC()
{
  return 1684107122LL;
}

uint64_t sub_1831314CC()
{
  return 0x656C2D6C61636F66LL;
}

uint64_t sub_1831314EC()
{
  return 0x6C6C61666E696172LL;
}

uint64_t sub_183131514()
{
  return 0x79746C6269736976LL;
}

uint64_t sub_18313152C()
{
  return 0x6372746D6F726162LL;
}

uint64_t sub_183131544()
{
  return 1684957559LL;
}

uint64_t sub_183131554()
{
  return 0x72656874616577LL;
}

uint64_t sub_183131568()
{
  return 0x6469756C66LL;
}

uint64_t sub_18313157C()
{
  return 0x6469766F72507361LL;
}

uint64_t type metadata accessor for ICUMeasurementNumberFormatter()
{
  return objc_opt_self();
}

id *outlined destroy of LocalePreferences(id *a1)
{
  return a1;
}

uint64_t getEnumTagSinglePayload for ICUNumberFormatter.Signature()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_183131610(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return __swift_get_extra_inhabitant_indexTm_1( a1,  a2,  a3,  type metadata accessor for NumberFormatStyleConfiguration.Collection);
}

uint64_t storeEnumTagSinglePayload for ICUNumberFormatter.Signature()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_183131628(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  return __swift_store_extra_inhabitant_indexTm_1( a1,  a2,  a3,  a4,  type metadata accessor for NumberFormatStyleConfiguration.Collection);
}

uint64_t type metadata accessor for ICUNumberFormatter.Signature(uint64_t a1)
{
  return type metadata accessor for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format( a1,  (uint64_t *)&type metadata singleton initialization cache for ICUNumberFormatter.Signature);
}

uint64_t base witness table accessor for Equatable in ICUNumberFormatter.Signature()
{
  return lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( &lazy protocol witness table cache variable for type ICUNumberFormatter.Signature and conformance ICUNumberFormatter.Signature,  type metadata accessor for ICUNumberFormatter.Signature,  (uint64_t)&protocol conformance descriptor for ICUNumberFormatter.Signature);
}

uint64_t type metadata accessor for ICUCurrencyNumberFormatter.Signature(uint64_t a1)
{
  return type metadata accessor for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format( a1,  (uint64_t *)&type metadata singleton initialization cache for ICUCurrencyNumberFormatter.Signature);
}

BOOL specialized static ICUByteCountNumberFormatter.Signature.== infix(_:_:)(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = a1[1];
  uint64_t v5 = a1[2];
  uint64_t v6 = a1[3];
  outlined init with take of LocalePreferences?( (uint64_t)(a1 + 4),  (uint64_t)v109,  (uint64_t *)&demangling cache variable for type metadata for LocalePreferences?);
  uint64_t v7 = *a2;
  uint64_t v8 = a2[1];
  uint64_t v9 = (uint64_t)(a2 + 4);
  uint64_t v11 = a2[2];
  uint64_t v10 = a2[3];
  outlined init with take of LocalePreferences?( v9,  (uint64_t)v110,  (uint64_t *)&demangling cache variable for type metadata for LocalePreferences?);
  BOOL v12 = v3 == v7 && v4 == v8;
  if (v12 || (char v13 = _stringCompareWithSmolCheck(_:_:expecting:)(), result = 0LL, (v13 & 1) != 0))
  {
    BOOL v15 = v5 == v11 && v6 == v10;
    if (v15 || (char v16 = _stringCompareWithSmolCheck(_:_:expecting:)(), result = 0LL, (v16 & 1) != 0))
    {
      outlined init with take of LocalePreferences?( (uint64_t)v109,  (uint64_t)v108,  (uint64_t *)&demangling cache variable for type metadata for LocalePreferences?);
      if (_s10Foundation17LocalePreferencesVSgWOg((uint64_t)v108) == 1)
      {
        outlined init with take of LocalePreferences?( (uint64_t)v110,  (uint64_t)v106,  (uint64_t *)&demangling cache variable for type metadata for LocalePreferences?);
        goto LABEL_16;
      }

      outlined init with take of LocalePreferences?( (uint64_t)v109,  (uint64_t)&v98,  (uint64_t *)&demangling cache variable for type metadata for LocalePreferences?);
      outlined init with take of LocalePreferences?( (uint64_t)v110,  (uint64_t)v106,  (uint64_t *)&demangling cache variable for type metadata for LocalePreferences?);
      if (_s10Foundation17LocalePreferencesVSgWOg((uint64_t)v106) == 1)
      {
        v60[6] = v104;
        v61[0] = *(_OWORD *)v105;
        *(_OWORD *)((char *)v61 + 12) = *(_OWORD *)&v105[12];
        v60[2] = v100;
        v60[3] = v101;
        v60[4] = v102;
        v60[5] = v103;
        v60[0] = v98;
        v60[1] = v99;
        outlined init with take of LocalePreferences?( (uint64_t)v109,  (uint64_t)v62,  (uint64_t *)&demangling cache variable for type metadata for LocalePreferences?);
        outlined init with take of LocalePreferences?( (uint64_t)v109,  (uint64_t)&v79,  (uint64_t *)&demangling cache variable for type metadata for LocalePreferences?);
        outlined retain of LocalePreferences(&v79);
        outlined retain of LocalePreferences(v62);
        outlined release of LocalePreferences(v60);
LABEL_16:
        outlined init with take of LocalePreferences?( (uint64_t)v109,  (uint64_t)v106,  (uint64_t *)&demangling cache variable for type metadata for LocalePreferences?);
        outlined init with take of LocalePreferences?( (uint64_t)v110,  (uint64_t)&v107,  (uint64_t *)&demangling cache variable for type metadata for LocalePreferences?);
        outlined retain of LocalePreferences?( (uint64_t)v110,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined copy of LocalePreferences?);
        outlined release of (LocalePreferences?, LocalePreferences?)((uint64_t)v106);
        return 0LL;
      }

      outlined init with take of LocalePreferences?( (uint64_t)v110,  (uint64_t)&v79,  (uint64_t *)&demangling cache variable for type metadata for LocalePreferences?);
      char v17 = v98;
      uint64_t v18 = *((void *)&v98 + 1);
      __int128 v19 = v99;
      __int128 v20 = v100;
      __int128 v21 = v101;
      __int128 v58 = (void *)*((void *)&v102 + 1);
      __int128 v59 = (void *)v102;
      uint64_t v56 = (void *)*((void *)&v103 + 1);
      __int128 v57 = (void *)v103;
      uint64_t v54 = *((void *)&v104 + 1);
      __int128 v55 = (void *)v104;
      uint64_t v52 = *(void *)&v105[8];
      uint64_t v53 = *(void *)v105;
      uint64_t v22 = *(void *)&v105[16];
      int v50 = v105[25];
      int v51 = v105[24];
      int v48 = v105[27];
      int v49 = v105[26];
      if (v98 == 2)
      {
      }

      else if (v79 == 2 || ((((v98 & 1) == 0) ^ v79) & 1) == 0)
      {
        goto LABEL_56;
      }

      if (*((void *)&v98 + 1))
      {
        if (!v80 || (specialized static Array<A>.== infix(_:_:)(*((void **)&v98 + 1), v80) & 1) == 0) {
          goto LABEL_53;
        }
      }

      else if (v80)
      {
        goto LABEL_53;
      }

      if (*((void *)&v19 + 1))
      {
        if (!*((void *)&v81 + 1) || v19 != v81 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
          goto LABEL_53;
        }
      }

      else if (*((void *)&v81 + 1))
      {
        goto LABEL_53;
      }

      if (*((void *)&v20 + 1))
      {
        if (!*((void *)&v82 + 1) || v20 != v82 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
          goto LABEL_53;
        }
      }

      else if (*((void *)&v82 + 1))
      {
        goto LABEL_53;
      }

      if ((void)v21)
      {
        if (!v83 || (specialized static Dictionary<>.== infix(_:_:)(v21, v83) & 1) == 0) {
          goto LABEL_53;
        }
      }

      else if (v83)
      {
        goto LABEL_53;
      }

      if (*((void *)&v21 + 1))
      {
        if (v84 && (specialized static Dictionary<>.== infix(_:_:)(*((uint64_t *)&v21 + 1), v84) & 1) != 0)
        {
LABEL_48:
          uint64_t v23 = v85;
          uint64_t v39 = v88;
          uint64_t v42 = v87;
          uint64_t v37 = v89;
          uint64_t v44 = v86;
          if (v59)
          {
            if (!v85)
            {
              outlined init with take of LocalePreferences?( (uint64_t)v109,  (uint64_t)v62,  (uint64_t *)&demangling cache variable for type metadata for LocalePreferences?);
              outlined retain of LocalePreferences?( (uint64_t)v109,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined copy of LocalePreferences?);
              outlined retain of LocalePreferences(v62);
              goto LABEL_58;
            }

            type metadata accessor for CFDictionaryRef(0LL);
            outlined retain of LocalePreferences?( (uint64_t)v109,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined copy of LocalePreferences?);
            outlined retain of LocalePreferences?( (uint64_t)v109,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined copy of LocalePreferences?);
            outlined retain of LocalePreferences?( (uint64_t)v110,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined copy of LocalePreferences?);
            lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( (unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef,  (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef,  (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
            id v33 = (id)v23;
            id v32 = v59;
            char v24 = static _CFObject.== infix(_:_:)();

            if ((v24 & 1) == 0) {
              goto LABEL_109;
            }
          }

          else
          {
            if (v85)
            {
LABEL_56:
              outlined init with take of LocalePreferences?( (uint64_t)v109,  (uint64_t)v62,  (uint64_t *)&demangling cache variable for type metadata for LocalePreferences?);
              outlined retain of LocalePreferences?( (uint64_t)v109,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined copy of LocalePreferences?);
              outlined retain of LocalePreferences(v62);
              goto LABEL_57;
            }

            outlined retain of LocalePreferences?( (uint64_t)v109,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined copy of LocalePreferences?);
            outlined retain of LocalePreferences?( (uint64_t)v109,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined copy of LocalePreferences?);
            outlined retain of LocalePreferences?( (uint64_t)v110,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined copy of LocalePreferences?);
          }

          LOBYTE(v23) = (_BYTE)v44;
          if (v58)
          {
            if (!v44) {
              goto LABEL_92;
            }
            type metadata accessor for CFDictionaryRef(0LL);
            lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( (unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef,  (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef,  (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
            id v45 = v44;
            id v34 = v58;
            char v27 = static _CFObject.== infix(_:_:)();

            if ((v27 & 1) == 0) {
              goto LABEL_109;
            }
          }

          else if (v44)
          {
            goto LABEL_109;
          }

          if (v57)
          {
            if (!v42) {
              goto LABEL_109;
            }
            type metadata accessor for CFDictionaryRef(0LL);
            lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( (unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef,  (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef,  (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
            id v43 = v42;
            id v35 = v57;
            char v28 = static _CFObject.== infix(_:_:)();

            if ((v28 & 1) == 0) {
              goto LABEL_109;
            }
          }

          else if (v42)
          {
            goto LABEL_109;
          }

          if (v56)
          {
            if (!v39) {
              goto LABEL_109;
            }
            type metadata accessor for CFDictionaryRef(0LL);
            lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( (unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef,  (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef,  (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
            id v40 = v39;
            id v36 = v56;
            char v29 = static _CFObject.== infix(_:_:)();

            if ((v29 & 1) == 0) {
              goto LABEL_109;
            }
          }

          else if (v39)
          {
            goto LABEL_109;
          }

          if (v55)
          {
            if (!v37) {
              goto LABEL_109;
            }
            type metadata accessor for CFDictionaryRef(0LL);
            lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( (unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef,  (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef,  (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
            id v41 = v37;
            id v38 = v55;
            char v30 = static _CFObject.== infix(_:_:)();

            if ((v30 & 1) == 0) {
              goto LABEL_109;
            }
          }

          else if (v37)
          {
            goto LABEL_109;
          }

          uint64_t v23 = v90;
          if (v54)
          {
            if (!v90) {
              goto LABEL_92;
            }
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            char v46 = specialized static Dictionary<>.== infix(_:_:)(v54, v23);
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            if ((v46 & 1) == 0) {
              goto LABEL_109;
            }
          }

          else if (v90)
          {
            goto LABEL_109;
          }

          uint64_t v23 = v91;
          if (!v53)
          {
            if (v91) {
              goto LABEL_109;
            }
LABEL_94:
            if (v22)
            {
              if (!v93 || (v52 != v92 || v22 != v93) && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
                goto LABEL_109;
              }
            }

            else if (v93)
            {
              goto LABEL_109;
            }

            if (v51 != 2)
            {
              if (v94 == 2 || ((v94 ^ v51) & 1) != 0) {
                goto LABEL_109;
              }
LABEL_106:
              int v31 = v95;
              if (v50 == 2)
              {
                outlined retain of LocalePreferences?( (uint64_t)v110,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined consume of LocalePreferences?);
                if (v31 != 2) {
                  goto LABEL_57;
                }
              }

              else
              {
                outlined retain of LocalePreferences?( (uint64_t)v110,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined consume of LocalePreferences?);
                if (v31 == 2 || ((v31 ^ v50) & 1) != 0) {
                  goto LABEL_57;
                }
              }

              if (v49 == 2)
              {
                if (v96 != 2) {
                  goto LABEL_57;
                }
              }

              else
              {
                LOBYTE(v23) = 0;
                if (v96 == 2 || ((((v49 & 1) == 0) ^ v96) & 1) == 0) {
                  goto LABEL_58;
                }
              }

              if (v48 == 2)
              {
                if (v97 != 2) {
                  goto LABEL_57;
                }
              }

              else if (v97 == 2 || ((((v48 & 1) == 0) ^ v97) & 1) == 0)
              {
                goto LABEL_57;
              }

              LOBYTE(v23) = 1;
LABEL_58:
              LOBYTE(v62[0]) = v17;
              v62[1] = v18;
              __int128 v63 = v19;
              __int128 v64 = v20;
              __int128 v65 = v21;
              __int128 v66 = v59;
              __int128 v67 = v58;
              __int128 v68 = v57;
              unint64_t v69 = v56;
              uint64_t v70 = v55;
              uint64_t v71 = v54;
              uint64_t v72 = v53;
              uint64_t v73 = v52;
              uint64_t v74 = v22;
              char v75 = v51;
              char v76 = v50;
              char v77 = v49;
              char v78 = v48;
              outlined release of LocalePreferences(v62);
              outlined retain of LocalePreferences?( (uint64_t)v109,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined consume of LocalePreferences?);
              return (v23 & 1) != 0;
            }

            if (v94 == 2) {
              goto LABEL_106;
            }
LABEL_109:
            uint64_t v26 = outlined consume of LocalePreferences?;
            id v25 = v110;
            goto LABEL_54;
          }

          if (v91)
          {
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            char v47 = specialized static Dictionary<>.== infix(_:_:)(v53, v23);
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            if ((v47 & 1) == 0) {
              goto LABEL_109;
            }
            goto LABEL_94;
          }

BOOL specialized static ICUCurrencyNumberFormatter.Signature.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  if ((static CurrencyFormatStyleConfiguration.Collection.== infix(_:_:)(a1, a2) & 1) == 0) {
    return 0LL;
  }
  uint64_t v4 = (int *)type metadata accessor for ICUCurrencyNumberFormatter.Signature(0LL);
  uint64_t v5 = v4[5];
  uint64_t v6 = *(void *)(a1 + v5);
  uint64_t v7 = *(void *)(a1 + v5 + 8);
  uint64_t v8 = (void *)(a2 + v5);
  BOOL v9 = v6 == *v8 && v7 == v8[1];
  if (v9 || (char v10 = _stringCompareWithSmolCheck(_:_:expecting:)(), result = 0LL, (v10 & 1) != 0))
  {
    uint64_t v12 = v4[6];
    uint64_t v13 = *(void *)(a1 + v12);
    uint64_t v14 = *(void *)(a1 + v12 + 8);
    BOOL v15 = (void *)(a2 + v12);
    BOOL v16 = v13 == *v15 && v14 == v15[1];
    if (v16 || (char v17 = _stringCompareWithSmolCheck(_:_:expecting:)(), result = 0LL, (v17 & 1) != 0))
    {
      outlined init with take of LocalePreferences?( a1 + v4[7],  (uint64_t)v109,  (uint64_t *)&demangling cache variable for type metadata for LocalePreferences?);
      outlined init with take of LocalePreferences?( a2 + v4[7],  (uint64_t)v110,  (uint64_t *)&demangling cache variable for type metadata for LocalePreferences?);
      outlined init with take of LocalePreferences?( (uint64_t)v109,  (uint64_t)v111,  (uint64_t *)&demangling cache variable for type metadata for LocalePreferences?);
      if (_s10Foundation17LocalePreferencesVSgWOg((uint64_t)v111) == 1)
      {
        outlined init with take of LocalePreferences?( (uint64_t)v110,  (uint64_t)v107,  (uint64_t *)&demangling cache variable for type metadata for LocalePreferences?);
        goto LABEL_17;
      }

      outlined init with take of LocalePreferences?( (uint64_t)v109,  (uint64_t)&v99,  (uint64_t *)&demangling cache variable for type metadata for LocalePreferences?);
      outlined init with take of LocalePreferences?( (uint64_t)v110,  (uint64_t)v107,  (uint64_t *)&demangling cache variable for type metadata for LocalePreferences?);
      if (_s10Foundation17LocalePreferencesVSgWOg((uint64_t)v107) == 1)
      {
        v61[6] = v105;
        v62[0] = *(_OWORD *)v106;
        *(_OWORD *)((char *)v62 + 12) = *(_OWORD *)&v106[12];
        _OWORD v61[2] = v101;
        __int128 v61[3] = v102;
        v61[4] = v103;
        v61[5] = v104;
        v61[0] = v99;
        v61[1] = v100;
        outlined init with take of LocalePreferences?( (uint64_t)v109,  (uint64_t)v63,  (uint64_t *)&demangling cache variable for type metadata for LocalePreferences?);
        outlined init with take of LocalePreferences?( (uint64_t)v109,  (uint64_t)&v80,  (uint64_t *)&demangling cache variable for type metadata for LocalePreferences?);
        outlined retain of LocalePreferences(&v80);
        outlined retain of LocalePreferences(v63);
        outlined release of LocalePreferences(v61);
LABEL_17:
        outlined init with take of LocalePreferences?( (uint64_t)v109,  (uint64_t)v107,  (uint64_t *)&demangling cache variable for type metadata for LocalePreferences?);
        outlined init with take of LocalePreferences?( (uint64_t)v110,  (uint64_t)&v108,  (uint64_t *)&demangling cache variable for type metadata for LocalePreferences?);
        outlined retain of LocalePreferences?( (uint64_t)v110,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined copy of LocalePreferences?);
        outlined release of (LocalePreferences?, LocalePreferences?)((uint64_t)v107);
        return 0LL;
      }

      outlined init with take of LocalePreferences?( (uint64_t)v110,  (uint64_t)&v80,  (uint64_t *)&demangling cache variable for type metadata for LocalePreferences?);
      char v18 = v99;
      uint64_t v19 = *((void *)&v99 + 1);
      __int128 v20 = v100;
      __int128 v21 = v101;
      __int128 v22 = v102;
      __int128 v59 = (void *)*((void *)&v103 + 1);
      __int128 v60 = (void *)v103;
      __int128 v57 = (void *)*((void *)&v104 + 1);
      __int128 v58 = (void *)v104;
      uint64_t v55 = *((void *)&v105 + 1);
      uint64_t v56 = (void *)v105;
      uint64_t v53 = *(void *)&v106[8];
      uint64_t v54 = *(void *)v106;
      uint64_t v23 = *(void *)&v106[16];
      int v51 = v106[25];
      int v52 = v106[24];
      int v49 = v106[27];
      int v50 = v106[26];
      if (v99 == 2)
      {
      }

      else if (v80 == 2 || ((((v99 & 1) == 0) ^ v80) & 1) == 0)
      {
        goto LABEL_58;
      }

      if (*((void *)&v99 + 1))
      {
        if (!v81 || (specialized static Array<A>.== infix(_:_:)(*((void **)&v99 + 1), v81) & 1) == 0) {
          goto LABEL_55;
        }
      }

      else if (v81)
      {
        goto LABEL_55;
      }

      if (*((void *)&v20 + 1))
      {
        if (!*((void *)&v82 + 1) || v20 != v82 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
          goto LABEL_55;
        }
      }

      else if (*((void *)&v82 + 1))
      {
        goto LABEL_55;
      }

      if (*((void *)&v21 + 1))
      {
        if (!*((void *)&v83 + 1) || v21 != v83 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
          goto LABEL_55;
        }
      }

      else if (*((void *)&v83 + 1))
      {
        goto LABEL_55;
      }

      if ((void)v22)
      {
        if (!v84 || (specialized static Dictionary<>.== infix(_:_:)(v22, v84) & 1) == 0) {
          goto LABEL_55;
        }
      }

      else if (v84)
      {
        goto LABEL_55;
      }

      if (*((void *)&v22 + 1))
      {
        if (v85 && (specialized static Dictionary<>.== infix(_:_:)(*((uint64_t *)&v22 + 1), v85) & 1) != 0)
        {
LABEL_50:
          uint64_t v24 = v86;
          id v43 = v88;
          id v45 = v87;
          id v38 = v90;
          id v40 = v89;
          if (v60)
          {
            if (!v86)
            {
              outlined init with take of LocalePreferences?( (uint64_t)v109,  (uint64_t)v63,  (uint64_t *)&demangling cache variable for type metadata for LocalePreferences?);
              outlined retain of LocalePreferences?( (uint64_t)v109,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined copy of LocalePreferences?);
              outlined retain of LocalePreferences(v63);
              goto LABEL_60;
            }

            type metadata accessor for CFDictionaryRef(0LL);
            outlined retain of LocalePreferences?( (uint64_t)v109,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined copy of LocalePreferences?);
            outlined retain of LocalePreferences?( (uint64_t)v109,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined copy of LocalePreferences?);
            outlined retain of LocalePreferences?( (uint64_t)v110,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined copy of LocalePreferences?);
            lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( (unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef,  (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef,  (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
            id v34 = (id)v24;
            id v33 = v60;
            char v25 = static _CFObject.== infix(_:_:)();

            if ((v25 & 1) == 0) {
              goto LABEL_110;
            }
          }

          else
          {
            if (v86)
            {
LABEL_58:
              outlined init with take of LocalePreferences?( (uint64_t)v109,  (uint64_t)v63,  (uint64_t *)&demangling cache variable for type metadata for LocalePreferences?);
              outlined retain of LocalePreferences?( (uint64_t)v109,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined copy of LocalePreferences?);
              outlined retain of LocalePreferences(v63);
              goto LABEL_59;
            }

            outlined retain of LocalePreferences?( (uint64_t)v109,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined copy of LocalePreferences?);
            outlined retain of LocalePreferences?( (uint64_t)v109,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined copy of LocalePreferences?);
            outlined retain of LocalePreferences?( (uint64_t)v110,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined copy of LocalePreferences?);
          }

          if (v59)
          {
            if (!v45) {
              goto LABEL_110;
            }
            type metadata accessor for CFDictionaryRef(0LL);
            lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( (unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef,  (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef,  (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
            id v46 = v45;
            id v35 = v59;
            char v28 = static _CFObject.== infix(_:_:)();

            if ((v28 & 1) == 0) {
              goto LABEL_110;
            }
          }

          else if (v45)
          {
            goto LABEL_110;
          }

          if (v58)
          {
            if (!v43) {
              goto LABEL_110;
            }
            type metadata accessor for CFDictionaryRef(0LL);
            lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( (unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef,  (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef,  (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
            id v44 = v43;
            id v36 = v58;
            char v29 = static _CFObject.== infix(_:_:)();

            if ((v29 & 1) == 0) {
              goto LABEL_110;
            }
          }

          else if (v43)
          {
            goto LABEL_110;
          }

          if (v57)
          {
            if (!v40) {
              goto LABEL_110;
            }
            type metadata accessor for CFDictionaryRef(0LL);
            lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( (unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef,  (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef,  (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
            id v41 = v40;
            id v37 = v57;
            char v30 = static _CFObject.== infix(_:_:)();

            if ((v30 & 1) == 0) {
              goto LABEL_110;
            }
          }

          else if (v40)
          {
            goto LABEL_110;
          }

          if (v56)
          {
            if (!v38) {
              goto LABEL_110;
            }
            type metadata accessor for CFDictionaryRef(0LL);
            lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( (unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef,  (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef,  (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
            id v42 = v38;
            id v39 = v56;
            char v31 = static _CFObject.== infix(_:_:)();

            if ((v31 & 1) == 0) {
              goto LABEL_110;
            }
          }

          else if (v38)
          {
            goto LABEL_110;
          }

          uint64_t v24 = v91;
          if (v55)
          {
            if (!v91) {
              goto LABEL_93;
            }
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            char v47 = specialized static Dictionary<>.== infix(_:_:)(v55, v24);
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            if ((v47 & 1) == 0) {
              goto LABEL_110;
            }
          }

          else if (v91)
          {
            goto LABEL_110;
          }

          uint64_t v24 = v92;
          if (!v54)
          {
            if (v92) {
              goto LABEL_110;
            }
LABEL_95:
            if (v23)
            {
              if (!v94 || (v53 != v93 || v23 != v94) && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
                goto LABEL_110;
              }
            }

            else if (v94)
            {
              goto LABEL_110;
            }

            if (v52 != 2)
            {
              if (v95 == 2 || ((v95 ^ v52) & 1) != 0) {
                goto LABEL_110;
              }
LABEL_107:
              int v32 = v96;
              if (v51 == 2)
              {
                outlined retain of LocalePreferences?( (uint64_t)v110,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined consume of LocalePreferences?);
                if (v32 != 2) {
                  goto LABEL_59;
                }
              }

              else
              {
                outlined retain of LocalePreferences?( (uint64_t)v110,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined consume of LocalePreferences?);
                if (v32 == 2 || ((v32 ^ v51) & 1) != 0) {
                  goto LABEL_59;
                }
              }

              if (v50 == 2)
              {
                if (v97 != 2) {
                  goto LABEL_59;
                }
              }

              else
              {
                LOBYTE(v24) = 0;
                if (v97 == 2 || ((((v50 & 1) == 0) ^ v97) & 1) == 0) {
                  goto LABEL_60;
                }
              }

              if (v49 == 2)
              {
                if (v98 != 2) {
                  goto LABEL_59;
                }
              }

              else if (v98 == 2 || ((((v49 & 1) == 0) ^ v98) & 1) == 0)
              {
                goto LABEL_59;
              }

              LOBYTE(v24) = 1;
LABEL_60:
              LOBYTE(v63[0]) = v18;
              v63[1] = v19;
              __int128 v64 = v20;
              __int128 v65 = v21;
              __int128 v66 = v22;
              __int128 v67 = v60;
              __int128 v68 = v59;
              unint64_t v69 = v58;
              uint64_t v70 = v57;
              uint64_t v71 = v56;
              uint64_t v72 = v55;
              uint64_t v73 = v54;
              uint64_t v74 = v53;
              uint64_t v75 = v23;
              char v76 = v52;
              char v77 = v51;
              char v78 = v50;
              char v79 = v49;
              outlined release of LocalePreferences(v63);
              outlined retain of LocalePreferences?( (uint64_t)v109,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined consume of LocalePreferences?);
              return (v24 & 1) != 0;
            }

            if (v95 == 2) {
              goto LABEL_107;
            }
LABEL_110:
            char v27 = outlined consume of LocalePreferences?;
            uint64_t v26 = v110;
            goto LABEL_56;
          }

          if (v92)
          {
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            char v48 = specialized static Dictionary<>.== infix(_:_:)(v54, v24);
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            if ((v48 & 1) == 0) {
              goto LABEL_110;
            }
            goto LABEL_95;
          }

BOOL specialized static ICUPercentNumberFormatter.Signature.== infix(_:_:)( uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  if ((static NumberFormatStyleConfiguration.Collection.== infix(_:_:)(a1, a2) & 1) == 0) {
    return 0LL;
  }
  uint64_t v6 = a3(0LL);
  uint64_t v7 = *(int *)(v6 + 20);
  uint64_t v8 = *(void *)(a1 + v7);
  uint64_t v9 = *(void *)(a1 + v7 + 8);
  char v10 = (void *)(a2 + v7);
  BOOL v11 = v8 == *v10 && v9 == v10[1];
  if (v11 || (char v12 = _stringCompareWithSmolCheck(_:_:expecting:)(), result = 0LL, (v12 & 1) != 0))
  {
    outlined init with take of LocalePreferences?( a1 + *(int *)(v6 + 24),  (uint64_t)v105,  (uint64_t *)&demangling cache variable for type metadata for LocalePreferences?);
    outlined init with take of LocalePreferences?( a2 + *(int *)(v6 + 24),  (uint64_t)v106,  (uint64_t *)&demangling cache variable for type metadata for LocalePreferences?);
    outlined init with take of LocalePreferences?( (uint64_t)v105,  (uint64_t)v107,  (uint64_t *)&demangling cache variable for type metadata for LocalePreferences?);
    if (_s10Foundation17LocalePreferencesVSgWOg((uint64_t)v107) == 1)
    {
      outlined init with take of LocalePreferences?( (uint64_t)v106,  (uint64_t)v103,  (uint64_t *)&demangling cache variable for type metadata for LocalePreferences?);
      goto LABEL_12;
    }

    outlined init with take of LocalePreferences?( (uint64_t)v105,  (uint64_t)&v95,  (uint64_t *)&demangling cache variable for type metadata for LocalePreferences?);
    outlined init with take of LocalePreferences?( (uint64_t)v106,  (uint64_t)v103,  (uint64_t *)&demangling cache variable for type metadata for LocalePreferences?);
    if (_s10Foundation17LocalePreferencesVSgWOg((uint64_t)v103) == 1)
    {
      v57[6] = v101;
      v58[0] = *(_OWORD *)v102;
      *(_OWORD *)((char *)v58 + 12) = *(_OWORD *)&v102[12];
      v57[2] = v97;
      v57[3] = v98;
      v57[4] = v99;
      v57[5] = v100;
      v57[0] = v95;
      v57[1] = v96;
      outlined init with take of LocalePreferences?( (uint64_t)v105,  (uint64_t)v59,  (uint64_t *)&demangling cache variable for type metadata for LocalePreferences?);
      outlined init with take of LocalePreferences?( (uint64_t)v105,  (uint64_t)&v76,  (uint64_t *)&demangling cache variable for type metadata for LocalePreferences?);
      outlined retain of LocalePreferences(&v76);
      outlined retain of LocalePreferences(v59);
      outlined release of LocalePreferences(v57);
LABEL_12:
      outlined init with take of LocalePreferences?( (uint64_t)v105,  (uint64_t)v103,  (uint64_t *)&demangling cache variable for type metadata for LocalePreferences?);
      outlined init with take of LocalePreferences?( (uint64_t)v106,  (uint64_t)&v104,  (uint64_t *)&demangling cache variable for type metadata for LocalePreferences?);
      outlined retain of LocalePreferences?( (uint64_t)v106,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined copy of LocalePreferences?);
      outlined release of (LocalePreferences?, LocalePreferences?)((uint64_t)v103);
      return 0LL;
    }

    outlined init with take of LocalePreferences?( (uint64_t)v106,  (uint64_t)&v76,  (uint64_t *)&demangling cache variable for type metadata for LocalePreferences?);
    char v14 = v95;
    uint64_t v15 = *((void *)&v95 + 1);
    __int128 v16 = v96;
    __int128 v17 = v97;
    __int128 v18 = v98;
    uint64_t v55 = (void *)*((void *)&v99 + 1);
    uint64_t v56 = (void *)v99;
    uint64_t v53 = (void *)*((void *)&v100 + 1);
    uint64_t v54 = (void *)v100;
    uint64_t v51 = *((void *)&v101 + 1);
    int v52 = (void *)v101;
    uint64_t v49 = *(void *)&v102[8];
    uint64_t v50 = *(void *)v102;
    uint64_t v19 = *(void *)&v102[16];
    int v47 = v102[25];
    int v48 = v102[24];
    int v45 = v102[27];
    int v46 = v102[26];
    if (v95 == 2)
    {
    }

    else if (v76 == 2 || ((((v95 & 1) == 0) ^ v76) & 1) == 0)
    {
      goto LABEL_53;
    }

    if (*((void *)&v95 + 1))
    {
      if (!v77 || (specialized static Array<A>.== infix(_:_:)(*((void **)&v95 + 1), v77) & 1) == 0) {
        goto LABEL_50;
      }
    }

    else if (v77)
    {
      goto LABEL_50;
    }

    if (*((void *)&v16 + 1))
    {
      if (!*((void *)&v78 + 1) || v16 != v78 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
        goto LABEL_50;
      }
    }

    else if (*((void *)&v78 + 1))
    {
      goto LABEL_50;
    }

    if (*((void *)&v17 + 1))
    {
      if (!*((void *)&v79 + 1) || v17 != v79 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
        goto LABEL_50;
      }
    }

    else if (*((void *)&v79 + 1))
    {
      goto LABEL_50;
    }

    if ((void)v18)
    {
      if (!v80 || (specialized static Dictionary<>.== infix(_:_:)(v18, v80) & 1) == 0) {
        goto LABEL_50;
      }
    }

    else if (v80)
    {
      goto LABEL_50;
    }

    if (*((void *)&v18 + 1))
    {
      if (v81 && (specialized static Dictionary<>.== infix(_:_:)(*((uint64_t *)&v18 + 1), v81) & 1) != 0)
      {
LABEL_45:
        uint64_t v20 = v82;
        id v39 = v84;
        id v41 = v83;
        id v34 = v86;
        id v36 = v85;
        if (v56)
        {
          if (!v82)
          {
            outlined init with take of LocalePreferences?( (uint64_t)v105,  (uint64_t)v59,  (uint64_t *)&demangling cache variable for type metadata for LocalePreferences?);
            outlined retain of LocalePreferences?( (uint64_t)v105,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined copy of LocalePreferences?);
            outlined retain of LocalePreferences(v59);
            goto LABEL_55;
          }

          type metadata accessor for CFDictionaryRef(0LL);
          outlined retain of LocalePreferences?( (uint64_t)v105,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined copy of LocalePreferences?);
          outlined retain of LocalePreferences?( (uint64_t)v105,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined copy of LocalePreferences?);
          outlined retain of LocalePreferences?( (uint64_t)v106,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined copy of LocalePreferences?);
          lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( (unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef,  (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef,  (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
          id v30 = (id)v20;
          id v29 = v56;
          char v21 = static _CFObject.== infix(_:_:)();

          if ((v21 & 1) == 0) {
            goto LABEL_105;
          }
        }

        else
        {
          if (v82)
          {
LABEL_53:
            outlined init with take of LocalePreferences?( (uint64_t)v105,  (uint64_t)v59,  (uint64_t *)&demangling cache variable for type metadata for LocalePreferences?);
            outlined retain of LocalePreferences?( (uint64_t)v105,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined copy of LocalePreferences?);
            outlined retain of LocalePreferences(v59);
            goto LABEL_54;
          }

          outlined retain of LocalePreferences?( (uint64_t)v105,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined copy of LocalePreferences?);
          outlined retain of LocalePreferences?( (uint64_t)v105,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined copy of LocalePreferences?);
          outlined retain of LocalePreferences?( (uint64_t)v106,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined copy of LocalePreferences?);
        }

        if (v55)
        {
          if (!v41) {
            goto LABEL_105;
          }
          type metadata accessor for CFDictionaryRef(0LL);
          lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( (unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef,  (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef,  (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
          id v42 = v41;
          id v31 = v55;
          char v24 = static _CFObject.== infix(_:_:)();

          if ((v24 & 1) == 0) {
            goto LABEL_105;
          }
        }

        else if (v41)
        {
          goto LABEL_105;
        }

        if (v54)
        {
          if (!v39) {
            goto LABEL_105;
          }
          type metadata accessor for CFDictionaryRef(0LL);
          lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( (unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef,  (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef,  (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
          id v40 = v39;
          id v32 = v54;
          char v25 = static _CFObject.== infix(_:_:)();

          if ((v25 & 1) == 0) {
            goto LABEL_105;
          }
        }

        else if (v39)
        {
          goto LABEL_105;
        }

        if (v53)
        {
          if (!v36) {
            goto LABEL_105;
          }
          type metadata accessor for CFDictionaryRef(0LL);
          lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( (unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef,  (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef,  (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
          id v37 = v36;
          id v33 = v53;
          char v26 = static _CFObject.== infix(_:_:)();

          if ((v26 & 1) == 0) {
            goto LABEL_105;
          }
        }

        else if (v36)
        {
          goto LABEL_105;
        }

        if (v52)
        {
          if (!v34) {
            goto LABEL_105;
          }
          type metadata accessor for CFDictionaryRef(0LL);
          lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( (unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef,  (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef,  (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
          id v38 = v34;
          id v35 = v52;
          char v27 = static _CFObject.== infix(_:_:)();

          if ((v27 & 1) == 0) {
            goto LABEL_105;
          }
        }

        else if (v34)
        {
          goto LABEL_105;
        }

        uint64_t v20 = v87;
        if (v51)
        {
          if (!v87) {
            goto LABEL_88;
          }
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          char v43 = specialized static Dictionary<>.== infix(_:_:)(v51, v20);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if ((v43 & 1) == 0) {
            goto LABEL_105;
          }
        }

        else if (v87)
        {
          goto LABEL_105;
        }

        uint64_t v20 = v88;
        if (!v50)
        {
          if (v88) {
            goto LABEL_105;
          }
LABEL_90:
          if (v19)
          {
            if (!v90 || (v49 != v89 || v19 != v90) && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
              goto LABEL_105;
            }
          }

          else if (v90)
          {
            goto LABEL_105;
          }

          if (v48 != 2)
          {
            if (v91 == 2 || ((v91 ^ v48) & 1) != 0) {
              goto LABEL_105;
            }
LABEL_102:
            int v28 = v92;
            if (v47 == 2)
            {
              outlined retain of LocalePreferences?( (uint64_t)v106,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined consume of LocalePreferences?);
              if (v28 != 2) {
                goto LABEL_54;
              }
            }

            else
            {
              outlined retain of LocalePreferences?( (uint64_t)v106,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined consume of LocalePreferences?);
              if (v28 == 2 || ((v28 ^ v47) & 1) != 0) {
                goto LABEL_54;
              }
            }

            if (v46 == 2)
            {
              if (v93 != 2) {
                goto LABEL_54;
              }
            }

            else
            {
              LOBYTE(v20) = 0;
              if (v93 == 2 || ((((v46 & 1) == 0) ^ v93) & 1) == 0) {
                goto LABEL_55;
              }
            }

            if (v45 == 2)
            {
              if (v94 != 2) {
                goto LABEL_54;
              }
            }

            else if (v94 == 2 || ((((v45 & 1) == 0) ^ v94) & 1) == 0)
            {
              goto LABEL_54;
            }

            LOBYTE(v20) = 1;
LABEL_55:
            LOBYTE(v59[0]) = v14;
            v59[1] = v15;
            __int128 v60 = v16;
            __int128 v61 = v17;
            __int128 v62 = v18;
            __int128 v63 = v56;
            __int128 v64 = v55;
            __int128 v65 = v54;
            __int128 v66 = v53;
            __int128 v67 = v52;
            uint64_t v68 = v51;
            uint64_t v69 = v50;
            uint64_t v70 = v49;
            uint64_t v71 = v19;
            char v72 = v48;
            char v73 = v47;
            char v74 = v46;
            char v75 = v45;
            outlined release of LocalePreferences(v59);
            outlined retain of LocalePreferences?( (uint64_t)v105,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined consume of LocalePreferences?);
            return (v20 & 1) != 0;
          }

          if (v91 == 2) {
            goto LABEL_102;
          }
LABEL_105:
          uint64_t v23 = outlined consume of LocalePreferences?;
          __int128 v22 = v106;
          goto LABEL_51;
        }

        if (v88)
        {
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          char v44 = specialized static Dictionary<>.== infix(_:_:)(v50, v20);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if ((v44 & 1) == 0) {
            goto LABEL_105;
          }
          goto LABEL_90;
        }

uint64_t specialized static ICUCurrencyNumberFormatter.skeleton(for:)(uint64_t a1)
{
  Swift::UInt8 v1 = (uint64_t *)(a1 + *(int *)(type metadata accessor for ICUCurrencyNumberFormatter.Signature(0LL) + 20));
  uint64_t v2 = *v1;
  uint64_t v3 = (void *)v1[1];
  swift_bridgeObjectRetain();
  v4._countAndFlagsBits = v2;
  v4._object = v3;
  String.append(_:)(v4);
  swift_bridgeObjectRelease();
  CurrencyFormatStyleConfiguration.Collection.skeleton.getter();
  uint64_t v6 = v5;
  uint64_t v8 = v7;
  if (String.count.getter() >= 1)
  {
    v9._countAndFlagsBits = v6;
    v9._object = v8;
    String.append(_:)(v9);
    swift_bridgeObjectRelease();
    v10._countAndFlagsBits = 32LL;
    v10._object = (void *)0xE100000000000000LL;
    String.append(_:)(v10);
  }

  swift_bridgeObjectRelease();
  return 0x79636E6572727563LL;
}

uint64_t type metadata accessor for ICUPercentNumberFormatter.Signature(uint64_t a1)
{
  return type metadata accessor for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format( a1,  (uint64_t *)&type metadata singleton initialization cache for ICUPercentNumberFormatter.Signature);
}

char *specialized static ICUByteCountNumberFormatter.create(for:locale:)( void *a1, unint64_t a2, uint64_t a3)
{
  void (*v11)(__int128 *__return_ptr, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  os_unfair_lock_s *v14;
  void *v15;
  os_unfair_lock_s *v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  os_unfair_lock_s *v21;
  char isUniquelyReferenced_nonNull_native;
  char v23;
  uint64_t v24;
  BOOL v25;
  BOOL v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *result;
  unint64_t v34;
  int64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  _OWORD *v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  uint64_t v50;
  uint64_t v51;
  int64_t v52;
  unint64_t v53;
  int64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t *v57;
  uint64_t v58;
  os_unfair_lock_s *v59;
  void (*v60)(uint64_t, uint64_t);
  int64_t v61;
  void *__src;
  char *__srca;
  uint64_t v64;
  _OWORD v65[9];
  _BYTE v66[28];
  _BYTE v67[144];
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  _OWORD v77[2];
  _BYTE v78[45];
  __int128 v79;
  __int128 v80;
  _OWORD v81[7];
  _OWORD v82[2];
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  _OWORD v92[2];
  uint64_t v93;
  unsigned __int8 v93 = *MEMORY[0x1895F89C0];
  uint64_t v5 = *(void *)(a3 + 8);
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v7 = *(void (**)(uint64_t, uint64_t))(v5 + 472);
  swift_bridgeObjectRetain();
  swift_unknownObjectRetain();
  __int128 v60 = v7;
  uint64_t v8 = ((uint64_t (*)(uint64_t, uint64_t))v7)(ObjectType, v5);
  uint64_t v10 = v9;
  BOOL v11 = *(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(v5 + 464);
  v11(&v83, ObjectType, v5);
  swift_unknownObjectRelease();
  outlined init with take of LocalePreferences?( (uint64_t)&v83,  (uint64_t)v78,  (uint64_t *)&demangling cache variable for type metadata for LocalePreferences?);
  __src = a1;
  *(void *)&__int128 v79 = a1;
  *((void *)&v79 + 1) = a2;
  *(void *)&uint64_t v80 = v8;
  *((void *)&v80 + 1) = v10;
  outlined init with take of LocalePreferences?( (uint64_t)v78,  (uint64_t)v81,  (uint64_t *)&demangling cache variable for type metadata for LocalePreferences?);
  if (one-time initialization token for cache != -1) {
    swift_once();
  }
  char v12 = unk_18C5C4FE8;
  uint64_t v56 = static ICUByteCountNumberFormatter.cache[0];
  uint64_t v76 = v81[6];
  v77[0] = v82[0];
  *(_OWORD *)((char *)v77 + 12) = *(_OWORD *)((char *)v82 + 12);
  char v72 = v81[2];
  char v73 = v81[3];
  char v74 = v81[4];
  char v75 = v81[5];
  uint64_t v68 = v79;
  uint64_t v69 = v80;
  uint64_t v13 = unk_18C5C4FE8 + 16LL;
  char v14 = (os_unfair_lock_s *)(unk_18C5C4FE8 + 24LL);
  uint64_t v70 = v81[0];
  uint64_t v71 = v81[1];
  swift_retain_n();
  os_unfair_lock_lock(v14);
  unsigned __int8 v91 = v76;
  v92[0] = v77[0];
  *(_OWORD *)((char *)v92 + 12) = *(_OWORD *)((char *)v77 + 12);
  uint64_t v87 = v72;
  uint64_t v88 = v73;
  uint64_t v89 = v74;
  uint64_t v90 = v75;
  __int128 v83 = v68;
  uint64_t v84 = v69;
  uint64_t v85 = v70;
  uint64_t v86 = v71;
  __int128 v57 = (uint64_t *)v13;
  uint64_t v15 = (void *)specialized closure #1 in FormatterCache.formatter(for:creator:)(v13, (uint64_t)&v83);
  __int128 v59 = v14;
  __int128 v16 = v14;
  __int128 v17 = v12;
  os_unfair_lock_unlock(v16);
  swift_release();
  if (v15 != (void *)1) {
    goto LABEL_56;
  }
  swift_bridgeObjectRetain();
  swift_unknownObjectRetain();
  v60(ObjectType, v5);
  v11(&v83, ObjectType, v5);
  swift_unknownObjectRelease();
  outlined init with take of LocalePreferences?( (uint64_t)&v83,  (uint64_t)v67,  (uint64_t *)&demangling cache variable for type metadata for LocalePreferences?);
  outlined retain of LocalePreferences?( (uint64_t)v67,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined consume of LocalePreferences?);
  type metadata accessor for ICUByteCountNumberFormatter();
  uint64_t v15 = (void *)swift_allocObject();
  v15[3] = __src;
  v15[4] = a2;
  swift_bridgeObjectRetain();
  __int128 v18 = specialized _copyCollectionToContiguousArray<A>(_:)((uint64_t)__src, a2);
  uint64_t v19 = swift_bridgeObjectRelease();
  LODWORD(v65[0]) = 0;
  if (v18[2] >> 31)
  {
    __break(1u);
  }

  else
  {
    String.utf8CString.getter();
    swift_bridgeObjectRelease();
    uint64_t v20 = unumf_openForSkeletonAndLocale();
    swift_release();
    swift_release();
    LOBYTE(v11) = (_BYTE)v57;
    char v21 = v59;
    if (v20)
    {
      v15[2] = v20;
    }

    else
    {
      swift_bridgeObjectRelease();
      type metadata accessor for ICUNumberFormatterBase();
      swift_deallocPartialClassInstance();
      uint64_t v15 = 0LL;
    }

    swift_retain();
    os_unfair_lock_lock(v59);
    if (v56 >= *(void *)(*(void *)(v12 + 16) + 16LL)) {
      swift_bridgeObjectRetain();
    }
    else {
      *__int128 v57 = MEMORY[0x18961AFF0];
    }
    unsigned __int8 v91 = v76;
    v92[0] = v77[0];
    *(_OWORD *)((char *)v92 + 12) = *(_OWORD *)((char *)v77 + 12);
    uint64_t v87 = v72;
    uint64_t v88 = v73;
    uint64_t v89 = v74;
    uint64_t v90 = v75;
    __int128 v83 = v68;
    uint64_t v84 = v69;
    uint64_t v85 = v70;
    uint64_t v86 = v71;
    swift_retain();
    int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    __int128 v64 = *v57;
    char v12 = *v57;
    *__int128 v57 = 0x8000000000000000LL;
    uint64_t v19 = specialized __RawDictionaryStorage.find<A>(_:)(&v83);
    char v24 = *(void *)(v12 + 16);
    char v25 = (v23 & 1) == 0;
    char v26 = __OFADD__(v24, v25);
    char v27 = v24 + v25;
    if (!v26)
    {
      LOBYTE(v11) = v23;
      if (*(void *)(v12 + 24) < v27)
      {
        specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)( v27,  isUniquelyReferenced_nonNull_native);
        int v28 = v64;
        uint64_t v19 = specialized __RawDictionaryStorage.find<A>(_:)(&v83);
        uint64_t v19 = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
        __break(1u);
      }

      if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      {
        int v28 = v12;
LABEL_17:
        if ((v11 & 1) != 0)
        {
LABEL_18:
          id v30 = *(void *)(v28 + 56);
          id v31 = 8 * v19;
          swift_release();
          *(void *)(v30 + v31) = v15;
LABEL_55:
          *(void *)(v17 + 16) = v28;
          swift_bridgeObjectRelease();
          os_unfair_lock_unlock(v21);
          swift_release();
          swift_bridgeObjectRelease();
          outlined consume of ICUDateIntervalFormatter??(1LL);
LABEL_56:
          swift_release();
          outlined release of ICUByteCountNumberFormatter.Signature((uint64_t)&v79);
          return (char *)v15;
        }

char *specialized static ICUMeasurementNumberFormatter.create(for:locale:)( void *a1, unint64_t a2, uint64_t a3)
{
  void (*v11)(__int128 *__return_ptr, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  os_unfair_lock_s *v14;
  void *v15;
  os_unfair_lock_s *v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  os_unfair_lock_s *v21;
  char isUniquelyReferenced_nonNull_native;
  char v23;
  uint64_t v24;
  BOOL v25;
  BOOL v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *result;
  unint64_t v34;
  int64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  _OWORD *v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  uint64_t v50;
  uint64_t v51;
  int64_t v52;
  unint64_t v53;
  int64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t *v57;
  uint64_t v58;
  os_unfair_lock_s *v59;
  void (*v60)(uint64_t, uint64_t);
  int64_t v61;
  void *__src;
  char *__srca;
  uint64_t v64;
  _OWORD v65[9];
  _BYTE v66[28];
  _BYTE v67[144];
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  _OWORD v77[2];
  _BYTE v78[45];
  __int128 v79;
  __int128 v80;
  _OWORD v81[7];
  _OWORD v82[2];
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  _OWORD v92[2];
  uint64_t v93;
  unsigned __int8 v93 = *MEMORY[0x1895F89C0];
  uint64_t v5 = *(void *)(a3 + 8);
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v7 = *(void (**)(uint64_t, uint64_t))(v5 + 472);
  swift_bridgeObjectRetain();
  swift_unknownObjectRetain();
  __int128 v60 = v7;
  uint64_t v8 = ((uint64_t (*)(uint64_t, uint64_t))v7)(ObjectType, v5);
  uint64_t v10 = v9;
  BOOL v11 = *(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(v5 + 464);
  v11(&v83, ObjectType, v5);
  swift_unknownObjectRelease();
  outlined init with take of LocalePreferences?( (uint64_t)&v83,  (uint64_t)v78,  (uint64_t *)&demangling cache variable for type metadata for LocalePreferences?);
  __src = a1;
  *(void *)&__int128 v79 = a1;
  *((void *)&v79 + 1) = a2;
  *(void *)&uint64_t v80 = v8;
  *((void *)&v80 + 1) = v10;
  outlined init with take of LocalePreferences?( (uint64_t)v78,  (uint64_t)v81,  (uint64_t *)&demangling cache variable for type metadata for LocalePreferences?);
  if (one-time initialization token for cache != -1) {
    swift_once();
  }
  char v12 = *(void *)algn_18C5C51A8;
  uint64_t v56 = static ICUMeasurementNumberFormatter.cache;
  uint64_t v76 = v81[6];
  v77[0] = v82[0];
  *(_OWORD *)((char *)v77 + 12) = *(_OWORD *)((char *)v82 + 12);
  char v72 = v81[2];
  char v73 = v81[3];
  char v74 = v81[4];
  char v75 = v81[5];
  uint64_t v68 = v79;
  uint64_t v69 = v80;
  uint64_t v13 = *(void *)algn_18C5C51A8 + 16LL;
  char v14 = (os_unfair_lock_s *)(*(void *)algn_18C5C51A8 + 24LL);
  uint64_t v70 = v81[0];
  uint64_t v71 = v81[1];
  swift_retain_n();
  os_unfair_lock_lock(v14);
  unsigned __int8 v91 = v76;
  v92[0] = v77[0];
  *(_OWORD *)((char *)v92 + 12) = *(_OWORD *)((char *)v77 + 12);
  uint64_t v87 = v72;
  uint64_t v88 = v73;
  uint64_t v89 = v74;
  uint64_t v90 = v75;
  __int128 v83 = v68;
  uint64_t v84 = v69;
  uint64_t v85 = v70;
  uint64_t v86 = v71;
  __int128 v57 = (uint64_t *)v13;
  uint64_t v15 = (void *)specialized closure #1 in FormatterCache.formatter(for:creator:)(v13, (uint64_t)&v83);
  __int128 v59 = v14;
  __int128 v16 = v14;
  __int128 v17 = v12;
  os_unfair_lock_unlock(v16);
  swift_release();
  if (v15 != (void *)1) {
    goto LABEL_56;
  }
  swift_bridgeObjectRetain();
  swift_unknownObjectRetain();
  v60(ObjectType, v5);
  v11(&v83, ObjectType, v5);
  swift_unknownObjectRelease();
  outlined init with take of LocalePreferences?( (uint64_t)&v83,  (uint64_t)v67,  (uint64_t *)&demangling cache variable for type metadata for LocalePreferences?);
  outlined retain of LocalePreferences?( (uint64_t)v67,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined consume of LocalePreferences?);
  type metadata accessor for ICUMeasurementNumberFormatter();
  uint64_t v15 = (void *)swift_allocObject();
  v15[3] = __src;
  v15[4] = a2;
  swift_bridgeObjectRetain();
  __int128 v18 = specialized _copyCollectionToContiguousArray<A>(_:)((uint64_t)__src, a2);
  uint64_t v19 = swift_bridgeObjectRelease();
  LODWORD(v65[0]) = 0;
  if (v18[2] >> 31)
  {
    __break(1u);
  }

  else
  {
    String.utf8CString.getter();
    swift_bridgeObjectRelease();
    uint64_t v20 = unumf_openForSkeletonAndLocale();
    swift_release();
    swift_release();
    LOBYTE(v11) = (_BYTE)v57;
    char v21 = v59;
    if (v20)
    {
      v15[2] = v20;
    }

    else
    {
      swift_bridgeObjectRelease();
      type metadata accessor for ICUNumberFormatterBase();
      swift_deallocPartialClassInstance();
      uint64_t v15 = 0LL;
    }

    swift_retain();
    os_unfair_lock_lock(v59);
    if (v56 >= *(void *)(*(void *)(v12 + 16) + 16LL)) {
      swift_bridgeObjectRetain();
    }
    else {
      *__int128 v57 = MEMORY[0x18961AFF0];
    }
    unsigned __int8 v91 = v76;
    v92[0] = v77[0];
    *(_OWORD *)((char *)v92 + 12) = *(_OWORD *)((char *)v77 + 12);
    uint64_t v87 = v72;
    uint64_t v88 = v73;
    uint64_t v89 = v74;
    uint64_t v90 = v75;
    __int128 v83 = v68;
    uint64_t v84 = v69;
    uint64_t v85 = v70;
    uint64_t v86 = v71;
    swift_retain();
    int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    __int128 v64 = *v57;
    char v12 = *v57;
    *__int128 v57 = 0x8000000000000000LL;
    uint64_t v19 = specialized __RawDictionaryStorage.find<A>(_:)(&v83);
    char v24 = *(void *)(v12 + 16);
    char v25 = (v23 & 1) == 0;
    char v26 = __OFADD__(v24, v25);
    char v27 = v24 + v25;
    if (!v26)
    {
      LOBYTE(v11) = v23;
      if (*(void *)(v12 + 24) < v27)
      {
        specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)( v27,  isUniquelyReferenced_nonNull_native);
        int v28 = v64;
        uint64_t v19 = specialized __RawDictionaryStorage.find<A>(_:)(&v83);
        uint64_t v19 = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
        __break(1u);
      }

      if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      {
        int v28 = v12;
LABEL_17:
        if ((v11 & 1) != 0)
        {
LABEL_18:
          id v30 = *(void *)(v28 + 56);
          id v31 = 8 * v19;
          swift_release();
          *(void *)(v30 + v31) = v15;
LABEL_55:
          *(void *)(v17 + 16) = v28;
          swift_bridgeObjectRelease();
          os_unfair_lock_unlock(v21);
          swift_release();
          swift_bridgeObjectRelease();
          outlined consume of ICUDateIntervalFormatter??(1LL);
LABEL_56:
          swift_release();
          outlined release of ICUByteCountNumberFormatter.Signature((uint64_t)&v79);
          return (char *)v15;
        }

uint64_t specialized static ICUNumberFormatter._create(with:)(uint64_t a1)
{
  v62[1] = *MEMORY[0x1895F89C0];
  uint64_t v2 = type metadata accessor for ICUNumberFormatter.Signature(0LL);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = MEMORY[0x1895F8858](v2);
  uint64_t v6 = (char *)&v53 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v4);
  uint64_t v8 = (char *)&v53 - v7;
  if (one-time initialization token for cache != -1) {
    swift_once();
  }
  uint64_t v9 = *(void *)algn_18C5CBA58;
  uint64_t v61 = static ICUNumberFormatter.cache;
  uint64_t v10 = *(void *)algn_18C5CBA58 + 16LL;
  uint64_t v11 = *(void *)algn_18C5CBA58 + 24LL;
  swift_retain_n();
  os_unfair_lock_lock((os_unfair_lock_t)(v9 + 24));
  specialized closure #1 in FormatterCache.formatter(for:creator:)(v9 + 16, a1, v62);
  os_unfair_lock_unlock((os_unfair_lock_t)(v9 + 24));
  swift_release();
  char v12 = (void *)v62[0];
  if (v62[0] != 1) {
    goto LABEL_62;
  }
  uint64_t v57 = v3;
  __int128 v58 = v6;
  __int128 v59 = v8;
  __int128 v60 = (os_unfair_lock_s *)v11;
  NumberFormatStyleConfiguration.Collection.skeleton.getter();
  uint64_t v14 = v13;
  unint64_t v16 = v15;
  uint64_t v17 = *(void *)(a1 + *(int *)(v2 + 20));
  type metadata accessor for ICUNumberFormatter();
  char v12 = (void *)swift_allocObject();
  v12[3] = v14;
  v12[4] = v16;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  __int128 v18 = specialized _copyCollectionToContiguousArray<A>(_:)(v14, v16);
  swift_bridgeObjectRelease();
  LODWORD(v62[0]) = 0;
  if (v18[2] >> 31)
  {
    __break(1u);
    goto LABEL_22;
  }

  String.utf8CString.getter();
  swift_bridgeObjectRelease();
  uint64_t v20 = unumf_openForSkeletonAndLocale();
  swift_release();
  swift_release();
  unint64_t v16 = (unint64_t)v59;
  char v21 = v60;
  if (!v20) {
    goto LABEL_8;
  }
  if (SLODWORD(v62[0]) > 0)
  {
    unumf_close();
LABEL_8:
    swift_bridgeObjectRelease();
    type metadata accessor for ICUNumberFormatterBase();
    swift_deallocPartialClassInstance();
    char v12 = 0LL;
    goto LABEL_10;
  }

  v12[2] = v20;
LABEL_10:
  swift_retain();
  os_unfair_lock_lock(v21);
  if (v61 >= *(void *)(*(void *)(v9 + 16) + 16LL)) {
    swift_bridgeObjectRetain();
  }
  else {
    *(void *)uint64_t v10 = MEMORY[0x18961AFF0];
  }
  outlined init with copy of ICUNumberFormatter.Signature( a1,  v16,  type metadata accessor for ICUNumberFormatter.Signature);
  swift_retain();
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v62[0] = *(void *)v10;
  uint64_t v17 = v62[0];
  *(void *)uint64_t v10 = 0x8000000000000000LL;
  uint64_t v19 = specialized __RawDictionaryStorage.find<A>(_:)(v16);
  uint64_t v24 = *(void *)(v17 + 16);
  BOOL v25 = (v23 & 1) == 0;
  uint64_t v26 = v24 + v25;
  if (!__OFADD__(v24, v25))
  {
    LOBYTE(v10) = v23;
    if (*(void *)(v17 + 24) < v26)
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)( v26,  isUniquelyReferenced_nonNull_native);
      uint64_t v27 = v62[0];
      uint64_t v28 = specialized __RawDictionaryStorage.find<A>(_:)(v16);
      if ((v10 & 1) != (v29 & 1)) {
        goto LABEL_65;
      }
      uint64_t v19 = v28;
      id v30 = v60;
      if ((v10 & 1) == 0) {
        goto LABEL_60;
      }
LABEL_20:
      uint64_t v31 = *(void *)(v27 + 56);
      uint64_t v32 = 8 * v19;
      swift_release();
      *(void *)(v31 + v32) = v12;
LABEL_61:
      *(void *)(v9 + 16) = v27;
      swift_bridgeObjectRelease();
      outlined destroy of ICUNumberFormatter.Signature(v16, type metadata accessor for ICUNumberFormatter.Signature);
      os_unfair_lock_unlock(v30);
      swift_release();
      swift_bridgeObjectRelease();
      outlined consume of ICUDateIntervalFormatter??(1LL);
LABEL_62:
      swift_release();
      return (uint64_t)v12;
    }

    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
    {
      uint64_t v27 = v17;
      id v30 = v60;
      if ((v23 & 1) != 0) {
        goto LABEL_20;
      }
LABEL_60:
      uint64_t v50 = (uint64_t)v58;
      unint64_t v51 = v19;
      outlined init with copy of ICUNumberFormatter.Signature( v16,  (uint64_t)v58,  type metadata accessor for ICUNumberFormatter.Signature);
      specialized _NativeDictionary._insert(at:key:value:)(v51, v50, (uint64_t)v12, (void *)v27);
      goto LABEL_61;
    }

    goto LABEL_23;
  }

uint64_t specialized static ICUCurrencyNumberFormatter.create(for:)(void *a1)
{
  void (*v13)(void *__return_ptr, uint64_t, uint64_t);
  uint64_t v14;
  char *v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  os_unfair_lock_s *v21;
  void *v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  os_unfair_lock_s *v28;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v30;
  char v31;
  uint64_t v32;
  uint64_t v33;
  BOOL v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  unint64_t v44;
  int *v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  unint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  int64_t v54;
  unint64_t v55;
  int64_t v56;
  int64_t v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t result;
  uint64_t v61;
  uint64_t v62;
  int64_t v63;
  char *v64;
  os_unfair_lock_s *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  int *v71;
  void v72[19];
  void *v73;
  void v74[18];
  _BYTE v75[152];
  uint64_t v2 = (int *)type metadata accessor for ICUCurrencyNumberFormatter.Signature(0LL);
  __int128 v67 = *((void *)v2 - 1);
  uint64_t v3 = MEMORY[0x1895F8858](v2);
  uint64_t v68 = (uint64_t)&v61 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v3);
  uint64_t v6 = (char *)&v61 - v5;
  uint64_t v70 = (uint64_t)a1 + *(int *)(type metadata accessor for NSDecimal.FormatStyle.Currency(0LL) + 24);
  uint64_t v7 = a1[3];
  uint64_t v71 = (int *)a1[2];
  uint64_t v8 = a1[1];
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t))(v8 + 472);
  swift_bridgeObjectRetain();
  swift_unknownObjectRetain();
  uint64_t v69 = v10(ObjectType, v8);
  uint64_t v12 = v11;
  swift_unknownObjectRelease();
  uint64_t v13 = *(void (**)(void *__return_ptr, uint64_t, uint64_t))(v8 + 464);
  swift_unknownObjectRetain();
  v13(v74, ObjectType, v8);
  uint64_t v14 = (uint64_t)v6;
  swift_unknownObjectRelease();
  outlined init with take of LocalePreferences?( (uint64_t)v74,  (uint64_t)v75,  (uint64_t *)&demangling cache variable for type metadata for LocalePreferences?);
  outlined init with copy of ICUNumberFormatter.Signature( v70,  (uint64_t)v6,  type metadata accessor for CurrencyFormatStyleConfiguration.Collection);
  unint64_t v15 = &v6[v2[5]];
  *(void *)unint64_t v15 = v71;
  *((void *)v15 + 1) = v7;
  unint64_t v16 = (uint64_t *)&v6[v2[6]];
  *unint64_t v16 = v69;
  v16[1] = v12;
  uint64_t v71 = v2;
  uint64_t v17 = (uint64_t)&v6[v2[7]];
  outlined init with take of LocalePreferences?( (uint64_t)v75,  v17,  (uint64_t *)&demangling cache variable for type metadata for LocalePreferences?);
  if (one-time initialization token for cache != -1) {
    swift_once();
  }
  uint64_t v19 = static ICUCurrencyNumberFormatter.cache;
  __int128 v18 = *(void *)algn_18C5CBA68;
  uint64_t v20 = *(void *)algn_18C5CBA68 + 16LL;
  char v21 = (os_unfair_lock_s *)(*(void *)algn_18C5CBA68 + 24LL);
  swift_retain_n();
  os_unfair_lock_lock(v21);
  specialized closure #1 in FormatterCache.formatter(for:creator:)(v20, v14, (uint64_t *)&v73);
  os_unfair_lock_unlock(v21);
  swift_release();
  __int128 v22 = v73;
  if (v73 != (void *)1) {
    goto LABEL_53;
  }
  uint64_t v69 = specialized static ICUCurrencyNumberFormatter.skeleton(for:)(v14);
  uint64_t v70 = v19;
  uint64_t v24 = v23;
  BOOL v25 = *v16;
  uint64_t v26 = v16[1];
  outlined init with take of LocalePreferences?( v17,  (uint64_t)v74,  (uint64_t *)&demangling cache variable for type metadata for LocalePreferences?);
  type metadata accessor for ICUCurrencyNumberFormatter();
  swift_allocObject();
  outlined init with take of LocalePreferences?( (uint64_t)v74,  (uint64_t)v72,  (uint64_t *)&demangling cache variable for type metadata for LocalePreferences?);
  swift_bridgeObjectRetain();
  outlined retain of LocalePreferences?( (uint64_t)v74,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined copy of LocalePreferences?);
  __int128 v22 = ICUNumberFormatterBase.init(skeleton:localeIdentifier:preferences:)(v69, v24, v25, v26, (uint64_t)v72);
  swift_retain();
  os_unfair_lock_lock(v21);
  uint64_t v27 = *(void *)(*(void *)(v18 + 16) + 16LL);
  uint64_t v28 = v21;
  uint64_t v69 = *(void *)(v18 + 16);
  if (v70 >= v27) {
    swift_bridgeObjectRetain();
  }
  else {
    *(void *)uint64_t v20 = MEMORY[0x18961AFF0];
  }
  swift_retain();
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v72[0] = *(void *)v20;
  id v30 = v72[0];
  *(void *)uint64_t v20 = 0x8000000000000000LL;
  uint64_t v32 = specialized __RawDictionaryStorage.find<A>(_:)(v14);
  uint64_t v33 = *(void *)(v30 + 16);
  id v34 = (v31 & 1) == 0;
  uint64_t v35 = v33 + v34;
  if (__OFADD__(v33, v34))
  {
    __break(1u);
  }

  else
  {
    LOBYTE(v20) = v31;
    if (*(void *)(v30 + 24) < v35)
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)( v35,  isUniquelyReferenced_nonNull_native);
      unint64_t v36 = v72[0];
      uint64_t v37 = specialized __RawDictionaryStorage.find<A>(_:)(v14);
      if ((v20 & 1) != (v38 & 1)) {
        goto LABEL_56;
      }
      uint64_t v32 = v37;
      if ((v20 & 1) == 0) {
        goto LABEL_51;
      }
LABEL_14:
      uint64_t v39 = *(void *)(v36 + 56);
      unint64_t v40 = 8 * v32;
      swift_release();
      *(void *)(v39 + v40) = v22;
LABEL_52:
      *(void *)(v18 + 16) = v36;
      swift_bridgeObjectRelease();
      os_unfair_lock_unlock(v28);
      swift_release();
      swift_bridgeObjectRelease();
      outlined consume of ICUDateIntervalFormatter??((uint64_t)v73);
LABEL_53:
      swift_release();
      outlined destroy of ICUNumberFormatter.Signature( v14,  type metadata accessor for ICUCurrencyNumberFormatter.Signature);
      return (uint64_t)v22;
    }

    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
    {
      unint64_t v36 = v30;
      if ((v31 & 1) != 0) {
        goto LABEL_14;
      }
LABEL_51:
      __int128 v58 = v68;
      __int128 v59 = v32;
      outlined init with copy of ICUNumberFormatter.Signature( v14,  v68,  type metadata accessor for ICUCurrencyNumberFormatter.Signature);
      specialized _NativeDictionary._insert(at:key:value:)(v59, v58, (uint64_t)v22, (void *)v36);
      goto LABEL_52;
    }
  }

  __int128 v62 = v32;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<ICUCurrencyNumberFormatter.Signature, ICUCurrencyNumberFormatter?>);
  uint64_t v41 = static _DictionaryStorage.copy(original:)();
  unint64_t v36 = v41;
  if (!*(void *)(v30 + 16))
  {
LABEL_50:
    swift_bridgeObjectRelease();
    uint64_t v32 = v62;
    if ((v20 & 1) != 0) {
      goto LABEL_14;
    }
    goto LABEL_51;
  }

  __int128 v65 = v28;
  __int128 v66 = v14;
  unint64_t v42 = (char *)(v41 + 64);
  unint64_t v43 = 1LL << *(_BYTE *)(v36 + 32);
  __int128 v64 = (char *)(v30 + 64);
  uint64_t v44 = (unint64_t)(v43 + 63) >> 6;
  if (v36 != v30 || v42 >= &v64[8 * v44]) {
    memmove(v42, v64, 8 * v44);
  }
  uint64_t v45 = 0LL;
  *(void *)(v36 + 16) = *(void *)(v30 + 16);
  int64_t v46 = 1LL << *(_BYTE *)(v30 + 32);
  unint64_t v47 = -1LL;
  if (v46 < 64) {
    unint64_t v47 = ~(-1LL << v46);
  }
  int64_t v48 = v47 & *(void *)(v30 + 64);
  __int128 v63 = (unint64_t)(v46 + 63) >> 6;
  while (1)
  {
    uint64_t v28 = v65;
    uint64_t v14 = v66;
    if (v48)
    {
      uint64_t v70 = (v48 - 1) & v48;
      uint64_t v71 = v45;
      int64_t v49 = __clz(__rbit64(v48)) | ((void)v45 << 6);
      goto LABEL_24;
    }

    int64_t v54 = (int64_t)v45 + 1;
    if (__OFADD__(v45, 1LL))
    {
      __break(1u);
      goto LABEL_55;
    }

    if (v54 >= v63) {
      goto LABEL_50;
    }
    uint64_t v55 = *(void *)&v64[8 * v54];
    uint64_t v56 = (int64_t)v45 + 1;
    if (!v55)
    {
      uint64_t v56 = v54 + 1;
      if (v54 + 1 >= v63) {
        goto LABEL_50;
      }
      uint64_t v55 = *(void *)&v64[8 * v56];
      if (!v55)
      {
        uint64_t v56 = v54 + 2;
        if (v54 + 2 >= v63) {
          goto LABEL_50;
        }
        uint64_t v55 = *(void *)&v64[8 * v56];
        if (!v55)
        {
          uint64_t v56 = v54 + 3;
          if (v54 + 3 >= v63) {
            goto LABEL_50;
          }
          uint64_t v55 = *(void *)&v64[8 * v56];
          if (!v55)
          {
            uint64_t v56 = v54 + 4;
            if (v54 + 4 >= v63) {
              goto LABEL_50;
            }
            uint64_t v55 = *(void *)&v64[8 * v56];
            if (!v55)
            {
              uint64_t v56 = v54 + 5;
              if (v54 + 5 >= v63) {
                goto LABEL_50;
              }
              uint64_t v55 = *(void *)&v64[8 * v56];
              if (!v55)
              {
                uint64_t v56 = v54 + 6;
                if (v54 + 6 >= v63) {
                  goto LABEL_50;
                }
                uint64_t v55 = *(void *)&v64[8 * v56];
                if (!v55)
                {
                  uint64_t v56 = v54 + 7;
                  if (v54 + 7 >= v63) {
                    goto LABEL_50;
                  }
                  uint64_t v55 = *(void *)&v64[8 * v56];
                  if (!v55) {
                    break;
                  }
                }
              }
            }
          }
        }
      }
    }

uint64_t specialized static ICUMeasurementNumberFormatter.skeleton(_:width:usage:numberFormatStyle:)( uint64_t a1, void *a2, char a3, unsigned __int8 a4, uint64_t a5)
{
  uint64_t v10 = type metadata accessor for NumberFormatStyleConfiguration.Collection(0LL);
  MEMORY[0x1895F8858](v10);
  uint64_t v12 = (char *)&v30 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointFormatStyle<Double>?);
  MEMORY[0x1895F8858](v13);
  unint64_t v15 = (char *)&v30 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v31 = 0LL;
  unint64_t v32 = 0xE000000000000000LL;
  if (a2)
  {
    uint64_t v16 = 0xD000000000000010LL;
    v30._countAndFlagsBits = a1;
    v30._object = a2;
    swift_bridgeObjectRetain();
    v17._countAndFlagsBits = 32LL;
    v17._object = (void *)0xE100000000000000LL;
    String.append(_:)(v17);
    if (a3)
    {
      if (a3 == 1)
      {
        __int128 v18 = (void *)0x80000001839CA640LL;
      }

      else
      {
        uint64_t v16 = 0xD000000000000011LL;
        __int128 v18 = (void *)0x80000001839CA660LL;
      }
    }

    else
    {
      uint64_t v16 = 0xD000000000000014LL;
      __int128 v18 = (void *)0x80000001839CA5C0LL;
    }

    swift_bridgeObjectRetain();
    v19._countAndFlagsBits = v16;
    v19._object = v18;
    String.append(_:)(v19);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    String.append(_:)(v30);
    swift_bridgeObjectRelease();
    if (a4 != 14)
    {
      v20._countAndFlagsBits = ICUMeasurementNumberFormatter.Usage.rawValue.getter(a4);
      v30._countAndFlagsBits = 0x2F656761737520LL;
      v30._object = (void *)0xE700000000000000LL;
      String.append(_:)(v20);
      swift_bridgeObjectRelease();
      String.append(_:)(v30);
      swift_bridgeObjectRelease();
    }
  }

  outlined init with copy of (Hashable & Sendable)?( a5,  (uint64_t)v15,  &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>?);
  uint64_t v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointFormatStyle<Double>);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v21 - 8) + 48LL))(v15, 1LL, v21) == 1)
  {
    outlined destroy of Any?( (uint64_t)v15,  &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>?);
  }

  else
  {
    outlined init with copy of ICUNumberFormatter.Signature( (uint64_t)&v15[*(int *)(v21 + 36)],  (uint64_t)v12,  type metadata accessor for NumberFormatStyleConfiguration.Collection);
    outlined destroy of Any?( (uint64_t)v15,  &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>);
    NumberFormatStyleConfiguration.Collection.skeleton.getter();
    uint64_t v23 = v22;
    BOOL v25 = v24;
    outlined destroy of ICUNumberFormatter.Signature( (uint64_t)v12,  type metadata accessor for NumberFormatStyleConfiguration.Collection);
    swift_bridgeObjectRetain();
    uint64_t v26 = String.count.getter();
    swift_bridgeObjectRelease();
    if (v26 >= 1)
    {
      v27._countAndFlagsBits = 32LL;
      v27._object = (void *)0xE100000000000000LL;
      String.append(_:)(v27);
    }

    v28._countAndFlagsBits = v23;
    v28._object = v25;
    String.append(_:)(v28);
    swift_bridgeObjectRelease();
  }

  return v31;
}

__n128 __swift_memcpy172_8(uint64_t a1, __int128 *a2)
{
  __int128 v2 = *a2;
  __int128 v3 = a2[2];
  *(_OWORD *)(a1 + 16) = a2[1];
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)a1 = v2;
  __int128 v4 = a2[3];
  __int128 v5 = a2[4];
  __int128 v6 = a2[6];
  *(_OWORD *)(a1 + 80) = a2[5];
  *(_OWORD *)(a1 + 96) = v6;
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)(a1 + 64) = v5;
  __n128 result = (__n128)a2[7];
  __int128 v8 = a2[8];
  __int128 v9 = a2[9];
  *(_OWORD *)(a1 + 156) = *(__int128 *)((char *)a2 + 156);
  *(_OWORD *)(a1 + 128) = v8;
  *(_OWORD *)(a1 + 144) = v9;
  *(__n128 *)(a1 + 112) = result;
  return result;
}

void *type metadata accessor for ICUMeasurementNumberFormatter.Signature()
{
  return &unk_189C7D5C0;
}

ValueMetadata *type metadata accessor for ICUNumberFormatterBase.AttributePosition()
{
  return &type metadata for ICUNumberFormatterBase.AttributePosition;
}

uint64_t destroy for ICUMeasurementNumberFormatter.Signature(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 40);
  if (result != 1)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }

  return result;
}

uint64_t initializeWithCopy for ICUMeasurementNumberFormatter.Signature(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  uint64_t v5 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v5;
  uint64_t v6 = *(void *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v6 == 1)
  {
    __int128 v7 = *(_OWORD *)(a2 + 144);
    *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
    *(_OWORD *)(a1 + 144) = v7;
    *(_OWORD *)(a1 + 156) = *(_OWORD *)(a2 + 156);
    __int128 v8 = *(_OWORD *)(a2 + 80);
    *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
    *(_OWORD *)(a1 + 80) = v8;
    __int128 v9 = *(_OWORD *)(a2 + 112);
    *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
    *(_OWORD *)(a1 + 112) = v9;
    __int128 v10 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
    *(_OWORD *)(a1 + 48) = v10;
  }

  else
  {
    *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
    uint64_t v11 = *(void *)(a2 + 48);
    uint64_t v12 = *(void *)(a2 + 56);
    *(void *)(a1 + 40) = v6;
    *(void *)(a1 + 48) = v11;
    uint64_t v13 = *(void *)(a2 + 64);
    uint64_t v14 = *(void *)(a2 + 72);
    *(void *)(a1 + 56) = v12;
    *(void *)(a1 + 64) = v13;
    uint64_t v15 = *(void *)(a2 + 80);
    uint64_t v16 = *(void *)(a2 + 88);
    *(void *)(a1 + 72) = v14;
    *(void *)(a1 + 80) = v15;
    Swift::String v17 = *(void **)(a2 + 96);
    __int128 v18 = *(void **)(a2 + 104);
    *(void *)(a1 + 88) = v16;
    *(void *)(a1 + 96) = v17;
    Swift::String v20 = *(void **)(a2 + 112);
    Swift::String v19 = *(void **)(a2 + 120);
    *(void *)(a1 + 104) = v18;
    *(void *)(a1 + 112) = v20;
    uint64_t v21 = *(void **)(a2 + 128);
    char v29 = v19;
    uint64_t v30 = *(void *)(a2 + 136);
    *(void *)(a1 + 120) = v19;
    *(void *)(a1 + 128) = v21;
    uint64_t v31 = v21;
    uint64_t v32 = *(void *)(a2 + 144);
    *(void *)(a1 + 136) = v30;
    *(void *)(a1 + 144) = v32;
    uint64_t v22 = *(void *)(a2 + 160);
    *(void *)(a1 + 152) = *(void *)(a2 + 152);
    *(void *)(a1 + 160) = v22;
    *(_DWORD *)(a1 + 168) = *(_DWORD *)(a2 + 168);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    id v23 = v17;
    id v24 = v18;
    id v25 = v20;
    id v26 = v29;
    id v27 = v31;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }

  return a1;
}

uint64_t assignWithCopy for ICUMeasurementNumberFormatter.Signature(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v4 = (_OWORD *)(a1 + 32);
  uint64_t v5 = (_OWORD *)(a2 + 32);
  uint64_t v6 = *(void *)(a2 + 40);
  if (*(void *)(a1 + 40) == 1LL)
  {
    if (v6 == 1)
    {
      *uint64_t v4 = *v5;
      __int128 v7 = *(_OWORD *)(a2 + 48);
      __int128 v8 = *(_OWORD *)(a2 + 64);
      __int128 v9 = *(_OWORD *)(a2 + 96);
      *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
      *(_OWORD *)(a1 + 96) = v9;
      *(_OWORD *)(a1 + 48) = v7;
      *(_OWORD *)(a1 + 64) = v8;
      __int128 v10 = *(_OWORD *)(a2 + 112);
      __int128 v11 = *(_OWORD *)(a2 + 128);
      __int128 v12 = *(_OWORD *)(a2 + 144);
      *(_OWORD *)(a1 + 156) = *(_OWORD *)(a2 + 156);
      *(_OWORD *)(a1 + 128) = v11;
      *(_OWORD *)(a1 + 144) = v12;
      *(_OWORD *)(a1 + 112) = v10;
    }

    else
    {
      *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
      *(void *)(a1 + 40) = *(void *)(a2 + 40);
      *(void *)(a1 + 48) = *(void *)(a2 + 48);
      *(void *)(a1 + 56) = *(void *)(a2 + 56);
      *(void *)(a1 + 64) = *(void *)(a2 + 64);
      *(void *)(a1 + 72) = *(void *)(a2 + 72);
      *(void *)(a1 + 80) = *(void *)(a2 + 80);
      *(void *)(a1 + 88) = *(void *)(a2 + 88);
      Swift::String v19 = *(void **)(a2 + 96);
      *(void *)(a1 + 96) = v19;
      Swift::String v20 = *(void **)(a2 + 104);
      *(void *)(a1 + 104) = v20;
      uint64_t v21 = *(void **)(a2 + 112);
      *(void *)(a1 + 112) = v21;
      uint64_t v22 = *(void **)(a2 + 120);
      *(void *)(a1 + 120) = v22;
      uint64_t v44 = *(void **)(a2 + 128);
      *(void *)(a1 + 128) = v44;
      *(void *)(a1 + 136) = *(void *)(a2 + 136);
      *(void *)(a1 + 144) = *(void *)(a2 + 144);
      *(void *)(a1 + 152) = *(void *)(a2 + 152);
      *(void *)(a1 + 160) = *(void *)(a2 + 160);
      *(_BYTE *)(a1 + 168) = *(_BYTE *)(a2 + 168);
      *(_BYTE *)(a1 + 169) = *(_BYTE *)(a2 + 169);
      *(_BYTE *)(a1 + 170) = *(_BYTE *)(a2 + 170);
      *(_BYTE *)(a1 + 171) = *(_BYTE *)(a2 + 171);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      id v23 = v19;
      id v24 = v20;
      id v25 = v21;
      id v26 = v22;
      id v27 = v44;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
  }

  else if (v6 == 1)
  {
    outlined destroy of LocalePreferences((id *)(a1 + 32));
    *uint64_t v4 = *v5;
    __int128 v13 = *(_OWORD *)(a2 + 96);
    __int128 v15 = *(_OWORD *)(a2 + 48);
    __int128 v14 = *(_OWORD *)(a2 + 64);
    *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
    *(_OWORD *)(a1 + 96) = v13;
    *(_OWORD *)(a1 + 48) = v15;
    *(_OWORD *)(a1 + 64) = v14;
    __int128 v17 = *(_OWORD *)(a2 + 128);
    __int128 v16 = *(_OWORD *)(a2 + 144);
    __int128 v18 = *(_OWORD *)(a2 + 112);
    *(_OWORD *)(a1 + 156) = *(_OWORD *)(a2 + 156);
    *(_OWORD *)(a1 + 128) = v17;
    *(_OWORD *)(a1 + 144) = v16;
    *(_OWORD *)(a1 + 112) = v18;
  }

  else
  {
    *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
    *(void *)(a1 + 40) = *(void *)(a2 + 40);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(void *)(a1 + 48) = *(void *)(a2 + 48);
    *(void *)(a1 + 56) = *(void *)(a2 + 56);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(void *)(a1 + 64) = *(void *)(a2 + 64);
    *(void *)(a1 + 72) = *(void *)(a2 + 72);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(void *)(a1 + 80) = *(void *)(a2 + 80);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(void *)(a1 + 88) = *(void *)(a2 + 88);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    Swift::String v28 = *(void **)(a1 + 96);
    char v29 = *(void **)(a2 + 96);
    *(void *)(a1 + 96) = v29;
    id v30 = v29;

    uint64_t v31 = *(void **)(a1 + 104);
    uint64_t v32 = *(void **)(a2 + 104);
    *(void *)(a1 + 104) = v32;
    id v33 = v32;

    id v34 = *(void **)(a1 + 112);
    uint64_t v35 = *(void **)(a2 + 112);
    *(void *)(a1 + 112) = v35;
    id v36 = v35;

    uint64_t v37 = *(void **)(a1 + 120);
    uint64_t v38 = *(void **)(a2 + 120);
    *(void *)(a1 + 120) = v38;
    id v39 = v38;

    unint64_t v40 = *(void **)(a1 + 128);
    uint64_t v41 = *(void **)(a2 + 128);
    *(void *)(a1 + 128) = v41;
    id v42 = v41;

    *(void *)(a1 + 136) = *(void *)(a2 + 136);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(void *)(a1 + 144) = *(void *)(a2 + 144);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(void *)(a1 + 152) = *(void *)(a2 + 152);
    *(void *)(a1 + 160) = *(void *)(a2 + 160);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(_BYTE *)(a1 + 168) = *(_BYTE *)(a2 + 168);
    *(_BYTE *)(a1 + 169) = *(_BYTE *)(a2 + 169);
    *(_BYTE *)(a1 + 170) = *(_BYTE *)(a2 + 170);
    *(_BYTE *)(a1 + 171) = *(_BYTE *)(a2 + 171);
  }

  return a1;
}

uint64_t assignWithTake for ICUMeasurementNumberFormatter.Signature(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  uint64_t v5 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v5;
  swift_bridgeObjectRelease();
  if (*(void *)(a1 + 40) != 1LL)
  {
    uint64_t v6 = *(void *)(a2 + 40);
    if (v6 != 1)
    {
      *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
      *(void *)(a1 + 40) = v6;
      swift_bridgeObjectRelease();
      uint64_t v11 = *(void *)(a2 + 56);
      *(void *)(a1 + 48) = *(void *)(a2 + 48);
      *(void *)(a1 + 56) = v11;
      swift_bridgeObjectRelease();
      uint64_t v12 = *(void *)(a2 + 72);
      *(void *)(a1 + 64) = *(void *)(a2 + 64);
      *(void *)(a1 + 72) = v12;
      swift_bridgeObjectRelease();
      *(void *)(a1 + 80) = *(void *)(a2 + 80);
      swift_bridgeObjectRelease();
      *(void *)(a1 + 88) = *(void *)(a2 + 88);
      swift_bridgeObjectRelease();
      __int128 v13 = *(void **)(a1 + 96);
      *(void *)(a1 + 96) = *(void *)(a2 + 96);

      __int128 v14 = *(void **)(a1 + 104);
      *(void *)(a1 + 104) = *(void *)(a2 + 104);

      __int128 v15 = *(void **)(a1 + 112);
      *(void *)(a1 + 112) = *(void *)(a2 + 112);

      __int128 v16 = *(void **)(a1 + 120);
      *(void *)(a1 + 120) = *(void *)(a2 + 120);

      __int128 v17 = *(void **)(a1 + 128);
      *(void *)(a1 + 128) = *(void *)(a2 + 128);

      *(void *)(a1 + 136) = *(void *)(a2 + 136);
      swift_bridgeObjectRelease();
      *(void *)(a1 + 144) = *(void *)(a2 + 144);
      swift_bridgeObjectRelease();
      uint64_t v18 = *(void *)(a2 + 160);
      *(void *)(a1 + 152) = *(void *)(a2 + 152);
      *(void *)(a1 + 160) = v18;
      swift_bridgeObjectRelease();
      *(_DWORD *)(a1 + 168) = *(_DWORD *)(a2 + 168);
      return a1;
    }

    outlined destroy of LocalePreferences((id *)(a1 + 32));
  }

  __int128 v7 = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 144) = v7;
  *(_OWORD *)(a1 + 156) = *(_OWORD *)(a2 + 156);
  __int128 v8 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v8;
  __int128 v9 = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 112) = v9;
  __int128 v10 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v10;
  return a1;
}

uint64_t getEnumTagSinglePayload for ICUMeasurementNumberFormatter.Signature(uint64_t a1, int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0 && *(_BYTE *)(a1 + 172)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ICUMeasurementNumberFormatter.Signature( uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_DWORD *)(result + 168) = 0;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(_BYTE *)(result + 172) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 172) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

void *type metadata accessor for ICUByteCountNumberFormatter.Signature()
{
  return &unk_189C7D6D0;
}

void *initializeBufferWithCopyOfBuffer for ICUCurrencyNumberFormatter.Signature( uint64_t a1, uint64_t *a2, int *a3)
{
  uint64_t v4 = (void *)a1;
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80LL);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v15 = *a2;
    *uint64_t v4 = *a2;
    uint64_t v4 = (void *)(v15 + ((v5 + 16LL) & ~(unint64_t)v5));
    swift_retain();
  }

  else
  {
    *(void *)a1 = *a2;
    *(_BYTE *)(a1 + 8) = *((_BYTE *)a2 + 8);
    __int128 v7 = *((_OWORD *)a2 + 2);
    *(_OWORD *)(a1 + 16) = *((_OWORD *)a2 + 1);
    *(_OWORD *)(a1 + 32) = v7;
    *(_OWORD *)(a1 + 48) = *((_OWORD *)a2 + 3);
    *(_OWORD *)(a1 + 57) = *(_OWORD *)((char *)a2 + 57);
    *(_BYTE *)(a1 + 73) = *((_BYTE *)a2 + 73);
    *(_DWORD *)(a1 + 74) = *(_DWORD *)((char *)a2 + 74);
    *(_BYTE *)(a1 + 78) = *((_BYTE *)a2 + 78);
    __int128 v8 = (int *)type metadata accessor for CurrencyFormatStyleConfiguration.Collection(0LL);
    uint64_t v9 = v8[9];
    __int128 v10 = (char *)v4 + v9;
    uint64_t v11 = (char *)a2 + v9;
    uint64_t v12 = type metadata accessor for FloatingPointRoundingRule();
    uint64_t v13 = *(void *)(v12 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1LL, v12))
    {
      uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
      memcpy(v10, v11, *(void *)(*(void *)(v14 - 8) + 64LL));
    }

    else
    {
      (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v10, v11, v12);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v13 + 56))(v10, 0LL, 1LL, v12);
    }

    uint64_t v16 = v8[10];
    __int128 v17 = (char *)v4 + v16;
    uint64_t v18 = (uint64_t)a2 + v16;
    *(void *)__int128 v17 = *(void *)v18;
    v17[8] = *(_BYTE *)(v18 + 8);
    *((_BYTE *)v4 + v8[11]) = *((_BYTE *)a2 + v8[11]);
    *((_BYTE *)v4 + v8[12]) = *((_BYTE *)a2 + v8[12]);
    uint64_t v19 = a3[5];
    uint64_t v20 = a3[6];
    uint64_t v21 = (void *)((char *)v4 + v19);
    uint64_t v22 = (uint64_t *)((char *)a2 + v19);
    uint64_t v23 = v22[1];
    *uint64_t v21 = *v22;
    v21[1] = v23;
    id v24 = (void *)((char *)v4 + v20);
    id v25 = (uint64_t *)((char *)a2 + v20);
    uint64_t v26 = v25[1];
    *id v24 = *v25;
    v24[1] = v26;
    uint64_t v27 = a3[7];
    Swift::String v28 = (char *)v4 + v27;
    char v29 = (char *)a2 + v27;
    uint64_t v30 = *(uint64_t *)((char *)a2 + v27 + 8);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v30 == 1)
    {
      __int128 v31 = *((_OWORD *)v29 + 7);
      *((_OWORD *)v28 + 6) = *((_OWORD *)v29 + 6);
      *((_OWORD *)v28 + 7) = v31;
      *(_OWORD *)(v28 + 124) = *(_OWORD *)(v29 + 124);
      __int128 v32 = *((_OWORD *)v29 + 3);
      *((_OWORD *)v28 + 2) = *((_OWORD *)v29 + 2);
      *((_OWORD *)v28 + 3) = v32;
      __int128 v33 = *((_OWORD *)v29 + 5);
      *((_OWORD *)v28 + 4) = *((_OWORD *)v29 + 4);
      *((_OWORD *)v28 + 5) = v33;
      __int128 v34 = *((_OWORD *)v29 + 1);
      *(_OWORD *)Swift::String v28 = *(_OWORD *)v29;
      *((_OWORD *)v28 + 1) = v34;
    }

    else
    {
      *Swift::String v28 = *v29;
      uint64_t v35 = *((void *)v29 + 2);
      uint64_t v36 = *((void *)v29 + 3);
      *((void *)v28 + 1) = v30;
      *((void *)v28 + 2) = v35;
      uint64_t v37 = *((void *)v29 + 4);
      uint64_t v38 = *((void *)v29 + 5);
      *((void *)v28 + 3) = v36;
      *((void *)v28 + 4) = v37;
      uint64_t v39 = *((void *)v29 + 6);
      uint64_t v40 = *((void *)v29 + 7);
      *((void *)v28 + 5) = v38;
      *((void *)v28 + 6) = v39;
      id v42 = (void *)*((void *)v29 + 8);
      uint64_t v41 = (void *)*((void *)v29 + 9);
      *((void *)v28 + 7) = v40;
      *((void *)v28 + 8) = v42;
      uint64_t v53 = (void *)*((void *)v29 + 10);
      int64_t v54 = (void *)*((void *)v29 + 11);
      *((void *)v28 + 9) = v41;
      *((void *)v28 + 10) = v53;
      uint64_t v43 = *((void *)v29 + 13);
      uint64_t v55 = (void *)*((void *)v29 + 12);
      *((void *)v28 + 11) = v54;
      *((void *)v28 + 12) = v55;
      uint64_t v44 = *((void *)v29 + 15);
      uint64_t v45 = *((void *)v29 + 14);
      *((void *)v28 + 13) = v43;
      *((void *)v28 + 14) = v45;
      uint64_t v46 = *((void *)v29 + 16);
      *((void *)v28 + 15) = v44;
      *((void *)v28 + 16) = v46;
      *((_DWORD *)v28 + 34) = *((_DWORD *)v29 + 34);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      id v47 = v42;
      id v48 = v41;
      id v49 = v53;
      id v50 = v54;
      id v51 = v55;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
  }

  return v4;
}

uint64_t destroy for ICUCurrencyNumberFormatter.Signature(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a1 + *(int *)(type metadata accessor for CurrencyFormatStyleConfiguration.Collection(0LL) + 36);
  uint64_t v5 = type metadata accessor for FloatingPointRoundingRule();
  uint64_t v6 = *(void *)(v5 - 8);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v7 = a1 + *(int *)(a2 + 28);
  uint64_t result = *(void *)(v7 + 8);
  if (result != 1)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }

  return result;
}

uint64_t initializeWithCopy for ICUCurrencyNumberFormatter.Signature(uint64_t a1, uint64_t a2, int *a3)
{
  *(void *)a1 = *(void *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  __int128 v6 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v6;
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 57) = *(_OWORD *)(a2 + 57);
  *(_BYTE *)(a1 + 73) = *(_BYTE *)(a2 + 73);
  *(_DWORD *)(a1 + 74) = *(_DWORD *)(a2 + 74);
  *(_BYTE *)(a1 + 78) = *(_BYTE *)(a2 + 78);
  uint64_t v7 = (int *)type metadata accessor for CurrencyFormatStyleConfiguration.Collection(0LL);
  uint64_t v8 = v7[9];
  uint64_t v9 = (void *)(a1 + v8);
  __int128 v10 = (const void *)(a2 + v8);
  uint64_t v11 = type metadata accessor for FloatingPointRoundingRule();
  uint64_t v12 = *(void *)(v11 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v12 + 48))(v10, 1LL, v11))
  {
    uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
    memcpy(v9, v10, *(void *)(*(void *)(v13 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v12 + 16))(v9, v10, v11);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v12 + 56))(v9, 0LL, 1LL, v11);
  }

  uint64_t v14 = v7[10];
  uint64_t v15 = a1 + v14;
  uint64_t v16 = a2 + v14;
  *(void *)uint64_t v15 = *(void *)v16;
  *(_BYTE *)(v15 + 8) = *(_BYTE *)(v16 + 8);
  *(_BYTE *)(a1 + v7[11]) = *(_BYTE *)(a2 + v7[11]);
  *(_BYTE *)(a1 + v7[12]) = *(_BYTE *)(a2 + v7[12]);
  uint64_t v17 = a3[5];
  uint64_t v18 = a3[6];
  uint64_t v19 = (void *)(a1 + v17);
  uint64_t v20 = (void *)(a2 + v17);
  uint64_t v21 = v20[1];
  *uint64_t v19 = *v20;
  v19[1] = v21;
  uint64_t v22 = (void *)(a1 + v18);
  uint64_t v23 = (void *)(a2 + v18);
  uint64_t v24 = v23[1];
  void *v22 = *v23;
  v22[1] = v24;
  uint64_t v25 = a3[7];
  uint64_t v26 = a1 + v25;
  uint64_t v27 = a2 + v25;
  uint64_t v28 = *(void *)(a2 + v25 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v28 == 1)
  {
    __int128 v29 = *(_OWORD *)(v27 + 112);
    *(_OWORD *)(v26 + 96) = *(_OWORD *)(v27 + 96);
    *(_OWORD *)(v26 + 112) = v29;
    *(_OWORD *)(v26 + 124) = *(_OWORD *)(v27 + 124);
    __int128 v30 = *(_OWORD *)(v27 + 48);
    *(_OWORD *)(v26 + 32) = *(_OWORD *)(v27 + 32);
    *(_OWORD *)(v26 + 48) = v30;
    __int128 v31 = *(_OWORD *)(v27 + 80);
    *(_OWORD *)(v26 + 64) = *(_OWORD *)(v27 + 64);
    *(_OWORD *)(v26 + 80) = v31;
    __int128 v32 = *(_OWORD *)(v27 + 16);
    *(_OWORD *)uint64_t v26 = *(_OWORD *)v27;
    *(_OWORD *)(v26 + 16) = v32;
  }

  else
  {
    *(_BYTE *)uint64_t v26 = *(_BYTE *)v27;
    uint64_t v33 = *(void *)(v27 + 16);
    uint64_t v34 = *(void *)(v27 + 24);
    *(void *)(v26 + 8) = v28;
    *(void *)(v26 + 16) = v33;
    uint64_t v35 = *(void *)(v27 + 32);
    uint64_t v36 = *(void *)(v27 + 40);
    *(void *)(v26 + 24) = v34;
    *(void *)(v26 + 32) = v35;
    uint64_t v37 = *(void *)(v27 + 48);
    uint64_t v38 = *(void *)(v27 + 56);
    *(void *)(v26 + 40) = v36;
    *(void *)(v26 + 48) = v37;
    uint64_t v40 = *(void **)(v27 + 64);
    uint64_t v39 = *(void **)(v27 + 72);
    *(void *)(v26 + 56) = v38;
    *(void *)(v26 + 64) = v40;
    id v51 = *(void **)(v27 + 80);
    int v52 = *(void **)(v27 + 88);
    *(void *)(v26 + 72) = v39;
    *(void *)(v26 + 80) = v51;
    uint64_t v41 = *(void *)(v27 + 104);
    uint64_t v53 = *(void **)(v27 + 96);
    *(void *)(v26 + 88) = v52;
    *(void *)(v26 + 96) = v53;
    uint64_t v42 = *(void *)(v27 + 120);
    uint64_t v43 = *(void *)(v27 + 112);
    *(void *)(v26 + 104) = v41;
    *(void *)(v26 + 112) = v43;
    uint64_t v44 = *(void *)(v27 + 128);
    *(void *)(v26 + 120) = v42;
    *(void *)(v26 + 128) = v44;
    *(_DWORD *)(v26 + 136) = *(_DWORD *)(v27 + 136);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    id v45 = v40;
    id v46 = v39;
    id v47 = v51;
    id v48 = v52;
    id v49 = v53;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }

  return a1;
}

uint64_t assignWithCopy for ICUCurrencyNumberFormatter.Signature(uint64_t a1, uint64_t *a2, int *a3)
{
  uint64_t v6 = *a2;
  *(_BYTE *)(a1 + 8) = *((_BYTE *)a2 + 8);
  *(void *)a1 = v6;
  __int128 v7 = *((_OWORD *)a2 + 1);
  __int128 v8 = *((_OWORD *)a2 + 2);
  __int128 v9 = *((_OWORD *)a2 + 3);
  *(_OWORD *)(a1 + 57) = *(_OWORD *)((char *)a2 + 57);
  *(_OWORD *)(a1 + 32) = v8;
  *(_OWORD *)(a1 + 48) = v9;
  *(_OWORD *)(a1 + 16) = v7;
  *(_BYTE *)(a1 + 73) = *((_BYTE *)a2 + 73);
  *(_DWORD *)(a1 + 74) = *(_DWORD *)((char *)a2 + 74);
  *(_BYTE *)(a1 + 78) = *((_BYTE *)a2 + 78);
  __int128 v10 = (int *)type metadata accessor for CurrencyFormatStyleConfiguration.Collection(0LL);
  uint64_t v11 = v10[9];
  uint64_t v12 = (void *)(a1 + v11);
  uint64_t v13 = (char *)a2 + v11;
  uint64_t v14 = type metadata accessor for FloatingPointRoundingRule();
  uint64_t v15 = *(void *)(v14 - 8);
  uint64_t v16 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v15 + 48);
  int v17 = v16(v12, 1LL, v14);
  int v18 = v16(v13, 1LL, v14);
  if (v17)
  {
    if (!v18)
    {
      (*(void (**)(void *, char *, uint64_t))(v15 + 16))(v12, v13, v14);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v15 + 56))(v12, 0LL, 1LL, v14);
      goto LABEL_7;
    }

    goto LABEL_6;
  }

  if (v18)
  {
    (*(void (**)(void *, uint64_t))(v15 + 8))(v12, v14);
LABEL_6:
    uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
    memcpy(v12, v13, *(void *)(*(void *)(v19 - 8) + 64LL));
    goto LABEL_7;
  }

  (*(void (**)(void *, char *, uint64_t))(v15 + 24))(v12, v13, v14);
LABEL_7:
  uint64_t v20 = v10[10];
  uint64_t v21 = a1 + v20;
  uint64_t v22 = (uint64_t *)((char *)a2 + v20);
  uint64_t v23 = *v22;
  *(_BYTE *)(v21 + 8) = *((_BYTE *)v22 + 8);
  *(void *)uint64_t v21 = v23;
  *(_BYTE *)(a1 + v10[11]) = *((_BYTE *)a2 + v10[11]);
  *(_BYTE *)(a1 + v10[12]) = *((_BYTE *)a2 + v10[12]);
  uint64_t v24 = a3[5];
  uint64_t v25 = (void *)(a1 + v24);
  uint64_t v26 = (uint64_t *)((char *)a2 + v24);
  *uint64_t v25 = *v26;
  v25[1] = v26[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v27 = a3[6];
  uint64_t v28 = (void *)(a1 + v27);
  __int128 v29 = (uint64_t *)((char *)a2 + v27);
  *uint64_t v28 = *v29;
  v28[1] = v29[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v30 = a3[7];
  uint64_t v31 = a1 + v30;
  uint64_t v32 = (uint64_t)a2 + v30;
  uint64_t v33 = *(void *)(a1 + v30 + 8);
  uint64_t v34 = *(void *)(v32 + 8);
  if (v33 == 1)
  {
    if (v34 == 1)
    {
      *(_OWORD *)uint64_t v31 = *(_OWORD *)v32;
      __int128 v35 = *(_OWORD *)(v32 + 16);
      __int128 v36 = *(_OWORD *)(v32 + 32);
      __int128 v37 = *(_OWORD *)(v32 + 64);
      *(_OWORD *)(v31 + 48) = *(_OWORD *)(v32 + 48);
      *(_OWORD *)(v31 + 64) = v37;
      *(_OWORD *)(v31 + 16) = v35;
      *(_OWORD *)(v31 + 32) = v36;
      __int128 v38 = *(_OWORD *)(v32 + 80);
      __int128 v39 = *(_OWORD *)(v32 + 96);
      __int128 v40 = *(_OWORD *)(v32 + 112);
      *(_OWORD *)(v31 + 124) = *(_OWORD *)(v32 + 124);
      *(_OWORD *)(v31 + 96) = v39;
      *(_OWORD *)(v31 + 112) = v40;
      *(_OWORD *)(v31 + 80) = v38;
    }

    else
    {
      *(_BYTE *)uint64_t v31 = *(_BYTE *)v32;
      *(void *)(v31 + 8) = *(void *)(v32 + 8);
      *(void *)(v31 + 16) = *(void *)(v32 + 16);
      *(void *)(v31 + 24) = *(void *)(v32 + 24);
      *(void *)(v31 + 32) = *(void *)(v32 + 32);
      *(void *)(v31 + 40) = *(void *)(v32 + 40);
      *(void *)(v31 + 48) = *(void *)(v32 + 48);
      *(void *)(v31 + 56) = *(void *)(v32 + 56);
      id v47 = *(void **)(v32 + 64);
      *(void *)(v31 + 64) = v47;
      id v48 = *(void **)(v32 + 72);
      *(void *)(v31 + 72) = v48;
      id v49 = *(void **)(v32 + 80);
      *(void *)(v31 + 80) = v49;
      uint64_t v71 = *(void **)(v32 + 88);
      *(void *)(v31 + 88) = v71;
      char v72 = *(void **)(v32 + 96);
      *(void *)(v31 + 96) = v72;
      *(void *)(v31 + 104) = *(void *)(v32 + 104);
      *(void *)(v31 + 112) = *(void *)(v32 + 112);
      *(void *)(v31 + 120) = *(void *)(v32 + 120);
      *(void *)(v31 + 128) = *(void *)(v32 + 128);
      *(_BYTE *)(v31 + 136) = *(_BYTE *)(v32 + 136);
      *(_BYTE *)(v31 + 137) = *(_BYTE *)(v32 + 137);
      *(_BYTE *)(v31 + 138) = *(_BYTE *)(v32 + 138);
      *(_BYTE *)(v31 + 139) = *(_BYTE *)(v32 + 139);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      id v50 = v47;
      id v51 = v48;
      id v52 = v49;
      id v53 = v71;
      id v54 = v72;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
  }

  else if (v34 == 1)
  {
    outlined destroy of LocalePreferences((id *)v31);
    *(_OWORD *)uint64_t v31 = *(_OWORD *)v32;
    __int128 v41 = *(_OWORD *)(v32 + 64);
    __int128 v43 = *(_OWORD *)(v32 + 16);
    __int128 v42 = *(_OWORD *)(v32 + 32);
    *(_OWORD *)(v31 + 48) = *(_OWORD *)(v32 + 48);
    *(_OWORD *)(v31 + 64) = v41;
    *(_OWORD *)(v31 + 16) = v43;
    *(_OWORD *)(v31 + 32) = v42;
    __int128 v45 = *(_OWORD *)(v32 + 96);
    __int128 v44 = *(_OWORD *)(v32 + 112);
    __int128 v46 = *(_OWORD *)(v32 + 80);
    *(_OWORD *)(v31 + 124) = *(_OWORD *)(v32 + 124);
    *(_OWORD *)(v31 + 96) = v45;
    *(_OWORD *)(v31 + 112) = v44;
    *(_OWORD *)(v31 + 80) = v46;
  }

  else
  {
    *(_BYTE *)uint64_t v31 = *(_BYTE *)v32;
    *(void *)(v31 + 8) = *(void *)(v32 + 8);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(void *)(v31 + 16) = *(void *)(v32 + 16);
    *(void *)(v31 + 24) = *(void *)(v32 + 24);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(void *)(v31 + 32) = *(void *)(v32 + 32);
    *(void *)(v31 + 40) = *(void *)(v32 + 40);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(void *)(v31 + 48) = *(void *)(v32 + 48);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(void *)(v31 + 56) = *(void *)(v32 + 56);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    uint64_t v55 = *(void **)(v31 + 64);
    uint64_t v56 = *(void **)(v32 + 64);
    *(void *)(v31 + 64) = v56;
    id v57 = v56;

    __int128 v58 = *(void **)(v31 + 72);
    __int128 v59 = *(void **)(v32 + 72);
    *(void *)(v31 + 72) = v59;
    id v60 = v59;

    uint64_t v61 = *(void **)(v31 + 80);
    __int128 v62 = *(void **)(v32 + 80);
    *(void *)(v31 + 80) = v62;
    id v63 = v62;

    __int128 v64 = *(void **)(v31 + 88);
    __int128 v65 = *(void **)(v32 + 88);
    *(void *)(v31 + 88) = v65;
    id v66 = v65;

    __int128 v67 = *(void **)(v31 + 96);
    uint64_t v68 = *(void **)(v32 + 96);
    *(void *)(v31 + 96) = v68;
    id v69 = v68;

    *(void *)(v31 + 104) = *(void *)(v32 + 104);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(void *)(v31 + 112) = *(void *)(v32 + 112);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(void *)(v31 + 120) = *(void *)(v32 + 120);
    *(void *)(v31 + 128) = *(void *)(v32 + 128);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(_BYTE *)(v31 + 136) = *(_BYTE *)(v32 + 136);
    *(_BYTE *)(v31 + 137) = *(_BYTE *)(v32 + 137);
    *(_BYTE *)(v31 + 138) = *(_BYTE *)(v32 + 138);
    *(_BYTE *)(v31 + 139) = *(_BYTE *)(v32 + 139);
  }

  return a1;
}

uint64_t initializeWithTake for ICUCurrencyNumberFormatter.Signature(uint64_t a1, uint64_t a2, int *a3)
{
  *(void *)a1 = *(void *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  __int128 v6 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v6;
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 57) = *(_OWORD *)(a2 + 57);
  *(_BYTE *)(a1 + 73) = *(_BYTE *)(a2 + 73);
  *(_DWORD *)(a1 + 74) = *(_DWORD *)(a2 + 74);
  *(_BYTE *)(a1 + 78) = *(_BYTE *)(a2 + 78);
  __int128 v7 = (int *)type metadata accessor for CurrencyFormatStyleConfiguration.Collection(0LL);
  uint64_t v8 = v7[9];
  __int128 v9 = (void *)(a1 + v8);
  __int128 v10 = (const void *)(a2 + v8);
  uint64_t v11 = type metadata accessor for FloatingPointRoundingRule();
  uint64_t v12 = *(void *)(v11 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v12 + 48))(v10, 1LL, v11))
  {
    uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
    memcpy(v9, v10, *(void *)(*(void *)(v13 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v12 + 32))(v9, v10, v11);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v12 + 56))(v9, 0LL, 1LL, v11);
  }

  uint64_t v14 = v7[10];
  uint64_t v15 = a1 + v14;
  uint64_t v16 = a2 + v14;
  *(void *)uint64_t v15 = *(void *)v16;
  *(_BYTE *)(v15 + 8) = *(_BYTE *)(v16 + 8);
  *(_BYTE *)(a1 + v7[11]) = *(_BYTE *)(a2 + v7[11]);
  *(_BYTE *)(a1 + v7[12]) = *(_BYTE *)(a2 + v7[12]);
  uint64_t v17 = a3[6];
  *(_OWORD *)(a1 + a3[5]) = *(_OWORD *)(a2 + a3[5]);
  *(_OWORD *)(a1 + v17) = *(_OWORD *)(a2 + v17);
  uint64_t v18 = a3[7];
  uint64_t v19 = (_OWORD *)(a1 + v18);
  uint64_t v20 = (_OWORD *)(a2 + v18);
  __int128 v21 = v20[7];
  v19[6] = v20[6];
  v19[7] = v21;
  *(_OWORD *)((char *)v19 + 124) = *(_OWORD *)((char *)v20 + 124);
  __int128 v22 = v20[3];
  _OWORD v19[2] = v20[2];
  v19[3] = v22;
  __int128 v23 = v20[5];
  v19[4] = v20[4];
  v19[5] = v23;
  __int128 v24 = v20[1];
  *uint64_t v19 = *v20;
  v19[1] = v24;
  return a1;
}

uint64_t assignWithTake for ICUCurrencyNumberFormatter.Signature(uint64_t a1, uint64_t a2, int *a3)
{
  *(void *)a1 = *(void *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  __int128 v6 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v6;
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 57) = *(_OWORD *)(a2 + 57);
  *(_BYTE *)(a1 + 73) = *(_BYTE *)(a2 + 73);
  *(_DWORD *)(a1 + 74) = *(_DWORD *)(a2 + 74);
  *(_BYTE *)(a1 + 78) = *(_BYTE *)(a2 + 78);
  __int128 v7 = (int *)type metadata accessor for CurrencyFormatStyleConfiguration.Collection(0LL);
  uint64_t v8 = v7[9];
  __int128 v9 = (void *)(a1 + v8);
  __int128 v10 = (void *)(a2 + v8);
  uint64_t v11 = type metadata accessor for FloatingPointRoundingRule();
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v12 + 48);
  int v14 = v13(v9, 1LL, v11);
  int v15 = v13(v10, 1LL, v11);
  if (v14)
  {
    if (!v15)
    {
      (*(void (**)(void *, void *, uint64_t))(v12 + 32))(v9, v10, v11);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v12 + 56))(v9, 0LL, 1LL, v11);
      goto LABEL_7;
    }

    goto LABEL_6;
  }

  if (v15)
  {
    (*(void (**)(void *, uint64_t))(v12 + 8))(v9, v11);
LABEL_6:
    uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
    memcpy(v9, v10, *(void *)(*(void *)(v16 - 8) + 64LL));
    goto LABEL_7;
  }

  (*(void (**)(void *, void *, uint64_t))(v12 + 40))(v9, v10, v11);
LABEL_7:
  uint64_t v17 = v7[10];
  uint64_t v18 = a1 + v17;
  uint64_t v19 = a2 + v17;
  *(void *)uint64_t v18 = *(void *)v19;
  *(_BYTE *)(v18 + 8) = *(_BYTE *)(v19 + 8);
  *(_BYTE *)(a1 + v7[11]) = *(_BYTE *)(a2 + v7[11]);
  *(_BYTE *)(a1 + v7[12]) = *(_BYTE *)(a2 + v7[12]);
  uint64_t v20 = a3[5];
  __int128 v21 = (void *)(a1 + v20);
  __int128 v22 = (uint64_t *)(a2 + v20);
  uint64_t v24 = *v22;
  uint64_t v23 = v22[1];
  *__int128 v21 = v24;
  v21[1] = v23;
  swift_bridgeObjectRelease();
  uint64_t v25 = a3[6];
  uint64_t v26 = (void *)(a1 + v25);
  uint64_t v27 = (uint64_t *)(a2 + v25);
  uint64_t v29 = *v27;
  uint64_t v28 = v27[1];
  *uint64_t v26 = v29;
  v26[1] = v28;
  swift_bridgeObjectRelease();
  uint64_t v30 = a3[7];
  uint64_t v31 = a1 + v30;
  uint64_t v32 = a2 + v30;
  if (*(void *)(a1 + v30 + 8) != 1LL)
  {
    uint64_t v33 = *(void *)(v32 + 8);
    if (v33 != 1)
    {
      *(_BYTE *)uint64_t v31 = *(_BYTE *)v32;
      *(void *)(v31 + 8) = v33;
      swift_bridgeObjectRelease();
      uint64_t v38 = *(void *)(v32 + 24);
      *(void *)(v31 + 16) = *(void *)(v32 + 16);
      *(void *)(v31 + 24) = v38;
      swift_bridgeObjectRelease();
      uint64_t v39 = *(void *)(v32 + 40);
      *(void *)(v31 + 32) = *(void *)(v32 + 32);
      *(void *)(v31 + 40) = v39;
      swift_bridgeObjectRelease();
      *(void *)(v31 + 48) = *(void *)(v32 + 48);
      swift_bridgeObjectRelease();
      *(void *)(v31 + 56) = *(void *)(v32 + 56);
      swift_bridgeObjectRelease();
      __int128 v40 = *(void **)(v31 + 64);
      *(void *)(v31 + 64) = *(void *)(v32 + 64);

      __int128 v41 = *(void **)(v31 + 72);
      *(void *)(v31 + 72) = *(void *)(v32 + 72);

      __int128 v42 = *(void **)(v31 + 80);
      *(void *)(v31 + 80) = *(void *)(v32 + 80);

      __int128 v43 = *(void **)(v31 + 88);
      *(void *)(v31 + 88) = *(void *)(v32 + 88);

      __int128 v44 = *(void **)(v31 + 96);
      *(void *)(v31 + 96) = *(void *)(v32 + 96);

      *(void *)(v31 + 104) = *(void *)(v32 + 104);
      swift_bridgeObjectRelease();
      *(void *)(v31 + 112) = *(void *)(v32 + 112);
      swift_bridgeObjectRelease();
      uint64_t v45 = *(void *)(v32 + 128);
      *(void *)(v31 + 120) = *(void *)(v32 + 120);
      *(void *)(v31 + 128) = v45;
      swift_bridgeObjectRelease();
      *(_DWORD *)(v31 + 136) = *(_DWORD *)(v32 + 136);
      return a1;
    }

    outlined destroy of LocalePreferences((id *)v31);
  }

  __int128 v34 = *(_OWORD *)(v32 + 112);
  *(_OWORD *)(v31 + 96) = *(_OWORD *)(v32 + 96);
  *(_OWORD *)(v31 + 112) = v34;
  *(_OWORD *)(v31 + 124) = *(_OWORD *)(v32 + 124);
  __int128 v35 = *(_OWORD *)(v32 + 48);
  *(_OWORD *)(v31 + 32) = *(_OWORD *)(v32 + 32);
  *(_OWORD *)(v31 + 48) = v35;
  __int128 v36 = *(_OWORD *)(v32 + 80);
  *(_OWORD *)(v31 + 64) = *(_OWORD *)(v32 + 64);
  *(_OWORD *)(v31 + 80) = v36;
  __int128 v37 = *(_OWORD *)(v32 + 16);
  *(_OWORD *)uint64_t v31 = *(_OWORD *)v32;
  *(_OWORD *)(v31 + 16) = v37;
  return a1;
}

uint64_t getEnumTagSinglePayload for ICUCurrencyNumberFormatter.Signature()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_183136C6C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return __swift_get_extra_inhabitant_indexTm_1( a1,  a2,  a3,  type metadata accessor for CurrencyFormatStyleConfiguration.Collection);
}

uint64_t storeEnumTagSinglePayload for ICUCurrencyNumberFormatter.Signature()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_183136C84(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  return __swift_store_extra_inhabitant_indexTm_1( a1,  a2,  a3,  a4,  type metadata accessor for CurrencyFormatStyleConfiguration.Collection);
}

uint64_t type metadata completion function for ICUCurrencyNumberFormatter.Signature()
{
  uint64_t result = type metadata accessor for CurrencyFormatStyleConfiguration.Collection(319LL);
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0LL;
  }

  return result;
}

void *initializeBufferWithCopyOfBuffer for ICUNumberFormatter.Signature( uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = (void *)a1;
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80LL);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v15 = *a2;
    *uint64_t v4 = *a2;
    uint64_t v4 = (void *)(v15 + ((v5 + 16LL) & ~(unint64_t)v5));
    swift_retain();
  }

  else
  {
    *(void *)a1 = *a2;
    *(_BYTE *)(a1 + 8) = *((_BYTE *)a2 + 8);
    __int128 v7 = *((_OWORD *)a2 + 2);
    *(_OWORD *)(a1 + 16) = *((_OWORD *)a2 + 1);
    *(_OWORD *)(a1 + 32) = v7;
    *(_OWORD *)(a1 + 48) = *((_OWORD *)a2 + 3);
    *(_OWORD *)(a1 + 57) = *(_OWORD *)((char *)a2 + 57);
    *(_BYTE *)(a1 + 73) = *((_BYTE *)a2 + 73);
    *(_BYTE *)(a1 + 76) = *((_BYTE *)a2 + 76);
    *(_WORD *)(a1 + 74) = *((_WORD *)a2 + 37);
    *(_BYTE *)(a1 + 77) = *((_BYTE *)a2 + 77);
    uint64_t v8 = (int *)type metadata accessor for NumberFormatStyleConfiguration.Collection(0LL);
    uint64_t v9 = v8[9];
    __int128 v10 = (char *)v4 + v9;
    uint64_t v11 = (char *)a2 + v9;
    uint64_t v12 = type metadata accessor for FloatingPointRoundingRule();
    uint64_t v13 = *(void *)(v12 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1LL, v12))
    {
      uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
      memcpy(v10, v11, *(void *)(*(void *)(v14 - 8) + 64LL));
    }

    else
    {
      (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v10, v11, v12);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v13 + 56))(v10, 0LL, 1LL, v12);
    }

    uint64_t v16 = v8[10];
    uint64_t v17 = (char *)v4 + v16;
    uint64_t v18 = (uint64_t)a2 + v16;
    *(void *)uint64_t v17 = *(void *)v18;
    v17[8] = *(_BYTE *)(v18 + 8);
    *((_BYTE *)v4 + v8[11]) = *((_BYTE *)a2 + v8[11]);
    uint64_t v19 = *(int *)(a3 + 20);
    uint64_t v20 = *(int *)(a3 + 24);
    __int128 v21 = (void *)((char *)v4 + v19);
    __int128 v22 = (uint64_t *)((char *)a2 + v19);
    uint64_t v23 = v22[1];
    *__int128 v21 = *v22;
    v21[1] = v23;
    uint64_t v24 = (char *)v4 + v20;
    uint64_t v25 = (char *)a2 + v20;
    uint64_t v26 = *(uint64_t *)((char *)a2 + v20 + 8);
    swift_bridgeObjectRetain();
    if (v26 == 1)
    {
      __int128 v27 = *((_OWORD *)v25 + 7);
      *((_OWORD *)v24 + 6) = *((_OWORD *)v25 + 6);
      *((_OWORD *)v24 + 7) = v27;
      *(_OWORD *)(v24 + 124) = *(_OWORD *)(v25 + 124);
      __int128 v28 = *((_OWORD *)v25 + 3);
      *((_OWORD *)v24 + 2) = *((_OWORD *)v25 + 2);
      *((_OWORD *)v24 + 3) = v28;
      __int128 v29 = *((_OWORD *)v25 + 5);
      *((_OWORD *)v24 + 4) = *((_OWORD *)v25 + 4);
      *((_OWORD *)v24 + 5) = v29;
      __int128 v30 = *((_OWORD *)v25 + 1);
      *(_OWORD *)uint64_t v24 = *(_OWORD *)v25;
      *((_OWORD *)v24 + 1) = v30;
    }

    else
    {
      *uint64_t v24 = *v25;
      uint64_t v31 = *((void *)v25 + 2);
      uint64_t v32 = *((void *)v25 + 3);
      *((void *)v24 + 1) = v26;
      *((void *)v24 + 2) = v31;
      uint64_t v33 = *((void *)v25 + 4);
      uint64_t v34 = *((void *)v25 + 5);
      *((void *)v24 + 3) = v32;
      *((void *)v24 + 4) = v33;
      uint64_t v35 = *((void *)v25 + 6);
      uint64_t v36 = *((void *)v25 + 7);
      *((void *)v24 + 5) = v34;
      *((void *)v24 + 6) = v35;
      uint64_t v38 = (void *)*((void *)v25 + 8);
      __int128 v37 = (void *)*((void *)v25 + 9);
      *((void *)v24 + 7) = v36;
      *((void *)v24 + 8) = v38;
      id v49 = (void *)*((void *)v25 + 10);
      id v50 = (void *)*((void *)v25 + 11);
      *((void *)v24 + 9) = v37;
      *((void *)v24 + 10) = v49;
      uint64_t v39 = *((void *)v25 + 13);
      id v51 = (void *)*((void *)v25 + 12);
      *((void *)v24 + 11) = v50;
      *((void *)v24 + 12) = v51;
      uint64_t v40 = *((void *)v25 + 15);
      uint64_t v41 = *((void *)v25 + 14);
      *((void *)v24 + 13) = v39;
      *((void *)v24 + 14) = v41;
      uint64_t v42 = *((void *)v25 + 16);
      *((void *)v24 + 15) = v40;
      *((void *)v24 + 16) = v42;
      *((_DWORD *)v24 + 34) = *((_DWORD *)v25 + 34);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      id v43 = v38;
      id v44 = v37;
      id v45 = v49;
      id v46 = v50;
      id v47 = v51;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
  }

  return v4;
}

uint64_t destroy for ICUNumberFormatter.Signature(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a1 + *(int *)(type metadata accessor for NumberFormatStyleConfiguration.Collection(0LL) + 36);
  uint64_t v5 = type metadata accessor for FloatingPointRoundingRule();
  uint64_t v6 = *(void *)(v5 - 8);
  swift_bridgeObjectRelease();
  uint64_t v7 = a1 + *(int *)(a2 + 24);
  uint64_t result = *(void *)(v7 + 8);
  if (result != 1)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }

  return result;
}

uint64_t initializeWithCopy for ICUNumberFormatter.Signature(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  __int128 v6 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v6;
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 57) = *(_OWORD *)(a2 + 57);
  *(_BYTE *)(a1 + 73) = *(_BYTE *)(a2 + 73);
  *(_BYTE *)(a1 + 76) = *(_BYTE *)(a2 + 76);
  *(_WORD *)(a1 + 74) = *(_WORD *)(a2 + 74);
  *(_BYTE *)(a1 + 77) = *(_BYTE *)(a2 + 77);
  uint64_t v7 = (int *)type metadata accessor for NumberFormatStyleConfiguration.Collection(0LL);
  uint64_t v8 = v7[9];
  uint64_t v9 = (void *)(a1 + v8);
  __int128 v10 = (const void *)(a2 + v8);
  uint64_t v11 = type metadata accessor for FloatingPointRoundingRule();
  uint64_t v12 = *(void *)(v11 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v12 + 48))(v10, 1LL, v11))
  {
    uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
    memcpy(v9, v10, *(void *)(*(void *)(v13 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v12 + 16))(v9, v10, v11);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v12 + 56))(v9, 0LL, 1LL, v11);
  }

  uint64_t v14 = v7[10];
  uint64_t v15 = a1 + v14;
  uint64_t v16 = a2 + v14;
  *(void *)uint64_t v15 = *(void *)v16;
  *(_BYTE *)(v15 + 8) = *(_BYTE *)(v16 + 8);
  *(_BYTE *)(a1 + v7[11]) = *(_BYTE *)(a2 + v7[11]);
  uint64_t v17 = *(int *)(a3 + 20);
  uint64_t v18 = *(int *)(a3 + 24);
  uint64_t v19 = (void *)(a1 + v17);
  uint64_t v20 = (void *)(a2 + v17);
  uint64_t v21 = v20[1];
  *uint64_t v19 = *v20;
  v19[1] = v21;
  uint64_t v22 = a1 + v18;
  uint64_t v23 = a2 + v18;
  uint64_t v24 = *(void *)(a2 + v18 + 8);
  swift_bridgeObjectRetain();
  if (v24 == 1)
  {
    __int128 v25 = *(_OWORD *)(v23 + 112);
    *(_OWORD *)(v22 + 96) = *(_OWORD *)(v23 + 96);
    *(_OWORD *)(v22 + 112) = v25;
    *(_OWORD *)(v22 + 124) = *(_OWORD *)(v23 + 124);
    __int128 v26 = *(_OWORD *)(v23 + 48);
    *(_OWORD *)(v22 + 32) = *(_OWORD *)(v23 + 32);
    *(_OWORD *)(v22 + 48) = v26;
    __int128 v27 = *(_OWORD *)(v23 + 80);
    *(_OWORD *)(v22 + 64) = *(_OWORD *)(v23 + 64);
    *(_OWORD *)(v22 + 80) = v27;
    __int128 v28 = *(_OWORD *)(v23 + 16);
    *(_OWORD *)uint64_t v22 = *(_OWORD *)v23;
    *(_OWORD *)(v22 + 16) = v28;
  }

  else
  {
    *(_BYTE *)uint64_t v22 = *(_BYTE *)v23;
    uint64_t v29 = *(void *)(v23 + 16);
    uint64_t v30 = *(void *)(v23 + 24);
    *(void *)(v22 + 8) = v24;
    *(void *)(v22 + 16) = v29;
    uint64_t v31 = *(void *)(v23 + 32);
    uint64_t v32 = *(void *)(v23 + 40);
    *(void *)(v22 + 24) = v30;
    *(void *)(v22 + 32) = v31;
    uint64_t v33 = *(void *)(v23 + 48);
    uint64_t v34 = *(void *)(v23 + 56);
    *(void *)(v22 + 40) = v32;
    *(void *)(v22 + 48) = v33;
    uint64_t v36 = *(void **)(v23 + 64);
    uint64_t v35 = *(void **)(v23 + 72);
    *(void *)(v22 + 56) = v34;
    *(void *)(v22 + 64) = v36;
    id v47 = *(void **)(v23 + 80);
    id v48 = *(void **)(v23 + 88);
    *(void *)(v22 + 72) = v35;
    *(void *)(v22 + 80) = v47;
    uint64_t v37 = *(void *)(v23 + 104);
    id v49 = *(void **)(v23 + 96);
    *(void *)(v22 + 88) = v48;
    *(void *)(v22 + 96) = v49;
    uint64_t v38 = *(void *)(v23 + 120);
    uint64_t v39 = *(void *)(v23 + 112);
    *(void *)(v22 + 104) = v37;
    *(void *)(v22 + 112) = v39;
    uint64_t v40 = *(void *)(v23 + 128);
    *(void *)(v22 + 120) = v38;
    *(void *)(v22 + 128) = v40;
    *(_DWORD *)(v22 + 136) = *(_DWORD *)(v23 + 136);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    id v41 = v36;
    id v42 = v35;
    id v43 = v47;
    id v44 = v48;
    id v45 = v49;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }

  return a1;
}

uint64_t assignWithCopy for ICUNumberFormatter.Signature(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6 = *a2;
  *(_BYTE *)(a1 + 8) = *((_BYTE *)a2 + 8);
  *(void *)a1 = v6;
  __int128 v7 = *((_OWORD *)a2 + 1);
  __int128 v8 = *((_OWORD *)a2 + 2);
  __int128 v9 = *((_OWORD *)a2 + 3);
  *(_OWORD *)(a1 + 57) = *(_OWORD *)((char *)a2 + 57);
  *(_OWORD *)(a1 + 32) = v8;
  *(_OWORD *)(a1 + 48) = v9;
  *(_OWORD *)(a1 + 16) = v7;
  *(_BYTE *)(a1 + 73) = *((_BYTE *)a2 + 73);
  LOWORD(v6) = *((_WORD *)a2 + 37);
  *(_BYTE *)(a1 + 76) = *((_BYTE *)a2 + 76);
  *(_WORD *)(a1 + 74) = v6;
  *(_BYTE *)(a1 + 77) = *((_BYTE *)a2 + 77);
  __int128 v10 = (int *)type metadata accessor for NumberFormatStyleConfiguration.Collection(0LL);
  uint64_t v11 = v10[9];
  uint64_t v12 = (void *)(a1 + v11);
  uint64_t v13 = (char *)a2 + v11;
  uint64_t v14 = type metadata accessor for FloatingPointRoundingRule();
  uint64_t v15 = *(void *)(v14 - 8);
  uint64_t v16 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v15 + 48);
  int v17 = v16(v12, 1LL, v14);
  int v18 = v16(v13, 1LL, v14);
  if (v17)
  {
    if (!v18)
    {
      (*(void (**)(void *, char *, uint64_t))(v15 + 16))(v12, v13, v14);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v15 + 56))(v12, 0LL, 1LL, v14);
      goto LABEL_7;
    }

    goto LABEL_6;
  }

  if (v18)
  {
    (*(void (**)(void *, uint64_t))(v15 + 8))(v12, v14);
LABEL_6:
    uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
    memcpy(v12, v13, *(void *)(*(void *)(v19 - 8) + 64LL));
    goto LABEL_7;
  }

  (*(void (**)(void *, char *, uint64_t))(v15 + 24))(v12, v13, v14);
LABEL_7:
  uint64_t v20 = v10[10];
  uint64_t v21 = a1 + v20;
  uint64_t v22 = (uint64_t *)((char *)a2 + v20);
  uint64_t v23 = *v22;
  *(_BYTE *)(v21 + 8) = *((_BYTE *)v22 + 8);
  *(void *)uint64_t v21 = v23;
  *(_BYTE *)(a1 + v10[11]) = *((_BYTE *)a2 + v10[11]);
  uint64_t v24 = *(int *)(a3 + 20);
  __int128 v25 = (void *)(a1 + v24);
  __int128 v26 = (uint64_t *)((char *)a2 + v24);
  *__int128 v25 = *v26;
  v25[1] = v26[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v27 = *(int *)(a3 + 24);
  uint64_t v28 = a1 + v27;
  uint64_t v29 = (uint64_t)a2 + v27;
  uint64_t v30 = *(void *)(a1 + v27 + 8);
  uint64_t v31 = *(void *)(v29 + 8);
  if (v30 == 1)
  {
    if (v31 == 1)
    {
      *(_OWORD *)uint64_t v28 = *(_OWORD *)v29;
      __int128 v32 = *(_OWORD *)(v29 + 16);
      __int128 v33 = *(_OWORD *)(v29 + 32);
      __int128 v34 = *(_OWORD *)(v29 + 64);
      *(_OWORD *)(v28 + 48) = *(_OWORD *)(v29 + 48);
      *(_OWORD *)(v28 + 64) = v34;
      *(_OWORD *)(v28 + 16) = v32;
      *(_OWORD *)(v28 + 32) = v33;
      __int128 v35 = *(_OWORD *)(v29 + 80);
      __int128 v36 = *(_OWORD *)(v29 + 96);
      __int128 v37 = *(_OWORD *)(v29 + 112);
      *(_OWORD *)(v28 + 124) = *(_OWORD *)(v29 + 124);
      *(_OWORD *)(v28 + 96) = v36;
      *(_OWORD *)(v28 + 112) = v37;
      *(_OWORD *)(v28 + 80) = v35;
    }

    else
    {
      *(_BYTE *)uint64_t v28 = *(_BYTE *)v29;
      *(void *)(v28 + 8) = *(void *)(v29 + 8);
      *(void *)(v28 + 16) = *(void *)(v29 + 16);
      *(void *)(v28 + 24) = *(void *)(v29 + 24);
      *(void *)(v28 + 32) = *(void *)(v29 + 32);
      *(void *)(v28 + 40) = *(void *)(v29 + 40);
      *(void *)(v28 + 48) = *(void *)(v29 + 48);
      *(void *)(v28 + 56) = *(void *)(v29 + 56);
      id v44 = *(void **)(v29 + 64);
      *(void *)(v28 + 64) = v44;
      id v45 = *(void **)(v29 + 72);
      *(void *)(v28 + 72) = v45;
      id v46 = *(void **)(v29 + 80);
      *(void *)(v28 + 80) = v46;
      uint64_t v68 = *(void **)(v29 + 88);
      *(void *)(v28 + 88) = v68;
      id v69 = *(void **)(v29 + 96);
      *(void *)(v28 + 96) = v69;
      *(void *)(v28 + 104) = *(void *)(v29 + 104);
      *(void *)(v28 + 112) = *(void *)(v29 + 112);
      *(void *)(v28 + 120) = *(void *)(v29 + 120);
      *(void *)(v28 + 128) = *(void *)(v29 + 128);
      *(_BYTE *)(v28 + 136) = *(_BYTE *)(v29 + 136);
      *(_BYTE *)(v28 + 137) = *(_BYTE *)(v29 + 137);
      *(_BYTE *)(v28 + 138) = *(_BYTE *)(v29 + 138);
      *(_BYTE *)(v28 + 139) = *(_BYTE *)(v29 + 139);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      id v47 = v44;
      id v48 = v45;
      id v49 = v46;
      id v50 = v68;
      id v51 = v69;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
  }

  else if (v31 == 1)
  {
    outlined destroy of LocalePreferences((id *)v28);
    *(_OWORD *)uint64_t v28 = *(_OWORD *)v29;
    __int128 v38 = *(_OWORD *)(v29 + 64);
    __int128 v40 = *(_OWORD *)(v29 + 16);
    __int128 v39 = *(_OWORD *)(v29 + 32);
    *(_OWORD *)(v28 + 48) = *(_OWORD *)(v29 + 48);
    *(_OWORD *)(v28 + 64) = v38;
    *(_OWORD *)(v28 + 16) = v40;
    *(_OWORD *)(v28 + 32) = v39;
    __int128 v42 = *(_OWORD *)(v29 + 96);
    __int128 v41 = *(_OWORD *)(v29 + 112);
    __int128 v43 = *(_OWORD *)(v29 + 80);
    *(_OWORD *)(v28 + 124) = *(_OWORD *)(v29 + 124);
    *(_OWORD *)(v28 + 96) = v42;
    *(_OWORD *)(v28 + 112) = v41;
    *(_OWORD *)(v28 + 80) = v43;
  }

  else
  {
    *(_BYTE *)uint64_t v28 = *(_BYTE *)v29;
    *(void *)(v28 + 8) = *(void *)(v29 + 8);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(void *)(v28 + 16) = *(void *)(v29 + 16);
    *(void *)(v28 + 24) = *(void *)(v29 + 24);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(void *)(v28 + 32) = *(void *)(v29 + 32);
    *(void *)(v28 + 40) = *(void *)(v29 + 40);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(void *)(v28 + 48) = *(void *)(v29 + 48);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(void *)(v28 + 56) = *(void *)(v29 + 56);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    id v52 = *(void **)(v28 + 64);
    id v53 = *(void **)(v29 + 64);
    *(void *)(v28 + 64) = v53;
    id v54 = v53;

    uint64_t v55 = *(void **)(v28 + 72);
    uint64_t v56 = *(void **)(v29 + 72);
    *(void *)(v28 + 72) = v56;
    id v57 = v56;

    __int128 v58 = *(void **)(v28 + 80);
    __int128 v59 = *(void **)(v29 + 80);
    *(void *)(v28 + 80) = v59;
    id v60 = v59;

    uint64_t v61 = *(void **)(v28 + 88);
    __int128 v62 = *(void **)(v29 + 88);
    *(void *)(v28 + 88) = v62;
    id v63 = v62;

    __int128 v64 = *(void **)(v28 + 96);
    __int128 v65 = *(void **)(v29 + 96);
    *(void *)(v28 + 96) = v65;
    id v66 = v65;

    *(void *)(v28 + 104) = *(void *)(v29 + 104);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(void *)(v28 + 112) = *(void *)(v29 + 112);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(void *)(v28 + 120) = *(void *)(v29 + 120);
    *(void *)(v28 + 128) = *(void *)(v29 + 128);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(_BYTE *)(v28 + 136) = *(_BYTE *)(v29 + 136);
    *(_BYTE *)(v28 + 137) = *(_BYTE *)(v29 + 137);
    *(_BYTE *)(v28 + 138) = *(_BYTE *)(v29 + 138);
    *(_BYTE *)(v28 + 139) = *(_BYTE *)(v29 + 139);
  }

  return a1;
}

uint64_t initializeWithTake for ICUNumberFormatter.Signature(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  __int128 v6 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v6;
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 57) = *(_OWORD *)(a2 + 57);
  *(_BYTE *)(a1 + 73) = *(_BYTE *)(a2 + 73);
  *(_BYTE *)(a1 + 76) = *(_BYTE *)(a2 + 76);
  *(_WORD *)(a1 + 74) = *(_WORD *)(a2 + 74);
  *(_BYTE *)(a1 + 77) = *(_BYTE *)(a2 + 77);
  __int128 v7 = (int *)type metadata accessor for NumberFormatStyleConfiguration.Collection(0LL);
  uint64_t v8 = v7[9];
  __int128 v9 = (void *)(a1 + v8);
  __int128 v10 = (const void *)(a2 + v8);
  uint64_t v11 = type metadata accessor for FloatingPointRoundingRule();
  uint64_t v12 = *(void *)(v11 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v12 + 48))(v10, 1LL, v11))
  {
    uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
    memcpy(v9, v10, *(void *)(*(void *)(v13 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v12 + 32))(v9, v10, v11);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v12 + 56))(v9, 0LL, 1LL, v11);
  }

  uint64_t v14 = v7[10];
  uint64_t v15 = a1 + v14;
  uint64_t v16 = a2 + v14;
  *(void *)uint64_t v15 = *(void *)v16;
  *(_BYTE *)(v15 + 8) = *(_BYTE *)(v16 + 8);
  *(_BYTE *)(a1 + v7[11]) = *(_BYTE *)(a2 + v7[11]);
  uint64_t v17 = *(int *)(a3 + 24);
  *(_OWORD *)(a1 + *(int *)(a3 + 20)) = *(_OWORD *)(a2 + *(int *)(a3 + 20));
  int v18 = (_OWORD *)(a1 + v17);
  uint64_t v19 = (_OWORD *)(a2 + v17);
  __int128 v20 = v19[7];
  v18[6] = v19[6];
  v18[7] = v20;
  *(_OWORD *)((char *)v18 + 124) = *(_OWORD *)((char *)v19 + 124);
  __int128 v21 = v19[3];
  v18[2] = v19[2];
  v18[3] = v21;
  __int128 v22 = v19[5];
  v18[4] = v19[4];
  v18[5] = v22;
  __int128 v23 = v19[1];
  *int v18 = *v19;
  v18[1] = v23;
  return a1;
}

uint64_t assignWithTake for ICUNumberFormatter.Signature(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  __int128 v6 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v6;
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 57) = *(_OWORD *)(a2 + 57);
  *(_BYTE *)(a1 + 73) = *(_BYTE *)(a2 + 73);
  *(_BYTE *)(a1 + 76) = *(_BYTE *)(a2 + 76);
  *(_WORD *)(a1 + 74) = *(_WORD *)(a2 + 74);
  *(_BYTE *)(a1 + 77) = *(_BYTE *)(a2 + 77);
  __int128 v7 = (int *)type metadata accessor for NumberFormatStyleConfiguration.Collection(0LL);
  uint64_t v8 = v7[9];
  __int128 v9 = (void *)(a1 + v8);
  __int128 v10 = (void *)(a2 + v8);
  uint64_t v11 = type metadata accessor for FloatingPointRoundingRule();
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v12 + 48);
  int v14 = v13(v9, 1LL, v11);
  int v15 = v13(v10, 1LL, v11);
  if (v14)
  {
    if (!v15)
    {
      (*(void (**)(void *, void *, uint64_t))(v12 + 32))(v9, v10, v11);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v12 + 56))(v9, 0LL, 1LL, v11);
      goto LABEL_7;
    }

    goto LABEL_6;
  }

  if (v15)
  {
    (*(void (**)(void *, uint64_t))(v12 + 8))(v9, v11);
LABEL_6:
    uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
    memcpy(v9, v10, *(void *)(*(void *)(v16 - 8) + 64LL));
    goto LABEL_7;
  }

  (*(void (**)(void *, void *, uint64_t))(v12 + 40))(v9, v10, v11);
LABEL_7:
  uint64_t v17 = v7[10];
  uint64_t v18 = a1 + v17;
  uint64_t v19 = a2 + v17;
  *(void *)uint64_t v18 = *(void *)v19;
  *(_BYTE *)(v18 + 8) = *(_BYTE *)(v19 + 8);
  *(_BYTE *)(a1 + v7[11]) = *(_BYTE *)(a2 + v7[11]);
  uint64_t v20 = *(int *)(a3 + 20);
  __int128 v21 = (void *)(a1 + v20);
  __int128 v22 = (uint64_t *)(a2 + v20);
  uint64_t v24 = *v22;
  uint64_t v23 = v22[1];
  *__int128 v21 = v24;
  v21[1] = v23;
  swift_bridgeObjectRelease();
  uint64_t v25 = *(int *)(a3 + 24);
  uint64_t v26 = a1 + v25;
  uint64_t v27 = a2 + v25;
  if (*(void *)(a1 + v25 + 8) != 1LL)
  {
    uint64_t v28 = *(void *)(v27 + 8);
    if (v28 != 1)
    {
      *(_BYTE *)uint64_t v26 = *(_BYTE *)v27;
      *(void *)(v26 + 8) = v28;
      swift_bridgeObjectRelease();
      uint64_t v33 = *(void *)(v27 + 24);
      *(void *)(v26 + 16) = *(void *)(v27 + 16);
      *(void *)(v26 + 24) = v33;
      swift_bridgeObjectRelease();
      uint64_t v34 = *(void *)(v27 + 40);
      *(void *)(v26 + 32) = *(void *)(v27 + 32);
      *(void *)(v26 + 40) = v34;
      swift_bridgeObjectRelease();
      *(void *)(v26 + 48) = *(void *)(v27 + 48);
      swift_bridgeObjectRelease();
      *(void *)(v26 + 56) = *(void *)(v27 + 56);
      swift_bridgeObjectRelease();
      __int128 v35 = *(void **)(v26 + 64);
      *(void *)(v26 + 64) = *(void *)(v27 + 64);

      __int128 v36 = *(void **)(v26 + 72);
      *(void *)(v26 + 72) = *(void *)(v27 + 72);

      __int128 v37 = *(void **)(v26 + 80);
      *(void *)(v26 + 80) = *(void *)(v27 + 80);

      __int128 v38 = *(void **)(v26 + 88);
      *(void *)(v26 + 88) = *(void *)(v27 + 88);

      __int128 v39 = *(void **)(v26 + 96);
      *(void *)(v26 + 96) = *(void *)(v27 + 96);

      *(void *)(v26 + 104) = *(void *)(v27 + 104);
      swift_bridgeObjectRelease();
      *(void *)(v26 + 112) = *(void *)(v27 + 112);
      swift_bridgeObjectRelease();
      uint64_t v40 = *(void *)(v27 + 128);
      *(void *)(v26 + 120) = *(void *)(v27 + 120);
      *(void *)(v26 + 128) = v40;
      swift_bridgeObjectRelease();
      *(_DWORD *)(v26 + 136) = *(_DWORD *)(v27 + 136);
      return a1;
    }

    outlined destroy of LocalePreferences((id *)v26);
  }

  __int128 v29 = *(_OWORD *)(v27 + 112);
  *(_OWORD *)(v26 + 96) = *(_OWORD *)(v27 + 96);
  *(_OWORD *)(v26 + 112) = v29;
  *(_OWORD *)(v26 + 124) = *(_OWORD *)(v27 + 124);
  __int128 v30 = *(_OWORD *)(v27 + 48);
  *(_OWORD *)(v26 + 32) = *(_OWORD *)(v27 + 32);
  *(_OWORD *)(v26 + 48) = v30;
  __int128 v31 = *(_OWORD *)(v27 + 80);
  *(_OWORD *)(v26 + 64) = *(_OWORD *)(v27 + 64);
  *(_OWORD *)(v26 + 80) = v31;
  __int128 v32 = *(_OWORD *)(v27 + 16);
  *(_OWORD *)uint64_t v26 = *(_OWORD *)v27;
  *(_OWORD *)(v26 + 16) = v32;
  return a1;
}

uint64_t getEnumTagSinglePayload for ICUPercentNumberFormatter.Signature()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_183137C4C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return __swift_get_extra_inhabitant_indexTm_1( a1,  a2,  a3,  type metadata accessor for NumberFormatStyleConfiguration.Collection);
}

uint64_t __swift_get_extra_inhabitant_indexTm_1( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void))
{
  uint64_t v7 = a4(0LL);
  uint64_t v8 = *(void *)(v7 - 8);
  if (*(_DWORD *)(v8 + 84) == (_DWORD)a2) {
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v8 + 48))(a1, a2, v7);
  }
  unint64_t v10 = *(void *)(a1 + *(int *)(a3 + 20) + 8);
  if (v10 >= 0xFFFFFFFF) {
    LODWORD(v10) = -1;
  }
  return (v10 + 1);
}

uint64_t storeEnumTagSinglePayload for ICUPercentNumberFormatter.Signature()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_183137CE4(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  return __swift_store_extra_inhabitant_indexTm_1( a1,  a2,  a3,  a4,  type metadata accessor for NumberFormatStyleConfiguration.Collection);
}

uint64_t __swift_store_extra_inhabitant_indexTm_1( uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t (*a5)(void))
{
  uint64_t result = a5(0LL);
  uint64_t v10 = *(void *)(result - 8);
  if (*(_DWORD *)(v10 + 84) == a3) {
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v10 + 56))(a1, a2, a2, result);
  }
  *(void *)(a1 + *(int *)(a4 + 20) + 8) = (a2 - 1);
  return result;
}

uint64_t type metadata completion function for ICUNumberFormatter.Signature()
{
  uint64_t result = type metadata accessor for NumberFormatStyleConfiguration.Collection(319LL);
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0LL;
  }

  return result;
}

uint64_t base witness table accessor for Equatable in ICUPercentNumberFormatter.Signature()
{
  return lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( &lazy protocol witness table cache variable for type ICUPercentNumberFormatter.Signature and conformance ICUPercentNumberFormatter.Signature,  type metadata accessor for ICUPercentNumberFormatter.Signature,  (uint64_t)&protocol conformance descriptor for ICUPercentNumberFormatter.Signature);
}

uint64_t base witness table accessor for Equatable in ICUCurrencyNumberFormatter.Signature()
{
  return lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( &lazy protocol witness table cache variable for type ICUCurrencyNumberFormatter.Signature and conformance ICUCurrencyNumberFormatter.Signature,  type metadata accessor for ICUCurrencyNumberFormatter.Signature,  (uint64_t)&protocol conformance descriptor for ICUCurrencyNumberFormatter.Signature);
}

unint64_t lazy protocol witness table accessor for type ICUByteCountNumberFormatter.Signature and conformance ICUByteCountNumberFormatter.Signature()
{
  unint64_t result = lazy protocol witness table cache variable for type ICUByteCountNumberFormatter.Signature and conformance ICUByteCountNumberFormatter.Signature;
  if (!lazy protocol witness table cache variable for type ICUByteCountNumberFormatter.Signature and conformance ICUByteCountNumberFormatter.Signature)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for ICUByteCountNumberFormatter.Signature,  &unk_189C7D6D0);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type ICUByteCountNumberFormatter.Signature and conformance ICUByteCountNumberFormatter.Signature);
  }

  return result;
}

unint64_t lazy protocol witness table accessor for type ICUMeasurementNumberFormatter.Signature and conformance ICUMeasurementNumberFormatter.Signature()
{
  unint64_t result = lazy protocol witness table cache variable for type ICUMeasurementNumberFormatter.Signature and conformance ICUMeasurementNumberFormatter.Signature;
  if (!lazy protocol witness table cache variable for type ICUMeasurementNumberFormatter.Signature and conformance ICUMeasurementNumberFormatter.Signature)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for ICUMeasurementNumberFormatter.Signature,  &unk_189C7D5C0);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type ICUMeasurementNumberFormatter.Signature and conformance ICUMeasurementNumberFormatter.Signature);
  }

  return result;
}

Swift::String __swiftcall NSDecimal.FormatStyle.format(_:)(NSDecimal *a1)
{
  void (*v14)(_BYTE *__return_ptr, uint64_t, uint64_t);
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  int v29;
  unsigned int v30;
  Swift::String v31;
  int v32;
  NSDecimal *v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  Swift::String v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unsigned int v44;
  unsigned int v45;
  unint64_t v46;
  uint64_t v47;
  void *v49;
  unint64_t v50;
  Swift::String v51;
  uint64_t v52;
  int v53;
  int v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  __int16 v58;
  __int16 v59;
  int v60;
  __int16 v61;
  __int16 v62;
  __int16 v63;
  __int16 v64;
  __int16 i;
  Swift::String v66;
  int v67;
  Swift::String v68;
  Swift::String v69;
  Swift::String v70;
  unint64_t v71;
  uint64_t v72;
  void *v73;
  Swift::String result;
  char v75;
  uint64_t v76;
  int v77;
  uint64_t v78;
  uint64_t v79;
  int v80;
  uint64_t v81;
  int v82;
  uint64_t v83;
  uint64_t v84;
  void *v85;
  NSDecimal *v86;
  uint64_t v87;
  unint64_t v88;
  _BYTE v89[20];
  _BYTE v90[140];
  _BYTE v91[144];
  uint64_t v92;
  LODWORD(v86) = v2;
  uint64_t v4 = v1;
  uint64_t v85 = 0LL;
  unsigned __int8 v92 = *MEMORY[0x1895F89C0];
  uint64_t v6 = type metadata accessor for ICUNumberFormatter.Signature(0LL);
  MEMORY[0x1895F8858](v6);
  uint64_t v8 = (char *)&v78 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v84 = v3 + *(int *)(type metadata accessor for NSDecimal.FormatStyle(0LL) + 20);
  uint64_t v9 = *(void *)(v3 + 8);
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t))(v9 + 472);
  swift_unknownObjectRetain();
  uint64_t v12 = v11(ObjectType, v9);
  __int128 v83 = v13;
  swift_unknownObjectRelease();
  int v14 = *(void (**)(_BYTE *__return_ptr, uint64_t, uint64_t))(v9 + 464);
  swift_unknownObjectRetain();
  v14(v90, ObjectType, v9);
  swift_unknownObjectRelease();
  outlined init with take of LocalePreferences?( (uint64_t)v90,  (uint64_t)v91,  (uint64_t *)&demangling cache variable for type metadata for LocalePreferences?);
  outlined init with copy of ICUNumberFormatter.Signature( v84,  (uint64_t)v8,  type metadata accessor for NumberFormatStyleConfiguration.Collection);
  int v15 = (uint64_t *)&v8[*(int *)(v6 + 20)];
  uint64_t v16 = v83;
  void *v15 = v12;
  v15[1] = v16;
  outlined init with take of LocalePreferences?( (uint64_t)v91,  (uint64_t)&v8[*(int *)(v6 + 24)],  (uint64_t *)&demangling cache variable for type metadata for LocalePreferences?);
  uint64_t v17 = specialized static ICUNumberFormatter._create(with:)((uint64_t)v8);
  outlined destroy of ICUNumberFormatter.Signature((uint64_t)v8, type metadata accessor for ICUNumberFormatter.Signature);
  if (v17)
  {
    uint64_t v18 = *(void *)(v17 + 16);
    type metadata accessor for ICUNumberFormatterBase.FormatResult();
    swift_initStackObject();
    uint64_t v19 = v4;
    uint64_t v20 = v4;
    LODWORD(v21) = (_DWORD)v86;
    __int128 v22 = v85;
    ICUNumberFormatterBase.FormatResult.init(formatter:value:)(v18, (uint64_t)a1, v20, (int)v86);
    if (v22)
    {

      swift_release();
      __int128 v22 = 0LL;
    }

    else
    {
LABEL_33:
      id v57 = swift_retain_n();
      MEMORY[0x1895F8858](v57);
      swift_retain();
      specialized closure #1 in _withResizingUCharBuffer(initialSize:_:)((uint64_t)(&v78 - 8), (uint64_t *)v90);
      if (v22) {
        goto LABEL_47;
      }
      uint64_t v56 = *(void *)v90;
      uint64_t v55 = *(void *)&v90[8];
      swift_release();
      swift_release_n();
      if (v55) {
        goto LABEL_44;
      }
    }
  }

  else
  {
    LODWORD(v21) = (_DWORD)v86;
    uint64_t v19 = v4;
    __int128 v22 = v85;
  }

  uint64_t v85 = v22;
  *(void *)uint64_t v90 = a1;
  uint64_t v23 = (unint64_t)a1 >> 32;
  uint64_t v24 = (unint64_t)a1 >> 48;
  uint64_t v25 = v19;
  uint64_t v26 = v19 >> 16;
  *(_WORD *)&v90[8] = v19;
  uint64_t v27 = HIDWORD(v19);
  *(_WORD *)&v90[10] = v26;
  uint64_t v28 = HIWORD(v25);
  *(_WORD *)&v90[12] = v27;
  __int128 v29 = v21;
  __int128 v30 = WORD1(v21);
  *(_WORD *)&v90[14] = HIWORD(v25);
  *(_WORD *)&v90[16] = v29;
  *(_WORD *)&v90[18] = v30;
  if (!_So9NSDecimala__length_getter(v90))
  {
    *(void *)uint64_t v90 = a1;
    *(_WORD *)&v90[8] = v25;
    *(_WORD *)&v90[10] = v26;
    *(_WORD *)&v90[12] = v27;
    *(_WORD *)&v90[14] = HIWORD(v25);
    *(_WORD *)&v90[16] = v29;
    *(_WORD *)&v90[18] = v30;
    if (_So9NSDecimala__isNegative_getter(v90))
    {
      uint64_t v55 = 0xE300000000000000LL;
      uint64_t v56 = 5136718LL;
LABEL_44:
      char v72 = v56;
      char v73 = (void *)v55;
      goto LABEL_48;
    }
  }

  *(void *)uint64_t v90 = a1;
  *(_WORD *)&v90[8] = v25;
  *(_WORD *)&v90[10] = v26;
  *(_WORD *)&v90[12] = v27;
  *(_WORD *)&v90[14] = HIWORD(v25);
  *(_WORD *)&v90[16] = v29;
  *(_WORD *)&v90[18] = v30;
  if (!_So9NSDecimala__length_getter(v90))
  {
    uint64_t v55 = 0xE100000000000000LL;
    uint64_t v56 = 48LL;
    goto LABEL_44;
  }

  uint64_t v87 = 0LL;
  uint64_t v88 = 0xE000000000000000LL;
  *(void *)uint64_t v90 = a1;
  *(_WORD *)&v90[8] = v25;
  *(_WORD *)&v90[10] = v26;
  *(_WORD *)&v90[12] = v27;
  *(_WORD *)&v90[14] = HIWORD(v25);
  *(_WORD *)&v90[16] = v29;
  *(_WORD *)&v90[18] = v30;
  *(void *)uint64_t v89 = a1;
  *(_WORD *)&v89[8] = v25;
  *(_WORD *)&v89[10] = v26;
  *(_WORD *)&v89[12] = v27;
  *(_WORD *)&v89[14] = HIWORD(v25);
  *(_WORD *)&v89[16] = v29;
  *(_WORD *)&v89[18] = v30;
  if ((int)_So9NSDecimala__exponent_getter(v89) >= 1)
  {
    do
    {
      LODWORD(v86) = v30;
      v31._countAndFlagsBits = 48LL;
      v31._object = (void *)0xE100000000000000LL;
      String.append(_:)(v31);
      *(_DWORD *)uint64_t v89 = (_DWORD)a1;
      *(_WORD *)&v89[4] = v23;
      *(_WORD *)&v89[6] = v24;
      *(_WORD *)&v89[8] = v25;
      *(_WORD *)&v89[10] = v26;
      *(_WORD *)&v89[12] = v27;
      *(_WORD *)&v89[14] = v28;
      *(_WORD *)&v89[16] = v29;
      *(_WORD *)&v89[18] = (_WORD)v86;
      __int128 v32 = _So9NSDecimala__exponent_getter(v89);
      _So9NSDecimala__exponent_setter((v32 - 1), v90);
      a1 = (NSDecimal *)*(unsigned int *)v90;
      uint64_t v23 = *(unsigned __int16 *)&v90[4];
      LOWORD(v24) = *(_WORD *)&v90[6];
      uint64_t v25 = *(unsigned __int16 *)&v90[8];
      LOWORD(v26) = *(_WORD *)&v90[10];
      LOWORD(v27) = *(_WORD *)&v90[12];
      LOWORD(v28) = *(_WORD *)&v90[14];
      __int128 v29 = *(unsigned __int16 *)&v90[16];
      __int128 v30 = *(unsigned __int16 *)&v90[18];
      *(_DWORD *)uint64_t v89 = *(_DWORD *)v90;
      *(_WORD *)&v89[4] = *(_WORD *)&v90[4];
      *(_WORD *)&v89[6] = *(_WORD *)&v90[6];
      *(_WORD *)&v89[8] = *(_WORD *)&v90[8];
      *(_WORD *)&v89[10] = *(_WORD *)&v90[10];
      *(_WORD *)&v89[12] = *(_WORD *)&v90[12];
      *(_WORD *)&v89[14] = *(_WORD *)&v90[14];
      *(_WORD *)&v89[16] = *(_WORD *)&v90[16];
      *(_WORD *)&v89[18] = *(_WORD *)&v90[18];
    }

    while ((int)_So9NSDecimala__exponent_getter(v89) > 0);
  }

  *(_DWORD *)uint64_t v89 = (_DWORD)a1;
  *(_WORD *)&v89[4] = v23;
  *(_WORD *)&v89[6] = v24;
  *(_WORD *)&v89[8] = v25;
  *(_WORD *)&v89[10] = v26;
  *(_WORD *)&v89[12] = v27;
  *(_WORD *)&v89[14] = v28;
  *(_WORD *)&v89[16] = v29;
  *(_WORD *)&v89[18] = v30;
  if (!_So9NSDecimala__exponent_getter(v89))
  {
    _So9NSDecimala__exponent_setter(1LL, v90);
    a1 = (NSDecimal *)*(unsigned int *)v90;
    uint64_t v23 = *(unsigned __int16 *)&v90[4];
    LOWORD(v24) = *(_WORD *)&v90[6];
    uint64_t v25 = *(unsigned __int16 *)&v90[8];
    LOWORD(v26) = *(_WORD *)&v90[10];
    LOWORD(v27) = *(_WORD *)&v90[12];
    LOWORD(v28) = *(_WORD *)&v90[14];
    __int128 v29 = *(unsigned __int16 *)&v90[16];
    LOWORD(v30) = *(_WORD *)&v90[18];
  }

  uint64_t v86 = a1;
  *(_DWORD *)uint64_t v89 = (_DWORD)a1;
  __int128 v83 = v25;
  uint64_t v84 = v23;
  *(_WORD *)&v89[4] = v23;
  *(_WORD *)&v89[6] = v24;
  *(_WORD *)&v89[8] = v25;
  *(_WORD *)&v89[10] = v26;
  *(_WORD *)&v89[12] = v27;
  *(_WORD *)&v89[14] = v28;
  *(_WORD *)&v89[16] = v29;
  *(_WORD *)&v89[18] = v30;
  if (!_So9NSDecimala__length_getter(v89))
  {
    uint64_t v33 = v86;
    LOWORD(v34) = v29;
    LOWORD(v35) = v83;
    LOWORD(v36) = v84;
LABEL_37:
    *(_DWORD *)uint64_t v89 = (_DWORD)v33;
    *(_WORD *)&v89[4] = v36;
    *(_WORD *)&v89[6] = v24;
    *(_WORD *)&v89[8] = v35;
    *(_WORD *)&v89[10] = v26;
    *(_WORD *)&v89[12] = v27;
    *(_WORD *)&v89[14] = v28;
    *(_WORD *)&v89[16] = v34;
    *(_WORD *)&v89[18] = v30;
    __int128 v58 = v35;
    __int128 v59 = v34;
    id v60 = _So9NSDecimala__exponent_getter(v89);
    uint64_t v61 = v58;
    __int128 v62 = v59;
    if (v60 <= 0)
    {
      uint64_t v86 = v33;
      *(_DWORD *)uint64_t v89 = (_DWORD)v33;
      *(_WORD *)&v89[4] = v36;
      *(_WORD *)&v89[6] = v24;
      id v63 = v58;
      *(_WORD *)&v89[8] = v58;
      *(_WORD *)&v89[10] = v26;
      *(_WORD *)&v89[12] = v27;
      *(_WORD *)&v89[14] = v28;
      __int128 v64 = v62;
      *(_WORD *)&v89[16] = v62;
      *(_WORD *)&v89[18] = v30;
      for (i = v36; _So9NSDecimala__exponent_getter(v89); *(_WORD *)&v89[18] = *(_WORD *)&v90[18])
      {
        v66._countAndFlagsBits = 48LL;
        v66._object = (void *)0xE100000000000000LL;
        String.append(_:)(v66);
        *(_DWORD *)uint64_t v89 = (_DWORD)v86;
        *(_WORD *)&v89[4] = i;
        *(_WORD *)&v89[6] = v24;
        *(_WORD *)&v89[8] = v63;
        *(_WORD *)&v89[10] = v26;
        *(_WORD *)&v89[12] = v27;
        *(_WORD *)&v89[14] = v28;
        *(_WORD *)&v89[16] = v64;
        *(_WORD *)&v89[18] = v30;
        __int128 v67 = _So9NSDecimala__exponent_getter(v89);
        _So9NSDecimala__exponent_setter((v67 + 1), v90);
        i = *(_WORD *)&v90[4];
        LOWORD(v24) = *(_WORD *)&v90[6];
        id v63 = *(_WORD *)&v90[8];
        LOWORD(v26) = *(_WORD *)&v90[10];
        LOWORD(v27) = *(_WORD *)&v90[12];
        LOWORD(v28) = *(_WORD *)&v90[14];
        __int128 v64 = *(_WORD *)&v90[16];
        LOWORD(v30) = *(_WORD *)&v90[18];
        uint64_t v86 = (NSDecimal *)*(unsigned int *)v90;
        *(_DWORD *)uint64_t v89 = *(_DWORD *)v90;
        *(_WORD *)&v89[4] = *(_WORD *)&v90[4];
        *(_WORD *)&v89[6] = *(_WORD *)&v90[6];
        *(_WORD *)&v89[8] = *(_WORD *)&v90[8];
        *(_WORD *)&v89[10] = *(_WORD *)&v90[10];
        *(_WORD *)&v89[12] = *(_WORD *)&v90[12];
        *(_WORD *)&v89[14] = *(_WORD *)&v90[14];
        *(_WORD *)&v89[16] = *(_WORD *)&v90[16];
      }

      v68._countAndFlagsBits = 46LL;
      v68._object = (void *)0xE100000000000000LL;
      String.append(_:)(v68);
      v69._countAndFlagsBits = 48LL;
      v69._object = (void *)0xE100000000000000LL;
      String.append(_:)(v69);
      LOWORD(v36) = i;
      LODWORD(v33) = (_DWORD)v86;
      uint64_t v61 = v63;
      __int128 v62 = v64;
    }

    *(_DWORD *)uint64_t v89 = (_DWORD)v33;
    *(_WORD *)&v89[4] = v36;
    *(_WORD *)&v89[6] = v24;
    *(_WORD *)&v89[8] = v61;
    *(_WORD *)&v89[10] = v26;
    *(_WORD *)&v89[12] = v27;
    *(_WORD *)&v89[14] = v28;
    *(_WORD *)&v89[16] = v62;
    *(_WORD *)&v89[18] = v30;
    if (_So9NSDecimala__isNegative_getter(v89))
    {
      v70._countAndFlagsBits = 45LL;
      v70._object = (void *)0xE100000000000000LL;
      String.append(_:)(v70);
    }

    *(void *)uint64_t v89 = v87;
    *(void *)&v89[8] = v88;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ReversedCollection<String>);
    lazy protocol witness table accessor for type [String] and conformance [A]( (unint64_t *)&lazy protocol witness table cache variable for type ReversedCollection<String> and conformance ReversedCollection<A>,  &demangling cache variable for type metadata for ReversedCollection<String>,  MEMORY[0x189619928]);
    uint64_t v56 = String.init<A>(_:)();
    uint64_t v55 = v71;
    goto LABEL_44;
  }

  a1 = (NSDecimal *)3435973837LL;
  LODWORD(v33) = (_DWORD)v86;
  uint64_t v34 = v29;
  __int128 v35 = v83;
  __int128 v36 = v84;
  while (1)
  {
    __int128 v83 = v35;
    LODWORD(v86) = v34;
    *(_DWORD *)uint64_t v89 = (_DWORD)v33;
    *(_WORD *)&v89[4] = v36;
    *(_WORD *)&v89[6] = v24;
    *(_WORD *)&v89[8] = v35;
    *(_WORD *)&v89[10] = v26;
    *(_WORD *)&v89[12] = v27;
    *(_WORD *)&v89[14] = v28;
    *(_WORD *)&v89[16] = v34;
    *(_WORD *)&v89[18] = v30;
    if (!_So9NSDecimala__exponent_getter(v89))
    {
      uint64_t v84 = v36;
      v37._countAndFlagsBits = 46LL;
      v37._object = (void *)0xE100000000000000LL;
      String.append(_:)(v37);
      LOWORD(v36) = v84;
    }

    *(_DWORD *)uint64_t v89 = (_DWORD)v33;
    *(_WORD *)&v89[4] = v36;
    *(_WORD *)&v89[6] = v24;
    *(_WORD *)&v89[8] = v83;
    *(_WORD *)&v89[10] = v26;
    *(_WORD *)&v89[12] = v27;
    *(_WORD *)&v89[14] = v28;
    *(_WORD *)&v89[16] = (_WORD)v86;
    *(_WORD *)&v89[18] = v30;
    __int128 v38 = _So9NSDecimala__exponent_getter(v89);
    _So9NSDecimala__exponent_setter((v38 + 1), v90);
    __int128 v39 = *(unsigned int *)v90;
    uint64_t v40 = *(unsigned __int16 *)&v90[4];
    uint64_t v19 = *(unsigned __int16 *)&v90[6];
    uint64_t v86 = (NSDecimal *)*(unsigned __int16 *)&v90[8];
    __int128 v83 = *(unsigned __int16 *)&v90[12];
    uint64_t v84 = *(unsigned __int16 *)&v90[10];
    uint64_t v81 = *(unsigned __int16 *)&v90[14];
    uint64_t v82 = *(unsigned __int16 *)&v90[16];
    uint64_t v80 = *(unsigned __int16 *)&v90[18];
    NSDecimal.asVariableLengthInteger()( *(unsigned int *)v90 | ((unint64_t)*(unsigned __int16 *)&v90[4] << 32) | ((unint64_t)*(unsigned __int16 *)&v90[6] << 48),  *(unsigned __int16 *)&v90[8] | ((unint64_t)*(unsigned __int16 *)&v90[10] << 16) | ((unint64_t)*(unsigned __int16 *)&v90[12] << 32) | ((unint64_t)*(unsigned __int16 *)&v90[14] << 48),  *(unsigned __int16 *)&v90[16] | (*(unsigned __int16 *)&v90[18] << 16));
    __int128 v42 = v41;
    __int128 v43 = *(void *)(v41 + 16);
    if (!v43)
    {
      LODWORD(v28) = 0;
      __int128 v21 = MEMORY[0x18961AFE8];
      id v47 = *(void *)(MEMORY[0x18961AFE8] + 16LL);
      if (!v47) {
        goto LABEL_26;
      }
LABEL_23:
      if (!*(_WORD *)(v21 + 2 * v47 + 30))
      {
        do
        {
          *(void *)(v21 + 16) = v47 - 1;
          if (v47 == 1) {
            break;
          }
        }

        while (!*(unsigned __int16 *)(v21 + 28 + 2 * v47--));
      }

      goto LABEL_26;
    }

    __int128 v78 = v40;
    __int128 v79 = v39;
    __int128 v21 = static Array._allocateBufferUninitialized(minimumCapacity:)();
    *(void *)(v21 + 16) = v43;
    __int128 v22 = (void *)(2 * v43);
    bzero((void *)(v21 + 32), 2 * v43);
    id v44 = *(unsigned __int16 *)(2 * v43 + v42 + 30);
    LOWORD(v45) = *(_WORD *)(2 * v43 + v42 + 30) / 0xAu;
    while (1)
    {
      *(_WORD *)(v21 + 30 + 2 * v43) = v45;
      LODWORD(v28) = v44 % 0xA;
      if (v43 == 1) {
        break;
      }
      id v44 = *(unsigned __int16 *)(v42 + 28 + 2 * v43) | ((_DWORD)v28 << 16);
      id v45 = v44 / 0xA;
      id v46 = v43 - 2;
      --v43;
      if (v46 >= *(void *)(v21 + 16))
      {
        __break(1u);
        goto LABEL_33;
      }
    }

    LOWORD(v40) = v78;
    LODWORD(v39) = v79;
    id v47 = *(void *)(v21 + 16);
    if (v47) {
      goto LABEL_23;
    }
LABEL_26:
    swift_bridgeObjectRelease();
    *(_DWORD *)uint64_t v89 = v39;
    *(_WORD *)&v89[4] = v40;
    *(_WORD *)&v89[6] = v19;
    *(_WORD *)&v89[8] = (_WORD)v86;
    *(_WORD *)&v89[10] = v84;
    *(_WORD *)&v89[12] = v83;
    *(_WORD *)&v89[14] = v81;
    *(_WORD *)&v89[16] = v82;
    *(_WORD *)&v89[18] = v80;
    NSDecimal.copyVariableLengthInteger(_:)((Swift::OpaquePointer)v21);
    uint64_t v85 = v49;
    if (v49) {
      break;
    }
    id v50 = *(void *)(v21 + 16);
    swift_bridgeObjectRelease();
    if (HIDWORD(v50)) {
      goto LABEL_46;
    }
    _So9NSDecimala__length_setter(v50, v89);
    *(_DWORD *)uint64_t v90 = *(_DWORD *)v89;
    *(_OWORD *)&v90[4] = *(_OWORD *)&v89[4];
    *(void *)uint64_t v89 = v28 | 0x30;
    v51._countAndFlagsBits = MEMORY[0x186E1B6AC](v89, 1LL);
    String.append(_:)(v51);
    swift_bridgeObjectRelease();
    uint64_t v86 = (NSDecimal *)*(unsigned int *)v90;
    uint64_t v84 = *(unsigned __int16 *)&v90[4];
    LOWORD(v24) = *(_WORD *)&v90[6];
    id v52 = *(unsigned __int16 *)&v90[8];
    LOWORD(v26) = *(_WORD *)&v90[10];
    LOWORD(v27) = *(_WORD *)&v90[12];
    LOWORD(v28) = *(_WORD *)&v90[14];
    id v53 = *(unsigned __int16 *)&v90[16];
    LOWORD(v30) = *(_WORD *)&v90[18];
    *(_DWORD *)uint64_t v89 = *(_DWORD *)v90;
    *(_WORD *)&v89[4] = *(_WORD *)&v90[4];
    *(_WORD *)&v89[6] = *(_WORD *)&v90[6];
    *(_WORD *)&v89[8] = *(_WORD *)&v90[8];
    *(_WORD *)&v89[10] = *(_WORD *)&v90[10];
    *(_WORD *)&v89[12] = *(_WORD *)&v90[12];
    *(_WORD *)&v89[14] = *(_WORD *)&v90[14];
    *(_WORD *)&v89[16] = *(_WORD *)&v90[16];
    *(_WORD *)&v89[18] = *(_WORD *)&v90[18];
    id v54 = _So9NSDecimala__length_getter(v89);
    uint64_t v34 = v53;
    __int128 v35 = v52;
    uint64_t v33 = v86;
    __int128 v36 = v84;
    if (!v54) {
      goto LABEL_37;
    }
  }

  swift_bridgeObjectRelease();
  swift_unexpectedError();
  __break(1u);
LABEL_46:
  char v77 = 0;
  uint64_t v76 = 3455LL;
  char v75 = 2;
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
LABEL_47:
  swift_release_n();
  char v72 = swift_willThrow();
  __break(1u);
LABEL_48:
  result._object = v73;
  result._countAndFlagsBits = v72;
  return result;
}

Swift::String __swiftcall NSDecimal.FormatStyle.Currency.format(_:)(NSDecimal *a1)
{
  unsigned int v4 = v2;
  uint64_t v5 = v1;
  uint64_t v7 = 0LL;
  uint64_t v71 = *MEMORY[0x1895F89C0];
  uint64_t v8 = specialized static ICUCurrencyNumberFormatter.create(for:)(v3);
  if (v8)
  {
    uint64_t v9 = *(void *)(v8 + 16);
    type metadata accessor for ICUNumberFormatterBase.FormatResult();
    swift_initStackObject();
    unint64_t v10 = v5;
    unsigned int v11 = v4;
    ICUNumberFormatterBase.FormatResult.init(formatter:value:)(v9, (uint64_t)a1, v5, v4);
LABEL_32:
    uint64_t v45 = swift_retain_n();
    MEMORY[0x1895F8858](v45);
    swift_retain();
    specialized closure #1 in _withResizingUCharBuffer(initialSize:_:)((uint64_t)v57, (uint64_t *)v70);
    if (v7) {
      goto LABEL_48;
    }
    uint64_t v44 = *(void *)v70;
    unint64_t v43 = *(void *)&v70[8];
    swift_release();
    swift_release_n();
    unsigned int v4 = v11;
    if (v43) {
      goto LABEL_45;
    }
  }

  else
  {
    unint64_t v10 = v5;
  }

  uint64_t v65 = 0LL;
  *(void *)uint64_t v70 = a1;
  unint64_t v12 = (unint64_t)a1 >> 32;
  unint64_t v13 = (unint64_t)a1 >> 48;
  unint64_t v14 = v10;
  unint64_t v15 = v10 >> 16;
  *(_WORD *)&v70[8] = v14;
  unint64_t v16 = HIDWORD(v14);
  *(_WORD *)&v70[10] = v15;
  unint64_t v17 = HIWORD(v14);
  *(_WORD *)&v70[12] = WORD2(v14);
  unsigned int v18 = HIWORD(v4);
  *(_WORD *)&v70[14] = HIWORD(v14);
  *(_DWORD *)&v70[16] = v4;
  if (!_So9NSDecimala__length_getter(v70))
  {
    *(void *)uint64_t v70 = a1;
    *(_WORD *)&v70[8] = v14;
    *(_WORD *)&v70[10] = v15;
    *(_WORD *)&v70[12] = WORD2(v14);
    *(_WORD *)&v70[14] = HIWORD(v14);
    *(_DWORD *)&v70[16] = v4;
    if (_So9NSDecimala__isNegative_getter(v70))
    {
      unint64_t v43 = 0xE300000000000000LL;
      uint64_t v44 = 5136718LL;
LABEL_45:
      uint64_t v54 = v44;
      uint64_t v55 = (void *)v43;
      goto LABEL_49;
    }
  }

  *(void *)uint64_t v70 = a1;
  *(_WORD *)&v70[8] = v14;
  *(_WORD *)&v70[10] = v15;
  *(_WORD *)&v70[12] = WORD2(v14);
  *(_WORD *)&v70[14] = HIWORD(v14);
  *(_DWORD *)&v70[16] = v4;
  if (!_So9NSDecimala__length_getter(v70))
  {
    unint64_t v43 = 0xE100000000000000LL;
    uint64_t v44 = 48LL;
    goto LABEL_45;
  }

  uint64_t v67 = 0LL;
  unint64_t v68 = 0xE000000000000000LL;
  *(void *)uint64_t v70 = a1;
  *(_WORD *)&v70[8] = v14;
  *(_WORD *)&v70[10] = v15;
  *(_WORD *)&v70[12] = WORD2(v14);
  *(_WORD *)&v70[14] = HIWORD(v14);
  *(_DWORD *)&v70[16] = v4;
  *(void *)id v69 = a1;
  *(_WORD *)&v69[8] = v14;
  *(_WORD *)&v69[10] = v15;
  *(_WORD *)&v69[12] = WORD2(v14);
  *(_WORD *)&v69[14] = HIWORD(v14);
  *(_DWORD *)&v69[16] = v4;
  if ((int)_So9NSDecimala__exponent_getter(v69) >= 1)
  {
    do
    {
      v19._countAndFlagsBits = 48LL;
      v19._object = (void *)0xE100000000000000LL;
      String.append(_:)(v19);
      *(_DWORD *)id v69 = (_DWORD)a1;
      *(_WORD *)&v69[4] = v12;
      *(_WORD *)&v69[6] = v13;
      *(_WORD *)&v69[8] = v14;
      *(_WORD *)&v69[10] = v15;
      *(_WORD *)&v69[12] = v16;
      *(_WORD *)&v69[14] = v17;
      *(_WORD *)&v69[16] = v4;
      *(_WORD *)&v69[18] = v18;
      int v20 = _So9NSDecimala__exponent_getter(v69);
      _So9NSDecimala__exponent_setter((v20 - 1), v70);
      LODWORD(a1) = *(_DWORD *)v70;
      LOWORD(v12) = *(_WORD *)&v70[4];
      LOWORD(v13) = *(_WORD *)&v70[6];
      unint64_t v14 = *(unsigned __int16 *)&v70[8];
      LOWORD(v15) = *(_WORD *)&v70[10];
      LOWORD(v16) = *(_WORD *)&v70[12];
      LOWORD(v17) = *(_WORD *)&v70[14];
      unsigned int v4 = *(unsigned __int16 *)&v70[16];
      LOWORD(v18) = *(_WORD *)&v70[18];
      *(void *)id v69 = *(void *)v70;
      *(void *)&v69[8] = *(void *)&v70[8];
      *(_WORD *)&v69[16] = *(_WORD *)&v70[16];
      *(_WORD *)&v69[18] = *(_WORD *)&v70[18];
    }

    while ((int)_So9NSDecimala__exponent_getter(v69) > 0);
  }

  *(_DWORD *)id v69 = (_DWORD)a1;
  *(_WORD *)&v69[4] = v12;
  *(_WORD *)&v69[6] = v13;
  *(_WORD *)&v69[8] = v14;
  *(_WORD *)&v69[10] = v15;
  *(_WORD *)&v69[12] = v16;
  *(_WORD *)&v69[14] = v17;
  *(_WORD *)&v69[16] = v4;
  *(_WORD *)&v69[18] = v18;
  if (!_So9NSDecimala__exponent_getter(v69))
  {
    _So9NSDecimala__exponent_setter(1LL, v70);
    LODWORD(a1) = *(_DWORD *)v70;
    LOWORD(v12) = *(_WORD *)&v70[4];
    LOWORD(v13) = *(_WORD *)&v70[6];
    unint64_t v14 = *(unsigned __int16 *)&v70[8];
    LOWORD(v15) = *(_WORD *)&v70[10];
    LOWORD(v16) = *(_WORD *)&v70[12];
    LOWORD(v17) = *(_WORD *)&v70[14];
    unsigned int v4 = *(unsigned __int16 *)&v70[16];
    LOWORD(v18) = *(_WORD *)&v70[18];
  }

  unsigned int v21 = v4;
  int v22 = (int)a1;
  *(_DWORD *)id v69 = (_DWORD)a1;
  *(_WORD *)&v69[4] = v12;
  *(_WORD *)&v69[6] = v13;
  unint64_t v66 = v14;
  *(_WORD *)&v69[8] = v14;
  *(_WORD *)&v69[10] = v15;
  *(_WORD *)&v69[12] = v16;
  *(_WORD *)&v69[14] = v17;
  unsigned int v23 = v21;
  *(_WORD *)&v69[16] = v21;
  *(_WORD *)&v69[18] = v18;
  if (!_So9NSDecimala__length_getter(v69))
  {
    LOWORD(v24) = v66;
LABEL_36:
    *(_DWORD *)id v69 = v22;
    *(_WORD *)&v69[4] = v12;
    *(_WORD *)&v69[6] = v13;
    *(_WORD *)&v69[8] = v24;
    *(_WORD *)&v69[10] = v15;
    *(_WORD *)&v69[12] = v16;
    *(_WORD *)&v69[14] = v17;
    *(_WORD *)&v69[16] = v23;
    *(_WORD *)&v69[18] = v18;
    __int16 v46 = v24;
    if ((int)_So9NSDecimala__exponent_getter(v69) <= 0)
    {
      *(_DWORD *)id v69 = v22;
      *(_WORD *)&v69[4] = v12;
      *(_WORD *)&v69[6] = v13;
      *(_WORD *)&v69[8] = v46;
      *(_WORD *)&v69[10] = v15;
      *(_WORD *)&v69[12] = v16;
      *(_WORD *)&v69[14] = v17;
      __int16 v47 = v23;
      for (*(_WORD *)&v69[16] = v23; ; *(_WORD *)&v69[16] = *(_WORD *)&v70[16])
      {
        *(_WORD *)&v69[18] = v18;
        v48._countAndFlagsBits = 48LL;
        v48._object = (void *)0xE100000000000000LL;
        String.append(_:)(v48);
        *(_DWORD *)id v69 = v22;
        *(_WORD *)&v69[4] = v12;
        *(_WORD *)&v69[6] = v13;
        *(_WORD *)&v69[8] = v46;
        *(_WORD *)&v69[10] = v15;
        *(_WORD *)&v69[12] = v16;
        *(_WORD *)&v69[14] = v17;
        *(_WORD *)&v69[16] = v47;
        *(_WORD *)&v69[18] = v18;
        int v49 = _So9NSDecimala__exponent_getter(v69);
        _So9NSDecimala__exponent_setter((v49 + 1), v70);
        int v22 = *(_DWORD *)v70;
        LOWORD(v12) = *(_WORD *)&v70[4];
        LOWORD(v13) = *(_WORD *)&v70[6];
        __int16 v46 = *(_WORD *)&v70[8];
        LOWORD(v15) = *(_WORD *)&v70[10];
        LOWORD(v16) = *(_WORD *)&v70[12];
        LOWORD(v17) = *(_WORD *)&v70[14];
        __int16 v47 = *(_WORD *)&v70[16];
        LOWORD(v18) = *(_WORD *)&v70[18];
        *(void *)id v69 = *(void *)v70;
        *(void *)&v69[8] = *(void *)&v70[8];
      }

      v50._countAndFlagsBits = 46LL;
      v50._object = (void *)0xE100000000000000LL;
      String.append(_:)(v50);
      v51._countAndFlagsBits = 48LL;
      v51._object = (void *)0xE100000000000000LL;
      String.append(_:)(v51);
    }

    else
    {
      __int16 v47 = v23;
    }

    *(_DWORD *)id v69 = v22;
    *(_WORD *)&v69[4] = v12;
    *(_WORD *)&v69[6] = v13;
    *(_WORD *)&v69[8] = v46;
    *(_WORD *)&v69[10] = v15;
    *(_WORD *)&v69[12] = v16;
    *(_WORD *)&v69[14] = v17;
    *(_WORD *)&v69[16] = v47;
    *(_WORD *)&v69[18] = v18;
    if (_So9NSDecimala__isNegative_getter(v69))
    {
      v52._countAndFlagsBits = 45LL;
      v52._object = (void *)0xE100000000000000LL;
      String.append(_:)(v52);
    }

    *(void *)id v69 = v67;
    *(void *)&v69[8] = v68;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ReversedCollection<String>);
    lazy protocol witness table accessor for type [String] and conformance [A]( (unint64_t *)&lazy protocol witness table cache variable for type ReversedCollection<String> and conformance ReversedCollection<A>,  &demangling cache variable for type metadata for ReversedCollection<String>,  MEMORY[0x189619928]);
    uint64_t v44 = String.init<A>(_:)();
    unint64_t v43 = v53;
    goto LABEL_45;
  }

  a1 = (NSDecimal *)3435973837LL;
  uint64_t v24 = v66;
  while (1)
  {
    unint64_t v66 = v24;
    *(_DWORD *)id v69 = v22;
    *(_WORD *)&v69[4] = v12;
    *(_WORD *)&v69[6] = v13;
    *(_WORD *)&v69[8] = v24;
    *(_WORD *)&v69[10] = v15;
    *(_WORD *)&v69[12] = v16;
    *(_WORD *)&v69[14] = v17;
    *(_WORD *)&v69[16] = v23;
    *(_WORD *)&v69[18] = v18;
    if (!_So9NSDecimala__exponent_getter(v69))
    {
      LODWORD(v64) = v23;
      v25._countAndFlagsBits = 46LL;
      v25._object = (void *)0xE100000000000000LL;
      String.append(_:)(v25);
      LOWORD(v23) = v64;
    }

    *(_DWORD *)id v69 = v22;
    *(_WORD *)&v69[4] = v12;
    *(_WORD *)&v69[6] = v13;
    *(_WORD *)&v69[8] = v66;
    *(_WORD *)&v69[10] = v15;
    *(_WORD *)&v69[12] = v16;
    *(_WORD *)&v69[14] = v17;
    *(_WORD *)&v69[16] = v23;
    *(_WORD *)&v69[18] = v18;
    int v26 = _So9NSDecimala__exponent_getter(v69);
    _So9NSDecimala__exponent_setter((v26 + 1), v70);
    uint64_t v27 = *(unsigned int *)v70;
    uint64_t v7 = *(unsigned __int16 *)&v70[6];
    unsigned int v11 = *(unsigned __int16 *)&v70[14];
    unint64_t v66 = *(unsigned __int16 *)&v70[4];
    uint64_t v63 = *(unsigned __int16 *)&v70[10];
    uint64_t v64 = *(unsigned __int16 *)&v70[8];
    uint64_t v62 = *(unsigned __int16 *)&v70[12];
    __int16 v28 = *(_WORD *)&v70[18];
    int v61 = *(unsigned __int16 *)&v70[16];
    NSDecimal.asVariableLengthInteger()( *(unsigned int *)v70 | ((unint64_t)*(unsigned __int16 *)&v70[4] << 32) | ((unint64_t)*(unsigned __int16 *)&v70[6] << 48),  *(unsigned __int16 *)&v70[8] | ((unint64_t)*(unsigned __int16 *)&v70[10] << 16) | ((unint64_t)*(unsigned __int16 *)&v70[12] << 32) | ((unint64_t)*(unsigned __int16 *)&v70[14] << 48),  *(unsigned __int16 *)&v70[16] | (*(unsigned __int16 *)&v70[18] << 16));
    uint64_t v30 = v29;
    uint64_t v31 = *(void *)(v29 + 16);
    if (!v31)
    {
      LODWORD(v17) = 0;
      uint64_t v32 = MEMORY[0x18961AFE8];
      uint64_t v36 = *(void *)(MEMORY[0x18961AFE8] + 16LL);
      if (!v36) {
        goto LABEL_25;
      }
LABEL_22:
      if (!*(_WORD *)(v32 + 2 * v36 + 30))
      {
        do
        {
          *(void *)(v32 + 16) = v36 - 1;
          if (v36 == 1) {
            break;
          }
        }

        while (!*(unsigned __int16 *)(v32 + 28 + 2 * v36--));
      }

      goto LABEL_25;
    }

    uint64_t v60 = v27;
    uint64_t v32 = static Array._allocateBufferUninitialized(minimumCapacity:)();
    unint64_t v10 = v32 + 30;
    *(void *)(v32 + 16) = v31;
    bzero((void *)(v32 + 32), 2 * v31);
    unsigned int v33 = *(unsigned __int16 *)(2 * v31 + v30 + 30);
    unsigned int v34 = v33 / 0xA;
    while (1)
    {
      *(_WORD *)(v10 + 2 * v31) = v34;
      LODWORD(v17) = v33 % 0xA;
      if (v31 == 1) {
        break;
      }
      unsigned int v33 = *(unsigned __int16 *)(v30 + 28 + 2 * v31) | ((_DWORD)v17 << 16);
      unsigned int v34 = v33 / 0xA;
      unint64_t v35 = v31 - 2;
      --v31;
      if (v35 >= *(void *)(v32 + 16))
      {
        __break(1u);
        goto LABEL_32;
      }
    }

    LODWORD(v27) = v60;
    uint64_t v36 = *(void *)(v32 + 16);
    if (v36) {
      goto LABEL_22;
    }
LABEL_25:
    swift_bridgeObjectRelease();
    *(_DWORD *)id v69 = v27;
    *(_WORD *)&v69[4] = v66;
    *(_WORD *)&v69[6] = v7;
    *(_WORD *)&v69[8] = v64;
    *(_WORD *)&v69[10] = v63;
    *(_WORD *)&v69[12] = v62;
    *(_WORD *)&v69[14] = v11;
    *(_WORD *)&v69[16] = v61;
    *(_WORD *)&v69[18] = v28;
    NSDecimal.copyVariableLengthInteger(_:)((Swift::OpaquePointer)v32);
    if (v38) {
      break;
    }
    uint64_t v65 = 0LL;
    unint64_t v39 = *(void *)(v32 + 16);
    swift_bridgeObjectRelease();
    if (HIDWORD(v39)) {
      goto LABEL_47;
    }
    _So9NSDecimala__length_setter(v39, v69);
    *(_DWORD *)uint64_t v70 = *(_DWORD *)v69;
    *(_OWORD *)&v70[4] = *(_OWORD *)&v69[4];
    *(void *)id v69 = v17 | 0x30;
    v40._countAndFlagsBits = MEMORY[0x186E1B6AC](v69, 1LL);
    String.append(_:)(v40);
    swift_bridgeObjectRelease();
    unint64_t v66 = *(unsigned int *)v70;
    LOWORD(v12) = *(_WORD *)&v70[4];
    LOWORD(v13) = *(_WORD *)&v70[6];
    uint64_t v41 = *(unsigned __int16 *)&v70[8];
    LOWORD(v15) = *(_WORD *)&v70[10];
    LOWORD(v16) = *(_WORD *)&v70[12];
    LOWORD(v17) = *(_WORD *)&v70[14];
    unsigned int v23 = *(unsigned __int16 *)&v70[16];
    LOWORD(v18) = *(_WORD *)&v70[18];
    *(void *)id v69 = *(void *)v70;
    *(void *)&v69[8] = *(void *)&v70[8];
    *(_WORD *)&v69[16] = *(_WORD *)&v70[16];
    *(_WORD *)&v69[18] = *(_WORD *)&v70[18];
    int v42 = _So9NSDecimala__length_getter(v69);
    uint64_t v24 = v41;
    int v22 = v66;
    if (!v42) {
      goto LABEL_36;
    }
  }

  swift_bridgeObjectRelease();
  swift_unexpectedError();
  __break(1u);
LABEL_47:
  int v59 = 0;
  uint64_t v58 = 3455LL;
  v57[32] = 2;
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
LABEL_48:
  swift_release_n();
  uint64_t v54 = swift_willThrow();
  __break(1u);
LABEL_49:
  result._object = v55;
  result._countAndFlagsBits = v54;
  return result;
}

Swift::String __swiftcall NSDecimal.FormatStyle.Percent.format(_:)(NSDecimal *a1)
{
  unsigned int v4 = v2;
  uint64_t v5 = v1;
  uint64_t v7 = 0LL;
  uint64_t v71 = *MEMORY[0x1895F89C0];
  type metadata accessor for ICUPercentNumberFormatter();
  uint64_t v8 = static ICUPercentNumberFormatter.create(for:)(v3);
  if (v8)
  {
    uint64_t v9 = *(void *)(v8 + 16);
    type metadata accessor for ICUNumberFormatterBase.FormatResult();
    swift_initStackObject();
    unint64_t v10 = v5;
    unsigned int v11 = v4;
    ICUNumberFormatterBase.FormatResult.init(formatter:value:)(v9, (uint64_t)a1, v5, v4);
LABEL_32:
    uint64_t v45 = swift_retain_n();
    MEMORY[0x1895F8858](v45);
    swift_retain();
    specialized closure #1 in _withResizingUCharBuffer(initialSize:_:)((uint64_t)v57, (uint64_t *)v70);
    if (v7) {
      goto LABEL_48;
    }
    uint64_t v44 = *(void *)v70;
    unint64_t v43 = *(void *)&v70[8];
    swift_release();
    swift_release_n();
    unsigned int v4 = v11;
    if (v43) {
      goto LABEL_45;
    }
  }

  else
  {
    unint64_t v10 = v5;
  }

  uint64_t v65 = 0LL;
  *(void *)uint64_t v70 = a1;
  unint64_t v12 = (unint64_t)a1 >> 32;
  unint64_t v13 = (unint64_t)a1 >> 48;
  unint64_t v14 = v10;
  unint64_t v15 = v10 >> 16;
  *(_WORD *)&v70[8] = v14;
  unint64_t v16 = HIDWORD(v14);
  *(_WORD *)&v70[10] = v15;
  unint64_t v17 = HIWORD(v14);
  *(_WORD *)&v70[12] = WORD2(v14);
  unsigned int v18 = HIWORD(v4);
  *(_WORD *)&v70[14] = HIWORD(v14);
  *(_DWORD *)&v70[16] = v4;
  if (!_So9NSDecimala__length_getter(v70))
  {
    *(void *)uint64_t v70 = a1;
    *(_WORD *)&v70[8] = v14;
    *(_WORD *)&v70[10] = v15;
    *(_WORD *)&v70[12] = WORD2(v14);
    *(_WORD *)&v70[14] = HIWORD(v14);
    *(_DWORD *)&v70[16] = v4;
    if (_So9NSDecimala__isNegative_getter(v70))
    {
      unint64_t v43 = 0xE300000000000000LL;
      uint64_t v44 = 5136718LL;
LABEL_45:
      uint64_t v54 = v44;
      uint64_t v55 = (void *)v43;
      goto LABEL_49;
    }
  }

  *(void *)uint64_t v70 = a1;
  *(_WORD *)&v70[8] = v14;
  *(_WORD *)&v70[10] = v15;
  *(_WORD *)&v70[12] = WORD2(v14);
  *(_WORD *)&v70[14] = HIWORD(v14);
  *(_DWORD *)&v70[16] = v4;
  if (!_So9NSDecimala__length_getter(v70))
  {
    unint64_t v43 = 0xE100000000000000LL;
    uint64_t v44 = 48LL;
    goto LABEL_45;
  }

  uint64_t v67 = 0LL;
  unint64_t v68 = 0xE000000000000000LL;
  *(void *)uint64_t v70 = a1;
  *(_WORD *)&v70[8] = v14;
  *(_WORD *)&v70[10] = v15;
  *(_WORD *)&v70[12] = WORD2(v14);
  *(_WORD *)&v70[14] = HIWORD(v14);
  *(_DWORD *)&v70[16] = v4;
  *(void *)id v69 = a1;
  *(_WORD *)&v69[8] = v14;
  *(_WORD *)&v69[10] = v15;
  *(_WORD *)&v69[12] = WORD2(v14);
  *(_WORD *)&v69[14] = HIWORD(v14);
  *(_DWORD *)&v69[16] = v4;
  if ((int)_So9NSDecimala__exponent_getter(v69) >= 1)
  {
    do
    {
      v19._countAndFlagsBits = 48LL;
      v19._object = (void *)0xE100000000000000LL;
      String.append(_:)(v19);
      *(_DWORD *)id v69 = (_DWORD)a1;
      *(_WORD *)&v69[4] = v12;
      *(_WORD *)&v69[6] = v13;
      *(_WORD *)&v69[8] = v14;
      *(_WORD *)&v69[10] = v15;
      *(_WORD *)&v69[12] = v16;
      *(_WORD *)&v69[14] = v17;
      *(_WORD *)&v69[16] = v4;
      *(_WORD *)&v69[18] = v18;
      int v20 = _So9NSDecimala__exponent_getter(v69);
      _So9NSDecimala__exponent_setter((v20 - 1), v70);
      LODWORD(a1) = *(_DWORD *)v70;
      LOWORD(v12) = *(_WORD *)&v70[4];
      LOWORD(v13) = *(_WORD *)&v70[6];
      unint64_t v14 = *(unsigned __int16 *)&v70[8];
      LOWORD(v15) = *(_WORD *)&v70[10];
      LOWORD(v16) = *(_WORD *)&v70[12];
      LOWORD(v17) = *(_WORD *)&v70[14];
      unsigned int v4 = *(unsigned __int16 *)&v70[16];
      LOWORD(v18) = *(_WORD *)&v70[18];
      *(void *)id v69 = *(void *)v70;
      *(void *)&v69[8] = *(void *)&v70[8];
      *(_WORD *)&v69[16] = *(_WORD *)&v70[16];
      *(_WORD *)&v69[18] = *(_WORD *)&v70[18];
    }

    while ((int)_So9NSDecimala__exponent_getter(v69) > 0);
  }

  *(_DWORD *)id v69 = (_DWORD)a1;
  *(_WORD *)&v69[4] = v12;
  *(_WORD *)&v69[6] = v13;
  *(_WORD *)&v69[8] = v14;
  *(_WORD *)&v69[10] = v15;
  *(_WORD *)&v69[12] = v16;
  *(_WORD *)&v69[14] = v17;
  *(_WORD *)&v69[16] = v4;
  *(_WORD *)&v69[18] = v18;
  if (!_So9NSDecimala__exponent_getter(v69))
  {
    _So9NSDecimala__exponent_setter(1LL, v70);
    LODWORD(a1) = *(_DWORD *)v70;
    LOWORD(v12) = *(_WORD *)&v70[4];
    LOWORD(v13) = *(_WORD *)&v70[6];
    unint64_t v14 = *(unsigned __int16 *)&v70[8];
    LOWORD(v15) = *(_WORD *)&v70[10];
    LOWORD(v16) = *(_WORD *)&v70[12];
    LOWORD(v17) = *(_WORD *)&v70[14];
    unsigned int v4 = *(unsigned __int16 *)&v70[16];
    LOWORD(v18) = *(_WORD *)&v70[18];
  }

  unsigned int v21 = v4;
  int v22 = (int)a1;
  *(_DWORD *)id v69 = (_DWORD)a1;
  *(_WORD *)&v69[4] = v12;
  *(_WORD *)&v69[6] = v13;
  unint64_t v66 = v14;
  *(_WORD *)&v69[8] = v14;
  *(_WORD *)&v69[10] = v15;
  *(_WORD *)&v69[12] = v16;
  *(_WORD *)&v69[14] = v17;
  unsigned int v23 = v21;
  *(_WORD *)&v69[16] = v21;
  *(_WORD *)&v69[18] = v18;
  if (!_So9NSDecimala__length_getter(v69))
  {
    LOWORD(v24) = v66;
LABEL_36:
    *(_DWORD *)id v69 = v22;
    *(_WORD *)&v69[4] = v12;
    *(_WORD *)&v69[6] = v13;
    *(_WORD *)&v69[8] = v24;
    *(_WORD *)&v69[10] = v15;
    *(_WORD *)&v69[12] = v16;
    *(_WORD *)&v69[14] = v17;
    *(_WORD *)&v69[16] = v23;
    *(_WORD *)&v69[18] = v18;
    __int16 v46 = v24;
    if ((int)_So9NSDecimala__exponent_getter(v69) <= 0)
    {
      *(_DWORD *)id v69 = v22;
      *(_WORD *)&v69[4] = v12;
      *(_WORD *)&v69[6] = v13;
      *(_WORD *)&v69[8] = v46;
      *(_WORD *)&v69[10] = v15;
      *(_WORD *)&v69[12] = v16;
      *(_WORD *)&v69[14] = v17;
      __int16 v47 = v23;
      for (*(_WORD *)&v69[16] = v23; ; *(_WORD *)&v69[16] = *(_WORD *)&v70[16])
      {
        *(_WORD *)&v69[18] = v18;
        v48._countAndFlagsBits = 48LL;
        v48._object = (void *)0xE100000000000000LL;
        String.append(_:)(v48);
        *(_DWORD *)id v69 = v22;
        *(_WORD *)&v69[4] = v12;
        *(_WORD *)&v69[6] = v13;
        *(_WORD *)&v69[8] = v46;
        *(_WORD *)&v69[10] = v15;
        *(_WORD *)&v69[12] = v16;
        *(_WORD *)&v69[14] = v17;
        *(_WORD *)&v69[16] = v47;
        *(_WORD *)&v69[18] = v18;
        int v49 = _So9NSDecimala__exponent_getter(v69);
        _So9NSDecimala__exponent_setter((v49 + 1), v70);
        int v22 = *(_DWORD *)v70;
        LOWORD(v12) = *(_WORD *)&v70[4];
        LOWORD(v13) = *(_WORD *)&v70[6];
        __int16 v46 = *(_WORD *)&v70[8];
        LOWORD(v15) = *(_WORD *)&v70[10];
        LOWORD(v16) = *(_WORD *)&v70[12];
        LOWORD(v17) = *(_WORD *)&v70[14];
        __int16 v47 = *(_WORD *)&v70[16];
        LOWORD(v18) = *(_WORD *)&v70[18];
        *(void *)id v69 = *(void *)v70;
        *(void *)&v69[8] = *(void *)&v70[8];
      }

      v50._countAndFlagsBits = 46LL;
      v50._object = (void *)0xE100000000000000LL;
      String.append(_:)(v50);
      v51._countAndFlagsBits = 48LL;
      v51._object = (void *)0xE100000000000000LL;
      String.append(_:)(v51);
    }

    else
    {
      __int16 v47 = v23;
    }

    *(_DWORD *)id v69 = v22;
    *(_WORD *)&v69[4] = v12;
    *(_WORD *)&v69[6] = v13;
    *(_WORD *)&v69[8] = v46;
    *(_WORD *)&v69[10] = v15;
    *(_WORD *)&v69[12] = v16;
    *(_WORD *)&v69[14] = v17;
    *(_WORD *)&v69[16] = v47;
    *(_WORD *)&v69[18] = v18;
    if (_So9NSDecimala__isNegative_getter(v69))
    {
      v52._countAndFlagsBits = 45LL;
      v52._object = (void *)0xE100000000000000LL;
      String.append(_:)(v52);
    }

    *(void *)id v69 = v67;
    *(void *)&v69[8] = v68;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ReversedCollection<String>);
    lazy protocol witness table accessor for type [String] and conformance [A]( (unint64_t *)&lazy protocol witness table cache variable for type ReversedCollection<String> and conformance ReversedCollection<A>,  &demangling cache variable for type metadata for ReversedCollection<String>,  MEMORY[0x189619928]);
    uint64_t v44 = String.init<A>(_:)();
    unint64_t v43 = v53;
    goto LABEL_45;
  }

  a1 = (NSDecimal *)3435973837LL;
  uint64_t v24 = v66;
  while (1)
  {
    unint64_t v66 = v24;
    *(_DWORD *)id v69 = v22;
    *(_WORD *)&v69[4] = v12;
    *(_WORD *)&v69[6] = v13;
    *(_WORD *)&v69[8] = v24;
    *(_WORD *)&v69[10] = v15;
    *(_WORD *)&v69[12] = v16;
    *(_WORD *)&v69[14] = v17;
    *(_WORD *)&v69[16] = v23;
    *(_WORD *)&v69[18] = v18;
    if (!_So9NSDecimala__exponent_getter(v69))
    {
      LODWORD(v64) = v23;
      v25._countAndFlagsBits = 46LL;
      v25._object = (void *)0xE100000000000000LL;
      String.append(_:)(v25);
      LOWORD(v23) = v64;
    }

    *(_DWORD *)id v69 = v22;
    *(_WORD *)&v69[4] = v12;
    *(_WORD *)&v69[6] = v13;
    *(_WORD *)&v69[8] = v66;
    *(_WORD *)&v69[10] = v15;
    *(_WORD *)&v69[12] = v16;
    *(_WORD *)&v69[14] = v17;
    *(_WORD *)&v69[16] = v23;
    *(_WORD *)&v69[18] = v18;
    int v26 = _So9NSDecimala__exponent_getter(v69);
    _So9NSDecimala__exponent_setter((v26 + 1), v70);
    uint64_t v27 = *(unsigned int *)v70;
    uint64_t v7 = *(unsigned __int16 *)&v70[6];
    unsigned int v11 = *(unsigned __int16 *)&v70[14];
    unint64_t v66 = *(unsigned __int16 *)&v70[4];
    uint64_t v63 = *(unsigned __int16 *)&v70[10];
    uint64_t v64 = *(unsigned __int16 *)&v70[8];
    uint64_t v62 = *(unsigned __int16 *)&v70[12];
    __int16 v28 = *(_WORD *)&v70[18];
    int v61 = *(unsigned __int16 *)&v70[16];
    NSDecimal.asVariableLengthInteger()( *(unsigned int *)v70 | ((unint64_t)*(unsigned __int16 *)&v70[4] << 32) | ((unint64_t)*(unsigned __int16 *)&v70[6] << 48),  *(unsigned __int16 *)&v70[8] | ((unint64_t)*(unsigned __int16 *)&v70[10] << 16) | ((unint64_t)*(unsigned __int16 *)&v70[12] << 32) | ((unint64_t)*(unsigned __int16 *)&v70[14] << 48),  *(unsigned __int16 *)&v70[16] | (*(unsigned __int16 *)&v70[18] << 16));
    uint64_t v30 = v29;
    uint64_t v31 = *(void *)(v29 + 16);
    if (!v31)
    {
      LODWORD(v17) = 0;
      uint64_t v32 = MEMORY[0x18961AFE8];
      uint64_t v36 = *(void *)(MEMORY[0x18961AFE8] + 16LL);
      if (!v36) {
        goto LABEL_25;
      }
LABEL_22:
      if (!*(_WORD *)(v32 + 2 * v36 + 30))
      {
        do
        {
          *(void *)(v32 + 16) = v36 - 1;
          if (v36 == 1) {
            break;
          }
        }

        while (!*(unsigned __int16 *)(v32 + 28 + 2 * v36--));
      }

      goto LABEL_25;
    }

    uint64_t v60 = v27;
    uint64_t v32 = static Array._allocateBufferUninitialized(minimumCapacity:)();
    unint64_t v10 = v32 + 30;
    *(void *)(v32 + 16) = v31;
    bzero((void *)(v32 + 32), 2 * v31);
    unsigned int v33 = *(unsigned __int16 *)(2 * v31 + v30 + 30);
    unsigned int v34 = v33 / 0xA;
    while (1)
    {
      *(_WORD *)(v10 + 2 * v31) = v34;
      LODWORD(v17) = v33 % 0xA;
      if (v31 == 1) {
        break;
      }
      unsigned int v33 = *(unsigned __int16 *)(v30 + 28 + 2 * v31) | ((_DWORD)v17 << 16);
      unsigned int v34 = v33 / 0xA;
      unint64_t v35 = v31 - 2;
      --v31;
      if (v35 >= *(void *)(v32 + 16))
      {
        __break(1u);
        goto LABEL_32;
      }
    }

    LODWORD(v27) = v60;
    uint64_t v36 = *(void *)(v32 + 16);
    if (v36) {
      goto LABEL_22;
    }
LABEL_25:
    swift_bridgeObjectRelease();
    *(_DWORD *)id v69 = v27;
    *(_WORD *)&v69[4] = v66;
    *(_WORD *)&v69[6] = v7;
    *(_WORD *)&v69[8] = v64;
    *(_WORD *)&v69[10] = v63;
    *(_WORD *)&v69[12] = v62;
    *(_WORD *)&v69[14] = v11;
    *(_WORD *)&v69[16] = v61;
    *(_WORD *)&v69[18] = v28;
    NSDecimal.copyVariableLengthInteger(_:)((Swift::OpaquePointer)v32);
    if (v38) {
      break;
    }
    uint64_t v65 = 0LL;
    unint64_t v39 = *(void *)(v32 + 16);
    swift_bridgeObjectRelease();
    if (HIDWORD(v39)) {
      goto LABEL_47;
    }
    _So9NSDecimala__length_setter(v39, v69);
    *(_DWORD *)uint64_t v70 = *(_DWORD *)v69;
    *(_OWORD *)&v70[4] = *(_OWORD *)&v69[4];
    *(void *)id v69 = v17 | 0x30;
    v40._countAndFlagsBits = MEMORY[0x186E1B6AC](v69, 1LL);
    String.append(_:)(v40);
    swift_bridgeObjectRelease();
    unint64_t v66 = *(unsigned int *)v70;
    LOWORD(v12) = *(_WORD *)&v70[4];
    LOWORD(v13) = *(_WORD *)&v70[6];
    uint64_t v41 = *(unsigned __int16 *)&v70[8];
    LOWORD(v15) = *(_WORD *)&v70[10];
    LOWORD(v16) = *(_WORD *)&v70[12];
    LOWORD(v17) = *(_WORD *)&v70[14];
    unsigned int v23 = *(unsigned __int16 *)&v70[16];
    LOWORD(v18) = *(_WORD *)&v70[18];
    *(void *)id v69 = *(void *)v70;
    *(void *)&v69[8] = *(void *)&v70[8];
    *(_WORD *)&v69[16] = *(_WORD *)&v70[16];
    *(_WORD *)&v69[18] = *(_WORD *)&v70[18];
    int v42 = _So9NSDecimala__length_getter(v69);
    uint64_t v24 = v41;
    int v22 = v66;
    if (!v42) {
      goto LABEL_36;
    }
  }

  swift_bridgeObjectRelease();
  swift_unexpectedError();
  __break(1u);
LABEL_47:
  int v59 = 0;
  uint64_t v58 = 3455LL;
  v57[32] = 2;
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
LABEL_48:
  swift_release_n();
  uint64_t v54 = swift_willThrow();
  __break(1u);
LABEL_49:
  result._object = v55;
  result._countAndFlagsBits = v54;
  return result;
}

double NSDecimal.FormatStyle.locale(_:)@<D0>(__n128 *a1@<X0>, __n128 *a2@<X8>)
{
  *(void *)&double result = NSDecimal.FormatStyle.locale(_:)(a1, type metadata accessor for NSDecimal.FormatStyle, a2).n128_u64[0];
  return result;
}

double NSDecimal.FormatStyle.Currency.locale(_:)@<D0>(__n128 *a1@<X0>, __n128 *a2@<X8>)
{
  *(void *)&double result = NSDecimal.FormatStyle.locale(_:)( a1,  type metadata accessor for NSDecimal.FormatStyle.Currency,  a2).n128_u64[0];
  return result;
}

double NSDecimal.FormatStyle.Percent.locale(_:)@<D0>(__n128 *a1@<X0>, __n128 *a2@<X8>)
{
  *(void *)&double result = NSDecimal.FormatStyle.locale(_:)( a1,  type metadata accessor for NSDecimal.FormatStyle.Percent,  a2).n128_u64[0];
  return result;
}

__n128 NSDecimal.FormatStyle.locale(_:)@<Q0>( __n128 *a1@<X0>, uint64_t (*a2)(void)@<X1>, __n128 *a3@<X8>)
{
  __n128 v7 = *a1;
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  __n128 result = v7;
  *a3 = v7;
  return result;
}

uint64_t NSDecimal.FormatStyle.locale.getter@<X0>(_OWORD *a1@<X8>)
{
  *a1 = *v1;
  return swift_unknownObjectRetain();
}

__n128 NSDecimal.FormatStyle.locale.setter(__n128 *a1)
{
  __n128 result = *a1;
  *uint64_t v1 = *a1;
  return result;
}

uint64_t (*NSDecimal.FormatStyle.locale.modify())()
{
  return destructiveProjectEnumData for PredicateCodableError;
}

__n128 NSDecimal.FormatStyle.init(locale:)@<Q0>(__n128 *a1@<X0>, __n128 *a2@<X8>)
{
  unsigned int v4 = (char *)a2 + *(int *)(type metadata accessor for NSDecimal.FormatStyle(0LL) + 20);
  *(void *)unsigned int v4 = 0LL;
  v4[8] = 1;
  *((void *)v4 + 2) = 0LL;
  *((void *)v4 + 3) = 0LL;
  *((void *)v4 + 4) = 0LL;
  *((void *)v4 + 5) = 0x1FFFFFFFELL;
  *((void *)v4 + 7) = 0LL;
  *((void *)v4 + 8) = 0LL;
  *((void *)v4 + 6) = 0LL;
  *((_DWORD *)v4 + 18) = 131584;
  *((_WORD *)v4 + 38) = 512;
  uint64_t v5 = (int *)type metadata accessor for NumberFormatStyleConfiguration.Collection(0LL);
  uint64_t v6 = &v4[v5[9]];
  uint64_t v7 = type metadata accessor for FloatingPointRoundingRule();
  __n128 v10 = *a1;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56LL))(v6, 1LL, 1LL, v7);
  uint64_t v8 = &v4[v5[10]];
  *(void *)uint64_t v8 = 0LL;
  v8[8] = -1;
  v4[v5[11]] = 3;
  __n128 result = v10;
  *a2 = v10;
  return result;
}

uint64_t NSDecimal.FormatStyle.attributed.getter@<X0>(uint64_t a1@<X8>)
{
  return NSDecimal.FormatStyle.attributed.getter(type metadata accessor for NSDecimal.FormatStyle, a1);
}

uint64_t NSDecimal.FormatStyle.grouping(_:)@<X0>(char *a1@<X0>, uint64_t a2@<X8>)
{
  return NSDecimal.FormatStyle.grouping(_:)(a1, type metadata accessor for NSDecimal.FormatStyle, a2);
}

double NSDecimal.FormatStyle.precision(_:)@<D0>(__int128 *a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)&double result = NSDecimal.FormatStyle.precision(_:)(a1, type metadata accessor for NSDecimal.FormatStyle, a2).n128_u64[0];
  return result;
}

uint64_t NSDecimal.FormatStyle.sign(strategy:)@<X0>(unsigned __int8 *a1@<X0>, uint64_t a2@<X8>)
{
  return NSDecimal.FormatStyle.sign(strategy:)(a1, type metadata accessor for NSDecimal.FormatStyle, a2);
}

uint64_t NSDecimal.FormatStyle.decimalSeparator(strategy:)@<X0>(char *a1@<X0>, uint64_t a2@<X8>)
{
  return NSDecimal.FormatStyle.decimalSeparator(strategy:)(a1, type metadata accessor for NSDecimal.FormatStyle, a2);
}

uint64_t NSDecimal.FormatStyle.rounded(rule:increment:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X8>)
{
  return NSDecimal.FormatStyle.rounded(rule:increment:)( a1,  a2,  a3,  type metadata accessor for NSDecimal.FormatStyle,  a4);
}

uint64_t NSDecimal.FormatStyle.scale(_:)@<X0>(uint64_t a1@<X8>, double a2@<D0>)
{
  return NSDecimal.FormatStyle.scale(_:)(type metadata accessor for NSDecimal.FormatStyle, a1, a2);
}

uint64_t NSDecimal.FormatStyle.notation(_:)@<X0>(char *a1@<X0>, uint64_t a2@<X8>)
{
  return NSDecimal.FormatStyle.notation(_:)(a1, type metadata accessor for NSDecimal.FormatStyle, a2);
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance NSDecimal.FormatStyle.CodingKeys()
{
  if (*v0) {
    return 0x697463656C6C6F63LL;
  }
  else {
    return 0x656C61636F6CLL;
  }
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance NSDecimal.FormatStyle.CodingKeys@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result = specialized NSDecimal.FormatStyle.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance NSDecimal.FormatStyle.CodingKeys()
{
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance NSDecimal.FormatStyle.CodingKeys()
{
  return CodingKey.debugDescription.getter();
}

void NSDecimal.FormatStyle.hash(into:)(uint64_t a1)
{
}

void static NSDecimal.FormatStyle.== infix(_:_:)(__int128 *a1, __int128 *a2)
{
  static NSDecimal.FormatStyle.== infix(_:_:)(a1, a2, type metadata accessor for NSDecimal.FormatStyle);
}

uint64_t NSDecimal.FormatStyle.encode(to:)(void *a1)
{
  return NSDecimal.FormatStyle.encode(to:)( a1,  &demangling cache variable for type metadata for KeyedEncodingContainer<NSDecimal.FormatStyle.CodingKeys>,  (void (*)(void))lazy protocol witness table accessor for type NSDecimal.FormatStyle.CodingKeys and conformance NSDecimal.FormatStyle.CodingKeys,  (uint64_t)&unk_189C7D958,  (void (*)(void))type metadata accessor for NSDecimal.FormatStyle);
}

Swift::Int NSDecimal.FormatStyle.hashValue.getter()
{
  return NSDecimal.FormatStyle.hashValue.getter((void (*)(_BYTE *))NSDecimal.FormatStyle.hash(into:));
}

uint64_t NSDecimal.FormatStyle.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v23 = a2;
  uint64_t v3 = (int *)type metadata accessor for NumberFormatStyleConfiguration.Collection(0LL);
  MEMORY[0x1895F8858](v3);
  uint64_t v24 = (char *)&v23 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v25 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<NSDecimal.FormatStyle.CodingKeys>);
  uint64_t v5 = *(void *)(v25 - 8);
  MEMORY[0x1895F8858](v25);
  uint64_t v7 = (char *)&v23 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = type metadata accessor for NSDecimal.FormatStyle(0LL);
  uint64_t v9 = MEMORY[0x1895F8858](v8);
  unsigned int v11 = (_OWORD *)((char *)&v23 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v12 = (uint64_t)v11 + *(int *)(v9 + 20);
  *(void *)uint64_t v12 = 0LL;
  *(_BYTE *)(v12 + 8) = 1;
  *(void *)(v12 + 16) = 0LL;
  *(void *)(v12 + 24) = 0LL;
  *(void *)(v12 + 32) = 0LL;
  *(void *)(v12 + 40) = 0x1FFFFFFFELL;
  *(void *)(v12 + 56) = 0LL;
  *(void *)(v12 + 64) = 0LL;
  *(void *)(v12 + 48) = 0LL;
  *(_DWORD *)(v12 + 72) = 131584;
  *(_WORD *)(v12 + 76) = 512;
  uint64_t v13 = v12 + v3[9];
  uint64_t v14 = type metadata accessor for FloatingPointRoundingRule();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 56LL))(v13, 1LL, 1LL, v14);
  uint64_t v15 = v12 + v3[10];
  *(void *)uint64_t v15 = 0LL;
  *(_BYTE *)(v15 + 8) = -1;
  *(_BYTE *)(v12 + v3[11]) = 3;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type NSDecimal.FormatStyle.CodingKeys and conformance NSDecimal.FormatStyle.CodingKeys();
  uint64_t v16 = (uint64_t)v26;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v16)
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
    int v22 = type metadata accessor for NumberFormatStyleConfiguration.Collection;
    uint64_t v21 = v12;
  }

  else
  {
    char v28 = 0;
    lazy protocol witness table accessor for type Locale and conformance Locale();
    uint64_t v17 = v25;
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    int v26 = v11;
    _OWORD *v11 = v27;
    LOBYTE(v27) = 1;
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( &lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.Collection and conformance NumberFormatStyleConfiguration.Collection,  type metadata accessor for NumberFormatStyleConfiguration.Collection,  (uint64_t)&protocol conformance descriptor for NumberFormatStyleConfiguration.Collection);
    uint64_t v19 = (uint64_t)v24;
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v17);
    outlined assign with take of NumberFormatStyleConfiguration.Collection(v19, v12);
    uint64_t v20 = (uint64_t)v26;
    outlined init with copy of ICUNumberFormatter.Signature( (uint64_t)v26,  v23,  type metadata accessor for NSDecimal.FormatStyle);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
    uint64_t v21 = v20;
    int v22 = type metadata accessor for NSDecimal.FormatStyle;
  }

  return outlined destroy of ICUNumberFormatter.Signature(v21, v22);
}

uint64_t protocol witness for FormatStyle.format(_:) in conformance NSDecimal.FormatStyle@<X0>( uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  return protocol witness for FormatStyle.format(_:) in conformance NSDecimal.FormatStyle( a1,  (uint64_t (*)(void, void, void))NSDecimal.FormatStyle.format(_:),  a2);
}

double protocol witness for FormatStyle.locale(_:) in conformance NSDecimal.FormatStyle@<D0>( __n128 *a1@<X0>, __n128 *a2@<X8>)
{
  *(void *)&double result = protocol witness for FormatStyle.locale(_:) in conformance NSDecimal.FormatStyle( a1,  type metadata accessor for NSDecimal.FormatStyle,  a2).n128_u64[0];
  return result;
}

uint64_t protocol witness for Decodable.init(from:) in conformance NSDecimal.FormatStyle@<X0>( void *a1@<X0>, uint64_t a2@<X8>)
{
  return NSDecimal.FormatStyle.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance NSDecimal.FormatStyle(void *a1)
{
  return NSDecimal.FormatStyle.encode(to:)(a1);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance NSDecimal.FormatStyle( uint64_t a1, uint64_t a2)
{
  return protocol witness for Hashable.hashValue.getter in conformance String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format( a1,  a2,  (void (*)(_BYTE *))NSDecimal.FormatStyle.hash(into:));
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance NSDecimal.FormatStyle( uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for Hashable._rawHashValue(seed:) in conformance String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format( a1,  a2,  a3,  (void (*)(_BYTE *))NSDecimal.FormatStyle.hash(into:));
}

uint64_t (*NSDecimal.FormatStyle.Percent.locale.modify())()
{
  return destructiveProjectEnumData for PredicateCodableError;
}

__n128 NSDecimal.FormatStyle.Percent.init(locale:)@<Q0>(__n128 *a1@<X0>, __n128 *a2@<X8>)
{
  uint64_t v4 = (char *)a2 + *(int *)(type metadata accessor for NSDecimal.FormatStyle.Percent(0LL) + 20);
  uint64_t v5 = (int *)type metadata accessor for NumberFormatStyleConfiguration.Collection(0LL);
  uint64_t v6 = &v4[v5[9]];
  uint64_t v7 = type metadata accessor for FloatingPointRoundingRule();
  __n128 v10 = *a1;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56LL))(v6, 1LL, 1LL, v7);
  *(void *)uint64_t v4 = 0x4059000000000000LL;
  v4[8] = 0;
  *((void *)v4 + 2) = 0LL;
  *((void *)v4 + 3) = 0LL;
  *((void *)v4 + 4) = 0LL;
  *((void *)v4 + 5) = 0x1FFFFFFFELL;
  *((void *)v4 + 7) = 0LL;
  *((void *)v4 + 8) = 0LL;
  *((void *)v4 + 6) = 0LL;
  *((_DWORD *)v4 + 18) = 131584;
  *((_WORD *)v4 + 38) = 512;
  uint64_t v8 = &v4[v5[10]];
  *(void *)uint64_t v8 = 0LL;
  v8[8] = -1;
  v4[v5[11]] = 3;
  __n128 result = v10;
  *a2 = v10;
  return result;
}

uint64_t NSDecimal.FormatStyle.Percent.attributed.getter@<X0>(uint64_t a1@<X8>)
{
  return NSDecimal.FormatStyle.attributed.getter(type metadata accessor for NSDecimal.FormatStyle.Percent, a1);
}

uint64_t NSDecimal.FormatStyle.Percent.grouping(_:)@<X0>(char *a1@<X0>, uint64_t a2@<X8>)
{
  return NSDecimal.FormatStyle.grouping(_:)(a1, type metadata accessor for NSDecimal.FormatStyle.Percent, a2);
}

uint64_t NSDecimal.FormatStyle.grouping(_:)@<X0>( char *a1@<X0>, uint64_t (*a2)(void)@<X1>, uint64_t a3@<X8>)
{
  char v6 = *a1;
  outlined init with copy of ICUNumberFormatter.Signature(v3, a3, a2);
  uint64_t result = a2(0LL);
  *(_BYTE *)(a3 + *(int *)(result + 20) + 73) = v6;
  return result;
}

double NSDecimal.FormatStyle.Percent.precision(_:)@<D0>(__int128 *a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)&double result = NSDecimal.FormatStyle.precision(_:)( a1,  type metadata accessor for NSDecimal.FormatStyle.Percent,  a2).n128_u64[0];
  return result;
}

__n128 NSDecimal.FormatStyle.precision(_:)@<Q0>( __int128 *a1@<X0>, uint64_t (*a2)(void)@<X1>, uint64_t a3@<X8>)
{
  __int128 v11 = a1[1];
  __int128 v12 = *a1;
  __n128 v10 = (__n128)a1[2];
  uint64_t v6 = *((void *)a1 + 6);
  char v7 = *((_BYTE *)a1 + 56);
  outlined init with copy of ICUNumberFormatter.Signature(v3, a3, a2);
  uint64_t v8 = a3 + *(int *)(a2(0LL) + 20);
  *(_OWORD *)(v8 + 16) = v12;
  *(_OWORD *)(v8 + 32) = v11;
  __n128 result = v10;
  *(__n128 *)(v8 + 48) = v10;
  *(void *)(v8 + 64) = v6;
  *(_BYTE *)(v8 + 72) = v7;
  return result;
}

uint64_t NSDecimal.FormatStyle.Percent.sign(strategy:)@<X0>(unsigned __int8 *a1@<X0>, uint64_t a2@<X8>)
{
  return NSDecimal.FormatStyle.sign(strategy:)(a1, type metadata accessor for NSDecimal.FormatStyle.Percent, a2);
}

uint64_t NSDecimal.FormatStyle.sign(strategy:)@<X0>( unsigned __int8 *a1@<X0>, uint64_t (*a2)(void)@<X1>, uint64_t a3@<X8>)
{
  __int16 v6 = *a1;
  int v7 = a1[1];
  int v8 = a1[2];
  outlined init with copy of ICUNumberFormatter.Signature(v3, a3, a2);
  if (v7) {
    __int16 v9 = 256;
  }
  else {
    __int16 v9 = 0;
  }
  __int16 v10 = v9 | v6;
  uint64_t result = a2(0LL);
  uint64_t v12 = a3 + *(int *)(result + 20);
  *(_BYTE *)(v12 + 76) = v8 != 0;
  *(_WORD *)(v12 + 74) = v10;
  return result;
}

uint64_t NSDecimal.FormatStyle.Percent.decimalSeparator(strategy:)@<X0>(char *a1@<X0>, uint64_t a2@<X8>)
{
  return NSDecimal.FormatStyle.decimalSeparator(strategy:)( a1,  type metadata accessor for NSDecimal.FormatStyle.Percent,  a2);
}

uint64_t NSDecimal.FormatStyle.decimalSeparator(strategy:)@<X0>( char *a1@<X0>, uint64_t (*a2)(void)@<X1>, uint64_t a3@<X8>)
{
  char v6 = *a1;
  outlined init with copy of ICUNumberFormatter.Signature(v3, a3, a2);
  uint64_t result = a2(0LL);
  *(_BYTE *)(a3 + *(int *)(result + 20) + 77) = v6;
  return result;
}

uint64_t NSDecimal.FormatStyle.Percent.rounded(rule:increment:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X8>)
{
  return NSDecimal.FormatStyle.rounded(rule:increment:)( a1,  a2,  a3,  type metadata accessor for NSDecimal.FormatStyle.Percent,  a4);
}

uint64_t NSDecimal.FormatStyle.rounded(rule:increment:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t (*a4)(void)@<X3>, uint64_t a5@<X8>)
{
  uint64_t v11 = a5 + *(int *)(a4(0LL) + 20);
  uint64_t v12 = type metadata accessor for NumberFormatStyleConfiguration.Collection(0LL);
  uint64_t v13 = v11 + *(int *)(v12 + 36);
  outlined destroy of Any?(v13, &demangling cache variable for type metadata for FloatingPointRoundingRule?);
  uint64_t v14 = type metadata accessor for FloatingPointRoundingRule();
  uint64_t v15 = *(void *)(v14 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v15 + 16))(v13, a1, v14);
  uint64_t result = (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v15 + 56))(v13, 0LL, 1LL, v14);
  if ((a3 & 1) == 0)
  {
    uint64_t v17 = v11 + *(int *)(v12 + 40);
    *(void *)uint64_t v17 = a2;
    *(_BYTE *)(v17 + 8) = 0;
  }

  return result;
}

uint64_t NSDecimal.FormatStyle.Percent.scale(_:)@<X0>(uint64_t a1@<X8>, double a2@<D0>)
{
  return NSDecimal.FormatStyle.scale(_:)(type metadata accessor for NSDecimal.FormatStyle.Percent, a1, a2);
}

uint64_t NSDecimal.FormatStyle.scale(_:)@<X0>( uint64_t (*a1)(void)@<X0>, uint64_t a2@<X8>, double a3@<D0>)
{
  uint64_t v5 = v3;
  outlined init with copy of ICUNumberFormatter.Signature(v5, a2, a1);
  uint64_t result = a1(0LL);
  uint64_t v9 = a2 + *(int *)(result + 20);
  *(double *)uint64_t v9 = a3;
  *(_BYTE *)(v9 + 8) = 0;
  return result;
}

uint64_t NSDecimal.FormatStyle.Percent.notation(_:)@<X0>(char *a1@<X0>, uint64_t a2@<X8>)
{
  return NSDecimal.FormatStyle.notation(_:)(a1, type metadata accessor for NSDecimal.FormatStyle.Percent, a2);
}

uint64_t NSDecimal.FormatStyle.notation(_:)@<X0>( char *a1@<X0>, uint64_t (*a2)(void)@<X1>, uint64_t a3@<X8>)
{
  char v6 = *a1;
  outlined init with copy of ICUNumberFormatter.Signature(v3, a3, a2);
  uint64_t v7 = a3 + *(int *)(a2(0LL) + 20);
  uint64_t result = type metadata accessor for NumberFormatStyleConfiguration.Collection(0LL);
  *(_BYTE *)(v7 + *(int *)(result + 44)) = v6;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance NSDecimal.FormatStyle.Percent.CodingKeys()
{
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance NSDecimal.FormatStyle.Percent.CodingKeys()
{
  return CodingKey.debugDescription.getter();
}

uint64_t (*NSDecimal.FormatStyle.Currency.locale.modify())()
{
  return destructiveProjectEnumData for PredicateCodableError;
}

uint64_t NSDecimal.FormatStyle.Currency.currencyCode.getter()
{
  uint64_t v1 = *(void *)(v0 + 16);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t NSDecimal.FormatStyle.Currency.currencyCode.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v2 + 16) = a1;
  *(void *)(v2 + 24) = a2;
  return result;
}

uint64_t (*NSDecimal.FormatStyle.Currency.currencyCode.modify())()
{
  return destructiveProjectEnumData for PredicateCodableError;
}

uint64_t NSDecimal.FormatStyle.Currency.init(code:locale:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X2>, uint64_t a4@<X8>)
{
  *(_OWORD *)a4 = *a3;
  *(void *)(a4 + 16) = a1;
  *(void *)(a4 + 24) = a2;
  uint64_t v4 = a4 + *(int *)(type metadata accessor for NSDecimal.FormatStyle.Currency(0LL) + 24);
  uint64_t v5 = (int *)type metadata accessor for CurrencyFormatStyleConfiguration.Collection(0LL);
  uint64_t v6 = v4 + v5[9];
  uint64_t v7 = type metadata accessor for FloatingPointRoundingRule();
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56LL))( v6,  1LL,  1LL,  v7);
  *(void *)uint64_t v4 = 0LL;
  *(_BYTE *)(v4 + 8) = 1;
  *(void *)(v4 + 16) = 0LL;
  *(void *)(v4 + 24) = 0LL;
  *(void *)(v4 + 32) = 0LL;
  *(void *)(v4 + 40) = 0x1FFFFFFFELL;
  *(void *)(v4 + 56) = 0LL;
  *(void *)(v4 + 64) = 0LL;
  *(void *)(v4 + 48) = 0LL;
  *(_WORD *)(v4 + 72) = 512;
  *(_DWORD *)(v4 + 74) = 2;
  *(_BYTE *)(v4 + 78) = 2;
  uint64_t v9 = v4 + v5[10];
  *(void *)uint64_t v9 = 0LL;
  *(_BYTE *)(v9 + 8) = -1;
  *(_BYTE *)(v4 + v5[11]) = 1;
  *(_BYTE *)(v4 + v5[12]) = 3;
  return result;
}

uint64_t NSDecimal.FormatStyle.Currency.attributed.getter@<X0>(uint64_t a1@<X8>)
{
  return NSDecimal.FormatStyle.attributed.getter(type metadata accessor for NSDecimal.FormatStyle.Currency, a1);
}

uint64_t NSDecimal.FormatStyle.attributed.getter@<X0>(uint64_t (*a1)(void)@<X0>, uint64_t a2@<X8>)
{
  return swift_storeEnumTagMultiPayload();
}

uint64_t NSDecimal.FormatStyle.Currency.grouping(_:)@<X0>(char *a1@<X0>, uint64_t a2@<X8>)
{
  char v4 = *a1;
  outlined init with copy of ICUNumberFormatter.Signature( v2,  a2,  type metadata accessor for NSDecimal.FormatStyle.Currency);
  uint64_t result = type metadata accessor for NSDecimal.FormatStyle.Currency(0LL);
  *(_BYTE *)(a2 + *(int *)(result + 24) + 73) = v4;
  return result;
}

__n128 NSDecimal.FormatStyle.Currency.precision(_:)@<Q0>(__int128 *a1@<X0>, uint64_t a2@<X8>)
{
  __int128 v9 = a1[1];
  __int128 v10 = *a1;
  __n128 v8 = (__n128)a1[2];
  uint64_t v4 = *((void *)a1 + 6);
  char v5 = *((_BYTE *)a1 + 56);
  outlined init with copy of ICUNumberFormatter.Signature( v2,  a2,  type metadata accessor for NSDecimal.FormatStyle.Currency);
  uint64_t v6 = a2 + *(int *)(type metadata accessor for NSDecimal.FormatStyle.Currency(0LL) + 24);
  *(_OWORD *)(v6 + 16) = v10;
  *(_OWORD *)(v6 + 32) = v9;
  __n128 result = v8;
  *(__n128 *)(v6 + 48) = v8;
  *(void *)(v6 + 64) = v4;
  *(_BYTE *)(v6 + 72) = v5;
  return result;
}

uint64_t NSDecimal.FormatStyle.Currency.sign(strategy:)@<X0>(unsigned __int8 *a1@<X0>, uint64_t a2@<X8>)
{
  int v4 = *a1;
  int v5 = a1[1];
  int v6 = a1[2];
  int v7 = a1[3];
  outlined init with copy of ICUNumberFormatter.Signature( v2,  a2,  type metadata accessor for NSDecimal.FormatStyle.Currency);
  if (v5) {
    int v8 = 256;
  }
  else {
    int v8 = 0;
  }
  int v9 = v8 | v4;
  if (v6) {
    int v10 = 0x10000;
  }
  else {
    int v10 = 0;
  }
  if (v7) {
    int v11 = 0x1000000;
  }
  else {
    int v11 = 0;
  }
  int v12 = v9 | v10 | v11;
  uint64_t result = type metadata accessor for NSDecimal.FormatStyle.Currency(0LL);
  *(_DWORD *)(a2 + *(int *)(result + 24) + 74) = v12;
  return result;
}

uint64_t NSDecimal.FormatStyle.Currency.decimalSeparator(strategy:)@<X0>(char *a1@<X0>, uint64_t a2@<X8>)
{
  char v4 = *a1;
  outlined init with copy of ICUNumberFormatter.Signature( v2,  a2,  type metadata accessor for NSDecimal.FormatStyle.Currency);
  uint64_t result = type metadata accessor for NSDecimal.FormatStyle.Currency(0LL);
  *(_BYTE *)(a2 + *(int *)(result + 24) + 78) = v4;
  return result;
}

uint64_t NSDecimal.FormatStyle.Currency.rounded(rule:increment:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v9 = a4 + *(int *)(type metadata accessor for NSDecimal.FormatStyle.Currency(0LL) + 24);
  uint64_t v10 = type metadata accessor for CurrencyFormatStyleConfiguration.Collection(0LL);
  uint64_t v11 = v9 + *(int *)(v10 + 36);
  outlined destroy of Any?(v11, &demangling cache variable for type metadata for FloatingPointRoundingRule?);
  uint64_t v12 = type metadata accessor for FloatingPointRoundingRule();
  uint64_t v13 = *(void *)(v12 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v13 + 16))(v11, a1, v12);
  uint64_t result = (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v13 + 56))(v11, 0LL, 1LL, v12);
  if ((a3 & 1) == 0)
  {
    uint64_t v15 = v9 + *(int *)(v10 + 40);
    *(void *)uint64_t v15 = a2;
    *(_BYTE *)(v15 + 8) = 0;
  }

  return result;
}

uint64_t NSDecimal.FormatStyle.Currency.scale(_:)@<X0>(uint64_t a1@<X8>, double a2@<D0>)
{
  uint64_t result = type metadata accessor for NSDecimal.FormatStyle.Currency(0LL);
  uint64_t v6 = a1 + *(int *)(result + 24);
  *(double *)uint64_t v6 = a2;
  *(_BYTE *)(v6 + 8) = 0;
  return result;
}

uint64_t NSDecimal.FormatStyle.Currency.presentation(_:)@<X0>(char *a1@<X0>, uint64_t a2@<X8>)
{
  char v4 = *a1;
  outlined init with copy of ICUNumberFormatter.Signature( v2,  a2,  type metadata accessor for NSDecimal.FormatStyle.Currency);
  uint64_t v5 = a2 + *(int *)(type metadata accessor for NSDecimal.FormatStyle.Currency(0LL) + 24);
  uint64_t result = type metadata accessor for CurrencyFormatStyleConfiguration.Collection(0LL);
  *(_BYTE *)(v5 + *(int *)(result + 44)) = v4;
  return result;
}

uint64_t NSDecimal.FormatStyle.Currency.notation(_:)@<X0>(char *a1@<X0>, uint64_t a2@<X8>)
{
  char v4 = *a1;
  outlined init with copy of ICUNumberFormatter.Signature( v2,  a2,  type metadata accessor for NSDecimal.FormatStyle.Currency);
  uint64_t v5 = a2 + *(int *)(type metadata accessor for NSDecimal.FormatStyle.Currency(0LL) + 24);
  uint64_t result = type metadata accessor for CurrencyFormatStyleConfiguration.Collection(0LL);
  *(_BYTE *)(v5 + *(int *)(result + 48)) = v4;
  return result;
}

uint64_t NSDecimal.FormatStyle.Attributed.Style.hash(into:)(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for NSDecimal.FormatStyle.Percent(0LL);
  MEMORY[0x1895F8858](v4);
  uint64_t v6 = (char *)&v21 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = type metadata accessor for NSDecimal.FormatStyle.Currency(0LL);
  MEMORY[0x1895F8858](v7);
  uint64_t v9 = (char *)&v21 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = type metadata accessor for NSDecimal.FormatStyle(0LL);
  MEMORY[0x1895F8858](v10);
  uint64_t v12 = (char *)&v21 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = type metadata accessor for NSDecimal.FormatStyle.Attributed.Style(0LL);
  MEMORY[0x1895F8858](v13);
  uint64_t v15 = (char *)&v21 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  outlined init with copy of ICUNumberFormatter.Signature(v2, (uint64_t)v15, v16);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload)
  {
    if (EnumCaseMultiPayload == 1)
    {
      outlined init with take of ICUNumberFormatter.Signature( (uint64_t)v15,  (uint64_t)v9,  type metadata accessor for NSDecimal.FormatStyle.Currency);
      Hasher._combine(_:)(1uLL);
      NSDecimal.FormatStyle.Currency.hash(into:)(a1);
      uint64_t v18 = (uint64_t)v9;
      uint64_t v19 = type metadata accessor for NSDecimal.FormatStyle.Currency;
    }

    else
    {
      outlined init with take of ICUNumberFormatter.Signature( (uint64_t)v15,  (uint64_t)v6,  type metadata accessor for NSDecimal.FormatStyle.Percent);
      Hasher._combine(_:)(2uLL);
      NSDecimal.FormatStyle.Percent.hash(into:)(a1);
      uint64_t v18 = (uint64_t)v6;
      uint64_t v19 = type metadata accessor for NSDecimal.FormatStyle.Percent;
    }
  }

  else
  {
    outlined init with take of ICUNumberFormatter.Signature( (uint64_t)v15,  (uint64_t)v12,  type metadata accessor for NSDecimal.FormatStyle);
    Hasher._combine(_:)(0LL);
    NSDecimal.FormatStyle.hash(into:)(a1);
    uint64_t v18 = (uint64_t)v12;
    uint64_t v19 = type metadata accessor for NSDecimal.FormatStyle;
  }

  return outlined destroy of ICUNumberFormatter.Signature(v18, v19);
}

uint64_t NSDecimal.FormatStyle.Attributed.Style.encode(to:)(void *a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<NSDecimal.FormatStyle.Attributed.Style.PercentCodingKeys>);
  uint64_t v41 = *(void *)(v2 - 8);
  uint64_t v42 = v2;
  MEMORY[0x1895F8858](v2);
  Swift::String v40 = (char *)&v31 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v38 = type metadata accessor for NSDecimal.FormatStyle.Percent(0LL);
  MEMORY[0x1895F8858](v38);
  uint64_t v39 = (uint64_t)&v31 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<NSDecimal.FormatStyle.Attributed.Style.CurrencyCodingKeys>);
  uint64_t v36 = *(void *)(v5 - 8);
  uint64_t v37 = v5;
  MEMORY[0x1895F8858](v5);
  unint64_t v35 = (char *)&v31 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v34 = type metadata accessor for NSDecimal.FormatStyle.Currency(0LL);
  MEMORY[0x1895F8858](v34);
  uint64_t v8 = (char *)&v31 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<NSDecimal.FormatStyle.Attributed.Style.DecimalCodingKeys>);
  uint64_t v32 = *(void *)(v9 - 8);
  uint64_t v33 = v9;
  MEMORY[0x1895F8858](v9);
  uint64_t v11 = (char *)&v31 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v31 = type metadata accessor for NSDecimal.FormatStyle(0LL);
  MEMORY[0x1895F8858](v31);
  uint64_t v13 = (char *)&v31 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = type metadata accessor for NSDecimal.FormatStyle.Attributed.Style(0LL);
  MEMORY[0x1895F8858](v14);
  uint64_t v16 = (char *)&v31 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<NSDecimal.FormatStyle.Attributed.Style.CodingKeys>);
  uint64_t v44 = *(void *)(v17 - 8);
  uint64_t v45 = v17;
  MEMORY[0x1895F8858](v17);
  uint64_t v19 = (char *)&v31 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type NSDecimal.FormatStyle.Attributed.Style.CodingKeys and conformance NSDecimal.FormatStyle.Attributed.Style.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  outlined init with copy of ICUNumberFormatter.Signature( v43,  (uint64_t)v16,  type metadata accessor for NSDecimal.FormatStyle.Attributed.Style);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload)
  {
    if (EnumCaseMultiPayload == 1)
    {
      uint64_t v21 = type metadata accessor for NSDecimal.FormatStyle.Currency;
      outlined init with take of ICUNumberFormatter.Signature( (uint64_t)v16,  (uint64_t)v8,  type metadata accessor for NSDecimal.FormatStyle.Currency);
      char v47 = 1;
      lazy protocol witness table accessor for type NSDecimal.FormatStyle.Attributed.Style.CurrencyCodingKeys and conformance NSDecimal.FormatStyle.Attributed.Style.CurrencyCodingKeys();
      int v22 = v35;
      uint64_t v23 = v45;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( &lazy protocol witness table cache variable for type NSDecimal.FormatStyle.Currency and conformance NSDecimal.FormatStyle.Currency,  type metadata accessor for NSDecimal.FormatStyle.Currency,  (uint64_t)&protocol conformance descriptor for NSDecimal.FormatStyle.Currency);
      uint64_t v24 = v37;
      KeyedEncodingContainer.encode<A>(_:forKey:)();
      (*(void (**)(char *, uint64_t))(v36 + 8))(v22, v24);
      uint64_t v25 = (uint64_t)v8;
    }

    else
    {
      uint64_t v21 = type metadata accessor for NSDecimal.FormatStyle.Percent;
      uint64_t v27 = v39;
      outlined init with take of ICUNumberFormatter.Signature( (uint64_t)v16,  v39,  type metadata accessor for NSDecimal.FormatStyle.Percent);
      char v48 = 2;
      lazy protocol witness table accessor for type NSDecimal.FormatStyle.Attributed.Style.PercentCodingKeys and conformance NSDecimal.FormatStyle.Attributed.Style.PercentCodingKeys();
      char v28 = v40;
      uint64_t v23 = v45;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( &lazy protocol witness table cache variable for type NSDecimal.FormatStyle.Percent and conformance NSDecimal.FormatStyle.Percent,  type metadata accessor for NSDecimal.FormatStyle.Percent,  (uint64_t)&protocol conformance descriptor for NSDecimal.FormatStyle.Percent);
      uint64_t v29 = v42;
      KeyedEncodingContainer.encode<A>(_:forKey:)();
      (*(void (**)(char *, uint64_t))(v41 + 8))(v28, v29);
      uint64_t v25 = v27;
    }
  }

  else
  {
    uint64_t v21 = type metadata accessor for NSDecimal.FormatStyle;
    outlined init with take of ICUNumberFormatter.Signature( (uint64_t)v16,  (uint64_t)v13,  type metadata accessor for NSDecimal.FormatStyle);
    char v46 = 0;
    lazy protocol witness table accessor for type NSDecimal.FormatStyle.Attributed.Style.DecimalCodingKeys and conformance NSDecimal.FormatStyle.Attributed.Style.DecimalCodingKeys();
    uint64_t v23 = v45;
    KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( &lazy protocol witness table cache variable for type NSDecimal.FormatStyle and conformance NSDecimal.FormatStyle,  type metadata accessor for NSDecimal.FormatStyle,  (uint64_t)&protocol conformance descriptor for NSDecimal.FormatStyle);
    uint64_t v26 = v33;
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v32 + 8))(v11, v26);
    uint64_t v25 = (uint64_t)v13;
  }

  outlined destroy of ICUNumberFormatter.Signature(v25, v21);
  return (*(uint64_t (**)(char *, uint64_t))(v44 + 8))(v19, v23);
}

uint64_t NSDecimal.FormatStyle.Attributed.Style.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v54 = a2;
  uint64_t v50 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<NSDecimal.FormatStyle.Attributed.Style.PercentCodingKeys>);
  uint64_t v53 = *(void *)(v50 - 8);
  MEMORY[0x1895F8858](v50);
  uint64_t v55 = (char *)&v43 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<NSDecimal.FormatStyle.Attributed.Style.CurrencyCodingKeys>);
  uint64_t v51 = *(void *)(v4 - 8);
  uint64_t v52 = v4;
  MEMORY[0x1895F8858](v4);
  int v59 = (char *)&v43 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<NSDecimal.FormatStyle.Attributed.Style.DecimalCodingKeys>);
  uint64_t v48 = *(void *)(v6 - 8);
  uint64_t v49 = v6;
  MEMORY[0x1895F8858](v6);
  id v57 = (char *)&v43 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v58 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<NSDecimal.FormatStyle.Attributed.Style.CodingKeys>);
  uint64_t v56 = *(void *)(v58 - 8);
  MEMORY[0x1895F8858](v58);
  uint64_t v9 = (char *)&v43 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = type metadata accessor for NSDecimal.FormatStyle.Attributed.Style(0LL);
  uint64_t v11 = MEMORY[0x1895F8858](v10);
  uint64_t v13 = (char *)&v43 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = MEMORY[0x1895F8858](v11);
  uint64_t v16 = (char *)&v43 - v15;
  uint64_t v17 = MEMORY[0x1895F8858](v14);
  uint64_t v19 = (char *)&v43 - v18;
  MEMORY[0x1895F8858](v17);
  uint64_t v21 = (char *)&v43 - v20;
  uint64_t v22 = a1[3];
  int v61 = a1;
  __swift_project_boxed_opaque_existential_1(a1, v22);
  lazy protocol witness table accessor for type NSDecimal.FormatStyle.Attributed.Style.CodingKeys and conformance NSDecimal.FormatStyle.Attributed.Style.CodingKeys();
  uint64_t v60 = v9;
  uint64_t v23 = v62;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v23) {
    goto LABEL_9;
  }
  uint64_t v44 = v16;
  uint64_t v45 = v19;
  char v46 = v13;
  char v47 = v21;
  uint64_t v24 = v57;
  uint64_t v25 = v58;
  uint64_t v27 = v59;
  uint64_t v26 = v60;
  uint64_t v62 = v10;
  uint64_t v28 = KeyedDecodingContainer.allKeys.getter();
  if (*(void *)(v28 + 16) != 1LL)
  {
    uint64_t v29 = v25;
    uint64_t v30 = type metadata accessor for DecodingError();
    swift_allocError();
    uint64_t v32 = v31;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
    uint64_t *v32 = v62;
    KeyedDecodingContainer.codingPath.getter();
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(uint64_t *, void, uint64_t))(*(void *)(v30 - 8) + 104LL))( v32,  *MEMORY[0x189619358],  v30);
    swift_willThrow();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v56 + 8))(v26, v29);
LABEL_9:
    uint64_t v37 = (uint64_t)v61;
    return __swift_destroy_boxed_opaque_existential_1(v37);
  }

  if (*(_BYTE *)(v28 + 32))
  {
    if (*(_BYTE *)(v28 + 32) == 1)
    {
      char v64 = 1;
      lazy protocol witness table accessor for type NSDecimal.FormatStyle.Attributed.Style.CurrencyCodingKeys and conformance NSDecimal.FormatStyle.Attributed.Style.CurrencyCodingKeys();
      KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      type metadata accessor for NSDecimal.FormatStyle.Currency(0LL);
      lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( &lazy protocol witness table cache variable for type NSDecimal.FormatStyle.Currency and conformance NSDecimal.FormatStyle.Currency,  type metadata accessor for NSDecimal.FormatStyle.Currency,  (uint64_t)&protocol conformance descriptor for NSDecimal.FormatStyle.Currency);
      uint64_t v35 = (uint64_t)v44;
      uint64_t v36 = v52;
      KeyedDecodingContainer.decode<A>(_:forKey:)();
      (*(void (**)(char *, uint64_t))(v51 + 8))(v27, v36);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v56 + 8))(v26, v25);
      uint64_t v37 = (uint64_t)v61;
      swift_storeEnumTagMultiPayload();
    }

    else
    {
      char v65 = 2;
      lazy protocol witness table accessor for type NSDecimal.FormatStyle.Attributed.Style.PercentCodingKeys and conformance NSDecimal.FormatStyle.Attributed.Style.PercentCodingKeys();
      uint64_t v33 = v55;
      KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      type metadata accessor for NSDecimal.FormatStyle.Percent(0LL);
      lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( &lazy protocol witness table cache variable for type NSDecimal.FormatStyle.Percent and conformance NSDecimal.FormatStyle.Percent,  type metadata accessor for NSDecimal.FormatStyle.Percent,  (uint64_t)&protocol conformance descriptor for NSDecimal.FormatStyle.Percent);
      uint64_t v39 = (uint64_t)v46;
      uint64_t v40 = v50;
      KeyedDecodingContainer.decode<A>(_:forKey:)();
      uint64_t v41 = v56;
      (*(void (**)(char *, uint64_t))(v53 + 8))(v33, v40);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v41 + 8))(v26, v25);
      swift_storeEnumTagMultiPayload();
      uint64_t v35 = v39;
      uint64_t v37 = (uint64_t)v61;
    }
  }

  else
  {
    char v63 = 0;
    lazy protocol witness table accessor for type NSDecimal.FormatStyle.Attributed.Style.DecimalCodingKeys and conformance NSDecimal.FormatStyle.Attributed.Style.DecimalCodingKeys();
    KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
    type metadata accessor for NSDecimal.FormatStyle(0LL);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( &lazy protocol witness table cache variable for type NSDecimal.FormatStyle and conformance NSDecimal.FormatStyle,  type metadata accessor for NSDecimal.FormatStyle,  (uint64_t)&protocol conformance descriptor for NSDecimal.FormatStyle);
    uint64_t v35 = (uint64_t)v45;
    uint64_t v38 = v49;
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v48 + 8))(v24, v38);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v56 + 8))(v26, v25);
    uint64_t v37 = (uint64_t)v61;
    swift_storeEnumTagMultiPayload();
  }

  uint64_t v42 = (uint64_t)v47;
  outlined init with take of ICUNumberFormatter.Signature( v35,  (uint64_t)v47,  type metadata accessor for NSDecimal.FormatStyle.Attributed.Style);
  outlined init with take of ICUNumberFormatter.Signature( v42,  v54,  type metadata accessor for NSDecimal.FormatStyle.Attributed.Style);
  return __swift_destroy_boxed_opaque_existential_1(v37);
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance NSDecimal.FormatStyle.Currency.CodingKeys()
{
  uint64_t v1 = 0x79636E6572727563LL;
  if (*v0 != 1) {
    uint64_t v1 = 0x697463656C6C6F63LL;
  }
  if (*v0) {
    return v1;
  }
  else {
    return 0x656C61636F6CLL;
  }
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance NSDecimal.FormatStyle.Currency.CodingKeys@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result = specialized NSDecimal.FormatStyle.Currency.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance NSDecimal.FormatStyle.Currency.CodingKeys()
{
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance NSDecimal.FormatStyle.Currency.CodingKeys()
{
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance NSDecimal.FormatStyle.Attributed.Style.CodingKeys()
{
  uint64_t v1 = 0x79636E6572727563LL;
  if (*v0 != 1) {
    uint64_t v1 = 0x746E6563726570LL;
  }
  if (*v0) {
    return v1;
  }
  else {
    return 0x6C616D69636564LL;
  }
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance NSDecimal.FormatStyle.Attributed.Style.CodingKeys@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result = specialized NSDecimal.FormatStyle.Attributed.Style.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance NSDecimal.FormatStyle.Attributed.Style.CodingKeys()
{
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance NSDecimal.FormatStyle.Attributed.Style.CodingKeys()
{
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance NSDecimal.FormatStyle.Attributed.Style.CurrencyCodingKeys()
{
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance NSDecimal.FormatStyle.Attributed.Style.CurrencyCodingKeys()
{
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance NSDecimal.FormatStyle.Attributed.Style.DecimalCodingKeys()
{
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance NSDecimal.FormatStyle.Attributed.Style.DecimalCodingKeys()
{
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance NSDecimal.FormatStyle.Attributed.Style.PercentCodingKeys()
{
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance NSDecimal.FormatStyle.Attributed.Style.PercentCodingKeys()
{
  return CodingKey.debugDescription.getter();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance NSDecimal.FormatStyle.Attributed.Style( uint64_t a1, uint64_t a2)
{
  return protocol witness for Hashable.hashValue.getter in conformance String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format( a1,  a2,  (void (*)(_BYTE *))NSDecimal.FormatStyle.Attributed.Style.hash(into:));
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance NSDecimal.FormatStyle.Attributed.Style( uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for Hashable._rawHashValue(seed:) in conformance String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format( a1,  a2,  a3,  (void (*)(_BYTE *))NSDecimal.FormatStyle.Attributed.Style.hash(into:));
}

uint64_t protocol witness for Decodable.init(from:) in conformance NSDecimal.FormatStyle.Attributed.Style@<X0>( void *a1@<X0>, uint64_t a2@<X8>)
{
  return NSDecimal.FormatStyle.Attributed.Style.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance NSDecimal.FormatStyle.Attributed.Style( void *a1)
{
  return NSDecimal.FormatStyle.Attributed.Style.encode(to:)(a1);
}

uint64_t NSDecimal.FormatStyle.Attributed.format(_:)@<X0>( uint64_t a1@<X0>, unint64_t a2@<X1>, int a3@<W2>, void *a4@<X8>)
{
  void (*v32)(_BYTE *__return_ptr, uint64_t, uint64_t);
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t result;
  uint64_t (*v38)(uint64_t);
  uint64_t v39;
  unint64_t v40;
  Swift::OpaquePointer v41;
  unint64_t v42;
  unint64_t v43;
  char *v44;
  unint64_t v45;
  int v46;
  unsigned int v47;
  Swift::String v48;
  int v49;
  int v50;
  uint64_t v51;
  uint64_t v52;
  int v53;
  Swift::String v54;
  int v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unsigned int v59;
  unsigned int v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v64;
  unint64_t v65;
  Swift::String v66;
  int v67;
  int v68;
  int v69;
  uint64_t v70;
  int v71;
  int v72;
  int v73;
  __int16 i;
  Swift::String v75;
  int v76;
  Swift::String v77;
  Swift::String v78;
  Swift::String v79;
  uint64_t v80;
  int v81;
  uint64_t v82;
  int v83;
  uint64_t v84;
  uint64_t v85;
  void *v86;
  unint64_t v87;
  uint64_t v88;
  uint64_t v89;
  _BYTE v90[140];
  unsigned int v91;
  __int128 v92;
  uint64_t v93;
  unint64_t v94;
  uint64_t v87 = a2;
  LODWORD(v89) = a3;
  uint64_t v88 = a1;
  uint64_t v5 = type metadata accessor for NSDecimal.FormatStyle.Percent(0LL);
  MEMORY[0x1895F8858](v5);
  uint64_t v7 = (char *)&v80 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = type metadata accessor for NSDecimal.FormatStyle.Currency(0LL);
  MEMORY[0x1895F8858](v8);
  uint64_t v10 = (uint64_t *)((char *)&v80 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v11 = type metadata accessor for ICUNumberFormatter.Signature(0LL);
  MEMORY[0x1895F8858](v11);
  uint64_t v13 = (char *)&v80 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = type metadata accessor for NSDecimal.FormatStyle(0LL);
  MEMORY[0x1895F8858](v14);
  uint64_t v16 = (char *)&v80 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v17 = type metadata accessor for NSDecimal.FormatStyle.Attributed.Style(0LL);
  MEMORY[0x1895F8858](v17);
  uint64_t v19 = (char *)&v80 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  outlined init with copy of ICUNumberFormatter.Signature((uint64_t)v86, (uint64_t)v19, v20);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload)
  {
    if (EnumCaseMultiPayload == 1)
    {
      outlined init with take of ICUNumberFormatter.Signature( (uint64_t)v19,  (uint64_t)v10,  type metadata accessor for NSDecimal.FormatStyle.Currency);
      uint64_t v22 = specialized static ICUCurrencyNumberFormatter.create(for:)(v10);
      unint64_t v23 = v88;
      if (v22)
      {
        ICUNumberFormatter.attributedFormat(_:)(v88, v87, v89 | 0x200000000LL);
        swift_release();
        uint64_t v24 = type metadata accessor for NSDecimal.FormatStyle.Currency;
        uint64_t v25 = (uint64_t)v10;
        return outlined destroy of ICUNumberFormatter.Signature(v25, v24);
      }

      uint64_t v86 = a4;
      uint64_t v38 = type metadata accessor for NSDecimal.FormatStyle.Currency;
      uint64_t v39 = (uint64_t)v10;
    }

    else
    {
      outlined init with take of ICUNumberFormatter.Signature( (uint64_t)v19,  (uint64_t)v7,  type metadata accessor for NSDecimal.FormatStyle.Percent);
      type metadata accessor for ICUPercentNumberFormatter();
      uint64_t v36 = static ICUPercentNumberFormatter.create(for:)((uint64_t)v7);
      unint64_t v23 = v88;
      if (v36)
      {
        ICUNumberFormatter.attributedFormat(_:)(v88, v87, v89 | 0x200000000LL);
        swift_release();
        uint64_t v24 = type metadata accessor for NSDecimal.FormatStyle.Percent;
        uint64_t v25 = (uint64_t)v7;
        return outlined destroy of ICUNumberFormatter.Signature(v25, v24);
      }

      uint64_t v86 = a4;
      uint64_t v38 = type metadata accessor for NSDecimal.FormatStyle.Percent;
      uint64_t v39 = (uint64_t)v7;
    }

    outlined destroy of ICUNumberFormatter.Signature(v39, v38);
  }

  else
  {
    uint64_t v86 = a4;
    outlined init with take of ICUNumberFormatter.Signature( (uint64_t)v19,  (uint64_t)v16,  type metadata accessor for NSDecimal.FormatStyle);
    uint64_t v26 = (uint64_t)&v16[*(int *)(v14 + 20)];
    uint64_t v27 = *((void *)v16 + 1);
    uint64_t ObjectType = swift_getObjectType();
    uint64_t v29 = *(uint64_t (**)(uint64_t, uint64_t))(v27 + 472);
    swift_unknownObjectRetain();
    uint64_t v30 = v29(ObjectType, v27);
    uint64_t v85 = v31;
    swift_unknownObjectRelease();
    uint64_t v32 = *(void (**)(_BYTE *__return_ptr, uint64_t, uint64_t))(v27 + 464);
    swift_unknownObjectRetain();
    v32(v90, ObjectType, v27);
    swift_unknownObjectRelease();
    outlined init with take of LocalePreferences?( (uint64_t)v90,  (uint64_t)&v91,  (uint64_t *)&demangling cache variable for type metadata for LocalePreferences?);
    outlined init with copy of ICUNumberFormatter.Signature( v26,  (uint64_t)v13,  type metadata accessor for NumberFormatStyleConfiguration.Collection);
    uint64_t v33 = (uint64_t *)&v13[*(int *)(v11 + 20)];
    uint64_t v34 = v85;
    char *v33 = v30;
    v33[1] = v34;
    outlined init with take of LocalePreferences?( (uint64_t)&v91,  (uint64_t)&v13[*(int *)(v11 + 24)],  (uint64_t *)&demangling cache variable for type metadata for LocalePreferences?);
    uint64_t v35 = specialized static ICUNumberFormatter._create(with:)((uint64_t)v13);
    outlined destroy of ICUNumberFormatter.Signature( (uint64_t)v13,  type metadata accessor for ICUNumberFormatter.Signature);
    if (v35)
    {
      ICUNumberFormatter.attributedFormat(_:)(v88, v87, v89 | 0x200000000LL);
      swift_release();
      uint64_t v24 = type metadata accessor for NSDecimal.FormatStyle;
      uint64_t v25 = (uint64_t)v16;
      return outlined destroy of ICUNumberFormatter.Signature(v25, v24);
    }

    outlined destroy of ICUNumberFormatter.Signature((uint64_t)v16, type metadata accessor for NSDecimal.FormatStyle);
    unint64_t v23 = v88;
  }

  unsigned __int8 v91 = v23;
  uint64_t v40 = HIDWORD(v23);
  LOWORD(v92) = WORD2(v23);
  v41._rawValue = (void *)HIWORD(v23);
  WORD1(v92) = HIWORD(v23);
  uint64_t v42 = v87;
  uint64_t v43 = v87 >> 16;
  *(void *)((char *)&v92 + 4) = v87;
  uint64_t v44 = (char *)HIDWORD(v87);
  uint64_t v45 = HIWORD(v87);
  char v46 = v89;
  char v47 = WORD1(v89);
  HIDWORD(v92) = v89;
  if (!_So9NSDecimala__length_getter(&v91))
  {
    unsigned __int8 v91 = v23;
    LOWORD(v92) = WORD2(v23);
    WORD1(v92) = HIWORD(v23);
    WORD2(v92) = v42;
    WORD3(v92) = v43;
    WORD4(v92) = (_WORD)v44;
    WORD5(v92) = v45;
    WORD6(v92) = v46;
    HIWORD(v92) = v47;
  }

  unsigned __int8 v91 = v23;
  LOWORD(v92) = WORD2(v23);
  WORD1(v92) = HIWORD(v23);
  WORD2(v92) = v42;
  WORD3(v92) = v43;
  WORD4(v92) = (_WORD)v44;
  WORD5(v92) = v45;
  WORD6(v92) = v46;
  HIWORD(v92) = v47;
  unsigned __int8 v93 = 0LL;
  unsigned __int8 v94 = 0xE000000000000000LL;
  unsigned __int8 v91 = v23;
  LOWORD(v92) = WORD2(v23);
  WORD1(v92) = HIWORD(v23);
  WORD2(v92) = v42;
  WORD3(v92) = v43;
  WORD4(v92) = (_WORD)v44;
  WORD5(v92) = v45;
  WORD6(v92) = v46;
  HIWORD(v92) = v47;
  *(void *)uint64_t v90 = v23;
  *(_WORD *)&v90[8] = v42;
  *(_WORD *)&v90[10] = v43;
  *(_WORD *)&v90[12] = (_WORD)v44;
  *(_WORD *)&v90[14] = v45;
  *(_WORD *)&v90[16] = v46;
  *(_WORD *)&v90[18] = v47;
  if ((int)_So9NSDecimala__exponent_getter(v90) >= 1)
  {
    do
    {
      LODWORD(v89) = v46;
      v48._countAndFlagsBits = 48LL;
      v48._object = (void *)0xE100000000000000LL;
      String.append(_:)(v48);
      *(_DWORD *)uint64_t v90 = v23;
      *(_WORD *)&v90[4] = v40;
      *(_WORD *)&v90[6] = v41._rawValue;
      *(_WORD *)&v90[8] = v42;
      *(_WORD *)&v90[10] = v43;
      *(_WORD *)&v90[12] = (_WORD)v44;
      *(_WORD *)&v90[14] = v45;
      *(_WORD *)&v90[16] = v89;
      *(_WORD *)&v90[18] = v47;
      uint64_t v49 = _So9NSDecimala__exponent_getter(v90);
      _So9NSDecimala__exponent_setter((v49 - 1), &v91);
      unint64_t v23 = v91;
      LOWORD(v40) = v92;
      LOWORD(v41._rawValue) = WORD1(v92);
      uint64_t v42 = WORD2(v92);
      LOWORD(v43) = WORD3(v92);
      LOWORD(v44) = WORD4(v92);
      LOWORD(v45) = WORD5(v92);
      char v46 = WORD6(v92);
      LOWORD(v47) = HIWORD(v92);
      *(_DWORD *)uint64_t v90 = v91;
      *(_OWORD *)&v90[4] = v92;
    }

    while ((int)_So9NSDecimala__exponent_getter(v90) > 0);
  }

  *(_DWORD *)uint64_t v90 = v23;
  *(_WORD *)&v90[4] = v40;
  *(_WORD *)&v90[6] = v41._rawValue;
  *(_WORD *)&v90[8] = v42;
  *(_WORD *)&v90[10] = v43;
  *(_WORD *)&v90[12] = (_WORD)v44;
  *(_WORD *)&v90[14] = v45;
  *(_WORD *)&v90[16] = v46;
  *(_WORD *)&v90[18] = v47;
  if (!_So9NSDecimala__exponent_getter(v90))
  {
    _So9NSDecimala__exponent_setter(1LL, &v91);
    unint64_t v23 = v91;
    LOWORD(v40) = v92;
    LOWORD(v41._rawValue) = WORD1(v92);
    uint64_t v42 = WORD2(v92);
    LOWORD(v43) = WORD3(v92);
    LOWORD(v44) = WORD4(v92);
    LOWORD(v45) = WORD5(v92);
    char v46 = WORD6(v92);
    LOWORD(v47) = HIWORD(v92);
  }

  uint64_t v88 = v23;
  *(_DWORD *)uint64_t v90 = v23;
  *(_WORD *)&v90[4] = v40;
  *(_WORD *)&v90[6] = v41._rawValue;
  uint64_t v50 = v46;
  uint64_t v51 = v42;
  *(_WORD *)&v90[8] = v42;
  *(_WORD *)&v90[10] = v43;
  *(_WORD *)&v90[12] = (_WORD)v44;
  *(_WORD *)&v90[14] = v45;
  LODWORD(v89) = v50;
  *(_WORD *)&v90[16] = v50;
  *(_WORD *)&v90[18] = v47;
  if (!_So9NSDecimala__length_getter(v90))
  {
LABEL_42:
    uint64_t v52 = v88;
    uint64_t v53 = v89;
LABEL_43:
    *(_DWORD *)uint64_t v90 = v52;
    *(_WORD *)&v90[4] = v40;
    *(_WORD *)&v90[6] = v41._rawValue;
    *(_WORD *)&v90[8] = v51;
    *(_WORD *)&v90[10] = v43;
    *(_WORD *)&v90[12] = (_WORD)v44;
    *(_WORD *)&v90[14] = v45;
    *(_WORD *)&v90[16] = v53;
    *(_WORD *)&v90[18] = v47;
    id v69 = v53;
    uint64_t v70 = v52;
    uint64_t v71 = _So9NSDecimala__exponent_getter(v90);
    char v72 = v70;
    if (v71 <= 0)
    {
      uint64_t v88 = v70;
      *(_DWORD *)uint64_t v90 = v70;
      *(_WORD *)&v90[4] = v40;
      *(_WORD *)&v90[6] = v41._rawValue;
      *(_WORD *)&v90[8] = v51;
      *(_WORD *)&v90[10] = v43;
      *(_WORD *)&v90[12] = (_WORD)v44;
      *(_WORD *)&v90[14] = v45;
      char v73 = v69;
      *(_WORD *)&v90[16] = v69;
      *(_WORD *)&v90[18] = v47;
      for (i = v51; _So9NSDecimala__exponent_getter(v90); *(_OWORD *)&v90[4] = v92)
      {
        v75._countAndFlagsBits = 48LL;
        v75._object = (void *)0xE100000000000000LL;
        String.append(_:)(v75);
        *(_DWORD *)uint64_t v90 = v88;
        *(_WORD *)&v90[4] = v40;
        *(_WORD *)&v90[6] = v41._rawValue;
        *(_WORD *)&v90[8] = i;
        *(_WORD *)&v90[10] = v43;
        *(_WORD *)&v90[12] = (_WORD)v44;
        *(_WORD *)&v90[14] = v45;
        *(_WORD *)&v90[16] = v73;
        *(_WORD *)&v90[18] = v47;
        uint64_t v76 = _So9NSDecimala__exponent_getter(v90);
        _So9NSDecimala__exponent_setter((v76 + 1), &v91);
        LOWORD(v40) = v92;
        LOWORD(v41._rawValue) = WORD1(v92);
        i = WORD2(v92);
        LOWORD(v43) = WORD3(v92);
        LOWORD(v44) = WORD4(v92);
        LOWORD(v45) = WORD5(v92);
        char v73 = WORD6(v92);
        LOWORD(v47) = HIWORD(v92);
        uint64_t v88 = v91;
        *(_DWORD *)uint64_t v90 = v91;
      }

      LODWORD(v89) = v73;
      v77._countAndFlagsBits = 46LL;
      v77._object = (void *)0xE100000000000000LL;
      String.append(_:)(v77);
      v78._countAndFlagsBits = 48LL;
      v78._object = (void *)0xE100000000000000LL;
      String.append(_:)(v78);
      LOWORD(v51) = i;
      char v72 = v88;
    }

    else
    {
      LODWORD(v89) = v69;
    }

    *(_DWORD *)uint64_t v90 = v72;
    *(_WORD *)&v90[4] = v40;
    *(_WORD *)&v90[6] = v41._rawValue;
    *(_WORD *)&v90[8] = v51;
    *(_WORD *)&v90[10] = v43;
    *(_WORD *)&v90[12] = (_WORD)v44;
    *(_WORD *)&v90[14] = v45;
    *(_WORD *)&v90[16] = v89;
    *(_WORD *)&v90[18] = v47;
    if (_So9NSDecimala__isNegative_getter(v90))
    {
      v79._countAndFlagsBits = 45LL;
      v79._object = (void *)0xE100000000000000LL;
      String.append(_:)(v79);
    }

    *(void *)uint64_t v90 = v93;
    *(void *)&v90[8] = v94;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ReversedCollection<String>);
    lazy protocol witness table accessor for type [String] and conformance [A]( (unint64_t *)&lazy protocol witness table cache variable for type ReversedCollection<String> and conformance ReversedCollection<A>,  &demangling cache variable for type metadata for ReversedCollection<String>,  MEMORY[0x189619928]);
    String.init<A>(_:)();
LABEL_51:
    BigString.init(_:)();
    uint64_t result = AttributedString.init(_:attributes:)( (__int128 *)&v91,  MEMORY[0x18961AFF0],  MEMORY[0x18961AFF8],  (uint64_t *)v90);
    void *v86 = *(void *)v90;
    return result;
  }

  uint64_t v85 = 0LL;
  uint64_t v52 = v88;
  uint64_t v53 = v89;
  while (1)
  {
    uint64_t v88 = v52;
    LODWORD(v89) = v53;
    *(_DWORD *)uint64_t v90 = v52;
    *(_WORD *)&v90[4] = v40;
    *(_WORD *)&v90[6] = v41._rawValue;
    *(_WORD *)&v90[8] = v51;
    *(_WORD *)&v90[10] = v43;
    *(_WORD *)&v90[12] = (_WORD)v44;
    *(_WORD *)&v90[14] = v45;
    *(_WORD *)&v90[16] = v53;
    *(_WORD *)&v90[18] = v47;
    if (!_So9NSDecimala__exponent_getter(v90))
    {
      uint64_t v87 = v51;
      v54._countAndFlagsBits = 46LL;
      v54._object = (void *)0xE100000000000000LL;
      String.append(_:)(v54);
      LOWORD(v51) = v87;
    }

    *(_DWORD *)uint64_t v90 = v88;
    *(_WORD *)&v90[4] = v40;
    *(_WORD *)&v90[6] = v41._rawValue;
    *(_WORD *)&v90[8] = v51;
    *(_WORD *)&v90[10] = v43;
    *(_WORD *)&v90[12] = (_WORD)v44;
    *(_WORD *)&v90[14] = v45;
    *(_WORD *)&v90[16] = v89;
    *(_WORD *)&v90[18] = v47;
    uint64_t v55 = _So9NSDecimala__exponent_getter(v90);
    _So9NSDecimala__exponent_setter((v55 + 1), &v91);
    uint64_t v56 = v91;
    id v57 = (unsigned __int16)v92;
    LOWORD(v43) = WORD1(v92);
    uint64_t v87 = WORD3(v92);
    uint64_t v88 = WORD2(v92);
    uint64_t v84 = WORD4(v92);
    uint64_t v82 = WORD5(v92);
    __int128 v83 = WORD6(v92);
    uint64_t v81 = HIWORD(v92);
    NSDecimal.asVariableLengthInteger()( v91 | ((unint64_t)(unsigned __int16)v92 << 32) | ((unint64_t)WORD1(v92) << 48),  WORD2(v92) | ((unint64_t)WORD3(v92) << 16) | ((unint64_t)WORD4(v92) << 32) | ((unint64_t)WORD5(v92) << 48),  WORD6(v92) | (HIWORD(v92) << 16));
    uint64_t v51 = v58;
    uint64_t v40 = *(void *)(v58 + 16);
    uint64_t v89 = v57;
    if (v40)
    {
      uint64_t v80 = v56;
      v41._rawValue = (void *)static Array._allocateBufferUninitialized(minimumCapacity:)();
      uint64_t v44 = (char *)v41._rawValue + 30;
      *((void *)v41._rawValue + 2) = v40;
      LOWORD(v47) = 2 * v40;
      bzero((char *)v41._rawValue + 32, 2 * v40);
      int v59 = *(unsigned __int16 *)(2 * v40 + v51 + 30);
      LOWORD(v60) = *(_WORD *)(2 * v40 + v51 + 30) / 0xAu;
      while (1)
      {
        *(_WORD *)&v44[2 * v40] = v60;
        LODWORD(v45) = v59 % 0xA;
        if (v40 == 1) {
          break;
        }
        int v59 = *(unsigned __int16 *)(v51 + 28 + 2 * v40) | ((_DWORD)v45 << 16);
        uint64_t v60 = v59 / 0xA;
        int v61 = v40 - 2;
        --v40;
        if (v61 >= *((void *)v41._rawValue + 2))
        {
          __break(1u);
          goto LABEL_42;
        }
      }

      LODWORD(v56) = v80;
    }

    else
    {
      LODWORD(v45) = 0;
      v41._rawValue = (void *)MEMORY[0x18961AFE8];
    }

    uint64_t v62 = *((void *)v41._rawValue + 2);
    if (v62 && !*((_WORD *)v41._rawValue + v62 + 15))
    {
      do
      {
        *((void *)v41._rawValue + 2) = v62 - 1;
        if (v62 == 1) {
          break;
        }
      }

      while (!*((unsigned __int16 *)v41._rawValue + v62-- + 14));
    }

    swift_bridgeObjectRelease();
    *(_DWORD *)uint64_t v90 = v56;
    *(_WORD *)&v90[4] = v89;
    *(_WORD *)&v90[6] = v43;
    *(_WORD *)&v90[8] = v88;
    *(_WORD *)&v90[10] = v87;
    *(_WORD *)&v90[12] = v84;
    *(_WORD *)&v90[14] = v82;
    *(_WORD *)&v90[16] = v83;
    *(_WORD *)&v90[18] = v81;
    NSDecimal.copyVariableLengthInteger(_:)(v41);
    if (v64) {
      break;
    }
    uint64_t v85 = 0LL;
    char v65 = *((void *)v41._rawValue + 2);
    swift_bridgeObjectRelease();
    if (HIDWORD(v65)) {
      goto LABEL_53;
    }
    _So9NSDecimala__length_setter(v65, v90);
    unsigned __int8 v91 = *(_DWORD *)v90;
    unsigned __int8 v92 = *(_OWORD *)&v90[4];
    *(void *)uint64_t v90 = v45 | 0x30;
    v66._countAndFlagsBits = MEMORY[0x186E1B6AC](v90, 1LL);
    String.append(_:)(v66);
    swift_bridgeObjectRelease();
    LOWORD(v40) = v92;
    LOWORD(v41._rawValue) = WORD1(v92);
    uint64_t v87 = WORD2(v92);
    uint64_t v88 = v91;
    LOWORD(v43) = WORD3(v92);
    LOWORD(v44) = WORD4(v92);
    LOWORD(v45) = WORD5(v92);
    uint64_t v67 = WORD6(v92);
    LOWORD(v47) = HIWORD(v92);
    *(_DWORD *)uint64_t v90 = v91;
    *(_OWORD *)&v90[4] = v92;
    unint64_t v68 = _So9NSDecimala__length_getter(v90);
    uint64_t v53 = v67;
    uint64_t v51 = v87;
    uint64_t v52 = v88;
    if (!v68) {
      goto LABEL_43;
    }
  }

  swift_bridgeObjectRelease();
  swift_unexpectedError();
  __break(1u);
LABEL_53:
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t NSDecimal.FormatStyle.Attributed.locale(_:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = type metadata accessor for NSDecimal.FormatStyle.Percent(0LL);
  MEMORY[0x1895F8858](v5);
  uint64_t v7 = (uint64_t *)((char *)&v23 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v8 = type metadata accessor for NSDecimal.FormatStyle.Currency(0LL);
  MEMORY[0x1895F8858](v8);
  uint64_t v10 = (uint64_t *)((char *)&v23 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v11 = type metadata accessor for NSDecimal.FormatStyle(0LL);
  MEMORY[0x1895F8858](v11);
  uint64_t v13 = (uint64_t *)((char *)&v23 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v14 = type metadata accessor for NSDecimal.FormatStyle.Attributed.Style(0LL);
  MEMORY[0x1895F8858](v14);
  uint64_t v16 = (char *)&v23 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v17 = *a1;
  uint64_t v18 = a1[1];
  outlined init with copy of ICUNumberFormatter.Signature( v2,  a2,  type metadata accessor for NSDecimal.FormatStyle.Attributed);
  outlined init with copy of ICUNumberFormatter.Signature( v2,  (uint64_t)v16,  type metadata accessor for NSDecimal.FormatStyle.Attributed.Style);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload)
  {
    if (EnumCaseMultiPayload == 1)
    {
      outlined init with take of ICUNumberFormatter.Signature( (uint64_t)v16,  (uint64_t)v10,  type metadata accessor for NSDecimal.FormatStyle.Currency);
      swift_unknownObjectRetain();
      swift_unknownObjectRelease();
      *uint64_t v10 = v17;
      v10[1] = v18;
      outlined destroy of ICUNumberFormatter.Signature( a2,  type metadata accessor for NSDecimal.FormatStyle.Attributed.Style);
      outlined init with copy of ICUNumberFormatter.Signature( (uint64_t)v10,  a2,  type metadata accessor for NSDecimal.FormatStyle.Currency);
      swift_storeEnumTagMultiPayload();
      uint64_t v20 = (uint64_t)v10;
      uint64_t v21 = type metadata accessor for NSDecimal.FormatStyle.Currency;
    }

    else
    {
      outlined init with take of ICUNumberFormatter.Signature( (uint64_t)v16,  (uint64_t)v7,  type metadata accessor for NSDecimal.FormatStyle.Percent);
      swift_unknownObjectRetain();
      swift_unknownObjectRelease();
      *uint64_t v7 = v17;
      v7[1] = v18;
      outlined destroy of ICUNumberFormatter.Signature( a2,  type metadata accessor for NSDecimal.FormatStyle.Attributed.Style);
      outlined init with copy of ICUNumberFormatter.Signature( (uint64_t)v7,  a2,  type metadata accessor for NSDecimal.FormatStyle.Percent);
      swift_storeEnumTagMultiPayload();
      uint64_t v20 = (uint64_t)v7;
      uint64_t v21 = type metadata accessor for NSDecimal.FormatStyle.Percent;
    }
  }

  else
  {
    outlined init with take of ICUNumberFormatter.Signature( (uint64_t)v16,  (uint64_t)v13,  type metadata accessor for NSDecimal.FormatStyle);
    swift_unknownObjectRetain();
    swift_unknownObjectRelease();
    *uint64_t v13 = v17;
    v13[1] = v18;
    outlined destroy of ICUNumberFormatter.Signature( a2,  type metadata accessor for NSDecimal.FormatStyle.Attributed.Style);
    outlined init with copy of ICUNumberFormatter.Signature( (uint64_t)v13,  a2,  type metadata accessor for NSDecimal.FormatStyle);
    swift_storeEnumTagMultiPayload();
    uint64_t v20 = (uint64_t)v13;
    uint64_t v21 = type metadata accessor for NSDecimal.FormatStyle;
  }

  return outlined destroy of ICUNumberFormatter.Signature(v20, v21);
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance NSDecimal.FormatStyle.Attributed.CodingKeys()
{
  return 0x656C797473LL;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance NSDecimal.FormatStyle.Attributed.CodingKeys@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  if (a1 == 0x656C797473LL && a2 == 0xE500000000000000LL)
  {
    uint64_t result = swift_bridgeObjectRelease();
    char v7 = 0;
  }

  else
  {
    char v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
    uint64_t result = swift_bridgeObjectRelease();
    char v7 = v5 ^ 1;
  }

  *a3 = v7 & 1;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance NSDecimal.FormatStyle.Attributed.CodingKeys()
{
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance NSDecimal.FormatStyle.Attributed.CodingKeys()
{
  return CodingKey.debugDescription.getter();
}

void NSDecimal.FormatStyle.Percent.hash(into:)(uint64_t a1)
{
}

void NSDecimal.FormatStyle.hash(into:)(uint64_t a1, uint64_t (*a2)(void))
{
  void (*v15)(void *__return_ptr, uint64_t, uint64_t);
  uint64_t v16;
  Swift::UInt8 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  id v29;
  id v30;
  id v31;
  id v32;
  id v33;
  id v34;
  id v35;
  id v36;
  id v37;
  void *v38;
  void *v39;
  id v40;
  void *v41;
  id v42;
  id v43;
  void *v44;
  void *v45;
  void *v46;
  id v47;
  id v48;
  void *v49;
  void *v50;
  uint64_t v51;
  uint64_t v52;
  Swift::UInt v53;
  Swift::UInt v54;
  Swift::UInt8 v55;
  Swift::UInt8 v56;
  Swift::UInt8 v57;
  uint64_t v58;
  Swift::UInt64 v59;
  Swift::UInt64 v60;
  int v61;
  Swift::UInt v62;
  int v63;
  unsigned int v64;
  uint64_t v65;
  int v66;
  Swift::UInt v67;
  int *v68;
  uint64_t v69;
  char *v70;
  uint64_t v71;
  int v72;
  Swift::UInt v73;
  Swift::UInt64 v74;
  Swift::UInt v75;
  void *v76;
  id v77;
  void *v78;
  uint64_t (*v79)(void);
  void *v80;
  char *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  _BYTE v85[144];
  char v86[8];
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  void *v92;
  void *v93;
  void *v94;
  void *v95;
  void *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  char v100;
  char v101;
  char v102;
  char v103;
  void v104[18];
  _BYTE v105[144];
  _BYTE v106[152];
  uint64_t v4 = v2;
  uint64_t v6 = type metadata accessor for FloatingPointRoundingRule();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v82 = v6;
  __int128 v83 = v7;
  MEMORY[0x1895F8858](v6);
  uint64_t v81 = (char *)&v76 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
  MEMORY[0x1895F8858](v9);
  uint64_t v84 = (uint64_t)&v76 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = v2[1];
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v13 = *(uint64_t (**)(uint64_t, uint64_t))(v11 + 48);
  swift_unknownObjectRetain();
  if ((v13(ObjectType, v11) & 1) == 0)
  {
    Hasher._combine(_:)(0);
    (*(void (**)(uint64_t, uint64_t))(v11 + 64))(ObjectType, v11);
    String.hash(into:)();
    swift_bridgeObjectRelease();
    uint64_t v15 = *(void (**)(void *__return_ptr, uint64_t, uint64_t))(v11 + 464);
    swift_unknownObjectRetain();
    v15(v104, ObjectType, v11);
    swift_unknownObjectRelease();
    outlined init with take of LocalePreferences?( (uint64_t)v104,  (uint64_t)v105,  (uint64_t *)&demangling cache variable for type metadata for LocalePreferences?);
    outlined init with take of LocalePreferences?( (uint64_t)v105,  (uint64_t)v106,  (uint64_t *)&demangling cache variable for type metadata for LocalePreferences?);
    if (_s10Foundation17LocalePreferencesVSgWOg((uint64_t)v106) == 1)
    {
      Swift::UInt8 v14 = 0;
      goto LABEL_5;
    }

    outlined init with take of LocalePreferences?( (uint64_t)v105,  (uint64_t)v86,  (uint64_t *)&demangling cache variable for type metadata for LocalePreferences?);
    Hasher._combine(_:)(1u);
    if (v86[0] == 2)
    {
      uint64_t v17 = 0;
    }

    else
    {
      uint64_t v17 = v86[0] & 1;
      Hasher._combine(_:)(1u);
    }

    Hasher._combine(_:)(v17);
    uint64_t v18 = v87;
    __int128 v79 = a2;
    if (v87)
    {
      Hasher._combine(_:)(1u);
      Hasher._combine(_:)(*(void *)(v18 + 16));
      uint64_t v19 = *(void *)(v18 + 16);
      if (v19)
      {
        outlined retain of LocalePreferences?( (uint64_t)v105,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined copy of LocalePreferences?);
        swift_bridgeObjectRetain();
        uint64_t v20 = v18 + 40;
        do
        {
          swift_bridgeObjectRetain();
          String.hash(into:)();
          swift_bridgeObjectRelease();
          v20 += 16LL;
          --v19;
        }

        while (v19);
        swift_bridgeObjectRelease();
        if (!v88)
        {
LABEL_14:
          Hasher._combine(_:)(0);
          if (!v89) {
            goto LABEL_15;
          }
          goto LABEL_22;
        }

void static NSDecimal.FormatStyle.Percent.== infix(_:_:)(__int128 *a1, __int128 *a2)
{
  static NSDecimal.FormatStyle.== infix(_:_:)(a1, a2, type metadata accessor for NSDecimal.FormatStyle.Percent);
}

void static NSDecimal.FormatStyle.== infix(_:_:)( __int128 *a1, __int128 *a2, uint64_t (*a3)(void))
{
  __int128 v6 = *a1;
  __int128 v8 = *a2;
  __int128 v9 = v6;
  if ((specialized static Locale.== infix(_:_:)((uint64_t)&v9, (uint64_t)&v8) & 1) != 0)
  {
    uint64_t v7 = a3(0LL);
    specialized static NumberFormatStyleConfiguration.Collection.== infix(_:_:)( (uint64_t)a1 + *(int *)(v7 + 20),  (uint64_t)a2 + *(int *)(v7 + 20));
  }

uint64_t NSDecimal.FormatStyle.Percent.encode(to:)(void *a1)
{
  return NSDecimal.FormatStyle.encode(to:)( a1,  &demangling cache variable for type metadata for KeyedEncodingContainer<NSDecimal.FormatStyle.Percent.CodingKeys>,  (void (*)(void))lazy protocol witness table accessor for type NSDecimal.FormatStyle.Percent.CodingKeys and conformance NSDecimal.FormatStyle.Percent.CodingKeys,  (uint64_t)&unk_189C7D8C8,  (void (*)(void))type metadata accessor for NSDecimal.FormatStyle.Percent);
}

uint64_t NSDecimal.FormatStyle.encode(to:)( void *a1, uint64_t *a2, void (*a3)(void), uint64_t a4, void (*a5)(void))
{
  Swift::UInt8 v14 = a5;
  __int128 v8 = v5;
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(a2);
  uint64_t v15 = *(void *)(v10 - 8);
  MEMORY[0x1895F8858](v10);
  uint64_t v12 = (char *)&v14 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  a3();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  __int128 v16 = *v8;
  char v17 = 0;
  lazy protocol witness table accessor for type Locale and conformance Locale();
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v6)
  {
    v14(0LL);
    LOBYTE(v16) = 1;
    type metadata accessor for NumberFormatStyleConfiguration.Collection(0LL);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( &lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.Collection and conformance NumberFormatStyleConfiguration.Collection,  type metadata accessor for NumberFormatStyleConfiguration.Collection,  (uint64_t)&protocol conformance descriptor for NumberFormatStyleConfiguration.Collection);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
  }

  return (*(uint64_t (**)(char *, uint64_t))(v15 + 8))(v12, v10);
}

Swift::Int NSDecimal.FormatStyle.Percent.hashValue.getter()
{
  return NSDecimal.FormatStyle.hashValue.getter((void (*)(_BYTE *))NSDecimal.FormatStyle.Percent.hash(into:));
}

Swift::Int NSDecimal.FormatStyle.hashValue.getter(void (*a1)(_BYTE *))
{
  return Hasher._finalize()();
}

uint64_t NSDecimal.FormatStyle.Percent.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v23 = a2;
  uint64_t v3 = (int *)type metadata accessor for NumberFormatStyleConfiguration.Collection(0LL);
  MEMORY[0x1895F8858](v3);
  uint64_t v24 = (char *)&v23 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v25 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<NSDecimal.FormatStyle.Percent.CodingKeys>);
  uint64_t v5 = *(void *)(v25 - 8);
  MEMORY[0x1895F8858](v25);
  uint64_t v7 = (char *)&v23 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = type metadata accessor for NSDecimal.FormatStyle.Percent(0LL);
  uint64_t v9 = MEMORY[0x1895F8858](v8);
  uint64_t v11 = (_OWORD *)((char *)&v23 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v12 = (uint64_t)v11 + *(int *)(v9 + 20);
  uint64_t v13 = v12 + v3[9];
  uint64_t v14 = type metadata accessor for FloatingPointRoundingRule();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 56LL))(v13, 1LL, 1LL, v14);
  *(void *)uint64_t v12 = 0x4059000000000000LL;
  *(_BYTE *)(v12 + 8) = 0;
  *(void *)(v12 + 16) = 0LL;
  *(void *)(v12 + 24) = 0LL;
  *(void *)(v12 + 32) = 0LL;
  *(void *)(v12 + 40) = 0x1FFFFFFFELL;
  *(void *)(v12 + 56) = 0LL;
  *(void *)(v12 + 64) = 0LL;
  *(void *)(v12 + 48) = 0LL;
  *(_DWORD *)(v12 + 72) = 131584;
  *(_WORD *)(v12 + 76) = 512;
  uint64_t v15 = v12 + v3[10];
  *(void *)uint64_t v15 = 0LL;
  *(_BYTE *)(v15 + 8) = -1;
  *(_BYTE *)(v12 + v3[11]) = 3;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type NSDecimal.FormatStyle.Percent.CodingKeys and conformance NSDecimal.FormatStyle.Percent.CodingKeys();
  uint64_t v16 = (uint64_t)v26;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v16)
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
    uint64_t v22 = type metadata accessor for NumberFormatStyleConfiguration.Collection;
    uint64_t v21 = v12;
  }

  else
  {
    char v28 = 0;
    lazy protocol witness table accessor for type Locale and conformance Locale();
    uint64_t v17 = v25;
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    uint64_t v26 = v11;
    _OWORD *v11 = v27;
    LOBYTE(v27) = 1;
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( &lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.Collection and conformance NumberFormatStyleConfiguration.Collection,  type metadata accessor for NumberFormatStyleConfiguration.Collection,  (uint64_t)&protocol conformance descriptor for NumberFormatStyleConfiguration.Collection);
    uint64_t v19 = (uint64_t)v24;
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v17);
    outlined assign with take of NumberFormatStyleConfiguration.Collection(v19, v12);
    uint64_t v20 = (uint64_t)v26;
    outlined init with copy of ICUNumberFormatter.Signature( (uint64_t)v26,  v23,  type metadata accessor for NSDecimal.FormatStyle.Percent);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
    uint64_t v21 = v20;
    uint64_t v22 = type metadata accessor for NSDecimal.FormatStyle.Percent;
  }

  return outlined destroy of ICUNumberFormatter.Signature(v21, v22);
}

uint64_t protocol witness for FormatStyle.format(_:) in conformance NSDecimal.FormatStyle.Percent@<X0>( uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  return protocol witness for FormatStyle.format(_:) in conformance NSDecimal.FormatStyle( a1,  (uint64_t (*)(void, void, void))NSDecimal.FormatStyle.Percent.format(_:),  a2);
}

double protocol witness for FormatStyle.locale(_:) in conformance NSDecimal.FormatStyle.Percent@<D0>( __n128 *a1@<X0>, __n128 *a2@<X8>)
{
  *(void *)&double result = protocol witness for FormatStyle.locale(_:) in conformance NSDecimal.FormatStyle( a1,  type metadata accessor for NSDecimal.FormatStyle.Percent,  a2).n128_u64[0];
  return result;
}

uint64_t protocol witness for Decodable.init(from:) in conformance NSDecimal.FormatStyle.Percent@<X0>( void *a1@<X0>, uint64_t a2@<X8>)
{
  return NSDecimal.FormatStyle.Percent.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance NSDecimal.FormatStyle.Percent(void *a1)
{
  return NSDecimal.FormatStyle.Percent.encode(to:)(a1);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance NSDecimal.FormatStyle.Percent( uint64_t a1, uint64_t a2)
{
  return protocol witness for Hashable.hashValue.getter in conformance String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format( a1,  a2,  (void (*)(_BYTE *))NSDecimal.FormatStyle.Percent.hash(into:));
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance NSDecimal.FormatStyle.Percent( uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for Hashable._rawHashValue(seed:) in conformance String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format( a1,  a2,  a3,  (void (*)(_BYTE *))NSDecimal.FormatStyle.Percent.hash(into:));
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance NSDecimal.FormatStyle( __int128 *a1, __int128 *a2, uint64_t a3)
{
  __int128 v6 = *a1;
  __int128 v8 = *a2;
  __int128 v9 = v6;
  if ((specialized static Locale.== infix(_:_:)((uint64_t)&v9, (uint64_t)&v8) & 1) != 0) {
    return static NumberFormatStyleConfiguration.Collection.== infix(_:_:)( (char *)a1 + *(int *)(a3 + 20),  (char *)a2 + *(int *)(a3 + 20));
  }
  else {
    return 0LL;
  }
}

void NSDecimal.FormatStyle.Currency.hash(into:)(uint64_t a1)
{
  void (*v14)(void *__return_ptr, uint64_t, uint64_t);
  uint64_t v15;
  Swift::UInt8 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  id v27;
  id v28;
  id v29;
  id v30;
  id v31;
  void *v32;
  void *v33;
  id v34;
  id v35;
  id v36;
  id v37;
  id v38;
  void *v39;
  id v40;
  void *v41;
  id v42;
  id v43;
  void *v44;
  uint64_t v45;
  uint64_t v46;
  Swift::UInt v47;
  Swift::UInt v48;
  Swift::UInt8 v49;
  Swift::UInt8 v50;
  Swift::UInt8 v51;
  uint64_t v52;
  Swift::UInt64 v53;
  Swift::UInt64 v54;
  uint64_t v55;
  int v56;
  Swift::UInt v57;
  unint64_t v58;
  unsigned int v59;
  int v60;
  Swift::UInt v61;
  int *v62;
  char *v63;
  uint64_t v64;
  int v65;
  Swift::UInt v66;
  Swift::UInt64 v67;
  Swift::UInt v68;
  uint64_t v69;
  void *v70;
  id v71;
  char *v72;
  void *v73;
  id v74;
  char *v75;
  uint64_t v76;
  uint64_t v77;
  _BYTE v78[144];
  char v79[8];
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  void *v85;
  void *v86;
  void *v87;
  void *v88;
  void *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  char v93;
  char v94;
  char v95;
  char v96;
  void v97[18];
  _BYTE v98[144];
  _BYTE v99[152];
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for FloatingPointRoundingRule();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v76 = v4;
  char v77 = v5;
  MEMORY[0x1895F8858](v4);
  char v75 = (char *)&v69 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
  MEMORY[0x1895F8858](v7);
  __int128 v9 = (char *)&v69 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = *(void *)(v1 + 8);
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t))(v10 + 48);
  swift_unknownObjectRetain();
  if ((v12(ObjectType, v10) & 1) == 0)
  {
    Hasher._combine(_:)(0);
    (*(void (**)(uint64_t, uint64_t))(v10 + 64))(ObjectType, v10);
    String.hash(into:)();
    swift_bridgeObjectRelease();
    uint64_t v14 = *(void (**)(void *__return_ptr, uint64_t, uint64_t))(v10 + 464);
    swift_unknownObjectRetain();
    v14(v97, ObjectType, v10);
    swift_unknownObjectRelease();
    outlined init with take of LocalePreferences?( (uint64_t)v97,  (uint64_t)v98,  (uint64_t *)&demangling cache variable for type metadata for LocalePreferences?);
    outlined init with take of LocalePreferences?( (uint64_t)v98,  (uint64_t)v99,  (uint64_t *)&demangling cache variable for type metadata for LocalePreferences?);
    if (_s10Foundation17LocalePreferencesVSgWOg((uint64_t)v99) == 1)
    {
      Swift::UInt8 v13 = 0;
      goto LABEL_5;
    }

    outlined init with take of LocalePreferences?( (uint64_t)v98,  (uint64_t)v79,  (uint64_t *)&demangling cache variable for type metadata for LocalePreferences?);
    Hasher._combine(_:)(1u);
    if (v79[0] == 2)
    {
      uint64_t v16 = 0;
    }

    else
    {
      uint64_t v16 = v79[0] & 1;
      Hasher._combine(_:)(1u);
    }

    Hasher._combine(_:)(v16);
    uint64_t v17 = v80;
    if (v80)
    {
      Hasher._combine(_:)(1u);
      Hasher._combine(_:)(*(void *)(v17 + 16));
      uint64_t v18 = *(void *)(v17 + 16);
      if (v18)
      {
        outlined retain of LocalePreferences?( (uint64_t)v98,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined copy of LocalePreferences?);
        swift_bridgeObjectRetain();
        uint64_t v19 = v17 + 40;
        do
        {
          swift_bridgeObjectRetain();
          String.hash(into:)();
          swift_bridgeObjectRelease();
          v19 += 16LL;
          --v18;
        }

        while (v18);
        swift_bridgeObjectRelease();
        if (!v81)
        {
LABEL_14:
          Hasher._combine(_:)(0);
          if (!v82) {
            goto LABEL_15;
          }
          goto LABEL_22;
        }

uint64_t NSDecimal.FormatStyle.Currency.encode(to:)(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<NSDecimal.FormatStyle.Currency.CodingKeys>);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1895F8858](v5);
  uint64_t v8 = &v10[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type NSDecimal.FormatStyle.Currency.CodingKeys and conformance NSDecimal.FormatStyle.Currency.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  __int128 v11 = *v3;
  v10[15] = 0;
  lazy protocol witness table accessor for type Locale and conformance Locale();
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v2)
  {
    LOBYTE(v11) = 1;
    KeyedEncodingContainer.encode(_:forKey:)();
    type metadata accessor for NSDecimal.FormatStyle.Currency(0LL);
    LOBYTE(v11) = 2;
    type metadata accessor for CurrencyFormatStyleConfiguration.Collection(0LL);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( &lazy protocol witness table cache variable for type CurrencyFormatStyleConfiguration.Collection and conformance CurrencyFormatStyleConfiguration.Collection,  type metadata accessor for CurrencyFormatStyleConfiguration.Collection,  (uint64_t)&protocol conformance descriptor for CurrencyFormatStyleConfiguration.Collection);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
  }

  return (*(uint64_t (**)(_BYTE *, uint64_t))(v6 + 8))(v8, v5);
}

Swift::Int NSDecimal.FormatStyle.Currency.hashValue.getter()
{
  return NSDecimal.FormatStyle.hashValue.getter((void (*)(_BYTE *))NSDecimal.FormatStyle.Currency.hash(into:));
}

uint64_t NSDecimal.FormatStyle.Currency.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v20 = a2;
  uint64_t v3 = type metadata accessor for CurrencyFormatStyleConfiguration.Collection(0LL);
  MEMORY[0x1895F8858](v3);
  uint64_t v5 = (char *)&v19 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<NSDecimal.FormatStyle.Currency.CodingKeys>);
  uint64_t v6 = *(void *)(v22 - 8);
  MEMORY[0x1895F8858](v22);
  uint64_t v8 = (char *)&v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = type metadata accessor for NSDecimal.FormatStyle.Currency(0LL);
  MEMORY[0x1895F8858](v9);
  __int128 v11 = (char *)&v19 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = a1[3];
  uint64_t v23 = a1;
  __swift_project_boxed_opaque_existential_1(a1, v12);
  lazy protocol witness table accessor for type NSDecimal.FormatStyle.Currency.CodingKeys and conformance NSDecimal.FormatStyle.Currency.CodingKeys();
  uint64_t v21 = v8;
  uint64_t v13 = v24;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v13) {
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v23);
  }
  uint64_t v24 = v3;
  uint64_t v14 = (uint64_t)v5;
  char v26 = 0;
  lazy protocol witness table accessor for type Locale and conformance Locale();
  uint64_t v15 = v21;
  uint64_t v16 = v22;
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  *(_OWORD *)__int128 v11 = v25;
  LOBYTE(v25) = 1;
  *((void *)v11 + 2) = KeyedDecodingContainer.decode(_:forKey:)();
  *((void *)v11 + 3) = v17;
  LOBYTE(v25) = 2;
  lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( &lazy protocol witness table cache variable for type CurrencyFormatStyleConfiguration.Collection and conformance CurrencyFormatStyleConfiguration.Collection,  type metadata accessor for CurrencyFormatStyleConfiguration.Collection,  (uint64_t)&protocol conformance descriptor for CurrencyFormatStyleConfiguration.Collection);
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v15, v16);
  outlined init with take of ICUNumberFormatter.Signature( v14,  (uint64_t)&v11[*(int *)(v9 + 24)],  type metadata accessor for CurrencyFormatStyleConfiguration.Collection);
  outlined init with copy of ICUNumberFormatter.Signature( (uint64_t)v11,  v20,  type metadata accessor for NSDecimal.FormatStyle.Currency);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v23);
  return outlined destroy of ICUNumberFormatter.Signature( (uint64_t)v11,  type metadata accessor for NSDecimal.FormatStyle.Currency);
}

uint64_t protocol witness for FormatStyle.format(_:) in conformance NSDecimal.FormatStyle.Currency@<X0>( uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  return protocol witness for FormatStyle.format(_:) in conformance NSDecimal.FormatStyle( a1,  (uint64_t (*)(void, void, void))NSDecimal.FormatStyle.Currency.format(_:),  a2);
}

uint64_t protocol witness for FormatStyle.format(_:) in conformance NSDecimal.FormatStyle@<X0>( uint64_t a1@<X0>, uint64_t (*a2)(void, void, void)@<X3>, uint64_t *a3@<X8>)
{
  uint64_t result = a2(*(void *)a1, *(void *)(a1 + 8), *(unsigned int *)(a1 + 16));
  *a3 = result;
  a3[1] = v5;
  return result;
}

double protocol witness for FormatStyle.locale(_:) in conformance NSDecimal.FormatStyle.Currency@<D0>( __n128 *a1@<X0>, __n128 *a2@<X8>)
{
  *(void *)&double result = protocol witness for FormatStyle.locale(_:) in conformance NSDecimal.FormatStyle( a1,  type metadata accessor for NSDecimal.FormatStyle.Currency,  a2).n128_u64[0];
  return result;
}

__n128 protocol witness for FormatStyle.locale(_:) in conformance NSDecimal.FormatStyle@<Q0>( __n128 *a1@<X0>, uint64_t (*a2)(void)@<X3>, __n128 *a3@<X8>)
{
  __n128 v7 = *a1;
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  __n128 result = v7;
  *a3 = v7;
  return result;
}

uint64_t protocol witness for Decodable.init(from:) in conformance NSDecimal.FormatStyle.Currency@<X0>( void *a1@<X0>, uint64_t a2@<X8>)
{
  return NSDecimal.FormatStyle.Currency.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance NSDecimal.FormatStyle.Currency(void *a1)
{
  return NSDecimal.FormatStyle.Currency.encode(to:)(a1);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance NSDecimal.FormatStyle.Currency( uint64_t a1, uint64_t a2)
{
  return protocol witness for Hashable.hashValue.getter in conformance String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format( a1,  a2,  (void (*)(_BYTE *))NSDecimal.FormatStyle.Currency.hash(into:));
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance NSDecimal.FormatStyle.Currency( uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for Hashable._rawHashValue(seed:) in conformance String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format( a1,  a2,  a3,  (void (*)(_BYTE *))NSDecimal.FormatStyle.Currency.hash(into:));
}

uint64_t NSDecimal.FormatStyle.Attributed.hash(into:)(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for NSDecimal.FormatStyle.Percent(0LL);
  MEMORY[0x1895F8858](v4);
  uint64_t v6 = (char *)&v21 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = type metadata accessor for NSDecimal.FormatStyle.Currency(0LL);
  MEMORY[0x1895F8858](v7);
  uint64_t v9 = (char *)&v21 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = type metadata accessor for NSDecimal.FormatStyle(0LL);
  MEMORY[0x1895F8858](v10);
  uint64_t v12 = (char *)&v21 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = type metadata accessor for NSDecimal.FormatStyle.Attributed.Style(0LL);
  MEMORY[0x1895F8858](v13);
  uint64_t v15 = (char *)&v21 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  outlined init with copy of ICUNumberFormatter.Signature(v2, (uint64_t)v15, v16);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload)
  {
    if (EnumCaseMultiPayload == 1)
    {
      outlined init with take of ICUNumberFormatter.Signature( (uint64_t)v15,  (uint64_t)v9,  type metadata accessor for NSDecimal.FormatStyle.Currency);
      Hasher._combine(_:)(1uLL);
      NSDecimal.FormatStyle.Currency.hash(into:)(a1);
      uint64_t v18 = (uint64_t)v9;
      uint64_t v19 = type metadata accessor for NSDecimal.FormatStyle.Currency;
    }

    else
    {
      outlined init with take of ICUNumberFormatter.Signature( (uint64_t)v15,  (uint64_t)v6,  type metadata accessor for NSDecimal.FormatStyle.Percent);
      Hasher._combine(_:)(2uLL);
      NSDecimal.FormatStyle.Percent.hash(into:)(a1);
      uint64_t v18 = (uint64_t)v6;
      uint64_t v19 = type metadata accessor for NSDecimal.FormatStyle.Percent;
    }
  }

  else
  {
    outlined init with take of ICUNumberFormatter.Signature( (uint64_t)v15,  (uint64_t)v12,  type metadata accessor for NSDecimal.FormatStyle);
    Hasher._combine(_:)(0LL);
    NSDecimal.FormatStyle.hash(into:)(a1);
    uint64_t v18 = (uint64_t)v12;
    uint64_t v19 = type metadata accessor for NSDecimal.FormatStyle;
  }

  return outlined destroy of ICUNumberFormatter.Signature(v18, v19);
}

uint64_t NSDecimal.FormatStyle.Attributed.encode(to:)(void *a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<NSDecimal.FormatStyle.Attributed.CodingKeys>);
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1895F8858](v2);
  uint64_t v5 = (char *)&v7 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type NSDecimal.FormatStyle.Attributed.CodingKeys and conformance NSDecimal.FormatStyle.Attributed.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  type metadata accessor for NSDecimal.FormatStyle.Attributed.Style(0LL);
  lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( &lazy protocol witness table cache variable for type NSDecimal.FormatStyle.Attributed.Style and conformance NSDecimal.FormatStyle.Attributed.Style,  type metadata accessor for NSDecimal.FormatStyle.Attributed.Style,  (uint64_t)&protocol conformance descriptor for NSDecimal.FormatStyle.Attributed.Style);
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
}

Swift::Int NSDecimal.FormatStyle.Attributed.hashValue.getter()
{
  return NSDecimal.FormatStyle.hashValue.getter((void (*)(_BYTE *))NSDecimal.FormatStyle.Attributed.hash(into:));
}

uint64_t NSDecimal.FormatStyle.Attributed.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v13 = a2;
  uint64_t v4 = type metadata accessor for NSDecimal.FormatStyle.Attributed.Style(0LL);
  MEMORY[0x1895F8858](v4);
  uint64_t v15 = (uint64_t)&v13 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<NSDecimal.FormatStyle.Attributed.CodingKeys>);
  uint64_t v14 = *(void *)(v6 - 8);
  MEMORY[0x1895F8858](v6);
  uint64_t v8 = (char *)&v13 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = type metadata accessor for NSDecimal.FormatStyle.Attributed(0LL);
  MEMORY[0x1895F8858](v9);
  uint64_t v11 = (char *)&v13 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type NSDecimal.FormatStyle.Attributed.CodingKeys and conformance NSDecimal.FormatStyle.Attributed.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v2)
  {
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( &lazy protocol witness table cache variable for type NSDecimal.FormatStyle.Attributed.Style and conformance NSDecimal.FormatStyle.Attributed.Style,  type metadata accessor for NSDecimal.FormatStyle.Attributed.Style,  (uint64_t)&protocol conformance descriptor for NSDecimal.FormatStyle.Attributed.Style);
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v14 + 8))(v8, v6);
    outlined init with take of ICUNumberFormatter.Signature( v15,  (uint64_t)v11,  type metadata accessor for NSDecimal.FormatStyle.Attributed.Style);
    outlined init with take of ICUNumberFormatter.Signature( (uint64_t)v11,  v13,  type metadata accessor for NSDecimal.FormatStyle.Attributed);
  }

  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t protocol witness for FormatStyle.format(_:) in conformance NSDecimal.FormatStyle.Attributed@<X0>( uint64_t a1@<X0>, void *a2@<X8>)
{
  return NSDecimal.FormatStyle.Attributed.format(_:)(*(void *)a1, *(void *)(a1 + 8), *(_DWORD *)(a1 + 16), a2);
}

uint64_t protocol witness for Decodable.init(from:) in conformance NSDecimal.FormatStyle.Attributed@<X0>( void *a1@<X0>, uint64_t a2@<X8>)
{
  return NSDecimal.FormatStyle.Attributed.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance NSDecimal.FormatStyle.Attributed( void *a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<NSDecimal.FormatStyle.Attributed.CodingKeys>);
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1895F8858](v2);
  uint64_t v5 = (char *)&v7 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type NSDecimal.FormatStyle.Attributed.CodingKeys and conformance NSDecimal.FormatStyle.Attributed.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  type metadata accessor for NSDecimal.FormatStyle.Attributed.Style(0LL);
  lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( &lazy protocol witness table cache variable for type NSDecimal.FormatStyle.Attributed.Style and conformance NSDecimal.FormatStyle.Attributed.Style,  type metadata accessor for NSDecimal.FormatStyle.Attributed.Style,  (uint64_t)&protocol conformance descriptor for NSDecimal.FormatStyle.Attributed.Style);
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance NSDecimal.FormatStyle.Attributed( uint64_t a1, uint64_t a2)
{
  return protocol witness for Hashable.hashValue.getter in conformance String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format( a1,  a2,  (void (*)(_BYTE *))NSDecimal.FormatStyle.Attributed.hash(into:));
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance NSDecimal.FormatStyle.Attributed( uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for Hashable._rawHashValue(seed:) in conformance String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format( a1,  a2,  a3,  (void (*)(_BYTE *))NSDecimal.FormatStyle.Attributed.hash(into:));
}

uint64_t NSDecimal.FormatStyle.parseStrategy.getter@<X0>(uint64_t a1@<X8>)
{
  return NSDecimal.FormatStyle.parseStrategy.getter( type metadata accessor for NSDecimal.FormatStyle,  &demangling cache variable for type metadata for NSDecimal.ParseStrategy<NSDecimal.FormatStyle>,  a1);
}

uint64_t protocol witness for ParseableFormatStyle.parseStrategy.getter in conformance NSDecimal.FormatStyle@<X0>( uint64_t a1@<X8>)
{
  return protocol witness for ParseableFormatStyle.parseStrategy.getter in conformance NSDecimal.FormatStyle( type metadata accessor for NSDecimal.FormatStyle,  &demangling cache variable for type metadata for NSDecimal.ParseStrategy<NSDecimal.FormatStyle>,  a1);
}

uint64_t NSDecimal.FormatStyle.Currency.parseStrategy.getter@<X0>(uint64_t a1@<X8>)
{
  return NSDecimal.FormatStyle.parseStrategy.getter( type metadata accessor for NSDecimal.FormatStyle.Currency,  &demangling cache variable for type metadata for NSDecimal.ParseStrategy<NSDecimal.FormatStyle.Currency>,  a1);
}

uint64_t protocol witness for ParseableFormatStyle.parseStrategy.getter in conformance NSDecimal.FormatStyle.Currency@<X0>( uint64_t a1@<X8>)
{
  return protocol witness for ParseableFormatStyle.parseStrategy.getter in conformance NSDecimal.FormatStyle( type metadata accessor for NSDecimal.FormatStyle.Currency,  &demangling cache variable for type metadata for NSDecimal.ParseStrategy<NSDecimal.FormatStyle.Currency>,  a1);
}

uint64_t NSDecimal.FormatStyle.Percent.parseStrategy.getter@<X0>(uint64_t a1@<X8>)
{
  return NSDecimal.FormatStyle.parseStrategy.getter( type metadata accessor for NSDecimal.FormatStyle.Percent,  &demangling cache variable for type metadata for NSDecimal.ParseStrategy<NSDecimal.FormatStyle.Percent>,  a1);
}

uint64_t NSDecimal.FormatStyle.parseStrategy.getter@<X0>( uint64_t (*a1)(void)@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = v3;
  outlined init with copy of ICUNumberFormatter.Signature(v6, a3, a1);
  uint64_t result = __swift_instantiateConcreteTypeFromMangledName(a2);
  *(_BYTE *)(a3 + *(int *)(result + 36)) = 1;
  return result;
}

uint64_t protocol witness for ParseableFormatStyle.parseStrategy.getter in conformance NSDecimal.FormatStyle.Percent@<X0>( uint64_t a1@<X8>)
{
  return protocol witness for ParseableFormatStyle.parseStrategy.getter in conformance NSDecimal.FormatStyle( type metadata accessor for NSDecimal.FormatStyle.Percent,  &demangling cache variable for type metadata for NSDecimal.ParseStrategy<NSDecimal.FormatStyle.Percent>,  a1);
}

uint64_t protocol witness for ParseableFormatStyle.parseStrategy.getter in conformance NSDecimal.FormatStyle@<X0>( uint64_t (*a1)(void)@<X2>, uint64_t *a2@<X3>, uint64_t a3@<X8>)
{
  uint64_t v5 = v3;
  outlined init with copy of ICUNumberFormatter.Signature(v5, a3, a1);
  uint64_t result = __swift_instantiateConcreteTypeFromMangledName(a2);
  *(_BYTE *)(a3 + *(int *)(result + 36)) = 1;
  return result;
}

uint64_t static FormatStyle<>.number.getter@<X0>(uint64_t *a1@<X8>)
{
  if (one-time initialization token for cache != -1) {
    swift_once();
  }
  uint64_t v2 = static LocaleCache.cache + 16;
  uint64_t v3 = (os_unfair_lock_s *)(static LocaleCache.cache + 124);
  swift_retain_n();
  os_unfair_lock_lock(v3);
  closure #1 in LocaleCache.autoupdatingCurrent.getter(v2, &v12);
  os_unfair_lock_unlock(v3);
  swift_release_n();
  uint64_t v4 = v12;
  uint64_t v5 = lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( (unint64_t *)&lazy protocol witness table cache variable for type _LocaleAutoupdating and conformance _LocaleAutoupdating,  (uint64_t (*)(uint64_t))type metadata accessor for _LocaleAutoupdating,  (uint64_t)&protocol conformance descriptor for _LocaleAutoupdating);
  uint64_t v6 = (char *)a1 + *(int *)(type metadata accessor for NSDecimal.FormatStyle(0LL) + 20);
  *(void *)uint64_t v6 = 0LL;
  v6[8] = 1;
  *((void *)v6 + 2) = 0LL;
  *((void *)v6 + 3) = 0LL;
  *((void *)v6 + 4) = 0LL;
  *((void *)v6 + 5) = 0x1FFFFFFFELL;
  *((void *)v6 + 7) = 0LL;
  *((void *)v6 + 8) = 0LL;
  *((void *)v6 + 6) = 0LL;
  *((_DWORD *)v6 + 18) = 131584;
  *((_WORD *)v6 + 38) = 512;
  uint64_t v7 = (int *)type metadata accessor for NumberFormatStyleConfiguration.Collection(0LL);
  uint64_t v8 = &v6[v7[9]];
  uint64_t v9 = type metadata accessor for FloatingPointRoundingRule();
  uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56LL))(v8, 1LL, 1LL, v9);
  uint64_t v11 = &v6[v7[10]];
  *(void *)uint64_t v11 = 0LL;
  v11[8] = -1;
  v6[v7[11]] = 3;
  *a1 = v4;
  a1[1] = v5;
  return result;
}

uint64_t static FormatStyle<>.percent.getter@<X0>(uint64_t *a1@<X8>)
{
  if (one-time initialization token for cache != -1) {
    swift_once();
  }
  uint64_t v2 = static LocaleCache.cache + 16;
  uint64_t v3 = (os_unfair_lock_s *)(static LocaleCache.cache + 124);
  swift_retain_n();
  os_unfair_lock_lock(v3);
  closure #1 in LocaleCache.autoupdatingCurrent.getter(v2, &v12);
  os_unfair_lock_unlock(v3);
  swift_release_n();
  uint64_t v4 = v12;
  uint64_t v5 = lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( (unint64_t *)&lazy protocol witness table cache variable for type _LocaleAutoupdating and conformance _LocaleAutoupdating,  (uint64_t (*)(uint64_t))type metadata accessor for _LocaleAutoupdating,  (uint64_t)&protocol conformance descriptor for _LocaleAutoupdating);
  uint64_t v6 = (char *)a1 + *(int *)(type metadata accessor for NSDecimal.FormatStyle.Percent(0LL) + 20);
  uint64_t v7 = (int *)type metadata accessor for NumberFormatStyleConfiguration.Collection(0LL);
  uint64_t v8 = &v6[v7[9]];
  uint64_t v9 = type metadata accessor for FloatingPointRoundingRule();
  uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56LL))(v8, 1LL, 1LL, v9);
  *(void *)uint64_t v6 = 0x4059000000000000LL;
  v6[8] = 0;
  *((void *)v6 + 2) = 0LL;
  *((void *)v6 + 3) = 0LL;
  *((void *)v6 + 4) = 0LL;
  *((void *)v6 + 5) = 0x1FFFFFFFELL;
  *((void *)v6 + 7) = 0LL;
  *((void *)v6 + 8) = 0LL;
  *((void *)v6 + 6) = 0LL;
  *((_DWORD *)v6 + 18) = 131584;
  *((_WORD *)v6 + 38) = 512;
  uint64_t v11 = &v6[v7[10]];
  *(void *)uint64_t v11 = 0LL;
  v11[8] = -1;
  v6[v7[11]] = 3;
  *a1 = v4;
  a1[1] = v5;
  return result;
}

uint64_t static FormatStyle<>.currency(code:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6 = one-time initialization token for cache;
  swift_bridgeObjectRetain();
  if (v6 != -1) {
    swift_once();
  }
  uint64_t v7 = static LocaleCache.cache + 16;
  uint64_t v8 = (os_unfair_lock_s *)(static LocaleCache.cache + 124);
  swift_retain_n();
  os_unfair_lock_lock(v8);
  closure #1 in LocaleCache.autoupdatingCurrent.getter(v7, &v17);
  os_unfair_lock_unlock(v8);
  swift_release_n();
  uint64_t v9 = v17;
  uint64_t v10 = lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( (unint64_t *)&lazy protocol witness table cache variable for type _LocaleAutoupdating and conformance _LocaleAutoupdating,  (uint64_t (*)(uint64_t))type metadata accessor for _LocaleAutoupdating,  (uint64_t)&protocol conformance descriptor for _LocaleAutoupdating);
  *a3 = v9;
  a3[1] = v10;
  a3[2] = a1;
  a3[3] = a2;
  uint64_t v11 = (char *)a3 + *(int *)(type metadata accessor for NSDecimal.FormatStyle.Currency(0LL) + 24);
  uint64_t v12 = (int *)type metadata accessor for CurrencyFormatStyleConfiguration.Collection(0LL);
  uint64_t v13 = &v11[v12[9]];
  uint64_t v14 = type metadata accessor for FloatingPointRoundingRule();
  uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 56LL))( v13,  1LL,  1LL,  v14);
  *(void *)uint64_t v11 = 0LL;
  v11[8] = 1;
  *((void *)v11 + 2) = 0LL;
  *((void *)v11 + 3) = 0LL;
  *((void *)v11 + 4) = 0LL;
  *((void *)v11 + 5) = 0x1FFFFFFFELL;
  *((void *)v11 + 7) = 0LL;
  *((void *)v11 + 8) = 0LL;
  *((void *)v11 + 6) = 0LL;
  *((_WORD *)v11 + 36) = 512;
  *(_DWORD *)(v11 + 74) = 2;
  v11[78] = 2;
  uint64_t v16 = &v11[v12[10]];
  *(void *)uint64_t v16 = 0LL;
  v16[8] = -1;
  v11[v12[11]] = 1;
  v11[v12[12]] = 3;
  return result;
}

Swift::String __swiftcall NSDecimal.formatted()()
{
  unsigned int v3 = v2;
  unint64_t v92 = v0;
  unint64_t v93 = v1;
  v99[18] = *MEMORY[0x1895F89C0];
  uint64_t v90 = type metadata accessor for ICUNumberFormatter.Signature(0LL);
  MEMORY[0x1895F8858](v90);
  uint64_t v5 = (char *)&v84 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = type metadata accessor for NSDecimal.FormatStyle(0LL);
  MEMORY[0x1895F8858](v6);
  unsigned __int8 v91 = (uint64_t *)((char *)&v84 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  if (one-time initialization token for cache != -1) {
    swift_once();
  }
  uint64_t v8 = static LocaleCache.cache + 16;
  uint64_t v9 = (os_unfair_lock_s *)(static LocaleCache.cache + 124);
  swift_retain_n();
  os_unfair_lock_lock(v9);
  closure #1 in LocaleCache.autoupdatingCurrent.getter(v8, &v96);
  os_unfair_lock_unlock(v9);
  swift_release_n();
  uint64_t v10 = v96;
  uint64_t v11 = lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( (unint64_t *)&lazy protocol witness table cache variable for type _LocaleAutoupdating and conformance _LocaleAutoupdating,  (uint64_t (*)(uint64_t))type metadata accessor for _LocaleAutoupdating,  (uint64_t)&protocol conformance descriptor for _LocaleAutoupdating);
  uint64_t v12 = v91;
  uint64_t v13 = (uint64_t)v91 + *(int *)(v6 + 20);
  *(void *)uint64_t v13 = 0LL;
  *(_BYTE *)(v13 + 8) = 1;
  *(void *)(v13 + 16) = 0LL;
  *(void *)(v13 + 24) = 0LL;
  *(void *)(v13 + 32) = 0LL;
  *(void *)(v13 + 40) = 0x1FFFFFFFELL;
  *(void *)(v13 + 56) = 0LL;
  *(void *)(v13 + 64) = 0LL;
  *(void *)(v13 + 48) = 0LL;
  *(_DWORD *)(v13 + 72) = 131584;
  *(_WORD *)(v13 + 76) = 512;
  uint64_t v14 = (int *)type metadata accessor for NumberFormatStyleConfiguration.Collection(0LL);
  uint64_t v15 = v13 + v14[9];
  uint64_t v16 = type metadata accessor for FloatingPointRoundingRule();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 56LL))(v15, 1LL, 1LL, v16);
  uint64_t v17 = v13 + v14[10];
  *(void *)uint64_t v17 = 0LL;
  *(_BYTE *)(v17 + 8) = -1;
  *(_BYTE *)(v13 + v14[11]) = 3;
  *uint64_t v12 = v10;
  v12[1] = v11;
  v99[0] = static LocaleCache.cache;
  swift_unknownObjectRetain();
  LocaleCache.current.getter();
  uint64_t v19 = v18;
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v21 = (*(uint64_t (**)(uint64_t, uint64_t))(v19 + 472))(ObjectType, v19);
  uint64_t v23 = v22;
  swift_release();
  swift_unknownObjectRelease();
  swift_retain();
  _LocaleAutoupdating.prefs.getter();
  swift_release();
  outlined init with take of LocalePreferences?( (uint64_t)v98,  (uint64_t)v99,  (uint64_t *)&demangling cache variable for type metadata for LocalePreferences?);
  outlined init with copy of ICUNumberFormatter.Signature( v13,  (uint64_t)v5,  type metadata accessor for NumberFormatStyleConfiguration.Collection);
  uint64_t v24 = v90;
  __int128 v25 = (uint64_t *)&v5[*(int *)(v90 + 20)];
  *__int128 v25 = v21;
  v25[1] = v23;
  outlined init with take of LocalePreferences?( (uint64_t)v99,  (uint64_t)&v5[*(int *)(v24 + 24)],  (uint64_t *)&demangling cache variable for type metadata for LocalePreferences?);
  uint64_t v26 = specialized static ICUNumberFormatter._create(with:)((uint64_t)v5);
  outlined destroy of ICUNumberFormatter.Signature((uint64_t)v5, type metadata accessor for ICUNumberFormatter.Signature);
  if (v26)
  {
    uint64_t v27 = *(void *)(v26 + 16);
    type metadata accessor for ICUNumberFormatterBase.FormatResult();
    swift_initStackObject();
    ICUNumberFormatterBase.FormatResult.init(formatter:value:)(v27, v92, v93, v3);
    uint64_t v43 = swift_retain_n();
    MEMORY[0x1895F8858](v43);
    swift_retain();
    specialized closure #1 in _withResizingUCharBuffer(initialSize:_:)((uint64_t)(&v84 - 8), (uint64_t *)v98);
    uint64_t v45 = *(void *)v98;
    unint64_t v44 = *(void *)&v98[8];
    swift_release();
    swift_release_n();
    if (v44) {
      goto LABEL_49;
    }
  }

  uint64_t v90 = 0LL;
  unint64_t v29 = v92;
  unint64_t v28 = v93;
  *(void *)__int128 v98 = v92;
  unint64_t v30 = HIDWORD(v92);
  unint64_t v31 = HIWORD(v92);
  unint64_t v32 = v93 >> 16;
  *(void *)&v98[8] = v93;
  unint64_t v33 = HIDWORD(v93);
  unint64_t v34 = HIWORD(v93);
  *(_DWORD *)&v98[16] = v3;
  if (!_So9NSDecimala__length_getter(v98))
  {
    *(_DWORD *)__int128 v98 = v29;
    *(_WORD *)&v98[4] = v30;
    *(_WORD *)&v98[6] = v31;
    *(_WORD *)&v98[8] = v28;
    *(_WORD *)&v98[10] = v32;
    *(_WORD *)&v98[12] = v33;
    *(_WORD *)&v98[14] = v34;
    *(_DWORD *)&v98[16] = v3;
    if (_So9NSDecimala__isNegative_getter(v98))
    {
      unint64_t v44 = 0xE300000000000000LL;
      uint64_t v45 = 5136718LL;
LABEL_49:
      outlined destroy of ICUNumberFormatter.Signature((uint64_t)v91, type metadata accessor for NSDecimal.FormatStyle);
      uint64_t v78 = v45;
      __int128 v79 = (void *)v44;
      goto LABEL_52;
    }
  }

  *(_DWORD *)__int128 v98 = v29;
  *(_WORD *)&v98[4] = v30;
  *(_WORD *)&v98[6] = v31;
  *(_WORD *)&v98[8] = v28;
  *(_WORD *)&v98[10] = v32;
  *(_WORD *)&v98[12] = v33;
  *(_WORD *)&v98[14] = v34;
  *(_DWORD *)&v98[16] = v3;
  if (!_So9NSDecimala__length_getter(v98))
  {
    unint64_t v44 = 0xE100000000000000LL;
    uint64_t v45 = 48LL;
    goto LABEL_49;
  }

  uint64_t v94 = 0LL;
  unint64_t v95 = 0xE000000000000000LL;
  *(void *)__int128 v98 = v29;
  *(void *)&v98[8] = v28;
  *(_DWORD *)&v98[16] = v3;
  *(void *)__int128 v97 = v29;
  unint64_t v88 = HIWORD(v29);
  unint64_t v89 = HIDWORD(v29);
  *(void *)&v97[8] = v28;
  unint64_t v35 = v28 >> 16;
  unint64_t v36 = HIDWORD(v28);
  unint64_t v37 = HIWORD(v28);
  *(_DWORD *)&v97[16] = v3;
  LODWORD(v38) = HIWORD(v3);
  if ((int)_So9NSDecimala__exponent_getter(v97) < 1)
  {
    LOWORD(v40) = v88;
    LOWORD(v39) = v89;
  }

  else
  {
    LOWORD(v40) = v88;
    LOWORD(v39) = v89;
    do
    {
      LODWORD(v93) = v3;
      v41._countAndFlagsBits = 48LL;
      v41._object = (void *)0xE100000000000000LL;
      String.append(_:)(v41);
      *(_DWORD *)__int128 v97 = v29;
      *(_WORD *)&v97[4] = v39;
      *(_WORD *)&v97[6] = v40;
      *(_WORD *)&v97[8] = v28;
      *(_WORD *)&v97[10] = v35;
      *(_WORD *)&v97[12] = v36;
      *(_WORD *)&v97[14] = v37;
      *(_WORD *)&v97[16] = v93;
      *(_WORD *)&v97[18] = v38;
      int v42 = _So9NSDecimala__exponent_getter(v97);
      _So9NSDecimala__exponent_setter((v42 - 1), v98);
      unint64_t v29 = *(unsigned int *)v98;
      LOWORD(v39) = *(_WORD *)&v98[4];
      LOWORD(v40) = *(_WORD *)&v98[6];
      unint64_t v28 = *(unsigned __int16 *)&v98[8];
      LOWORD(v35) = *(_WORD *)&v98[10];
      LOWORD(v36) = *(_WORD *)&v98[12];
      unint64_t v37 = *(unsigned __int16 *)&v98[14];
      unsigned int v3 = *(unsigned __int16 *)&v98[16];
      LODWORD(v38) = *(unsigned __int16 *)&v98[18];
      *(void *)__int128 v97 = *(void *)v98;
      *(void *)&v97[8] = *(void *)&v98[8];
      *(_WORD *)&v97[16] = *(_WORD *)&v98[16];
      *(_WORD *)&v97[18] = *(_WORD *)&v98[18];
    }

    while ((int)_So9NSDecimala__exponent_getter(v97) > 0);
  }

  *(_DWORD *)__int128 v97 = v29;
  *(_WORD *)&v97[4] = v39;
  *(_WORD *)&v97[6] = v40;
  *(_WORD *)&v97[8] = v28;
  *(_WORD *)&v97[10] = v35;
  *(_WORD *)&v97[12] = v36;
  *(_WORD *)&v97[14] = v37;
  *(_WORD *)&v97[16] = v3;
  *(_WORD *)&v97[18] = v38;
  if (!_So9NSDecimala__exponent_getter(v97))
  {
    _So9NSDecimala__exponent_setter(1LL, v98);
    unint64_t v29 = *(unsigned int *)v98;
    LOWORD(v39) = *(_WORD *)&v98[4];
    LOWORD(v40) = *(_WORD *)&v98[6];
    unint64_t v28 = *(unsigned __int16 *)&v98[8];
    LOWORD(v35) = *(_WORD *)&v98[10];
    LOWORD(v36) = *(_WORD *)&v98[12];
    unint64_t v37 = *(unsigned __int16 *)&v98[14];
    unsigned int v3 = *(unsigned __int16 *)&v98[16];
    LODWORD(v38) = *(unsigned __int16 *)&v98[18];
  }

  unint64_t v92 = v29;
  *(_DWORD *)__int128 v97 = v29;
  *(_WORD *)&v97[4] = v39;
  *(_WORD *)&v97[6] = v40;
  *(_WORD *)&v97[8] = v28;
  *(_WORD *)&v97[10] = v35;
  *(_WORD *)&v97[12] = v36;
  *(_WORD *)&v97[14] = v37;
  LODWORD(v93) = v3;
  *(_WORD *)&v97[16] = v3;
  *(_WORD *)&v97[18] = v38;
  if (!_So9NSDecimala__length_getter(v97))
  {
LABEL_38:
    unint64_t v46 = v92;
    int v47 = v93;
LABEL_39:
    *(_DWORD *)__int128 v97 = v46;
    *(_WORD *)&v97[4] = v39;
    *(_WORD *)&v97[6] = v40;
    *(_WORD *)&v97[8] = v28;
    *(_WORD *)&v97[10] = v35;
    *(_WORD *)&v97[12] = v36;
    *(_WORD *)&v97[14] = v37;
    *(_WORD *)&v97[16] = v47;
    *(_WORD *)&v97[18] = v38;
    unint64_t v67 = v46;
    int v68 = v47;
    int v69 = _So9NSDecimala__exponent_getter(v97);
    int v70 = v67;
    if (v69 <= 0)
    {
      unint64_t v92 = v67;
      *(_DWORD *)__int128 v97 = v67;
      *(_WORD *)&v97[4] = v39;
      *(_WORD *)&v97[6] = v40;
      *(_WORD *)&v97[8] = v28;
      *(_WORD *)&v97[10] = v35;
      *(_WORD *)&v97[12] = v36;
      *(_WORD *)&v97[14] = v37;
      LODWORD(v93) = v68;
      *(_WORD *)&v97[16] = v68;
      *(_WORD *)&v97[18] = v38;
      __int16 v71 = v28;
      if (_So9NSDecimala__exponent_getter(v97))
      {
        LOWORD(v68) = v93;
        do
        {
          v72._countAndFlagsBits = 48LL;
          v72._object = (void *)0xE100000000000000LL;
          String.append(_:)(v72);
          *(_DWORD *)__int128 v97 = v92;
          *(_WORD *)&v97[4] = v39;
          *(_WORD *)&v97[6] = v40;
          *(_WORD *)&v97[8] = v71;
          *(_WORD *)&v97[10] = v35;
          *(_WORD *)&v97[12] = v36;
          *(_WORD *)&v97[14] = v37;
          *(_WORD *)&v97[16] = v68;
          *(_WORD *)&v97[18] = v38;
          int v73 = _So9NSDecimala__exponent_getter(v97);
          _So9NSDecimala__exponent_setter((v73 + 1), v98);
          LOWORD(v39) = *(_WORD *)&v98[4];
          LOWORD(v40) = *(_WORD *)&v98[6];
          __int16 v71 = *(_WORD *)&v98[8];
          LOWORD(v35) = *(_WORD *)&v98[10];
          LOWORD(v36) = *(_WORD *)&v98[12];
          LOWORD(v37) = *(_WORD *)&v98[14];
          LOWORD(v68) = *(_WORD *)&v98[16];
          LOWORD(v38) = *(_WORD *)&v98[18];
          unint64_t v92 = *(unsigned int *)v98;
          *(void *)__int128 v97 = *(void *)v98;
          *(void *)&v97[8] = *(void *)&v98[8];
          *(_WORD *)&v97[16] = *(_WORD *)&v98[16];
          *(_WORD *)&v97[18] = *(_WORD *)&v98[18];
        }

        while (_So9NSDecimala__exponent_getter(v97));
      }

      else
      {
        LOWORD(v68) = v93;
      }

      v74._countAndFlagsBits = 46LL;
      v74._object = (void *)0xE100000000000000LL;
      String.append(_:)(v74);
      v75._countAndFlagsBits = 48LL;
      v75._object = (void *)0xE100000000000000LL;
      String.append(_:)(v75);
      LOWORD(v28) = v71;
      int v70 = v92;
    }

    *(_DWORD *)__int128 v97 = v70;
    *(_WORD *)&v97[4] = v39;
    *(_WORD *)&v97[6] = v40;
    *(_WORD *)&v97[8] = v28;
    *(_WORD *)&v97[10] = v35;
    *(_WORD *)&v97[12] = v36;
    *(_WORD *)&v97[14] = v37;
    *(_WORD *)&v97[16] = v68;
    *(_WORD *)&v97[18] = v38;
    if (_So9NSDecimala__isNegative_getter(v97))
    {
      v76._countAndFlagsBits = 45LL;
      v76._object = (void *)0xE100000000000000LL;
      String.append(_:)(v76);
    }

    *(void *)__int128 v97 = v94;
    *(void *)&v97[8] = v95;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ReversedCollection<String>);
    lazy protocol witness table accessor for type [String] and conformance [A]( (unint64_t *)&lazy protocol witness table cache variable for type ReversedCollection<String> and conformance ReversedCollection<A>,  &demangling cache variable for type metadata for ReversedCollection<String>,  MEMORY[0x189619928]);
    uint64_t v45 = String.init<A>(_:)();
    unint64_t v44 = v77;
    goto LABEL_49;
  }

  LODWORD(v46) = v92;
  LOWORD(v47) = v93;
  while (1)
  {
    unint64_t v89 = v37;
    LODWORD(v92) = v38;
    *(_DWORD *)__int128 v97 = v46;
    *(_WORD *)&v97[4] = v39;
    *(_WORD *)&v97[6] = v40;
    *(_WORD *)&v97[8] = v28;
    *(_WORD *)&v97[10] = v35;
    *(_WORD *)&v97[12] = v36;
    *(_WORD *)&v97[14] = v37;
    *(_WORD *)&v97[16] = v47;
    *(_WORD *)&v97[18] = v38;
    __int16 v48 = v36;
    __int16 v49 = v35;
    __int16 v50 = v40;
    __int16 v51 = v39;
    int v52 = v46;
    __int16 v53 = v47;
    if (!_So9NSDecimala__exponent_getter(v97))
    {
      unint64_t v93 = v28;
      v54._countAndFlagsBits = 46LL;
      v54._object = (void *)0xE100000000000000LL;
      String.append(_:)(v54);
      LOWORD(v28) = v93;
    }

    *(_DWORD *)__int128 v97 = v52;
    *(_WORD *)&v97[4] = v51;
    *(_WORD *)&v97[6] = v50;
    *(_WORD *)&v97[8] = v28;
    *(_WORD *)&v97[10] = v49;
    *(_WORD *)&v97[12] = v48;
    *(_WORD *)&v97[14] = v89;
    *(_WORD *)&v97[16] = v53;
    *(_WORD *)&v97[18] = v92;
    int v55 = _So9NSDecimala__exponent_getter(v97);
    _So9NSDecimala__exponent_setter((v55 + 1), v98);
    uint64_t v56 = *(unsigned int *)v98;
    LOWORD(v36) = *(_WORD *)&v98[6];
    unint64_t v92 = *(unsigned __int16 *)&v98[8];
    unint64_t v93 = *(unsigned __int16 *)&v98[4];
    unint64_t v88 = *(unsigned __int16 *)&v98[12];
    unint64_t v89 = *(unsigned __int16 *)&v98[10];
    LOWORD(v35) = *(_WORD *)&v98[18];
    uint64_t v86 = *(unsigned __int16 *)&v98[14];
    int v87 = *(unsigned __int16 *)&v98[16];
    NSDecimal.asVariableLengthInteger()( *(unsigned int *)v98 | ((unint64_t)*(unsigned __int16 *)&v98[4] << 32) | ((unint64_t)*(unsigned __int16 *)&v98[6] << 48),  *(unsigned __int16 *)&v98[8] | ((unint64_t)*(unsigned __int16 *)&v98[10] << 16) | ((unint64_t)*(unsigned __int16 *)&v98[12] << 32) | ((unint64_t)*(unsigned __int16 *)&v98[14] << 48),  *(unsigned __int16 *)&v98[16] | (*(unsigned __int16 *)&v98[18] << 16));
    unint64_t v28 = v57;
    uint64_t v39 = *(void *)(v57 + 16);
    if (!v39)
    {
      unsigned int v40 = 0;
      uint64_t v38 = MEMORY[0x18961AFE8];
      uint64_t v61 = *(void *)(MEMORY[0x18961AFE8] + 16LL);
      if (!v61) {
        goto LABEL_34;
      }
LABEL_31:
      if (!*(_WORD *)(v38 + 2 * v61 + 30))
      {
        do
        {
          *(void *)(v38 + 16) = v61 - 1;
          if (v61 == 1) {
            break;
          }
        }

        while (!*(unsigned __int16 *)(v38 + 28 + 2 * v61--));
      }

      goto LABEL_34;
    }

    uint64_t v85 = v56;
    uint64_t v38 = static Array._allocateBufferUninitialized(minimumCapacity:)();
    unint64_t v37 = v38 + 30;
    *(void *)(v38 + 16) = v39;
    bzero((void *)(v38 + 32), 2 * v39);
    unsigned int v58 = *(unsigned __int16 *)(2 * v39 + v28 + 30);
    unsigned int v59 = v58 / 0xA;
    while (1)
    {
      *(_WORD *)(v37 + 2 * v39) = v59;
      unsigned int v40 = v58 % 0xA;
      if (v39 == 1) {
        break;
      }
      unsigned int v58 = *(unsigned __int16 *)(v28 + 28 + 2 * v39) | (v40 << 16);
      unsigned int v59 = v58 / 0xA;
      unint64_t v60 = v39 - 2;
      --v39;
      if (v60 >= *(void *)(v38 + 16))
      {
        __break(1u);
        goto LABEL_38;
      }
    }

    LODWORD(v56) = v85;
    uint64_t v61 = *(void *)(v38 + 16);
    if (v61) {
      goto LABEL_31;
    }
LABEL_34:
    swift_bridgeObjectRelease();
    *(_DWORD *)__int128 v97 = v56;
    *(_WORD *)&v97[4] = v93;
    *(_WORD *)&v97[6] = v36;
    *(_WORD *)&v97[8] = v92;
    *(_WORD *)&v97[10] = v89;
    *(_WORD *)&v97[12] = v88;
    *(_WORD *)&v97[14] = v86;
    *(_WORD *)&v97[16] = v87;
    *(_WORD *)&v97[18] = v35;
    NSDecimal.copyVariableLengthInteger(_:)((Swift::OpaquePointer)v38);
    uint64_t v90 = v63;
    if (v63) {
      break;
    }
    unint64_t v64 = *(void *)(v38 + 16);
    swift_bridgeObjectRelease();
    if (HIDWORD(v64)) {
      goto LABEL_51;
    }
    _So9NSDecimala__length_setter(v64, v97);
    *(_DWORD *)__int128 v98 = *(_DWORD *)v97;
    *(_OWORD *)&v98[4] = *(_OWORD *)&v97[4];
    *(void *)__int128 v97 = v40 | 0x30;
    v65._countAndFlagsBits = MEMORY[0x186E1B6AC](v97, 1LL);
    String.append(_:)(v65);
    swift_bridgeObjectRelease();
    unint64_t v92 = *(unsigned int *)v98;
    unint64_t v89 = *(unsigned __int16 *)&v98[4];
    LOWORD(v40) = *(_WORD *)&v98[6];
    unint64_t v28 = *(unsigned __int16 *)&v98[8];
    LOWORD(v35) = *(_WORD *)&v98[10];
    LOWORD(v36) = *(_WORD *)&v98[12];
    unint64_t v37 = *(unsigned __int16 *)&v98[14];
    LODWORD(v39) = *(unsigned __int16 *)&v98[16];
    LODWORD(v38) = *(unsigned __int16 *)&v98[18];
    *(void *)__int128 v97 = *(void *)v98;
    *(void *)&v97[8] = *(void *)&v98[8];
    *(_WORD *)&v97[16] = *(_WORD *)&v98[16];
    *(_WORD *)&v97[18] = *(_WORD *)&v98[18];
    int v66 = _So9NSDecimala__length_getter(v97);
    int v47 = v39;
    unint64_t v46 = v92;
    LOWORD(v39) = v89;
    if (!v66) {
      goto LABEL_39;
    }
  }

  swift_bridgeObjectRelease();
  swift_unexpectedError();
  __break(1u);
LABEL_51:
  int v83 = 0;
  uint64_t v82 = 3455LL;
  char v81 = 2;
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  swift_release_n();
  uint64_t v78 = swift_willThrow();
  __break(1u);
LABEL_52:
  result._object = v79;
  result._countAndFlagsBits = v78;
  return result;
}

uint64_t NSDecimal.formatted<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6)
{
  v7[0] = a2;
  v7[1] = a3;
  int v8 = a4;
  return (*(uint64_t (**)(void *, uint64_t, uint64_t))(a6 + 48))(v7, a5, a6);
}

uint64_t NSDecimal.FormatStyle.consuming(_:startingAt:in:)( uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, unint64_t a5)
{
  return NSDecimal.FormatStyle.consuming(_:startingAt:in:)( a1,  a2,  a3,  a4,  a5,  &demangling cache variable for type metadata for NSDecimal.ParseStrategy<NSDecimal.FormatStyle>,  type metadata accessor for NSDecimal.FormatStyle,  0,  (int64_t)&unk_189C7D9C8);
}

uint64_t specialized NSDecimal.ParseStrategy.parse(_:startingAt:in:)( uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, unint64_t a5)
{
  return specialized NSDecimal.ParseStrategy.parse(_:startingAt:in:)( a1,  a2,  a3,  a4,  a5,  type metadata accessor for NSDecimal.FormatStyle,  0,  &demangling cache variable for type metadata for NSDecimal.ParseStrategy<NSDecimal.FormatStyle>,  (int64_t)&unk_189C7D9C8);
}

{
  return specialized NSDecimal.ParseStrategy.parse(_:startingAt:in:)( a1,  a2,  a3,  a4,  a5,  type metadata accessor for NSDecimal.FormatStyle.Percent,  1,  &demangling cache variable for type metadata for NSDecimal.ParseStrategy<NSDecimal.FormatStyle.Percent>,  (int64_t)&unk_189C7D9A0);
}

{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  uint64_t ObjectType;
  uint64_t (*v24)(uint64_t, uint64_t);
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t *v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char v43;
  uint64_t result;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v49;
  int v50;
  unint64_t v51;
  uint64_t v52;
  BOOL v53;
  uint64_t v54;
  char v55;
  uint64_t v56;
  unint64_t v57;
  char v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  unint64_t v69;
  unint64_t v70;
  unint64_t v71;
  uint64_t v72;
  uint64_t v73;
  int64_t v74;
  unint64_t v75;
  int64_t v76;
  uint64_t v77;
  unint64_t v78;
  unint64_t v79;
  int v80;
  char *v81;
  int64_t v82;
  char *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  char *v88;
  uint64_t v89;
  unint64_t v90;
  unint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96[4];
  uint64_t v97[3];
  unint64_t v92 = a1;
  int v8 = type metadata accessor for ICULegacyNumberFormatter.Signature(0LL);
  uint64_t v94 = *(void *)(v8 - 8);
  uint64_t v9 = *(void *)(v94 + 64);
  uint64_t v10 = MEMORY[0x1895F8858](v8);
  unint64_t v95 = (uint64_t)&v79 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v10);
  uint64_t v12 = (char *)&v79 - v11;
  uint64_t v13 = type metadata accessor for NSDecimal.FormatStyle.Currency(0LL);
  MEMORY[0x1895F8858](v13);
  uint64_t v15 = (uint64_t *)((char *)&v79 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v16 = type metadata accessor for ICULegacyNumberFormatter.NumberFormatType(0LL);
  MEMORY[0x1895F8858](v16);
  uint64_t v18 = (char *)&v79 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  unsigned __int8 v91 = a3;
  if (a3 >> 14 >= a5 >> 14) {
    goto LABEL_10;
  }
  uint64_t v90 = a5;
  int v87 = a2;
  uint64_t v19 = v93;
  outlined init with copy of ICUNumberFormatter.Signature( v93,  (uint64_t)v15,  type metadata accessor for NSDecimal.FormatStyle.Currency);
  outlined init with copy of ICUNumberFormatter.Signature( (uint64_t)v15 + *(int *)(v13 + 24),  (uint64_t)v18,  type metadata accessor for CurrencyFormatStyleConfiguration.Collection);
  swift_storeEnumTagMultiPayload();
  uint64_t v20 = *v15;
  uint64_t v21 = v15[1];
  swift_unknownObjectRetain();
  outlined destroy of ICUNumberFormatter.Signature( (uint64_t)v15,  type metadata accessor for NSDecimal.FormatStyle.Currency);
  uint64_t v22 = *(_BYTE *)(v19
  outlined init with copy of ICUNumberFormatter.Signature( (uint64_t)v18,  (uint64_t)v12,  type metadata accessor for ICULegacyNumberFormatter.NumberFormatType);
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v24 = *(uint64_t (**)(uint64_t, uint64_t))(v21 + 64);
  swift_unknownObjectRetain_n();
  __int128 v25 = v24(ObjectType, v21);
  uint64_t v27 = v26;
  unint64_t v93 = v20;
  swift_unknownObjectRelease();
  unint64_t v28 = (uint64_t *)&v12[*(int *)(v8 + 20)];
  *unint64_t v28 = v25;
  v28[1] = v27;
  uint64_t v86 = v8;
  v12[*(int *)(v8 + 24)] = v22;
  unint64_t v88 = v18;
  if (one-time initialization token for cache != -1) {
    swift_once();
  }
  unint64_t v30 = static ICULegacyNumberFormatter.cache;
  unint64_t v29 = unk_18C5CB2B0;
  unint64_t v31 = v95;
  outlined init with copy of ICUNumberFormatter.Signature( (uint64_t)v12,  v95,  type metadata accessor for ICULegacyNumberFormatter.Signature);
  unint64_t v32 = (*(unsigned __int8 *)(v94 + 80) + 16LL) & ~(unint64_t)*(unsigned __int8 *)(v94 + 80);
  unint64_t v89 = swift_allocObject();
  outlined init with take of ICUNumberFormatter.Signature( v31,  v89 + v32,  type metadata accessor for ICULegacyNumberFormatter.Signature);
  unint64_t v33 = (uint64_t *)(v29 + 16);
  swift_retain_n();
  os_unfair_lock_lock((os_unfair_lock_t)(v29 + 24));
  specialized closure #1 in FormatterCache.formatter(for:creator:)(v29 + 16, (uint64_t)v12, v96);
  os_unfair_lock_unlock((os_unfair_lock_t)(v29 + 24));
  swift_release();
  if (v96[0])
  {
    swift_release();
LABEL_6:
    outlined destroy of ICUNumberFormatter.Signature( (uint64_t)v12,  type metadata accessor for ICULegacyNumberFormatter.Signature);
    swift_unknownObjectRelease();
    swift_release();
    unint64_t v34 = String.subscript.getter();
    unint64_t v36 = v35;
    uint64_t v38 = v37;
    unsigned int v40 = v39;
    v97[0] = 0LL;
    specialized ICULegacyNumberFormatter.parseAsDecimal<A>(_:upperBound:)(v34, v35, v37, v39, v97);
    if ((v41 & 0x100000000LL) == 0)
    {
      v96[0] = v34;
      v96[1] = v36;
      v96[2] = v38;
      v96[3] = v40;
      lazy protocol witness table accessor for type Substring and conformance Substring();
      int v42 = String.Index.init<A>(utf16Offset:in:)();
      swift_unknownObjectRelease();
      swift_release();
      outlined destroy of ICUNumberFormatter.Signature( (uint64_t)v88,  type metadata accessor for ICULegacyNumberFormatter.NumberFormatType);
      uint64_t v43 = 0;
LABEL_11:
      LOBYTE(v96[0]) = v43;
      return v42;
    }

    swift_unknownObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    outlined destroy of ICUNumberFormatter.Signature( (uint64_t)v88,  type metadata accessor for ICULegacyNumberFormatter.NumberFormatType);
LABEL_10:
    int v42 = 0LL;
    uint64_t v43 = 1;
    goto LABEL_11;
  }

  implicit closure #2 in implicit closure #1 in static ICULegacyNumberFormatter.formatter(for:locale:lenient:)();
  uint64_t v85 = v45;
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v29 + 24));
  unint64_t v46 = *(void *)(*(void *)(v29 + 16) + 16LL);
  uint64_t v84 = *(void *)(v29 + 16);
  if (v30 >= v46) {
    swift_bridgeObjectRetain();
  }
  else {
    char *v33 = MEMORY[0x18961AFF0];
  }
  int v47 = v85;
  swift_retain();
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v97[0] = *v33;
  __int16 v49 = v97[0];
  char *v33 = 0x8000000000000000LL;
  __int16 v51 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v12);
  int v52 = *(void *)(v49 + 16);
  __int16 v53 = (v50 & 1) == 0;
  Swift::String v54 = v52 + v53;
  if (__OFADD__(v52, v53))
  {
    __break(1u);
  }

  else
  {
    if (*(void *)(v49 + 24) < v54)
    {
      int v55 = v50;
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)( v54,  isUniquelyReferenced_nonNull_native);
      uint64_t v56 = v97[0];
      unint64_t v57 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v12);
      if ((v55 & 1) != (v58 & 1)) {
        goto LABEL_65;
      }
      __int16 v51 = v57;
      if ((v55 & 1) == 0) {
        goto LABEL_61;
      }
LABEL_22:
      unsigned int v59 = *(void *)(v56 + 56);
      unint64_t v60 = 8 * v51;
      swift_release();
      *(void *)(v59 + v60) = v85;
LABEL_62:
      *(void *)(v29 + 16) = v56;
      swift_bridgeObjectRelease();
      os_unfair_lock_unlock((os_unfair_lock_t)(v29 + 24));
      swift_release_n();
      swift_bridgeObjectRelease();
      goto LABEL_6;
    }

    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
    {
      uint64_t v56 = v49;
      if ((v50 & 1) != 0) {
        goto LABEL_22;
      }
LABEL_61:
      uint64_t v78 = v51;
      outlined init with copy of ICUNumberFormatter.Signature( (uint64_t)v12,  v31,  type metadata accessor for ICULegacyNumberFormatter.Signature);
      specialized _NativeDictionary._insert(at:key:value:)(v78, v31, v47, (void *)v56);
      goto LABEL_62;
    }
  }

  __int128 v79 = v51;
  uint64_t v80 = v50;
  char v81 = v12;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<ICULegacyNumberFormatter.Signature, ICULegacyNumberFormatter>);
  uint64_t v61 = static _DictionaryStorage.copy(original:)();
  uint64_t v56 = v61;
  if (!*(void *)(v49 + 16))
  {
LABEL_60:
    swift_bridgeObjectRelease();
    uint64_t v12 = v81;
    unint64_t v31 = v95;
    int v47 = v85;
    __int16 v51 = v79;
    if ((v80 & 1) != 0) {
      goto LABEL_22;
    }
    goto LABEL_61;
  }

  uint64_t v62 = (char *)(v61 + 64);
  uint64_t v63 = 1LL << *(_BYTE *)(v56 + 32);
  int v83 = (char *)(v49 + 64);
  unint64_t v64 = (unint64_t)(v63 + 63) >> 6;
  if (v56 != v49 || v62 >= &v83[8 * v64]) {
    memmove(v62, v83, 8 * v64);
  }
  uint64_t v86 = 0LL;
  *(void *)(v56 + 16) = *(void *)(v49 + 16);
  Swift::String v65 = 1LL << *(_BYTE *)(v49 + 32);
  int v66 = -1LL;
  if (v65 < 64) {
    int v66 = ~(-1LL << v65);
  }
  unint64_t v67 = v66 & *(void *)(v49 + 64);
  uint64_t v82 = (unint64_t)(v65 + 63) >> 6;
  int v68 = v95;
  while (1)
  {
    if (v67)
    {
      int v69 = __clz(__rbit64(v67));
      v67 &= v67 - 1;
      int v70 = v69 | (v86 << 6);
      goto LABEL_32;
    }

    Swift::String v74 = v86 + 1;
    if (__OFADD__(v86, 1LL))
    {
      __break(1u);
      goto LABEL_64;
    }

    if (v74 >= v82) {
      goto LABEL_60;
    }
    Swift::String v75 = *(void *)&v83[8 * v74];
    Swift::String v76 = v86 + 1;
    if (!v75)
    {
      Swift::String v76 = v86 + 2;
      if (v86 + 2 >= v82) {
        goto LABEL_60;
      }
      Swift::String v75 = *(void *)&v83[8 * v76];
      if (!v75)
      {
        Swift::String v76 = v86 + 3;
        if (v86 + 3 >= v82) {
          goto LABEL_60;
        }
        Swift::String v75 = *(void *)&v83[8 * v76];
        if (!v75)
        {
          Swift::String v76 = v86 + 4;
          if (v86 + 4 >= v82) {
            goto LABEL_60;
          }
          Swift::String v75 = *(void *)&v83[8 * v76];
          if (!v75)
          {
            Swift::String v76 = v86 + 5;
            if (v86 + 5 >= v82) {
              goto LABEL_60;
            }
            Swift::String v75 = *(void *)&v83[8 * v76];
            if (!v75)
            {
              Swift::String v76 = v86 + 6;
              if (v86 + 6 >= v82) {
                goto LABEL_60;
              }
              Swift::String v75 = *(void *)&v83[8 * v76];
              if (!v75)
              {
                Swift::String v76 = v86 + 7;
                if (v86 + 7 >= v82) {
                  goto LABEL_60;
                }
                Swift::String v75 = *(void *)&v83[8 * v76];
                if (!v75)
                {
                  Swift::String v76 = v86 + 8;
                  if (v86 + 8 >= v82) {
                    goto LABEL_60;
                  }
                  Swift::String v75 = *(void *)&v83[8 * v76];
                  if (!v75)
                  {
                    Swift::String v76 = v86 + 9;
                    if (v86 + 9 >= v82) {
                      goto LABEL_60;
                    }
                    Swift::String v75 = *(void *)&v83[8 * v76];
                    if (!v75) {
                      break;
                    }
                  }
                }
              }
            }
          }
        }
      }
    }

uint64_t specialized NSDecimal.ParseStrategy.parse(_:startingAt:in:)( uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, unint64_t a5, uint64_t (*a6)(void), int a7, uint64_t *a8, int64_t a9)
{
  uint64_t v94 = a8;
  LODWORD(v93) = a7;
  uint64_t v92 = a2;
  uint64_t v90 = a1;
  uint64_t v13 = type metadata accessor for ICULegacyNumberFormatter.Signature(0LL);
  uint64_t v14 = *(void *)(v13 - 8);
  unint64_t v95 = v13;
  uint64_t v96 = v14;
  uint64_t v15 = *(void *)(v14 + 64);
  uint64_t v16 = MEMORY[0x1895F8858](v13);
  uint64_t v97 = (uint64_t)&v83 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v16);
  uint64_t v18 = (char *)&v83 - v17;
  uint64_t v19 = a6(0LL);
  MEMORY[0x1895F8858](v19);
  uint64_t v21 = (char *)&v83 - v20;
  uint64_t v22 = type metadata accessor for ICULegacyNumberFormatter.NumberFormatType(0LL);
  MEMORY[0x1895F8858](v22);
  uint64_t v24 = (char *)&v83 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  unint64_t v89 = a3;
  unint64_t v91 = a5;
  if (a3 >> 14 >= a5 >> 14) {
    goto LABEL_10;
  }
  int64_t v88 = a9;
  outlined init with copy of ICUNumberFormatter.Signature(v9, (uint64_t)v21, a6);
  outlined init with take of ICUNumberFormatter.Signature( (uint64_t)&v21[*(int *)(v19 + 20)],  (uint64_t)v24,  type metadata accessor for NumberFormatStyleConfiguration.Collection);
  swift_storeEnumTagMultiPayload();
  uint64_t v25 = *((void *)v21 + 1);
  char v26 = *(_BYTE *)(v9 + *(int *)(__swift_instantiateConcreteTypeFromMangledName(v94) + 36));
  unint64_t v93 = v24;
  outlined init with copy of ICUNumberFormatter.Signature( (uint64_t)v24,  (uint64_t)v18,  type metadata accessor for ICULegacyNumberFormatter.NumberFormatType);
  uint64_t ObjectType = swift_getObjectType();
  unint64_t v28 = *(uint64_t (**)(uint64_t, uint64_t))(v25 + 64);
  swift_unknownObjectRetain_n();
  uint64_t v29 = v28(ObjectType, v25);
  uint64_t v31 = v30;
  swift_unknownObjectRelease();
  unint64_t v32 = v95;
  unint64_t v33 = (uint64_t *)&v18[*(int *)(v95 + 20)];
  uint64_t *v33 = v29;
  v33[1] = v31;
  v18[*(int *)(v32 + 24)] = v26;
  uint64_t v34 = (uint64_t)v18;
  if (one-time initialization token for cache != -1) {
    swift_once();
  }
  uint64_t v36 = static ICULegacyNumberFormatter.cache;
  uint64_t v35 = unk_18C5CB2B0;
  uint64_t v37 = v97;
  outlined init with copy of ICUNumberFormatter.Signature( v34,  v97,  type metadata accessor for ICULegacyNumberFormatter.Signature);
  unint64_t v38 = (*(unsigned __int8 *)(v96 + 80) + 16LL) & ~(unint64_t)*(unsigned __int8 *)(v96 + 80);
  uint64_t v94 = (uint64_t *)swift_allocObject();
  outlined init with take of ICUNumberFormatter.Signature( v37,  (uint64_t)v94 + v38,  type metadata accessor for ICULegacyNumberFormatter.Signature);
  uint64_t v39 = (uint64_t *)(v35 + 16);
  swift_retain_n();
  os_unfair_lock_lock((os_unfair_lock_t)(v35 + 24));
  specialized closure #1 in FormatterCache.formatter(for:creator:)(v35 + 16, v34, v98);
  os_unfair_lock_unlock((os_unfair_lock_t)(v35 + 24));
  swift_release();
  if (v98[0])
  {
    swift_release();
LABEL_6:
    outlined destroy of ICUNumberFormatter.Signature(v34, type metadata accessor for ICULegacyNumberFormatter.Signature);
    swift_unknownObjectRelease();
    swift_release();
    unint64_t v40 = String.subscript.getter();
    uint64_t v42 = v41;
    uint64_t v44 = v43;
    uint64_t v46 = v45;
    v99[0] = 0LL;
    specialized ICULegacyNumberFormatter.parseAsDecimal<A>(_:upperBound:)(v40, v41, v43, v45, v99);
    if ((v47 & 0x100000000LL) == 0)
    {
      v98[0] = v40;
      v98[1] = v42;
      v98[2] = v44;
      v98[3] = v46;
      lazy protocol witness table accessor for type Substring and conformance Substring();
      uint64_t v48 = String.Index.init<A>(utf16Offset:in:)();
      swift_unknownObjectRelease();
      swift_release();
      outlined destroy of ICUNumberFormatter.Signature( (uint64_t)v93,  type metadata accessor for ICULegacyNumberFormatter.NumberFormatType);
      char v49 = 0;
LABEL_11:
      LOBYTE(v98[0]) = v49;
      return v48;
    }

    swift_unknownObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    outlined destroy of ICUNumberFormatter.Signature( (uint64_t)v93,  type metadata accessor for ICULegacyNumberFormatter.NumberFormatType);
LABEL_10:
    uint64_t v48 = 0LL;
    char v49 = 1;
    goto LABEL_11;
  }

  implicit closure #2 in implicit closure #1 in static ICULegacyNumberFormatter.formatter(for:locale:lenient:)();
  uint64_t v52 = v51;
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v35 + 24));
  if (v36 >= *(void *)(*(void *)(v35 + 16) + 16LL)) {
    swift_bridgeObjectRetain();
  }
  else {
    *uint64_t v39 = MEMORY[0x18961AFF0];
  }
  swift_retain();
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v99[0] = *v39;
  uint64_t v54 = v99[0];
  *uint64_t v39 = 0x8000000000000000LL;
  unint64_t v56 = specialized __RawDictionaryStorage.find<A>(_:)(v34);
  uint64_t v57 = *(void *)(v54 + 16);
  BOOL v58 = (v55 & 1) == 0;
  uint64_t v59 = v57 + v58;
  if (__OFADD__(v57, v58))
  {
    __break(1u);
  }

  else
  {
    if (*(void *)(v54 + 24) < v59)
    {
      char v60 = v55;
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)( v59,  isUniquelyReferenced_nonNull_native);
      uint64_t v61 = v99[0];
      unint64_t v62 = specialized __RawDictionaryStorage.find<A>(_:)(v34);
      if ((v60 & 1) != (v63 & 1)) {
        goto LABEL_65;
      }
      unint64_t v56 = v62;
      if ((v60 & 1) == 0) {
        goto LABEL_61;
      }
LABEL_22:
      uint64_t v64 = *(void *)(v61 + 56);
      uint64_t v65 = 8 * v56;
      swift_release();
      *(void *)(v64 + v65) = v52;
LABEL_62:
      *(void *)(v35 + 16) = v61;
      swift_bridgeObjectRelease();
      os_unfair_lock_unlock((os_unfair_lock_t)(v35 + 24));
      swift_release_n();
      swift_bridgeObjectRelease();
      goto LABEL_6;
    }

    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
    {
      uint64_t v61 = v54;
      if ((v55 & 1) != 0) {
        goto LABEL_22;
      }
LABEL_61:
      unint64_t v82 = v56;
      outlined init with copy of ICUNumberFormatter.Signature( v34,  v37,  type metadata accessor for ICULegacyNumberFormatter.Signature);
      specialized _NativeDictionary._insert(at:key:value:)(v82, v37, v52, (void *)v61);
      goto LABEL_62;
    }
  }

  unint64_t v83 = v56;
  int v84 = v55;
  uint64_t v85 = v34;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<ICULegacyNumberFormatter.Signature, ICULegacyNumberFormatter>);
  uint64_t v66 = static _DictionaryStorage.copy(original:)();
  uint64_t v61 = v66;
  if (!*(void *)(v54 + 16))
  {
LABEL_60:
    swift_bridgeObjectRelease();
    uint64_t v34 = v85;
    unint64_t v56 = v83;
    if ((v84 & 1) != 0) {
      goto LABEL_22;
    }
    goto LABEL_61;
  }

  unint64_t v67 = (char *)(v66 + 64);
  uint64_t v68 = 1LL << *(_BYTE *)(v61 + 32);
  int v87 = (char *)(v54 + 64);
  unint64_t v69 = (unint64_t)(v68 + 63) >> 6;
  if (v61 != v54 || v67 >= &v87[8 * v69]) {
    memmove(v67, v87, 8 * v69);
  }
  int64_t v88 = 0LL;
  *(void *)(v61 + 16) = *(void *)(v54 + 16);
  uint64_t v70 = 1LL << *(_BYTE *)(v54 + 32);
  uint64_t v71 = -1LL;
  if (v70 < 64) {
    uint64_t v71 = ~(-1LL << v70);
  }
  unint64_t v95 = v71 & *(void *)(v54 + 64);
  int64_t v86 = (unint64_t)(v70 + 63) >> 6;
  while (1)
  {
    if (v95)
    {
      unint64_t v72 = __clz(__rbit64(v95));
      v95 &= v95 - 1;
      unint64_t v73 = v72 | (v88 << 6);
      uint64_t v37 = v97;
      goto LABEL_32;
    }

    int64_t v78 = v88 + 1;
    uint64_t v37 = v97;
    if (__OFADD__(v88, 1LL))
    {
      __break(1u);
      goto LABEL_64;
    }

    if (v78 >= v86) {
      goto LABEL_60;
    }
    unint64_t v79 = *(void *)&v87[8 * v78];
    int64_t v80 = v88 + 1;
    if (!v79)
    {
      int64_t v80 = v88 + 2;
      if (v88 + 2 >= v86) {
        goto LABEL_60;
      }
      unint64_t v79 = *(void *)&v87[8 * v80];
      if (!v79)
      {
        int64_t v80 = v88 + 3;
        if (v88 + 3 >= v86) {
          goto LABEL_60;
        }
        unint64_t v79 = *(void *)&v87[8 * v80];
        if (!v79)
        {
          int64_t v80 = v88 + 4;
          if (v88 + 4 >= v86) {
            goto LABEL_60;
          }
          unint64_t v79 = *(void *)&v87[8 * v80];
          if (!v79)
          {
            int64_t v80 = v88 + 5;
            if (v88 + 5 >= v86) {
              goto LABEL_60;
            }
            unint64_t v79 = *(void *)&v87[8 * v80];
            if (!v79)
            {
              int64_t v80 = v88 + 6;
              if (v88 + 6 >= v86) {
                goto LABEL_60;
              }
              unint64_t v79 = *(void *)&v87[8 * v80];
              if (!v79)
              {
                int64_t v80 = v88 + 7;
                if (v88 + 7 >= v86) {
                  goto LABEL_60;
                }
                unint64_t v79 = *(void *)&v87[8 * v80];
                if (!v79)
                {
                  int64_t v80 = v88 + 8;
                  if (v88 + 8 >= v86) {
                    goto LABEL_60;
                  }
                  unint64_t v79 = *(void *)&v87[8 * v80];
                  if (!v79)
                  {
                    int64_t v80 = v88 + 9;
                    if (v88 + 9 >= v86) {
                      goto LABEL_60;
                    }
                    unint64_t v79 = *(void *)&v87[8 * v80];
                    if (!v79) {
                      break;
                    }
                  }
                }
              }
            }
          }
        }
      }
    }

uint64_t protocol witness for CustomConsumingRegexComponent.consuming(_:startingAt:in:) in conformance NSDecimal.FormatStyle@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X3>, unint64_t a5@<X4>, uint64_t a6@<X8>)
{
  return protocol witness for CustomConsumingRegexComponent.consuming(_:startingAt:in:) in conformance NSDecimal.FormatStyle( a1,  a2,  a3,  a4,  a5,  &demangling cache variable for type metadata for NSDecimal.ParseStrategy<NSDecimal.FormatStyle>,  a6,  type metadata accessor for NSDecimal.FormatStyle,  0,  (int64_t)&unk_189C7D9C8);
}

uint64_t protocol witness for RegexComponent.regex.getter in conformance NSDecimal.FormatStyle()
{
  return CustomConsumingRegexComponent.regex.getter();
}

uint64_t NSDecimal.FormatStyle.Percent.consuming(_:startingAt:in:)( uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, unint64_t a5)
{
  return NSDecimal.FormatStyle.consuming(_:startingAt:in:)( a1,  a2,  a3,  a4,  a5,  &demangling cache variable for type metadata for NSDecimal.ParseStrategy<NSDecimal.FormatStyle.Percent>,  type metadata accessor for NSDecimal.FormatStyle.Percent,  1,  (int64_t)&unk_189C7D9A0);
}

uint64_t NSDecimal.FormatStyle.consuming(_:startingAt:in:)( uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, unint64_t a5, uint64_t *a6, uint64_t (*a7)(void), int a8, int64_t a9)
{
  int v26 = a8;
  unint64_t v25 = a5;
  uint64_t v12 = v9;
  uint64_t v24 = a4;
  uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(a6);
  MEMORY[0x1895F8858](v16);
  uint64_t v18 = (char *)&v23 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  outlined init with copy of ICUNumberFormatter.Signature(v12, (uint64_t)v18, a7);
  v18[*(int *)(v16 + 36)] = 0;
  uint64_t v19 = specialized NSDecimal.ParseStrategy.parse(_:startingAt:in:)(a1, a2, a3, v24, v25, a7, v26, a6, a9);
  uint64_t v21 = v20;
  outlined destroy of Any?((uint64_t)v18, a6);
  if ((v21 & 0x100000000LL) != 0) {
    return 0LL;
  }
  else {
    return v19;
  }
}

uint64_t protocol witness for CustomConsumingRegexComponent.consuming(_:startingAt:in:) in conformance NSDecimal.FormatStyle.Percent@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X3>, unint64_t a5@<X4>, uint64_t a6@<X8>)
{
  return protocol witness for CustomConsumingRegexComponent.consuming(_:startingAt:in:) in conformance NSDecimal.FormatStyle( a1,  a2,  a3,  a4,  a5,  &demangling cache variable for type metadata for NSDecimal.ParseStrategy<NSDecimal.FormatStyle.Percent>,  a6,  type metadata accessor for NSDecimal.FormatStyle.Percent,  1,  (int64_t)&unk_189C7D9A0);
}

uint64_t protocol witness for CustomConsumingRegexComponent.consuming(_:startingAt:in:) in conformance NSDecimal.FormatStyle@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X3>, unint64_t a5@<X4>, uint64_t *a6@<X7>, uint64_t a7@<X8>, uint64_t (*a8)(void), int a9, int64_t a10)
{
  uint64_t v12 = v10;
  uint64_t v33 = a4;
  unint64_t v34 = a5;
  unint64_t v31 = a3;
  int v32 = a9;
  uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(a6);
  MEMORY[0x1895F8858](v16);
  uint64_t v18 = (char *)&v31 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  outlined init with copy of ICUNumberFormatter.Signature(v12, (uint64_t)v18, a8);
  v18[*(int *)(v16 + 36)] = 0;
  uint64_t v19 = specialized NSDecimal.ParseStrategy.parse(_:startingAt:in:)(a1, a2, v31, v33, v34, a8, v32, a6, a10);
  uint64_t v21 = v20;
  uint64_t v23 = v22;
  uint64_t v25 = v24;
  uint64_t result = outlined destroy of Any?((uint64_t)v18, a6);
  if ((v25 & 0x100000000LL) != 0) {
    uint64_t v27 = 0LL;
  }
  else {
    uint64_t v27 = v19;
  }
  if ((v25 & 0x100000000LL) != 0) {
    uint64_t v28 = 0LL;
  }
  else {
    uint64_t v28 = v21;
  }
  if ((v25 & 0x100000000LL) != 0) {
    uint64_t v29 = 0LL;
  }
  else {
    uint64_t v29 = v23;
  }
  if ((v25 & 0x100000000LL) != 0) {
    int v30 = 0;
  }
  else {
    int v30 = v25;
  }
  *(void *)a7 = v27;
  *(void *)(a7 + 8) = v28;
  *(void *)(a7 + 16) = v29;
  *(_DWORD *)(a7 + 24) = v30;
  *(_BYTE *)(a7 + 28) = BYTE4(v25) & 1;
  return result;
}

uint64_t protocol witness for RegexComponent.regex.getter in conformance NSDecimal.FormatStyle.Percent()
{
  return CustomConsumingRegexComponent.regex.getter();
}

uint64_t NSDecimal.FormatStyle.Currency.consuming(_:startingAt:in:)( uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, unint64_t a5)
{
  uint64_t v6 = v5;
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSDecimal.ParseStrategy<NSDecimal.FormatStyle.Currency>);
  MEMORY[0x1895F8858](v12);
  uint64_t v14 = (char *)&v19 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  outlined init with copy of ICUNumberFormatter.Signature( v6,  (uint64_t)v14,  type metadata accessor for NSDecimal.FormatStyle.Currency);
  v14[*(int *)(v12 + 36)] = 0;
  uint64_t v15 = specialized NSDecimal.ParseStrategy.parse(_:startingAt:in:)(a1, a2, a3, a4, a5);
  uint64_t v17 = v16;
  outlined destroy of Any?( (uint64_t)v14,  &demangling cache variable for type metadata for NSDecimal.ParseStrategy<NSDecimal.FormatStyle.Currency>);
  if ((v17 & 0x100000000LL) != 0) {
    return 0LL;
  }
  else {
    return v15;
  }
}

uint64_t protocol witness for CustomConsumingRegexComponent.consuming(_:startingAt:in:) in conformance NSDecimal.FormatStyle.Currency@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X3>, unint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v7 = v6;
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSDecimal.ParseStrategy<NSDecimal.FormatStyle.Currency>);
  MEMORY[0x1895F8858](v14);
  uint64_t v16 = (char *)&v29 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  outlined init with copy of ICUNumberFormatter.Signature( v7,  (uint64_t)v16,  type metadata accessor for NSDecimal.FormatStyle.Currency);
  v16[*(int *)(v14 + 36)] = 0;
  uint64_t v17 = specialized NSDecimal.ParseStrategy.parse(_:startingAt:in:)(a1, a2, a3, a4, a5);
  uint64_t v19 = v18;
  uint64_t v21 = v20;
  uint64_t v23 = v22;
  uint64_t result = outlined destroy of Any?( (uint64_t)v16,  &demangling cache variable for type metadata for NSDecimal.ParseStrategy<NSDecimal.FormatStyle.Currency>);
  if ((v23 & 0x100000000LL) != 0) {
    uint64_t v25 = 0LL;
  }
  else {
    uint64_t v25 = v17;
  }
  if ((v23 & 0x100000000LL) != 0) {
    uint64_t v26 = 0LL;
  }
  else {
    uint64_t v26 = v19;
  }
  if ((v23 & 0x100000000LL) != 0) {
    uint64_t v27 = 0LL;
  }
  else {
    uint64_t v27 = v21;
  }
  if ((v23 & 0x100000000LL) != 0) {
    int v28 = 0;
  }
  else {
    int v28 = v23;
  }
  *(void *)a6 = v25;
  *(void *)(a6 + 8) = v26;
  *(void *)(a6 + 16) = v27;
  *(_DWORD *)(a6 + 24) = v28;
  *(_BYTE *)(a6 + 28) = BYTE4(v23) & 1;
  return result;
}

uint64_t protocol witness for RegexComponent.regex.getter in conformance NSDecimal.FormatStyle.Currency()
{
  return CustomConsumingRegexComponent.regex.getter();
}

uint64_t static RegexComponent<>.localizedDecimal(locale:)@<X0>(__int128 *a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v4 = (char *)a2 + *(int *)(type metadata accessor for NSDecimal.FormatStyle(0LL) + 20);
  *(void *)uint64_t v4 = 0LL;
  v4[8] = 1;
  *((void *)v4 + 2) = 0LL;
  *((void *)v4 + 3) = 0LL;
  *((void *)v4 + 4) = 0LL;
  *((void *)v4 + 5) = 0x1FFFFFFFELL;
  *((void *)v4 + 7) = 0LL;
  *((void *)v4 + 8) = 0LL;
  *((void *)v4 + 6) = 0LL;
  *((_DWORD *)v4 + 18) = 131584;
  *((_WORD *)v4 + 38) = 512;
  uint64_t v5 = (int *)type metadata accessor for NumberFormatStyleConfiguration.Collection(0LL);
  uint64_t v6 = &v4[v5[9]];
  uint64_t v7 = type metadata accessor for FloatingPointRoundingRule();
  __int128 v10 = *a1;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56LL))(v6, 1LL, 1LL, v7);
  int v8 = &v4[v5[10]];
  *(void *)int v8 = 0LL;
  v8[8] = -1;
  v4[v5[11]] = 3;
  *a2 = v10;
  return swift_unknownObjectRetain();
}

uint64_t static RegexComponent<>.localizedCurrency(code:locale:)@<X0>( uint64_t *a1@<X0>, _OWORD *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4 = *a1;
  uint64_t v5 = a1[1];
  *(_OWORD *)a3 = *a2;
  *(void *)(a3 + 16) = v4;
  *(void *)(a3 + 24) = v5;
  uint64_t v6 = a3 + *(int *)(type metadata accessor for NSDecimal.FormatStyle.Currency(0LL) + 24);
  uint64_t v7 = (int *)type metadata accessor for CurrencyFormatStyleConfiguration.Collection(0LL);
  uint64_t v8 = v6 + v7[9];
  uint64_t v9 = type metadata accessor for FloatingPointRoundingRule();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56LL))(v8, 1LL, 1LL, v9);
  *(void *)uint64_t v6 = 0LL;
  *(_BYTE *)(v6 + 8) = 1;
  *(void *)(v6 + 16) = 0LL;
  *(void *)(v6 + 24) = 0LL;
  *(void *)(v6 + 32) = 0LL;
  *(void *)(v6 + 40) = 0x1FFFFFFFELL;
  *(void *)(v6 + 56) = 0LL;
  *(void *)(v6 + 64) = 0LL;
  *(void *)(v6 + 48) = 0LL;
  *(_WORD *)(v6 + 72) = 512;
  *(_DWORD *)(v6 + 74) = 2;
  *(_BYTE *)(v6 + 78) = 2;
  uint64_t v10 = v6 + v7[10];
  *(void *)uint64_t v10 = 0LL;
  *(_BYTE *)(v10 + 8) = -1;
  *(_BYTE *)(v6 + v7[11]) = 1;
  *(_BYTE *)(v6 + v7[12]) = 3;
  swift_bridgeObjectRetain();
  return swift_unknownObjectRetain();
}

unint64_t specialized Array._checkSubscript(_:wasNativeTypeChecked:)( unint64_t result, char a2, uint64_t a3)
{
  if ((a2 & 1) != 0)
  {
    if ((result & 0x8000000000000000LL) != 0)
    {
      __break(1u);
    }

    else if (*(void *)(a3 + 16) > result)
    {
      return result;
    }

    __break(1u);
  }

  return result;
}

uint64_t specialized Array._makeMutableAndUnique()()
{
  uint64_t v1 = *v0;
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  *unint64_t v0 = v1;
  if (!(_DWORD)result)
  {
    uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v1);
    *unint64_t v0 = result;
  }

  return result;
}

unint64_t specialized Array._checkSubscript_mutating(_:)(unint64_t result, uint64_t a2)
{
  if ((result & 0x8000000000000000LL) != 0)
  {
    __break(1u);
    goto LABEL_5;
  }

  if (*(void *)(a2 + 16) <= result) {
LABEL_5:
  }
    __break(1u);
  return result;
}

uint64_t specialized static NSDecimal.FormatStyle.Currency.== infix(_:_:)(__int128 *a1, __int128 *a2)
{
  __int128 v4 = *a1;
  __int128 v8 = *a2;
  __int128 v9 = v4;
  BOOL v5 = *((void *)a1 + 2) == *((void *)a2 + 2) && *((void *)a1 + 3) == *((void *)a2 + 3);
  if (!v5 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
    return 0LL;
  }
  uint64_t v6 = type metadata accessor for NSDecimal.FormatStyle.Currency(0LL);
  return static CurrencyFormatStyleConfiguration.Collection.== infix(_:_:)( (char *)a1 + *(int *)(v6 + 24),  (char *)a2 + *(int *)(v6 + 24));
}

uint64_t specialized static NSDecimal.FormatStyle.Attributed.Style.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v40 = a2;
  uint64_t v37 = type metadata accessor for NSDecimal.FormatStyle.Percent(0LL);
  MEMORY[0x1895F8858](v37);
  unint64_t v38 = (__int128 *)((char *)&v35 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v36 = type metadata accessor for NSDecimal.FormatStyle.Currency(0LL);
  MEMORY[0x1895F8858](v36);
  uint64_t v39 = (uint64_t)&v35 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = type metadata accessor for NSDecimal.FormatStyle(0LL);
  MEMORY[0x1895F8858](v5);
  uint64_t v7 = (__int128 *)((char *)&v35 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v8 = type metadata accessor for NSDecimal.FormatStyle.Attributed.Style(0LL);
  uint64_t v9 = MEMORY[0x1895F8858](v8);
  uint64_t v11 = (__int128 *)((char *)&v35 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v12 = MEMORY[0x1895F8858](v9);
  uint64_t v14 = (char *)&v35 - v13;
  MEMORY[0x1895F8858](v12);
  uint64_t v16 = (__int128 *)((char *)&v35 - v15);
  uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (NSDecimal.FormatStyle.Attributed.Style, NSDecimal.FormatStyle.Attributed.Style));
  uint64_t v18 = MEMORY[0x1895F8858](v17);
  uint64_t v20 = (char *)&v35 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v21 = (uint64_t)&v20[*(int *)(v18 + 48)];
  outlined init with copy of ICUNumberFormatter.Signature( a1,  (uint64_t)v20,  type metadata accessor for NSDecimal.FormatStyle.Attributed.Style);
  outlined init with copy of ICUNumberFormatter.Signature( v40,  v21,  type metadata accessor for NSDecimal.FormatStyle.Attributed.Style);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload)
  {
    if (EnumCaseMultiPayload == 1)
    {
      outlined init with copy of ICUNumberFormatter.Signature( (uint64_t)v20,  (uint64_t)v14,  type metadata accessor for NSDecimal.FormatStyle.Attributed.Style);
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        uint64_t v23 = v39;
        outlined init with take of ICUNumberFormatter.Signature( v21,  v39,  type metadata accessor for NSDecimal.FormatStyle.Currency);
        __int128 v24 = *(_OWORD *)v14;
        __int128 v41 = *(_OWORD *)v23;
        __int128 v42 = v24;
        if ((specialized static Locale.== infix(_:_:)((uint64_t)&v42, (uint64_t)&v41) & 1) != 0
          && (*((void *)v14 + 2) == *(void *)(v23 + 16) && *((void *)v14 + 3) == *(void *)(v23 + 24)
           || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
          && (static CurrencyFormatStyleConfiguration.Collection.== infix(_:_:)( &v14[*(int *)(v36 + 24)],  v23 + *(int *)(v36 + 24)) & 1) != 0)
        {
          uint64_t v25 = type metadata accessor for NSDecimal.FormatStyle.Currency;
          outlined destroy of ICUNumberFormatter.Signature( v23,  type metadata accessor for NSDecimal.FormatStyle.Currency);
          uint64_t v26 = (uint64_t)v14;
LABEL_23:
          outlined destroy of ICUNumberFormatter.Signature(v26, v25);
          outlined destroy of ICUNumberFormatter.Signature( (uint64_t)v20,  type metadata accessor for NSDecimal.FormatStyle.Attributed.Style);
          return 1LL;
        }

        unint64_t v31 = type metadata accessor for NSDecimal.FormatStyle.Currency;
        outlined destroy of ICUNumberFormatter.Signature(v23, type metadata accessor for NSDecimal.FormatStyle.Currency);
        uint64_t v32 = (uint64_t)v14;
        goto LABEL_26;
      }

      uint64_t v27 = type metadata accessor for NSDecimal.FormatStyle.Currency;
      uint64_t v28 = (uint64_t)v14;
    }

    else
    {
      outlined init with copy of ICUNumberFormatter.Signature( (uint64_t)v20,  (uint64_t)v11,  type metadata accessor for NSDecimal.FormatStyle.Attributed.Style);
      if (swift_getEnumCaseMultiPayload() == 2)
      {
        uint64_t v29 = v38;
        outlined init with take of ICUNumberFormatter.Signature( v21,  (uint64_t)v38,  type metadata accessor for NSDecimal.FormatStyle.Percent);
        __int128 v30 = *v11;
        __int128 v41 = *v29;
        __int128 v42 = v30;
        if ((specialized static Locale.== infix(_:_:)((uint64_t)&v42, (uint64_t)&v41) & 1) != 0
          && (static NumberFormatStyleConfiguration.Collection.== infix(_:_:)( (char *)v11 + *(int *)(v37 + 20),  (char *)v29 + *(int *)(v37 + 20)) & 1) != 0)
        {
          uint64_t v25 = type metadata accessor for NSDecimal.FormatStyle.Percent;
          outlined destroy of ICUNumberFormatter.Signature( (uint64_t)v29,  type metadata accessor for NSDecimal.FormatStyle.Percent);
          uint64_t v26 = (uint64_t)v11;
          goto LABEL_23;
        }

        unint64_t v31 = type metadata accessor for NSDecimal.FormatStyle.Percent;
        outlined destroy of ICUNumberFormatter.Signature( (uint64_t)v29,  type metadata accessor for NSDecimal.FormatStyle.Percent);
        uint64_t v32 = (uint64_t)v11;
        goto LABEL_26;
      }

      uint64_t v27 = type metadata accessor for NSDecimal.FormatStyle.Percent;
      uint64_t v28 = (uint64_t)v11;
    }
  }

  else
  {
    outlined init with copy of ICUNumberFormatter.Signature( (uint64_t)v20,  (uint64_t)v16,  type metadata accessor for NSDecimal.FormatStyle.Attributed.Style);
    if (!swift_getEnumCaseMultiPayload())
    {
      outlined init with take of ICUNumberFormatter.Signature( v21,  (uint64_t)v7,  type metadata accessor for NSDecimal.FormatStyle);
      __int128 v33 = *v16;
      __int128 v41 = *v7;
      __int128 v42 = v33;
      if ((specialized static Locale.== infix(_:_:)((uint64_t)&v42, (uint64_t)&v41) & 1) != 0
        && (static NumberFormatStyleConfiguration.Collection.== infix(_:_:)( (char *)v16 + *(int *)(v5 + 20),  (char *)v7 + *(int *)(v5 + 20)) & 1) != 0)
      {
        uint64_t v25 = type metadata accessor for NSDecimal.FormatStyle;
        outlined destroy of ICUNumberFormatter.Signature((uint64_t)v7, type metadata accessor for NSDecimal.FormatStyle);
        uint64_t v26 = (uint64_t)v16;
        goto LABEL_23;
      }

      unint64_t v31 = type metadata accessor for NSDecimal.FormatStyle;
      outlined destroy of ICUNumberFormatter.Signature((uint64_t)v7, type metadata accessor for NSDecimal.FormatStyle);
      uint64_t v32 = (uint64_t)v16;
LABEL_26:
      outlined destroy of ICUNumberFormatter.Signature(v32, v31);
      outlined destroy of ICUNumberFormatter.Signature( (uint64_t)v20,  type metadata accessor for NSDecimal.FormatStyle.Attributed.Style);
      return 0LL;
    }

    uint64_t v27 = type metadata accessor for NSDecimal.FormatStyle;
    uint64_t v28 = (uint64_t)v16;
  }

  outlined destroy of ICUNumberFormatter.Signature(v28, v27);
  outlined destroy of Any?( (uint64_t)v20,  &demangling cache variable for type metadata for (NSDecimal.FormatStyle.Attributed.Style, NSDecimal.FormatStyle.Attributed.Style));
  return 0LL;
}

uint64_t type metadata accessor for NSDecimal.FormatStyle(uint64_t a1)
{
  return type metadata accessor for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format( a1,  (uint64_t *)&type metadata singleton initialization cache for NSDecimal.FormatStyle);
}

uint64_t type metadata accessor for NSDecimal.FormatStyle.Currency(uint64_t a1)
{
  return type metadata accessor for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format( a1,  (uint64_t *)&type metadata singleton initialization cache for NSDecimal.FormatStyle.Currency);
}

uint64_t type metadata accessor for NSDecimal.FormatStyle.Percent(uint64_t a1)
{
  return type metadata accessor for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format( a1,  (uint64_t *)&type metadata singleton initialization cache for NSDecimal.FormatStyle.Percent);
}

uint64_t type metadata accessor for NSDecimal.FormatStyle.Attributed.Style(uint64_t a1)
{
  return type metadata accessor for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format( a1,  (uint64_t *)&type metadata singleton initialization cache for NSDecimal.FormatStyle.Attributed.Style);
}

unint64_t lazy protocol witness table accessor for type NSDecimal.FormatStyle.CodingKeys and conformance NSDecimal.FormatStyle.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type NSDecimal.FormatStyle.CodingKeys and conformance NSDecimal.FormatStyle.CodingKeys;
  if (!lazy protocol witness table cache variable for type NSDecimal.FormatStyle.CodingKeys and conformance NSDecimal.FormatStyle.CodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C](&protocol conformance descriptor for NSDecimal.FormatStyle.CodingKeys, &unk_189C7D958);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type NSDecimal.FormatStyle.CodingKeys and conformance NSDecimal.FormatStyle.CodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type NSDecimal.FormatStyle.CodingKeys and conformance NSDecimal.FormatStyle.CodingKeys;
  if (!lazy protocol witness table cache variable for type NSDecimal.FormatStyle.CodingKeys and conformance NSDecimal.FormatStyle.CodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C](&protocol conformance descriptor for NSDecimal.FormatStyle.CodingKeys, &unk_189C7D958);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type NSDecimal.FormatStyle.CodingKeys and conformance NSDecimal.FormatStyle.CodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type NSDecimal.FormatStyle.CodingKeys and conformance NSDecimal.FormatStyle.CodingKeys;
  if (!lazy protocol witness table cache variable for type NSDecimal.FormatStyle.CodingKeys and conformance NSDecimal.FormatStyle.CodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C](&protocol conformance descriptor for NSDecimal.FormatStyle.CodingKeys, &unk_189C7D958);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type NSDecimal.FormatStyle.CodingKeys and conformance NSDecimal.FormatStyle.CodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type NSDecimal.FormatStyle.CodingKeys and conformance NSDecimal.FormatStyle.CodingKeys;
  if (!lazy protocol witness table cache variable for type NSDecimal.FormatStyle.CodingKeys and conformance NSDecimal.FormatStyle.CodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C](&protocol conformance descriptor for NSDecimal.FormatStyle.CodingKeys, &unk_189C7D958);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type NSDecimal.FormatStyle.CodingKeys and conformance NSDecimal.FormatStyle.CodingKeys);
  }

  return result;
}

uint64_t outlined assign with take of NumberFormatStyleConfiguration.Collection(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for NumberFormatStyleConfiguration.Collection(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40LL))(a2, a1, v4);
  return a2;
}

uint64_t type metadata accessor for NSDecimal.FormatStyle.Attributed(uint64_t a1)
{
  return type metadata accessor for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format( a1,  (uint64_t *)&type metadata singleton initialization cache for NSDecimal.FormatStyle.Attributed);
}

unint64_t lazy protocol witness table accessor for type NSDecimal.FormatStyle.Percent.CodingKeys and conformance NSDecimal.FormatStyle.Percent.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type NSDecimal.FormatStyle.Percent.CodingKeys and conformance NSDecimal.FormatStyle.Percent.CodingKeys;
  if (!lazy protocol witness table cache variable for type NSDecimal.FormatStyle.Percent.CodingKeys and conformance NSDecimal.FormatStyle.Percent.CodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for NSDecimal.FormatStyle.Percent.CodingKeys,  &unk_189C7D8C8);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type NSDecimal.FormatStyle.Percent.CodingKeys and conformance NSDecimal.FormatStyle.Percent.CodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type NSDecimal.FormatStyle.Percent.CodingKeys and conformance NSDecimal.FormatStyle.Percent.CodingKeys;
  if (!lazy protocol witness table cache variable for type NSDecimal.FormatStyle.Percent.CodingKeys and conformance NSDecimal.FormatStyle.Percent.CodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for NSDecimal.FormatStyle.Percent.CodingKeys,  &unk_189C7D8C8);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type NSDecimal.FormatStyle.Percent.CodingKeys and conformance NSDecimal.FormatStyle.Percent.CodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type NSDecimal.FormatStyle.Percent.CodingKeys and conformance NSDecimal.FormatStyle.Percent.CodingKeys;
  if (!lazy protocol witness table cache variable for type NSDecimal.FormatStyle.Percent.CodingKeys and conformance NSDecimal.FormatStyle.Percent.CodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for NSDecimal.FormatStyle.Percent.CodingKeys,  &unk_189C7D8C8);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type NSDecimal.FormatStyle.Percent.CodingKeys and conformance NSDecimal.FormatStyle.Percent.CodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type NSDecimal.FormatStyle.Percent.CodingKeys and conformance NSDecimal.FormatStyle.Percent.CodingKeys;
  if (!lazy protocol witness table cache variable for type NSDecimal.FormatStyle.Percent.CodingKeys and conformance NSDecimal.FormatStyle.Percent.CodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for NSDecimal.FormatStyle.Percent.CodingKeys,  &unk_189C7D8C8);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type NSDecimal.FormatStyle.Percent.CodingKeys and conformance NSDecimal.FormatStyle.Percent.CodingKeys);
  }

  return result;
}

unint64_t lazy protocol witness table accessor for type NSDecimal.FormatStyle.Currency.CodingKeys and conformance NSDecimal.FormatStyle.Currency.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type NSDecimal.FormatStyle.Currency.CodingKeys and conformance NSDecimal.FormatStyle.Currency.CodingKeys;
  if (!lazy protocol witness table cache variable for type NSDecimal.FormatStyle.Currency.CodingKeys and conformance NSDecimal.FormatStyle.Currency.CodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for NSDecimal.FormatStyle.Currency.CodingKeys,  &unk_189C7D838);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type NSDecimal.FormatStyle.Currency.CodingKeys and conformance NSDecimal.FormatStyle.Currency.CodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type NSDecimal.FormatStyle.Currency.CodingKeys and conformance NSDecimal.FormatStyle.Currency.CodingKeys;
  if (!lazy protocol witness table cache variable for type NSDecimal.FormatStyle.Currency.CodingKeys and conformance NSDecimal.FormatStyle.Currency.CodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for NSDecimal.FormatStyle.Currency.CodingKeys,  &unk_189C7D838);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type NSDecimal.FormatStyle.Currency.CodingKeys and conformance NSDecimal.FormatStyle.Currency.CodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type NSDecimal.FormatStyle.Currency.CodingKeys and conformance NSDecimal.FormatStyle.Currency.CodingKeys;
  if (!lazy protocol witness table cache variable for type NSDecimal.FormatStyle.Currency.CodingKeys and conformance NSDecimal.FormatStyle.Currency.CodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for NSDecimal.FormatStyle.Currency.CodingKeys,  &unk_189C7D838);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type NSDecimal.FormatStyle.Currency.CodingKeys and conformance NSDecimal.FormatStyle.Currency.CodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type NSDecimal.FormatStyle.Currency.CodingKeys and conformance NSDecimal.FormatStyle.Currency.CodingKeys;
  if (!lazy protocol witness table cache variable for type NSDecimal.FormatStyle.Currency.CodingKeys and conformance NSDecimal.FormatStyle.Currency.CodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for NSDecimal.FormatStyle.Currency.CodingKeys,  &unk_189C7D838);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type NSDecimal.FormatStyle.Currency.CodingKeys and conformance NSDecimal.FormatStyle.Currency.CodingKeys);
  }

  return result;
}

unint64_t lazy protocol witness table accessor for type NSDecimal.FormatStyle.Attributed.CodingKeys and conformance NSDecimal.FormatStyle.Attributed.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type NSDecimal.FormatStyle.Attributed.CodingKeys and conformance NSDecimal.FormatStyle.Attributed.CodingKeys;
  if (!lazy protocol witness table cache variable for type NSDecimal.FormatStyle.Attributed.CodingKeys and conformance NSDecimal.FormatStyle.Attributed.CodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for NSDecimal.FormatStyle.Attributed.CodingKeys,  &unk_189C7D7A8);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type NSDecimal.FormatStyle.Attributed.CodingKeys and conformance NSDecimal.FormatStyle.Attributed.CodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type NSDecimal.FormatStyle.Attributed.CodingKeys and conformance NSDecimal.FormatStyle.Attributed.CodingKeys;
  if (!lazy protocol witness table cache variable for type NSDecimal.FormatStyle.Attributed.CodingKeys and conformance NSDecimal.FormatStyle.Attributed.CodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for NSDecimal.FormatStyle.Attributed.CodingKeys,  &unk_189C7D7A8);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type NSDecimal.FormatStyle.Attributed.CodingKeys and conformance NSDecimal.FormatStyle.Attributed.CodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type NSDecimal.FormatStyle.Attributed.CodingKeys and conformance NSDecimal.FormatStyle.Attributed.CodingKeys;
  if (!lazy protocol witness table cache variable for type NSDecimal.FormatStyle.Attributed.CodingKeys and conformance NSDecimal.FormatStyle.Attributed.CodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for NSDecimal.FormatStyle.Attributed.CodingKeys,  &unk_189C7D7A8);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type NSDecimal.FormatStyle.Attributed.CodingKeys and conformance NSDecimal.FormatStyle.Attributed.CodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type NSDecimal.FormatStyle.Attributed.CodingKeys and conformance NSDecimal.FormatStyle.Attributed.CodingKeys;
  if (!lazy protocol witness table cache variable for type NSDecimal.FormatStyle.Attributed.CodingKeys and conformance NSDecimal.FormatStyle.Attributed.CodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for NSDecimal.FormatStyle.Attributed.CodingKeys,  &unk_189C7D7A8);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type NSDecimal.FormatStyle.Attributed.CodingKeys and conformance NSDecimal.FormatStyle.Attributed.CodingKeys);
  }

  return result;
}

uint64_t instantiation function for generic protocol witness table for NSDecimal.FormatStyle(void *a1)
{
  a1[1] = lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( &lazy protocol witness table cache variable for type NSDecimal.FormatStyle and conformance NSDecimal.FormatStyle,  type metadata accessor for NSDecimal.FormatStyle,  (uint64_t)&protocol conformance descriptor for NSDecimal.FormatStyle);
  a1[2] = lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( &lazy protocol witness table cache variable for type NSDecimal.FormatStyle and conformance NSDecimal.FormatStyle,  type metadata accessor for NSDecimal.FormatStyle,  (uint64_t)&protocol conformance descriptor for NSDecimal.FormatStyle);
  uint64_t result = lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( &lazy protocol witness table cache variable for type NSDecimal.FormatStyle and conformance NSDecimal.FormatStyle,  type metadata accessor for NSDecimal.FormatStyle,  (uint64_t)&protocol conformance descriptor for NSDecimal.FormatStyle);
  a1[3] = result;
  return result;
}

uint64_t base witness table accessor for Equatable in NSDecimal.FormatStyle()
{
  return lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( &lazy protocol witness table cache variable for type NSDecimal.FormatStyle and conformance NSDecimal.FormatStyle,  type metadata accessor for NSDecimal.FormatStyle,  (uint64_t)&protocol conformance descriptor for NSDecimal.FormatStyle);
}

uint64_t instantiation function for generic protocol witness table for NSDecimal.FormatStyle.Percent( void *a1)
{
  a1[1] = lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( &lazy protocol witness table cache variable for type NSDecimal.FormatStyle.Percent and conformance NSDecimal.FormatStyle.Percent,  type metadata accessor for NSDecimal.FormatStyle.Percent,  (uint64_t)&protocol conformance descriptor for NSDecimal.FormatStyle.Percent);
  a1[2] = lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( &lazy protocol witness table cache variable for type NSDecimal.FormatStyle.Percent and conformance NSDecimal.FormatStyle.Percent,  type metadata accessor for NSDecimal.FormatStyle.Percent,  (uint64_t)&protocol conformance descriptor for NSDecimal.FormatStyle.Percent);
  uint64_t result = lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( &lazy protocol witness table cache variable for type NSDecimal.FormatStyle.Percent and conformance NSDecimal.FormatStyle.Percent,  type metadata accessor for NSDecimal.FormatStyle.Percent,  (uint64_t)&protocol conformance descriptor for NSDecimal.FormatStyle.Percent);
  a1[3] = result;
  return result;
}

uint64_t base witness table accessor for Equatable in NSDecimal.FormatStyle.Percent()
{
  return lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( &lazy protocol witness table cache variable for type NSDecimal.FormatStyle.Percent and conformance NSDecimal.FormatStyle.Percent,  type metadata accessor for NSDecimal.FormatStyle.Percent,  (uint64_t)&protocol conformance descriptor for NSDecimal.FormatStyle.Percent);
}

uint64_t instantiation function for generic protocol witness table for NSDecimal.FormatStyle.Currency( void *a1)
{
  a1[1] = lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( &lazy protocol witness table cache variable for type NSDecimal.FormatStyle.Currency and conformance NSDecimal.FormatStyle.Currency,  type metadata accessor for NSDecimal.FormatStyle.Currency,  (uint64_t)&protocol conformance descriptor for NSDecimal.FormatStyle.Currency);
  a1[2] = lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( &lazy protocol witness table cache variable for type NSDecimal.FormatStyle.Currency and conformance NSDecimal.FormatStyle.Currency,  type metadata accessor for NSDecimal.FormatStyle.Currency,  (uint64_t)&protocol conformance descriptor for NSDecimal.FormatStyle.Currency);
  uint64_t result = lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( &lazy protocol witness table cache variable for type NSDecimal.FormatStyle.Currency and conformance NSDecimal.FormatStyle.Currency,  type metadata accessor for NSDecimal.FormatStyle.Currency,  (uint64_t)&protocol conformance descriptor for NSDecimal.FormatStyle.Currency);
  a1[3] = result;
  return result;
}

uint64_t base witness table accessor for Equatable in NSDecimal.FormatStyle.Currency()
{
  return lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( &lazy protocol witness table cache variable for type NSDecimal.FormatStyle.Currency and conformance NSDecimal.FormatStyle.Currency,  type metadata accessor for NSDecimal.FormatStyle.Currency,  (uint64_t)&protocol conformance descriptor for NSDecimal.FormatStyle.Currency);
}

uint64_t instantiation function for generic protocol witness table for NSDecimal.FormatStyle.Attributed( void *a1)
{
  a1[1] = lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( &lazy protocol witness table cache variable for type NSDecimal.FormatStyle.Attributed and conformance NSDecimal.FormatStyle.Attributed,  type metadata accessor for NSDecimal.FormatStyle.Attributed,  (uint64_t)&protocol conformance descriptor for NSDecimal.FormatStyle.Attributed);
  a1[2] = lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( &lazy protocol witness table cache variable for type NSDecimal.FormatStyle.Attributed and conformance NSDecimal.FormatStyle.Attributed,  type metadata accessor for NSDecimal.FormatStyle.Attributed,  (uint64_t)&protocol conformance descriptor for NSDecimal.FormatStyle.Attributed);
  uint64_t result = lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( &lazy protocol witness table cache variable for type NSDecimal.FormatStyle.Attributed and conformance NSDecimal.FormatStyle.Attributed,  type metadata accessor for NSDecimal.FormatStyle.Attributed,  (uint64_t)&protocol conformance descriptor for NSDecimal.FormatStyle.Attributed);
  a1[3] = result;
  return result;
}

uint64_t base witness table accessor for Equatable in NSDecimal.FormatStyle.Attributed()
{
  return lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( &lazy protocol witness table cache variable for type NSDecimal.FormatStyle.Attributed and conformance NSDecimal.FormatStyle.Attributed,  type metadata accessor for NSDecimal.FormatStyle.Attributed,  (uint64_t)&protocol conformance descriptor for NSDecimal.FormatStyle.Attributed);
}

uint64_t associated type witness table accessor for ParseableFormatStyle.Strategy : ParseStrategy in NSDecimal.FormatStyle()
{
  return lazy protocol witness table accessor for type [String] and conformance [A]( &lazy protocol witness table cache variable for type NSDecimal.ParseStrategy<NSDecimal.FormatStyle> and conformance NSDecimal.ParseStrategy<A>,  &demangling cache variable for type metadata for NSDecimal.ParseStrategy<NSDecimal.FormatStyle>,  (uint64_t)&protocol conformance descriptor for NSDecimal.ParseStrategy<A>);
}

uint64_t instantiation function for generic protocol witness table for NSDecimal.FormatStyle(uint64_t a1)
{
  uint64_t result = lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( &lazy protocol witness table cache variable for type NSDecimal.FormatStyle and conformance NSDecimal.FormatStyle,  type metadata accessor for NSDecimal.FormatStyle,  (uint64_t)&protocol conformance descriptor for NSDecimal.FormatStyle);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t associated type witness table accessor for ParseableFormatStyle.Strategy : ParseStrategy in NSDecimal.FormatStyle.Currency()
{
  return lazy protocol witness table accessor for type [String] and conformance [A]( &lazy protocol witness table cache variable for type NSDecimal.ParseStrategy<NSDecimal.FormatStyle.Currency> and conformance NSDecimal.ParseStrategy<A>,  &demangling cache variable for type metadata for NSDecimal.ParseStrategy<NSDecimal.FormatStyle.Currency>,  (uint64_t)&protocol conformance descriptor for NSDecimal.ParseStrategy<A>);
}

uint64_t instantiation function for generic protocol witness table for NSDecimal.FormatStyle.Currency( uint64_t a1)
{
  uint64_t result = lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( &lazy protocol witness table cache variable for type NSDecimal.FormatStyle.Currency and conformance NSDecimal.FormatStyle.Currency,  type metadata accessor for NSDecimal.FormatStyle.Currency,  (uint64_t)&protocol conformance descriptor for NSDecimal.FormatStyle.Currency);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t associated type witness table accessor for ParseableFormatStyle.Strategy : ParseStrategy in NSDecimal.FormatStyle.Percent()
{
  return lazy protocol witness table accessor for type [String] and conformance [A]( &lazy protocol witness table cache variable for type NSDecimal.ParseStrategy<NSDecimal.FormatStyle.Percent> and conformance NSDecimal.ParseStrategy<A>,  &demangling cache variable for type metadata for NSDecimal.ParseStrategy<NSDecimal.FormatStyle.Percent>,  (uint64_t)&protocol conformance descriptor for NSDecimal.ParseStrategy<A>);
}

uint64_t instantiation function for generic protocol witness table for NSDecimal.FormatStyle.Percent( uint64_t a1)
{
  uint64_t result = lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( &lazy protocol witness table cache variable for type NSDecimal.FormatStyle.Percent and conformance NSDecimal.FormatStyle.Percent,  type metadata accessor for NSDecimal.FormatStyle.Percent,  (uint64_t)&protocol conformance descriptor for NSDecimal.FormatStyle.Percent);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t base witness table accessor for RegexComponent in NSDecimal.FormatStyle()
{
  return lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( &lazy protocol witness table cache variable for type NSDecimal.FormatStyle and conformance NSDecimal.FormatStyle,  type metadata accessor for NSDecimal.FormatStyle,  (uint64_t)&protocol conformance descriptor for NSDecimal.FormatStyle);
}

uint64_t base witness table accessor for RegexComponent in NSDecimal.FormatStyle.Percent()
{
  return lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( &lazy protocol witness table cache variable for type NSDecimal.FormatStyle.Percent and conformance NSDecimal.FormatStyle.Percent,  type metadata accessor for NSDecimal.FormatStyle.Percent,  (uint64_t)&protocol conformance descriptor for NSDecimal.FormatStyle.Percent);
}

uint64_t base witness table accessor for RegexComponent in NSDecimal.FormatStyle.Currency()
{
  return lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( &lazy protocol witness table cache variable for type NSDecimal.FormatStyle.Currency and conformance NSDecimal.FormatStyle.Currency,  type metadata accessor for NSDecimal.FormatStyle.Currency,  (uint64_t)&protocol conformance descriptor for NSDecimal.FormatStyle.Currency);
}

uint64_t getEnumTagSinglePayload for NSDecimal.FormatStyle()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t storeEnumTagSinglePayload for NSDecimal.FormatStyle()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

void *initializeBufferWithCopyOfBuffer for NSDecimal.FormatStyle(void *a1, void *a2, uint64_t a3)
{
  uint64_t v3 = a1;
  int v4 = *(_DWORD *)(*(void *)(a3 - 8) + 80LL);
  uint64_t v5 = *a2;
  if ((v4 & 0x20000) != 0)
  {
    *a1 = v5;
    uint64_t v3 = (void *)(v5 + ((v4 + 16LL) & ~(unint64_t)v4));
    swift_retain();
  }

  else
  {
    uint64_t v6 = a2[1];
    *a1 = v5;
    a1[1] = v6;
    uint64_t v7 = *(int *)(a3 + 20);
    uint64_t v8 = (char *)a1 + v7;
    uint64_t v9 = (char *)a2 + v7;
    v8[8] = *((_BYTE *)a2 + v7 + 8);
    *(void *)uint64_t v8 = *(void *)((char *)a2 + v7);
    *(_OWORD *)(v8 + 57) = *(_OWORD *)((char *)a2 + v7 + 57);
    __int128 v10 = *(_OWORD *)((char *)a2 + v7 + 48);
    __int128 v11 = *(_OWORD *)((char *)a2 + v7 + 16);
    *((_OWORD *)v8 + 2) = *(_OWORD *)((char *)a2 + v7 + 32);
    *((_OWORD *)v8 + 3) = v10;
    *((_OWORD *)v8 + 1) = v11;
    v8[73] = *((_BYTE *)a2 + v7 + 73);
    LOWORD(v7) = *(_WORD *)((char *)a2 + v7 + 74);
    v8[76] = v9[76];
    *((_WORD *)v8 + 37) = v7;
    v8[77] = v9[77];
    uint64_t v12 = (int *)type metadata accessor for NumberFormatStyleConfiguration.Collection(0LL);
    uint64_t v13 = v12[9];
    uint64_t v14 = &v8[v13];
    uint64_t v15 = &v9[v13];
    uint64_t v16 = type metadata accessor for FloatingPointRoundingRule();
    uint64_t v17 = *(void *)(v16 - 8);
    uint64_t v18 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v17 + 48);
    swift_unknownObjectRetain();
    if (v18(v15, 1LL, v16))
    {
      uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
      memcpy(v14, v15, *(void *)(*(void *)(v19 - 8) + 64LL));
    }

    else
    {
      (*(void (**)(char *, char *, uint64_t))(v17 + 16))(v14, v15, v16);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v17 + 56))(v14, 0LL, 1LL, v16);
    }

    uint64_t v20 = v12[10];
    uint64_t v21 = &v8[v20];
    uint64_t v22 = &v9[v20];
    *(void *)uint64_t v21 = *(void *)v22;
    v21[8] = v22[8];
    v8[v12[11]] = v9[v12[11]];
  }

  return v3;
}

uint64_t destroy for NSDecimal.FormatStyle(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a1 + *(int *)(a2 + 20);
  uint64_t v5 = v4 + *(int *)(type metadata accessor for NumberFormatStyleConfiguration.Collection(0LL) + 36);
  uint64_t v6 = type metadata accessor for FloatingPointRoundingRule();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(v5, 1LL, v6);
  if (!(_DWORD)result) {
    return (*(uint64_t (**)(uint64_t, uint64_t))(v7 + 8))(v5, v6);
  }
  return result;
}

_OWORD *initializeWithCopy for NSDecimal.FormatStyle(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(int *)(a3 + 20);
  uint64_t v5 = (char *)a1 + v4;
  uint64_t v6 = (char *)a2 + v4;
  v5[8] = *((_BYTE *)a2 + v4 + 8);
  *(void *)uint64_t v5 = *(void *)((char *)a2 + v4);
  *(_OWORD *)(v5 + 57) = *(_OWORD *)((char *)a2 + v4 + 57);
  __int128 v7 = *(_OWORD *)((char *)a2 + v4 + 48);
  __int128 v8 = *(_OWORD *)((char *)a2 + v4 + 16);
  *((_OWORD *)v5 + 2) = *(_OWORD *)((char *)a2 + v4 + 32);
  *((_OWORD *)v5 + 3) = v7;
  *((_OWORD *)v5 + 1) = v8;
  v5[73] = *((_BYTE *)a2 + v4 + 73);
  *((_WORD *)v5 + 37) = *(_WORD *)((char *)a2 + v4 + 74);
  v5[76] = *((_BYTE *)a2 + v4 + 76);
  v5[77] = *((_BYTE *)a2 + v4 + 77);
  uint64_t v9 = (int *)type metadata accessor for NumberFormatStyleConfiguration.Collection(0LL);
  uint64_t v10 = v9[9];
  __int128 v11 = &v5[v10];
  uint64_t v12 = &v6[v10];
  uint64_t v13 = type metadata accessor for FloatingPointRoundingRule();
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48);
  swift_unknownObjectRetain();
  if (v15(v12, 1LL, v13))
  {
    uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
    memcpy(v11, v12, *(void *)(*(void *)(v16 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v14 + 16))(v11, v12, v13);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v14 + 56))(v11, 0LL, 1LL, v13);
  }

  uint64_t v17 = v9[10];
  uint64_t v18 = &v5[v17];
  uint64_t v19 = &v6[v17];
  *(void *)uint64_t v18 = *(void *)v19;
  v18[8] = v19[8];
  v5[v9[11]] = v6[v9[11]];
  return a1;
}

void *assignWithCopy for NSDecimal.FormatStyle(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = a2[1];
  *a1 = *a2;
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  a1[1] = v6;
  uint64_t v7 = *(int *)(a3 + 20);
  __int128 v8 = (char *)a1 + v7;
  uint64_t v9 = (char *)a2 + v7;
  LOBYTE(v7) = *((_BYTE *)a2 + v7 + 8);
  *(void *)__int128 v8 = *(void *)v9;
  v8[8] = v7;
  __int128 v10 = *((_OWORD *)v9 + 1);
  __int128 v11 = *((_OWORD *)v9 + 2);
  __int128 v12 = *((_OWORD *)v9 + 3);
  *(_OWORD *)(v8 + 57) = *(_OWORD *)(v9 + 57);
  *((_OWORD *)v8 + 2) = v11;
  *((_OWORD *)v8 + 3) = v12;
  *((_OWORD *)v8 + 1) = v10;
  v8[73] = v9[73];
  LOWORD(v7) = *((_WORD *)v9 + 37);
  v8[76] = v9[76];
  *((_WORD *)v8 + 37) = v7;
  v8[77] = v9[77];
  uint64_t v13 = (int *)type metadata accessor for NumberFormatStyleConfiguration.Collection(0LL);
  uint64_t v14 = v13[9];
  uint64_t v15 = &v8[v14];
  uint64_t v16 = &v9[v14];
  uint64_t v17 = type metadata accessor for FloatingPointRoundingRule();
  uint64_t v18 = *(void *)(v17 - 8);
  uint64_t v19 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v18 + 48);
  int v20 = v19(v15, 1LL, v17);
  int v21 = v19(v16, 1LL, v17);
  if (!v20)
  {
    if (!v21)
    {
      (*(void (**)(char *, char *, uint64_t))(v18 + 24))(v15, v16, v17);
      goto LABEL_7;
    }

    (*(void (**)(char *, uint64_t))(v18 + 8))(v15, v17);
    goto LABEL_6;
  }

  if (v21)
  {
LABEL_6:
    uint64_t v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
    memcpy(v15, v16, *(void *)(*(void *)(v22 - 8) + 64LL));
    goto LABEL_7;
  }

  (*(void (**)(char *, char *, uint64_t))(v18 + 16))(v15, v16, v17);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v18 + 56))(v15, 0LL, 1LL, v17);
LABEL_7:
  uint64_t v23 = v13[10];
  __int128 v24 = &v8[v23];
  uint64_t v25 = &v9[v23];
  uint64_t v26 = *(void *)v25;
  v24[8] = v25[8];
  *(void *)__int128 v24 = v26;
  v8[v13[11]] = v9[v13[11]];
  return a1;
}

_OWORD *initializeWithTake for NSDecimal.FormatStyle(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(int *)(a3 + 20);
  uint64_t v5 = (char *)a1 + v4;
  uint64_t v6 = (char *)a2 + v4;
  v5[8] = *((_BYTE *)a2 + v4 + 8);
  *(void *)uint64_t v5 = *(void *)((char *)a2 + v4);
  *(_OWORD *)(v5 + 57) = *(_OWORD *)((char *)a2 + v4 + 57);
  __int128 v7 = *(_OWORD *)((char *)a2 + v4 + 48);
  __int128 v8 = *(_OWORD *)((char *)a2 + v4 + 16);
  *((_OWORD *)v5 + 2) = *(_OWORD *)((char *)a2 + v4 + 32);
  *((_OWORD *)v5 + 3) = v7;
  *((_OWORD *)v5 + 1) = v8;
  v5[73] = *((_BYTE *)a2 + v4 + 73);
  LOWORD(v4) = *(_WORD *)((char *)a2 + v4 + 74);
  v5[76] = v6[76];
  *((_WORD *)v5 + 37) = v4;
  v5[77] = v6[77];
  uint64_t v9 = (int *)type metadata accessor for NumberFormatStyleConfiguration.Collection(0LL);
  uint64_t v10 = v9[9];
  __int128 v11 = &v5[v10];
  __int128 v12 = &v6[v10];
  uint64_t v13 = type metadata accessor for FloatingPointRoundingRule();
  uint64_t v14 = *(void *)(v13 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1LL, v13))
  {
    uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
    memcpy(v11, v12, *(void *)(*(void *)(v15 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v14 + 32))(v11, v12, v13);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v14 + 56))(v11, 0LL, 1LL, v13);
  }

  uint64_t v16 = v9[10];
  uint64_t v17 = &v5[v16];
  uint64_t v18 = &v6[v16];
  *(void *)uint64_t v17 = *(void *)v18;
  v17[8] = v18[8];
  v5[v9[11]] = v6[v9[11]];
  return a1;
}

void *assignWithTake for NSDecimal.FormatStyle(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = a2[1];
  *a1 = *a2;
  swift_unknownObjectRelease();
  a1[1] = v6;
  uint64_t v7 = *(int *)(a3 + 20);
  __int128 v8 = (char *)a1 + v7;
  uint64_t v9 = (char *)a2 + v7;
  *(void *)__int128 v8 = *(void *)((char *)a2 + v7);
  v8[8] = *((_BYTE *)a2 + v7 + 8);
  __int128 v10 = *(_OWORD *)((char *)a2 + v7 + 32);
  *((_OWORD *)v8 + 1) = *(_OWORD *)((char *)a2 + v7 + 16);
  *((_OWORD *)v8 + 2) = v10;
  *((_OWORD *)v8 + 3) = *(_OWORD *)((char *)a2 + v7 + 48);
  *(_OWORD *)(v8 + 57) = *(_OWORD *)((char *)a2 + v7 + 57);
  v8[73] = *((_BYTE *)a2 + v7 + 73);
  v8[76] = *((_BYTE *)a2 + v7 + 76);
  *((_WORD *)v8 + 37) = *(_WORD *)((char *)a2 + v7 + 74);
  v8[77] = *((_BYTE *)a2 + v7 + 77);
  __int128 v11 = (int *)type metadata accessor for NumberFormatStyleConfiguration.Collection(0LL);
  uint64_t v12 = v11[9];
  uint64_t v13 = &v8[v12];
  uint64_t v14 = &v9[v12];
  uint64_t v15 = type metadata accessor for FloatingPointRoundingRule();
  uint64_t v16 = *(void *)(v15 - 8);
  uint64_t v17 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v16 + 48);
  int v18 = v17(v13, 1LL, v15);
  int v19 = v17(v14, 1LL, v15);
  if (!v18)
  {
    if (!v19)
    {
      (*(void (**)(char *, char *, uint64_t))(v16 + 40))(v13, v14, v15);
      goto LABEL_7;
    }

    (*(void (**)(char *, uint64_t))(v16 + 8))(v13, v15);
    goto LABEL_6;
  }

  if (v19)
  {
LABEL_6:
    uint64_t v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
    memcpy(v13, v14, *(void *)(*(void *)(v20 - 8) + 64LL));
    goto LABEL_7;
  }

  (*(void (**)(char *, char *, uint64_t))(v16 + 32))(v13, v14, v15);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v16 + 56))(v13, 0LL, 1LL, v15);
LABEL_7:
  uint64_t v21 = v11[10];
  uint64_t v22 = &v8[v21];
  uint64_t v23 = &v9[v21];
  *(void *)uint64_t v22 = *(void *)v23;
  v22[8] = v23[8];
  v8[v11[11]] = v9[v11[11]];
  return a1;
}

uint64_t getEnumTagSinglePayload for NSDecimal.FormatStyle.Percent()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t __swift_get_extra_inhabitant_indexTm_2(char *a1, uint64_t a2, uint64_t a3)
{
  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    uint64_t v4 = *(void *)a1;
    if (*(void *)a1 >= 0xFFFFFFFFuLL) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }

  else
  {
    uint64_t v8 = type metadata accessor for NumberFormatStyleConfiguration.Collection(0LL);
    return (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48LL))( &a1[*(int *)(a3 + 20)],  a2,  v8);
  }

uint64_t storeEnumTagSinglePayload for NSDecimal.FormatStyle.Percent()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

char *__swift_store_extra_inhabitant_indexTm_2(char *result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)uint64_t result = (a2 - 1);
  }

  else
  {
    uint64_t v7 = type metadata accessor for NumberFormatStyleConfiguration.Collection(0LL);
    return (char *)(*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56LL))( &v5[*(int *)(a4 + 20)],  a2,  a2,  v7);
  }

  return result;
}

uint64_t type metadata completion function for NSDecimal.FormatStyle()
{
  uint64_t result = type metadata accessor for NumberFormatStyleConfiguration.Collection(319LL);
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0LL;
  }

  return result;
}

void *initializeBufferWithCopyOfBuffer for NSDecimal.FormatStyle.Currency( void *a1, void *a2, uint64_t a3)
{
  uint64_t v3 = a1;
  int v4 = *(_DWORD *)(*(void *)(a3 - 8) + 80LL);
  uint64_t v5 = *a2;
  if ((v4 & 0x20000) != 0)
  {
    *a1 = v5;
    uint64_t v3 = (void *)(v5 + ((v4 + 16LL) & ~(unint64_t)v4));
    swift_retain();
  }

  else
  {
    uint64_t v6 = a2[1];
    uint64_t v7 = a2[2];
    *a1 = v5;
    a1[1] = v6;
    uint64_t v8 = a2[3];
    a1[2] = v7;
    a1[3] = v8;
    uint64_t v9 = *(int *)(a3 + 24);
    __int128 v10 = (char *)a1 + v9;
    __int128 v11 = (char *)a2 + v9;
    *(void *)__int128 v10 = *(void *)((char *)a2 + v9);
    v10[8] = *((_BYTE *)a2 + v9 + 8);
    __int128 v12 = *(_OWORD *)((char *)a2 + v9 + 32);
    *((_OWORD *)v10 + 1) = *(_OWORD *)((char *)a2 + v9 + 16);
    *((_OWORD *)v10 + 2) = v12;
    *((_OWORD *)v10 + 3) = *(_OWORD *)((char *)a2 + v9 + 48);
    *(_OWORD *)(v10 + 57) = *(_OWORD *)((char *)a2 + v9 + 57);
    v10[73] = *((_BYTE *)a2 + v9 + 73);
    *(_DWORD *)(v10 + 74) = *(_DWORD *)((char *)a2 + v9 + 74);
    v10[78] = *((_BYTE *)a2 + v9 + 78);
    uint64_t v13 = (int *)type metadata accessor for CurrencyFormatStyleConfiguration.Collection(0LL);
    uint64_t v14 = v13[9];
    __dst = &v10[v14];
    uint64_t v15 = &v11[v14];
    uint64_t v16 = type metadata accessor for FloatingPointRoundingRule();
    uint64_t v17 = *(void *)(v16 - 8);
    int v18 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v17 + 48);
    swift_unknownObjectRetain();
    swift_bridgeObjectRetain();
    if (v18(v15, 1LL, v16))
    {
      uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
      memcpy(__dst, v15, *(void *)(*(void *)(v19 - 8) + 64LL));
    }

    else
    {
      (*(void (**)(char *, char *, uint64_t))(v17 + 16))(__dst, v15, v16);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v17 + 56))(__dst, 0LL, 1LL, v16);
    }

    uint64_t v20 = v13[10];
    uint64_t v21 = &v10[v20];
    uint64_t v22 = &v11[v20];
    *(void *)uint64_t v21 = *(void *)v22;
    v21[8] = v22[8];
    v10[v13[11]] = v11[v13[11]];
    v10[v13[12]] = v11[v13[12]];
  }

  return v3;
}

uint64_t destroy for NSDecimal.FormatStyle.Currency(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a1 + *(int *)(a2 + 24);
  uint64_t v5 = v4 + *(int *)(type metadata accessor for CurrencyFormatStyleConfiguration.Collection(0LL) + 36);
  uint64_t v6 = type metadata accessor for FloatingPointRoundingRule();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(v5, 1LL, v6);
  if (!(_DWORD)result) {
    return (*(uint64_t (**)(uint64_t, uint64_t))(v7 + 8))(v5, v6);
  }
  return result;
}

uint64_t initializeWithCopy for NSDecimal.FormatStyle.Currency(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  uint64_t v4 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v4;
  uint64_t v5 = *(int *)(a3 + 24);
  uint64_t v6 = a1 + v5;
  uint64_t v7 = a2 + v5;
  *(void *)uint64_t v6 = *(void *)(a2 + v5);
  *(_BYTE *)(v6 + 8) = *(_BYTE *)(a2 + v5 + 8);
  __int128 v8 = *(_OWORD *)(a2 + v5 + 32);
  *(_OWORD *)(v6 + 16) = *(_OWORD *)(a2 + v5 + 16);
  *(_OWORD *)(v6 + 32) = v8;
  *(_OWORD *)(v6 + 48) = *(_OWORD *)(a2 + v5 + 48);
  *(_OWORD *)(v6 + 57) = *(_OWORD *)(a2 + v5 + 57);
  *(_BYTE *)(v6 + 73) = *(_BYTE *)(a2 + v5 + 73);
  *(_DWORD *)(v6 + 74) = *(_DWORD *)(a2 + v5 + 74);
  *(_BYTE *)(v6 + 78) = *(_BYTE *)(a2 + v5 + 78);
  uint64_t v9 = (int *)type metadata accessor for CurrencyFormatStyleConfiguration.Collection(0LL);
  uint64_t v10 = v9[9];
  __int128 v11 = (void *)(v6 + v10);
  __int128 v12 = (const void *)(v7 + v10);
  uint64_t v13 = type metadata accessor for FloatingPointRoundingRule();
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v14 + 48);
  swift_unknownObjectRetain();
  swift_bridgeObjectRetain();
  if (v15(v12, 1LL, v13))
  {
    uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
    memcpy(v11, v12, *(void *)(*(void *)(v16 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v14 + 16))(v11, v12, v13);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v14 + 56))(v11, 0LL, 1LL, v13);
  }

  uint64_t v17 = v9[10];
  uint64_t v18 = v6 + v17;
  uint64_t v19 = v7 + v17;
  *(void *)uint64_t v18 = *(void *)v19;
  *(_BYTE *)(v18 + 8) = *(_BYTE *)(v19 + 8);
  *(_BYTE *)(v6 + v9[11]) = *(_BYTE *)(v7 + v9[11]);
  *(_BYTE *)(v6 + v9[12]) = *(_BYTE *)(v7 + v9[12]);
  return a1;
}

void *assignWithCopy for NSDecimal.FormatStyle.Currency(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = a2[1];
  *a1 = *a2;
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  a1[1] = v6;
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v7 = *(int *)(a3 + 24);
  __int128 v8 = (char *)a1 + v7;
  uint64_t v9 = (char *)a2 + v7;
  uint64_t v10 = *(void *)((char *)a2 + v7);
  v8[8] = v9[8];
  *(void *)__int128 v8 = v10;
  __int128 v11 = *((_OWORD *)v9 + 1);
  __int128 v12 = *((_OWORD *)v9 + 2);
  __int128 v13 = *((_OWORD *)v9 + 3);
  *(_OWORD *)(v8 + 57) = *(_OWORD *)(v9 + 57);
  *((_OWORD *)v8 + 2) = v12;
  *((_OWORD *)v8 + 3) = v13;
  *((_OWORD *)v8 + 1) = v11;
  v8[73] = v9[73];
  *(_DWORD *)(v8 + 74) = *(_DWORD *)(v9 + 74);
  v8[78] = v9[78];
  uint64_t v14 = (int *)type metadata accessor for CurrencyFormatStyleConfiguration.Collection(0LL);
  uint64_t v15 = v14[9];
  uint64_t v16 = &v8[v15];
  uint64_t v17 = &v9[v15];
  uint64_t v18 = type metadata accessor for FloatingPointRoundingRule();
  uint64_t v19 = *(void *)(v18 - 8);
  uint64_t v20 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v19 + 48);
  int v21 = v20(v16, 1LL, v18);
  int v22 = v20(v17, 1LL, v18);
  if (!v21)
  {
    if (!v22)
    {
      (*(void (**)(char *, char *, uint64_t))(v19 + 24))(v16, v17, v18);
      goto LABEL_7;
    }

    (*(void (**)(char *, uint64_t))(v19 + 8))(v16, v18);
    goto LABEL_6;
  }

  if (v22)
  {
LABEL_6:
    uint64_t v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
    memcpy(v16, v17, *(void *)(*(void *)(v23 - 8) + 64LL));
    goto LABEL_7;
  }

  (*(void (**)(char *, char *, uint64_t))(v19 + 16))(v16, v17, v18);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v19 + 56))(v16, 0LL, 1LL, v18);
LABEL_7:
  uint64_t v24 = v14[10];
  uint64_t v25 = &v8[v24];
  uint64_t v26 = &v9[v24];
  uint64_t v27 = *(void *)v26;
  v25[8] = v26[8];
  *(void *)uint64_t v25 = v27;
  v8[v14[11]] = v9[v14[11]];
  v8[v14[12]] = v9[v14[12]];
  return a1;
}

_OWORD *initializeWithTake for NSDecimal.FormatStyle.Currency(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  __int128 v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  uint64_t v5 = *(int *)(a3 + 24);
  uint64_t v6 = (char *)a1 + v5;
  uint64_t v7 = (char *)a2 + v5;
  v6[8] = *((_BYTE *)a2 + v5 + 8);
  *(void *)uint64_t v6 = *(void *)((char *)a2 + v5);
  *(_OWORD *)(v6 + 57) = *(_OWORD *)((char *)a2 + v5 + 57);
  __int128 v8 = *(_OWORD *)((char *)a2 + v5 + 48);
  __int128 v9 = *(_OWORD *)((char *)a2 + v5 + 16);
  *((_OWORD *)v6 + 2) = *(_OWORD *)((char *)a2 + v5 + 32);
  *((_OWORD *)v6 + 3) = v8;
  *((_OWORD *)v6 + 1) = v9;
  v6[73] = *((_BYTE *)a2 + v5 + 73);
  *(_DWORD *)(v6 + 74) = *(_DWORD *)((char *)a2 + v5 + 74);
  v6[78] = *((_BYTE *)a2 + v5 + 78);
  uint64_t v10 = (int *)type metadata accessor for CurrencyFormatStyleConfiguration.Collection(0LL);
  uint64_t v11 = v10[9];
  __int128 v12 = &v6[v11];
  __int128 v13 = &v7[v11];
  uint64_t v14 = type metadata accessor for FloatingPointRoundingRule();
  uint64_t v15 = *(void *)(v14 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v13, 1LL, v14))
  {
    uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
    memcpy(v12, v13, *(void *)(*(void *)(v16 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v15 + 32))(v12, v13, v14);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v15 + 56))(v12, 0LL, 1LL, v14);
  }

  uint64_t v17 = v10[10];
  uint64_t v18 = &v6[v17];
  uint64_t v19 = &v7[v17];
  *(void *)uint64_t v18 = *(void *)v19;
  v18[8] = v19[8];
  v6[v10[11]] = v7[v10[11]];
  v6[v10[12]] = v7[v10[12]];
  return a1;
}

void *assignWithTake for NSDecimal.FormatStyle.Currency(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = a2[1];
  *a1 = *a2;
  swift_unknownObjectRelease();
  uint64_t v7 = a2[2];
  uint64_t v8 = a2[3];
  a1[1] = v6;
  a1[2] = v7;
  a1[3] = v8;
  swift_bridgeObjectRelease();
  uint64_t v9 = *(int *)(a3 + 24);
  uint64_t v10 = (char *)a1 + v9;
  uint64_t v11 = (char *)a2 + v9;
  *(void *)uint64_t v10 = *(void *)((char *)a2 + v9);
  v10[8] = *((_BYTE *)a2 + v9 + 8);
  __int128 v12 = *(_OWORD *)((char *)a2 + v9 + 32);
  *((_OWORD *)v10 + 1) = *(_OWORD *)((char *)a2 + v9 + 16);
  *((_OWORD *)v10 + 2) = v12;
  *((_OWORD *)v10 + 3) = *(_OWORD *)((char *)a2 + v9 + 48);
  *(_OWORD *)(v10 + 57) = *(_OWORD *)((char *)a2 + v9 + 57);
  v10[73] = *((_BYTE *)a2 + v9 + 73);
  *(_DWORD *)(v10 + 74) = *(_DWORD *)((char *)a2 + v9 + 74);
  v10[78] = *((_BYTE *)a2 + v9 + 78);
  __int128 v13 = (int *)type metadata accessor for CurrencyFormatStyleConfiguration.Collection(0LL);
  uint64_t v14 = v13[9];
  uint64_t v15 = &v10[v14];
  uint64_t v16 = &v11[v14];
  uint64_t v17 = type metadata accessor for FloatingPointRoundingRule();
  uint64_t v18 = *(void *)(v17 - 8);
  uint64_t v19 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v18 + 48);
  int v20 = v19(v15, 1LL, v17);
  int v21 = v19(v16, 1LL, v17);
  if (!v20)
  {
    if (!v21)
    {
      (*(void (**)(char *, char *, uint64_t))(v18 + 40))(v15, v16, v17);
      goto LABEL_7;
    }

    (*(void (**)(char *, uint64_t))(v18 + 8))(v15, v17);
    goto LABEL_6;
  }

  if (v21)
  {
LABEL_6:
    uint64_t v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
    memcpy(v15, v16, *(void *)(*(void *)(v22 - 8) + 64LL));
    goto LABEL_7;
  }

  (*(void (**)(char *, char *, uint64_t))(v18 + 32))(v15, v16, v17);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v18 + 56))(v15, 0LL, 1LL, v17);
LABEL_7:
  uint64_t v23 = v13[10];
  uint64_t v24 = &v10[v23];
  uint64_t v25 = &v11[v23];
  *(void *)uint64_t v24 = *(void *)v25;
  v24[8] = v25[8];
  v10[v13[11]] = v11[v13[11]];
  v10[v13[12]] = v11[v13[12]];
  return a1;
}

uint64_t getEnumTagSinglePayload for NSDecimal.FormatStyle.Currency()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_183143BD0(char *a1, uint64_t a2, uint64_t a3)
{
  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    uint64_t v4 = *(void *)a1;
    if (*(void *)a1 >= 0xFFFFFFFFuLL) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }

  else
  {
    uint64_t v8 = type metadata accessor for CurrencyFormatStyleConfiguration.Collection(0LL);
    return (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48LL))( &a1[*(int *)(a3 + 24)],  a2,  v8);
  }

uint64_t storeEnumTagSinglePayload for NSDecimal.FormatStyle.Currency()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

char *sub_183143C58(char *result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)uint64_t result = (a2 - 1);
  }

  else
  {
    uint64_t v7 = type metadata accessor for CurrencyFormatStyleConfiguration.Collection(0LL);
    return (char *)(*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56LL))( &v5[*(int *)(a4 + 24)],  a2,  a2,  v7);
  }

  return result;
}

uint64_t type metadata completion function for NSDecimal.FormatStyle.Currency()
{
  uint64_t result = type metadata accessor for CurrencyFormatStyleConfiguration.Collection(319LL);
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0LL;
  }

  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for NSDecimal.FormatStyle.Attributed(uint64_t a1, uint64_t *a2)
{
  int v4 = *(_DWORD *)(*(void *)(type metadata accessor for NSDecimal.FormatStyle.Attributed.Style(0LL) - 8) + 80LL);
  if ((v4 & 0x20000) == 0)
  {
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2)
    {
      *(_OWORD *)a1 = *(_OWORD *)a2;
      uint64_t v19 = *(int *)(type metadata accessor for NSDecimal.FormatStyle.Percent(0LL) + 20);
      uint64_t v20 = a1 + v19;
      uint64_t v21 = (uint64_t)a2 + v19;
      *(void *)uint64_t v20 = *(uint64_t *)((char *)a2 + v19);
      *(_BYTE *)(v20 + 8) = *((_BYTE *)a2 + v19 + 8);
      __int128 v22 = *(_OWORD *)((char *)a2 + v19 + 32);
      *(_OWORD *)(v20 + 16) = *(_OWORD *)((char *)a2 + v19 + 16);
      *(_OWORD *)(v20 + 32) = v22;
      *(_OWORD *)(v20 + 48) = *(_OWORD *)((char *)a2 + v19 + 48);
      *(_OWORD *)(v20 + 57) = *(_OWORD *)((char *)a2 + v19 + 57);
      *(_BYTE *)(v20 + 73) = *((_BYTE *)a2 + v19 + 73);
      *(_WORD *)(v20 + 74) = *(_WORD *)((char *)a2 + v19 + 74);
      *(_BYTE *)(v20 + 76) = *((_BYTE *)a2 + v19 + 76);
      *(_BYTE *)(v20 + 77) = *((_BYTE *)a2 + v19 + 77);
      uint64_t v23 = (int *)type metadata accessor for NumberFormatStyleConfiguration.Collection(0LL);
      uint64_t v24 = v23[9];
      uint64_t v25 = (void *)(v20 + v24);
      uint64_t v26 = (const void *)(v21 + v24);
      uint64_t v27 = type metadata accessor for FloatingPointRoundingRule();
      uint64_t v28 = *(void *)(v27 - 8);
      uint64_t v29 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v28 + 48);
      swift_unknownObjectRetain();
      if (v29(v26, 1LL, v27))
      {
LABEL_10:
        uint64_t v34 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
        memcpy(v25, v26, *(void *)(*(void *)(v34 - 8) + 64LL));
LABEL_14:
        uint64_t v38 = v23[10];
        uint64_t v39 = v20 + v38;
        uint64_t v40 = v21 + v38;
        *(void *)uint64_t v39 = *(void *)v40;
        *(_BYTE *)(v39 + 8) = *(_BYTE *)(v40 + 8);
        *(_BYTE *)(v20 + v23[11]) = *(_BYTE *)(v21 + v23[11]);
LABEL_15:
        swift_storeEnumTagMultiPayload();
        return a1;
      }
    }

    else
    {
      if (EnumCaseMultiPayload == 1)
      {
        *(_OWORD *)a1 = *(_OWORD *)a2;
        uint64_t v6 = a2[3];
        *(void *)(a1 + 16) = a2[2];
        *(void *)(a1 + 24) = v6;
        uint64_t v7 = *(int *)(type metadata accessor for NSDecimal.FormatStyle.Currency(0LL) + 24);
        uint64_t v8 = a1 + v7;
        uint64_t v9 = (uint64_t)a2 + v7;
        *(void *)uint64_t v8 = *(uint64_t *)((char *)a2 + v7);
        *(_BYTE *)(v8 + 8) = *((_BYTE *)a2 + v7 + 8);
        __int128 v10 = *(_OWORD *)((char *)a2 + v7 + 32);
        *(_OWORD *)(v8 + 16) = *(_OWORD *)((char *)a2 + v7 + 16);
        *(_OWORD *)(v8 + 32) = v10;
        *(_OWORD *)(v8 + 48) = *(_OWORD *)((char *)a2 + v7 + 48);
        *(_OWORD *)(v8 + 57) = *(_OWORD *)((char *)a2 + v7 + 57);
        *(_BYTE *)(v8 + 73) = *((_BYTE *)a2 + v7 + 73);
        *(_DWORD *)(v8 + 74) = *(_DWORD *)((char *)a2 + v7 + 74);
        *(_BYTE *)(v8 + 78) = *((_BYTE *)a2 + v7 + 78);
        uint64_t v11 = (int *)type metadata accessor for CurrencyFormatStyleConfiguration.Collection(0LL);
        uint64_t v12 = v11[9];
        __dst = (void *)(v8 + v12);
        __int128 v13 = (const void *)(v9 + v12);
        uint64_t v14 = type metadata accessor for FloatingPointRoundingRule();
        uint64_t v15 = *(void *)(v14 - 8);
        uint64_t v16 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v15 + 48);
        swift_unknownObjectRetain();
        swift_bridgeObjectRetain();
        if (v16(v13, 1LL, v14))
        {
          uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
          memcpy(__dst, v13, *(void *)(*(void *)(v17 - 8) + 64LL));
        }

        else
        {
          (*(void (**)(void *, const void *, uint64_t))(v15 + 16))(__dst, v13, v14);
          (*(void (**)(void *, void, uint64_t, uint64_t))(v15 + 56))(__dst, 0LL, 1LL, v14);
        }

        uint64_t v35 = v11[10];
        uint64_t v36 = v8 + v35;
        uint64_t v37 = v9 + v35;
        *(void *)uint64_t v36 = *(void *)v37;
        *(_BYTE *)(v36 + 8) = *(_BYTE *)(v37 + 8);
        *(_BYTE *)(v8 + v11[11]) = *(_BYTE *)(v9 + v11[11]);
        *(_BYTE *)(v8 + v11[12]) = *(_BYTE *)(v9 + v11[12]);
        goto LABEL_15;
      }

      *(_OWORD *)a1 = *(_OWORD *)a2;
      uint64_t v30 = *(int *)(type metadata accessor for NSDecimal.FormatStyle(0LL) + 20);
      uint64_t v20 = a1 + v30;
      uint64_t v21 = (uint64_t)a2 + v30;
      *(void *)uint64_t v20 = *(uint64_t *)((char *)a2 + v30);
      *(_BYTE *)(v20 + 8) = *((_BYTE *)a2 + v30 + 8);
      __int128 v31 = *(_OWORD *)((char *)a2 + v30 + 32);
      *(_OWORD *)(v20 + 16) = *(_OWORD *)((char *)a2 + v30 + 16);
      *(_OWORD *)(v20 + 32) = v31;
      *(_OWORD *)(v20 + 48) = *(_OWORD *)((char *)a2 + v30 + 48);
      *(_OWORD *)(v20 + 57) = *(_OWORD *)((char *)a2 + v30 + 57);
      *(_BYTE *)(v20 + 73) = *((_BYTE *)a2 + v30 + 73);
      *(_WORD *)(v20 + 74) = *(_WORD *)((char *)a2 + v30 + 74);
      *(_BYTE *)(v20 + 76) = *((_BYTE *)a2 + v30 + 76);
      *(_BYTE *)(v20 + 77) = *((_BYTE *)a2 + v30 + 77);
      uint64_t v23 = (int *)type metadata accessor for NumberFormatStyleConfiguration.Collection(0LL);
      uint64_t v32 = v23[9];
      uint64_t v25 = (void *)(v20 + v32);
      uint64_t v26 = (const void *)(v21 + v32);
      uint64_t v27 = type metadata accessor for FloatingPointRoundingRule();
      uint64_t v28 = *(void *)(v27 - 8);
      __int128 v33 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v28 + 48);
      swift_unknownObjectRetain();
      if (v33(v26, 1LL, v27)) {
        goto LABEL_10;
      }
    }

    (*(void (**)(void *, const void *, uint64_t))(v28 + 16))(v25, v26, v27);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v28 + 56))(v25, 0LL, 1LL, v27);
    goto LABEL_14;
  }

  uint64_t v18 = *a2;
  *(void *)a1 = *a2;
  a1 = v18 + ((v4 + 16LL) & ~(unint64_t)v4);
  swift_retain();
  return a1;
}

uint64_t destroy for NSDecimal.FormatStyle.Attributed(uint64_t a1)
{
  uint64_t result = swift_getEnumCaseMultiPayload();
  if ((_DWORD)result == 2)
  {
    swift_unknownObjectRelease();
    uint64_t v3 = type metadata accessor for NSDecimal.FormatStyle.Percent(0LL);
LABEL_6:
    uint64_t v4 = a1 + *(int *)(v3 + 20);
    uint64_t v5 = type metadata accessor for NumberFormatStyleConfiguration.Collection(0LL);
    goto LABEL_8;
  }

  if ((_DWORD)result != 1)
  {
    if ((_DWORD)result) {
      return result;
    }
    swift_unknownObjectRelease();
    uint64_t v3 = type metadata accessor for NSDecimal.FormatStyle(0LL);
    goto LABEL_6;
  }

  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + *(int *)(type metadata accessor for NSDecimal.FormatStyle.Currency(0LL) + 24);
  uint64_t v5 = type metadata accessor for CurrencyFormatStyleConfiguration.Collection(0LL);
LABEL_8:
  uint64_t v6 = v4 + *(int *)(v5 + 36);
  uint64_t v7 = type metadata accessor for FloatingPointRoundingRule();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v8 + 48))(v6, 1LL, v7);
  if (!(_DWORD)result) {
    return (*(uint64_t (**)(uint64_t, uint64_t))(v8 + 8))(v6, v7);
  }
  return result;
}

uint64_t initializeWithCopy for NSDecimal.FormatStyle.Attributed(uint64_t a1, uint64_t a2)
{
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 2)
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    uint64_t v18 = *(int *)(type metadata accessor for NSDecimal.FormatStyle.Percent(0LL) + 20);
    uint64_t v19 = a1 + v18;
    uint64_t v20 = a2 + v18;
    *(void *)uint64_t v19 = *(void *)(a2 + v18);
    *(_BYTE *)(v19 + 8) = *(_BYTE *)(a2 + v18 + 8);
    __int128 v21 = *(_OWORD *)(a2 + v18 + 32);
    *(_OWORD *)(v19 + 16) = *(_OWORD *)(a2 + v18 + 16);
    *(_OWORD *)(v19 + 32) = v21;
    *(_OWORD *)(v19 + 48) = *(_OWORD *)(a2 + v18 + 48);
    *(_OWORD *)(v19 + 57) = *(_OWORD *)(a2 + v18 + 57);
    *(_BYTE *)(v19 + 73) = *(_BYTE *)(a2 + v18 + 73);
    *(_WORD *)(v19 + 74) = *(_WORD *)(a2 + v18 + 74);
    *(_BYTE *)(v19 + 76) = *(_BYTE *)(a2 + v18 + 76);
    *(_BYTE *)(v19 + 77) = *(_BYTE *)(a2 + v18 + 77);
    __int128 v22 = (int *)type metadata accessor for NumberFormatStyleConfiguration.Collection(0LL);
    uint64_t v23 = v22[9];
    uint64_t v24 = (void *)(v19 + v23);
    uint64_t v25 = (const void *)(v20 + v23);
    uint64_t v26 = type metadata accessor for FloatingPointRoundingRule();
    uint64_t v27 = *(void *)(v26 - 8);
    uint64_t v28 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v27 + 48);
    swift_unknownObjectRetain();
    if (v28(v25, 1LL, v26))
    {
      uint64_t v29 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
      memcpy(v24, v25, *(void *)(*(void *)(v29 - 8) + 64LL));
    }

    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v27 + 16))(v24, v25, v26);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v27 + 56))(v24, 0LL, 1LL, v26);
    }

    uint64_t v48 = v22[10];
    uint64_t v49 = v19 + v48;
    uint64_t v50 = v20 + v48;
    *(void *)uint64_t v49 = *(void *)v50;
    *(_BYTE *)(v49 + 8) = *(_BYTE *)(v50 + 8);
    uint64_t v51 = v22[11];
    uint64_t v46 = (_BYTE *)(v19 + v51);
    uint64_t v47 = (_BYTE *)(v20 + v51);
  }

  else if (EnumCaseMultiPayload == 1)
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    uint64_t v5 = *(void *)(a2 + 24);
    *(void *)(a1 + 16) = *(void *)(a2 + 16);
    *(void *)(a1 + 24) = v5;
    uint64_t v6 = *(int *)(type metadata accessor for NSDecimal.FormatStyle.Currency(0LL) + 24);
    uint64_t v7 = a1 + v6;
    uint64_t v8 = a2 + v6;
    *(void *)uint64_t v7 = *(void *)(a2 + v6);
    *(_BYTE *)(v7 + 8) = *(_BYTE *)(a2 + v6 + 8);
    __int128 v9 = *(_OWORD *)(a2 + v6 + 32);
    *(_OWORD *)(v7 + 16) = *(_OWORD *)(a2 + v6 + 16);
    *(_OWORD *)(v7 + 32) = v9;
    *(_OWORD *)(v7 + 48) = *(_OWORD *)(a2 + v6 + 48);
    *(_OWORD *)(v7 + 57) = *(_OWORD *)(a2 + v6 + 57);
    *(_BYTE *)(v7 + 73) = *(_BYTE *)(a2 + v6 + 73);
    *(_DWORD *)(v7 + 74) = *(_DWORD *)(a2 + v6 + 74);
    *(_BYTE *)(v7 + 78) = *(_BYTE *)(a2 + v6 + 78);
    __int128 v10 = (int *)type metadata accessor for CurrencyFormatStyleConfiguration.Collection(0LL);
    uint64_t v11 = v10[9];
    uint64_t v12 = (void *)(v7 + v11);
    __int128 v13 = (const void *)(v8 + v11);
    uint64_t v14 = type metadata accessor for FloatingPointRoundingRule();
    uint64_t v15 = *(void *)(v14 - 8);
    uint64_t v16 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v15 + 48);
    swift_unknownObjectRetain();
    swift_bridgeObjectRetain();
    if (v16(v13, 1LL, v14))
    {
      uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
      memcpy(v12, v13, *(void *)(*(void *)(v17 - 8) + 64LL));
    }

    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v15 + 16))(v12, v13, v14);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v15 + 56))(v12, 0LL, 1LL, v14);
    }

    uint64_t v42 = v10[10];
    uint64_t v43 = v7 + v42;
    uint64_t v44 = v8 + v42;
    *(void *)uint64_t v43 = *(void *)v44;
    *(_BYTE *)(v43 + 8) = *(_BYTE *)(v44 + 8);
    *(_BYTE *)(v7 + v10[11]) = *(_BYTE *)(v8 + v10[11]);
    uint64_t v45 = v10[12];
    uint64_t v46 = (_BYTE *)(v7 + v45);
    uint64_t v47 = (_BYTE *)(v8 + v45);
  }

  else
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    uint64_t v30 = *(int *)(type metadata accessor for NSDecimal.FormatStyle(0LL) + 20);
    uint64_t v31 = a1 + v30;
    uint64_t v32 = a2 + v30;
    *(void *)uint64_t v31 = *(void *)(a2 + v30);
    *(_BYTE *)(v31 + 8) = *(_BYTE *)(a2 + v30 + 8);
    __int128 v33 = *(_OWORD *)(a2 + v30 + 32);
    *(_OWORD *)(v31 + 16) = *(_OWORD *)(a2 + v30 + 16);
    *(_OWORD *)(v31 + 32) = v33;
    *(_OWORD *)(v31 + 48) = *(_OWORD *)(a2 + v30 + 48);
    *(_OWORD *)(v31 + 57) = *(_OWORD *)(a2 + v30 + 57);
    *(_BYTE *)(v31 + 73) = *(_BYTE *)(a2 + v30 + 73);
    *(_WORD *)(v31 + 74) = *(_WORD *)(a2 + v30 + 74);
    *(_BYTE *)(v31 + 76) = *(_BYTE *)(a2 + v30 + 76);
    *(_BYTE *)(v31 + 77) = *(_BYTE *)(a2 + v30 + 77);
    uint64_t v34 = (int *)type metadata accessor for NumberFormatStyleConfiguration.Collection(0LL);
    uint64_t v35 = v34[9];
    uint64_t v36 = (void *)(v31 + v35);
    uint64_t v37 = (const void *)(v32 + v35);
    uint64_t v38 = type metadata accessor for FloatingPointRoundingRule();
    uint64_t v39 = *(void *)(v38 - 8);
    uint64_t v40 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v39 + 48);
    swift_unknownObjectRetain();
    if (v40(v37, 1LL, v38))
    {
      uint64_t v41 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
      memcpy(v36, v37, *(void *)(*(void *)(v41 - 8) + 64LL));
    }

    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v39 + 16))(v36, v37, v38);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v39 + 56))(v36, 0LL, 1LL, v38);
    }

    uint64_t v52 = v34[10];
    uint64_t v53 = v31 + v52;
    uint64_t v54 = v32 + v52;
    *(void *)uint64_t v53 = *(void *)v54;
    *(_BYTE *)(v53 + 8) = *(_BYTE *)(v54 + 8);
    uint64_t v55 = v34[11];
    uint64_t v46 = (_BYTE *)(v31 + v55);
    uint64_t v47 = (_BYTE *)(v32 + v55);
  }

  *uint64_t v46 = *v47;
  swift_storeEnumTagMultiPayload();
  return a1;
}

uint64_t assignWithCopy for NSDecimal.FormatStyle.Attributed(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    outlined destroy of ICUNumberFormatter.Signature( a1,  type metadata accessor for NSDecimal.FormatStyle.Attributed.Style);
    type metadata accessor for NSDecimal.FormatStyle.Attributed.Style(0LL);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2)
    {
      *(_OWORD *)a1 = *(_OWORD *)a2;
      uint64_t v19 = *(int *)(type metadata accessor for NSDecimal.FormatStyle.Percent(0LL) + 20);
      uint64_t v20 = a1 + v19;
      uint64_t v21 = a2 + v19;
      LOBYTE(v19) = *(_BYTE *)(a2 + v19 + 8);
      *(void *)uint64_t v20 = *(void *)v21;
      *(_BYTE *)(v20 + 8) = v19;
      __int128 v22 = *(_OWORD *)(v21 + 57);
      __int128 v24 = *(_OWORD *)(v21 + 32);
      __int128 v23 = *(_OWORD *)(v21 + 48);
      *(_OWORD *)(v20 + 16) = *(_OWORD *)(v21 + 16);
      *(_OWORD *)(v20 + 32) = v24;
      *(_OWORD *)(v20 + 48) = v23;
      *(_OWORD *)(v20 + 57) = v22;
      *(_BYTE *)(v20 + 73) = *(_BYTE *)(v21 + 73);
      LOWORD(v19) = *(_WORD *)(v21 + 74);
      *(_BYTE *)(v20 + 76) = *(_BYTE *)(v21 + 76);
      *(_WORD *)(v20 + 74) = v19;
      *(_BYTE *)(v20 + 77) = *(_BYTE *)(v21 + 77);
      uint64_t v25 = (int *)type metadata accessor for NumberFormatStyleConfiguration.Collection(0LL);
      uint64_t v26 = v25[9];
      uint64_t v27 = (void *)(v20 + v26);
      uint64_t v28 = (const void *)(v21 + v26);
      uint64_t v29 = type metadata accessor for FloatingPointRoundingRule();
      uint64_t v30 = *(void *)(v29 - 8);
      uint64_t v31 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v30 + 48);
      swift_unknownObjectRetain();
      if (v31(v28, 1LL, v29))
      {
LABEL_9:
        uint64_t v38 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
        memcpy(v27, v28, *(void *)(*(void *)(v38 - 8) + 64LL));
LABEL_13:
        uint64_t v46 = v25[10];
        uint64_t v47 = v20 + v46;
        uint64_t v48 = (uint64_t *)(v21 + v46);
        uint64_t v49 = *v48;
        *(_BYTE *)(v47 + 8) = *((_BYTE *)v48 + 8);
        *(void *)uint64_t v47 = v49;
        uint64_t v50 = v25[11];
        uint64_t v44 = (_BYTE *)(v20 + v50);
        uint64_t v45 = (_BYTE *)(v21 + v50);
LABEL_14:
        *uint64_t v44 = *v45;
        swift_storeEnumTagMultiPayload();
        return a1;
      }
    }

    else
    {
      if (EnumCaseMultiPayload == 1)
      {
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(void *)(a1 + 16) = *(void *)(a2 + 16);
        *(void *)(a1 + 24) = *(void *)(a2 + 24);
        uint64_t v5 = *(int *)(type metadata accessor for NSDecimal.FormatStyle.Currency(0LL) + 24);
        uint64_t v6 = a1 + v5;
        uint64_t v7 = a2 + v5;
        LOBYTE(v5) = *(_BYTE *)(a2 + v5 + 8);
        *(void *)uint64_t v6 = *(void *)v7;
        *(_BYTE *)(v6 + 8) = v5;
        __int128 v8 = *(_OWORD *)(v7 + 57);
        __int128 v10 = *(_OWORD *)(v7 + 32);
        __int128 v9 = *(_OWORD *)(v7 + 48);
        *(_OWORD *)(v6 + 16) = *(_OWORD *)(v7 + 16);
        *(_OWORD *)(v6 + 32) = v10;
        *(_OWORD *)(v6 + 48) = v9;
        *(_OWORD *)(v6 + 57) = v8;
        *(_BYTE *)(v6 + 73) = *(_BYTE *)(v7 + 73);
        *(_DWORD *)(v6 + 74) = *(_DWORD *)(v7 + 74);
        *(_BYTE *)(v6 + 78) = *(_BYTE *)(v7 + 78);
        uint64_t v11 = (int *)type metadata accessor for CurrencyFormatStyleConfiguration.Collection(0LL);
        uint64_t v12 = v11[9];
        __int128 v13 = (void *)(v6 + v12);
        uint64_t v14 = (const void *)(v7 + v12);
        uint64_t v15 = type metadata accessor for FloatingPointRoundingRule();
        uint64_t v16 = *(void *)(v15 - 8);
        uint64_t v17 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v16 + 48);
        swift_unknownObjectRetain();
        swift_bridgeObjectRetain();
        if (v17(v14, 1LL, v15))
        {
          uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
          memcpy(v13, v14, *(void *)(*(void *)(v18 - 8) + 64LL));
        }

        else
        {
          (*(void (**)(void *, const void *, uint64_t))(v16 + 16))(v13, v14, v15);
          (*(void (**)(void *, void, uint64_t, uint64_t))(v16 + 56))(v13, 0LL, 1LL, v15);
        }

        uint64_t v39 = v11[10];
        uint64_t v40 = v6 + v39;
        uint64_t v41 = (uint64_t *)(v7 + v39);
        uint64_t v42 = *v41;
        *(_BYTE *)(v40 + 8) = *((_BYTE *)v41 + 8);
        *(void *)uint64_t v40 = v42;
        *(_BYTE *)(v6 + v11[11]) = *(_BYTE *)(v7 + v11[11]);
        uint64_t v43 = v11[12];
        uint64_t v44 = (_BYTE *)(v6 + v43);
        uint64_t v45 = (_BYTE *)(v7 + v43);
        goto LABEL_14;
      }

      *(_OWORD *)a1 = *(_OWORD *)a2;
      uint64_t v32 = *(int *)(type metadata accessor for NSDecimal.FormatStyle(0LL) + 20);
      uint64_t v20 = a1 + v32;
      uint64_t v21 = a2 + v32;
      LOBYTE(v32) = *(_BYTE *)(a2 + v32 + 8);
      *(void *)uint64_t v20 = *(void *)v21;
      *(_BYTE *)(v20 + 8) = v32;
      __int128 v33 = *(_OWORD *)(v21 + 57);
      __int128 v35 = *(_OWORD *)(v21 + 32);
      __int128 v34 = *(_OWORD *)(v21 + 48);
      *(_OWORD *)(v20 + 16) = *(_OWORD *)(v21 + 16);
      *(_OWORD *)(v20 + 32) = v35;
      *(_OWORD *)(v20 + 48) = v34;
      *(_OWORD *)(v20 + 57) = v33;
      *(_BYTE *)(v20 + 73) = *(_BYTE *)(v21 + 73);
      LOWORD(v32) = *(_WORD *)(v21 + 74);
      *(_BYTE *)(v20 + 76) = *(_BYTE *)(v21 + 76);
      *(_WORD *)(v20 + 74) = v32;
      *(_BYTE *)(v20 + 77) = *(_BYTE *)(v21 + 77);
      uint64_t v25 = (int *)type metadata accessor for NumberFormatStyleConfiguration.Collection(0LL);
      uint64_t v36 = v25[9];
      uint64_t v27 = (void *)(v20 + v36);
      uint64_t v28 = (const void *)(v21 + v36);
      uint64_t v29 = type metadata accessor for FloatingPointRoundingRule();
      uint64_t v30 = *(void *)(v29 - 8);
      uint64_t v37 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v30 + 48);
      swift_unknownObjectRetain();
      if (v37(v28, 1LL, v29)) {
        goto LABEL_9;
      }
    }

    (*(void (**)(void *, const void *, uint64_t))(v30 + 16))(v27, v28, v29);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v30 + 56))(v27, 0LL, 1LL, v29);
    goto LABEL_13;
  }

  return a1;
}

_OWORD *initializeWithTake for NSDecimal.FormatStyle.Attributed(_OWORD *a1, _OWORD *a2)
{
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 2)
  {
    *a1 = *a2;
    uint64_t v17 = type metadata accessor for NSDecimal.FormatStyle.Percent(0LL);
  }

  else
  {
    if (EnumCaseMultiPayload == 1)
    {
      __int128 v5 = a2[1];
      *a1 = *a2;
      a1[1] = v5;
      uint64_t v6 = *(int *)(type metadata accessor for NSDecimal.FormatStyle.Currency(0LL) + 24);
      uint64_t v7 = (char *)a1 + v6;
      __int128 v8 = (char *)a2 + v6;
      *(void *)uint64_t v7 = *(void *)((char *)a2 + v6);
      v7[8] = *((_BYTE *)a2 + v6 + 8);
      __int128 v9 = *(_OWORD *)((char *)a2 + v6 + 32);
      *((_OWORD *)v7 + 1) = *(_OWORD *)((char *)a2 + v6 + 16);
      *((_OWORD *)v7 + 2) = v9;
      *((_OWORD *)v7 + 3) = *(_OWORD *)((char *)a2 + v6 + 48);
      *(_OWORD *)(v7 + 57) = *(_OWORD *)((char *)a2 + v6 + 57);
      v7[73] = *((_BYTE *)a2 + v6 + 73);
      *(_DWORD *)(v7 + 74) = *(_DWORD *)((char *)a2 + v6 + 74);
      v7[78] = *((_BYTE *)a2 + v6 + 78);
      __int128 v10 = (int *)type metadata accessor for CurrencyFormatStyleConfiguration.Collection(0LL);
      uint64_t v11 = v10[9];
      uint64_t v12 = &v7[v11];
      __int128 v13 = &v8[v11];
      uint64_t v14 = type metadata accessor for FloatingPointRoundingRule();
      uint64_t v15 = *(void *)(v14 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v13, 1LL, v14))
      {
        uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
        memcpy(v12, v13, *(void *)(*(void *)(v16 - 8) + 64LL));
      }

      else
      {
        (*(void (**)(char *, char *, uint64_t))(v15 + 32))(v12, v13, v14);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v15 + 56))(v12, 0LL, 1LL, v14);
      }

      uint64_t v35 = v10[10];
      uint64_t v36 = &v7[v35];
      uint64_t v37 = &v8[v35];
      *(void *)uint64_t v36 = *(void *)v37;
      v36[8] = v37[8];
      v7[v10[11]] = v8[v10[11]];
      uint64_t v38 = v10[12];
      __int128 v33 = &v7[v38];
      __int128 v34 = &v8[v38];
      goto LABEL_13;
    }

    *a1 = *a2;
    uint64_t v17 = type metadata accessor for NSDecimal.FormatStyle(0LL);
  }

  uint64_t v18 = *(int *)(v17 + 20);
  uint64_t v19 = (char *)a1 + v18;
  uint64_t v20 = (char *)a2 + v18;
  *(void *)uint64_t v19 = *(void *)((char *)a2 + v18);
  v19[8] = *((_BYTE *)a2 + v18 + 8);
  __int128 v21 = *(_OWORD *)((char *)a2 + v18 + 32);
  *((_OWORD *)v19 + 1) = *(_OWORD *)((char *)a2 + v18 + 16);
  *((_OWORD *)v19 + 2) = v21;
  *((_OWORD *)v19 + 3) = *(_OWORD *)((char *)a2 + v18 + 48);
  *(_OWORD *)(v19 + 57) = *(_OWORD *)((char *)a2 + v18 + 57);
  v19[73] = *((_BYTE *)a2 + v18 + 73);
  *((_WORD *)v19 + 37) = *(_WORD *)((char *)a2 + v18 + 74);
  v19[76] = *((_BYTE *)a2 + v18 + 76);
  v19[77] = *((_BYTE *)a2 + v18 + 77);
  __int128 v22 = (int *)type metadata accessor for NumberFormatStyleConfiguration.Collection(0LL);
  uint64_t v23 = v22[9];
  __int128 v24 = &v19[v23];
  uint64_t v25 = &v20[v23];
  uint64_t v26 = type metadata accessor for FloatingPointRoundingRule();
  uint64_t v27 = *(void *)(v26 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v27 + 48))(v25, 1LL, v26))
  {
    uint64_t v28 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
    memcpy(v24, v25, *(void *)(*(void *)(v28 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v27 + 32))(v24, v25, v26);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v27 + 56))(v24, 0LL, 1LL, v26);
  }

  uint64_t v29 = v22[10];
  uint64_t v30 = &v19[v29];
  uint64_t v31 = &v20[v29];
  *(void *)uint64_t v30 = *(void *)v31;
  v30[8] = v31[8];
  uint64_t v32 = v22[11];
  __int128 v33 = &v19[v32];
  __int128 v34 = &v20[v32];
LABEL_13:
  char *v33 = *v34;
  swift_storeEnumTagMultiPayload();
  return a1;
}

_OWORD *assignWithTake for NSDecimal.FormatStyle.Attributed(_OWORD *a1, _OWORD *a2)
{
  if (a1 != a2)
  {
    outlined destroy of ICUNumberFormatter.Signature( (uint64_t)a1,  type metadata accessor for NSDecimal.FormatStyle.Attributed.Style);
    type metadata accessor for NSDecimal.FormatStyle.Attributed.Style(0LL);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2)
    {
      *a1 = *a2;
      uint64_t v17 = type metadata accessor for NSDecimal.FormatStyle.Percent(0LL);
    }

    else
    {
      if (EnumCaseMultiPayload == 1)
      {
        __int128 v5 = a2[1];
        *a1 = *a2;
        a1[1] = v5;
        uint64_t v6 = *(int *)(type metadata accessor for NSDecimal.FormatStyle.Currency(0LL) + 24);
        uint64_t v7 = (char *)a1 + v6;
        __int128 v8 = (char *)a2 + v6;
        *(void *)uint64_t v7 = *(void *)((char *)a2 + v6);
        v7[8] = *((_BYTE *)a2 + v6 + 8);
        __int128 v9 = *(_OWORD *)((char *)a2 + v6 + 32);
        *((_OWORD *)v7 + 1) = *(_OWORD *)((char *)a2 + v6 + 16);
        *((_OWORD *)v7 + 2) = v9;
        *((_OWORD *)v7 + 3) = *(_OWORD *)((char *)a2 + v6 + 48);
        *(_OWORD *)(v7 + 57) = *(_OWORD *)((char *)a2 + v6 + 57);
        v7[73] = *((_BYTE *)a2 + v6 + 73);
        *(_DWORD *)(v7 + 74) = *(_DWORD *)((char *)a2 + v6 + 74);
        v7[78] = *((_BYTE *)a2 + v6 + 78);
        __int128 v10 = (int *)type metadata accessor for CurrencyFormatStyleConfiguration.Collection(0LL);
        uint64_t v11 = v10[9];
        uint64_t v12 = &v7[v11];
        __int128 v13 = &v8[v11];
        uint64_t v14 = type metadata accessor for FloatingPointRoundingRule();
        uint64_t v15 = *(void *)(v14 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v13, 1LL, v14))
        {
          uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
          memcpy(v12, v13, *(void *)(*(void *)(v16 - 8) + 64LL));
        }

        else
        {
          (*(void (**)(char *, char *, uint64_t))(v15 + 32))(v12, v13, v14);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v15 + 56))(v12, 0LL, 1LL, v14);
        }

        uint64_t v35 = v10[10];
        uint64_t v36 = &v7[v35];
        uint64_t v37 = &v8[v35];
        *(void *)uint64_t v36 = *(void *)v37;
        v36[8] = v37[8];
        v7[v10[11]] = v8[v10[11]];
        uint64_t v38 = v10[12];
        __int128 v33 = &v7[v38];
        __int128 v34 = &v8[v38];
LABEL_14:
        char *v33 = *v34;
        swift_storeEnumTagMultiPayload();
        return a1;
      }

      *a1 = *a2;
      uint64_t v17 = type metadata accessor for NSDecimal.FormatStyle(0LL);
    }

    uint64_t v18 = *(int *)(v17 + 20);
    uint64_t v19 = (char *)a1 + v18;
    uint64_t v20 = (char *)a2 + v18;
    *(void *)uint64_t v19 = *(void *)((char *)a2 + v18);
    v19[8] = *((_BYTE *)a2 + v18 + 8);
    __int128 v21 = *(_OWORD *)((char *)a2 + v18 + 32);
    *((_OWORD *)v19 + 1) = *(_OWORD *)((char *)a2 + v18 + 16);
    *((_OWORD *)v19 + 2) = v21;
    *((_OWORD *)v19 + 3) = *(_OWORD *)((char *)a2 + v18 + 48);
    *(_OWORD *)(v19 + 57) = *(_OWORD *)((char *)a2 + v18 + 57);
    v19[73] = *((_BYTE *)a2 + v18 + 73);
    *((_WORD *)v19 + 37) = *(_WORD *)((char *)a2 + v18 + 74);
    v19[76] = *((_BYTE *)a2 + v18 + 76);
    v19[77] = *((_BYTE *)a2 + v18 + 77);
    __int128 v22 = (int *)type metadata accessor for NumberFormatStyleConfiguration.Collection(0LL);
    uint64_t v23 = v22[9];
    __int128 v24 = &v19[v23];
    uint64_t v25 = &v20[v23];
    uint64_t v26 = type metadata accessor for FloatingPointRoundingRule();
    uint64_t v27 = *(void *)(v26 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v27 + 48))(v25, 1LL, v26))
    {
      uint64_t v28 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
      memcpy(v24, v25, *(void *)(*(void *)(v28 - 8) + 64LL));
    }

    else
    {
      (*(void (**)(char *, char *, uint64_t))(v27 + 32))(v24, v25, v26);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v27 + 56))(v24, 0LL, 1LL, v26);
    }

    uint64_t v29 = v22[10];
    uint64_t v30 = &v19[v29];
    uint64_t v31 = &v20[v29];
    *(void *)uint64_t v30 = *(void *)v31;
    v30[8] = v31[8];
    uint64_t v32 = v22[11];
    __int128 v33 = &v19[v32];
    __int128 v34 = &v20[v32];
    goto LABEL_14;
  }

  return a1;
}

uint64_t getEnumTagSinglePayload for NSDecimal.FormatStyle.Attributed()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_183145128(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for NSDecimal.FormatStyle.Attributed.Style(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 48LL))(a1, a2, v4);
}

uint64_t storeEnumTagSinglePayload for NSDecimal.FormatStyle.Attributed()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_183145170(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for NSDecimal.FormatStyle.Attributed.Style(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56LL))(a1, a2, a2, v4);
}

uint64_t type metadata completion function for NSDecimal.FormatStyle.Attributed()
{
  uint64_t result = type metadata accessor for NSDecimal.FormatStyle.Attributed.Style(319LL);
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0LL;
  }

  return result;
}

void *type metadata accessor for NSDecimal.FormatStyle.Attributed.CodingKeys()
{
  return &unk_189C7D7A8;
}

void *type metadata accessor for NSDecimal.FormatStyle.Currency.CodingKeys()
{
  return &unk_189C7D838;
}

void *type metadata accessor for NSDecimal.FormatStyle.Percent.CodingKeys()
{
  return &unk_189C7D8C8;
}

uint64_t storeEnumTagSinglePayload for NSDecimal.FormatStyle.Percent.CodingKeys( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFE) {
    return ((uint64_t (*)(void))((char *)&loc_1831452A0 + 4 * byte_1837AAE15[v4]))();
  }
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1831452D4 + 4 * byte_1837AAE10[v4]))();
}

uint64_t sub_1831452D4(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1831452DC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x1831452E4LL);
  }
  return result;
}

uint64_t sub_1831452F0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x1831452F8LL);
  }
  *(_BYTE *)uint64_t result = a2 + 1;
  return result;
}

uint64_t sub_1831452FC(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_183145304(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

void *type metadata accessor for NSDecimal.FormatStyle.CodingKeys()
{
  return &unk_189C7D958;
}

uint64_t assignWithCopy for NSDecimal.FormatStyle.Attributed.Style(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    outlined destroy of ICUNumberFormatter.Signature( a1,  type metadata accessor for NSDecimal.FormatStyle.Attributed.Style);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2)
    {
      *(_OWORD *)a1 = *(_OWORD *)a2;
      uint64_t v19 = *(int *)(type metadata accessor for NSDecimal.FormatStyle.Percent(0LL) + 20);
      uint64_t v20 = a1 + v19;
      uint64_t v21 = a2 + v19;
      LOBYTE(v19) = *(_BYTE *)(a2 + v19 + 8);
      *(void *)uint64_t v20 = *(void *)v21;
      *(_BYTE *)(v20 + 8) = v19;
      __int128 v22 = *(_OWORD *)(v21 + 57);
      __int128 v24 = *(_OWORD *)(v21 + 32);
      __int128 v23 = *(_OWORD *)(v21 + 48);
      *(_OWORD *)(v20 + 16) = *(_OWORD *)(v21 + 16);
      *(_OWORD *)(v20 + 32) = v24;
      *(_OWORD *)(v20 + 48) = v23;
      *(_OWORD *)(v20 + 57) = v22;
      *(_BYTE *)(v20 + 73) = *(_BYTE *)(v21 + 73);
      LOWORD(v19) = *(_WORD *)(v21 + 74);
      *(_BYTE *)(v20 + 76) = *(_BYTE *)(v21 + 76);
      *(_WORD *)(v20 + 74) = v19;
      *(_BYTE *)(v20 + 77) = *(_BYTE *)(v21 + 77);
      uint64_t v25 = (int *)type metadata accessor for NumberFormatStyleConfiguration.Collection(0LL);
      uint64_t v26 = v25[9];
      uint64_t v27 = (void *)(v20 + v26);
      uint64_t v28 = (const void *)(v21 + v26);
      uint64_t v29 = type metadata accessor for FloatingPointRoundingRule();
      uint64_t v30 = *(void *)(v29 - 8);
      uint64_t v31 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v30 + 48);
      swift_unknownObjectRetain();
      if (v31(v28, 1LL, v29))
      {
LABEL_9:
        uint64_t v38 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
        memcpy(v27, v28, *(void *)(*(void *)(v38 - 8) + 64LL));
LABEL_13:
        uint64_t v46 = v25[10];
        uint64_t v47 = v20 + v46;
        uint64_t v48 = (uint64_t *)(v21 + v46);
        uint64_t v49 = *v48;
        *(_BYTE *)(v47 + 8) = *((_BYTE *)v48 + 8);
        *(void *)uint64_t v47 = v49;
        uint64_t v50 = v25[11];
        uint64_t v44 = (_BYTE *)(v20 + v50);
        uint64_t v45 = (_BYTE *)(v21 + v50);
LABEL_14:
        *uint64_t v44 = *v45;
        swift_storeEnumTagMultiPayload();
        return a1;
      }
    }

    else
    {
      if (EnumCaseMultiPayload == 1)
      {
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(void *)(a1 + 16) = *(void *)(a2 + 16);
        *(void *)(a1 + 24) = *(void *)(a2 + 24);
        uint64_t v5 = *(int *)(type metadata accessor for NSDecimal.FormatStyle.Currency(0LL) + 24);
        uint64_t v6 = a1 + v5;
        uint64_t v7 = a2 + v5;
        LOBYTE(v5) = *(_BYTE *)(a2 + v5 + 8);
        *(void *)uint64_t v6 = *(void *)v7;
        *(_BYTE *)(v6 + 8) = v5;
        __int128 v8 = *(_OWORD *)(v7 + 57);
        __int128 v10 = *(_OWORD *)(v7 + 32);
        __int128 v9 = *(_OWORD *)(v7 + 48);
        *(_OWORD *)(v6 + 16) = *(_OWORD *)(v7 + 16);
        *(_OWORD *)(v6 + 32) = v10;
        *(_OWORD *)(v6 + 48) = v9;
        *(_OWORD *)(v6 + 57) = v8;
        *(_BYTE *)(v6 + 73) = *(_BYTE *)(v7 + 73);
        *(_DWORD *)(v6 + 74) = *(_DWORD *)(v7 + 74);
        *(_BYTE *)(v6 + 78) = *(_BYTE *)(v7 + 78);
        uint64_t v11 = (int *)type metadata accessor for CurrencyFormatStyleConfiguration.Collection(0LL);
        uint64_t v12 = v11[9];
        __int128 v13 = (void *)(v6 + v12);
        uint64_t v14 = (const void *)(v7 + v12);
        uint64_t v15 = type metadata accessor for FloatingPointRoundingRule();
        uint64_t v16 = *(void *)(v15 - 8);
        uint64_t v17 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v16 + 48);
        swift_unknownObjectRetain();
        swift_bridgeObjectRetain();
        if (v17(v14, 1LL, v15))
        {
          uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
          memcpy(v13, v14, *(void *)(*(void *)(v18 - 8) + 64LL));
        }

        else
        {
          (*(void (**)(void *, const void *, uint64_t))(v16 + 16))(v13, v14, v15);
          (*(void (**)(void *, void, uint64_t, uint64_t))(v16 + 56))(v13, 0LL, 1LL, v15);
        }

        uint64_t v39 = v11[10];
        uint64_t v40 = v6 + v39;
        uint64_t v41 = (uint64_t *)(v7 + v39);
        uint64_t v42 = *v41;
        *(_BYTE *)(v40 + 8) = *((_BYTE *)v41 + 8);
        *(void *)uint64_t v40 = v42;
        *(_BYTE *)(v6 + v11[11]) = *(_BYTE *)(v7 + v11[11]);
        uint64_t v43 = v11[12];
        uint64_t v44 = (_BYTE *)(v6 + v43);
        uint64_t v45 = (_BYTE *)(v7 + v43);
        goto LABEL_14;
      }

      *(_OWORD *)a1 = *(_OWORD *)a2;
      uint64_t v32 = *(int *)(type metadata accessor for NSDecimal.FormatStyle(0LL) + 20);
      uint64_t v20 = a1 + v32;
      uint64_t v21 = a2 + v32;
      LOBYTE(v32) = *(_BYTE *)(a2 + v32 + 8);
      *(void *)uint64_t v20 = *(void *)v21;
      *(_BYTE *)(v20 + 8) = v32;
      __int128 v33 = *(_OWORD *)(v21 + 57);
      __int128 v35 = *(_OWORD *)(v21 + 32);
      __int128 v34 = *(_OWORD *)(v21 + 48);
      *(_OWORD *)(v20 + 16) = *(_OWORD *)(v21 + 16);
      *(_OWORD *)(v20 + 32) = v35;
      *(_OWORD *)(v20 + 48) = v34;
      *(_OWORD *)(v20 + 57) = v33;
      *(_BYTE *)(v20 + 73) = *(_BYTE *)(v21 + 73);
      LOWORD(v32) = *(_WORD *)(v21 + 74);
      *(_BYTE *)(v20 + 76) = *(_BYTE *)(v21 + 76);
      *(_WORD *)(v20 + 74) = v32;
      *(_BYTE *)(v20 + 77) = *(_BYTE *)(v21 + 77);
      uint64_t v25 = (int *)type metadata accessor for NumberFormatStyleConfiguration.Collection(0LL);
      uint64_t v36 = v25[9];
      uint64_t v27 = (void *)(v20 + v36);
      uint64_t v28 = (const void *)(v21 + v36);
      uint64_t v29 = type metadata accessor for FloatingPointRoundingRule();
      uint64_t v30 = *(void *)(v29 - 8);
      uint64_t v37 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v30 + 48);
      swift_unknownObjectRetain();
      if (v37(v28, 1LL, v29)) {
        goto LABEL_9;
      }
    }

    (*(void (**)(void *, const void *, uint64_t))(v30 + 16))(v27, v28, v29);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v30 + 56))(v27, 0LL, 1LL, v29);
    goto LABEL_13;
  }

  return a1;
}

_OWORD *assignWithTake for NSDecimal.FormatStyle.Attributed.Style(_OWORD *a1, _OWORD *a2)
{
  if (a1 != a2)
  {
    outlined destroy of ICUNumberFormatter.Signature( (uint64_t)a1,  type metadata accessor for NSDecimal.FormatStyle.Attributed.Style);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2)
    {
      *a1 = *a2;
      uint64_t v17 = type metadata accessor for NSDecimal.FormatStyle.Percent(0LL);
    }

    else
    {
      if (EnumCaseMultiPayload == 1)
      {
        __int128 v5 = a2[1];
        *a1 = *a2;
        a1[1] = v5;
        uint64_t v6 = *(int *)(type metadata accessor for NSDecimal.FormatStyle.Currency(0LL) + 24);
        uint64_t v7 = (char *)a1 + v6;
        __int128 v8 = (char *)a2 + v6;
        *(void *)uint64_t v7 = *(void *)((char *)a2 + v6);
        v7[8] = *((_BYTE *)a2 + v6 + 8);
        __int128 v9 = *(_OWORD *)((char *)a2 + v6 + 32);
        *((_OWORD *)v7 + 1) = *(_OWORD *)((char *)a2 + v6 + 16);
        *((_OWORD *)v7 + 2) = v9;
        *((_OWORD *)v7 + 3) = *(_OWORD *)((char *)a2 + v6 + 48);
        *(_OWORD *)(v7 + 57) = *(_OWORD *)((char *)a2 + v6 + 57);
        v7[73] = *((_BYTE *)a2 + v6 + 73);
        *(_DWORD *)(v7 + 74) = *(_DWORD *)((char *)a2 + v6 + 74);
        v7[78] = *((_BYTE *)a2 + v6 + 78);
        __int128 v10 = (int *)type metadata accessor for CurrencyFormatStyleConfiguration.Collection(0LL);
        uint64_t v11 = v10[9];
        uint64_t v12 = &v7[v11];
        __int128 v13 = &v8[v11];
        uint64_t v14 = type metadata accessor for FloatingPointRoundingRule();
        uint64_t v15 = *(void *)(v14 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v13, 1LL, v14))
        {
          uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
          memcpy(v12, v13, *(void *)(*(void *)(v16 - 8) + 64LL));
        }

        else
        {
          (*(void (**)(char *, char *, uint64_t))(v15 + 32))(v12, v13, v14);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v15 + 56))(v12, 0LL, 1LL, v14);
        }

        uint64_t v35 = v10[10];
        uint64_t v36 = &v7[v35];
        uint64_t v37 = &v8[v35];
        *(void *)uint64_t v36 = *(void *)v37;
        v36[8] = v37[8];
        v7[v10[11]] = v8[v10[11]];
        uint64_t v38 = v10[12];
        __int128 v33 = &v7[v38];
        __int128 v34 = &v8[v38];
LABEL_14:
        char *v33 = *v34;
        swift_storeEnumTagMultiPayload();
        return a1;
      }

      *a1 = *a2;
      uint64_t v17 = type metadata accessor for NSDecimal.FormatStyle(0LL);
    }

    uint64_t v18 = *(int *)(v17 + 20);
    uint64_t v19 = (char *)a1 + v18;
    uint64_t v20 = (char *)a2 + v18;
    *(void *)uint64_t v19 = *(void *)((char *)a2 + v18);
    v19[8] = *((_BYTE *)a2 + v18 + 8);
    __int128 v21 = *(_OWORD *)((char *)a2 + v18 + 32);
    *((_OWORD *)v19 + 1) = *(_OWORD *)((char *)a2 + v18 + 16);
    *((_OWORD *)v19 + 2) = v21;
    *((_OWORD *)v19 + 3) = *(_OWORD *)((char *)a2 + v18 + 48);
    *(_OWORD *)(v19 + 57) = *(_OWORD *)((char *)a2 + v18 + 57);
    v19[73] = *((_BYTE *)a2 + v18 + 73);
    *((_WORD *)v19 + 37) = *(_WORD *)((char *)a2 + v18 + 74);
    v19[76] = *((_BYTE *)a2 + v18 + 76);
    v19[77] = *((_BYTE *)a2 + v18 + 77);
    __int128 v22 = (int *)type metadata accessor for NumberFormatStyleConfiguration.Collection(0LL);
    uint64_t v23 = v22[9];
    __int128 v24 = &v19[v23];
    uint64_t v25 = &v20[v23];
    uint64_t v26 = type metadata accessor for FloatingPointRoundingRule();
    uint64_t v27 = *(void *)(v26 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v27 + 48))(v25, 1LL, v26))
    {
      uint64_t v28 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
      memcpy(v24, v25, *(void *)(*(void *)(v28 - 8) + 64LL));
    }

    else
    {
      (*(void (**)(char *, char *, uint64_t))(v27 + 32))(v24, v25, v26);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v27 + 56))(v24, 0LL, 1LL, v26);
    }

    uint64_t v29 = v22[10];
    uint64_t v30 = &v19[v29];
    uint64_t v31 = &v20[v29];
    *(void *)uint64_t v30 = *(void *)v31;
    v30[8] = v31[8];
    uint64_t v32 = v22[11];
    __int128 v33 = &v19[v32];
    __int128 v34 = &v20[v32];
    goto LABEL_14;
  }

  return a1;
}

uint64_t base witness table accessor for Equatable in NSDecimal.FormatStyle.Attributed.Style()
{
  return lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( &lazy protocol witness table cache variable for type NSDecimal.FormatStyle.Attributed.Style and conformance NSDecimal.FormatStyle.Attributed.Style,  type metadata accessor for NSDecimal.FormatStyle.Attributed.Style,  (uint64_t)&protocol conformance descriptor for NSDecimal.FormatStyle.Attributed.Style);
}

uint64_t specialized NSDecimal.FormatStyle.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x656C61636F6CLL && a2 == 0xE600000000000000LL;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0LL;
  }

  else if (a1 == 0x697463656C6C6F63LL && a2 == 0xEA00000000006E6FLL)
  {
    swift_bridgeObjectRelease();
    return 1LL;
  }

  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0) {
      return 1LL;
    }
    else {
      return 2LL;
    }
  }

uint64_t specialized NSDecimal.FormatStyle.Currency.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x656C61636F6CLL && a2 == 0xE600000000000000LL;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0LL;
  }

  else if (a1 == 0x79636E6572727563LL && a2 == 0xEC00000065646F43LL {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1LL;
  }

  else if (a1 == 0x697463656C6C6F63LL && a2 == 0xEA00000000006E6FLL)
  {
    swift_bridgeObjectRelease();
    return 2LL;
  }

  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0) {
      return 2LL;
    }
    else {
      return 3LL;
    }
  }

unint64_t lazy protocol witness table accessor for type NSDecimal.FormatStyle.Attributed.Style.CodingKeys and conformance NSDecimal.FormatStyle.Attributed.Style.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type NSDecimal.FormatStyle.Attributed.Style.CodingKeys and conformance NSDecimal.FormatStyle.Attributed.Style.CodingKeys;
  if (!lazy protocol witness table cache variable for type NSDecimal.FormatStyle.Attributed.Style.CodingKeys and conformance NSDecimal.FormatStyle.Attributed.Style.CodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for NSDecimal.FormatStyle.Attributed.Style.CodingKeys,  &unk_189C7DA60);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type NSDecimal.FormatStyle.Attributed.Style.CodingKeys and conformance NSDecimal.FormatStyle.Attributed.Style.CodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type NSDecimal.FormatStyle.Attributed.Style.CodingKeys and conformance NSDecimal.FormatStyle.Attributed.Style.CodingKeys;
  if (!lazy protocol witness table cache variable for type NSDecimal.FormatStyle.Attributed.Style.CodingKeys and conformance NSDecimal.FormatStyle.Attributed.Style.CodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for NSDecimal.FormatStyle.Attributed.Style.CodingKeys,  &unk_189C7DA60);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type NSDecimal.FormatStyle.Attributed.Style.CodingKeys and conformance NSDecimal.FormatStyle.Attributed.Style.CodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type NSDecimal.FormatStyle.Attributed.Style.CodingKeys and conformance NSDecimal.FormatStyle.Attributed.Style.CodingKeys;
  if (!lazy protocol witness table cache variable for type NSDecimal.FormatStyle.Attributed.Style.CodingKeys and conformance NSDecimal.FormatStyle.Attributed.Style.CodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for NSDecimal.FormatStyle.Attributed.Style.CodingKeys,  &unk_189C7DA60);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type NSDecimal.FormatStyle.Attributed.Style.CodingKeys and conformance NSDecimal.FormatStyle.Attributed.Style.CodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type NSDecimal.FormatStyle.Attributed.Style.CodingKeys and conformance NSDecimal.FormatStyle.Attributed.Style.CodingKeys;
  if (!lazy protocol witness table cache variable for type NSDecimal.FormatStyle.Attributed.Style.CodingKeys and conformance NSDecimal.FormatStyle.Attributed.Style.CodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for NSDecimal.FormatStyle.Attributed.Style.CodingKeys,  &unk_189C7DA60);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type NSDecimal.FormatStyle.Attributed.Style.CodingKeys and conformance NSDecimal.FormatStyle.Attributed.Style.CodingKeys);
  }

  return result;
}

unint64_t lazy protocol witness table accessor for type NSDecimal.FormatStyle.Attributed.Style.PercentCodingKeys and conformance NSDecimal.FormatStyle.Attributed.Style.PercentCodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type NSDecimal.FormatStyle.Attributed.Style.PercentCodingKeys and conformance NSDecimal.FormatStyle.Attributed.Style.PercentCodingKeys;
  if (!lazy protocol witness table cache variable for type NSDecimal.FormatStyle.Attributed.Style.PercentCodingKeys and conformance NSDecimal.FormatStyle.Attributed.Style.PercentCodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for NSDecimal.FormatStyle.Attributed.Style.PercentCodingKeys,  &unk_189C7DC10);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type NSDecimal.FormatStyle.Attributed.Style.PercentCodingKeys and conformance NSDecimal.FormatStyle.Attributed.Style.PercentCodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type NSDecimal.FormatStyle.Attributed.Style.PercentCodingKeys and conformance NSDecimal.FormatStyle.Attributed.Style.PercentCodingKeys;
  if (!lazy protocol witness table cache variable for type NSDecimal.FormatStyle.Attributed.Style.PercentCodingKeys and conformance NSDecimal.FormatStyle.Attributed.Style.PercentCodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for NSDecimal.FormatStyle.Attributed.Style.PercentCodingKeys,  &unk_189C7DC10);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type NSDecimal.FormatStyle.Attributed.Style.PercentCodingKeys and conformance NSDecimal.FormatStyle.Attributed.Style.PercentCodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type NSDecimal.FormatStyle.Attributed.Style.PercentCodingKeys and conformance NSDecimal.FormatStyle.Attributed.Style.PercentCodingKeys;
  if (!lazy protocol witness table cache variable for type NSDecimal.FormatStyle.Attributed.Style.PercentCodingKeys and conformance NSDecimal.FormatStyle.Attributed.Style.PercentCodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for NSDecimal.FormatStyle.Attributed.Style.PercentCodingKeys,  &unk_189C7DC10);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type NSDecimal.FormatStyle.Attributed.Style.PercentCodingKeys and conformance NSDecimal.FormatStyle.Attributed.Style.PercentCodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type NSDecimal.FormatStyle.Attributed.Style.PercentCodingKeys and conformance NSDecimal.FormatStyle.Attributed.Style.PercentCodingKeys;
  if (!lazy protocol witness table cache variable for type NSDecimal.FormatStyle.Attributed.Style.PercentCodingKeys and conformance NSDecimal.FormatStyle.Attributed.Style.PercentCodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for NSDecimal.FormatStyle.Attributed.Style.PercentCodingKeys,  &unk_189C7DC10);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type NSDecimal.FormatStyle.Attributed.Style.PercentCodingKeys and conformance NSDecimal.FormatStyle.Attributed.Style.PercentCodingKeys);
  }

  return result;
}

unint64_t lazy protocol witness table accessor for type NSDecimal.FormatStyle.Attributed.Style.CurrencyCodingKeys and conformance NSDecimal.FormatStyle.Attributed.Style.CurrencyCodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type NSDecimal.FormatStyle.Attributed.Style.CurrencyCodingKeys and conformance NSDecimal.FormatStyle.Attributed.Style.CurrencyCodingKeys;
  if (!lazy protocol witness table cache variable for type NSDecimal.FormatStyle.Attributed.Style.CurrencyCodingKeys and conformance NSDecimal.FormatStyle.Attributed.Style.CurrencyCodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for NSDecimal.FormatStyle.Attributed.Style.CurrencyCodingKeys,  &unk_189C7DB80);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type NSDecimal.FormatStyle.Attributed.Style.CurrencyCodingKeys and conformance NSDecimal.FormatStyle.Attributed.Style.CurrencyCodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type NSDecimal.FormatStyle.Attributed.Style.CurrencyCodingKeys and conformance NSDecimal.FormatStyle.Attributed.Style.CurrencyCodingKeys;
  if (!lazy protocol witness table cache variable for type NSDecimal.FormatStyle.Attributed.Style.CurrencyCodingKeys and conformance NSDecimal.FormatStyle.Attributed.Style.CurrencyCodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for NSDecimal.FormatStyle.Attributed.Style.CurrencyCodingKeys,  &unk_189C7DB80);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type NSDecimal.FormatStyle.Attributed.Style.CurrencyCodingKeys and conformance NSDecimal.FormatStyle.Attributed.Style.CurrencyCodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type NSDecimal.FormatStyle.Attributed.Style.CurrencyCodingKeys and conformance NSDecimal.FormatStyle.Attributed.Style.CurrencyCodingKeys;
  if (!lazy protocol witness table cache variable for type NSDecimal.FormatStyle.Attributed.Style.CurrencyCodingKeys and conformance NSDecimal.FormatStyle.Attributed.Style.CurrencyCodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for NSDecimal.FormatStyle.Attributed.Style.CurrencyCodingKeys,  &unk_189C7DB80);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type NSDecimal.FormatStyle.Attributed.Style.CurrencyCodingKeys and conformance NSDecimal.FormatStyle.Attributed.Style.CurrencyCodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type NSDecimal.FormatStyle.Attributed.Style.CurrencyCodingKeys and conformance NSDecimal.FormatStyle.Attributed.Style.CurrencyCodingKeys;
  if (!lazy protocol witness table cache variable for type NSDecimal.FormatStyle.Attributed.Style.CurrencyCodingKeys and conformance NSDecimal.FormatStyle.Attributed.Style.CurrencyCodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for NSDecimal.FormatStyle.Attributed.Style.CurrencyCodingKeys,  &unk_189C7DB80);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type NSDecimal.FormatStyle.Attributed.Style.CurrencyCodingKeys and conformance NSDecimal.FormatStyle.Attributed.Style.CurrencyCodingKeys);
  }

  return result;
}

unint64_t lazy protocol witness table accessor for type NSDecimal.FormatStyle.Attributed.Style.DecimalCodingKeys and conformance NSDecimal.FormatStyle.Attributed.Style.DecimalCodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type NSDecimal.FormatStyle.Attributed.Style.DecimalCodingKeys and conformance NSDecimal.FormatStyle.Attributed.Style.DecimalCodingKeys;
  if (!lazy protocol witness table cache variable for type NSDecimal.FormatStyle.Attributed.Style.DecimalCodingKeys and conformance NSDecimal.FormatStyle.Attributed.Style.DecimalCodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for NSDecimal.FormatStyle.Attributed.Style.DecimalCodingKeys,  &unk_189C7DAF0);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type NSDecimal.FormatStyle.Attributed.Style.DecimalCodingKeys and conformance NSDecimal.FormatStyle.Attributed.Style.DecimalCodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type NSDecimal.FormatStyle.Attributed.Style.DecimalCodingKeys and conformance NSDecimal.FormatStyle.Attributed.Style.DecimalCodingKeys;
  if (!lazy protocol witness table cache variable for type NSDecimal.FormatStyle.Attributed.Style.DecimalCodingKeys and conformance NSDecimal.FormatStyle.Attributed.Style.DecimalCodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for NSDecimal.FormatStyle.Attributed.Style.DecimalCodingKeys,  &unk_189C7DAF0);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type NSDecimal.FormatStyle.Attributed.Style.DecimalCodingKeys and conformance NSDecimal.FormatStyle.Attributed.Style.DecimalCodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type NSDecimal.FormatStyle.Attributed.Style.DecimalCodingKeys and conformance NSDecimal.FormatStyle.Attributed.Style.DecimalCodingKeys;
  if (!lazy protocol witness table cache variable for type NSDecimal.FormatStyle.Attributed.Style.DecimalCodingKeys and conformance NSDecimal.FormatStyle.Attributed.Style.DecimalCodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for NSDecimal.FormatStyle.Attributed.Style.DecimalCodingKeys,  &unk_189C7DAF0);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type NSDecimal.FormatStyle.Attributed.Style.DecimalCodingKeys and conformance NSDecimal.FormatStyle.Attributed.Style.DecimalCodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type NSDecimal.FormatStyle.Attributed.Style.DecimalCodingKeys and conformance NSDecimal.FormatStyle.Attributed.Style.DecimalCodingKeys;
  if (!lazy protocol witness table cache variable for type NSDecimal.FormatStyle.Attributed.Style.DecimalCodingKeys and conformance NSDecimal.FormatStyle.Attributed.Style.DecimalCodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for NSDecimal.FormatStyle.Attributed.Style.DecimalCodingKeys,  &unk_189C7DAF0);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type NSDecimal.FormatStyle.Attributed.Style.DecimalCodingKeys and conformance NSDecimal.FormatStyle.Attributed.Style.DecimalCodingKeys);
  }

  return result;
}

uint64_t storeEnumTagSinglePayload for NSDecimal.FormatStyle.Currency.CodingKeys( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFD) {
    return ((uint64_t (*)(void))((char *)&loc_1831461BC + 4 * byte_1837AAE1F[v4]))();
  }
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_1831461F0 + 4 * byte_1837AAE1A[v4]))();
}

uint64_t sub_1831461F0(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1831461F8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x183146200LL);
  }
  return result;
}

uint64_t sub_18314620C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x183146214LL);
  }
  *(_BYTE *)unint64_t result = a2 + 2;
  return result;
}

uint64_t sub_183146218(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_183146220(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

void *type metadata accessor for NSDecimal.FormatStyle.Attributed.Style.CodingKeys()
{
  return &unk_189C7DA60;
}

void *type metadata accessor for NSDecimal.FormatStyle.Attributed.Style.DecimalCodingKeys()
{
  return &unk_189C7DAF0;
}

void *type metadata accessor for NSDecimal.FormatStyle.Attributed.Style.CurrencyCodingKeys()
{
  return &unk_189C7DB80;
}

uint64_t storeEnumTagSinglePayload for NSDecimal.FormatStyle.Attributed.CodingKeys( uint64_t a1, int a2, int a3)
{
  else {
    int v3 = 2;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2) {
    return ((uint64_t (*)(void))((char *)sub_18314629C + 4 * byte_1837AAE24[v4]))();
  }
  else {
    return ((uint64_t (*)(void))((char *)sub_1831462BC + 4 * byte_1837AAE29[v4]))();
  }
}

_BYTE *sub_18314629C(_BYTE *result, char a2)
{
  *unint64_t result = a2;
  return result;
}

_BYTE *sub_1831462BC(_BYTE *result)
{
  *unint64_t result = 0;
  return result;
}

_DWORD *sub_1831462C4(_DWORD *result, int a2)
{
  *unint64_t result = a2;
  return result;
}

_WORD *sub_1831462CC(_WORD *result, __int16 a2)
{
  *unint64_t result = a2;
  return result;
}

_WORD *sub_1831462D4(_WORD *result)
{
  *unint64_t result = 0;
  return result;
}

_DWORD *sub_1831462DC(_DWORD *result)
{
  *unint64_t result = 0;
  return result;
}

void *type metadata accessor for NSDecimal.FormatStyle.Attributed.Style.PercentCodingKeys()
{
  return &unk_189C7DC10;
}

uint64_t specialized NSDecimal.FormatStyle.Attributed.Style.CodingKeys.init(stringValue:)( uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x6C616D69636564LL && a2 == 0xE700000000000000LL;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0LL;
  }

  else if (a1 == 0x79636E6572727563LL && a2 == 0xE800000000000000LL {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1LL;
  }

  else if (a1 == 0x746E6563726570LL && a2 == 0xE700000000000000LL)
  {
    swift_bridgeObjectRelease();
    return 2LL;
  }

  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0) {
      return 2LL;
    }
    else {
      return 3LL;
    }
  }

unint64_t specialized BidirectionalCollection<>._matchesSeparators(_:from:reverse:)@<X0>( uint64_t a1@<X0>, unint64_t a2@<X1>, unint64_t a3@<X2>, unint64_t a4@<X3>, unint64_t a5@<X4>, char a6@<W5>, unint64_t *a7@<X8>)
{
  unint64_t result = BigSubstring.UTF8View.subscript.getter();
  if (result == 10)
  {
    unint64_t v8 = a2 >> 10;
    if (a2 >> 10 > *(void *)(v7 + 48) >> 10)
    {
      unint64_t v19 = BigSubstring.UTF8View.index(before:)();
      unint64_t v21 = v20;
      unint64_t v23 = v22;
      unint64_t v58 = v24;
      unsigned __int8 v25 = BigSubstring.UTF8View.subscript.getter();
      unint64_t v26 = a3;
      int v27 = v25;
      unint64_t v54 = v26;
      unint64_t v55 = a2;
      unint64_t result = BigSubstring.UTF8View.index(after:)();
      unint64_t v28 = result >> 10;
      if (v27 != 13)
      {
LABEL_46:
        if (v28 >= v8)
        {
          *a7 = v55;
          a7[1] = v54;
          goto LABEL_19;
        }

{
  __int128 *v7;
  unint64_t v8;
  unint64_t result;
  unint64_t v16;
  __int128 v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unsigned __int8 v27;
  unint64_t v28;
  int v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  int v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  unint64_t v42;
  int v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t *v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t *v53;
  uint64_t v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t v58;
  unint64_t v59;
  unint64_t v61;
  __int128 v62[3];
  _BYTE v63[48];
  unint64_t result = BigString.UTF8View.subscript.getter();
  if (result == 10)
  {
    unint64_t v8 = a2 >> 10;
    if (a2 >> 10 > (unint64_t)BigString.UTF8View.startIndex.getter() >> 10)
    {
      unint64_t v21 = BigString.UTF8View.index(before:)();
      unint64_t v23 = v22;
      unsigned __int8 v25 = v24;
      uint64_t v61 = v26;
      int v27 = BigString.UTF8View.subscript.getter();
      unint64_t v28 = a3;
      uint64_t v29 = v27;
      unint64_t v56 = v28;
      unint64_t v58 = a2;
      unint64_t result = BigString.UTF8View.index(after:)();
      unint64_t v30 = result >> 10;
      if (v29 != 13)
      {
LABEL_46:
        if (v30 >= v8)
        {
          *a7 = v58;
          a7[1] = v56;
          goto LABEL_19;
        }

unint64_t specialized BidirectionalCollection<>._matchesSeparators(_:from:reverse:)( unint64_t a1, unint64_t a2, char a3, unint64_t a4, unint64_t a5, unint64_t a6, unint64_t a7)
{
  LOBYTE(v15) = Substring.UTF8View.subscript.getter();
  if (v15 == 13)
  {
    if ((unint64_t)Substring.UTF8View.index(after:)() >> 14 >= a5 >> 14
      || (swift_bridgeObjectRetain(),
          unint64_t v7 = Substring.UTF8View.subscript.getter(),
          swift_bridgeObjectRelease(),
          (_DWORD)v7 != 10))
    {
      __break(1u);
      goto LABEL_16;
    }

    __break(1u);
LABEL_7:
    unint64_t v7 = a2 >> 14;
    if (a2 >> 14 > a4 >> 14)
    {
      a1 = Substring.UTF8View.index(before:)();
      int v16 = Substring.UTF8View.subscript.getter();
      unint64_t v15 = Substring.UTF8View.index(after:)();
      unint64_t v17 = v15 >> 14;
      if (v16 == 13)
      {
        if (v17 < a1 >> 14)
        {
          __break(1u);
          goto LABEL_11;
        }

        return a1;
      }

      if (v17 >= v7) {
        return a2;
      }
      __break(1u);
LABEL_78:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((a3 & 1) != 0)
      {
        if (v43 >> 14 >= a1 >> 14)
        {
LABEL_83:
          Substring.UTF8View.index(after:)();
          return a1;
        }

        __break(1u);
      }

      BOOL v38 = a1 >> 14 >= v43 >> 14;
      unint64_t result = a1;
      a1 = v43;
      if (!v38) {
        goto LABEL_98;
      }
      goto LABEL_83;
    }

uint64_t specialized BidirectionalCollection<>._getBlock(for:in:)@<X0>( uint64_t result@<X0>, void *a2@<X1>, unint64_t *a3@<X8>)
{
  unint64_t v7 = v3[6];
  unint64_t v8 = v3[10];
  unint64_t v9 = v8 >> 10;
  unint64_t v10 = v7 >> 10;
  if (v8 >> 10 < v7 >> 10)
  {
    __break(1u);
    goto LABEL_59;
  }

  unint64_t v12 = v3[7];
  unint64_t v11 = v3[8];
  unint64_t v5 = v3[9];
  unint64_t v14 = v3[11];
  unint64_t v13 = v3[12];
  unint64_t v15 = v3[13];
  unint64_t v4 = *a2 >> 10;
  if (v4 == v10 && v9 == a2[4] >> 10 && (result & 4) == 0)
  {
    *a3 = v7;
    a3[1] = v12;
    a3[2] = v11;
    a3[3] = v5;
    a3[4] = v8;
    a3[5] = v14;
    a3[6] = v13;
    a3[7] = v15;
    a3[8] = 0LL;
    a3[9] = 0LL;
    a3[10] = 0LL;
    a3[11] = 2LL;
    return result;
  }

  if (v4 < v10 || (v81 = a2[4], unint64_t v79 = v81 >> 10, v9 < v81 >> 10))
  {
    *a3 = v7;
    a3[1] = v12;
    a3[2] = v11;
    a3[3] = v5;
    a3[4] = v8;
    a3[5] = v14;
    a3[6] = v13;
    a3[7] = v15;
    a3[8] = v8;
    a3[9] = v14;
    a3[10] = v13;
    a3[11] = v15;
    return result;
  }

  unint64_t v73 = a2[5];
  unint64_t v75 = a2[6];
  unint64_t v77 = a2[7];
  char v83 = result;
  unint64_t v84 = v8 >> 10;
  unint64_t v63 = v3[7];
  unint64_t v64 = v3[8];
  if ((result & 8) == 0)
  {
    if (one-time initialization token for paragraphSeparators == -1)
    {
LABEL_11:
      int v16 = &static String.paragraphSeparators;
      goto LABEL_15;
    }

unint64_t specialized BidirectionalCollection<>._getBlock(for:in:)@<X0>( char a1@<W0>, void *a2@<X1>, unint64_t *a3@<X8>)
{
  unint64_t v6 = BigString.UTF8View.startIndex.getter();
  unint64_t v8 = v7;
  unint64_t v10 = v9;
  unint64_t v82 = v11;
  unint64_t result = BigString.UTF8View.endIndex.getter();
  unint64_t v16 = result >> 10;
  unint64_t v17 = v6 >> 10;
  if (result >> 10 < v6 >> 10)
  {
    __break(1u);
    goto LABEL_58;
  }

  unint64_t v80 = v8;
  unint64_t v81 = v10;
  unint64_t v8 = *a2 >> 10;
  if (v8 == v17 && v16 == a2[4] >> 10 && (a1 & 4) == 0LL)
  {
    *a3 = v6;
    a3[1] = v80;
    a3[2] = v10;
    a3[3] = v82;
    a3[4] = result;
    a3[5] = v13;
    a3[6] = v14;
    a3[7] = v15;
    a3[8] = 0LL;
    a3[9] = 0LL;
    a3[10] = 0LL;
    a3[11] = 2LL;
    return result;
  }

  if (v8 < v17 || (v76 = a2[4], unint64_t v74 = v76 >> 10, v16 < v76 >> 10))
  {
    *a3 = v6;
    a3[1] = v80;
    a3[2] = v10;
    a3[3] = v82;
    a3[4] = result;
    a3[5] = v13;
    a3[6] = v14;
    a3[7] = v15;
    a3[8] = result;
    a3[9] = v13;
    a3[10] = v14;
    a3[11] = v15;
    return result;
  }

  unint64_t v68 = a2[5];
  unint64_t v70 = a2[6];
  unint64_t v72 = a2[7];
  unint64_t v79 = result >> 10;
  if ((a1 & 8) == 0)
  {
    if (one-time initialization token for paragraphSeparators == -1)
    {
LABEL_13:
      unint64_t v19 = &static String.paragraphSeparators;
      goto LABEL_17;
    }

unint64_t specialized BidirectionalCollection<>._getBlock(for:in:)@<X0>( unint64_t result@<X0>, unint64_t a2@<X1>, unint64_t a3@<X2>, unint64_t a4@<X3>, unint64_t a5@<X4>, unint64_t a6@<X5>, unint64_t a7@<X6>, uint64_t a8@<X8>)
{
  unint64_t v14 = a5 >> 14;
  unint64_t v15 = a4 >> 14;
  if (a5 >> 14 < a4 >> 14)
  {
    __break(1u);
LABEL_78:
    __break(1u);
LABEL_79:
    swift_once();
    goto LABEL_10;
  }

  unint64_t v9 = a5;
  unint64_t v10 = a4;
  unint64_t v13 = result;
  uint64_t v8 = a8;
  unint64_t v11 = a2 >> 14;
  unint64_t v47 = a3;
  unint64_t v12 = a3 >> 14;
  if (a2 >> 14 == v15 && v12 == v14 && (result & 4) == 0)
  {
    char v16 = 0;
    BOOL v17 = 0;
    unint64_t v18 = 0LL;
    char v19 = 1;
    unint64_t v20 = a4;
LABEL_76:
    *(void *)uint64_t v8 = v20;
    *(_BYTE *)(v8 + 8) = v17;
    *(void *)(v8 + 16) = v9;
    *(_BYTE *)(v8 + 24) = v16;
    *(void *)(v8 + 32) = v18;
    *(_BYTE *)(v8 + 40) = v19;
    return result;
  }

  char v16 = 0;
  if (v11 < v15 || v14 < v12)
  {
    unint64_t v20 = a4;
    BOOL v17 = 0;
    unint64_t v18 = a5;
LABEL_75:
    char v19 = v16;
    goto LABEL_76;
  }

  unint64_t v50 = a7;
  unint64_t v51 = a6;
  unint64_t v49 = a5 >> 14;
  if ((result & 8) != 0)
  {
    if (one-time initialization token for lineSeparators != -1) {
      swift_once();
    }
    unint64_t v21 = &static String.lineSeparators;
    goto LABEL_15;
  }

  if (one-time initialization token for paragraphSeparators != -1) {
    goto LABEL_79;
  }
LABEL_10:
  unint64_t v21 = &static String.paragraphSeparators;
LABEL_15:
  unint64_t v48 = *v21;
  swift_bridgeObjectRetain();
  BOOL v17 = (v13 & 1) == 0;
  unint64_t v20 = ((uint64_t)(v13 << 63) >> 63) & v10;
  if ((v13 & 1) == 0 || v11 == v15) {
    goto LABEL_43;
  }
  unint64_t v20 = Substring.UTF8View.index(before:)();
  if (v11 < v49)
  {
    swift_bridgeObjectRetain();
    int v22 = Substring.UTF8View.subscript.getter();
    swift_bridgeObjectRelease();
    if (v22 == 10)
    {
      swift_bridgeObjectRetain();
      int v23 = Substring.UTF8View.subscript.getter();
      swift_bridgeObjectRelease();
      if (v23 == 13)
      {
        if (v15 >= v20 >> 14)
        {
LABEL_42:
          BOOL v17 = 0;
          unint64_t v20 = v10;
          goto LABEL_43;
        }

        unint64_t v20 = Substring.UTF8View.index(before:)();
      }
    }
  }

  BOOL v17 = 0;
  unint64_t v24 = v50;
  uint64_t v25 = (v51 >> 59) & 1;
  if ((v50 & 0x1000000000000000LL) == 0) {
    LOBYTE(v25) = 1;
  }
  uint64_t v26 = HIBYTE(v50) & 0xF;
  if ((v50 & 0x2000000000000000LL) == 0) {
    uint64_t v26 = v51 & 0xFFFFFFFFFFFFLL;
  }
  unint64_t v44 = v26;
  unint64_t v27 = v20 >> 14;
  if (v20 >> 14 < v15 || v27 >= v49)
  {
LABEL_43:
    if ((v13 & 6) == 0)
    {
LABEL_52:
      unint64_t result = swift_bridgeObjectRelease();
      unint64_t v9 = 0LL;
      unint64_t v18 = 0LL;
      char v16 = 1;
      char v19 = 1;
      goto LABEL_76;
    }

    goto LABEL_44;
  }

  uint64_t v45 = 4LL << v25;
  while (1)
  {
    unint64_t result = specialized BidirectionalCollection<>._matchesSeparators(_:from:reverse:)(v48, v20, 1, v10, v9, v51, v24);
    if ((v28 & 1) == 0)
    {
      unint64_t v20 = Substring.UTF8View.index(after:)();
      BOOL v17 = 0;
      if ((v13 & 6) == 0) {
        goto LABEL_52;
      }
LABEL_44:
      if (v11 != v12)
      {
        unint64_t v47 = Substring.UTF8View.index(before:)();
        unint64_t v12 = v47 >> 14;
      }

      if (v12 >= v49)
      {
LABEL_68:
        unint64_t result = swift_bridgeObjectRelease();
        unint64_t v18 = 0LL;
        unint64_t v35 = 0LL;
        char v16 = 1;
LABEL_70:
        if (v12 == v49) {
          unint64_t v9 = v47;
        }
        else {
          unint64_t v9 = v35;
        }
        if (v12 == v49)
        {
          char v16 = 0;
          unint64_t v18 = v47;
        }

        goto LABEL_75;
      }

      unint64_t v30 = specialized BidirectionalCollection<>._matchesSeparators(_:from:reverse:)(v48, v47, 1, v10, v9, v51, v50);
      if ((v32 & 1) == 0)
      {
        unint64_t v18 = v30;
        unint64_t v9 = v31;
        unint64_t result = swift_bridgeObjectRelease();
        char v16 = 0;
        char v19 = 0;
        goto LABEL_76;
      }

      unint64_t result = specialized BidirectionalCollection<>._matchesSeparators(_:from:reverse:)(v48, v47, 0, v10, v9, v51, v50);
      if ((v34 & 1) == 0)
      {
        unint64_t v18 = result;
        unint64_t v35 = v33;
LABEL_69:
        unint64_t result = swift_bridgeObjectRelease();
        char v16 = 0;
        goto LABEL_70;
      }

      uint64_t v36 = (v51 >> 59) & 1;
      if ((v50 & 0x1000000000000000LL) == 0) {
        LOBYTE(v36) = 1;
      }
      uint64_t v37 = 4LL << v36;
      uint64_t v38 = HIBYTE(v50) & 0xF;
      if ((v50 & 0x2000000000000000LL) == 0) {
        uint64_t v38 = v51 & 0xFFFFFFFFFFFFLL;
      }
      unint64_t v46 = v38;
      unint64_t v39 = v47;
      while (1)
      {
        if ((v39 & 0xC) == v37)
        {
          unint64_t result = _StringGuts._slowEnsureMatchingEncoding(_:)(v39, v51, v50);
          unint64_t v40 = v50;
          unint64_t v39 = result;
          if ((v50 & 0x1000000000000000LL) == 0)
          {
LABEL_60:
            unint64_t v39 = (v39 & 0xFFFFFFFFFFFF0000LL) + 65540;
            goto LABEL_61;
          }
        }

        else
        {
          unint64_t v40 = v50;
          if ((v50 & 0x1000000000000000LL) == 0) {
            goto LABEL_60;
          }
        }

        if (v46 <= v39 >> 16) {
          goto LABEL_81;
        }
        uint64_t v43 = String.UTF8View._foreignIndex(after:)();
        unint64_t v40 = v50;
        unint64_t v39 = v43;
LABEL_61:
        unint64_t v12 = v39 >> 14;
        if (v39 >> 14 >= v49)
        {
          unint64_t v47 = v39;
          goto LABEL_68;
        }

        unint64_t result = specialized BidirectionalCollection<>._matchesSeparators(_:from:reverse:)( v48,  v39,  0,  v10,  v9,  v51,  v40);
        if ((v42 & 1) == 0)
        {
          unint64_t v18 = result;
          unint64_t v35 = v41;
          unint64_t v47 = v39;
          goto LABEL_69;
        }
      }
    }

    if (v15 >= v27) {
      goto LABEL_42;
    }
    if ((v20 & 0xC) == v45)
    {
      unint64_t result = _StringGuts._slowEnsureMatchingEncoding(_:)(v20, v51, v50);
      unint64_t v20 = result;
      if (result < 0x4000) {
        goto LABEL_78;
      }
    }

    else if (v20 < 0x4000)
    {
      goto LABEL_78;
    }

    unint64_t v24 = v50;
    if ((v50 & 0x1000000000000000LL) == 0)
    {
      unint64_t v20 = (v20 & 0xFFFFFFFFFFFF0000LL) - 65532;
      goto LABEL_35;
    }

    if (v44 < v20 >> 16) {
      break;
    }
    uint64_t v29 = String.UTF8View._foreignIndex(before:)();
    unint64_t v24 = v50;
    unint64_t v20 = v29;
LABEL_35:
    BOOL v17 = 0;
    unint64_t v27 = v20 >> 14;
    if (v20 >> 14 < v15 || v27 >= v49) {
      goto LABEL_43;
    }
  }

  __break(1u);
LABEL_81:
  __break(1u);
  return result;
}

BOOL specialized Range.isEmpty.getter(uint64_t a1, uint64_t a2)
{
  return a1 == a2;
}

BOOL specialized Range.isEmpty.getter()
{
  return (v0[4] ^ *v0) < 0x400uLL;
}

BOOL specialized Collection.isEmpty.getter(uint64_t a1)
{
  return *(void *)(a1 + 16) == 0LL;
}

BOOL specialized Collection.isEmpty.getter()
{
  return ((*(void *)(v0 + 48) ^ *(void *)(v0 + 80)) & 0x7FFFFFFFFFFF800LL) == 0;
}

BOOL specialized Collection.isEmpty.getter(uint64_t a1, uint64_t a2)
{
  return a2 == 0;
}

double specialized Dictionary.subscript.getter@<D0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  if (*(void *)(a3 + 16) && (unint64_t v6 = specialized __RawDictionaryStorage.find<A>(_:)(a1, a2), (v7 & 1) != 0))
  {
    outlined init with copy of AttributedString._AttributeValue(*(void *)(a3 + 56) + 72 * v6, a4);
  }

  else
  {
    *(void *)(a4 + 64) = 0LL;
    double result = 0.0;
    *(_OWORD *)(a4 + 32) = 0u;
    *(_OWORD *)(a4 + 48) = 0u;
    *(_OWORD *)a4 = 0u;
    *(_OWORD *)(a4 + 16) = 0u;
  }

  return result;
}

uint64_t specialized Dictionary.subscript.getter(uint64_t a1, uint64_t a2)
{
  if (!*(void *)(a2 + 16)) {
    return 0LL;
  }
  unint64_t v3 = specialized __RawDictionaryStorage.find<A>(_:)(a1);
  if ((v4 & 1) == 0) {
    return 0LL;
  }
  uint64_t v5 = *(void *)(*(void *)(a2 + 56) + 16 * v3);
  swift_bridgeObjectRetain();
  return v5;
}

__n128 AttributedString.Runs.subscript.getter@<Q0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  __int128 v7 = v3[11];
  __int128 v38 = v3[10];
  __int128 v39 = v7;
  uint64_t v40 = *((void *)v3 + 24);
  __int128 v8 = v3[7];
  __int128 v34 = v3[6];
  __int128 v35 = v8;
  __int128 v9 = v3[9];
  __int128 v36 = v3[8];
  __int128 v37 = v9;
  __int128 v10 = v3[3];
  __int128 v30 = v3[2];
  __int128 v31 = v10;
  __int128 v11 = v3[5];
  __int128 v32 = v3[4];
  __int128 v33 = v11;
  __n128 v12 = (__n128)v3[1];
  __int128 v28 = *v3;
  __n128 v29 = v12;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
  uint64_t v13 = swift_allocObject();
  *(_OWORD *)(v13 + 16) = xmmword_183720D90;
  unint64_t v14 = *(uint64_t (**)(uint64_t, uint64_t))(a2 + 24);
  outlined retain of AttributedString.Runs((uint64_t)&v28);
  *(void *)(v13 + 32) = v14(a1, a2);
  *(void *)(v13 + 40) = v15;
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(a2 + 32))(&v26, a1, a2);
  uint64_t v16 = v27;
  if (v27 == 1)
  {
    uint64_t v17 = MEMORY[0x18961AFE8];
  }

  else
  {
    uint64_t v18 = v26;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<AttributedString.AttributeRunBoundaries>);
    uint64_t v17 = swift_allocObject();
    *(_OWORD *)(v17 + 16) = xmmword_183720D90;
    *(void *)(v17 + 32) = v18;
    *(void *)(v17 + 40) = v16;
  }

  __int128 v19 = v39;
  *(_OWORD *)(a3 + 160) = v38;
  *(_OWORD *)(a3 + 176) = v19;
  uint64_t v20 = v40;
  __int128 v21 = v35;
  *(_OWORD *)(a3 + 96) = v34;
  *(_OWORD *)(a3 + 112) = v21;
  __int128 v22 = v37;
  *(_OWORD *)(a3 + 128) = v36;
  *(_OWORD *)(a3 + 144) = v22;
  __int128 v23 = v31;
  *(_OWORD *)(a3 + 32) = v30;
  *(_OWORD *)(a3 + 48) = v23;
  __int128 v24 = v33;
  *(_OWORD *)(a3 + 64) = v32;
  *(_OWORD *)(a3 + 80) = v24;
  __n128 result = v29;
  *(_OWORD *)a3 = v28;
  *(__n128 *)(a3 + 16) = result;
  *(void *)(a3 + 192) = v20;
  *(void *)(a3 + 200) = v13;
  *(void *)(a3 + 208) = v17;
  return result;
}

uint64_t AttributedString.Runs.AttributesSlice1.Iterator.next()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v4 = *(void *)(v2 + 216);
  unint64_t v5 = *(void *)(v2 + 168);
  if (v4 >> 10 == v5 >> 10)
  {
    swift_getAssociatedTypeWitness();
    type metadata accessor for Optional();
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Range<AttributedString.Index>);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(TupleTypeMetadata2 - 8) + 56LL))( a2,  1LL,  1LL,  TupleTypeMetadata2);
  }

  else
  {
    uint64_t v8 = *(void *)v2;
    __int128 v9 = *(_OWORD *)(v2 + 88);
    __int128 v67 = *(_OWORD *)(v2 + 72);
    __int128 v68 = v9;
    __int128 v10 = *(_OWORD *)(v2 + 120);
    __int128 v69 = *(_OWORD *)(v2 + 104);
    __int128 v70 = v10;
    __int128 v11 = *(_OWORD *)(v2 + 24);
    __int128 v63 = *(_OWORD *)(v2 + 8);
    __int128 v64 = v11;
    __int128 v12 = *(_OWORD *)(v2 + 56);
    __int128 v65 = *(_OWORD *)(v2 + 40);
    __int128 v66 = v12;
    uint64_t v35 = *(void *)(v2 + 144);
    uint64_t v37 = *(void *)(v2 + 136);
    uint64_t v32 = *(void *)(v2 + 160);
    uint64_t v33 = *(void *)(v2 + 152);
    uint64_t v30 = *(void *)(v2 + 184);
    uint64_t v31 = *(void *)(v2 + 176);
    uint64_t v29 = *(void *)(v2 + 192);
    unint64_t v13 = *(void *)(v2 + 232);
    unint64_t v40 = *(void *)(v2 + 224);
    unint64_t v14 = *(void *)(v2 + 240);
    __int128 v15 = *(_OWORD *)(v2 + 88);
    __int128 v76 = *(_OWORD *)(v2 + 72);
    __int128 v77 = v15;
    __int128 v78 = *(_OWORD *)(v2 + 104);
    __int128 v79 = *(_OWORD *)(v2 + 120);
    __int128 v72 = *(_OWORD *)(v2 + 8);
    __int128 v73 = *(_OWORD *)(v2 + 24);
    __int128 v74 = *(_OWORD *)(v2 + 40);
    __int128 v75 = *(_OWORD *)(v2 + 56);
    uint64_t v71 = v8;
    uint64_t v80 = v37;
    uint64_t v81 = v35;
    uint64_t v82 = v33;
    uint64_t v83 = v32;
    unint64_t v84 = v5;
    uint64_t v85 = v31;
    uint64_t v86 = v30;
    uint64_t v87 = v29;
    unint64_t v59 = v4;
    unint64_t v60 = v40;
    unint64_t v61 = v13;
    unint64_t v62 = v14;
    AttributedString.Runs.subscript.getter(&v59, &v42);
    __int128 v76 = v67;
    __int128 v77 = v68;
    __int128 v78 = v69;
    __int128 v79 = v70;
    __int128 v72 = v63;
    __int128 v73 = v64;
    __int128 v74 = v65;
    __int128 v75 = v66;
    __int128 v47 = v67;
    __int128 v48 = v68;
    uint64_t v16 = v42;
    __int128 v49 = v69;
    __int128 v50 = v70;
    __int128 v43 = v63;
    __int128 v44 = v64;
    __int128 v45 = v65;
    uint64_t v17 = *(void *)(v2 + 200);
    uint64_t v18 = *(void *)(v2 + 208);
    uint64_t v71 = v8;
    uint64_t v80 = v37;
    uint64_t v81 = v35;
    uint64_t v82 = v33;
    uint64_t v83 = v32;
    unint64_t v84 = v5;
    uint64_t v85 = v31;
    uint64_t v86 = v30;
    uint64_t v87 = v29;
    uint64_t v88 = v17;
    uint64_t v89 = v18;
    v41[3] = v14;
    uint64_t v42 = v8;
    __int128 v46 = v66;
    uint64_t v51 = v37;
    uint64_t v52 = v35;
    uint64_t v53 = v33;
    uint64_t v54 = v32;
    unint64_t v55 = v5;
    uint64_t v56 = v31;
    uint64_t v57 = v30;
    uint64_t v58 = v29;
    unint64_t v36 = v13;
    unint64_t v38 = v4;
    v41[0] = v4;
    v41[1] = v40;
    v41[2] = v13;
    unint64_t v34 = v14;
    outlined retain of ReversedCollection<AttributedString.Runs.AttributesSlice1<AttributeScopes.FoundationAttributes.InflectionRuleAttribute>>((uint64_t)&v71);
    swift_retain();
    AttributedString.Runs._slicedRunBoundary(after:attributeNames:constraints:)(v41, v17, v18, (uint64_t *)&v59);
    swift_release();
    uint64_t result = outlined release of ReversedCollection<AttributedString.Runs.AttributesSlice1<AttributeScopes.FoundationAttributes.InflectionRuleAttribute>>.Iterator((uint64_t)&v71);
    unint64_t v19 = v59;
    if (v4 >> 10 > v59 >> 10)
    {
      __break(1u);
    }

    else
    {
      unint64_t v20 = v60;
      unint64_t v21 = v61;
      unint64_t v39 = v60;
      unint64_t v22 = v62;
      *(void *)(v2 + 216) = v59;
      *(void *)(v2 + 224) = v20;
      *(void *)(v2 + 232) = v21;
      *(void *)(v2 + 240) = v22;
      uint64_t v24 = *(void *)(a1 + 16);
      uint64_t v23 = *(void *)(a1 + 24);
      swift_getAssociatedTypeWitness();
      type metadata accessor for Optional();
      __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Range<AttributedString.Index>);
      uint64_t v25 = swift_getTupleTypeMetadata2();
      uint64_t v26 = (unint64_t *)(a2 + *(int *)(v25 + 48));
      AttributedString._AttributeStorage.subscript.getter(v16, v24, v23, a2);
      swift_release();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      *uint64_t v26 = v38;
      v26[1] = v40;
      v26[2] = v36;
      v26[3] = v34;
      v26[4] = v19;
      v26[5] = v39;
      v26[6] = v21;
      v26[7] = v22;
      return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v25 - 8) + 56LL))( a2,  0LL,  1LL,  v25);
    }
  }

  return result;
}

double AttributedString.Runs.subscript.getter@<D0>( uint64_t a1@<X2>, uint64_t a2@<X3>, uint64_t a3@<X4>, uint64_t a4@<X5>, uint64_t a5@<X8>)
{
  __int128 v11 = *(_OWORD *)(v5 + 176);
  v18[10] = *(_OWORD *)(v5 + 160);
  v18[11] = v11;
  uint64_t v19 = *(void *)(v5 + 192);
  __int128 v12 = *(_OWORD *)(v5 + 112);
  v18[6] = *(_OWORD *)(v5 + 96);
  v18[7] = v12;
  __int128 v13 = *(_OWORD *)(v5 + 144);
  v18[8] = *(_OWORD *)(v5 + 128);
  v18[9] = v13;
  __int128 v14 = *(_OWORD *)(v5 + 48);
  v18[2] = *(_OWORD *)(v5 + 32);
  v18[3] = v14;
  __int128 v15 = *(_OWORD *)(v5 + 80);
  v18[4] = *(_OWORD *)(v5 + 64);
  v18[5] = v15;
  __int128 v16 = *(_OWORD *)(v5 + 16);
  v18[0] = *(_OWORD *)v5;
  v18[1] = v16;
  outlined retain of AttributedString.Runs((uint64_t)v18);
  *(void *)&double result = AttributedString.Runs.AttributesSlice2.init(runs:)(v5, a1, a2, a3, a4, a5).n128_u64[0];
  return result;
}

uint64_t AttributedString.Runs.AttributesSlice1.makeIterator()@<X0>(uint64_t a1@<X8>)
{
  __int128 v2 = *(_OWORD *)(v1 + 176);
  __int128 v3 = *(_OWORD *)(v1 + 144);
  *(_OWORD *)&v27[32] = *(_OWORD *)(v1 + 160);
  __int128 v28 = v2;
  __int128 v4 = *(_OWORD *)(v1 + 176);
  __int128 v29 = *(_OWORD *)(v1 + 192);
  __int128 v5 = *(_OWORD *)(v1 + 112);
  __int128 v7 = *(_OWORD *)(v1 + 80);
  __int128 v25 = *(_OWORD *)(v1 + 96);
  __int128 v6 = v25;
  __int128 v26 = v5;
  __int128 v8 = *(_OWORD *)(v1 + 112);
  __int128 v9 = *(_OWORD *)(v1 + 144);
  *(_OWORD *)uint64_t v27 = *(_OWORD *)(v1 + 128);
  __int128 v10 = *(_OWORD *)v27;
  *(_OWORD *)&v27[16] = v9;
  __int128 v11 = *(_OWORD *)(v1 + 48);
  __int128 v13 = *(_OWORD *)(v1 + 16);
  __int128 v21 = *(_OWORD *)(v1 + 32);
  __int128 v12 = v21;
  __int128 v22 = v11;
  __int128 v14 = *(_OWORD *)(v1 + 48);
  __int128 v15 = *(_OWORD *)(v1 + 80);
  __int128 v23 = *(_OWORD *)(v1 + 64);
  __int128 v16 = v23;
  __int128 v24 = v15;
  __int128 v17 = *(_OWORD *)(v1 + 16);
  v20[0] = *(_OWORD *)v1;
  __int128 v18 = v20[0];
  v20[1] = v17;
  *(_OWORD *)(a1 + 160) = *(_OWORD *)&v27[32];
  *(_OWORD *)(a1 + 176) = v4;
  *(_OWORD *)(a1 + 192) = *(_OWORD *)(v1 + 192);
  *(_OWORD *)(a1 + 96) = v6;
  *(_OWORD *)(a1 + 112) = v8;
  *(_OWORD *)(a1 + 128) = v10;
  *(_OWORD *)(a1 + 144) = v3;
  *(_OWORD *)(a1 + 32) = v12;
  *(_OWORD *)(a1 + 48) = v14;
  *(_OWORD *)(a1 + 64) = v16;
  *(_OWORD *)(a1 + 80) = v7;
  uint64_t v30 = *(void *)(v1 + 208);
  *(void *)(a1 + 208) = *(void *)(v1 + 208);
  *(_OWORD *)a1 = v18;
  *(_OWORD *)(a1 + 16) = v13;
  *(_OWORD *)(a1 + 216) = *(_OWORD *)&v27[8];
  *(_OWORD *)(a1 + 232) = *(_OWORD *)&v27[24];
  return outlined retain of ReversedCollection<AttributedString.Runs.AttributesSlice1<AttributeScopes.FoundationAttributes.InflectionRuleAttribute>>((uint64_t)v20);
}

uint64_t AttributedString.Runs.AttributesSlice2.Iterator.next()@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  unint64_t v4 = v2[21];
  unint64_t v229 = v2[27];
  unint64_t v5 = v229 >> 10;
  unint64_t v224 = v4;
  unint64_t v6 = v4 >> 10;
  if (v229 >> 10 == v6)
  {
    swift_getAssociatedTypeWitness();
    type metadata accessor for Optional();
    swift_getAssociatedTypeWitness();
    type metadata accessor for Optional();
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Range<AttributedString.Index>);
    TupleTypeMetadata3 = swift_getTupleTypeMetadata3();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(TupleTypeMetadata3 - 8) + 56LL))( a2,  1LL,  1LL,  TupleTypeMetadata3);
  }

  uint64_t v202 = result;
  uint64_t v8 = *v2;
  __int128 v282 = *(_OWORD *)(v2 + 1);
  __int128 v283 = *(_OWORD *)(v2 + 3);
  __int128 v284 = *(_OWORD *)(v2 + 5);
  __int128 v285 = *(_OWORD *)(v2 + 7);
  if (v5 >= v6) {
    goto LABEL_251;
  }
  unint64_t v235 = v2[17];
  if (v5 < v235 >> 10) {
    goto LABEL_251;
  }
  unint64_t v9 = *(void *)(v8 + 64);
  int64_t v10 = *(void *)(v8 + 80);
  int64_t v11 = v229 >> 11;
  if (v9) {
    int64_t v12 = *(void *)(v8 + 80);
  }
  else {
    int64_t v12 = 0LL;
  }
  if (v12 < v11) {
    goto LABEL_252;
  }
  __int128 v231 = *(_OWORD *)(v2 + 9);
  __int128 v13 = *(_OWORD *)(v2 + 11);
  __int128 v14 = *(_OWORD *)(v2 + 13);
  __int128 v15 = *(_OWORD *)(v2 + 15);
  v234 = (uint64_t *)v2[18];
  v233 = (__int128 *)v2[19];
  v232 = (uint64_t *)v2[20];
  v213 = (__int128 *)v2[22];
  unint64_t v212 = v2[23];
  __int128 v16 = (void *)v2[24];
  v210 = v2;
  v211 = v16;
  uint64_t v222 = v2[28];
  uint64_t v221 = v2[29];
  uint64_t v220 = v2[30];
  uint64_t v17 = *(void *)(v8 + 72);
  uint64_t v18 = *(void *)(v8 + 88);
  uint64_t v217 = v8;
  *(void *)&__int128 v230 = v229 >> 11;
  uint64_t v199 = a2;
  unint64_t v200 = v6;
  unint64_t v201 = v229 >> 10;
  __int128 v226 = v14;
  __int128 v227 = v13;
  __int128 v225 = v15;
  unint64_t v228 = v235 >> 10;
  if (!v9 || v11 >= v10 || !*(_WORD *)(v9 + 16))
  {
    swift_unknownObjectRetain_n();
    swift_retain();
    uint64_t v31 = v17;
    unint64_t v32 = specialized Rope._endPath.getter(v9);
    swift_unknownObjectRelease();
    uint64_t v23 = 0LL;
    int64_t v11 = 0LL;
    int64_t v33 = 0LL;
    if (!v9) {
      goto LABEL_32;
    }
    goto LABEL_31;
  }

  uint64_t v223 = v17;
  uint64_t v19 = v18;
  uint64_t v20 = *(unsigned __int8 *)(v9 + 18);
  if (*(_BYTE *)(v9 + 18))
  {
    swift_unknownObjectRetain_n();
    double result = swift_retain();
    unint64_t v21 = v9;
    while (1)
    {
      uint64_t v24 = *(unsigned __int16 *)(v21 + 16);
      if (!*(_WORD *)(v21 + 16)) {
        break;
      }
      uint64_t v25 = *(void *)(v21 + 40);
      BOOL v26 = __OFSUB__(v11, v25);
      int64_t v27 = v11 - v25;
      if (v26) {
        goto LABEL_243;
      }
      if (__OFADD__(v27, 1LL)) {
        goto LABEL_244;
      }
      if (v27 + 1 < 1)
      {
        uint64_t v24 = 0LL;
        goto LABEL_16;
      }

      if ((_DWORD)v24 == 1)
      {
        int64_t v11 = v27;
        break;
      }

      __int128 v28 = (uint64_t *)(v21 + 64);
      uint64_t v29 = 1LL;
      while (1)
      {
        uint64_t v30 = *v28;
        v28 += 3;
        int64_t v11 = v27 - v30;
        if (__OFSUB__(v27, v30)) {
          goto LABEL_237;
        }
        if (__OFADD__(v11, 1LL))
        {
LABEL_238:
          __break(1u);
LABEL_239:
          __break(1u);
LABEL_240:
          __break(1u);
          goto LABEL_241;
        }

        if (v11 + 1 < 1) {
          break;
        }
        ++v29;
        int64_t v27 = v11;
        if (v24 == v29) {
          goto LABEL_15;
        }
      }

      uint64_t v24 = v29;
      int64_t v11 = v27;
LABEL_16:
      char v22 = (4 * *(_BYTE *)(v21 + 18) + 8) & 0x3C;
      uint64_t v20 = ((-15LL << v22) - 1) & v20 | (v24 << v22);
      uint64_t v23 = *(void *)(v21 + 24 + 24 * v24);
      swift_unknownObjectRetain();
      double result = swift_unknownObjectRelease();
      unint64_t v21 = v23;
      if (!*(_BYTE *)(v23 + 18)) {
        goto LABEL_73;
      }
    }

double AttributedString.Runs.subscript.getter@<D0>( uint64_t a1@<X3>, uint64_t a2@<X4>, uint64_t a3@<X5>, uint64_t a4@<X6>, uint64_t a5@<X7>, uint64_t a6@<X8>, uint64_t a7)
{
  __int128 v14 = *(_OWORD *)(v7 + 176);
  v21[10] = *(_OWORD *)(v7 + 160);
  v21[11] = v14;
  uint64_t v22 = *(void *)(v7 + 192);
  __int128 v15 = *(_OWORD *)(v7 + 112);
  v21[6] = *(_OWORD *)(v7 + 96);
  v21[7] = v15;
  __int128 v16 = *(_OWORD *)(v7 + 144);
  v21[8] = *(_OWORD *)(v7 + 128);
  v21[9] = v16;
  __int128 v17 = *(_OWORD *)(v7 + 48);
  v21[2] = *(_OWORD *)(v7 + 32);
  v21[3] = v17;
  __int128 v18 = *(_OWORD *)(v7 + 80);
  v21[4] = *(_OWORD *)(v7 + 64);
  v21[5] = v18;
  __int128 v19 = *(_OWORD *)(v7 + 16);
  v21[0] = *(_OWORD *)v7;
  v21[1] = v19;
  outlined retain of AttributedString.Runs((uint64_t)v21);
  *(void *)&double result = AttributedString.Runs.AttributesSlice3.init(runs:)(v7, a1, a2, a3, a4, a5, a7, a6).n128_u64[0];
  return result;
}

uint64_t AttributedString.Runs.AttributesSlice3.Iterator.next()@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  unint64_t v4 = *(void *)(v2 + 216);
  unint64_t v5 = v4 >> 10;
  unint64_t v251 = *(void *)(v2 + 168);
  if (v4 >> 10 == v251 >> 10)
  {
    swift_getAssociatedTypeWitness();
    uint64_t v292 = type metadata accessor for Optional();
    swift_getAssociatedTypeWitness();
    *(void *)&__int128 v293 = type metadata accessor for Optional();
    swift_getAssociatedTypeWitness();
    *((void *)&v293 + 1) = type metadata accessor for Optional();
    *(void *)&__int128 v294 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Range<AttributedString.Index>);
    uint64_t TupleTypeMetadata = swift_getTupleTypeMetadata();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(TupleTypeMetadata - 8) + 56LL))( a2,  1LL,  1LL,  TupleTypeMetadata);
  }

  uint64_t v7 = *(void **)v2;
  __int128 v8 = *(_OWORD *)(v2 + 24);
  __int128 v311 = *(_OWORD *)(v2 + 8);
  __int128 v312 = v8;
  __int128 v9 = *(_OWORD *)(v2 + 56);
  __int128 v313 = *(_OWORD *)(v2 + 40);
  __int128 v314 = v9;
  if (v5 >= v251 >> 10) {
    goto LABEL_274;
  }
  unint64_t v10 = *(void *)(v2 + 136);
  if (v5 < v10 >> 10) {
    goto LABEL_274;
  }
  unint64_t v11 = v7[8];
  int64_t v12 = v7[10];
  if (v11) {
    int64_t v13 = v7[10];
  }
  else {
    int64_t v13 = 0LL;
  }
  int64_t v264 = v4 >> 11;
  __int128 v261 = *(_OWORD *)(v2 + 72);
  __int128 v14 = *(_OWORD *)(v2 + 88);
  __int128 v15 = *(_OWORD *)(v2 + 104);
  __int128 v16 = *(_OWORD *)(v2 + 120);
  uint64_t v257 = *(void *)(v2 + 144);
  __int128 v17 = *(__int128 **)(v2 + 152);
  uint64_t v262 = *(void **)(v2 + 160);
  uint64_t v263 = v17;
  __int128 v18 = *(void **)(v2 + 176);
  uint64_t v236 = *(void *)(v2 + 184);
  __int128 v237 = v18;
  __int128 v19 = *(__int128 **)(v2 + 192);
  v234 = (void *)v2;
  unint64_t v235 = v19;
  uint64_t v20 = *(void *)(v2 + 224);
  uint64_t v246 = *(void *)(v2 + 232);
  uint64_t v247 = v20;
  uint64_t v21 = *(void *)(v2 + 240);
  unint64_t v244 = v4;
  uint64_t v245 = v21;
  uint64_t v22 = v7[9];
  __int128 v258 = v7;
  uint64_t v259 = v22;
  uint64_t v23 = v7[11];
  uint64_t v248 = a2;
  v242 = (void *)result;
  unint64_t v226 = v251 >> 10;
  unint64_t v227 = v4 >> 10;
  __int128 v254 = v15;
  __int128 v255 = v14;
  __int128 v253 = v16;
  __int128 v256 = (void *)(v10 >> 10);
  __int128 v260 = (uint64_t *)v23;
  if (!v11 || v264 >= v12 || !*(_WORD *)(v11 + 16))
  {
    swift_unknownObjectRetain_n();
    swift_retain();
    uint64_t v36 = v259;
    unint64_t v37 = specialized Rope._endPath.getter(v11);
    swift_unknownObjectRelease();
    uint64_t v28 = 0LL;
    int64_t v25 = 0LL;
    uint64_t v38 = 0LL;
    if (!v11) {
      goto LABEL_32;
    }
    goto LABEL_31;
  }

  uint64_t v24 = *(unsigned __int8 *)(v11 + 18);
  if (*(_BYTE *)(v11 + 18))
  {
    swift_unknownObjectRetain_n();
    double result = swift_retain();
    int64_t v25 = v264;
    unint64_t v26 = v11;
    while (1)
    {
      uint64_t v29 = *(unsigned __int16 *)(v26 + 16);
      if (!*(_WORD *)(v26 + 16)) {
        break;
      }
      uint64_t v30 = *(void *)(v26 + 40);
      BOOL v31 = __OFSUB__(v25, v30);
      uint64_t v32 = v25 - v30;
      if (v31) {
        goto LABEL_266;
      }
      if (__OFADD__(v32, 1LL)) {
        goto LABEL_267;
      }
      if (v32 + 1 < 1)
      {
        uint64_t v29 = 0LL;
        goto LABEL_16;
      }

      if ((_DWORD)v29 == 1)
      {
        int64_t v25 = v32;
        break;
      }

      int64_t v33 = (uint64_t *)(v26 + 64);
      uint64_t v34 = 1LL;
      while (1)
      {
        uint64_t v35 = *v33;
        v33 += 3;
        int64_t v25 = v32 - v35;
        if (__OFSUB__(v32, v35)) {
          goto LABEL_260;
        }
        if (__OFADD__(v25, 1LL))
        {
LABEL_261:
          __break(1u);
LABEL_262:
          __break(1u);
LABEL_263:
          __break(1u);
          goto LABEL_264;
        }

        if (v25 + 1 < 1) {
          break;
        }
        ++v34;
        uint64_t v32 = v25;
        if (v29 == v34) {
          goto LABEL_15;
        }
      }

      uint64_t v29 = v34;
      int64_t v25 = v32;
LABEL_16:
      char v27 = (4 * *(_BYTE *)(v26 + 18) + 8) & 0x3C;
      uint64_t v24 = ((-15LL << v27) - 1) & v24 | (v29 << v27);
      uint64_t v28 = *(void *)(v26 + 24 + 24 * v29);
      swift_unknownObjectRetain();
      double result = swift_unknownObjectRelease();
      unint64_t v26 = v28;
      if (!*(_BYTE *)(v28 + 18)) {
        goto LABEL_73;
      }
    }

LABEL_209:
  unint64_t v170 = v169[27];
  if (v159 >> 10 < v170 >> 10) {
    goto LABEL_290;
  }
  uint64_t v171 = v169[28];
  __int128 v260 = (uint64_t *)v169[29];
  *(void *)&__int128 v261 = v171;
  uint64_t v259 = v169[30];
  v169[27] = v159;
  v169[28] = v152;
  uint64_t v262 = v152;
  uint64_t v172 = v263;
  v169[29] = v264;
  v169[30] = v172;
  uint64_t v173 = (*(uint64_t (**)(void, void))(v242[5] + 24LL))(v242[2], v242[5]);
  uint64_t v175 = v249;
  if (*(void *)(v249 + 16))
  {
    unint64_t v176 = specialized __RawDictionaryStorage.find<A>(_:)(v173, v174);
    uint64_t v177 = v248;
    if ((v178 & 1) != 0)
    {
      outlined init with copy of AttributedString._AttributeValue(*(void *)(v175 + 56) + 72 * v176, (uint64_t)&v287);
    }

    else
    {
      uint64_t v291 = 0LL;
      __int128 v289 = 0u;
      __int128 v290 = 0u;
      __int128 v287 = 0u;
      __int128 v288 = 0u;
    }
  }

  else
  {
    uint64_t v291 = 0LL;
    __int128 v289 = 0u;
    __int128 v290 = 0u;
    __int128 v287 = 0u;
    __int128 v288 = 0u;
    uint64_t v177 = v248;
  }

  swift_bridgeObjectRelease();
  if (*((void *)&v288 + 1))
  {
    outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>( (uint64_t)&v287,  (uint64_t)v271);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Hashable & Sendable);
    uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
    swift_dynamicCast();
    outlined destroy of AttributedString._AttributeValue((uint64_t)&v287);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 56LL))( v177,  0LL,  1LL,  AssociatedTypeWitness);
  }

  else
  {
    outlined destroy of Any?( (uint64_t)&v287,  &demangling cache variable for type metadata for AttributedString._AttributeValue?);
    uint64_t v180 = swift_getAssociatedTypeWitness();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v180 - 8) + 56LL))(v177, 1LL, 1LL, v180);
  }

  uint64_t v181 = (*(uint64_t (**)(void, void))(v242[6] + 24LL))(v242[3], v242[6]);
  uint64_t v183 = v249;
  if (*(void *)(v249 + 16) && (unint64_t v184 = specialized __RawDictionaryStorage.find<A>(_:)(v181, v182), (v185 & 1) != 0))
  {
    outlined init with copy of AttributedString._AttributeValue(*(void *)(v183 + 56) + 72 * v184, (uint64_t)&v287);
  }

  else
  {
    uint64_t v291 = 0LL;
    __int128 v289 = 0u;
    __int128 v290 = 0u;
    __int128 v287 = 0u;
    __int128 v288 = 0u;
  }

  swift_bridgeObjectRelease();
  swift_getAssociatedTypeWitness();
  v271[0] = type metadata accessor for Optional();
  swift_getAssociatedTypeWitness();
  v271[1] = type metadata accessor for Optional();
  uint64_t v186 = v242[7];
  uint64_t v187 = v242[4];
  swift_getAssociatedTypeWitness();
  v271[2] = type metadata accessor for Optional();
  v271[3] = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Range<AttributedString.Index>);
  unint64_t v188 = (int *)swift_getTupleTypeMetadata();
  uint64_t v189 = v248 + v188[12];
  if (*((void *)&v288 + 1))
  {
    outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>( (uint64_t)&v287,  (uint64_t)v271);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Hashable & Sendable);
    uint64_t v190 = swift_getAssociatedTypeWitness();
    swift_dynamicCast();
    outlined destroy of AttributedString._AttributeValue((uint64_t)&v287);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v190 - 8) + 56LL))(v189, 0LL, 1LL, v190);
  }

  else
  {
    outlined destroy of Any?( (uint64_t)&v287,  &demangling cache variable for type metadata for AttributedString._AttributeValue?);
    uint64_t v191 = swift_getAssociatedTypeWitness();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v191 - 8) + 56LL))(v189, 1LL, 1LL, v191);
  }

  uint64_t v192 = (*(uint64_t (**)(uint64_t, uint64_t))(v186 + 24))(v187, v186);
  uint64_t v194 = v249;
  if (*(void *)(v249 + 16) && (unint64_t v195 = specialized __RawDictionaryStorage.find<A>(_:)(v192, v193), (v196 & 1) != 0))
  {
    outlined init with copy of AttributedString._AttributeValue(*(void *)(v194 + 56) + 72 * v195, (uint64_t)&v287);
  }

  else
  {
    uint64_t v291 = 0LL;
    __int128 v289 = 0u;
    __int128 v290 = 0u;
    __int128 v287 = 0u;
    __int128 v288 = 0u;
  }

  swift_bridgeObjectRelease();
  uint64_t v197 = v248;
  uint64_t v198 = v248 + v188[16];
  if (*((void *)&v288 + 1))
  {
    outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>( (uint64_t)&v287,  (uint64_t)v271);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Hashable & Sendable);
    uint64_t v199 = swift_getAssociatedTypeWitness();
    uint64_t v197 = v248;
    swift_dynamicCast();
    outlined destroy of AttributedString._AttributeValue((uint64_t)&v287);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v199 - 8) + 56LL))(v198, 0LL, 1LL, v199);
  }

  else
  {
    outlined destroy of Any?( (uint64_t)&v287,  &demangling cache variable for type metadata for AttributedString._AttributeValue?);
    uint64_t v200 = swift_getAssociatedTypeWitness();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v200 - 8) + 56LL))(v198, 1LL, 1LL, v200);
  }

  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  unint64_t v201 = (unint64_t *)(v197 + v188[20]);
  unint64_t v202 = v261;
  *unint64_t v201 = v170;
  v201[1] = v202;
  uint64_t v203 = v259;
  v201[2] = (unint64_t)v260;
  v201[3] = v203;
  unint64_t v204 = v262;
  v201[4] = v159;
  v201[5] = (unint64_t)v204;
  uint64_t v205 = v263;
  v201[6] = v264;
  v201[7] = (unint64_t)v205;
  return (*(uint64_t (**)(uint64_t, void, uint64_t, int *))(*((void *)v188 - 1) + 56LL))( v197,  0LL,  1LL,  v188);
}

      v285._countAndFlagsBits = 0LL;
      v285._object = (void *)0xE000000000000000LL;
      _StringGuts.grow(_:)(22LL);
      swift_bridgeObjectRelease();
      v285._countAndFlagsBits = 0xD000000000000014LL;
      v285._object = (void *)0x80000001839C9190LL;
      LODWORD(v349._countAndFlagsBits) = (_DWORD)v10;
      v260._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v260);
      swift_bridgeObjectRelease();
      LODWORD(v263) = 0;
      uint64_t v262 = 73LL;
      _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
      JUMPOUT(0x1832CD818LL);
    }
  }

  else
  {
    if (LODWORD(v352._object) >= 0x10000)
    {
      LODWORD(v262) = 0;
      v261[1] = 3455LL;
      LOBYTE(v261[0]) = 2;
      _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
      goto LABEL_209;
    }

    __int128 v283 = (__int16)v352._object;
    __int128 v284 = 0;
    if (HIDWORD(v352._countAndFlagsBits) == 1 && HIDWORD(v353) <= 1)
    {
      __int128 v285 = v354;
      uint64_t v286 = v355;
      __int128 v287 = v356;
      __int128 v288 = v357;
      __int128 v289 = v358;
      __int128 v290 = v359;
      uint64_t v291 = v360;
      uint64_t v292 = v361;
      __int128 v293 = v362;
      __int128 v294 = v363;
      __int128 v295 = v364;
      __int128 v296 = v365;
      __int128 v297 = v366;
      __int128 v298 = v367;
      __int128 v299 = v368;
      __int128 v300 = v369;
      unint64_t v301 = v370;
      uint64_t v302 = v371;
      v303 = v372;
      v304 = v373;
      unint64_t v305 = v374;
      v306 = v375;
      uint64_t v307 = v376;
      v308 = v377;
      uint64_t v309 = v378;
      uint64_t v310 = v379;
      __int128 v311 = v380;
      __int128 v312 = v381;
      __int128 v313 = v382;
      __int128 v314 = v383;
      uint64_t v315 = v384;
      uint64_t v316 = v385;
      uint64_t v317 = v386;
      v318 = v387;
      v319 = v388;
      __int128 v320 = v389;
      uint64_t v321 = v390;
      uint64_t v322 = v391;
      uint64_t v323 = v392;
      v324 = v393;
      uint64_t v325 = v394;
      uint64_t v326 = v395;
      v327 = v396;
      v328 = v397;
      v329 = v398;
      v330 = v399;
      v331 = v400;
      v332 = v401;
      v333 = v402;
      v334 = v403;
      v335 = v404;
      v336 = v405;
      v337 = v406;
      v338 = v407;
      v339 = v408;
      v340 = v409;
      v341 = v410;
      v342 = v411;
      v343 = v412;
      v344 = v413;
      v345 = v414;
      v346 = v415;
      v347 = v416;
      v348 = v417;
      uint64_t v55 = String.init(cString:)();
      unint64_t v57 = v56;
      swift_bridgeObjectRelease();
      uint64_t v281 = v55;
      __int128 v282 = v57;
    }
  }

  int64_t v58 = v281;
  uint64_t v59 = v282;
  swift_bridgeObjectRetain();
  getpid();
  if (!_foundation_sandbox_check())
  {
    uint64_t v83 = (_DWORD)v273 != 0;
    swift_bridgeObjectRetain();
    Path = String._deletingLastPathComponent()(v58, v59);
    __int128 v86 = v85;
    swift_bridgeObjectRelease();
    v285._countAndFlagsBits = (uint64_t)v11;
    v285._object = (void *)v13;
    *(void *)&uint64_t v286 = v14;
    BYTE8(v286) = v83;
    uint64_t v87 = v272;
    uint64_t v88 = createTemporaryFile(at:inPath:prefix:options:variant:)( Path,  v86,  (uint64_t)&v285,  (char *)0x736F6E2E7461642ELL,  (void *)0xEB00000000636E79LL,  v271,  0x7265646C6F46LL,  0xE600000000000000LL);
    if (v87)
    {
      swift_bridgeObjectRelease();
LABEL_200:
      swift_bridgeObjectRelease();
      return swift_bridgeObjectRelease();
    }

    countAndFlagsBits_low = v88;
    unint64_t v95 = v90;
    unint64_t v272 = v89;
    __int128 v270 = v13;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    unint64_t v96 = 0LL;
    uint64_t v98 = 0LL;
LABEL_56:
    v277 = countAndFlagsBits_low;
    v351[0] = v96;
    v351[1] = (uint64_t)v98;
    if ((countAndFlagsBits_low & 0x80000000) == 0)
    {
      __int128 v266 = v98;
      unint64_t v99 = a9;
      __int128 v265 = v59;
      if ((v268 & 1) != 0)
      {
        uint64_t v100 = (void *)objc_opt_self();
        unint64_t v101 = objc_msgSend(v100, sel_currentProgress);

        if (v101)
        {
          unint64_t v102 = (uint64_t)v269;
          if (v269) {
            uint64_t v103 = a9 - (void)v269;
          }
          else {
            uint64_t v103 = 0LL;
          }
          uint64_t v104 = objc_msgSend(v100, sel_progressWithTotalUnitCount_, v103);
          unint64_t v99 = a9;
          uint64_t v105 = v102;
          char v106 = v104;
          unint64_t v107 = v270;
          int v108 = v275;
        }

        else
        {
          char v106 = 0LL;
          uint64_t v105 = (uint64_t)v269;
          unint64_t v107 = v270;
          int v108 = v275;
          unint64_t v99 = a9;
        }
      }

      else
      {
        char v106 = 0LL;
        uint64_t v105 = (uint64_t)v269;
        unint64_t v107 = v270;
        int v108 = v275;
      }

      char v132 = v273;
      v285._countAndFlagsBits = (uint64_t)v108;
      v285._object = (void *)v107;
      __int128 v133 = (uint64_t)v274;
      *(void *)&uint64_t v286 = v274;
      BYTE8(v286) = (_DWORD)v273 != 0;
      __int128 v268 = v106;
      write(buffer:toFileDescriptor:path:parentProgress:)(v105, v99, countAndFlagsBits_low, (uint64_t)&v285, v106);
      __int128 v267 = 0LL;
      writeExtendedAttributes(fd:attributes:)(countAndFlagsBits_low, (uint64_t)a10);
      outlined copy of PathOrURL(v108, v107, v133, v132);
      swift_bridgeObjectRetain();
      specialized String.withFileSystemRepresentation<A>(_:)( v272,  v95,  &v281,  v108,  v107,  v133,  v132,  v271,  v351,  v269,  v99,  a10,  &v283,  &v277);
      swift_bridgeObjectRelease();

      close(countAndFlagsBits_low);
      swift_bridgeObjectRelease();
      return swift_bridgeObjectRelease();
    }

    char v109 = swift_bridgeObjectRelease();
    LODWORD(v10) = MEMORY[0x186E1B0E8](v109);
    swift_bridgeObjectRetain();
    cleanupTemporaryDirectory(at:)(v96, (unint64_t)v98);
    swift_bridgeObjectRelease();
    unint64_t v110 = v270;
    char v111 = v275;
    if (!(_DWORD)v273)
    {
      unint64_t v131 = 4LL;
      switch((int)v10)
      {
        case 1:
        case 13:
          unint64_t v131 = 513LL;
          goto LABEL_193;
        case 2:
          goto LABEL_193;
        case 3:
        case 4:
        case 5:
        case 6:
        case 7:
        case 8:
        case 9:
        case 10:
        case 11:
        case 12:
        case 14:
        case 15:
        case 16:
        case 18:
        case 19:
        case 20:
        case 21:
        case 22:
        case 23:
        case 24:
        case 25:
        case 26:
        case 27:
        case 29:
        case 31:
        case 32:
        case 33:
        case 34:
        case 35:
        case 36:
        case 37:
        case 38:
        case 39:
        case 40:
        case 41:
        case 42:
        case 43:
        case 44:
        case 45:
        case 46:
        case 47:
        case 48:
        case 49:
        case 50:
        case 51:
        case 52:
        case 53:
        case 54:
        case 55:
        case 56:
        case 57:
        case 58:
        case 59:
        case 60:
        case 61:
        case 62:
        case 64:
        case 65:
        case 66:
        case 67:
        case 68:
          goto LABEL_150;
        case 17:
          unint64_t v131 = 516LL;
          goto LABEL_193;
        case 28:
        case 69:
          unint64_t v131 = 640LL;
          goto LABEL_193;
        case 30:
          unint64_t v131 = 642LL;
          goto LABEL_193;
        case 63:
          unint64_t v131 = 514LL;
          goto LABEL_193;
        default:
          if ((_DWORD)v10 == 102)
          {
            uint64_t v199 = 0LL;
            unint64_t v131 = 512LL;
          }

          else
          {
LABEL_150:
            unint64_t v131 = 512LL;
LABEL_193:
            if ((POSIXErrorCode.init(rawValue:)() & 0x100000000LL) != 0) {
              goto LABEL_209;
            }
            static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSPOSIXErrorDomain");
            unint64_t v251 = (int)POSIXErrorCode.rawValue.getter();
            uint64_t v252 = objc_allocWithZone((Class)&OBJC_CLASS___NSError);
            __int128 v253 = String._bridgeToObjectiveCImpl()();
            swift_bridgeObjectRelease();
            uint64_t v199 = objc_msgSend(v252, sel_initWithDomain_code_userInfo_, v253, v251, _NativeDictionary.bridged()());
            swift_unknownObjectRelease();
            swift_unknownObjectRelease();
            __int128 v254 = objc_msgSend(v199, sel_domain);
            __int128 v255 = static String._unconditionallyBridgeFromObjectiveC(_:)(v254);
            uint64_t v257 = v256;

            if (v255 == static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSPOSIXErrorDomain")
              && v257 == v258)
            {
              swift_bridgeObjectRelease_n();
              char v111 = v275;
            }

            else
            {
              uint64_t v259 = _stringCompareWithSmolCheck(_:_:expecting:)();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              char v111 = v275;
              if ((v259 & 1) == 0) {
                goto LABEL_207;
              }
            }
          }

          swift_bridgeObjectRetain();
          specialized CocoaError.init<A>(_:path:underlying:variant:source:destination:)( (uint64_t (*)(void))v131,  (uint64_t)v111,  v110,  v199,  0LL,  0LL,  0LL,  0LL,  &v285,  0LL,  0LL,  (void (*)(uint64_t))lazy protocol witness table accessor for type POSIXError and conformance POSIXError,  (uint64_t)&type metadata for POSIXError,  (uint64_t (*)(void *))closure #1 in Sequence<>.contains(_:)specialized partial apply,  (uint64_t (*)(void *))partial apply for specialized closure #1 in Sequence<>.contains(_:),  (void *(*)(void *__return_ptr, void *, uint64_t))_sSy10FoundationE21addingPercentEncoding33_A90579D1FA072CB135F95EF00BA46450LL15forURLComponentSSAA0M3SetACLLV_tFSSSRys5UInt8VGXEfU_SS_TG5TA_0,  (void *(*)(void *__return_ptr, void, void))_sSy10FoundationE21addingPercentEncoding33_A90579D1FA072CB135F95EF00BA46450LL15forURLComponentSSAA0M3SetACLLV_tFSSSRys5UInt8VGXEfU_Ss_TG5TA_0,  (uint64_t (*)(void))partial apply for closure #1 in static UIDNAHookICU.IDNACodedHostUTF16(_:encodeToASCII:),  partial apply for closure #2 in static UIDNAHookICU.IDNACodedHostUTF16(_:encodeToASCII:),  (uint64_t)closure #1 in StringProtocol.removingURLPercentEncoding(excluding:)specialized partial apply,  (uint64_t (*)(void))closure #1 in static UIDNAHookICU.IDNACodedHostUTF16(_:encodeToASCII:)partial apply,  (uint64_t (*)(uint64_t, void))closure #2 in static UIDNAHookICU.IDNACodedHostUTF16(_:encodeToASCII:)partial apply);
          break;
      }

      goto LABEL_199;
    }

    unint64_t v112 = 4LL;
    switch((int)v10)
    {
      case 1:
      case 13:
        unint64_t v112 = 513LL;
        goto LABEL_154;
      case 2:
        goto LABEL_154;
      case 3:
      case 4:
      case 5:
      case 6:
      case 7:
      case 8:
      case 9:
      case 10:
      case 11:
      case 12:
      case 14:
      case 15:
      case 16:
      case 18:
      case 19:
      case 20:
      case 21:
      case 22:
      case 23:
      case 24:
      case 25:
      case 26:
      case 27:
      case 29:
      case 31:
      case 32:
      case 33:
      case 34:
      case 35:
      case 36:
      case 37:
      case 38:
      case 39:
      case 40:
      case 41:
      case 42:
      case 43:
      case 44:
      case 45:
      case 46:
      case 47:
      case 48:
      case 49:
      case 50:
      case 51:
      case 52:
      case 53:
      case 54:
      case 55:
      case 56:
      case 57:
      case 58:
      case 59:
      case 60:
      case 61:
      case 62:
      case 64:
      case 65:
      case 66:
      case 67:
      case 68:
        goto LABEL_149;
      case 17:
        unint64_t v112 = 516LL;
        goto LABEL_154;
      case 28:
      case 69:
        unint64_t v112 = 640LL;
        goto LABEL_154;
      case 30:
        unint64_t v112 = 642LL;
        goto LABEL_154;
      case 63:
        unint64_t v112 = 514LL;
        goto LABEL_154;
      default:
        if ((_DWORD)v10 == 102)
        {
          swift_retain_n();
          char v196 = v111;
          swift_retain_n();
          uint64_t v197 = v196;
          uint64_t v198 = 0LL;
          unint64_t v112 = 512LL;
        }

        else
        {
LABEL_149:
          unint64_t v112 = 512LL;
LABEL_154:
          swift_retain_n();
          uint64_t v200 = v111;
          swift_retain_n();
          unint64_t v201 = v200;
          if ((POSIXErrorCode.init(rawValue:)() & 0x100000000LL) != 0) {
            goto LABEL_209;
          }
          static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSPOSIXErrorDomain");
          unint64_t v202 = (int)POSIXErrorCode.rawValue.getter();
          uint64_t v203 = objc_allocWithZone((Class)&OBJC_CLASS___NSError);
          unint64_t v204 = String._bridgeToObjectiveCImpl()();
          swift_bridgeObjectRelease();
          uint64_t v198 = objc_msgSend(v203, sel_initWithDomain_code_userInfo_, v204, v202, _NativeDictionary.bridged()());
          swift_unknownObjectRelease();
          swift_unknownObjectRelease();
          uint64_t v205 = objc_msgSend(v198, sel_domain);
          v206 = static String._unconditionallyBridgeFromObjectiveC(_:)(v205);
          v208 = v207;

          if (v206 == static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSPOSIXErrorDomain")
            && v208 == v209)
          {
            swift_bridgeObjectRelease_n();
          }

          else
          {
            uint64_t v210 = _stringCompareWithSmolCheck(_:_:expecting:)();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            if ((v210 & 1) == 0)
            {
LABEL_206:
              __break(1u);
LABEL_207:
              __break(1u);
              __break(1u);
              __break(1u);
              __break(1u);
            }
          }
        }

        v211 = v275;
        swift_retain();
        int v212 = v274;
        swift_retain();
        unint64_t v213 = _foundation_swift_url_feature_enabled();
        uint64_t v273 = v112;
        if (!v213)
        {
          uint64_t v225 = objc_msgSend(v211, sel__parameterString);
          if (v225)
          {
            unint64_t v226 = v225;
            unint64_t v227 = static String._unconditionallyBridgeFromObjectiveC(_:)(v225);
            uint64_t v229 = v228;

            if (getEnumTag for _DarwinSearchPathsSequence.Iterator.State()
              && (__int128 v230 = objc_msgSend(v211, sel_path)) != 0)
            {
              uint64_t v231 = v230;
              uint64_t v232 = static String._unconditionallyBridgeFromObjectiveC(_:)(v230);
              v234 = v233;

              v285._countAndFlagsBits = (uint64_t)v232;
              v285._object = v234;
              swift_bridgeObjectRetain();
              v235._countAndFlagsBits = 59LL;
              v235._object = (void *)0xE100000000000000LL;
              String.append(_:)(v235);
              swift_bridgeObjectRelease();
              swift_bridgeObjectRetain();
              v236._countAndFlagsBits = (uint64_t)v227;
              v236._object = v229;
              String.append(_:)(v236);
              swift_bridgeObjectRelease();
            }

            else
            {
              v285._countAndFlagsBits = 59LL;
              v285._object = (void *)0xE100000000000000LL;
              v237._countAndFlagsBits = (uint64_t)v227;
              v237._object = v229;
              String.append(_:)(v237);
            }

            swift_bridgeObjectRelease();
            unint64_t v239 = (uint64_t)v274;
            unint64_t v238 = v275;
            outlined consume of PathOrURL(v275, v110, (uint64_t)v274, 1);
          }

          else
          {
            uint64_t v240 = objc_msgSend(v211, sel_path);
            if (v240)
            {
              uint64_t v241 = v240;
              static String._unconditionallyBridgeFromObjectiveC(_:)(v240);
            }

            unint64_t v239 = (uint64_t)v274;
            unint64_t v238 = v275;
            outlined consume of PathOrURL(v275, v110, (uint64_t)v274, 1);
          }

          goto LABEL_183;
        }

        v285._countAndFlagsBits = (uint64_t)v211;
        v285._object = (void *)v110;
        *(void *)&uint64_t v286 = v212;
        unint64_t v214 = v211;
        swift_retain();
        swift_retain();
        unint64_t v215 = URL.path(percentEncoded:)(1);
        __int128 v285 = v215;
        swift_bridgeObjectRetain();
        if (String.count.getter() > 1
          && (specialized BidirectionalCollection.last.getter(v215._countAndFlagsBits, (unint64_t)v215._object) & 0x1FF) == 0x2F)
        {
          specialized RangeReplaceableCollection<>.popLast()();
          swift_bridgeObjectRelease();
        }

        v349._countAndFlagsBits = Set.init(minimumCapacity:)();
        unint64_t v216 = specialized Set._Variant.insert(_:)(&v276, 0x2FuLL);
        uint64_t v217 = v349._countAndFlagsBits;
        uint64_t v218 = v285;
        int64_t v219 = ((unint64_t)v285._object >> 56) & 0xF;
        if (v219)
        {
          v349 = v285;
          MEMORY[0x1895F8858](v216);
          uint64_t v262 = v220;
          uint64_t v263 = v217;
          swift_bridgeObjectRetain();
          specialized String.UTF8View.withContiguousStorageIfAvailable<A>(_:)( (void *(*)(__int128 *__return_ptr, void *, uint64_t))closure #1 in StringProtocol.removingURLPercentEncoding(excluding:)specialized partial apply,  (uint64_t)v261,  v218._countAndFlagsBits,  (unint64_t)v218._object);
          if (v221 == 1)
          {
            uint64_t v222 = v349;
            swift_bridgeObjectRetain();
            specialized StringProtocol.removingURLPercentEncoding<A>(utf8Buffer:excluding:)( v222._countAndFlagsBits,  (unint64_t)v222._object,  v217);
            unint64_t v224 = v223;
            swift_bridgeObjectRelease();
          }

          else
          {
            unint64_t v224 = v221;
          }

          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          unint64_t v110 = v270;
          if (!v224)
          {
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            uint64_t v245 = (uint64_t)v274;
            unint64_t v244 = v275;
            outlined consume of PathOrURL(v275, v110, (uint64_t)v274, 1);
            outlined consume of PathOrURL(v244, v110, v245, 1);
            goto LABEL_182;
          }
        }

        else
        {
          swift_bridgeObjectRelease();
          unint64_t v110 = v270;
        }

        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v243 = (uint64_t)v274;
        v242 = v275;
        outlined consume of PathOrURL(v275, v110, (uint64_t)v274, 1);
        outlined consume of PathOrURL(v242, v110, v243, 1);
LABEL_182:
        unint64_t v239 = (uint64_t)v274;
        unint64_t v238 = v275;
LABEL_183:
        uint64_t v246 = String._bridgeToObjectiveCImpl()();
        swift_bridgeObjectRelease();
        uint64_t v247 = v211;
        outlined consume of PathOrURL(v238, v110, v239, 1);
        if (v198)
        {
          v285._countAndFlagsBits = (uint64_t)v198;
          lazy protocol witness table accessor for type POSIXError and conformance POSIXError();
          uint64_t v198 = v198;
          if (_getErrorEmbeddedNSError<A>(_:)())
          {
          }

          else
          {
            swift_allocError();
            uint64_t *v250 = v198;
          }

          uint64_t v249 = v273;
          uint64_t v248 = (void *)_swift_stdlib_bridgeErrorToNSError();
        }

        else
        {
          uint64_t v248 = 0LL;
          uint64_t v249 = v273;
        }

         objc_msgSend( (id)objc_opt_self(),  sel__cocoaErrorWithCode_path_url_underlying_variant_source_destination_,  v249,  v246,  v247,  v248,  0,  0,  0);

        swift_unknownObjectRelease();
        outlined consume of PathOrURL(v275, v110, (uint64_t)v274, 1);
LABEL_199:
        swift_willThrow();
        goto LABEL_200;
    }
  }

  URL.init(fileURLWithPath:isDirectory:)(v58, v59, 0, (uint64_t)&v285);
  __int128 v267 = v285._object;
  int64_t v60 = (void *)v285._countAndFlagsBits;
  unint64_t v61 = v286;
  char v62 = objc_msgSend((id)objc_opt_self(), sel_defaultManager);
  v285._countAndFlagsBits = 0LL;
  __int128 v266 = v60;
  unint64_t v63 = objc_msgSend(v62, sel_URLForDirectory_inDomain_appropriateForURL_create_error_, 99, 1, v60, 1, &v285);

  uint64_t v64 = (void *)v285._countAndFlagsBits;
  if (!v63)
  {
    if (v285._countAndFlagsBits)
    {
      uint64_t v91 = (id)v285._countAndFlagsBits;
    }

    else
    {
      if (one-time initialization token for _nilObjCError != -1) {
        swift_once();
      }
      uint64_t v91 = (id)_nilObjCError;
      uint64_t v114 = (id)_nilObjCError;
    }

    swift_willThrow();
    v285._countAndFlagsBits = (uint64_t)v91;
    char v115 = v91;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
    if (swift_dynamicCast())
    {
      int64_t v264 = v61;
      uint64_t v116 = (void *)v349._countAndFlagsBits;
      uint64_t v275 = objc_msgSend((id)v349._countAndFlagsBits, sel_code);
      uint64_t v117 = v116;
      specialized _BridgedStoredNSError.errorUserInfo.getter(v117);
      uint64_t v119 = v118;
      v274 = v117;

      v349._countAndFlagsBits = v119;
      uint64_t v120 = static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSUserStringVariant");
      *((void *)&v286 + 1) = MEMORY[0x189617FA8];
      v285._countAndFlagsBits = 0x7265646C6F46LL;
      v285._object = (void *)0xE600000000000000LL;
      specialized Dictionary.subscript.setter((uint64_t)&v285, (uint64_t)v120, v121);
      static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSCocoaErrorDomain");
      uint64_t v122 = objc_allocWithZone((Class)&OBJC_CLASS___NSError);
      uint64_t v123 = String._bridgeToObjectiveCImpl()();
      swift_bridgeObjectRelease();
      __int128 v124 = objc_msgSend(v122, sel_initWithDomain_code_userInfo_, v123, v275, _NativeDictionary.bridged()());
      swift_unknownObjectRelease();
      swift_unknownObjectRelease();
      char v125 = objc_msgSend(v124, sel_domain);
      uint64_t v126 = static String._unconditionallyBridgeFromObjectiveC(_:)(v125);
      uint64_t v128 = v127;

      if (v126 == static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSCocoaErrorDomain") && v128 == v129)
      {
        swift_bridgeObjectRelease_n();
      }

      else
      {
        char v130 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if ((v130 & 1) == 0)
        {
          __break(1u);
          __break(1u);
LABEL_204:
          __break(1u);
          goto LABEL_205;
        }
      }

      swift_willThrow();

      swift_release();
      swift_release();

      swift_bridgeObjectRelease();
      return swift_bridgeObjectRelease();
    }

    swift_willThrow();
    swift_bridgeObjectRelease();

    swift_release();
    goto LABEL_77;
  }

  int64_t v264 = v61;
  static URL._unconditionallyBridgeFromObjectiveC(_:)(v63, (uint64_t)&v285);
  uint64_t v65 = v64;

  uint64_t v66 = v14;
  uint64_t v67 = (void *)v285._countAndFlagsBits;
  v349 = v285;
  v350 = v286;
  uint64_t v68 = URL.path(percentEncoded:)(0);
  __int128 v270 = v13;

  swift_release();
  swift_release();
  unint64_t v276 = v68;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v69 = String._lastPathComponent.getter(v58, v59);
  uint64_t v71 = v70;
  __int128 v265 = v59;
  uint64_t v72 = v66;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  uint64_t v73 = String._appendingPathComponent(_:)(v69, v71, v68._countAndFlagsBits, (unint64_t)v68._object);
  uint64_t v74 = v275;
  uint64_t v76 = v75;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease_n();
  uint64_t v77 = v270;
  uint64_t v78 = v273;
  outlined copy of PathOrURL(v74, v270, (uint64_t)v72, v273);
  swift_bridgeObjectRetain();
  uint64_t v79 = v73;
  uint64_t v80 = v272;
  uint64_t v81 = v73;
  uint64_t v82 = v77;
  specialized String.withFileSystemRepresentation<A>(_:)( v79,  v76,  (uint64_t)v271,  v81,  v76,  &v276._countAndFlagsBits,  (uint64_t)v74,  v77,  &v285,  v72,  v78,  0x7265646C6F46LL,  0xE600000000000000LL);
  if (!v80)
  {
    uint64_t v92 = v78;
    countAndFlagsBits_low = LODWORD(v285._countAndFlagsBits);
    unint64_t v272 = (uint64_t)v285._object;
    uint64_t v94 = v82;
    unint64_t v96 = *((void *)&v286 + 1);
    unint64_t v95 = v286;
    uint64_t v97 = v74;
    uint64_t v98 = (void *)v287;
    outlined consume of PathOrURL(v97, v94, (uint64_t)v72, v92);
    uint64_t v59 = v265;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

    swift_release();
    swift_release();
    goto LABEL_56;
  }

  outlined consume of PathOrURL(v74, v77, (uint64_t)v72, v78);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  swift_release();
LABEL_77:
  swift_release();
  return swift_bridgeObjectRelease();
}

      memcpy(v743, v744, 0x108uLL);
      outlined release of AttributedString.Runs((uint64_t)v743);
      if ((v650[2] & 1) == 0)
      {
LABEL_212:
        uint64_t v172 = v652;
        uint64_t v180 = (unint64_t)v675;
        goto LABEL_136;
      }

      v381 = v663[1];
      v1009 = *v663;
      v1010 = v381;
      v1011 = v663[2];
      BigString.startIndex.getter();
      BigString.endIndex.getter();
      BigString.unicodeScalars.getter();
      v382 = v662;
      swift_retain();
      BigString.UnicodeScalarView.subscript.getter();
      outlined release of Locale((uint64_t)&v868);
      outlined release of Locale((uint64_t)&v869);
      v383 = *((_OWORD *)v610 + 1);
      v901[4] = *(_OWORD *)v610;
      v901[5] = v383;
      v384 = *((_OWORD *)v610 + 3);
      v901[6] = *((_OWORD *)v610 + 2);
      v901[7] = v384;
      AttributedString.Runs.init(_:in:)(v382, &v725);
      v385 = v609[5];
      v739 = v609[4];
      v740 = v385;
      v386 = v609[7];
      v741 = v609[6];
      v742 = v386;
      v387 = v609[1];
      v735 = *v609;
      v736 = v387;
      v388 = v609[3];
      v737 = v609[2];
      v738 = v388;
      v627 = (unint64_t)v725;
      v389 = v728;
      uint64_t v97 = v729;
      v390 = (void *)v730;
      v625 = v732;
      v626 = (const void *)v731;
      v624 = v733;
      v391 = (_OWORD *)(v727 >> 10);
      v621 = v734;
      v607 = (_OWORD *)(v731 >> 10);
      v628 = (const void *)v727;
      if (v727 >> 10 == v731 >> 10)
      {
LABEL_211:
        v392 = v740;
        v393 = v653;
        v653[4] = v739;
        v393[5] = v392;
        v394 = v742;
        v393[6] = v741;
        v393[7] = v394;
        v395 = v736;
        *v393 = v735;
        v393[1] = v395;
        v396 = v738;
        v393[2] = v737;
        v393[3] = v396;
        *(void *)&v710 = v627;
        v715 = v628;
        v716 = v389;
        v717 = v97;
        v718 = v390;
        v719 = v626;
        v720 = (uint64_t)v625;
        v721 = (_OWORD *)v624;
        v722 = v621;
        v723 = &outlined read-only object #0 of specialized String.LocalizationValue.resolve<A>(key:options:table:bundle:locale:scope:performLocalization:);
        v724 = MEMORY[0x18961AFE8];
        outlined release of ReversedCollection<AttributedString.Runs.AttributesSlice1<AttributeScopes.FoundationAttributes.InflectionRuleAttribute>>.Iterator((uint64_t)&v710);
        unint64_t v158 = (unint64_t)v671;
        goto LABEL_212;
      }

      v397 = v728;
      v398 = v729;
      v399 = v730;
      v400 = v727;
      v605 = v730;
      v606 = v728;
      v636 = v729;
      while (1)
      {
        v665 = v400;
        v649 = v397;
        v646 = v398;
        v637 = (_OWORD *)v399;
        v634 = (unint64_t)v391;
        v412 = v739;
        v413 = v740;
        v414 = v740;
        v415 = v618;
        *((_OWORD *)v618 + 4) = v739;
        *((_OWORD *)v415 + 5) = v413;
        v416 = v741;
        v417 = v742;
        v418 = v742;
        *((_OWORD *)v415 + 6) = v741;
        *((_OWORD *)v415 + 7) = v417;
        v419 = v735;
        v420 = v736;
        v421 = v736;
        *(_OWORD *)v415 = v735;
        *((_OWORD *)v415 + 1) = v420;
        v422 = v737;
        v423 = v738;
        v424 = v738;
        *((_OWORD *)v415 + 2) = v737;
        *((_OWORD *)v415 + 3) = v423;
        v425 = v619;
        v619[4] = v412;
        v425[5] = v414;
        v425[6] = v416;
        v425[7] = v418;
        *v425 = v419;
        v425[1] = v421;
        v425[2] = v422;
        v425[3] = v424;
        uint64_t v28 = v627;
        v426 = v628;
        v691 = v627;
        v697 = v628;
        v698 = v389;
        v699 = v97;
        v700 = v390;
        v427 = v625;
        v428 = v626;
        v701 = v626;
        v702 = v625;
        v703 = v624;
        v429 = v624;
        v704 = v621;
        v430 = v621;
        v690[0] = v400;
        v690[1] = v397;
        v690[2] = v398;
        v690[3] = v399;
        v431 = v389;
        v432 = v390;
        AttributedString.Runs.subscript.getter(v690, &v705);
        v633 = v706;
        v631 = v705;
        v632 = (uint64_t *)v709;
        v433 = v740;
        v434 = v653;
        v653[4] = v739;
        v434[5] = v433;
        v435 = v742;
        v434[6] = v741;
        v434[7] = v435;
        v436 = v736;
        *v434 = v735;
        v434[1] = v436;
        v437 = v738;
        v434[2] = v737;
        v434[3] = v437;
        *(void *)&v710 = v28;
        v715 = v426;
        v716 = v431;
        v717 = v636;
        v718 = v432;
        v719 = v428;
        v720 = (uint64_t)v427;
        v438 = v429;
        v721 = (_OWORD *)v429;
        v722 = v430;
        v723 = &outlined read-only object #0 of specialized String.LocalizationValue.resolve<A>(key:options:table:bundle:locale:scope:performLocalization:);
        char v111 = (uint64_t *)MEMORY[0x18961AFE8];
        v724 = MEMORY[0x18961AFE8];
        v679 = v28;
        v682 = v426;
        v683 = v431;
        uint64_t v97 = v636;
        v684 = v636;
        v685 = v432;
        v686 = v428;
        v687 = v427;
        v688 = v438;
        v689 = v430;
        v705 = v665;
        v706 = v649;
        v707 = v646;
        v708 = v637;
        swift_retain();
        outlined retain of ReversedCollection<AttributedString.Runs.AttributesSlice1<AttributeScopes.FoundationAttributes.InflectionRuleAttribute>>((uint64_t)&v710);
        AttributedString.Runs._slicedRunBoundary(after:attributeNames:constraints:)( &v705,  (uint64_t)&outlined read-only object #0 of specialized String.LocalizationValue.resolve<A>(key:options:table:bundle:locale:scope:performLocalization:),  (uint64_t)v111,  (uint64_t *)&v691);
        swift_release();
        outlined release of ReversedCollection<AttributedString.Runs.AttributesSlice1<AttributeScopes.FoundationAttributes.InflectionRuleAttribute>>.Iterator((uint64_t)&v710);
        v407 = v691;
        uint64_t v117 = (_OWORD *)(v691 >> 10);
        if (v691 >> 10 < v634) {
          break;
        }
        v411 = *((void *)&v692 + 1);
        v634 = v692;
        v399 = v693;
        v439 = v631;
        if (*(void *)(v631 + 16)
          && (v440 = specialized __RawDictionaryStorage.find<A>(_:)(0xD000000000000012LL, v617), (v441 & 1) != 0))
        {
          outlined init with copy of AttributedString._AttributeValue( *(void *)(v439 + 56) + 72 * v440,  (uint64_t)&v691);
          outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>( (uint64_t)&v691,  (uint64_t)&v679);
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Hashable & Sendable);
          swift_dynamicCast();
          outlined destroy of AttributedString._AttributeValue((uint64_t)&v691);
          v442 = 0;
          LOBYTE(v706) = 0;
          v443 = v705;
        }

        else
        {
          v443 = 0LL;
          v705 = 0LL;
          v442 = 1;
          LOBYTE(v706) = 1;
        }

        swift_release();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v408 = v634;
        if ((v442 & 1) == 0)
        {
          v604 = v443;
          v632 = (uint64_t *)v399;
          v633 = v411;
          v444 = v663[1];
          v998 = *v663;
          v999 = v444;
          v1000 = v663[2];
          v445 = BigString.startIndex.getter();
          v447 = v446;
          v449 = v448;
          v451 = v450;
          v452 = BigString.endIndex.getter();
          v990 = v445;
          v991 = v447;
          v992 = v449;
          v993 = v451;
          v994 = v452;
          v995 = v453;
          v996 = v454;
          v997 = v455;
          BigString.unicodeScalars.getter();
          swift_retain_n();
          BigString.UnicodeScalarView.subscript.getter();
          outlined release of Locale((uint64_t)&v871);
          outlined release of Locale((uint64_t)&v872);
          swift_release();
          v456 = v665 >> 10;
          if (v874 >> 10 < v665 >> 10 || v456 < v873 >> 10 || v615 < v873 >> 10 || v874 >> 10 < v615)
          {
            __break(1u);
LABEL_336:
            __break(1u);
LABEL_337:
            __break(1u);
LABEL_338:
            __break(1u);
LABEL_339:
            __break(1u);
LABEL_340:
            __break(1u);
LABEL_341:
            __break(1u);
          }

          v457 = v663;
          v458 = v663[1];
          v987 = *v663;
          v988 = v458;
          v989 = v663[2];
          BigString.unicodeScalars.getter();
          v631 = BigString.UnicodeScalarView.distance(from:to:)();
          outlined release of Locale((uint64_t)&v875);
          swift_release();
          v459 = v457[1];
          v984 = *v457;
          v985 = v459;
          v986 = v457[2];
          v460 = BigString.startIndex.getter();
          v462 = v461;
          v464 = v463;
          v466 = v465;
          v467 = BigString.endIndex.getter();
          v976 = v460;
          v977 = v462;
          v978 = v464;
          v979 = v466;
          v980 = v467;
          v981 = v468;
          v982 = v469;
          v983 = v470;
          BigString.unicodeScalars.getter();
          swift_retain_n();
          BigString.UnicodeScalarView.subscript.getter();
          outlined release of Locale((uint64_t)&v876);
          outlined release of Locale((uint64_t)&v877);
          swift_release();
          if (v879 >> 10 < (unint64_t)v117
            || (unint64_t)v117 < v878 >> 10
            || v456 < v878 >> 10
            || v879 >> 10 < v456)
          {
            goto LABEL_336;
          }

          v603 = (_OWORD *)(v407 >> 10);
          v471 = v663[1];
          v973 = *v663;
          v974 = v471;
          v975 = v663[2];
          BigString.unicodeScalars.getter();
          v602 = v407;
          v472 = BigString.UnicodeScalarView.distance(from:to:)();
          outlined release of Locale((uint64_t)&v880);
          swift_release();
          v473 = v677;
          v474 = v677[2];
          v970 = v677[1];
          v971 = v474;
          v972 = v677[3];
          v475 = BigString.startIndex.getter();
          v477 = v476;
          v479 = v478;
          v481 = v480;
          v482 = BigString.endIndex.getter();
          v962 = v475;
          v963 = v477;
          v964 = v479;
          v965 = v481;
          v966 = v482;
          v967 = v483;
          v968 = v484;
          v969 = v485;
          BigString.unicodeScalars.getter();
          swift_retain_n();
          BigString.UnicodeScalarView.subscript.getter();
          outlined release of Locale((uint64_t)&v881);
          outlined release of Locale((uint64_t)&v882);
          swift_release();
          v486 = v883 >> 10;
          if (v608 < v883 >> 10) {
            goto LABEL_337;
          }
          v487 = v884 >> 10;
          if (v884 >> 10 < v608) {
            goto LABEL_337;
          }
          v630 = (_OWORD *)v472;
          v488 = v473 + 1;
          v489 = v473[2];
          v959 = v473[1];
          v960 = v489;
          v961 = v473[3];
          BigString.unicodeScalars.getter();
          v490 = BigString.UnicodeScalarView.index(_:offsetBy:)();
          v646 = v491;
          v665 = v492;
          v649 = v493;
          outlined release of Locale((uint64_t)&v885);
          swift_release_n();
          v637 = (_OWORD *)v490;
          v494 = v490 >> 10;
          if (v490 >> 10 < v486 || v487 < v494) {
            goto LABEL_338;
          }
          v495 = v473[2];
          v956 = *v488;
          v957 = v495;
          v958 = v473[3];
          v496 = BigString.startIndex.getter();
          v498 = v497;
          v500 = v499;
          v502 = v501;
          v503 = BigString.endIndex.getter();
          v948 = v496;
          v949 = v498;
          v950 = v500;
          v951 = v502;
          v952 = v503;
          v953 = v504;
          v954 = v505;
          v955 = v506;
          BigString.unicodeScalars.getter();
          swift_retain_n();
          BigString.UnicodeScalarView.subscript.getter();
          outlined release of Locale((uint64_t)&v886);
          outlined release of Locale((uint64_t)&v887);
          swift_release();
          v507 = v888 >> 10;
          if (v494 < v888 >> 10) {
            goto LABEL_339;
          }
          v508 = v889 >> 10;
          if (v889 >> 10 < v494) {
            goto LABEL_339;
          }
          v509 = v473[2];
          v947[3] = *v488;
          v947[4] = v509;
          v631 = (uint64_t)(v473 + 1);
          v947[5] = v473[3];
          BigString.unicodeScalars.getter();
          v510 = BigString.UnicodeScalarView.index(_:offsetBy:)();
          v512 = v511;
          v514 = v513;
          v516 = v515;
          outlined release of Locale((uint64_t)&v890);
          v601 = v473;
          swift_release_n();
          v517 = v510 >> 10;
          if (v510 >> 10 < v507 || v508 < v517) {
            goto LABEL_340;
          }
          v630 = v516;
          if (v517 < v494) {
            goto LABEL_341;
          }
          v518 = v510;
          v519 = v512;
          v520 = (__int128 *)v631;
          v521 = *(_OWORD *)(v631 + 16);
          v947[0] = *(_OWORD *)v631;
          v947[1] = v521;
          v947[2] = *(_OWORD *)(v631 + 32);
          BigString.startIndex.getter();
          BigString.endIndex.getter();
          BigString.utf16.getter();
          outlined retain of Locale((uint64_t)v947);
          v522 = v637;
          v523 = v646;
          v524 = v665;
          v525 = v649;
          v600 = BigString.UTF16View.distance(from:to:)();
          outlined release of Locale((uint64_t)&v891);
          BigString.utf16.getter();
          v599 = BigString.UTF16View.distance(from:to:)();
          outlined release of Locale((uint64_t)v947);
          outlined release of Locale((uint64_t)&v892);
          v526 = v520[1];
          v944 = *v520;
          v945 = v526;
          v946 = v520[2];
          BigString.startIndex.getter();
          BigString.endIndex.getter();
          v933 = v522;
          v934 = v523;
          v935 = v524;
          v936 = v525;
          v937 = v518;
          v938 = v519;
          v939 = v514;
          v940 = v630;
          BigString.unicodeScalars.getter();
          v527 = (unint64_t)v601;
          swift_retain();
          BigString.UnicodeScalarView.subscript.getter();
          outlined release of Locale((uint64_t)&v893);
          outlined release of Locale((uint64_t)&v894);
          v528 = *((_OWORD *)v616 + 1);
          v901[0] = *(_OWORD *)v616;
          v901[1] = v528;
          v529 = *((_OWORD *)v616 + 3);
          v901[2] = *((_OWORD *)v616 + 2);
          v901[3] = v529;
          swift_retain();
          specialized AttributedString.Guts.getUniformValue<A>(in:key:)(v901, (uint64_t)&v691);
          if ((void)v693)
          {
            outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>( (uint64_t)&v691,  (uint64_t)&v679);
            __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Hashable & Sendable);
            swift_dynamicCast();
            outlined destroy of AttributedString._AttributeValue((uint64_t)&v691);
          }

          else
          {
            outlined destroy of Any?( (uint64_t)&v691,  &demangling cache variable for type metadata for AttributedString._AttributeValue?);
            v706 = 0LL;
            v705 = 0LL;
            LODWORD(v707) = 0;
            BYTE4(v707) = -1;
          }

          uint64_t v97 = v636;
          v530 = v604;
          swift_release();
          v531 = BYTE4(v707);
          v532 = v707;
          swift_release();
          v533 = (__int128 *)v631;
          if (v531 <= 0xFEuLL) {
            __asm { BR              X9 }
          }

          v534 = *(_OWORD *)(v631 + 16);
          v941 = *(_OWORD *)v631;
          v942 = v534;
          v943 = *(_OWORD *)(v631 + 32);
          BigString.startIndex.getter();
          BigString.endIndex.getter();
          BigString.unicodeScalars.getter();
          swift_retain();
          BigString.UnicodeScalarView.subscript.getter();
          outlined release of Locale((uint64_t)&v896);
          outlined release of Locale((uint64_t)&v897);
          v535 = v614[1];
          v900[3] = *v614;
          v900[4] = v535;
          v536 = v614[3];
          v900[5] = v614[2];
          v900[6] = v536;
          v537 = *v533;
          v538 = v533[1];
          v932[2] = v533[2];
          v932[1] = v538;
          v932[0] = v537;
          swift_retain();
          outlined retain of Locale((uint64_t)v932);
          BigString.subscript.getter();
          outlined release of Locale((uint64_t)v932);
          outlined release of Locale((uint64_t)v899);
          swift_release();
          v692 = v899[3];
          v693 = v899[4];
          v694 = v899[5];
          v695 = v899[6];
          v691 = v527;
          v696 = 0LL;
          lazy protocol witness table accessor for type AttributedString.CharacterView and conformance AttributedString.CharacterView();
          String.init<A>(_:)();
          v539 = String._bridgeToObjectiveCImpl()();
          swift_bridgeObjectRelease();
          *(void *)&v693 = type metadata accessor for NSMorphologyPronoun( 0LL,  (unint64_t *)&lazy cache variable for type metadata for NSString);
          v691 = v539;
          outlined init with copy of (Hashable & Sendable)?( (uint64_t)&v691,  (uint64_t)&v679,  &demangling cache variable for type metadata for Any?);
          v540 = v681;
          if (v681)
          {
            v401 = __swift_project_boxed_opaque_existential_1(&v679, v681);
            v402 = *(void *)(v540 - 8);
            v403 = MEMORY[0x1895F8858](v401);
            v405 = (char *)&v599 - ((v404 + 15) & 0xFFFFFFFFFFFFFFF0LL);
            (*(void (**)(char *, __n128))(v402 + 16))(v405, v403);
            v406 = _bridgeAnythingToObjectiveC<A>(_:)();
            (*(void (**)(char *, uint64_t))(v402 + 8))(v405, v540);
            __swift_destroy_boxed_opaque_existential_1((uint64_t)&v679);
          }

          else
          {
            v406 = 0LL;
          }

          v407 = v602;
          uint64_t v117 = v603;
          v408 = v634;
          v409 = objc_allocWithZone((Class)&OBJC_CLASS____NSAttributedStringReplacement);
          objc_msgSend( v409,  sel_initWithIndex_specifierRangeInFormatString_replacementRangeInResult_replacementKind_argument_,  v530,  0x7FFFFFFFFFFFFFFFLL,  0x7FFFFFFFFFFFFFFFLL,  v600,  v599,  0,  v406);
          v410 = swift_unknownObjectRelease();
          MEMORY[0x186E1BAC0](v410);
          if (*(void *)((v676 & 0xFFFFFFFFFFFFFF8LL) + 0x10) >= *(void *)((v676 & 0xFFFFFFFFFFFFFF8LL) + 0x18) >> 1) {
            specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
          }
          specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          specialized Array._endMutation()();
          outlined destroy of Any?((uint64_t)&v691, &demangling cache variable for type metadata for Any?);
          v399 = (unint64_t)v632;
          v411 = v633;
        }

        v397 = v408;
        v398 = v411;
        v400 = v407;
        v391 = v117;
        v389 = v606;
        v390 = (void *)v605;
        if (v117 == v607) {
          goto LABEL_211;
        }
      }

      __break(1u);
LABEL_331:
      swift_once();
LABEL_126:
      uint64_t v155 = (uint64_t *)(static String.LocalizationValue.attributedStringsCacheLock + 16);
      uint64_t v156 = (os_unfair_lock_s *)(static String.LocalizationValue.attributedStringsCacheLock + 24);
      swift_retain();
      os_unfair_lock_lock(v156);
      specialized closure #2 in String.LocalizationValue._parseLocalizedMarkdown<A>(_:bundlePreferredLocalization:tableURL:formatConfiguration:scope:appliesSourcePositionAttribute:ignoreCache:)( v155,  (uint64_t)v664,  (uint64_t)v111,  (uint64_t)v117,  v635 & 1,  (char)v671);
      os_unfair_lock_unlock(v156);
      swift_release();
      swift_release_n();
LABEL_127:

      swift_bridgeObjectRelease();
      outlined consume of URL?(v675);
    }

    swift_bridgeObjectRelease();
LABEL_251:
    v541 = v650;
    if ((*((_BYTE *)v650 + 17) & 1) == 0)
    {
      specialized AttributedString.subscript.setter(0LL, 1);
      v541 = v650;
    }

    if (((_BYTE)v541[2] & v635 & 1) == 0)
    {
      swift_release();

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      *v641 = (unint64_t)v677;
      goto LABEL_312;
    }

    v542 = v677;
    v543 = v676;
    v544 = (void *)v541[1];
    v545 = swift_allocObject();
    *(void *)(v545 + 16) = v542;
    v546 = v545 + 16;
    v547 = v542[2];
    v744[0] = v542[1];
    v744[1] = v547;
    v744[2] = v542[3];
    v670 = v542;
    swift_retain_n();
    outlined retain of Locale((uint64_t)v744);
    MEMORY[0x186E1B6D0](v744);
    v548 = objc_allocWithZone((Class)&OBJC_CLASS___NSMutableString);
    v549 = String._bridgeToObjectiveCImpl()();
    swift_bridgeObjectRelease();
    v550 = objc_msgSend(v548, sel_initWithString_, v549);
    swift_unknownObjectRelease();
    v669 = (_OWORD *)v543;
    v668 = v545;
    if (v544)
    {
      v675 = v550;
      v551 = v544[2];
      v552 = MEMORY[0x18961AFE8];
      if (v551)
      {
        v674 = (id)(v545 + 16);
        *(void *)&v710 = MEMORY[0x18961AFE8];
        swift_bridgeObjectRetain();
        specialized ContiguousArray.reserveCapacity(_:)();
        v673 = v544;
        v553 = v544 + 6;
        do
        {
          if (*v553 == 1)
          {
            v554 = objc_allocWithZone((Class)&OBJC_CLASS___NSString);
            v555 = String._bridgeToObjectiveCImpl()();
            swift_bridgeObjectRetain();
            objc_msgSend(v554, sel_initWithString_, v555);
            swift_unknownObjectRelease();
            outlined consume of InflectionConcept();
          }

          else
          {
            swift_bridgeObjectRetain();
            _ContiguousArrayBuffer._asCocoaArray()();
          }

          specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
          specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
          specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          specialized ContiguousArray._endMutation()();
          v553 += 24;
          --v551;
        }

        while (v551);
        v552 = v710;
        swift_bridgeObjectRelease();
        v543 = (uint64_t)v669;
        v545 = v668;
        v546 = (uint64_t)v674;
      }

      v559 = v640;
      v550 = v675;
    }

    else
    {
      v552 = 0LL;
      v559 = v640;
    }

    v560 = swift_getObjectType();
    v675 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v559 + 488))(v560, v559);
    if ((unint64_t)v543 >> 62)
    {
      v562 = v543 & 0xFFFFFFFFFFFFFF8LL;
      if (v543 < 0) {
        v562 = v543;
      }
      v674 = (id)v562;
      swift_bridgeObjectRetain();
      if (!v552) {
        goto LABEL_299;
      }
LABEL_270:
      if ((unint64_t)v552 >> 62)
      {
        if (v552 >= 0) {
          v595 = (void *)(v552 & 0xFFFFFFFFFFFFFF8LL);
        }
        else {
          v595 = (void *)v552;
        }
        v673 = v595;
      }

      else
      {
        type metadata accessor for NSMorphologyPronoun( 0LL,  (unint64_t *)&lazy cache variable for type metadata for NSObject);
        v673 = (uint64_t *)_ContiguousArrayBuffer._asCocoaArray()();
      }
    }

    else
    {
      type metadata accessor for NSMorphologyPronoun( 0LL,  &lazy cache variable for type metadata for _NSAttributedStringReplacement);
      swift_bridgeObjectRetain();
      v674 = (id)_ContiguousArrayBuffer._asCocoaArray()();
      if (v552) {
        goto LABEL_270;
      }
LABEL_299:
      v673 = 0LL;
    }

    v672 = objc_msgSend((id)objc_opt_self(), sel_currentUser);
    v713 = partial apply for closure #3 in AttributedString.inflected(locale:userTermOfAddress:replacements:concepts:preflight:);
    v714 = v545;
    v563 = MEMORY[0x1895F87A8];
    *(void *)&v710 = MEMORY[0x1895F87A8];
    *((void *)&v710 + 1) = 1107296256LL;
    v711 = thunk for @escaping @callee_guaranteed () -> (@unowned Int);
    v712 = &block_descriptor_146;
    v671 = _Block_copy(&v710);
    swift_retain();
    swift_release();
    v564 = swift_allocObject();
    *(void *)(v564 + 16) = partial apply for closure #4 in AttributedString.inflected(locale:userTermOfAddress:replacements:concepts:preflight:);
    *(void *)(v564 + 24) = v545;
    v713 = thunk for @callee_guaranteed (@guaranteed NSAttributedStringKey, @unowned _NSRange, @guaranteed @escaping @callee_guaranteed (@in_guaranteed Any?, @unowned _NSRange, @unowned UnsafeMutablePointer<ObjCBool>) -> ()) -> ()partial apply;
    v714 = v564;
    *(void *)&v710 = v563;
    *((void *)&v710 + 1) = 1107296256LL;
    v711 = thunk for @escaping @callee_guaranteed (@guaranteed NSAttributedStringKey, @unowned _NSRange, @guaranteed @escaping @callee_guaranteed (@in_guaranteed Any?, @unowned _NSRange, @unowned UnsafeMutablePointer<ObjCBool>) -> ()) -> ();
    v712 = &block_descriptor_154;
    v667 = _Block_copy(&v710);
    swift_retain();
    v646 = v564;
    swift_retain();
    swift_release();
    v565 = swift_allocObject();
    *(void *)(v565 + 16) = partial apply for closure #5 in AttributedString.inflected(locale:userTermOfAddress:replacements:concepts:preflight:);
    *(void *)(v565 + 24) = v545;
    v713 = thunk for @callee_guaranteed (@unowned _NSRange, @guaranteed @escaping @callee_guaranteed (@in_guaranteed Any?, @unowned _NSRange, @unowned UnsafeMutablePointer<ObjCBool>) -> ()) -> ()partial apply;
    v714 = v565;
    *(void *)&v710 = v563;
    *((void *)&v710 + 1) = 1107296256LL;
    v711 = thunk for @escaping @callee_guaranteed (@unowned _NSRange, @guaranteed @escaping @callee_guaranteed (@in_guaranteed Any?, @unowned _NSRange, @unowned UnsafeMutablePointer<ObjCBool>) -> ()) -> ();
    v712 = &block_descriptor_162;
    v666 = _Block_copy(&v710);
    swift_retain();
    v649 = v565;
    swift_retain();
    swift_release();
    v566 = swift_allocObject();
    *(void *)(v566 + 16) = v546;
    v567 = swift_allocObject();
    *(void *)(v567 + 16) = closure #6 in AttributedString.inflected(locale:userTermOfAddress:replacements:concepts:preflight:)partial apply;
    *(void *)(v567 + 24) = v566;
    v644 = (void *)v566;
    v713 = thunk for @callee_guaranteed (@unowned _NSRange, @guaranteed @escaping @callee_guaranteed (@in_guaranteed Any?, @unowned _NSRange, @unowned UnsafeMutablePointer<ObjCBool>) -> ()) -> ()partial apply;
    v714 = v567;
    *(void *)&v710 = v563;
    *((void *)&v710 + 1) = 1107296256LL;
    v711 = thunk for @escaping @callee_guaranteed (@unowned _NSRange, @guaranteed @escaping @callee_guaranteed (@guaranteed NSLocalizedNumberFormatRule, @unowned _NSRange, @unowned UnsafeMutablePointer<ObjCBool>) -> ()) -> ();
    v712 = &block_descriptor_173;
    v665 = (unint64_t)_Block_copy(&v710);
    v650 = (void *)v567;
    swift_retain();
    swift_release();
    v568 = swift_allocObject();
    *(void *)(v568 + 16) = v546;
    v569 = swift_allocObject();
    *(void *)(v569 + 16) = closure #7 in AttributedString.inflected(locale:userTermOfAddress:replacements:concepts:preflight:)partial apply;
    *(void *)(v569 + 24) = v568;
    v642 = (_OWORD *)v568;
    v713 = thunk for @callee_guaranteed (@guaranteed NSAttributedStringKey, @unowned _NSRange) -> (@out Any?)partial apply;
    v714 = v569;
    *(void *)&v710 = v563;
    *((void *)&v710 + 1) = 1107296256LL;
    v711 = thunk for @escaping @callee_guaranteed (@guaranteed NSAttributedStringKey, @unowned _NSRange) -> ();
    v712 = &block_descriptor_184;
    v664 = _Block_copy(&v710);
    v651 = (__int128 *)v569;
    swift_retain();
    swift_release();
    v570 = swift_allocObject();
    *(void *)(v570 + 16) = v546;
    v571 = swift_allocObject();
    *(void *)(v571 + 16) = closure #8 in AttributedString.inflected(locale:userTermOfAddress:replacements:concepts:preflight:)partial apply;
    *(void *)(v571 + 24) = v570;
    v640 = v570;
    v713 = thunk for @callee_guaranteed (@unowned _NSRange) -> (@unowned Bool)partial apply;
    v714 = v571;
    *(void *)&v710 = v563;
    *((void *)&v710 + 1) = 1107296256LL;
    v711 = thunk for @escaping @callee_guaranteed (@unowned Int, @unowned UnsafeMutablePointer<ObjCBool>) -> (@unowned Bool);
    v712 = &block_descriptor_195;
    v663 = _Block_copy(&v710);
    v652 = v571;
    swift_retain();
    swift_release();
    v572 = swift_allocObject();
    *(void *)(v572 + 16) = v546;
    v573 = swift_allocObject();
    *(void *)(v573 + 16) = closure #9 in AttributedString.inflected(locale:userTermOfAddress:replacements:concepts:preflight:)partial apply;
    *(void *)(v573 + 24) = v572;
    v639 = v572;
    v713 = thunk for @callee_guaranteed (@guaranteed NSAttributedStringKey, @unowned _NSRange) -> (@out Any?)partial apply;
    v714 = v573;
    *(void *)&v710 = v563;
    *((void *)&v710 + 1) = 1107296256LL;
    v711 = thunk for @escaping @callee_guaranteed (@guaranteed NSAttributedStringKey, @unowned _NSRange) -> (@out Any?);
    v712 = &block_descriptor_206;
    v661 = (uint64_t *)_Block_copy(&v710);
    v653 = (__int128 *)v573;
    swift_retain();
    swift_release();
    v574 = swift_allocObject();
    *(void *)(v574 + 16) = v546;
    v575 = swift_allocObject();
    *(void *)(v575 + 16) = closure #10 in AttributedString.inflected(locale:userTermOfAddress:replacements:concepts:preflight:)partial apply;
    *(void *)(v575 + 24) = v574;
    v638 = v574;
    v713 = thunk for @callee_guaranteed (@unowned _NSRange) -> (@owned String)partial apply;
    v714 = v575;
    *(void *)&v710 = v563;
    *((void *)&v710 + 1) = 1107296256LL;
    v711 = thunk for @escaping @callee_guaranteed (@unowned _NSRange) -> (@owned String);
    v712 = &block_descriptor_217;
    v660 = (__int128 *)_Block_copy(&v710);
    *(void *)&v654 = v575;
    swift_retain();
    swift_release();
    v576 = swift_allocObject();
    *(void *)(v576 + 16) = v550;
    v577 = swift_allocObject();
    *(void *)(v577 + 16) = closure #11 in AttributedString.inflected(locale:userTermOfAddress:replacements:concepts:preflight:)partial apply;
    *(void *)(v577 + 24) = v576;
    v637 = (_OWORD *)v576;
    v713 = thunk for @callee_guaranteed (@unowned _NSRange, @guaranteed @escaping @callee_guaranteed (@in_guaranteed Any?, @unowned _NSRange, @unowned UnsafeMutablePointer<ObjCBool>) -> ()) -> ()partial apply;
    v714 = v577;
    *(void *)&v710 = v563;
    *((void *)&v710 + 1) = 1107296256LL;
    v711 = thunk for @escaping @callee_guaranteed (@unowned _NSRange, @guaranteed @escaping @callee_guaranteed (@guaranteed String?, @unowned _NSRange, @unowned UnsafeMutablePointer<ObjCBool>) -> ()) -> ();
    v712 = &block_descriptor_228;
    v578 = _Block_copy(&v710);
    v579 = v550;
    *((void *)&v654 + 1) = v577;
    swift_retain();
    swift_release();
    v580 = swift_allocObject();
    *(void *)(v580 + 16) = v546;
    *(void *)(v580 + 24) = v579;
    v581 = swift_allocObject();
    *(void *)(v581 + 16) = closure #12 in AttributedString.inflected(locale:userTermOfAddress:replacements:concepts:preflight:)partial apply;
    *(void *)(v581 + 24) = v580;
    v636 = v580;
    v713 = thunk for @callee_guaranteed (@guaranteed NSAttributedStringKey, @unowned _NSRange) -> (@out Any?)partial apply;
    v714 = v581;
    *(void *)&v710 = v563;
    *((void *)&v710 + 1) = 1107296256LL;
    v711 = thunk for @escaping @callee_guaranteed (@unowned _NSRange, @in_guaranteed Any) -> ();
    v712 = &block_descriptor_239;
    v582 = _Block_copy(&v710);
    v657 = v582;
    v659 = v579;
    v655 = v581;
    swift_retain();
    swift_release();
    v713 = (uint64_t (*)())destructiveProjectEnumData for PredicateCodableError;
    v714 = 0LL;
    *(void *)&v710 = v563;
    *((void *)&v710 + 1) = 1107296256LL;
    v711 = thunk for @escaping @callee_guaranteed (@unowned _NSRange, @guaranteed NSAttributedStringKey, @in_guaranteed Any) -> ();
    v712 = &block_descriptor_242;
    v583 = _Block_copy(&v710);
    v656 = v583;
    swift_release();
    v584 = swift_allocObject();
    *(void *)(v584 + 16) = v670;
    *(void *)(v584 + 24) = v543;
    v585 = swift_allocObject();
    *(void *)(v585 + 16) = closure #14 in AttributedString.inflected(locale:userTermOfAddress:replacements:concepts:preflight:)partial apply;
    *(void *)(v585 + 24) = v584;
    v635 = v584;
    v713 = thunk for @callee_guaranteed (@in_guaranteed Any) -> (@out Any?)partial apply;
    v714 = v585;
    *(void *)&v710 = v563;
    *((void *)&v710 + 1) = 1107296256LL;
    v711 = thunk for @escaping @callee_guaranteed (@in_guaranteed Any) -> (@out Any?);
    v712 = &block_descriptor_253;
    v586 = _Block_copy(&v710);
    v658 = v586;
    swift_retain();
    swift_bridgeObjectRetain();
    swift_retain();
    swift_release();
    v597 = (uint64_t)v583;
    v598 = (uint64_t)v586;
    v596 = (uint64_t)v582;
    uint64_t v28 = (unint64_t)v660;
    v587 = v661;
    int64_t v58 = v663;
    v588 = v664;
    v589 = (const void *)v665;
    uint64_t v67 = (uint64_t)v667;
    v590 = v666;
    _NSInflect( (uint64_t)v675,  (uint64_t)v674,  (uint64_t)v673,  (uint64_t)v672,  (uint64_t)v671,  0,  (uint64_t)v667,  (uint64_t)v666,  v665,  (uint64_t)v664,  (uint64_t)v663,  (uint64_t)v661,  (uint64_t)v660,  (uint64_t)v578,  v596,  v597,  v598);

    _Block_release(v656);
    _Block_release(v657);
    _Block_release(v578);
    _Block_release((const void *)v28);
    _Block_release(v587);
    _Block_release(v58);
    _Block_release(v588);
    _Block_release(v589);
    _Block_release(v590);
    _Block_release((const void *)v67);
    _Block_release(v671);

    swift_unknownObjectRelease();
    _Block_release(v658);
    LOBYTE(v587) = swift_isEscapingClosureAtFileLocation();
    swift_release();
    if ((v587 & 1) != 0)
    {
      __break(1u);
LABEL_315:
      __break(1u);
LABEL_316:
      __break(1u);
LABEL_317:
      __break(1u);
LABEL_318:
      __break(1u);
LABEL_319:
      __break(1u);
LABEL_320:
      __break(1u);
LABEL_321:
      __break(1u);
LABEL_322:
      __break(1u);
      goto LABEL_323;
    }

    if ((swift_isEscapingClosureAtFileLocation() & 1) != 0) {
      goto LABEL_315;
    }
    uint64_t v67 = v655;
    isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
    swift_release();
    if ((isEscapingClosureAtFileLocation & 1) != 0) {
      goto LABEL_316;
    }
    uint64_t v67 = *((void *)&v654 + 1);
    v592 = swift_isEscapingClosureAtFileLocation();
    swift_release();
    if ((v592 & 1) != 0) {
      goto LABEL_317;
    }
    uint64_t v67 = swift_isEscapingClosureAtFileLocation();
    swift_release();
    if ((v67 & 1) != 0) {
      goto LABEL_318;
    }
    uint64_t v67 = swift_isEscapingClosureAtFileLocation();
    swift_release();
    if ((v67 & 1) != 0) {
      goto LABEL_319;
    }
    uint64_t v67 = swift_isEscapingClosureAtFileLocation();
    swift_release();
    if ((v67 & 1) != 0) {
      goto LABEL_320;
    }
    uint64_t v67 = swift_isEscapingClosureAtFileLocation();
    swift_release();
    if ((v67 & 1) != 0) {
      goto LABEL_321;
    }
    uint64_t v67 = swift_isEscapingClosureAtFileLocation();
    swift_release();
    if ((v67 & 1) != 0) {
      goto LABEL_322;
    }
    uint64_t v67 = swift_isEscapingClosureAtFileLocation();
    swift_release();
    if ((v67 & 1) == 0) {
      break;
    }
LABEL_323:
    __break(1u);
LABEL_324:
    __break(1u);
LABEL_325:
    swift_once();
LABEL_55:
    v669 = v58;
    uint64_t v68 = (void *)static NSAttributedStringKey.formatSpecifierConfiguration;
    *((void *)&v744[1] + 1) = type metadata accessor for NSMorphologyPronoun( 0LL,  &lazy cache variable for type metadata for NSDictionary);
    *(void *)&v744[0] = v67;
    specialized Dictionary.subscript.setter((uint64_t)v744, v68);
  }

  uint64_t v67 = v646;
  v593 = swift_isEscapingClosureAtFileLocation();
  swift_release();
  if ((v593 & 1) != 0) {
    goto LABEL_324;
  }
  v594 = *(void *)(v668 + 16);
  swift_retain();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release_n();
  *v641 = v594;
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease();
  swift_release();
LABEL_312:

LABEL_313:
}

                          uint64_t v139 = (v148 - 1) & v148;
                          v142 = __clz(__rbit64(v148)) + (v136 << 6);
                        }

                        int v143 = 16 * v142;
                        unint64_t v144 = (void *)(*(void *)(v5 + 48) + v143);
                        unint64_t v145 = v144[1];
                        uint64_t v146 = (void *)(*(void *)(v21 + 48) + v143);
                        uint64_t *v146 = *v144;
                        v146[1] = v145;
                        swift_bridgeObjectRetain();
                      }
                    }

            uint64_t v79 = v47 - a4 + v61;
LABEL_238:
            lazy protocol witness table accessor for type JSONError and conformance JSONError();
            swift_allocError();
            *(_OWORD *)uint64_t v42 = xmmword_1837301C0;
            *(void *)(v42 + 16) = v9;
            *(void *)(v42 + 24) = a5;
            *(void *)(v42 + 32) = a3;
            *(void *)(v42 + 40) = v79;
            uint64_t v43 = 1;
            goto LABEL_45;
          }

          LODWORD(v9) = *(unsigned __int8 *)(v47 + v61);
          if (__OFADD__(v58 + v61, 1LL)) {
            goto LABEL_144;
          }
          ++v61;
          if (v47 + v61 >= v21) {
            goto LABEL_145;
          }
        }

        unint64_t v63 = v58 + v61;
        switch(*(_BYTE *)(v47 + v61))
        {
          case '+':
          case '-':
            if (v63 != 0 || (v57 & 1) == 0) {
              goto LABEL_140;
            }
            int64_t v58 = 0LL;
            unint64_t v57 = 0;
            uint64_t v59 = 0;
            int64_t v60 = 0;
            v47 += v61 + 1;
            if (v47 >= v21) {
              goto LABEL_242;
            }
            continue;
          case ',':
          case '/':
          case '0':
          case '1':
          case '2':
          case '3':
          case '4':
          case '5':
          case '6':
          case '7':
          case '8':
          case '9':
          case ':':
          case ';':
          case '<':
          case '=':
          case '>':
          case '?':
          case '@':
          case 'A':
          case 'B':
          case 'C':
          case 'D':
            goto LABEL_140;
          case '.':
            if (v63 < 1 || (v60 & 1) == 0)
            {
              unint64_t v95 = v47 + v61;
              if (v47 + v61 < a4) {
                goto LABEL_268;
              }
              unint64_t v96 = a4 + a5;
              if (a4 + a5 < v95) {
                goto LABEL_268;
              }
              if (v96 >= v47 + v61 + 1) {
                unint64_t v96 = v47 + v61 + 1;
              }
              if (v96 <= a4)
              {
                a3 = 0LL;
                a5 = 1LL;
              }

              else
              {
                uint64_t v97 = a5 + a4;
                a5 = 1LL;
                uint64_t v98 = a4;
                do
                {
                  unint64_t v99 = 0LL;
                  uint64_t v100 = 0LL;
                  unint64_t v101 = v97 - v98;
                  while (1)
                  {
                    unint64_t v102 = *(unsigned __int8 *)(v98 + v100);
                    if (v102 == 10)
                    {
                      uint64_t v75 = __OFADD__(a5++, 1LL);
                      if (v75) {
                        goto LABEL_273;
                      }
                      v98 += v100 + 1;
                      goto LABEL_206;
                    }

                    if (v102 == 13) {
                      break;
                    }
                    a3 = v100 + 1;
                    if (__OFADD__(v100, 1LL)) {
                      goto LABEL_252;
                    }
                    ++v100;
                    --v99;
                    if (v98 + v100 >= v96) {
                      goto LABEL_237;
                    }
                  }

                  uint64_t v103 = v98 + v100;
                  if (v95 >= v98 + v100 + 1)
                  {
                    if (*(_BYTE *)(v103 + 1) == 10) {
                      uint64_t v103 = v98 + v100 + 1;
                    }
                  }

                  uint64_t v75 = __OFADD__(a5++, 1LL);
                  if (v75) {
                    goto LABEL_274;
                  }
                  uint64_t v98 = v103 + 1;
LABEL_206:
                  ;
                }

                while (v98 < v96);
                a3 = 0LL;
              }

        __int128 v124 = (char *)_StringObject.sharedUTF8.getter();
      }

double AttributedString.Runs.subscript.getter@<D0>( uint64_t a1@<X4>, uint64_t a2@<X5>, uint64_t a3@<X6>, uint64_t a4@<X8>, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  __int128 v13 = *(_OWORD *)(v8 + 176);
  v20[10] = *(_OWORD *)(v8 + 160);
  v20[11] = v13;
  uint64_t v21 = *(void *)(v8 + 192);
  __int128 v14 = *(_OWORD *)(v8 + 112);
  v20[6] = *(_OWORD *)(v8 + 96);
  v20[7] = v14;
  __int128 v15 = *(_OWORD *)(v8 + 144);
  v20[8] = *(_OWORD *)(v8 + 128);
  v20[9] = v15;
  __int128 v16 = *(_OWORD *)(v8 + 48);
  _OWORD v20[2] = *(_OWORD *)(v8 + 32);
  v20[3] = v16;
  __int128 v17 = *(_OWORD *)(v8 + 80);
  v20[4] = *(_OWORD *)(v8 + 64);
  v20[5] = v17;
  __int128 v18 = *(_OWORD *)(v8 + 16);
  v20[0] = *(_OWORD *)v8;
  v20[1] = v18;
  outlined retain of AttributedString.Runs((uint64_t)v20);
  *(void *)&double result = AttributedString.Runs.AttributesSlice4.init(runs:)(v8, a1, a2, a3, a5, a6, a7, a4, a8).n128_u64[0];
  return result;
}

uint64_t AttributedString.Runs.AttributesSlice4.Iterator.next()@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  unint64_t v4 = *(void *)(v2 + 216);
  unint64_t v5 = v4 >> 10;
  unint64_t v265 = *(void *)(v2 + 168);
  if (v4 >> 10 == v265 >> 10)
  {
    swift_getAssociatedTypeWitness();
    uint64_t v305 = type metadata accessor for Optional();
    swift_getAssociatedTypeWitness();
    *(void *)&__int128 v306 = type metadata accessor for Optional();
    swift_getAssociatedTypeWitness();
    *((void *)&v306 + 1) = type metadata accessor for Optional();
    swift_getAssociatedTypeWitness();
    *(void *)&__int128 v307 = type metadata accessor for Optional();
    *((void *)&v307 + 1) = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Range<AttributedString.Index>);
    uint64_t TupleTypeMetadata = swift_getTupleTypeMetadata();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(TupleTypeMetadata - 8) + 56LL))( a2,  1LL,  1LL,  TupleTypeMetadata);
  }

  uint64_t v250 = (void *)result;
  uint64_t v7 = *(void *)v2;
  __int128 v8 = *(_OWORD *)(v2 + 24);
  __int128 v324 = *(_OWORD *)(v2 + 8);
  __int128 v325 = v8;
  __int128 v9 = *(_OWORD *)(v2 + 56);
  __int128 v326 = *(_OWORD *)(v2 + 40);
  __int128 v327 = v9;
  if (v5 >= v265 >> 10) {
    goto LABEL_277;
  }
  unint64_t v10 = (void *)(*(void *)(v2 + 136) >> 10);
  unint64_t v271 = *(void *)(v2 + 136);
  unint64_t v11 = *(void *)(v7 + 64);
  int64_t v12 = *(void *)(v7 + 80);
  int64_t v13 = v4 >> 11;
  if (v11) {
    int64_t v14 = *(void *)(v7 + 80);
  }
  else {
    int64_t v14 = 0LL;
  }
  if (v14 < v13) {
    goto LABEL_278;
  }
  __int128 v275 = *(_OWORD *)(v2 + 72);
  __int128 v15 = *(_OWORD *)(v2 + 88);
  __int128 v16 = *(_OWORD *)(v2 + 104);
  __int128 v17 = *(_OWORD *)(v2 + 120);
  uint64_t v270 = *(void *)(v2 + 144);
  uint64_t v277 = *(void *)(v2 + 152);
  unint64_t v276 = *(uint64_t **)(v2 + 160);
  uint64_t v254 = *(void *)(v2 + 176);
  uint64_t v253 = *(void *)(v2 + 184);
  uint64_t v18 = *(void *)(v2 + 192);
  unint64_t v251 = (void *)v2;
  uint64_t v252 = v18;
  uint64_t v263 = *(void *)(v2 + 224);
  uint64_t v262 = *(void *)(v2 + 232);
  uint64_t v19 = *(void *)(v2 + 240);
  unint64_t v260 = v4;
  uint64_t v261 = v19;
  uint64_t v20 = *(void *)(v7 + 72);
  uint64_t v21 = *(void *)(v7 + 88);
  uint64_t v266 = a2;
  uint64_t v272 = v7;
  uint64_t v273 = (char *)(v4 >> 11);
  unint64_t v239 = v265 >> 10;
  unint64_t v240 = v4 >> 10;
  __int128 v267 = v16;
  __int128 v268 = v15;
  __int128 v264 = v17;
  uint64_t v269 = v10;
  v274 = (void *)v21;
  if (!v11 || v13 >= v12 || !*(_WORD *)(v11 + 16))
  {
    swift_unknownObjectRetain_n();
    swift_retain();
    uint64_t v22 = v20;
    unint64_t v34 = specialized Rope._endPath.getter(v11);
    swift_unknownObjectRelease();
    uint64_t v26 = 0LL;
    int64_t v13 = 0LL;
    int64_t v35 = 0LL;
    if (!v11) {
      goto LABEL_32;
    }
    goto LABEL_31;
  }

  uint64_t v22 = v20;
  uint64_t v23 = *(unsigned __int8 *)(v11 + 18);
  if (*(_BYTE *)(v11 + 18))
  {
    swift_unknownObjectRetain_n();
    double result = swift_retain();
    unint64_t v24 = v11;
    while (1)
    {
      uint64_t v27 = *(unsigned __int16 *)(v24 + 16);
      if (!*(_WORD *)(v24 + 16)) {
        break;
      }
      uint64_t v28 = *(void *)(v24 + 40);
      BOOL v29 = __OFSUB__(v13, v28);
      int64_t v30 = v13 - v28;
      if (v29) {
        goto LABEL_269;
      }
      if (__OFADD__(v30, 1LL)) {
        goto LABEL_270;
      }
      if (v30 + 1 < 1)
      {
        uint64_t v27 = 0LL;
        goto LABEL_16;
      }

      if ((_DWORD)v27 == 1)
      {
        int64_t v13 = v30;
        break;
      }

      BOOL v31 = (uint64_t *)(v24 + 64);
      uint64_t v32 = 1LL;
      while (1)
      {
        uint64_t v33 = *v31;
        v31 += 3;
        int64_t v13 = v30 - v33;
        if (__OFSUB__(v30, v33)) {
          goto LABEL_263;
        }
        if (__OFADD__(v13, 1LL))
        {
LABEL_264:
          __break(1u);
LABEL_265:
          __break(1u);
LABEL_266:
          __break(1u);
          goto LABEL_267;
        }

        if (v13 + 1 < 1) {
          break;
        }
        ++v32;
        int64_t v30 = v13;
        if (v27 == v32) {
          goto LABEL_15;
        }
      }

      uint64_t v27 = v32;
      int64_t v13 = v30;
LABEL_16:
      char v25 = (4 * *(_BYTE *)(v24 + 18) + 8) & 0x3C;
      uint64_t v23 = ((-15LL << v25) - 1) & v23 | (v27 << v25);
      uint64_t v26 = *(void *)(v24 + 24 + 24 * v27);
      swift_unknownObjectRetain();
      double result = swift_unknownObjectRelease();
      unint64_t v24 = v26;
      if (!*(_BYTE *)(v26 + 18)) {
        goto LABEL_73;
      }
    }

LABEL_199:
  *(void *)&__int128 v278 = v260;
  *((void *)&v278 + 1) = v263;
  *(void *)&__int128 v279 = v262;
  *((void *)&v279 + 1) = v261;
  *(void *)&__int128 v280 = v159;
  *((void *)&v280 + 1) = v152;
  *(void *)&__int128 v281 = v160;
  *((void *)&v281 + 1) = v169;
  unint64_t v276 = (uint64_t *)v160;
  uint64_t v277 = v169;
  uint64_t v170 = *(void *)(v164 + 16);
  if (!v170)
  {
LABEL_203:
    outlined release of Locale((uint64_t)v340);
    goto LABEL_204;
  }

  uint64_t v171 = 40LL;
  while (!*(void *)(v164 + v171))
  {
    v171 += 16LL;
    if (!--v170) {
      goto LABEL_203;
    }
  }

  *(void *)&__int128 v275 = v152;
  swift_bridgeObjectRetain();
  uint64_t v220 = (unint64_t *)(v164 + 40);
  uint64_t v221 = (char *)MEMORY[0x18961AFE8];
  do
  {
    unint64_t v222 = *v220;
    if (*v220)
    {
      uint64_t v223 = *(v220 - 1);
      if ((v222 & 0x2000000000000000LL) != 0 ? HIBYTE(v222) & 0xF : v223 & 0xFFFFFFFFFFFFLL)
      {
        if ((v222 & 0x1000000000000000LL) != 0)
        {
          int v225 = _StringGuts.foreignErrorCorrectedScalar(startingAt:)();
        }

        else
        {
          if ((v222 & 0x2000000000000000LL) != 0)
          {
            unint64_t v285 = *(v220 - 1);
            uint64_t v286 = v222 & 0xFFFFFFFFFFFFFFLL;
            swift_bridgeObjectRetain();
          }

          else
          {
            if ((v223 & 0x1000000000000000LL) == 0) {
              _StringObject.sharedUTF8.getter();
            }
            swift_bridgeObjectRetain();
          }

          int v225 = _decodeScalar(_:startingAt:)();
          swift_bridgeObjectRelease();
        }

        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v221 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  *((void *)v221 + 2) + 1LL,  1,  v221);
        }
        unint64_t v227 = *((void *)v221 + 2);
        unint64_t v226 = *((void *)v221 + 3);
        if (v227 >= v226 >> 1) {
          uint64_t v221 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (char *)(v226 > 1),  v227 + 1,  1,  v221);
        }
        *((void *)v221 + 2) = v227 + 1;
        *(_DWORD *)&v221[4 * v227 + 32] = v225;
      }
    }

    v220 += 2;
    --v165;
  }

  while (v165);
  swift_bridgeObjectRelease();
  BigString.unicodeScalars.getter();
  BigString.UnicodeScalarView.subscript.getter();
  outlined release of Locale((uint64_t)v337);
  unint64_t v228 = BigSubstring.UnicodeScalarView._findFirstScalarBoundary(for:)((uint64_t)v221);
  uint64_t v230 = v229;
  uint64_t v232 = v231;
  uint64_t v234 = v233;
  swift_bridgeObjectRelease();
  outlined release of Locale((uint64_t)&v285);
  outlined release of Locale((uint64_t)v340);
  swift_release();
  double result = outlined release of ReversedCollection<AttributedString.Runs.AttributesSlice1<AttributeScopes.FoundationAttributes.InflectionRuleAttribute>>.Iterator((uint64_t)&v305);
  uint64_t v173 = v250;
  uint64_t v172 = v251;
  uint64_t v174 = v248;
  uint64_t v152 = v275;
  uint64_t v175 = v277;
  if (v234 != 2)
  {
    if (v158 > v228 >> 10)
    {
LABEL_307:
      __break(1u);
      return result;
    }

    unint64_t v159 = v228;
    uint64_t v152 = v230;
    unint64_t v276 = (uint64_t *)v232;
    uint64_t v175 = v234;
  }

          unint64_t v92 = (4 * *(_BYTE *)(v91 + 18) + 8) & 0x3C;
          int64_t v12 = ((-15LL << v92) - 1) & v12 | (v93 << v92);
          int64_t v13 = *(void *)(v91 + 24 + 24 * v93);
          swift_unknownObjectRetain();
          double result = swift_unknownObjectRelease();
          uint64_t v91 = v13;
          if (!*(_BYTE *)(v13 + 18)) {
            goto LABEL_221;
          }
        }
      }

      swift_unknownObjectRetain_n();
      double result = swift_retain_n();
      int64_t v14 = (uint64_t)v6;
      int64_t v13 = v4;
LABEL_221:
      unint64_t v100 = *(unsigned __int16 *)(v13 + 16);
      if (*(_WORD *)(v13 + 16))
      {
        unint64_t v101 = *(void *)(v13 + 24);
        uint64_t v102 = v14 - v101;
        __int128 v8 = v107;
        uint64_t v7 = a3;
        __int128 v9 = v118;
        if (__OFSUB__(v14, v101)) {
          goto LABEL_303;
        }
        if (__OFADD__(v102, 1LL)) {
          goto LABEL_304;
        }
        if (v102 + 1 <= 0)
        {
LABEL_232:
          unint64_t v100 = 0LL;
          goto LABEL_261;
        }

        if ((_DWORD)v100 == 1)
        {
          v14 -= v101;
        }

        else
        {
          char v103 = *(void *)(v13 + 48);
          __int128 v15 = __OFSUB__(v102, v103);
          unint64_t v24 = v102 - v103;
          if (v15) {
            goto LABEL_305;
          }
          if (__OFADD__(v24, 1LL)) {
            goto LABEL_306;
          }
          if (v24 + 1 < 1)
          {
            unint64_t v100 = 1LL;
            int64_t v14 = v102;
            goto LABEL_261;
          }

          if ((_DWORD)v100 != 2)
          {
            unint64_t v104 = (void *)(v13 + 72);
            __int128 v16 = 2LL;
            while (v100 != v16)
            {
              int64_t v14 = v24 - *v104;
              if (__OFSUB__(v24, *v104)) {
                goto LABEL_299;
              }
              if (__OFADD__(v14, 1LL)) {
                goto LABEL_300;
              }
              if (v14 + 1 < 1) {
                goto LABEL_260;
              }
              ++v16;
              v104 += 3;
              unint64_t v24 = v14;
              if (v100 == v16) {
                goto LABEL_228;
              }
            }

            goto LABEL_298;
          }

          int64_t v14 = v24;
        }
      }

      else
      {
        __int128 v8 = v107;
        uint64_t v7 = a3;
        __int128 v9 = v118;
      }

    objc_exception_throw((id)[MEMORY[0x189603F70] exceptionWithName:*MEMORY[0x189603A60] reason:@"launch path not accessible" userInfo:0]);
    goto LABEL_206;
  }

  int64_t v12 = (void *)objc_msgSend( (id)-[objc_class objectForKey:]( (&self->super.super.isa)[v109 / 8],  "objectForKey:",  @"_NSTaskDirectoryPath"),  "stringByStandardizingPath");
  if (v12
    && !-[NSFileManager fileExistsAtPath:]( +[NSFileManager defaultManager](&OBJC_CLASS___NSFileManager, "defaultManager"),  "fileExistsAtPath:",  v12))
  {
    if (!v107)
    {
      objc_exception_throw((id)[MEMORY[0x189603F70] exceptionWithName:*MEMORY[0x189603A60] reason:@"working directory doesn't exist." userInfo:0]);
      goto LABEL_206;
    }

    if (v108)
    {
      char v125 = @"NSFilePath";
      uint64_t v126 = v12;
      unint64_t v10 = +[NSError errorWithDomain:code:userInfo:]( NSError,  "errorWithDomain:code:userInfo:",  @"NSCocoaErrorDomain",  4,  [MEMORY[0x189603F68] dictionaryWithObjects:&v126 forKeys:&v125 count:1]);
      goto LABEL_18;
    }

    goto LABEL_31;
  }

  int64_t v13 = (void *)-[objc_class objectForKey:]( (&self->super.super.isa)[v109 / 8],  "objectForKey:",  @"_NSTaskArgumentArray");
  int64_t v14 = [v13 count];
  if (v14 > 4096)
  {
    uint64_t v88 = +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"too many arguments (%ld) -- limit is 4096",  v14);
    objc_exception_throw((id)[MEMORY[0x189603F70] exceptionWithName:*MEMORY[0x189603A60] reason:v88 userInfo:0]);
    goto LABEL_206;
  }

  unint64_t v101 = (char *)[v9 fileSystemRepresentation];
  uint64_t v96 = v93;
  *(void *)&__int128 v15 = MEMORY[0x1895F8858](v101).n128_u64[0];
  __int128 v17 = (char **)&v93[-((v16 + 31) & 0xFFFFFFFFFFFFFFF0LL)];
  *__int128 v17 = v101;
  unint64_t v100 = v17;
  if (v14 < 1)
  {
    int64_t v14 = 0LL;
  }

  else
  {
    uint64_t v18 = 0LL;
    uint64_t v19 = v17 + 1;
    do
    {
      uint64_t v20 = (void *)objc_msgSend(v13, "objectAtIndex:", v18, v15);
      uint64_t v21 = [v20 isEqual:&stru_189CA6A28];
      uint64_t v22 = "";
      if ((v21 & 1) == 0) {
        uint64_t v22 = (const char *)[v20 fileSystemRepresentation];
      }
      v19[v18++] = (char *)v22;
    }

    while (v14 != v18);
  }

  v100[v14 + 1] = 0LL;
  unint64_t v95 = [v12 fileSystemRepresentation];
  uint64_t v23 = (void *)-[objc_class objectForKey:]( (&self->super.super.isa)[v109 / 8],  "objectForKey:",  @"_NSTaskEnvironmentDictionary");
  unint64_t v24 = v23;
  if (v23)
  {
    if ([v23 count])
    {
      char v25 = [v24 count];
      uint64_t v102 = malloc(8 * v25 + 8);
      uint64_t v26 = [v24 keyEnumerator];
      if (v25 < 1)
      {
        int64_t v30 = 0LL;
      }

      else
      {
        uint64_t v27 = (void *)v26;
        uint64_t v28 = v102;
        char v103 = v25;
        do
        {
          BOOL v29 = [v27 nextObject];
          *v28++ = -[NSString fileSystemRepresentation]( +[NSString stringWithFormat:]( NSString,  "stringWithFormat:",  @"%@=%@",  v29,  [v24 objectForKey:v29]),  "fileSystemRepresentation");
          --v25;
        }

        while (v25);
        int64_t v30 = v103;
      }

      v102[v30] = 0LL;
      unint64_t v97 = 1;
    }

    else
    {
      unint64_t v97 = 0;
      uint64_t v102 = 0LL;
    }
  }

  else
  {
    BOOL v31 = _NSGetEnviron();
    unint64_t v97 = 0;
    uint64_t v102 = *v31;
  }

  char v132 = 0LL;
  memset(v131, 0, sizeof(v131));
  uint64_t v32 = (void *)-[objc_class objectForKey:]( (&self->super.super.isa)[v109 / 8],  "objectForKey:",  @"_NSTaskPreferredArchitectureArray");
  uint64_t v33 = v32;
  if (v32
    && (uint64_t v123 = 0u,
        __int128 v124 = 0u,
        uint64_t v121 = 0u,
        uint64_t v122 = 0u,
        (unint64_t v34 = [v32 countByEnumeratingWithState:&v121 objects:v120 count:16]) != 0))
  {
    int64_t v35 = 0;
    __int128 v36 = *(void *)v122;
    while (2)
    {
      unint64_t v37 = 0LL;
      uint64_t v38 = v35;
      uint64_t v39 = (9 - v35);
      do
      {
        if (*(void *)v122 != v36) {
          objc_enumerationMutation(v33);
        }
        v131[v38 + v37] = [*(id *)(*((void *)&v121 + 1) + 8 * v37) intValue];
        if (v39 == v37)
        {
          unint64_t v40 = 10;
          goto LABEL_55;
        }

        ++v37;
      }

      while (v34 != v37);
      unint64_t v34 = [v33 countByEnumeratingWithState:&v121 objects:v120 count:16];
      int64_t v35 = v38 + v37;
      if (v34) {
        continue;
      }
      break;
    }

    unint64_t v40 = v38 + v37;
  }

  else
  {
    unint64_t v40 = 0;
  }

LABEL_205:
  unint64_t v176 = v172[27];
  if (v159 >> 10 < v176 >> 10) {
    goto LABEL_293;
  }
  uint64_t v273 = (char *)v172[28];
  unint64_t v177 = v172[29];
  uint64_t v270 = v172[30];
  unint64_t v271 = v177;
  v172[27] = v159;
  v172[28] = v152;
  *(void *)&__int128 v275 = v152;
  v172[29] = v276;
  v172[30] = v175;
  uint64_t v277 = v175;
  uint64_t v178 = (*(uint64_t (**)(void, void))(v173[6] + 24LL))(v173[2], v173[6]);
  if (*(void *)(v174 + 16))
  {
    unint64_t v180 = specialized __RawDictionaryStorage.find<A>(_:)(v178, v179);
    uint64_t v181 = v266;
    if ((v182 & 1) != 0)
    {
      outlined init with copy of AttributedString._AttributeValue(*(void *)(v174 + 56) + 72 * v180, (uint64_t)&v300);
    }

    else
    {
      uint64_t v304 = 0LL;
      __int128 v302 = 0u;
      __int128 v303 = 0u;
      __int128 v300 = 0u;
      __int128 v301 = 0u;
    }
  }

  else
  {
    uint64_t v304 = 0LL;
    __int128 v302 = 0u;
    __int128 v303 = 0u;
    __int128 v300 = 0u;
    __int128 v301 = 0u;
    uint64_t v181 = v266;
  }

  swift_bridgeObjectRelease();
  v274 = (void *)v159;
  uint64_t v269 = (void *)v176;
  if (*((void *)&v301 + 1))
  {
    outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>( (uint64_t)&v300,  (uint64_t)v284);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Hashable & Sendable);
    uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
    swift_dynamicCast();
    outlined destroy of AttributedString._AttributeValue((uint64_t)&v300);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 56LL))( v181,  0LL,  1LL,  AssociatedTypeWitness);
  }

  else
  {
    outlined destroy of Any?( (uint64_t)&v300,  &demangling cache variable for type metadata for AttributedString._AttributeValue?);
    uint64_t v184 = swift_getAssociatedTypeWitness();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v184 - 8) + 56LL))(v181, 1LL, 1LL, v184);
  }

  uint64_t v185 = (*(uint64_t (**)(void, void))(v173[7] + 24LL))(v173[3], v173[7]);
  if (*(void *)(v174 + 16) && (unint64_t v187 = specialized __RawDictionaryStorage.find<A>(_:)(v185, v186), (v188 & 1) != 0))
  {
    outlined init with copy of AttributedString._AttributeValue(*(void *)(v174 + 56) + 72 * v187, (uint64_t)&v300);
  }

  else
  {
    uint64_t v304 = 0LL;
    __int128 v302 = 0u;
    __int128 v303 = 0u;
    __int128 v300 = 0u;
    __int128 v301 = 0u;
  }

  swift_bridgeObjectRelease();
  swift_getAssociatedTypeWitness();
  v284[0] = type metadata accessor for Optional();
  swift_getAssociatedTypeWitness();
  v284[1] = type metadata accessor for Optional();
  uint64_t v189 = v250;
  uint64_t v190 = v250[8];
  uint64_t v191 = v250[4];
  swift_getAssociatedTypeWitness();
  v284[2] = type metadata accessor for Optional();
  uint64_t v192 = v189[9];
  uint64_t v193 = v189[5];
  swift_getAssociatedTypeWitness();
  v284[3] = type metadata accessor for Optional();
  v284[4] = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Range<AttributedString.Index>);
  uint64_t v194 = (int *)swift_getTupleTypeMetadata();
  uint64_t v195 = v266 + v194[12];
  if (*((void *)&v301 + 1))
  {
    outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>( (uint64_t)&v300,  (uint64_t)v284);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Hashable & Sendable);
    uint64_t v196 = swift_getAssociatedTypeWitness();
    swift_dynamicCast();
    outlined destroy of AttributedString._AttributeValue((uint64_t)&v300);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v196 - 8) + 56LL))(v195, 0LL, 1LL, v196);
  }

  else
  {
    outlined destroy of Any?( (uint64_t)&v300,  &demangling cache variable for type metadata for AttributedString._AttributeValue?);
    uint64_t v197 = swift_getAssociatedTypeWitness();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v197 - 8) + 56LL))(v195, 1LL, 1LL, v197);
  }

  uint64_t v198 = (*(uint64_t (**)(uint64_t, uint64_t))(v190 + 24))(v191, v190);
  uint64_t v200 = v248;
  if (*(void *)(v248 + 16) && (unint64_t v201 = specialized __RawDictionaryStorage.find<A>(_:)(v198, v199), (v202 & 1) != 0))
  {
    outlined init with copy of AttributedString._AttributeValue(*(void *)(v200 + 56) + 72 * v201, (uint64_t)&v300);
  }

  else
  {
    uint64_t v304 = 0LL;
    __int128 v302 = 0u;
    __int128 v303 = 0u;
    __int128 v300 = 0u;
    __int128 v301 = 0u;
  }

  swift_bridgeObjectRelease();
  uint64_t v203 = v266 + v194[16];
  if (*((void *)&v301 + 1))
  {
    outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>( (uint64_t)&v300,  (uint64_t)v284);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Hashable & Sendable);
    uint64_t v204 = swift_getAssociatedTypeWitness();
    swift_dynamicCast();
    outlined destroy of AttributedString._AttributeValue((uint64_t)&v300);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v204 - 8) + 56LL))(v203, 0LL, 1LL, v204);
  }

  else
  {
    outlined destroy of Any?( (uint64_t)&v300,  &demangling cache variable for type metadata for AttributedString._AttributeValue?);
    uint64_t v205 = swift_getAssociatedTypeWitness();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v205 - 8) + 56LL))(v203, 1LL, 1LL, v205);
  }

  v206 = v269;
  uint64_t v207 = (*(uint64_t (**)(uint64_t, uint64_t))(v192 + 24))(v193, v192);
  if (*(void *)(v200 + 16) && (unint64_t v209 = specialized __RawDictionaryStorage.find<A>(_:)(v207, v208), (v210 & 1) != 0))
  {
    outlined init with copy of AttributedString._AttributeValue(*(void *)(v200 + 56) + 72 * v209, (uint64_t)&v300);
  }

  else
  {
    uint64_t v304 = 0LL;
    __int128 v302 = 0u;
    __int128 v303 = 0u;
    __int128 v300 = 0u;
    __int128 v301 = 0u;
  }

  swift_bridgeObjectRelease();
  uint64_t v211 = v266;
  uint64_t v212 = v266 + v194[20];
  if (*((void *)&v301 + 1))
  {
    outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>( (uint64_t)&v300,  (uint64_t)v284);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Hashable & Sendable);
    uint64_t v213 = swift_getAssociatedTypeWitness();
    uint64_t v211 = v266;
    swift_dynamicCast();
    outlined destroy of AttributedString._AttributeValue((uint64_t)&v300);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v213 - 8) + 56LL))(v212, 0LL, 1LL, v213);
  }

  else
  {
    outlined destroy of Any?( (uint64_t)&v300,  &demangling cache variable for type metadata for AttributedString._AttributeValue?);
    uint64_t v214 = swift_getAssociatedTypeWitness();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v214 - 8) + 56LL))(v212, 1LL, 1LL, v214);
  }

  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  unint64_t v215 = (void *)(v211 + v194[24]);
  unint64_t v216 = v273;
  *unint64_t v215 = v206;
  v215[1] = v216;
  uint64_t v217 = v270;
  v215[2] = v271;
  v215[3] = v217;
  uint64_t v218 = v275;
  v215[4] = v274;
  v215[5] = v218;
  uint64_t v219 = v277;
  v215[6] = v276;
  v215[7] = v219;
  return (*(uint64_t (**)(uint64_t, void, uint64_t, int *))(*((void *)v194 - 1) + 56LL))( v211,  0LL,  1LL,  v194);
}

          __break(1u);
          goto LABEL_206;
        }
      }
    }

    if (v12 <= 0)
    {
      unint64_t v10 = v167;
      uint64_t v7 = v168;
      unint64_t v11 = v171;
      int64_t v13 = v173;
      goto LABEL_59;
    }
  }

  static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSCocoaErrorDomain");
  uint64_t v38 = objc_allocWithZone((Class)&OBJC_CLASS___NSError);
  uint64_t v39 = String._bridgeToObjectiveCImpl()();
  swift_bridgeObjectRelease();
  unint64_t v40 = objc_msgSend(v38, sel_initWithDomain_code_userInfo_, v39, 3072, _NativeDictionary.bridged()());
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  uint64_t v41 = objc_msgSend(v40, sel_domain);
  uint64_t v42 = static String._unconditionallyBridgeFromObjectiveC(_:)(v41);
  uint64_t v44 = v43;

  unint64_t v46 = v42 == static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSCocoaErrorDomain") && v44 == v45;
  if (v46) {
    goto LABEL_86;
  }
  __int128 v47 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v7 = v168;
  if ((v47 & 1) != 0) {
    goto LABEL_87;
  }
  __break(1u);
LABEL_80:
  static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSCocoaErrorDomain");
  unint64_t v48 = objc_allocWithZone((Class)&OBJC_CLASS___NSError);
  uint64_t v49 = String._bridgeToObjectiveCImpl()();
  swift_bridgeObjectRelease();
  uint64_t v50 = objc_msgSend(v48, sel_initWithDomain_code_userInfo_, v49, 3072, _NativeDictionary.bridged()());
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  uint64_t v51 = objc_msgSend(v50, sel_domain);
  unint64_t v52 = static String._unconditionallyBridgeFromObjectiveC(_:)(v51);
  uint64_t v54 = v53;

  if (v52 == static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSCocoaErrorDomain") && v54 == v55)
  {
LABEL_86:
    uint64_t v7 = v168;
    swift_bridgeObjectRelease_n();
    goto LABEL_87;
  }

  uint64_t v57 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v7 = v168;
  if ((v57 & 1) == 0)
  {
    __break(1u);
    goto LABEL_86;
  }

  if ((v171 & 1) == 0)
  {
    LOBYTE(v190) = 4;
    *(double *)uint64_t v193 = v9;
    *(double *)__dst = v13;
    *((void *)&__dst[0] + 1) = v17;
    _s10Foundation18_CalendarGregorianC3add_2to6amount10inTimeZoneAA4DateVAA0B0V9ComponentO_AISiAA0hI0VtAA0cB5ErrorOYKF( (unsigned __int8 *)&v190,  (double *)v193,  v168,  v194);
    if (v15) {
      goto LABEL_213;
    }
    __int128 v15 = 0LL;
    __int128 v9 = v194[0];
  }

  if ((v169 & 1) == 0)
  {
    LOBYTE(v190) = 5;
    *(double *)uint64_t v193 = v9;
    *(double *)__dst = v13;
    *((void *)&__dst[0] + 1) = v17;
    _s10Foundation18_CalendarGregorianC3add_2to6amount10inTimeZoneAA4DateVAA0B0V9ComponentO_AISiAA0hI0VtAA0cB5ErrorOYKF( (unsigned __int8 *)&v190,  (double *)v193,  v166,  v194);
    if (!v15)
    {
      __int128 v15 = 0LL;
      __int128 v9 = v194[0];
      goto LABEL_211;
    }

double AttributedString.Runs.subscript.getter@<D0>( uint64_t a1@<X5>, uint64_t a2@<X6>, uint64_t a3@<X7>, uint64_t a4@<X8>, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  __int128 v16 = *(_OWORD *)(v11 + 176);
  v23[10] = *(_OWORD *)(v11 + 160);
  v23[11] = v16;
  uint64_t v24 = *(void *)(v11 + 192);
  __int128 v17 = *(_OWORD *)(v11 + 112);
  v23[6] = *(_OWORD *)(v11 + 96);
  v23[7] = v17;
  __int128 v18 = *(_OWORD *)(v11 + 144);
  v23[8] = *(_OWORD *)(v11 + 128);
  v23[9] = v18;
  __int128 v19 = *(_OWORD *)(v11 + 48);
  v23[2] = *(_OWORD *)(v11 + 32);
  v23[3] = v19;
  __int128 v20 = *(_OWORD *)(v11 + 80);
  v23[4] = *(_OWORD *)(v11 + 64);
  v23[5] = v20;
  __int128 v21 = *(_OWORD *)(v11 + 16);
  v23[0] = *(_OWORD *)v11;
  v23[1] = v21;
  outlined retain of AttributedString.Runs((uint64_t)v23);
  *(void *)&double result = AttributedString.Runs.AttributesSlice5.init(runs:)(v11, a1, a2, a3, a5, a7, a8, a4, a9, a10, a11).n128_u64[0];
  return result;
}

uint64_t AttributedString.Runs.AttributesSlice5.Iterator.next()@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  unint64_t v4 = *(void *)(v2 + 168);
  unint64_t v289 = *(void *)(v2 + 216);
  unint64_t v5 = v289 >> 10;
  unint64_t v283 = v4;
  unint64_t v6 = v4 >> 10;
  if (v289 >> 10 == v6)
  {
    swift_getAssociatedTypeWitness();
    uint64_t v324 = type metadata accessor for Optional();
    swift_getAssociatedTypeWitness();
    *(void *)&__int128 v325 = type metadata accessor for Optional();
    swift_getAssociatedTypeWitness();
    *((void *)&v325 + 1) = type metadata accessor for Optional();
    swift_getAssociatedTypeWitness();
    *(void *)&__int128 v326 = type metadata accessor for Optional();
    swift_getAssociatedTypeWitness();
    *((void *)&v326 + 1) = type metadata accessor for Optional();
    *(void *)&__int128 v327 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Range<AttributedString.Index>);
    uint64_t TupleTypeMetadata = swift_getTupleTypeMetadata();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(TupleTypeMetadata - 8) + 56LL))( a2,  1LL,  1LL,  TupleTypeMetadata);
  }

  __int128 v267 = (void *)result;
  uint64_t v8 = *(void *)v2;
  __int128 v9 = *(_OWORD *)(v2 + 24);
  __int128 v343 = *(_OWORD *)(v2 + 8);
  __int128 v344 = v9;
  __int128 v10 = *(_OWORD *)(v2 + 56);
  __int128 v345 = *(_OWORD *)(v2 + 40);
  __int128 v346 = v10;
  if (v5 >= v6) {
    goto LABEL_289;
  }
  unint64_t v11 = *(void *)(v2 + 136) >> 10;
  if (v5 < v11) {
    goto LABEL_289;
  }
  uint64_t v291 = *(void **)(v2 + 136);
  unint64_t v12 = *(void *)(v8 + 64);
  int64_t v13 = *(void *)(v8 + 80);
  int64_t v14 = v289 >> 11;
  if (v12) {
    int64_t v15 = *(void *)(v8 + 80);
  }
  else {
    int64_t v15 = 0LL;
  }
  if (v15 < v14) {
    goto LABEL_290;
  }
  __int128 v294 = *(_OWORD *)(v2 + 72);
  __int128 v16 = *(_OWORD *)(v2 + 88);
  __int128 v17 = *(_OWORD *)(v2 + 104);
  __int128 v18 = *(_OWORD *)(v2 + 120);
  uint64_t v19 = *(void *)(v2 + 144);
  __int128 v296 = *(uint64_t **)(v2 + 152);
  unint64_t v295 = *(void *)(v2 + 160);
  unint64_t v271 = *(void **)(v2 + 176);
  unint64_t v270 = *(void *)(v2 + 184);
  uint64_t v20 = *(void *)(v2 + 192);
  __int128 v268 = (void *)v2;
  uint64_t v269 = v20;
  uint64_t v280 = *(void *)(v2 + 224);
  uint64_t v279 = *(void *)(v2 + 232);
  uint64_t v21 = *(void *)(v2 + 240);
  uint64_t v277 = a2;
  uint64_t v278 = v21;
  uint64_t v22 = *(void *)(v8 + 72);
  uint64_t v23 = *(void *)(v8 + 88);
  uint64_t v290 = v8;
  uint64_t v292 = (char *)(v289 >> 11);
  uint64_t v293 = v23;
  unint64_t v258 = v6;
  unint64_t v259 = v289 >> 10;
  __int128 v285 = v17;
  __int128 v286 = v16;
  __int128 v284 = v18;
  unint64_t v287 = v11;
  if (!v12 || v14 >= v13 || !*(_WORD *)(v12 + 16))
  {
    swift_unknownObjectRetain_n();
    swift_retain();
    uint64_t v36 = v22;
    unint64_t v37 = specialized Rope._endPath.getter(v12);
    swift_unknownObjectRelease();
    uint64_t v28 = 0LL;
    int64_t v14 = 0LL;
    int64_t v38 = 0LL;
    if (!v12) {
      goto LABEL_32;
    }
    goto LABEL_31;
  }

  uint64_t v288 = v22;
  uint64_t v24 = v19;
  uint64_t v25 = *(unsigned __int8 *)(v12 + 18);
  if (*(_BYTE *)(v12 + 18))
  {
    swift_unknownObjectRetain_n();
    double result = swift_retain();
    unint64_t v26 = v12;
    while (1)
    {
      uint64_t v29 = *(unsigned __int16 *)(v26 + 16);
      if (!*(_WORD *)(v26 + 16)) {
        break;
      }
      uint64_t v30 = *(void *)(v26 + 40);
      BOOL v31 = __OFSUB__(v14, v30);
      int64_t v32 = v14 - v30;
      if (v31) {
        goto LABEL_281;
      }
      if (__OFADD__(v32, 1LL)) {
        goto LABEL_282;
      }
      if (v32 + 1 < 1)
      {
        uint64_t v29 = 0LL;
        goto LABEL_16;
      }

      if ((_DWORD)v29 == 1)
      {
        int64_t v14 = v32;
        break;
      }

      uint64_t v33 = (uint64_t *)(v26 + 64);
      uint64_t v34 = 1LL;
      while (1)
      {
        uint64_t v35 = *v33;
        v33 += 3;
        int64_t v14 = v32 - v35;
        if (__OFSUB__(v32, v35)) {
          goto LABEL_275;
        }
        if (__OFADD__(v14, 1LL))
        {
LABEL_276:
          __break(1u);
LABEL_277:
          __break(1u);
LABEL_278:
          __break(1u);
          goto LABEL_279;
        }

        if (v14 + 1 < 1) {
          break;
        }
        ++v34;
        int64_t v32 = v14;
        if (v29 == v34) {
          goto LABEL_15;
        }
      }

      uint64_t v29 = v34;
      int64_t v14 = v32;
LABEL_16:
      char v27 = (4 * *(_BYTE *)(v26 + 18) + 8) & 0x3C;
      uint64_t v25 = ((-15LL << v27) - 1) & v25 | (v29 << v27);
      uint64_t v28 = *(void *)(v26 + 24 + 24 * v29);
      swift_unknownObjectRetain();
      double result = swift_unknownObjectRelease();
      unint64_t v26 = v28;
      if (!*(_BYTE *)(v28 + 18)) {
        goto LABEL_73;
      }
    }

__n128 AttributedString.Runs.AttributesSlice1.startIndex.getter@<Q0>(uint64_t a1@<X8>)
{
  __n128 result = *(__n128 *)(v1 + 136);
  __int128 v3 = *(_OWORD *)(v1 + 152);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

__n128 AttributedString.Runs.AttributesSlice1.endIndex.getter@<Q0>(uint64_t a1@<X8>)
{
  __n128 result = *(__n128 *)(v1 + 168);
  __int128 v3 = *(_OWORD *)(v1 + 184);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t AttributedString.Runs.AttributesSlice1.index(after:)(_OWORD *a1, uint64_t a2)
{
  return AttributedString.Runs.AttributesSlice1.index(after:)( a1,  a2,  (void (*)(_OWORD *, uint64_t, uint64_t))AttributedString.Runs._slicedRunBoundary(after:attributeNames:constraints:));
}

uint64_t AttributedString.Runs.AttributesSlice1.index(before:)(_OWORD *a1, uint64_t a2)
{
  return AttributedString.Runs.AttributesSlice1.index(after:)( a1,  a2,  (void (*)(_OWORD *, uint64_t, uint64_t))AttributedString.Runs._slicedRunBoundary(before:attributeNames:constraints:));
}

uint64_t AttributedString.Runs.AttributesSlice1.index(after:)( _OWORD *a1, uint64_t a2, void (*a3)(_OWORD *, uint64_t, uint64_t))
{
  __int128 v5 = *(_OWORD *)(v3 + 144);
  __int128 v6 = *(_OWORD *)(v3 + 176);
  __int128 v32 = *(_OWORD *)(v3 + 160);
  __int128 v33 = v6;
  __int128 v7 = *(_OWORD *)(v3 + 80);
  __int128 v8 = *(_OWORD *)(v3 + 112);
  __int128 v28 = *(_OWORD *)(v3 + 96);
  __int128 v29 = v8;
  __int128 v9 = *(_OWORD *)(v3 + 112);
  __int128 v10 = *(_OWORD *)(v3 + 144);
  __int128 v30 = *(_OWORD *)(v3 + 128);
  __int128 v31 = v10;
  __int128 v11 = *(_OWORD *)(v3 + 16);
  __int128 v12 = *(_OWORD *)(v3 + 48);
  __int128 v24 = *(_OWORD *)(v3 + 32);
  __int128 v25 = v12;
  __int128 v13 = *(_OWORD *)(v3 + 48);
  __int128 v14 = *(_OWORD *)(v3 + 80);
  __int128 v26 = *(_OWORD *)(v3 + 64);
  __int128 v27 = v14;
  __int128 v15 = *(_OWORD *)(v3 + 16);
  v23[0] = *(_OWORD *)v3;
  v23[1] = v15;
  __int128 v16 = *(_OWORD *)(v3 + 176);
  _OWORD v21[12] = v32;
  v21[13] = v16;
  v21[8] = v28;
  v21[9] = v9;
  v21[10] = v30;
  v21[11] = v5;
  v21[4] = v24;
  v21[5] = v13;
  v21[6] = v26;
  v21[7] = v7;
  uint64_t v17 = *(void *)(v3 + 200);
  uint64_t v34 = *(void *)(v3 + 192);
  uint64_t v18 = *(void *)(v3 + 208);
  uint64_t v22 = *(void *)(v3 + 192);
  v21[2] = v23[0];
  v21[3] = v11;
  __int128 v19 = a1[1];
  v21[0] = *a1;
  v21[1] = v19;
  outlined retain of AttributedString.Runs((uint64_t)v23);
  a3(v21, v17, v18);
  return outlined release of AttributedString.Runs((uint64_t)v23);
}

uint64_t AttributedString.Runs.AttributesSlice1.subscript.getter( uint64_t a1, _OWORD *a2, unint64_t *a3, uint64_t a4)
{
  __int128 v8 = *v4;
  __int128 v9 = v4[1];
  __int128 v10 = v4[2];
  v268[3] = v4[3];
  v268[2] = v10;
  __int128 v11 = v4[1];
  __int128 v12 = v4[2];
  __int128 v13 = *v4;
  v268[0] = v8;
  v268[1] = v11;
  __int128 v15 = v4[5];
  __int128 v14 = v4[6];
  __int128 v16 = v14;
  __int128 v272 = v4[7];
  __int128 v271 = v14;
  __int128 v17 = v4[3];
  __int128 v18 = v4[5];
  __int128 v269 = v4[4];
  __int128 v270 = v18;
  __int128 v20 = v4[9];
  __int128 v19 = v4[10];
  __int128 v21 = v19;
  __int128 v276 = v4[11];
  __int128 v275 = v19;
  __int128 v22 = v4[7];
  __int128 v23 = v4[9];
  __int128 v273 = v4[8];
  __int128 v274 = v23;
  __int128 v24 = v4[11];
  __int128 v252 = v21;
  __int128 v253 = v24;
  __int128 v248 = v16;
  __int128 v249 = v22;
  __int128 v250 = v273;
  __int128 v251 = v20;
  __int128 v245 = v12;
  __int128 v246 = v17;
  unint64_t v26 = *a3;
  unint64_t v25 = a3[1];
  unint64_t v28 = a3[2];
  unint64_t v27 = a3[3];
  uint64_t v29 = *((void *)v4 + 25);
  uint64_t v277 = *((void *)v4 + 24);
  uint64_t v30 = *((void *)v4 + 26);
  uint64_t v254 = *((void *)v4 + 24);
  v247[0] = v269;
  v247[1] = v15;
  __int128 v243 = v13;
  __int128 v244 = v9;
  *(void *)&__int128 v233 = v26;
  unint64_t v205 = v25;
  *(void *)&__int128 v206 = v28;
  *((void *)&v233 + 1) = v25;
  *(void *)&__int128 v234 = v28;
  *((void *)&v206 + 1) = v27;
  *((void *)&v234 + 1) = v27;
  outlined retain of AttributedString.Runs((uint64_t)v268);
  uint64_t v212 = v29;
  AttributedString.Runs._slicedRunBoundary(roundingDown:attributeNames:constraints:)( (unint64_t)&v238,  (unint64_t *)&v233,  v29,  v30,  (uint64_t *)&v258);
  __int128 v31 = v258;
  uint64_t v32 = v259;
  uint64_t result = outlined release of AttributedString.Runs((uint64_t)v268);
  if (v26 >> 10 < *((void *)&v273 + 1) >> 10 || v26 >> 10 >= *((void *)&v275 + 1) >> 10) {
    goto LABEL_202;
  }
  uint64_t v34 = *(void *)(v212 + 16);
  if (!v34)
  {
LABEL_203:
    __break(1u);
LABEL_204:
    __break(1u);
    goto LABEL_205;
  }

  uint64_t v208 = v30;
  uint64_t v187 = v32;
  uint64_t v188 = v31;
  uint64_t v35 = *(void *)(*(void *)&v268[0] + 64LL);
  uint64_t v36 = *(void *)(*(void *)&v268[0] + 80LL);
  unint64_t v37 = (__int128 *)(v26 >> 11);
  if (v35) {
    uint64_t v38 = *(void *)(*(void *)&v268[0] + 80LL);
  }
  else {
    uint64_t v38 = 0LL;
  }
  uint64_t v182 = a2;
  unint64_t v183 = *((void *)&v31 + 1);
  uint64_t v221 = *(void *)(*(void *)&v268[0] + 72LL);
  uint64_t v39 = *(void *)(*(void *)&v268[0] + 88LL);
  unint64_t v200 = v26;
  uint64_t v211 = v34;
  uint64_t v209 = *(void *)&v268[0];
  uint64_t v210 = v39;
  uint64_t v186 = a1;
  __int128 v185 = v238;
  __int128 v181 = v239;
  uint64_t v184 = a4;
  unint64_t v196 = v26 >> 10;
  unint64_t v192 = *((void *)&v275 + 1) >> 10;
  unint64_t v193 = *((void *)&v275 + 1);
  uint64_t v190 = *((void *)&v276 + 1);
  uint64_t v191 = v276;
  uint64_t v189 = v277;
  if (v35 && (uint64_t)v37 < v36 && *(_WORD *)(v35 + 16))
  {
    uint64_t v40 = *(unsigned __int8 *)(v35 + 18);
    if (*(_BYTE *)(v35 + 18))
    {
      swift_unknownObjectRetain_n();
      outlined retain of AttributedString.Runs((uint64_t)v268);
      uint64_t result = swift_unknownObjectRetain();
      unint64_t v41 = v26 >> 11;
      uint64_t v42 = v35;
      while (1)
      {
        uint64_t v45 = *(unsigned __int16 *)(v42 + 16);
        if (!*(_WORD *)(v42 + 16)) {
          break;
        }
        uint64_t v46 = *(void *)(v42 + 40);
        BOOL v47 = __OFSUB__(v41, v46);
        unint64_t v48 = v41 - v46;
        if (v47) {
          goto LABEL_196;
        }
        if (__OFADD__(v48, 1LL)) {
          goto LABEL_197;
        }
        if ((uint64_t)(v48 + 1) < 1)
        {
          uint64_t v45 = 0LL;
          goto LABEL_15;
        }

        if ((_DWORD)v45 == 1)
        {
          unint64_t v41 = v48;
          break;
        }

        unint64_t v49 = (uint64_t *)(v42 + 64);
        uint64_t v50 = 1LL;
        while (1)
        {
          uint64_t v51 = *v49;
          v49 += 3;
          unint64_t v41 = v48 - v51;
          if (__OFSUB__(v48, v51)) {
            goto LABEL_193;
          }
          if (__OFADD__(v41, 1LL))
          {
LABEL_194:
            __break(1u);
            goto LABEL_195;
          }

          ++v50;
          unint64_t v48 = v41;
          if (v45 == v50) {
            goto LABEL_14;
          }
        }

        uint64_t v45 = v50;
        unint64_t v41 = v48;
LABEL_15:
        char v43 = (4 * *(_BYTE *)(v42 + 18) + 8) & 0x3C;
        uint64_t v40 = ((-15LL << v43) - 1) & v40 | (v45 << v43);
        uint64_t v44 = *(void *)(v42 + 24 + 24 * v45);
        swift_unknownObjectRetain();
        uint64_t result = swift_unknownObjectRelease();
        uint64_t v42 = v44;
        if (!*(_BYTE *)(v44 + 18)) {
          goto LABEL_32;
        }
      }

LABEL_213:
    __break(1u);
LABEL_214:
    __break(1u);
LABEL_215:
    __break(1u);
LABEL_216:
    __break(1u);
    goto LABEL_217;
  }

  if (v196 <= v168 >> 10)
  {
    unint64_t v136 = v168;
    uint64_t v137 = v170;
    uint64_t v138 = v172;
    uint64_t v139 = v174;
    goto LABEL_154;
  }

            swift_unknownObjectRelease();
            unint64_t v183 = v341;
            swift_unknownObjectRelease();
            uint64_t v184 = v147 & 0xFFFFFFFFFFFFF0FFLL;
            unint64_t v160 = v183;
            uint64_t v159 = v184 | (v162 << 8);
            uint64_t v145 = (uint64_t)v360;
            goto LABEL_173;
          }

          __int128 v20 = v348;
          goto LABEL_211;
        }
      }

      else if (v352 >= 0x800)
      {
LABEL_409:
        __break(1u);
LABEL_410:
        __break(1u);
        goto LABEL_411;
      }

      uint64_t v158 = v47;
      swift_unknownObjectRetain();
      outlined retain of AttributedString.Runs((uint64_t)v434);
      swift_unknownObjectRetain();
      uint64_t v159 = specialized Rope._endPath.getter(v144);
      uint64_t result = swift_unknownObjectRelease();
      unint64_t v160 = 0LL;
      uint64_t v148 = 0LL;
      if (!v144)
      {
        unint64_t v161 = 0LL;
LABEL_215:
        uint64_t v340 = (char *)((char *)v358 - (char *)v148);
        if (__OFSUB__(v358, v148))
        {
LABEL_386:
          __break(1u);
          goto LABEL_387;
        }

        __int128 v185 = v158[1];
        v415[3] = *v158;
        v415[4] = v185;
        v415[5] = v158[2];
        uint64_t result = BigString.utf8.getter();
        if (__OFSUB__(0LL, v148))
        {
LABEL_387:
          __break(1u);
          goto LABEL_388;
        }

        uint64_t v186 = BigString.UTF8View.index(_:offsetBy:)();
        uint64_t v188 = v187;
        uint64_t v312 = v190;
        uint64_t v313 = v189;
        uint64_t result = outlined release of Locale((uint64_t)&v404);
        if (v161 >= v336)
        {
LABEL_388:
          __break(1u);
          goto LABEL_389;
        }

        uint64_t v191 = v346;
        if (v346 != *(void **)(v20 + 88))
        {
LABEL_389:
          __break(1u);
LABEL_390:
          __break(1u);
LABEL_391:
          __break(1u);
          goto LABEL_392;
        }

        v310[1] = v188;
        uint64_t v311 = v186;
        unint64_t v192 = *(void *)(v20 + 64);
        if (v160)
        {
          unint64_t v193 = v160 + 24 * ((v159 >> ((4 * *(_BYTE *)(v160 + 18) + 8) & 0x3C)) & 0xF);
          uint64_t v194 = *(void *)(v193 + 40);
          v359 = *(_BYTE **)(v193 + 32);
          swift_bridgeObjectRetain();
          __int128 v314 = v194;
          uint64_t result = swift_bridgeObjectRetain();
          uint64_t v195 = v191;
        }

        else
        {
          swift_unknownObjectRetain();
          specialized Rope._Node.subscript.getter(v159, v192);
          v359 = (_BYTE *)v196;
          __int128 v314 = v197;
          uint64_t result = swift_unknownObjectRelease();
          unint64_t v192 = *(void *)(v20 + 64);
          uint64_t v195 = *(void **)(v20 + 88);
        }

        uint64_t v198 = v353;
        v351 = v159;
        uint64_t v338 = v161 + 1;
        v360 = v376;
        v368 = (unint64_t)v191;
        v369 = v159;
        unint64_t v358 = (__int128 *)v409;
        __int128 v326 = (uint64_t *)(v347 + 40);
        v370 = v160;
        uint64_t v199 = v339;
LABEL_223:
        if (v191 != v195) {
          goto LABEL_376;
        }
        __int128 v332 = (unint64_t)v195;
        if (v160)
        {
          unint64_t v200 = *(void *)(v160 + 24 * ((v351 >> ((4 * *(_BYTE *)(v160 + 18) + 8) & 0x3C)) & 0xF) + 24);
          swift_unknownObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
        }

        else
        {
          swift_unknownObjectRetain();
          unint64_t v200 = specialized Rope._Node.subscript.getter(v351, v192);
        }

        swift_bridgeObjectRelease();
        uint64_t result = swift_bridgeObjectRelease();
        if (__OFADD__(v340, v200)) {
          goto LABEL_377;
        }
        __int128 v325 = &v340[v200];
        if (v192)
        {
          uint64_t v201 = ((-15LL << ((4 * *(_BYTE *)(v192 + 18) + 8) & 0x3C)) - 1) & (unint64_t)*(unsigned __int8 *)(v192 + 18) | ((unint64_t)*(unsigned __int16 *)(v192 + 16) << ((4 * *(_BYTE *)(v192 + 18) + 8) & 0x3C));
          uint64_t result = swift_unknownObjectRetain();
        }

        else
        {
          uint64_t v201 = 0LL;
        }

        uint64_t v191 = v357;
        if (v351 >= v201) {
          goto LABEL_378;
        }
        uint64_t v202 = v351;
        uint64_t v341 = v160;
        if (v160)
        {
          unint64_t v203 = (4 * *(_BYTE *)(v160 + 18) + 8) & 0x3C;
          uint64_t v204 = ((v351 >> v203) & 0xF) + 1;
          if (v204 < *(unsigned __int16 *)(v160 + 16))
          {
            unint64_t v337 = (v204 << v203) | ((-15LL << v203) - 1) & v351;
            uint64_t result = swift_unknownObjectRelease_n();
LABEL_238:
            uint64_t v209 = v370;
LABEL_239:
            uint64_t v210 = (uint64_t)v359;
            goto LABEL_247;
          }
        }

        unint64_t v205 = *(unsigned __int8 *)(v192 + 18);
        __int128 v206 = (4 * v205 + 8) & 0x3C;
        uint64_t v207 = (v351 >> v206) & 0xF;
        *(void *)&v407 = v207;
        if (v205)
        {
          swift_unknownObjectRetain();
          uint64_t v208 = specialized closure #1 in Rope._Node.formSuccessor(of:)( v192 + 24,  (uint64_t *)&v407,  (uint64_t)&v368,  v192,  v205);
          uint64_t result = swift_unknownObjectRelease();
          unint64_t v160 = v341;
          if ((v208 & 1) != 0)
          {
            uint64_t result = swift_unknownObjectRelease_n();
            unint64_t v337 = v369;
            uint64_t v202 = v351;
            goto LABEL_238;
          }
        }

        else
        {
          uint64_t v211 = v207 + 1;
          if (v207 + 1 < *(unsigned __int16 *)(v192 + 16))
          {
            uint64_t result = swift_unknownObjectRelease_n();
            uint64_t v212 = v211 << v206;
            uint64_t v202 = v351;
            unint64_t v337 = v212 | ((-15LL << v206) - 1) & v351;
            uint64_t v209 = v192;
            unint64_t v160 = v341;
            goto LABEL_239;
          }

          unint64_t v160 = v341;
        }

        if (v192)
        {
          unint64_t v213 = *(unsigned __int8 *)(v192 + 18);
          uint64_t v214 = *(unsigned __int16 *)(v192 + 16);
          uint64_t result = swift_unknownObjectRelease_n();
          uint64_t v215 = (4 * v213 + 8) & 0x3C;
          uint64_t v216 = ((-15LL << v215) - 1) & v213;
          uint64_t v217 = v214 << v215;
          unint64_t v160 = v341;
          unint64_t v337 = v216 | v217;
        }

        else
        {
          unint64_t v337 = 0LL;
        }

        uint64_t v210 = (uint64_t)v359;
        uint64_t v209 = 0LL;
        v368 = v332;
        uint64_t v202 = v351;
LABEL_247:
        if (v338 != v336)
        {
          uint64_t v218 = *(void *)(v20 + 88);
          __int128 v346 = (void *)v368;
          if (v368 != v218)
          {
LABEL_379:
            __break(1u);
LABEL_380:
            __break(1u);
            goto LABEL_381;
          }

          uint64_t v324 = v209;
          if (v209)
          {
            unint64_t v219 = v209 + 24 * ((v337 >> ((4 * *(_BYTE *)(v209 + 18) + 8) & 0x3C)) & 0xF);
            uint64_t v221 = *(__int128 **)(v219 + 32);
            unint64_t v220 = *(void *)(v219 + 40);
            swift_bridgeObjectRetain();
            __int128 v329 = v220;
            swift_bridgeObjectRetain();
          }

          else
          {
            __int128 v222 = *(void *)(v20 + 64);
            swift_unknownObjectRetain();
            specialized Rope._Node.subscript.getter(v337, v222);
            uint64_t v221 = v223;
            __int128 v329 = v224;
            uint64_t v210 = (uint64_t)v359;
            swift_unknownObjectRelease();
          }

          uint64_t result = swift_bridgeObjectRetain();
          __int128 v225 = 0LL;
          uint64_t v226 = v326;
          v356 = v221;
          while (1)
          {
            unint64_t v229 = v225 + 1;
            if (__OFADD__(v225, 1LL))
            {
              __break(1u);
LABEL_365:
              __break(1u);
              goto LABEL_366;
            }

            __int128 v231 = *(v226 - 1);
            unint64_t v230 = *v226;
            if (*(void *)(v210 + 16))
            {
              swift_bridgeObjectRetain_n();
              uint64_t v232 = specialized __RawDictionaryStorage.find<A>(_:)(v231, v230);
              if ((v233 & 1) != 0)
              {
                outlined init with copy of AttributedString._AttributeValue( *(void *)(v210 + 56) + 72 * v232,  (uint64_t)&v383);
              }

              else
              {
                v387 = 0LL;
                v385 = 0u;
                v386 = 0u;
                v383 = 0u;
                v384 = 0u;
              }

              swift_bridgeObjectRelease();
              if (!*((void *)v221 + 2))
              {
LABEL_262:
                v382 = 0LL;
                v380 = 0u;
                v381 = 0u;
                v378 = 0u;
                v379 = 0u;
                goto LABEL_269;
              }
            }

            else
            {
              v387 = 0LL;
              v385 = 0u;
              v386 = 0u;
              v383 = 0u;
              v384 = 0u;
              swift_bridgeObjectRetain();
              if (!*((void *)v221 + 2)) {
                goto LABEL_262;
              }
            }

            swift_bridgeObjectRetain();
            __int128 v234 = specialized __RawDictionaryStorage.find<A>(_:)(v231, v230);
            if ((v235 & 1) != 0)
            {
              outlined init with copy of AttributedString._AttributeValue( *((void *)v221 + 7) + 72 * v234,  (uint64_t)&v378);
            }

            else
            {
              v382 = 0LL;
              v380 = 0u;
              v381 = 0u;
              v378 = 0u;
              v379 = 0u;
            }

            swift_bridgeObjectRelease();
            uint64_t v210 = (uint64_t)v359;
LABEL_269:
            swift_bridgeObjectRelease();
            outlined init with copy of (Hashable & Sendable)?( (uint64_t)&v383,  (uint64_t)&v368,  &demangling cache variable for type metadata for AttributedString._AttributeValue?);
            outlined init with copy of (Hashable & Sendable)?( (uint64_t)&v378,  (uint64_t)v360,  &demangling cache variable for type metadata for AttributedString._AttributeValue?);
            if (!v371)
            {
              if (v377) {
                goto LABEL_286;
              }
              outlined destroy of Any?( (uint64_t)&v368,  &demangling cache variable for type metadata for AttributedString._AttributeValue?);
              outlined destroy of Any?( (uint64_t)&v378,  &demangling cache variable for type metadata for AttributedString._AttributeValue?);
              uint64_t result = outlined destroy of Any?( (uint64_t)&v383,  &demangling cache variable for type metadata for AttributedString._AttributeValue?);
              goto LABEL_256;
            }

            outlined init with copy of (Hashable & Sendable)?( (uint64_t)&v368,  (uint64_t)v366,  &demangling cache variable for type metadata for AttributedString._AttributeValue?);
            if (!v377) {
              goto LABEL_285;
            }
            __int128 v236 = *((_OWORD *)v360 + 3);
            v363 = *((_OWORD *)v360 + 2);
            v364 = v236;
            v365 = *((void *)v360 + 8);
            uint64_t v237 = *((_OWORD *)v360 + 1);
            v361 = *(_OWORD *)v360;
            v362 = v237;
            outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>( (uint64_t)v366,  (uint64_t)v415);
            outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>( (uint64_t)&v361,  (uint64_t)v414);
            outlined init with copy of (Hashable & Sendable)?( (uint64_t)v415,  (uint64_t)&v407,  &demangling cache variable for type metadata for (Hashable & Sendable)?);
            outlined init with copy of (Hashable & Sendable)?( (uint64_t)v414,  (uint64_t)v358,  &demangling cache variable for type metadata for (Hashable & Sendable)?);
            if (v408)
            {
              if (!v410)
              {
                uint64_t v227 = v191;
                __swift_destroy_boxed_opaque_existential_1((uint64_t)&v407);
LABEL_254:
                __int128 v228 = 0;
                goto LABEL_255;
              }

              outlined init with take of any PredicateExpression<Self.Output == B1>(&v407, (uint64_t)v411);
              outlined init with take of any PredicateExpression<Self.Output == B1>(v358, (uint64_t)v406);
              __int128 v238 = v412;
              v350 = v413;
              uint64_t v349 = __swift_project_boxed_opaque_existential_1(v411, v412);
              uint64_t v355 = v310;
              __int128 v239 = *(void *)(v238 - 8);
              MEMORY[0x1895F8858](v349);
              __int128 v241 = (char *)v310 - ((v240 + 15) & 0xFFFFFFFFFFFFFFF0LL);
              outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>( (uint64_t)v406,  (uint64_t)v405);
              uint64_t v242 = type metadata accessor for Optional();
              uint64_t v354 = v310;
              __int128 v243 = *(void *)(v242 - 8);
              MEMORY[0x1895F8858](v242);
              __int128 v245 = (char *)v310 - v244;
              __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Hashable & Sendable);
              __int128 v246 = swift_dynamicCast();
              unint64_t v247 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v239 + 56);
              if (v246)
              {
                v247(v245, 0LL, 1LL, v238);
                (*(void (**)(char *, char *, uint64_t))(v239 + 32))(v241, v245, v238);
                __int128 v228 = dispatch thunk of static Equatable.== infix(_:_:)();
                (*(void (**)(char *, uint64_t))(v239 + 8))(v241, v238);
              }

              else
              {
                v247(v245, 1LL, 1LL, v238);
                (*(void (**)(char *, uint64_t))(v243 + 8))(v245, v242);
                __int128 v228 = 0;
              }

              uint64_t v227 = v357;
              __swift_destroy_boxed_opaque_existential_1((uint64_t)v406);
              __swift_destroy_boxed_opaque_existential_1((uint64_t)v411);
              uint64_t v198 = v353;
              uint64_t v210 = (uint64_t)v359;
            }

            else
            {
              uint64_t v227 = v191;
              if (v410)
              {
                outlined destroy of Any?( (uint64_t)v358,  &demangling cache variable for type metadata for (Hashable & Sendable)?);
                goto LABEL_254;
              }

              __int128 v228 = 1;
            }

        __break(1u);
        goto LABEL_214;
      }

      uint64_t v92 = *(void *)(v10 + 96);
      uint64_t v106 = swift_getObjectType();
      uint64_t v107 = *(uint64_t (**)(void, void))(v92 + 344);
      swift_unknownObjectRetain();
      char v93 = v107(v106, v92);
      swift_unknownObjectRelease();
    }

    else
    {
      char v93 = *(void *)(v10 + 136);
    }

    char v87 = v122;
    if (7 - v90 < v93) {
      goto LABEL_178;
    }
    goto LABEL_177;
  }

  __break(1u);
LABEL_142:
  if (v4 < 0x111) {
    goto LABEL_143;
  }
LABEL_147:
  if (v4 >= 0x16E)
  {
LABEL_268:
    uint64_t result = (void *)_assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }

    uint64_t result = swift_unknownObjectRelease();
LABEL_214:
    unint64_t v160 = __src[2];
    unint64_t v161 = __src[1];
    *(_OWORD *)a3 = __src[0];
    *(_OWORD *)(a3 + 16) = v161;
    *(_BYTE *)(a3 + 32) = v160;
    return result;
  }

double protocol witness for BidirectionalCollection.formIndex(before:) in conformance AttributedString.Runs.AttributesSlice1<A>( _OWORD *a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for BidirectionalCollection.formIndex(before:) in conformance AttributedString.Runs.AttributesSlice1<A>( a1,  a2,  a3,  (void (*)(_OWORD *__return_ptr))AttributedString.Runs.AttributesSlice1.index(before:));
}

uint64_t (*protocol witness for Collection.subscript.read in conformance AttributedString.Runs.AttributesSlice1<A>( uint64_t **a1, unint64_t *a2, uint64_t a3))()
{
  __int128 v6 = (uint64_t *)malloc(0x40uLL);
  *a1 = v6;
  swift_getAssociatedTypeWitness();
  uint64_t v7 = type metadata accessor for Optional();
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Range<AttributedString.Index>);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  v6[4] = TupleTypeMetadata2;
  uint64_t v9 = *(void *)(TupleTypeMetadata2 - 8);
  v6[5] = v9;
  __int128 v10 = (char *)malloc(*(void *)(v9 + 64));
  v6[6] = (uint64_t)v10;
  __int128 v11 = AttributedString.Runs.AttributesSlice1.subscript.read(v6, a2, a3);
  __int128 v13 = v12;
  v6[7] = (uint64_t)v11;
  (*(void (**)(char *))(*(void *)(v7 - 8) + 16LL))(v10);
  __int128 v14 = &v10[*(int *)(TupleTypeMetadata2 + 48)];
  __int128 v15 = v13[1];
  __int128 v16 = v13[2];
  __int128 v17 = v13[3];
  *(_OWORD *)__int128 v14 = *v13;
  *((_OWORD *)v14 + 1) = v15;
  *((_OWORD *)v14 + 2) = v16;
  *((_OWORD *)v14 + 3) = v17;
  return protocol witness for Collection.subscript.read in conformance AttributedString.Runs.AttributesSlice1<A>;
}

uint64_t (*AttributedString.Runs.AttributesSlice1.subscript.read( uint64_t *a1, unint64_t *a2, uint64_t a3))()
{
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  *a1 = TupleTypeMetadata2;
  uint64_t v7 = *(void *)(TupleTypeMetadata2 - 8);
  a1[1] = v7;
  __int128 v8 = (char *)malloc(*(void *)(v7 + 64));
  a1[2] = (uint64_t)v8;
  AttributedString.Runs.AttributesSlice1.subscript.getter((uint64_t)v8, &v8[*(int *)(TupleTypeMetadata2 + 48)], a2, a3);
  return AttributedString.Runs.AttributesSlice1.subscript.read;
}

uint64_t protocol witness for Collection.index(_:offsetBy:) in conformance AttributedString.Runs.AttributesSlice1<A>( uint64_t a1, uint64_t a2, uint64_t a3)
{
  return BidirectionalCollection.index(_:offsetBy:)();
}

uint64_t protocol witness for Collection.index(_:offsetBy:limitedBy:) in conformance AttributedString.Runs.AttributesSlice1<A>( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return BidirectionalCollection.index(_:offsetBy:limitedBy:)();
}

void protocol witness for Collection.distance(from:to:) in conformance AttributedString.Runs.AttributesSlice1<A>( uint64_t a1, uint64_t a2, uint64_t a3)
{
}

double protocol witness for Collection.formIndex(after:) in conformance AttributedString.Runs.AttributesSlice1<A>( _OWORD *a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for BidirectionalCollection.formIndex(before:) in conformance AttributedString.Runs.AttributesSlice1<A>( a1,  a2,  a3,  (void (*)(_OWORD *__return_ptr))AttributedString.Runs.AttributesSlice1.index(after:));
}

uint64_t protocol witness for Sequence.makeIterator() in conformance AttributedString.Runs.AttributesSlice1<A>( uint64_t a1, uint64_t a2)
{
  return protocol witness for Sequence.makeIterator() in conformance AttributedString.Runs.AttributesSlice1<A>( a1,  a2,  (void (*)(void))AttributedString.Runs.AttributesSlice1.makeIterator());
}

uint64_t protocol witness for Sequence.underestimatedCount.getter in conformance AttributedString.Runs.AttributesSlice1<A>( uint64_t a1)
{
  return Collection.underestimatedCount.getter();
}

uint64_t protocol witness for Sequence._copyToContiguousArray() in conformance AttributedString.Runs.AttributesSlice1<A>( uint64_t a1)
{
  return Collection._copyToContiguousArray()();
}

uint64_t protocol witness for Sequence.withContiguousStorageIfAvailable<A>(_:) in conformance AttributedString.Runs.AttributesSlice1<A>()
{
  return Sequence.withContiguousStorageIfAvailable<A>(_:)();
}

__n128 AttributedString.Runs.subscript.getter@<Q0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = *a1;
  __int128 v7 = v3[11];
  __int128 v39 = v3[10];
  __int128 v40 = v7;
  uint64_t v41 = *((void *)v3 + 24);
  __int128 v8 = v3[7];
  __int128 v35 = v3[6];
  __int128 v36 = v8;
  __int128 v9 = v3[9];
  __int128 v37 = v3[8];
  __int128 v38 = v9;
  __int128 v10 = v3[3];
  __int128 v31 = v3[2];
  __int128 v32 = v10;
  __int128 v11 = v3[5];
  __int128 v33 = v3[4];
  __int128 v34 = v11;
  __n128 v12 = (__n128)v3[1];
  __int128 v29 = *v3;
  __n128 v30 = v12;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
  uint64_t v13 = swift_allocObject();
  *(_OWORD *)(v13 + 16) = xmmword_183720D90;
  uint64_t v14 = *(void *)(*MEMORY[0x18961A9A8] + v6 + 8);
  __int128 v15 = *(uint64_t (**)(uint64_t, uint64_t))(a2 + 24);
  outlined retain of AttributedString.Runs((uint64_t)&v29);
  *(void *)(v13 + 32) = v15(v14, a2);
  *(void *)(v13 + 40) = v16;
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(a2 + 32))(&v27, v14, a2);
  uint64_t v17 = v28;
  if (v28 == 1)
  {
    uint64_t v18 = MEMORY[0x18961AFE8];
  }

  else
  {
    uint64_t v19 = v27;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<AttributedString.AttributeRunBoundaries>);
    uint64_t v18 = swift_allocObject();
    *(_OWORD *)(v18 + 16) = xmmword_183720D90;
    *(void *)(v18 + 32) = v19;
    *(void *)(v18 + 40) = v17;
  }

  __int128 v20 = v40;
  *(_OWORD *)(a3 + 160) = v39;
  *(_OWORD *)(a3 + 176) = v20;
  uint64_t v21 = v41;
  __int128 v22 = v36;
  *(_OWORD *)(a3 + 96) = v35;
  *(_OWORD *)(a3 + 112) = v22;
  __int128 v23 = v38;
  *(_OWORD *)(a3 + 128) = v37;
  *(_OWORD *)(a3 + 144) = v23;
  __int128 v24 = v32;
  *(_OWORD *)(a3 + 32) = v31;
  *(_OWORD *)(a3 + 48) = v24;
  __int128 v25 = v34;
  *(_OWORD *)(a3 + 64) = v33;
  *(_OWORD *)(a3 + 80) = v25;
  __n128 result = v30;
  *(_OWORD *)a3 = v29;
  *(__n128 *)(a3 + 16) = result;
  *(void *)(a3 + 192) = v21;
  *(void *)(a3 + 200) = v13;
  *(void *)(a3 + 208) = v18;
  return result;
}

__n128 AttributedString.Runs.AttributesSlice2.init(runs:)@<Q0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v12 = swift_allocObject();
  *(_OWORD *)(v12 + 16) = xmmword_1837232D0;
  *(void *)(v12 + 32) = (*(uint64_t (**)(uint64_t, uint64_t))(a4 + 24))(a2, a4);
  *(void *)(v12 + 40) = v13;
  *(void *)(v12 + 48) = (*(uint64_t (**)(uint64_t, uint64_t))(a5 + 24))(a3, a5);
  *(void *)(v12 + 56) = v14;
  (*(void (**)(void *__return_ptr, uint64_t, uint64_t))(a4 + 32))(v26, a2, a4);
  uint64_t v15 = v26[0];
  uint64_t v16 = v26[1];
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(a5 + 32))(v25, a3, a5);
  uint64_t v17 = specialized RangeReplaceableCollection.init(_contents:_:)(v15, v16, v25[0], v25[1]);
  outlined consume of AttributedString.AttributeRunBoundaries?(v15, v16);
  __int128 v18 = *(_OWORD *)(a1 + 176);
  *(_OWORD *)(a6 + 160) = *(_OWORD *)(a1 + 160);
  *(_OWORD *)(a6 + 176) = v18;
  uint64_t v19 = *(void *)(a1 + 192);
  __int128 v20 = *(_OWORD *)(a1 + 112);
  *(_OWORD *)(a6 + 96) = *(_OWORD *)(a1 + 96);
  *(_OWORD *)(a6 + 112) = v20;
  __int128 v21 = *(_OWORD *)(a1 + 144);
  *(_OWORD *)(a6 + 128) = *(_OWORD *)(a1 + 128);
  *(_OWORD *)(a6 + 144) = v21;
  __int128 v22 = *(_OWORD *)(a1 + 48);
  *(_OWORD *)(a6 + 32) = *(_OWORD *)(a1 + 32);
  *(_OWORD *)(a6 + 48) = v22;
  __int128 v23 = *(_OWORD *)(a1 + 80);
  *(_OWORD *)(a6 + 64) = *(_OWORD *)(a1 + 64);
  *(_OWORD *)(a6 + 80) = v23;
  __n128 result = *(__n128 *)(a1 + 16);
  *(_OWORD *)a6 = *(_OWORD *)a1;
  *(__n128 *)(a6 + 16) = result;
  *(void *)(a6 + 192) = v19;
  *(void *)(a6 + 200) = v12;
  *(void *)(a6 + 208) = v17;
  return result;
}

uint64_t AttributedString.Runs.AttributesSlice2.subscript.getter( uint64_t result, uint64_t a2, unint64_t *a3, unint64_t *a4, void *a5)
{
  __int128 v330 = a5;
  unint64_t v6 = *a4;
  unint64_t v7 = a4[1];
  unint64_t v344 = a4[2];
  uint64_t v345 = v7;
  uint64_t v343 = a4[3];
  __int128 v8 = *v5;
  __int128 v9 = v5[1];
  __int128 v10 = v5[2];
  v434[3] = v5[3];
  v434[2] = v10;
  v434[0] = v8;
  v434[1] = v9;
  __int128 v11 = v5[4];
  __int128 v12 = v5[5];
  __int128 v13 = v5[6];
  __int128 v438 = v5[7];
  __int128 v437 = v13;
  __int128 v435 = v11;
  __int128 v436 = v12;
  __int128 v14 = v5[8];
  __int128 v15 = v5[9];
  __int128 v16 = v5[10];
  __int128 v17 = v5[11];
  uint64_t v443 = *((void *)v5 + 24);
  __int128 v442 = v17;
  __int128 v441 = v16;
  __int128 v439 = v14;
  unint64_t v352 = v6;
  unint64_t v18 = v6 >> 10;
  __int128 v440 = v15;
  if (v18 < *((void *)&v14 + 1) >> 10) {
    goto LABEL_380;
  }
  unint64_t v331 = *((void *)&v441 + 1) >> 10;
  if (*((void *)&v441 + 1) >> 10 < v18) {
    goto LABEL_380;
  }
  uint64_t v347 = *((void *)v5 + 25);
  uint64_t v19 = *(void *)(v347 + 16);
  if (!v19)
  {
LABEL_381:
    __break(1u);
LABEL_382:
    __break(1u);
    goto LABEL_383;
  }

  uint64_t v20 = *(void *)&v434[0];
  unint64_t v21 = *(void *)(*(void *)&v434[0] + 64LL);
  uint64_t v22 = *(void *)(*(void *)&v434[0] + 80LL);
  if (v21) {
    int64_t v23 = *(void *)(*(void *)&v434[0] + 80LL);
  }
  else {
    int64_t v23 = 0LL;
  }
  unint64_t v358 = (__int128 *)(v352 >> 11);
  unint64_t v334 = v18;
  uint64_t v357 = (void *)*((void *)v5 + 26);
  unint64_t v337 = *((void *)&v440 + 1);
  uint64_t v338 = v440;
  unint64_t v332 = v441;
  unint64_t v321 = *((void *)&v442 + 1);
  unint64_t v322 = v442;
  uint64_t v319 = a2;
  uint64_t v320 = v443;
  uint64_t v24 = *(void *)(*(void *)&v434[0] + 72LL);
  uint64_t v25 = *(void *)(*(void *)&v434[0] + 88LL);
  uint64_t v341 = *((void *)&v14 + 1);
  unint64_t v342 = v25;
  uint64_t v348 = *(void *)&v434[0];
  uint64_t v353 = v19;
  __int128 v317 = a3;
  uint64_t v318 = result;
  unint64_t v323 = *((void *)&v441 + 1);
  uint64_t v340 = (char *)(*((void *)&v14 + 1) >> 10);
  if (v21 && (uint64_t)v358 < v22 && *(_WORD *)(v21 + 16))
  {
    uint64_t v26 = *(unsigned __int8 *)(v21 + 18);
    if (*(_BYTE *)(v21 + 18))
    {
      swift_unknownObjectRetain_n();
      __n128 result = outlined retain of AttributedString.Runs((uint64_t)v434);
      uint64_t v27 = v358;
      unint64_t v28 = v21;
      while (1)
      {
        uint64_t v31 = *(unsigned __int16 *)(v28 + 16);
        if (!*(_WORD *)(v28 + 16)) {
          goto LABEL_14;
        }
        uint64_t v32 = *(void *)(v28 + 40);
        BOOL v33 = __OFSUB__(v27, v32);
        __int128 v34 = (__int128 *)((char *)v27 - v32);
        if (v33) {
          goto LABEL_372;
        }
        if (__OFADD__(v34, 1LL)) {
          goto LABEL_373;
        }
        if ((uint64_t)v34 + 1 < 1)
        {
          uint64_t v31 = 0LL;
          goto LABEL_15;
        }

        if ((_DWORD)v31 == 1) {
          break;
        }
        __int128 v35 = (uint64_t *)(v28 + 64);
        uint64_t v36 = 1LL;
        while (1)
        {
          uint64_t v37 = *v35;
          v35 += 3;
          uint64_t v27 = (__int128 *)((char *)v34 - v37);
          if (__OFSUB__(v34, v37)) {
            goto LABEL_365;
          }
          if (__OFADD__(v27, 1LL))
          {
LABEL_366:
            __break(1u);
LABEL_367:
            __break(1u);
LABEL_368:
            __break(1u);
LABEL_369:
            __break(1u);
            goto LABEL_370;
          }

          ++v36;
          __int128 v34 = v27;
          if (v31 == v36) {
            goto LABEL_14;
          }
        }

        uint64_t v31 = v36;
        uint64_t v27 = v34;
LABEL_15:
        char v29 = (4 * *(_BYTE *)(v28 + 18) + 8) & 0x3C;
        uint64_t v26 = ((-15LL << v29) - 1) & v26 | (v31 << v29);
        unint64_t v30 = *(void *)(v28 + 24 + 24 * v31);
        swift_unknownObjectRetain();
        __n128 result = swift_unknownObjectRelease();
        unint64_t v28 = v30;
        if (!*(_BYTE *)(v30 + 18)) {
          goto LABEL_32;
        }
      }

      uint64_t v27 = v34;
LABEL_14:
      if (!v27) {
        goto LABEL_15;
      }
LABEL_370:
      __break(1u);
LABEL_371:
      __break(1u);
LABEL_372:
      __break(1u);
LABEL_373:
      __break(1u);
LABEL_374:
      __break(1u);
LABEL_375:
      __break(1u);
LABEL_376:
      __break(1u);
LABEL_377:
      __break(1u);
LABEL_378:
      __break(1u);
      goto LABEL_379;
    }

    swift_unknownObjectRetain_n();
    __n128 result = outlined retain of AttributedString.Runs((uint64_t)v434);
    uint64_t v27 = v358;
    unint64_t v30 = v21;
LABEL_32:
    uint64_t v39 = *(unsigned __int16 *)(v30 + 16);
    if (*(_WORD *)(v30 + 16))
    {
      uint64_t v40 = *(void *)(v30 + 24);
      BOOL v33 = __OFSUB__(v27, v40);
      uint64_t v41 = (__int128 *)((char *)v27 - v40);
      uint64_t v20 = v348;
      if (v33)
      {
LABEL_413:
        __break(1u);
        goto LABEL_414;
      }

      if (__OFADD__(v41, 1LL))
      {
LABEL_414:
        __break(1u);
        goto LABEL_415;
      }

      uint64_t v42 = v30;
      if ((uint64_t)v41 + 1 < 1)
      {
        uint64_t v39 = 0LL;
      }

      else
      {
        if ((_DWORD)v39 == 1)
        {
          uint64_t v27 = v41;
          goto LABEL_45;
        }

        char v43 = (uint64_t *)(v30 + 48);
        uint64_t v44 = 1LL;
        while (1)
        {
          uint64_t v45 = *v43;
          v43 += 3;
          uint64_t v27 = (__int128 *)((char *)v41 - v45);
          if (__OFSUB__(v41, v45)) {
            goto LABEL_396;
          }
          if (__OFADD__(v27, 1LL)) {
            goto LABEL_397;
          }
          ++v44;
          uint64_t v41 = v27;
          if (v39 == v44) {
            goto LABEL_45;
          }
        }

        uint64_t v39 = v44;
        uint64_t v27 = v41;
      }

LABEL_320:
          outlined release of Locale((uint64_t)v414);
        }

        __n128 result = outlined release of AttributedString.Runs((uint64_t)v434);
        goto LABEL_322;
      }

              outlined release of Locale((uint64_t)v435);
            }

            __n128 result = outlined release of AttributedString.Runs((uint64_t)v455);
            uint64_t v270 = v354;
            goto LABEL_322;
          }

          int64_t v23 = v367;
LABEL_210:
          if (v146)
          {
LABEL_433:
            __break(1u);
            goto LABEL_434;
          }

          goto LABEL_211;
        }
      }

      else if (v373 >= 0x800)
      {
LABEL_430:
        __break(1u);
LABEL_431:
        __break(1u);
        goto LABEL_432;
      }

      swift_unknownObjectRetain();
      outlined retain of AttributedString.Runs((uint64_t)v455);
      swift_unknownObjectRetain();
      uint64_t v156 = specialized Rope._endPath.getter(v142);
      __n128 result = swift_unknownObjectRelease();
      unint64_t v149 = 0LL;
      uint64_t v146 = 0LL;
      goto LABEL_212;
    }

LABEL_421:
  __break(1u);
  return result;
}

double protocol witness for BidirectionalCollection.formIndex(before:) in conformance AttributedString.Runs.AttributesSlice2<A, B>( _OWORD *a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for BidirectionalCollection.formIndex(before:) in conformance AttributedString.Runs.AttributesSlice1<A>( a1,  a2,  a3,  (void (*)(_OWORD *__return_ptr))AttributedString.Runs.AttributesSlice2.index(before:));
}

uint64_t (*protocol witness for Collection.subscript.read in conformance AttributedString.Runs.AttributesSlice2<A, B>( uint64_t **a1, unint64_t *a2, void *a3))()
{
  unint64_t v6 = (uint64_t *)malloc(0x40uLL);
  *a1 = v6;
  swift_getAssociatedTypeWitness();
  uint64_t v7 = type metadata accessor for Optional();
  swift_getAssociatedTypeWitness();
  uint64_t v8 = type metadata accessor for Optional();
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Range<AttributedString.Index>);
  TupleTypeMetadata3 = swift_getTupleTypeMetadata3();
  v6[4] = TupleTypeMetadata3;
  uint64_t v10 = *(void *)(TupleTypeMetadata3 - 8);
  v6[5] = v10;
  __int128 v11 = (char *)malloc(*(void *)(v10 + 64));
  v6[6] = (uint64_t)v11;
  __int128 v12 = AttributedString.Runs.AttributesSlice2.subscript.read(v6, a2, a3);
  uint64_t v14 = v13;
  __int128 v16 = v15;
  v6[7] = (uint64_t)v12;
  (*(void (**)(char *))(*(void *)(v7 - 8) + 16LL))(v11);
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 16LL))( &v11[*(int *)(TupleTypeMetadata3 + 48)],  v14,  v8);
  __int128 v17 = &v11[*(int *)(TupleTypeMetadata3 + 64)];
  __int128 v18 = v16[1];
  __int128 v19 = v16[2];
  __int128 v20 = v16[3];
  *(_OWORD *)__int128 v17 = *v16;
  *((_OWORD *)v17 + 1) = v18;
  *((_OWORD *)v17 + 2) = v19;
  *((_OWORD *)v17 + 3) = v20;
  return protocol witness for Collection.subscript.read in conformance AttributedString.Runs.AttributesSlice1<A>;
}

void protocol witness for Collection.subscript.read in conformance AttributedString.Runs.AttributesSlice1<A>( uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  (*(void (**)(void, void))(*(void *)(*a1 + 40) + 8LL))(*(void *)(*a1 + 48), *(void *)(*a1 + 32));
  unint64_t v4 = *(void **)(v3 + 48);
  (*(void (**)(uint64_t, uint64_t))(v3 + 56))(v3, a2);
  free(v4);
  free((void *)v3);
}

uint64_t (*AttributedString.Runs.AttributesSlice2.subscript.read( uint64_t *a1, unint64_t *a2, void *a3))()
{
  TupleTypeMetadata3 = swift_getTupleTypeMetadata3();
  *a1 = TupleTypeMetadata3;
  uint64_t v7 = *(void *)(TupleTypeMetadata3 - 8);
  a1[1] = v7;
  uint64_t v8 = (char *)malloc(*(void *)(v7 + 64));
  a1[2] = (uint64_t)v8;
  AttributedString.Runs.AttributesSlice2.subscript.getter( (uint64_t)v8,  (uint64_t)&v8[*(int *)(TupleTypeMetadata3 + 48)],  (unint64_t *)&v8[*(int *)(TupleTypeMetadata3 + 64)],  a2,  a3);
  return AttributedString.Runs.AttributesSlice1.subscript.read;
}

void AttributedString.Runs.AttributesSlice1.subscript.read(void *a1)
{
  uint64_t v1 = (void *)a1[2];
  (*(void (**)(void *, void))(a1[1] + 8LL))(v1, *a1);
  free(v1);
}

uint64_t protocol witness for Collection.index(_:offsetBy:) in conformance AttributedString.Runs.AttributesSlice2<A, B>( uint64_t a1, uint64_t a2, uint64_t a3)
{
  return BidirectionalCollection.index(_:offsetBy:)();
}

uint64_t protocol witness for Collection.index(_:offsetBy:limitedBy:) in conformance AttributedString.Runs.AttributesSlice2<A, B>( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return BidirectionalCollection.index(_:offsetBy:limitedBy:)();
}

void protocol witness for Collection.distance(from:to:) in conformance AttributedString.Runs.AttributesSlice2<A, B>( uint64_t a1, uint64_t a2, uint64_t a3)
{
}

double protocol witness for Collection.formIndex(after:) in conformance AttributedString.Runs.AttributesSlice2<A, B>( _OWORD *a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for BidirectionalCollection.formIndex(before:) in conformance AttributedString.Runs.AttributesSlice1<A>( a1,  a2,  a3,  (void (*)(_OWORD *__return_ptr))AttributedString.Runs.AttributesSlice2.index(after:));
}

uint64_t protocol witness for Sequence.makeIterator() in conformance AttributedString.Runs.AttributesSlice2<A, B>( uint64_t a1, uint64_t a2)
{
  return protocol witness for Sequence.makeIterator() in conformance AttributedString.Runs.AttributesSlice1<A>( a1,  a2,  (void (*)(void))AttributedString.Runs.AttributesSlice2.makeIterator());
}

uint64_t protocol witness for Sequence.underestimatedCount.getter in conformance AttributedString.Runs.AttributesSlice2<A, B>( uint64_t a1)
{
  return Collection.underestimatedCount.getter();
}

uint64_t protocol witness for Sequence._copyToContiguousArray() in conformance AttributedString.Runs.AttributesSlice2<A, B>( uint64_t a1)
{
  return Collection._copyToContiguousArray()();
}

double AttributedString.Runs.subscript.getter@<D0>( uint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v9 = *a1;
  uint64_t v10 = *a2;
  __int128 v11 = *(_OWORD *)(v5 + 176);
  v18[10] = *(_OWORD *)(v5 + 160);
  v18[11] = v11;
  uint64_t v19 = *(void *)(v5 + 192);
  __int128 v12 = *(_OWORD *)(v5 + 112);
  v18[6] = *(_OWORD *)(v5 + 96);
  v18[7] = v12;
  __int128 v13 = *(_OWORD *)(v5 + 144);
  v18[8] = *(_OWORD *)(v5 + 128);
  v18[9] = v13;
  __int128 v14 = *(_OWORD *)(v5 + 48);
  v18[2] = *(_OWORD *)(v5 + 32);
  v18[3] = v14;
  __int128 v15 = *(_OWORD *)(v5 + 80);
  v18[4] = *(_OWORD *)(v5 + 64);
  v18[5] = v15;
  __int128 v16 = *(_OWORD *)(v5 + 16);
  v18[0] = *(_OWORD *)v5;
  v18[1] = v16;
  outlined retain of AttributedString.Runs((uint64_t)v18);
  *(void *)&double result = AttributedString.Runs.AttributesSlice2.init(runs:)( v5,  *(void *)(v9 + *MEMORY[0x18961A9A8] + 8LL),  *(void *)(v10 + *MEMORY[0x18961A9A8] + 8LL),  a3,  a4,  a5).n128_u64[0];
  return result;
}

__n128 AttributedString.Runs.AttributesSlice3.init(runs:)@<Q0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  uint64_t v16 = swift_allocObject();
  *(_OWORD *)(v16 + 16) = xmmword_183729E30;
  *(void *)(v16 + 32) = (*(uint64_t (**)(uint64_t, uint64_t))(a5 + 24))(a2, a5);
  *(void *)(v16 + 40) = v17;
  *(void *)(v16 + 48) = (*(uint64_t (**)(uint64_t, uint64_t))(a6 + 24))(a3, a6);
  *(void *)(v16 + 56) = v18;
  *(void *)(v16 + 64) = (*(uint64_t (**)(uint64_t, uint64_t))(a7 + 24))(a4, a7);
  *(void *)(v16 + 72) = v19;
  (*(void (**)(void *__return_ptr, uint64_t, uint64_t))(a5 + 32))(v34, a2, a5);
  uint64_t v20 = v34[0];
  uint64_t v21 = v34[1];
  (*(void (**)(void *__return_ptr, uint64_t, uint64_t))(a6 + 32))(v33, a3, a6);
  uint64_t v22 = v33[0];
  uint64_t v23 = v33[1];
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(a7 + 32))(v32, a4, a7);
  uint64_t v24 = specialized RangeReplaceableCollection.init(_contents:_:_:)(v20, v21, v22, v23, v32[0], v32[1]);
  outlined consume of AttributedString.AttributeRunBoundaries?(v22, v23);
  outlined consume of AttributedString.AttributeRunBoundaries?(v20, v21);
  __int128 v25 = *(_OWORD *)(a1 + 176);
  *(_OWORD *)(a8 + 160) = *(_OWORD *)(a1 + 160);
  *(_OWORD *)(a8 + 176) = v25;
  uint64_t v26 = *(void *)(a1 + 192);
  __int128 v27 = *(_OWORD *)(a1 + 112);
  *(_OWORD *)(a8 + 96) = *(_OWORD *)(a1 + 96);
  *(_OWORD *)(a8 + 112) = v27;
  __int128 v28 = *(_OWORD *)(a1 + 144);
  *(_OWORD *)(a8 + 128) = *(_OWORD *)(a1 + 128);
  *(_OWORD *)(a8 + 144) = v28;
  __int128 v29 = *(_OWORD *)(a1 + 48);
  *(_OWORD *)(a8 + 32) = *(_OWORD *)(a1 + 32);
  *(_OWORD *)(a8 + 48) = v29;
  __int128 v30 = *(_OWORD *)(a1 + 80);
  *(_OWORD *)(a8 + 64) = *(_OWORD *)(a1 + 64);
  *(_OWORD *)(a8 + 80) = v30;
  __n128 result = *(__n128 *)(a1 + 16);
  *(_OWORD *)a8 = *(_OWORD *)a1;
  *(__n128 *)(a8 + 16) = result;
  *(void *)(a8 + 192) = v26;
  *(void *)(a8 + 200) = v16;
  *(void *)(a8 + 208) = v24;
  return result;
}

unint64_t *AttributedString.Runs.AttributesSlice2.index(after:)@<X0>( unint64_t *result@<X0>, unint64_t *a2@<X8>)
{
  unint64_t v3 = *result;
  unint64_t v162 = result[1];
  unint64_t v161 = result[2];
  unint64_t v160 = result[3];
  __int128 v4 = *v2;
  __int128 v5 = v2[1];
  __int128 v6 = v2[3];
  v217[2] = v2[2];
  v217[3] = v6;
  v217[0] = v4;
  v217[1] = v5;
  __int128 v7 = v2[4];
  __int128 v8 = v2[5];
  __int128 v9 = v2[7];
  __int128 v220 = v2[6];
  __int128 v221 = v9;
  __int128 v218 = v7;
  __int128 v219 = v8;
  __int128 v10 = v2[8];
  __int128 v11 = v2[9];
  __int128 v12 = v2[11];
  __int128 v224 = v2[10];
  __int128 v225 = v12;
  __int128 v222 = v10;
  __int128 v223 = v11;
  unint64_t v165 = v3;
  unint64_t v13 = v3 >> 10;
  unint64_t v226 = *((void *)v2 + 24);
  if (v13 < *((void *)&v10 + 1) >> 10 || v13 >= *((void *)&v224 + 1) >> 10) {
    goto LABEL_187;
  }
  uint64_t v166 = *((void *)v2 + 25);
  if (!*(void *)(v166 + 16))
  {
LABEL_188:
    __break(1u);
LABEL_189:
    __break(1u);
    goto LABEL_190;
  }

  uint64_t v172 = *(void *)(v166 + 16);
  uint64_t v14 = *(void *)&v217[0];
  unint64_t v15 = *(void *)(*(void *)&v217[0] + 64LL);
  uint64_t v16 = *(void *)(*(void *)&v217[0] + 80LL);
  int64_t v17 = v165 >> 11;
  if (v15) {
    uint64_t v18 = *(void *)(*(void *)&v217[0] + 80LL);
  }
  else {
    uint64_t v18 = 0LL;
  }
  if (v18 < v17) {
    goto LABEL_189;
  }
  unint64_t v144 = a2;
  uint64_t v167 = *((void *)v2 + 26);
  uint64_t v19 = *(void *)(*(void *)&v217[0] + 72LL);
  uint64_t v20 = *(void *)(*(void *)&v217[0] + 88LL);
  uint64_t v156 = *(void *)&v217[0];
  uint64_t v169 = v20;
  unint64_t v152 = v13;
  unint64_t v148 = *((void *)&v224 + 1) >> 10;
  unint64_t v149 = *((void *)&v224 + 1);
  unint64_t v146 = *((void *)&v225 + 1);
  unint64_t v147 = v225;
  unint64_t v145 = v226;
  if (v15 && v17 < v16 && *(_WORD *)(v15 + 16))
  {
    uint64_t v21 = *(unsigned __int8 *)(v15 + 18);
    uint64_t v178 = v165 >> 11;
    if (v21)
    {
      swift_unknownObjectRetain_n();
      __n128 result = (unint64_t *)outlined retain of AttributedString.Runs((uint64_t)v217);
      unint64_t v22 = v165 >> 11;
      unint64_t v23 = v15;
      while (1)
      {
        uint64_t v26 = *(unsigned __int16 *)(v23 + 16);
        if (!*(_WORD *)(v23 + 16)) {
          break;
        }
        uint64_t v27 = *(void *)(v23 + 40);
        BOOL v28 = __OFSUB__(v22, v27);
        unint64_t v29 = v22 - v27;
        if (v28) {
          goto LABEL_181;
        }
        if (__OFADD__(v29, 1LL)) {
          goto LABEL_182;
        }
        if ((uint64_t)(v29 + 1) < 1)
        {
          uint64_t v26 = 0LL;
          goto LABEL_15;
        }

        if ((_DWORD)v26 == 1)
        {
          unint64_t v22 = v29;
          break;
        }

        __int128 v30 = (uint64_t *)(v23 + 64);
        uint64_t v31 = 1LL;
        while (1)
        {
          uint64_t v32 = *v30;
          v30 += 3;
          unint64_t v22 = v29 - v32;
          if (__OFSUB__(v29, v32)) {
            goto LABEL_178;
          }
          if (__OFADD__(v22, 1LL))
          {
LABEL_179:
            __break(1u);
            goto LABEL_180;
          }

          ++v31;
          unint64_t v29 = v22;
          if (v26 == v31) {
            goto LABEL_14;
          }
        }

        uint64_t v26 = v31;
        unint64_t v22 = v29;
LABEL_15:
        char v24 = (4 * *(_BYTE *)(v23 + 18) + 8) & 0x3C;
        uint64_t v21 = ((-15LL << v24) - 1) & v21 | (v26 << v24);
        unint64_t v25 = *(void *)(v23 + 24 + 24 * v26);
        swift_unknownObjectRetain();
        __n128 result = (unint64_t *)swift_unknownObjectRelease();
        unint64_t v23 = v25;
        if (!*(_BYTE *)(v25 + 18)) {
          goto LABEL_32;
        }
      }

unint64_t *AttributedString.Runs.AttributesSlice2.index(before:)@<X0>( unint64_t *result@<X0>, uint64_t *a2@<X8>)
{
  unint64_t v3 = *result;
  unint64_t v4 = result[1];
  unint64_t v5 = result[2];
  unint64_t v6 = result[3];
  __int128 v7 = *v2;
  __int128 v8 = v2[1];
  __int128 v9 = v2[2];
  v215[3] = v2[3];
  v215[2] = v9;
  v215[0] = v7;
  v215[1] = v8;
  __int128 v10 = v2[4];
  __int128 v11 = v2[5];
  __int128 v12 = v2[6];
  v215[7] = v2[7];
  v215[6] = v12;
  v215[4] = v10;
  v215[5] = v11;
  __int128 v13 = v2[8];
  __int128 v14 = v2[9];
  __int128 v15 = v2[10];
  __int128 v16 = v2[11];
  uint64_t v219 = *((void *)v2 + 24);
  __int128 v218 = v16;
  __int128 v217 = v15;
  v215[8] = v13;
  __int128 v216 = v14;
  if (*((void *)&v13 + 1) >> 10 >= v3 >> 10 || *((void *)&v217 + 1) >> 10 < v3 >> 10)
  {
LABEL_178:
    __break(1u);
    goto LABEL_179;
  }

  uint64_t v166 = *((void *)v2 + 25);
  uint64_t v17 = *(void *)(v166 + 16);
  if (!v17)
  {
LABEL_179:
    __break(1u);
LABEL_180:
    __break(1u);
    goto LABEL_181;
  }

  unint64_t v165 = v6;
  uint64_t v18 = *(void *)&v215[0];
  unint64_t v19 = *(void *)(*(void *)&v215[0] + 64LL);
  int64_t v20 = *(void *)(*(void *)&v215[0] + 80LL);
  if (v19) {
    uint64_t v21 = *(void *)(*(void *)&v215[0] + 80LL);
  }
  else {
    uint64_t v21 = 0LL;
  }
  if (v3 < 0x800) {
    goto LABEL_180;
  }
  uint64_t v22 = (v3 >> 11) - 1;
  if (v21 < v22) {
    goto LABEL_180;
  }
  char v154 = a2;
  uint64_t v167 = *((void *)v2 + 26);
  uint64_t v156 = *((void *)&v216 + 1);
  uint64_t v157 = v216;
  uint64_t v155 = v217;
  uint64_t v23 = *(void *)(*(void *)&v215[0] + 72LL);
  unint64_t v178 = *(void *)(*(void *)&v215[0] + 88LL);
  unint64_t v162 = v3 >> 10;
  unint64_t v163 = v4;
  unint64_t v164 = v3;
  unint64_t v170 = v5;
  uint64_t v172 = v17;
  uint64_t v173 = *(void *)&v215[0];
  unint64_t v158 = *((void *)&v13 + 1) >> 10;
  unint64_t v159 = *((void *)&v13 + 1);
  unint64_t v160 = v3 >> 11;
  if (!v19 || (uint64_t)(v3 >> 11) > v20 || !*(_WORD *)(v19 + 16))
  {
    swift_unknownObjectRetain_n();
    outlined retain of AttributedString.Runs((uint64_t)v215);
    unint64_t v175 = specialized Rope._endPath.getter(v19);
    __n128 result = (unint64_t *)swift_unknownObjectRelease();
    uint64_t v37 = 0LL;
    unint64_t v24 = 0LL;
    if (!v19) {
      goto LABEL_168;
    }
    goto LABEL_31;
  }

  uint64_t v181 = v23;
  uint64_t v23 = *(unsigned __int8 *)(v19 + 18);
  if (*(_BYTE *)(v19 + 18))
  {
    swift_unknownObjectRetain_n();
    __n128 result = (unint64_t *)outlined retain of AttributedString.Runs((uint64_t)v215);
    unint64_t v24 = v22;
    unint64_t v25 = v19;
    while (1)
    {
      uint64_t v28 = *(unsigned __int16 *)(v25 + 16);
      if (!*(_WORD *)(v25 + 16)) {
        goto LABEL_15;
      }
      uint64_t v29 = *(void *)(v25 + 40);
      BOOL v30 = __OFSUB__(v24, v29);
      unint64_t v31 = v24 - v29;
      if (v30) {
        goto LABEL_176;
      }
      if (__OFADD__(v31, 1LL)) {
        goto LABEL_177;
      }
      if ((uint64_t)(v31 + 1) < 1)
      {
        uint64_t v28 = 0LL;
        goto LABEL_16;
      }

      if ((_DWORD)v28 == 1) {
        break;
      }
      uint64_t v32 = (uint64_t *)(v25 + 64);
      uint64_t v33 = 1LL;
      while (1)
      {
        uint64_t v34 = *v32;
        v32 += 3;
        unint64_t v24 = v31 - v34;
        if (__OFSUB__(v31, v34))
        {
          __break(1u);
LABEL_173:
          __break(1u);
LABEL_174:
          __break(1u);
          goto LABEL_175;
        }

        if (__OFADD__(v24, 1LL)) {
          goto LABEL_173;
        }
        ++v33;
        unint64_t v31 = v24;
        if (v28 == v33) {
          goto LABEL_15;
        }
      }

      uint64_t v28 = v33;
      unint64_t v24 = v31;
LABEL_16:
      char v26 = (4 * *(_BYTE *)(v25 + 18) + 8) & 0x3C;
      uint64_t v23 = ((-15LL << v26) - 1) & v23 | (v28 << v26);
      unint64_t v27 = *(void *)(v25 + 24 + 24 * v28);
      swift_unknownObjectRetain();
      __n128 result = (unint64_t *)swift_unknownObjectRelease();
      unint64_t v25 = v27;
      if (!*(_BYTE *)(v27 + 18)) {
        goto LABEL_153;
      }
    }

    unint64_t v24 = v31;
LABEL_15:
    if (!v24) {
      goto LABEL_16;
    }
LABEL_175:
    __break(1u);
LABEL_176:
    __break(1u);
LABEL_177:
    __break(1u);
    goto LABEL_178;
  }

  swift_unknownObjectRetain_n();
  __n128 result = (unint64_t *)outlined retain of AttributedString.Runs((uint64_t)v215);
  unint64_t v24 = v22;
  unint64_t v27 = v19;
LABEL_153:
  __int128 v180 = (uint64_t *)v22;
  uint64_t v145 = *(unsigned __int16 *)(v27 + 16);
  if (*(_WORD *)(v27 + 16))
  {
    uint64_t v146 = *(void *)(v27 + 24);
    BOOL v30 = __OFSUB__(v24, v146);
    unint64_t v35 = v24 - v146;
    uint64_t v17 = v172;
    uint64_t v18 = v173;
    if (v30) {
      goto LABEL_193;
    }
    if (__OFADD__(v35, 1LL))
    {
LABEL_194:
      __break(1u);
LABEL_195:
      __break(1u);
      goto LABEL_196;
    }

    uint64_t v37 = v27;
    if ((uint64_t)(v35 + 1) < 1)
    {
      uint64_t v145 = 0LL;
      goto LABEL_167;
    }

    if ((_DWORD)v145 != 1)
    {
      unint64_t v147 = (uint64_t *)(v27 + 48);
      uint64_t v36 = 1LL;
      while (1)
      {
        uint64_t v148 = *v147;
        v147 += 3;
        unint64_t v24 = v35 - v148;
        if (__OFSUB__(v35, v148)) {
          goto LABEL_184;
        }
        if (__OFADD__(v24, 1LL)) {
          goto LABEL_185;
        }
        ++v36;
        unint64_t v35 = v24;
        if (v145 == v36) {
          goto LABEL_166;
        }
      }
    }

    unint64_t v24 = v35;
  }

  else
  {
    uint64_t v37 = v27;
    uint64_t v17 = v172;
    uint64_t v18 = v173;
  }

LABEL_166:
  if (v24) {
    goto LABEL_192;
  }
LABEL_167:
  while (1)
  {
    swift_unknownObjectRelease();
    __n128 result = (unint64_t *)swift_unknownObjectRelease();
    unint64_t v35 = v23 & 0xFFFFFFFFFFFFF0FFLL | (v145 << 8);
    unint64_t v175 = v35;
    uint64_t v22 = (uint64_t)v180;
    uint64_t v23 = v181;
    if (!v19) {
      break;
    }
LABEL_31:
    swift_unknownObjectRetain();
    uint64_t v174 = specialized Rope._Node.distanceFromStart<A>(to:in:)(v178, v175, v37, v19, v23);
    __n128 result = (unint64_t *)swift_unknownObjectRelease_n();
    unint64_t v19 = v22 - v24;
    if (!__OFSUB__(v22, v24)) {
      goto LABEL_32;
    }
LABEL_170:
    __break(1u);
LABEL_171:
    uint64_t v145 = v36;
    unint64_t v24 = v35;
  }

      outlined destroy of Any?((uint64_t)v150, &demangling cache variable for type metadata for (Hashable & Sendable)?);
      outlined destroy of Any?((uint64_t)v151, &demangling cache variable for type metadata for (Hashable & Sendable)?);
      outlined destroy of AttributedString._AttributeValue((uint64_t)&v152);
      outlined destroy of Any?( (uint64_t)v165,  &demangling cache variable for type metadata for AttributedString._AttributeValue?);
      outlined destroy of Any?( (uint64_t)&v166,  &demangling cache variable for type metadata for AttributedString._AttributeValue?);
      outlined destroy of AttributedString._AttributeValue((uint64_t)&v171);
      outlined destroy of AttributedString._AttributeValue((uint64_t)v157);
      __n128 result = outlined destroy of Any?( (uint64_t)&v158,  &demangling cache variable for type metadata for AttributedString._AttributeValue?);
      if ((v113 & 1) == 0) {
        goto LABEL_220;
      }
LABEL_167:
      uint64_t v38 = v135;
      if (v86) {
        continue;
      }
      goto LABEL_133;
    }

    break;
  }

  outlined destroy of Any?( (uint64_t)v165,  &demangling cache variable for type metadata for AttributedString._AttributeValue?);
  outlined destroy of Any?( (uint64_t)&v166,  &demangling cache variable for type metadata for AttributedString._AttributeValue?);
  outlined destroy of AttributedString._AttributeValue((uint64_t)&v171);
  outlined destroy of AttributedString._AttributeValue((uint64_t)v157);
LABEL_219:
  outlined destroy of Any?( (uint64_t)&v158,  (uint64_t *)&demangling cache variable for type metadata for (AttributedString._AttributeValue?, AttributedString._AttributeValue?));
LABEL_220:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  return 1LL;
}

          swift_unknownObjectRelease();
          swift_unknownObjectRelease();
          unint64_t v6 = v54 & 0xFFFFFFFFFFFFF0FFLL | (v77 << 8);
        }

        else
        {
          unint64_t v6 = ((-15LL << ((4 * v54 + 8) & 0x3C)) - 1) & v54 | ((unint64_t)*(unsigned __int16 *)(v51 + 16) << ((4 * v54 + 8) & 0x3C));
          swift_unknownObjectRetain();
          __int128 v9 = 0LL;
          __int128 v7 = 0LL;
        }

        swift_unknownObjectRetain();
        __int128 v8 = specialized Rope._Node.distanceFromStart<A>(to:in:)(v80, v6, v7, v51, v53);
        __n128 result = (uint64_t *)swift_unknownObjectRelease_n();
        a3 = v82;
      }

      else
      {
        __int128 v9 = 0LL;
        __int128 v7 = 0LL;
        unint64_t v6 = 0LL;
        __int128 v8 = 0LL;
      }

      __int128 v13 = __OFSUB__(v49, v9);
      __int128 v9 = v49 - v9;
      char v50 = v81;
      if (v13) {
        goto LABEL_198;
      }
LABEL_100:
      unint64_t v5 = v80;
      if (v9 == v50) {
        return (uint64_t *)v11;
      }
    }
  }

  __int128 v11 = 0LL;
  while (1)
  {
    __int128 v13 = __OFADD__(v11++, 1LL);
    if (v13) {
      goto LABEL_175;
    }
    __int128 v14 = a3[8];
    __int128 v15 = a3[11];
    int v85 = v5;
    __int128 v86 = v6;
    __int128 v87 = v7;
    __int128 v13 = __OFADD__(v8++, 1LL);
    if (v13)
    {
LABEL_176:
      __break(1u);
LABEL_177:
      __break(1u);
LABEL_178:
      __break(1u);
LABEL_179:
      __break(1u);
LABEL_180:
      __break(1u);
LABEL_181:
      __break(1u);
LABEL_182:
      __break(1u);
LABEL_183:
      __break(1u);
      goto LABEL_184;
    }

    if (v5 != v15) {
      goto LABEL_177;
    }
    if (v7)
    {
      __int128 v16 = *(void *)(v7 + 24 * ((v6 >> ((4 * *(_BYTE *)(v7 + 18) + 8) & 0x3C)) & 0xF) + 24);
      swift_unknownObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }

    else
    {
      swift_unknownObjectRetain();
      __int128 v16 = specialized Rope._Node.subscript.getter(v6, v14);
    }

    swift_bridgeObjectRelease();
    __n128 result = (uint64_t *)swift_bridgeObjectRelease();
    __int128 v13 = __OFADD__(v9, v16);
    v9 += v16;
    if (v13) {
      goto LABEL_178;
    }
    if (v14)
    {
      uint64_t v17 = ((-15LL << ((4 * *(_BYTE *)(v14 + 18) + 8) & 0x3C)) - 1) & (unint64_t)*(unsigned __int8 *)(v14 + 18) | ((unint64_t)*(unsigned __int16 *)(v14 + 16) << ((4 * *(_BYTE *)(v14 + 18) + 8) & 0x3C));
      __n128 result = (uint64_t *)swift_unknownObjectRetain();
    }

    else
    {
      uint64_t v17 = 0LL;
    }

    uint64_t v18 = a5;
    if (v6 >= v17) {
      goto LABEL_179;
    }
    if (v7)
    {
      unint64_t v19 = (4 * *(_BYTE *)(v7 + 18) + 8) & 0x3C;
      int64_t v20 = ((v6 >> v19) & 0xF) + 1;
      if (v20 < *(unsigned __int16 *)(v7 + 16))
      {
        unint64_t v6 = (v20 << v19) | ((-15LL << v19) - 1) & v6;
        __n128 result = (uint64_t *)swift_unknownObjectRelease_n();
        goto LABEL_24;
      }
    }

    uint64_t v21 = *(unsigned __int8 *)(v14 + 18);
    uint64_t v22 = (4 * v21 + 8) & 0x3C;
    uint64_t v23 = (v6 >> v22) & 0xF;
    char v84 = v23;
    if (v21)
    {
      swift_unknownObjectRetain();
      unint64_t v24 = specialized closure #1 in Rope._Node.formSuccessor(of:)(v14 + 24, &v84, (uint64_t)&v85, v14, v21);
      __n128 result = (uint64_t *)swift_unknownObjectRelease();
      if ((v24 & 1) != 0)
      {
        __n128 result = (uint64_t *)swift_unknownObjectRelease_n();
        unint64_t v5 = v85;
        unint64_t v6 = v86;
        __int128 v7 = v87;
        goto LABEL_24;
      }
    }

    else
    {
      unint64_t v25 = v23 + 1;
      if (v23 + 1 < (unint64_t)*(unsigned __int16 *)(v14 + 16))
      {
        __n128 result = (uint64_t *)swift_unknownObjectRelease_n();
        unint64_t v6 = (v25 << v22) | ((-15LL << v22) - 1) & v6;
        __int128 v7 = v14;
LABEL_24:
        a3 = v82;
        if (v9 < a5) {
          goto LABEL_3;
        }
        goto LABEL_30;
      }
    }

    if (v14)
    {
      char v26 = *(unsigned __int8 *)(v14 + 18);
      unint64_t v27 = *(unsigned __int16 *)(v14 + 16);
      __n128 result = (uint64_t *)swift_unknownObjectRelease_n();
      unint64_t v6 = ((-15LL << ((4 * v26 + 8) & 0x3C)) - 1) & v26 | (unint64_t)(v27 << ((4 * v26 + 8) & 0x3C));
    }

    else
    {
      unint64_t v6 = 0LL;
    }

    a3 = v82;
    __int128 v7 = 0LL;
    int v85 = v5;
    if (v9 < a5)
    {
LABEL_3:
      __int128 v12 = v81;
      goto LABEL_4;
    }

          unint64_t v131 = 0LL;
          *(void *)&__int128 v200 = v180;
          *((void *)&v200 + 1) = v184;
          __int128 v201 = v185;
          *(void *)&__int128 v202 = v9;
          *((void *)&v202 + 1) = v129;
          unint64_t v132 = 40LL;
          *(void *)&uint64_t v203 = v7;
          *((void *)&v203 + 1) = v8;
          __int128 v199 = v129;
          while (1)
          {
            uint64_t v133 = v131 + 1;
            if (__OFADD__(v131, 1LL)) {
              break;
            }
            if (*(void *)(v74 + v132))
            {
              swift_bridgeObjectRetain();
              uint64_t v140 = (unint64_t *)(v74 + 40);
              uint64_t v141 = (char *)MEMORY[0x18961AFE8];
              do
              {
                uint64_t v142 = *v140;
                if (*v140)
                {
                  uint64_t v143 = *(v140 - 1);
                  if ((v142 & 0x2000000000000000LL) != 0 ? HIBYTE(v142) & 0xF : v143 & 0xFFFFFFFFFFFFLL)
                  {
                    if ((v142 & 0x1000000000000000LL) != 0)
                    {
                      uint64_t v145 = _StringGuts.foreignErrorCorrectedScalar(startingAt:)();
                    }

                    else
                    {
                      if ((v142 & 0x2000000000000000LL) != 0)
                      {
                        *(void *)&__int128 v221 = *(v140 - 1);
                        *((void *)&v221 + 1) = v142 & 0xFFFFFFFFFFFFFFLL;
                        swift_bridgeObjectRetain();
                      }

                      else
                      {
                        if ((v143 & 0x1000000000000000LL) == 0) {
                          _StringObject.sharedUTF8.getter();
                        }
                        swift_bridgeObjectRetain();
                      }

                      uint64_t v145 = _decodeScalar(_:startingAt:)();
                      swift_bridgeObjectRelease();
                    }

                    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
                      uint64_t v141 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  *((void *)v141 + 2) + 1LL,  1,  v141);
                    }
                    unint64_t v147 = *((void *)v141 + 2);
                    uint64_t v146 = *((void *)v141 + 3);
                    if (v147 >= v146 >> 1) {
                      uint64_t v141 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (char *)(v146 > 1),  v147 + 1,  1,  v141);
                    }
                    *((void *)v141 + 2) = v147 + 1;
                    *(_DWORD *)&v141[4 * v147 + 32] = v145;
                  }
                }

                v140 += 2;
                --v128;
              }

              while (v128);
              swift_bridgeObjectRelease();
              BigString.unicodeScalars.getter();
              BigString.UnicodeScalarView.subscript.getter();
              outlined release of Locale((uint64_t)v241);
              uint64_t v148 = BigSubstring.UnicodeScalarView._findFirstScalarBoundary(for:)((uint64_t)v141);
              unint64_t v150 = v149;
              unint64_t v152 = v151;
              uint64_t v29 = v153;
              swift_bridgeObjectRelease();
              outlined release of Locale((uint64_t)&v221);
              outlined release of Locale((uint64_t)v256);
              __n128 result = outlined release of AttributedString.Runs((uint64_t)v244);
              if (v29 != 2)
              {
                if (v174 > v148 >> 10) {
                  goto LABEL_245;
                }
                __int128 v9 = v148;
                __int128 v199 = v150;
                __int128 v7 = v152;
                __int128 v8 = v29;
              }

              goto LABEL_172;
            }

            v132 += 16LL;
            ++v131;
            if (v133 == v128)
            {
              outlined release of Locale((uint64_t)v256);
              goto LABEL_171;
            }
          }

          unint64_t v132 = 0LL;
          *(void *)&__int128 v202 = v181;
          *((void *)&v202 + 1) = v185;
          uint64_t v203 = v186;
          *(void *)&__int128 v204 = v9;
          *((void *)&v204 + 1) = v130;
          uint64_t v133 = 40LL;
          *(void *)&uint64_t v205 = v7;
          *((void *)&v205 + 1) = v8;
          __int128 v201 = v130;
          while (1)
          {
            unint64_t v134 = v132 + 1;
            if (__OFADD__(v132, 1LL)) {
              break;
            }
            if (*(void *)(v75 + v133))
            {
              swift_bridgeObjectRetain();
              uint64_t v141 = (unint64_t *)(v75 + 40);
              uint64_t v142 = (char *)MEMORY[0x18961AFE8];
              do
              {
                uint64_t v143 = *v141;
                if (*v141)
                {
                  uint64_t v144 = *(v141 - 1);
                  if ((v143 & 0x2000000000000000LL) != 0 ? HIBYTE(v143) & 0xF : v144 & 0xFFFFFFFFFFFFLL)
                  {
                    if ((v143 & 0x1000000000000000LL) != 0)
                    {
                      uint64_t v146 = _StringGuts.foreignErrorCorrectedScalar(startingAt:)();
                    }

                    else
                    {
                      if ((v143 & 0x2000000000000000LL) != 0)
                      {
                        *(void *)&__int128 v223 = *(v141 - 1);
                        *((void *)&v223 + 1) = v143 & 0xFFFFFFFFFFFFFFLL;
                        swift_bridgeObjectRetain();
                      }

                      else
                      {
                        if ((v144 & 0x1000000000000000LL) == 0) {
                          _StringObject.sharedUTF8.getter();
                        }
                        swift_bridgeObjectRetain();
                      }

                      uint64_t v146 = _decodeScalar(_:startingAt:)();
                      swift_bridgeObjectRelease();
                    }

                    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
                      uint64_t v142 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  *((void *)v142 + 2) + 1LL,  1,  v142);
                    }
                    uint64_t v148 = *((void *)v142 + 2);
                    unint64_t v147 = *((void *)v142 + 3);
                    if (v148 >= v147 >> 1) {
                      uint64_t v142 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (char *)(v147 > 1),  v148 + 1,  1,  v142);
                    }
                    *((void *)v142 + 2) = v148 + 1;
                    *(_DWORD *)&v142[4 * v148 + 32] = v146;
                  }
                }

                v141 += 2;
                --v129;
              }

              while (v129);
              swift_bridgeObjectRelease();
              BigString.unicodeScalars.getter();
              BigString.UnicodeScalarView.subscript.getter();
              outlined release of Locale((uint64_t)v243);
              unint64_t v149 = BigSubstring.UnicodeScalarView._findFirstScalarBoundary(for:)((uint64_t)v142);
              uint64_t v151 = v150;
              uint64_t v153 = v152;
              uint64_t v29 = v154;
              swift_bridgeObjectRelease();
              outlined release of Locale((uint64_t)&v223);
              outlined release of Locale((uint64_t)v258);
              __n128 result = outlined release of AttributedString.Runs((uint64_t)v246);
              if (v29 != 2)
              {
                if (v176 > v149 >> 10) {
                  goto LABEL_245;
                }
                __int128 v9 = v149;
                __int128 v201 = v151;
                __int128 v7 = v153;
                __int128 v8 = v29;
              }

              goto LABEL_172;
            }

            v133 += 16LL;
            ++v132;
            if (v134 == v129)
            {
              outlined release of Locale((uint64_t)v258);
              goto LABEL_171;
            }
          }

          uint64_t v128 = 0LL;
          *(void *)&__int128 v197 = v176;
          *((void *)&v197 + 1) = v180;
          uint64_t v198 = v181;
          *(void *)&__int128 v199 = v9;
          *((void *)&v199 + 1) = v126;
          uint64_t v129 = 40LL;
          *(void *)&__int128 v200 = v7;
          *((void *)&v200 + 1) = v8;
          __int128 v196 = v126;
          while (1)
          {
            unint64_t v130 = v128 + 1;
            if (__OFADD__(v128, 1LL)) {
              break;
            }
            if (*(void *)(v74 + v129))
            {
              swift_bridgeObjectRetain();
              unint64_t v138 = (unint64_t *)(v74 + 40);
              uint64_t v139 = (char *)MEMORY[0x18961AFE8];
              do
              {
                uint64_t v140 = *v138;
                if (*v138)
                {
                  uint64_t v141 = *(v138 - 1);
                  if ((v140 & 0x2000000000000000LL) != 0 ? HIBYTE(v140) & 0xF : v141 & 0xFFFFFFFFFFFFLL)
                  {
                    if ((v140 & 0x1000000000000000LL) != 0)
                    {
                      uint64_t v143 = _StringGuts.foreignErrorCorrectedScalar(startingAt:)();
                    }

                    else
                    {
                      if ((v140 & 0x2000000000000000LL) != 0)
                      {
                        *(void *)&__int128 v218 = *(v138 - 1);
                        *((void *)&v218 + 1) = v140 & 0xFFFFFFFFFFFFFFLL;
                        swift_bridgeObjectRetain();
                      }

                      else
                      {
                        if ((v141 & 0x1000000000000000LL) == 0) {
                          _StringObject.sharedUTF8.getter();
                        }
                        swift_bridgeObjectRetain();
                      }

                      uint64_t v143 = _decodeScalar(_:startingAt:)();
                      swift_bridgeObjectRelease();
                    }

                    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
                      uint64_t v139 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  *((void *)v139 + 2) + 1LL,  1,  v139);
                    }
                    uint64_t v145 = *((void *)v139 + 2);
                    uint64_t v144 = *((void *)v139 + 3);
                    if (v145 >= v144 >> 1) {
                      uint64_t v139 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (char *)(v144 > 1),  v145 + 1,  1,  v139);
                    }
                    *((void *)v139 + 2) = v145 + 1;
                    *(_DWORD *)&v139[4 * v145 + 32] = v143;
                  }
                }

                v138 += 2;
                --v125;
              }

              while (v125);
              swift_bridgeObjectRelease();
              BigString.unicodeScalars.getter();
              BigString.UnicodeScalarView.subscript.getter();
              outlined release of Locale((uint64_t)v238);
              uint64_t v146 = BigSubstring.UnicodeScalarView._findFirstScalarBoundary(for:)((uint64_t)v139);
              a1 = v147;
              unint64_t v149 = v148;
              uint64_t v29 = v150;
              swift_bridgeObjectRelease();
              outlined release of Locale((uint64_t)&v218);
              outlined release of Locale((uint64_t)v253);
              __n128 result = outlined release of AttributedString.Runs((uint64_t)v241);
              if (v29 != 2)
              {
                if (v170 > v146 >> 10) {
                  goto LABEL_245;
                }
                __int128 v9 = v146;
                __int128 v196 = a1;
                __int128 v7 = v149;
                __int128 v8 = v29;
              }

              goto LABEL_172;
            }

            v129 += 16LL;
            ++v128;
            if (v130 == v125)
            {
              outlined release of Locale((uint64_t)v253);
              goto LABEL_171;
            }
          }

uint64_t AttributedString.Runs.AttributesSlice3.subscript.getter( uint64_t result, uint64_t a2, uint64_t a3, unint64_t *a4, unint64_t *a5, void *a6)
{
  unint64_t v339 = a6;
  unint64_t v7 = *a5;
  unint64_t v8 = a5[1];
  unint64_t v344 = a5[2];
  unint64_t v345 = v8;
  uint64_t v343 = a5[3];
  __int128 v9 = *v6;
  __int128 v10 = v6[1];
  __int128 v11 = v6[2];
  v434[3] = v6[3];
  v434[2] = v11;
  v434[0] = v9;
  v434[1] = v10;
  __int128 v12 = v6[4];
  __int128 v13 = v6[5];
  __int128 v14 = v6[6];
  __int128 v438 = v6[7];
  __int128 v437 = v14;
  __int128 v435 = v12;
  __int128 v436 = v13;
  __int128 v15 = v6[8];
  __int128 v16 = v6[9];
  __int128 v17 = v6[10];
  __int128 v18 = v6[11];
  unint64_t v443 = *((void *)v6 + 24);
  __int128 v442 = v18;
  __int128 v441 = v17;
  __int128 v439 = v15;
  unint64_t v352 = v7;
  unint64_t v19 = v7 >> 10;
  __int128 v440 = v16;
  if (v19 < *((void *)&v15 + 1) >> 10) {
    goto LABEL_381;
  }
  unint64_t v331 = *((void *)&v441 + 1) >> 10;
  if (*((void *)&v441 + 1) >> 10 < v19) {
    goto LABEL_381;
  }
  uint64_t v348 = *((void *)v6 + 25);
  uint64_t v20 = *(void *)(v348 + 16);
  if (!v20)
  {
LABEL_382:
    __break(1u);
LABEL_383:
    __break(1u);
    goto LABEL_384;
  }

  uint64_t v21 = *(void *)&v434[0];
  unint64_t v22 = *(void *)(*(void *)&v434[0] + 64LL);
  uint64_t v23 = *(void *)(*(void *)&v434[0] + 80LL);
  if (v22) {
    int64_t v24 = *(void *)(*(void *)&v434[0] + 80LL);
  }
  else {
    int64_t v24 = 0LL;
  }
  unint64_t v358 = (__int128 *)(v352 >> 11);
  unint64_t v334 = v19;
  uint64_t v357 = *((void *)v6 + 26);
  unint64_t v338 = *((void *)&v440 + 1);
  uint64_t v340 = v440;
  unint64_t v332 = v441;
  unint64_t v320 = *((void *)&v442 + 1);
  unint64_t v321 = v442;
  uint64_t v318 = a3;
  unint64_t v319 = v443;
  uint64_t v25 = *(void *)(*(void *)&v434[0] + 72LL);
  uint64_t v26 = *(void *)(*(void *)&v434[0] + 88LL);
  uint64_t v341 = (char *)(*((void *)&v15 + 1) >> 10);
  unint64_t v342 = v26;
  uint64_t v349 = *(void *)&v434[0];
  uint64_t v354 = v20;
  __int128 v315 = a4;
  uint64_t v316 = result;
  uint64_t v317 = a2;
  unint64_t v322 = *((void *)&v441 + 1);
  uint64_t v346 = *((void *)&v15 + 1);
  if (v22 && (uint64_t)v358 < v23 && *(_WORD *)(v22 + 16))
  {
    uint64_t v27 = *(unsigned __int8 *)(v22 + 18);
    if (*(_BYTE *)(v22 + 18))
    {
      swift_unknownObjectRetain_n();
      __n128 result = outlined retain of AttributedString.Runs((uint64_t)v434);
      uint64_t v28 = v358;
      unint64_t v29 = v22;
      while (1)
      {
        uint64_t v32 = *(unsigned __int16 *)(v29 + 16);
        if (!*(_WORD *)(v29 + 16)) {
          goto LABEL_14;
        }
        uint64_t v33 = *(void *)(v29 + 40);
        BOOL v34 = __OFSUB__(v28, v33);
        unint64_t v35 = (__int128 *)((char *)v28 - v33);
        if (v34) {
          goto LABEL_373;
        }
        if (__OFADD__(v35, 1LL)) {
          goto LABEL_374;
        }
        if ((uint64_t)v35 + 1 < 1)
        {
          uint64_t v32 = 0LL;
          goto LABEL_15;
        }

        if ((_DWORD)v32 == 1) {
          break;
        }
        uint64_t v36 = (uint64_t *)(v29 + 64);
        uint64_t v37 = 1LL;
        while (1)
        {
          uint64_t v38 = *v36;
          v36 += 3;
          uint64_t v28 = (__int128 *)((char *)v35 - v38);
          if (__OFSUB__(v35, v38)) {
            goto LABEL_366;
          }
          if (__OFADD__(v28, 1LL))
          {
LABEL_367:
            __break(1u);
LABEL_368:
            __break(1u);
LABEL_369:
            __break(1u);
LABEL_370:
            __break(1u);
            goto LABEL_371;
          }

          ++v37;
          unint64_t v35 = v28;
          if (v32 == v37) {
            goto LABEL_14;
          }
        }

        uint64_t v32 = v37;
        uint64_t v28 = v35;
LABEL_15:
        char v30 = (4 * *(_BYTE *)(v29 + 18) + 8) & 0x3C;
        uint64_t v27 = ((-15LL << v30) - 1) & v27 | (v32 << v30);
        unint64_t v31 = *(void *)(v29 + 24 + 24 * v32);
        swift_unknownObjectRetain();
        __n128 result = swift_unknownObjectRelease();
        unint64_t v29 = v31;
        if (!*(_BYTE *)(v31 + 18)) {
          goto LABEL_32;
        }
      }

      uint64_t v28 = v35;
LABEL_14:
      if (!v28) {
        goto LABEL_15;
      }
LABEL_371:
      __break(1u);
LABEL_372:
      __break(1u);
LABEL_373:
      __break(1u);
LABEL_374:
      __break(1u);
LABEL_375:
      __break(1u);
LABEL_376:
      __break(1u);
LABEL_377:
      __break(1u);
LABEL_378:
      __break(1u);
LABEL_379:
      __break(1u);
      goto LABEL_380;
    }

    swift_unknownObjectRetain_n();
    __n128 result = outlined retain of AttributedString.Runs((uint64_t)v434);
    uint64_t v28 = v358;
    unint64_t v31 = v22;
LABEL_32:
    uint64_t v41 = *(unsigned __int16 *)(v31 + 16);
    if (*(_WORD *)(v31 + 16))
    {
      uint64_t v42 = *(void *)(v31 + 24);
      BOOL v34 = __OFSUB__(v28, v42);
      uint64_t v43 = (__int128 *)((char *)v28 - v42);
      uint64_t v21 = v349;
      if (v34)
      {
LABEL_414:
        __break(1u);
        goto LABEL_415;
      }

      uint64_t v44 = v31;
      uint64_t v20 = v354;
      if (__OFADD__(v43, 1LL))
      {
LABEL_415:
        __break(1u);
        goto LABEL_416;
      }

      if ((uint64_t)v43 + 1 < 1)
      {
        uint64_t v41 = 0LL;
      }

      else
      {
        if ((_DWORD)v41 == 1)
        {
          uint64_t v28 = v43;
          goto LABEL_45;
        }

        uint64_t v45 = (uint64_t *)(v44 + 48);
        uint64_t v46 = 1LL;
        while (1)
        {
          uint64_t v47 = *v45;
          v45 += 3;
          uint64_t v28 = (__int128 *)((char *)v43 - v47);
          if (__OFSUB__(v43, v47)) {
            goto LABEL_397;
          }
          if (__OFADD__(v28, 1LL)) {
            goto LABEL_398;
          }
          ++v46;
          uint64_t v43 = v28;
          if (v41 == v46) {
            goto LABEL_45;
          }
        }

        uint64_t v41 = v46;
        uint64_t v28 = v43;
      }

LABEL_396:
              __break(1u);
LABEL_397:
              __break(1u);
LABEL_398:
              __break(1u);
LABEL_399:
              __break(1u);
LABEL_400:
              __break(1u);
              goto LABEL_401;
            }

                      outlined destroy of Any?( (uint64_t)&v380,  &demangling cache variable for type metadata for AttributedString._AttributeValue?);
                      uint64_t v284 = v312;
                      *uint64_t v312 = xmmword_183723F60;
                      *((_BYTE *)v284 + 20) = 0;
                      *((_DWORD *)v284 + 4) = 0;
LABEL_397:
                      if (one-time initialization token for name == -1)
                      {
                        if (*(void *)(v8 + 16)) {
                          goto LABEL_399;
                        }
                      }

                      else
                      {
                        swift_once();
                        if (*(void *)(v8 + 16))
                        {
LABEL_399:
                          uint64_t v285 = qword_18C5D2BB8;
                          unint64_t v286 = static AttributeScopes.FoundationAttributes.AgreementArgumentAttribute.name;
                          swift_bridgeObjectRetain();
                          char v287 = specialized __RawDictionaryStorage.find<A>(_:)(v286, v285);
                          if ((v288 & 1) != 0)
                          {
                            outlined init with copy of AttributedString._AttributeValue( *(void *)(v8 + 56) + 72 * v287,  (uint64_t)&v380);
                          }

                          else
                          {
                            __int128 v384 = 0LL;
                            uint64_t v382 = 0u;
                            __int128 v383 = 0u;
                            __int128 v380 = 0u;
                            __int128 v381 = 0u;
                          }

                          swift_bridgeObjectRelease();
                          if (*((void *)&v381 + 1))
                          {
                            outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>( (uint64_t)&v380,  (uint64_t)v364);
                            __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Hashable & Sendable);
                            swift_dynamicCast();
                            outlined destroy of AttributedString._AttributeValue((uint64_t)&v380);
                            uint64_t v289 = 0;
                            goto LABEL_407;
                          }

LABEL_422:
  __break(1u);
  return result;
}

double protocol witness for BidirectionalCollection.formIndex(before:) in conformance AttributedString.Runs.AttributesSlice3<A, B, C>( _OWORD *a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for BidirectionalCollection.formIndex(before:) in conformance AttributedString.Runs.AttributesSlice1<A>( a1,  a2,  a3,  (void (*)(_OWORD *__return_ptr))AttributedString.Runs.AttributesSlice3.index(before:));
}

void (*protocol witness for Collection.subscript.read in conformance AttributedString.Runs.AttributesSlice3<A, B, C>( void *a1, unint64_t *a2, void *a3))(uint64_t *a1, uint64_t a2)
{
  unint64_t v6 = malloc(0x60uLL);
  *a1 = v6;
  swift_getAssociatedTypeWitness();
  *unint64_t v6 = type metadata accessor for Optional();
  swift_getAssociatedTypeWitness();
  v6[1] = type metadata accessor for Optional();
  swift_getAssociatedTypeWitness();
  v6[2] = type metadata accessor for Optional();
  v6[3] = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Range<AttributedString.Index>);
  uint64_t TupleTypeMetadata = (int *)swift_getTupleTypeMetadata();
  v6[8] = TupleTypeMetadata;
  uint64_t v8 = *((void *)TupleTypeMetadata - 1);
  v6[9] = v8;
  __int128 v9 = (char *)malloc(*(void *)(v8 + 64));
  v6[10] = v9;
  __int128 v10 = AttributedString.Runs.AttributesSlice3.subscript.read(v6 + 4, a2, a3);
  uint64_t v12 = v11;
  uint64_t v14 = v13;
  v6[11] = v10;
  uint64_t v16 = *v15;
  __int128 v17 = (_OWORD *)v15[1];
  uint64_t v18 = type metadata accessor for Optional();
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v18 - 8) + 16LL))(v9, v12, v18);
  unint64_t v19 = &v9[TupleTypeMetadata[12]];
  uint64_t v20 = type metadata accessor for Optional();
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v20 - 8) + 16LL))(v19, v14, v20);
  uint64_t v21 = &v9[TupleTypeMetadata[16]];
  uint64_t v22 = type metadata accessor for Optional();
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v22 - 8) + 16LL))(v21, v16, v22);
  uint64_t v23 = &v9[TupleTypeMetadata[20]];
  __int128 v24 = v17[1];
  __int128 v25 = v17[2];
  __int128 v26 = v17[3];
  *(_OWORD *)uint64_t v23 = *v17;
  *((_OWORD *)v23 + 1) = v24;
  *((_OWORD *)v23 + 2) = v25;
  *((_OWORD *)v23 + 3) = v26;
  return protocol witness for Collection.subscript.read in conformance AttributedString.Runs.AttributesSlice3<A, B, C>;
}

void protocol witness for Collection.subscript.read in conformance AttributedString.Runs.AttributesSlice3<A, B, C>( uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = *a1 + 32;
  (*(void (**)(void, void))(*(void *)(*a1 + 72) + 8LL))(*(void *)(*a1 + 80), *(void *)(*a1 + 64));
  unint64_t v5 = *(void **)(v3 + 80);
  (*(void (**)(uint64_t, uint64_t))(v3 + 88))(v4, a2);
  free(v5);
  free((void *)v3);
}

void (*AttributedString.Runs.AttributesSlice3.subscript.read( void *a1, unint64_t *a2, void *a3))(uint64_t a1)
{
  unint64_t v6 = malloc(0x48uLL);
  *a1 = v6;
  swift_getAssociatedTypeWitness();
  *unint64_t v6 = type metadata accessor for Optional();
  swift_getAssociatedTypeWitness();
  v6[1] = type metadata accessor for Optional();
  swift_getAssociatedTypeWitness();
  v6[2] = type metadata accessor for Optional();
  v6[3] = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Range<AttributedString.Index>);
  uint64_t TupleTypeMetadata = (int *)swift_getTupleTypeMetadata();
  v6[6] = TupleTypeMetadata;
  uint64_t v8 = *((void *)TupleTypeMetadata - 1);
  v6[7] = v8;
  __int128 v9 = (char *)malloc(*(void *)(v8 + 64));
  v6[8] = v9;
  uint64_t v10 = (uint64_t)&v9[TupleTypeMetadata[12]];
  uint64_t v11 = (uint64_t)&v9[TupleTypeMetadata[16]];
  uint64_t v12 = (unint64_t *)&v9[TupleTypeMetadata[20]];
  AttributedString.Runs.AttributesSlice3.subscript.getter((uint64_t)v9, v10, v11, v12, a2, a3);
  v6[4] = v11;
  v6[5] = v12;
  return AttributedString.Runs.AttributesSlice3.subscript.read;
}

void AttributedString.Runs.AttributesSlice3.subscript.read(uint64_t a1)
{
  uint64_t v1 = *(void **)a1;
  uint64_t v2 = *(void **)(*(void *)a1 + 64LL);
  (*(void (**)(void *, void))(*(void *)(*(void *)a1 + 56LL) + 8LL))( v2,  *(void *)(*(void *)a1 + 48LL));
  free(v2);
  free(v1);
}

uint64_t protocol witness for Collection.index(_:offsetBy:) in conformance AttributedString.Runs.AttributesSlice3<A, B, C>( uint64_t a1, uint64_t a2, uint64_t a3)
{
  return BidirectionalCollection.index(_:offsetBy:)();
}

uint64_t protocol witness for Collection.index(_:offsetBy:limitedBy:) in conformance AttributedString.Runs.AttributesSlice3<A, B, C>( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return BidirectionalCollection.index(_:offsetBy:limitedBy:)();
}

void protocol witness for Collection.distance(from:to:) in conformance AttributedString.Runs.AttributesSlice3<A, B, C>( uint64_t a1, uint64_t a2, uint64_t a3)
{
}

double protocol witness for Collection.formIndex(after:) in conformance AttributedString.Runs.AttributesSlice3<A, B, C>( _OWORD *a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for BidirectionalCollection.formIndex(before:) in conformance AttributedString.Runs.AttributesSlice1<A>( a1,  a2,  a3,  (void (*)(_OWORD *__return_ptr))AttributedString.Runs.AttributesSlice3.index(after:));
}

uint64_t protocol witness for Sequence.makeIterator() in conformance AttributedString.Runs.AttributesSlice3<A, B, C>( uint64_t a1, uint64_t a2)
{
  return protocol witness for Sequence.makeIterator() in conformance AttributedString.Runs.AttributesSlice1<A>( a1,  a2,  (void (*)(void))AttributedString.Runs.AttributesSlice3.makeIterator());
}

uint64_t protocol witness for Sequence.underestimatedCount.getter in conformance AttributedString.Runs.AttributesSlice3<A, B, C>( uint64_t a1)
{
  return Collection.underestimatedCount.getter();
}

uint64_t protocol witness for Sequence._copyToContiguousArray() in conformance AttributedString.Runs.AttributesSlice3<A, B, C>( uint64_t a1)
{
  return Collection._copyToContiguousArray()();
}

double AttributedString.Runs.subscript.getter@<D0>( uint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v12 = *a1;
  uint64_t v13 = *a2;
  uint64_t v14 = *a3;
  __int128 v15 = *(_OWORD *)(v7 + 176);
  v22[10] = *(_OWORD *)(v7 + 160);
  v22[11] = v15;
  uint64_t v23 = *(void *)(v7 + 192);
  __int128 v16 = *(_OWORD *)(v7 + 112);
  v22[6] = *(_OWORD *)(v7 + 96);
  v22[7] = v16;
  __int128 v17 = *(_OWORD *)(v7 + 144);
  v22[8] = *(_OWORD *)(v7 + 128);
  v22[9] = v17;
  __int128 v18 = *(_OWORD *)(v7 + 48);
  v22[2] = *(_OWORD *)(v7 + 32);
  v22[3] = v18;
  __int128 v19 = *(_OWORD *)(v7 + 80);
  v22[4] = *(_OWORD *)(v7 + 64);
  v22[5] = v19;
  __int128 v20 = *(_OWORD *)(v7 + 16);
  v22[0] = *(_OWORD *)v7;
  v22[1] = v20;
  outlined retain of AttributedString.Runs((uint64_t)v22);
  *(void *)&double result = AttributedString.Runs.AttributesSlice3.init(runs:)( v7,  *(void *)(v12 + *MEMORY[0x18961A9A8] + 8LL),  *(void *)(v13 + *MEMORY[0x18961A9A8] + 8LL),  *(void *)(v14 + *MEMORY[0x18961A9A8] + 8LL),  a4,  a5,  a6,  a7).n128_u64[0];
  return result;
}

__n128 AttributedString.Runs.AttributesSlice4.init(runs:)@<Q0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X7>, uint64_t a8@<X8>, uint64_t a9)
{
  uint64_t v17 = swift_allocObject();
  *(_OWORD *)(v17 + 16) = xmmword_183729E20;
  *(void *)(v17 + 32) = (*(uint64_t (**)(uint64_t, uint64_t))(a5 + 24))(a2, a5);
  *(void *)(v17 + 40) = v18;
  *(void *)(v17 + 48) = (*(uint64_t (**)(uint64_t, uint64_t))(a6 + 24))(a3, a6);
  *(void *)(v17 + 56) = v19;
  *(void *)(v17 + 64) = (*(uint64_t (**)(uint64_t, uint64_t))(a7 + 24))(a4, a7);
  *(void *)(v17 + 72) = v20;
  *(void *)(v17 + 80) = (*(uint64_t (**)(void))(a9 + 24))();
  *(void *)(v17 + 88) = v21;
  (*(void (**)(void *__return_ptr, uint64_t, uint64_t))(a5 + 32))(v39, a2, a5);
  uint64_t v22 = v39[0];
  uint64_t v23 = v39[1];
  (*(void (**)(void *__return_ptr, uint64_t, uint64_t))(a6 + 32))(v38, a3, a6);
  uint64_t v24 = v38[0];
  uint64_t v25 = v38[1];
  (*(void (**)(void *__return_ptr, uint64_t, uint64_t))(a7 + 32))(v37, a4, a7);
  uint64_t v26 = v37[0];
  uint64_t v27 = v37[1];
  (*(void (**)(uint64_t *__return_ptr))(a9 + 32))(v36);
  uint64_t v28 = specialized RangeReplaceableCollection.init(_contents:_:_:_:)(v22, v23, v24, v25, v26, v27, v36[0], v36[1]);
  outlined consume of AttributedString.AttributeRunBoundaries?(v26, v27);
  outlined consume of AttributedString.AttributeRunBoundaries?(v24, v25);
  outlined consume of AttributedString.AttributeRunBoundaries?(v22, v23);
  __int128 v29 = *(_OWORD *)(a1 + 176);
  *(_OWORD *)(a8 + 160) = *(_OWORD *)(a1 + 160);
  *(_OWORD *)(a8 + 176) = v29;
  uint64_t v30 = *(void *)(a1 + 192);
  __int128 v31 = *(_OWORD *)(a1 + 112);
  *(_OWORD *)(a8 + 96) = *(_OWORD *)(a1 + 96);
  *(_OWORD *)(a8 + 112) = v31;
  __int128 v32 = *(_OWORD *)(a1 + 144);
  *(_OWORD *)(a8 + 128) = *(_OWORD *)(a1 + 128);
  *(_OWORD *)(a8 + 144) = v32;
  __int128 v33 = *(_OWORD *)(a1 + 48);
  *(_OWORD *)(a8 + 32) = *(_OWORD *)(a1 + 32);
  *(_OWORD *)(a8 + 48) = v33;
  __int128 v34 = *(_OWORD *)(a1 + 80);
  *(_OWORD *)(a8 + 64) = *(_OWORD *)(a1 + 64);
  *(_OWORD *)(a8 + 80) = v34;
  __n128 result = *(__n128 *)(a1 + 16);
  *(_OWORD *)a8 = *(_OWORD *)a1;
  *(__n128 *)(a8 + 16) = result;
  *(void *)(a8 + 192) = v30;
  *(void *)(a8 + 200) = v17;
  *(void *)(a8 + 208) = v28;
  return result;
}

uint64_t AttributedString.Runs.AttributesSlice4.subscript.getter( uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t *a5, unint64_t *a6, void *a7)
{
  unint64_t v8 = *a6;
  unint64_t v9 = a6[1];
  unint64_t v356 = a6[2];
  unint64_t v357 = v9;
  unint64_t v10 = a6[3];
  uint64_t v354 = a7;
  uint64_t v355 = v10;
  __int128 v11 = *v7;
  __int128 v12 = v7[1];
  __int128 v13 = v7[2];
  v445[3] = v7[3];
  v445[2] = v13;
  v445[0] = v11;
  v445[1] = v12;
  __int128 v14 = v7[4];
  __int128 v15 = v7[5];
  __int128 v16 = v7[6];
  __int128 v449 = v7[7];
  __int128 v448 = v16;
  __int128 v446 = v14;
  __int128 v447 = v15;
  __int128 v17 = v7[8];
  __int128 v18 = v7[9];
  __int128 v19 = v7[10];
  __int128 v20 = v7[11];
  unint64_t v454 = *((void *)v7 + 24);
  __int128 v453 = v20;
  __int128 v452 = v19;
  __int128 v450 = v17;
  unint64_t v363 = v8;
  unint64_t v21 = v8 >> 10;
  __int128 v451 = v18;
  if (v21 < *((void *)&v17 + 1) >> 10) {
    goto LABEL_393;
  }
  unint64_t v340 = *((void *)&v452 + 1) >> 10;
  if (*((void *)&v452 + 1) >> 10 < v21) {
    goto LABEL_393;
  }
  uint64_t v22 = *((void *)v7 + 25);
  uint64_t v23 = *(void *)(v22 + 16);
  if (!v23)
  {
LABEL_394:
    __break(1u);
LABEL_395:
    __break(1u);
    goto LABEL_396;
  }

  uint64_t v24 = *(void *)&v445[0];
  unint64_t v25 = *(void *)(*(void *)&v445[0] + 64LL);
  uint64_t v26 = *(void *)(*(void *)&v445[0] + 80LL);
  if (v25) {
    int64_t v27 = *(void *)(*(void *)&v445[0] + 80LL);
  }
  else {
    int64_t v27 = 0LL;
  }
  uint64_t v369 = (__int128 *)(v363 >> 11);
  unint64_t v343 = v21;
  uint64_t v368 = *((void *)v7 + 26);
  unint64_t v341 = *((void *)&v451 + 1);
  unint64_t v348 = v451;
  uint64_t v339 = v452;
  unint64_t v331 = *((void *)&v453 + 1);
  unint64_t v332 = v453;
  uint64_t v329 = a4;
  unint64_t v330 = v454;
  uint64_t v28 = *(void *)(*(void *)&v445[0] + 72LL);
  uint64_t v353 = *(void *)(*(void *)&v445[0] + 88LL);
  v350 = (char *)*((void *)&v17 + 1);
  uint64_t v351 = v22;
  uint64_t v364 = v23;
  unint64_t v325 = a5;
  uint64_t v326 = result;
  uint64_t v327 = a2;
  uint64_t v328 = a3;
  unint64_t v333 = *((void *)&v452 + 1);
  unint64_t v349 = *((void *)&v17 + 1) >> 10;
  if (v25 && (uint64_t)v369 < v26 && *(_WORD *)(v25 + 16))
  {
    unint64_t v371 = v28;
    uint64_t v29 = *(unsigned __int8 *)(v25 + 18);
    if (*(_BYTE *)(v25 + 18))
    {
      swift_unknownObjectRetain_n();
      __n128 result = outlined retain of AttributedString.Runs((uint64_t)v445);
      uint64_t v30 = v369;
      unint64_t v31 = v25;
      while (1)
      {
        uint64_t v34 = *(unsigned __int16 *)(v31 + 16);
        if (!*(_WORD *)(v31 + 16)) {
          goto LABEL_14;
        }
        uint64_t v35 = *(void *)(v31 + 40);
        BOOL v36 = __OFSUB__(v30, v35);
        uint64_t v37 = (__int128 *)((char *)v30 - v35);
        if (v36) {
          goto LABEL_385;
        }
        if (__OFADD__(v37, 1LL)) {
          goto LABEL_386;
        }
        if ((uint64_t)v37 + 1 < 1)
        {
          uint64_t v34 = 0LL;
          goto LABEL_15;
        }

        if ((_DWORD)v34 == 1) {
          break;
        }
        uint64_t v38 = (uint64_t *)(v31 + 64);
        uint64_t v39 = 1LL;
        while (1)
        {
          uint64_t v40 = *v38;
          v38 += 3;
          uint64_t v30 = (__int128 *)((char *)v37 - v40);
          if (__OFSUB__(v37, v40)) {
            goto LABEL_378;
          }
          if (__OFADD__(v30, 1LL))
          {
LABEL_379:
            __break(1u);
LABEL_380:
            __break(1u);
LABEL_381:
            __break(1u);
LABEL_382:
            __break(1u);
            goto LABEL_383;
          }

          ++v39;
          uint64_t v37 = v30;
          if (v34 == v39) {
            goto LABEL_14;
          }
        }

        uint64_t v34 = v39;
        uint64_t v30 = v37;
LABEL_15:
        char v32 = (4 * *(_BYTE *)(v31 + 18) + 8) & 0x3C;
        uint64_t v29 = ((-15LL << v32) - 1) & v29 | (v34 << v32);
        uint64_t v33 = *(void *)(v31 + 24 + 24 * v34);
        swift_unknownObjectRetain();
        __n128 result = swift_unknownObjectRelease();
        unint64_t v31 = v33;
        if (!*(_BYTE *)(v33 + 18)) {
          goto LABEL_32;
        }
      }

      uint64_t v30 = v37;
LABEL_14:
      if (!v30) {
        goto LABEL_15;
      }
LABEL_383:
      __break(1u);
LABEL_384:
      __break(1u);
LABEL_385:
      __break(1u);
LABEL_386:
      __break(1u);
LABEL_387:
      __break(1u);
LABEL_388:
      __break(1u);
LABEL_389:
      __break(1u);
LABEL_390:
      __break(1u);
LABEL_391:
      __break(1u);
      goto LABEL_392;
    }

    swift_unknownObjectRetain_n();
    __n128 result = outlined retain of AttributedString.Runs((uint64_t)v445);
    uint64_t v30 = v369;
    uint64_t v33 = v25;
LABEL_32:
    uint64_t v41 = *(unsigned __int16 *)(v33 + 16);
    if (*(_WORD *)(v33 + 16))
    {
      uint64_t v42 = *(void *)(v33 + 24);
      BOOL v36 = __OFSUB__(v30, v42);
      uint64_t v43 = (__int128 *)((char *)v30 - v42);
      uint64_t v22 = v351;
      uint64_t v23 = v364;
      if (v36)
      {
LABEL_426:
        __break(1u);
        goto LABEL_427;
      }

      if (__OFADD__(v43, 1LL))
      {
LABEL_427:
        __break(1u);
        goto LABEL_428;
      }

      if ((uint64_t)v43 + 1 < 1)
      {
        uint64_t v41 = 0LL;
      }

      else
      {
        if ((_DWORD)v41 == 1)
        {
          uint64_t v30 = v43;
          goto LABEL_45;
        }

        uint64_t v44 = (uint64_t *)(v33 + 48);
        uint64_t v45 = 1LL;
        while (1)
        {
          uint64_t v46 = *v44;
          v44 += 3;
          uint64_t v30 = (__int128 *)((char *)v43 - v46);
          if (__OFSUB__(v43, v46)) {
            goto LABEL_409;
          }
          if (__OFADD__(v30, 1LL)) {
            goto LABEL_410;
          }
          ++v45;
          uint64_t v43 = v30;
          if (v41 == v45) {
            goto LABEL_45;
          }
        }

        uint64_t v41 = v45;
        uint64_t v30 = v43;
      }

LABEL_212:
            swift_unknownObjectRelease();
            uint64_t v185 = v352;
            swift_unknownObjectRelease();
            unint64_t v186 = v149 & 0xFFFFFFFFFFFFF0FFLL;
            uint64_t v161 = (uint64_t)v185;
            unint64_t v160 = v186 | (v164 << 8);
            unint64_t v162 = v346;
            goto LABEL_173;
          }

          uint64_t v23 = v364;
LABEL_211:
          if (v150)
          {
LABEL_425:
            __break(1u);
            goto LABEL_426;
          }

          goto LABEL_212;
        }
      }

      else if (v363 >= 0x800)
      {
LABEL_422:
        __break(1u);
LABEL_423:
        __break(1u);
        goto LABEL_424;
      }

      swift_unknownObjectRetain();
      outlined retain of AttributedString.Runs((uint64_t)v445);
      swift_unknownObjectRetain();
      unint64_t v160 = specialized Rope._endPath.getter(v146);
      __n128 result = swift_unknownObjectRelease();
      uint64_t v161 = 0LL;
      uint64_t v150 = 0LL;
      unint64_t v162 = v346;
      if (!v146)
      {
        uint64_t v163 = 0LL;
LABEL_214:
        v350 = (char *)((char *)v369 - (char *)v150);
        if (__OFSUB__(v369, v150))
        {
LABEL_399:
          __break(1u);
          goto LABEL_400;
        }

        __int128 v187 = v162[1];
        v426[3] = *v162;
        v426[4] = v187;
        v426[5] = v162[2];
        __n128 result = BigString.utf8.getter();
        if (__OFSUB__(0LL, v150))
        {
LABEL_400:
          __break(1u);
          goto LABEL_401;
        }

        uint64_t v188 = BigString.UTF8View.index(_:offsetBy:)();
        uint64_t v190 = v189;
        uint64_t v321 = v192;
        unint64_t v322 = v191;
        __n128 result = outlined release of Locale((uint64_t)&v415);
        if (v163 >= v347)
        {
LABEL_401:
          __break(1u);
          goto LABEL_402;
        }

        if (v358 != *(void *)(v24 + 88))
        {
LABEL_402:
          __break(1u);
LABEL_403:
          __break(1u);
LABEL_404:
          __break(1u);
          goto LABEL_405;
        }

        v319[1] = v190;
        uint64_t v320 = v188;
        unint64_t v193 = *(uint64_t **)(v24 + 64);
        if (v161)
        {
          unint64_t v194 = v160;
          unint64_t v195 = v161 + 24 * ((v160 >> ((4 * *(_BYTE *)(v161 + 18) + 8) & 0x3C)) & 0xF);
          uint64_t v196 = *(uint64_t **)(v195 + 40);
          uint64_t v365 = *(void **)(v195 + 32);
          swift_bridgeObjectRetain();
          unint64_t v323 = v196;
          __n128 result = swift_bridgeObjectRetain();
          uint64_t v197 = v358;
          uint64_t v198 = v358;
        }

        else
        {
          swift_unknownObjectRetain();
          unint64_t v194 = v160;
          specialized Rope._Node.subscript.getter(v160, (uint64_t)v193);
          uint64_t v365 = v199;
          unint64_t v323 = v200;
          __n128 result = swift_unknownObjectRelease();
          unint64_t v193 = *(uint64_t **)(v24 + 64);
          uint64_t v198 = *(void *)(v24 + 88);
          uint64_t v197 = v358;
        }

        unint64_t v349 = v163 + 1;
        unint64_t v379 = v197;
        uint64_t v380 = v194;
        uint64_t v369 = (__int128 *)v420;
        unint64_t v370 = v387;
        uint64_t v336 = (uint64_t *)(v351 + 40);
        __int128 v381 = (uint64_t *)v161;
LABEL_222:
        if (v197 != v198) {
          goto LABEL_389;
        }
        unint64_t v341 = v198;
        unint64_t v352 = (void *)v161;
        if (v161)
        {
          unint64_t v201 = *(void *)(v161 + 24 * ((v194 >> ((4 * *(_BYTE *)(v161 + 18) + 8) & 0x3C)) & 0xF) + 24);
          swift_unknownObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
        }

        else
        {
          swift_unknownObjectRetain();
          unint64_t v201 = specialized Rope._Node.subscript.getter(v194, (uint64_t)v193);
        }

        uint64_t v202 = v368;
        swift_bridgeObjectRelease();
        __n128 result = swift_bridgeObjectRelease();
        uint64_t v203 = &v350[v201];
        if (__OFADD__(v350, v201)) {
          goto LABEL_390;
        }
        if (v193)
        {
          unint64_t v204 = ((-15LL << ((4 * *((_BYTE *)v193 + 18) + 8) & 0x3C)) - 1) & (unint64_t)*((unsigned __int8 *)v193 + 18) | ((unint64_t)*((unsigned __int16 *)v193 + 8) << ((4 * *((_BYTE *)v193 + 18) + 8) & 0x3C));
          __n128 result = swift_unknownObjectRetain();
        }

        else
        {
          unint64_t v204 = 0LL;
        }

        unint64_t v205 = v365;
        if (v194 >= v204) {
          goto LABEL_391;
        }
        if (v352)
        {
          char v206 = (4 * *((_BYTE *)v352 + 18) + 8) & 0x3C;
          unint64_t v207 = ((v194 >> v206) & 0xF) + 1;
          if (v207 < *((unsigned __int16 *)v352 + 8))
          {
            unint64_t v348 = (v207 << v206) | ((-15LL << v206) - 1) & v194;
            __n128 result = swift_unknownObjectRelease_n();
LABEL_237:
            unint64_t v193 = v381;
            goto LABEL_245;
          }
        }

        int v208 = *((unsigned __int8 *)v193 + 18);
        char v209 = (4 * v208 + 8) & 0x3C;
        uint64_t v210 = (v194 >> v209) & 0xF;
        *(void *)&__int128 v418 = v210;
        if (v208)
        {
          swift_unknownObjectRetain();
          char v211 = specialized closure #1 in Rope._Node.formSuccessor(of:)( (uint64_t)(v193 + 3),  (uint64_t *)&v418,  (uint64_t)&v379,  (uint64_t)v193,  v208);
          __n128 result = swift_unknownObjectRelease();
          if ((v211 & 1) != 0)
          {
            __n128 result = swift_unknownObjectRelease_n();
            unint64_t v348 = v380;
            unint64_t v205 = v365;
            goto LABEL_237;
          }
        }

        else
        {
          uint64_t v212 = v210 + 1;
          if (v210 + 1 < (unint64_t)*((unsigned __int16 *)v193 + 8))
          {
            __n128 result = swift_unknownObjectRelease_n();
            unint64_t v348 = (v212 << v209) | ((-15LL << v209) - 1) & v194;
LABEL_244:
            unint64_t v205 = v365;
LABEL_245:
            if (v349 != v347)
            {
              if (v379 != *(void *)(v24 + 88))
              {
LABEL_392:
                __break(1u);
LABEL_393:
                __break(1u);
                goto LABEL_394;
              }

              uint64_t v358 = v379;
              unint64_t v334 = v193;
              unint64_t v335 = v203;
              if (v193)
              {
                uint64_t v215 = &v193[3 * ((v348 >> ((4 * *((_BYTE *)v193 + 18) + 8) & 0x3C)) & 0xF)];
                unint64_t v216 = v215[4];
                uint64_t v217 = v215[5];
                swift_bridgeObjectRetain();
                uint64_t v339 = v217;
                swift_bridgeObjectRetain();
              }

              else
              {
                uint64_t v218 = *(void *)(v24 + 64);
                swift_unknownObjectRetain();
                unint64_t v205 = v365;
                specialized Rope._Node.subscript.getter(v348, v218);
                uint64_t v339 = v219;
                unint64_t v216 = v220;
                swift_unknownObjectRelease();
              }

              __n128 result = swift_bridgeObjectRetain();
              uint64_t v221 = 0LL;
              char v222 = v336;
              unint64_t v371 = v216;
              unint64_t v360 = v194;
              while (1)
              {
                uint64_t v224 = v221 + 1;
                if (__OFADD__(v221, 1LL))
                {
                  __break(1u);
LABEL_378:
                  __break(1u);
                  goto LABEL_379;
                }

                uint64_t v226 = *(v222 - 1);
                uint64_t v225 = *v222;
                if (v205[2])
                {
                  swift_bridgeObjectRetain_n();
                  unint64_t v227 = specialized __RawDictionaryStorage.find<A>(_:)(v226, v225);
                  if ((v228 & 1) != 0)
                  {
                    outlined init with copy of AttributedString._AttributeValue(v205[7] + 72 * v227, (uint64_t)&v394);
                  }

                  else
                  {
                    uint64_t v398 = 0LL;
                    __int128 v396 = 0u;
                    __int128 v397 = 0u;
                    __int128 v394 = 0u;
                    __int128 v395 = 0u;
                  }

                  swift_bridgeObjectRelease();
                  unint64_t v216 = v371;
                  if (!*(void *)(v371 + 16))
                  {
LABEL_260:
                    uint64_t v393 = 0LL;
                    __int128 v391 = 0u;
                    __int128 v392 = 0u;
                    __int128 v389 = 0u;
                    __int128 v390 = 0u;
                    goto LABEL_267;
                  }
                }

                else
                {
                  uint64_t v398 = 0LL;
                  __int128 v396 = 0u;
                  __int128 v397 = 0u;
                  __int128 v394 = 0u;
                  __int128 v395 = 0u;
                  swift_bridgeObjectRetain();
                  if (!*(void *)(v216 + 16)) {
                    goto LABEL_260;
                  }
                }

                swift_bridgeObjectRetain();
                unint64_t v229 = specialized __RawDictionaryStorage.find<A>(_:)(v226, v225);
                if ((v230 & 1) != 0)
                {
                  outlined init with copy of AttributedString._AttributeValue( *(void *)(v216 + 56) + 72 * v229,  (uint64_t)&v389);
                }

                else
                {
                  uint64_t v393 = 0LL;
                  __int128 v391 = 0u;
                  __int128 v392 = 0u;
                  __int128 v389 = 0u;
                  __int128 v390 = 0u;
                }

                swift_bridgeObjectRelease();
LABEL_267:
                swift_bridgeObjectRelease();
                unint64_t v193 = &demangling cache variable for type metadata for AttributedString._AttributeValue?;
                outlined init with copy of (Hashable & Sendable)?( (uint64_t)&v394,  (uint64_t)&v379,  &demangling cache variable for type metadata for AttributedString._AttributeValue?);
                outlined init with copy of (Hashable & Sendable)?( (uint64_t)&v389,  (uint64_t)v370,  &demangling cache variable for type metadata for AttributedString._AttributeValue?);
                if (!v382)
                {
                  if (v388) {
                    goto LABEL_284;
                  }
                  outlined destroy of Any?( (uint64_t)&v379,  &demangling cache variable for type metadata for AttributedString._AttributeValue?);
                  outlined destroy of Any?( (uint64_t)&v389,  &demangling cache variable for type metadata for AttributedString._AttributeValue?);
                  __n128 result = outlined destroy of Any?( (uint64_t)&v394,  &demangling cache variable for type metadata for AttributedString._AttributeValue?);
                  goto LABEL_254;
                }

                outlined init with copy of (Hashable & Sendable)?( (uint64_t)&v379,  (uint64_t)v377,  &demangling cache variable for type metadata for AttributedString._AttributeValue?);
                if (!v388) {
                  goto LABEL_283;
                }
                __int128 v231 = *((_OWORD *)v370 + 3);
                __int128 v374 = *((_OWORD *)v370 + 2);
                __int128 v375 = v231;
                uint64_t v376 = *((void *)v370 + 8);
                __int128 v232 = *((_OWORD *)v370 + 1);
                __int128 v372 = *(_OWORD *)v370;
                __int128 v373 = v232;
                outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>( (uint64_t)v377,  (uint64_t)v426);
                outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>( (uint64_t)&v372,  (uint64_t)v425);
                outlined init with copy of (Hashable & Sendable)?( (uint64_t)v426,  (uint64_t)&v418,  &demangling cache variable for type metadata for (Hashable & Sendable)?);
                outlined init with copy of (Hashable & Sendable)?( (uint64_t)v425,  (uint64_t)v369,  &demangling cache variable for type metadata for (Hashable & Sendable)?);
                if (v419)
                {
                  if (!v421)
                  {
                    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v418);
LABEL_252:
                    char v223 = 0;
                    goto LABEL_253;
                  }

                  outlined init with take of any PredicateExpression<Self.Output == B1>(&v418, (uint64_t)v422);
                  outlined init with take of any PredicateExpression<Self.Output == B1>(v369, (uint64_t)v417);
                  uint64_t v233 = v423;
                  __int128 v362 = v424;
                  __int128 v361 = __swift_project_boxed_opaque_existential_1(v422, v423);
                  v367 = (__int128 *)v319;
                  uint64_t v234 = *(void *)(v233 - 8);
                  MEMORY[0x1895F8858](v361);
                  uint64_t v236 = (char *)v319 - ((v235 + 15) & 0xFFFFFFFFFFFFFFF0LL);
                  outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>( (uint64_t)v417,  (uint64_t)v416);
                  uint64_t v237 = type metadata accessor for Optional();
                  v366 = v319;
                  uint64_t v238 = *(void *)(v237 - 8);
                  MEMORY[0x1895F8858](v237);
                  int v240 = (char *)v319 - v239;
                  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Hashable & Sendable);
                  int v241 = swift_dynamicCast();
                  unint64_t v242 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v234 + 56);
                  if (v241)
                  {
                    v242(v240, 0LL, 1LL, v233);
                    (*(void (**)(char *, char *, uint64_t))(v234 + 32))(v236, v240, v233);
                    char v223 = dispatch thunk of static Equatable.== infix(_:_:)();
                    (*(void (**)(char *, uint64_t))(v234 + 8))(v236, v233);
                  }

                  else
                  {
                    v242(v240, 1LL, 1LL, v233);
                    (*(void (**)(char *, uint64_t))(v238 + 8))(v240, v237);
                    char v223 = 0;
                  }

                  uint64_t v23 = v364;
                  unint64_t v194 = v360;
                  __swift_destroy_boxed_opaque_existential_1((uint64_t)v417);
                  __swift_destroy_boxed_opaque_existential_1((uint64_t)v422);
                  unint64_t v205 = v365;
                }

                else
                {
                  if (v421)
                  {
                    outlined destroy of Any?( (uint64_t)v369,  &demangling cache variable for type metadata for (Hashable & Sendable)?);
                    goto LABEL_252;
                  }

                  char v223 = 1;
                }

      __int128 v18 = 0;
      __int128 v11 = &v195;
LABEL_25:
      if (v19 == v13)
      {
        LOBYTE(v2) = 0;
        unint64_t v207 = v13;
        int v208 = v13;
        uint64_t v4 = v13;
LABEL_27:
        unint64_t v128 = v2;
        unint64_t v21 = 0;
        uint64_t v22 = v195;
        uint64_t v23 = v196;
        uint64_t v30 = v197;
        unint64_t v136 = v198;
        uint64_t v29 = v199;
        uint64_t v28 = v201;
        uint64_t v130 = v202;
        unint64_t v132 = v200;
        int64_t v27 = v203;
        uint64_t v129 = v210;
        uint64_t v26 = v211;
        uint64_t v135 = v212;
        uint64_t v134 = v213;
        __int128 v14 = v214;
        uint64_t v139 = v215;
        unint64_t v138 = HIBYTE(v215);
        uint64_t v219 = v197;
        uint64_t v218 = v199;
        uint64_t v217 = v201;
        unint64_t v168 = v203;
        uint64_t v167 = v18;
        uint64_t v166 = 0;
        uint64_t v165 = v211;
        uint64_t v164 = v214;
        uint64_t v24 = v126;
LABEL_129:
        uint64_t v121 = v14 & 1;
        unint64_t v116 = v26 & 1;
        unint64_t v65 = v21 & 1;
        char v66 = v18 & 1;
        unint64_t v67 = v27 & 1;
        int v68 = v28 & 1;
        char v69 = v29 & 1;
        uint64_t v125 = *(void *)(v7 + 24);
        __int128 v127 = *(void *)(v7 + 16);
        uint64_t v70 = convert #1 (_:) in static RFC3986Parser.parse(urlString:)(v22, v23, v30 & 1, v7);
        unint64_t v123 = v71;
        uint64_t v124 = v70;
        unint64_t v122 = v72;
        unint64_t v137 = convert #1 (_:) in static RFC3986Parser.parse(urlString:)( v136,  *((unint64_t *)&v136 + 1),  v69,  v7);
        uint64_t v120 = v73;
        unint64_t v119 = v74;
        uint64_t v133 = convert #1 (_:) in static RFC3986Parser.parse(urlString:)( v132,  *((unint64_t *)&v132 + 1),  v68,  v7);
        __int128 v118 = v75;
        uint64_t v117 = v76;
        uint64_t v131 = convert #1 (_:) in static RFC3986Parser.parse(urlString:)( v130,  *((unint64_t *)&v130 + 1),  v67,  v7);
        unint64_t v115 = v77;
        uint64_t v114 = v78;
        unint64_t v79 = convert #1 (_:) in static RFC3986Parser.parse(urlString:)(v20, v24, v66, v7);
        uint64_t v112 = v80;
        uint64_t v113 = v79;
        unint64_t v111 = v81;
        unint64_t v82 = convert #1 (_:) in static RFC3986Parser.parse(urlString:)(v19, v4, v65, v7);
        char v84 = v83;
        unint64_t v110 = v85;
        uint64_t v86 = convert #1 (_:) in static RFC3986Parser.parse(urlString:)( v129,  *((unint64_t *)&v129 + 1),  v116,  v7);
        unint64_t v88 = v87;
        unint64_t v90 = v89;
        char v91 = convert #1 (_:) in static RFC3986Parser.parse(urlString:)(v135, v134, v121, v7);
        __int128 v93 = v92;
        uint64_t v95 = v94;
        type metadata accessor for URLParseInfo();
        uint64_t v96 = swift_allocObject();
        *(void *)(v96 + 16) = v127;
        *(void *)(v96 + 24) = v125;
        *(void *)(v96 + 32) = v124;
        *(void *)(v96 + 40) = v123;
        *(_BYTE *)(v96 + 48) = v122 & 1;
        *(void *)(v96 + 56) = v137;
        *(void *)(v96 + 64) = v120;
        *(_BYTE *)(v96 + 72) = v119 & 1;
        *(void *)(v96 + 80) = v133;
        *(void *)(v96 + 88) = v118;
        *(_BYTE *)(v96 + 96) = v117 & 1;
        *(void *)(v96 + 104) = v131;
        *(void *)(v96 + 112) = v115;
        *(_BYTE *)(v96 + 120) = v114 & 1;
        *(void *)(v96 + 128) = v113;
        *(void *)(v96 + 136) = v112;
        *(_BYTE *)(v96 + 144) = v111 & 1;
        *(void *)(v96 + 152) = v82;
        *(void *)(v96 + 160) = v84;
        *(_BYTE *)(v96 + 168) = v110 & 1;
        *(void *)(v96 + 176) = v86;
        *(void *)(v96 + 184) = v88;
        *(_BYTE *)(v96 + 192) = v90 & 1;
        *(void *)(v96 + 200) = v91;
        *(void *)(v96 + 208) = v93;
        *(_BYTE *)(v96 + 216) = v95 & 1;
        *(_BYTE *)(v96 + 217) = v139;
        *(_BYTE *)(v96 + 218) = v138;
        *(_BYTE *)(v96 + 219) = v128 & 1;
        swift_bridgeObjectRetain();
        swift_release();
        return v96;
      }

      unint64_t v9 = v12[v19];
      if ((_DWORD)v9 == 35 || (_DWORD)v9 == 63)
      {
        uint64_t v2 = 0LL;
        unint64_t v207 = v19;
        int v208 = v19;
        char v209 = 0;
        uint64_t v4 = v19;
        unint64_t v216 = 0;
      }

      else
      {
        LODWORD(v10) = 0;
        uint64_t v39 = v13 - 1;
        uint64_t v4 = v19;
        while (1)
        {
          __int128 v16 = v4;
          unint64_t v10 = (void *)(((_DWORD)v9 == 37) | v10);
          if (v39 == v4) {
            break;
          }
          LODWORD(v9) = v12[++v4];
          if ((_DWORD)v9 == 35 || (_DWORD)v9 == 63) {
            goto LABEL_56;
          }
        }

        uint64_t v4 = v13;
LABEL_56:
        if (v4 < v19)
        {
          __break(1u);
          goto LABEL_58;
        }

        unint64_t v207 = v19;
        int v208 = v4;
        char v209 = 0;
        uint64_t v2 = (unint64_t)v10;
        unint64_t v9 = v10 & 1;
        unint64_t v216 = v10 & 1;
        if (v39 == v16) {
          goto LABEL_27;
        }
      }

      uint64_t v3 = &v195;
      uint64_t v34 = (unint64_t)&v213;
      uint64_t v35 = &v214;
      BOOL v36 = v12[v4];
      if (v36 == 35)
      {
        if (v13 >= v4 + 1)
        {
          uint64_t v212 = v4 + 1;
          goto LABEL_59;
        }
      }

      else
      {
        if (v36 != 63)
        {
LABEL_60:
          uint64_t v22 = v195;
          uint64_t v23 = v196;
          uint64_t v30 = v197;
          unint64_t v136 = v198;
          uint64_t v29 = v199;
          uint64_t v28 = v201;
          uint64_t v130 = v202;
          unint64_t v132 = v200;
          int64_t v27 = v203;
          __int128 v18 = v206;
          unint64_t v21 = v209;
          uint64_t v129 = v210;
          uint64_t v26 = v211;
          uint64_t v135 = v212;
          uint64_t v134 = v213;
          uint64_t v139 = v215 & 1;
          unint64_t v138 = HIBYTE(v215) & 1;
          __int128 v14 = v214;
          uint64_t v24 = v126;
          unint64_t v128 = v2;
          goto LABEL_129;
        }

        __int128 v17 = v4 + 1;
        if (v13 >= v4 + 1)
        {
          uint64_t v37 = specialized Collection<>.firstIndex(of:)(0x23u, v4 + 1, v13, (uint64_t)v12);
          if ((v38 & 1) == 0)
          {
            if (v37 >= v17)
            {
              *(void *)&uint64_t v210 = v4 + 1;
              *((void *)&v210 + 1) = v37;
              char v211 = 0;
              __int128 v11 = &v195;
              if (v13 >= v37 + 1)
              {
                uint64_t v212 = v37 + 1;
                uint64_t v34 = (unint64_t)&v213;
LABEL_59:
                *(void *)uint64_t v34 = v13;
                __int128 *v35 = 0;
                goto LABEL_60;
              }

            a4 = v45 - a4 + v60;
LABEL_240:
            lazy protocol witness table accessor for type JSONError and conformance JSONError();
            swift_allocError();
            *(_OWORD *)uint64_t v40 = xmmword_1837301C0;
            *(void *)(v40 + 16) = v8;
            *(void *)(v40 + 24) = a5;
            *(void *)(v40 + 32) = a3;
            *(void *)(v40 + 40) = a4;
            uint64_t v41 = 1;
            goto LABEL_45;
          }

          LODWORD(v8) = *(unsigned __int8 *)(v45 + v60);
          if (__OFADD__(v57 + v60, 1LL)) {
            goto LABEL_146;
          }
          ++v60;
          if (v45 + v60 >= v21) {
            goto LABEL_147;
          }
        }

        uint64_t v62 = v57 + v60;
        switch(*(_BYTE *)(v45 + v60))
        {
          case '+':
          case '-':
            if (v62 != 0 || (v56 & 1) == 0) {
              goto LABEL_142;
            }
            uint64_t v57 = 0LL;
            unint64_t v56 = 0;
            unint64_t v58 = 0;
            uint64_t v59 = 0;
            v45 += v60 + 1;
            if (v45 >= v21) {
              goto LABEL_244;
            }
            continue;
          case ',':
          case '/':
          case '0':
          case '1':
          case '2':
          case '3':
          case '4':
          case '5':
          case '6':
          case '7':
          case '8':
          case '9':
          case ':':
          case ';':
          case '<':
          case '=':
          case '>':
          case '?':
          case '@':
          case 'A':
          case 'B':
          case 'C':
          case 'D':
            goto LABEL_142;
          case '.':
            if (v62 < 1 || (v59 & 1) == 0)
            {
              __int128 v93 = v45 + v60;
              if (v45 + v60 < a4) {
                goto LABEL_270;
              }
              uint64_t v94 = a4 + a5;
              if (a4 + a5 < v93) {
                goto LABEL_270;
              }
              if (v94 >= v45 + v60 + 1) {
                uint64_t v94 = v45 + v60 + 1;
              }
              if (v94 <= a4)
              {
                a3 = 0LL;
                a5 = 1LL;
              }

              else
              {
                uint64_t v95 = a5 + a4;
                a5 = 1LL;
                uint64_t v96 = a4;
                do
                {
                  __int128 v97 = 0LL;
                  uint64_t v98 = 0LL;
                  uint64_t v99 = v95 - v96;
                  while (1)
                  {
                    uint64_t v100 = *(unsigned __int8 *)(v96 + v98);
                    if (v100 == 10)
                    {
                      char v74 = __OFADD__(a5++, 1LL);
                      if (v74) {
                        goto LABEL_275;
                      }
                      v96 += v98 + 1;
                      goto LABEL_209;
                    }

                    if (v100 == 13) {
                      break;
                    }
                    a3 = v98 + 1;
                    if (__OFADD__(v98, 1LL)) {
                      goto LABEL_254;
                    }
                    ++v98;
                    --v97;
                    if (v96 + v98 >= v94) {
                      goto LABEL_239;
                    }
                  }

                  uint64_t v101 = v96 + v98;
                  if (v93 >= v96 + v98 + 1)
                  {
                    if (*(_BYTE *)(v101 + 1) == 10) {
                      uint64_t v101 = v96 + v98 + 1;
                    }
                  }

                  char v74 = __OFADD__(a5++, 1LL);
                  if (v74) {
                    goto LABEL_276;
                  }
                  uint64_t v96 = v101 + 1;
LABEL_209:
                  ;
                }

                while (v96 < v94);
                a3 = 0LL;
              }

            a4 = v45 - a4 + v60;
LABEL_240:
            lazy protocol witness table accessor for type JSONError and conformance JSONError();
            swift_allocError();
            *(_OWORD *)uint64_t v40 = xmmword_1837301C0;
            *(void *)(v40 + 16) = v8;
            *(void *)(v40 + 24) = a5;
            *(void *)(v40 + 32) = a3;
            *(void *)(v40 + 40) = a4;
            uint64_t v41 = 1;
            goto LABEL_45;
          }

          LODWORD(v8) = *(unsigned __int8 *)(v45 + v60);
          if (__OFADD__(v57 + v60, 1LL)) {
            goto LABEL_146;
          }
          ++v60;
          if (v45 + v60 >= v21) {
            goto LABEL_147;
          }
        }

        uint64_t v62 = v57 + v60;
        switch(*(_BYTE *)(v45 + v60))
        {
          case '+':
          case '-':
            if (v62 != 0 || (v56 & 1) == 0) {
              goto LABEL_142;
            }
            uint64_t v57 = 0LL;
            unint64_t v56 = 0;
            unint64_t v58 = 0;
            uint64_t v59 = 0;
            v45 += v60 + 1;
            if (v45 >= v21) {
              goto LABEL_244;
            }
            continue;
          case ',':
          case '/':
          case '0':
          case '1':
          case '2':
          case '3':
          case '4':
          case '5':
          case '6':
          case '7':
          case '8':
          case '9':
          case ':':
          case ';':
          case '<':
          case '=':
          case '>':
          case '?':
          case '@':
          case 'A':
          case 'B':
          case 'C':
          case 'D':
            goto LABEL_142;
          case '.':
            if (v62 < 1 || (v59 & 1) == 0)
            {
              __int128 v93 = v45 + v60;
              if (v45 + v60 < a4) {
                goto LABEL_270;
              }
              uint64_t v94 = a4 + a5;
              if (a4 + a5 < v93) {
                goto LABEL_270;
              }
              if (v94 >= v45 + v60 + 1) {
                uint64_t v94 = v45 + v60 + 1;
              }
              if (v94 <= a4)
              {
                a3 = 0LL;
                a5 = 1LL;
              }

              else
              {
                uint64_t v95 = a5 + a4;
                a5 = 1LL;
                uint64_t v96 = a4;
                do
                {
                  __int128 v97 = 0LL;
                  uint64_t v98 = 0LL;
                  uint64_t v99 = v95 - v96;
                  while (1)
                  {
                    uint64_t v100 = *(unsigned __int8 *)(v96 + v98);
                    if (v100 == 10)
                    {
                      char v74 = __OFADD__(a5++, 1LL);
                      if (v74) {
                        goto LABEL_275;
                      }
                      v96 += v98 + 1;
                      goto LABEL_209;
                    }

                    if (v100 == 13) {
                      break;
                    }
                    a3 = v98 + 1;
                    if (__OFADD__(v98, 1LL)) {
                      goto LABEL_254;
                    }
                    ++v98;
                    --v97;
                    if (v96 + v98 >= v94) {
                      goto LABEL_239;
                    }
                  }

                  uint64_t v101 = v96 + v98;
                  if (v93 >= v96 + v98 + 1)
                  {
                    if (*(_BYTE *)(v101 + 1) == 10) {
                      uint64_t v101 = v96 + v98 + 1;
                    }
                  }

                  char v74 = __OFADD__(a5++, 1LL);
                  if (v74) {
                    goto LABEL_276;
                  }
                  uint64_t v96 = v101 + 1;
LABEL_209:
                  ;
                }

                while (v96 < v94);
                a3 = 0LL;
              }

            a4 = v45 - a4 + v60;
LABEL_240:
            lazy protocol witness table accessor for type JSONError and conformance JSONError();
            swift_allocError();
            *(_OWORD *)uint64_t v40 = xmmword_1837301C0;
            *(void *)(v40 + 16) = v8;
            *(void *)(v40 + 24) = a5;
            *(void *)(v40 + 32) = a3;
            *(void *)(v40 + 40) = a4;
            uint64_t v41 = 1;
            goto LABEL_45;
          }

          LODWORD(v8) = *(unsigned __int8 *)(v45 + v60);
          if (__OFADD__(v57 + v60, 1LL)) {
            goto LABEL_146;
          }
          ++v60;
          if (v45 + v60 >= v21) {
            goto LABEL_147;
          }
        }

        uint64_t v62 = v57 + v60;
        switch(*(_BYTE *)(v45 + v60))
        {
          case '+':
          case '-':
            if (v62 != 0 || (v56 & 1) == 0) {
              goto LABEL_142;
            }
            uint64_t v57 = 0LL;
            unint64_t v56 = 0;
            unint64_t v58 = 0;
            uint64_t v59 = 0;
            v45 += v60 + 1;
            if (v45 >= v21) {
              goto LABEL_244;
            }
            continue;
          case ',':
          case '/':
          case '0':
          case '1':
          case '2':
          case '3':
          case '4':
          case '5':
          case '6':
          case '7':
          case '8':
          case '9':
          case ':':
          case ';':
          case '<':
          case '=':
          case '>':
          case '?':
          case '@':
          case 'A':
          case 'B':
          case 'C':
          case 'D':
            goto LABEL_142;
          case '.':
            if (v62 < 1 || (v59 & 1) == 0)
            {
              __int128 v93 = v45 + v60;
              if (v45 + v60 < a4) {
                goto LABEL_270;
              }
              uint64_t v94 = a4 + a5;
              if (a4 + a5 < v93) {
                goto LABEL_270;
              }
              if (v94 >= v45 + v60 + 1) {
                uint64_t v94 = v45 + v60 + 1;
              }
              if (v94 <= a4)
              {
                a3 = 0LL;
                a5 = 1LL;
              }

              else
              {
                uint64_t v95 = a5 + a4;
                a5 = 1LL;
                uint64_t v96 = a4;
                do
                {
                  __int128 v97 = 0LL;
                  uint64_t v98 = 0LL;
                  uint64_t v99 = v95 - v96;
                  while (1)
                  {
                    uint64_t v100 = *(unsigned __int8 *)(v96 + v98);
                    if (v100 == 10)
                    {
                      char v74 = __OFADD__(a5++, 1LL);
                      if (v74) {
                        goto LABEL_275;
                      }
                      v96 += v98 + 1;
                      goto LABEL_209;
                    }

                    if (v100 == 13) {
                      break;
                    }
                    a3 = v98 + 1;
                    if (__OFADD__(v98, 1LL)) {
                      goto LABEL_254;
                    }
                    ++v98;
                    --v97;
                    if (v96 + v98 >= v94) {
                      goto LABEL_239;
                    }
                  }

                  uint64_t v101 = v96 + v98;
                  if (v93 >= v96 + v98 + 1)
                  {
                    if (*(_BYTE *)(v101 + 1) == 10) {
                      uint64_t v101 = v96 + v98 + 1;
                    }
                  }

                  char v74 = __OFADD__(a5++, 1LL);
                  if (v74) {
                    goto LABEL_276;
                  }
                  uint64_t v96 = v101 + 1;
LABEL_209:
                  ;
                }

                while (v96 < v94);
                a3 = 0LL;
              }

double protocol witness for BidirectionalCollection.formIndex(before:) in conformance AttributedString.Runs.AttributesSlice4<A, B, C, D>( _OWORD *a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for BidirectionalCollection.formIndex(before:) in conformance AttributedString.Runs.AttributesSlice1<A>( a1,  a2,  a3,  (void (*)(_OWORD *__return_ptr))AttributedString.Runs.AttributesSlice4.index(before:));
}

void (*protocol witness for Collection.subscript.read in conformance AttributedString.Runs.AttributesSlice4<A, B, C, D>( void *a1, unint64_t *a2, void *a3))(uint64_t *a1, uint64_t a2)
{
  unint64_t v6 = malloc(0x68uLL);
  *a1 = v6;
  swift_getAssociatedTypeWitness();
  *unint64_t v6 = type metadata accessor for Optional();
  swift_getAssociatedTypeWitness();
  v6[1] = type metadata accessor for Optional();
  swift_getAssociatedTypeWitness();
  v6[2] = type metadata accessor for Optional();
  swift_getAssociatedTypeWitness();
  v6[3] = type metadata accessor for Optional();
  v6[4] = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Range<AttributedString.Index>);
  uint64_t TupleTypeMetadata = (int *)swift_getTupleTypeMetadata();
  v6[9] = TupleTypeMetadata;
  uint64_t v8 = *((void *)TupleTypeMetadata - 1);
  v6[10] = v8;
  unint64_t v9 = (char *)malloc(*(void *)(v8 + 64));
  v6[11] = v9;
  unint64_t v10 = AttributedString.Runs.AttributesSlice4.subscript.read(v6 + 5, a2, a3);
  uint64_t v12 = v11;
  uint64_t v14 = v13;
  v6[12] = v10;
  uint64_t v17 = *v15;
  uint64_t v16 = v15[1];
  __int128 v18 = (_OWORD *)v15[2];
  uint64_t v19 = type metadata accessor for Optional();
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v19 - 8) + 16LL))(v9, v12, v19);
  __int128 v20 = &v9[TupleTypeMetadata[12]];
  uint64_t v21 = type metadata accessor for Optional();
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v21 - 8) + 16LL))(v20, v14, v21);
  uint64_t v22 = &v9[TupleTypeMetadata[16]];
  uint64_t v23 = type metadata accessor for Optional();
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v23 - 8) + 16LL))(v22, v17, v23);
  uint64_t v24 = &v9[TupleTypeMetadata[20]];
  uint64_t v25 = type metadata accessor for Optional();
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v25 - 8) + 16LL))(v24, v16, v25);
  uint64_t v26 = &v9[TupleTypeMetadata[24]];
  __int128 v27 = v18[1];
  __int128 v28 = v18[2];
  __int128 v29 = v18[3];
  *(_OWORD *)uint64_t v26 = *v18;
  *((_OWORD *)v26 + 1) = v27;
  *((_OWORD *)v26 + 2) = v28;
  *((_OWORD *)v26 + 3) = v29;
  return protocol witness for Collection.subscript.read in conformance AttributedString.Runs.AttributesSlice4<A, B, C, D>;
}

void protocol witness for Collection.subscript.read in conformance AttributedString.Runs.AttributesSlice4<A, B, C, D>( uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = *a1 + 40;
  (*(void (**)(void, void))(*(void *)(*a1 + 80) + 8LL))(*(void *)(*a1 + 88), *(void *)(*a1 + 72));
  unint64_t v5 = *(void **)(v3 + 88);
  (*(void (**)(uint64_t, uint64_t))(v3 + 96))(v4, a2);
  free(v5);
  free((void *)v3);
}

void (*AttributedString.Runs.AttributesSlice4.subscript.read( void *a1, unint64_t *a2, void *a3))(uint64_t a1)
{
  unint64_t v6 = malloc(0x58uLL);
  *a1 = v6;
  swift_getAssociatedTypeWitness();
  *unint64_t v6 = type metadata accessor for Optional();
  swift_getAssociatedTypeWitness();
  v6[1] = type metadata accessor for Optional();
  swift_getAssociatedTypeWitness();
  v6[2] = type metadata accessor for Optional();
  swift_getAssociatedTypeWitness();
  v6[3] = type metadata accessor for Optional();
  v6[4] = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Range<AttributedString.Index>);
  uint64_t TupleTypeMetadata = (int *)swift_getTupleTypeMetadata();
  v6[8] = TupleTypeMetadata;
  uint64_t v8 = *((void *)TupleTypeMetadata - 1);
  v6[9] = v8;
  unint64_t v9 = (char *)malloc(*(void *)(v8 + 64));
  v6[10] = v9;
  uint64_t v10 = (uint64_t)&v9[TupleTypeMetadata[12]];
  uint64_t v11 = (uint64_t)&v9[TupleTypeMetadata[16]];
  uint64_t v12 = (uint64_t)&v9[TupleTypeMetadata[20]];
  uint64_t v13 = (unint64_t *)&v9[TupleTypeMetadata[24]];
  AttributedString.Runs.AttributesSlice4.subscript.getter((uint64_t)v9, v10, v11, v12, v13, a2, a3);
  v6[5] = v11;
  v6[6] = v12;
  v6[7] = v13;
  return AttributedString.Runs.AttributesSlice4.subscript.read;
}

void AttributedString.Runs.AttributesSlice4.subscript.read(uint64_t a1)
{
  uint64_t v1 = *(void **)a1;
  uint64_t v2 = *(void **)(*(void *)a1 + 80LL);
  (*(void (**)(void *, void))(*(void *)(*(void *)a1 + 72LL) + 8LL))( v2,  *(void *)(*(void *)a1 + 64LL));
  free(v2);
  free(v1);
}

uint64_t protocol witness for Collection.index(_:offsetBy:) in conformance AttributedString.Runs.AttributesSlice4<A, B, C, D>( uint64_t a1, uint64_t a2, uint64_t a3)
{
  return BidirectionalCollection.index(_:offsetBy:)();
}

uint64_t protocol witness for Collection.index(_:offsetBy:limitedBy:) in conformance AttributedString.Runs.AttributesSlice4<A, B, C, D>( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return BidirectionalCollection.index(_:offsetBy:limitedBy:)();
}

void protocol witness for Collection.distance(from:to:) in conformance AttributedString.Runs.AttributesSlice4<A, B, C, D>( uint64_t a1, uint64_t a2, uint64_t a3)
{
}

double protocol witness for Collection.formIndex(after:) in conformance AttributedString.Runs.AttributesSlice4<A, B, C, D>( _OWORD *a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for BidirectionalCollection.formIndex(before:) in conformance AttributedString.Runs.AttributesSlice1<A>( a1,  a2,  a3,  (void (*)(_OWORD *__return_ptr))AttributedString.Runs.AttributesSlice4.index(after:));
}

uint64_t protocol witness for Sequence.makeIterator() in conformance AttributedString.Runs.AttributesSlice4<A, B, C, D>( uint64_t a1, uint64_t a2)
{
  return protocol witness for Sequence.makeIterator() in conformance AttributedString.Runs.AttributesSlice1<A>( a1,  a2,  (void (*)(void))AttributedString.Runs.AttributesSlice4.makeIterator());
}

uint64_t protocol witness for Sequence.underestimatedCount.getter in conformance AttributedString.Runs.AttributesSlice4<A, B, C, D>( uint64_t a1)
{
  return Collection.underestimatedCount.getter();
}

uint64_t protocol witness for Sequence._copyToContiguousArray() in conformance AttributedString.Runs.AttributesSlice4<A, B, C, D>( uint64_t a1)
{
  return Collection._copyToContiguousArray()();
}

double AttributedString.Runs.subscript.getter@<D0>( uint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X7>, uint64_t a8@<X8>)
{
  uint64_t v9 = v8;
  uint64_t v15 = *a1;
  uint64_t v16 = *a2;
  uint64_t v17 = *a3;
  __int128 v18 = *(_OWORD *)(v9 + 176);
  v25[10] = *(_OWORD *)(v9 + 160);
  v25[11] = v18;
  uint64_t v26 = *(void *)(v9 + 192);
  __int128 v19 = *(_OWORD *)(v9 + 112);
  v25[6] = *(_OWORD *)(v9 + 96);
  v25[7] = v19;
  __int128 v20 = *(_OWORD *)(v9 + 144);
  v25[8] = *(_OWORD *)(v9 + 128);
  v25[9] = v20;
  __int128 v21 = *(_OWORD *)(v9 + 48);
  uint64_t v25[2] = *(_OWORD *)(v9 + 32);
  v25[3] = v21;
  __int128 v22 = *(_OWORD *)(v9 + 80);
  v25[4] = *(_OWORD *)(v9 + 64);
  v25[5] = v22;
  __int128 v23 = *(_OWORD *)(v9 + 16);
  v25[0] = *(_OWORD *)v9;
  v25[1] = v23;
  outlined retain of AttributedString.Runs((uint64_t)v25);
  *(void *)&double result = AttributedString.Runs.AttributesSlice4.init(runs:)( v9,  *(void *)(v15 + *MEMORY[0x18961A9A8] + 8LL),  *(void *)(v16 + *MEMORY[0x18961A9A8] + 8LL),  *(void *)(v17 + *MEMORY[0x18961A9A8] + 8LL),  a4,  a5,  a6,  a8,  a7).n128_u64[0];
  return result;
}

__n128 AttributedString.Runs.AttributesSlice5.init(runs:)@<Q0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X6>, uint64_t a7@<X7>, uint64_t a8@<X8>, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v18 = swift_allocObject();
  *(_OWORD *)(v18 + 16) = xmmword_183729E20;
  *(void *)(v18 + 32) = (*(uint64_t (**)(uint64_t, uint64_t))(a6 + 24))(a2, a6);
  *(void *)(v18 + 40) = v19;
  *(void *)(v18 + 48) = (*(uint64_t (**)(uint64_t, uint64_t))(a7 + 24))(a3, a7);
  *(void *)(v18 + 56) = v20;
  *(void *)(v18 + 64) = (*(uint64_t (**)(uint64_t, uint64_t))(a9 + 24))(a4, a9);
  *(void *)(v18 + 72) = v21;
  *(void *)(v18 + 80) = (*(uint64_t (**)(uint64_t))(a10 + 24))(a5);
  *(void *)(v18 + 88) = v22;
  (*(void (**)(void *__return_ptr, uint64_t, uint64_t))(a6 + 32))(v45, a2, a6);
  uint64_t v37 = v45[1];
  uint64_t v38 = v45[0];
  (*(void (**)(void *__return_ptr, uint64_t))(a7 + 32))(v44, a3);
  uint64_t v23 = v44[0];
  uint64_t v34 = v44[0];
  uint64_t v36 = v44[1];
  (*(void (**)(void *__return_ptr, uint64_t, uint64_t))(a9 + 32))(v43, a4, a9);
  uint64_t v24 = v43[0];
  uint64_t v35 = v43[1];
  (*(void (**)(void *__return_ptr, uint64_t))(a10 + 32))(v42, a5);
  uint64_t v26 = v42[0];
  uint64_t v25 = v42[1];
  (*(void (**)(uint64_t *__return_ptr))(a11 + 32))(v41);
  uint64_t v40 = specialized RangeReplaceableCollection.init(_contents:_:_:_:_:)( v38,  v37,  v23,  v36,  v24,  v35,  v26,  v25,  v41[0],  v41[1]);
  outlined consume of AttributedString.AttributeRunBoundaries?(v26, v25);
  outlined consume of AttributedString.AttributeRunBoundaries?(v24, v35);
  outlined consume of AttributedString.AttributeRunBoundaries?(v34, v36);
  outlined consume of AttributedString.AttributeRunBoundaries?(v38, v37);
  __int128 v27 = *(_OWORD *)(a1 + 176);
  *(_OWORD *)(a8 + 160) = *(_OWORD *)(a1 + 160);
  *(_OWORD *)(a8 + 176) = v27;
  uint64_t v28 = *(void *)(a1 + 192);
  __int128 v29 = *(_OWORD *)(a1 + 112);
  *(_OWORD *)(a8 + 96) = *(_OWORD *)(a1 + 96);
  *(_OWORD *)(a8 + 112) = v29;
  __int128 v30 = *(_OWORD *)(a1 + 144);
  *(_OWORD *)(a8 + 128) = *(_OWORD *)(a1 + 128);
  *(_OWORD *)(a8 + 144) = v30;
  __int128 v31 = *(_OWORD *)(a1 + 48);
  *(_OWORD *)(a8 + 32) = *(_OWORD *)(a1 + 32);
  *(_OWORD *)(a8 + 48) = v31;
  __int128 v32 = *(_OWORD *)(a1 + 80);
  *(_OWORD *)(a8 + 64) = *(_OWORD *)(a1 + 64);
  *(_OWORD *)(a8 + 80) = v32;
  __n128 result = *(__n128 *)(a1 + 16);
  *(_OWORD *)a8 = *(_OWORD *)a1;
  *(__n128 *)(a8 + 16) = result;
  *(void *)(a8 + 192) = v28;
  *(void *)(a8 + 200) = v18;
  *(void *)(a8 + 208) = v40;
  return result;
}

uint64_t AttributedString.Runs.AttributesSlice5.subscript.getter( uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t *a6, unint64_t *a7, void *a8)
{
  uint64_t v369 = a8;
  unint64_t v9 = *a7;
  unint64_t v10 = a7[1];
  unint64_t v365 = a7[2];
  unint64_t v366 = v10;
  uint64_t v364 = a7[3];
  __int128 v11 = *v8;
  __int128 v12 = v8[1];
  __int128 v13 = v8[2];
  v455[3] = v8[3];
  v455[2] = v13;
  v455[0] = v11;
  v455[1] = v12;
  __int128 v14 = v8[4];
  __int128 v15 = v8[5];
  __int128 v16 = v8[6];
  __int128 v459 = v8[7];
  __int128 v458 = v16;
  __int128 v456 = v14;
  __int128 v457 = v15;
  __int128 v17 = v8[8];
  __int128 v18 = v8[9];
  __int128 v19 = v8[10];
  __int128 v20 = v8[11];
  unint64_t v464 = *((void *)v8 + 24);
  __int128 v463 = v20;
  __int128 v462 = v19;
  __int128 v460 = v17;
  unint64_t v373 = v9;
  unint64_t v21 = v9 >> 10;
  __int128 v461 = v18;
  if (v21 < *((void *)&v17 + 1) >> 10) {
    goto LABEL_401;
  }
  unint64_t v350 = *((void *)&v462 + 1) >> 10;
  if (*((void *)&v462 + 1) >> 10 < v21) {
    goto LABEL_401;
  }
  uint64_t v370 = *((void *)v8 + 25);
  uint64_t v22 = *(void *)(v370 + 16);
  if (!v22)
  {
LABEL_402:
    __break(1u);
LABEL_403:
    __break(1u);
    goto LABEL_404;
  }

  uint64_t v23 = *(void *)&v455[0];
  unint64_t v24 = *(void *)(*(void *)&v455[0] + 64LL);
  uint64_t v25 = *(void *)(*(void *)&v455[0] + 80LL);
  if (v24) {
    int64_t v26 = *(void *)(*(void *)&v455[0] + 80LL);
  }
  else {
    int64_t v26 = 0LL;
  }
  uint64_t v380 = (__int128 *)(v373 >> 11);
  unint64_t v352 = v21;
  uint64_t v379 = *((void *)v8 + 26);
  unint64_t v357 = *((void *)&v461 + 1);
  unint64_t v358 = v461;
  uint64_t v349 = v462;
  unint64_t v340 = *((void *)&v463 + 1);
  uint64_t v341 = v463;
  uint64_t v338 = a5;
  unint64_t v339 = v464;
  uint64_t v27 = *(void *)(*(void *)&v455[0] + 72LL);
  uint64_t v362 = *(void *)(*(void *)&v455[0] + 88LL);
  uint64_t v367 = *(void *)&v455[0];
  uint64_t v375 = v22;
  unint64_t v333 = a6;
  uint64_t v334 = result;
  uint64_t v336 = a3;
  uint64_t v337 = a4;
  uint64_t v335 = a2;
  unint64_t v342 = *((void *)&v462 + 1);
  unint64_t v359 = *((void *)&v17 + 1) >> 10;
  unint64_t v360 = *((void *)&v17 + 1);
  if (v24 && (uint64_t)v380 < v25 && *(_WORD *)(v24 + 16))
  {
    uint64_t v28 = *(unsigned __int8 *)(v24 + 18);
    if (*(_BYTE *)(v24 + 18))
    {
      swift_unknownObjectRetain_n();
      __n128 result = outlined retain of AttributedString.Runs((uint64_t)v455);
      __int128 v29 = v380;
      unint64_t v30 = v24;
      while (1)
      {
        uint64_t v33 = *(unsigned __int16 *)(v30 + 16);
        if (!*(_WORD *)(v30 + 16)) {
          goto LABEL_14;
        }
        uint64_t v34 = *(void *)(v30 + 40);
        BOOL v35 = __OFSUB__(v29, v34);
        uint64_t v36 = (__int128 *)((char *)v29 - v34);
        if (v35) {
          goto LABEL_393;
        }
        if (__OFADD__(v36, 1LL)) {
          goto LABEL_394;
        }
        if ((uint64_t)v36 + 1 < 1)
        {
          uint64_t v33 = 0LL;
          goto LABEL_15;
        }

        if ((_DWORD)v33 == 1) {
          break;
        }
        uint64_t v37 = (uint64_t *)(v30 + 64);
        uint64_t v38 = 1LL;
        while (1)
        {
          uint64_t v39 = *v37;
          v37 += 3;
          __int128 v29 = (__int128 *)((char *)v36 - v39);
          if (__OFSUB__(v36, v39)) {
            goto LABEL_386;
          }
          if (__OFADD__(v29, 1LL))
          {
LABEL_387:
            __break(1u);
LABEL_388:
            __break(1u);
LABEL_389:
            __break(1u);
LABEL_390:
            __break(1u);
            goto LABEL_391;
          }

          ++v38;
          uint64_t v36 = v29;
          if (v33 == v38) {
            goto LABEL_14;
          }
        }

        uint64_t v33 = v38;
        __int128 v29 = v36;
LABEL_15:
        char v31 = (4 * *(_BYTE *)(v30 + 18) + 8) & 0x3C;
        uint64_t v28 = ((-15LL << v31) - 1) & v28 | (v33 << v31);
        unint64_t v32 = *(void *)(v30 + 24 + 24 * v33);
        swift_unknownObjectRetain();
        __n128 result = swift_unknownObjectRelease();
        unint64_t v30 = v32;
        if (!*(_BYTE *)(v32 + 18)) {
          goto LABEL_32;
        }
      }

      __int128 v29 = v36;
LABEL_14:
      if (!v29) {
        goto LABEL_15;
      }
LABEL_391:
      __break(1u);
LABEL_392:
      __break(1u);
LABEL_393:
      __break(1u);
LABEL_394:
      __break(1u);
LABEL_395:
      __break(1u);
LABEL_396:
      __break(1u);
LABEL_397:
      __break(1u);
LABEL_398:
      __break(1u);
LABEL_399:
      __break(1u);
      goto LABEL_400;
    }

    swift_unknownObjectRetain_n();
    __n128 result = outlined retain of AttributedString.Runs((uint64_t)v455);
    __int128 v29 = v380;
    unint64_t v32 = v24;
LABEL_32:
    uint64_t v40 = *(unsigned __int16 *)(v32 + 16);
    if (*(_WORD *)(v32 + 16))
    {
      uint64_t v41 = *(void *)(v32 + 24);
      BOOL v35 = __OFSUB__(v29, v41);
      uint64_t v42 = (__int128 *)((char *)v29 - v41);
      uint64_t v23 = v367;
      if (v35)
      {
LABEL_434:
        __break(1u);
        goto LABEL_435;
      }

      if (__OFADD__(v42, 1LL))
      {
LABEL_435:
        __break(1u);
        goto LABEL_436;
      }

      if ((uint64_t)v42 + 1 < 1)
      {
        uint64_t v40 = 0LL;
      }

      else
      {
        if ((_DWORD)v40 == 1)
        {
          __int128 v29 = v42;
          goto LABEL_45;
        }

        uint64_t v43 = (uint64_t *)(v32 + 48);
        uint64_t v44 = 1LL;
        while (1)
        {
          uint64_t v45 = *v43;
          v43 += 3;
          __int128 v29 = (__int128 *)((char *)v42 - v45);
          if (__OFSUB__(v42, v45)) {
            goto LABEL_417;
          }
          if (__OFADD__(v29, 1LL)) {
            goto LABEL_418;
          }
          ++v44;
          uint64_t v42 = v29;
          if (v40 == v44) {
            goto LABEL_45;
          }
        }

        uint64_t v40 = v44;
        __int128 v29 = v42;
      }

LABEL_254:
                outlined destroy of Any?( (uint64_t)v435,  &demangling cache variable for type metadata for (Hashable & Sendable)?);
                outlined destroy of Any?( (uint64_t)v436,  &demangling cache variable for type metadata for (Hashable & Sendable)?);
                outlined destroy of AttributedString._AttributeValue((uint64_t)&v382);
                outlined destroy of AttributedString._AttributeValue((uint64_t)v387);
                outlined destroy of Any?( (uint64_t)&v389,  &demangling cache variable for type metadata for AttributedString._AttributeValue?);
                outlined destroy of Any?( (uint64_t)&v399,  &demangling cache variable for type metadata for AttributedString._AttributeValue?);
                __n128 result = outlined destroy of Any?( (uint64_t)&v404,  &demangling cache variable for type metadata for AttributedString._AttributeValue?);
                if ((v225 & 1) == 0) {
                  goto LABEL_286;
                }
LABEL_255:
                v224 += 2;
                ++v223;
                uint64_t v218 = v381;
                if (v226 == v22)
                {
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  __n128 result = swift_bridgeObjectRelease();
                  uint64_t v23 = v367;
                  uint64_t v195 = (uint64_t)v368;
                  uint64_t v188 = *(uint64_t **)(v367 + 64);
                  uint64_t v196 = *(void *)(v367 + 88);
                  __int128 v361 = v344;
                  unint64_t v389 = (unint64_t)v368;
                  uint64_t v390 = v357;
                  unint64_t v193 = v343;
                  unint64_t v363 = v357;
                  __int128 v391 = (uint64_t *)v343;
                  BOOL v35 = __OFADD__(v358++, 1LL);
                  if (!v35) {
                    goto LABEL_223;
                  }
                  __break(1u);
LABEL_284:
                  outlined destroy of AttributedString._AttributeValue((uint64_t)v387);
LABEL_285:
                  outlined destroy of Any?( (uint64_t)&v389,  (uint64_t *)&demangling cache variable for type metadata for (AttributedString._AttributeValue?, AttributedString._AttributeValue?));
                  outlined destroy of Any?((uint64_t)&v399, v188);
                  outlined destroy of Any?((uint64_t)&v404, v188);
LABEL_286:
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  __n128 result = swift_bridgeObjectRelease();
                  uint64_t v23 = v367;
                  uint64_t v201 = v379;
                  unint64_t v199 = v363;
                  uint64_t v196 = v359;
                  goto LABEL_287;
                }
              }
            }

            swift_bridgeObjectRelease();
            __n128 result = swift_bridgeObjectRelease();
LABEL_287:
            if (v196 != *(void *)(v23 + 88)) {
              goto LABEL_411;
            }
            if (v360)
            {
              unint64_t v245 = *(void *)(v360 + 24 * ((v199 >> ((4 * *(_BYTE *)(v360 + 18) + 8) & 0x3C)) & 0xF) + 24);
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
            }

            else
            {
              uint64_t v246 = *(void *)(v23 + 64);
              swift_unknownObjectRetain();
              unint64_t v245 = specialized Rope._Node.subscript.getter(v199, v246);
              swift_unknownObjectRelease();
            }

            swift_bridgeObjectRelease();
            __n128 result = swift_bridgeObjectRelease();
            __int128 v247 = (char *)v361 + v245;
            if (__OFADD__(v361, v245)) {
              goto LABEL_412;
            }
            unint64_t v248 = v355;
            __int128 v249 = v355[1];
            v436[0] = *v355;
            v436[1] = v249;
            v436[2] = v355[2];
            BigString.utf8.getter();
            __n128 result = v329;
            if (__OFSUB__(v247, (unint64_t)v329 >> 11))
            {
LABEL_413:
              __break(1u);
LABEL_414:
              __break(1u);
              goto LABEL_415;
            }

            unint64_t v250 = BigString.UTF8View.index(_:offsetBy:)();
            uint64_t v252 = v251;
            unint64_t v254 = v253;
            unint64_t v256 = v255;
            __n128 result = outlined release of Locale((uint64_t)v426);
            if (v350 >= v250 >> 10) {
              unint64_t v257 = v250;
            }
            else {
              unint64_t v257 = v342;
            }
            if (v350 >= v250 >> 10) {
              uint64_t v258 = v252;
            }
            else {
              uint64_t v258 = v341;
            }
            if (v350 >= v250 >> 10) {
              unint64_t v259 = v254;
            }
            else {
              unint64_t v259 = v340;
            }
            if (v350 >= v250 >> 10) {
              unint64_t v260 = v256;
            }
            else {
              unint64_t v260 = v339;
            }
            __int128 v261 = *v248;
            __int128 v262 = v248[1];
            v435[2] = v248[2];
            v435[1] = v262;
            v435[0] = v261;
            unint64_t v263 = v352;
            if (v257 >> 10 < v352) {
              goto LABEL_414;
            }
            *(void *)&__int128 v399 = v373;
            *((void *)&v399 + 1) = v366;
            *(void *)&__int128 v400 = v365;
            *((void *)&v400 + 1) = v364;
            *(void *)&__int128 v401 = v257;
            *((void *)&v401 + 1) = v258;
            *(void *)&__int128 v402 = v259;
            *((void *)&v402 + 1) = v260;
            uint64_t v264 = *(void *)(v201 + 16);
            if (!v264 || v352 == v257 >> 10)
            {
              unint64_t v381 = v258;
            }

            else
            {
              uint64_t v265 = v258;
              swift_bridgeObjectRetain();
              outlined retain of Locale((uint64_t)v435);
              uint64_t v266 = 40LL;
              uint64_t v267 = v264;
              while (*(void *)(v201 + v266))
              {
                swift_bridgeObjectRelease();
                v266 += 16LL;
                if (!--v267)
                {
                  swift_bridgeObjectRelease();
                  goto LABEL_316;
                }
              }

              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease_n();
              BigString.utf8.getter();
              BigString.UTF8View.subscript.getter();
              outlined release of Locale((uint64_t)v427);
              v387[0] = v373;
              v387[1] = v366;
              v387[2] = v365;
              v387[3] = v364;
              v387[4] = v373;
              v387[5] = v366;
              v387[6] = v365;
              v387[7] = v364;
              specialized BidirectionalCollection<>._getBlock(for:in:)(2LL, v387, &v389);
              __n128 result = outlined release of Locale((uint64_t)&v428);
              if (v396 != 2)
              {
                unint64_t v257 = v393;
                if (v263 > v393 >> 10) {
                  goto LABEL_438;
                }
                uint64_t v265 = v394;
                unint64_t v259 = v395;
                unint64_t v260 = v396;
              }

      unint64_t v186 = v141;
LABEL_255:
      if ((POSIXErrorCode.init(rawValue:)() & 0x100000000LL) == 0)
      {
        static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSPOSIXErrorDomain");
        uint64_t v151 = (int)POSIXErrorCode.rawValue.getter();
        char v152 = objc_allocWithZone((Class)&OBJC_CLASS___NSError);
        unint64_t v153 = String._bridgeToObjectiveCImpl()();
        swift_bridgeObjectRelease();
        uint64_t v23 = objc_msgSend(v152, sel_initWithDomain_code_userInfo_, v153, v151, _NativeDictionary.bridged()());
        swift_unknownObjectRelease();
        swift_unknownObjectRelease();
        uint64_t v154 = objc_msgSend(v23, sel_domain);
        uint64_t v155 = static String._unconditionallyBridgeFromObjectiveC(_:)(v154);
        uint64_t v157 = v156;

        uint64_t v158 = static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSPOSIXErrorDomain");
        __int128 v15 = v159;
        if (v155 == v158 && v157 == v159)
        {
          swift_bridgeObjectRelease_n();
          goto LABEL_260;
        }

        unint64_t v160 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if ((v160 & 1) != 0)
        {
LABEL_260:
          swift_bridgeObjectRetain();
          specialized CocoaError.init<A>(_:path:underlying:variant:source:destination:)( (uint64_t (*)(void))v186,  a2,  v187,  v23,  0LL,  0LL,  0LL,  0LL,  &v189,  0LL,  0LL);
          swift_willThrow();
          if (!v13)
          {
            uint64_t v161 = v179[0];
LABEL_262:
            close(v161);
LABEL_277:

            outlined consume of (@escaping @callee_guaranteed (@in_guaranteed URL, @guaranteed Error) -> (@unowned Bool))?((uint64_t)v180);
            outlined consume of (@escaping @callee_guaranteed (@in_guaranteed URL, @guaranteed Error) -> (@unowned Bool))?((uint64_t)v182);
            return swift_release();
          }

          goto LABEL_276;
        }

        goto LABEL_279;
      }

    __int128 v12 = v186;
    __int128 v18 = (void *)v187;
    if (v21 >= v9)
    {
      unint64_t v5 = *v6;
      if (a2 == v9)
      {
        __int128 v12 = v181[11];
        if (v5)
        {
          uint64_t v150 = v181[10];
          if (v150 < a2) {
            goto LABEL_379;
          }
          unint64_t v10 = (void *)v181[9];
          __int128 v17 = *(unsigned __int16 *)(v5 + 16);
          __int128 v16 = *(unsigned __int8 *)(v5 + 18);
          if (*(_WORD *)(v5 + 16) && v150 > a2)
          {
            if (*(_BYTE *)(v5 + 18))
            {
              __n128 result = (void *)swift_unknownObjectRetain_n();
              uint64_t v37 = a2;
              uint64_t v151 = (void *)v5;
              while (1)
              {
                unint64_t v153 = *((unsigned __int16 *)v151 + 8);
                if (!*((_WORD *)v151 + 8)) {
                  goto LABEL_263;
                }
                uint64_t v154 = v151[5];
                uint64_t v155 = v37 - v154;
                if (__OFSUB__(v37, v154)) {
                  goto LABEL_354;
                }
                if (__OFADD__(v155, 1LL)) {
                  goto LABEL_355;
                }
                if (v155 + 1 <= 0)
                {
                  unint64_t v153 = 0LL;
                }

                else
                {
                  if ((_DWORD)v153 == 1)
                  {
                    v37 -= v154;
LABEL_263:
                    if (v37) {
                      goto LABEL_353;
                    }
                    goto LABEL_264;
                  }

                  unint64_t v156 = v151[8];
                  __int128 v20 = __OFSUB__(v155, v156);
                  uint64_t v157 = v155 - v156;
                  if (v20) {
                    goto LABEL_368;
                  }
                  if (__OFADD__(v157, 1LL)) {
                    goto LABEL_369;
                  }
                  if (v157 + 1 >= 1)
                  {
                    if ((_DWORD)v153 != 2)
                    {
                      uint64_t v158 = v151 + 11;
                      uint64_t v159 = 2LL;
                      while (v153 != v159)
                      {
                        uint64_t v37 = v157 - *v158;
                        if (__OFSUB__(v157, *v158)) {
                          goto LABEL_342;
                        }
                        if (__OFADD__(v37, 1LL)) {
                          goto LABEL_343;
                        }
                        if (v37 + 1 < 1)
                        {
                          unint64_t v153 = v159;
                          uint64_t v37 = v157;
                          goto LABEL_264;
                        }

                        ++v159;
                        v158 += 3;
                        uint64_t v157 = v37;
                        if (v153 == v159) {
                          goto LABEL_263;
                        }
                      }

    __int128 v12 = v185;
    __int128 v18 = (void *)v186;
    if (v21 >= v9)
    {
      unint64_t v5 = *v6;
      if (a2 == v9)
      {
        __int128 v12 = v180[11];
        if (v5)
        {
          uint64_t v149 = v180[10];
          if (v149 < a2) {
            goto LABEL_379;
          }
          unint64_t v10 = (void *)v180[9];
          __int128 v17 = *(unsigned __int16 *)(v5 + 16);
          __int128 v16 = *(unsigned __int8 *)(v5 + 18);
          if (*(_WORD *)(v5 + 16) && v149 > a2)
          {
            if (*(_BYTE *)(v5 + 18))
            {
              __n128 result = (void *)swift_unknownObjectRetain_n();
              uint64_t v37 = a2;
              uint64_t v150 = (void *)v5;
              while (1)
              {
                char v152 = *((unsigned __int16 *)v150 + 8);
                if (!*((_WORD *)v150 + 8)) {
                  goto LABEL_263;
                }
                unint64_t v153 = v150[5];
                uint64_t v154 = v37 - v153;
                if (__OFSUB__(v37, v153)) {
                  goto LABEL_354;
                }
                if (__OFADD__(v154, 1LL)) {
                  goto LABEL_355;
                }
                if (v154 + 1 <= 0)
                {
                  char v152 = 0LL;
                }

                else
                {
                  if ((_DWORD)v152 == 1)
                  {
                    v37 -= v153;
LABEL_263:
                    if (v37) {
                      goto LABEL_353;
                    }
                    goto LABEL_264;
                  }

                  uint64_t v155 = v150[8];
                  __int128 v20 = __OFSUB__(v154, v155);
                  unint64_t v156 = v154 - v155;
                  if (v20) {
                    goto LABEL_368;
                  }
                  if (__OFADD__(v156, 1LL)) {
                    goto LABEL_369;
                  }
                  if (v156 + 1 >= 1)
                  {
                    if ((_DWORD)v152 != 2)
                    {
                      uint64_t v157 = v150 + 11;
                      uint64_t v158 = 2LL;
                      while (v152 != v158)
                      {
                        uint64_t v37 = v156 - *v157;
                        if (__OFSUB__(v156, *v157)) {
                          goto LABEL_342;
                        }
                        if (__OFADD__(v37, 1LL)) {
                          goto LABEL_343;
                        }
                        if (v37 + 1 < 1)
                        {
                          char v152 = v158;
                          uint64_t v37 = v156;
                          goto LABEL_264;
                        }

                        ++v158;
                        v157 += 3;
                        unint64_t v156 = v37;
                        if (v152 == v158) {
                          goto LABEL_263;
                        }
                      }

      __break(1u);
LABEL_255:
      __break(1u);
LABEL_256:
      __break(1u);
LABEL_257:
      __break(1u);
LABEL_258:
      __break(1u);
LABEL_259:
      __break(1u);
LABEL_260:
      __int128 v47 = i;
      uint64_t v41 = v115;
      uint64_t v42 = v116;
    }

    LODWORD(v118[0]) = v20;
    WORD2(v118[0]) = a3;
    HIWORD(v118[0]) = v19;
    LOWORD(v118[1]) = (_WORD)v7;
    WORD1(v118[1]) = v13;
    WORD2(v118[1]) = a4;
    HIWORD(v118[1]) = v116;
    uint64_t v119 = v48;
    __int128 v120 = v47;
    uint64_t v49 = _So9NSDecimala__exponent_getter((char *)v118);
    if ((v49 & 0x80000000) == 0)
    {
      if (v49)
      {
        if (!is_mul_ok(i, 0xAuLL)) {
          goto LABEL_186;
        }
        i *= 10LL;
        uint64_t v50 = v49 - 1;
        if (v49 != 1)
        {
          if (!is_mul_ok(i, 0xAuLL)) {
            goto LABEL_186;
          }
          i *= 10LL;
          while (--v50)
          {
            unint64_t v51 = (i * (unsigned __int128)0xAuLL) >> 64;
            i *= 10LL;
            if (v51) {
              goto LABEL_186;
            }
          }
        }
      }

      __break(1u);
LABEL_255:
      __break(1u);
LABEL_256:
      __break(1u);
LABEL_257:
      __break(1u);
LABEL_258:
      __break(1u);
LABEL_259:
      __break(1u);
LABEL_260:
      __int128 v47 = i;
      uint64_t v41 = v115;
      uint64_t v42 = v116;
    }

    LODWORD(v118[0]) = v20;
    WORD2(v118[0]) = a3;
    HIWORD(v118[0]) = v19;
    LOWORD(v118[1]) = (_WORD)v7;
    WORD1(v118[1]) = v13;
    WORD2(v118[1]) = a4;
    HIWORD(v118[1]) = v116;
    uint64_t v119 = v48;
    __int128 v120 = v47;
    uint64_t v49 = _So9NSDecimala__exponent_getter((char *)v118);
    if ((v49 & 0x80000000) == 0)
    {
      if (v49)
      {
        if (!is_mul_ok(i, 0xAuLL)) {
          goto LABEL_186;
        }
        i *= 10LL;
        uint64_t v50 = v49 - 1;
        if (v49 != 1)
        {
          if (!is_mul_ok(i, 0xAuLL)) {
            goto LABEL_186;
          }
          i *= 10LL;
          while (--v50)
          {
            unint64_t v51 = (i * (unsigned __int128)0xAuLL) >> 64;
            i *= 10LL;
            if (v51) {
              goto LABEL_186;
            }
          }
        }
      }

      __break(1u);
LABEL_255:
      __break(1u);
LABEL_256:
      __break(1u);
LABEL_257:
      __break(1u);
LABEL_258:
      __break(1u);
LABEL_259:
      __break(1u);
LABEL_260:
      __int128 v47 = i;
      uint64_t v41 = v115;
      uint64_t v42 = v116;
    }

    LODWORD(v118[0]) = v20;
    WORD2(v118[0]) = a3;
    HIWORD(v118[0]) = v19;
    LOWORD(v118[1]) = (_WORD)v7;
    WORD1(v118[1]) = v13;
    WORD2(v118[1]) = a4;
    HIWORD(v118[1]) = v116;
    uint64_t v119 = v48;
    __int128 v120 = v47;
    uint64_t v49 = _So9NSDecimala__exponent_getter((char *)v118);
    if ((v49 & 0x80000000) == 0)
    {
      if (v49)
      {
        if (!is_mul_ok(i, 0xAuLL)) {
          goto LABEL_186;
        }
        i *= 10LL;
        uint64_t v50 = v49 - 1;
        if (v49 != 1)
        {
          if (!is_mul_ok(i, 0xAuLL)) {
            goto LABEL_186;
          }
          i *= 10LL;
          while (--v50)
          {
            unint64_t v51 = (i * (unsigned __int128)0xAuLL) >> 64;
            i *= 10LL;
            if (v51) {
              goto LABEL_186;
            }
          }
        }
      }

LABEL_416:
                  __break(1u);
LABEL_417:
                  __break(1u);
LABEL_418:
                  __break(1u);
LABEL_419:
                  __break(1u);
LABEL_420:
                  __break(1u);
                  goto LABEL_421;
                }

                              outlined destroy of Any?( (uint64_t)&v380,  &demangling cache variable for type metadata for AttributedString._AttributeValue?);
                              uint64_t v294 = v313;
                              *int v313 = 0LL;
                              uint64_t v295 = 1;
LABEL_417:
                              *((_BYTE *)v294 + 8) = v295;
                              if (one-time initialization token for name == -1)
                              {
                                if (*(void *)(v8 + 16)) {
                                  goto LABEL_419;
                                }
                              }

                              else
                              {
                                swift_once();
                                if (*(void *)(v8 + 16))
                                {
LABEL_419:
                                  uint64_t v296 = qword_18C5D2B98;
                                  unint64_t v297 = static AttributeScopes.FoundationAttributes.ReferentConceptAttribute.name;
                                  swift_bridgeObjectRetain();
                                  char v298 = specialized __RawDictionaryStorage.find<A>(_:)(v297, v296);
                                  if ((v299 & 1) != 0)
                                  {
                                    outlined init with copy of AttributedString._AttributeValue( *(void *)(v8 + 56) + 72 * v298,  (uint64_t)&v380);
                                  }

                                  else
                                  {
                                    __int128 v384 = 0LL;
                                    __int128 v382 = 0u;
                                    __int128 v383 = 0u;
                                    uint64_t v380 = 0u;
                                    unint64_t v381 = 0u;
                                  }

                                  swift_bridgeObjectRelease();
                                  if (*((void *)&v381 + 1))
                                  {
                                    outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>( (uint64_t)&v380,  (uint64_t)v364);
                                    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Hashable & Sendable);
                                    uint64_t v300 = v314;
                                    swift_dynamicCast();
                                    outlined destroy of AttributedString._AttributeValue((uint64_t)&v380);
                                    uint64_t v301 = 0;
LABEL_427:
                                    *((_BYTE *)v300 + 8) = v301;
                                    swift_bridgeObjectRelease();
                                    __n128 result = swift_bridgeObjectRelease();
                                    if (v9 >> 10 >= v332 >> 10)
                                    {
                                      uint64_t v302 = v311;
                                      *uint64_t v311 = v332;
                                      uint64_t v303 = v329;
                                      v302[1] = v324;
                                      v302[2] = v303;
                                      v302[3] = v328;
                                      v302[4] = v9;
                                      v302[5] = v10;
                                      v302[6] = v21;
                                      v302[7] = v22;
                                      return v385;
                                    }

                                    __break(1u);
                                    goto LABEL_430;
                                  }

LABEL_415:
                __break(1u);
                goto LABEL_416;
              }

  __break(1u);
LABEL_416:
  __break(1u);
LABEL_417:
  __break(1u);
LABEL_418:
  __break(1u);
LABEL_419:
  __break(1u);
LABEL_420:
  __break(1u);
LABEL_421:
  __break(1u);
LABEL_422:
  __break(1u);
LABEL_423:
  __break(1u);
LABEL_424:
  __break(1u);
LABEL_425:
  __break(1u);
LABEL_426:
  __break(1u);
  return result;
}

LABEL_442:
  __break(1u);
  return result;
}

double protocol witness for BidirectionalCollection.formIndex(before:) in conformance AttributedString.Runs.AttributesSlice5<A, B, C, D, E>( _OWORD *a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for BidirectionalCollection.formIndex(before:) in conformance AttributedString.Runs.AttributesSlice1<A>( a1,  a2,  a3,  (void (*)(_OWORD *__return_ptr))AttributedString.Runs.AttributesSlice5.index(before:));
}

void (*protocol witness for Collection.subscript.read in conformance AttributedString.Runs.AttributesSlice5<A, B, C, D, E>( void *a1, unint64_t *a2, void *a3))(uint64_t *a1, uint64_t a2)
{
  unint64_t v6 = malloc(0x70uLL);
  *a1 = v6;
  swift_getAssociatedTypeWitness();
  *unint64_t v6 = type metadata accessor for Optional();
  swift_getAssociatedTypeWitness();
  v6[1] = type metadata accessor for Optional();
  swift_getAssociatedTypeWitness();
  v6[2] = type metadata accessor for Optional();
  swift_getAssociatedTypeWitness();
  v6[3] = type metadata accessor for Optional();
  swift_getAssociatedTypeWitness();
  v6[4] = type metadata accessor for Optional();
  v6[5] = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Range<AttributedString.Index>);
  uint64_t TupleTypeMetadata = (int *)swift_getTupleTypeMetadata();
  v6[10] = TupleTypeMetadata;
  uint64_t v8 = *((void *)TupleTypeMetadata - 1);
  v6[11] = v8;
  unint64_t v9 = (char *)malloc(*(void *)(v8 + 64));
  v6[12] = v9;
  unint64_t v10 = AttributedString.Runs.AttributesSlice5.subscript.read(v6 + 6, a2, a3);
  uint64_t v12 = v11;
  uint64_t v14 = v13;
  v6[13] = v10;
  uint64_t v17 = *v15;
  uint64_t v16 = v15[1];
  __int128 v18 = (_OWORD *)v15[3];
  uint64_t v33 = v15[2];
  uint64_t v19 = type metadata accessor for Optional();
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v19 - 8) + 16LL))(v9, v12, v19);
  __int128 v20 = &v9[TupleTypeMetadata[12]];
  uint64_t v21 = type metadata accessor for Optional();
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v21 - 8) + 16LL))(v20, v14, v21);
  uint64_t v22 = &v9[TupleTypeMetadata[16]];
  uint64_t v23 = type metadata accessor for Optional();
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v23 - 8) + 16LL))(v22, v17, v23);
  unint64_t v24 = &v9[TupleTypeMetadata[20]];
  uint64_t v25 = type metadata accessor for Optional();
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v25 - 8) + 16LL))(v24, v16, v25);
  int64_t v26 = &v9[TupleTypeMetadata[24]];
  uint64_t v27 = type metadata accessor for Optional();
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v27 - 8) + 16LL))(v26, v33, v27);
  uint64_t v28 = &v9[TupleTypeMetadata[28]];
  __int128 v29 = v18[1];
  __int128 v30 = v18[2];
  __int128 v31 = v18[3];
  *(_OWORD *)uint64_t v28 = *v18;
  *((_OWORD *)v28 + 1) = v29;
  *((_OWORD *)v28 + 2) = v30;
  *((_OWORD *)v28 + 3) = v31;
  return protocol witness for Collection.subscript.read in conformance AttributedString.Runs.AttributesSlice5<A, B, C, D, E>;
}

void protocol witness for Collection.subscript.read in conformance AttributedString.Runs.AttributesSlice5<A, B, C, D, E>( uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = *a1 + 48;
  (*(void (**)(void, void))(*(void *)(*a1 + 88) + 8LL))(*(void *)(*a1 + 96), *(void *)(*a1 + 80));
  unint64_t v5 = *(void **)(v3 + 96);
  (*(void (**)(uint64_t, uint64_t))(v3 + 104))(v4, a2);
  free(v5);
  free((void *)v3);
}

void (*AttributedString.Runs.AttributesSlice5.subscript.read( void *a1, unint64_t *a2, void *a3))(uint64_t a1)
{
  unint64_t v6 = malloc(0x68uLL);
  *a1 = v6;
  swift_getAssociatedTypeWitness();
  *unint64_t v6 = type metadata accessor for Optional();
  swift_getAssociatedTypeWitness();
  v6[1] = type metadata accessor for Optional();
  swift_getAssociatedTypeWitness();
  v6[2] = type metadata accessor for Optional();
  swift_getAssociatedTypeWitness();
  v6[3] = type metadata accessor for Optional();
  swift_getAssociatedTypeWitness();
  v6[4] = type metadata accessor for Optional();
  v6[5] = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Range<AttributedString.Index>);
  uint64_t TupleTypeMetadata = (int *)swift_getTupleTypeMetadata();
  v6[10] = TupleTypeMetadata;
  uint64_t v8 = *((void *)TupleTypeMetadata - 1);
  v6[11] = v8;
  unint64_t v9 = (char *)malloc(*(void *)(v8 + 64));
  v6[12] = v9;
  uint64_t v10 = (uint64_t)&v9[TupleTypeMetadata[12]];
  uint64_t v11 = (uint64_t)&v9[TupleTypeMetadata[16]];
  uint64_t v12 = (uint64_t)&v9[TupleTypeMetadata[20]];
  uint64_t v13 = (uint64_t)&v9[TupleTypeMetadata[24]];
  uint64_t v14 = (unint64_t *)&v9[TupleTypeMetadata[28]];
  AttributedString.Runs.AttributesSlice5.subscript.getter((uint64_t)v9, v10, v11, v12, v13, v14, a2, a3);
  v6[6] = v11;
  v6[7] = v12;
  v6 += 6;
  v6[2] = v13;
  v6[3] = v14;
  return AttributedString.Runs.AttributesSlice5.subscript.read;
}

void AttributedString.Runs.AttributesSlice5.subscript.read(uint64_t a1)
{
  uint64_t v1 = *(void **)a1;
  uint64_t v2 = *(void **)(*(void *)a1 + 96LL);
  (*(void (**)(void *, void))(*(void *)(*(void *)a1 + 88LL) + 8LL))( v2,  *(void *)(*(void *)a1 + 80LL));
  free(v2);
  free(v1);
}

uint64_t protocol witness for Collection.index(_:offsetBy:) in conformance AttributedString.Runs.AttributesSlice5<A, B, C, D, E>( uint64_t a1, uint64_t a2, uint64_t a3)
{
  return BidirectionalCollection.index(_:offsetBy:)();
}

uint64_t protocol witness for Collection.index(_:offsetBy:limitedBy:) in conformance AttributedString.Runs.AttributesSlice5<A, B, C, D, E>( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return BidirectionalCollection.index(_:offsetBy:limitedBy:)();
}

void protocol witness for Collection.distance(from:to:) in conformance AttributedString.Runs.AttributesSlice5<A, B, C, D, E>( uint64_t a1, uint64_t a2, uint64_t a3)
{
}

double protocol witness for Collection.formIndex(after:) in conformance AttributedString.Runs.AttributesSlice5<A, B, C, D, E>( _OWORD *a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for BidirectionalCollection.formIndex(before:) in conformance AttributedString.Runs.AttributesSlice1<A>( a1,  a2,  a3,  (void (*)(_OWORD *__return_ptr))AttributedString.Runs.AttributesSlice5.index(after:));
}

double protocol witness for BidirectionalCollection.formIndex(before:) in conformance AttributedString.Runs.AttributesSlice1<A>( _OWORD *a1, uint64_t a2, uint64_t a3, void (*a4)(_OWORD *__return_ptr))
{
  double result = *(double *)v7;
  __int128 v6 = v7[1];
  *a1 = v7[0];
  a1[1] = v6;
  return result;
}

uint64_t protocol witness for Sequence.makeIterator() in conformance AttributedString.Runs.AttributesSlice5<A, B, C, D, E>( uint64_t a1, uint64_t a2)
{
  return protocol witness for Sequence.makeIterator() in conformance AttributedString.Runs.AttributesSlice1<A>( a1,  a2,  (void (*)(void))AttributedString.Runs.AttributesSlice5.makeIterator());
}

uint64_t protocol witness for Sequence.makeIterator() in conformance AttributedString.Runs.AttributesSlice1<A>( uint64_t a1, uint64_t a2, void (*a3)(void))
{
  __int128 v4 = *(_OWORD *)(v3 + 176);
  v11[10] = *(_OWORD *)(v3 + 160);
  v11[11] = v4;
  v11[12] = *(_OWORD *)(v3 + 192);
  uint64_t v12 = *(void *)(v3 + 208);
  __int128 v5 = *(_OWORD *)(v3 + 112);
  v11[6] = *(_OWORD *)(v3 + 96);
  v11[7] = v5;
  __int128 v6 = *(_OWORD *)(v3 + 144);
  v11[8] = *(_OWORD *)(v3 + 128);
  v11[9] = v6;
  __int128 v7 = *(_OWORD *)(v3 + 48);
  v11[2] = *(_OWORD *)(v3 + 32);
  v11[3] = v7;
  __int128 v8 = *(_OWORD *)(v3 + 80);
  v11[4] = *(_OWORD *)(v3 + 64);
  v11[5] = v8;
  __int128 v9 = *(_OWORD *)(v3 + 16);
  v11[0] = *(_OWORD *)v3;
  v11[1] = v9;
  return outlined release of ReversedCollection<AttributedString.Runs.AttributesSlice1<AttributeScopes.FoundationAttributes.InflectionRuleAttribute>>.Iterator((uint64_t)v11);
}

uint64_t protocol witness for Sequence.underestimatedCount.getter in conformance AttributedString.Runs.AttributesSlice5<A, B, C, D, E>( uint64_t a1)
{
  return Collection.underestimatedCount.getter();
}

uint64_t protocol witness for Sequence._copyToContiguousArray() in conformance AttributedString.Runs.AttributesSlice5<A, B, C, D, E>( uint64_t a1)
{
  return Collection._copyToContiguousArray()();
}

double AttributedString.Runs.subscript.getter@<D0>( uint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, uint64_t *a4@<X3>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X7>, uint64_t a8@<X8>, uint64_t a9, uint64_t a10)
{
  uint64_t v13 = *a1;
  uint64_t v14 = *a2;
  uint64_t v15 = *a3;
  uint64_t v16 = *a4;
  __int128 v17 = *(_OWORD *)(v10 + 176);
  v26[10] = *(_OWORD *)(v10 + 160);
  v26[11] = v17;
  uint64_t v27 = *(void *)(v10 + 192);
  __int128 v18 = *(_OWORD *)(v10 + 112);
  v26[6] = *(_OWORD *)(v10 + 96);
  v26[7] = v18;
  __int128 v19 = *(_OWORD *)(v10 + 144);
  v26[8] = *(_OWORD *)(v10 + 128);
  v26[9] = v19;
  __int128 v20 = *(_OWORD *)(v10 + 48);
  void v26[2] = *(_OWORD *)(v10 + 32);
  v26[3] = v20;
  __int128 v21 = *(_OWORD *)(v10 + 80);
  v26[4] = *(_OWORD *)(v10 + 64);
  v26[5] = v21;
  __int128 v22 = *(_OWORD *)(v10 + 16);
  v26[0] = *(_OWORD *)v10;
  v26[1] = v22;
  outlined retain of AttributedString.Runs((uint64_t)v26);
  *(void *)&double result = AttributedString.Runs.AttributesSlice5.init(runs:)( v10,  *(void *)(v13 + *MEMORY[0x18961A9A8] + 8LL),  *(void *)(v14 + *MEMORY[0x18961A9A8] + 8LL),  *(void *)(v15 + *MEMORY[0x18961A9A8] + 8LL),  *(void *)(v16 + *MEMORY[0x18961A9A8] + 8LL),  a5,  a6,  a8,  a7,  a9,  a10).n128_u64[0];
  return result;
}

__n128 AttributedString.Runs.NSAttributesSlice.startIndex.getter@<Q0>(uint64_t a1@<X8>)
{
  __n128 result = *(__n128 *)(v1 + 136);
  __int128 v3 = *(_OWORD *)(v1 + 152);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

void AttributedString.Runs.NSAttributesSlice.Iterator.next()(_OWORD *a1@<X8>)
{
  unint64_t v2 = *((void *)v1 + 26);
  unint64_t v3 = v2 >> 10;
  unint64_t v185 = *((void *)v1 + 21);
  if (v2 >> 10 == v185 >> 10)
  {
    a1[3] = 0u;
    a1[4] = 0u;
    a1[1] = 0u;
    a1[2] = 0u;
    *a1 = 0u;
    return;
  }

  __int128 v4 = *(void **)v1;
  __int128 v5 = *(__int128 *)((char *)v1 + 24);
  __int128 v239 = *(__int128 *)((char *)v1 + 8);
  __int128 v240 = v5;
  __int128 v6 = *(__int128 *)((char *)v1 + 56);
  __int128 v241 = *(__int128 *)((char *)v1 + 40);
  __int128 v242 = v6;
  if (v3 >= v185 >> 10) {
    goto LABEL_209;
  }
  unint64_t v196 = *((void *)v1 + 17);
  if (v3 < v196 >> 10) {
    goto LABEL_209;
  }
  unint64_t v7 = v4[8];
  int64_t v8 = v4[10];
  int64_t v9 = v2 >> 11;
  if (v7) {
    int64_t v10 = v4[10];
  }
  else {
    int64_t v10 = 0LL;
  }
  if (v10 < v9) {
    goto LABEL_210;
  }
  __int128 v190 = *(__int128 *)((char *)v1 + 72);
  __int128 v11 = *(__int128 *)((char *)v1 + 88);
  __int128 v12 = *(__int128 *)((char *)v1 + 104);
  __int128 v13 = *(__int128 *)((char *)v1 + 120);
  unint64_t v14 = *((void *)v1 + 18);
  int64_t v188 = v2 >> 11;
  unint64_t v189 = v14;
  *(void *)&__int128 v195 = *((void *)v1 + 19);
  unint64_t v194 = (__int128 *)*((void *)v1 + 20);
  uint64_t v179 = *((void *)v1 + 22);
  uint64_t v178 = *((void *)v1 + 23);
  uint64_t v15 = *((void *)v1 + 24);
  unint64_t v176 = v1;
  uint64_t v177 = v15;
  uint64_t v16 = *((void *)v1 + 27);
  uint64_t v192 = *((void *)v1 + 28);
  uint64_t v191 = (void *)*((void *)v1 + 29);
  uint64_t v17 = v4[9];
  uint64_t v18 = v4[11];
  uint64_t v184 = v4;
  uint64_t v164 = 0LL;
  uint64_t v165 = a1;
  unint64_t v166 = v185 >> 10;
  unint64_t v167 = v2 >> 10;
  uint64_t v186 = v16;
  unint64_t v187 = v196 >> 10;
  __int128 v182 = v12;
  __int128 v183 = v11;
  __int128 v181 = v13;
  uint64_t v193 = v18;
  if (!v7 || v9 >= v8 || !*(_WORD *)(v7 + 16))
  {
    swift_unknownObjectRetain_n();
    swift_retain();
    unint64_t v30 = specialized Rope._endPath.getter(v7);
    swift_unknownObjectRelease();
    uint64_t v31 = v17;
    uint64_t v22 = 0LL;
    int64_t v9 = 0LL;
    int64_t v32 = 0LL;
    if (!v7) {
      goto LABEL_32;
    }
    goto LABEL_31;
  }

  uint64_t v180 = v17;
  uint64_t v19 = *(unsigned __int8 *)(v7 + 18);
  if (*(_BYTE *)(v7 + 18))
  {
    swift_unknownObjectRetain_n();
    swift_retain();
    unint64_t v20 = v7;
    while (1)
    {
      uint64_t v23 = *(unsigned __int16 *)(v20 + 16);
      if (!*(_WORD *)(v20 + 16)) {
        break;
      }
      uint64_t v24 = *(void *)(v20 + 40);
      BOOL v25 = __OFSUB__(v9, v24);
      int64_t v26 = v9 - v24;
      if (v25) {
        goto LABEL_201;
      }
      if (__OFADD__(v26, 1LL)) {
        goto LABEL_202;
      }
      if (v26 + 1 < 1)
      {
        uint64_t v23 = 0LL;
        goto LABEL_16;
      }

      if ((_DWORD)v23 == 1)
      {
        int64_t v9 = v26;
        break;
      }

      uint64_t v27 = (uint64_t *)(v20 + 64);
      uint64_t v28 = 1LL;
      while (1)
      {
        uint64_t v29 = *v27;
        v27 += 3;
        int64_t v9 = v26 - v29;
        if (__OFSUB__(v26, v29)) {
          goto LABEL_195;
        }
        if (__OFADD__(v9, 1LL))
        {
LABEL_196:
          __break(1u);
LABEL_197:
          __break(1u);
LABEL_198:
          __break(1u);
          goto LABEL_199;
        }

        if (v9 + 1 < 1) {
          break;
        }
        ++v28;
        int64_t v26 = v9;
        if (v23 == v28) {
          goto LABEL_15;
        }
      }

      uint64_t v23 = v28;
      int64_t v9 = v26;
LABEL_16:
      char v21 = (4 * *(_BYTE *)(v20 + 18) + 8) & 0x3C;
      uint64_t v19 = ((-15LL << v21) - 1) & v19 | (v23 << v21);
      uint64_t v22 = *(void *)(v20 + 24 + 24 * v23);
      swift_unknownObjectRetain();
      swift_unknownObjectRelease();
      unint64_t v20 = v22;
      if (!*(_BYTE *)(v22 + 18)) {
        goto LABEL_73;
      }
    }

LABEL_222:
              __break(1u);
              goto LABEL_223;
            }

            __break(1u);
            goto LABEL_223;
          }

    swift_bridgeObjectRelease();
    unint64_t v199 = 0;
    for (i = 897LL; ; i = 764LL)
    {
LABEL_235:
      _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
LABEL_236:
      unint64_t v199 = 0;
    }
  }

  if ((*(_BYTE *)(v6 + 168) & 1) != 0)
  {
    uint64_t v109 = v7;
    swift_retain();
    swift_retain();
    uint64_t v110 = MEMORY[0x186E1BFF4](0LL, 0xE000000000000000LL);
  }

  else
  {
    __int128 v4 = *(void *)(v6 + 24);
    uint64_t v126 = v7;
    swift_retain();
    swift_retain();
    uint64_t v110 = String.subscript.getter();
  }

  unint64_t v3 = (__int128 *)MEMORY[0x186E1B610](v110);
  unint64_t v2 = v127;
  swift_bridgeObjectRelease();
  if ((specialized Collection.first.getter((uint64_t)v3, v2) & 0x1FF) == 0x2F)
  {
    __break(1u);
    goto LABEL_209;
  }

  if ((v8[168] & 1) != 0)
  {
    swift_retain();
    uint64_t v128 = MEMORY[0x186E1BFF4](0LL, 0xE000000000000000LL);
  }

  else
  {
    __int128 v202 = (__int128 *)v2;
    swift_retain();
    unint64_t v2 = (unint64_t)v202;
    uint64_t v128 = String.subscript.getter();
  }

  uint64_t v129 = MEMORY[0x186E1B610](v128);
  __int128 v4 = v130;
  swift_bridgeObjectRelease();
  if (v8[72] != 1 || (v8[96] & 1) == 0 || v8[120] != 1 || (v8[144] & 1) == 0)
  {
    int v131 = HIBYTE(v4) & 0xF;
    if ((v4 & 0x2000000000000000LL) == 0) {
      int v131 = v129 & 0xFFFFFFFFFFFFLL;
    }
    if (!v131)
    {
      swift_bridgeObjectRelease();
      *(void *)&__int128 v211 = 47LL;
      *((void *)&v211 + 1) = 0xE100000000000000LL;
      v133._countAndFlagsBits = (uint64_t)v3;
      v133._object = (void *)v2;
      String.append(_:)(v133);
      swift_release();

      swift_bridgeObjectRelease();
      swift_release_n();
      unint64_t v2 = *((void *)&v211 + 1);
      unint64_t v3 = (__int128 *)v211;
      goto LABEL_167;
    }
  }

  uint64_t v132 = specialized Collection.first.getter((uint64_t)v3, v2);
  if ((v132 & 0x1FF) == 0x2F)
  {
    swift_release();

    swift_release_n();
    swift_bridgeObjectRelease();
    goto LABEL_167;
  }

  __int128 v202 = v3;
  LOBYTE(v211) = 47;
  MEMORY[0x1895F8858](v132);
  i = (uint64_t)&v211;
  swift_bridgeObjectRetain();
  specialized BidirectionalCollection.lastIndex(where:)( (unint64_t)_sSTsSQ7ElementRpzrlE8containsySbABFSbABXEfU_SS8UTF8ViewV_TG5TA_0,  (uint64_t)v197,  v129,  v4);
  if ((v134 & 1) != 0)
  {
    swift_release();

    swift_release_n();
    swift_bridgeObjectRelease_n();
    __int128 v5 = &v211;
    unint64_t v3 = v202;
    goto LABEL_168;
  }

  swift_bridgeObjectRetain();
  String.index(after:)();
  __int128 v5 = (__int128 *)String.subscript.getter();
  uint64_t v1 = v135;
  __int128 v137 = v136;
  unint64_t v3 = v138;
  swift_bridgeObjectRelease();
  *(void *)&__int128 v203 = 0LL;
  *((void *)&v203 + 1) = 0xE000000000000000LL;
  uint64_t v139 = String.count.getter();
  *((void *)&v200 + 1) = v3;
  int64_t v201 = v139;
  *(void *)&uint64_t v200 = v137;
  uint64_t v140 = Substring.distance(from:to:)();
  uint64_t v141 = __OFADD__(v201, v140);
  uint64_t v142 = v201 + v140;
  if (v141)
  {
LABEL_227:
    __break(1u);
    goto LABEL_228;
  }

  MEMORY[0x186E1B64C](v142);
  *(void *)&__int128 v211 = v5;
  *((void *)&v211 + 1) = v1;
  __int128 v212 = v200;
  lazy protocol witness table accessor for type Substring and conformance Substring();
  String.append<A>(contentsOf:)();
  *(void *)&__int128 v211 = v202;
  *((void *)&v211 + 1) = v2;
  String.append<A>(contentsOf:)();
  swift_release();

  swift_bridgeObjectRelease();
  swift_release_n();
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease();
  unint64_t v2 = *((void *)&v203 + 1);
  unint64_t v3 = (__int128 *)v203;
LABEL_167:
  __int128 v5 = &v211;
LABEL_168:
  swift_bridgeObjectRetain();
  uint64_t v143 = String._removingDotSegments.getter((unint64_t)v3, v2);
  unint64_t v145 = v144;
  swift_bridgeObjectRelease_n();
  BYTE8(v208) = 0;
  BYTE14(v208) = 0;
  __int128 v4 = (unint64_t)&v208;
  if ((v145 & 0x1000000000000000LL) != 0)
  {
    *(void *)&__int128 v211 = v143;
    *((void *)&v211 + 1) = v145;
    lazy protocol witness table accessor for type String and conformance String();
    swift_bridgeObjectRetain_n();
    StringProtocol._ephemeralString.getter();
    uint64_t v177 = (void *)String._bridgeToObjectiveCImpl()();
    swift_bridgeObjectRelease();
    uint64_t v178 = (unsigned __int16 *)objc_msgSend(v177, sel__fastCharacterContents);
    uint64_t v179 = v177;
    if (v178)
    {
      *(void *)&__int128 v211 = v143;
      *((void *)&v211 + 1) = v145;
      StringProtocol._ephemeralString.getter();
      uint64_t v180 = (void *)String._bridgeToObjectiveCImpl()();
      swift_bridgeObjectRelease();
      __int128 v181 = objc_msgSend(v180, sel_length);
      swift_unknownObjectRelease();
      __int128 v182 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)( v178,  (uint64_t)v181,  0x10u,  1);
    }

    else
    {
      __int128 v182 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)( v143,  v145,  0x10u,  1);
    }

    unint64_t v189 = v182;
    swift_bridgeObjectRelease_n();
    __int128 v5 = &v211;
    __int128 v4 = (unint64_t)&v208;
    if ((v189 & 1) == 0) {
      goto LABEL_222;
    }
  }

  else
  {
    if ((v145 & 0x2000000000000000LL) != 0)
    {
      unint64_t v147 = HIBYTE(v145) & 0xF;
      *(void *)&__int128 v211 = v143;
      *((void *)&v211 + 1) = v145 & 0xFFFFFFFFFFFFFFLL;
      uint64_t v146 = (char *)&v211;
    }

    else if ((v143 & 0x1000000000000000LL) != 0)
    {
      uint64_t v146 = (char *)((v145 & 0xFFFFFFFFFFFFFFFLL) + 32);
      unint64_t v147 = v143 & 0xFFFFFFFFFFFFLL;
    }

    else
    {
      uint64_t v146 = (char *)_StringObject.sharedUTF8.getter();
    }

    if (!specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v146, v147, 0x10u, 1)) {
      goto LABEL_222;
    }
  }

  swift_bridgeObjectRelease();
  *(void *)&v210[8] = v143;
  *(void *)&v210[16] = v145;
  unint64_t v3 = &v203;
LABEL_179:
  unint64_t v148 = *(_OWORD *)v210;
  __int128 v149 = *(_OWORD *)&v210[16];
  uint64_t v205 = *(_OWORD *)v210;
  v206[0] = *(_OWORD *)&v210[16];
  __int128 v150 = *(_OWORD *)&v210[32];
  v206[1] = *(_OWORD *)&v210[32];
  *(__int128 *)((char *)v3 + 138) = *(_OWORD *)(v4 + 138);
  __int128 v151 = *(_OWORD *)&v209[16];
  __int128 v152 = *(_OWORD *)&v209[32];
  v204[1] = *(_OWORD *)&v209[16];
  v204[2] = *(_OWORD *)&v209[32];
  __int128 v153 = *(_OWORD *)&v209[48];
  __int128 v154 = *(_OWORD *)&v209[64];
  v204[3] = *(_OWORD *)&v209[48];
  v204[4] = *(_OWORD *)&v209[64];
  uint64_t v155 = v208;
  unint64_t v156 = *(_OWORD *)v209;
  __int128 v203 = v208;
  v204[0] = *(_OWORD *)v209;
  __int128 v217 = v148;
  __int128 v218 = v149;
  v219[0] = v150;
  *(__int128 *)((char *)v5 + 138) = *(_OWORD *)(v4 + 138);
  __int128 v213 = v151;
  __int128 v214 = v152;
  uint64_t v215 = v153;
  __int128 v216 = v154;
  __int128 v211 = v155;
  __int128 v212 = v156;
  if (BYTE8(v203) != 1)
  {
    outlined retain of URLComponents((uint64_t)&v203);
    __int128 v12 = URLComponents._URLComponents.computedString.getter();
    uint64_t v158 = v157;
    outlined release of URLComponents((uint64_t)&v203);
    if (!v158) {
      goto LABEL_183;
    }
    goto LABEL_46;
  }

  int64_t v26 = v203;
  if ((void)v203) {
    goto LABEL_41;
  }
LABEL_183:
  unint64_t v37 = v7;
  swift_retain();
  swift_retain();
  if ((_foundation_swift_url_feature_enabled() & 1) != 0) {
    goto LABEL_48;
  }
  uint64_t v40 = objc_msgSend(v37, sel_relativeString);
LABEL_50:
  uint64_t v41 = v40;
  __int128 v12 = (uint64_t)static String._unconditionallyBridgeFromObjectiveC(_:)(v41);
  swift_release();

  swift_release_n();
LABEL_51:
  outlined release of URLComponents((uint64_t)&v203);
  swift_bridgeObjectRelease();
  return v12;
}

__n128 AttributedString.Runs.NSAttributesSlice.endIndex.getter@<Q0>(uint64_t a1@<X8>)
{
  __n128 result = *(__n128 *)(v1 + 168);
  __int128 v3 = *(_OWORD *)(v1 + 184);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t AttributedString.Runs.NSAttributesSlice.index(after:)@<X0>( unint64_t *a1@<X0>, unint64_t *a2@<X8>)
{
  unint64_t v3 = *a1;
  __int128 v5 = (__int128 *)a1[2];
  uint64_t result = a1[3];
  __int128 v6 = *(_OWORD *)(v2 + 176);
  __int128 v188 = *(_OWORD *)(v2 + 160);
  __int128 v189 = v6;
  unint64_t v190 = *(void *)(v2 + 192);
  __int128 v7 = *(_OWORD *)(v2 + 112);
  __int128 v184 = *(_OWORD *)(v2 + 96);
  __int128 v185 = v7;
  __int128 v8 = *(_OWORD *)(v2 + 144);
  __int128 v186 = *(_OWORD *)(v2 + 128);
  __int128 v187 = v8;
  __int128 v9 = *(_OWORD *)(v2 + 48);
  v181[2] = *(_OWORD *)(v2 + 32);
  v181[3] = v9;
  __int128 v10 = *(_OWORD *)(v2 + 80);
  __int128 v182 = *(_OWORD *)(v2 + 64);
  __int128 v183 = v10;
  __int128 v11 = *(_OWORD *)(v2 + 16);
  v181[0] = *(_OWORD *)v2;
  v181[1] = v11;
  if (v3 >> 10 < *((void *)&v186 + 1) >> 10 || v3 >> 10 >= *((void *)&v188 + 1) >> 10) {
    goto LABEL_147;
  }
  uint64_t v140 = *(void *)(v2 + 200);
  uint64_t v12 = *(void *)(v140 + 16);
  if (!v12)
  {
LABEL_148:
    __break(1u);
LABEL_149:
    __break(1u);
    goto LABEL_150;
  }

  unint64_t v13 = *(void *)(*(void *)&v181[0] + 64LL);
  uint64_t v14 = *(void *)(*(void *)&v181[0] + 80LL);
  uint64_t v15 = (uint64_t *)(v3 >> 11);
  if (v13) {
    uint64_t v16 = *(void *)(*(void *)&v181[0] + 80LL);
  }
  else {
    uint64_t v16 = 0LL;
  }
  uint64_t v17 = *(void *)(*(void *)&v181[0] + 72LL);
  uint64_t v141 = *(void *)(*(void *)&v181[0] + 88LL);
  uint64_t v139 = *(void *)&v181[0];
  uint64_t v144 = v12;
  uint64_t v124 = a2;
  unint64_t v125 = *((void *)&v188 + 1);
  unint64_t v126 = *((void *)&v188 + 1) >> 10;
  unint64_t v127 = v3 >> 10;
  __int128 v123 = v189;
  unint64_t v122 = v190;
  __int128 v149 = (uint64_t *)result;
  uint64_t v150 = v17;
  if (v13 && (uint64_t)v15 < v14 && *(_WORD *)(v13 + 16))
  {
    unint64_t v147 = (uint64_t *)v3;
    unint64_t v148 = v5;
    uint64_t v18 = *(unsigned __int8 *)(v13 + 18);
    uint64_t v146 = v15;
    if (v18)
    {
      swift_unknownObjectRetain_n();
      uint64_t result = outlined retain of AttributedString.Runs((uint64_t)v181);
      uint64_t v19 = (char *)v15;
      unint64_t v20 = v13;
      while (1)
      {
        uint64_t v23 = *(unsigned __int16 *)(v20 + 16);
        if (!*(_WORD *)(v20 + 16)) {
          break;
        }
        uint64_t v24 = *(void *)(v20 + 40);
        BOOL v25 = __OFSUB__(v19, v24);
        int64_t v26 = &v19[-v24];
        if (v25) {
          goto LABEL_141;
        }
        if (__OFADD__(v26, 1LL)) {
          goto LABEL_142;
        }
        if ((uint64_t)(v26 + 1) < 1)
        {
          uint64_t v23 = 0LL;
          goto LABEL_15;
        }

        if ((_DWORD)v23 == 1)
        {
          uint64_t v19 = v26;
          break;
        }

        uint64_t v27 = (uint64_t *)(v20 + 64);
        uint64_t v28 = 1LL;
        while (1)
        {
          uint64_t v29 = *v27;
          v27 += 3;
          uint64_t v19 = &v26[-v29];
          if (__OFSUB__(v26, v29)) {
            goto LABEL_138;
          }
          if (__OFADD__(v19, 1LL))
          {
LABEL_139:
            __break(1u);
            goto LABEL_140;
          }

          ++v28;
          int64_t v26 = v19;
          if (v23 == v28) {
            goto LABEL_14;
          }
        }

        uint64_t v23 = v28;
        uint64_t v19 = v26;
LABEL_15:
        char v21 = (4 * *(_BYTE *)(v20 + 18) + 8) & 0x3C;
        uint64_t v18 = ((-15LL << v21) - 1) & v18 | (v23 << v21);
        unint64_t v22 = *(void *)(v20 + 24 + 24 * v23);
        swift_unknownObjectRetain();
        uint64_t result = swift_unknownObjectRelease();
        unint64_t v20 = v22;
        if (!*(_BYTE *)(v22 + 18)) {
          goto LABEL_32;
        }
      }

uint64_t AttributedString.Runs.NSAttributesSlice.makeIterator()@<X0>(_OWORD *a1@<X8>)
{
  __int128 v2 = v1[9];
  __int128 v3 = v1[11];
  *(_OWORD *)&v29[32] = v1[10];
  __int128 v30 = v3;
  __int128 v4 = v1[11];
  __int128 v31 = v1[12];
  __int128 v5 = v1[5];
  __int128 v6 = v1[7];
  __int128 v27 = v1[6];
  __int128 v7 = v27;
  __int128 v28 = v6;
  __int128 v8 = v1[7];
  __int128 v9 = v1[9];
  *(_OWORD *)uint64_t v29 = v1[8];
  __int128 v10 = *(_OWORD *)v29;
  *(_OWORD *)&v29[16] = v9;
  __int128 v11 = v1[1];
  __int128 v12 = v1[3];
  __int128 v23 = v1[2];
  __int128 v13 = v23;
  __int128 v24 = v12;
  __int128 v14 = v1[3];
  __int128 v15 = v1[5];
  __int128 v25 = v1[4];
  __int128 v16 = v25;
  __int128 v26 = v15;
  __int128 v17 = v1[1];
  v22[0] = *v1;
  __int128 v18 = v22[0];
  v22[1] = v17;
  a1[10] = *(_OWORD *)&v29[32];
  a1[11] = v4;
  a1[6] = v7;
  a1[7] = v8;
  a1[8] = v10;
  a1[9] = v2;
  a1[2] = v13;
  a1[3] = v14;
  a1[4] = v16;
  a1[5] = v5;
  __int128 v19 = v1[12];
  *a1 = v18;
  a1[1] = v11;
  __int128 v20 = *(_OWORD *)&v29[8];
  a1[12] = v19;
  a1[13] = v20;
  a1[14] = *(_OWORD *)&v29[24];
  return outlined retain of AttributedString.Runs.NSAttributesSlice((uint64_t)v22);
}

unint64_t *AttributedString.Runs.NSAttributesSlice.index(before:)@<X0>( unint64_t *result@<X0>, unint64_t *a2@<X8>)
{
  unint64_t v4 = *result;
  unint64_t v5 = result[1];
  unint64_t v6 = result[2];
  unint64_t v7 = result[3];
  __int128 v8 = *(_OWORD *)(v2 + 176);
  __int128 v168 = *(_OWORD *)(v2 + 160);
  __int128 v169 = v8;
  uint64_t v170 = *(void *)(v2 + 192);
  __int128 v9 = *(_OWORD *)(v2 + 112);
  v165[6] = *(_OWORD *)(v2 + 96);
  v165[7] = v9;
  __int128 v10 = *(_OWORD *)(v2 + 144);
  __int128 v166 = *(_OWORD *)(v2 + 128);
  __int128 v167 = v10;
  __int128 v11 = *(_OWORD *)(v2 + 48);
  v165[2] = *(_OWORD *)(v2 + 32);
  v165[3] = v11;
  __int128 v12 = *(_OWORD *)(v2 + 80);
  v165[4] = *(_OWORD *)(v2 + 64);
  v165[5] = v12;
  __int128 v13 = *(_OWORD *)(v2 + 16);
  v165[0] = *(_OWORD *)v2;
  v165[1] = v13;
  if (*((void *)&v166 + 1) >> 10 >= v4 >> 10 || *((void *)&v168 + 1) >> 10 < v4 >> 10)
  {
LABEL_129:
    __break(1u);
    goto LABEL_130;
  }

  uint64_t v123 = *(void *)(v2 + 200);
  uint64_t v14 = *(void *)(v123 + 16);
  if (!v14)
  {
LABEL_130:
    __break(1u);
LABEL_131:
    __break(1u);
    goto LABEL_132;
  }

  uint64_t v15 = *(void *)&v165[0];
  unint64_t v16 = *(void *)(*(void *)&v165[0] + 64LL);
  int64_t v17 = *(void *)(*(void *)&v165[0] + 80LL);
  if (v16) {
    uint64_t v18 = *(void *)(*(void *)&v165[0] + 80LL);
  }
  else {
    uint64_t v18 = 0LL;
  }
  if (v4 < 0x800) {
    goto LABEL_131;
  }
  uint64_t v19 = (v4 >> 11) - 1;
  if (v18 < v19) {
    goto LABEL_131;
  }
  __int128 v113 = v167;
  unint64_t v114 = v4 >> 10;
  unint64_t v112 = v168;
  uint64_t v20 = *(void *)(*(void *)&v165[0] + 72LL);
  uint64_t v21 = *(void *)(*(void *)&v165[0] + 88LL);
  uint64_t v129 = v14;
  uint64_t v124 = v21;
  unint64_t v119 = v5;
  unint64_t v120 = v4;
  unint64_t v117 = v7;
  unint64_t v118 = v6;
  unint64_t v115 = *((void *)&v166 + 1);
  unint64_t v116 = *((void *)&v166 + 1) >> 10;
  unint64_t v121 = v4 >> 11;
  uint64_t v135 = v20;
  if (v16 && (uint64_t)(v4 >> 11) <= v17 && *(_WORD *)(v16 + 16))
  {
    BOOL v110 = a2;
    uint64_t v111 = *(void *)&v165[0];
    uint64_t v22 = *(unsigned __int8 *)(v16 + 18);
    if (*(_BYTE *)(v16 + 18))
    {
      swift_unknownObjectRetain_n();
      uint64_t result = (unint64_t *)outlined retain of AttributedString.Runs((uint64_t)v165);
      uint64_t v23 = v19;
      unint64_t v24 = v16;
      while (1)
      {
        uint64_t v27 = *(unsigned __int16 *)(v24 + 16);
        if (!*(_WORD *)(v24 + 16)) {
          break;
        }
        uint64_t v28 = *(void *)(v24 + 40);
        BOOL v29 = __OFSUB__(v23, v28);
        uint64_t v30 = v23 - v28;
        if (v29) {
          goto LABEL_127;
        }
        if (__OFADD__(v30, 1LL)) {
          goto LABEL_128;
        }
        if (v30 + 1 < 1)
        {
          uint64_t v27 = 0LL;
          goto LABEL_16;
        }

        if ((_DWORD)v27 == 1)
        {
          uint64_t v23 = v30;
          break;
        }

        __int128 v31 = (uint64_t *)(v24 + 64);
        uint64_t v32 = 1LL;
        while (1)
        {
          uint64_t v33 = *v31;
          v31 += 3;
          uint64_t v23 = v30 - v33;
          if (__OFSUB__(v30, v33))
          {
            __break(1u);
LABEL_124:
            __break(1u);
LABEL_125:
            __break(1u);
            goto LABEL_126;
          }

          if (__OFADD__(v23, 1LL)) {
            goto LABEL_124;
          }
          if (v23 + 1 < 1) {
            break;
          }
          ++v32;
          uint64_t v30 = v23;
          if (v27 == v32) {
            goto LABEL_15;
          }
        }

        uint64_t v27 = v32;
        uint64_t v23 = v30;
LABEL_16:
        char v25 = (4 * *(_BYTE *)(v24 + 18) + 8) & 0x3C;
        uint64_t v22 = ((-15LL << v25) - 1) & v22 | (v27 << v25);
        unint64_t v26 = *(void *)(v24 + 24 + 24 * v27);
        swift_unknownObjectRetain();
        uint64_t result = (unint64_t *)swift_unknownObjectRelease();
        unint64_t v24 = v26;
        if (!*(_BYTE *)(v26 + 18)) {
          goto LABEL_33;
        }
      }

uint64_t AttributedString.Runs.NSAttributesSlice.subscript.getter( uint64_t result, unint64_t *a2, unint64_t *a3)
{
  __int128 v4 = v3[9];
  __int128 v5 = v3[11];
  __int128 v318 = v3[10];
  __int128 v319 = v5;
  __int128 v6 = v3[11];
  __int128 v320 = v3[12];
  __int128 v7 = v3[5];
  __int128 v8 = v3[7];
  __int128 v314 = v3[6];
  __int128 v315 = v8;
  __int128 v9 = v3[7];
  __int128 v10 = v3[9];
  __int128 v316 = v3[8];
  __int128 v317 = v10;
  __int128 v11 = v3[1];
  __int128 v12 = v3[3];
  __int128 v310 = v3[2];
  __int128 v311 = v12;
  __int128 v13 = v3[3];
  __int128 v14 = v3[5];
  __int128 v312 = v3[4];
  __int128 v313 = v14;
  __int128 v15 = v3[1];
  v309[0] = *v3;
  v309[1] = v15;
  __int128 v333 = v4;
  __int128 v334 = v318;
  __int128 v335 = v6;
  __int128 v329 = v7;
  __int128 v330 = v314;
  __int128 v331 = v9;
  __int128 v332 = v316;
  v327[1] = v11;
  v327[2] = v310;
  _OWORD v327[3] = v13;
  __int128 v328 = v312;
  unint64_t v16 = *a3;
  int64_t v17 = (uint64_t *)a3[1];
  uint64_t v18 = (char *)a3[2];
  uint64_t v19 = (void *)a3[3];
  unint64_t v336 = *((void *)v3 + 24);
  v327[0] = v309[0];
  uint64_t v261 = *((void *)&v320 + 1);
  uint64_t v326 = *((void *)&v320 + 1);
  if (v16 >> 10 < *((void *)&v316 + 1) >> 10) {
    goto LABEL_279;
  }
  unint64_t v257 = *((void *)&v334 + 1) >> 10;
  if (*((void *)&v334 + 1) >> 10 < v16 >> 10) {
    goto LABEL_279;
  }
  uint64_t v20 = *(void *)(v261 + 16);
  if (!v20)
  {
LABEL_280:
    __break(1u);
LABEL_281:
    __break(1u);
    goto LABEL_282;
  }

  uint64_t v21 = *(void *)&v327[0];
  unint64_t v22 = *(void *)(*(void *)&v327[0] + 64LL);
  uint64_t v23 = *(void *)(*(void *)&v327[0] + 80LL);
  if (v22) {
    int64_t v24 = *(void *)(*(void *)&v327[0] + 80LL);
  }
  else {
    int64_t v24 = 0LL;
  }
  uint64_t v270 = (__int128 *)(v16 >> 11);
  uint64_t v25 = *(void *)(*(void *)&v327[0] + 72LL);
  uint64_t v259 = *(void *)(*(void *)&v327[0] + 88LL);
  uint64_t v260 = *(void *)&v327[0];
  unint64_t v248 = *((void *)&v316 + 1) >> 10;
  unint64_t v249 = v16 >> 10;
  uint64_t v265 = v20;
  __int128 v266 = v19;
  __int128 v263 = v17;
  uint64_t v267 = v18;
  unint64_t v268 = v16;
  __int128 v241 = a2;
  __int128 v242 = (void *)result;
  unint64_t v239 = *((void *)&v335 + 1);
  unint64_t v240 = v335;
  unint64_t v238 = v336;
  unint64_t v243 = *((void *)&v334 + 1);
  uint64_t v254 = *((void *)&v316 + 1);
  __int128 v246 = (char *)*((void *)&v333 + 1);
  __int128 v247 = (uint64_t *)v333;
  unint64_t v245 = v334;
  if (v22 && (uint64_t)v270 < v23 && *(_WORD *)(v22 + 16))
  {
    uint64_t v26 = *(unsigned __int8 *)(v22 + 18);
    if (*(_BYTE *)(v22 + 18))
    {
      swift_unknownObjectRetain_n();
      uint64_t result = outlined retain of AttributedString.Runs((uint64_t)v327);
      uint64_t v27 = v270;
      unint64_t v28 = v22;
      while (1)
      {
        uint64_t v31 = *(unsigned __int16 *)(v28 + 16);
        if (!*(_WORD *)(v28 + 16)) {
          break;
        }
        uint64_t v32 = *(void *)(v28 + 40);
        BOOL v33 = __OFSUB__(v27, v32);
        uint64_t v34 = (__int128 *)((char *)v27 - v32);
        if (v33) {
          goto LABEL_271;
        }
        if (__OFADD__(v34, 1LL)) {
          goto LABEL_272;
        }
        if ((uint64_t)v34 + 1 < 1)
        {
          uint64_t v31 = 0LL;
          goto LABEL_15;
        }

        if ((_DWORD)v31 == 1)
        {
          uint64_t v27 = v34;
          break;
        }

        uint64_t v35 = (uint64_t *)(v28 + 64);
        uint64_t v36 = 1LL;
        while (1)
        {
          uint64_t v37 = *v35;
          v35 += 3;
          uint64_t v27 = (__int128 *)((char *)v34 - v37);
          if (__OFSUB__(v34, v37)) {
            goto LABEL_264;
          }
          if (__OFADD__(v27, 1LL))
          {
LABEL_265:
            __break(1u);
LABEL_266:
            __break(1u);
LABEL_267:
            __break(1u);
LABEL_268:
            __break(1u);
            goto LABEL_269;
          }

          ++v36;
          uint64_t v34 = v27;
          if (v31 == v36) {
            goto LABEL_14;
          }
        }

        uint64_t v31 = v36;
        uint64_t v27 = v34;
LABEL_15:
        char v29 = (4 * *(_BYTE *)(v28 + 18) + 8) & 0x3C;
        uint64_t v26 = ((-15LL << v29) - 1) & v26 | (v31 << v29);
        uint64_t v30 = *(void *)(v28 + 24 + 24 * v31);
        swift_unknownObjectRetain();
        uint64_t result = swift_unknownObjectRelease();
        unint64_t v28 = v30;
        if (!*(_BYTE *)(v30 + 18)) {
          goto LABEL_32;
        }
      }

uint64_t protocol witness for BidirectionalCollection.index(before:) in conformance AttributedString.Runs.NSAttributesSlice( _OWORD *a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for BidirectionalCollection.index(before:) in conformance AttributedString.Runs.NSAttributesSlice( a1,  a2,  a3,  (void (*)(_OWORD *, uint64_t, void))AttributedString.Runs._slicedRunBoundary(before:attributeNames:constraints:));
}

unint64_t *protocol witness for BidirectionalCollection.formIndex(before:) in conformance AttributedString.Runs.NSAttributesSlice( unint64_t *result)
{
  __int128 v2 = *(_OWORD *)(v1 + 176);
  __int128 v166 = *(_OWORD *)(v1 + 160);
  __int128 v167 = v2;
  uint64_t v168 = *(void *)(v1 + 192);
  __int128 v3 = *(_OWORD *)(v1 + 112);
  v163[6] = *(_OWORD *)(v1 + 96);
  v163[7] = v3;
  __int128 v4 = *(_OWORD *)(v1 + 144);
  __int128 v164 = *(_OWORD *)(v1 + 128);
  __int128 v165 = v4;
  __int128 v5 = *(_OWORD *)(v1 + 48);
  v163[2] = *(_OWORD *)(v1 + 32);
  v163[3] = v5;
  __int128 v6 = *(_OWORD *)(v1 + 80);
  v163[4] = *(_OWORD *)(v1 + 64);
  v163[5] = v6;
  __int128 v7 = *(_OWORD *)(v1 + 16);
  unint64_t v8 = *result;
  unint64_t v9 = *result >> 10;
  v163[0] = *(_OWORD *)v1;
  v163[1] = v7;
  if (*((void *)&v164 + 1) >> 10 >= v9 || *((void *)&v166 + 1) >> 10 < v9)
  {
LABEL_129:
    __break(1u);
    goto LABEL_130;
  }

  uint64_t v123 = *(void *)(v1 + 200);
  uint64_t v10 = *(void *)(v123 + 16);
  if (!v10)
  {
LABEL_130:
    __break(1u);
LABEL_131:
    __break(1u);
    goto LABEL_132;
  }

  uint64_t v11 = *(void *)&v163[0];
  unint64_t v12 = *(void *)(*(void *)&v163[0] + 64LL);
  int64_t v13 = *(void *)(*(void *)&v163[0] + 80LL);
  if (v12) {
    uint64_t v14 = *(void *)(*(void *)&v163[0] + 80LL);
  }
  else {
    uint64_t v14 = 0LL;
  }
  if (v8 < 0x800) {
    goto LABEL_131;
  }
  uint64_t v15 = (v8 >> 11) - 1;
  if (v14 < v15) {
    goto LABEL_131;
  }
  unint64_t v114 = result[1];
  unint64_t v115 = v8;
  unint64_t v113 = result[2];
  unint64_t v16 = result[3];
  unint64_t v111 = result;
  unint64_t v112 = v16;
  __int128 v110 = v165;
  unint64_t v109 = v166;
  uint64_t v17 = *(void *)(*(void *)&v163[0] + 72LL);
  uint64_t v130 = *(void *)(*(void *)&v163[0] + 88LL);
  uint64_t v127 = v10;
  unint64_t v117 = *((void *)&v164 + 1);
  unint64_t v118 = *((void *)&v164 + 1) >> 10;
  unint64_t v116 = v9;
  unint64_t v119 = v8 >> 11;
  uint64_t v133 = v17;
  if (v12 && (uint64_t)(v8 >> 11) <= v13 && *(_WORD *)(v12 + 16))
  {
    uint64_t v108 = *(void *)&v163[0];
    uint64_t v18 = *(unsigned __int8 *)(v12 + 18);
    if (*(_BYTE *)(v12 + 18))
    {
      swift_unknownObjectRetain_n();
      uint64_t result = (unint64_t *)outlined retain of AttributedString.Runs((uint64_t)v163);
      uint64_t v19 = v15;
      unint64_t v20 = v12;
      while (1)
      {
        uint64_t v23 = *(unsigned __int16 *)(v20 + 16);
        if (!*(_WORD *)(v20 + 16)) {
          break;
        }
        uint64_t v24 = *(void *)(v20 + 40);
        BOOL v25 = __OFSUB__(v19, v24);
        uint64_t v26 = v19 - v24;
        if (v25) {
          goto LABEL_127;
        }
        if (__OFADD__(v26, 1LL)) {
          goto LABEL_128;
        }
        if (v26 + 1 <= 0)
        {
          uint64_t v23 = 0LL;
          goto LABEL_16;
        }

        if ((_DWORD)v23 == 1)
        {
          uint64_t v19 = v26;
          break;
        }

        uint64_t v27 = (uint64_t *)(v20 + 64);
        uint64_t v28 = 1LL;
        while (1)
        {
          uint64_t v29 = *v27;
          v27 += 3;
          uint64_t v19 = v26 - v29;
          if (__OFSUB__(v26, v29))
          {
            __break(1u);
LABEL_124:
            __break(1u);
LABEL_125:
            __break(1u);
            goto LABEL_126;
          }

          if (__OFADD__(v19, 1LL)) {
            goto LABEL_124;
          }
          if (v19 + 1 < 1) {
            break;
          }
          ++v28;
          uint64_t v26 = v19;
          if (v23 == v28) {
            goto LABEL_15;
          }
        }

        uint64_t v23 = v28;
        uint64_t v19 = v26;
LABEL_16:
        char v21 = (4 * *(_BYTE *)(v20 + 18) + 8) & 0x3C;
        uint64_t v18 = ((-15LL << v21) - 1) & v18 | (v23 << v21);
        unint64_t v22 = *(void *)(v20 + 24 + 24 * v23);
        swift_unknownObjectRetain();
        uint64_t result = (unint64_t *)swift_unknownObjectRelease();
        unint64_t v20 = v22;
        if (!*(_BYTE *)(v22 + 18)) {
          goto LABEL_33;
        }
      }

__n128 protocol witness for Collection.startIndex.getter in conformance AttributedString.Runs.NSAttributesSlice@<Q0>( uint64_t a1@<X8>)
{
  __n128 result = *(__n128 *)(v1 + 136);
  __int128 v3 = *(_OWORD *)(v1 + 152);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

__n128 protocol witness for Collection.endIndex.getter in conformance AttributedString.Runs.NSAttributesSlice@<Q0>( uint64_t a1@<X8>)
{
  __n128 result = *(__n128 *)(v1 + 168);
  __int128 v3 = *(_OWORD *)(v1 + 184);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

void (*protocol witness for Collection.subscript.read in conformance AttributedString.Runs.NSAttributesSlice( unint64_t **a1, unint64_t *a2))(void **a1)
{
  __int128 v4 = (unint64_t *)malloc(0xB0uLL);
  *a1 = v4;
  AttributedString.Runs.NSAttributesSlice.subscript.getter((uint64_t)v4, v4 + 2, a2);
  unint64_t v5 = *v4;
  v4[10] = *v4;
  unint64_t v6 = v4[1];
  v4[20] = v5;
  v4[21] = v6;
  v4[11] = v6;
  __int128 v7 = *((_OWORD *)v4 + 2);
  __int128 v8 = *((_OWORD *)v4 + 3);
  *((_OWORD *)v4 + 6) = *((_OWORD *)v4 + 1);
  *((_OWORD *)v4 + 7) = v7;
  __int128 v9 = *((_OWORD *)v4 + 4);
  *((_OWORD *)v4 + 8) = v8;
  *((_OWORD *)v4 + 9) = v9;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return protocol witness for Collection.subscript.read in conformance AttributedString.Runs.NSAttributesSlice;
}

void protocol witness for Collection.subscript.read in conformance AttributedString.Runs.NSAttributesSlice( void **a1)
{
  uint64_t v1 = *a1;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  free(v1);
}

__int128 *protocol witness for Collection.subscript.getter in conformance AttributedString.Runs.NSAttributesSlice@<X0>( __int128 *result@<X0>, _OWORD *a2@<X8>)
{
  __int128 v3 = *result;
  __int128 v4 = result[1];
  __int128 v5 = result[2];
  __int128 v6 = result[3];
  __int128 v7 = v2[11];
  __int128 v22 = v2[10];
  __int128 v23 = v7;
  __int128 v24 = v2[12];
  __int128 v8 = v2[7];
  v19[6] = v2[6];
  v19[7] = v8;
  __int128 v9 = v2[9];
  __int128 v20 = v2[8];
  __int128 v21 = v9;
  __int128 v10 = v2[3];
  _OWORD v19[2] = v2[2];
  v19[3] = v10;
  __int128 v11 = v2[5];
  v19[4] = v2[4];
  v19[5] = v11;
  __int128 v12 = v2[1];
  v19[0] = *v2;
  v19[1] = v12;
  if (*((void *)&v22 + 1) >> 10 < *((void *)&v20 + 1) >> 10)
  {
    __break(1u);
    goto LABEL_6;
  }

  if (*((void *)&v20 + 1) >> 10 > (unint64_t)v3 >> 10)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }

  if (*((void *)&v22 + 1) >> 10 >= (unint64_t)v5 >> 10)
  {
    __int128 v13 = v2[11];
    a2[14] = v2[10];
    a2[15] = v13;
    a2[16] = v2[12];
    __int128 v14 = v2[7];
    a2[10] = v2[6];
    a2[11] = v14;
    __int128 v15 = v2[9];
    a2[12] = v2[8];
    a2[13] = v15;
    __int128 v16 = v2[3];
    a2[6] = v2[2];
    a2[7] = v16;
    __int128 v17 = v2[5];
    a2[8] = v2[4];
    a2[9] = v17;
    __int128 v18 = v2[1];
    a2[4] = *v2;
    a2[5] = v18;
    *a2 = v3;
    a2[1] = v4;
    a2[2] = v5;
    a2[3] = v6;
    return (__int128 *)outlined retain of AttributedString.Runs.NSAttributesSlice((uint64_t)v19);
  }

uint64_t protocol witness for Collection.indices.getter in conformance AttributedString.Runs.NSAttributesSlice@<X0>( _OWORD *a1@<X8>)
{
  __int128 v2 = v1[9];
  __int128 v3 = v1[11];
  *(_OWORD *)&v30[32] = v1[10];
  *(_OWORD *)&v30[48] = v3;
  __int128 v4 = v1[11];
  *(_OWORD *)&v30[64] = v1[12];
  __int128 v5 = v1[5];
  __int128 v6 = v1[7];
  __int128 v28 = v1[6];
  __int128 v7 = v28;
  __int128 v29 = v6;
  __int128 v8 = v1[7];
  __int128 v9 = v1[9];
  *(_OWORD *)unint64_t v30 = v1[8];
  __int128 v10 = *(_OWORD *)v30;
  *(_OWORD *)&v30[16] = v9;
  __int128 v11 = v1[1];
  __int128 v12 = v1[3];
  __int128 v24 = v1[2];
  __int128 v13 = v24;
  __int128 v25 = v12;
  __int128 v14 = v1[3];
  __int128 v15 = v1[5];
  __int128 v26 = v1[4];
  __int128 v16 = v26;
  __int128 v27 = v15;
  __int128 v17 = v1[1];
  v23[0] = *v1;
  __int128 v18 = v23[0];
  v23[1] = v17;
  a1[10] = *(_OWORD *)&v30[32];
  a1[11] = v4;
  a1[6] = v7;
  a1[7] = v8;
  a1[8] = v10;
  a1[9] = v2;
  a1[2] = v13;
  a1[3] = v14;
  a1[4] = v16;
  a1[5] = v5;
  __int128 v19 = v1[12];
  *a1 = v18;
  a1[1] = v11;
  __int128 v20 = *(_OWORD *)&v30[8];
  a1[12] = v19;
  a1[13] = v20;
  __int128 v21 = *(_OWORD *)&v30[40];
  a1[14] = *(_OWORD *)&v30[24];
  a1[15] = v21;
  a1[16] = *(_OWORD *)&v30[56];
  return outlined retain of AttributedString.Runs.NSAttributesSlice((uint64_t)v23);
}

BOOL protocol witness for Collection.isEmpty.getter in conformance AttributedString.Runs.NSAttributesSlice()
{
  return (*(void *)(v0 + 168) ^ *(void *)(v0 + 136)) < 0x400uLL;
}

unint64_t protocol witness for BidirectionalCollection.index(_:offsetBy:) in conformance AttributedString.Runs.NSAttributesSlice@<X0>( unint64_t *a1@<X0>, uint64_t a2@<X1>, unint64_t *a3@<X8>)
{
  return specialized BidirectionalCollection.index(_:offsetBy:)(*a1, a1[1], a1[2], a1[3], a2, a3);
}

unint64_t protocol witness for BidirectionalCollection.index(_:offsetBy:limitedBy:) in conformance AttributedString.Runs.NSAttributesSlice@<X0>( unint64_t *a1@<X0>, uint64_t a2@<X1>, unint64_t *a3@<X2>, unint64_t *a4@<X8>)
{
  return specialized BidirectionalCollection.index(_:offsetBy:limitedBy:)(*a1, a1[1], a1[2], a1[3], a2, *a3, a4);
}

unint64_t protocol witness for BidirectionalCollection.distance(from:to:) in conformance AttributedString.Runs.NSAttributesSlice( uint64_t a1, unint64_t *a2)
{
  return specialized BidirectionalCollection._distance(from:to:)( *(void *)a1,  *(void **)(a1 + 8),  *(void *)(a1 + 16),  *(void *)(a1 + 24),  *a2);
}

uint64_t protocol witness for Collection.index(after:) in conformance AttributedString.Runs.NSAttributesSlice( _OWORD *a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for BidirectionalCollection.index(before:) in conformance AttributedString.Runs.NSAttributesSlice( a1,  a2,  a3,  (void (*)(_OWORD *, uint64_t, void))AttributedString.Runs._slicedRunBoundary(after:attributeNames:constraints:));
}

uint64_t protocol witness for BidirectionalCollection.index(before:) in conformance AttributedString.Runs.NSAttributesSlice( _OWORD *a1, uint64_t a2, uint64_t a3, void (*a4)(_OWORD *, uint64_t, void))
{
  __int128 v6 = *(_OWORD *)(v4 + 144);
  __int128 v7 = *(_OWORD *)(v4 + 176);
  __int128 v32 = *(_OWORD *)(v4 + 160);
  __int128 v33 = v7;
  __int128 v8 = *(_OWORD *)(v4 + 80);
  __int128 v9 = *(_OWORD *)(v4 + 112);
  __int128 v28 = *(_OWORD *)(v4 + 96);
  __int128 v29 = v9;
  __int128 v10 = *(_OWORD *)(v4 + 112);
  __int128 v11 = *(_OWORD *)(v4 + 144);
  __int128 v30 = *(_OWORD *)(v4 + 128);
  __int128 v31 = v11;
  __int128 v12 = *(_OWORD *)(v4 + 16);
  __int128 v13 = *(_OWORD *)(v4 + 48);
  __int128 v24 = *(_OWORD *)(v4 + 32);
  __int128 v25 = v13;
  __int128 v14 = *(_OWORD *)(v4 + 48);
  __int128 v15 = *(_OWORD *)(v4 + 80);
  __int128 v26 = *(_OWORD *)(v4 + 64);
  __int128 v27 = v15;
  __int128 v16 = *(_OWORD *)(v4 + 16);
  v23[0] = *(_OWORD *)v4;
  v23[1] = v16;
  __int128 v17 = *(_OWORD *)(v4 + 176);
  _OWORD v21[12] = v32;
  v21[13] = v17;
  v21[8] = v28;
  v21[9] = v10;
  v21[10] = v30;
  v21[11] = v6;
  v21[4] = v24;
  v21[5] = v14;
  v21[6] = v26;
  v21[7] = v8;
  uint64_t v18 = *(void *)(v4 + 200);
  uint64_t v34 = *(void *)(v4 + 192);
  uint64_t v22 = *(void *)(v4 + 192);
  v21[2] = v23[0];
  v21[3] = v12;
  __int128 v19 = a1[1];
  v21[0] = *a1;
  v21[1] = v19;
  outlined retain of AttributedString.Runs((uint64_t)v23);
  a4(v21, v18, MEMORY[0x18961AFE8]);
  return outlined release of AttributedString.Runs((uint64_t)v23);
}

unint64_t *protocol witness for Collection.formIndex(after:) in conformance AttributedString.Runs.NSAttributesSlice( unint64_t *result)
{
  __int128 v2 = *(_OWORD *)(v1 + 176);
  __int128 v191 = *(_OWORD *)(v1 + 160);
  __int128 v192 = v2;
  unint64_t v193 = *(void *)(v1 + 192);
  __int128 v3 = *(_OWORD *)(v1 + 112);
  __int128 v187 = *(_OWORD *)(v1 + 96);
  __int128 v188 = v3;
  __int128 v4 = *(_OWORD *)(v1 + 144);
  __int128 v189 = *(_OWORD *)(v1 + 128);
  __int128 v190 = v4;
  __int128 v5 = *(_OWORD *)(v1 + 48);
  v184[2] = *(_OWORD *)(v1 + 32);
  v184[3] = v5;
  __int128 v6 = *(_OWORD *)(v1 + 80);
  __int128 v185 = *(_OWORD *)(v1 + 64);
  __int128 v186 = v6;
  __int128 v7 = *(_OWORD *)(v1 + 16);
  unint64_t v8 = *result;
  unint64_t v9 = *result >> 10;
  v184[0] = *(_OWORD *)v1;
  v184[1] = v7;
  if (v9 < *((void *)&v189 + 1) >> 10 || v9 >= *((void *)&v191 + 1) >> 10) {
    goto LABEL_147;
  }
  uint64_t v10 = *(void *)(v1 + 200);
  uint64_t v11 = *(void *)(v10 + 16);
  if (!v11)
  {
LABEL_148:
    __break(1u);
LABEL_149:
    __break(1u);
    goto LABEL_150;
  }

  uint64_t v12 = *(void *)&v184[0];
  unint64_t v13 = *(void *)(*(void *)&v184[0] + 64LL);
  uint64_t v14 = *(void *)(*(void *)&v184[0] + 80LL);
  int64_t v15 = v8 >> 11;
  if (v13) {
    uint64_t v16 = *(void *)(*(void *)&v184[0] + 80LL);
  }
  else {
    uint64_t v16 = 0LL;
  }
  if (v16 < v15) {
    goto LABEL_149;
  }
  uint64_t v18 = (void *)result[1];
  __int128 v17 = (__int128 *)result[2];
  __int128 v19 = (void *)result[3];
  uint64_t v20 = *(void *)(*(void *)&v184[0] + 72LL);
  uint64_t v21 = *(void *)(*(void *)&v184[0] + 88LL);
  uint64_t v143 = *(void *)&v184[0];
  uint64_t v144 = v21;
  uint64_t v147 = v11;
  uint64_t v127 = result;
  unint64_t v128 = *((void *)&v191 + 1);
  unint64_t v129 = *((void *)&v191 + 1) >> 10;
  unint64_t v130 = v9;
  __int128 v126 = v192;
  unint64_t v125 = v193;
  uint64_t v138 = v10;
  __int128 v150 = v19;
  uint64_t v151 = v17;
  uint64_t v152 = (uint64_t *)(v8 >> 11);
  uint64_t v153 = v20;
  if (v13 && v15 < v14 && *(_WORD *)(v13 + 16))
  {
    __int128 v149 = v18;
    uint64_t v22 = *(unsigned __int8 *)(v13 + 18);
    if (*(_BYTE *)(v13 + 18))
    {
      swift_unknownObjectRetain_n();
      __n128 result = (unint64_t *)outlined retain of AttributedString.Runs((uint64_t)v184);
      unint64_t v23 = v13;
      while (1)
      {
        uint64_t v26 = *(unsigned __int16 *)(v23 + 16);
        if (!*(_WORD *)(v23 + 16)) {
          break;
        }
        uint64_t v27 = *(void *)(v23 + 40);
        BOOL v28 = __OFSUB__(v15, v27);
        uint64_t v29 = v15 - v27;
        if (v28) {
          goto LABEL_141;
        }
        if (__OFADD__(v29, 1LL)) {
          goto LABEL_142;
        }
        if (v29 + 1 <= 0)
        {
          uint64_t v26 = 0LL;
          goto LABEL_15;
        }

        if ((_DWORD)v26 == 1)
        {
          int64_t v15 = v29;
          break;
        }

        __int128 v30 = (uint64_t *)(v23 + 64);
        uint64_t v31 = 1LL;
        while (1)
        {
          uint64_t v32 = *v30;
          v30 += 3;
          int64_t v15 = v29 - v32;
          if (__OFSUB__(v29, v32)) {
            goto LABEL_138;
          }
          if (__OFADD__(v15, 1LL))
          {
LABEL_139:
            __break(1u);
            goto LABEL_140;
          }

          if (v15 + 1 < 1) {
            break;
          }
          ++v31;
          uint64_t v29 = v15;
          if (v26 == v31) {
            goto LABEL_14;
          }
        }

        uint64_t v26 = v31;
        int64_t v15 = v29;
LABEL_15:
        char v24 = (4 * *(_BYTE *)(v23 + 18) + 8) & 0x3C;
        uint64_t v22 = ((-15LL << v24) - 1) & v22 | (v26 << v24);
        unint64_t v25 = *(void *)(v23 + 24 + 24 * v26);
        swift_unknownObjectRetain();
        __n128 result = (unint64_t *)swift_unknownObjectRelease();
        unint64_t v23 = v25;
        if (!*(_BYTE *)(v25 + 18)) {
          goto LABEL_32;
        }
      }

__n128 protocol witness for Sequence.makeIterator() in conformance AttributedString.Runs.NSAttributesSlice@<Q0>( uint64_t a1@<X8>)
{
  __int128 v2 = *(_OWORD *)(v1 + 112);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(v1 + 96);
  *(_OWORD *)(a1 + 112) = v2;
  __int128 v3 = *(_OWORD *)(v1 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(v1 + 32);
  *(_OWORD *)(a1 + 48) = v3;
  __int128 v4 = *(_OWORD *)(v1 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(v1 + 64);
  *(_OWORD *)(a1 + 80) = v4;
  __int128 v5 = *(_OWORD *)(v1 + 16);
  *(_OWORD *)a1 = *(_OWORD *)v1;
  *(_OWORD *)(a1 + 16) = v5;
  uint64_t v6 = *(void *)(v1 + 136);
  uint64_t v7 = *(void *)(v1 + 144);
  uint64_t v8 = *(void *)(v1 + 152);
  uint64_t v9 = *(void *)(v1 + 192);
  uint64_t v10 = *(void *)(v1 + 200);
  *(void *)(a1 + 128) = *(void *)(v1 + 128);
  *(void *)(a1 + 136) = v6;
  *(void *)(a1 + 144) = v7;
  *(void *)(a1 + 152) = v8;
  __n128 result = *(__n128 *)(v1 + 160);
  __int128 v12 = *(_OWORD *)(v1 + 176);
  *(__n128 *)(a1 + 160) = result;
  *(_OWORD *)(a1 + 176) = v12;
  *(void *)(a1 + 192) = v9;
  *(void *)(a1 + 200) = v10;
  *(void *)(a1 + 208) = v6;
  *(void *)(a1 + 216) = v7;
  *(void *)(a1 + 224) = v8;
  *(void *)(a1 + 232) = result.n128_u64[0];
  return result;
}

unint64_t protocol witness for Collection.count.getter in conformance AttributedString.Runs.NSAttributesSlice()
{
  return specialized BidirectionalCollection._distance(from:to:)( *(void *)(v0 + 136),  *(void **)(v0 + 144),  *(void *)(v0 + 152),  *(void *)(v0 + 160),  *(void *)(v0 + 168));
}

uint64_t protocol witness for Sequence._copyToContiguousArray() in conformance AttributedString.Runs.NSAttributesSlice()
{
  __int128 v1 = v0[11];
  v9[10] = v0[10];
  v9[11] = v1;
  v9[12] = v0[12];
  __int128 v2 = v0[7];
  v9[6] = v0[6];
  v9[7] = v2;
  __int128 v3 = v0[9];
  v9[8] = v0[8];
  v9[9] = v3;
  __int128 v4 = v0[3];
  v9[2] = v0[2];
  v9[3] = v4;
  __int128 v5 = v0[5];
  v9[4] = v0[4];
  v9[5] = v5;
  __int128 v6 = v0[1];
  v9[0] = *v0;
  v9[1] = v6;
  uint64_t v7 = specialized _copyCollectionToContiguousArray<A>(_:)((uint64_t)v9);
  outlined release of AttributedString.Runs.NSAttributesSlice.Iterator((uint64_t)v9);
  return v7;
}

uint64_t protocol witness for Sequence._copyContents(initializing:) in conformance AttributedString.Runs.NSAttributesSlice( uint64_t a1, uint64_t a2, uint64_t a3)
{
  return specialized Sequence._copyContents(initializing:)(a1, a2, a3);
}

uint64_t protocol witness for Sequence.withContiguousStorageIfAvailable<A>(_:) in conformance AttributedString.Runs.NSAttributesSlice@<X0>( uint64_t a1@<X2>, uint64_t a2@<X8>)
{
  return _sSTsE32withContiguousStorageIfAvailableyqd__Sgqd__SRy7ElementQzGKXEKlFSRyxGq_s5Error_pRi_zRi0_zRi__Ri0__r0_lySS5IndexVqd__Isgyrzo_10Foundation16AttributedStringV01_h13ConverterFromK0VABsAG_pANRszr__lIetMggrzo_Tp5( a1,  a2);
}

__n128 AttributedString.Runs.subscript.getter@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  __int128 v4 = v2[11];
  __int128 v38 = v2[10];
  __int128 v39 = v4;
  uint64_t v40 = *((void *)v2 + 24);
  __int128 v5 = v2[7];
  __int128 v34 = v2[6];
  __int128 v35 = v5;
  __int128 v6 = v2[9];
  __int128 v36 = v2[8];
  __int128 v37 = v6;
  __int128 v7 = v2[3];
  __int128 v30 = v2[2];
  __int128 v31 = v7;
  __int128 v8 = v2[5];
  __int128 v32 = v2[4];
  __int128 v33 = v8;
  __n128 v9 = (__n128)v2[1];
  __int128 v28 = *v2;
  __n128 v29 = v9;
  int64_t v10 = *(void *)(a1 + 16);
  if (v10)
  {
    outlined retain of AttributedString.Runs((uint64_t)&v28);
    uint64_t v27 = MEMORY[0x18961AFE8];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v10, 0);
    uint64_t v12 = v27;
    unint64_t v13 = (void **)(a1 + 32);
    do
    {
      id v14 = static String._unconditionallyBridgeFromObjectiveC(_:)(*v13);
      uint64_t v16 = v15;
      unint64_t v18 = *(void *)(v27 + 16);
      unint64_t v17 = *(void *)(v27 + 24);
      if (v18 >= v17 >> 1) {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v17 > 1, v18 + 1, 1);
      }
      *(void *)(v27 + 16) = v18 + 1;
      uint64_t v19 = v27 + 16 * v18;
      *(void *)(v19 + 32) = v14;
      *(void *)(v19 + 40) = v16;
      ++v13;
      --v10;
    }

    while (v10);
  }

  else
  {
    outlined retain of AttributedString.Runs((uint64_t)&v28);
    uint64_t v12 = MEMORY[0x18961AFE8];
  }

  __int128 v20 = v39;
  *(_OWORD *)(a2 + 160) = v38;
  *(_OWORD *)(a2 + 176) = v20;
  uint64_t v21 = v40;
  __int128 v22 = v35;
  *(_OWORD *)(a2 + 96) = v34;
  *(_OWORD *)(a2 + 112) = v22;
  __int128 v23 = v37;
  *(_OWORD *)(a2 + 128) = v36;
  *(_OWORD *)(a2 + 144) = v23;
  __int128 v24 = v31;
  *(_OWORD *)(a2 + 32) = v30;
  *(_OWORD *)(a2 + 48) = v24;
  __int128 v25 = v33;
  *(_OWORD *)(a2 + 64) = v32;
  *(_OWORD *)(a2 + 80) = v25;
  __n128 result = v29;
  *(_OWORD *)a2 = v28;
  *(__n128 *)(a2 + 16) = result;
  *(void *)(a2 + 192) = v21;
  *(void *)(a2 + 200) = v12;
  return result;
}

BOOL specialized Collection<>._containsScalarConstraint.getter(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return 0LL;
  }
  uint64_t v2 = v1 - 1;
  __int128 v3 = (uint64_t *)(a1 + 40);
  do
  {
    uint64_t v4 = *v3;
    v3 += 2;
    BOOL result = v4 != 0;
    if (v4) {
      BOOL v6 = 1;
    }
    else {
      BOOL v6 = v2 == 0;
    }
    --v2;
  }

  while (!v6);
  return result;
}

uint64_t specialized Rope.startIndex.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return a4;
}

uint64_t specialized Rope.formIndex(before:)(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (*(void *)result != a5) {
    goto LABEL_10;
  }
  uint64_t v6 = result;
  unint64_t v7 = *(void *)(result + 8);
  if (a2)
  {
    goto LABEL_9;
  }

  if (!v7)
  {
LABEL_9:
    __break(1u);
LABEL_10:
    __break(1u);
LABEL_11:
    __break(1u);
    return result;
  }

uint64_t specialized static Array._allocateUninitialized(_:)(uint64_t a1)
{
  if (a1 < 0)
  {
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }

  else if (a1)
  {
    uint64_t result = static Array._allocateBufferUninitialized(minimumCapacity:)();
    *(void *)(result + 16) = a1;
  }

  else
  {
    return MEMORY[0x18961AFE8];
  }

  return result;
}

unint64_t _StringGuts.scalarAlignSlow(_:)(unint64_t result, uint64_t a2, unint64_t a3)
{
  if ((result & 0xC000) != 0 || result < 0x10000)
  {
    result &= 0xFFFFFFFFFFFF0000LL;
  }

  else
  {
    unint64_t v5 = result >> 16;
    if ((a3 & 0x1000000000000000LL) == 0)
    {
      v13[2] = v3;
      v13[3] = v4;
      if ((a3 & 0x2000000000000000LL) != 0)
      {
        v13[0] = a2;
        v13[1] = a3 & 0xFFFFFFFFFFFFFFLL;
        if (v5 != (HIBYTE(a3) & 0xF) && (*((_BYTE *)v13 + v5) & 0xC0) == 0x80)
        {
          do
          {
            unint64_t v7 = v5 - 1;
            int v11 = *((_BYTE *)&v12 + v5-- + 7) & 0xC0;
          }

          while (v11 == 128);
          return v7 << 16;
        }

        goto LABEL_14;
      }

      if ((a2 & 0x1000000000000000LL) != 0)
      {
        uint64_t v6 = (a3 & 0xFFFFFFFFFFFFFFFLL) + 32;
        if (v5 == (a2 & 0xFFFFFFFFFFFFLL)) {
          goto LABEL_14;
        }
      }

      else
      {
        unint64_t v12 = result >> 16;
        uint64_t v6 = _StringObject.sharedUTF8.getter();
        unint64_t v5 = v12;
        if (v12 == v10) {
          goto LABEL_14;
        }
      }

      if ((*(_BYTE *)(v6 + v5) & 0xC0) == 0x80)
      {
        do
        {
          unint64_t v7 = v5 - 1;
          int v8 = *(_BYTE *)(v6 - 1 + v5--) & 0xC0;
        }

        while (v8 == 128);
        return v7 << 16;
      }

uint64_t specialized Rope._Node.formPredecessor(of:)(uint64_t a1, uint64_t a2)
{
  int v4 = *(unsigned __int8 *)(a2 + 18);
  unint64_t v5 = *(void *)(a1 + 8);
  char v6 = (4 * v4 + 8) & 0x3C;
  uint64_t v7 = (v5 >> v6) & 0xF;
  uint64_t v10 = v7;
  if (v4)
  {
    swift_unknownObjectRetain();
    char v8 = specialized closure #1 in Rope._Node.formPredecessor(of:)(a2 + 16, a2 + 24, &v10, a1, v4);
    swift_unknownObjectRelease();
  }

  else if (v7)
  {
    *(void *)(a1 + 8) = ((v7 - 1) << v6) | ((-15LL << v6) - 1) & v5;
    *(void *)(a1 + 16) = a2;
    char v8 = 1;
  }

  else
  {
    char v8 = 0;
  }

  return v8 & 1;
}

uint64_t specialized closure #1 in Rope._Node.formPredecessor(of:)( uint64_t result, uint64_t a2, uint64_t *a3, uint64_t a4, char a5)
{
  uint64_t v9 = *a3;
  if (*a3 < *(unsigned __int16 *)result)
  {
    uint64_t v10 = (uint64_t *)(a2 + 24 * v9);
    uint64_t v11 = *v10;
    uint64_t v12 = v10[1];
    uint64_t v13 = v10[2];
    swift_unknownObjectRetain();
    LOBYTE(v12) = specialized Rope._Node.formPredecessor(of:)(a4, v11, v12, v13);
    uint64_t result = swift_unknownObjectRelease();
    if ((v12 & 1) != 0) {
      return 1LL;
    }
    uint64_t v9 = *a3;
  }

  uint64_t v14 = v9 - 1;
  if (v9 < 1) {
    return 0LL;
  }
  *a3 = v14;
  uint64_t v15 = *(void *)(a4 + 8) & ((-15LL << ((4 * a5 + 8) & 0x3C)) - 1) | (v14 << ((4 * a5 + 8) & 0x3C));
  *(void *)(a4 + 8) = v15;
  uint64_t v16 = *(void *)(a2 + 24 * *a3);
  if (*(_WORD *)(v16 + 16))
  {
    uint64_t v17 = *(unsigned __int16 *)(v16 + 16) - 1LL;
    int v18 = *(unsigned __int8 *)(v16 + 18);
    *(void *)(a4 + 8) = ((-15LL << ((4 * v18 + 8) & 0x3C)) - 1) & v15 | (v17 << ((4 * v18 + 8) & 0x3C));
    if (v18)
    {
      swift_unknownObjectRetain();
      uint64_t v19 = specialized closure #1 in Rope._Node.descendToLastItem(under:)(v16 + 24, v17, (uint64_t *)(a4 + 8));
      swift_unknownObjectRelease();
      uint64_t v16 = v19;
    }

    *(void *)(a4 + 16) = v16;
    return 1LL;
  }

  __break(1u);
  return result;
}

uint64_t specialized Rope._Node.formSuccessor(of:)(uint64_t a1, uint64_t a2)
{
  int v4 = *(unsigned __int8 *)(a2 + 18);
  unint64_t v5 = *(void *)(a1 + 8);
  char v6 = (4 * v4 + 8) & 0x3C;
  unint64_t v10 = (v5 >> v6) & 0xF;
  if (v4)
  {
    swift_unknownObjectRetain();
    char v7 = specialized closure #1 in Rope._Node.formSuccessor(of:)(a2 + 24, (uint64_t *)&v10, a1, a2, v4);
    swift_unknownObjectRelease();
  }

  else
  {
    unint64_t v8 = ((v5 >> v6) & 0xF) + 1;
    if (v8 >= *(unsigned __int16 *)(a2 + 16))
    {
      char v7 = 0;
    }

    else
    {
      *(void *)(a1 + 8) = (v8 << v6) | ((-15LL << v6) - 1) & v5;
      *(void *)(a1 + 16) = a2;
      char v7 = 1;
    }
  }

  return v7 & 1;
}

void *specialized _NativeDictionary.filter(_:)(uint64_t isStackAllocationSafe, uint64_t a2)
{
  uint64_t v99 = a2;
  uint64_t v2 = isStackAllocationSafe;
  uint64_t v111 = *MEMORY[0x1895F89C0];
  char v3 = *(_BYTE *)(isStackAllocationSafe + 32);
  int64_t v93 = (unint64_t)((1LL << v3) + 63) >> 6;
  size_t v4 = 8 * v93;
  int v100 = (void *)isStackAllocationSafe;
  if ((v3 & 0x3Fu) > 0xD)
  {
    isStackAllocationSafe = swift_stdlib_isStackAllocationSafe();
    if ((isStackAllocationSafe & 1) == 0)
    {
      uint64_t v94 = (unint64_t *)swift_slowAlloc();
      bzero(v94, v4);
      uint64_t v97 = 0LL;
      int64_t v26 = 0LL;
      uint64_t v27 = *(void *)(v2 + 64);
      uint64_t v95 = v2 + 64;
      uint64_t v28 = 1LL << *(_BYTE *)(v2 + 32);
      if (v28 < 64) {
        uint64_t v29 = ~(-1LL << v28);
      }
      else {
        uint64_t v29 = -1LL;
      }
      unint64_t v30 = v29 & v27;
      int64_t v96 = (unint64_t)(v28 + 63) >> 6;
      uint64_t v98 = &v102;
      while (1)
      {
        if (v30)
        {
          unint64_t v31 = __clz(__rbit64(v30));
          v30 &= v30 - 1;
          unint64_t v32 = v31 | (v26 << 6);
          uint64_t v12 = v100;
        }

        else
        {
          int64_t v33 = v26 + 1;
          if (__OFADD__(v26, 1LL)) {
            goto LABEL_159;
          }
          uint64_t v12 = v100;
          if (v33 >= v96) {
            goto LABEL_86;
          }
          unint64_t v34 = *(void *)(v95 + 8 * v33);
          ++v26;
          if (!v34)
          {
            int64_t v26 = v33 + 1;
            if (v33 + 1 >= v96) {
              goto LABEL_86;
            }
            unint64_t v34 = *(void *)(v95 + 8 * v26);
            if (!v34)
            {
              int64_t v26 = v33 + 2;
              if (v33 + 2 >= v96) {
                goto LABEL_86;
              }
              unint64_t v34 = *(void *)(v95 + 8 * v26);
              if (!v34)
              {
                int64_t v35 = v33 + 3;
                if (v35 >= v96) {
                  goto LABEL_86;
                }
                unint64_t v34 = *(void *)(v95 + 8 * v35);
                if (!v34)
                {
                  while (1)
                  {
                    int64_t v26 = v35 + 1;
                    if (__OFADD__(v35, 1LL)) {
                      goto LABEL_162;
                    }
                    if (v26 >= v96) {
                      break;
                    }
                    unint64_t v34 = *(void *)(v95 + 8 * v26);
                    ++v35;
                    if (v34) {
                      goto LABEL_66;
                    }
                  }

{
  void *v2;
  char v3;
  size_t v4;
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  BOOL v10;
  unint64_t v11;
  int64_t v12;
  unint64_t v13;
  int64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  char v25;
  int64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  int64_t v32;
  unint64_t v33;
  int64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char v43;
  char v44;
  void *v45;
  int64_t v46;
  unint64_t v47;
  uint64_t v48;
  void *v49;
  unint64_t v50;
  void *v51;
  uint64_t v52;
  int64_t v53;
  unint64_t v54;
  int64_t v55;
  unint64_t v56;
  int64_t v57;
  uint64_t v58;
  uint64_t *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  int v68;
  Swift::Int v69;
  uint64_t v70;
  unint64_t v71;
  unint64_t v72;
  char v73;
  unint64_t v74;
  BOOL v75;
  uint64_t v76;
  void *v77;
  int64_t v78;
  unint64_t v79;
  uint64_t v80;
  void *v81;
  unint64_t v82;
  void *v83;
  uint64_t v84;
  uint64_t v85;
  unint64_t v86;
  int64_t v87;
  unint64_t v88;
  int64_t v89;
  uint64_t v90;
  uint64_t *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  int v100;
  Swift::Int v101;
  uint64_t v102;
  unint64_t v103;
  unint64_t v104;
  char v105;
  unint64_t v106;
  BOOL v107;
  uint64_t v108;
  void v110[3];
  int64_t v111;
  void *v112;
  unint64_t *v113;
  uint64_t v114;
  uint64_t v115;
  int64_t v116;
  unint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  int64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  unint64_t v118 = a2;
  uint64_t v2 = (void *)isStackAllocationSafe;
  uint64_t v124 = *MEMORY[0x1895F89C0];
  char v3 = *(_BYTE *)(isStackAllocationSafe + 32);
  uint64_t v111 = (unint64_t)((1LL << v3) + 63) >> 6;
  size_t v4 = 8 * v111;
  unint64_t v119 = isStackAllocationSafe;
  if ((v3 & 0x3Fu) > 0xD)
  {
    isStackAllocationSafe = swift_stdlib_isStackAllocationSafe();
    if ((isStackAllocationSafe & 1) == 0)
    {
      unint64_t v113 = (unint64_t *)swift_slowAlloc();
      bzero(v113, v4);
      int64_t v26 = 0LL;
      uint64_t v27 = v2[8];
      unint64_t v114 = 0LL;
      BOOL v115 = (uint64_t)(v2 + 8);
      uint64_t v28 = 1LL << *((_BYTE *)v2 + 32);
      if (v28 < 64) {
        uint64_t v29 = ~(-1LL << v28);
      }
      else {
        uint64_t v29 = -1LL;
      }
      unint64_t v30 = v29 & v27;
      unint64_t v116 = (unint64_t)(v28 + 63) >> 6;
      while (1)
      {
        if (v30)
        {
          uint64_t v120 = (v30 - 1) & v30;
          uint64_t v121 = v26;
          unint64_t v31 = __clz(__rbit64(v30)) | (v26 << 6);
        }

        else
        {
          unint64_t v32 = v26 + 1;
          if (__OFADD__(v26, 1LL)) {
            goto LABEL_134;
          }
          if (v32 >= v116) {
            goto LABEL_60;
          }
          int64_t v33 = *(void *)(v115 + 8 * v32);
          unint64_t v34 = v26 + 1;
          if (!v33)
          {
            unint64_t v34 = v26 + 2;
            if (v26 + 2 >= v116) {
              goto LABEL_60;
            }
            int64_t v33 = *(void *)(v115 + 8 * v34);
            if (!v33)
            {
              unint64_t v34 = v26 + 3;
              if (v26 + 3 >= v116) {
                goto LABEL_60;
              }
              int64_t v33 = *(void *)(v115 + 8 * v34);
              if (!v33)
              {
                unint64_t v34 = v26 + 4;
                if (v26 + 4 >= v116) {
                  goto LABEL_60;
                }
                int64_t v33 = *(void *)(v115 + 8 * v34);
                if (!v33)
                {
                  int64_t v35 = v26 + 5;
                  if (v26 + 5 >= v116) {
                    goto LABEL_60;
                  }
                  int64_t v33 = *(void *)(v115 + 8 * v35);
                  if (!v33)
                  {
                    while (1)
                    {
                      unint64_t v34 = v35 + 1;
                      if (__OFADD__(v35, 1LL)) {
                        goto LABEL_140;
                      }
                      if (v34 >= v116) {
                        break;
                      }
                      int64_t v33 = *(void *)(v115 + 8 * v34);
                      ++v35;
                      if (v33) {
                        goto LABEL_56;
                      }
                    }

unint64_t _StringGuts.validateScalarIndex(_:)( unint64_t result, unint64_t a2, unint64_t a3)
{
  uint64_t v5 = (a2 >> 59) & 1;
  if ((a3 & 0x1000000000000000LL) == 0) {
    LOBYTE(v5) = 1;
  }
  if ((result & 1) == 0 || (result & 0xC) == 4LL << v5) {
    goto LABEL_9;
  }
  unint64_t v6 = HIBYTE(a3) & 0xF;
  if ((a3 & 0x2000000000000000LL) == 0) {
    unint64_t v6 = a2 & 0xFFFFFFFFFFFFLL;
  }
  if (v6 <= result >> 16)
  {
    __break(1u);
LABEL_9:
    uint64_t result = _StringGuts.validateSubscalarIndex(_:)(result, a2, a3);
    if ((result & 1) == 0) {
      return result & 0xC | _StringGuts.scalarAlignSlow(_:)(result, a2, a3) & 0xFFFFFFFFFFFFFFF3LL | 1;
    }
  }

  return result;
}

unint64_t _StringGuts.validateSubscalarIndex(_:)( unint64_t result, unint64_t a2, unint64_t a3)
{
  uint64_t v5 = (a2 >> 59) & 1;
  if ((a3 & 0x1000000000000000LL) == 0) {
    LOBYTE(v5) = 1;
  }
  if ((result & 0xC) == 4LL << v5) {
    uint64_t result = _StringGuts._slowEnsureMatchingEncoding(_:)(result, a2, a3);
  }
  unint64_t v6 = HIBYTE(a3) & 0xF;
  if ((a3 & 0x2000000000000000LL) == 0) {
    unint64_t v6 = a2 & 0xFFFFFFFFFFFFLL;
  }
  if (v6 <= result >> 16) {
    __break(1u);
  }
  return result;
}

uint64_t specialized closure #1 in Rope._Node.formSuccessor(of:)( uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, char a5)
{
  unint64_t v10 = (uint64_t *)(a1 + 24 * *a2);
  uint64_t v11 = *v10;
  uint64_t v12 = v10[1];
  uint64_t v13 = v10[2];
  swift_unknownObjectRetain();
  LOBYTE(v12) = specialized Rope._Node.formSuccessor(of:)(a3, v11, v12, v13);
  uint64_t result = swift_unknownObjectRelease();
  if ((v12 & 1) != 0) {
    return 1LL;
  }
  uint64_t v15 = *a2 + 1;
  if (__OFADD__(*a2, 1LL))
  {
    __break(1u);
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }

  *a2 = v15;
  if (v15 < 0) {
    goto LABEL_12;
  }
  uint64_t v16 = *(void *)(a3 + 8) & ((-15LL << ((4 * a5 + 8) & 0x3C)) - 1) | (v15 << ((4 * a5 + 8) & 0x3C));
  *(void *)(a3 + 8) = v16;
  uint64_t v17 = *(void *)(a1 + 24 * *a2);
  int v18 = *(unsigned __int8 *)(v17 + 18);
  if ((((v18 + 1) >> 8) & 1) != 0)
  {
LABEL_13:
    __break(1u);
    return result;
  }

  unint64_t v19 = ((-256LL << (4 * ((v18 + 1) & 0xFu))) | 0xFF) & v16;
  *(void *)(a3 + 8) = v19;
  if (v18)
  {
    uint64_t v20 = (v19 >> ((4 * v18 + 8) & 0x3C)) & 0xF;
    swift_unknownObjectRetain();
    uint64_t v21 = specialized closure #1 in Rope._Node.unmanagedLeaf(at:)(v17 + 24, v20, v19);
    swift_unknownObjectRelease();
    uint64_t v17 = v21;
  }

  *(void *)(a3 + 16) = v17;
  return 1LL;
}

void base witness table accessor for Collection in AttributedString.Runs.AttributesSlice1<A>()
{
}

uint64_t associated type witness table accessor for Collection.Indices : BidirectionalCollection in AttributedString.Runs.AttributesSlice1<A>( uint64_t a1)
{
  uint64_t v3 = MEMORY[0x186E20D4C](&protocol conformance descriptor for AttributedString.Runs.AttributesSlice1<A>);
  return MEMORY[0x186E20D4C](MEMORY[0x189617A18], a1, &v3);
}

uint64_t associated type witness table accessor for Collection.SubSequence : BidirectionalCollection in AttributedString.Runs.AttributesSlice1<A>( uint64_t a1)
{
  uint64_t v3 = MEMORY[0x186E20D4C](&protocol conformance descriptor for AttributedString.Runs.AttributesSlice1<A>);
  return MEMORY[0x186E20D4C](MEMORY[0x18961A5C8], a1, &v3);
}

void base witness table accessor for Sequence in AttributedString.Runs.AttributesSlice1<A>()
{
}

void associated type witness table accessor for Collection.Indices : Collection in AttributedString.Runs.AttributesSlice1<A>()
{
}

void associated type witness table accessor for Collection.SubSequence : Collection in AttributedString.Runs.AttributesSlice1<A>()
{
}

void associated type witness table accessor for Sequence.Iterator : IteratorProtocol in AttributedString.Runs.AttributesSlice1<A>()
{
}

void base witness table accessor for Collection in AttributedString.Runs.AttributesSlice2<A, B>()
{
}

uint64_t associated type witness table accessor for Collection.Indices : BidirectionalCollection in AttributedString.Runs.AttributesSlice2<A, B>( uint64_t a1)
{
  uint64_t v3 = MEMORY[0x186E20D4C](&protocol conformance descriptor for AttributedString.Runs.AttributesSlice2<A, B>);
  return MEMORY[0x186E20D4C](MEMORY[0x189617A18], a1, &v3);
}

uint64_t associated type witness table accessor for Collection.SubSequence : BidirectionalCollection in AttributedString.Runs.AttributesSlice2<A, B>( uint64_t a1)
{
  uint64_t v3 = MEMORY[0x186E20D4C](&protocol conformance descriptor for AttributedString.Runs.AttributesSlice2<A, B>);
  return MEMORY[0x186E20D4C](MEMORY[0x18961A5C8], a1, &v3);
}

void base witness table accessor for Sequence in AttributedString.Runs.AttributesSlice2<A, B>()
{
}

void associated type witness table accessor for Sequence.Iterator : IteratorProtocol in AttributedString.Runs.AttributesSlice2<A, B>()
{
}

void base witness table accessor for Collection in AttributedString.Runs.AttributesSlice3<A, B, C>()
{
}

uint64_t associated type witness table accessor for Collection.Indices : BidirectionalCollection in AttributedString.Runs.AttributesSlice3<A, B, C>( uint64_t a1)
{
  uint64_t v3 = MEMORY[0x186E20D4C](&protocol conformance descriptor for AttributedString.Runs.AttributesSlice3<A, B, C>);
  return MEMORY[0x186E20D4C](MEMORY[0x189617A18], a1, &v3);
}

uint64_t associated type witness table accessor for Collection.SubSequence : BidirectionalCollection in AttributedString.Runs.AttributesSlice3<A, B, C>( uint64_t a1)
{
  uint64_t v3 = MEMORY[0x186E20D4C](&protocol conformance descriptor for AttributedString.Runs.AttributesSlice3<A, B, C>);
  return MEMORY[0x186E20D4C](MEMORY[0x18961A5C8], a1, &v3);
}

void base witness table accessor for Sequence in AttributedString.Runs.AttributesSlice3<A, B, C>()
{
}

void associated type witness table accessor for Sequence.Iterator : IteratorProtocol in AttributedString.Runs.AttributesSlice3<A, B, C>()
{
}

void base witness table accessor for Collection in AttributedString.Runs.AttributesSlice4<A, B, C, D>()
{
}

uint64_t associated type witness table accessor for Collection.Indices : BidirectionalCollection in AttributedString.Runs.AttributesSlice4<A, B, C, D>( uint64_t a1)
{
  uint64_t v3 = MEMORY[0x186E20D4C](&protocol conformance descriptor for AttributedString.Runs.AttributesSlice4<A, B, C, D>);
  return MEMORY[0x186E20D4C](MEMORY[0x189617A18], a1, &v3);
}

uint64_t associated type witness table accessor for Collection.SubSequence : BidirectionalCollection in AttributedString.Runs.AttributesSlice4<A, B, C, D>( uint64_t a1)
{
  uint64_t v3 = MEMORY[0x186E20D4C](&protocol conformance descriptor for AttributedString.Runs.AttributesSlice4<A, B, C, D>);
  return MEMORY[0x186E20D4C](MEMORY[0x18961A5C8], a1, &v3);
}

void base witness table accessor for Sequence in AttributedString.Runs.AttributesSlice4<A, B, C, D>()
{
}

void associated type witness table accessor for Sequence.Iterator : IteratorProtocol in AttributedString.Runs.AttributesSlice4<A, B, C, D>()
{
}

void base witness table accessor for Collection in AttributedString.Runs.AttributesSlice5<A, B, C, D, E>()
{
}

uint64_t associated type witness table accessor for Collection.Indices : BidirectionalCollection in AttributedString.Runs.AttributesSlice5<A, B, C, D, E>( uint64_t a1)
{
  uint64_t v3 = MEMORY[0x186E20D4C](&protocol conformance descriptor for AttributedString.Runs.AttributesSlice5<A, B, C, D, E>);
  return MEMORY[0x186E20D4C](MEMORY[0x189617A18], a1, &v3);
}

uint64_t associated type witness table accessor for Collection.SubSequence : BidirectionalCollection in AttributedString.Runs.AttributesSlice5<A, B, C, D, E>( uint64_t a1)
{
  uint64_t v3 = MEMORY[0x186E20D4C](&protocol conformance descriptor for AttributedString.Runs.AttributesSlice5<A, B, C, D, E>);
  return MEMORY[0x186E20D4C](MEMORY[0x18961A5C8], a1, &v3);
}

void base witness table accessor for Sequence in AttributedString.Runs.AttributesSlice5<A, B, C, D, E>()
{
}

void associated type witness table accessor for Sequence.Iterator : IteratorProtocol in AttributedString.Runs.AttributesSlice5<A, B, C, D, E>()
{
}

unint64_t lazy protocol witness table accessor for type AttributedString.Runs.NSAttributesSlice and conformance AttributedString.Runs.NSAttributesSlice()
{
  unint64_t result = lazy protocol witness table cache variable for type AttributedString.Runs.NSAttributesSlice and conformance AttributedString.Runs.NSAttributesSlice;
  if (!lazy protocol witness table cache variable for type AttributedString.Runs.NSAttributesSlice and conformance AttributedString.Runs.NSAttributesSlice)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for AttributedString.Runs.NSAttributesSlice,  &type metadata for AttributedString.Runs.NSAttributesSlice);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type AttributedString.Runs.NSAttributesSlice and conformance AttributedString.Runs.NSAttributesSlice);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type AttributedString.Runs.NSAttributesSlice and conformance AttributedString.Runs.NSAttributesSlice;
  if (!lazy protocol witness table cache variable for type AttributedString.Runs.NSAttributesSlice and conformance AttributedString.Runs.NSAttributesSlice)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for AttributedString.Runs.NSAttributesSlice,  &type metadata for AttributedString.Runs.NSAttributesSlice);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type AttributedString.Runs.NSAttributesSlice and conformance AttributedString.Runs.NSAttributesSlice);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type AttributedString.Runs.NSAttributesSlice and conformance AttributedString.Runs.NSAttributesSlice;
  if (!lazy protocol witness table cache variable for type AttributedString.Runs.NSAttributesSlice and conformance AttributedString.Runs.NSAttributesSlice)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for AttributedString.Runs.NSAttributesSlice,  &type metadata for AttributedString.Runs.NSAttributesSlice);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type AttributedString.Runs.NSAttributesSlice and conformance AttributedString.Runs.NSAttributesSlice);
  }

  return result;
}

uint64_t associated type witness table accessor for Collection.Indices : BidirectionalCollection in AttributedString.Runs.NSAttributesSlice()
{
  return lazy protocol witness table accessor for type DefaultIndices<AttributedString.Runs.NSAttributesSlice> and conformance <> DefaultIndices<A>( &lazy protocol witness table cache variable for type DefaultIndices<AttributedString.Runs.NSAttributesSlice> and conformance <> DefaultIndices<A>,  &demangling cache variable for type metadata for DefaultIndices<AttributedString.Runs.NSAttributesSlice>,  MEMORY[0x189617A18]);
}

uint64_t associated type witness table accessor for Collection.SubSequence : BidirectionalCollection in AttributedString.Runs.NSAttributesSlice()
{
  return lazy protocol witness table accessor for type DefaultIndices<AttributedString.Runs.NSAttributesSlice> and conformance <> DefaultIndices<A>( &lazy protocol witness table cache variable for type Slice<AttributedString.Runs.NSAttributesSlice> and conformance <> Slice<A>,  &demangling cache variable for type metadata for Slice<AttributedString.Runs.NSAttributesSlice>,  MEMORY[0x18961A5C8]);
}

uint64_t lazy protocol witness table accessor for type DefaultIndices<AttributedString.Runs.NSAttributesSlice> and conformance <> DefaultIndices<A>( unint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t result = *a1;
  if (!result)
  {
    uint64_t v6 = __swift_instantiateConcreteTypeFromMangledNameAbstract(a2);
    unint64_t v7 = lazy protocol witness table accessor for type AttributedString.Runs.NSAttributesSlice and conformance AttributedString.Runs.NSAttributesSlice();
    uint64_t result = MEMORY[0x186E20D4C](a3, v6, &v7);
    atomic_store(result, a1);
  }

  return result;
}

uint64_t associated type witness table accessor for Collection.Indices : Collection in AttributedString.Runs.NSAttributesSlice()
{
  return lazy protocol witness table accessor for type [String] and conformance [A]( &lazy protocol witness table cache variable for type DefaultIndices<AttributedString.Runs.NSAttributesSlice> and conformance DefaultIndices<A>,  &demangling cache variable for type metadata for DefaultIndices<AttributedString.Runs.NSAttributesSlice>,  MEMORY[0x189617A28]);
}

uint64_t associated type witness table accessor for Collection.SubSequence : Collection in AttributedString.Runs.NSAttributesSlice()
{
  return lazy protocol witness table accessor for type [String] and conformance [A]( &lazy protocol witness table cache variable for type Slice<AttributedString.Runs.NSAttributesSlice> and conformance Slice<A>,  &demangling cache variable for type metadata for Slice<AttributedString.Runs.NSAttributesSlice>,  MEMORY[0x18961A5E8]);
}

unint64_t lazy protocol witness table accessor for type AttributedString.Runs.NSAttributesSlice.Iterator and conformance AttributedString.Runs.NSAttributesSlice.Iterator()
{
  unint64_t result = lazy protocol witness table cache variable for type AttributedString.Runs.NSAttributesSlice.Iterator and conformance AttributedString.Runs.NSAttributesSlice.Iterator;
  if (!lazy protocol witness table cache variable for type AttributedString.Runs.NSAttributesSlice.Iterator and conformance AttributedString.Runs.NSAttributesSlice.Iterator)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for AttributedString.Runs.NSAttributesSlice.Iterator,  &type metadata for AttributedString.Runs.NSAttributesSlice.Iterator);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type AttributedString.Runs.NSAttributesSlice.Iterator and conformance AttributedString.Runs.NSAttributesSlice.Iterator);
  }

  return result;
}

__n128 __swift_memcpy216_8(uint64_t a1, uint64_t a2)
{
  __int128 v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  __int128 v3 = *(_OWORD *)(a2 + 32);
  __int128 v4 = *(_OWORD *)(a2 + 48);
  __int128 v5 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v5;
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)(a1 + 48) = v4;
  __int128 v6 = *(_OWORD *)(a2 + 96);
  __int128 v7 = *(_OWORD *)(a2 + 112);
  __int128 v8 = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 144) = v8;
  *(_OWORD *)(a1 + 96) = v6;
  *(_OWORD *)(a1 + 112) = v7;
  __n128 result = *(__n128 *)(a2 + 160);
  __int128 v10 = *(_OWORD *)(a2 + 176);
  __int128 v11 = *(_OWORD *)(a2 + 192);
  *(void *)(a1 + 208) = *(void *)(a2 + 208);
  *(_OWORD *)(a1 + 176) = v10;
  *(_OWORD *)(a1 + 192) = v11;
  *(__n128 *)(a1 + 160) = result;
  return result;
}

uint64_t type metadata accessor for AttributedString.Runs.AttributesSlice1( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata( a1,  a2,  a3,  a4,  (uint64_t)&nominal type descriptor for AttributedString.Runs.AttributesSlice1);
}

__n128 __swift_memcpy248_8(uint64_t a1, __int128 *a2)
{
  __int128 v2 = *a2;
  __int128 v3 = a2[1];
  __int128 v4 = a2[3];
  *(_OWORD *)(a1 + 32) = a2[2];
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)a1 = v2;
  *(_OWORD *)(a1 + 16) = v3;
  __int128 v5 = a2[4];
  __int128 v6 = a2[5];
  __int128 v7 = a2[7];
  *(_OWORD *)(a1 + 96) = a2[6];
  *(_OWORD *)(a1 + 112) = v7;
  *(_OWORD *)(a1 + 64) = v5;
  *(_OWORD *)(a1 + 80) = v6;
  __int128 v8 = a2[8];
  __int128 v9 = a2[9];
  __int128 v10 = a2[11];
  *(_OWORD *)(a1 + 160) = a2[10];
  *(_OWORD *)(a1 + 176) = v10;
  *(_OWORD *)(a1 + 128) = v8;
  *(_OWORD *)(a1 + 144) = v9;
  __n128 result = (__n128)a2[12];
  __int128 v12 = a2[13];
  __int128 v13 = a2[14];
  *(void *)(a1 + 240) = *((void *)a2 + 30);
  *(_OWORD *)(a1 + 208) = v12;
  *(_OWORD *)(a1 + 224) = v13;
  *(__n128 *)(a1 + 192) = result;
  return result;
}

uint64_t type metadata accessor for AttributedString.Runs.AttributesSlice1.Iterator( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata( a1,  a2,  a3,  a4,  (uint64_t)&nominal type descriptor for AttributedString.Runs.AttributesSlice1.Iterator);
}

void type metadata accessor for AttributedString.Runs.AttributesSlice2()
{
}

void type metadata accessor for AttributedString.Runs.AttributesSlice2.Iterator()
{
}

void type metadata accessor for AttributedString.Runs.AttributesSlice3()
{
}

void type metadata accessor for AttributedString.Runs.AttributesSlice3.Iterator()
{
}

uint64_t type metadata instantiation function for AttributedString.Runs.AttributesSlice4()
{
  return swift_allocateGenericValueMetadata();
}

void type metadata accessor for AttributedString.Runs.AttributesSlice4()
{
}

void type metadata accessor for AttributedString.Runs.AttributesSlice4.Iterator()
{
}

uint64_t type metadata instantiation function for AttributedString.Runs.AttributesSlice5()
{
  return swift_allocateGenericValueMetadata();
}

uint64_t initializeWithCopy for AttributedString.Runs.AttributesSlice1(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 184) = *(_OWORD *)(a2 + 184);
  *(_OWORD *)(a1 + 168) = *(_OWORD *)(a2 + 168);
  *(_OWORD *)(a1 + 152) = *(_OWORD *)(a2 + 152);
  *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
  uint64_t v3 = *(void *)(a2 + 208);
  *(void *)(a1 + 200) = *(void *)(a2 + 200);
  *(void *)(a1 + 208) = v3;
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for AttributedString.Runs.AttributesSlice1(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_retain();
  swift_release();
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  __int128 v4 = *(_OWORD *)(a2 + 16);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = v4;
  __int128 v5 = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 40) = v5;
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  __int128 v6 = *(_OWORD *)(a2 + 80);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  *(_OWORD *)(a1 + 80) = v6;
  __int128 v7 = *(_OWORD *)(a2 + 104);
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
  *(_OWORD *)(a1 + 104) = v7;
  *(void *)(a1 + 136) = *(void *)(a2 + 136);
  __int128 v8 = *(_OWORD *)(a2 + 144);
  *(void *)(a1 + 160) = *(void *)(a2 + 160);
  *(_OWORD *)(a1 + 144) = v8;
  *(void *)(a1 + 168) = *(void *)(a2 + 168);
  __int128 v9 = *(_OWORD *)(a2 + 176);
  *(void *)(a1 + 192) = *(void *)(a2 + 192);
  *(_OWORD *)(a1 + 176) = v9;
  *(void *)(a1 + 200) = *(void *)(a2 + 200);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 208) = *(void *)(a2 + 208);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for AttributedString.Runs.AttributesSlice1(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_release();
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  *(void *)(a1 + 136) = *(void *)(a2 + 136);
  *(_OWORD *)(a1 + 144) = *(_OWORD *)(a2 + 144);
  uint64_t v4 = *(void *)(a2 + 168);
  *(void *)(a1 + 160) = *(void *)(a2 + 160);
  *(void *)(a1 + 168) = v4;
  *(void *)(a1 + 192) = *(void *)(a2 + 192);
  *(_OWORD *)(a1 + 176) = *(_OWORD *)(a2 + 176);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 200) = *(_OWORD *)(a2 + 200);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for AttributedString.Runs.AttributesSlice1(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0 && *((_BYTE *)a1 + 216)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for AttributedString.Runs.AttributesSlice1(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(_BYTE *)(result + 216) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)__n128 result = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 216) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

void type metadata accessor for AttributedString.Runs.AttributesSlice5()
{
}

uint64_t type metadata instantiation function for AttributedString.Runs.AttributesSlice5.Iterator()
{
  return swift_allocateGenericValueMetadata();
}

uint64_t destroy for AttributedString.Runs.AttributesSlice1()
{
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for AttributedString.Runs.AttributesSlice1.Iterator(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 184) = *(_OWORD *)(a2 + 184);
  *(_OWORD *)(a1 + 168) = *(_OWORD *)(a2 + 168);
  *(_OWORD *)(a1 + 152) = *(_OWORD *)(a2 + 152);
  *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
  uint64_t v3 = *(void *)(a2 + 208);
  *(void *)(a1 + 200) = *(void *)(a2 + 200);
  *(void *)(a1 + 208) = v3;
  *(_OWORD *)(a1 + 232) = *(_OWORD *)(a2 + 232);
  *(_OWORD *)(a1 + 216) = *(_OWORD *)(a2 + 216);
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for AttributedString.Runs.AttributesSlice1.Iterator(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_retain();
  swift_release();
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  __int128 v4 = *(_OWORD *)(a2 + 16);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = v4;
  __int128 v5 = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 40) = v5;
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  __int128 v6 = *(_OWORD *)(a2 + 80);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  *(_OWORD *)(a1 + 80) = v6;
  __int128 v7 = *(_OWORD *)(a2 + 104);
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
  *(_OWORD *)(a1 + 104) = v7;
  *(void *)(a1 + 136) = *(void *)(a2 + 136);
  __int128 v8 = *(_OWORD *)(a2 + 144);
  *(void *)(a1 + 160) = *(void *)(a2 + 160);
  *(_OWORD *)(a1 + 144) = v8;
  *(void *)(a1 + 168) = *(void *)(a2 + 168);
  __int128 v9 = *(_OWORD *)(a2 + 176);
  *(void *)(a1 + 192) = *(void *)(a2 + 192);
  *(_OWORD *)(a1 + 176) = v9;
  *(void *)(a1 + 200) = *(void *)(a2 + 200);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 208) = *(void *)(a2 + 208);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 216) = *(void *)(a2 + 216);
  __int128 v10 = *(_OWORD *)(a2 + 224);
  *(void *)(a1 + 240) = *(void *)(a2 + 240);
  *(_OWORD *)(a1 + 224) = v10;
  return a1;
}

uint64_t assignWithTake for AttributedString.Runs.AttributesSlice1.Iterator(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_release();
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  *(void *)(a1 + 136) = *(void *)(a2 + 136);
  *(_OWORD *)(a1 + 144) = *(_OWORD *)(a2 + 144);
  uint64_t v4 = *(void *)(a2 + 168);
  *(void *)(a1 + 160) = *(void *)(a2 + 160);
  *(void *)(a1 + 168) = v4;
  *(void *)(a1 + 192) = *(void *)(a2 + 192);
  *(_OWORD *)(a1 + 176) = *(_OWORD *)(a2 + 176);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 200) = *(_OWORD *)(a2 + 200);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 216) = *(void *)(a2 + 216);
  *(_OWORD *)(a1 + 224) = *(_OWORD *)(a2 + 224);
  *(void *)(a1 + 240) = *(void *)(a2 + 240);
  return a1;
}

uint64_t getEnumTagSinglePayload for AttributedString.Runs.AttributesSlice1.Iterator(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0 && *((_BYTE *)a1 + 248)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for AttributedString.Runs.AttributesSlice1.Iterator( uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 232) = 0u;
    *(_OWORD *)(result + 216) = 0u;
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(_BYTE *)(result + 248) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)__n128 result = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 248) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

void type metadata accessor for AttributedString.Runs.AttributesSlice5.Iterator()
{
}

uint64_t initializeWithCopy for AttributedString.Runs.NSAttributesSlice(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 184) = *(_OWORD *)(a2 + 184);
  *(_OWORD *)(a1 + 168) = *(_OWORD *)(a2 + 168);
  *(_OWORD *)(a1 + 152) = *(_OWORD *)(a2 + 152);
  *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
  *(void *)(a1 + 200) = *(void *)(a2 + 200);
  swift_retain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for AttributedString.Runs.NSAttributesSlice(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_retain();
  swift_release();
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  __int128 v4 = *(_OWORD *)(a2 + 16);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = v4;
  __int128 v5 = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 40) = v5;
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  __int128 v6 = *(_OWORD *)(a2 + 80);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  *(_OWORD *)(a1 + 80) = v6;
  __int128 v7 = *(_OWORD *)(a2 + 104);
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
  *(_OWORD *)(a1 + 104) = v7;
  *(void *)(a1 + 136) = *(void *)(a2 + 136);
  __int128 v8 = *(_OWORD *)(a2 + 144);
  *(void *)(a1 + 160) = *(void *)(a2 + 160);
  *(_OWORD *)(a1 + 144) = v8;
  *(void *)(a1 + 168) = *(void *)(a2 + 168);
  __int128 v9 = *(_OWORD *)(a2 + 176);
  *(void *)(a1 + 192) = *(void *)(a2 + 192);
  *(_OWORD *)(a1 + 176) = v9;
  *(void *)(a1 + 200) = *(void *)(a2 + 200);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for AttributedString.Runs.NSAttributesSlice(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_release();
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  *(void *)(a1 + 136) = *(void *)(a2 + 136);
  *(_OWORD *)(a1 + 144) = *(_OWORD *)(a2 + 144);
  uint64_t v4 = *(void *)(a2 + 168);
  *(void *)(a1 + 160) = *(void *)(a2 + 160);
  *(void *)(a1 + 168) = v4;
  *(_OWORD *)(a1 + 176) = *(_OWORD *)(a2 + 176);
  uint64_t v5 = *(void *)(a2 + 200);
  *(void *)(a1 + 192) = *(void *)(a2 + 192);
  *(void *)(a1 + 200) = v5;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for AttributedString.Runs.NSAttributesSlice(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0 && *((_BYTE *)a1 + 208)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for AttributedString.Runs.NSAttributesSlice( uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 200) = 0LL;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(_BYTE *)(result + 208) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)__n128 result = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 208) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for AttributedString.Runs.NSAttributesSlice()
{
  return &type metadata for AttributedString.Runs.NSAttributesSlice;
}

uint64_t destroy for AttributedString.Runs.NSAttributesSlice.Iterator()
{
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for AttributedString.Runs.NSAttributesSlice.Iterator(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 184) = *(_OWORD *)(a2 + 184);
  *(_OWORD *)(a1 + 168) = *(_OWORD *)(a2 + 168);
  *(_OWORD *)(a1 + 152) = *(_OWORD *)(a2 + 152);
  *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
  *(void *)(a1 + 200) = *(void *)(a2 + 200);
  __int128 v3 = *(_OWORD *)(a2 + 224);
  *(_OWORD *)(a1 + 208) = *(_OWORD *)(a2 + 208);
  *(_OWORD *)(a1 + 224) = v3;
  swift_retain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for AttributedString.Runs.NSAttributesSlice.Iterator(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_retain();
  swift_release();
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  __int128 v4 = *(_OWORD *)(a2 + 16);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = v4;
  __int128 v5 = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 40) = v5;
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  __int128 v6 = *(_OWORD *)(a2 + 80);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  *(_OWORD *)(a1 + 80) = v6;
  __int128 v7 = *(_OWORD *)(a2 + 104);
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
  *(_OWORD *)(a1 + 104) = v7;
  *(void *)(a1 + 136) = *(void *)(a2 + 136);
  __int128 v8 = *(_OWORD *)(a2 + 144);
  *(void *)(a1 + 160) = *(void *)(a2 + 160);
  *(_OWORD *)(a1 + 144) = v8;
  *(void *)(a1 + 168) = *(void *)(a2 + 168);
  __int128 v9 = *(_OWORD *)(a2 + 176);
  *(void *)(a1 + 192) = *(void *)(a2 + 192);
  *(_OWORD *)(a1 + 176) = v9;
  *(void *)(a1 + 200) = *(void *)(a2 + 200);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 208) = *(void *)(a2 + 208);
  __int128 v10 = *(_OWORD *)(a2 + 216);
  *(void *)(a1 + 232) = *(void *)(a2 + 232);
  *(_OWORD *)(a1 + 216) = v10;
  return a1;
}

__n128 __swift_memcpy240_8(uint64_t a1, __int128 *a2)
{
  __int128 v2 = *a2;
  __int128 v3 = a2[2];
  *(_OWORD *)(a1 + 16) = a2[1];
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)a1 = v2;
  __int128 v4 = a2[3];
  __int128 v5 = a2[4];
  __int128 v6 = a2[6];
  *(_OWORD *)(a1 + 80) = a2[5];
  *(_OWORD *)(a1 + 96) = v6;
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)(a1 + 64) = v5;
  __int128 v7 = a2[7];
  __int128 v8 = a2[8];
  __int128 v9 = a2[10];
  *(_OWORD *)(a1 + 144) = a2[9];
  *(_OWORD *)(a1 + 160) = v9;
  *(_OWORD *)(a1 + 112) = v7;
  *(_OWORD *)(a1 + 128) = v8;
  __n128 result = (__n128)a2[11];
  __int128 v11 = a2[12];
  __int128 v12 = a2[14];
  *(_OWORD *)(a1 + 208) = a2[13];
  *(_OWORD *)(a1 + 224) = v12;
  *(__n128 *)(a1 + 176) = result;
  *(_OWORD *)(a1 + 192) = v11;
  return result;
}

uint64_t assignWithTake for AttributedString.Runs.NSAttributesSlice.Iterator(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_release();
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  *(void *)(a1 + 136) = *(void *)(a2 + 136);
  *(_OWORD *)(a1 + 144) = *(_OWORD *)(a2 + 144);
  uint64_t v4 = *(void *)(a2 + 168);
  *(void *)(a1 + 160) = *(void *)(a2 + 160);
  *(void *)(a1 + 168) = v4;
  *(_OWORD *)(a1 + 176) = *(_OWORD *)(a2 + 176);
  uint64_t v5 = *(void *)(a2 + 200);
  *(void *)(a1 + 192) = *(void *)(a2 + 192);
  *(void *)(a1 + 200) = v5;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 208) = *(void *)(a2 + 208);
  *(_OWORD *)(a1 + 216) = *(_OWORD *)(a2 + 216);
  *(void *)(a1 + 232) = *(void *)(a2 + 232);
  return a1;
}

uint64_t getEnumTagSinglePayload for AttributedString.Runs.NSAttributesSlice.Iterator(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0 && *((_BYTE *)a1 + 240)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for AttributedString.Runs.NSAttributesSlice.Iterator( uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 232) = 0LL;
    *(_OWORD *)(result + 216) = 0u;
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(_BYTE *)(result + 240) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)__n128 result = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 240) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for AttributedString.Runs.NSAttributesSlice.Iterator()
{
  return &type metadata for AttributedString.Runs.NSAttributesSlice.Iterator;
}

void *specialized RangeReplaceableCollection.init(_contents:_:_:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  BOOL v9 = a2 != 1;
  uint64_t v10 = 1LL;
  if (a2 != 1) {
    uint64_t v10 = 2LL;
  }
  if (a4 != 1) {
    BOOL v9 = v10;
  }
  if (a6 == 1) {
    int64_t v11 = v9;
  }
  else {
    int64_t v11 = v9 + 1;
  }
  if (!v11)
  {
    outlined consume of AttributedString.AttributeRunBoundaries?(a5, a6);
    return (void *)MEMORY[0x18961AFE8];
  }

  uint64_t v15 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  v11,  0,  MEMORY[0x18961AFE8]);
  uint64_t v16 = v15;
  if (a2 == 1)
  {
    if (a4 == 1) {
      goto LABEL_11;
    }
  }

  else
  {
    unint64_t v17 = v15[2];
    unint64_t v18 = v15[3];
    swift_bridgeObjectRetain();
    if (v17 >= v18 >> 1) {
      uint64_t v16 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (void *)(v18 > 1),  v17 + 1,  1,  v16);
    }
    v16[2] = v17 + 1;
    unint64_t v19 = &v16[2 * v17];
    v19[4] = a1;
    v19[5] = a2;
    if (a4 == 1)
    {
LABEL_11:
      if (a6 == 1) {
        return v16;
      }
      goto LABEL_20;
    }
  }

  unint64_t v20 = v16[2];
  unint64_t v21 = v16[3];
  swift_bridgeObjectRetain();
  if (v20 >= v21 >> 1) {
    uint64_t v16 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (void *)(v21 > 1),  v20 + 1,  1,  v16);
  }
  v16[2] = v20 + 1;
  __int128 v22 = &v16[2 * v20];
  v22[4] = a3;
  v22[5] = a4;
  if (a6 != 1)
  {
LABEL_20:
    unint64_t v24 = v16[2];
    unint64_t v23 = v16[3];
    if (v24 >= v23 >> 1) {
      uint64_t v16 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (void *)(v23 > 1),  v24 + 1,  1,  v16);
    }
    v16[2] = v24 + 1;
    BOOL v25 = &v16[2 * v24];
    v25[4] = a5;
    v25[5] = a6;
  }

  return v16;
}

void *specialized RangeReplaceableCollection.init(_contents:_:_:_:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int64_t v11 = a2 != 1;
  uint64_t v12 = 1LL;
  if (a2 != 1) {
    uint64_t v12 = 2LL;
  }
  if (a4 != 1) {
    int64_t v11 = v12;
  }
  if (a6 != 1) {
    ++v11;
  }
  if (a8 == 1) {
    int64_t v13 = v11;
  }
  else {
    int64_t v13 = v11 + 1;
  }
  if (!v13)
  {
    outlined consume of AttributedString.AttributeRunBoundaries?(a7, a8);
    return (void *)MEMORY[0x18961AFE8];
  }

  unint64_t v18 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  v13,  0,  MEMORY[0x18961AFE8]);
  unint64_t v19 = v18;
  if (a2 == 1)
  {
    if (a4 == 1) {
      goto LABEL_13;
    }
  }

  else
  {
    unint64_t v21 = v18[2];
    unint64_t v20 = v18[3];
    swift_bridgeObjectRetain();
    if (v21 >= v20 >> 1) {
      unint64_t v19 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (void *)(v20 > 1),  v21 + 1,  1,  v19);
    }
    _OWORD v19[2] = v21 + 1;
    __int128 v22 = &v19[2 * v21];
    v22[4] = a1;
    v22[5] = a2;
    if (a4 == 1)
    {
LABEL_13:
      if (a6 == 1) {
        goto LABEL_14;
      }
      goto LABEL_23;
    }
  }

  unint64_t v24 = v19[2];
  unint64_t v23 = v19[3];
  swift_bridgeObjectRetain();
  if (v24 >= v23 >> 1) {
    unint64_t v19 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (void *)(v23 > 1),  v24 + 1,  1,  v19);
  }
  _OWORD v19[2] = v24 + 1;
  BOOL v25 = &v19[2 * v24];
  v25[4] = a3;
  v25[5] = a4;
  if (a6 == 1)
  {
LABEL_14:
    if (a8 == 1) {
      return v19;
    }
    goto LABEL_26;
  }

void *specialized RangeReplaceableCollection.init(_contents:_:_:_:_:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v11 = a9;
  int64_t v12 = a2 != 1;
  uint64_t v13 = 1LL;
  if (a2 != 1) {
    uint64_t v13 = 2LL;
  }
  if (a4 != 1) {
    int64_t v12 = v13;
  }
  if (a6 != 1) {
    ++v12;
  }
  if (a8 != 1) {
    ++v12;
  }
  if (a10 == 1) {
    int64_t v14 = v12;
  }
  else {
    int64_t v14 = v12 + 1;
  }
  if (!v14)
  {
    outlined consume of AttributedString.AttributeRunBoundaries?(a9, a10);
    return (void *)MEMORY[0x18961AFE8];
  }

  unint64_t v19 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  v14,  0,  MEMORY[0x18961AFE8]);
  unint64_t v20 = v19;
  if (a2 == 1)
  {
    if (a4 == 1) {
      goto LABEL_15;
    }
  }

  else
  {
    unint64_t v21 = v19[2];
    unint64_t v22 = v19[3];
    swift_bridgeObjectRetain();
    if (v21 >= v22 >> 1) {
      unint64_t v20 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (void *)(v22 > 1),  v21 + 1,  1,  v20);
    }
    _OWORD v20[2] = v21 + 1;
    unint64_t v23 = &v20[2 * v21];
    v23[4] = a1;
    v23[5] = a2;
    uint64_t v11 = a9;
    if (a4 == 1)
    {
LABEL_15:
      if (a6 == 1) {
        goto LABEL_16;
      }
      goto LABEL_26;
    }
  }

  unint64_t v24 = v20[2];
  unint64_t v25 = v20[3];
  swift_bridgeObjectRetain();
  if (v24 >= v25 >> 1) {
    unint64_t v20 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (void *)(v25 > 1),  v24 + 1,  1,  v20);
  }
  _OWORD v20[2] = v24 + 1;
  unint64_t v26 = &v20[2 * v24];
  v26[4] = a3;
  v26[5] = a4;
  if (a6 == 1)
  {
LABEL_16:
    if (a8 == 1) {
      goto LABEL_17;
    }
    goto LABEL_29;
  }

double NSOperationQueue.SchedulerTimeType.date.getter@<D0>(void *a1@<X8>)
{
  double result = *v1;
  *a1 = *(void *)v1;
  return result;
}

double NSOperationQueue.SchedulerTimeType.date.setter(double *a1)
{
  double result = *a1;
  *uint64_t v1 = *(void *)a1;
  return result;
}

uint64_t (*NSOperationQueue.SchedulerTimeType.date.modify())()
{
  return destructiveProjectEnumData for PredicateCodableError;
}

double NSOperationQueue.SchedulerTimeType.init(_:)@<D0>(double *a1@<X0>, void *a2@<X8>)
{
  double result = *a1;
  *a2 = *(void *)a1;
  return result;
}

double NSOperationQueue.SchedulerTimeType.distance(to:)@<D0>(double *a1@<X0>, double *a2@<X8>)
{
  double result = *a1 - *v2;
  *a2 = result;
  return result;
}

void NSOperationQueue.SchedulerTimeType.Stride.init(floatLiteral:)(double *a1@<X8>, double a2@<D0>)
{
  *a1 = a2;
}

double NSOperationQueue.SchedulerTimeType.advanced(by:)@<D0>(double *a1@<X0>, double *a2@<X8>)
{
  double result = *a1 + *v2;
  *a2 = result;
  return result;
}

double NSOperationQueue.SchedulerTimeType.Stride.timeInterval.getter()
{
  return *(double *)v0;
}

double NSOperationQueue.SchedulerTimeType.Stride.magnitude.getter()
{
  return *(double *)v0;
}

void NSOperationQueue.SchedulerTimeType.Stride.magnitude.setter(double a1)
{
  *uint64_t v1 = a1;
}

uint64_t (*NSOperationQueue.SchedulerTimeType.Stride.magnitude.modify())()
{
  return destructiveProjectEnumData for PredicateCodableError;
}

uint64_t NSOperationQueue.SchedulerTimeType.Stride.init<A>(exactly:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = *(void *)(a2 - 8);
  MEMORY[0x1895F8858](a1);
  __int128 v8 = (char *)&v14 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v8, a1, a2);
  uint64_t v9 = Double.init<A>(exactly:)((uint64_t)v8, a2);
  char v11 = v10;
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 8))(a1, a2);
  if ((v11 & 1) != 0) {
    uint64_t v13 = 0LL;
  }
  else {
    uint64_t v13 = v9;
  }
  *(void *)a3 = v13;
  *(_BYTE *)(a3 + 8) = v11 & 1;
  return result;
}

BOOL static NSOperationQueue.SchedulerTimeType.Stride.< infix(_:_:)(double *a1, double *a2)
{
  return *a1 < *a2;
}

double static NSOperationQueue.SchedulerTimeType.Stride.* infix(_:_:)@<D0>( double *a1@<X0>, double *a2@<X1>, double *a3@<X8>)
{
  double result = *a1 * *a2;
  *a3 = result;
  return result;
}

double static NSOperationQueue.SchedulerTimeType.Stride.+ infix(_:_:)@<D0>( double *a1@<X0>, double *a2@<X1>, double *a3@<X8>)
{
  double result = *a1 + *a2;
  *a3 = result;
  return result;
}

double static NSOperationQueue.SchedulerTimeType.Stride.- infix(_:_:)@<D0>( double *a1@<X0>, double *a2@<X1>, double *a3@<X8>)
{
  double result = *a1 - *a2;
  *a3 = result;
  return result;
}

double static NSOperationQueue.SchedulerTimeType.Stride.*= infix(_:_:)(double *a1, double *a2)
{
  double result = *a2 * *a1;
  *a1 = result;
  return result;
}

double static NSOperationQueue.SchedulerTimeType.Stride.+= infix(_:_:)(double *a1, double *a2)
{
  double result = *a2 + *a1;
  *a1 = result;
  return result;
}

double static NSOperationQueue.SchedulerTimeType.Stride.-= infix(_:_:)(double *a1, double *a2)
{
  double result = *a1 - *a2;
  *a1 = result;
  return result;
}

double static NSOperationQueue.SchedulerTimeType.Stride.seconds(_:)@<D0>(uint64_t a1@<X0>, double *a2@<X8>)
{
  double result = (double)a1;
  *a2 = (double)a1;
  return result;
}

void static NSOperationQueue.SchedulerTimeType.Stride.seconds(_:)(double *a1@<X8>, double a2@<D0>)
{
  *a1 = a2;
}

double static NSOperationQueue.SchedulerTimeType.Stride.milliseconds(_:)@<D0>( uint64_t a1@<X0>, double *a2@<X8>)
{
  double result = (double)a1 / 1000.0;
  *a2 = result;
  return result;
}

double static NSOperationQueue.SchedulerTimeType.Stride.microseconds(_:)@<D0>( uint64_t a1@<X0>, double *a2@<X8>)
{
  double result = (double)a1 / 1000000.0;
  *a2 = result;
  return result;
}

double static NSOperationQueue.SchedulerTimeType.Stride.nanoseconds(_:)@<D0>( uint64_t a1@<X0>, double *a2@<X8>)
{
  double result = (double)a1 / 1000000000.0;
  *a2 = result;
  return result;
}

BOOL static NSOperationQueue.SchedulerTimeType.Stride.== infix(_:_:)(double *a1, double *a2)
{
  return *a1 == *a2;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance NSOperationQueue.SchedulerTimeType.Stride.CodingKeys()
{
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance NSOperationQueue.SchedulerTimeType.Stride.CodingKeys()
{
  return CodingKey.debugDescription.getter();
}

uint64_t NSOperationQueue.SchedulerTimeType.Stride.encode(to:)(void *a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<NSOperationQueue.SchedulerTimeType.Stride.CodingKeys>);
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1895F8858](v2);
  uint64_t v5 = (char *)&v7 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type NSOperationQueue.SchedulerTimeType.Stride.CodingKeys and conformance NSOperationQueue.SchedulerTimeType.Stride.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  KeyedEncodingContainer.encode(_:forKey:)();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
}

unint64_t lazy protocol witness table accessor for type NSOperationQueue.SchedulerTimeType.Stride.CodingKeys and conformance NSOperationQueue.SchedulerTimeType.Stride.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type NSOperationQueue.SchedulerTimeType.Stride.CodingKeys and conformance NSOperationQueue.SchedulerTimeType.Stride.CodingKeys;
  if (!lazy protocol witness table cache variable for type NSOperationQueue.SchedulerTimeType.Stride.CodingKeys and conformance NSOperationQueue.SchedulerTimeType.Stride.CodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for NSOperationQueue.SchedulerTimeType.Stride.CodingKeys,  &unk_189C7E4D8);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type NSOperationQueue.SchedulerTimeType.Stride.CodingKeys and conformance NSOperationQueue.SchedulerTimeType.Stride.CodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type NSOperationQueue.SchedulerTimeType.Stride.CodingKeys and conformance NSOperationQueue.SchedulerTimeType.Stride.CodingKeys;
  if (!lazy protocol witness table cache variable for type NSOperationQueue.SchedulerTimeType.Stride.CodingKeys and conformance NSOperationQueue.SchedulerTimeType.Stride.CodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for NSOperationQueue.SchedulerTimeType.Stride.CodingKeys,  &unk_189C7E4D8);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type NSOperationQueue.SchedulerTimeType.Stride.CodingKeys and conformance NSOperationQueue.SchedulerTimeType.Stride.CodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type NSOperationQueue.SchedulerTimeType.Stride.CodingKeys and conformance NSOperationQueue.SchedulerTimeType.Stride.CodingKeys;
  if (!lazy protocol witness table cache variable for type NSOperationQueue.SchedulerTimeType.Stride.CodingKeys and conformance NSOperationQueue.SchedulerTimeType.Stride.CodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for NSOperationQueue.SchedulerTimeType.Stride.CodingKeys,  &unk_189C7E4D8);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type NSOperationQueue.SchedulerTimeType.Stride.CodingKeys and conformance NSOperationQueue.SchedulerTimeType.Stride.CodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type NSOperationQueue.SchedulerTimeType.Stride.CodingKeys and conformance NSOperationQueue.SchedulerTimeType.Stride.CodingKeys;
  if (!lazy protocol witness table cache variable for type NSOperationQueue.SchedulerTimeType.Stride.CodingKeys and conformance NSOperationQueue.SchedulerTimeType.Stride.CodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for NSOperationQueue.SchedulerTimeType.Stride.CodingKeys,  &unk_189C7E4D8);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type NSOperationQueue.SchedulerTimeType.Stride.CodingKeys and conformance NSOperationQueue.SchedulerTimeType.Stride.CodingKeys);
  }

  return result;
}

uint64_t NSOperationQueue.SchedulerTimeType.Stride.init(from:)@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<NSOperationQueue.SchedulerTimeType.Stride.CodingKeys>);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1895F8858](v5);
  __int128 v8 = (char *)&v12 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type NSOperationQueue.SchedulerTimeType.Stride.CodingKeys and conformance NSOperationQueue.SchedulerTimeType.Stride.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v2)
  {
    KeyedDecodingContainer.decode(_:forKey:)();
    uint64_t v10 = v9;
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    *a2 = v10;
  }

  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t protocol witness for Decodable.init(from:) in conformance NSOperationQueue.SchedulerTimeType.Stride@<X0>( void *a1@<X0>, void *a2@<X8>)
{
  return NSOperationQueue.SchedulerTimeType.Stride.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance NSOperationQueue.SchedulerTimeType.Stride( void *a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<NSOperationQueue.SchedulerTimeType.Stride.CodingKeys>);
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1895F8858](v2);
  uint64_t v5 = (char *)&v7 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type NSOperationQueue.SchedulerTimeType.Stride.CodingKeys and conformance NSOperationQueue.SchedulerTimeType.Stride.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  KeyedEncodingContainer.encode(_:forKey:)();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
}

void NSOperationQueue.SchedulerTimeType.hash(into:)()
{
  if ((*v0 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v1 = *v0;
  }
  else {
    Swift::UInt64 v1 = 0LL;
  }
  Hasher._combine(_:)(v1);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance NSOperationQueue.SchedulerTimeType.CodingKeys()
{
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance NSOperationQueue.SchedulerTimeType.CodingKeys()
{
  return CodingKey.debugDescription.getter();
}

uint64_t NSOperationQueue.SchedulerTimeType.encode(to:)(void *a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<NSOperationQueue.SchedulerTimeType.CodingKeys>);
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x1895F8858](v3);
  uint64_t v6 = (char *)v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = *v1;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type NSOperationQueue.SchedulerTimeType.CodingKeys and conformance NSOperationQueue.SchedulerTimeType.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v9[1] = v7;
  lazy protocol witness table accessor for type Date and conformance Date();
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

unint64_t lazy protocol witness table accessor for type NSOperationQueue.SchedulerTimeType.CodingKeys and conformance NSOperationQueue.SchedulerTimeType.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type NSOperationQueue.SchedulerTimeType.CodingKeys and conformance NSOperationQueue.SchedulerTimeType.CodingKeys;
  if (!lazy protocol witness table cache variable for type NSOperationQueue.SchedulerTimeType.CodingKeys and conformance NSOperationQueue.SchedulerTimeType.CodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for NSOperationQueue.SchedulerTimeType.CodingKeys,  &unk_189C7E448);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type NSOperationQueue.SchedulerTimeType.CodingKeys and conformance NSOperationQueue.SchedulerTimeType.CodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type NSOperationQueue.SchedulerTimeType.CodingKeys and conformance NSOperationQueue.SchedulerTimeType.CodingKeys;
  if (!lazy protocol witness table cache variable for type NSOperationQueue.SchedulerTimeType.CodingKeys and conformance NSOperationQueue.SchedulerTimeType.CodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for NSOperationQueue.SchedulerTimeType.CodingKeys,  &unk_189C7E448);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type NSOperationQueue.SchedulerTimeType.CodingKeys and conformance NSOperationQueue.SchedulerTimeType.CodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type NSOperationQueue.SchedulerTimeType.CodingKeys and conformance NSOperationQueue.SchedulerTimeType.CodingKeys;
  if (!lazy protocol witness table cache variable for type NSOperationQueue.SchedulerTimeType.CodingKeys and conformance NSOperationQueue.SchedulerTimeType.CodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for NSOperationQueue.SchedulerTimeType.CodingKeys,  &unk_189C7E448);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type NSOperationQueue.SchedulerTimeType.CodingKeys and conformance NSOperationQueue.SchedulerTimeType.CodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type NSOperationQueue.SchedulerTimeType.CodingKeys and conformance NSOperationQueue.SchedulerTimeType.CodingKeys;
  if (!lazy protocol witness table cache variable for type NSOperationQueue.SchedulerTimeType.CodingKeys and conformance NSOperationQueue.SchedulerTimeType.CodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for NSOperationQueue.SchedulerTimeType.CodingKeys,  &unk_189C7E448);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type NSOperationQueue.SchedulerTimeType.CodingKeys and conformance NSOperationQueue.SchedulerTimeType.CodingKeys);
  }

  return result;
}

Swift::Int NSOperationQueue.SchedulerTimeType.hashValue.getter()
{
  Swift::UInt64 v1 = *v0;
  Hasher.init(_seed:)();
  if ((v1 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v2 = v1;
  }
  else {
    Swift::UInt64 v2 = 0LL;
  }
  Hasher._combine(_:)(v2);
  return Hasher._finalize()();
}

uint64_t NSOperationQueue.SchedulerTimeType.init(from:)@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<NSOperationQueue.SchedulerTimeType.CodingKeys>);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1895F8858](v5);
  __int128 v8 = (char *)v10 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type NSOperationQueue.SchedulerTimeType.CodingKeys and conformance NSOperationQueue.SchedulerTimeType.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v2)
  {
    lazy protocol witness table accessor for type Date and conformance Date();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    *a2 = v10[1];
  }

  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t protocol witness for Decodable.init(from:) in conformance NSOperationQueue.SchedulerTimeType@<X0>( void *a1@<X0>, void *a2@<X8>)
{
  return NSOperationQueue.SchedulerTimeType.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance NSOperationQueue.SchedulerTimeType( void *a1)
{
  return NSOperationQueue.SchedulerTimeType.encode(to:)(a1);
}

uint64_t NSOperationQueue.DelayReadyOperation.CancellationContext.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

void NSOperationQueue.DelayReadyOperation.CancellationContext.cancel()()
{
  Swift::UInt64 v1 = *(os_unfair_lock_s **)(v0 + 16);
  os_unfair_lock_lock(v1);
  uint64_t v2 = MEMORY[0x186E20F44](v0 + 24);
  if (v2)
  {
    uint64_t v3 = (char *)v2;
    swift_unknownObjectWeakAssign();
    os_unfair_lock_unlock(v1);
    uint64_t v4 = &v3[OBJC_IVAR____TtCE10FoundationCSo16NSOperationQueueP33_0ECEE0A75E2DD5EDFED9A6FEB26D5D3219DelayReadyOperation_action];
    uint64_t v5 = *(void *)&v3[OBJC_IVAR____TtCE10FoundationCSo16NSOperationQueueP33_0ECEE0A75E2DD5EDFED9A6FEB26D5D3219DelayReadyOperation_action];
    *(void *)uint64_t v4 = 0LL;
    *((void *)v4 + 1) = 0LL;
    outlined consume of (@escaping @callee_guaranteed (@in_guaranteed URL, @guaranteed Error) -> (@unowned Bool))?(v5);
    uint64_t v6 = *(void **)&v3[OBJC_IVAR____TtCE10FoundationCSo16NSOperationQueueP33_0ECEE0A75E2DD5EDFED9A6FEB26D5D3219DelayReadyOperation_queue];
    *(void *)&v3[OBJC_IVAR____TtCE10FoundationCSo16NSOperationQueueP33_0ECEE0A75E2DD5EDFED9A6FEB26D5D3219DelayReadyOperation_queue] = 0LL;

    *(void *)&v3[OBJC_IVAR____TtCE10FoundationCSo16NSOperationQueueP33_0ECEE0A75E2DD5EDFED9A6FEB26D5D3219DelayReadyOperation_context] = 0LL;
    swift_release();
    v7.receiver = v3;
    v7.super_class = (Class)type metadata accessor for NSOperationQueue.DelayReadyOperation();
    objc_msgSendSuper2(&v7, sel_cancel);
  }

  else
  {
    os_unfair_lock_unlock(v1);
  }

void protocol witness for Cancellable.cancel() in conformance NSOperationQueue.DelayReadyOperation.CancellationContext()
{
}

uint64_t one-time initialization function for readySchedulingQueue()
{
  uint64_t v0 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
  uint64_t v1 = *(void *)(v0 - 8);
  MEMORY[0x1895F8858](v0);
  uint64_t v3 = (char *)v8 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v4 = type metadata accessor for OS_dispatch_queue.Attributes();
  uint64_t v5 = (uint64_t (*)(uint64_t))MEMORY[0x18961B8A8];
  MEMORY[0x1895F8858](v4);
  uint64_t v6 = type metadata accessor for DispatchQoS();
  MEMORY[0x1895F8858](v6);
  type metadata accessor for OS_dispatch_queue();
  static DispatchQoS.unspecified.getter();
  v8[1] = MEMORY[0x18961AFE8];
  lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( (unint64_t *)&lazy protocol witness table cache variable for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes,  v5,  MEMORY[0x18961B8C0]);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [OS_dispatch_queue.Attributes]);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]( (unint64_t *)&lazy protocol witness table cache variable for type [OS_dispatch_queue.Attributes] and conformance [A],  &demangling cache variable for type metadata for [OS_dispatch_queue.Attributes]);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  (*(void (**)(char *, void, uint64_t))(v1 + 104))(v3, *MEMORY[0x18961B900], v0);
  uint64_t result = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  static NSOperationQueue.DelayReadyOperation.readySchedulingQueue = result;
  return result;
}

uint64_t NSOperationQueue.DelayReadyOperation.becomeReady(after:from:)(uint64_t a1, double a2)
{
  uint64_t v4 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v20 = *(void *)(v4 - 8);
  MEMORY[0x1895F8858](v4);
  uint64_t v6 = (char *)&v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = type metadata accessor for DispatchQoS();
  uint64_t v18 = *(void *)(v7 - 8);
  uint64_t v19 = v7;
  MEMORY[0x1895F8858](v7);
  uint64_t v9 = (char *)&v16 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = type metadata accessor for DispatchTime();
  uint64_t v16 = *(void *)(v10 - 8);
  uint64_t v17 = v10;
  MEMORY[0x1895F8858](v10);
  uint64_t v12 = (char *)&v16 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x186E1B2B0](a1, a2);
  if (one-time initialization token for readySchedulingQueue != -1) {
    swift_once();
  }
  uint64_t v13 = swift_allocObject();
  swift_unknownObjectWeakInit();
  aBlock[4] = partial apply for closure #1 in NSOperationQueue.DelayReadyOperation.becomeReady(after:from:);
  aBlock[5] = v13;
  aBlock[0] = MEMORY[0x1895F87A8];
  aBlock[1] = 1107296256LL;
  aBlock[2] = thunk for @escaping @callee_guaranteed @Sendable () -> ();
  aBlock[3] = &block_descriptor_6_1;
  uint64_t v14 = _Block_copy(aBlock);
  swift_retain();
  static DispatchQoS.unspecified.getter();
  uint64_t v21 = MEMORY[0x18961AFE8];
  lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( &lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags,  (uint64_t (*)(uint64_t))MEMORY[0x18961B6A0],  MEMORY[0x18961B6B8]);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]( &lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A],  &demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  MEMORY[0x186E1BE98](v12, v9, v6, v14);
  _Block_release(v14);
  (*(void (**)(char *, uint64_t))(v20 + 8))(v6, v4);
  (*(void (**)(char *, uint64_t))(v18 + 8))(v9, v19);
  (*(void (**)(char *, uint64_t))(v16 + 8))(v12, v17);
  swift_release();
  return swift_release();
}

uint64_t closure #1 in NSOperationQueue.DelayReadyOperation.becomeReady(after:from:)(uint64_t a1)
{
  uint64_t result = MEMORY[0x186E20F44](a1 + 16);
  if (result)
  {
    uint64_t v2 = (void *)result;
    swift_getKeyPath();
    id v3 = v2;
    _bridgeKeyPathToString(_:)();
    uint64_t v4 = String._bridgeToObjectiveCImpl()();
    swift_bridgeObjectRelease();
    objc_msgSend(v3, sel_willChangeValueForKey_, v4);

    swift_unknownObjectRelease();
    swift_release();
    *((_BYTE *)v3
    + OBJC_IVAR____TtCE10FoundationCSo16NSOperationQueueP33_0ECEE0A75E2DD5EDFED9A6FEB26D5D3219DelayReadyOperation_readyFromAfter) = 1;
    swift_getKeyPath();
    id v5 = v3;
    _bridgeKeyPathToString(_:)();
    uint64_t v6 = String._bridgeToObjectiveCImpl()();
    swift_bridgeObjectRelease();
    objc_msgSend(v5, sel_didChangeValueForKey_, v6);

    swift_unknownObjectRelease();
    return swift_release();
  }

  return result;
}

void NSOperationQueue.DelayReadyOperation.main()()
{
  uint64_t v1 = v0;
  uint64_t ObjectType = (objc_class *)swift_getObjectType();
  uint64_t v3 = type metadata accessor for DispatchTime();
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x1895F8858](v3);
  uint64_t v6 = (char *)v29 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = (void *)(v0
                + OBJC_IVAR____TtCE10FoundationCSo16NSOperationQueueP33_0ECEE0A75E2DD5EDFED9A6FEB26D5D3219DelayReadyOperation_action);
  uint64_t v8 = *(void (**)(uint64_t))(v0
                                      + OBJC_IVAR____TtCE10FoundationCSo16NSOperationQueueP33_0ECEE0A75E2DD5EDFED9A6FEB26D5D3219DelayReadyOperation_action);
  if (v8)
  {
    uint64_t v9 = (void (*)(uint64_t))v7[1];
    *uint64_t v7 = 0LL;
    v7[1] = 0LL;
    uint64_t v10 = static DispatchTime.now()();
    v8(v10);
    uint64_t v11 = OBJC_IVAR____TtCE10FoundationCSo16NSOperationQueueP33_0ECEE0A75E2DD5EDFED9A6FEB26D5D3219DelayReadyOperation_queue;
    uint64_t v12 = *(void **)(v0
                   + OBJC_IVAR____TtCE10FoundationCSo16NSOperationQueueP33_0ECEE0A75E2DD5EDFED9A6FEB26D5D3219DelayReadyOperation_queue);
    if (v12)
    {
      Class v31 = ObjectType;
      uint64_t v13 = OBJC_IVAR____TtCE10FoundationCSo16NSOperationQueueP33_0ECEE0A75E2DD5EDFED9A6FEB26D5D3219DelayReadyOperation_context;
      uint64_t v14 = *(void *)(v1
                      + OBJC_IVAR____TtCE10FoundationCSo16NSOperationQueueP33_0ECEE0A75E2DD5EDFED9A6FEB26D5D3219DelayReadyOperation_context);
      if (v14)
      {
        *(void *)(v1
                  + OBJC_IVAR____TtCE10FoundationCSo16NSOperationQueueP33_0ECEE0A75E2DD5EDFED9A6FEB26D5D3219DelayReadyOperation_queue) = 0LL;
        *(void *)(v1 + v13) = 0LL;
        os_unfair_lock_t v30 = *(os_unfair_lock_t *)(v14 + 16);
        os_unfair_lock_lock(v30);
        v29[1] = v14 + 24;
        uint64_t v15 = (void *)MEMORY[0x186E20F44]();

        if (v15)
        {
          double v16 = *(double *)(v1
                          + OBJC_IVAR____TtCE10FoundationCSo16NSOperationQueueP33_0ECEE0A75E2DD5EDFED9A6FEB26D5D3219DelayReadyOperation_interval);
          uint64_t v17 = v31;
          uint64_t v18 = objc_allocWithZone(v31);
          uint64_t v19 = (void (**)(uint64_t))&v18[OBJC_IVAR____TtCE10FoundationCSo16NSOperationQueueP33_0ECEE0A75E2DD5EDFED9A6FEB26D5D3219DelayReadyOperation_action];
          uint64_t v20 = OBJC_IVAR____TtCE10FoundationCSo16NSOperationQueueP33_0ECEE0A75E2DD5EDFED9A6FEB26D5D3219DelayReadyOperation_queue;
          uint64_t v21 = OBJC_IVAR____TtCE10FoundationCSo16NSOperationQueueP33_0ECEE0A75E2DD5EDFED9A6FEB26D5D3219DelayReadyOperation_context;
          *uint64_t v19 = v8;
          v19[1] = v9;
          v18[OBJC_IVAR____TtCE10FoundationCSo16NSOperationQueueP33_0ECEE0A75E2DD5EDFED9A6FEB26D5D3219DelayReadyOperation_readyFromAfter] = 0;
          *(void *)&v18[v20] = v12;
          *(double *)&v18[OBJC_IVAR____TtCE10FoundationCSo16NSOperationQueueP33_0ECEE0A75E2DD5EDFED9A6FEB26D5D3219DelayReadyOperation_interval] = v16;
          *(void *)&v18[v21] = v14;
          id v22 = v12;
          swift_retain();
          outlined copy of (@escaping @callee_guaranteed (@in_guaranteed URL, @guaranteed Error) -> (@unowned Bool))?((uint64_t)v8);
          v32.receiver = v18;
          v32.super_class = v17;
          id v23 = objc_msgSendSuper2(&v32, sel_init);
          swift_unknownObjectWeakAssign();
          unint64_t v24 = v22;
          objc_msgSend(v22, sel_addOperation_, v23);
          os_unfair_lock_unlock(v30);
          id v25 = v23;
          NSOperationQueue.DelayReadyOperation.becomeReady(after:from:)((uint64_t)v6, v16);
          outlined consume of (@escaping @callee_guaranteed (@in_guaranteed URL, @guaranteed Error) -> (@unowned Bool))?((uint64_t)v8);
          swift_release();

          (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
        }

        else
        {
          os_unfair_lock_unlock(v30);
          (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
          outlined consume of (@escaping @callee_guaranteed (@in_guaranteed URL, @guaranteed Error) -> (@unowned Bool))?((uint64_t)v8);
          swift_release();
        }

        return;
      }

      unint64_t v26 = *(void (**)(char *, uint64_t))(v4 + 8);
      id v27 = v12;
      v26(v6, v3);
      outlined consume of (@escaping @callee_guaranteed (@in_guaranteed URL, @guaranteed Error) -> (@unowned Bool))?((uint64_t)v8);
    }

    else
    {
      (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
      outlined consume of (@escaping @callee_guaranteed (@in_guaranteed URL, @guaranteed Error) -> (@unowned Bool))?((uint64_t)v8);
    }

    unint64_t v28 = *(void **)(v1 + v11);
    *(void *)(v1 + v11) = 0LL;

    *(void *)(v1
              + OBJC_IVAR____TtCE10FoundationCSo16NSOperationQueueP33_0ECEE0A75E2DD5EDFED9A6FEB26D5D3219DelayReadyOperation_context) = 0LL;
    swift_release();
  }

id NSOperationQueue.DelayReadyOperation.isReady.getter()
{
  v2.receiver = v0;
  v2.super_class = (Class)swift_getObjectType();
  id result = objc_msgSendSuper2(&v2, sel_isReady);
  if ((_DWORD)result) {
    return (id)v0[OBJC_IVAR____TtCE10FoundationCSo16NSOperationQueueP33_0ECEE0A75E2DD5EDFED9A6FEB26D5D3219DelayReadyOperation_readyFromAfter];
  }
  return result;
}

id key path getter for NSOperationQueue.DelayReadyOperation.isReady : NSOperationQueue.DelayReadyOperation@<X0>( id *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v3 = *a1;
  v6.receiver = *a1;
  v6.super_class = (Class)type metadata accessor for NSOperationQueue.DelayReadyOperation();
  id result = objc_msgSendSuper2(&v6, sel_isReady);
  if ((_DWORD)result) {
    char v5 = v3[OBJC_IVAR____TtCE10FoundationCSo16NSOperationQueueP33_0ECEE0A75E2DD5EDFED9A6FEB26D5D3219DelayReadyOperation_readyFromAfter];
  }
  else {
    char v5 = 0;
  }
  *a2 = v5;
  return result;
}

id protocol witness for Cancellable.cancel() in conformance NSOperationQueue.DelayReadyOperation( objc_class *a1)
{
  uint64_t v3 = (char *)*v1;
  uint64_t v4 = &v3[OBJC_IVAR____TtCE10FoundationCSo16NSOperationQueueP33_0ECEE0A75E2DD5EDFED9A6FEB26D5D3219DelayReadyOperation_action];
  uint64_t v5 = *(void *)&v3[OBJC_IVAR____TtCE10FoundationCSo16NSOperationQueueP33_0ECEE0A75E2DD5EDFED9A6FEB26D5D3219DelayReadyOperation_action];
  *(void *)uint64_t v4 = 0LL;
  *((void *)v4 + 1) = 0LL;
  outlined consume of (@escaping @callee_guaranteed (@in_guaranteed URL, @guaranteed Error) -> (@unowned Bool))?(v5);
  objc_super v6 = *(void **)&v3[OBJC_IVAR____TtCE10FoundationCSo16NSOperationQueueP33_0ECEE0A75E2DD5EDFED9A6FEB26D5D3219DelayReadyOperation_queue];
  *(void *)&v3[OBJC_IVAR____TtCE10FoundationCSo16NSOperationQueueP33_0ECEE0A75E2DD5EDFED9A6FEB26D5D3219DelayReadyOperation_queue] = 0LL;

  *(void *)&v3[OBJC_IVAR____TtCE10FoundationCSo16NSOperationQueueP33_0ECEE0A75E2DD5EDFED9A6FEB26D5D3219DelayReadyOperation_context] = 0LL;
  swift_release();
  v8.receiver = v3;
  v8.super_class = a1;
  return -[objc_class cancel](&v8, sel_cancel);
}

void NSOperationQueue.schedule(options:_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = swift_allocObject();
  *(void *)(v6 + 16) = a2;
  *(void *)(v6 + 24) = a3;
  v10[4] = partial apply for closure #1 in NSRunLoop.schedule(options:_:);
  v10[5] = v6;
  v10[0] = MEMORY[0x1895F87A8];
  v10[1] = 1107296256LL;
  void v10[2] = thunk for @escaping @callee_guaranteed @Sendable () -> ();
  v10[3] = &block_descriptor_9;
  uint64_t v7 = _Block_copy(v10);
  objc_super v8 = (void *)objc_opt_self();
  swift_retain();
  id v9 = objc_msgSend(v8, sel_blockOperationWithBlock_, v7);
  _Block_release(v7);
  swift_release();
  objc_msgSend(v3, sel_addOperation_, v9);
}

uint64_t sub_18316C0CC()
{
  return swift_deallocObject();
}

uint64_t block_copy_helper_9(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_9()
{
  return swift_release();
}

void NSOperationQueue.schedule(after:tolerance:options:_:)( uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6 = v5;
  uint64_t v10 = *a1;
  objc_allocWithZone((Class)type metadata accessor for NSOperationQueue.DelayReadyOperation());
  swift_retain();
  id v9 = specialized NSOperationQueue.DelayReadyOperation.init(_:after:)(a4, a5, (double *)&v10);
  swift_release();
  objc_msgSend(v6, sel_addOperation_, v9);
}

uint64_t type metadata accessor for NSOperationQueue.DelayReadyOperation()
{
  return objc_opt_self();
}

void NSOperationQueue.schedule(after:interval:tolerance:options:_:)( uint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X4>, uint64_t a4@<X5>, uint64_t *a5@<X8>)
{
  uint64_t v9 = *a1;
  uint64_t v10 = *a2;
  type metadata accessor for NSOperationQueue.DelayReadyOperation.CancellationContext();
  uint64_t v11 = swift_allocObject();
  uint64_t v12 = (_DWORD *)swift_slowAlloc();
  *(void *)(v11 + 16) = v12;
  swift_unknownObjectWeakInit();
  *uint64_t v12 = 0;
  uint64_t v18 = v10;
  uint64_t v19 = v9;
  objc_allocWithZone((Class)type metadata accessor for NSOperationQueue.DelayReadyOperation());
  swift_retain();
  swift_retain();
  id v13 = v5;
  id v14 = specialized NSOperationQueue.DelayReadyOperation.init(repeating:after:queue:interval:context:)( a3,  a4,  (double *)&v19,  v5,  &v18,  v11);
  swift_release();

  swift_release();
  objc_msgSend(v13, sel_addOperation_, v14, v18, v19);
  uint64_t v19 = v11;
  uint64_t v15 = type metadata accessor for AnyCancellable();
  swift_allocObject();
  lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( &lazy protocol witness table cache variable for type NSOperationQueue.DelayReadyOperation.CancellationContext and conformance NSOperationQueue.DelayReadyOperation.CancellationContext,  (uint64_t (*)(uint64_t))type metadata accessor for NSOperationQueue.DelayReadyOperation.CancellationContext,  (uint64_t)&protocol conformance descriptor for NSOperationQueue.DelayReadyOperation.CancellationContext);
  swift_retain();
  uint64_t v16 = AnyCancellable.init<A>(_:)();
  uint64_t v17 = MEMORY[0x189602280];
  a5[3] = v15;
  a5[4] = v17;
  swift_release();

  *a5 = v16;
}

double NSOperationQueue.now.getter@<D0>(double *a1@<X8>)
{
  uint64_t v4 = *MEMORY[0x1895F89C0];
  __tp.tv_sec = 0LL;
  __tp.tv_nsec = 0LL;
  clock_gettime(_CLOCK_REALTIME, &__tp);
  double result = (double)__tp.tv_sec + -978307200.0 + (double)__tp.tv_nsec * 0.000000001;
  *a1 = result;
  return result;
}

void NSOperationQueue.minimumTolerance.getter(void *a1@<X8>)
{
  *a1 = 0LL;
}

void protocol witness for Scheduler.schedule(options:_:) in conformance NSOperationQueue( uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *v3;
  uint64_t v7 = swift_allocObject();
  *(void *)(v7 + 16) = a2;
  *(void *)(v7 + 24) = a3;
  v11[4] = closure #1 in NSRunLoop.schedule(options:_:)partial apply;
  v11[5] = v7;
  v11[0] = MEMORY[0x1895F87A8];
  v11[1] = 1107296256LL;
  v11[2] = thunk for @escaping @callee_guaranteed @Sendable () -> ();
  v11[3] = &block_descriptor_13_1;
  objc_super v8 = _Block_copy(v11);
  uint64_t v9 = (void *)objc_opt_self();
  swift_retain();
  id v10 = objc_msgSend(v9, sel_blockOperationWithBlock_, v8);
  _Block_release(v8);
  swift_release();
  objc_msgSend(v6, sel_addOperation_, v10);
}

void protocol witness for Scheduler.schedule(after:tolerance:options:_:) in conformance NSOperationQueue( uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  objc_super v8 = *v5;
  uint64_t v11 = *a1;
  id v9 = objc_allocWithZone((Class)type metadata accessor for NSOperationQueue.DelayReadyOperation());
  swift_retain();
  id v10 = specialized NSOperationQueue.DelayReadyOperation.init(_:after:)(a4, a5, (double *)&v11);
  swift_release();
  objc_msgSend(v8, sel_addOperation_, v10);
}

void protocol witness for Scheduler.schedule(after:interval:tolerance:options:_:) in conformance NSOperationQueue( uint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X4>, uint64_t a4@<X5>, uint64_t *a5@<X8>)
{
}

id specialized NSOperationQueue.DelayReadyOperation.init(_:after:)(uint64_t a1, uint64_t a2, double *a3)
{
  uint64_t v21 = *MEMORY[0x1895F89C0];
  uint64_t ObjectType = (objc_class *)swift_getObjectType();
  uint64_t v8 = type metadata accessor for DispatchTime();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x1895F8858](v8);
  uint64_t v11 = (char *)&v18 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  double v12 = *a3;
  id v13 = &v3[OBJC_IVAR____TtCE10FoundationCSo16NSOperationQueueP33_0ECEE0A75E2DD5EDFED9A6FEB26D5D3219DelayReadyOperation_action];
  *(void *)&v3[OBJC_IVAR____TtCE10FoundationCSo16NSOperationQueueP33_0ECEE0A75E2DD5EDFED9A6FEB26D5D3219DelayReadyOperation_queue] = 0LL;
  *(void *)&v3[OBJC_IVAR____TtCE10FoundationCSo16NSOperationQueueP33_0ECEE0A75E2DD5EDFED9A6FEB26D5D3219DelayReadyOperation_context] = 0LL;
  *id v13 = a1;
  v13[1] = a2;
  v3[OBJC_IVAR____TtCE10FoundationCSo16NSOperationQueueP33_0ECEE0A75E2DD5EDFED9A6FEB26D5D3219DelayReadyOperation_readyFromAfter] = 0;
  *(void *)&v3[OBJC_IVAR____TtCE10FoundationCSo16NSOperationQueueP33_0ECEE0A75E2DD5EDFED9A6FEB26D5D3219DelayReadyOperation_interval] = 0LL;
  v20.receiver = v3;
  v20.super_class = ObjectType;
  swift_retain();
  id v14 = objc_msgSendSuper2(&v20, sel_init);
  __tp.tv_sec = 0LL;
  __tp.tv_nsec = 0LL;
  id v15 = v14;
  clock_gettime(_CLOCK_REALTIME, &__tp);
  double v16 = v12 - ((double)__tp.tv_sec + -978307200.0 + (double)__tp.tv_nsec * 0.000000001);
  static DispatchTime.now()();
  NSOperationQueue.DelayReadyOperation.becomeReady(after:from:)((uint64_t)v11, v16);

  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  return v15;
}

uint64_t type metadata accessor for NSOperationQueue.DelayReadyOperation.CancellationContext()
{
  return objc_opt_self();
}

id specialized NSOperationQueue.DelayReadyOperation.init(repeating:after:queue:interval:context:)( uint64_t a1, uint64_t a2, double *a3, void *a4, uint64_t *a5, uint64_t a6)
{
  uint64_t v7 = v6;
  uint64_t v31 = *MEMORY[0x1895F89C0];
  uint64_t ObjectType = (objc_class *)swift_getObjectType();
  uint64_t v28 = type metadata accessor for DispatchTime();
  uint64_t v15 = *(void *)(v28 - 8);
  MEMORY[0x1895F8858](v28);
  uint64_t v17 = (char *)&v28 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  double v18 = *a3;
  uint64_t v19 = *a5;
  objc_super v20 = &v7[OBJC_IVAR____TtCE10FoundationCSo16NSOperationQueueP33_0ECEE0A75E2DD5EDFED9A6FEB26D5D3219DelayReadyOperation_action];
  uint64_t v21 = OBJC_IVAR____TtCE10FoundationCSo16NSOperationQueueP33_0ECEE0A75E2DD5EDFED9A6FEB26D5D3219DelayReadyOperation_queue;
  uint64_t v22 = OBJC_IVAR____TtCE10FoundationCSo16NSOperationQueueP33_0ECEE0A75E2DD5EDFED9A6FEB26D5D3219DelayReadyOperation_context;
  *objc_super v20 = a1;
  v20[1] = a2;
  v7[OBJC_IVAR____TtCE10FoundationCSo16NSOperationQueueP33_0ECEE0A75E2DD5EDFED9A6FEB26D5D3219DelayReadyOperation_readyFromAfter] = 0;
  *(void *)&v7[v21] = a4;
  *(void *)&v7[OBJC_IVAR____TtCE10FoundationCSo16NSOperationQueueP33_0ECEE0A75E2DD5EDFED9A6FEB26D5D3219DelayReadyOperation_interval] = v19;
  *(void *)&v7[v22] = a6;
  v30.receiver = v7;
  v30.super_class = ObjectType;
  swift_retain();
  id v23 = a4;
  swift_retain();
  id v24 = objc_msgSendSuper2(&v30, sel_init);
  swift_unknownObjectWeakAssign();
  __tp.tv_sec = 0LL;
  __tp.tv_nsec = 0LL;
  id v25 = v24;
  clock_gettime(_CLOCK_REALTIME, &__tp);
  double v26 = v18 - ((double)__tp.tv_sec + -978307200.0 + (double)__tp.tv_nsec * 0.000000001);
  static DispatchTime.now()();
  NSOperationQueue.DelayReadyOperation.becomeReady(after:from:)((uint64_t)v17, v26);

  (*(void (**)(char *, uint64_t))(v15 + 8))(v17, v28);
  return v25;
}

unint64_t lazy protocol witness table accessor for type NSOperationQueue.SchedulerTimeType.Stride and conformance NSOperationQueue.SchedulerTimeType.Stride()
{
  unint64_t result = lazy protocol witness table cache variable for type NSOperationQueue.SchedulerTimeType.Stride and conformance NSOperationQueue.SchedulerTimeType.Stride;
  if (!lazy protocol witness table cache variable for type NSOperationQueue.SchedulerTimeType.Stride and conformance NSOperationQueue.SchedulerTimeType.Stride)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for NSOperationQueue.SchedulerTimeType.Stride,  &type metadata for NSOperationQueue.SchedulerTimeType.Stride);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type NSOperationQueue.SchedulerTimeType.Stride and conformance NSOperationQueue.SchedulerTimeType.Stride);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type NSOperationQueue.SchedulerTimeType.Stride and conformance NSOperationQueue.SchedulerTimeType.Stride;
  if (!lazy protocol witness table cache variable for type NSOperationQueue.SchedulerTimeType.Stride and conformance NSOperationQueue.SchedulerTimeType.Stride)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for NSOperationQueue.SchedulerTimeType.Stride,  &type metadata for NSOperationQueue.SchedulerTimeType.Stride);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type NSOperationQueue.SchedulerTimeType.Stride and conformance NSOperationQueue.SchedulerTimeType.Stride);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type NSOperationQueue.SchedulerTimeType.Stride and conformance NSOperationQueue.SchedulerTimeType.Stride;
  if (!lazy protocol witness table cache variable for type NSOperationQueue.SchedulerTimeType.Stride and conformance NSOperationQueue.SchedulerTimeType.Stride)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for NSOperationQueue.SchedulerTimeType.Stride,  &type metadata for NSOperationQueue.SchedulerTimeType.Stride);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type NSOperationQueue.SchedulerTimeType.Stride and conformance NSOperationQueue.SchedulerTimeType.Stride);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type NSOperationQueue.SchedulerTimeType.Stride and conformance NSOperationQueue.SchedulerTimeType.Stride;
  if (!lazy protocol witness table cache variable for type NSOperationQueue.SchedulerTimeType.Stride and conformance NSOperationQueue.SchedulerTimeType.Stride)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for NSOperationQueue.SchedulerTimeType.Stride,  &type metadata for NSOperationQueue.SchedulerTimeType.Stride);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type NSOperationQueue.SchedulerTimeType.Stride and conformance NSOperationQueue.SchedulerTimeType.Stride);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type NSOperationQueue.SchedulerTimeType.Stride and conformance NSOperationQueue.SchedulerTimeType.Stride;
  if (!lazy protocol witness table cache variable for type NSOperationQueue.SchedulerTimeType.Stride and conformance NSOperationQueue.SchedulerTimeType.Stride)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for NSOperationQueue.SchedulerTimeType.Stride,  &type metadata for NSOperationQueue.SchedulerTimeType.Stride);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type NSOperationQueue.SchedulerTimeType.Stride and conformance NSOperationQueue.SchedulerTimeType.Stride);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type NSOperationQueue.SchedulerTimeType.Stride and conformance NSOperationQueue.SchedulerTimeType.Stride;
  if (!lazy protocol witness table cache variable for type NSOperationQueue.SchedulerTimeType.Stride and conformance NSOperationQueue.SchedulerTimeType.Stride)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for NSOperationQueue.SchedulerTimeType.Stride,  &type metadata for NSOperationQueue.SchedulerTimeType.Stride);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type NSOperationQueue.SchedulerTimeType.Stride and conformance NSOperationQueue.SchedulerTimeType.Stride);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type NSOperationQueue.SchedulerTimeType.Stride and conformance NSOperationQueue.SchedulerTimeType.Stride;
  if (!lazy protocol witness table cache variable for type NSOperationQueue.SchedulerTimeType.Stride and conformance NSOperationQueue.SchedulerTimeType.Stride)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for NSOperationQueue.SchedulerTimeType.Stride,  &type metadata for NSOperationQueue.SchedulerTimeType.Stride);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type NSOperationQueue.SchedulerTimeType.Stride and conformance NSOperationQueue.SchedulerTimeType.Stride);
  }

  return result;
}

unint64_t lazy protocol witness table accessor for type NSOperationQueue.SchedulerTimeType and conformance NSOperationQueue.SchedulerTimeType()
{
  unint64_t result = lazy protocol witness table cache variable for type NSOperationQueue.SchedulerTimeType and conformance NSOperationQueue.SchedulerTimeType;
  if (!lazy protocol witness table cache variable for type NSOperationQueue.SchedulerTimeType and conformance NSOperationQueue.SchedulerTimeType)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for NSOperationQueue.SchedulerTimeType,  &type metadata for NSOperationQueue.SchedulerTimeType);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type NSOperationQueue.SchedulerTimeType and conformance NSOperationQueue.SchedulerTimeType);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type NSOperationQueue.SchedulerTimeType and conformance NSOperationQueue.SchedulerTimeType;
  if (!lazy protocol witness table cache variable for type NSOperationQueue.SchedulerTimeType and conformance NSOperationQueue.SchedulerTimeType)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for NSOperationQueue.SchedulerTimeType,  &type metadata for NSOperationQueue.SchedulerTimeType);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type NSOperationQueue.SchedulerTimeType and conformance NSOperationQueue.SchedulerTimeType);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type NSOperationQueue.SchedulerTimeType and conformance NSOperationQueue.SchedulerTimeType;
  if (!lazy protocol witness table cache variable for type NSOperationQueue.SchedulerTimeType and conformance NSOperationQueue.SchedulerTimeType)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for NSOperationQueue.SchedulerTimeType,  &type metadata for NSOperationQueue.SchedulerTimeType);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type NSOperationQueue.SchedulerTimeType and conformance NSOperationQueue.SchedulerTimeType);
  }

  return result;
}

ValueMetadata *type metadata accessor for NSOperationQueue.SchedulerTimeType()
{
  return &type metadata for NSOperationQueue.SchedulerTimeType;
}

ValueMetadata *type metadata accessor for NSOperationQueue.SchedulerTimeType.Stride()
{
  return &type metadata for NSOperationQueue.SchedulerTimeType.Stride;
}

ValueMetadata *type metadata accessor for NSOperationQueue.SchedulerOptions()
{
  return &type metadata for NSOperationQueue.SchedulerOptions;
}

void *type metadata accessor for NSOperationQueue.SchedulerTimeType.CodingKeys()
{
  return &unk_189C7E448;
}

uint64_t storeEnumTagSinglePayload for NSOperationQueue.SchedulerTimeType.CodingKeys( uint64_t a1, int a2, int a3)
{
  else {
    int v3 = 2;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2) {
    return ((uint64_t (*)(void))((char *)sub_18316CC3C + 4 * asc_1837AC9F0[v4]))();
  }
  else {
    return ((uint64_t (*)(void))((char *)sub_18316CC5C + 4 * byte_1837AC9F5[v4]))();
  }
}

_BYTE *sub_18316CC3C(_BYTE *result, char a2)
{
  *unint64_t result = a2;
  return result;
}

_BYTE *sub_18316CC5C(_BYTE *result)
{
  *unint64_t result = 0;
  return result;
}

_DWORD *sub_18316CC64(_DWORD *result, int a2)
{
  *unint64_t result = a2;
  return result;
}

_WORD *sub_18316CC6C(_WORD *result, __int16 a2)
{
  *unint64_t result = a2;
  return result;
}

_WORD *sub_18316CC74(_WORD *result)
{
  *unint64_t result = 0;
  return result;
}

_DWORD *sub_18316CC7C(_DWORD *result)
{
  *unint64_t result = 0;
  return result;
}

void *type metadata accessor for NSOperationQueue.SchedulerTimeType.Stride.CodingKeys()
{
  return &unk_189C7E4D8;
}

uint64_t sub_18316CE48()
{
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in NSOperationQueue.DelayReadyOperation.becomeReady(after:from:)()
{
  return closure #1 in NSOperationQueue.DelayReadyOperation.becomeReady(after:from:)(v0);
}

unint64_t type metadata accessor for OS_dispatch_queue()
{
  unint64_t result = lazy cache variable for type metadata for OS_dispatch_queue;
  if (!lazy cache variable for type metadata for OS_dispatch_queue)
  {
    objc_opt_self();
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for OS_dispatch_queue);
  }

  return result;
}

uint64_t lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]( unint64_t *a1, uint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    uint64_t v4 = __swift_instantiateConcreteTypeFromMangledNameAbstract(a2);
    uint64_t result = MEMORY[0x186E20D4C](MEMORY[0x189618470], v4);
    atomic_store(result, a1);
  }

  return result;
}

uint64_t Date.formatted<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *v3;
  return (*(uint64_t (**)(uint64_t *))(a3 + 48))(&v5);
}

double Date.init<A>(_:strategy:)@<D0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, double *a5@<X8>)
{
  (*(void (**)(double *__return_ptr, uint64_t, uint64_t, uint64_t))(a4 + 48))(&v12, a1, a3, a4);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(a3 - 8) + 8LL))(a2, a3);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 8LL))(a1, AssociatedTypeWitness);
  if (!v5)
  {
    double result = v12;
    *a5 = v12;
  }

  return result;
}

double Date.init<A, B>(_:strategy:)@<D0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, double *a6@<X8>)
{
  double v18 = a6;
  uint64_t v12 = *(void *)(a4 - 8);
  MEMORY[0x1895F8858](a1);
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))( (char *)&v17 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL),  a1,  v14);
  v19[0] = String.init<A>(_:)();
  v19[1] = v15;
  (*(void (**)(double *__return_ptr, void *, uint64_t, uint64_t))(a5 + 48))(&v20, v19, a3, a5);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(a3 - 8) + 8LL))(a2, a3);
  (*(void (**)(uint64_t, uint64_t))(v12 + 8))(a1, a4);
  swift_bridgeObjectRelease();
  if (!v6)
  {
    double result = v20;
    *double v18 = v20;
  }

  return result;
}

uint64_t getEnumTagSinglePayload for BufferView(uint64_t a1, int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 != 1 && *(_BYTE *)(a1 + 16)) {
    return (*(_DWORD *)a1 + 2);
  }
  if (*(void *)a1) {
    int v3 = -1;
  }
  else {
    int v3 = 0;
  }
  return (v3 + 1);
}

uint64_t storeEnumTagSinglePayload for BufferView(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 1)
  {
    *(void *)double result = a2 - 2;
    *(void *)(result + 8) = 0LL;
    if (a3 >= 2) {
      *(_BYTE *)(result + 16) = 1;
    }
  }

  else
  {
    if (a3 >= 2) {
      *(_BYTE *)(result + 16) = 0;
    }
    if (a2) {
      *(void *)double result = 0LL;
    }
  }

  return result;
}

uint64_t type metadata accessor for BufferView(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for BufferView);
}

void base witness table accessor for BidirectionalCollection in BufferView<A>()
{
}

uint64_t associated type witness table accessor for Collection.Indices : RandomAccessCollection in BufferView<A>( uint64_t a1, uint64_t a2, uint64_t a3)
{
  return associated type witness table accessor for Collection.Indices : RandomAccessCollection in BufferView<A>( a1,  a2,  a3,  MEMORY[0x189618A58]);
}

void associated type witness table accessor for Collection.SubSequence : RandomAccessCollection in BufferView<A>()
{
}

uint64_t specialized BufferView.withUnsafeRawPointer<A>(_:)( const char *a1, uint64_t a2, unint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6)
{
  if (a2 <= 2 || (uint64_t result = strncmp(a1, "NaN", 3uLL), (_DWORD)result))
  {
    uint64_t v10 = StaticString.description.getter();
    uint64_t v12 = v11;
    unint64_t v13 = specialized static JSONError.SourceLocation.sourceLocation(at:fullSource:)(a3, a5, a6);
    uint64_t v15 = v14;
    uint64_t v17 = v16;
    lazy protocol witness table accessor for type JSONError and conformance JSONError();
    swift_allocError();
    *(void *)uint64_t v18 = v10;
    *(void *)(v18 + 8) = v12;
    *(void *)(v18 + 16) = v13;
    *(void *)(v18 + 24) = v15;
    *(void *)(v18 + 32) = v17;
    *(void *)(v18 + 40) = 0LL;
    *(_BYTE *)(v18 + 48) = 5;
    return swift_willThrow();
  }

  return result;
}

  ;
}

double specialized BufferView.withUnsafePointer<A>(_:)(const char *a1)
{
  v2[1] = *(char **)MEMORY[0x1895F89C0];
  v2[0] = 0LL;
  return _stringshims_strtod_l(a1, v2, 0LL);
}

uint64_t specialized BufferView.withUnsafePointer<A>(_:)(const char *a1, size_t a2)
{
  return _stringshims_strncasecmp_l(a1, "0x", a2, 0LL);
}

uint64_t BufferView.withContiguousStorageIfAvailable<A>(_:)@<X0>( uint64_t (*a1)(uint64_t, uint64_t)@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X5>, uint64_t a5@<X8>)
{
  uint64_t result = a1(a2, a3);
  if (!v5) {
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(a4 - 8) + 56LL))(a5, 0LL, 1LL, a4);
  }
  return result;
}

void protocol witness for Sequence.makeIterator() in conformance BufferView<A>(void *a1@<X8>)
{
  *a1 = v2;
  a1[1] = v3;
}

uint64_t protocol witness for Sequence.underestimatedCount.getter in conformance BufferView<A>(uint64_t a1)
{
  return Collection.underestimatedCount.getter();
}

uint64_t protocol witness for Sequence._copyToContiguousArray() in conformance BufferView<A>(uint64_t a1)
{
  uint64_t v3 = v1[1];
  v6[0] = *v1;
  v6[1] = v3;
  uint64_t v4 = MEMORY[0x186E20D4C](&protocol conformance descriptor for BufferView<A>, a1);
  return specialized Collection._copyToContiguousArray()(v6, a1, v4);
}

uint64_t protocol witness for Sequence._copyContents(initializing:) in conformance BufferView<A>( uint64_t a1, uint64_t a2)
{
  return MEMORY[0x186E1B9C4](a1, a2);
}

uint64_t protocol witness for Sequence.withContiguousStorageIfAvailable<A>(_:) in conformance BufferView<A>@<X0>( uint64_t (*a1)(uint64_t, uint64_t)@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  return BufferView.withContiguousStorageIfAvailable<A>(_:)(a1, *v3, v3[1], a2, a3);
}

uint64_t UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)@<X0>( uint64_t isStackAllocationSafe@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v5 = *(void *)(a3 - 8);
  uint64_t v6 = *(unsigned __int8 *)(v5 + 80);
  if ((v6 & (unint64_t)(v6 + 1)) != 0)
  {
    __break(1u);
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }

  uint64_t v9 = isStackAllocationSafe;
  if (v6 > 0xF
    || *(uint64_t *)(v5 + 72) >= 1025
    && (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), !(_DWORD)isStackAllocationSafe))
  {
    uint64_t v14 = (void *)swift_slowAlloc();
    size_t v15 = *(void *)(v5 + 64);
    if ((v15 & 0x8000000000000000LL) == 0)
    {
      uint64_t v16 = v14;
      memcpy(v14, (const void *)(a2 + v9), v15);
      (*(void (**)(uint64_t, void *, uint64_t))(v5 + 16))(a4, v16, a3);
      goto LABEL_12;
    }

    goto LABEL_10;
  }

  MEMORY[0x1895F8858](isStackAllocationSafe);
  uint64_t v11 = (char *)&v17 - v10;
  size_t v12 = *(void *)(v5 + 64);
  if ((v12 & 0x8000000000000000LL) != 0)
  {
LABEL_11:
    __break(1u);
LABEL_12:
    JUMPOUT(0x186E20E60LL);
  }

  memcpy((char *)&v17 - v10, (const void *)(a2 + v9), v12);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v5 + 16))(a4, v11, a3);
}

uint64_t protocol witness for Collection.endIndex.getter in conformance BufferView<A>@<X0>( uint64_t result@<X0>, void *a2@<X8>)
{
  *a2 = *v2 + *(void *)(*(void *)(*(void *)(result + 16) - 8LL) + 72LL) * v2[1];
  return result;
}

void (*protocol witness for Collection.subscript.read in conformance BufferView<A>( uint64_t *a1, uint64_t *a2, uint64_t a3))(void *a1)
{
  uint64_t v6 = *(void *)(a3 + 16);
  uint64_t v7 = *(void *)(v6 - 8);
  *a1 = v6;
  a1[1] = v7;
  uint64_t result = (void (*)(void *))malloc(*(void *)(v7 + 64));
  a1[2] = (uint64_t)result;
  uint64_t v9 = *(void *)(v7 + 72);
  if (!v9)
  {
    __break(1u);
LABEL_18:
    __break(1u);
LABEL_19:
    __break(1u);
LABEL_20:
    __break(1u);
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }

  uint64_t v10 = *a2;
  uint64_t v11 = *a2 - *v3;
  if (v11 == 0x8000000000000000LL && v9 == -1) {
    goto LABEL_20;
  }
  if (v11 / v9 < 0) {
    goto LABEL_18;
  }
  uint64_t v13 = *v3 + v9 * v3[1] - v10;
  if (v9 == -1 && v13 == 0x8000000000000000LL) {
    goto LABEL_21;
  }
  if (v13 / v9 < 1) {
    goto LABEL_19;
  }
  int v15 = *(_DWORD *)(v7 + 80);
  if ((v15 & 0x10000) == 0)
  {
    UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0LL, v10, v6, (uint64_t)result);
    return AttributedString.Runs.AttributesSlice1.subscript.read;
  }

  if ((v15 & v10) == 0)
  {
    (*(void (**)(void (*)(void *), uint64_t, uint64_t))(v7 + 16))(result, *a2, v6);
    return AttributedString.Runs.AttributesSlice1.subscript.read;
  }

uint64_t *protocol witness for Collection.subscript.getter in conformance BufferView<A>@<X0>( uint64_t *result@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v4 = *(void *)(*(void *)(a2 + 16) - 8LL);
  uint64_t v5 = *(void *)(v4 + 72);
  if (!v5)
  {
    __break(1u);
LABEL_17:
    __break(1u);
LABEL_18:
    __break(1u);
LABEL_19:
    __break(1u);
LABEL_20:
    __break(1u);
LABEL_21:
    __break(1u);
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }

  uint64_t v6 = *result;
  uint64_t v7 = *result - *v3;
  if (v7 == 0x8000000000000000LL && v5 == -1) {
    goto LABEL_20;
  }
  if (v7 / v5 < 0) {
    goto LABEL_17;
  }
  uint64_t v9 = result[1];
  if (v9 - v6 == 0x8000000000000000LL && v5 == -1) {
    goto LABEL_21;
  }
  uint64_t v10 = (v9 - v6) / v5;
  if (v10 < 0) {
    goto LABEL_18;
  }
  uint64_t v11 = *v3 + v5 * v3[1] - v9;
  if (v5 == -1 && v11 == 0x8000000000000000LL) {
    goto LABEL_22;
  }
  if (v11 / v5 < 0) {
    goto LABEL_19;
  }
  int v12 = *(_DWORD *)(v4 + 80);
  if ((v12 & 0x10000) == 0 || (v12 & (v9 | v6)) == 0)
  {
    *a3 = v6;
    a3[1] = v10;
    return result;
  }

double protocol witness for Collection.indices.getter in conformance BufferView<A>@<D0>( uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, _OWORD *a4@<X8>)
{
  uint64_t v5 = type metadata accessor for BufferViewIndex(0LL, *(void *)(a1 + 16), a2, a3);
  MEMORY[0x186E20D4C](&protocol conformance descriptor for BufferViewIndex<A>, v5);
  Range.init(uncheckedBounds:)();
  double result = *(double *)&v7;
  *a4 = v7;
  return result;
}

uint64_t protocol witness for Collection.count.getter in conformance BufferView<A>()
{
  return *(void *)(v0 + 8);
}

uint64_t protocol witness for Collection._failEarlyRangeCheck(_:bounds:) in conformance BufferView<A>( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return specialized Collection._failEarlyRangeCheck(_:bounds:)( a1,  a2,  a3,  a4,  (uint64_t (*)(void, uint64_t, uint64_t))MEMORY[0x189618A18],  (uint64_t (*)(char *, char *, uint64_t, uint64_t))MEMORY[0x189617B40]);
}

{
  return specialized Collection._failEarlyRangeCheck(_:bounds:)( a1,  a2,  a3,  a4,  (uint64_t (*)(void, uint64_t, uint64_t))MEMORY[0x189617BE0],  (uint64_t (*)(char *, char *, uint64_t, uint64_t))MEMORY[0x189617B50]);
}

void *protocol witness for Collection.index(after:) in conformance BufferView<A>@<X0>( void *result@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  *a3 = *result + *(void *)(*(void *)(*(void *)(a2 + 16) - 8LL) + 72LL);
  return result;
}

void *protocol witness for Collection.formIndex(after:) in conformance BufferView<A>( void *result, uint64_t a2)
{
  *result += *(void *)(*(void *)(*(void *)(a2 + 16) - 8LL) + 72LL);
  return result;
}

void *protocol witness for BidirectionalCollection.index(before:) in conformance BufferView<A>@<X0>( void *result@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  *a3 = *result - *(void *)(*(void *)(*(void *)(a2 + 16) - 8LL) + 72LL);
  return result;
}

void *protocol witness for BidirectionalCollection.formIndex(before:) in conformance BufferView<A>( void *result, uint64_t a2)
{
  *result -= *(void *)(*(void *)(*(void *)(a2 + 16) - 8LL) + 72LL);
  return result;
}

void *protocol witness for BidirectionalCollection.index(_:offsetBy:) in conformance BufferView<A>@<X0>( void *result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  *a4 = *result + *(void *)(*(void *)(*(void *)(a3 + 16) - 8LL) + 72LL) * a2;
  return result;
}

uint64_t protocol witness for BidirectionalCollection.index(_:offsetBy:limitedBy:) in conformance BufferView<A>( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return RandomAccessCollection.index(_:offsetBy:limitedBy:)();
}

void *protocol witness for Collection.distance(from:to:) in conformance BufferView<A>( void *result, void *a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8LL) + 72LL);
  if (v3)
  {
    uint64_t v4 = *a2 - *result;
    if (v4 != 0x8000000000000000LL || v3 != -1) {
      return (void *)(v4 / v3);
    }
  }

  else
  {
    __break(1u);
  }

  __break(1u);
  return result;
}

void base witness table accessor for Collection in BufferView<A>()
{
}

uint64_t associated type witness table accessor for Collection.Indices : BidirectionalCollection in BufferView<A>( uint64_t a1, uint64_t a2, uint64_t a3)
{
  return associated type witness table accessor for Collection.Indices : RandomAccessCollection in BufferView<A>( a1,  a2,  a3,  MEMORY[0x189618A40]);
}

void base witness table accessor for Sequence in BufferView<A>()
{
}

void associated type witness table accessor for Collection.Index : Comparable in BufferView<A>()
{
}

uint64_t associated type witness table accessor for Collection.Indices : Collection in BufferView<A>( uint64_t a1, uint64_t a2, uint64_t a3)
{
  return associated type witness table accessor for Collection.Indices : RandomAccessCollection in BufferView<A>( a1,  a2,  a3,  MEMORY[0x189618A60]);
}

uint64_t associated type witness table accessor for Collection.Indices : RandomAccessCollection in BufferView<A>( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v7[0] = MEMORY[0x186E20D4C](&protocol conformance descriptor for BufferViewIndex<A>, *(void *)(a1 + 16));
  v7[1] = lazy protocol witness table accessor for type Int and conformance Int();
  return MEMORY[0x186E20D4C](a4, a1, v7);
}

void associated type witness table accessor for Sequence.Iterator : IteratorProtocol in BufferView<A>()
{
}

uint64_t specialized Collection._failEarlyRangeCheck(_:bounds:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return specialized Collection._failEarlyRangeCheck(_:bounds:)( a1,  a2,  a3,  a4,  (uint64_t (*)(void, uint64_t, uint64_t))MEMORY[0x189618A18],  (uint64_t (*)(char *, char *, uint64_t, uint64_t))MEMORY[0x189617B40]);
}

{
  return specialized Collection._failEarlyRangeCheck(_:bounds:)( a1,  a2,  a3,  a4,  (uint64_t (*)(void, uint64_t, uint64_t))MEMORY[0x189617BE0],  (uint64_t (*)(char *, char *, uint64_t, uint64_t))MEMORY[0x189617B50]);
}

uint64_t specialized Collection._failEarlyRangeCheck(_:bounds:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void, uint64_t, uint64_t), uint64_t (*a6)(char *, char *, uint64_t, uint64_t))
{
  id v23 = a6;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v11 = a5(0LL, AssociatedTypeWitness, AssociatedConformanceWitness);
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = MEMORY[0x1895F8858](v11);
  int v15 = (char *)&v22 - v14;
  uint64_t v16 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1895F8858](v13);
  uint64_t v18 = (char *)&v22 - v17;
  char v19 = dispatch thunk of static Comparable.<= infix(_:_:)();
  (*(void (**)(char *, uint64_t, uint64_t))(v16 + 16))(v18, a1, AssociatedTypeWitness);
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v15, a2, v11);
  if ((v19 & 1) == 0)
  {
    (*(void (**)(char *, uint64_t))(v12 + 8))(v15, v11);
    uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v16 + 8))(v18, AssociatedTypeWitness);
    goto LABEL_5;
  }

  char v20 = v23(v18, &v15[*(int *)(v11 + 36)], AssociatedTypeWitness, AssociatedConformanceWitness);
  (*(void (**)(char *, uint64_t))(v12 + 8))(v15, v11);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v16 + 8))(v18, AssociatedTypeWitness);
  if ((v20 & 1) == 0) {
LABEL_5:
  }
    __break(1u);
  return result;
}

uint64_t specialized Collection._failEarlyRangeCheck(_:bounds:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Range();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = MEMORY[0x1895F8858](v4);
  uint64_t v8 = (char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v6);
  uint64_t v10 = (char *)&v17 - v9;
  char v11 = dispatch thunk of static Comparable.<= infix(_:_:)();
  uint64_t v12 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
  v12(v10, a1, v4);
  v12(v8, a2, v4);
  if ((v11 & 1) == 0)
  {
    uint64_t v16 = *(void (**)(char *, uint64_t))(v5 + 8);
    v16(v8, v4);
    uint64_t result = ((uint64_t (*)(char *, uint64_t))v16)(v10, v4);
    goto LABEL_5;
  }

  char v13 = dispatch thunk of static Comparable.<= infix(_:_:)();
  uint64_t v14 = *(void (**)(char *, uint64_t))(v5 + 8);
  v14(v8, v4);
  uint64_t result = ((uint64_t (*)(char *, uint64_t))v14)(v10, v4);
  if ((v13 & 1) == 0) {
LABEL_5:
  }
    __break(1u);
  return result;
}

id _FileManagerImpl.createSymbolicLink(at:withDestinationURL:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v240 = *MEMORY[0x1895F89C0];
  uint64_t v4 = *(void **)a1;
  uint64_t v5 = *(void **)(a1 + 8);
  uint64_t v6 = *(void *)(a1 + 16);
  id v8 = *(id *)a2;
  id v7 = *(id *)(a2 + 8);
  uint64_t v9 = *(void *)(a2 + 16);
  swift_retain();
  id v10 = v4;
  swift_retain();
  uint64_t v235 = v3;
  if (!_foundation_swift_url_feature_enabled())
  {
    unsigned __int8 v13 = objc_msgSend(v10, sel_isFileURL);
    swift_release();
    swift_release();

    if ((v13 & 1) != 0) {
      goto LABEL_10;
    }
    goto LABEL_16;
  }

  v238._uint64_t countAndFlagsBits = (uint64_t)v10;
  v238._unint64_t object = v5;
  uint64_t v239 = v6;
  URL.scheme.getter();
  if (!v11)
  {
    swift_release();
    swift_release();

    goto LABEL_16;
  }

  id v232 = v7;
  Swift::String v12 = String.lowercased()();
  swift_bridgeObjectRelease();
  if (v12._countAndFlagsBits == 1701603686 && v12._object == (void *)0xE400000000000000LL)
  {
    swift_release();
    swift_release();

    swift_bridgeObjectRelease();
    id v7 = v232;
    goto LABEL_10;
  }

  char v14 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_release();
  swift_release();

  swift_bridgeObjectRelease();
  id v7 = v232;
  if ((v14 & 1) == 0)
  {
LABEL_16:
    id v20 = v10;
    swift_retain_n();
    swift_retain_n();
    id v21 = v20;
    if (_foundation_swift_url_feature_enabled())
    {
      uint64_t v239 = v6;
      id v22 = v21;
      unint64_t v234 = v5;
      swift_retain();
      swift_retain();
      Swift::String v23 = URL.path(percentEncoded:)(1);
      uint64_t countAndFlagsBits = v23._countAndFlagsBits;
      Swift::String v238 = v23;
      swift_bridgeObjectRetain();
      id v233 = v22;
      if (String.count.getter() <= 1)
      {
        unint64_t object = (unint64_t)v23._object;
      }

      else
      {
        unint64_t object = (unint64_t)v23._object;
        if ((specialized BidirectionalCollection.last.getter(v23._countAndFlagsBits, (unint64_t)v23._object) & 0x1FF) == 0x2F)
        {
          specialized RangeReplaceableCollection<>.popLast()();
          swift_bridgeObjectRelease();
          uint64_t countAndFlagsBits = v238._countAndFlagsBits;
          unint64_t object = (unint64_t)v238._object;
        }
      }

      v236._uint64_t countAndFlagsBits = Set.init(minimumCapacity:)();
      uint64_t v39 = specialized Set._Variant.insert(_:)(&v237, 0x2FuLL);
      uint64_t v40 = v236._countAndFlagsBits;
      uint64_t v41 = HIBYTE(object) & 0xF;
      if ((object & 0x2000000000000000LL) == 0) {
        uint64_t v41 = countAndFlagsBits & 0xFFFFFFFFFFFFLL;
      }
      if (v41)
      {
        v236._uint64_t countAndFlagsBits = countAndFlagsBits;
        v236._unint64_t object = (void *)object;
        MEMORY[0x1895F8858](v39);
        uint64_t v225 = (uint64_t)&v236;
        uint64_t v226 = v40;
        swift_bridgeObjectRetain();
        specialized String.UTF8View.withContiguousStorageIfAvailable<A>(_:)( (void *(*)(__int128 *__return_ptr, void *, uint64_t))closure #1 in StringProtocol.removingURLPercentEncoding(excluding:)specialized partial apply,  (uint64_t)v224,  countAndFlagsBits,  object);
        if (v42 == 1)
        {
          unint64_t v44 = (unint64_t)v236._object;
          Swift::Int v43 = v236._countAndFlagsBits;
          swift_bridgeObjectRetain();
          specialized StringProtocol.removingURLPercentEncoding<A>(utf8Buffer:excluding:)(v43, v44, v40);
          swift_bridgeObjectRelease();
        }

        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        unint64_t v47 = v233;
      }

      else
      {
        swift_bridgeObjectRelease();
        unint64_t v47 = v233;
      }

      swift_release();
      swift_release();

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_release();
      swift_release();
    }

    else
    {
      id v26 = objc_msgSend(v21, sel__parameterString);
      if (v26)
      {
        id v27 = v26;
        id v28 = static String._unconditionallyBridgeFromObjectiveC(_:)(v26);
        objc_super v30 = v29;

        if (getEnumTag for _DarwinSearchPathsSequence.Iterator.State()
          && (id v31 = objc_msgSend(v21, sel_path)) != 0)
        {
          objc_super v32 = v31;
          id v33 = static String._unconditionallyBridgeFromObjectiveC(_:)(v31);
          int64_t v35 = v34;

          v238._uint64_t countAndFlagsBits = (uint64_t)v33;
          v238._unint64_t object = v35;
          swift_bridgeObjectRetain();
          v36._uint64_t countAndFlagsBits = 59LL;
          v36._unint64_t object = (void *)0xE100000000000000LL;
          String.append(_:)(v36);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRetain();
          v37._uint64_t countAndFlagsBits = (uint64_t)v28;
          v37._unint64_t object = v30;
          String.append(_:)(v37);
          swift_release();
          swift_release();

          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
        }

        else
        {
          v238._uint64_t countAndFlagsBits = 59LL;
          v238._unint64_t object = (void *)0xE100000000000000LL;
          v45._uint64_t countAndFlagsBits = (uint64_t)v28;
          v45._unint64_t object = v30;
          String.append(_:)(v45);
          swift_release();
          swift_release();

          swift_bridgeObjectRelease();
        }

        goto LABEL_39;
      }

      id v46 = objc_msgSend(v21, sel_path);
      if (!v46)
      {
        swift_release();
        swift_release();

        goto LABEL_39;
      }

      unint64_t v47 = v46;
      static String._unconditionallyBridgeFromObjectiveC(_:)(v46);
      swift_release();
      swift_release();
    }

LABEL_39:
    uint64_t v48 = (void *)objc_opt_self();
    uint64_t v49 = String._bridgeToObjectiveCImpl()();
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
    id v50 = objc_msgSend( v48,  sel__cocoaErrorWithCode_path_url_underlying_variant_source_destination_,  262,  v49,  v21,  0,  0,  0,  0);
LABEL_40:
    v50;
    swift_unknownObjectRelease();

    return (id)swift_willThrow();
  }

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> _FileManagerImpl.linkItem(atPath:toPath:)( Swift::String atPath, Swift::String toPath)
{
  uint64_t v3 = v2;
  unint64_t object = toPath._object;
  uint64_t countAndFlagsBits = toPath._countAndFlagsBits;
  uint64_t v6 = atPath._object;
  uint64_t v7 = atPath._countAndFlagsBits;
  uint64_t v8 = MEMORY[0x186E20F44](v3);
  if (v8)
  {
    char v13 = 0;
    uint64_t v14 = v8;
    void v10[2] = v7;
    v10[3] = v6;
    v10[4] = countAndFlagsBits;
    v10[5] = object;
    id v11 = (id)MEMORY[0x1895F8858](v8);
    Swift::String v12 = &v13;
    id v9 = v11;
    specialized String.withFileSystemRepresentation<A>(_:)( (uint64_t (*)(char *))partial apply for specialized closure #1 in static _FileOperations.linkOrCopyFile<A>(_:dst:with:delegate:),  (uint64_t)v10,  v7,  (unint64_t)v6);
  }

  else
  {
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }

id _FileManagerImpl.linkItem(at:to:)(uint64_t a1, uint64_t a2)
{
  uint64_t v229 = *MEMORY[0x1895F89C0];
  uint64_t v3 = *(void **)a1;
  uint64_t v4 = *(void **)(a1 + 8);
  id v5 = *(id *)(a1 + 16);
  uint64_t v6 = *(void **)a2;
  uint64_t v7 = *(void **)(a2 + 8);
  uint64_t v8 = *(void **)(a2 + 16);
  swift_retain();
  id v9 = v3;
  swift_retain();
  id v224 = v5;
  if (!_foundation_swift_url_feature_enabled())
  {
    id v222 = v2;
    unsigned __int8 v12 = objc_msgSend(v9, sel_isFileURL);
    swift_release();
    swift_release();

    if ((v12 & 1) != 0) {
      goto LABEL_10;
    }
    goto LABEL_15;
  }

  v227._uint64_t countAndFlagsBits = (uint64_t)v9;
  v227._unint64_t object = v4;
  id v228 = v5;
  URL.scheme.getter();
  if (!v10)
  {
    swift_release();
    swift_release();

    goto LABEL_15;
  }

  id v222 = v2;
  Swift::String v11 = String.lowercased()();
  swift_bridgeObjectRelease();
  if (v11._countAndFlagsBits == 1701603686 && v11._object == (void *)0xE400000000000000LL)
  {
    id v5 = v224;
    swift_release();
    swift_release();

    swift_bridgeObjectRelease();
    goto LABEL_10;
  }

  char v13 = _stringCompareWithSmolCheck(_:_:expecting:)();
  id v5 = v224;
  swift_release();
  swift_release();

  swift_bridgeObjectRelease();
  if ((v13 & 1) == 0)
  {
LABEL_15:
    id v17 = v9;
    swift_retain_n();
    swift_retain_n();
    id v18 = v17;
    if (_foundation_swift_url_feature_enabled())
    {
      id v228 = v5;
      id v19 = v18;
      swift_retain();
      swift_retain();
      Swift::String v20 = URL.path(percentEncoded:)(1);
      uint64_t countAndFlagsBits = v20._countAndFlagsBits;
      Swift::String v227 = v20;
      swift_bridgeObjectRetain();
      if (String.count.getter() <= 1)
      {
        unint64_t object = (unint64_t)v20._object;
      }

      else
      {
        unint64_t object = (unint64_t)v20._object;
        if ((specialized BidirectionalCollection.last.getter(v20._countAndFlagsBits, (unint64_t)v20._object) & 0x1FF) == 0x2F)
        {
          specialized RangeReplaceableCollection<>.popLast()();
          swift_bridgeObjectRelease();
          uint64_t countAndFlagsBits = v227._countAndFlagsBits;
          unint64_t object = (unint64_t)v227._object;
        }
      }

      v225._uint64_t countAndFlagsBits = Set.init(minimumCapacity:)();
      uint64_t v36 = specialized Set._Variant.insert(_:)(&v226, 0x2FuLL);
      uint64_t v37 = v225._countAndFlagsBits;
      uint64_t v38 = HIBYTE(object) & 0xF;
      if ((object & 0x2000000000000000LL) == 0) {
        uint64_t v38 = countAndFlagsBits & 0xFFFFFFFFFFFFLL;
      }
      if (v38)
      {
        id v222 = v19;
        v225._uint64_t countAndFlagsBits = countAndFlagsBits;
        v225._unint64_t object = (void *)object;
        MEMORY[0x1895F8858](v36);
        uint64_t v214 = (uint64_t)&v225;
        uint64_t v215 = v37;
        swift_bridgeObjectRetain();
        specialized String.UTF8View.withContiguousStorageIfAvailable<A>(_:)( (void *(*)(__int128 *__return_ptr, void *, uint64_t))partial apply for specialized closure #1 in StringProtocol.removingURLPercentEncoding(excluding:),  (uint64_t)v213,  countAndFlagsBits,  object);
        if (v39 == 1)
        {
          unint64_t v41 = (unint64_t)v225._object;
          Swift::Int v40 = v225._countAndFlagsBits;
          swift_bridgeObjectRetain();
          specialized StringProtocol.removingURLPercentEncoding<A>(utf8Buffer:excluding:)(v40, v41, v37);
          swift_bridgeObjectRelease();
        }

        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        id v19 = v222;
      }

      else
      {
        swift_bridgeObjectRelease();
      }

      swift_release();
      swift_release();

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_release();
      swift_release();
    }

    else
    {
      id v23 = objc_msgSend(v18, sel__parameterString);
      if (v23)
      {
        id v24 = v23;
        id v25 = static String._unconditionallyBridgeFromObjectiveC(_:)(v23);
        id v27 = v26;

        if (getEnumTag for _DarwinSearchPathsSequence.Iterator.State()
          && (id v28 = objc_msgSend(v18, sel_path)) != 0)
        {
          unint64_t v29 = v28;
          id v30 = static String._unconditionallyBridgeFromObjectiveC(_:)(v28);
          objc_super v32 = v31;

          v227._uint64_t countAndFlagsBits = (uint64_t)v30;
          v227._unint64_t object = v32;
          swift_bridgeObjectRetain();
          v33._uint64_t countAndFlagsBits = 59LL;
          v33._unint64_t object = (void *)0xE100000000000000LL;
          String.append(_:)(v33);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRetain();
          v34._uint64_t countAndFlagsBits = (uint64_t)v25;
          v34._unint64_t object = v27;
          String.append(_:)(v34);
          swift_release();
          swift_release();

          swift_bridgeObjectRelease();
        }

        else
        {
          v227._uint64_t countAndFlagsBits = 59LL;
          v227._unint64_t object = (void *)0xE100000000000000LL;
          v42._uint64_t countAndFlagsBits = (uint64_t)v25;
          v42._unint64_t object = v27;
          String.append(_:)(v42);
          swift_release();
          swift_release();
        }

        swift_bridgeObjectRelease();
      }

      else
      {
        id v43 = objc_msgSend(v18, sel_path);
        if (v43)
        {
          unint64_t v44 = v43;
          static String._unconditionallyBridgeFromObjectiveC(_:)(v43);
          swift_release();
          swift_release();
        }

        else
        {
          swift_release();
          swift_release();
        }
      }
    }

    unint64_t v86 = (void *)objc_opt_self();
    uint64_t v87 = String._bridgeToObjectiveCImpl()();
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
    id v88 = objc_msgSend( v86,  sel__cocoaErrorWithCode_path_url_underlying_variant_source_destination_,  262,  v87,  v18,  0,  0,  0,  0);
    goto LABEL_63;
  }

void closure #1 in _FileManagerImpl.createSymbolicLink(atPath:withDestinationPath:)( uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6)
{
  if (a1)
  {
    uint64_t v11 = MEMORY[0x186E20F44](a4);
    if (v11)
    {
      unsigned __int8 v12 = (void *)v11;
      MEMORY[0x1895F8858](v11);
      v13[2] = a5;
      v13[3] = a6;
      void v13[4] = a1;
      v13[5] = a2;
      v13[6] = a3;
      specialized NSFileManager.withFileSystemRepresentation<A>(for:_:)( a5,  a6,  (uint64_t (*)(char *))partial apply for closure #1 in closure #1 in _FileManagerImpl.createSymbolicLink(atPath:withDestinationPath:),  (uint64_t)v13);
    }

    else
    {
      _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
    }
  }

  else
  {
    swift_bridgeObjectRetain();
    specialized CocoaError.init<A>(_:path:underlying:variant:source:destination:)( (uint64_t (*)(void))0x100,  a2,  a3,  0LL,  0LL,  0LL,  0LL,  0LL,  (void *(*)(void *__return_ptr, void *, uint64_t))&v14,  0LL,  0LL);
    swift_willThrow();
  }

uint64_t closure #1 in closure #1 in _FileManagerImpl.createSymbolicLink(atPath:withDestinationPath:)( const char *a1, uint64_t a2, unint64_t a3, char *a4, uint64_t a5, unint64_t a6)
{
  if (a1)
  {
    uint64_t result = symlink(a1, a4);
    if (!(_DWORD)result) {
      return result;
    }
    int v9 = MEMORY[0x186E1B0E8]();
    int v10 = v9;
    uint64_t v11 = 4LL;
    switch(v9)
    {
      case 1:
      case 13:
        uint64_t v11 = 513LL;
        goto LABEL_13;
      case 2:
        goto LABEL_13;
      case 3:
      case 4:
      case 5:
      case 6:
      case 7:
      case 8:
      case 9:
      case 10:
      case 11:
      case 12:
      case 14:
      case 15:
      case 16:
      case 18:
      case 19:
      case 20:
      case 21:
      case 22:
      case 23:
      case 24:
      case 25:
      case 26:
      case 27:
      case 29:
      case 31:
      case 32:
      case 33:
      case 34:
      case 35:
      case 36:
      case 37:
      case 38:
      case 39:
      case 40:
      case 41:
      case 42:
      case 43:
      case 44:
      case 45:
      case 46:
      case 47:
      case 48:
      case 49:
      case 50:
      case 51:
      case 52:
      case 53:
      case 54:
      case 55:
      case 56:
      case 57:
      case 58:
      case 59:
      case 60:
      case 61:
      case 62:
      case 64:
      case 65:
      case 66:
      case 67:
      case 68:
        goto LABEL_9;
      case 17:
        uint64_t v11 = 516LL;
        goto LABEL_13;
      case 28:
      case 69:
        uint64_t v11 = 640LL;
        goto LABEL_13;
      case 30:
        uint64_t v11 = 642LL;
        goto LABEL_13;
      case 63:
        uint64_t v11 = 514LL;
        goto LABEL_13;
      default:
        if (v9 == 102)
        {
          id v14 = 0LL;
          uint64_t v11 = 512LL;
          goto LABEL_21;
        }

uint64_t closure #1 in _FileManagerImpl.destinationOfSymbolicLink(atPath:)@<X0>( const char *a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X3>, void *a5@<X8>)
{
  v64[2] = *MEMORY[0x1895F89C0];
  if (!a1)
  {
    swift_bridgeObjectRetain();
    specialized CocoaError.init<A>(_:path:underlying:variant:source:destination:)( (uint64_t (*)(void))0x100,  a2,  a3,  0LL,  0LL,  0LL,  0LL,  0LL,  (void *(*)(void *__return_ptr, void *, uint64_t))v64,  0LL,  0LL);
    return swift_willThrow();
  }

  outlined init with copy of _FileManagerImpl(a4, (uint64_t)v64);
  uint64_t isStackAllocationSafe = swift_stdlib_isStackAllocationSafe();
  if ((isStackAllocationSafe & 1) == 0)
  {
    id v19 = (char *)swift_slowAlloc();
    ssize_t v20 = readlink(a1, v19, 0x402uLL);
    if ((v20 & 0x8000000000000000LL) == 0)
    {
      ssize_t v21 = v20;
      uint64_t v22 = (void *)MEMORY[0x186E20F44](v64);
      if (!v22) {
        goto LABEL_47;
      }
      id v23 = v22;
      id v24 = objc_msgSend(v22, sel_stringWithFileSystemRepresentation_length_, v19, v21);

      id v25 = static String._unconditionallyBridgeFromObjectiveC(_:)(v24);
      uint64_t v27 = v26;

      *a5 = v25;
      a5[1] = v27;
LABEL_39:
      MEMORY[0x186E20E60](v19, -1LL, -1LL);
      return outlined destroy of _FileManagerImpl((uint64_t)v64);
    }

    int v31 = MEMORY[0x186E1B0E8]();
    int v32 = v31;
    uint64_t v33 = 263LL;
    switch(v31)
    {
      case 1:
      case 13:
        uint64_t v33 = 257LL;
        goto LABEL_32;
      case 2:
        uint64_t v33 = 260LL;
        goto LABEL_32;
      case 3:
      case 4:
      case 5:
      case 6:
      case 7:
      case 8:
      case 9:
      case 10:
      case 11:
      case 12:
      case 14:
      case 15:
      case 16:
      case 17:
      case 18:
      case 19:
      case 20:
      case 21:
      case 22:
      case 23:
      case 24:
      case 25:
      case 26:
        goto LABEL_21;
      case 27:
        goto LABEL_32;
      default:
        if (v31 == 63)
        {
          uint64_t v33 = 258LL;
        }

        else
        {
          if (v31 == 102)
          {
            id v35 = 0LL;
            uint64_t v36 = 256LL;
LABEL_38:
            swift_bridgeObjectRetain();
            specialized CocoaError.init<A>(_:path:underlying:variant:source:destination:)( (uint64_t (*)(void))v36,  a2,  a3,  v35,  0LL,  0LL,  0LL,  0LL,  (void *(*)(void *__return_ptr, void *, uint64_t))&v62,  0LL,  0LL);
            swift_willThrow();
            goto LABEL_39;
          }

uint64_t partial apply for closure #1 in closure #1 in _FileManagerImpl.createSymbolicLink(atPath:withDestinationPath:)( const char *a1)
{
  return closure #1 in closure #1 in _FileManagerImpl.createSymbolicLink(atPath:withDestinationPath:)( a1,  *(void *)(v1 + 16),  *(void *)(v1 + 24),  *(char **)(v1 + 32),  *(void *)(v1 + 40),  *(void *)(v1 + 48));
}

uint64_t Measurement<>.FormatStyle.skeletonForUsage(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  id v5 = *(void **)a1;
  double v6 = *(double *)(a1 + 8);
  uint64_t v7 = *(int *)(a2 + 36);
  int v8 = *(unsigned __int8 *)(v3 + v7);
  if (v8 != 14)
  {
    if (Usage.rawValue.getter(*(_BYTE *)(v3 + v7)) == 0x6469766F72507361LL && v9 == 0xEA00000000006465LL)
    {
      swift_bridgeObjectRelease();
    }

    else
    {
      char v11 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if ((v11 & 1) == 0)
      {
        *(_OWORD *)id v23 = *(_OWORD *)(v3 + 8);
        uint64_t v12 = *(void *)(a2 + 16);
        char v13 = (void *)swift_dynamicCastUnknownClassUnconditional();
        unsigned __int8 v24 = v8;
        swift_unknownObjectRetain();
        id v14 = bestUnitForUsage<A>(_:dimension:usage:)((uint64_t)v23, v13, &v24, v12);
        swift_unknownObjectRelease();
        objc_opt_self();
        uint64_t v15 = swift_dynamicCastObjCClassUnconditional();
        specialized Measurement<>.converted(to:)(v23, v15, v5, v6);

        id v16 = *(id *)v23;
        goto LABEL_10;
      }
    }
  }

  id v16 = v5;
LABEL_10:
  id v17 = v16;
  id v18 = NSDimension.skeleton.getter();
  ssize_t v20 = v19;

  if (v20)
  {
    if (*(_BYTE *)(v3 + *(int *)(a2 + 40)) == 1)
    {
      swift_bridgeObjectRelease();
      ssize_t v20 = (void *)0x80000001839CD200LL;
      id v18 = (id)0xD000000000000020LL;
    }

    v23[0] = *(_BYTE *)v3;
    unsigned __int8 v24 = 14;
    uint64_t v21 = static Measurement<>.FormatStyle.skeleton(_:width:usage:numberFormatStyle:)( (uint64_t)v18,  v20,  v23,  &v24,  v3 + *(int *)(a2 + 32));

    swift_bridgeObjectRelease();
  }

  else
  {

    return 0LL;
  }

  return v21;
}

{
  uint64_t v2;
  uint64_t v3;
  void *v5;
  uint64_t v6;
  int v7;
  char v8;
  uint64_t v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  id v13;
  id v14;
  void *v15;
  void *v16;
  uint64_t v17;
  void v19[2];
  __int128 v20;
  uint64_t v3 = v2;
  id v5 = *(void **)a1;
  double v6 = *(void *)(a1 + 8);
  uint64_t v7 = *(unsigned __int8 *)(v3 + *(int *)(a2 + 36));
  ssize_t v20 = *(_OWORD *)(v3 + 8);
  if (v7 == 14) {
    int v8 = 0;
  }
  else {
    int v8 = v7;
  }
  LOBYTE(v19[0]) = v8;
  uint64_t v9 = *(void *)(a2 + 16);
  swift_unknownObjectRetain();
  ssize_t v10 = bestUnitForUsage<A>(_:dimension:usage:)((uint64_t)&v20, v5, (unsigned __int8 *)v19, v9);
  swift_unknownObjectRelease();
  v19[0] = v5;
  v19[1] = v6;
  type metadata accessor for Measurement(0LL, v9, v11, v12);
  Measurement<>.converted(to:)(v10, (double *)&v20);
  char v13 = (id)v20;
  id v14 = NSDimension.skeleton.getter();
  id v16 = v15;

  if (v16)
  {
    LOBYTE(v20) = *(_BYTE *)v3;
    LOBYTE(v19[0]) = v7;
    id v17 = static Measurement<>.FormatStyle.skeleton(_:width:usage:numberFormatStyle:)( (uint64_t)v14,  v16,  (unsigned __int8 *)&v20,  (unsigned __int8 *)v19,  v3 + *(int *)(a2 + 32));

    swift_bridgeObjectRelease();
  }

  else
  {

    return 0LL;
  }

  return v17;
}

uint64_t Measurement<>.FormatStyle.shouldConvertToBestUnit.getter(uint64_t a1)
{
  int v2 = *(unsigned __int8 *)(v1 + *(int *)(a1 + 36));
  if (v2 == 14)
  {
    char v3 = 1;
  }

  else if (Usage.rawValue.getter(v2) == 0x6469766F72507361LL && v4 == 0xEA00000000006465LL)
  {
    swift_bridgeObjectRelease();
    char v3 = 0;
  }

  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    char v3 = v6 ^ 1;
  }

  return v3 & 1;
}

uint64_t Measurement<>.FormatStyle.skeletonForBaseUnit(_:)(uint64_t a1, uint64_t a2)
{
  char v3 = v2;
  id v5 = *(void **)a1;
  uint64_t v6 = *(void *)(a1 + 8);
  swift_getObjectType();
  ObjCClassFromMetadata = (void *)swift_getObjCClassFromMetadata();
  id v8 = v5;
  id v9 = objc_msgSend(ObjCClassFromMetadata, sel_baseUnit);
  v19[0] = v8;
  v19[1] = v6;
  type metadata accessor for Measurement(0LL, *(void *)(a2 + 16), v10, v11);
  Measurement<>.converted(to:)(v9, (double *)&v20);

  id v12 = v20;
  id v13 = NSDimension.skeleton.getter();
  uint64_t v15 = v14;

  if (v15)
  {
    LOBYTE(v20) = *v3;
    uint64_t v16 = *(int *)(a2 + 32);
    LOBYTE(v19[0]) = v3[*(int *)(a2 + 36)];
    uint64_t v17 = static Measurement<>.FormatStyle.skeleton(_:width:usage:numberFormatStyle:)( (uint64_t)v13,  v15,  (unsigned __int8 *)&v20,  (unsigned __int8 *)v19,  (uint64_t)&v3[v16]);

    swift_bridgeObjectRelease();
  }

  else
  {

    return 0LL;
  }

  return v17;
}

uint64_t static Measurement<>.FormatStyle.== infix(_:_:)( unsigned __int8 *a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointFormatStyle<Double>);
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x1895F8858](v6);
  id v9 = (__int128 *)((char *)&v52 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (FloatingPointFormatStyle<Double>?, FloatingPointFormatStyle<Double>?));
  MEMORY[0x1895F8858](v10);
  id v12 = (char *)&v52 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointFormatStyle<Double>?);
  uint64_t v14 = MEMORY[0x1895F8858](v13);
  uint64_t v15 = MEMORY[0x1895F8858](v14);
  uint64_t v17 = (char *)&v52 - v16;
  MEMORY[0x1895F8858](v15);
  uint64_t v21 = (char *)&v52 - v20;
  if (*a1 != *a2) {
    goto LABEL_13;
  }
  Swift::String v55 = (__int128 *)v19;
  uint64_t v22 = a3;
  __int128 v23 = *(_OWORD *)(a1 + 8);
  __int128 v56 = *(_OWORD *)(v18 + 8);
  __int128 v57 = v23;
  uint64_t v24 = v18;
  uint64_t v27 = type metadata accessor for Measurement<>.FormatStyle(0LL, v22, v25, v26);
  uint64_t v28 = *(int *)(v27 + 32);
  uint64_t v53 = a1;
  uint64_t v29 = (uint64_t)&a1[v28];
  uint64_t v30 = (int *)v27;
  outlined init with copy of FloatingPointFormatStyle<Double>?(v29, (uint64_t)v21);
  uint64_t v31 = v30[8];
  uint64_t v54 = v24;
  outlined init with copy of FloatingPointFormatStyle<Double>?(v24 + v31, (uint64_t)v17);
  uint64_t v32 = (uint64_t)&v12[*(int *)(v10 + 48)];
  outlined init with copy of FloatingPointFormatStyle<Double>?((uint64_t)v21, (uint64_t)v12);
  outlined init with copy of FloatingPointFormatStyle<Double>?((uint64_t)v17, v32);
  uint64_t v33 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
  if (v33((uint64_t)v12, 1LL, v6) != 1)
  {
    uint64_t v39 = v55;
    outlined init with copy of FloatingPointFormatStyle<Double>?((uint64_t)v12, (uint64_t)v55);
    if (v33(v32, 1LL, v6) != 1)
    {
      outlined init with take of LocalePreferences?( v32,  (uint64_t)v9,  &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>);
      __int128 v44 = *v39;
      __int128 v56 = *v9;
      __int128 v57 = v44;
      if ((specialized static Locale.== infix(_:_:)((uint64_t)&v57, (uint64_t)&v56) & 1) != 0)
      {
        specialized static NumberFormatStyleConfiguration.Collection.== infix(_:_:)( (uint64_t)v39 + *(int *)(v6 + 36),  (uint64_t)v9 + *(int *)(v6 + 36));
        char v46 = v45;
        outlined destroy of Any?( (uint64_t)v9,  &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>);
        outlined destroy of Any?( (uint64_t)v17,  &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>?);
        outlined destroy of Any?( (uint64_t)v21,  &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>?);
        outlined destroy of Any?( (uint64_t)v39,  &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>);
        outlined destroy of Any?( (uint64_t)v12,  &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>?);
        if ((v46 & 1) == 0) {
          goto LABEL_13;
        }
        goto LABEL_6;
      }

      outlined destroy of Any?( (uint64_t)v9,  &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>);
      outlined destroy of Any?( (uint64_t)v17,  &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>?);
      outlined destroy of Any?( (uint64_t)v21,  &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>?);
      outlined destroy of Any?( (uint64_t)v39,  &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>);
      uint64_t v41 = (uint64_t)v12;
      id v40 = &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>?;
LABEL_12:
      outlined destroy of Any?(v41, v40);
      goto LABEL_13;
    }

    outlined destroy of Any?( (uint64_t)v17,  &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>?);
    outlined destroy of Any?( (uint64_t)v21,  &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>?);
    outlined destroy of Any?( (uint64_t)v39,  &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>);
LABEL_11:
    id v40 = &demangling cache variable for type metadata for (FloatingPointFormatStyle<Double>?, FloatingPointFormatStyle<Double>?);
    uint64_t v41 = (uint64_t)v12;
    goto LABEL_12;
  }

  outlined destroy of Any?( (uint64_t)v17,  &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>?);
  outlined destroy of Any?( (uint64_t)v21,  &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>?);
  if (v33(v32, 1LL, v6) != 1) {
    goto LABEL_11;
  }
  outlined destroy of Any?( (uint64_t)v12,  &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>?);
LABEL_6:
  uint64_t v34 = v30[9];
  uint64_t v36 = v53;
  uint64_t v35 = v54;
  int v37 = v53[v34];
  int v38 = *(unsigned __int8 *)(v54 + v34);
  if (v37 == 14)
  {
    if (v38 == 14) {
      goto LABEL_24;
    }
  }

  else if (v38 != 14)
  {
    uint64_t v47 = Usage.rawValue.getter(v37);
    uint64_t v49 = v48;
    if (v47 == Usage.rawValue.getter(v38) && v49 == v50)
    {
      swift_bridgeObjectRelease_n();
      uint64_t v35 = v54;
    }

    else
    {
      char v51 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      char v42 = 0;
      uint64_t v35 = v54;
      if ((v51 & 1) == 0) {
        return v42 & 1;
      }
    }

void static Measurement<>.FormatStyle.UnitWidth.wide.getter(_BYTE *a1@<X8>)
{
  *a1 = 0;
}

void static Measurement<>.FormatStyle.UnitWidth.abbreviated.getter(_BYTE *a1@<X8>)
{
  *a1 = 1;
}

void static Measurement<>.FormatStyle.UnitWidth.narrow.getter(_BYTE *a1@<X8>)
{
  *a1 = 2;
}

unint64_t Measurement<>.FormatStyle.UnitWidth.Option.init(rawValue:)(unint64_t result)
{
  if (result >= 3) {
    return 3LL;
  }
  return result;
}

uint64_t Measurement<>.FormatStyle.UnitWidth.Option.rawValue.getter(uint64_t result)
{
  return result;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance Measurement<A><>.FormatStyle.UnitWidth.Option( uint64_t a1, uint64_t a2, uint64_t a3)
{
  return == infix<A>(_:_:)();
}

unint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance Measurement<A><>.FormatStyle.UnitWidth.Option@<X0>( unint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result = Measurement<>.FormatStyle.UnitWidth.Option.init(rawValue:)(*a1);
  *a2 = result;
  return result;
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance Measurement<A><>.FormatStyle.UnitWidth.Option@<X0>( uint64_t *a1@<X8>)
{
  uint64_t result = Measurement<>.FormatStyle.UnitWidth.Option.rawValue.getter(*v1);
  *a1 = result;
  return result;
}

uint64_t protocol witness for Decodable.init(from:) in conformance Measurement<A><>.FormatStyle.UnitWidth.Option()
{
  return RawRepresentable<>.init(from:)();
}

uint64_t protocol witness for Encodable.encode(to:) in conformance Measurement<A><>.FormatStyle.UnitWidth.Option()
{
  return RawRepresentable<>.encode(to:)();
}

uint64_t protocol witness for Hashable.hashValue.getter in conformance Measurement<A><>.FormatStyle.UnitWidth.Option( uint64_t a1)
{
  return RawRepresentable<>.hashValue.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance Measurement<A><>.FormatStyle.UnitWidth.Option()
{
  return RawRepresentable<>.hash(into:)();
}

uint64_t protocol witness for Hashable._rawHashValue(seed:) in conformance Measurement<A><>.FormatStyle.UnitWidth.Option()
{
  return RawRepresentable<>._rawHashValue(seed:)();
}

void Measurement<>.FormatStyle.UnitWidth.hash(into:)()
{
}

BOOL static Measurement<>.FormatStyle.UnitWidth.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

uint64_t Measurement<>.FormatStyle.UnitWidth.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  if (a1 == 0x6E6F6974706FLL && a2 == 0xE600000000000000LL)
  {
    swift_bridgeObjectRelease();
    char v4 = 0;
  }

  else
  {
    char v3 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    char v4 = v3 ^ 1;
  }

  return v4 & 1;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance Measurement<A><>.FormatStyle.UnitWidth.CodingKeys@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result = Measurement<>.FormatStyle.UnitWidth.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result & 1;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance Measurement<A><>.FormatStyle.UnitWidth.CodingKeys( uint64_t a1)
{
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance Measurement<A><>.FormatStyle.UnitWidth.CodingKeys( uint64_t a1)
{
  return CodingKey.debugDescription.getter();
}

uint64_t Measurement<>.FormatStyle.UnitWidth.encode(to:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v16 = *(void *)(a2 + 16);
  uint64_t v6 = type metadata accessor for Measurement<>.FormatStyle.UnitWidth.CodingKeys(255LL, v16, a3, a4);
  MEMORY[0x186E20D4C](&protocol conformance descriptor for Measurement<A><>.FormatStyle.UnitWidth.CodingKeys, v6);
  uint64_t v7 = type metadata accessor for KeyedEncodingContainer();
  uint64_t v17 = *(void *)(v7 - 8);
  MEMORY[0x1895F8858](v7);
  id v9 = (char *)&v15 - v8;
  char v10 = *v4;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  char v18 = v10;
  uint64_t v13 = type metadata accessor for Measurement<>.FormatStyle.UnitWidth.Option(0LL, v16, v11, v12);
  MEMORY[0x186E20D4C](&protocol conformance descriptor for Measurement<A><>.FormatStyle.UnitWidth.Option, v13);
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  return (*(uint64_t (**)(char *, uint64_t))(v17 + 8))(v9, v7);
}

Swift::Int Measurement<>.FormatStyle.UnitWidth.hashValue.getter()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

uint64_t Measurement<>.FormatStyle.UnitWidth.init(from:)@<X0>( void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _BYTE *a5@<X8>)
{
  uint64_t v17 = a5;
  uint64_t v18 = a2;
  uint64_t v7 = type metadata accessor for Measurement<>.FormatStyle.UnitWidth.CodingKeys(255LL, a2, a3, a4);
  MEMORY[0x186E20D4C](&protocol conformance descriptor for Measurement<A><>.FormatStyle.UnitWidth.CodingKeys, v7);
  uint64_t v8 = type metadata accessor for KeyedDecodingContainer();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x1895F8858](v8);
  uint64_t v11 = (char *)&v17 - v10;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v5)
  {
    uint64_t v14 = v17;
    uint64_t v15 = type metadata accessor for Measurement<>.FormatStyle.UnitWidth.Option(0LL, v18, v12, v13);
    MEMORY[0x186E20D4C](&protocol conformance descriptor for Measurement<A><>.FormatStyle.UnitWidth.Option, v15);
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
    *uint64_t v14 = v19;
  }

  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t protocol witness for Decodable.init(from:) in conformance Measurement<A><>.FormatStyle.UnitWidth@<X0>( void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _BYTE *a5@<X8>)
{
  return Measurement<>.FormatStyle.UnitWidth.init(from:)(a1, *(void *)(a2 + 16), a3, a4, a5);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance Measurement<A><>.FormatStyle.UnitWidth( void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return Measurement<>.FormatStyle.UnitWidth.encode(to:)(a1, a2, a3, a4);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance Measurement<A><>.FormatStyle.UnitWidth()
{
  return Hasher._finalize()();
}

void Measurement<>.FormatStyle.width.getter(_BYTE *a1@<X8>)
{
  *a1 = *v1;
}

_BYTE *Measurement<>.FormatStyle.width.setter(_BYTE *result)
{
  *Swift::UInt v1 = *result;
  return result;
}

uint64_t (*Measurement<>.FormatStyle.width.modify())()
{
  return destructiveProjectEnumData for PredicateCodableError;
}

uint64_t Measurement<>.FormatStyle.locale.getter@<X0>(_OWORD *a1@<X8>)
{
  *a1 = *(_OWORD *)(v1 + 8);
  return swift_unknownObjectRetain();
}

__n128 Measurement<>.FormatStyle.locale.setter(__n128 *a1)
{
  __n128 result = *a1;
  *(__n128 *)(v1 + 8) = *a1;
  return result;
}

uint64_t (*Measurement<>.FormatStyle.locale.modify())()
{
  return destructiveProjectEnumData for PredicateCodableError;
}

uint64_t Measurement<>.FormatStyle.numberFormatStyle.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return outlined init with copy of FloatingPointFormatStyle<Double>?(v2 + *(int *)(a1 + 32), a2);
}

uint64_t Measurement<>.FormatStyle.numberFormatStyle.setter(uint64_t a1, uint64_t a2)
{
  return outlined assign with take of FloatingPointFormatStyle<Double>?(a1, v2 + *(int *)(a2 + 32));
}

uint64_t (*Measurement<>.FormatStyle.numberFormatStyle.modify())()
{
  return destructiveProjectEnumData for PredicateCodableError;
}

uint64_t Measurement<>.FormatStyle.usage.getter@<X0>(uint64_t result@<X0>, _BYTE *a2@<X8>)
{
  *a2 = *(_BYTE *)(v2 + *(int *)(result + 36));
  return result;
}

_BYTE *Measurement<>.FormatStyle.usage.setter(_BYTE *result, uint64_t a2)
{
  *(_BYTE *)(v2 + *(int *)(a2 + 36)) = *result;
  return result;
}

uint64_t (*Measurement<>.FormatStyle.usage.modify())()
{
  return destructiveProjectEnumData for PredicateCodableError;
}

uint64_t Measurement<>.FormatStyle.attributed.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(a1 - 8) + 16LL))(a2, v2);
}

uint64_t Measurement<>.FormatStyle.init(width:locale:usage:numberFormatStyle:)@<X0>( char *a1@<X0>, _OWORD *a2@<X1>, char *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  char v9 = *a1;
  char v10 = *a3;
  uint64_t v11 = (int *)type metadata accessor for Measurement<>.FormatStyle(0LL, a5, (uint64_t)a3, a4);
  uint64_t v12 = a6 + v11[8];
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointFormatStyle<Double>);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56LL))(v12, 1LL, 1LL, v13);
  uint64_t v14 = v11[9];
  *(_BYTE *)(a6 + v11[10]) = 0;
  *(_BYTE *)a6 = v9;
  *(_OWORD *)(a6 + 8) = *a2;
  *(_BYTE *)(a6 + v14) = v10;
  return outlined assign with take of FloatingPointFormatStyle<Double>?(a4, v12);
}

__n128 Measurement<>.FormatStyle.locale(_:)@<Q0>(__n128 *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  __n128 v7 = *a1;
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  __n128 result = v7;
  *(__n128 *)(a3 + 8) = v7;
  return result;
}

uint64_t static Measurement<>.FormatStyle.skeleton(_:width:usage:numberFormatStyle:)( uint64_t a1, void *a2, unsigned __int8 *a3, unsigned __int8 *a4, uint64_t a5)
{
  uint64_t v10 = type metadata accessor for NumberFormatStyleConfiguration.Collection(0LL);
  MEMORY[0x1895F8858](v10);
  uint64_t v12 = (char *)&v36 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointFormatStyle<Double>?);
  MEMORY[0x1895F8858](v13);
  uint64_t v15 = (char *)&v36 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  int v16 = *a3;
  int v17 = *a4;
  uint64_t v37 = 0LL;
  unint64_t v38 = 0xE000000000000000LL;
  if (a2)
  {
    v36._uint64_t countAndFlagsBits = a1;
    v36._unint64_t object = a2;
    swift_bridgeObjectRetain();
    v18._uint64_t countAndFlagsBits = 32LL;
    v18._unint64_t object = (void *)0xE100000000000000LL;
    String.append(_:)(v18);
    unint64_t v19 = 0x80000001839CA640LL;
    if (v16 == 1) {
      unint64_t v20 = 0xD000000000000010LL;
    }
    else {
      unint64_t v20 = 0xD000000000000011LL;
    }
    if (v16 != 1) {
      unint64_t v19 = 0x80000001839CA660LL;
    }
    uint64_t v21 = v16 ? v20 : 0xD000000000000014LL;
    uint64_t v22 = (void *)(v16 ? v19 : 0x80000001839CA5C0LL);
    swift_bridgeObjectRetain();
    v23._uint64_t countAndFlagsBits = v21;
    v23._unint64_t object = v22;
    String.append(_:)(v23);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    String.append(_:)(v36);
    swift_bridgeObjectRelease();
    if (v17 != 14)
    {
      if (Usage.rawValue.getter(v17) == 0x6469766F72507361LL && v24 == 0xEA00000000006465LL) {
        goto LABEL_19;
      }
      char v25 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if ((v25 & 1) == 0
        && objc_msgSend((id)swift_getObjCClassFromMetadata(), sel_supportsRegionalPreference))
      {
        v26._uint64_t countAndFlagsBits = Usage.rawValue.getter(v17);
        v36._uint64_t countAndFlagsBits = 0x2F656761737520LL;
        v36._unint64_t object = (void *)0xE700000000000000LL;
        String.append(_:)(v26);
        swift_bridgeObjectRelease();
        String.append(_:)(v36);
LABEL_19:
        swift_bridgeObjectRelease();
      }
    }
  }

  outlined init with copy of FloatingPointFormatStyle<Double>?(a5, (uint64_t)v15);
  uint64_t v27 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointFormatStyle<Double>);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v27 - 8) + 48LL))(v15, 1LL, v27) == 1)
  {
    outlined destroy of Any?( (uint64_t)v15,  &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>?);
  }

  else
  {
    outlined init with copy of NumberFormatStyleConfiguration.Collection( (uint64_t)&v15[*(int *)(v27 + 36)],  (uint64_t)v12);
    outlined destroy of Any?( (uint64_t)v15,  &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>);
    NumberFormatStyleConfiguration.Collection.skeleton.getter();
    uint64_t v29 = v28;
    uint64_t v31 = v30;
    outlined destroy of NumberFormatStyleConfiguration.Collection((uint64_t)v12);
    swift_bridgeObjectRetain();
    uint64_t v32 = String.count.getter();
    swift_bridgeObjectRelease();
    if (v32 >= 1)
    {
      v33._uint64_t countAndFlagsBits = 32LL;
      v33._unint64_t object = (void *)0xE100000000000000LL;
      String.append(_:)(v33);
    }

    v34._uint64_t countAndFlagsBits = v29;
    v34._unint64_t object = v31;
    String.append(_:)(v34);
    swift_bridgeObjectRelease();
  }

  return v37;
}

uint64_t Measurement<>.FormatStyle.format(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *(void *)(a2 - 8);
  uint64_t v6 = MEMORY[0x1895F8858](a1);
  uint64_t v8 = (char *)v42 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = *(void *)(v6 + 8);
  uint64_t v43 = *(void **)v6;
  char v9 = v43;
  uint64_t v44 = v10;
  type metadata accessor for Measurement(0LL, *(void *)(v11 + 16), v12, v13);
  id v14 = v9;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Measurement<NSUnitTemperature>);
  if (!swift_dynamicCast())
  {
    id v21 = NSDimension.skeleton.getter();
    if (!v22) {
      goto LABEL_21;
    }
    LOBYTE(v43) = *v2;
    uint64_t v23 = *(int *)(a2 + 32);
    LOBYTE(v42[0]) = v2[*(int *)(a2 + 36)];
    uint64_t v24 = (void *)static Measurement<>.FormatStyle.skeleton(_:width:usage:numberFormatStyle:)( (uint64_t)v21,  v22,  (unsigned __int8 *)&v43,  (unsigned __int8 *)v42,  (uint64_t)&v2[v23]);
    unint64_t v26 = v25;
    swift_bridgeObjectRelease();
    uint64_t v18 = Measurement<>.FormatStyle._format(_:withSkeleton:)(v24, v26);
    uint64_t v28 = v27;
    swift_bridgeObjectRelease();
    if (!v28)
    {
LABEL_21:
      if ((Measurement<>.FormatStyle.shouldConvertToBestUnit.getter(a2) & 1) == 0) {
        goto LABEL_12;
      }
      uint64_t v43 = v14;
      uint64_t v44 = v10;
      uint64_t v29 = Measurement<>.FormatStyle.skeletonForUsage(_:)((uint64_t)&v43, a2);
      if (!v30) {
        goto LABEL_12;
      }
      uint64_t v31 = (void *)v29;
      unint64_t v32 = v30;
      swift_bridgeObjectRelease();
      uint64_t v18 = Measurement<>.FormatStyle._format(_:withSkeleton:)(v31, v32);
      uint64_t v34 = v33;
      swift_bridgeObjectRelease();
      if (!v34) {
        goto LABEL_12;
      }
    }

    goto LABEL_10;
  }

  uint64_t v15 = (void *)v42[0];
  uint64_t v43 = (void *)v42[0];
  uint64_t v44 = v42[1];
  int v16 = (void *)Measurement<>.FormatStyle.skeletonForUsage(_:)((uint64_t)&v43, a2);
  if (!v17)
  {

    goto LABEL_12;
  }

  uint64_t v18 = Measurement<>.FormatStyle._format(_:withSkeleton:)(v16, v17);
  uint64_t v20 = v19;
  swift_bridgeObjectRelease();

  if (v20)
  {
LABEL_10:
    (*(void (**)(char *, _BYTE *, uint64_t))(v5 + 16))(v8, v3, a2);
    goto LABEL_18;
  }

uint64_t Measurement<>.FormatStyle._format(_:withSkeleton:)(void *a1, unint64_t a2)
{
  uint64_t v11 = *MEMORY[0x1895F89C0];
  *(_OWORD *)uint64_t v10 = *(_OWORD *)(v2 + 8);
  swift_unknownObjectRetain();
  uint64_t v5 = specialized static ICUMeasurementNumberFormatter.create(for:locale:)(a1, a2, (uint64_t)v10);
  swift_unknownObjectRelease();
  if (!v5) {
    return 0LL;
  }
  type metadata accessor for ICUNumberFormatterBase.FormatResult();
  swift_initStackObject();
  ICUNumberFormatterBase.FormatResult.init(formatter:value:)();
  uint64_t v6 = swift_retain_n();
  MEMORY[0x1895F8858](v6);
  swift_retain();
  specialized closure #1 in _withResizingUCharBuffer(initialSize:_:)((uint64_t)&v9, v10);
  uint64_t v7 = v10[0];
  swift_release();
  swift_release_n();
  return v7;
}

uint64_t Measurement<>.FormatStyle.formatAsDescription(_:)(void **a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  LOBYTE(v20) = *v2;
  uint64_t v4 = *(int *)(a2 + 32);
  unsigned __int8 v22 = v2[*(int *)(a2 + 36)];
  uint64_t v5 = (void *)static Measurement<>.FormatStyle.skeleton(_:width:usage:numberFormatStyle:)( 0LL,  0LL,  (unsigned __int8 *)&v20,  &v22,  (uint64_t)&v2[v4]);
  uint64_t v7 = Measurement<>.FormatStyle._format(_:withSkeleton:)(v5, v6);
  uint64_t v9 = v8;
  swift_bridgeObjectRelease();
  if (!v9)
  {
    uint64_t v7 = Double.description.getter();
    uint64_t v9 = v10;
  }

  uint64_t v20 = v7;
  uint64_t v21 = v9;
  swift_bridgeObjectRetain();
  v11._uint64_t countAndFlagsBits = 32LL;
  v11._unint64_t object = (void *)0xE100000000000000LL;
  String.append(_:)(v11);
  swift_bridgeObjectRelease();
  uint64_t v12 = v20;
  uint64_t v13 = v21;
  id v14 = objc_msgSend(v3, sel_symbol);
  id v15 = static String._unconditionallyBridgeFromObjectiveC(_:)(v14);
  unint64_t v17 = v16;

  uint64_t v20 = v12;
  uint64_t v21 = v13;
  swift_bridgeObjectRetain();
  v18._uint64_t countAndFlagsBits = (uint64_t)v15;
  v18._unint64_t object = v17;
  String.append(_:)(v18);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v20;
}

id NSDimension.skeleton.getter()
{
  id result = objc_msgSend((id)swift_getObjCClassFromObject(), sel_icuType);
  if (result)
  {
    uint64_t v2 = result;
    id v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(result);
    uint64_t v5 = v4;

    id v6 = objc_msgSend(v0, sel_icuSubtype);
    if (v6)
    {
      uint64_t v7 = v6;
      id v8 = static String._unconditionallyBridgeFromObjectiveC(_:)(v6);
      uint64_t v10 = v9;

      _StringGuts.grow(_:)(18LL);
      swift_bridgeObjectRelease();
      strcpy((char *)v14, "measure-unit/");
      HIWORD(v14[1]) = -4864;
      v11._uint64_t countAndFlagsBits = (uint64_t)v3;
      v11._unint64_t object = v5;
      String.append(_:)(v11);
      swift_bridgeObjectRelease();
      v12._uint64_t countAndFlagsBits = 45LL;
      v12._unint64_t object = (void *)0xE100000000000000LL;
      String.append(_:)(v12);
      v13._uint64_t countAndFlagsBits = (uint64_t)v8;
      v13._unint64_t object = v10;
      String.append(_:)(v13);
      swift_bridgeObjectRelease();
      return (id)v14[0];
    }

    else
    {
      swift_bridgeObjectRelease();
      return 0LL;
    }
  }

  return result;
}

void Measurement<>.FormatStyle.hash(into:)(uint64_t a1, int *a2)
{
  void (*v14)(void *__return_ptr, uint64_t, uint64_t);
  int *v15;
  uint64_t v16;
  Swift::UInt8 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  void *v24;
  char *v25;
  void *v26;
  void *v27;
  void *v28;
  uint64_t v29;
  id v30;
  id v31;
  char *v32;
  id v33;
  id v34;
  id v35;
  id v36;
  id v37;
  char *v38;
  char *v39;
  void *v40;
  id v41;
  void *v42;
  id v43;
  id v44;
  char *v45;
  void *v46;
  void *v47;
  char *v48;
  id v49;
  char *v50;
  void *v51;
  uint64_t v52;
  uint64_t v53;
  Swift::UInt v54;
  Swift::UInt v55;
  Swift::UInt8 v56;
  Swift::UInt8 v57;
  Swift::UInt8 v58;
  int v59;
  uint64_t v60;
  void *v61;
  id v62;
  void *v63;
  char *v64;
  char *v65;
  uint64_t v66;
  int *v67;
  uint64_t v68;
  _BYTE v69[144];
  char v70[8];
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  void *v76;
  void *v77;
  void *v78;
  char *v79;
  void *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  char v84;
  char v85;
  char v86;
  char v87;
  void v88[18];
  _BYTE v89[144];
  _BYTE v90[152];
  id v3 = v2;
  Swift::String v67 = a2;
  Swift::String v66 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointFormatStyle<Double>);
  id v68 = *(void *)(v66 - 8);
  MEMORY[0x1895F8858](v66);
  id v6 = (char *)&v60 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointFormatStyle<Double>?);
  MEMORY[0x1895F8858](v7);
  uint64_t v9 = (char *)&v60 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  Hasher._combine(_:)(*v2);
  uint64_t v10 = *((void *)v2 + 2);
  uint64_t ObjectType = swift_getObjectType();
  Swift::String v12 = *(uint64_t (**)(uint64_t, uint64_t))(v10 + 48);
  swift_unknownObjectRetain();
  if ((v12(ObjectType, v10) & 1) != 0)
  {
    Swift::UInt8 v13 = 1;
LABEL_5:
    Hasher._combine(_:)(v13);
    swift_unknownObjectRelease();
    int v16 = v66;
    id v15 = v67;
    goto LABEL_59;
  }

  Hasher._combine(_:)(0);
  (*(void (**)(uint64_t, uint64_t))(v10 + 64))(ObjectType, v10);
  String.hash(into:)();
  swift_bridgeObjectRelease();
  id v14 = *(void (**)(void *__return_ptr, uint64_t, uint64_t))(v10 + 464);
  swift_unknownObjectRetain();
  v14(v88, ObjectType, v10);
  swift_unknownObjectRelease();
  outlined init with take of LocalePreferences?( (uint64_t)v88,  (uint64_t)v89,  (uint64_t *)&demangling cache variable for type metadata for LocalePreferences?);
  outlined init with take of LocalePreferences?( (uint64_t)v89,  (uint64_t)v90,  (uint64_t *)&demangling cache variable for type metadata for LocalePreferences?);
  if (_s10Foundation17LocalePreferencesVSgWOg((uint64_t)v90) == 1)
  {
    Swift::UInt8 v13 = 0;
    goto LABEL_5;
  }

  outlined init with take of LocalePreferences?( (uint64_t)v89,  (uint64_t)v70,  (uint64_t *)&demangling cache variable for type metadata for LocalePreferences?);
  Hasher._combine(_:)(1u);
  if (v70[0] == 2)
  {
    unint64_t v17 = 0;
  }

  else
  {
    unint64_t v17 = v70[0] & 1;
    Hasher._combine(_:)(1u);
  }

  Hasher._combine(_:)(v17);
  Swift::String v18 = v71;
  char v64 = v6;
  if (!v71)
  {
    Hasher._combine(_:)(0);
    uint64_t v23 = v70;
    goto LABEL_20;
  }

  Hasher._combine(_:)(1u);
  Hasher._combine(_:)(*(void *)(v18 + 16));
  uint64_t v19 = *(void *)(v18 + 16);
  if (!v19)
  {
    outlined init with take of LocalePreferences?( (uint64_t)v89,  (uint64_t)v69,  (uint64_t *)&demangling cache variable for type metadata for LocalePreferences?);
    uint64_t v23 = v69;
LABEL_20:
    outlined retain of LocalePreferences(v23);
    if (!v72) {
      goto LABEL_14;
    }
    goto LABEL_21;
  }

  outlined retain of LocalePreferences?( (uint64_t)v89,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined copy of LocalePreferences?);
  swift_bridgeObjectRetain();
  uint64_t v20 = v18 + 40;
  do
  {
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    v20 += 16LL;
    --v19;
  }

  while (v19);
  swift_bridgeObjectRelease();
  if (!v72)
  {
LABEL_14:
    Hasher._combine(_:)(0);
    if (!v73) {
      goto LABEL_15;
    }
    goto LABEL_22;
  }

uint64_t Measurement<>.FormatStyle.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x6874646977LL && a2 == 0xE500000000000000LL;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0LL;
  }

  else if (a1 == 0x656C61636F6CLL && a2 == 0xE600000000000000LL {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1LL;
  }

  else if (a1 == 0xD000000000000011LL && a2 == 0x80000001839CD1C0LL {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 2LL;
  }

  else if (a1 == 0x6567617375LL && a2 == 0xE500000000000000LL {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 3LL;
  }

  else if (a1 == 0x635373656469685FLL && a2 == 0xEF656D614E656C61LL)
  {
    swift_bridgeObjectRelease();
    return 4LL;
  }

  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0) {
      return 4LL;
    }
    else {
      return 5LL;
    }
  }

uint64_t Measurement<>.FormatStyle.CodingKeys.stringValue.getter(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_183174FC8 + 4 * byte_1837AD390[a1]))( 0x6874646977LL,  0xE500000000000000LL);
}

uint64_t sub_183174FC8()
{
  return 0x656C61636F6CLL;
}

unint64_t sub_183174FDC()
{
  return 0xD000000000000011LL;
}

uint64_t sub_183174FF8()
{
  return 0x6567617375LL;
}

uint64_t sub_183175008()
{
  return 0x635373656469685FLL;
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance Measurement<A><>.FormatStyle.CodingKeys( char *a1, char *a2)
{
  return static FloatingPointParseStrategy.CodingKeys.== infix(_:_:)(*a1, *a2);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance Measurement<A><>.FormatStyle.CodingKeys()
{
  return FloatingPointParseStrategy.CodingKeys.hashValue.getter(*v0);
}

void protocol witness for Hashable.hash(into:) in conformance Measurement<A><>.FormatStyle.CodingKeys( uint64_t a1)
{
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance Measurement<A><>.FormatStyle.CodingKeys()
{
  return Hasher._finalize()();
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance Measurement<A><>.FormatStyle.CodingKeys()
{
  return Measurement<>.FormatStyle.CodingKeys.stringValue.getter(*v0);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance Measurement<A><>.FormatStyle.CodingKeys@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result = Measurement<>.FormatStyle.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CodingKey.init(intValue:) in conformance Measurement<A><>.FormatStyle.CodingKeys@<X0>( _BYTE *a1@<X8>)
{
  uint64_t result = specialized Measurement<>.FormatStyle.CodingKeys.init(intValue:)();
  *a1 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance Measurement<A><>.FormatStyle.CodingKeys( uint64_t a1)
{
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance Measurement<A><>.FormatStyle.CodingKeys( uint64_t a1)
{
  return CodingKey.debugDescription.getter();
}

uint64_t Measurement<>.FormatStyle.encode(to:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v23 = a2;
  uint64_t v5 = *(void *)(a2 + 16);
  uint64_t v6 = type metadata accessor for Measurement<>.FormatStyle.CodingKeys(255LL, v5, a3, a4);
  MEMORY[0x186E20D4C](&protocol conformance descriptor for Measurement<A><>.FormatStyle.CodingKeys, v6);
  uint64_t v7 = type metadata accessor for KeyedEncodingContainer();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x1895F8858](v7);
  uint64_t v10 = (char *)&v22 - v9;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  uint64_t v11 = v5;
  uint64_t v12 = v24;
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  LOBYTE(v26) = *(_BYTE *)v12;
  char v27 = 0;
  uint64_t v15 = type metadata accessor for Measurement<>.FormatStyle.UnitWidth(0LL, v11, v13, v14);
  MEMORY[0x186E20D4C](&protocol conformance descriptor for Measurement<A><>.FormatStyle.UnitWidth, v15);
  uint64_t v16 = v25;
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v16)
  {
    uint64_t v17 = v23;
    __int128 v26 = *(_OWORD *)(v12 + 8);
    char v27 = 1;
    lazy protocol witness table accessor for type Locale and conformance Locale();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    LOBYTE(v26) = 2;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointFormatStyle<Double>);
    lazy protocol witness table accessor for type FloatingPointFormatStyle<Double> and conformance FloatingPointFormatStyle<A>( &lazy protocol witness table cache variable for type FloatingPointFormatStyle<Double> and conformance FloatingPointFormatStyle<A>,  (uint64_t)&protocol conformance descriptor for FloatingPointFormatStyle<A>);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    LOBYTE(v26) = *(_BYTE *)(v12 + *(int *)(v17 + 36));
    char v27 = 3;
    uint64_t v20 = type metadata accessor for MeasurementFormatUnitUsage(0LL, v11, v18, v19);
    MEMORY[0x186E20D4C](&protocol conformance descriptor for MeasurementFormatUnitUsage<A>, v20);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    LOBYTE(v26) = 4;
    KeyedEncodingContainer.encode(_:forKey:)();
  }

  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v10, v7);
}

Swift::Int Measurement<>.FormatStyle.hashValue.getter(int *a1)
{
  void (*v13)(void *__return_ptr, uint64_t, uint64_t);
  uint64_t v14;
  Swift::UInt8 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  id v29;
  id v30;
  id v31;
  id v32;
  id v33;
  id v34;
  id v35;
  id v36;
  id v37;
  id v38;
  void *v39;
  id v40;
  void *v41;
  id v42;
  void *v43;
  id v44;
  void *v45;
  uint64_t v46;
  uint64_t v47;
  Swift::UInt v48;
  Swift::UInt v49;
  Swift::UInt8 v50;
  Swift::UInt8 v51;
  Swift::UInt8 v52;
  uint64_t v53;
  int v54;
  uint64_t v56;
  void *v57;
  void *v58;
  char *v59;
  int *v60;
  id v61;
  uint64_t v62;
  void *v63;
  uint64_t v64;
  uint64_t v65;
  _BYTE v66[144];
  char v67[8];
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  void *v73;
  void *v74;
  void *v75;
  void *v76;
  void *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  char v81;
  char v82;
  char v83;
  char v84;
  void v85[18];
  _BYTE v86[144];
  _BYTE v87[144];
  _BYTE v88[80];
  BOOL v2 = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointFormatStyle<Double>);
  unint64_t v65 = *(void *)(v4 - 8);
  MEMORY[0x1895F8858](v4);
  char v64 = (uint64_t)&v56 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointFormatStyle<Double>?);
  MEMORY[0x1895F8858](v6);
  uint64_t v8 = (char *)&v56 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  Hasher.init(_seed:)();
  Hasher._combine(_:)(*v1);
  uint64_t v9 = *((void *)v1 + 2);
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t))(v9 + 48);
  swift_unknownObjectRetain();
  if ((v11(ObjectType, v9) & 1) != 0)
  {
    Swift::UInt8 v12 = 1;
LABEL_5:
    Hasher._combine(_:)(v12);
    swift_unknownObjectRelease();
    uint64_t v14 = v65;
    goto LABEL_59;
  }

  Hasher._combine(_:)(0);
  (*(void (**)(uint64_t, uint64_t))(v9 + 64))(ObjectType, v9);
  String.hash(into:)();
  swift_bridgeObjectRelease();
  uint64_t v13 = *(void (**)(void *__return_ptr, uint64_t, uint64_t))(v9 + 464);
  swift_unknownObjectRetain();
  v13(v85, ObjectType, v9);
  swift_unknownObjectRelease();
  outlined init with take of LocalePreferences?( (uint64_t)v85,  (uint64_t)v86,  (uint64_t *)&demangling cache variable for type metadata for LocalePreferences?);
  outlined init with take of LocalePreferences?( (uint64_t)v86,  (uint64_t)v87,  (uint64_t *)&demangling cache variable for type metadata for LocalePreferences?);
  if (_s10Foundation17LocalePreferencesVSgWOg((uint64_t)v87) == 1)
  {
    Swift::UInt8 v12 = 0;
    goto LABEL_5;
  }

  outlined init with take of LocalePreferences?( (uint64_t)v86,  (uint64_t)v67,  (uint64_t *)&demangling cache variable for type metadata for LocalePreferences?);
  Hasher._combine(_:)(1u);
  if (v67[0] == 2)
  {
    uint64_t v15 = 0;
  }

  else
  {
    uint64_t v15 = v67[0] & 1;
    Hasher._combine(_:)(1u);
  }

  Hasher._combine(_:)(v15);
  uint64_t v16 = v68;
  unint64_t v62 = v4;
  if (!v68)
  {
    Hasher._combine(_:)(0);
    uint64_t v21 = v67;
    goto LABEL_20;
  }

  Hasher._combine(_:)(1u);
  Hasher._combine(_:)(*(void *)(v16 + 16));
  uint64_t v17 = *(void *)(v16 + 16);
  if (!v17)
  {
    outlined init with take of LocalePreferences?( (uint64_t)v86,  (uint64_t)v66,  (uint64_t *)&demangling cache variable for type metadata for LocalePreferences?);
    uint64_t v21 = v66;
LABEL_20:
    outlined retain of LocalePreferences(v21);
    if (!v69) {
      goto LABEL_14;
    }
    goto LABEL_21;
  }

  outlined retain of LocalePreferences?( (uint64_t)v86,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined copy of LocalePreferences?);
  swift_bridgeObjectRetain();
  uint64_t v18 = v16 + 40;
  do
  {
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    v18 += 16LL;
    --v17;
  }

  while (v17);
  swift_bridgeObjectRelease();
  if (!v69)
  {
LABEL_14:
    Hasher._combine(_:)(0);
    if (!v70) {
      goto LABEL_15;
    }
    goto LABEL_22;
  }

uint64_t Measurement<>.FormatStyle.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v45 = a3;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointFormatStyle<Double>?);
  MEMORY[0x1895F8858](v5);
  uint64_t v48 = (char *)&v41 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = type metadata accessor for Measurement<>.FormatStyle.CodingKeys(255LL, a2, v7, v8);
  uint64_t v53 = MEMORY[0x186E20D4C](&protocol conformance descriptor for Measurement<A><>.FormatStyle.CodingKeys, v9);
  uint64_t v50 = type metadata accessor for KeyedDecodingContainer();
  uint64_t v47 = *(void *)(v50 - 8);
  MEMORY[0x1895F8858](v50);
  uint64_t v11 = (char *)&v41 - v10;
  uint64_t v49 = a2;
  uint64_t v14 = type metadata accessor for Measurement<>.FormatStyle(0LL, a2, v12, v13);
  uint64_t v44 = *(void *)(v14 - 8);
  uint64_t v15 = MEMORY[0x1895F8858](v14);
  uint64_t v17 = (char *)&v41 - v16;
  uint64_t v18 = (char *)&v41 + *(int *)(v15 + 32) - v16;
  uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointFormatStyle<Double>);
  uint64_t v20 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v19 - 8) + 56LL);
  uint64_t v52 = v18;
  v20(v18, 1LL, 1LL, v19);
  uint64_t v46 = *(int *)(v14 + 36);
  v17[v46] = 14;
  uint64_t v21 = *(int *)(v14 + 40);
  v17[v21] = 0;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  char v51 = v11;
  uint64_t v22 = v54;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  uint64_t v25 = a1;
  if (v22)
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
    return outlined destroy of Any?( (uint64_t)v52,  &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>?);
  }

  else
  {
    uint64_t v53 = v14;
    uint64_t v54 = v19;
    uint64_t v43 = v21;
    uint64_t v27 = v47;
    uint64_t v26 = (uint64_t)v48;
    uint64_t v28 = (uint64_t)v25;
    uint64_t v29 = v49;
    uint64_t v30 = type metadata accessor for Measurement<>.FormatStyle.UnitWidth(0LL, v49, v23, v24);
    char v56 = 0;
    MEMORY[0x186E20D4C](&protocol conformance descriptor for Measurement<A><>.FormatStyle.UnitWidth, v30);
    uint64_t v31 = v50;
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    *uint64_t v17 = v55;
    char v56 = 1;
    lazy protocol witness table accessor for type Locale and conformance Locale();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    char v42 = v17;
    *(_OWORD *)(v17 + 8) = v55;
    LOBYTE(v55) = 2;
    lazy protocol witness table accessor for type FloatingPointFormatStyle<Double> and conformance FloatingPointFormatStyle<A>( &lazy protocol witness table cache variable for type FloatingPointFormatStyle<Double> and conformance FloatingPointFormatStyle<A>,  (uint64_t)&protocol conformance descriptor for FloatingPointFormatStyle<A>);
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    outlined assign with take of FloatingPointFormatStyle<Double>?(v26, (uint64_t)v52);
    uint64_t v34 = type metadata accessor for MeasurementFormatUnitUsage(0LL, v29, v32, v33);
    char v56 = 3;
    MEMORY[0x186E20D4C](&protocol conformance descriptor for MeasurementFormatUnitUsage<A>, v34);
    uint64_t v35 = v51;
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    unint64_t v36 = v42;
    v42[v46] = v55;
    LOBYTE(v55) = 4;
    char v37 = KeyedDecodingContainer.decode(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v27 + 8))(v35, v31);
    uint64_t v38 = v44;
    v36[v43] = v37 & 1;
    uint64_t v39 = v53;
    (*(void (**)(uint64_t, char *, uint64_t))(v38 + 16))(v45, v36, v53);
    __swift_destroy_boxed_opaque_existential_1(v28);
    return (*(uint64_t (**)(char *, uint64_t))(v38 + 8))(v36, v39);
  }

uint64_t protocol witness for FormatStyle.format(_:) in conformance Measurement<A><>.FormatStyle@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t result = Measurement<>.FormatStyle.format(_:)(a1, a2);
  *a3 = result;
  a3[1] = v5;
  return result;
}

uint64_t protocol witness for Decodable.init(from:) in conformance Measurement<A><>.FormatStyle@<X0>( void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return Measurement<>.FormatStyle.init(from:)(a1, *(void *)(a2 + 16), a3);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance Measurement<A><>.FormatStyle( void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return Measurement<>.FormatStyle.encode(to:)(a1, a2, a3, a4);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance Measurement<A><>.FormatStyle( uint64_t a1, int *a2)
{
  return Hasher._finalize()();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance Measurement<A><>.FormatStyle( unsigned __int8 *a1, unsigned __int8 *a2, uint64_t a3)
{
  return static Measurement<>.FormatStyle.== infix(_:_:)(a1, a2, *(void *)(a3 + 16));
}

uint64_t Measurement<>.FormatStyle<>.hidesScaleName.getter()
{
  return *(unsigned __int8 *)(v0
}

uint64_t Measurement<>.FormatStyle<>.hidesScaleName.setter(char a1)
{
  uint64_t result = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Measurement<NSUnitTemperature><>.FormatStyle);
  *(_BYTE *)(v1 + *(int *)(result + 40)) = a1;
  return result;
}

uint64_t (*Measurement<>.FormatStyle<>.hidesScaleName.modify(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  *(_BYTE *)(a1 + 12) = *(_BYTE *)(v1 + v3);
  *(_DWORD *)(a1 + 8) = v3;
  return Measurement<>.FormatStyle<>.hidesScaleName.modify;
}

uint64_t Measurement<>.FormatStyle<>.hidesScaleName.modify(uint64_t result)
{
  *(_BYTE *)(*(void *)result + *(int *)(result + 8)) = *(_BYTE *)(result + 12);
  return result;
}

uint64_t Measurement<>.FormatStyle<>.init(width:locale:usage:hidesScaleName:numberFormatStyle:)@<X0>( char *a1@<X0>, _OWORD *a2@<X1>, char *a3@<X2>, char a4@<W3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  char v10 = *a1;
  char v11 = *a3;
  uint64_t v12 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Measurement<NSUnitTemperature><>.FormatStyle);
  uint64_t v13 = a6 + v12[8];
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointFormatStyle<Double>);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 56LL))(v13, 1LL, 1LL, v14);
  uint64_t v15 = v12[9];
  uint64_t v16 = v12[10];
  *(_BYTE *)(a6 + v16) = 0;
  *(_BYTE *)a6 = v10;
  *(_OWORD *)(a6 + 8) = *a2;
  *(_BYTE *)(a6 + v15) = v11;
  uint64_t result = outlined assign with take of FloatingPointFormatStyle<Double>?(a5, v13);
  *(_BYTE *)(a6 + v16) = a4;
  return result;
}

void Measurement<>.FormatStyle<>.ByteCount.style.getter(_BYTE *a1@<X8>)
{
  *a1 = *v1;
}

_BYTE *Measurement<>.FormatStyle<>.ByteCount.style.setter(_BYTE *result)
{
  *uint64_t v1 = *result;
  return result;
}

uint64_t (*Measurement<>.FormatStyle<>.ByteCount.style.modify())()
{
  return destructiveProjectEnumData for PredicateCodableError;
}

void Measurement<>.FormatStyle<>.ByteCount.allowedUnits.getter(void *a1@<X8>)
{
  *a1 = *(void *)(v1 + 8);
}

void *Measurement<>.FormatStyle<>.ByteCount.allowedUnits.setter(void *result)
{
  *(void *)(v1 + 8) = *result;
  return result;
}

uint64_t (*Measurement<>.FormatStyle<>.ByteCount.allowedUnits.modify())()
{
  return destructiveProjectEnumData for PredicateCodableError;
}

uint64_t Measurement<>.FormatStyle<>.ByteCount.spellsOutZero.getter()
{
  return *(unsigned __int8 *)(v0 + 16);
}

uint64_t Measurement<>.FormatStyle<>.ByteCount.spellsOutZero.setter(uint64_t result)
{
  *(_BYTE *)(v1 + 16) = result;
  return result;
}

uint64_t (*Measurement<>.FormatStyle<>.ByteCount.spellsOutZero.modify())()
{
  return destructiveProjectEnumData for PredicateCodableError;
}

uint64_t Measurement<>.FormatStyle<>.ByteCount.includesActualByteCount.getter()
{
  return *(unsigned __int8 *)(v0 + 17);
}

uint64_t Measurement<>.FormatStyle<>.ByteCount.includesActualByteCount.setter(uint64_t result)
{
  *(_BYTE *)(v1 + 17) = result;
  return result;
}

uint64_t (*Measurement<>.FormatStyle<>.ByteCount.includesActualByteCount.modify())()
{
  return destructiveProjectEnumData for PredicateCodableError;
}

uint64_t Measurement<>.FormatStyle<>.ByteCount.locale.getter@<X0>(_OWORD *a1@<X8>)
{
  *a1 = *(_OWORD *)(v1 + 24);
  return swift_unknownObjectRetain();
}

__n128 Measurement<>.FormatStyle<>.ByteCount.locale.setter(__n128 *a1)
{
  __n128 result = *a1;
  *(__n128 *)(v1 + 24) = *a1;
  return result;
}

uint64_t (*Measurement<>.FormatStyle<>.ByteCount.locale.modify())()
{
  return destructiveProjectEnumData for PredicateCodableError;
}

uint64_t Measurement<>.FormatStyle<>.ByteCount.attributed.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = *(void *)(v1 + 8);
  char v3 = *(_BYTE *)(v1 + 16);
  char v4 = *(_BYTE *)(v1 + 17);
  *(_BYTE *)a1 = *(_BYTE *)v1;
  *(void *)(a1 + 8) = v2;
  *(_BYTE *)(a1 + 16) = v3;
  *(_BYTE *)(a1 + 17) = v4;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(v1 + 24);
  return swift_unknownObjectRetain();
}

__n128 Measurement<>.FormatStyle<>.ByteCount.init(style:allowedUnits:spellsOutZero:includesActualByteCount:locale:)@<Q0>( _BYTE *a1@<X0>, uint64_t *a2@<X1>, char a3@<W2>, char a4@<W3>, __n128 *a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v6 = *a2;
  *(_BYTE *)a6 = *a1;
  *(void *)(a6 + 8) = v6;
  *(_BYTE *)(a6 + 16) = a3;
  *(_BYTE *)(a6 + 17) = a4;
  __n128 result = *a5;
  *(__n128 *)(a6 + 24) = *a5;
  return result;
}

uint64_t Measurement<>.FormatStyle<>.ByteCount.format(_:)(double *a1)
{
  double v2 = *a1;
  double v3 = a1[1];
  char v4 = *v1;
  double v5 = *((double *)v1 + 1);
  char v6 = v1[16];
  char v7 = v1[17];
  uint64_t v8 = (void *)objc_opt_self();
  __int128 v26 = *(_OWORD *)(v1 + 24);
  swift_unknownObjectRetain();
  id v9 = objc_msgSend(v8, sel_bytes);
  specialized Measurement<>.converted(to:)(&v27, v9, *(void *)&v2, v3);

  char v10 = v27;
  double v11 = v28;
  LOBYTE(v27) = v4;
  double v28 = v5;
  LOBYTE(v29) = v6;
  BYTE1(v29) = v7;
  __int128 v30 = v26;
  swift_unknownObjectRetain();
  ByteCountFormatStyle.Attributed._format(_:doubleValue:)((uint64_t *)&v36, v11);
  swift_unknownObjectRelease_n();

  uint64_t v12 = v36;
  __int128 v13 = v36[2];
  __int128 v37 = v36[1];
  __int128 v38 = v13;
  __int128 v39 = v36[3];
  *(double *)&uint64_t v14 = COERCE_DOUBLE(BigString.startIndex.getter());
  uint64_t v16 = v15;
  uint64_t v18 = v17;
  uint64_t v20 = v19;
  uint64_t v21 = BigString.endIndex.getter();
  uint64_t v27 = v12;
  double v28 = *(double *)&v14;
  uint64_t v29 = v16;
  *(void *)&__int128 v30 = v18;
  *((void *)&v30 + 1) = v20;
  uint64_t v31 = v21;
  uint64_t v32 = v22;
  uint64_t v33 = v23;
  uint64_t v34 = v24;
  uint64_t v35 = 0LL;
  lazy protocol witness table accessor for type AttributedString.CharacterView and conformance AttributedString.CharacterView();
  return String.init<A>(_:)();
}

uint64_t Measurement<>.FormatStyle<>.ByteCount.locale(_:)@<X0>(_OWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *(void *)(v2 + 8);
  char v4 = *(_BYTE *)(v2 + 16);
  char v5 = *(_BYTE *)(v2 + 17);
  *(_BYTE *)a2 = *(_BYTE *)v2;
  *(void *)(a2 + 8) = v3;
  *(_BYTE *)(a2 + 16) = v4;
  *(_BYTE *)(a2 + 17) = v5;
  *(_OWORD *)(a2 + 24) = *a1;
  return swift_unknownObjectRetain();
}

uint64_t Measurement<>.FormatStyle<>.ByteCount.hash(into:)(uint64_t a1)
{
  void (*v10)(void *__return_ptr, uint64_t, uint64_t);
  Swift::UInt8 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  id v23;
  id v24;
  id v25;
  id v26;
  id v27;
  id v28;
  id v29;
  id v30;
  id v31;
  id v32;
  id v33;
  id v34;
  id v35;
  uint64_t v36;
  uint64_t v37;
  Swift::UInt v38;
  Swift::UInt v39;
  Swift::UInt8 v40;
  Swift::UInt8 v41;
  Swift::UInt8 v42;
  _BYTE v43[144];
  _BYTE v44[8];
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  void *v50;
  void *v51;
  void *v52;
  void *v53;
  void *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char v58;
  char v59;
  char v60;
  char v61;
  void v62[18];
  _BYTE v63[144];
  _BYTE v64[152];
  Swift::UInt v3 = *((void *)v1 + 1);
  Swift::UInt8 v4 = v1[16];
  Swift::UInt8 v5 = v1[17];
  uint64_t v6 = *((void *)v1 + 4);
  Hasher._combine(_:)(*v1);
  Hasher._combine(_:)(v3);
  Hasher._combine(_:)(v4);
  Hasher._combine(_:)(v5);
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t))(v6 + 48);
  swift_unknownObjectRetain();
  if ((v8(ObjectType, v6) & 1) != 0)
  {
    Hasher._combine(_:)(1u);
    return swift_unknownObjectRelease();
  }

  Hasher._combine(_:)(0);
  (*(void (**)(uint64_t, uint64_t))(v6 + 64))(ObjectType, v6);
  String.hash(into:)();
  swift_bridgeObjectRelease();
  char v10 = *(void (**)(void *__return_ptr, uint64_t, uint64_t))(v6 + 464);
  swift_unknownObjectRetain();
  v10(v62, ObjectType, v6);
  swift_unknownObjectRelease();
  outlined init with take of LocalePreferences?( (uint64_t)v62,  (uint64_t)v63,  (uint64_t *)&demangling cache variable for type metadata for LocalePreferences?);
  outlined init with take of LocalePreferences?( (uint64_t)v63,  (uint64_t)v64,  (uint64_t *)&demangling cache variable for type metadata for LocalePreferences?);
  if (_s10Foundation17LocalePreferencesVSgWOg((uint64_t)v64) != 1)
  {
    outlined init with take of LocalePreferences?( (uint64_t)v63,  (uint64_t)v44,  (uint64_t *)&demangling cache variable for type metadata for LocalePreferences?);
    Hasher._combine(_:)(1u);
    if (v44[0] == 2)
    {
      double v11 = 0;
    }

    else
    {
      double v11 = v44[0] & 1;
      Hasher._combine(_:)(1u);
    }

    Hasher._combine(_:)(v11);
    uint64_t v12 = v45;
    if (v45)
    {
      Hasher._combine(_:)(1u);
      Hasher._combine(_:)(*(void *)(v12 + 16));
      __int128 v13 = *(void *)(v12 + 16);
      if (v13)
      {
        outlined retain of LocalePreferences?( (uint64_t)v63,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined copy of LocalePreferences?);
        swift_bridgeObjectRetain();
        uint64_t v14 = v12 + 40;
        do
        {
          swift_bridgeObjectRetain();
          String.hash(into:)();
          swift_bridgeObjectRelease();
          v14 += 16LL;
          --v13;
        }

        while (v13);
        swift_bridgeObjectRelease();
        if (!v46)
        {
LABEL_13:
          Hasher._combine(_:)(0);
          if (!v47) {
            goto LABEL_14;
          }
          goto LABEL_21;
        }

uint64_t protocol witness for CodingKey.stringValue.getter in conformance Measurement<A><>.FormatStyle<>.ByteCount.CodingKeys()
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_183176DA0 + 4 * byte_1837AD395[*v0]))( 0x656C797473LL,  0xE500000000000000LL);
}

uint64_t sub_183176DA0()
{
  return 0x556465776F6C6C61LL;
}

uint64_t sub_183176DC0()
{
  return 0x754F736C6C657073LL;
}

unint64_t sub_183176DE4()
{
  return 0xD000000000000017LL;
}

uint64_t sub_183176E00()
{
  return 0x656C61636F6CLL;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance Measurement<A><>.FormatStyle<>.ByteCount.CodingKeys@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result = specialized Measurement<>.FormatStyle<>.ByteCount.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance Measurement<A><>.FormatStyle<>.ByteCount.CodingKeys()
{
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance Measurement<A><>.FormatStyle<>.ByteCount.CodingKeys()
{
  return CodingKey.debugDescription.getter();
}

uint64_t Measurement<>.FormatStyle<>.ByteCount.encode(to:)(void *a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<Measurement<NSUnitInformationStorage><>.FormatStyle<>.ByteCount.CodingKeys>);
  uint64_t v13 = *(void *)(v3 - 8);
  MEMORY[0x1895F8858](v3);
  Swift::UInt8 v5 = (char *)&v10 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  char v6 = *v1;
  uint64_t v12 = *((void *)v1 + 1);
  int v16 = v1[16];
  int v11 = v1[17];
  __int128 v10 = *(_OWORD *)(v1 + 24);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  type metadata accessor for Measurement<NSUnitInformationStorage><>.AttributedStyle<>.ByteCount.CodingKeys( 0LL,  &lazy cache variable for type metadata for Measurement<NSUnitInformationStorage><>.FormatStyle<>.ByteCount.CodingKeys,  (uint64_t (*)(void))type metadata accessor for Measurement<>.FormatStyle<>.ByteCount.CodingKeys);
  lazy protocol witness table accessor for type Measurement<NSUnitInformationStorage><>.AttributedStyle<>.ByteCount.CodingKeys and conformance Measurement<A><>.AttributedStyle<>.ByteCount.CodingKeys( &lazy protocol witness table cache variable for type Measurement<NSUnitInformationStorage><>.FormatStyle<>.ByteCount.CodingKeys and conformance Measurement<A><>.FormatStyle<>.ByteCount.CodingKeys,  &lazy cache variable for type metadata for Measurement<NSUnitInformationStorage><>.FormatStyle<>.ByteCount.CodingKeys,  (uint64_t (*)(void))type metadata accessor for Measurement<>.FormatStyle<>.ByteCount.CodingKeys,  (uint64_t)&protocol conformance descriptor for Measurement<A><>.FormatStyle<>.ByteCount.CodingKeys);
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  LOBYTE(v15) = v6;
  char v17 = 0;
  lazy protocol witness table accessor for type ByteCountFormatStyle.Style and conformance ByteCountFormatStyle.Style();
  uint64_t v7 = v14;
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (v7) {
    return (*(uint64_t (**)(char *, uint64_t))(v13 + 8))(v5, v3);
  }
  uint64_t v9 = v13;
  *(void *)&__int128 v15 = v12;
  char v17 = 1;
  lazy protocol witness table accessor for type ByteCountFormatStyle.Units and conformance ByteCountFormatStyle.Units();
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  LOBYTE(v15) = 2;
  KeyedEncodingContainer.encode(_:forKey:)();
  LOBYTE(v15) = 3;
  KeyedEncodingContainer.encode(_:forKey:)();
  __int128 v15 = v10;
  char v17 = 4;
  lazy protocol witness table accessor for type Locale and conformance Locale();
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v5, v3);
}

Swift::Int Measurement<>.FormatStyle<>.ByteCount.hashValue.getter()
{
  void (*v9)(void *__return_ptr, uint64_t, uint64_t);
  Swift::UInt8 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _BYTE *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  id v22;
  id v23;
  id v24;
  id v25;
  id v26;
  id v27;
  id v28;
  id v29;
  id v30;
  id v31;
  id v32;
  id v33;
  id v34;
  uint64_t v35;
  uint64_t v36;
  Swift::UInt v37;
  Swift::UInt v38;
  Swift::UInt8 v39;
  Swift::UInt8 v40;
  Swift::UInt8 v41;
  _BYTE v43[144];
  _BYTE v44[8];
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  void *v50;
  void *v51;
  void *v52;
  void *v53;
  void *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char v58;
  char v59;
  char v60;
  char v61;
  void v62[18];
  _BYTE v63[144];
  _BYTE v64[144];
  _BYTE v65[72];
  Swift::UInt v1 = *v0;
  Swift::UInt v2 = *((void *)v0 + 1);
  Swift::UInt8 v3 = v0[16];
  Swift::UInt8 v4 = v0[17];
  uint64_t v5 = *((void *)v0 + 4);
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
  Hasher._combine(_:)(v3);
  Hasher._combine(_:)(v4);
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 48);
  swift_unknownObjectRetain();
  if ((v7(ObjectType, v5) & 1) != 0)
  {
    Swift::UInt8 v8 = 1;
LABEL_5:
    Hasher._combine(_:)(v8);
    goto LABEL_56;
  }

  Hasher._combine(_:)(0);
  (*(void (**)(uint64_t, uint64_t))(v5 + 64))(ObjectType, v5);
  String.hash(into:)();
  swift_bridgeObjectRelease();
  uint64_t v9 = *(void (**)(void *__return_ptr, uint64_t, uint64_t))(v5 + 464);
  swift_unknownObjectRetain();
  v9(v62, ObjectType, v5);
  swift_unknownObjectRelease();
  outlined init with take of LocalePreferences?( (uint64_t)v62,  (uint64_t)v63,  (uint64_t *)&demangling cache variable for type metadata for LocalePreferences?);
  outlined init with take of LocalePreferences?( (uint64_t)v63,  (uint64_t)v64,  (uint64_t *)&demangling cache variable for type metadata for LocalePreferences?);
  if (_s10Foundation17LocalePreferencesVSgWOg((uint64_t)v64) == 1)
  {
    Swift::UInt8 v8 = 0;
    goto LABEL_5;
  }

  outlined init with take of LocalePreferences?( (uint64_t)v63,  (uint64_t)v44,  (uint64_t *)&demangling cache variable for type metadata for LocalePreferences?);
  Hasher._combine(_:)(1u);
  if (v44[0] == 2)
  {
    __int128 v10 = 0;
  }

  else
  {
    __int128 v10 = v44[0] & 1;
    Hasher._combine(_:)(1u);
  }

  Hasher._combine(_:)(v10);
  int v11 = v45;
  if (!v45)
  {
    Hasher._combine(_:)(0);
    int v16 = v44;
    goto LABEL_20;
  }

  Hasher._combine(_:)(1u);
  Hasher._combine(_:)(*(void *)(v11 + 16));
  uint64_t v12 = *(void *)(v11 + 16);
  if (!v12)
  {
    outlined init with take of LocalePreferences?( (uint64_t)v63,  (uint64_t)v43,  (uint64_t *)&demangling cache variable for type metadata for LocalePreferences?);
    int v16 = v43;
LABEL_20:
    outlined retain of LocalePreferences(v16);
    if (!v46) {
      goto LABEL_14;
    }
    goto LABEL_21;
  }

  outlined retain of LocalePreferences?( (uint64_t)v63,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined copy of LocalePreferences?);
  swift_bridgeObjectRetain();
  uint64_t v13 = v11 + 40;
  do
  {
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    v13 += 16LL;
    --v12;
  }

  while (v12);
  swift_bridgeObjectRelease();
  if (!v46)
  {
LABEL_14:
    Hasher._combine(_:)(0);
    if (!v47) {
      goto LABEL_15;
    }
    goto LABEL_22;
  }

uint64_t Measurement<>.FormatStyle<>.ByteCount.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v18 = a2;
  uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<Measurement<NSUnitInformationStorage><>.FormatStyle<>.ByteCount.CodingKeys>);
  uint64_t v4 = *(void *)(v19 - 8);
  MEMORY[0x1895F8858](v19);
  char v6 = (char *)&v17 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = a1[3];
  uint64_t v20 = a1;
  __swift_project_boxed_opaque_existential_1(a1, v7);
  type metadata accessor for Measurement<NSUnitInformationStorage><>.AttributedStyle<>.ByteCount.CodingKeys( 0LL,  &lazy cache variable for type metadata for Measurement<NSUnitInformationStorage><>.FormatStyle<>.ByteCount.CodingKeys,  (uint64_t (*)(void))type metadata accessor for Measurement<>.FormatStyle<>.ByteCount.CodingKeys);
  lazy protocol witness table accessor for type Measurement<NSUnitInformationStorage><>.AttributedStyle<>.ByteCount.CodingKeys and conformance Measurement<A><>.AttributedStyle<>.ByteCount.CodingKeys( &lazy protocol witness table cache variable for type Measurement<NSUnitInformationStorage><>.FormatStyle<>.ByteCount.CodingKeys and conformance Measurement<A><>.FormatStyle<>.ByteCount.CodingKeys,  &lazy cache variable for type metadata for Measurement<NSUnitInformationStorage><>.FormatStyle<>.ByteCount.CodingKeys,  (uint64_t (*)(void))type metadata accessor for Measurement<>.FormatStyle<>.ByteCount.CodingKeys,  (uint64_t)&protocol conformance descriptor for Measurement<A><>.FormatStyle<>.ByteCount.CodingKeys);
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v2)
  {
    uint64_t v8 = v4;
    uint64_t v9 = v18;
    char v23 = 0;
    lazy protocol witness table accessor for type ByteCountFormatStyle.Style and conformance ByteCountFormatStyle.Style();
    uint64_t v10 = v19;
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    char v11 = v21;
    char v23 = 1;
    lazy protocol witness table accessor for type ByteCountFormatStyle.Units and conformance ByteCountFormatStyle.Units();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    uint64_t v12 = v21;
    LOBYTE(v21) = 2;
    char v13 = KeyedDecodingContainer.decode(_:forKey:)();
    LOBYTE(v21) = 3;
    int v22 = KeyedDecodingContainer.decode(_:forKey:)();
    char v23 = 4;
    lazy protocol witness table accessor for type Locale and conformance Locale();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v8 + 8))(v6, v10);
    __int128 v15 = v21;
    char v16 = v22 & 1;
    *(_BYTE *)uint64_t v9 = v11;
    *(void *)(v9 + 8) = v12;
    *(_BYTE *)(v9 + 16) = v13 & 1;
    *(_BYTE *)(v9 + 17) = v16;
    *(_OWORD *)(v9 + 24) = v15;
  }

  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v20);
}

uint64_t protocol witness for FormatStyle.format(_:) in conformance Measurement<A><>.FormatStyle<>.ByteCount@<X0>( double *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = Measurement<>.FormatStyle<>.ByteCount.format(_:)(a1);
  *a2 = result;
  a2[1] = v4;
  return result;
}

uint64_t protocol witness for Decodable.init(from:) in conformance Measurement<A><>.FormatStyle<>.ByteCount@<X0>( void *a1@<X0>, uint64_t a2@<X8>)
{
  return Measurement<>.FormatStyle<>.ByteCount.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance Measurement<A><>.FormatStyle<>.ByteCount( void *a1)
{
  return Measurement<>.FormatStyle<>.ByteCount.encode(to:)(a1);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance Measurement<A><>.FormatStyle<>.ByteCount()
{
  void (*v9)(void *__return_ptr, uint64_t, uint64_t);
  Swift::UInt8 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  id v21;
  id v22;
  id v23;
  id v24;
  id v25;
  id v26;
  id v27;
  id v28;
  id v29;
  id v30;
  id v31;
  id v32;
  id v33;
  uint64_t v34;
  uint64_t v35;
  Swift::UInt v36;
  Swift::UInt v37;
  Swift::UInt8 v38;
  Swift::UInt8 v39;
  Swift::UInt8 v40;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  void *v48;
  void *v49;
  void *v50;
  void *v51;
  void *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char v56;
  char v57;
  char v58;
  char v59;
  void v60[18];
  _BYTE v61[144];
  _BYTE v62[144];
  _BYTE v63[72];
  Swift::UInt v1 = *v0;
  Swift::UInt v2 = *((void *)v0 + 1);
  Swift::UInt8 v3 = v0[16];
  Swift::UInt8 v4 = v0[17];
  uint64_t v5 = *((void *)v0 + 4);
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
  Hasher._combine(_:)(v3);
  Hasher._combine(_:)(v4);
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 48);
  swift_unknownObjectRetain();
  if ((v7(ObjectType, v5) & 1) != 0)
  {
    Swift::UInt8 v8 = 1;
LABEL_5:
    Hasher._combine(_:)(v8);
    goto LABEL_55;
  }

  Hasher._combine(_:)(0);
  (*(void (**)(uint64_t, uint64_t))(v5 + 64))(ObjectType, v5);
  String.hash(into:)();
  swift_bridgeObjectRelease();
  uint64_t v9 = *(void (**)(void *__return_ptr, uint64_t, uint64_t))(v5 + 464);
  swift_unknownObjectRetain();
  v9(v60, ObjectType, v5);
  swift_unknownObjectRelease();
  outlined init with take of LocalePreferences?( (uint64_t)v60,  (uint64_t)v61,  (uint64_t *)&demangling cache variable for type metadata for LocalePreferences?);
  outlined init with take of LocalePreferences?( (uint64_t)v61,  (uint64_t)v62,  (uint64_t *)&demangling cache variable for type metadata for LocalePreferences?);
  if (_s10Foundation17LocalePreferencesVSgWOg((uint64_t)v62) == 1)
  {
    Swift::UInt8 v8 = 0;
    goto LABEL_5;
  }

  outlined init with take of LocalePreferences?( (uint64_t)v61,  (uint64_t)&v42,  (uint64_t *)&demangling cache variable for type metadata for LocalePreferences?);
  Hasher._combine(_:)(1u);
  if (v42 == 2)
  {
    uint64_t v10 = 0;
  }

  else
  {
    uint64_t v10 = v42 & 1;
    Hasher._combine(_:)(1u);
  }

  Hasher._combine(_:)(v10);
  char v11 = v43;
  if (!v43)
  {
    Hasher._combine(_:)(0);
LABEL_19:
    outlined retain of LocalePreferences(&v42);
    if (!v44) {
      goto LABEL_14;
    }
    goto LABEL_20;
  }

  Hasher._combine(_:)(1u);
  Hasher._combine(_:)(*(void *)(v11 + 16));
  uint64_t v12 = *(void *)(v11 + 16);
  if (!v12) {
    goto LABEL_19;
  }
  outlined retain of LocalePreferences?( (uint64_t)v61,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined copy of LocalePreferences?);
  swift_bridgeObjectRetain();
  char v13 = v11 + 40;
  do
  {
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    v13 += 16LL;
    --v12;
  }

  while (v12);
  swift_bridgeObjectRelease();
  if (!v44)
  {
LABEL_14:
    Hasher._combine(_:)(0);
    if (!v45) {
      goto LABEL_15;
    }
    goto LABEL_21;
  }

uint64_t Measurement<>.formatted<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = v4[1];
  v7[0] = *v4;
  v7[1] = v5;
  return (*(uint64_t (**)(void *, uint64_t, uint64_t))(a4 + 48))(v7, a3, a4);
}

uint64_t Measurement<>.formatted()(uint64_t a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointFormatStyle<Double>?);
  MEMORY[0x1895F8858](v3);
  uint64_t v5 = (char *)&v27[-1] - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  Swift::UInt8 v8 = (int *)type metadata accessor for Measurement<>.FormatStyle(0LL, *(void *)(a1 + 16), v6, v7);
  uint64_t v9 = *((void *)v8 - 1);
  uint64_t v10 = MEMORY[0x1895F8858](v8);
  uint64_t v12 = (char *)&v27[-1] - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v10);
  uint64_t v14 = (char *)&v27[-1] - v13;
  uint64_t v26 = *v1;
  uint64_t v15 = v1[1];
  if (one-time initialization token for cache != -1) {
    swift_once();
  }
  uint64_t v16 = static LocaleCache.cache + 16;
  uint64_t v17 = (os_unfair_lock_s *)(static LocaleCache.cache + 124);
  swift_retain_n();
  os_unfair_lock_lock(v17);
  closure #1 in LocaleCache.autoupdatingCurrent.getter(v16, v27);
  os_unfair_lock_unlock(v17);
  swift_release_n();
  uint64_t v18 = v27[0];
  uint64_t v19 = lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( (unint64_t *)&lazy protocol witness table cache variable for type _LocaleAutoupdating and conformance _LocaleAutoupdating,  (uint64_t (*)(uint64_t))type metadata accessor for _LocaleAutoupdating,  (uint64_t)&protocol conformance descriptor for _LocaleAutoupdating);
  uint64_t v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointFormatStyle<Double>);
  __int128 v21 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v20 - 8) + 56LL);
  v21(v5, 1LL, 1LL, v20);
  uint64_t v22 = (uint64_t)&v12[v8[8]];
  v21((char *)v22, 1LL, 1LL, v20);
  uint64_t v23 = v8[9];
  v12[v8[10]] = 0;
  *uint64_t v12 = 1;
  *((void *)v12 + 1) = v18;
  *((void *)v12 + 2) = v19;
  v12[v23] = 0;
  outlined assign with take of FloatingPointFormatStyle<Double>?((uint64_t)v5, v22);
  (*(void (**)(char *, char *, int *))(v9 + 32))(v14, v12, v8);
  v27[0] = v26;
  v27[1] = v15;
  uint64_t v24 = Measurement<>.FormatStyle.format(_:)((uint64_t)v27, (uint64_t)v8);
  (*(void (**)(char *, int *))(v9 + 8))(v14, v8);
  return v24;
}

uint64_t static FormatStyle.measurement<A>(width:usage:numberFormatStyle:)@<X0>( char *a1@<X0>, char *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointFormatStyle<Double>?);
  MEMORY[0x1895F8858](v10);
  uint64_t v12 = (char *)&v26 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  char v13 = *a1;
  char v14 = *a2;
  outlined init with copy of FloatingPointFormatStyle<Double>?(a3, (uint64_t)v12);
  if (one-time initialization token for cache != -1) {
    swift_once();
  }
  uint64_t v15 = static LocaleCache.cache + 16;
  uint64_t v16 = (os_unfair_lock_s *)(static LocaleCache.cache + 124);
  swift_retain_n();
  os_unfair_lock_lock(v16);
  closure #1 in LocaleCache.autoupdatingCurrent.getter(v15, &v27);
  os_unfair_lock_unlock(v16);
  swift_release_n();
  uint64_t v17 = v27;
  uint64_t v18 = lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( (unint64_t *)&lazy protocol witness table cache variable for type _LocaleAutoupdating and conformance _LocaleAutoupdating,  (uint64_t (*)(uint64_t))type metadata accessor for _LocaleAutoupdating,  (uint64_t)&protocol conformance descriptor for _LocaleAutoupdating);
  __int128 v21 = (int *)type metadata accessor for Measurement<>.FormatStyle(0LL, a4, v19, v20);
  uint64_t v22 = a5 + v21[8];
  uint64_t v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointFormatStyle<Double>);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v23 - 8) + 56LL))(v22, 1LL, 1LL, v23);
  uint64_t v24 = v21[9];
  *(_BYTE *)(a5 + v21[10]) = 0;
  *(_BYTE *)a5 = v13;
  *(void *)(a5 + 8) = v17;
  *(void *)(a5 + 16) = v18;
  *(_BYTE *)(a5 + v24) = v14;
  return outlined assign with take of FloatingPointFormatStyle<Double>?((uint64_t)v12, v22);
}

uint64_t static FormatStyle.measurement<>(width:usage:hidesScaleName:numberFormatStyle:)@<X0>( char *a1@<X0>, char *a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointFormatStyle<Double>?);
  MEMORY[0x1895F8858](v10);
  uint64_t v12 = (char *)&v25 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  char v13 = *a1;
  char v14 = *a2;
  outlined init with copy of FloatingPointFormatStyle<Double>?(a4, (uint64_t)v12);
  if (one-time initialization token for cache != -1) {
    swift_once();
  }
  uint64_t v15 = static LocaleCache.cache + 16;
  uint64_t v16 = (os_unfair_lock_s *)(static LocaleCache.cache + 124);
  swift_retain_n();
  os_unfair_lock_lock(v16);
  closure #1 in LocaleCache.autoupdatingCurrent.getter(v15, &v26);
  os_unfair_lock_unlock(v16);
  swift_release_n();
  uint64_t v17 = v26;
  uint64_t v18 = lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( (unint64_t *)&lazy protocol witness table cache variable for type _LocaleAutoupdating and conformance _LocaleAutoupdating,  (uint64_t (*)(uint64_t))type metadata accessor for _LocaleAutoupdating,  (uint64_t)&protocol conformance descriptor for _LocaleAutoupdating);
  uint64_t v19 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Measurement<NSUnitTemperature><>.FormatStyle);
  uint64_t v20 = a5 + v19[8];
  uint64_t v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointFormatStyle<Double>);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v21 - 8) + 56LL))(v20, 1LL, 1LL, v21);
  uint64_t v22 = v19[9];
  uint64_t v23 = v19[10];
  *(_BYTE *)(a5 + v23) = 0;
  *(_BYTE *)a5 = v13;
  *(void *)(a5 + 8) = v17;
  *(void *)(a5 + 16) = v18;
  *(_BYTE *)(a5 + v22) = v14;
  uint64_t result = outlined assign with take of FloatingPointFormatStyle<Double>?((uint64_t)v12, v20);
  *(_BYTE *)(a5 + v23) = a3 & 1;
  return result;
}

uint64_t static FormatStyle<>.byteCount(style:allowedUnits:spellsOutZero:includesActualByteCount:)@<X0>( char *a1@<X0>, uint64_t *a2@<X1>, char a3@<W2>, char a4@<W3>, uint64_t a5@<X8>)
{
  char v8 = *a1;
  uint64_t v9 = *a2;
  if (one-time initialization token for cache != -1) {
    swift_once();
  }
  uint64_t v10 = static LocaleCache.cache + 16;
  uint64_t v11 = (os_unfair_lock_s *)(static LocaleCache.cache + 124);
  swift_retain_n();
  os_unfair_lock_lock(v11);
  closure #1 in LocaleCache.autoupdatingCurrent.getter(v10, &v14);
  os_unfair_lock_unlock(v11);
  swift_release_n();
  uint64_t v12 = v14;
  uint64_t result = lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( (unint64_t *)&lazy protocol witness table cache variable for type _LocaleAutoupdating and conformance _LocaleAutoupdating,  (uint64_t (*)(uint64_t))type metadata accessor for _LocaleAutoupdating,  (uint64_t)&protocol conformance descriptor for _LocaleAutoupdating);
  *(_BYTE *)a5 = v8;
  *(void *)(a5 + 8) = v9;
  *(_BYTE *)(a5 + 16) = a3 & 1;
  *(_BYTE *)(a5 + 17) = a4 & 1;
  *(void *)(a5 + 24) = v12;
  *(void *)(a5 + 32) = result;
  return result;
}

{
  char v8;
  uint64_t v9;
  uint64_t v10;
  os_unfair_lock_s *v11;
  uint64_t v12;
  uint64_t result;
  uint64_t v14;
  char v8 = *a1;
  uint64_t v9 = *a2;
  if (one-time initialization token for cache != -1) {
    swift_once();
  }
  uint64_t v10 = static LocaleCache.cache + 16;
  uint64_t v11 = (os_unfair_lock_s *)(static LocaleCache.cache + 124);
  swift_retain_n();
  os_unfair_lock_lock(v11);
  closure #1 in LocaleCache.autoupdatingCurrent.getter(v10, &v14);
  os_unfair_lock_unlock(v11);
  swift_release_n();
  uint64_t v12 = v14;
  uint64_t result = lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( (unint64_t *)&lazy protocol witness table cache variable for type _LocaleAutoupdating and conformance _LocaleAutoupdating,  (uint64_t (*)(uint64_t))type metadata accessor for _LocaleAutoupdating,  (uint64_t)&protocol conformance descriptor for _LocaleAutoupdating);
  *(_BYTE *)a5 = v8;
  *(void *)(a5 + 8) = v9;
  *(_BYTE *)(a5 + 16) = a3 & 1;
  *(_BYTE *)(a5 + 17) = a4 & 1;
  *(void *)(a5 + 24) = v12;
  *(void *)(a5 + 32) = result;
  return result;
}

uint64_t type metadata accessor for Measurement<>.FormatStyle(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata( a1,  a2,  a3,  a4,  (uint64_t)&nominal type descriptor for Measurement<>.FormatStyle);
}

uint64_t outlined init with copy of FloatingPointFormatStyle<Double>?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointFormatStyle<Double>?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
  return a2;
}

uint64_t specialized static Measurement<>.FormatStyle<>.ByteCount.== infix(_:_:)( unsigned __int8 *a1, unsigned __int8 *a2)
{
  char v3 = 0;
  BOOL v4 = *a1 == *a2 && *((void *)a1 + 1) == *((void *)a2 + 1);
  if (v4 && ((a1[16] ^ a2[16]) & 1) == 0 && ((a1[17] ^ a2[17]) & 1) == 0)
  {
    __int128 v5 = *(_OWORD *)(a1 + 24);
    __int128 v7 = *(_OWORD *)(a2 + 24);
    __int128 v8 = v5;
    char v3 = specialized static Locale.== infix(_:_:)((uint64_t)&v8, (uint64_t)&v7);
  }

  return v3 & 1;
}

uint64_t type metadata accessor for Measurement<>.FormatStyle.UnitWidth.CodingKeys( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata( a1,  a2,  a3,  a4,  (uint64_t)&nominal type descriptor for Measurement<>.FormatStyle.UnitWidth.CodingKeys);
}

uint64_t type metadata accessor for Measurement<>.FormatStyle.UnitWidth.Option( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata( a1,  a2,  a3,  a4,  (uint64_t)&nominal type descriptor for Measurement<>.FormatStyle.UnitWidth.Option);
}

uint64_t outlined assign with take of FloatingPointFormatStyle<Double>?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointFormatStyle<Double>?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40LL))(a2, a1, v4);
  return a2;
}

uint64_t type metadata accessor for Measurement<>.FormatStyle.CodingKeys( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata( a1,  a2,  a3,  a4,  (uint64_t)&nominal type descriptor for Measurement<>.FormatStyle.CodingKeys);
}

uint64_t type metadata accessor for Measurement<>.FormatStyle.UnitWidth( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata( a1,  a2,  a3,  a4,  (uint64_t)&nominal type descriptor for Measurement<>.FormatStyle.UnitWidth);
}

uint64_t lazy protocol witness table accessor for type FloatingPointFormatStyle<Double> and conformance FloatingPointFormatStyle<A>( unint64_t *a1, uint64_t a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    uint64_t v5 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for FloatingPointFormatStyle<Double>);
    uint64_t result = MEMORY[0x186E20D4C](a2, v5);
    atomic_store(result, a1);
  }

  return result;
}

uint64_t type metadata accessor for Measurement<>.FormatStyle<>.ByteCount.CodingKeys( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata( a1,  a2,  a3,  a4,  (uint64_t)&nominal type descriptor for Measurement<>.FormatStyle<>.ByteCount.CodingKeys);
}

unint64_t lazy protocol witness table accessor for type ByteCountFormatStyle.Style and conformance ByteCountFormatStyle.Style()
{
  unint64_t result = lazy protocol witness table cache variable for type ByteCountFormatStyle.Style and conformance ByteCountFormatStyle.Style;
  if (!lazy protocol witness table cache variable for type ByteCountFormatStyle.Style and conformance ByteCountFormatStyle.Style)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for ByteCountFormatStyle.Style,  &type metadata for ByteCountFormatStyle.Style);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type ByteCountFormatStyle.Style and conformance ByteCountFormatStyle.Style);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type ByteCountFormatStyle.Style and conformance ByteCountFormatStyle.Style;
  if (!lazy protocol witness table cache variable for type ByteCountFormatStyle.Style and conformance ByteCountFormatStyle.Style)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for ByteCountFormatStyle.Style,  &type metadata for ByteCountFormatStyle.Style);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type ByteCountFormatStyle.Style and conformance ByteCountFormatStyle.Style);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type ByteCountFormatStyle.Style and conformance ByteCountFormatStyle.Style;
  if (!lazy protocol witness table cache variable for type ByteCountFormatStyle.Style and conformance ByteCountFormatStyle.Style)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for ByteCountFormatStyle.Style,  &type metadata for ByteCountFormatStyle.Style);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type ByteCountFormatStyle.Style and conformance ByteCountFormatStyle.Style);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type ByteCountFormatStyle.Style and conformance ByteCountFormatStyle.Style;
  if (!lazy protocol witness table cache variable for type ByteCountFormatStyle.Style and conformance ByteCountFormatStyle.Style)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for ByteCountFormatStyle.Style,  &type metadata for ByteCountFormatStyle.Style);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type ByteCountFormatStyle.Style and conformance ByteCountFormatStyle.Style);
  }

  return result;
}

unint64_t lazy protocol witness table accessor for type ByteCountFormatStyle.Units and conformance ByteCountFormatStyle.Units()
{
  unint64_t result = lazy protocol witness table cache variable for type ByteCountFormatStyle.Units and conformance ByteCountFormatStyle.Units;
  if (!lazy protocol witness table cache variable for type ByteCountFormatStyle.Units and conformance ByteCountFormatStyle.Units)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for ByteCountFormatStyle.Units,  &type metadata for ByteCountFormatStyle.Units);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type ByteCountFormatStyle.Units and conformance ByteCountFormatStyle.Units);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type ByteCountFormatStyle.Units and conformance ByteCountFormatStyle.Units;
  if (!lazy protocol witness table cache variable for type ByteCountFormatStyle.Units and conformance ByteCountFormatStyle.Units)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for ByteCountFormatStyle.Units,  &type metadata for ByteCountFormatStyle.Units);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type ByteCountFormatStyle.Units and conformance ByteCountFormatStyle.Units);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type ByteCountFormatStyle.Units and conformance ByteCountFormatStyle.Units;
  if (!lazy protocol witness table cache variable for type ByteCountFormatStyle.Units and conformance ByteCountFormatStyle.Units)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for ByteCountFormatStyle.Units,  &type metadata for ByteCountFormatStyle.Units);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type ByteCountFormatStyle.Units and conformance ByteCountFormatStyle.Units);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type ByteCountFormatStyle.Units and conformance ByteCountFormatStyle.Units;
  if (!lazy protocol witness table cache variable for type ByteCountFormatStyle.Units and conformance ByteCountFormatStyle.Units)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for ByteCountFormatStyle.Units,  &type metadata for ByteCountFormatStyle.Units);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type ByteCountFormatStyle.Units and conformance ByteCountFormatStyle.Units);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type ByteCountFormatStyle.Units and conformance ByteCountFormatStyle.Units;
  if (!lazy protocol witness table cache variable for type ByteCountFormatStyle.Units and conformance ByteCountFormatStyle.Units)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for ByteCountFormatStyle.Units,  &type metadata for ByteCountFormatStyle.Units);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type ByteCountFormatStyle.Units and conformance ByteCountFormatStyle.Units);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type ByteCountFormatStyle.Units and conformance ByteCountFormatStyle.Units;
  if (!lazy protocol witness table cache variable for type ByteCountFormatStyle.Units and conformance ByteCountFormatStyle.Units)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for ByteCountFormatStyle.Units,  &type metadata for ByteCountFormatStyle.Units);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type ByteCountFormatStyle.Units and conformance ByteCountFormatStyle.Units);
  }

  return result;
}

void base witness table accessor for Equatable in Measurement<A><>.FormatStyle.UnitWidth()
{
}

uint64_t instantiation function for generic protocol witness table for Measurement<A><>.FormatStyle( void *a1, uint64_t a2)
{
  a1[1] = MEMORY[0x186E20D4C](&protocol conformance descriptor for Measurement<A><>.FormatStyle);
  a1[2] = MEMORY[0x186E20D4C](&protocol conformance descriptor for Measurement<A><>.FormatStyle, a2);
  uint64_t result = MEMORY[0x186E20D4C](&protocol conformance descriptor for Measurement<A><>.FormatStyle, a2);
  a1[3] = result;
  return result;
}

void base witness table accessor for Equatable in Measurement<A><>.FormatStyle()
{
}

uint64_t instantiation function for generic protocol witness table for Measurement<A><>.FormatStyle<>.ByteCount( void *a1)
{
  a1[1] = lazy protocol witness table accessor for type Measurement<NSUnitInformationStorage><>.AttributedStyle<>.ByteCount.CodingKeys and conformance Measurement<A><>.AttributedStyle<>.ByteCount.CodingKeys( &lazy protocol witness table cache variable for type Measurement<NSUnitInformationStorage><>.FormatStyle<>.ByteCount and conformance Measurement<A><>.FormatStyle<>.ByteCount,  &lazy cache variable for type metadata for Measurement<NSUnitInformationStorage><>.FormatStyle<>.ByteCount,  (uint64_t (*)(void))type metadata accessor for Measurement<>.FormatStyle<>.ByteCount,  (uint64_t)&protocol conformance descriptor for Measurement<A><>.FormatStyle<>.ByteCount);
  a1[2] = lazy protocol witness table accessor for type Measurement<NSUnitInformationStorage><>.AttributedStyle<>.ByteCount.CodingKeys and conformance Measurement<A><>.AttributedStyle<>.ByteCount.CodingKeys( &lazy protocol witness table cache variable for type Measurement<NSUnitInformationStorage><>.FormatStyle<>.ByteCount and conformance Measurement<A><>.FormatStyle<>.ByteCount,  &lazy cache variable for type metadata for Measurement<NSUnitInformationStorage><>.FormatStyle<>.ByteCount,  (uint64_t (*)(void))type metadata accessor for Measurement<>.FormatStyle<>.ByteCount,  (uint64_t)&protocol conformance descriptor for Measurement<A><>.FormatStyle<>.ByteCount);
  uint64_t result = lazy protocol witness table accessor for type Measurement<NSUnitInformationStorage><>.AttributedStyle<>.ByteCount.CodingKeys and conformance Measurement<A><>.AttributedStyle<>.ByteCount.CodingKeys( &lazy protocol witness table cache variable for type Measurement<NSUnitInformationStorage><>.FormatStyle<>.ByteCount and conformance Measurement<A><>.FormatStyle<>.ByteCount,  &lazy cache variable for type metadata for Measurement<NSUnitInformationStorage><>.FormatStyle<>.ByteCount,  (uint64_t (*)(void))type metadata accessor for Measurement<>.FormatStyle<>.ByteCount,  (uint64_t)&protocol conformance descriptor for Measurement<A><>.FormatStyle<>.ByteCount);
  a1[3] = result;
  return result;
}

uint64_t type metadata accessor for Measurement<>.FormatStyle<>.ByteCount( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata( a1,  a2,  a3,  a4,  (uint64_t)&nominal type descriptor for Measurement<>.FormatStyle<>.ByteCount);
}

uint64_t base witness table accessor for Equatable in Measurement<A><>.FormatStyle<>.ByteCount()
{
  return lazy protocol witness table accessor for type Measurement<NSUnitInformationStorage><>.AttributedStyle<>.ByteCount.CodingKeys and conformance Measurement<A><>.AttributedStyle<>.ByteCount.CodingKeys( &lazy protocol witness table cache variable for type Measurement<NSUnitInformationStorage><>.FormatStyle<>.ByteCount and conformance Measurement<A><>.FormatStyle<>.ByteCount,  &lazy cache variable for type metadata for Measurement<NSUnitInformationStorage><>.FormatStyle<>.ByteCount,  (uint64_t (*)(void))type metadata accessor for Measurement<>.FormatStyle<>.ByteCount,  (uint64_t)&protocol conformance descriptor for Measurement<A><>.FormatStyle<>.ByteCount);
}

uint64_t sub_183178D54@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Measurement<NSUnitTemperature><>.FormatStyle);
  *a2 = *(_BYTE *)(a1 + *(int *)(result + 40));
  return result;
}

uint64_t sub_183178D8C(char *a1, uint64_t a2)
{
  char v3 = *a1;
  uint64_t result = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Measurement<NSUnitTemperature><>.FormatStyle);
  *(_BYTE *)(a2 + *(int *)(result + 40)) = v3;
  return result;
}

uint64_t sub_183178DC0()
{
  return 0LL;
}

void type metadata completion function for Measurement<>.FormatStyle()
{
  if (v0 <= 0x3F) {
    swift_initStructMetadata();
  }
}

void *initializeBufferWithCopyOfBuffer for Measurement<>.FormatStyle(uint64_t a1, uint64_t *a2, int *a3)
{
  uint64_t v4 = (void *)a1;
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80LL);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v13 = *a2;
    *uint64_t v4 = *a2;
    uint64_t v4 = (void *)(v13 + ((v5 + 16LL) & ~(unint64_t)v5));
    swift_retain();
  }

  else
  {
    *(_BYTE *)a1 = *(_BYTE *)a2;
    *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 1);
    uint64_t v7 = a3[8];
    __int128 v8 = (_OWORD *)(a1 + v7);
    uint64_t v9 = (_OWORD *)((char *)a2 + v7);
    swift_unknownObjectRetain();
    uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointFormatStyle<Double>);
    uint64_t v11 = *(void *)(v10 - 8);
    if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v11 + 48))(v9, 1LL, v10))
    {
      uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointFormatStyle<Double>?);
      memcpy(v8, v9, *(void *)(*(void *)(v12 - 8) + 64LL));
    }

    else
    {
      uint64_t v32 = v11;
      uint64_t v33 = v8;
      *__int128 v8 = *v9;
      uint64_t v14 = *(int *)(v10 + 36);
      uint64_t v15 = (char *)v8 + v14;
      uint64_t v16 = (char *)v9 + v14;
      v15[8] = v16[8];
      *(void *)uint64_t v15 = *(void *)v16;
      *(_OWORD *)(v15 + 57) = *(_OWORD *)(v16 + 57);
      __int128 v17 = *((_OWORD *)v16 + 3);
      __int128 v18 = *((_OWORD *)v16 + 1);
      *((_OWORD *)v15 + 2) = *((_OWORD *)v16 + 2);
      *((_OWORD *)v15 + 3) = v17;
      *((_OWORD *)v15 + 1) = v18;
      v15[73] = v16[73];
      v15[76] = v16[76];
      *((_WORD *)v15 + 37) = *((_WORD *)v16 + 37);
      v15[77] = v16[77];
      uint64_t v31 = (int *)type metadata accessor for NumberFormatStyleConfiguration.Collection(0LL);
      uint64_t v19 = v31[9];
      __dst = &v15[v19];
      uint64_t v20 = &v16[v19];
      uint64_t v21 = type metadata accessor for FloatingPointRoundingRule();
      uint64_t v22 = *(void *)(v21 - 8);
      uint64_t v23 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v22 + 48);
      swift_unknownObjectRetain();
      if (v23(v20, 1LL, v21))
      {
        uint64_t v24 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
        memcpy(__dst, v20, *(void *)(*(void *)(v24 - 8) + 64LL));
      }

      else
      {
        (*(void (**)(char *, char *, uint64_t))(v22 + 16))(__dst, v20, v21);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v22 + 56))(__dst, 0LL, 1LL, v21);
      }

      uint64_t v25 = v31[10];
      uint64_t v26 = &v15[v25];
      uint64_t v27 = &v16[v25];
      *(void *)uint64_t v26 = *(void *)v27;
      v26[8] = v27[8];
      v15[v31[11]] = v16[v31[11]];
      (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v32 + 56))(v33, 0LL, 1LL, v10);
    }

    uint64_t v28 = a3[10];
    *((_BYTE *)v4 + a3[9]) = *((_BYTE *)a2 + a3[9]);
    *((_BYTE *)v4 + v28) = *((_BYTE *)a2 + v28);
  }

  return v4;
}

uint64_t destroy for Measurement<>.FormatStyle(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a1 + *(int *)(a2 + 32);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointFormatStyle<Double>);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 48LL))(v4, 1LL, v5);
  if (!(_DWORD)result)
  {
    swift_unknownObjectRelease();
    uint64_t v7 = *(int *)(v5 + 36);
    uint64_t v8 = v4 + *(int *)(type metadata accessor for NumberFormatStyleConfiguration.Collection(0LL) + 36) + v7;
    uint64_t v9 = type metadata accessor for FloatingPointRoundingRule();
    uint64_t v10 = *(void *)(v9 - 8);
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v10 + 48))(v8, 1LL, v9);
    if (!(_DWORD)result) {
      return (*(uint64_t (**)(uint64_t, uint64_t))(v10 + 8))(v8, v9);
    }
  }

  return result;
}

uint64_t initializeWithCopy for Measurement<>.FormatStyle(uint64_t a1, uint64_t a2, int *a3)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  uint64_t v6 = a3[8];
  uint64_t v7 = (_OWORD *)(a1 + v6);
  uint64_t v8 = (_OWORD *)(a2 + v6);
  swift_unknownObjectRetain();
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointFormatStyle<Double>);
  uint64_t v10 = *(void *)(v9 - 8);
  if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v10 + 48))(v8, 1LL, v9))
  {
    uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointFormatStyle<Double>?);
    memcpy(v7, v8, *(void *)(*(void *)(v11 - 8) + 64LL));
  }

  else
  {
    uint64_t v31 = v10;
    uint64_t v32 = v7;
    *uint64_t v7 = *v8;
    uint64_t v12 = *(int *)(v9 + 36);
    uint64_t v13 = (char *)v7 + v12;
    uint64_t v14 = (char *)v8 + v12;
    v13[8] = v14[8];
    *(void *)uint64_t v13 = *(void *)v14;
    *(_OWORD *)(v13 + 57) = *(_OWORD *)(v14 + 57);
    __int128 v15 = *((_OWORD *)v14 + 3);
    __int128 v16 = *((_OWORD *)v14 + 1);
    *((_OWORD *)v13 + 2) = *((_OWORD *)v14 + 2);
    *((_OWORD *)v13 + 3) = v15;
    *((_OWORD *)v13 + 1) = v16;
    v13[73] = v14[73];
    v13[76] = v14[76];
    *((_WORD *)v13 + 37) = *((_WORD *)v14 + 37);
    v13[77] = v14[77];
    uint64_t v17 = type metadata accessor for NumberFormatStyleConfiguration.Collection(0LL);
    uint64_t v18 = *(int *)(v17 + 36);
    __dst = &v13[v18];
    uint64_t v30 = v17;
    uint64_t v19 = &v14[v18];
    uint64_t v20 = type metadata accessor for FloatingPointRoundingRule();
    uint64_t v21 = *(void *)(v20 - 8);
    uint64_t v22 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v21 + 48);
    swift_unknownObjectRetain();
    if (v22(v19, 1LL, v20))
    {
      uint64_t v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
      memcpy(__dst, v19, *(void *)(*(void *)(v23 - 8) + 64LL));
    }

    else
    {
      (*(void (**)(char *, char *, uint64_t))(v21 + 16))(__dst, v19, v20);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v21 + 56))(__dst, 0LL, 1LL, v20);
    }

    uint64_t v24 = *(int *)(v30 + 40);
    uint64_t v25 = &v13[v24];
    uint64_t v26 = &v14[v24];
    *(void *)uint64_t v25 = *(void *)v26;
    v25[8] = v26[8];
    v13[*(int *)(v30 + 44)] = v14[*(int *)(v30 + 44)];
    (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v31 + 56))(v32, 0LL, 1LL, v9);
  }

  uint64_t v27 = a3[10];
  *(_BYTE *)(a1 + a3[9]) = *(_BYTE *)(a2 + a3[9]);
  *(_BYTE *)(a1 + v27) = *(_BYTE *)(a2 + v27);
  return a1;
}

uint64_t assignWithCopy for Measurement<>.FormatStyle(uint64_t a1, uint64_t a2, int *a3)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  uint64_t v6 = *(void *)(a2 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  *(void *)(a1 + 16) = v6;
  uint64_t v7 = a3[8];
  uint64_t v8 = (void *)(a1 + v7);
  uint64_t v9 = (void *)(a2 + v7);
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointFormatStyle<Double>);
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v11 + 48);
  int v13 = v12(v8, 1LL, v10);
  int v14 = v12(v9, 1LL, v10);
  if (!v13)
  {
    if (v14)
    {
      outlined destroy of Any?( (uint64_t)v8,  &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>);
      goto LABEL_7;
    }

    uint64_t v59 = a3;
    uint64_t v29 = v9[1];
    *uint64_t v8 = *v9;
    swift_unknownObjectRetain();
    swift_unknownObjectRelease();
    v8[1] = v29;
    uint64_t v30 = *(int *)(v10 + 36);
    uint64_t v31 = (char *)v8 + v30;
    uint64_t v32 = (char *)v9 + v30;
    LOBYTE(v30) = *((_BYTE *)v9 + v30 + 8);
    *(void *)uint64_t v31 = *(void *)v32;
    v31[8] = v30;
    __int128 v33 = *((_OWORD *)v32 + 1);
    __int128 v34 = *((_OWORD *)v32 + 2);
    __int128 v35 = *((_OWORD *)v32 + 3);
    *(_OWORD *)(v31 + 57) = *(_OWORD *)(v32 + 57);
    *((_OWORD *)v31 + 2) = v34;
    *((_OWORD *)v31 + 3) = v35;
    *((_OWORD *)v31 + 1) = v33;
    v31[73] = v32[73];
    LOWORD(v30) = *((_WORD *)v32 + 37);
    v31[76] = v32[76];
    *((_WORD *)v31 + 37) = v30;
    v31[77] = v32[77];
    __int128 v57 = (int *)type metadata accessor for NumberFormatStyleConfiguration.Collection(0LL);
    uint64_t v36 = v57[9];
    __int128 v37 = &v31[v36];
    __int128 v38 = &v32[v36];
    uint64_t v39 = type metadata accessor for FloatingPointRoundingRule();
    uint64_t v40 = *(void *)(v39 - 8);
    uint64_t v41 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v40 + 48);
    int v42 = v41(v37, 1LL, v39);
    int v43 = v41(v38, 1LL, v39);
    if (v42)
    {
      if (!v43)
      {
        (*(void (**)(char *, char *, uint64_t))(v40 + 16))(v37, v38, v39);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v40 + 56))(v37, 0LL, 1LL, v39);
LABEL_16:
        a3 = v59;
        uint64_t v49 = v57[10];
        uint64_t v50 = &v31[v49];
        char v51 = &v32[v49];
        uint64_t v52 = *(void *)v51;
        v50[8] = v51[8];
        *(void *)uint64_t v50 = v52;
        v31[v57[11]] = v32[v57[11]];
        goto LABEL_17;
      }
    }

    else
    {
      if (!v43)
      {
        (*(void (**)(char *, char *, uint64_t))(v40 + 24))(v37, v38, v39);
        goto LABEL_16;
      }

      (*(void (**)(char *, uint64_t))(v40 + 8))(v37, v39);
    }

    uint64_t v48 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
    memcpy(v37, v38, *(void *)(*(void *)(v48 - 8) + 64LL));
    goto LABEL_16;
  }

  if (v14)
  {
LABEL_7:
    uint64_t v28 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointFormatStyle<Double>?);
    memcpy(v8, v9, *(void *)(*(void *)(v28 - 8) + 64LL));
    goto LABEL_17;
  }

  uint64_t v58 = a3;
  *(_OWORD *)uint64_t v8 = *(_OWORD *)v9;
  uint64_t v15 = *(int *)(v10 + 36);
  __int128 v16 = (char *)v8 + v15;
  uint64_t v17 = (char *)v9 + v15;
  uint64_t v18 = *(void *)v17;
  v16[8] = v17[8];
  *(void *)__int128 v16 = v18;
  __int128 v19 = *((_OWORD *)v17 + 1);
  __int128 v20 = *((_OWORD *)v17 + 2);
  __int128 v21 = *((_OWORD *)v17 + 3);
  *(_OWORD *)(v16 + 57) = *(_OWORD *)(v17 + 57);
  *((_OWORD *)v16 + 2) = v20;
  *((_OWORD *)v16 + 3) = v21;
  *((_OWORD *)v16 + 1) = v19;
  v16[73] = v17[73];
  LOWORD(v18) = *((_WORD *)v17 + 37);
  v16[76] = v17[76];
  *((_WORD *)v16 + 37) = v18;
  v16[77] = v17[77];
  uint64_t v22 = type metadata accessor for NumberFormatStyleConfiguration.Collection(0LL);
  uint64_t v23 = *(int *)(v22 + 36);
  __dst = &v16[v23];
  uint64_t v56 = v22;
  uint64_t v24 = &v17[v23];
  uint64_t v25 = type metadata accessor for FloatingPointRoundingRule();
  uint64_t v54 = *(void *)(v25 - 8);
  uint64_t v26 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v54 + 48);
  swift_unknownObjectRetain();
  if (v26(v24, 1LL, v25))
  {
    uint64_t v27 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
    memcpy(__dst, v24, *(void *)(*(void *)(v27 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v54 + 16))(__dst, v24, v25);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v54 + 56))(__dst, 0LL, 1LL, v25);
  }

  a3 = v58;
  uint64_t v44 = *(int *)(v56 + 40);
  uint64_t v45 = &v16[v44];
  uint64_t v46 = &v17[v44];
  uint64_t v47 = *(void *)v46;
  v45[8] = v46[8];
  *(void *)uint64_t v45 = v47;
  v16[*(int *)(v56 + 44)] = v17[*(int *)(v56 + 44)];
  (*(void (**)(void *, void, uint64_t, uint64_t))(v11 + 56))(v8, 0LL, 1LL, v10);
LABEL_17:
  *(_BYTE *)(a1 + a3[9]) = *(_BYTE *)(a2 + a3[9]);
  *(_BYTE *)(a1 + a3[10]) = *(_BYTE *)(a2 + a3[10]);
  return a1;
}

uint64_t initializeWithTake for Measurement<>.FormatStyle(uint64_t a1, uint64_t a2, int *a3)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  uint64_t v6 = a3[8];
  uint64_t v7 = (_OWORD *)(a1 + v6);
  uint64_t v8 = (_OWORD *)(a2 + v6);
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointFormatStyle<Double>);
  uint64_t v10 = *(void *)(v9 - 8);
  if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v10 + 48))(v8, 1LL, v9))
  {
    uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointFormatStyle<Double>?);
    memcpy(v7, v8, *(void *)(*(void *)(v11 - 8) + 64LL));
  }

  else
  {
    uint64_t v28 = v10;
    *uint64_t v7 = *v8;
    uint64_t v12 = *(int *)(v9 + 36);
    int v13 = (char *)v7 + v12;
    int v14 = (char *)v8 + v12;
    v13[8] = v14[8];
    *(void *)int v13 = *(void *)v14;
    *(_OWORD *)(v13 + 57) = *(_OWORD *)(v14 + 57);
    __int128 v15 = *((_OWORD *)v14 + 3);
    __int128 v16 = *((_OWORD *)v14 + 1);
    *((_OWORD *)v13 + 2) = *((_OWORD *)v14 + 2);
    *((_OWORD *)v13 + 3) = v15;
    *((_OWORD *)v13 + 1) = v16;
    v13[73] = v14[73];
    LOWORD(v12) = *((_WORD *)v14 + 37);
    v13[76] = v14[76];
    *((_WORD *)v13 + 37) = v12;
    v13[77] = v14[77];
    uint64_t v27 = (int *)type metadata accessor for NumberFormatStyleConfiguration.Collection(0LL);
    uint64_t v17 = v27[9];
    __dst = &v13[v17];
    uint64_t v18 = &v14[v17];
    uint64_t v19 = type metadata accessor for FloatingPointRoundingRule();
    uint64_t v20 = *(void *)(v19 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v20 + 48))(v18, 1LL, v19))
    {
      uint64_t v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
      memcpy(__dst, v18, *(void *)(*(void *)(v21 - 8) + 64LL));
    }

    else
    {
      (*(void (**)(char *, char *, uint64_t))(v20 + 32))(__dst, v18, v19);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v20 + 56))(__dst, 0LL, 1LL, v19);
    }

    uint64_t v22 = v27[10];
    uint64_t v23 = &v13[v22];
    uint64_t v24 = &v14[v22];
    *(void *)uint64_t v23 = *(void *)v24;
    v23[8] = v24[8];
    v13[v27[11]] = v14[v27[11]];
    (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v28 + 56))(v7, 0LL, 1LL, v9);
  }

  uint64_t v25 = a3[10];
  *(_BYTE *)(a1 + a3[9]) = *(_BYTE *)(a2 + a3[9]);
  *(_BYTE *)(a1 + v25) = *(_BYTE *)(a2 + v25);
  return a1;
}

uint64_t assignWithTake for Measurement<>.FormatStyle(uint64_t a1, uint64_t a2, int *a3)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  uint64_t v6 = *(void *)(a2 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_unknownObjectRelease();
  *(void *)(a1 + 16) = v6;
  uint64_t v7 = a3[8];
  uint64_t v8 = (void *)(a1 + v7);
  uint64_t v9 = (void *)(a2 + v7);
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointFormatStyle<Double>);
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v11 + 48);
  int v13 = v12(v8, 1LL, v10);
  int v14 = v12(v9, 1LL, v10);
  if (!v13)
  {
    if (v14)
    {
      outlined destroy of Any?( (uint64_t)v8,  &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>);
      goto LABEL_7;
    }

    uint64_t v53 = a3;
    uint64_t v27 = v9[1];
    *uint64_t v8 = *v9;
    swift_unknownObjectRelease();
    v8[1] = v27;
    uint64_t v28 = *(int *)(v10 + 36);
    uint64_t v29 = (char *)v8 + v28;
    uint64_t v30 = (char *)v9 + v28;
    *(void *)uint64_t v29 = *(void *)((char *)v9 + v28);
    v29[8] = *((_BYTE *)v9 + v28 + 8);
    __int128 v31 = *(_OWORD *)((char *)v9 + v28 + 32);
    *((_OWORD *)v29 + 1) = *(_OWORD *)((char *)v9 + v28 + 16);
    *((_OWORD *)v29 + 2) = v31;
    *((_OWORD *)v29 + 3) = *(_OWORD *)((char *)v9 + v28 + 48);
    *(_OWORD *)(v29 + 57) = *(_OWORD *)((char *)v9 + v28 + 57);
    v29[73] = *((_BYTE *)v9 + v28 + 73);
    v29[76] = *((_BYTE *)v9 + v28 + 76);
    *((_WORD *)v29 + 37) = *(_WORD *)((char *)v9 + v28 + 74);
    v29[77] = *((_BYTE *)v9 + v28 + 77);
    __dsta = (int *)type metadata accessor for NumberFormatStyleConfiguration.Collection(0LL);
    uint64_t v32 = __dsta[9];
    __int128 v33 = &v29[v32];
    __int128 v34 = &v30[v32];
    uint64_t v35 = type metadata accessor for FloatingPointRoundingRule();
    uint64_t v36 = *(void *)(v35 - 8);
    __int128 v37 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v36 + 48);
    int v38 = v37(v33, 1LL, v35);
    int v39 = v37(v34, 1LL, v35);
    if (v38)
    {
      if (!v39)
      {
        (*(void (**)(char *, char *, uint64_t))(v36 + 32))(v33, v34, v35);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v36 + 56))(v33, 0LL, 1LL, v35);
LABEL_16:
        a3 = v53;
        uint64_t v44 = __dsta[10];
        uint64_t v45 = &v29[v44];
        uint64_t v46 = &v30[v44];
        *(void *)uint64_t v45 = *(void *)v46;
        v45[8] = v46[8];
        v29[__dsta[11]] = v30[__dsta[11]];
        goto LABEL_17;
      }
    }

    else
    {
      if (!v39)
      {
        (*(void (**)(char *, char *, uint64_t))(v36 + 40))(v33, v34, v35);
        goto LABEL_16;
      }

      (*(void (**)(char *, uint64_t))(v36 + 8))(v33, v35);
    }

    uint64_t v43 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
    memcpy(v33, v34, *(void *)(*(void *)(v43 - 8) + 64LL));
    goto LABEL_16;
  }

  if (v14)
  {
LABEL_7:
    uint64_t v26 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointFormatStyle<Double>?);
    memcpy(v8, v9, *(void *)(*(void *)(v26 - 8) + 64LL));
    goto LABEL_17;
  }

  uint64_t v52 = a3;
  *(_OWORD *)uint64_t v8 = *(_OWORD *)v9;
  uint64_t v15 = *(int *)(v10 + 36);
  __int128 v16 = (char *)v8 + v15;
  uint64_t v17 = (char *)v9 + v15;
  v16[8] = v17[8];
  *(void *)__int128 v16 = *(void *)v17;
  *(_OWORD *)(v16 + 57) = *(_OWORD *)(v17 + 57);
  __int128 v18 = *((_OWORD *)v17 + 3);
  __int128 v19 = *((_OWORD *)v17 + 1);
  *((_OWORD *)v16 + 2) = *((_OWORD *)v17 + 2);
  *((_OWORD *)v16 + 3) = v18;
  *((_OWORD *)v16 + 1) = v19;
  v16[73] = v17[73];
  LOWORD(v15) = *((_WORD *)v17 + 37);
  v16[76] = v17[76];
  *((_WORD *)v16 + 37) = v15;
  v16[77] = v17[77];
  uint64_t v20 = type metadata accessor for NumberFormatStyleConfiguration.Collection(0LL);
  uint64_t v21 = *(int *)(v20 + 36);
  uint64_t v49 = v20;
  __dst = &v16[v21];
  uint64_t v22 = &v17[v21];
  uint64_t v23 = type metadata accessor for FloatingPointRoundingRule();
  uint64_t v24 = *(void *)(v23 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v24 + 48))(v22, 1LL, v23))
  {
    uint64_t v25 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
    memcpy(__dst, v22, *(void *)(*(void *)(v25 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v24 + 32))(__dst, v22, v23);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v24 + 56))(__dst, 0LL, 1LL, v23);
  }

  uint64_t v40 = *(int *)(v49 + 40);
  uint64_t v41 = &v16[v40];
  int v42 = &v17[v40];
  *(void *)uint64_t v41 = *(void *)v42;
  v41[8] = v42[8];
  v16[*(int *)(v49 + 44)] = v17[*(int *)(v49 + 44)];
  (*(void (**)(void *, void, uint64_t, uint64_t))(v11 + 56))(v8, 0LL, 1LL, v10);
  a3 = v52;
LABEL_17:
  uint64_t v47 = a3[10];
  *(_BYTE *)(a1 + a3[9]) = *(_BYTE *)(a2 + a3[9]);
  *(_BYTE *)(a1 + v47) = *(_BYTE *)(a2 + v47);
  return a1;
}

uint64_t getEnumTagSinglePayload for Measurement<>.FormatStyle()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_183179D3C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }

  else
  {
    uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointFormatStyle<Double>?);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48LL))( a1 + *(int *)(a3 + 32),  a2,  v8);
  }

uint64_t storeEnumTagSinglePayload for Measurement<>.FormatStyle()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_183179DC8(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + 8) = (a2 - 1);
  }

  else
  {
    uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointFormatStyle<Double>?);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56LL))( v5 + *(int *)(a4 + 32),  a2,  a2,  v7);
  }

  return result;
}

void type metadata accessor for FloatingPointFormatStyle<Double>?()
{
  if (!lazy cache variable for type metadata for FloatingPointFormatStyle<Double>?)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for FloatingPointFormatStyle<Double>);
    unint64_t v0 = type metadata accessor for Optional();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for FloatingPointFormatStyle<Double>?);
    }
  }

uint64_t storeEnumTagSinglePayload for Measurement<>.FormatStyle<>.ByteCount.CodingKeys( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 4 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 4) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFC) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFB) {
    return ((uint64_t (*)(void))((char *)&loc_183179EEC + 4 * byte_1837AD39F[v4]))();
  }
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_183179F20 + 4 * byte_1837AD39A[v4]))();
}

uint64_t sub_183179F20(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_183179F28(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x183179F30LL);
  }
  return result;
}

uint64_t sub_183179F3C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x183179F44LL);
  }
  *(_BYTE *)uint64_t result = a2 + 4;
  return result;
}

uint64_t sub_183179F48(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_183179F50(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t storeEnumTagSinglePayload for Measurement<>.FormatStyle.UnitWidth( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFD) {
    return ((uint64_t (*)(void))((char *)&loc_183179FA8 + 4 * byte_1837AD3A9[v4]))();
  }
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_183179FDC + 4 * byte_1837AD3A4[v4]))();
}

uint64_t sub_183179FDC(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_183179FE4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x183179FECLL);
  }
  return result;
}

uint64_t sub_183179FF8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x18317A000LL);
  }
  *(_BYTE *)uint64_t result = a2 + 2;
  return result;
}

uint64_t sub_18317A004(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_18317A00C(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t storeEnumTagSinglePayload for Measurement<>.FormatStyle.UnitWidth.CodingKeys( uint64_t a1, int a2, int a3)
{
  else {
    int v3 = 2;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2) {
    return ((uint64_t (*)(void))((char *)sub_18317A058 + 4 * byte_1837AD3AE[v4]))();
  }
  else {
    return ((uint64_t (*)(void))((char *)sub_18317A078 + 4 * byte_1837AD3B3[v4]))();
  }
}

_BYTE *sub_18317A058(_BYTE *result, char a2)
{
  *uint64_t result = a2;
  return result;
}

_BYTE *sub_18317A078(_BYTE *result)
{
  *uint64_t result = 0;
  return result;
}

_DWORD *sub_18317A080(_DWORD *result, int a2)
{
  *uint64_t result = a2;
  return result;
}

_WORD *sub_18317A088(_WORD *result, __int16 a2)
{
  *uint64_t result = a2;
  return result;
}

_WORD *sub_18317A090(_WORD *result)
{
  *uint64_t result = 0;
  return result;
}

_DWORD *sub_18317A098(_DWORD *result)
{
  *uint64_t result = 0;
  return result;
}

void base witness table accessor for Equatable in Measurement<A><>.FormatStyle.UnitWidth.CodingKeys()
{
}

void base witness table accessor for Equatable in Measurement<A><>.FormatStyle.UnitWidth.Option()
{
}

void base witness table accessor for Equatable in Measurement<A><>.FormatStyle.CodingKeys()
{
}

uint64_t base witness table accessor for Equatable in Measurement<A><>.FormatStyle<>.ByteCount.CodingKeys()
{
  return lazy protocol witness table accessor for type Measurement<NSUnitInformationStorage><>.AttributedStyle<>.ByteCount.CodingKeys and conformance Measurement<A><>.AttributedStyle<>.ByteCount.CodingKeys( &lazy protocol witness table cache variable for type Measurement<NSUnitInformationStorage><>.FormatStyle<>.ByteCount.CodingKeys and conformance Measurement<A><>.FormatStyle<>.ByteCount.CodingKeys,  &lazy cache variable for type metadata for Measurement<NSUnitInformationStorage><>.FormatStyle<>.ByteCount.CodingKeys,  (uint64_t (*)(void))type metadata accessor for Measurement<>.FormatStyle<>.ByteCount.CodingKeys,  (uint64_t)&protocol conformance descriptor for Measurement<A><>.FormatStyle<>.ByteCount.CodingKeys);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in Measurement<A><>.FormatStyle<>.ByteCount.CodingKeys()
{
  return lazy protocol witness table accessor for type Measurement<NSUnitInformationStorage><>.AttributedStyle<>.ByteCount.CodingKeys and conformance Measurement<A><>.AttributedStyle<>.ByteCount.CodingKeys( &lazy protocol witness table cache variable for type Measurement<NSUnitInformationStorage><>.FormatStyle<>.ByteCount.CodingKeys and conformance Measurement<A><>.FormatStyle<>.ByteCount.CodingKeys,  &lazy cache variable for type metadata for Measurement<NSUnitInformationStorage><>.FormatStyle<>.ByteCount.CodingKeys,  (uint64_t (*)(void))type metadata accessor for Measurement<>.FormatStyle<>.ByteCount.CodingKeys,  (uint64_t)&protocol conformance descriptor for Measurement<A><>.FormatStyle<>.ByteCount.CodingKeys);
}

uint64_t base witness table accessor for CustomStringConvertible in Measurement<A><>.FormatStyle<>.ByteCount.CodingKeys()
{
  return lazy protocol witness table accessor for type Measurement<NSUnitInformationStorage><>.AttributedStyle<>.ByteCount.CodingKeys and conformance Measurement<A><>.AttributedStyle<>.ByteCount.CodingKeys( &lazy protocol witness table cache variable for type Measurement<NSUnitInformationStorage><>.FormatStyle<>.ByteCount.CodingKeys and conformance Measurement<A><>.FormatStyle<>.ByteCount.CodingKeys,  &lazy cache variable for type metadata for Measurement<NSUnitInformationStorage><>.FormatStyle<>.ByteCount.CodingKeys,  (uint64_t (*)(void))type metadata accessor for Measurement<>.FormatStyle<>.ByteCount.CodingKeys,  (uint64_t)&protocol conformance descriptor for Measurement<A><>.FormatStyle<>.ByteCount.CodingKeys);
}

void base witness table accessor for CustomDebugStringConvertible in Measurement<A><>.FormatStyle.CodingKeys()
{
}

void base witness table accessor for CustomStringConvertible in Measurement<A><>.FormatStyle.CodingKeys()
{
}

void base witness table accessor for CustomDebugStringConvertible in Measurement<A><>.FormatStyle.UnitWidth.CodingKeys()
{
}

void base witness table accessor for CustomStringConvertible in Measurement<A><>.FormatStyle.UnitWidth.CodingKeys()
{
}

uint64_t specialized Measurement<>.FormatStyle.CodingKeys.init(intValue:)()
{
  return 5LL;
}

uint64_t specialized Measurement<>.FormatStyle<>.ByteCount.CodingKeys.init(stringValue:)( uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x656C797473LL && a2 == 0xE500000000000000LL;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0LL;
  }

  else if (a1 == 0x556465776F6C6C61LL && a2 == 0xEC0000007374696ELL {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1LL;
  }

  else if (a1 == 0x754F736C6C657073LL && a2 == 0xED00006F72655A74LL {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 2LL;
  }

  else if (a1 == 0xD000000000000017LL && a2 == 0x80000001839CD1E0LL {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 3LL;
  }

  else if (a1 == 0x656C61636F6CLL && a2 == 0xE600000000000000LL)
  {
    swift_bridgeObjectRelease();
    return 4LL;
  }

  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0) {
      return 4LL;
    }
    else {
      return 5LL;
    }
  }

uint64_t outlined init with copy of NumberFormatStyleConfiguration.Collection(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for NumberFormatStyleConfiguration.Collection(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of NumberFormatStyleConfiguration.Collection(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for NumberFormatStyleConfiguration.Collection(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

uint64_t thunk for @escaping @callee_unowned @convention(block) () -> ()(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 16))();
}

uint64_t one-time initialization function for logHandle()
{
  uint64_t result = OS_os_log.init(subsystem:category:)();
  logHandle = result;
  return result;
}

void NSURLSessionWebSocketTask.send(_:completionHandler:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  void aBlock[6] = *MEMORY[0x1895F89C0];
  if (*(_BYTE *)(a1 + 16) != 1) {
    __asm { BR              X10 }
  }

  id v7 = objc_msgSend(objc_allocWithZone(MEMORY[0x189601F40]), sel_initWithString_, String._bridgeToObjectiveCImpl()());
  swift_unknownObjectRelease();
  aBlock[4] = a2;
  aBlock[5] = a3;
  aBlock[0] = MEMORY[0x1895F87A8];
  aBlock[1] = 1107296256LL;
  aBlock[2] = thunk for @escaping @callee_guaranteed @Sendable (@guaranteed Error?) -> ();
  aBlock[3] = &block_descriptor_10;
  uint64_t v8 = _Block_copy(aBlock);
  swift_retain();
  swift_release();
  objc_msgSend(v4, sel_sendMessage_completionHandler_, v7, v8);
  _Block_release(v8);
}

void thunk for @escaping @callee_guaranteed @Sendable (@guaranteed Error?) -> ()(uint64_t a1, void *a2)
{
  int v3 = *(void (**)(void *))(a1 + 32);
  swift_retain();
  id v4 = a2;
  v3(a2);
  swift_release();
}

void NSURLSessionWebSocketTask.receive(completionHandler:)(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = swift_allocObject();
  *(void *)(v5 + 16) = a1;
  *(void *)(v5 + 24) = a2;
  v7[4] = partial apply for closure #1 in NSURLSessionWebSocketTask.receive(completionHandler:);
  v7[5] = v5;
  v7[0] = MEMORY[0x1895F87A8];
  v7[1] = 1107296256LL;
  void v7[2] = thunk for @escaping @callee_guaranteed @Sendable (@guaranteed NSURLSessionWebSocketMessage?, @guaranteed Error?) -> ();
  v7[3] = &block_descriptor_10;
  char v6 = _Block_copy(v7);
  swift_retain();
  swift_release();
  objc_msgSend(v2, sel_receiveMessageWithCompletionHandler_, v6);
  _Block_release(v6);
}

void closure #1 in NSURLSessionWebSocketTask.receive(completionHandler:)( void *a1, id a2, void (*a3)(id *))
{
  if (!a1)
  {
    if (a2)
    {
      id v18 = a2;
      unint64_t v19 = 0LL;
      __int16 v20 = 256;
      id v12 = a2;
      a3(&v18);

      return;
    }

    goto LABEL_13;
  }

  if (!a2)
  {
    id v5 = a1;
    id v6 = objc_msgSend(v5, sel_type);
    if (v6 == (id)1)
    {
      id v7 = objc_msgSend(v5, sel_string);
      if (v7)
      {
        uint64_t v8 = v7;
        id v9 = static String._unconditionallyBridgeFromObjectiveC(_:)(v7);
        unint64_t v11 = v10;

        id v18 = v9;
        unint64_t v19 = v11;
        __int16 v20 = 1;
        a3(&v18);
        swift_bridgeObjectRelease();

        return;
      }

      __break(1u);
LABEL_12:
      __break(1u);
      goto LABEL_13;
    }

    if (!v6)
    {
      id v13 = objc_msgSend(v5, sel_data);
      if (v13)
      {
        id v14 = v13;
        id v15 = specialized Data.init(referencing:)(v14);
        unint64_t v17 = v16;

        id v18 = v15;
        unint64_t v19 = v17;
        __int16 v20 = 0;
        a3(&v18);

        outlined consume of Data._Representation((uint64_t)v15, v17);
        return;
      }

      goto LABEL_12;
    }
  }

void thunk for @escaping @callee_guaranteed @Sendable (@guaranteed NSURLSessionWebSocketMessage?, @guaranteed Error?) -> ()( uint64_t a1, void *a2, void *a3)
{
  id v5 = *(void (**)(void *, void *))(a1 + 32);
  swift_retain();
  id v7 = a2;
  id v6 = a3;
  v5(a2, a3);
  swift_release();
}

id NSURLSessionTaskTransactionMetrics.localPort.getter()
{
  return NSURLSessionTaskTransactionMetrics.localPort.getter((SEL *)&selRef_localPort);
}

id NSURLSessionTaskTransactionMetrics.remotePort.getter()
{
  return NSURLSessionTaskTransactionMetrics.localPort.getter((SEL *)&selRef_remotePort);
}

id NSURLSessionTaskTransactionMetrics.localPort.getter(SEL *a1)
{
  id result = [v1 *a1];
  if (result)
  {
    int v3 = result;
    id v4 = objc_msgSend(result, sel_integerValue);
    type metadata accessor for NSMorphologyPronoun( 0LL,  (unint64_t *)&lazy cache variable for type metadata for NSObject);
    id v5 = objc_msgSend(objc_allocWithZone((Class)NSNumber), sel_initWithInteger_, v4);
    char v6 = static NSObject.== infix(_:_:)();

    if ((v6 & 1) != 0) {
      return v4;
    }
    else {
      return 0LL;
    }
  }

  return result;
}

uint64_t NSURLSessionTaskTransactionMetrics.negotiatedTLSProtocolVersion.getter()
{
  return NSURLSessionTaskTransactionMetrics.negotiatedTLSProtocolVersion.getter((SEL *)&selRef_negotiatedTLSProtocolVersion);
}

uint64_t NSURLSessionTaskTransactionMetrics.negotiatedTLSCipherSuite.getter()
{
  return NSURLSessionTaskTransactionMetrics.negotiatedTLSProtocolVersion.getter((SEL *)&selRef_negotiatedTLSCipherSuite);
}

uint64_t NSURLSessionTaskTransactionMetrics.negotiatedTLSProtocolVersion.getter(SEL *a1)
{
  id v2 = [v1 *a1];
  if (v2)
  {
    int v3 = v2;
    id v4 = objc_msgSend(v2, sel_unsignedShortValue);
    type metadata accessor for NSMorphologyPronoun( 0LL,  (unint64_t *)&lazy cache variable for type metadata for NSObject);
    id v5 = objc_msgSend(objc_allocWithZone((Class)NSNumber), sel_initWithUnsignedShort_, v4);
    char v6 = static NSObject.== infix(_:_:)();

    if ((v6 & 1) != 0) {
      LODWORD(v2) = (_DWORD)v4;
    }
    else {
      LODWORD(v2) = 0;
    }
    char v7 = v6 ^ 1;
  }

  else
  {
    char v7 = 1;
  }

  return v2 & 0xFFFEFFFF | ((v7 & 1) << 16);
}

uint64_t closure #1 in URLSessionAsyncBytesDelegate.data()( uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t))
{
  uint64_t v6 = a2 + OBJC_IVAR____TtC10FoundationP33_1935C07EE287982D980AA89BB85ACEFA28URLSessionAsyncBytesDelegate_state;
  outlined destroy of URLSessionAsyncBytesDelegate.State(a2 + OBJC_IVAR____TtC10FoundationP33_1935C07EE287982D980AA89BB85ACEFA28URLSessionAsyncBytesDelegate_state);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<Data?, Error>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 16LL))(v6, a1, v7);
  type metadata accessor for URLSessionAsyncBytesDelegate.State(0LL);
  swift_storeEnumTagMultiPayload();
  uint64_t v8 = *(os_unfair_lock_s **)(a2
                            + OBJC_IVAR____TtC10FoundationP33_1935C07EE287982D980AA89BB85ACEFA28URLSessionAsyncBytesDelegate_lock);
  swift_retain();
  os_unfair_lock_unlock(v8 + 4);
  uint64_t v9 = swift_release();
  return a3(v9);
}

void *closure #1 in NSURLSession.CancelState.activate(task:)@<X0>( void *result@<X0>, void *a2@<X1>, char *a3@<X8>)
{
  if (result[1])
  {
    id result = (void *)_assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }

  else
  {
    if ((*(_BYTE *)result & 1) != 0)
    {
      char v4 = 0;
    }

    else
    {
      *(_BYTE *)id result = 0;
      result[1] = a2;
      id result = a2;
      char v4 = 1;
    }

    *a3 = v4;
  }

  return result;
}

uint64_t NSURLSession.CancelState.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

uint64_t NSURLSession.data(for:delegate:)(void *a1, uint64_t a2)
{
  v3[13] = a2;
  v3[14] = v2;
  v3[15] = *a1;
  return swift_task_switch();
}

uint64_t NSURLSession.data(for:delegate:)()
{
  uint64_t v1 = *(void *)(v0 + 104);
  type metadata accessor for NSURLSession.CancelState();
  __int128 v7 = *(_OWORD *)(v0 + 112);
  uint64_t inited = swift_initStackObject();
  *(void *)(v0 + 128) = inited;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ManagedBuffer<NSURLSession.CancelState.State, os_unfair_lock_s>);
  uint64_t v3 = swift_initStackObject();
  *(void *)(v0 + 136) = v3;
  *(_DWORD *)(v3 + 32) = 0;
  *(_BYTE *)(v3 + 16) = 0;
  *(void *)(v3 + 24) = 0LL;
  *(void *)(inited + 16) = v3;
  uint64_t v4 = swift_task_alloc();
  *(void *)(v0 + 144) = v4;
  *(_OWORD *)(v4 + 16) = v7;
  *(void *)(v4 + 32) = v1;
  *(void *)(v4 + 40) = inited;
  id v5 = (void *)swift_task_alloc();
  *(void *)(v0 + 152) = v5;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (Data, NSURLResponse));
  void *v5 = v0;
  v5[1] = NSURLSession.data(for:delegate:);
  return withTaskCancellationHandler<A>(operation:onCancel:isolation:)();
}

{
  uint64_t v0;
  uint64_t v1;
  *(void *)(*(void *)v1 + 160LL) = v0;
  swift_task_dealloc();
  if (!v0) {
    swift_task_dealloc();
  }
  return swift_task_switch();
}

{
  uint64_t v0;
  swift_release();
  return (*(uint64_t (**)(void, void, void))(v0 + 8))( *(void *)(v0 + 80),  *(void *)(v0 + 88),  *(void *)(v0 + 96));
}

{
  uint64_t v0;
  swift_release();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t closure #1 in NSURLSession.data(for:delegate:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v5[5] = a4;
  v5[6] = a5;
  v5[3] = a2;
  v5[4] = a3;
  v5[2] = a1;
  return swift_task_switch();
}

uint64_t closure #1 in NSURLSession.data(for:delegate:)()
{
  uint64_t v2 = *(void *)(v0 + 40);
  uint64_t v1 = *(void *)(v0 + 48);
  uint64_t v3 = swift_task_alloc();
  *(void *)(v0 + 56) = v3;
  *(_OWORD *)(v3 + 16) = *(_OWORD *)(v0 + 24);
  *(void *)(v3 + 32) = v2;
  *(void *)(v3 + 40) = v1;
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v0 + 64) = v4;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (Data, NSURLResponse));
  *uint64_t v4 = v0;
  v4[1] = closure #1 in NSURLSession.data(for:delegate:);
  return withCheckedThrowingContinuation<A>(isolation:function:_:)();
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v2 = *v1;
  *(void *)(v2 + 72) = v0;
  swift_task_dealloc();
  if (v0) {
    return swift_task_switch();
  }
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v2 + 8))();
}

{
  uint64_t v0;
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void closure #1 in closure #1 in NSURLSession.data(for:delegate:)( uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(demangling cache variable for type metadata for CheckedContinuation<(Data, NSURLResponse), Error>);
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = *(void *)(v11 + 64);
  MEMORY[0x1895F8858](v10);
  objc_msgSend(*(id *)(a3 + 16), sel_copy);
  _bridgeAnyObjectToAny(_:)();
  swift_unknownObjectRelease();
  type metadata accessor for NSMorphologyPronoun( 0LL,  (unint64_t *)&lazy cache variable for type metadata for NSMutableURLRequest);
  swift_dynamicCast();
  id v13 = (void *)aBlock[6];
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))( (char *)&aBlock[-1] - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL),  a1,  v10);
  unint64_t v14 = (*(unsigned __int8 *)(v11 + 80) + 16LL) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80);
  uint64_t v15 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v11 + 32))( v15 + v14,  (char *)&aBlock[-1] - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL),  v10);
  aBlock[4] = partial apply for closure #1 in closure #1 in closure #1 in NSURLSession.upload(for:from:delegate:);
  aBlock[5] = v15;
  aBlock[0] = MEMORY[0x1895F87A8];
  aBlock[1] = 1107296256LL;
  aBlock[2] = thunk for @escaping @callee_guaranteed @Sendable (@guaranteed Data?, @guaranteed NSURLResponse?, @guaranteed Error?) -> ();
  aBlock[3] = &block_descriptor_140;
  unint64_t v16 = _Block_copy(aBlock);
  swift_release();
  id v17 = objc_msgSend(a2, sel__dataTaskWithRequest_delegate_completionHandler_, v13, a4, v16);
  _Block_release(v16);

  objc_msgSend(v17, sel_set_callCompletionHandlerInline_, 1);
  objc_msgSend(v17, sel_resume);
  id v18 = *(os_unfair_lock_s **)(a5 + 16);
  unint64_t v19 = v18 + 4;
  __int16 v20 = v18 + 8;
  os_unfair_lock_lock(v18 + 8);
  closure #1 in NSURLSession.CancelState.activate(task:)(v19, v17, (char *)aBlock);
  os_unfair_lock_unlock(v20);
  if ((aBlock[0] & 1) == 0) {
    objc_msgSend(v17, sel_cancel);
  }
}

uint64_t NSURLSession.data(from:delegate:)(uint64_t a1, uint64_t a2)
{
  *(void *)(v3 + 104) = a2;
  *(void *)(v3 + 112) = v2;
  *(void *)(v3 + 120) = *(void *)a1;
  *(_OWORD *)(v3 + 128) = *(_OWORD *)(a1 + 8);
  return swift_task_switch();
}

uint64_t NSURLSession.data(from:delegate:)()
{
  __int128 v8 = *(_OWORD *)(v0 + 128);
  uint64_t v1 = *(void *)(v0 + 104);
  type metadata accessor for NSURLSession.CancelState();
  __int128 v7 = *(_OWORD *)(v0 + 112);
  uint64_t inited = swift_initStackObject();
  *(void *)(v0 + 144) = inited;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ManagedBuffer<NSURLSession.CancelState.State, os_unfair_lock_s>);
  uint64_t v3 = swift_initStackObject();
  *(void *)(v0 + 152) = v3;
  *(_DWORD *)(v3 + 32) = 0;
  *(_BYTE *)(v3 + 16) = 0;
  *(void *)(v3 + 24) = 0LL;
  *(void *)(inited + 16) = v3;
  uint64_t v4 = swift_task_alloc();
  *(void *)(v0 + 160) = v4;
  *(_OWORD *)(v4 + 16) = v7;
  *(_OWORD *)(v4 + 32) = v8;
  *(void *)(v4 + 48) = v1;
  *(void *)(v4 + 56) = inited;
  id v5 = (void *)swift_task_alloc();
  *(void *)(v0 + 168) = v5;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (Data, NSURLResponse));
  void *v5 = v0;
  v5[1] = NSURLSession.data(from:delegate:);
  return withTaskCancellationHandler<A>(operation:onCancel:isolation:)();
}

{
  uint64_t v0;
  uint64_t v1;
  *(void *)(*(void *)v1 + 176LL) = v0;
  swift_task_dealloc();
  if (!v0) {
    swift_task_dealloc();
  }
  return swift_task_switch();
}

{
  uint64_t v0;
  swift_release();
  return (*(uint64_t (**)(void, void, void))(v0 + 8))( *(void *)(v0 + 80),  *(void *)(v0 + 88),  *(void *)(v0 + 96));
}

{
  uint64_t v0;
  swift_release();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t closure #1 in NSURLSession.data(from:delegate:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  v7[7] = a6;
  v7[8] = a7;
  v7[5] = a4;
  void v7[6] = a5;
  v7[3] = a2;
  v7[4] = a3;
  void v7[2] = a1;
  return swift_task_switch();
}

uint64_t closure #1 in NSURLSession.data(from:delegate:)()
{
  uint64_t v2 = *(void *)(v0 + 56);
  uint64_t v1 = *(void *)(v0 + 64);
  __int128 v6 = *(_OWORD *)(v0 + 40);
  uint64_t v3 = swift_task_alloc();
  *(void *)(v0 + 72) = v3;
  *(_OWORD *)(v3 + 16) = *(_OWORD *)(v0 + 24);
  *(_OWORD *)(v3 + 32) = v6;
  *(void *)(v3 + 48) = v2;
  *(void *)(v3 + 56) = v1;
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v0 + 80) = v4;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (Data, NSURLResponse));
  *uint64_t v4 = v0;
  v4[1] = closure #1 in NSURLSession.data(from:delegate:);
  return withCheckedThrowingContinuation<A>(isolation:function:_:)();
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v2 = *v1;
  *(void *)(v2 + 88) = v0;
  swift_task_dealloc();
  if (v0) {
    return swift_task_switch();
  }
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v2 + 8))();
}

{
  uint64_t v0;
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void closure #1 in closure #1 in NSURLSession.data(from:delegate:)( uint64_t a1, void *a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(demangling cache variable for type metadata for CheckedContinuation<(Data, NSURLResponse), Error>);
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = *(void *)(v13 + 64);
  MEMORY[0x1895F8858](v12);
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v13 + 16))(&v23[-((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL)], a1, v12);
  unint64_t v15 = (*(unsigned __int8 *)(v13 + 80) + 16LL) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80);
  uint64_t v16 = swift_allocObject();
  (*(void (**)(unint64_t, _BYTE *, uint64_t))(v13 + 32))( v16 + v15,  &v23[-((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL)],  v12);
  aBlock[4] = partial apply for closure #1 in closure #1 in closure #1 in NSURLSession.upload(for:from:delegate:);
  aBlock[5] = v16;
  aBlock[0] = MEMORY[0x1895F87A8];
  aBlock[1] = 1107296256LL;
  aBlock[2] = thunk for @escaping @callee_guaranteed @Sendable (@guaranteed Data?, @guaranteed NSURLResponse?, @guaranteed Error?) -> ();
  aBlock[3] = &block_descriptor_131;
  id v17 = _Block_copy(aBlock);
  id v18 = a3;
  swift_release();
  id v19 = objc_msgSend(a2, sel__dataTaskWithURL_delegate_completionHandler_, v18, a6, v17);
  _Block_release(v17);

  objc_msgSend(v19, sel_set_callCompletionHandlerInline_, 1);
  objc_msgSend(v19, sel_resume);
  __int16 v20 = *(os_unfair_lock_s **)(a7 + 16);
  uint64_t v21 = v20 + 4;
  uint64_t v22 = v20 + 8;
  os_unfair_lock_lock(v20 + 8);
  closure #1 in NSURLSession.CancelState.activate(task:)(v21, v19, (char *)aBlock);
  os_unfair_lock_unlock(v22);
  if ((aBlock[0] & 1) == 0) {
    objc_msgSend(v19, sel_cancel);
  }
}

uint64_t NSURLSession.upload(for:fromFile:delegate:)(void *a1, uint64_t *a2, uint64_t a3)
{
  *(void *)(v4 + 104) = a3;
  *(void *)(v4 + 112) = v3;
  uint64_t v5 = *a2;
  *(void *)(v4 + 120) = *a1;
  *(void *)(v4 + 128) = v5;
  *(_OWORD *)(v4 + 136) = *(_OWORD *)(a2 + 1);
  return swift_task_switch();
}

uint64_t NSURLSession.upload(for:fromFile:delegate:)()
{
  uint64_t v1 = *(void *)(v0 + 144);
  __int128 v9 = *(_OWORD *)(v0 + 128);
  uint64_t v2 = *(void *)(v0 + 104);
  type metadata accessor for NSURLSession.CancelState();
  __int128 v8 = *(_OWORD *)(v0 + 112);
  uint64_t inited = swift_initStackObject();
  *(void *)(v0 + 152) = inited;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ManagedBuffer<NSURLSession.CancelState.State, os_unfair_lock_s>);
  uint64_t v4 = swift_initStackObject();
  *(void *)(v0 + 160) = v4;
  *(_DWORD *)(v4 + 32) = 0;
  *(_BYTE *)(v4 + 16) = 0;
  *(void *)(v4 + 24) = 0LL;
  *(void *)(inited + 16) = v4;
  uint64_t v5 = swift_task_alloc();
  *(void *)(v0 + 168) = v5;
  *(_OWORD *)(v5 + 16) = v8;
  *(_OWORD *)(v5 + 32) = v9;
  *(void *)(v5 + 48) = v1;
  *(void *)(v5 + 56) = v2;
  *(void *)(v5 + 64) = inited;
  __int128 v6 = (void *)swift_task_alloc();
  *(void *)(v0 + 176) = v6;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (Data, NSURLResponse));
  *__int128 v6 = v0;
  v6[1] = NSURLSession.upload(for:fromFile:delegate:);
  return withTaskCancellationHandler<A>(operation:onCancel:isolation:)();
}

{
  uint64_t v0;
  uint64_t v1;
  *(void *)(*(void *)v1 + 184LL) = v0;
  swift_task_dealloc();
  if (!v0) {
    swift_task_dealloc();
  }
  return swift_task_switch();
}

{
  uint64_t v0;
  swift_release();
  return (*(uint64_t (**)(void, void, void))(v0 + 8))( *(void *)(v0 + 80),  *(void *)(v0 + 88),  *(void *)(v0 + 96));
}

{
  uint64_t v0;
  swift_release();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t closure #1 in NSURLSession.upload(for:fromFile:delegate:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  v8[8] = a7;
  v8[9] = a8;
  v8[6] = a5;
  v8[7] = a6;
  v8[4] = a3;
  v8[5] = a4;
  void v8[2] = a1;
  v8[3] = a2;
  return swift_task_switch();
}

uint64_t closure #1 in NSURLSession.upload(for:fromFile:delegate:)()
{
  uint64_t v1 = *(void *)(v0 + 72);
  __int128 v5 = *(_OWORD *)(v0 + 40);
  __int128 v6 = *(_OWORD *)(v0 + 56);
  uint64_t v2 = swift_task_alloc();
  *(void *)(v0 + 80) = v2;
  *(_OWORD *)(v2 + 16) = *(_OWORD *)(v0 + 24);
  *(_OWORD *)(v2 + 32) = v5;
  *(_OWORD *)(v2 + 48) = v6;
  *(void *)(v2 + 64) = v1;
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v0 + 88) = v3;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (Data, NSURLResponse));
  *uint64_t v3 = v0;
  v3[1] = closure #1 in NSURLSession.upload(for:fromFile:delegate:);
  return withCheckedThrowingContinuation<A>(isolation:function:_:)();
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v2 = *v1;
  *(void *)(v2 + 96) = v0;
  swift_task_dealloc();
  if (v0) {
    return swift_task_switch();
  }
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v2 + 8))();
}

{
  uint64_t v0;
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void closure #1 in closure #1 in NSURLSession.upload(for:fromFile:delegate:)( uint64_t a1, void *a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v26 = a8;
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(demangling cache variable for type metadata for CheckedContinuation<(Data, NSURLResponse), Error>);
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = *(void *)(v14 + 64);
  MEMORY[0x1895F8858](v13);
  objc_msgSend(*(id *)(a3 + 16), sel_copy);
  _bridgeAnyObjectToAny(_:)();
  swift_unknownObjectRelease();
  type metadata accessor for NSMorphologyPronoun( 0LL,  (unint64_t *)&lazy cache variable for type metadata for NSMutableURLRequest);
  swift_dynamicCast();
  uint64_t v16 = (void *)aBlock[6];
  (*(void (**)(char *, uint64_t, uint64_t))(v14 + 16))( (char *)&v25 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL),  a1,  v13);
  unint64_t v17 = (*(unsigned __int8 *)(v14 + 80) + 16LL) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80);
  uint64_t v18 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v14 + 32))( v18 + v17,  (char *)&v25 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL),  v13);
  aBlock[4] = partial apply for closure #1 in closure #1 in closure #1 in NSURLSession.upload(for:from:delegate:);
  aBlock[5] = v18;
  aBlock[0] = MEMORY[0x1895F87A8];
  aBlock[1] = 1107296256LL;
  aBlock[2] = thunk for @escaping @callee_guaranteed @Sendable (@guaranteed Data?, @guaranteed NSURLResponse?, @guaranteed Error?) -> ();
  aBlock[3] = &block_descriptor_122;
  id v19 = _Block_copy(aBlock);
  id v20 = a4;
  swift_release();
  id v21 = objc_msgSend(a2, sel__uploadTaskWithRequest_fromFile_delegate_completionHandler_, v16, v20, a7, v19);
  _Block_release(v19);

  objc_msgSend(v21, sel_set_callCompletionHandlerInline_, 1);
  objc_msgSend(v21, sel_resume);
  uint64_t v22 = *(os_unfair_lock_s **)(v26 + 16);
  uint64_t v23 = v22 + 4;
  uint64_t v24 = v22 + 8;
  os_unfair_lock_lock(v22 + 8);
  closure #1 in NSURLSession.CancelState.activate(task:)(v23, v21, (char *)aBlock);
  os_unfair_lock_unlock(v24);
  if ((aBlock[0] & 1) == 0) {
    objc_msgSend(v21, sel_cancel);
  }
}

uint64_t NSURLSession.upload(for:from:delegate:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v5[15] = a4;
  v5[16] = v4;
  v5[13] = a2;
  v5[14] = a3;
  v5[17] = *a1;
  return swift_task_switch();
}

uint64_t NSURLSession.upload(for:from:delegate:)()
{
  uint64_t v1 = *(void *)(v0 + 120);
  __int128 v8 = *(_OWORD *)(v0 + 104);
  type metadata accessor for NSURLSession.CancelState();
  __int128 v7 = *(_OWORD *)(v0 + 128);
  uint64_t inited = swift_initStackObject();
  *(void *)(v0 + 144) = inited;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ManagedBuffer<NSURLSession.CancelState.State, os_unfair_lock_s>);
  uint64_t v3 = swift_initStackObject();
  *(void *)(v0 + 152) = v3;
  *(_DWORD *)(v3 + 32) = 0;
  *(_BYTE *)(v3 + 16) = 0;
  *(void *)(v3 + 24) = 0LL;
  *(void *)(inited + 16) = v3;
  uint64_t v4 = swift_task_alloc();
  *(void *)(v0 + 160) = v4;
  *(_OWORD *)(v4 + 16) = v7;
  *(_OWORD *)(v4 + 32) = v8;
  *(void *)(v4 + 48) = v1;
  *(void *)(v4 + 56) = inited;
  __int128 v5 = (void *)swift_task_alloc();
  *(void *)(v0 + 168) = v5;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (Data, NSURLResponse));
  void *v5 = v0;
  v5[1] = NSURLSession.upload(for:from:delegate:);
  return withTaskCancellationHandler<A>(operation:onCancel:isolation:)();
}

{
  uint64_t v0;
  uint64_t v1;
  *(void *)(*(void *)v1 + 176LL) = v0;
  swift_task_dealloc();
  if (!v0) {
    swift_task_dealloc();
  }
  return swift_task_switch();
}

uint64_t closure #1 in NSURLSession.upload(for:from:delegate:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  v7[7] = a6;
  v7[8] = a7;
  v7[5] = a4;
  void v7[6] = a5;
  v7[3] = a2;
  v7[4] = a3;
  void v7[2] = a1;
  return swift_task_switch();
}

uint64_t closure #1 in NSURLSession.upload(for:from:delegate:)()
{
  uint64_t v2 = *(void *)(v0 + 56);
  uint64_t v1 = *(void *)(v0 + 64);
  __int128 v6 = *(_OWORD *)(v0 + 40);
  uint64_t v3 = swift_task_alloc();
  *(void *)(v0 + 72) = v3;
  *(_OWORD *)(v3 + 16) = *(_OWORD *)(v0 + 24);
  *(_OWORD *)(v3 + 32) = v6;
  *(void *)(v3 + 48) = v2;
  *(void *)(v3 + 56) = v1;
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v0 + 80) = v4;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (Data, NSURLResponse));
  *uint64_t v4 = v0;
  v4[1] = closure #1 in NSURLSession.upload(for:from:delegate:);
  return withCheckedThrowingContinuation<A>(isolation:function:_:)();
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v2 = *v1;
  *(void *)(v2 + 88) = v0;
  swift_task_dealloc();
  if (v0) {
    return swift_task_switch();
  }
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v2 + 8))();
}

void closure #1 in closure #1 in NSURLSession.upload(for:from:delegate:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(demangling cache variable for type metadata for CheckedContinuation<(Data, NSURLResponse), Error>);
  MEMORY[0x1895F8858](v7);
  objc_msgSend(*(id *)(a3 + 16), sel_copy);
  _bridgeAnyObjectToAny(_:)();
  swift_unknownObjectRelease();
  type metadata accessor for NSMorphologyPronoun( 0LL,  (unint64_t *)&lazy cache variable for type metadata for NSMutableURLRequest);
  swift_dynamicCast();
  __asm { BR              X10 }

void sub_18317C60C()
{
  *(void *)(v7 - 136) = v6;
  *(_WORD *)(v7 - 128) = v0;
  *(_BYTE *)(v7 - 126) = BYTE2(v0);
  *(_BYTE *)(v7 - 125) = BYTE3(v0);
  *(_BYTE *)(v7 - 124) = BYTE4(v0);
  *(_BYTE *)(v7 - 123) = BYTE5(v0);
  id v8 = objc_msgSend(objc_allocWithZone(MEMORY[0x189603F48]), sel_initWithBytes_length_, v7 - 136, BYTE6(v0));
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(v4, v1, v2);
  unint64_t v9 = (*(unsigned __int8 *)(v5 + 80) + 16LL) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  uint64_t v10 = swift_allocObject();
  (*(void (**)(unint64_t, uint64_t, uint64_t))(v5 + 32))(v10 + v9, v4, v2);
  *(void *)(v7 - 104) = partial apply for closure #1 in closure #1 in closure #1 in NSURLSession.upload(for:from:delegate:);
  *(void *)(v7 - 96) = v10;
  *(void *)(v7 - 136) = MEMORY[0x1895F87A8];
  *(void *)(v7 - 128) = 1107296256LL;
  *(void *)(v7 - 120) = thunk for @escaping @callee_guaranteed @Sendable (@guaranteed Data?, @guaranteed NSURLResponse?, @guaranteed Error?) -> ();
  *(void *)(v7 - 112) = &block_descriptor_113;
  uint64_t v11 = _Block_copy((const void *)(v7 - 136));
  swift_release();
  id v12 =  objc_msgSend( *(id *)(v7 - 176),  sel__uploadTaskWithRequest_fromData_delegate_completionHandler_,  v3,  v8,  *(void *)(v7 - 168),  v11);
  _Block_release(v11);

  objc_msgSend(v12, sel_set_callCompletionHandlerInline_, 1);
  objc_msgSend(v12, sel_resume);
  uint64_t v13 = *(os_unfair_lock_s **)(*(void *)(v7 - 160) + 16LL);
  uint64_t v14 = v13 + 4;
  uint64_t v15 = v13 + 8;
  os_unfair_lock_lock(v13 + 8);
  closure #1 in NSURLSession.CancelState.activate(task:)(v14, v12, (char *)(v7 - 136));
  os_unfair_lock_unlock(v15);
  if ((*(_BYTE *)(v7 - 136) & 1) == 0) {
    objc_msgSend(v12, sel_cancel);
  }
}

uint64_t closure #1 in closure #1 in closure #1 in NSURLSession.data(for:delegate:)( uint64_t result, unint64_t a2, void *a3, id a4)
{
  if (a4)
  {
    id v4 = a4;
    __swift_instantiateConcreteTypeFromMangledName(demangling cache variable for type metadata for CheckedContinuation<(Data, NSURLResponse), Error>);
    return CheckedContinuation.resume(throwing:)();
  }

  if (a2 >> 60 == 15)
  {
    __break(1u);
    goto LABEL_8;
  }

  if (!a3)
  {
LABEL_8:
    __break(1u);
    return result;
  }

  outlined copy of Data?(result, a2);
  id v6 = a3;
  __swift_instantiateConcreteTypeFromMangledName(demangling cache variable for type metadata for CheckedContinuation<(Data, NSURLResponse), Error>);
  return CheckedContinuation.resume(returning:)();
}

uint64_t NSURLSession.download(for:delegate:)(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  v4[14] = a1;
  v4[15] = a3;
  uint64_t v5 = *a2;
  v4[16] = v3;
  v4[17] = v5;
  return swift_task_switch();
}

uint64_t NSURLSession.download(for:delegate:)()
{
  uint64_t v1 = *(void *)(v0 + 120);
  type metadata accessor for NSURLSession.CancelState();
  __int128 v7 = *(_OWORD *)(v0 + 128);
  uint64_t inited = swift_initStackObject();
  *(void *)(v0 + 144) = inited;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ManagedBuffer<NSURLSession.CancelState.State, os_unfair_lock_s>);
  uint64_t v3 = swift_initStackObject();
  *(void *)(v0 + 152) = v3;
  *(_DWORD *)(v3 + 32) = 0;
  *(_BYTE *)(v3 + 16) = 0;
  *(void *)(v3 + 24) = 0LL;
  *(void *)(inited + 16) = v3;
  uint64_t v4 = swift_task_alloc();
  *(void *)(v0 + 160) = v4;
  *(_OWORD *)(v4 + 16) = v7;
  *(void *)(v4 + 32) = v1;
  *(void *)(v4 + 40) = inited;
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v0 + 168) = v5;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (URL, NSURLResponse));
  void *v5 = v0;
  v5[1] = NSURLSession.download(for:delegate:);
  return withTaskCancellationHandler<A>(operation:onCancel:isolation:)();
}

{
  uint64_t v0;
  uint64_t v1;
  *(void *)(*(void *)v1 + 176LL) = v0;
  swift_task_dealloc();
  if (!v0) {
    swift_task_dealloc();
  }
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  __int128 v3;
  uint64_t v1 = *(void *)(v0 + 112);
  swift_release();
  uint64_t v2 = *(void *)(v0 + 80);
  uint64_t v3 = *(_OWORD *)(v0 + 64);
  *(void *)uint64_t v1 = *(void *)(v0 + 56);
  *(_OWORD *)(v1 + 8) = v3;
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v2);
}

uint64_t closure #1 in NSURLSession.download(for:delegate:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v5[5] = a4;
  v5[6] = a5;
  v5[3] = a2;
  v5[4] = a3;
  v5[2] = a1;
  return swift_task_switch();
}

uint64_t closure #1 in NSURLSession.download(for:delegate:)()
{
  uint64_t v2 = *(void *)(v0 + 40);
  uint64_t v1 = *(void *)(v0 + 48);
  uint64_t v3 = swift_task_alloc();
  *(void *)(v0 + 56) = v3;
  *(_OWORD *)(v3 + 16) = *(_OWORD *)(v0 + 24);
  *(void *)(v3 + 32) = v2;
  *(void *)(v3 + 40) = v1;
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v0 + 64) = v4;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (URL, NSURLResponse));
  *uint64_t v4 = v0;
  v4[1] = closure #1 in NSURLSession.download(for:delegate:);
  return withCheckedThrowingContinuation<A>(isolation:function:_:)();
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v2 = *v1;
  *(void *)(v2 + 72) = v0;
  swift_task_dealloc();
  if (v0) {
    return swift_task_switch();
  }
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v2 + 8))();
}

void closure #1 in closure #1 in NSURLSession.download(for:delegate:)( uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<(URL, NSURLResponse), Error>);
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = *(void *)(v11 + 64);
  MEMORY[0x1895F8858](v10);
  objc_msgSend(*(id *)(a3 + 16), sel_copy);
  _bridgeAnyObjectToAny(_:)();
  swift_unknownObjectRelease();
  type metadata accessor for NSMorphologyPronoun( 0LL,  (unint64_t *)&lazy cache variable for type metadata for NSMutableURLRequest);
  swift_dynamicCast();
  uint64_t v13 = (void *)aBlock[6];
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))( (char *)&aBlock[-1] - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL),  a1,  v10);
  unint64_t v14 = (*(unsigned __int8 *)(v11 + 80) + 16LL) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80);
  uint64_t v15 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v11 + 32))( v15 + v14,  (char *)&aBlock[-1] - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL),  v10);
  aBlock[4] = partial apply for closure #1 in closure #1 in closure #1 in NSURLSession.download(resumeFrom:delegate:);
  aBlock[5] = v15;
  aBlock[0] = MEMORY[0x1895F87A8];
  aBlock[1] = 1107296256LL;
  aBlock[2] = thunk for @escaping @callee_guaranteed (@in_guaranteed URL?, @guaranteed NSURLResponse?, @guaranteed Error?) -> ();
  aBlock[3] = &block_descriptor_104;
  uint64_t v16 = _Block_copy(aBlock);
  swift_release();
  id v17 = objc_msgSend(a2, sel__downloadTaskWithRequest_delegate_completionHandler_, v13, a4, v16);
  _Block_release(v16);

  objc_msgSend(v17, sel_set_callCompletionHandlerInline_, 1);
  objc_msgSend(v17, sel_set_keepDownloadTaskFile_, 1);
  objc_msgSend(v17, sel_resume);
  uint64_t v18 = *(os_unfair_lock_s **)(a5 + 16);
  id v19 = v18 + 4;
  id v20 = v18 + 8;
  os_unfair_lock_lock(v18 + 8);
  closure #1 in NSURLSession.CancelState.activate(task:)(v19, v17, (char *)aBlock);
  os_unfair_lock_unlock(v20);
  if ((aBlock[0] & 1) == 0) {
    objc_msgSend(v17, sel_cancel);
  }
}

void *thunk for @escaping @callee_guaranteed (@in_guaranteed URL?, @guaranteed NSURLResponse?, @guaranteed Error?) -> ()( uint64_t a1, void *a2, void *a3, void *a4)
{
  id v6 = *(void (**)(void **, void *, void *))(a1 + 32);
  if (a2)
  {
    swift_retain();
    id v8 = a2;
    URL.init(reference:)(v8, &v12);
  }

  else
  {
    uint64_t v12 = 0LL;
    __int128 v13 = 0uLL;
    swift_retain();
  }

  id v9 = a3;
  id v10 = a4;
  v6(&v12, a3, a4);

  swift_release();
  return outlined consume of URL?(v12);
}

uint64_t NSURLSession.download(from:delegate:)(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  *(void *)(v4 + 112) = a1;
  *(void *)(v4 + 120) = a3;
  uint64_t v5 = *a2;
  *(void *)(v4 + 128) = v3;
  *(void *)(v4 + 136) = v5;
  *(_OWORD *)(v4 + 144) = *(_OWORD *)(a2 + 1);
  return swift_task_switch();
}

uint64_t NSURLSession.download(from:delegate:)()
{
  __int128 v8 = *(_OWORD *)(v0 + 144);
  uint64_t v1 = *(void *)(v0 + 120);
  type metadata accessor for NSURLSession.CancelState();
  __int128 v7 = *(_OWORD *)(v0 + 128);
  uint64_t inited = swift_initStackObject();
  *(void *)(v0 + 160) = inited;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ManagedBuffer<NSURLSession.CancelState.State, os_unfair_lock_s>);
  uint64_t v3 = swift_initStackObject();
  *(void *)(v0 + 168) = v3;
  *(_DWORD *)(v3 + 32) = 0;
  *(_BYTE *)(v3 + 16) = 0;
  *(void *)(v3 + 24) = 0LL;
  *(void *)(inited + 16) = v3;
  uint64_t v4 = swift_task_alloc();
  *(void *)(v0 + 176) = v4;
  *(_OWORD *)(v4 + 16) = v7;
  *(_OWORD *)(v4 + 32) = v8;
  *(void *)(v4 + 48) = v1;
  *(void *)(v4 + 56) = inited;
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v0 + 184) = v5;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (URL, NSURLResponse));
  void *v5 = v0;
  v5[1] = NSURLSession.download(from:delegate:);
  return withTaskCancellationHandler<A>(operation:onCancel:isolation:)();
}

{
  uint64_t v0;
  uint64_t v1;
  *(void *)(*(void *)v1 + 192LL) = v0;
  swift_task_dealloc();
  if (!v0) {
    swift_task_dealloc();
  }
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  __int128 v3;
  uint64_t v1 = *(void *)(v0 + 112);
  swift_release();
  uint64_t v2 = *(void *)(v0 + 80);
  uint64_t v3 = *(_OWORD *)(v0 + 64);
  *(void *)uint64_t v1 = *(void *)(v0 + 56);
  *(_OWORD *)(v1 + 8) = v3;
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v2);
}

{
  uint64_t v0;
  swift_release();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t closure #1 in NSURLSession.download(from:delegate:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  v7[7] = a6;
  v7[8] = a7;
  v7[5] = a4;
  void v7[6] = a5;
  v7[3] = a2;
  v7[4] = a3;
  void v7[2] = a1;
  return swift_task_switch();
}

uint64_t closure #1 in NSURLSession.download(from:delegate:)()
{
  uint64_t v2 = *(void *)(v0 + 56);
  uint64_t v1 = *(void *)(v0 + 64);
  __int128 v6 = *(_OWORD *)(v0 + 40);
  uint64_t v3 = swift_task_alloc();
  *(void *)(v0 + 72) = v3;
  *(_OWORD *)(v3 + 16) = *(_OWORD *)(v0 + 24);
  *(_OWORD *)(v3 + 32) = v6;
  *(void *)(v3 + 48) = v2;
  *(void *)(v3 + 56) = v1;
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v0 + 80) = v4;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (URL, NSURLResponse));
  *uint64_t v4 = v0;
  v4[1] = closure #1 in NSURLSession.upload(for:from:delegate:);
  return withCheckedThrowingContinuation<A>(isolation:function:_:)();
}

void closure #1 in closure #1 in NSURLSession.download(from:delegate:)( uint64_t a1, void *a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<(URL, NSURLResponse), Error>);
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = *(void *)(v13 + 64);
  MEMORY[0x1895F8858](v12);
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v13 + 16))(&v23[-((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL)], a1, v12);
  unint64_t v15 = (*(unsigned __int8 *)(v13 + 80) + 16LL) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80);
  uint64_t v16 = swift_allocObject();
  (*(void (**)(unint64_t, _BYTE *, uint64_t))(v13 + 32))( v16 + v15,  &v23[-((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL)],  v12);
  aBlock[4] = partial apply for closure #1 in closure #1 in closure #1 in NSURLSession.download(resumeFrom:delegate:);
  aBlock[5] = v16;
  aBlock[0] = MEMORY[0x1895F87A8];
  aBlock[1] = 1107296256LL;
  aBlock[2] = thunk for @escaping @callee_guaranteed (@in_guaranteed URL?, @guaranteed NSURLResponse?, @guaranteed Error?) -> ();
  aBlock[3] = &block_descriptor_95;
  id v17 = _Block_copy(aBlock);
  id v18 = a3;
  swift_release();
  id v19 = objc_msgSend(a2, sel__downloadTaskWithURL_delegate_completionHandler_, v18, a6, v17);
  _Block_release(v17);

  objc_msgSend(v19, sel_set_callCompletionHandlerInline_, 1);
  objc_msgSend(v19, sel_set_keepDownloadTaskFile_, 1);
  objc_msgSend(v19, sel_resume);
  id v20 = *(os_unfair_lock_s **)(a7 + 16);
  id v21 = v20 + 4;
  uint64_t v22 = v20 + 8;
  os_unfair_lock_lock(v20 + 8);
  closure #1 in NSURLSession.CancelState.activate(task:)(v21, v19, (char *)aBlock);
  os_unfair_lock_unlock(v22);
  if ((aBlock[0] & 1) == 0) {
    objc_msgSend(v19, sel_cancel);
  }
}

uint64_t NSURLSession.download(resumeFrom:delegate:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v5[17] = a4;
  v5[18] = v4;
  v5[15] = a2;
  v5[16] = a3;
  v5[14] = a1;
  return swift_task_switch();
}

uint64_t NSURLSession.download(resumeFrom:delegate:)()
{
  uint64_t v2 = *(void *)(v0 + 136);
  uint64_t v1 = *(void *)(v0 + 144);
  __int128 v8 = *(_OWORD *)(v0 + 120);
  type metadata accessor for NSURLSession.CancelState();
  uint64_t inited = swift_initStackObject();
  *(void *)(v0 + 152) = inited;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ManagedBuffer<NSURLSession.CancelState.State, os_unfair_lock_s>);
  uint64_t v4 = swift_initStackObject();
  *(void *)(v0 + 160) = v4;
  *(_DWORD *)(v4 + 32) = 0;
  *(_BYTE *)(v4 + 16) = 0;
  *(void *)(v4 + 24) = 0LL;
  *(void *)(inited + 16) = v4;
  uint64_t v5 = swift_task_alloc();
  *(void *)(v0 + 168) = v5;
  *(void *)(v5 + 16) = v1;
  *(_OWORD *)(v5 + 24) = v8;
  *(void *)(v5 + 40) = v2;
  *(void *)(v5 + 48) = inited;
  __int128 v6 = (void *)swift_task_alloc();
  *(void *)(v0 + 176) = v6;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (URL, NSURLResponse));
  *__int128 v6 = v0;
  v6[1] = NSURLSession.download(resumeFrom:delegate:);
  return withTaskCancellationHandler<A>(operation:onCancel:isolation:)();
}

{
  uint64_t v0;
  uint64_t v1;
  *(void *)(*(void *)v1 + 184LL) = v0;
  swift_task_dealloc();
  if (!v0) {
    swift_task_dealloc();
  }
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  __int128 v3;
  uint64_t v1 = *(void *)(v0 + 112);
  swift_release();
  uint64_t v2 = *(void *)(v0 + 80);
  uint64_t v3 = *(_OWORD *)(v0 + 64);
  *(void *)uint64_t v1 = *(void *)(v0 + 56);
  *(_OWORD *)(v1 + 8) = v3;
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v2);
}

uint64_t closure #1 in NSURLSession.download(resumeFrom:delegate:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v6[6] = a5;
  v6[7] = a6;
  v6[4] = a3;
  v6[5] = a4;
  void v6[2] = a1;
  v6[3] = a2;
  return swift_task_switch();
}

uint64_t closure #1 in NSURLSession.download(resumeFrom:delegate:)()
{
  uint64_t v1 = *(void *)(v0 + 56);
  __int128 v5 = *(_OWORD *)(v0 + 24);
  __int128 v6 = *(_OWORD *)(v0 + 40);
  uint64_t v2 = swift_task_alloc();
  *(void *)(v0 + 64) = v2;
  *(_OWORD *)(v2 + 16) = v5;
  *(_OWORD *)(v2 + 32) = v6;
  *(void *)(v2 + 48) = v1;
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v0 + 72) = v3;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (URL, NSURLResponse));
  *uint64_t v3 = v0;
  v3[1] = closure #1 in NSURLSession.download(resumeFrom:delegate:);
  return withCheckedThrowingContinuation<A>(isolation:function:_:)();
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v2 = *v1;
  *(void *)(v2 + 80) = v0;
  swift_task_dealloc();
  if (v0) {
    return swift_task_switch();
  }
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v2 + 8))();
}

{
  uint64_t v0;
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void closure #1 in closure #1 in NSURLSession.download(resumeFrom:delegate:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<(URL, NSURLResponse), Error>);
  MEMORY[0x1895F8858](v5);
  __asm { BR              X10 }

void sub_18317D88C()
{
  *(void *)(v6 - 136) = v4;
  *(_WORD *)(v6 - 128) = v5;
  *(_BYTE *)(v6 - 126) = BYTE2(v5);
  *(_BYTE *)(v6 - 125) = BYTE3(v5);
  *(_BYTE *)(v6 - 124) = BYTE4(v5);
  *(_BYTE *)(v6 - 123) = BYTE5(v5);
  id v7 = objc_msgSend(objc_allocWithZone(MEMORY[0x189603F48]), sel_initWithBytes_length_, v6 - 136, BYTE6(v5));
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 16))(v2, v3, v1);
  unint64_t v8 = (*(unsigned __int8 *)(v0 + 80) + 16LL) & ~(unint64_t)*(unsigned __int8 *)(v0 + 80);
  uint64_t v9 = swift_allocObject();
  (*(void (**)(unint64_t, uint64_t, uint64_t))(v0 + 32))(v9 + v8, v2, v1);
  *(void *)(v6 - 104) = partial apply for closure #1 in closure #1 in closure #1 in NSURLSession.download(resumeFrom:delegate:);
  *(void *)(v6 - 96) = v9;
  *(void *)(v6 - 136) = MEMORY[0x1895F87A8];
  *(void *)(v6 - 128) = 1107296256LL;
  *(void *)(v6 - 120) = thunk for @escaping @callee_guaranteed (@in_guaranteed URL?, @guaranteed NSURLResponse?, @guaranteed Error?) -> ();
  *(void *)(v6 - 112) = &block_descriptor_86;
  id v10 = _Block_copy((const void *)(v6 - 136));
  swift_release();
  id v11 =  objc_msgSend( *(id *)(v6 - 168),  sel__downloadTaskWithResumeData_delegate_completionHandler_,  v7,  *(void *)(v6 - 160),  v10);
  _Block_release(v10);

  objc_msgSend(v11, sel_set_callCompletionHandlerInline_, 1);
  objc_msgSend(v11, sel_set_keepDownloadTaskFile_, 1);
  objc_msgSend(v11, sel_resume);
  uint64_t v12 = *(os_unfair_lock_s **)(*(void *)(v6 - 152) + 16LL);
  uint64_t v13 = v12 + 4;
  uint64_t v14 = v12 + 8;
  os_unfair_lock_lock(v12 + 8);
  closure #1 in NSURLSession.CancelState.activate(task:)(v13, v11, (char *)(v6 - 136));
  os_unfair_lock_unlock(v14);
  if ((*(_BYTE *)(v6 - 136) & 1) == 0) {
    objc_msgSend(v11, sel_cancel);
  }
}

uint64_t closure #1 in closure #1 in closure #1 in NSURLSession.download(for:delegate:)( uint64_t *a1, void *a2, id a3)
{
  if (a3)
  {
    id v3 = a3;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<(URL, NSURLResponse), Error>);
    return CheckedContinuation.resume(throwing:)();
  }

  uint64_t result = *a1;
  if (!result)
  {
    __break(1u);
    goto LABEL_8;
  }

  if (!a2)
  {
LABEL_8:
    __break(1u);
    return result;
  }

  outlined copy of URL?(result);
  id v6 = a2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<(URL, NSURLResponse), Error>);
  return CheckedContinuation.resume(returning:)();
}

uint64_t NSURLSession.AsyncBytes._Storage.__deallocating_deinit()
{
  uint64_t v1 = *(void **)(v0 + 16);
  objc_msgSend(v1, sel_cancel);

  outlined consume of Data?(*(void *)(v0 + 32), *(void *)(v0 + 40));
  return swift_deallocClassInstance();
}

id NSURLSession.AsyncBytes.task.getter()
{
  return *(id *)(*(void *)v0 + 16LL);
}

uint64_t NSURLSession.AsyncBytes.Iterator.buffer.getter()
{
  return swift_unknownObjectRetain();
}

uint64_t NSURLSession.AsyncBytes.Iterator.buffer.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = swift_unknownObjectRelease();
  *id v3 = a1;
  v3[1] = a2;
  v3[2] = a3;
  return result;
}

uint64_t (*NSURLSession.AsyncBytes.Iterator.buffer.modify())()
{
  return destructiveProjectEnumData for PredicateCodableError;
}

uint64_t closure #1 in NSURLSession.AsyncBytes.Iterator.init(storage:)(uint64_t a1, uint64_t a2)
{
  *(void *)(v2 + 24) = a1;
  *(void *)(v2 + 32) = a2;
  return swift_task_switch();
}

uint64_t closure #1 in NSURLSession.AsyncBytes.Iterator.init(storage:)()
{
  uint64_t v1 = (int8x16_t *)swift_task_alloc();
  *(void *)(v0 + 40) = v1;
  v1[1] = vextq_s8(*(int8x16_t *)(v0 + 24), *(int8x16_t *)(v0 + 24), 8uLL);
  uint64_t v2 = (void *)swift_task_alloc();
  *(void *)(v0 + 48) = v2;
  *uint64_t v2 = v0;
  v2[1] = closure #1 in NSURLSession.AsyncBytes.Iterator.init(storage:);
  return withTaskCancellationHandler<A>(operation:onCancel:isolation:)();
}

{
  uint64_t v0;
  uint64_t v1;
  *(void *)(*(void *)v1 + 56LL) = v0;
  swift_task_dealloc();
  if (!v0) {
    swift_task_dealloc();
  }
  return swift_task_switch();
}

{
  uint64_t v0;
  return (*(uint64_t (**)(void))(v0 + 8))(*(void *)(v0 + 16));
}

{
  uint64_t v0;
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t closure #1 in closure #1 in NSURLSession.AsyncBytes.Iterator.init(storage:)( uint64_t a1, uint64_t a2, uint64_t a3)
{
  v3[7] = a2;
  v3[8] = a3;
  v3[6] = a1;
  v3[9] = type metadata accessor for URLSessionAsyncBytesDelegate.State(0LL);
  v3[10] = swift_task_alloc();
  return swift_task_switch();
}

void closure #1 in closure #1 in NSURLSession.AsyncBytes.Iterator.init(storage:)()
{
  uint64_t v1 = *(void *)(v0 + 80);
  uint64_t v2 = *(void *)(*(void *)(v0 + 56) + 24LL);
  id v3 = *(os_unfair_lock_s **)(v2
                            + OBJC_IVAR____TtC10FoundationP33_1935C07EE287982D980AA89BB85ACEFA28URLSessionAsyncBytesDelegate_lock);
  swift_retain();
  os_unfair_lock_lock(v3 + 4);
  swift_release();
  outlined init with copy of URLSessionAsyncBytesDelegate.State( v2 + OBJC_IVAR____TtC10FoundationP33_1935C07EE287982D980AA89BB85ACEFA28URLSessionAsyncBytesDelegate_state,  v1);
  uint64_t v4 = (char *)sub_18317DF30 + 4 * byte_1837ADBB0[swift_getEnumCaseMultiPayload()];
  __asm { BR              X11 }

uint64_t sub_18317DF30()
{
  return _assertionFailure(_:_:file:line:flags:)();
}

uint64_t sub_18317DF94()
{
  uint64_t v2 = (uint64_t *)v0[10];
  uint64_t v3 = *v2;
  uint64_t v4 = v2[1];
  v0[11] = v4;
  uint64_t v5 = (void *)swift_task_alloc();
  v0[12] = v5;
  v5[2] = v1;
  v5[3] = v3;
  v5[4] = v4;
  id v6 = (void *)swift_task_alloc();
  v0[13] = v6;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Data?);
  *id v6 = v0;
  v6[1] = closure #1 in closure #1 in NSURLSession.AsyncBytes.Iterator.init(storage:);
  return withCheckedThrowingContinuation<A>(isolation:function:_:)();
}

uint64_t sub_18317E038()
{
  uint64_t v3 = **(void ***)(v1 + 80);
  if (v3)
  {
    id v4 = v3;
    outlined destroy of URLSessionAsyncBytesDelegate.State((uint64_t)v2);
    *uint64_t v2 = 0LL;
    swift_storeEnumTagMultiPayload();
    swift_retain();
    os_unfair_lock_unlock(v0);
    swift_release();
    swift_willThrow();
  }

  else
  {
    swift_retain();
    os_unfair_lock_unlock(v0);
    swift_release();
    uint64_t v5 = *(void **)(v1 + 48);
    *(void *)(*(void *)(v1 + 64) + 16LL) = *(void *)(*(void *)(v1 + 64) + 8LL);
    void *v5 = 0LL;
  }

  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v1 + 8))();
}

uint64_t closure #1 in closure #1 in NSURLSession.AsyncBytes.Iterator.init(storage:)()
{
  *(void *)(*(void *)v1 + 112LL) = v0;
  swift_task_dealloc();
  if (!v0) {
    swift_task_dealloc();
  }
  return swift_task_switch();
}

{
  uint64_t v0;
  unint64_t v1;
  void *v2;
  swift_release();
  uint64_t v1 = *(void *)(v0 + 40);
  if (v1 >> 60 != 15)
  {
    *(void *)(v0 + 16) = *(void *)(v0 + 32);
    *(void *)(v0 + 24) = v1;
    __asm { BR              X10 }
  }

  uint64_t v2 = *(void **)(v0 + 48);
  *(void *)(*(void *)(v0 + 64) + 16LL) = *(void *)(*(void *)(v0 + 64) + 8LL);
  *uint64_t v2 = 0LL;
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t NSURLSession.AsyncBytes.Iterator.next()()
{
  *(void *)(v1 + 16) = v0;
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;
  unsigned __int8 *v2;
  uint64_t v3;
  void *v5;
  uint64_t v1 = *(void *)(v0 + 16);
  uint64_t v2 = *(unsigned __int8 **)(v1 + 8);
  if (v2 == *(unsigned __int8 **)(v1 + 16))
  {
    uint64_t v5 = (void *)swift_task_alloc();
    *(void *)(v0 + 24) = v5;
    void *v5 = v0;
    v5[1] = NSURLSession.AsyncBytes.Iterator.next();
    return _AsyncBytesBuffer.reloadBufferAndNext()();
  }

  else
  {
    uint64_t v3 = *v2;
    *(void *)(v1 + 8) = v2 + 1;
    return (*(uint64_t (**)(uint64_t))(v0 + 8))(v3);
  }

uint64_t NSURLSession.AsyncBytes.Iterator.next()(__int16 a1)
{
  uint64_t v4 = *v2;
  swift_task_dealloc();
  if (v1) {
    return (*(uint64_t (**)(void))(v4 + 8))();
  }
  else {
    return (*(uint64_t (**)(void))(v4 + 8))(a1 & 0x1FF);
  }
}

uint64_t protocol witness for AsyncIteratorProtocol.next() in conformance NSURLSession.AsyncBytes.Iterator( uint64_t a1)
{
  *(void *)(v2 + 16) = a1;
  *(void *)(v2 + 24) = v1;
  return swift_task_switch();
}

uint64_t protocol witness for AsyncIteratorProtocol.next() in conformance NSURLSession.AsyncBytes.Iterator()
{
  uint64_t v1 = *(void *)(v0 + 24);
  uint64_t v2 = *(char **)(v1 + 8);
  if (v2 == *(char **)(v1 + 16))
  {
    id v6 = (void *)swift_task_alloc();
    *(void *)(v0 + 32) = v6;
    *id v6 = v0;
    v6[1] = protocol witness for AsyncIteratorProtocol.next() in conformance NSURLSession.AsyncBytes.Iterator;
    return _AsyncBytesBuffer.reloadBufferAndNext()();
  }

  else
  {
    char v3 = *v2;
    *(void *)(v1 + 8) = v2 + 1;
    uint64_t v4 = *(_BYTE **)(v0 + 16);
    *uint64_t v4 = v3;
    v4[1] = 0;
    return (*(uint64_t (**)(void))(v0 + 8))();
  }

uint64_t protocol witness for AsyncIteratorProtocol.next() in conformance NSURLSession.AsyncBytes.Iterator( __int16 a1)
{
  uint64_t v4 = *v2;
  uint64_t v5 = *v2;
  swift_task_dealloc();
  if (!v1)
  {
    id v6 = *(_BYTE **)(v4 + 16);
    *id v6 = a1;
    v6[1] = HIBYTE(a1) & 1;
  }

  return (*(uint64_t (**)(void))(v5 + 8))();
}

uint64_t _sSo12NSURLSessionC10FoundationE10AsyncBytesV8IteratorVScIACScI4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTW( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[2] = a1;
  v4[3] = a4;
  uint64_t v9 = (uint64_t (*)(uint64_t, uint64_t))((char *)&_sScIsE4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFSo12NSURLSessionC10FoundationE10AsyncBytesV8IteratorV_Tgq5Tu
                                                + _sScIsE4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFSo12NSURLSessionC10FoundationE10AsyncBytesV8IteratorV_Tgq5Tu);
  id v7 = (void *)swift_task_alloc();
  v4[4] = v7;
  *id v7 = v4;
  v7[1] = _sSo12NSURLSessionC10FoundationE10AsyncBytesV8IteratorVScIACScI4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTWTQ0_;
  return v9(a2, a3);
}

uint64_t _sSo12NSURLSessionC10FoundationE10AsyncBytesV8IteratorVScIACScI4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTWTQ0_( __int16 a1)
{
  uint64_t v4 = *v2;
  uint64_t v5 = *v2;
  swift_task_dealloc();
  if (v1)
  {
    **(void **)(v4 + 24) = v1;
  }

  else
  {
    id v6 = *(_BYTE **)(v4 + 16);
    *id v6 = a1;
    v6[1] = HIBYTE(a1) & 1;
  }

  return (*(uint64_t (**)(void))(v5 + 8))();
}

uint64_t NSURLSession.AsyncBytes.makeAsyncIterator()()
{
  uint64_t v1 = *v0;
  type metadata accessor for _AsyncBytesBuffer.Storage();
  uint64_t v2 = swift_allocObject();
  *(void *)(v2 + 16) = 0LL;
  *(void *)(v2 + 24) = 0LL;
  *(_BYTE *)(v2 + 32) = 0;
  swift_retain();
  uint64_t v3 = swift_dynamicCastClassUnconditional();
  uint64_t v4 = *(void *)(v3 + 16);
  *(void *)(v3 + 16) = &async function pointer to partial apply for closure #1 in NSURLSession.AsyncBytes.Iterator.init(storage:);
  *(void *)(v3 + 24) = v1;
  outlined consume of (@escaping @callee_guaranteed (@in_guaranteed URL, @guaranteed Error) -> (@unowned Bool))?(v4);
  swift_release();
  return v2;
}

uint64_t protocol witness for AsyncSequence.makeAsyncIterator() in conformance NSURLSession.AsyncBytes@<X0>( uint64_t *a1@<X8>)
{
  uint64_t v3 = *v1;
  type metadata accessor for _AsyncBytesBuffer.Storage();
  uint64_t v4 = swift_allocObject();
  *(void *)(v4 + 16) = 0LL;
  *(void *)(v4 + 24) = 0LL;
  *(_BYTE *)(v4 + 32) = 0;
  swift_retain();
  uint64_t v5 = swift_dynamicCastClassUnconditional();
  uint64_t v6 = *(void *)(v5 + 16);
  *(void *)(v5 + 16) = &closure #1 in NSURLSession.AsyncBytes.Iterator.init(storage:)partial apply;
  *(void *)(v5 + 24) = v3;
  outlined consume of (@escaping @callee_guaranteed (@in_guaranteed URL, @guaranteed Error) -> (@unowned Bool))?(v6);
  uint64_t result = swift_release();
  *a1 = v4;
  a1[1] = v4 + 33;
  a1[2] = v4 + 33;
  return result;
}

uint64_t NSURLSession.bytes(for:delegate:)(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  v4[12] = a1;
  v4[13] = a3;
  uint64_t v5 = *a2;
  v4[14] = v3;
  v4[15] = v5;
  return swift_task_switch();
}

uint64_t NSURLSession.bytes(for:delegate:)()
{
  uint64_t v1 = *(void *)(v0 + 104);
  type metadata accessor for NSURLSession.CancelState();
  __int128 v7 = *(_OWORD *)(v0 + 112);
  uint64_t inited = swift_initStackObject();
  *(void *)(v0 + 128) = inited;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ManagedBuffer<NSURLSession.CancelState.State, os_unfair_lock_s>);
  uint64_t v3 = swift_initStackObject();
  *(void *)(v0 + 136) = v3;
  *(_DWORD *)(v3 + 32) = 0;
  *(_BYTE *)(v3 + 16) = 0;
  *(void *)(v3 + 24) = 0LL;
  *(void *)(inited + 16) = v3;
  uint64_t v4 = swift_task_alloc();
  *(void *)(v0 + 144) = v4;
  *(_OWORD *)(v4 + 16) = v7;
  *(void *)(v4 + 32) = v1;
  *(void *)(v4 + 40) = inited;
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v0 + 152) = v5;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (NSURLSession.AsyncBytes, NSURLResponse));
  void *v5 = v0;
  v5[1] = NSURLSession.bytes(for:delegate:);
  return withTaskCancellationHandler<A>(operation:onCancel:isolation:)();
}

{
  uint64_t v0;
  uint64_t v1;
  *(void *)(*(void *)v1 + 160LL) = v0;
  swift_task_dealloc();
  if (!v0) {
    swift_task_dealloc();
  }
  return swift_task_switch();
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v1 = *(void **)(v0 + 96);
  swift_release();
  uint64_t v2 = *(void *)(v0 + 88);
  *uint64_t v1 = *(void *)(v0 + 80);
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v2);
}

uint64_t closure #1 in NSURLSession.bytes(for:delegate:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v5[11] = a4;
  v5[12] = a5;
  v5[9] = a2;
  v5[10] = a3;
  v5[8] = a1;
  return swift_task_switch();
}

uint64_t closure #1 in NSURLSession.bytes(for:delegate:)()
{
  uint64_t v1 = v0[11];
  uint64_t v2 = v0[12];
  uint64_t v3 = (void *)v0[9];
  objc_msgSend(*(id *)(v0[10] + 16), sel_copy);
  _bridgeAnyObjectToAny(_:)();
  swift_unknownObjectRelease();
  type metadata accessor for NSMorphologyPronoun( 0LL,  (unint64_t *)&lazy cache variable for type metadata for NSMutableURLRequest);
  swift_dynamicCast();
  uint64_t v4 = (void *)v0[6];
  id v5 = objc_msgSend(v3, sel__dataTaskWithRequest_delegate_, v4, v1);
  v0[13] = v5;

  uint64_t v6 = swift_task_alloc();
  v0[14] = v6;
  *(void *)(v6 + 16) = v5;
  *(void *)(v6 + 24) = v2;
  __int128 v7 = (void *)swift_task_alloc();
  v0[15] = v7;
  type metadata accessor for NSMorphologyPronoun(0LL, &lazy cache variable for type metadata for NSURLResponse);
  *__int128 v7 = v0;
  v7[1] = closure #1 in NSURLSession.bytes(for:delegate:);
  return withCheckedThrowingContinuation<A>(isolation:function:_:)();
}

{
  uint64_t v0;
  uint64_t v1;
  *(void *)(*(void *)v1 + 128LL) = v0;
  swift_task_dealloc();
  if (!v0) {
    swift_task_dealloc();
  }
  return swift_task_switch();
}

{
  uint64_t v0;

  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

id closure #1 in NSURLSession.bytes(for:delegate:)()
{
  uint64_t v1 = *(void **)(v0 + 104);
  uint64_t v2 = *(void *)(v0 + 56);
  type metadata accessor for NSURLSession.AsyncBytes._Storage();
  uint64_t v3 = swift_allocObject();
  *(_OWORD *)(v3 + 32) = xmmword_1837ADD10;
  *(void *)(v3 + 16) = v1;
  id result = objc_msgSend(v1, sel__internalDelegate);
  if (result)
  {
    id v5 = *(uint64_t **)(v0 + 64);

    type metadata accessor for URLSessionAsyncBytesDelegate(0LL);
    *(void *)(v3 + 24) = swift_dynamicCastClassUnconditional();
    uint64_t *v5 = v3;
    v5[1] = v2;
    return (id)(*(uint64_t (**)(void))(v0 + 8))();
  }

  else
  {
    __break(1u);
  }

  return result;
}

uint64_t NSURLSession.bytes(from:delegate:)(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  *(void *)(v4 + 96) = a1;
  *(void *)(v4 + 104) = a3;
  uint64_t v5 = *a2;
  *(void *)(v4 + 112) = v3;
  *(void *)(v4 + 120) = v5;
  *(_OWORD *)(v4 + 128) = *(_OWORD *)(a2 + 1);
  return swift_task_switch();
}

uint64_t NSURLSession.bytes(from:delegate:)()
{
  __int128 v8 = *(_OWORD *)(v0 + 128);
  uint64_t v1 = *(void *)(v0 + 104);
  type metadata accessor for NSURLSession.CancelState();
  __int128 v7 = *(_OWORD *)(v0 + 112);
  uint64_t inited = swift_initStackObject();
  *(void *)(v0 + 144) = inited;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ManagedBuffer<NSURLSession.CancelState.State, os_unfair_lock_s>);
  uint64_t v3 = swift_initStackObject();
  *(void *)(v0 + 152) = v3;
  *(_DWORD *)(v3 + 32) = 0;
  *(_BYTE *)(v3 + 16) = 0;
  *(void *)(v3 + 24) = 0LL;
  *(void *)(inited + 16) = v3;
  uint64_t v4 = swift_task_alloc();
  *(void *)(v0 + 160) = v4;
  *(_OWORD *)(v4 + 16) = v7;
  *(_OWORD *)(v4 + 32) = v8;
  *(void *)(v4 + 48) = v1;
  *(void *)(v4 + 56) = inited;
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v0 + 168) = v5;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (NSURLSession.AsyncBytes, NSURLResponse));
  void *v5 = v0;
  v5[1] = NSURLSession.bytes(from:delegate:);
  return withTaskCancellationHandler<A>(operation:onCancel:isolation:)();
}

{
  uint64_t v0;
  uint64_t v1;
  *(void *)(*(void *)v1 + 176LL) = v0;
  swift_task_dealloc();
  if (!v0) {
    swift_task_dealloc();
  }
  return swift_task_switch();
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v1 = *(void **)(v0 + 96);
  swift_release();
  uint64_t v2 = *(void *)(v0 + 88);
  *uint64_t v1 = *(void *)(v0 + 80);
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v2);
}

uint64_t closure #1 in NSURLSession.bytes(from:delegate:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  void v7[6] = a6;
  v7[7] = a7;
  v7[4] = a2;
  v7[5] = a3;
  v7[3] = a1;
  return swift_task_switch();
}

uint64_t closure #1 in NSURLSession.bytes(from:delegate:)()
{
  uint64_t v1 = *(void *)(v0 + 56);
  id v2 = objc_msgSend(*(id *)(v0 + 32), sel__dataTaskWithURL_delegate_, *(void *)(v0 + 40), *(void *)(v0 + 48));
  *(void *)(v0 + 64) = v2;
  uint64_t v3 = swift_task_alloc();
  *(void *)(v0 + 72) = v3;
  *(void *)(v3 + 16) = v2;
  *(void *)(v3 + 24) = v1;
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v0 + 80) = v4;
  type metadata accessor for NSMorphologyPronoun(0LL, &lazy cache variable for type metadata for NSURLResponse);
  *uint64_t v4 = v0;
  v4[1] = closure #1 in NSURLSession.bytes(from:delegate:);
  return withCheckedThrowingContinuation<A>(isolation:function:_:)();
}

{
  uint64_t v0;
  uint64_t v1;
  *(void *)(*(void *)v1 + 88LL) = v0;
  swift_task_dealloc();
  if (!v0) {
    swift_task_dealloc();
  }
  return swift_task_switch();
}

{
  uint64_t v0;

  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

id closure #1 in NSURLSession.bytes(from:delegate:)()
{
  uint64_t v1 = *(void **)(v0 + 64);
  uint64_t v2 = *(void *)(v0 + 16);
  type metadata accessor for NSURLSession.AsyncBytes._Storage();
  uint64_t v3 = swift_allocObject();
  *(_OWORD *)(v3 + 32) = xmmword_1837ADD10;
  *(void *)(v3 + 16) = v1;
  id result = objc_msgSend(v1, sel__internalDelegate);
  if (result)
  {
    uint64_t v5 = *(uint64_t **)(v0 + 24);

    type metadata accessor for URLSessionAsyncBytesDelegate(0LL);
    *(void *)(v3 + 24) = swift_dynamicCastClassUnconditional();
    uint64_t *v5 = v3;
    v5[1] = v2;
    return (id)(*(uint64_t (**)(void))(v0 + 8))();
  }

  else
  {
    __break(1u);
  }

  return result;
}

void closure #1 in closure #1 in NSURLSession.bytes(for:delegate:)(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<NSURLResponse, Error>);
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x1895F8858](v6);
  uint64_t v9 = (char *)&v18 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  id v10 = *(void (**)(char *, uint64_t, uint64_t))(v7 + 16);
  v10(v9, a1, v6);
  id v11 = (objc_class *)type metadata accessor for URLSessionAsyncBytesDelegate(0LL);
  uint64_t v12 = (char *)objc_allocWithZone(v11);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for LockedState<()>._Buffer);
  uint64_t v13 = swift_allocObject();
  *(_DWORD *)(v13 + 16) = 0;
  *(void *)&v12[OBJC_IVAR____TtC10FoundationP33_1935C07EE287982D980AA89BB85ACEFA28URLSessionAsyncBytesDelegate_lock] = v13;
  v10( &v12[OBJC_IVAR____TtC10FoundationP33_1935C07EE287982D980AA89BB85ACEFA28URLSessionAsyncBytesDelegate_state],  (uint64_t)v9,  v6);
  type metadata accessor for URLSessionAsyncBytesDelegate.State(0LL);
  swift_storeEnumTagMultiPayload();
  v20.receiver = v12;
  v20.super_class = v11;
  id v14 = objc_msgSendSuper2(&v20, sel_init);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  objc_msgSend(a2, sel_set_internalDelegate_, v14);

  objc_msgSend(a2, sel_resume);
  unint64_t v15 = *(os_unfair_lock_s **)(a3 + 16);
  uint64_t v16 = v15 + 4;
  id v17 = v15 + 8;
  os_unfair_lock_lock(v15 + 8);
  closure #1 in NSURLSession.CancelState.activate(task:)(v16, a2, &v19);
  os_unfair_lock_unlock(v17);
  if ((v19 & 1) == 0) {
    objc_msgSend(a2, sel_cancel);
  }
}

void closure #2 in NSURLSession.data(for:delegate:)(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  os_unfair_lock_lock((os_unfair_lock_t)(v1 + 32));
  *(_BYTE *)(v1 + 16) = 1;
  id v2 = *(id *)(v1 + 24);
  *(void *)(v1 + 24) = 0LL;
  os_unfair_lock_unlock((os_unfair_lock_t)(v1 + 32));
  objc_msgSend(v2, sel_cancel);
}

uint64_t block_copy_helper_10(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_10()
{
  return swift_release();
}

uint64_t outlined copy of NSURLSessionWebSocketTask.Message(uint64_t a1, unint64_t a2, char a3)
{
  if ((a3 & 1) != 0) {
    return swift_bridgeObjectRetain();
  }
  else {
    return outlined copy of Data._Representation(a1, a2);
  }
}

uint64_t outlined consume of NSURLSessionWebSocketTask.Message(uint64_t a1, unint64_t a2, char a3)
{
  if ((a3 & 1) != 0) {
    return swift_bridgeObjectRelease();
  }
  else {
    return outlined consume of Data._Representation(a1, a2);
  }
}

void partial apply for closure #1 in NSURLSessionWebSocketTask.receive(completionHandler:)( void *a1, void *a2)
{
}

uint64_t sub_18317F2DC()
{
  return swift_deallocObject();
}

uint64_t type metadata accessor for NSURLSession.CancelState()
{
  return objc_opt_self();
}

uint64_t partial apply for closure #1 in NSURLSession.data(for:delegate:)(uint64_t a1)
{
  uint64_t v4 = *(void *)(v1 + 32);
  uint64_t v5 = *(void *)(v1 + 40);
  uint64_t v6 = swift_task_alloc();
  __int128 v7 = *(_OWORD *)(v1 + 16);
  *(void *)(v2 + 16) = v6;
  *(void *)uint64_t v6 = v2;
  *(void *)(v6 + 8) = partial apply for closure #1 in NSURLSession.data(from:delegate:);
  *(void *)(v6 + 40) = v4;
  *(void *)(v6 + 48) = v5;
  *(_OWORD *)(v6 + 24) = v7;
  *(void *)(v6 + 16) = a1;
  return swift_task_switch();
}

void partial apply for closure #2 in NSURLSession.data(for:delegate:)()
{
}

uint64_t partial apply for closure #1 in NSURLSession.data(from:delegate:)(uint64_t a1)
{
  __int128 v9 = *(_OWORD *)(v1 + 32);
  uint64_t v4 = *(void *)(v1 + 48);
  uint64_t v5 = *(void *)(v1 + 56);
  uint64_t v6 = swift_task_alloc();
  __int128 v7 = *(_OWORD *)(v1 + 16);
  *(void *)(v2 + 16) = v6;
  *(void *)uint64_t v6 = v2;
  *(void *)(v6 + 8) = partial apply for closure #1 in NSURLSession.data(from:delegate:);
  *(void *)(v6 + 56) = v4;
  *(void *)(v6 + 64) = v5;
  *(_OWORD *)(v6 + 40) = v9;
  *(_OWORD *)(v6 + 24) = v7;
  *(void *)(v6 + 16) = a1;
  return swift_task_switch();
}

uint64_t partial apply for closure #1 in NSURLSession.upload(for:fromFile:delegate:)(uint64_t a1)
{
  __int128 v8 = *(_OWORD *)(v1 + 48);
  __int128 v9 = *(_OWORD *)(v1 + 32);
  uint64_t v4 = *(void *)(v1 + 64);
  uint64_t v5 = swift_task_alloc();
  __int128 v6 = *(_OWORD *)(v1 + 16);
  *(void *)(v2 + 16) = v5;
  *(void *)uint64_t v5 = v2;
  *(void *)(v5 + 8) = partial apply for closure #1 in NSURLSession.data(from:delegate:);
  *(void *)(v5 + 72) = v4;
  *(_OWORD *)(v5 + 56) = v8;
  *(_OWORD *)(v5 + 40) = v9;
  *(_OWORD *)(v5 + 24) = v6;
  *(void *)(v5 + 16) = a1;
  return swift_task_switch();
}

uint64_t partial apply for closure #1 in NSURLSession.upload(for:from:delegate:)(uint64_t a1)
{
  __int128 v9 = *(_OWORD *)(v1 + 32);
  uint64_t v4 = *(void *)(v1 + 48);
  uint64_t v5 = *(void *)(v1 + 56);
  uint64_t v6 = swift_task_alloc();
  __int128 v7 = *(_OWORD *)(v1 + 16);
  *(void *)(v2 + 16) = v6;
  *(void *)uint64_t v6 = v2;
  *(void *)(v6 + 8) = partial apply for closure #1 in NSURLSession.data(from:delegate:);
  *(void *)(v6 + 56) = v4;
  *(void *)(v6 + 64) = v5;
  *(_OWORD *)(v6 + 40) = v9;
  *(_OWORD *)(v6 + 24) = v7;
  *(void *)(v6 + 16) = a1;
  return swift_task_switch();
}

uint64_t partial apply for closure #1 in NSURLSession.download(for:delegate:)(uint64_t a1)
{
  uint64_t v4 = *(void *)(v1 + 32);
  uint64_t v5 = *(void *)(v1 + 40);
  uint64_t v6 = swift_task_alloc();
  __int128 v7 = *(_OWORD *)(v1 + 16);
  *(void *)(v2 + 16) = v6;
  *(void *)uint64_t v6 = v2;
  *(void *)(v6 + 8) = partial apply for closure #1 in NSURLSession.data(from:delegate:);
  *(void *)(v6 + 40) = v4;
  *(void *)(v6 + 48) = v5;
  *(_OWORD *)(v6 + 24) = v7;
  *(void *)(v6 + 16) = a1;
  return swift_task_switch();
}

uint64_t partial apply for closure #1 in NSURLSession.download(from:delegate:)(uint64_t a1)
{
  __int128 v9 = *(_OWORD *)(v1 + 32);
  uint64_t v4 = *(void *)(v1 + 48);
  uint64_t v5 = *(void *)(v1 + 56);
  uint64_t v6 = swift_task_alloc();
  __int128 v7 = *(_OWORD *)(v1 + 16);
  *(void *)(v2 + 16) = v6;
  *(void *)uint64_t v6 = v2;
  *(void *)(v6 + 8) = partial apply for closure #1 in NSURLSession.data(from:delegate:);
  *(void *)(v6 + 56) = v4;
  *(void *)(v6 + 64) = v5;
  *(_OWORD *)(v6 + 40) = v9;
  *(_OWORD *)(v6 + 24) = v7;
  *(void *)(v6 + 16) = a1;
  return swift_task_switch();
}

uint64_t partial apply for closure #1 in NSURLSession.download(resumeFrom:delegate:)(uint64_t a1)
{
  __int128 v7 = *(_OWORD *)(v1 + 32);
  __int128 v8 = *(_OWORD *)(v1 + 16);
  uint64_t v4 = *(void *)(v1 + 48);
  uint64_t v5 = swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  *(void *)uint64_t v5 = v2;
  *(void *)(v5 + 8) = partial apply for closure #1 in NSURLSession.data(from:delegate:);
  *(void *)(v5 + 56) = v4;
  *(_OWORD *)(v5 + 40) = v7;
  *(_OWORD *)(v5 + 24) = v8;
  *(void *)(v5 + 16) = a1;
  return swift_task_switch();
}

uint64_t partial apply for closure #1 in NSURLSession.AsyncBytes.Iterator.init(storage:)(uint64_t a1)
{
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v4;
  *uint64_t v4 = v2;
  v4[1] = partial apply for closure #1 in NSURLSession.AsyncBytes.Iterator.init(storage:);
  v4[3] = a1;
  v4[4] = v1;
  return swift_task_switch();
}

uint64_t partial apply for closure #1 in NSURLSession.bytes(for:delegate:)(uint64_t a1)
{
  uint64_t v4 = *(void *)(v1 + 32);
  uint64_t v5 = *(void *)(v1 + 40);
  uint64_t v6 = swift_task_alloc();
  __int128 v7 = *(_OWORD *)(v1 + 16);
  *(void *)(v2 + 16) = v6;
  *(void *)uint64_t v6 = v2;
  *(void *)(v6 + 8) = partial apply for closure #1 in NSURLSession.data(from:delegate:);
  *(void *)(v6 + 88) = v4;
  *(void *)(v6 + 96) = v5;
  *(_OWORD *)(v6 + 72) = v7;
  *(void *)(v6 + 64) = a1;
  return swift_task_switch();
}

uint64_t partial apply for closure #1 in NSURLSession.bytes(from:delegate:)(uint64_t a1)
{
  uint64_t v4 = *(void *)(v1 + 48);
  uint64_t v5 = *(void *)(v1 + 56);
  uint64_t v6 = swift_task_alloc();
  __int128 v7 = *(_OWORD *)(v1 + 16);
  *(void *)(v2 + 16) = v6;
  *(void *)uint64_t v6 = v2;
  *(void *)(v6 + 8) = partial apply for closure #1 in NSURLSession.data(from:delegate:);
  *(void *)(v6 + 48) = v4;
  *(void *)(v6 + 56) = v5;
  *(_OWORD *)(v6 + 32) = v7;
  *(void *)(v6 + 24) = a1;
  return swift_task_switch();
}

uint64_t associated type witness table accessor for AsyncIteratorProtocol.Failure : Error in NSURLSession.AsyncBytes.Iterator()
{
  return MEMORY[0x18961A3E8];
}

unint64_t lazy protocol witness table accessor for type NSURLSession.AsyncBytes.Iterator and conformance NSURLSession.AsyncBytes.Iterator()
{
  unint64_t result = lazy protocol witness table cache variable for type NSURLSession.AsyncBytes.Iterator and conformance NSURLSession.AsyncBytes.Iterator;
  if (!lazy protocol witness table cache variable for type NSURLSession.AsyncBytes.Iterator and conformance NSURLSession.AsyncBytes.Iterator)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for NSURLSession.AsyncBytes.Iterator,  &type metadata for NSURLSession.AsyncBytes.Iterator);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type NSURLSession.AsyncBytes.Iterator and conformance NSURLSession.AsyncBytes.Iterator);
  }

  return result;
}

uint64_t destroy for NSURLSessionWebSocketTask.Message(uint64_t a1)
{
  return outlined consume of NSURLSessionWebSocketTask.Message(*(void *)a1, *(void *)(a1 + 8), *(_BYTE *)(a1 + 16));
}

uint64_t initializeBufferWithCopyOfBuffer for NSURLSessionWebSocketTask.Message(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  unint64_t v4 = *(void *)(a2 + 8);
  char v5 = *(_BYTE *)(a2 + 16);
  outlined copy of NSURLSessionWebSocketTask.Message(*(void *)a2, v4, v5);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = v5;
  return a1;
}

uint64_t assignWithCopy for NSURLSessionWebSocketTask.Message(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  unint64_t v4 = *(void *)(a2 + 8);
  char v5 = *(_BYTE *)(a2 + 16);
  outlined copy of NSURLSessionWebSocketTask.Message(*(void *)a2, v4, v5);
  uint64_t v6 = *(void *)a1;
  unint64_t v7 = *(void *)(a1 + 8);
  char v8 = *(_BYTE *)(a1 + 16);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = v5;
  outlined consume of NSURLSessionWebSocketTask.Message(v6, v7, v8);
  return a1;
}

uint64_t assignWithTake for NSURLSessionWebSocketTask.Message(uint64_t a1, uint64_t a2)
{
  char v3 = *(_BYTE *)(a2 + 16);
  uint64_t v4 = *(void *)a1;
  unint64_t v5 = *(void *)(a1 + 8);
  char v6 = *(_BYTE *)(a1 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_BYTE *)(a1 + 16) = v3;
  outlined consume of NSURLSessionWebSocketTask.Message(v4, v5, v6);
  return a1;
}

ValueMetadata *type metadata accessor for NSURLSessionWebSocketTask.Message()
{
  return &type metadata for NSURLSessionWebSocketTask.Message;
}

uint64_t ObjC metadata update function for URLSessionAsyncBytesDelegate()
{
  return type metadata accessor for URLSessionAsyncBytesDelegate(0LL);
}

uint64_t type metadata accessor for URLSessionAsyncBytesDelegate(uint64_t a1)
{
  return type metadata accessor for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format( a1,  type metadata singleton initialization cache for URLSessionAsyncBytesDelegate);
}

uint64_t type metadata completion function for URLSessionAsyncBytesDelegate()
{
  uint64_t result = type metadata accessor for URLSessionAsyncBytesDelegate.State(319LL);
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_updateClassMetadata2();
    if (!result) {
      return 0LL;
    }
  }

  return result;
}

uint64_t type metadata accessor for URLSessionAsyncBytesDelegate.State(uint64_t a1)
{
  return type metadata accessor for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format( a1,  (uint64_t *)&type metadata singleton initialization cache for URLSessionAsyncBytesDelegate.State);
}

ValueMetadata *type metadata accessor for NSURLSession.AsyncBytes()
{
  return &type metadata for NSURLSession.AsyncBytes;
}

uint64_t type metadata accessor for NSURLSession.AsyncBytes._Storage()
{
  return objc_opt_self();
}

uint64_t initializeBufferWithCopyOfBuffer for NSURLSession.AsyncBytes.Iterator(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  swift_unknownObjectRetain();
  return a1;
}

void *assignWithCopy for NSURLSession.AsyncBytes.Iterator(void *a1, void *a2)
{
  *a1 = *a2;
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  a1[1] = a2[1];
  a1[2] = a2[2];
  return a1;
}

uint64_t assignWithTake for NSURLSession.AsyncBytes.Iterator(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  return a1;
}

uint64_t getEnumTagSinglePayload for NSURLSession.AsyncBytes.Iterator(uint64_t *a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 >= 0x7FFFFFFF && *((_BYTE *)a1 + 24)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  uint64_t v3 = *a1;
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for NSURLSession.AsyncBytes.Iterator( uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)(result + 8) = 0LL;
    *(void *)(result + 16) = 0LL;
    *(void *)uint64_t result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(_BYTE *)(result + 24) = 1;
    }
  }

  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(_BYTE *)(result + 24) = 0;
    }
    if (a2) {
      *(void *)uint64_t result = a2;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for NSURLSession.AsyncBytes.Iterator()
{
  return &type metadata for NSURLSession.AsyncBytes.Iterator;
}

uint64_t initializeBufferWithCopyOfBuffer for URLSessionAsyncBytesDelegate.State( uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v4 = *(_DWORD *)(*(void *)(a3 - 8) + 80LL);
  if ((v4 & 0x20000) == 0)
  {
    unint64_t v5 = (char *)&loc_18317FC50 + 4 * byte_1837ADBB4[swift_getEnumCaseMultiPayload()];
    __asm { BR              X10 }
  }

  uint64_t v6 = *a2;
  *a1 = *a2;
  uint64_t v7 = v6 + ((v4 + 16LL) & ~(unint64_t)v4);
  swift_retain();
  return v7;
}

void destroy for URLSessionAsyncBytesDelegate.State(id *a1)
{
  switch(swift_getEnumCaseMultiPayload())
  {
    case 0u:
      uint64_t v2 = &demangling cache variable for type metadata for CheckedContinuation<NSURLResponse, Error>;
      goto LABEL_4;
    case 1u:
      uint64_t v2 = &demangling cache variable for type metadata for CheckedContinuation<Data?, Error>;
LABEL_4:
      uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(v2);
      (*(void (**)(id *, uint64_t))(*(void *)(v3 - 8) + 8LL))(a1, v3);
      break;
    case 2u:
      swift_release();
      break;
    case 3u:

      break;
    default:
      return;
  }

void initializeWithCopy for URLSessionAsyncBytesDelegate.State()
{
  uint64_t v0 = (char *)sub_18317FE04 + 4 * byte_1837ADBBC[swift_getEnumCaseMultiPayload()];
  __asm { BR              X10 }

uint64_t sub_18317FE04()
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<NSURLResponse, Error>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 16LL))(v0, v1, v2);
  swift_storeEnumTagMultiPayload();
  return v0;
}

uint64_t assignWithCopy for URLSessionAsyncBytesDelegate.State(uint64_t result, uint64_t a2)
{
  if (result != a2)
  {
    outlined destroy of URLSessionAsyncBytesDelegate.State(result);
    uint64_t v2 = (char *)&loc_18317FF10 + 4 * byte_1837ADBC0[swift_getEnumCaseMultiPayload()];
    __asm { BR              X10 }
  }

  return result;
}

uint64_t outlined destroy of URLSessionAsyncBytesDelegate.State(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for URLSessionAsyncBytesDelegate.State(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

void *initializeWithTake for URLSessionAsyncBytesDelegate.State(void *a1, const void *a2, uint64_t a3)
{
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 1)
  {
    uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<Data?, Error>);
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v8 - 8) + 32LL))(a1, a2, v8);
    swift_storeEnumTagMultiPayload();
  }

  else if (EnumCaseMultiPayload)
  {
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64LL));
  }

  else
  {
    uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<NSURLResponse, Error>);
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v7 - 8) + 32LL))(a1, a2, v7);
    swift_storeEnumTagMultiPayload();
  }

  return a1;
}

void *assignWithTake for URLSessionAsyncBytesDelegate.State(void *a1, const void *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    outlined destroy of URLSessionAsyncBytesDelegate.State((uint64_t)a1);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 1)
    {
      uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<Data?, Error>);
      (*(void (**)(void *, const void *, uint64_t))(*(void *)(v8 - 8) + 32LL))(a1, a2, v8);
      swift_storeEnumTagMultiPayload();
    }

    else if (EnumCaseMultiPayload)
    {
      memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64LL));
    }

    else
    {
      uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<NSURLResponse, Error>);
      (*(void (**)(void *, const void *, uint64_t))(*(void *)(v7 - 8) + 32LL))(a1, a2, v7);
      swift_storeEnumTagMultiPayload();
    }
  }

  return a1;
}

void type metadata completion function for URLSessionAsyncBytesDelegate.State()
{
  if (v0 <= 0x3F)
  {
    type metadata accessor for CheckedContinuation<Data?, Error>();
    if (v1 <= 0x3F) {
      swift_initEnumMetadataMultiPayload();
    }
  }

void type metadata accessor for CheckedContinuation<NSURLResponse, Error>()
{
  if (!lazy cache variable for type metadata for CheckedContinuation<NSURLResponse, Error>)
  {
    type metadata accessor for NSMorphologyPronoun(255LL, &lazy cache variable for type metadata for NSURLResponse);
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Error);
    unint64_t v0 = type metadata accessor for CheckedContinuation();
    if (!v1) {
      atomic_store( v0,  (unint64_t *)&lazy cache variable for type metadata for CheckedContinuation<NSURLResponse, Error>);
    }
  }

void type metadata accessor for CheckedContinuation<Data?, Error>()
{
  if (!lazy cache variable for type metadata for CheckedContinuation<Data?, Error>)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Data?);
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Error);
    unint64_t v0 = type metadata accessor for CheckedContinuation();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for CheckedContinuation<Data?, Error>);
    }
  }

uint64_t initializeBufferWithCopyOfBuffer for NSURLSession.CancelState.State(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  uint64_t v3 = *(void **)(a2 + 8);
  *(void *)(a1 + 8) = v3;
  id v4 = v3;
  return a1;
}

void destroy for NSURLSession.CancelState.State(uint64_t a1)
{
}

uint64_t assignWithCopy for NSURLSession.CancelState.State(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  uint64_t v3 = *(void **)(a1 + 8);
  id v4 = *(void **)(a2 + 8);
  *(void *)(a1 + 8) = v4;
  id v5 = v4;

  return a1;
}

uint64_t assignWithTake for NSURLSession.CancelState.State(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  uint64_t v3 = *(void **)(a1 + 8);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);

  return a1;
}

uint64_t getEnumTagSinglePayload for NSURLSession.CancelState.State(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 16)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  unint64_t v3 = *(void *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for NSURLSession.CancelState.State( uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)uint64_t result = a2 - 0x7FFFFFFF;
    *(void *)(result + 8) = 0LL;
    if (a3 >= 0x7FFFFFFF) {
      *(_BYTE *)(result + 16) = 1;
    }
  }

  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(_BYTE *)(result + 16) = 0;
    }
    if (a2) {
      *(void *)(result + 8) = a2;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for NSURLSession.CancelState.State()
{
  return &type metadata for NSURLSession.CancelState.State;
}

void specialized URLSessionAsyncBytesDelegate.urlSession(_:dataTask:didReceive:completionHandler:)( uint64_t a1, uint64_t a2, const void *a3)
{
  v12[1] = a1;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<NSURLResponse, Error>);
  v12[2] = *(void *)(v5 - 8);
  MEMORY[0x1895F8858](v5);
  uint64_t v6 = type metadata accessor for URLSessionAsyncBytesDelegate.State(0LL);
  uint64_t v7 = MEMORY[0x1895F8858](v6);
  MEMORY[0x1895F8858](v7);
  __int128 v9 = (char *)v12 - v8;
  *(void *)(swift_allocObject() + 16) = a3;
  id v10 = *(os_unfair_lock_s **)(a2
                             + OBJC_IVAR____TtC10FoundationP33_1935C07EE287982D980AA89BB85ACEFA28URLSessionAsyncBytesDelegate_lock);
  _Block_copy(a3);
  swift_retain();
  os_unfair_lock_lock(v10 + 4);
  swift_release();
  outlined init with copy of URLSessionAsyncBytesDelegate.State( a2 + OBJC_IVAR____TtC10FoundationP33_1935C07EE287982D980AA89BB85ACEFA28URLSessionAsyncBytesDelegate_state,  (uint64_t)v9);
  id v11 = (char *)sub_1831805F0 + 4 * byte_1837ADBC4[swift_getEnumCaseMultiPayload()];
  __asm { BR              X10 }

uint64_t sub_1831805F0()
{
  uint64_t v8 = *(void *)(v7 - 96);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 32))(v3, v1, v2);
  uint64_t v9 = swift_allocObject();
  *(void *)(v9 + 16) = partial apply for thunk for @escaping @callee_unowned @convention(block) (@unowned NSURLSessionResponseDisposition) -> ();
  *(void *)(v9 + 24) = v0;
  char *v5 = partial apply for closure #1 in URLSessionAsyncBytesDelegate.urlSession(_:dataTask:didReceive:completionHandler:);
  v5[1] = (uint64_t (*)())v9;
  swift_storeEnumTagMultiPayload();
  swift_retain();
  outlined assign with take of URLSessionAsyncBytesDelegate.State((uint64_t)v5, v6);
  swift_retain();
  os_unfair_lock_unlock(v4);
  swift_release();
  id v10 = *(void **)(v7 - 104);
  *(void *)(v7 - 88) = v10;
  id v11 = v10;
  CheckedContinuation.resume(returning:)();
  (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v3, v2);
  return swift_release();
}

void specialized URLSessionAsyncBytesDelegate.urlSession(_:dataTask:_didReceive:completionHandler:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const void *a5)
{
  v19[4] = a2;
  v19[5] = a3;
  _OWORD v19[8] = a1;
  uint64_t v7 = type metadata accessor for Logger();
  void v19[2] = *(void *)(v7 - 8);
  v19[3] = v7;
  MEMORY[0x1895F8858](v7);
  v19[1] = (char *)v19 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<NSURLResponse, Error>);
  v19[6] = *(void *)(v9 - 8);
  v19[7] = v9;
  MEMORY[0x1895F8858](v9);
  v19[9] = (char *)v19 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<Data?, Error>);
  MEMORY[0x1895F8858](v11);
  uint64_t v12 = type metadata accessor for URLSessionAsyncBytesDelegate.State(0LL);
  uint64_t v13 = MEMORY[0x1895F8858](v12);
  MEMORY[0x1895F8858](v13);
  unint64_t v15 = (char *)v19 - v14;
  uint64_t v16 = swift_allocObject();
  v19[10] = a5;
  v19[11] = v16;
  *(void *)(v16 + 16) = a5;
  id v17 = *(os_unfair_lock_s **)(a4
                             + OBJC_IVAR____TtC10FoundationP33_1935C07EE287982D980AA89BB85ACEFA28URLSessionAsyncBytesDelegate_lock);
  _Block_copy(a5);
  swift_retain();
  os_unfair_lock_lock(v17 + 4);
  swift_release();
  outlined init with copy of URLSessionAsyncBytesDelegate.State( a4 + OBJC_IVAR____TtC10FoundationP33_1935C07EE287982D980AA89BB85ACEFA28URLSessionAsyncBytesDelegate_state,  (uint64_t)v15);
  uint64_t v18 = (char *)&loc_1831808C4 + *((int *)qword_183180E60 + swift_getEnumCaseMultiPayload());
  __asm { BR              X10 }

uint64_t sub_1831808D4()
{
  uint64_t v5 = *(void *)(v3 - 144);
  uint64_t v4 = *(void *)(v3 - 136);
  (*(void (**)(void, uint64_t, uint64_t))(v5 + 32))(*(void *)(v3 - 120), v0, v4);
  outlined destroy of URLSessionAsyncBytesDelegate.State((uint64_t)v1);
  *uint64_t v1 = 0LL;
  swift_storeEnumTagMultiPayload();
  swift_retain();
  os_unfair_lock_unlock(v2);
  swift_release();
  static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSURLErrorDomain");
  id v6 = objc_allocWithZone((Class)&OBJC_CLASS___NSError);
  uint64_t v7 = String._bridgeToObjectiveCImpl()();
  swift_bridgeObjectRelease();
  id v8 = objc_msgSend(v6, sel_initWithDomain_code_userInfo_, v7, -1, _NativeDictionary.bridged()());
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  id v9 = objc_msgSend(v8, sel_domain);
  id v10 = static String._unconditionallyBridgeFromObjectiveC(_:)(v9);
  uint64_t v12 = v11;

  if (v10 == static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSURLErrorDomain") && v12 == v13)
  {
    swift_bridgeObjectRelease_n();
  }

  else
  {
    char v14 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v14 & 1) == 0)
    {
      __break(1u);
      JUMPOUT(0x183180E5CLL);
    }
  }

  *(void *)(v3 - 96) = v8;
  uint64_t v15 = *(void *)(v3 - 120);
  CheckedContinuation.resume(throwing:)();
  (*(void (**)(void))(*(void *)(v3 - 112) + 16LL))();
  objc_msgSend(*(id *)(v3 - 128), sel_cancel);
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v15, v4);
  return swift_release();
}

void specialized URLSessionAsyncBytesDelegate.urlSession(_:task:didCompleteWithError:)(uint64_t a1)
{
  v9[1] = a1;
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<Data?, Error>);
  MEMORY[0x1895F8858](v2);
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<NSURLResponse, Error>);
  v9[0] = *(void *)(v3 - 8);
  MEMORY[0x1895F8858](v3);
  uint64_t v4 = type metadata accessor for URLSessionAsyncBytesDelegate.State(0LL);
  MEMORY[0x1895F8858](v4);
  id v6 = (char *)v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = *(os_unfair_lock_s **)(v1
                            + OBJC_IVAR____TtC10FoundationP33_1935C07EE287982D980AA89BB85ACEFA28URLSessionAsyncBytesDelegate_lock);
  swift_retain();
  os_unfair_lock_lock(v7 + 4);
  swift_release();
  outlined init with copy of URLSessionAsyncBytesDelegate.State( v1 + OBJC_IVAR____TtC10FoundationP33_1935C07EE287982D980AA89BB85ACEFA28URLSessionAsyncBytesDelegate_state,  (uint64_t)v6);
  id v8 = (char *)&loc_183180FA0 + *((int *)qword_183181288 + swift_getEnumCaseMultiPayload());
  __asm { BR              X10 }

uint64_t sub_183180FB0()
{
  uint64_t v6 = *(void *)(v5 - 112);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 32))(v3, v4, v1);
  outlined destroy of URLSessionAsyncBytesDelegate.State((uint64_t)v0);
  *uint64_t v0 = 0LL;
  swift_storeEnumTagMultiPayload();
  swift_retain();
  os_unfair_lock_unlock(v2);
  swift_release();
  uint64_t v7 = *(void **)(v5 - 104);
  if (v7)
  {
    id v8 = *(id *)(v5 - 104);
  }

  else
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSURLErrorDomain");
    id v9 = objc_allocWithZone((Class)&OBJC_CLASS___NSError);
    uint64_t v10 = String._bridgeToObjectiveCImpl()();
    swift_bridgeObjectRelease();
    id v8 = objc_msgSend(v9, sel_initWithDomain_code_userInfo_, v10, -1, _NativeDictionary.bridged()());
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    id v11 = objc_msgSend(v8, sel_domain);
    id v12 = static String._unconditionallyBridgeFromObjectiveC(_:)(v11);
    uint64_t v14 = v13;

    if (v12 == static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSURLErrorDomain") && v14 == v15)
    {
      swift_bridgeObjectRelease_n();
      uint64_t v6 = *(void *)(v5 - 112);
    }

    else
    {
      char v16 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v6 = *(void *)(v5 - 112);
      if ((v16 & 1) == 0)
      {
        __break(1u);
        JUMPOUT(0x183181288LL);
      }
    }
  }

  *(void *)(v5 - 96) = v8;
  id v17 = v7;
  CheckedContinuation.resume(throwing:)();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 8))(v3, v1);
}

uint64_t outlined init with copy of URLSessionAsyncBytesDelegate.State(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for URLSessionAsyncBytesDelegate.State(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_1831812DC()
{
  return swift_deallocObject();
}

uint64_t outlined assign with take of URLSessionAsyncBytesDelegate.State(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for URLSessionAsyncBytesDelegate.State(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40LL))(a2, a1, v4);
  return a2;
}

uint64_t partial apply for thunk for @escaping @callee_unowned @convention(block) (@unowned NSURLSessionResponseDisposition) -> ()()
{
  return (*(uint64_t (**)(void))(*(void *)(v0 + 16) + 16LL))();
}

uint64_t partial apply for closure #1 in URLSessionAsyncBytesDelegate.urlSession(_:dataTask:didReceive:completionHandler:)()
{
  return (*(uint64_t (**)(uint64_t))(v0 + 16))(1LL);
}

uint64_t closure #1 in NSURLSession.AsyncBytes.Iterator.init(storage:)partial apply(uint64_t a1)
{
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v4;
  *uint64_t v4 = v2;
  v4[1] = closure #1 in NSURLSession.AsyncBytes.Iterator.init(storage:)partial apply;
  v4[3] = a1;
  v4[4] = v1;
  return swift_task_switch();
}

{
  uint64_t *v1;
  uint64_t v4;
  uint64_t v4 = *v1;
  swift_task_dealloc();
  return (*(uint64_t (**)(uint64_t))(v4 + 8))(a1);
}

void partial apply for closure #1 in closure #1 in NSURLSession.bytes(for:delegate:)(uint64_t a1)
{
}

uint64_t partial apply for closure #1 in closure #1 in NSURLSession.AsyncBytes.Iterator.init(storage:)( uint64_t a1)
{
  uint64_t v5 = *(void *)(v1 + 16);
  uint64_t v4 = *(void *)(v1 + 24);
  uint64_t v6 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v6;
  *uint64_t v6 = v2;
  v6[1] = partial apply for closure #1 in closure #1 in NSURLSession.AsyncBytes.Iterator.init(storage:);
  return closure #1 in closure #1 in NSURLSession.AsyncBytes.Iterator.init(storage:)(a1, v5, v4);
}

uint64_t partial apply for closure #1 in closure #1 in NSURLSession.AsyncBytes.Iterator.init(storage:)()
{
  uint64_t v2 = *v0;
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v2 + 8))();
}

id partial apply for closure #2 in closure #1 in NSURLSession.AsyncBytes.Iterator.init(storage:)()
{
  return objc_msgSend(*(id *)(v0 + 16), sel_cancel);
}

uint64_t partial apply for closure #1 in URLSessionAsyncBytesDelegate.data()(uint64_t a1)
{
  return closure #1 in URLSessionAsyncBytesDelegate.data()( a1,  *(void *)(v1 + 16),  *(uint64_t (**)(uint64_t))(v1 + 24));
}

void partial apply for closure #1 in closure #1 in NSURLSession.download(resumeFrom:delegate:)(uint64_t a1)
{
}

uint64_t sub_183181518()
{
  return objectdestroy_82Tm(&demangling cache variable for type metadata for CheckedContinuation<(URL, NSURLResponse), Error>);
}

uint64_t partial apply for closure #1 in closure #1 in NSURLSession.download(from:delegate:)(uint64_t a1)
{
  return partial apply for closure #1 in closure #1 in NSURLSession.download(from:delegate:)( a1,  (uint64_t (*)(uint64_t, void, void, void, void, void, void))closure #1 in closure #1 in NSURLSession.download(from:delegate:));
}

uint64_t sub_183181534()
{
  return objectdestroy_82Tm(&demangling cache variable for type metadata for CheckedContinuation<(URL, NSURLResponse), Error>);
}

uint64_t partial apply for closure #1 in closure #1 in closure #1 in NSURLSession.download(resumeFrom:delegate:)( uint64_t *a1, void *a2, void *a3)
{
  return closure #1 in closure #1 in closure #1 in NSURLSession.download(for:delegate:)(a1, a2, a3);
}

void partial apply for closure #1 in closure #1 in NSURLSession.download(for:delegate:)(uint64_t a1)
{
}

uint64_t sub_1831815A8()
{
  return objectdestroy_82Tm(&demangling cache variable for type metadata for CheckedContinuation<(URL, NSURLResponse), Error>);
}

uint64_t partial apply for closure #1 in closure #1 in NSURLSession.upload(for:from:delegate:)(uint64_t a1)
{
  return partial apply for closure #1 in closure #1 in NSURLSession.download(from:delegate:)( a1,  (uint64_t (*)(uint64_t, void, void, void, void, void, void))closure #1 in closure #1 in NSURLSession.upload(for:from:delegate:));
}

uint64_t sub_1831815C0()
{
  return objectdestroy_82Tm(demangling cache variable for type metadata for CheckedContinuation<(Data, NSURLResponse), Error>);
}

void partial apply for closure #1 in closure #1 in NSURLSession.upload(for:fromFile:delegate:)(uint64_t a1)
{
}

uint64_t sub_1831815E4()
{
  return objectdestroy_82Tm(demangling cache variable for type metadata for CheckedContinuation<(Data, NSURLResponse), Error>);
}

uint64_t partial apply for closure #1 in closure #1 in closure #1 in NSURLSession.upload(for:from:delegate:)( uint64_t a1, unint64_t a2, void *a3, void *a4)
{
  return closure #1 in closure #1 in closure #1 in NSURLSession.data(for:delegate:)(a1, a2, a3, a4);
}

uint64_t partial apply for closure #1 in closure #1 in NSURLSession.data(from:delegate:)(uint64_t a1)
{
  return partial apply for closure #1 in closure #1 in NSURLSession.download(from:delegate:)( a1,  (uint64_t (*)(uint64_t, void, void, void, void, void, void))closure #1 in closure #1 in NSURLSession.data(from:delegate:));
}

uint64_t partial apply for closure #1 in closure #1 in NSURLSession.download(from:delegate:)( uint64_t a1, uint64_t (*a2)(uint64_t, void, void, void, void, void, void))
{
  return a2(a1, v2[2], v2[3], v2[4], v2[5], v2[6], v2[7]);
}

uint64_t sub_18318167C()
{
  return objectdestroy_82Tm(demangling cache variable for type metadata for CheckedContinuation<(Data, NSURLResponse), Error>);
}

void partial apply for closure #1 in closure #1 in NSURLSession.data(for:delegate:)(uint64_t a1)
{
}

uint64_t sub_183181694()
{
  return objectdestroy_82Tm(demangling cache variable for type metadata for CheckedContinuation<(Data, NSURLResponse), Error>);
}

uint64_t objectdestroy_82Tm(uint64_t *a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(a1);
  (*(void (**)(unint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))( v1 + ((*(unsigned __int8 *)(*(void *)(v2 - 8) + 80LL) + 16LL) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v2 - 8) + 80LL)),  v2);
  return swift_deallocObject();
}

void AttributedString.AttributeRunBoundaries.hash(into:)()
{
  if (*(void *)(v0 + 8))
  {
    Hasher._combine(_:)(1uLL);
    String.hash(into:)();
  }

  else
  {
    Hasher._combine(_:)(0LL);
  }

Swift::Int AttributedString.AttributeRunBoundaries.hashValue.getter()
{
  uint64_t v1 = *(void *)(v0 + 8);
  Hasher.init(_seed:)();
  if (v1)
  {
    Hasher._combine(_:)(1uLL);
    String.hash(into:)();
  }

  else
  {
    Hasher._combine(_:)(0LL);
  }

  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance AttributedString.AttributeRunBoundaries( uint64_t a1, uint64_t a2)
{
  return protocol witness for Hashable.hashValue.getter in conformance AttributedString.AttributeRunBoundaries( a1,  a2,  (void (*)(_BYTE *, uint64_t, uint64_t))MEMORY[0x189617A88]);
}

void protocol witness for Hashable.hash(into:) in conformance AttributedString.AttributeRunBoundaries()
{
  if (*(void *)(v0 + 8))
  {
    Hasher._combine(_:)(1uLL);
    String.hash(into:)();
  }

  else
  {
    Hasher._combine(_:)(0LL);
  }

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance AttributedString.AttributeRunBoundaries( uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for Hashable._rawHashValue(seed:) in conformance AttributedString.AttributeRunBoundaries( a1,  a2,  a3,  (void (*)(_BYTE *, uint64_t, uint64_t))MEMORY[0x189617A88]);
}

unint64_t AttributedString.AttributeRunBoundaries._constrainedScalar.getter()
{
  unint64_t v1 = v0[1];
  if (v1)
  {
    unint64_t v2 = *v0;
    swift_bridgeObjectRetain();
    unint64_t v3 = specialized Collection.first.getter(v2, v1);
    swift_bridgeObjectRelease();
    uint64_t v4 = HIDWORD(v3) & 1;
    uint64_t v5 = v3;
  }

  else
  {
    uint64_t v5 = 0LL;
    LOBYTE(v4) = 1;
  }

  return v5 | ((unint64_t)v4 << 32);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance AttributedString.AttributeInvalidationCondition._Storage( uint64_t a1, uint64_t a2)
{
  return protocol witness for Hashable.hashValue.getter in conformance AttributedString.AttributeRunBoundaries( a1,  a2,  (void (*)(_BYTE *, uint64_t, uint64_t))MEMORY[0x189617DD8]);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance AttributedString.AttributeRunBoundaries( uint64_t a1, uint64_t a2, void (*a3)(_BYTE *, uint64_t, uint64_t))
{
  uint64_t v5 = *v3;
  uint64_t v6 = v3[1];
  Hasher.init(_seed:)();
  if (v6)
  {
    Hasher._combine(_:)(1uLL);
    a3(v8, v5, v6);
  }

  else
  {
    Hasher._combine(_:)(0LL);
  }

  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance AttributedString.AttributeInvalidationCondition._Storage()
{
  if (*(void *)(v0 + 8))
  {
    Hasher._combine(_:)(1uLL);
    String.hash(into:)();
  }

  else
  {
    Hasher._combine(_:)(0LL);
  }

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance AttributedString.AttributeInvalidationCondition._Storage( uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for Hashable._rawHashValue(seed:) in conformance AttributedString.AttributeRunBoundaries( a1,  a2,  a3,  (void (*)(_BYTE *, uint64_t, uint64_t))MEMORY[0x189617DD8]);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance AttributedString.AttributeRunBoundaries( uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(_BYTE *, uint64_t, uint64_t))
{
  uint64_t v6 = *v4;
  uint64_t v7 = v4[1];
  Hasher.init(_seed:)();
  if (v7)
  {
    Hasher._combine(_:)(1uLL);
    a4(v9, v6, v7);
  }

  else
  {
    Hasher._combine(_:)(0LL);
  }

  return Hasher._finalize()();
}

void static AttributedString.AttributeInvalidationCondition.textChanged.getter(void *a1@<X8>)
{
  *a1 = 0LL;
  a1[1] = 0LL;
}

uint64_t static AttributedString.AttributeInvalidationCondition.attributeChanged<A>(_:)@<X0>( uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t *a3@<X8>)
{
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 24))(a1, a2);
  *a3 = result;
  a3[1] = v5;
  return result;
}

uint64_t static AttributedString.AttributeInvalidationCondition.attributeChanged<A>(_:)@<X0>( uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(a1 + 24))();
  *a2 = result;
  a2[1] = v4;
  return result;
}

void AttributedString.AttributeInvalidationCondition.hash(into:)()
{
  if (*(void *)(v0 + 8))
  {
    Hasher._combine(_:)(1uLL);
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
  }

  else
  {
    Hasher._combine(_:)(0LL);
  }

uint64_t static AttributedString.AttributeInvalidationCondition.== infix(_:_:)(void *a1, void *a2)
{
  uint64_t v3 = a1[1];
  uint64_t v4 = a2[1];
  if (v3)
  {
    if (v4)
    {
      BOOL v5 = *a1 == *a2 && v3 == v4;
      if (v5 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
        return 1LL;
      }
    }
  }

  else if (!v4)
  {
    return 1LL;
  }

  return 0LL;
}

Swift::Int AttributedString.AttributeInvalidationCondition.hashValue.getter()
{
  uint64_t v1 = *(void *)(v0 + 8);
  Hasher.init(_seed:)();
  if (v1)
  {
    Hasher._combine(_:)(1uLL);
    String.hash(into:)();
  }

  else
  {
    Hasher._combine(_:)(0LL);
  }

  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance AttributedString.AttributeInvalidationCondition()
{
  uint64_t v1 = *(void *)(v0 + 8);
  Hasher.init(_seed:)();
  if (v1)
  {
    Hasher._combine(_:)(1uLL);
    String.hash(into:)();
  }

  else
  {
    Hasher._combine(_:)(0LL);
  }

  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance AttributedString.AttributeInvalidationCondition()
{
  uint64_t v1 = *(void *)(v0 + 8);
  Hasher.init(_seed:)();
  if (v1)
  {
    Hasher._combine(_:)(1uLL);
    String.hash(into:)();
  }

  else
  {
    Hasher._combine(_:)(0LL);
  }

  return Hasher._finalize()();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance AttributedString.AttributeInvalidationCondition._Storage( void *a1, void *a2)
{
  uint64_t v3 = a1[1];
  uint64_t v4 = a2[1];
  if (!v3) {
    return v4 == 0;
  }
  if (!v4) {
    return 0LL;
  }
  if (*a1 == *a2 && v3 == v4) {
    return 1LL;
  }
  else {
    return _stringCompareWithSmolCheck(_:_:expecting:)();
  }
}

double static AttributedStringKey.runBoundaries.getter@<D0>(_OWORD *a1@<X8>)
{
  return static AttributedStringKey.runBoundaries.getter(a1);
}

{
  double result;
  uint64_t result = 0.0;
  *a1 = xmmword_183723F60;
  return result;
}

uint64_t static AttributedStringKey.inheritedByAddedText.getter()
{
  return 1LL;
}

uint64_t static AttributedStringKey.invalidationConditions.getter()
{
  return 0LL;
}

uint64_t AttributedStringKey.description.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

void AttributeDynamicLookup.subscript.getter()
{
}

{
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

{
  AttributeDynamicLookup.subscript.getter();
}

{
  AttributeDynamicLookup.subscript.getter();
}

uint64_t ScopedAttributeContainer.subscript.getter@<X0>(void *a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  return AttributedString._AttributeStorage.subscript.getter(*v3, *(void *)(*MEMORY[0x18961A9A8] + *a1 + 8LL), a2, a3);
}

uint64_t key path getter for ScopedAttributeContainer.subscript<A>(dynamicMember:) : <A><A1>ScopedAttributeContainer<A>AA1@<X0>( void **a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v4 = *(uint64_t *)((char *)a1 + a2 - 8);
  BOOL v5 = *a1;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  ScopedAttributeContainer.subscript.getter(v5, v4, a3);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t key path setter for ScopedAttributeContainer.subscript<A>(dynamicMember:) : <A><A1>ScopedAttributeContainer<A>AA1( uint64_t a1, uint64_t a2, void **a3, uint64_t a4)
{
  uint64_t v6 = *(uint64_t *)((char *)a3 + a4 - 8);
  swift_getAssociatedTypeWitness();
  uint64_t v7 = type metadata accessor for Optional();
  MEMORY[0x1895F8858](v7);
  id v9 = (char *)&v14 - v8;
  uint64_t v10 = *a3;
  (*(void (**)(char *, uint64_t))(v11 + 16))((char *)&v14 - v8, a1);
  swift_retain();
  return ScopedAttributeContainer.subscript.setter(v9, v10, v12, v6);
}

uint64_t ScopedAttributeContainer.subscript.setter(char *a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = v4;
  uint64_t v25 = a2;
  uint64_t v8 = *(void *)(*MEMORY[0x18961A9A8] + *a2 + 8LL);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v10 = type metadata accessor for Optional();
  uint64_t v11 = *(void *)(v10 - 8);
  MEMORY[0x1895F8858](v10);
  uint64_t v13 = (char *)&v23 - v12;
  (*(void (**)(char *, char *, uint64_t))(v11 + 16))((char *)&v23 - v12, a1, v10);
  uint64_t v23 = *(uint64_t (**)(uint64_t, uint64_t))(a4 + 24);
  unint64_t v14 = v23(v8, a4);
  unint64_t v16 = v15;
  static AttributedString._AttributeValue.wrapIfPresent<A>(_:for:)((uint64_t)v13, v8, a4, (uint64_t)v26);
  uint64_t v24 = v5;
  specialized AttributedString._AttributeStorage.subscript.setter((uint64_t)v26, v14, v16);
  swift_bridgeObjectRelease();
  id v17 = *(void (**)(char *, uint64_t))(v11 + 8);
  v17(v13, v10);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 48LL))( a1,  1LL,  AssociatedTypeWitness) == 1)
  {
    uint64_t v18 = v23(v8, a4);
    uint64_t v20 = v19;
    swift_release();
    v17(a1, v10);
    uint64_t v21 = v24;
    uint64_t result = swift_bridgeObjectRelease();
    *(void *)(v21 + 16) = v18;
    *(void *)(v21 + 24) = v20;
  }

  else
  {
    swift_release();
    return ((uint64_t (*)(char *, uint64_t))v17)(a1, v10);
  }

  return result;
}

void (*ScopedAttributeContainer.subscript.modify( void *a1, void *a2, uint64_t a3, uint64_t a4))(uint64_t a1, char a2)
{
  id v9 = malloc(0x40uLL);
  *a1 = v9;
  void v9[2] = a4;
  v9[3] = v4;
  *id v9 = a2;
  v9[1] = a3;
  uint64_t v10 = *(void *)(*MEMORY[0x18961A9A8] + *a2 + 8LL);
  swift_getAssociatedTypeWitness();
  uint64_t v11 = type metadata accessor for Optional();
  void v9[4] = v11;
  uint64_t v12 = *(void *)(v11 - 8);
  v9[5] = v12;
  size_t v13 = *(void *)(v12 + 64);
  v9[6] = malloc(v13);
  unint64_t v14 = malloc(v13);
  v9[7] = v14;
  AttributedString._AttributeStorage.subscript.getter(*v4, v10, a4, (uint64_t)v14);
  return ScopedAttributeContainer.subscript.modify;
}

void ScopedAttributeContainer.subscript.modify(uint64_t a1, char a2)
{
  unint64_t v2 = *(void **)a1;
  uint64_t v3 = *(char **)(*(void *)a1 + 48LL);
  uint64_t v4 = *(char **)(*(void *)a1 + 56LL);
  if ((a2 & 1) != 0)
  {
    uint64_t v5 = v2[4];
    uint64_t v6 = v2[5];
    uint64_t v7 = v2[2];
    uint64_t v8 = (void *)*v2;
    (*(void (**)(void, char *, uint64_t))(v6 + 16))(*(void *)(*(void *)a1 + 48LL), v4, v5);
    swift_retain();
    ScopedAttributeContainer.subscript.setter(v3, v8, v9, v7);
    (*(void (**)(char *, uint64_t))(v6 + 8))(v4, v5);
  }

  else
  {
    uint64_t v10 = v2[2];
    uint64_t v11 = (void *)*v2;
    swift_retain();
    ScopedAttributeContainer.subscript.setter(v4, v11, v12, v10);
  }

  free(v4);
  free(v3);
  free(v2);
}

double protocol witness for static AttributedStringKey.runBoundaries.getter in conformance AttributeScopes.FoundationAttributes.LinkAttribute@<D0>( _OWORD *a1@<X8>)
{
  double result = 0.0;
  *a1 = xmmword_183723F60;
  return result;
}

uint64_t specialized static AttributedString.AttributeRunBoundaries.== infix(_:_:)(void *a1, void *a2)
{
  uint64_t v3 = a1[1];
  uint64_t v4 = a2[1];
  if (v3)
  {
    if (v4)
    {
      if (*a1 != *a2 || v3 != v4) {
        return _stringCompareWithSmolCheck(_:_:expecting:)();
      }
      return 1LL;
    }

    return 0LL;
  }

  if (v4) {
    return 0LL;
  }
  swift_bridgeObjectRelease_n();
  return 1LL;
}

unint64_t lazy protocol witness table accessor for type AttributedString.AttributeRunBoundaries and conformance AttributedString.AttributeRunBoundaries()
{
  unint64_t result = lazy protocol witness table cache variable for type AttributedString.AttributeRunBoundaries and conformance AttributedString.AttributeRunBoundaries;
  if (!lazy protocol witness table cache variable for type AttributedString.AttributeRunBoundaries and conformance AttributedString.AttributeRunBoundaries)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for AttributedString.AttributeRunBoundaries,  &type metadata for AttributedString.AttributeRunBoundaries);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type AttributedString.AttributeRunBoundaries and conformance AttributedString.AttributeRunBoundaries);
  }

  return result;
}

unint64_t lazy protocol witness table accessor for type AttributedString.AttributeInvalidationCondition and conformance AttributedString.AttributeInvalidationCondition()
{
  unint64_t result = lazy protocol witness table cache variable for type AttributedString.AttributeInvalidationCondition and conformance AttributedString.AttributeInvalidationCondition;
  if (!lazy protocol witness table cache variable for type AttributedString.AttributeInvalidationCondition and conformance AttributedString.AttributeInvalidationCondition)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for AttributedString.AttributeInvalidationCondition,  &type metadata for AttributedString.AttributeInvalidationCondition);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type AttributedString.AttributeInvalidationCondition and conformance AttributedString.AttributeInvalidationCondition);
  }

  return result;
}

uint64_t sub_1831823F8()
{
  return 32LL;
}

__n128 sub_183182404(uint64_t a1, _OWORD *a2)
{
  __n128 result = *(__n128 *)a1;
  __int128 v3 = *(_OWORD *)(a1 + 16);
  *a2 = *(_OWORD *)a1;
  a2[1] = v3;
  return result;
}

ValueMetadata *type metadata accessor for AttributedString.AttributeRunBoundaries()
{
  return &type metadata for AttributedString.AttributeRunBoundaries;
}

ValueMetadata *type metadata accessor for AttributedString.AttributeInvalidationCondition()
{
  return &type metadata for AttributedString.AttributeInvalidationCondition;
}

uint64_t dispatch thunk of static AttributedStringKey.name.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

uint64_t dispatch thunk of static AttributedStringKey.runBoundaries.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 32))();
}

uint64_t dispatch thunk of static AttributedStringKey.inheritedByAddedText.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 40))();
}

uint64_t dispatch thunk of static AttributedStringKey.invalidationConditions.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 48))();
}

ValueMetadata *type metadata accessor for AttributeDynamicLookup()
{
  return &type metadata for AttributeDynamicLookup;
}

uint64_t destroy for ScopedAttributeContainer()
{
  return swift_bridgeObjectRelease();
}

void *initializeWithCopy for ScopedAttributeContainer(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  uint64_t v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for ScopedAttributeContainer(void *a1, void *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for ScopedAttributeContainer(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_bridgeObjectRelease();
  uint64_t v4 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v4;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t type metadata accessor for ScopedAttributeContainer(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata( a1,  a2,  a3,  a4,  (uint64_t)&nominal type descriptor for ScopedAttributeContainer);
}

uint64_t getEnumTagSinglePayload for AttributedString.AttributeRunBoundaries(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 16)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  unint64_t v3 = *(void *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  else {
    return 0LL;
  }
}

uint64_t storeEnumTagSinglePayload for AttributedString.AttributeRunBoundaries( uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)__n128 result = 0LL;
    *(void *)(result + 8) = 0LL;
    *(_DWORD *)__n128 result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(_BYTE *)(result + 16) = 1;
    }
  }

  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(_BYTE *)(result + 16) = 0;
    }
    if (a2) {
      *(void *)(result + 8) = a2;
    }
  }

  return result;
}

void *type metadata accessor for AttributedString.AttributeInvalidationCondition._Storage()
{
  return &unk_189C7F558;
}

unint64_t lazy protocol witness table accessor for type AttributedString.AttributeInvalidationCondition._Storage and conformance AttributedString.AttributeInvalidationCondition._Storage()
{
  unint64_t result = lazy protocol witness table cache variable for type AttributedString.AttributeInvalidationCondition._Storage and conformance AttributedString.AttributeInvalidationCondition._Storage;
  if (!lazy protocol witness table cache variable for type AttributedString.AttributeInvalidationCondition._Storage and conformance AttributedString.AttributeInvalidationCondition._Storage)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for AttributedString.AttributeInvalidationCondition._Storage,  &unk_189C7F558);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type AttributedString.AttributeInvalidationCondition._Storage and conformance AttributedString.AttributeInvalidationCondition._Storage);
  }

  return result;
}

void specialized Hasher.combine<A>(_:)(uint64_t a1)
{
  if (*(_BYTE *)a1 == 3)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    Hasher._combine(_:)(1u);
    String.hash(into:)();
    swift_bridgeObjectRelease();
  }

  int v3 = *(unsigned __int8 *)(a1 + 16);
  if (v3 == 255)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    uint64_t v4 = *(void *)(a1 + 8);
    Hasher._combine(_:)(1u);
    Date.FormatStyle.Symbol.SymbolType.YearOption.rawValue.getter(v4, v3);
    String.hash(into:)();
    swift_bridgeObjectRelease();
  }

  uint64_t v5 = *(unsigned __int8 *)(a1 + 17);
  if ((_DWORD)v5 != 5)
  {
    Hasher._combine(_:)(1u);
    __asm { BR              X9 }
  }

  Hasher._combine(_:)(0);
  uint64_t v6 = *(unsigned __int8 *)(a1 + 18);
  if ((_DWORD)v6 != 5)
  {
    Hasher._combine(_:)(1u);
    __asm { BR              X9 }
  }

  Hasher._combine(_:)(0);
  if (*(_BYTE *)(a1 + 19) != 3)
  {
    Hasher._combine(_:)(1u);
    String.hash(into:)();
    swift_bridgeObjectRelease();
    if ((*(_BYTE *)(a1 + 33) & 1) == 0) {
      goto LABEL_15;
    }
LABEL_23:
    Hasher._combine(_:)(0);
    goto LABEL_25;
  }

  Hasher._combine(_:)(0);
  if ((*(_BYTE *)(a1 + 33) & 1) != 0) {
    goto LABEL_23;
  }
LABEL_15:
  uint64_t v7 = *(void *)(a1 + 24);
  char v8 = *(_BYTE *)(a1 + 32);
  Hasher._combine(_:)(1u);
  if ((v8 & 1) == 0)
  {
    uint64_t v9 = 10LL;
    if (v7 < 10) {
      uint64_t v9 = v7;
    }
    if (v9 <= 1) {
      uint64_t v10 = 1LL;
    }
    else {
      uint64_t v10 = v9;
    }
    MEMORY[0x186E1B904](103LL, 0xE100000000000000LL, v10);
  }

  String.hash(into:)();
  swift_bridgeObjectRelease();
LABEL_25:
  if (*(_BYTE *)(a1 + 34) == 3)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    Hasher._combine(_:)(1u);
    String.hash(into:)();
    swift_bridgeObjectRelease();
  }

  uint64_t v11 = *(unsigned __int8 *)(a1 + 35);
  if ((_DWORD)v11 != 6)
  {
    Hasher._combine(_:)(1u);
    __asm { BR              X9 }
  }

  Hasher._combine(_:)(0);
  int v12 = *(unsigned __int8 *)(a1 + 36);
  if (v12 == 9)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    Hasher._combine(_:)(1u);
    specialized RawRepresentable<>.hash(into:)(v1, v12);
  }

  int v13 = *(unsigned __int8 *)(a1 + 37);
  if (v13 == 14)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    Hasher._combine(_:)(1u);
    Date.FormatStyle.Symbol.SymbolType.HourOption.rawValue.getter(v13);
    String.hash(into:)();
    swift_bridgeObjectRelease();
  }

  if (*(_BYTE *)(a1 + 38) == 2)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    Hasher._combine(_:)(1u);
    String.hash(into:)();
    swift_bridgeObjectRelease();
  }

  if (*(_BYTE *)(a1 + 39) == 2)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    Hasher._combine(_:)(1u);
    String.hash(into:)();
    swift_bridgeObjectRelease();
  }

  int v14 = *(unsigned __int8 *)(a1 + 48);
  if (v14 == 255)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    uint64_t v15 = *(void *)(a1 + 40);
    char v16 = v14 & 1;
    Hasher._combine(_:)(1u);
    specialized RawRepresentable<>.hash(into:)(v1, v15, v16);
  }

  int v17 = *(unsigned __int8 *)(a1 + 49);
  if (v17 == 12)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    Hasher._combine(_:)(1u);
    Date.FormatStyle.Symbol.SymbolType.TimeZoneSymbolOption.rawValue.getter(v17);
    String.hash(into:)();
    swift_bridgeObjectRelease();
  }

uint64_t Date.IntervalFormatStyle.locale.getter@<X0>(_OWORD *a1@<X8>)
{
  *a1 = *v1;
  return swift_unknownObjectRetain();
}

__n128 Date.IntervalFormatStyle.locale.setter(__n128 *a1)
{
  __n128 result = *a1;
  *uint64_t v1 = *a1;
  return result;
}

uint64_t (*Date.IntervalFormatStyle.locale.modify())()
{
  return destructiveProjectEnumData for PredicateCodableError;
}

uint64_t Date.IntervalFormatStyle.timeZone.getter@<X0>(_OWORD *a1@<X8>)
{
  *a1 = *(_OWORD *)(v1 + 16);
  return swift_unknownObjectRetain();
}

__n128 Date.IntervalFormatStyle.timeZone.setter(__n128 *a1)
{
  __n128 result = *a1;
  v1[1] = *a1;
  return result;
}

uint64_t (*Date.IntervalFormatStyle.timeZone.modify())()
{
  return destructiveProjectEnumData for PredicateCodableError;
}

uint64_t Date.IntervalFormatStyle.calendar.getter@<X0>(_OWORD *a1@<X8>)
{
  *a1 = *(_OWORD *)(v1 + 32);
  return swift_unknownObjectRetain();
}

__n128 Date.IntervalFormatStyle.calendar.setter(__n128 *a1)
{
  __n128 result = *a1;
  v1[2] = *a1;
  return result;
}

uint64_t (*Date.IntervalFormatStyle.calendar.modify())()
{
  return destructiveProjectEnumData for PredicateCodableError;
}

int8x8_t Date.IntervalFormatStyle.init(date:time:locale:calendar:timeZone:)@<D0>( uint64_t a1@<X0>, uint64_t *a2@<X1>, __int128 *a3@<X2>, __int128 *a4@<X3>, __int128 *a5@<X4>, uint64_t a6@<X8>, int16x8_t a7@<Q0>)
{
  uint64_t v8 = *(void *)a1;
  char v9 = *(_BYTE *)(a1 + 8);
  uint64_t v10 = *a2;
  char v11 = *((_BYTE *)a2 + 8);
  __int128 v12 = *a3;
  __int128 v13 = *a4;
  __int128 v14 = *a5;
  char v15 = 3;
  char v51 = 3;
  uint64_t v52 = 0LL;
  int v53 = 50660863;
  uint64_t v54 = 0LL;
  __int16 v55 = 256;
  int v56 = 235472387;
  __int16 v57 = 514;
  uint64_t v58 = 0LL;
  __int16 v59 = 3327;
  if ((v9 & 1) != 0)
  {
    char v16 = 0;
    uint64_t v17 = 0LL;
    uint64_t v18 = 0LL;
    uint64_t v19 = 0LL;
    char v20 = HIBYTE(v55);
    a7.i64[0] = 0x30005000500FFLL;
    char v21 = 1;
    char v22 = 12;
    char v23 = -1;
    char v24 = 2;
    char v25 = 14;
    char v26 = 6;
    char v27 = 9;
    char v28 = 3;
    char v29 = 2;
    if ((v11 & 1) == 0) {
      goto LABEL_3;
    }
LABEL_8:
    char v21 = v20 & 1;
    goto LABEL_12;
  }

  uint64_t v35 = v8;
  __int128 v33 = v12;
  __int128 v34 = v13;
  __int128 v32 = v14;
  Date.FormatStyle.DateFieldCollection.collection(date:)(&v35, (uint64_t)v36);
  __int128 v14 = v32;
  __int128 v12 = v33;
  __int128 v13 = v34;
  char v28 = v36[0];
  uint64_t v18 = v37;
  v30.i32[0] = v38;
  a7 = (int16x8_t)vmovl_u8(v30);
  uint64_t v17 = v39;
  char v16 = v40;
  char v20 = v41;
  char v15 = v42;
  char v26 = v43;
  char v27 = v44;
  char v25 = v45;
  char v24 = v46;
  char v29 = v47;
  uint64_t v19 = v48;
  char v23 = v49;
  char v21 = v41;
  char v22 = v50;
  if ((v11 & 1) != 0) {
    goto LABEL_8;
  }
LABEL_3:
  if (v10)
  {
    if (v10 == 3)
    {
      char v22 = 0;
    }

    else if (v10 != 2)
    {
      goto LABEL_11;
    }

    char v29 = 1;
LABEL_11:
    char v25 = 0;
    char v24 = 1;
  }

uint64_t Date.IntervalFormatStyle.format(_:)(double *a1)
{
  uint64_t v41 = *MEMORY[0x1895F89C0];
  double v3 = *a1;
  double v2 = a1[1];
  char v4 = *(_BYTE *)(v1 + 48);
  uint64_t v5 = *(void *)(v1 + 56);
  uint64_t v6 = *(void *)(v1 + 72);
  char v7 = *(_BYTE *)(v1 + 80);
  char v8 = *(_BYTE *)(v1 + 81);
  __int16 v9 = *(_WORD *)(v1 + 86);
  uint64_t v10 = *(void *)(v1 + 88);
  __int16 v11 = *(_WORD *)(v1 + 96);
  __int128 v12 = *(_OWORD *)(v1 + 16);
  v30[0] = *(_OWORD *)v1;
  v30[1] = v12;
  v30[2] = *(_OWORD *)(v1 + 32);
  char v31 = v4;
  uint64_t v32 = v5;
  int v33 = *(_DWORD *)(v1 + 64);
  uint64_t v34 = v6;
  char v35 = v7;
  char v36 = v8;
  int v37 = *(_DWORD *)(v1 + 82);
  __int16 v38 = v9;
  uint64_t v39 = v10;
  __int16 v40 = v11;
  if (!specialized static ICUDateIntervalFormatter.formatter(for:)((uint64_t)v30)
    || (uint64_t v13 = swift_retain_n(),
        MEMORY[0x1895F8858](v13),
        swift_retain(),
        specialized closure #1 in _withResizingUCharBuffer(initialSize:_:)((uint64_t)&v29, (uint64_t *)v30),
        uint64_t v15 = *((void *)&v30[0] + 1),
        uint64_t v14 = *(void *)&v30[0],
        swift_release_n(),
        !v15))
  {
    id v16 = objc_msgSend(objc_allocWithZone(MEMORY[0x189603F50]), sel_initWithTimeIntervalSinceReferenceDate_, v3);
    id v17 = objc_msgSend(v16, sel_description);

    id v18 = static String._unconditionallyBridgeFromObjectiveC(_:)(v17);
    uint64_t v20 = v19;

    *(void *)&v30[0] = v18;
    *((void *)&v30[0] + 1) = v20;
    v21._uint64_t countAndFlagsBits = 2108704LL;
    v21._unint64_t object = (void *)0xE300000000000000LL;
    String.append(_:)(v21);
    id v22 = objc_msgSend(objc_allocWithZone(MEMORY[0x189603F50]), sel_initWithTimeIntervalSinceReferenceDate_, v2);
    id v23 = objc_msgSend(v22, sel_description);

    id v24 = static String._unconditionallyBridgeFromObjectiveC(_:)(v23);
    char v26 = v25;

    v27._uint64_t countAndFlagsBits = (uint64_t)v24;
    v27._unint64_t object = v26;
    String.append(_:)(v27);
    swift_bridgeObjectRelease();
    return *(void *)&v30[0];
  }

  return v14;
}

uint64_t Date.IntervalFormatStyle.locale(_:)@<X0>(_OWORD *a1@<X0>, uint64_t a2@<X8>)
{
  char v3 = *(_BYTE *)(v2 + 48);
  uint64_t v4 = *(void *)(v2 + 56);
  uint64_t v5 = *(void *)(v2 + 72);
  char v6 = *(_BYTE *)(v2 + 80);
  char v7 = *(_BYTE *)(v2 + 81);
  __int16 v8 = *(_WORD *)(v2 + 86);
  uint64_t v9 = *(void *)(v2 + 88);
  __int16 v10 = *(_WORD *)(v2 + 96);
  __int128 v11 = *(_OWORD *)(v2 + 16);
  __int128 v12 = *(_OWORD *)(v2 + 32);
  *(_OWORD *)a2 = *a1;
  *(_OWORD *)(a2 + 16) = v11;
  *(_OWORD *)(a2 + 32) = v12;
  *(_BYTE *)(a2 + 48) = v3;
  *(void *)(a2 + 56) = v4;
  *(_DWORD *)(a2 + 64) = *(_DWORD *)(v2 + 64);
  *(void *)(a2 + 72) = v5;
  *(_BYTE *)(a2 + 80) = v6;
  *(_BYTE *)(a2 + 81) = v7;
  *(_DWORD *)(a2 + 82) = *(_DWORD *)(v2 + 82);
  *(_WORD *)(a2 + 86) = v8;
  *(void *)(a2 + 88) = v9;
  *(_WORD *)(a2 + 96) = v10;
  swift_unknownObjectRetain();
  swift_unknownObjectRetain();
  return swift_unknownObjectRetain();
}

void Date.IntervalFormatStyle.hash(into:)(uint64_t a1)
{
  void (*v10)(void *__return_ptr, uint64_t, uint64_t);
  Swift::UInt8 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _BYTE *v16;
  uint64_t v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  id v23;
  id v24;
  void *v25;
  id v26;
  id v27;
  id v28;
  id v29;
  id v30;
  id v31;
  id v32;
  id v33;
  void *v34;
  id v35;
  id v36;
  void *v37;
  id v38;
  uint64_t v39;
  uint64_t v40;
  Swift::UInt v41;
  Swift::UInt v42;
  Swift::UInt8 v43;
  Swift::UInt8 v44;
  Swift::UInt8 v45;
  uint64_t v46;
  void (*v47)(uint64_t, uint64_t, uint64_t);
  uint64_t v48;
  void (*v49)(uint64_t, uint64_t, uint64_t);
  void *v50;
  void *v51;
  void *v52;
  uint64_t v53;
  uint64_t v54;
  void *v55;
  _BYTE v56[144];
  _BYTE v57[8];
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  void *v63;
  void *v64;
  void *v65;
  void *v66;
  void *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  char v71;
  char v72;
  char v73;
  char v74;
  void v75[18];
  _BYTE v76[144];
  _BYTE v77[144];
  _OWORD v78[3];
  __int16 v79;
  uint64_t v3 = *(void *)(v1 + 8);
  uint64_t v4 = *(void *)(v1 + 24);
  uint64_t v5 = *(void *)(v1 + 40);
  __int128 v6 = *(_OWORD *)(v1 + 64);
  v78[0] = *(_OWORD *)(v1 + 48);
  v78[1] = v6;
  v78[2] = *(_OWORD *)(v1 + 80);
  Swift::String v79 = *(_WORD *)(v1 + 96);
  uint64_t ObjectType = swift_getObjectType();
  __int16 v8 = *(uint64_t (**)(uint64_t, uint64_t))(v3 + 48);
  swift_unknownObjectRetain();
  if ((v8(ObjectType, v3) & 1) != 0)
  {
    Swift::UInt8 v9 = 1;
LABEL_5:
    Hasher._combine(_:)(v9);
    goto LABEL_59;
  }

  Hasher._combine(_:)(0);
  (*(void (**)(uint64_t, uint64_t))(v3 + 64))(ObjectType, v3);
  String.hash(into:)();
  swift_bridgeObjectRelease();
  __int16 v10 = *(void (**)(void *__return_ptr, uint64_t, uint64_t))(v3 + 464);
  swift_unknownObjectRetain();
  v10(v75, ObjectType, v3);
  swift_unknownObjectRelease();
  outlined init with take of LocalePreferences?((uint64_t)v75, (uint64_t)v76);
  outlined init with take of LocalePreferences?((uint64_t)v76, (uint64_t)v77);
  if (_s10Foundation17LocalePreferencesVSgWOg((uint64_t)v77) == 1)
  {
    Swift::UInt8 v9 = 0;
    goto LABEL_5;
  }

  outlined init with take of LocalePreferences?((uint64_t)v76, (uint64_t)v57);
  Hasher._combine(_:)(1u);
  if (v57[0] == 2)
  {
    __int128 v11 = 0;
  }

  else
  {
    __int128 v11 = v57[0] & 1;
    Hasher._combine(_:)(1u);
  }

  Hasher._combine(_:)(v11);
  __int128 v12 = v58;
  int v53 = v4;
  if (!v58)
  {
    Hasher._combine(_:)(0);
    id v16 = v57;
    goto LABEL_19;
  }

  Hasher._combine(_:)(1u);
  Hasher._combine(_:)(*(void *)(v12 + 16));
  uint64_t v13 = *(void *)(v12 + 16);
  if (!v13)
  {
    outlined init with take of LocalePreferences?((uint64_t)v76, (uint64_t)v56);
    id v16 = v56;
LABEL_19:
    outlined retain of LocalePreferences(v16);
    if (!v59) {
      goto LABEL_14;
    }
    goto LABEL_20;
  }

  outlined retain of LocalePreferences?( (uint64_t)v76,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined copy of LocalePreferences?);
  swift_bridgeObjectRetain();
  uint64_t v14 = v12 + 40;
  do
  {
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    v14 += 16LL;
    --v13;
  }

  while (v13);
  swift_bridgeObjectRelease();
  if (!v59)
  {
LABEL_14:
    Hasher._combine(_:)(0);
    if (!v60) {
      goto LABEL_15;
    }
LABEL_21:
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    uint64_t v15 = v61;
    if (!v61) {
      goto LABEL_16;
    }
    goto LABEL_22;
  }

uint64_t protocol witness for CodingKey.stringValue.getter in conformance Date.IntervalFormatStyle.CodingKeys()
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_183183A40 + 4 * byte_1837ADF40[*v0]))( 0x656C61636F6CLL,  0xE600000000000000LL);
}

uint64_t sub_183183A40()
{
  return 0x656E6F5A656D6974LL;
}

uint64_t sub_183183A58()
{
  return 0x7261646E656C6163LL;
}

uint64_t sub_183183A70()
{
  return 0x736C6F626D7973LL;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance Date.IntervalFormatStyle.CodingKeys@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result = specialized Date.IntervalFormatStyle.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance Date.IntervalFormatStyle.CodingKeys()
{
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance Date.IntervalFormatStyle.CodingKeys()
{
  return CodingKey.debugDescription.getter();
}

uint64_t Date.IntervalFormatStyle.encode(to:)(void *a1)
{
  uint64_t v5 = v1;
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<Date.IntervalFormatStyle.CodingKeys>);
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x1895F8858](v7);
  __int16 v10 = (char *)&v17 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __int128 v27 = v5[1];
  __int128 v23 = v5[2];
  int v39 = *((unsigned __int8 *)v5 + 48);
  uint64_t v26 = *((void *)v5 + 7);
  v4.i32[0] = *((_DWORD *)v5 + 16);
  uint64_t v25 = *((void *)v5 + 9);
  LODWORD(v9) = *((unsigned __int8 *)v5 + 81);
  int v18 = *((unsigned __int8 *)v5 + 80);
  int v19 = v9;
  v3.i32[0] = *(_DWORD *)((char *)v5 + 82);
  int v24 = *((unsigned __int8 *)v5 + 86);
  int v20 = *((unsigned __int8 *)v5 + 87);
  uint64_t v21 = *((void *)v5 + 11);
  int v22 = *((unsigned __int8 *)v5 + 96);
  int v11 = *((unsigned __int8 *)v5 + 97);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type Date.IntervalFormatStyle.CodingKeys and conformance Date.IntervalFormatStyle.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  __int128 v28 = *v5;
  char v40 = 0;
  lazy protocol witness table accessor for type Locale and conformance Locale();
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v2)
  {
    uint64_t v13 = v25;
    uint64_t v12 = v26;
    char v14 = v39;
    int v17 = v11;
    char v15 = v24;
    __int128 v28 = v27;
    char v40 = 1;
    lazy protocol witness table accessor for type TimeZone and conformance TimeZone();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    __int128 v28 = v23;
    char v40 = 2;
    lazy protocol witness table accessor for type Calendar and conformance Calendar();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    LOBYTE(v28) = v14;
    *((void *)&v28 + 1) = v12;
    unsigned __int32 v29 = vmovn_s16((int16x8_t)vmovl_u8(v4)).u32[0];
    uint64_t v30 = v13;
    char v31 = v18;
    char v32 = v19;
    unsigned __int32 v33 = vmovn_s16((int16x8_t)vmovl_u8(v3)).u32[0];
    char v34 = v15;
    char v35 = v20;
    uint64_t v36 = v21;
    char v37 = v22;
    char v38 = v17;
    char v40 = 3;
    lazy protocol witness table accessor for type Date.FormatStyle.DateFieldCollection and conformance Date.FormatStyle.DateFieldCollection();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
  }

  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v10, v7);
}

Swift::Int Date.IntervalFormatStyle.hashValue.getter()
{
  void (*v8)(void *__return_ptr, uint64_t, uint64_t);
  Swift::UInt8 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  uint64_t v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  id v21;
  id v22;
  id v23;
  id v24;
  id v25;
  id v26;
  id v27;
  id v28;
  id v29;
  id v30;
  id v31;
  id v32;
  id v33;
  uint64_t v34;
  uint64_t v35;
  Swift::UInt v36;
  Swift::UInt v37;
  Swift::UInt8 v38;
  Swift::UInt8 v39;
  Swift::UInt8 v40;
  uint64_t v41;
  void (*v42)(_BYTE *, uint64_t, uint64_t);
  uint64_t v43;
  void (*v44)(_BYTE *, uint64_t, uint64_t);
  void *v46;
  uint64_t v47;
  uint64_t v48;
  _BYTE v49[144];
  _BYTE v50[8];
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  void *v56;
  void *v57;
  void *v58;
  void *v59;
  void *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char v64;
  char v65;
  char v66;
  char v67;
  void v68[18];
  _BYTE v69[144];
  _BYTE v70[144];
  _BYTE v71[72];
  _OWORD v72[3];
  __int16 v73;
  uint64_t v1 = *(void *)(v0 + 8);
  uint64_t v2 = *(void *)(v0 + 24);
  uint64_t v3 = *(void *)(v0 + 40);
  __int128 v4 = *(_OWORD *)(v0 + 64);
  v72[0] = *(_OWORD *)(v0 + 48);
  v72[1] = v4;
  v72[2] = *(_OWORD *)(v0 + 80);
  id v73 = *(_WORD *)(v0 + 96);
  Hasher.init(_seed:)();
  uint64_t ObjectType = swift_getObjectType();
  __int128 v6 = *(uint64_t (**)(uint64_t, uint64_t))(v1 + 48);
  swift_unknownObjectRetain();
  if ((v6(ObjectType, v1) & 1) != 0)
  {
    Swift::UInt8 v7 = 1;
LABEL_5:
    Hasher._combine(_:)(v7);
    goto LABEL_59;
  }

  Hasher._combine(_:)(0);
  (*(void (**)(uint64_t, uint64_t))(v1 + 64))(ObjectType, v1);
  String.hash(into:)();
  swift_bridgeObjectRelease();
  uint64_t v8 = *(void (**)(void *__return_ptr, uint64_t, uint64_t))(v1 + 464);
  swift_unknownObjectRetain();
  v8(v68, ObjectType, v1);
  swift_unknownObjectRelease();
  outlined init with take of LocalePreferences?((uint64_t)v68, (uint64_t)v69);
  outlined init with take of LocalePreferences?((uint64_t)v69, (uint64_t)v70);
  if (_s10Foundation17LocalePreferencesVSgWOg((uint64_t)v70) == 1)
  {
    Swift::UInt8 v7 = 0;
    goto LABEL_5;
  }

  outlined init with take of LocalePreferences?((uint64_t)v69, (uint64_t)v50);
  Hasher._combine(_:)(1u);
  if (v50[0] == 2)
  {
    uint64_t v9 = 0;
  }

  else
  {
    uint64_t v9 = v50[0] & 1;
    Hasher._combine(_:)(1u);
  }

  Hasher._combine(_:)(v9);
  __int16 v10 = v51;
  if (!v51)
  {
    Hasher._combine(_:)(0);
    char v14 = v50;
    goto LABEL_19;
  }

  Hasher._combine(_:)(1u);
  Hasher._combine(_:)(*(void *)(v10 + 16));
  int v11 = *(void *)(v10 + 16);
  if (!v11)
  {
    outlined init with take of LocalePreferences?((uint64_t)v69, (uint64_t)v49);
    char v14 = v49;
LABEL_19:
    outlined retain of LocalePreferences(v14);
    if (!v52) {
      goto LABEL_14;
    }
    goto LABEL_20;
  }

  outlined retain of LocalePreferences?( (uint64_t)v69,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined copy of LocalePreferences?);
  swift_bridgeObjectRetain();
  uint64_t v12 = v10 + 40;
  do
  {
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    v12 += 16LL;
    --v11;
  }

  while (v11);
  swift_bridgeObjectRelease();
  if (!v52)
  {
LABEL_14:
    Hasher._combine(_:)(0);
    if (!v53) {
      goto LABEL_15;
    }
LABEL_21:
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    uint64_t v13 = v54;
    if (!v54) {
      goto LABEL_16;
    }
    goto LABEL_22;
  }

uint64_t Date.IntervalFormatStyle.init(from:)@<X0>(void *a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<Date.IntervalFormatStyle.CodingKeys>);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1895F8858](v5);
  uint64_t v8 = (char *)v24 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type Date.IntervalFormatStyle.CodingKeys and conformance Date.IntervalFormatStyle.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2) {
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  }
  char v39 = 0;
  lazy protocol witness table accessor for type Locale and conformance Locale();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  __int128 v28 = a2;
  __int128 v29 = v30;
  char v39 = 1;
  lazy protocol witness table accessor for type TimeZone and conformance TimeZone();
  uint64_t v9 = v29;
  swift_unknownObjectRetain();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  uint64_t v26 = v9;
  __int128 v27 = v30;
  char v39 = 2;
  lazy protocol witness table accessor for type Calendar and conformance Calendar();
  uint64_t v10 = v27;
  swift_unknownObjectRetain();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  v24[1] = v10;
  __int128 v25 = v30;
  char v39 = 3;
  lazy protocol witness table accessor for type Date.FormatStyle.DateFieldCollection and conformance Date.FormatStyle.DateFieldCollection();
  swift_unknownObjectRetain();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  char v12 = v30;
  uint64_t v13 = *((void *)&v30 + 1);
  uint64_t v14 = v32;
  char v15 = v33;
  char v16 = v34;
  __int16 v17 = v36;
  uint64_t v18 = v37;
  __int16 v19 = v38;
  int v20 = v31;
  int v21 = v35;
  int v22 = v28;
  __int128 v23 = v27;
  *__int128 v28 = v29;
  v22[1] = v23;
  _OWORD v22[2] = v25;
  *((_BYTE *)v22 + 48) = v12;
  *((void *)v22 + 7) = v13;
  *((_DWORD *)v22 + 16) = v20;
  *((void *)v22 + 9) = v14;
  *((_BYTE *)v22 + 80) = v15;
  *((_BYTE *)v22 + 81) = v16;
  *(_DWORD *)((char *)v22 + 82) = v21;
  *((_WORD *)v22 + 43) = v17;
  *((void *)v22 + 11) = v18;
  *((_WORD *)v22 + 48) = v19;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  return swift_unknownObjectRelease();
}

uint64_t protocol witness for Decodable.init(from:) in conformance Date.IntervalFormatStyle@<X0>( void *a1@<X0>, _OWORD *a2@<X8>)
{
  return Date.IntervalFormatStyle.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance Date.IntervalFormatStyle(void *a1)
{
  return Date.IntervalFormatStyle.encode(to:)(a1);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance Date.IntervalFormatStyle()
{
  void (*v8)(void *__return_ptr, uint64_t, uint64_t);
  Swift::UInt8 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  id v20;
  id v21;
  id v22;
  id v23;
  id v24;
  id v25;
  id v26;
  id v27;
  id v28;
  id v29;
  id v30;
  id v31;
  id v32;
  uint64_t v33;
  uint64_t v34;
  Swift::UInt v35;
  Swift::UInt v36;
  Swift::UInt8 v37;
  Swift::UInt8 v38;
  Swift::UInt8 v39;
  uint64_t v40;
  void (*v41)(_BYTE *, uint64_t, uint64_t);
  uint64_t v42;
  void (*v43)(_BYTE *, uint64_t, uint64_t);
  void *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  void *v54;
  void *v55;
  void *v56;
  void *v57;
  void *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char v62;
  char v63;
  char v64;
  char v65;
  void v66[18];
  _BYTE v67[144];
  _BYTE v68[144];
  _BYTE v69[72];
  _OWORD v70[3];
  __int16 v71;
  uint64_t v1 = *(void *)(v0 + 8);
  uint64_t v2 = *(void *)(v0 + 24);
  uint64_t v3 = *(void *)(v0 + 40);
  __int128 v4 = *(_OWORD *)(v0 + 64);
  v70[0] = *(_OWORD *)(v0 + 48);
  v70[1] = v4;
  v70[2] = *(_OWORD *)(v0 + 80);
  id v71 = *(_WORD *)(v0 + 96);
  Hasher.init(_seed:)();
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(v1 + 48);
  swift_unknownObjectRetain();
  if ((v6(ObjectType, v1) & 1) != 0)
  {
    Swift::UInt8 v7 = 1;
LABEL_5:
    Hasher._combine(_:)(v7);
    goto LABEL_58;
  }

  Hasher._combine(_:)(0);
  (*(void (**)(uint64_t, uint64_t))(v1 + 64))(ObjectType, v1);
  String.hash(into:)();
  swift_bridgeObjectRelease();
  uint64_t v8 = *(void (**)(void *__return_ptr, uint64_t, uint64_t))(v1 + 464);
  swift_unknownObjectRetain();
  v8(v66, ObjectType, v1);
  swift_unknownObjectRelease();
  outlined init with take of LocalePreferences?((uint64_t)v66, (uint64_t)v67);
  outlined init with take of LocalePreferences?((uint64_t)v67, (uint64_t)v68);
  if (_s10Foundation17LocalePreferencesVSgWOg((uint64_t)v68) == 1)
  {
    Swift::UInt8 v7 = 0;
    goto LABEL_5;
  }

  outlined init with take of LocalePreferences?((uint64_t)v67, (uint64_t)&v48);
  Hasher._combine(_:)(1u);
  if (v48 == 2)
  {
    uint64_t v9 = 0;
  }

  else
  {
    uint64_t v9 = v48 & 1;
    Hasher._combine(_:)(1u);
  }

  Hasher._combine(_:)(v9);
  uint64_t v10 = v49;
  if (!v49)
  {
    Hasher._combine(_:)(0);
LABEL_18:
    outlined retain of LocalePreferences(&v48);
    if (!v50) {
      goto LABEL_14;
    }
    goto LABEL_19;
  }

  Hasher._combine(_:)(1u);
  Hasher._combine(_:)(*(void *)(v10 + 16));
  int v11 = *(void *)(v10 + 16);
  if (!v11) {
    goto LABEL_18;
  }
  outlined retain of LocalePreferences?( (uint64_t)v67,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined copy of LocalePreferences?);
  swift_bridgeObjectRetain();
  char v12 = v10 + 40;
  do
  {
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    v12 += 16LL;
    --v11;
  }

  while (v11);
  swift_bridgeObjectRelease();
  if (!v50)
  {
LABEL_14:
    Hasher._combine(_:)(0);
    if (!v51) {
      goto LABEL_15;
    }
LABEL_20:
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    uint64_t v13 = v52;
    if (!v52) {
      goto LABEL_16;
    }
    goto LABEL_21;
  }

uint64_t protocol witness for FormatStyle.format(_:) in conformance Date.IntervalFormatStyle@<X0>( double *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = Date.IntervalFormatStyle.format(_:)(a1);
  *a2 = result;
  a2[1] = v4;
  return result;
}

uint64_t protocol witness for FormatStyle.locale(_:) in conformance Date.IntervalFormatStyle@<X0>( _OWORD *a1@<X0>, uint64_t a2@<X8>)
{
  char v3 = *(_BYTE *)(v2 + 48);
  uint64_t v4 = *(void *)(v2 + 56);
  uint64_t v5 = *(void *)(v2 + 72);
  char v6 = *(_BYTE *)(v2 + 80);
  char v7 = *(_BYTE *)(v2 + 81);
  __int16 v8 = *(_WORD *)(v2 + 86);
  uint64_t v9 = *(void *)(v2 + 88);
  __int16 v10 = *(_WORD *)(v2 + 96);
  __int128 v11 = *(_OWORD *)(v2 + 16);
  __int128 v12 = *(_OWORD *)(v2 + 32);
  *(_OWORD *)a2 = *a1;
  *(_OWORD *)(a2 + 16) = v11;
  *(_OWORD *)(a2 + 32) = v12;
  *(_BYTE *)(a2 + 48) = v3;
  *(void *)(a2 + 56) = v4;
  *(_DWORD *)(a2 + 64) = *(_DWORD *)(v2 + 64);
  *(void *)(a2 + 72) = v5;
  *(_BYTE *)(a2 + 80) = v6;
  *(_BYTE *)(a2 + 81) = v7;
  *(_DWORD *)(a2 + 82) = *(_DWORD *)(v2 + 82);
  *(_WORD *)(a2 + 86) = v8;
  *(void *)(a2 + 88) = v9;
  *(_WORD *)(a2 + 96) = v10;
  swift_unknownObjectRetain();
  swift_unknownObjectRetain();
  return swift_unknownObjectRetain();
}

uint64_t Date.IntervalFormatStyle.year()@<X0>(uint64_t a1@<X8>)
{
  char v2 = *(_BYTE *)(v1 + 48);
  __int16 v3 = *(_WORD *)(v1 + 65);
  char v4 = *(_BYTE *)(v1 + 67);
  uint64_t v5 = *(void *)(v1 + 72);
  char v6 = *(_BYTE *)(v1 + 80);
  char v7 = *(_BYTE *)(v1 + 81);
  __int16 v8 = *(_WORD *)(v1 + 86);
  uint64_t v9 = *(void *)(v1 + 88);
  __int16 v10 = *(_WORD *)(v1 + 96);
  __int128 v11 = *(_OWORD *)(v1 + 16);
  *(_OWORD *)a1 = *(_OWORD *)v1;
  *(_OWORD *)(a1 + 16) = v11;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(v1 + 32);
  *(_BYTE *)(a1 + 48) = v2;
  *(void *)(a1 + 56) = 0LL;
  *(_BYTE *)(a1 + 64) = 3;
  *(_WORD *)(a1 + 65) = v3;
  *(_BYTE *)(a1 + 67) = v4;
  *(void *)(a1 + 72) = v5;
  *(_BYTE *)(a1 + 80) = v6;
  *(_BYTE *)(a1 + 81) = v7;
  *(_DWORD *)(a1 + 82) = *(_DWORD *)(v1 + 82);
  *(_WORD *)(a1 + 86) = v8;
  *(void *)(a1 + 88) = v9;
  *(_WORD *)(a1 + 96) = v10;
  swift_unknownObjectRetain();
  swift_unknownObjectRetain();
  return swift_unknownObjectRetain();
}

uint64_t Date.IntervalFormatStyle.month(_:)@<X0>(char *a1@<X0>, uint64_t a2@<X8>)
{
  char v3 = *a1;
  char v4 = *(_BYTE *)(v2 + 48);
  uint64_t v5 = *(void *)(v2 + 56);
  __int16 v6 = *(_WORD *)(v2 + 64);
  char v7 = *(_BYTE *)(v2 + 67);
  uint64_t v8 = *(void *)(v2 + 72);
  char v9 = *(_BYTE *)(v2 + 80);
  char v10 = *(_BYTE *)(v2 + 81);
  __int16 v11 = *(_WORD *)(v2 + 86);
  uint64_t v12 = *(void *)(v2 + 88);
  __int16 v13 = *(_WORD *)(v2 + 96);
  __int128 v14 = *(_OWORD *)(v2 + 16);
  *(_OWORD *)a2 = *(_OWORD *)v2;
  *(_OWORD *)(a2 + 16) = v14;
  *(_OWORD *)(a2 + 32) = *(_OWORD *)(v2 + 32);
  *(_BYTE *)(a2 + 48) = v4;
  *(void *)(a2 + 56) = v5;
  *(_WORD *)(a2 + 64) = v6;
  *(_BYTE *)(a2 + 66) = v3;
  *(_BYTE *)(a2 + 67) = v7;
  *(void *)(a2 + 72) = v8;
  *(_BYTE *)(a2 + 80) = v9;
  *(_BYTE *)(a2 + 81) = v10;
  *(_DWORD *)(a2 + 82) = *(_DWORD *)(v2 + 82);
  *(_WORD *)(a2 + 86) = v11;
  *(void *)(a2 + 88) = v12;
  *(_WORD *)(a2 + 96) = v13;
  swift_unknownObjectRetain();
  swift_unknownObjectRetain();
  return swift_unknownObjectRetain();
}

uint64_t Date.IntervalFormatStyle.day()@<X0>(uint64_t a1@<X8>)
{
  char v2 = *(_BYTE *)(v1 + 48);
  uint64_t v3 = *(void *)(v1 + 56);
  __int16 v4 = *(_WORD *)(v1 + 86);
  uint64_t v5 = *(void *)(v1 + 88);
  __int16 v6 = *(_WORD *)(v1 + 96);
  __int128 v7 = *(_OWORD *)(v1 + 16);
  *(_OWORD *)a1 = *(_OWORD *)v1;
  *(_OWORD *)(a1 + 16) = v7;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(v1 + 32);
  *(_BYTE *)(a1 + 48) = v2;
  *(void *)(a1 + 56) = v3;
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(v1 + 64);
  *(void *)(a1 + 72) = 0LL;
  *(_WORD *)(a1 + 80) = 1;
  *(_DWORD *)(a1 + 82) = *(_DWORD *)(v1 + 82);
  *(_WORD *)(a1 + 86) = v4;
  *(void *)(a1 + 88) = v5;
  *(_WORD *)(a1 + 96) = v6;
  swift_unknownObjectRetain();
  swift_unknownObjectRetain();
  return swift_unknownObjectRetain();
}

uint64_t Date.IntervalFormatStyle.weekday(_:)@<X0>(char *a1@<X0>, uint64_t a2@<X8>)
{
  char v3 = *a1;
  char v4 = *(_BYTE *)(v2 + 48);
  uint64_t v5 = *(void *)(v2 + 56);
  uint64_t v6 = *(void *)(v2 + 72);
  char v7 = *(_BYTE *)(v2 + 80);
  char v8 = *(_BYTE *)(v2 + 81);
  char v9 = *(_BYTE *)(v2 + 82);
  uint64_t v10 = *(void *)(v2 + 88);
  __int16 v11 = *(_WORD *)(v2 + 96);
  __int128 v12 = *(_OWORD *)(v2 + 16);
  *(_OWORD *)a2 = *(_OWORD *)v2;
  *(_OWORD *)(a2 + 16) = v12;
  *(_OWORD *)(a2 + 32) = *(_OWORD *)(v2 + 32);
  *(_BYTE *)(a2 + 48) = v4;
  *(void *)(a2 + 56) = v5;
  *(_DWORD *)(a2 + 64) = *(_DWORD *)(v2 + 64);
  *(void *)(a2 + 72) = v6;
  *(_BYTE *)(a2 + 80) = v7;
  *(_BYTE *)(a2 + 81) = v8;
  *(_BYTE *)(a2 + 82) = v9;
  *(_BYTE *)(a2 + 83) = v3;
  *(_DWORD *)(a2 + 84) = *(_DWORD *)(v2 + 84);
  *(void *)(a2 + 88) = v10;
  *(_WORD *)(a2 + 96) = v11;
  swift_unknownObjectRetain();
  swift_unknownObjectRetain();
  return swift_unknownObjectRetain();
}

uint64_t Date.IntervalFormatStyle.hour(_:)@<X0>(char *a1@<X0>, uint64_t a2@<X8>)
{
  char v3 = *a1;
  char v4 = *(_BYTE *)(v2 + 48);
  uint64_t v5 = *(void *)(v2 + 56);
  uint64_t v6 = *(void *)(v2 + 72);
  char v7 = *(_BYTE *)(v2 + 80);
  char v8 = *(_BYTE *)(v2 + 81);
  __int16 v9 = *(_WORD *)(v2 + 82);
  char v10 = *(_BYTE *)(v2 + 84);
  __int16 v11 = *(_WORD *)(v2 + 86);
  uint64_t v12 = *(void *)(v2 + 88);
  __int16 v13 = *(_WORD *)(v2 + 96);
  __int128 v14 = *(_OWORD *)(v2 + 16);
  *(_OWORD *)a2 = *(_OWORD *)v2;
  *(_OWORD *)(a2 + 16) = v14;
  *(_OWORD *)(a2 + 32) = *(_OWORD *)(v2 + 32);
  *(_BYTE *)(a2 + 48) = v4;
  *(void *)(a2 + 56) = v5;
  *(_DWORD *)(a2 + 64) = *(_DWORD *)(v2 + 64);
  *(void *)(a2 + 72) = v6;
  *(_BYTE *)(a2 + 80) = v7;
  *(_BYTE *)(a2 + 81) = v8;
  *(_WORD *)(a2 + 82) = v9;
  *(_BYTE *)(a2 + 84) = v10;
  *(_BYTE *)(a2 + 85) = v3;
  *(_WORD *)(a2 + 86) = v11;
  *(void *)(a2 + 88) = v12;
  *(_WORD *)(a2 + 96) = v13;
  swift_unknownObjectRetain();
  swift_unknownObjectRetain();
  return swift_unknownObjectRetain();
}

uint64_t Date.IntervalFormatStyle.minute()@<X0>(uint64_t a1@<X8>)
{
  char v2 = *(_BYTE *)(v1 + 48);
  uint64_t v3 = *(void *)(v1 + 56);
  uint64_t v4 = *(void *)(v1 + 72);
  char v5 = *(_BYTE *)(v1 + 80);
  char v6 = *(_BYTE *)(v1 + 81);
  char v7 = *(_BYTE *)(v1 + 87);
  uint64_t v8 = *(void *)(v1 + 88);
  __int16 v9 = *(_WORD *)(v1 + 96);
  __int128 v10 = *(_OWORD *)(v1 + 16);
  *(_OWORD *)a1 = *(_OWORD *)v1;
  *(_OWORD *)(a1 + 16) = v10;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(v1 + 32);
  *(_BYTE *)(a1 + 48) = v2;
  *(void *)(a1 + 56) = v3;
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(v1 + 64);
  *(void *)(a1 + 72) = v4;
  *(_BYTE *)(a1 + 80) = v5;
  *(_BYTE *)(a1 + 81) = v6;
  *(_DWORD *)(a1 + 82) = *(_DWORD *)(v1 + 82);
  *(_BYTE *)(a1 + 86) = 0;
  *(_BYTE *)(a1 + 87) = v7;
  *(void *)(a1 + 88) = v8;
  *(_WORD *)(a1 + 96) = v9;
  swift_unknownObjectRetain();
  swift_unknownObjectRetain();
  return swift_unknownObjectRetain();
}

uint64_t Date.IntervalFormatStyle.second()@<X0>(uint64_t a1@<X8>)
{
  char v2 = *(_BYTE *)(v1 + 48);
  uint64_t v3 = *(void *)(v1 + 56);
  uint64_t v4 = *(void *)(v1 + 72);
  char v5 = *(_BYTE *)(v1 + 80);
  char v6 = *(_BYTE *)(v1 + 81);
  unsigned __int8 v7 = *(_BYTE *)(v1 + 86);
  uint64_t v8 = *(void *)(v1 + 88);
  __int16 v9 = *(_WORD *)(v1 + 96);
  __int128 v10 = *(_OWORD *)(v1 + 16);
  *(_OWORD *)a1 = *(_OWORD *)v1;
  *(_OWORD *)(a1 + 16) = v10;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(v1 + 32);
  *(_BYTE *)(a1 + 48) = v2;
  *(void *)(a1 + 56) = v3;
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(v1 + 64);
  *(void *)(a1 + 72) = v4;
  *(_BYTE *)(a1 + 80) = v5;
  *(_BYTE *)(a1 + 81) = v6;
  *(_DWORD *)(a1 + 82) = *(_DWORD *)(v1 + 82);
  *(_WORD *)(a1 + 86) = v7;
  *(void *)(a1 + 88) = v8;
  *(_WORD *)(a1 + 96) = v9;
  swift_unknownObjectRetain();
  swift_unknownObjectRetain();
  return swift_unknownObjectRetain();
}

uint64_t Date.IntervalFormatStyle.timeZone(_:)@<X0>(char *a1@<X0>, uint64_t a2@<X8>)
{
  char v3 = *a1;
  char v4 = *(_BYTE *)(v2 + 48);
  uint64_t v5 = *(void *)(v2 + 56);
  uint64_t v6 = *(void *)(v2 + 72);
  char v7 = *(_BYTE *)(v2 + 80);
  char v8 = *(_BYTE *)(v2 + 81);
  __int16 v9 = *(_WORD *)(v2 + 86);
  uint64_t v10 = *(void *)(v2 + 88);
  char v11 = *(_BYTE *)(v2 + 96);
  __int128 v12 = *(_OWORD *)(v2 + 16);
  *(_OWORD *)a2 = *(_OWORD *)v2;
  *(_OWORD *)(a2 + 16) = v12;
  *(_OWORD *)(a2 + 32) = *(_OWORD *)(v2 + 32);
  *(_BYTE *)(a2 + 48) = v4;
  *(void *)(a2 + 56) = v5;
  *(_DWORD *)(a2 + 64) = *(_DWORD *)(v2 + 64);
  *(void *)(a2 + 72) = v6;
  *(_BYTE *)(a2 + 80) = v7;
  *(_BYTE *)(a2 + 81) = v8;
  *(_DWORD *)(a2 + 82) = *(_DWORD *)(v2 + 82);
  *(_WORD *)(a2 + 86) = v9;
  *(void *)(a2 + 88) = v10;
  *(_BYTE *)(a2 + 96) = v11;
  *(_BYTE *)(a2 + 97) = v3;
  swift_unknownObjectRetain();
  swift_unknownObjectRetain();
  return swift_unknownObjectRetain();
}

int8x8_t static FormatStyle<>.interval.getter@<D0>(uint64_t a1@<X8>)
{
  uint64_t v19 = 0LL;
  char v20 = 1;
  uint64_t v17 = 0LL;
  char v18 = 1;
  if (one-time initialization token for cache != -1) {
    swift_once();
  }
  uint64_t v2 = static LocaleCache.cache + 16;
  char v3 = (os_unfair_lock_s *)(static LocaleCache.cache + 124);
  swift_retain_n();
  os_unfair_lock_lock(v3);
  closure #1 in LocaleCache.autoupdatingCurrent.getter(v2, (uint64_t *)&v16);
  os_unfair_lock_unlock(v3);
  swift_release_n();
  uint64_t v4 = v16;
  uint64_t v5 = lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( (unint64_t *)&lazy protocol witness table cache variable for type _LocaleAutoupdating and conformance _LocaleAutoupdating,  (uint64_t (*)(uint64_t))type metadata accessor for _LocaleAutoupdating,  (uint64_t)&protocol conformance descriptor for _LocaleAutoupdating);
  *(void *)&__int128 v16 = v4;
  *((void *)&v16 + 1) = v5;
  if (one-time initialization token for cache != -1) {
    swift_once();
  }
  uint64_t v6 = static CalendarCache.cache + 16;
  char v7 = (os_unfair_lock_s *)(static CalendarCache.cache + 60);
  swift_retain_n();
  os_unfair_lock_lock(v7);
  closure #1 in CalendarCache.autoupdatingCurrent.getter(v6, (uint64_t *)&v15);
  os_unfair_lock_unlock(v7);
  swift_release_n();
  if (one-time initialization token for cache != -1) {
    swift_once();
  }
  uint64_t v8 = static TimeZoneCache.cache + 16;
  __int16 v9 = (os_unfair_lock_s *)(static TimeZoneCache.cache + 144);
  swift_retain_n();
  os_unfair_lock_lock(v9);
  closure #1 in TimeZoneCache.autoupdatingCurrent()(v8, (uint64_t *)&v14);
  os_unfair_lock_unlock(v9);
  swift_release_n();
  uint64_t v10 = v14;
  uint64_t v11 = lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( &lazy protocol witness table cache variable for type _TimeZoneAutoupdating and conformance _TimeZoneAutoupdating,  (uint64_t (*)(uint64_t))type metadata accessor for _TimeZoneAutoupdating,  (uint64_t)&protocol conformance descriptor for _TimeZoneAutoupdating);
  *(void *)&__int128 v14 = v10;
  *((void *)&v14 + 1) = v11;
  return Date.IntervalFormatStyle.init(date:time:locale:calendar:timeZone:)( (uint64_t)&v19,  &v17,  &v16,  &v15,  &v14,  a1,  v12);
}

uint64_t Range<>.formatted()()
{
  uint64_t v1 = *v0;
  uint64_t v2 = v0[1];
  uint64_t v27 = 0LL;
  char v28 = 1;
  uint64_t v25 = 0LL;
  char v26 = 1;
  if (one-time initialization token for cache != -1) {
    swift_once();
  }
  uint64_t v3 = static LocaleCache.cache + 16;
  uint64_t v4 = (os_unfair_lock_s *)(static LocaleCache.cache + 124);
  swift_retain_n();
  os_unfair_lock_lock(v4);
  closure #1 in LocaleCache.autoupdatingCurrent.getter(v3, (uint64_t *)v29);
  os_unfair_lock_unlock(v4);
  swift_release_n();
  *(void *)&v12[0] = *(void *)&v29[0];
  *((void *)&v12[0] + 1) = lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( (unint64_t *)&lazy protocol witness table cache variable for type _LocaleAutoupdating and conformance _LocaleAutoupdating,  (uint64_t (*)(uint64_t))type metadata accessor for _LocaleAutoupdating,  (uint64_t)&protocol conformance descriptor for _LocaleAutoupdating);
  if (one-time initialization token for cache != -1) {
    swift_once();
  }
  uint64_t v5 = static CalendarCache.cache + 16;
  uint64_t v6 = (os_unfair_lock_s *)(static CalendarCache.cache + 60);
  swift_retain_n();
  os_unfair_lock_lock(v6);
  closure #1 in CalendarCache.autoupdatingCurrent.getter(v5, (uint64_t *)v29);
  os_unfair_lock_unlock(v6);
  swift_release_n();
  v24[0] = v29[0];
  if (one-time initialization token for cache != -1) {
    swift_once();
  }
  uint64_t v7 = static TimeZoneCache.cache + 16;
  uint64_t v8 = (os_unfair_lock_s *)(static TimeZoneCache.cache + 144);
  swift_retain_n();
  os_unfair_lock_lock(v8);
  closure #1 in TimeZoneCache.autoupdatingCurrent()(v7, (uint64_t *)v29);
  os_unfair_lock_unlock(v8);
  swift_release_n();
  *(void *)&__int128 v23 = *(void *)&v29[0];
  *((void *)&v23 + 1) = lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( &lazy protocol witness table cache variable for type _TimeZoneAutoupdating and conformance _TimeZoneAutoupdating,  (uint64_t (*)(uint64_t))type metadata accessor for _TimeZoneAutoupdating,  (uint64_t)&protocol conformance descriptor for _TimeZoneAutoupdating);
  Date.IntervalFormatStyle.init(date:time:locale:calendar:timeZone:)( (uint64_t)&v27,  &v25,  v12,  v24,  &v23,  (uint64_t)v29,  v9);
  v12[0] = v29[0];
  v12[1] = v29[1];
  v12[2] = v29[2];
  char v13 = v30;
  uint64_t v14 = v31;
  int v15 = v32;
  uint64_t v16 = v33;
  char v17 = v34;
  char v18 = v35;
  int v19 = v36;
  __int16 v20 = v37;
  uint64_t v21 = v38;
  __int16 v22 = v39;
  *(void *)&v24[0] = v1;
  *((void *)&v24[0] + 1) = v2;
  uint64_t v10 = Date.IntervalFormatStyle.format(_:)((double *)v24);
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  return v10;
}

uint64_t Range<>.formatted(date:time:)(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v4 = *v2;
  uint64_t v5 = v2[1];
  uint64_t v30 = *a1;
  char v31 = 0;
  uint64_t v28 = v3;
  char v29 = 0;
  if (one-time initialization token for cache != -1) {
    swift_once();
  }
  uint64_t v6 = static LocaleCache.cache + 16;
  uint64_t v7 = (os_unfair_lock_s *)(static LocaleCache.cache + 124);
  swift_retain_n();
  os_unfair_lock_lock(v7);
  closure #1 in LocaleCache.autoupdatingCurrent.getter(v6, (uint64_t *)v32);
  os_unfair_lock_unlock(v7);
  swift_release_n();
  *(void *)&v15[0] = *(void *)&v32[0];
  *((void *)&v15[0] + 1) = lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( (unint64_t *)&lazy protocol witness table cache variable for type _LocaleAutoupdating and conformance _LocaleAutoupdating,  (uint64_t (*)(uint64_t))type metadata accessor for _LocaleAutoupdating,  (uint64_t)&protocol conformance descriptor for _LocaleAutoupdating);
  if (one-time initialization token for cache != -1) {
    swift_once();
  }
  uint64_t v8 = static CalendarCache.cache + 16;
  int16x8_t v9 = (os_unfair_lock_s *)(static CalendarCache.cache + 60);
  swift_retain_n();
  os_unfair_lock_lock(v9);
  closure #1 in CalendarCache.autoupdatingCurrent.getter(v8, (uint64_t *)v32);
  os_unfair_lock_unlock(v9);
  swift_release_n();
  v27[0] = v32[0];
  if (one-time initialization token for cache != -1) {
    swift_once();
  }
  uint64_t v10 = static TimeZoneCache.cache + 16;
  uint64_t v11 = (os_unfair_lock_s *)(static TimeZoneCache.cache + 144);
  swift_retain_n();
  os_unfair_lock_lock(v11);
  closure #1 in TimeZoneCache.autoupdatingCurrent()(v10, (uint64_t *)v32);
  os_unfair_lock_unlock(v11);
  swift_release_n();
  *(void *)&__int128 v26 = *(void *)&v32[0];
  *((void *)&v26 + 1) = lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( &lazy protocol witness table cache variable for type _TimeZoneAutoupdating and conformance _TimeZoneAutoupdating,  (uint64_t (*)(uint64_t))type metadata accessor for _TimeZoneAutoupdating,  (uint64_t)&protocol conformance descriptor for _TimeZoneAutoupdating);
  Date.IntervalFormatStyle.init(date:time:locale:calendar:timeZone:)( (uint64_t)&v30,  &v28,  v15,  v27,  &v26,  (uint64_t)v32,  v12);
  v15[0] = v32[0];
  v15[1] = v32[1];
  v15[2] = v32[2];
  char v16 = v33;
  uint64_t v17 = v34;
  int v18 = v35;
  uint64_t v19 = v36;
  char v20 = v37;
  char v21 = v38;
  int v22 = v39;
  __int16 v23 = v40;
  uint64_t v24 = v41;
  __int16 v25 = v42;
  *(void *)&v27[0] = v4;
  *((void *)&v27[0] + 1) = v5;
  uint64_t v13 = Date.IntervalFormatStyle.format(_:)((double *)v27);
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  return v13;
}

uint64_t Range<>.formatted<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v5 = *v3;
  return (*(uint64_t (**)(__int128 *))(a3 + 48))(&v5);
}

BOOL specialized static Date.IntervalFormatStyle.== infix(_:_:)(__int128 *a1, __int128 *a2)
{
  __int128 v2 = a1[2];
  __int128 v3 = a1[4];
  __int128 v4 = a1[5];
  v15[0] = a1[3];
  v15[1] = v3;
  v15[2] = v4;
  __int16 v16 = *((_WORD *)a1 + 48);
  __int16 v18 = *((_WORD *)a2 + 48);
  __int128 v5 = a2[5];
  v17[1] = a2[4];
  void v17[2] = v5;
  __int128 v9 = a2[2];
  __int128 v10 = v2;
  v17[0] = a2[3];
  __int128 v6 = *a1;
  __int128 v11 = a2[1];
  __int128 v12 = a1[1];
  __int128 v13 = *a2;
  __int128 v14 = v6;
  BOOL v7 = (specialized static Locale.== infix(_:_:)((uint64_t)&v14, (uint64_t)&v13) & 1) != 0
    && (__int128 v13 = v11, v14 = v12, (specialized static TimeZone.== infix(_:_:)((uint64_t)&v14, (uint64_t)&v13) & 1) != 0)
    && (__int128 v13 = v9, v14 = v10, (specialized static Calendar.== infix(_:_:)((uint64_t)&v14, (uint64_t)&v13) & 1) != 0)
    && specialized static Date.FormatStyle.DateFieldCollection.== infix(_:_:)( (unsigned __int8 *)v15,  (unsigned __int8 *)v17);
  return v7;
}

unint64_t lazy protocol witness table accessor for type Date.IntervalFormatStyle.CodingKeys and conformance Date.IntervalFormatStyle.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type Date.IntervalFormatStyle.CodingKeys and conformance Date.IntervalFormatStyle.CodingKeys;
  if (!lazy protocol witness table cache variable for type Date.IntervalFormatStyle.CodingKeys and conformance Date.IntervalFormatStyle.CodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for Date.IntervalFormatStyle.CodingKeys,  &unk_189C7F6B8);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Date.IntervalFormatStyle.CodingKeys and conformance Date.IntervalFormatStyle.CodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type Date.IntervalFormatStyle.CodingKeys and conformance Date.IntervalFormatStyle.CodingKeys;
  if (!lazy protocol witness table cache variable for type Date.IntervalFormatStyle.CodingKeys and conformance Date.IntervalFormatStyle.CodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for Date.IntervalFormatStyle.CodingKeys,  &unk_189C7F6B8);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Date.IntervalFormatStyle.CodingKeys and conformance Date.IntervalFormatStyle.CodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type Date.IntervalFormatStyle.CodingKeys and conformance Date.IntervalFormatStyle.CodingKeys;
  if (!lazy protocol witness table cache variable for type Date.IntervalFormatStyle.CodingKeys and conformance Date.IntervalFormatStyle.CodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for Date.IntervalFormatStyle.CodingKeys,  &unk_189C7F6B8);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Date.IntervalFormatStyle.CodingKeys and conformance Date.IntervalFormatStyle.CodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type Date.IntervalFormatStyle.CodingKeys and conformance Date.IntervalFormatStyle.CodingKeys;
  if (!lazy protocol witness table cache variable for type Date.IntervalFormatStyle.CodingKeys and conformance Date.IntervalFormatStyle.CodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for Date.IntervalFormatStyle.CodingKeys,  &unk_189C7F6B8);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Date.IntervalFormatStyle.CodingKeys and conformance Date.IntervalFormatStyle.CodingKeys);
  }

  return result;
}

unint64_t lazy protocol witness table accessor for type Date.FormatStyle.DateFieldCollection and conformance Date.FormatStyle.DateFieldCollection()
{
  unint64_t result = lazy protocol witness table cache variable for type Date.FormatStyle.DateFieldCollection and conformance Date.FormatStyle.DateFieldCollection;
  if (!lazy protocol witness table cache variable for type Date.FormatStyle.DateFieldCollection and conformance Date.FormatStyle.DateFieldCollection)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for Date.FormatStyle.DateFieldCollection,  &type metadata for Date.FormatStyle.DateFieldCollection);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Date.FormatStyle.DateFieldCollection and conformance Date.FormatStyle.DateFieldCollection);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type Date.FormatStyle.DateFieldCollection and conformance Date.FormatStyle.DateFieldCollection;
  if (!lazy protocol witness table cache variable for type Date.FormatStyle.DateFieldCollection and conformance Date.FormatStyle.DateFieldCollection)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for Date.FormatStyle.DateFieldCollection,  &type metadata for Date.FormatStyle.DateFieldCollection);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Date.FormatStyle.DateFieldCollection and conformance Date.FormatStyle.DateFieldCollection);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type Date.FormatStyle.DateFieldCollection and conformance Date.FormatStyle.DateFieldCollection;
  if (!lazy protocol witness table cache variable for type Date.FormatStyle.DateFieldCollection and conformance Date.FormatStyle.DateFieldCollection)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for Date.FormatStyle.DateFieldCollection,  &type metadata for Date.FormatStyle.DateFieldCollection);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Date.FormatStyle.DateFieldCollection and conformance Date.FormatStyle.DateFieldCollection);
  }

  return result;
}

unint64_t instantiation function for generic protocol witness table for Date.IntervalFormatStyle( void *a1)
{
  a1[1] = lazy protocol witness table accessor for type Date.IntervalFormatStyle and conformance Date.IntervalFormatStyle();
  a1[2] = lazy protocol witness table accessor for type Date.IntervalFormatStyle and conformance Date.IntervalFormatStyle();
  unint64_t result = lazy protocol witness table accessor for type Date.IntervalFormatStyle and conformance Date.IntervalFormatStyle();
  a1[3] = result;
  return result;
}

uint64_t destroy for Date.IntervalFormatStyle()
{
  return swift_unknownObjectRelease();
}

uint64_t initializeWithCopy for Date.IntervalFormatStyle(uint64_t a1, __int128 *a2)
{
  __int128 v3 = *a2;
  __int128 v5 = a2[3];
  __int128 v4 = a2[1];
  *(_OWORD *)(a1 + 32) = a2[2];
  *(_OWORD *)(a1 + 48) = v5;
  __int128 v6 = a2[4];
  __int128 v7 = a2[5];
  *(_WORD *)(a1 + 96) = *((_WORD *)a2 + 48);
  *(_OWORD *)a1 = v3;
  *(_OWORD *)(a1 + 16) = v4;
  *(_OWORD *)(a1 + 64) = v6;
  *(_OWORD *)(a1 + 80) = v7;
  swift_unknownObjectRetain();
  swift_unknownObjectRetain();
  swift_unknownObjectRetain();
  return a1;
}

uint64_t assignWithCopy for Date.IntervalFormatStyle(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  *(void *)(a1 + 8) = v4;
  uint64_t v5 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  *(void *)(a1 + 24) = v5;
  uint64_t v6 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  *(void *)(a1 + 40) = v6;
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  uint64_t v7 = *(void *)(a2 + 56);
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  *(void *)(a1 + 56) = v7;
  *(_BYTE *)(a1 + 65) = *(_BYTE *)(a2 + 65);
  *(_BYTE *)(a1 + 66) = *(_BYTE *)(a2 + 66);
  *(_BYTE *)(a1 + 67) = *(_BYTE *)(a2 + 67);
  uint64_t v8 = *(void *)(a2 + 72);
  *(_WORD *)(a1 + 80) = *(_WORD *)(a2 + 80);
  *(void *)(a1 + 72) = v8;
  *(_BYTE *)(a1 + 82) = *(_BYTE *)(a2 + 82);
  *(_BYTE *)(a1 + 83) = *(_BYTE *)(a2 + 83);
  *(_BYTE *)(a1 + 84) = *(_BYTE *)(a2 + 84);
  *(_BYTE *)(a1 + 85) = *(_BYTE *)(a2 + 85);
  *(_BYTE *)(a1 + 86) = *(_BYTE *)(a2 + 86);
  *(_BYTE *)(a1 + 87) = *(_BYTE *)(a2 + 87);
  uint64_t v9 = *(void *)(a2 + 88);
  *(_BYTE *)(a1 + 96) = *(_BYTE *)(a2 + 96);
  *(void *)(a1 + 88) = v9;
  *(_BYTE *)(a1 + 97) = *(_BYTE *)(a2 + 97);
  return a1;
}

__n128 __swift_memcpy98_8(uint64_t a1, __int128 *a2)
{
  __int128 v2 = *a2;
  __int128 v3 = a2[2];
  *(_OWORD *)(a1 + 16) = a2[1];
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)a1 = v2;
  __n128 result = (__n128)a2[3];
  __int128 v5 = a2[4];
  __int128 v6 = a2[5];
  *(_WORD *)(a1 + 96) = *((_WORD *)a2 + 48);
  *(_OWORD *)(a1 + 64) = v5;
  *(_OWORD *)(a1 + 80) = v6;
  *(__n128 *)(a1 + 48) = result;
  return result;
}

uint64_t assignWithTake for Date.IntervalFormatStyle(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_unknownObjectRelease();
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  swift_unknownObjectRelease();
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(_WORD *)(a1 + 80) = *(_WORD *)(a2 + 80);
  *(_DWORD *)(a1 + 82) = *(_DWORD *)(a2 + 82);
  *(_WORD *)(a1 + 86) = *(_WORD *)(a2 + 86);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  *(_BYTE *)(a1 + 96) = *(_BYTE *)(a2 + 96);
  *(_BYTE *)(a1 + 97) = *(_BYTE *)(a2 + 97);
  return a1;
}

uint64_t getEnumTagSinglePayload for Date.IntervalFormatStyle(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0 && *((_BYTE *)a1 + 98)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for Date.IntervalFormatStyle(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 88) = 0LL;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_WORD *)(result + 96) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(_BYTE *)(result + 98) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)__n128 result = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 98) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for Date.IntervalFormatStyle()
{
  return &type metadata for Date.IntervalFormatStyle;
}

uint64_t storeEnumTagSinglePayload for Date.IntervalFormatStyle.CodingKeys( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFC) {
    return ((uint64_t (*)(void))((char *)&loc_183186394 + 4 * byte_1837ADF49[v4]))();
  }
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_1831863C8 + 4 * byte_1837ADF44[v4]))();
}

uint64_t sub_1831863C8(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1831863D0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x1831863D8LL);
  }
  return result;
}

uint64_t sub_1831863E4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x1831863ECLL);
  }
  *(_BYTE *)__n128 result = a2 + 3;
  return result;
}

uint64_t sub_1831863F0(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1831863F8(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

void *type metadata accessor for Date.IntervalFormatStyle.CodingKeys()
{
  return &unk_189C7F6B8;
}

uint64_t specialized Date.IntervalFormatStyle.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x656C61636F6CLL && a2 == 0xE600000000000000LL;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0LL;
  }

  else if (a1 == 0x656E6F5A656D6974LL && a2 == 0xE800000000000000LL {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1LL;
  }

  else if (a1 == 0x7261646E656C6163LL && a2 == 0xE800000000000000LL {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 2LL;
  }

  else if (a1 == 0x736C6F626D7973LL && a2 == 0xE700000000000000LL)
  {
    swift_bridgeObjectRelease();
    return 3LL;
  }

  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0) {
      return 3LL;
    }
    else {
      return 4LL;
    }
  }

Swift::String __swiftcall String._capitalized()()
{
  unint64_t v2 = v1;
  uint64_t v3 = v0;
  uint64_t v48 = *MEMORY[0x1895F89C0];
  uint64_t v44 = type metadata accessor for Unicode.Scalar.Properties();
  uint64_t v4 = *(void *)(v44 - 8);
  MEMORY[0x1895F8858](v44);
  char v6 = (char *)v39 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v46 = 0LL;
  unint64_t v47 = 0xE000000000000000LL;
  if ((v2 & 0x1000000000000000LL) != 0)
  {
    Swift::Int v8 = String.UTF8View._foreignCount()();
    BOOL v7 = (v2 & 0x2000000000000000LL) == 0;
  }

  else
  {
    BOOL v7 = (v2 & 0x2000000000000000LL) == 0;
    if ((v2 & 0x2000000000000000LL) != 0) {
      Swift::Int v8 = HIBYTE(v2) & 0xF;
    }
    else {
      Swift::Int v8 = v3 & 0xFFFFFFFFFFFFLL;
    }
  }

  MEMORY[0x186E1B64C](v8);
  uint64_t v42 = v3 & 0xFFFFFFFFFFFFLL;
  if (v7) {
    uint64_t v9 = v3 & 0xFFFFFFFFFFFFLL;
  }
  else {
    uint64_t v9 = HIBYTE(v2) & 0xF;
  }
  if (v9)
  {
    BOOL v43 = v7;
    uint64_t v40 = v2 & 0xFFFFFFFFFFFFFFLL;
    uint64_t v41 = HIBYTE(v2) & 0xF;
    v39[1] = (v2 & 0xFFFFFFFFFFFFFFFLL) + 32;
    swift_bridgeObjectRetain();
    char v10 = 0;
    uint64_t v11 = 0LL;
    uint64_t v12 = v3;
    while (1)
    {
      if ((v2 & 0x1000000000000000LL) != 0)
      {
        unsigned int v15 = _StringGuts.foreignErrorCorrectedScalar(startingAt:)();
      }

      else
      {
        if (v43)
        {
          if ((v3 & 0x1000000000000000LL) == 0) {
            _StringObject.sharedUTF8.getter();
          }
        }

        else
        {
          v45[0] = v3;
          v45[1] = v40;
        }

        unsigned int v15 = _decodeScalar(_:startingAt:)();
      }

      unsigned int v17 = v15;
      uint64_t v18 = v16;
      Unicode.Scalar.properties.getter();
      if (BYTE2(v17) > 1u)
      {
        if (BYTE2(v17) > 0xEu) {
          goto LABEL_38;
        }
      }

      else
      {
        uint64_t v19 = (uint64_t)*(&__CFUniCharUppercaseLetterCharacterSetBitmap_0 + BYTE2(v17));
        if (v19 && ((*(unsigned __int8 *)(v19 + ((unsigned __int16)v17 >> 3)) >> (v17 & 7)) & 1) != 0)
        {
          if ((v10 & 1) != 0)
          {
            uint64_t v13 = Unicode.Scalar.Properties.lowercaseMapping.getter();
          }

          else
          {
LABEL_30:
            if (v17 > 0x7F)
            {
              int v29 = (v17 & 0x3F) << 8;
              if (v17 >= 0x800)
              {
                int v34 = (v29 | (v17 >> 6) & 0x3F) << 8;
                int v35 = (((v34 | (v17 >> 12) & 0x3F) << 8) | (v17 >> 18)) - 2122219023;
                unsigned int v21 = (v34 | (v17 >> 12)) + 8487393;
                if (HIWORD(v17)) {
                  unsigned int v21 = v35;
                }
              }

              else
              {
                unsigned int v21 = (v29 | (v17 >> 6)) + 33217;
              }
            }

            else
            {
              unsigned int v21 = v17 + 1;
            }

            v45[0] = (v21 + 0xFEFEFEFEFEFEFFLL) & ~(-1LL << (8 * (4 - (__clz(v21) >> 3))));
            uint64_t v13 = MEMORY[0x186E1B6AC](v45);
          }

          goto LABEL_11;
        }

        uint64_t v20 = (uint64_t)*(&__CFUniCharLowercaseLetterCharacterSetBitmap_0 + BYTE2(v17));
        if (v20 && ((*(unsigned __int8 *)(v20 + ((unsigned __int16)v17 >> 3)) >> (v17 & 7)) & 1) != 0)
        {
          if ((v10 & 1) != 0) {
            goto LABEL_30;
          }
          uint64_t v13 = Unicode.Scalar.Properties.titlecaseMapping.getter();
LABEL_11:
          String.append(_:)(*(Swift::String *)&v13);
          char v10 = 1;
          goto LABEL_12;
        }
      }

      uint64_t v22 = (uint64_t)*(&__CFUniCharCaseIgnorableCharacterSetBitmap_0 + BYTE2(v17));
      if (!v22 || ((*(unsigned __int8 *)(v22 + ((unsigned __int16)v17 >> 3)) >> (v17 & 7)) & 1) == 0)
      {
LABEL_38:
        if (v17 > 0x7F)
        {
          int v27 = (v17 & 0x3F) << 8;
          if (v17 >= 0x800)
          {
            int v30 = (v27 | (v17 >> 6) & 0x3F) << 8;
            int v31 = (((v30 | (v17 >> 12) & 0x3F) << 8) | (v17 >> 18)) - 2122219023;
            unsigned int v25 = (v30 | (v17 >> 12)) + 8487393;
            if (HIWORD(v17)) {
              unsigned int v25 = v31;
            }
          }

          else
          {
            unsigned int v25 = (v27 | (v17 >> 6)) + 33217;
          }
        }

        else
        {
          unsigned int v25 = v17 + 1;
        }

        v45[0] = (v25 + 0xFEFEFEFEFEFEFFLL) & ~(-1LL << (8 * (4 - (__clz(v25) >> 3))));
        v26._uint64_t countAndFlagsBits = MEMORY[0x186E1B6AC](v45);
        String.append(_:)(v26);
        char v10 = 0;
        goto LABEL_12;
      }

      if (v17 > 0x7F)
      {
        int v28 = (v17 & 0x3F) << 8;
        if (v17 >= 0x800)
        {
          int v32 = (v28 | (v17 >> 6) & 0x3F) << 8;
          int v33 = (((v32 | (v17 >> 12) & 0x3F) << 8) | (v17 >> 18)) - 2122219023;
          unsigned int v23 = (v32 | (v17 >> 12)) + 8487393;
          if (HIWORD(v17)) {
            unsigned int v23 = v33;
          }
        }

        else
        {
          unsigned int v23 = (v28 | (v17 >> 6)) + 33217;
        }
      }

      else
      {
        unsigned int v23 = v17 + 1;
      }

      v45[0] = (v23 + 0xFEFEFEFEFEFEFFLL) & ~(-1LL << (8 * (4 - (__clz(v23) >> 3))));
      v24._uint64_t countAndFlagsBits = MEMORY[0x186E1B6AC](v45);
      String.append(_:)(v24);
LABEL_12:
      v11 += v18;
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v44);
      uint64_t v3 = v12;
      if (v11 >= v9)
      {
        swift_bridgeObjectRelease();
        break;
      }
    }
  }

  uint64_t v36 = v46;
  char v37 = (void *)v47;
  result._unint64_t object = v37;
  result._uint64_t countAndFlagsBits = v36;
  return result;
}

uint64_t specialized == infix<A>(_:_:)(char a1, char a2)
{
  if (qword_1837BCB68[a1] == qword_1837BCB68[a2]) {
    char v2 = 1;
  }
  else {
    char v2 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease_n();
  return v2 & 1;
}

{
  BOOL v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char v7;
  char v2 = (a1 & 1) == 0;
  if ((a1 & 1) != 0) {
    uint64_t v3 = 2577447LL;
  }
  else {
    uint64_t v3 = 32LL;
  }
  if (v2) {
    uint64_t v4 = 0xE100000000000000LL;
  }
  else {
    uint64_t v4 = 0xE300000000000000LL;
  }
  if ((a2 & 1) != 0) {
    uint64_t v5 = 2577447LL;
  }
  else {
    uint64_t v5 = 32LL;
  }
  if ((a2 & 1) != 0) {
    char v6 = 0xE300000000000000LL;
  }
  else {
    char v6 = 0xE100000000000000LL;
  }
  if (v3 == v5 && v4 == v6) {
    BOOL v7 = 1;
  }
  else {
    BOOL v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v7 & 1;
}

{
  BOOL v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char v7;
  char v2 = (a1 & 1) == 0;
  if ((a1 & 1) != 0) {
    uint64_t v3 = 0LL;
  }
  else {
    uint64_t v3 = 45LL;
  }
  if (v2) {
    uint64_t v4 = 0xE100000000000000LL;
  }
  else {
    uint64_t v4 = 0xE000000000000000LL;
  }
  if ((a2 & 1) != 0) {
    uint64_t v5 = 0LL;
  }
  else {
    uint64_t v5 = 45LL;
  }
  if ((a2 & 1) != 0) {
    char v6 = 0xE000000000000000LL;
  }
  else {
    char v6 = 0xE100000000000000LL;
  }
  if (v3 == v5 && v4 == v6) {
    BOOL v7 = 1;
  }
  else {
    BOOL v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v7 & 1;
}

{
  BOOL v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char v7;
  char v2 = (a1 & 1) == 0;
  if ((a1 & 1) != 0) {
    uint64_t v3 = 0LL;
  }
  else {
    uint64_t v3 = 58LL;
  }
  if (v2) {
    uint64_t v4 = 0xE100000000000000LL;
  }
  else {
    uint64_t v4 = 0xE000000000000000LL;
  }
  if ((a2 & 1) != 0) {
    uint64_t v5 = 0LL;
  }
  else {
    uint64_t v5 = 58LL;
  }
  if ((a2 & 1) != 0) {
    char v6 = 0xE000000000000000LL;
  }
  else {
    char v6 = 0xE100000000000000LL;
  }
  if (v3 == v5 && v4 == v6) {
    BOOL v7 = 1;
  }
  else {
    BOOL v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v7 & 1;
}

{
  BOOL v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char v7;
  char v2 = (a1 & 1) == 0;
  if ((a1 & 1) != 0) {
    uint64_t v3 = 110LL;
  }
  else {
    uint64_t v3 = 0x7961646B656577LL;
  }
  if (v2) {
    uint64_t v4 = 0xE700000000000000LL;
  }
  else {
    uint64_t v4 = 0xE100000000000000LL;
  }
  if ((a2 & 1) != 0) {
    uint64_t v5 = 110LL;
  }
  else {
    uint64_t v5 = 0x7961646B656577LL;
  }
  if ((a2 & 1) != 0) {
    char v6 = 0xE100000000000000LL;
  }
  else {
    char v6 = 0xE700000000000000LL;
  }
  if (v3 == v5 && v4 == v6) {
    BOOL v7 = 1;
  }
  else {
    BOOL v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v7 & 1;
}

{
  BOOL v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char v7;
  char v2 = (a1 & 1) == 0;
  if ((a1 & 1) != 0) {
    uint64_t v3 = 1885431148LL;
  }
  else {
    uint64_t v3 = 0x68746E6F6DLL;
  }
  if (v2) {
    uint64_t v4 = 0xE500000000000000LL;
  }
  else {
    uint64_t v4 = 0xE400000000000000LL;
  }
  if ((a2 & 1) != 0) {
    uint64_t v5 = 1885431148LL;
  }
  else {
    uint64_t v5 = 0x68746E6F6DLL;
  }
  if ((a2 & 1) != 0) {
    char v6 = 0xE400000000000000LL;
  }
  else {
    char v6 = 0xE500000000000000LL;
  }
  if (v3 == v5 && v4 == v6) {
    BOOL v7 = 1;
  }
  else {
    BOOL v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v7 & 1;
}

{
  uint64_t v2;
  uint64_t v3;
  char v4;
  if ((a1 & 1) != 0) {
    char v2 = 0x6C69746E75LL;
  }
  else {
    char v2 = 0x746E756F63LL;
  }
  if ((a2 & 1) != 0) {
    uint64_t v3 = 0x6C69746E75LL;
  }
  else {
    uint64_t v3 = 0x746E756F63LL;
  }
  if (v2 == v3) {
    uint64_t v4 = 1;
  }
  else {
    uint64_t v4 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease_n();
  return v4 & 1;
}

{
  BOOL v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char v7;
  char v2 = (a1 & 1) == 0;
  if ((a1 & 1) != 0) {
    uint64_t v3 = 28013LL;
  }
  else {
    uint64_t v3 = 109LL;
  }
  if (v2) {
    uint64_t v4 = 0xE100000000000000LL;
  }
  else {
    uint64_t v4 = 0xE200000000000000LL;
  }
  if ((a2 & 1) != 0) {
    uint64_t v5 = 28013LL;
  }
  else {
    uint64_t v5 = 109LL;
  }
  if ((a2 & 1) != 0) {
    char v6 = 0xE200000000000000LL;
  }
  else {
    char v6 = 0xE100000000000000LL;
  }
  if (v3 == v5 && v4 == v6) {
    BOOL v7 = 1;
  }
  else {
    BOOL v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v7 & 1;
}

{
  BOOL v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char v7;
  char v2 = (a1 & 1) == 0;
  if ((a1 & 1) != 0) {
    uint64_t v3 = 29555LL;
  }
  else {
    uint64_t v3 = 115LL;
  }
  if (v2) {
    uint64_t v4 = 0xE100000000000000LL;
  }
  else {
    uint64_t v4 = 0xE200000000000000LL;
  }
  if ((a2 & 1) != 0) {
    uint64_t v5 = 29555LL;
  }
  else {
    uint64_t v5 = 115LL;
  }
  if ((a2 & 1) != 0) {
    char v6 = 0xE200000000000000LL;
  }
  else {
    char v6 = 0xE100000000000000LL;
  }
  if (v3 == v5 && v4 == v6) {
    BOOL v7 = 1;
  }
  else {
    BOOL v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v7 & 1;
}

{
  char v2;
  if (qword_1837BCBA0[a1] == qword_1837BCBA0[a2]) {
    char v2 = 1;
  }
  else {
    char v2 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease_n();
  return v2 & 1;
}

{
  BOOL v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char v7;
  char v2 = (a1 & 1) == 0;
  if ((a1 & 1) != 0) {
    uint64_t v3 = 0x7475626972747461LL;
  }
  else {
    uint64_t v3 = 1936618866LL;
  }
  if (v2) {
    uint64_t v4 = 0xE400000000000000LL;
  }
  else {
    uint64_t v4 = 0xEE00656C62615465LL;
  }
  if ((a2 & 1) != 0) {
    uint64_t v5 = 0x7475626972747461LL;
  }
  else {
    uint64_t v5 = 1936618866LL;
  }
  if ((a2 & 1) != 0) {
    char v6 = 0xEE00656C62615465LL;
  }
  else {
    char v6 = 0xE400000000000000LL;
  }
  if (v3 == v5 && v4 == v6) {
    BOOL v7 = 1;
  }
  else {
    BOOL v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v7 & 1;
}

uint64_t specialized == infix<A>(_:_:)(unsigned __int8 a1, unsigned __int8 a2)
{
  int v2 = a1;
  if (a1)
  {
    if (a1 == 1) {
      uint64_t v3 = 0x696C61636F4C7369LL;
    }
    else {
      uint64_t v3 = 0x726564726FLL;
    }
    if (v2 == 1) {
      unint64_t v4 = 0xEB0000000064657ALL;
    }
    else {
      unint64_t v4 = 0xE500000000000000LL;
    }
    int v5 = a2;
    if (a2)
    {
LABEL_9:
      if (v5 == 1) {
        uint64_t v6 = 0x696C61636F4C7369LL;
      }
      else {
        uint64_t v6 = 0x726564726FLL;
      }
      if (v5 == 1) {
        unint64_t v7 = 0xEB0000000064657ALL;
      }
      else {
        unint64_t v7 = 0xE500000000000000LL;
      }
      if (v3 != v6) {
        goto LABEL_21;
      }
      goto LABEL_19;
    }
  }

  else
  {
    unint64_t v4 = 0xE700000000000000LL;
    uint64_t v3 = 0x736E6F6974706FLL;
    int v5 = a2;
    if (a2) {
      goto LABEL_9;
    }
  }

  unint64_t v7 = 0xE700000000000000LL;
  if (v3 != 0x736E6F6974706FLL)
  {
LABEL_21:
    char v8 = _stringCompareWithSmolCheck(_:_:expecting:)();
    goto LABEL_22;
  }

{
  int v2;
  uint64_t v3;
  unint64_t v4;
  int v5;
  uint64_t v6;
  unint64_t v7;
  char v8;
  int v2 = a1;
  if (a1)
  {
    if (a1 == 1) {
      uint64_t v3 = 0x656C61636F6CLL;
    }
    else {
      uint64_t v3 = 0x726564726FLL;
    }
    if (v2 == 1) {
      unint64_t v4 = 0xE600000000000000LL;
    }
    else {
      unint64_t v4 = 0xE500000000000000LL;
    }
    int v5 = a2;
    if (a2)
    {
LABEL_9:
      if (v5 == 1) {
        uint64_t v6 = 0x656C61636F6CLL;
      }
      else {
        uint64_t v6 = 0x726564726FLL;
      }
      if (v5 == 1) {
        unint64_t v7 = 0xE600000000000000LL;
      }
      else {
        unint64_t v7 = 0xE500000000000000LL;
      }
      if (v3 != v6) {
        goto LABEL_21;
      }
      goto LABEL_19;
    }
  }

  else
  {
    unint64_t v4 = 0xE700000000000000LL;
    uint64_t v3 = 0x736E6F6974706FLL;
    int v5 = a2;
    if (a2) {
      goto LABEL_9;
    }
  }

  unint64_t v7 = 0xE700000000000000LL;
  if (v3 != 0x736E6F6974706FLL)
  {
LABEL_21:
    char v8 = _stringCompareWithSmolCheck(_:_:expecting:)();
    goto LABEL_22;
  }

{
  int v2;
  uint64_t v3;
  unint64_t v4;
  int v5;
  uint64_t v6;
  unint64_t v7;
  char v8;
  int v2 = a1;
  if (a1)
  {
    if (a1 == 1) {
      uint64_t v3 = 1195853639LL;
    }
    else {
      uint64_t v3 = 0x4747474747LL;
    }
    if (v2 == 1) {
      unint64_t v4 = 0xE400000000000000LL;
    }
    else {
      unint64_t v4 = 0xE500000000000000LL;
    }
    int v5 = a2;
    if (a2)
    {
LABEL_9:
      if (v5 == 1) {
        uint64_t v6 = 1195853639LL;
      }
      else {
        uint64_t v6 = 0x4747474747LL;
      }
      if (v5 == 1) {
        unint64_t v7 = 0xE400000000000000LL;
      }
      else {
        unint64_t v7 = 0xE500000000000000LL;
      }
      if (v3 != v6) {
        goto LABEL_21;
      }
      goto LABEL_19;
    }
  }

  else
  {
    unint64_t v4 = 0xE100000000000000LL;
    uint64_t v3 = 71LL;
    int v5 = a2;
    if (a2) {
      goto LABEL_9;
    }
  }

  unint64_t v7 = 0xE100000000000000LL;
  if (v3 != 71)
  {
LABEL_21:
    char v8 = _stringCompareWithSmolCheck(_:_:expecting:)();
    goto LABEL_22;
  }

{
  int v2;
  uint64_t v3;
  unint64_t v4;
  int v5;
  uint64_t v6;
  unint64_t v7;
  char v8;
  int v2 = a1;
  if (a1)
  {
    if (a1 == 1) {
      uint64_t v3 = 1431655765LL;
    }
    else {
      uint64_t v3 = 0x5555555555LL;
    }
    if (v2 == 1) {
      unint64_t v4 = 0xE400000000000000LL;
    }
    else {
      unint64_t v4 = 0xE500000000000000LL;
    }
    int v5 = a2;
    if (a2)
    {
LABEL_9:
      if (v5 == 1) {
        uint64_t v6 = 1431655765LL;
      }
      else {
        uint64_t v6 = 0x5555555555LL;
      }
      if (v5 == 1) {
        unint64_t v7 = 0xE400000000000000LL;
      }
      else {
        unint64_t v7 = 0xE500000000000000LL;
      }
      if (v3 != v6) {
        goto LABEL_21;
      }
      goto LABEL_19;
    }
  }

  else
  {
    unint64_t v4 = 0xE100000000000000LL;
    uint64_t v3 = 85LL;
    int v5 = a2;
    if (a2) {
      goto LABEL_9;
    }
  }

  unint64_t v7 = 0xE100000000000000LL;
  if (v3 != 85)
  {
LABEL_21:
    char v8 = _stringCompareWithSmolCheck(_:_:expecting:)();
    goto LABEL_22;
  }

{
  int v2;
  uint64_t v3;
  unint64_t v4;
  int v5;
  uint64_t v6;
  unint64_t v7;
  char v8;
  int v2 = a1;
  if (a1)
  {
    if (a1 == 1) {
      uint64_t v3 = 30583LL;
    }
    else {
      uint64_t v3 = 87LL;
    }
    if (v2 == 1) {
      unint64_t v4 = 0xE200000000000000LL;
    }
    else {
      unint64_t v4 = 0xE100000000000000LL;
    }
    int v5 = a2;
    if (a2)
    {
LABEL_9:
      if (v5 == 1) {
        uint64_t v6 = 30583LL;
      }
      else {
        uint64_t v6 = 87LL;
      }
      if (v5 == 1) {
        unint64_t v7 = 0xE200000000000000LL;
      }
      else {
        unint64_t v7 = 0xE100000000000000LL;
      }
      if (v3 != v6) {
        goto LABEL_21;
      }
      goto LABEL_19;
    }
  }

  else
  {
    unint64_t v4 = 0xE100000000000000LL;
    uint64_t v3 = 119LL;
    int v5 = a2;
    if (a2) {
      goto LABEL_9;
    }
  }

  unint64_t v7 = 0xE100000000000000LL;
  if (v3 != 119)
  {
LABEL_21:
    char v8 = _stringCompareWithSmolCheck(_:_:expecting:)();
    goto LABEL_22;
  }

{
  int v2;
  uint64_t v3;
  unint64_t v4;
  int v5;
  uint64_t v6;
  unint64_t v7;
  char v8;
  int v2 = a1;
  if (a1)
  {
    if (a1 == 1) {
      uint64_t v3 = 17476LL;
    }
    else {
      uint64_t v3 = 4473924LL;
    }
    if (v2 == 1) {
      unint64_t v4 = 0xE200000000000000LL;
    }
    else {
      unint64_t v4 = 0xE300000000000000LL;
    }
    int v5 = a2;
    if (a2)
    {
LABEL_9:
      if (v5 == 1) {
        uint64_t v6 = 17476LL;
      }
      else {
        uint64_t v6 = 4473924LL;
      }
      if (v5 == 1) {
        unint64_t v7 = 0xE200000000000000LL;
      }
      else {
        unint64_t v7 = 0xE300000000000000LL;
      }
      if (v3 != v6) {
        goto LABEL_21;
      }
      goto LABEL_19;
    }
  }

  else
  {
    unint64_t v4 = 0xE100000000000000LL;
    uint64_t v3 = 68LL;
    int v5 = a2;
    if (a2) {
      goto LABEL_9;
    }
  }

  unint64_t v7 = 0xE100000000000000LL;
  if (v3 != 68)
  {
LABEL_21:
    char v8 = _stringCompareWithSmolCheck(_:_:expecting:)();
    goto LABEL_22;
  }

void specialized == infix<A>(_:_:)(char a1)
{
  __asm { BR              X10 }

{
  __asm { BR              X11 }

{
  __asm { BR              X10 }

{
  __asm { BR              X10 }

{
  __asm { BR              X10 }

{
  __asm { BR              X10 }

{
  __asm { BR              X10 }

{
  __asm { BR              X10 }

{
  __asm { BR              X10 }

{
  __asm { BR              X10 }

{
  __asm { BR              X10 }

{
  __asm { BR              X10 }

{
  __asm { BR              X11 }

uint64_t sub_183187194(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_183187234 + 4 * byte_1837BC186[a2]))(0x7974537374696E75LL);
}

uint64_t sub_183187234(uint64_t a1)
{
  if (a1 == 0x7974537374696E75LL && v1 == 0xEA0000000000656CLL) {
    char v2 = 1;
  }
  else {
    char v2 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v2 & 1;
}

uint64_t sub_183187374(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_183187410 + 4 * byte_1837BC193[a2]))(0x656E6F5A656D6974LL);
}

uint64_t sub_183187410(uint64_t a1)
{
  if (a1 == 0x656E6F5A656D6974LL && v1 == 0xE800000000000000LL) {
    char v2 = 1;
  }
  else {
    char v2 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v2 & 1;
}

uint64_t specialized == infix<A>(_:_:)(uint64_t a1, char a2, uint64_t a3, char a4)
{
  if ((a2 & 1) != 0)
  {
    if (a1) {
      uint64_t v8 = 22873LL;
    }
    else {
      uint64_t v8 = 89LL;
    }
    if (a1) {
      unint64_t v10 = 0xE200000000000000LL;
    }
    else {
      unint64_t v10 = 0xE100000000000000LL;
    }
    if ((a4 & 1) != 0) {
      goto LABEL_8;
    }
LABEL_23:
    uint64_t v13 = 10LL;
    if (a3 < 10) {
      uint64_t v13 = a3;
    }
    if (v13 <= 1) {
      uint64_t v14 = 1LL;
    }
    else {
      uint64_t v14 = v13;
    }
    uint64_t v15 = MEMORY[0x186E1B904](89LL, 0xE100000000000000LL, v14);
    unint64_t v12 = v16;
    if (v8 != v15) {
      goto LABEL_31;
    }
    goto LABEL_29;
  }

  uint64_t v6 = 10LL;
  if (a1 < 10) {
    uint64_t v6 = a1;
  }
  if (v6 <= 1) {
    uint64_t v7 = 1LL;
  }
  else {
    uint64_t v7 = v6;
  }
  uint64_t v8 = MEMORY[0x186E1B904](89LL, 0xE100000000000000LL, v7);
  unint64_t v10 = v9;
  if ((a4 & 1) == 0) {
    goto LABEL_23;
  }
LABEL_8:
  if (a3) {
    uint64_t v11 = 22873LL;
  }
  else {
    uint64_t v11 = 89LL;
  }
  if (a3) {
    unint64_t v12 = 0xE200000000000000LL;
  }
  else {
    unint64_t v12 = 0xE100000000000000LL;
  }
  if (v8 != v11) {
    goto LABEL_31;
  }
LABEL_29:
  if (v10 != v12)
  {
LABEL_31:
    char v17 = _stringCompareWithSmolCheck(_:_:expecting:)();
    goto LABEL_32;
  }

  char v17 = 1;
LABEL_32:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v17 & 1;
}

{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char v21;
  if ((a2 & 1) == 0)
  {
    uint64_t v6 = 10LL;
    if (a1 < 10) {
      uint64_t v6 = a1;
    }
    if (v6 <= 1) {
      uint64_t v7 = 1LL;
    }
    else {
      uint64_t v7 = v6;
    }
    uint64_t v8 = MEMORY[0x186E1B904](103LL, 0xE100000000000000LL, v7);
    unint64_t v10 = v9;
    if ((a4 & 1) != 0) {
      goto LABEL_8;
    }
LABEL_27:
    char v17 = 10LL;
    if (a3 < 10) {
      char v17 = a3;
    }
    if (v17 <= 1) {
      uint64_t v18 = 1LL;
    }
    else {
      uint64_t v18 = v17;
    }
    uint64_t v19 = MEMORY[0x186E1B904](103LL, 0xE100000000000000LL, v18);
    uint64_t v14 = v20;
    if (v8 != v19) {
      goto LABEL_35;
    }
    goto LABEL_33;
  }

  uint64_t v15 = 0xE200000000000000LL;
  unint64_t v16 = 25700LL;
  if (a1 != 1)
  {
    unint64_t v16 = 70LL;
    uint64_t v15 = 0xE100000000000000LL;
  }

  if (a1) {
    uint64_t v8 = v16;
  }
  else {
    uint64_t v8 = 100LL;
  }
  if (a1) {
    unint64_t v10 = v15;
  }
  else {
    unint64_t v10 = 0xE100000000000000LL;
  }
  if ((a4 & 1) == 0) {
    goto LABEL_27;
  }
LABEL_8:
  uint64_t v11 = 0xE200000000000000LL;
  unint64_t v12 = 25700LL;
  if (a3 != 1)
  {
    unint64_t v12 = 70LL;
    uint64_t v11 = 0xE100000000000000LL;
  }

  if (a3) {
    uint64_t v13 = v12;
  }
  else {
    uint64_t v13 = 100LL;
  }
  if (a3) {
    uint64_t v14 = v11;
  }
  else {
    uint64_t v14 = 0xE100000000000000LL;
  }
  if (v8 != v13) {
    goto LABEL_35;
  }
LABEL_33:
  if (v10 != v14)
  {
LABEL_35:
    unsigned int v21 = _stringCompareWithSmolCheck(_:_:expecting:)();
    goto LABEL_36;
  }

  unsigned int v21 = 1;
LABEL_36:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v21 & 1;
}

{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  Swift::String v9;
  Swift::String v10;
  Swift::String v11;
  Swift::String v12;
  Swift::String v13;
  Swift::String v14;
  Swift::String v15;
  Swift::String v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  Swift::String v20;
  Swift::String v21;
  Swift::String v22;
  Swift::String v23;
  Swift::String v24;
  Swift::String v25;
  Swift::String v26;
  Swift::String v27;
  char v28;
  if ((a2 & 1) != 0) {
    uint64_t v6 = 65LL;
  }
  else {
    uint64_t v6 = 83LL;
  }
  if (a1 <= 1) {
    uint64_t v7 = 1LL;
  }
  else {
    uint64_t v7 = a1;
  }
  if (v7 >= 9) {
    uint64_t v8 = 9LL;
  }
  else {
    uint64_t v8 = v7;
  }
  if (v8 != 1)
  {
    swift_bridgeObjectRetain_n();
    v9._uint64_t countAndFlagsBits = v6;
    v9._unint64_t object = (void *)0xE100000000000000LL;
    String.append(_:)(v9);
    swift_bridgeObjectRelease();
    if (v8 != 2)
    {
      swift_bridgeObjectRetain();
      v10._uint64_t countAndFlagsBits = v6;
      v10._unint64_t object = (void *)0xE100000000000000LL;
      String.append(_:)(v10);
      swift_bridgeObjectRelease();
      if (v8 != 3)
      {
        swift_bridgeObjectRetain();
        v11._uint64_t countAndFlagsBits = v6;
        v11._unint64_t object = (void *)0xE100000000000000LL;
        String.append(_:)(v11);
        swift_bridgeObjectRelease();
        if (v8 != 4)
        {
          swift_bridgeObjectRetain();
          v12._uint64_t countAndFlagsBits = v6;
          v12._unint64_t object = (void *)0xE100000000000000LL;
          String.append(_:)(v12);
          swift_bridgeObjectRelease();
          if (v8 != 5)
          {
            swift_bridgeObjectRetain();
            v13._uint64_t countAndFlagsBits = v6;
            v13._unint64_t object = (void *)0xE100000000000000LL;
            String.append(_:)(v13);
            swift_bridgeObjectRelease();
            if (v8 != 6)
            {
              swift_bridgeObjectRetain();
              v14._uint64_t countAndFlagsBits = v6;
              v14._unint64_t object = (void *)0xE100000000000000LL;
              String.append(_:)(v14);
              swift_bridgeObjectRelease();
              if (v8 != 7)
              {
                swift_bridgeObjectRetain();
                v15._uint64_t countAndFlagsBits = v6;
                v15._unint64_t object = (void *)0xE100000000000000LL;
                String.append(_:)(v15);
                swift_bridgeObjectRelease();
                if (v8 != 8)
                {
                  swift_bridgeObjectRetain();
                  v16._uint64_t countAndFlagsBits = v6;
                  v16._unint64_t object = (void *)0xE100000000000000LL;
                  String.append(_:)(v16);
                  swift_bridgeObjectRelease();
                }
              }
            }
          }
        }
      }
    }

    swift_bridgeObjectRelease();
  }

  if ((a4 & 1) != 0) {
    char v17 = 65LL;
  }
  else {
    char v17 = 83LL;
  }
  if (a3 <= 1) {
    uint64_t v18 = 1LL;
  }
  else {
    uint64_t v18 = a3;
  }
  if (v18 >= 9) {
    uint64_t v19 = 9LL;
  }
  else {
    uint64_t v19 = v18;
  }
  if (v19 != 1)
  {
    swift_bridgeObjectRetain_n();
    v20._uint64_t countAndFlagsBits = v17;
    v20._unint64_t object = (void *)0xE100000000000000LL;
    String.append(_:)(v20);
    swift_bridgeObjectRelease();
    if (v19 != 2)
    {
      swift_bridgeObjectRetain();
      v21._uint64_t countAndFlagsBits = v17;
      v21._unint64_t object = (void *)0xE100000000000000LL;
      String.append(_:)(v21);
      swift_bridgeObjectRelease();
      if (v19 != 3)
      {
        swift_bridgeObjectRetain();
        v22._uint64_t countAndFlagsBits = v17;
        v22._unint64_t object = (void *)0xE100000000000000LL;
        String.append(_:)(v22);
        swift_bridgeObjectRelease();
        if (v19 != 4)
        {
          swift_bridgeObjectRetain();
          v23._uint64_t countAndFlagsBits = v17;
          v23._unint64_t object = (void *)0xE100000000000000LL;
          String.append(_:)(v23);
          swift_bridgeObjectRelease();
          if (v19 != 5)
          {
            swift_bridgeObjectRetain();
            v24._uint64_t countAndFlagsBits = v17;
            v24._unint64_t object = (void *)0xE100000000000000LL;
            String.append(_:)(v24);
            swift_bridgeObjectRelease();
            if (v19 != 6)
            {
              swift_bridgeObjectRetain();
              v25._uint64_t countAndFlagsBits = v17;
              v25._unint64_t object = (void *)0xE100000000000000LL;
              String.append(_:)(v25);
              swift_bridgeObjectRelease();
              if (v19 != 7)
              {
                swift_bridgeObjectRetain();
                v26._uint64_t countAndFlagsBits = v17;
                v26._unint64_t object = (void *)0xE100000000000000LL;
                String.append(_:)(v26);
                swift_bridgeObjectRelease();
                if (v19 != 8)
                {
                  swift_bridgeObjectRetain();
                  v27._uint64_t countAndFlagsBits = v17;
                  v27._unint64_t object = (void *)0xE100000000000000LL;
                  String.append(_:)(v27);
                  swift_bridgeObjectRelease();
                }
              }
            }
          }
        }
      }
    }

    swift_bridgeObjectRelease();
  }

  if (v6 == v17) {
    int v28 = 1;
  }
  else {
    int v28 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v28 & 1;
}

uint64_t sub_183187800(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_183187860 + 4 * byte_1837BC19F[a2]))(20817LL);
}

uint64_t sub_183187860(uint64_t a1)
{
  if (a1 == 20817 && v1 == 0xE200000000000000LL) {
    char v2 = 1;
  }
  else {
    char v2 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v2 & 1;
}

uint64_t sub_18318793C(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_18318799C + 4 * byte_1837BC1A9[a2]))(29041LL);
}

uint64_t sub_18318799C(uint64_t a1)
{
  if (a1 == 29041 && v1 == 0xE200000000000000LL) {
    char v2 = 1;
  }
  else {
    char v2 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v2 & 1;
}

uint64_t sub_183187A78(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_183187AD8 + 4 * byte_1837BC1B3[a2]))(19789LL);
}

uint64_t sub_183187AD8(uint64_t a1)
{
  if (a1 == 19789 && v1 == 0xE200000000000000LL) {
    char v2 = 1;
  }
  else {
    char v2 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v2 & 1;
}

uint64_t sub_183187BB4(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_183187C14 + 4 * byte_1837BC1BD[a2]))(19532LL);
}

uint64_t sub_183187C14(uint64_t a1)
{
  if (a1 == 19532 && v1 == 0xE200000000000000LL) {
    char v2 = 1;
  }
  else {
    char v2 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v2 & 1;
}

uint64_t sub_183187FD8(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_183188044 + 4 * byte_1837BC1C8[a2]))(1162167621LL);
}

uint64_t sub_183188044(uint64_t a1)
{
  if (a1 == 1162167621 && v1 == 0xE400000000000000LL) {
    char v2 = 1;
  }
  else {
    char v2 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v2 & 1;
}

uint64_t sub_183188138(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_1831881A0 + 4 * byte_1837BC1D3[a2]))(6513507LL);
}

uint64_t sub_1831881A0(uint64_t a1)
{
  if (a1 == 6513507 && v1 == 0xE300000000000000LL) {
    char v2 = 1;
  }
  else {
    char v2 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v2 & 1;
}

uint64_t sub_183188284(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_183188320 + 4 * byte_1837BC1E1[a2]))(1633771873LL);
}

uint64_t sub_183188320(uint64_t a1)
{
  if (a1 == 1633771873 && v1 == 0xE400000000000000LL) {
    char v2 = 1;
  }
  else {
    char v2 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v2 & 1;
}

uint64_t sub_1831888F0(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_183188958 + 4 * byte_1837BC1F2[a2]))(26728LL);
}

uint64_t sub_183188958(uint64_t a1)
{
  if (a1 == 26728 && v1 == 0xE200000000000000LL) {
    char v2 = 1;
  }
  else {
    char v2 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v2 & 1;
}

BOOL specialized == infix<A>(_:_:)(char a1, char a2)
{
  return byte_1837BCBC0[a1] == byte_1837BCBC0[a2];
}

uint64_t sub_183188BA8(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_183188C4C + 4 * byte_1837BC201[a2]))(0x614E796C696D6166LL);
}

uint64_t sub_183188C4C(uint64_t a1)
{
  if (a1 == 0x614E796C696D6166LL && v1 == 0xEA0000000000656DLL) {
    char v2 = 1;
  }
  else {
    char v2 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v2 & 1;
}

uint64_t sub_183188D9C(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_183188DF4 + 4 * byte_1837BC20C[a2]))(0x65676175676E616CLL);
}

uint64_t sub_183188DF4(uint64_t a1)
{
  if (a1 == 0x65676175676E616CLL && v1 == 0xE800000000000000LL) {
    char v2 = 1;
  }
  else {
    char v2 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v2 & 1;
}

uint64_t sub_183188EE0(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_183188FEC + 4 * byte_1837BC219[a2]))(0x6974616D6D617267LL);
}

uint64_t sub_183188FEC(uint64_t a1)
{
  if (a1 == 0x6974616D6D617267LL && v1 == 0xEF657361436C6163LL) {
    char v2 = 1;
  }
  else {
    char v2 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v2 & 1;
}

void Calendar.RecurrenceRule.End.date.getter(uint64_t a1@<X8>)
{
  uint64_t v2 = *v1;
  BOOL v3 = *((_BYTE *)v1 + 8) != 0;
  if (*((_BYTE *)v1 + 8)) {
    uint64_t v2 = 0LL;
  }
  *(void *)a1 = v2;
  *(_BYTE *)(a1 + 8) = v3;
}

uint64_t Calendar.RecurrenceRule.End.occurrences.getter()
{
  if (v0[8] == 1) {
    return *(void *)v0;
  }
  else {
    return 0LL;
  }
}

uint64_t Calendar.RecurrenceRule.Month.init(_:isLeap:)@<X0>( uint64_t result@<X0>, char a2@<W1>, uint64_t a3@<X8>)
{
  *(void *)a3 = result;
  *(_BYTE *)(a3 + 8) = a2;
  return result;
}

uint64_t Calendar.RecurrenceRule.calendar.getter@<X0>(_OWORD *a1@<X8>)
{
  *a1 = *v1;
  return swift_unknownObjectRetain();
}

__n128 Calendar.RecurrenceRule.calendar.setter(__n128 *a1)
{
  __n128 result = *a1;
  *uint64_t v1 = *a1;
  return result;
}

uint64_t (*Calendar.RecurrenceRule.calendar.modify())()
{
  return destructiveProjectEnumData for PredicateCodableError;
}

void Calendar.RecurrenceRule.matchingPolicy.getter(_BYTE *a1@<X8>)
{
  *a1 = *(_BYTE *)(v1 + 16);
}

_BYTE *Calendar.RecurrenceRule.matchingPolicy.setter(_BYTE *result)
{
  *(_BYTE *)(v1 + 16) = *result;
  return result;
}

uint64_t (*Calendar.RecurrenceRule.matchingPolicy.modify())()
{
  return destructiveProjectEnumData for PredicateCodableError;
}

void Calendar.RecurrenceRule.repeatedTimePolicy.getter(_BYTE *a1@<X8>)
{
  *a1 = *(_BYTE *)(v1 + 17);
}

_BYTE *Calendar.RecurrenceRule.repeatedTimePolicy.setter(_BYTE *result)
{
  *(_BYTE *)(v1 + 17) = *result;
  return result;
}

uint64_t (*Calendar.RecurrenceRule.repeatedTimePolicy.modify())()
{
  return destructiveProjectEnumData for PredicateCodableError;
}

unint64_t Calendar.RecurrenceRule.Frequency.init(rawValue:)@<X0>( unint64_t result@<X0>, _BYTE *a2@<X8>)
{
  unint64_t v2 = 0x5040302010006uLL >> (8 * result);
  if (result >= 7) {
    LOBYTE(v2) = 6;
  }
  *a2 = v2;
  return result;
}

uint64_t Calendar.RecurrenceRule.Frequency.rawValue.getter()
{
  return *v0 + 1LL;
}

unint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance Calendar.RecurrenceRule.Frequency@<X0>( unint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  return Calendar.RecurrenceRule.Frequency.init(rawValue:)(*a1, a2);
}

uint64_t protocol witness for Decodable.init(from:) in conformance Calendar.RecurrenceRule.Frequency()
{
  return RawRepresentable<>.init(from:)();
}

uint64_t protocol witness for Encodable.encode(to:) in conformance Calendar.RecurrenceRule.Frequency()
{
  return RawRepresentable<>.encode(to:)();
}

void Calendar.RecurrenceRule.frequency.getter(_BYTE *a1@<X8>)
{
  *a1 = *(_BYTE *)(v1 + 18);
}

_BYTE *Calendar.RecurrenceRule.frequency.setter(_BYTE *result)
{
  *(_BYTE *)(v1 + 18) = *result;
  return result;
}

uint64_t (*Calendar.RecurrenceRule.frequency.modify())()
{
  return destructiveProjectEnumData for PredicateCodableError;
}

uint64_t Calendar.RecurrenceRule.interval.getter()
{
  return *(void *)(v0 + 24);
}

uint64_t Calendar.RecurrenceRule.interval.setter(uint64_t result)
{
  *(void *)(v1 + 24) = result;
  return result;
}

uint64_t (*Calendar.RecurrenceRule.interval.modify())()
{
  return destructiveProjectEnumData for PredicateCodableError;
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance Calendar.RecurrenceRule.End._End( uint64_t a1, uint64_t a2)
{
  double v2 = *(double *)a1;
  double v3 = *(double *)a2;
  int v4 = *(unsigned __int8 *)(a2 + 8);
  if (!*(_BYTE *)(a1 + 8)) {
    return !*(_BYTE *)(a2 + 8) && v2 == v3;
  }
  if (*(_BYTE *)(a1 + 8) == 1)
  {
    if (v4 == 1) {
      return *(void *)&v2 == *(void *)&v3;
    }
    return 0LL;
  }

  return v4 == 2 && *(void *)&v3 == 0LL;
}

uint64_t static Calendar.RecurrenceRule.End.afterOccurrences(_:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = result;
  *(_BYTE *)(a2 + 8) = 1;
  return result;
}

void *static Calendar.RecurrenceRule.End.afterDate(_:)@<X0>(void *result@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = *result;
  *(_BYTE *)(a2 + 8) = 0;
  return result;
}

void static Calendar.RecurrenceRule.End.never.getter(uint64_t a1@<X8>)
{
  *(void *)a1 = 0LL;
  *(_BYTE *)(a1 + 8) = 2;
}

BOOL static Calendar.RecurrenceRule.End.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  double v2 = *(double *)a1;
  double v3 = *(double *)a2;
  int v4 = *(unsigned __int8 *)(a2 + 8);
  if (!*(_BYTE *)(a1 + 8)) {
    return !*(_BYTE *)(a2 + 8) && v2 == v3;
  }
  if (*(_BYTE *)(a1 + 8) != 1) {
    return v4 == 2 && *(void *)&v3 == 0LL;
  }
  return v4 == 1 && *(void *)&v2 == *(void *)&v3;
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance Calendar.RecurrenceRule.End( uint64_t a1, uint64_t a2)
{
  double v2 = *(double *)a1;
  double v3 = *(double *)a2;
  int v4 = *(unsigned __int8 *)(a2 + 8);
  if (!*(_BYTE *)(a1 + 8)) {
    return !*(_BYTE *)(a2 + 8) && v2 == v3;
  }
  if (*(_BYTE *)(a1 + 8) != 1) {
    return v4 == 2 && *(void *)&v3 == 0LL;
  }
  return v4 == 1 && *(void *)&v2 == *(void *)&v3;
}

void Calendar.RecurrenceRule.end.getter(uint64_t a1@<X8>)
{
  char v2 = *(_BYTE *)(v1 + 40);
  *(void *)a1 = *(void *)(v1 + 32);
  *(_BYTE *)(a1 + 8) = v2;
}

uint64_t Calendar.RecurrenceRule.end.setter(uint64_t result)
{
  char v2 = *(_BYTE *)(result + 8);
  *(void *)(v1 + 32) = *(void *)result;
  *(_BYTE *)(v1 + 40) = v2;
  return result;
}

uint64_t (*Calendar.RecurrenceRule.end.modify())()
{
  return destructiveProjectEnumData for PredicateCodableError;
}

uint64_t static Calendar.RecurrenceRule.Weekday.== infix(_:_:)(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = *a1;
  int v5 = *((char *)a1 + 8);
  uint64_t v6 = *a2;
  int v7 = *((char *)a2 + 8);
  if (v5 < 0)
  {
    if (v7 < 0 && v4 == v6) {
      return specialized == infix<A>(_:_:)(v5 & 0x7F, v7 & 0x7F);
    }
    return 0LL;
  }

  if (v7 < 0) {
    return 0LL;
  }
  return specialized == infix<A>(_:_:)(v4, v6);
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance Calendar.RecurrenceRule.Weekday( uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = *a1;
  int v5 = *((char *)a1 + 8);
  uint64_t v6 = *a2;
  int v7 = *((char *)a2 + 8);
  if (v5 < 0)
  {
    if (v7 < 0 && v4 == v6) {
      return specialized == infix<A>(_:_:)(v5 & 0x7F, v7 & 0x7F);
    }
    return 0LL;
  }

  if (v7 < 0) {
    return 0LL;
  }
  return specialized == infix<A>(_:_:)(v4, v6);
}

uint64_t Calendar.RecurrenceRule.Month.index.getter()
{
  return *(void *)v0;
}

uint64_t Calendar.RecurrenceRule.Month.index.setter(uint64_t result)
{
  *uint64_t v1 = result;
  return result;
}

uint64_t (*Calendar.RecurrenceRule.Month.index.modify())()
{
  return destructiveProjectEnumData for PredicateCodableError;
}

uint64_t Calendar.RecurrenceRule.Month.isLeap.getter()
{
  return *(unsigned __int8 *)(v0 + 8);
}

uint64_t Calendar.RecurrenceRule.Month.isLeap.setter(uint64_t result)
{
  *(_BYTE *)(v1 + 8) = result;
  return result;
}

uint64_t (*Calendar.RecurrenceRule.Month.isLeap.modify())()
{
  return destructiveProjectEnumData for PredicateCodableError;
}

uint64_t Calendar.RecurrenceRule.Month.init(integerLiteral:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = result;
  *(_BYTE *)(a2 + 8) = 0;
  return result;
}

uint64_t static Calendar.RecurrenceRule.Month.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  if (*(void *)a1 == *(void *)a2) {
    return (*(unsigned __int8 *)(a2 + 8) ^ *(unsigned __int8 *)(a1 + 8) ^ 1) & 1;
  }
  else {
    return 0LL;
  }
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance Calendar.RecurrenceRule.Month( uint64_t a1, uint64_t a2)
{
  if (*(void *)a1 == *(void *)a2) {
    return (*(unsigned __int8 *)(a2 + 8) ^ *(unsigned __int8 *)(a1 + 8) ^ 1) & 1;
  }
  else {
    return 0LL;
  }
}

uint64_t Calendar.RecurrenceRule.seconds.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t Calendar.RecurrenceRule.seconds.setter(uint64_t a1)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v1 + 48) = a1;
  return result;
}

uint64_t (*Calendar.RecurrenceRule.seconds.modify())()
{
  return destructiveProjectEnumData for PredicateCodableError;
}

uint64_t Calendar.RecurrenceRule.minutes.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t Calendar.RecurrenceRule.minutes.setter(uint64_t a1)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v1 + 56) = a1;
  return result;
}

uint64_t (*Calendar.RecurrenceRule.minutes.modify())()
{
  return destructiveProjectEnumData for PredicateCodableError;
}

uint64_t Calendar.RecurrenceRule.hours.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t Calendar.RecurrenceRule.hours.setter(uint64_t a1)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v1 + 64) = a1;
  return result;
}

uint64_t (*Calendar.RecurrenceRule.hours.modify())()
{
  return destructiveProjectEnumData for PredicateCodableError;
}

uint64_t Calendar.RecurrenceRule.weekdays.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t Calendar.RecurrenceRule.weekdays.setter(uint64_t a1)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v1 + 72) = a1;
  return result;
}

uint64_t (*Calendar.RecurrenceRule.weekdays.modify())()
{
  return destructiveProjectEnumData for PredicateCodableError;
}

uint64_t Calendar.RecurrenceRule.daysOfTheMonth.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t Calendar.RecurrenceRule.daysOfTheMonth.setter(uint64_t a1)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v1 + 80) = a1;
  return result;
}

uint64_t (*Calendar.RecurrenceRule.daysOfTheMonth.modify())()
{
  return destructiveProjectEnumData for PredicateCodableError;
}

uint64_t Calendar.RecurrenceRule.daysOfTheYear.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t Calendar.RecurrenceRule.daysOfTheYear.setter(uint64_t a1)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v1 + 88) = a1;
  return result;
}

uint64_t (*Calendar.RecurrenceRule.daysOfTheYear.modify())()
{
  return destructiveProjectEnumData for PredicateCodableError;
}

uint64_t Calendar.RecurrenceRule.months.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t Calendar.RecurrenceRule.months.setter(uint64_t a1)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v1 + 96) = a1;
  return result;
}

uint64_t (*Calendar.RecurrenceRule.months.modify())()
{
  return destructiveProjectEnumData for PredicateCodableError;
}

uint64_t Calendar.RecurrenceRule.weeks.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t Calendar.RecurrenceRule.weeks.setter(uint64_t a1)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v1 + 104) = a1;
  return result;
}

uint64_t (*Calendar.RecurrenceRule.weeks.modify())()
{
  return destructiveProjectEnumData for PredicateCodableError;
}

uint64_t Calendar.RecurrenceRule.setPositions.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t Calendar.RecurrenceRule.setPositions.setter(uint64_t a1)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v1 + 112) = a1;
  return result;
}

uint64_t (*Calendar.RecurrenceRule.setPositions.modify())()
{
  return destructiveProjectEnumData for PredicateCodableError;
}

__n128 Calendar.RecurrenceRule.init(calendar:frequency:interval:end:matchingPolicy:repeatedTimePolicy:months:daysOfTheYear:daysOfTheMonth:weeks:weekdays:hours:minutes:seconds:setPositions:)@<Q0>( __n128 *a1@<X0>, unsigned __int8 *a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X3>, unsigned __int8 *a5@<X4>, unsigned __int8 *a6@<X5>, unint64_t a7@<X6>, unint64_t a8@<X7>, __n128 *a9@<X8>, unint64_t a10, unint64_t a11, unint64_t a12, unint64_t a13, unint64_t a14, unint64_t a15, unint64_t a16)
{
  unsigned __int8 v16 = *a2;
  unint64_t v17 = *(void *)a4;
  unsigned __int8 v18 = *(_BYTE *)(a4 + 8);
  unsigned __int8 v19 = *a5;
  unsigned __int8 v20 = *a6;
  __n128 result = *a1;
  *a9 = *a1;
  a9[1].n128_u8[0] = v19;
  a9[1].n128_u8[1] = v20;
  a9[1].n128_u8[2] = v16;
  a9[1].n128_u64[1] = a3;
  a9[2].n128_u64[0] = v17;
  a9[2].n128_u8[8] = v18;
  a9[3].n128_u64[0] = a15;
  a9[3].n128_u64[1] = a14;
  a9[4].n128_u64[0] = a13;
  a9[4].n128_u64[1] = a12;
  a9[5].n128_u64[0] = a10;
  a9[5].n128_u64[1] = a8;
  a9[6].n128_u64[0] = a7;
  a9[6].n128_u64[1] = a11;
  a9[7].n128_u64[0] = a16;
  return result;
}

uint64_t Calendar.RecurrenceRule.recurrences(of:in:)@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  char v4 = *(_BYTE *)(v3 + 16);
  char v5 = *(_BYTE *)(v3 + 17);
  char v6 = *(_BYTE *)(v3 + 18);
  char v7 = *(_BYTE *)(v3 + 40);
  uint64_t v8 = *(void *)(v3 + 48);
  uint64_t v9 = *(void *)(v3 + 56);
  uint64_t v10 = *(void *)(v3 + 64);
  uint64_t v11 = *(void *)(v3 + 72);
  uint64_t v12 = *(void *)(v3 + 80);
  uint64_t v13 = *(void *)(v3 + 88);
  uint64_t v15 = *(void *)(v3 + 96);
  uint64_t v14 = *(void *)(v3 + 104);
  uint64_t v16 = *(void *)(v3 + 112);
  char v18 = *(_BYTE *)(a2 + 16);
  *(void *)a3 = *a1;
  *(_OWORD *)(a3 + 8) = *(_OWORD *)v3;
  *(_BYTE *)(a3 + 24) = v4;
  *(_BYTE *)(a3 + 25) = v5;
  *(_BYTE *)(a3 + 26) = v6;
  *(_OWORD *)(a3 + 32) = *(_OWORD *)(v3 + 24);
  *(_BYTE *)(a3 + 48) = v7;
  *(void *)(a3 + 56) = v8;
  *(void *)(a3 + 64) = v9;
  *(void *)(a3 + 72) = v10;
  *(void *)(a3 + 80) = v11;
  *(void *)(a3 + 88) = v12;
  *(void *)(a3 + 96) = v13;
  *(void *)(a3 + 104) = v15;
  *(void *)(a3 + 112) = v14;
  *(void *)(a3 + 120) = v16;
  *(_OWORD *)(a3 + 128) = *(_OWORD *)a2;
  *(_BYTE *)(a3 + 144) = v18;
  swift_unknownObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRetain();
}

uint64_t static Calendar.RecurrenceRule.minutely(calendar:interval:end:matchingPolicy:repeatedTimePolicy:months:daysOfTheYear:daysOfTheMonth:weekdays:hours:minutes:seconds:setPositions:)@<X0>( _OWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, char *a4@<X3>, unsigned __int8 *a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  uint64_t v14 = *a3;
  char v15 = *((_BYTE *)a3 + 8);
  char v16 = *a4;
  unsigned __int8 v17 = *a5;
  *(_OWORD *)a9 = *a1;
  *(_BYTE *)(a9 + 16) = v16;
  *(_WORD *)(a9 + 17) = v17;
  *(void *)(a9 + 24) = a2;
  *(void *)(a9 + 32) = v14;
  *(_BYTE *)(a9 + 40) = v15;
  *(void *)(a9 + 48) = a13;
  *(void *)(a9 + 56) = a12;
  *(void *)(a9 + 64) = a11;
  *(void *)(a9 + 72) = a10;
  *(void *)(a9 + 80) = a8;
  *(void *)(a9 + 88) = a7;
  uint64_t v18 = MEMORY[0x18961AFE8];
  *(void *)(a9 + 96) = a6;
  *(void *)(a9 + 104) = v18;
  *(void *)(a9 + 112) = a14;
  swift_unknownObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRetain();
}

uint64_t static Calendar.RecurrenceRule.hourly(calendar:interval:end:matchingPolicy:repeatedTimePolicy:months:daysOfTheYear:daysOfTheMonth:weekdays:hours:minutes:seconds:setPositions:)@<X0>( _OWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, char *a4@<X3>, char *a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  uint64_t v14 = *a3;
  char v15 = *((_BYTE *)a3 + 8);
  char v16 = *a4;
  char v17 = *a5;
  *(_OWORD *)a9 = *a1;
  *(_BYTE *)(a9 + 16) = v16;
  *(_BYTE *)(a9 + 17) = v17;
  *(_BYTE *)(a9 + 18) = 1;
  *(void *)(a9 + 24) = a2;
  *(void *)(a9 + 32) = v14;
  *(_BYTE *)(a9 + 40) = v15;
  *(void *)(a9 + 48) = a13;
  *(void *)(a9 + 56) = a12;
  *(void *)(a9 + 64) = a11;
  *(void *)(a9 + 72) = a10;
  *(void *)(a9 + 80) = a8;
  *(void *)(a9 + 88) = a7;
  uint64_t v18 = MEMORY[0x18961AFE8];
  *(void *)(a9 + 96) = a6;
  *(void *)(a9 + 104) = v18;
  *(void *)(a9 + 112) = a14;
  swift_unknownObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRetain();
}

uint64_t static Calendar.RecurrenceRule.daily(calendar:interval:end:matchingPolicy:repeatedTimePolicy:months:daysOfTheMonth:weekdays:hours:minutes:seconds:setPositions:)@<X0>( _OWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, char *a4@<X3>, char *a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t v13 = *a3;
  char v14 = *((_BYTE *)a3 + 8);
  char v15 = *a4;
  char v16 = *a5;
  *(_OWORD *)a9 = *a1;
  *(_BYTE *)(a9 + 16) = v15;
  *(_BYTE *)(a9 + 17) = v16;
  *(_BYTE *)(a9 + 18) = 2;
  *(void *)(a9 + 24) = a2;
  *(void *)(a9 + 32) = v13;
  *(_BYTE *)(a9 + 40) = v14;
  *(void *)(a9 + 48) = a12;
  *(void *)(a9 + 56) = a11;
  *(void *)(a9 + 64) = a10;
  *(void *)(a9 + 72) = a8;
  uint64_t v17 = MEMORY[0x18961AFE8];
  *(void *)(a9 + 80) = a7;
  *(void *)(a9 + 88) = v17;
  *(void *)(a9 + 96) = a6;
  *(void *)(a9 + 104) = v17;
  *(void *)(a9 + 112) = a13;
  swift_unknownObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRetain();
}

uint64_t static Calendar.RecurrenceRule.weekly(calendar:interval:end:matchingPolicy:repeatedTimePolicy:months:weekdays:hours:minutes:seconds:setPositions:)@<X0>( _OWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, char *a4@<X3>, char *a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v12 = *a3;
  char v13 = *((_BYTE *)a3 + 8);
  char v14 = *a4;
  char v15 = *a5;
  *(_OWORD *)a9 = *a1;
  *(_BYTE *)(a9 + 16) = v14;
  *(_BYTE *)(a9 + 17) = v15;
  *(_BYTE *)(a9 + 18) = 3;
  *(void *)(a9 + 24) = a2;
  *(void *)(a9 + 32) = v12;
  *(_BYTE *)(a9 + 40) = v13;
  *(void *)(a9 + 48) = a11;
  *(void *)(a9 + 56) = a10;
  *(void *)(a9 + 64) = a8;
  *(void *)(a9 + 72) = a7;
  uint64_t v16 = MEMORY[0x18961AFE8];
  *(void *)(a9 + 80) = MEMORY[0x18961AFE8];
  *(void *)(a9 + 88) = v16;
  *(void *)(a9 + 96) = a6;
  *(void *)(a9 + 104) = v16;
  *(void *)(a9 + 112) = a12;
  swift_unknownObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRetain();
}

uint64_t static Calendar.RecurrenceRule.monthly(calendar:interval:end:matchingPolicy:repeatedTimePolicy:months:daysOfTheMonth:weekdays:hours:minutes:seconds:setPositions:)@<X0>( _OWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, char *a4@<X3>, char *a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t v13 = *a3;
  char v14 = *((_BYTE *)a3 + 8);
  char v15 = *a4;
  char v16 = *a5;
  *(_OWORD *)a9 = *a1;
  *(_BYTE *)(a9 + 16) = v15;
  *(_BYTE *)(a9 + 17) = v16;
  *(_BYTE *)(a9 + 18) = 4;
  *(void *)(a9 + 24) = a2;
  *(void *)(a9 + 32) = v13;
  *(_BYTE *)(a9 + 40) = v14;
  *(void *)(a9 + 48) = a12;
  *(void *)(a9 + 56) = a11;
  *(void *)(a9 + 64) = a10;
  *(void *)(a9 + 72) = a8;
  uint64_t v17 = MEMORY[0x18961AFE8];
  *(void *)(a9 + 80) = a7;
  *(void *)(a9 + 88) = v17;
  *(void *)(a9 + 96) = a6;
  *(void *)(a9 + 104) = v17;
  *(void *)(a9 + 112) = a13;
  swift_unknownObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRetain();
}

uint64_t static Calendar.RecurrenceRule.yearly(calendar:interval:end:matchingPolicy:repeatedTimePolicy:months:daysOfTheYear:daysOfTheMonth:weeks:weekdays:hours:minutes:seconds:setPositions:)@<X0>( _OWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, char *a4@<X3>, char *a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  uint64_t v15 = *a3;
  char v16 = *((_BYTE *)a3 + 8);
  char v17 = *a4;
  char v18 = *a5;
  *(_OWORD *)a9 = *a1;
  *(_BYTE *)(a9 + 16) = v17;
  *(_BYTE *)(a9 + 17) = v18;
  *(_BYTE *)(a9 + 18) = 5;
  *(void *)(a9 + 24) = a2;
  *(void *)(a9 + 32) = v15;
  *(_BYTE *)(a9 + 40) = v16;
  *(void *)(a9 + 48) = a14;
  *(void *)(a9 + 56) = a13;
  *(void *)(a9 + 64) = a12;
  *(void *)(a9 + 72) = a11;
  *(void *)(a9 + 80) = a8;
  *(void *)(a9 + 88) = a7;
  *(void *)(a9 + 96) = a6;
  *(void *)(a9 + 104) = a10;
  *(void *)(a9 + 112) = a15;
  swift_unknownObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRetain();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance Calendar.RecurrenceRule.End.CodingKeys( char *a1, char *a2)
{
  return specialized == infix<A>(_:_:)(*a1, *a2);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance Calendar.RecurrenceRule.End.CodingKeys()
{
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance Calendar.RecurrenceRule.End.CodingKeys()
{
  return swift_bridgeObjectRelease();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance Calendar.RecurrenceRule.End.CodingKeys()
{
  return Hasher._finalize()();
}

uint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance Calendar.RecurrenceRule.End.CodingKeys@<X0>( Swift::String *a1@<X0>, char *a2@<X8>)
{
  v2._rawValue = &outlined read-only object #0 of Calendar.RecurrenceRule.End.CodingKeys.init(rawValue:);
  return protocol witness for RawRepresentable.init(rawValue:) in conformance Calendar.RecurrenceRule.End.CodingKeys( v2,  a1,  a2);
}

void protocol witness for RawRepresentable.rawValue.getter in conformance Calendar.RecurrenceRule.End.CodingKeys( uint64_t *a1@<X8>)
{
  uint64_t v2 = 0x746E756F63LL;
  if (*v1) {
    uint64_t v2 = 0x6C69746E75LL;
  }
  *a1 = v2;
  a1[1] = 0xE500000000000000LL;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance Calendar.RecurrenceRule.End.CodingKeys()
{
  if (*v0) {
    return 0x6C69746E75LL;
  }
  else {
    return 0x746E756F63LL;
  }
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance Calendar.RecurrenceRule.End.CodingKeys@<X0>( Swift::String a1@<X1:X0>, char *a2@<X8>)
{
  v2._rawValue = &outlined read-only object #0 of Calendar.RecurrenceRule.End.CodingKeys.init(rawValue:);
  return protocol witness for CodingKey.init(stringValue:) in conformance Calendar.RecurrenceRule.End.CodingKeys( a1,  v2,  a2);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance Calendar.RecurrenceRule.End.CodingKeys()
{
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance Calendar.RecurrenceRule.End.CodingKeys()
{
  return CodingKey.debugDescription.getter();
}

uint64_t Calendar.RecurrenceRule.End.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<Calendar.RecurrenceRule.End.CodingKeys>);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1895F8858](v5);
  uint64_t v8 = (char *)&v14 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type Calendar.RecurrenceRule.End.CodingKeys and conformance Calendar.RecurrenceRule.End.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v2)
  {
    char v17 = 1;
    lazy protocol witness table accessor for type Date and conformance Date();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    if ((v15 & 1) != 0)
    {
      char v16 = 0;
      uint64_t v9 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
      char v11 = v10;
      (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
      if ((v11 & 1) != 0)
      {
        uint64_t v9 = 0LL;
        char v12 = 2;
      }

      else
      {
        char v12 = 1;
      }
    }

    else
    {
      uint64_t v9 = v14;
      (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
      char v12 = 0;
    }

    *(void *)a2 = v9;
    *(_BYTE *)(a2 + 8) = v12;
  }

  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t Calendar.RecurrenceRule.End.encode(to:)(void *a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<Calendar.RecurrenceRule.End.CodingKeys>);
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x1895F8858](v3);
  uint64_t v6 = (char *)v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  v9[0] = *(void *)v1;
  int v7 = *(unsigned __int8 *)(v1 + 8);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type Calendar.RecurrenceRule.End.CodingKeys and conformance Calendar.RecurrenceRule.End.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  if (v7)
  {
    if (v7 == 1)
    {
      char v11 = 0;
      KeyedEncodingContainer.encode(_:forKey:)();
    }
  }

  else
  {
    v9[1] = v9[0];
    char v10 = 1;
    lazy protocol witness table accessor for type Date and conformance Date();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
  }

  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

uint64_t protocol witness for Decodable.init(from:) in conformance Calendar.RecurrenceRule.End@<X0>( void *a1@<X0>, uint64_t a2@<X8>)
{
  return Calendar.RecurrenceRule.End.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance Calendar.RecurrenceRule.End(void *a1)
{
  return Calendar.RecurrenceRule.End.encode(to:)(a1);
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance Calendar.RecurrenceRule.Weekday.CodingKeys( char *a1, char *a2)
{
  return specialized == infix<A>(_:_:)(*a1, *a2);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance Calendar.RecurrenceRule.Weekday.CodingKeys()
{
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance Calendar.RecurrenceRule.Weekday.CodingKeys()
{
  return swift_bridgeObjectRelease();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance Calendar.RecurrenceRule.Weekday.CodingKeys()
{
  return Hasher._finalize()();
}

uint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance Calendar.RecurrenceRule.Weekday.CodingKeys@<X0>( Swift::String *a1@<X0>, char *a2@<X8>)
{
  v2._rawValue = &outlined read-only object #0 of Calendar.RecurrenceRule.Weekday.CodingKeys.init(rawValue:);
  return protocol witness for RawRepresentable.init(rawValue:) in conformance Calendar.RecurrenceRule.End.CodingKeys( v2,  a1,  a2);
}

void protocol witness for RawRepresentable.rawValue.getter in conformance Calendar.RecurrenceRule.Weekday.CodingKeys( uint64_t *a1@<X8>)
{
  uint64_t v2 = 110LL;
  if (!*v1) {
    uint64_t v2 = 0x7961646B656577LL;
  }
  unint64_t v3 = 0xE700000000000000LL;
  if (*v1) {
    unint64_t v3 = 0xE100000000000000LL;
  }
  *a1 = v2;
  a1[1] = v3;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance Calendar.RecurrenceRule.Weekday.CodingKeys()
{
  if (*v0) {
    return 110LL;
  }
  else {
    return 0x7961646B656577LL;
  }
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance Calendar.RecurrenceRule.Weekday.CodingKeys@<X0>( Swift::String a1@<X1:X0>, char *a2@<X8>)
{
  v2._rawValue = &outlined read-only object #0 of Calendar.RecurrenceRule.Weekday.CodingKeys.init(rawValue:);
  return protocol witness for CodingKey.init(stringValue:) in conformance Calendar.RecurrenceRule.End.CodingKeys( a1,  v2,  a2);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance Calendar.RecurrenceRule.Weekday.CodingKeys()
{
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance Calendar.RecurrenceRule.Weekday.CodingKeys()
{
  return CodingKey.debugDescription.getter();
}

uint64_t Calendar.RecurrenceRule.Weekday.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<Calendar.RecurrenceRule.Weekday.CodingKeys>);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1895F8858](v5);
  uint64_t v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type Calendar.RecurrenceRule.Weekday.CodingKeys and conformance Calendar.RecurrenceRule.Weekday.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v2)
  {
    char v18 = 0;
    lazy protocol witness table accessor for type Locale.Weekday and conformance Locale.Weekday();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    uint64_t v9 = v19;
    char v17 = 1;
    uint64_t v11 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    char v13 = v12;
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    char v14 = v9 | 0x80;
    if ((v13 & 1) != 0) {
      uint64_t v15 = v9;
    }
    else {
      uint64_t v15 = v11;
    }
    if ((v13 & 1) != 0) {
      char v14 = 0;
    }
    *(void *)a2 = v15;
    *(_BYTE *)(a2 + 8) = v14;
  }

  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t Calendar.RecurrenceRule.Weekday.encode(to:)(void *a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<Calendar.RecurrenceRule.Weekday.CodingKeys>);
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x1895F8858](v3);
  uint64_t v6 = (char *)v12 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = *v1;
  int v8 = *((char *)v1 + 8);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type Calendar.RecurrenceRule.Weekday.CodingKeys and conformance Calendar.RecurrenceRule.Weekday.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  if (v8 < 0)
  {
    char v15 = 1;
    uint64_t v9 = v3;
    uint64_t v10 = v12[1];
    KeyedEncodingContainer.encode(_:forKey:)();
    if (v10) {
      return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v9);
    }
    char v14 = v8 & 0x7F;
    char v13 = 0;
    lazy protocol witness table accessor for type Locale.Weekday and conformance Locale.Weekday();
  }

  else
  {
    char v17 = v7;
    char v16 = 0;
    lazy protocol witness table accessor for type Locale.Weekday and conformance Locale.Weekday();
    uint64_t v9 = v3;
  }

  KeyedEncodingContainer.encode<A>(_:forKey:)();
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v9);
}

uint64_t protocol witness for Decodable.init(from:) in conformance Calendar.RecurrenceRule.Weekday@<X0>( void *a1@<X0>, uint64_t a2@<X8>)
{
  return Calendar.RecurrenceRule.Weekday.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance Calendar.RecurrenceRule.Weekday( void *a1)
{
  return Calendar.RecurrenceRule.Weekday.encode(to:)(a1);
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance Calendar.RecurrenceRule.Month.CodingKeys( char *a1, char *a2)
{
  return specialized == infix<A>(_:_:)(*a1, *a2);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance Calendar.RecurrenceRule.Month.CodingKeys()
{
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance Calendar.RecurrenceRule.Month.CodingKeys()
{
  return swift_bridgeObjectRelease();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance Calendar.RecurrenceRule.Month.CodingKeys()
{
  return Hasher._finalize()();
}

uint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance Calendar.RecurrenceRule.Month.CodingKeys@<X0>( Swift::String *a1@<X0>, char *a2@<X8>)
{
  v2._rawValue = &outlined read-only object #0 of Calendar.RecurrenceRule.Month.CodingKeys.init(rawValue:);
  return protocol witness for RawRepresentable.init(rawValue:) in conformance Calendar.RecurrenceRule.End.CodingKeys( v2,  a1,  a2);
}

uint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance Calendar.RecurrenceRule.End.CodingKeys@<X0>( Swift::OpaquePointer cases@<0:X3>, Swift::String *a2@<X0>, char *a3@<X8>)
{
  Swift::Int v4 = _findStringSwitchCase(cases:string:)(cases, *a2);
  uint64_t result = swift_bridgeObjectRelease();
  if (v4 == 1) {
    char v6 = 1;
  }
  else {
    char v6 = 2;
  }
  if (!v4) {
    char v6 = 0;
  }
  *a3 = v6;
  return result;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance Calendar.RecurrenceRule.Month.CodingKeys( uint64_t *a1@<X8>)
{
  uint64_t v2 = 1885431148LL;
  if (!*v1) {
    uint64_t v2 = 0x68746E6F6DLL;
  }
  unint64_t v3 = 0xE500000000000000LL;
  if (*v1) {
    unint64_t v3 = 0xE400000000000000LL;
  }
  *a1 = v2;
  a1[1] = v3;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance Calendar.RecurrenceRule.Month.CodingKeys()
{
  if (*v0) {
    return 1885431148LL;
  }
  else {
    return 0x68746E6F6DLL;
  }
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance Calendar.RecurrenceRule.Month.CodingKeys@<X0>( Swift::String a1@<X1:X0>, char *a2@<X8>)
{
  v2._rawValue = &outlined read-only object #0 of Calendar.RecurrenceRule.Month.CodingKeys.init(rawValue:);
  return protocol witness for CodingKey.init(stringValue:) in conformance Calendar.RecurrenceRule.End.CodingKeys( a1,  v2,  a2);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance Calendar.RecurrenceRule.End.CodingKeys@<X0>( Swift::String string@<0:X0, 8:X1>, Swift::OpaquePointer cases@<0:X4>, char *a3@<X8>)
{
  unint64_t object = string._object;
  v4._uint64_t countAndFlagsBits = string._countAndFlagsBits;
  v4._unint64_t object = object;
  Swift::Int v6 = _findStringSwitchCase(cases:string:)(cases, v4);
  uint64_t result = swift_bridgeObjectRelease();
  if (v6 == 1) {
    char v8 = 1;
  }
  else {
    char v8 = 2;
  }
  if (!v6) {
    char v8 = 0;
  }
  *a3 = v8;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance Calendar.RecurrenceRule.Month.CodingKeys()
{
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance Calendar.RecurrenceRule.Month.CodingKeys()
{
  return CodingKey.debugDescription.getter();
}

uint64_t Calendar.RecurrenceRule.Month.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<Calendar.RecurrenceRule.Month.CodingKeys>);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1895F8858](v5);
  char v8 = (char *)&v13[-1] - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  dispatch thunk of Decoder.singleValueContainer()();
  if (v2)
  {

    __swift_project_boxed_opaque_existential_1(a1, a1[3]);
    lazy protocol witness table accessor for type Calendar.RecurrenceRule.Month.CodingKeys and conformance Calendar.RecurrenceRule.Month.CodingKeys();
    dispatch thunk of Decoder.container<A>(keyedBy:)();
    LOBYTE(v13[0]) = 0;
    uint64_t v9 = KeyedDecodingContainer.decode(_:forKey:)();
    LOBYTE(v13[0]) = 1;
    char v10 = KeyedDecodingContainer.decode(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  }

  else
  {
    __swift_project_boxed_opaque_existential_1(v13, v13[3]);
    uint64_t v9 = dispatch thunk of SingleValueDecodingContainer.decode(_:)();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v13);
    char v10 = 0;
  }

  *(void *)a2 = v9;
  *(_BYTE *)(a2 + 8) = v10 & 1;
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t Calendar.RecurrenceRule.Month.encode(to:)(void *a1)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<Calendar.RecurrenceRule.Month.CodingKeys>);
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1895F8858](v4);
  uint64_t v7 = &v10[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  if (*(_BYTE *)(v1 + 8) == 1)
  {
    __swift_project_boxed_opaque_existential_1(a1, a1[3]);
    lazy protocol witness table accessor for type Calendar.RecurrenceRule.Month.CodingKeys and conformance Calendar.RecurrenceRule.Month.CodingKeys();
    dispatch thunk of Encoder.container<A>(keyedBy:)();
    v10[0] = 0;
    KeyedEncodingContainer.encode(_:forKey:)();
    if (!v2)
    {
      v10[0] = 1;
      KeyedEncodingContainer.encode(_:forKey:)();
    }

    return (*(uint64_t (**)(_BYTE *, uint64_t))(v5 + 8))(v7, v4);
  }

  else
  {
    __swift_project_boxed_opaque_existential_1(a1, a1[3]);
    dispatch thunk of Encoder.singleValueContainer()();
    __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v10, v11);
    dispatch thunk of SingleValueEncodingContainer.encode(_:)();
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v10);
  }

uint64_t Calendar.RecurrenceRule.CodingKeys.rawValue.getter(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_18318AF0C + 4 * byte_1837BC222[a1]))( 0x7261646E656C6163LL,  0xE800000000000000LL);
}

uint64_t sub_18318AF0C()
{
  return 0x636E657571657266LL;
}

uint64_t sub_18318AF28()
{
  return 0x6C61767265746E69LL;
}

uint64_t sub_18318AF3C()
{
  return 6581861LL;
}

uint64_t sub_18318AF4C()
{
  return 0x676E69686374616DLL;
}

unint64_t sub_18318AF70()
{
  return 0xD000000000000012LL;
}

uint64_t sub_18318AF8C()
{
  return 0x7368746E6F6DLL;
}

uint64_t sub_18318AFA0()
{
  return 0x6854664F73796164LL;
}

uint64_t sub_18318AFD8()
{
  return 0x736B656577LL;
}

uint64_t sub_18318AFEC()
{
  return 0x737961646B656577LL;
}

uint64_t sub_18318B000()
{
  return 0x7372756F68LL;
}

uint64_t sub_18318B014()
{
  return 0x736574756E696DLL;
}

uint64_t sub_18318B02C()
{
  return 0x73646E6F636573LL;
}

uint64_t sub_18318B044()
{
  return 0x7469736F50746573LL;
}

uint64_t Calendar.RecurrenceRule.CodingKeys.stringValue.getter(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_18318B098 + 4 * byte_1837BC231[a1]))( 0x7261646E656C6163LL,  0xE800000000000000LL);
}

uint64_t sub_18318B098()
{
  return 0x636E657571657266LL;
}

uint64_t sub_18318B0B4()
{
  return 0x6C61767265746E69LL;
}

uint64_t sub_18318B0C8()
{
  return 6581861LL;
}

uint64_t sub_18318B0D8()
{
  return 0x676E69686374616DLL;
}

unint64_t sub_18318B0FC()
{
  return 0xD000000000000012LL;
}

uint64_t sub_18318B118()
{
  return 0x7368746E6F6DLL;
}

uint64_t sub_18318B12C()
{
  return 0x6854664F73796164LL;
}

uint64_t sub_18318B164()
{
  return 0x736B656577LL;
}

uint64_t sub_18318B178()
{
  return 0x737961646B656577LL;
}

uint64_t sub_18318B18C()
{
  return 0x7372756F68LL;
}

uint64_t sub_18318B1A0()
{
  return 0x736574756E696DLL;
}

uint64_t sub_18318B1B8()
{
  return 0x73646E6F636573LL;
}

uint64_t sub_18318B1D0()
{
  return 0x7469736F50746573LL;
}

uint64_t protocol witness for Decodable.init(from:) in conformance Calendar.RecurrenceRule.Month@<X0>( void *a1@<X0>, uint64_t a2@<X8>)
{
  return Calendar.RecurrenceRule.Month.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance Calendar.RecurrenceRule.Month(void *a1)
{
  return Calendar.RecurrenceRule.Month.encode(to:)(a1);
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance Calendar.RecurrenceRule.CodingKeys( unsigned __int8 *a1, unsigned __int8 *a2)
{
  unsigned __int8 v2 = *a2;
  uint64_t v3 = Calendar.RecurrenceRule.CodingKeys.rawValue.getter(*a1);
  uint64_t v5 = v4;
  if (v3 == Calendar.RecurrenceRule.CodingKeys.rawValue.getter(v2) && v5 == v6) {
    char v8 = 1;
  }
  else {
    char v8 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8 & 1;
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance Calendar.RecurrenceRule.CodingKeys()
{
  unsigned __int8 v1 = *v0;
  Hasher.init(_seed:)();
  Calendar.RecurrenceRule.CodingKeys.rawValue.getter(v1);
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance Calendar.RecurrenceRule.CodingKeys()
{
  return swift_bridgeObjectRelease();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance Calendar.RecurrenceRule.CodingKeys()
{
  unsigned __int8 v1 = *v0;
  Hasher.init(_seed:)();
  Calendar.RecurrenceRule.CodingKeys.rawValue.getter(v1);
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

unint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance Calendar.RecurrenceRule.CodingKeys@<X0>( Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result = specialized Calendar.RecurrenceRule.CodingKeys.init(rawValue:)(*a1);
  *a2 = result;
  return result;
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance Calendar.RecurrenceRule.CodingKeys@<X0>( uint64_t *a1@<X8>)
{
  uint64_t result = Calendar.RecurrenceRule.CodingKeys.rawValue.getter(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance Calendar.RecurrenceRule.CodingKeys()
{
  return Calendar.RecurrenceRule.CodingKeys.stringValue.getter(*v0);
}

unint64_t protocol witness for CodingKey.init(stringValue:) in conformance Calendar.RecurrenceRule.CodingKeys@<X0>( Swift::String a1@<X1:X0>, _BYTE *a2@<X8>)
{
  unint64_t result = specialized Calendar.RecurrenceRule.CodingKeys.init(rawValue:)(a1);
  *a2 = result;
  return result;
}

void protocol witness for CodingKey.init(intValue:) in conformance Calendar.RecurrenceRule.CodingKeys( _BYTE *a1@<X8>)
{
  *a1 = 15;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance Calendar.RecurrenceRule.CodingKeys()
{
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance Calendar.RecurrenceRule.CodingKeys()
{
  return CodingKey.debugDescription.getter();
}

uint64_t Calendar.RecurrenceRule.init(from:)@<X0>(void *a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<Calendar.RecurrenceRule.CodingKeys>);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1895F8858](v5);
  char v8 = (char *)&v25 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type Calendar.RecurrenceRule.CodingKeys and conformance Calendar.RecurrenceRule.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2) {
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  }
  char v45 = 0;
  lazy protocol witness table accessor for type Calendar and conformance Calendar();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  __int128 v42 = v43;
  char v45 = 1;
  lazy protocol witness table accessor for type Calendar.RecurrenceRule.Frequency and conformance Calendar.RecurrenceRule.Frequency();
  swift_unknownObjectRetain();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  int v10 = v43;
  LOBYTE(v43) = 2;
  uint64_t v41 = KeyedDecodingContainer.decode(_:forKey:)();
  char v45 = 3;
  lazy protocol witness table accessor for type Calendar.RecurrenceRule.End and conformance Calendar.RecurrenceRule.End();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  uint64_t v40 = v43;
  int v44 = BYTE8(v43);
  char v45 = 4;
  lazy protocol witness table accessor for type Calendar.MatchingPolicy and conformance Calendar.MatchingPolicy();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  int v39 = v43;
  char v45 = 5;
  lazy protocol witness table accessor for type Calendar.RepeatedTimePolicy and conformance Calendar.RepeatedTimePolicy();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  int v37 = v43;
  int v38 = v10;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Calendar.RecurrenceRule.Month]);
  char v45 = 6;
  lazy protocol witness table accessor for type [ExpressionStructure.Argument] and conformance <A> [A]( &lazy protocol witness table cache variable for type [Calendar.RecurrenceRule.Month] and conformance <A> [A],  &demangling cache variable for type metadata for [Calendar.RecurrenceRule.Month],  (uint64_t (*)(void))lazy protocol witness table accessor for type Calendar.RecurrenceRule.Month and conformance Calendar.RecurrenceRule.Month,  MEMORY[0x189618478]);
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  uint64_t v11 = v43;
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Int]);
  char v45 = 7;
  uint64_t v13 = lazy protocol witness table accessor for type [Int] and conformance <A> [A]( &lazy protocol witness table cache variable for type [Int] and conformance <A> [A],  MEMORY[0x189618770],  MEMORY[0x189618478]);
  uint64_t v36 = v11;
  swift_bridgeObjectRetain();
  uint64_t v35 = v13;
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  uint64_t v14 = v12;
  uint64_t v15 = v43;
  char v45 = 8;
  swift_bridgeObjectRetain();
  uint64_t v34 = v14;
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  int v31 = a2;
  uint64_t v16 = v43;
  char v45 = 9;
  swift_bridgeObjectRetain();
  int v32 = v8;
  uint64_t v33 = v5;
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  uint64_t v17 = v43;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Calendar.RecurrenceRule.Weekday]);
  char v45 = 10;
  lazy protocol witness table accessor for type [ExpressionStructure.Argument] and conformance <A> [A]( &lazy protocol witness table cache variable for type [Calendar.RecurrenceRule.Weekday] and conformance <A> [A],  &demangling cache variable for type metadata for [Calendar.RecurrenceRule.Weekday],  (uint64_t (*)(void))lazy protocol witness table accessor for type Calendar.RecurrenceRule.Weekday and conformance Calendar.RecurrenceRule.Weekday,  MEMORY[0x189618478]);
  swift_bridgeObjectRetain();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  char v45 = 13;
  uint64_t v18 = v43;
  swift_bridgeObjectRetain();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  char v45 = 12;
  uint64_t v30 = v43;
  swift_bridgeObjectRetain();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  uint64_t v29 = 0LL;
  char v45 = 11;
  uint64_t v28 = v43;
  swift_bridgeObjectRetain();
  uint64_t v19 = v29;
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  if (v19)
  {
    (*(void (**)(char *, uint64_t))(v6 + 8))(v32, v33);
    swift_unknownObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
    swift_bridgeObjectRelease();
    swift_unknownObjectRelease();
    if (!v29) {
      swift_bridgeObjectRelease();
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }

  else
  {
    char v45 = 14;
    uint64_t v27 = v43;
    swift_bridgeObjectRetain();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v32, v33);
    uint64_t v35 = v43;
    swift_unknownObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v26 = v18;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_unknownObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v20 = v28;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v21 = v26;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v22 = v36;
    swift_bridgeObjectRelease();
    unsigned int v23 = v31;
    *int v31 = v42;
    *((_BYTE *)v23 + 16) = v39;
    *((_BYTE *)v23 + 17) = v37;
    *((_BYTE *)v23 + 18) = v38;
    uint64_t v24 = v40;
    *((void *)v23 + 3) = v41;
    *((void *)v23 + 4) = v24;
    *((_BYTE *)v23 + 40) = v44;
    *((void *)v23 + 6) = v30;
    *((void *)v23 + 7) = v20;
    *((void *)v23 + 8) = v27;
    *((void *)v23 + 9) = v21;
    *((void *)v23 + 10) = v16;
    *((void *)v23 + 11) = v15;
    *((void *)v23 + 12) = v22;
    *((void *)v23 + 13) = v17;
    *((void *)v23 + 14) = v35;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_unknownObjectRelease();
  }

uint64_t Calendar.RecurrenceRule.encode(to:)(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<Calendar.RecurrenceRule.CodingKeys>);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1895F8858](v5);
  char v8 = (char *)&v22 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  int v9 = *((unsigned __int8 *)v3 + 16);
  int v30 = *((unsigned __int8 *)v3 + 17);
  int v31 = v9;
  LODWORD(v34) = *((unsigned __int8 *)v3 + 18);
  uint64_t v10 = *((void *)v3 + 3);
  uint64_t v32 = *((void *)v3 + 4);
  uint64_t v33 = v10;
  int v36 = *((unsigned __int8 *)v3 + 40);
  uint64_t v11 = *((void *)v3 + 7);
  uint64_t v22 = *((void *)v3 + 6);
  uint64_t v23 = v11;
  uint64_t v12 = *((void *)v3 + 9);
  uint64_t v24 = *((void *)v3 + 8);
  uint64_t v25 = v12;
  uint64_t v13 = *((void *)v3 + 11);
  uint64_t v27 = *((void *)v3 + 10);
  uint64_t v28 = v13;
  uint64_t v29 = *((void *)v3 + 12);
  uint64_t v14 = *((void *)v3 + 14);
  uint64_t v26 = *((void *)v3 + 13);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type Calendar.RecurrenceRule.CodingKeys and conformance Calendar.RecurrenceRule.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  __int128 v15 = *v3;
  uint64_t v16 = v5;
  __int128 v35 = v15;
  char v37 = 0;
  lazy protocol witness table accessor for type Calendar and conformance Calendar();
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (v2) {
    return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  }
  uint64_t v17 = v32;
  char v18 = v36;
  LOBYTE(v35) = (_BYTE)v34;
  char v37 = 1;
  lazy protocol witness table accessor for type Calendar.RecurrenceRule.Frequency and conformance Calendar.RecurrenceRule.Frequency();
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  LOBYTE(v35) = 2;
  uint64_t v34 = v8;
  KeyedEncodingContainer.encode(_:forKey:)();
  *(void *)&__int128 v35 = v17;
  BYTE8(v35) = v18;
  char v37 = 3;
  lazy protocol witness table accessor for type Calendar.RecurrenceRule.End and conformance Calendar.RecurrenceRule.End();
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  LOBYTE(v35) = v31;
  char v37 = 4;
  lazy protocol witness table accessor for type Calendar.MatchingPolicy and conformance Calendar.MatchingPolicy();
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  LOBYTE(v35) = v30;
  char v37 = 5;
  lazy protocol witness table accessor for type Calendar.RepeatedTimePolicy and conformance Calendar.RepeatedTimePolicy();
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  *(void *)&__int128 v35 = v29;
  char v37 = 6;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Calendar.RecurrenceRule.Month]);
  lazy protocol witness table accessor for type [ExpressionStructure.Argument] and conformance <A> [A]( &lazy protocol witness table cache variable for type [Calendar.RecurrenceRule.Month] and conformance <A> [A],  &demangling cache variable for type metadata for [Calendar.RecurrenceRule.Month],  (uint64_t (*)(void))lazy protocol witness table accessor for type Calendar.RecurrenceRule.Month and conformance Calendar.RecurrenceRule.Month,  MEMORY[0x189618448]);
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  *(void *)&__int128 v35 = v28;
  char v37 = 7;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Int]);
  lazy protocol witness table accessor for type [Int] and conformance <A> [A]( &lazy protocol witness table cache variable for type [Int] and conformance <A> [A],  MEMORY[0x189618748],  MEMORY[0x189618448]);
  uint64_t v33 = v16;
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  *(void *)&__int128 v35 = v27;
  char v37 = 8;
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  *(void *)&__int128 v35 = v26;
  char v37 = 9;
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  *(void *)&__int128 v35 = v25;
  char v37 = 10;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Calendar.RecurrenceRule.Weekday]);
  lazy protocol witness table accessor for type [ExpressionStructure.Argument] and conformance <A> [A]( &lazy protocol witness table cache variable for type [Calendar.RecurrenceRule.Weekday] and conformance <A> [A],  &demangling cache variable for type metadata for [Calendar.RecurrenceRule.Weekday],  (uint64_t (*)(void))lazy protocol witness table accessor for type Calendar.RecurrenceRule.Weekday and conformance Calendar.RecurrenceRule.Weekday,  MEMORY[0x189618448]);
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  *(void *)&__int128 v35 = v24;
  char v37 = 11;
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  *(void *)&__int128 v35 = v23;
  char v37 = 12;
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  *(void *)&__int128 v35 = v22;
  char v37 = 13;
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  *(void *)&__int128 v35 = v14;
  char v37 = 14;
  uint64_t v20 = v33;
  uint64_t v19 = v34;
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v19, v20);
}

uint64_t protocol witness for Decodable.init(from:) in conformance Calendar.RecurrenceRule@<X0>( void *a1@<X0>, _OWORD *a2@<X8>)
{
  return Calendar.RecurrenceRule.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance Calendar.RecurrenceRule(void *a1)
{
  return Calendar.RecurrenceRule.encode(to:)(a1);
}

uint64_t Calendar.RecurrenceRule.End.description.getter()
{
  if (!*(_BYTE *)(v0 + 8))
  {
    id v3 = objc_msgSend( objc_allocWithZone(MEMORY[0x189603F50]),  sel_initWithTimeIntervalSinceReferenceDate_,  *(double *)v0);
    id v4 = objc_msgSend(v3, sel_description);

    id v5 = static String._unconditionallyBridgeFromObjectiveC(_:)(v4);
    uint64_t v7 = v6;

    v8._uint64_t countAndFlagsBits = (uint64_t)v5;
    v8._unint64_t object = v7;
    String.append(_:)(v8);
    swift_bridgeObjectRelease();
    return 0x207265746641LL;
  }

  if (*(_BYTE *)(v0 + 8) == 1)
  {
    _StringGuts.grow(_:)(22LL);
    swift_bridgeObjectRelease();
    v1._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v1);
    swift_bridgeObjectRelease();
    v2._uint64_t countAndFlagsBits = 0x6572727563636F20LL;
    v2._unint64_t object = (void *)0xEE0029732865636ELL;
    String.append(_:)(v2);
    return 0x207265746641LL;
  }

  return 0x726576654ELL;
}

BOOL specialized static Calendar.RecurrenceRule.== infix(_:_:)(__int128 *a1, __int128 *a2)
{
  int v2 = *((unsigned __int8 *)a1 + 16);
  int v3 = *((unsigned __int8 *)a1 + 17);
  int v4 = *((unsigned __int8 *)a1 + 18);
  uint64_t v5 = *((void *)a1 + 3);
  int v6 = *((unsigned __int8 *)a1 + 40);
  int v31 = (void *)*((void *)a1 + 6);
  double v32 = *((double *)a1 + 4);
  uint64_t v29 = (void *)*((void *)a1 + 7);
  uint64_t v27 = (void *)*((void *)a1 + 8);
  uint64_t v25 = *((void *)a1 + 9);
  uint64_t v23 = (void *)*((void *)a1 + 10);
  uint64_t v21 = (void *)*((void *)a1 + 11);
  uint64_t v19 = *((void *)a1 + 12);
  uint64_t v17 = (void *)*((void *)a1 + 13);
  __int128 v15 = (void *)*((void *)a1 + 14);
  int v7 = *((unsigned __int8 *)a2 + 16);
  int v8 = *((unsigned __int8 *)a2 + 17);
  int v9 = *((unsigned __int8 *)a2 + 18);
  uint64_t v10 = *((void *)a2 + 3);
  double v33 = *((double *)a2 + 4);
  int v11 = *((unsigned __int8 *)a2 + 40);
  int v30 = (void *)*((void *)a2 + 6);
  uint64_t v28 = (void *)*((void *)a2 + 7);
  uint64_t v26 = (void *)*((void *)a2 + 8);
  uint64_t v24 = *((void *)a2 + 9);
  uint64_t v22 = (void *)*((void *)a2 + 10);
  uint64_t v20 = (void *)*((void *)a2 + 11);
  __int128 v12 = *a1;
  uint64_t v18 = *((void *)a2 + 12);
  uint64_t v16 = (void *)*((void *)a2 + 13);
  uint64_t v14 = (void *)*((void *)a2 + 14);
  __int128 v34 = *a2;
  __int128 v35 = v12;
  if ((specialized static Calendar.== infix(_:_:)((uint64_t)&v35, (uint64_t)&v34) & 1) == 0
    || v2 != v7
    || ((v3 ^ v8) & 1) != 0
    || v4 != v9
    || v5 != v10)
  {
    return 0LL;
  }

  if (v6)
  {
    if (v6 == 1)
    {
      if (v11 != 1 || *(void *)&v32 != *(void *)&v33) {
        return 0LL;
      }
    }

    else if (v11 != 2 || v33 != 0.0)
    {
      return 0LL;
    }
  }

  else if (v11 || v32 != v33)
  {
    return 0LL;
  }

  if (specialized static Array<A>.== infix(_:_:)(v31, v30)
    && specialized static Array<A>.== infix(_:_:)(v29, v28)
    && specialized static Array<A>.== infix(_:_:)(v27, v26)
    && (specialized static Array<A>.== infix(_:_:)(v25, v24) & 1) != 0
    && specialized static Array<A>.== infix(_:_:)(v23, v22)
    && specialized static Array<A>.== infix(_:_:)(v21, v20)
    && (specialized static Array<A>.== infix(_:_:)(v19, v18) & 1) != 0
    && specialized static Array<A>.== infix(_:_:)(v17, v16))
  {
    return specialized static Array<A>.== infix(_:_:)(v15, v14);
  }

  return 0LL;
}

unint64_t lazy protocol witness table accessor for type Calendar.RecurrenceRule.End.CodingKeys and conformance Calendar.RecurrenceRule.End.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type Calendar.RecurrenceRule.End.CodingKeys and conformance Calendar.RecurrenceRule.End.CodingKeys;
  if (!lazy protocol witness table cache variable for type Calendar.RecurrenceRule.End.CodingKeys and conformance Calendar.RecurrenceRule.End.CodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for Calendar.RecurrenceRule.End.CodingKeys,  &type metadata for Calendar.RecurrenceRule.End.CodingKeys);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Calendar.RecurrenceRule.End.CodingKeys and conformance Calendar.RecurrenceRule.End.CodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type Calendar.RecurrenceRule.End.CodingKeys and conformance Calendar.RecurrenceRule.End.CodingKeys;
  if (!lazy protocol witness table cache variable for type Calendar.RecurrenceRule.End.CodingKeys and conformance Calendar.RecurrenceRule.End.CodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for Calendar.RecurrenceRule.End.CodingKeys,  &type metadata for Calendar.RecurrenceRule.End.CodingKeys);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Calendar.RecurrenceRule.End.CodingKeys and conformance Calendar.RecurrenceRule.End.CodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type Calendar.RecurrenceRule.End.CodingKeys and conformance Calendar.RecurrenceRule.End.CodingKeys;
  if (!lazy protocol witness table cache variable for type Calendar.RecurrenceRule.End.CodingKeys and conformance Calendar.RecurrenceRule.End.CodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for Calendar.RecurrenceRule.End.CodingKeys,  &type metadata for Calendar.RecurrenceRule.End.CodingKeys);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Calendar.RecurrenceRule.End.CodingKeys and conformance Calendar.RecurrenceRule.End.CodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type Calendar.RecurrenceRule.End.CodingKeys and conformance Calendar.RecurrenceRule.End.CodingKeys;
  if (!lazy protocol witness table cache variable for type Calendar.RecurrenceRule.End.CodingKeys and conformance Calendar.RecurrenceRule.End.CodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for Calendar.RecurrenceRule.End.CodingKeys,  &type metadata for Calendar.RecurrenceRule.End.CodingKeys);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Calendar.RecurrenceRule.End.CodingKeys and conformance Calendar.RecurrenceRule.End.CodingKeys);
  }

  return result;
}

unint64_t lazy protocol witness table accessor for type Calendar.RecurrenceRule.Weekday.CodingKeys and conformance Calendar.RecurrenceRule.Weekday.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type Calendar.RecurrenceRule.Weekday.CodingKeys and conformance Calendar.RecurrenceRule.Weekday.CodingKeys;
  if (!lazy protocol witness table cache variable for type Calendar.RecurrenceRule.Weekday.CodingKeys and conformance Calendar.RecurrenceRule.Weekday.CodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for Calendar.RecurrenceRule.Weekday.CodingKeys,  &type metadata for Calendar.RecurrenceRule.Weekday.CodingKeys);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Calendar.RecurrenceRule.Weekday.CodingKeys and conformance Calendar.RecurrenceRule.Weekday.CodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type Calendar.RecurrenceRule.Weekday.CodingKeys and conformance Calendar.RecurrenceRule.Weekday.CodingKeys;
  if (!lazy protocol witness table cache variable for type Calendar.RecurrenceRule.Weekday.CodingKeys and conformance Calendar.RecurrenceRule.Weekday.CodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for Calendar.RecurrenceRule.Weekday.CodingKeys,  &type metadata for Calendar.RecurrenceRule.Weekday.CodingKeys);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Calendar.RecurrenceRule.Weekday.CodingKeys and conformance Calendar.RecurrenceRule.Weekday.CodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type Calendar.RecurrenceRule.Weekday.CodingKeys and conformance Calendar.RecurrenceRule.Weekday.CodingKeys;
  if (!lazy protocol witness table cache variable for type Calendar.RecurrenceRule.Weekday.CodingKeys and conformance Calendar.RecurrenceRule.Weekday.CodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for Calendar.RecurrenceRule.Weekday.CodingKeys,  &type metadata for Calendar.RecurrenceRule.Weekday.CodingKeys);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Calendar.RecurrenceRule.Weekday.CodingKeys and conformance Calendar.RecurrenceRule.Weekday.CodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type Calendar.RecurrenceRule.Weekday.CodingKeys and conformance Calendar.RecurrenceRule.Weekday.CodingKeys;
  if (!lazy protocol witness table cache variable for type Calendar.RecurrenceRule.Weekday.CodingKeys and conformance Calendar.RecurrenceRule.Weekday.CodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for Calendar.RecurrenceRule.Weekday.CodingKeys,  &type metadata for Calendar.RecurrenceRule.Weekday.CodingKeys);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Calendar.RecurrenceRule.Weekday.CodingKeys and conformance Calendar.RecurrenceRule.Weekday.CodingKeys);
  }

  return result;
}

unint64_t lazy protocol witness table accessor for type Locale.Weekday and conformance Locale.Weekday()
{
  unint64_t result = lazy protocol witness table cache variable for type Locale.Weekday and conformance Locale.Weekday;
  if (!lazy protocol witness table cache variable for type Locale.Weekday and conformance Locale.Weekday)
  {
    unint64_t result = MEMORY[0x186E20D4C](&protocol conformance descriptor for Locale.Weekday, &type metadata for Locale.Weekday);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Locale.Weekday and conformance Locale.Weekday);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type Locale.Weekday and conformance Locale.Weekday;
  if (!lazy protocol witness table cache variable for type Locale.Weekday and conformance Locale.Weekday)
  {
    unint64_t result = MEMORY[0x186E20D4C](&protocol conformance descriptor for Locale.Weekday, &type metadata for Locale.Weekday);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Locale.Weekday and conformance Locale.Weekday);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type Locale.Weekday and conformance Locale.Weekday;
  if (!lazy protocol witness table cache variable for type Locale.Weekday and conformance Locale.Weekday)
  {
    unint64_t result = MEMORY[0x186E20D4C](&protocol conformance descriptor for Locale.Weekday, &type metadata for Locale.Weekday);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Locale.Weekday and conformance Locale.Weekday);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type Locale.Weekday and conformance Locale.Weekday;
  if (!lazy protocol witness table cache variable for type Locale.Weekday and conformance Locale.Weekday)
  {
    unint64_t result = MEMORY[0x186E20D4C](&protocol conformance descriptor for Locale.Weekday, &type metadata for Locale.Weekday);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Locale.Weekday and conformance Locale.Weekday);
  }

  return result;
}

unint64_t lazy protocol witness table accessor for type Calendar.RecurrenceRule.Month.CodingKeys and conformance Calendar.RecurrenceRule.Month.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type Calendar.RecurrenceRule.Month.CodingKeys and conformance Calendar.RecurrenceRule.Month.CodingKeys;
  if (!lazy protocol witness table cache variable for type Calendar.RecurrenceRule.Month.CodingKeys and conformance Calendar.RecurrenceRule.Month.CodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for Calendar.RecurrenceRule.Month.CodingKeys,  &type metadata for Calendar.RecurrenceRule.Month.CodingKeys);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Calendar.RecurrenceRule.Month.CodingKeys and conformance Calendar.RecurrenceRule.Month.CodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type Calendar.RecurrenceRule.Month.CodingKeys and conformance Calendar.RecurrenceRule.Month.CodingKeys;
  if (!lazy protocol witness table cache variable for type Calendar.RecurrenceRule.Month.CodingKeys and conformance Calendar.RecurrenceRule.Month.CodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for Calendar.RecurrenceRule.Month.CodingKeys,  &type metadata for Calendar.RecurrenceRule.Month.CodingKeys);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Calendar.RecurrenceRule.Month.CodingKeys and conformance Calendar.RecurrenceRule.Month.CodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type Calendar.RecurrenceRule.Month.CodingKeys and conformance Calendar.RecurrenceRule.Month.CodingKeys;
  if (!lazy protocol witness table cache variable for type Calendar.RecurrenceRule.Month.CodingKeys and conformance Calendar.RecurrenceRule.Month.CodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for Calendar.RecurrenceRule.Month.CodingKeys,  &type metadata for Calendar.RecurrenceRule.Month.CodingKeys);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Calendar.RecurrenceRule.Month.CodingKeys and conformance Calendar.RecurrenceRule.Month.CodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type Calendar.RecurrenceRule.Month.CodingKeys and conformance Calendar.RecurrenceRule.Month.CodingKeys;
  if (!lazy protocol witness table cache variable for type Calendar.RecurrenceRule.Month.CodingKeys and conformance Calendar.RecurrenceRule.Month.CodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for Calendar.RecurrenceRule.Month.CodingKeys,  &type metadata for Calendar.RecurrenceRule.Month.CodingKeys);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Calendar.RecurrenceRule.Month.CodingKeys and conformance Calendar.RecurrenceRule.Month.CodingKeys);
  }

  return result;
}

unint64_t lazy protocol witness table accessor for type Calendar.RecurrenceRule.CodingKeys and conformance Calendar.RecurrenceRule.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type Calendar.RecurrenceRule.CodingKeys and conformance Calendar.RecurrenceRule.CodingKeys;
  if (!lazy protocol witness table cache variable for type Calendar.RecurrenceRule.CodingKeys and conformance Calendar.RecurrenceRule.CodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for Calendar.RecurrenceRule.CodingKeys,  &type metadata for Calendar.RecurrenceRule.CodingKeys);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Calendar.RecurrenceRule.CodingKeys and conformance Calendar.RecurrenceRule.CodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type Calendar.RecurrenceRule.CodingKeys and conformance Calendar.RecurrenceRule.CodingKeys;
  if (!lazy protocol witness table cache variable for type Calendar.RecurrenceRule.CodingKeys and conformance Calendar.RecurrenceRule.CodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for Calendar.RecurrenceRule.CodingKeys,  &type metadata for Calendar.RecurrenceRule.CodingKeys);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Calendar.RecurrenceRule.CodingKeys and conformance Calendar.RecurrenceRule.CodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type Calendar.RecurrenceRule.CodingKeys and conformance Calendar.RecurrenceRule.CodingKeys;
  if (!lazy protocol witness table cache variable for type Calendar.RecurrenceRule.CodingKeys and conformance Calendar.RecurrenceRule.CodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for Calendar.RecurrenceRule.CodingKeys,  &type metadata for Calendar.RecurrenceRule.CodingKeys);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Calendar.RecurrenceRule.CodingKeys and conformance Calendar.RecurrenceRule.CodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type Calendar.RecurrenceRule.CodingKeys and conformance Calendar.RecurrenceRule.CodingKeys;
  if (!lazy protocol witness table cache variable for type Calendar.RecurrenceRule.CodingKeys and conformance Calendar.RecurrenceRule.CodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for Calendar.RecurrenceRule.CodingKeys,  &type metadata for Calendar.RecurrenceRule.CodingKeys);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Calendar.RecurrenceRule.CodingKeys and conformance Calendar.RecurrenceRule.CodingKeys);
  }

  return result;
}

unint64_t lazy protocol witness table accessor for type Calendar.RecurrenceRule.Frequency and conformance Calendar.RecurrenceRule.Frequency()
{
  unint64_t result = lazy protocol witness table cache variable for type Calendar.RecurrenceRule.Frequency and conformance Calendar.RecurrenceRule.Frequency;
  if (!lazy protocol witness table cache variable for type Calendar.RecurrenceRule.Frequency and conformance Calendar.RecurrenceRule.Frequency)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for Calendar.RecurrenceRule.Frequency,  &type metadata for Calendar.RecurrenceRule.Frequency);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Calendar.RecurrenceRule.Frequency and conformance Calendar.RecurrenceRule.Frequency);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type Calendar.RecurrenceRule.Frequency and conformance Calendar.RecurrenceRule.Frequency;
  if (!lazy protocol witness table cache variable for type Calendar.RecurrenceRule.Frequency and conformance Calendar.RecurrenceRule.Frequency)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for Calendar.RecurrenceRule.Frequency,  &type metadata for Calendar.RecurrenceRule.Frequency);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Calendar.RecurrenceRule.Frequency and conformance Calendar.RecurrenceRule.Frequency);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type Calendar.RecurrenceRule.Frequency and conformance Calendar.RecurrenceRule.Frequency;
  if (!lazy protocol witness table cache variable for type Calendar.RecurrenceRule.Frequency and conformance Calendar.RecurrenceRule.Frequency)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for Calendar.RecurrenceRule.Frequency,  &type metadata for Calendar.RecurrenceRule.Frequency);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Calendar.RecurrenceRule.Frequency and conformance Calendar.RecurrenceRule.Frequency);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type Calendar.RecurrenceRule.Frequency and conformance Calendar.RecurrenceRule.Frequency;
  if (!lazy protocol witness table cache variable for type Calendar.RecurrenceRule.Frequency and conformance Calendar.RecurrenceRule.Frequency)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for Calendar.RecurrenceRule.Frequency,  &type metadata for Calendar.RecurrenceRule.Frequency);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Calendar.RecurrenceRule.Frequency and conformance Calendar.RecurrenceRule.Frequency);
  }

  return result;
}

unint64_t lazy protocol witness table accessor for type Calendar.RecurrenceRule.End and conformance Calendar.RecurrenceRule.End()
{
  unint64_t result = lazy protocol witness table cache variable for type Calendar.RecurrenceRule.End and conformance Calendar.RecurrenceRule.End;
  if (!lazy protocol witness table cache variable for type Calendar.RecurrenceRule.End and conformance Calendar.RecurrenceRule.End)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for Calendar.RecurrenceRule.End,  &type metadata for Calendar.RecurrenceRule.End);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Calendar.RecurrenceRule.End and conformance Calendar.RecurrenceRule.End);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type Calendar.RecurrenceRule.End and conformance Calendar.RecurrenceRule.End;
  if (!lazy protocol witness table cache variable for type Calendar.RecurrenceRule.End and conformance Calendar.RecurrenceRule.End)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for Calendar.RecurrenceRule.End,  &type metadata for Calendar.RecurrenceRule.End);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Calendar.RecurrenceRule.End and conformance Calendar.RecurrenceRule.End);
  }

  return result;
}

unint64_t lazy protocol witness table accessor for type Calendar.MatchingPolicy and conformance Calendar.MatchingPolicy()
{
  unint64_t result = lazy protocol witness table cache variable for type Calendar.MatchingPolicy and conformance Calendar.MatchingPolicy;
  if (!lazy protocol witness table cache variable for type Calendar.MatchingPolicy and conformance Calendar.MatchingPolicy)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for Calendar.MatchingPolicy,  &type metadata for Calendar.MatchingPolicy);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Calendar.MatchingPolicy and conformance Calendar.MatchingPolicy);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type Calendar.MatchingPolicy and conformance Calendar.MatchingPolicy;
  if (!lazy protocol witness table cache variable for type Calendar.MatchingPolicy and conformance Calendar.MatchingPolicy)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for Calendar.MatchingPolicy,  &type metadata for Calendar.MatchingPolicy);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Calendar.MatchingPolicy and conformance Calendar.MatchingPolicy);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type Calendar.MatchingPolicy and conformance Calendar.MatchingPolicy;
  if (!lazy protocol witness table cache variable for type Calendar.MatchingPolicy and conformance Calendar.MatchingPolicy)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for Calendar.MatchingPolicy,  &type metadata for Calendar.MatchingPolicy);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Calendar.MatchingPolicy and conformance Calendar.MatchingPolicy);
  }

  return result;
}

unint64_t lazy protocol witness table accessor for type Calendar.RepeatedTimePolicy and conformance Calendar.RepeatedTimePolicy()
{
  unint64_t result = lazy protocol witness table cache variable for type Calendar.RepeatedTimePolicy and conformance Calendar.RepeatedTimePolicy;
  if (!lazy protocol witness table cache variable for type Calendar.RepeatedTimePolicy and conformance Calendar.RepeatedTimePolicy)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for Calendar.RepeatedTimePolicy,  &type metadata for Calendar.RepeatedTimePolicy);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Calendar.RepeatedTimePolicy and conformance Calendar.RepeatedTimePolicy);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type Calendar.RepeatedTimePolicy and conformance Calendar.RepeatedTimePolicy;
  if (!lazy protocol witness table cache variable for type Calendar.RepeatedTimePolicy and conformance Calendar.RepeatedTimePolicy)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for Calendar.RepeatedTimePolicy,  &type metadata for Calendar.RepeatedTimePolicy);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Calendar.RepeatedTimePolicy and conformance Calendar.RepeatedTimePolicy);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type Calendar.RepeatedTimePolicy and conformance Calendar.RepeatedTimePolicy;
  if (!lazy protocol witness table cache variable for type Calendar.RepeatedTimePolicy and conformance Calendar.RepeatedTimePolicy)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for Calendar.RepeatedTimePolicy,  &type metadata for Calendar.RepeatedTimePolicy);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Calendar.RepeatedTimePolicy and conformance Calendar.RepeatedTimePolicy);
  }

  return result;
}

unint64_t lazy protocol witness table accessor for type Calendar.RecurrenceRule.Month and conformance Calendar.RecurrenceRule.Month()
{
  unint64_t result = lazy protocol witness table cache variable for type Calendar.RecurrenceRule.Month and conformance Calendar.RecurrenceRule.Month;
  if (!lazy protocol witness table cache variable for type Calendar.RecurrenceRule.Month and conformance Calendar.RecurrenceRule.Month)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for Calendar.RecurrenceRule.Month,  &type metadata for Calendar.RecurrenceRule.Month);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Calendar.RecurrenceRule.Month and conformance Calendar.RecurrenceRule.Month);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type Calendar.RecurrenceRule.Month and conformance Calendar.RecurrenceRule.Month;
  if (!lazy protocol witness table cache variable for type Calendar.RecurrenceRule.Month and conformance Calendar.RecurrenceRule.Month)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for Calendar.RecurrenceRule.Month,  &type metadata for Calendar.RecurrenceRule.Month);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Calendar.RecurrenceRule.Month and conformance Calendar.RecurrenceRule.Month);
  }

  return result;
}

unint64_t lazy protocol witness table accessor for type Calendar.RecurrenceRule.Weekday and conformance Calendar.RecurrenceRule.Weekday()
{
  unint64_t result = lazy protocol witness table cache variable for type Calendar.RecurrenceRule.Weekday and conformance Calendar.RecurrenceRule.Weekday;
  if (!lazy protocol witness table cache variable for type Calendar.RecurrenceRule.Weekday and conformance Calendar.RecurrenceRule.Weekday)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for Calendar.RecurrenceRule.Weekday,  &type metadata for Calendar.RecurrenceRule.Weekday);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Calendar.RecurrenceRule.Weekday and conformance Calendar.RecurrenceRule.Weekday);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type Calendar.RecurrenceRule.Weekday and conformance Calendar.RecurrenceRule.Weekday;
  if (!lazy protocol witness table cache variable for type Calendar.RecurrenceRule.Weekday and conformance Calendar.RecurrenceRule.Weekday)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for Calendar.RecurrenceRule.Weekday,  &type metadata for Calendar.RecurrenceRule.Weekday);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Calendar.RecurrenceRule.Weekday and conformance Calendar.RecurrenceRule.Weekday);
  }

  return result;
}

uint64_t lazy protocol witness table accessor for type [Int] and conformance <A> [A]( unint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = *a1;
  if (!result)
  {
    uint64_t v7 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [Int]);
    uint64_t v8 = a2;
    uint64_t result = MEMORY[0x186E20D4C](a3, v7, &v8);
    atomic_store(result, a1);
  }

  return result;
}

uint64_t destroy for Calendar.RecurrenceRule()
{
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for Calendar.RecurrenceRule(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_BYTE *)(a1 + 17) = *(_BYTE *)(a2 + 17);
  *(_BYTE *)(a1 + 18) = *(_BYTE *)(a2 + 18);
  uint64_t v3 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = v3;
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  uint64_t v4 = *(void *)(a2 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = v4;
  uint64_t v5 = *(void *)(a2 + 72);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = v5;
  uint64_t v6 = *(void *)(a2 + 88);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(void *)(a1 + 88) = v6;
  uint64_t v7 = *(void *)(a2 + 104);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  *(void *)(a1 + 104) = v7;
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  swift_unknownObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for Calendar.RecurrenceRule(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  *(void *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_BYTE *)(a1 + 17) = *(_BYTE *)(a2 + 17);
  *(_BYTE *)(a1 + 18) = *(_BYTE *)(a2 + 18);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  uint64_t v5 = *(void *)(a2 + 32);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  *(void *)(a1 + 32) = v5;
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for Calendar.RecurrenceRule(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_BYTE *)(a1 + 17) = *(_BYTE *)(a2 + 17);
  *(_BYTE *)(a1 + 18) = *(_BYTE *)(a2 + 18);
  uint64_t v4 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = v4;
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for Calendar.RecurrenceRule(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0 && *((_BYTE *)a1 + 120)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for Calendar.RecurrenceRule(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(_BYTE *)(result + 120) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)uint64_t result = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 120) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for Calendar.RecurrenceRule()
{
  return &type metadata for Calendar.RecurrenceRule;
}

uint64_t storeEnumTagSinglePayload for Calendar.RecurrenceRule.Frequency( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 5 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 5) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFB) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFA) {
    return ((uint64_t (*)(void))((char *)&loc_18318D104 + 4 * byte_1837BC245[v4]))();
  }
  *a1 = a2 + 5;
  return ((uint64_t (*)(void))((char *)sub_18318D138 + 4 * byte_1837BC240[v4]))();
}

uint64_t sub_18318D138(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_18318D140(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x18318D148LL);
  }
  return result;
}

uint64_t sub_18318D154(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x18318D15CLL);
  }
  *(_BYTE *)uint64_t result = a2 + 5;
  return result;
}

uint64_t sub_18318D160(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_18318D168(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for Calendar.RecurrenceRule.Frequency()
{
  return &type metadata for Calendar.RecurrenceRule.Frequency;
}

ValueMetadata *type metadata accessor for Calendar.RecurrenceRule.End()
{
  return &type metadata for Calendar.RecurrenceRule.End;
}

uint64_t getEnumTagSinglePayload for Calendar.RecurrenceRule.Weekday(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 >= 0x1F && *(_BYTE *)(a1 + 9)) {
    return (*(_DWORD *)a1 + 31);
  }
  unsigned int v3 = ((*(unsigned __int8 *)(a1 + 8) >> 2) & 0x1E | (*(unsigned __int8 *)(a1 + 8) >> 7)) ^ 0x1F;
  if (v3 >= 0x1E) {
    unsigned int v3 = -1;
  }
  return v3 + 1;
}

uint64_t storeEnumTagSinglePayload for Calendar.RecurrenceRule.Weekday( uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x1E)
  {
    *(_BYTE *)(result + 8) = 0;
    *(void *)uint64_t result = a2 - 31;
    if (a3 >= 0x1F) {
      *(_BYTE *)(result + 9) = 1;
    }
  }

  else
  {
    if (a3 >= 0x1F) {
      *(_BYTE *)(result + 9) = 0;
    }
    if (a2)
    {
      *(void *)uint64_t result = 0LL;
      *(_BYTE *)(result + 8) = 8 * (((-a2 >> 1) & 0xF) - 16 * a2);
    }
  }

  return result;
}

uint64_t getEnumTag for Calendar.RecurrenceRule.Weekday(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 8) >> 7;
}

uint64_t destructiveProjectEnumData for Calendar.RecurrenceRule.Weekday(uint64_t result)
{
  *(_BYTE *)(result + 8) &= ~0x80u;
  return result;
}

uint64_t destructiveInjectEnumTag for Calendar.RecurrenceRule.Weekday(uint64_t result, char a2)
{
  *(_BYTE *)(result + 8) = *(_BYTE *)(result + 8) & 7 | (a2 << 7);
  return result;
}

ValueMetadata *type metadata accessor for Calendar.RecurrenceRule.Weekday()
{
  return &type metadata for Calendar.RecurrenceRule.Weekday;
}

uint64_t getEnumTagSinglePayload for Calendar.RecurrenceRule.Month(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 9)) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 8);
  BOOL v4 = v3 >= 2;
  int v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4) {
    int v5 = -1;
  }
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for Calendar.RecurrenceRule.Month( uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_BYTE *)(result + 8) = 0;
    *(void *)uint64_t result = a2 - 255;
    if (a3 >= 0xFF) {
      *(_BYTE *)(result + 9) = 1;
    }
  }

  else
  {
    if (a3 >= 0xFF) {
      *(_BYTE *)(result + 9) = 0;
    }
    if (a2) {
      *(_BYTE *)(result + 8) = a2 + 1;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for Calendar.RecurrenceRule.Month()
{
  return &type metadata for Calendar.RecurrenceRule.Month;
}

unint64_t lazy protocol witness table accessor for type Calendar.DatesByRecurring and conformance Calendar.DatesByRecurring()
{
  unint64_t result = lazy protocol witness table cache variable for type Calendar.DatesByRecurring and conformance Calendar.DatesByRecurring;
  if (!lazy protocol witness table cache variable for type Calendar.DatesByRecurring and conformance Calendar.DatesByRecurring)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for Calendar.DatesByRecurring,  &type metadata for Calendar.DatesByRecurring);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Calendar.DatesByRecurring and conformance Calendar.DatesByRecurring);
  }

  return result;
}

uint64_t getEnumTagSinglePayload for Calendar.RecurrenceRule.End(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 >= 0xFE && *(_BYTE *)(a1 + 9)) {
    return (*(_DWORD *)a1 + 254);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 8);
  if (v3 <= 2) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for Calendar.RecurrenceRule.End( uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(_BYTE *)(result + 8) = 0;
    *(void *)unint64_t result = a2 - 254;
    if (a3 >= 0xFE) {
      *(_BYTE *)(result + 9) = 1;
    }
  }

  else
  {
    if (a3 >= 0xFE) {
      *(_BYTE *)(result + 9) = 0;
    }
    if (a2) {
      *(_BYTE *)(result + 8) = -(char)a2;
    }
  }

  return result;
}

uint64_t getEnumTag for Calendar.RecurrenceRule.End._End(uint64_t a1)
{
  else {
    return (*(_DWORD *)a1 + 2);
  }
}

uint64_t destructiveInjectEnumTag for Calendar.RecurrenceRule.End._End(uint64_t result, unsigned int a2)
{
  if (a2 >= 2)
  {
    *(void *)unint64_t result = a2 - 2;
    LOBYTE(a2) = 2;
  }

  *(_BYTE *)(result + 8) = a2;
  return result;
}

void *type metadata accessor for Calendar.RecurrenceRule.End._End()
{
  return &unk_189C7FB78;
}

uint64_t getEnumTagSinglePayload for Calendar.RecurrenceRule.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0xF2) {
    goto LABEL_17;
  }
  if (a2 + 14 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 14) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 14;
    }
  }

  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 14;
    }

    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 14;
    }
  }

uint64_t storeEnumTagSinglePayload for Calendar.RecurrenceRule.CodingKeys( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 14 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 14) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xF2) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xF1) {
    return ((uint64_t (*)(void))((char *)&loc_18318D51C + 4 * byte_1837BC24F[v4]))();
  }
  *a1 = a2 + 14;
  return ((uint64_t (*)(void))((char *)sub_18318D550 + 4 * byte_1837BC24A[v4]))();
}

uint64_t sub_18318D550(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_18318D558(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x18318D560LL);
  }
  return result;
}

uint64_t sub_18318D56C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x18318D574LL);
  }
  *(_BYTE *)unint64_t result = a2 + 14;
  return result;
}

uint64_t sub_18318D578(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_18318D580(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for Calendar.RecurrenceRule.CodingKeys()
{
  return &type metadata for Calendar.RecurrenceRule.CodingKeys;
}

ValueMetadata *type metadata accessor for Calendar.RecurrenceRule.Month.CodingKeys()
{
  return &type metadata for Calendar.RecurrenceRule.Month.CodingKeys;
}

ValueMetadata *type metadata accessor for Calendar.RecurrenceRule.Weekday.CodingKeys()
{
  return &type metadata for Calendar.RecurrenceRule.Weekday.CodingKeys;
}

uint64_t storeEnumTagSinglePayload for Calendar.RecurrenceRule.Month.CodingKeys( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFE) {
    return ((uint64_t (*)(void))((char *)&loc_18318D60C + 4 * byte_1837BC259[v4]))();
  }
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_18318D640 + 4 * byte_1837BC254[v4]))();
}

uint64_t sub_18318D640(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_18318D648(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x18318D650LL);
  }
  return result;
}

uint64_t sub_18318D65C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x18318D664LL);
  }
  *(_BYTE *)unint64_t result = a2 + 1;
  return result;
}

uint64_t sub_18318D668(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_18318D670(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for Calendar.RecurrenceRule.End.CodingKeys()
{
  return &type metadata for Calendar.RecurrenceRule.End.CodingKeys;
}

unint64_t specialized Calendar.RecurrenceRule.CodingKeys.init(rawValue:)(Swift::String string)
{
  unint64_t object = string._object;
  v2._uint64_t countAndFlagsBits = string._countAndFlagsBits;
  v2._unint64_t object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)( (Swift::OpaquePointer)&outlined read-only object #0 of Calendar.RecurrenceRule.CodingKeys.init(rawValue:),  v2);
  swift_bridgeObjectRelease();
  if (v3 >= 0xF) {
    return 15LL;
  }
  else {
    return v3;
  }
}

uint64_t static DecodingError._typeMismatch(at:expectation:reality:)@<X0>( uint64_t a1@<X1>, void *a2@<X2>, void *a3@<X8>)
{
  v6._uint64_t countAndFlagsBits = _typeName(_:qualified:)();
  String.append(_:)(v6);
  swift_bridgeObjectRelease();
  v7._uint64_t countAndFlagsBits = 0x756F662074756220LL;
  v7._unint64_t object = (void *)0xEB0000000020646ELL;
  String.append(_:)(v7);
  v8._uint64_t countAndFlagsBits = specialized static DecodingError._typeDescription(of:)(a2);
  String.append(_:)(v8);
  swift_bridgeObjectRelease();
  v9._uint64_t countAndFlagsBits = 0x64616574736E6920LL;
  v9._unint64_t object = (void *)0xE90000000000002ELL;
  String.append(_:)(v9);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
  *a3 = a1;
  swift_bridgeObjectRetain();
  DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
  uint64_t v10 = *MEMORY[0x189619358];
  uint64_t v11 = type metadata accessor for DecodingError();
  return (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)(v11 - 8) + 104LL))(a3, v10, v11);
}

uint64_t protocol witness for TopLevelEncoder.encode<A>(_:) in conformance JSONEncoder@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)v1 + 272LL))();
  if (!v2)
  {
    *a1 = result;
    a1[1] = v5;
  }

  return result;
}

uint64_t protocol witness for TopLevelEncoder.encode<A>(_:) in conformance PropertyListEncoder@<X0>( uint64_t *a1@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)v1 + 176LL))();
  if (!v2)
  {
    *a1 = result;
    a1[1] = v5;
  }

  return result;
}

uint64_t protocol witness for TopLevelDecoder.decode<A>(_:from:) in conformance JSONDecoder( uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(uint64_t, void, void, uint64_t, uint64_t))(**(void **)v4 + 320LL))( a1,  *a2,  a2[1],  a3,  a4);
}

uint64_t protocol witness for TopLevelDecoder.decode<A>(_:from:) in conformance PropertyListDecoder( uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(uint64_t, void, void, uint64_t, uint64_t))(**(void **)v4 + 152LL))( a1,  *a2,  a2[1],  a3,  a4);
}

uint64_t specialized static DecodingError._typeDescription(of:)(void *a1)
{
  uint64_t v2 = v8;
  outlined destroy of Any?((uint64_t)&v7);
  if (!v2) {
    return 0x76206C6C756E2061LL;
  }
  outlined init with copy of Any((uint64_t)a1, (uint64_t)&v7);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FixedWidthInteger);
  if (swift_dynamicCast())
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v6);
    outlined init with copy of Any((uint64_t)a1, (uint64_t)&v7);
    unint64_t v3 = &v7;
LABEL_7:
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v3);
    return 0x7265626D756E2061LL;
  }

  outlined init with copy of Any((uint64_t)a1, (uint64_t)&v7);
  outlined init with take of Any(&v7, &v5);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for BinaryFloatingPoint);
  if (swift_dynamicCast())
  {
    unint64_t v3 = (__int128 *)v6;
    goto LABEL_7;
  }

  outlined init with copy of Any((uint64_t)a1, (uint64_t)v6);
  if (swift_dynamicCast())
  {
    swift_bridgeObjectRelease();
    return 0x676E697274732061LL;
  }

  else
  {
    outlined init with copy of Any((uint64_t)a1, (uint64_t)v6);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Any]);
    if (swift_dynamicCast())
    {
      swift_bridgeObjectRelease();
      return 0x7961727261206E61LL;
    }

    else
    {
      outlined init with copy of Any((uint64_t)a1, (uint64_t)v6);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : Any]);
      if (swift_dynamicCast())
      {
        swift_bridgeObjectRelease();
        return 0x6F69746369642061LL;
      }

      else
      {
        __swift_project_boxed_opaque_existential_1(a1, a1[3]);
        swift_getDynamicType();
        return _typeName(_:qualified:)();
      }
    }
  }

double static Calendar.current.getter@<D0>(_OWORD *a1@<X8>)
{
  if (one-time initialization token for cache != -1) {
    swift_once();
  }
  uint64_t v2 = (os_unfair_lock_s *)(static CalendarCache.cache + 60);
  swift_retain_n();
  os_unfair_lock_lock(v2);
  closure #1 in CalendarCache.current.getter((uint64_t *)&v4);
  os_unfair_lock_unlock(v2);
  swift_release_n();
  double result = *(double *)&v4;
  *a1 = v4;
  return result;
}

void __swiftcall WeekendRange.init(onsetTime:ceaseTime:start:end:)( Foundation::WeekendRange *__return_ptr retstr, Swift::Double_optional onsetTime, Swift::Double_optional ceaseTime, Swift::Int start, Swift::Int end)
{
  retstr->onsetTime.value = *(Swift::Double *)&onsetTime.is_nil;
  retstr->onsetTime.is_nil = ceaseTime.is_nil;
  *(void *)&retstr->ceaseTime.value = start;
  retstr->ceaseTime.is_nil = end & 1;
  retstr->start = v5;
  retstr->end = v6;
}

uint64_t Calendar.identifier.getter()
{
  uint64_t v1 = *(void *)(v0 + 8);
  uint64_t ObjectType = swift_getObjectType();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 24))(ObjectType, v1);
}

uint64_t Calendar.timeZone.setter(uint64_t *a1)
{
  uint64_t v2 = *a1;
  uint64_t v3 = a1[1];
  uint64_t v13 = *a1;
  uint64_t v14 = v3;
  uint64_t v4 = v1[1];
  uint64_t ObjectType = swift_getObjectType();
  (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(v4 + 48))(&v12, ObjectType, v4);
  __int128 v11 = v12;
  char v6 = specialized static TimeZone.== infix(_:_:)((uint64_t)&v13, (uint64_t)&v11);
  swift_unknownObjectRelease();
  if ((v6 & 1) != 0) {
    return swift_unknownObjectRelease();
  }
  uint64_t v13 = 0LL;
  uint64_t v14 = 0LL;
  *(void *)&__int128 v12 = v2;
  *((void *)&v12 + 1) = v3;
  uint64_t v8 = (*(uint64_t (**)(uint64_t *, __int128 *, void, uint64_t, void, uint64_t, uint64_t, uint64_t))(v4 + 112))( &v13,  &v12,  0LL,  1LL,  0LL,  1LL,  ObjectType,  v4);
  uint64_t v10 = v9;
  swift_unknownObjectRelease();
  uint64_t result = swift_unknownObjectRelease();
  *uint64_t v1 = v8;
  v1[1] = v10;
  return result;
}

uint64_t Calendar.timeZone.getter()
{
  uint64_t v1 = *(void *)(v0 + 8);
  uint64_t ObjectType = swift_getObjectType();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 48))(ObjectType, v1);
}

uint64_t Calendar.date(from:)(void *__src)
{
  uint64_t v2 = *(void *)(v1 + 8);
  uint64_t ObjectType = swift_getObjectType();
  return (*(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(v2 + 176))(v5, ObjectType, v2);
}

void *Calendar.dateComponents(_:from:)@<X0>(double *a1@<X1>, void *a2@<X8>)
{
  double v4 = *a1;
  __int128 v10 = *v2;
  uint64_t v5 = swift_bridgeObjectRetain();
  Calendar.ComponentSet.init(_:)(v5, &v9);
  double v6 = 1.59271755e13;
  if (v4 <= 1.59271755e13) {
    double v6 = v4;
  }
  double v8 = fmax(v6, -2.11845067e11);
  return Calendar._dateComponents(_:from:)(&v9, &v8, a2);
}

uint64_t Calendar.debugDescription.getter()
{
  return Calendar.description.getter();
}

NSCalendar __swiftcall Calendar._bridgeToObjectiveC()()
{
  uint64_t v1 = *(void *)(v0 + 8);
  uint64_t ObjectType = swift_getObjectType();
  return (NSCalendar)(*(uint64_t (**)(uint64_t, uint64_t))(v1 + 216))(ObjectType, v1);
}

void static Calendar._unconditionallyBridgeFromObjectiveC(_:)(void *a1@<X0>, uint64_t *a2@<X8>)
{
  if (a1)
  {
    type metadata accessor for _NSSwiftCalendar();
    uint64_t v4 = swift_dynamicCastClass();
    if (v4)
    {
      uint64_t v5 = *(void *)(v4 + OBJC_IVAR____NSSwiftCalendar__lock);
      double v6 = (_OWORD *)(v5 + 16);
      __int128 v7 = (os_unfair_lock_s *)(v5 + 32);
      id v8 = a1;
      os_unfair_lock_lock(v7);
      closure #1 in _NSSwiftCalendar.calendar.getter(v6, &v12);
      os_unfair_lock_unlock(v7);

      unint64_t v10 = *((void *)&v12 + 1);
      uint64_t v9 = v12;
    }

    else
    {
      type metadata accessor for _CalendarBridged();
      uint64_t v9 = swift_allocObject();
      *(void *)(v9 + 16) = a1;
      unint64_t v10 = lazy protocol witness table accessor for type _CalendarBridged and conformance _CalendarBridged();
      id v11 = a1;
    }

    *a2 = v9;
    a2[1] = v10;
  }

  else
  {
    __break(1u);
  }

double Calendar.init(identifier:)@<D0>(unsigned __int8 *a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v3 = *a1;
  if (one-time initialization token for cache != -1) {
    swift_once();
  }
  uint64_t v4 = static CalendarCache.cache + 16;
  uint64_t v5 = (os_unfair_lock_s *)(static CalendarCache.cache + 60);
  swift_retain_n();
  os_unfair_lock_lock(v5);
  closure #1 in CalendarCache.fixed(_:)(v4, v3, &v7);
  os_unfair_lock_unlock(v5);
  swift_release_n();
  double result = *(double *)&v7;
  *a2 = v7;
  return result;
}

void *Calendar.locale.setter(uint64_t *a1)
{
  uint64_t v2 = *a1;
  uint64_t v3 = a1[1];
  uint64_t v4 = v1[1];
  uint64_t ObjectType = swift_getObjectType();
  double result = (*(void *(**)(__int128 *__return_ptr, uint64_t, uint64_t))(v4 + 32))(&v14, ObjectType, v4);
  if (v2)
  {
    uint64_t v12 = v2;
    uint64_t v13 = v3;
    if ((void)v14)
    {
      __int128 v11 = v14;
      swift_unknownObjectRetain_n();
      char v7 = specialized static Locale.== infix(_:_:)((uint64_t)&v12, (uint64_t)&v11);
      swift_unknownObjectRelease();
      swift_unknownObjectRelease();
      swift_unknownObjectRelease();
      if ((v7 & 1) != 0) {
        return (void *)swift_unknownObjectRelease();
      }
      goto LABEL_9;
    }

    swift_unknownObjectRetain();
  }

  else if (!(void)v14)
  {
    return result;
  }

  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
LABEL_9:
  *(void *)&__int128 v14 = v2;
  *((void *)&v14 + 1) = v3;
  uint64_t v12 = 0LL;
  uint64_t v13 = 0LL;
  uint64_t v8 = (*(uint64_t (**)(__int128 *, uint64_t *, void, uint64_t, void, uint64_t, uint64_t, uint64_t))(v4 + 112))( &v14,  &v12,  0LL,  1LL,  0LL,  1LL,  ObjectType,  v4);
  uint64_t v10 = v9;
  swift_unknownObjectRelease();
  double result = (void *)swift_unknownObjectRelease();
  *uint64_t v1 = v8;
  v1[1] = v10;
  return result;
}

uint64_t Calendar.Identifier.cfCalendarIdentifier.getter()
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_18318E5E0 + 4 * byte_1837BCCE0[*v0]))( 0x6169726F67657267LL,  0xE90000000000006ELL);
}

uint64_t sub_18318E5E0()
{
  return 0x7473696864647562LL;
}

uint64_t sub_18318E5F8()
{
  return 0x6573656E696863LL;
}

uint64_t sub_18318E610()
{
  return 0x636974706F63LL;
}

uint64_t sub_18318E624()
{
  return 0x6369706F69687465LL;
}

unint64_t sub_18318E63C()
{
  return 0xD000000000000013LL;
}

uint64_t sub_18318E65C()
{
  return 0x776572626568LL;
}

uint64_t sub_18318E670()
{
  return 0x313036386F7369LL;
}

uint64_t sub_18318E688()
{
  return 0x6E6169646E69LL;
}

uint64_t sub_18318E69C()
{
  return 0x63696D616C7369LL;
}

uint64_t sub_18318E6B4()
{
  return 0x2D63696D616C7369LL;
}

unint64_t sub_18318E728()
{
  return 0xD000000000000010LL;
}

uint64_t static Calendar._fromNSCalendarIdentifier(_:)@<X0>(void *a1@<X0>, char *a2@<X8>)
{
  id v4 = static String._unconditionallyBridgeFromObjectiveC(_:)((void *)*MEMORY[0x1896039C8]);
  uint64_t v6 = v5;
  if (v4 == static String._unconditionallyBridgeFromObjectiveC(_:)(a1) && v6 == v7)
  {
    char v11 = 0;
LABEL_13:
    uint64_t result = swift_bridgeObjectRelease_n();
    goto LABEL_14;
  }

  char v9 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  char v11 = 0;
  if ((v9 & 1) != 0) {
    goto LABEL_14;
  }
  id v12 = static String._unconditionallyBridgeFromObjectiveC(_:)((void *)*MEMORY[0x1896039A0]);
  uint64_t v14 = v13;
  if (v12 == static String._unconditionallyBridgeFromObjectiveC(_:)(a1) && v14 == v15)
  {
    char v11 = 1;
    goto LABEL_13;
  }

  char v17 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  if ((v17 & 1) != 0)
  {
    char v11 = 1;
    goto LABEL_14;
  }

  id v18 = static String._unconditionallyBridgeFromObjectiveC(_:)((void *)*MEMORY[0x1896039A8]);
  uint64_t v20 = v19;
  if (v18 == static String._unconditionallyBridgeFromObjectiveC(_:)(a1) && v20 == v21)
  {
    char v11 = 2;
    goto LABEL_13;
  }

  char v22 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  if ((v22 & 1) != 0)
  {
    char v11 = 2;
    goto LABEL_14;
  }

  id v23 = static String._unconditionallyBridgeFromObjectiveC(_:)((void *)*MEMORY[0x1896039B0]);
  uint64_t v25 = v24;
  if (v23 == static String._unconditionallyBridgeFromObjectiveC(_:)(a1) && v25 == v26)
  {
    char v11 = 3;
    goto LABEL_13;
  }

  char v27 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  if ((v27 & 1) != 0)
  {
    char v11 = 3;
    goto LABEL_14;
  }

  id v28 = static String._unconditionallyBridgeFromObjectiveC(_:)((void *)*MEMORY[0x1896039C0]);
  uint64_t v30 = v29;
  if (v28 == static String._unconditionallyBridgeFromObjectiveC(_:)(a1) && v30 == v31)
  {
    char v11 = 4;
    goto LABEL_13;
  }

  char v32 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  if ((v32 & 1) != 0)
  {
    char v11 = 4;
    goto LABEL_14;
  }

  id v33 = static String._unconditionallyBridgeFromObjectiveC(_:)((void *)*MEMORY[0x1896039B8]);
  uint64_t v35 = v34;
  if (v33 == static String._unconditionallyBridgeFromObjectiveC(_:)(a1) && v35 == v36)
  {
    char v11 = 5;
    goto LABEL_13;
  }

  char v37 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  if ((v37 & 1) != 0)
  {
    char v11 = 5;
    goto LABEL_14;
  }

  id v38 = static String._unconditionallyBridgeFromObjectiveC(_:)((void *)*MEMORY[0x1896039D0]);
  uint64_t v40 = v39;
  if (v38 == static String._unconditionallyBridgeFromObjectiveC(_:)(a1) && v40 == v41)
  {
    char v11 = 6;
    goto LABEL_13;
  }

  char v42 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  if ((v42 & 1) != 0)
  {
    char v11 = 6;
    goto LABEL_14;
  }

  id v43 = static String._unconditionallyBridgeFromObjectiveC(_:)((void *)*MEMORY[0x1896039D8]);
  uint64_t v45 = v44;
  if (v43 == static String._unconditionallyBridgeFromObjectiveC(_:)(a1) && v45 == v46)
  {
    char v11 = 7;
    goto LABEL_13;
  }

  char v47 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  if ((v47 & 1) != 0)
  {
    char v11 = 7;
    goto LABEL_14;
  }

  id v48 = static String._unconditionallyBridgeFromObjectiveC(_:)((void *)*MEMORY[0x1896039E0]);
  uint64_t v50 = v49;
  if (v48 == static String._unconditionallyBridgeFromObjectiveC(_:)(a1) && v50 == v51)
  {
    char v11 = 8;
    goto LABEL_13;
  }

  char v52 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  if ((v52 & 1) != 0)
  {
    char v11 = 8;
    goto LABEL_14;
  }

  id v53 = static String._unconditionallyBridgeFromObjectiveC(_:)((void *)*MEMORY[0x1896039E8]);
  uint64_t v55 = v54;
  if (v53 == static String._unconditionallyBridgeFromObjectiveC(_:)(a1) && v55 == v56)
  {
    char v11 = 9;
    goto LABEL_13;
  }

  char v57 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  if ((v57 & 1) != 0)
  {
    char v11 = 9;
    goto LABEL_14;
  }

  id v58 = static String._unconditionallyBridgeFromObjectiveC(_:)((void *)*MEMORY[0x1896039F0]);
  uint64_t v60 = v59;
  if (v58 == static String._unconditionallyBridgeFromObjectiveC(_:)(a1) && v60 == v61)
  {
    char v11 = 10;
    goto LABEL_13;
  }

  char v62 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  if ((v62 & 1) != 0)
  {
    char v11 = 10;
    goto LABEL_14;
  }

  id v63 = static String._unconditionallyBridgeFromObjectiveC(_:)((void *)*MEMORY[0x189603A08]);
  uint64_t v65 = v64;
  if (v63 == static String._unconditionallyBridgeFromObjectiveC(_:)(a1) && v65 == v66)
  {
    char v11 = 11;
    goto LABEL_13;
  }

  char v67 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  if ((v67 & 1) != 0)
  {
    char v11 = 11;
    goto LABEL_14;
  }

  id v68 = static String._unconditionallyBridgeFromObjectiveC(_:)((void *)*MEMORY[0x189603A10]);
  uint64_t v70 = v69;
  if (v68 == static String._unconditionallyBridgeFromObjectiveC(_:)(a1) && v70 == v71)
  {
    char v11 = 12;
    goto LABEL_13;
  }

  char v72 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  if ((v72 & 1) != 0)
  {
    char v11 = 12;
    goto LABEL_14;
  }

  id v73 = static String._unconditionallyBridgeFromObjectiveC(_:)((void *)*MEMORY[0x189603A18]);
  uint64_t v75 = v74;
  if (v73 == static String._unconditionallyBridgeFromObjectiveC(_:)(a1) && v75 == v76)
  {
    char v11 = 13;
    goto LABEL_13;
  }

  char v77 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  if ((v77 & 1) != 0)
  {
    char v11 = 13;
    goto LABEL_14;
  }

  id v78 = static String._unconditionallyBridgeFromObjectiveC(_:)((void *)*MEMORY[0x1896039F8]);
  uint64_t v80 = v79;
  if (v78 == static String._unconditionallyBridgeFromObjectiveC(_:)(a1) && v80 == v81)
  {
    char v11 = 14;
    goto LABEL_13;
  }

  char v82 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  if ((v82 & 1) != 0)
  {
    char v11 = 14;
    goto LABEL_14;
  }

  id v83 = static String._unconditionallyBridgeFromObjectiveC(_:)((void *)*MEMORY[0x189603A00]);
  uint64_t v85 = v84;
  if (v83 == static String._unconditionallyBridgeFromObjectiveC(_:)(a1) && v85 == v86)
  {
    char v11 = 15;
    goto LABEL_13;
  }

  char v87 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  if ((v87 & 1) != 0) {
    char v11 = 15;
  }
  else {
    char v11 = 16;
  }
LABEL_14:
  *a2 = v11;
  return result;
}

uint64_t Calendar.Identifier.cldrIdentifier.getter()
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_18318EEEC + 4 * byte_1837BCCF0[*v0]))( 0x6169726F67657267LL,  0xE90000000000006ELL);
}

uint64_t sub_18318EEEC()
{
  return 0x7473696864647562LL;
}

uint64_t sub_18318EF04()
{
  return 0x6573656E696863LL;
}

uint64_t sub_18318EF1C()
{
  return 0x636974706F63LL;
}

uint64_t sub_18318EF30()
{
  return 0x6369706F69687465LL;
}

uint64_t sub_18318EF48()
{
  return 0x61616F69687465LL;
}

uint64_t sub_18318EF60()
{
  return 0x776572626568LL;
}

uint64_t sub_18318EF74()
{
  return 0x313036386F7369LL;
}

uint64_t sub_18318EF8C()
{
  return 0x6E6169646E69LL;
}

uint64_t sub_18318EFA0()
{
  return 0x63696D616C7369LL;
}

uint64_t sub_18318EFB8()
{
  return 0x2D63696D616C7369LL;
}

unint64_t sub_18318F02C()
{
  return 0xD000000000000010LL;
}

Foundation::Calendar::Identifier_optional __swiftcall Calendar.Identifier.init(identifierString:)( Swift::String identifierString)
{
  uint64_t v2 = v1;
  BOOL v3 = identifierString._countAndFlagsBits == 0x6169726F67657267LL
    && identifierString._object == (void *)0xE90000000000006ELL;
  if (v3
    || (unint64_t object = identifierString._object,
        uint64_t countAndFlagsBits = identifierString._countAndFlagsBits,
        (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
  {
    result.value = swift_bridgeObjectRelease();
    char v7 = 0;
  }

  else if (countAndFlagsBits == 0x7473696864647562LL && object == (void *)0xE800000000000000LL {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    result.value = swift_bridgeObjectRelease();
    char v7 = 1;
  }

  else if (countAndFlagsBits == 0x6573656E696863LL && object == (void *)0xE700000000000000LL {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    result.value = swift_bridgeObjectRelease();
    char v7 = 2;
  }

  else if (countAndFlagsBits == 0x636974706F63LL && object == (void *)0xE600000000000000LL {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    result.value = swift_bridgeObjectRelease();
    char v7 = 3;
  }

  else if (countAndFlagsBits == 0x6369706F69687465LL && object == (void *)0xE800000000000000LL {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    result.value = swift_bridgeObjectRelease();
    char v7 = 4;
  }

  else if (countAndFlagsBits == 0x61616F69687465LL && object == (void *)0xE700000000000000LL {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0
  }
         || countAndFlagsBits == 0xD000000000000013LL && object == (void *)0x80000001839CD6E0LL
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    result.value = swift_bridgeObjectRelease();
    char v7 = 5;
  }

  else if (countAndFlagsBits == 0x776572626568LL && object == (void *)0xE600000000000000LL {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    result.value = swift_bridgeObjectRelease();
    char v7 = 6;
  }

  else if (countAndFlagsBits == 0x313036386F7369LL && object == (void *)0xE700000000000000LL {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    result.value = swift_bridgeObjectRelease();
    char v7 = 7;
  }

  else if (countAndFlagsBits == 0x6E6169646E69LL && object == (void *)0xE600000000000000LL {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    result.value = swift_bridgeObjectRelease();
    char v7 = 8;
  }

  else if (countAndFlagsBits == 0x63696D616C7369LL && object == (void *)0xE700000000000000LL {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    result.value = swift_bridgeObjectRelease();
    char v7 = 9;
  }

  else if (countAndFlagsBits == 0x2D63696D616C7369LL && object == (void *)0xED00006C69766963LL {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    result.value = swift_bridgeObjectRelease();
    char v7 = 10;
  }

  else if (countAndFlagsBits == 0x6573656E6170616ALL && object == (void *)0xE800000000000000LL {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    result.value = swift_bridgeObjectRelease();
    char v7 = 11;
  }

  else if (countAndFlagsBits == 0x6E616973726570LL && object == (void *)0xE700000000000000LL {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    result.value = swift_bridgeObjectRelease();
    char v7 = 12;
  }

  else if (countAndFlagsBits == 6516594 && object == (void *)0xE300000000000000LL {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    result.value = swift_bridgeObjectRelease();
    char v7 = 13;
  }

  else if (countAndFlagsBits == 0x2D63696D616C7369LL && object == (void *)0xEC000000616C6274LL {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    result.value = swift_bridgeObjectRelease();
    char v7 = 14;
  }

  else if (countAndFlagsBits == 0xD000000000000010LL && object == (void *)0x80000001839CD700LL)
  {
    result.value = swift_bridgeObjectRelease();
    char v7 = 15;
  }

  else
  {
    char v8 = _stringCompareWithSmolCheck(_:_:expecting:)();
    result.value = swift_bridgeObjectRelease();
    if ((v8 & 1) != 0) {
      char v7 = 15;
    }
    else {
      char v7 = 16;
    }
  }

  *uint64_t v2 = v7;
  return result;
}

double static Calendar.autoupdatingCurrent.getter@<D0>(_OWORD *a1@<X8>)
{
  if (one-time initialization token for cache != -1) {
    swift_once();
  }
  uint64_t v2 = static CalendarCache.cache + 16;
  BOOL v3 = (os_unfair_lock_s *)(static CalendarCache.cache + 60);
  swift_retain_n();
  os_unfair_lock_lock(v3);
  closure #1 in CalendarCache.autoupdatingCurrent.getter(v2, (uint64_t *)&v5);
  os_unfair_lock_unlock(v3);
  swift_release_n();
  double result = *(double *)&v5;
  *a1 = v5;
  return result;
}

BOOL static Calendar.Identifier.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

void *Calendar.locale.getter@<X0>(void *a1@<X8>)
{
  uint64_t v3 = *(void *)(v1 + 8);
  uint64_t ObjectType = swift_getObjectType();
  double result = (*(void *(**)(void *__return_ptr, uint64_t, uint64_t))(v3 + 32))(v11, ObjectType, v3);
  uint64_t v6 = v11[0];
  if (v11[0])
  {
    uint64_t v7 = v11[1];
  }

  else
  {
    if (one-time initialization token for cache != -1) {
      swift_once();
    }
    uint64_t v8 = static LocaleCache.cache + 16;
    char v9 = (os_unfair_lock_s *)(static LocaleCache.cache + 124);
    swift_retain_n();
    os_unfair_lock_lock(v9);
    closure #1 in LocaleCache.fixed(_:)(v8, 0LL, 0xE000000000000000LL, &v10);
    os_unfair_lock_unlock(v9);
    double result = (void *)swift_release_n();
    uint64_t v7 = *((void *)&v10 + 1);
    uint64_t v6 = v10;
  }

  *a1 = v6;
  a1[1] = v7;
  return result;
}

uint64_t Calendar.firstWeekday.getter()
{
  uint64_t v1 = *(void *)(v0 + 8);
  uint64_t ObjectType = swift_getObjectType();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 56))(ObjectType, v1);
}

uint64_t Calendar.firstWeekday.setter(uint64_t a1)
{
  uint64_t v3 = v1[1];
  uint64_t ObjectType = swift_getObjectType();
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 56))(ObjectType, v3);
  if (result != a1)
  {
    v10[0] = 0LL;
    v10[1] = 0LL;
    v9[0] = 0LL;
    v9[1] = 0LL;
    uint64_t v6 = (*(uint64_t (**)(void *, void *, uint64_t, void, void, uint64_t, uint64_t, uint64_t))(v3 + 112))( v10,  v9,  a1,  0LL,  0LL,  1LL,  ObjectType,  v3);
    uint64_t v8 = v7;
    uint64_t result = swift_unknownObjectRelease();
    *uint64_t v1 = v6;
    v1[1] = v8;
  }

  return result;
}

uint64_t Calendar.minimumDaysInFirstWeek.getter()
{
  uint64_t v1 = *(void *)(v0 + 8);
  uint64_t ObjectType = swift_getObjectType();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 72))(ObjectType, v1);
}

uint64_t Calendar.minimumDaysInFirstWeek.setter(uint64_t a1)
{
  uint64_t v3 = v1[1];
  uint64_t ObjectType = swift_getObjectType();
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 72))(ObjectType, v3);
  if (result != a1)
  {
    v10[0] = 0LL;
    v10[1] = 0LL;
    v9[0] = 0LL;
    v9[1] = 0LL;
    uint64_t v6 = (*(uint64_t (**)(void *, void *, void, uint64_t, uint64_t, void, uint64_t, uint64_t))(v3 + 112))( v10,  v9,  0LL,  1LL,  a1,  0LL,  ObjectType,  v3);
    uint64_t v8 = v7;
    uint64_t result = swift_unknownObjectRelease();
    *uint64_t v1 = v6;
    v1[1] = v8;
  }

  return result;
}

uint64_t Calendar.minimumRange(of:)(char *a1)
{
  char v2 = *a1;
  uint64_t v3 = *(void *)(v1 + 8);
  uint64_t ObjectType = swift_getObjectType();
  char v6 = v2;
  return (*(uint64_t (**)(char *, uint64_t, uint64_t))(v3 + 128))(&v6, ObjectType, v3);
}

uint64_t Calendar.maximumRange(of:)(char *a1)
{
  char v2 = *a1;
  uint64_t v3 = *(void *)(v1 + 8);
  uint64_t ObjectType = swift_getObjectType();
  char v6 = v2;
  return (*(uint64_t (**)(char *, uint64_t, uint64_t))(v3 + 136))(&v6, ObjectType, v3);
}

uint64_t Calendar.range(of:in:for:)(char *a1, char *a2, double *a3)
{
  char v4 = *a2;
  double v5 = *a3;
  uint64_t v6 = *(void *)(v3 + 8);
  char v12 = *a1;
  char v11 = v4;
  if (v5 > 1.59271755e13) {
    double v5 = 1.59271755e13;
  }
  double v7 = fmax(v5, -2.11845067e11);
  uint64_t ObjectType = swift_getObjectType();
  double v10 = v7;
  return (*(uint64_t (**)(char *, char *, double *, uint64_t, uint64_t))(v6 + 144))( &v12,  &v11,  &v10,  ObjectType,  v6);
}

Swift::Int_optional __swiftcall Calendar.ordinality(of:in:for:)( Foundation::Calendar::Component of, Foundation::Calendar::Component in, Foundation::Date a3)
{
  char v5 = *(_BYTE *)in;
  double v6 = *v3;
  uint64_t v7 = *(void *)(v4 + 8);
  char v15 = *(_BYTE *)of;
  char v14 = v5;
  if (v6 > 1.59271755e13) {
    double v6 = 1.59271755e13;
  }
  double v8 = fmax(v6, -2.11845067e11);
  uint64_t ObjectType = swift_getObjectType();
  double v13 = v8;
  Swift::Int v10 = (*(uint64_t (**)(char *, char *, double *, uint64_t, uint64_t))(v7 + 152))( &v15,  &v14,  &v13,  ObjectType,  v7);
  Swift::Bool v12 = v11 & 1;
  result.value = v10;
  result.is_nil = v12;
  return result;
}

Foundation::DateInterval_optional __swiftcall Calendar.dateInterval(of:for:)( Foundation::Calendar::Component of, Foundation::Date a2)
{
  double v4 = *v2;
  uint64_t v5 = *(void *)(v3 + 8);
  char v12 = *(_BYTE *)of;
  if (v4 > 1.59271755e13) {
    double v4 = 1.59271755e13;
  }
  double v6 = fmax(v4, -2.11845067e11);
  uint64_t ObjectType = swift_getObjectType();
  double v11 = v6;
  char v8 = (*(uint64_t (**)(char *, double *, uint64_t, uint64_t))(v5 + 160))(&v12, &v11, ObjectType, v5);
  result.value.duration = v10;
  result.value.start._time = v9;
  result.is_nil = v8;
  return result;
}

Swift::Int __swiftcall Calendar.component(_:from:)(Foundation::Calendar::Component _, Foundation::Date from)
{
  __asm { BR              X11 }

  return result;
}

uint64_t sub_18318FD3C(double a1)
{
  uint64_t v3 = 1LL;
  double v2 = a1;
  Calendar._dateComponents(_:from:)(&v3, &v2, v4);
  memcpy(v5, v4, 0x11AuLL);
  outlined release of DateComponents((uint64_t)v5);
  if (LOBYTE(v5[5]) == 1) {
    return 0LL;
  }
  else {
    return v5[4];
  }
}

void sub_183190188( int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, double a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, char __src, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, uint64_t a44, uint64_t a45, uint64_t a46, uint64_t a47, uint64_t a48, uint64_t a49, char __dst,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,char a63)
{
  a11 = 0x40000LL;
  a10 = *(void *)&a9;
  Calendar._dateComponents(_:from:)(&a11, (double *)&a10, &__src);
  memcpy(&__dst, &__src, 0x11AuLL);
  outlined release of DateComponents((uint64_t)&__dst);
  if ((a63 & 1) == 0) {
    JUMPOUT(0x183190174LL);
  }
  JUMPOUT(0x183190170LL);
}

uint64_t Calendar.date(byAdding:to:wrappingComponents:)(void *__src, double *a2, uint64_t a3)
{
  double v6 = *a2;
  uint64_t v7 = *(void *)(v3 + 8);
  if (*a2 > 1.59271755e13) {
    double v6 = 1.59271755e13;
  }
  double v8 = fmax(v6, -2.11845067e11);
  uint64_t ObjectType = swift_getObjectType();
  double v11 = v8;
  return (*(uint64_t (**)(_BYTE *, double *, uint64_t, uint64_t, uint64_t))(v7 + 200))( __dst,  &v11,  a3,  ObjectType,  v7);
}

void *Calendar.dateComponents(_:from:to:)@<X0>( uint64_t a1@<X0>, double *a2@<X1>, double *a3@<X2>, void *a4@<X8>)
{
  double v7 = *a2;
  double v8 = *a3;
  uint64_t v10 = *v4;
  uint64_t v9 = v4[1];
  uint64_t v11 = swift_bridgeObjectRetain();
  Calendar.ComponentSet.init(_:)(v11, v17);
  double v12 = 1.59271755e13;
  if (v7 <= 1.59271755e13) {
    double v13 = v7;
  }
  else {
    double v13 = 1.59271755e13;
  }
  double v19 = fmax(v13, -2.11845067e11);
  if (v8 <= 1.59271755e13) {
    double v12 = v8;
  }
  double v14 = fmax(v12, -2.11845067e11);
  uint64_t ObjectType = swift_getObjectType();
  double v18 = v14;
  (*(void (**)(void *__return_ptr, uint64_t *, double *, double *, uint64_t, uint64_t))(v9 + 208))( __src,  v17,  &v19,  &v18,  ObjectType,  v9);
  if (specialized Set.contains(_:)(0xEu, a1))
  {
    swift_unknownObjectRetain();
    swift_unknownObjectRelease();
    __src[0] = v10;
    __src[1] = v9;
    if (__src[2])
    {
      v17[0] = __src[2];
      v17[1] = __src[3];
      swift_unknownObjectRetain();
      Calendar.timeZone.setter(v17);
    }
  }

  return memcpy(a4, __src, 0x11AuLL);
}

uint64_t Calendar.dateComponents(in:from:)@<X0>(__int128 *a1@<X0>, double *a2@<X1>, void *a3@<X8>)
{
  double v6 = *a2;
  uint64_t v7 = *v3;
  uint64_t v8 = v3[1];
  uint64_t v15 = 327679LL;
  if (v6 > 1.59271755e13) {
    double v6 = 1.59271755e13;
  }
  double v9 = fmax(v6, -2.11845067e11);
  uint64_t ObjectType = swift_getObjectType();
  double v14 = v9;
  __int128 v13 = *a1;
  (*(void (**)(uint64_t *, double *, __int128 *, uint64_t, uint64_t))(v8 + 184))( &v15,  &v14,  &v13,  ObjectType,  v8);
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  *a3 = v7;
  a3[1] = v8;
  uint64_t result = a3[2];
  if (result)
  {
    uint64_t v12 = a3[3];
    *(void *)&__int128 v13 = a3[2];
    *((void *)&v13 + 1) = v12;
    swift_unknownObjectRetain();
    return Calendar.timeZone.setter((uint64_t *)&v13);
  }

  return result;
}

Swift::Bool __swiftcall Calendar.isDateInWeekend(_:)(Foundation::Date a1)
{
  double v3 = *v1;
  uint64_t v4 = *(void *)(v2 + 8);
  if (*v1 > 1.59271755e13) {
    double v3 = 1.59271755e13;
  }
  double v5 = fmax(v3, -2.11845067e11);
  uint64_t ObjectType = swift_getObjectType();
  double v8 = v5;
  return (*(uint64_t (**)(double *, uint64_t, uint64_t))(v4 + 168))(&v8, ObjectType, v4) & 1;
}

Foundation::DateInterval_optional __swiftcall Calendar.nextWeekend(startingAfter:direction:)( Foundation::Date startingAfter, Foundation::Calendar::SearchDirection direction)
{
  void (*v24)(__int128 *__return_ptr, double *, __int128 *, uint64_t, uint64_t);
  double v25;
  double v26;
  double v27;
  double v28;
  uint64_t v29;
  __int128 v30;
  double v31;
  double v32;
  char v33;
  __int128 v34[18];
  double v35;
  double v36;
  char v37;
  double v38;
  uint64_t v39;
  __int16 v40;
  __int128 __dst[18];
  void __src[37];
  Foundation::DateInterval_optional result;
  uint64_t v5 = v3;
  uint64_t v6 = *(uint64_t *)direction;
  unsigned __int8 v7 = *v2;
  double v9 = *v4;
  uint64_t v8 = *((void *)v4 + 1);
  *(double *)__src = *v4;
  __src[1] = v8;
  unsigned __int8 v10 = Calendar.locale.getter(__dst);
  if (!*(void *)&__dst[0]
    || (uint64_t v13 = *((void *)&__dst[0] + 1),
        uint64_t ObjectType = swift_getObjectType(),
        (*(void (**)(void *__return_ptr, uint64_t, uint64_t))(v13 + 336))(__src, ObjectType, v13),
        unsigned __int8 v10 = swift_unknownObjectRelease(),
        (__src[6] & 1) != 0))
  {
    *(void *)uint64_t v5 = 0LL;
    *(void *)(v5 + 8) = 0LL;
LABEL_4:
    *(_BYTE *)(v5 + 16) = 1;
    goto LABEL_33;
  }

  double v15 = *(double *)__src;
  char v16 = __src[1];
  double v17 = *(double *)&__src[2];
  char v18 = __src[3];
  uint64_t v19 = __src[5];
  __dst[0] = 0uLL;
  v34[0] = 0uLL;
  DateComponents.init(calendar:timeZone:era:year:month:day:hour:minute:second:nanosecond:weekday:weekdayOrdinal:quarter:weekOfMonth:weekOfYear:yearForWeekOfYear:)( __dst,  (uint64_t *)v34,  0LL,  1,  0LL,  1,  0LL,  1,  (uint64_t)__src,  0LL,  1,  0LL,  1,  0LL,  1,  0LL,  1,  0LL,  1,  __src[4],  0,  0LL,  1,  0LL,  1,  0LL,  1,  0LL,  1,  0LL,  1);
  *(double *)uint64_t v34 = v9;
  *((void *)&v34[0] + 1) = v8;
  uint64_t v36 = *(double *)&v6;
  memcpy(__dst, __src, 0x11AuLL);
  LOBYTE(v35) = 0;
  uint64_t v40 = v7;
  Calendar.nextDate(after:matching:matchingPolicy:repeatedTimePolicy:direction:)( (uint64_t *)&v36,  __dst,  (char *)&v35,  (char *)&v40 + 1,  (char *)&v40,  (uint64_t)&v38);
  if ((v39 & 1) != 0)
  {
    unsigned __int8 v10 = outlined release of DateComponents((uint64_t)__src);
    *(void *)uint64_t v5 = 0LL;
    *(void *)(v5 + 8) = 0LL;
    *(_BYTE *)(v5 + 16) = 1;
    goto LABEL_33;
  }

  double v20 = v38;
  if ((v16 & 1) == 0) {
    double v20 = v15 + v38;
  }
  LOBYTE(v38) = 3;
  double v21 = 1.59271755e13;
  if (v20 <= 1.59271755e13) {
    double v21 = v20;
  }
  double v22 = fmax(v21, -2.11845067e11);
  uint64_t v23 = swift_getObjectType();
  *(double *)uint64_t v34 = v22;
  uint64_t v24 = *(void (**)(__int128 *__return_ptr, double *, __int128 *, uint64_t, uint64_t))(v8 + 160);
  v24(__dst, &v38, v34, v23, v8);
  if ((__dst[1] & 1) != 0) {
    uint64_t v25 = v20 + -1.0;
  }
  else {
    uint64_t v25 = *(double *)__dst;
  }
  v34[0] = 0uLL;
  id v38 = 0.0;
  uint64_t v39 = 0LL;
  DateComponents.init(calendar:timeZone:era:year:month:day:hour:minute:second:nanosecond:weekday:weekdayOrdinal:quarter:weekOfMonth:weekOfYear:yearForWeekOfYear:)( v34,  (uint64_t *)&v38,  0LL,  1,  0LL,  1,  0LL,  1,  (uint64_t)__dst,  0LL,  1,  0LL,  1,  0LL,  1,  0LL,  1,  0LL,  1,  v19,  0,  0LL,  1,  0LL,  1,  0LL,  1,  0LL,  1,  0LL,  1);
  id v38 = v9;
  uint64_t v39 = v8;
  uint64_t v35 = v25;
  memcpy(v34, __dst, 0x11AuLL);
  uint64_t v40 = 0;
  id v33 = 0;
  Calendar.nextDate(after:matching:matchingPolicy:repeatedTimePolicy:direction:)( (uint64_t *)&v35,  v34,  (char *)&v40 + 1,  (char *)&v40,  &v33,  (uint64_t)&v36);
  if ((v37 & 1) != 0)
  {
    outlined release of DateComponents((uint64_t)__dst);
    unsigned __int8 v10 = outlined release of DateComponents((uint64_t)__src);
    *(void *)uint64_t v5 = 0LL;
    *(void *)(v5 + 8) = 0LL;
    *(_BYTE *)(v5 + 16) = 1;
    goto LABEL_33;
  }

  uint64_t v26 = v36;
  if ((v18 & 1) != 0 || v17 <= 0.0)
  {
    LOBYTE(v36) = 3;
    if (v26 <= 1.59271755e13) {
      char v27 = v26;
    }
    else {
      char v27 = 1.59271755e13;
    }
    id v28 = fmax(v27, -2.11845067e11);
    uint64_t v29 = swift_getObjectType();
    id v38 = v28;
    v24(v34, &v36, (__int128 *)&v38, v29, v8);
    uint64_t v30 = v34[0];
    if ((v34[1] & 1) != 0)
    {
      outlined release of DateComponents((uint64_t)__dst);
      unsigned __int8 v10 = outlined release of DateComponents((uint64_t)__src);
      *(_OWORD *)uint64_t v5 = v30;
      goto LABEL_4;
    }

    uint64_t v31 = *(double *)v34 + *((double *)v34 + 1);
    LOBYTE(v36) = 3;
    else {
      char v32 = 1.59271755e13;
    }
    id v38 = fmax(v32, -2.11845067e11);
    v24(v34, &v36, (__int128 *)&v38, v29, v8);
    outlined release of DateComponents((uint64_t)__dst);
    unsigned __int8 v10 = outlined release of DateComponents((uint64_t)__src);
    if ((v34[1] & 1) != 0) {
      double v11 = v31 + -1.0;
    }
    else {
      double v11 = *(double *)v34;
    }
  }

  else
  {
    outlined release of DateComponents((uint64_t)__dst);
    unsigned __int8 v10 = outlined release of DateComponents((uint64_t)__src);
    double v11 = v17 + v26;
  }

  if (v11 < v25)
  {
    __break(1u);
  }

  else
  {
    double v11 = v11 - v25;
    *(double *)uint64_t v5 = v25;
    *(double *)(v5 + 8) = v11;
    *(_BYTE *)(v5 + 16) = 0;
  }

uint64_t Calendar.enumerateDates(startingAfter:matching:matchingPolicy:repeatedTimePolicy:direction:using:)( double *a1, const void *a2, unsigned __int8 *a3, unsigned __int8 *a4, unsigned __int8 *a5, uint64_t (*a6)(void, void, void))
{
  double v11 = *a1;
  memcpy(__dst, a2, 0x11AuLL);
  unsigned __int8 v12 = *a3;
  unsigned __int8 v13 = *a4;
  unsigned __int8 v14 = *a5;
  __int128 v21 = *v6;
  double v20 = v11;
  unsigned __int8 v18 = v12;
  unsigned __int8 v17 = v13;
  unsigned __int8 v16 = v14;
  return Calendar._enumerateDates(startingAfter:matching:matchingPolicy:repeatedTimePolicy:direction:using:)( &v20,  __dst,  &v18,  &v17,  &v16,  a6);
}

NSComparisonResult __swiftcall Calendar.compare(_:to:toGranularity:)( Foundation::Date _, Foundation::Date to, Foundation::Calendar::Component toGranularity)
{
  double v6 = *(double *)toGranularity;
  double v7 = *v3;
  uint64_t v8 = -1LL;
  if (v6 == v7) {
    NSComparisonResult v9 = NSOrderedSame;
  }
  else {
    NSComparisonResult v9 = v8;
  }
  if (v6 < -2.11845067e11 || v6 > 1.59271755e13 || v7 < -2.11845067e11 || v7 > 1.59271755e13) {
    return v9;
  }
  uint64_t v11 = *v5;
  uint64_t v10 = v5[1];
  NSComparisonResult result = NSOrderedSame;
  unsigned __int8 v13 = (char *)&outlined read-only object #0 of Calendar.compare(_:to:toGranularity:);
  switch(*v4)
  {
    case 3:
    case 4:
      LOBYTE(v42[0]) = *v4;
      double v14 = fmax(v6, -2.11845067e11);
      uint64_t ObjectType = swift_getObjectType();
      v35[0] = v14;
      (*(void (**)(double *__return_ptr, void *, double *, uint64_t, uint64_t))(v10 + 160))( &v38,  v42,  v35,  ObjectType,  v10);
      if ((v40 & 1) != 0) {
        return v9;
      }
      if (v39 + v38 < v38)
      {
        __break(1u);
        goto LABEL_51;
      }

      if (v7 < v39 + v38) {
        NSComparisonResult v33 = NSOrderedSame;
      }
      else {
        NSComparisonResult v33 = NSOrderedAscending;
      }
      if (v7 >= v38) {
        return v33;
      }
      else {
        return 1LL;
      }
    case 5:
      double v16 = floor(floor(v6) / 60.0);
      double v17 = floor(floor(v7) / 60.0);
      goto LABEL_37;
    case 6:
      double v18 = floor(v6);
      double v19 = floor(v7);
      NSComparisonResult v20 = NSOrderedAscending;
      if (v19 < v18) {
        NSComparisonResult v20 = NSOrderedDescending;
      }
      if (v18 == v19) {
        return 0LL;
      }
      else {
        return v20;
      }
    case 7:
    case 0xA:
      unsigned __int8 v13 = (char *)&outlined read-only object #2 of Calendar.compare(_:to:toGranularity:);
      goto LABEL_22;
    case 8:
      unsigned __int8 v13 = (char *)&outlined read-only object #1 of Calendar.compare(_:to:toGranularity:);
      goto LABEL_22;
    case 0xB:
    case 0xC:
      goto LABEL_22;
    case 0xD:
      double v30 = trunc(v6);
      double v31 = trunc(v7);
      if (v30 == v31)
      {
        double v14 = (v6 - v30) * 1000000000.0;
        double v7 = (v7 - v31) * 1000000000.0;
        if (one-time initialization token for compatibility1 != -1) {
LABEL_51:
        }
          swift_once();
        double v16 = trunc(v14);
        double v17 = trunc(v7);
        if (static Calendar.compatibility1 == 1)
        {
          if (v16 != v17) {
            return (unint64_t)(v16 < v17);
          }
          return 0LL;
        }

Swift::Int Calendar.date(_:matchesComponents:)(double *a1, const void *a2)
{
  void (*v26)(_OWORD *__return_ptr, _OWORD *, double *, uint64_t, uint64_t);
  uint64_t v27;
  uint64_t v28;
  char v29;
  uint64_t v30;
  BOOL v31;
  __int128 v32[18];
  double v33[36];
  _OWORD __src[18];
  _OWORD v35[18];
  __int128 v36;
  __int128 v37;
  uint64_t v38;
  char v39;
  uint64_t v40;
  char v41;
  uint64_t v42;
  char v43;
  uint64_t v44;
  char v45;
  uint64_t v46;
  char v47;
  uint64_t v48;
  char v49;
  uint64_t v50;
  char v51;
  uint64_t v52;
  char v53;
  uint64_t v54;
  char v55;
  uint64_t v56;
  char v57;
  uint64_t v58;
  char v59;
  uint64_t v60;
  char v61;
  uint64_t v62;
  char v63;
  uint64_t v64;
  char v65;
  uint64_t v66;
  char v67;
  uint64_t v68;
  __int16 v69;
  _OWORD __dst[19];
  double v3 = *a1;
  memcpy(__dst, a2, 0x11AuLL);
  uint64_t v4 = *v2;
  uint64_t v5 = v2[1];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<Calendar.Component>);
  uint64_t v6 = static _SetStorage.allocate(capacity:)();
  uint64_t v7 = 0LL;
  uint64_t v8 = v6 + 56;
  do
  {
    Swift::UInt v12 = outlined read-only object #0 of Calendar.date(_:matchesComponents:)[v7 + 32];
    Hasher.init(_seed:)();
    Hasher._combine(_:)(v12);
    Swift::Int result = Hasher._finalize()();
    uint64_t v14 = -1LL << *(_BYTE *)(v6 + 32);
    unint64_t v15 = result & ~v14;
    unint64_t v16 = v15 >> 6;
    uint64_t v17 = *(void *)(v8 + 8 * (v15 >> 6));
    uint64_t v18 = 1LL << v15;
    uint64_t v19 = *(void *)(v6 + 48);
    if (((1LL << v15) & v17) != 0)
    {
      uint64_t v20 = ~v14;
      while (1)
      {
        unint64_t v15 = (v15 + 1) & v20;
        unint64_t v16 = v15 >> 6;
        uint64_t v17 = *(void *)(v8 + 8 * (v15 >> 6));
        uint64_t v18 = 1LL << v15;
        if ((v17 & (1LL << v15)) == 0) {
          break;
        }
      }
    }

    *(void *)(v8 + 8 * v16) = v18 | v17;
    *(_BYTE *)(v19 + v15) = v12;
    uint64_t v9 = *(void *)(v6 + 16);
    BOOL v10 = __OFADD__(v9, 1LL);
    uint64_t v11 = v9 + 1;
    if (v10)
    {
      __break(1u);
      goto LABEL_27;
    }

    *(void *)(v6 + 16) = v11;
LABEL_4:
    ++v7;
  }

  while (v7 != 15);
  outlined retain of DateComponents((uint64_t)__dst);
  specialized _NativeSet.filter(_:)(v6);
  outlined release of DateComponents((uint64_t)__dst);
  *(void *)&v35[0] = v4;
  *((void *)&v35[0] + 1) = v5;
  uint64_t v21 = swift_bridgeObjectRetain();
  Calendar.ComponentSet.init(_:)(v21, __src);
  double v22 = 1.59271755e13;
  if (v3 <= 1.59271755e13) {
    double v22 = v3;
  }
  double v23 = fmax(v22, -2.11845067e11);
  v33[0] = v23;
  Calendar._dateComponents(_:from:)((uint64_t *)__src, v33, &v36);
  swift_release();
  char v24 = BYTE9(__dst[17]);
  if (BYTE9(__dst[17]) == 2)
  {
    Swift::Int result = outlined retain of DateComponents((uint64_t)__dst);
  }

  else
  {
    *(void *)&__src[0] = 4LL;
    uint64_t ObjectType = swift_getObjectType();
    v33[0] = v23;
    uint64_t v26 = *(void (**)(_OWORD *__return_ptr, _OWORD *, double *, uint64_t, uint64_t))(v5 + 192);
    outlined retain of DateComponents((uint64_t)__dst);
    v26(v35, __src, v33, ObjectType, v5);
    Swift::Int result = outlined release of DateComponents((uint64_t)v35);
    HIBYTE(v69) = BYTE9(v35[17]);
  }

  uint64_t v27 = *(void *)&__dst[10];
  unsigned int v28 = v54;
  uint64_t v29 = v55 ^ 1 | BYTE8(__dst[10]);
  if ((v55 & 1) != 0 || (BYTE8(__dst[10]) & 1) != 0) {
    goto LABEL_24;
  }
  double v30 = v54 - *(void *)&__dst[10];
  if (!__OFSUB__(v54, *(void *)&__dst[10]))
  {
    if (v30 < 0) {
      double v30 = *(void *)&__dst[10] - v54;
    }
    if ((unint64_t)v30 >= 0x1F5)
    {
      outlined release of DateComponents((uint64_t)__dst);
      *(void *)&v35[2] = v38;
      BYTE8(v35[2]) = v39;
      *(void *)&v35[3] = v40;
      BYTE8(v35[3]) = v41;
      *(void *)&double v35[4] = v42;
      BYTE8(v35[4]) = v43;
      *(void *)&v35[5] = v44;
      BYTE8(v35[5]) = v45;
      *(void *)&v35[6] = v46;
      BYTE8(v35[6]) = v47;
      *(void *)&v35[7] = v48;
      BYTE8(v35[7]) = v49;
      *(void *)&v35[8] = v50;
      BYTE8(v35[8]) = v51;
      *(void *)&v35[9] = v52;
      BYTE8(v35[9]) = v53;
      *(void *)&v35[10] = v28;
      *(void *)&v35[11] = v56;
      BYTE8(v35[11]) = v57;
      *(void *)&v35[12] = v58;
      BYTE8(v35[12]) = v59;
      *(void *)&v35[13] = v60;
      BYTE8(v35[13]) = v61;
      *(void *)&v35[14] = v62;
      BYTE8(v35[14]) = v63;
      *(void *)&v35[15] = v64;
      BYTE8(v35[15]) = v65;
      BYTE8(v35[16]) = v67;
      WORD4(v35[17]) = v69;
      *(void *)&v35[16] = v66;
      *(void *)&v35[17] = v68;
      v35[0] = v36;
      v35[1] = v37;
      BYTE8(v35[10]) = 0;
      outlined release of DateComponents((uint64_t)v35);
      return 0;
    }

    unsigned int v28 = 0LL;
    uint64_t v27 = 0LL;
    uint64_t v29 = 0;
LABEL_24:
    *(void *)&__src[2] = *(void *)&__dst[2];
    BYTE8(__src[2]) = BYTE8(__dst[2]);
    *(void *)&__src[3] = *(void *)&__dst[3];
    BYTE8(__src[3]) = BYTE8(__dst[3]);
    *(void *)&__src[4] = *(void *)&__dst[4];
    BYTE8(__src[4]) = BYTE8(__dst[4]);
    *(void *)&__src[5] = *(void *)&__dst[5];
    BYTE8(__src[5]) = BYTE8(__dst[5]);
    *(void *)&__src[6] = *(void *)&__dst[6];
    BYTE8(__src[6]) = BYTE8(__dst[6]);
    *(void *)&__src[7] = *(void *)&__dst[7];
    BYTE8(__src[7]) = BYTE8(__dst[7]);
    *(void *)&__src[8] = *(void *)&__dst[8];
    BYTE8(__src[8]) = BYTE8(__dst[8]);
    *(void *)&__src[9] = *(void *)&__dst[9];
    BYTE8(__src[9]) = BYTE8(__dst[9]);
    *(void *)&__src[10] = v27;
    BYTE8(__src[10]) = v29;
    *(void *)&__src[11] = *(void *)&__dst[11];
    BYTE8(__src[11]) = BYTE8(__dst[11]);
    *(void *)&__src[12] = *(void *)&__dst[12];
    BYTE8(__src[12]) = BYTE8(__dst[12]);
    *(void *)&__src[13] = *(void *)&__dst[13];
    BYTE8(__src[13]) = BYTE8(__dst[13]);
    *(void *)&__src[14] = *(void *)&__dst[14];
    BYTE8(__src[14]) = BYTE8(__dst[14]);
    *(void *)&__src[15] = *(void *)&__dst[15];
    BYTE8(__src[15]) = BYTE8(__dst[15]);
    BYTE8(__src[16]) = BYTE8(__dst[16]);
    BYTE8(__src[17]) = BYTE8(__dst[17]);
    *(void *)&__src[16] = *(void *)&__dst[16];
    *(void *)&__src[17] = *(void *)&__dst[17];
    BYTE9(__src[17]) = v24;
    __src[0] = __dst[0];
    __src[1] = __dst[1];
    memcpy(v33, __src, 0x11AuLL);
    *(void *)&v35[2] = v38;
    BYTE8(v35[2]) = v39;
    *(void *)&v35[3] = v40;
    BYTE8(v35[3]) = v41;
    *(void *)&double v35[4] = v42;
    BYTE8(v35[4]) = v43;
    *(void *)&v35[5] = v44;
    BYTE8(v35[5]) = v45;
    *(void *)&v35[6] = v46;
    BYTE8(v35[6]) = v47;
    *(void *)&v35[7] = v48;
    BYTE8(v35[7]) = v49;
    *(void *)&v35[8] = v50;
    BYTE8(v35[8]) = v51;
    *(void *)&v35[9] = v52;
    BYTE8(v35[9]) = v53;
    *(void *)&v35[10] = v28;
    BYTE8(v35[10]) = v55;
    *(void *)&v35[11] = v56;
    BYTE8(v35[11]) = v57;
    *(void *)&v35[12] = v58;
    BYTE8(v35[12]) = v59;
    *(void *)&v35[13] = v60;
    BYTE8(v35[13]) = v61;
    *(void *)&v35[14] = v62;
    BYTE8(v35[14]) = v63;
    *(void *)&v35[15] = v64;
    BYTE8(v35[15]) = v65;
    BYTE8(v35[16]) = v67;
    WORD4(v35[17]) = v69;
    *(void *)&v35[16] = v66;
    *(void *)&v35[17] = v68;
    v35[0] = v36;
    v35[1] = v37;
    memcpy(v32, v35, 0x11AuLL);
    double v31 = specialized static DateComponents.== infix(_:_:)((uint64_t)v33, v32);
    outlined release of DateComponents((uint64_t)__src);
    outlined release of DateComponents((uint64_t)v35);
    return v31;
  }

void *Calendar.dateComponents(_:from:to:)@<X0>( uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, void *a4@<X8>)
{
  void (*v14)(double *__return_ptr, __int128 *, uint64_t, uint64_t);
  uint64_t v15;
  double v16;
  int v17;
  uint64_t v18;
  void (*v19)(double *__return_ptr, __int128 *, uint64_t, uint64_t);
  double v20;
  double v22;
  double v23;
  double v26;
  double v27;
  uint64_t v28;
  __int128 v29;
  _BYTE v30[266];
  uint64_t v5 = *a2;
  uint64_t v6 = a2[1];
  uint64_t v7 = a2 + 2;
  uint64_t v9 = *a3;
  uint64_t v8 = a3[1];
  BOOL v10 = a3 + 2;
  uint64_t v11 = *v4;
  uint64_t v12 = v4[1];
  if (*a2)
  {
    uint64_t ObjectType = swift_getObjectType();
    *(void *)&uint64_t v29 = v5;
    *((void *)&v29 + 1) = v6;
    memcpy(v30, v7, sizeof(v30));
    uint64_t v14 = *(void (**)(double *__return_ptr, __int128 *, uint64_t, uint64_t))(v6 + 176);
    swift_unknownObjectRetain();
    v14(&v27, &v29, ObjectType, v6);
    swift_unknownObjectRelease();
  }

  else
  {
    unint64_t v15 = swift_getObjectType();
    *(void *)&uint64_t v29 = 0LL;
    *((void *)&v29 + 1) = v6;
    memcpy(v30, v7, sizeof(v30));
    (*(void (**)(double *__return_ptr, __int128 *, uint64_t, uint64_t))(v12 + 176))(&v27, &v29, v15, v12);
  }

  unint64_t v16 = v27;
  uint64_t v17 = v28;
  uint64_t v18 = swift_getObjectType();
  if (v9)
  {
    *(void *)&uint64_t v29 = v9;
    *((void *)&v29 + 1) = v8;
    memcpy(v30, v10, sizeof(v30));
    uint64_t v19 = *(void (**)(double *__return_ptr, __int128 *, uint64_t, uint64_t))(v8 + 176);
    swift_unknownObjectRetain();
    v19(&v27, &v29, v18, v8);
    swift_unknownObjectRelease();
  }

  else
  {
    *(void *)&uint64_t v29 = 0LL;
    *((void *)&v29 + 1) = v8;
    memcpy(v30, v10, sizeof(v30));
    (*(void (**)(double *__return_ptr, __int128 *, uint64_t, uint64_t))(v12 + 176))(&v27, &v29, v18, v12);
  }

  uint64_t v20 = v27;
  if (((v17 | v28) & 1) != 0)
  {
    *(void *)&uint64_t v29 = v11;
    *((void *)&v29 + 1) = v12;
    uint64_t v27 = 0.0;
    unsigned int v28 = 0LL;
    swift_unknownObjectRetain();
    return (void *)DateComponents.init(calendar:timeZone:era:year:month:day:hour:minute:second:nanosecond:weekday:weekdayOrdinal:quarter:weekOfMonth:weekOfYear:yearForWeekOfYear:)( &v29,  (uint64_t *)&v27,  0LL,  1,  0LL,  1,  0LL,  1,  (uint64_t)a4,  0LL,  1,  0LL,  1,  0LL,  1,  0LL,  1,  0LL,  1,  0LL,  1,  0LL,  1,  0LL,  1,  0LL,  1,  0LL,  1,  0LL,  1);
  }

  else
  {
    *(void *)&uint64_t v29 = v11;
    *((void *)&v29 + 1) = v12;
    if (v16 <= 1.59271755e13) {
      double v22 = v16;
    }
    else {
      double v22 = 1.59271755e13;
    }
    double v23 = fmax(v22, -2.11845067e11);
    if (v27 > 1.59271755e13) {
      uint64_t v20 = 1.59271755e13;
    }
    uint64_t v26 = fmax(v20, -2.11845067e11);
    uint64_t v27 = v23;
    return Calendar.dateComponents(_:from:to:)(a1, &v27, &v26, a4);
  }

void *Calendar._dateComponents(_:from:)@<X0>(uint64_t *a1@<X0>, double *a2@<X1>, void *a3@<X8>)
{
  uint64_t v5 = *a1;
  double v6 = *a2;
  uint64_t v8 = *v3;
  uint64_t v7 = v3[1];
  v12[0] = *a1;
  if (v6 > 1.59271755e13) {
    double v6 = 1.59271755e13;
  }
  double v9 = fmax(v6, -2.11845067e11);
  uint64_t ObjectType = swift_getObjectType();
  double v13 = v9;
  (*(void (**)(void *__return_ptr, uint64_t *, double *, uint64_t, uint64_t))(v7 + 192))( __src,  v12,  &v13,  ObjectType,  v7);
  if ((v5 & 0x4000) != 0)
  {
    __src[0] = v8;
    __src[1] = v7;
    swift_unknownObjectRetain();
    swift_unknownObjectRelease();
    if (__src[2])
    {
      v12[0] = __src[2];
      v12[1] = __src[3];
      swift_unknownObjectRetain();
      Calendar.timeZone.setter(v12);
    }
  }

  return memcpy(a3, __src, 0x11AuLL);
}

Swift::Bool __swiftcall Calendar.nextWeekend(startingAfter:start:interval:direction:)( Foundation::Date startingAfter, Foundation::Date *start, Swift::Double *interval, Foundation::Calendar::SearchDirection direction)
{
  uint64_t v5 = (void *)direction;
  v7._Swift::Double time = start->_time;
  __int128 v12 = *v4;
  Swift::Double time = v7._time;
  Calendar.nextWeekend(startingAfter:direction:)(v7, (Foundation::Calendar::SearchDirection)&time);
  char v8 = v15;
  if ((v15 & 1) == 0)
  {
    uint64_t v9 = v14;
    *(void *)interval = v13;
    void *v5 = v9;
  }

  return v8 ^ 1;
}

Foundation::Date __swiftcall Calendar.startOfDay(for:)(Foundation::Date a1)
{
  uint64_t v4 = v2;
  double v5 = *v1;
  uint64_t v6 = *(void *)(v3 + 8);
  char v12 = 3;
  double v7 = 1.59271755e13;
  if (v5 <= 1.59271755e13) {
    double v7 = v5;
  }
  double v8 = fmax(v7, -2.11845067e11);
  uint64_t ObjectType = swift_getObjectType();
  double v11 = v8;
  (*(void (**)(Swift::Double *__return_ptr, char *, double *, uint64_t, uint64_t))(v6 + 160))( v13,  &v12,  &v11,  ObjectType,  v6);
  if ((v14 & 1) != 0) {
    result._Swift::Double time = v5 + -1.0;
  }
  else {
    result._Swift::Double time = v13[0];
  }
  *uint64_t v4 = result._time;
  return result;
}

uint64_t Calendar.nextDate(after:matching:matchingPolicy:repeatedTimePolicy:direction:)@<X0>( uint64_t *a1@<X0>, const void *a2@<X1>, char *a3@<X2>, char *a4@<X3>, char *a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v11 = *a1;
  memcpy(__dst, a2, 0x11AuLL);
  char v12 = *a3;
  char v13 = *a4;
  char v14 = *a5;
  uint64_t v23 = 0LL;
  char v24 = 1;
  __int128 v22 = *v6;
  uint64_t v21 = v11;
  char v19 = v12;
  char v18 = v13;
  char v17 = v14;
  uint64_t result = specialized Calendar._enumerateDates(startingAfter:matching:matchingPolicy:repeatedTimePolicy:direction:using:)( &v21,  __dst,  &v19,  &v18,  &v17,  &v22,  &v23);
  char v16 = v24;
  *(void *)a6 = v23;
  *(_BYTE *)(a6 + 8) = v16;
  return result;
}

Foundation::Date_optional __swiftcall Calendar.date(bySettingHour:minute:second:of:matchingPolicy:repeatedTimePolicy:direction:)( Swift::Int bySettingHour, Swift::Int minute, Swift::Int second, Foundation::Date of, Foundation::Calendar::MatchingPolicy matchingPolicy, Foundation::Calendar::RepeatedTimePolicy repeatedTimePolicy, Foundation::Calendar::SearchDirection direction)
{
  uint64_t v12 = v8;
  double v13 = *(double *)matchingPolicy;
  int v14 = *(unsigned __int8 *)repeatedTimePolicy;
  char v15 = *(_BYTE *)direction;
  char v16 = *v7;
  uint64_t v17 = *v9;
  uint64_t v18 = v9[1];
  LOBYTE(__dst[0]) = 3;
  if (v13 > 1.59271755e13) {
    double v13 = 1.59271755e13;
  }
  double v19 = fmax(v13, -2.11845067e11);
  uint64_t ObjectType = swift_getObjectType();
  __src[0] = v19;
  unsigned __int8 v21 = (*(void *(**)(double *__return_ptr, __int128 *, double *, uint64_t, uint64_t))(v18 + 160))( v37,  __dst,  __src,  ObjectType,  v18);
  if ((v38 & 1) != 0)
  {
    *(void *)uint64_t v12 = 0LL;
    *(_BYTE *)(v12 + 8) = 1;
  }

  else
  {
    double v23 = v37[0];
    __dst[0] = 0uLL;
    uint64_t v34 = 0LL;
    uint64_t v35 = 0LL;
    DateComponents.init(calendar:timeZone:era:year:month:day:hour:minute:second:nanosecond:weekday:weekdayOrdinal:quarter:weekOfMonth:weekOfYear:yearForWeekOfYear:)( __dst,  &v34,  0LL,  1,  0LL,  1,  0LL,  1,  (uint64_t)__src,  0LL,  1,  bySettingHour,  0,  minute,  0,  second,  0,  0LL,  1,  0LL,  1,  0LL,  1,  0LL,  1,  0LL,  1,  0LL,  1,  0LL,  1);
    if (v14 == 3) {
      char v24 = 3;
    }
    else {
      char v24 = 0;
    }
    uint64_t v34 = v17;
    uint64_t v35 = v18;
    double v31 = v23 + -0.5;
    memcpy(__dst, __src, 0x11AuLL);
    char v29 = v24;
    char v28 = v15;
    char v27 = v16;
    Calendar.nextDate(after:matching:matchingPolicy:repeatedTimePolicy:direction:)( (uint64_t *)&v31,  __dst,  &v29,  &v28,  &v27,  (uint64_t)&v32);
    double v25 = v32;
    if ((v33 & 1) != 0)
    {
      unsigned __int8 v21 = outlined release of DateComponents((uint64_t)__src);
      *(double *)uint64_t v12 = v25;
      *(_BYTE *)(v12 + 8) = 1;
    }

    else if (v23 <= v32)
    {
      unsigned __int8 v21 = outlined release of DateComponents((uint64_t)__src);
      *(double *)uint64_t v12 = v25;
      *(_BYTE *)(v12 + 8) = 0;
    }

    else
    {
      uint64_t v34 = v17;
      uint64_t v35 = v18;
      double v32 = v23;
      memcpy(__dst, __src, 0x11AuLL);
      LOBYTE(v31) = v14;
      char v29 = v15;
      char v28 = v16;
      Calendar.nextDate(after:matching:matchingPolicy:repeatedTimePolicy:direction:)( (uint64_t *)&v32,  __dst,  (char *)&v31,  &v29,  &v28,  v12);
      unsigned __int8 v21 = outlined release of DateComponents((uint64_t)__src);
    }
  }

  result.value = *(Foundation::Date *)&v22;
  result.is_nil = v21;
  return result;
}

Swift::Bool __swiftcall Calendar.isDate(_:equalTo:toGranularity:)( Foundation::Date _, Foundation::Date equalTo, Foundation::Calendar::Component toGranularity)
{
  *(Foundation::Date *)&v5._Swift::Double time = *(Foundation::Date *)toGranularity;
  *(Foundation::Date *)&v6._Swift::Double time = (Foundation::Date)*v3;
  __int128 v9 = *v4;
  Swift::Double time = v5._time;
  return Calendar.compare(_:to:toGranularity:)(v5, v6, (Foundation::Calendar::Component)&time) == NSOrderedSame;
}

Swift::Bool __swiftcall Calendar.isDate(_:inSameDayAs:)(Foundation::Date _, Foundation::Date inSameDayAs)
{
  *(Foundation::Date *)&v5._Swift::Double time = (Foundation::Date)*v2;
  *(Foundation::Date *)&v6._Swift::Double time = (Foundation::Date)*v3;
  __int128 v9 = *v4;
  Swift::Double time = v5._time;
  return Calendar.compare(_:to:toGranularity:)(v5, v6, (Foundation::Calendar::Component)&time) == NSOrderedSame;
}

Swift::Bool __swiftcall Calendar.isDateInToday(_:)(Foundation::Date a1)
{
  uint64_t v8 = *MEMORY[0x1895F89C0];
  uint64_t v3 = *v1;
  __int128 v7 = *v2;
  uint64_t v6 = v3;
  __tp.tv_sec = 0LL;
  __tp.tv_nsec = 0LL;
  clock_gettime(_CLOCK_REALTIME, &__tp);
  return Calendar.compare(_:to:toGranularity:)( COERCE_FOUNDATION_DATE((double)__tp.tv_sec + -978307200.0 + (double)__tp.tv_nsec * 0.000000001),  COERCE_FOUNDATION_DATE((double)__tp.tv_nsec * 0.000000001),  (Foundation::Calendar::Component)&v6) == NSOrderedSame;
}

Swift::Bool __swiftcall Calendar.isDateInTomorrow(_:)(Foundation::Date a1)
{
  uint64_t v16 = *MEMORY[0x1895F89C0];
  __darwin_time_t v3 = *v1;
  double v5 = *v2;
  double v4 = v2[1];
  __tp.tv_sec = 0LL;
  __tp.tv_nsec = 0LL;
  clock_gettime(_CLOCK_REALTIME, &__tp);
  double v6 = (double)__tp.tv_sec + -978307200.0 + (double)__tp.tv_nsec * 0.000000001;
  LOBYTE(v11._time) = 3;
  if (v6 > 1.59271755e13) {
    double v6 = 1.59271755e13;
  }
  *(double *)&__darwin_time_t v7 = fmax(v6, -2.11845067e11);
  uint64_t ObjectType = swift_getObjectType();
  __tp.tv_sec = v7;
  (*(void (**)(double *__return_ptr, Foundation::Date *, timespec *, uint64_t, double))(*(void *)&v4 + 160LL))( &v13,  &v11,  &__tp,  ObjectType,  COERCE_DOUBLE(*(void *)&v4));
  if ((v15 & 1) != 0) {
    return 0;
  }
  v10._Swift::Double time = v14 + v13 + 60.0;
  double v13 = v5;
  double v14 = v4;
  v11._Swift::Double time = v10._time;
  __tp.tv_sec = v3;
  return Calendar.compare(_:to:toGranularity:)( v10,  (Foundation::Date)0x404E000000000000LL,  (Foundation::Calendar::Component)&__tp) == NSOrderedSame;
}

Swift::Bool __swiftcall Calendar.isDateInYesterday(_:)(Foundation::Date a1)
{
  uint64_t v15 = *MEMORY[0x1895F89C0];
  __darwin_time_t v3 = *v1;
  double v5 = *v2;
  double v4 = v2[1];
  __tp.tv_sec = 0LL;
  __tp.tv_nsec = 0LL;
  clock_gettime(_CLOCK_REALTIME, &__tp);
  double v6 = (double)__tp.tv_sec + -978307200.0 + (double)__tp.tv_nsec * 0.000000001;
  LOBYTE(v11._time) = 3;
  if (v6 > 1.59271755e13) {
    double v6 = 1.59271755e13;
  }
  *(double *)&__darwin_time_t v7 = fmax(v6, -2.11845067e11);
  uint64_t ObjectType = swift_getObjectType();
  __tp.tv_sec = v7;
  (*(void (**)(double *__return_ptr, Foundation::Date *, timespec *, uint64_t, double))(*(void *)&v4 + 160LL))( v13,  &v11,  &__tp,  ObjectType,  COERCE_DOUBLE(*(void *)&v4));
  if ((v14 & 1) != 0) {
    return 0;
  }
  v10._Swift::Double time = v13[0] + -60.0;
  v13[0] = v5;
  v13[1] = v4;
  v11._Swift::Double time = v10._time;
  __tp.tv_sec = v3;
  return Calendar.compare(_:to:toGranularity:)( v10,  (Foundation::Date)0xC04E000000000000LL,  (Foundation::Calendar::Component)&__tp) == NSOrderedSame;
}

uint64_t Calendar.ComponentSet.init(_:)@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *(void *)(a1 + 16);
  if (v3)
  {
    uint64_t v4 = 0LL;
    double v5 = (char *)(a1 + 32);
    do
    {
      uint64_t v6 = *v5++;
      v4 |= qword_1837BE550[v6];
      --v3;
    }

    while (v3);
  }

  else
  {
    uint64_t v4 = 0LL;
  }

  uint64_t result = swift_bridgeObjectRelease();
  *a2 = v4;
  return result;
}

uint64_t Calendar.ComponentSet.count.getter()
{
  uint8x8_t v1 = (uint8x8_t)vcnt_s8(*v0);
  v1.i16[0] = vaddlv_u8(v1);
  return v1.u32[0];
}

uint64_t Calendar.Component.debugDescription.getter()
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_18319248C + 4 * byte_1837BCD24[*v0]))( 6386277LL,  0xE300000000000000LL);
}

uint64_t sub_18319248C()
{
  return 1918985593LL;
}

uint64_t sub_18319249C()
{
  return 0x68746E6F6DLL;
}

uint64_t sub_1831924B0()
{
  return 7954788LL;
}

uint64_t sub_1831924BC()
{
  return 1920298856LL;
}

uint64_t sub_1831924CC()
{
  return 0x6574756E696DLL;
}

uint64_t sub_1831924E0()
{
  return 0x646E6F636573LL;
}

uint64_t sub_1831924F4()
{
  return 0x7961646B656577LL;
}

uint64_t sub_18319250C()
{
  return 0x4F7961646B656577LL;
}

uint64_t sub_183192530()
{
  return 0x72657472617571LL;
}

uint64_t sub_183192548()
{
  return 0x6F4D664F6B656577LL;
}

uint64_t sub_183192600()
{
  return 0x616559664F796164LL;
}

BOOL static Calendar.SearchDirection.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

Foundation::Date_optional __swiftcall Calendar.date(byAdding:value:to:wrappingComponents:)( Foundation::Calendar::Component byAdding, Swift::Int value, Foundation::Date to, Swift::Bool wrappingComponents)
{
  char v7 = v4;
  uint64_t v8 = v5;
  double v9 = *(double *)wrappingComponents;
  uint64_t v10 = *(void *)(v6 + 8);
  LOBYTE(__src[0]) = *(_BYTE *)byAdding;
  DateComponents.init(component:value:)(*(Swift::Int_optional *)&value, (unsigned __int8 *)__src, (uint64_t)__dst);
  outlined init with take of DateComponents?((uint64_t)__dst, (uint64_t)v16);
  outlined init with take of DateComponents?((uint64_t)v16, (uint64_t)__src);
  int v11 = _s10Foundation13URLComponentsV01_B0VSgWOg(__src);
  if (v11 == 1)
  {
    *(void *)uint64_t v8 = 0LL;
    *(_BYTE *)(v8 + 8) = 1;
  }

  else
  {
    if (v9 > 1.59271755e13) {
      double v9 = 1.59271755e13;
    }
    memcpy(__dst, __src, 0x11AuLL);
    uint64_t ObjectType = swift_getObjectType();
    double v14 = fmax(v9, -2.11845067e11);
    (*(void (**)(_BYTE *, double *, void, uint64_t, uint64_t))(v10 + 200))( __dst,  &v14,  v7 & 1,  ObjectType,  v10);
    LOBYTE(v11) = outlined release of DateComponents?(v16);
  }

  result.value = *(Foundation::Date *)&v12;
  result.is_nil = v11;
  return result;
}

void Calendar.ComponentSet.highestSetUnit.getter(char *a1@<X8>)
{
  uint64_t v2 = *v1;
  if ((*v1 & 1) != 0)
  {
    *a1 = 0;
  }

  else if ((v2 & 2) != 0)
  {
    *a1 = 1;
  }

  else if ((v2 & 0x40000) != 0)
  {
    *a1 = 17;
  }

  else if ((v2 & 0x200) != 0)
  {
    *a1 = 9;
  }

  else if ((v2 & 4) != 0)
  {
    *a1 = 2;
  }

  else if ((v2 & 8) != 0)
  {
    *a1 = 3;
  }

  else if ((v2 & 0x10) != 0)
  {
    *a1 = 4;
  }

  else if ((v2 & 0x20) != 0)
  {
    *a1 = 5;
  }

  else if ((v2 & 0x40) != 0)
  {
    *a1 = 6;
  }

  else if ((v2 & 0x80) != 0)
  {
    *a1 = 7;
  }

  else if ((v2 & 0x100) != 0)
  {
    *a1 = 8;
  }

  else if ((v2 & 0x400) != 0)
  {
    *a1 = 10;
  }

  else if ((v2 & 0x800) != 0)
  {
    *a1 = 11;
  }

  else if ((v2 & 0x1000) != 0)
  {
    *a1 = 12;
  }

  else if ((v2 & 0x2000) != 0)
  {
    *a1 = 13;
  }

  else
  {
    if ((v2 & 0x10000) != 0) {
      char v3 = 16;
    }
    else {
      char v3 = 18;
    }
    *a1 = v3;
  }

Foundation::Date_optional __swiftcall Calendar.date(bySetting:value:of:)( Foundation::Calendar::Component bySetting, Swift::Int value, Foundation::Date of)
{
  Swift::UInt v5 = *(unsigned __int8 *)bySetting;
  double v6 = *v3;
  uint64_t v7 = *v4;
  uint64_t v8 = v4[1];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Calendar.Component>);
  *(_BYTE *)(swift_allocObject() + 32) = v5;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<Calendar.Component>);
  uint64_t v9 = static _SetStorage.allocate(capacity:)();
  uint64_t v10 = v9 + 56;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v5);
  Swift::Int v11 = Hasher._finalize()();
  uint64_t v12 = -1LL << *(_BYTE *)(v9 + 32);
  unint64_t v13 = v11 & ~v12;
  unint64_t v14 = v13 >> 6;
  uint64_t v15 = *(void *)(v9 + 56 + 8 * (v13 >> 6));
  uint64_t v16 = 1LL << v13;
  uint64_t v17 = *(void *)(v9 + 48);
  if (((1LL << v13) & v15) == 0) {
    goto LABEL_10;
  }
  uint64_t v18 = ~v12;
  unint64_t v13 = (v13 + 1) & v18;
  unint64_t v14 = v13 >> 6;
  uint64_t v15 = *(void *)(v10 + 8 * (v13 >> 6));
  uint64_t v16 = 1LL << v13;
  if ((v15 & (1LL << v13)) == 0) {
    goto LABEL_10;
  }
  unint64_t v13 = (v13 + 1) & v18;
  unint64_t v14 = v13 >> 6;
  uint64_t v15 = *(void *)(v10 + 8 * (v13 >> 6));
  uint64_t v16 = 1LL << v13;
  if ((v15 & (1LL << v13)) == 0) {
    goto LABEL_10;
  }
  unint64_t v13 = (v13 + 1) & v18;
  unint64_t v14 = v13 >> 6;
  uint64_t v15 = *(void *)(v10 + 8 * (v13 >> 6));
  uint64_t v16 = 1LL << v13;
  if ((v15 & (1LL << v13)) != 0)
  {
    while (*(unsigned __int8 *)(v17 + v13) != (_DWORD)v5)
    {
      unint64_t v13 = (v13 + 1) & v18;
      unint64_t v14 = v13 >> 6;
      uint64_t v15 = *(void *)(v10 + 8 * (v13 >> 6));
      uint64_t v16 = 1LL << v13;
      if ((v15 & (1LL << v13)) == 0) {
        goto LABEL_10;
      }
    }
  }

  else
  {
LABEL_10:
    *(void *)(v10 + 8 * v14) = v16 | v15;
    *(_BYTE *)(v17 + v13) = v5;
    uint64_t v19 = *(void *)(v9 + 16);
    BOOL v20 = __OFADD__(v19, 1LL);
    uint64_t v21 = v19 + 1;
    if (v20)
    {
      __break(1u);
      JUMPOUT(0x183192D18LL);
    }

    *(void *)(v9 + 16) = v21;
  }

uint64_t Calendar.dates(byMatching:startingAt:in:matchingPolicy:repeatedTimePolicy:direction:)@<X0>( void *__src@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, _BYTE *a4@<X3>, _BYTE *a5@<X4>, _BYTE *a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v15 = *a2;
  LOBYTE(a4) = *a4;
  LOBYTE(a5) = *a5;
  LOBYTE(a6) = *a6;
  char v19 = *(_BYTE *)(a3 + 16);
  memcpy(&__srca[7], __src, 0x11AuLL);
  *(_OWORD *)a7 = *v7;
  *(void *)(a7 + 16) = v15;
  *(_OWORD *)(a7 + 24) = *(_OWORD *)a3;
  *(_BYTE *)(a7 + 40) = v19;
  memcpy((void *)(a7 + 41), __srca, 0x121uLL);
  *(_BYTE *)(a7 + 330) = (_BYTE)a4;
  *(_BYTE *)(a7 + 331) = (_BYTE)a5;
  *(_BYTE *)(a7 + 332) = (_BYTE)a6;
  swift_unknownObjectRetain();
  return outlined retain of DateComponents((uint64_t)__dst);
}

uint64_t static Calendar.Identifier.cldrKeywordKey.getter()
{
  return 24931LL;
}

void static Calendar.Identifier.legacyKeywordKey.getter(void *a1@<X8>)
{
  *a1 = 0x7261646E656C6163LL;
  a1[1] = 0xE800000000000000LL;
}

uint64_t Calendar.Identifier.debugDescription.getter()
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_183192EA4 + 4 * byte_1837BCD36[*v0]))( 0x6169726F67657267LL,  0xE90000000000006ELL);
}

uint64_t sub_183192EA4()
{
  return 0x7473696864647562LL;
}

uint64_t sub_183192EBC()
{
  return 0x6573656E696863LL;
}

uint64_t sub_183192ED4()
{
  return 0x636974706F63LL;
}

uint64_t sub_183192EE8()
{
  return 0x6369706F69687465LL;
}

uint64_t sub_183192F00()
{
  return 0x61616F69687465LL;
}

uint64_t sub_183192F18()
{
  return 0x776572626568LL;
}

uint64_t sub_183192F2C()
{
  return 0x313036386F7369LL;
}

uint64_t sub_183192F44()
{
  return 0x6E6169646E69LL;
}

uint64_t sub_183192F58()
{
  return 0x63696D616C7369LL;
}

uint64_t sub_183192F70()
{
  return 0x2D63696D616C7369LL;
}

unint64_t sub_183192FE4()
{
  return 0xD000000000000010LL;
}

void Calendar.Identifier.hash(into:)()
{
}

uint64_t Calendar.Identifier.CodingKeys.stringValue.getter(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_183193060 + 4 * byte_1837BCD46[a1]))( 0x6169726F67657267LL,  0xE90000000000006ELL);
}

uint64_t sub_183193060()
{
  return 0x7473696864647562LL;
}

uint64_t sub_183193078()
{
  return 0x6573656E696863LL;
}

uint64_t sub_183193090()
{
  return 0x636974706F63LL;
}

unint64_t sub_1831930A4()
{
  return 0xD000000000000013LL;
}

uint64_t sub_1831930DC()
{
  return 0x776572626568LL;
}

uint64_t sub_1831930F0()
{
  return 0x313036386F7369LL;
}

uint64_t sub_183193108()
{
  return 0x6E6169646E69LL;
}

uint64_t sub_18319311C()
{
  return 0x63696D616C7369LL;
}

uint64_t sub_183193134()
{
  return 0x4363696D616C7369LL;
}

uint64_t sub_183193154()
{
  return 0x6573656E6170616ALL;
}

uint64_t sub_18319316C()
{
  return 0x6E616973726570LL;
}

uint64_t sub_183193184()
{
  return 0x63696C6275706572LL;
}

uint64_t sub_1831931A8()
{
  return 0x5463696D616C7369LL;
}

unint64_t sub_1831931CC()
{
  return 0xD000000000000010LL;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance Calendar.Identifier.BuddhistCodingKeys()
{
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance Calendar.Identifier.BuddhistCodingKeys()
{
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance Calendar.Identifier.ChineseCodingKeys()
{
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance Calendar.Identifier.ChineseCodingKeys()
{
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance Calendar.Identifier.CodingKeys()
{
  return Calendar.Identifier.CodingKeys.stringValue.getter(*v0);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance Calendar.Identifier.CodingKeys@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result = specialized Calendar.Identifier.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

void protocol witness for CodingKey.init(intValue:) in conformance Calendar.Identifier.CodingKeys( _BYTE *a1@<X8>)
{
  *a1 = 16;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance Calendar.Identifier.CodingKeys()
{
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance Calendar.Identifier.CodingKeys()
{
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance Calendar.Identifier.CopticCodingKeys()
{
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance Calendar.Identifier.CopticCodingKeys()
{
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance Calendar.Identifier.EthiopicAmeteAlemCodingKeys()
{
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance Calendar.Identifier.EthiopicAmeteAlemCodingKeys()
{
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance Calendar.Identifier.EthiopicAmeteMihretCodingKeys()
{
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance Calendar.Identifier.EthiopicAmeteMihretCodingKeys()
{
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance Calendar.Identifier.GregorianCodingKeys()
{
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance Calendar.Identifier.GregorianCodingKeys()
{
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance Calendar.Identifier.HebrewCodingKeys()
{
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance Calendar.Identifier.HebrewCodingKeys()
{
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance Calendar.Identifier.IndianCodingKeys()
{
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance Calendar.Identifier.IndianCodingKeys()
{
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance Calendar.Identifier.IslamicCivilCodingKeys()
{
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance Calendar.Identifier.IslamicCivilCodingKeys()
{
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance Calendar.Identifier.IslamicCodingKeys()
{
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance Calendar.Identifier.IslamicCodingKeys()
{
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance Calendar.Identifier.IslamicTabularCodingKeys()
{
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance Calendar.Identifier.IslamicTabularCodingKeys()
{
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance Calendar.Identifier.IslamicUmmAlQuraCodingKeys()
{
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance Calendar.Identifier.IslamicUmmAlQuraCodingKeys()
{
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance Calendar.Identifier.Iso8601CodingKeys()
{
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance Calendar.Identifier.Iso8601CodingKeys()
{
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance Calendar.Identifier.JapaneseCodingKeys()
{
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance Calendar.Identifier.JapaneseCodingKeys()
{
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance Calendar.Identifier.PersianCodingKeys()
{
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance Calendar.Identifier.PersianCodingKeys()
{
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance Calendar.Identifier.RepublicOfChinaCodingKeys()
{
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance Calendar.Identifier.RepublicOfChinaCodingKeys()
{
  return CodingKey.debugDescription.getter();
}

uint64_t Calendar.ComponentSet.rawValue.getter()
{
  return *(void *)v0;
}

Foundation::Calendar::ComponentSet __swiftcall Calendar.ComponentSet.init(rawValue:)( Foundation::Calendar::ComponentSet rawValue)
{
  v1->rawValue = rawValue.rawValue;
  return rawValue;
}

uint64_t Calendar.ComponentSet.init(_:)@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  int64_t v3 = 0LL;
  uint64_t v4 = 0LL;
  uint64_t v5 = result + 56;
  uint64_t v6 = 1LL << *(_BYTE *)(result + 32);
  uint64_t v7 = -1LL;
  if (v6 < 64) {
    uint64_t v7 = ~(-1LL << v6);
  }
  unint64_t v8 = v7 & *(void *)(result + 56);
  int64_t v9 = (unint64_t)(v6 + 63) >> 6;
  while (1)
  {
    if (v8)
    {
      unint64_t v10 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      unint64_t v11 = v10 | (v3 << 6);
      goto LABEL_5;
    }

    int64_t v12 = v3 + 1;
    if (__OFADD__(v3, 1LL))
    {
      __break(1u);
      goto LABEL_27;
    }

    if (v12 >= v9) {
      goto LABEL_25;
    }
    unint64_t v13 = *(void *)(v5 + 8 * v12);
    ++v3;
    if (!v13)
    {
      int64_t v3 = v12 + 1;
      if (v12 + 1 >= v9) {
        goto LABEL_25;
      }
      unint64_t v13 = *(void *)(v5 + 8 * v3);
      if (!v13)
      {
        int64_t v3 = v12 + 2;
        if (v12 + 2 >= v9) {
          goto LABEL_25;
        }
        unint64_t v13 = *(void *)(v5 + 8 * v3);
        if (!v13)
        {
          int64_t v3 = v12 + 3;
          if (v12 + 3 >= v9) {
            goto LABEL_25;
          }
          unint64_t v13 = *(void *)(v5 + 8 * v3);
          if (!v13)
          {
            int64_t v3 = v12 + 4;
            if (v12 + 4 >= v9) {
              goto LABEL_25;
            }
            unint64_t v13 = *(void *)(v5 + 8 * v3);
            if (!v13) {
              break;
            }
          }
        }
      }
    }

Foundation::Calendar::ComponentSet __swiftcall Calendar.ComponentSet.init(single:)( Foundation::Calendar::Component single)
{
  *uint8x8_t v1 = qword_1837BE550[*(char *)single];
  LOBYTE(result.rawValue) = single;
  return result;
}

void static Calendar.ComponentSet.era.getter(void *a1@<X8>)
{
  *a1 = 1LL;
}

void static Calendar.ComponentSet.year.getter(void *a1@<X8>)
{
  *a1 = 2LL;
}

void static Calendar.ComponentSet.month.getter(void *a1@<X8>)
{
  *a1 = 4LL;
}

void static Calendar.ComponentSet.day.getter(void *a1@<X8>)
{
  *a1 = 8LL;
}

void static Calendar.ComponentSet.hour.getter(void *a1@<X8>)
{
  *a1 = 16LL;
}

void static Calendar.ComponentSet.minute.getter(void *a1@<X8>)
{
  *a1 = 32LL;
}

void static Calendar.ComponentSet.second.getter(void *a1@<X8>)
{
  *a1 = 64LL;
}

void static Calendar.ComponentSet.weekday.getter(void *a1@<X8>)
{
  *a1 = 128LL;
}

void static Calendar.ComponentSet.weekdayOrdinal.getter(void *a1@<X8>)
{
  *a1 = 256LL;
}

void static Calendar.ComponentSet.quarter.getter(void *a1@<X8>)
{
  *a1 = 512LL;
}

void static Calendar.ComponentSet.weekOfMonth.getter(void *a1@<X8>)
{
  *a1 = 1024LL;
}

void static Calendar.ComponentSet.weekOfYear.getter(void *a1@<X8>)
{
  *a1 = 2048LL;
}

void static Calendar.ComponentSet.yearForWeekOfYear.getter(void *a1@<X8>)
{
  *a1 = 4096LL;
}

void static Calendar.ComponentSet.nanosecond.getter(void *a1@<X8>)
{
  *a1 = 0x2000LL;
}

void static Calendar.ComponentSet.calendar.getter(void *a1@<X8>)
{
  *a1 = 0x4000LL;
}

void static Calendar.ComponentSet.timeZone.getter(void *a1@<X8>)
{
  *a1 = 0x8000LL;
}

void static Calendar.ComponentSet.isLeapMonth.getter(void *a1@<X8>)
{
  *a1 = 0x10000LL;
}

void static Calendar.ComponentSet.dayOfYear.getter(void *a1@<X8>)
{
  *a1 = 0x40000LL;
}

uint64_t Calendar.ComponentSet.set.getter()
{
  uint64_t v1 = *v0;
  uint64_t v4 = MEMORY[0x18961AFF8];
  if ((v1 & 1) != 0)
  {
    specialized Set._Variant.insert(_:)(&v3, 0LL);
    if ((v1 & 2) == 0)
    {
LABEL_3:
      if ((v1 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_23;
    }
  }

  else if ((v1 & 2) == 0)
  {
    goto LABEL_3;
  }

  specialized Set._Variant.insert(_:)(&v3, 1uLL);
  if ((v1 & 4) == 0)
  {
LABEL_4:
    if ((v1 & 8) == 0) {
      goto LABEL_5;
    }
    goto LABEL_24;
  }

void *(*Calendar.locale.modify(void *a1))(uint64_t *a1, char a2)
{
  a1[2] = v1;
  Calendar.locale.getter(a1);
  return Calendar.locale.modify;
}

void *Calendar.locale.modify(uint64_t *a1, char a2)
{
  uint64_t v2 = a1[1];
  v4[0] = *a1;
  v4[1] = v2;
  if ((a2 & 1) == 0) {
    return Calendar.locale.setter(v4);
  }
  swift_unknownObjectRetain();
  Calendar.locale.setter(v4);
  return (void *)swift_unknownObjectRelease();
}

double key path getter for Calendar.timeZone : Calendar@<D0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  void (*v5)(__int128 *__return_ptr, uint64_t, uint64_t);
  double result;
  __int128 v7;
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v5 = *(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(v3 + 48);
  swift_unknownObjectRetain();
  v5(&v7, ObjectType, v3);
  swift_unknownObjectRelease();
  Foundation::Calendar::ComponentSet result = *(double *)&v7;
  *a2 = v7;
  return result;
}

uint64_t (*Calendar.timeZone.modify(uint64_t a1))(uint64_t *a1, char a2)
{
  *(void *)(a1 + 16) = v1;
  uint64_t v2 = *(void *)(v1 + 8);
  uint64_t ObjectType = swift_getObjectType();
  (*(void (**)(uint64_t, uint64_t))(v2 + 48))(ObjectType, v2);
  return Calendar.timeZone.modify;
}

uint64_t Calendar.timeZone.modify(uint64_t *a1, char a2)
{
  uint64_t v2 = a1[1];
  v4[0] = *a1;
  v4[1] = v2;
  if ((a2 & 1) == 0) {
    return Calendar.timeZone.setter(v4);
  }
  swift_unknownObjectRetain();
  Calendar.timeZone.setter(v4);
  return swift_unknownObjectRelease();
}

uint64_t key path getter for Calendar.firstWeekday : Calendar@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t))(v3 + 56);
  swift_unknownObjectRetain();
  uint64_t v6 = v5(ObjectType, v3);
  uint64_t result = swift_unknownObjectRelease();
  *a2 = v6;
  return result;
}

uint64_t (*Calendar.firstWeekday.modify(void *a1))(uint64_t *a1)
{
  a1[1] = v1;
  uint64_t v3 = *(void *)(v1 + 8);
  uint64_t ObjectType = swift_getObjectType();
  *a1 = (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 56))(ObjectType, v3);
  return Calendar.firstWeekday.modify;
}

uint64_t Calendar.firstWeekday.modify(uint64_t *a1)
{
  return Calendar.firstWeekday.setter(*a1);
}

uint64_t key path getter for Calendar.minimumDaysInFirstWeek : Calendar@<X0>( uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t))(v3 + 72);
  swift_unknownObjectRetain();
  uint64_t v6 = v5(ObjectType, v3);
  uint64_t result = swift_unknownObjectRelease();
  *a2 = v6;
  return result;
}

uint64_t (*Calendar.minimumDaysInFirstWeek.modify(void *a1))(uint64_t *a1)
{
  a1[1] = v1;
  uint64_t v3 = *(void *)(v1 + 8);
  uint64_t ObjectType = swift_getObjectType();
  *a1 = (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 72))(ObjectType, v3);
  return Calendar.minimumDaysInFirstWeek.modify;
}

uint64_t Calendar.minimumDaysInFirstWeek.modify(uint64_t *a1)
{
  return Calendar.minimumDaysInFirstWeek.setter(*a1);
}

Swift::Bool __swiftcall Calendar.dateInterval(of:start:interval:for:)( Foundation::Calendar::Component of, Foundation::Date *start, Swift::Double *interval, Foundation::Date a4)
{
  double v8 = *v4;
  uint64_t v9 = *(void *)(v5 + 8);
  if (*v4 > 1.59271755e13) {
    double v8 = 1.59271755e13;
  }
  char v16 = *(_BYTE *)of;
  double v10 = fmax(v8, -2.11845067e11);
  uint64_t ObjectType = swift_getObjectType();
  double v15 = v10;
  (*(void (**)(void *__return_ptr, char *, double *, uint64_t, uint64_t))(v9 + 160))( v17,  &v16,  &v15,  ObjectType,  v9);
  char v12 = v18;
  if ((v18 & 1) == 0)
  {
    uint64_t v13 = v17[1];
    *(void *)&start->_Swift::Double time = v17[0];
    *(void *)interval = v13;
  }

  return v12 ^ 1;
}

uint64_t Calendar.dates(byAdding:value:startingAt:in:wrappingComponents:)@<X0>( _BYTE *a1@<X0>, __int128 a2@<X2:X1>, uint64_t *a3@<X3>, char a4@<W4>, uint64_t a5@<X8>)
{
  double v8 = **((double **)&a2 + 1);
  uint64_t v9 = *a3;
  uint64_t v10 = a3[1];
  char v11 = *((_BYTE *)a3 + 16);
  __int128 v15 = *v5;
  LOBYTE(__src[0]) = *a1;
  DateComponents.init(component:value:)((Swift::Int_optional)a2, (unsigned __int8 *)__src, (uint64_t)v16);
  outlined init with take of DateComponents?((uint64_t)v16, (uint64_t)v18);
  outlined init with take of DateComponents?((uint64_t)v18, (uint64_t)__src);
  uint64_t result = _s10Foundation13URLComponentsV01_B0VSgWOg(__src);
  if ((_DWORD)result == 1)
  {
    __break(1u);
  }

  else
  {
    double v13 = 1.59271755e13;
    if (v8 <= 1.59271755e13) {
      double v13 = v8;
    }
    double v14 = fmax(v13, -2.11845067e11);
    char v17 = v11;
    memcpy(&v16[7], __src, 0x11AuLL);
    *(_OWORD *)a5 = v15;
    *(double *)(a5 + 16) = v14;
    *(void *)(a5 + 24) = v9;
    *(void *)(a5 + 32) = v10;
    *(_BYTE *)(a5 + 40) = v17;
    memcpy((void *)(a5 + 41), v16, 0x121uLL);
    *(_BYTE *)(a5 + 330) = a4 & 1;
    return swift_unknownObjectRetain();
  }

  return result;
}

uint64_t Calendar.dates(byAdding:startingAt:in:wrappingComponents:)@<X0>( void *__src@<X0>, double *a2@<X1>, uint64_t a3@<X2>, char a4@<W3>, uint64_t a5@<X8>)
{
  double v11 = *a2;
  if (*a2 > 1.59271755e13) {
    double v11 = 1.59271755e13;
  }
  double v12 = fmax(v11, -2.11845067e11);
  char v15 = *(_BYTE *)(a3 + 16);
  memcpy(&__srca[7], __src, 0x11AuLL);
  *(_OWORD *)a5 = *v5;
  *(double *)(a5 + 16) = v12;
  *(_OWORD *)(a5 + 24) = *(_OWORD *)a3;
  *(_BYTE *)(a5 + 40) = v15;
  memcpy((void *)(a5 + 41), __srca, 0x121uLL);
  *(_BYTE *)(a5 + 330) = a4;
  swift_unknownObjectRetain();
  return outlined retain of DateComponents((uint64_t)__dst);
}

Swift::Bool __swiftcall Calendar.dateIntervalOfWeekend(containing:start:interval:)( Foundation::Date containing, Foundation::Date *start, Swift::Double *interval)
{
  uint64_t v4 = v3;
  Calendar.dateIntervalOfWeekend(containing:)(*(Foundation::Date *)&start->_time);
  if ((v9 & 1) == 0)
  {
    *(void *)interval = v7;
    *uint64_t v4 = v8;
  }

  return v9 ^ 1;
}

Foundation::DateInterval_optional __swiftcall Calendar.dateIntervalOfWeekend(containing:)(Foundation::Date containing)
{
  uint64_t v4 = v2;
  double v5 = *v1;
  uint64_t v6 = *v3;
  uint64_t v7 = v3[1];
  uint64_t v12 = *v3;
  uint64_t v13 = v7;
  double v11 = v5;
  Foundation::DateInterval_optional result = Calendar.nextWeekend(startingAfter:direction:)(containing, (Foundation::Calendar::SearchDirection)&v11);
  if ((v16 & 1) != 0)
  {
    double v8 = v15;
    *(double *)uint64_t v4 = v14;
    *(double *)(v4 + 8) = v8;
LABEL_10:
    *(_BYTE *)(v4 + 16) = 1;
    return result;
  }

  uint64_t v12 = v6;
  uint64_t v13 = v7;
  double v11 = v14;
  Foundation::DateInterval_optional result = Calendar.nextWeekend(startingAfter:direction:)( result.value.start,  (Foundation::Calendar::SearchDirection)&v11);
  double v9 = v15;
  if ((v16 & 1) != 0)
  {
    *(double *)uint64_t v4 = v14;
    *(double *)(v4 + 8) = v9;
    *(_BYTE *)(v4 + 16) = 1;
    return result;
  }

  result.value.start._Swift::Double time = v14;
  result.value.duration = v14 + v15;
  if (v5 < v14 || v5 >= result.value.duration)
  {
    *(void *)uint64_t v4 = 0LL;
    *(void *)(v4 + 8) = 0LL;
    goto LABEL_10;
  }

  *(double *)uint64_t v4 = v14;
  *(double *)(v4 + 8) = v9;
  *(_BYTE *)(v4 + 16) = 0;
  return result;
}

void Calendar.SearchDirection.hash(into:)()
{
}

uint64_t Calendar.hash(into:)(uint64_t a1)
{
  uint64_t v3 = *(void *)(v1 + 8);
  uint64_t ObjectType = swift_getObjectType();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 120))(a1, ObjectType, v3);
}

Swift::Int Calendar.hashValue.getter()
{
  uint64_t v1 = *(void *)(v0 + 8);
  Hasher.init(_seed:)();
  uint64_t ObjectType = swift_getObjectType();
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v1 + 120))(v4, ObjectType, v1);
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance Calendar()
{
  uint64_t v1 = *(void *)(v0 + 8);
  Hasher.init(_seed:)();
  uint64_t ObjectType = swift_getObjectType();
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v1 + 120))(v4, ObjectType, v1);
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance Calendar(uint64_t a1)
{
  uint64_t v3 = *(void *)(v1 + 8);
  uint64_t ObjectType = swift_getObjectType();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 120))(a1, ObjectType, v3);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance Calendar()
{
  uint64_t v1 = *(void *)(v0 + 8);
  Hasher.init(_seed:)();
  uint64_t ObjectType = swift_getObjectType();
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v1 + 120))(v4, ObjectType, v1);
  return Hasher._finalize()();
}

uint64_t Calendar.description.getter()
{
  void (*v5)(uint64_t *__return_ptr, uint64_t, void *);
  Swift::String v6;
  Swift::String v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  Swift::String v12;
  Swift::String v13;
  void (*v14)(uint64_t *__return_ptr, uint64_t, void *);
  Swift::String v15;
  Swift::String v16;
  uint64_t (*v17)(uint64_t, void *);
  uint64_t v18;
  Swift::String v19;
  Swift::String v20;
  uint64_t (*v21)(uint64_t, void *);
  uint64_t v22;
  Swift::String v23;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v1 = *v0;
  uint64_t v2 = (void *)v0[1];
  uint64_t v3 = (void *)0xE000000000000000LL;
  char v27 = 0LL;
  char v28 = 0xE000000000000000LL;
  _StringGuts.grow(_:)(72LL);
  uint64_t ObjectType = swift_getObjectType();
  double v5 = (void (*)(uint64_t *__return_ptr, uint64_t, void *))v2[3];
  swift_unknownObjectRetain();
  v5(&v25, ObjectType, v2);
  swift_unknownObjectRelease();
  _print_unlocked<A, B>(_:_:)();
  v6._uint64_t countAndFlagsBits = 10272LL;
  v6._unint64_t object = (void *)0xE200000000000000LL;
  String.append(_:)(v6);
  double v25 = v1;
  uint64_t v26 = v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _CalendarProtocol & Swift.AnyObject);
  _print_unlocked<A, B>(_:_:)();
  v7._uint64_t countAndFlagsBits = 0x656C61636F6C2029LL;
  v7._unint64_t object = (void *)0xEA0000000000203ALL;
  String.append(_:)(v7);
  Calendar.locale.getter(&v25);
  if (v25)
  {
    double v8 = v26;
    double v9 = swift_getObjectType();
    uint64_t v10 = ((uint64_t (*)(uint64_t, void *))v8[8])(v9, v8);
    uint64_t v3 = v11;
    swift_unknownObjectRelease();
  }

  else
  {
    uint64_t v10 = 0LL;
  }

  v12._uint64_t countAndFlagsBits = v10;
  v12._unint64_t object = v3;
  String.append(_:)(v12);
  swift_bridgeObjectRelease();
  v13._uint64_t countAndFlagsBits = 0x6F7A20656D697420LL;
  v13._unint64_t object = (void *)0xEC000000203A656ELL;
  String.append(_:)(v13);
  double v14 = (void (*)(uint64_t *__return_ptr, uint64_t, void *))v2[6];
  swift_unknownObjectRetain();
  v14(&v25, ObjectType, v2);
  swift_unknownObjectRelease();
  swift_getObjectType();
  v15._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v15);
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  v16._uint64_t countAndFlagsBits = 0x6557747372696620LL;
  v16._unint64_t object = (void *)0xEF203A7961646B65LL;
  String.append(_:)(v16);
  char v17 = (uint64_t (*)(uint64_t, void *))v2[7];
  swift_unknownObjectRetain();
  char v18 = v17(ObjectType, v2);
  swift_unknownObjectRelease();
  double v25 = v18;
  v19._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v19);
  swift_bridgeObjectRelease();
  v20._unint64_t object = (void *)0x80000001839CCCC0LL;
  v20._uint64_t countAndFlagsBits = 0xD000000000000015LL;
  String.append(_:)(v20);
  uint64_t v21 = (uint64_t (*)(uint64_t, void *))v2[9];
  swift_unknownObjectRetain();
  uint64_t v22 = v21(ObjectType, v2);
  swift_unknownObjectRelease();
  double v25 = v22;
  v23._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v23);
  swift_bridgeObjectRelease();
  return v27;
}

uint64_t Calendar.customMirror.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v25 = a1;
  uint64_t v24 = type metadata accessor for Mirror.AncestorRepresentation();
  uint64_t v2 = *(void *)(v24 - 8);
  MEMORY[0x1895F8858](v24);
  uint64_t v4 = (char *)&v23 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Mirror.DisplayStyle?);
  MEMORY[0x1895F8858](v5);
  uint64_t v7 = (char *)&v23 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = *v1;
  double v9 = (void *)v1[1];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(label: String?, value: Any)>);
  uint64_t v10 = swift_allocObject();
  *(_OWORD *)(v10 + 16) = xmmword_183729DE0;
  *(_OWORD *)(v10 + 32) = xmmword_18372DCC0;
  *(void *)(v10 + 72) = &type metadata for Calendar.Identifier;
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v12 = (void (*)(uint64_t, void *))v9[3];
  swift_unknownObjectRetain();
  v12(ObjectType, v9);
  swift_unknownObjectRelease();
  *(_OWORD *)(v10 + 80) = xmmword_1837293A0;
  *(void *)(v10 + 120) = ObjectType;
  *(void *)(v10 + 96) = v8;
  *(_OWORD *)(v10 + 128) = xmmword_18372DCD0;
  uint64_t v27 = v8;
  char v28 = v9;
  *(void *)(v10 + 168) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Locale?);
  swift_unknownObjectRetain();
  Calendar.locale.getter((void *)(v10 + 144));
  *(_OWORD *)(v10 + 176) = xmmword_1837293B0;
  *(void *)(v10 + 216) = &type metadata for TimeZone;
  uint64_t v13 = (void (*)(uint64_t, void *))v9[6];
  swift_unknownObjectRetain();
  v13(ObjectType, v9);
  swift_unknownObjectRelease();
  *(_OWORD *)(v10 + 224) = xmmword_1837BE5E0;
  double v14 = (uint64_t (*)(uint64_t, void *))v9[7];
  swift_unknownObjectRetain();
  uint64_t v15 = v14(ObjectType, v9);
  swift_unknownObjectRelease();
  uint64_t v16 = MEMORY[0x189618740];
  *(void *)(v10 + 240) = v15;
  *(void *)(v10 + 264) = v16;
  *(void *)(v10 + 272) = 0xD000000000000016LL;
  *(void *)(v10 + 280) = 0x80000001839CC730LL;
  char v17 = (uint64_t (*)(uint64_t, void *))v9[9];
  swift_unknownObjectRetain();
  uint64_t v18 = v17(ObjectType, v9);
  swift_unknownObjectRelease();
  *(void *)(v10 + 312) = v16;
  *(void *)(v10 + 288) = v18;
  uint64_t v27 = v8;
  char v28 = v9;
  uint64_t v26 = v10;
  uint64_t v19 = *MEMORY[0x18961A718];
  uint64_t v20 = type metadata accessor for Mirror.DisplayStyle();
  uint64_t v21 = *(void *)(v20 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v21 + 104))(v7, v19, v20);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v21 + 56))(v7, 0LL, 1LL, v20);
  (*(void (**)(char *, void, uint64_t))(v2 + 104))(v4, *MEMORY[0x18961A748], v24);
  swift_unknownObjectRetain();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [(label: String?, value: Any)]);
  lazy protocol witness table accessor for type [(label: String?, value: Any)] and conformance [A]();
  return Mirror.init<A, B>(_:children:displayStyle:ancestorRepresentation:)();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance Calendar()
{
  return Calendar.description.getter();
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance Calendar.CodingKeys()
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_183194B4C + 4 * byte_1837BCD56[*v0]))( 0x696669746E656469LL,  0xEA00000000007265LL);
}

uint64_t sub_183194B4C()
{
  return 0x656C61636F6CLL;
}

uint64_t sub_183194B60()
{
  return 0x656E6F5A656D6974LL;
}

uint64_t sub_183194B78()
{
  return 0x6565577473726966LL;
}

unint64_t sub_183194B98()
{
  return 0xD000000000000016LL;
}

uint64_t sub_183194BB4()
{
  return 0x746E6572727563LL;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance Calendar.CodingKeys@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result = specialized Calendar.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance Calendar.CodingKeys()
{
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance Calendar.CodingKeys()
{
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for Decodable.init(from:) in conformance Calendar.Current()
{
  return RawRepresentable<>.init(from:)();
}

uint64_t protocol witness for Encodable.encode(to:) in conformance Calendar.Current()
{
  return RawRepresentable<>.encode(to:)();
}

uint64_t Calendar.init(from:)(void *a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<Calendar.CodingKeys>);
  MEMORY[0x1895F8858](v3);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type Calendar.CodingKeys and conformance Calendar.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v1)
  {
    lazy protocol witness table accessor for type Calendar.Current and conformance Calendar.Current();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    __asm { BR              X10 }
  }

  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

void sub_183194E28()
{
  *(_BYTE *)(v6 - 96) = 0;
  uint64_t v7 = KeyedDecodingContainer.decode(_:forKey:)();
  if (!v2)
  {
    uint64_t v9 = v7;
    uint64_t v10 = v8;
    swift_bridgeObjectRetain();
    v11._uint64_t countAndFlagsBits = v9;
    v11._unint64_t object = v10;
    Calendar.Identifier.init(identifierString:)(v11);
    int v12 = *(unsigned __int8 *)(v6 - 96);
    if (v12 != 16)
    {
      *(_DWORD *)(v6 - 144) = v12;
      swift_bridgeObjectRelease();
      *(_BYTE *)(v6 - 120) = 1;
      lazy protocol witness table accessor for type Locale and conformance Locale();
      KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
      uint64_t v18 = *(void *)(v6 - 96);
      uint64_t v19 = *(void *)(v6 - 88);
      *(_BYTE *)(v6 - 120) = 2;
      lazy protocol witness table accessor for type TimeZone and conformance TimeZone();
      KeyedDecodingContainer.decode<A>(_:forKey:)();
      *(void *)(v6 - 160) = v19;
      *(void *)(v6 - 152) = v18;
      uint64_t v21 = *(void *)(v6 - 96);
      uint64_t v20 = *(void *)(v6 - 88);
      *(_BYTE *)(v6 - 96) = 3;
      uint64_t v22 = KeyedDecodingContainer.decode(_:forKey:)();
      *(void *)(v6 - 184) = v20;
      *(void *)(v6 - 176) = v22;
      *(void *)(v6 - 168) = v21;
      *(_BYTE *)(v6 - 96) = 4;
      *(void *)(v6 - 200) = KeyedDecodingContainer.decode(_:forKey:)();
      uint64_t v23 = *(void *)(v6 - 168);
      uint64_t v24 = *(void *)(v6 - 152);
      if (v24)
      {
        *(void *)(v6 - 192) = v24;
        uint64_t v25 = *(void *)(v6 - 160);
      }

      else
      {
        if (one-time initialization token for cache != -1) {
          swift_once();
        }
        *(void *)(v6 - 96) = static LocaleCache.cache;
        *(void *)(v6 - 192) = LocaleCache.current.getter();
        uint64_t v25 = v26;
        uint64_t v24 = 0LL;
        uint64_t v23 = *(void *)(v6 - 168);
      }

      uint64_t v27 = one-time initialization token for cache;
      *(void *)(v6 - 152) = v24;
      swift_unknownObjectRetain();
      swift_unknownObjectRetain();
      if (v27 != -1) {
        swift_once();
      }
      *(void *)(v6 - 160) = static CalendarCache.cache;
      *(_BYTE *)(v6 - 97) = *(_DWORD *)(v6 - 144);
      *(void *)(v6 - 96) = *(void *)(v6 - 192);
      *(void *)(v6 - 88) = v25;
      uint64_t v28 = *(void *)(v6 - 184);
      *(void *)(v6 - 120) = v23;
      *(void *)(v6 - 112) = v28;
      *(void *)(v6 - 136) = 0LL;
      *(_BYTE *)(v6 - 128) = 1;
      swift_retain();
      uint64_t v29 = CalendarCache.fixed(identifier:locale:timeZone:firstWeekday:minimumDaysInFirstWeek:gregorianStartDate:)( (char *)(v6 - 97),  (__int128 *)(v6 - 96),  (__int128 *)(v6 - 120),  *(void *)(v6 - 176),  0,  *(void *)(v6 - 200),  0,  (uint64_t *)(v6 - 136));
      uint64_t v31 = v30;
      swift_unknownObjectRelease();
      swift_release();
      swift_unknownObjectRelease();
      swift_unknownObjectRelease();
      swift_unknownObjectRelease();
      (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v3, v1);
      *uint64_t v4 = v29;
      v4[1] = v31;
      JUMPOUT(0x183194DE0LL);
    }

    *(void *)(v6 - 144) = type metadata accessor for DecodingError();
    swift_allocError();
    uint64_t v13 = v0[3];
    *(void *)(v6 - 160) = v0[4];
    *(void *)(v6 - 152) = v14;
    __swift_project_boxed_opaque_existential_1(v0, v13);
    MEMORY[0x186E1CF78](v13, *(void *)(v6 - 160));
    *(void *)(v6 - 96) = 0LL;
    *(void *)(v6 - 88) = 0xE000000000000000LL;
    _StringGuts.grow(_:)(31LL);
    swift_bridgeObjectRelease();
    *(void *)(v6 - 96) = 0xD00000000000001CLL;
    *(void *)(v6 - 88) = 0x80000001839CD720LL;
    v15._uint64_t countAndFlagsBits = v9;
    v15._unint64_t object = v10;
    String.append(_:)(v15);
    swift_bridgeObjectRelease();
    v16._uint64_t countAndFlagsBits = 46LL;
    v16._unint64_t object = (void *)0xE100000000000000LL;
    String.append(_:)(v16);
    uint64_t v17 = *(void *)(v6 - 152);
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(uint64_t, void))(*(void *)(*(void *)(v6 - 144) - 8LL) + 104LL))( v17,  *MEMORY[0x189619360]);
    swift_willThrow();
  }

  JUMPOUT(0x183194DD0LL);
}

void Calendar.encode(to:)(void *a1)
{
  void (*v10)(__int128 *__return_ptr, uint64_t, void *);
  uint64_t v11;
  void (*v12)(__int128 *__return_ptr, uint64_t, void *);
  void (*v13)(uint64_t, void *);
  void (*v14)(uint64_t, void *);
  uint64_t v15;
  os_unfair_lock_s *v16;
  uint64_t v17;
  os_unfair_lock_s *v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;
  __int128 v25;
  __int128 v26;
  char v27;
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<Calendar.CodingKeys>);
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x1895F8858](v3);
  uint64_t v6 = (char *)&v22 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = *v1;
  uint64_t v7 = (void *)v1[1];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type Calendar.CodingKeys and conformance Calendar.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v10 = (void (*)(__int128 *__return_ptr, uint64_t, void *))v7[3];
  swift_unknownObjectRetain();
  v10(&v26, ObjectType, v7);
  swift_unknownObjectRelease();
  Calendar.Identifier.cfCalendarIdentifier.getter();
  LOBYTE(v26) = 0;
  Swift::String v11 = v24;
  KeyedEncodingContainer.encode(_:forKey:)();
  if (v11)
  {
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
    swift_bridgeObjectRelease();
  }

  else
  {
    uint64_t v24 = v4;
    swift_bridgeObjectRelease();
    *(void *)&uint64_t v25 = v8;
    *((void *)&v25 + 1) = v7;
    Calendar.locale.getter(&v26);
    uint64_t v23 = v26;
    uint64_t v25 = v26;
    uint64_t v27 = 1;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Locale?);
    lazy protocol witness table accessor for type Locale? and conformance <A> A?();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    swift_unknownObjectRelease();
    int v12 = (void (*)(__int128 *__return_ptr, uint64_t, void *))v7[6];
    swift_unknownObjectRetain();
    v12(&v26, ObjectType, v7);
    swift_unknownObjectRelease();
    uint64_t v23 = v26;
    uint64_t v25 = v26;
    uint64_t v27 = 2;
    lazy protocol witness table accessor for type TimeZone and conformance TimeZone();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    swift_unknownObjectRelease();
    uint64_t v13 = (void (*)(uint64_t, void *))v7[7];
    swift_unknownObjectRetain();
    v13(ObjectType, v7);
    swift_unknownObjectRelease();
    LOBYTE(v26) = 3;
    KeyedEncodingContainer.encode(_:forKey:)();
    uint64_t v14 = (void (*)(uint64_t, void *))v7[9];
    swift_unknownObjectRetain();
    v14(ObjectType, v7);
    swift_unknownObjectRelease();
    LOBYTE(v26) = 4;
    KeyedEncodingContainer.encode(_:forKey:)();
    *(void *)&uint64_t v23 = v6;
    *(void *)&uint64_t v26 = v8;
    *((void *)&v26 + 1) = v7;
    if (one-time initialization token for cache != -1) {
      swift_once();
    }
    Swift::String v15 = static CalendarCache.cache + 16;
    Swift::String v16 = (os_unfair_lock_s *)(static CalendarCache.cache + 60);
    swift_retain_n();
    os_unfair_lock_lock(v16);
    closure #1 in CalendarCache.autoupdatingCurrent.getter(v15, (uint64_t *)&v25);
    os_unfair_lock_unlock(v16);
    swift_release_n();
    uint64_t v22 = v25;
    LOBYTE(v15) = specialized static Calendar.== infix(_:_:)((uint64_t)&v26, (uint64_t)&v25);
    swift_unknownObjectRelease();
    if ((v15 & 1) != 0)
    {
      LOBYTE(v26) = 2;
      LOBYTE(v25) = 5;
      lazy protocol witness table accessor for type Calendar.Current and conformance Calendar.Current();
      uint64_t v17 = v23;
      KeyedEncodingContainer.encode<A>(_:forKey:)();
      (*(void (**)(uint64_t, uint64_t))(v24 + 8))(v17, v3);
    }

    else
    {
      *(void *)&uint64_t v26 = v8;
      *((void *)&v26 + 1) = v7;
      uint64_t v18 = (os_unfair_lock_s *)static CalendarCache.cache;
      swift_retain_n();
      os_unfair_lock_lock(v18 + 15);
      closure #1 in CalendarCache.current.getter((uint64_t *)&v25);
      os_unfair_lock_unlock(v18 + 15);
      swift_release_n();
      uint64_t v22 = v25;
      uint64_t v19 = specialized static Calendar.== infix(_:_:)((uint64_t)&v26, (uint64_t)&v25);
      swift_unknownObjectRelease();
      uint64_t v20 = v24;
      LOBYTE(v26) = (v19 & 1) != 0;
      LOBYTE(v25) = 5;
      lazy protocol witness table accessor for type Calendar.Current and conformance Calendar.Current();
      uint64_t v21 = v23;
      KeyedEncodingContainer.encode<A>(_:forKey:)();
      (*(void (**)(uint64_t, uint64_t))(v20 + 8))(v21, v3);
    }
  }

uint64_t protocol witness for Decodable.init(from:) in conformance Calendar(void *a1)
{
  return Calendar.init(from:)(a1);
}

void protocol witness for Encodable.encode(to:) in conformance Calendar(void *a1)
{
}

void Calendar.Identifier.encode(to:)(void *a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<Calendar.Identifier.IslamicUmmAlQuraCodingKeys>);
  uint64_t v69 = *(void *)(v3 - 8);
  uint64_t v70 = v3;
  MEMORY[0x1895F8858](v3);
  id v68 = (char *)v27 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<Calendar.Identifier.IslamicTabularCodingKeys>);
  uint64_t v66 = *(void *)(v5 - 8);
  uint64_t v67 = v5;
  MEMORY[0x1895F8858](v5);
  uint64_t v65 = (char *)v27 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<Calendar.Identifier.RepublicOfChinaCodingKeys>);
  uint64_t v63 = *(void *)(v7 - 8);
  uint64_t v64 = v7;
  MEMORY[0x1895F8858](v7);
  char v62 = (char *)v27 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<Calendar.Identifier.PersianCodingKeys>);
  uint64_t v60 = *(void *)(v9 - 8);
  uint64_t v61 = v9;
  MEMORY[0x1895F8858](v9);
  uint64_t v59 = (char *)v27 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<Calendar.Identifier.JapaneseCodingKeys>);
  uint64_t v57 = *(void *)(v11 - 8);
  uint64_t v58 = v11;
  MEMORY[0x1895F8858](v11);
  uint64_t v56 = (char *)v27 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<Calendar.Identifier.IslamicCivilCodingKeys>);
  uint64_t v54 = *(void *)(v13 - 8);
  uint64_t v55 = v13;
  MEMORY[0x1895F8858](v13);
  id v53 = (char *)v27 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v52 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<Calendar.Identifier.IslamicCodingKeys>);
  uint64_t v51 = *(void *)(v52 - 8);
  MEMORY[0x1895F8858](v52);
  uint64_t v50 = (char *)v27 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v49 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<Calendar.Identifier.IndianCodingKeys>);
  uint64_t v48 = *(void *)(v49 - 8);
  MEMORY[0x1895F8858](v49);
  char v47 = (char *)v27 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v46 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<Calendar.Identifier.Iso8601CodingKeys>);
  uint64_t v45 = *(void *)(v46 - 8);
  MEMORY[0x1895F8858](v46);
  uint64_t v44 = (char *)v27 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v43 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<Calendar.Identifier.HebrewCodingKeys>);
  uint64_t v42 = *(void *)(v43 - 8);
  MEMORY[0x1895F8858](v43);
  uint64_t v41 = (char *)v27 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v40 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<Calendar.Identifier.EthiopicAmeteAlemCodingKeys>);
  uint64_t v39 = *(void *)(v40 - 8);
  MEMORY[0x1895F8858](v40);
  char v38 = (char *)v27 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v37 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<Calendar.Identifier.EthiopicAmeteMihretCodingKeys>);
  uint64_t v36 = *(void *)(v37 - 8);
  MEMORY[0x1895F8858](v37);
  uint64_t v35 = (char *)v27 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v34 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<Calendar.Identifier.CopticCodingKeys>);
  uint64_t v33 = *(void *)(v34 - 8);
  MEMORY[0x1895F8858](v34);
  double v32 = (char *)v27 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v31 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<Calendar.Identifier.ChineseCodingKeys>);
  uint64_t v30 = *(void *)(v31 - 8);
  MEMORY[0x1895F8858](v31);
  uint64_t v29 = (char *)v27 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v28 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<Calendar.Identifier.BuddhistCodingKeys>);
  v27[1] = *(void *)(v28 - 8);
  MEMORY[0x1895F8858](v28);
  uint64_t v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<Calendar.Identifier.GregorianCodingKeys>);
  MEMORY[0x1895F8858](v23);
  uint64_t v73 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<Calendar.Identifier.CodingKeys>);
  uint64_t v71 = *(void *)(v73 - 8);
  MEMORY[0x1895F8858](v73);
  uint64_t v25 = (char *)v27 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v26 = *v1;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type Calendar.Identifier.CodingKeys and conformance Calendar.Identifier.CodingKeys();
  char v72 = v25;
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  __asm { BR              X9 }

uint64_t sub_183195D5C()
{
  *(_BYTE *)(v3 - 65) = 0;
  lazy protocol witness table accessor for type Calendar.Identifier.GregorianCodingKeys and conformance Calendar.Identifier.GregorianCodingKeys();
  uint64_t v4 = *(void *)(v3 - 112);
  uint64_t v5 = *(void *)(v3 - 104);
  KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
  (*(void (**)(uint64_t, uint64_t))(v0 + 8))(v2, v1);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v3 - 120) + 8LL))(v4, v5);
}

uint64_t Calendar.Identifier.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v84 = a2;
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<Calendar.Identifier.IslamicUmmAlQuraCodingKeys>);
  uint64_t v67 = *(void *)(v3 - 8);
  uint64_t v68 = v3;
  MEMORY[0x1895F8858](v3);
  uint64_t v80 = (char *)v36 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v66 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<Calendar.Identifier.IslamicTabularCodingKeys>);
  uint64_t v65 = *(void *)(v66 - 8);
  MEMORY[0x1895F8858](v66);
  uint64_t v79 = (char *)v36 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v64 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<Calendar.Identifier.RepublicOfChinaCodingKeys>);
  uint64_t v63 = *(void *)(v64 - 8);
  MEMORY[0x1895F8858](v64);
  id v78 = (char *)v36 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v62 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<Calendar.Identifier.PersianCodingKeys>);
  uint64_t v61 = *(void *)(v62 - 8);
  MEMORY[0x1895F8858](v62);
  char v77 = (char *)v36 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v60 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<Calendar.Identifier.JapaneseCodingKeys>);
  uint64_t v59 = *(void *)(v60 - 8);
  MEMORY[0x1895F8858](v60);
  uint64_t v76 = (char *)v36 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v58 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<Calendar.Identifier.IslamicCivilCodingKeys>);
  uint64_t v57 = *(void *)(v58 - 8);
  MEMORY[0x1895F8858](v58);
  uint64_t v75 = (char *)v36 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v56 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<Calendar.Identifier.IslamicCodingKeys>);
  uint64_t v55 = *(void *)(v56 - 8);
  MEMORY[0x1895F8858](v56);
  uint64_t v74 = (char *)v36 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v54 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<Calendar.Identifier.IndianCodingKeys>);
  uint64_t v53 = *(void *)(v54 - 8);
  MEMORY[0x1895F8858](v54);
  id v83 = (char *)v36 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v52 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<Calendar.Identifier.Iso8601CodingKeys>);
  uint64_t v49 = *(void *)(v52 - 8);
  MEMORY[0x1895F8858](v52);
  char v82 = (char *)v36 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v51 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<Calendar.Identifier.HebrewCodingKeys>);
  uint64_t v50 = *(void *)(v51 - 8);
  MEMORY[0x1895F8858](v51);
  uint64_t v81 = (char *)v36 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v48 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<Calendar.Identifier.EthiopicAmeteAlemCodingKeys>);
  uint64_t v47 = *(void *)(v48 - 8);
  MEMORY[0x1895F8858](v48);
  uint64_t v73 = (char *)v36 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v46 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<Calendar.Identifier.EthiopicAmeteMihretCodingKeys>);
  uint64_t v45 = *(void *)(v46 - 8);
  MEMORY[0x1895F8858](v46);
  char v72 = (char *)v36 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v44 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<Calendar.Identifier.CopticCodingKeys>);
  uint64_t v43 = *(void *)(v44 - 8);
  MEMORY[0x1895F8858](v44);
  uint64_t v71 = (char *)v36 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v42 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<Calendar.Identifier.ChineseCodingKeys>);
  uint64_t v41 = *(void *)(v42 - 8);
  MEMORY[0x1895F8858](v42);
  uint64_t v70 = (char *)v36 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v40 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<Calendar.Identifier.BuddhistCodingKeys>);
  uint64_t v39 = *(void *)(v40 - 8);
  MEMORY[0x1895F8858](v40);
  uint64_t v69 = (char *)v36 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<Calendar.Identifier.GregorianCodingKeys>);
  uint64_t v20 = *(void *)(v19 - 8);
  MEMORY[0x1895F8858](v19);
  uint64_t v22 = (char *)v36 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<Calendar.Identifier.CodingKeys>);
  uint64_t v24 = *(void *)(v23 - 8);
  MEMORY[0x1895F8858](v23);
  uint64_t v26 = (char *)v36 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v27 = a1[3];
  uint64_t v85 = a1;
  __swift_project_boxed_opaque_existential_1(a1, v27);
  lazy protocol witness table accessor for type Calendar.Identifier.CodingKeys and conformance Calendar.Identifier.CodingKeys();
  uint64_t v28 = v86;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v28)
  {
    uint64_t v36[2] = v22;
    v36[0] = v20;
    v36[1] = v19;
    uint64_t v37 = v24;
    uint64_t v86 = v23;
    char v38 = v26;
    uint64_t v29 = KeyedDecodingContainer.allKeys.getter();
    if (*(void *)(v29 + 16) == 1LL) {
      __asm { BR              X9 }
    }

    uint64_t v30 = type metadata accessor for DecodingError();
    swift_allocError();
    double v32 = v31;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
    void *v32 = &type metadata for Calendar.Identifier;
    uint64_t v33 = v86;
    uint64_t v34 = v38;
    KeyedDecodingContainer.codingPath.getter();
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(void *, void, uint64_t))(*(void *)(v30 - 8) + 104LL))( v32,  *MEMORY[0x189619358],  v30);
    swift_willThrow();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v37 + 8))(v34, v33);
  }

  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v85);
}

uint64_t protocol witness for Decodable.init(from:) in conformance Calendar.Identifier@<X0>( void *a1@<X0>, uint64_t a2@<X8>)
{
  return Calendar.Identifier.init(from:)(a1, a2);
}

void protocol witness for Encodable.encode(to:) in conformance Calendar.Identifier(void *a1)
{
}

uint64_t WeekendRange.onsetTime.getter()
{
  return *(void *)v0;
}

uint64_t WeekendRange.onsetTime.setter(uint64_t result, char a2)
{
  *(void *)uint64_t v2 = result;
  *(_BYTE *)(v2 + 8) = a2 & 1;
  return result;
}

uint64_t WeekendRange.ceaseTime.getter()
{
  return *(void *)(v0 + 16);
}

uint64_t WeekendRange.ceaseTime.setter(uint64_t result, char a2)
{
  *(void *)(v2 + 16) = result;
  *(_BYTE *)(v2 + 24) = a2 & 1;
  return result;
}

uint64_t (*WeekendRange.ceaseTime.modify())()
{
  return destructiveProjectEnumData for PredicateCodableError;
}

uint64_t WeekendRange.start.getter()
{
  return *(void *)(v0 + 32);
}

uint64_t WeekendRange.start.setter(uint64_t result)
{
  *(void *)(v1 + 32) = result;
  return result;
}

uint64_t (*WeekendRange.start.modify())()
{
  return destructiveProjectEnumData for PredicateCodableError;
}

uint64_t WeekendRange.end.getter()
{
  return *(void *)(v0 + 40);
}

uint64_t WeekendRange.end.setter(uint64_t result)
{
  *(void *)(v1 + 40) = result;
  return result;
}

uint64_t (*WeekendRange.end.modify())()
{
  return destructiveProjectEnumData for PredicateCodableError;
}

void WeekendRange.hash(into:)()
{
  Swift::UInt64 v1 = *(void *)(v0 + 16);
  int v2 = *(unsigned __int8 *)(v0 + 24);
  Swift::UInt v4 = *(void *)(v0 + 32);
  Swift::UInt v3 = *(void *)(v0 + 40);
  if (*(_BYTE *)(v0 + 8) != 1)
  {
    Swift::UInt64 v6 = *(void *)v0;
    Hasher._combine(_:)(1u);
    if ((v6 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
      Swift::UInt64 v7 = v6;
    }
    else {
      Swift::UInt64 v7 = 0LL;
    }
    Hasher._combine(_:)(v7);
    if (!v2) {
      goto LABEL_3;
    }
LABEL_11:
    Hasher._combine(_:)(0);
    goto LABEL_12;
  }

  Hasher._combine(_:)(0);
  if (v2) {
    goto LABEL_11;
  }
LABEL_3:
  Hasher._combine(_:)(1u);
  if ((v1 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v5 = v1;
  }
  else {
    Swift::UInt64 v5 = 0LL;
  }
  Hasher._combine(_:)(v5);
LABEL_12:
  Hasher._combine(_:)(v4);
  Hasher._combine(_:)(v3);
}

Swift::Int WeekendRange.hashValue.getter()
{
  Swift::UInt64 v1 = *(void *)v0;
  int v2 = *(unsigned __int8 *)(v0 + 8);
  Swift::UInt64 v3 = *(void *)(v0 + 16);
  int v4 = *(unsigned __int8 *)(v0 + 24);
  Swift::UInt v6 = *(void *)(v0 + 32);
  Swift::UInt v5 = *(void *)(v0 + 40);
  Hasher.init(_seed:)();
  if (v2 != 1)
  {
    Hasher._combine(_:)(1u);
    if ((v1 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
      Swift::UInt64 v8 = v1;
    }
    else {
      Swift::UInt64 v8 = 0LL;
    }
    Hasher._combine(_:)(v8);
    if (!v4) {
      goto LABEL_3;
    }
LABEL_11:
    Hasher._combine(_:)(0);
    goto LABEL_12;
  }

  Hasher._combine(_:)(0);
  if (v4) {
    goto LABEL_11;
  }
LABEL_3:
  Hasher._combine(_:)(1u);
  if ((v3 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v7 = v3;
  }
  else {
    Swift::UInt64 v7 = 0LL;
  }
  Hasher._combine(_:)(v7);
LABEL_12:
  Hasher._combine(_:)(v6);
  Hasher._combine(_:)(v5);
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance WeekendRange()
{
  Swift::UInt64 v1 = *(void *)v0;
  int v2 = *(unsigned __int8 *)(v0 + 8);
  Swift::UInt64 v3 = *(void *)(v0 + 16);
  int v4 = *(unsigned __int8 *)(v0 + 24);
  Swift::UInt v6 = *(void *)(v0 + 32);
  Swift::UInt v5 = *(void *)(v0 + 40);
  Hasher.init(_seed:)();
  if (v2 != 1)
  {
    Hasher._combine(_:)(1u);
    if ((v1 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
      Swift::UInt64 v8 = v1;
    }
    else {
      Swift::UInt64 v8 = 0LL;
    }
    Hasher._combine(_:)(v8);
    if (!v4) {
      goto LABEL_3;
    }
LABEL_11:
    Hasher._combine(_:)(0);
    goto LABEL_12;
  }

  Hasher._combine(_:)(0);
  if (v4) {
    goto LABEL_11;
  }
LABEL_3:
  Hasher._combine(_:)(1u);
  if ((v3 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v7 = v3;
  }
  else {
    Swift::UInt64 v7 = 0LL;
  }
  Hasher._combine(_:)(v7);
LABEL_12:
  Hasher._combine(_:)(v6);
  Hasher._combine(_:)(v5);
  return Hasher._finalize()();
}

uint64_t Calendar.MatchingPolicy.init(from:)@<X0>(void *a1@<X0>, _BYTE *a2@<X8>)
{
  if (!v2)
  {
    __swift_project_boxed_opaque_existential_1(v13, v13[3]);
    unint64_t v5 = dispatch thunk of SingleValueDecodingContainer.decode(_:)();
    char v6 = v5;
    if (v5 >= 4)
    {
      uint64_t v7 = type metadata accessor for DecodingError();
      swift_allocError();
      uint64_t v9 = v8;
      uint64_t v10 = a1[3];
      uint64_t v11 = a1[4];
      __swift_project_boxed_opaque_existential_1(a1, v10);
      MEMORY[0x186E1CF78](v10, v11);
      DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
      (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v7 - 8) + 104LL))( v9,  *MEMORY[0x189619360],  v7);
      swift_willThrow();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v13);
    }

    else
    {
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v13);
      *a2 = v6;
    }
  }

  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

void Calendar.MatchingPolicy.encode(to:)(void *a1)
{
  uint64_t v2 = *v1;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  dispatch thunk of Encoder.singleValueContainer()();
  __asm { BR              X9 }

uint64_t sub_1831973FC()
{
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v1);
}

uint64_t protocol witness for Decodable.init(from:) in conformance Calendar.MatchingPolicy@<X0>( void *a1@<X0>, _BYTE *a2@<X8>)
{
  return Calendar.MatchingPolicy.init(from:)(a1, a2);
}

void protocol witness for Encodable.encode(to:) in conformance Calendar.MatchingPolicy(void *a1)
{
}

uint64_t Calendar.RepeatedTimePolicy.init(from:)@<X0>(void *a1@<X0>, char *a2@<X8>)
{
  if (!v2)
  {
    __swift_project_boxed_opaque_existential_1(v13, v13[3]);
    uint64_t v5 = dispatch thunk of SingleValueDecodingContainer.decode(_:)();
    if (!v5)
    {
      char v6 = 0;
      goto LABEL_8;
    }

    if (v5 == 1)
    {
      char v6 = 1;
LABEL_8:
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v13);
      *a2 = v6;
      return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
    }

    uint64_t v8 = type metadata accessor for DecodingError();
    swift_allocError();
    uint64_t v10 = v9;
    uint64_t v11 = a1[3];
    uint64_t v12 = a1[4];
    __swift_project_boxed_opaque_existential_1(a1, v11);
    MEMORY[0x186E1CF78](v11, v12);
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v8 - 8) + 104LL))( v10,  *MEMORY[0x189619360],  v8);
    swift_willThrow();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v13);
  }

  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t Calendar.RepeatedTimePolicy.encode(to:)(void *a1)
{
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v2);
}

uint64_t protocol witness for Decodable.init(from:) in conformance Calendar.RepeatedTimePolicy@<X0>( void *a1@<X0>, char *a2@<X8>)
{
  return Calendar.RepeatedTimePolicy.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance Calendar.RepeatedTimePolicy(void *a1)
{
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v2);
}

uint64_t protocol witness for _ObjectiveCBridgeable._bridgeToObjectiveC() in conformance Calendar()
{
  uint64_t v1 = *(void *)(v0 + 8);
  uint64_t ObjectType = swift_getObjectType();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 216))(ObjectType, v1);
}

uint64_t NSCalendar._toCustomAnyHashable()()
{
  uint64_t v1 = swift_dynamicCastClass();
  if (v1)
  {
    uint64_t v2 = *(void *)(v1 + OBJC_IVAR____NSSwiftCalendar__lock);
    uint64_t v3 = (_OWORD *)(v2 + 16);
    int v4 = (os_unfair_lock_s *)(v2 + 32);
    id v5 = v0;
    os_unfair_lock_lock(v4);
    closure #1 in _NSSwiftCalendar.calendar.getter(v3, &v10);
    os_unfair_lock_unlock(v4);

    unint64_t v7 = *((void *)&v10 + 1);
    uint64_t v6 = v10;
  }

  else
  {
    type metadata accessor for _CalendarBridged();
    uint64_t v6 = swift_allocObject();
    *(void *)(v6 + 16) = v0;
    unint64_t v7 = lazy protocol witness table accessor for type _CalendarBridged and conformance _CalendarBridged();
    id v8 = v0;
  }

  *(void *)&__int128 v10 = v6;
  *((void *)&v10 + 1) = v7;
  lazy protocol witness table accessor for type Calendar and conformance Calendar();
  return AnyHashable.init<A>(_:)();
}

void protocol witness for _HasCustomAnyHashableRepresentation._toCustomAnyHashable() in conformance NSCalendar()
{
  id v1 = *v0;
  NSCalendar._toCustomAnyHashable()();
}

BOOL specialized static WeekendRange.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  char v3 = *(_BYTE *)(a2 + 8);
  uint64_t v4 = *(void *)(a2 + 32);
  if ((*(_BYTE *)(a1 + 8) & 1) != 0)
  {
    if (!*(_BYTE *)(a2 + 8)) {
      return 0LL;
    }
  }

  else
  {
    if ((v3 & 1) != 0) {
      return 0LL;
    }
  }

  if ((*(_BYTE *)(a1 + 24) & 1) != 0)
  {
    if (v2 == v4) {
      int v6 = *(unsigned __int8 *)(a2 + 24);
    }
    else {
      int v6 = 0;
    }
    if (v6 != 1) {
      return 0LL;
    }
  }

  else
  {
    if ((*(_BYTE *)(a2 + 24) & 1) != 0) {
      return 0LL;
    }
  }

  return *(void *)(a1 + 40) == *(void *)(a2 + 40);
}

unint64_t lazy protocol witness table accessor for type _CalendarBridged and conformance _CalendarBridged()
{
  unint64_t result = lazy protocol witness table cache variable for type _CalendarBridged and conformance _CalendarBridged;
  if (!lazy protocol witness table cache variable for type _CalendarBridged and conformance _CalendarBridged)
  {
    uint64_t v1 = type metadata accessor for _CalendarBridged();
    unint64_t result = MEMORY[0x186E20D4C](&protocol conformance descriptor for _CalendarBridged, v1);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type _CalendarBridged and conformance _CalendarBridged);
  }

  return result;
}

uint64_t specialized static Calendar.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  void (*v12)(__int128 *__return_ptr, uint64_t, uint64_t);
  void (*v13)(__int128 *__return_ptr, uint64_t, uint64_t);
  void (*v14)(__int128 *__return_ptr, uint64_t, uint64_t);
  void (*v15)(__int128 *__return_ptr, uint64_t, uint64_t);
  char v16;
  uint64_t (*v17)(uint64_t, uint64_t);
  uint64_t v18;
  uint64_t (*v19)(uint64_t, uint64_t);
  uint64_t v20;
  uint64_t (*v21)(uint64_t, uint64_t);
  uint64_t v22;
  uint64_t (*v23)(uint64_t, uint64_t);
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  uint64_t v30;
  char v31;
  char v32;
  uint64_t (*v33)(uint64_t, uint64_t);
  uint64_t v34;
  char v35;
  char v36;
  uint64_t v38;
  char v39;
  char v40;
  uint64_t (*v41)(uint64_t, uint64_t);
  uint64_t v42;
  char v43;
  char v44;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a2 + 8);
  uint64_t ObjectType = swift_getObjectType();
  id v5 = *(uint64_t (**)(uint64_t, uint64_t))(v2 + 96);
  if ((v5(ObjectType, v2) & 1) != 0
    || (uint64_t v6 = swift_getObjectType(),
        unint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t))(v3 + 96),
        swift_unknownObjectRetain(),
        char v8 = v7(v6, v3),
        swift_unknownObjectRelease(),
        (v8 & 1) != 0))
  {
    char v9 = v5(ObjectType, v2);
    uint64_t v10 = swift_getObjectType();
    char v11 = v9 ^ (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 96))(v10, v3) ^ 1;
    return v11 & 1;
  }

  uint64_t v12 = *(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(v2 + 24);
  swift_unknownObjectRetain();
  v12(&v49, ObjectType, v2);
  swift_unknownObjectRelease();
  LODWORD(v12) = v49;
  uint64_t v13 = *(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(v3 + 24);
  swift_unknownObjectRetain();
  v13(&v48, v6, v3);
  swift_unknownObjectRelease();
  uint64_t v14 = *(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(v2 + 48);
  swift_unknownObjectRetain();
  v14(&v49, ObjectType, v2);
  swift_unknownObjectRelease();
  uint64_t v48 = v49;
  uint64_t v15 = *(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(v3 + 48);
  swift_unknownObjectRetain();
  v15(&v47, v6, v3);
  swift_unknownObjectRelease();
  uint64_t v46 = v47;
  uint64_t v16 = specialized static TimeZone.== infix(_:_:)((uint64_t)&v48, (uint64_t)&v46);
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  if ((v16 & 1) == 0) {
    goto LABEL_17;
  }
  uint64_t v17 = *(uint64_t (**)(uint64_t, uint64_t))(v2 + 56);
  swift_unknownObjectRetain();
  uint64_t v18 = v17(ObjectType, v2);
  swift_unknownObjectRelease();
  uint64_t v19 = *(uint64_t (**)(uint64_t, uint64_t))(v3 + 56);
  swift_unknownObjectRetain();
  uint64_t v20 = v19(v6, v3);
  swift_unknownObjectRelease();
  if (v18 != v20) {
    goto LABEL_17;
  }
  uint64_t v21 = *(uint64_t (**)(uint64_t, uint64_t))(v2 + 72);
  swift_unknownObjectRetain();
  uint64_t v22 = v21(ObjectType, v2);
  swift_unknownObjectRelease();
  uint64_t v23 = *(uint64_t (**)(uint64_t, uint64_t))(v3 + 72);
  swift_unknownObjectRetain();
  uint64_t v24 = v23(v6, v3);
  swift_unknownObjectRelease();
  if (v22 != v24) {
    goto LABEL_17;
  }
  uint64_t v25 = (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 40))(ObjectType, v2);
  uint64_t v27 = v26;
  if (v25 == (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 40))(v6, v3) && v27 == v28)
  {
    swift_bridgeObjectRelease_n();
  }

  else
  {
    uint64_t v29 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    char v11 = 0;
    if ((v29 & 1) == 0) {
      return v11 & 1;
    }
  }

  uint64_t v30 = (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 64))(ObjectType, v2);
  double v32 = v31;
  uint64_t v33 = *(uint64_t (**)(uint64_t, uint64_t))(v3 + 64);
  swift_unknownObjectRetain();
  uint64_t v34 = v33(v6, v3);
  uint64_t v36 = v35;
  swift_unknownObjectRelease();
  if ((v32 & 1) == 0)
  {
    char v11 = 0;
    if ((v36 & 1) != 0 || v30 != v34) {
      return v11 & 1;
    }
    goto LABEL_19;
  }

  if ((v36 & 1) == 0)
  {
LABEL_17:
    char v11 = 0;
    return v11 & 1;
  }

uint64_t specialized _NativeSet.filter(_:)(uint64_t isStackAllocationSafe)
{
  uint64_t v1 = isStackAllocationSafe;
  uint64_t v23 = *MEMORY[0x1895F89C0];
  char v2 = *(_BYTE *)(isStackAllocationSafe + 32);
  unint64_t v22 = (unint64_t)((1LL << v2) + 63) >> 6;
  size_t v3 = 8 * v22;
  if ((v2 & 0x3Fu) > 0xD)
  {
    uint64_t isStackAllocationSafe = swift_stdlib_isStackAllocationSafe();
    if ((isStackAllocationSafe & 1) == 0)
    {
      uint64_t v21 = (char *)swift_slowAlloc();
      bzero(v21, v3);
      uint64_t v12 = 1LL << *(_BYTE *)(v1 + 32);
      if (v12 < 64) {
        uint64_t v13 = ~(-1LL << v12);
      }
      else {
        uint64_t v13 = -1LL;
      }
      unint64_t v14 = v13 & *(void *)(v1 + 56);
      if (v14)
      {
        unint64_t v15 = __clz(__rbit64(v14));
        goto LABEL_42;
      }

      int64_t v16 = 1LL;
      if ((unint64_t)(v12 + 63) >> 6 > 1)
      {
        unint64_t v17 = *(void *)(v1 + 64);
        if (v17)
        {
LABEL_41:
          unint64_t v15 = __clz(__rbit64(v17)) + (v16 << 6);
LABEL_42:
          __asm { BR              X26 }
        }

        uint64_t v18 = 2LL;
        if ((unint64_t)(v12 + 63) >> 6 > 2)
        {
          unint64_t v17 = *(void *)(v1 + 72);
          if (v17) {
            goto LABEL_40;
          }
          uint64_t v18 = 3LL;
          unint64_t v17 = *(void *)(v1 + 80);
          if (v17) {
            goto LABEL_40;
          }
          uint64_t v18 = 4LL;
          unint64_t v17 = *(void *)(v1 + 88);
          if (v17)
          {
LABEL_40:
            int64_t v16 = v18;
            goto LABEL_41;
          }

          uint64_t v18 = 5LL;
          if ((unint64_t)(v12 + 63) >> 6 > 5)
          {
            unint64_t v17 = *(void *)(v1 + 96);
            if (!v17)
            {
              while (1)
              {
                int64_t v16 = v18 + 1;
                if (__OFADD__(v18, 1LL)) {
                  goto LABEL_50;
                }
                unint64_t v17 = *(void *)(v1 + 56 + 8 * v16);
                ++v18;
                if (v17) {
                  goto LABEL_41;
                }
              }
            }

            goto LABEL_40;
          }
        }
      }

{
  uint64_t v1;
  char v2;
  size_t v3;
  int64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int64_t v9;
  char v10;
  unint64_t v11;
  unint64_t v12;
  BOOL v13;
  unint64_t v14;
  int64_t v15;
  unint64_t v16;
  unsigned __int8 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  int64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  int64_t v30;
  unint64_t v31;
  unsigned __int8 v32;
  uint64_t v33;
  uint64_t v34;
  int64_t v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  int64_t v42;
  Swift::UInt v43;
  Swift::Int v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  char v48;
  unint64_t v49;
  BOOL v50;
  uint64_t v51;
  int64_t v52;
  int64_t v53;
  unint64_t v54;
  uint64_t v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t v58;
  unint64_t v59;
  int64_t v60;
  Swift::UInt v61;
  Swift::Int v62;
  uint64_t v63;
  unint64_t v64;
  unint64_t v65;
  char v66;
  unint64_t v67;
  BOOL v68;
  uint64_t v69;
  int64_t v70;
  uint64_t v72;
  uint64_t v73;
  int64_t v74;
  unint64_t *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v1 = isStackAllocationSafe;
  id v78 = *MEMORY[0x1895F89C0];
  char v2 = *(_BYTE *)(isStackAllocationSafe + 32);
  uint64_t v74 = (unint64_t)((1LL << v2) + 63) >> 6;
  size_t v3 = 8 * v74;
  uint64_t v76 = isStackAllocationSafe;
  if ((v2 & 0x3Fu) > 0xD)
  {
    uint64_t isStackAllocationSafe = swift_stdlib_isStackAllocationSafe();
    if ((isStackAllocationSafe & 1) == 0)
    {
      uint64_t v75 = (unint64_t *)swift_slowAlloc();
      bzero(v75, v3);
      uint64_t v73 = 0LL;
      uint64_t v21 = 0LL;
      unint64_t v22 = v1 + 56;
      uint64_t v23 = 1LL << *(_BYTE *)(v1 + 32);
      if (v23 < 64) {
        uint64_t v24 = ~(-1LL << v23);
      }
      else {
        uint64_t v24 = -1LL;
      }
      uint64_t v25 = v24 & *(void *)(v1 + 56);
      uint64_t v26 = (unint64_t)(v23 + 63) >> 6;
      while (1)
      {
        if (v25)
        {
          uint64_t v27 = __clz(__rbit64(v25));
          v25 &= v25 - 1;
          uint64_t v28 = v27 | (v21 << 6);
        }

        else
        {
          uint64_t v13 = __OFADD__(v21++, 1LL);
          if (v13) {
            goto LABEL_148;
          }
          if (v21 >= v26) {
            goto LABEL_72;
          }
          uint64_t v29 = *(void *)(v22 + 8 * v21);
          if (!v29)
          {
            uint64_t v30 = v21 + 1;
            if (v21 + 1 >= v26) {
              goto LABEL_72;
            }
            uint64_t v29 = *(void *)(v22 + 8 * v30);
            if (!v29)
            {
              uint64_t v30 = v21 + 2;
              if (v21 + 2 >= v26) {
                goto LABEL_72;
              }
              uint64_t v29 = *(void *)(v22 + 8 * v30);
              if (!v29)
              {
                uint64_t v30 = v21 + 3;
                if (v21 + 3 >= v26) {
                  goto LABEL_72;
                }
                uint64_t v29 = *(void *)(v22 + 8 * v30);
                if (!v29)
                {
                  uint64_t v30 = v21 + 4;
                  if (v21 + 4 >= v26) {
                    goto LABEL_72;
                  }
                  uint64_t v29 = *(void *)(v22 + 8 * v30);
                  if (!v29)
                  {
                    while (1)
                    {
                      uint64_t v21 = v30 + 1;
                      if (__OFADD__(v30, 1LL)) {
                        goto LABEL_152;
                      }
                      if (v21 >= v26) {
                        break;
                      }
                      uint64_t v29 = *(void *)(v22 + 8 * v21);
                      ++v30;
                      if (v29) {
                        goto LABEL_58;
                      }
                    }

unint64_t lazy protocol witness table accessor for type Calendar.CodingKeys and conformance Calendar.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type Calendar.CodingKeys and conformance Calendar.CodingKeys;
  if (!lazy protocol witness table cache variable for type Calendar.CodingKeys and conformance Calendar.CodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C](&protocol conformance descriptor for Calendar.CodingKeys, &unk_189C80740);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Calendar.CodingKeys and conformance Calendar.CodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type Calendar.CodingKeys and conformance Calendar.CodingKeys;
  if (!lazy protocol witness table cache variable for type Calendar.CodingKeys and conformance Calendar.CodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C](&protocol conformance descriptor for Calendar.CodingKeys, &unk_189C80740);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Calendar.CodingKeys and conformance Calendar.CodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type Calendar.CodingKeys and conformance Calendar.CodingKeys;
  if (!lazy protocol witness table cache variable for type Calendar.CodingKeys and conformance Calendar.CodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C](&protocol conformance descriptor for Calendar.CodingKeys, &unk_189C80740);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Calendar.CodingKeys and conformance Calendar.CodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type Calendar.CodingKeys and conformance Calendar.CodingKeys;
  if (!lazy protocol witness table cache variable for type Calendar.CodingKeys and conformance Calendar.CodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C](&protocol conformance descriptor for Calendar.CodingKeys, &unk_189C80740);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Calendar.CodingKeys and conformance Calendar.CodingKeys);
  }

  return result;
}

unint64_t lazy protocol witness table accessor for type Calendar.Current and conformance Calendar.Current()
{
  unint64_t result = lazy protocol witness table cache variable for type Calendar.Current and conformance Calendar.Current;
  if (!lazy protocol witness table cache variable for type Calendar.Current and conformance Calendar.Current)
  {
    unint64_t result = MEMORY[0x186E20D4C](&protocol conformance descriptor for Calendar.Current, &unk_189C806B0);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Calendar.Current and conformance Calendar.Current);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type Calendar.Current and conformance Calendar.Current;
  if (!lazy protocol witness table cache variable for type Calendar.Current and conformance Calendar.Current)
  {
    unint64_t result = MEMORY[0x186E20D4C](&protocol conformance descriptor for Calendar.Current, &unk_189C806B0);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Calendar.Current and conformance Calendar.Current);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type Calendar.Current and conformance Calendar.Current;
  if (!lazy protocol witness table cache variable for type Calendar.Current and conformance Calendar.Current)
  {
    unint64_t result = MEMORY[0x186E20D4C](&protocol conformance descriptor for Calendar.Current, &unk_189C806B0);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Calendar.Current and conformance Calendar.Current);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type Calendar.Current and conformance Calendar.Current;
  if (!lazy protocol witness table cache variable for type Calendar.Current and conformance Calendar.Current)
  {
    unint64_t result = MEMORY[0x186E20D4C](&protocol conformance descriptor for Calendar.Current, &unk_189C806B0);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Calendar.Current and conformance Calendar.Current);
  }

  return result;
}

unint64_t lazy protocol witness table accessor for type Locale? and conformance <A> A?()
{
  unint64_t result = lazy protocol witness table cache variable for type Locale? and conformance <A> A?;
  if (!lazy protocol witness table cache variable for type Locale? and conformance <A> A?)
  {
    uint64_t v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Locale?);
    unint64_t v2 = lazy protocol witness table accessor for type Locale and conformance Locale();
    unint64_t result = MEMORY[0x186E20D4C](MEMORY[0x18961AF98], v1, &v2);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Locale? and conformance <A> A?);
  }

  return result;
}

unint64_t lazy protocol witness table accessor for type Calendar.Identifier.CodingKeys and conformance Calendar.Identifier.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type Calendar.Identifier.CodingKeys and conformance Calendar.Identifier.CodingKeys;
  if (!lazy protocol witness table cache variable for type Calendar.Identifier.CodingKeys and conformance Calendar.Identifier.CodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C](&protocol conformance descriptor for Calendar.Identifier.CodingKeys, &unk_189C80420);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Calendar.Identifier.CodingKeys and conformance Calendar.Identifier.CodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type Calendar.Identifier.CodingKeys and conformance Calendar.Identifier.CodingKeys;
  if (!lazy protocol witness table cache variable for type Calendar.Identifier.CodingKeys and conformance Calendar.Identifier.CodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C](&protocol conformance descriptor for Calendar.Identifier.CodingKeys, &unk_189C80420);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Calendar.Identifier.CodingKeys and conformance Calendar.Identifier.CodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type Calendar.Identifier.CodingKeys and conformance Calendar.Identifier.CodingKeys;
  if (!lazy protocol witness table cache variable for type Calendar.Identifier.CodingKeys and conformance Calendar.Identifier.CodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C](&protocol conformance descriptor for Calendar.Identifier.CodingKeys, &unk_189C80420);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Calendar.Identifier.CodingKeys and conformance Calendar.Identifier.CodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type Calendar.Identifier.CodingKeys and conformance Calendar.Identifier.CodingKeys;
  if (!lazy protocol witness table cache variable for type Calendar.Identifier.CodingKeys and conformance Calendar.Identifier.CodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C](&protocol conformance descriptor for Calendar.Identifier.CodingKeys, &unk_189C80420);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Calendar.Identifier.CodingKeys and conformance Calendar.Identifier.CodingKeys);
  }

  return result;
}

unint64_t lazy protocol witness table accessor for type Calendar.Identifier.IslamicUmmAlQuraCodingKeys and conformance Calendar.Identifier.IslamicUmmAlQuraCodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type Calendar.Identifier.IslamicUmmAlQuraCodingKeys and conformance Calendar.Identifier.IslamicUmmAlQuraCodingKeys;
  if (!lazy protocol witness table cache variable for type Calendar.Identifier.IslamicUmmAlQuraCodingKeys and conformance Calendar.Identifier.IslamicUmmAlQuraCodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for Calendar.Identifier.IslamicUmmAlQuraCodingKeys,  &unk_189C80620);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Calendar.Identifier.IslamicUmmAlQuraCodingKeys and conformance Calendar.Identifier.IslamicUmmAlQuraCodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type Calendar.Identifier.IslamicUmmAlQuraCodingKeys and conformance Calendar.Identifier.IslamicUmmAlQuraCodingKeys;
  if (!lazy protocol witness table cache variable for type Calendar.Identifier.IslamicUmmAlQuraCodingKeys and conformance Calendar.Identifier.IslamicUmmAlQuraCodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for Calendar.Identifier.IslamicUmmAlQuraCodingKeys,  &unk_189C80620);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Calendar.Identifier.IslamicUmmAlQuraCodingKeys and conformance Calendar.Identifier.IslamicUmmAlQuraCodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type Calendar.Identifier.IslamicUmmAlQuraCodingKeys and conformance Calendar.Identifier.IslamicUmmAlQuraCodingKeys;
  if (!lazy protocol witness table cache variable for type Calendar.Identifier.IslamicUmmAlQuraCodingKeys and conformance Calendar.Identifier.IslamicUmmAlQuraCodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for Calendar.Identifier.IslamicUmmAlQuraCodingKeys,  &unk_189C80620);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Calendar.Identifier.IslamicUmmAlQuraCodingKeys and conformance Calendar.Identifier.IslamicUmmAlQuraCodingKeys);
  }

  return result;
}

unint64_t lazy protocol witness table accessor for type Calendar.Identifier.IslamicTabularCodingKeys and conformance Calendar.Identifier.IslamicTabularCodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type Calendar.Identifier.IslamicTabularCodingKeys and conformance Calendar.Identifier.IslamicTabularCodingKeys;
  if (!lazy protocol witness table cache variable for type Calendar.Identifier.IslamicTabularCodingKeys and conformance Calendar.Identifier.IslamicTabularCodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for Calendar.Identifier.IslamicTabularCodingKeys,  &unk_189C80600);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Calendar.Identifier.IslamicTabularCodingKeys and conformance Calendar.Identifier.IslamicTabularCodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type Calendar.Identifier.IslamicTabularCodingKeys and conformance Calendar.Identifier.IslamicTabularCodingKeys;
  if (!lazy protocol witness table cache variable for type Calendar.Identifier.IslamicTabularCodingKeys and conformance Calendar.Identifier.IslamicTabularCodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for Calendar.Identifier.IslamicTabularCodingKeys,  &unk_189C80600);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Calendar.Identifier.IslamicTabularCodingKeys and conformance Calendar.Identifier.IslamicTabularCodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type Calendar.Identifier.IslamicTabularCodingKeys and conformance Calendar.Identifier.IslamicTabularCodingKeys;
  if (!lazy protocol witness table cache variable for type Calendar.Identifier.IslamicTabularCodingKeys and conformance Calendar.Identifier.IslamicTabularCodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for Calendar.Identifier.IslamicTabularCodingKeys,  &unk_189C80600);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Calendar.Identifier.IslamicTabularCodingKeys and conformance Calendar.Identifier.IslamicTabularCodingKeys);
  }

  return result;
}

unint64_t lazy protocol witness table accessor for type Calendar.Identifier.RepublicOfChinaCodingKeys and conformance Calendar.Identifier.RepublicOfChinaCodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type Calendar.Identifier.RepublicOfChinaCodingKeys and conformance Calendar.Identifier.RepublicOfChinaCodingKeys;
  if (!lazy protocol witness table cache variable for type Calendar.Identifier.RepublicOfChinaCodingKeys and conformance Calendar.Identifier.RepublicOfChinaCodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for Calendar.Identifier.RepublicOfChinaCodingKeys,  &unk_189C805E0);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Calendar.Identifier.RepublicOfChinaCodingKeys and conformance Calendar.Identifier.RepublicOfChinaCodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type Calendar.Identifier.RepublicOfChinaCodingKeys and conformance Calendar.Identifier.RepublicOfChinaCodingKeys;
  if (!lazy protocol witness table cache variable for type Calendar.Identifier.RepublicOfChinaCodingKeys and conformance Calendar.Identifier.RepublicOfChinaCodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for Calendar.Identifier.RepublicOfChinaCodingKeys,  &unk_189C805E0);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Calendar.Identifier.RepublicOfChinaCodingKeys and conformance Calendar.Identifier.RepublicOfChinaCodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type Calendar.Identifier.RepublicOfChinaCodingKeys and conformance Calendar.Identifier.RepublicOfChinaCodingKeys;
  if (!lazy protocol witness table cache variable for type Calendar.Identifier.RepublicOfChinaCodingKeys and conformance Calendar.Identifier.RepublicOfChinaCodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for Calendar.Identifier.RepublicOfChinaCodingKeys,  &unk_189C805E0);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Calendar.Identifier.RepublicOfChinaCodingKeys and conformance Calendar.Identifier.RepublicOfChinaCodingKeys);
  }

  return result;
}

unint64_t lazy protocol witness table accessor for type Calendar.Identifier.PersianCodingKeys and conformance Calendar.Identifier.PersianCodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type Calendar.Identifier.PersianCodingKeys and conformance Calendar.Identifier.PersianCodingKeys;
  if (!lazy protocol witness table cache variable for type Calendar.Identifier.PersianCodingKeys and conformance Calendar.Identifier.PersianCodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for Calendar.Identifier.PersianCodingKeys,  &unk_189C805C0);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Calendar.Identifier.PersianCodingKeys and conformance Calendar.Identifier.PersianCodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type Calendar.Identifier.PersianCodingKeys and conformance Calendar.Identifier.PersianCodingKeys;
  if (!lazy protocol witness table cache variable for type Calendar.Identifier.PersianCodingKeys and conformance Calendar.Identifier.PersianCodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for Calendar.Identifier.PersianCodingKeys,  &unk_189C805C0);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Calendar.Identifier.PersianCodingKeys and conformance Calendar.Identifier.PersianCodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type Calendar.Identifier.PersianCodingKeys and conformance Calendar.Identifier.PersianCodingKeys;
  if (!lazy protocol witness table cache variable for type Calendar.Identifier.PersianCodingKeys and conformance Calendar.Identifier.PersianCodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for Calendar.Identifier.PersianCodingKeys,  &unk_189C805C0);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Calendar.Identifier.PersianCodingKeys and conformance Calendar.Identifier.PersianCodingKeys);
  }

  return result;
}

unint64_t lazy protocol witness table accessor for type Calendar.Identifier.JapaneseCodingKeys and conformance Calendar.Identifier.JapaneseCodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type Calendar.Identifier.JapaneseCodingKeys and conformance Calendar.Identifier.JapaneseCodingKeys;
  if (!lazy protocol witness table cache variable for type Calendar.Identifier.JapaneseCodingKeys and conformance Calendar.Identifier.JapaneseCodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for Calendar.Identifier.JapaneseCodingKeys,  &unk_189C805A0);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Calendar.Identifier.JapaneseCodingKeys and conformance Calendar.Identifier.JapaneseCodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type Calendar.Identifier.JapaneseCodingKeys and conformance Calendar.Identifier.JapaneseCodingKeys;
  if (!lazy protocol witness table cache variable for type Calendar.Identifier.JapaneseCodingKeys and conformance Calendar.Identifier.JapaneseCodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for Calendar.Identifier.JapaneseCodingKeys,  &unk_189C805A0);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Calendar.Identifier.JapaneseCodingKeys and conformance Calendar.Identifier.JapaneseCodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type Calendar.Identifier.JapaneseCodingKeys and conformance Calendar.Identifier.JapaneseCodingKeys;
  if (!lazy protocol witness table cache variable for type Calendar.Identifier.JapaneseCodingKeys and conformance Calendar.Identifier.JapaneseCodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for Calendar.Identifier.JapaneseCodingKeys,  &unk_189C805A0);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Calendar.Identifier.JapaneseCodingKeys and conformance Calendar.Identifier.JapaneseCodingKeys);
  }

  return result;
}

unint64_t lazy protocol witness table accessor for type Calendar.Identifier.IslamicCivilCodingKeys and conformance Calendar.Identifier.IslamicCivilCodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type Calendar.Identifier.IslamicCivilCodingKeys and conformance Calendar.Identifier.IslamicCivilCodingKeys;
  if (!lazy protocol witness table cache variable for type Calendar.Identifier.IslamicCivilCodingKeys and conformance Calendar.Identifier.IslamicCivilCodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for Calendar.Identifier.IslamicCivilCodingKeys,  &unk_189C80580);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Calendar.Identifier.IslamicCivilCodingKeys and conformance Calendar.Identifier.IslamicCivilCodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type Calendar.Identifier.IslamicCivilCodingKeys and conformance Calendar.Identifier.IslamicCivilCodingKeys;
  if (!lazy protocol witness table cache variable for type Calendar.Identifier.IslamicCivilCodingKeys and conformance Calendar.Identifier.IslamicCivilCodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for Calendar.Identifier.IslamicCivilCodingKeys,  &unk_189C80580);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Calendar.Identifier.IslamicCivilCodingKeys and conformance Calendar.Identifier.IslamicCivilCodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type Calendar.Identifier.IslamicCivilCodingKeys and conformance Calendar.Identifier.IslamicCivilCodingKeys;
  if (!lazy protocol witness table cache variable for type Calendar.Identifier.IslamicCivilCodingKeys and conformance Calendar.Identifier.IslamicCivilCodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for Calendar.Identifier.IslamicCivilCodingKeys,  &unk_189C80580);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Calendar.Identifier.IslamicCivilCodingKeys and conformance Calendar.Identifier.IslamicCivilCodingKeys);
  }

  return result;
}

unint64_t lazy protocol witness table accessor for type Calendar.Identifier.IslamicCodingKeys and conformance Calendar.Identifier.IslamicCodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type Calendar.Identifier.IslamicCodingKeys and conformance Calendar.Identifier.IslamicCodingKeys;
  if (!lazy protocol witness table cache variable for type Calendar.Identifier.IslamicCodingKeys and conformance Calendar.Identifier.IslamicCodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for Calendar.Identifier.IslamicCodingKeys,  &unk_189C80560);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Calendar.Identifier.IslamicCodingKeys and conformance Calendar.Identifier.IslamicCodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type Calendar.Identifier.IslamicCodingKeys and conformance Calendar.Identifier.IslamicCodingKeys;
  if (!lazy protocol witness table cache variable for type Calendar.Identifier.IslamicCodingKeys and conformance Calendar.Identifier.IslamicCodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for Calendar.Identifier.IslamicCodingKeys,  &unk_189C80560);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Calendar.Identifier.IslamicCodingKeys and conformance Calendar.Identifier.IslamicCodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type Calendar.Identifier.IslamicCodingKeys and conformance Calendar.Identifier.IslamicCodingKeys;
  if (!lazy protocol witness table cache variable for type Calendar.Identifier.IslamicCodingKeys and conformance Calendar.Identifier.IslamicCodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for Calendar.Identifier.IslamicCodingKeys,  &unk_189C80560);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Calendar.Identifier.IslamicCodingKeys and conformance Calendar.Identifier.IslamicCodingKeys);
  }

  return result;
}

unint64_t lazy protocol witness table accessor for type Calendar.Identifier.IndianCodingKeys and conformance Calendar.Identifier.IndianCodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type Calendar.Identifier.IndianCodingKeys and conformance Calendar.Identifier.IndianCodingKeys;
  if (!lazy protocol witness table cache variable for type Calendar.Identifier.IndianCodingKeys and conformance Calendar.Identifier.IndianCodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for Calendar.Identifier.IndianCodingKeys,  &unk_189C80540);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Calendar.Identifier.IndianCodingKeys and conformance Calendar.Identifier.IndianCodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type Calendar.Identifier.IndianCodingKeys and conformance Calendar.Identifier.IndianCodingKeys;
  if (!lazy protocol witness table cache variable for type Calendar.Identifier.IndianCodingKeys and conformance Calendar.Identifier.IndianCodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for Calendar.Identifier.IndianCodingKeys,  &unk_189C80540);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Calendar.Identifier.IndianCodingKeys and conformance Calendar.Identifier.IndianCodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type Calendar.Identifier.IndianCodingKeys and conformance Calendar.Identifier.IndianCodingKeys;
  if (!lazy protocol witness table cache variable for type Calendar.Identifier.IndianCodingKeys and conformance Calendar.Identifier.IndianCodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for Calendar.Identifier.IndianCodingKeys,  &unk_189C80540);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Calendar.Identifier.IndianCodingKeys and conformance Calendar.Identifier.IndianCodingKeys);
  }

  return result;
}

unint64_t lazy protocol witness table accessor for type Calendar.Identifier.Iso8601CodingKeys and conformance Calendar.Identifier.Iso8601CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type Calendar.Identifier.Iso8601CodingKeys and conformance Calendar.Identifier.Iso8601CodingKeys;
  if (!lazy protocol witness table cache variable for type Calendar.Identifier.Iso8601CodingKeys and conformance Calendar.Identifier.Iso8601CodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for Calendar.Identifier.Iso8601CodingKeys,  &unk_189C80520);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Calendar.Identifier.Iso8601CodingKeys and conformance Calendar.Identifier.Iso8601CodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type Calendar.Identifier.Iso8601CodingKeys and conformance Calendar.Identifier.Iso8601CodingKeys;
  if (!lazy protocol witness table cache variable for type Calendar.Identifier.Iso8601CodingKeys and conformance Calendar.Identifier.Iso8601CodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for Calendar.Identifier.Iso8601CodingKeys,  &unk_189C80520);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Calendar.Identifier.Iso8601CodingKeys and conformance Calendar.Identifier.Iso8601CodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type Calendar.Identifier.Iso8601CodingKeys and conformance Calendar.Identifier.Iso8601CodingKeys;
  if (!lazy protocol witness table cache variable for type Calendar.Identifier.Iso8601CodingKeys and conformance Calendar.Identifier.Iso8601CodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for Calendar.Identifier.Iso8601CodingKeys,  &unk_189C80520);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Calendar.Identifier.Iso8601CodingKeys and conformance Calendar.Identifier.Iso8601CodingKeys);
  }

  return result;
}

unint64_t lazy protocol witness table accessor for type Calendar.Identifier.HebrewCodingKeys and conformance Calendar.Identifier.HebrewCodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type Calendar.Identifier.HebrewCodingKeys and conformance Calendar.Identifier.HebrewCodingKeys;
  if (!lazy protocol witness table cache variable for type Calendar.Identifier.HebrewCodingKeys and conformance Calendar.Identifier.HebrewCodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for Calendar.Identifier.HebrewCodingKeys,  &unk_189C80500);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Calendar.Identifier.HebrewCodingKeys and conformance Calendar.Identifier.HebrewCodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type Calendar.Identifier.HebrewCodingKeys and conformance Calendar.Identifier.HebrewCodingKeys;
  if (!lazy protocol witness table cache variable for type Calendar.Identifier.HebrewCodingKeys and conformance Calendar.Identifier.HebrewCodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for Calendar.Identifier.HebrewCodingKeys,  &unk_189C80500);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Calendar.Identifier.HebrewCodingKeys and conformance Calendar.Identifier.HebrewCodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type Calendar.Identifier.HebrewCodingKeys and conformance Calendar.Identifier.HebrewCodingKeys;
  if (!lazy protocol witness table cache variable for type Calendar.Identifier.HebrewCodingKeys and conformance Calendar.Identifier.HebrewCodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for Calendar.Identifier.HebrewCodingKeys,  &unk_189C80500);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Calendar.Identifier.HebrewCodingKeys and conformance Calendar.Identifier.HebrewCodingKeys);
  }

  return result;
}

unint64_t lazy protocol witness table accessor for type Calendar.Identifier.EthiopicAmeteAlemCodingKeys and conformance Calendar.Identifier.EthiopicAmeteAlemCodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type Calendar.Identifier.EthiopicAmeteAlemCodingKeys and conformance Calendar.Identifier.EthiopicAmeteAlemCodingKeys;
  if (!lazy protocol witness table cache variable for type Calendar.Identifier.EthiopicAmeteAlemCodingKeys and conformance Calendar.Identifier.EthiopicAmeteAlemCodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for Calendar.Identifier.EthiopicAmeteAlemCodingKeys,  &unk_189C804E0);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Calendar.Identifier.EthiopicAmeteAlemCodingKeys and conformance Calendar.Identifier.EthiopicAmeteAlemCodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type Calendar.Identifier.EthiopicAmeteAlemCodingKeys and conformance Calendar.Identifier.EthiopicAmeteAlemCodingKeys;
  if (!lazy protocol witness table cache variable for type Calendar.Identifier.EthiopicAmeteAlemCodingKeys and conformance Calendar.Identifier.EthiopicAmeteAlemCodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for Calendar.Identifier.EthiopicAmeteAlemCodingKeys,  &unk_189C804E0);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Calendar.Identifier.EthiopicAmeteAlemCodingKeys and conformance Calendar.Identifier.EthiopicAmeteAlemCodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type Calendar.Identifier.EthiopicAmeteAlemCodingKeys and conformance Calendar.Identifier.EthiopicAmeteAlemCodingKeys;
  if (!lazy protocol witness table cache variable for type Calendar.Identifier.EthiopicAmeteAlemCodingKeys and conformance Calendar.Identifier.EthiopicAmeteAlemCodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for Calendar.Identifier.EthiopicAmeteAlemCodingKeys,  &unk_189C804E0);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Calendar.Identifier.EthiopicAmeteAlemCodingKeys and conformance Calendar.Identifier.EthiopicAmeteAlemCodingKeys);
  }

  return result;
}

unint64_t lazy protocol witness table accessor for type Calendar.Identifier.EthiopicAmeteMihretCodingKeys and conformance Calendar.Identifier.EthiopicAmeteMihretCodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type Calendar.Identifier.EthiopicAmeteMihretCodingKeys and conformance Calendar.Identifier.EthiopicAmeteMihretCodingKeys;
  if (!lazy protocol witness table cache variable for type Calendar.Identifier.EthiopicAmeteMihretCodingKeys and conformance Calendar.Identifier.EthiopicAmeteMihretCodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for Calendar.Identifier.EthiopicAmeteMihretCodingKeys,  &unk_189C804C0);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Calendar.Identifier.EthiopicAmeteMihretCodingKeys and conformance Calendar.Identifier.EthiopicAmeteMihretCodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type Calendar.Identifier.EthiopicAmeteMihretCodingKeys and conformance Calendar.Identifier.EthiopicAmeteMihretCodingKeys;
  if (!lazy protocol witness table cache variable for type Calendar.Identifier.EthiopicAmeteMihretCodingKeys and conformance Calendar.Identifier.EthiopicAmeteMihretCodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for Calendar.Identifier.EthiopicAmeteMihretCodingKeys,  &unk_189C804C0);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Calendar.Identifier.EthiopicAmeteMihretCodingKeys and conformance Calendar.Identifier.EthiopicAmeteMihretCodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type Calendar.Identifier.EthiopicAmeteMihretCodingKeys and conformance Calendar.Identifier.EthiopicAmeteMihretCodingKeys;
  if (!lazy protocol witness table cache variable for type Calendar.Identifier.EthiopicAmeteMihretCodingKeys and conformance Calendar.Identifier.EthiopicAmeteMihretCodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for Calendar.Identifier.EthiopicAmeteMihretCodingKeys,  &unk_189C804C0);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Calendar.Identifier.EthiopicAmeteMihretCodingKeys and conformance Calendar.Identifier.EthiopicAmeteMihretCodingKeys);
  }

  return result;
}

unint64_t lazy protocol witness table accessor for type Calendar.Identifier.CopticCodingKeys and conformance Calendar.Identifier.CopticCodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type Calendar.Identifier.CopticCodingKeys and conformance Calendar.Identifier.CopticCodingKeys;
  if (!lazy protocol witness table cache variable for type Calendar.Identifier.CopticCodingKeys and conformance Calendar.Identifier.CopticCodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for Calendar.Identifier.CopticCodingKeys,  &unk_189C804A0);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Calendar.Identifier.CopticCodingKeys and conformance Calendar.Identifier.CopticCodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type Calendar.Identifier.CopticCodingKeys and conformance Calendar.Identifier.CopticCodingKeys;
  if (!lazy protocol witness table cache variable for type Calendar.Identifier.CopticCodingKeys and conformance Calendar.Identifier.CopticCodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for Calendar.Identifier.CopticCodingKeys,  &unk_189C804A0);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Calendar.Identifier.CopticCodingKeys and conformance Calendar.Identifier.CopticCodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type Calendar.Identifier.CopticCodingKeys and conformance Calendar.Identifier.CopticCodingKeys;
  if (!lazy protocol witness table cache variable for type Calendar.Identifier.CopticCodingKeys and conformance Calendar.Identifier.CopticCodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for Calendar.Identifier.CopticCodingKeys,  &unk_189C804A0);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Calendar.Identifier.CopticCodingKeys and conformance Calendar.Identifier.CopticCodingKeys);
  }

  return result;
}

unint64_t lazy protocol witness table accessor for type Calendar.Identifier.ChineseCodingKeys and conformance Calendar.Identifier.ChineseCodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type Calendar.Identifier.ChineseCodingKeys and conformance Calendar.Identifier.ChineseCodingKeys;
  if (!lazy protocol witness table cache variable for type Calendar.Identifier.ChineseCodingKeys and conformance Calendar.Identifier.ChineseCodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for Calendar.Identifier.ChineseCodingKeys,  &unk_189C80480);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Calendar.Identifier.ChineseCodingKeys and conformance Calendar.Identifier.ChineseCodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type Calendar.Identifier.ChineseCodingKeys and conformance Calendar.Identifier.ChineseCodingKeys;
  if (!lazy protocol witness table cache variable for type Calendar.Identifier.ChineseCodingKeys and conformance Calendar.Identifier.ChineseCodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for Calendar.Identifier.ChineseCodingKeys,  &unk_189C80480);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Calendar.Identifier.ChineseCodingKeys and conformance Calendar.Identifier.ChineseCodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type Calendar.Identifier.ChineseCodingKeys and conformance Calendar.Identifier.ChineseCodingKeys;
  if (!lazy protocol witness table cache variable for type Calendar.Identifier.ChineseCodingKeys and conformance Calendar.Identifier.ChineseCodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for Calendar.Identifier.ChineseCodingKeys,  &unk_189C80480);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Calendar.Identifier.ChineseCodingKeys and conformance Calendar.Identifier.ChineseCodingKeys);
  }

  return result;
}

unint64_t lazy protocol witness table accessor for type Calendar.Identifier.BuddhistCodingKeys and conformance Calendar.Identifier.BuddhistCodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type Calendar.Identifier.BuddhistCodingKeys and conformance Calendar.Identifier.BuddhistCodingKeys;
  if (!lazy protocol witness table cache variable for type Calendar.Identifier.BuddhistCodingKeys and conformance Calendar.Identifier.BuddhistCodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for Calendar.Identifier.BuddhistCodingKeys,  &unk_189C80460);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Calendar.Identifier.BuddhistCodingKeys and conformance Calendar.Identifier.BuddhistCodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type Calendar.Identifier.BuddhistCodingKeys and conformance Calendar.Identifier.BuddhistCodingKeys;
  if (!lazy protocol witness table cache variable for type Calendar.Identifier.BuddhistCodingKeys and conformance Calendar.Identifier.BuddhistCodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for Calendar.Identifier.BuddhistCodingKeys,  &unk_189C80460);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Calendar.Identifier.BuddhistCodingKeys and conformance Calendar.Identifier.BuddhistCodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type Calendar.Identifier.BuddhistCodingKeys and conformance Calendar.Identifier.BuddhistCodingKeys;
  if (!lazy protocol witness table cache variable for type Calendar.Identifier.BuddhistCodingKeys and conformance Calendar.Identifier.BuddhistCodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for Calendar.Identifier.BuddhistCodingKeys,  &unk_189C80460);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Calendar.Identifier.BuddhistCodingKeys and conformance Calendar.Identifier.BuddhistCodingKeys);
  }

  return result;
}

unint64_t lazy protocol witness table accessor for type Calendar.Identifier.GregorianCodingKeys and conformance Calendar.Identifier.GregorianCodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type Calendar.Identifier.GregorianCodingKeys and conformance Calendar.Identifier.GregorianCodingKeys;
  if (!lazy protocol witness table cache variable for type Calendar.Identifier.GregorianCodingKeys and conformance Calendar.Identifier.GregorianCodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for Calendar.Identifier.GregorianCodingKeys,  &unk_189C80440);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Calendar.Identifier.GregorianCodingKeys and conformance Calendar.Identifier.GregorianCodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type Calendar.Identifier.GregorianCodingKeys and conformance Calendar.Identifier.GregorianCodingKeys;
  if (!lazy protocol witness table cache variable for type Calendar.Identifier.GregorianCodingKeys and conformance Calendar.Identifier.GregorianCodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for Calendar.Identifier.GregorianCodingKeys,  &unk_189C80440);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Calendar.Identifier.GregorianCodingKeys and conformance Calendar.Identifier.GregorianCodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type Calendar.Identifier.GregorianCodingKeys and conformance Calendar.Identifier.GregorianCodingKeys;
  if (!lazy protocol witness table cache variable for type Calendar.Identifier.GregorianCodingKeys and conformance Calendar.Identifier.GregorianCodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for Calendar.Identifier.GregorianCodingKeys,  &unk_189C80440);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Calendar.Identifier.GregorianCodingKeys and conformance Calendar.Identifier.GregorianCodingKeys);
  }

  return result;
}

uint64_t specialized static Calendar._toNSCalendarIdentifier(_:)(char *a1)
{
  return **((void **)&unk_189C80750 + *a1);
}

uint64_t specialized Calendar.Identifier.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x6169726F67657267LL && a2 == 0xE90000000000006ELL;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0LL;
  }

  else if (a1 == 0x7473696864647562LL && a2 == 0xE800000000000000LL {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1LL;
  }

  else if (a1 == 0x6573656E696863LL && a2 == 0xE700000000000000LL {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 2LL;
  }

  else if (a1 == 0x636974706F63LL && a2 == 0xE600000000000000LL {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 3LL;
  }

  else if (a1 == 0xD000000000000013LL && a2 == 0x80000001839CD780LL {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 4LL;
  }

  else if (a1 == 0xD000000000000011LL && a2 == 0x80000001839CD7A0LL {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 5LL;
  }

  else if (a1 == 0x776572626568LL && a2 == 0xE600000000000000LL {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 6LL;
  }

  else if (a1 == 0x313036386F7369LL && a2 == 0xE700000000000000LL {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 7LL;
  }

  else if (a1 == 0x6E6169646E69LL && a2 == 0xE600000000000000LL {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 8LL;
  }

  else if (a1 == 0x63696D616C7369LL && a2 == 0xE700000000000000LL {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 9LL;
  }

  else if (a1 == 0x4363696D616C7369LL && a2 == 0xEC0000006C697669LL {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 10LL;
  }

  else if (a1 == 0x6573656E6170616ALL && a2 == 0xE800000000000000LL {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 11LL;
  }

  else if (a1 == 0x6E616973726570LL && a2 == 0xE700000000000000LL {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 12LL;
  }

  else if (a1 == 0x63696C6275706572LL && a2 == 0xEF616E696843664FLL {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 13LL;
  }

  else if (a1 == 0x5463696D616C7369LL && a2 == 0xEE0072616C756261LL {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 14LL;
  }

  else if (a1 == 0xD000000000000010LL && a2 == 0x80000001839CD7C0LL)
  {
    swift_bridgeObjectRelease();
    return 15LL;
  }

  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0) {
      return 15LL;
    }
    else {
      return 16LL;
    }
  }

uint64_t specialized Calendar.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x696669746E656469LL && a2 == 0xEA00000000007265LL;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0LL;
  }

  else if (a1 == 0x656C61636F6CLL && a2 == 0xE600000000000000LL {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1LL;
  }

  else if (a1 == 0x656E6F5A656D6974LL && a2 == 0xE800000000000000LL {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 2LL;
  }

  else if (a1 == 0x6565577473726966LL && a2 == 0xEC0000007961646BLL {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 3LL;
  }

  else if (a1 == 0xD000000000000016LL && a2 == 0x80000001839CC730LL {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 4LL;
  }

  else if (a1 == 0x746E6572727563LL && a2 == 0xE700000000000000LL)
  {
    swift_bridgeObjectRelease();
    return 5LL;
  }

  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0) {
      return 5LL;
    }
    else {
      return 6LL;
    }
  }

void specialized static Calendar._forceBridgeFromObjectiveC(_:result:)(void *a1, uint64_t *a2)
{
  uint64_t v4 = swift_dynamicCastClass();
  if (v4)
  {
    uint64_t v5 = *(void *)(v4 + OBJC_IVAR____NSSwiftCalendar__lock);
    char v6 = (_OWORD *)(v5 + 16);
    unint64_t v7 = (os_unfair_lock_s *)(v5 + 32);
    id v8 = a1;
    os_unfair_lock_lock(v7);
    closure #1 in _NSSwiftCalendar.calendar.getter(v6, &v12);
    os_unfair_lock_unlock(v7);

    unint64_t v10 = *((void *)&v12 + 1);
    uint64_t v9 = v12;
  }

  else
  {
    type metadata accessor for _CalendarBridged();
    uint64_t v9 = swift_allocObject();
    *(void *)(v9 + 16) = a1;
    unint64_t v10 = lazy protocol witness table accessor for type _CalendarBridged and conformance _CalendarBridged();
    id v11 = a1;
  }

  *a2 = v9;
  a2[1] = v10;
}

uint64_t specialized static Calendar._conditionallyBridgeFromObjectiveC(_:result:)(void *a1, uint64_t *a2)
{
  uint64_t v4 = swift_dynamicCastClass();
  if (v4)
  {
    uint64_t v5 = *(void *)(v4 + OBJC_IVAR____NSSwiftCalendar__lock);
    char v6 = (_OWORD *)(v5 + 16);
    unint64_t v7 = (os_unfair_lock_s *)(v5 + 32);
    id v8 = a1;
    os_unfair_lock_lock(v7);
    closure #1 in _NSSwiftCalendar.calendar.getter(v6, &v13);
    os_unfair_lock_unlock(v7);

    unint64_t v10 = *((void *)&v13 + 1);
    uint64_t v9 = v13;
  }

  else
  {
    type metadata accessor for _CalendarBridged();
    uint64_t v9 = swift_allocObject();
    *(void *)(v9 + 16) = a1;
    unint64_t v10 = lazy protocol witness table accessor for type _CalendarBridged and conformance _CalendarBridged();
    id v11 = a1;
  }

  *a2 = v9;
  a2[1] = v10;
  return 1LL;
}

unint64_t lazy protocol witness table accessor for type Calendar.Identifier and conformance Calendar.Identifier()
{
  unint64_t result = lazy protocol witness table cache variable for type Calendar.Identifier and conformance Calendar.Identifier;
  if (!lazy protocol witness table cache variable for type Calendar.Identifier and conformance Calendar.Identifier)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for Calendar.Identifier,  &type metadata for Calendar.Identifier);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Calendar.Identifier and conformance Calendar.Identifier);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type Calendar.Identifier and conformance Calendar.Identifier;
  if (!lazy protocol witness table cache variable for type Calendar.Identifier and conformance Calendar.Identifier)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for Calendar.Identifier,  &type metadata for Calendar.Identifier);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Calendar.Identifier and conformance Calendar.Identifier);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type Calendar.Identifier and conformance Calendar.Identifier;
  if (!lazy protocol witness table cache variable for type Calendar.Identifier and conformance Calendar.Identifier)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for Calendar.Identifier,  &type metadata for Calendar.Identifier);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Calendar.Identifier and conformance Calendar.Identifier);
  }

  return result;
}

unint64_t lazy protocol witness table accessor for type Calendar.ComponentSet and conformance Calendar.ComponentSet()
{
  unint64_t result = lazy protocol witness table cache variable for type Calendar.ComponentSet and conformance Calendar.ComponentSet;
  if (!lazy protocol witness table cache variable for type Calendar.ComponentSet and conformance Calendar.ComponentSet)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for Calendar.ComponentSet,  &type metadata for Calendar.ComponentSet);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Calendar.ComponentSet and conformance Calendar.ComponentSet);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type Calendar.ComponentSet and conformance Calendar.ComponentSet;
  if (!lazy protocol witness table cache variable for type Calendar.ComponentSet and conformance Calendar.ComponentSet)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for Calendar.ComponentSet,  &type metadata for Calendar.ComponentSet);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Calendar.ComponentSet and conformance Calendar.ComponentSet);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type Calendar.ComponentSet and conformance Calendar.ComponentSet;
  if (!lazy protocol witness table cache variable for type Calendar.ComponentSet and conformance Calendar.ComponentSet)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for Calendar.ComponentSet,  &type metadata for Calendar.ComponentSet);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Calendar.ComponentSet and conformance Calendar.ComponentSet);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type Calendar.ComponentSet and conformance Calendar.ComponentSet;
  if (!lazy protocol witness table cache variable for type Calendar.ComponentSet and conformance Calendar.ComponentSet)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for Calendar.ComponentSet,  &type metadata for Calendar.ComponentSet);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Calendar.ComponentSet and conformance Calendar.ComponentSet);
  }

  return result;
}

unint64_t lazy protocol witness table accessor for type Calendar.SearchDirection and conformance Calendar.SearchDirection()
{
  unint64_t result = lazy protocol witness table cache variable for type Calendar.SearchDirection and conformance Calendar.SearchDirection;
  if (!lazy protocol witness table cache variable for type Calendar.SearchDirection and conformance Calendar.SearchDirection)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for Calendar.SearchDirection,  &type metadata for Calendar.SearchDirection);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Calendar.SearchDirection and conformance Calendar.SearchDirection);
  }

  return result;
}

unint64_t lazy protocol witness table accessor for type WeekendRange and conformance WeekendRange()
{
  unint64_t result = lazy protocol witness table cache variable for type WeekendRange and conformance WeekendRange;
  if (!lazy protocol witness table cache variable for type WeekendRange and conformance WeekendRange)
  {
    unint64_t result = MEMORY[0x186E20D4C](&protocol conformance descriptor for WeekendRange, &type metadata for WeekendRange);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type WeekendRange and conformance WeekendRange);
  }

  return result;
}

unint64_t instantiation function for generic protocol witness table for Calendar(void *a1)
{
  a1[1] = lazy protocol witness table accessor for type Calendar and conformance Calendar();
  a1[2] = lazy protocol witness table accessor for type Calendar and conformance Calendar();
  a1[3] = lazy protocol witness table accessor for type Calendar and conformance Calendar();
  unint64_t result = lazy protocol witness table accessor for type Calendar and conformance Calendar();
  a1[4] = result;
  return result;
}

double sub_183199D28@<D0>(_OWORD *a1@<X8>)
{
  double result = *(double *)&v3;
  *a1 = v3;
  return result;
}

void *sub_183199D68(__int128 *a1)
{
  __int128 v2 = *a1;
  swift_unknownObjectRetain();
  return Calendar.locale.setter((uint64_t *)&v2);
}

uint64_t sub_183199DA8(__int128 *a1)
{
  __int128 v2 = *a1;
  swift_unknownObjectRetain();
  return Calendar.timeZone.setter((uint64_t *)&v2);
}

uint64_t sub_183199DE8(uint64_t *a1)
{
  return Calendar.firstWeekday.setter(*a1);
}

uint64_t sub_183199E10(uint64_t *a1)
{
  return Calendar.minimumDaysInFirstWeek.setter(*a1);
}

ValueMetadata *type metadata accessor for Calendar()
{
  return &type metadata for Calendar;
}

ValueMetadata *type metadata accessor for Calendar.Identifier()
{
  return &type metadata for Calendar.Identifier;
}

ValueMetadata *type metadata accessor for Calendar.ComponentSet()
{
  return &type metadata for Calendar.ComponentSet;
}

uint64_t storeEnumTagSinglePayload for Calendar.Component(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 17 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 17) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xEF) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xEE) {
    return ((uint64_t (*)(void))((char *)&loc_183199EB8 + 4 * byte_1837BCDA9[v4]))();
  }
  *a1 = a2 + 17;
  return ((uint64_t (*)(void))((char *)sub_183199EEC + 4 * byte_1837BCDA4[v4]))();
}

uint64_t sub_183199EEC(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_183199EF4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x183199EFCLL);
  }
  return result;
}

uint64_t sub_183199F08(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x183199F10LL);
  }
  *(_BYTE *)double result = a2 + 17;
  return result;
}

uint64_t sub_183199F14(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_183199F1C(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for Calendar.Component()
{
  return &type metadata for Calendar.Component;
}

ValueMetadata *type metadata accessor for Calendar.SearchDirection()
{
  return &type metadata for Calendar.SearchDirection;
}

uint64_t storeEnumTagSinglePayload for Calendar.SearchDirection(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFE) {
    return ((uint64_t (*)(void))((char *)&loc_183199F98 + 4 * byte_1837BCDB3[v4]))();
  }
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_183199FCC + 4 * byte_1837BCDAE[v4]))();
}

uint64_t sub_183199FCC(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_183199FD4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x183199FDCLL);
  }
  return result;
}

uint64_t sub_183199FE8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x183199FF0LL);
  }
  *(_BYTE *)double result = a2 + 1;
  return result;
}

uint64_t sub_183199FF4(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_183199FFC(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for Calendar.RepeatedTimePolicy()
{
  return &type metadata for Calendar.RepeatedTimePolicy;
}

uint64_t storeEnumTagSinglePayload for Calendar.MatchingPolicy(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFC) {
    return ((uint64_t (*)(void))((char *)&loc_18319A064 + 4 * byte_1837BCDBD[v4]))();
  }
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_18319A098 + 4 * byte_1837BCDB8[v4]))();
}

uint64_t sub_18319A098(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_18319A0A0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x18319A0A8LL);
  }
  return result;
}

uint64_t sub_18319A0B4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x18319A0BCLL);
  }
  *(_BYTE *)double result = a2 + 3;
  return result;
}

uint64_t sub_18319A0C0(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_18319A0C8(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for Calendar.MatchingPolicy()
{
  return &type metadata for Calendar.MatchingPolicy;
}

ValueMetadata *type metadata accessor for WeekendRange()
{
  return &type metadata for WeekendRange;
}

unint64_t lazy protocol witness table accessor for type Calendar.DatesByAdding and conformance Calendar.DatesByAdding()
{
  unint64_t result = lazy protocol witness table cache variable for type Calendar.DatesByAdding and conformance Calendar.DatesByAdding;
  if (!lazy protocol witness table cache variable for type Calendar.DatesByAdding and conformance Calendar.DatesByAdding)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for Calendar.DatesByAdding,  &type metadata for Calendar.DatesByAdding);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Calendar.DatesByAdding and conformance Calendar.DatesByAdding);
  }

  return result;
}

unint64_t lazy protocol witness table accessor for type Calendar.DatesByMatching and conformance Calendar.DatesByMatching()
{
  unint64_t result = lazy protocol witness table cache variable for type Calendar.DatesByMatching and conformance Calendar.DatesByMatching;
  if (!lazy protocol witness table cache variable for type Calendar.DatesByMatching and conformance Calendar.DatesByMatching)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for Calendar.DatesByMatching,  &type metadata for Calendar.DatesByMatching);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Calendar.DatesByMatching and conformance Calendar.DatesByMatching);
  }

  return result;
}

uint64_t getEnumTagSinglePayload for Calendar.Identifier(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0xF1) {
    goto LABEL_17;
  }
  if (a2 + 15 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 15) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 15;
    }
  }

  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 15;
    }

    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 15;
    }
  }

uint64_t storeEnumTagSinglePayload for Calendar.Identifier(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 15 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 15) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xF1) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xF0) {
    return ((uint64_t (*)(void))((char *)&loc_18319A260 + 4 * byte_1837BCDC7[v4]))();
  }
  *a1 = a2 + 15;
  return ((uint64_t (*)(void))((char *)sub_18319A294 + 4 * byte_1837BCDC2[v4]))();
}

uint64_t sub_18319A294(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_18319A29C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x18319A2A4LL);
  }
  return result;
}

uint64_t sub_18319A2B0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x18319A2B8LL);
  }
  *(_BYTE *)unint64_t result = a2 + 15;
  return result;
}

uint64_t sub_18319A2BC(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_18319A2C4(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

void *type metadata accessor for Calendar.Identifier.CodingKeys()
{
  return &unk_189C80420;
}

void *type metadata accessor for Calendar.Identifier.GregorianCodingKeys()
{
  return &unk_189C80440;
}

void *type metadata accessor for Calendar.Identifier.BuddhistCodingKeys()
{
  return &unk_189C80460;
}

void *type metadata accessor for Calendar.Identifier.ChineseCodingKeys()
{
  return &unk_189C80480;
}

void *type metadata accessor for Calendar.Identifier.CopticCodingKeys()
{
  return &unk_189C804A0;
}

void *type metadata accessor for Calendar.Identifier.EthiopicAmeteMihretCodingKeys()
{
  return &unk_189C804C0;
}

void *type metadata accessor for Calendar.Identifier.EthiopicAmeteAlemCodingKeys()
{
  return &unk_189C804E0;
}

void *type metadata accessor for Calendar.Identifier.HebrewCodingKeys()
{
  return &unk_189C80500;
}

void *type metadata accessor for Calendar.Identifier.Iso8601CodingKeys()
{
  return &unk_189C80520;
}

void *type metadata accessor for Calendar.Identifier.IndianCodingKeys()
{
  return &unk_189C80540;
}

void *type metadata accessor for Calendar.Identifier.IslamicCodingKeys()
{
  return &unk_189C80560;
}

void *type metadata accessor for Calendar.Identifier.IslamicCivilCodingKeys()
{
  return &unk_189C80580;
}

void *type metadata accessor for Calendar.Identifier.JapaneseCodingKeys()
{
  return &unk_189C805A0;
}

void *type metadata accessor for Calendar.Identifier.PersianCodingKeys()
{
  return &unk_189C805C0;
}

void *type metadata accessor for Calendar.Identifier.RepublicOfChinaCodingKeys()
{
  return &unk_189C805E0;
}

void *type metadata accessor for Calendar.Identifier.IslamicTabularCodingKeys()
{
  return &unk_189C80600;
}

void *type metadata accessor for Calendar.Identifier.IslamicUmmAlQuraCodingKeys()
{
  return &unk_189C80620;
}

uint64_t storeEnumTagSinglePayload for Calendar.Current(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFD) {
    return ((uint64_t (*)(void))((char *)&loc_18319A42C + 4 * byte_1837BCDD1[v4]))();
  }
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_18319A460 + 4 * byte_1837BCDCC[v4]))();
}

uint64_t sub_18319A460(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_18319A468(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x18319A470LL);
  }
  return result;
}

uint64_t sub_18319A47C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x18319A484LL);
  }
  *(_BYTE *)unint64_t result = a2 + 2;
  return result;
}

uint64_t sub_18319A488(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_18319A490(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

void *type metadata accessor for Calendar.Current()
{
  return &unk_189C806B0;
}

uint64_t storeEnumTagSinglePayload for Calendar.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 5 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 5) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFB) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFA) {
    return ((uint64_t (*)(void))((char *)&loc_18319A4F8 + 4 * byte_1837BCDDB[v4]))();
  }
  *a1 = a2 + 5;
  return ((uint64_t (*)(void))((char *)sub_18319A52C + 4 * byte_1837BCDD6[v4]))();
}

uint64_t sub_18319A52C(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_18319A534(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x18319A53CLL);
  }
  return result;
}

uint64_t sub_18319A548(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x18319A550LL);
  }
  *(_BYTE *)unint64_t result = a2 + 5;
  return result;
}

uint64_t sub_18319A554(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_18319A55C(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

void *type metadata accessor for Calendar.CodingKeys()
{
  return &unk_189C80740;
}

id one-time initialization function for _shared()
{
  id result = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for _NSSwiftProcessInfo()), sel_init);
  static _NSSwiftProcessInfo._shared = (uint64_t)result;
  return result;
}

uint64_t one-time initialization function for _globalState()
{
  uint64_t result = swift_allocObject();
  *(_DWORD *)(result + 44) = 0;
  *(void *)(result + 16) = 0LL;
  *(_BYTE *)(result + 24) = 1;
  *(_DWORD *)(result + 28) = 0;
  *(_WORD *)(result + 32) = 513;
  *(_DWORD *)(result + 36) = 0;
  *(_BYTE *)(result + 40) = 1;
  static _NSSwiftProcessInfo._globalState = result;
  return result;
}

id _NSSwiftProcessInfo.init()()
{
  uint64_t ObjectType = (objc_class *)swift_getObjectType();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LockedState<_NSSwiftProcessInfo.State>._Buffer);
  uint64_t v2 = swift_allocObject();
  *(_DWORD *)(v2 + 76) = 0;
  *(void *)(v2 + 16) = 1LL;
  *(_BYTE *)(v2 + 24) = 0;
  *(void *)(v2 + 32) = 0LL;
  *(_BYTE *)(v2 + 40) = 0;
  *(void *)(v2 + 56) = 0LL;
  *(void *)(v2 + 64) = 0LL;
  *(void *)(v2 + 48) = 0LL;
  *(_BYTE *)(v2 + 72) = 0;
  *(void *)&v0[OBJC_IVAR____NSSwiftProcessInfo__state] = v2;
  uint64_t v3 = one-time initialization token for processInfo;
  uint64_t v4 = v0;
  if (v3 != -1) {
    swift_once();
  }
  *(void *)&v4[OBJC_IVAR____NSSwiftProcessInfo__processInfo] = static _ProcessInfo.processInfo;
  swift_retain();

  v6.receiver = v4;
  v6.super_class = ObjectType;
  return objc_msgSendSuper2(&v6, sel_init);
}

uint64_t type metadata accessor for _NSSwiftProcessInfo()
{
  return objc_opt_self();
}

uint64_t specialized _NSSwiftProcessInfo.globallyUniqueString.getter()
{
  uint64_t v17 = *MEMORY[0x1895F89C0];
  memset(out, 0, sizeof(out));
  _foundation_uuid_generate_random(out);
  uint64_t v0 = UUID.uuidString.getter();
  uint64_t v2 = v1;
  getpid();
  *(void *)uuid_t out = mach_absolute_time();
  lazy protocol witness table accessor for type UInt64 and conformance UInt64();
  uint64_t v3 = String.init<A>(_:radix:uppercase:)();
  uint64_t v5 = v4;
  uint64_t v6 = String.count.getter();
  if (__OFSUB__(16LL, v6)) {
    __break(1u);
  }
  uint64_t v7 = MEMORY[0x186E1B904](48LL, 0xE100000000000000LL, 16 - v6);
  uint64_t v9 = v8;
  *(void *)uuid_t out = v0;
  *(void *)&out[8] = v2;
  v10._uint64_t countAndFlagsBits = 45LL;
  v10._unint64_t object = (void *)0xE100000000000000LL;
  String.append(_:)(v10);
  v11._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v11);
  swift_bridgeObjectRelease();
  v12._uint64_t countAndFlagsBits = 45LL;
  v12._unint64_t object = (void *)0xE100000000000000LL;
  String.append(_:)(v12);
  v13._uint64_t countAndFlagsBits = v7;
  v13._unint64_t object = v9;
  String.append(_:)(v13);
  swift_bridgeObjectRelease();
  v14._uint64_t countAndFlagsBits = v3;
  v14._unint64_t object = v5;
  String.append(_:)(v14);
  swift_bridgeObjectRelease();
  return *(void *)out;
}

uint64_t specialized _NSSwiftProcessInfo.physicalMemory.getter()
{
  v3[1] = *MEMORY[0x1895F89C0];
  v3[0] = 0LL;
  size_t v2 = 8LL;
  __int128 v1 = xmmword_1837BE5F0;
  else {
    return v3[0];
  }
}

uint64_t specialized _NSSwiftProcessInfo.operatingSystemVersion.getter()
{
  uint64_t v0 = (void *)_CFCopySystemVersionDictionaryValue();
  swift_unknownObjectRelease();
  if (v0)
  {
    id v1 = static String._unconditionallyBridgeFromObjectiveC(_:)(v0);
    unint64_t v3 = v2;

    v30[0] = 46LL;
    v30[1] = 0xE100000000000000LL;
    MEMORY[0x1895F8858](v4);
    void v29[2] = v30;
    swift_bridgeObjectRetain();
    uint64_t v5 = (void *)specialized Collection.split(maxSplits:omittingEmptySubsequences:whereSeparator:)( 0x7FFFFFFFFFFFFFFFLL,  1,  partial apply for specialized closure #1 in BidirectionalCollection<>.lastIndex(of:),  (uint64_t)v29,  (uint64_t)v1,  v3);
    swift_bridgeObjectRelease();
    if (v5[2])
    {
      uint64_t v6 = v5[4];
      uint64_t v7 = v5[5];
      if ((v7 ^ (unint64_t)v6) >> 14)
      {
        unint64_t v9 = v5[6];
        unint64_t v8 = v5[7];
        uint64_t v10 = _ss5SliceV32withContiguousStorageIfAvailableyqd__Sgqd__SRy7ElementQzGKXEKlFSRyxGq_s5Error_pRi_zRi0_zRi__Ri0__r0_lys5UInt8Vqd__Isgyrzo_ABySS8UTF8ViewVGADsAI_pAMRszr__lIetMggrzo_Tpq5SiSg_Tg5061_ss17FixedWidthIntegerPsE_5radixxSgqd___SitcSyRd__lufcADSRys5I15VGXEfU_Si_SsTG5SiTf1cn_n( v5[4],  v5[5],  v9,  v8,  10LL);
        if ((v11 & 0x100) != 0)
        {
          swift_bridgeObjectRetain();
          uint64_t v12 = specialized _parseInteger<A, B>(ascii:radix:)(v6, v7, v9, v8, 10LL);
          char v14 = v13;
          swift_bridgeObjectRelease();
          if ((v14 & 1) == 0) {
            goto LABEL_8;
          }
        }

        else if ((v11 & 1) == 0)
        {
          uint64_t v12 = v10;
LABEL_8:
          unint64_t v15 = v5[2];
          if (v15 >= 2)
          {
            uint64_t v16 = v5[8];
            uint64_t v17 = v5[9];
            if ((v17 ^ (unint64_t)v16) >> 14)
            {
              unint64_t v19 = v5[10];
              unint64_t v18 = v5[11];
              _ss5SliceV32withContiguousStorageIfAvailableyqd__Sgqd__SRy7ElementQzGKXEKlFSRyxGq_s5Error_pRi_zRi0_zRi__Ri0__r0_lys5UInt8Vqd__Isgyrzo_ABySS8UTF8ViewVGADsAI_pAMRszr__lIetMggrzo_Tpq5SiSg_Tg5061_ss17FixedWidthIntegerPsE_5radixxSgqd___SitcSyRd__lufcADSRys5I15VGXEfU_Si_SsTG5SiTf1cn_n( v5[8],  v5[9],  v19,  v18,  10LL);
              if ((v20 & 0x100) != 0)
              {
                swift_bridgeObjectRetain();
                specialized _parseInteger<A, B>(ascii:radix:)(v16, v17, v19, v18, 10LL);
                char v23 = v22;
                swift_bridgeObjectRelease();
                if ((v23 & 1) == 0) {
                  goto LABEL_17;
                }
              }

              else if ((v20 & 1) == 0)
              {
LABEL_17:
                if (v15 >= 3)
                {
                  if (v5[2] < 3uLL)
                  {
                    __break(1u);
                  }

                  else
                  {
                    unint64_t v24 = v5[12];
                    unint64_t v25 = v5[13];
                    unint64_t v27 = v5[14];
                    unint64_t v26 = v5[15];
                    swift_bridgeObjectRetain();
                    swift_bridgeObjectRelease();
                    if ((v25 ^ v24) >> 14)
                    {
                      _ss5SliceV32withContiguousStorageIfAvailableyqd__Sgqd__SRy7ElementQzGKXEKlFSRyxGq_s5Error_pRi_zRi0_zRi__Ri0__r0_lys5UInt8Vqd__Isgyrzo_ABySS8UTF8ViewVGADsAI_pAMRszr__lIetMggrzo_Tpq5SiSg_Tg5061_ss17FixedWidthIntegerPsE_5radixxSgqd___SitcSyRd__lufcADSRys5I15VGXEfU_Si_SsTG5SiTf1cn_n( v24,  v25,  v27,  v26,  10LL);
                      if ((v28 & 0x100) != 0) {
                        specialized _parseInteger<A, B>(ascii:radix:)(v24, v25, v27, v26, 10LL);
                      }
                    }
                  }
                }
              }
            }
          }

          swift_bridgeObjectRelease();
          return v12;
        }
      }
    }

    swift_bridgeObjectRelease();
  }

  return -1LL;
}

uint64_t specialized _NSSwiftProcessInfo.isOperatingSystemAtLeast(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = specialized _NSSwiftProcessInfo.operatingSystemVersion.getter();
  BOOL v10 = v7 > a2 || v8 >= a3;
  if (v7 < a2) {
    BOOL v10 = 0;
  }
  unsigned int v11 = v6 > a1 || v10;
  if (v6 >= a1) {
    return v11;
  }
  else {
    return 0LL;
  }
}

uint64_t partial apply for closure #1 in _ProcessInfo.processName.setter(void *a1)
{
  return closure #1 in _ProcessInfo.processName.setter(a1, *(void *)(v1 + 16), *(void *)(v1 + 24));
}

Swift::String __swiftcall Date.RelativeFormatStyle.format(_:)(Foundation::Date a1)
{
  uint64_t v18 = *MEMORY[0x1895F89C0];
  uint64_t v3 = *v1;
  __int16 v4 = *(_WORD *)(v2 + 1);
  uint64_t v5 = *((void *)v2 + 5);
  char v13 = *v2;
  __int16 v14 = v4;
  __int128 v6 = *(_OWORD *)(v2 + 24);
  __int128 v15 = *(_OWORD *)(v2 + 8);
  __int128 v16 = v6;
  uint64_t v17 = v5;
  uint64_t v12 = v3;
  v11.tv_sec = 0LL;
  v11.tv_nsec = 0LL;
  clock_gettime(_CLOCK_REALTIME, &v11);
  Swift::String v9 = Date.RelativeFormatStyle._format(_:refDate:)( COERCE_FOUNDATION_DATE((double)v11.tv_sec + -978307200.0 + (double)v11.tv_nsec * 0.000000001),  COERCE_FOUNDATION_DATE((double)v11.tv_nsec * 0.000000001));
  unint64_t object = v9._object;
  uint64_t countAndFlagsBits = v9._countAndFlagsBits;
  result._unint64_t object = object;
  result._uint64_t countAndFlagsBits = countAndFlagsBits;
  return result;
}

uint64_t Date.RelativeFormatStyle.locale(_:)@<X0>(_OWORD *a1@<X0>, uint64_t a2@<X8>)
{
  __int16 v3 = *(_WORD *)(v2 + 1);
  uint64_t v4 = *(void *)(v2 + 40);
  *(_BYTE *)a2 = *(_BYTE *)v2;
  *(_WORD *)(a2 + 1) = v3;
  *(_OWORD *)(a2 + 8) = *a1;
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(v2 + 24);
  *(void *)(a2 + 40) = v4;
  swift_unknownObjectRetain();
  swift_bridgeObjectRetain();
  return swift_unknownObjectRetain();
}

uint64_t protocol witness for Decodable.init(from:) in conformance Date.RelativeFormatStyle.UnitsStyle.Option()
{
  return RawRepresentable<>.init(from:)();
}

uint64_t protocol witness for Encodable.encode(to:) in conformance Date.RelativeFormatStyle.UnitsStyle.Option()
{
  return RawRepresentable<>.encode(to:)();
}

void static Date.RelativeFormatStyle.UnitsStyle.wide.getter(_BYTE *a1@<X8>)
{
  *a1 = 0;
}

void static Date.RelativeFormatStyle.UnitsStyle.spellOut.getter(_BYTE *a1@<X8>)
{
  *a1 = 1;
}

void static Date.RelativeFormatStyle.UnitsStyle.abbreviated.getter(_BYTE *a1@<X8>)
{
  *a1 = 2;
}

void static Date.RelativeFormatStyle.UnitsStyle.narrow.getter(_BYTE *a1@<X8>)
{
  *a1 = 3;
}

void Date.RelativeFormatStyle.UnitsStyle.hash(into:)()
{
}

BOOL static Date.RelativeFormatStyle.UnitsStyle.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance Date.RelativeFormatStyle.UnitsStyle.CodingKeys()
{
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance Date.RelativeFormatStyle.UnitsStyle.CodingKeys()
{
  return CodingKey.debugDescription.getter();
}

uint64_t Date.RelativeFormatStyle.UnitsStyle.encode(to:)(void *a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<Date.RelativeFormatStyle.UnitsStyle.CodingKeys>);
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x1895F8858](v3);
  __int128 v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  char v7 = *v1;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type Date.RelativeFormatStyle.UnitsStyle.CodingKeys and conformance Date.RelativeFormatStyle.UnitsStyle.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  char v10 = v7;
  lazy protocol witness table accessor for type Date.RelativeFormatStyle.UnitsStyle.Option and conformance Date.RelativeFormatStyle.UnitsStyle.Option();
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

Swift::Int Date.RelativeFormatStyle.UnitsStyle.hashValue.getter()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

uint64_t Date.RelativeFormatStyle.UnitsStyle.init(from:)@<X0>(void *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<Date.RelativeFormatStyle.UnitsStyle.CodingKeys>);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1895F8858](v5);
  uint64_t v8 = (char *)&v10 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type Date.RelativeFormatStyle.UnitsStyle.CodingKeys and conformance Date.RelativeFormatStyle.UnitsStyle.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v2)
  {
    lazy protocol witness table accessor for type Date.RelativeFormatStyle.UnitsStyle.Option and conformance Date.RelativeFormatStyle.UnitsStyle.Option();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    *a2 = v11;
  }

  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t protocol witness for Decodable.init(from:) in conformance Date.RelativeFormatStyle.UnitsStyle@<X0>( void *a1@<X0>, _BYTE *a2@<X8>)
{
  return Date.RelativeFormatStyle.UnitsStyle.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance Date.RelativeFormatStyle.UnitsStyle( void *a1)
{
  return Date.RelativeFormatStyle.UnitsStyle.encode(to:)(a1);
}

uint64_t protocol witness for Decodable.init(from:) in conformance Date.RelativeFormatStyle.Presentation.Option()
{
  return RawRepresentable<>.init(from:)();
}

uint64_t protocol witness for Encodable.encode(to:) in conformance Date.RelativeFormatStyle.Presentation.Option()
{
  return RawRepresentable<>.encode(to:)();
}

void static Date.RelativeFormatStyle.Presentation.numeric.getter(_BYTE *a1@<X8>)
{
  *a1 = 0;
}

void static Date.RelativeFormatStyle.Presentation.named.getter(_BYTE *a1@<X8>)
{
  *a1 = 1;
}

void Date.RelativeFormatStyle.Presentation.hash(into:)()
{
}

BOOL static Date.RelativeFormatStyle.Presentation.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance Date.RelativeFormatStyle.Presentation.CodingKeys()
{
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance Date.RelativeFormatStyle.Presentation.CodingKeys()
{
  return CodingKey.debugDescription.getter();
}

uint64_t Date.RelativeFormatStyle.Presentation.encode(to:)(void *a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<Date.RelativeFormatStyle.Presentation.CodingKeys>);
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x1895F8858](v3);
  uint64_t v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  char v7 = *v1;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type Date.RelativeFormatStyle.Presentation.CodingKeys and conformance Date.RelativeFormatStyle.Presentation.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  char v10 = v7;
  lazy protocol witness table accessor for type Date.RelativeFormatStyle.Presentation.Option and conformance Date.RelativeFormatStyle.Presentation.Option();
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

Swift::Int Date.RelativeFormatStyle.Presentation.hashValue.getter()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

uint64_t Date.RelativeFormatStyle.Presentation.init(from:)@<X0>(void *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<Date.RelativeFormatStyle.Presentation.CodingKeys>);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1895F8858](v5);
  uint64_t v8 = (char *)&v10 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type Date.RelativeFormatStyle.Presentation.CodingKeys and conformance Date.RelativeFormatStyle.Presentation.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v2)
  {
    lazy protocol witness table accessor for type Date.RelativeFormatStyle.Presentation.Option and conformance Date.RelativeFormatStyle.Presentation.Option();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    *a2 = v11;
  }

  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t protocol witness for Decodable.init(from:) in conformance Date.RelativeFormatStyle.Presentation@<X0>( void *a1@<X0>, _BYTE *a2@<X8>)
{
  return Date.RelativeFormatStyle.Presentation.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance Date.RelativeFormatStyle.Presentation( void *a1)
{
  return Date.RelativeFormatStyle.Presentation.encode(to:)(a1);
}

void Date.RelativeFormatStyle.presentation.getter(_BYTE *a1@<X8>)
{
  *a1 = *v1;
}

_BYTE *Date.RelativeFormatStyle.presentation.setter(_BYTE *result)
{
  *Swift::UInt v1 = *result;
  return result;
}

uint64_t (*Date.RelativeFormatStyle.presentation.modify())()
{
  return destructiveProjectEnumData for PredicateCodableError;
}

void Date.RelativeFormatStyle.unitsStyle.getter(_BYTE *a1@<X8>)
{
  *a1 = *(_BYTE *)(v1 + 1);
}

_BYTE *Date.RelativeFormatStyle.unitsStyle.setter(_BYTE *result)
{
  *(_BYTE *)(v1 + 1) = *result;
  return result;
}

uint64_t (*Date.RelativeFormatStyle.unitsStyle.modify())()
{
  return destructiveProjectEnumData for PredicateCodableError;
}

void Date.RelativeFormatStyle.capitalizationContext.getter(_BYTE *a1@<X8>)
{
  *a1 = *(_BYTE *)(v1 + 2);
}

_BYTE *Date.RelativeFormatStyle.capitalizationContext.setter(_BYTE *result)
{
  *(_BYTE *)(v1 + 2) = *result;
  return result;
}

uint64_t (*Date.RelativeFormatStyle.capitalizationContext.modify())()
{
  return destructiveProjectEnumData for PredicateCodableError;
}

uint64_t Date.RelativeFormatStyle.locale.getter@<X0>(_OWORD *a1@<X8>)
{
  *a1 = *(_OWORD *)(v1 + 8);
  return swift_unknownObjectRetain();
}

__n128 Date.RelativeFormatStyle.locale.setter(__n128 *a1)
{
  __n128 result = *a1;
  *(__n128 *)(v1 + 8) = *a1;
  return result;
}

uint64_t (*Date.RelativeFormatStyle.locale.modify())()
{
  return destructiveProjectEnumData for PredicateCodableError;
}

uint64_t Date.RelativeFormatStyle.calendar.getter@<X0>(_OWORD *a1@<X8>)
{
  *a1 = *(_OWORD *)(v1 + 24);
  return swift_unknownObjectRetain();
}

__n128 Date.RelativeFormatStyle.calendar.setter(__n128 *a1)
{
  __n128 result = *a1;
  *(__n128 *)(v1 + 24) = *a1;
  return result;
}

uint64_t (*Date.RelativeFormatStyle.calendar.modify())()
{
  return destructiveProjectEnumData for PredicateCodableError;
}

uint64_t Date.RelativeFormatStyle.allowedFields.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t Date.RelativeFormatStyle.allowedFields.setter(uint64_t a1)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v1 + 40) = a1;
  return result;
}

uint64_t (*Date.RelativeFormatStyle.allowedFields.modify(void *a1))(uint64_t *a1, char a2)
{
  *a1 = *(void *)(v1 + 40);
  a1[1] = v1;
  swift_bridgeObjectRetain();
  return Date.RelativeFormatStyle.allowedFields.modify;
}

uint64_t Date.RelativeFormatStyle.allowedFields.modify(uint64_t *a1, char a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = a1[1];
  if ((a2 & 1) != 0)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(void *)(v3 + 40) = v2;
    return swift_bridgeObjectRelease();
  }

  else
  {
    uint64_t result = swift_bridgeObjectRelease();
    *(void *)(v3 + 40) = v2;
  }

  return result;
}

void protocol witness for static Equatable.== infix(_:_:) in conformance Date.RelativeFormatStyle.CodingKeys( char *a1)
{
  specialized == infix<A>(_:_:)(*a1);
}

void protocol witness for Hashable.hashValue.getter in conformance Date.RelativeFormatStyle.CodingKeys()
{
}

void protocol witness for Hashable.hash(into:) in conformance Date.RelativeFormatStyle.CodingKeys( uint64_t a1)
{
}

void protocol witness for Hashable._rawHashValue(seed:) in conformance Date.RelativeFormatStyle.CodingKeys( uint64_t a1)
{
}

unint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance Date.RelativeFormatStyle.CodingKeys@<X0>( Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result = specialized Date.RelativeFormatStyle.CodingKeys.init(rawValue:)(*a1);
  *a2 = result;
  return result;
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance Date.RelativeFormatStyle.CodingKeys()
{
  return ((uint64_t (*)(void))((char *)sub_18319C78C + 4 * byte_1837BE620[*v0]))();
}

void sub_18319C78C(void *a1@<X8>)
{
  *a1 = 0x7974537374696E75LL;
  a1[1] = 0xEA0000000000656CLL;
}

void sub_18319C7AC(void *a1@<X8>)
{
  *a1 = 0xD000000000000015LL;
  a1[1] = 0x80000001839C8740LL;
}

void sub_18319C7CC(void *a1@<X8>)
{
  *a1 = 0x656C61636F6CLL;
  a1[1] = 0xE600000000000000LL;
}

void sub_18319C7E4(void *a1@<X8>)
{
  *a1 = 0x7261646E656C6163LL;
  a1[1] = 0xE800000000000000LL;
}

void sub_18319C800(uint64_t a1@<X8>)
{
  *(_WORD *)(a1 + 14) = -4864;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance Date.RelativeFormatStyle.CodingKeys()
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_18319C860 + 4 * byte_1837BE626[*v0]))( 0x61746E6573657270LL,  0xEC0000006E6F6974LL);
}

uint64_t sub_18319C860()
{
  return 0x7974537374696E75LL;
}

unint64_t sub_18319C87C()
{
  return 0xD000000000000015LL;
}

uint64_t sub_18319C898()
{
  return 0x656C61636F6CLL;
}

uint64_t sub_18319C8AC()
{
  return 0x7261646E656C6163LL;
}

uint64_t sub_18319C8C4()
{
  return 0x466465776F6C6C61LL;
}

unint64_t protocol witness for CodingKey.init(stringValue:) in conformance Date.RelativeFormatStyle.CodingKeys@<X0>( Swift::String a1@<X1:X0>, _BYTE *a2@<X8>)
{
  unint64_t result = specialized Date.RelativeFormatStyle.CodingKeys.init(rawValue:)(a1);
  *a2 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance Date.RelativeFormatStyle.CodingKeys()
{
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance Date.RelativeFormatStyle.CodingKeys()
{
  return CodingKey.debugDescription.getter();
}

__n128 Date.RelativeFormatStyle.init(presentation:unitsStyle:locale:calendar:capitalizationContext:)@<Q0>( char *a1@<X0>, char *a2@<X1>, __int128 *a3@<X2>, __n128 *a4@<X3>, char *a5@<X4>, uint64_t a6@<X8>)
{
  __n128 v23 = *a4;
  __int128 v24 = *a3;
  uint64_t v7 = 7LL;
  char v22 = *a5;
  char v8 = *a2;
  char v9 = *a1;
  uint64_t v26 = MEMORY[0x18961AFE8];
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, 7LL, 0);
  uint64_t v10 = v26;
  unint64_t v11 = *(void *)(v26 + 16);
  uint64_t v12 = &byte_189C6B530;
  do
  {
    char v14 = *v12++;
    char v13 = v14;
    uint64_t v26 = v10;
    unint64_t v15 = *(void *)(v10 + 24);
    if (v11 >= v15 >> 1)
    {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v15 > 1, v11 + 1, 1);
      uint64_t v10 = v26;
    }

    *(void *)(v10 + 16) = v11 + 1;
    *(_BYTE *)(v10 + v11++ + 32) = v13;
    --v7;
  }

  while (v7);
  lazy protocol witness table accessor for type Date.ComponentsFormatStyle.Field and conformance Date.ComponentsFormatStyle.Field();
  uint64_t v16 = Set.init(minimumCapacity:)();
  uint64_t v26 = v16;
  uint64_t v17 = *(void *)(v10 + 16);
  if (v17)
  {
    for (uint64_t i = 0LL; i != v17; ++i)
    {
      uint64_t v19 = v10 + i;
      specialized Set._Variant.insert(_:)(&v25, *(unsigned __int8 *)(v19 + 32));
    }

    swift_bridgeObjectRelease();
    uint64_t v20 = v26;
  }

  else
  {
    uint64_t v20 = v16;
    swift_bridgeObjectRelease();
  }

  *(_BYTE *)a6 = v9;
  *(_BYTE *)(a6 + 1) = v8;
  *(_BYTE *)(a6 + 2) = v22;
  *(_OWORD *)(a6 + 8) = v24;
  __n128 result = v23;
  *(__n128 *)(a6 + 24) = v23;
  *(void *)(a6 + 40) = v20;
  return result;
}

__n128 Date.RelativeFormatStyle.init(allowedFields:presentation:unitsStyle:locale:calendar:capitalizationContext:)@<Q0>( uint64_t a1@<X0>, _BYTE *a2@<X1>, char *a3@<X2>, _OWORD *a4@<X3>, __n128 *a5@<X4>, char *a6@<X5>, uint64_t a7@<X8>)
{
  char v7 = *a3;
  char v8 = *a6;
  *(_BYTE *)a7 = *a2;
  *(_BYTE *)(a7 + 1) = v7;
  *(_BYTE *)(a7 + 2) = v8;
  *(_OWORD *)(a7 + 8) = *a4;
  __n128 result = *a5;
  *(__n128 *)(a7 + 24) = *a5;
  *(void *)(a7 + 40) = a1;
  return result;
}

Swift::String __swiftcall Date.RelativeFormatStyle._format(_:refDate:)(Foundation::Date _, Foundation::Date refDate)
{
  uint64_t v5 = v3;
  uint64_t v6 = v2;
  uint64_t v7 = type metadata accessor for FloatingPointRoundingRule();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x1895F8858](v7);
  uint64_t v10 = (char *)v41 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  double v11 = *v6;
  double v12 = *v5;
  __int128 v13 = v4[1];
  *(_OWORD *)uint64_t v48 = *v4;
  *(_OWORD *)&v48[16] = v13;
  *(_OWORD *)&v48[32] = v4[2];
  outlined retain of Date.RelativeFormatStyle((uint64_t)v48);
  if (one-time initialization token for sortedAllowedComponents != -1) {
    swift_once();
  }
  Swift::Int v14 = swift_bridgeObjectRetain();
  Swift::Int v15 = specialized _ArrayProtocol.filter(_:)(v14, (uint64_t)v48);
  outlined release of Date.RelativeFormatStyle((uint64_t)v48);
  swift_bridgeObjectRelease();
  uint64_t v16 = *(void *)(v15 + 16);
  if (v16)
  {
    int v17 = *(unsigned __int8 *)(v16 + v15 + 31);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, void, uint64_t))(v8 + 104))(v10, *MEMORY[0x189619F78], v7);
    double v18 = specialized BinaryFloatingPoint.rounded<A>(increment:rule:)((uint64_t)v10, 1.0, v12 - v11);
    (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
    double v19 = v11 + v18;
    outlined retain of Date.RelativeFormatStyle((uint64_t)v48);
    Swift::Int v20 = swift_bridgeObjectRetain();
    Swift::Int v21 = specialized _ArrayProtocol.filter(_:)(v20, (uint64_t)v48);
    outlined release of Date.RelativeFormatStyle((uint64_t)v48);
    swift_bridgeObjectRelease();
    lazy protocol witness table accessor for type Calendar.Component and conformance Calendar.Component();
    uint64_t v22 = Set.init(minimumCapacity:)();
    *(void *)&v47[0] = v22;
    uint64_t v23 = *(void *)(v21 + 16);
    if (v23)
    {
      for (uint64_t i = 0LL; i != v23; ++i)
      {
        Swift::Int v25 = v21 + i;
        specialized Set._Variant.insert(_:)(v46, *(unsigned __int8 *)(v25 + 32));
      }

      swift_bridgeObjectRelease();
      uint64_t v26 = *(void *)&v47[0];
    }

    else
    {
      uint64_t v26 = v22;
      swift_bridgeObjectRelease();
    }

    __int128 v49 = *(_OWORD *)&v48[24];
    v47[0] = *(_OWORD *)&v48[24];
    v50[0] = v19;
    double v45 = v11;
    outlined retain of Locale((uint64_t)&v49);
    Calendar.dateComponents(_:from:to:)(v26, v50, &v45, v46);
    outlined release of Locale((uint64_t)&v49);
    memcpy(v47, v46, 0x11AuLL);
    outlined retain of DateComponents((uint64_t)v47);
    uint64_t v27 = swift_bridgeObjectRetain();
    uint64_t v28 = specialized Sequence.compactMap<A>(_:)(v27);
    outlined release of DateComponents((uint64_t)v47);
    swift_bridgeObjectRelease();
    if (*(void *)(v28 + 16))
    {
      uint64_t v29 = *(unsigned __int8 *)(v28 + 32);
      uint64_t v30 = *(void *)(v28 + 40);
      swift_bridgeObjectRelease();
    }

    else
    {
      swift_bridgeObjectRelease();
      uint64_t v30 = 0LL;
      uint64_t v29 = 18LL;
    }

    if (v29 == 18)
    {
      uint64_t v30 = 0LL;
      int v31 = v17;
    }

    else
    {
      int v31 = v29;
    }

    if ((v31 - 4) > 2u)
    {
      v44[0] = v31;
      double v45 = v11;
      double v43 = v19;
      *(_OWORD *)uint64_t v50 = v49;
      outlined retain of Locale((uint64_t)&v49);
      static Date.RelativeFormatStyle._alignedComponentValue(component:for:reference:calendar:allowedComponents:)( v44,  &v45,  &v43,  (uint64_t *)v50,  v26,  (uint64_t)v46);
    }

    else
    {
      double v45 = v19;
      double v43 = v11;
      *(_OWORD *)uint64_t v50 = v49;
      v44[0] = v31;
      outlined retain of Locale((uint64_t)&v49);
      static Date.RelativeFormatStyle._roundedLargestComponentValue(refDate:for:calendar:allowedComponents:largestAllowedComponent:)( (uint64_t *)&v45,  &v43,  v50,  v26,  v44,  v46);
    }

    swift_bridgeObjectRelease();
    outlined release of DateComponents((uint64_t)v47);
    outlined release of Locale((uint64_t)&v49);
    uint64_t v32 = *((void *)&v46[0] + 1);
    if (LOBYTE(v46[0]) == 18LL) {
      uint64_t v32 = v30;
    }
    uint64_t v42 = v32;
    if (LOBYTE(v46[0]) == 18LL) {
      int v33 = v31;
    }
    else {
      int v33 = v46[0];
    }
    v41[29] = v33;
    uint64_t v34 = v48[1];
    *(_OWORD *)uint64_t v50 = *(_OWORD *)&v48[8];
    __int128 v35 = *(_OWORD *)&v48[8];
    uint64_t ObjectType = swift_getObjectType();
    uint64_t v37 = *(void (**)(uint64_t, void))(*((void *)&v35 + 1) + 64LL);
    outlined retain of Locale((uint64_t)v50);
    v37(ObjectType, *((void *)&v35 + 1));
    outlined release of Locale((uint64_t)v50);
    __asm { BR              X9 }
  }

  swift_bridgeObjectRelease();
  uint64_t v38 = 0LL;
  uint64_t v39 = (void *)0xE000000000000000LL;
  result._unint64_t object = v39;
  result._uint64_t countAndFlagsBits = v38;
  return result;
}

unint64_t lazy protocol witness table accessor for type Date.RelativeFormatStyle.UnitsStyle.CodingKeys and conformance Date.RelativeFormatStyle.UnitsStyle.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type Date.RelativeFormatStyle.UnitsStyle.CodingKeys and conformance Date.RelativeFormatStyle.UnitsStyle.CodingKeys;
  if (!lazy protocol witness table cache variable for type Date.RelativeFormatStyle.UnitsStyle.CodingKeys and conformance Date.RelativeFormatStyle.UnitsStyle.CodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for Date.RelativeFormatStyle.UnitsStyle.CodingKeys,  &unk_189C80E48);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Date.RelativeFormatStyle.UnitsStyle.CodingKeys and conformance Date.RelativeFormatStyle.UnitsStyle.CodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type Date.RelativeFormatStyle.UnitsStyle.CodingKeys and conformance Date.RelativeFormatStyle.UnitsStyle.CodingKeys;
  if (!lazy protocol witness table cache variable for type Date.RelativeFormatStyle.UnitsStyle.CodingKeys and conformance Date.RelativeFormatStyle.UnitsStyle.CodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for Date.RelativeFormatStyle.UnitsStyle.CodingKeys,  &unk_189C80E48);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Date.RelativeFormatStyle.UnitsStyle.CodingKeys and conformance Date.RelativeFormatStyle.UnitsStyle.CodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type Date.RelativeFormatStyle.UnitsStyle.CodingKeys and conformance Date.RelativeFormatStyle.UnitsStyle.CodingKeys;
  if (!lazy protocol witness table cache variable for type Date.RelativeFormatStyle.UnitsStyle.CodingKeys and conformance Date.RelativeFormatStyle.UnitsStyle.CodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for Date.RelativeFormatStyle.UnitsStyle.CodingKeys,  &unk_189C80E48);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Date.RelativeFormatStyle.UnitsStyle.CodingKeys and conformance Date.RelativeFormatStyle.UnitsStyle.CodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type Date.RelativeFormatStyle.UnitsStyle.CodingKeys and conformance Date.RelativeFormatStyle.UnitsStyle.CodingKeys;
  if (!lazy protocol witness table cache variable for type Date.RelativeFormatStyle.UnitsStyle.CodingKeys and conformance Date.RelativeFormatStyle.UnitsStyle.CodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for Date.RelativeFormatStyle.UnitsStyle.CodingKeys,  &unk_189C80E48);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Date.RelativeFormatStyle.UnitsStyle.CodingKeys and conformance Date.RelativeFormatStyle.UnitsStyle.CodingKeys);
  }

  return result;
}

unint64_t lazy protocol witness table accessor for type Date.RelativeFormatStyle.UnitsStyle.Option and conformance Date.RelativeFormatStyle.UnitsStyle.Option()
{
  unint64_t result = lazy protocol witness table cache variable for type Date.RelativeFormatStyle.UnitsStyle.Option and conformance Date.RelativeFormatStyle.UnitsStyle.Option;
  if (!lazy protocol witness table cache variable for type Date.RelativeFormatStyle.UnitsStyle.Option and conformance Date.RelativeFormatStyle.UnitsStyle.Option)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for Date.RelativeFormatStyle.UnitsStyle.Option,  &type metadata for Date.RelativeFormatStyle.UnitsStyle.Option);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Date.RelativeFormatStyle.UnitsStyle.Option and conformance Date.RelativeFormatStyle.UnitsStyle.Option);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type Date.RelativeFormatStyle.UnitsStyle.Option and conformance Date.RelativeFormatStyle.UnitsStyle.Option;
  if (!lazy protocol witness table cache variable for type Date.RelativeFormatStyle.UnitsStyle.Option and conformance Date.RelativeFormatStyle.UnitsStyle.Option)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for Date.RelativeFormatStyle.UnitsStyle.Option,  &type metadata for Date.RelativeFormatStyle.UnitsStyle.Option);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Date.RelativeFormatStyle.UnitsStyle.Option and conformance Date.RelativeFormatStyle.UnitsStyle.Option);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type Date.RelativeFormatStyle.UnitsStyle.Option and conformance Date.RelativeFormatStyle.UnitsStyle.Option;
  if (!lazy protocol witness table cache variable for type Date.RelativeFormatStyle.UnitsStyle.Option and conformance Date.RelativeFormatStyle.UnitsStyle.Option)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for Date.RelativeFormatStyle.UnitsStyle.Option,  &type metadata for Date.RelativeFormatStyle.UnitsStyle.Option);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Date.RelativeFormatStyle.UnitsStyle.Option and conformance Date.RelativeFormatStyle.UnitsStyle.Option);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type Date.RelativeFormatStyle.UnitsStyle.Option and conformance Date.RelativeFormatStyle.UnitsStyle.Option;
  if (!lazy protocol witness table cache variable for type Date.RelativeFormatStyle.UnitsStyle.Option and conformance Date.RelativeFormatStyle.UnitsStyle.Option)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for Date.RelativeFormatStyle.UnitsStyle.Option,  &type metadata for Date.RelativeFormatStyle.UnitsStyle.Option);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Date.RelativeFormatStyle.UnitsStyle.Option and conformance Date.RelativeFormatStyle.UnitsStyle.Option);
  }

  return result;
}

unint64_t lazy protocol witness table accessor for type Date.RelativeFormatStyle.Presentation.CodingKeys and conformance Date.RelativeFormatStyle.Presentation.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type Date.RelativeFormatStyle.Presentation.CodingKeys and conformance Date.RelativeFormatStyle.Presentation.CodingKeys;
  if (!lazy protocol witness table cache variable for type Date.RelativeFormatStyle.Presentation.CodingKeys and conformance Date.RelativeFormatStyle.Presentation.CodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for Date.RelativeFormatStyle.Presentation.CodingKeys,  &unk_189C80D28);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Date.RelativeFormatStyle.Presentation.CodingKeys and conformance Date.RelativeFormatStyle.Presentation.CodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type Date.RelativeFormatStyle.Presentation.CodingKeys and conformance Date.RelativeFormatStyle.Presentation.CodingKeys;
  if (!lazy protocol witness table cache variable for type Date.RelativeFormatStyle.Presentation.CodingKeys and conformance Date.RelativeFormatStyle.Presentation.CodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for Date.RelativeFormatStyle.Presentation.CodingKeys,  &unk_189C80D28);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Date.RelativeFormatStyle.Presentation.CodingKeys and conformance Date.RelativeFormatStyle.Presentation.CodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type Date.RelativeFormatStyle.Presentation.CodingKeys and conformance Date.RelativeFormatStyle.Presentation.CodingKeys;
  if (!lazy protocol witness table cache variable for type Date.RelativeFormatStyle.Presentation.CodingKeys and conformance Date.RelativeFormatStyle.Presentation.CodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for Date.RelativeFormatStyle.Presentation.CodingKeys,  &unk_189C80D28);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Date.RelativeFormatStyle.Presentation.CodingKeys and conformance Date.RelativeFormatStyle.Presentation.CodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type Date.RelativeFormatStyle.Presentation.CodingKeys and conformance Date.RelativeFormatStyle.Presentation.CodingKeys;
  if (!lazy protocol witness table cache variable for type Date.RelativeFormatStyle.Presentation.CodingKeys and conformance Date.RelativeFormatStyle.Presentation.CodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for Date.RelativeFormatStyle.Presentation.CodingKeys,  &unk_189C80D28);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Date.RelativeFormatStyle.Presentation.CodingKeys and conformance Date.RelativeFormatStyle.Presentation.CodingKeys);
  }

  return result;
}

unint64_t lazy protocol witness table accessor for type Date.RelativeFormatStyle.Presentation.Option and conformance Date.RelativeFormatStyle.Presentation.Option()
{
  unint64_t result = lazy protocol witness table cache variable for type Date.RelativeFormatStyle.Presentation.Option and conformance Date.RelativeFormatStyle.Presentation.Option;
  if (!lazy protocol witness table cache variable for type Date.RelativeFormatStyle.Presentation.Option and conformance Date.RelativeFormatStyle.Presentation.Option)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for Date.RelativeFormatStyle.Presentation.Option,  &type metadata for Date.RelativeFormatStyle.Presentation.Option);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Date.RelativeFormatStyle.Presentation.Option and conformance Date.RelativeFormatStyle.Presentation.Option);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type Date.RelativeFormatStyle.Presentation.Option and conformance Date.RelativeFormatStyle.Presentation.Option;
  if (!lazy protocol witness table cache variable for type Date.RelativeFormatStyle.Presentation.Option and conformance Date.RelativeFormatStyle.Presentation.Option)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for Date.RelativeFormatStyle.Presentation.Option,  &type metadata for Date.RelativeFormatStyle.Presentation.Option);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Date.RelativeFormatStyle.Presentation.Option and conformance Date.RelativeFormatStyle.Presentation.Option);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type Date.RelativeFormatStyle.Presentation.Option and conformance Date.RelativeFormatStyle.Presentation.Option;
  if (!lazy protocol witness table cache variable for type Date.RelativeFormatStyle.Presentation.Option and conformance Date.RelativeFormatStyle.Presentation.Option)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for Date.RelativeFormatStyle.Presentation.Option,  &type metadata for Date.RelativeFormatStyle.Presentation.Option);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Date.RelativeFormatStyle.Presentation.Option and conformance Date.RelativeFormatStyle.Presentation.Option);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type Date.RelativeFormatStyle.Presentation.Option and conformance Date.RelativeFormatStyle.Presentation.Option;
  if (!lazy protocol witness table cache variable for type Date.RelativeFormatStyle.Presentation.Option and conformance Date.RelativeFormatStyle.Presentation.Option)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for Date.RelativeFormatStyle.Presentation.Option,  &type metadata for Date.RelativeFormatStyle.Presentation.Option);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Date.RelativeFormatStyle.Presentation.Option and conformance Date.RelativeFormatStyle.Presentation.Option);
  }

  return result;
}

void *static Date.RelativeFormatStyle._alignedComponentValue(component:for:reference:calendar:allowedComponents:)@<X0>( _BYTE *a1@<X0>, double *a2@<X1>, double *a3@<X2>, uint64_t *a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  double v8 = *a2;
  double v9 = *a3;
  uint64_t v10 = *a4;
  uint64_t v11 = a4[1];
  double v12 = 1.59271755e13;
  if (*a3 <= 1.59271755e13) {
    double v12 = *a3;
  }
  LOBYTE(v22) = *a1;
  double v13 = fmax(v12, -2.11845067e11);
  uint64_t ObjectType = swift_getObjectType();
  *(double *)__src = v13;
  unint64_t result = (*(void *(**)(_OWORD *__return_ptr, double *, _OWORD *, uint64_t, uint64_t))(v11 + 160))( __dst,  &v22,  __src,  ObjectType,  v11);
  if ((__dst[1] & 1) == 0)
  {
    double v16 = *(double *)__dst;
    if (v9 >= v8) {
      double v16 = *(double *)__dst + *((double *)__dst + 1) + -1.0;
    }
    *(void *)&__src[0] = v10;
    *((void *)&__src[0] + 1) = v11;
    double v21 = v8;
    double v22 = v16;
    Calendar.dateComponents(_:from:to:)(a5, &v22, &v21, __dst);
    *(void *)&__src[2] = *(void *)&__dst[2];
    BYTE8(__src[2]) = BYTE8(__dst[2]);
    *(void *)&__src[3] = *(void *)&__dst[3];
    __src[0] = __dst[0];
    __src[1] = __dst[1];
    BYTE8(__src[3]) = BYTE8(__dst[3]);
    *(void *)&__src[4] = *(void *)&__dst[4];
    BYTE8(__src[4]) = BYTE8(__dst[4]);
    *(void *)&__src[5] = *(void *)&__dst[5];
    BYTE8(__src[5]) = BYTE8(__dst[5]);
    *(void *)&__src[6] = *(void *)&__dst[6];
    BYTE8(__src[6]) = BYTE8(__dst[6]);
    *(void *)&__src[7] = *(void *)&__dst[7];
    BYTE8(__src[7]) = BYTE8(__dst[7]);
    *(void *)&__src[8] = *(void *)&__dst[8];
    BYTE8(__src[8]) = BYTE8(__dst[8]);
    *(void *)&__src[9] = *(void *)&__dst[9];
    BYTE8(__src[9]) = BYTE8(__dst[9]);
    *(void *)&__src[10] = *(void *)&__dst[10];
    BYTE8(__src[10]) = BYTE8(__dst[10]);
    *(void *)&__src[11] = *(void *)&__dst[11];
    BYTE8(__src[11]) = BYTE8(__dst[11]);
    *(void *)&__src[12] = *(void *)&__dst[12];
    BYTE8(__src[12]) = BYTE8(__dst[12]);
    *(void *)&__src[13] = *(void *)&__dst[13];
    BYTE8(__src[13]) = BYTE8(__dst[13]);
    *(void *)&__src[14] = *(void *)&__dst[14];
    BYTE8(__src[14]) = BYTE8(__dst[14]);
    *(void *)&__src[15] = *(void *)&__dst[15];
    BYTE8(__src[15]) = BYTE8(__dst[15]);
    BYTE8(__src[16]) = BYTE8(__dst[16]);
    *(void *)&__src[16] = *(void *)&__dst[16];
    *(void *)&__src[17] = *(void *)&__dst[17];
    WORD4(__src[17]) = WORD4(__dst[17]);
    memcpy(__dst, __src, 0x11AuLL);
    outlined retain of DateComponents((uint64_t)__src);
    if (one-time initialization token for sortedAllowedComponents != -1) {
      swift_once();
    }
    outlined retain of DateComponents((uint64_t)__src);
    uint64_t v17 = swift_bridgeObjectRetain();
    uint64_t v18 = specialized Sequence.compactMap<A>(_:)(v17);
    outlined release of DateComponents((uint64_t)__src);
    swift_bridgeObjectRelease();
    outlined release of DateComponents((uint64_t)__src);
    if (*(void *)(v18 + 16))
    {
      uint64_t v19 = *(void *)(v18 + 40);
      *(_BYTE *)a6 = *(_BYTE *)(v18 + 32);
      *(void *)(a6 + 8) = v19;
      outlined release of DateComponents((uint64_t)__src);
      return (void *)swift_bridgeObjectRelease();
    }

    outlined release of DateComponents((uint64_t)__src);
    unint64_t result = (void *)swift_bridgeObjectRelease();
  }

  *(_OWORD *)a6 = xmmword_1837BEE50;
  return result;
}

uint64_t static Date.RelativeFormatStyle._roundedLargestComponentValue(refDate:for:calendar:allowedComponents:largestAllowedComponent:)@<X0>( uint64_t *a1@<X0>, double *a2@<X1>, void *a3@<X2>, uint64_t a4@<X3>, unsigned __int8 *a5@<X4>, _OWORD *a6@<X8>)
{
  uint64_t v6 = *a1;
  double v7 = *a2;
  uint64_t v8 = a3[1];
  int v9 = *a5;
  __dst[0] = *a3;
  __dst[1] = v8;
  if (one-time initialization token for sortedAllowedComponents != -1) {
    swift_once();
  }
  uint64_t v10 = static ICURelativeDateFormatter.sortedAllowedComponents;
  uint64_t v11 = *(void *)(static ICURelativeDateFormatter.sortedAllowedComponents + 16);
  if (v11)
  {
    swift_bridgeObjectRetain();
    uint64_t v12 = 0LL;
    uint64_t v13 = MEMORY[0x18961AFE8];
    while (2)
    {
      int v16 = *(unsigned __int8 *)(v10 + v12 + 32);
      char v17 = v16 - 1;
      if ((v16 - 1) > 0xA || ((0x63Fu >> v17) & 1) == 0)
      {
        __break(1u);
LABEL_69:
        __break(1u);
LABEL_70:
        __break(1u);
LABEL_71:
        __break(1u);
        goto LABEL_72;
      }

      switch(v9)
      {
        case 1:
          goto LABEL_23;
        case 2:
          if (((0x1C1u >> v17) & 1) == 0) {
            goto LABEL_23;
          }
          goto LABEL_8;
        case 3:
          if (((0x7C3u >> v17) & 1) == 0) {
            goto LABEL_23;
          }
          goto LABEL_8;
        case 4:
          if (((0x7C7u >> v17) & 1) == 0) {
            goto LABEL_23;
          }
          goto LABEL_8;
        case 5:
          if (((0x7CFu >> v17) & 1) == 0) {
            goto LABEL_23;
          }
          goto LABEL_8;
        case 6:
          if (((0x7DFu >> v17) & 1) == 0) {
            goto LABEL_23;
          }
          goto LABEL_8;
        case 10:
        case 11:
          if (((0x1C3u >> v17) & 1) == 0)
          {
LABEL_23:
            uint64_t v76 = v13;
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            {
              specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)( 0,  *(void *)(v13 + 16) + 1LL,  1);
              uint64_t v13 = v76;
            }

            unint64_t v15 = *(void *)(v13 + 16);
            unint64_t v14 = *(void *)(v13 + 24);
            if (v15 >= v14 >> 1)
            {
              specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)( v14 > 1,  v15 + 1,  1);
              uint64_t v13 = v76;
            }

            *(void *)(v13 + 16) = v15 + 1;
            *(_BYTE *)(v13 + v15 + 32) = v16;
          }

uint64_t specialized BidirectionalCollection.last(where:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned __int8 a3@<W2>, char *a4@<X8>)
{
  uint64_t v6 = *(void *)(a1 + 16);
  if (!v6)
  {
LABEL_21:
    uint64_t result = swift_bridgeObjectRelease();
    char v19 = 18;
    goto LABEL_22;
  }

  uint64_t v7 = a1 + 32;
  uint64_t v8 = a2 + 56;
  int v9 = a3 - 1;
  while (1)
  {
    --v6;
    if (*(void *)(a2 + 16))
    {
      Swift::UInt v11 = *(unsigned __int8 *)(v7 + v6);
      Hasher.init(_seed:)();
      Hasher._combine(_:)(v11);
      Swift::Int v12 = Hasher._finalize()();
      uint64_t v13 = -1LL << *(_BYTE *)(a2 + 32);
      unint64_t v14 = v12 & ~v13;
      if (((*(void *)(v8 + ((v14 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v14) & 1) != 0)
      {
        uint64_t v15 = *(void *)(a2 + 48);
        if (*(unsigned __int8 *)(v15 + v14) != (_DWORD)v11)
        {
          uint64_t v16 = ~v13;
          do
          {
            unint64_t v14 = (v14 + 1) & v16;
            if (((*(void *)(v8 + ((v14 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v14) & 1) == 0) {
              goto LABEL_6;
            }
          }

          while (*(unsigned __int8 *)(v15 + v14) != (_DWORD)v11);
        }

        char v17 = v11 - 1;
      }
    }

uint64_t Date.RelativeFormatStyle.hash(into:)(uint64_t a1)
{
  void (*v11)(void *__return_ptr, uint64_t, uint64_t);
  Swift::UInt8 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE *v17;
  uint64_t v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  id v24;
  id v25;
  void *v26;
  id v27;
  id v28;
  id v29;
  id v30;
  id v31;
  id v32;
  id v33;
  id v34;
  id v35;
  id v36;
  void *v37;
  id v38;
  uint64_t v39;
  uint64_t v40;
  Swift::UInt v41;
  Swift::UInt v42;
  Swift::UInt8 v43;
  Swift::UInt8 v44;
  Swift::UInt8 v45;
  uint64_t v46;
  void (*v47)(uint64_t, uint64_t, uint64_t);
  void *v49;
  void *v50;
  void *v51;
  uint64_t v52;
  _BYTE v53[144];
  _BYTE v54[8];
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  void *v60;
  void *v61;
  void *v62;
  void *v63;
  void *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char v68;
  char v69;
  char v70;
  char v71;
  void v72[18];
  _BYTE v73[144];
  _BYTE v74[152];
  Swift::UInt v3 = v1[1];
  Swift::UInt v4 = v1[2];
  uint64_t v5 = *((void *)v1 + 2);
  uint64_t v6 = *((void *)v1 + 4);
  uint64_t v7 = *((void *)v1 + 5);
  Hasher._combine(_:)(*v1);
  Hasher._combine(_:)(v3);
  Hasher._combine(_:)(v4);
  uint64_t ObjectType = swift_getObjectType();
  int v9 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 48);
  swift_unknownObjectRetain();
  if ((v9(ObjectType, v5) & 1) != 0)
  {
    Swift::UInt8 v10 = 1;
LABEL_5:
    Hasher._combine(_:)(v10);
    goto LABEL_59;
  }

  Hasher._combine(_:)(0);
  (*(void (**)(uint64_t, uint64_t))(v5 + 64))(ObjectType, v5);
  String.hash(into:)();
  swift_bridgeObjectRelease();
  Swift::UInt v11 = *(void (**)(void *__return_ptr, uint64_t, uint64_t))(v5 + 464);
  swift_unknownObjectRetain();
  v11(v72, ObjectType, v5);
  swift_unknownObjectRelease();
  outlined init with take of LocalePreferences?((uint64_t)v72, (uint64_t)v73);
  outlined init with take of LocalePreferences?((uint64_t)v73, (uint64_t)v74);
  if (_s10Foundation17LocalePreferencesVSgWOg((uint64_t)v74) == 1)
  {
    Swift::UInt8 v10 = 0;
    goto LABEL_5;
  }

  outlined init with take of LocalePreferences?((uint64_t)v73, (uint64_t)v54);
  Hasher._combine(_:)(1u);
  if (v54[0] == 2)
  {
    Swift::Int v12 = 0;
  }

  else
  {
    Swift::Int v12 = v54[0] & 1;
    Hasher._combine(_:)(1u);
  }

  Hasher._combine(_:)(v12);
  uint64_t v13 = v55;
  if (!v55)
  {
    Hasher._combine(_:)(0);
    char v17 = v54;
    goto LABEL_19;
  }

  Hasher._combine(_:)(1u);
  Hasher._combine(_:)(*(void *)(v13 + 16));
  unint64_t v14 = *(void *)(v13 + 16);
  if (!v14)
  {
    outlined init with take of LocalePreferences?((uint64_t)v73, (uint64_t)v53);
    char v17 = v53;
LABEL_19:
    outlined retain of LocalePreferences(v17);
    if (!v56) {
      goto LABEL_14;
    }
    goto LABEL_20;
  }

  outlined retain of LocalePreferences?( (uint64_t)v73,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined copy of LocalePreferences?);
  swift_bridgeObjectRetain();
  uint64_t v15 = v13 + 40;
  do
  {
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    v15 += 16LL;
    --v14;
  }

  while (v14);
  swift_bridgeObjectRelease();
  if (!v56)
  {
LABEL_14:
    Hasher._combine(_:)(0);
    if (!v57) {
      goto LABEL_15;
    }
LABEL_21:
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    uint64_t v16 = v58;
    if (!v58) {
      goto LABEL_16;
    }
    goto LABEL_22;
  }

uint64_t Date.RelativeFormatStyle.encode(to:)(void *a1)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<Date.RelativeFormatStyle.CodingKeys>);
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1895F8858](v4);
  uint64_t v7 = (char *)&v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  char v8 = *v1;
  int v19 = v1[1];
  int v17 = v1[2];
  __int128 v9 = *(_OWORD *)(v1 + 8);
  __int128 v14 = *(_OWORD *)(v1 + 24);
  __int128 v15 = v9;
  uint64_t v16 = *((void *)v1 + 5);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type Date.RelativeFormatStyle.CodingKeys and conformance Date.RelativeFormatStyle.CodingKeys();
  uint64_t v10 = v4;
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  LOBYTE(v18) = v8;
  char v20 = 0;
  lazy protocol witness table accessor for type Date.RelativeFormatStyle.Presentation and conformance Date.RelativeFormatStyle.Presentation();
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v2)
  {
    char v11 = v17;
    uint64_t v12 = v16;
    LOBYTE(v18) = v19;
    char v20 = 1;
    lazy protocol witness table accessor for type Date.RelativeFormatStyle.UnitsStyle and conformance Date.RelativeFormatStyle.UnitsStyle();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    LOBYTE(v18) = v11;
    char v20 = 2;
    lazy protocol witness table accessor for type FormatStyleCapitalizationContext and conformance FormatStyleCapitalizationContext();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    __int128 v18 = v15;
    char v20 = 3;
    lazy protocol witness table accessor for type Locale and conformance Locale();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    __int128 v18 = v14;
    char v20 = 4;
    lazy protocol witness table accessor for type Calendar and conformance Calendar();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    *(void *)&__int128 v18 = v12;
    char v20 = 5;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Set<Date.ComponentsFormatStyle.Field>);
    lazy protocol witness table accessor for type Set<Date.ComponentsFormatStyle.Field> and conformance <> Set<A>( &lazy protocol witness table cache variable for type Set<Date.ComponentsFormatStyle.Field> and conformance <> Set<A>,  (uint64_t (*)(void))lazy protocol witness table accessor for type Date.ComponentsFormatStyle.Field and conformance Date.ComponentsFormatStyle.Field,  MEMORY[0x1896186F8]);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
  }

  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v10);
}

Swift::Int Date.RelativeFormatStyle.hashValue.getter()
{
  void (*v10)(void *__return_ptr, uint64_t, uint64_t);
  Swift::UInt8 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _BYTE *v16;
  uint64_t v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  id v23;
  id v24;
  id v25;
  id v26;
  id v27;
  id v28;
  id v29;
  id v30;
  id v31;
  id v32;
  id v33;
  id v34;
  id v35;
  uint64_t v36;
  uint64_t v37;
  Swift::UInt v38;
  Swift::UInt v39;
  Swift::UInt8 v40;
  Swift::UInt8 v41;
  Swift::UInt8 v42;
  uint64_t v43;
  void (*v44)(_BYTE *, uint64_t, uint64_t);
  void *v46;
  uint64_t v47;
  _BYTE v48[144];
  _BYTE v49[8];
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  void *v55;
  void *v56;
  void *v57;
  void *v58;
  void *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char v63;
  char v64;
  char v65;
  char v66;
  void v67[18];
  _BYTE v68[144];
  _BYTE v69[144];
  _BYTE v70[80];
  Swift::UInt v1 = *v0;
  Swift::UInt v2 = v0[1];
  Swift::UInt v3 = v0[2];
  uint64_t v4 = *((void *)v0 + 2);
  uint64_t v5 = *((void *)v0 + 4);
  uint64_t v6 = *((void *)v0 + 5);
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
  Hasher._combine(_:)(v3);
  uint64_t ObjectType = swift_getObjectType();
  char v8 = *(uint64_t (**)(uint64_t, uint64_t))(v4 + 48);
  swift_unknownObjectRetain();
  if ((v8(ObjectType, v4) & 1) != 0)
  {
    Swift::UInt8 v9 = 1;
LABEL_5:
    Hasher._combine(_:)(v9);
    goto LABEL_59;
  }

  Hasher._combine(_:)(0);
  (*(void (**)(uint64_t, uint64_t))(v4 + 64))(ObjectType, v4);
  String.hash(into:)();
  swift_bridgeObjectRelease();
  uint64_t v10 = *(void (**)(void *__return_ptr, uint64_t, uint64_t))(v4 + 464);
  swift_unknownObjectRetain();
  v10(v67, ObjectType, v4);
  swift_unknownObjectRelease();
  outlined init with take of LocalePreferences?((uint64_t)v67, (uint64_t)v68);
  outlined init with take of LocalePreferences?((uint64_t)v68, (uint64_t)v69);
  if (_s10Foundation17LocalePreferencesVSgWOg((uint64_t)v69) == 1)
  {
    Swift::UInt8 v9 = 0;
    goto LABEL_5;
  }

  outlined init with take of LocalePreferences?((uint64_t)v68, (uint64_t)v49);
  Hasher._combine(_:)(1u);
  if (v49[0] == 2)
  {
    char v11 = 0;
  }

  else
  {
    char v11 = v49[0] & 1;
    Hasher._combine(_:)(1u);
  }

  Hasher._combine(_:)(v11);
  uint64_t v12 = v50;
  if (!v50)
  {
    Hasher._combine(_:)(0);
    uint64_t v16 = v49;
    goto LABEL_19;
  }

  Hasher._combine(_:)(1u);
  Hasher._combine(_:)(*(void *)(v12 + 16));
  uint64_t v13 = *(void *)(v12 + 16);
  if (!v13)
  {
    outlined init with take of LocalePreferences?((uint64_t)v68, (uint64_t)v48);
    uint64_t v16 = v48;
LABEL_19:
    outlined retain of LocalePreferences(v16);
    if (!v51) {
      goto LABEL_14;
    }
    goto LABEL_20;
  }

  outlined retain of LocalePreferences?( (uint64_t)v68,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined copy of LocalePreferences?);
  swift_bridgeObjectRetain();
  __int128 v14 = v12 + 40;
  do
  {
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    v14 += 16LL;
    --v13;
  }

  while (v13);
  swift_bridgeObjectRelease();
  if (!v51)
  {
LABEL_14:
    Hasher._combine(_:)(0);
    if (!v52) {
      goto LABEL_15;
    }
LABEL_21:
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    __int128 v15 = v53;
    if (!v53) {
      goto LABEL_16;
    }
    goto LABEL_22;
  }

uint64_t Date.RelativeFormatStyle.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<Date.RelativeFormatStyle.CodingKeys>);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1895F8858](v5);
  char v8 = (char *)v13 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type Date.RelativeFormatStyle.CodingKeys and conformance Date.RelativeFormatStyle.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2) {
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  }
  char v19 = 0;
  lazy protocol witness table accessor for type Date.RelativeFormatStyle.Presentation and conformance Date.RelativeFormatStyle.Presentation();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  char v9 = v17;
  char v19 = 1;
  lazy protocol witness table accessor for type Date.RelativeFormatStyle.UnitsStyle and conformance Date.RelativeFormatStyle.UnitsStyle();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  int v10 = v17;
  char v19 = 2;
  lazy protocol witness table accessor for type FormatStyleCapitalizationContext and conformance FormatStyleCapitalizationContext();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  int v18 = v17;
  char v19 = 3;
  lazy protocol witness table accessor for type Locale and conformance Locale();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  int v15 = v10;
  __int128 v16 = v17;
  char v19 = 4;
  lazy protocol witness table accessor for type Calendar and conformance Calendar();
  swift_unknownObjectRetain();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  __int128 v14 = v17;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Set<Date.ComponentsFormatStyle.Field>);
  char v19 = 5;
  lazy protocol witness table accessor for type Set<Date.ComponentsFormatStyle.Field> and conformance <> Set<A>( &lazy protocol witness table cache variable for type Set<Date.ComponentsFormatStyle.Field> and conformance <> Set<A>,  (uint64_t (*)(void))lazy protocol witness table accessor for type Date.ComponentsFormatStyle.Field and conformance Date.ComponentsFormatStyle.Field,  MEMORY[0x189618710]);
  v13[1] = v14;
  swift_unknownObjectRetain();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  uint64_t v11 = v17;
  swift_unknownObjectRetain();
  swift_bridgeObjectRetain();
  swift_unknownObjectRelease();
  *(_BYTE *)a2 = v9;
  *(_BYTE *)(a2 + 1) = v15;
  *(_BYTE *)(a2 + 2) = v18;
  *(_OWORD *)(a2 + 8) = v16;
  *(_OWORD *)(a2 + 24) = v14;
  *(void *)(a2 + 40) = v11;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();
  return swift_unknownObjectRelease();
}

uint64_t protocol witness for Decodable.init(from:) in conformance Date.RelativeFormatStyle@<X0>( void *a1@<X0>, uint64_t a2@<X8>)
{
  return Date.RelativeFormatStyle.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance Date.RelativeFormatStyle(void *a1)
{
  return Date.RelativeFormatStyle.encode(to:)(a1);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance Date.RelativeFormatStyle()
{
  void (*v10)(void *__return_ptr, uint64_t, uint64_t);
  Swift::UInt8 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  id v22;
  id v23;
  id v24;
  id v25;
  id v26;
  id v27;
  id v28;
  id v29;
  id v30;
  id v31;
  id v32;
  id v33;
  id v34;
  uint64_t v35;
  uint64_t v36;
  Swift::UInt v37;
  Swift::UInt v38;
  Swift::UInt8 v39;
  Swift::UInt8 v40;
  Swift::UInt8 v41;
  uint64_t v42;
  void (*v43)(_BYTE *, uint64_t, uint64_t);
  void *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  void *v53;
  void *v54;
  void *v55;
  void *v56;
  void *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char v61;
  char v62;
  char v63;
  char v64;
  void v65[18];
  _BYTE v66[144];
  _BYTE v67[144];
  _BYTE v68[80];
  Swift::UInt v1 = *v0;
  Swift::UInt v2 = v0[1];
  Swift::UInt v3 = v0[2];
  uint64_t v4 = *((void *)v0 + 2);
  uint64_t v5 = *((void *)v0 + 4);
  uint64_t v6 = *((void *)v0 + 5);
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
  Hasher._combine(_:)(v3);
  uint64_t ObjectType = swift_getObjectType();
  char v8 = *(uint64_t (**)(uint64_t, uint64_t))(v4 + 48);
  swift_unknownObjectRetain();
  if ((v8(ObjectType, v4) & 1) != 0)
  {
    Swift::UInt8 v9 = 1;
LABEL_5:
    Hasher._combine(_:)(v9);
    goto LABEL_58;
  }

  Hasher._combine(_:)(0);
  (*(void (**)(uint64_t, uint64_t))(v4 + 64))(ObjectType, v4);
  String.hash(into:)();
  swift_bridgeObjectRelease();
  int v10 = *(void (**)(void *__return_ptr, uint64_t, uint64_t))(v4 + 464);
  swift_unknownObjectRetain();
  v10(v65, ObjectType, v4);
  swift_unknownObjectRelease();
  outlined init with take of LocalePreferences?((uint64_t)v65, (uint64_t)v66);
  outlined init with take of LocalePreferences?((uint64_t)v66, (uint64_t)v67);
  if (_s10Foundation17LocalePreferencesVSgWOg((uint64_t)v67) == 1)
  {
    Swift::UInt8 v9 = 0;
    goto LABEL_5;
  }

  outlined init with take of LocalePreferences?((uint64_t)v66, (uint64_t)&v47);
  Hasher._combine(_:)(1u);
  if (v47 == 2)
  {
    uint64_t v11 = 0;
  }

  else
  {
    uint64_t v11 = v47 & 1;
    Hasher._combine(_:)(1u);
  }

  Hasher._combine(_:)(v11);
  uint64_t v12 = v48;
  if (!v48)
  {
    Hasher._combine(_:)(0);
LABEL_18:
    outlined retain of LocalePreferences(&v47);
    if (!v49) {
      goto LABEL_14;
    }
    goto LABEL_19;
  }

  Hasher._combine(_:)(1u);
  Hasher._combine(_:)(*(void *)(v12 + 16));
  uint64_t v13 = *(void *)(v12 + 16);
  if (!v13) {
    goto LABEL_18;
  }
  outlined retain of LocalePreferences?( (uint64_t)v66,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined copy of LocalePreferences?);
  swift_bridgeObjectRetain();
  __int128 v14 = v12 + 40;
  do
  {
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    v14 += 16LL;
    --v13;
  }

  while (v13);
  swift_bridgeObjectRelease();
  if (!v49)
  {
LABEL_14:
    Hasher._combine(_:)(0);
    if (!v50) {
      goto LABEL_15;
    }
LABEL_20:
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    int v15 = v51;
    if (!v51) {
      goto LABEL_16;
    }
    goto LABEL_21;
  }

uint64_t protocol witness for FormatStyle.format(_:) in conformance Date.RelativeFormatStyle@<X0>( Swift::String *a1@<X8>, Foundation::Date a2@<D0>)
{
  Swift::String v4 = Date.RelativeFormatStyle.format(_:)(a2);
  uint64_t result = v4._countAndFlagsBits;
  *a1 = v4;
  return result;
}

uint64_t protocol witness for FormatStyle.locale(_:) in conformance Date.RelativeFormatStyle@<X0>( _OWORD *a1@<X0>, uint64_t a2@<X8>)
{
  __int16 v3 = *(_WORD *)(v2 + 1);
  uint64_t v4 = *(void *)(v2 + 40);
  *(_BYTE *)a2 = *(_BYTE *)v2;
  *(_WORD *)(a2 + 1) = v3;
  *(_OWORD *)(a2 + 8) = *a1;
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(v2 + 24);
  *(void *)(a2 + 40) = v4;
  swift_unknownObjectRetain();
  swift_bridgeObjectRetain();
  return swift_unknownObjectRetain();
}

__n128 static FormatStyle<>.relative(presentation:unitsStyle:)@<Q0>( char *a1@<X0>, char *a2@<X1>, uint64_t a3@<X8>)
{
  char v4 = *a1;
  char v5 = *a2;
  if (one-time initialization token for cache != -1) {
    swift_once();
  }
  uint64_t v6 = static LocaleCache.cache + 16;
  uint64_t v7 = (os_unfair_lock_s *)(static LocaleCache.cache + 124);
  swift_retain_n();
  os_unfair_lock_lock(v7);
  closure #1 in LocaleCache.autoupdatingCurrent.getter(v6, (uint64_t *)v31);
  os_unfair_lock_unlock(v7);
  swift_release_n();
  uint64_t v8 = *(void *)&v31[0];
  uint64_t v9 = lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( (unint64_t *)&lazy protocol witness table cache variable for type _LocaleAutoupdating and conformance _LocaleAutoupdating,  (uint64_t (*)(uint64_t))type metadata accessor for _LocaleAutoupdating,  (uint64_t)&protocol conformance descriptor for _LocaleAutoupdating);
  if (one-time initialization token for cache != -1) {
    swift_once();
  }
  uint64_t v10 = static CalendarCache.cache + 16;
  uint64_t v11 = (os_unfair_lock_s *)(static CalendarCache.cache + 60);
  swift_retain_n();
  os_unfair_lock_lock(v11);
  closure #1 in CalendarCache.autoupdatingCurrent.getter(v10, (uint64_t *)v31);
  os_unfair_lock_unlock(v11);
  swift_release_n();
  __n128 v29 = (__n128)v31[0];
  uint64_t v12 = 7LL;
  uint64_t v27 = v9;
  uint64_t v28 = v8;
  char v13 = v5;
  char v14 = v4;
  *(void *)&v31[0] = MEMORY[0x18961AFE8];
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, 7LL, 0);
  uint64_t v15 = *(void *)&v31[0];
  unint64_t v16 = *(void *)(*(void *)&v31[0] + 16LL);
  __int128 v17 = &byte_189C6B530;
  do
  {
    char v19 = *v17++;
    char v18 = v19;
    *(void *)&v31[0] = v15;
    unint64_t v20 = *(void *)(v15 + 24);
    if (v16 >= v20 >> 1)
    {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v20 > 1, v16 + 1, 1);
      uint64_t v15 = *(void *)&v31[0];
    }

    *(void *)(v15 + 16) = v16 + 1;
    *(_BYTE *)(v15 + v16++ + 32) = v18;
    --v12;
  }

  while (v12);
  lazy protocol witness table accessor for type Date.ComponentsFormatStyle.Field and conformance Date.ComponentsFormatStyle.Field();
  uint64_t v21 = Set.init(minimumCapacity:)();
  *(void *)&v31[0] = v21;
  uint64_t v22 = *(void *)(v15 + 16);
  if (v22)
  {
    for (uint64_t i = 0LL; i != v22; ++i)
    {
      uint64_t v24 = v15 + i;
      specialized Set._Variant.insert(_:)(&v30, *(unsigned __int8 *)(v24 + 32));
    }

    swift_bridgeObjectRelease();
    uint64_t v25 = *(void *)&v31[0];
  }

  else
  {
    uint64_t v25 = v21;
    swift_bridgeObjectRelease();
  }

  *(_BYTE *)a3 = v14;
  *(_BYTE *)(a3 + 1) = v13;
  *(_BYTE *)(a3 + 2) = 0;
  *(void *)(a3 + 8) = v28;
  *(void *)(a3 + 16) = v27;
  __n128 result = v29;
  *(__n128 *)(a3 + 24) = v29;
  *(void *)(a3 + 40) = v25;
  return result;
}

unint64_t lazy protocol witness table accessor for type Date.ComponentsFormatStyle.Field and conformance Date.ComponentsFormatStyle.Field()
{
  unint64_t result = lazy protocol witness table cache variable for type Date.ComponentsFormatStyle.Field and conformance Date.ComponentsFormatStyle.Field;
  if (!lazy protocol witness table cache variable for type Date.ComponentsFormatStyle.Field and conformance Date.ComponentsFormatStyle.Field)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for Date.ComponentsFormatStyle.Field,  &type metadata for Date.ComponentsFormatStyle.Field);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Date.ComponentsFormatStyle.Field and conformance Date.ComponentsFormatStyle.Field);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type Date.ComponentsFormatStyle.Field and conformance Date.ComponentsFormatStyle.Field;
  if (!lazy protocol witness table cache variable for type Date.ComponentsFormatStyle.Field and conformance Date.ComponentsFormatStyle.Field)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for Date.ComponentsFormatStyle.Field,  &type metadata for Date.ComponentsFormatStyle.Field);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Date.ComponentsFormatStyle.Field and conformance Date.ComponentsFormatStyle.Field);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type Date.ComponentsFormatStyle.Field and conformance Date.ComponentsFormatStyle.Field;
  if (!lazy protocol witness table cache variable for type Date.ComponentsFormatStyle.Field and conformance Date.ComponentsFormatStyle.Field)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for Date.ComponentsFormatStyle.Field,  &type metadata for Date.ComponentsFormatStyle.Field);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Date.ComponentsFormatStyle.Field and conformance Date.ComponentsFormatStyle.Field);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type Date.ComponentsFormatStyle.Field and conformance Date.ComponentsFormatStyle.Field;
  if (!lazy protocol witness table cache variable for type Date.ComponentsFormatStyle.Field and conformance Date.ComponentsFormatStyle.Field)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for Date.ComponentsFormatStyle.Field,  &type metadata for Date.ComponentsFormatStyle.Field);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Date.ComponentsFormatStyle.Field and conformance Date.ComponentsFormatStyle.Field);
  }

  return result;
}

uint64_t specialized static Date.RelativeFormatStyle.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  if (((*a1 ^ *a2) & 1) != 0) {
    return 0LL;
  }
  if (a1[1] != a2[1] || a1[2] != a2[2]) {
    return 0LL;
  }
  uint64_t v3 = *((void *)a1 + 5);
  __int128 v6 = *(_OWORD *)(a2 + 24);
  __int128 v7 = *(_OWORD *)(a1 + 24);
  uint64_t v4 = *((void *)a2 + 5);
  __int128 v9 = *(_OWORD *)(a1 + 8);
  __int128 v8 = *(_OWORD *)(a2 + 8);
  __int128 v9 = v7;
  __int128 v8 = v6;
  else {
    return 0LL;
  }
}

unint64_t lazy protocol witness table accessor for type Date.RelativeFormatStyle.CodingKeys and conformance Date.RelativeFormatStyle.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type Date.RelativeFormatStyle.CodingKeys and conformance Date.RelativeFormatStyle.CodingKeys;
  if (!lazy protocol witness table cache variable for type Date.RelativeFormatStyle.CodingKeys and conformance Date.RelativeFormatStyle.CodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for Date.RelativeFormatStyle.CodingKeys,  &unk_189C80C08);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Date.RelativeFormatStyle.CodingKeys and conformance Date.RelativeFormatStyle.CodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type Date.RelativeFormatStyle.CodingKeys and conformance Date.RelativeFormatStyle.CodingKeys;
  if (!lazy protocol witness table cache variable for type Date.RelativeFormatStyle.CodingKeys and conformance Date.RelativeFormatStyle.CodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for Date.RelativeFormatStyle.CodingKeys,  &unk_189C80C08);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Date.RelativeFormatStyle.CodingKeys and conformance Date.RelativeFormatStyle.CodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type Date.RelativeFormatStyle.CodingKeys and conformance Date.RelativeFormatStyle.CodingKeys;
  if (!lazy protocol witness table cache variable for type Date.RelativeFormatStyle.CodingKeys and conformance Date.RelativeFormatStyle.CodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for Date.RelativeFormatStyle.CodingKeys,  &unk_189C80C08);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Date.RelativeFormatStyle.CodingKeys and conformance Date.RelativeFormatStyle.CodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type Date.RelativeFormatStyle.CodingKeys and conformance Date.RelativeFormatStyle.CodingKeys;
  if (!lazy protocol witness table cache variable for type Date.RelativeFormatStyle.CodingKeys and conformance Date.RelativeFormatStyle.CodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for Date.RelativeFormatStyle.CodingKeys,  &unk_189C80C08);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Date.RelativeFormatStyle.CodingKeys and conformance Date.RelativeFormatStyle.CodingKeys);
  }

  return result;
}

unint64_t lazy protocol witness table accessor for type Date.RelativeFormatStyle.Presentation and conformance Date.RelativeFormatStyle.Presentation()
{
  unint64_t result = lazy protocol witness table cache variable for type Date.RelativeFormatStyle.Presentation and conformance Date.RelativeFormatStyle.Presentation;
  if (!lazy protocol witness table cache variable for type Date.RelativeFormatStyle.Presentation and conformance Date.RelativeFormatStyle.Presentation)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for Date.RelativeFormatStyle.Presentation,  &type metadata for Date.RelativeFormatStyle.Presentation);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Date.RelativeFormatStyle.Presentation and conformance Date.RelativeFormatStyle.Presentation);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type Date.RelativeFormatStyle.Presentation and conformance Date.RelativeFormatStyle.Presentation;
  if (!lazy protocol witness table cache variable for type Date.RelativeFormatStyle.Presentation and conformance Date.RelativeFormatStyle.Presentation)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for Date.RelativeFormatStyle.Presentation,  &type metadata for Date.RelativeFormatStyle.Presentation);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Date.RelativeFormatStyle.Presentation and conformance Date.RelativeFormatStyle.Presentation);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type Date.RelativeFormatStyle.Presentation and conformance Date.RelativeFormatStyle.Presentation;
  if (!lazy protocol witness table cache variable for type Date.RelativeFormatStyle.Presentation and conformance Date.RelativeFormatStyle.Presentation)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for Date.RelativeFormatStyle.Presentation,  &type metadata for Date.RelativeFormatStyle.Presentation);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Date.RelativeFormatStyle.Presentation and conformance Date.RelativeFormatStyle.Presentation);
  }

  return result;
}

unint64_t lazy protocol witness table accessor for type Date.RelativeFormatStyle.UnitsStyle and conformance Date.RelativeFormatStyle.UnitsStyle()
{
  unint64_t result = lazy protocol witness table cache variable for type Date.RelativeFormatStyle.UnitsStyle and conformance Date.RelativeFormatStyle.UnitsStyle;
  if (!lazy protocol witness table cache variable for type Date.RelativeFormatStyle.UnitsStyle and conformance Date.RelativeFormatStyle.UnitsStyle)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for Date.RelativeFormatStyle.UnitsStyle,  &type metadata for Date.RelativeFormatStyle.UnitsStyle);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Date.RelativeFormatStyle.UnitsStyle and conformance Date.RelativeFormatStyle.UnitsStyle);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type Date.RelativeFormatStyle.UnitsStyle and conformance Date.RelativeFormatStyle.UnitsStyle;
  if (!lazy protocol witness table cache variable for type Date.RelativeFormatStyle.UnitsStyle and conformance Date.RelativeFormatStyle.UnitsStyle)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for Date.RelativeFormatStyle.UnitsStyle,  &type metadata for Date.RelativeFormatStyle.UnitsStyle);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Date.RelativeFormatStyle.UnitsStyle and conformance Date.RelativeFormatStyle.UnitsStyle);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type Date.RelativeFormatStyle.UnitsStyle and conformance Date.RelativeFormatStyle.UnitsStyle;
  if (!lazy protocol witness table cache variable for type Date.RelativeFormatStyle.UnitsStyle and conformance Date.RelativeFormatStyle.UnitsStyle)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for Date.RelativeFormatStyle.UnitsStyle,  &type metadata for Date.RelativeFormatStyle.UnitsStyle);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Date.RelativeFormatStyle.UnitsStyle and conformance Date.RelativeFormatStyle.UnitsStyle);
  }

  return result;
}

uint64_t lazy protocol witness table accessor for type Set<Date.ComponentsFormatStyle.Field> and conformance <> Set<A>( unint64_t *a1, uint64_t (*a2)(void), uint64_t a3)
{
  uint64_t result = *a1;
  if (!result)
  {
    uint64_t v7 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Set<Date.ComponentsFormatStyle.Field>);
    uint64_t v8 = a2();
    uint64_t result = MEMORY[0x186E20D4C](a3, v7, &v8);
    atomic_store(result, a1);
  }

  return result;
}

unint64_t instantiation function for generic protocol witness table for Date.RelativeFormatStyle( void *a1)
{
  a1[1] = lazy protocol witness table accessor for type Date.RelativeFormatStyle and conformance Date.RelativeFormatStyle();
  a1[2] = lazy protocol witness table accessor for type Date.RelativeFormatStyle and conformance Date.RelativeFormatStyle();
  unint64_t result = lazy protocol witness table accessor for type Date.RelativeFormatStyle and conformance Date.RelativeFormatStyle();
  a1[3] = result;
  return result;
}

uint64_t sub_1831A0D3C@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  *a2 = *(void *)(a1 + 40);
  return swift_bridgeObjectRetain();
}

uint64_t sub_1831A0D48(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  swift_bridgeObjectRetain();
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(a2 + 40) = v3;
  return result;
}

uint64_t destroy for Date.RelativeFormatStyle()
{
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for Date.RelativeFormatStyle(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_WORD *)(a1 + 1) = *(_WORD *)(a2 + 1);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_unknownObjectRetain();
  swift_unknownObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for Date.RelativeFormatStyle(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_BYTE *)(a1 + 1) = *(_BYTE *)(a2 + 1);
  *(_BYTE *)(a1 + 2) = *(_BYTE *)(a2 + 2);
  uint64_t v4 = *(void *)(a2 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  *(void *)(a1 + 16) = v4;
  uint64_t v5 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  *(void *)(a1 + 32) = v5;
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for Date.RelativeFormatStyle(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_WORD *)(a1 + 1) = *(_WORD *)(a2 + 1);
  swift_unknownObjectRelease();
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  swift_unknownObjectRelease();
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for Date.RelativeFormatStyle(uint64_t a1, int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0 && *(_BYTE *)(a1 + 48)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for Date.RelativeFormatStyle(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 40) = 0LL;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(_BYTE *)(result + 48) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 48) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for Date.RelativeFormatStyle()
{
  return &type metadata for Date.RelativeFormatStyle;
}

ValueMetadata *type metadata accessor for Date.RelativeFormatStyle.UnitsStyle()
{
  return &type metadata for Date.RelativeFormatStyle.UnitsStyle;
}

ValueMetadata *type metadata accessor for Date.RelativeFormatStyle.Presentation()
{
  return &type metadata for Date.RelativeFormatStyle.Presentation;
}

uint64_t storeEnumTagSinglePayload for Date.RelativeFormatStyle.CodingKeys( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 5 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 5) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFB) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFA) {
    return ((uint64_t (*)(void))((char *)&loc_1831A1038 + 4 * byte_1837BE63C[v4]))();
  }
  *a1 = a2 + 5;
  return ((uint64_t (*)(void))((char *)sub_1831A106C + 4 * byte_1837BE637[v4]))();
}

uint64_t sub_1831A106C(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1831A1074(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x1831A107CLL);
  }
  return result;
}

uint64_t sub_1831A1088(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x1831A1090LL);
  }
  *(_BYTE *)uint64_t result = a2 + 5;
  return result;
}

uint64_t sub_1831A1094(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1831A109C(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

void *type metadata accessor for Date.RelativeFormatStyle.CodingKeys()
{
  return &unk_189C80C08;
}

uint64_t storeEnumTagSinglePayload for Date.RelativeFormatStyle.Presentation( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFE) {
    return ((uint64_t (*)(void))((char *)&loc_1831A1104 + 4 * byte_1837BE646[v4]))();
  }
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1831A1138 + 4 * byte_1837BE641[v4]))();
}

uint64_t sub_1831A1138(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1831A1140(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x1831A1148LL);
  }
  return result;
}

uint64_t sub_1831A1154(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x1831A115CLL);
  }
  *(_BYTE *)uint64_t result = a2 + 1;
  return result;
}

uint64_t sub_1831A1160(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1831A1168(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for Date.RelativeFormatStyle.Presentation.Option()
{
  return &type metadata for Date.RelativeFormatStyle.Presentation.Option;
}

void *type metadata accessor for Date.RelativeFormatStyle.Presentation.CodingKeys()
{
  return &unk_189C80D28;
}

uint64_t storeEnumTagSinglePayload for Date.RelativeFormatStyle.UnitsStyle( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFC) {
    return ((uint64_t (*)(void))((char *)&loc_1831A11E4 + 4 * byte_1837BE650[v4]))();
  }
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_1831A1218 + 4 * byte_1837BE64B[v4]))();
}

uint64_t sub_1831A1218(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1831A1220(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x1831A1228LL);
  }
  return result;
}

uint64_t sub_1831A1234(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x1831A123CLL);
  }
  *(_BYTE *)uint64_t result = a2 + 3;
  return result;
}

uint64_t sub_1831A1240(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1831A1248(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for Date.RelativeFormatStyle.UnitsStyle.Option()
{
  return &type metadata for Date.RelativeFormatStyle.UnitsStyle.Option;
}

uint64_t storeEnumTagSinglePayload for Date.RelativeFormatStyle.Presentation.CodingKeys( uint64_t a1, int a2, int a3)
{
  else {
    int v3 = 2;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2) {
    return ((uint64_t (*)(void))((char *)sub_1831A12A4 + 4 * byte_1837BE655[v4]))();
  }
  else {
    return ((uint64_t (*)(void))((char *)sub_1831A12C4 + 4 * byte_1837BE65A[v4]))();
  }
}

_BYTE *sub_1831A12A4(_BYTE *result, char a2)
{
  *uint64_t result = a2;
  return result;
}

_BYTE *sub_1831A12C4(_BYTE *result)
{
  *uint64_t result = 0;
  return result;
}

_DWORD *sub_1831A12CC(_DWORD *result, int a2)
{
  *uint64_t result = a2;
  return result;
}

_WORD *sub_1831A12D4(_WORD *result, __int16 a2)
{
  *uint64_t result = a2;
  return result;
}

_WORD *sub_1831A12DC(_WORD *result)
{
  *uint64_t result = 0;
  return result;
}

_DWORD *sub_1831A12E4(_DWORD *result)
{
  *uint64_t result = 0;
  return result;
}

void *type metadata accessor for Date.RelativeFormatStyle.UnitsStyle.CodingKeys()
{
  return &unk_189C80E48;
}

unint64_t specialized Date.RelativeFormatStyle.CodingKeys.init(rawValue:)(Swift::String string)
{
  unint64_t object = string._object;
  v2._uint64_t countAndFlagsBits = string._countAndFlagsBits;
  v2._unint64_t object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)( (Swift::OpaquePointer)&outlined read-only object #0 of Date.RelativeFormatStyle.CodingKeys.init(rawValue:),  v2);
  swift_bridgeObjectRelease();
  if (v3 >= 6) {
    return 6LL;
  }
  else {
    return v3;
  }
}

uint64_t outlined retain of Date.RelativeFormatStyle(uint64_t a1)
{
  return a1;
}

uint64_t outlined release of Date.RelativeFormatStyle(uint64_t a1)
{
  return a1;
}

uint64_t type metadata accessor for UTF16EndianAdaptor(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for UTF16EndianAdaptor);
}

uint64_t type metadata completion function for UTF16EndianAdaptor()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0LL;
  }

  return result;
}

void *initializeBufferWithCopyOfBuffer for UTF16EndianAdaptor(void *a1, void *a2, uint64_t a3)
{
  uint64_t v4 = a1;
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8LL);
  uint64_t v6 = *(void *)(v5 + 64);
  uint64_t v7 = *(_DWORD *)(v5 + 80);
  if (v7 <= 7 && (unint64_t)(v6 + 1) <= 0x18 && (*(_DWORD *)(v5 + 80) & 0x100000) == 0)
  {
    (*(void (**)(void *, void *))(v5 + 16))(a1, a2);
    *((_BYTE *)v4 + v6) = *((_BYTE *)a2 + v6);
  }

  else
  {
    uint64_t v10 = *a2;
    *uint64_t v4 = *a2;
    uint64_t v4 = (void *)(v10 + ((v7 + 16) & ~v7));
    swift_retain();
  }

  return v4;
}

uint64_t initializeWithCopy for UTF16EndianAdaptor(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8LL);
  (*(void (**)(void))(v5 + 16))();
  *(_BYTE *)(*(void *)(v5 + 64) + a1) = *(_BYTE *)(*(void *)(v5 + 64) + a2);
  return a1;
}

uint64_t assignWithCopy for UTF16EndianAdaptor(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8LL);
  (*(void (**)(void))(v5 + 24))();
  *(_BYTE *)(*(void *)(v5 + 64) + a1) = *(_BYTE *)(*(void *)(v5 + 64) + a2);
  return a1;
}

uint64_t initializeWithTake for UTF16EndianAdaptor(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8LL);
  (*(void (**)(void))(v5 + 32))();
  *(_BYTE *)(*(void *)(v5 + 64) + a1) = *(_BYTE *)(*(void *)(v5 + 64) + a2);
  return a1;
}

uint64_t assignWithTake for UTF16EndianAdaptor(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8LL);
  (*(void (**)(void))(v5 + 40))();
  *(_BYTE *)(*(void *)(v5 + 64) + a1) = *(_BYTE *)(*(void *)(v5 + 64) + a2);
  return a1;
}

uint64_t getEnumTagSinglePayload for UTF16EndianAdaptor(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8LL);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  if (v5 <= 0xFD) {
    unsigned int v6 = 253;
  }
  else {
    unsigned int v6 = *(_DWORD *)(v4 + 84);
  }
  if (!a2) {
    return 0LL;
  }
  uint64_t v7 = *(void *)(v4 + 64);
  int v8 = a2 - v6;
  if (a2 <= v6) {
    goto LABEL_22;
  }
  uint64_t v9 = v7 + 1;
  char v10 = 8 * (v7 + 1);
  if ((v7 + 1) <= 3)
  {
    unsigned int v13 = ((v8 + ~(-1 << v10)) >> v10) + 1;
    if (HIWORD(v13))
    {
      int v11 = *(_DWORD *)(a1 + v9);
      if (!v11) {
        goto LABEL_22;
      }
      goto LABEL_15;
    }

    if (v13 > 0xFF)
    {
      int v11 = *(unsigned __int16 *)(a1 + v9);
      if (!*(_WORD *)(a1 + v9)) {
        goto LABEL_22;
      }
      goto LABEL_15;
    }

    if (v13 < 2)
    {
LABEL_22:
      if (v5 >= 0xFD) {
        return (*(uint64_t (**)(void))(v4 + 48))();
      }
      unsigned int v15 = *(unsigned __int8 *)(v7 + a1);
      BOOL v16 = v15 >= 2;
      unsigned int v17 = v15 - 2;
      if (!v16) {
        unsigned int v17 = -1;
      }
      if (v17 + 1 >= 2) {
        return v17;
      }
      else {
        return 0LL;
      }
    }
  }

  int v11 = *(unsigned __int8 *)(a1 + v9);
  if (!*(_BYTE *)(a1 + v9)) {
    goto LABEL_22;
  }
LABEL_15:
  int v14 = (v11 - 1) << v10;
  if ((_DWORD)v7 == -1) {
    return v6 + v14 + 1;
  }
  return ((uint64_t (*)(void))((char *)&loc_1831A1A8C + 4 * byte_1837BEE60[(v9 - 1)]))();
}

void storeEnumTagSinglePayload for UTF16EndianAdaptor( _WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5 = *(void *)(*(void *)(a4 + 16) - 8LL);
  if (*(_DWORD *)(v5 + 84) <= 0xFDu) {
    unsigned int v6 = 253;
  }
  else {
    unsigned int v6 = *(_DWORD *)(v5 + 84);
  }
  uint64_t v7 = *(void *)(v5 + 64);
  unsigned int v8 = v7 + 1;
  if (a3 > v6)
  {
    if (v8 <= 3)
    {
      unsigned int v11 = ((a3 - v6 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v11))
      {
        unsigned int v9 = 4u;
      }

      else if (v11 >= 0x100)
      {
        unsigned int v9 = 2;
      }

      else
      {
        unsigned int v9 = v11 > 1;
      }
    }

    else
    {
      unsigned int v9 = 1u;
    }
  }

  else
  {
    unsigned int v9 = 0u;
  }

  if (v6 < a2)
  {
    int v10 = ~v6 + a2;
    if (v8 < 4)
    {
      if ((_DWORD)v7 != -1)
      {
        int v12 = v10 & ~(-1 << (8 * v8));
        bzero(a1, v7 + 1);
        if (v8 == 3)
        {
          *a1 = v12;
          *((_BYTE *)a1 + 2) = BYTE2(v12);
        }

        else if (v8 == 2)
        {
          *a1 = v12;
        }

        else
        {
          *(_BYTE *)a1 = v12;
        }
      }
    }

    else
    {
      bzero(a1, v7 + 1);
      *(_DWORD *)a1 = v10;
    }

    __asm { BR              X10 }
  }

  __asm { BR              X12 }

uint64_t type metadata accessor for UTF32EndianAdaptor(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for UTF32EndianAdaptor);
}

void associated type witness table accessor for Sequence.Iterator : IteratorProtocol in UTF16EndianAdaptor<A>()
{
}

Swift::UInt16_optional __swiftcall UTF16EndianAdaptor.Iterator.next()()
{
  uint64_t v2 = v0;
  uint64_t v3 = *(int *)(v0 + 40);
  if (*(_BYTE *)(v1 + v3) == 1)
  {
    swift_getAssociatedTypeWitness();
    swift_getAssociatedConformanceWitness();
LABEL_3:
    dispatch thunk of IteratorProtocol.next()();
    if ((v20 & 1) != 0 || (int v4 = v19, dispatch thunk of IteratorProtocol.next()(), (v18 & 1) != 0))
    {
      LOWORD(v5) = 0;
      int v6 = 1;
      return (Swift::UInt16_optional)((unsigned __int16)v5 | (v6 << 16));
    }

    int v6 = 0;
    int v9 = v17;
    goto LABEL_17;
  }

  int v6 = 1;
  *(_BYTE *)(v1 + __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v2, v3) = 1;
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  dispatch thunk of IteratorProtocol.next()();
  if ((v26 & 1) != 0)
  {
LABEL_7:
    LOWORD(v5) = 0;
    return (Swift::UInt16_optional)((unsigned __int16)v5 | (v6 << 16));
  }

  int v4 = v25;
  if (v25 >= 0xFEu)
  {
    dispatch thunk of IteratorProtocol.next()();
    if ((v22 & 1) == 0)
    {
      if (v25 == 255 && v21 == 254)
      {
        uint64_t v7 = *(int *)(v2 + 36);
        int v8 = *(unsigned __int8 *)(v1 + v7);
        if (v8 != 2)
        {
          int v6 = 0;
          if ((v8 & 1) != 0) {
            LOWORD(v5) = -2;
          }
          else {
            LOWORD(v5) = -257;
          }
          return (Swift::UInt16_optional)((unsigned __int16)v5 | (v6 << 16));
        }

        *(_BYTE *)(v1 + v7) = 0;
      }

      else
      {
        if (v25 != 254 || v21 != 255)
        {
          int v6 = 0;
          unsigned int v5 = v25 | (v21 << 8);
          int v16 = *(unsigned __int8 *)(v1 + *(int *)(v2 + 36));
          BOOL v11 = (v16 & 1) != 0 || v16 == 2;
          LOWORD(v12) = __rev16(v5);
          goto LABEL_21;
        }

        uint64_t v14 = *(int *)(v2 + 36);
        int v15 = *(unsigned __int8 *)(v1 + v14);
        if (v15 != 2)
        {
          int v6 = 0;
          if ((v15 & 1) != 0) {
            LOWORD(v5) = -257;
          }
          else {
            LOWORD(v5) = -2;
          }
          return (Swift::UInt16_optional)((unsigned __int16)v5 | (v6 << 16));
        }

        *(_BYTE *)(v1 + v14) = 1;
      }

      goto LABEL_3;
    }

    goto LABEL_7;
  }

  dispatch thunk of IteratorProtocol.next()();
  if ((v24 & 1) != 0) {
    goto LABEL_7;
  }
  int v6 = 0;
  int v9 = v23;
LABEL_17:
  int v10 = *(unsigned __int8 *)(v1 + *(int *)(v2 + 36));
  unsigned int v5 = v4 | (v9 << 8);
  BOOL v11 = (v10 & 1) != 0 || v10 == 2;
  unsigned int v12 = bswap32(v5) >> 16;
LABEL_21:
  if (v11) {
    LOWORD(v5) = v12;
  }
  return (Swift::UInt16_optional)((unsigned __int16)v5 | (v6 << 16));
}

uint64_t protocol witness for IteratorProtocol.next() in conformance UTF16EndianAdaptor<A>.Iterator@<X0>( uint64_t a1@<X8>)
{
  *(Swift::UInt16_optional *)&uint64_t result = UTF16EndianAdaptor.Iterator.next()();
  *(_WORD *)a1 = result;
  *(_BYTE *)(a1 + 2) = BYTE2(result) & 1;
  return result;
}

uint64_t protocol witness for Sequence.makeIterator() in conformance UTF16EndianAdaptor<A>@<X0>( uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return protocol witness for Sequence.makeIterator() in conformance UTF16EndianAdaptor<A>( a1,  (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for UTF16EndianAdaptor.Iterator,  a2);
}

uint64_t protocol witness for Sequence._copyToContiguousArray() in conformance UTF16EndianAdaptor<A>( uint64_t a1, uint64_t a2)
{
  uint64_t v4 = specialized Sequence._copyToContiguousArray()(v2, a1, a2);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(a1 - 8) + 8LL))(v2, a1);
  return v4;
}

void associated type witness table accessor for Sequence.Iterator : IteratorProtocol in UTF32EndianAdaptor<A>()
{
}

uint64_t UTF16EndianAdaptor.makeIterator()@<X0>( uint64_t a1@<X0>, uint64_t (*a2)(void, uint64_t, uint64_t)@<X1>, uint64_t a3@<X8>)
{
  unsigned __int8 v25 = a2;
  uint64_t v6 = *(void *)(a1 + 16);
  uint64_t v7 = *(void *)(a1 + 24);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v26 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v27 = AssociatedTypeWitness;
  MEMORY[0x1895F8858](AssociatedTypeWitness);
  int v10 = &v23[-v9];
  uint64_t v11 = *(void *)(v6 - 8);
  MEMORY[0x1895F8858](v12);
  uint64_t v14 = &v23[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  __n128 v16 = MEMORY[0x1895F8858](v15);
  char v18 = &v23[-v17];
  unsigned __int8 v19 = *(void (**)(_BYTE *, uint64_t, uint64_t, __n128))(v11 + 16);
  v19(&v23[-v17], v3, v6, v16);
  int v24 = *(unsigned __int8 *)(v3 + *(int *)(a1 + 36));
  uint64_t v20 = v25(0LL, v6, v7);
  uint64_t v21 = *(int *)(v20 + 36);
  *(_BYTE *)(a3 + v21) = 2;
  *(_BYTE *)(a3 + *(int *)(v20 + 40)) = 0;
  ((void (*)(_BYTE *, _BYTE *, uint64_t))v19)(v14, v18, v6);
  dispatch thunk of Sequence.makeIterator()();
  (*(void (**)(_BYTE *, uint64_t))(v11 + 8))(v18, v6);
  uint64_t result = (*(uint64_t (**)(uint64_t, _BYTE *, uint64_t))(v26 + 32))(a3, v10, v27);
  *(_BYTE *)(a3 + v21) = v24;
  return result;
}

Swift::UInt32_optional __swiftcall UTF32EndianAdaptor.Iterator.next()()
{
  uint64_t v2 = v0;
  uint64_t v3 = *(int *)(v0 + 40);
  if (*(_BYTE *)(v1 + v3) == 1)
  {
    swift_getAssociatedTypeWitness();
    swift_getAssociatedConformanceWitness();
LABEL_3:
    dispatch thunk of IteratorProtocol.next()();
    if ((v17 & 1) != 0)
    {
      unsigned int v7 = 0;
      unsigned __int8 v8 = 1;
      return (Swift::UInt32_optional)(v7 | ((unint64_t)v8 << 32));
    }

    int v4 = v16;
    dispatch thunk of IteratorProtocol.next()();
    int v5 = v16;
    dispatch thunk of IteratorProtocol.next()();
    int v6 = v16;
    dispatch thunk of IteratorProtocol.next()();
    goto LABEL_19;
  }

  unsigned __int8 v8 = 1;
  *(_BYTE *)(v1 + __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v2, v3) = 1;
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  dispatch thunk of IteratorProtocol.next()();
  if ((v17 & 1) != 0)
  {
LABEL_17:
    unsigned int v7 = 0;
    return (Swift::UInt32_optional)(v7 | ((unint64_t)v8 << 32));
  }

  int v4 = v16;
  if (v16 == 255 || !v16)
  {
    dispatch thunk of IteratorProtocol.next()();
    if ((v17 & 1) == 0)
    {
      int v5 = v16;
      dispatch thunk of IteratorProtocol.next()();
      int v6 = v16;
      dispatch thunk of IteratorProtocol.next()();
      int v9 = v16;
      if (v16 != 255 || v16 != 254 || v16)
      {
        unsigned __int8 v8 = 0;
        goto LABEL_20;
      }

      uint64_t v10 = *(int *)(v2 + 36);
      int v11 = *(unsigned __int8 *)(v1 + v10);
      if (v11 != 2)
      {
        unsigned __int8 v8 = 0;
        if ((v11 & 1) != 0) {
          unsigned int v7 = -131072;
        }
        else {
          unsigned int v7 = 65279;
        }
        return (Swift::UInt32_optional)(v7 | ((unint64_t)v8 << 32));
      }

      *(_BYTE *)(v1 + v10) = 0;
      goto LABEL_3;
    }

    goto LABEL_17;
  }

  dispatch thunk of IteratorProtocol.next()();
  if ((v17 & 1) != 0) {
    goto LABEL_17;
  }
  int v5 = v16;
  dispatch thunk of IteratorProtocol.next()();
  int v6 = v16;
  dispatch thunk of IteratorProtocol.next()();
LABEL_19:
  unsigned __int8 v8 = 0;
  int v9 = v16;
LABEL_20:
  unsigned int v7 = v4 | (v5 << 8) | (v6 << 16) | (v9 << 24);
  int v13 = *(unsigned __int8 *)(v1 + *(int *)(v2 + 36));
  BOOL v14 = (v13 & 1) != 0 || v13 == 2;
  unsigned int v15 = bswap32(v7);
  if (v14) {
    unsigned int v7 = v15;
  }
  return (Swift::UInt32_optional)(v7 | ((unint64_t)v8 << 32));
}

uint64_t protocol witness for IteratorProtocol.next() in conformance UTF32EndianAdaptor<A>.Iterator@<X0>( uint64_t a1@<X8>)
{
  *(Swift::UInt32_optional *)&uint64_t result = UTF32EndianAdaptor.Iterator.next()();
  *(_DWORD *)a1 = result;
  *(_BYTE *)(a1 + 4) = BYTE4(result) & 1;
  return result;
}

uint64_t protocol witness for Sequence.makeIterator() in conformance UTF32EndianAdaptor<A>@<X0>( uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return protocol witness for Sequence.makeIterator() in conformance UTF16EndianAdaptor<A>( a1,  (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for UTF32EndianAdaptor.Iterator,  a2);
}

uint64_t protocol witness for Sequence.makeIterator() in conformance UTF16EndianAdaptor<A>@<X0>( uint64_t a1@<X0>, uint64_t (*a2)(void, uint64_t, uint64_t)@<X2>, uint64_t a3@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(a1 - 8) + 8LL))(v3, a1);
}

uint64_t type metadata accessor for UTF32EndianAdaptor.Iterator( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata( a1,  a2,  a3,  a4,  (uint64_t)&nominal type descriptor for UTF32EndianAdaptor.Iterator);
}

uint64_t type metadata accessor for UTF16EndianAdaptor.Iterator( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata( a1,  a2,  a3,  a4,  (uint64_t)&nominal type descriptor for UTF16EndianAdaptor.Iterator);
}

uint64_t type metadata completion function for UTF32EndianAdaptor.Iterator()
{
  uint64_t result = swift_getAssociatedTypeWitness();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0LL;
  }

  return result;
}

void *initializeBufferWithCopyOfBuffer for UTF32EndianAdaptor.Iterator(void *a1, void *a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  uint64_t v7 = *(_DWORD *)(v5 + 80);
  if (v7 <= 7 && (unint64_t)(v6 + 2) <= 0x18 && (*(_DWORD *)(v5 + 80) & 0x100000) == 0)
  {
    (*(void (**)(void *, void *, uint64_t))(v5 + 16))(a1, a2, AssociatedTypeWitness);
    int v11 = (char *)a1 + v6;
    _BYTE *v11 = *((_BYTE *)a2 + v6);
    v11[1] = *((_BYTE *)a2 + v6 + 1);
  }

  else
  {
    uint64_t v10 = *a2;
    *a1 = *a2;
    a1 = (void *)(v10 + ((v7 + 16) & ~v7));
    swift_retain();
  }

  return a1;
}

uint64_t destroy for UTF32EndianAdaptor.Iterator(uint64_t a1)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 8LL))( a1,  AssociatedTypeWitness);
}

uint64_t initializeWithCopy for UTF32EndianAdaptor.Iterator(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(a1, a2, AssociatedTypeWitness);
  uint64_t v6 = *(void *)(v5 + 64);
  uint64_t v7 = (_BYTE *)(v6 + a1);
  unsigned __int8 v8 = (_BYTE *)(v6 + a2);
  *uint64_t v7 = *v8;
  v7[1] = v8[1];
  return a1;
}

uint64_t assignWithCopy for UTF32EndianAdaptor.Iterator(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 24))(a1, a2, AssociatedTypeWitness);
  uint64_t v6 = *(void *)(v5 + 64);
  uint64_t v7 = (_BYTE *)(v6 + a1);
  unsigned __int8 v8 = (_BYTE *)(v6 + a2);
  *uint64_t v7 = *v8;
  v7[1] = v8[1];
  return a1;
}

uint64_t initializeWithTake for UTF32EndianAdaptor.Iterator(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 32))(a1, a2, AssociatedTypeWitness);
  uint64_t v6 = *(void *)(v5 + 64);
  uint64_t v7 = (_BYTE *)(v6 + a1);
  unsigned __int8 v8 = (_BYTE *)(v6 + a2);
  *uint64_t v7 = *v8;
  v7[1] = v8[1];
  return a1;
}

uint64_t assignWithTake for UTF32EndianAdaptor.Iterator(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 40))(a1, a2, AssociatedTypeWitness);
  uint64_t v6 = *(void *)(v5 + 64);
  uint64_t v7 = (_BYTE *)(v6 + a1);
  unsigned __int8 v8 = (_BYTE *)(v6 + a2);
  *uint64_t v7 = *v8;
  v7[1] = v8[1];
  return a1;
}

uint64_t getEnumTagSinglePayload for UTF32EndianAdaptor.Iterator(uint64_t a1, unsigned int a2)
{
  uint64_t v4 = *(void *)(swift_getAssociatedTypeWitness() - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  if (v5 <= 0xFE) {
    unsigned int v6 = 254;
  }
  else {
    unsigned int v6 = *(_DWORD *)(v4 + 84);
  }
  if (!a2) {
    return 0LL;
  }
  uint64_t v7 = *(void *)(v4 + 64);
  if (a2 <= v6) {
    goto LABEL_21;
  }
  uint64_t v8 = v7 + 2;
  char v9 = 8 * (v7 + 2);
  unsigned int v11 = ((a2 - v6 + ~(-1 << v9)) >> v9) + 1;
  if (HIWORD(v11))
  {
    int v10 = *(_DWORD *)(a1 + v8);
    if (v10) {
      goto LABEL_14;
    }
  }

  else
  {
    if (v11 <= 0xFF)
    {
      if (v11 < 2) {
        goto LABEL_21;
      }
LABEL_7:
      int v10 = *(unsigned __int8 *)(a1 + v8);
      if (!*(_BYTE *)(a1 + v8)) {
        goto LABEL_21;
      }
LABEL_14:
      int v12 = (v10 - 1) << v9;
      if ((_DWORD)v7 != -2)
      {
        __asm { BR              X12 }
      }

      int v15 = v6 + v12;
      return (v15 + 1);
    }

    int v10 = *(unsigned __int16 *)(a1 + v8);
    if (*(_WORD *)(a1 + v8)) {
      goto LABEL_14;
    }
  }

void storeEnumTagSinglePayload for UTF32EndianAdaptor.Iterator(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  uint64_t v6 = *(void *)(swift_getAssociatedTypeWitness() - 8);
  if (*(_DWORD *)(v6 + 84) <= 0xFEu) {
    unsigned int v7 = 254;
  }
  else {
    unsigned int v7 = *(_DWORD *)(v6 + 84);
  }
  size_t v8 = *(void *)(v6 + 64) + 2LL;
  if (a3 <= v7)
  {
    unsigned int v9 = 0u;
  }

  else if (v8 <= 3)
  {
    unsigned int v11 = ((a3 - v7 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
    if (HIWORD(v11))
    {
      unsigned int v9 = 4u;
    }

    else if (v11 >= 0x100)
    {
      unsigned int v9 = 2;
    }

    else
    {
      unsigned int v9 = v11 > 1;
    }
  }

  else
  {
    unsigned int v9 = 1u;
  }

  if (v7 < a2)
  {
    int v10 = ~v7 + a2;
    if (v8 < 4)
    {
      if (*(_DWORD *)(v6 + 64) != -2)
      {
        int v12 = v10 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if ((_DWORD)v8 == 3)
        {
          *(_WORD *)a1 = v12;
          a1[2] = BYTE2(v12);
        }

        else if ((_DWORD)v8 == 2)
        {
          *(_WORD *)a1 = v12;
        }

        else
        {
          *a1 = v12;
        }
      }
    }

    else
    {
      bzero(a1, *(void *)(v6 + 64) + 2LL);
      *(_DWORD *)a1 = v10;
    }

    __asm { BR              X10 }
  }

  __asm { BR              X12 }

uint64_t storeEnumTagSinglePayload for Endianness(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFE) {
    return ((uint64_t (*)(void))((char *)&loc_1831A2C74 + 4 * byte_1837BEE81[v4]))();
  }
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1831A2CA8 + 4 * byte_1837BEE7C[v4]))();
}

uint64_t sub_1831A2CA8(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1831A2CB0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x1831A2CB8LL);
  }
  return result;
}

uint64_t sub_1831A2CC4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x1831A2CCCLL);
  }
  *(_BYTE *)uint64_t result = a2 + 1;
  return result;
}

uint64_t sub_1831A2CD0(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1831A2CD8(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for Endianness()
{
  return &type metadata for Endianness;
}

unint64_t lazy protocol witness table accessor for type Endianness and conformance Endianness()
{
  unint64_t result = lazy protocol witness table cache variable for type Endianness and conformance Endianness;
  if (!lazy protocol witness table cache variable for type Endianness and conformance Endianness)
  {
    unint64_t result = MEMORY[0x186E20D4C](&protocol conformance descriptor for Endianness, &type metadata for Endianness);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Endianness and conformance Endianness);
  }

  return result;
}

uint64_t type metadata accessor for _PlistDecodingStorage(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for _PlistDecodingStorage);
}

void *initializeBufferWithCopyOfBuffer for _CodingPathNode(void *a1, void *a2)
{
  *a1 = *a2;
  swift_retain();
  return a1;
}

uint64_t destroy for _CodingPathNode()
{
  return swift_release();
}

void *assignWithCopy for _CodingPathNode(void *a1, void *a2)
{
  *a1 = *a2;
  swift_retain();
  swift_release();
  return a1;
}

void *assignWithTake for _CodingPathNode(void *a1, void *a2)
{
  *a1 = *a2;
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for _CodingPathNode(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 >= 0x7E && *(_BYTE *)(a1 + 8)) {
    return (*(_DWORD *)a1 + 126);
  }
  unsigned int v3 = (((*(void *)a1 >> 57) >> 5) | (4 * ((*(void *)a1 >> 57) & 0x18 | *(void *)a1 & 7))) ^ 0x7F;
  if (v3 >= 0x7D) {
    unsigned int v3 = -1;
  }
  return v3 + 1;
}

uint64_t storeEnumTagSinglePayload for _CodingPathNode(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7D)
  {
    *(void *)unint64_t result = a2 - 126;
    if (a3 >= 0x7E) {
      *(_BYTE *)(result + 8) = 1;
    }
  }

  else
  {
    if (a3 >= 0x7E) {
      *(_BYTE *)(result + 8) = 0;
    }
    if (a2)
    {
      uint64_t v3 = (-a2 >> 2) & 0x1F | (32 * (-a2 & 0x7F));
      *(void *)unint64_t result = (v3 | (v3 << 57)) & 0xF000000000000007LL;
    }
  }

  return result;
}

uint64_t getEnumTag for _CodingPathNode(void *a1)
{
  uint64_t v1 = *a1 >> 62;
  else {
    return (*a1 >> 3) + 2;
  }
}

void *destructiveProjectEnumData for _CodingPathNode(void *result)
{
  *result &= 0x3FFFFFFFFFFFFFFFuLL;
  return result;
}

unint64_t *destructiveInjectEnumTag for _CodingPathNode(unint64_t *result, uint64_t a2)
{
  if (a2 < 2)
  {
    uint64_t v2 = *result & 0xFFFFFFFFFFFFFF8LL;
    unint64_t v3 = a2 << 62;
  }

  else
  {
    uint64_t v2 = 8LL * (a2 - 2);
    unint64_t v3 = 0x8000000000000000LL;
  }

  *unint64_t result = v2 | v3;
  return result;
}

ValueMetadata *type metadata accessor for _CodingPathNode()
{
  return &type metadata for _CodingPathNode;
}

uint64_t BufferReader.lineNumber.getter()
{
  uint64_t v1 = (_BYTE *)v0[2];
  unint64_t v2 = v0[3];
  uint64_t result = 1LL;
  while (*v1 == 13)
  {
    BOOL v4 = __OFADD__(result++, 1LL);
    if (v4) {
      goto LABEL_16;
    }
    if ((unint64_t)(v1 + 1) >= v2)
    {
LABEL_3:
    }

    else
    {
      if (v1[1] == 10) {
        ++v1;
      }
    }
  }

  if (v0[1] < 2) {
    goto LABEL_17;
  }
  if (*(_BYTE *)(*v0 + 1) != 10) {
    goto LABEL_3;
  }
  BOOL v4 = __OFADD__(result++, 1LL);
  if (!v4) {
    goto LABEL_3;
  }
  __break(1u);
LABEL_16:
  __break(1u);
LABEL_17:
  __break(1u);
  return result;
}

uint64_t static DecodingError._dataCorrupted<A>(_:for:_:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v32 = a6;
  uint64_t v33 = a1;
  uint64_t v34 = a2;
  uint64_t v35 = a7;
  uint64_t v37 = *MEMORY[0x1895F89C0];
  uint64_t v10 = *(void *)(a5 - 8);
  MEMORY[0x1895F8858](a1);
  int v12 = (char *)&v31 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = type metadata accessor for Optional();
  uint64_t v14 = *(void *)(v13 - 8);
  MEMORY[0x1895F8858](v13);
  unsigned __int8 v16 = (char *)&v31 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __n128 v18 = MEMORY[0x1895F8858](v17);
  uint64_t v20 = (char *)&v31 - v19;
  uint64_t v21 = *(void (**)(char *, uint64_t, uint64_t, __n128))(v14 + 16);
  v21((char *)&v31 - v19, a4, v13, v18);
  ((void (*)(char *, char *, uint64_t))v21)(v16, v20, v13);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v16, 1LL, a5) == 1)
  {
    char v22 = *(void (**)(char *, uint64_t))(v14 + 8);
    v22(v16, v13);
    _CodingPathNode.path.getter(a3);
    v22(v20, v13);
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v12, v16, a5);
    uint64_t v23 = _CodingPathNode.path.getter(a3);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CodingKey>);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_183720D90;
    uint64_t v25 = v32;
    *(void *)(inited + 56) = a5;
    *(void *)(inited + 64) = v25;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)(inited + 32));
    (*(void (**)(uint64_t *, char *, uint64_t))(v10 + 16))(boxed_opaque_existential_1, v12, a5);
    uint64_t v36 = v23;
    specialized Array.append<A>(contentsOf:)(inited);
    (*(void (**)(char *, uint64_t))(v14 + 8))(v20, v13);
    (*(void (**)(char *, uint64_t))(v10 + 8))(v12, a5);
  }

  swift_bridgeObjectRetain();
  uint64_t v27 = v35;
  DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
  uint64_t v28 = *MEMORY[0x189619360];
  uint64_t v29 = type metadata accessor for DecodingError();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v29 - 8) + 104LL))(v27, v28, v29);
}

uint64_t UInt8.digitValue.getter(char a1)
{
  else {
    return 0;
  }
}

uint64_t BufferView<A>._decodeScalar()(unsigned __int8 *a1, uint64_t a2)
{
  int v2 = *a1;
  if ((v2 & 0xC0) == 0x80) {
    goto LABEL_2;
  }
  if ((v2 & 0x80) == 0)
  {
    if (a2 >= 1) {
      unsigned int v3 = *a1;
    }
    else {
      unsigned int v3 = 0;
    }
    LOBYTE(v4) = a2 < 1;
    return v3 | ((unint64_t)v4 << 32);
  }

  uint64_t v7 = (__clz(v2 ^ 0xFF) - 24);
  if (v7 > a2)
  {
LABEL_2:
    unsigned int v3 = 0;
    LOBYTE(v4) = 1;
    return v3 | ((unint64_t)v4 << 32);
  }

  unsigned int v3 = 0;
  LOBYTE(v4) = 1;
  switch(v7)
  {
    case 1LL:
      return v3 | ((unint64_t)v4 << 32);
    case 2LL:
      int v4 = a1[1] & 0xC0;
      unsigned int v3 = a1[1] & 0x3F | ((v2 & 0x1F) << 6);
      if (v4 != 128) {
        unsigned int v3 = 0;
      }
      LOBYTE(v4) = v4 != 128;
      return v3 | ((unint64_t)v4 << 32);
    case 3LL:
      unsigned int v3 = 0;
      unsigned __int8 v8 = a1[1];
      if ((v8 & 0xC0) == 0x80)
      {
        unsigned __int8 v9 = a1[2];
        if ((v9 & 0xC0) == 0x80)
        {
          unsigned int v3 = ((v2 & 0xF) << 12) | ((v8 & 0x3F) << 6) | v9 & 0x3F;
          LOBYTE(v4) = (((v2 & 0xF) << 12) | ((v8 & 0x3F) << 6) & 0xF800) == 55296;
          if ((((v2 & 0xF) << 12) | ((v8 & 0x3F) << 6) & 0xF800) == 0xD800) {
            unsigned int v3 = 0;
          }
        }
      }

      return v3 | ((unint64_t)v4 << 32);
    case 4LL:
      unsigned int v3 = 0;
      unsigned __int8 v10 = a1[1];
      if ((v10 & 0xC0) == 0x80)
      {
        unsigned __int8 v11 = a1[2];
        if ((v11 & 0xC0) == 0x80)
        {
          unsigned __int8 v12 = a1[3];
          if ((v12 & 0xC0) == 0x80)
          {
            unsigned int v13 = (((v2 & 0xF) << 18) | ((v10 & 0x3Fu) << 12)) >> 16;
            int v14 = ((v2 & 0xF) << 18) | ((v10 & 0x3F) << 12) | ((v11 & 0x3F) << 6);
            int v15 = v14 & 0x3FF800;
            unsigned int v3 = v14 & 0xFFFFFFC0 | v12 & 0x3F;
            BOOL v16 = v15 == 55296 || v13 > 0x10;
            int v4 = v16;
            if (v4) {
              unsigned int v3 = 0;
            }
          }
        }
      }

      return v3 | ((unint64_t)v4 << 32);
    default:
      uint64_t result = _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
      break;
  }

  return result;
}

uint64_t _parseHexIntegerDigits<A>(_:isNegative:)@<X0>( unsigned __int8 *a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  int v49 = a3;
  char v45 = a1;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  MEMORY[0x1895F8858](TupleTypeMetadata2);
  double v48 = (char *)&v43 - v11;
  uint64_t v12 = *(void *)(a5 + 8);
  uint64_t v46 = a5;
  uint64_t v47 = v12;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  MEMORY[0x1895F8858](AssociatedTypeWitness);
  uint64_t v53 = *(void *)(a4 - 8);
  MEMORY[0x1895F8858](v14);
  BOOL v16 = (char *)&v43 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v17);
  MEMORY[0x1895F8858](v18);
  uint64_t v20 = (char *)&v43 - v19;
  __n128 v23 = MEMORY[0x1895F8858](v21);
  uint64_t v25 = (char *)&v43 - v24;
  if (!a2) {
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, __n128))(v53 + 56))(a6, 1LL, 1LL, a4, v23);
  }
  uint64_t v50 = a6;
  char v51 = v22;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  MEMORY[0x186E1CDF8](&unk_1837BF200, 1536LL, AssociatedTypeWitness, AssociatedConformanceWitness);
  double v52 = v25;
  dispatch thunk of ExpressibleByFloatLiteral.init(floatLiteral:)();
  MEMORY[0x186E1CDF8](&unk_1837317E8, 256LL, AssociatedTypeWitness, AssociatedConformanceWitness);
  dispatch thunk of ExpressibleByFloatLiteral.init(floatLiteral:)();
  if (a2 <= 0)
  {
    uint64_t v32 = *(void (**)(char *, uint64_t))(v53 + 8);
LABEL_18:
    v32(v52, a4);
    uint64_t v38 = v53;
    uint64_t v39 = v50;
    (*(void (**)(uint64_t, char *, uint64_t))(v53 + 32))(v50, v20, a4);
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v38 + 56))(v39, 0LL, 1LL, a4);
  }

  uint64_t v27 = v45;
  unint64_t v44 = (unint64_t)&v45[a2];
  while (1)
  {
    int v28 = *v27;
    if ((v28 - 48) <= 9)
    {
      char v54 = v28 - 48;
      lazy protocol witness table accessor for type UInt8 and conformance UInt8();
      uint64_t v29 = v51;
      goto LABEL_10;
    }

    uint64_t v29 = v51;
    char v55 = v28 - 55;
    lazy protocol witness table accessor for type UInt8 and conformance UInt8();
LABEL_10:
    dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
    int v30 = dispatch thunk of FixedWidthInteger.multipliedReportingOverflow(by:)();
    uint64_t v31 = v53;
    uint64_t v32 = *(void (**)(char *, uint64_t))(v53 + 8);
    v32(v20, a4);
    uint64_t v33 = *(void (**)(char *, char *, uint64_t))(v31 + 32);
    v33(v20, v16, a4);
    if ((v49 & 1) != 0) {
      int v34 = dispatch thunk of FixedWidthInteger.subtractingReportingOverflow(_:)();
    }
    else {
      int v34 = dispatch thunk of FixedWidthInteger.addingReportingOverflow(_:)();
    }
    int v35 = v34;
    v32(v29, a4);
    v32(v20, a4);
    uint64_t v36 = v48;
    v33(v48, v16, a4);
    v33(v20, v36, a4);
    if (((v30 | v35) & 1) != 0)
    {
      v32(v20, a4);
      v32(v52, a4);
      uint64_t v37 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v53 + 56);
      return v37(v50, 1LL, 1LL, a4);
    }
  }

  if ((v28 - 97) < 6)
  {
    char v56 = v28 - 87;
    lazy protocol witness table accessor for type UInt8 and conformance UInt8();
    goto LABEL_10;
  }

  uint64_t v41 = v53;
  char v42 = *(void (**)(char *, uint64_t))(v53 + 8);
  v42(v20, a4);
  v42(v52, a4);
  uint64_t v37 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v41 + 56);
  return v37(v50, 1LL, 1LL, a4);
}

uint64_t _parseIntegerDigits<A>(_:isNegative:)@<X0>( unsigned __int8 *a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  int v47 = a3;
  int v49 = a1;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  MEMORY[0x1895F8858](TupleTypeMetadata2);
  uint64_t v46 = (char *)&v39 - v11;
  uint64_t v45 = *(void *)(a5 + 8);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  MEMORY[0x1895F8858](AssociatedTypeWitness);
  uint64_t v13 = *(void *)(a4 - 8);
  MEMORY[0x1895F8858](v14);
  unint64_t v44 = (char *)&v39 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v16);
  MEMORY[0x1895F8858](v17);
  uint64_t v19 = (char *)&v39 - v18;
  __n128 v22 = MEMORY[0x1895F8858](v20);
  uint64_t v24 = (char *)&v39 - v23;
  if (!a2) {
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, __n128))(v13 + 56))(a6, 1LL, 1LL, a4, v22);
  }
  char v42 = v21;
  uint64_t v43 = a5;
  uint64_t v48 = a6;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  MEMORY[0x186E1CDF8](&unk_1837317F0, 1280LL, AssociatedTypeWitness, AssociatedConformanceWitness);
  dispatch thunk of ExpressibleByFloatLiteral.init(floatLiteral:)();
  MEMORY[0x186E1CDF8](&unk_1837317E8, 256LL, AssociatedTypeWitness, AssociatedConformanceWitness);
  dispatch thunk of ExpressibleByFloatLiteral.init(floatLiteral:)();
  if (a2 <= 0)
  {
    uint64_t v31 = *(void (**)(char *, uint64_t))(v13 + 8);
LABEL_13:
    v31(v24, a4);
    uint64_t v37 = v48;
    (*(void (**)(uint64_t, char *, uint64_t))(v13 + 32))(v48, v19, a4);
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v13 + 56))(v37, 0LL, 1LL, a4);
  }

  else
  {
    uint64_t v26 = v49;
    unint64_t v27 = (unint64_t)&v49[a2];
    int v28 = v42;
    uint64_t v29 = v44;
    while (1)
    {
      unsigned int v30 = *v26 - 48;
      if (v30 >= 0xA)
      {
        uint64_t v36 = *(void (**)(char *, uint64_t))(v13 + 8);
        v36(v19, a4);
        v36(v24, a4);
        return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v13 + 56))(v48, 1LL, 1LL, a4);
      }

      unint64_t v40 = v27;
      int v49 = v26;
      char v50 = v30;
      lazy protocol witness table accessor for type UInt8 and conformance UInt8();
      dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
      int v41 = dispatch thunk of FixedWidthInteger.multipliedReportingOverflow(by:)();
      uint64_t v31 = *(void (**)(char *, uint64_t))(v13 + 8);
      v31(v19, a4);
      uint64_t v32 = *(void (**)(char *, char *, uint64_t))(v13 + 32);
      v32(v19, v29, a4);
      int v33 = (v47 & 1) != 0
          ? dispatch thunk of FixedWidthInteger.subtractingReportingOverflow(_:)()
          : dispatch thunk of FixedWidthInteger.addingReportingOverflow(_:)();
      int v34 = v33;
      v31(v28, a4);
      v31(v19, a4);
      int v35 = v46;
      v32(v46, v29, a4);
      v32(v19, v35, a4);
      if (((v41 | v34) & 1) != 0) {
        break;
      }
      uint64_t v26 = v49 + 1;
      unint64_t v27 = v40;
    }

    v31(v19, a4);
    v31(v24, a4);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v13 + 56))(v48, 1LL, 1LL, a4);
  }

uint64_t _CodingPathNode.path.getter(unint64_t a1)
{
  v10[14] = *MEMORY[0x1895F89C0];
  if (a1 >> 62)
  {
    if (a1 >> 62 == 1)
    {
      uint64_t v2 = *(void *)(a1 + 16);
      uint64_t v1 = *(void *)(a1 + 24);
      swift_retain();
      uint64_t v3 = _CodingPathNode.path.getter(v1);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CodingKey>);
      uint64_t inited = swift_initStackObject();
      *(_OWORD *)(inited + 16) = xmmword_183720D90;
      *(void *)(inited + 56) = &type metadata for _CodingKey;
      *(void *)(inited + 64) = lazy protocol witness table accessor for type _CodingKey and conformance _CodingKey();
      uint64_t v5 = swift_allocObject();
      *(void *)(inited + 32) = v5;
      *(void *)(v5 + 16) = v2;
      *(void *)(v5 + 24) = 0LL;
      *(void *)(v5 + 32) = 0LL;
      *(_BYTE *)(v5 + 40) = 2;
      specialized Array.append<A>(contentsOf:)(inited);
      swift_release();
      return v3;
    }

    else
    {
      return MEMORY[0x18961AFE8];
    }
  }

  else
  {
    uint64_t v7 = *(void *)(a1 + 56);
    outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>( a1 + 16,  (uint64_t)v10);
    swift_retain();
    uint64_t v6 = _CodingPathNode.path.getter(v7);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CodingKey>);
    uint64_t v8 = swift_initStackObject();
    *(_OWORD *)(v8 + 16) = xmmword_183720D90;
    outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>( (uint64_t)v10,  v8 + 32);
    specialized Array.append<A>(contentsOf:)(v8);
    swift_release();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v10);
  }

  return v6;
}

uint64_t sub_1831A3E30()
{
  return swift_deallocObject();
}

uint64_t _asciiNumbers.getter()
{
  return 14640LL;
}

BOOL UInt8.isValidHexDigit.getter(unsigned __int8 a1)
{
  return a1 - 58 > 0xFFFFFFF5 || a1 - 71 > 0xFFFFFFF9 || a1 - 97 < 6;
}

void _CodingKey.stringValue.getter(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  __asm { BR              X10 }

uint64_t sub_1831A3EC4()
{
  return v0;
}

void protocol witness for CodingKey.stringValue.getter in conformance _CodingKey( uint64_t a1, uint64_t a2, uint64_t a3)
{
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance _CodingKey@<X0>( uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  *(void *)a3 = result;
  *(void *)(a3 + 8) = a2;
  *(void *)(a3 + 16) = 0LL;
  *(_BYTE *)(a3 + 24) = 0;
  return result;
}

uint64_t protocol witness for CodingKey.intValue.getter in conformance _CodingKey()
{
  if (*(_BYTE *)(v0 + 24)) {
    return *(void *)(v0 + 16);
  }
  return 0LL;
}

uint64_t protocol witness for CodingKey.init(intValue:) in conformance _CodingKey@<X0>( uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)a2 = result;
  *(_BYTE *)(a2 + 24) = 1;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance _CodingKey()
{
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance _CodingKey()
{
  return CodingKey.debugDescription.getter();
}

uint64_t specialized _PlistDecodingStorage.push(container:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 16);
  __n128 v4 = MEMORY[0x1895F8858](a1);
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v6 + 16))( (char *)&v12 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL),  v7,  v3,  v4);
  type metadata accessor for Array();
  Array._makeUniqueAndReserveCapacityIfNotUnique()();
  uint64_t v8 = *v2;
  char isClassOrObjCExistentialType = _swift_isClassOrObjCExistentialType();
  uint64_t v10 = v8 & 0xFFFFFFFFFFFFF8LL;
  if ((isClassOrObjCExistentialType & 1) == 0) {
    uint64_t v10 = v8;
  }
  Array._reserveCapacityAssumingUniqueBuffer(oldCount:)(*(void *)(v10 + 16));
  return Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
}

uint64_t destroy for _CodingKey(uint64_t a1)
{
  return outlined consume of _CodingKey(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(_BYTE *)(a1 + 24));
}

uint64_t initializeWithCopy for _CodingKey(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 16);
  char v6 = *(_BYTE *)(a2 + 24);
  outlined copy of _CodingKey(*(void *)a2, v4, v5, v6);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v5;
  *(_BYTE *)(a1 + 24) = v6;
  return a1;
}

uint64_t assignWithCopy for _CodingKey(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 16);
  char v6 = *(_BYTE *)(a2 + 24);
  outlined copy of _CodingKey(*(void *)a2, v4, v5, v6);
  uint64_t v7 = *(void *)a1;
  uint64_t v8 = *(void *)(a1 + 8);
  uint64_t v9 = *(void *)(a1 + 16);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v5;
  char v10 = *(_BYTE *)(a1 + 24);
  *(_BYTE *)(a1 + 24) = v6;
  outlined consume of _CodingKey(v7, v8, v9, v10);
  return a1;
}

uint64_t assignWithTake for _CodingKey(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 16);
  char v4 = *(_BYTE *)(a2 + 24);
  uint64_t v5 = *(void *)a1;
  uint64_t v7 = *(void *)(a1 + 8);
  uint64_t v6 = *(void *)(a1 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = v3;
  char v8 = *(_BYTE *)(a1 + 24);
  *(_BYTE *)(a1 + 24) = v4;
  outlined consume of _CodingKey(v5, v7, v6, v8);
  return a1;
}

uint64_t getEnumTagSinglePayload for _CodingKey(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 >= 0xFD && *(_BYTE *)(a1 + 25)) {
    return (*(_DWORD *)a1 + 253);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 24);
  if (v3 <= 3) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for _CodingKey(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFC)
  {
    *(void *)(result + 8) = 0LL;
    *(void *)(result + 16) = 0LL;
    *(_BYTE *)(result + 24) = 0;
    *(void *)uint64_t result = a2 - 253;
    if (a3 >= 0xFD) {
      *(_BYTE *)(result + 25) = 1;
    }
  }

  else
  {
    if (a3 >= 0xFD) {
      *(_BYTE *)(result + 25) = 0;
    }
    if (a2) {
      *(_BYTE *)(result + 24) = -(char)a2;
    }
  }

  return result;
}

uint64_t destructiveInjectEnumTag for _CodingKey(uint64_t result, char a2)
{
  *(_BYTE *)(result + 24) = a2;
  return result;
}

ValueMetadata *type metadata accessor for _CodingKey()
{
  return &type metadata for _CodingKey;
}

uint64_t specialized static Date.daysBeforeMonth(_:year:)(char a1, uint64_t a2)
{
  int v2 = 0;
  int v3 = 0;
  switch(a1)
  {
    case 1:
      return v2 | (v3 << 16);
    case 2:
      int v3 = 0;
      int v2 = 31;
      return v2 | (v3 << 16);
    case 3:
      if (__OFADD__(a2, 1LL))
      {
        __break(1u);
LABEL_105:
        __break(1u);
LABEL_106:
        __break(1u);
LABEL_107:
        __break(1u);
LABEL_108:
        __break(1u);
LABEL_109:
        __break(1u);
LABEL_110:
        __break(1u);
LABEL_111:
        __break(1u);
LABEL_112:
        __break(1u);
LABEL_113:
        __break(1u);
LABEL_114:
        __break(1u);
        JUMPOUT(0x1831A4884LL);
      }

      uint64_t v4 = (a2 + 1) % 400;
      if (v4 < 0) {
        uint64_t v4 = -v4;
      }
      if ((v4 & 3) != 0 || v4 == 100 || v4 == 300 || v4 == 200)
      {
        int v3 = 0;
        int v2 = 59;
      }

      else
      {
        int v3 = 0;
        int v2 = 60;
      }

      break;
    case 4:
      if (__OFADD__(a2, 1LL)) {
        goto LABEL_105;
      }
      uint64_t v5 = (a2 + 1) % 400;
      if (v5 < 0) {
        uint64_t v5 = -v5;
      }
      if ((v5 & 3) != 0 || v5 == 100 || v5 == 300 || v5 == 200)
      {
        int v3 = 0;
        int v2 = 90;
      }

      else
      {
        int v3 = 0;
        int v2 = 91;
      }

      break;
    case 5:
      if (__OFADD__(a2, 1LL)) {
        goto LABEL_106;
      }
      uint64_t v6 = (a2 + 1) % 400;
      if (v6 < 0) {
        uint64_t v6 = -v6;
      }
      if ((v6 & 3) != 0 || v6 == 100 || v6 == 300 || v6 == 200)
      {
        int v3 = 0;
        int v2 = 120;
      }

      else
      {
        int v3 = 0;
        int v2 = 121;
      }

      break;
    case 6:
      if (__OFADD__(a2, 1LL)) {
        goto LABEL_107;
      }
      uint64_t v7 = (a2 + 1) % 400;
      if (v7 < 0) {
        uint64_t v7 = -v7;
      }
      if ((v7 & 3) != 0 || v7 == 100 || v7 == 300 || v7 == 200)
      {
        int v3 = 0;
        int v2 = 151;
      }

      else
      {
        int v3 = 0;
        int v2 = 152;
      }

      break;
    case 7:
      if (__OFADD__(a2, 1LL)) {
        goto LABEL_108;
      }
      uint64_t v8 = (a2 + 1) % 400;
      if (v8 < 0) {
        uint64_t v8 = -v8;
      }
      if ((v8 & 3) != 0 || v8 == 100 || v8 == 300 || v8 == 200)
      {
        int v3 = 0;
        int v2 = 181;
      }

      else
      {
        int v3 = 0;
        int v2 = 182;
      }

      break;
    case 8:
      if (__OFADD__(a2, 1LL)) {
        goto LABEL_109;
      }
      uint64_t v9 = (a2 + 1) % 400;
      if (v9 < 0) {
        uint64_t v9 = -v9;
      }
      if ((v9 & 3) != 0 || v9 == 100 || v9 == 300 || v9 == 200)
      {
        int v3 = 0;
        int v2 = 212;
      }

      else
      {
        int v3 = 0;
        int v2 = 213;
      }

      break;
    case 9:
      if (__OFADD__(a2, 1LL)) {
        goto LABEL_110;
      }
      uint64_t v10 = (a2 + 1) % 400;
      if (v10 < 0) {
        uint64_t v10 = -v10;
      }
      if ((v10 & 3) != 0 || v10 == 100 || v10 == 300 || v10 == 200)
      {
        int v3 = 0;
        int v2 = 243;
      }

      else
      {
        int v3 = 0;
        int v2 = 244;
      }

      break;
    case 10:
      if (__OFADD__(a2, 1LL)) {
        goto LABEL_111;
      }
      uint64_t v11 = (a2 + 1) % 400;
      if (v11 < 0) {
        uint64_t v11 = -v11;
      }
      if ((v11 & 3) != 0 || v11 == 100 || v11 == 300 || v11 == 200)
      {
        int v3 = 0;
        int v2 = 273;
      }

      else
      {
        int v3 = 0;
        int v2 = 274;
      }

      break;
    case 11:
      if (__OFADD__(a2, 1LL)) {
        goto LABEL_112;
      }
      uint64_t v12 = (a2 + 1) % 400;
      if (v12 < 0) {
        uint64_t v12 = -v12;
      }
      if ((v12 & 3) != 0 || v12 == 100 || v12 == 300 || v12 == 200)
      {
        int v3 = 0;
        int v2 = 304;
      }

      else
      {
        int v3 = 0;
        int v2 = 305;
      }

      break;
    case 12:
      if (__OFADD__(a2, 1LL)) {
        goto LABEL_113;
      }
      uint64_t v13 = (a2 + 1) % 400;
      if (v13 < 0) {
        uint64_t v13 = -v13;
      }
      if ((v13 & 3) != 0 || v13 == 100 || v13 == 300 || v13 == 200)
      {
        int v3 = 0;
        int v2 = 334;
      }

      else
      {
        int v3 = 0;
        int v2 = 335;
      }

      break;
    case 13:
      if (__OFADD__(a2, 1LL)) {
        goto LABEL_114;
      }
      uint64_t v14 = (a2 + 1) % 400;
      if (v14 < 0) {
        uint64_t v14 = -v14;
      }
      if ((v14 & 3) != 0 || v14 == 100 || v14 == 300 || v14 == 200)
      {
        int v3 = 0;
        int v2 = 365;
      }

      else
      {
        int v3 = 0;
        int v2 = 366;
      }

      break;
    default:
      int v2 = 0;
      int v3 = 1;
      return v2 | (v3 << 16);
  }

  return v2 | (v3 << 16);
}

uint64_t specialized static Date.daysSinceReferenceDate(year:month:day:)(uint64_t result, char a2, char a3)
{
  uint64_t v3 = result % 400;
  if (__OFSUB__(result, 400 * (result / 400)))
  {
    __break(1u);
LABEL_27:
    __break(1u);
    return result;
  }

  double v5 = (double)(result / 400) * 146097.0;
  if (v3 < 0)
  {
    uint64_t v10 = v3 + 1;
    while (1)
    {
      uint64_t v13 = -(v10 % 400) & ((v10 % 400) >> 63);
      if ((v13 & 3) != 0)
      {
        uint64_t v11 = 0xD00000000000LL;
      }

      else
      {
        double v12 = 365.0;
        if (v13 == 100 || v13 == 300 || v13 == 200) {
          goto LABEL_18;
        }
        uint64_t v11 = 0xE00000000000LL;
      }

      *(void *)&double v12 = v11 & 0xFFFFFFFFFFFFLL | 0x4076000000000000LL;
LABEL_18:
      double v5 = v5 - v12;
      if (++v10 == 1) {
        goto LABEL_24;
      }
    }
  }

  if (v3)
  {
    uint64_t v6 = 0LL;
    do
    {
      uint64_t v9 = ++v6 % 400;
      if (v6 % 400 < 0) {
        uint64_t v9 = -v9;
      }
      if ((v9 & 3) != 0)
      {
        uint64_t v7 = 0xD00000000000LL;
      }

      else
      {
        double v8 = 365.0;
        if (v9 == 100 || v9 == 300 || v9 == 200) {
          goto LABEL_7;
        }
        uint64_t v7 = 0xE00000000000LL;
      }

      *(void *)&double v8 = v7 & 0xFFFFFFFFFFFFLL | 0x4076000000000000LL;
LABEL_7:
      double v5 = v5 + v8;
    }

    while (v3 != v6);
  }

id NSString.init(stringLiteral:)(void *a1, uint64_t a2, char a3)
{
  unint64_t v3 = (unint64_t)a1;
  uint64_t v8 = *MEMORY[0x1895F89C0];
  if ((a3 & 1) == 0)
  {
    if (!a1)
    {
      __break(1u);
      goto LABEL_15;
    }

    if ((a3 & 2) != 0) {
      uint64_t v4 = 1LL;
    }
    else {
      uint64_t v4 = 4LL;
    }
    unint64_t v3 = (unint64_t)objc_msgSend( objc_allocWithZone((Class)NSString),  sel_initWithBytesNoCopy_length_encoding_freeWhenDone_,  a1,  a2,  v4,  0);
    if (v3) {
      goto LABEL_13;
    }
    __break(1u);
  }

  if (HIDWORD(v3))
  {
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }

  if (WORD1(v3) > 0x10u)
  {
LABEL_16:
    __break(1u);
LABEL_17:
    __break(1u);
  }

  int v7 = v3;
  id result = objc_msgSend( objc_allocWithZone((Class)NSString),  sel_initWithBytes_length_encoding_,  &v7,  4,  2348810496);
  if (result)
  {
    unint64_t v3 = (unint64_t)result;
LABEL_13:
    id v6 = objc_msgSend(objc_allocWithZone((Class)swift_getObjCClassFromMetadata()), sel_initWithString_, v3);

    return v6;
  }

  __break(1u);
  return result;
}

id protocol witness for ExpressibleByStringLiteral.init(stringLiteral:) in conformance NSString@<X0>( uint64_t a1@<X0>, void *a2@<X8>)
{
  id result = NSString.init(stringLiteral:)(*(void **)a1, *(void *)(a1 + 8), *(_BYTE *)(a1 + 16));
  *a2 = result;
  return result;
}

uint64_t NSString._toCustomAnyHashable()()
{
  return AnyHashable.init<A>(_:)();
}

id NSString.init(format:_:)(uint64_t a1)
{
  uint64_t v2 = getVaList(_:)();
  swift_bridgeObjectRelease();
  return objc_msgSend( objc_allocWithZone((Class)swift_getObjCClassFromMetadata()),  sel_initWithFormat_arguments_,  a1,  v2);
}

id NSString.init(format:locale:_:)(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  uint64_t v5 = getVaList(_:)();
  swift_bridgeObjectRelease();
  if (v3)
  {
    uint64_t ObjectType = swift_getObjectType();
    uint64_t v7 = (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 488))(ObjectType, v4);
    swift_unknownObjectRelease();
  }

  else
  {
    uint64_t v7 = 0LL;
  }

  id v8 = objc_msgSend( objc_allocWithZone((Class)swift_getObjCClassFromMetadata()),  sel_initWithFormat_locale_arguments_,  a1,  v7,  v5);
  swift_unknownObjectRelease();
  return v8;
}

uint64_t static NSString.localizedStringWithFormat(_:_:)()
{
  return v1;
}

id closure #1 in static NSString.localizedStringWithFormat(_:_:)@<X0>( uint64_t a1@<X0>, void *a2@<X1>, void *a3@<X8>)
{
  id v5 = static String._unconditionallyBridgeFromObjectiveC(_:)(a2);
  uint64_t v7 = v6;
  uint64_t v10[3] = &type metadata for Locale;
  if (one-time initialization token for cache != -1) {
    swift_once();
  }
  v10[0] = LocaleCache.current.getter();
  v10[1] = v8;
  id result = NSString.__allocating_init(format:locale:arguments:)((uint64_t)v5, v7, v10, a1);
  *a3 = result;
  return result;
}

id partial apply for closure #1 in static NSString.localizedStringWithFormat(_:_:)@<X0>( uint64_t a1@<X0>, void *a2@<X8>)
{
  return closure #1 in static NSString.localizedStringWithFormat(_:_:)(a1, *(void **)(v2 + 16), a2);
}

void specialized withVaList<A>(_:_:)(uint64_t a1, void *a2, void *a3)
{
  uint64_t v4 = (void *)swift_allocObject();
  uint64_t v4[2] = 8LL;
  v4[3] = 0LL;
  id v5 = v4 + 3;
  v4[4] = 0LL;
  v4[5] = 0LL;
  uint64_t v6 = *(void *)(a1 + 16);
  if (!v6)
  {
LABEL_25:
    uint64_t v25 = __VaListBuilder.va_list()();
    static String._unconditionallyBridgeFromObjectiveC(_:)(a3);
    id v26 = objc_allocWithZone((Class)&OBJC_CLASS___NSString);
    uint64_t v27 = String._bridgeToObjectiveCImpl()();
    swift_bridgeObjectRelease();
    id v28 = objc_msgSend(v26, sel_initWithFormat_arguments_, v27, v25);
    swift_unknownObjectRelease();
    objc_msgSend(a2, sel_appendString_, v28);

    swift_release();
    return;
  }

  uint64_t v7 = 0LL;
  uint64_t v8 = a1 + 32;
  while (1)
  {
    outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>( v8 + 40 * v7,  (uint64_t)v31);
    uint64_t v9 = v32;
    uint64_t v10 = v33;
    __swift_project_boxed_opaque_existential_1(v31, v32);
    uint64_t v11 = MEMORY[0x186E1CF6C](v9, v10);
    uint64_t v12 = *v5;
    uint64_t v13 = *(void *)(v11 + 16);
    BOOL v14 = __OFADD__(*v5, v13);
    uint64_t v15 = *v5 + v13;
    if (v14) {
      break;
    }
    uint64_t v16 = v11;
    uint64_t v17 = v4[4];
    if (v17 >= v15) {
      goto LABEL_18;
    }
    if (v17 + 0x4000000000000000LL < 0) {
      goto LABEL_28;
    }
    uint64_t v18 = (char *)v4[5];
    if (2 * v17 > v15) {
      uint64_t v15 = 2 * v17;
    }
    v4[4] = v15;
    uint64_t v19 = (char *)swift_slowAlloc();
    v4[5] = v19;
    if (v18)
    {
      if (v19 != v18 || v19 >= &v18[8 * v12]) {
        memmove(v19, v18, 8 * v12);
      }
      __VaListBuilder.deallocStorage(wordCount:storage:)();
LABEL_18:
      uint64_t v19 = (char *)v4[5];
    }

    if (!v19) {
      goto LABEL_30;
    }
    uint64_t v21 = *(void *)(v16 + 16);
    if (v21)
    {
      __n128 v22 = (uint64_t *)(v16 + 32);
      uint64_t v23 = *v5;
      while (1)
      {
        uint64_t v24 = *v22++;
        *(void *)&v19[8 * v23] = v24;
        uint64_t v23 = *v5 + 1;
        if (__OFADD__(*v5, 1LL)) {
          break;
        }
        uint64_t *v5 = v23;
        if (!--v21) {
          goto LABEL_3;
        }
      }

      __break(1u);
      break;
    }

{
  void *v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  id v26;
  uint64_t v27;
  id v28;
  id v29;
  void v32[3];
  uint64_t v33;
  uint64_t v34;
  type metadata accessor for __VaListBuilder();
  uint64_t v4 = (void *)swift_allocObject();
  uint64_t v4[2] = 8LL;
  v4[3] = 0LL;
  id v5 = v4 + 3;
  v4[4] = 0LL;
  v4[5] = 0LL;
  uint64_t v6 = *(void *)(a1 + 16);
  if (v6)
  {
    uint64_t v7 = 0LL;
    uint64_t v8 = a1 + 32;
    while (1)
    {
      outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>( v8 + 40 * v7,  (uint64_t)v32);
      uint64_t v9 = v33;
      uint64_t v10 = v34;
      __swift_project_boxed_opaque_existential_1(v32, v33);
      uint64_t v11 = MEMORY[0x186E1CF6C](v9, v10);
      uint64_t v12 = *v5;
      uint64_t v13 = *(void *)(v11 + 16);
      BOOL v14 = __OFADD__(*v5, v13);
      uint64_t v15 = *v5 + v13;
      if (v14)
      {
LABEL_28:
        __break(1u);
LABEL_29:
        __break(1u);
LABEL_30:
        __break(1u);
LABEL_31:
        __break(1u);
LABEL_32:
        __break(1u);
        return;
      }

      uint64_t v16 = v11;
      uint64_t v17 = v4[4];
      if (v17 >= v15) {
        goto LABEL_18;
      }
      if (v17 + 0x4000000000000000LL < 0) {
        goto LABEL_29;
      }
      uint64_t v18 = (char *)v4[5];
      if (2 * v17 > v15) {
        uint64_t v15 = 2 * v17;
      }
      v4[4] = v15;
      uint64_t v19 = (char *)swift_slowAlloc();
      v4[5] = v19;
      if (v18) {
        break;
      }
LABEL_19:
      if (!v19) {
        goto LABEL_31;
      }
      uint64_t v21 = *(void *)(v16 + 16);
      if (v21)
      {
        __n128 v22 = (uint64_t *)(v16 + 32);
        uint64_t v23 = *v5;
        while (1)
        {
          uint64_t v24 = *v22++;
          *(void *)&v19[8 * v23] = v24;
          uint64_t v23 = *v5 + 1;
          if (__OFADD__(*v5, 1LL)) {
            break;
          }
          uint64_t *v5 = v23;
          if (!--v21) {
            goto LABEL_3;
          }
        }

        __break(1u);
        goto LABEL_28;
      }

uint64_t NSString.appendingFormat(_:_:)(void *a1, uint64_t a2)
{
  id v5 = v2;
  id v6 = a1;
  specialized withVaList<A>(_:_:)(a2, v5, v6);
  uint64_t v8 = v7;

  return v8;
}

void NSMutableString.appendFormat(_:_:)(void *a1, uint64_t a2)
{
}

id NSString.init(string:)(uint64_t a1)
{
  return objc_msgSend(objc_allocWithZone((Class)swift_getObjCClassFromMetadata()), sel_initWithString_, a1);
}

id NSString.customPlaygroundQuickLook.getter@<X0>(uint64_t a1@<X8>)
{
  id result = static String._unconditionallyBridgeFromObjectiveC(_:)(v1);
  *(void *)a1 = result;
  *(void *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 32) = 0;
  return result;
}

id protocol witness for _CustomPlaygroundQuickLookable.customPlaygroundQuickLook.getter in conformance NSString@<X0>( uint64_t a1@<X8>)
{
  id result = static String._unconditionallyBridgeFromObjectiveC(_:)(*v1);
  *(void *)a1 = result;
  *(void *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 32) = 0;
  return result;
}

uint64_t base witness table accessor for ExpressibleByExtendedGraphemeClusterLiteral in NSString()
{
  return lazy protocol witness table accessor for type NSString and conformance NSString( &lazy protocol witness table cache variable for type NSString and conformance NSString,  (uint64_t)&protocol conformance descriptor for NSString);
}

uint64_t associated type witness table accessor for ExpressibleByStringLiteral.StringLiteralType : _ExpressibleByBuiltinStringLiteral in NSString()
{
  return MEMORY[0x189619278];
}

uint64_t base witness table accessor for ExpressibleByUnicodeScalarLiteral in NSString()
{
  return lazy protocol witness table accessor for type NSString and conformance NSString( &lazy protocol witness table cache variable for type NSString and conformance NSString,  (uint64_t)&protocol conformance descriptor for NSString);
}

uint64_t lazy protocol witness table accessor for type NSString and conformance NSString( unint64_t *a1, uint64_t a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    unint64_t v5 = type metadata accessor for NSString();
    uint64_t result = MEMORY[0x186E20D4C](a2, v5);
    atomic_store(result, a1);
  }

  return result;
}

uint64_t associated type witness table accessor for ExpressibleByExtendedGraphemeClusterLiteral.ExtendedGraphemeClusterLiteralType : _ExpressibleByBuiltinExtendedGraphemeClusterLiteral in NSString()
{
  return MEMORY[0x189619288];
}

uint64_t associated type witness table accessor for ExpressibleByUnicodeScalarLiteral.UnicodeScalarLiteralType : _ExpressibleByBuiltinUnicodeScalarLiteral in NSString()
{
  return MEMORY[0x189619280];
}

uint64_t Expression.evaluate(_:)@<X0>( uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v7 = a1;
  uint64_t v8 = *(void *)(a2 + 16);
  uint64_t v9 = 8 * v8;
  uint64_t v64 = v8;
  uint64_t v60 = a5;
  if (v8 == 1)
  {
    uint64_t v10 = (uint64_t *)(*(void *)(a2 + 24) & 0xFFFFFFFFFFFFFFFELL);
    uint64_t TupleTypeMetadata = type metadata accessor for PredicateExpressions.Variable(0LL, *v10, a3, a4);
    uint64_t v12 = *(void *)(TupleTypeMetadata - 8);
    MEMORY[0x1895F8858](TupleTypeMetadata);
    BOOL v14 = (char *)&v54 - v13;
    type metadata accessor for PredicateExpressions.Variable(255LL, *v10, v15, v16);
    uint64_t v17 = v12;
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    uint64_t v19 = TupleTypeMetadata2;
  }

  else
  {
    double v62 = (char **)v5;
    MEMORY[0x1895F8858](a1);
    unint64_t v22 = (v9 + 15) & 0xFFFFFFFFFFFFFFF0LL;
    if (v8)
    {
      uint64_t v23 = (uint64_t *)(*(void *)(a2 + 24) & 0xFFFFFFFFFFFFFFFELL);
      uint64_t v24 = (uint64_t *)((char *)&v54 - v22);
      uint64_t v25 = v64;
      do
      {
        uint64_t v26 = *v23++;
        *v24++ = type metadata accessor for PredicateExpressions.Variable(255LL, v26, v20, v21);
        --v25;
      }

      while (v25);
    }

    uint64_t v27 = v64;
    uint64_t TupleTypeMetadata = swift_getTupleTypeMetadata();
    uint64_t v61 = *(void *)(TupleTypeMetadata - 8);
    uint64_t v28 = MEMORY[0x1895F8858](TupleTypeMetadata);
    char v63 = (char *)&v54 - v29;
    BOOL v59 = &v54;
    MEMORY[0x1895F8858](v28);
    if (v27)
    {
      uint64_t v32 = (uint64_t *)(*(void *)(a2 + 24) & 0xFFFFFFFFFFFFFFFELL);
      uint64_t v33 = (uint64_t *)((char *)&v54 - v22);
      uint64_t v34 = v64;
      do
      {
        uint64_t v35 = *v32++;
        type metadata accessor for PredicateExpressions.Variable(255LL, v35, v30, v31);
        *v33++ = swift_getTupleTypeMetadata2();
        --v34;
      }

      while (v34);
    }

    uint64_t v8 = v64;
    TupleTypeMetadata2 = swift_getTupleTypeMetadata();
    uint64_t v19 = TupleTypeMetadata2;
    uint64_t v5 = (uint64_t)v62;
    BOOL v14 = v63;
    uint64_t v17 = v61;
  }

  BOOL v59 = &v54;
  MEMORY[0x1895F8858](TupleTypeMetadata2);
  char v63 = (char *)&v54 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>(v5, (uint64_t)v66);
  uint64_t v56 = v68;
  uint64_t v57 = v67;
  char v55 = __swift_project_boxed_opaque_existential_1(v66, v67);
  double v58 = &v54;
  MEMORY[0x1895F8858](v55);
  double v62 = (char **)((char *)&v54 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v37 = v5 + *(int *)(a2 + 44);
  uint64_t v38 = v14;
  (*(void (**)(char *, uint64_t, uint64_t))(v17 + 16))(v14, v37, TupleTypeMetadata);
  uint64_t v61 = *(void *)(a2 + 24);
  if (v8)
  {
    int v41 = v62;
    char v42 = (uint64_t *)(v61 & 0xFFFFFFFFFFFFFFFELL);
    uint64_t v43 = (int *)(TupleTypeMetadata + 32);
    unint64_t v44 = (int *)(v19 + 32);
    uint64_t v45 = v8;
    do
    {
      if (v8 == 1) {
        int v50 = 0;
      }
      else {
        int v50 = *v44;
      }
      uint64_t v51 = *v42;
      type metadata accessor for PredicateExpressions.Variable(255LL, *v42, v39, v40);
      uint64_t v52 = swift_getTupleTypeMetadata2();
      if (v64 == 1) {
        int v46 = 0;
      }
      else {
        int v46 = *v43;
      }
      int v47 = &v63[v50];
      uint64_t v48 = &v47[*(int *)(v52 + 48)];
      *(void *)int v47 = *(void *)&v38[v46];
      uint64_t v49 = *v7++;
      (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v51 - 8) + 16LL))(v48, v49, v51);
      *v41++ = v47;
      v43 += 4;
      v44 += 4;
      ++v42;
      --v45;
      uint64_t v8 = v64;
    }

    while (v45);
  }

  PredicateBindings.init<each A>(_:)((uint64_t)v62, v8, v61, v40, &v69);
  uint64_t v65 = v69;
  (*(void (**)(uint64_t *, uint64_t))(*(void *)(v56 + 8) + 16LL))(&v65, v57);
  swift_bridgeObjectRelease();
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v66);
}

uint64_t Expression.expression.getter@<X0>(uint64_t a1@<X8>)
{
  return outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>(v1, a1);
}

uint64_t Expression.variable.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, void **a4@<X8>)
{
  uint64_t v7 = *(void *)(a1 + 16);
  if (v7 == 1)
  {
    uint64_t TupleTypeMetadata = type metadata accessor for PredicateExpressions.Variable( 0LL,  *(void *)(*(void *)(a1 + 24) & 0xFFFFFFFFFFFFFELL),  a2,  a3);
    uint64_t v9 = TupleTypeMetadata;
  }

  else
  {
    MEMORY[0x1895F8858](a1);
    if (v7)
    {
      uint64_t v13 = (uint64_t *)(*(void *)(a1 + 24) & 0xFFFFFFFFFFFFFFFELL);
      BOOL v14 = (uint64_t *)((char *)&v26 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL));
      uint64_t v15 = v7;
      do
      {
        uint64_t v16 = *v13++;
        *v14++ = type metadata accessor for PredicateExpressions.Variable(255LL, v16, v10, v11);
        --v15;
      }

      while (v15);
    }

    uint64_t TupleTypeMetadata = swift_getTupleTypeMetadata();
    uint64_t v9 = TupleTypeMetadata;
  }

  __n128 v17 = MEMORY[0x1895F8858](TupleTypeMetadata);
  uint64_t v19 = (char *)&v26 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t, __n128))(v20 + 16))( v19,  v4 + *(int *)(a1 + 44),  v9,  v17);
  if (v7)
  {
    unint64_t v22 = (int *)(v9 + 32);
    uint64_t v23 = v7;
    do
    {
      if (v7 == 1) {
        int v24 = 0;
      }
      else {
        int v24 = *v22;
      }
      uint64_t v25 = *a4++;
      *uint64_t v25 = *(void *)&v19[v24];
      v22 += 4;
      --v23;
    }

    while (v23);
  }

  return result;
}

uint64_t Expression.init(_:)@<X0>( void (*a1)(__int128 *__return_ptr, char **)@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  void (*v42)(__int128 *__return_ptr, char **);
  __int128 v43[2];
  v41[3] = a2;
  char v42 = a1;
  uint64_t v10 = (uint64_t *)(a4 & 0xFFFFFFFFFFFFFFFELL);
  uint64_t v11 = 8 * a3;
  if (a3 == 1)
  {
    uint64_t TupleTypeMetadata = type metadata accessor for PredicateExpressions.Variable(0LL, *v10, 1LL, a4);
    uint64_t v13 = TupleTypeMetadata;
  }

  else
  {
    MEMORY[0x1895F8858](a1);
    if (a3)
    {
      uint64_t v16 = (void *)((char *)v41 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL));
      uint64_t v17 = a3;
      do
      {
        uint64_t v18 = *v10++;
        *v16++ = type metadata accessor for PredicateExpressions.Variable(255LL, v18, v14, v15);
        --v17;
      }

      while (v17);
    }

    uint64_t TupleTypeMetadata = swift_getTupleTypeMetadata();
    uint64_t v13 = TupleTypeMetadata;
  }

  uint64_t v19 = *(void *)(v13 - 8);
  MEMORY[0x1895F8858](TupleTypeMetadata);
  uint64_t v21 = (char *)v41 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v41[2] = v41;
  MEMORY[0x1895F8858](v22);
  int v24 = (char *)v41 - v23;
  v41[1] = v41;
  MEMORY[0x1895F8858](v25);
  uint64_t v27 = (char *)v41 - v26;
  if (a3)
  {
    if (one-time initialization token for nextID != -1) {
      swift_once();
    }
    uint64_t v28 = 0LL;
    do
    {
      if (a3 == 1) {
        int v29 = 0;
      }
      else {
        int v29 = *(_DWORD *)(v13 + 16 * v28 + 32);
      }
      do
        unint64_t v30 = __ldxr((unint64_t *)&static PredicateExpressions.VariableID.nextID);
      while (__stxr(v30 + 1, (unint64_t *)&static PredicateExpressions.VariableID.nextID));
      *(void *)&v27[v29] = v30;
      ++v28;
    }

    while (v28 != a3);
  }

  uint64_t v31 = a6 + *(int *)(type metadata accessor for Expression(0LL, a3, a4, a5) + 44);
  uint64_t v32 = (*(uint64_t (**)(uint64_t, char *, uint64_t))(v19 + 32))(v31, v27, v13);
  __n128 v33 = MEMORY[0x1895F8858](v32);
  uint64_t v34 = (char **)((char *)v41 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v19 + 16))(v21, v31, v13, v33);
  if (a3)
  {
    uint64_t v35 = (int *)(v13 + 32);
    uint64_t v36 = v34;
    uint64_t v37 = a3;
    do
    {
      if (a3 == 1)
      {
        LODWORD(v38) = 0;
        uint64_t v39 = v24;
      }

      else
      {
        uint64_t v38 = *v35;
        uint64_t v39 = &v24[v38];
      }

      *(void *)uint64_t v39 = *(void *)&v21[(int)v38];
      *v36++ = v39;
      v35 += 4;
      --v37;
    }

    while (v37);
  }

  v42(v43, v34);
  return outlined init with take of any PredicateExpression<Self.Output == B1>(v43, a6);
}

uint64_t type metadata accessor for Expression(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for Expression);
}

uint64_t type metadata completion function for Expression(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v18[0] = "(";
  uint64_t v5 = *(void *)(a1 + 16);
  if (v5 == 1)
  {
    uint64_t TupleTypeMetadata = type metadata accessor for PredicateExpressions.Variable( 319LL,  *(void *)(*(void *)(a1 + 24) & 0xFFFFFFFFFFFFFELL),  a3,  a4);
    if (v7 > 0x3F) {
      return TupleTypeMetadata;
    }
    uint64_t TupleTypeMetadata = swift_checkMetadataState();
    if (v8 > 0x3F) {
      return TupleTypeMetadata;
    }
LABEL_9:
    v18[1] = *(void *)(TupleTypeMetadata - 8) + 64LL;
    swift_initStructMetadata();
    return 0LL;
  }

  MEMORY[0x1895F8858](a1);
  if (v5)
  {
    uint64_t v12 = (uint64_t *)(*(void *)(a1 + 24) & 0xFFFFFFFFFFFFFFFELL);
    uint64_t v13 = (void *)((char *)v18 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL));
    uint64_t v14 = v5;
    do
    {
      uint64_t v15 = *v12++;
      *v13++ = type metadata accessor for PredicateExpressions.Variable(255LL, v15, v9, v10);
      --v14;
    }

    while (v14);
  }

  uint64_t TupleTypeMetadata = swift_getTupleTypeMetadata();
  if (v16 <= 0x3F) {
    goto LABEL_9;
  }
  return TupleTypeMetadata;
}

void *initializeBufferWithCopyOfBuffer for Expression(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = (void *)a1;
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80LL);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v16 = *a2;
    *uint64_t v4 = *a2;
    uint64_t v4 = (void *)(v16 + ((v5 + 16LL) & ~(unint64_t)v5));
    swift_retain();
  }

  else
  {
    __int128 v7 = *(_OWORD *)(a2 + 3);
    *(_OWORD *)(a1 + 24) = v7;
    uint64_t v8 = (**(uint64_t (***)(uint64_t, uint64_t *))(v7 - 8))(a1, a2);
    uint64_t v11 = *(int *)(a3 + 44);
    uint64_t v12 = (char *)v4 + v11;
    uint64_t v13 = (uint64_t)a2 + v11;
    uint64_t v14 = *(void *)(a3 + 16);
    if (v14 == 1)
    {
      uint64_t TupleTypeMetadata = type metadata accessor for PredicateExpressions.Variable( 0LL,  *(void *)(*(void *)(a3 + 24) & 0xFFFFFFFFFFFFFELL),  v9,  v10);
    }

    else
    {
      MEMORY[0x1895F8858](v8);
      if (v14)
      {
        uint64_t v20 = (uint64_t *)(*(void *)(a3 + 24) & 0xFFFFFFFFFFFFFFFELL);
        uint64_t v21 = (uint64_t *)((char *)&v25 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0LL));
        uint64_t v22 = v14;
        do
        {
          uint64_t v23 = *v20++;
          *v21++ = type metadata accessor for PredicateExpressions.Variable(255LL, v23, v17, v18);
          --v22;
        }

        while (v22);
      }

      uint64_t TupleTypeMetadata = swift_getTupleTypeMetadata();
    }

    (*(void (**)(char *, uint64_t))(*(void *)(TupleTypeMetadata - 8) + 16LL))(v12, v13);
  }

  return v4;
}

uint64_t initializeWithCopy for Expression(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v6 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 24) = v6;
  uint64_t v7 = (**(uint64_t (***)(void))(v6 - 8))();
  uint64_t v10 = *(int *)(a3 + 44);
  uint64_t v11 = *(void *)(a3 + 16);
  if (v11 == 1)
  {
    uint64_t TupleTypeMetadata = type metadata accessor for PredicateExpressions.Variable( 0LL,  *(void *)(*(void *)(a3 + 24) & 0xFFFFFFFFFFFFFELL),  v8,  v9);
  }

  else
  {
    MEMORY[0x1895F8858](v7);
    if (v11)
    {
      uint64_t v16 = (uint64_t *)(*(void *)(a3 + 24) & 0xFFFFFFFFFFFFFFFELL);
      uint64_t v17 = (uint64_t *)((char *)&v21 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL));
      uint64_t v18 = v11;
      do
      {
        uint64_t v19 = *v16++;
        *v17++ = type metadata accessor for PredicateExpressions.Variable(255LL, v19, v13, v14);
        --v18;
      }

      while (v18);
    }

    uint64_t TupleTypeMetadata = swift_getTupleTypeMetadata();
  }

  (*(void (**)(uint64_t, uint64_t))(*(void *)(TupleTypeMetadata - 8) + 16LL))(a1 + v10, a2 + v10);
  return a1;
}

uint64_t *assignWithCopy for Expression(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  __int128 v6 = __swift_assign_boxed_opaque_existential_1(a1, a2);
  uint64_t v9 = *(int *)(a3 + 44);
  uint64_t v10 = *(void *)(a3 + 16);
  if (v10 == 1)
  {
    uint64_t TupleTypeMetadata = type metadata accessor for PredicateExpressions.Variable( 0LL,  *(void *)(*(void *)(a3 + 24) & 0xFFFFFFFFFFFFFELL),  v7,  v8);
  }

  else
  {
    MEMORY[0x1895F8858](v6);
    if (v10)
    {
      uint64_t v15 = (uint64_t *)(*(void *)(a3 + 24) & 0xFFFFFFFFFFFFFFFELL);
      uint64_t v16 = (uint64_t *)((char *)&v20 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL));
      uint64_t v17 = v10;
      do
      {
        uint64_t v18 = *v15++;
        *v16++ = type metadata accessor for PredicateExpressions.Variable(255LL, v18, v12, v13);
        --v17;
      }

      while (v17);
    }

    uint64_t TupleTypeMetadata = swift_getTupleTypeMetadata();
  }

  (*(void (**)(char *, char *))(*(void *)(TupleTypeMetadata - 8) + 24LL))((char *)a1 + v9, (char *)a2 + v9);
  return a1;
}

uint64_t initializeWithTake for Expression(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  __int128 v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v6;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  uint64_t v7 = *(int *)(a3 + 44);
  uint64_t v8 = *(void *)(a3 + 16);
  if (v8 == 1)
  {
    uint64_t TupleTypeMetadata = type metadata accessor for PredicateExpressions.Variable( 0LL,  *(void *)(*(void *)(a3 + 24) & 0xFFFFFFFFFFFFFELL),  a3,  a4);
  }

  else
  {
    MEMORY[0x1895F8858](a1);
    if (v8)
    {
      uint64_t v13 = (uint64_t *)(*(void *)(v10 + 24) & 0xFFFFFFFFFFFFFFFELL);
      uint64_t v14 = (uint64_t *)((char *)&v18 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL));
      uint64_t v15 = v8;
      do
      {
        uint64_t v16 = *v13++;
        *v14++ = type metadata accessor for PredicateExpressions.Variable(255LL, v16, v10, v11);
        --v15;
      }

      while (v15);
    }

    uint64_t TupleTypeMetadata = swift_getTupleTypeMetadata();
  }

  (*(void (**)(uint64_t, uint64_t))(*(void *)(TupleTypeMetadata - 8) + 32LL))(a1 + v7, a2 + v7);
  return a1;
}

uint64_t assignWithTake for Expression(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = __swift_destroy_boxed_opaque_existential_1(a1);
  __int128 v9 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v9;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  uint64_t v10 = *(int *)(a3 + 44);
  uint64_t v11 = *(void *)(a3 + 16);
  if (v11 == 1)
  {
    uint64_t TupleTypeMetadata = type metadata accessor for PredicateExpressions.Variable( 0LL,  *(void *)(*(void *)(a3 + 24) & 0xFFFFFFFFFFFFFELL),  v7,  v8);
  }

  else
  {
    MEMORY[0x1895F8858](v6);
    if (v11)
    {
      uint64_t v16 = (uint64_t *)(*(void *)(a3 + 24) & 0xFFFFFFFFFFFFFFFELL);
      uint64_t v17 = (uint64_t *)((char *)&v21 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL));
      uint64_t v18 = v11;
      do
      {
        uint64_t v19 = *v16++;
        *v17++ = type metadata accessor for PredicateExpressions.Variable(255LL, v19, v13, v14);
        --v18;
      }

      while (v18);
    }

    uint64_t TupleTypeMetadata = swift_getTupleTypeMetadata();
  }

  (*(void (**)(uint64_t, uint64_t))(*(void *)(TupleTypeMetadata - 8) + 40LL))(a1 + v10, a2 + v10);
  return a1;
}

uint64_t getEnumTagSinglePayload for Expression()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_1831A63C0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    unint64_t v5 = *(void *)(a1 + 24);
    if (v5 >= 0xFFFFFFFF) {
      LODWORD(v5) = -1;
    }
    return (v5 + 1);
  }

  else
  {
    uint64_t v9 = *(void *)(a3 + 16);
    if (v9 == 1)
    {
      uint64_t TupleTypeMetadata = type metadata accessor for PredicateExpressions.Variable( 0LL,  *(void *)(*(void *)(a3 + 24) & 0xFFFFFFFFFFFFFELL),  a3,  a4);
    }

    else
    {
      MEMORY[0x1895F8858](a1);
      if (v9)
      {
        uint64_t v14 = (uint64_t *)(*(void *)(a3 + 24) & 0xFFFFFFFFFFFFFFFELL);
        uint64_t v15 = (uint64_t *)((char *)&v18 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL));
        uint64_t v16 = v9;
        do
        {
          uint64_t v17 = *v14++;
          *v15++ = type metadata accessor for PredicateExpressions.Variable(255LL, v17, v11, v12);
          --v16;
        }

        while (v16);
      }

      uint64_t TupleTypeMetadata = swift_getTupleTypeMetadata();
    }

    return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(TupleTypeMetadata - 8) + 48LL))( a1 + *(int *)(a3 + 44),  a2);
  }

uint64_t storeEnumTagSinglePayload for Expression()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_1831A64F0(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = result;
  if ((_DWORD)a3 == 0x7FFFFFFF)
  {
    *(void *)(result + 24) = (a2 - 1);
  }

  else
  {
    uint64_t v7 = *(void *)(a4 + 16);
    if (v7 == 1)
    {
      uint64_t TupleTypeMetadata = type metadata accessor for PredicateExpressions.Variable( 0LL,  *(void *)(*(void *)(a4 + 24) & 0xFFFFFFFFFFFFFELL),  a3,  a4);
    }

    else
    {
      MEMORY[0x1895F8858](result);
      if (v7)
      {
        uint64_t v12 = (uint64_t *)(*(void *)(a4 + 24) & 0xFFFFFFFFFFFFFFFELL);
        uint64_t v13 = (uint64_t *)((char *)&v16 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL));
        uint64_t v14 = v7;
        do
        {
          uint64_t v15 = *v12++;
          *v13++ = type metadata accessor for PredicateExpressions.Variable(255LL, v15, v9, v10);
          --v14;
        }

        while (v14);
      }

      uint64_t TupleTypeMetadata = swift_getTupleTypeMetadata();
    }

    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(TupleTypeMetadata - 8) + 56LL))( v5 + *(int *)(a4 + 44),  a2,  a2);
  }

  return result;
}

unint64_t specialized FixedWidthInteger.init(_:)(uint64_t a1, unint64_t a2)
{
  uint64_t v3 = HIBYTE(a2) & 0xF;
  uint64_t v4 = a1 & 0xFFFFFFFFFFFFLL;
  if ((a2 & 0x2000000000000000LL) != 0) {
    uint64_t v5 = v3;
  }
  else {
    uint64_t v5 = a1 & 0xFFFFFFFFFFFFLL;
  }
  if (!v5)
  {
    swift_bridgeObjectRelease();
    return 0LL;
  }

  if ((a2 & 0x1000000000000000LL) == 0)
  {
    if ((a2 & 0x2000000000000000LL) == 0)
    {
      if ((a1 & 0x1000000000000000LL) != 0) {
        uint64_t v6 = (unsigned __int8 *)((a2 & 0xFFFFFFFFFFFFFFFLL) + 32);
      }
      else {
        uint64_t v6 = (unsigned __int8 *)_StringObject.sharedUTF8.getter();
      }
      unint64_t v7 = (unint64_t)specialized closure #1 in FixedWidthInteger.init<A>(_:radix:)(v6, v4, 10LL);
      char v9 = v8 & 1;
      goto LABEL_37;
    }

    v23[0] = a1;
    v23[1] = a2 & 0xFFFFFFFFFFFFFFLL;
    if (a1 == 43)
    {
      if (v3)
      {
        if (v3 != 1)
        {
          if ((BYTE1(a1) - 48) <= 9u)
          {
            unint64_t v7 = (BYTE1(a1) - 48);
            uint64_t v14 = v3 - 2;
            if (v14)
            {
              uint64_t v15 = (unsigned __int8 *)v23 + 2;
              while (1)
              {
                unsigned int v16 = *v15 - 48;
                if (v16 > 9) {
                  goto LABEL_36;
                }
                if (!is_mul_ok(v7, 0xAuLL)) {
                  goto LABEL_36;
                }
                BOOL v13 = __CFADD__(10 * v7, v16);
                unint64_t v7 = 10 * v7 + v16;
                if (v13) {
                  goto LABEL_36;
                }
                ++v15;
                if (!--v14) {
                  goto LABEL_43;
                }
              }
            }

            goto LABEL_43;
          }

          goto LABEL_36;
        }

        goto LABEL_56;
      }
    }

    else
    {
      if (a1 != 45)
      {
        if (v3)
        {
          if ((a1 - 48) <= 9u)
          {
            unint64_t v7 = (a1 - 48);
            uint64_t v19 = v3 - 1;
            if (v19)
            {
              uint64_t v20 = (unsigned __int8 *)v23 + 1;
              while (1)
              {
                unsigned int v21 = *v20 - 48;
                if (v21 > 9) {
                  goto LABEL_36;
                }
                if (!is_mul_ok(v7, 0xAuLL)) {
                  goto LABEL_36;
                }
                BOOL v13 = __CFADD__(10 * v7, v21);
                unint64_t v7 = 10 * v7 + v21;
                if (v13) {
                  goto LABEL_36;
                }
                ++v20;
                if (!--v19) {
                  goto LABEL_43;
                }
              }
            }

            goto LABEL_43;
          }

{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned __int8 *v6;
  unsigned __int8 *v7;
  uint64_t v8;
  uint64_t v9;
  unsigned __int8 *v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  unsigned __int8 *v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  unsigned __int8 v19;
  unsigned __int8 *v20;
  unsigned int v21;
  uint64_t v22;
  void v24[2];
  char v25;
  uint64_t v3 = HIBYTE(a2) & 0xF;
  uint64_t v4 = a1 & 0xFFFFFFFFFFFFLL;
  if ((a2 & 0x2000000000000000LL) != 0) {
    uint64_t v5 = v3;
  }
  else {
    uint64_t v5 = a1 & 0xFFFFFFFFFFFFLL;
  }
  if (!v5)
  {
    swift_bridgeObjectRelease();
    goto LABEL_48;
  }

  if ((a2 & 0x1000000000000000LL) != 0)
  {
    char v8 = specialized _parseInteger<A, B>(ascii:radix:)(a1, a2, 10LL);
    swift_bridgeObjectRelease();
    if ((v8 & 0x100000000LL) == 0) {
      goto LABEL_39;
    }
LABEL_48:
    LODWORD(v8) = 0;
    uint64_t v19 = 1;
    return v8 | ((unint64_t)v19 << 32);
  }

  if ((a2 & 0x2000000000000000LL) != 0)
  {
    v24[0] = a1;
    v24[1] = a2 & 0xFFFFFFFFFFFFFFLL;
    if (a1 == 43)
    {
      if (v3)
      {
        if (v3 != 1)
        {
          LODWORD(v8) = (BYTE1(a1) - 48);
          if (v8 <= 9)
          {
            BOOL v13 = v3 - 2;
            if (v13)
            {
              uint64_t v14 = (unsigned __int8 *)v24 + 2;
              while (1)
              {
                uint64_t v15 = *v14 - 48;
                if (v15 > 9) {
                  goto LABEL_35;
                }
                unsigned int v16 = 10LL * v8;
                if ((v16 & 0xFFFFFFFF00000000LL) != 0) {
                  goto LABEL_35;
                }
                LODWORD(v8) = v16 + v15;
                ++v14;
                if (!--v13) {
                  goto LABEL_37;
                }
              }
            }

            goto LABEL_37;
          }

          goto LABEL_35;
        }

        goto LABEL_54;
      }
    }

    else
    {
      if (a1 != 45)
      {
        if (v3)
        {
          LODWORD(v8) = (a1 - 48);
          if (v8 <= 9)
          {
            char v17 = v3 - 1;
            if (v17)
            {
              uint64_t v20 = (unsigned __int8 *)v24 + 1;
              while (1)
              {
                unsigned int v21 = *v20 - 48;
                if (v21 > 9) {
                  goto LABEL_35;
                }
                char v22 = 10LL * v8;
                if ((v22 & 0xFFFFFFFF00000000LL) != 0) {
                  goto LABEL_35;
                }
                LODWORD(v8) = v22 + v21;
                ++v20;
                if (!--v17) {
                  goto LABEL_37;
                }
              }
            }

            goto LABEL_37;
          }

uint64_t specialized FixedWidthInteger.init(_:)(uint64_t a1, unint64_t a2)
{
  uint64_t v3 = HIBYTE(a2) & 0xF;
  uint64_t v4 = a1 & 0xFFFFFFFFFFFFLL;
  if ((a2 & 0x2000000000000000LL) != 0) {
    uint64_t v5 = v3;
  }
  else {
    uint64_t v5 = a1 & 0xFFFFFFFFFFFFLL;
  }
  if (!v5)
  {
    swift_bridgeObjectRelease();
    return 0LL;
  }

  if ((a2 & 0x1000000000000000LL) == 0)
  {
    if ((a2 & 0x2000000000000000LL) == 0)
    {
      if ((a1 & 0x1000000000000000LL) != 0) {
        uint64_t v6 = (unsigned __int8 *)((a2 & 0xFFFFFFFFFFFFFFFLL) + 32);
      }
      else {
        uint64_t v6 = (unsigned __int8 *)_StringObject.sharedUTF8.getter();
      }
      uint64_t v7 = (uint64_t)specialized closure #1 in FixedWidthInteger.init<A>(_:radix:)(v6, v4, 10LL);
      char v9 = v8 & 1;
      goto LABEL_35;
    }

    v25[0] = a1;
    v25[1] = a2 & 0xFFFFFFFFFFFFFFLL;
    if (a1 == 43)
    {
      if (v3)
      {
        if (v3 != 1)
        {
          if ((BYTE1(a1) - 48) <= 9u)
          {
            uint64_t v7 = (BYTE1(a1) - 48);
            uint64_t v14 = v3 - 2;
            if (v14)
            {
              uint64_t v15 = (unsigned __int8 *)v25 + 2;
              while (1)
              {
                unsigned int v16 = *v15 - 48;
                if (v16 > 9) {
                  goto LABEL_34;
                }
                uint64_t v17 = 10 * v7;
                uint64_t v7 = v17 + v16;
                ++v15;
                if (!--v14) {
                  goto LABEL_41;
                }
              }
            }

            goto LABEL_41;
          }

          goto LABEL_34;
        }

        goto LABEL_54;
      }
    }

    else
    {
      if (a1 != 45)
      {
        if (v3)
        {
          if ((a1 - 48) <= 9u)
          {
            uint64_t v7 = (a1 - 48);
            uint64_t v20 = v3 - 1;
            if (v20)
            {
              unsigned int v21 = (unsigned __int8 *)v25 + 1;
              while (1)
              {
                unsigned int v22 = *v21 - 48;
                if (v22 > 9) {
                  goto LABEL_34;
                }
                uint64_t v23 = 10 * v7;
                uint64_t v7 = v23 + v22;
                ++v21;
                if (!--v20) {
                  goto LABEL_41;
                }
              }
            }

            goto LABEL_41;
          }

{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned __int8 *v6;
  unsigned int v7;
  unsigned int v8;
  int v9;
  uint64_t v10;
  unsigned __int8 *v11;
  unsigned int v12;
  uint64_t v13;
  unsigned __int8 *v14;
  unsigned int v15;
  char v16;
  int v17;
  uint64_t v18;
  unsigned __int8 *v19;
  unsigned int v20;
  void v22[2];
  char v23;
  uint64_t v3 = HIBYTE(a2) & 0xF;
  uint64_t v4 = a1 & 0xFFFFFFFFFFFFLL;
  if ((a2 & 0x2000000000000000LL) != 0) {
    uint64_t v5 = v3;
  }
  else {
    uint64_t v5 = a1 & 0xFFFFFFFFFFFFLL;
  }
  if (!v5)
  {
    swift_bridgeObjectRelease();
    goto LABEL_49;
  }

  if ((a2 & 0x1000000000000000LL) != 0)
  {
    char v8 = specialized _parseInteger<A, B>(ascii:radix:)(a1, a2, 10LL);
    swift_bridgeObjectRelease();
    if ((v8 & 0x10000) == 0) {
      goto LABEL_38;
    }
LABEL_49:
    LOWORD(v8) = 0;
    uint64_t v17 = 1;
    return (unsigned __int16)v8 | (v17 << 16);
  }

  if ((a2 & 0x2000000000000000LL) == 0)
  {
    if ((a1 & 0x1000000000000000LL) != 0) {
      uint64_t v6 = (unsigned __int8 *)((a2 & 0xFFFFFFFFFFFFFFFLL) + 32);
    }
    else {
      uint64_t v6 = (unsigned __int8 *)_StringObject.sharedUTF8.getter();
    }
    uint64_t v7 = specialized closure #1 in FixedWidthInteger.init<A>(_:radix:)(v6, v4, 10LL);
    LOWORD(v8) = v7;
    char v9 = HIWORD(v7) & 1;
    goto LABEL_36;
  }

  v22[0] = a1;
  v22[1] = a2 & 0xFFFFFFFFFFFFFFLL;
  if (a1 == 43)
  {
    if (!v3)
    {
LABEL_53:
      __break(1u);
      goto LABEL_54;
    }

    if (v3 == 1) {
      goto LABEL_55;
    }
    char v8 = (BYTE1(a1) - 48);
    if (v8 > 9) {
      goto LABEL_35;
    }
    uint64_t v13 = v3 - 2;
    if (v13)
    {
      uint64_t v14 = (unsigned __int8 *)v22 + 2;
      do
      {
        uint64_t v15 = *v14 - 48;
        if (v15 > 9) {
          goto LABEL_35;
        }
        char v8 = (unsigned __int16)(10 * v8) + v15;
        if ((v8 & 0x10000) != 0) {
          goto LABEL_35;
        }
        ++v14;
      }

      while (--v13);
    }

uint64_t LocalePreferences.metricUnits.getter()
{
  return *v0;
}

uint64_t LocalePreferences.metricUnits.setter(uint64_t result)
{
  *uint64_t v1 = result;
  return result;
}

uint64_t LocalePreferences.languages.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t LocalePreferences.languages.setter(uint64_t a1)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v1 + 8) = a1;
  return result;
}

uint64_t (*LocalePreferences.languages.modify())()
{
  return destructiveProjectEnumData for PredicateCodableError;
}

uint64_t LocalePreferences.locale.getter()
{
  uint64_t v1 = *(void *)(v0 + 16);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t LocalePreferences.locale.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v2 + 16) = a1;
  *(void *)(v2 + 24) = a2;
  return result;
}

uint64_t LocalePreferences.collationOrder.getter()
{
  uint64_t v1 = *(void *)(v0 + 32);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t LocalePreferences.collationOrder.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v2 + 32) = a1;
  *(void *)(v2 + 40) = a2;
  return result;
}

uint64_t LocalePreferences.firstWeekday.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t LocalePreferences.firstWeekday.setter(uint64_t a1)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v1 + 48) = a1;
  return result;
}

uint64_t (*LocalePreferences.firstWeekday.modify())()
{
  return destructiveProjectEnumData for PredicateCodableError;
}

uint64_t LocalePreferences.minDaysInFirstWeek.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t LocalePreferences.minDaysInFirstWeek.setter(uint64_t a1)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v1 + 56) = a1;
  return result;
}

uint64_t (*LocalePreferences.minDaysInFirstWeek.modify())()
{
  return destructiveProjectEnumData for PredicateCodableError;
}

void LocalePreferences.ICUSymbolsAndStrings.hash(into:)()
{
  uint64_t v1 = *(void **)v0;
  if (*(void *)v0)
  {
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0LL);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef();
    id v2 = v1;
    _CFObject.hash(into:)();

    uint64_t v3 = *(void **)(v0 + 8);
    if (v3) {
      goto LABEL_3;
    }
  }

  else
  {
    Hasher._combine(_:)(0);
    uint64_t v3 = *(void **)(v0 + 8);
    if (v3)
    {
LABEL_3:
      Hasher._combine(_:)(1u);
      type metadata accessor for CFDictionaryRef(0LL);
      lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef();
      id v4 = v3;
      _CFObject.hash(into:)();

      uint64_t v5 = *(void **)(v0 + 16);
      if (v5) {
        goto LABEL_4;
      }
      goto LABEL_9;
    }
  }

  Hasher._combine(_:)(0);
  uint64_t v5 = *(void **)(v0 + 16);
  if (v5)
  {
LABEL_4:
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0LL);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef();
    id v6 = v5;
    _CFObject.hash(into:)();

    uint64_t v7 = *(void **)(v0 + 24);
    if (v7) {
      goto LABEL_5;
    }
LABEL_10:
    Hasher._combine(_:)(0);
    char v9 = *(void **)(v0 + 32);
    if (v9) {
      goto LABEL_6;
    }
    goto LABEL_11;
  }

Swift::Int LocalePreferences.ICUSymbolsAndStrings.hashValue.getter()
{
  uint64_t v1 = *(void **)v0;
  if (*(void *)v0)
  {
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0LL);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef();
    id v2 = v1;
    _CFObject.hash(into:)();

    uint64_t v3 = *(void **)(v0 + 8);
    if (v3) {
      goto LABEL_3;
    }
  }

  else
  {
    Hasher._combine(_:)(0);
    uint64_t v3 = *(void **)(v0 + 8);
    if (v3)
    {
LABEL_3:
      Hasher._combine(_:)(1u);
      type metadata accessor for CFDictionaryRef(0LL);
      lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef();
      id v4 = v3;
      _CFObject.hash(into:)();

      uint64_t v5 = *(void **)(v0 + 16);
      if (v5) {
        goto LABEL_4;
      }
      goto LABEL_9;
    }
  }

  Hasher._combine(_:)(0);
  uint64_t v5 = *(void **)(v0 + 16);
  if (v5)
  {
LABEL_4:
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0LL);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef();
    id v6 = v5;
    _CFObject.hash(into:)();

    uint64_t v7 = *(void **)(v0 + 24);
    if (v7) {
      goto LABEL_5;
    }
LABEL_10:
    Hasher._combine(_:)(0);
    char v9 = *(void **)(v0 + 32);
    if (v9) {
      goto LABEL_6;
    }
LABEL_11:
    Hasher._combine(_:)(0);
    return Hasher._finalize()();
  }

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance LocalePreferences.ICUSymbolsAndStrings()
{
  uint64_t v1 = *(void **)v0;
  id v2 = *(void **)(v0 + 8);
  id v4 = *(void **)(v0 + 16);
  uint64_t v3 = *(void **)(v0 + 24);
  uint64_t v5 = *(void **)(v0 + 32);
  Hasher.init(_seed:)();
  if (v1)
  {
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0LL);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef();
    id v6 = v1;
    _CFObject.hash(into:)();

    if (v2) {
      goto LABEL_3;
    }
  }

  else
  {
    Hasher._combine(_:)(0);
    if (v2)
    {
LABEL_3:
      Hasher._combine(_:)(1u);
      type metadata accessor for CFDictionaryRef(0LL);
      lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef();
      id v7 = v2;
      _CFObject.hash(into:)();

      if (v4) {
        goto LABEL_4;
      }
      goto LABEL_9;
    }
  }

  Hasher._combine(_:)(0);
  if (v4)
  {
LABEL_4:
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0LL);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef();
    id v8 = v4;
    _CFObject.hash(into:)();

    if (v3) {
      goto LABEL_5;
    }
LABEL_10:
    Hasher._combine(_:)(0);
    if (v5) {
      goto LABEL_6;
    }
LABEL_11:
    Hasher._combine(_:)(0);
    return Hasher._finalize()();
  }

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance LocalePreferences.ICUSymbolsAndStrings( uint64_t a1, uint64_t a2)
{
  __int128 v2 = *(_OWORD *)(a1 + 16);
  v5[0] = *(_OWORD *)a1;
  v5[1] = v2;
  uint64_t v6 = *(void *)(a1 + 32);
  __int128 v3 = *(_OWORD *)(a2 + 16);
  v7[0] = *(_OWORD *)a2;
  v7[1] = v3;
  uint64_t v8 = *(void *)(a2 + 32);
  return specialized static LocalePreferences.ICUSymbolsAndStrings.== infix(_:_:)((uint64_t)v5, (uint64_t)v7) & 1;
}

uint64_t LocalePreferences.dateFormats.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t LocalePreferences.dateFormats.setter(uint64_t a1)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v1 + 104) = a1;
  return result;
}

uint64_t (*LocalePreferences.dateFormats.modify())()
{
  return destructiveProjectEnumData for PredicateCodableError;
}

uint64_t LocalePreferences.numberSymbols.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t LocalePreferences.numberSymbols.setter(uint64_t a1)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v1 + 112) = a1;
  return result;
}

uint64_t (*LocalePreferences.numberSymbols.modify())()
{
  return destructiveProjectEnumData for PredicateCodableError;
}

uint64_t LocalePreferences.country.getter()
{
  uint64_t v1 = *(void *)(v0 + 120);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t LocalePreferences.country.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v2 + 120) = a1;
  *(void *)(v2 + 128) = a2;
  return result;
}

uint64_t (*LocalePreferences.country.modify())()
{
  return destructiveProjectEnumData for PredicateCodableError;
}

void LocalePreferences.measurementUnits.getter(_BYTE *a1@<X8>)
{
  *a1 = *(_BYTE *)(v1 + 136);
}

_BYTE *LocalePreferences.measurementUnits.setter(_BYTE *result)
{
  *(_BYTE *)(v1 + 136) = *result;
  return result;
}

uint64_t (*LocalePreferences.measurementUnits.modify())()
{
  return destructiveProjectEnumData for PredicateCodableError;
}

void LocalePreferences.temperatureUnit.getter(_BYTE *a1@<X8>)
{
  *a1 = *(_BYTE *)(v1 + 137);
}

_BYTE *LocalePreferences.temperatureUnit.setter(_BYTE *result)
{
  *(_BYTE *)(v1 + 137) = *result;
  return result;
}

uint64_t (*LocalePreferences.temperatureUnit.modify())()
{
  return destructiveProjectEnumData for PredicateCodableError;
}

uint64_t LocalePreferences.force24Hour.getter()
{
  return *(unsigned __int8 *)(v0 + 138);
}

uint64_t LocalePreferences.force24Hour.setter(uint64_t result)
{
  *(_BYTE *)(v1 + 138) = result;
  return result;
}

uint64_t (*LocalePreferences.force24Hour.modify())()
{
  return destructiveProjectEnumData for PredicateCodableError;
}

uint64_t LocalePreferences.force12Hour.getter()
{
  return *(unsigned __int8 *)(v0 + 139);
}

uint64_t LocalePreferences.force12Hour.setter(uint64_t result)
{
  *(_BYTE *)(v1 + 139) = result;
  return result;
}

uint64_t (*LocalePreferences.force12Hour.modify())()
{
  return destructiveProjectEnumData for PredicateCodableError;
}

double LocalePreferences.init()@<D0>(uint64_t a1@<X8>)
{
  *(_BYTE *)a1 = 2;
  double result = 0.0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_DWORD *)(a1 + 136) = 33686018;
  return result;
}

double LocalePreferences.init(metricUnits:languages:locale:collationOrder:firstWeekday:minDaysInFirstWeek:country:measurementUnits:temperatureUnit:force24Hour:force12Hour:numberSymbols:dateFormats:)@<D0>( char a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, char *a12, char *a13, __int16 a14, uint64_t a15, uint64_t a16)
{
  char v16 = *a12;
  char v17 = *a13;
  *(_BYTE *)a9 = a1;
  *(void *)(a9 + 8) = a2;
  *(void *)(a9 + 16) = a3;
  *(void *)(a9 + 24) = a4;
  *(void *)(a9 + 32) = a5;
  *(void *)(a9 + 40) = a6;
  *(void *)(a9 + 48) = a7;
  *(void *)(a9 + 56) = a8;
  double result = 0.0;
  *(_OWORD *)(a9 + 64) = 0u;
  *(_OWORD *)(a9 + 80) = 0u;
  *(void *)(a9 + 96) = 0LL;
  *(void *)(a9 + 104) = a16;
  *(void *)(a9 + 112) = a15;
  *(void *)(a9 + 120) = a10;
  *(void *)(a9 + 128) = a11;
  *(_BYTE *)(a9 + 136) = v16;
  *(_BYTE *)(a9 + 137) = v17;
  *(_WORD *)(a9 + 138) = a14;
  return result;
}

Swift::Void __swiftcall LocalePreferences.apply(_:)(CFDictionaryRef a1)
{
  uint64_t v2 = a1;
  v238[1] = *MEMORY[0x1895F89C0];
  BOOL v236 = 0;
  if (CFDictionaryGetCount(a1) < 1) {
    return;
  }
  __int128 v3 = __CFLocalePrefsCopyAppleLanguages(v2);
  if (v3)
  {
    id v4 = v3;
    -[__CFArray copy](v3, sel_copy);
    unint64_t v5 = _bridgeCocoaArray<A>(_:)();
    swift_unknownObjectRelease();
    uint64_t v6 = specialized _arrayConditionalCast<A, B>(_:)(v5);

    swift_bridgeObjectRelease();
    if (v6)
    {
      swift_bridgeObjectRelease();
      v1[1] = v6;
    }
  }

  id v7 = (void *)__CFLocalePrefsCopyAppleLocale(v2);
  if (v7)
  {
    uint64_t v8 = v7;
    id v9 = static String._unconditionallyBridgeFromObjectiveC(_:)(v7);
    uint64_t v11 = v10;

    swift_bridgeObjectRelease();
    v1[2] = v9;
    v1[3] = v11;
  }

  BOOL IsMetric = __CFLocalePrefsAppleMetricUnitsIsMetric(v2, &v236);
  if (v236) {
    *(_BYTE *)uint64_t v1 = IsMetric;
  }
  int IsCm = __CFLocalePrefsAppleMeasurementUnitsIsCm(v2, (char *)&v236);
  if (v236) {
    *((_BYTE *)v1 + 136) = IsCm == 0;
  }
  int IsC = __CFLocalePrefsAppleTemperatureUnitIsC(v2, (char *)&v236);
  if (v236) {
    *((_BYTE *)v1 + 137) = IsC != 0;
  }
  BOOL v15 = __CFLocalePrefsAppleForce24HourTime(v2, &v236);
  if (v236) {
    *((_BYTE *)v1 + 138) = v15;
  }
  BOOL v16 = __CFLocalePrefsAppleForce12HourTime(v2, &v236);
  if (v236) {
    *((_BYTE *)v1 + 139) = v16;
  }
  char v17 = (void *)__CFLocalePrefsCopyAppleCollationOrder(v2);
  if (v17)
  {
    char v18 = v17;
    id v19 = static String._unconditionallyBridgeFromObjectiveC(_:)(v17);
    uint64_t v21 = v20;

    swift_bridgeObjectRelease();
    v1[4] = v19;
    v1[5] = v21;
  }

  unsigned int v22 = (void *)__CFLocalePrefsCopyCountry(v2);
  if (v22)
  {
    uint64_t v23 = v22;
    id v24 = static String._unconditionallyBridgeFromObjectiveC(_:)(v22);
    uint64_t v26 = v25;

    swift_bridgeObjectRelease();
    v1[15] = v24;
    v1[16] = v26;
  }

  CFTypeRef v27 = __CFLocalePrefsCopyAppleICUDateTimeSymbols(v2);
  if (v27)
  {
    CFTypeRef v28 = v27;

    v1[8] = v28;
  }

  int v29 = (void *)__CFLocalePrefsCopyAppleICUDateFormatStrings(v2);
  unint64_t v234 = v1;
  uint64_t v235 = v2;
  if (v29)
  {
    unint64_t v30 = v29;
    uint64_t v31 = (void *)v1[9];
    id v32 = v29;

    v1[9] = v30;
    v238[0] = 0LL;
    id v33 = v32;
    specialized static Dictionary._conditionallyBridgeFromObjectiveC(_:result:)(v33, v238);

    uint64_t v34 = v238[0];
    if (v238[0])
    {
      Swift::String v225 = v33;
      int64_t v35 = 0LL;
      uint64_t v36 = v238[0] + 64LL;
      uint64_t v37 = 1LL << *(_BYTE *)(v238[0] + 32LL);
      if (v37 < 64) {
        uint64_t v38 = ~(-1LL << v37);
      }
      else {
        uint64_t v38 = -1LL;
      }
      unint64_t v39 = v38 & *(void *)(v238[0] + 64LL);
      int64_t v40 = (unint64_t)(v37 + 63) >> 6;
      int64_t v228 = v40;
      uint64_t v231 = MEMORY[0x18961AFF0];
      if (!v39) {
        goto LABEL_32;
      }
LABEL_29:
      unint64_t v41 = __clz(__rbit64(v39));
      v39 &= v39 - 1;
      for (unint64_t i = v41 | (v35 << 6); ; unint64_t i = __clz(__rbit64(v53)) + (v35 << 6))
      {
        uint64_t v43 = 16 * i;
        unint64_t v44 = (uint64_t *)(*(void *)(v34 + 48) + v43);
        uint64_t v45 = *v44;
        unint64_t v46 = v44[1];
        int v47 = (uint64_t *)(*(void *)(v34 + 56) + v43);
        uint64_t v48 = *v47;
        uint64_t v49 = v47[1];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        unint64_t v50 = specialized FixedWidthInteger.init(_:)(v45, v46);
        if ((v51 & 1) != 0)
        {
          swift_bridgeObjectRelease();
          if (v39) {
            goto LABEL_29;
          }
          goto LABEL_32;
        }

        unint64_t v55 = v50;
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        v238[0] = v231;
        unint64_t v58 = specialized __RawDictionaryStorage.find<A>(_:)(v55);
        uint64_t v59 = *(void *)(v231 + 16);
        BOOL v60 = (v57 & 1) == 0;
        uint64_t v61 = v59 + v60;
        if (__OFADD__(v59, v60)) {
          goto LABEL_279;
        }
        if (*(void *)(v231 + 24) >= v61)
        {
          if ((isUniquelyReferenced_nonNull_native & 1) != 0)
          {
            int64_t v40 = v228;
            uint64_t v63 = v231;
            if ((v57 & 1) != 0) {
              goto LABEL_53;
            }
          }

          else
          {
            unint64_t v217 = v58;
            char v219 = v57;
            __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<Date.FormatStyle.DateStyle, String>);
            uint64_t v67 = static _DictionaryStorage.copy(original:)();
            uint64_t v63 = v67;
            if (*(void *)(v231 + 16))
            {
              uint64_t v68 = (char *)(v67 + 64);
              __src = (char *)(v231 + 64);
              unint64_t v69 = (unint64_t)((1LL << *(_BYTE *)(v63 + 32)) + 63) >> 6;
              if (v63 != v231 || v68 >= &__src[8 * v69]) {
                memmove(v68, __src, 8 * v69);
              }
              uint64_t v70 = 0LL;
              *(void *)(v63 + 16) = *(void *)(v231 + 16);
              uint64_t v71 = 1LL << *(_BYTE *)(v231 + 32);
              if (v71 < 64) {
                uint64_t v72 = ~(-1LL << v71);
              }
              else {
                uint64_t v72 = -1LL;
              }
              unint64_t v73 = v72 & *(void *)(v231 + 64);
              uint64_t v221 = (void *)((unint64_t)(v71 + 63) >> 6);
              while (1)
              {
                if (v73)
                {
                  unint64_t v74 = __clz(__rbit64(v73));
                  v73 &= v73 - 1;
                  unint64_t v75 = v74 | (v70 << 6);
                }

                else
                {
                  uint64_t v83 = v70 + 1;
                  if (__OFADD__(v70, 1LL))
                  {
                    __break(1u);
LABEL_284:
                    __break(1u);
LABEL_285:
                    __break(1u);
                    goto LABEL_286;
                  }

                  unint64_t v84 = *(void *)&__src[8 * v83];
                  uint64_t v85 = v70 + 1;
                  if (!v84)
                  {
                    uint64_t v85 = v70 + 2;
                    unint64_t v84 = *(void *)&__src[8 * v85];
                    if (!v84)
                    {
                      uint64_t v85 = v70 + 3;
                      unint64_t v84 = *(void *)&__src[8 * v85];
                      if (!v84)
                      {
                        uint64_t v85 = v70 + 4;
                        unint64_t v84 = *(void *)&__src[8 * v85];
                        if (!v84)
                        {
                          uint64_t v85 = v70 + 5;
                          unint64_t v84 = *(void *)&__src[8 * v85];
                          if (!v84)
                          {
                            uint64_t v85 = v70 + 6;
                            unint64_t v84 = *(void *)&__src[8 * v85];
                            if (!v84)
                            {
                              uint64_t v85 = v70 + 7;
                              unint64_t v84 = *(void *)&__src[8 * v85];
                              if (!v84)
                              {
                                uint64_t v86 = v70 + 8;
                                unint64_t v84 = *(void *)&__src[8 * v86];
                                if (!v84)
                                {
                                  while (1)
                                  {
                                    uint64_t v85 = v86 + 1;
                                    if (__OFADD__(v86, 1LL)) {
                                      break;
                                    }
                                    unint64_t v84 = *(void *)&__src[8 * v85];
                                    ++v86;
                                    if (v84) {
                                      goto LABEL_86;
                                    }
                                  }

LABEL_286:
                                  __break(1u);
                                  goto LABEL_287;
                                }

                                uint64_t v85 = v70 + 8;
                              }
                            }
                          }
                        }
                      }
                    }
                  }

LABEL_276:
            __break(1u);
            goto LABEL_277;
          }

          int64_t v101 = v119;
        }
      }
    }

                      closedir((DIR *)v13);
                      goto LABEL_277;
                    }

                    uint64_t v192 = 0LL;
                    int64_t v193 = 0xE000000000000000LL;
                    _StringGuts.grow(_:)(22LL);
                    swift_bridgeObjectRelease();
                    uint64_t v192 = 0xD000000000000014LL;
                    int64_t v193 = 0x80000001839C9190LL;
                    v191[0] = 45;
                    v176._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
                    String.append(_:)(v176);
                    swift_bridgeObjectRelease();
                    while (1)
                    {
LABEL_286:
                      _assertionFailure(_:_:file:line:flags:)();
                      __break(1u);
LABEL_287:
                      id v198 = 0.0;
                      uint64_t v199 = 0xE000000000000000LL;
                      _StringGuts.grow(_:)(22LL);
                      swift_bridgeObjectRelease();
                      id v198 = *(double *)&v15;
                      uint64_t v199 = 0x80000001839C9190LL;
                      v196[0] = (_DWORD)v23;
                      v175._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
                      String.append(_:)(v175);
                      swift_bridgeObjectRelease();
                    }
                  }

                  if (MEMORY[0x186E1B0E8]() == 13)
                  {
LABEL_209:
                    closedir((DIR *)v13);
                    goto LABEL_234;
                  }
                }

                else
                {
                  uint64_t v13 = 0LL;
                }

                LODWORD(v23) = MEMORY[0x186E1B0E8]();
                int64_t v185 = 263LL;
                switch((int)v23)
                {
                  case 1:
                  case 13:
                    int v140 = 257LL;
                    goto LABEL_269;
                  case 2:
                    int v140 = 260LL;
                    goto LABEL_269;
                  case 3:
                  case 4:
                  case 5:
                  case 6:
                  case 7:
                  case 8:
                  case 9:
                  case 10:
                  case 11:
                  case 12:
                  case 14:
                  case 15:
                  case 16:
                  case 17:
                  case 18:
                  case 19:
                  case 20:
                  case 21:
                  case 22:
                  case 23:
                  case 24:
                  case 25:
                  case 26:
                    goto LABEL_263;
                  case 27:
                    goto LABEL_270;
                  default:
                    goto LABEL_242;
                }
              }
            }

            else
            {
              memset(&v189, 0, 32);
            }

            outlined destroy of Any?((uint64_t)&v189, &demangling cache variable for type metadata for Any?);
            goto LABEL_112;
          }
        }

        else
        {
          memset(&v189, 0, 32);
        }

        outlined destroy of Any?((uint64_t)&v189, &demangling cache variable for type metadata for Any?);
        goto LABEL_183;
      }

      swift_bridgeObjectRelease();
      char v121 = 0LL;
      goto LABEL_93;
    }

    unint64_t v118 = BYTE8(v744[0]);

    outlined consume of URL?(v675);
    LODWORD(v635) = v118 & 1;
    while (1)
    {
      v677 = v117;
      v676 = MEMORY[0x18961AFE8];
      swift_bridgeObjectRelease();
      v644 = (void *)v28;
      unint64_t v157 = v117[2];
      v1083[0] = v117[1];
      v1083[1] = v157;
      v1083[2] = v117[3];
      int64_t v158 = BigString.startIndex.getter();
      unint64_t v160 = v159;
      uint64_t v162 = v161;
      uint64_t v164 = v163;
      uint64_t v165 = v1083;
      Swift::String v166 = BigString.endIndex.getter();
      if (v166 >> 10 < v158 >> 10)
      {
        __break(1u);
LABEL_295:
        swift_once();
        goto LABEL_131;
      }

      uint64_t v165 = v826;
      v1075 = v158;
      v1076 = v160;
      v1077 = v162;
      v1078 = v164;
      v1079 = v166;
      v1080 = v167;
      v1081 = v168;
      v1082 = v169;
      int64_t v170 = swift_retain();
      AttributedString.Runs.init(_:in:)(v170, v816);
      v829 = v816[10];
      v830 = v816[11];
      v831 = v817;
      v826[6] = v816[6];
      v826[7] = v816[7];
      v828 = v816[9];
      v827 = v816[8];
      v826[2] = v816[2];
      v826[3] = v816[3];
      v826[5] = v816[5];
      v826[4] = v816[4];
      v826[1] = v816[1];
      v826[0] = v816[0];
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
      int64_t v158 = swift_allocObject();
      *(_OWORD *)(v158 + 16) = xmmword_183720D90;
      outlined retain of AttributedString.Runs((uint64_t)v826);
      if (one-time initialization token for name != -1) {
        goto LABEL_295;
      }
LABEL_131:
      char v171 = qword_18C5D2C38;
      v663 = (_OWORD *)(v97 + 16);
      *(void *)(v158 + 32) = static AttributeScopes.FoundationAttributes.MarkdownSourcePositionAttribute.name;
      *(void *)(v158 + 40) = v171;
      swift_bridgeObjectRetain();
      outlined release of AttributedString.Runs((uint64_t)v826);
      v658 = (const void *)*((void *)&v829 + 1);
      char v172 = *((void *)&v829 + 1) >> 10;
      v660 = (__int128 *)((char *)v743 + 8);
      v651 = (__int128 *)((char *)v744 + 8);
      unint64_t v173 = *(_OWORD *)((char *)v165 + 72);
      v653 = (__int128 *)((char *)&v710 + 8);
      uint64_t v174 = *(_OWORD *)((char *)v165 + 88);
      v612 = (char *)&v743[4] + 8;
      v613 = &v854;
      v822 = v173;
      v823 = v174;
      BOOL v175 = *(_OWORD *)((char *)v165 + 104);
      v610 = &v870;
      v611 = (char *)&v744[4] + 8;
      uint64_t v176 = *(_OWORD *)((char *)v165 + 120);
      v609 = (__int128 *)v726;
      v619 = &v692;
      v620 = v867;
      v824 = v175;
      v825 = v176;
      v618 = &v680;
      char v177 = *(_OWORD *)((char *)v165 + 8);
      v616 = &v895;
      uint64_t v178 = *(_OWORD *)((char *)v165 + 24);
      v614 = (__int128 *)&v898;
      v818 = v177;
      v819 = v178;
      uint64_t v179 = *(_OWORD *)((char *)v165 + 56);
      v820 = *(_OWORD *)((char *)v165 + 40);
      v821 = v179;
      v656 = *(const void **)&v826[0];
      v617 = 0x80000001839C8020LL;
      v670 = (_OWORD *)*((void *)&v830 + 1);
      v655 = v830;
      v669 = v831;
      v657 = (const void *)*((void *)&v827 + 1);
      char v180 = *((void *)&v827 + 1);
      v654 = v828;
      v673 = (uint64_t *)*((void *)&v828 + 1);
      v674 = (id)v828;
      v659 = (id)v829;
      v672 = (id)v829;
      v671 = (void *)v158;
      v652 = *((void *)&v829 + 1) >> 10;
      while (1)
      {
        while (1)
        {
          while (1)
          {
            while (1)
            {
              while (1)
              {
LABEL_136:
                if (v180 >> 10 == v172)
                {
                  _s10Foundation16AttributedStringV22MarkdownSourcePositionVSg_SnyAC5IndexVGtSgWOi0_((uint64_t)v744);
                  outlined init with take of LocalePreferences?( (uint64_t)v744,  (uint64_t)v814,  &demangling cache variable for type metadata for (AttributedString.MarkdownSourcePosition?, Range<AttributedString.Index>)?);
                }

                else
                {
                  uint64_t v181 = v822;
                  Swift::Int v182 = v823;
                  uint64_t v183 = v823;
                  v668 = v180 >> 10;
                  unint64_t v184 = v653;
                  v653[4] = v822;
                  v184[5] = v182;
                  int64_t v185 = v824;
                  uint64_t v186 = v825;
                  uint64_t v187 = v825;
                  v184[6] = v824;
                  v184[7] = v186;
                  unint64_t v188 = v818;
                  int64_t v189 = v819;
                  unint64_t v190 = v819;
                  *unint64_t v184 = v818;
                  v184[1] = v189;
                  unint64_t v191 = v820;
                  uint64_t v192 = v821;
                  int64_t v193 = v821;
                  v184[2] = v820;
                  v184[3] = v192;
                  int64_t v195 = v659;
                  unint64_t v194 = v660;
                  v660[4] = v181;
                  v194[5] = v183;
                  v194[6] = v185;
                  v194[7] = v187;
                  *unint64_t v194 = v188;
                  v194[1] = v190;
                  v194[2] = v191;
                  v194[3] = v193;
                  uint64_t v196 = v656;
                  id v197 = v657;
                  *(void *)&v743[0] = v656;
                  *((void *)&v743[8] + 1) = v657;
                  id v198 = v654;
                  v743[9] = v654;
                  v675 = (void *)v180;
                  int64_t v200 = *((void *)&v654 + 1);
                  uint64_t v199 = v655;
                  *(void *)&v743[10] = v195;
                  uint64_t v201 = v658;
                  *((void *)&v743[10] + 1) = v658;
                  *(void *)&v743[11] = v655;
                  *((void *)&v743[11] + 1) = v670;
                  *(void *)&v743[12] = v669;
                  v691 = (unint64_t)v675;
                  *(void *)&v692 = v674;
                  *((void *)&v692 + 1) = v673;
                  *(void *)&v693 = v672;
                  AttributedString.Runs.subscript.getter(&v691, &v725);
                  v667 = v725;
                  v666 = (id)v726[0];
                  v665 = v726[9];
                  uint64_t v202 = v823;
                  uint64_t v203 = v651;
                  v651[4] = v822;
                  v203[5] = v202;
                  unint64_t v204 = v825;
                  v203[6] = v824;
                  v203[7] = v204;
                  int64_t v205 = v819;
                  uint64_t *v203 = v818;
                  v203[1] = v205;
                  unint64_t v206 = v821;
                  v203[2] = v820;
                  v203[3] = v206;
                  *(void *)&v744[0] = v196;
                  *((void *)&v744[8] + 1) = v197;
                  *(void *)&v744[9] = v198;
                  *((void *)&v744[9] + 1) = v200;
                  *(void *)&v744[10] = v195;
                  *((void *)&v744[10] + 1) = v201;
                  *(void *)&v744[11] = v199;
                  *((void *)&v744[11] + 1) = v670;
                  *(void *)&v744[12] = v669;
                  *((void *)&v744[12] + 1) = v158;
                  unint64_t v207 = MEMORY[0x18961AFE8];
                  *(void *)&v744[13] = MEMORY[0x18961AFE8];
                  *(void *)&v710 = v196;
                  v715 = v197;
                  v716 = v198;
                  v717 = v200;
                  int64_t v208 = v675;
                  v718 = v195;
                  Swift::String v97 = (unint64_t)v672;
                  v719 = v201;
                  uint64_t v111 = v673;
                  unint64_t v209 = (uint64_t)v674;
                  v720 = v199;
                  v721 = v670;
                  v722 = v669;
                  v725 = v675;
                  v726[0] = v674;
                  v726[1] = v673;
                  v726[2] = v672;
                  outlined retain of ReversedCollection<AttributedString.Runs.AttributesSlice1<AttributeScopes.FoundationAttributes.InflectionRuleAttribute>>((uint64_t)v744);
                  swift_retain();
                  AttributedString.Runs._slicedRunBoundary(after:attributeNames:constraints:)( (unint64_t *)&v725,  (uint64_t)v671,  v207,  (uint64_t *)v743);
                  swift_release();
                  outlined release of ReversedCollection<AttributedString.Runs.AttributesSlice1<AttributeScopes.FoundationAttributes.InflectionRuleAttribute>>.Iterator((uint64_t)v744);
                  int64_t v210 = *(void *)&v743[0];
                  if (v668 > *(void *)&v743[0] >> 10)
                  {
                    __break(1u);
LABEL_282:
                    __break(1u);
LABEL_283:
                    __break(1u);
LABEL_284:
                    __break(1u);
LABEL_285:
                    __break(1u);
                    goto LABEL_286;
                  }

                  v668 = *((void *)&v743[0] + 1);
                  uint64_t v212 = (void *)*((void *)&v743[1] + 1);
                  id v211 = *(void **)&v743[1];
                  specialized AttributedString._AttributeStorage.subscript.getter((uint64_t)v667, (uint64_t)v814);
                  swift_release();
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  v814[14] = v208;
                  v814[15] = v209;
                  v814[16] = v111;
                  v814[17] = v97;
                  v814[18] = v210;
                  id v213 = v668;
                  v814[19] = v668;
                  v815 = __PAIR128__((unint64_t)v212, (unint64_t)v211);
                  destructiveProjectEnumData for PredicateCodableError(v814, v214);
                  char v180 = v210;
                  v674 = (id)v213;
                  v673 = v211;
                  v672 = v212;
                  int64_t v158 = (unint64_t)v671;
                  char v172 = v652;
                }

                outlined init with take of LocalePreferences?( (uint64_t)v814,  (uint64_t)v799,  &demangling cache variable for type metadata for (AttributedString.MarkdownSourcePosition?, Range<AttributedString.Index>)?);
                outlined init with take of LocalePreferences?( (uint64_t)v799,  (uint64_t)v800,  &demangling cache variable for type metadata for (AttributedString.MarkdownSourcePosition?, Range<AttributedString.Index>)?);
                if (_s10Foundation16AttributedStringV22MarkdownSourcePositionVSg_SnyAC5IndexVGtSgWOg((uint64_t)v800) == 1)
                {
                  *(__int128 *)((char *)&v744[4] + 8) = v822;
                  *(__int128 *)((char *)&v744[5] + 8) = v823;
                  *(__int128 *)((char *)&v744[6] + 8) = v824;
                  *(__int128 *)((char *)&v744[7] + 8) = v825;
                  *(__int128 *)((char *)v744 + 8) = v818;
                  *(__int128 *)((char *)&v744[1] + 8) = v819;
                  *(__int128 *)((char *)&v744[2] + 8) = v820;
                  *(__int128 *)((char *)&v744[3] + 8) = v821;
                  *(void *)&v744[0] = v656;
                  *((void *)&v744[8] + 1) = v657;
                  v744[9] = v654;
                  *(void *)&v744[10] = v659;
                  *((void *)&v744[10] + 1) = v658;
                  *(void *)&v744[11] = v655;
                  *((void *)&v744[11] + 1) = v670;
                  *(void *)&v744[12] = v669;
                  *((void *)&v744[12] + 1) = v158;
                  *(void *)&v744[13] = MEMORY[0x18961AFE8];
                  *((void *)&v744[13] + 1) = v180;
                  *(void *)&v744[14] = v674;
                  *((void *)&v744[14] + 1) = v673;
                  *(void *)&v744[15] = v672;
                  outlined release of ReversedCollection<AttributedString.Runs.AttributesSlice1<AttributeScopes.FoundationAttributes.InflectionRuleAttribute>>.Iterator((uint64_t)v744);
                  swift_bridgeObjectRelease();
                  memset(v743, 0, 105);
                  BYTE9(v743[6]) = 1;
                  specialized AttributedString.subscript.setter((uint64_t)v743);
                  goto LABEL_251;
                }

                if ((v805 & 1) == 0)
                {
                  v668 = v806;
                  Swift::String v215 = v807;
                  v667 = v808;
                  v666 = v809;
                  uint64_t v216 = v810;
                  unint64_t v217 = v811;
                  v665 = v812;
                  v649 = v813;
                  v1070[0] = v800[0];
                  v1070[1] = v800[1];
                  v1070[2] = v800[2];
                  v1070[3] = v800[3];
                  v1071 = v801 & 1;
                  v1072 = v802;
                  v1073 = v803;
                  v1074 = v804 & 1;
                  unint64_t v218 = (unint64_t)v661;
                  swift_bridgeObjectRetain();
                  char v219 = specialized Range<>.init<A>(_:in:)((uint64_t)v1070, (unint64_t)v664, v218);
                  if ((v221 & 1) == 0) {
                    break;
                  }
                }
              }

              id v222 = v219;
              uint64_t v223 = v220;
              v646 = v217;
              v642 = v215;
              v675 = (void *)v180;
              id v224 = v663[1];
              v1069[0] = *v663;
              v1069[1] = v224;
              v1069[2] = v663[2];
              Swift::String v225 = v219 >> 16;
              if ((v219 & 0xC) == 8) {
                break;
              }
              char v227 = BigString.Index.init(_utf8Offset:utf16TrailingSurrogate:)();
              uint64_t v229 = v228;
              uint64_t v231 = v230;
              v638 = v232;
              if ((unint64_t)BigString.endIndex.getter() >> 10 >= v227 >> 10)
              {
                v629 = v231;
                swift_retain();
                goto LABEL_152;
              }

                          __break(1u);
                          goto LABEL_277;
                        }

                        int v29 = (char *)v337._nsError._reserved;
                        code = v337._nsError._code;
                        if (v337._nsError._reserved < (void *)v337._nsError._code)
                        {
                          __int128 v241 = v337._nsError._code - (unint64_t)v337._nsError._reserved;
                          while (*v29 == 32)
                          {
                            ++v29;
                            if (!--v241)
                            {
                              int v29 = (char *)v337._nsError._code;
                              break;
                            }
                          }
                        }

                        v337._nsError._reserved = v29;
                      }

            __break(1u);
LABEL_277:
            __break(1u);
LABEL_278:
            __break(1u);
            goto LABEL_279;
          }

          if (v52 == 13) {
            break;
          }
          uint64_t v23 = v14 + 1;
          if (__OFADD__(v14, 1LL)) {
            goto LABEL_255;
          }
          ++v14;
          --v10;
          if (a3 + v14 >= v11) {
            goto LABEL_73;
          }
        }

        int64_t v54 = a3 + v14;
        uint64_t v23 = v184;
        if (!specialized static Comparable.<= infix(_:_:)(a3 + v14 + 1, a8)) {
          goto LABEL_69;
        }
LABEL_69:
        unint64_t v53 = __OFADD__(v13++, 1LL);
        if (v53) {
          goto LABEL_277;
        }
        a3 = v54 + 1;
LABEL_71:
        uint64_t v49 = v175;
      }

      while (a3 < v11);
      uint64_t v23 = 0LL;
LABEL_73:
      uint64_t v48 = v170;
LABEL_79:
      char v62 = v180;
LABEL_218:
      lazy protocol witness table accessor for type JSONError and conformance JSONError();
      swift_allocError();
      *(void *)unint64_t v138 = 0xD000000000000010LL;
      *(void *)(v138 + 8) = 0x80000001839CB4F0LL;
      *(void *)(v138 + 16) = v62;
      *(void *)(v138 + 24) = v13;
      *(void *)(v138 + 32) = v23;
      *(void *)(v138 + 40) = v48;
      *(_BYTE *)(v138 + 48) = 1;
      return (char *)swift_willThrow();
    case '.':
      if (v13 >= 1) {
        uint64_t v108 = 1LL;
      }
      else {
        uint64_t v108 = v13;
      }
      uint64_t v20 = v14 + v108;
      if (specialized Collection.isEmpty.getter(v14 + v108, v13 - v108))
      {
        uint64_t v109 = specialized static JSONError.SourceLocation.sourceLocation(at:fullSource:)(v20, a3, a4);
        uint64_t v111 = v110;
        Swift::String v113 = v112;
        lazy protocol witness table accessor for type JSONError and conformance JSONError();
        swift_allocError();
        *(void *)BOOL v60 = 0LL;
        *(void *)(v60 + 8) = 0LL;
        *(void *)(v60 + 16) = 46LL;
LABEL_244:
        *(void *)(v60 + 24) = v109;
        *(void *)(v60 + 32) = v111;
        *(void *)(v60 + 40) = v113;
        goto LABEL_245;
      }

      uint64_t v174 = (uint64_t (*)(unsigned __int8 *, uint64_t, uint64_t))a8;
      LOBYTE(v23) = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0LL, v20);
      Swift::String v142 = _asciiNumbers.getter();
      if (v23 >= v142
        && HIBYTE(v142) >= v23)
      {
        int64_t v170 = a7;
        unsigned int v22 = 0;
        uint64_t v23 = v14;
        goto LABEL_46;
      }

      goto LABEL_242;
    case 'I':
      double result = (char *)closure #1 in static JSON5Scanner.validateInfinity(from:fullSource:)( (const char *)v14,  v13,  v14,  v13,  a3,  a4);
      goto LABEL_140;
    case 'N':
      double result = (char *)specialized BufferView.withUnsafeRawPointer<A>(_:)((const char *)v14, v13, v14, v13, a3, a4);
LABEL_140:
      if (v9) {
        return result;
      }
      int64_t v170 = a7;
      uint64_t v174 = (uint64_t (*)(unsigned __int8 *, uint64_t, uint64_t))a8;
      unsigned int v22 = 1;
      goto LABEL_45;
    default:
      goto LABEL_286;
  }

            __break(1u);
LABEL_277:
            __break(1u);
LABEL_278:
            __break(1u);
            goto LABEL_279;
          }

          if (v57 == 13) {
            break;
          }
          uint64_t v21 = v14 + 1;
          if (__OFADD__(v14, 1LL)) {
            goto LABEL_255;
          }
          ++v14;
          --v10;
          if (a3 + v14 >= v11) {
            goto LABEL_74;
          }
        }

        uint64_t v21 = a3 + v14;
        unint64_t v55 = a8;
        if (!specialized static Comparable.<= infix(_:_:)(a3 + v14 + 1, v51)) {
          goto LABEL_70;
        }
LABEL_70:
        unint64_t v58 = __OFADD__(v13++, 1LL);
        if (v58) {
          goto LABEL_277;
        }
        a3 = v21 + 1;
LABEL_72:
        int64_t v54 = v187;
      }

      while (a3 < v11);
      uint64_t v21 = 0LL;
LABEL_74:
      int64_t v52 = v178;
LABEL_80:
      char v65 = v182;
LABEL_181:
      lazy protocol witness table accessor for type JSONError and conformance JSONError();
      swift_allocError();
      *(void *)uint64_t v115 = 0xD000000000000010LL;
      *(void *)(v115 + 8) = 0x80000001839CB4F0LL;
      *(void *)(v115 + 16) = v65;
      *(void *)(v115 + 24) = v13;
      *(void *)(v115 + 32) = v21;
      *(void *)(v115 + 40) = v52;
      *(_BYTE *)(v115 + 48) = 1;
      return swift_willThrow();
    case '.':
      if (v13 >= 1) {
        unint64_t v132 = 1LL;
      }
      else {
        unint64_t v132 = v13;
      }
      unint64_t v133 = v14 + v132;
      if (specialized Collection.isEmpty.getter(v14 + v132, v13 - v132))
      {
        uint64_t v134 = specialized static JSONError.SourceLocation.sourceLocation(at:fullSource:)(v133, a3, v11);
        unint64_t v136 = v135;
        unint64_t v138 = v137;
        lazy protocol witness table accessor for type JSONError and conformance JSONError();
        swift_allocError();
        *(void *)uint64_t v63 = 0LL;
        *(void *)(v63 + 8) = 0LL;
        *(void *)(v63 + 16) = 46LL;
LABEL_232:
        *(void *)(v63 + 24) = v134;
        *(void *)(v63 + 32) = v136;
        *(void *)(v63 + 40) = v138;
        goto LABEL_233;
      }

      char v177 = a7;
      LOBYTE(v142) = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0LL, v133);
      uint64_t v146 = _asciiNumbers.getter();
      if (v142 >= v146
        && HIBYTE(v146) >= v142)
      {
        goto LABEL_45;
      }

      uint64_t v134 = specialized static JSONError.SourceLocation.sourceLocation(at:fullSource:)(v133, a3, v11);
      unint64_t v136 = v147;
      unint64_t v138 = v148;
      Swift::String v142 = v142;
      lazy protocol witness table accessor for type JSONError and conformance JSONError();
      swift_allocError();
      *(void *)uint64_t v63 = 0xD000000000000013LL;
      *(void *)(v63 + 8) = 0x80000001839CB4D0LL;
      goto LABEL_231;
    case 'I':
      double result = closure #1 in static JSON5Scanner.validateInfinity(from:fullSource:)( (const char *)v14,  v13,  v14,  v13,  a3,  v11);
      goto LABEL_188;
    case 'N':
      double result = specialized BufferView.withUnsafeRawPointer<A>(_:)((const char *)v14, v13, v14, v13, a3, v11);
LABEL_188:
      if (v9) {
        return result;
      }
      char v177 = a7;
      uint64_t v20 = 1;
      goto LABEL_46;
    default:
      goto LABEL_286;
  }

            __break(1u);
LABEL_277:
            __break(1u);
LABEL_278:
            __break(1u);
            goto LABEL_279;
          }

          if (v57 == 13) {
            break;
          }
          uint64_t v21 = v14 + 1;
          if (__OFADD__(v14, 1LL)) {
            goto LABEL_255;
          }
          ++v14;
          --v10;
          if (a3 + v14 >= v11) {
            goto LABEL_74;
          }
        }

        uint64_t v21 = a3 + v14;
        unint64_t v55 = a8;
        if (!specialized static Comparable.<= infix(_:_:)(a3 + v14 + 1, v51)) {
          goto LABEL_70;
        }
LABEL_70:
        unint64_t v58 = __OFADD__(v13++, 1LL);
        if (v58) {
          goto LABEL_277;
        }
        a3 = v21 + 1;
LABEL_72:
        int64_t v54 = v187;
      }

      while (a3 < v11);
      uint64_t v21 = 0LL;
LABEL_74:
      int64_t v52 = v178;
LABEL_80:
      char v65 = v182;
LABEL_181:
      lazy protocol witness table accessor for type JSONError and conformance JSONError();
      swift_allocError();
      *(void *)uint64_t v115 = 0xD000000000000010LL;
      *(void *)(v115 + 8) = 0x80000001839CB4F0LL;
      *(void *)(v115 + 16) = v65;
      *(void *)(v115 + 24) = v13;
      *(void *)(v115 + 32) = v21;
      *(void *)(v115 + 40) = v52;
      *(_BYTE *)(v115 + 48) = 1;
      return swift_willThrow();
    case '.':
      if (v13 >= 1) {
        unint64_t v132 = 1LL;
      }
      else {
        unint64_t v132 = v13;
      }
      unint64_t v133 = v14 + v132;
      if (specialized Collection.isEmpty.getter(v14 + v132, v13 - v132))
      {
        uint64_t v134 = specialized static JSONError.SourceLocation.sourceLocation(at:fullSource:)(v133, a3, v11);
        unint64_t v136 = v135;
        unint64_t v138 = v137;
        lazy protocol witness table accessor for type JSONError and conformance JSONError();
        swift_allocError();
        *(void *)uint64_t v63 = 0LL;
        *(void *)(v63 + 8) = 0LL;
        *(void *)(v63 + 16) = 46LL;
LABEL_232:
        *(void *)(v63 + 24) = v134;
        *(void *)(v63 + 32) = v136;
        *(void *)(v63 + 40) = v138;
        goto LABEL_233;
      }

      char v177 = a7;
      LOBYTE(v142) = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0LL, v133);
      uint64_t v146 = _asciiNumbers.getter();
      if (v142 >= v146
        && HIBYTE(v146) >= v142)
      {
        goto LABEL_45;
      }

      uint64_t v134 = specialized static JSONError.SourceLocation.sourceLocation(at:fullSource:)(v133, a3, v11);
      unint64_t v136 = v147;
      unint64_t v138 = v148;
      Swift::String v142 = v142;
      lazy protocol witness table accessor for type JSONError and conformance JSONError();
      swift_allocError();
      *(void *)uint64_t v63 = 0xD000000000000013LL;
      *(void *)(v63 + 8) = 0x80000001839CB4D0LL;
      goto LABEL_231;
    case 'I':
      double result = closure #1 in static JSON5Scanner.validateInfinity(from:fullSource:)( (const char *)v14,  v13,  v14,  v13,  a3,  v11);
      goto LABEL_188;
    case 'N':
      double result = specialized BufferView.withUnsafeRawPointer<A>(_:)((const char *)v14, v13, v14, v13, a3, v11);
LABEL_188:
      if (v9) {
        return result;
      }
      char v177 = a7;
      uint64_t v20 = 1;
      goto LABEL_46;
    default:
      goto LABEL_286;
  }

            __break(1u);
LABEL_277:
            __break(1u);
LABEL_278:
            __break(1u);
            goto LABEL_279;
          }

          if (v57 == 13) {
            break;
          }
          uint64_t v21 = v14 + 1;
          if (__OFADD__(v14, 1LL)) {
            goto LABEL_255;
          }
          ++v14;
          --v10;
          if (a3 + v14 >= v11) {
            goto LABEL_74;
          }
        }

        uint64_t v21 = a3 + v14;
        unint64_t v55 = a8;
        if (!specialized static Comparable.<= infix(_:_:)(a3 + v14 + 1, v51)) {
          goto LABEL_70;
        }
LABEL_70:
        unint64_t v58 = __OFADD__(v13++, 1LL);
        if (v58) {
          goto LABEL_277;
        }
        a3 = v21 + 1;
LABEL_72:
        int64_t v54 = v187;
      }

      while (a3 < v11);
      uint64_t v21 = 0LL;
LABEL_74:
      int64_t v52 = v178;
LABEL_80:
      double v66 = v182;
LABEL_181:
      lazy protocol witness table accessor for type JSONError and conformance JSONError();
      swift_allocError();
      *(void *)int64_t v117 = 0xD000000000000010LL;
      *(void *)(v117 + 8) = 0x80000001839CB4F0LL;
      *(void *)(v117 + 16) = v66;
      *(void *)(v117 + 24) = v13;
      *(void *)(v117 + 32) = v21;
      *(void *)(v117 + 40) = v52;
      *(_BYTE *)(v117 + 48) = 1;
      return (char *)swift_willThrow();
    case '.':
      if (v13 >= 1) {
        uint64_t v134 = 1LL;
      }
      else {
        uint64_t v134 = v13;
      }
      uint64_t v135 = v14 + v134;
      if (specialized Collection.isEmpty.getter(v14 + v134, v13 - v134))
      {
        unint64_t v136 = specialized static JSONError.SourceLocation.sourceLocation(at:fullSource:)(v135, a3, v11);
        unint64_t v138 = v137;
        int v140 = v139;
        lazy protocol witness table accessor for type JSONError and conformance JSONError();
        swift_allocError();
        *(void *)uint64_t v64 = 0LL;
        *(void *)(v64 + 8) = 0LL;
        *(void *)(v64 + 16) = 46LL;
LABEL_232:
        *(void *)(v64 + 24) = v136;
        *(void *)(v64 + 32) = v138;
        *(void *)(v64 + 40) = v140;
        goto LABEL_233;
      }

      char v177 = a7;
      LOBYTE(v144) = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0LL, v135);
      int64_t v148 = _asciiNumbers.getter();
      if (v144 >= v148
        && HIBYTE(v148) >= v144)
      {
        goto LABEL_45;
      }

      unint64_t v136 = specialized static JSONError.SourceLocation.sourceLocation(at:fullSource:)(v135, a3, v11);
      unint64_t v138 = v149;
      int v140 = v150;
      uint64_t v144 = v144;
      lazy protocol witness table accessor for type JSONError and conformance JSONError();
      swift_allocError();
      *(void *)uint64_t v64 = 0xD000000000000013LL;
      *(void *)(v64 + 8) = 0x80000001839CB4D0LL;
      goto LABEL_231;
    case 'I':
      double result = (char *)closure #1 in static JSON5Scanner.validateInfinity(from:fullSource:)( (const char *)v14,  v13,  v14,  v13,  a3,  v11);
      goto LABEL_188;
    case 'N':
      double result = (char *)specialized BufferView.withUnsafeRawPointer<A>(_:)((const char *)v14, v13, v14, v13, a3, v11);
LABEL_188:
      if (v9) {
        return result;
      }
      char v177 = a7;
      uint64_t v20 = 1;
      goto LABEL_46;
    default:
      goto LABEL_286;
  }

                        __break(1u);
LABEL_277:
                        __break(1u);
LABEL_278:
                        __break(1u);
LABEL_279:
                        __break(1u);
                      }

                      __break(1u);
LABEL_281:
                      __break(1u);
                    }

                    uint64_t v13 = (char *)(v101 + 1);
                    if (__OFADD__(v101, 1LL)) {
                      goto LABEL_254;
                    }
                    ++v101;
                    --v100;
                    if (v99 + v101 >= v97) {
                      goto LABEL_239;
                    }
                  }

                  uint64_t v76 = __OFADD__(a5++, 1LL);
                  if (v76) {
                    goto LABEL_275;
                  }
                  v99 += v101 + 1;
LABEL_209:
                  ;
                }

                while (v99 < v97);
                uint64_t v13 = 0LL;
              }

            __break(1u);
LABEL_277:
            __break(1u);
LABEL_278:
            __break(1u);
            goto LABEL_279;
          }

          if (v53 == 13) {
            break;
          }
          id v24 = v15 + 1;
          if (__OFADD__(v15, 1LL)) {
            goto LABEL_255;
          }
          ++v15;
          --v11;
          if (a3 + v15 >= v12) {
            goto LABEL_73;
          }
        }

        unint64_t v55 = a3 + v15;
        id v24 = v183;
        if (!specialized static Comparable.<= infix(_:_:)(a3 + v15 + 1, a8)) {
          goto LABEL_69;
        }
LABEL_69:
        int64_t v54 = __OFADD__(v14++, 1LL);
        if (v54) {
          goto LABEL_277;
        }
        a3 = v55 + 1;
LABEL_71:
        unint64_t v50 = v174;
      }

      while (a3 < v12);
      id v24 = 0LL;
LABEL_73:
      uint64_t v49 = v169;
LABEL_79:
      char v62 = v179;
LABEL_218:
      lazy protocol witness table accessor for type JSONError and conformance JSONError();
      swift_allocError();
      *(void *)unint64_t v137 = 0xD000000000000010LL;
      *(void *)(v137 + 8) = 0x80000001839CB4F0LL;
      *(void *)(v137 + 16) = v62;
      *(void *)(v137 + 24) = v14;
      *(void *)(v137 + 32) = v24;
      *(void *)(v137 + 40) = v49;
      *(_BYTE *)(v137 + 48) = 1;
      return swift_willThrow();
    case '.':
      if (v14 >= 1) {
        uint64_t v108 = 1LL;
      }
      else {
        uint64_t v108 = v14;
      }
      uint64_t v21 = v15 + v108;
      if (specialized Collection.isEmpty.getter(v15 + v108, v14 - v108))
      {
        uint64_t v109 = specialized static JSONError.SourceLocation.sourceLocation(at:fullSource:)(v21, a3, a4);
        uint64_t v111 = v110;
        Swift::String v113 = v112;
        lazy protocol witness table accessor for type JSONError and conformance JSONError();
        swift_allocError();
        *(void *)BOOL v60 = 0LL;
        *(void *)(v60 + 8) = 0LL;
        *(void *)(v60 + 16) = 46LL;
LABEL_244:
        *(void *)(v60 + 24) = v109;
        *(void *)(v60 + 32) = v111;
        *(void *)(v60 + 40) = v113;
        goto LABEL_245;
      }

      unint64_t v173 = (uint64_t (*)(unsigned __int8 *, uint64_t, uint64_t))a8;
      LOBYTE(v24) = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0LL, v21);
      uint64_t v141 = _asciiNumbers.getter();
      if (v24 >= v141
        && HIBYTE(v141) >= v24)
      {
        unint64_t v169 = a7;
        uint64_t v23 = 0;
        id v24 = v15;
        goto LABEL_46;
      }

      goto LABEL_242;
    case 'I':
      double result = closure #1 in static JSON5Scanner.validateInfinity(from:fullSource:)( (const char *)v15,  v14,  v15,  v14,  a3,  a4);
      goto LABEL_140;
    case 'N':
      double result = specialized BufferView.withUnsafeRawPointer<A>(_:)((const char *)v15, v14, v15, v14, a3, a4);
LABEL_140:
      if (v10) {
        return result;
      }
      unint64_t v169 = a7;
      unint64_t v173 = (uint64_t (*)(unsigned __int8 *, uint64_t, uint64_t))a8;
      uint64_t v23 = 1;
      goto LABEL_45;
    default:
      goto LABEL_286;
  }

            __break(1u);
LABEL_277:
            __break(1u);
LABEL_278:
            __break(1u);
            goto LABEL_279;
          }

          if (v53 == 13) {
            break;
          }
          id v24 = v15 + 1;
          if (__OFADD__(v15, 1LL)) {
            goto LABEL_255;
          }
          ++v15;
          --v11;
          if (a3 + v15 >= v12) {
            goto LABEL_73;
          }
        }

        unint64_t v55 = a3 + v15;
        id v24 = v185;
        if (!specialized static Comparable.<= infix(_:_:)(a3 + v15 + 1, a8)) {
          goto LABEL_69;
        }
LABEL_69:
        int64_t v54 = __OFADD__(v14++, 1LL);
        if (v54) {
          goto LABEL_277;
        }
        a3 = v55 + 1;
LABEL_71:
        unint64_t v50 = v176;
      }

      while (a3 < v12);
      id v24 = 0LL;
LABEL_73:
      uint64_t v49 = v171;
LABEL_79:
      uint64_t v63 = v181;
LABEL_218:
      lazy protocol witness table accessor for type JSONError and conformance JSONError();
      swift_allocError();
      *(void *)uint64_t v139 = 0xD000000000000010LL;
      *(void *)(v139 + 8) = 0x80000001839CB4F0LL;
      *(void *)(v139 + 16) = v63;
      *(void *)(v139 + 24) = v14;
      *(void *)(v139 + 32) = v24;
      *(void *)(v139 + 40) = v49;
      *(_BYTE *)(v139 + 48) = 1;
      return swift_willThrow();
    case '.':
      if (v14 >= 1) {
        uint64_t v109 = 1LL;
      }
      else {
        uint64_t v109 = v14;
      }
      uint64_t v21 = v15 + v109;
      if (specialized Collection.isEmpty.getter(v15 + v109, v14 - v109))
      {
        id v110 = specialized static JSONError.SourceLocation.sourceLocation(at:fullSource:)(v21, a3, a4);
        unint64_t v112 = v111;
        uint64_t v114 = v113;
        lazy protocol witness table accessor for type JSONError and conformance JSONError();
        swift_allocError();
        *(void *)uint64_t v61 = 0LL;
        *(void *)(v61 + 8) = 0LL;
        *(void *)(v61 + 16) = 46LL;
LABEL_244:
        *(void *)(v61 + 24) = v110;
        *(void *)(v61 + 32) = v112;
        *(void *)(v61 + 40) = v114;
        goto LABEL_245;
      }

      BOOL v175 = (uint64_t (*)(unsigned __int8 *, uint64_t, uint64_t))a8;
      LOBYTE(v24) = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0LL, v21);
      uint64_t v143 = _asciiNumbers.getter();
      if (v24 >= v143
        && HIBYTE(v143) >= v24)
      {
        char v171 = a7;
        uint64_t v23 = 0;
        id v24 = v15;
        goto LABEL_46;
      }

      goto LABEL_242;
    case 'I':
      double result = closure #1 in static JSON5Scanner.validateInfinity(from:fullSource:)( (const char *)v15,  v14,  v15,  v14,  a3,  a4);
      goto LABEL_140;
    case 'N':
      double result = specialized BufferView.withUnsafeRawPointer<A>(_:)((const char *)v15, v14, v15, v14, a3, a4);
LABEL_140:
      if (v10) {
        return result;
      }
      char v171 = a7;
      BOOL v175 = (uint64_t (*)(unsigned __int8 *, uint64_t, uint64_t))a8;
      uint64_t v23 = 1;
      goto LABEL_45;
    default:
      goto LABEL_286;
  }

      unint64_t v123 = 0;
      char v121 = v163;
      goto LABEL_283;
    }

    int64_t v117 = preferredTermOfAddressForLanguageFromList((uint64_t)v112, v29);
    if (!v117 || (unint64_t v118 = (void *)(*(uint64_t (**)(void))(*(void *)(a1 + 104) + 16LL))()) == 0LL)
    {
      if (_NSInflectionLog_onceToken != -1) {
        dispatch_once(&_NSInflectionLog_onceToken, &__block_literal_global_13);
      }
      char v121 = v163;
      char v122 = (os_log_s *)_NSInflectionLog_log;
      if (os_log_type_enabled((os_log_t)_NSInflectionLog_log, OS_LOG_TYPE_DEBUG))
      {
        v267.location = a3;
        v267.length = v163;
        int64_t v148 = NSStringFromRange(v267);
        *(_DWORD *)buf = 138543618;
        *(void *)&buf[4] = v148;
        *(_WORD *)&buf[12] = 2114;
        *(void *)&buf[14] = v112;
        _os_log_debug_impl( &dword_182EB1000,  v122,  OS_LOG_TYPE_DEBUG,  "Could not find a term of address string in range %{public}@ that is compatible with language %{public}@.",  buf,  0x16u);
      }

      unint64_t v123 = 0;
      goto LABEL_283;
    }

    int64_t v119 = (*(uint64_t (**)(void))(*(void *)(a1 + 88) + 16LL))();
    if (v160)
    {
      unsigned int v120 = (void *)[v160 argument];
      if ((_NSIsNSString() & 1) == 0)
      {
        if (_NSIsNSAttributedString())
        {
          unsigned int v120 = (void *)[v120 string];
          goto LABEL_264;
        }

LABEL_288:
                                  __break(1u);
LABEL_289:
                                  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
                                  __break(1u);
LABEL_290:
                                  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
                                  __break(1u);
LABEL_291:
                                  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
                                  __break(1u);
                                  return;
                                }

                                int64_t v185 = v195;
                              }
                            }
                          }
                        }
                      }
                    }
                  }

      *(void *)&v189.f_bsize = 0LL;
      v189.f_blocks = 0xE000000000000000LL;
      _StringGuts.grow(_:)(22LL);
      swift_bridgeObjectRelease();
      *(void *)&v189.f_bsize = v15;
      v189.f_blocks = 0x80000001839C9190LL;
      LODWORD(v192) = (_DWORD)v23;
      goto LABEL_283;
    }

    swift_release();
    swift_release();
LABEL_25:
    Swift::Int v182 = 0LL;
    LODWORD(v23) = 1;
    if ((a7 & 1) != 0) {
      goto LABEL_33;
    }
    goto LABEL_26;
  }

  uint64_t v21 = swift_allocObject();
  *(void *)(v21 + 16) = v16;
  *(void *)(v21 + 24) = v13;
  char v18 = v187;
  *(void *)(v21 + 32) = a2;
  *(void *)(v21 + 40) = v187;
  *(_BYTE *)(v21 + 48) = v14;
  *(_BYTE *)(v21 + 49) = v15;
  if ((v15 & 1) == 0)
  {
    id v19 = a2;
    goto LABEL_8;
  }

  swift_bridgeObjectRetain();
  swift_retain();
  LODWORD(v23) = 0;
  Swift::Int v182 = closure #2 in closure #1 in _FileManagerImpl.setAttributes(_:ofItemAtPath:)partial apply;
  if ((a7 & 1) != 0) {
    goto LABEL_33;
  }
LABEL_26:
  uint64_t v31 = (char *)swift_allocObject();
  *((void *)v31 + 2) = v13;
  *((void *)v31 + 3) = a6;
  *((void *)v31 + 4) = a2;
  *((void *)v31 + 5) = v187;
  uint64_t v183 = v31;
  if (a6 >= 0x10000)
  {
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
LABEL_285:
    unint64_t v194 = 0LL;
    int64_t v195 = 0xE000000000000000LL;
    _StringGuts.grow(_:)(22LL);
    swift_bridgeObjectRelease();
    unint64_t v194 = 0xD000000000000014LL;
    int64_t v195 = 0x80000001839C9190LL;
    v191[0] = (_DWORD)v23;
    v174._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v174);
    swift_bridgeObjectRelease();
    goto LABEL_286;
  }

  swift_bridgeObjectRetain();
  if (((unsigned __int16)S_IWUSR.getter() & (unsigned __int16)a6) == 0)
  {
    uint64_t v178 = 0;
    uint64_t v34 = partial apply for closure #3 in closure #1 in _FileManagerImpl.setAttributes(_:ofItemAtPath:);
    goto LABEL_34;
  }

  swift_retain();
  if (chmod(v13, a6))
  {
    id v32 = MEMORY[0x186E1B0E8]();
    LODWORD(v23) = v32;
    id v33 = 4LL;
    uint64_t v13 = (char *)v182;
    switch(v32)
    {
      case 1:
      case 13:
        id v33 = 513LL;
        goto LABEL_154;
      case 2:
        goto LABEL_154;
      case 3:
      case 4:
      case 5:
      case 6:
      case 7:
      case 8:
      case 9:
      case 10:
      case 11:
      case 12:
      case 14:
      case 15:
      case 16:
      case 18:
      case 19:
      case 20:
      case 21:
      case 22:
      case 23:
      case 24:
      case 25:
      case 26:
      case 27:
      case 29:
      case 31:
      case 32:
      case 33:
      case 34:
      case 35:
      case 36:
      case 37:
      case 38:
      case 39:
      case 40:
      case 41:
      case 42:
      case 43:
      case 44:
      case 45:
      case 46:
      case 47:
      case 48:
      case 49:
      case 50:
      case 51:
      case 52:
      case 53:
      case 54:
      case 55:
      case 56:
      case 57:
      case 58:
      case 59:
      case 60:
      case 61:
      case 62:
      case 64:
      case 65:
      case 66:
      case 67:
      case 68:
        goto LABEL_150;
      case 17:
        id v33 = 516LL;
        goto LABEL_154;
      case 28:
      case 69:
        id v33 = 640LL;
        goto LABEL_154;
      case 30:
        id v33 = 642LL;
        goto LABEL_154;
      case 63:
        id v33 = 514LL;
        goto LABEL_154;
      default:
        uint64_t v13 = (char *)v182;
        if (v32 == 102)
        {
          uint64_t v72 = 0LL;
          id v33 = 512LL;
LABEL_159:
          swift_bridgeObjectRetain();
          specialized CocoaError.init<A>(_:path:underlying:variant:source:destination:)( (uint64_t (*)(void))v33,  a2,  v187,  v72,  0LL,  0LL,  0LL,  0LL,  &v189,  0LL,  0LL);
          swift_willThrow();
          swift_release_n();
          uint64_t v68 = (uint64_t)v13;
          goto LABEL_160;
        }

LABEL_235:
                  unint64_t v188 = (v194 - 1) & v194;
                  unint64_t v191 = __clz(__rbit64(v194)) + (v185 << 6);
                }

                uint64_t v192 = *(void *)(*(void *)(v159 + 56) + 8 * v191);
                *(_BYTE *)(*(void *)(v178 + 48) + v191) = *(_BYTE *)(*(void *)(v159 + 48) + v191);
                *(void *)(*(void *)(v178 + 56) + 8 * v191) = v192;
              }
            }

  __break(1u);
LABEL_236:
  __break(1u);
LABEL_237:
  __break(1u);
LABEL_238:
  __break(1u);
LABEL_239:
  __break(1u);
LABEL_240:
  __break(1u);
LABEL_241:
  lazy protocol witness table accessor for type URLComponents.InvalidComponentError and conformance URLComponents.InvalidComponentError();
  swift_allocError();
  *Swift::String v225 = 0;
  swift_willThrow();
  LODWORD(v232) = 0;
  uint64_t v231 = 714LL;
LABEL_243:
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

        swift_bridgeObjectRetain();
        outlined copy of PathOrURL(v32, v17, v84, 1);
        if (_foundation_swift_url_feature_enabled())
        {
          uint64_t v326 = v255;
          v340._uint64_t countAndFlagsBits = (uint64_t)v32;
          v340._unint64_t object = (void *)v17;
          uint64_t v341 = v84;
          swift_retain();
          unint64_t v268 = v32;
          swift_retain();
          uint64_t v269 = URL.path(percentEncoded:)(1);
          unint64_t v340 = v269;
          swift_bridgeObjectRetain();
          if (String.count.getter() > 1
            && (specialized BidirectionalCollection.last.getter(v269._countAndFlagsBits, (unint64_t)v269._object) & 0x1FF) == 0x2F)
          {
            specialized RangeReplaceableCollection<>.popLast()();
            swift_bridgeObjectRelease();
          }

          unint64_t object = v269._object;
          v337._uint64_t countAndFlagsBits = Set.init(minimumCapacity:)();
          uint64_t v270 = specialized Set._Variant.insert(_:)(&v336, 0x2FuLL);
          uint64_t countAndFlagsBits = v337._countAndFlagsBits;
          uint64_t v272 = v340._countAndFlagsBits;
          uint64_t v273 = v340._object;
          uint64_t v274 = ((unint64_t)v340._object >> 56) & 0xF;
          if (v274)
          {
            uint64_t v337 = v340;
            MEMORY[0x1895F8858](v270);
            __int128 v322 = (uint64_t)&v337;
            __int128 v323 = countAndFlagsBits;
            swift_bridgeObjectRetain();
            specialized String.UTF8View.withContiguousStorageIfAvailable<A>(_:)( (void *(*)(__int128 *__return_ptr, void *, uint64_t))closure #1 in StringProtocol.removingURLPercentEncoding(excluding:)specialized partial apply,  (uint64_t)&v321,  v272,  (unint64_t)v273);
            if (v275 == 1)
            {
              uint64_t v277 = (unint64_t)v337._object;
              uint64_t v276 = v337._countAndFlagsBits;
              swift_bridgeObjectRetain();
              specialized StringProtocol.removingURLPercentEncoding<A>(utf8Buffer:excluding:)( v276,  v277,  countAndFlagsBits);
              swift_bridgeObjectRelease();
            }

            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            id v32 = v333;
            __int128 v255 = v326;
          }

          else
          {
            swift_bridgeObjectRelease();
            __int128 v255 = v326;
          }

          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          outlined consume of PathOrURL(v32, v17, v84, 1);
          uint64_t v293 = v32;
          uint64_t v294 = v17;
        }

        else
        {
          __int128 v278 = objc_msgSend(v32, sel__parameterString);
          if (v278)
          {
            uint64_t v279 = v278;
            uint64_t v280 = static String._unconditionallyBridgeFromObjectiveC(_:)(v278);
            uint64_t v282 = v281;

            if (getEnumTag for _DarwinSearchPathsSequence.Iterator.State()
              && (unint64_t v283 = objc_msgSend(v32, sel_path)) != 0)
            {
              __int128 v284 = v283;
              __int128 v285 = static String._unconditionallyBridgeFromObjectiveC(_:)(v283);
              __int128 v287 = v286;

              v340._uint64_t countAndFlagsBits = (uint64_t)v285;
              v340._unint64_t object = v287;
              swift_bridgeObjectRetain();
              v288._uint64_t countAndFlagsBits = 59LL;
              v288._unint64_t object = (void *)0xE100000000000000LL;
              String.append(_:)(v288);
              unint64_t v84 = v332;
              swift_bridgeObjectRelease();
              swift_bridgeObjectRetain();
              v289._uint64_t countAndFlagsBits = (uint64_t)v280;
              v289._unint64_t object = v282;
              String.append(_:)(v289);
              swift_bridgeObjectRelease();
              id v32 = v333;
            }

            else
            {
              v340._uint64_t countAndFlagsBits = 59LL;
              v340._unint64_t object = (void *)0xE100000000000000LL;
              v290._uint64_t countAndFlagsBits = (uint64_t)v280;
              v290._unint64_t object = v282;
              String.append(_:)(v290);
            }

            swift_bridgeObjectRelease();
            outlined consume of PathOrURL(v32, v17, v84, 1);
            goto LABEL_266;
          }

          __int128 v291 = objc_msgSend(v32, sel_path);
          if (v291)
          {
            __int128 v292 = v291;
            static String._unconditionallyBridgeFromObjectiveC(_:)(v291);
          }

          uint64_t v293 = v32;
          uint64_t v294 = v17;
          unint64_t v84 = v332;
        }

        outlined consume of PathOrURL(v293, v294, v84, 1);
LABEL_266:
        uint64_t v305 = v17;
        uint64_t v306 = String._bridgeToObjectiveCImpl()();
        swift_bridgeObjectRelease();
        uint64_t v307 = v32;
        outlined consume of PathOrURL(v32, v305, v84, 1);
        if (v255)
        {
          v340._uint64_t countAndFlagsBits = (uint64_t)v255;
          lazy protocol witness table accessor for type POSIXError and conformance POSIXError();
          uint64_t v308 = v255;
          if (_getErrorEmbeddedNSError<A>(_:)())
          {
          }

          else
          {
            swift_allocError();
            *uint64_t v309 = v308;
          }

          BOOL v15 = _swift_stdlib_bridgeErrorToNSError();
          unint64_t v84 = v332;
        }

        else
        {
          BOOL v15 = 0LL;
        }

        if (v330)
        {
          __int128 v310 = (void *)String._bridgeToObjectiveCImpl()();
          swift_bridgeObjectRelease();
        }

        else
        {
          __int128 v310 = 0LL;
        }

         objc_msgSend( (id)objc_opt_self(),  sel__cocoaErrorWithCode_path_url_underlying_variant_source_destination_,  v327,  v306,  v307,  v15,  v310,  0,  0);
        swift_unknownObjectRelease();

        __int128 v311 = v32;
        __int128 v312 = (uint64_t)v331;
        goto LABEL_289;
      }

      if (v35 < -1)
      {
        __break(1u);
        goto LABEL_277;
      }

      BOOL v15 = v35 + 1;
      if (v35 < 1024) {
        break;
      }
      uint64_t isStackAllocationSafe = swift_stdlib_isStackAllocationSafe();
      if ((isStackAllocationSafe & 1) != 0) {
        break;
      }
      a4 = (char *)swift_slowAlloc();
      String._decomposed(_:into:nullTerminated:)(1, (uint64_t)a4, v15, 1, v31, v334);
      if ((v39 & 1) != 0)
      {
        static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSCocoaErrorDomain");
        unint64_t v74 = objc_allocWithZone((Class)&OBJC_CLASS___NSError);
        unint64_t v75 = String._bridgeToObjectiveCImpl()();
        swift_bridgeObjectRelease();
        uint64_t v76 = objc_msgSend(v74, sel_initWithDomain_code_userInfo_, v75, 514, _NativeDictionary.bridged()());
        swift_unknownObjectRelease();
        swift_unknownObjectRelease();
        uint64_t v77 = objc_msgSend(v76, sel_domain);
        uint64_t v78 = static String._unconditionallyBridgeFromObjectiveC(_:)(v77);
        uint64_t v80 = v79;

        if (v78 == static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSCocoaErrorDomain") && v80 == v81)
        {
          swift_bridgeObjectRelease_n();
          goto LABEL_290;
        }

        Swift::String v97 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if ((v97 & 1) != 0) {
          goto LABEL_290;
        }
        __break(1u);
        goto LABEL_72;
      }

      if (!mktemp(a4))
      {
        char v82 = MEMORY[0x186E1B0E8]();
        LODWORD(a6) = v82;
        uint64_t v83 = v82 - 1;
        if ((v17 & 1) != 0)
        {
          unint64_t v84 = v332;
          id v32 = v333;
          uint64_t v85 = 4LL;
          char v17 = (uint64_t)v331;
          switch(v82)
          {
            case 1:
            case 13:
              uint64_t v85 = 513LL;
              goto LABEL_229;
            case 2:
              goto LABEL_229;
            case 3:
            case 4:
            case 5:
            case 6:
            case 7:
            case 8:
            case 9:
            case 10:
            case 11:
            case 12:
            case 14:
            case 15:
            case 16:
            case 18:
            case 19:
            case 20:
            case 21:
            case 22:
            case 23:
            case 24:
            case 25:
            case 26:
            case 27:
            case 29:
            case 31:
            case 32:
            case 33:
            case 34:
            case 35:
            case 36:
            case 37:
            case 38:
            case 39:
            case 40:
            case 41:
            case 42:
            case 43:
            case 44:
            case 45:
            case 46:
            case 47:
            case 48:
            case 49:
            case 50:
            case 51:
            case 52:
            case 53:
            case 54:
            case 55:
            case 56:
            case 57:
            case 58:
            case 59:
            case 60:
            case 61:
            case 62:
            case 64:
            case 65:
            case 66:
            case 67:
            case 68:
              goto LABEL_222;
            case 17:
              uint64_t v85 = 516LL;
              goto LABEL_229;
            case 28:
            case 69:
              uint64_t v85 = 640LL;
              goto LABEL_229;
            case 30:
              uint64_t v85 = 642LL;
              goto LABEL_229;
            case 63:
              uint64_t v85 = 514LL;
              goto LABEL_229;
            default:
              char v17 = (uint64_t)v331;
              if (v82 != 102) {
                goto LABEL_222;
              }
              swift_retain_n();
              uint64_t v253 = v32;
              swift_retain_n();
              uint64_t v254 = v253;
              __int128 v255 = 0LL;
              unint64_t v327 = 512LL;
              break;
          }

          goto LABEL_235;
        }

                outlined destroy of Any?( (uint64_t)&v216,  &demangling cache variable for type metadata for AttributedString._AttributeValue?);
                *Swift::String v166 = 0LL;
                goto LABEL_236;
              }

                outlined destroy of Any?( (uint64_t)&v218,  &demangling cache variable for type metadata for AttributedString._AttributeValue?);
                uint64_t v155 = v168;
                *int64_t v168 = xmmword_183723F60;
                *((_BYTE *)v155 + 20) = 0;
                *((_DWORD *)v155 + 4) = 0;
                goto LABEL_236;
              }

                outlined destroy of Any?( (uint64_t)&v213,  &demangling cache variable for type metadata for AttributedString._AttributeValue?);
                unint64_t v137 = 1;
                goto LABEL_236;
              }

LABEL_278:
                  __break(1u);
LABEL_279:
                  __break(1u);
LABEL_280:
                  __break(1u);
LABEL_281:
                  __break(1u);
LABEL_282:
                  __break(1u);
                }

                int64_t v200 = v210;
              }
            }
          }

void LocalePreferences.apply(_:)(unsigned __int8 *a1)
{
  int v2 = *a1;
  uint64_t v3 = *((void *)a1 + 1);
  if (v2 != 2) {
    *(_BYTE *)uint64_t v1 = v2;
  }
  int v30 = a1[136];
  int v31 = a1[137];
  int v32 = a1[138];
  int v4 = a1[139];
  uint64_t v5 = *((void *)a1 + 3);
  uint64_t v6 = *((void *)a1 + 4);
  uint64_t v7 = *((void *)a1 + 5);
  uint64_t v9 = *((void *)a1 + 6);
  uint64_t v8 = *((void *)a1 + 7);
  uint64_t v10 = (void *)*((void *)a1 + 8);
  id v24 = (void *)*((void *)a1 + 9);
  uint64_t v25 = (void *)*((void *)a1 + 10);
  uint64_t v26 = (void *)*((void *)a1 + 11);
  CFTypeRef v27 = (void *)*((void *)a1 + 12);
  uint64_t v11 = *((void *)a1 + 14);
  uint64_t v22 = *((void *)a1 + 2);
  uint64_t v23 = *((void *)a1 + 15);
  uint64_t v28 = *((void *)a1 + 13);
  uint64_t v29 = *((void *)a1 + 16);
  if (v3)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(void *)(v1 + 8) = v3;
  }

  if (v5)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(void *)(v1 + 16) = v22;
    *(void *)(v1 + 24) = v5;
  }

  if (v7)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(void *)(v1 + 32) = v6;
    *(void *)(v1 + 40) = v7;
  }

  if (v9)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(void *)(v1 + 48) = v9;
  }

  if (v8)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(void *)(v1 + 56) = v8;
  }

  if (v11)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(void *)(v1 + 112) = v11;
  }

  if (v10)
  {
    unsigned int v12 = *(void **)(v1 + 64);
    id v13 = v10;

    *(void *)(v1 + 64) = v10;
  }

  if (v24)
  {
    uint64_t v14 = *(void **)(v1 + 72);
    id v15 = v24;

    *(void *)(v1 + 72) = v24;
  }

  if (v25)
  {
    BOOL v16 = *(void **)(v1 + 80);
    id v17 = v25;

    *(void *)(v1 + 80) = v25;
  }

  if (v26)
  {
    char v18 = *(void **)(v1 + 88);
    id v19 = v26;

    *(void *)(v1 + 88) = v26;
  }

  if (v27)
  {
    uint64_t v20 = *(void **)(v1 + 96);
    id v21 = v27;

    *(void *)(v1 + 96) = v27;
  }

  if (v28)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(void *)(v1 + 104) = v28;
  }

  if (v29)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(void *)(v1 + 120) = v23;
    *(void *)(v1 + 128) = v29;
  }

  if (v30 != 2) {
    *(_BYTE *)(v1 + 136) = v30;
  }
  if (v31 == 2)
  {
    if (v32 == 2) {
      goto LABEL_33;
    }
  }

  else
  {
    *(_BYTE *)(v1 + 137) = v31;
    if (v32 == 2)
    {
LABEL_33:
      if (v4 == 2) {
        return;
      }
      goto LABEL_34;
    }
  }

  *(_BYTE *)(v1 + 138) = v32;
  if (v4 == 2) {
    return;
  }
LABEL_34:
  *(_BYTE *)(v1 + 139) = v4;
}

uint64_t LocalePreferences.measurementSystem.getter@<X0>(uint64_t a1@<X8>)
{
  int v3 = *v1;
  int v4 = v1[136];
  if (v3 == 2)
  {
    if (v4 == 2 || (v4 & 1) != 0) {
      goto LABEL_10;
    }
  }

  else
  {
    if ((v3 & 1) == 0)
    {
      if (one-time initialization token for us != -1) {
        swift_once();
      }
      uint64_t v5 = &static Locale.MeasurementSystem.us;
      goto LABEL_18;
    }

    if (v4 == 2)
    {
LABEL_10:
      *(_OWORD *)a1 = 0u;
      *(_OWORD *)(a1 + 16) = 0u;
      return result;
    }

    if ((v4 & 1) != 0)
    {
      if (one-time initialization token for uk != -1) {
        swift_once();
      }
      uint64_t v5 = &static Locale.MeasurementSystem.uk;
      goto LABEL_18;
    }
  }

  if (one-time initialization token for metric != -1) {
    swift_once();
  }
  uint64_t v5 = &static Locale.MeasurementSystem.metric;
LABEL_18:
  uint64_t v6 = v5[1];
  uint64_t v7 = v5[2];
  uint64_t v8 = v5[3];
  *(void *)a1 = *v5;
  *(void *)(a1 + 8) = v6;
  *(void *)(a1 + 16) = v7;
  *(void *)(a1 + 24) = v8;
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRetain();
}

void LocalePreferences.hourCycle.getter(char *a1@<X8>)
{
  if ((*(_BYTE *)(v1 + 139) & 1) != 0) {
    char v2 = 1;
  }
  else {
    char v2 = 4;
  }
  if ((*(_BYTE *)(v1 + 138) & 1) != 0) {
    char v3 = 2;
  }
  else {
    char v3 = v2;
  }
  *a1 = v3;
}

void LocalePreferences.hash(into:)(uint64_t a1)
{
  int v3 = *v1;
  uint64_t v4 = *((void *)v1 + 1);
  uint64_t v5 = *((void *)v1 + 3);
  uint64_t v7 = *((void *)v1 + 5);
  uint64_t v6 = *((void *)v1 + 6);
  uint64_t v8 = *((void *)v1 + 7);
  int64_t v35 = (void *)*((void *)v1 + 8);
  uint64_t v36 = (void *)*((void *)v1 + 9);
  uint64_t v9 = (void *)*((void *)v1 + 12);
  uint64_t v37 = (void *)*((void *)v1 + 10);
  uint64_t v38 = (void *)*((void *)v1 + 11);
  uint64_t v39 = *((void *)v1 + 13);
  uint64_t v40 = *((void *)v1 + 14);
  uint64_t v41 = *((void *)v1 + 16);
  int v43 = v1[139];
  int v33 = v1[138];
  int v32 = v1[137];
  int v42 = v1[136];
  if (v3 == 2)
  {
    Swift::UInt8 v10 = 0;
  }

  else
  {
    Swift::UInt8 v10 = v3 & 1;
    Hasher._combine(_:)(1u);
  }

  uint64_t v34 = v9;
  Hasher._combine(_:)(v10);
  if (v4)
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(*(void *)(v4 + 16));
    uint64_t v11 = *(void *)(v4 + 16);
    if (v11)
    {
      swift_bridgeObjectRetain();
      uint64_t v12 = v4 + 40;
      do
      {
        swift_bridgeObjectRetain();
        String.hash(into:)();
        swift_bridgeObjectRelease();
        v12 += 16LL;
        --v11;
      }

      while (v11);
      swift_bridgeObjectRelease();
    }

    if (v5) {
      goto LABEL_10;
    }
  }

  else
  {
    Hasher._combine(_:)(0);
    if (v5)
    {
LABEL_10:
      Hasher._combine(_:)(1u);
      swift_bridgeObjectRetain();
      String.hash(into:)();
      swift_bridgeObjectRelease();
      goto LABEL_13;
    }
  }

  Hasher._combine(_:)(0);
LABEL_13:
  if (v7)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    id v13 = v35;
    if (v6) {
      goto LABEL_15;
    }
  }

  else
  {
    Hasher._combine(_:)(0);
    id v13 = v35;
    if (v6)
    {
LABEL_15:
      Hasher._combine(_:)(1u);
      swift_bridgeObjectRetain();
      specialized Dictionary<>.hash(into:)(a1, v6);
      swift_bridgeObjectRelease();
      uint64_t v14 = v36;
      if (v8) {
        goto LABEL_16;
      }
      goto LABEL_24;
    }
  }

  Hasher._combine(_:)(0);
  uint64_t v14 = v36;
  if (v8)
  {
LABEL_16:
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    specialized Dictionary<>.hash(into:)(a1, v8);
    swift_bridgeObjectRelease();
    BOOL v16 = v37;
    id v15 = v38;
    if (v13) {
      goto LABEL_17;
    }
    goto LABEL_25;
  }

Swift::Int LocalePreferences.hashValue.getter()
{
  int v1 = *v0;
  uint64_t v2 = *((void *)v0 + 1);
  uint64_t v3 = *((void *)v0 + 3);
  uint64_t v5 = *((void *)v0 + 5);
  uint64_t v4 = *((void *)v0 + 6);
  uint64_t v6 = *((void *)v0 + 7);
  uint64_t v7 = (void *)*((void *)v0 + 9);
  uint64_t v41 = (void *)*((void *)v0 + 8);
  int v42 = (void *)*((void *)v0 + 10);
  int v47 = (void *)*((void *)v0 + 11);
  uint64_t v48 = (void *)*((void *)v0 + 12);
  uint64_t v43 = *((void *)v0 + 13);
  uint64_t v44 = *((void *)v0 + 14);
  uint64_t v45 = *((void *)v0 + 16);
  int v46 = v0[136];
  int v39 = v0[137];
  int v40 = v0[138];
  int v8 = v0[139];
  Hasher.init(_seed:)();
  if (v1 == 2)
  {
    Swift::UInt8 v9 = 0;
  }

  else
  {
    Swift::UInt8 v9 = v1 & 1;
    Hasher._combine(_:)(1u);
  }

  Hasher._combine(_:)(v9);
  if (v2)
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(*(void *)(v2 + 16));
    uint64_t v10 = *(void *)(v2 + 16);
    if (v10)
    {
      int v38 = v8;
      swift_bridgeObjectRetain();
      uint64_t v11 = v2 + 40;
      do
      {
        swift_bridgeObjectRetain();
        String.hash(into:)();
        swift_bridgeObjectRelease();
        v11 += 16LL;
        --v10;
      }

      while (v10);
      swift_bridgeObjectRelease();
      int v8 = v38;
    }

    if (v3) {
      goto LABEL_10;
    }
  }

  else
  {
    Hasher._combine(_:)(0);
    if (v3)
    {
LABEL_10:
      Hasher._combine(_:)(1u);
      swift_bridgeObjectRetain();
      String.hash(into:)();
      swift_bridgeObjectRelease();
      goto LABEL_13;
    }
  }

  Hasher._combine(_:)(0);
LABEL_13:
  uint64_t v12 = v7;
  id v13 = v41;
  if (v5)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
  }

  else
  {
    Hasher._combine(_:)(0);
  }

  uint64_t v14 = v42;
  if (v4)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    specialized Dictionary<>.hash(into:)((uint64_t)v49, v4);
    swift_bridgeObjectRelease();
  }

  else
  {
    Hasher._combine(_:)(0);
  }

  id v15 = v47;
  if (v6)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    specialized Dictionary<>.hash(into:)((uint64_t)v49, v6);
    swift_bridgeObjectRelease();
  }

  else
  {
    Hasher._combine(_:)(0);
  }

  uint64_t v17 = v43;
  uint64_t v16 = v44;
  if (v41)
  {
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0LL);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef();
    id v18 = v7;
    id v19 = v42;
    id v20 = v47;
    id v21 = v48;
    id v22 = v41;
    _CFObject.hash(into:)();
    if (v7) {
      goto LABEL_24;
    }
  }

  else
  {
    Hasher._combine(_:)(0);
    id v31 = v48;
    id v32 = v7;
    id v33 = v42;
    id v34 = v47;
    if (v7)
    {
LABEL_24:
      Hasher._combine(_:)(1u);
      type metadata accessor for CFDictionaryRef(0LL);
      lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef();
      id v23 = v7;
      _CFObject.hash(into:)();

      if (v42) {
        goto LABEL_25;
      }
      goto LABEL_30;
    }
  }

  Hasher._combine(_:)(0);
  if (v42)
  {
LABEL_25:
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0LL);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef();
    id v24 = v42;
    _CFObject.hash(into:)();

    if (v47) {
      goto LABEL_26;
    }
LABEL_31:
    Hasher._combine(_:)(0);
    id v26 = v48;
    if (v48) {
      goto LABEL_27;
    }
    goto LABEL_32;
  }

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance LocalePreferences()
{
  int v1 = *v0;
  uint64_t v2 = *((void *)v0 + 1);
  uint64_t v3 = *((void *)v0 + 3);
  uint64_t v5 = *((void *)v0 + 5);
  uint64_t v4 = *((void *)v0 + 6);
  uint64_t v6 = *((void *)v0 + 7);
  int v42 = (void *)*((void *)v0 + 8);
  uint64_t v43 = (void *)*((void *)v0 + 9);
  uint64_t v48 = (void *)*((void *)v0 + 11);
  uint64_t v49 = (void *)*((void *)v0 + 12);
  uint64_t v7 = *((void *)v0 + 14);
  uint64_t v44 = (void *)*((void *)v0 + 10);
  uint64_t v45 = *((void *)v0 + 13);
  uint64_t v46 = *((void *)v0 + 16);
  int v47 = v0[136];
  int v41 = v0[137];
  int v8 = v0[138];
  int v9 = v0[139];
  Hasher.init(_seed:)();
  if (v1 == 2)
  {
    Swift::UInt8 v10 = 0;
  }

  else
  {
    Swift::UInt8 v10 = v1 & 1;
    Hasher._combine(_:)(1u);
  }

  Hasher._combine(_:)(v10);
  if (v2)
  {
    Hasher._combine(_:)(1u);
    Swift::UInt v11 = *(void *)(v2 + 16);
    Hasher._combine(_:)(v11);
    if (v11)
    {
      int v40 = v8;
      swift_bridgeObjectRetain();
      uint64_t v12 = v2 + 40;
      do
      {
        swift_bridgeObjectRetain();
        String.hash(into:)();
        swift_bridgeObjectRelease();
        v12 += 16LL;
        --v11;
      }

      while (v11);
      swift_bridgeObjectRelease();
      int v8 = v40;
    }

    if (v3) {
      goto LABEL_10;
    }
  }

  else
  {
    Hasher._combine(_:)(0);
    if (v3)
    {
LABEL_10:
      Hasher._combine(_:)(1u);
      swift_bridgeObjectRetain();
      String.hash(into:)();
      swift_bridgeObjectRelease();
      goto LABEL_13;
    }
  }

  Hasher._combine(_:)(0);
LABEL_13:
  uint64_t v13 = v7;
  uint64_t v14 = v42;
  if (v5)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
  }

  else
  {
    Hasher._combine(_:)(0);
  }

  id v15 = v43;
  if (v4)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    specialized Dictionary<>.hash(into:)((uint64_t)v50, v4);
    swift_bridgeObjectRelease();
  }

  else
  {
    Hasher._combine(_:)(0);
  }

  uint64_t v16 = v44;
  if (v6)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    specialized Dictionary<>.hash(into:)((uint64_t)v50, v6);
    swift_bridgeObjectRelease();
  }

  else
  {
    Hasher._combine(_:)(0);
  }

  uint64_t v17 = v48;
  if (v42)
  {
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0LL);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef();
    id v18 = v43;
    id v19 = v44;
    id v20 = v48;
    id v21 = v49;
    id v22 = v42;
    _CFObject.hash(into:)();
    if (v43) {
      goto LABEL_24;
    }
  }

  else
  {
    Hasher._combine(_:)(0);
    id v33 = v49;
    id v34 = v43;
    id v35 = v44;
    id v36 = v48;
    if (v43)
    {
LABEL_24:
      Hasher._combine(_:)(1u);
      type metadata accessor for CFDictionaryRef(0LL);
      lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef();
      id v23 = v43;
      _CFObject.hash(into:)();

      if (v44) {
        goto LABEL_25;
      }
      goto LABEL_30;
    }
  }

  Hasher._combine(_:)(0);
  if (v44)
  {
LABEL_25:
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0LL);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef();
    id v24 = v44;
    _CFObject.hash(into:)();

    if (v48) {
      goto LABEL_26;
    }
LABEL_31:
    Hasher._combine(_:)(0);
    id v26 = v49;
    if (v49) {
      goto LABEL_27;
    }
    goto LABEL_32;
  }

id specialized static Dictionary._conditionallyBridgeFromObjectiveC(_:result:)(void *a1, void *a2)
{
  if (MEMORY[0x18961AFC0] + 8LL == MEMORY[0x189618740])
  {
    uint64_t v4 = static Dictionary._bridgeFromObjectiveCAdoptingNativeStorageOf(_:)();
    if (!v4)
    {
      uint64_t v5 = (uint64_t)objc_msgSend(a1, sel_count);
      if (v5)
      {
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Any>);
        uint64_t v6 = (void *)static _DictionaryStorage.allocate(capacity:)();
      }

      else
      {
        uint64_t v6 = (void *)MEMORY[0x18961AFF0];
      }

      uint64_t v8 = v6[6];
      uint64_t v9 = v6[7];
      swift_retain();
      id result = objc_msgSend(a1, sel__getObjects_andKeys_count_, v9, v8, v5);
      if (v5 < 1)
      {
        uint64_t v11 = v5;
        if (!v5)
        {
          uint64_t v7 = 1LL;
LABEL_21:
          if (v5 >= 0)
          {
            void v6[2] = 0LL;
            swift_release();
            if ((_DWORD)v7) {
              goto LABEL_27;
            }
            goto LABEL_26;
          }

          __break(1u);
          goto LABEL_30;
        }
      }

      else
      {
        uint64_t v11 = v5;
        swift_unknownObjectRetain();
        _bridgeNonVerbatimFromObjectiveCConditional<A>(_:_:_:)();
        id result = (id)swift_unknownObjectRelease();
      }

      if (__OFSUB__(v5, v11))
      {
LABEL_32:
        __break(1u);
        goto LABEL_33;
      }

      id result = (id)swift_arrayDestroy();
      uint64_t v7 = 0LL;
      goto LABEL_21;
    }

{
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  id result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  swift_bridgeObjectRelease();
  swift_unknownObjectRetain();
  if (MEMORY[0x18961AFC0] + 8LL == MEMORY[0x189617FA8])
  {
    uint64_t v4 = static Dictionary._bridgeFromObjectiveCAdoptingNativeStorageOf(_:)();
    if (!v4)
    {
      uint64_t v5 = (uint64_t)objc_msgSend(a1, sel_count);
      if (v5)
      {
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Any>);
        uint64_t v6 = (void *)static _DictionaryStorage.allocate(capacity:)();
      }

      else
      {
        uint64_t v6 = (void *)MEMORY[0x18961AFF0];
      }

      uint64_t v8 = v6[6];
      uint64_t v9 = v6[7];
      swift_retain();
      id result = objc_msgSend(a1, sel__getObjects_andKeys_count_, v9, v8, v5);
      if (v5 < 1)
      {
        uint64_t v11 = v5;
        if (!v5)
        {
          uint64_t v7 = 1LL;
LABEL_21:
          if (v5 >= 0)
          {
            void v6[2] = 0LL;
            swift_release();
            if (!(_DWORD)v7)
            {
LABEL_23:
              swift_release();
              uint64_t v6 = 0LL;
            }

unsigned __int8 *specialized closure #1 in FixedWidthInteger.init<A>(_:radix:)( unsigned __int8 *a1, uint64_t a2, uint64_t a3)
{
  return specialized closure #1 in FixedWidthInteger.init<A>(_:radix:)(a1, a2, a3);
}

{
  return specialized closure #1 in FixedWidthInteger.init<A>(_:radix:)(a1, a2, a3);
}

uint64_t specialized _parseInteger<A, B>(ascii:radix:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v13 = a1;
  uint64_t v14 = a2;
  swift_bridgeObjectRetain();
  uint64_t v5 = String.init<A>(_:)();
  unint64_t v6 = v4;
  if ((v4 & 0x1000000000000000LL) == 0)
  {
    if ((v4 & 0x2000000000000000LL) == 0) {
      goto LABEL_3;
    }
LABEL_6:
    uint64_t v8 = HIBYTE(v6) & 0xF;
    uint64_t v13 = v5;
    uint64_t v14 = v6 & 0xFFFFFFFFFFFFFFLL;
    uint64_t v7 = (unsigned __int8 *)&v13;
    goto LABEL_7;
  }

  uint64_t v5 = static String._copying(_:)();
  unint64_t v10 = v9;
  swift_bridgeObjectRelease();
  unint64_t v6 = v10;
  if ((v10 & 0x2000000000000000LL) != 0) {
    goto LABEL_6;
  }
LABEL_3:
  if ((v5 & 0x1000000000000000LL) != 0)
  {
    uint64_t v7 = (unsigned __int8 *)((v6 & 0xFFFFFFFFFFFFFFFLL) + 32);
    uint64_t v8 = v5 & 0xFFFFFFFFFFFFLL;
  }

  else
  {
    uint64_t v7 = (unsigned __int8 *)_StringObject.sharedUTF8.getter();
  }

{
  return specialized _parseInteger<A, B>(ascii:radix:)( a1,  a2,  a3,  (uint64_t (*)(void *, uint64_t, uint64_t))specialized closure #1 in FixedWidthInteger.init<A>(_:radix:));
}

{
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unsigned __int8 *v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unsigned int v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v13 = a1;
  uint64_t v14 = a2;
  swift_bridgeObjectRetain();
  uint64_t v5 = String.init<A>(_:)();
  unint64_t v6 = v4;
  if ((v4 & 0x1000000000000000LL) == 0)
  {
    if ((v4 & 0x2000000000000000LL) == 0) {
      goto LABEL_3;
    }
LABEL_6:
    uint64_t v8 = HIBYTE(v6) & 0xF;
    uint64_t v13 = v5;
    uint64_t v14 = v6 & 0xFFFFFFFFFFFFFFLL;
    uint64_t v7 = (unsigned __int8 *)&v13;
    goto LABEL_7;
  }

  uint64_t v5 = static String._copying(_:)();
  unint64_t v10 = v9;
  swift_bridgeObjectRelease();
  unint64_t v6 = v10;
  if ((v10 & 0x2000000000000000LL) != 0) {
    goto LABEL_6;
  }
LABEL_3:
  if ((v5 & 0x1000000000000000LL) != 0)
  {
    uint64_t v7 = (unsigned __int8 *)((v6 & 0xFFFFFFFFFFFFFFFLL) + 32);
    uint64_t v8 = v5 & 0xFFFFFFFFFFFFLL;
  }

  else
  {
    uint64_t v7 = (unsigned __int8 *)_StringObject.sharedUTF8.getter();
  }

{
  uint64_t result;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unsigned __int8 *v8;
  uint64_t v9;
  unsigned __int8 *v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned __int8 v16;
  unsigned __int8 v17;
  unsigned __int8 v18;
  unsigned __int8 *v19;
  unsigned int v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  unsigned __int8 v24;
  unsigned __int8 v25;
  unsigned __int8 v26;
  unsigned __int8 *v27;
  unsigned int v28;
  char v29;
  uint64_t v30;
  unsigned __int8 v31;
  unsigned __int8 v32;
  unsigned __int8 v33;
  uint64_t *v34;
  unsigned int v35;
  char v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  Swift::UInt8 v38 = a1;
  int v39 = a2;
  swift_bridgeObjectRetain();
  id result = String.init<A>(_:)();
  unint64_t v6 = result;
  uint64_t v7 = v5;
  if ((v5 & 0x1000000000000000LL) != 0)
  {
    unint64_t v6 = static String._copying(_:)();
    uint64_t v12 = v11;
    id result = swift_bridgeObjectRelease();
    uint64_t v7 = v12;
    if ((v12 & 0x2000000000000000LL) == 0) {
      goto LABEL_3;
    }
  }

  else if ((v5 & 0x2000000000000000LL) == 0)
  {
LABEL_3:
    if ((v6 & 0x1000000000000000LL) != 0)
    {
      uint64_t v8 = (unsigned __int8 *)((v7 & 0xFFFFFFFFFFFFFFFLL) + 32);
      unint64_t v9 = v6 & 0xFFFFFFFFFFFFLL;
    }

    else
    {
      uint64_t v8 = (unsigned __int8 *)_StringObject.sharedUTF8.getter();
    }

    unint64_t v10 = specialized closure #1 in FixedWidthInteger.init<A>(_:radix:)(v8, v9, a3);
    swift_bridgeObjectRelease();
    return (uint64_t)v10;
  }

  uint64_t v13 = HIBYTE(v7) & 0xF;
  Swift::UInt8 v38 = v6;
  int v39 = v7 & 0xFFFFFFFFFFFFFFLL;
  if (v6 == 43)
  {
    if (v13)
    {
      id v23 = v13 - 1;
      if (v23)
      {
        id v15 = 0LL;
        id v24 = a3 + 48;
        id v25 = a3 + 55;
        id v26 = a3 + 87;
        if (a3 > 10)
        {
          id v24 = 58;
        }

        else
        {
          id v26 = 97;
          id v25 = 65;
        }

        uint64_t v27 = (unsigned __int8 *)&v38 + 1;
        do
        {
          int v28 = *v27;
          if (v28 < 0x30 || v28 >= v24)
          {
            if (v28 < 0x41 || v28 >= v25)
            {
              unint64_t v10 = 0LL;
              if (v28 < 0x61 || v28 >= v26) {
                goto LABEL_66;
              }
              int v29 = -87;
            }

            else
            {
              int v29 = -55;
            }
          }

          else
          {
            int v29 = -48;
          }

          id v30 = v15 * a3;
          id v15 = v30 + (v28 + v29);
          ++v27;
          --v23;
        }

        while (v23);
LABEL_64:
        unint64_t v10 = (unsigned __int8 *)v15;
        goto LABEL_66;
      }

uint64_t specialized _parseInteger<A, B>(ascii:radix:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void *, uint64_t, uint64_t))
{
  uint64_t v15 = a1;
  uint64_t v16 = a2;
  swift_bridgeObjectRetain();
  uint64_t v7 = String.init<A>(_:)();
  unint64_t v8 = v6;
  if ((v6 & 0x1000000000000000LL) == 0)
  {
    if ((v6 & 0x2000000000000000LL) == 0) {
      goto LABEL_3;
    }
LABEL_6:
    uint64_t v10 = HIBYTE(v8) & 0xF;
    uint64_t v15 = v7;
    uint64_t v16 = v8 & 0xFFFFFFFFFFFFFFLL;
    unint64_t v9 = &v15;
    goto LABEL_7;
  }

  uint64_t v7 = static String._copying(_:)();
  unint64_t v12 = v11;
  swift_bridgeObjectRelease();
  unint64_t v8 = v12;
  if ((v12 & 0x2000000000000000LL) != 0) {
    goto LABEL_6;
  }
LABEL_3:
  if ((v7 & 0x1000000000000000LL) != 0)
  {
    unint64_t v9 = (void *)((v8 & 0xFFFFFFFFFFFFFFFLL) + 32);
    uint64_t v10 = v7 & 0xFFFFFFFFFFFFLL;
  }

  else
  {
    unint64_t v9 = (void *)_StringObject.sharedUTF8.getter();
  }

unsigned __int8 *specialized closure #1 in FixedWidthInteger.init<A>(_:radix:)( unsigned __int8 *result, uint64_t a2, int64_t a3)
{
  uint64_t v3 = a2;
  int v4 = *result;
  if (v4 != 43)
  {
    if (v4 == 45)
    {
      if (a2 >= 1)
      {
        uint64_t v5 = a2 - 1;
        if (a2 != 1)
        {
          unsigned __int8 v6 = a3 + 48;
          unsigned __int8 v7 = a3 + 55;
          unsigned __int8 v8 = a3 + 87;
          if (a3 > 10)
          {
            unsigned __int8 v6 = 58;
          }

          else
          {
            unsigned __int8 v8 = 97;
            unsigned __int8 v7 = 65;
          }

          if (result)
          {
            unint64_t v9 = 0LL;
            for (unint64_t i = result + 1; ; ++i)
            {
              unsigned int v11 = *i;
              if (v11 < 0x30 || v11 >= v6)
              {
                if (v11 < 0x41 || v11 >= v7)
                {
                  if (v11 < 0x61 || v11 >= v8) {
                    return 0LL;
                  }
                  char v12 = -87;
                }

                else
                {
                  char v12 = -55;
                }
              }

              else
              {
                char v12 = -48;
              }

              if (!is_mul_ok(v9, a3)) {
                return 0LL;
              }
              unint64_t v13 = v9 * a3;
              unsigned __int8 v14 = v11 + v12;
              BOOL v15 = v13 >= v14;
              unint64_t v9 = v13 - v14;
              if (!v15) {
                return 0LL;
              }
              if (!--v5) {
                return (unsigned __int8 *)v9;
              }
            }
          }

          return 0LL;
        }

        return 0LL;
      }

      __break(1u);
      goto LABEL_66;
    }

    if (a2)
    {
      unsigned __int8 v25 = a3 + 48;
      unsigned __int8 v26 = a3 + 55;
      unsigned __int8 v27 = a3 + 87;
      if (a3 > 10)
      {
        unsigned __int8 v25 = 58;
      }

      else
      {
        unsigned __int8 v27 = 97;
        unsigned __int8 v26 = 65;
      }

      if (result)
      {
        unint64_t v28 = 0LL;
        do
        {
          unsigned int v29 = *result;
          if (v29 < 0x30 || v29 >= v25)
          {
            if (v29 < 0x41 || v29 >= v26)
            {
              if (v29 < 0x61 || v29 >= v27) {
                return 0LL;
              }
              char v30 = -87;
            }

            else
            {
              char v30 = -55;
            }
          }

          else
          {
            char v30 = -48;
          }

          if (!is_mul_ok(v28, a3)) {
            return 0LL;
          }
          unint64_t v31 = v28 * a3;
          unsigned __int8 v32 = v29 + v30;
          BOOL v15 = __CFADD__(v31, v32);
          unint64_t v28 = v31 + v32;
          if (v15) {
            return 0LL;
          }
          ++result;
          --v3;
        }

        while (v3);
        return (unsigned __int8 *)v28;
      }

      return 0LL;
    }

    return 0LL;
  }

  if (a2 < 1)
  {
LABEL_66:
    __break(1u);
    return result;
  }

  uint64_t v16 = a2 - 1;
  if (a2 == 1) {
    return 0LL;
  }
  unsigned __int8 v17 = a3 + 48;
  unsigned __int8 v18 = a3 + 55;
  unsigned __int8 v19 = a3 + 87;
  if (a3 > 10)
  {
    unsigned __int8 v17 = 58;
  }

  else
  {
    unsigned __int8 v19 = 97;
    unsigned __int8 v18 = 65;
  }

  if (!result) {
    return 0LL;
  }
  unint64_t v9 = 0LL;
  id v20 = result + 1;
  do
  {
    unsigned int v21 = *v20;
    if (v21 < 0x30 || v21 >= v17)
    {
      if (v21 < 0x41 || v21 >= v18)
      {
        if (v21 < 0x61 || v21 >= v19) {
          return 0LL;
        }
        char v22 = -87;
      }

      else
      {
        char v22 = -55;
      }
    }

    else
    {
      char v22 = -48;
    }

    if (!is_mul_ok(v9, a3)) {
      return 0LL;
    }
    unint64_t v23 = v9 * a3;
    unsigned __int8 v24 = v21 + v22;
    BOOL v15 = __CFADD__(v23, v24);
    unint64_t v9 = v23 + v24;
    if (v15) {
      return 0LL;
    }
    ++v20;
    --v16;
  }

  while (v16);
  return (unsigned __int8 *)v9;
}

uint64_t specialized static LocalePreferences.ICUSymbolsAndStrings.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  int v4 = *(void **)a1;
  uint64_t v5 = *(void **)a2;
  if (*(void *)a1)
  {
    if (!v5) {
      return 0LL;
    }
    type metadata accessor for CFDictionaryRef(0LL);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef();
    id v6 = v5;
    id v7 = v4;
    char v8 = static _CFObject.== infix(_:_:)();

    if ((v8 & 1) == 0) {
      return 0LL;
    }
  }

  else if (v5)
  {
    return 0LL;
  }

  unint64_t v9 = *(void **)(a1 + 8);
  uint64_t v10 = *(void **)(a2 + 8);
  if (v9)
  {
    if (!v10) {
      return 0LL;
    }
    type metadata accessor for CFDictionaryRef(0LL);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef();
    id v11 = v10;
    id v12 = v9;
    char v13 = static _CFObject.== infix(_:_:)();

    if ((v13 & 1) == 0) {
      return 0LL;
    }
  }

  else if (v10)
  {
    return 0LL;
  }

  unsigned __int8 v14 = *(void **)(a1 + 16);
  BOOL v15 = *(void **)(a2 + 16);
  if (v14)
  {
    if (!v15) {
      return 0LL;
    }
    type metadata accessor for CFDictionaryRef(0LL);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef();
    id v16 = v15;
    id v17 = v14;
    char v18 = static _CFObject.== infix(_:_:)();

    if ((v18 & 1) == 0) {
      return 0LL;
    }
  }

  else if (v15)
  {
    return 0LL;
  }

  unsigned __int8 v19 = *(void **)(a1 + 24);
  id v20 = *(void **)(a2 + 24);
  if (v19)
  {
    if (!v20) {
      return 0LL;
    }
    type metadata accessor for CFDictionaryRef(0LL);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef();
    id v21 = v20;
    id v22 = v19;
    char v23 = static _CFObject.== infix(_:_:)();

    if ((v23 & 1) == 0) {
      return 0LL;
    }
  }

  else if (v20)
  {
    return 0LL;
  }

  unsigned __int8 v24 = *(void **)(a1 + 32);
  unsigned __int8 v25 = *(void **)(a2 + 32);
  if (v24)
  {
    if (v25)
    {
      type metadata accessor for CFDictionaryRef(0LL);
      lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef();
      id v26 = v25;
      id v27 = v24;
      char v28 = static _CFObject.== infix(_:_:)();

      if ((v28 & 1) != 0) {
        return 1LL;
      }
    }
  }

  else if (!v25)
  {
    return 1LL;
  }

  return 0LL;
}

uint64_t specialized static LocalePreferences.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  int v3 = *a1;
  int v4 = (void *)*((void *)a1 + 1);
  uint64_t v200 = *((void *)a1 + 2);
  uint64_t v217 = *((void *)a1 + 3);
  uint64_t v197 = *((void *)a1 + 4);
  uint64_t v209 = *((void *)a1 + 5);
  uint64_t v5 = *((void *)a1 + 7);
  uint64_t v195 = *((void *)a1 + 6);
  uint64_t v192 = (void *)*((void *)a1 + 8);
  id v6 = (void *)*((void *)a1 + 10);
  unint64_t v190 = (void *)*((void *)a1 + 9);
  id v7 = (void *)*((void *)a1 + 11);
  char v8 = (void *)*((void *)a1 + 12);
  uint64_t v10 = *((void *)a1 + 13);
  uint64_t v9 = *((void *)a1 + 14);
  uint64_t v11 = *((void *)a1 + 15);
  uint64_t v12 = *((void *)a1 + 16);
  int v13 = a1[136];
  int v14 = a1[137];
  int v15 = a1[138];
  int v16 = a1[139];
  int v17 = *a2;
  char v18 = (void *)*((void *)a2 + 1);
  uint64_t v198 = *((void *)a2 + 2);
  uint64_t v213 = *((void *)a2 + 3);
  uint64_t v196 = *((void *)a2 + 4);
  uint64_t v206 = *((void *)a2 + 5);
  uint64_t v193 = *((void *)a2 + 7);
  uint64_t v194 = *((void *)a2 + 6);
  unint64_t v191 = (void *)*((void *)a2 + 8);
  unsigned __int8 v19 = (void *)*((void *)a2 + 10);
  int64_t v189 = (void *)*((void *)a2 + 9);
  id v21 = (void *)*((void *)a2 + 11);
  id v20 = (void *)*((void *)a2 + 12);
  uint64_t v23 = *((void *)a2 + 13);
  uint64_t v22 = *((void *)a2 + 14);
  uint64_t v25 = *((void *)a2 + 15);
  uint64_t v24 = *((void *)a2 + 16);
  int v26 = a2[136];
  int v27 = a2[137];
  int v28 = a2[138];
  int v29 = a2[139];
  if (v3 == 2)
  {
    if (v17 != 2) {
      return 0LL;
    }
  }

  else
  {
    uint64_t result = 0LL;
    if (v17 == 2 || ((((v3 & 1) == 0) ^ v17) & 1) == 0) {
      return result;
    }
  }

  if (v4)
  {
    if (!v18) {
      return 0LL;
    }
    uint64_t v175 = *((void *)a2 + 15);
    Swift::Int v182 = v8;
    int v127 = v15;
    int v31 = a2[139];
    uint64_t v139 = (void *)*((void *)a2 + 12);
    uint64_t v145 = *((void *)a2 + 13);
    int v32 = a2[138];
    int v33 = v13;
    char v129 = (void *)*((void *)a2 + 11);
    unint64_t v132 = (void *)*((void *)a2 + 10);
    int v34 = a2[137];
    uint64_t v151 = *((void *)a2 + 14);
    uint64_t v157 = v9;
    uint64_t v163 = v10;
    unint64_t v169 = v6;
    int v35 = v16;
    uint64_t v133 = *((void *)a2 + 16);
    int v36 = a2[136];
    uint64_t v37 = v11;
    Swift::UInt8 v38 = v7;
    uint64_t v39 = v12;
    char v40 = specialized static Array<A>.== infix(_:_:)(v4, v18);
    uint64_t v12 = v39;
    id v7 = v38;
    uint64_t v11 = v37;
    unsigned __int8 v19 = v132;
    uint64_t v24 = v133;
    int v26 = v36;
    int v16 = v35;
    uint64_t v10 = v163;
    id v6 = v169;
    uint64_t v22 = v151;
    uint64_t v9 = v157;
    int v27 = v34;
    id v21 = v129;
    int v13 = v33;
    uint64_t v25 = v175;
    char v8 = v182;
    int v28 = v32;
    id v20 = v139;
    uint64_t v23 = v145;
    int v29 = v31;
    int v15 = v127;
    if ((v40 & 1) == 0) {
      return 0LL;
    }
  }

  else if (v18)
  {
    return 0LL;
  }

  if (!v217)
  {
    if (v213) {
      return 0LL;
    }
LABEL_18:
    if (v209)
    {
      if (!v206) {
        return 0LL;
      }
      if (v197 != v196 || v209 != v206)
      {
        uint64_t v135 = v24;
        uint64_t v202 = v11;
        uint64_t v123 = v12;
        char v219 = v7;
        int v50 = v29;
        uint64_t v177 = v25;
        unint64_t v184 = v8;
        int v51 = v28;
        uint64_t v141 = v20;
        uint64_t v147 = v23;
        int v52 = v13;
        int v53 = v27;
        uint64_t v153 = v22;
        uint64_t v159 = v9;
        uint64_t v165 = v10;
        char v171 = v6;
        int v54 = v16;
        unint64_t v55 = v21;
        int v56 = v26;
        char v57 = _stringCompareWithSmolCheck(_:_:expecting:)();
        uint64_t v12 = v123;
        uint64_t v11 = v202;
        uint64_t v24 = v135;
        int v26 = v56;
        id v21 = v55;
        int v16 = v54;
        uint64_t v10 = v165;
        id v6 = v171;
        uint64_t v22 = v153;
        uint64_t v9 = v159;
        int v27 = v53;
        int v13 = v52;
        id v20 = v141;
        uint64_t v23 = v147;
        int v28 = v51;
        uint64_t v25 = v177;
        char v8 = v184;
        int v29 = v50;
        id v7 = v219;
        char v58 = v57;
        uint64_t result = 0LL;
        if ((v58 & 1) == 0) {
          return result;
        }
      }
    }

    else if (v206)
    {
      return 0LL;
    }

    if (v195)
    {
      if (!v194) {
        return 0LL;
      }
      int v207 = v29;
      int v210 = v28;
      uint64_t v178 = v25;
      Swift::String v142 = v20;
      uint64_t v148 = v23;
      int v59 = v13;
      int v214 = v27;
      uint64_t v154 = v22;
      uint64_t v160 = v9;
      uint64_t v166 = v10;
      char v172 = v6;
      int v60 = v16;
      id v130 = v21;
      int v61 = v26;
      int64_t v185 = v8;
      uint64_t v62 = v24;
      uint64_t v63 = v11;
      uint64_t v64 = v19;
      uint64_t v65 = v12;
      char v66 = specialized static Dictionary<>.== infix(_:_:)(v195, v194);
      uint64_t v12 = v65;
      unsigned __int8 v19 = v64;
      uint64_t v11 = v63;
      uint64_t v24 = v62;
      uint64_t v25 = v178;
      char v8 = v185;
      int v26 = v61;
      id v21 = v130;
      int v16 = v60;
      uint64_t v10 = v166;
      id v6 = v172;
      uint64_t v22 = v154;
      uint64_t v9 = v160;
      int v27 = v214;
      int v13 = v59;
      id v20 = v142;
      uint64_t v23 = v148;
      int v28 = v210;
      int v29 = v207;
      if ((v66 & 1) == 0) {
        return 0LL;
      }
    }

    else if (v194)
    {
      return 0LL;
    }

    if (v5)
    {
      if (!v193) {
        return 0LL;
      }
      int64_t v220 = v7;
      int v67 = v29;
      int v211 = v28;
      uint64_t v179 = v25;
      uint64_t v143 = v20;
      uint64_t v149 = v23;
      int v68 = v13;
      int v215 = v27;
      uint64_t v155 = v22;
      uint64_t v161 = v9;
      uint64_t v167 = v10;
      unint64_t v173 = v6;
      int v69 = v16;
      uint64_t v131 = v21;
      int v70 = v26;
      uint64_t v186 = v8;
      uint64_t v71 = v24;
      uint64_t v72 = v11;
      unint64_t v73 = v19;
      uint64_t v74 = v12;
      char v75 = specialized static Dictionary<>.== infix(_:_:)(v5, v193);
      uint64_t v12 = v74;
      unsigned __int8 v19 = v73;
      uint64_t v11 = v72;
      uint64_t v24 = v71;
      uint64_t v25 = v179;
      char v8 = v186;
      int v26 = v70;
      id v21 = v131;
      int v16 = v69;
      uint64_t v10 = v167;
      id v6 = v173;
      uint64_t v22 = v155;
      uint64_t v9 = v161;
      int v27 = v215;
      int v13 = v68;
      id v20 = v143;
      uint64_t v23 = v149;
      int v28 = v211;
      int v29 = v67;
      id v7 = v220;
      if ((v75 & 1) == 0) {
        return 0LL;
      }
    }

    else if (v193)
    {
      return 0LL;
    }

    if (v192)
    {
      if (!v191) {
        return 0LL;
      }
      uint64_t v168 = v10;
      uint64_t v174 = v6;
      uint64_t v156 = v22;
      uint64_t v162 = v9;
      int v216 = v27;
      int v199 = v13;
      int v212 = v28;
      int v208 = v29;
      int v221 = v16;
      int v119 = v26;
      uint64_t v136 = v24;
      uint64_t v203 = v11;
      uint64_t v180 = v25;
      uint64_t v124 = v12;
      type metadata accessor for CFDictionaryRef(0LL);
      lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef();
      int v128 = v14;
      id v76 = v191;
      uint64_t v77 = v20;
      int v78 = v15;
      id v79 = v192;
      char v80 = static _CFObject.== infix(_:_:)();

      int v15 = v78;
      id v20 = v77;

      uint64_t v12 = v124;
      uint64_t v25 = v180;
      uint64_t v11 = v203;
      uint64_t v24 = v136;
      int v26 = v119;
      int v14 = v128;
      int v16 = v221;
      if ((v80 & 1) == 0) {
        return 0LL;
      }
    }

    else
    {
      uint64_t v168 = v10;
      uint64_t v174 = v6;
      uint64_t v156 = v22;
      uint64_t v162 = v9;
      int v216 = v27;
      int v199 = v13;
      int v212 = v28;
      int v208 = v29;
      if (v191) {
        return 0LL;
      }
    }

    if (v190)
    {
      if (!v189) {
        return 0LL;
      }
      uint64_t v150 = v23;
      uint64_t v181 = v25;
      uint64_t v187 = v8;
      int v222 = v16;
      int v120 = v26;
      uint64_t v137 = v24;
      uint64_t v204 = v11;
      uint64_t v125 = v12;
      type metadata accessor for CFDictionaryRef(0LL);
      lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef();
      uint64_t v81 = v21;
      int v82 = v14;
      id v83 = v189;
      unint64_t v84 = v20;
      int v85 = v15;
      id v86 = v190;
      char v87 = static _CFObject.== infix(_:_:)();

      int v15 = v85;
      id v20 = v84;

      uint64_t v12 = v125;
      uint64_t v11 = v204;
      uint64_t v24 = v137;
      int v26 = v120;
      int v14 = v82;
      id v21 = v81;
      int v16 = v222;
      char v8 = v187;
      if ((v87 & 1) == 0) {
        return 0LL;
      }
    }

    else
    {
      uint64_t v150 = v23;
      uint64_t v181 = v25;
      if (v189) {
        return 0LL;
      }
    }

    int v121 = v26;
    uint64_t v138 = v24;
    uint64_t v144 = v20;
    uint64_t v126 = v12;
    unint64_t v188 = v8;
    if (v174)
    {
      uint64_t v205 = v11;
      if (!v19) {
        return 0LL;
      }
      int v88 = v14;
      int v89 = v15;
      int v90 = v16;
      type metadata accessor for CFDictionaryRef(0LL);
      lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef();
      id v91 = v19;
      id v92 = v174;
      char v93 = static _CFObject.== infix(_:_:)();

      int v16 = v90;
      int v15 = v89;
      int v14 = v88;
      uint64_t v11 = v205;
      if ((v93 & 1) == 0) {
        return 0LL;
      }
    }

    else if (v19)
    {
      return 0LL;
    }

    if (v7)
    {
      if (!v21) {
        return 0LL;
      }
      uint64_t v94 = v11;
      int v95 = v14;
      int v96 = v15;
      int v97 = v16;
      type metadata accessor for CFDictionaryRef(0LL);
      lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef();
      id v98 = v21;
      id v99 = v7;
      char v100 = static _CFObject.== infix(_:_:)();

      if ((v100 & 1) == 0) {
        return 0LL;
      }
    }

    else
    {
      uint64_t v94 = v11;
      int v95 = v14;
      int v96 = v15;
      int v97 = v16;
      if (v21) {
        return 0LL;
      }
    }

    if (v188)
    {
      if (!v144) {
        return 0LL;
      }
      type metadata accessor for CFDictionaryRef(0LL);
      lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef();
      id v101 = v144;
      id v102 = v188;
      char v103 = static _CFObject.== infix(_:_:)();

      if ((v103 & 1) == 0) {
        return 0LL;
      }
    }

    else if (v144)
    {
      return 0LL;
    }

    if (v168)
    {
      if (!v150) {
        return 0LL;
      }
      swift_bridgeObjectRetain();
      uint64_t v104 = swift_bridgeObjectRetain();
      char v105 = specialized static Dictionary<>.== infix(_:_:)(v104, v150);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v105 & 1) == 0) {
        return 0LL;
      }
    }

    else if (v150)
    {
      return 0LL;
    }

    if (v162)
    {
      if (!v156) {
        return 0LL;
      }
      swift_bridgeObjectRetain();
      uint64_t v106 = swift_bridgeObjectRetain();
      char v107 = specialized static Dictionary<>.== infix(_:_:)(v106, v156);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v107 & 1) == 0) {
        return 0LL;
      }
    }

    else if (v156)
    {
      return 0LL;
    }

    if (v126)
    {
      if (v138)
      {
        BOOL v108 = v94 == v181;
        int v109 = v208;
        int v110 = v212;
        int v111 = v199;
        int v112 = v216;
        int v113 = v121;
        if (!v108 || v126 != v138)
        {
          char v114 = _stringCompareWithSmolCheck(_:_:expecting:)();
          int v113 = v121;
          char v115 = v114;
          uint64_t result = 0LL;
          if ((v115 & 1) == 0) {
            return result;
          }
        }

unint64_t lazy protocol witness table accessor for type LocalePreferences.MeasurementUnit and conformance LocalePreferences.MeasurementUnit()
{
  unint64_t result = lazy protocol witness table cache variable for type LocalePreferences.MeasurementUnit and conformance LocalePreferences.MeasurementUnit;
  if (!lazy protocol witness table cache variable for type LocalePreferences.MeasurementUnit and conformance LocalePreferences.MeasurementUnit)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for LocalePreferences.MeasurementUnit,  &type metadata for LocalePreferences.MeasurementUnit);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type LocalePreferences.MeasurementUnit and conformance LocalePreferences.MeasurementUnit);
  }

  return result;
}

unint64_t lazy protocol witness table accessor for type LocalePreferences.TemperatureUnit and conformance LocalePreferences.TemperatureUnit()
{
  unint64_t result = lazy protocol witness table cache variable for type LocalePreferences.TemperatureUnit and conformance LocalePreferences.TemperatureUnit;
  if (!lazy protocol witness table cache variable for type LocalePreferences.TemperatureUnit and conformance LocalePreferences.TemperatureUnit)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for LocalePreferences.TemperatureUnit,  &type metadata for LocalePreferences.TemperatureUnit);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type LocalePreferences.TemperatureUnit and conformance LocalePreferences.TemperatureUnit);
  }

  return result;
}

unint64_t lazy protocol witness table accessor for type LocalePreferences and conformance LocalePreferences()
{
  unint64_t result = lazy protocol witness table cache variable for type LocalePreferences and conformance LocalePreferences;
  if (!lazy protocol witness table cache variable for type LocalePreferences and conformance LocalePreferences)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for LocalePreferences,  &type metadata for LocalePreferences);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type LocalePreferences and conformance LocalePreferences);
  }

  return result;
}

uint64_t destroy for LocalePreferences(id *a1)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for LocalePreferences(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  uint64_t v3 = *(void *)(a2 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = v3;
  uint64_t v4 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = v4;
  uint64_t v5 = *(void *)(a2 + 48);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = v5;
  id v6 = *(void **)(a2 + 64);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = v6;
  char v8 = *(void **)(a2 + 72);
  id v7 = *(void **)(a2 + 80);
  *(void *)(a1 + 72) = v8;
  *(void *)(a1 + 80) = v7;
  uint64_t v10 = *(void **)(a2 + 88);
  uint64_t v9 = *(void **)(a2 + 96);
  *(void *)(a1 + 88) = v10;
  *(void *)(a1 + 96) = v9;
  uint64_t v18 = *(void *)(a2 + 112);
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  *(void *)(a1 + 112) = v18;
  uint64_t v11 = *(void *)(a2 + 128);
  *(void *)(a1 + 120) = *(void *)(a2 + 120);
  *(void *)(a1 + 128) = v11;
  *(_DWORD *)(a1 + 136) = *(_DWORD *)(a2 + 136);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  id v12 = v6;
  id v13 = v8;
  id v14 = v7;
  id v15 = v10;
  id v16 = v9;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for LocalePreferences(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v4 = *(void **)(a1 + 64);
  uint64_t v5 = *(void **)(a2 + 64);
  *(void *)(a1 + 64) = v5;
  id v6 = v5;

  id v7 = *(void **)(a1 + 72);
  char v8 = *(void **)(a2 + 72);
  *(void *)(a1 + 72) = v8;
  id v9 = v8;

  uint64_t v10 = *(void **)(a1 + 80);
  uint64_t v11 = *(void **)(a2 + 80);
  *(void *)(a1 + 80) = v11;
  id v12 = v11;

  id v13 = *(void **)(a1 + 88);
  id v14 = *(void **)(a2 + 88);
  *(void *)(a1 + 88) = v14;
  id v15 = v14;

  id v16 = *(void **)(a1 + 96);
  int v17 = *(void **)(a2 + 96);
  *(void *)(a1 + 96) = v17;
  id v18 = v17;

  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 120) = *(void *)(a2 + 120);
  *(void *)(a1 + 128) = *(void *)(a2 + 128);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 136) = *(_BYTE *)(a2 + 136);
  *(_BYTE *)(a1 + 137) = *(_BYTE *)(a2 + 137);
  *(_BYTE *)(a1 + 138) = *(_BYTE *)(a2 + 138);
  *(_BYTE *)(a1 + 139) = *(_BYTE *)(a2 + 139);
  return a1;
}

__n128 __swift_memcpy140_8(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  __int128 v2 = *(_OWORD *)(a2 + 16);
  __int128 v3 = *(_OWORD *)(a2 + 32);
  __int128 v4 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v4;
  *(_OWORD *)(a1 + 16) = v2;
  *(_OWORD *)(a1 + 32) = v3;
  __n128 result = *(__n128 *)(a2 + 80);
  __int128 v6 = *(_OWORD *)(a2 + 96);
  __int128 v7 = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 124) = *(_OWORD *)(a2 + 124);
  *(_OWORD *)(a1 + 96) = v6;
  *(_OWORD *)(a1 + 112) = v7;
  *(__n128 *)(a1 + 80) = result;
  return result;
}

uint64_t assignWithTake for LocalePreferences(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRelease();
  uint64_t v4 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v4;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v5 = *(void **)(a1 + 64);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);

  __int128 v6 = *(void **)(a1 + 80);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);

  __int128 v7 = *(void **)(a1 + 96);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);

  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  swift_bridgeObjectRelease();
  uint64_t v8 = *(void *)(a2 + 128);
  *(void *)(a1 + 120) = *(void *)(a2 + 120);
  *(void *)(a1 + 128) = v8;
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 136) = *(_DWORD *)(a2 + 136);
  return a1;
}

uint64_t getEnumTagSinglePayload for LocalePreferences(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 140)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  unint64_t v3 = *(void *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(__swift_mutable_project_boxed_opaque_existential_1((uint64_t)v2, v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for LocalePreferences(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_DWORD *)(result + 136) = 0;
    *(void *)__n128 result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(_BYTE *)(result + 140) = 1;
    }
  }

  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(_BYTE *)(result + 140) = 0;
    }
    if (a2) {
      *(void *)(result + 8) = a2;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for LocalePreferences()
{
  return &type metadata for LocalePreferences;
}

ValueMetadata *type metadata accessor for LocalePreferences.MeasurementUnit()
{
  return &type metadata for LocalePreferences.MeasurementUnit;
}

uint64_t storeEnumTagSinglePayload for LocalePreferences.MeasurementUnit( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFE) {
    return ((uint64_t (*)(void))((char *)&loc_1831ACE7C + 4 * byte_1837BF365[v4]))();
  }
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1831ACEB0 + 4 * byte_1837BF360[v4]))();
}

uint64_t sub_1831ACEB0(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1831ACEB8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x1831ACEC0LL);
  }
  return result;
}

uint64_t sub_1831ACECC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x1831ACED4LL);
  }
  *(_BYTE *)__n128 result = a2 + 1;
  return result;
}

uint64_t sub_1831ACED8(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1831ACEE0(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for LocalePreferences.TemperatureUnit()
{
  return &type metadata for LocalePreferences.TemperatureUnit;
}

void destroy for LocalePreferences.ICUSymbolsAndStrings(id *a1)
{
}

void *initializeWithCopy for LocalePreferences.ICUSymbolsAndStrings(void *a1, uint64_t a2)
{
  int v3 = *(void **)a2;
  uint64_t v4 = *(void **)(a2 + 8);
  *a1 = *(void *)a2;
  a1[1] = v4;
  uint64_t v5 = *(void **)(a2 + 16);
  __int128 v6 = *(void **)(a2 + 24);
  a1[2] = v5;
  a1[3] = v6;
  __int128 v7 = *(void **)(a2 + 32);
  a1[4] = v7;
  id v8 = v3;
  id v9 = v4;
  id v10 = v5;
  id v11 = v6;
  id v12 = v7;
  return a1;
}

uint64_t assignWithCopy for LocalePreferences.ICUSymbolsAndStrings(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void **)a1;
  uint64_t v5 = *(void **)a2;
  *(void *)a1 = *(void *)a2;
  id v6 = v5;

  __int128 v7 = *(void **)(a1 + 8);
  id v8 = *(void **)(a2 + 8);
  *(void *)(a1 + 8) = v8;
  id v9 = v8;

  id v10 = *(void **)(a1 + 16);
  id v11 = *(void **)(a2 + 16);
  *(void *)(a1 + 16) = v11;
  id v12 = v11;

  id v13 = *(void **)(a1 + 24);
  id v14 = *(void **)(a2 + 24);
  *(void *)(a1 + 24) = v14;
  id v15 = v14;

  id v16 = *(void **)(a1 + 32);
  int v17 = *(void **)(a2 + 32);
  *(void *)(a1 + 32) = v17;
  id v18 = v17;

  return a1;
}

uint64_t assignWithTake for LocalePreferences.ICUSymbolsAndStrings(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void **)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;

  uint64_t v5 = *(void **)(a1 + 24);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);

  id v6 = *(void **)(a1 + 32);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);

  return a1;
}

uint64_t getEnumTagSinglePayload for LocalePreferences.ICUSymbolsAndStrings(uint64_t *a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 >= 0x7FFFFFFF && *((_BYTE *)a1 + 40)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  uint64_t v3 = *a1;
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for LocalePreferences.ICUSymbolsAndStrings( uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(void *)__n128 result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(_BYTE *)(result + 40) = 1;
    }
  }

  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(_BYTE *)(result + 40) = 0;
    }
    if (a2) {
      *(void *)__n128 result = a2;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for LocalePreferences.ICUSymbolsAndStrings()
{
  return &type metadata for LocalePreferences.ICUSymbolsAndStrings;
}

unint64_t lazy protocol witness table accessor for type LocalePreferences.ICUSymbolsAndStrings and conformance LocalePreferences.ICUSymbolsAndStrings()
{
  unint64_t result = lazy protocol witness table cache variable for type LocalePreferences.ICUSymbolsAndStrings and conformance LocalePreferences.ICUSymbolsAndStrings;
  if (!lazy protocol witness table cache variable for type LocalePreferences.ICUSymbolsAndStrings and conformance LocalePreferences.ICUSymbolsAndStrings)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for LocalePreferences.ICUSymbolsAndStrings,  &type metadata for LocalePreferences.ICUSymbolsAndStrings);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type LocalePreferences.ICUSymbolsAndStrings and conformance LocalePreferences.ICUSymbolsAndStrings);
  }

  return result;
}

uint64_t UnkeyedEncodingContainer.encodePredicateExpression<A, B>(_:variable:predicateConfiguration:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t *a8)
{
  return UnkeyedEncodingContainer.encodePredicateExpression<A, B>(_:variable:predicateConfiguration:)( a1,  a2,  a3,  a4,  a5,  a6,  a7,  a8);
}

{
  return UnkeyedEncodingContainer.encodePredicateExpression<A, B>(_:variable:predicateConfiguration:)( a1,  a2,  a3,  a4,  a5,  a6,  a7,  a8);
}

{
  uint64_t *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t TupleTypeMetadata;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t *v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  unint64_t v36;
  uint64_t v37;
  unsigned __int8 v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t **v42;
  uint64_t v43;
  int *v44;
  uint64_t v45;
  int v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  int *v50;
  int v51;
  char *v52;
  uint64_t v53;
  uint64_t *v54;
  uint64_t *DynamicType;
  uint64_t v56;
  uint64_t v57;
  uint64_t *v58;
  uint64_t v59;
  char v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  Swift::String v76;
  uint64_t v77;
  unint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  void (*v92)(uint64_t);
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t MetatypeMetadata;
  uint64_t v100;
  uint64_t v101;
  uint64_t *v102;
  uint64_t *v103;
  uint64_t v104;
  uint64_t *v105;
  uint64_t *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  char *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t *v113;
  uint64_t v114;
  unint64_t v115;
  unsigned __int8 v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  unint64_t v120;
  unsigned __int8 v121;
  char v122;
  uint64_t v106 = a8;
  char v107 = a6;
  uint64_t v104 = a5;
  char v100 = a2;
  BOOL v108 = a7;
  int v109 = a1;
  id v10 = (uint64_t *)(a7 & 0xFFFFFFFFFFFFFFFELL);
  int v112 = 8 * a4;
  if (a4 == 1)
  {
    int v113 = &v96;
    MetatypeMetadata = swift_getMetatypeMetadata();
    MEMORY[0x1895F8858](MetatypeMetadata);
    id v12 = (char *)&v96 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
    id v15 = type metadata accessor for PredicateExpressions.Variable(0LL, *v10, v13, v14);
  }

  else
  {
    MEMORY[0x1895F8858](a1);
    int v17 = (v16 + 15) & 0xFFFFFFFFFFFFFFF0LL;
    if (a4)
    {
      id v18 = v10;
      unsigned __int8 v19 = (uint64_t *)((char *)&v96 - v17);
      id v20 = a4;
      do
      {
        ++v18;
        *v19++ = swift_getMetatypeMetadata();
        --v20;
      }

      while (v20);
    }

    uint64_t TupleTypeMetadata = swift_getTupleTypeMetadata();
    int v113 = &v96;
    MetatypeMetadata = TupleTypeMetadata;
    MEMORY[0x1895F8858](TupleTypeMetadata);
    id v12 = (char *)&v96 - v22;
    MEMORY[0x1895F8858](v23);
    int v26 = (uint64_t *)((char *)&v96 - v17);
    if (a4)
    {
      int v27 = v10;
      int v28 = v26;
      int v29 = a4;
      do
      {
        char v30 = *v27++;
        *v28++ = type metadata accessor for PredicateExpressions.Variable(255LL, v30, v24, v25);
        --v29;
      }

      while (v29);
    }

    id v15 = swift_getTupleTypeMetadata();
  }

  char v103 = &v96;
  id v98 = v15;
  MEMORY[0x1895F8858](v15);
  int v32 = (char *)&v96 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  int v33 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<PredicateExpressionCodingKeys>);
  id v102 = &v96;
  int v111 = v33;
  id v101 = *(void *)(v33 - 8);
  MEMORY[0x1895F8858](v33);
  int v35 = (char *)&v96 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v37 = *(void *)a3;
  int v36 = *(void *)(a3 + 8);
  Swift::UInt8 v38 = *(_BYTE *)(a3 + 16);
  lazy protocol witness table accessor for type PredicateExpressionCodingKeys and conformance PredicateExpressionCodingKeys();
  int v110 = v35;
  uint64_t v39 = dispatch thunk of UnkeyedEncodingContainer.nestedContainer<A>(keyedBy:)();
  uint64_t v106 = &v96;
  MEMORY[0x1895F8858](v39);
  int v42 = (uint64_t **)((char *)&v96 - ((v41 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  if (a4)
  {
    int v43 = 0LL;
    int v44 = (int *)(v98 + 32);
    int v45 = v100;
    do
    {
      if (a4 == 1) {
        uint64_t v46 = 0;
      }
      else {
        uint64_t v46 = *v44;
      }
      *(void *)&v32[v46] = **(void **)(v45 + 8 * v43);
      v42[v43++] = (uint64_t *)&v32[v46];
      v44 += 4;
    }

    while (a4 != v43);
    char v105 = &v96;
    int v119 = v37;
    int v120 = v36;
    int v121 = v38;
    MEMORY[0x1895F8858](v40);
    char v48 = (char *)&v96 - ((v47 + 15) & 0xFFFFFFFFFFFFFFF0LL);
    char v49 = 0LL;
    int v50 = (int *)(MetatypeMetadata + 32);
    do
    {
      if (a4 == 1) {
        int v51 = 0;
      }
      else {
        int v51 = *v50;
      }
      int v52 = &v12[v51];
      *(void *)int v52 = v10[v49];
      *(void *)&v48[8 * v49++] = v52;
      v50 += 4;
    }

    while (a4 != v49);
  }

  else
  {
    char v105 = &v96;
    int v119 = v37;
    int v120 = v36;
    char v48 = &v122;
    int v121 = v38;
  }

  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  PredicateCodableConfiguration.allowInputs<each A>(_:)((uint64_t)v48, a4, v108);
  int v53 = v107;
  int v117 = v107;
  int v54 = __swift_allocate_boxed_opaque_existential_1(&v114);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v53 - 8) + 16LL))(v54, v109, v53);
  __swift_project_boxed_opaque_existential_1(&v114, v117);
  DynamicType = (uint64_t *)swift_getDynamicType();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v114);
  char v57 = v119;
  int v56 = v120;
  char v114 = v119;
  char v115 = v120;
  LODWORD(v104) = v121;
  int v116 = v121;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  char v58 = PredicateCodableConfiguration._identifier(for:)(DynamicType);
  int v61 = v110;
  if (!v59)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    unint64_t v73 = _typeName(_:qualified:)();
    char v75 = v74;
    char v114 = 47LL;
    char v115 = 0xE100000000000000LL;
    int v118 = MEMORY[0x18961AFE8];
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
    lazy protocol witness table accessor for type [String] and conformance [A]( (unint64_t *)&lazy protocol witness table cache variable for type [String] and conformance [A],  &demangling cache variable for type metadata for [String],  MEMORY[0x189618458]);
    v76._uint64_t countAndFlagsBits = BidirectionalCollection<>.joined(separator:)();
    String.append(_:)(v76);
    swift_bridgeObjectRelease();
    uint64_t v77 = v114;
    int v78 = v115;
    lazy protocol witness table accessor for type PredicateCodableError and conformance PredicateCodableError();
    swift_allocError();
    *(void *)id v79 = v73;
    *(void *)(v79 + 8) = v75;
    *(void *)(v79 + 16) = v77;
    *(void *)(v79 + 24) = v78;
    *(_BYTE *)(v79 + 32) = 0;
    swift_willThrow();
    goto LABEL_27;
  }

  int v112 = v56;
  if ((v60 & 1) != 0)
  {
    int v96 = (uint64_t)v58;
    MetatypeMetadata = v59;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    id v98 = MEMORY[0x18961AFE8];
    uint64_t v72 = v97;
  }

  else
  {
    uint64_t v62 = (uint64_t)v58;
    uint64_t v63 = v59;
    uint64_t v64 = Type.genericArguments2.getter();
    char v66 = v65;
    int v68 = v67;
    swift_bridgeObjectRetain();
    LOBYTE(v95) = 0;
    int v69 = v64;
    int v70 = v97;
    uint64_t v71 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF18ReflectionInternal17GenericArguments2V_10Foundation19ExpressionStructure33_EAF63E98CB95A00A30DCCB317F51A4F9LLV8ArgumentOsAE_pTg5016_s10Foundation19i12Structure33_klmnopqrs18LLV_4with4pathAD18d63Internal4TypeV_AA29PredicateCodableConfigurationVSaySSGtKcfcAD8t5OAG07F9U0OKXEfU_AI29PredicateCodableConfigurationVSaySSGSS10identifier_Sb10isConcretetTf1cn_nTf4nggg_n( v69,  v66,  v68,  v57,  v112,  v104,  MEMORY[0x18961AFE8],  v62,  v63);
    uint64_t v72 = v70;
    if (v70)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease_n();
LABEL_27:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      char v80 = v101;
      return (*(uint64_t (**)(char *, uint64_t))(v80 + 8))(v61, v111);
    }

    id v98 = v71;
    int v96 = v62;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    MetatypeMetadata = v63;
    swift_bridgeObjectRelease();
  }

  uint64_t v81 = v113;
  LOBYTE(v118) = 0;
  int v82 = KeyedEncodingContainer.nestedUnkeyedContainer(forKey:)();
  int v113 = v81;
  char v100 = v57;
  if (a4)
  {
    id v83 = a4;
    while (1)
    {
      unint64_t v84 = *v10;
      int v118 = **v42;
      __swift_mutable_project_boxed_opaque_existential_1((uint64_t)&v114, v117);
      char v87 = type metadata accessor for PredicateExpressions.Variable(0LL, v84, v85, v86);
      MEMORY[0x186E20D4C](&protocol conformance descriptor for PredicateExpressions.Variable<A>, v87);
      int v82 = dispatch thunk of UnkeyedEncodingContainer.encode<A>(_:)();
      if (v72) {
        break;
      }
      ++v42;
      ++v10;
      if (!--v83) {
        goto LABEL_34;
      }
    }

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v114);
    char v80 = v101;
    int v61 = v110;
    return (*(uint64_t (**)(char *, uint64_t))(v80 + 8))(v61, v111);
  }

uint64_t UnkeyedDecodingContainer.decodePredicateExpression<A>(input:predicateConfiguration:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, unint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v74 = a8;
  uint64_t v75 = a6;
  uint64_t v69 = a3;
  uint64_t v79 = a2;
  uint64_t v73 = a1;
  if (a5 == 1)
  {
    uint64_t MetatypeMetadata = swift_getMetatypeMetadata();
  }

  else
  {
    MEMORY[0x1895F8858](a1);
    id v13 = (char *)&v62 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
    for (unint64_t i = 0LL; i < a5; ++i)
      *(void *)&v13[8 * i] = swift_getMetatypeMetadata();
    uint64_t MetatypeMetadata = swift_getTupleTypeMetadata();
  }

  v93[7] = &v62;
  uint64_t v15 = MEMORY[0x1895F8858](MetatypeMetadata);
  uint64_t v65 = (char *)&v62 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v71 = a7;
  uint64_t v67 = v15;
  if (a5 == 1)
  {
    uint64_t TupleTypeMetadata = type metadata accessor for PredicateExpressions.Variable( 0LL,  *(void *)(a7 & 0xFFFFFFFFFFFFFFFELL),  v16,  v17);
  }

  else
  {
    MEMORY[0x1895F8858](v15);
    uint64_t v23 = (char *)&v62 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0LL);
    for (unint64_t j = 0LL; j < a5; ++j)
      *(void *)&v23[8 * j] = type metadata accessor for PredicateExpressions.Variable( 255LL,  *(void *)((a7 & 0xFFFFFFFFFFFFFFFELL) + 8 * j),  v20,  v21);
    uint64_t TupleTypeMetadata = swift_getTupleTypeMetadata();
  }

  uint64_t v68 = TupleTypeMetadata;
  uint64_t v63 = *(void *)(TupleTypeMetadata - 8);
  id v83 = &v62;
  uint64_t v25 = MEMORY[0x1895F8858](TupleTypeMetadata);
  char v66 = (char *)&v62 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  int v82 = &v62;
  uint64_t v27 = MEMORY[0x1895F8858](v25);
  int v29 = (char *)&v62 - v28;
  uint64_t v81 = &v62;
  MEMORY[0x1895F8858](v27);
  uint64_t v62 = (char *)&v62 - v30;
  uint64_t v78 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<PredicateExpressionCodingKeys>);
  uint64_t v77 = *(void *)(v78 - 8);
  char v80 = &v62;
  MEMORY[0x1895F8858](v78);
  int v32 = (char *)&v62 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v33 = *a4;
  uint64_t v34 = a4[1];
  char v35 = *((_BYTE *)a4 + 16);
  lazy protocol witness table accessor for type PredicateExpressionCodingKeys and conformance PredicateExpressionCodingKeys();
  uint64_t v36 = v64;
  uint64_t result = dispatch thunk of UnkeyedDecodingContainer.nestedContainer<A>(keyedBy:)();
  if (!v36)
  {
    uint64_t v72 = &v62;
    uint64_t v38 = MEMORY[0x1895F8858](result);
    char v40 = (char *)&v62 - ((v39 + 15) & 0xFFFFFFFFFFFFFFF0LL);
    for (uint64_t k = 0LL; k != a5; ++k)
    {
      if (a5 == 1) {
        int v42 = 0;
      }
      else {
        int v42 = *(_DWORD *)(v68 + 24 + 16 * k + 8);
      }
      *(void *)&v40[8 * k] = &v29[v42];
    }

    int v70 = &v62;
    MEMORY[0x1895F8858](v38);
    uint64_t v46 = (char *)&v62 - ((v45 + 15) & 0xFFFFFFFFFFFFFFF0LL);
    for (uint64_t m = 0LL; m != a5; ++m)
    {
      if (a5 == 1) {
        int v48 = 0;
      }
      else {
        int v48 = *(_DWORD *)(v44 + 24 + 16 * m + 8);
      }
      char v49 = &v65[v48];
      *(void *)char v49 = **(void **)(v69 + 8 * m);
      *(void *)&v46[8 * m] = v49;
    }

    v90[0] = v33;
    v90[1] = v34;
    char v91 = v35 & 1;
    KeyedDecodingContainer<>._decode<A, each B>(input:output:predicateConfiguration:)( (uint64_t)v92,  v43,  (uint64_t)v46,  MEMORY[0x1896184C8],  (uint64_t)v90,  a5,  v71,  MEMORY[0x1896184C8]);
    outlined init with take of any PredicateExpression<Self.Output == B1>(v92, (uint64_t)v93);
    uint64_t v50 = v63;
    int v51 = v62;
    uint64_t v52 = v68;
    (*(void (**)(char *, char *, uint64_t))(v63 + 32))(v62, v29, v68);
    outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>( (uint64_t)v93,  (uint64_t)v88);
    outlined init with take of any PredicateExpression<Self.Output == B1>(v88, (uint64_t)&v86);
    if (v87)
    {
      outlined init with take of any PredicateExpression<Self.Output == B1>(&v86, (uint64_t)v89);
      outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>( (uint64_t)v89,  v73);
      int v53 = v66;
      (*(void (**)(char *, char *, uint64_t))(v50 + 16))(v66, v51, v52);
      for (uint64_t n = 0LL; n != a5; ++n)
      {
        if (a5 == 1) {
          int v55 = 0;
        }
        else {
          int v55 = *(_DWORD *)(v52 + 24 + 16 * n + 8);
        }
        **(void **)(v79 + 8 * n) = *(void *)&v53[v55];
      }

      __swift_destroy_boxed_opaque_existential_1((uint64_t)v89);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v93);
      return (*(uint64_t (**)(char *, uint64_t))(v77 + 8))(v32, v78);
    }

    else
    {
      uint64_t v56 = v75;
      v85[3] = v75;
      v85[4] = v74;
      boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v85);
      (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v56 - 8) + 16LL))( boxed_opaque_existential_1,  v76,  v56);
      v84[2] = DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
      v84[3] = v58;
      Swift::String v59 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)( "This expression has an unsupported output type of ",  0x32uLL,  1);
      DefaultStringInterpolation.appendLiteral(_:)(v59);
      swift_bridgeObjectRelease();
      __swift_project_boxed_opaque_existential_1(v93, v93[3]);
      swift_getDynamicType();
      static PredicateExpression.outputType.getter();
      default argument 1 of _typeName(_:qualified:)();
      v84[0] = _typeName(_:qualified:)();
      v84[1] = v60;
      DefaultStringInterpolation.appendInterpolation<A>(_:)();
      outlined destroy of String((uint64_t)v84);
      Swift::String v61 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)(" (expected Bool)", 0x10uLL, 1);
      DefaultStringInterpolation.appendLiteral(_:)(v61);
      swift_bridgeObjectRelease();
      String.init(stringInterpolation:)();
      type metadata accessor for DecodingError();
      swift_allocError();
      static DecodingError.dataCorruptedError(in:debugDescription:)();
      swift_bridgeObjectRelease();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v85);
      swift_willThrow();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v93);
      return (*(uint64_t (**)(char *, uint64_t))(v77 + 8))(v32, v78);
    }
  }

  return result;
}

uint64_t UnkeyedDecodingContainer.decodePredicateExpression<A, each B>(input:output:predicateConfiguration:)( uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t *a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v102 = a1;
  uint64_t v111 = a8;
  uint64_t v16 = (uint64_t *)(a8 & 0xFFFFFFFFFFFFFFFELL);
  uint64_t v105 = a9;
  *(void *)&__int128 v121 = a9;
  uint64_t ExtendedExistentialTypeMetadata = swift_getExtendedExistentialTypeMetadata();
  char v107 = a2;
  int v116 = a7;
  int v117 = v11;
  uint64_t v114 = a10;
  char v115 = v10;
  if (a6 == 1)
  {
    type metadata accessor for PredicateExpressions.Variable(255LL, *v16, v18, v19);
    uint64_t TupleTypeMetadata = swift_checkMetadataState();
  }

  else
  {
    uint64_t v21 = v16;
    MEMORY[0x1895F8858](ExtendedExistentialTypeMetadata);
    unint64_t v25 = (v24 + 15) & 0xFFFFFFFFFFFFFFF0LL;
    if (a6)
    {
      uint64_t v26 = v16;
      uint64_t v27 = (uint64_t *)((char *)&v97 - v25);
      uint64_t v28 = a6;
      do
      {
        uint64_t v29 = *v26++;
        *v27++ = type metadata accessor for PredicateExpressions.Variable(255LL, v29, v22, v23);
        --v28;
      }

      while (v28);
    }

    uint64_t TupleTypeMetadata = swift_getTupleTypeMetadata();
    uint64_t v16 = v21;
  }

  uint64_t v30 = a5;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  MEMORY[0x1895F8858](TupleTypeMetadata2);
  char v103 = (__int128 *)((char *)&v97 - v33);
  int v118 = &v97;
  uint64_t v101 = TupleTypeMetadata;
  uint64_t v104 = v32;
  uint64_t v110 = a6;
  int v112 = v16;
  if (a6 == 1)
  {
    uint64_t MetatypeMetadata = swift_getMetatypeMetadata();
  }

  else
  {
    MEMORY[0x1895F8858](v32);
    unint64_t v36 = (v35 + 15) & 0xFFFFFFFFFFFFFFF0LL;
    if (a6)
    {
      uint64_t v37 = v112;
      uint64_t v38 = (uint64_t *)((char *)&v97 - v36);
      uint64_t v39 = a6;
      do
      {
        ++v37;
        *v38++ = swift_getMetatypeMetadata();
        --v39;
      }

      while (v39);
    }

    uint64_t MetatypeMetadata = swift_getTupleTypeMetadata();
  }

  uint64_t v106 = MetatypeMetadata;
  MEMORY[0x1895F8858](MetatypeMetadata);
  int v41 = (char *)&v97 - ((v40 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v42 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<PredicateExpressionCodingKeys>);
  uint64_t v43 = *(void *)(v42 - 8);
  MEMORY[0x1895F8858](v42);
  uint64_t v45 = (char *)&v97 - ((v44 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v46);
  int v48 = (char *)&v97 - v47;
  uint64_t v109 = *(void *)v30;
  *(void *)&__int128 v113 = *(void *)(v30 + 8);
  LODWORD(v108) = *(unsigned __int8 *)(v30 + 16);
  lazy protocol witness table accessor for type PredicateExpressionCodingKeys and conformance PredicateExpressionCodingKeys();
  char v49 = v117;
  uint64_t result = dispatch thunk of UnkeyedDecodingContainer.nestedContainer<A>(keyedBy:)();
  if (v49) {
    return result;
  }
  unsigned __int8 v51 = v108;
  id v99 = v45;
  uint64_t v114 = 0LL;
  uint64_t v100 = v43;
  char v115 = &v97;
  int v116 = &v97;
  int v117 = &v97;
  uint64_t v52 = v110;
  uint64_t v53 = 8 * v110;
  MEMORY[0x1895F8858](result);
  unint64_t v54 = (v53 + 15) & 0xFFFFFFFFFFFFFFF0LL;
  id v98 = (char *)&v97 - v54;
  if (v52)
  {
    memcpy((char *)&v97 - v54, v107, 8 * v52);
    char v107 = &v97;
    uint64_t v124 = v109;
    uint64_t v125 = v113;
    unsigned __int8 v126 = v51;
    MEMORY[0x1895F8858](v109);
    int v55 = (char *)&v97 - v54;
    uint64_t v56 = 0LL;
    char v57 = (int *)(v106 + 32);
    uint64_t v59 = v111;
    uint64_t v58 = v112;
    do
    {
      if (v52 == 1) {
        int v60 = 0;
      }
      else {
        int v60 = *v57;
      }
      Swift::String v61 = &v41[v60];
      *(void *)Swift::String v61 = v58[v56];
      *(void *)&v55[8 * v56++] = v61;
      v57 += 4;
    }

    while (v52 != v56);
  }

  else
  {
    char v107 = &v97;
    uint64_t v124 = v109;
    uint64_t v125 = v113;
    int v55 = &v127;
    unsigned __int8 v126 = v51;
    uint64_t v59 = v111;
  }

  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  PredicateCodableConfiguration.allowInputs<each A>(_:)((uint64_t)v55, v52, v59);
  LOBYTE(v119[0]) = 2;
  lazy protocol witness table accessor for type ExpressionStructure and conformance ExpressionStructure();
  uint64_t v62 = v42;
  uint64_t v63 = v48;
  uint64_t v64 = v114;
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  if (v64)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v65 = v100;
    return (*(uint64_t (**)(char *, uint64_t))(v65 + 8))(v63, v62);
  }

  *(void *)&__int128 v113 = v48;
  __int128 v66 = v121;
  uint64_t v67 = (uint64_t *)v122;
  uint64_t v68 = v125;
  LODWORD(v109) = v126;
  uint64_t v69 = *(void *)(v125 + 16);
  uint64_t v114 = v124;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (!v69) {
    goto LABEL_29;
  }
  swift_bridgeObjectRetain();
  unint64_t v70 = specialized __RawDictionaryStorage.find<A>(_:)(v66, *((uint64_t *)&v66 + 1));
  if ((v71 & 1) == 0)
  {
    swift_bridgeObjectRelease();
LABEL_29:
    int v112 = v67;
    *(void *)&__int128 v121 = 47LL;
    *((void *)&v121 + 1) = 0xE100000000000000LL;
    v119[0] = MEMORY[0x18961AFE8];
    swift_bridgeObjectRetain();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
    lazy protocol witness table accessor for type [String] and conformance [A]( (unint64_t *)&lazy protocol witness table cache variable for type [String] and conformance [A],  &demangling cache variable for type metadata for [String],  MEMORY[0x189618458]);
    v77._uint64_t countAndFlagsBits = BidirectionalCollection<>.joined(separator:)();
    String.append(_:)(v77);
    swift_bridgeObjectRelease();
    __int128 v78 = v121;
    lazy protocol witness table accessor for type PredicateCodableError and conformance PredicateCodableError();
    swift_allocError();
    *(_OWORD *)uint64_t v79 = v66;
    *(_OWORD *)(v79 + 16) = v78;
    *(_BYTE *)(v79 + 32) = 1;
    swift_willThrow();
    uint64_t v65 = v100;
    goto LABEL_30;
  }

  BOOL v108 = &v97;
  uint64_t v72 = *(void *)(v68 + 56) + 16 * v70;
  uint64_t v106 = *(void *)v72;
  char v73 = *(_BYTE *)(v72 + 8);
  swift_bridgeObjectRelease();
  if ((v73 & 1) != 0)
  {
    uint64_t v74 = v114;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v75 = swift_bridgeObjectRetain();
    uint64_t v76 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay10Foundation19ExpressionStructure33_EAF63E98CB95A00A30DCCB317F51A4F9LLV8ArgumentOG_18ReflectionInternal07GenericP0OsAE_pTg5016_s10Foundation19e12Structure33_ghijklmno28LLV11reconstruct4with4path18q62Internal4TypeVAA29PredicateCodableConfigurationV_SaySSGtKFAH15sP13OAD0W0OKXEfU_AF29PredicateCodableConfigurationVSaySSGAITf1cn_nTf4nggg_n( v75,  v74,  v68,  v109,  MEMORY[0x18961AFE8],  v66,  *((uint64_t *)&v66 + 1));
    int v112 = v67;
    uint64_t v84 = v76;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v85 = PartialType.create2(with:)();
    if (v85)
    {
      uint64_t v86 = v85;
      swift_bridgeObjectRelease();
      uint64_t v97 = v68;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v80 = v86;
      uint64_t v63 = (char *)v113;
      goto LABEL_34;
    }

    lazy protocol witness table accessor for type PredicateCodableError and conformance PredicateCodableError();
    swift_allocError();
    *(void *)uint64_t v90 = v106;
    *(void *)(v90 + 8) = v84;
    *(void *)(v90 + 16) = 0LL;
    *(void *)(v90 + 24) = 0LL;
    *(_BYTE *)(v90 + 32) = 2;
    swift_willThrow();
    uint64_t v65 = v100;
LABEL_30:
    uint64_t v63 = (char *)v113;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return (*(uint64_t (**)(char *, uint64_t))(v65 + 8))(v63, v62);
  }

  swift_bridgeObjectRelease();
  uint64_t v97 = v68;
  swift_bridgeObjectRelease();
  uint64_t v63 = (char *)v113;
  uint64_t v80 = v106;
LABEL_34:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v119[0] = v80;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any.Type);
  uint64_t v123 = v105;
  swift_getExtendedExistentialTypeMetadata();
  if (!swift_dynamicCast())
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    LOBYTE(v121) = 2;
    uint64_t v65 = v100;
    id v83 = v99;
    (*(void (**)(char *, char *, uint64_t))(v100 + 16))(v99, v63, v62);
    type metadata accessor for DecodingError();
    swift_allocError();
    lazy protocol witness table accessor for type [String] and conformance [A]( &lazy protocol witness table cache variable for type KeyedDecodingContainer<PredicateExpressionCodingKeys> and conformance KeyedDecodingContainer<A>,  &demangling cache variable for type metadata for KeyedDecodingContainer<PredicateExpressionCodingKeys>,  MEMORY[0x189619B88]);
    static DecodingError.dataCorruptedError<A>(forKey:in:debugDescription:)();
    (*(void (**)(char *, uint64_t))(v65 + 8))(v83, v62);
    swift_willThrow();
    return (*(uint64_t (**)(char *, uint64_t))(v65 + 8))(v63, v62);
  }

  __int128 v113 = v121;
  uint64_t v81 = v122;
  LOBYTE(v119[0]) = 0;
  uint64_t v82 = KeyedDecodingContainer.nestedUnkeyedContainer(forKey:)();
  v119[0] = v114;
  v119[1] = v97;
  char v120 = v109;
  MEMORY[0x1895F8858](v82);
  uint64_t v87 = v111;
  *(&v97 - 8) = v52;
  *(&v97 - 7) = v87;
  *(&v97 - 6) = v105;
  *(&v97 - 5) = (uint64_t)&v121;
  *((_OWORD *)&v97 - 2) = v113;
  *(&v97 - 2) = v81;
  *(&v97 - 1) = (uint64_t)v63;
  int v88 = v103;
  uint64_t v89 = v104;
  _withPredicateArchivingState<A>(_:_:)( v119,  (void (*)(uint64_t))_ss22KeyedDecodingContainerV10FoundationAC29PredicateExpressionCodingKeysORszrlE7_decode5input6output22predicateConfigurationAC0eF0_pqd_0_6OutputRts_XP10expression_AC0E11ExpressionsO8VariableVy_qd__Gqd__Qp_t8variabletqd__mqd__Qp_qd_0_mAC0e7CodableM0VtKRvd__r0_lFAcJ_pqd_0_ALRS_XPAM_ARqd__Qp_tAStyKXEfU_TA_0);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined init with take of any PredicateExpression<Self.Output == B1>(v88, v102);
  char v91 = (void **)v98;
  if (v52)
  {
    id v92 = (char *)v88 + *(int *)(v89 + 48);
    char v93 = (int *)(v101 + 32);
    uint64_t v94 = v52;
    do
    {
      if (v52 == 1) {
        int v95 = 0;
      }
      else {
        int v95 = *v93;
      }
      int v96 = *v91++;
      *int v96 = *(void *)&v92[v95];
      v93 += 4;
      --v94;
    }

    while (v94);
  }

  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v121);
  return (*(uint64_t (**)(char *, uint64_t))(v100 + 8))(v63, v62);
}

uint64_t KeyedEncodingContainer.encodePredicateExpression<A, B>(_:forKey:variable:predicateConfiguration:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return KeyedEncodingContainer.encodePredicateExpression<A, B>(_:forKey:variable:predicateConfiguration:)( a1,  a2,  a3,  a4,  a5,  a6,  a7,  a8);
}

{
  return KeyedEncodingContainer.encodePredicateExpression<A, B>(_:forKey:variable:predicateConfiguration:)( a1,  a2,  a3,  a4,  a5,  a6,  a7,  a8);
}

{
  uint64_t *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t TupleTypeMetadata;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t *v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  unint64_t v36;
  uint64_t v37;
  unsigned __int8 v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t **v42;
  uint64_t v43;
  int *v44;
  uint64_t v45;
  int v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  int *v50;
  int v51;
  char *v52;
  uint64_t v53;
  uint64_t *v54;
  uint64_t *DynamicType;
  uint64_t v56;
  uint64_t v57;
  uint64_t *v58;
  uint64_t v59;
  char v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  Swift::String v76;
  uint64_t v77;
  unint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  void (*v92)(uint64_t);
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t MetatypeMetadata;
  uint64_t v100;
  uint64_t v101;
  uint64_t *v102;
  uint64_t *v103;
  uint64_t v104;
  uint64_t *v105;
  uint64_t *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  char *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t *v113;
  uint64_t v114;
  unint64_t v115;
  unsigned __int8 v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  unint64_t v120;
  unsigned __int8 v121;
  char v122;
  char v107 = a7;
  uint64_t v105 = a5;
  uint64_t v100 = a3;
  uint64_t v104 = a2;
  BOOL v108 = a8;
  uint64_t v109 = a1;
  id v10 = (uint64_t *)(a8 & 0xFFFFFFFFFFFFFFFELL);
  int v112 = 8 * a6;
  if (a6 == 1)
  {
    __int128 v113 = &v96;
    uint64_t MetatypeMetadata = swift_getMetatypeMetadata();
    MEMORY[0x1895F8858](MetatypeMetadata);
    uint64_t v12 = (char *)&v96 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
    uint64_t v15 = type metadata accessor for PredicateExpressions.Variable(0LL, *v10, v13, v14);
  }

  else
  {
    MEMORY[0x1895F8858](a1);
    uint64_t v17 = (v16 + 15) & 0xFFFFFFFFFFFFFFF0LL;
    if (a6)
    {
      uint64_t v18 = v10;
      uint64_t v19 = (uint64_t *)((char *)&v96 - v17);
      uint64_t v20 = a6;
      do
      {
        ++v18;
        *v19++ = swift_getMetatypeMetadata();
        --v20;
      }

      while (v20);
    }

    uint64_t TupleTypeMetadata = swift_getTupleTypeMetadata();
    __int128 v113 = &v96;
    uint64_t MetatypeMetadata = TupleTypeMetadata;
    MEMORY[0x1895F8858](TupleTypeMetadata);
    uint64_t v12 = (char *)&v96 - v22;
    MEMORY[0x1895F8858](v23);
    uint64_t v26 = (uint64_t *)((char *)&v96 - v17);
    if (a6)
    {
      uint64_t v27 = v10;
      uint64_t v28 = v26;
      uint64_t v29 = a6;
      do
      {
        uint64_t v30 = *v27++;
        *v28++ = type metadata accessor for PredicateExpressions.Variable(255LL, v30, v24, v25);
        --v29;
      }

      while (v29);
    }

    uint64_t v15 = swift_getTupleTypeMetadata();
  }

  char v103 = &v96;
  id v98 = v15;
  MEMORY[0x1895F8858](v15);
  uint64_t v32 = (char *)&v96 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v33 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<PredicateExpressionCodingKeys>);
  uint64_t v102 = &v96;
  uint64_t v111 = v33;
  uint64_t v101 = *(void *)(v33 - 8);
  MEMORY[0x1895F8858](v33);
  uint64_t v35 = (char *)&v96 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v37 = *(void *)a4;
  unint64_t v36 = *(void *)(a4 + 8);
  uint64_t v38 = *(_BYTE *)(a4 + 16);
  lazy protocol witness table accessor for type PredicateExpressionCodingKeys and conformance PredicateExpressionCodingKeys();
  uint64_t v110 = v35;
  uint64_t v39 = KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
  uint64_t v106 = &v96;
  MEMORY[0x1895F8858](v39);
  uint64_t v42 = (uint64_t **)((char *)&v96 - ((v41 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  if (a6)
  {
    uint64_t v43 = 0LL;
    uint64_t v44 = (int *)(v98 + 32);
    uint64_t v45 = v100;
    do
    {
      if (a6 == 1) {
        uint64_t v46 = 0;
      }
      else {
        uint64_t v46 = *v44;
      }
      *(void *)&v32[v46] = **(void **)(v45 + 8 * v43);
      v42[v43++] = (uint64_t *)&v32[v46];
      v44 += 4;
    }

    while (a6 != v43);
    uint64_t v105 = &v96;
    int v119 = v37;
    char v120 = v36;
    __int128 v121 = v38;
    MEMORY[0x1895F8858](v40);
    int v48 = (char *)&v96 - ((v47 + 15) & 0xFFFFFFFFFFFFFFF0LL);
    char v49 = 0LL;
    uint64_t v50 = (int *)(MetatypeMetadata + 32);
    do
    {
      if (a6 == 1) {
        unsigned __int8 v51 = 0;
      }
      else {
        unsigned __int8 v51 = *v50;
      }
      uint64_t v52 = &v12[v51];
      *(void *)uint64_t v52 = v10[v49];
      *(void *)&v48[8 * v49++] = v52;
      v50 += 4;
    }

    while (a6 != v49);
  }

  else
  {
    uint64_t v105 = &v96;
    int v119 = v37;
    char v120 = v36;
    int v48 = &v122;
    __int128 v121 = v38;
  }

  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  PredicateCodableConfiguration.allowInputs<each A>(_:)((uint64_t)v48, a6, v108);
  uint64_t v53 = v107;
  int v117 = v107;
  unint64_t v54 = __swift_allocate_boxed_opaque_existential_1(&v114);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v53 - 8) + 16LL))(v54, v109, v53);
  __swift_project_boxed_opaque_existential_1(&v114, v117);
  DynamicType = (uint64_t *)swift_getDynamicType();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v114);
  char v57 = v119;
  uint64_t v56 = v120;
  uint64_t v114 = v119;
  char v115 = v120;
  LODWORD(v104) = v121;
  int v116 = v121;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v58 = PredicateCodableConfiguration._identifier(for:)(DynamicType);
  Swift::String v61 = v110;
  if (!v59)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    char v73 = _typeName(_:qualified:)();
    uint64_t v75 = v74;
    uint64_t v114 = 47LL;
    char v115 = 0xE100000000000000LL;
    int v118 = MEMORY[0x18961AFE8];
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
    lazy protocol witness table accessor for type [String] and conformance [A]( (unint64_t *)&lazy protocol witness table cache variable for type [String] and conformance [A],  &demangling cache variable for type metadata for [String],  MEMORY[0x189618458]);
    v76._uint64_t countAndFlagsBits = BidirectionalCollection<>.joined(separator:)();
    String.append(_:)(v76);
    swift_bridgeObjectRelease();
    Swift::String v77 = v114;
    __int128 v78 = v115;
    lazy protocol witness table accessor for type PredicateCodableError and conformance PredicateCodableError();
    swift_allocError();
    *(void *)uint64_t v79 = v73;
    *(void *)(v79 + 8) = v75;
    *(void *)(v79 + 16) = v77;
    *(void *)(v79 + 24) = v78;
    *(_BYTE *)(v79 + 32) = 0;
    swift_willThrow();
    goto LABEL_27;
  }

  int v112 = v56;
  if ((v60 & 1) != 0)
  {
    int v96 = (uint64_t)v58;
    uint64_t MetatypeMetadata = v59;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    id v98 = MEMORY[0x18961AFE8];
    uint64_t v72 = v97;
  }

  else
  {
    uint64_t v62 = (uint64_t)v58;
    uint64_t v63 = v59;
    uint64_t v64 = Type.genericArguments2.getter();
    __int128 v66 = v65;
    uint64_t v68 = v67;
    swift_bridgeObjectRetain();
    LOBYTE(v95) = 0;
    uint64_t v69 = v64;
    unint64_t v70 = v97;
    char v71 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF18ReflectionInternal17GenericArguments2V_10Foundation19ExpressionStructure33_EAF63E98CB95A00A30DCCB317F51A4F9LLV8ArgumentOsAE_pTg5016_s10Foundation19i12Structure33_klmnopqrs18LLV_4with4pathAD18d63Internal4TypeV_AA29PredicateCodableConfigurationVSaySSGtKcfcAD8t5OAG07F9U0OKXEfU_AI29PredicateCodableConfigurationVSaySSGSS10identifier_Sb10isConcretetTf1cn_nTf4nggg_n( v69,  v66,  v68,  v57,  v112,  v104,  MEMORY[0x18961AFE8],  v62,  v63);
    uint64_t v72 = v70;
    if (v70)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease_n();
LABEL_27:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v80 = v101;
      return (*(uint64_t (**)(char *, uint64_t))(v80 + 8))(v61, v111);
    }

    id v98 = v71;
    int v96 = v62;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t MetatypeMetadata = v63;
    swift_bridgeObjectRelease();
  }

  uint64_t v81 = v113;
  LOBYTE(v118) = 0;
  uint64_t v82 = KeyedEncodingContainer.nestedUnkeyedContainer(forKey:)();
  __int128 v113 = v81;
  uint64_t v100 = v57;
  if (a6)
  {
    id v83 = a6;
    while (1)
    {
      uint64_t v84 = *v10;
      int v118 = **v42;
      __swift_mutable_project_boxed_opaque_existential_1((uint64_t)&v114, v117);
      uint64_t v87 = type metadata accessor for PredicateExpressions.Variable(0LL, v84, v85, v86);
      MEMORY[0x186E20D4C](&protocol conformance descriptor for PredicateExpressions.Variable<A>, v87);
      uint64_t v82 = dispatch thunk of UnkeyedEncodingContainer.encode<A>(_:)();
      if (v72) {
        break;
      }
      ++v42;
      ++v10;
      if (!--v83) {
        goto LABEL_34;
      }
    }

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v114);
    uint64_t v80 = v101;
    Swift::String v61 = v110;
    return (*(uint64_t (**)(char *, uint64_t))(v80 + 8))(v61, v111);
  }

uint64_t KeyedEncodingContainer.encodePredicateExpressionIfPresent<A, B>(_:forKey:variable:predicateConfiguration:)( uint64_t a1, uint64_t a2, void **a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return KeyedEncodingContainer.encodePredicateExpressionIfPresent<A, B>(_:forKey:variable:predicateConfiguration:)( a1,  a2,  a3,  a4,  a5,  a6,  a7,  a8);
}

{
  return KeyedEncodingContainer.encodePredicateExpressionIfPresent<A, B>(_:forKey:variable:predicateConfiguration:)( a1,  a2,  a3,  a4,  a5,  a6,  a7,  a8);
}

{
  uint64_t *v11;
  uint64_t MetatypeMetadata;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t TupleTypeMetadata;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t *v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  __n128 v47;
  uint64_t v48;
  uint64_t v50;
  unint64_t v51;
  char *v52;
  char *v53;
  int *v54;
  void *v55;
  uint64_t v56;
  int v57;
  void *v58;
  uint64_t v59;
  uint64_t **v60;
  uint64_t v61;
  int *v62;
  unint64_t v63;
  uint64_t v64;
  unsigned __int8 v65;
  int v66;
  uint64_t v67;
  char *v68;
  uint64_t v69;
  int *v70;
  uint64_t v71;
  uint64_t *v72;
  int v73;
  void *v74;
  uint64_t *v75;
  uint64_t *DynamicType;
  uint64_t v77;
  uint64_t v78;
  uint64_t *v79;
  uint64_t v80;
  char v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  Swift::String v95;
  uint64_t v96;
  unint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  char *v110;
  void (*v111)(uint64_t);
  uint64_t v112;
  char *v113;
  void v114[2];
  unint64_t v115;
  uint64_t v116;
  char *v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  void *v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t *v127;
  char *v128;
  uint64_t v129;
  void *v130;
  void *v131;
  void *v132;
  void *v133;
  void *v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  char *v138;
  uint64_t v139;
  unint64_t v140;
  unsigned __int8 v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  unint64_t v145;
  unsigned __int8 v146;
  char v147;
  uint64_t v125 = a8;
  id v11 = (uint64_t *)(a8 & 0xFFFFFFFFFFFFFFFELL);
  uint64_t v122 = a5;
  __int128 v121 = a2;
  uint64_t v136 = a4;
  uint64_t v137 = a1;
  if (a6 == 1)
  {
    uint64_t MetatypeMetadata = swift_getMetatypeMetadata();
    id v13 = MetatypeMetadata;
  }

  else
  {
    MEMORY[0x1895F8858](a1);
    uint64_t v15 = (v14 + 15) & 0xFFFFFFFFFFFFFFF0LL;
    if (a6)
    {
      uint64_t v16 = v11;
      uint64_t v17 = (void *)((char *)v114 - v15);
      uint64_t v18 = a6;
      do
      {
        ++v16;
        *v17++ = swift_getMetatypeMetadata();
        --v18;
      }

      while (v18);
    }

    uint64_t MetatypeMetadata = swift_getTupleTypeMetadata();
    id v13 = MetatypeMetadata;
  }

  MEMORY[0x1895F8858](MetatypeMetadata);
  uint64_t v20 = (char *)v114 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  unsigned __int8 v126 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<PredicateExpressionCodingKeys>);
  MEMORY[0x1895F8858](v126);
  uint64_t v134 = v114;
  uint64_t v135 = v25;
  int v118 = v26;
  char v127 = v11;
  int v128 = (char *)v114 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  int v117 = v20;
  int v116 = v13;
  if (a6 == 1)
  {
    uint64_t TupleTypeMetadata = type metadata accessor for PredicateExpressions.Variable(0LL, *v11, v22, v23);
  }

  else
  {
    MEMORY[0x1895F8858](v21);
    uint64_t v31 = (v30 + 15) & 0xFFFFFFFFFFFFFFF0LL;
    if (a6)
    {
      uint64_t v32 = v127;
      uint64_t v33 = (void *)((char *)v114 - v31);
      uint64_t v34 = a6;
      do
      {
        uint64_t v35 = *v32++;
        *v33++ = type metadata accessor for PredicateExpressions.Variable(255LL, v35, v28, v29);
        --v34;
      }

      while (v34);
    }

    uint64_t TupleTypeMetadata = swift_getTupleTypeMetadata();
  }

  uint64_t v124 = (void *)TupleTypeMetadata;
  uint64_t v133 = v114;
  MEMORY[0x1895F8858](TupleTypeMetadata);
  uint64_t v37 = (char *)v114 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  unint64_t v132 = v114;
  MEMORY[0x1895F8858](v38);
  uint64_t v40 = (char *)v114 - v39;
  int v41 = type metadata accessor for Optional();
  uint64_t v131 = v114;
  uint64_t v42 = *(void *)(v41 - 8);
  MEMORY[0x1895F8858](v41);
  uint64_t v44 = (char *)v114 - v43;
  id v130 = v114;
  uint64_t v45 = *(void *)(a7 - 8);
  uint64_t v47 = MEMORY[0x1895F8858](v46);
  uint64_t v138 = (char *)v114 - ((v48 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  int v119 = *(void *)v136;
  char v120 = *(void *)(v136 + 8);
  LODWORD(v136) = *(unsigned __int8 *)(v136 + 16);
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v42 + 16))(v44, v137, v41, v47);
  uint64_t v137 = v45;
  uint64_t v50 = (*(uint64_t (**)(char *, char *, uint64_t))(v45 + 32))(v138, v44, a7);
  v114[1] = v114;
  MEMORY[0x1895F8858](v50);
  unsigned __int8 v51 = (8 * a6 + 15) & 0xFFFFFFFFFFFFFFF0LL;
  char v115 = v51;
  uint64_t v52 = (char *)v114 - v51;
  uint64_t v53 = v128;
  if (a6)
  {
    unint64_t v54 = (int *)(v124 + 4);
    int v55 = (void *)((char *)v114 - v51);
    uint64_t v56 = a6;
    do
    {
      if (a6 == 1) {
        char v57 = 0;
      }
      else {
        char v57 = *v54;
      }
      uint64_t v58 = *a3++;
      *(void *)&v40[v57] = *v58;
      *v55++ = &v40[v57];
      v54 += 4;
      --v56;
    }

    while (v56);
  }

  lazy protocol witness table accessor for type PredicateExpressionCodingKeys and conformance PredicateExpressionCodingKeys();
  uint64_t v59 = KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
  MEMORY[0x1895F8858](v59);
  int v60 = (uint64_t **)((char *)v114 - v115);
  if (a6)
  {
    Swift::String v61 = 0LL;
    uint64_t v62 = (int *)(v124 + 4);
    uint64_t v63 = v120;
    uint64_t v64 = v119;
    uint64_t v65 = v136;
    do
    {
      if (a6 == 1) {
        __int128 v66 = 0;
      }
      else {
        __int128 v66 = *v62;
      }
      *(void *)&v37[v66] = **(void **)&v52[8 * v61];
      v60[v61++] = (uint64_t *)&v37[v66];
      v62 += 4;
    }

    while (a6 != v61);
    uint64_t v124 = v114;
    uint64_t v144 = v64;
    uint64_t v145 = v63;
    uint64_t v146 = v65;
    MEMORY[0x1895F8858](v64);
    uint64_t v68 = (char *)v114 - ((8 * a6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
    uint64_t v69 = 0LL;
    unint64_t v70 = (int *)(v116 + 32);
    char v71 = v137;
    uint64_t v72 = v127;
    do
    {
      if (a6 == 1) {
        char v73 = 0;
      }
      else {
        char v73 = *v70;
      }
      uint64_t v74 = (void *)(v67 + v73);
      *uint64_t v74 = v72[v69];
      *(void *)&v68[8 * v69++] = v74;
      v70 += 4;
    }

    while (a6 != v69);
  }

  else
  {
    uint64_t v124 = v114;
    uint64_t v144 = v119;
    uint64_t v145 = v120;
    uint64_t v68 = &v147;
    uint64_t v146 = v136;
    char v71 = v137;
    uint64_t v72 = v127;
  }

  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  PredicateCodableConfiguration.allowInputs<each A>(_:)((uint64_t)v68, a6, v125);
  Swift::String v142 = a7;
  uint64_t v75 = __swift_allocate_boxed_opaque_existential_1(&v139);
  (*(void (**)(uint64_t *, char *, uint64_t))(v71 + 16))(v75, v138, a7);
  __swift_project_boxed_opaque_existential_1(&v139, v142);
  DynamicType = (uint64_t *)swift_getDynamicType();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v139);
  __int128 v78 = v144;
  Swift::String v77 = v145;
  uint64_t v139 = v144;
  int v140 = v145;
  LODWORD(v122) = v146;
  uint64_t v141 = v146;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v79 = PredicateCodableConfiguration._identifier(for:)(DynamicType);
  if (!v80)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    id v92 = _typeName(_:qualified:)();
    uint64_t v94 = v93;
    uint64_t v139 = 47LL;
    int v140 = 0xE100000000000000LL;
    uint64_t v143 = MEMORY[0x18961AFE8];
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
    lazy protocol witness table accessor for type [String] and conformance [A]( (unint64_t *)&lazy protocol witness table cache variable for type [String] and conformance [A],  &demangling cache variable for type metadata for [String],  MEMORY[0x189618458]);
    v95._uint64_t countAndFlagsBits = BidirectionalCollection<>.joined(separator:)();
    String.append(_:)(v95);
    swift_bridgeObjectRelease();
    int v96 = v139;
    uint64_t v97 = v140;
    lazy protocol witness table accessor for type PredicateCodableError and conformance PredicateCodableError();
    swift_allocError();
    *(void *)id v98 = v92;
    *(void *)(v98 + 8) = v94;
    *(void *)(v98 + 16) = v96;
    *(void *)(v98 + 24) = v97;
    *(_BYTE *)(v98 + 32) = 0;
    swift_willThrow();
    goto LABEL_38;
  }

  uint64_t v123 = v77;
  uint64_t v136 = v78;
  if ((v81 & 1) != 0)
  {
    int v119 = (uint64_t)v79;
    __int128 v121 = v80;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    char v120 = MEMORY[0x18961AFE8];
  }

  else
  {
    uint64_t v82 = (uint64_t)v79;
    id v83 = v80;
    uint64_t v84 = Type.genericArguments2.getter();
    uint64_t v86 = v85;
    int v88 = v87;
    swift_bridgeObjectRetain();
    LOBYTE(v113) = 0;
    uint64_t v89 = v84;
    uint64_t v90 = v129;
    char v91 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF18ReflectionInternal17GenericArguments2V_10Foundation19ExpressionStructure33_EAF63E98CB95A00A30DCCB317F51A4F9LLV8ArgumentOsAE_pTg5016_s10Foundation19i12Structure33_klmnopqrs18LLV_4with4pathAD18d63Internal4TypeV_AA29PredicateCodableConfigurationVSaySSGtKcfcAD8t5OAG07F9U0OKXEfU_AI29PredicateCodableConfigurationVSaySSGSS10identifier_Sb10isConcretetTf1cn_nTf4nggg_n( v89,  v86,  v88,  v136,  v123,  v122,  MEMORY[0x18961AFE8],  v82,  v83);
    if (v90)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease_n();
      uint64_t v53 = v128;
LABEL_38:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      id v99 = v118;
LABEL_49:
      (*(void (**)(char *, uint64_t))(v99 + 8))(v53, v126);
      return (*(uint64_t (**)(char *, uint64_t))(v137 + 8))(v138, a7);
    }

    char v120 = v91;
    int v119 = v82;
    char v129 = 0LL;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    __int128 v121 = v83;
    swift_bridgeObjectRelease();
  }

  LOBYTE(v143) = 0;
  uint64_t v100 = KeyedEncodingContainer.nestedUnkeyedContainer(forKey:)();
  v114[0] = a7;
  if (a6)
  {
    uint64_t v101 = a6;
    uint64_t v102 = v129;
    while (1)
    {
      char v103 = *v72;
      uint64_t v143 = **v60;
      __swift_mutable_project_boxed_opaque_existential_1((uint64_t)&v139, v142);
      uint64_t v106 = type metadata accessor for PredicateExpressions.Variable(0LL, v103, v104, v105);
      MEMORY[0x186E20D4C](&protocol conformance descriptor for PredicateExpressions.Variable<A>, v106);
      uint64_t v100 = dispatch thunk of UnkeyedEncodingContainer.encode<A>(_:)();
      if (v102) {
        break;
      }
      ++v60;
      ++v72;
      if (!--v101) {
        goto LABEL_47;
      }
    }

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v139);
    a7 = v114[0];
    id v99 = v118;
    uint64_t v53 = v128;
    goto LABEL_49;
  }

  uint64_t v102 = v129;
LABEL_47:
  MEMORY[0x1895F8858](v100);
  a7 = v114[0];
  v114[-10] = a6;
  v114[-9] = a7;
  v114[-8] = v125;
  v114[-7] = v107;
  uint64_t v53 = v128;
  v114[-6] = v108;
  v114[-5] = v53;
  uint64_t v109 = v121;
  v114[-4] = v119;
  v114[-3] = v109;
  uint64_t v110 = v138;
  int v112 = v120;
  __int128 v113 = v138;
  specialized _withPredicateArchivingState<A>(_:_:)(v136, v123, v122, v111);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v139);
  if (v102)
  {
    id v99 = v118;
    goto LABEL_49;
  }

  (*(void (**)(char *, uint64_t))(v118 + 8))(v53, v126);
  return (*(uint64_t (**)(char *, uint64_t))(v137 + 8))(v110, a7);
}

uint64_t static PredicateExpression.outputType.getter()
{
  return swift_getAssociatedTypeWitness();
}

uint64_t KeyedDecodingContainer.decodePredicateExpression<A>(forKey:input:predicateConfiguration:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5, uint64_t a6, unint64_t a7, uint64_t a8)
{
  uint64_t v9 = v8;
  uint64_t v80 = a4;
  uint64_t v70 = a3;
  uint64_t v88 = a2;
  uint64_t v82 = a1;
  if (a7 == 1)
  {
    uint64_t MetatypeMetadata = swift_getMetatypeMetadata();
  }

  else
  {
    MEMORY[0x1895F8858](a1);
    uint64_t v16 = (char *)&v64 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
    for (unint64_t i = 0LL; i < a7; ++i)
      *(void *)&v16[8 * i] = swift_getMetatypeMetadata();
    uint64_t MetatypeMetadata = swift_getTupleTypeMetadata();
  }

  id v83 = &v64;
  MEMORY[0x1895F8858](MetatypeMetadata);
  char v73 = (char *)&v64 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v81 = a8;
  uint64_t v78 = v18;
  if (a7 == 1)
  {
    uint64_t TupleTypeMetadata = type metadata accessor for PredicateExpressions.Variable( 0LL,  *(void *)(a8 & 0xFFFFFFFFFFFFFFFELL),  v19,  v20);
  }

  else
  {
    MEMORY[0x1895F8858](v18);
    uint64_t v26 = (char *)&v64 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0LL);
    for (unint64_t j = 0LL; j < a7; ++j)
      *(void *)&v26[8 * j] = type metadata accessor for PredicateExpressions.Variable( 255LL,  *(void *)((a8 & 0xFFFFFFFFFFFFFFFELL) + 8 * j),  v23,  v24);
    uint64_t TupleTypeMetadata = swift_getTupleTypeMetadata();
  }

  uint64_t v76 = TupleTypeMetadata;
  uint64_t v67 = *(void *)(TupleTypeMetadata - 8);
  uint64_t v79 = &v64;
  MEMORY[0x1895F8858](TupleTypeMetadata);
  char v71 = (char *)&v64 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  Swift::String v77 = &v64;
  MEMORY[0x1895F8858](v29);
  uint64_t v31 = (char *)&v64 - v30;
  uint64_t v75 = &v64;
  MEMORY[0x1895F8858](v32);
  uint64_t v34 = (char *)&v64 - v33;
  uint64_t v35 = *(void *)(a6 - 8);
  uint64_t v74 = &v64;
  MEMORY[0x1895F8858](v36);
  uint64_t v38 = (char *)&v64 - ((v37 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v68 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<PredicateExpressionCodingKeys>);
  uint64_t v66 = *(void *)(v68 - 8);
  uint64_t v69 = &v64;
  __n128 v39 = MEMORY[0x1895F8858](v68);
  int v41 = (char *)&v64 - ((v40 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v65 = *a5;
  uint64_t v64 = a5[1];
  char v42 = *((_BYTE *)a5 + 16);
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v35 + 16))(v38, v9, a6, v39);
  lazy protocol witness table accessor for type PredicateExpressionCodingKeys and conformance PredicateExpressionCodingKeys();
  uint64_t v43 = v72;
  KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
  if (v43) {
    return (*(uint64_t (**)(char *, uint64_t))(v35 + 8))(v38, a6);
  }
  uint64_t v44 = (*(uint64_t (**)(char *, uint64_t))(v35 + 8))(v38, a6);
  MEMORY[0x1895F8858](v44);
  uint64_t v47 = (char *)&v64 - ((v46 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  for (uint64_t k = 0LL; k != a7; ++k)
  {
    if (a7 == 1) {
      int v49 = 0;
    }
    else {
      int v49 = *(_DWORD *)(v76 + 24 + 16 * k + 8);
    }
    *(void *)&v47[8 * k] = &v31[v49];
  }

  MEMORY[0x1895F8858](v45);
  uint64_t v53 = (char *)&v64 - ((v52 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  for (uint64_t m = 0LL; m != a7; ++m)
  {
    if (a7 == 1) {
      int v55 = 0;
    }
    else {
      int v55 = *(_DWORD *)(v51 + 24 + 16 * m + 8);
    }
    uint64_t v56 = &v73[v55];
    *(void *)uint64_t v56 = **(void **)(v80 + 8 * m);
    *(void *)&v53[8 * m] = v56;
  }

  v84[0] = v65;
  v84[1] = v64;
  char v85 = v42 & 1;
  KeyedDecodingContainer<>._decode<A, each B>(input:output:predicateConfiguration:)( (uint64_t)v86,  v50,  (uint64_t)v53,  MEMORY[0x1896184C8],  (uint64_t)v84,  a7,  v81,  MEMORY[0x1896184C8]);
  outlined init with take of any PredicateExpression<Self.Output == B1>(v86, (uint64_t)v87);
  uint64_t v57 = v67;
  uint64_t v58 = v76;
  (*(void (**)(char *, char *, uint64_t))(v67 + 32))(v34, v31, v76);
  outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>((uint64_t)v87, v82);
  uint64_t v59 = *(void (**)(char *, char *, uint64_t))(v57 + 16);
  int v60 = v71;
  v59(v71, v34, v58);
  for (uint64_t n = 0LL; n != a7; ++n)
  {
    if (a7 == 1) {
      int v62 = 0;
    }
    else {
      int v62 = *(_DWORD *)(v58 + 24 + 16 * n + 8);
    }
    **(void **)(v88 + 8 * n) = *(void *)&v60[v62];
  }

  __swift_destroy_boxed_opaque_existential_1((uint64_t)v87);
  return (*(uint64_t (**)(char *, uint64_t))(v66 + 8))(v41, v68);
}

uint64_t KeyedDecodingContainer.decodePredicateExpressionIfPresent<A>(forKey:input:predicateConfiguration:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, __n128 *a3@<X2>, uint64_t a4@<X3>, unint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v8 = v7;
  uint64_t v75 = a1;
  uint64_t v76 = a4;
  uint64_t v74 = a7;
  uint64_t v73 = a6;
  uint64_t v12 = (uint64_t *)(a6 & 0xFFFFFFFFFFFFFFFELL);
  uint64_t v13 = 8 * a5;
  if (a5 == 1)
  {
    uint64_t MetatypeMetadata = swift_getMetatypeMetadata();
    uint64_t v15 = MetatypeMetadata;
  }

  else
  {
    uint64_t v71 = v7;
    v72.n128_u64[0] = (unint64_t)v68;
    MEMORY[0x1895F8858](a1);
    uint64_t v16 = v13;
    uint64_t v17 = (void *)((char *)v68 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL));
    if (a5)
    {
      uint64_t v18 = v12;
      uint64_t v19 = v17;
      unint64_t v20 = a5;
      do
      {
        ++v18;
        *v19++ = swift_getMetatypeMetadata();
        --v20;
      }

      while (v20);
    }

    uint64_t MetatypeMetadata = swift_getTupleTypeMetadata();
    uint64_t v15 = MetatypeMetadata;
    uint64_t v8 = v71;
    uint64_t v13 = v16;
  }

  MEMORY[0x1895F8858](MetatypeMetadata);
  uint64_t v22 = (char *)v68 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __n128 v72 = *a3;
  int v23 = a3[1].n128_u8[0];
  uint64_t v24 = KeyedDecodingContainer.contains(_:)();
  if ((v24 & 1) != 0)
  {
    int v80 = v23;
    MEMORY[0x1895F8858](v24);
    uint64_t v25 = (char *)v68 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
    uint64_t v70 = v26;
    if (a5)
    {
      uint64_t v27 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for any PredicateExpression<Self.PredicateExpression.Output == Bool>);
      uint64_t v69 = v13;
      if (a5 == 1)
      {
        type metadata accessor for PredicateExpressions.Variable(255LL, *v12, v28, v29);
        uint64_t TupleTypeMetadata = swift_checkMetadataState();
      }

      else
      {
        uint64_t v71 = v8;
        v68[1] = v68;
        v68[2] = v27;
        MEMORY[0x1895F8858](v27);
        int v48 = (char *)v68 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
        uint64_t v49 = 0LL;
        do
        {
          *(void *)&v48[8 * v49] = type metadata accessor for PredicateExpressions.Variable(255LL, v12[v49], v46, v47);
          ++v49;
        }

        while (a5 != v49);
        uint64_t TupleTypeMetadata = swift_getTupleTypeMetadata();
        uint64_t v8 = v71;
      }

      TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
      uint64_t v51 = 0LL;
      uint64_t v52 = v74 + *(int *)(TupleTypeMetadata2 + 48);
      uint64_t v53 = (int *)(TupleTypeMetadata + 32);
      uint64_t v13 = v69;
      do
      {
        if (a5 == 1) {
          int v54 = 0;
        }
        else {
          int v54 = *v53;
        }
        *(void *)&v25[8 * v51++] = v52 + v54;
        v53 += 4;
      }

      while (a5 != v51);
      __n128 v45 = MEMORY[0x1895F8858](TupleTypeMetadata2);
      char v42 = (char *)v68 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
      uint64_t v55 = 0LL;
      uint64_t v56 = (int *)(v15 + 32);
      do
      {
        if (a5 == 1) {
          int v57 = 0;
        }
        else {
          int v57 = *v56;
        }
        uint64_t v58 = &v22[v57];
        *(void *)uint64_t v58 = **(void **)(a2 + 8 * v55);
        *(void *)&v42[8 * v55++] = v58;
        v56 += 4;
      }

      while (a5 != v55);
      uint64_t v43 = v74;
    }

    else
    {
      char v42 = &v79;
      uint64_t v43 = v74;
      uint64_t v44 = v73;
      __n128 v45 = v72;
    }

    __n128 v77 = v45;
    char v78 = v80;
    uint64_t result = KeyedDecodingContainer.decodePredicateExpression<A>(forKey:input:predicateConfiguration:)( v43,  (uint64_t)v25,  v75,  (uint64_t)v42,  (uint64_t *)&v77,  v76,  a5,  v44);
    if (!v8)
    {
      uint64_t v59 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for any PredicateExpression<Self.PredicateExpression.Output == Bool>);
      if (a5 == 1)
      {
        type metadata accessor for PredicateExpressions.Variable(255LL, *v12, v60, v61);
        swift_checkMetadataState();
      }

      else
      {
        MEMORY[0x1895F8858](v59);
        if (a5)
        {
          uint64_t v64 = (void *)((char *)v68 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL));
          unint64_t v65 = a5;
          do
          {
            uint64_t v66 = *v12++;
            *v64++ = type metadata accessor for PredicateExpressions.Variable(255LL, v66, v62, v63);
            --v65;
          }

          while (v65);
        }

        swift_getTupleTypeMetadata();
      }

      uint64_t v67 = swift_getTupleTypeMetadata2();
      return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v67 - 8) + 56LL))( v43,  0LL,  1LL,  v67);
    }
  }

  else
  {
    uint64_t v31 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for any PredicateExpression<Self.PredicateExpression.Output == Bool>);
    if (a5 == 1)
    {
      type metadata accessor for PredicateExpressions.Variable(255LL, *v12, v32, v33);
      swift_checkMetadataState();
      uint64_t v34 = v74;
    }

    else
    {
      MEMORY[0x1895F8858](v31);
      uint64_t v34 = v74;
      if (a5)
      {
        uint64_t v37 = (void *)((char *)v68 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL));
        unint64_t v38 = a5;
        do
        {
          uint64_t v39 = *v12++;
          *v37++ = type metadata accessor for PredicateExpressions.Variable(255LL, v39, v35, v36);
          --v38;
        }

        while (v38);
      }

      swift_getTupleTypeMetadata();
    }

    uint64_t v40 = swift_getTupleTypeMetadata2();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v40 - 8) + 56LL))( v34,  1LL,  1LL,  v40);
  }

  return result;
}

uint64_t UnkeyedEncodingContainer.encodePredicateExpressionIfPresent<A, B>(_:variable:predicateConfiguration:)( char *a1, void **a2, uint64_t *a3, uint64_t a4, uint64_t *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return UnkeyedEncodingContainer.encodePredicateExpressionIfPresent<A, B>(_:variable:predicateConfiguration:)( a1,  a2,  a3,  a4,  a5,  a6,  a7,  a8);
}

{
  return UnkeyedEncodingContainer.encodePredicateExpressionIfPresent<A, B>(_:variable:predicateConfiguration:)( a1,  a2,  a3,  a4,  a5,  a6,  a7,  a8);
}

{
  uint64_t *v11;
  uint64_t MetatypeMetadata;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t TupleTypeMetadata;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  __n128 v47;
  uint64_t v48;
  char *v49;
  void (*v50)(char *, char *, __n128);
  char *v51;
  char *v52;
  uint64_t (*v54)(char *, char *, uint64_t);
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  int *v58;
  void *v59;
  uint64_t v60;
  int v61;
  void *v62;
  uint64_t v63;
  uint64_t **v64;
  uint64_t v65;
  int *v66;
  uint64_t v67;
  uint64_t v68;
  unsigned __int8 v69;
  int v70;
  uint64_t v71;
  char *v72;
  uint64_t v73;
  int *v74;
  uint64_t v75;
  char *v76;
  uint64_t *v77;
  int v78;
  void *v79;
  uint64_t v80;
  uint64_t *v81;
  uint64_t *DynamicType;
  uint64_t v83;
  uint64_t v84;
  uint64_t *v85;
  char v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  char *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  Swift::String v102;
  uint64_t v103;
  unint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  char *v118;
  void (*v119)(uint64_t);
  uint64_t v120;
  char *v121;
  void v122[2];
  uint64_t v123;
  char *v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t *v132;
  uint64_t v133;
  void *v134;
  void *v135;
  void *v136;
  void *v137;
  uint64_t v138;
  void *v139;
  uint64_t *v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t *v143;
  char *v144;
  char *v145;
  uint64_t v146;
  uint64_t v147;
  unint64_t v148;
  unsigned __int8 v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  unsigned __int8 v154;
  char v155;
  uint64_t v146 = a6;
  id v11 = (uint64_t *)(a7 & 0xFFFFFFFFFFFFFFFELL);
  Swift::String v142 = a8;
  int v140 = a5;
  uint64_t v143 = a3;
  uint64_t v144 = a1;
  if (a4 == 1)
  {
    uint64_t MetatypeMetadata = swift_getMetatypeMetadata();
    uint64_t v13 = MetatypeMetadata;
  }

  else
  {
    MEMORY[0x1895F8858](a1);
    uint64_t v15 = (v14 + 15) & 0xFFFFFFFFFFFFFFF0LL;
    if (a4)
    {
      uint64_t v16 = v11;
      uint64_t v17 = (void *)((char *)v122 - v15);
      uint64_t v18 = a4;
      do
      {
        ++v16;
        *v17++ = swift_getMetatypeMetadata();
        --v18;
      }

      while (v18);
    }

    uint64_t MetatypeMetadata = swift_getTupleTypeMetadata();
    uint64_t v13 = MetatypeMetadata;
  }

  MEMORY[0x1895F8858](MetatypeMetadata);
  unint64_t v20 = (char *)v122 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v131 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<PredicateExpressionCodingKeys>);
  MEMORY[0x1895F8858](v131);
  uint64_t v145 = (char *)v122 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v138 = v25;
  uint64_t v139 = v122;
  unsigned __int8 v126 = v26;
  id v130 = a7;
  unint64_t v132 = v11;
  uint64_t v124 = v20;
  uint64_t v123 = v13;
  if (a4 == 1)
  {
    uint64_t TupleTypeMetadata = type metadata accessor for PredicateExpressions.Variable(0LL, *v11, v22, v23);
  }

  else
  {
    MEMORY[0x1895F8858](v21);
    if (a4)
    {
      uint64_t v31 = v132;
      uint64_t v32 = (void *)((char *)v122 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0LL));
      uint64_t v33 = a4;
      do
      {
        uint64_t v34 = *v31++;
        *v32++ = type metadata accessor for PredicateExpressions.Variable(255LL, v34, v28, v29);
        --v33;
      }

      while (v33);
    }

    uint64_t TupleTypeMetadata = swift_getTupleTypeMetadata();
  }

  char v127 = TupleTypeMetadata;
  uint64_t v137 = v122;
  MEMORY[0x1895F8858](TupleTypeMetadata);
  uint64_t v36 = (char *)v122 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v136 = v122;
  MEMORY[0x1895F8858](v37);
  uint64_t v39 = (char *)v122 - v38;
  uint64_t v40 = v146;
  int v41 = type metadata accessor for Optional();
  uint64_t v135 = v122;
  char v42 = *(void *)(v41 - 8);
  MEMORY[0x1895F8858](v41);
  uint64_t v44 = (char *)v122 - v43;
  uint64_t v134 = v122;
  __n128 v45 = *(void *)(v40 - 8);
  uint64_t v47 = MEMORY[0x1895F8858](v46);
  uint64_t v49 = (char *)v122 - ((v48 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  int v128 = *v143;
  char v129 = v143[1];
  LODWORD(v143) = *((unsigned __int8 *)v143 + 16);
  uint64_t v50 = *(void (**)(char *, char *, __n128))(v42 + 16);
  uint64_t v51 = v144;
  uint64_t v144 = v52;
  v50(v44, v51, v47);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v45 + 48))(v44, 1LL, v40) == 1)
  {
    (*(void (**)(char *, char *))(v42 + 8))(v44, v144);
    return dispatch thunk of UnkeyedEncodingContainer.encodeNil()();
  }

  uint64_t v125 = v45;
  int v54 = *(uint64_t (**)(char *, char *, uint64_t))(v45 + 32);
  uint64_t v144 = v49;
  uint64_t v55 = v54(v49, v44, v40);
  v122[1] = v122;
  MEMORY[0x1895F8858](v55);
  uint64_t v56 = (8 * a4 + 15) & 0xFFFFFFFFFFFFFFF0LL;
  int v57 = v127;
  if (a4)
  {
    uint64_t v58 = (int *)(v127 + 32);
    uint64_t v59 = (void *)((char *)v122 - v56);
    uint64_t v60 = a4;
    do
    {
      if (a4 == 1) {
        uint64_t v61 = 0;
      }
      else {
        uint64_t v61 = *v58;
      }
      uint64_t v62 = *a2++;
      *(void *)&v39[v61] = *v62;
      *v59++ = &v39[v61];
      v58 += 4;
      --v60;
    }

    while (v60);
  }

  lazy protocol witness table accessor for type PredicateExpressionCodingKeys and conformance PredicateExpressionCodingKeys();
  uint64_t v63 = dispatch thunk of UnkeyedEncodingContainer.nestedContainer<A>(keyedBy:)();
  MEMORY[0x1895F8858](v63);
  uint64_t v64 = (uint64_t **)((char *)v122 - v56);
  if (a4)
  {
    unint64_t v65 = 0LL;
    uint64_t v66 = (int *)(v57 + 32);
    uint64_t v67 = v129;
    uint64_t v68 = v128;
    uint64_t v69 = v143;
    do
    {
      if (a4 == 1) {
        uint64_t v70 = 0;
      }
      else {
        uint64_t v70 = *v66;
      }
      *(void *)&v36[v70] = **(void **)((char *)&v122[v65] - v56);
      v64[v65++] = (uint64_t *)&v36[v70];
      v66 += 4;
    }

    while (a4 != v65);
    uint64_t v152 = v68;
    uint64_t v153 = v67;
    uint64_t v154 = v69;
    MEMORY[0x1895F8858](v68);
    __n128 v72 = (char *)v122 - ((8 * a4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
    uint64_t v73 = 0LL;
    uint64_t v74 = (int *)(v123 + 32);
    uint64_t v75 = v125;
    uint64_t v76 = v144;
    __n128 v77 = v132;
    do
    {
      if (a4 == 1) {
        char v78 = 0;
      }
      else {
        char v78 = *v74;
      }
      char v79 = (void *)(v71 + v78);
      *char v79 = v77[v73];
      *(void *)&v72[8 * v73++] = v79;
      v74 += 4;
    }

    while (a4 != v73);
  }

  else
  {
    uint64_t v152 = v128;
    uint64_t v153 = v129;
    __n128 v72 = &v155;
    uint64_t v154 = v143;
    uint64_t v75 = v125;
    uint64_t v76 = v144;
    __n128 v77 = v132;
  }

  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  PredicateCodableConfiguration.allowInputs<each A>(_:)((uint64_t)v72, a4, v130);
  int v80 = v146;
  uint64_t v150 = v146;
  uint64_t v81 = __swift_allocate_boxed_opaque_existential_1(&v147);
  (*(void (**)(uint64_t *, char *, uint64_t))(v75 + 16))(v81, v76, v80);
  __swift_project_boxed_opaque_existential_1(&v147, v150);
  DynamicType = (uint64_t *)swift_getDynamicType();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v147);
  id v83 = v152;
  uint64_t v84 = v153;
  uint64_t v147 = v152;
  uint64_t v148 = v153;
  LODWORD(v141) = v154;
  uint64_t v149 = v154;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  char v85 = PredicateCodableConfiguration._identifier(for:)(DynamicType);
  Swift::String v142 = v87;
  uint64_t v143 = v122;
  if (!v87)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    id v99 = _typeName(_:qualified:)();
    uint64_t v101 = v100;
    uint64_t v147 = 47LL;
    uint64_t v148 = 0xE100000000000000LL;
    uint64_t v151 = MEMORY[0x18961AFE8];
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
    lazy protocol witness table accessor for type [String] and conformance [A]( (unint64_t *)&lazy protocol witness table cache variable for type [String] and conformance [A],  &demangling cache variable for type metadata for [String],  MEMORY[0x189618458]);
    v102._uint64_t countAndFlagsBits = BidirectionalCollection<>.joined(separator:)();
    String.append(_:)(v102);
    swift_bridgeObjectRelease();
    char v103 = v147;
    uint64_t v104 = v148;
    lazy protocol witness table accessor for type PredicateCodableError and conformance PredicateCodableError();
    swift_allocError();
    *(void *)uint64_t v105 = v99;
    *(void *)(v105 + 8) = v101;
    *(void *)(v105 + 16) = v103;
    *(void *)(v105 + 24) = v104;
    *(_BYTE *)(v105 + 32) = 0;
    swift_willThrow();
    id v98 = v145;
    goto LABEL_38;
  }

  int v140 = v85;
  if ((v86 & 1) != 0)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v106 = MEMORY[0x18961AFE8];
  }

  else
  {
    uint64_t v88 = (uint64_t)v85;
    uint64_t v89 = Type.genericArguments2.getter();
    char v91 = v90;
    char v93 = v92;
    uint64_t v94 = v142;
    swift_bridgeObjectRetain();
    LOBYTE(v121) = 0;
    int v95 = v89;
    int v96 = v133;
    uint64_t v97 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF18ReflectionInternal17GenericArguments2V_10Foundation19ExpressionStructure33_EAF63E98CB95A00A30DCCB317F51A4F9LLV8ArgumentOsAE_pTg5016_s10Foundation19i12Structure33_klmnopqrs18LLV_4with4pathAD18d63Internal4TypeV_AA29PredicateCodableConfigurationVSaySSGtKcfcAD8t5OAG07F9U0OKXEfU_AI29PredicateCodableConfigurationVSaySSGSS10identifier_Sb10isConcretetTf1cn_nTf4nggg_n( v95,  v91,  v93,  v83,  v84,  v141,  MEMORY[0x18961AFE8],  v88,  v94);
    if (v96)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease_n();
      id v98 = v145;
      int v80 = v146;
LABEL_38:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
LABEL_50:
      (*(void (**)(char *, uint64_t))(v126 + 8))(v98, v131);
      return (*(uint64_t (**)(char *, uint64_t))(v125 + 8))(v144, v80);
    }

    uint64_t v106 = v97;
    uint64_t v133 = 0LL;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }

  LOBYTE(v151) = 0;
  char v107 = KeyedEncodingContainer.nestedUnkeyedContainer(forKey:)();
  char v129 = v83;
  int v128 = v84;
  char v127 = v106;
  if (a4)
  {
    BOOL v108 = a4;
    uint64_t v109 = v133;
    while (1)
    {
      uint64_t v110 = v109;
      uint64_t v111 = *v77;
      uint64_t v151 = **v64;
      __swift_mutable_project_boxed_opaque_existential_1((uint64_t)&v147, v150);
      uint64_t v114 = type metadata accessor for PredicateExpressions.Variable(0LL, v111, v112, v113);
      MEMORY[0x186E20D4C](&protocol conformance descriptor for PredicateExpressions.Variable<A>, v114);
      char v107 = dispatch thunk of UnkeyedEncodingContainer.encode<A>(_:)();
      uint64_t v109 = v110;
      if (v110) {
        break;
      }
      ++v64;
      ++v77;
      if (!--v108) {
        goto LABEL_47;
      }
    }

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v147);
    id v98 = v145;
    int v80 = v146;
    goto LABEL_50;
  }

  uint64_t v109 = v133;
LABEL_47:
  MEMORY[0x1895F8858](v107);
  id v98 = v145;
  int v80 = v146;
  v122[-10] = a4;
  v122[-9] = v80;
  v122[-8] = v130;
  v122[-7] = v115;
  v122[-6] = v116;
  v122[-5] = v98;
  int v117 = v142;
  v122[-4] = v140;
  v122[-3] = v117;
  int v118 = v144;
  char v120 = v127;
  __int128 v121 = v144;
  specialized _withPredicateArchivingState<A>(_:_:)(v129, v128, v141, v119);
  if (v109)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v147);
    goto LABEL_50;
  }

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v147);
  (*(void (**)(char *, uint64_t))(v126 + 8))(v98, v131);
  return (*(uint64_t (**)(char *, uint64_t))(v125 + 8))(v118, v80);
}

uint64_t UnkeyedDecodingContainer.decodePredicateExpressionIfPresent<A>(input:predicateConfiguration:)@<X0>( uint64_t a1@<X0>, __n128 *a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v9 = a6;
  uint64_t v81 = a7;
  uint64_t v82 = a4;
  uint64_t v76 = a1;
  uint64_t v78 = a5;
  uint64_t v12 = (uint64_t *)(a5 & 0xFFFFFFFFFFFFFFFELL);
  if (a3 == 1)
  {
    uint64_t MetatypeMetadata = swift_getMetatypeMetadata();
    uint64_t v14 = MetatypeMetadata;
  }

  else
  {
    uint64_t v79 = a6;
    uint64_t v80 = v7;
    MEMORY[0x1895F8858](a1);
    unint64_t v16 = (v15 + 15) & 0xFFFFFFFFFFFFFFF0LL;
    if (a3)
    {
      uint64_t v17 = v12;
      uint64_t v18 = (void *)((char *)v73 - v16);
      unint64_t v19 = a3;
      do
      {
        ++v17;
        *v18++ = swift_getMetatypeMetadata();
        --v19;
      }

      while (v19);
    }

    uint64_t MetatypeMetadata = swift_getTupleTypeMetadata();
    uint64_t v14 = MetatypeMetadata;
    uint64_t v9 = v79;
    uint64_t v7 = v80;
  }

  unint64_t v20 = v73;
  MEMORY[0x1895F8858](MetatypeMetadata);
  uint64_t v22 = (char *)v73 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __n128 v77 = *a2;
  int v23 = a2[1].n128_u8[0];
  uint64_t result = dispatch thunk of UnkeyedDecodingContainer.decodeNil()();
  if (!v8)
  {
    int v86 = v23;
    if ((result & 1) != 0)
    {
      uint64_t v25 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for any PredicateExpression<Self.PredicateExpression.Output == Bool>);
      if (a3 == 1)
      {
        type metadata accessor for PredicateExpressions.Variable(255LL, *v12, v26, v27);
        swift_checkMetadataState();
        uint64_t v28 = v81;
      }

      else
      {
        MEMORY[0x1895F8858](v25);
        unint64_t v39 = (v38 + 15) & 0xFFFFFFFFFFFFFFF0LL;
        if (a3)
        {
          uint64_t v40 = (void *)((char *)v73 - v39);
          unint64_t v41 = a3;
          do
          {
            uint64_t v42 = *v12++;
            *v40++ = type metadata accessor for PredicateExpressions.Variable(255LL, v42, v36, v37);
            --v41;
          }

          while (v41);
        }

        swift_getTupleTypeMetadata();
        uint64_t v28 = v81;
      }

      TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(TupleTypeMetadata2 - 8) + 56LL))( v28,  1LL,  1LL,  TupleTypeMetadata2);
    }

    else
    {
      uint64_t v79 = v9;
      uint64_t v80 = v7;
      MEMORY[0x1895F8858](result);
      uint64_t v75 = v29;
      uint64_t v30 = (char *)v73 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0LL);
      uint64_t v31 = v81;
      if (a3)
      {
        uint64_t v74 = v73;
        uint64_t v32 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for any PredicateExpression<Self.PredicateExpression.Output == Bool>);
        v73[2] = v32;
        if (a3 == 1)
        {
          type metadata accessor for PredicateExpressions.Variable(255LL, *v12, v33, v34);
          uint64_t TupleTypeMetadata = swift_checkMetadataState();
        }

        else
        {
          v73[0] = v73;
          v73[1] = v73;
          MEMORY[0x1895F8858](v32);
          uint64_t v53 = (char *)v73 - ((v52 + 15) & 0xFFFFFFFFFFFFFFF0LL);
          uint64_t v54 = 0LL;
          do
          {
            *(void *)&v53[8 * v54] = type metadata accessor for PredicateExpressions.Variable( 255LL,  v12[v54],  v50,  v51);
            ++v54;
          }

          while (a3 != v54);
          uint64_t TupleTypeMetadata = swift_getTupleTypeMetadata();
          uint64_t v31 = v81;
        }

        uint64_t v55 = swift_getTupleTypeMetadata2();
        uint64_t v56 = 0LL;
        uint64_t v57 = v31 + *(int *)(v55 + 48);
        uint64_t v58 = (int *)(TupleTypeMetadata + 32);
        unint64_t v20 = v74;
        do
        {
          if (a3 == 1) {
            int v59 = 0;
          }
          else {
            int v59 = *v58;
          }
          *(void *)&v30[8 * v56++] = v57 + v59;
          v58 += 4;
        }

        while (a3 != v56);
        __n128 v46 = MEMORY[0x1895F8858](v55);
        uint64_t v44 = (char *)v73 - ((v61 + 15) & 0xFFFFFFFFFFFFFFF0LL);
        uint64_t v62 = 0LL;
        uint64_t v63 = (int *)(v14 + 32);
        do
        {
          if (a3 == 1) {
            int v64 = 0;
          }
          else {
            int v64 = *v63;
          }
          unint64_t v65 = &v22[v64];
          *(void *)unint64_t v65 = **(void **)(v60 + 8 * v62);
          *(void *)&v44[8 * v62++] = v65;
          v63 += 4;
        }

        while (a3 != v62);
      }

      else
      {
        uint64_t v44 = &v85;
        uint64_t v45 = v78;
        __n128 v46 = v77;
      }

      __n128 v83 = v46;
      char v84 = v86;
      UnkeyedDecodingContainer.decodePredicateExpression<A>(input:predicateConfiguration:)( v31,  (uint64_t)v30,  (uint64_t)v44,  (uint64_t *)&v83,  a3,  v82,  v45,  v79);
      uint64_t v47 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for any PredicateExpression<Self.PredicateExpression.Output == Bool>);
      if (a3 == 1)
      {
        type metadata accessor for PredicateExpressions.Variable(255LL, *v12, v48, v49);
        swift_checkMetadataState();
      }

      else
      {
        uint64_t v74 = v20;
        MEMORY[0x1895F8858](v47);
        if (a3)
        {
          uint64_t v69 = (void *)((char *)v73 - ((v68 + 15) & 0xFFFFFFFFFFFFFFF0LL));
          unint64_t v70 = a3;
          do
          {
            uint64_t v71 = *v12++;
            *v69++ = type metadata accessor for PredicateExpressions.Variable(255LL, v71, v66, v67);
            --v70;
          }

          while (v70);
        }

        swift_getTupleTypeMetadata();
        uint64_t v31 = v81;
      }

      uint64_t v72 = swift_getTupleTypeMetadata2();
      return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v72 - 8) + 56LL))( v31,  0LL,  1LL,  v72);
    }
  }

  return result;
}

uint64_t KeyedDecodingContainer.decodePredicateExpression<A, each B>(forKey:input:output:predicateConfiguration:)( uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t *a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  *(void *)&__int128 v114 = a6;
  uint64_t v112 = a9;
  *(void *)&__int128 v122 = a10;
  uint64_t ExtendedExistentialTypeMetadata = swift_getExtendedExistentialTypeMetadata();
  unint64_t v118 = a9 & 0xFFFFFFFFFFFFFFFELL;
  uint64_t v109 = a2;
  int v116 = a7;
  int v117 = v10;
  char v115 = a3;
  if (a8 == 1)
  {
    type metadata accessor for PredicateExpressions.Variable(255LL, *(void *)(a9 & 0xFFFFFFFFFFFFFFFELL), v17, v18);
    uint64_t TupleTypeMetadata = swift_checkMetadataState();
  }

  else
  {
    MEMORY[0x1895F8858](ExtendedExistentialTypeMetadata);
    unint64_t v23 = (v22 + 15) & 0xFFFFFFFFFFFFFFF0LL;
    if (a8)
    {
      uint64_t v24 = (uint64_t *)v118;
      uint64_t v25 = (uint64_t *)((char *)&v98 - v23);
      uint64_t v26 = a8;
      do
      {
        uint64_t v27 = *v24++;
        *v25++ = type metadata accessor for PredicateExpressions.Variable(255LL, v27, v20, v21);
        --v26;
      }

      while (v26);
    }

    uint64_t TupleTypeMetadata = swift_getTupleTypeMetadata();
  }

  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  MEMORY[0x1895F8858](TupleTypeMetadata2);
  uint64_t v105 = (__int128 *)((char *)&v98 - v30);
  int v119 = &v98;
  uint64_t v104 = a1;
  uint64_t v107 = a10;
  uint64_t v103 = TupleTypeMetadata;
  uint64_t v106 = v29;
  uint64_t v111 = a8;
  if (a8 == 1)
  {
    uint64_t MetatypeMetadata = swift_getMetatypeMetadata();
  }

  else
  {
    MEMORY[0x1895F8858](v29);
    unint64_t v33 = (v32 + 15) & 0xFFFFFFFFFFFFFFF0LL;
    if (a8)
    {
      unint64_t v34 = v118;
      uint64_t v35 = (uint64_t *)((char *)&v98 - v33);
      uint64_t v36 = a8;
      do
      {
        v34 += 8LL;
        *v35++ = swift_getMetatypeMetadata();
        --v36;
      }

      while (v36);
    }

    uint64_t MetatypeMetadata = swift_getTupleTypeMetadata();
  }

  BOOL v108 = (uint64_t *)MetatypeMetadata;
  MEMORY[0x1895F8858](MetatypeMetadata);
  uint64_t v38 = (char *)&v98 - ((v37 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v39 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<PredicateExpressionCodingKeys>);
  uint64_t v40 = *(void *)(v39 - 8);
  MEMORY[0x1895F8858](v39);
  uint64_t v42 = (char *)&v98 - ((v41 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v43);
  uint64_t v45 = (char *)&v98 - v44;
  uint64_t v110 = *(void *)v114;
  __int128 v113 = *(char **)(v114 + 8);
  LODWORD(v114) = *(unsigned __int8 *)(v114 + 16);
  lazy protocol witness table accessor for type PredicateExpressionCodingKeys and conformance PredicateExpressionCodingKeys();
  __n128 v46 = v117;
  uint64_t result = KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
  if (v46) {
    return result;
  }
  char v48 = v114;
  uint64_t v100 = v42;
  uint64_t v102 = 0LL;
  uint64_t v101 = v40;
  char v115 = &v98;
  int v116 = &v98;
  int v117 = &v98;
  uint64_t v49 = v111;
  uint64_t v50 = 8 * v111;
  MEMORY[0x1895F8858](result);
  unint64_t v51 = (v50 + 15) & 0xFFFFFFFFFFFFFFF0LL;
  id v99 = (char *)&v98 - v51;
  if (v49)
  {
    memcpy((char *)&v98 - v51, v109, 8 * v49);
    uint64_t v109 = &v98;
    unint64_t v125 = v110;
    uint64_t v126 = (uint64_t)v113;
    char v127 = v48;
    MEMORY[0x1895F8858](v110);
    uint64_t v52 = (char *)&v98 - v51;
    uint64_t v53 = 0LL;
    uint64_t v54 = (int *)(v108 + 4);
    unint64_t v55 = v118;
    uint64_t v56 = v112;
    do
    {
      if (v49 == 1) {
        int v57 = 0;
      }
      else {
        int v57 = *v54;
      }
      uint64_t v58 = &v38[v57];
      *(void *)uint64_t v58 = *(void *)(v55 + 8 * v53);
      *(void *)&v52[8 * v53++] = v58;
      v54 += 4;
    }

    while (v49 != v53);
  }

  else
  {
    uint64_t v109 = &v98;
    uint64_t v56 = v112;
    unint64_t v125 = v110;
    uint64_t v126 = (uint64_t)v113;
    uint64_t v52 = &v128;
    char v127 = v48;
  }

  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  PredicateCodableConfiguration.allowInputs<each A>(_:)((uint64_t)v52, v49, v56);
  LOBYTE(v120[0]) = 2;
  lazy protocol witness table accessor for type ExpressionStructure and conformance ExpressionStructure();
  uint64_t v59 = v39;
  uint64_t v60 = v45;
  uint64_t v61 = v102;
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  if (v61)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v62 = v101;
    return (*(uint64_t (**)(char *, uint64_t))(v62 + 8))(v60, v59);
  }

  __int128 v113 = v45;
  __int128 v63 = v122;
  *(void *)&__int128 v114 = v123;
  uint64_t v64 = v126;
  char v65 = v127;
  uint64_t v66 = *(void *)(v126 + 16);
  unint64_t v118 = v125;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v110 = v64;
  if (!v66) {
    goto LABEL_29;
  }
  swift_bridgeObjectRetain();
  unint64_t v67 = specialized __RawDictionaryStorage.find<A>(_:)(v63, *((uint64_t *)&v63 + 1));
  if ((v68 & 1) == 0)
  {
    swift_bridgeObjectRelease();
LABEL_29:
    *(void *)&__int128 v122 = 47LL;
    *((void *)&v122 + 1) = 0xE100000000000000LL;
    v120[0] = MEMORY[0x18961AFE8];
    swift_bridgeObjectRetain();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
    lazy protocol witness table accessor for type [String] and conformance [A]( (unint64_t *)&lazy protocol witness table cache variable for type [String] and conformance [A],  &demangling cache variable for type metadata for [String],  MEMORY[0x189618458]);
    v73._uint64_t countAndFlagsBits = BidirectionalCollection<>.joined(separator:)();
    String.append(_:)(v73);
    swift_bridgeObjectRelease();
    uint64_t v75 = *((void *)&v122 + 1);
    uint64_t v74 = v122;
    lazy protocol witness table accessor for type PredicateCodableError and conformance PredicateCodableError();
    swift_allocError();
    *(_OWORD *)uint64_t v76 = v63;
    *(void *)(v76 + 16) = v74;
    *(void *)(v76 + 24) = v75;
    *(_BYTE *)(v76 + 32) = 1;
    swift_willThrow();
    uint64_t v62 = v101;
    goto LABEL_30;
  }

  BOOL v108 = &v98;
  uint64_t v69 = *(void *)(v64 + 56) + 16 * v67;
  uint64_t v102 = *(void *)v69;
  char v70 = *(_BYTE *)(v69 + 8);
  swift_bridgeObjectRelease();
  if ((v70 & 1) != 0)
  {
    uint64_t v71 = v118;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v72 = swift_bridgeObjectRetain();
    uint64_t v85 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay10Foundation19ExpressionStructure33_EAF63E98CB95A00A30DCCB317F51A4F9LLV8ArgumentOG_18ReflectionInternal07GenericP0OsAE_pTg5016_s10Foundation19e12Structure33_ghijklmno28LLV11reconstruct4with4path18q62Internal4TypeVAA29PredicateCodableConfigurationV_SaySSGtKFAH15sP13OAD0W0OKXEfU_AF29PredicateCodableConfigurationVSaySSGAITf1cn_nTf4nggg_n( v72,  v71,  v64,  v65,  MEMORY[0x18961AFE8],  v63,  *((uint64_t *)&v63 + 1));
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v86 = PartialType.create2(with:)();
    if (v86)
    {
      uint64_t v87 = v86;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v79 = v87;
      uint64_t v77 = v107;
      uint64_t v78 = v100;
      goto LABEL_34;
    }

    lazy protocol witness table accessor for type PredicateCodableError and conformance PredicateCodableError();
    swift_allocError();
    *(void *)uint64_t v91 = v102;
    *(void *)(v91 + 8) = v85;
    *(void *)(v91 + 16) = 0LL;
    *(void *)(v91 + 24) = 0LL;
    *(_BYTE *)(v91 + 32) = 2;
    swift_willThrow();
    uint64_t v62 = v101;
LABEL_30:
    uint64_t v60 = v113;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return (*(uint64_t (**)(char *, uint64_t))(v62 + 8))(v60, v59);
  }

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v77 = v107;
  uint64_t v78 = v100;
  uint64_t v79 = v102;
LABEL_34:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v120[0] = v79;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any.Type);
  uint64_t v124 = v77;
  swift_getExtendedExistentialTypeMetadata();
  if (!swift_dynamicCast())
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    LOBYTE(v122) = 2;
    uint64_t v62 = v101;
    __n128 v83 = v78;
    char v84 = v78;
    uint64_t v60 = v113;
    (*(void (**)(char *, char *, uint64_t))(v101 + 16))(v83, v113, v59);
    type metadata accessor for DecodingError();
    swift_allocError();
    lazy protocol witness table accessor for type [String] and conformance [A]( &lazy protocol witness table cache variable for type KeyedDecodingContainer<PredicateExpressionCodingKeys> and conformance KeyedDecodingContainer<A>,  &demangling cache variable for type metadata for KeyedDecodingContainer<PredicateExpressionCodingKeys>,  MEMORY[0x189619B88]);
    static DecodingError.dataCorruptedError<A>(forKey:in:debugDescription:)();
    (*(void (**)(char *, uint64_t))(v62 + 8))(v84, v59);
    swift_willThrow();
    return (*(uint64_t (**)(char *, uint64_t))(v62 + 8))(v60, v59);
  }

  __int128 v114 = v122;
  uint64_t v80 = v123;
  LOBYTE(v120[0]) = 0;
  uint64_t v81 = v113;
  uint64_t v82 = KeyedDecodingContainer.nestedUnkeyedContainer(forKey:)();
  v120[0] = v118;
  v120[1] = v110;
  char v121 = v65;
  MEMORY[0x1895F8858](v82);
  uint64_t v88 = v112;
  *(&v98 - 8) = v49;
  *(&v98 - 7) = v88;
  *(&v98 - 6) = v77;
  *(&v98 - 5) = (uint64_t)&v122;
  *((_OWORD *)&v98 - 2) = v114;
  *(&v98 - 2) = v80;
  *(&v98 - 1) = (uint64_t)v81;
  uint64_t v89 = v105;
  uint64_t v90 = v106;
  _withPredicateArchivingState<A>(_:_:)( v120,  (void (*)(uint64_t))_ss22KeyedDecodingContainerV10FoundationAC29PredicateExpressionCodingKeysORszrlE7_decode5input6output22predicateConfigurationAC0eF0_pqd_0_6OutputRts_XP10expression_AC0E11ExpressionsO8VariableVy_qd__Gqd__Qp_t8variabletqd__mqd__Qp_qd_0_mAC0e7CodableM0VtKRvd__r0_lFAcJ_pqd_0_ALRS_XPAM_ARqd__Qp_tAStyKXEfU_TA_0);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined init with take of any PredicateExpression<Self.Output == B1>(v89, v104);
  id v92 = (void **)v99;
  if (v49)
  {
    char v93 = (char *)v89 + *(int *)(v90 + 48);
    uint64_t v94 = (int *)(v103 + 32);
    uint64_t v95 = v49;
    do
    {
      if (v49 == 1) {
        int v96 = 0;
      }
      else {
        int v96 = *v94;
      }
      uint64_t v97 = *v92++;
      *uint64_t v97 = *(void *)&v93[v96];
      v94 += 4;
      --v95;
    }

    while (v95);
  }

  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v122);
  return (*(uint64_t (**)(char *, uint64_t))(v101 + 8))(v81, v59);
}

uint64_t KeyedDecodingContainer.decodePredicateExpressionIfPresent<A, each B>(forKey:input:output:predicateConfiguration:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X3>, char *a3@<X4>, uint64_t a4@<X5>, uint64_t a5@<X6>, uint64_t a6@<X7>, uint64_t a7@<X8>)
{
  uint64_t v114 = a1;
  char v115 = a3;
  uint64_t v107 = a7;
  *(void *)&__int128 v119 = a6;
  id v11 = (uint64_t *)(a5 & 0xFFFFFFFFFFFFFFFELL);
  uint64_t ExtendedExistentialTypeMetadata = swift_getExtendedExistentialTypeMetadata();
  uint64_t v99 = a6;
  uint64_t v102 = a5;
  if (a4 == 1)
  {
    type metadata accessor for PredicateExpressions.Variable(255LL, *v11, v13, v14);
    uint64_t TupleTypeMetadata = swift_checkMetadataState();
  }

  else
  {
    MEMORY[0x1895F8858](ExtendedExistentialTypeMetadata);
    unint64_t v19 = (v18 + 15) & 0xFFFFFFFFFFFFFFF0LL;
    if (a4)
    {
      uint64_t v20 = v11;
      uint64_t v21 = (void *)((char *)v96 - v19);
      uint64_t v22 = a4;
      do
      {
        uint64_t v23 = *v20++;
        *v21++ = type metadata accessor for PredicateExpressions.Variable(255LL, v23, v16, v17);
        --v22;
      }

      while (v22);
    }

    uint64_t TupleTypeMetadata = swift_getTupleTypeMetadata();
  }

  uint64_t v104 = TupleTypeMetadata;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v105 = *(void *)(TupleTypeMetadata2 - 8);
  MEMORY[0x1895F8858](TupleTypeMetadata2);
  uint64_t v97 = (__int128 *)((char *)v96 - v24);
  uint64_t v103 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<PredicateExpressionCodingKeys>);
  uint64_t v100 = *(void *)(v103 - 8);
  MEMORY[0x1895F8858](v103);
  *(void *)&__int128 v98 = (char *)v96 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v110 = v96;
  MEMORY[0x1895F8858](v26);
  uint64_t v106 = (char *)v96 - v28;
  uint64_t v111 = v96;
  uint64_t v112 = v96;
  if (a4 == 1)
  {
    uint64_t MetatypeMetadata = swift_getMetatypeMetadata();
    uint64_t v30 = MetatypeMetadata;
  }

  else
  {
    MEMORY[0x1895F8858](v27);
    unint64_t v32 = (v31 + 15) & 0xFFFFFFFFFFFFFFF0LL;
    if (a4)
    {
      unint64_t v33 = v11;
      unint64_t v34 = (void *)((char *)v96 - v32);
      uint64_t v35 = a4;
      do
      {
        ++v33;
        *v34++ = swift_getMetatypeMetadata();
        --v35;
      }

      while (v35);
    }

    uint64_t MetatypeMetadata = swift_getTupleTypeMetadata();
    uint64_t v30 = MetatypeMetadata;
  }

  MEMORY[0x1895F8858](MetatypeMetadata);
  uint64_t v37 = (char *)v96 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v109 = v96;
  uint64_t v38 = *(void *)a2;
  uint64_t v101 = *(void **)(a2 + 8);
  int v39 = *(unsigned __int8 *)(a2 + 16);
  uint64_t v40 = KeyedDecodingContainer.contains(_:)();
  if ((v40 & 1) == 0) {
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v105 + 56))( v107,  1LL,  1LL,  TupleTypeMetadata2);
  }
  int v126 = v39;
  v96[1] = v96;
  uint64_t v41 = 8 * a4;
  MEMORY[0x1895F8858](v40);
  if (a4)
  {
    uint64_t v42 = v107 + *(int *)(TupleTypeMetadata2 + 48);
    uint64_t v43 = (int *)(v104 + 32);
    uint64_t v44 = (void *)((char *)v96 - ((v41 + 15) & 0xFFFFFFFFFFFFFFF0LL));
    uint64_t v45 = a4;
    do
    {
      if (a4 == 1) {
        int v46 = 0;
      }
      else {
        int v46 = *v43;
      }
      *v44++ = v42 + v46;
      v43 += 4;
      --v45;
    }

    while (v45);
  }

  v96[2] = v96;
  lazy protocol witness table accessor for type PredicateExpressionCodingKeys and conformance PredicateExpressionCodingKeys();
  uint64_t v48 = v113;
  uint64_t result = KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
  if (v48) {
    return result;
  }
  uint64_t v113 = 0LL;
  int v116 = v96;
  MEMORY[0x1895F8858](result);
  unint64_t v49 = (v41 + 15) & 0xFFFFFFFFFFFFFFF0LL;
  char v115 = (char *)v96 - v49;
  if (a4)
  {
    uint64_t v50 = memcpy((char *)v96 - v49, (char *)v96 - ((v41 + 15) & 0xFFFFFFFFFFFFFFF0LL), 8 * a4);
    uint64_t v122 = v38;
    uint64_t v123 = v101;
    char v124 = v126;
    MEMORY[0x1895F8858](v50);
    unint64_t v51 = (char *)v96 - v49;
    uint64_t v52 = 0LL;
    uint64_t v53 = (int *)(v30 + 32);
    uint64_t v54 = v103;
    uint64_t v55 = v102;
    do
    {
      if (a4 == 1) {
        int v56 = 0;
      }
      else {
        int v56 = *v53;
      }
      int v57 = &v37[v56];
      *(void *)int v57 = v11[v52];
      *(void *)&v51[8 * v52++] = v57;
      v53 += 4;
    }

    while (a4 != v52);
  }

  else
  {
    uint64_t v122 = v38;
    uint64_t v123 = v101;
    unint64_t v51 = &v125;
    char v124 = v126;
    uint64_t v54 = v103;
    uint64_t v55 = v102;
  }

  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  PredicateCodableConfiguration.allowInputs<each A>(_:)((uint64_t)v51, a4, v55);
  LOBYTE(v117[0]) = 2;
  lazy protocol witness table accessor for type ExpressionStructure and conformance ExpressionStructure();
  uint64_t v58 = v106;
  uint64_t v59 = v113;
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  if (v59)
  {
LABEL_30:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v60 = v100;
    return (*(uint64_t (**)(char *, uint64_t))(v60 + 8))(v58, v54);
  }

  __int128 v61 = v119;
  uint64_t v63 = v122;
  uint64_t v62 = (uint64_t)v123;
  char v64 = v124;
  uint64_t v65 = v123[2];
  swift_bridgeObjectRetain();
  uint64_t v114 = v62;
  swift_bridgeObjectRetain();
  uint64_t v101 = v96;
  if (!v65) {
    goto LABEL_37;
  }
  uint64_t v113 = 0LL;
  swift_bridgeObjectRetain();
  uint64_t v66 = v114;
  unint64_t v67 = specialized __RawDictionaryStorage.find<A>(_:)(v61, *((uint64_t *)&v61 + 1));
  if ((v68 & 1) == 0)
  {
    swift_bridgeObjectRelease();
LABEL_37:
    *(void *)&__int128 v119 = 47LL;
    *((void *)&v119 + 1) = 0xE100000000000000LL;
    v117[0] = MEMORY[0x18961AFE8];
    swift_bridgeObjectRetain();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
    lazy protocol witness table accessor for type [String] and conformance [A]( (unint64_t *)&lazy protocol witness table cache variable for type [String] and conformance [A],  &demangling cache variable for type metadata for [String],  MEMORY[0x189618458]);
    v75._uint64_t countAndFlagsBits = BidirectionalCollection<>.joined(separator:)();
    String.append(_:)(v75);
    swift_bridgeObjectRelease();
    __int128 v76 = v119;
    lazy protocol witness table accessor for type PredicateCodableError and conformance PredicateCodableError();
    swift_allocError();
    *(_OWORD *)uint64_t v77 = v61;
    *(_OWORD *)(v77 + 16) = v76;
    char v78 = 1;
    goto LABEL_38;
  }

  uint64_t v69 = *(void *)(v66 + 56) + 16 * v67;
  uint64_t v70 = *(void *)v69;
  char v71 = *(_BYTE *)(v69 + 8);
  swift_bridgeObjectRelease();
  if ((v71 & 1) != 0)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v72 = swift_bridgeObjectRetain();
    uint64_t v73 = v113;
    uint64_t v74 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay10Foundation19ExpressionStructure33_EAF63E98CB95A00A30DCCB317F51A4F9LLV8ArgumentOG_18ReflectionInternal07GenericP0OsAE_pTg5016_s10Foundation19e12Structure33_ghijklmno28LLV11reconstruct4with4path18q62Internal4TypeVAA29PredicateCodableConfigurationV_SaySSGtKFAH15sP13OAD0W0OKXEfU_AF29PredicateCodableConfigurationVSaySSGAITf1cn_nTf4nggg_n( v72,  v63,  v66,  v64,  MEMORY[0x18961AFE8],  v61,  *((uint64_t *)&v61 + 1));
    uint64_t v113 = v73;
    if (v73)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
LABEL_39:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v54 = v103;
      uint64_t v60 = v100;
      uint64_t v58 = v106;
      return (*(uint64_t (**)(char *, uint64_t))(v60 + 8))(v58, v54);
    }

    uint64_t v84 = v74;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v85 = PartialType.create2(with:)();
    if (v85)
    {
      uint64_t v86 = v85;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v70 = v86;
      goto LABEL_43;
    }

    lazy protocol witness table accessor for type PredicateCodableError and conformance PredicateCodableError();
    swift_allocError();
    *(void *)uint64_t v77 = v70;
    *(void *)(v77 + 8) = v84;
    *(void *)(v77 + 16) = 0LL;
    *(void *)(v77 + 24) = 0LL;
    char v78 = 2;
LABEL_38:
    *(_BYTE *)(v77 + 32) = v78;
    swift_willThrow();
    goto LABEL_39;
  }

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
LABEL_43:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v117[0] = v70;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any.Type);
  uint64_t v79 = v99;
  uint64_t v121 = v99;
  swift_getExtendedExistentialTypeMetadata();
  if (!swift_dynamicCast())
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    LOBYTE(v119) = 2;
    uint64_t v60 = v100;
    uint64_t v83 = v98;
    uint64_t v58 = v106;
    uint64_t v54 = v103;
    (*(void (**)(void, char *, uint64_t))(v100 + 16))(v98, v106, v103);
    type metadata accessor for DecodingError();
    swift_allocError();
    lazy protocol witness table accessor for type [String] and conformance [A]( &lazy protocol witness table cache variable for type KeyedDecodingContainer<PredicateExpressionCodingKeys> and conformance KeyedDecodingContainer<A>,  &demangling cache variable for type metadata for KeyedDecodingContainer<PredicateExpressionCodingKeys>,  MEMORY[0x189619B88]);
    static DecodingError.dataCorruptedError<A>(forKey:in:debugDescription:)();
    (*(void (**)(uint64_t, uint64_t))(v60 + 8))(v83, v54);
    swift_willThrow();
    return (*(uint64_t (**)(char *, uint64_t))(v60 + 8))(v58, v54);
  }

  __int128 v98 = v119;
  uint64_t v80 = v120;
  LOBYTE(v117[0]) = 0;
  uint64_t v54 = v103;
  uint64_t v58 = v106;
  uint64_t v81 = v113;
  uint64_t v82 = KeyedDecodingContainer.nestedUnkeyedContainer(forKey:)();
  if (v81) {
    goto LABEL_30;
  }
  v117[0] = v63;
  v117[1] = v114;
  char v118 = v64;
  MEMORY[0x1895F8858](v82);
  uint64_t v87 = v102;
  v96[-8] = a4;
  v96[-7] = v87;
  v96[-6] = v79;
  v96[-5] = &v119;
  *(_OWORD *)&v96[-4] = v98;
  v96[-2] = v80;
  v96[-1] = v58;
  uint64_t v88 = v97;
  uint64_t v89 = TupleTypeMetadata2;
  _withPredicateArchivingState<A>(_:_:)( v117,  (void (*)(uint64_t))_ss22KeyedDecodingContainerV10FoundationAC29PredicateExpressionCodingKeysORszrlE7_decode5input6output22predicateConfigurationAC0eF0_pqd_0_6OutputRts_XP10expression_AC0E11ExpressionsO8VariableVy_qd__Gqd__Qp_t8variabletqd__mqd__Qp_qd_0_mAC0e7CodableM0VtKRvd__r0_lFAcJ_pqd_0_ALRS_XPAM_ARqd__Qp_tAStyKXEfU_TA_0);
  uint64_t v113 = 0LL;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined init with take of any PredicateExpression<Self.Output == B1>(v88, v107);
  uint64_t v90 = (void **)v115;
  if (a4)
  {
    uint64_t v91 = (char *)v88 + *(int *)(v89 + 48);
    id v92 = (int *)(v104 + 32);
    uint64_t v93 = a4;
    do
    {
      if (a4 == 1) {
        int v94 = 0;
      }
      else {
        int v94 = *v92;
      }
      uint64_t v95 = *v90++;
      *uint64_t v95 = *(void *)&v91[v94];
      v92 += 4;
      --v93;
    }

    while (v93);
  }

  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v119);
  (*(void (**)(char *, uint64_t))(v100 + 8))(v58, v54);
  return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v105 + 56))(v107, 0LL, 1LL, v89);
}

uint64_t UnkeyedDecodingContainer.decodePredicateExpressionIfPresent<A, each B>(input:output:predicateConfiguration:)@<X0>( uint64_t *a1@<X2>, uint64_t a2@<X3>, char *a3@<X4>, uint64_t a4@<X5>, uint64_t a5@<X6>, uint64_t *a6@<X7>, uint64_t a7@<X8>)
{
  uint64_t v109 = a7;
  uint64_t v102 = a5;
  *(void *)&__int128 v122 = a5;
  uint64_t v12 = (uint64_t *)(a4 & 0xFFFFFFFFFFFFFFFELL);
  uint64_t ExtendedExistentialTypeMetadata = swift_getExtendedExistentialTypeMetadata();
  uint64_t v111 = 8 * a2;
  uint64_t v104 = a4;
  uint64_t v116 = (uint64_t)v12;
  int v117 = a3;
  __int128 v119 = a6;
  if (a2 == 1)
  {
    type metadata accessor for PredicateExpressions.Variable(255LL, *v12, v14, v15);
    uint64_t TupleTypeMetadata = swift_checkMetadataState();
  }

  else
  {
    MEMORY[0x1895F8858](ExtendedExistentialTypeMetadata);
    if (a2)
    {
      uint64_t v20 = (uint64_t *)v116;
      uint64_t v21 = (uint64_t *)((char *)&v95 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0LL));
      uint64_t v22 = a2;
      do
      {
        uint64_t v23 = *v20++;
        *v21++ = type metadata accessor for PredicateExpressions.Variable(255LL, v23, v17, v18);
        --v22;
      }

      while (v22);
    }

    uint64_t TupleTypeMetadata = swift_getTupleTypeMetadata();
  }

  uint64_t v106 = TupleTypeMetadata;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v107 = *(void *)(TupleTypeMetadata2 - 8);
  MEMORY[0x1895F8858](TupleTypeMetadata2);
  uint64_t v100 = (__int128 *)((char *)&v95 - v24);
  uint64_t v105 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<PredicateExpressionCodingKeys>);
  uint64_t v103 = *(void *)(v105 - 8);
  MEMORY[0x1895F8858](v105);
  *(void *)&__int128 v101 = (char *)&v95 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v26);
  BOOL v108 = (char *)&v95 - v28;
  uint64_t v114 = &v95;
  char v115 = &v95;
  uint64_t v113 = v29;
  if (a2 == 1)
  {
    uint64_t MetatypeMetadata = swift_getMetatypeMetadata();
  }

  else
  {
    MEMORY[0x1895F8858](v27);
    if (a2)
    {
      uint64_t v32 = v116;
      unint64_t v33 = (uint64_t *)((char *)&v95 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0LL));
      uint64_t v34 = a2;
      do
      {
        v32 += 8LL;
        *v33++ = swift_getMetatypeMetadata();
        --v34;
      }

      while (v34);
    }

    uint64_t MetatypeMetadata = swift_getTupleTypeMetadata();
  }

  MEMORY[0x1895F8858](MetatypeMetadata);
  uint64_t v36 = (char *)&v95 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v38 = *a1;
  uint64_t v37 = (uint64_t *)a1[1];
  unsigned __int8 v39 = *((_BYTE *)a1 + 16);
  uint64_t v40 = v112;
  uint64_t v42 = v41;
  uint64_t result = dispatch thunk of UnkeyedDecodingContainer.decodeNil()();
  if (!v40)
  {
    uint64_t v96 = v42;
    uint64_t v97 = v38;
    __int128 v98 = v37;
    uint64_t v99 = &v95;
    uint64_t v112 = &v95;
    if ((result & 1) != 0) {
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v107 + 56))( v109,  1LL,  1LL,  TupleTypeMetadata2);
    }
    MEMORY[0x1895F8858](result);
    uint64_t v45 = (char *)&v95 - ((v44 + 15) & 0xFFFFFFFFFFFFFFF0LL);
    unsigned __int8 v46 = v39;
    if (a2)
    {
      uint64_t v47 = v109 + *(int *)(TupleTypeMetadata2 + 48);
      uint64_t v48 = (int *)(v106 + 32);
      unint64_t v49 = (uint64_t *)((char *)&v95 - ((v44 + 15) & 0xFFFFFFFFFFFFFFF0LL));
      uint64_t v50 = a2;
      do
      {
        if (a2 == 1) {
          int v51 = 0;
        }
        else {
          int v51 = *v48;
        }
        *v49++ = v47 + v51;
        v48 += 4;
        --v50;
      }

      while (v50);
    }

    lazy protocol witness table accessor for type PredicateExpressionCodingKeys and conformance PredicateExpressionCodingKeys();
    uint64_t v52 = dispatch thunk of UnkeyedDecodingContainer.nestedContainer<A>(keyedBy:)();
    char v118 = &v95;
    __int128 v119 = &v95;
    size_t v53 = v111;
    MEMORY[0x1895F8858](v52);
    unint64_t v54 = (v53 + 15) & 0xFFFFFFFFFFFFFFF0LL;
    int v117 = (char *)&v95 - v54;
    if (a2)
    {
      memcpy((char *)&v95 - v54, v45, v53);
      uint64_t v125 = v97;
      int v126 = v98;
      unsigned __int8 v127 = v46;
      MEMORY[0x1895F8858](v97);
      uint64_t v55 = (char *)&v95 - v54;
      uint64_t v56 = 0LL;
      int v57 = (int *)(v96 + 32);
      uint64_t v58 = v116;
      do
      {
        if (a2 == 1) {
          int v59 = 0;
        }
        else {
          int v59 = *v57;
        }
        uint64_t v60 = &v36[v59];
        *(void *)uint64_t v60 = *(void *)(v58 + 8 * v56);
        *(void *)&v55[8 * v56++] = v60;
        v57 += 4;
      }

      while (a2 != v56);
    }

    else
    {
      uint64_t v125 = v97;
      int v126 = v98;
      uint64_t v55 = &v128;
      unsigned __int8 v127 = v46;
    }

    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    PredicateCodableConfiguration.allowInputs<each A>(_:)((uint64_t)v55, a2, v104);
    LOBYTE(v120[0]) = 2;
    lazy protocol witness table accessor for type ExpressionStructure and conformance ExpressionStructure();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    __int128 v61 = v122;
    uint64_t v62 = (uint64_t)v126;
    int v63 = v127;
    uint64_t v64 = v126[2];
    uint64_t v116 = v125;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v64)
    {
      LODWORD(v111) = v63;
      swift_bridgeObjectRetain();
      unint64_t v65 = specialized __RawDictionaryStorage.find<A>(_:)(v61, *((uint64_t *)&v61 + 1));
      if ((v66 & 1) != 0)
      {
        __int128 v98 = &v95;
        uint64_t v67 = *(void *)(v62 + 56) + 16 * v65;
        uint64_t v68 = *(void *)v67;
        char v69 = *(_BYTE *)(v67 + 8);
        swift_bridgeObjectRelease();
        if ((v69 & 1) == 0)
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
LABEL_40:
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          v120[0] = v68;
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any.Type);
          uint64_t v124 = v102;
          swift_getExtendedExistentialTypeMetadata();
          int v78 = swift_dynamicCast();
          uint64_t v75 = v105;
          if (v78)
          {
            __int128 v101 = v122;
            uint64_t v79 = v123;
            LOBYTE(v120[0]) = 0;
            uint64_t v80 = v108;
            uint64_t v81 = KeyedDecodingContainer.nestedUnkeyedContainer(forKey:)();
            v120[0] = v116;
            v120[1] = v62;
            char v121 = v111;
            MEMORY[0x1895F8858](v81);
            uint64_t v86 = v104;
            *(&v95 - 8) = a2;
            *(&v95 - 7) = v86;
            *(&v95 - 6) = v102;
            *(&v95 - 5) = (uint64_t)&v122;
            *((_OWORD *)&v95 - 2) = v101;
            *(&v95 - 2) = v79;
            *(&v95 - 1) = (uint64_t)v80;
            uint64_t v87 = v100;
            _withPredicateArchivingState<A>(_:_:)( v120,  (void (*)(uint64_t))_ss22KeyedDecodingContainerV10FoundationAC29PredicateExpressionCodingKeysORszrlE7_decode5input6output22predicateConfigurationAC0eF0_pqd_0_6OutputRts_XP10expression_AC0E11ExpressionsO8VariableVy_qd__Gqd__Qp_t8variabletqd__mqd__Qp_qd_0_mAC0e7CodableM0VtKRvd__r0_lFAcJ_pqd_0_ALRS_XPAM_ARqd__Qp_tAStyKXEfU_TA_0);
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            outlined init with take of any PredicateExpression<Self.Output == B1>(v87, v109);
            uint64_t v89 = (void **)v117;
            if (a2)
            {
              uint64_t v90 = (char *)v87 + *(int *)(TupleTypeMetadata2 + 48);
              uint64_t v91 = (int *)(v106 + 32);
              uint64_t v92 = a2;
              do
              {
                if (a2 == 1) {
                  int v93 = 0;
                }
                else {
                  int v93 = *v91;
                }
                int v94 = *v89++;
                *int v94 = *(void *)&v90[v93];
                v91 += 4;
                --v92;
              }

              while (v92);
            }

            __swift_destroy_boxed_opaque_existential_1((uint64_t)&v122);
            (*(void (**)(char *, uint64_t))(v103 + 8))(v80, v75);
            return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v107 + 56))( v109,  0LL,  1LL,  TupleTypeMetadata2);
          }

          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          LOBYTE(v122) = 2;
          uint64_t v76 = v103;
          uint64_t v82 = v101;
          uint64_t v77 = v108;
          (*(void (**)(void, char *, uint64_t))(v103 + 16))(v101, v108, v75);
          type metadata accessor for DecodingError();
          swift_allocError();
          lazy protocol witness table accessor for type [String] and conformance [A]( &lazy protocol witness table cache variable for type KeyedDecodingContainer<PredicateExpressionCodingKeys> and conformance KeyedDecodingContainer<A>,  &demangling cache variable for type metadata for KeyedDecodingContainer<PredicateExpressionCodingKeys>,  MEMORY[0x189619B88]);
          static DecodingError.dataCorruptedError<A>(forKey:in:debugDescription:)();
          (*(void (**)(uint64_t, uint64_t))(v76 + 8))(v82, v75);
          swift_willThrow();
          return (*(uint64_t (**)(char *, uint64_t))(v76 + 8))(v77, v75);
        }

        uint64_t v70 = v116;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        uint64_t v71 = swift_bridgeObjectRetain();
        uint64_t v83 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay10Foundation19ExpressionStructure33_EAF63E98CB95A00A30DCCB317F51A4F9LLV8ArgumentOG_18ReflectionInternal07GenericP0OsAE_pTg5016_s10Foundation19e12Structure33_ghijklmno28LLV11reconstruct4with4path18q62Internal4TypeVAA29PredicateCodableConfigurationV_SaySSGtKFAH15sP13OAD0W0OKXEfU_AF29PredicateCodableConfigurationVSaySSGAITf1cn_nTf4nggg_n( v71,  v70,  v62,  v111,  MEMORY[0x18961AFE8],  v61,  *((uint64_t *)&v61 + 1));
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v84 = PartialType.create2(with:)();
        if (v84)
        {
          uint64_t v85 = v84;
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          uint64_t v68 = v85;
          goto LABEL_40;
        }

        lazy protocol witness table accessor for type PredicateCodableError and conformance PredicateCodableError();
        swift_allocError();
        *(void *)uint64_t v88 = v68;
        *(void *)(v88 + 8) = v83;
        *(void *)(v88 + 16) = 0LL;
        *(void *)(v88 + 24) = 0LL;
        *(_BYTE *)(v88 + 32) = 2;
        swift_willThrow();
LABEL_36:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v75 = v105;
        uint64_t v76 = v103;
        uint64_t v77 = v108;
        return (*(uint64_t (**)(char *, uint64_t))(v76 + 8))(v77, v75);
      }

      swift_bridgeObjectRelease();
    }

    *(void *)&__int128 v122 = 47LL;
    *((void *)&v122 + 1) = 0xE100000000000000LL;
    v120[0] = MEMORY[0x18961AFE8];
    swift_bridgeObjectRetain();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
    lazy protocol witness table accessor for type [String] and conformance [A]( (unint64_t *)&lazy protocol witness table cache variable for type [String] and conformance [A],  &demangling cache variable for type metadata for [String],  MEMORY[0x189618458]);
    v72._uint64_t countAndFlagsBits = BidirectionalCollection<>.joined(separator:)();
    String.append(_:)(v72);
    swift_bridgeObjectRelease();
    __int128 v73 = v122;
    lazy protocol witness table accessor for type PredicateCodableError and conformance PredicateCodableError();
    swift_allocError();
    *(_OWORD *)uint64_t v74 = v61;
    *(_OWORD *)(v74 + 16) = v73;
    *(_BYTE *)(v74 + 32) = 1;
    swift_willThrow();
    goto LABEL_36;
  }

  return result;
}

id NSExpression.init(format:_:)()
{
  uint64_t v0 = getVaList(_:)();
  swift_bridgeObjectRelease();
  ObjCClassFromMetadata = (void *)swift_getObjCClassFromMetadata();
  id v2 =  objc_msgSend( ObjCClassFromMetadata,  sel_expressionWithFormat_arguments_,  String._bridgeToObjectiveCImpl()(),  v0);
  swift_unknownObjectRelease();
  return v2;
}

id NSExpression.init<A, B>(forKeyPath:)()
{
  ObjCClassFromMetadata = (void *)swift_getObjCClassFromMetadata();
  _bridgeKeyPathToString(_:)();
  uint64_t v1 = String._bridgeToObjectiveCImpl()();
  swift_bridgeObjectRelease();
  id v2 = objc_msgSend(ObjCClassFromMetadata, sel_expressionForKeyPath_, v1);
  swift_unknownObjectRelease();
  swift_release();
  return v2;
}

unint64_t AttributedString.Runs.init(_:in:)@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  __int128 v4 = *(_OWORD *)(a1 + 32);
  __int128 v114 = *(_OWORD *)(a1 + 16);
  __int128 v115 = v4;
  __int128 v116 = *(_OWORD *)(a1 + 48);
  BigString.unicodeScalars.getter();
  swift_retain();
  unint64_t v5 = BigString.UnicodeScalarView.index(roundingDown:)();
  uint64_t v7 = v6;
  uint64_t v9 = v8;
  uint64_t v11 = v10;
  outlined release of Locale((uint64_t)v105);
  __int128 v12 = *(_OWORD *)(a1 + 32);
  __int128 v111 = *(_OWORD *)(a1 + 16);
  __int128 v112 = v12;
  __int128 v113 = *(_OWORD *)(a1 + 48);
  BigString.unicodeScalars.getter();
  unint64_t v13 = BigString.UnicodeScalarView.index(roundingDown:)();
  uint64_t v96 = v15;
  uint64_t v97 = v14;
  uint64_t v95 = v16;
  unint64_t result = outlined release of Locale((uint64_t)v106);
  unint64_t v18 = v13 >> 10;
  if (v13 >> 10 < v5 >> 10) {
    goto LABEL_67;
  }
  AttributedString.Guts.findRun(at:)(v5, (uint64_t *)&v99);
  unint64_t v93 = *((void *)&v99 + 1);
  uint64_t v94 = v99;
  uint64_t v91 = *((void *)&v101 + 1);
  unint64_t v92 = v100;
  uint64_t v89 = v103;
  uint64_t v90 = v102;
  uint64_t v87 = *((void *)&v100 + 1);
  uint64_t v88 = v104;
  __int128 v19 = *(_OWORD *)(a1 + 32);
  __int128 v99 = *(_OWORD *)(a1 + 16);
  __int128 v100 = v19;
  __int128 v101 = *(_OWORD *)(a1 + 48);
  uint64_t v85 = v7;
  unint64_t v86 = v5;
  uint64_t v83 = v11;
  uint64_t v84 = v9;
  unint64_t v98 = v13;
  if (v18 == (unint64_t)BigString.endIndex.getter() >> 10)
  {
    if (*(void *)(a1 + 64)) {
      uint64_t v20 = *(void *)(a1 + 72);
    }
    else {
      uint64_t v20 = 0LL;
    }
    uint64_t v21 = *(void *)(a1 + 88);
    unint64_t v22 = swift_unknownObjectRetain();
    uint64_t v81 = v21;
    unint64_t v79 = specialized Rope._endPath.getter(v22);
    swift_release();
    swift_unknownObjectRelease();
    unint64_t result = 0LL;
    uint64_t v23 = v13;
    uint64_t v25 = v96;
    uint64_t v24 = v97;
    uint64_t v26 = v97;
    uint64_t v27 = v96;
    uint64_t v28 = v95;
    uint64_t v29 = v95;
LABEL_62:
    uint64_t v39 = v87;
    uint64_t v31 = v88;
    unint64_t v34 = v93;
    uint64_t v37 = v94;
    uint64_t v32 = v91;
    unint64_t v35 = v92;
    uint64_t v30 = v89;
    uint64_t v33 = v90;
    unint64_t v36 = v79;
    uint64_t v38 = v81;
    if (v20 < v87) {
      goto LABEL_68;
    }
    goto LABEL_63;
  }

  unint64_t result = BigString.startIndex.getter();
  if (v18 == result >> 10)
  {
    swift_release();
    uint64_t v31 = v88;
    uint64_t v30 = v89;
    uint64_t v29 = v88;
    uint64_t v27 = v89;
    uint64_t v33 = v90;
    uint64_t v32 = v91;
    uint64_t v26 = v90;
    uint64_t v23 = v91;
    unint64_t v35 = v92;
    unint64_t v34 = v93;
    unint64_t result = v92;
    unint64_t v36 = v93;
    uint64_t v37 = v94;
    uint64_t v28 = v95;
    uint64_t v38 = v94;
    uint64_t v39 = v87;
    uint64_t v20 = v87;
    uint64_t v25 = v96;
    uint64_t v24 = v97;
LABEL_63:
    *a2 = a1;
    a2[1] = v39;
    a2[2] = v37;
    a2[3] = v34;
    a2[4] = v35;
    a2[5] = v32;
    a2[6] = v33;
    a2[7] = v30;
    a2[8] = v31;
    a2[9] = v20;
    a2[10] = v38;
    a2[11] = v36;
    a2[12] = result;
    a2[13] = v23;
    a2[14] = v26;
    a2[15] = v27;
    a2[16] = v29;
    a2[17] = v86;
    a2[18] = v85;
    a2[19] = v84;
    a2[20] = v83;
    a2[21] = v98;
    a2[22] = v24;
    a2[23] = v25;
    a2[24] = v28;
    return result;
  }

  uint64_t v40 = *(void *)(a1 + 64);
  uint64_t v41 = *(void *)(a1 + 80);
  if (!v40) {
    uint64_t v41 = 0LL;
  }
  if (v13 < 0x800) {
    goto LABEL_72;
  }
  int64_t v42 = v13 >> 11;
  uint64_t v75 = (v13 >> 11) - 1;
  uint64_t v77 = *(void *)(a1 + 72);
  uint64_t v43 = *(void *)(a1 + 88);
  uint64_t v82 = v43;
  if (!v40 || v42 > *(void *)(a1 + 80) || !*(_WORD *)(v40 + 16))
  {
    unint64_t v56 = swift_unknownObjectRetain_n();
    unint64_t v57 = specialized Rope._endPath.getter(v56);
    unint64_t result = swift_unknownObjectRelease();
    uint64_t v48 = 0LL;
    uint64_t v45 = 0LL;
    if (!v40)
    {
      uint64_t v58 = 0LL;
LABEL_53:
      BOOL v51 = __OFSUB__(v75, v45);
      uint64_t v65 = v75 - v45;
      if (v51) {
        goto LABEL_73;
      }
      uint64_t v66 = *(void *)(a1 + 64);
      uint64_t v67 = *(void *)(a1 + 72);
      uint64_t v80 = *(void *)(a1 + 80);
      uint64_t v68 = *(void *)(a1 + 88);
      *(void *)&__int128 v108 = v82;
      *((void *)&v108 + 1) = v57;
      *(void *)&__int128 v109 = v48;
      if (__OFADD__(v58, 1LL))
      {
LABEL_74:
        __break(1u);
      }

      else if (v82 == v68)
      {
        uint64_t v78 = v58 + 1;
        if (v48)
        {
          unint64_t v69 = *(void *)(v48 + 24 * ((v57 >> ((4 * *(_BYTE *)(v48 + 18) + 8) & 0x3C)) & 0xF) + 24);
          swift_unknownObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
        }

        else
        {
          swift_unknownObjectRetain();
          unint64_t v69 = specialized Rope._Node.subscript.getter(v57, v66);
        }

        swift_bridgeObjectRelease();
        unint64_t result = swift_bridgeObjectRelease();
        if (!__OFADD__(v65, v69))
        {
          swift_unknownObjectRetain();
          specialized Rope.formIndex(after:)(&v108, v66, v67, v80, v82);
          swift_unknownObjectRelease_n();
          unint64_t v79 = *((void *)&v108 + 1);
          uint64_t v81 = v108;
          unint64_t v76 = v109;
          __int128 v70 = *(_OWORD *)(a1 + 32);
          __int128 v108 = *(_OWORD *)(a1 + 16);
          __int128 v109 = v70;
          __int128 v110 = *(_OWORD *)(a1 + 48);
          unint64_t result = BigString.utf8.getter();
          if (!__OFSUB__(v65 + v69, v42))
          {
            uint64_t v24 = v97;
            uint64_t v28 = v95;
            uint64_t v25 = v96;
            uint64_t v23 = BigString.UTF8View.index(_:offsetBy:)();
            uint64_t v26 = v71;
            uint64_t v27 = v72;
            uint64_t v29 = v73;
            outlined release of Locale((uint64_t)v107);
            swift_release();
            unint64_t result = v76;
            uint64_t v20 = v78;
            goto LABEL_62;
          }

          goto LABEL_77;
        }

unint64_t AttributedString.runs.getter@<X0>(void *a1@<X8>)
{
  unint64_t v2 = BigString.startIndex.getter();
  unint64_t result = BigString.endIndex.getter();
  if (result >> 10 < v2 >> 10)
  {
    __break(1u);
  }

  else
  {
    uint64_t v4 = swift_retain();
    return AttributedString.Runs.init(_:in:)(v4, a1);
  }

  return result;
}

unint64_t protocol witness for AttributedStringProtocol.runs.getter in conformance AttributedString@<X0>( void *a1@<X8>)
{
  unint64_t v2 = BigString.startIndex.getter();
  unint64_t result = BigString.endIndex.getter();
  if (result >> 10 < v2 >> 10)
  {
    __break(1u);
  }

  else
  {
    uint64_t v4 = swift_retain();
    return AttributedString.Runs.init(_:in:)(v4, a1);
  }

  return result;
}

unint64_t *AttributedString.Runs.subscript.getter@<X0>( unint64_t *result@<X0>, void *a2@<X8>)
{
  unint64_t v4 = *result;
  unint64_t v5 = *result >> 10;
  if (v5 < v2[17] >> 10 || v5 >= v2[21] >> 10) {
    goto LABEL_59;
  }
  uint64_t v6 = *v2;
  uint64_t v7 = *(void *)(*v2 + 64LL);
  int64_t v8 = v4 >> 11;
  if (v7) {
    uint64_t v9 = *(void *)(*v2 + 80LL);
  }
  else {
    uint64_t v9 = 0LL;
  }
  if (v9 < v8)
  {
LABEL_60:
    __break(1u);
    goto LABEL_61;
  }

  unint64_t v40 = v4 >> 11;
  uint64_t v41 = *(void *)(v6 + 88);
  uint64_t v39 = *(void *)(v6 + 72);
  if (!v7 || (v8 < *(void *)(*v2 + 80LL) ? (BOOL v10 = *(unsigned __int16 *)(v7 + 16) == 0) : (BOOL v10 = 1), v10))
  {
    unint64_t v11 = swift_unknownObjectRetain_n();
    unint64_t v12 = specialized Rope._endPath.getter(v11);
    unint64_t result = (unint64_t *)swift_unknownObjectRelease();
    uint64_t v13 = 0LL;
    int64_t v8 = 0LL;
    if (!v7)
    {
      uint64_t v14 = 0LL;
LABEL_50:
      if (!__OFSUB__(v40, v8))
      {
        v43[0] = v41;
        v43[1] = v12;
        void v43[2] = v13;
        v43[3] = v14;
        v43[4] = v40 - v8;
        __int128 v31 = *(_OWORD *)(v6 + 32);
        __int128 v44 = *(_OWORD *)(v6 + 16);
        __int128 v45 = v31;
        __int128 v46 = *(_OWORD *)(v6 + 48);
        unint64_t result = (unint64_t *)BigString.utf8.getter();
        if (!__OFSUB__(0LL, v8))
        {
          unint64_t v32 = BigString.UTF8View.index(_:offsetBy:)();
          uint64_t v34 = v33;
          uint64_t v36 = v35;
          uint64_t v38 = v37;
          outlined release of Locale((uint64_t)v42);
          return (unint64_t *)AttributedString.Runs.subscript.getter((uint64_t)v43, v32, v34, v36, v38, a2);
        }

        goto LABEL_62;
      }

unint64_t *AttributedString.Runs._slicedRunBoundary(before:attributeNames:constraints:)@<X0>( unint64_t *result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unint64_t *a4@<X8>)
{
  unint64_t v6 = *result;
  unint64_t v7 = *(void *)(v4 + 136);
  unint64_t v8 = *result >> 10;
  if (v7 >> 10 >= v8 || *(void *)(v4 + 168) >> 10 < v8) {
    goto LABEL_72;
  }
  if (!*(void *)(a2 + 16))
  {
LABEL_73:
    __break(1u);
LABEL_74:
    __break(1u);
    goto LABEL_75;
  }

  unint64_t v10 = *(void *)v4;
  uint64_t v11 = *(void *)(*(void *)v4 + 64LL);
  if (v11) {
    uint64_t v12 = *(void *)(*(void *)v4 + 80LL);
  }
  else {
    uint64_t v12 = 0LL;
  }
  if (v6 < 0x800) {
    goto LABEL_74;
  }
  uint64_t v13 = (v6 >> 11) - 1;
  if (v12 < v13) {
    goto LABEL_74;
  }
  unint64_t v14 = result[3];
  uint64_t v15 = *(void *)(v4 + 152);
  uint64_t v86 = *(void *)(v4 + 144);
  uint64_t v84 = v15;
  uint64_t v85 = *(void *)(v4 + 160);
  uint64_t v16 = *(void *)(v10 + 72);
  uint64_t v17 = *(void *)(v10 + 88);
  uint64_t v72 = a4;
  unint64_t v76 = *result >> 10;
  unint64_t v77 = v7 >> 10;
  unint64_t v82 = *(void *)(v4 + 136);
  unint64_t v74 = result[2];
  unint64_t v75 = result[1];
  unint64_t v73 = *result;
  unint64_t v80 = v6 >> 11;
  __int128 v78 = *(_OWORD *)(v4 + 184);
  __int128 v79 = *(_OWORD *)(v4 + 168);
  uint64_t v83 = (v6 >> 11) - 1;
  if (v11)
  {
    if ((int64_t)(v6 >> 11) <= *(void *)(*(void *)v4 + 80LL) && *(_WORD *)(v11 + 16) != 0)
    {
      uint64_t v69 = *(void *)(v10 + 88);
      uint64_t v70 = *(void *)(v10 + 72);
      uint64_t v25 = *(unsigned __int8 *)(v11 + 18);
      if (*(_BYTE *)(v11 + 18))
      {
        unint64_t result = (unint64_t *)swift_unknownObjectRetain_n();
        uint64_t v21 = v11;
        while (1)
        {
          uint64_t v27 = *(unsigned __int16 *)(v21 + 16);
          if (*(_WORD *)(v21 + 16))
          {
            uint64_t v28 = *(void *)(v21 + 40);
            BOOL v29 = __OFSUB__(v13, v28);
            uint64_t v30 = v13 - v28;
            if (v29) {
              goto LABEL_70;
            }
            if (__OFADD__(v30, 1LL)) {
              goto LABEL_71;
            }
            if (v30 + 1 < 1)
            {
              uint64_t v27 = 0LL;
              goto LABEL_24;
            }

            if ((_DWORD)v27 != 1)
            {
              __int128 v31 = (uint64_t *)(v21 + 64);
              uint64_t v32 = 1LL;
              while (1)
              {
                uint64_t v33 = *v31;
                v31 += 3;
                uint64_t v13 = v30 - v33;
                if (__OFSUB__(v30, v33)) {
                  break;
                }
                if (__OFADD__(v13, 1LL)) {
                  goto LABEL_68;
                }
                if (v13 + 1 < 1)
                {
                  uint64_t v27 = v32;
                  uint64_t v13 = v30;
                  goto LABEL_24;
                }

                ++v32;
                uint64_t v30 = v13;
                if (v27 == v32) {
                  goto LABEL_23;
                }
              }

              __break(1u);
LABEL_68:
              __break(1u);
LABEL_69:
              __break(1u);
LABEL_70:
              __break(1u);
LABEL_71:
              __break(1u);
LABEL_72:
              __break(1u);
              goto LABEL_73;
            }

            uint64_t v13 = v30;
          }

unint64_t *AttributedString.Runs._slicedRunBoundary(after:attributeNames:constraints:)@<X0>( unint64_t *result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  unint64_t v5 = *result;
  unint64_t v6 = *result >> 10;
  if (v6 < (unint64_t)v4[17] >> 10 || (unint64_t v7 = v4, v86 = v4[21], v6 >= v86 >> 10))
  {
LABEL_71:
    __break(1u);
    goto LABEL_72;
  }

  if (!*(void *)(a2 + 16))
  {
LABEL_72:
    __break(1u);
LABEL_73:
    __break(1u);
    goto LABEL_74;
  }

  uint64_t v8 = *v4;
  uint64_t v9 = *(void *)(*v4 + 64);
  int64_t v10 = v5 >> 11;
  if (v9) {
    int64_t v11 = *(void *)(*v4 + 80);
  }
  else {
    int64_t v11 = 0LL;
  }
  if (v11 < v10) {
    goto LABEL_73;
  }
  unint64_t v85 = result[2];
  unint64_t v84 = result[3];
  uint64_t v83 = v4[22];
  uint64_t v82 = v4[23];
  uint64_t v78 = *result;
  unint64_t v79 = result[1];
  unint64_t v71 = v86 >> 10;
  unint64_t v72 = *result >> 10;
  uint64_t v76 = v4[17];
  uint64_t v74 = v4[19];
  uint64_t v75 = v4[18];
  uint64_t v73 = v4[20];
  uint64_t v80 = *(void *)(v8 + 88);
  uint64_t v81 = v4[24];
  uint64_t v68 = *(void *)(v8 + 72);
  if (!v9 || v10 >= *(void *)(*v4 + 80) || !*(_WORD *)(v9 + 16))
  {
    unint64_t v23 = swift_unknownObjectRetain_n();
    uint64_t v24 = specialized Rope._endPath.getter(v23);
    swift_unknownObjectRelease();
    uint64_t v15 = 0LL;
    uint64_t v12 = 0LL;
    if (!v9) {
      goto LABEL_62;
    }
    goto LABEL_30;
  }

  unint64_t v5 = *(unsigned __int8 *)(v9 + 18);
  if (*(_BYTE *)(v9 + 18))
  {
    unint64_t result = (unint64_t *)swift_unknownObjectRetain_n();
    uint64_t v12 = v10;
    uint64_t v13 = v9;
    while (1)
    {
      uint64_t v16 = *(unsigned __int16 *)(v13 + 16);
      if (!*(_WORD *)(v13 + 16)) {
        goto LABEL_14;
      }
      uint64_t v17 = *(void *)(v13 + 40);
      BOOL v18 = __OFSUB__(v12, v17);
      uint64_t v19 = v12 - v17;
      if (v18) {
        goto LABEL_69;
      }
      if (__OFADD__(v19, 1LL)) {
        goto LABEL_70;
      }
      if (v19 + 1 < 1)
      {
        uint64_t v16 = 0LL;
        goto LABEL_15;
      }

      if ((_DWORD)v16 == 1) {
        break;
      }
      unint64_t v20 = (uint64_t *)(v13 + 64);
      uint64_t v21 = 1LL;
      while (1)
      {
        uint64_t v22 = *v20;
        v20 += 3;
        uint64_t v12 = v19 - v22;
        if (__OFSUB__(v19, v22))
        {
          __break(1u);
LABEL_67:
          __break(1u);
          goto LABEL_68;
        }

        if (__OFADD__(v12, 1LL)) {
          goto LABEL_67;
        }
        if (v12 + 1 < 1) {
          break;
        }
        ++v21;
        uint64_t v19 = v12;
        if (v16 == v21) {
          goto LABEL_14;
        }
      }

      uint64_t v16 = v21;
      uint64_t v12 = v19;
LABEL_15:
      char v14 = (4 * *(_BYTE *)(v13 + 18) + 8) & 0x3C;
      unint64_t v5 = ((-15LL << v14) - 1) & v5 | (v16 << v14);
      uint64_t v15 = *(void *)(v13 + 24 + 24 * v16);
      swift_unknownObjectRetain();
      unint64_t result = (unint64_t *)swift_unknownObjectRelease();
      uint64_t v13 = v15;
      if (!*(_BYTE *)(v15 + 18)) {
        goto LABEL_47;
      }
    }

    uint64_t v12 = v19;
LABEL_14:
    if (!v12) {
      goto LABEL_15;
    }
LABEL_68:
    __break(1u);
LABEL_69:
    __break(1u);
LABEL_70:
    __break(1u);
    goto LABEL_71;
  }

  unint64_t result = (unint64_t *)swift_unknownObjectRetain_n();
  uint64_t v12 = v10;
  uint64_t v15 = v9;
LABEL_47:
  uint64_t v64 = *(unsigned __int16 *)(v15 + 16);
  if (*(_WORD *)(v15 + 16))
  {
    uint64_t v65 = *(void *)(v15 + 24);
    BOOL v18 = __OFSUB__(v12, v65);
    uint64_t v27 = v12 - v65;
    if (v18)
    {
LABEL_81:
      __break(1u);
      goto LABEL_82;
    }

    if (__OFADD__(v27, 1LL))
    {
LABEL_82:
      __break(1u);
      goto LABEL_83;
    }

    if (v27 + 1 < 1)
    {
      uint64_t v64 = 0LL;
      goto LABEL_61;
    }

    if ((_DWORD)v64 != 1)
    {
      unint64_t v66 = (uint64_t *)(v15 + 48);
      uint64_t v25 = 1LL;
      while (1)
      {
        uint64_t v67 = *v66;
        v66 += 3;
        uint64_t v12 = v27 - v67;
        if (__OFSUB__(v27, v67)) {
          goto LABEL_79;
        }
        if (__OFADD__(v12, 1LL)) {
          goto LABEL_80;
        }
        if (v12 + 1 < 1) {
          goto LABEL_65;
        }
        ++v25;
        uint64_t v27 = v12;
        if (v64 == v25) {
          goto LABEL_60;
        }
      }
    }

    uint64_t v12 = v27;
  }

unint64_t AttributedString.Runs._slicedRunBoundary(roundingDown:attributeNames:constraints:)@<X0>( unint64_t result@<X0>, unint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X8>)
{
  unint64_t v6 = *a2;
  unint64_t v7 = v5[17];
  unint64_t v8 = *a2 >> 10;
  if (v8 < v7 >> 10 || v5[21] >> 10 < v8)
  {
LABEL_182:
    __break(1u);
    goto LABEL_183;
  }

  if (!*(void *)(a3 + 16))
  {
LABEL_183:
    __break(1u);
LABEL_184:
    __break(1u);
    goto LABEL_185;
  }

  unint64_t v211 = *(void *)(a3 + 16);
  uint64_t v215 = a4;
  unint64_t v10 = *v5;
  uint64_t v11 = *(void *)(*v5 + 64);
  uint64_t v12 = *(void *)(*v5 + 80);
  int64_t v13 = v6 >> 11;
  if (v11) {
    uint64_t v14 = *(void *)(*v5 + 80);
  }
  else {
    uint64_t v14 = 0LL;
  }
  if (v14 < v13) {
    goto LABEL_184;
  }
  uint64_t v16 = (__int128 *)a2[1];
  unint64_t v15 = a2[2];
  unint64_t v17 = a2[3];
  uint64_t v195 = v5[1];
  unint64_t v18 = v5[9];
  uint64_t v19 = (__int128 *)v5[18];
  unint64_t v20 = v5[19];
  unint64_t v21 = v5[20];
  uint64_t v22 = *(void *)(v10 + 72);
  uint64_t v23 = *(void *)(v10 + 88);
  unint64_t v213 = v10;
  uint64_t v202 = (void *)result;
  uint64_t v203 = a5;
  unint64_t v209 = v17;
  unint64_t v210 = v6;
  unint64_t v192 = v7 >> 10;
  unint64_t v193 = v7;
  unint64_t v208 = v15;
  unint64_t v190 = v20;
  unint64_t v191 = v19;
  unint64_t v189 = v21;
  uint64_t v204 = a3;
  unint64_t v217 = v18;
  if (!v11 || (v13 < v12 ? (BOOL v24 = *(unsigned __int16 *)(v11 + 16) == 0) : (BOOL v24 = 1), v24))
  {
    unint64_t v25 = swift_unknownObjectRetain_n();
    unint64_t v212 = specialized Rope._endPath.getter(v25);
    unint64_t result = swift_unknownObjectRelease();
    uint64_t v26 = 0LL;
    uint64_t v27 = 0LL;
    if (!v11)
    {
      uint64_t v28 = 0LL;
LABEL_54:
      uint64_t v207 = v13 - v27;
      if (__OFSUB__(v13, v27))
      {
LABEL_185:
        __break(1u);
LABEL_186:
        __break(1u);
LABEL_187:
        __break(1u);
LABEL_188:
        __break(1u);
        goto LABEL_189;
      }

      __int128 v46 = *(_OWORD *)(v213 + 32);
      v253[3] = *(_OWORD *)(v213 + 16);
      v253[4] = v46;
      v253[5] = *(_OWORD *)(v213 + 48);
      unint64_t result = BigString.utf8.getter();
      if (__OFSUB__(0LL, v27)) {
        goto LABEL_186;
      }
      uint64_t v47 = v209;
      uint64_t v48 = BigString.UTF8View.index(_:offsetBy:)();
      uint64_t v50 = v49;
      uint64_t v187 = v52;
      uint64_t v188 = v51;
      unint64_t result = outlined release of Locale((uint64_t)&v240);
      uint64_t v200 = v28;
      uint64_t v201 = v26;
      if (v28 == v217)
      {
        unint64_t v53 = v210;
        uint64_t v54 = v16;
        uint64_t v55 = v208;
        goto LABEL_173;
      }

      uint64_t v194 = v16;
      unint64_t v56 = v213;
      if (v23 != *(void *)(v213 + 88))
      {
LABEL_189:
        __break(1u);
LABEL_190:
        __break(1u);
LABEL_191:
        __break(1u);
LABEL_192:
        __break(1u);
        goto LABEL_193;
      }

      uint64_t v183 = v50;
      unint64_t v184 = v48;
      if (v26)
      {
        unint64_t v57 = v26 + 24 * ((v212 >> ((4 * *(_BYTE *)(v26 + 18) + 8) & 0x3C)) & 0xF);
        uint64_t v59 = *(void *)(v57 + 32);
        uint64_t v58 = *(void *)(v57 + 40);
        swift_bridgeObjectRetain();
        uint64_t v182 = v58;
        unint64_t result = swift_bridgeObjectRetain();
      }

      else
      {
        uint64_t v60 = *(void *)(v213 + 64);
        swift_unknownObjectRetain();
        specialized Rope._Node.subscript.getter(v212, v60);
        uint64_t v59 = v61;
        uint64_t v182 = v62;
        unint64_t result = swift_unknownObjectRelease();
      }

      unint64_t v63 = v211;
      uint64_t v198 = v23;
      if (v195 >= v28)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v112 = v207;
LABEL_121:
        __int128 v113 = (_OWORD *)(v56 + 16);
        __int128 v114 = *(_OWORD *)(v56 + 32);
        __int128 v218 = *(_OWORD *)(v56 + 16);
        __int128 v219 = v114;
        __int128 v220 = *(_OWORD *)(v56 + 48);
        BigString.utf8.getter();
        unint64_t result = v184;
        if (__OFSUB__(v112, v184 >> 11)) {
          goto LABEL_190;
        }
        unint64_t v115 = BigString.UTF8View.index(_:offsetBy:)();
        uint64_t v117 = v116;
        unint64_t v119 = v118;
        uint64_t v121 = v120;
        outlined release of Locale((uint64_t)&v241);
        if (v192 >= v115 >> 10) {
          unint64_t v122 = v193;
        }
        else {
          unint64_t v122 = v115;
        }
        if (v192 >= v115 >> 10) {
          uint64_t v123 = v191;
        }
        else {
          uint64_t v123 = v117;
        }
        if (v192 < v115 >> 10)
        {
          uint64_t v47 = v121;
        }

        else
        {
          unint64_t v119 = v190;
          uint64_t v47 = v189;
        }

        __int128 v124 = *(_OWORD *)(v56 + 32);
        v253[0] = *v113;
        v253[1] = v124;
        v253[2] = *(_OWORD *)(v56 + 48);
        BigString.unicodeScalars.getter();
        unint64_t v125 = BigString.UnicodeScalarView.index(after:)();
        uint64_t v127 = v126;
        unint64_t v129 = v128;
        uint64_t v131 = v130;
        unint64_t result = outlined release of Locale((uint64_t)&v242);
        __int128 v132 = *v113;
        __int128 v133 = v113[2];
        v252[1] = v113[1];
        v252[2] = v133;
        v252[0] = v132;
        if (v125 >> 10 < v122 >> 10) {
          goto LABEL_191;
        }
        unint64_t v53 = v122;
        *(void *)&__int128 v235 = v122;
        *((void *)&v235 + 1) = v123;
        *(void *)&__int128 v236 = v119;
        *((void *)&v236 + 1) = v47;
        *(void *)&__int128 v237 = v125;
        *((void *)&v237 + 1) = v127;
        *(void *)&__int128 v238 = v129;
        *((void *)&v238 + 1) = v131;
        uint64_t v54 = v123;
        uint64_t v55 = v119;
        if (v122 >> 10 != v125 >> 10)
        {
          unint64_t v134 = v129;
          uint64_t v135 = *(void *)(v215 + 16);
          if (v135)
          {
            unint64_t v213 = v53;
            int v214 = v123;
            int v216 = (uint64_t *)v131;
            unint64_t v217 = v47;
            unint64_t v211 = v125 >> 10;
            uint64_t v136 = v55;
            outlined retain of Locale((uint64_t)v252);
            swift_bridgeObjectRetain();
            uint64_t v137 = 40LL;
            uint64_t v138 = v135;
            while (*(void *)(v215 + v137))
            {
              swift_bridgeObjectRelease();
              v137 += 16LL;
              if (!--v138)
              {
                uint64_t v139 = v215;
                unint64_t result = swift_bridgeObjectRelease();
LABEL_144:
                unint64_t v149 = v213;
                uint64_t v147 = v214;
                uint64_t v148 = v136;
                uint64_t v47 = v217;
                goto LABEL_145;
              }
            }

            uint64_t v139 = v215;
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease_n();
            unint64_t result = BigString.startIndex.getter();
            unint64_t v140 = v211;
            if (v211 <= result >> 10) {
              goto LABEL_144;
            }
            BigString.utf8.getter();
            unint64_t v210 = v134;
            uint64_t v141 = (uint64_t)v216;
            unint64_t v142 = BigString.UTF8View.index(before:)();
            unint64_t v208 = v144;
            unint64_t v209 = v143;
            uint64_t v206 = v145;
            outlined release of Locale((uint64_t)v243);
            BigString.utf8.getter();
            BigString.UTF8View.subscript.getter();
            unint64_t result = outlined release of Locale((uint64_t)v244);
            if (v140 < v142 >> 10) {
              goto LABEL_201;
            }
            *(void *)&__int128 v230 = v142;
            *((void *)&v230 + 1) = v209;
            *(void *)&__int128 v231 = v208;
            *((void *)&v231 + 1) = v206;
            *(void *)&__int128 v232 = v125;
            *((void *)&v232 + 1) = v127;
            unint64_t v146 = v210;
            *(void *)&__int128 v233 = v210;
            *((void *)&v233 + 1) = v141;
            specialized BidirectionalCollection<>._getBlock(for:in:)(1LL, &v230, &v224);
            unint64_t result = outlined release of Locale((uint64_t)&v245);
            uint64_t v147 = v214;
            uint64_t v139 = v215;
            uint64_t v148 = v136;
            uint64_t v47 = v217;
            unint64_t v134 = v146;
            unint64_t v149 = v213;
            if (v227 != 2)
            {
              unint64_t v149 = v224;
              if (v211 < v224 >> 10) {
                goto LABEL_203;
              }
              uint64_t v147 = (__int128 *)v225;
              uint64_t v148 = v226;
              uint64_t v47 = v227;
            }

LABEL_197:
      __break(1u);
      goto LABEL_198;
    }

          *(void *)(v203 + 8 * v202) = v205 | v204;
          *(void *)(*(void *)(v197 + 48) + 8 * v201) = v262;
          uint64_t v227 = *(void *)(v197 + 16);
          uint64_t v42 = __OFADD__(v227, 1LL);
          uint64_t v228 = v227 + 1;
          if (v42) {
            goto LABEL_248;
          }
          *(void *)(v197 + 16) = v228;
LABEL_199:
          swift_setDeallocating();
          swift_arrayDestroy();
          swift_deallocClassInstance();
          uint64_t v229 = swift_bridgeObjectRetain();
          specialized _copyCollectionToContiguousArray<A>(_:)(v229);
          swift_release();
          __int128 v230 = _ContiguousArrayBuffer._asCocoaArray()();
          *(void *)&__int128 v278 = 0LL;
          __int128 v231 = objc_msgSend(v272, sel_resourceValuesForKeys_error_, v230, &v278);
          swift_unknownObjectRelease();
          __int128 v232 = (void *)v278;
          if (!v231)
          {
            if ((void)v278)
            {
              (id)v278;
            }

            else
            {
              if (one-time initialization token for _nilObjCError != -1) {
                swift_once();
              }
              uint64_t v248 = (id)_nilObjCError;
            }

            swift_willThrow();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_release();
            swift_release();
            swift_release();

            outlined consume of URL?(v272);
            return;
          }

          __int128 v233 = specialized static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v231);
          uint64_t v234 = v232;

          if (*(void *)(v233 + 16))
          {
            __int128 v235 = v251;
            __int128 v236 = v251;
            __int128 v237 = specialized __RawDictionaryStorage.find<A>(_:)(v236);
            __int128 v238 = v265;
            if ((v239 & 1) != 0)
            {
              outlined init with copy of Any(*(void *)(v233 + 56) + 32 * v237, (uint64_t)&v278);
            }

            else
            {
              __int128 v278 = 0u;
              uint64_t v279 = 0u;
            }
          }

          else
          {
            __int128 v278 = 0u;
            uint64_t v279 = 0u;
            __int128 v238 = v265;
            __int128 v235 = v251;
          }

          if ((swift_dynamicCast() & 1) != 0)
          {
            uint64_t v240 = v277;
          }

          else
          {
            uint64_t v240 = 0LL;
            uint64_t v277 = 0LL;
          }

          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if (!v240) {
            goto LABEL_252;
          }
          if (*(void *)(v238 + 16))
          {
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            uint64_t v241 = v235;
            uint64_t v242 = specialized __RawDictionaryStorage.find<A>(_:)(v241);
            if ((v243 & 1) != 0)
            {
              outlined init with copy of Any(*(void *)(v238 + 56) + 32 * v242, (uint64_t)&v278);
            }

            else
            {
              __int128 v278 = 0u;
              uint64_t v279 = 0u;
            }
          }

          else
          {
            __int128 v278 = 0u;
            uint64_t v279 = 0u;
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
          }

          if ((swift_dynamicCast() & 1) != 0) {
            unint64_t v244 = v277;
          }
          else {
            unint64_t v244 = 0LL;
          }
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if (!v244) {
            goto LABEL_253;
          }
          __int128 v245 = objc_msgSend(v240, sel_isEqual_, v244);
          swift_unknownObjectRelease();
          if ((v245 & 1) != 0)
          {
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            *a1 = 0LL;
            swift_release();
            swift_release();

            outlined consume of URL?(v272);
            swift_unknownObjectRelease();
            return;
          }

          swift_unknownObjectRelease();
          swift_release();
          swift_release();
        }
      }