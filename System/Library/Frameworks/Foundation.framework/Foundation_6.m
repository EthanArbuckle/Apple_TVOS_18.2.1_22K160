void type metadata accessor for PredicateExpressions.OptionalFlatMap()
{
  JUMPOUT(0x186E20CA4LL);
}

uint64_t outlined init with copy of (id: PredicateExpressions.VariableID, value: Any)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (id: PredicateExpressions.VariableID, value: Any));
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of (id: PredicateExpressions.VariableID, value: Any)(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (id: PredicateExpressions.VariableID, value: Any));
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

void type metadata accessor for PredicateExpressions.NilCoalesce()
{
}

unint64_t lazy protocol witness table accessor for type PredicateError and conformance PredicateError()
{
  unint64_t result = lazy protocol witness table cache variable for type PredicateError and conformance PredicateError;
  if (!lazy protocol witness table cache variable for type PredicateError and conformance PredicateError)
  {
    unint64_t result = MEMORY[0x186E20D4C](&protocol conformance descriptor for PredicateError, &type metadata for PredicateError);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type PredicateError and conformance PredicateError);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type PredicateError and conformance PredicateError;
  if (!lazy protocol witness table cache variable for type PredicateError and conformance PredicateError)
  {
    unint64_t result = MEMORY[0x186E20D4C](&protocol conformance descriptor for PredicateError, &type metadata for PredicateError);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type PredicateError and conformance PredicateError);
  }

  return result;
}

uint64_t type metadata accessor for PredicateExpressions.ForcedUnwrap( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata( a1,  a2,  a3,  a4,  (uint64_t)&nominal type descriptor for PredicateExpressions.ForcedUnwrap);
}

uint64_t specialized PredicateExpressions.NilLiteral.encode(to:)(void *a1)
{
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v2);
}

uint64_t instantiation function for generic protocol witness table for <> PredicateExpressions.OptionalFlatMap<A, B, C, D>( void *a1, uint64_t a2, uint64_t *a3)
{
  return instantiation function for generic protocol witness table for <> PredicateExpressions.OptionalFlatMap<A, B, C, D>( a1,  a2,  a3,  (uint64_t)&protocol conformance descriptor for PredicateExpressions.OptionalFlatMap<A, B, C, D>,  (uint64_t)&protocol conformance descriptor for <> PredicateExpressions.OptionalFlatMap<A, B, C, D>,  (uint64_t)&protocol conformance descriptor for <> PredicateExpressions.OptionalFlatMap<A, B, C, D>);
}

uint64_t instantiation function for generic protocol witness table for <> PredicateExpressions.NilCoalesce<A, B>( void *a1, uint64_t a2, uint64_t *a3)
{
  return instantiation function for generic protocol witness table for <> PredicateExpressions.OptionalFlatMap<A, B, C, D>( a1,  a2,  a3,  (uint64_t)&protocol conformance descriptor for PredicateExpressions.NilCoalesce<A, B>,  (uint64_t)&protocol conformance descriptor for <> PredicateExpressions.NilCoalesce<A, B>,  (uint64_t)&protocol conformance descriptor for <> PredicateExpressions.NilCoalesce<A, B>);
}

uint64_t instantiation function for generic protocol witness table for <> PredicateExpressions.OptionalFlatMap<A, B, C, D>( void *a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v10 = *a3;
  uint64_t v11 = a3[1];
  a1[1] = MEMORY[0x186E20D4C](a4);
  uint64_t v13 = *(void *)(v10 + 16);
  uint64_t v12 = *(void *)(v10 + 24);
  uint64_t v15 = *(void *)(v11 + 16);
  uint64_t v14 = *(void *)(v11 + 24);
  v18[0] = v13;
  v18[1] = v12;
  v18[2] = v15;
  v18[3] = v14;
  a1[2] = MEMORY[0x186E20D4C](a5, a2, v18);
  v17[0] = v13;
  v17[1] = v12;
  v17[2] = v15;
  v17[3] = v14;
  uint64_t result = MEMORY[0x186E20D4C](a6, a2, v17);
  a1[3] = result;
  return result;
}

uint64_t instantiation function for generic protocol witness table for <> PredicateExpressions.ForcedUnwrap<A, B>( void *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = *a3;
  a1[1] = MEMORY[0x186E20D4C](&protocol conformance descriptor for PredicateExpressions.ForcedUnwrap<A, B>);
  uint64_t v7 = *(void *)(v5 + 16);
  uint64_t v6 = *(void *)(v5 + 24);
  v10[0] = v7;
  v10[1] = v6;
  a1[2] = MEMORY[0x186E20D4C](&protocol conformance descriptor for <> PredicateExpressions.ForcedUnwrap<A, B>, a2, v10);
  v9[0] = v7;
  v9[1] = v6;
  uint64_t result = MEMORY[0x186E20D4C](&protocol conformance descriptor for <> PredicateExpressions.ForcedUnwrap<A, B>, a2, v9);
  a1[3] = result;
  return result;
}

uint64_t instantiation function for generic protocol witness table for PredicateExpressions.NilLiteral<A>( void *a1, uint64_t a2)
{
  a1[1] = MEMORY[0x186E20D4C](&protocol conformance descriptor for PredicateExpressions.NilLiteral<A>);
  a1[2] = MEMORY[0x186E20D4C](&protocol conformance descriptor for PredicateExpressions.NilLiteral<A>, a2);
  uint64_t result = MEMORY[0x186E20D4C](&protocol conformance descriptor for PredicateExpressions.NilLiteral<A>, a2);
  a1[3] = result;
  return result;
}

uint64_t type metadata instantiation function for PredicateExpressions.OptionalFlatMap()
{
  return swift_allocateGenericValueMetadata();
}

uint64_t type metadata completion function for PredicateExpressions.OptionalFlatMap()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_checkMetadataState();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0LL;
    }
  }

  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for PredicateExpressions.OptionalFlatMap( uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = a1;
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8LL);
  uint64_t v6 = *(void *)(a3 + 32);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(_DWORD *)(v7 + 80);
  uint64_t v9 = *(void *)(v5 + 64) + v8;
  uint64_t v10 = *(void *)(v7 + 64) + 7LL;
  unsigned int v11 = v8 | *(_DWORD *)(v5 + 80) & 0xF8;
  if (v11 > 7
    || ((*(_DWORD *)(v5 + 80) | *(_DWORD *)(v7 + 80)) & 0x100000) != 0
    || ((v10 + (v9 & ~v8)) & 0xFFFFFFFFFFFFFFF8LL) + 8 > 0x18)
  {
    uint64_t v14 = *a2;
    *uint64_t v4 = *a2;
    uint64_t v4 = (uint64_t *)(v14 + (((v11 | 7) + 16LL) & ~(unint64_t)(v11 | 7)));
    swift_retain();
  }

  else
  {
    uint64_t v15 = ~v8;
    (*(void (**)(uint64_t *, uint64_t *))(v5 + 16))(a1, a2);
    unint64_t v16 = ((unint64_t)a2 + v9) & v15;
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v7 + 16))( ((unint64_t)v4 + v9) & v15,  v16,  v6);
    *(void *)((v10 + (((unint64_t)v4 + v9) & v15)) & 0xFFFFFFFFFFFFF8LL) = *(void *)((v10 + v16) & 0xFFFFFFFFFFFFF8LL);
  }

  return v4;
}

uint64_t destroy for PredicateExpressions.OptionalFlatMap(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(*(void *)(a2 + 16) - 8LL);
  (*(void (**)(void))(v4 + 8))();
  return (*(uint64_t (**)(unint64_t))(*(void *)(*(void *)(a2 + 32) - 8LL) + 8LL))((*(void *)(v4 + 64) + a1 + *(unsigned __int8 *)(*(void *)(*(void *)(a2 + 32) - 8LL) + 80LL)) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(*(void *)(a2 + 32) - 8LL) + 80LL));
}

uint64_t initializeWithCopy for PredicateExpressions.OptionalFlatMap(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(*(void *)(a3 + 16) - 8LL);
  (*(void (**)(void))(v6 + 16))();
  uint64_t v7 = *(void *)(v6 + 64);
  uint64_t v8 = *(void *)(*(void *)(a3 + 32) - 8LL);
  uint64_t v9 = *(unsigned __int8 *)(v8 + 80);
  uint64_t v10 = v7 + v9;
  uint64_t v11 = (v10 + a1) & ~v9;
  uint64_t v12 = (v10 + a2) & ~v9;
  (*(void (**)(uint64_t, uint64_t))(v8 + 16))(v11, v12);
  *(void *)((*(void *)(v8 + 64) + 7LL + v11) & 0xFFFFFFFFFFFFF8LL) = *(void *)((*(void *)(v8 + 64) + 7LL + v12) & 0xFFFFFFFFFFFFF8LL);
  return a1;
}

uint64_t assignWithCopy for PredicateExpressions.OptionalFlatMap(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(*(void *)(a3 + 16) - 8LL);
  (*(void (**)(void))(v6 + 24))();
  uint64_t v7 = *(void *)(v6 + 64);
  uint64_t v8 = *(void *)(*(void *)(a3 + 32) - 8LL);
  uint64_t v9 = *(unsigned __int8 *)(v8 + 80);
  uint64_t v10 = v7 + v9;
  uint64_t v11 = (v10 + a1) & ~v9;
  uint64_t v12 = (v10 + a2) & ~v9;
  (*(void (**)(uint64_t, uint64_t))(v8 + 24))(v11, v12);
  *(void *)((*(void *)(v8 + 64) + 7LL + v11) & 0xFFFFFFFFFFFFF8LL) = *(void *)((*(void *)(v8 + 64) + 7LL + v12) & 0xFFFFFFFFFFFFF8LL);
  return a1;
}

uint64_t initializeWithTake for PredicateExpressions.OptionalFlatMap(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(*(void *)(a3 + 16) - 8LL);
  (*(void (**)(void))(v6 + 32))();
  uint64_t v7 = *(void *)(v6 + 64);
  uint64_t v8 = *(void *)(*(void *)(a3 + 32) - 8LL);
  uint64_t v9 = *(unsigned __int8 *)(v8 + 80);
  uint64_t v10 = v7 + v9;
  uint64_t v11 = (v10 + a1) & ~v9;
  uint64_t v12 = (v10 + a2) & ~v9;
  (*(void (**)(uint64_t, uint64_t))(v8 + 32))(v11, v12);
  *(void *)((*(void *)(v8 + 64) + 7LL + v11) & 0xFFFFFFFFFFFFF8LL) = *(void *)((*(void *)(v8 + 64) + 7LL + v12) & 0xFFFFFFFFFFFFF8LL);
  return a1;
}

uint64_t assignWithTake for PredicateExpressions.OptionalFlatMap(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(*(void *)(a3 + 16) - 8LL);
  (*(void (**)(void))(v6 + 40))();
  uint64_t v7 = *(void *)(v6 + 64);
  uint64_t v8 = *(void *)(*(void *)(a3 + 32) - 8LL);
  uint64_t v9 = *(unsigned __int8 *)(v8 + 80);
  uint64_t v10 = v7 + v9;
  uint64_t v11 = (v10 + a1) & ~v9;
  uint64_t v12 = (v10 + a2) & ~v9;
  (*(void (**)(uint64_t, uint64_t))(v8 + 40))(v11, v12);
  *(void *)((*(void *)(v8 + 64) + 7LL + v11) & 0xFFFFFFFFFFFFF8LL) = *(void *)((*(void *)(v8 + 64) + 7LL + v12) & 0xFFFFFFFFFFFFF8LL);
  return a1;
}

uint64_t getEnumTagSinglePayload for PredicateExpressions.OptionalFlatMap( uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8LL);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(void *)(a3 + 32);
  uint64_t v7 = *(void *)(v6 - 8);
  unsigned int v8 = *(_DWORD *)(v7 + 84);
  if (v8 <= v5) {
    unsigned int v9 = *(_DWORD *)(v4 + 84);
  }
  else {
    unsigned int v9 = *(_DWORD *)(v7 + 84);
  }
  if (!a2) {
    return 0LL;
  }
  uint64_t v10 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v11 = *(void *)(v4 + 64) + v10;
  if (v9 >= a2)
  {
    if (v9)
    {
      if (v5 >= v8) {
        return (*(uint64_t (**)(void))(v4 + 48))();
      }
      else {
        return (*(uint64_t (**)(uint64_t, void, uint64_t))(v7 + 48))( (v11 + a1) & ~v10,  *(unsigned int *)(v7 + 84),  v6);
      }
    }

    return 0LL;
  }

  if (((((*(void *)(v7 + 64) + (v11 & ~v10) + 7) & 0xFFFFFFFFFFFFFFF8LL) + 8) & 0xFFFFFFF8) != 0) {
    unsigned int v12 = 2;
  }
  else {
    unsigned int v12 = a2 - v9 + 1;
  }
  if (v12 >= 0x10000) {
    unsigned int v13 = 4;
  }
  else {
    unsigned int v13 = 2;
  }
  if (v12 < 0x100) {
    unsigned int v13 = 1;
  }
  if (v12 >= 2) {
    uint64_t v14 = v13;
  }
  else {
    uint64_t v14 = 0LL;
  }
  return ((uint64_t (*)(void))((char *)&loc_1830245BC + 4 * byte_18372F998[v14]))();
}

void storeEnumTagSinglePayload for PredicateExpressions.OptionalFlatMap( unsigned int *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5 = *(void *)(*(void *)(a4 + 16) - 8LL);
  uint64_t v6 = *(void *)(*(void *)(a4 + 32) - 8LL);
  if (*(_DWORD *)(v6 + 84) <= *(_DWORD *)(v5 + 84)) {
    unsigned int v7 = *(_DWORD *)(v5 + 84);
  }
  else {
    unsigned int v7 = *(_DWORD *)(v6 + 84);
  }
  uint64_t v8 = *(unsigned __int8 *)(v6 + 80);
  if (v7 >= a3)
  {
    int v11 = 0u;
    if (a2 <= v7) {
      goto LABEL_17;
    }
  }

  else
  {
    if (((*(_DWORD *)(v6 + 64) + ((*(_DWORD *)(v5 + 64) + (_DWORD)v8) & ~(_DWORD)v8) + 7) & 0xFFFFFFF8) == 0xFFFFFFF8) {
      unsigned int v9 = a3 - v7 + 1;
    }
    else {
      unsigned int v9 = 2;
    }
    if (v9 >= 0x10000) {
      int v10 = 4;
    }
    else {
      int v10 = 2;
    }
    if (v9 < 0x100) {
      int v10 = 1;
    }
    if (v9 >= 2) {
      int v11 = v10;
    }
    else {
      int v11 = 0;
    }
    if (a2 <= v7) {
LABEL_17:
    }
      __asm { BR              X16 }
  }

  if (((*(_DWORD *)(v6 + 64) + ((*(_DWORD *)(v5 + 64) + (_DWORD)v8) & ~(_DWORD)v8) + 7) & 0xFFFFFFF8) != 0xFFFFFFF8)
  {
    unsigned int v12 = ~v7 + a2;
    bzero(a1, ((*(void *)(v6 + 64) + ((*(void *)(v5 + 64) + v8) & ~v8) + 7) & 0xFFFFFFFFFFFFFFF8LL) + 8);
    *a1 = v12;
  }

  __asm { BR              X10 }

void sub_183024758()
{
  *(_BYTE *)(v0 + v1) = v2;
}

void sub_183024760(uint64_t a1, int a2)
{
  *(_DWORD *)(v2 + __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v2, v3) = 0;
  if (a2) {
    JUMPOUT(0x183024768LL);
  }
}

void sub_1830247A4()
{
  *(_WORD *)(v0 + v1) = v2;
}

void sub_1830247AC()
{
  *(_DWORD *)(v0 + v1) = v2;
}

uint64_t sub_1830247B4(uint64_t a1, int a2, unsigned int a3)
{
  *(_WORD *)(v9 + v10) = 0;
  if (!a2) {
    JUMPOUT(0x1830247BCLL);
  }
  if (a3 >= v4) {
    return (*(uint64_t (**)(uint64_t))(v6 + 56))(v9);
  }
  else {
    return (*(uint64_t (**)(uint64_t))(v7 + 56))((v8 + v9) & v5);
  }
}

uint64_t type metadata completion function for PredicateExpressions.NilCoalesce()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_checkMetadataState();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0LL;
    }
  }

  return result;
}

uint64_t getEnumTagSinglePayload for PredicateExpressions.NilCoalesce( uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8LL);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(void *)(*(void *)(a3 + 24) - 8LL);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= v5) {
    unsigned int v8 = *(_DWORD *)(v4 + 84);
  }
  else {
    unsigned int v8 = *(_DWORD *)(v6 + 84);
  }
  if (!a2) {
    return 0LL;
  }
  uint64_t v9 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v10 = *(void *)(v4 + 64) + v9;
  unsigned int v11 = a2 - v8;
  if (a2 <= v8) {
    goto LABEL_23;
  }
  uint64_t v12 = (v10 & ~v9) + *(void *)(v6 + 64);
  char v13 = 8 * v12;
  if (v12 <= 3)
  {
    unsigned int v15 = ((v11 + ~(-1 << v13)) >> v13) + 1;
    if (HIWORD(v15))
    {
      int v14 = *(_DWORD *)(a1 + v12);
      if (!v14) {
        goto LABEL_23;
      }
      goto LABEL_14;
    }

    if (v15 > 0xFF)
    {
      int v14 = *(unsigned __int16 *)(a1 + v12);
      if (!*(_WORD *)(a1 + v12)) {
        goto LABEL_23;
      }
      goto LABEL_14;
    }

    if (v15 < 2)
    {
LABEL_23:
      if (v8)
      {
        if (v5 >= v7) {
          return (*(uint64_t (**)(void))(v4 + 48))();
        }
        else {
          return (*(uint64_t (**)(uint64_t))(v6 + 48))((v10 + a1) & ~v9);
        }
      }

      return 0LL;
    }
  }

  int v14 = *(unsigned __int8 *)(a1 + v12);
  if (!*(_BYTE *)(a1 + v12)) {
    goto LABEL_23;
  }
LABEL_14:
  int v16 = (v14 - 1) << v13;
  if (!(_DWORD)v12) {
    return v8 + v16 + 1;
  }
  else {
    int v17 = 4;
  }
  return ((uint64_t (*)(void))((char *)&loc_18302493C + 4 * byte_18372F9A7[v17 - 1]))();
}

void storeEnumTagSinglePayload for PredicateExpressions.NilCoalesce( _WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5 = *(void *)(*(void *)(a4 + 16) - 8LL);
  uint64_t v6 = *(void *)(*(void *)(a4 + 24) - 8LL);
  if (*(_DWORD *)(v6 + 84) <= *(_DWORD *)(v5 + 84)) {
    unsigned int v7 = *(_DWORD *)(v5 + 84);
  }
  else {
    unsigned int v7 = *(_DWORD *)(v6 + 84);
  }
  if (a3 > v7)
  {
    if (v8 <= 3)
    {
      unsigned int v11 = ((a3 - v7 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v11))
      {
        unsigned int v9 = 4u;
      }

      else if (v11 >= 0x100)
      {
        unsigned int v9 = 2;
      }

      else
      {
        unsigned int v9 = v11 > 1;
      }
    }

    else
    {
      unsigned int v9 = 1u;
    }
  }

  else
  {
    unsigned int v9 = 0u;
  }

  if (v7 < a2)
  {
    unsigned int v10 = ~v7 + a2;
    if (v8 < 4)
    {
      if ((_DWORD)v8)
      {
        int v12 = v10 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if ((_DWORD)v8 == 3)
        {
          *a1 = v12;
          *((_BYTE *)a1 + 2) = BYTE2(v12);
        }

        else if ((_DWORD)v8 == 2)
        {
          *a1 = v12;
        }

        else
        {
          *(_BYTE *)a1 = v12;
        }
      }
    }

    else
    {
      bzero(a1, v8);
      *(_DWORD *)a1 = v10;
    }

    __asm { BR              X10 }
  }

  __asm { BR              X16 }

uint64_t type metadata completion function for PredicateExpressions.ForcedUnwrap()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0LL;
  }

  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for PredicateExpressions.ForcedUnwrap( uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3 = a1;
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8LL);
  uint64_t v5 = *(_DWORD *)(v4 + 80);
  if (v5 <= 7 && *(void *)(v4 + 64) <= 0x18uLL && (*(_DWORD *)(v4 + 80) & 0x100000) == 0)
  {
    (*(void (**)(uint64_t *))(v4 + 16))(a1);
  }

  else
  {
    uint64_t v8 = *a2;
    *uint64_t v3 = *a2;
    uint64_t v3 = (uint64_t *)(v8 + ((v5 + 16) & ~v5));
    swift_retain();
  }

  return v3;
}

uint64_t destroy for PredicateExpressions.ForcedUnwrap(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(*(void *)(*(void *)(a2 + 16) - 8LL) + 8LL))();
}

uint64_t initializeWithCopy for PredicateExpressions.ForcedUnwrap(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return a1;
}

uint64_t assignWithCopy for PredicateExpressions.ForcedUnwrap(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return a1;
}

uint64_t initializeWithTake for PredicateExpressions.ForcedUnwrap(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return a1;
}

uint64_t assignWithTake for PredicateExpressions.ForcedUnwrap(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return a1;
}

uint64_t getEnumTagSinglePayload for PredicateExpressions.ForcedUnwrap( uint64_t a1, unsigned int a2, uint64_t a3)
{
  if (!a2) {
    return 0LL;
  }
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8LL);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  unsigned int v6 = a2 - v5;
  if (a2 <= v5) {
    goto LABEL_18;
  }
  uint64_t v7 = *(void *)(v4 + 64);
  char v8 = 8 * v7;
  if (v7 <= 3)
  {
    unsigned int v10 = ((v6 + ~(-1 << v8)) >> v8) + 1;
    if (HIWORD(v10))
    {
      int v9 = *(_DWORD *)(a1 + v7);
      if (!v9) {
        goto LABEL_18;
      }
      goto LABEL_11;
    }

    if (v10 > 0xFF)
    {
      int v9 = *(unsigned __int16 *)(a1 + v7);
      if (!*(_WORD *)(a1 + v7)) {
        goto LABEL_18;
      }
      goto LABEL_11;
    }

    if (v10 < 2)
    {
LABEL_18:
      if (v5) {
        return (*(uint64_t (**)(void))(v4 + 48))();
      }
      return 0LL;
    }
  }

  int v9 = *(unsigned __int8 *)(a1 + v7);
  if (!*(_BYTE *)(a1 + v7)) {
    goto LABEL_18;
  }
LABEL_11:
  int v11 = (v9 - 1) << v8;
  if (!(_DWORD)v7) {
    return v5 + v11 + 1;
  }
  return ((uint64_t (*)(void))((char *)&loc_183024E14 + 4 * byte_18372F9B5[(v7 - 1)]))();
}

void storeEnumTagSinglePayload for PredicateExpressions.ForcedUnwrap( _WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8LL);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  size_t v8 = *(void *)(v6 + 64);
  BOOL v9 = a3 >= v7;
  unsigned int v10 = a3 - v7;
  if (v10 != 0 && v9)
  {
    if (v8 <= 3)
    {
      unsigned int v13 = ((v10 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v13))
      {
        unsigned int v11 = 4u;
      }

      else if (v13 >= 0x100)
      {
        unsigned int v11 = 2;
      }

      else
      {
        unsigned int v11 = v13 > 1;
      }
    }

    else
    {
      unsigned int v11 = 1u;
    }
  }

  else
  {
    unsigned int v11 = 0u;
  }

  if (v7 < a2)
  {
    unsigned int v12 = ~v7 + a2;
    if (v8 < 4)
    {
      if ((_DWORD)v8)
      {
        int v14 = v12 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if ((_DWORD)v8 == 3)
        {
          *a1 = v14;
          *((_BYTE *)a1 + 2) = BYTE2(v14);
        }

        else if ((_DWORD)v8 == 2)
        {
          *a1 = v14;
        }

        else
        {
          *(_BYTE *)a1 = v14;
        }
      }
    }

    else
    {
      bzero(a1, *(void *)(v6 + 64));
      *(_DWORD *)a1 = v12;
    }

    __asm { BR              X10 }
  }

  __asm { BR              X11 }

uint64_t type metadata accessor for PredicateExpressions.NilLiteral( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata( a1,  a2,  a3,  a4,  (uint64_t)&nominal type descriptor for PredicateExpressions.NilLiteral);
}

void static CocoaError.errorWithFilePath(_:errno:reading:variant:source:destination:)( Swift::Int32 fileErrno@<W1>, uint64_t a2@<X0>, char a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, id a8@<X7>, void *a9@<X8>, void *a10)
{
  uint64_t v11 = a7;
  uint64_t v13 = a5;
  Swift::Int32 v15 = fileErrno;
  v97 = a9;
  int v16 = a10;
  int v17 = *(void **)a2;
  uint64_t v18 = *(void *)(a2 + 16);
  char v19 = *(_BYTE *)(a2 + 24);
  unint64_t v98 = *(void *)(a2 + 8);
  v99 = (uint64_t (*)(void))v18;
  if ((v19 & 1) != 0)
  {
    CocoaError.Code.init(fileErrno:reading:)(fileErrno, a3 & 1);
    uint64_t v92 = v105;
    swift_retain_n();
    id v20 = v17;
    swift_retain_n();
    id v93 = v20;
    uint64_t v94 = a6;
    id v95 = a8;
    uint64_t v89 = a4;
    if (v15 == 102)
    {
      id v96 = 0LL;
      v21 = v99;
      goto LABEL_22;
    }

    uint64_t v22 = v13;
    a6 = (uint64_t)v17;
    uint64_t v23 = v11;
    int v17 = a10;
    if ((POSIXErrorCode.init(rawValue:)() & 0x100000000LL) != 0)
    {
      _StringGuts.grow(_:)(22LL);
      swift_bridgeObjectRelease();
      v103._uint64_t countAndFlagsBits = 0xD000000000000014LL;
      v103._unint64_t object = (void *)0x80000001839C9190LL;
      LODWORD(v100) = v15;
      goto LABEL_63;
    }

    static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSPOSIXErrorDomain");
    uint64_t v25 = (int)POSIXErrorCode.rawValue.getter();
    a8 = objc_allocWithZone((Class)&OBJC_CLASS___NSError);
    uint64_t v26 = String._bridgeToObjectiveCImpl()();
    swift_bridgeObjectRelease();
    id v27 = objc_msgSend(a8, sel_initWithDomain_code_userInfo_, v26, v25, _NativeDictionary.bridged()(), v89);
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    id v96 = v27;
    id v28 = objc_msgSend(v27, sel_domain);
    id v29 = static String._unconditionallyBridgeFromObjectiveC(_:)(v28);
    uint64_t v31 = v30;

    if (v29 == static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSPOSIXErrorDomain") && v31 == v32) {
      goto LABEL_20;
    }
    Swift::Int32 v15 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    int v16 = a10;
    v21 = v99;
    if ((v15 & 1) != 0)
    {
LABEL_21:
      uint64_t v11 = v23;
      int v17 = (void *)a6;
      uint64_t v13 = v22;
LABEL_22:
      swift_bridgeObjectRetain();
      uint64_t v44 = v13;
      swift_bridgeObjectRetain();
      uint64_t v90 = v11;
      swift_bridgeObjectRetain();
      uint64_t v45 = v98;
      outlined copy of PathOrURL(v17, v98, (uint64_t)v21, 1);
      if (_foundation_swift_url_feature_enabled())
      {
        v46 = v17;
        v104 = v21;
        swift_retain();
        id v47 = v93;
        swift_retain();
        Swift::String v48 = URL.path(percentEncoded:)(1);
        uint64_t countAndFlagsBits = v48._countAndFlagsBits;
        Swift::String v103 = v48;
        swift_bridgeObjectRetain();
        v91 = v16;
        if (String.count.getter() <= 1)
        {
          unint64_t object = (unint64_t)v48._object;
        }

        else
        {
          unint64_t object = (unint64_t)v48._object;
          if ((specialized BidirectionalCollection.last.getter(v48._countAndFlagsBits, (unint64_t)v48._object) & 0x1FF) == 0x2F)
          {
            specialized RangeReplaceableCollection<>.popLast()();
            swift_bridgeObjectRelease();
            uint64_t countAndFlagsBits = v103._countAndFlagsBits;
            unint64_t object = (unint64_t)v103._object;
          }
        }

        uint64_t v100 = Set.init(minimumCapacity:)();
        uint64_t v67 = specialized Set._Variant.insert(_:)(&v102, 0x2FuLL);
        uint64_t v68 = v100;
        uint64_t v69 = HIBYTE(object) & 0xF;
        if ((object & 0x2000000000000000LL) == 0) {
          uint64_t v69 = countAndFlagsBits & 0xFFFFFFFFFFFFLL;
        }
        if (v69)
        {
          uint64_t v100 = countAndFlagsBits;
          unint64_t v101 = object;
          MEMORY[0x1895F8858](v67);
          v88[2] = &v100;
          v88[3] = v68;
          swift_bridgeObjectRetain();
          specialized String.UTF8View.withContiguousStorageIfAvailable<A>(_:)( (void *(*)(__int128 *__return_ptr, void *, uint64_t))partial apply for specialized closure #1 in StringProtocol.removingURLPercentEncoding(excluding:),  (uint64_t)v88,  countAndFlagsBits,  object);
          if (v70 == 1)
          {
            Swift::Int v71 = v100;
            unint64_t v72 = v101;
            swift_bridgeObjectRetain();
            specialized StringProtocol.removingURLPercentEncoding<A>(utf8Buffer:excluding:)(v71, v72, v68);
            swift_bridgeObjectRelease();
          }

          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          uint64_t v45 = v98;
          int v16 = v91;
        }

        else
        {
          swift_bridgeObjectRelease();
          int v16 = v91;
        }

        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        int v17 = v46;
        uint64_t v74 = (uint64_t)v99;
        outlined consume of PathOrURL(v46, v45, (uint64_t)v99, 1);
        outlined consume of PathOrURL(v46, v45, v74, 1);
        id v51 = v93;
      }

      else
      {
        id v51 = v93;
        id v52 = objc_msgSend(v93, sel__parameterString);
        if (v52)
        {
          v53 = v52;
          id v54 = static String._unconditionallyBridgeFromObjectiveC(_:)(v52);
          v56 = v55;

          uint64_t v45 = v98;
          if (getEnumTag for _DarwinSearchPathsSequence.Iterator.State()
            && (id v57 = objc_msgSend(v93, sel_path)) != 0)
          {
            v58 = v57;
            v59 = v17;
            v60 = v16;
            id v61 = static String._unconditionallyBridgeFromObjectiveC(_:)(v57);
            v63 = v62;

            v103._uint64_t countAndFlagsBits = (uint64_t)v61;
            v103._unint64_t object = v63;
            swift_bridgeObjectRetain();
            v64._uint64_t countAndFlagsBits = 59LL;
            v64._unint64_t object = (void *)0xE100000000000000LL;
            String.append(_:)(v64);
            uint64_t v45 = v98;
            swift_bridgeObjectRelease();
            swift_bridgeObjectRetain();
            v65._uint64_t countAndFlagsBits = (uint64_t)v54;
            v65._unint64_t object = v56;
            String.append(_:)(v65);
            swift_bridgeObjectRelease();
            int v16 = v60;
            int v17 = v59;
            id v51 = v93;
            swift_bridgeObjectRelease();
            v66 = v59;
          }

          else
          {
            v103._uint64_t countAndFlagsBits = 59LL;
            v103._unint64_t object = (void *)0xE100000000000000LL;
            v73._uint64_t countAndFlagsBits = (uint64_t)v54;
            v73._unint64_t object = v56;
            String.append(_:)(v73);
            swift_bridgeObjectRelease();
            v66 = v17;
          }

          uint64_t v74 = (uint64_t)v99;
          outlined consume of PathOrURL(v66, v45, (uint64_t)v99, 1);
        }

        else
        {
          id v75 = objc_msgSend(v93, sel_path);
          uint64_t v45 = v98;
          if (v75)
          {
            v76 = v75;
            static String._unconditionallyBridgeFromObjectiveC(_:)(v75);
          }

          uint64_t v74 = (uint64_t)v99;
          outlined consume of PathOrURL(v17, v98, (uint64_t)v99, 1);
        }
      }

      uint64_t v77 = String._bridgeToObjectiveCImpl()();
      swift_bridgeObjectRelease();
      id v78 = v51;
      v79 = v17;
      outlined consume of PathOrURL(v17, v45, v74, 1);
      id v80 = v96;
      if (v96)
      {
        v103._uint64_t countAndFlagsBits = (uint64_t)v96;
        lazy protocol witness table accessor for type POSIXError and conformance POSIXError();
        id v81 = v80;
        if (_getErrorEmbeddedNSError<A>(_:)())
        {
        }

        else
        {
          swift_allocError();
          void *v82 = v81;
        }

        id v80 = (id)_swift_stdlib_bridgeErrorToNSError();
      }

      if (v44)
      {
        v83 = (void *)String._bridgeToObjectiveCImpl()();
        swift_bridgeObjectRelease();
        if (v90) {
          goto LABEL_54;
        }
      }

      else
      {
        v83 = 0LL;
        if (v90)
        {
LABEL_54:
          v84 = (void *)String._bridgeToObjectiveCImpl()();
          swift_bridgeObjectRelease();
          uint64_t v85 = v92;
          if (!v16)
          {
LABEL_56:
            id v86 =  objc_msgSend( (id)objc_opt_self(),  sel__cocoaErrorWithCode_path_url_underlying_variant_source_destination_,  v85,  v77,  v78,  v80,  v83,  v84,  v16);
            swift_unknownObjectRelease();

            outlined consume of PathOrURL(v79, v98, (uint64_t)v99, 1);
            void *v97 = v86;
            return;
          }

Foundation::CocoaError::Code __swiftcall CocoaError.Code.init(fileErrno:reading:)( Swift::Int32 fileErrno, Swift::Bool reading)
{
  if (reading)
  {
    uint64_t v3 = 263LL;
    switch(fileErrno)
    {
      case 1:
      case 13:
        *unint64_t v2 = 257LL;
        break;
      case 2:
        *unint64_t v2 = 260LL;
        break;
      case 3:
      case 4:
      case 5:
      case 6:
      case 7:
      case 8:
      case 9:
      case 10:
      case 11:
      case 12:
      case 14:
      case 15:
      case 16:
      case 17:
      case 18:
      case 19:
      case 20:
      case 21:
      case 22:
      case 23:
      case 24:
      case 25:
      case 26:
        goto LABEL_9;
      case 27:
        goto LABEL_12;
      default:
        if (fileErrno == 63) {
          *unint64_t v2 = 258LL;
        }
        else {
LABEL_9:
        }
          *unint64_t v2 = 256LL;
        break;
    }
  }

  else
  {
    uint64_t v3 = 4LL;
    switch(fileErrno)
    {
      case 1:
      case 13:
        *unint64_t v2 = 513LL;
        break;
      case 2:
        goto LABEL_12;
      case 17:
        *unint64_t v2 = 516LL;
        break;
      case 28:
      case 69:
        *unint64_t v2 = 640LL;
        break;
      case 30:
        *unint64_t v2 = 642LL;
        break;
      case 63:
        *unint64_t v2 = 514LL;
        break;
      default:
        uint64_t v3 = 512LL;
LABEL_12:
        *unint64_t v2 = v3;
        break;
    }
  }

  LODWORD(result.rawValue) = fileErrno;
  return result;
}

uint64_t outlined copy of PathOrURL(void *a1, uint64_t a2, uint64_t a3, char a4)
{
  if ((a4 & 1) == 0) {
    return swift_bridgeObjectRetain();
  }
  swift_retain();
  id v5 = a1;
  return swift_retain();
}

id NSSortDescriptor.init<A, B>(keyPath:ascending:)(void *a1, char a2)
{
  id v4 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
  _bridgeKeyPathToString(_:)();
  uint64_t v5 = String._bridgeToObjectiveCImpl()();
  swift_bridgeObjectRelease();
  id v6 = objc_msgSend(v4, sel_initWithKey_ascending_, v5, a2 & 1);
  swift_unknownObjectRelease();
  id v7 = v6;
  objc_setAssociatedObject(v7, v7, a1, (void *)0x301);

  swift_release();
  return v7;
}

id NSSortDescriptor.init<A, B>(keyPath:ascending:comparator:)(void *a1, char a2, uint64_t a3, uint64_t a4)
{
  id v8 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
  _bridgeKeyPathToString(_:)();
  uint64_t v9 = String._bridgeToObjectiveCImpl()();
  swift_bridgeObjectRelease();
  v14[4] = a3;
  v14[5] = a4;
  v14[0] = MEMORY[0x1895F87A8];
  v14[1] = 1107296256LL;
  v14[2] = thunk for @escaping @callee_guaranteed (@in_guaranteed Any, @in_guaranteed Any) -> (@unowned NSComparisonResult);
  v14[3] = &block_descriptor_2;
  unsigned int v10 = _Block_copy(v14);
  swift_retain();
  swift_release();
  id v11 = objc_msgSend(v8, sel_initWithKey_ascending_comparator_, v9, a2 & 1, v10);
  _Block_release(v10);
  swift_unknownObjectRelease();
  id v12 = v11;
  swift_retain();
  objc_setAssociatedObject(v12, v12, a1, (void *)0x301);

  swift_release_n();
  swift_release();
  return v12;
}

uint64_t thunk for @escaping @callee_guaranteed (@in_guaranteed Any, @in_guaranteed Any) -> (@unowned NSComparisonResult)( uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(uint64_t (**)(void *, void *))(a1 + 32);
  v9[3] = swift_getObjectType();
  v9[0] = a2;
  v8[3] = swift_getObjectType();
  v8[0] = a3;
  swift_retain();
  swift_unknownObjectRetain();
  swift_unknownObjectRetain();
  uint64_t v6 = v5(v9, v8);
  swift_release();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v8);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v9);
  return v6;
}

uint64_t block_copy_helper_2(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_2()
{
  return swift_release();
}

uint64_t NSSortDescriptor.keyPath.getter()
{
  if (objc_getAssociatedObject(v0, v0))
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }

  else
  {
    memset(v3, 0, sizeof(v3));
  }

  outlined init with take of Any?((uint64_t)v3, (uint64_t)v4);
  if (v5)
  {
    type metadata accessor for AnyKeyPath();
    else {
      return 0LL;
    }
  }

  else
  {
    outlined destroy of Any?((uint64_t)v4);
    return 0LL;
  }

id MachError._nsError.getter()
{
  return *v0;
}

void __swiftcall MachError.init(_nsError:)(Foundation::MachError *__return_ptr retstr, NSError *_nsError)
{
  id v4 = -[NSError domain](_nsError, sel_domain);
  id v5 = static String._unconditionallyBridgeFromObjectiveC(_:)(v4);
  uint64_t v7 = v6;

  if (v5 == static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSMachErrorDomain") && v7 == v8) {
    goto LABEL_7;
  }
  char v10 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v10 & 1) == 0)
  {
    __break(1u);
LABEL_7:
    swift_bridgeObjectRelease_n();
  }

  retstr->_nsError.super.isa = (Class)_nsError;
}

id static MachError.errorDomain.getter()
{
  return static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSMachErrorDomain");
}

uint64_t MachError.hashValue.getter()
{
  return NSObject.hashValue.getter();
}

id protocol witness for _BridgedStoredNSError._nsError.getter in conformance MachError()
{
  return *v0;
}

id protocol witness for static CustomNSError.errorDomain.getter in conformance MachError()
{
  return static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSMachErrorDomain");
}

uint64_t protocol witness for Hashable.hashValue.getter in conformance MachError()
{
  return NSObject.hashValue.getter();
}

void protocol witness for Hashable.hash(into:) in conformance MachError()
{
  id v1 = *v0;
  NSObject.hash(into:)();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance MachError()
{
  id v1 = *v0;
  Hasher.init(_seed:)();
  id v2 = v1;
  NSObject.hash(into:)();

  return Hasher._finalize()();
}

id protocol witness for Error._code.getter in conformance MachError()
{
  return objc_msgSend(*v0, sel_code);
}

id protocol witness for Error._getEmbeddedNSError() in conformance MachError()
{
  id v1 = *v0;
  id v2 = *v0;
  return v1;
}

id protocol witness for static Equatable.== infix(_:_:) in conformance MachError(id *a1, void *a2)
{
  return objc_msgSend(*a1, sel_isEqual_, *a2);
}

uint64_t static MachError.success.getter()
{
  return 0LL;
}

uint64_t static MachError.invalidAddress.getter()
{
  return 1LL;
}

uint64_t static MachError.protectionFailure.getter()
{
  return 2LL;
}

uint64_t static MachError.noSpace.getter()
{
  return 3LL;
}

uint64_t static MachError.invalidArgument.getter()
{
  return 4LL;
}

uint64_t static MachError.failure.getter()
{
  return 5LL;
}

uint64_t static MachError.resourceShortage.getter()
{
  return 6LL;
}

uint64_t static MachError.notReceiver.getter()
{
  return 7LL;
}

uint64_t static MachError.noAccess.getter()
{
  return 8LL;
}

uint64_t static MachError.memoryFailure.getter()
{
  return 9LL;
}

uint64_t static MachError.memoryError.getter()
{
  return 10LL;
}

uint64_t static MachError.alreadyInSet.getter()
{
  return 11LL;
}

uint64_t static MachError.notInSet.getter()
{
  return 12LL;
}

uint64_t static MachError.nameExists.getter()
{
  return 13LL;
}

uint64_t static MachError.aborted.getter()
{
  return 14LL;
}

uint64_t static MachError.invalidName.getter()
{
  return 15LL;
}

uint64_t static MachError.invalidTask.getter()
{
  return 16LL;
}

uint64_t static MachError.invalidRight.getter()
{
  return 17LL;
}

uint64_t static MachError.invalidValue.getter()
{
  return 18LL;
}

uint64_t static MachError.userReferencesOverflow.getter()
{
  return 19LL;
}

uint64_t static MachError.invalidCapability.getter()
{
  return 20LL;
}

uint64_t static MachError.rightExists.getter()
{
  return 21LL;
}

uint64_t static MachError.invalidHost.getter()
{
  return 22LL;
}

uint64_t static MachError.memoryPresent.getter()
{
  return 23LL;
}

uint64_t static MachError.memoryDataMoved.getter()
{
  return 24LL;
}

uint64_t static MachError.memoryRestartCopy.getter()
{
  return 25LL;
}

uint64_t static MachError.invalidProcessorSet.getter()
{
  return 26LL;
}

uint64_t static MachError.policyLimit.getter()
{
  return 27LL;
}

uint64_t static MachError.invalidPolicy.getter()
{
  return 28LL;
}

uint64_t static MachError.invalidObject.getter()
{
  return 29LL;
}

uint64_t static MachError.alreadyWaiting.getter()
{
  return 30LL;
}

uint64_t static MachError.defaultSet.getter()
{
  return 31LL;
}

uint64_t static MachError.exceptionProtected.getter()
{
  return 32LL;
}

uint64_t static MachError.invalidLedger.getter()
{
  return 33LL;
}

uint64_t static MachError.invalidMemoryControl.getter()
{
  return 34LL;
}

uint64_t static MachError.invalidSecurity.getter()
{
  return 35LL;
}

uint64_t static MachError.notDepressed.getter()
{
  return 36LL;
}

uint64_t static MachError.terminated.getter()
{
  return 37LL;
}

uint64_t static MachError.lockSetDestroyed.getter()
{
  return 38LL;
}

uint64_t static MachError.lockUnstable.getter()
{
  return 39LL;
}

uint64_t static MachError.lockOwned.getter()
{
  return 40LL;
}

uint64_t static MachError.lockOwnedSelf.getter()
{
  return 41LL;
}

uint64_t static MachError.semaphoreDestroyed.getter()
{
  return 42LL;
}

uint64_t static MachError.rpcServerTerminated.getter()
{
  return 43LL;
}

uint64_t static MachError.rpcTerminateOrphan.getter()
{
  return 44LL;
}

uint64_t static MachError.rpcContinueOrphan.getter()
{
  return 45LL;
}

uint64_t static MachError.notSupported.getter()
{
  return 46LL;
}

uint64_t static MachError.nodeDown.getter()
{
  return 47LL;
}

uint64_t static MachError.notWaiting.getter()
{
  return 48LL;
}

uint64_t static MachError.operationTimedOut.getter()
{
  return 49LL;
}

uint64_t static MachError.codesignError.getter()
{
  return 50LL;
}

uint64_t static MachError.policyStatic.getter()
{
  return 51LL;
}

unint64_t lazy protocol witness table accessor for type MachErrorCode and conformance MachErrorCode()
{
  unint64_t result = lazy protocol witness table cache variable for type MachErrorCode and conformance MachErrorCode;
  if (!lazy protocol witness table cache variable for type MachErrorCode and conformance MachErrorCode)
  {
    unint64_t result = MEMORY[0x186E20D4C](&protocol conformance descriptor for MachErrorCode, MEMORY[0x18961B5A8]);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type MachErrorCode and conformance MachErrorCode);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type MachErrorCode and conformance MachErrorCode;
  if (!lazy protocol witness table cache variable for type MachErrorCode and conformance MachErrorCode)
  {
    unint64_t result = MEMORY[0x186E20D4C](MEMORY[0x18961B5B8], MEMORY[0x18961B5A8]);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type MachErrorCode and conformance MachErrorCode);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type MachErrorCode and conformance MachErrorCode;
  if (!lazy protocol witness table cache variable for type MachErrorCode and conformance MachErrorCode)
  {
    unint64_t result = MEMORY[0x186E20D4C](MEMORY[0x18961B5B0], MEMORY[0x18961B5A8]);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type MachErrorCode and conformance MachErrorCode);
  }

  return result;
}

unint64_t lazy protocol witness table accessor for type Int32 and conformance Int32()
{
  unint64_t result = lazy protocol witness table cache variable for type Int32 and conformance Int32;
  if (!lazy protocol witness table cache variable for type Int32 and conformance Int32)
  {
    unint64_t result = MEMORY[0x186E20D4C](MEMORY[0x18961A488], MEMORY[0x18961A458]);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Int32 and conformance Int32);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type Int32 and conformance Int32;
  if (!lazy protocol witness table cache variable for type Int32 and conformance Int32)
  {
    unint64_t result = MEMORY[0x186E20D4C](MEMORY[0x18961A480], MEMORY[0x18961A458]);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Int32 and conformance Int32);
  }

  return result;
}

unint64_t instantiation function for generic protocol witness table for MachError(void *a1)
{
  a1[1] = lazy protocol witness table accessor for type MachError and conformance MachError();
  a1[2] = lazy protocol witness table accessor for type MachError and conformance MachError();
  unint64_t result = lazy protocol witness table accessor for type MachError and conformance MachError();
  a1[3] = result;
  return result;
}

unint64_t lazy protocol witness table accessor for type MachError and conformance MachError()
{
  unint64_t result = lazy protocol witness table cache variable for type MachError and conformance MachError;
  if (!lazy protocol witness table cache variable for type MachError and conformance MachError)
  {
    unint64_t result = MEMORY[0x186E20D4C](&protocol conformance descriptor for MachError, &type metadata for MachError);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type MachError and conformance MachError);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type MachError and conformance MachError;
  if (!lazy protocol witness table cache variable for type MachError and conformance MachError)
  {
    unint64_t result = MEMORY[0x186E20D4C](&protocol conformance descriptor for MachError, &type metadata for MachError);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type MachError and conformance MachError);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type MachError and conformance MachError;
  if (!lazy protocol witness table cache variable for type MachError and conformance MachError)
  {
    unint64_t result = MEMORY[0x186E20D4C](&protocol conformance descriptor for MachError, &type metadata for MachError);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type MachError and conformance MachError);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type MachError and conformance MachError;
  if (!lazy protocol witness table cache variable for type MachError and conformance MachError)
  {
    unint64_t result = MEMORY[0x186E20D4C](&protocol conformance descriptor for MachError, &type metadata for MachError);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type MachError and conformance MachError);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type MachError and conformance MachError;
  if (!lazy protocol witness table cache variable for type MachError and conformance MachError)
  {
    unint64_t result = MEMORY[0x186E20D4C](&protocol conformance descriptor for MachError, &type metadata for MachError);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type MachError and conformance MachError);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type MachError and conformance MachError;
  if (!lazy protocol witness table cache variable for type MachError and conformance MachError)
  {
    unint64_t result = MEMORY[0x186E20D4C](&protocol conformance descriptor for MachError, &type metadata for MachError);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type MachError and conformance MachError);
  }

  return result;
}

unint64_t instantiation function for generic protocol witness table for MachError(uint64_t a1)
{
  unint64_t result = lazy protocol witness table accessor for type MachError and conformance MachError();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t instantiation function for generic protocol witness table for MachErrorCode(uint64_t a1)
{
  unint64_t result = lazy protocol witness table accessor for type MachErrorCode and conformance MachErrorCode();
  *(void *)(a1 + 8) = result;
  return result;
}

ValueMetadata *type metadata accessor for MachError()
{
  return &type metadata for MachError;
}

uint64_t specialized _withPredicateArchivingState<A>(_:_:)( uint64_t a1, uint64_t a2, char a3, void (*a4)(uint64_t))
{
  v18[1] = *MEMORY[0x1895F89C0];
  if (one-time initialization token for predicateArchivingState != -1) {
    swift_once();
  }
  pthread_key_t v8 = static _ThreadLocal.Key<A>.predicateArchivingState;
  uint64_t v9 = (uint64_t *)pthread_getspecific(static _ThreadLocal.Key<A>.predicateArchivingState);
  char v10 = a3 & 1;
  if (v9)
  {
    uint64_t v11 = *v9;
    char v12 = *(_BYTE *)(*v9 + 32);
    *(_BYTE *)(*v9 + 32) = v10;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v13 = swift_retain();
    __int128 v17 = *(_OWORD *)(v11 + 16);
    *(void *)(v11 + 16) = a1;
    *(void *)(v11 + 24) = a2;
    a4(v13);
    *(_OWORD *)(v11 + 16) = v17;
    *(_BYTE *)(v11 + 32) = v12;
    swift_release();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }

  else
  {
    type metadata accessor for PredicateArchivingState();
    uint64_t v15 = swift_allocObject();
    *(void *)(v15 + 16) = a1;
    *(void *)(v15 + 24) = a2;
    *(_BYTE *)(v15 + 32) = v10;
    *(void *)(v15 + 40) = MEMORY[0x18961AFF0];
    v18[0] = v15;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (pthread_getspecific(v8)) {
      __break(1u);
    }
    uint64_t v16 = pthread_setspecific(v8, v18);
    a4(v16);
    pthread_setspecific(v8, 0LL);
    return swift_release();
  }

uint64_t Predicate.encode(to:)(void *a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 16);
  uint64_t v127 = 8 * v4;
  uint64_t v129 = a2;
  if (v4 == 1)
  {
    uint64_t MetatypeMetadata = swift_getMetatypeMetadata();
  }

  else
  {
    MEMORY[0x1895F8858](a1);
    if (v4)
    {
      unint64_t v7 = *(void *)(v129 + 24) & 0xFFFFFFFFFFFFFFFELL;
      pthread_key_t v8 = (uint64_t *)((char *)&v108 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL));
      uint64_t v9 = v4;
      do
      {
        v7 += 8LL;
        *v8++ = swift_getMetatypeMetadata();
        --v9;
      }

      while (v9);
    }

    uint64_t MetatypeMetadata = swift_getTupleTypeMetadata();
  }

  v117 = &v108;
  uint64_t v110 = MetatypeMetadata;
  MEMORY[0x1895F8858](MetatypeMetadata);
  uint64_t v11 = (char *)&v108 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<PredicateExpressionCodingKeys>);
  v116 = &v108;
  uint64_t v124 = v12;
  uint64_t v115 = *(void *)(v12 - 8);
  uint64_t v13 = MEMORY[0x1895F8858](v12);
  v128 = (char *)&v108 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v130 = v2;
  if (v4 == 1)
  {
    uint64_t TupleTypeMetadata = type metadata accessor for PredicateExpressions.Variable( 0LL,  *(void *)(*(void *)(v129 + 24) & 0xFFFFFFFFFFFFFELL),  v14,  v15);
  }

  else
  {
    MEMORY[0x1895F8858](v13);
    if (v4)
    {
      v21 = (uint64_t *)(*(void *)(v129 + 24) & 0xFFFFFFFFFFFFFFFELL);
      uint64_t v22 = (uint64_t *)((char *)&v108 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0LL));
      uint64_t v23 = v4;
      do
      {
        uint64_t v24 = *v21++;
        *v22++ = type metadata accessor for PredicateExpressions.Variable(255LL, v24, v18, v19);
        --v23;
      }

      while (v23);
    }

    uint64_t TupleTypeMetadata = swift_getTupleTypeMetadata();
  }

  v125 = (void *)TupleTypeMetadata;
  uint64_t v118 = *(void *)(TupleTypeMetadata - 8);
  uint64_t v25 = MEMORY[0x1895F8858](TupleTypeMetadata);
  id v27 = (char *)&v108 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v28 = MEMORY[0x1895F8858](v25);
  uint64_t v30 = (char *)&v108 - v29;
  v112 = &v108;
  MEMORY[0x1895F8858](v28);
  uint64_t v32 = (char *)&v108 - v31;
  if (one-time initialization token for predicateArchivingState != -1) {
    swift_once();
  }
  v33 = pthread_getspecific(static _ThreadLocal.Key<A>.predicateArchivingState);
  v114 = &v108;
  v113 = &v108;
  if (v33)
  {
    LODWORD(v119) = 0;
    uint64_t v34 = (uint64_t *)(*v33 + 16LL);
    id v35 = (uint64_t *)(*v33 + 24LL);
  }

  else
  {
    if (one-time initialization token for standardConfiguration != -1) {
      swift_once();
    }
    uint64_t v34 = &static PredicateCodableConfiguration.standardConfiguration;
    id v35 = &qword_18C5CFE70;
    LODWORD(v119) = byte_18C5CFE78;
  }

  uint64_t v36 = *v35;
  uint64_t v123 = *v34;
  swift_bridgeObjectRetain();
  unint64_t v126 = v36;
  swift_bridgeObjectRetain();
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  dispatch thunk of Encoder.unkeyedContainer()();
  uint64_t v37 = (uint64_t)v120;
  outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>( (uint64_t)v120,  (uint64_t)&v138);
  uint64_t v109 = v140;
  uint64_t v121 = v139;
  v122 = __swift_project_boxed_opaque_existential_1(&v138, v139);
  v111 = &v108;
  MEMORY[0x1895F8858](v122);
  unint64_t v39 = (v38 + 15) & 0xFFFFFFFFFFFFFFF0LL;
  uint64_t v40 = (void **)((char *)&v108 - v39);
  uint64_t v41 = v37 + *(int *)(v129 + 36);
  v42 = v125;
  (*(void (**)(char *, uint64_t, void *))(v118 + 16))(v30, v41, v125);
  if (v4)
  {
    char v43 = (int *)(v42 + 4);
    uint64_t v44 = (char **)((char *)&v108 - v39);
    uint64_t v45 = v4;
    do
    {
      if (v4 == 1)
      {
        LODWORD(v46) = 0;
        id v47 = v32;
      }

      else
      {
        uint64_t v46 = *v43;
        id v47 = &v32[v46];
      }

      *(void *)id v47 = *(void *)&v30[(int)v46];
      *v44++ = v47;
      v43 += 4;
      --v45;
    }

    while (v45);
  }

  __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v141, v142);
  lazy protocol witness table accessor for type PredicateExpressionCodingKeys and conformance PredicateExpressionCodingKeys();
  uint64_t v48 = dispatch thunk of UnkeyedEncodingContainer.nestedContainer<A>(keyedBy:)();
  uint64_t v49 = MEMORY[0x1895F8858](v48);
  v50 = (uint64_t **)((char *)&v108 - v39);
  uint64_t v51 = v123;
  if (v4)
  {
    id v52 = (int *)(v125 + 4);
    v53 = (uint64_t *)((char *)&v108 - v39);
    uint64_t v54 = v4;
    do
    {
      if (v4 == 1) {
        int v55 = 0;
      }
      else {
        int v55 = *v52;
      }
      v56 = *v40++;
      *(void *)&v27[v55] = *v56;
      *v53++ = &v27[v55];
      v52 += 4;
      --v54;
    }

    while (v54);
  }

  uint64_t v135 = v51;
  unint64_t v136 = v126;
  unsigned __int8 v137 = v119;
  MEMORY[0x1895F8858](v49);
  v59 = (char *)&v108 - ((v58 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (v4)
  {
    v60 = (uint64_t *)(*(void *)(v57 + 24) & 0xFFFFFFFFFFFFFFFELL);
    id v61 = (int *)(v110 + 32);
    v62 = (uint64_t *)((char *)&v108 - ((v58 + 15) & 0xFFFFFFFFFFFFFFF0LL));
    uint64_t v63 = v4;
    do
    {
      if (v4 == 1) {
        int v64 = 0;
      }
      else {
        int v64 = *v61;
      }
      uint64_t v65 = *v60++;
      *(void *)&v11[v64] = v65;
      *v62++ = &v11[v64];
      v61 += 4;
      --v63;
    }

    while (v63);
  }

  uint64_t v66 = *(void *)(v57 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v127 = v66;
  PredicateCodableConfiguration.allowInputs<each A>(_:)((uint64_t)v59, v4, v66);
  uint64_t v67 = v121;
  uint64_t v134 = v121;
  uint64_t v68 = __swift_allocate_boxed_opaque_existential_1(&v131);
  (*(void (**)(uint64_t *, void *, uint64_t))(*(void *)(v67 - 8) + 16LL))(v68, v122, v67);
  __swift_project_boxed_opaque_existential_1(&v131, v134);
  DynamicType = (uint64_t *)swift_getDynamicType();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v131);
  uint64_t v70 = v135;
  uint64_t v71 = v136;
  uint64_t v131 = v135;
  unint64_t v132 = v136;
  LODWORD(v129) = v137;
  unsigned __int8 v133 = v137;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  unint64_t v72 = PredicateCodableConfiguration._identifier(for:)(DynamicType);
  v125 = &v108;
  if (!v73)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v84 = _typeName(_:qualified:)();
    uint64_t v86 = v85;
    uint64_t v131 = 47LL;
    unint64_t v132 = 0xE100000000000000LL;
    uint64_t v143 = MEMORY[0x18961AFE8];
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
    lazy protocol witness table accessor for type [String] and conformance [A]( (unint64_t *)&lazy protocol witness table cache variable for type [String] and conformance [A],  &demangling cache variable for type metadata for [String],  MEMORY[0x189618458]);
    v87._uint64_t countAndFlagsBits = BidirectionalCollection<>.joined(separator:)();
    String.append(_:)(v87);
    swift_bridgeObjectRelease();
    uint64_t v88 = v131;
    unint64_t v89 = v132;
    lazy protocol witness table accessor for type PredicateCodableError and conformance PredicateCodableError();
    swift_allocError();
    *(void *)uint64_t v90 = v84;
    *(void *)(v90 + 8) = v86;
    *(void *)(v90 + 16) = v88;
    *(void *)(v90 + 24) = v89;
    *(_BYTE *)(v90 + 32) = 0;
    swift_willThrow();
    goto LABEL_43;
  }

  uint64_t v75 = v73;
  v120 = v72;
  if ((v74 & 1) != 0)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v108 = MEMORY[0x18961AFE8];
  }

  else
  {
    uint64_t v76 = Type.genericArguments2.getter();
    uint64_t v78 = v77;
    uint64_t v80 = v79;
    swift_bridgeObjectRetain();
    LOBYTE(v107) = 0;
    uint64_t v81 = v76;
    uint64_t v82 = v130;
    uint64_t v83 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF18ReflectionInternal17GenericArguments2V_10Foundation19ExpressionStructure33_EAF63E98CB95A00A30DCCB317F51A4F9LLV8ArgumentOsAE_pTg5016_s10Foundation19i12Structure33_klmnopqrs18LLV_4with4pathAD18d63Internal4TypeV_AA29PredicateCodableConfigurationVSaySSGtKcfcAD8t5OAG07F9U0OKXEfU_AI29PredicateCodableConfigurationVSaySSGSS10identifier_Sb10isConcretetTf1cn_nTf4nggg_n( v81,  v78,  v80,  v70,  v71,  v129,  MEMORY[0x18961AFE8],  (uint64_t)v120,  v75);
    if (v82)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease_n();
LABEL_43:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v91 = v115;
      goto LABEL_54;
    }

    uint64_t v108 = v83;
    uint64_t v130 = 0LL;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }

  uint64_t v110 = v75;
  uint64_t v118 = v71;
  uint64_t v119 = v70;
  LOBYTE(v143) = 0;
  uint64_t v92 = KeyedEncodingContainer.nestedUnkeyedContainer(forKey:)();
  if (v4)
  {
    id v93 = (uint64_t *)(v127 & 0xFFFFFFFFFFFFFFFELL);
    uint64_t v94 = v4;
    while (1)
    {
      uint64_t v95 = *v93;
      uint64_t v143 = **v50;
      __swift_mutable_project_boxed_opaque_existential_1((uint64_t)&v131, v134);
      uint64_t v98 = type metadata accessor for PredicateExpressions.Variable(0LL, v95, v96, v97);
      MEMORY[0x186E20D4C](&protocol conformance descriptor for PredicateExpressions.Variable<A>, v98);
      uint64_t v99 = v130;
      uint64_t v92 = dispatch thunk of UnkeyedEncodingContainer.encode<A>(_:)();
      uint64_t v130 = v99;
      if (v99) {
        break;
      }
      ++v50;
      ++v93;
      if (!--v94) {
        goto LABEL_50;
      }
    }

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v131);
  }

  else
  {
LABEL_50:
    MEMORY[0x1895F8858](v92);
    uint64_t v100 = v121;
    *(&v108 - 10) = v4;
    *(&v108 - 9) = v100;
    *(&v108 - 8) = v127;
    uint64_t v101 = v109;
    *(&v108 - 7) = *(void *)(v109 + 8);
    char v102 = v128;
    *(&v108 - 6) = *(void *)(v101 + 24);
    *(&v108 - 5) = (uint64_t)v102;
    uint64_t v103 = v110;
    *(&v108 - 4) = (uint64_t)v120;
    *(&v108 - 3) = v103;
    uint64_t v106 = v108;
    v107 = v122;
    uint64_t v104 = v130;
    specialized _withPredicateArchivingState<A>(_:_:)( v119,  v118,  v129,  (void (*)(uint64_t))partial apply for closure #1 in KeyedEncodingContainer<>._encode<A, B>(_:variable:predicateConfiguration:));
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v131);
    if (!v104)
    {
      (*(void (**)(char *, uint64_t))(v115 + 8))(v102, v124);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v138);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v141);
      swift_bridgeObjectRelease();
      return swift_bridgeObjectRelease();
    }
  }

  uint64_t v91 = v115;
LABEL_54:
  (*(void (**)(char *, uint64_t))(v91 + 8))(v128, v124);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v138);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v141);
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t Predicate.encode(to:configuration:)(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a3 + 16);
  uint64_t v119 = (uint64_t *)(8 * v6);
  if (v6 == 1)
  {
    uint64_t MetatypeMetadata = swift_getMetatypeMetadata();
  }

  else
  {
    MEMORY[0x1895F8858](a1);
    if (v6)
    {
      unint64_t v9 = *(void *)(a3 + 24) & 0xFFFFFFFFFFFFFFFELL;
      uint64_t v10 = (uint64_t *)((char *)&v100 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL));
      uint64_t v11 = v6;
      do
      {
        v9 += 8LL;
        *v10++ = swift_getMetatypeMetadata();
        --v11;
      }

      while (v11);
    }

    uint64_t MetatypeMetadata = swift_getTupleTypeMetadata();
  }

  uint64_t v108 = &v100;
  uint64_t v102 = MetatypeMetadata;
  MEMORY[0x1895F8858](MetatypeMetadata);
  uint64_t v13 = (char *)&v100 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<PredicateExpressionCodingKeys>);
  v107 = &v100;
  uint64_t v117 = v14;
  uint64_t v106 = *(void *)(v14 - 8);
  uint64_t v15 = MEMORY[0x1895F8858](v14);
  uint64_t v118 = (char *)&v100 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v120 = a3;
  if (v6 == 1)
  {
    uint64_t TupleTypeMetadata = type metadata accessor for PredicateExpressions.Variable( 0LL,  *(void *)(*(void *)(a3 + 24) & 0xFFFFFFFFFFFFFELL),  v16,  v17);
  }

  else
  {
    uint64_t v121 = &v100;
    MEMORY[0x1895F8858](v15);
    if (v6)
    {
      uint64_t v23 = (uint64_t *)(*(void *)(a3 + 24) & 0xFFFFFFFFFFFFFFFELL);
      uint64_t v24 = (uint64_t *)((char *)&v100 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0LL));
      uint64_t v25 = v6;
      do
      {
        uint64_t v26 = *v23++;
        *v24++ = type metadata accessor for PredicateExpressions.Variable(255LL, v26, v20, v21);
        --v25;
      }

      while (v25);
    }

    uint64_t TupleTypeMetadata = swift_getTupleTypeMetadata();
  }

  uint64_t v121 = (uint64_t *)TupleTypeMetadata;
  uint64_t v105 = &v100;
  uint64_t v27 = *(void *)(TupleTypeMetadata - 8);
  uint64_t v28 = MEMORY[0x1895F8858](TupleTypeMetadata);
  uint64_t v30 = (char *)&v100 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v104 = &v100;
  uint64_t v31 = MEMORY[0x1895F8858](v28);
  v33 = (char *)&v100 - v32;
  uint64_t v103 = &v100;
  MEMORY[0x1895F8858](v31);
  id v35 = (char *)&v100 - v34;
  uint64_t v111 = *(void *)a2;
  uint64_t v112 = *(void *)(a2 + 8);
  LODWORD(v110) = *(unsigned __int8 *)(a2 + 16);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  dispatch thunk of Encoder.unkeyedContainer()();
  uint64_t v36 = v113;
  outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>( v113,  (uint64_t)v130);
  uint64_t v101 = v132;
  uint64_t v115 = v131;
  v116 = __swift_project_boxed_opaque_existential_1(v130, v131);
  uint64_t v109 = &v100;
  MEMORY[0x1895F8858](v116);
  unint64_t v38 = (v37 + 15) & 0xFFFFFFFFFFFFFFF0LL;
  unint64_t v39 = *(void (**)(char *, uint64_t, uint64_t *))(v27 + 16);
  uint64_t v40 = v121;
  v39(v33, v36 + *(int *)(v120 + 36), v121);
  if (v6)
  {
    uint64_t v41 = (int *)(v40 + 4);
    v42 = (char **)((char *)&v100 - v38);
    uint64_t v43 = v6;
    do
    {
      if (v6 == 1)
      {
        LODWORD(v44) = 0;
        uint64_t v45 = v35;
      }

      else
      {
        uint64_t v44 = *v41;
        uint64_t v45 = &v35[v44];
      }

      *(void *)uint64_t v45 = *(void *)&v33[(int)v44];
      *v42++ = v45;
      v41 += 4;
      --v43;
    }

    while (v43);
  }

  __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v133, v134);
  lazy protocol witness table accessor for type PredicateExpressionCodingKeys and conformance PredicateExpressionCodingKeys();
  uint64_t v46 = dispatch thunk of UnkeyedEncodingContainer.nestedContainer<A>(keyedBy:)();
  MEMORY[0x1895F8858](v46);
  id v47 = (uint64_t **)((char *)&v100 - v38);
  if (v6)
  {
    uint64_t v48 = 0LL;
    uint64_t v49 = (int *)(v121 + 4);
    unint64_t v50 = v112;
    uint64_t v51 = v111;
    do
    {
      if (v6 == 1) {
        int v52 = 0;
      }
      else {
        int v52 = *v49;
      }
      *(void *)&v30[v52] = **(void **)((char *)&v100 + 8 * v48 - v38);
      v47[v48++] = (uint64_t *)&v30[v52];
      v49 += 4;
    }

    while (v6 != v48);
    uint64_t v127 = v51;
    unint64_t v128 = v50;
    unsigned __int8 v129 = v110;
    MEMORY[0x1895F8858](v51);
    uint64_t v54 = (char *)&v100 - ((v53 + 15) & 0xFFFFFFFFFFFFFFF0LL);
    uint64_t v55 = 0LL;
    unint64_t v56 = *(void *)(v120 + 24) & 0xFFFFFFFFFFFFFFFELL;
    uint64_t v58 = (int *)(v57 + 32);
    uint64_t v59 = v114;
    do
    {
      if (v6 == 1) {
        int v60 = 0;
      }
      else {
        int v60 = *v58;
      }
      id v61 = &v13[v60];
      *(void *)id v61 = *(void *)(v56 + 8 * v55);
      *(void *)&v54[8 * v55++] = v61;
      v58 += 4;
    }

    while (v6 != v55);
  }

  else
  {
    uint64_t v127 = v111;
    unint64_t v128 = v112;
    uint64_t v54 = &v135;
    unsigned __int8 v129 = v110;
    uint64_t v59 = v114;
  }

  uint64_t v62 = *(void *)(v120 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  PredicateCodableConfiguration.allowInputs<each A>(_:)((uint64_t)v54, v6, v62);
  uint64_t v63 = v115;
  uint64_t v125 = v115;
  int v64 = __swift_allocate_boxed_opaque_existential_1(&v122);
  (*(void (**)(uint64_t *, void *, uint64_t))(*(void *)(v63 - 8) + 16LL))(v64, v116, v63);
  __swift_project_boxed_opaque_existential_1(&v122, v125);
  DynamicType = (uint64_t *)swift_getDynamicType();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v122);
  uint64_t v66 = v127;
  uint64_t v67 = v128;
  uint64_t v122 = v127;
  unint64_t v123 = v128;
  LODWORD(v121) = v129;
  unsigned __int8 v124 = v129;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v68 = PredicateCodableConfiguration._identifier(for:)(DynamicType);
  if (!v69)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v79 = _typeName(_:qualified:)();
    uint64_t v81 = v80;
    uint64_t v122 = 47LL;
    unint64_t v123 = 0xE100000000000000LL;
    uint64_t v126 = MEMORY[0x18961AFE8];
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
    lazy protocol witness table accessor for type [String] and conformance [A]( (unint64_t *)&lazy protocol witness table cache variable for type [String] and conformance [A],  &demangling cache variable for type metadata for [String],  MEMORY[0x189618458]);
    uint64_t v78 = v118;
    v82._uint64_t countAndFlagsBits = BidirectionalCollection<>.joined(separator:)();
    String.append(_:)(v82);
    swift_bridgeObjectRelease();
    uint64_t v83 = v122;
    unint64_t v84 = v123;
    lazy protocol witness table accessor for type PredicateCodableError and conformance PredicateCodableError();
    swift_allocError();
    *(void *)uint64_t v85 = v79;
    *(void *)(v85 + 8) = v81;
    *(void *)(v85 + 16) = v83;
    *(void *)(v85 + 24) = v84;
    *(_BYTE *)(v85 + 32) = 0;
    swift_willThrow();
    goto LABEL_36;
  }

  uint64_t v119 = &v100;
  uint64_t v120 = (uint64_t)v68;
  if ((v70 & 1) != 0)
  {
    uint64_t v112 = v69;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v111 = MEMORY[0x18961AFE8];
  }

  else
  {
    uint64_t v71 = v69;
    uint64_t v72 = Type.genericArguments2.getter();
    uint64_t v74 = v73;
    uint64_t v76 = v75;
    swift_bridgeObjectRetain();
    LOBYTE(v99) = 0;
    uint64_t v77 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF18ReflectionInternal17GenericArguments2V_10Foundation19ExpressionStructure33_EAF63E98CB95A00A30DCCB317F51A4F9LLV8ArgumentOsAE_pTg5016_s10Foundation19i12Structure33_klmnopqrs18LLV_4with4pathAD18d63Internal4TypeV_AA29PredicateCodableConfigurationVSaySSGtKcfcAD8t5OAG07F9U0OKXEfU_AI29PredicateCodableConfigurationVSaySSGSS10identifier_Sb10isConcretetTf1cn_nTf4nggg_n( v72,  v74,  v76,  v66,  v67,  (char)v121,  MEMORY[0x18961AFE8],  v120,  v71);
    if (v59)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease_n();
      uint64_t v78 = v118;
LABEL_36:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v86 = v106;
LABEL_46:
      (*(void (**)(char *, uint64_t))(v86 + 8))(v78, v117);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v130);
      return __swift_destroy_boxed_opaque_existential_1((uint64_t)v133);
    }

    uint64_t v111 = v77;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v112 = v71;
    swift_bridgeObjectRelease();
  }

  LOBYTE(v126) = 0;
  uint64_t v87 = KeyedEncodingContainer.nestedUnkeyedContainer(forKey:)();
  uint64_t v114 = v66;
  uint64_t v110 = v62;
  uint64_t v113 = v67;
  if (v6)
  {
    uint64_t v88 = (uint64_t *)(v62 & 0xFFFFFFFFFFFFFFFELL);
    uint64_t v89 = v6;
    while (1)
    {
      uint64_t v90 = *v88;
      uint64_t v126 = **v47;
      __swift_mutable_project_boxed_opaque_existential_1((uint64_t)&v122, v125);
      uint64_t v93 = type metadata accessor for PredicateExpressions.Variable(0LL, v90, v91, v92);
      MEMORY[0x186E20D4C](&protocol conformance descriptor for PredicateExpressions.Variable<A>, v93);
      uint64_t v87 = dispatch thunk of UnkeyedEncodingContainer.encode<A>(_:)();
      if (v59) {
        break;
      }
      ++v47;
      ++v88;
      if (!--v89) {
        goto LABEL_43;
      }
    }

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v122);
    uint64_t v86 = v106;
    uint64_t v78 = v118;
    goto LABEL_46;
  }

uint64_t Predicate.init(from:)@<X0>( uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>(a1, (uint64_t)v17);
  if (one-time initialization token for predicateArchivingState != -1) {
    swift_once();
  }
  uint64_t v8 = pthread_getspecific(static _ThreadLocal.Key<A>.predicateArchivingState);
  if (v8)
  {
    char v9 = 0;
    uint64_t v10 = (uint64_t *)(*v8 + 16LL);
    uint64_t v11 = (uint64_t *)(*v8 + 24LL);
  }

  else
  {
    if (one-time initialization token for standardConfiguration != -1) {
      swift_once();
    }
    uint64_t v10 = &static PredicateCodableConfiguration.standardConfiguration;
    uint64_t v11 = &qword_18C5CFE70;
    char v9 = byte_18C5CFE78;
  }

  uint64_t v12 = *v11;
  uint64_t v13 = *v10;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v15[0] = v13;
  v15[1] = v12;
  char v16 = v9;
  Predicate.init(from:configuration:)(v17, (uint64_t)v15, a2, a3, a4);
  return __swift_destroy_boxed_opaque_existential_1(a1);
}

uint64_t Predicate.init(from:configuration:)@<X0>( void *a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v5 = a4;
  uint64_t v102 = a1;
  uint64_t v8 = (uint64_t *)(a4 & 0xFFFFFFFFFFFFFFFELL);
  uint64_t v85 = a5;
  if (a3 == 1)
  {
    uint64_t MetatypeMetadata = swift_getMetatypeMetadata();
    uint64_t v10 = MetatypeMetadata;
  }

  else
  {
    MEMORY[0x1895F8858](a1);
    unint64_t v12 = (v11 + 15) & 0xFFFFFFFFFFFFFFF0LL;
    if (a3)
    {
      uint64_t v13 = v8;
      uint64_t v14 = (uint64_t *)((char *)&v80 - v12);
      unint64_t v15 = a3;
      do
      {
        ++v13;
        *v14++ = swift_getMetatypeMetadata();
        --v15;
      }

      while (v15);
    }

    uint64_t MetatypeMetadata = swift_getTupleTypeMetadata();
    uint64_t v10 = MetatypeMetadata;
  }

  MEMORY[0x1895F8858](MetatypeMetadata);
  uint64_t v17 = (char *)&v80 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v18 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for any PredicateExpression<Self.PredicateExpression.Output == Bool>);
  uint64_t v100 = &v80;
  uint64_t v95 = v5;
  uint64_t v94 = v18;
  uint64_t v89 = v8;
  uint64_t v88 = v10;
  uint64_t v87 = v17;
  if (a3 == 1)
  {
    type metadata accessor for PredicateExpressions.Variable(255LL, *v8, v19, v20);
    uint64_t TupleTypeMetadata = swift_checkMetadataState();
  }

  else
  {
    MEMORY[0x1895F8858](v18);
    unint64_t v25 = (v24 + 15) & 0xFFFFFFFFFFFFFFF0LL;
    if (a3)
    {
      uint64_t v26 = v8;
      uint64_t v27 = (uint64_t *)((char *)&v80 - v25);
      unint64_t v28 = a3;
      do
      {
        uint64_t v29 = *v26++;
        *v27++ = type metadata accessor for PredicateExpressions.Variable(255LL, v29, v22, v23);
        --v28;
      }

      while (v28);
    }

    uint64_t TupleTypeMetadata = swift_getTupleTypeMetadata();
    uint64_t v5 = v95;
  }

  uint64_t v90 = TupleTypeMetadata;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v99 = &v80;
  uint64_t v92 = TupleTypeMetadata2;
  uint64_t v31 = MEMORY[0x1895F8858](TupleTypeMetadata2);
  uint64_t v84 = (uint64_t)&v80 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v98 = &v80;
  uint64_t v33 = MEMORY[0x1895F8858](v31);
  uint64_t v86 = (uint64_t)&v80 - v34;
  uint64_t v97 = &v80;
  MEMORY[0x1895F8858](v33);
  uint64_t v93 = (uint64_t)&v80 - v35;
  uint64_t v37 = type metadata accessor for Predicate(0LL, a3, v5, v36);
  uint64_t v96 = &v80;
  uint64_t v38 = *(void *)(v37 - 8);
  MEMORY[0x1895F8858](v37);
  uint64_t v40 = (char *)&v80 - v39;
  uint64_t v41 = *(void *)a2;
  LODWORD(v91) = *(unsigned __int8 *)(a2 + 16);
  __swift_project_boxed_opaque_existential_1(v102, v102[3]);
  uint64_t v42 = v101;
  uint64_t v43 = dispatch thunk of Decoder.unkeyedContainer()();
  if (v42)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }

  else
  {
    char v44 = (char)v91;
    Swift::String v82 = v40;
    uint64_t v80 = v38;
    uint64_t v81 = v37;
    uint64_t v45 = v93 + *(int *)(v92 + 48);
    uint64_t v46 = MEMORY[0x1895F8858](v43);
    unint64_t v50 = (char *)&v80 - ((v49 + 15) & 0xFFFFFFFFFFFFFFF0LL);
    uint64_t v83 = v51;
    uint64_t v101 = 0LL;
    if (a3)
    {
      uint64_t v52 = 0LL;
      uint64_t v53 = (int *)(v90 + 32);
      do
      {
        if (a3 == 1) {
          int v54 = 0;
        }
        else {
          int v54 = *v53;
        }
        *(void *)&v50[8 * v52++] = v45 + v54;
        v53 += 4;
      }

      while (a3 != v52);
      MEMORY[0x1895F8858](v46);
      uint64_t v58 = (char *)&v80 - ((v57 + 15) & 0xFFFFFFFFFFFFFFF0LL);
      uint64_t v59 = 0LL;
      int v60 = (int *)(v88 + 32);
      uint64_t v61 = v41;
      uint64_t v62 = v87;
      uint64_t v64 = v63;
      do
      {
        if (a3 == 1) {
          int v65 = 0;
        }
        else {
          int v65 = *v60;
        }
        uint64_t v66 = &v62[v65];
        *(void *)uint64_t v66 = *(void *)(v56 + 8 * v59);
        *(void *)&v58[8 * v59++] = v66;
        v60 += 4;
      }

      while (a3 != v59);
      uint64_t v67 = v55;
    }

    else
    {
      uint64_t v67 = v47;
      uint64_t v58 = &v110;
      uint64_t v61 = v41;
      uint64_t v64 = v48;
    }

    v105[0] = v61;
    v105[1] = v64;
    char v106 = v44;
    uint64_t v69 = v108;
    uint64_t v68 = v109;
    __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v107, v108);
    uint64_t v70 = v101;
    UnkeyedDecodingContainer.decodePredicateExpression<A>(input:predicateConfiguration:)( v67,  (uint64_t)v50,  (uint64_t)v58,  v105,  a3,  v69,  v95,  v68);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v70)
    {
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v107);
    }

    else
    {
      uint64_t v101 = 0LL;
      uint64_t v71 = v92;
      uint64_t v72 = v67;
      uint64_t v73 = v86 + *(int *)(v92 + 48);
      outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>(v72, v86);
      uint64_t v74 = v90;
      uint64_t v95 = *(void *)(v90 - 8);
      uint64_t v91 = *(void (**)(uint64_t, uint64_t, uint64_t))(v95 + 16);
      v91(v73, v45, v90);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>);
      if ((swift_dynamicCast() & 1) != 0)
      {
        outlined init with take of any PredicateExpression<Self.Output == B1>(v103, (uint64_t)v104);
        outlined init with take of any PredicateExpression<Self.Output == B1>(v104, (uint64_t)v82);
        uint64_t v75 = *(int *)(v71 + 48);
        uint64_t v76 = v84;
        uint64_t v77 = v84 + v75;
        outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>(v93, v84);
        v91(v77, v45, v74);
        uint64_t v78 = v81;
        (*(void (**)(char *, uint64_t, uint64_t))(v95 + 32))(&v82[*(int *)(v81 + 36)], v77, v74);
        __swift_destroy_boxed_opaque_existential_1(v76);
        __swift_destroy_boxed_opaque_existential_1(v93);
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v107);
        (*(void (**)(uint64_t, char *, uint64_t))(v80 + 32))(v85, v82, v78);
        return __swift_destroy_boxed_opaque_existential_1((uint64_t)v102);
      }

      outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>( (uint64_t)v107,  (uint64_t)v103);
      type metadata accessor for DecodingError();
      swift_allocError();
      static DecodingError.dataCorruptedError(in:debugDescription:)();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v103);
      swift_willThrow();
      __swift_destroy_boxed_opaque_existential_1(v93);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v107);
    }
  }

  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v102);
}

uint64_t protocol witness for Decodable.init(from:) in conformance Predicate<Pack{repeat A}>@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return Predicate.init(from:)(a1, *(void *)(a2 + 16), *(void *)(a2 + 24), a3);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance Predicate<Pack{repeat A}>( void *a1, uint64_t a2)
{
  return Predicate.encode(to:)(a1, a2);
}

uint64_t Expression.encode(to:)(void *a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 16);
  uint64_t v127 = 8 * v4;
  uint64_t v129 = a2;
  if (v4 == 1)
  {
    uint64_t MetatypeMetadata = swift_getMetatypeMetadata();
  }

  else
  {
    MEMORY[0x1895F8858](a1);
    if (v4)
    {
      unint64_t v7 = *(void *)(v129 + 24) & 0xFFFFFFFFFFFFFFFELL;
      uint64_t v8 = (uint64_t *)((char *)&v108 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL));
      uint64_t v9 = v4;
      do
      {
        v7 += 8LL;
        *v8++ = swift_getMetatypeMetadata();
        --v9;
      }

      while (v9);
    }

    uint64_t MetatypeMetadata = swift_getTupleTypeMetadata();
  }

  uint64_t v117 = &v108;
  uint64_t v110 = MetatypeMetadata;
  MEMORY[0x1895F8858](MetatypeMetadata);
  uint64_t v11 = (char *)&v108 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<PredicateExpressionCodingKeys>);
  v116 = &v108;
  uint64_t v124 = v12;
  uint64_t v115 = *(void *)(v12 - 8);
  uint64_t v13 = MEMORY[0x1895F8858](v12);
  unint64_t v128 = (char *)&v108 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v130 = v2;
  if (v4 == 1)
  {
    uint64_t TupleTypeMetadata = type metadata accessor for PredicateExpressions.Variable( 0LL,  *(void *)(*(void *)(v129 + 24) & 0xFFFFFFFFFFFFFELL),  v14,  v15);
  }

  else
  {
    MEMORY[0x1895F8858](v13);
    if (v4)
    {
      uint64_t v21 = (uint64_t *)(*(void *)(v129 + 24) & 0xFFFFFFFFFFFFFFFELL);
      uint64_t v22 = (uint64_t *)((char *)&v108 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0LL));
      uint64_t v23 = v4;
      do
      {
        uint64_t v24 = *v21++;
        *v22++ = type metadata accessor for PredicateExpressions.Variable(255LL, v24, v18, v19);
        --v23;
      }

      while (v23);
    }

    uint64_t TupleTypeMetadata = swift_getTupleTypeMetadata();
  }

  uint64_t v125 = (void *)TupleTypeMetadata;
  uint64_t v118 = *(void *)(TupleTypeMetadata - 8);
  uint64_t v25 = MEMORY[0x1895F8858](TupleTypeMetadata);
  uint64_t v27 = (char *)&v108 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v28 = MEMORY[0x1895F8858](v25);
  uint64_t v30 = (char *)&v108 - v29;
  uint64_t v112 = &v108;
  MEMORY[0x1895F8858](v28);
  uint64_t v32 = (char *)&v108 - v31;
  if (one-time initialization token for predicateArchivingState != -1) {
    swift_once();
  }
  uint64_t v33 = pthread_getspecific(static _ThreadLocal.Key<A>.predicateArchivingState);
  uint64_t v114 = &v108;
  uint64_t v113 = &v108;
  if (v33)
  {
    LODWORD(v119) = 0;
    uint64_t v34 = (uint64_t *)(*v33 + 16LL);
    uint64_t v35 = (uint64_t *)(*v33 + 24LL);
  }

  else
  {
    if (one-time initialization token for standardConfiguration != -1) {
      swift_once();
    }
    uint64_t v34 = &static PredicateCodableConfiguration.standardConfiguration;
    uint64_t v35 = &qword_18C5CFE70;
    LODWORD(v119) = byte_18C5CFE78;
  }

  uint64_t v36 = *v35;
  uint64_t v123 = *v34;
  swift_bridgeObjectRetain();
  unint64_t v126 = v36;
  swift_bridgeObjectRetain();
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  dispatch thunk of Encoder.unkeyedContainer()();
  uint64_t v37 = (uint64_t)v120;
  outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>( (uint64_t)v120,  (uint64_t)&v138);
  uint64_t v109 = v140;
  uint64_t v121 = v139;
  uint64_t v122 = __swift_project_boxed_opaque_existential_1(&v138, v139);
  uint64_t v111 = &v108;
  MEMORY[0x1895F8858](v122);
  unint64_t v39 = (v38 + 15) & 0xFFFFFFFFFFFFFFF0LL;
  uint64_t v40 = (void **)((char *)&v108 - v39);
  uint64_t v41 = v37 + *(int *)(v129 + 44);
  uint64_t v42 = v125;
  (*(void (**)(char *, uint64_t, void *))(v118 + 16))(v30, v41, v125);
  if (v4)
  {
    uint64_t v43 = (int *)(v42 + 4);
    char v44 = (char **)((char *)&v108 - v39);
    uint64_t v45 = v4;
    do
    {
      if (v4 == 1)
      {
        LODWORD(v46) = 0;
        uint64_t v47 = v32;
      }

      else
      {
        uint64_t v46 = *v43;
        uint64_t v47 = &v32[v46];
      }

      *(void *)uint64_t v47 = *(void *)&v30[(int)v46];
      *v44++ = v47;
      v43 += 4;
      --v45;
    }

    while (v45);
  }

  __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v141, v142);
  lazy protocol witness table accessor for type PredicateExpressionCodingKeys and conformance PredicateExpressionCodingKeys();
  uint64_t v48 = dispatch thunk of UnkeyedEncodingContainer.nestedContainer<A>(keyedBy:)();
  uint64_t v49 = MEMORY[0x1895F8858](v48);
  unint64_t v50 = (uint64_t **)((char *)&v108 - v39);
  uint64_t v51 = v123;
  if (v4)
  {
    uint64_t v52 = (int *)(v125 + 4);
    uint64_t v53 = (uint64_t *)((char *)&v108 - v39);
    uint64_t v54 = v4;
    do
    {
      if (v4 == 1) {
        int v55 = 0;
      }
      else {
        int v55 = *v52;
      }
      uint64_t v56 = *v40++;
      *(void *)&v27[v55] = *v56;
      *v53++ = &v27[v55];
      v52 += 4;
      --v54;
    }

    while (v54);
  }

  uint64_t v135 = v51;
  unint64_t v136 = v126;
  unsigned __int8 v137 = v119;
  MEMORY[0x1895F8858](v49);
  uint64_t v59 = (char *)&v108 - ((v58 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (v4)
  {
    int v60 = (uint64_t *)(*(void *)(v57 + 24) & 0xFFFFFFFFFFFFFFFELL);
    uint64_t v61 = (int *)(v110 + 32);
    uint64_t v62 = (uint64_t *)((char *)&v108 - ((v58 + 15) & 0xFFFFFFFFFFFFFFF0LL));
    uint64_t v63 = v4;
    do
    {
      if (v4 == 1) {
        int v64 = 0;
      }
      else {
        int v64 = *v61;
      }
      uint64_t v65 = *v60++;
      *(void *)&v11[v64] = v65;
      *v62++ = &v11[v64];
      v61 += 4;
      --v63;
    }

    while (v63);
  }

  uint64_t v66 = *(void *)(v57 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v127 = v66;
  PredicateCodableConfiguration.allowInputs<each A>(_:)((uint64_t)v59, v4, v66);
  uint64_t v67 = v121;
  uint64_t v134 = v121;
  uint64_t v68 = __swift_allocate_boxed_opaque_existential_1(&v131);
  (*(void (**)(uint64_t *, void *, uint64_t))(*(void *)(v67 - 8) + 16LL))(v68, v122, v67);
  __swift_project_boxed_opaque_existential_1(&v131, v134);
  DynamicType = (uint64_t *)swift_getDynamicType();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v131);
  uint64_t v70 = v135;
  uint64_t v71 = v136;
  uint64_t v131 = v135;
  unint64_t v132 = v136;
  LODWORD(v129) = v137;
  unsigned __int8 v133 = v137;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v72 = PredicateCodableConfiguration._identifier(for:)(DynamicType);
  uint64_t v125 = &v108;
  if (!v73)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v84 = _typeName(_:qualified:)();
    uint64_t v86 = v85;
    uint64_t v131 = 47LL;
    unint64_t v132 = 0xE100000000000000LL;
    uint64_t v143 = MEMORY[0x18961AFE8];
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
    lazy protocol witness table accessor for type [String] and conformance [A]( (unint64_t *)&lazy protocol witness table cache variable for type [String] and conformance [A],  &demangling cache variable for type metadata for [String],  MEMORY[0x189618458]);
    v87._uint64_t countAndFlagsBits = BidirectionalCollection<>.joined(separator:)();
    String.append(_:)(v87);
    swift_bridgeObjectRelease();
    uint64_t v88 = v131;
    unint64_t v89 = v132;
    lazy protocol witness table accessor for type PredicateCodableError and conformance PredicateCodableError();
    swift_allocError();
    *(void *)uint64_t v90 = v84;
    *(void *)(v90 + 8) = v86;
    *(void *)(v90 + 16) = v88;
    *(void *)(v90 + 24) = v89;
    *(_BYTE *)(v90 + 32) = 0;
    swift_willThrow();
    goto LABEL_43;
  }

  uint64_t v75 = v73;
  uint64_t v120 = v72;
  if ((v74 & 1) != 0)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v108 = MEMORY[0x18961AFE8];
  }

  else
  {
    uint64_t v76 = Type.genericArguments2.getter();
    uint64_t v78 = v77;
    uint64_t v80 = v79;
    swift_bridgeObjectRetain();
    LOBYTE(v107) = 0;
    uint64_t v81 = v76;
    uint64_t v82 = v130;
    uint64_t v83 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF18ReflectionInternal17GenericArguments2V_10Foundation19ExpressionStructure33_EAF63E98CB95A00A30DCCB317F51A4F9LLV8ArgumentOsAE_pTg5016_s10Foundation19i12Structure33_klmnopqrs18LLV_4with4pathAD18d63Internal4TypeV_AA29PredicateCodableConfigurationVSaySSGtKcfcAD8t5OAG07F9U0OKXEfU_AI29PredicateCodableConfigurationVSaySSGSS10identifier_Sb10isConcretetTf1cn_nTf4nggg_n( v81,  v78,  v80,  v70,  v71,  v129,  MEMORY[0x18961AFE8],  (uint64_t)v120,  v75);
    if (v82)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease_n();
LABEL_43:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v91 = v115;
      goto LABEL_54;
    }

    uint64_t v108 = v83;
    uint64_t v130 = 0LL;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }

  uint64_t v110 = v75;
  uint64_t v118 = v71;
  uint64_t v119 = v70;
  LOBYTE(v143) = 0;
  uint64_t v92 = KeyedEncodingContainer.nestedUnkeyedContainer(forKey:)();
  if (v4)
  {
    uint64_t v93 = (uint64_t *)(v127 & 0xFFFFFFFFFFFFFFFELL);
    uint64_t v94 = v4;
    while (1)
    {
      uint64_t v95 = *v93;
      uint64_t v143 = **v50;
      __swift_mutable_project_boxed_opaque_existential_1((uint64_t)&v131, v134);
      uint64_t v98 = type metadata accessor for PredicateExpressions.Variable(0LL, v95, v96, v97);
      MEMORY[0x186E20D4C](&protocol conformance descriptor for PredicateExpressions.Variable<A>, v98);
      uint64_t v99 = v130;
      uint64_t v92 = dispatch thunk of UnkeyedEncodingContainer.encode<A>(_:)();
      uint64_t v130 = v99;
      if (v99) {
        break;
      }
      ++v50;
      ++v93;
      if (!--v94) {
        goto LABEL_50;
      }
    }

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v131);
  }

  else
  {
LABEL_50:
    MEMORY[0x1895F8858](v92);
    uint64_t v100 = v121;
    *(&v108 - 10) = v4;
    *(&v108 - 9) = v100;
    *(&v108 - 8) = v127;
    uint64_t v101 = v109;
    *(&v108 - 7) = *(void *)(v109 + 8);
    uint64_t v102 = v128;
    *(&v108 - 6) = *(void *)(v101 + 24);
    *(&v108 - 5) = (uint64_t)v102;
    uint64_t v103 = v110;
    *(&v108 - 4) = (uint64_t)v120;
    *(&v108 - 3) = v103;
    uint64_t v106 = v108;
    v107 = v122;
    uint64_t v104 = v130;
    specialized _withPredicateArchivingState<A>(_:_:)( v119,  v118,  v129,  (void (*)(uint64_t))partial apply for closure #1 in KeyedEncodingContainer<>._encode<A, B>(_:variable:predicateConfiguration:));
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v131);
    if (!v104)
    {
      (*(void (**)(char *, uint64_t))(v115 + 8))(v102, v124);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v138);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v141);
      swift_bridgeObjectRelease();
      return swift_bridgeObjectRelease();
    }
  }

  uint64_t v91 = v115;
LABEL_54:
  (*(void (**)(char *, uint64_t))(v91 + 8))(v128, v124);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v138);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v141);
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t Expression.encode(to:configuration:)(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a3 + 16);
  uint64_t v119 = (uint64_t *)(8 * v6);
  if (v6 == 1)
  {
    uint64_t MetatypeMetadata = swift_getMetatypeMetadata();
  }

  else
  {
    MEMORY[0x1895F8858](a1);
    if (v6)
    {
      unint64_t v9 = *(void *)(a3 + 24) & 0xFFFFFFFFFFFFFFFELL;
      uint64_t v10 = (uint64_t *)((char *)&v100 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL));
      uint64_t v11 = v6;
      do
      {
        v9 += 8LL;
        *v10++ = swift_getMetatypeMetadata();
        --v11;
      }

      while (v11);
    }

    uint64_t MetatypeMetadata = swift_getTupleTypeMetadata();
  }

  uint64_t v108 = &v100;
  uint64_t v102 = MetatypeMetadata;
  MEMORY[0x1895F8858](MetatypeMetadata);
  uint64_t v13 = (char *)&v100 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<PredicateExpressionCodingKeys>);
  v107 = &v100;
  uint64_t v117 = v14;
  uint64_t v106 = *(void *)(v14 - 8);
  uint64_t v15 = MEMORY[0x1895F8858](v14);
  uint64_t v118 = (char *)&v100 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v120 = a3;
  if (v6 == 1)
  {
    uint64_t TupleTypeMetadata = type metadata accessor for PredicateExpressions.Variable( 0LL,  *(void *)(*(void *)(a3 + 24) & 0xFFFFFFFFFFFFFELL),  v16,  v17);
  }

  else
  {
    uint64_t v121 = &v100;
    MEMORY[0x1895F8858](v15);
    if (v6)
    {
      uint64_t v23 = (uint64_t *)(*(void *)(a3 + 24) & 0xFFFFFFFFFFFFFFFELL);
      uint64_t v24 = (uint64_t *)((char *)&v100 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0LL));
      uint64_t v25 = v6;
      do
      {
        uint64_t v26 = *v23++;
        *v24++ = type metadata accessor for PredicateExpressions.Variable(255LL, v26, v20, v21);
        --v25;
      }

      while (v25);
    }

    uint64_t TupleTypeMetadata = swift_getTupleTypeMetadata();
  }

  uint64_t v121 = (uint64_t *)TupleTypeMetadata;
  uint64_t v105 = &v100;
  uint64_t v27 = *(void *)(TupleTypeMetadata - 8);
  uint64_t v28 = MEMORY[0x1895F8858](TupleTypeMetadata);
  uint64_t v30 = (char *)&v100 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v104 = &v100;
  uint64_t v31 = MEMORY[0x1895F8858](v28);
  uint64_t v33 = (char *)&v100 - v32;
  uint64_t v103 = &v100;
  MEMORY[0x1895F8858](v31);
  uint64_t v35 = (char *)&v100 - v34;
  uint64_t v111 = *(void *)a2;
  uint64_t v112 = *(void *)(a2 + 8);
  LODWORD(v110) = *(unsigned __int8 *)(a2 + 16);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  dispatch thunk of Encoder.unkeyedContainer()();
  uint64_t v36 = v113;
  outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>( v113,  (uint64_t)v130);
  uint64_t v101 = v132;
  uint64_t v115 = v131;
  v116 = __swift_project_boxed_opaque_existential_1(v130, v131);
  uint64_t v109 = &v100;
  MEMORY[0x1895F8858](v116);
  unint64_t v38 = (v37 + 15) & 0xFFFFFFFFFFFFFFF0LL;
  unint64_t v39 = *(void (**)(char *, uint64_t, uint64_t *))(v27 + 16);
  uint64_t v40 = v121;
  v39(v33, v36 + *(int *)(v120 + 44), v121);
  if (v6)
  {
    uint64_t v41 = (int *)(v40 + 4);
    uint64_t v42 = (char **)((char *)&v100 - v38);
    uint64_t v43 = v6;
    do
    {
      if (v6 == 1)
      {
        LODWORD(v44) = 0;
        uint64_t v45 = v35;
      }

      else
      {
        uint64_t v44 = *v41;
        uint64_t v45 = &v35[v44];
      }

      *(void *)uint64_t v45 = *(void *)&v33[(int)v44];
      *v42++ = v45;
      v41 += 4;
      --v43;
    }

    while (v43);
  }

  __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v133, v134);
  lazy protocol witness table accessor for type PredicateExpressionCodingKeys and conformance PredicateExpressionCodingKeys();
  uint64_t v46 = dispatch thunk of UnkeyedEncodingContainer.nestedContainer<A>(keyedBy:)();
  MEMORY[0x1895F8858](v46);
  uint64_t v47 = (uint64_t **)((char *)&v100 - v38);
  if (v6)
  {
    uint64_t v48 = 0LL;
    uint64_t v49 = (int *)(v121 + 4);
    unint64_t v50 = v112;
    uint64_t v51 = v111;
    do
    {
      if (v6 == 1) {
        int v52 = 0;
      }
      else {
        int v52 = *v49;
      }
      *(void *)&v30[v52] = **(void **)((char *)&v100 + 8 * v48 - v38);
      v47[v48++] = (uint64_t *)&v30[v52];
      v49 += 4;
    }

    while (v6 != v48);
    uint64_t v127 = v51;
    unint64_t v128 = v50;
    unsigned __int8 v129 = v110;
    MEMORY[0x1895F8858](v51);
    uint64_t v54 = (char *)&v100 - ((v53 + 15) & 0xFFFFFFFFFFFFFFF0LL);
    uint64_t v55 = 0LL;
    unint64_t v56 = *(void *)(v120 + 24) & 0xFFFFFFFFFFFFFFFELL;
    uint64_t v58 = (int *)(v57 + 32);
    uint64_t v59 = v114;
    do
    {
      if (v6 == 1) {
        int v60 = 0;
      }
      else {
        int v60 = *v58;
      }
      uint64_t v61 = &v13[v60];
      *(void *)uint64_t v61 = *(void *)(v56 + 8 * v55);
      *(void *)&v54[8 * v55++] = v61;
      v58 += 4;
    }

    while (v6 != v55);
  }

  else
  {
    uint64_t v127 = v111;
    unint64_t v128 = v112;
    uint64_t v54 = &v135;
    unsigned __int8 v129 = v110;
    uint64_t v59 = v114;
  }

  uint64_t v62 = *(void *)(v120 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  PredicateCodableConfiguration.allowInputs<each A>(_:)((uint64_t)v54, v6, v62);
  uint64_t v63 = v115;
  uint64_t v125 = v115;
  int v64 = __swift_allocate_boxed_opaque_existential_1(&v122);
  (*(void (**)(uint64_t *, void *, uint64_t))(*(void *)(v63 - 8) + 16LL))(v64, v116, v63);
  __swift_project_boxed_opaque_existential_1(&v122, v125);
  DynamicType = (uint64_t *)swift_getDynamicType();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v122);
  uint64_t v66 = v127;
  uint64_t v67 = v128;
  uint64_t v122 = v127;
  unint64_t v123 = v128;
  LODWORD(v121) = v129;
  unsigned __int8 v124 = v129;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v68 = PredicateCodableConfiguration._identifier(for:)(DynamicType);
  if (!v69)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v79 = _typeName(_:qualified:)();
    uint64_t v81 = v80;
    uint64_t v122 = 47LL;
    unint64_t v123 = 0xE100000000000000LL;
    uint64_t v126 = MEMORY[0x18961AFE8];
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
    lazy protocol witness table accessor for type [String] and conformance [A]( (unint64_t *)&lazy protocol witness table cache variable for type [String] and conformance [A],  &demangling cache variable for type metadata for [String],  MEMORY[0x189618458]);
    uint64_t v78 = v118;
    v82._uint64_t countAndFlagsBits = BidirectionalCollection<>.joined(separator:)();
    String.append(_:)(v82);
    swift_bridgeObjectRelease();
    uint64_t v83 = v122;
    unint64_t v84 = v123;
    lazy protocol witness table accessor for type PredicateCodableError and conformance PredicateCodableError();
    swift_allocError();
    *(void *)uint64_t v85 = v79;
    *(void *)(v85 + 8) = v81;
    *(void *)(v85 + 16) = v83;
    *(void *)(v85 + 24) = v84;
    *(_BYTE *)(v85 + 32) = 0;
    swift_willThrow();
    goto LABEL_36;
  }

  uint64_t v119 = &v100;
  uint64_t v120 = (uint64_t)v68;
  if ((v70 & 1) != 0)
  {
    uint64_t v112 = v69;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v111 = MEMORY[0x18961AFE8];
  }

  else
  {
    uint64_t v71 = v69;
    uint64_t v72 = Type.genericArguments2.getter();
    uint64_t v74 = v73;
    uint64_t v76 = v75;
    swift_bridgeObjectRetain();
    LOBYTE(v99) = 0;
    uint64_t v77 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF18ReflectionInternal17GenericArguments2V_10Foundation19ExpressionStructure33_EAF63E98CB95A00A30DCCB317F51A4F9LLV8ArgumentOsAE_pTg5016_s10Foundation19i12Structure33_klmnopqrs18LLV_4with4pathAD18d63Internal4TypeV_AA29PredicateCodableConfigurationVSaySSGtKcfcAD8t5OAG07F9U0OKXEfU_AI29PredicateCodableConfigurationVSaySSGSS10identifier_Sb10isConcretetTf1cn_nTf4nggg_n( v72,  v74,  v76,  v66,  v67,  (char)v121,  MEMORY[0x18961AFE8],  v120,  v71);
    if (v59)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease_n();
      uint64_t v78 = v118;
LABEL_36:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v86 = v106;
LABEL_46:
      (*(void (**)(char *, uint64_t))(v86 + 8))(v78, v117);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v130);
      return __swift_destroy_boxed_opaque_existential_1((uint64_t)v133);
    }

    uint64_t v111 = v77;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v112 = v71;
    swift_bridgeObjectRelease();
  }

  LOBYTE(v126) = 0;
  uint64_t v87 = KeyedEncodingContainer.nestedUnkeyedContainer(forKey:)();
  uint64_t v114 = v66;
  uint64_t v110 = v62;
  uint64_t v113 = v67;
  if (v6)
  {
    uint64_t v88 = (uint64_t *)(v62 & 0xFFFFFFFFFFFFFFFELL);
    uint64_t v89 = v6;
    while (1)
    {
      uint64_t v90 = *v88;
      uint64_t v126 = **v47;
      __swift_mutable_project_boxed_opaque_existential_1((uint64_t)&v122, v125);
      uint64_t v93 = type metadata accessor for PredicateExpressions.Variable(0LL, v90, v91, v92);
      MEMORY[0x186E20D4C](&protocol conformance descriptor for PredicateExpressions.Variable<A>, v93);
      uint64_t v87 = dispatch thunk of UnkeyedEncodingContainer.encode<A>(_:)();
      if (v59) {
        break;
      }
      ++v47;
      ++v88;
      if (!--v89) {
        goto LABEL_43;
      }
    }

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v122);
    uint64_t v86 = v106;
    uint64_t v78 = v118;
    goto LABEL_46;
  }

uint64_t Expression.init(from:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v134 = a5;
  uint64_t v157 = a3;
  uint64_t v8 = (uint64_t *)(a3 & 0xFFFFFFFFFFFFFFFELL);
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<PredicateExpressionCodingKeys>);
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v142 = v9;
  uint64_t v143 = v10;
  uint64_t v11 = MEMORY[0x1895F8858](v9);
  unsigned __int8 v137 = (char *)&v125 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = MEMORY[0x1895F8858](v11);
  uint64_t v156 = a4;
  uint64_t v160 = a2;
  v158 = (uint64_t *)(8 * a2);
  v147 = (char *)&v125 - v14;
  if (a2 == 1)
  {
    uint64_t MetatypeMetadata = swift_getMetatypeMetadata();
  }

  else
  {
    MEMORY[0x1895F8858](v13);
    if (a2)
    {
      uint64_t v17 = v8;
      uint64_t v18 = (uint64_t *)((char *)&v125 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL));
      uint64_t v19 = v160;
      do
      {
        ++v17;
        *v18++ = swift_getMetatypeMetadata();
        --v19;
      }

      while (v19);
    }

    a2 = v160;
    uint64_t MetatypeMetadata = swift_getTupleTypeMetadata();
    a4 = v156;
  }

  uint64_t v140 = (uint64_t *)MetatypeMetadata;
  MEMORY[0x1895F8858](MetatypeMetadata);
  uint64_t v21 = (char *)&v125 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v22 = &v125;
  v172[0] = a4;
  uint64_t ExtendedExistentialTypeMetadata = swift_getExtendedExistentialTypeMetadata();
  v154 = &v125;
  uint64_t v155 = ExtendedExistentialTypeMetadata;
  if (a2 == 1)
  {
    type metadata accessor for PredicateExpressions.Variable(255LL, *v8, v24, v25);
    uint64_t TupleTypeMetadata = swift_checkMetadataState();
  }

  else
  {
    v148 = &v125;
    uint64_t v27 = a1;
    MEMORY[0x1895F8858](ExtendedExistentialTypeMetadata);
    if (a2)
    {
      uint64_t v31 = v8;
      uint64_t v32 = (uint64_t *)((char *)&v125 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0LL));
      uint64_t v33 = v160;
      do
      {
        uint64_t v34 = *v31++;
        *v32++ = type metadata accessor for PredicateExpressions.Variable(255LL, v34, v28, v29);
        --v33;
      }

      while (v33);
    }

    a2 = v160;
    uint64_t TupleTypeMetadata = swift_getTupleTypeMetadata();
    a1 = v27;
    uint64_t v22 = v148;
    a4 = v156;
  }

  uint64_t v144 = TupleTypeMetadata;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v35 = MEMORY[0x1895F8858](TupleTypeMetadata2);
  uint64_t v133 = (uint64_t)&v125 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  v149 = &v125;
  uint64_t v37 = MEMORY[0x1895F8858](v35);
  uint64_t v135 = (uint64_t)&v125 - v38;
  uint64_t v39 = MEMORY[0x1895F8858](v37);
  unint64_t v136 = (__int128 *)((char *)&v125 - v40);
  MEMORY[0x1895F8858](v39);
  uint64_t v145 = (uint64_t)&v125 - v41;
  uint64_t v42 = type metadata accessor for Expression(0LL, a2, v157, a4);
  uint64_t v131 = *(void *)(v42 - 8);
  uint64_t v132 = v42;
  MEMORY[0x1895F8858](v42);
  uint64_t v130 = (uint64_t)&v125 - v43;
  outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>(a1, (uint64_t)v172);
  if (one-time initialization token for predicateArchivingState != -1) {
    swift_once();
  }
  uint64_t v44 = pthread_getspecific(static _ThreadLocal.Key<A>.predicateArchivingState);
  v151 = &v125;
  v152 = &v125;
  v150 = &v125;
  uint64_t v153 = a1;
  if (v44)
  {
    LODWORD(v141) = 0;
    uint64_t v45 = (uint64_t *)(*v44 + 16LL);
    uint64_t v46 = (uint64_t *)(*v44 + 24LL);
  }

  else
  {
    if (one-time initialization token for standardConfiguration != -1) {
      swift_once();
    }
    uint64_t v45 = &static PredicateCodableConfiguration.standardConfiguration;
    uint64_t v46 = &qword_18C5CFE70;
    LODWORD(v141) = byte_18C5CFE78;
  }

  uint64_t v47 = *v46;
  uint64_t v48 = *v45;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  __swift_project_boxed_opaque_existential_1(v172, v172[3]);
  uint64_t v49 = v159;
  uint64_t v50 = dispatch thunk of Decoder.unkeyedContainer()();
  uint64_t v159 = v49;
  if (v49)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
LABEL_49:
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v172);
    return __swift_destroy_boxed_opaque_existential_1(v153);
  }

  uint64_t v138 = v47;
  uint64_t v139 = v48;
  unsigned __int8 v129 = &v125;
  uint64_t v51 = v145 + *(int *)(TupleTypeMetadata2 + 48);
  MEMORY[0x1895F8858](v50);
  uint64_t v53 = (char *)&v125 - ((v52 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v54 = v160;
  if (v160)
  {
    uint64_t v55 = (int *)(v144 + 32);
    unint64_t v56 = v53;
    uint64_t v57 = v160;
    do
    {
      if (v54 == 1) {
        int v58 = 0;
      }
      else {
        int v58 = *v55;
      }
      *v56++ = v51 + v58;
      v55 += 4;
      --v57;
    }

    while (v57);
  }

  v148 = v22;
  __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v170, v171);
  lazy protocol witness table accessor for type PredicateExpressionCodingKeys and conformance PredicateExpressionCodingKeys();
  uint64_t v59 = v159;
  uint64_t v60 = dispatch thunk of UnkeyedDecodingContainer.nestedContainer<A>(keyedBy:)();
  uint64_t v159 = v59;
  if (v59)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
LABEL_48:
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v170);
    goto LABEL_49;
  }

  uint64_t v61 = (void *)MEMORY[0x1895F8858](v60);
  unint64_t v63 = (v62 + 15) & 0xFFFFFFFFFFFFFFF0LL;
  if (v160) {
    uint64_t v61 = memcpy((char *)&v125 - v63, v53, (size_t)v158);
  }
  unint64_t v128 = (char *)&v125 - v63;
  uint64_t v167 = v139;
  uint64_t v168 = v138;
  unsigned __int8 v169 = v141;
  MEMORY[0x1895F8858](v61);
  if (v64)
  {
    uint64_t v65 = (int *)(v140 + 4);
    uint64_t v66 = (uint64_t *)((char *)&v125 - v63);
    uint64_t v67 = v64;
    do
    {
      if (v64 == 1) {
        int v68 = 0;
      }
      else {
        int v68 = *v65;
      }
      uint64_t v69 = *v8++;
      *(void *)&v21[v68] = v69;
      *v66++ = &v21[v68];
      v65 += 4;
      --v67;
    }

    while (v67);
  }

  v158 = &v125;
  uint64_t v70 = v64;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  PredicateCodableConfiguration.allowInputs<each A>(_:)((uint64_t)&v125 - v63, v70, v157);
  LOBYTE(v162[0]) = 2;
  lazy protocol witness table accessor for type ExpressionStructure and conformance ExpressionStructure();
  uint64_t v71 = v142;
  uint64_t v72 = v159;
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  if (v72)
  {
    uint64_t v159 = v72;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
LABEL_47:
    (*(void (**)(char *, uint64_t))(v143 + 8))(v147, v71);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_48;
  }

  uint64_t v140 = &v125;
  uint64_t v74 = *((void *)&v165 + 1);
  uint64_t v73 = v165;
  *(void *)&__int128 v141 = v166;
  uint64_t v75 = v167;
  uint64_t v76 = v168;
  int v77 = v169;
  uint64_t v78 = *(void *)(v168 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (!v78) {
    goto LABEL_45;
  }
  swift_bridgeObjectRetain();
  uint64_t v159 = v73;
  unint64_t v79 = specialized __RawDictionaryStorage.find<A>(_:)(v73, v74);
  if ((v80 & 1) == 0)
  {
    swift_bridgeObjectRelease();
    uint64_t v73 = v159;
LABEL_45:
    *(void *)&__int128 v165 = 47LL;
    *((void *)&v165 + 1) = 0xE100000000000000LL;
    *(void *)&v162[0] = MEMORY[0x18961AFE8];
    swift_bridgeObjectRetain();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
    lazy protocol witness table accessor for type [String] and conformance [A]( (unint64_t *)&lazy protocol witness table cache variable for type [String] and conformance [A],  &demangling cache variable for type metadata for [String],  MEMORY[0x189618458]);
    v87._uint64_t countAndFlagsBits = BidirectionalCollection<>.joined(separator:)();
    String.append(_:)(v87);
    swift_bridgeObjectRelease();
    __int128 v88 = v165;
    lazy protocol witness table accessor for type PredicateCodableError and conformance PredicateCodableError();
    uint64_t v89 = swift_allocError();
    *(void *)uint64_t v90 = v73;
    *(void *)(v90 + 8) = v74;
    *(_OWORD *)(v90 + 16) = v88;
    *(_BYTE *)(v90 + 32) = 1;
    uint64_t v159 = v89;
    swift_willThrow();
LABEL_46:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_47;
  }

  int v127 = v77;
  uint64_t v81 = *(void *)(v76 + 56) + 16 * v79;
  uint64_t v82 = *(void *)v81;
  char v83 = *(_BYTE *)(v81 + 8);
  swift_bridgeObjectRelease();
  if ((v83 & 1) == 0)
  {
    uint64_t v159 = 0LL;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v126 = v75;
    goto LABEL_51;
  }

  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v84 = swift_bridgeObjectRetain();
  uint64_t v85 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay10Foundation19ExpressionStructure33_EAF63E98CB95A00A30DCCB317F51A4F9LLV8ArgumentOG_18ReflectionInternal07GenericP0OsAE_pTg5016_s10Foundation19e12Structure33_ghijklmno28LLV11reconstruct4with4path18q62Internal4TypeVAA29PredicateCodableConfigurationV_SaySSGtKFAH15sP13OAD0W0OKXEfU_AF29PredicateCodableConfigurationVSaySSGAITf1cn_nTf4nggg_n( v84,  v75,  v76,  v127,  MEMORY[0x18961AFE8],  v159,  v74);
  uint64_t v86 = v75;
  uint64_t v159 = 0LL;
  uint64_t v99 = v85;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v100 = PartialType.create2(with:)();
  if (!v100)
  {
    lazy protocol witness table accessor for type PredicateCodableError and conformance PredicateCodableError();
    uint64_t v104 = swift_allocError();
    *(void *)uint64_t v105 = v82;
    *(void *)(v105 + 8) = v99;
    *(void *)(v105 + 16) = 0LL;
    *(void *)(v105 + 24) = 0LL;
    *(_BYTE *)(v105 + 32) = 2;
    uint64_t v159 = v104;
    swift_willThrow();
    goto LABEL_46;
  }

  uint64_t v82 = v100;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v126 = v86;
  swift_bridgeObjectRelease();
LABEL_51:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  *(void *)&v162[0] = v82;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any.Type);
  *(void *)&v161[0] = v156;
  swift_getExtendedExistentialTypeMetadata();
  if (!swift_dynamicCast())
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    LOBYTE(v165) = 2;
    uint64_t v96 = v143;
    uint64_t v97 = v137;
    (*(void (**)(char *, char *, uint64_t))(v143 + 16))(v137, v147, v71);
    type metadata accessor for DecodingError();
    uint64_t v98 = swift_allocError();
    lazy protocol witness table accessor for type [String] and conformance [A]( &lazy protocol witness table cache variable for type KeyedDecodingContainer<PredicateExpressionCodingKeys> and conformance KeyedDecodingContainer<A>,  &demangling cache variable for type metadata for KeyedDecodingContainer<PredicateExpressionCodingKeys>,  MEMORY[0x189619B88]);
    static DecodingError.dataCorruptedError<A>(forKey:in:debugDescription:)();
    (*(void (**)(char *, uint64_t))(v96 + 8))(v97, v71);
    uint64_t v159 = v98;
    swift_willThrow();
    goto LABEL_47;
  }

  __int128 v141 = v165;
  uint64_t v92 = v166;
  LOBYTE(v162[0]) = 0;
  uint64_t v93 = v147;
  uint64_t v94 = v159;
  uint64_t v95 = KeyedDecodingContainer.nestedUnkeyedContainer(forKey:)();
  if (v94)
  {
    uint64_t v159 = v94;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v71 = v142;
    goto LABEL_47;
  }

  v163[0] = v126;
  v163[1] = v76;
  char v164 = v127;
  MEMORY[0x1895F8858](v95);
  uint64_t v101 = v160;
  uint64_t v102 = v157;
  *(&v125 - 8) = v160;
  *(&v125 - 7) = v102;
  *(&v125 - 6) = v156;
  *(&v125 - 5) = (uint64_t)&v165;
  *((_OWORD *)&v125 - 2) = v141;
  *(&v125 - 2) = v92;
  *(&v125 - 1) = (uint64_t)v93;
  uint64_t v103 = v136;
  _withPredicateArchivingState<A>(_:_:)( v163,  (void (*)(uint64_t))_ss22KeyedDecodingContainerV10FoundationAC29PredicateExpressionCodingKeysORszrlE7_decode5input6output22predicateConfigurationAC0eF0_pqd_0_6OutputRts_XP10expression_AC0E11ExpressionsO8VariableVy_qd__Gqd__Qp_t8variabletqd__mqd__Qp_qd_0_mAC0e7CodableM0VtKRvd__r0_lFAcJ_pqd_0_ALRS_XPAM_ARqd__Qp_tAStyKXEfU_TA_0);
  uint64_t v159 = 0LL;
  uint64_t v106 = v93;
  v158 = &v125;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined init with take of any PredicateExpression<Self.Output == B1>(v103, v145);
  uint64_t v107 = v142;
  uint64_t v108 = (void **)v128;
  if (v101)
  {
    uint64_t v109 = (char *)v103 + *(int *)(TupleTypeMetadata2 + 48);
    uint64_t v110 = (int *)(v144 + 32);
    uint64_t v111 = v101;
    do
    {
      if (v101 == 1) {
        int v112 = 0;
      }
      else {
        int v112 = *v110;
      }
      uint64_t v113 = *v108++;
      void *v113 = *(void *)&v109[v112];
      v110 += 4;
      --v111;
    }

    while (v111);
  }

  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v165);
  (*(void (**)(char *, uint64_t))(v143 + 8))(v106, v107);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v115 = v145;
  uint64_t v114 = TupleTypeMetadata2;
  uint64_t v116 = v135 + *(int *)(TupleTypeMetadata2 + 48);
  outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>(v145, v135);
  uint64_t v117 = v144;
  uint64_t v160 = *(void *)(v144 - 8);
  uint64_t v118 = *(void (**)(uint64_t, uint64_t, uint64_t))(v160 + 16);
  v118(v116, v51, v144);
  v172[7] = v156;
  swift_getExtendedExistentialTypeMetadata();
  if (!swift_dynamicCast())
  {
    outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>( (uint64_t)v170,  (uint64_t)v161);
    type metadata accessor for DecodingError();
    uint64_t v124 = swift_allocError();
    static DecodingError.dataCorruptedError(in:debugDescription:)();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v161);
    uint64_t v159 = v124;
    swift_willThrow();
    __swift_destroy_boxed_opaque_existential_1(v115);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v170);
    goto LABEL_49;
  }

  outlined init with take of any PredicateExpression<Self.Output == B1>(v161, (uint64_t)v162);
  uint64_t v119 = v130;
  outlined init with take of any PredicateExpression<Self.Output == B1>(v162, v130);
  uint64_t v120 = *(int *)(v114 + 48);
  uint64_t v121 = v133;
  uint64_t v122 = v133 + v120;
  outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>(v115, v133);
  v118(v122, v51, v117);
  uint64_t v123 = v132;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v160 + 32))(v119 + *(int *)(v132 + 44), v122, v117);
  __swift_destroy_boxed_opaque_existential_1(v121);
  __swift_destroy_boxed_opaque_existential_1(v115);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v170);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v131 + 32))(v134, v119, v123);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v172);
  return __swift_destroy_boxed_opaque_existential_1(v153);
}

uint64_t Expression.init(from:configuration:)@<X0>( void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v160 = a2;
  uint64_t v162 = a4;
  unint64_t v11 = a4 & 0xFFFFFFFFFFFFFFFELL;
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<PredicateExpressionCodingKeys>);
  uint64_t v144 = *(void *)(v12 - 8);
  uint64_t v13 = MEMORY[0x1895F8858](v12);
  uint64_t v14 = MEMORY[0x1895F8858](v13);
  v152 = (char *)&v129 - v15;
  uint64_t v138 = a6;
  v151 = (char *)a5;
  uint64_t v141 = v16;
  v163 = (uint64_t *)v11;
  uint64_t v159 = v6;
  if (a3 == 1)
  {
    uint64_t MetatypeMetadata = swift_getMetatypeMetadata();
    uint64_t v18 = MetatypeMetadata;
  }

  else
  {
    uint64_t v19 = a1;
    MEMORY[0x1895F8858](v14);
    if (a3)
    {
      uint64_t v21 = v163;
      uint64_t v22 = (uint64_t *)((char *)&v129 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0LL));
      uint64_t v23 = a3;
      do
      {
        ++v21;
        *v22++ = swift_getMetatypeMetadata();
        --v23;
      }

      while (v23);
    }

    uint64_t MetatypeMetadata = swift_getTupleTypeMetadata();
    uint64_t v18 = MetatypeMetadata;
    a1 = v19;
    a5 = (uint64_t)v151;
  }

  uint64_t v146 = v12;
  MEMORY[0x1895F8858](MetatypeMetadata);
  uint64_t v143 = (char *)&v129 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  v174[0] = a5;
  uint64_t ExtendedExistentialTypeMetadata = swift_getExtendedExistentialTypeMetadata();
  uint64_t v156 = &v129;
  uint64_t v155 = &v129;
  uint64_t v150 = ExtendedExistentialTypeMetadata;
  uint64_t v142 = v18;
  if (a3 == 1)
  {
    type metadata accessor for PredicateExpressions.Variable(255LL, *v163, v26, v27);
    uint64_t TupleTypeMetadata = swift_checkMetadataState();
  }

  else
  {
    uint64_t v29 = a1;
    MEMORY[0x1895F8858](ExtendedExistentialTypeMetadata);
    if (a3)
    {
      uint64_t v33 = v163;
      uint64_t v34 = (uint64_t *)((char *)&v129 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0LL));
      uint64_t v35 = a3;
      do
      {
        uint64_t v36 = *v33++;
        *v34++ = type metadata accessor for PredicateExpressions.Variable(255LL, v36, v30, v31);
        --v35;
      }

      while (v35);
    }

    uint64_t TupleTypeMetadata = swift_getTupleTypeMetadata();
    a1 = v29;
  }

  uint64_t v147 = TupleTypeMetadata;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v37 = MEMORY[0x1895F8858](TupleTypeMetadata2);
  uint64_t v137 = (uint64_t)&v129 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  v158 = &v129;
  uint64_t v39 = MEMORY[0x1895F8858](v37);
  uint64_t v139 = (char *)&v129 - v40;
  v154 = &v129;
  uint64_t v41 = MEMORY[0x1895F8858](v39);
  uint64_t v140 = (__int128 *)((char *)&v129 - v42);
  uint64_t v153 = &v129;
  MEMORY[0x1895F8858](v41);
  uint64_t v148 = (uint64_t)&v129 - v43;
  uint64_t v44 = type metadata accessor for Expression(0LL, a3, v162, a5);
  uint64_t v157 = &v129;
  uint64_t v45 = *(void *)(v44 - 8);
  MEMORY[0x1895F8858](v44);
  uint64_t v47 = (char *)&v129 - v46;
  uint64_t v49 = *(uint64_t **)v160;
  uint64_t v48 = *(void *)(v160 + 8);
  LODWORD(v145) = *(unsigned __int8 *)(v160 + 16);
  uint64_t v50 = a1[3];
  uint64_t v160 = a3;
  v161 = a1;
  __swift_project_boxed_opaque_existential_1(a1, v50);
  uint64_t v51 = v159;
  uint64_t v52 = dispatch thunk of Decoder.unkeyedContainer()();
  if (v51)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v161);
  }

  uint64_t v131 = v47;
  uint64_t v132 = v45;
  uint64_t v133 = v44;
  uint64_t v136 = v48;
  uint64_t v135 = v49;
  uint64_t v53 = v148 + *(int *)(TupleTypeMetadata2 + 48);
  uint64_t v54 = v160;
  uint64_t v55 = 8 * v160;
  MEMORY[0x1895F8858](v52);
  if (v54)
  {
    uint64_t v57 = (int *)(v147 + 32);
    int v58 = (char **)((char *)&v129 - ((v55 + 15) & 0xFFFFFFFFFFFFFFF0LL));
    uint64_t v59 = v54;
    do
    {
      if (v54 == 1) {
        int v60 = 0;
      }
      else {
        int v60 = *v57;
      }
      *v58++ = v53 + v60;
      v57 += 4;
      --v59;
    }

    while (v59);
  }

  uint64_t v134 = v56;
  __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v174, v174[3]);
  lazy protocol witness table accessor for type PredicateExpressionCodingKeys and conformance PredicateExpressionCodingKeys();
  uint64_t v61 = dispatch thunk of UnkeyedDecodingContainer.nestedContainer<A>(keyedBy:)();
  uint64_t v159 = 0LL;
  MEMORY[0x1895F8858](v61);
  unint64_t v62 = (v55 + 15) & 0xFFFFFFFFFFFFFFF0LL;
  uint64_t v63 = v136;
  unsigned __int8 v129 = (char *)&v129 - v62;
  if (v54)
  {
    memcpy((char *)&v129 - v62, (char *)&v129 - ((v55 + 15) & 0xFFFFFFFFFFFFFFF0LL), 8 * v54);
    uint64_t v130 = &v129;
    uint64_t v171 = v135;
    uint64_t v172 = v63;
    unsigned __int8 v173 = v145;
    MEMORY[0x1895F8858](v135);
    uint64_t v64 = (char *)&v129 - v62;
    uint64_t v65 = 0LL;
    uint64_t v66 = (int *)(v142 + 32);
    uint64_t v67 = v146;
    uint64_t v68 = v162;
    uint64_t v69 = v163;
    uint64_t v70 = v143;
    do
    {
      if (v54 == 1) {
        int v71 = 0;
      }
      else {
        int v71 = *v66;
      }
      uint64_t v72 = &v70[v71];
      *(void *)uint64_t v72 = v69[v65];
      *(void *)&v64[8 * v65++] = v72;
      v66 += 4;
    }

    while (v54 != v65);
  }

  else
  {
    uint64_t v130 = &v129;
    uint64_t v171 = v135;
    uint64_t v172 = v136;
    uint64_t v64 = &v175;
    unsigned __int8 v173 = v145;
    uint64_t v67 = v146;
    uint64_t v68 = v162;
  }

  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  PredicateCodableConfiguration.allowInputs<each A>(_:)((uint64_t)v64, v54, v68);
  LOBYTE(v166) = 2;
  lazy protocol witness table accessor for type ExpressionStructure and conformance ExpressionStructure();
  uint64_t v73 = v159;
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  uint64_t v159 = v73;
  if (v73) {
    goto LABEL_37;
  }
  __int128 v74 = v169;
  *(void *)&__int128 v145 = v170;
  uint64_t v75 = v172;
  v163 = v171;
  int v76 = v173;
  uint64_t v77 = *(void *)(v172 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (!v77) {
    goto LABEL_35;
  }
  swift_bridgeObjectRetain();
  unint64_t v78 = specialized __RawDictionaryStorage.find<A>(_:)(v74, *((uint64_t *)&v74 + 1));
  if ((v79 & 1) == 0)
  {
    swift_bridgeObjectRelease();
LABEL_35:
    *(void *)&__int128 v169 = 47LL;
    *((void *)&v169 + 1) = 0xE100000000000000LL;
    *(void *)&__int128 v166 = MEMORY[0x18961AFE8];
    swift_bridgeObjectRetain();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
    lazy protocol witness table accessor for type [String] and conformance [A]( (unint64_t *)&lazy protocol witness table cache variable for type [String] and conformance [A],  &demangling cache variable for type metadata for [String],  MEMORY[0x189618458]);
    v87._uint64_t countAndFlagsBits = BidirectionalCollection<>.joined(separator:)();
    String.append(_:)(v87);
    swift_bridgeObjectRelease();
    __int128 v88 = v169;
    lazy protocol witness table accessor for type PredicateCodableError and conformance PredicateCodableError();
    uint64_t v89 = swift_allocError();
    *(_OWORD *)uint64_t v90 = v74;
    *(_OWORD *)(v90 + 16) = v88;
    *(_BYTE *)(v90 + 32) = 1;
    uint64_t v159 = v89;
    swift_willThrow();
    goto LABEL_36;
  }

  LODWORD(v143) = v76;
  uint64_t v80 = *(void *)(v75 + 56) + 16 * v78;
  uint64_t v81 = *(void *)v80;
  char v82 = *(_BYTE *)(v80 + 8);
  swift_bridgeObjectRelease();
  if ((v82 & 1) != 0)
  {
    uint64_t v142 = v74;
    uint64_t v83 = (uint64_t)v163;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v84 = swift_bridgeObjectRetain();
    uint64_t v85 = v159;
    uint64_t v86 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay10Foundation19ExpressionStructure33_EAF63E98CB95A00A30DCCB317F51A4F9LLV8ArgumentOG_18ReflectionInternal07GenericP0OsAE_pTg5016_s10Foundation19e12Structure33_ghijklmno28LLV11reconstruct4with4path18q62Internal4TypeVAA29PredicateCodableConfigurationV_SaySSGtKFAH15sP13OAD0W0OKXEfU_AF29PredicateCodableConfigurationVSaySSGAITf1cn_nTf4nggg_n( v84,  v83,  v75,  (char)v143,  MEMORY[0x18961AFE8],  v74,  *((uint64_t *)&v74 + 1));
    uint64_t v159 = v85;
    if (v85)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v67 = v146;
LABEL_36:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
LABEL_37:
      swift_bridgeObjectRelease();
LABEL_38:
      swift_bridgeObjectRelease();
      uint64_t v91 = v144;
LABEL_39:
      (*(void (**)(char *, uint64_t))(v91 + 8))(v152, v67);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v174);
      return __swift_destroy_boxed_opaque_existential_1((uint64_t)v161);
    }

    uint64_t v100 = v86;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v101 = v142;
    uint64_t v102 = PartialType.create2(with:)();
    if (!v102)
    {
      lazy protocol witness table accessor for type PredicateCodableError and conformance PredicateCodableError();
      uint64_t v106 = swift_allocError();
      *(void *)uint64_t v107 = v101;
      *(void *)(v107 + 8) = v100;
      *(void *)(v107 + 16) = 0LL;
      *(void *)(v107 + 24) = 0LL;
      *(_BYTE *)(v107 + 32) = 2;
      uint64_t v159 = v106;
      swift_willThrow();
      uint64_t v67 = v146;
      goto LABEL_36;
    }

    uint64_t v103 = v102;
    swift_bridgeObjectRelease();
    uint64_t v93 = v75;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v81 = v103;
  }

  else
  {
    swift_bridgeObjectRelease();
    uint64_t v93 = v75;
    swift_bridgeObjectRelease();
  }

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  *(void *)&__int128 v166 = v81;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any.Type);
  *(void *)&__int128 v165 = v151;
  swift_getExtendedExistentialTypeMetadata();
  if (!swift_dynamicCast())
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    LOBYTE(v169) = 2;
    uint64_t v91 = v144;
    uint64_t v98 = v141;
    uint64_t v67 = v146;
    (*(void (**)(uint64_t, char *, uint64_t))(v144 + 16))(v141, v152, v146);
    type metadata accessor for DecodingError();
    uint64_t v99 = swift_allocError();
    lazy protocol witness table accessor for type [String] and conformance [A]( &lazy protocol witness table cache variable for type KeyedDecodingContainer<PredicateExpressionCodingKeys> and conformance KeyedDecodingContainer<A>,  &demangling cache variable for type metadata for KeyedDecodingContainer<PredicateExpressionCodingKeys>,  MEMORY[0x189619B88]);
    static DecodingError.dataCorruptedError<A>(forKey:in:debugDescription:)();
    (*(void (**)(uint64_t, uint64_t))(v91 + 8))(v98, v67);
    uint64_t v159 = v99;
    swift_willThrow();
    goto LABEL_39;
  }

  __int128 v145 = v169;
  uint64_t v94 = v170;
  LOBYTE(v166) = 0;
  uint64_t v67 = v146;
  uint64_t v95 = v152;
  uint64_t v96 = v159;
  uint64_t v97 = KeyedDecodingContainer.nestedUnkeyedContainer(forKey:)();
  if (v96)
  {
    uint64_t v159 = v96;
    swift_bridgeObjectRelease();
    goto LABEL_38;
  }

  v167[0] = (uint64_t)v163;
  v167[1] = v93;
  char v168 = (char)v143;
  MEMORY[0x1895F8858](v97);
  uint64_t v104 = v162;
  *(&v129 - 8) = (char *)v54;
  *(&v129 - 7) = (char *)v104;
  *(&v129 - 6) = v151;
  *(&v129 - 5) = (char *)&v169;
  *((_OWORD *)&v129 - 2) = v145;
  *(&v129 - 2) = v94;
  *(&v129 - 1) = v95;
  uint64_t v105 = v140;
  _withPredicateArchivingState<A>(_:_:)( v167,  (void (*)(uint64_t))_ss22KeyedDecodingContainerV10FoundationAC29PredicateExpressionCodingKeysORszrlE7_decode5input6output22predicateConfigurationAC0eF0_pqd_0_6OutputRts_XP10expression_AC0E11ExpressionsO8VariableVy_qd__Gqd__Qp_t8variabletqd__mqd__Qp_qd_0_mAC0e7CodableM0VtKRvd__r0_lFAcJ_pqd_0_ALRS_XPAM_ARqd__Qp_tAStyKXEfU_TA_0);
  uint64_t v159 = 0LL;
  uint64_t v108 = v95;
  uint64_t v109 = v105;
  swift_bridgeObjectRelease();
  uint64_t v110 = TupleTypeMetadata2;
  swift_bridgeObjectRelease();
  outlined init with take of any PredicateExpression<Self.Output == B1>(v109, v148);
  uint64_t v111 = (uint64_t)v139;
  int v112 = (void **)v129;
  if (v54)
  {
    uint64_t v113 = (char *)v109 + *(int *)(v110 + 48);
    uint64_t v114 = (int *)(v147 + 32);
    uint64_t v115 = v54;
    do
    {
      if (v54 == 1) {
        int v116 = 0;
      }
      else {
        int v116 = *v114;
      }
      uint64_t v117 = *v112++;
      void *v117 = *(void *)&v113[v116];
      v114 += 4;
      --v115;
    }

    while (v115);
  }

  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v169);
  (*(void (**)(char *, uint64_t))(v144 + 8))(v108, v67);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v118 = v110;
  uint64_t v119 = v111 + *(int *)(v110 + 48);
  uint64_t v120 = v148;
  outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>(v148, v111);
  uint64_t v121 = v147;
  uint64_t v122 = *(void *)(v147 - 8);
  uint64_t v123 = *(void (**)(uint64_t, uint64_t, uint64_t))(v122 + 16);
  v123(v119, v53, v147);
  char v164 = v151;
  swift_getExtendedExistentialTypeMetadata();
  if ((swift_dynamicCast() & 1) == 0)
  {
    outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>( (uint64_t)v174,  (uint64_t)&v165);
    type metadata accessor for DecodingError();
    swift_allocError();
    static DecodingError.dataCorruptedError(in:debugDescription:)();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v165);
    swift_willThrow();
    __swift_destroy_boxed_opaque_existential_1(v120);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v174);
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v161);
  }

  outlined init with take of any PredicateExpression<Self.Output == B1>(&v165, (uint64_t)&v166);
  uint64_t v124 = (uint64_t)v131;
  outlined init with take of any PredicateExpression<Self.Output == B1>(&v166, (uint64_t)v131);
  uint64_t v125 = *(int *)(v118 + 48);
  uint64_t v126 = v137;
  uint64_t v127 = v137 + v125;
  outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>(v120, v137);
  v123(v127, v53, v121);
  uint64_t v128 = v133;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v122 + 32))(v124 + *(int *)(v133 + 44), v127, v121);
  __swift_destroy_boxed_opaque_existential_1(v126);
  __swift_destroy_boxed_opaque_existential_1(v120);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v174);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v132 + 32))(v138, v124, v128);
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v161);
}

uint64_t protocol witness for Decodable.init(from:) in conformance Expression<Pack{repeat A}, B>@<X0>( uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  return Expression.init(from:)(a1, a2[2], a2[3], a2[4], a3);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance Expression<Pack{repeat A}, B>( void *a1, uint64_t a2)
{
  return Expression.encode(to:)(a1, a2);
}

uint64_t protocol witness for EncodableWithConfiguration.encode(to:configuration:) in conformance Predicate<Pack{repeat A}>( void *a1, uint64_t a2, uint64_t a3)
{
  return Predicate.encode(to:configuration:)(a1, a2, a3);
}

uint64_t protocol witness for DecodableWithConfiguration.init(from:configuration:) in conformance Predicate<Pack{repeat A}>@<X0>( void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  return Predicate.init(from:configuration:)(a1, a2, *(void *)(a3 + 16), *(void *)(a3 + 24), a4);
}

uint64_t protocol witness for EncodableWithConfiguration.encode(to:configuration:) in conformance Expression<Pack{repeat A}, B>( void *a1, uint64_t a2, uint64_t a3)
{
  return Expression.encode(to:configuration:)(a1, a2, a3);
}

uint64_t protocol witness for DecodableWithConfiguration.init(from:configuration:) in conformance Expression<Pack{repeat A}, B>@<X0>( void *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  return Expression.init(from:configuration:)(a1, a2, a3[2], a3[3], a3[4], a4);
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay10Foundation19ExpressionStructure33_EAF63E98CB95A00A30DCCB317F51A4F9LLV8ArgumentOG_18ReflectionInternal07GenericP0OsAE_pTg5016_s10Foundation19e12Structure33_ghijklmno28LLV11reconstruct4with4path18q62Internal4TypeVAA29PredicateCodableConfigurationV_SaySSGtKFAH15sP13OAD0W0OKXEfU_AF29PredicateCodableConfigurationVSaySSGAITf1cn_nTf4nggg_n( uint64_t a1, uint64_t a2, uint64_t a3, char a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v8 = v7;
  int64_t v9 = *(void *)(a1 + 16);
  uint64_t v10 = MEMORY[0x18961AFE8];
  if (!v9) {
    return v10;
  }
  uint64_t v87 = MEMORY[0x18961AFE8];
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v9, 0);
  uint64_t v13 = 0LL;
  uint64_t v10 = v87;
  uint64_t v69 = a1 + 32;
  uint64_t v14 = a3;
  uint64_t v75 = a6;
  int64_t v68 = v9;
  while (1)
  {
    uint64_t v15 = v69 + 32 * v13;
    uint64_t v17 = *(void *)v15;
    uint64_t v16 = *(void *)(v15 + 8);
    uint64_t v18 = *(void *)(v15 + 16);
    char v19 = *(_BYTE *)(v15 + 24);
    if ((v19 & 1) != 0) {
      break;
    }
    char v73 = *(_BYTE *)(v15 + 24);
    uint64_t v71 = v13;
    swift_bridgeObjectRetain_n();
    uint64_t v78 = v17;
    outlined copy of ExpressionStructure.Argument(v17, v16, v18, 0);
    uint64_t v39 = a5;
    swift_bridgeObjectRetain();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v39 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  a5[2] + 1LL,  1,  a5);
    }
    unint64_t v41 = v39[2];
    unint64_t v40 = v39[3];
    if (v41 >= v40 >> 1) {
      uint64_t v39 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (void *)(v40 > 1),  v41 + 1,  1,  v39);
    }
    v39[2] = v41 + 1;
    uint64_t v42 = &v39[2 * v41];
    v42[4] = a6;
    v42[5] = a7;
    swift_bridgeObjectRelease();
    uint64_t v14 = a3;
    if (!*(void *)(a3 + 16)) {
      goto LABEL_48;
    }
    swift_bridgeObjectRetain();
    unint64_t v43 = specialized __RawDictionaryStorage.find<A>(_:)(v78, v16);
    if ((v44 & 1) == 0)
    {
      swift_bridgeObjectRelease();
LABEL_48:
      swift_bridgeObjectRetain();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
      lazy protocol witness table accessor for type [String] and conformance [A]( (unint64_t *)&lazy protocol witness table cache variable for type [String] and conformance [A],  &demangling cache variable for type metadata for [String],  MEMORY[0x189618458]);
      v59._uint64_t countAndFlagsBits = BidirectionalCollection<>.joined(separator:)();
      String.append(_:)(v59);
      swift_bridgeObjectRelease();
      lazy protocol witness table accessor for type PredicateCodableError and conformance PredicateCodableError();
      swift_allocError();
      *(void *)uint64_t v60 = v78;
      *(void *)(v60 + 8) = v16;
      *(void *)(v60 + 16) = 47LL;
      *(void *)(v60 + 24) = 0xE100000000000000LL;
      *(_BYTE *)(v60 + 32) = 1;
      swift_willThrow();
      swift_bridgeObjectRelease();
      uint64_t v61 = v78;
      uint64_t v62 = v16;
LABEL_49:
      uint64_t v63 = v18;
LABEL_50:
      outlined consume of ExpressionStructure.Argument(v61, v62, v63, 0);
      goto LABEL_43;
    }

    uint64_t v45 = *(void *)(a3 + 56) + 16 * v43;
    uint64_t v21 = *(void *)v45;
    char v46 = *(_BYTE *)(v45 + 8);
    swift_bridgeObjectRelease();
    if ((v46 & 1) != 0)
    {
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      uint64_t v47 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay10Foundation19ExpressionStructure33_EAF63E98CB95A00A30DCCB317F51A4F9LLV8ArgumentOG_18ReflectionInternal07GenericP0OsAE_pTg5016_s10Foundation19e12Structure33_ghijklmno28LLV11reconstruct4with4path18q62Internal4TypeVAA29PredicateCodableConfigurationV_SaySSGtKFAH15sP13OAD0W0OKXEfU_AF29PredicateCodableConfigurationVSaySSGAITf1cn_nTf4nggg_n( v18,  a2,  a3,  a4 & 1,  v39,  v78,  v16,  v18);
      if (v8)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease();
        uint64_t v61 = v78;
        uint64_t v62 = v16;
        goto LABEL_49;
      }

      uint64_t v48 = v47;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      uint64_t v49 = PartialType.create2(with:)();
      if (!v49)
      {
        lazy protocol witness table accessor for type PredicateCodableError and conformance PredicateCodableError();
        swift_allocError();
        *(void *)uint64_t v64 = v21;
        *(void *)(v64 + 8) = v48;
        *(void *)(v64 + 16) = 0LL;
        *(void *)(v64 + 24) = 0LL;
        *(_BYTE *)(v64 + 32) = 2;
        swift_willThrow();
        swift_bridgeObjectRelease();
        uint64_t v61 = v78;
        uint64_t v62 = v16;
        uint64_t v63 = v18;
        goto LABEL_50;
      }

      uint64_t v21 = v49;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      outlined consume of ExpressionStructure.Argument(v78, v16, v18, 0);
      uint64_t v14 = a3;
      a6 = v75;
    }

    else
    {
      swift_bridgeObjectRelease();
      outlined consume of ExpressionStructure.Argument(v78, v16, v18, 0);
    }

    int64_t v50 = v68;
    uint64_t v13 = v71;
    char v19 = v73;
LABEL_35:
    uint64_t v88 = v10;
    unint64_t v52 = *(void *)(v10 + 16);
    unint64_t v51 = *(void *)(v10 + 24);
    if (v52 >= v51 >> 1)
    {
      uint64_t v54 = v13;
      char v74 = v19;
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v51 > 1, v52 + 1, 1);
      char v19 = v74;
      uint64_t v13 = v54;
      uint64_t v10 = v88;
    }

    ++v13;
    *(void *)(v10 + 16) = v52 + 1;
    uint64_t v53 = v10 + 16 * v52;
    *(void *)(v53 + 32) = v21;
    *(_BYTE *)(v53 + 40) = v19;
    if (v13 == v50) {
      return v10;
    }
  }

  uint64_t v81 = v8;
  int64_t v20 = *(void *)(v17 + 16);
  if (!v20)
  {
    uint64_t v21 = MEMORY[0x18961AFE8];
LABEL_34:
    uint64_t v8 = v81;
    int64_t v50 = v68;
    goto LABEL_35;
  }

  char v72 = *(_BYTE *)(v15 + 24);
  uint64_t v70 = v13;
  uint64_t v66 = *(void *)(v15 + 16);
  uint64_t v67 = v10;
  uint64_t v65 = *(void *)(v15 + 8);
  outlined copy of ExpressionStructure.Argument(v17, v16, v18, 1);
  uint64_t v86 = MEMORY[0x18961AFE8];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v20, 0);
  uint64_t v21 = v86;
  uint64_t v77 = v17;
  uint64_t v22 = (uint64_t *)(v17 + 48);
  while (1)
  {
    uint64_t v23 = *(v22 - 1);
    uint64_t v83 = v21;
    uint64_t v84 = *(v22 - 2);
    uint64_t v10 = *v22;
    swift_bridgeObjectRetain_n();
    uint64_t v24 = a5;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v24 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  a5[2] + 1LL,  1,  a5);
    }
    unint64_t v26 = v24[2];
    unint64_t v25 = v24[3];
    if (v26 >= v25 >> 1) {
      uint64_t v24 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (void *)(v25 > 1),  v26 + 1,  1,  v24);
    }
    v24[2] = v26 + 1;
    uint64_t v27 = &v24[2 * v26];
    v27[4] = a6;
    v27[5] = a7;
    swift_bridgeObjectRelease();
    if (!*(void *)(v14 + 16)) {
      goto LABEL_40;
    }
    swift_bridgeObjectRetain();
    unint64_t v28 = specialized __RawDictionaryStorage.find<A>(_:)(v84, v23);
    if ((v29 & 1) == 0)
    {
      swift_bridgeObjectRelease();
LABEL_40:
      swift_bridgeObjectRetain();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
      lazy protocol witness table accessor for type [String] and conformance [A]( (unint64_t *)&lazy protocol witness table cache variable for type [String] and conformance [A],  &demangling cache variable for type metadata for [String],  MEMORY[0x189618458]);
      v55._uint64_t countAndFlagsBits = BidirectionalCollection<>.joined(separator:)();
      String.append(_:)(v55);
      swift_bridgeObjectRelease();
      lazy protocol witness table accessor for type PredicateCodableError and conformance PredicateCodableError();
      swift_allocError();
      *(void *)uint64_t v56 = v84;
      *(void *)(v56 + 8) = v23;
      *(void *)(v56 + 16) = 47LL;
      *(void *)(v56 + 24) = 0xE100000000000000LL;
      char v57 = 1;
LABEL_41:
      *(_BYTE *)(v56 + 32) = v57;
      swift_willThrow();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_42;
    }

    uint64_t v30 = *(void *)(v14 + 56) + 16 * v28;
    uint64_t v31 = *(void *)v30;
    char v32 = *(_BYTE *)(v30 + 8);
    swift_bridgeObjectRelease();
    if ((v32 & 1) == 0)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_17;
    }

    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v33 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay10Foundation19ExpressionStructure33_EAF63E98CB95A00A30DCCB317F51A4F9LLV8ArgumentOG_18ReflectionInternal07GenericP0OsAE_pTg5016_s10Foundation19e12Structure33_ghijklmno28LLV11reconstruct4with4path18q62Internal4TypeVAA29PredicateCodableConfigurationV_SaySSGtKFAH15sP13OAD0W0OKXEfU_AF29PredicateCodableConfigurationVSaySSGAITf1cn_nTf4nggg_n( v10,  a2,  v14,  a4 & 1,  v24,  v84,  v23,  v10);
    if (v81) {
      break;
    }
    uint64_t v34 = v33;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    uint64_t v35 = PartialType.create2(with:)();
    if (!v35)
    {
      lazy protocol witness table accessor for type PredicateCodableError and conformance PredicateCodableError();
      swift_allocError();
      *(void *)uint64_t v56 = v31;
      *(void *)(v56 + 8) = v34;
      *(void *)(v56 + 16) = 0LL;
      *(void *)(v56 + 24) = 0LL;
      char v57 = 2;
      goto LABEL_41;
    }

    uint64_t v36 = v35;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v31 = v36;
    uint64_t v14 = a3;
    a6 = v75;
LABEL_17:
    swift_bridgeObjectRelease();
    uint64_t v21 = v83;
    unint64_t v38 = *(void *)(v83 + 16);
    unint64_t v37 = *(void *)(v83 + 24);
    if (v38 >= v37 >> 1)
    {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v37 > 1, v38 + 1, 1);
      uint64_t v21 = v83;
    }

    *(void *)(v21 + 16) = v38 + 1;
    *(void *)(v21 + 8 * v38 + 32) = v31;
    v22 += 3;
    if (!--v20)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      outlined consume of ExpressionStructure.Argument(v77, v65, v66, 1);
      uint64_t v10 = v67;
      uint64_t v13 = v70;
      char v19 = v72;
      goto LABEL_34;
    }
  }

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
LABEL_42:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  outlined consume of ExpressionStructure.Argument(v77, v65, v66, 1);
LABEL_43:
  swift_release();
  return v10;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF18ReflectionInternal17GenericArguments2V_10Foundation19ExpressionStructure33_EAF63E98CB95A00A30DCCB317F51A4F9LLV8ArgumentOsAE_pTg5016_s10Foundation19i12Structure33_klmnopqrs18LLV_4with4pathAD18d63Internal4TypeV_AA29PredicateCodableConfigurationVSaySSGtKcfcAD8t5OAG07F9U0OKXEfU_AI29PredicateCodableConfigurationVSaySSGSS10identifier_Sb10isConcretetTf1cn_nTf4nggg_n( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6, void *a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9 = MEMORY[0x18961AFE8];
  if (!a3) {
    return v9;
  }
  uint64_t v94 = MEMORY[0x18961AFE8];
  uint64_t result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)( 0,  a3 & ~(a3 >> 63),  0);
  if (a3 < 0)
  {
    __break(1u);
    return result;
  }

  uint64_t v15 = 0LL;
  uint64_t v16 = a9;
  uint64_t v9 = v94;
  uint64_t v87 = a4;
  uint64_t v85 = a7;
  uint64_t v81 = a3;
  while (1)
  {
    uint64_t v17 = GenericArguments2.subscript.getter();
    uint64_t v18 = (uint64_t *)v17;
    char v84 = v19;
    if ((v19 & 1) == 0)
    {
      uint64_t v83 = v15;
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      unint64_t v43 = a7;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        unint64_t v43 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  a7[2] + 1LL,  1,  a7);
      }
      unint64_t v45 = v43[2];
      unint64_t v44 = v43[3];
      if (v45 >= v44 >> 1) {
        unint64_t v43 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (void *)(v44 > 1),  v45 + 1,  1,  v43);
      }
      v43[2] = v45 + 1;
      char v46 = &v43[2 * v45];
      v46[4] = a8;
      v46[5] = v16;
      swift_bridgeObjectRelease();
      uint64_t v47 = PredicateCodableConfiguration._identifier(for:)(v18);
      if (!v48)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v70 = _typeName(_:qualified:)();
        uint64_t v72 = v71;
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
        lazy protocol witness table accessor for type [String] and conformance [A]( (unint64_t *)&lazy protocol witness table cache variable for type [String] and conformance [A],  &demangling cache variable for type metadata for [String],  MEMORY[0x189618458]);
        uint64_t v73 = BidirectionalCollection<>.joined(separator:)();
        uint64_t v75 = v74;
        swift_bridgeObjectRelease();
        v76._uint64_t countAndFlagsBits = v73;
        v76._unint64_t object = v75;
        String.append(_:)(v76);
        swift_bridgeObjectRelease();
        lazy protocol witness table accessor for type PredicateCodableError and conformance PredicateCodableError();
        swift_allocError();
        *(void *)uint64_t v77 = v70;
        *(void *)(v77 + 8) = v72;
        *(void *)(v77 + 16) = 47LL;
        *(void *)(v77 + 24) = 0xE100000000000000LL;
        *(_BYTE *)(v77 + 32) = 0;
        swift_willThrow();
        goto LABEL_39;
      }

      uint64_t v50 = v48;
      unint64_t v51 = v47;
      if ((v49 & 1) != 0)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v58 = MEMORY[0x18961AFE8];
        a7 = v85;
      }

      else
      {
        swift_bridgeObjectRetain_n();
        uint64_t v52 = Type.genericArguments2.getter();
        uint64_t v54 = v53;
        uint64_t v56 = v55;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        LOBYTE(v78) = 0;
        uint64_t v57 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF18ReflectionInternal17GenericArguments2V_10Foundation19ExpressionStructure33_EAF63E98CB95A00A30DCCB317F51A4F9LLV8ArgumentOsAE_pTg5016_s10Foundation19i12Structure33_klmnopqrs18LLV_4with4pathAD18d63Internal4TypeV_AA29PredicateCodableConfigurationVSaySSGtKcfcAD8t5OAG07F9U0OKXEfU_AI29PredicateCodableConfigurationVSaySSGSS10identifier_Sb10isConcretetTf1cn_nTf4nggg_n( v52,  v54,  v56,  a4,  a5,  a6 & 1,  v43,  v51,  v50,  v78);
        a7 = v85;
        if (v89)
        {
          swift_release();
          swift_bridgeObjectRelease_n();
          swift_bridgeObjectRelease_n();
          swift_bridgeObjectRelease_n();
          swift_bridgeObjectRelease_n();
          return v9;
        }

        uint64_t v58 = v57;
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease_n();
      }

      uint64_t v15 = v83;
      Swift::String v59 = v51;
      goto LABEL_32;
    }

    int64_t v20 = *(void *)(v17 + 16);
    if (v20) {
      break;
    }
    outlined consume of GenericArgument(v17, 1);
    Swift::String v59 = (uint64_t *)MEMORY[0x18961AFE8];
LABEL_31:
    uint64_t v50 = 0LL;
    uint64_t v58 = 0LL;
LABEL_32:
    unint64_t v61 = *(void *)(v9 + 16);
    unint64_t v60 = *(void *)(v9 + 24);
    if (v61 >= v60 >> 1)
    {
      uint64_t v92 = v59;
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v60 > 1, v61 + 1, 1);
      Swift::String v59 = v92;
    }

    ++v15;
    *(void *)(v9 + 16) = v61 + 1;
    uint64_t v62 = v9 + 32 * v61;
    *(void *)(v62 + 32) = v59;
    *(void *)(v62 + 40) = v50;
    *(void *)(v62 + 48) = v58;
    *(_BYTE *)(v62 + 56) = v84 & 1;
    uint64_t v16 = a9;
    if (v15 == v81) {
      return v9;
    }
  }

  uint64_t v82 = v15;
  uint64_t v80 = v9;
  uint64_t v93 = MEMORY[0x18961AFE8];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v20, 0);
  uint64_t v91 = v93;
  uint64_t v79 = (uint64_t)v18;
  uint64_t v21 = (uint64_t **)(v18 + 4);
  while (1)
  {
    int64_t v90 = v20;
    uint64_t v22 = *v21;
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v23 = a7;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v23 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  a7[2] + 1LL,  1,  a7);
    }
    unint64_t v25 = v23[2];
    unint64_t v24 = v23[3];
    if (v25 >= v24 >> 1) {
      uint64_t v23 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (void *)(v24 > 1),  v25 + 1,  1,  v23);
    }
    v23[2] = v25 + 1;
    unint64_t v26 = &v23[2 * v25];
    v26[4] = a8;
    v26[5] = v16;
    swift_bridgeObjectRelease();
    uint64_t v27 = a5;
    unint64_t v28 = PredicateCodableConfiguration._identifier(for:)(v22);
    if (!v29)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v63 = _typeName(_:qualified:)();
      uint64_t v9 = v64;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
      lazy protocol witness table accessor for type [String] and conformance [A]( (unint64_t *)&lazy protocol witness table cache variable for type [String] and conformance [A],  &demangling cache variable for type metadata for [String],  MEMORY[0x189618458]);
      uint64_t v65 = BidirectionalCollection<>.joined(separator:)();
      uint64_t v67 = v66;
      swift_bridgeObjectRelease();
      v68._uint64_t countAndFlagsBits = v65;
      v68._unint64_t object = v67;
      String.append(_:)(v68);
      swift_bridgeObjectRelease();
      lazy protocol witness table accessor for type PredicateCodableError and conformance PredicateCodableError();
      swift_allocError();
      *(void *)uint64_t v69 = v63;
      *(void *)(v69 + 8) = v9;
      *(void *)(v69 + 16) = 47LL;
      *(void *)(v69 + 24) = 0xE100000000000000LL;
      *(_BYTE *)(v69 + 32) = 0;
      swift_willThrow();
      swift_bridgeObjectRelease();
      swift_release();
      goto LABEL_38;
    }

    uint64_t v31 = v28;
    uint64_t v32 = v29;
    if ((v30 & 1) != 0)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v38 = MEMORY[0x18961AFE8];
      goto LABEL_16;
    }

    swift_bridgeObjectRetain_n();
    uint64_t v33 = Type.genericArguments2.getter();
    uint64_t v35 = v34;
    uint64_t v9 = v36;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    LOBYTE(v78) = 0;
    uint64_t v37 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF18ReflectionInternal17GenericArguments2V_10Foundation19ExpressionStructure33_EAF63E98CB95A00A30DCCB317F51A4F9LLV8ArgumentOsAE_pTg5016_s10Foundation19i12Structure33_klmnopqrs18LLV_4with4pathAD18d63Internal4TypeV_AA29PredicateCodableConfigurationVSaySSGtKcfcAD8t5OAG07F9U0OKXEfU_AI29PredicateCodableConfigurationVSaySSGSS10identifier_Sb10isConcretetTf1cn_nTf4nggg_n( v33,  v35,  v9,  a4,  v27,  a6 & 1,  v23,  v31,  v32,  v78);
    if (v89) {
      break;
    }
    uint64_t v38 = v37;
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    a7 = v85;
LABEL_16:
    uint64_t v39 = v91;
    unint64_t v41 = *(void *)(v91 + 16);
    unint64_t v40 = *(void *)(v91 + 24);
    if (v41 >= v40 >> 1)
    {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v40 > 1, v41 + 1, 1);
      uint64_t v39 = v91;
    }

    *(void *)(v39 + 16) = v41 + 1;
    uint64_t v91 = v39;
    uint64_t v42 = (void *)(v39 + 24 * v41);
    v42[4] = v31;
    v42[5] = v32;
    v42[6] = v38;
    ++v21;
    int64_t v20 = v90 - 1;
    a4 = v87;
    a5 = v27;
    uint64_t v16 = a9;
    if (v90 == 1)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      outlined consume of GenericArgument(v79, 1);
      uint64_t v9 = v80;
      uint64_t v15 = v82;
      Swift::String v59 = (uint64_t *)v91;
      goto LABEL_31;
    }
  }

  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
LABEL_38:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined consume of GenericArgument(v79, 1);
LABEL_39:
  swift_release();
  return v9;
}

uint64_t partial apply for closure #1 in KeyedEncodingContainer<>._encode<A, B>(_:variable:predicateConfiguration:)()
{
  return partial apply for closure #1 in KeyedEncodingContainer<>._encode<A, B>(_:variable:predicateConfiguration:)();
}

{
  return closure #1 in KeyedEncodingContainer<>._encode<A, B>(_:variable:predicateConfiguration:)();
}

uint64_t _ss22KeyedDecodingContainerV10FoundationAC29PredicateExpressionCodingKeysORszrlE7_decode5input6output22predicateConfigurationAC0eF0_pqd_0_6OutputRts_XP10expression_AC0E11ExpressionsO8VariableVy_qd__Gqd__Qp_t8variabletqd__mqd__Qp_qd_0_mAC0e7CodableM0VtKRvd__r0_lFAcJ_pqd_0_ALRS_XPAM_ARqd__Qp_tAStyKXEfU_TA_0@<X0>( uint64_t *a1@<X8>)
{
  return partial apply for closure #1 in KeyedDecodingContainer<>._decode<A, each B>(input:output:predicateConfiguration:)(a1);
}

unint64_t specialized BidirectionalCollection.lastIndex(where:)( unint64_t a1, unint64_t a2)
{
  unint64_t v2 = a1 >> 14;
  if (a1 >> 14 == a2 >> 14) {
    return 0LL;
  }
  do
  {
    unint64_t v3 = Substring.index(before:)();
    if (Substring.subscript.getter() == 47 && v4 == 0xE100000000000000LL)
    {
      swift_bridgeObjectRelease();
    }

    else
    {
      char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if ((v6 & 1) == 0) {
        return v3;
      }
    }
  }

  while (v2 != v3 >> 14);
  return 0LL;
}

{
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  char v6;
  unint64_t v2 = a1 >> 14;
  if (a1 >> 14 == a2 >> 14) {
    return 0LL;
  }
  while (1)
  {
    unint64_t v3 = Substring.index(before:)();
    if (Substring.subscript.getter() == 47 && v4 == 0xE100000000000000LL) {
      break;
    }
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0) {
      return v3;
    }
    if (v2 == v3 >> 14) {
      return 0LL;
    }
  }

  swift_bridgeObjectRelease();
  return v3;
}

uint64_t static CocoaError.moveFileError(_:_:_:)@<X0>( int a1@<W0>, uint64_t a2@<X1>, void **a3@<X2>, void *(*a4)(void *__return_ptr, void *, uint64_t)@<X8>)
{
  void *(*v147)(void *__return_ptr, void *, uint64_t);
  void *v148;
  int v149;
  id v150;
  void *countAndFlagsBits;
  void *v152;
  void *v153;
  void *v154;
  Swift::String v155;
  char v156;
  Swift::String v157;
  void *v158;
  uint64_t v159;
  v149 = a1;
  uint64_t v147 = a4;
  uint64_t v159 = *MEMORY[0x1895F89C0];
  uint64_t v4 = *(void **)a2;
  uint64_t v5 = *(void **)(a2 + 8);
  char v6 = *(void **)(a2 + 16);
  uint64_t v7 = a3[1];
  uint64_t v148 = *a3;
  uint64_t v8 = a3[2];
  swift_retain();
  id v9 = v4;
  swift_retain();
  uint64_t v10 = &selRef_outputStreamToMemory;
  v152 = v8;
  uint64_t v153 = v7;
  v154 = v5;
  if (!_foundation_swift_url_feature_enabled())
  {
    id v15 = objc_msgSend(v9, sel__parameterString);
    if (v15)
    {
      uint64_t v16 = v15;
      id v17 = static String._unconditionallyBridgeFromObjectiveC(_:)(v15);
      char v19 = v18;

      if (getEnumTag for _DarwinSearchPathsSequence.Iterator.State()
        && (id v20 = objc_msgSend(v9, sel_path)) != 0)
      {
        uint64_t v21 = v20;
        id v22 = static String._unconditionallyBridgeFromObjectiveC(_:)(v20);
        unint64_t v24 = v23;

        v157._uint64_t countAndFlagsBits = (uint64_t)v22;
        v157._unint64_t object = v24;
        swift_bridgeObjectRetain();
        v25._uint64_t countAndFlagsBits = 59LL;
        v25._unint64_t object = (void *)0xE100000000000000LL;
        String.append(_:)(v25);
        uint64_t v7 = v153;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRetain();
        v26._uint64_t countAndFlagsBits = (uint64_t)v17;
        v26._unint64_t object = v19;
        String.append(_:)(v26);
        swift_bridgeObjectRelease();
      }

      else
      {
        v157._uint64_t countAndFlagsBits = 59LL;
        v157._unint64_t object = (void *)0xE100000000000000LL;
        v37._uint64_t countAndFlagsBits = (uint64_t)v17;
        v37._unint64_t object = v19;
        String.append(_:)(v37);
      }

      swift_bridgeObjectRelease();
      unint64_t object = v157._object;
      uint64_t countAndFlagsBits = (void *)v157._countAndFlagsBits;
      uint64_t v5 = v154;
      if ((_foundation_swift_url_feature_enabled() & 1) == 0) {
        goto LABEL_17;
      }
    }

    else
    {
      id v53 = objc_msgSend(v9, sel_path);
      if (!v53)
      {
        uint64_t countAndFlagsBits = 0LL;
        unint64_t object = (void *)0xE000000000000000LL;
        if ((_foundation_swift_url_feature_enabled() & 1) != 0) {
          goto LABEL_34;
        }
        goto LABEL_17;
      }

      uint64_t v54 = v53;
      uint64_t countAndFlagsBits = static String._unconditionallyBridgeFromObjectiveC(_:)(v53);
      unint64_t object = v55;

      if ((_foundation_swift_url_feature_enabled() & 1) == 0) {
        goto LABEL_17;
      }
    }

id NSFileManager._shouldProceedAfter(error:removingItemAtPath:)(void *a1, uint64_t a2, unint64_t a3)
{
  id v7 = objc_msgSend(v3, sel__safeDelegate);
  if (!v7) {
    return 0LL;
  }
  uint64_t v8 = v7;
  if ((objc_msgSend( v7,  sel_respondsToSelector_,  sel_fileManager_shouldProceedAfterError_removingItemAtURL_) & 1) == 0)
  {
    if (objc_msgSend( v8,  sel_respondsToSelector_,  sel_fileManager_shouldProceedAfterError_removingItemAtPath_))
    {
      swift_unknownObjectRetain();
      id v12 = a1;
      uint64_t v13 = _swift_stdlib_bridgeErrorToNSError();
      id v11 = objc_msgSend( v8,  sel_fileManager_shouldProceedAfterError_removingItemAtPath_,  v3,  v13,  String._bridgeToObjectiveCImpl()());
      swift_unknownObjectRelease_n();
      swift_unknownObjectRelease();
      swift_unknownObjectRelease();
      return v11;
    }

    swift_unknownObjectRelease();
    return 0LL;
  }

  swift_unknownObjectRetain();
  URL.init(fileURLWithPath:)(a2, a3, (uint64_t)&v15);
  id v9 = v15;
  id v10 = a1;
  id v11 = objc_msgSend( v8,  sel_fileManager_shouldProceedAfterError_removingItemAtURL_,  v3,  _swift_stdlib_bridgeErrorToNSError(),  v9);

  swift_unknownObjectRelease_n();
  swift_unknownObjectRelease();
  swift_release();
  swift_release();
  return v11;
}

uint64_t NSFileManager._shouldRemoveItemAtPath(_:)(uint64_t a1, unint64_t a2)
{
  id v5 = objc_msgSend(v2, sel__safeDelegate);
  if (!v5) {
    return 1LL;
  }
  char v6 = v5;
  if ((objc_msgSend(v5, sel_respondsToSelector_, sel_fileManager_shouldRemoveItemAtURL_) & 1) == 0)
  {
    if (objc_msgSend(v6, sel_respondsToSelector_, sel_fileManager_shouldRemoveItemAtPath_))
    {
      uint64_t v9 = String._bridgeToObjectiveCImpl()();
      id v8 = objc_msgSend((id)swift_unknownObjectRetain(), sel_fileManager_shouldRemoveItemAtPath_, v2, v9);
      swift_unknownObjectRelease_n();
      swift_unknownObjectRelease();
      return (uint64_t)v8;
    }

    swift_unknownObjectRelease();
    return 1LL;
  }

  swift_unknownObjectRetain();
  URL.init(fileURLWithPath:)(a1, a2, (uint64_t)&v11);
  id v7 = v11;
  id v8 = objc_msgSend(v6, sel_fileManager_shouldRemoveItemAtURL_, v2, v11);

  swift_unknownObjectRelease_n();
  swift_release();
  swift_release();
  return (uint64_t)v8;
}

id NSFileManager._shouldProceedAfter(error:copyingItemAtPath:to:)( void *a1, uint64_t a2, unint64_t a3, uint64_t a4, unint64_t a5, SEL *a6, SEL *a7)
{
  id v15 = objc_msgSend(v7, sel__safeDelegate);
  if (!v15) {
    return 0LL;
  }
  uint64_t v16 = v15;
  if ((objc_msgSend(v15, sel_respondsToSelector_, *a6) & 1) == 0)
  {
    if (objc_msgSend(v16, sel_respondsToSelector_, *a7))
    {
      swift_unknownObjectRetain();
      id v21 = a1;
      uint64_t v22 = _swift_stdlib_bridgeErrorToNSError();
      uint64_t v23 = String._bridgeToObjectiveCImpl()();
      id v20 = objc_msgSend(v16, *a7, v7, v22, v23, String._bridgeToObjectiveCImpl()());
      swift_unknownObjectRelease_n();
      swift_unknownObjectRelease();
      swift_unknownObjectRelease();
      swift_unknownObjectRelease();
      return v20;
    }

    swift_unknownObjectRelease();
    return 0LL;
  }

  swift_unknownObjectRetain();
  URL.init(fileURLWithPath:)(a2, a3, (uint64_t)&v26);
  id v17 = v26;
  URL.init(fileURLWithPath:)(a4, a5, (uint64_t)&v25);
  uint64_t v18 = v25;
  id v19 = a1;
  id v20 = objc_msgSend(v16, *a6, v7, _swift_stdlib_bridgeErrorToNSError(), v17, v18);

  swift_unknownObjectRelease_n();
  swift_unknownObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  return v20;
}

uint64_t NSFileManager._shouldCopyItemAtPath(_:to:)( uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4, SEL *a5, SEL *a6)
{
  id v13 = objc_msgSend(v6, sel__safeDelegate);
  if (!v13) {
    return 1LL;
  }
  unint64_t v14 = v13;
  if ((objc_msgSend(v13, sel_respondsToSelector_, *a5) & 1) == 0)
  {
    if (objc_msgSend(v14, sel_respondsToSelector_, *a6))
    {
      uint64_t v18 = String._bridgeToObjectiveCImpl()();
      uint64_t v19 = String._bridgeToObjectiveCImpl()();
      id v17 = objc_msgSend((id)swift_unknownObjectRetain(), *a6, v6, v18, v19);
      swift_unknownObjectRelease_n();
      swift_unknownObjectRelease();
      swift_unknownObjectRelease();
      return (uint64_t)v17;
    }

    swift_unknownObjectRelease();
    return 1LL;
  }

  swift_unknownObjectRetain();
  URL.init(fileURLWithPath:)(a1, a2, (uint64_t)&v22);
  id v15 = v22;
  URL.init(fileURLWithPath:)(a3, a4, (uint64_t)&v21);
  uint64_t v16 = v21;
  id v17 = objc_msgSend(v14, *a5, v6, v15, v21);

  swift_unknownObjectRelease_n();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  return (uint64_t)v17;
}

uint64_t _FileOperations._FileRemoveContext.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for _FileOperations._FileRemoveContext()
{
  return objc_opt_self();
}

uint64_t @objc closure #1 in closure #1 in static _FileOperations._removeFile(_:_:with:)( uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = String.init(cString:)();
  unint64_t v6 = v5;
  id v7 = *(void **)(a3 + 24);
  if (v7)
  {
    uint64_t v8 = v4;
    id v9 = v7;
    LODWORD(v8) = NSFileManager._shouldRemoveItemAtPath(_:)(v8, v6);

    swift_release();
    swift_bridgeObjectRelease();
    return ~(_DWORD)v8 & 1LL;
  }

  else
  {
    swift_release();
    swift_bridgeObjectRelease();
    return 0LL;
  }

uint64_t closure #2 in closure #1 in static _FileOperations._removeFile(_:_:with:)( _removefile_state *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v41 = *MEMORY[0x1895F89C0];
  swift_retain();
  uint64_t v5 = String.init(cString:)();
  unint64_t v7 = v6;
  LODWORD(dst) = 0;
  removefile_state_get(a1, 5u, &dst);
  uint64_t v8 = 4LL;
  switch((int)dst)
  {
    case 1:
    case 13:
      uint64_t v8 = 513LL;
      goto LABEL_17;
    case 2:
      goto LABEL_17;
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 14:
    case 15:
    case 16:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 29:
    case 31:
    case 32:
    case 33:
    case 34:
    case 35:
    case 36:
    case 37:
    case 38:
    case 39:
    case 40:
    case 41:
    case 42:
    case 43:
    case 44:
    case 45:
    case 46:
    case 47:
    case 48:
    case 49:
    case 50:
    case 51:
    case 52:
    case 53:
    case 54:
    case 55:
    case 56:
    case 57:
    case 58:
    case 59:
    case 60:
    case 61:
    case 62:
    case 64:
    case 65:
    case 67:
    case 68:
      goto LABEL_6;
    case 17:
      uint64_t v8 = 516LL;
      goto LABEL_17;
    case 28:
    case 69:
      uint64_t v8 = 640LL;
      goto LABEL_17;
    case 30:
      goto LABEL_15;
    case 63:
      uint64_t v8 = 514LL;
      goto LABEL_17;
    case 66:
      if ((POSIXErrorCode.init(rawValue:)() & 0x100000000LL) != 0) {
        goto LABEL_34;
      }
      static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSPOSIXErrorDomain");
      uint64_t v10 = (int)POSIXErrorCode.rawValue.getter();
      id v11 = objc_allocWithZone((Class)&OBJC_CLASS___NSError);
      uint64_t v12 = String._bridgeToObjectiveCImpl()();
      swift_bridgeObjectRelease();
      id v13 = objc_msgSend(v11, sel_initWithDomain_code_userInfo_, v12, v10, _NativeDictionary.bridged()());
      swift_unknownObjectRelease();
      swift_unknownObjectRelease();
      id v14 = objc_msgSend(v13, sel_domain);
      id v15 = static String._unconditionallyBridgeFromObjectiveC(_:)(v14);
      uint64_t v17 = v16;

      if (v15 == static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSPOSIXErrorDomain") && v17 == v18)
      {
        swift_bridgeObjectRelease_n();
        goto LABEL_33;
      }

      char v20 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v20 & 1) != 0)
      {
LABEL_33:
        swift_bridgeObjectRetain();
        specialized CocoaError.init<A>(_:path:underlying:variant:source:destination:)( (uint64_t (*)(void))0x201,  v5,  v7,  v13,  0x65766F6D6552LL,  0xE600000000000000LL,  0LL,  0LL,  (void *(*)(void *__return_ptr, void *, uint64_t))&dst,  0LL,  0LL);
        goto LABEL_26;
      }

      __break(1u);
LABEL_15:
      uint64_t v8 = 642LL;
LABEL_17:
      if ((POSIXErrorCode.init(rawValue:)() & 0x100000000LL) != 0)
      {
LABEL_34:
        unint64_t dst = 0LL;
        unint64_t v40 = 0xE000000000000000LL;
        _StringGuts.grow(_:)(22LL);
        swift_bridgeObjectRelease();
        unint64_t dst = 0xD000000000000014LL;
        unint64_t v40 = 0x80000001839C9190LL;
        v38._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
        String.append(_:)(v38);
        swift_bridgeObjectRelease();
        _assertionFailure(_:_:file:line:flags:)();
        __break(1u);
        JUMPOUT(0x18302F13CLL);
      }

      static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSPOSIXErrorDomain");
      uint64_t v21 = (int)POSIXErrorCode.rawValue.getter();
      id v22 = objc_allocWithZone((Class)&OBJC_CLASS___NSError);
      uint64_t v23 = String._bridgeToObjectiveCImpl()();
      swift_bridgeObjectRelease();
      id v9 = objc_msgSend(v22, sel_initWithDomain_code_userInfo_, v23, v21, _NativeDictionary.bridged()());
      swift_unknownObjectRelease();
      swift_unknownObjectRelease();
      id v24 = objc_msgSend(v9, sel_domain);
      id v25 = static String._unconditionallyBridgeFromObjectiveC(_:)(v24);
      uint64_t v27 = v26;

      if (v25 == static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSPOSIXErrorDomain") && v27 == v28) {
        goto LABEL_24;
      }
      char v30 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v30 & 1) == 0)
      {
        __break(1u);
LABEL_24:
        swift_bridgeObjectRelease_n();
      }

void closure #1 in static _FileOperations.moveFile(_:to:with:options:)( const char *a1, void *a2, uint64_t *a3, uint64_t a4, void *a5, void *a6, uint64_t a7, void *a8)
{
  if (a1)
  {
    uint64_t v71 = &v70;
    uint64_t v16 = MEMORY[0x1895F8858](a1);
    v66[6] = v17;
    v66[7] = v18;
    v66[8] = v19;
    v66[9] = v20;
    v67[0] = v16;
    v67[1] = a2;
    Swift::String v68 = a3;
    uint64_t v69 = a4;
    if ((_foundation_swift_url_feature_enabled() & 1) == 0)
    {
      id v31 = a5;
      closure #1 in closure #1 in static _FileOperations.moveFile(_:to:with:options:)( (const char *)objc_msgSend(v31, sel_fileSystemRepresentation),  v31,  a6,  a7,  a8,  a1,  a2,  a3,  a4);
      return;
    }

    v75._uint64_t countAndFlagsBits = (uint64_t)a5;
    v75._unint64_t object = a6;
    uint64_t v76 = a7;
    swift_retain();
    id v21 = a5;
    swift_retain();
    Swift::String v22 = URL.path(percentEncoded:)(1);
    uint64_t countAndFlagsBits = v22._countAndFlagsBits;
    Swift::String v75 = v22;
    swift_bridgeObjectRetain();
    if (String.count.getter() <= 1)
    {
      unint64_t object = (unint64_t)v22._object;
    }

    else
    {
      unint64_t object = (unint64_t)v22._object;
      if ((specialized BidirectionalCollection.last.getter(v22._countAndFlagsBits, (unint64_t)v22._object) & 0x1FF) == 0x2F)
      {
        specialized RangeReplaceableCollection<>.popLast()();
        swift_bridgeObjectRelease();
        uint64_t countAndFlagsBits = v75._countAndFlagsBits;
        unint64_t object = (unint64_t)v75._object;
      }
    }

    uint64_t v73 = Set.init(minimumCapacity:)();
    uint64_t v44 = specialized Set._Variant.insert(_:)(&v77, 0x2FuLL);
    uint64_t v45 = v73;
    uint64_t v46 = HIBYTE(object) & 0xF;
    if ((object & 0x2000000000000000LL) == 0) {
      uint64_t v46 = countAndFlagsBits & 0xFFFFFFFFFFFFLL;
    }
    if (v46)
    {
      id v70 = v21;
      uint64_t v73 = countAndFlagsBits;
      unint64_t v74 = object;
      MEMORY[0x1895F8858](v44);
      v66[2] = &v73;
      v66[3] = v45;
      swift_bridgeObjectRetain();
      uint64_t v47 = v72;
      uint64_t v48 = (uint64_t (*)())specialized String.UTF8View.withContiguousStorageIfAvailable<A>(_:)( (void *(*)(__int128 *__return_ptr, void *, uint64_t))closure #1 in StringProtocol.removingURLPercentEncoding(excluding:)specialized partial apply,  (uint64_t)v66,  countAndFlagsBits,  object);
      uint64_t v72 = v47;
      if (v49 == 1)
      {
        Swift::Int v50 = v73;
        unint64_t v51 = v74;
        swift_bridgeObjectRetain();
        uint64_t v52 = specialized StringProtocol.removingURLPercentEncoding<A>(utf8Buffer:excluding:)(v50, v51, v45);
        unint64_t v54 = v53;
        swift_bridgeObjectRelease();
      }

      else
      {
        uint64_t v52 = v48;
        unint64_t v54 = v49;
      }

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      id v21 = v70;
      if (!v54)
      {
        swift_release();
        swift_release();

        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v52 = 0LL;
        unint64_t v54 = 0xE000000000000000LL;
        goto LABEL_32;
      }
    }

    else
    {
      swift_bridgeObjectRelease();
      uint64_t v52 = 0LL;
      unint64_t v54 = 0xE000000000000000LL;
    }

    swift_release();
    swift_release();

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
LABEL_32:
    _sSS10FoundationE28withFileSystemRepresentationyxxSPys4Int8VGSgKXEKlFyt_Tg5031_s10Foundation3URLV34withUnsafecd22RepresentationyxxSPys4F25VGSgKXEKlFxAHKXEfU_yt_Tg5AFxs5Error_pRi_zRi0_zlyytIsgyrzo_Tf1ncn_n( (uint64_t)v52,  v54,  (uint64_t (*)(char *))partial apply for closure #1 in closure #1 in static _FileOperations.moveFile(_:to:with:options:));
    swift_bridgeObjectRelease();
    return;
  }

  swift_retain_n();
  id v25 = a2;
  swift_retain_n();
  id v26 = v25;
  if (_foundation_swift_url_feature_enabled())
  {
    uint64_t v76 = a4;
    uint64_t v27 = (id *)v26;
    swift_retain();
    swift_retain();
    Swift::String v28 = URL.path(percentEncoded:)(1);
    uint64_t v29 = v28._countAndFlagsBits;
    Swift::String v75 = v28;
    swift_bridgeObjectRetain();
    uint64_t v71 = v27;
    if (String.count.getter() <= 1)
    {
      unint64_t v30 = (unint64_t)v28._object;
    }

    else
    {
      unint64_t v30 = (unint64_t)v28._object;
      if ((specialized BidirectionalCollection.last.getter(v28._countAndFlagsBits, (unint64_t)v28._object) & 0x1FF) == 0x2F)
      {
        specialized RangeReplaceableCollection<>.popLast()();
        swift_bridgeObjectRelease();
        uint64_t v29 = v75._countAndFlagsBits;
        unint64_t v30 = (unint64_t)v75._object;
      }
    }

    uint64_t v73 = Set.init(minimumCapacity:)();
    uint64_t v55 = specialized Set._Variant.insert(_:)(&v77, 0x2FuLL);
    uint64_t v56 = v73;
    uint64_t v57 = HIBYTE(v30) & 0xF;
    if ((v30 & 0x2000000000000000LL) == 0) {
      uint64_t v57 = v29 & 0xFFFFFFFFFFFFLL;
    }
    if (v57)
    {
      id v70 = v26;
      uint64_t v73 = v29;
      unint64_t v74 = v30;
      MEMORY[0x1895F8858](v55);
      Swift::String v68 = &v73;
      uint64_t v69 = v56;
      swift_bridgeObjectRetain();
      specialized String.UTF8View.withContiguousStorageIfAvailable<A>(_:)( (void *(*)(__int128 *__return_ptr, void *, uint64_t))closure #1 in StringProtocol.removingURLPercentEncoding(excluding:)specialized partial apply,  (uint64_t)v67,  v29,  v30);
      if (v58 == 1)
      {
        Swift::Int v59 = v73;
        unint64_t v60 = v74;
        swift_bridgeObjectRetain();
        specialized StringProtocol.removingURLPercentEncoding<A>(utf8Buffer:excluding:)(v59, v60, v56);
        swift_bridgeObjectRelease();
      }

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      id v26 = v70;
      uint64_t v62 = v71;
    }

    else
    {
      swift_bridgeObjectRelease();
      uint64_t v62 = v71;
    }

    swift_release();
    swift_release();

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
  }

  else
  {
    id v32 = objc_msgSend(v26, sel__parameterString);
    if (v32)
    {
      id v33 = v32;
      id v34 = static String._unconditionallyBridgeFromObjectiveC(_:)(v32);
      uint64_t v36 = v35;

      if (getEnumTag for _DarwinSearchPathsSequence.Iterator.State()
        && (id v37 = objc_msgSend(v26, sel_path)) != 0)
      {
        Swift::String v38 = v37;
        id v39 = static String._unconditionallyBridgeFromObjectiveC(_:)(v37);
        uint64_t v41 = v40;

        v75._uint64_t countAndFlagsBits = (uint64_t)v39;
        v75._unint64_t object = v41;
        swift_bridgeObjectRetain();
        v42._uint64_t countAndFlagsBits = 59LL;
        v42._unint64_t object = (void *)0xE100000000000000LL;
        String.append(_:)(v42);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRetain();
        v43._uint64_t countAndFlagsBits = (uint64_t)v34;
        v43._unint64_t object = v36;
        String.append(_:)(v43);
        swift_release();
        swift_release();

        swift_bridgeObjectRelease();
      }

      else
      {
        v75._uint64_t countAndFlagsBits = 59LL;
        v75._unint64_t object = (void *)0xE100000000000000LL;
        v63._uint64_t countAndFlagsBits = (uint64_t)v34;
        v63._unint64_t object = v36;
        String.append(_:)(v63);
        swift_release();
        swift_release();
      }

      swift_bridgeObjectRelease();
      goto LABEL_41;
    }

    uint64_t v61 = (id *)objc_msgSend(v26, sel_path);
    if (!v61)
    {
      swift_release();
      swift_release();

      goto LABEL_41;
    }

    uint64_t v62 = v61;
    static String._unconditionallyBridgeFromObjectiveC(_:)(v61);
    swift_release();
    swift_release();
  }

LABEL_41:
  uint64_t v64 = (void *)objc_opt_self();
  uint64_t v65 = String._bridgeToObjectiveCImpl()();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
   objc_msgSend( v64,  sel__cocoaErrorWithCode_path_url_underlying_variant_source_destination_,  4,  v65,  v26,  0,  0,  0,  0);
  swift_unknownObjectRelease();

  swift_willThrow();
}

void closure #1 in closure #1 in static _FileOperations.moveFile(_:to:with:options:)( const char *a1, void *a2, void *a3, uint64_t a4, void *a5, const char *a6, void *a7, void *a8, uint64_t a9)
{
  uint64_t v10 = v9;
  uint64_t v513 = *MEMORY[0x1895F89C0];
  if (!a1)
  {
    swift_retain_n();
    id v25 = a2;
    swift_retain_n();
    id v26 = v25;
    if (_foundation_swift_url_feature_enabled())
    {
      v494 = v10;
      *(void *)&v512.st_uid = a4;
      id Path = v26;
      swift_retain();
      uint64_t v497 = a4;
      swift_retain();
      Swift::String v27 = URL.path(percentEncoded:)(1);
      uint64_t countAndFlagsBits = v27._countAndFlagsBits;
      *(void *)&v512.st_dev = v27._countAndFlagsBits;
      v512.st_ino = (__darwin_ino64_t)v27._object;
      swift_bridgeObjectRetain();
      uint64_t v29 = v26;
      v500 = a3;
      if (String.count.getter() <= 1)
      {
        unint64_t object = (unint64_t)v27._object;
      }

      else
      {
        unint64_t object = (unint64_t)v27._object;
        if ((specialized BidirectionalCollection.last.getter(v27._countAndFlagsBits, (unint64_t)v27._object) & 0x1FF) == 0x2F)
        {
          specialized RangeReplaceableCollection<>.popLast()();
          swift_bridgeObjectRelease();
          uint64_t countAndFlagsBits = *(void *)&v512.st_dev;
          unint64_t object = v512.st_ino;
        }
      }

      v508._uint64_t countAndFlagsBits = Set.init(minimumCapacity:)();
      uint64_t v59 = specialized Set._Variant.insert(_:)(&v510, 0x2FuLL);
      uint64_t v60 = v508._countAndFlagsBits;
      uint64_t v61 = HIBYTE(object) & 0xF;
      if ((object & 0x2000000000000000LL) == 0) {
        uint64_t v61 = countAndFlagsBits & 0xFFFFFFFFFFFFLL;
      }
      if (v61)
      {
        v508._uint64_t countAndFlagsBits = countAndFlagsBits;
        v508._unint64_t object = (void *)object;
        MEMORY[0x1895F8858](v59);
        v478 = &v508;
        v479 = (Swift::String *)v60;
        swift_bridgeObjectRetain();
        specialized String.UTF8View.withContiguousStorageIfAvailable<A>(_:)( (void *(*)(__int128 *__return_ptr, void *, uint64_t))closure #1 in StringProtocol.removingURLPercentEncoding(excluding:)specialized partial apply,  (uint64_t)v477,  countAndFlagsBits,  object);
        if (v62 == 1)
        {
          Swift::Int v63 = v508._countAndFlagsBits;
          uint64_t v64 = v508._object;
          swift_bridgeObjectRetain();
          specialized StringProtocol.removingURLPercentEncoding<A>(utf8Buffer:excluding:)( v63,  (unint64_t)v64,  v60);
          swift_bridgeObjectRelease();
        }

        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        id v68 = Path;
      }

      else
      {
        swift_bridgeObjectRelease();
        id v68 = Path;
      }

      swift_release();
      swift_release();

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_release();
      swift_release();
    }

    else
    {
      id v31 = objc_msgSend(v26, sel__parameterString);
      uint64_t v29 = v26;
      if (v31)
      {
        id v32 = v31;
        id v33 = static String._unconditionallyBridgeFromObjectiveC(_:)(v31);
        unsigned __int8 v35 = v34;

        if (getEnumTag for _DarwinSearchPathsSequence.Iterator.State()
          && (id v36 = objc_msgSend(v26, sel_path)) != 0)
        {
          id v37 = v36;
          id v38 = static String._unconditionallyBridgeFromObjectiveC(_:)(v36);
          __darwin_ino64_t v40 = v39;

          v500 = a3;
          *(void *)&v512.st_dev = v38;
          v512.st_ino = v40;
          swift_bridgeObjectRetain();
          v41._uint64_t countAndFlagsBits = 59LL;
          v41._unint64_t object = (void *)0xE100000000000000LL;
          String.append(_:)(v41);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRetain();
          v42._uint64_t countAndFlagsBits = (uint64_t)v33;
          v42._unint64_t object = v35;
          String.append(_:)(v42);
          swift_release();
          swift_release();

          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
        }

        else
        {
          *(void *)&v512.st_dev = 59LL;
          v512.st_ino = 0xE100000000000000LL;
          v65._uint64_t countAndFlagsBits = (uint64_t)v33;
          v65._unint64_t object = v35;
          String.append(_:)(v65);
          swift_release();
          swift_release();

          swift_bridgeObjectRelease();
        }
      }

      else
      {
        id v66 = objc_msgSend(v26, sel_path);
        if (v66)
        {
          uint64_t v67 = v66;
          static String._unconditionallyBridgeFromObjectiveC(_:)(v66);
          swift_release();
          swift_release();
        }

        else
        {
          swift_release();
          swift_release();
        }
      }
    }

    uint64_t v73 = (void *)objc_opt_self();
    uint64_t v74 = String._bridgeToObjectiveCImpl()();
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
     objc_msgSend( v73,  sel__cocoaErrorWithCode_path_url_underlying_variant_source_destination_,  4,  v74,  v29,  0,  0,  0,  0);
    swift_unknownObjectRelease();

    swift_willThrow();
    return;
  }

  v499 = a8;
  id v492 = a7;
  v495 = (char *)a2;
  v496 = a6;
  uint64_t v16 = String.init(cString:)();
  unint64_t v18 = v17;
  uint64_t v19 = String.init(cString:)();
  LOBYTE(v16) = NSFileManager._shouldCopyItemAtPath(_:to:)( v16,  v18,  v19,  v20,  (SEL *)&selRef_fileManager_shouldMoveItemAtURL_toURL_,  (SEL *)&selRef_fileManager_shouldMoveItemAtPath_toPath_);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v16 & 1) == 0) {
    return;
  }
  v500 = a3;
  v490 = a5;
  uint64_t v21 = a9;
  memset(&v512, 0, 28);
  memset(&v512.st_atimespec, 0, 112);
  Swift::String v22 = a1;
  if (lstat(a1, &v512))
  {
    int v23 = 0;
    id v24 = v496;
    goto LABEL_71;
  }

  swift_retain();
  id v43 = v492;
  swift_retain();
  id v487 = v43;
  v488 = v22;
  uint64_t v497 = a4;
  uint64_t v489 = a9;
  if (_foundation_swift_url_feature_enabled())
  {
    uint64_t v509 = a9;
    id v44 = v43;
    swift_retain();
    swift_retain();
    Swift::String v45 = URL.path(percentEncoded:)(1);
    Swift::String v508 = v45;
    swift_bridgeObjectRetain();
    if (String.count.getter() > 1
      && (specialized BidirectionalCollection.last.getter(v45._countAndFlagsBits, (unint64_t)v45._object) & 0x1FF) == 0x2F)
    {
      specialized RangeReplaceableCollection<>.popLast()();
      swift_bridgeObjectRelease();
    }

    v510._uint64_t countAndFlagsBits = Set.init(minimumCapacity:)();
    uint64_t v46 = specialized Set._Variant.insert(_:)(&v505, 0x2FuLL);
    uint64_t v47 = v510._countAndFlagsBits;
    uint64_t v49 = v508._countAndFlagsBits;
    uint64_t v48 = v508._object;
    unint64_t v50 = ((unint64_t)v508._object >> 56) & 0xF;
    if (v50)
    {
      id Path = v44;
      Swift::String v510 = v508;
      MEMORY[0x1895F8858](v46);
      v478 = &v510;
      v479 = (Swift::String *)v47;
      swift_bridgeObjectRetain();
      unint64_t v51 = (uint64_t (*)())specialized String.UTF8View.withContiguousStorageIfAvailable<A>(_:)( (void *(*)(__int128 *__return_ptr, void *, uint64_t))closure #1 in StringProtocol.removingURLPercentEncoding(excluding:)specialized partial apply,  (uint64_t)v477,  v49,  (unint64_t)v48);
      unint64_t v53 = v10;
      if (v52 == 1)
      {
        unint64_t v55 = (unint64_t)v510._object;
        Swift::Int v54 = v510._countAndFlagsBits;
        swift_bridgeObjectRetain();
        uint64_t v56 = specialized StringProtocol.removingURLPercentEncoding<A>(utf8Buffer:excluding:)(v54, v55, v47);
        unint64_t v58 = v57;
        swift_bridgeObjectRelease();
      }

      else
      {
        uint64_t v56 = v51;
        unint64_t v58 = v52;
      }

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      id v44 = Path;
      if (!v58)
      {
        swift_release();
        swift_release();

        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v56 = 0LL;
        unint64_t v58 = 0xE000000000000000LL;
        goto LABEL_46;
      }
    }

    else
    {
      unint64_t v53 = v10;
      swift_bridgeObjectRelease();
      uint64_t v56 = 0LL;
      unint64_t v58 = 0xE000000000000000LL;
    }

    swift_release();
    swift_release();

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
LABEL_46:
    char v77 = v44;
    swift_bridgeObjectRetain();
    id Path = (id)String._lastPathComponent.getter((uint64_t)v56, v58);
    id v72 = v78;
    swift_release();
    swift_release();

    swift_bridgeObjectRelease_n();
    a4 = v497;
    uint64_t v76 = v53;
    Swift::String v75 = v495;
    goto LABEL_47;
  }

  id v69 = objc_msgSend(v43, sel_lastPathComponent);
  if (v69)
  {
    id v70 = v69;
    id Path = static String._unconditionallyBridgeFromObjectiveC(_:)(v69);
    id v72 = v71;
    swift_release();
    swift_release();
  }

  else
  {
    swift_release();
    swift_release();

    id Path = 0LL;
    id v72 = (id)0xE000000000000000LL;
  }

  Swift::String v75 = v495;
  uint64_t v76 = v10;
LABEL_47:
  swift_retain();
  uint64_t v79 = v75;
  uint64_t v80 = v500;
  swift_retain();
  char v81 = _foundation_swift_url_feature_enabled();
  v486 = v79;
  if ((v81 & 1) != 0)
  {
    v508._uint64_t countAndFlagsBits = (uint64_t)v79;
    v508._unint64_t object = v80;
    uint64_t v509 = a4;
    v498 = v79;
    swift_retain();
    swift_retain();
    Swift::String v82 = URL.path(percentEncoded:)(1);
    Swift::String v508 = v82;
    swift_bridgeObjectRetain();
    if (String.count.getter() > 1
      && (specialized BidirectionalCollection.last.getter(v82._countAndFlagsBits, (unint64_t)v82._object) & 0x1FF) == 0x2F)
    {
      specialized RangeReplaceableCollection<>.popLast()();
      swift_bridgeObjectRelease();
    }

    v510._uint64_t countAndFlagsBits = Set.init(minimumCapacity:)();
    uint64_t v83 = specialized Set._Variant.insert(_:)(&v505, 0x2FuLL);
    uint64_t v84 = v510._countAndFlagsBits;
    uint64_t v86 = v508._countAndFlagsBits;
    unint64_t v85 = v508._object;
    unint64_t v87 = ((unint64_t)v508._object >> 56) & 0xF;
    if (v87)
    {
      id v493 = v72;
      Swift::String v510 = v508;
      MEMORY[0x1895F8858](v83);
      v478 = &v510;
      v479 = (Swift::String *)v84;
      swift_bridgeObjectRetain();
      unint64_t v88 = (uint64_t (*)())specialized String.UTF8View.withContiguousStorageIfAvailable<A>(_:)( (void *(*)(__int128 *__return_ptr, void *, uint64_t))closure #1 in StringProtocol.removingURLPercentEncoding(excluding:)specialized partial apply,  (uint64_t)v477,  v86,  (unint64_t)v85);
      v494 = v76;
      if (v89 == 1)
      {
        unint64_t v91 = (unint64_t)v510._object;
        Swift::Int v90 = v510._countAndFlagsBits;
        swift_bridgeObjectRetain();
        id v92 = specialized StringProtocol.removingURLPercentEncoding<A>(utf8Buffer:excluding:)(v90, v91, v84);
        unint64_t v94 = v93;
        swift_bridgeObjectRelease();
      }

      else
      {
        id v92 = v88;
        unint64_t v94 = v89;
      }

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      id v72 = v493;
      if (!v94)
      {
        swift_release();
        swift_release();
        uint64_t v99 = v498;

        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        id v92 = 0LL;
        unint64_t v94 = 0xE000000000000000LL;
        goto LABEL_64;
      }
    }

    else
    {
      v494 = v76;
      swift_bridgeObjectRelease();
      id v92 = 0LL;
      unint64_t v94 = 0xE000000000000000LL;
    }

    swift_release();
    swift_release();
    uint64_t v99 = v498;

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
LABEL_64:
    swift_bridgeObjectRetain();
    v498 = (char *)String._lastPathComponent.getter((uint64_t)v92, v94);
    uint64_t v98 = v100;
    swift_release();
    swift_release();

    swift_bridgeObjectRelease_n();
    goto LABEL_65;
  }

  v494 = v76;
  id v95 = objc_msgSend(v79, sel_lastPathComponent);
  if (v95)
  {
    uint64_t v96 = v95;
    v498 = (char *)static String._unconditionallyBridgeFromObjectiveC(_:)(v95);
    uint64_t v98 = v97;
    swift_release();
    swift_release();
  }

  else
  {
    swift_release();
    swift_release();

    v498 = 0LL;
    uint64_t v98 = (void *)0xE000000000000000LL;
  }

LABEL_319:
          swift_bridgeObjectRelease_n();
LABEL_320:

          a4 = v21;
          goto LABEL_247;
        }
      }
    }

    uint64_t v166 = (uint64_t)v485;
  }

  else
  {
    a4 = v497;
  }

          v315 = (id)v278;
          if ((POSIXErrorCode.init(rawValue:)() & 0x100000000LL) != 0) {
            goto LABEL_367;
          }
          v281 = v305;
          static String._unconditionallyBridgeFromObjectiveC(_:)(v305);
          v282 = (int)POSIXErrorCode.rawValue.getter();
          Swift::String v283 = objc_allocWithZone((Class)&OBJC_CLASS___NSError);
          Swift::String v284 = String._bridgeToObjectiveCImpl()();
          swift_bridgeObjectRelease();
          Swift::String v285 = objc_msgSend(v283, sel_initWithDomain_code_userInfo_, v284, v282, _NativeDictionary.bridged()());
          swift_unknownObjectRelease();
          swift_unknownObjectRelease();
          uint64_t v314 = (size_t)v285;
          v286 = objc_msgSend(v285, sel_domain);
          id v287 = static String._unconditionallyBridgeFromObjectiveC(_:)(v286);
          v289 = v288;

          if (v287 == static String._unconditionallyBridgeFromObjectiveC(_:)(v281) && v289 == v290) {
            goto LABEL_326;
          }
          v292 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if ((v292 & 1) == 0)
          {
            __break(1u);
LABEL_326:
            swift_bridgeObjectRelease_n();
          }

          v279 = (void *)v314;
          id v280 = (uint64_t)v315;
LABEL_328:
          swift_bridgeObjectRetain();
          specialized CocoaError.init<A>(_:path:underlying:variant:source:destination:)( (uint64_t (*)(void))v280,  v17,  v18,  v279,  0LL,  0LL,  0LL,  0LL,  (void *(*)(void *__return_ptr, void *, uint64_t))&v317,  0LL,  0LL);
          swift_willThrow();
          swift_release();
          uint64_t result = outlined consume of _FTSSequence.Element?((uint64_t)v16, v17, v18, v19);
          break;
      }

      return result;
    }

    fts_path = v16->fts_path;
    if (!fts_path) {
      goto LABEL_350;
    }
    strlcpy(v312, &fts_path[v314], v313);
    if (v16->fts_info != 6) {
      break;
    }
    if (v16->fts_level) {
      id v34 = 0;
    }
    else {
      id v34 = v310;
    }
LABEL_20:
    specialized static _FileOperations._safeCopyDirectoryMetadata<A>(src:dst:delegate:extraFlags:)( (uint64_t)fts_path,  (uint64_t)v9,  (uint64_t)v315,  v34);
    if (v7) {
      return swift_release();
    }
LABEL_13:
    uint64_t v16 = (FTSENT *)_FTSSequence.Iterator.next()();
    unint64_t v17 = v30;
    unint64_t v18 = v31;
    uint64_t v19 = v32;
    if (v32 == 0xFF) {
      return swift_release();
    }
  }

  v311 = v7;
  unsigned __int8 v35 = v315;
  id v36 = String.init(cString:)();
  id v38 = v37;
  __darwin_ino64_t v39 = String.init(cString:)();
  LOBYTE(v36) = NSFileManager._shouldCopyItemAtPath(_:to:)( v36,  v38,  v39,  v40,  (SEL *)&selRef_fileManager_shouldCopyItemAtURL_toURL_,  (SEL *)&selRef_fileManager_shouldCopyItemAtPath_toPath_);
  uint64_t v307 = v35;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v36 & 1) == 0)
  {
    unint64_t v7 = v311;
    if (v16->fts_info == 1)
    {
      id v9 = v308;
      if (!*(_BYTE *)(v309 + 40))
      {
        fts_set(*(FTS **)(v309 + 16), v16, 4);
        unint64_t v51 = _FTSSequence.Iterator.next()();
        outlined consume of _FTSSequence.Element?(v51, v52, v53, v54);
      }

      goto LABEL_13;
    }

    goto LABEL_12;
  }

  if (v16->fts_level) {
    id v34 = 0;
  }
  else {
    id v34 = v310;
  }
  LODWORD(v41) = v309;
  unint64_t v7 = v311;
  id v9 = v308;
  switch(v16->fts_info)
  {
    case 1u:
      if (v34 < 0) {
        goto LABEL_359;
      }
      if (!copyfile(fts_path, v308, 0LL, v34 | 0xE0008)) {
        goto LABEL_13;
      }
      v299 = v17;
      int v300 = (uint64_t (*)(void))v18;
      unint64_t v94 = MEMORY[0x186E1B0E8]();
      id v95 = String.init(cString:)();
      id v97 = v96;
      uint64_t v99 = String.init(cString:)();
      LODWORD(v301) = v94;
      uint64_t v302 = (unint64_t *)v97;
      uint64_t v304 = (uint64_t (*)(void))v98;
      if (v94 != 63)
      {
        swift_bridgeObjectRetain();
        Swift::String v130 = v95;
        uint64_t v131 = v97;
        uint64_t v132 = v301;
        unint64_t v101 = v95;
        goto LABEL_280;
      }

      Swift::String v100 = (uint64_t (*)(void))v98;
      unint64_t v101 = v95;
      if ((v98 & 0x2000000000000000LL) != 0) {
        unint64_t v102 = HIBYTE(v98) & 0xF;
      }
      else {
        unint64_t v102 = v99 & 0xFFFFFFFFFFFFLL;
      }
      unint64_t v103 = v102;
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain_n();
      uint64_t v296 = v103;
      if (!v103)
      {
LABEL_84:
        uint64_t v107 = v99;
        uint64_t v73 = (uint64_t)v100;
        goto LABEL_237;
      }

      char v295 = 4 * v103;
      while (1)
      {
        uint64_t v104 = String.index(before:)();
        id v317 = (id)String.subscript.getter();
        v318 = v105;
        uint64_t v106 = closure #1 in String._lastPathComponent.getter(&v317);
        swift_bridgeObjectRelease();
        if ((v106 & 1) != 0) {
          break;
        }
        Swift::String v100 = v304;
        if (v104 < 0x4000) {
          goto LABEL_84;
        }
      }

      if (!(v104 >> 14))
      {
        if (String.count.getter() == 1) {
          goto LABEL_192;
        }
        goto LABEL_233;
      }

      if ((String.index(before:)() ^ v104) >= 0x4000)
      {
LABEL_233:
        v228 = String.subscript.getter();
        uint64_t v107 = MEMORY[0x186E1B940](v228);
        uint64_t v73 = v229;
        swift_bridgeObjectRelease();
        goto LABEL_236;
      }

      v185 = String.subscript.getter();
      Swift::String v187 = specialized BidirectionalCollection.lastIndex(where:)(v185, v186);
      v189 = v188;
      swift_bridgeObjectRelease();
      if ((v189 & 1) != 0)
      {
LABEL_192:
        swift_bridgeObjectRelease();
        uint64_t v73 = 0xE100000000000000LL;
        uint64_t v107 = 47LL;
        goto LABEL_237;
      }

      uint64_t v190 = String.subscript.getter();
      v311 = specialized BidirectionalCollection.lastIndex(where:)(v190, v191);
      unint64_t v55 = v192;
      swift_bridgeObjectRelease();
      if ((v55 & 1) != 0)
      {
        swift_bridgeObjectRetain();
        v230 = specialized Collection.subscript.getter();
        v311 = v231;
        uint64_t v233 = v232;
        v235 = v234;
        swift_bridgeObjectRelease();
        uint64_t v107 = MEMORY[0x186E1B940](v230, v311, v233, v235);
        uint64_t v73 = v236;
      }

      else
      {
        if (v187 >> 14 < (unint64_t)String.index(after:)() >> 14)
        {
          __break(1u);
LABEL_355:
          id v317 = 0LL;
          v318 = 0xE000000000000000LL;
          _StringGuts.grow(_:)(22LL);
          swift_bridgeObjectRelease();
          id v317 = (id)0xD000000000000014LL;
          v318 = 0x80000001839C9190LL;
          v316 = v55;
          goto LABEL_366;
        }

        swift_bridgeObjectRetain();
        v193 = specialized Collection.subscript.getter();
        v195 = v194;
        v197 = v196;
        Swift::String v199 = v198;
        swift_bridgeObjectRelease();
        uint64_t v107 = MEMORY[0x186E1B940](v193, v195, v197, v199);
        uint64_t v73 = v200;
      }

      swift_bridgeObjectRelease();
LABEL_236:
      swift_bridgeObjectRelease();
LABEL_237:
      if ((v73 & 0x1000000000000000LL) != 0)
      {
        uint64_t isStackAllocationSafe = String.UTF8View._foreignCount()();
      }

      else if ((v73 & 0x2000000000000000LL) != 0)
      {
        uint64_t isStackAllocationSafe = HIBYTE(v73) & 0xF;
      }

      else
      {
        uint64_t isStackAllocationSafe = v107 & 0xFFFFFFFFFFFFLL;
      }

      id v238 = 3 * isStackAllocationSafe;
      if (v238 < -1) {
        goto LABEL_348;
      }
      v239 = v238 + 1;
      if (v238 < 1024
        || (uint64_t isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
      {
        v311 = (uint64_t)&v295;
        MEMORY[0x1895F8858](isStackAllocationSafe);
        id v241 = (char *)&v295 - v240;
        swift_bridgeObjectRetain();
        String._decomposed(_:into:nullTerminated:)(1, (uint64_t)v241, v239, 1, v107, v73);
        id v243 = v242;
        swift_bridgeObjectRelease();
        if ((v243 & 1) != 0)
        {
          uint64_t v131 = (unint64_t)v304;
          if (v7) {
            goto LABEL_364;
          }
          v245 = 0LL;
        }

        else
        {
          uint64_t v244 = strnlen(v241, 0x100uLL);
          uint64_t v131 = (unint64_t)v304;
          if (v7) {
            goto LABEL_364;
          }
          v245 = v244;
        }
      }

      else
      {
        uint64_t v116 = (const char *)swift_slowAlloc();
        swift_bridgeObjectRetain();
        String._decomposed(_:into:nullTerminated:)(1, (uint64_t)v116, v239, 1, v107, v73);
        Swift::String v247 = v246;
        swift_bridgeObjectRelease();
        if ((v247 & 1) != 0)
        {
          uint64_t v131 = (unint64_t)v304;
          if (v7) {
            goto LABEL_357;
          }
          v245 = 0LL;
        }

        else
        {
          uint64_t v131 = (unint64_t)v304;
          if (v116) {
            v245 = strnlen(v116, 0x100uLL);
          }
          else {
            v245 = 0LL;
          }
          if (v7) {
            goto LABEL_357;
          }
        }

        MEMORY[0x186E20E60](v116, -1LL, -1LL);
      }

      Swift::String v248 = swift_bridgeObjectRelease();
      if ((v131 & 0x1000000000000000LL) != 0)
      {
        Swift::String v248 = String.UTF8View._foreignCount()();
        uint64_t v296 = v248;
      }

      Swift::String v249 = 3 * v296;
      if (v249 < -1) {
        goto LABEL_349;
      }
      v311 = v245;
      uint64_t v250 = v249 + 1;
      if (v249 < 1024 || (Swift::String v248 = swift_stdlib_isStackAllocationSafe(), (v248 & 1) != 0))
      {
        uint64_t v296 = (uint64_t)&v295;
        MEMORY[0x1895F8858](v248);
        v252 = (char *)&v295 - v251;
        swift_bridgeObjectRetain();
        String._decomposed(_:into:nullTerminated:)(1, (uint64_t)v252, v250, 1, v99, v131);
        v254 = v253;
        swift_bridgeObjectRelease();
        if ((v254 & 1) != 0) {
          v255 = 0LL;
        }
        else {
          v255 = strnlen(v252, 0x401uLL);
        }
        uint64_t v132 = v301;
        uint64_t v131 = (unint64_t)v304;
      }

      else
      {
        v256 = (const char *)swift_slowAlloc();
        swift_bridgeObjectRetain();
        String._decomposed(_:into:nullTerminated:)(1, (uint64_t)v256, v250, 1, v99, v131);
        Swift::String v258 = v257;
        swift_bridgeObjectRelease();
        if ((v258 & 1) != 0)
        {
          uint64_t v132 = v301;
          v255 = 0LL;
        }

        else
        {
          if (v256) {
            v255 = strnlen(v256, 0x401uLL);
          }
          else {
            v255 = 0LL;
          }
          uint64_t v132 = v301;
        }

        MEMORY[0x186E20E60](v256, -1LL, -1LL);
      }

      uint64_t v259 = v302;
      swift_bridgeObjectRelease();
      if (v311 <= 255)
      {
        if (v255 < 1025)
        {
          swift_bridgeObjectRelease();
          Swift::String v130 = v101;
          id v97 = (unint64_t)v302;
          uint64_t v131 = (unint64_t)v302;
        }

        else
        {
          id v97 = (unint64_t)v302;
          swift_bridgeObjectRelease();
          Swift::String v130 = v99;
        }
      }

      else
      {
        swift_bridgeObjectRelease();
        Swift::String v130 = v99;
        id v97 = (unint64_t)v259;
      }

              outlined release of Locale((uint64_t)v425);
            }

            uint64_t result = outlined release of AttributedString.Runs((uint64_t)v445);
            Swift::Int v268 = v345;
            goto LABEL_321;
          }
        }

        if (v193)
        {
          char v213 = *((unsigned __int8 *)v193 + 18);
          Swift::Int v214 = *((unsigned __int16 *)v193 + 8);
          uint64_t result = swift_unknownObjectRelease_n();
          v348 = ((-15LL << ((4 * v213 + 8) & 0x3C)) - 1) & v213 | (unint64_t)(v214 << ((4 * v213 + 8) & 0x3C));
        }

        else
        {
          v348 = 0LL;
        }

        v193 = 0LL;
        uint64_t v379 = v341;
        goto LABEL_244;
      }

LABEL_322:
    swift_once();
    goto LABEL_289;
  }

  uint64_t v481 = v406;
  uint64_t v480 = specialized static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v409);
  id v411 = v410;

  uint64_t v412 = swift_allocObject();
  *(_OWORD *)(v412 + 16) = xmmword_183729E30;
  v413 = v482;
  *(void *)(v412 + 32) = v482;
  uint64_t v491 = v412 + 32;
  v414 = (void *)*MEMORY[0x189603E60];
  v415 = (void *)*MEMORY[0x189603E68];
  *(void *)(v412 + 40) = *MEMORY[0x189603E60];
  *(void *)(v412 + 48) = v415;
  id v493 = (id)v412;
  uint64_t v21 = static _SetStorage.allocate(capacity:)();
  v498 = (char *)(v21 + 56);
  id v416 = v413;
  id v417 = v414;
  id v418 = v415;
  for (uint64_t i = 0LL; i != 3; ++i)
  {
    specialized Array._checkSubscript(_:wasNativeTypeChecked:)(i, 1LL, v493);
    v420 = *(void **)(v491 + 8 * i);
    static String._unconditionallyBridgeFromObjectiveC(_:)(v420);
    Hasher.init(_seed:)();
    id Path = v420;
    String.hash(into:)();
    Swift::Int v421 = Hasher._finalize()();
    swift_bridgeObjectRelease();
    uint64_t v422 = -1LL << *(_BYTE *)(v21 + 32);
    unint64_t v423 = v421 & ~v422;
    unint64_t v424 = v423 >> 6;
    uint64_t v425 = *(void *)&v498[8 * (v423 >> 6)];
    uint64_t v426 = 1LL << v423;
    if (((1LL << v423) & v425) != 0)
    {
      id v427 = static String._unconditionallyBridgeFromObjectiveC(_:)(*(void **)(*(void *)(v21 + 48) + 8 * v423));
      uint64_t v429 = v428;
      if (v427 == static String._unconditionallyBridgeFromObjectiveC(_:)(v420) && v429 == v430) {
        goto LABEL_250;
      }
      char v432 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v432 & 1) != 0) {
        goto LABEL_251;
      }
      uint64_t v433 = ~v422;
      unint64_t v423 = (v423 + 1) & v433;
      unint64_t v424 = v423 >> 6;
      uint64_t v425 = *(void *)&v498[8 * (v423 >> 6)];
      uint64_t v426 = 1LL << v423;
      if ((v425 & (1LL << v423)) != 0)
      {
        id v434 = static String._unconditionallyBridgeFromObjectiveC(_:)(*(void **)(*(void *)(v21 + 48) + 8 * v423));
        uint64_t v436 = v435;
        if (v434 == static String._unconditionallyBridgeFromObjectiveC(_:)(v420) && v436 == v437) {
          goto LABEL_250;
        }
        char v439 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if ((v439 & 1) != 0) {
          goto LABEL_251;
        }
        unint64_t v423 = (v423 + 1) & v433;
        unint64_t v424 = v423 >> 6;
        uint64_t v425 = *(void *)&v498[8 * (v423 >> 6)];
        uint64_t v426 = 1LL << v423;
        if ((v425 & (1LL << v423)) != 0)
        {
          id v440 = static String._unconditionallyBridgeFromObjectiveC(_:)(*(void **)(*(void *)(v21 + 48) + 8 * v423));
          uint64_t v442 = v441;
          if (v440 == static String._unconditionallyBridgeFromObjectiveC(_:)(v420) && v442 == v443)
          {
LABEL_250:
            swift_bridgeObjectRelease_n();
          }

          else
          {
            while (1)
            {
              char v444 = _stringCompareWithSmolCheck(_:_:expecting:)();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              if ((v444 & 1) != 0) {
                break;
              }
              unint64_t v423 = (v423 + 1) & v433;
              unint64_t v424 = v423 >> 6;
              uint64_t v425 = *(void *)&v498[8 * (v423 >> 6)];
              uint64_t v426 = 1LL << v423;
              if ((v425 & (1LL << v423)) == 0) {
                goto LABEL_275;
              }
              id v445 = static String._unconditionallyBridgeFromObjectiveC(_:)(*(void **)(*(void *)(v21 + 48) + 8 * v423));
              uint64_t v447 = v446;
              if (v445 == static String._unconditionallyBridgeFromObjectiveC(_:)(v420) && v447 == v448) {
                goto LABEL_250;
              }
            }
          }

            if (v342 == *(void *)(v348 + 88))
            {
              id v360 = (_BYTE *)v263;
              v272 = v260;
              if (v316)
              {
                id v273 = *(void *)(v316 + 24 * ((v335 >> ((4 * *(_BYTE *)(v316 + 18) + 8) & 0x3C)) & 0xF) + 32);
                swift_bridgeObjectRetain();
                swift_bridgeObjectRetain();
              }

              else
              {
                v274 = *(void *)(v348 + 64);
                swift_unknownObjectRetain();
                specialized Rope._Node.subscript.getter(v335, v274);
                id v273 = v275;
                swift_unknownObjectRelease();
              }

              v276 = (*(uint64_t (**)(void, void))(v330[4] + 24LL))(v330[2], v330[4]);
              if (*(void *)(v273 + 16)
                && (id v278 = specialized __RawDictionaryStorage.find<A>(_:)(v276, v277), (v279 & 1) != 0))
              {
                outlined init with copy of AttributedString._AttributeValue( *(void *)(v273 + 56) + 72 * v278,  (uint64_t)&v383);
              }

              else
              {
                v387 = 0LL;
                v385 = 0u;
                v386 = 0u;
                v383 = 0u;
                uint64_t v384 = 0u;
              }

              swift_bridgeObjectRelease();
              if (*((void *)&v384 + 1))
              {
                outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>( (uint64_t)&v383,  (uint64_t)v367);
                __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Hashable & Sendable);
                AssociatedTypeWitness = swift_getAssociatedTypeWitness();
                v281 = v318;
                swift_dynamicCast();
                outlined destroy of AttributedString._AttributeValue((uint64_t)&v383);
                (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 56LL))( v281,  0LL,  1LL,  AssociatedTypeWitness);
              }

              else
              {
                outlined destroy of Any?( (uint64_t)&v383,  &demangling cache variable for type metadata for AttributedString._AttributeValue?);
                v282 = swift_getAssociatedTypeWitness();
                (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v282 - 8) + 56LL))( v318,  1LL,  1LL,  v282);
              }

              Swift::String v283 = (*(uint64_t (**)(void, void))(v330[5] + 24LL))(v330[3], v330[5]);
              if (*(void *)(v273 + 16)
                && (Swift::String v285 = specialized __RawDictionaryStorage.find<A>(_:)(v283, v284), (v286 & 1) != 0))
              {
                outlined init with copy of AttributedString._AttributeValue( *(void *)(v273 + 56) + 72 * v285,  (uint64_t)&v383);
              }

              else
              {
                v387 = 0LL;
                v385 = 0u;
                v386 = 0u;
                v383 = 0u;
                uint64_t v384 = 0u;
              }

              swift_bridgeObjectRelease();
              if (*((void *)&v384 + 1))
              {
                outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>( (uint64_t)&v383,  (uint64_t)v367);
                __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Hashable & Sendable);
                id v287 = swift_getAssociatedTypeWitness();
                v288 = v319;
                swift_dynamicCast();
                outlined destroy of AttributedString._AttributeValue((uint64_t)&v383);
                (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v287 - 8) + 56LL))( v288,  0LL,  1LL,  v287);
              }

              else
              {
                outlined destroy of Any?( (uint64_t)&v383,  &demangling cache variable for type metadata for AttributedString._AttributeValue?);
                v289 = swift_getAssociatedTypeWitness();
                (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v289 - 8) + 56LL))( v319,  1LL,  1LL,  v289);
              }

              uint64_t v290 = v315;
              swift_bridgeObjectRelease();
              uint64_t result = swift_bridgeObjectRelease();
              if (v259 >> 10 >= v327 >> 10)
              {
                unint64_t v291 = v317;
                *id v317 = v327;
                v292 = v333;
                v291[1] = v328;
                v291[2] = v292;
                v291[3] = (unint64_t)v290;
                v291[4] = v259;
                v291[5] = v272;
                v291[6] = v262;
                v291[7] = (unint64_t)v360;
                return result;
              }

                if (v362 == *(void *)(v367 + 88))
                {
                  if (v270)
                  {
                    v271 = *(void *)(v270 + 24 * ((v353 >> ((4 * *(_BYTE *)(v270 + 18) + 8) & 0x3C)) & 0xF) + 32);
                    swift_bridgeObjectRetain();
                    swift_bridgeObjectRetain();
                  }

                  else
                  {
                    v272 = *(void *)(v367 + 64);
                    swift_unknownObjectRetain();
                    specialized Rope._Node.subscript.getter(v353, v272);
                    v271 = v273;
                    swift_unknownObjectRelease();
                  }

                  v274 = (*(uint64_t (**)(void, void))(v369[7] + 24LL))(v369[2], v369[7]);
                  if (*(void *)(v271 + 16)
                    && (v276 = specialized __RawDictionaryStorage.find<A>(_:)(v274, v275), (v277 & 1) != 0))
                  {
                    outlined init with copy of AttributedString._AttributeValue( *(void *)(v271 + 56) + 72 * v276,  (uint64_t)&v404);
                  }

                  else
                  {
                    uint64_t v408 = 0LL;
                    uint64_t v406 = 0u;
                    uint64_t v407 = 0u;
                    char v404 = 0u;
                    uint64_t v405 = 0u;
                  }

                  swift_bridgeObjectRelease();
                  if (*((void *)&v405 + 1))
                  {
                    outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>( (uint64_t)&v404,  (uint64_t)v388);
                    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Hashable & Sendable);
                    AssociatedTypeWitness = swift_getAssociatedTypeWitness();
                    v279 = v334;
                    swift_dynamicCast();
                    outlined destroy of AttributedString._AttributeValue((uint64_t)&v404);
                    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8)
                                                                              + 56LL))( v279,  0LL,  1LL,  AssociatedTypeWitness);
                  }

                  else
                  {
                    outlined destroy of Any?( (uint64_t)&v404,  &demangling cache variable for type metadata for AttributedString._AttributeValue?);
                    id v280 = swift_getAssociatedTypeWitness();
                    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v280 - 8) + 56LL))( v334,  1LL,  1LL,  v280);
                  }

                  v281 = (*(uint64_t (**)(void, void))(v369[8] + 24LL))(v369[3], v369[8]);
                  if (*(void *)(v271 + 16)
                    && (Swift::String v283 = specialized __RawDictionaryStorage.find<A>(_:)(v281, v282), (v284 & 1) != 0))
                  {
                    outlined init with copy of AttributedString._AttributeValue( *(void *)(v271 + 56) + 72 * v283,  (uint64_t)&v404);
                  }

                  else
                  {
                    uint64_t v408 = 0LL;
                    uint64_t v406 = 0u;
                    uint64_t v407 = 0u;
                    char v404 = 0u;
                    uint64_t v405 = 0u;
                  }

                  swift_bridgeObjectRelease();
                  if (*((void *)&v405 + 1))
                  {
                    outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>( (uint64_t)&v404,  (uint64_t)v388);
                    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Hashable & Sendable);
                    Swift::String v285 = swift_getAssociatedTypeWitness();
                    v286 = v335;
                    swift_dynamicCast();
                    outlined destroy of AttributedString._AttributeValue((uint64_t)&v404);
                    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v285 - 8) + 56LL))( v286,  0LL,  1LL,  v285);
                  }

                  else
                  {
                    outlined destroy of Any?( (uint64_t)&v404,  &demangling cache variable for type metadata for AttributedString._AttributeValue?);
                    id v287 = swift_getAssociatedTypeWitness();
                    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v287 - 8) + 56LL))( v335,  1LL,  1LL,  v287);
                  }

                  v288 = (*(uint64_t (**)(void, void))(v369[9] + 24LL))(v369[4], v369[9]);
                  if (*(void *)(v271 + 16)
                    && (uint64_t v290 = specialized __RawDictionaryStorage.find<A>(_:)(v288, v289), (v291 & 1) != 0))
                  {
                    outlined init with copy of AttributedString._AttributeValue( *(void *)(v271 + 56) + 72 * v290,  (uint64_t)&v404);
                  }

                  else
                  {
                    uint64_t v408 = 0LL;
                    uint64_t v406 = 0u;
                    uint64_t v407 = 0u;
                    char v404 = 0u;
                    uint64_t v405 = 0u;
                  }

                  swift_bridgeObjectRelease();
                  if (*((void *)&v405 + 1))
                  {
                    outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>( (uint64_t)&v404,  (uint64_t)v388);
                    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Hashable & Sendable);
                    v292 = swift_getAssociatedTypeWitness();
                    v293 = v336;
                    swift_dynamicCast();
                    outlined destroy of AttributedString._AttributeValue((uint64_t)&v404);
                    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v292 - 8) + 56LL))( v293,  0LL,  1LL,  v292);
                  }

                  else
                  {
                    outlined destroy of Any?( (uint64_t)&v404,  &demangling cache variable for type metadata for AttributedString._AttributeValue?);
                    id v294 = swift_getAssociatedTypeWitness();
                    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v294 - 8) + 56LL))( v336,  1LL,  1LL,  v294);
                  }

                  char v295 = (*(uint64_t (**)(void, void))(v369[10] + 24LL))(v369[5], v369[10]);
                  if (*(void *)(v271 + 16)
                    && (v297 = specialized __RawDictionaryStorage.find<A>(_:)(v295, v296), (v298 & 1) != 0))
                  {
                    outlined init with copy of AttributedString._AttributeValue( *(void *)(v271 + 56) + 72 * v297,  (uint64_t)&v404);
                  }

                  else
                  {
                    uint64_t v408 = 0LL;
                    uint64_t v406 = 0u;
                    uint64_t v407 = 0u;
                    char v404 = 0u;
                    uint64_t v405 = 0u;
                  }

                  swift_bridgeObjectRelease();
                  if (*((void *)&v405 + 1))
                  {
                    outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>( (uint64_t)&v404,  (uint64_t)v388);
                    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Hashable & Sendable);
                    v299 = swift_getAssociatedTypeWitness();
                    int v300 = v337;
                    swift_dynamicCast();
                    outlined destroy of AttributedString._AttributeValue((uint64_t)&v404);
                    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v299 - 8) + 56LL))( v300,  0LL,  1LL,  v299);
                  }

                  else
                  {
                    outlined destroy of Any?( (uint64_t)&v404,  &demangling cache variable for type metadata for AttributedString._AttributeValue?);
                    Swift::String v301 = swift_getAssociatedTypeWitness();
                    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v301 - 8) + 56LL))( v337,  1LL,  1LL,  v301);
                  }

                  uint64_t v302 = (*(uint64_t (**)(void, void))(v369[11] + 24LL))(v369[6], v369[11]);
                  if (*(void *)(v271 + 16)
                    && (uint64_t v304 = specialized __RawDictionaryStorage.find<A>(_:)(v302, v303), (v305 & 1) != 0))
                  {
                    outlined init with copy of AttributedString._AttributeValue( *(void *)(v271 + 56) + 72 * v304,  (uint64_t)&v404);
                  }

                  else
                  {
                    uint64_t v408 = 0LL;
                    uint64_t v406 = 0u;
                    uint64_t v407 = 0u;
                    char v404 = 0u;
                    uint64_t v405 = 0u;
                  }

                  swift_bridgeObjectRelease();
                  if (*((void *)&v405 + 1))
                  {
                    outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>( (uint64_t)&v404,  (uint64_t)v388);
                    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Hashable & Sendable);
                    unint64_t v306 = swift_getAssociatedTypeWitness();
                    uint64_t v307 = v338;
                    swift_dynamicCast();
                    outlined destroy of AttributedString._AttributeValue((uint64_t)&v404);
                    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v306 - 8) + 56LL))( v307,  0LL,  1LL,  v306);
                  }

                  else
                  {
                    outlined destroy of Any?( (uint64_t)&v404,  &demangling cache variable for type metadata for AttributedString._AttributeValue?);
                    uint64_t v308 = swift_getAssociatedTypeWitness();
                    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v308 - 8) + 56LL))( v338,  1LL,  1LL,  v308);
                  }

                  swift_bridgeObjectRelease();
                  uint64_t result = swift_bridgeObjectRelease();
                  v309 = v347;
                  v310 = v348;
                  if (v257 >> 10 >= v346 >> 10)
                  {
                    v311 = v333;
                    char *v333 = v346;
                    v311[1] = v351;
                    v311[2] = v310;
                    v311[3] = v309;
                    v311[4] = v257;
                    v311[5] = v381;
                    v311[6] = v259;
                    v311[7] = v260;
                    return result;
                  }

LABEL_251:
          continue;
        }
      }
    }

                      v272 = MEMORY[0x18961AFF0];
                      goto LABEL_254;
                    }

        Swift::String v141 = 256LL;
      }

      __break(1u);
      goto LABEL_252;
    }
  }

                      v279 = MEMORY[0x18961AFF0];
                      goto LABEL_254;
                    }

                        id v15 = (v128 - 1) & v128;
                        id v126 = __clz(__rbit64(v128)) + (v124 << 6);
LABEL_252:
                        Swift::String v130 = (int64_t *)(*(void *)(v267 + 48) + 16 * v126);
                        uint64_t v5 = *v130;
                        uint64_t v131 = v130[1];
                        swift_bridgeObjectRetain();
                        AttributedString._AttributeStorage.subscript.getter(v5, v131, v267, (uint64_t)&v276);
                        if (!*((void *)&v277 + 1)) {
                          break;
                        }
                        char v127 = *((void *)&v278 + 1);
                        uint64_t v10 = v279;
                        outlined copy of AttributedString.AttributeRunBoundaries?(*((uint64_t *)&v278 + 1), v279);
                        outlined destroy of AttributedString._AttributeValue((uint64_t)&v276);
                        if (v10 == 1) {
                          goto LABEL_237;
                        }
                        *(void *)&v276 = v127;
                        *((void *)&v276 + 1) = v10;
                        *(void *)&v272 = v268;
                        *((void *)&v272 + 1) = v9;
                        swift_bridgeObjectRetain();
                        outlined copy of AttributedString.AttributeRunBoundaries?(v127, v10);
                        uint64_t v132 = specialized static AttributedString.AttributeRunBoundaries.== infix(_:_:)(&v276, &v272);
                        swift_bridgeObjectRelease();
                        swift_bridgeObjectRelease();
                        outlined consume of AttributedString.AttributeRunBoundaries?(v127, v10);
                        if ((v132 & 1) == 0) {
                          goto LABEL_238;
                        }
                        AttributedString._AttributeStorage.subscript.getter(v5, v131, v267, (uint64_t)&v276);
                        specialized AttributedString._AttributeStorage.subscript.setter((uint64_t)&v276, v5, v131);
                        uint64_t result = swift_bridgeObjectRelease();
                        uint64_t v47 = 1LL;
                        Swift::String v247 = 1;
                        if (v15) {
                          goto LABEL_235;
                        }
                      }

                      outlined destroy of Any?( (uint64_t)&v276,  &demangling cache variable for type metadata for AttributedString._AttributeValue?);
                      char v127 = 0LL;
LABEL_237:
                      swift_bridgeObjectRetain();
                      outlined consume of AttributedString.AttributeRunBoundaries?(v127, 1LL);
                      outlined consume of AttributedString.AttributeRunBoundaries?(v268, v9);
LABEL_238:
                      uint64_t result = swift_bridgeObjectRelease();
                      if (v15) {
                        goto LABEL_235;
                      }
                      goto LABEL_239;
                    }

                    Swift::Int v113 = *(void *)(v257 + 8 * v114);
                    if (!v113)
                    {
                      while (1)
                      {
                        id v15 = v114 + 1;
                        if (__OFADD__(v114, 1LL)) {
                          break;
                        }
                        if (v15 >= v261) {
                          goto LABEL_231;
                        }
                        Swift::Int v113 = *(void *)(v257 + 8 * v15);
                        ++v114;
                        if (v113) {
                          goto LABEL_218;
                        }
                      }

LABEL_275:
    *(void *)&v498[8 * v424] = v426 | v425;
    *(void *)(*(void *)(v21 + 48) + 8 * v423) = Path;
    uint64_t v450 = *(void *)(v21 + 16);
    BOOL v202 = __OFADD__(v450, 1LL);
    uint64_t v451 = v450 + 1;
    if (v202)
    {
      __break(1u);
      goto LABEL_319;
    }

    *(void *)(v21 + 16) = v451;
  }

  swift_setDeallocating();
  specialized _ContiguousArrayStorage.__deallocating_deinit();
  uint64_t v452 = swift_bridgeObjectRetain();
  specialized _copyCollectionToContiguousArray<A>(_:)(v452);
  swift_release();
  uint64_t v453 = _ContiguousArrayBuffer._asCocoaArray()();
  v508._uint64_t countAndFlagsBits = 0LL;
  uint64_t v116 = (uint64_t)v486;
  id v454 = objc_msgSend(v486, sel_resourceValuesForKeys_error_, v453, &v508);
  swift_unknownObjectRelease();
  v455 = (void *)v508._countAndFlagsBits;
  if (!v454)
  {
    uint64_t v114 = (uint64_t)v499;
    if (v508._countAndFlagsBits)
    {
      id v463 = (id)v508._countAndFlagsBits;
      swift_willThrow();
      swift_release();

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v10 = 0LL;
      Swift::Int v113 = (Swift::Int)v500;
      a4 = v497;
      uint64_t v21 = v489;
      id v115 = v487;
      goto LABEL_68;
    }

    a4 = v497;
    id v115 = v487;
    if (one-time initialization token for _nilObjCError != -1) {
      swift_once();
    }
    v466 = (void *)_nilObjCError;
    id v467 = (id)_nilObjCError;
    swift_willThrow();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

    swift_release();
    goto LABEL_296;
  }

  v456 = (void *)specialized static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v454);
  id v457 = v455;

  v510._uint64_t countAndFlagsBits = v480;
  v510._unint64_t object = v485;
  URLResourceValues.parentDirectory.getter(&v508);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v459 = (void *)v508._countAndFlagsBits;
  v458 = v508._object;
  uint64_t v460 = v509;
  id Path = v456;
  id v505 = v456;
  uint64_t v506 = v21;
  URLResourceValues.parentDirectory.getter(&v510);
  v461 = (void *)v510._countAndFlagsBits;
  uint64_t v114 = (uint64_t)v499;
  if (!v459)
  {
    if (!v510._countAndFlagsBits) {
      goto LABEL_290;
    }
LABEL_287:
    outlined consume of URL?(v459);
    outlined consume of URL?(v461);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    Swift::Int v113 = (Swift::Int)v500;
    goto LABEL_67;
  }

  id v505 = v459;
  uint64_t v506 = (uint64_t)v458;
  uint64_t v507 = v460;
  if (!v510._countAndFlagsBits) {
    goto LABEL_287;
  }
  Swift::String v503 = v510;
  uint64_t v504 = v511;
  outlined copy of URL?((uint64_t)v459);
  LODWORD(v498) = specialized static URL.== infix(_:_:)((uint64_t)&v505, &v503._countAndFlagsBits);
  outlined consume of URL?(v461);

  swift_release();
  swift_release();
  outlined consume of URL?(v459);
  if ((v498 & 1) == 0)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_66;
  }

                __break(1u);
                goto LABEL_276;
              }

              unsigned __int8 v35 = v54;
            }
          }
        }

        swift_bridgeObjectRetain();
        specialized CocoaError.init<A>(_:path:underlying:variant:source:destination:)( (uint64_t (*)(void))v185,  a2,  v187,  v23,  0LL,  0LL,  0LL,  0LL,  &v189,  0LL,  0LL);
        swift_willThrow();
        if (!v13) {
          goto LABEL_277;
        }
        goto LABEL_276;
    }
  }

  swift_release_n();
LABEL_33:
  id v34 = 0LL;
  uint64_t v183 = 0LL;
  id v178 = 1;
LABEL_34:
  id v180 = (void (__cdecl *)())v34;
  v177 = (char)v23;
  if (*(void *)(a8 + 16))
  {
    unsigned __int8 v35 = @"NSFileOwnerAccountName";
    id v36 = specialized __RawDictionaryStorage.find<A>(_:)(v35);
    if ((v37 & 1) != 0) {
      outlined init with copy of Any(*(void *)(a8 + 56) + 32 * v36, (uint64_t)&v189);
    }
    else {
      memset(&v189, 0, 32);
    }

    if (v189.f_bavail)
    {
      id v38 = swift_dynamicCast();
      if (v38) {
        __darwin_ino64_t v39 = v198;
      }
      else {
        __darwin_ino64_t v39 = 0.0;
      }
      if (v38) {
        __darwin_ino64_t v40 = v199;
      }
      else {
        __darwin_ino64_t v40 = 0LL;
      }
      goto LABEL_47;
    }
  }

  else
  {
    memset(&v189, 0, 32);
  }

  outlined destroy of Any?((uint64_t)&v189, &demangling cache variable for type metadata for Any?);
  __darwin_ino64_t v39 = 0.0;
  __darwin_ino64_t v40 = 0LL;
LABEL_47:
  v181 = v16;
  if (*(void *)(a8 + 16))
  {
    Swift::String v41 = @"NSFileOwnerAccountID";
    Swift::String v42 = specialized __RawDictionaryStorage.find<A>(_:)(v41);
    if ((v43 & 1) != 0) {
      outlined init with copy of Any(*(void *)(a8 + 56) + 32 * v42, (uint64_t)&v189);
    }
    else {
      memset(&v189, 0, 32);
    }
  }

  else
  {
    memset(&v189, 0, 32);
  }

  id v44 = (unint64_t)specialized _readFileAttributePrimitive<A>(_:as:)((uint64_t)&v189);
  uint64_t v46 = v45;
  outlined destroy of Any?((uint64_t)&v189, &demangling cache variable for type metadata for Any?);
  if (!*(void *)(a8 + 16))
  {
    memset(&v189, 0, 32);
LABEL_62:
    outlined destroy of Any?((uint64_t)&v189, &demangling cache variable for type metadata for Any?);
    unint64_t v51 = 0.0;
    unint64_t v52 = 0LL;
    goto LABEL_63;
  }

  uint64_t v47 = @"NSFileGroupOwnerAccountName";
  uint64_t v48 = specialized __RawDictionaryStorage.find<A>(_:)(v47);
  if ((v49 & 1) != 0) {
    outlined init with copy of Any(*(void *)(a8 + 56) + 32 * v48, (uint64_t)&v189);
  }
  else {
    memset(&v189, 0, 32);
  }

  if (!v189.f_bavail) {
    goto LABEL_62;
  }
  unint64_t v50 = swift_dynamicCast();
  unint64_t v51 = v198;
  if (v50)
  {
    unint64_t v52 = v199;
  }

  else
  {
    unint64_t v51 = 0.0;
    unint64_t v52 = 0LL;
  }

    uint64_t v10 = v213;
    uint64_t v4 = v214;
    if (v18 >= v20)
    {
      v161 = *v201;
      if (i == v20)
      {
        uint64_t v10 = v19[11];
        if (v161)
        {
          uint64_t v162 = v19[10];
          if (v162 < i) {
            goto LABEL_436;
          }
          v208 = v19[9];
          v163 = *(unsigned __int8 *)(v161 + 18);
          if (!*(_WORD *)(v161 + 16) || v162 <= i)
          {
            id v13 = ((-15LL << ((4 * v163 + 8) & 0x3C)) - 1) & v163 | ((unint64_t)*(unsigned __int16 *)(v161 + 16) << ((4 * v163 + 8) & 0x3C));
            swift_unknownObjectRetain();
            uint64_t v21 = 0LL;
            Swift::String v22 = 0LL;
LABEL_16:
            swift_unknownObjectRetain();
            Swift::String v200 = specialized Rope._Node.distanceFromStart<A>(to:in:)(v10, v13, v22, v161, v208);
            uint64_t result = (void *)swift_unknownObjectRelease_n();
            uint64_t v4 = v22;
            goto LABEL_17;
          }

          if (*(_BYTE *)(v161 + 18))
          {
            uint64_t result = (void *)swift_unknownObjectRetain_n();
            uint64_t v21 = i;
            char v164 = v161;
            while (1)
            {
              uint64_t v166 = *(unsigned __int16 *)(v164 + 16);
              if (!*(_WORD *)(v164 + 16)) {
                goto LABEL_284;
              }
              unint64_t v167 = *(void *)(v164 + 40);
              unint64_t v168 = v21 - v167;
              if (__OFSUB__(v21, v167)) {
                goto LABEL_412;
              }
              if (__OFADD__(v168, 1LL)) {
                goto LABEL_413;
              }
              if (v168 + 1 <= 0)
              {
                uint64_t v166 = 0LL;
              }

              else
              {
                if ((_DWORD)v166 == 1)
                {
                  v21 -= v167;
                  goto LABEL_284;
                }

                uint64_t v169 = *(void *)(v164 + 64);
                int v23 = __OFSUB__(v168, v169);
                uint64_t v170 = v168 - v169;
                if (v23) {
                  goto LABEL_422;
                }
                if (__OFADD__(v170, 1LL)) {
                  goto LABEL_423;
                }
                if (v170 + 1 < 1)
                {
                  uint64_t v166 = 1LL;
                  uint64_t v21 = v168;
                }

                else
                {
                  if ((_DWORD)v166 == 2)
                  {
                    uint64_t v21 = v170;
LABEL_284:
                    if (v21) {
                      goto LABEL_410;
                    }
                    goto LABEL_285;
                  }

                  Swift::Int v171 = (void *)(v164 + 88);
                  uint64_t v172 = 2LL;
                  while (1)
                  {
                    if (v166 == v172) {
                      goto LABEL_396;
                    }
                    uint64_t v21 = v170 - *v171;
                    if (__OFSUB__(v170, *v171)) {
                      goto LABEL_397;
                    }
                    if (__OFADD__(v21, 1LL)) {
                      goto LABEL_398;
                    }
                    if (v21 + 1 < 1) {
                      break;
                    }
                    ++v172;
                    v171 += 3;
                    uint64_t v170 = v21;
                    if (v166 == v172) {
                      goto LABEL_284;
                    }
                  }

                  uint64_t v166 = v172;
                  uint64_t v21 = v170;
                }
              }

                      __break(1u);
LABEL_276:
                      __break(1u);
LABEL_277:
                      __break(1u);
LABEL_278:
                      __break(1u);
                      goto LABEL_279;
                    }

                    goto LABEL_209;
                  }

                  id v97 = 1LL;
                  unint64_t v85 = v99;
LABEL_223:
                  swift_unknownObjectRelease();
                  swift_unknownObjectRelease();
                  uint64_t v12 = v84 & 0xFFFFFFFFFFFFF0FFLL | (v97 << 8);
                  uint64_t v83 = v114;
LABEL_224:
                  swift_unknownObjectRetain();
                  id v15 = specialized Rope._Node.distanceFromStart<A>(to:in:)(v35, v12, v13, v81, v83);
                  swift_release();
                  swift_unknownObjectRelease_n();
                  uint64_t v10 = a5;
                  goto LABEL_225;
                }
              }

              else
              {
LABEL_209:
                uint64_t v99 = v85;
              }

LABEL_290:
  uint64_t v464 = (uint64_t)Path;
  v508._uint64_t countAndFlagsBits = (uint64_t)Path;
  v508._unint64_t object = (void *)v21;
  char v465 = URLResourceValues.volumeSupportsCasePreservedNames.getter();
  if (v465 == 2)
  {
    __break(1u);
LABEL_324:
    __break(1u);
    return;
  }

  a4 = v497;
  uint64_t v10 = v494;
  uint64_t v116 = (uint64_t)v486;
  id v115 = v487;
  if ((v465 & 1) == 0)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    Swift::Int v113 = (Swift::Int)v500;
    uint64_t v21 = v489;
    goto LABEL_303;
  }

  v508._uint64_t countAndFlagsBits = v464;
  v508._unint64_t object = (void *)v21;
  char v468 = URLResourceValues.volumeSupportsCaseSensitiveNames.getter();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v468 == 2) {
    goto LABEL_324;
  }
  uint64_t v21 = v489;
  if ((v468 & 1) != 0)
  {
    Swift::Int v113 = (Swift::Int)v500;
LABEL_303:
    uint64_t v114 = (uint64_t)v499;
LABEL_68:
    v508._uint64_t countAndFlagsBits = (uint64_t)v115;
    v508._unint64_t object = (void *)v114;
    uint64_t v509 = v21;
    v510._uint64_t countAndFlagsBits = v116;
    v510._unint64_t object = (void *)v113;
    uint64_t v511 = a4;
    static CocoaError.moveFileError(_:_:_:)( 17,  (uint64_t)&v508,  (void **)&v510,  (void *(*)(void *__return_ptr, void *, uint64_t))&v505);
    id v117 = v505;
    uint64_t v118 = String.init(cString:)();
    unint64_t v120 = v119;
    uint64_t v121 = String.init(cString:)();
    LOBYTE(v118) = NSFileManager._shouldProceedAfter(error:copyingItemAtPath:to:)( v117,  v118,  v120,  v121,  v122,  (SEL *)&selRef_fileManager_shouldProceedAfterError_movingItemAtURL_toURL_,  (SEL *)&selRef_fileManager_shouldProceedAfterError_movingItemAtPath_toPath_);

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v118 & 1) != 0)
    {

      int v23 = 1;
      goto LABEL_70;
    }

  __break(1u);
  return result;
}

  if (v25 != -1)
  {
    if (v129[53])
    {
      if (v25 == 12) {
        uint64_t v104 = 0LL;
      }
      else {
        uint64_t v104 = v25;
      }
      if (!v73) {
        goto LABEL_310;
      }
    }

    else
    {
      if (v129[54]) {
        uint64_t v105 = v25 < 12;
      }
      else {
        uint64_t v105 = 0;
      }
      if (v105) {
        uint64_t v104 = v25 + 12;
      }
      else {
        uint64_t v104 = v25;
      }
      if (!v73) {
        goto LABEL_310;
      }
    }

LABEL_218:
    swift_willThrow();
    return;
  }

  int v23 = 0;
LABEL_70:
  id v24 = v496;
  Swift::String v22 = v488;
LABEL_71:
  int v123 = rename(v24, v22);
  int v124 = MEMORY[0x186E1B0E8]();
  char v125 = v10;
  if (!v123) {
    return;
  }
  uint64_t v497 = a4;
  if (v124 != 18)
  {
    id v142 = v492;
    uint64_t v143 = v499;
    v508._uint64_t countAndFlagsBits = (uint64_t)v492;
    v508._unint64_t object = v499;
    uint64_t v509 = v21;
    v510._uint64_t countAndFlagsBits = (uint64_t)v495;
    v510._unint64_t object = v500;
    uint64_t v511 = a4;
    static CocoaError.moveFileError(_:_:_:)( v124,  (uint64_t)&v508,  (void **)&v510,  (void *(*)(void *__return_ptr, void *, uint64_t))&v505);
    id v144 = v505;
    swift_retain();
    v498 = (char *)v144;
    id v145 = v142;
    swift_retain();
    int v146 = _foundation_swift_url_feature_enabled();
    v494 = v10;
    if (!v146)
    {
      id v188 = objc_msgSend(v145, sel__parameterString);
      if (v188)
      {
        v189 = v188;
        uint64_t v190 = a4;
        id v191 = static String._unconditionallyBridgeFromObjectiveC(_:)(v188);
        v193 = v192;

        if (getEnumTag for _DarwinSearchPathsSequence.Iterator.State()
          && (id v194 = objc_msgSend(v145, sel_path)) != 0)
        {
          v195 = v194;
          id v196 = static String._unconditionallyBridgeFromObjectiveC(_:)(v194);
          v198 = v197;

          v508._uint64_t countAndFlagsBits = (uint64_t)v196;
          v508._unint64_t object = v198;
          swift_bridgeObjectRetain();
          v199._uint64_t countAndFlagsBits = 59LL;
          v199._unint64_t object = (void *)0xE100000000000000LL;
          String.append(_:)(v199);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRetain();
          v200._uint64_t countAndFlagsBits = (uint64_t)v191;
          v200._unint64_t object = v193;
          String.append(_:)(v200);
          swift_release();
          swift_release();

          swift_bridgeObjectRelease();
        }

        else
        {
          v508._uint64_t countAndFlagsBits = 59LL;
          v508._unint64_t object = (void *)0xE100000000000000LL;
          v205._uint64_t countAndFlagsBits = (uint64_t)v191;
          v205._unint64_t object = v193;
          String.append(_:)(v205);
          swift_release();
          swift_release();
        }

        swift_bridgeObjectRelease();
        v161 = v508._object;
        id Path = (id)v508._countAndFlagsBits;
        a4 = v190;
      }

      else
      {
        id v210 = objc_msgSend(v145, sel_path);
        if (v210)
        {
          v211 = v210;
          id Path = static String._unconditionallyBridgeFromObjectiveC(_:)(v210);
          v161 = v212;
          swift_release();
          swift_release();
        }

        else
        {
          swift_release();
          swift_release();

          id Path = 0LL;
          v161 = (void *)0xE000000000000000LL;
        }
      }

      v209 = (4 * *(_BYTE *)(v2 + 18) + 8) & 0x3C;
      __darwin_ino64_t v40 = ((-15LL << v209) - 1) & v40 | (v210 << v209);
      uint64_t v19 = *(void *)(v2 + 24 + 24 * v210);
      swift_unknownObjectRetain();
      uint64_t result = swift_unknownObjectRelease();
      unint64_t v2 = v19;
      if (!*(_BYTE *)(v19 + 18)) {
        goto LABEL_327;
      }
    }
  }

  id v353 = v324 >> 11;
  uint64_t v10 = *(void *)(v3 + 64);
  unint64_t v2 = *(void *)(v3 + 80);
  if (v10) {
    id v34 = *(void *)(v3 + 80);
  }
  else {
    id v34 = 0LL;
  }
  if (v34 < v31) {
    goto LABEL_402;
  }
  unsigned __int8 v35 = *(void *)(v3 + 72);
  id v15 = *(void *)(v3 + 88);
  unint64_t v332 = v324 >> 11;
  v344 = v32;
  if (!v10) {
    goto LABEL_38;
  }
  if (*(_WORD *)(v10 + 16)) {
    id v36 = v31 < v2;
  }
  else {
    id v36 = 0;
  }
  if (!v36)
  {
    swift_unknownObjectRetain();
LABEL_38:
    id v37 = swift_unknownObjectRetain();
    id v38 = specialized Rope._endPath.getter(v37);
    swift_unknownObjectRelease();
    __darwin_ino64_t v39 = 0LL;
    goto LABEL_80;
  }

  int v336 = *(void *)(v3 + 72);
  uint64_t v341 = *(void **)(v3 + 80);
  uint64_t v5 = *(unsigned __int8 *)(v10 + 18);
  if (*(_BYTE *)(v10 + 18))
  {
    uint64_t result = swift_unknownObjectRetain_n();
    unint64_t v2 = -15LL;
    __darwin_ino64_t v40 = 24LL;
    id v13 = v31;
    unint64_t v50 = v10;
    while (1)
    {
      unint64_t v51 = *(unsigned __int16 *)(v50 + 16);
      if (*(_WORD *)(v50 + 16))
      {
        unint64_t v53 = 0LL;
        Swift::Int v54 = (uint64_t *)(v50 + 40);
        while (1)
        {
          unint64_t v55 = *v54;
          v54 += 3;
          uint64_t v56 = v13 - v55;
          if (__OFSUB__(v13, v55))
          {
            __break(1u);
LABEL_358:
            __break(1u);
            goto LABEL_359;
          }

          if (__OFADD__(v56, 1LL)) {
            goto LABEL_358;
          }
          if (v56 + 1 < 1) {
            break;
          }
          ++v53;
          id v13 = v56;
          if (v51 == v53) {
            goto LABEL_71;
          }
        }

        unint64_t v51 = v53;
      }

      else
      {
        uint64_t v56 = v13;
LABEL_71:
        if (v56) {
          goto LABEL_388;
        }
        id v13 = 0LL;
      }

      unint64_t v52 = (4 * *(_BYTE *)(v50 + 18) + 8) & 0x3C;
      uint64_t v5 = ((-15LL << v52) - 1) & v5 | (v51 << v52);
      __darwin_ino64_t v39 = *(void *)(v50 + 24 + 24 * v51);
      swift_unknownObjectRetain();
      uint64_t result = swift_unknownObjectRelease();
      unint64_t v50 = v39;
      if (!*(_BYTE *)(v39 + 18)) {
        goto LABEL_78;
      }
    }
  }

  swift_unknownObjectRetain_n();
  id v13 = v31;
  __darwin_ino64_t v39 = v10;
LABEL_78:
  uint64_t result = specialized Rope._UnsafeHandle.findSlot<A>(at:in:preferEnd:)( v13,  0,  (_WORD *)(v39 + 16),  (uint64_t *)(v39 + 24));
  if (result < 0) {
    goto LABEL_417;
  }
  unint64_t v58 = result;
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  id v38 = v5 & 0xFFFFFFFFFFFFF0FFLL | (v58 << 8);
  unint64_t v2 = (uint64_t)v341;
  unsigned __int8 v35 = v336;
LABEL_80:
  swift_unknownObjectRetain();
  specialized Rope.offset<A>(of:in:)(v15, v38, v39, v10, v35, v2, v15);
  swift_unknownObjectRelease_n();
  uint64_t v59 = *(void *)(v3 + 64);
  uint64_t v60 = *(void *)(v3 + 72);
  unint64_t v2 = *(void *)(v3 + 80);
  uint64_t v61 = *(void *)(v3 + 88);
  swift_unknownObjectRetain();
  specialized Rope.subscript.getter(v15, v38, v39, v59, v60, v2, v61);
  Swift::Int v63 = v62;
  swift_unknownObjectRelease();
  uint64_t v64 = swift_bridgeObjectRetain();
  uint64_t v10 = specialized _NativeDictionary.filter(_:)(v64);
  swift_bridgeObjectRelease_n();
  id v15 = *(void *)(v10 + 16);
  swift_bridgeObjectRetain();
  uint64_t result = Set.init(minimumCapacity:)();
  Swift::String v65 = 0LL;
  *(void *)&Swift::String v365 = result;
  id v66 = 1LL << *(_BYTE *)(v10 + 32);
  uint64_t v46 = -1LL;
  if (v66 < 64) {
    uint64_t v46 = ~(-1LL << v66);
  }
  __darwin_ino64_t v40 = v10 + 64;
  uint64_t v5 = v46 & *(void *)(v10 + 64);
  id v13 = (unint64_t)(v66 + 63) >> 6;
  while (1)
  {
    if (v5)
    {
      uint64_t v67 = __clz(__rbit64(v5));
      v5 &= v5 - 1;
      id v68 = v67 | (v65 << 6);
      goto LABEL_84;
    }

    id v43 = v65 + 1;
    if (__OFADD__(v65, 1LL))
    {
      __break(1u);
LABEL_368:
      __break(1u);
LABEL_369:
      __break(1u);
LABEL_370:
      __break(1u);
LABEL_371:
      unint64_t v2 = v46;
      v208 = v43;
      goto LABEL_372;
    }

    if (v43 >= v13) {
      goto LABEL_104;
    }
    id v70 = *(void *)(v40 + 8 * v43);
    ++v65;
    if (!v70)
    {
      Swift::String v65 = v43 + 1;
      if (v43 + 1 >= v13) {
        goto LABEL_104;
      }
      id v70 = *(void *)(v40 + 8 * v65);
      if (!v70)
      {
        Swift::String v65 = v43 + 2;
        if (v43 + 2 >= v13) {
          goto LABEL_104;
        }
        id v70 = *(void *)(v40 + 8 * v65);
        if (!v70)
        {
          Swift::String v65 = v43 + 3;
          if (v43 + 3 >= v13) {
            goto LABEL_104;
          }
          id v70 = *(void *)(v40 + 8 * v65);
          if (!v70)
          {
            Swift::String v65 = v43 + 4;
            if (v43 + 4 >= v13) {
              goto LABEL_104;
            }
            id v70 = *(void *)(v40 + 8 * v65);
            if (!v70) {
              break;
            }
          }
        }
      }
    }

                      v212 = (4 * *(_BYTE *)(v3 + 18) + 8) & 0x3C;
                      Swift::String v42 = ((-15LL << v212) - 1) & v42 | (v213 << v212);
                      id v43 = *(void *)(v3 + 24 + 24 * v213);
                      swift_unknownObjectRetain();
                      uint64_t result = swift_unknownObjectRelease();
                      unint64_t v3 = v43;
                      if (!*(_BYTE *)(v43 + 18)) {
                        goto LABEL_327;
                      }
                    }
                  }

    swift_release();
    outlined release of DateComponents((uint64_t)__dst);
    swift_release();
    swift_bridgeObjectRelease();
    goto LABEL_219;
  }

  uint64_t v10 = (char *)a1._rawValue + 32;
  swift_bridgeObjectRetain();
  id v11 = 0LL;
  uint64_t v12 = MEMORY[0x18961AFF0];
  v161 = v10;
  while (1)
  {
    id v13 = &v10[16 * v11];
    id v14 = *(void *)v13;
    id v15 = v13[8];
    if ((v15 & 0x80000000) == 0) {
      break;
    }
    id v26 = v15 & 0x7F;
    if (!*(void *)(v12 + 16) || (Swift::String v27 = specialized __RawDictionaryStorage.find<A>(_:)(v26), (v28 & 1) == 0))
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Int>);
      uint64_t v29 = swift_allocObject();
      *(_OWORD *)(v29 + 16) = xmmword_183720D90;
      *(void *)(v29 + 32) = v14;
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      *(void *)&__src[0] = v12;
      unsigned __int8 v35 = specialized __RawDictionaryStorage.find<A>(_:)(v26);
      Swift::String v45 = *(void *)(v12 + 16);
      uint64_t v46 = (v44 & 1) == 0;
      uint64_t v47 = v45 + v46;
      if (!__OFADD__(v45, v46))
      {
        uint64_t v48 = v44;
        if (*(void *)(v12 + 24) < v47)
        {
          specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)( v47,  isUniquelyReferenced_nonNull_native);
          int v23 = *(void *)&__src[0];
          uint64_t v49 = specialized __RawDictionaryStorage.find<A>(_:)(v26);
          if ((v48 & 1) != (v50 & 1)) {
            goto LABEL_239;
          }
          unsigned __int8 v35 = v49;
          uint64_t v10 = v161;
          if ((v48 & 1) != 0) {
            goto LABEL_36;
          }
          goto LABEL_31;
        }

        if ((isUniquelyReferenced_nonNull_native & 1) != 0)
        {
          int v23 = v12;
          uint64_t v10 = v161;
          if ((v44 & 1) != 0) {
            goto LABEL_36;
          }
          goto LABEL_31;
        }

        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<Locale.Weekday, [Int]>);
        id v72 = static _DictionaryStorage.copy(original:)();
        int v23 = v72;
        uint64_t v73 = v12;
        uint64_t v10 = v161;
        if (!*(void *)(v12 + 16)) {
          goto LABEL_111;
        }
        uint64_t v74 = (char *)(v72 + 64);
        Swift::String v75 = (char *)(v12 + 64);
        uint64_t v76 = (unint64_t)((1LL << *(_BYTE *)(v23 + 32)) + 63) >> 6;
        uint64_t v152 = v12 + 64;
        if (v23 != v12 || v74 >= &v75[8 * v76]) {
          memmove(v74, v75, 8 * v76);
        }
        char v77 = 0LL;
        *(void *)(v23 + 16) = *(void *)(v73 + 16);
        uint64_t v78 = 1LL << *(_BYTE *)(v73 + 32);
        if (v78 < 64) {
          uint64_t v79 = ~(-1LL << v78);
        }
        else {
          uint64_t v79 = -1LL;
        }
        uint64_t v80 = v79 & *(void *)(v73 + 64);
        uint64_t v156 = (unint64_t)(v78 + 63) >> 6;
        while (1)
        {
          if (v80)
          {
            char v81 = __clz(__rbit64(v80));
            v80 &= v80 - 1;
            Swift::String v82 = v81 | (v77 << 6);
          }

          else
          {
            uint64_t v84 = v77 + 1;
            if (__OFADD__(v77, 1LL)) {
              goto LABEL_234;
            }
            uint64_t v10 = v161;
            if (v84 >= v156) {
              goto LABEL_111;
            }
            unint64_t v85 = *(void *)(v152 + 8 * v84);
            ++v77;
            if (!v85)
            {
              char v77 = v84 + 1;
              if (v84 + 1 >= v156) {
                goto LABEL_111;
              }
              unint64_t v85 = *(void *)(v152 + 8 * v77);
              if (!v85)
              {
                char v77 = v84 + 2;
                if (v84 + 2 >= v156) {
                  goto LABEL_111;
                }
                unint64_t v85 = *(void *)(v152 + 8 * v77);
                if (!v85)
                {
                  char v77 = v84 + 3;
                  if (v84 + 3 >= v156) {
                    goto LABEL_111;
                  }
                  unint64_t v85 = *(void *)(v152 + 8 * v77);
                  if (!v85)
                  {
                    char v77 = v84 + 4;
                    if (v84 + 4 >= v156) {
                      goto LABEL_111;
                    }
                    unint64_t v85 = *(void *)(v152 + 8 * v77);
                    if (!v85)
                    {
                      char v77 = v84 + 5;
                      if (v84 + 5 >= v156) {
                        goto LABEL_111;
                      }
                      unint64_t v85 = *(void *)(v152 + 8 * v77);
                      if (!v85)
                      {
                        char v77 = v84 + 6;
                        if (v84 + 6 >= v156) {
                          goto LABEL_111;
                        }
                        unint64_t v85 = *(void *)(v152 + 8 * v77);
                        if (!v85)
                        {
                          uint64_t v86 = v84 + 7;
                          if (v86 >= v156) {
                            goto LABEL_111;
                          }
                          unint64_t v85 = *(void *)(v152 + 8 * v86);
                          if (!v85)
                          {
                            uint64_t v10 = v161;
                            while (1)
                            {
                              char v77 = v86 + 1;
                              if (__OFADD__(v86, 1LL)) {
                                goto LABEL_237;
                              }
                              if (v77 >= v156) {
                                break;
                              }
                              unint64_t v85 = *(void *)(v152 + 8 * v77);
                              ++v86;
                              if (v85) {
                                goto LABEL_110;
                              }
                            }

            id v25 = (v113 - 1) & v113;
            uint64_t v112 = __clz(__rbit64(v113)) + (v15 << 6);
          }

          id v115 = (int64_t *)(*(void *)(v10 + 48) + 16 * v112);
          uint64_t v5 = *v115;
          uint64_t v116 = v115[1];
          id v117 = v281;
          swift_bridgeObjectRetain();
          AttributedString._AttributeStorage.subscript.getter(v5, v116, v117, (uint64_t)&v276);
          if (!*((void *)&v277 + 1)) {
            break;
          }
          outlined init with copy of AttributedString._AttributeValue((uint64_t)&v276, (uint64_t)&v272);
          outlined destroy of Any?( (uint64_t)&v276,  &demangling cache variable for type metadata for AttributedString._AttributeValue?);
          uint64_t v118 = v274;
          unint64_t v119 = v275;
          outlined copy of AttributedString.AttributeRunBoundaries?(v274, v275);
          outlined destroy of AttributedString._AttributeValue((uint64_t)&v272);
          if (v119 == 1) {
            goto LABEL_225;
          }
          *(void *)&v276 = v118;
          *((void *)&v276 + 1) = v119;
          *(void *)&v272 = v268;
          *((void *)&v272 + 1) = v9;
          swift_bridgeObjectRetain();
          outlined copy of AttributedString.AttributeRunBoundaries?(v118, v119);
          unint64_t v120 = specialized static AttributedString.AttributeRunBoundaries.== infix(_:_:)(&v276, &v272);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          outlined consume of AttributedString.AttributeRunBoundaries?(v118, v119);
          if ((v120 & 1) == 0) {
            goto LABEL_203;
          }
          AttributedString._AttributeStorage.subscript.getter(v5, v116, v267, (uint64_t)&v276);
          uint64_t v121 = *((void *)&v277 + 1);
          outlined destroy of Any?( (uint64_t)&v276,  &demangling cache variable for type metadata for AttributedString._AttributeValue?);
          if (v121) {
            goto LABEL_203;
          }
          id v280 = 0LL;
          id v278 = 0u;
          v279 = 0u;
          v277 = 0u;
          v276 = 0u;
          specialized AttributedString._AttributeStorage.subscript.setter((uint64_t)&v276, v5, v116);
          uint64_t result = swift_bridgeObjectRelease();
          uint64_t v47 = 1LL;
          Swift::String v247 = 1;
        }

        outlined destroy of Any?( (uint64_t)&v276,  &demangling cache variable for type metadata for AttributedString._AttributeValue?);
        uint64_t v118 = 0LL;
LABEL_225:
        swift_bridgeObjectRetain();
        outlined consume of AttributedString.AttributeRunBoundaries?(v118, 1LL);
        outlined consume of AttributedString.AttributeRunBoundaries?(v268, v9);
LABEL_203:
        uint64_t result = swift_bridgeObjectRelease();
        goto LABEL_204;
      }

      if (v259 != v249[11]) {
        goto LABEL_458;
      }
      if (!*v248) {
        goto LABEL_503;
      }
      specialized Rope._Node._prepareModify(at:)(v55, (uint64_t)&v285);
      v288[0] = v286;
      v276 = v285;
      v277 = v286;
      id v278 = v287;
      outlined release of [String : AttributedString._AttributeValue]((uint64_t)v288);
      uint64_t result = outlined release of [String : AttributedString._AttributeValue]((uint64_t)v288 + 8);
      v277 = MEMORY[0x18961AFF0];
      v249[11] = v259 + 1;
      *(void *)&Swift::String v283 = v259 + 1;
      if (!v249[8]) {
        goto LABEL_504;
      }
      Swift::String v284 = specialized Rope._Node._finalizeModify(_:)(&v272, &v276);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v256 = v10 + 64;
      uint64_t v96 = 1LL << *(_BYTE *)(v10 + 32);
      if (v96 < 64) {
        id v97 = ~(-1LL << v96);
      }
      else {
        id v97 = -1LL;
      }
      id v25 = v97 & *(void *)(v10 + 64);
      uint64_t v260 = (unint64_t)(v96 + 63) >> 6;
      uint64_t result = swift_bridgeObjectRetain();
      v246 = 0;
      id v15 = 0LL;
      while (1)
      {
        if (v25)
        {
          uint64_t v98 = __clz(__rbit64(v25));
          v25 &= v25 - 1;
          uint64_t v99 = v98 | (v15 << 6);
          goto LABEL_187;
        }

        unint64_t v30 = __OFADD__(v15++, 1LL);
        if (v30) {
          goto LABEL_421;
        }
        if (v15 >= v260) {
          break;
        }
        Swift::String v100 = *(void *)(v256 + 8 * v15);
        if (!v100)
        {
          unint64_t v101 = v15 + 1;
          if (v15 + 1 >= v260) {
            break;
          }
          Swift::String v100 = *(void *)(v256 + 8 * v101);
          if (!v100)
          {
            unint64_t v101 = v15 + 2;
            if (v15 + 2 >= v260) {
              break;
            }
            Swift::String v100 = *(void *)(v256 + 8 * v101);
            if (!v100)
            {
              unint64_t v101 = v15 + 3;
              if (v15 + 3 >= v260) {
                break;
              }
              Swift::String v100 = *(void *)(v256 + 8 * v101);
              if (!v100)
              {
                unint64_t v101 = v15 + 4;
                if (v15 + 4 >= v260) {
                  break;
                }
                Swift::String v100 = *(void *)(v256 + 8 * v101);
                if (!v100)
                {
                  while (1)
                  {
                    id v15 = v101 + 1;
                    if (__OFADD__(v101, 1LL)) {
                      break;
                    }
                    if (v15 >= v260) {
                      goto LABEL_261;
                    }
                    Swift::String v100 = *(void *)(v256 + 8 * v15);
                    ++v101;
                    if (v100) {
                      goto LABEL_186;
                    }
                  }

uint64_t specialized closure #1 in static _FileOperations._linkOrCopyFile<A>(_:_:with:delegate:)( char *a1, int a2, char *__source, const char *a4, unint64_t a5, void *a6)
{
  id v315 = a6;
  unint64_t v306 = a5;
  uint64_t v320 = *MEMORY[0x1895F89C0];
  if (!a1) {
    goto LABEL_353;
  }
  uint64_t v7 = v6;
  id v9 = a1;
  size_t v10 = strlcpy(a1, __source, 0x402uLL);
  size_t v313 = 1026 - v10;
  size_t v314 = strlen(a4);
  if (__OFSUB__(1026LL, v10))
  {
    __break(1u);
LABEL_333:
    __break(1u);
LABEL_334:
    __break(1u);
LABEL_335:
    __break(1u);
LABEL_336:
    __break(1u);
LABEL_337:
    __break(1u);
LABEL_338:
    __break(1u);
LABEL_339:
    __break(1u);
LABEL_340:
    __break(1u);
LABEL_341:
    __break(1u);
LABEL_342:
    __break(1u);
LABEL_343:
    __break(1u);
LABEL_344:
    __break(1u);
LABEL_345:
    __break(1u);
LABEL_346:
    __break(1u);
LABEL_347:
    __break(1u);
LABEL_348:
    __break(1u);
LABEL_349:
    __break(1u);
LABEL_350:
    __break(1u);
LABEL_351:
    __break(1u);
LABEL_352:
    __break(1u);
LABEL_353:
    __break(1u);
  }

  type metadata accessor for _FTSSequence.Iterator();
  swift_initStackObject();
  uint64_t v11 = _FTSSequence.Iterator.init(_:_:)(a4, 20);
  uint64_t v12 = _FTSSequence.Iterator.next()();
  if (v15 == 0xFF) {
    return swift_release();
  }
  uint64_t v16 = (FTSENT *)v12;
  uint64_t v17 = v13;
  unint64_t v18 = v14;
  unsigned __int8 v19 = v15;
  unint64_t v310 = HIDWORD(v306);
  Swift::Int v312 = (char *)&v9[v10];
  v305 = @"NSPOSIXErrorDomain";
  if ((v306 & 1) != 0) {
    int v20 = 17694735;
  }
  else {
    int v20 = 917519;
  }
  int v303 = v20;
  uint64_t v298 = MEMORY[0x18961AFC0] + 8LL;
  uint64_t v309 = v11;
  uint64_t v308 = v9;
  while (1)
  {
    if ((v19 & 1) != 0)
    {
      uint64_t v278 = 263LL;
      switch((int)v16)
      {
        case 1:
        case 13:
          uint64_t v278 = 257LL;
          goto LABEL_319;
        case 2:
          uint64_t v278 = 260LL;
          goto LABEL_319;
        case 3:
        case 4:
        case 5:
        case 6:
        case 7:
        case 8:
        case 9:
        case 10:
        case 11:
        case 12:
        case 14:
        case 15:
        case 16:
        case 17:
        case 18:
        case 19:
        case 20:
        case 21:
        case 22:
        case 23:
        case 24:
        case 25:
        case 26:
          goto LABEL_316;
        case 27:
          goto LABEL_319;
        default:
          if ((_DWORD)v16 == 63)
          {
            uint64_t v278 = 258LL;
          }

          else
          {
            if ((_DWORD)v16 == 102)
            {
              v279 = 0LL;
              uint64_t v280 = 256LL;
              goto LABEL_328;
            }

LABEL_280:
      uint64_t v297 = v101;
      uint64_t v311 = v131;
      unint64_t v301 = v130;
      switch(v132)
      {
        case 13:
          goto LABEL_283;
        case 2:
          uint64_t v260 = 4LL;
          goto LABEL_287;
        case 1:
LABEL_283:
          uint64_t v260 = 513LL;
          goto LABEL_287;
        case 63:
          uint64_t v260 = 514LL;
          goto LABEL_287;
      }

      if (v132 <= 29)
      {
        if (v132 != 17)
        {
          uint64_t v260 = 640LL;
          if (v132 == 28) {
            goto LABEL_287;
          }
          goto LABEL_302;
        }

        uint64_t v260 = 516LL;
      }

      else
      {
        if (v132 == 102)
        {
          uint64_t v271 = v99;
          id v264 = 0LL;
          uint64_t v272 = 512LL;
          goto LABEL_293;
        }

        uint64_t v260 = 640LL;
        if (v132 != 69)
        {
          if (v132 == 30)
          {
            uint64_t v260 = 642LL;
            goto LABEL_287;
          }

                swift_bridgeObjectRetain();
                unint64_t v131 = static Array._allocateBufferUninitialized(minimumCapacity:)();
                *(void *)(v131 + 16) = v150;
                bzero((void *)(v131 + 32), 2 * v150);
                goto LABEL_281;
              }

        uint64_t v135 = v140;
        goto LABEL_281;
      }

                        __break(1u);
LABEL_281:
                        __break(1u);
LABEL_282:
                        __break(1u);
LABEL_283:
                        __break(1u);
                      }

                      __break(1u);
                    }

                    a3 = v100 + 1;
                    if (__OFADD__(v100, 1LL)) {
                      goto LABEL_258;
                    }
                    ++v100;
                    --v99;
                    if (v98 + v100 >= v96) {
                      goto LABEL_243;
                    }
                  }

                  id v70 = __OFADD__(i++, 1LL);
                  if (v70) {
                    goto LABEL_279;
                  }
                  v98 += v100 + 1;
LABEL_213:
                  ;
                }

                while (v98 < v96);
                a3 = 0LL;
              }

                        __break(1u);
LABEL_281:
                        __break(1u);
LABEL_282:
                        __break(1u);
LABEL_283:
                        __break(1u);
                      }

                      __break(1u);
                    }

                    a3 = v100 + 1;
                    if (__OFADD__(v100, 1LL)) {
                      goto LABEL_258;
                    }
                    ++v100;
                    --v99;
                    if (v98 + v100 >= v96) {
                      goto LABEL_243;
                    }
                  }

                  id v70 = __OFADD__(i++, 1LL);
                  if (v70) {
                    goto LABEL_279;
                  }
                  v98 += v100 + 1;
LABEL_213:
                  ;
                }

                while (v98 < v96);
                a3 = 0LL;
              }

                        __break(1u);
LABEL_281:
                        __break(1u);
LABEL_282:
                        __break(1u);
LABEL_283:
                        __break(1u);
                      }

                      __break(1u);
                    }

                    a3 = v100 + 1;
                    if (__OFADD__(v100, 1LL)) {
                      goto LABEL_258;
                    }
                    ++v100;
                    --v99;
                    if (v98 + v100 >= v96) {
                      goto LABEL_243;
                    }
                  }

                  id v70 = __OFADD__(i++, 1LL);
                  if (v70) {
                    goto LABEL_279;
                  }
                  v98 += v100 + 1;
LABEL_213:
                  ;
                }

                while (v98 < v96);
                a3 = 0LL;
              }

LABEL_302:
          uint64_t v260 = 512LL;
        }
      }

            __break(1u);
LABEL_303:
            __break(1u);
            goto LABEL_304;
          }

          if (v140 == 13) {
            break;
          }
          a4 = v12 + 1;
          if (__OFADD__(v12, 1LL)) {
            goto LABEL_280;
          }
          ++v12;
          --v40;
          if (v138 + v12 >= v8) {
            goto LABEL_175;
          }
        }

        unint64_t v141 = v138 + v12;
        a4 = v138 + v12 + 1;
        char v137 = v220;
        if (!specialized static Comparable.<= infix(_:_:)(a4, v132)) {
          goto LABEL_171;
        }
LABEL_171:
        uint64_t v71 = __OFADD__(v11++, 1LL);
        if (v71) {
          goto LABEL_303;
        }
        char v138 = v141 + 1;
LABEL_173:
        uint64_t v136 = v217;
      }

      while (v138 < v8);
      a4 = 0LL;
LABEL_175:
      a3 = v223;
      uint64_t v134 = v213;
LABEL_181:
      lazy protocol witness table accessor for type JSONError and conformance JSONError();
      swift_allocError();
      *(void *)char v147 = 0xD000000000000010LL;
      *(void *)(v147 + 8) = 0x80000001839CB4F0LL;
      *(void *)(v147 + 16) = v134;
      *(void *)(v147 + 24) = v11;
      *(void *)(v147 + 32) = a4;
      *(void *)(v147 + 40) = v132 - a3;
      *(_BYTE *)(v147 + 48) = 1;
LABEL_249:
      swift_willThrow();
      return v7;
    case '.':
      uint64_t v130 = (unsigned __int8 *)specialized BufferView.dropFirst(_:)(1LL, v12, v11);
      specialized static JSON5Scanner.validateLeadingDecimal(from:fullSource:)(v130, v131, a3, a4);
      if (!v6) {
        goto LABEL_148;
      }
      return v7;
    case 'I':
      specialized static JSON5Scanner.validateInfinity(from:fullSource:)((char *)v12, v11, a3, a4);
      goto LABEL_142;
    case 'N':
      specialized static JSON5Scanner.validateNaN(from:fullSource:)((char *)v12, v11, a3, a4);
LABEL_142:
      if (v6) {
        return v7;
      }
      BOOL v215 = a4;
      unint64_t v18 = 1;
      goto LABEL_150;
    default:
      goto LABEL_315;
  }

LABEL_287:
      if ((POSIXErrorCode.init(rawValue:)() & 0x100000000LL) != 0)
      {
        id v317 = 0LL;
        unint64_t v318 = 0xE000000000000000LL;
        _StringGuts.grow(_:)(22LL);
        swift_bridgeObjectRelease();
        id v317 = (id)0xD000000000000014LL;
        unint64_t v318 = 0x80000001839C9190LL;
        LODWORD(v319) = v132;
        goto LABEL_366;
      }

      static String._unconditionallyBridgeFromObjectiveC(_:)(v305);
      uint64_t v261 = (int)POSIXErrorCode.rawValue.getter();
      id v262 = objc_allocWithZone((Class)&OBJC_CLASS___NSError);
      uint64_t v263 = String._bridgeToObjectiveCImpl()();
      swift_bridgeObjectRelease();
      id v264 = objc_msgSend(v262, sel_initWithDomain_code_userInfo_, v263, v261, _NativeDictionary.bridged()());
      swift_unknownObjectRelease();
      swift_unknownObjectRelease();
      id v265 = objc_msgSend(v264, sel_domain);
      id v266 = static String._unconditionallyBridgeFromObjectiveC(_:)(v265);
      uint64_t v268 = v267;

      if (v266 == static String._unconditionallyBridgeFromObjectiveC(_:)(v305) && v268 == v269)
      {
        swift_bridgeObjectRelease_n();
      }

      else
      {
        char v270 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if ((v270 & 1) == 0) {
          goto LABEL_345;
        }
      }

      uint64_t v271 = v99;
      unint64_t v97 = (unint64_t)v302;
      uint64_t v130 = v301;
      uint64_t v272 = v260;
      uint64_t v101 = v297;
LABEL_293:
      swift_bridgeObjectRetain();
      id v273 = v304;
      swift_bridgeObjectRetain();
      specialized CocoaError.init<A>(_:path:underlying:variant:source:destination:)( (uint64_t (*)(void))v272,  v130,  v311,  v264,  2037411651LL,  0xE400000000000000LL,  v101,  v97,  (void *(*)(void *__return_ptr, void *, uint64_t))&v317,  v271,  (uint64_t)v273);
      id v274 = v317;
      unsigned __int8 v275 = NSFileManager._shouldProceedAfter(error:copyingItemAtPath:to:)( v274,  v101,  v97,  v271,  (unint64_t)v273,  (SEL *)&selRef_fileManager_shouldProceedAfterError_copyingItemAtURL_toURL_,  (SEL *)&selRef_fileManager_shouldProceedAfterError_copyingItemAtPath_toPath_);

      uint64_t v276 = (uint64_t)v300;
      if ((v275 & 1) != 0)
      {

        outlined consume of _FTSSequence.Element?((uint64_t)v16, v299, v276, v19);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
LABEL_12:
        id v9 = v308;
        goto LABEL_13;
      }

      swift_willThrow();
      swift_release();
      outlined consume of _FTSSequence.Element?((uint64_t)v16, v299, v276, v19);
      swift_bridgeObjectRelease();
      return swift_bridgeObjectRelease();
    case 2u:
    case 5u:
    case 9u:
    case 0xBu:
      goto LABEL_13;
    case 3u:
    case 8u:
      if ((v306 & 1) == 0)
      {
        if (!link(fts_path, v308)) {
          goto LABEL_13;
        }
        Swift::Int32 v55 = MEMORY[0x186E1B0E8]();
        uint64_t v56 = String.init(cString:)();
        uint64_t v16 = v57;
        unint64_t v58 = (uint64_t (*)(void))String.init(cString:)();
        unint64_t v60 = v59;
        swift_bridgeObjectRetain();
        if (v55 == 63)
        {
          swift_bridgeObjectRetain_n();
          swift_bridgeObjectRetain();
          unint64_t Path = String._lastPathComponent.getter((uint64_t)v58, v60);
          unint64_t v63 = v62;
          swift_bridgeObjectRelease();
          int64_t v64 = specialized String.withFileSystemRepresentation<A>(_:)(Path, v63);
          swift_bridgeObjectRelease();
          int64_t v65 = specialized String.withFileSystemRepresentation<A>(_:)((uint64_t)v58, v60);
          swift_bridgeObjectRelease();
          BOOL v67 = v64 > 255 || v65 > 1024;
          BOOL v68 = !v67;
          if (v67) {
            id v69 = v58;
          }
          else {
            id v69 = (uint64_t (*)(void))v56;
          }
          unint64_t v301 = (unint64_t)v69;
          if (v68) {
            id v70 = (unint64_t *)v16;
          }
          else {
            id v70 = (unint64_t *)v60;
          }
          uint64_t v302 = v70;
          swift_bridgeObjectRelease();
          CocoaError.Code.init(fileErrno:reading:)(63, 0);
          uint64_t v71 = v319;
LABEL_105:
          int v300 = v71;
          uint64_t v304 = v58;
          uint64_t v311 = v56;
          if ((POSIXErrorCode.init(rawValue:)() & 0x100000000LL) != 0) {
            goto LABEL_355;
          }
          id v117 = v305;
          static String._unconditionallyBridgeFromObjectiveC(_:)(v305);
          uint64_t v118 = (int)POSIXErrorCode.rawValue.getter();
          id v119 = objc_allocWithZone((Class)&OBJC_CLASS___NSError);
          uint64_t v120 = String._bridgeToObjectiveCImpl()();
          swift_bridgeObjectRelease();
          id v121 = objc_msgSend(v119, sel_initWithDomain_code_userInfo_, v120, v118, _NativeDictionary.bridged()());
          swift_unknownObjectRelease();
          swift_unknownObjectRelease();
          id v122 = objc_msgSend(v121, sel_domain);
          id v123 = static String._unconditionallyBridgeFromObjectiveC(_:)(v122);
          uint64_t v125 = v124;

          if (v123 != static String._unconditionallyBridgeFromObjectiveC(_:)(v117) || v125 != v126)
          {
            char v127 = _stringCompareWithSmolCheck(_:_:expecting:)();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            if ((v127 & 1) == 0) {
              goto LABEL_346;
            }
            goto LABEL_150;
          }

                              __break(1u);
                              goto LABEL_288;
                            }

                            char v148 = __srca + 8;
                          }
                        }
                      }
                    }
                  }
                }
              }

uint64_t specialized closure #1 in static _FileOperations._linkOrCopyFile<A>(_:_:with:delegate:)( char *a1, int a2, char *__source, const char *a4, int a5, void *a6)
{
  id v321 = a6;
  int v313 = a5;
  uint64_t v326 = *MEMORY[0x1895F89C0];
  if (!a1) {
    goto LABEL_345;
  }
  uint64_t v7 = v6;
  id v9 = a1;
  size_t v10 = strlcpy(a1, __source, 0x402uLL);
  size_t v319 = 1026 - v10;
  size_t v320 = strlen(a4);
  if (__OFSUB__(1026LL, v10))
  {
    __break(1u);
LABEL_325:
    __break(1u);
LABEL_326:
    __break(1u);
LABEL_327:
    __break(1u);
LABEL_328:
    __break(1u);
LABEL_329:
    __break(1u);
LABEL_330:
    __break(1u);
LABEL_331:
    __break(1u);
LABEL_332:
    __break(1u);
LABEL_333:
    __break(1u);
LABEL_334:
    __break(1u);
LABEL_335:
    __break(1u);
LABEL_336:
    __break(1u);
LABEL_337:
    __break(1u);
LABEL_338:
    __break(1u);
LABEL_339:
    __break(1u);
LABEL_340:
    __break(1u);
LABEL_341:
    __break(1u);
LABEL_342:
    __break(1u);
LABEL_343:
    __break(1u);
LABEL_344:
    __break(1u);
LABEL_345:
    __break(1u);
  }

  type metadata accessor for _FTSSequence.Iterator();
  swift_initStackObject();
  uint64_t v11 = _FTSSequence.Iterator.init(_:_:)(a4, 20);
  uint64_t v12 = _FTSSequence.Iterator.next()();
  if (v15 == 0xFF) {
    return swift_release();
  }
  uint64_t v16 = (FTSENT *)v12;
  uint64_t v17 = v13;
  unint64_t v18 = v14;
  unsigned __int8 v19 = v15;
  unint64_t v318 = (char *)&v9[v10];
  Swift::Int v312 = @"NSPOSIXErrorDomain";
  if ((v313 & 1) != 0) {
    copyfile_flags_t v20 = 17694735;
  }
  else {
    copyfile_flags_t v20 = 917519;
  }
  copyfile_flags_t v311 = v20;
  uint64_t v306 = MEMORY[0x18961AFC0] + 8LL;
  uint64_t v316 = v11;
  id v315 = v9;
  while (2)
  {
    if ((v19 & 1) != 0)
    {
      uint64_t v284 = 263LL;
      switch((int)v16)
      {
        case 1:
        case 13:
          uint64_t v284 = 257LL;
          goto LABEL_311;
        case 2:
          uint64_t v284 = 260LL;
          goto LABEL_311;
        case 3:
        case 4:
        case 5:
        case 6:
        case 7:
        case 8:
        case 9:
        case 10:
        case 11:
        case 12:
        case 14:
        case 15:
        case 16:
        case 17:
        case 18:
        case 19:
        case 20:
        case 21:
        case 22:
        case 23:
        case 24:
        case 25:
        case 26:
          goto LABEL_308;
        case 27:
          goto LABEL_311;
        default:
          if ((_DWORD)v16 == 63)
          {
            uint64_t v284 = 258LL;
          }

          else
          {
            if ((_DWORD)v16 == 102)
            {
              id v285 = 0LL;
              uint64_t v286 = 256LL;
              goto LABEL_320;
            }

LABEL_311:
          id v321 = (id)v284;
          unint64_t v317 = v17;
          if ((POSIXErrorCode.init(rawValue:)() & 0x100000000LL) != 0) {
            goto LABEL_358;
          }
          id v287 = v312;
          static String._unconditionallyBridgeFromObjectiveC(_:)(v312);
          uint64_t v288 = (int)POSIXErrorCode.rawValue.getter();
          id v289 = objc_allocWithZone((Class)&OBJC_CLASS___NSError);
          uint64_t v290 = String._bridgeToObjectiveCImpl()();
          swift_bridgeObjectRelease();
          id v291 = objc_msgSend(v289, sel_initWithDomain_code_userInfo_, v290, v288, _NativeDictionary.bridged()());
          swift_unknownObjectRelease();
          swift_unknownObjectRelease();
          id v285 = v291;
          id v292 = objc_msgSend(v291, sel_domain);
          id v293 = static String._unconditionallyBridgeFromObjectiveC(_:)(v292);
          uint64_t v295 = v294;

          if (v293 == static String._unconditionallyBridgeFromObjectiveC(_:)(v287) && v295 == v296) {
            goto LABEL_318;
          }
          char v298 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          uint64_t v17 = v317;
          if ((v298 & 1) == 0)
          {
            __break(1u);
LABEL_318:
            swift_bridgeObjectRelease_n();
            uint64_t v17 = v317;
          }

          uint64_t v286 = (uint64_t)v321;
LABEL_320:
          swift_bridgeObjectRetain();
          specialized CocoaError.init<A>(_:path:underlying:variant:source:destination:)( (uint64_t (*)(void))v286,  v17,  v18,  v285,  0LL,  0LL,  0LL,  0LL,  (void *(*)(void *__return_ptr, void *, uint64_t))&v323,  0LL,  0LL);
          swift_willThrow();
          swift_release();
          uint64_t result = outlined consume of _FTSSequence.Element?((uint64_t)v16, v17, v18, v19);
          break;
      }

      return result;
    }

    fts_path = v16->fts_path;
    if (!fts_path) {
      goto LABEL_342;
    }
    strlcpy(v318, &fts_path[v320], v319);
    if (v16->fts_info == 6)
    {
LABEL_8:
      specialized static _FileOperations._safeCopyDirectoryMetadata<A>(src:dst:delegate:extraFlags:)( (uint64_t)fts_path,  (uint64_t)v9,  (uint64_t)v321,  0);
      if (v7) {
        return swift_release();
      }
      goto LABEL_9;
    }

    unint64_t v317 = v17;
    id v25 = v7;
    id v26 = v321;
    uint64_t v27 = String.init(cString:)();
    unint64_t v29 = v28;
    uint64_t v30 = String.init(cString:)();
    LOBYTE(v27) = NSFileManager._shouldCopyItemAtPath(_:to:)( v27,  v29,  v30,  v31,  (SEL *)&selRef_fileManager_shouldLinkItemAtURL_toURL_,  (SEL *)&selRef_fileManager_shouldLinkItemAtPath_toPath_);
    id v314 = v26;

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v27 & 1) == 0)
    {
      if (v16->fts_info == 1)
      {
        id v9 = v315;
        uint64_t v7 = v25;
        if (!*(_BYTE *)(v316 + 40))
        {
          fts_set(*(FTS **)(v316 + 16), v16, 4);
          uint64_t v43 = _FTSSequence.Iterator.next()();
          outlined consume of _FTSSequence.Element?(v43, v44, v45, v46);
        }
      }

      else
      {
LABEL_22:
        id v9 = v315;
        uint64_t v7 = v25;
      }

      goto LABEL_9;
    }

    id v9 = v315;
    uint64_t v7 = v25;
    uint64_t v32 = v317;
    switch(v16->fts_info)
    {
      case 1u:
        if (!copyfile(fts_path, v315, 0LL, 0xE0008u)) {
          goto LABEL_9;
        }
        int v89 = MEMORY[0x186E1B0E8]();
        uint64_t v90 = String.init(cString:)();
        size_t v92 = v91;
        uint64_t v93 = String.init(cString:)();
        LODWORD(v307) = v89;
        unint64_t v310 = (FTSENT *)v94;
        uint64_t v309 = v90;
        uint64_t v308 = (uint64_t *)v93;
        if (v89 != 63)
        {
          swift_bridgeObjectRetain();
          uint64_t v131 = v90;
          size_t v132 = v92;
          size_t v133 = v92;
          goto LABEL_272;
        }

        uint64_t v95 = v93;
        unint64_t v96 = v94;
        if ((v94 & 0x2000000000000000LL) != 0) {
          uint64_t v97 = HIBYTE(v94) & 0xF;
        }
        else {
          uint64_t v97 = v93 & 0xFFFFFFFFFFFFLL;
        }
        size_t v302 = v92;
        uint64_t v98 = v93;
        swift_bridgeObjectRetain_n();
        swift_bridgeObjectRetain_n();
        uint64_t v99 = v95;
        v305 = (uint64_t *)v97;
        if (v97)
        {
          size_t v304 = 4 * v97;
          while (1)
          {
            unint64_t v100 = String.index(before:)();
            id v323 = (id)String.subscript.getter();
            unint64_t v324 = v101;
            char v102 = closure #1 in String._lastPathComponent.getter(&v323);
            swift_bridgeObjectRelease();
            if ((v102 & 1) != 0) {
              break;
            }
            if (v100 < 0x4000)
            {
              uint64_t v98 = v95;
              unint64_t v33 = (unint64_t)v310;
              goto LABEL_228;
            }
          }

          if (v100 >> 14)
          {
            if ((String.index(before:)() ^ v100) >= 0x4000)
            {
              goto LABEL_224;
            }

            unint64_t v186 = String.subscript.getter();
            unint64_t v188 = specialized BidirectionalCollection.lastIndex(where:)(v186, v187);
            char v190 = v189;
            swift_bridgeObjectRelease();
            if ((v190 & 1) == 0)
            {
              unint64_t v191 = String.subscript.getter();
              size_t v304 = specialized BidirectionalCollection.lastIndex(where:)(v191, v192);
              Swift::Int32 v47 = v193;
              swift_bridgeObjectRelease();
              if ((v47 & 1) != 0)
              {
                swift_bridgeObjectRetain();
                uint64_t v233 = specialized Collection.subscript.getter();
                size_t v304 = v234;
                uint64_t v236 = v235;
                uint64_t v238 = v237;
                swift_bridgeObjectRelease();
                uint64_t v98 = MEMORY[0x186E1B940](v233, v304, v236, v238);
                unint64_t v33 = v239;
                goto LABEL_226;
              }

              if (v188 >> 14 >= (unint64_t)String.index(after:)() >> 14)
              {
                swift_bridgeObjectRetain();
                uint64_t v194 = specialized Collection.subscript.getter();
                uint64_t v196 = v195;
                uint64_t v198 = v197;
                uint64_t v200 = v199;
                swift_bridgeObjectRelease();
                uint64_t v98 = MEMORY[0x186E1B940](v194, v196, v198, v200);
                unint64_t v33 = v201;
LABEL_226:
                swift_bridgeObjectRelease();
                goto LABEL_227;
              }

              __break(1u);
LABEL_347:
              id v323 = 0LL;
              unint64_t v324 = 0xE000000000000000LL;
              _StringGuts.grow(_:)(22LL);
              swift_bridgeObjectRelease();
              id v323 = (id)0xD000000000000014LL;
              unint64_t v324 = 0x80000001839C9190LL;
              int v322 = v47;
              while (1)
              {
LABEL_357:
                v300._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
                String.append(_:)(v300);
                swift_bridgeObjectRelease();
                _assertionFailure(_:_:file:line:flags:)();
                __break(1u);
LABEL_358:
                id v323 = 0LL;
                unint64_t v324 = 0xE000000000000000LL;
                _StringGuts.grow(_:)(22LL);
                swift_bridgeObjectRelease();
                id v323 = (id)0xD000000000000014LL;
                unint64_t v324 = 0x80000001839C9190LL;
                LODWORD(v325) = (_DWORD)v16;
              }
            }
          }

          else if (String.count.getter() != 1)
          {
LABEL_224:
            uint64_t v231 = String.subscript.getter();
            uint64_t v98 = MEMORY[0x186E1B940](v231);
            unint64_t v33 = v232;
            swift_bridgeObjectRelease();
LABEL_227:
            swift_bridgeObjectRelease();
            goto LABEL_228;
          }

          swift_bridgeObjectRelease();
          unint64_t v33 = 0xE100000000000000LL;
          uint64_t v98 = 47LL;
        }

        else
        {
          unint64_t v33 = v96;
        }

    __break(1u);
LABEL_312:
    __break(1u);
LABEL_313:
    swift_once();
LABEL_51:
    unint64_t v68 = (void *)static NSAttributedStringKey.formatSpecifierConfiguration;
    *((void *)&v756[1] + 1) = type metadata accessor for NSMorphologyPronoun( 0LL,  &lazy cache variable for type metadata for NSDictionary);
    *(void *)&v756[0] = v67;
    specialized Dictionary.subscript.setter((uint64_t)v756, v68);
LABEL_52:
    unint64_t v69 = objc_allocWithZone((Class)&OBJC_CLASS___NSAttributedString);
    unint64_t v70 = String._bridgeToObjectiveCImpl()();
    type metadata accessor for NSAttributedStringKey(0LL);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( (unint64_t *)&lazy protocol witness table cache variable for type NSAttributedStringKey and conformance NSAttributedStringKey,  (uint64_t (*)(uint64_t))type metadata accessor for NSAttributedStringKey,  (uint64_t)&protocol conformance descriptor for NSAttributedStringKey);
    swift_bridgeObjectRetain();
    v672 = objc_msgSend(v69, sel_initWithString_attributes_, v70, _NativeDictionary.bridged()());
    swift_unknownObjectRelease();
    unint64_t v71 = swift_unknownObjectRelease();
    MEMORY[0x1895F8858](v71);
    v604[2] = v685;
    v604[3] = v684;
    Swift::Int v72 = v642;
    v605 = (_OWORD *)v641;
    v606 = v642;
    v607 = (uint64_t)v682;
    uint64_t v73 = v660;
    id v74 = (char *)_sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySS10FoundationE17LocalizationValueV14FormatArgumentVG_s7CVarArg_p6vararg_AJ15_AttributeFixupOSg11attrStrInfots5NeverOTg5( (void (*)(_OWORD *__return_ptr, uint64_t))partial apply for closure #1 in String.LocalizationValue._formatAttributedString<A>(_:preparedArguments:options:scope:formatConfiguration:locale:),  (uint64_t)v604,  (uint64_t)v687);
    v671 = v73;
    *(void *)&v756[0] = v676;
    *((void *)&v756[0] + 1) = v644;
    LOBYTE(v756[1]) = v653;
    BYTE1(v756[1]) = v648;
    *((void *)&v756[1] + 1) = v675;
    LOBYTE(v756[2]) = (_BYTE)v674;
    BYTE1(v756[2]) = (_BYTE)v19;
    *((void *)&v756[2] + 1) = v30;
    *(void *)&v756[3] = v679;
    BYTE8(v756[3]) = (_BYTE)v678;
    unint64_t v75 = AttributedString.LocalizationOptions._nsOptions.getter();
    uint64_t v77 = v76;
    v679 = (_OWORD *)(v75 | 2);
    unint64_t v78 = swift_getObjectType();
    unint64_t v79 = *(uint64_t (**)(uint64_t, uint64_t))(v72 + 488);
    unint64_t v80 = v77;
    unint64_t v81 = (void *)v79(v78, v72);
    int64_t v82 = *((void *)v74 + 2);
    v673 = v74;
    if (v82)
    {
      v678 = v80;
      v677 = v29;
      *(void *)&v828[0] = MEMORY[0x18961AFE8];
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v82, 0);
      int64_t v83 = (uint64_t)(v74 + 32);
      unint64_t v84 = *(void *)&v828[0];
      BOOL v85 = v82;
      do
      {
        outlined init with copy of (Hashable & Sendable)?( v83,  (uint64_t)v756,  &demangling cache variable for type metadata for (vararg: CVarArg, attrStrInfo: String.LocalizationValue.FormatArgument._AttributeFixup?));
        outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>( (uint64_t)v756,  (uint64_t)v755);
        outlined init with take of any PredicateExpression<Self.Output == B1>(v755, (uint64_t)&v723);
        outlined destroy of Any?( (uint64_t)v756,  &demangling cache variable for type metadata for (vararg: CVarArg, attrStrInfo: String.LocalizationValue.FormatArgument._AttributeFixup?));
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)( 0,  *(void *)(v84 + 16) + 1LL,  1);
          unint64_t v84 = *(void *)&v828[0];
        }

        uint64_t v87 = *(void *)(v84 + 16);
        BOOL v86 = *(void *)(v84 + 24);
        if (v87 >= v86 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)( v86 > 1,  v87 + 1,  1);
          unint64_t v84 = *(void *)&v828[0];
        }

        *(void *)(v84 + 16) = v87 + 1;
        outlined init with take of any PredicateExpression<Self.Output == B1>(&v723, v84 + 40 * v87 + 32);
        v83 += 64LL;
        --v85;
      }

      while (v85);
      unint64_t v80 = v678;
    }

    uint64_t v88 = (void *)objc_opt_self();
    int v89 = getVaList(_:)();
    swift_bridgeObjectRelease();
    uint64_t v90 = v672;
    size_t v91 =  objc_msgSend( v88,  sel__attributedStringWithFormat_attributeOptions_formattingOptions_locale_arguments_,  v672,  v679,  v80,  v81,  v89);

    uint64_t v93 = type metadata accessor for _FoundationPlusScope(0LL, (uint64_t)v685, (uint64_t)v684, v92);
    unint64_t v94 = v91;
    uint64_t v95 = static AttributeScope.scopeDescription.getter( v93,  (unint64_t)&protocol witness table for _FoundationPlusScope<A>);
    swift_bridgeObjectRelease();
    unint64_t v96 = (void *)v671;
    AttributedString.init(_:attributeTable:options:)(v94, (uint64_t)v95, 0LL, v756);
    uint64_t v64 = v658;
    uint64_t v97 = (uint64_t)v682;
    if (v96)
    {
      swift_bridgeObjectRelease();

      swift_bridgeObjectRelease();
      swift_bridgeObjectRetain();
      BigString.init(_:)();
      AttributedString.init(_:attributes:)(v844, MEMORY[0x18961AFF0], MEMORY[0x18961AFF8], (uint64_t *)v756);
      swift_bridgeObjectRelease();

      v660 = 0LL;
      unint64_t v63 = *(_OWORD **)&v756[0];
      unint64_t v40 = v657;
      unint64_t v65 = v97;
    }

    else
    {
      *(void *)&v723 = *(void *)&v756[0];
      unint64_t v100 = MEMORY[0x18961AFE8];
      v660 = 0LL;
      v679 = v94;
      if (v82)
      {
        v678 = v80;
        *(void *)&v828[0] = MEMORY[0x18961AFE8];
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v82, 0);
        unint64_t v101 = v673 + 32;
        unint64_t v100 = *(void *)&v828[0];
        do
        {
          outlined init with copy of (Hashable & Sendable)?( (uint64_t)v101,  (uint64_t)v756,  &demangling cache variable for type metadata for (vararg: CVarArg, attrStrInfo: String.LocalizationValue.FormatArgument._AttributeFixup?));
          outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>( (uint64_t)v756,  (uint64_t)v755);
          char v102 = *((void *)&v756[2] + 1);
          uint64_t v103 = *(void *)&v756[3];
          uint64_t v104 = BYTE8(v756[3]);
          *((void *)&v755[2] + 1) = *((void *)&v756[2] + 1);
          *(void *)&v755[3] = *(void *)&v756[3];
          BYTE8(v755[3]) = BYTE8(v756[3]);
          outlined copy of String.LocalizationValue.FormatArgument._AttributeFixup?( *((uint64_t *)&v756[2] + 1),  *(uint64_t *)&v756[3],  BYTE8(v756[3]));
          __swift_destroy_boxed_opaque_existential_1((uint64_t)v755);
          outlined destroy of Any?( (uint64_t)v756,  &demangling cache variable for type metadata for (vararg: CVarArg, attrStrInfo: String.LocalizationValue.FormatArgument._AttributeFixup?));
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          {
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)( 0,  *(void *)(v100 + 16) + 1LL,  1);
            unint64_t v100 = *(void *)&v828[0];
          }

          uint64_t v106 = *(void *)(v100 + 16);
          uint64_t v105 = *(void *)(v100 + 24);
          if (v106 >= v105 >> 1)
          {
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)( v105 > 1,  v106 + 1,  1);
            unint64_t v100 = *(void *)&v828[0];
          }

          *(void *)(v100 + 16) = v106 + 1;
          char v107 = v100 + 24 * v106;
          *(void *)(v107 + 32) = v102;
          *(void *)(v107 + 40) = v103;
          *(_BYTE *)(v107 + 48) = v104;
          v101 += 64;
          --v82;
        }

        while (v82);
        unint64_t v40 = v657;
        uint64_t v64 = v658;
        unint64_t v65 = (unint64_t)v682;
        uint64_t v90 = v672;
        unint64_t v80 = v678;
      }

      else
      {
        unint64_t v40 = v657;
        unint64_t v65 = (unint64_t)v682;
      }

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      String.LocalizationValue.restoreAttributedStringArguments(_:in:)(v100);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();

      unint64_t v63 = (_OWORD *)v723;
    }
  }

  uint64_t v160 = *(_OWORD *)(v123 + 32);
  v1102[0] = *(_OWORD *)(v123 + 16);
  v1102[1] = v160;
  v1102[2] = *(_OWORD *)(v123 + 48);
  uint64_t v161 = BigString.startIndex.getter();
  char v163 = v162;
  char v165 = v164;
  char v167 = v166;
  BOOL v168 = v1102;
  BOOL v169 = BigString.endIndex.getter();
  if (v169 >> 10 < v161 >> 10)
  {
    __break(1u);
  }

  else
  {
    v658 = (id)v113;
    BOOL v168 = v838;
    v1094 = v161;
    v1095 = v163;
    v1096 = v165;
    v1097 = v167;
    v1098 = v169;
    v1099 = v170;
    v1100 = v171;
    v1101 = v172;
    id v173 = swift_retain();
    AttributedString.Runs.init(_:in:)(v173, v828);
    v841 = v828[10];
    v842 = v828[11];
    v843 = v829;
    v838[6] = v828[6];
    v838[7] = v828[7];
    v840 = v828[9];
    v839 = v828[8];
    v838[2] = v828[2];
    v838[3] = v828[3];
    v838[5] = v828[5];
    v838[4] = v828[4];
    v838[1] = v828[1];
    v838[0] = v828[0];
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
    id v123 = swift_allocObject();
    *(_OWORD *)(v123 + 16) = xmmword_183720D90;
    outlined retain of AttributedString.Runs((uint64_t)v838);
    if (one-time initialization token for name == -1) {
      goto LABEL_129;
    }
  }

  swift_once();
LABEL_129:
  uint64_t v174 = qword_18C5D2C38;
  v677 = v679 + 1;
  *(void *)(v123 + 32) = static AttributeScopes.FoundationAttributes.MarkdownSourcePositionAttribute.name;
  *(void *)(v123 + 40) = v174;
  swift_bridgeObjectRetain();
  outlined release of AttributedString.Runs((uint64_t)v838);
  v672 = (id)*((void *)&v841 + 1);
  v684 = (id)(*((void *)&v841 + 1) >> 10);
  v675 = (__int128 *)((char *)v755 + 8);
  v665 = (__int128 *)((char *)v756 + 8);
  uint64_t v175 = *(_OWORD *)((char *)v168 + 72);
  v666 = (__int128 *)((char *)&v723 + 8);
  id v176 = *(_OWORD *)((char *)v168 + 88);
  v622 = (char *)&v755[4] + 8;
  v623 = &v867;
  v621 = (char *)&v756[4] + 8;
  v834 = v175;
  v835 = v176;
  v632 = v880;
  uint64_t v177 = *(_OWORD *)((char *)v168 + 104);
  id v178 = *(_OWORD *)((char *)v168 + 120);
  v618 = (__int128 *)v738;
  v619 = &v883;
  v836 = v177;
  v837 = v178;
  v629 = &v693;
  v630 = &v705;
  id v179 = *(_OWORD *)((char *)v168 + 8);
  v626 = &v908;
  uint64_t v180 = *(_OWORD *)((char *)v168 + 24);
  v624 = &v911;
  v620 = v653 ^ 1;
  v830 = v179;
  v831 = v180;
  uint64_t v181 = *(_OWORD *)((char *)v168 + 56);
  v832 = *(_OWORD *)((char *)v168 + 40);
  v833 = v181;
  v670 = *(void **)&v838[0];
  v627 = 0x80000001839C8020LL;
  v685 = (_OWORD *)*((void *)&v842 + 1);
  v668 = v842;
  v669 = v843;
  v671 = (const void *)*((void *)&v839 + 1);
  unint64_t v65 = *((void *)&v839 + 1);
  v667 = v840;
  v687 = (void *)*((void *)&v840 + 1);
  v688 = v840;
  v673 = (char *)v841;
  v686 = (id)v841;
  v674 = (void *)v123;
LABEL_132:
  while (2)
  {
    uint64_t v182 = v65 >> 10;
    if ((id)(v65 >> 10) == v684)
    {
      _s10Foundation16AttributedStringV22MarkdownSourcePositionVSg_SnyAC5IndexVGtSgWOi0_((uint64_t)v756);
      outlined init with take of LocalePreferences?( (uint64_t)v756,  (uint64_t)v826,  &demangling cache variable for type metadata for (AttributedString.MarkdownSourcePosition?, Range<AttributedString.Index>)?);
      goto LABEL_136;
    }

    char v183 = v834;
    id v184 = v835;
    unsigned __int8 v185 = v835;
    unint64_t v186 = v666;
    v666[4] = v834;
    v186[5] = v184;
    unint64_t v187 = v836;
    unint64_t v188 = v837;
    char v189 = v837;
    v186[6] = v836;
    v186[7] = v188;
    char v190 = v830;
    unint64_t v191 = v831;
    unint64_t v192 = v831;
    *unint64_t v186 = v830;
    v186[1] = v191;
    Swift::Int32 v193 = v832;
    uint64_t v194 = v833;
    uint64_t v195 = v833;
    v186[2] = v832;
    v186[3] = v194;
    uint64_t v196 = v675;
    v675[4] = v183;
    v196[5] = v185;
    v196[6] = v187;
    v196[7] = v189;
    *uint64_t v196 = v190;
    v196[1] = v192;
    v196[2] = v193;
    v196[3] = v195;
    uint64_t v114 = v670;
    uint64_t v197 = v671;
    *(void *)&v755[0] = v670;
    *((void *)&v755[8] + 1) = v671;
    uint64_t v198 = v667;
    v755[9] = v667;
    uint64_t v199 = v673;
    *(void *)&v755[10] = v673;
    v689 = v65;
    uint64_t v200 = v672;
    *((void *)&v755[10] + 1) = v672;
    unint64_t v201 = v669;
    *(void *)&v755[11] = v668;
    Swift::Int v202 = v668;
    *((void *)&v755[11] + 1) = v685;
    *(void *)&v755[12] = v669;
    v704 = v689;
    *(void *)&v705 = v688;
    *((void *)&v705 + 1) = v687;
    *(void *)&v706 = v686;
    v683 = v182;
    AttributedString.Runs.subscript.getter(&v704, &v737);
    v682 = v737;
    v681 = (id)v738[0];
    v680 = (void *)v738[9];
    uint64_t v203 = v835;
    uint64_t v204 = v665;
    v665[4] = v834;
    v204[5] = v203;
    uint64_t v205 = v837;
    v204[6] = v836;
    v204[7] = v205;
    char v206 = v831;
    *uint64_t v204 = v830;
    v204[1] = v206;
    char v207 = v833;
    v204[2] = v832;
    v204[3] = v207;
    *(void *)&v756[0] = v114;
    *((void *)&v756[8] + 1) = v197;
    v756[9] = v198;
    *(void *)&v756[10] = v199;
    *((void *)&v756[10] + 1) = v200;
    char v208 = v202;
    *(void *)&v756[11] = v202;
    *((void *)&v756[11] + 1) = v685;
    int64_t v209 = v201;
    *(void *)&v756[12] = v201;
    unint64_t v115 = v674;
    *((void *)&v756[12] + 1) = v674;
    uint64_t v210 = MEMORY[0x18961AFE8];
    *(void *)&v756[13] = MEMORY[0x18961AFE8];
    *(void *)&v723 = v114;
    v728 = v197;
    v729 = v198;
    v730 = v199;
    unint64_t v113 = (unint64_t)v687;
    char v211 = v688;
    v731 = v200;
    char v212 = v686;
    char v213 = v689;
    v732 = v208;
    v733 = v685;
    v734 = v209;
    v737 = (void *)v689;
    v738[0] = v688;
    v738[1] = v687;
    v738[2] = v686;
    outlined retain of ReversedCollection<AttributedString.Runs.AttributesSlice1<AttributeScopes.FoundationAttributes.InflectionRuleAttribute>>((uint64_t)v756);
    swift_retain();
    AttributedString.Runs._slicedRunBoundary(after:attributeNames:constraints:)( (unint64_t *)&v737,  (uint64_t)v115,  v210,  (uint64_t *)v755);
    swift_release();
    outlined release of ReversedCollection<AttributedString.Runs.AttributesSlice1<AttributeScopes.FoundationAttributes.InflectionRuleAttribute>>.Iterator((uint64_t)v756);
    BOOL v214 = *(void *)&v755[0];
    if (v683 <= *(void *)&v755[0] >> 10)
    {
      v683 = *((void *)&v755[0] + 1);
      BOOL v215 = v755[1];
      specialized AttributedString._AttributeStorage.subscript.getter((uint64_t)v682, (uint64_t)v826);
      swift_release();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v826[14] = v213;
      v826[15] = v211;
      v826[16] = v113;
      v826[17] = v212;
      v826[18] = v214;
      BOOL v216 = v683;
      v826[19] = v683;
      v827 = v215;
      destructiveProjectEnumData for PredicateCodableError(v826, v217);
      unint64_t v65 = v214;
      v688 = v216;
      v686 = (id)*((void *)&v215 + 1);
      v687 = (void *)v215;
LABEL_136:
      outlined init with take of LocalePreferences?( (uint64_t)v826,  (uint64_t)v811,  &demangling cache variable for type metadata for (AttributedString.MarkdownSourcePosition?, Range<AttributedString.Index>)?);
      outlined init with take of LocalePreferences?( (uint64_t)v811,  (uint64_t)v812,  &demangling cache variable for type metadata for (AttributedString.MarkdownSourcePosition?, Range<AttributedString.Index>)?);
      if (_s10Foundation16AttributedStringV22MarkdownSourcePositionVSg_SnyAC5IndexVGtSgWOg((uint64_t)v812) == 1)
      {
        *(__int128 *)((char *)&v756[4] + 8) = v834;
        *(__int128 *)((char *)&v756[5] + 8) = v835;
        *(__int128 *)((char *)&v756[6] + 8) = v836;
        *(__int128 *)((char *)&v756[7] + 8) = v837;
        *(__int128 *)((char *)v756 + 8) = v830;
        *(__int128 *)((char *)&v756[1] + 8) = v831;
        *(__int128 *)((char *)&v756[2] + 8) = v832;
        *(__int128 *)((char *)&v756[3] + 8) = v833;
        *(void *)&v756[0] = v670;
        *((void *)&v756[8] + 1) = v671;
        v756[9] = v667;
        *(void *)&v756[10] = v673;
        *((void *)&v756[10] + 1) = v672;
        *(void *)&v756[11] = v668;
        *((void *)&v756[11] + 1) = v685;
        *(void *)&v756[12] = v669;
        *((void *)&v756[12] + 1) = v674;
        *(void *)&v756[13] = MEMORY[0x18961AFE8];
        *((void *)&v756[13] + 1) = v65;
        *(void *)&v756[14] = v688;
        *((void *)&v756[14] + 1) = v687;
        *(void *)&v756[15] = v686;
        outlined release of ReversedCollection<AttributedString.Runs.AttributesSlice1<AttributeScopes.FoundationAttributes.InflectionRuleAttribute>>.Iterator((uint64_t)v756);
        swift_bridgeObjectRelease();
        memset(v755, 0, 105);
        BYTE9(v755[6]) = 1;
        specialized AttributedString.subscript.setter((uint64_t)v755);
        unint64_t v113 = (unint64_t)v658;
        goto LABEL_246;
      }

      if ((v817 & 1) != 0) {
        continue;
      }
      v683 = v818;
      v682 = (void *)v819;
      v681 = v820;
      v680 = v821;
      v663 = v823;
      v664 = v822;
      v661 = v825;
      v662 = v824;
      v1089[0] = v812[0];
      v1089[1] = v812[1];
      v1089[2] = v812[2];
      v1089[3] = v812[3];
      v1090 = v813 & 1;
      v1091 = v814;
      v1092 = v815;
      v1093 = v816 & 1;
      uint64_t v218 = (unint64_t)v678;
      swift_bridgeObjectRetain();
      char v219 = specialized Range<>.init<A>(_:in:)((uint64_t)v1089, (unint64_t)v676, v218);
      if ((v221 & 1) != 0) {
        continue;
      }
      id v222 = v219;
      uint64_t v223 = v220;
      id v224 = v677[1];
      v1088[0] = *v677;
      v1088[1] = v224;
      v1088[2] = v677[2];
      id v225 = v219 >> 16;
      if ((v219 & 0xC) == 8)
      {
        uint64_t v226 = v1088;
        BigString.utf16.getter();
        uint64_t v227 = BigString.UTF16View.count.getter();
        swift_retain();
        outlined retain of Locale((uint64_t)v1088);
        outlined release of Locale((uint64_t)&v845);
        if (v227 >= v225)
        {
          uint64_t v228 = v222 >> 14;
          BigString.utf16.getter();
          BigString.startIndex.getter();
          char v229 = BigString.UTF16View.index(_:offsetBy:)();
          uint64_t v231 = v230;
          uint64_t v233 = v232;
          uint64_t v235 = v234;
          outlined release of Locale((uint64_t)&v846);
          if (v228)
          {
            BigString.utf8.getter();
            char v229 = BigString.UTF8View.index(_:offsetBy:)();
            v655 = v236;
            v651 = v238;
            v652 = v237;
            outlined release of Locale((uint64_t)&v847);
          }

          else
          {
            v651 = v235;
            v652 = v233;
            v655 = v231;
          }

          outlined release of Locale((uint64_t)v1088);
          goto LABEL_147;
        }

LABEL_294:
            uint64_t v264 = 512LL;
          }
        }

                if (v163) {
                  goto LABEL_396;
                }
                id v35 = 0LL;
                goto LABEL_321;
              }

              uint64_t v34 = ((-15LL << ((4 * v151 + 8) & 0x3C)) - 1) & v151 | ((unint64_t)*(unsigned __int16 *)(v148 + 16) << ((4 * v151 + 8) & 0x3C));
              swift_unknownObjectRetain();
              id v35 = 0LL;
              unsigned __int8 v15 = 0LL;
              goto LABEL_52;
            }

            if (a2 > 0) {
              goto LABEL_378;
            }
            id v35 = 0LL;
            unsigned __int8 v15 = 0LL;
            unint64_t v33 = 0LL;
            id v178 = 0LL;
LABEL_53:
            uint64_t v21 = __OFSUB__(v5, v35);
            uint64_t v32 = v5 - v35;
            id v9 = a3;
            if (v21) {
              goto LABEL_368;
            }
          }

          else
          {
            uint64_t v32 = 0LL;
            id v178 = 0LL;
            unsigned __int8 v15 = 0LL;
            unint64_t v33 = 0LL;
            uint64_t v11 = v104[11];
            if (v148)
            {
              unsigned __int8 v15 = 0LL;
              uint64_t v32 = v104[10];
              id v178 = v104[9];
              unint64_t v33 = ((-15LL << ((4 * *(_BYTE *)(v148 + 18) + 8) & 0x3C)) - 1) & (unint64_t)*(unsigned __int8 *)(v148 + 18) | ((unint64_t)*(unsigned __int16 *)(v148 + 16) << ((4 * *(_BYTE *)(v148 + 18) + 8) & 0x3C));
            }
          }
        }
      }

      if (*(_BYTE *)(v10 + 18))
      {
        uint64_t result = (void *)swift_unknownObjectRetain_n();
        id v9 = v5;
        unint64_t v41 = v10;
LABEL_73:
        unint64_t v28 = *(unsigned __int16 *)(v41 + 16);
        if (!*(_WORD *)(v41 + 16)) {
          goto LABEL_71;
        }
        uint64_t v43 = *(void *)(v41 + 40);
        uint64_t v21 = __OFSUB__(v9, v43);
        uint64_t v30 = v9 - v43;
        if (v21) {
          goto LABEL_330;
        }
        if (__OFADD__(v30, 1LL)) {
          goto LABEL_331;
        }
        if (v30 + 1 <= 0)
        {
          unint64_t v28 = 0LL;
          goto LABEL_72;
        }

        if ((_DWORD)v28 == 1)
        {
          id v9 = v30;
LABEL_71:
          if (!v9) {
            goto LABEL_72;
          }
          __break(1u);
LABEL_329:
          __break(1u);
LABEL_330:
          __break(1u);
LABEL_331:
          __break(1u);
LABEL_332:
          __break(1u);
LABEL_333:
          __break(1u);
          goto LABEL_334;
        }

        uint64_t v44 = (uint64_t *)(v41 + 64);
        uint64_t v45 = 1LL;
        while (1)
        {
          unsigned __int8 v46 = *v44;
          v44 += 3;
          id v9 = v30 - v46;
          if (__OFSUB__(v30, v46)) {
            break;
          }
          if (__OFADD__(v9, 1LL)) {
            goto LABEL_324;
          }
          if (v9 + 1 < 1)
          {
            unint64_t v28 = v45;
            id v9 = v30;
LABEL_72:
            Swift::Int v42 = (4 * *(_BYTE *)(v41 + 18) + 8) & 0x3C;
            uint64_t v36 = ((-15LL << v42) - 1) & v36 | (v28 << v42);
            uint64_t v5 = *(void *)(v41 + 24 + 24 * v28);
            swift_unknownObjectRetain();
            uint64_t result = (void *)swift_unknownObjectRelease();
            unint64_t v41 = v5;
            if (!*(_BYTE *)(v5 + 18)) {
              goto LABEL_87;
            }
            goto LABEL_73;
          }

          ++v45;
          uint64_t v30 = v9;
          if (v28 == v45) {
            goto LABEL_71;
          }
        }

        __break(1u);
LABEL_324:
        __break(1u);
LABEL_325:
        __break(1u);
LABEL_326:
        __break(1u);
LABEL_327:
        id v26 = v30;
        uint64_t v16 = v28;
        continue;
      }

      break;
    }

    uint64_t result = (void *)swift_unknownObjectRetain_n();
    uint64_t v36 = 0LL;
    id v9 = v5;
    uint64_t v5 = v10;
LABEL_87:
    Swift::Int32 v47 = *(unsigned __int16 *)(v5 + 16);
    if (!*(_WORD *)(v5 + 16)) {
      goto LABEL_99;
    }
    uint64_t v48 = *(void *)(v5 + 24);
    uint64_t v21 = __OFSUB__(v9, v48);
    unint64_t v49 = v9 - v48;
    if (v21) {
      goto LABEL_375;
    }
    if (__OFADD__(v49, 1LL)) {
      goto LABEL_376;
    }
    if (v49 + 1 <= 0)
    {
      Swift::Int32 v47 = 0LL;
    }

    else
    {
      if ((_DWORD)v47 == 1)
      {
        id v9 = v49;
LABEL_99:
        if (v9) {
          goto LABEL_373;
        }
        goto LABEL_100;
      }

      uint64_t v50 = (uint64_t *)(v5 + 48);
      unint64_t v51 = 1LL;
      while (1)
      {
        unint64_t v52 = *v50;
        v50 += 3;
        id v9 = v49 - v52;
        if (__OFSUB__(v49, v52)) {
          goto LABEL_355;
        }
        if (__OFADD__(v9, 1LL)) {
          goto LABEL_356;
        }
        if (v9 + 1 < 1) {
          break;
        }
        ++v51;
        unint64_t v49 = v9;
        if (v47 == v51) {
          goto LABEL_99;
        }
      }

      Swift::Int32 v47 = v51;
      id v9 = v49;
    }

LABEL_279:
        int v303 = (const char *)v264;
        size_t v265 = v133;
        if ((POSIXErrorCode.init(rawValue:)() & 0x100000000LL) != 0)
        {
          id v323 = 0LL;
          unint64_t v324 = 0xE000000000000000LL;
          _StringGuts.grow(_:)(22LL);
          swift_bridgeObjectRelease();
          id v323 = (id)0xD000000000000014LL;
          unint64_t v324 = 0x80000001839C9190LL;
          LODWORD(v325) = v263;
          goto LABEL_357;
        }

        static String._unconditionallyBridgeFromObjectiveC(_:)(v312);
        uint64_t v266 = (int)POSIXErrorCode.rawValue.getter();
        id v267 = objc_allocWithZone((Class)&OBJC_CLASS___NSError);
        uint64_t v268 = String._bridgeToObjectiveCImpl()();
        swift_bridgeObjectRelease();
        id v269 = objc_msgSend(v267, sel_initWithDomain_code_userInfo_, v268, v266, _NativeDictionary.bridged()());
        swift_unknownObjectRelease();
        swift_unknownObjectRelease();
        id v307 = v269;
        id v270 = objc_msgSend(v269, sel_domain);
        id v271 = static String._unconditionallyBridgeFromObjectiveC(_:)(v270);
        uint64_t v273 = v272;

        if (v271 == static String._unconditionallyBridgeFromObjectiveC(_:)(v312) && v273 == v274)
        {
          swift_bridgeObjectRelease_n();
          size_t v133 = v265;
        }

        else
        {
          char v275 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          size_t v133 = v265;
          if ((v275 & 1) == 0) {
            goto LABEL_337;
          }
        }

        uint64_t v32 = v317;
        uint64_t v90 = v309;
        uint64_t v276 = (uint64_t)v303;
LABEL_285:
        swift_bridgeObjectRetain();
        unint64_t v277 = v133;
        unint64_t v278 = (unint64_t)v310;
        swift_bridgeObjectRetain();
        uint64_t v279 = (uint64_t)v308;
        specialized CocoaError.init<A>(_:path:underlying:variant:source:destination:)( (uint64_t (*)(void))v276,  (uint64_t)v305,  v304,  v307,  1802398028LL,  0xE400000000000000LL,  v90,  v277,  (void *(*)(void *__return_ptr, void *, uint64_t))&v323,  (uint64_t)v308,  v278);
        id v280 = v323;
        uint64_t v281 = v90;
        id v282 = v280;
        LOBYTE(v279) = NSFileManager._shouldProceedAfter(error:copyingItemAtPath:to:)( v280,  v281,  v277,  v279,  v278,  (SEL *)&selRef_fileManager_shouldProceedAfterError_linkingItemAtURL_toURL_,  (SEL *)&selRef_fileManager_shouldProceedAfterError_linkingItemAtPath_toPath_);

        if ((v279 & 1) != 0)
        {

          outlined consume of _FTSSequence.Element?((uint64_t)v16, v32, v18, v19);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
LABEL_222:
          id v9 = v315;
LABEL_9:
          uint64_t v16 = (FTSENT *)_FTSSequence.Iterator.next()();
          uint64_t v17 = v21;
          unint64_t v18 = v22;
          unsigned __int8 v19 = v23;
          if (v23 == 0xFF) {
            return swift_release();
          }
          continue;
        }

        swift_willThrow();
        swift_release();
        outlined consume of _FTSSequence.Element?((uint64_t)v16, v32, v18, v19);
        swift_bridgeObjectRelease();
        return swift_bridgeObjectRelease();
      case 2u:
      case 5u:
      case 9u:
      case 0xBu:
        goto LABEL_9;
      case 3u:
      case 8u:
        if ((v313 & 1) != 0)
        {
          if (!copyfile(fts_path, v315, 0LL, 0x10E000Fu)) {
            goto LABEL_9;
          }
          Swift::Int32 v47 = MEMORY[0x186E1B0E8]();
          uint64_t v48 = String.init(cString:)();
          uint64_t v16 = v49;
          uint64_t v50 = String.init(cString:)();
          unint64_t v52 = v51;
          swift_bridgeObjectRetain();
          if (v47 == 63)
          {
            swift_bridgeObjectRetain_n();
            swift_bridgeObjectRetain();
            unint64_t Path = String._lastPathComponent.getter(v50, v52);
            unint64_t v55 = v54;
            swift_bridgeObjectRelease();
            int64_t v56 = specialized String.withFileSystemRepresentation<A>(_:)(Path, v55);
            swift_bridgeObjectRelease();
            int64_t v57 = specialized String.withFileSystemRepresentation<A>(_:)(v50, v52);
            swift_bridgeObjectRelease();
            BOOL v59 = v56 > 255 || v57 > 1024;
            BOOL v60 = !v59;
            if (v59) {
              uint64_t v61 = v50;
            }
            else {
              uint64_t v61 = v48;
            }
            uint64_t v308 = (uint64_t *)v61;
            if (v60) {
              uint64_t v62 = (uint64_t)v16;
            }
            else {
              uint64_t v62 = v52;
            }
            uint64_t v309 = v62;
            swift_bridgeObjectRelease();
            CocoaError.Code.init(fileErrno:reading:)(63, 0);
            unint64_t v63 = v325;
          }

          else
          {
            CocoaError.Code.init(fileErrno:reading:)(v47, 0);
            unint64_t v63 = v325;
            if (v47 == 102) {
              goto LABEL_96;
            }
            uint64_t v309 = (uint64_t)v16;
            uint64_t v308 = (uint64_t *)v48;
          }

          id v307 = v63;
          unint64_t v310 = (FTSENT *)v50;
          unint64_t v317 = v48;
          if ((POSIXErrorCode.init(rawValue:)() & 0x100000000LL) != 0) {
            goto LABEL_347;
          }
          uint64_t v118 = v312;
          static String._unconditionallyBridgeFromObjectiveC(_:)(v312);
          uint64_t v119 = (int)POSIXErrorCode.rawValue.getter();
          id v120 = objc_allocWithZone((Class)&OBJC_CLASS___NSError);
          uint64_t v121 = String._bridgeToObjectiveCImpl()();
          swift_bridgeObjectRelease();
          id v122 = objc_msgSend(v120, sel_initWithDomain_code_userInfo_, v121, v119, _NativeDictionary.bridged()());
          swift_unknownObjectRelease();
          swift_unknownObjectRelease();
          id v123 = objc_msgSend(v122, sel_domain);
          id v124 = static String._unconditionallyBridgeFromObjectiveC(_:)(v123);
          uint64_t v126 = v125;

          if (v124 == static String._unconditionallyBridgeFromObjectiveC(_:)(v118) && v126 == v127) {
            goto LABEL_115;
          }
          char v128 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if ((v128 & 1) == 0) {
            goto LABEL_338;
          }
        }

        else
        {
          if (!link(fts_path, v315)) {
            goto LABEL_9;
          }
          Swift::Int32 v47 = MEMORY[0x186E1B0E8]();
          uint64_t v48 = String.init(cString:)();
          uint64_t v16 = v77;
          uint64_t v50 = String.init(cString:)();
          unint64_t v52 = v78;
          swift_bridgeObjectRetain();
          if (v47 == 63)
          {
            swift_bridgeObjectRetain_n();
            swift_bridgeObjectRetain();
            unint64_t v79 = String._lastPathComponent.getter(v50, v52);
            unint64_t v81 = v80;
            swift_bridgeObjectRelease();
            int64_t v82 = specialized String.withFileSystemRepresentation<A>(_:)(v79, v81);
            swift_bridgeObjectRelease();
            int64_t v83 = specialized String.withFileSystemRepresentation<A>(_:)(v50, v52);
            swift_bridgeObjectRelease();
            BOOL v85 = v82 > 255 || v83 > 1024;
            BOOL v86 = !v85;
            if (v85) {
              uint64_t v87 = v50;
            }
            else {
              uint64_t v87 = v48;
            }
            uint64_t v308 = (uint64_t *)v87;
            if (v86) {
              uint64_t v88 = (uint64_t)v16;
            }
            else {
              uint64_t v88 = v52;
            }
            uint64_t v309 = v88;
            swift_bridgeObjectRelease();
            CocoaError.Code.init(fileErrno:reading:)(63, 0);
            unint64_t v63 = v325;
          }

          else
          {
            CocoaError.Code.init(fileErrno:reading:)(v47, 0);
            unint64_t v63 = v325;
            if (v47 == 102)
            {
LABEL_96:
              id v122 = 0LL;
              unint64_t v129 = (unint64_t)v16;
              uint64_t v130 = v48;
              goto LABEL_118;
            }

            uint64_t v309 = (uint64_t)v16;
            uint64_t v308 = (uint64_t *)v48;
          }

          id v307 = v63;
          unint64_t v310 = (FTSENT *)v50;
          unint64_t v317 = v48;
          if ((POSIXErrorCode.init(rawValue:)() & 0x100000000LL) != 0) {
            goto LABEL_347;
          }
          Swift::Int v142 = v312;
          static String._unconditionallyBridgeFromObjectiveC(_:)(v312);
          uint64_t v143 = (int)POSIXErrorCode.rawValue.getter();
          id v144 = objc_allocWithZone((Class)&OBJC_CLASS___NSError);
          uint64_t v145 = String._bridgeToObjectiveCImpl()();
          swift_bridgeObjectRelease();
          id v122 = objc_msgSend(v144, sel_initWithDomain_code_userInfo_, v145, v143, _NativeDictionary.bridged()());
          swift_unknownObjectRelease();
          swift_unknownObjectRelease();
          id v146 = objc_msgSend(v122, sel_domain);
          id v147 = static String._unconditionallyBridgeFromObjectiveC(_:)(v146);
          uint64_t v149 = v148;

          if (v147 == static String._unconditionallyBridgeFromObjectiveC(_:)(v142) && v149 == v150)
          {
LABEL_115:
            swift_bridgeObjectRelease_n();
            goto LABEL_117;
          }

          char v151 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if ((v151 & 1) == 0) {
            goto LABEL_339;
          }
        }

              uint64_t v150 = 8LL;
              goto LABEL_280;
            }
          }

          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          uint64_t v131 = MEMORY[0x18961AFE8];
        }

              __break(1u);
LABEL_280:
              __break(1u);
LABEL_281:
              __break(1u);
            }

            __break(1u);
LABEL_283:
            __break(1u);
LABEL_284:
            __break(1u);
LABEL_285:
            __break(1u);
LABEL_286:
            __break(1u);
LABEL_287:
            __break(1u);
LABEL_288:
            __break(1u);
LABEL_289:
            __break(1u);
LABEL_290:
            __break(1u);
LABEL_291:
            __break(1u);
            goto LABEL_292;
          }

          unsigned __int8 v23 = v132 + 1;
          if (__OFADD__(v132, 1LL)) {
            goto LABEL_264;
          }
          ++v132;
          --v131;
          if (a3 + v132 >= v128) {
            goto LABEL_213;
          }
        }

        __break(1u);
LABEL_264:
        __break(1u);
LABEL_265:
        __break(1u);
LABEL_266:
        __break(1u);
        goto LABEL_267;
      }
    }

    id v35 = v32;
    uint64_t v36 = _asciiNumbers.getter();
    unint64_t v37 = specialized static JSONError.SourceLocation.sourceLocation(at:fullSource:)(v31, a3, v184);
    unint64_t v38 = v35;
    unint64_t v40 = v39;
    Swift::Int v42 = v41;
    uint64_t v43 = v38;
LABEL_232:
    lazy protocol witness table accessor for type JSONError and conformance JSONError();
    swift_allocError();
    *(_OWORD *)BOOL v60 = xmmword_1837301C0;
    *(void *)(v60 + 16) = v43;
    *(void *)(v60 + 24) = v37;
    *(void *)(v60 + 32) = v40;
    *(void *)(v60 + 40) = v42;
    goto LABEL_245;
  }

  if (!a2)
  {
LABEL_267:
    __break(1u);
    goto LABEL_268;
  }

  unint64_t v18 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0LL, a1);
  if (v18 == 48)
  {
    BOOL v170 = a7;
    uint64_t v174 = (uint64_t (*)(unsigned __int8 *, uint64_t, uint64_t))a8;
    if (v13 >= 1) {
      unsigned __int8 v19 = 1LL;
    }
    else {
      unsigned __int8 v19 = v13;
    }
    if (v13 >= 2)
    {
      copyfile_flags_t v20 = v14 + v19;
      uint64_t v21 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0LL, v14 + v19);
      unint64_t v22 = 0;
      if (v21 <= 0x57u)
      {
        unsigned __int8 v23 = v14;
        if (v21 == 46 || v21 == 69) {
          goto LABEL_46;
        }
LABEL_109:
        unint64_t v75 = _asciiNumbers.getter();
        unint64_t v37 = specialized static JSONError.SourceLocation.sourceLocation(at:fullSource:)(v14 + v19, a3, v184);
        unint64_t v40 = v76;
        Swift::Int v42 = v77;
        uint64_t v43 = v21;
        goto LABEL_232;
      }

      if (v21 == 120)
      {
LABEL_12:
        unsigned __int8 v23 = v20 + 1;
        if (specialized static Comparable.<= infix(_:_:)(v20 + 1, v14 + v13))
        {
LABEL_13:
          uint64_t v24 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0LL, v23);
          id v25 = 1;
          if (!UInt8.isValidHexDigit.getter(v24))
          {
            id v144 = specialized static JSONError.SourceLocation.sourceLocation(at:fullSource:)(v23, a3, v184);
            id v146 = v145;
            uint64_t v148 = v147;
            lazy protocol witness table accessor for type JSONError and conformance JSONError();
            swift_allocError();
            *(_OWORD *)uint64_t v149 = xmmword_1837301C0;
            *(void *)(v149 + 16) = v24;
            *(void *)(v149 + 24) = v144;
            *(void *)(v149 + 32) = v146;
            *(void *)(v149 + 40) = v148;
            *(_BYTE *)(v149 + 48) = 1;
            return (char *)swift_willThrow();
          }

          id v26 = 0;
LABEL_75:
          uint64_t result = (char *)specialized _parseJSON5Integer<A>(_:isHex:)((unsigned __int8 *)v14, v13, v25, v170, v174);
          if ((v56 & 1) == 0) {
            return result;
          }
          if ((v26 & 1) != 0)
          {
            int64_t v57 = static String._fromUTF8Repairing(_:)();
            BOOL v59 = v58;
            lazy protocol witness table accessor for type JSONError and conformance JSONError();
            swift_allocError();
            *(void *)BOOL v60 = v57;
            *(void *)(v60 + 8) = v59;
            *(_OWORD *)(v60 + 16) = 0u;
            *(_OWORD *)(v60 + 32) = 0u;
            uint64_t v61 = 11;
LABEL_246:
            *(_BYTE *)(v60 + 48) = v61;
            return (char *)swift_willThrow();
          }

          return specialized static JSONDecoderImpl._slowpath_unwrapFixedWidthInteger<A, B>(as:json5:numberBuffer:fullSource:digitBeginning:for:_:)( v11 & 1,  (char *)v14,  v13,  a3,  v184,  v23);
        }

        if (v13 - v19 < 1) {
          goto LABEL_290;
        }
        goto LABEL_173;
      }

      if (v21 != 101)
      {
        if (v21 == 88) {
          goto LABEL_12;
        }
        goto LABEL_109;
      }

          __break(1u);
LABEL_280:
          __break(1u);
LABEL_281:
          __break(1u);
        }

        __break(1u);
LABEL_283:
        __break(1u);
LABEL_284:
        __break(1u);
LABEL_285:
        __break(1u);
LABEL_286:
        __break(1u);
LABEL_287:
        __break(1u);
LABEL_288:
        __break(1u);
LABEL_289:
        __break(1u);
LABEL_290:
        __break(1u);
LABEL_291:
        __break(1u);
        goto LABEL_292;
      }

      uint64_t v21 = v110 + 1;
      if (__OFADD__(v110, 1LL)) {
        goto LABEL_264;
      }
      ++v110;
      --v109;
      if (a3 + v110 >= v106) {
        goto LABEL_176;
      }
    }

    __break(1u);
LABEL_264:
    __break(1u);
LABEL_265:
    __break(1u);
LABEL_266:
    __break(1u);
LABEL_267:
    __break(1u);
    goto LABEL_268;
  }

  if (!a2) {
    goto LABEL_267;
  }
  uint64_t v16 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0LL, a1);
  if (v16 == 48)
  {
    uint64_t v177 = a7;
    if (v13 >= 1) {
      uint64_t v17 = 1LL;
    }
    else {
      uint64_t v17 = v13;
    }
    if (v13 >= 2)
    {
      unint64_t v18 = v14 + v17;
      unsigned __int8 v19 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0LL, v14 + v17);
      copyfile_flags_t v20 = 0;
      if (v19 <= 0x57u)
      {
        uint64_t v21 = v14;
        if (v19 == 46 || v19 == 69) {
          goto LABEL_47;
        }
        goto LABEL_110;
      }

      if (v19 == 120)
      {
LABEL_12:
        uint64_t v21 = v18 + 1;
        if (specialized static Comparable.<= infix(_:_:)(v18 + 1, v14 + v13))
        {
LABEL_13:
          unint64_t v22 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0LL, v21);
          unsigned __int8 v23 = 1LL;
          if (!UInt8.isValidHexDigit.getter(v22))
          {
            uint64_t v150 = specialized static JSONError.SourceLocation.sourceLocation(at:fullSource:)(v21, a3, v11);
            id v152 = v151;
            uint64_t v154 = v153;
            lazy protocol witness table accessor for type JSONError and conformance JSONError();
            swift_allocError();
            *(_OWORD *)char v155 = xmmword_1837301C0;
            *(void *)(v155 + 16) = v22;
            *(void *)(v155 + 24) = v150;
            *(void *)(v155 + 32) = v152;
            *(void *)(v155 + 40) = v154;
            *(_BYTE *)(v155 + 48) = 1;
            return swift_willThrow();
          }

          uint64_t v24 = 0;
LABEL_76:
          uint64_t result = v177(v14, v13, v23);
          if ((result & 0x100) == 0) {
            return result;
          }
          if ((v24 & 1) != 0)
          {
            BOOL v60 = static String._fromUTF8Repairing(_:)();
            uint64_t v62 = v61;
            lazy protocol witness table accessor for type JSONError and conformance JSONError();
            swift_allocError();
            *(void *)unint64_t v63 = v60;
            *(void *)(v63 + 8) = v62;
            *(_OWORD *)(v63 + 16) = 0u;
            *(_OWORD *)(v63 + 32) = 0u;
            uint64_t v64 = 11;
LABEL_234:
            *(_BYTE *)(v63 + 48) = v64;
            return swift_willThrow();
          }

          return ((uint64_t (*)(unint64_t, unint64_t, uint64_t, unint64_t, unint64_t, uint64_t))a8)( v187 & 1,  v14,  v13,  a3,  v11,  v21);
        }

        if (v13 - v17 < 1) {
          goto LABEL_290;
        }
        goto LABEL_221;
      }

      if (v19 != 101)
      {
        if (v19 == 88) {
          goto LABEL_12;
        }
LABEL_110:
        unint64_t v78 = _asciiNumbers.getter();
        uint64_t v34 = specialized static JSONError.SourceLocation.sourceLocation(at:fullSource:)(v14 + v17, a3, v11);
        uint64_t v36 = v79;
        unint64_t v38 = v80;
        if (v19 >= v78)
        {
          unint64_t v39 = HIBYTE(v78);
LABEL_112:
          if (v39 >= v19)
          {
LABEL_113:
            lazy protocol witness table accessor for type JSONError and conformance JSONError();
            swift_allocError();
            *(void *)unint64_t v63 = v34;
            *(void *)(v63 + 8) = v36;
            *(void *)(v63 + 16) = v38;
            *(void *)(v63 + 24) = 0LL;
            *(void *)(v63 + 32) = 0LL;
            *(void *)(v63 + 40) = 0LL;
            uint64_t v64 = 10;
            goto LABEL_234;
          }

          goto LABEL_184;
        }

        goto LABEL_184;
      }

          __break(1u);
LABEL_280:
          __break(1u);
LABEL_281:
          __break(1u);
        }

        __break(1u);
LABEL_283:
        __break(1u);
LABEL_284:
        __break(1u);
LABEL_285:
        __break(1u);
LABEL_286:
        __break(1u);
LABEL_287:
        __break(1u);
LABEL_288:
        __break(1u);
LABEL_289:
        __break(1u);
LABEL_290:
        __break(1u);
LABEL_291:
        __break(1u);
        goto LABEL_292;
      }

      uint64_t v21 = v110 + 1;
      if (__OFADD__(v110, 1LL)) {
        goto LABEL_264;
      }
      ++v110;
      --v109;
      if (a3 + v110 >= v106) {
        goto LABEL_176;
      }
    }

    __break(1u);
LABEL_264:
    __break(1u);
LABEL_265:
    __break(1u);
LABEL_266:
    __break(1u);
LABEL_267:
    __break(1u);
    goto LABEL_268;
  }

  if (!a2) {
    goto LABEL_267;
  }
  uint64_t v16 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0LL, a1);
  if (v16 == 48)
  {
    uint64_t v177 = a7;
    if (v13 >= 1) {
      uint64_t v17 = 1LL;
    }
    else {
      uint64_t v17 = v13;
    }
    if (v13 >= 2)
    {
      unint64_t v18 = v14 + v17;
      unsigned __int8 v19 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0LL, v14 + v17);
      copyfile_flags_t v20 = 0;
      if (v19 <= 0x57u)
      {
        uint64_t v21 = v14;
        if (v19 == 46 || v19 == 69) {
          goto LABEL_47;
        }
        goto LABEL_110;
      }

      if (v19 == 120)
      {
LABEL_12:
        uint64_t v21 = v18 + 1;
        if (specialized static Comparable.<= infix(_:_:)(v18 + 1, v14 + v13))
        {
LABEL_13:
          unint64_t v22 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0LL, v21);
          unsigned __int8 v23 = 1LL;
          if (!UInt8.isValidHexDigit.getter(v22))
          {
            uint64_t v150 = specialized static JSONError.SourceLocation.sourceLocation(at:fullSource:)(v21, a3, v11);
            id v152 = v151;
            uint64_t v154 = v153;
            lazy protocol witness table accessor for type JSONError and conformance JSONError();
            swift_allocError();
            *(_OWORD *)char v155 = xmmword_1837301C0;
            *(void *)(v155 + 16) = v22;
            *(void *)(v155 + 24) = v150;
            *(void *)(v155 + 32) = v152;
            *(void *)(v155 + 40) = v154;
            *(_BYTE *)(v155 + 48) = 1;
            return swift_willThrow();
          }

          uint64_t v24 = 0;
LABEL_76:
          uint64_t result = v177(v14, v13, v23);
          if ((result & 0x10000) == 0) {
            return result;
          }
          if ((v24 & 1) != 0)
          {
            BOOL v60 = static String._fromUTF8Repairing(_:)();
            uint64_t v62 = v61;
            lazy protocol witness table accessor for type JSONError and conformance JSONError();
            swift_allocError();
            *(void *)unint64_t v63 = v60;
            *(void *)(v63 + 8) = v62;
            *(_OWORD *)(v63 + 16) = 0u;
            *(_OWORD *)(v63 + 32) = 0u;
            uint64_t v64 = 11;
LABEL_234:
            *(_BYTE *)(v63 + 48) = v64;
            return swift_willThrow();
          }

          return ((uint64_t (*)(unint64_t, unint64_t, uint64_t, unint64_t, unint64_t, uint64_t))a8)( v187 & 1,  v14,  v13,  a3,  v11,  v21);
        }

        if (v13 - v17 < 1) {
          goto LABEL_290;
        }
        goto LABEL_221;
      }

      if (v19 != 101)
      {
        if (v19 == 88) {
          goto LABEL_12;
        }
LABEL_110:
        unint64_t v78 = _asciiNumbers.getter();
        uint64_t v34 = specialized static JSONError.SourceLocation.sourceLocation(at:fullSource:)(v14 + v17, a3, v11);
        uint64_t v36 = v79;
        unint64_t v38 = v80;
        if (v19 >= v78)
        {
          unint64_t v39 = HIBYTE(v78);
LABEL_112:
          if (v39 >= v19)
          {
LABEL_113:
            lazy protocol witness table accessor for type JSONError and conformance JSONError();
            swift_allocError();
            *(void *)unint64_t v63 = v34;
            *(void *)(v63 + 8) = v36;
            *(void *)(v63 + 16) = v38;
            *(void *)(v63 + 24) = 0LL;
            *(void *)(v63 + 32) = 0LL;
            *(void *)(v63 + 40) = 0LL;
            uint64_t v64 = 10;
            goto LABEL_234;
          }

          goto LABEL_184;
        }

        goto LABEL_184;
      }

                        __break(1u);
LABEL_280:
                        __break(1u);
LABEL_281:
                        __break(1u);
LABEL_282:
                        __break(1u);
                      }

                      __break(1u);
                    }

                    a3 = v102 + 1;
                    if (__OFADD__(v102, 1LL)) {
                      goto LABEL_257;
                    }
                    ++v102;
                    --v101;
                    if (v100 + v102 >= v98) {
                      goto LABEL_242;
                    }
                  }

                  Swift::Int v72 = __OFADD__(i++, 1LL);
                  if (v72) {
                    goto LABEL_278;
                  }
                  v100 += v102 + 1;
LABEL_212:
                  ;
                }

                while (v100 < v98);
                a3 = 0LL;
              }

          __break(1u);
LABEL_280:
          __break(1u);
LABEL_281:
          __break(1u);
        }

        __break(1u);
LABEL_283:
        __break(1u);
LABEL_284:
        __break(1u);
LABEL_285:
        __break(1u);
LABEL_286:
        __break(1u);
LABEL_287:
        __break(1u);
LABEL_288:
        __break(1u);
LABEL_289:
        __break(1u);
LABEL_290:
        __break(1u);
LABEL_291:
        __break(1u);
        goto LABEL_292;
      }

      uint64_t v21 = v111 + 1;
      if (__OFADD__(v111, 1LL)) {
        goto LABEL_264;
      }
      ++v111;
      --v110;
      if (a3 + v111 >= v107) {
        goto LABEL_176;
      }
    }

    __break(1u);
LABEL_264:
    __break(1u);
LABEL_265:
    __break(1u);
LABEL_266:
    __break(1u);
LABEL_267:
    __break(1u);
    goto LABEL_268;
  }

  if (!a2) {
    goto LABEL_267;
  }
  uint64_t v16 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0LL, a1);
  if (v16 == 48)
  {
    uint64_t v177 = a7;
    if (v13 >= 1) {
      uint64_t v17 = 1LL;
    }
    else {
      uint64_t v17 = v13;
    }
    if (v13 >= 2)
    {
      unint64_t v18 = v14 + v17;
      unsigned __int8 v19 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0LL, v14 + v17);
      copyfile_flags_t v20 = 0;
      if (v19 <= 0x57u)
      {
        uint64_t v21 = v14;
        if (v19 == 46 || v19 == 69) {
          goto LABEL_47;
        }
        goto LABEL_110;
      }

      if (v19 == 120)
      {
LABEL_12:
        uint64_t v21 = v18 + 1;
        if (specialized static Comparable.<= infix(_:_:)(v18 + 1, v14 + v13))
        {
LABEL_13:
          unint64_t v22 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0LL, v21);
          unsigned __int8 v23 = 1;
          if (!UInt8.isValidHexDigit.getter(v22))
          {
            id v152 = specialized static JSONError.SourceLocation.sourceLocation(at:fullSource:)(v21, a3, v11);
            uint64_t v154 = v153;
            char v156 = v155;
            lazy protocol witness table accessor for type JSONError and conformance JSONError();
            swift_allocError();
            *(_OWORD *)Swift::Int v157 = xmmword_1837301C0;
            *(void *)(v157 + 16) = v22;
            *(void *)(v157 + 24) = v152;
            *(void *)(v157 + 32) = v154;
            *(void *)(v157 + 40) = v156;
            *(_BYTE *)(v157 + 48) = 1;
            return (char *)swift_willThrow();
          }

          uint64_t v24 = 0;
LABEL_76:
          uint64_t result = (char *)specialized _parseJSON5Integer<A>(_:isHex:)((_BYTE *)v14, v13, v23, v177);
          if ((v60 & 1) == 0) {
            return result;
          }
          if ((v24 & 1) != 0)
          {
            uint64_t v61 = static String._fromUTF8Repairing(_:)();
            unint64_t v63 = v62;
            lazy protocol witness table accessor for type JSONError and conformance JSONError();
            swift_allocError();
            *(void *)uint64_t v64 = v61;
            *(void *)(v64 + 8) = v63;
            *(_OWORD *)(v64 + 16) = 0u;
            *(_OWORD *)(v64 + 32) = 0u;
            unint64_t v65 = 11;
LABEL_234:
            *(_BYTE *)(v64 + 48) = v65;
            return (char *)swift_willThrow();
          }

          return specialized static JSONDecoderImpl._slowpath_unwrapFixedWidthInteger<A, B>(as:json5:numberBuffer:fullSource:digitBeginning:for:_:)( v187 & 1,  (char *)v14,  v13,  a3,  v11,  v21,  (uint64_t (*)(char **))a8);
        }

        if (v13 - v17 < 1) {
          goto LABEL_290;
        }
        goto LABEL_221;
      }

      if (v19 != 101)
      {
        if (v19 == 88) {
          goto LABEL_12;
        }
LABEL_110:
        unint64_t v79 = _asciiNumbers.getter();
        uint64_t v34 = specialized static JSONError.SourceLocation.sourceLocation(at:fullSource:)(v14 + v17, a3, v11);
        uint64_t v36 = v80;
        unint64_t v38 = v81;
        if (v19 >= v79)
        {
          unint64_t v39 = HIBYTE(v79);
LABEL_112:
          if (v39 >= v19)
          {
LABEL_113:
            lazy protocol witness table accessor for type JSONError and conformance JSONError();
            swift_allocError();
            *(void *)uint64_t v64 = v34;
            *(void *)(v64 + 8) = v36;
            *(void *)(v64 + 16) = v38;
            *(void *)(v64 + 24) = 0LL;
            *(void *)(v64 + 32) = 0LL;
            *(void *)(v64 + 40) = 0LL;
            unint64_t v65 = 10;
            goto LABEL_234;
          }

          goto LABEL_184;
        }

        goto LABEL_184;
      }

              __break(1u);
LABEL_280:
              __break(1u);
LABEL_281:
              __break(1u);
            }

            __break(1u);
LABEL_283:
            __break(1u);
LABEL_284:
            __break(1u);
LABEL_285:
            __break(1u);
LABEL_286:
            __break(1u);
LABEL_287:
            __break(1u);
LABEL_288:
            __break(1u);
LABEL_289:
            __break(1u);
LABEL_290:
            __break(1u);
LABEL_291:
            __break(1u);
            goto LABEL_292;
          }

          uint64_t v24 = v132 + 1;
          if (__OFADD__(v132, 1LL)) {
            goto LABEL_264;
          }
          ++v132;
          --v131;
          if (a3 + v132 >= v128) {
            goto LABEL_213;
          }
        }

        __break(1u);
LABEL_264:
        __break(1u);
LABEL_265:
        __break(1u);
LABEL_266:
        __break(1u);
        goto LABEL_267;
      }
    }

    uint64_t v36 = v33;
    unint64_t v37 = _asciiNumbers.getter();
    unint64_t v38 = specialized static JSONError.SourceLocation.sourceLocation(at:fullSource:)(v32, a3, v183);
    unint64_t v39 = v36;
    unint64_t v41 = v40;
    uint64_t v43 = v42;
    uint64_t v44 = v39;
LABEL_232:
    lazy protocol witness table accessor for type JSONError and conformance JSONError();
    swift_allocError();
    *(_OWORD *)BOOL v60 = xmmword_1837301C0;
    *(void *)(v60 + 16) = v44;
    *(void *)(v60 + 24) = v38;
    *(void *)(v60 + 32) = v41;
    *(void *)(v60 + 40) = v43;
    goto LABEL_245;
  }

  if (!a2)
  {
LABEL_267:
    __break(1u);
    goto LABEL_268;
  }

  unsigned __int8 v19 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0LL, a1);
  if (v19 == 48)
  {
    BOOL v169 = a7;
    id v173 = (uint64_t (*)(unsigned __int8 *, uint64_t, uint64_t))a8;
    if (v14 >= 1) {
      copyfile_flags_t v20 = 1LL;
    }
    else {
      copyfile_flags_t v20 = v14;
    }
    if (v14 >= 2)
    {
      uint64_t v21 = v15 + v20;
      unint64_t v22 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0LL, v15 + v20);
      unsigned __int8 v23 = 0;
      if (v22 <= 0x57u)
      {
        uint64_t v24 = v15;
        if (v22 == 46 || v22 == 69) {
          goto LABEL_46;
        }
LABEL_109:
        unint64_t v75 = _asciiNumbers.getter();
        unint64_t v38 = specialized static JSONError.SourceLocation.sourceLocation(at:fullSource:)(v15 + v20, a3, v183);
        unint64_t v41 = v76;
        uint64_t v43 = v77;
        uint64_t v44 = v22;
        goto LABEL_232;
      }

      if (v22 == 120)
      {
LABEL_12:
        uint64_t v24 = v21 + 1;
        if (specialized static Comparable.<= infix(_:_:)(v21 + 1, v15 + v14))
        {
LABEL_13:
          id v25 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0LL, v24);
          id v26 = 1;
          if (!UInt8.isValidHexDigit.getter(v25))
          {
            uint64_t v143 = specialized static JSONError.SourceLocation.sourceLocation(at:fullSource:)(v24, a3, v183);
            uint64_t v145 = v144;
            id v147 = v146;
            lazy protocol witness table accessor for type JSONError and conformance JSONError();
            swift_allocError();
            *(_OWORD *)uint64_t v148 = xmmword_1837301C0;
            *(void *)(v148 + 16) = v25;
            *(void *)(v148 + 24) = v143;
            *(void *)(v148 + 32) = v145;
            *(void *)(v148 + 40) = v147;
            *(_BYTE *)(v148 + 48) = 1;
            return swift_willThrow();
          }

          uint64_t v27 = 0;
LABEL_75:
          uint64_t result = specialized _parseJSON5Integer<A>(_:isHex:)((unsigned __int8 *)v15, v14, v26, v169, v173);
          if ((result & 0x100000000LL) == 0) {
            return result;
          }
          if ((v27 & 1) != 0)
          {
            int64_t v57 = static String._fromUTF8Repairing(_:)();
            BOOL v59 = v58;
            lazy protocol witness table accessor for type JSONError and conformance JSONError();
            swift_allocError();
            *(void *)BOOL v60 = v57;
            *(void *)(v60 + 8) = v59;
            *(_OWORD *)(v60 + 16) = 0u;
            *(_OWORD *)(v60 + 32) = 0u;
            uint64_t v61 = 11;
LABEL_246:
            *(_BYTE *)(v60 + 48) = v61;
            return swift_willThrow();
          }

          return a9(v12 & 1, v15, v14, a3, v183, v24);
        }

        if (v14 - v20 < 1) {
          goto LABEL_290;
        }
        goto LABEL_173;
      }

      if (v22 != 101)
      {
        if (v22 == 88) {
          goto LABEL_12;
        }
        goto LABEL_109;
      }

              __break(1u);
LABEL_280:
              __break(1u);
LABEL_281:
              __break(1u);
            }

            __break(1u);
LABEL_283:
            __break(1u);
LABEL_284:
            __break(1u);
LABEL_285:
            __break(1u);
LABEL_286:
            __break(1u);
LABEL_287:
            __break(1u);
LABEL_288:
            __break(1u);
LABEL_289:
            __break(1u);
LABEL_290:
            __break(1u);
LABEL_291:
            __break(1u);
            goto LABEL_292;
          }

          uint64_t v24 = v133 + 1;
          if (__OFADD__(v133, 1LL)) {
            goto LABEL_264;
          }
          ++v133;
          --v132;
          if (a3 + v133 >= v129) {
            goto LABEL_213;
          }
        }

        __break(1u);
LABEL_264:
        __break(1u);
LABEL_265:
        __break(1u);
LABEL_266:
        __break(1u);
        goto LABEL_267;
      }
    }

    uint64_t v36 = v33;
    unint64_t v37 = _asciiNumbers.getter();
    unint64_t v38 = specialized static JSONError.SourceLocation.sourceLocation(at:fullSource:)(v32, a3, v185);
    unint64_t v39 = v36;
    unint64_t v41 = v40;
    uint64_t v43 = v42;
    uint64_t v44 = v39;
LABEL_232:
    lazy protocol witness table accessor for type JSONError and conformance JSONError();
    swift_allocError();
    *(_OWORD *)uint64_t v61 = xmmword_1837301C0;
    *(void *)(v61 + 16) = v44;
    *(void *)(v61 + 24) = v38;
    *(void *)(v61 + 32) = v41;
    *(void *)(v61 + 40) = v43;
    goto LABEL_245;
  }

  if (!a2)
  {
LABEL_267:
    __break(1u);
    goto LABEL_268;
  }

  unsigned __int8 v19 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0LL, a1);
  if (v19 == 48)
  {
    uint64_t v171 = a7;
    uint64_t v175 = (uint64_t (*)(unsigned __int8 *, uint64_t, uint64_t))a8;
    if (v14 >= 1) {
      copyfile_flags_t v20 = 1LL;
    }
    else {
      copyfile_flags_t v20 = v14;
    }
    if (v14 >= 2)
    {
      uint64_t v21 = v15 + v20;
      unint64_t v22 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0LL, v15 + v20);
      unsigned __int8 v23 = 0;
      if (v22 <= 0x57u)
      {
        uint64_t v24 = v15;
        if (v22 == 46 || v22 == 69) {
          goto LABEL_46;
        }
LABEL_109:
        uint64_t v76 = _asciiNumbers.getter();
        unint64_t v38 = specialized static JSONError.SourceLocation.sourceLocation(at:fullSource:)(v15 + v20, a3, v185);
        unint64_t v41 = v77;
        uint64_t v43 = v78;
        uint64_t v44 = v22;
        goto LABEL_232;
      }

      if (v22 == 120)
      {
LABEL_12:
        uint64_t v24 = v21 + 1;
        if (specialized static Comparable.<= infix(_:_:)(v21 + 1, v15 + v14))
        {
LABEL_13:
          id v25 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0LL, v24);
          id v26 = 1;
          if (!UInt8.isValidHexDigit.getter(v25))
          {
            uint64_t v145 = specialized static JSONError.SourceLocation.sourceLocation(at:fullSource:)(v24, a3, v185);
            id v147 = v146;
            uint64_t v149 = v148;
            lazy protocol witness table accessor for type JSONError and conformance JSONError();
            swift_allocError();
            *(_OWORD *)uint64_t v150 = xmmword_1837301C0;
            *(void *)(v150 + 16) = v25;
            *(void *)(v150 + 24) = v145;
            *(void *)(v150 + 32) = v147;
            *(void *)(v150 + 40) = v149;
            *(_BYTE *)(v150 + 48) = 1;
            return swift_willThrow();
          }

          uint64_t v27 = 0;
LABEL_75:
          uint64_t result = specialized _parseJSON5Integer<A>(_:isHex:)((unsigned __int8 *)v15, v14, v26, v171, v175);
          if ((v57 & 1) == 0) {
            return result;
          }
          if ((v27 & 1) != 0)
          {
            unint64_t v58 = static String._fromUTF8Repairing(_:)();
            BOOL v60 = v59;
            lazy protocol witness table accessor for type JSONError and conformance JSONError();
            swift_allocError();
            *(void *)uint64_t v61 = v58;
            *(void *)(v61 + 8) = v60;
            *(_OWORD *)(v61 + 16) = 0u;
            *(_OWORD *)(v61 + 32) = 0u;
            uint64_t v62 = 11;
LABEL_246:
            *(_BYTE *)(v61 + 48) = v62;
            return swift_willThrow();
          }

          return a9(v12 & 1, v15, v14, a3, v185, v24);
        }

        if (v14 - v20 < 1) {
          goto LABEL_290;
        }
        goto LABEL_173;
      }

      if (v22 != 101)
      {
        if (v22 == 88) {
          goto LABEL_12;
        }
        goto LABEL_109;
      }

      __break(1u);
LABEL_280:
      __break(1u);
LABEL_281:
      __break(1u);
LABEL_282:
      __break(1u);
LABEL_283:
      __break(1u);
LABEL_284:
      __break(1u);
      goto LABEL_285;
    }

    unint64_t v14 = v31;
LABEL_59:
    if (!v14)
    {
      while (1)
      {
LABEL_60:
        swift_unknownObjectRelease();
        swift_unknownObjectRelease();
        uint64_t v12 = v16 & 0xFFFFFFFFFFFFF0FFLL | (v27 << 8);
        uint64_t v8 = a6;
        if (v6)
        {
LABEL_13:
          swift_unknownObjectRetain();
          unsigned __int8 v15 = specialized Rope._Node.distanceFromStart<A>(to:in:)(v114, v12, v13, v6, v10);
          swift_release();
          swift_unknownObjectRelease_n();
        }

        else
        {
LABEL_61:
          swift_release();
          unsigned __int8 v15 = 0LL;
        }

        size_t v10 = a5;
        unsigned __int8 v23 = __OFSUB__(a5, v14);
        uint64_t v34 = a5 - v14;
        uint64_t result = a3;
        if (v23) {
          goto LABEL_267;
        }
        if (!a2) {
          goto LABEL_228;
        }
        id v35 = v114;
        if (!a3)
        {
LABEL_230:
          *uint64_t v103 = a4;
          v103[1] = v10;
          __int128 v103[2] = v8;
          v103[3] = v35;
          v103[4] = v12;
          v103[5] = v13;
          v103[6] = v15;
          v103[7] = v34;
          return result;
        }

        if (a3 < 0) {
          goto LABEL_274;
        }
        int v111 = 0LL;
        while (1)
        {
          uint64_t v16 = a4[8];
          uint64_t v114 = v35;
          if (v10 != v8)
          {
            if (v16) {
              unint64_t v41 = a4[10];
            }
            else {
              unint64_t v41 = 0LL;
            }
            goto LABEL_120;
          }

          if (!v16)
          {
            if (v10 > 0) {
              goto LABEL_268;
            }
            unint64_t v40 = 0LL;
            goto LABEL_118;
          }

          uint64_t v36 = a4[10];
          if (v36 < v10) {
            goto LABEL_261;
          }
          unint64_t v37 = *(unsigned __int8 *)(v16 + 18);
          unint64_t v38 = !*(_WORD *)(v16 + 16) || v36 <= v10;
          char v108 = a4[9];
          uint64_t v106 = a4[11];
          if (!v38) {
            break;
          }
          unint64_t v39 = ((-15LL << ((4 * v37 + 8) & 0x3C)) - 1) & v37 | ((unint64_t)*(unsigned __int16 *)(v16 + 16) << ((4 * v37 + 8) & 0x3C));
          swift_unknownObjectRetain();
          unint64_t v40 = 0LL;
          size_t v10 = 0LL;
LABEL_117:
          swift_unknownObjectRetain();
          specialized Rope._Node.distanceFromStart<A>(to:in:)(v106, v39, v10, v16, v108);
          uint64_t result = swift_unknownObjectRelease_n();
          uint64_t v8 = a6;
          size_t v10 = a5;
LABEL_118:
          unint64_t v41 = v10 - v40;
          if (__OFSUB__(v10, v40)) {
            goto LABEL_257;
          }
          id v35 = v114;
LABEL_120:
          if (v34 == v41)
          {
            uint64_t result = v111;
            goto LABEL_230;
          }

          if (v35 != a4[11]) {
            goto LABEL_243;
          }
          if (v13)
          {
            uint64_t v53 = (void *)(v13 + 24 * ((v12 >> ((4 * *(_BYTE *)(v13 + 18) + 8) & 0x3C)) & 0xF));
            unint64_t v54 = v53[4];
            unint64_t v55 = v53[5];
            int64_t v56 = v53[3];
            swift_bridgeObjectRetain_n();
            swift_bridgeObjectRetain_n();
            size_t v109 = v54;
            size_t v110 = v55;
          }

          else
          {
            int64_t v57 = a4[8];
            swift_unknownObjectRetain();
            specialized Rope._Node.subscript.getter(v12, v57);
            BOOL v59 = v58;
            uint64_t v61 = v60;
            uint64_t result = swift_unknownObjectRelease();
            if (v114 != a4[11]) {
              goto LABEL_260;
            }
            size_t v109 = v59;
            size_t v110 = v61;
            uint64_t v62 = a4[8];
            swift_unknownObjectRetain();
            int64_t v56 = specialized Rope._Node.subscript.getter(v12, v62);
            size_t v10 = a5;
            swift_unknownObjectRelease();
          }

          swift_bridgeObjectRelease();
          uint64_t result = swift_bridgeObjectRelease();
          unint64_t v63 = v34 + v56;
          if (__OFADD__(v34, v56)) {
            goto LABEL_244;
          }
          if (v34 >= v8) {
            uint64_t v64 = v8;
          }
          else {
            uint64_t v64 = v34;
          }
          if (v34 < v10) {
            uint64_t v64 = v10;
          }
          if (v63 <= v10) {
            unint64_t v65 = v10;
          }
          else {
            unint64_t v65 = v34 + v56;
          }
          if (v63 <= v8) {
            unint64_t v66 = v65;
          }
          else {
            unint64_t v66 = v8;
          }
          if (v64 == v66) {
            goto LABEL_245;
          }
          uint64_t v67 = v66 - v64;
          if (__OFSUB__(v66, v64)) {
            goto LABEL_246;
          }
          unint64_t v68 = a4[8];
          unint64_t v69 = a4[11];
          char v116 = v114;
          char v117 = v12;
          uint64_t v118 = v13;
          unsigned __int8 v23 = __OFADD__(v15++, 1LL);
          if (v23) {
            goto LABEL_247;
          }
          if (v114 != v69) {
            goto LABEL_248;
          }
          char v107 = v67;
          if (v13)
          {
            unint64_t v70 = *(void *)(v13 + 24 * ((v12 >> ((4 * *(_BYTE *)(v13 + 18) + 8) & 0x3C)) & 0xF) + 24);
            swift_unknownObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_retain();
          }

          else
          {
            swift_retain();
            swift_unknownObjectRetain();
            unint64_t v70 = specialized Rope._Node.subscript.getter(v12, v68);
          }

          swift_bridgeObjectRelease();
          uint64_t result = swift_bridgeObjectRelease();
          unsigned __int8 v23 = __OFADD__(v34, v70);
          v34 += v70;
          if (v23) {
            goto LABEL_249;
          }
          if (v68)
          {
            unint64_t v71 = ((-15LL << ((4 * *(_BYTE *)(v68 + 18) + 8) & 0x3C)) - 1) & (unint64_t)*(unsigned __int8 *)(v68 + 18) | ((unint64_t)*(unsigned __int16 *)(v68 + 16) << ((4 * *(_BYTE *)(v68 + 18) + 8) & 0x3C));
            uint64_t result = swift_unknownObjectRetain();
          }

          else
          {
            unint64_t v71 = 0LL;
          }

          id v35 = v114;
          if (v12 >= v71) {
            goto LABEL_250;
          }
          if (v13)
          {
            Swift::Int v72 = (4 * *(_BYTE *)(v13 + 18) + 8) & 0x3C;
            uint64_t v73 = ((v12 >> v72) & 0xF) + 1;
            if (v73 < *(unsigned __int16 *)(v13 + 16))
            {
              uint64_t v12 = (v73 << v72) | ((-15LL << v72) - 1) & v12;
              uint64_t result = swift_unknownObjectRelease_n();
              goto LABEL_162;
            }
          }

          id v74 = *(unsigned __int8 *)(v68 + 18);
          unint64_t v75 = (4 * v74 + 8) & 0x3C;
          uint64_t v76 = (v12 >> v75) & 0xF;
          unint64_t v115 = v76;
          if (v74)
          {
            swift_unknownObjectRetain();
            uint64_t v77 = specialized closure #1 in Rope._Node.formSuccessor(of:)(v68 + 24, &v115, (uint64_t)&v116, v68, v74);
            uint64_t result = swift_unknownObjectRelease();
            if ((v77 & 1) != 0)
            {
              uint64_t result = swift_unknownObjectRelease_n();
              id v35 = v116;
              uint64_t v12 = v117;
              uint64_t v13 = v118;
              goto LABEL_162;
            }
          }

          else
          {
            unint64_t v78 = v76 + 1;
            if (v76 + 1 < (unint64_t)*(unsigned __int16 *)(v68 + 16))
            {
              uint64_t result = swift_unknownObjectRelease_n();
              uint64_t v12 = (v78 << v75) | ((-15LL << v75) - 1) & v12;
              uint64_t v13 = v68;
              goto LABEL_162;
            }
          }

          if (v68)
          {
            unint64_t v79 = *(unsigned __int8 *)(v68 + 18);
            unint64_t v80 = *(unsigned __int16 *)(v68 + 16);
            uint64_t result = swift_unknownObjectRelease_n();
            uint64_t v12 = ((-15LL << ((4 * v79 + 8) & 0x3C)) - 1) & v79 | (unint64_t)(v80 << ((4 * v79 + 8) & 0x3C));
          }

          else
          {
            uint64_t v12 = 0LL;
          }

          uint64_t v13 = 0LL;
          char v116 = v114;
LABEL_162:
          if (v34 < v8)
          {
            swift_release();
LABEL_68:
            size_t v10 = a5;
            uint64_t result = a3;
            goto LABEL_69;
          }

          unint64_t v81 = a4[8];
          if (a5 != v8)
          {
            id v35 = a4[11];
            if (v81)
            {
              unsigned __int8 v15 = a4[9];
              uint64_t v34 = a4[10];
              uint64_t v95 = *(unsigned __int8 *)(v81 + 18);
              unint64_t v96 = *(unsigned __int16 *)(v81 + 16);
              swift_release();
              uint64_t v13 = 0LL;
              uint64_t v12 = ((-15LL << ((4 * v95 + 8) & 0x3C)) - 1) & v95 | (unint64_t)(v96 << ((4 * v95 + 8) & 0x3C));
            }

            else
            {
              swift_release();
              uint64_t v12 = 0LL;
              uint64_t v13 = 0LL;
              unsigned __int8 v15 = 0LL;
              uint64_t v34 = 0LL;
            }

            goto LABEL_68;
          }

          id v35 = a4[11];
          if (v81)
          {
            int64_t v82 = a4[10];
            if (v82 < a5) {
              goto LABEL_269;
            }
            int64_t v83 = a4[9];
            unint64_t v84 = *(unsigned __int8 *)(v81 + 18);
            if (*(_WORD *)(v81 + 16) && v82 > a5)
            {
              if (*(_BYTE *)(v81 + 18))
              {
                uint64_t result = swift_unknownObjectRetain_n();
                BOOL v85 = a5;
                BOOL v86 = v81;
                while (1)
                {
                  uint64_t v88 = *(unsigned __int16 *)(v86 + 16);
                  if (!*(_WORD *)(v86 + 16)) {
                    goto LABEL_171;
                  }
                  int v89 = *(void *)(v86 + 40);
                  uint64_t v90 = v85 - v89;
                  if (__OFSUB__(v85, v89)) {
                    goto LABEL_252;
                  }
                  if (__OFADD__(v90, 1LL)) {
                    goto LABEL_253;
                  }
                  if (v90 + 1 <= 0)
                  {
                    uint64_t v88 = 0LL;
                  }

                  else
                  {
                    if ((_DWORD)v88 == 1)
                    {
                      v85 -= v89;
LABEL_171:
                      if (v85) {
                        goto LABEL_251;
                      }
                      goto LABEL_172;
                    }

                    size_t v91 = *(void *)(v86 + 64);
                    unsigned __int8 v23 = __OFSUB__(v90, v91);
                    size_t v92 = v90 - v91;
                    if (v23) {
                      goto LABEL_262;
                    }
                    if (__OFADD__(v92, 1LL)) {
                      goto LABEL_263;
                    }
                    if (v92 + 1 >= 1)
                    {
                      if ((_DWORD)v88 != 2)
                      {
                        uint64_t v93 = (void *)(v86 + 88);
                        unint64_t v94 = 2LL;
                        while (v88 != v94)
                        {
                          BOOL v85 = v92 - *v93;
                          if (__OFSUB__(v92, *v93)) {
                            goto LABEL_238;
                          }
                          if (__OFADD__(v85, 1LL)) {
                            goto LABEL_239;
                          }
                          if (v85 + 1 < 1)
                          {
                            uint64_t v88 = v94;
                            BOOL v85 = v92;
                            goto LABEL_172;
                          }

                          ++v94;
                          v93 += 3;
                          size_t v92 = v85;
                          if (v88 == v94) {
                            goto LABEL_171;
                          }
                        }

LABEL_221:
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();

            goto LABEL_222;
          }

          id v307 = (void *)v69;
          unint64_t v310 = (FTSENT *)v66;
          uint64_t v309 = v66;
          uint64_t v308 = (uint64_t *)v64;
        }

        char v219 = v111;
        uint64_t v16 = (FTSENT *)v64;
        if ((POSIXErrorCode.init(rawValue:)() & 0x100000000LL) != 0) {
          goto LABEL_356;
        }
        uint64_t v220 = v312;
        static String._unconditionallyBridgeFromObjectiveC(_:)(v312);
        uint64_t v221 = (int)POSIXErrorCode.rawValue.getter();
        id v222 = objc_allocWithZone((Class)&OBJC_CLASS___NSError);
        uint64_t v223 = String._bridgeToObjectiveCImpl()();
        swift_bridgeObjectRelease();
        id v112 = objc_msgSend(v222, sel_initWithDomain_code_userInfo_, v223, v221, _NativeDictionary.bridged()());
        swift_unknownObjectRelease();
        swift_unknownObjectRelease();
        id v224 = objc_msgSend(v112, sel_domain);
        id v225 = static String._unconditionallyBridgeFromObjectiveC(_:)(v224);
        uint64_t v227 = v226;

        if (v225 == static String._unconditionallyBridgeFromObjectiveC(_:)(v220) && v227 == v228)
        {
          swift_bridgeObjectRelease_n();
          uint64_t v67 = v317;
          int v111 = v219;
        }

        else
        {
          char v229 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          uint64_t v67 = v317;
          int v111 = v219;
          if ((v229 & 1) == 0) {
            goto LABEL_332;
          }
        }

        uint64_t v64 = (uint64_t)v16;
        unint64_t v66 = (unint64_t)v310;
        unint64_t v113 = v309;
        uint64_t v114 = (uint64_t)v308;
        unint64_t v69 = (unint64_t)v307;
        goto LABEL_220;
      default:
        goto LABEL_22;
    }
  }

  __break(1u);
  return result;
}

            __break(1u);
            goto LABEL_222;
          }

          if ((void)v246 != v33[11]) {
            goto LABEL_208;
          }
          id v173 = v246;
          BOOL v168 = v100;
          BOOL v169 = v95;
          if (v100)
          {
            uint64_t v105 = v100 + 24 * ((v95 >> ((4 * *(_BYTE *)(v100 + 18) + 8) & 0x3C)) & 0xF);
            char v107 = *(void *)(v105 + 32);
            uint64_t v106 = *(void *)(v105 + 40);
            swift_bridgeObjectRetain();
            uint64_t v174 = v106;
            swift_bridgeObjectRetain();
          }

          else
          {
            char v108 = v33[8];
            swift_unknownObjectRetain();
            specialized Rope._Node.subscript.getter(v95, v108);
            char v107 = v109;
            uint64_t v174 = v110;
            unint64_t v101 = v195;
            swift_unknownObjectRelease();
          }

          swift_bridgeObjectRetain();
          int v111 = 0LL;
          id v112 = v171;
          unint64_t v192 = v107;
          unint64_t v186 = v64;
          char v189 = v85;
          while (1)
          {
            uint64_t v114 = v111 + 1;
            if (__OFADD__(v111, 1LL))
            {
              __break(1u);
LABEL_195:
              __break(1u);
              goto LABEL_196;
            }

            unint64_t v115 = *(v112 - 1);
            char v116 = *v112;
            if (*(void *)(v101 + 16))
            {
              swift_bridgeObjectRetain_n();
              char v117 = specialized __RawDictionaryStorage.find<A>(_:)(v115, v116);
              if ((v118 & 1) != 0)
              {
                outlined init with copy of AttributedString._AttributeValue( *(void *)(v101 + 56) + 72 * v117,  (uint64_t)&v216);
              }

              else
              {
                uint64_t v220 = 0LL;
                uint64_t v218 = 0u;
                char v219 = 0u;
                BOOL v216 = 0u;
                uint64_t v217 = 0u;
              }

              swift_bridgeObjectRelease();
              if (!*(void *)(v107 + 16))
              {
LABEL_148:
                BOOL v215 = 0LL;
                char v213 = 0u;
                BOOL v214 = 0u;
                char v211 = 0u;
                char v212 = 0u;
                goto LABEL_155;
              }
            }

            else
            {
              uint64_t v220 = 0LL;
              uint64_t v218 = 0u;
              char v219 = 0u;
              BOOL v216 = 0u;
              uint64_t v217 = 0u;
              swift_bridgeObjectRetain();
              if (!*(void *)(v107 + 16)) {
                goto LABEL_148;
              }
            }

            swift_bridgeObjectRetain();
            uint64_t v119 = specialized __RawDictionaryStorage.find<A>(_:)(v115, v116);
            if ((v120 & 1) != 0)
            {
              outlined init with copy of AttributedString._AttributeValue( *(void *)(v107 + 56) + 72 * v119,  (uint64_t)&v211);
            }

            else
            {
              BOOL v215 = 0LL;
              char v213 = 0u;
              BOOL v214 = 0u;
              char v211 = 0u;
              char v212 = 0u;
            }

            swift_bridgeObjectRelease();
            unint64_t v101 = v195;
LABEL_155:
            swift_bridgeObjectRelease();
            outlined init with copy of (Hashable & Sendable)?( (uint64_t)&v216,  (uint64_t)&v246,  &demangling cache variable for type metadata for AttributedString._AttributeValue?);
            outlined init with copy of (Hashable & Sendable)?( (uint64_t)&v211,  v196,  &demangling cache variable for type metadata for AttributedString._AttributeValue?);
            if (!*((void *)&v247 + 1))
            {
              if ((void)v251) {
                goto LABEL_172;
              }
              outlined destroy of Any?( (uint64_t)&v246,  &demangling cache variable for type metadata for AttributedString._AttributeValue?);
              outlined destroy of Any?( (uint64_t)&v211,  &demangling cache variable for type metadata for AttributedString._AttributeValue?);
              outlined destroy of Any?( (uint64_t)&v216,  &demangling cache variable for type metadata for AttributedString._AttributeValue?);
              goto LABEL_142;
            }

            outlined init with copy of (Hashable & Sendable)?( (uint64_t)&v246,  (uint64_t)v210,  &demangling cache variable for type metadata for AttributedString._AttributeValue?);
            if (!(void)v251) {
              goto LABEL_171;
            }
            uint64_t v121 = *(_OWORD *)(v196 + 48);
            v208[2] = *(_OWORD *)(v196 + 32);
            v208[3] = v121;
            int64_t v209 = *(void *)(v196 + 64);
            id v122 = *(_OWORD *)(v196 + 16);
            v208[0] = *(_OWORD *)v196;
            v208[1] = v122;
            outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>( (uint64_t)v210,  (uint64_t)v207);
            outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>( (uint64_t)v208,  (uint64_t)v206);
            outlined init with copy of (Hashable & Sendable)?( (uint64_t)v207,  (uint64_t)&v202,  &demangling cache variable for type metadata for (Hashable & Sendable)?);
            outlined init with copy of (Hashable & Sendable)?( (uint64_t)v206,  (uint64_t)v194,  &demangling cache variable for type metadata for (Hashable & Sendable)?);
            if (*((void *)&v203 + 1))
            {
              if (!v205)
              {
                __swift_destroy_boxed_opaque_existential_1((uint64_t)&v202);
LABEL_140:
                unint64_t v113 = 0;
                goto LABEL_141;
              }

              outlined init with take of any PredicateExpression<Self.Output == B1>(&v202, (uint64_t)v199);
              outlined init with take of any PredicateExpression<Self.Output == B1>(v194, (uint64_t)v198);
              id v123 = v200;
              unint64_t v188 = v201;
              unint64_t v187 = (unint64_t)__swift_project_boxed_opaque_existential_1(v199, v200);
              unint64_t v191 = v159;
              id v124 = *(void *)(v123 - 8);
              MEMORY[0x1895F8858](v187);
              uint64_t v126 = (char *)v159 - ((v125 + 15) & 0xFFFFFFFFFFFFFFF0LL);
              outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>( (uint64_t)v198,  (uint64_t)&v197);
              uint64_t v127 = type metadata accessor for Optional();
              *(void *)&char v190 = v159;
              char v128 = *(void *)(v127 - 8);
              MEMORY[0x1895F8858](v127);
              uint64_t v130 = (char *)v159 - v129;
              __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Hashable & Sendable);
              uint64_t v131 = swift_dynamicCast();
              size_t v132 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v124 + 56);
              if (v131)
              {
                v132(v130, 0LL, 1LL, v123);
                (*(void (**)(char *, char *, uint64_t))(v124 + 32))(v126, v130, v123);
                unint64_t v113 = dispatch thunk of static Equatable.== infix(_:_:)();
                (*(void (**)(char *, uint64_t))(v124 + 8))(v126, v123);
              }

              else
              {
                v132(v130, 1LL, 1LL, v123);
                (*(void (**)(char *, uint64_t))(v128 + 8))(v130, v127);
                unint64_t v113 = 0;
              }

              uint64_t v64 = v186;
              __swift_destroy_boxed_opaque_existential_1((uint64_t)v198);
              __swift_destroy_boxed_opaque_existential_1((uint64_t)v199);
              BOOL v85 = v189;
              unint64_t v101 = v195;
            }

            else
            {
              if (v205)
              {
                outlined destroy of Any?( (uint64_t)v194,  &demangling cache variable for type metadata for (Hashable & Sendable)?);
                goto LABEL_140;
              }

              unint64_t v113 = 1;
            }

          swift_bridgeObjectRelease();
          uint64_t v6 = 0LL;
          if ((v235 & 1) != 0)
          {
LABEL_177:
            swift_bridgeObjectRelease();
            goto LABEL_178;
          }
        }
      }

      else
      {
        specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v234, v229);
        uint64_t v236 = v228;
        uint64_t v237 = specialized __RawDictionaryStorage.find<A>(_:)(v225, v227);
        if ((v235 & 1) != (v238 & 1)) {
          goto LABEL_242;
        }
        uint64_t v231 = v237;
        uint64_t v6 = 0LL;
        if ((v235 & 1) != 0) {
          goto LABEL_177;
        }
      }

      *(void *)(v236 + 8 * (v231 >> 6) + 64) |= 1LL << v231;
      unint64_t v239 = (uint64_t *)(*(void *)(v236 + 48) + 16 * v231);
      void *v239 = v225;
      v239[1] = v227;
      uint64_t v240 = *(void *)(v236 + 56) + 24 * v231;
      *(void *)uint64_t v240 = v290;
      *(void *)(v240 + 8) = v287;
      *(_BYTE *)(v240 + 16) = v216;
      uint64_t v241 = *(void *)(v236 + 16);
      uint64_t v130 = __OFADD__(v241, 1LL);
      uint64_t v242 = v241 + 1;
      if (v130) {
        goto LABEL_227;
      }
      *(void *)(v236 + 16) = v242;
LABEL_178:
      uint64_t v296 = v236;
      swift_bridgeObjectRelease();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v292);
      char v207 = JSONMap.loadValue(at:)(a1);
      char v208 = v210;
      int64_t v209 = v211;
      if (v211 > 0xFDu) {
        goto LABEL_12;
      }
    }
  }

  swift_retain();
  uint64_t v11 = JSONMap.loadValue(at:)(a1);
  if (v13 > 0xFDu)
  {
LABEL_7:
    swift_release();
    return v296;
  }

  unsigned __int8 v23 = v11;
  uint64_t v24 = v12;
  id v25 = v13;
  while (2)
  {
    unint64_t v28 = JSONMap.offset(after:)(a1);
    unint64_t v29 = JSONMap.loadValue(at:)(v28);
    id v269 = v30;
    uint64_t v268 = v31;
    if (v31 > 0xFDu) {
      goto LABEL_238;
    }
    uint64_t v32 = v29;
    unint64_t v33 = JSONMap.offset(after:)(v28);
    uint64_t v34 = specialized JSONDecoderImpl.unwrapString<A>(from:for:_:)(v23, v24, v25, a4, 0LL, 0LL, 0LL, 255);
    if (v6) {
      goto LABEL_244;
    }
    if ((v35 & 0x2000000000000000LL) != 0) {
      uint64_t v36 = HIBYTE(v35) & 0xF;
    }
    else {
      uint64_t v36 = v34 & 0xFFFFFFFFFFFFLL;
    }
    id v270 = v33;
    id v267 = v32;
    if (!v36)
    {
      unint64_t v41 = v34;
      Swift::Int v42 = v35;
      goto LABEL_95;
    }

    unint64_t v37 = 0LL;
    id v283 = 4 * v36;
    id v285 = v35;
    unint64_t v38 = 15LL;
    uint64_t v288 = v34;
    while (1)
    {
      if (String.subscript.getter() == 95 && v40 == 0xE100000000000000LL)
      {
        swift_bridgeObjectRelease();
        goto LABEL_25;
      }

      unint64_t v39 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if ((v39 & 1) == 0) {
        break;
      }
LABEL_25:
      unint64_t v38 = String.index(after:)();
      unint64_t v37 = v38 >> 14;
      if (v38 >> 14 == v283)
      {
        unint64_t v41 = v288;
        Swift::Int v42 = v285;
LABEL_94:
        uint64_t v6 = 0LL;
        goto LABEL_95;
      }
    }

    uint64_t v43 = (unint64_t)String.index(before:)() >> 14;
    if (v37 >= v43) {
      goto LABEL_50;
    }
    if (String.subscript.getter() == 95 && v44 == 0xE100000000000000LL)
    {
      swift_bridgeObjectRelease();
    }

    else
    {
      unsigned __int8 v46 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if ((v46 & 1) == 0) {
        goto LABEL_50;
      }
    }

    uint64_t v43 = (unint64_t)String.index(before:)() >> 14;
    if (v37 < v43)
    {
      if (String.subscript.getter() == 95 && v47 == 0xE100000000000000LL) {
        goto LABEL_44;
      }
      uint64_t v48 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if ((v48 & 1) != 0)
      {
        while (1)
        {
          uint64_t v43 = (unint64_t)String.index(before:)() >> 14;
          if (v37 >= v43) {
            break;
          }
          if (String.subscript.getter() == 95 && v49 == 0xE100000000000000LL)
          {
LABEL_44:
            swift_bridgeObjectRelease();
          }

          else
          {
            uint64_t v50 = _stringCompareWithSmolCheck(_:_:expecting:)();
            swift_bridgeObjectRelease();
            if ((v50 & 1) == 0) {
              break;
            }
          }
        }
      }
    }

  __break(1u);
LABEL_222:
  __break(1u);
LABEL_223:
  __break(1u);
LABEL_224:
  __break(1u);
LABEL_225:
  __break(1u);
LABEL_226:
  __break(1u);
LABEL_227:
  __break(1u);
LABEL_228:
  __break(1u);
LABEL_229:
  __break(1u);
LABEL_230:
  __break(1u);
  return result;
}

uint64_t specialized closure #1 in static _FileOperations.linkOrCopyFile<A>(_:dst:with:delegate:)( uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char v17 = a7 & 1;
  int v18 = HIDWORD(a7);
  uint64_t v19 = a8;
  if (a1)
  {
    uint64_t v8 = MEMORY[0x1895F8858](a1);
    void v15[2] = v9;
    v15[3] = v10;
    v15[4] = v8;
    v15[5] = v11;
    v15[6] = &v17;
    return specialized String.withFileSystemRepresentation<A>(_:)( (uint64_t (*)(char *))partial apply for specialized closure #1 in closure #1 in static _FileOperations.linkOrCopyFile<A>(_:dst:with:delegate:),  (uint64_t)v15,  v9,  v10);
  }

  else
  {
    swift_bridgeObjectRetain();
    specialized CocoaError.init<A>(_:path:underlying:variant:source:destination:)( (uint64_t (*)(void))0x104,  a2,  a3,  0LL,  0LL,  0LL,  0LL,  0LL,  (void *(*)(void *__return_ptr, void *, uint64_t))&v16,  0LL,  0LL);
    return swift_willThrow();
  }

uint64_t specialized closure #1 in static _FileOperations.linkOrCopyFile<A>(_:dst:with:delegate:)( uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, char a7, uint64_t a8)
{
  char v17 = a7;
  uint64_t v18 = a8;
  if (a1)
  {
    uint64_t v8 = MEMORY[0x1895F8858](a1);
    void v15[2] = v9;
    v15[3] = v10;
    v15[4] = v8;
    v15[5] = v11;
    v15[6] = &v17;
    return specialized String.withFileSystemRepresentation<A>(_:)( (uint64_t (*)(char *))partial apply for specialized closure #1 in closure #1 in static _FileOperations.linkOrCopyFile<A>(_:dst:with:delegate:),  (uint64_t)v15,  v9,  v10);
  }

  else
  {
    swift_bridgeObjectRetain();
    specialized CocoaError.init<A>(_:path:underlying:variant:source:destination:)( (uint64_t (*)(void))0x104,  a2,  a3,  0LL,  0LL,  0LL,  0LL,  0LL,  (void *(*)(void *__return_ptr, void *, uint64_t))&v16,  0LL,  0LL);
    return swift_willThrow();
  }

uint64_t specialized closure #1 in static _FileOperations.linkOrCopyFile<A>(_:dst:with:delegate:)( uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, unsigned __int8 *a7)
{
  return specialized closure #1 in static _FileOperations.linkOrCopyFile<A>(_:dst:with:delegate:)( a1,  a2,  a3,  a4,  a5,  a6,  *a7 | ((unint64_t)*((unsigned int *)a7 + 1) << 32),  *((void *)a7 + 1));
}

uint64_t specialized closure #1 in closure #1 in static _FileOperations.linkOrCopyFile<A>(_:dst:with:delegate:)( char *a1, uint64_t a2, unint64_t a3, const char *a4, uint64_t a5, unsigned __int8 *a6)
{
  if (a1) {
    return specialized static _FileOperations._linkOrCopyFile<A>(_:_:with:delegate:)( a4,  a1,  *a6 | ((unint64_t)*((unsigned int *)a6 + 1) << 32),  *((void **)a6 + 1));
  }
  swift_bridgeObjectRetain();
  specialized CocoaError.init<A>(_:path:underlying:variant:source:destination:)( (uint64_t (*)(void))4,  a2,  a3,  0LL,  0LL,  0LL,  0LL,  0LL,  (void *(*)(void *__return_ptr, void *, uint64_t))&v9,  0LL,  0LL);
  return swift_willThrow();
}

uint64_t specialized closure #1 in closure #1 in static _FileOperations.linkOrCopyFile<A>(_:dst:with:delegate:)( char *a1, uint64_t a2, unint64_t a3, const char *a4, uint64_t a5, uint64_t a6)
{
  if (a1) {
    return specialized static _FileOperations._linkOrCopyFile<A>(_:_:with:delegate:)( a4,  a1,  *(_BYTE *)a6,  *(void **)(a6 + 8));
  }
  swift_bridgeObjectRetain();
  specialized CocoaError.init<A>(_:path:underlying:variant:source:destination:)( (uint64_t (*)(void))4,  a2,  a3,  0LL,  0LL,  0LL,  0LL,  0LL,  (void *(*)(void *__return_ptr, void *, uint64_t))&v9,  0LL,  0LL);
  return swift_willThrow();
}

uint64_t specialized static _FileOperations._removeFile(_:_:with:)( const char *a1, uint64_t a2, unint64_t a3, void *a4)
{
  uint64_t v63 = *MEMORY[0x1895F89C0];
  removefile_state_t v8 = removefile_state_alloc();
  if (!v8) {
LABEL_54:
  }
    __break(1u);
  uint64_t v9 = v8;
  type metadata accessor for _FileOperations._FileRemoveContext();
  unint64_t v10 = (void *)swift_allocObject();
  void v10[2] = 0LL;
  v10[3] = a4;
  id v11 = a4;
  removefile_state_set(v9, 2u, v10);
  removefile_state_set(v9, 1u, @objc closure #1 in closure #1 in static _FileOperations._removeFile(_:_:with:));
  removefile_state_set(v9, 4u, v10);
  removefile_state_set(v9, 3u, @objc closure #2 in closure #1 in static _FileOperations._removeFile(_:_:with:));
  if (removefile(a1, v9, 1u) < 0)
  {
    uint64_t v60 = a2;
    if (MEMORY[0x186E1B0E8]())
    {
      int v13 = MEMORY[0x186E1B0E8]();
      uint64_t v14 = 4LL;
      switch(v13)
      {
        case 1:
        case 13:
          uint64_t v14 = 513LL;
          goto LABEL_22;
        case 2:
          goto LABEL_22;
        case 3:
        case 4:
        case 5:
        case 6:
        case 7:
        case 8:
        case 9:
        case 10:
        case 11:
        case 12:
        case 14:
        case 15:
        case 16:
        case 18:
        case 19:
        case 20:
        case 21:
        case 22:
        case 23:
        case 24:
        case 25:
        case 26:
        case 27:
        case 29:
        case 31:
        case 32:
        case 33:
        case 34:
        case 35:
        case 36:
        case 37:
        case 38:
        case 39:
        case 40:
        case 41:
        case 42:
        case 43:
        case 44:
        case 45:
        case 46:
        case 47:
        case 48:
        case 49:
        case 50:
        case 51:
        case 52:
        case 53:
        case 54:
        case 55:
        case 56:
        case 57:
        case 58:
        case 59:
        case 60:
        case 61:
        case 62:
        case 64:
        case 65:
        case 67:
        case 68:
          goto LABEL_13;
        case 17:
          uint64_t v14 = 516LL;
          goto LABEL_22;
        case 28:
        case 69:
          uint64_t v14 = 640LL;
          goto LABEL_22;
        case 30:
          uint64_t v14 = 642LL;
          goto LABEL_22;
        case 63:
          uint64_t v14 = 514LL;
          goto LABEL_22;
        case 66:
          if ((POSIXErrorCode.init(rawValue:)() & 0x100000000LL) != 0) {
            goto LABEL_55;
          }
          static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSPOSIXErrorDomain");
          uint64_t v17 = (int)POSIXErrorCode.rawValue.getter();
          id v18 = objc_allocWithZone((Class)&OBJC_CLASS___NSError);
          uint64_t v19 = String._bridgeToObjectiveCImpl()();
          swift_bridgeObjectRelease();
          id v20 = objc_msgSend(v18, sel_initWithDomain_code_userInfo_, v19, v17, _NativeDictionary.bridged()());
          swift_unknownObjectRelease();
          swift_unknownObjectRelease();
          id v21 = objc_msgSend(v20, sel_domain);
          id v22 = static String._unconditionallyBridgeFromObjectiveC(_:)(v21);
          uint64_t v24 = v23;

          if (v22 == static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSPOSIXErrorDomain") && v24 == v25)
          {
            swift_bridgeObjectRelease_n();
LABEL_47:
            swift_bridgeObjectRetain();
            uint64_t v52 = 513LL;
            uint64_t v53 = a2;
            unint64_t v54 = a3;
LABEL_50:
            unint64_t v55 = v20;
            goto LABEL_44;
          }

          char v56 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if ((v56 & 1) != 0) {
            goto LABEL_47;
          }
          break;
        default:
          if (v13 == 102) {
            goto LABEL_28;
          }
LABEL_13:
          uint64_t v14 = 512LL;
LABEL_22:
          unint64_t v59 = a3;
          if ((POSIXErrorCode.init(rawValue:)() & 0x100000000LL) != 0) {
            goto LABEL_55;
          }
          static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSPOSIXErrorDomain");
          uint64_t v26 = (int)POSIXErrorCode.rawValue.getter();
          id v27 = objc_allocWithZone((Class)&OBJC_CLASS___NSError);
          uint64_t v28 = String._bridgeToObjectiveCImpl()();
          swift_bridgeObjectRelease();
          id v16 = objc_msgSend(v27, sel_initWithDomain_code_userInfo_, v28, v26, _NativeDictionary.bridged()());
          swift_unknownObjectRelease();
          swift_unknownObjectRelease();
          id v29 = objc_msgSend(v16, sel_domain);
          id v30 = static String._unconditionallyBridgeFromObjectiveC(_:)(v29);
          uint64_t v32 = v31;

          if (v30 == static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSPOSIXErrorDomain") && v32 == v33) {
            goto LABEL_40;
          }
          a2 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          a3 = v59;
          if ((a2 & 1) != 0) {
            goto LABEL_42;
          }
          __break(1u);
          goto LABEL_27;
      }

      goto LABEL_52;
    }

    LODWORD(dst) = 0;
    removefile_state_get(v9, 5u, &dst);
    LODWORD(v16) = dst;
    uint64_t v14 = 4LL;
    switch((int)dst)
    {
      case 1:
      case 13:
        uint64_t v14 = 513LL;
        goto LABEL_37;
      case 2:
        goto LABEL_37;
      case 3:
      case 4:
      case 5:
      case 6:
      case 7:
      case 8:
      case 9:
      case 10:
      case 11:
      case 12:
      case 14:
      case 15:
      case 16:
      case 18:
      case 19:
      case 20:
      case 21:
      case 22:
      case 23:
      case 24:
      case 25:
      case 26:
      case 27:
      case 29:
      case 31:
      case 32:
      case 33:
      case 34:
      case 35:
      case 36:
      case 37:
      case 38:
      case 39:
      case 40:
      case 41:
      case 42:
      case 43:
      case 44:
      case 45:
      case 46:
      case 47:
      case 48:
      case 49:
      case 50:
      case 51:
      case 52:
      case 53:
      case 54:
      case 55:
      case 56:
      case 57:
      case 58:
      case 59:
      case 60:
      case 61:
      case 62:
      case 64:
      case 65:
      case 67:
      case 68:
        goto LABEL_29;
      case 17:
        uint64_t v14 = 516LL;
        goto LABEL_37;
      case 28:
      case 69:
        uint64_t v14 = 640LL;
        goto LABEL_37;
      case 30:
        uint64_t v14 = 642LL;
        goto LABEL_37;
      case 63:
        uint64_t v14 = 514LL;
        goto LABEL_37;
      case 66:
        if ((POSIXErrorCode.init(rawValue:)() & 0x100000000LL) != 0) {
          goto LABEL_55;
        }
        static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSPOSIXErrorDomain");
        uint64_t v34 = (int)POSIXErrorCode.rawValue.getter();
        id v35 = objc_allocWithZone((Class)&OBJC_CLASS___NSError);
        uint64_t v36 = String._bridgeToObjectiveCImpl()();
        swift_bridgeObjectRelease();
        id v20 = objc_msgSend(v35, sel_initWithDomain_code_userInfo_, v36, v34, _NativeDictionary.bridged()());
        swift_unknownObjectRelease();
        swift_unknownObjectRelease();
        id v37 = objc_msgSend(v20, sel_domain);
        id v38 = static String._unconditionallyBridgeFromObjectiveC(_:)(v37);
        uint64_t v40 = v39;

        if (v38 == static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSPOSIXErrorDomain") && v40 == v41)
        {
          swift_bridgeObjectRelease_n();
          unint64_t v42 = a3;
        }

        else
        {
          char v57 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          unint64_t v42 = a3;
          if ((v57 & 1) == 0)
          {
LABEL_53:
            __break(1u);
            goto LABEL_54;
          }
        }

        swift_bridgeObjectRetain();
        uint64_t v52 = 513LL;
        uint64_t v53 = v60;
        unint64_t v54 = v42;
        goto LABEL_50;
      default:
LABEL_27:
        if ((_DWORD)v16 == 102)
        {
LABEL_28:
          id v16 = 0LL;
          uint64_t v14 = 512LL;
        }

        else
        {
LABEL_29:
          uint64_t v14 = 512LL;
LABEL_37:
          unint64_t v59 = a3;
          if ((POSIXErrorCode.init(rawValue:)() & 0x100000000LL) != 0)
          {
            while (1)
            {
LABEL_55:
              unint64_t dst = 0LL;
              unint64_t v62 = 0xE000000000000000LL;
              _StringGuts.grow(_:)(22LL);
              swift_bridgeObjectRelease();
              unint64_t dst = 0xD000000000000014LL;
              unint64_t v62 = 0x80000001839C9190LL;
              v58._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
              String.append(_:)(v58);
              swift_bridgeObjectRelease();
              _assertionFailure(_:_:file:line:flags:)();
              __break(1u);
            }
          }

          static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSPOSIXErrorDomain");
          uint64_t v43 = (int)POSIXErrorCode.rawValue.getter();
          id v44 = objc_allocWithZone((Class)&OBJC_CLASS___NSError);
          uint64_t v45 = String._bridgeToObjectiveCImpl()();
          swift_bridgeObjectRelease();
          id v16 = objc_msgSend(v44, sel_initWithDomain_code_userInfo_, v45, v43, _NativeDictionary.bridged()());
          swift_unknownObjectRelease();
          swift_unknownObjectRelease();
          id v46 = objc_msgSend(v16, sel_domain);
          id v47 = static String._unconditionallyBridgeFromObjectiveC(_:)(v46);
          uint64_t v49 = v48;

          if (v47 == static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSPOSIXErrorDomain") && v49 == v50)
          {
LABEL_40:
            swift_bridgeObjectRelease_n();
            a3 = v59;
          }

          else
          {
            char v51 = _stringCompareWithSmolCheck(_:_:expecting:)();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            if ((v51 & 1) == 0)
            {
              __break(1u);
LABEL_52:
              __break(1u);
              goto LABEL_53;
            }
          }

void specialized static _FileOperations.moveFile(_:to:with:options:)(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v6 = *(void **)a1;
  uint64_t v5 = *(uint64_t **)(a1 + 8);
  uint64_t v7 = *(void *)(a1 + 16);
  uint64_t v9 = *(void **)a2;
  removefile_state_t v8 = *(void **)(a2 + 8);
  uint64_t v10 = *(void *)(a2 + 16);
  int64_t v83 = *(void **)a1;
  unint64_t v84 = v5;
  uint64_t v85 = v7;
  BOOL v86 = v9;
  uint64_t v87 = v8;
  uint64_t v88 = v10;
  int v89 = a3;
  if (_foundation_swift_url_feature_enabled())
  {
    uint64_t v93 = v7;
    swift_retain();
    id v11 = v6;
    swift_retain();
    Swift::String v12 = URL.path(percentEncoded:)(1);
    uint64_t countAndFlagsBits = v12._countAndFlagsBits;
    Swift::String v92 = v12;
    swift_bridgeObjectRetain();
    unint64_t v81 = v5;
    int64_t v82 = (void *)v7;
    if (String.count.getter() <= 1)
    {
      unint64_t object = (unint64_t)v12._object;
    }

    else
    {
      unint64_t object = (unint64_t)v12._object;
      if ((specialized BidirectionalCollection.last.getter(v12._countAndFlagsBits, (unint64_t)v12._object) & 0x1FF) == 0x2F)
      {
        specialized RangeReplaceableCollection<>.popLast()();
        swift_bridgeObjectRelease();
        uint64_t countAndFlagsBits = v92._countAndFlagsBits;
        unint64_t object = (unint64_t)v92._object;
      }
    }

    uint64_t v90 = Set.init(minimumCapacity:)();
    uint64_t v22 = specialized Set._Variant.insert(_:)(&v94, 0x2FuLL);
    uint64_t v23 = v90;
    uint64_t v24 = HIBYTE(object) & 0xF;
    if ((object & 0x2000000000000000LL) == 0) {
      uint64_t v24 = countAndFlagsBits & 0xFFFFFFFFFFFFLL;
    }
    if (v24)
    {
      uint64_t v90 = countAndFlagsBits;
      unint64_t v91 = object;
      MEMORY[0x1895F8858](v22);
      unint64_t v75 = &v90;
      uint64_t v76 = v23;
      swift_bridgeObjectRetain();
      uint64_t v25 = (uint64_t (*)())specialized String.UTF8View.withContiguousStorageIfAvailable<A>(_:)( (void *(*)(__int128 *__return_ptr, void *, uint64_t))closure #1 in StringProtocol.removingURLPercentEncoding(excluding:)specialized partial apply,  (uint64_t)v74,  countAndFlagsBits,  object);
      if (v26 == 1)
      {
        Swift::Int v27 = v90;
        unint64_t v28 = v91;
        swift_bridgeObjectRetain();
        id v29 = specialized StringProtocol.removingURLPercentEncoding<A>(utf8Buffer:excluding:)(v27, v28, v23);
        unint64_t v31 = v30;
        swift_bridgeObjectRelease();
      }

      else
      {
        id v29 = v25;
        unint64_t v31 = v26;
      }

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (!v31)
      {
        swift_release();
        swift_release();

        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        id v29 = 0LL;
        unint64_t v31 = 0xE000000000000000LL;
        goto LABEL_26;
      }
    }

    else
    {
      swift_bridgeObjectRelease();
      id v29 = 0LL;
      unint64_t v31 = 0xE000000000000000LL;
    }

    swift_release();
    swift_release();

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
LABEL_26:
    _sSS10FoundationE28withFileSystemRepresentationyxxSPys4Int8VGSgKXEKlFyt_Tg5031_s10Foundation3URLV34withUnsafecd22RepresentationyxxSPys4F25VGSgKXEKlFxAHKXEfU_yt_Tg5AFxs5Error_pRi_zRi0_zlyytIsgyrzo_Tf1ncn_n( (uint64_t)v29,  v31,  (uint64_t (*)(char *))partial apply for closure #1 in static _FileOperations.moveFile(_:to:with:options:));
    swift_bridgeObjectRelease();
    return;
  }

  uint64_t v80 = v3;
  id v15 = v6;
  id v16 = (const char *)objc_msgSend(v15, sel_fileSystemRepresentation);
  if (v16)
  {
    uint64_t v17 = v16;
    unint64_t v79 = &v77;
    v73[2] = v9;
    v73[3] = v8;
    v73[4] = v10;
    v73[5] = a3;
    v74[0] = MEMORY[0x1895F8858](v16);
    v74[1] = v15;
    unint64_t v75 = v5;
    uint64_t v76 = v7;
    if (!_foundation_swift_url_feature_enabled())
    {
      id v38 = v9;
      closure #1 in closure #1 in static _FileOperations.moveFile(_:to:with:options:)( (const char *)objc_msgSend(v38, sel_fileSystemRepresentation),  v38,  v8,  v10,  a3,  v17,  v15,  v5,  v7);
      return;
    }

    int64_t v82 = v73;
    v92._uint64_t countAndFlagsBits = (uint64_t)v9;
    v92._unint64_t object = v8;
    uint64_t v93 = v10;
    swift_retain();
    id v18 = v9;
    swift_retain();
    Swift::String v19 = URL.path(percentEncoded:)(1);
    uint64_t v20 = v19._countAndFlagsBits;
    Swift::String v92 = v19;
    swift_bridgeObjectRetain();
    if (String.count.getter() <= 1)
    {
      unint64_t v21 = (unint64_t)v19._object;
    }

    else
    {
      unint64_t v21 = (unint64_t)v19._object;
      if ((specialized BidirectionalCollection.last.getter(v19._countAndFlagsBits, (unint64_t)v19._object) & 0x1FF) == 0x2F)
      {
        specialized RangeReplaceableCollection<>.popLast()();
        swift_bridgeObjectRelease();
        uint64_t v20 = v92._countAndFlagsBits;
        unint64_t v21 = (unint64_t)v92._object;
      }
    }

    uint64_t v90 = Set.init(minimumCapacity:)();
    uint64_t v51 = specialized Set._Variant.insert(_:)(&v94, 0x2FuLL);
    uint64_t v52 = v90;
    uint64_t v53 = HIBYTE(v21) & 0xF;
    if ((v21 & 0x2000000000000000LL) == 0) {
      uint64_t v53 = v20 & 0xFFFFFFFFFFFFLL;
    }
    if (v53)
    {
      unint64_t v81 = v18;
      uint64_t v90 = v20;
      unint64_t v91 = v21;
      MEMORY[0x1895F8858](v51);
      v72[2] = &v90;
      v72[3] = v52;
      swift_bridgeObjectRetain();
      unint64_t v54 = (uint64_t (*)())specialized String.UTF8View.withContiguousStorageIfAvailable<A>(_:)( (void *(*)(__int128 *__return_ptr, void *, uint64_t))closure #1 in StringProtocol.removingURLPercentEncoding(excluding:)specialized partial apply,  (uint64_t)v72,  v20,  v21);
      if (v55 == 1)
      {
        Swift::Int v56 = v90;
        unint64_t v57 = v91;
        swift_bridgeObjectRetain();
        Swift::String v58 = specialized StringProtocol.removingURLPercentEncoding<A>(utf8Buffer:excluding:)(v56, v57, v52);
        unint64_t v60 = v59;
        swift_bridgeObjectRelease();
      }

      else
      {
        Swift::String v58 = v54;
        unint64_t v60 = v55;
      }

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      id v18 = v81;
      if (!v60)
      {
        swift_release();
        swift_release();

        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        Swift::String v58 = 0LL;
        unint64_t v60 = 0xE000000000000000LL;
        goto LABEL_48;
      }
    }

    else
    {
      swift_bridgeObjectRelease();
      Swift::String v58 = 0LL;
      unint64_t v60 = 0xE000000000000000LL;
    }

    swift_release();
    swift_release();

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
LABEL_48:
    _sSS10FoundationE28withFileSystemRepresentationyxxSPys4Int8VGSgKXEKlFyt_Tg5031_s10Foundation3URLV34withUnsafecd22RepresentationyxxSPys4F25VGSgKXEKlFxAHKXEfU_yt_Tg5AFxs5Error_pRi_zRi0_zlyytIsgyrzo_Tf1ncn_n( (uint64_t)v58,  v60,  (uint64_t (*)(char *))partial apply for closure #1 in closure #1 in static _FileOperations.moveFile(_:to:with:options:));
    swift_bridgeObjectRelease();
    return;
  }

  swift_retain_n();
  id v32 = v15;
  swift_retain_n();
  id v33 = v32;
  if (_foundation_swift_url_feature_enabled())
  {
    uint64_t v93 = v7;
    uint64_t v34 = (uint64_t *)v33;
    swift_retain();
    swift_retain();
    Swift::String v35 = URL.path(percentEncoded:)(1);
    uint64_t v36 = v35._countAndFlagsBits;
    Swift::String v92 = v35;
    swift_bridgeObjectRetain();
    unint64_t v79 = v34;
    if (String.count.getter() <= 1)
    {
      unint64_t v37 = (unint64_t)v35._object;
    }

    else
    {
      unint64_t v37 = (unint64_t)v35._object;
      if ((specialized BidirectionalCollection.last.getter(v35._countAndFlagsBits, (unint64_t)v35._object) & 0x1FF) == 0x2F)
      {
        specialized RangeReplaceableCollection<>.popLast()();
        swift_bridgeObjectRelease();
        uint64_t v36 = v92._countAndFlagsBits;
        unint64_t v37 = (unint64_t)v92._object;
      }
    }

    uint64_t v90 = Set.init(minimumCapacity:)();
    uint64_t v61 = specialized Set._Variant.insert(_:)(&v94, 0x2FuLL);
    uint64_t v62 = v90;
    uint64_t v63 = HIBYTE(v37) & 0xF;
    if ((v37 & 0x2000000000000000LL) == 0) {
      uint64_t v63 = v36 & 0xFFFFFFFFFFFFLL;
    }
    if (v63)
    {
      id v78 = v33;
      uint64_t v90 = v36;
      unint64_t v91 = v37;
      MEMORY[0x1895F8858](v61);
      unint64_t v75 = &v90;
      uint64_t v76 = v62;
      swift_bridgeObjectRetain();
      specialized String.UTF8View.withContiguousStorageIfAvailable<A>(_:)( (void *(*)(__int128 *__return_ptr, void *, uint64_t))partial apply for specialized closure #1 in StringProtocol.removingURLPercentEncoding(excluding:),  (uint64_t)v74,  v36,  v37);
      if (v64 == 1)
      {
        Swift::Int v65 = v90;
        unint64_t v66 = v91;
        swift_bridgeObjectRetain();
        specialized StringProtocol.removingURLPercentEncoding<A>(utf8Buffer:excluding:)(v65, v66, v62);
        swift_bridgeObjectRelease();
      }

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      id v33 = v78;
      unint64_t v68 = v79;
    }

    else
    {
      swift_bridgeObjectRelease();
      unint64_t v68 = v79;
    }

    swift_release();
    swift_release();

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
  }

  else
  {
    id v39 = objc_msgSend(v33, sel__parameterString);
    if (v39)
    {
      uint64_t v40 = v39;
      id v41 = static String._unconditionallyBridgeFromObjectiveC(_:)(v39);
      uint64_t v43 = v42;

      if (getEnumTag for _DarwinSearchPathsSequence.Iterator.State()
        && (id v44 = objc_msgSend(v33, sel_path)) != 0)
      {
        uint64_t v45 = v44;
        id v46 = static String._unconditionallyBridgeFromObjectiveC(_:)(v44);
        uint64_t v48 = v47;

        v92._uint64_t countAndFlagsBits = (uint64_t)v46;
        v92._unint64_t object = v48;
        swift_bridgeObjectRetain();
        v49._uint64_t countAndFlagsBits = 59LL;
        v49._unint64_t object = (void *)0xE100000000000000LL;
        String.append(_:)(v49);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRetain();
        v50._uint64_t countAndFlagsBits = (uint64_t)v41;
        v50._unint64_t object = v43;
        String.append(_:)(v50);
        swift_release();
        swift_release();

        swift_bridgeObjectRelease();
      }

      else
      {
        v92._uint64_t countAndFlagsBits = 59LL;
        v92._unint64_t object = (void *)0xE100000000000000LL;
        v69._uint64_t countAndFlagsBits = (uint64_t)v41;
        v69._unint64_t object = v43;
        String.append(_:)(v69);
        swift_release();
        swift_release();
      }

      swift_bridgeObjectRelease();
      goto LABEL_57;
    }

    uint64_t v67 = (uint64_t *)objc_msgSend(v33, sel_path);
    if (!v67)
    {
      swift_release();
      swift_release();

      goto LABEL_57;
    }

    unint64_t v68 = v67;
    static String._unconditionallyBridgeFromObjectiveC(_:)(v67);
    swift_release();
    swift_release();
  }

LABEL_57:
  unint64_t v70 = (void *)objc_opt_self();
  uint64_t v71 = String._bridgeToObjectiveCImpl()();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
   objc_msgSend( v70,  sel__cocoaErrorWithCode_path_url_underlying_variant_source_destination_,  4,  v71,  v33,  0,  0,  0,  0);
  swift_unknownObjectRelease();

  swift_willThrow();
}

void partial apply for closure #1 in static _FileOperations.moveFile(_:to:with:options:)(const char *a1)
{
}

void partial apply for closure #1 in closure #1 in static _FileOperations.moveFile(_:to:with:options:)( const char *a1)
{
}

{
  uint64_t v1;
  closure #1 in closure #1 in static _FileOperations.moveFile(_:to:with:options:)( a1,  *(void **)(v1 + 16),  *(void **)(v1 + 24),  *(void *)(v1 + 32),  *(void **)(v1 + 40),  *(const char **)(v1 + 48),  *(void **)(v1 + 56),  *(void **)(v1 + 64),  *(void *)(v1 + 72));
}

uint64_t partial apply for specialized closure #1 in static _FileOperations.linkOrCopyFile<A>(_:dst:with:delegate:)( uint64_t a1)
{
  return specialized closure #1 in static _FileOperations.linkOrCopyFile<A>(_:dst:with:delegate:)( a1,  *(void *)(v1 + 16),  *(void *)(v1 + 24),  *(void *)(v1 + 32),  *(void *)(v1 + 40),  *(void *)(v1 + 48),  **(unsigned __int8 **)(v1 + 56) | ((unint64_t)*(unsigned int *)(*(void *)(v1 + 56) + 4LL) << 32),  *(void *)(*(void *)(v1 + 56) + 8LL));
}

{
  uint64_t v1;
  return specialized closure #1 in static _FileOperations.linkOrCopyFile<A>(_:dst:with:delegate:)( a1,  *(void *)(v1 + 16),  *(void *)(v1 + 24),  *(void *)(v1 + 32),  *(void *)(v1 + 40),  *(void *)(v1 + 48),  **(_BYTE **)(v1 + 56),  *(void *)(*(void *)(v1 + 56) + 8LL));
}

uint64_t outlined copy of URL?(uint64_t result)
{
  if (result)
  {
    uint64_t v1 = (void *)result;
    swift_retain();
    id v2 = v1;
    return swift_retain();
  }

  return result;
}

uint64_t partial apply for specialized closure #1 in closure #1 in static _FileOperations.linkOrCopyFile<A>(_:dst:with:delegate:)( uint64_t a1)
{
  return partial apply for specialized closure #1 in closure #1 in static _FileOperations.linkOrCopyFile<A>(_:dst:with:delegate:)( a1,  (uint64_t (*)(uint64_t, void, void, void, void, void))specialized closure #1 in closure #1 in static _FileOperations.linkOrCopyFile<A>(_:dst:with:delegate:));
}

{
  return partial apply for specialized closure #1 in closure #1 in static _FileOperations.linkOrCopyFile<A>(_:dst:with:delegate:)( a1,  (uint64_t (*)(uint64_t, void, void, void, void, void))specialized closure #1 in closure #1 in static _FileOperations.linkOrCopyFile<A>(_:dst:with:delegate:));
}

unint64_t specialized static _FileOperations._openDirectoryFD<A>(_:srcPath:dstPath:delegate:)( uint64_t a1, uint64_t (*a2)(void), uint64_t a3, uint64_t (*a4)(void), uint64_t a5, uint64_t a6)
{
  uint64_t v110 = *MEMORY[0x1895F89C0];
  int v10 = open(_:_:)();
  unsigned int v11 = v10;
  if ((v10 & 0x80000000) == 0) {
    goto LABEL_82;
  }
  uint64_t v103 = a6;
  int v100 = v10;
  uint64_t v101 = v6;
  int v12 = MEMORY[0x186E1B0E8]();
  uint64_t v13 = a2();
  unint64_t v15 = v14;
  uint64_t v16 = a4();
  unint64_t v18 = v17;
  unint64_t v105 = v15;
  uint64_t v106 = v16;
  uint64_t v104 = v13;
  if (v12 != 63)
  {
    swift_bridgeObjectRetain();
LABEL_22:
    unint64_t v29 = v15;
    goto LABEL_67;
  }

  uint64_t v19 = v16;
  if ((v17 & 0x2000000000000000LL) != 0) {
    uint64_t v20 = HIBYTE(v17) & 0xF;
  }
  else {
    uint64_t v20 = v16 & 0xFFFFFFFFFFFFLL;
  }
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  unint64_t v21 = v18;
  if (v20)
  {
    unint64_t v22 = String.index(before:)();
    if (String.subscript.getter() == 47 && v23 == 0xE100000000000000LL)
    {
LABEL_24:
      swift_bridgeObjectRelease();
    }

    else
    {
      char v25 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if ((v25 & 1) == 0)
      {
        uint64_t v19 = v106;
        unint64_t v21 = v18;
        if (v22 < 0x4000) {
          goto LABEL_36;
        }
        LODWORD(v102) = 63;
        while (1)
        {
          unint64_t v22 = String.index(before:)();
          if (String.subscript.getter() == 47 && v26 == 0xE100000000000000LL)
          {
            int v12 = v102;
            goto LABEL_24;
          }

          char v28 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          if ((v28 & 1) != 0) {
            break;
          }
          if (v22 < 0x4000)
          {
            uint64_t v19 = v106;
            unint64_t v21 = v18;
            int v12 = v102;
            goto LABEL_36;
          }
        }

        int v12 = v102;
      }
    }

    unint64_t v30 = 4 * v20;
    if (!(v22 >> 14))
    {
      if (String.count.getter() == 1)
      {
        swift_bridgeObjectRelease();
        unint64_t v21 = 0xE100000000000000LL;
        uint64_t v19 = 47LL;
        goto LABEL_36;
      }

      __break(1u);
LABEL_34:
      if (v30 < (unint64_t)String.index(after:)() >> 14)
      {
LABEL_129:
        __break(1u);
LABEL_130:
        __break(1u);
      }

{
  uint64_t v6;
  int v10;
  unsigned int v11;
  int v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  char v25;
  uint64_t v26;
  char v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  Swift::Int isStackAllocationSafe;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  const char *v40;
  char v41;
  char v42;
  int64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  const char *v48;
  char v49;
  char v50;
  int64_t v51;
  const char *v52;
  char v53;
  char v54;
  const char *v55;
  char v56;
  char v57;
  uint64_t v58;
  uint64_t v59;
  id v60;
  uint64_t v61;
  id v62;
  id v63;
  id v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t v71;
  id v72;
  unint64_t result;
  uint64_t v74;
  uint64_t v75;
  char v77;
  char v78;
  uint64_t v79;
  unint64_t v80;
  unint64_t v81;
  uint64_t v82;
  unint64_t v83;
  uint64_t v84;
  char v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  unint64_t v93;
  uint64_t v94;
  char v96;
  Swift::String v97;
  void v98[2];
  uint64_t v99;
  int v100;
  uint64_t v101;
  unint64_t v102;
  uint64_t v103;
  uint64_t v104;
  unint64_t v105;
  uint64_t v106;
  int v107;
  id v108;
  unint64_t v109;
  uint64_t v110;
  uint64_t v110 = *MEMORY[0x1895F89C0];
  int v10 = open(_:_:)();
  unsigned int v11 = v10;
  if ((v10 & 0x80000000) == 0) {
    goto LABEL_82;
  }
  uint64_t v103 = a6;
  int v100 = v10;
  uint64_t v101 = v6;
  int v12 = MEMORY[0x186E1B0E8]();
  uint64_t v13 = a2();
  unint64_t v15 = v14;
  uint64_t v16 = a4();
  unint64_t v18 = v17;
  unint64_t v105 = v15;
  uint64_t v106 = v16;
  uint64_t v104 = v13;
  if (v12 != 63)
  {
    swift_bridgeObjectRetain();
LABEL_22:
    unint64_t v29 = v15;
    goto LABEL_67;
  }

  uint64_t v19 = v16;
  if ((v17 & 0x2000000000000000LL) != 0) {
    uint64_t v20 = HIBYTE(v17) & 0xF;
  }
  else {
    uint64_t v20 = v16 & 0xFFFFFFFFFFFFLL;
  }
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  unint64_t v21 = v18;
  if (v20)
  {
    unint64_t v22 = String.index(before:)();
    if (String.subscript.getter() == 47 && v23 == 0xE100000000000000LL)
    {
LABEL_24:
      swift_bridgeObjectRelease();
    }

    else
    {
      char v25 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if ((v25 & 1) == 0)
      {
        uint64_t v19 = v106;
        unint64_t v21 = v18;
        if (v22 < 0x4000) {
          goto LABEL_36;
        }
        LODWORD(v102) = 63;
        while (1)
        {
          unint64_t v22 = String.index(before:)();
          if (String.subscript.getter() == 47 && v26 == 0xE100000000000000LL)
          {
            int v12 = v102;
            goto LABEL_24;
          }

          char v28 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          if ((v28 & 1) != 0) {
            break;
          }
          if (v22 < 0x4000)
          {
            uint64_t v19 = v106;
            unint64_t v21 = v18;
            int v12 = v102;
            goto LABEL_36;
          }
        }

        int v12 = v102;
      }
    }

    unint64_t v30 = 4 * v20;
    if (!(v22 >> 14))
    {
      if (String.count.getter() == 1)
      {
        swift_bridgeObjectRelease();
        unint64_t v21 = 0xE100000000000000LL;
        uint64_t v19 = 47LL;
        goto LABEL_36;
      }

      __break(1u);
LABEL_34:
      if (v30 < (unint64_t)String.index(after:)() >> 14)
      {
LABEL_129:
        __break(1u);
LABEL_130:
        __break(1u);
      }

unint64_t specialized static _FileOperations._safeCopyDirectoryMetadata<A>(src:dst:delegate:extraFlags:)( uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v141 = *MEMORY[0x1895F89C0];
  uint64_t v140 = a1;
  uint64_t v138 = a2;
  unint64_t result = specialized static _FileOperations._openDirectoryFD<A>(_:srcPath:dstPath:delegate:)( a1,  partial apply for implicit closure #1 in static _FileOperations._safeCopyDirectoryMetadata<A>(src:dst:delegate:extraFlags:),  (uint64_t)v139,  partial apply for implicit closure #2 in static _FileOperations._safeCopyDirectoryMetadata<A>(src:dst:delegate:extraFlags:),  (uint64_t)v137,  a3);
  if (v4) {
    return result;
  }
  int v10 = result;
  if ((result & 0x100000000LL) != 0) {
    return result;
  }
  unsigned int v11 = &v123;
  uint64_t v12 = MEMORY[0x1895F8858](result);
  uint64_t v121 = a1;
  MEMORY[0x1895F8858](v12);
  v118[2] = a2;
  unint64_t v14 = specialized static _FileOperations._openDirectoryFD<A>(_:srcPath:dstPath:delegate:)( a2,  partial apply for implicit closure #1 in static _FileOperations._safeCopyDirectoryMetadata<A>(src:dst:delegate:extraFlags:),  v13,  partial apply for implicit closure #1 in static _FileOperations._safeCopyDirectoryMetadata<A>(src:dst:delegate:extraFlags:),  (uint64_t)v118,  a3);
  uint64_t v15 = v14;
  if ((v14 & 0x100000000LL) != 0) {
    return close(v10);
  }
  if (a4 < 0) {
    goto LABEL_144;
  }
  if (!fcopyfile(v10, v14, 0LL, a4 | 0xC0007)) {
    goto LABEL_102;
  }
  LODWORD(v11) = MEMORY[0x186E1B0E8]();
  unint64_t v16 = String.init(cString:)();
  unint64_t v18 = v17;
  uint64_t v19 = String.init(cString:)();
  uint64_t v132 = v19;
  unint64_t v133 = v20;
  unint64_t v129 = v18;
  uint64_t v130 = v15;
  unint64_t v131 = v16;
  if ((_DWORD)v11 != 63)
  {
    swift_bridgeObjectRetain();
    uint64_t v27 = v16;
    unint64_t v28 = v18;
    goto LABEL_87;
  }

  uint64_t v21 = v19;
  unint64_t v22 = v20;
  LODWORD(v128) = 63;
  if ((v20 & 0x2000000000000000LL) != 0) {
    uint64_t v23 = HIBYTE(v20) & 0xF;
  }
  else {
    uint64_t v23 = v19 & 0xFFFFFFFFFFFFLL;
  }
  if (((v20 >> 60) & ((v19 & 0x800000000000000LL) == 0)) != 0) {
    uint64_t v24 = 11LL;
  }
  else {
    uint64_t v24 = 7LL;
  }
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  uint64_t v15 = v21;
  unint64_t v25 = v22;
  if (!v23)
  {
LABEL_45:
    if ((v25 & 0x1000000000000000LL) != 0) {
      goto LABEL_41;
    }
    goto LABEL_46;
  }

  uint64_t v127 = v24 | (v23 << 16);
  uint64_t v15 = v132;
  unint64_t v16 = String.index(before:)();
  if (String.subscript.getter() == 47 && v26 == 0xE100000000000000LL) {
    goto LABEL_16;
  }
  char v29 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  if ((v29 & 1) == 0)
  {
    unint64_t v25 = v133;
    if (v16 < 0x4000) {
      goto LABEL_45;
    }
    uint64_t v15 = v132;
    while (1)
    {
      unint64_t v16 = String.index(before:)();
      if (String.subscript.getter() == 47 && v37 == 0xE100000000000000LL) {
        break;
      }
      char v39 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if ((v39 & 1) != 0) {
        goto LABEL_19;
      }
      if (v16 < 0x4000)
      {
        unint64_t v25 = v133;
        if ((v133 & 0x1000000000000000LL) != 0) {
          goto LABEL_41;
        }
        goto LABEL_46;
      }
    }

{
  uint64_t v4;
  unint64_t result;
  int v10;
  unint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  char v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  Swift::Int isStackAllocationSafe;
  char v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  const char *v48;
  char v49;
  char v50;
  unint64_t v51;
  unint64_t v52;
  uint64_t v53;
  char v55;
  const char *v56;
  char v57;
  char v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  const char *v63;
  unint64_t v64;
  char v65;
  char v66;
  int64_t v67;
  uint64_t v68;
  const char *v69;
  unint64_t v70;
  char v71;
  char v72;
  unint64_t v73;
  uint64_t v74;
  uint64_t v75;
  id v76;
  uint64_t v77;
  id v78;
  id v79;
  id v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  char v84;
  id v85;
  unint64_t v86;
  unint64_t v87;
  uint64_t v88;
  void *v89;
  uint64_t v90;
  id v91;
  unsigned __int8 v92;
  unint64_t v93;
  unint64_t v94;
  unint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  unint64_t v101;
  unint64_t v102;
  unint64_t v103;
  uint64_t v104;
  char v105;
  unint64_t v106;
  uint64_t v107;
  char v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  unint64_t v115;
  unint64_t v116;
  Swift::String v117;
  void v118[4];
  char v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  unint64_t v123;
  unint64_t v124;
  uint64_t v125;
  unint64_t v126;
  uint64_t v127;
  uint64_t v128;
  unint64_t v129;
  uint64_t v130;
  unint64_t v131;
  uint64_t v132;
  unint64_t v133;
  int v134;
  id v135;
  unint64_t v136;
  char v137[16];
  uint64_t v138;
  char v139[16];
  uint64_t v140;
  uint64_t v141;
  uint64_t v141 = *MEMORY[0x1895F89C0];
  uint64_t v140 = a1;
  uint64_t v138 = a2;
  unint64_t result = specialized static _FileOperations._openDirectoryFD<A>(_:srcPath:dstPath:delegate:)( a1,  partial apply for implicit closure #1 in static _FileOperations._safeCopyDirectoryMetadata<A>(src:dst:delegate:extraFlags:),  (uint64_t)v139,  partial apply for implicit closure #1 in static _FileOperations._safeCopyDirectoryMetadata<A>(src:dst:delegate:extraFlags:),  (uint64_t)v137,  a3);
  if (v4) {
    return result;
  }
  int v10 = result;
  if ((result & 0x100000000LL) != 0) {
    return result;
  }
  unsigned int v11 = &v123;
  uint64_t v12 = MEMORY[0x1895F8858](result);
  uint64_t v121 = a1;
  MEMORY[0x1895F8858](v12);
  v118[2] = a2;
  unint64_t v14 = specialized static _FileOperations._openDirectoryFD<A>(_:srcPath:dstPath:delegate:)( a2,  partial apply for implicit closure #1 in static _FileOperations._safeCopyDirectoryMetadata<A>(src:dst:delegate:extraFlags:),  v13,  partial apply for implicit closure #1 in static _FileOperations._safeCopyDirectoryMetadata<A>(src:dst:delegate:extraFlags:),  (uint64_t)v118,  a3);
  uint64_t v15 = v14;
  if ((v14 & 0x100000000LL) != 0) {
    return close(v10);
  }
  if (a4 < 0) {
    goto LABEL_144;
  }
  if (!fcopyfile(v10, v14, 0LL, a4 | 0xC0007)) {
    goto LABEL_102;
  }
  LODWORD(v11) = MEMORY[0x186E1B0E8]();
  unint64_t v16 = String.init(cString:)();
  unint64_t v18 = v17;
  uint64_t v19 = String.init(cString:)();
  uint64_t v132 = v19;
  unint64_t v133 = v20;
  unint64_t v129 = v18;
  uint64_t v130 = v15;
  unint64_t v131 = v16;
  if ((_DWORD)v11 != 63)
  {
    swift_bridgeObjectRetain();
    uint64_t v27 = v16;
    unint64_t v28 = v18;
    goto LABEL_87;
  }

  uint64_t v21 = v19;
  unint64_t v22 = v20;
  LODWORD(v128) = 63;
  if ((v20 & 0x2000000000000000LL) != 0) {
    uint64_t v23 = HIBYTE(v20) & 0xF;
  }
  else {
    uint64_t v23 = v19 & 0xFFFFFFFFFFFFLL;
  }
  if (((v20 >> 60) & ((v19 & 0x800000000000000LL) == 0)) != 0) {
    uint64_t v24 = 11LL;
  }
  else {
    uint64_t v24 = 7LL;
  }
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  uint64_t v15 = v21;
  unint64_t v25 = v22;
  if (!v23)
  {
LABEL_45:
    if ((v25 & 0x1000000000000000LL) != 0) {
      goto LABEL_41;
    }
    goto LABEL_46;
  }

  uint64_t v127 = v24 | (v23 << 16);
  uint64_t v15 = v132;
  unint64_t v16 = String.index(before:)();
  if (String.subscript.getter() == 47 && v26 == 0xE100000000000000LL) {
    goto LABEL_16;
  }
  char v29 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  if ((v29 & 1) == 0)
  {
    unint64_t v25 = v133;
    if (v16 < 0x4000) {
      goto LABEL_45;
    }
    uint64_t v15 = v132;
    while (1)
    {
      unint64_t v16 = String.index(before:)();
      if (String.subscript.getter() == 47 && v37 == 0xE100000000000000LL) {
        break;
      }
      char v39 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if ((v39 & 1) != 0) {
        goto LABEL_19;
      }
      if (v16 < 0x4000)
      {
        unint64_t v25 = v133;
        if ((v133 & 0x1000000000000000LL) != 0) {
          goto LABEL_41;
        }
        goto LABEL_46;
      }
    }

uint64_t specialized static _FileOperations._linkOrCopyFile<A>(_:_:with:delegate:)( const char *a1, char *a2, uint64_t a3, void *a4)
{
  uint64_t v13 = *MEMORY[0x1895F89C0];
  uint64_t isStackAllocationSafe = swift_stdlib_isStackAllocationSafe();
  if ((isStackAllocationSafe & 1) != 0)
  {
    MEMORY[0x1895F8858](isStackAllocationSafe);
    uint64_t result = specialized closure #1 in static _FileOperations._linkOrCopyFile<A>(_:_:with:delegate:)( &v12,  1026,  a2,  a1,  a3 & 0xFFFFFFFF00000001LL,  a4);
    if (v4) {
      return swift_willThrow();
    }
  }

  else
  {
    unsigned int v11 = (char *)swift_slowAlloc();
    specialized closure #1 in static _FileOperations._linkOrCopyFile<A>(_:_:with:delegate:)( v11,  1026,  a2,  a1,  a3 & 0xFFFFFFFF00000001LL,  a4);
    return MEMORY[0x186E20E60](v11, -1LL, -1LL);
  }

  return result;
}

uint64_t outlined consume of _FTSSequence.Element?( uint64_t result, uint64_t a2, uint64_t a3, unsigned __int8 a4)
{
  if (a4 != 255) {
    return outlined consume of _FTSSequence.Element(result, a2, a3, a4 & 1);
  }
  return result;
}

uint64_t outlined consume of _FTSSequence.Element(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  if ((a4 & 1) != 0) {
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t partial apply for implicit closure #2 in static _FileOperations._safeCopyDirectoryMetadata<A>(src:dst:delegate:extraFlags:)()
{
  return String.init(cString:)();
}

uint64_t partial apply for specialized closure #1 in closure #1 in static _FileOperations.linkOrCopyFile<A>(_:dst:with:delegate:)( uint64_t a1, uint64_t (*a2)(uint64_t, void, void, void, void, void))
{
  return a2(a1, v2[2], v2[3], v2[4], v2[5], v2[6]);
}

uint64_t specialized static _FileOperations._linkOrCopyFile<A>(_:_:with:delegate:)( const char *a1, char *a2, char a3, void *a4)
{
  uint64_t v13 = *MEMORY[0x1895F89C0];
  uint64_t isStackAllocationSafe = swift_stdlib_isStackAllocationSafe();
  if ((isStackAllocationSafe & 1) != 0)
  {
    MEMORY[0x1895F8858](isStackAllocationSafe);
    uint64_t result = specialized closure #1 in static _FileOperations._linkOrCopyFile<A>(_:_:with:delegate:)( &v12,  1026,  a2,  a1,  a3 & 1,  a4);
    if (v4) {
      return swift_willThrow();
    }
  }

  else
  {
    unsigned int v11 = (char *)swift_slowAlloc();
    specialized closure #1 in static _FileOperations._linkOrCopyFile<A>(_:_:with:delegate:)( v11,  1026,  a2,  a1,  a3 & 1,  a4);
    return MEMORY[0x186E20E60](v11, -1LL, -1LL);
  }

  return result;
}

__n128 AttributedString.SingleAttributeTransformer.range.getter@<Q0>(uint64_t a1@<X8>)
{
  __int128 v2 = *(_OWORD *)(v1 + 16);
  *(_OWORD *)a1 = *(_OWORD *)v1;
  *(_OWORD *)(a1 + 16) = v2;
  __n128 result = *(__n128 *)(v1 + 32);
  __int128 v4 = *(_OWORD *)(v1 + 48);
  *(__n128 *)(a1 + 32) = result;
  *(_OWORD *)(a1 + 48) = v4;
  return result;
}

__n128 AttributedString.SingleAttributeTransformer.range.setter(uint64_t a1)
{
  __int128 v2 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)uint64_t v1 = *(_OWORD *)a1;
  *(_OWORD *)(v1 + 16) = v2;
  __n128 result = *(__n128 *)(a1 + 32);
  __int128 v4 = *(_OWORD *)(a1 + 48);
  *(__n128 *)(v1 + 32) = result;
  *(_OWORD *)(v1 + 48) = v4;
  return result;
}

uint64_t (*AttributedString.SingleAttributeTransformer.range.modify())()
{
  return destructiveProjectEnumData for PredicateCodableError;
}

uint64_t AttributedString.SingleAttributeTransformer.value.getter@<X0>(uint64_t a1@<X8>)
{
  if (v8)
  {
    outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>( (uint64_t)v7,  (uint64_t)&v6);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Hashable & Sendable);
    uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
    swift_dynamicCast();
    outlined destroy of AttributedString._AttributeValue((uint64_t)v7);
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 56LL))( a1,  0LL,  1LL,  AssociatedTypeWitness);
  }

  else
  {
    outlined destroy of Any?( (uint64_t)v7,  &demangling cache variable for type metadata for AttributedString._AttributeValue?);
    uint64_t v5 = swift_getAssociatedTypeWitness();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56LL))( a1,  1LL,  1LL,  v5);
  }

uint64_t outlined init with copy of AttributedString._AttributeValue?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttributedString._AttributeValue?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
  return a2;
}

uint64_t AttributedString.SingleAttributeTransformer.value.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = type metadata accessor for Optional();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8LL))(a1, v3);
}

void (*AttributedString.SingleAttributeTransformer.value.modify( void *a1, uint64_t a2))(uint64_t a1, char a2)
{
  uint64_t v5 = malloc(0xA0uLL);
  *a1 = v5;
  v5[14] = a2;
  v5[15] = v2;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v7 = type metadata accessor for Optional();
  v5[16] = v7;
  uint64_t v8 = *(void *)(v7 - 8);
  v5[17] = v8;
  size_t v9 = *(void *)(v8 + 64);
  v5[18] = malloc(v9);
  int v10 = malloc(v9);
  v5[19] = v10;
  outlined init with copy of AttributedString._AttributeValue?(v2 + 80, (uint64_t)v5);
  if (v5[3])
  {
    outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>( (uint64_t)v5,  (uint64_t)(v5 + 9));
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Hashable & Sendable);
    swift_dynamicCast();
    outlined destroy of AttributedString._AttributeValue((uint64_t)v5);
    uint64_t v11 = 0LL;
  }

  else
  {
    outlined destroy of Any?( (uint64_t)v5,  &demangling cache variable for type metadata for AttributedString._AttributeValue?);
    uint64_t v11 = 1LL;
  }

  (*(void (**)(void *, uint64_t, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 56LL))( v10,  v11,  1LL,  AssociatedTypeWitness);
  return AttributedString.SingleAttributeTransformer.value.modify;
}

void AttributedString.SingleAttributeTransformer.value.modify(uint64_t a1, char a2)
{
  uint64_t v2 = *(void **)a1;
  uint64_t v3 = *(void **)(*(void *)a1 + 144LL);
  uint64_t v4 = *(void **)(*(void *)a1 + 152LL);
  uint64_t v5 = *(void *)(*(void *)a1 + 128LL);
  uint64_t v6 = *(void *)(*(void *)a1 + 136LL);
  uint64_t v7 = *(void *)(*(void *)a1 + 112LL);
  if ((a2 & 1) != 0)
  {
    (*(void (**)(void, void *, uint64_t))(v6 + 16))(*(void *)(*(void *)a1 + 144LL), v4, v5);
    specialized AttributedString.SingleAttributeTransformer.value.setter((uint64_t)v3, v7);
    uint64_t v8 = *(void (**)(void *, uint64_t))(v6 + 8);
    v8(v3, v5);
  }

  else
  {
    specialized AttributedString.SingleAttributeTransformer.value.setter(*(void *)(*(void *)a1 + 152LL), v7);
    uint64_t v8 = *(void (**)(void *, uint64_t))(v6 + 8);
  }

  v8(v4, v5);
  free(v4);
  free(v3);
  free(v2);
}

uint64_t AttributedString.SingleAttributeTransformer.replace<A>(with:value:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6 = v5;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v11 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1895F8858](AssociatedTypeWitness);
  uint64_t v13 = (char *)&v21 - v12;
  uint64_t v14 = (*(uint64_t (**)(uint64_t, uint64_t))(a5 + 24))(a4, a5);
  uint64_t v16 = v15;
  swift_bridgeObjectRelease();
  *(void *)(v6 + 64) = v14;
  *(void *)(v6 + 72) = v16;
  unint64_t v17 = *(void (**)(char *, uint64_t, uint64_t))(v11 + 16);
  v17(v13, a2, AssociatedTypeWitness);
  *((void *)&v23 + 1) = AssociatedTypeWitness;
  *(void *)uint64_t v24 = swift_getAssociatedConformanceWitness();
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v22);
  v17((char *)boxed_opaque_existential_1, (uint64_t)v13, AssociatedTypeWitness);
  (*(void (**)(_OWORD *__return_ptr, uint64_t, uint64_t))(a5 + 32))(v25, a4, a5);
  *(_OWORD *)&v24[8] = v25[0];
  v24[24] = (*(uint64_t (**)(uint64_t, uint64_t))(a5 + 40))(a4, a5) & 1;
  uint64_t v19 = (*(uint64_t (**)(uint64_t, uint64_t))(a5 + 48))(a4, a5);
  (*(void (**)(char *, uint64_t))(v11 + 8))(v13, AssociatedTypeWitness);
  uint64_t v26 = v19;
  v25[2] = *(_OWORD *)v24;
  v25[3] = *(_OWORD *)&v24[16];
  v25[0] = v22;
  v25[1] = v23;
  return outlined assign with take of AttributedString._AttributeValue?((uint64_t)v25, v6 + 80);
}

uint64_t AttributedString.SingleAttributeTransformer.replace<A>(with:value:)( void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = *(void *)(*MEMORY[0x18961A9A8] + *a1 + 8LL);
  return AttributedString.SingleAttributeTransformer.replace<A>(with:value:)(v5, a2, a3, v5, a4);
}

uint64_t AttributedString.applyRemovals<A>(withOriginal:andChanged:to:key:)( uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  unint64_t v10 = *(void *)(a1 + 32);
  uint64_t v11 = a2[4];
  unint64_t v12 = *a2 ^ *(void *)a1;
  uint64_t v13 = type metadata accessor for AttributedString.SingleAttributeTransformer(0LL, a5, a6, a4);
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = *(void (**)(_BYTE *, void *, uint64_t))(v14 + 16);
  v15(v26, (void *)a1, v13);
  v15(v23, a2, v13);
  if (v12 > 0x3FF || (v11 ^ v10) >= 0x400)
  {
    unint64_t v18 = *(void (**)(_BYTE *, uint64_t))(v14 + 8);
    v18(v26, v13);
    v18(v23, v13);
LABEL_8:
    __int128 v21 = *(_OWORD *)(a1 + 16);
    v29[0] = *(_OWORD *)a1;
    v29[1] = v21;
    __int128 v22 = *(_OWORD *)(a1 + 48);
    v29[2] = *(_OWORD *)(a1 + 32);
    v29[3] = v22;
    return AttributedString.Guts.removeAttributeValue<A>(forKey:in:)(a5, (uint64_t)v29, a5, a6);
  }

  if (v27 == v24 && v28 == v25)
  {
    uint64_t v16 = *(void (**)(_BYTE *, uint64_t))(v14 + 8);
    v16(v26, v13);
    return ((uint64_t (*)(_BYTE *, uint64_t))v16)(v23, v13);
  }

  char v19 = _stringCompareWithSmolCheck(_:_:expecting:)();
  unint64_t v20 = *(void (**)(_BYTE *, uint64_t))(v14 + 8);
  v20(v26, v13);
  uint64_t result = ((uint64_t (*)(_BYTE *, uint64_t))v20)(v23, v13);
  if ((v19 & 1) == 0) {
    goto LABEL_8;
  }
  return result;
}

uint64_t AttributedString.applyChanges<A>(withOriginal:andChanged:to:key:)( __int128 *a1, __int128 *a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v36 = a6;
  uint64_t v37 = a3;
  unint64_t v8 = *((void *)a1 + 4);
  uint64_t v9 = *((void *)a2 + 4);
  unint64_t v10 = *(void *)a2 ^ *(void *)a1;
  uint64_t v35 = a5;
  uint64_t v11 = type metadata accessor for AttributedString.SingleAttributeTransformer(0LL, a5, a6, a4);
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = *(void (**)(void *, __int128 *, uint64_t))(v12 + 16);
  v13(v63, a1, v11);
  v13(v62, a2, v11);
  char v14 = 1;
  if (v10 <= 0x3FF && (v9 ^ v8) <= 0x3FF)
  {
    if (v63[8] == v62[8] && v63[9] == v62[9]) {
      char v14 = 0;
    }
    else {
      char v14 = _stringCompareWithSmolCheck(_:_:expecting:)() ^ 1;
    }
  }

  uint64_t v15 = *(void (**)(_BYTE *, uint64_t))(v12 + 8);
  v15(v63, v11);
  v15(v62, v11);
  v13(v60, a1, v11);
  v13(v58, a2, v11);
  if ((v14 & 1) != 0)
  {
    v15(v58, v11);
    v15(v60, v11);
  }

  else
  {
    outlined init with copy of AttributedString._AttributeValue?((uint64_t)&v61, (uint64_t)&v48);
    outlined init with copy of AttributedString._AttributeValue?((uint64_t)&v59, (uint64_t)&v53);
    if (*((void *)&v49 + 1))
    {
      outlined init with copy of AttributedString._AttributeValue?((uint64_t)&v48, (uint64_t)&v43);
      if (*((void *)&v54 + 1))
      {
        __int128 v40 = v55;
        __int128 v41 = v56;
        uint64_t v42 = v57;
        __int128 v38 = v53;
        __int128 v39 = v54;
        char v16 = specialized static AttributedString._AttributeValue.== infix(_:_:)((uint64_t)&v43, (uint64_t)&v38);
        outlined destroy of AttributedString._AttributeValue((uint64_t)&v38);
        v15(v58, v11);
        v15(v60, v11);
        outlined destroy of AttributedString._AttributeValue((uint64_t)&v43);
        uint64_t result = outlined destroy of Any?( (uint64_t)&v48,  &demangling cache variable for type metadata for AttributedString._AttributeValue?);
        if ((v16 & 1) != 0) {
          return result;
        }
        goto LABEL_17;
      }

      v15(v58, v11);
      v15(v60, v11);
      outlined destroy of AttributedString._AttributeValue((uint64_t)&v43);
    }

    else
    {
      v15(v58, v11);
      v15(v60, v11);
      if (!*((void *)&v54 + 1)) {
        return outlined destroy of Any?( (uint64_t)&v48,  &demangling cache variable for type metadata for AttributedString._AttributeValue?);
      }
    }

    outlined destroy of Any?( (uint64_t)&v48,  (uint64_t *)&demangling cache variable for type metadata for (AttributedString._AttributeValue?, AttributedString._AttributeValue?));
  }

unint64_t AttributedString.transformingAttributes<A>(_:_:)@<X0>( void (*a1)(__int128 *)@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t *a5@<X8>)
{
  void (*v123)(uint64_t *__return_ptr, uint64_t, uint64_t);
  char *v124;
  void *v125;
  unint64_t *v126;
  unint64_t v127;
  char *v128;
  _OWORD *v129;
  char *v130;
  unint64_t v131;
  uint64_t (*v132)(uint64_t, uint64_t);
  char *v133;
  char *v134;
  uint64_t v135;
  uint64_t v136;
  void (*v137)(__int128 *);
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  unint64_t v142;
  uint64_t v143;
  unint64_t v144;
  unint64_t v145;
  unint64_t v146;
  uint64_t v147;
  char *v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  unint64_t v157;
  unint64_t v158;
  unint64_t v159;
  __int128 v160;
  unint64_t v161;
  unint64_t v162;
  __int128 v163;
  unint64_t v164[19];
  __int128 v165;
  __int128 v166;
  _OWORD v167[2];
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  __int128 v171;
  __int128 v172;
  __int128 v173;
  __int128 v174;
  uint64_t v175;
  unint64_t v176;
  unint64_t v177;
  uint64_t v178;
  unint64_t v179;
  unint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  __int128 v184;
  __int128 v185;
  __int128 v186;
  __int128 v187;
  uint64_t v188;
  uint64_t v189;
  void v190[16];
  uint64_t v191;
  _OWORD v192[8];
  unint64_t v193;
  unint64_t v194;
  uint64_t v195;
  unint64_t v196;
  unint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  __int128 v204;
  __int128 v205;
  __int128 v206;
  __int128 v207;
  __int128 v208;
  __int128 v209;
  __int128 v210;
  __int128 v211;
  unint64_t v212;
  unint64_t v213;
  uint64_t v214;
  unint64_t v215;
  unint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  __int128 v220;
  __int128 v221;
  __int128 v222;
  __int128 v223;
  __int128 v224;
  __int128 v225;
  __int128 v226;
  __int128 v227;
  uint64_t v228;
  _OWORD v229[4];
  unint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  unint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  __int128 v238;
  __int128 v239;
  __int128 v240;
  _OWORD v241[4];
  char v137 = (void (*)(__int128 *))a1;
  uint64_t v138 = a2;
  id v152 = a3;
  unsigned __int8 v153 = a4;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  id v135 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v8 = MEMORY[0x1895F8858](AssociatedTypeWitness);
  unint64_t v124 = (char *)v121 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v8);
  int v134 = (char *)v121 - v10;
  unint64_t v136 = v11;
  uint64_t v12 = type metadata accessor for Optional();
  uint64_t v149 = *(void *)(v12 - 8);
  uint64_t v13 = MEMORY[0x1895F8858](v12);
  unint64_t v133 = (char *)v121 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v13);
  uint64_t v148 = (char *)v121 - v15;
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Range<AttributedString.Index>);
  uint64_t v150 = v12;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  MEMORY[0x1895F8858](TupleTypeMetadata2);
  char v151 = (uint64_t)v121 - v17;
  uint64_t v228 = *v5;
  uint64_t v18 = v228;
  swift_retain_n();
  uint64_t v19 = v18;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    __int128 v20 = *(_OWORD *)(v18 + 32);
    v241[0] = *(_OWORD *)(v18 + 16);
    v241[1] = v20;
    v241[2] = *(_OWORD *)(v18 + 48);
    uint64_t v21 = *(void *)(v18 + 64);
    uint64_t v22 = *(void *)(v18 + 72);
    uint64_t v23 = *(void *)(v18 + 80);
    uint64_t v24 = *(void *)(v18 + 88);
    type metadata accessor for AttributedString.Guts();
    swift_allocObject();
    outlined retain of Locale((uint64_t)v241);
    swift_unknownObjectRetain();
    uint64_t v19 = AttributedString.Guts.init(string:runs:)(v241, v21, v22, v23, v24);
    uint64_t v228 = v19;
    swift_release();
  }

  __int128 v25 = *(_OWORD *)(v18 + 32);
  uint64_t v238 = *(_OWORD *)(v18 + 16);
  unint64_t v239 = v25;
  uint64_t v240 = *(_OWORD *)(v18 + 48);
  unint64_t v26 = BigString.startIndex.getter();
  uint64_t v28 = v27;
  uint64_t v30 = v29;
  uint64_t v32 = v31;
  unint64_t result = BigString.endIndex.getter();
  if (result >> 10 < v26 >> 10)
  {
LABEL_27:
    __break(1u);
  }

  else
  {
    uint64_t v122 = a5;
    unsigned __int8 v230 = v26;
    uint64_t v231 = v28;
    unint64_t v232 = v30;
    uint64_t v233 = v32;
    size_t v234 = result;
    uint64_t v235 = v34;
    uint64_t v236 = v35;
    uint64_t v237 = v36;
    uint64_t v37 = swift_retain();
    v121[1] = v18;
    AttributedString.Runs.init(_:in:)(v37, &v203);
    unint64_t v38 = v212;
    uint64_t v143 = v214;
    id v144 = v213;
    uint64_t v145 = v216;
    uint64_t v141 = v217;
    Swift::Int v142 = v215;
    char v139 = v203;
    uint64_t v140 = v218;
    char v156 = v219;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
    uint64_t v39 = swift_allocObject();
    char v163 = xmmword_183720D90;
    *(_OWORD *)(v39 + 16) = xmmword_183720D90;
    uint64_t v40 = v152;
    uint64_t v41 = v153;
    uint64_t v132 = *(uint64_t (**)(uint64_t, uint64_t))(v153 + 24);
    *(void *)(v39 + 32) = v132(v152, v153);
    *(void *)(v39 + 40) = v42;
    char v155 = v39;
    unint64_t v123 = *(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v41 + 32);
    v123(&v191, v40, v41);
    uint64_t v43 = *(void *)&v192[0];
    if (*(void *)&v192[0] == 1LL)
    {
      uint64_t v154 = MEMORY[0x18961AFE8];
    }

    else
    {
      uint64_t v44 = v191;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<AttributedString.AttributeRunBoundaries>);
      uint64_t v45 = swift_allocObject();
      *(_OWORD *)(v45 + 16) = v163;
      *(void *)(v45 + 32) = v44;
      *(void *)(v45 + 40) = v43;
      uint64_t v154 = v45;
    }

    id v224 = v208;
    id v225 = v209;
    uint64_t v226 = v210;
    uint64_t v227 = v211;
    uint64_t v220 = v204;
    uint64_t v221 = v205;
    unint64_t v46 = v38 >> 10;
    unint64_t v47 = v145;
    id v222 = v206;
    uint64_t v223 = v207;
    unint64_t v131 = v145 >> 10;
    if (v38 >> 10 != v145 >> 10)
    {
      unint64_t v126 = (unint64_t *)(v151 + *(int *)(TupleTypeMetadata2 + 48));
      uint64_t v127 = v38;
      unint64_t v129 = v192;
      uint64_t v130 = (char *)&v184 + 8;
      uint64_t v128 = (char *)&v171 + 8;
      uint64_t v125 = v190;
      unint64_t v48 = v144;
      char v162 = v142;
      *(void *)&char v163 = v143;
      unint64_t v49 = v38;
      while (1)
      {
        uint64_t v161 = v46;
        __int128 v53 = v224;
        __int128 v54 = v225;
        __int128 v55 = v225;
        __int128 v56 = v128;
        *((_OWORD *)v128 + 4) = v224;
        v56[5] = v54;
        __int128 v57 = v226;
        __int128 v58 = v227;
        __int128 v59 = v227;
        v56[6] = v226;
        v56[7] = v58;
        __int128 v60 = v220;
        __int128 v61 = v221;
        __int128 v62 = v221;
        _OWORD *v56 = v220;
        v56[1] = v61;
        __int128 v63 = v222;
        __int128 v64 = v223;
        __int128 v65 = v223;
        v56[2] = v222;
        v56[3] = v64;
        char v66 = v130;
        *((_OWORD *)v130 + 4) = v53;
        v66[5] = v55;
        v66[6] = v57;
        v66[7] = v59;
        _OWORD *v66 = v60;
        v66[1] = v62;
        unint64_t v67 = v49;
        unint64_t v68 = v162;
        unint64_t v69 = v163;
        *((void *)&v160 + 1) = v162;
        uint64_t v159 = v49;
        *(void *)&uint64_t v160 = v163;
        unint64_t v70 = v48;
        uint64_t v158 = v48;
        v66[2] = v63;
        v66[3] = v65;
        uint64_t v71 = v139;
        *(void *)&id v184 = v139;
        v190[7] = v38;
        uint64_t v72 = v143;
        unint64_t v73 = v144;
        v190[8] = v144;
        v190[9] = v143;
        uint64_t v74 = v141;
        unint64_t v75 = v142;
        v190[10] = v142;
        unint64_t v76 = v145;
        v190[11] = v145;
        v190[12] = v141;
        v190[13] = v140;
        uint64_t v77 = v140;
        v190[14] = v156;
        v164[0] = v67;
        v164[1] = v70;
        v164[2] = v69;
        v164[3] = v68;
        AttributedString.Runs.subscript.getter(v164, &v165);
        char v162 = *((void *)&v165 + 1);
        *(void *)&char v163 = v165;
        id v147 = v170;
        __int128 v78 = v225;
        id v79 = v129;
        v129[4] = v224;
        v79[5] = v78;
        __int128 v80 = v227;
        v79[6] = v226;
        v79[7] = v80;
        __int128 v81 = v221;
        _OWORD *v79 = v220;
        v79[1] = v81;
        __int128 v82 = v223;
        v79[2] = v222;
        v79[3] = v82;
        unint64_t v191 = v71;
        Swift::Int32 v193 = v38;
        uint64_t v194 = v73;
        uint64_t v195 = v72;
        uint64_t v196 = v75;
        uint64_t v197 = v76;
        uint64_t v198 = v74;
        uint64_t v199 = v77;
        uint64_t v200 = v156;
        unint64_t v201 = v155;
        Swift::Int v202 = v154;
        *(void *)&uint64_t v171 = v71;
        id v176 = v38;
        uint64_t v177 = v73;
        id v178 = v72;
        id v179 = v75;
        uint64_t v180 = v76;
        uint64_t v181 = v74;
        unint64_t v84 = v159;
        unint64_t v83 = v160;
        uint64_t v182 = v77;
        char v183 = v156;
        unint64_t v85 = *((void *)&v160 + 1);
        *(void *)&char v165 = v159;
        *((void *)&v165 + 1) = v158;
        char v166 = v160;
        outlined retain of ReversedCollection<AttributedString.Runs.AttributesSlice1<AttributeScopes.FoundationAttributes.InflectionRuleAttribute>>((uint64_t)&v191);
        swift_retain();
        AttributedString.Runs._slicedRunBoundary(after:attributeNames:constraints:)( (unint64_t *)&v165,  v155,  v154,  (uint64_t *)&v184);
        swift_release();
        unint64_t result = outlined release of ReversedCollection<AttributedString.Runs.AttributesSlice1<AttributeScopes.FoundationAttributes.InflectionRuleAttribute>>.Iterator((uint64_t)&v191);
        unint64_t v86 = v184;
        if ((unint64_t)v184 >> 10 < v161)
        {
          __break(1u);
          goto LABEL_27;
        }

        id v146 = (unint64_t)v184 >> 10;
        unint64_t v87 = *((void *)&v184 + 1);
        __int128 v88 = v185;
        AttributedString._AttributeStorage.subscript.getter(v163, v152, v153, v151);
        swift_release();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v89 = v126;
        *unint64_t v126 = v84;
        unint64_t v90 = v158;
        v89[1] = v158;
        v89[2] = v83;
        v89[3] = v85;
        v89[4] = v86;
        Swift::Int v157 = v87;
        v89[5] = v87;
        v89[6] = v88;
        id v91 = v133;
        char v162 = *((void *)&v88 + 1);
        *(void *)&char v163 = v88;
        v89[7] = *((void *)&v88 + 1);
        unsigned __int8 v92 = v148;
        uint64_t v93 = v149;
        uint64_t v94 = v150;
        (*(void (**)(char *, uint64_t, uint64_t))(v149 + 32))(v148, v151, v150);
        (*(void (**)(char *, char *, uint64_t))(v93 + 16))(v91, v92, v94);
        uint64_t v95 = v135;
        uint64_t v96 = v136;
        unint64_t v97 = v86;
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v135 + 48))(v91, 1LL, v136) == 1)
        {
          (*(void (**)(char *, uint64_t))(v93 + 8))(v91, v94);
          uint64_t v175 = 0LL;
          id v173 = 0u;
          uint64_t v174 = 0u;
          uint64_t v171 = 0u;
          uint64_t v172 = 0u;
          uint64_t v99 = v152;
          uint64_t v98 = v153;
          unint64_t v100 = v157;
        }

        else
        {
          unint64_t v101 = v134;
          (*(void (**)(char *, char *, uint64_t))(v95 + 32))(v134, v91, v96);
          unint64_t v102 = *(void (**)(char *, char *, uint64_t))(v95 + 16);
          unint64_t v103 = v124;
          v102(v124, v101, v96);
          *((void *)&v166 + 1) = v96;
          unint64_t v104 = v90;
          uint64_t v106 = v152;
          uint64_t v105 = v153;
          *(void *)&v167[0] = swift_getAssociatedConformanceWitness();
          boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v165);
          v102((char *)boxed_opaque_existential_1, v103, v96);
          v123((uint64_t *)&v171, v106, v105);
          *(_OWORD *)((char *)v167 + 8) = v171;
          BYTE8(v167[1]) = (*(uint64_t (**)(uint64_t, uint64_t))(v105 + 40))(v106, v105) & 1;
          uint64_t v108 = (*(uint64_t (**)(uint64_t, uint64_t))(v105 + 48))(v106, v105);
          char v109 = *(void (**)(char *, uint64_t))(v95 + 8);
          v109(v103, v96);
          uint64_t v175 = v108;
          id v173 = v167[0];
          uint64_t v174 = v167[1];
          unint64_t v100 = v157;
          uint64_t v171 = v165;
          uint64_t v172 = v166;
          v109(v134, v96);
          uint64_t v98 = v105;
          unint64_t v90 = v104;
          uint64_t v99 = v106;
        }

        uint64_t v110 = v132(v99, v98);
        *(void *)&id v184 = v159;
        *((void *)&v184 + 1) = v90;
        unsigned __int8 v185 = v160;
        *((void *)&v160 + 1) = v97;
        *(void *)&unint64_t v186 = v97;
        *((void *)&v186 + 1) = v100;
        *(void *)&unint64_t v187 = v163;
        *((void *)&v187 + 1) = v162;
        unint64_t v188 = v110;
        char v189 = v111;
        outlined init with take of AttributedString._AttributeValue?((uint64_t)&v171, (uint64_t)v125);
        uint64_t v113 = type metadata accessor for AttributedString.SingleAttributeTransformer(0LL, v99, v98, v112);
        uint64_t v114 = *(void *)(v113 - 8);
        unint64_t v115 = *(void (**)(__int128 *, __int128 *, uint64_t))(v114 + 16);
        v115(&v171, &v184, v113);
        v137(&v171);
        unint64_t v116 = v171;
        unint64_t v117 = v173;
        v115(&v165, &v184, v113);
        v115((__int128 *)v164, &v171, v113);
        BOOL v118 = v161 == v116 >> 10;
        unint64_t v119 = v146;
        if (!v118 || v146 != v117 >> 10) {
          break;
        }
        if (v168 == v164[8] && v169 == v164[9])
        {
          __int128 v50 = *(void (**)(__int128 *, uint64_t))(v114 + 8);
          v50(&v165, v113);
          v50((__int128 *)v164, v113);
          unint64_t v49 = *((void *)&v160 + 1);
          uint64_t v52 = v99;
        }

        else
        {
          char v120 = _stringCompareWithSmolCheck(_:_:expecting:)();
          __int128 v50 = *(void (**)(__int128 *, uint64_t))(v114 + 8);
          v50(&v165, v113);
          v50((__int128 *)v164, v113);
          unint64_t v49 = *((void *)&v160 + 1);
          uint64_t v52 = v99;
          if ((v120 & 1) == 0) {
            goto LABEL_23;
          }
        }

unint64_t AttributedString.transformingAttributes<A, B>(_:_:_:)@<X0>( uint64_t a1@<X2>, uint64_t a2@<X3>, uint64_t a3@<X4>, uint64_t a4@<X5>, uint64_t a5@<X6>, uint64_t a6@<X7>, uint64_t a7@<X8>)
{
  uint64_t v49 = a1;
  uint64_t v50 = a2;
  uint64_t v66 = a6;
  swift_getAssociatedTypeWitness();
  uint64_t v12 = type metadata accessor for Optional();
  uint64_t v61 = *(void *)(v12 - 8);
  MEMORY[0x1895F8858](v12);
  __int128 v60 = (char *)v46 - v13;
  uint64_t v53 = a3;
  swift_getAssociatedTypeWitness();
  uint64_t v14 = type metadata accessor for Optional();
  uint64_t v58 = *(void *)(v14 - 8);
  MEMORY[0x1895F8858](v14);
  __int128 v57 = (char *)v46 - v15;
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Range<AttributedString.Index>);
  uint64_t v59 = v14;
  uint64_t v62 = v12;
  TupleTypeMetadata3 = swift_getTupleTypeMetadata3();
  uint64_t v17 = type metadata accessor for Optional();
  MEMORY[0x1895F8858](v17);
  uint64_t v19 = (char *)v46 - v18;
  uint64_t v20 = *v7;
  uint64_t v105 = *v7;
  swift_retain_n();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    __int128 v21 = *(_OWORD *)(v20 + 32);
    v117[0] = *(_OWORD *)(v20 + 16);
    v117[1] = v21;
    v117[2] = *(_OWORD *)(v20 + 48);
    uint64_t v22 = *(void *)(v20 + 64);
    uint64_t v63 = *(void *)(v20 + 72);
    uint64_t v23 = *(void *)(v20 + 80);
    *(void *)&__int128 v56 = *(void *)(v20 + 88);
    type metadata accessor for AttributedString.Guts();
    swift_allocObject();
    outlined retain of Locale((uint64_t)v117);
    swift_unknownObjectRetain();
    uint64_t v105 = AttributedString.Guts.init(string:runs:)(v117, v22, v63, v23, v56);
    swift_release();
  }

  __int128 v24 = *(_OWORD *)(v20 + 32);
  __int128 v114 = *(_OWORD *)(v20 + 16);
  __int128 v115 = v24;
  __int128 v116 = *(_OWORD *)(v20 + 48);
  unint64_t v25 = BigString.startIndex.getter();
  uint64_t v63 = v26;
  uint64_t v28 = v27;
  *(void *)&__int128 v56 = v29;
  unint64_t result = BigString.endIndex.getter();
  if (result >> 10 >= v25 >> 10)
  {
    uint64_t v51 = v19;
    uint64_t v52 = TupleTypeMetadata3;
    v46[2] = a7;
    unint64_t v106 = v25;
    uint64_t v107 = v63;
    uint64_t v108 = v28;
    uint64_t v109 = v56;
    unint64_t v110 = result;
    uint64_t v111 = v31;
    uint64_t v112 = v32;
    uint64_t v113 = v33;
    uint64_t v34 = swift_retain();
    v46[1] = v20;
    AttributedString.Runs.init(_:in:)(v34, v74);
    __int128 v89 = v74[6];
    __int128 v90 = v74[7];
    uint64_t v54 = v76;
    uint64_t v91 = v75;
    __int128 v85 = v74[2];
    __int128 v86 = v74[3];
    __int128 v88 = v74[5];
    __int128 v87 = v74[4];
    __int128 v84 = v74[1];
    __int128 v83 = v74[0];
    uint64_t v35 = v77;
    uint64_t v64 = a5;
    uint64_t v65 = a4;
    uint64_t v36 = v78;
    __int128 v56 = v80;
    uint64_t v37 = v79;
    uint64_t v55 = v81;
    uint64_t v63 = v82;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
    uint64_t v38 = swift_allocObject();
    *(_OWORD *)(v38 + 16) = xmmword_1837232D0;
    uint64_t v39 = v53;
    unint64_t v48 = *(uint64_t (**)(uint64_t, uint64_t))(v64 + 24);
    *(void *)(v38 + 32) = v48(v53, v64);
    *(void *)(v38 + 40) = v40;
    uint64_t v41 = v66;
    unint64_t v47 = *(uint64_t (**)(uint64_t, uint64_t))(v66 + 24);
    *(void *)(v38 + 48) = v47(v65, v66);
    *(void *)(v38 + 56) = v42;
    (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v64 + 32))(&v69, v39, v64);
    uint64_t v43 = v69;
    uint64_t v44 = v70;
    (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v41 + 32))(v67, v65, v66);
    uint64_t v45 = specialized RangeReplaceableCollection.init(_contents:_:)(v43, v44, v67[0], v67[1]);
    outlined consume of AttributedString.AttributeRunBoundaries?(v43, v44);
    uint64_t v92 = v54;
    uint64_t v93 = v35;
    uint64_t v94 = v36;
    uint64_t v95 = v37;
    __int128 v96 = v56;
    uint64_t v97 = v55;
    uint64_t v98 = v63;
    uint64_t v99 = v38;
    unint64_t v100 = v45;
    uint64_t v101 = v54;
    uint64_t v102 = v35;
    v46[3] = &v68;
    v46[4] = &v73;
    uint64_t v103 = v36;
    uint64_t v104 = v37;
    uint64_t v69 = v39;
    uint64_t v70 = v65;
    uint64_t v71 = v64;
    uint64_t v72 = v66;
    type metadata accessor for AttributedString.Runs.AttributesSlice2.Iterator();
  }

  __break(1u);
  return result;
}

unint64_t AttributedString.transformingAttributes<A, B, C>(_:_:_:_:)@<X0>( uint64_t a1@<X3>, uint64_t a2@<X4>, uint64_t a3@<X5>, uint64_t a4@<X6>, uint64_t a5@<X7>, uint64_t a6@<X8>, uint64_t a7, uint64_t a8, unint64_t a9)
{
  v43[6] = a1;
  v43[7] = a2;
  v43[1] = a6;
  unint64_t v58 = a9;
  uint64_t v55 = a5;
  swift_getAssociatedTypeWitness();
  uint64_t v11 = type metadata accessor for Optional();
  uint64_t v50 = *(void *)(v11 - 8);
  MEMORY[0x1895F8858](v11);
  uint64_t v53 = (char *)v43 - v12;
  uint64_t v54 = a4;
  uint64_t v57 = a8;
  swift_getAssociatedTypeWitness();
  uint64_t v13 = type metadata accessor for Optional();
  uint64_t v48 = *(void *)(v13 - 8);
  MEMORY[0x1895F8858](v13);
  uint64_t v52 = (char *)v43 - v14;
  uint64_t v56 = a7;
  uint64_t v59 = a3;
  swift_getAssociatedTypeWitness();
  uint64_t v15 = type metadata accessor for Optional();
  uint64_t v46 = *(void *)(v15 - 8);
  uint64_t v16 = MEMORY[0x1895F8858](v15);
  uint64_t v45 = (char *)v43 - v17;
  uint64_t v47 = v16;
  *(void *)&__int128 v76 = v16;
  uint64_t v49 = v13;
  *((void *)&v76 + 1) = v13;
  uint64_t v51 = v11;
  *(void *)&__int128 v77 = v11;
  *((void *)&v77 + 1) = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Range<AttributedString.Index>);
  uint64_t TupleTypeMetadata = swift_getTupleTypeMetadata();
  uint64_t v19 = type metadata accessor for Optional();
  MEMORY[0x1895F8858](v19);
  v43[8] = (char *)v43 - v20;
  uint64_t v21 = *v44;
  uint64_t v96 = *v44;
  swift_retain_n();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    __int128 v22 = *(_OWORD *)(v21 + 32);
    v108[0] = *(_OWORD *)(v21 + 16);
    v108[1] = v22;
    v108[2] = *(_OWORD *)(v21 + 48);
    uint64_t v23 = *(void *)(v21 + 64);
    uint64_t v24 = *(void *)(v21 + 72);
    uint64_t v25 = *(void *)(v21 + 80);
    uint64_t v26 = *(void *)(v21 + 88);
    type metadata accessor for AttributedString.Guts();
    swift_allocObject();
    outlined retain of Locale((uint64_t)v108);
    swift_unknownObjectRetain();
    uint64_t v96 = AttributedString.Guts.init(string:runs:)(v108, v23, v24, v25, v26);
    swift_release();
  }

  __int128 v27 = *(_OWORD *)(v21 + 32);
  __int128 v105 = *(_OWORD *)(v21 + 16);
  __int128 v106 = v27;
  __int128 v107 = *(_OWORD *)(v21 + 48);
  unint64_t v28 = BigString.startIndex.getter();
  uint64_t v30 = v29;
  uint64_t v32 = v31;
  uint64_t v34 = v33;
  unint64_t result = BigString.endIndex.getter();
  if (result >> 10 >= v28 >> 10)
  {
    unint64_t v97 = v28;
    uint64_t v98 = v30;
    uint64_t v99 = v32;
    uint64_t v100 = v34;
    unint64_t v101 = result;
    uint64_t v102 = v36;
    uint64_t v103 = v37;
    uint64_t v104 = v38;
    uint64_t v39 = swift_retain();
    v43[0] = v21;
    AttributedString.Runs.init(_:in:)(v39, &v76);
    uint64_t v40 = v54;
    uint64_t v42 = v56;
    uint64_t v41 = v57;
    AttributedString.Runs.AttributesSlice3.init(runs:)((uint64_t)&v76, v59, v54, v55, v56, v57, v58, (uint64_t)&v62);
    __int128 v82 = v67[1];
    __int128 v83 = v67[2];
    unsigned __int128 v78 = v64;
    __int128 v79 = v65;
    __int128 v80 = v66;
    __int128 v81 = v67[0];
    __int128 v76 = v62;
    __int128 v77 = v63;
    __int128 v91 = v75;
    uint64_t v84 = v68;
    uint64_t v85 = v69;
    uint64_t v86 = v70;
    uint64_t v87 = v71;
    __int128 v88 = v72;
    __int128 v89 = v73;
    uint64_t v90 = v74;
    uint64_t v92 = v69;
    uint64_t v93 = v70;
    uint64_t v94 = v71;
    v43[3] = &v61;
    v43[4] = v67;
    v43[2] = &v60;
    uint64_t v95 = v72;
    v43[5] = TupleTypeMetadata;
    *(void *)&__int128 v62 = v59;
    *((void *)&v62 + 1) = v40;
    *(void *)&__int128 v63 = v55;
    *((void *)&v63 + 1) = v42;
    unsigned __int128 v64 = __PAIR128__(v58, v41);
    type metadata accessor for AttributedString.Runs.AttributesSlice3.Iterator();
  }

  __break(1u);
  return result;
}

unint64_t AttributedString.transformingAttributes<A, B, C, D>(_:_:_:_:_:)@<X0>( uint64_t a1@<X4>, uint64_t a2@<X5>, uint64_t a3@<X6>, uint64_t a4@<X7>, uint64_t a5@<X8>, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, unint64_t a11)
{
  uint64_t v57 = a3;
  v47[6] = a1;
  v47[7] = a2;
  v47[1] = a5;
  unint64_t v55 = a11;
  uint64_t v56 = a7;
  swift_getAssociatedTypeWitness();
  uint64_t v12 = type metadata accessor for Optional();
  v47[22] = *(void *)(v12 - 8);
  MEMORY[0x1895F8858](v12);
  uint64_t v50 = (char *)v47 - v13;
  uint64_t v51 = a6;
  uint64_t v54 = a10;
  swift_getAssociatedTypeWitness();
  uint64_t v14 = type metadata accessor for Optional();
  v47[20] = *(void *)(v14 - 8);
  MEMORY[0x1895F8858](v14);
  uint64_t v49 = (char *)v47 - v15;
  uint64_t v53 = a9;
  uint64_t v58 = a4;
  swift_getAssociatedTypeWitness();
  uint64_t v16 = type metadata accessor for Optional();
  v47[18] = *(void *)(v16 - 8);
  MEMORY[0x1895F8858](v16);
  v47[17] = (char *)v47 - v17;
  uint64_t v52 = a8;
  uint64_t v18 = v57;
  swift_getAssociatedTypeWitness();
  uint64_t v19 = type metadata accessor for Optional();
  v47[15] = *(void *)(v19 - 8);
  uint64_t v20 = MEMORY[0x1895F8858](v19);
  v47[14] = (char *)v47 - v21;
  v47[16] = v20;
  *(void *)&__int128 v76 = v20;
  v47[19] = v16;
  *((void *)&v76 + 1) = v16;
  v47[21] = v14;
  *(void *)&__int128 v77 = v14;
  v47[23] = v12;
  *((void *)&v77 + 1) = v12;
  *(void *)&__int128 v78 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Range<AttributedString.Index>);
  v47[9] = swift_getTupleTypeMetadata();
  uint64_t v22 = type metadata accessor for Optional();
  MEMORY[0x1895F8858](v22);
  v47[8] = (char *)v47 - v23;
  uint64_t v24 = *v48;
  uint64_t v96 = *v48;
  swift_retain_n();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    __int128 v25 = *(_OWORD *)(v24 + 32);
    v108[0] = *(_OWORD *)(v24 + 16);
    v108[1] = v25;
    v108[2] = *(_OWORD *)(v24 + 48);
    uint64_t v26 = *(void *)(v24 + 64);
    uint64_t v27 = *(void *)(v24 + 72);
    uint64_t v28 = *(void *)(v24 + 80);
    uint64_t v29 = *(void *)(v24 + 88);
    type metadata accessor for AttributedString.Guts();
    swift_allocObject();
    outlined retain of Locale((uint64_t)v108);
    swift_unknownObjectRetain();
    uint64_t v96 = AttributedString.Guts.init(string:runs:)(v108, v26, v27, v28, v29);
    swift_release();
  }

  __int128 v30 = *(_OWORD *)(v24 + 32);
  __int128 v105 = *(_OWORD *)(v24 + 16);
  __int128 v106 = v30;
  __int128 v107 = *(_OWORD *)(v24 + 48);
  unint64_t v31 = BigString.startIndex.getter();
  uint64_t v33 = v32;
  uint64_t v35 = v34;
  uint64_t v37 = v36;
  unint64_t result = BigString.endIndex.getter();
  if (result >> 10 >= v31 >> 10)
  {
    unint64_t v97 = v31;
    uint64_t v98 = v33;
    uint64_t v99 = v35;
    uint64_t v100 = v37;
    unint64_t v101 = result;
    uint64_t v102 = v39;
    uint64_t v103 = v40;
    uint64_t v104 = v41;
    uint64_t v42 = swift_retain();
    v47[0] = v24;
    AttributedString.Runs.init(_:in:)(v42, &v76);
    uint64_t v43 = v52;
    uint64_t v44 = v56;
    uint64_t v46 = v53;
    uint64_t v45 = v54;
    AttributedString.Runs.AttributesSlice4.init(runs:)((uint64_t)&v76, v18, v58, v51, v52, v53, v54, (uint64_t)&v62, v55);
    __int128 v82 = v67[1];
    __int128 v83 = v67[2];
    __int128 v78 = v64;
    unsigned __int128 v79 = v65;
    __int128 v80 = v66;
    __int128 v81 = v67[0];
    __int128 v76 = v62;
    __int128 v77 = v63;
    __int128 v91 = v75;
    uint64_t v84 = v68;
    uint64_t v85 = v69;
    uint64_t v86 = v70;
    uint64_t v87 = v71;
    __int128 v88 = v72;
    __int128 v89 = v73;
    uint64_t v90 = v74;
    uint64_t v92 = v69;
    v47[4] = &v61;
    v47[5] = v67;
    uint64_t v93 = v70;
    uint64_t v94 = v71;
    v47[2] = &v59;
    v47[3] = &v60;
    uint64_t v95 = v72;
    *(void *)&__int128 v62 = v18;
    *((void *)&v62 + 1) = v58;
    *(void *)&__int128 v63 = v51;
    *((void *)&v63 + 1) = v44;
    *(void *)&__int128 v64 = v43;
    *((void *)&v64 + 1) = v46;
    unsigned __int128 v65 = __PAIR128__(v55, v45);
    type metadata accessor for AttributedString.Runs.AttributesSlice4.Iterator();
  }

  __break(1u);
  return result;
}

unint64_t AttributedString.transformingAttributes<A, B, C, D, E>(_:_:_:_:_:_:)@<X0>( uint64_t a1@<X5>, uint64_t a2@<X6>, uint64_t a3@<X7>, uint64_t a4@<X8>, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t v74 = a3;
  v49[7] = a1;
  v49[8] = a2;
  v49[1] = a4;
  uint64_t v72 = a10;
  uint64_t v71 = a13;
  uint64_t v73 = a8;
  swift_getAssociatedTypeWitness();
  uint64_t v13 = type metadata accessor for Optional();
  uint64_t v60 = *(void *)(v13 - 8);
  MEMORY[0x1895F8858](v13);
  unsigned __int128 v65 = (char *)v49 - v14;
  *((void *)&v66 + 1) = a7;
  swift_getAssociatedTypeWitness();
  uint64_t v15 = type metadata accessor for Optional();
  uint64_t v58 = *(void *)(v15 - 8);
  MEMORY[0x1895F8858](v15);
  __int128 v64 = (char *)v49 - v16;
  uint64_t v70 = a11;
  *(void *)&__int128 v66 = a6;
  swift_getAssociatedTypeWitness();
  uint64_t v17 = type metadata accessor for Optional();
  uint64_t v56 = *(void *)(v17 - 8);
  MEMORY[0x1895F8858](v17);
  __int128 v63 = (char *)v49 - v18;
  uint64_t v67 = a5;
  swift_getAssociatedTypeWitness();
  uint64_t v19 = type metadata accessor for Optional();
  uint64_t v54 = *(void *)(v19 - 8);
  MEMORY[0x1895F8858](v19);
  __int128 v62 = (char *)v49 - v20;
  uint64_t v69 = a9;
  swift_getAssociatedTypeWitness();
  uint64_t v21 = type metadata accessor for Optional();
  uint64_t v52 = *(void *)(v21 - 8);
  uint64_t v22 = MEMORY[0x1895F8858](v21);
  uint64_t v51 = (char *)v49 - v23;
  uint64_t v53 = v22;
  *(void *)&__int128 v93 = v22;
  uint64_t v55 = v19;
  *((void *)&v93 + 1) = v19;
  uint64_t v57 = v17;
  *(void *)&__int128 v94 = v17;
  uint64_t v59 = v15;
  *((void *)&v94 + 1) = v15;
  uint64_t v61 = v13;
  *(void *)&__int128 v95 = v13;
  *((void *)&v95 + 1) = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Range<AttributedString.Index>);
  v49[10] = swift_getTupleTypeMetadata();
  uint64_t v24 = type metadata accessor for Optional();
  MEMORY[0x1895F8858](v24);
  v49[9] = (char *)v49 - v25;
  uint64_t v26 = *v50;
  uint64_t v113 = *v50;
  swift_retain_n();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    __int128 v27 = *(_OWORD *)(v26 + 32);
    v125[0] = *(_OWORD *)(v26 + 16);
    v125[1] = v27;
    v125[2] = *(_OWORD *)(v26 + 48);
    uint64_t v28 = *(void *)(v26 + 64);
    uint64_t v29 = *(void *)(v26 + 72);
    uint64_t v30 = *(void *)(v26 + 80);
    uint64_t v31 = *(void *)(v26 + 88);
    type metadata accessor for AttributedString.Guts();
    swift_allocObject();
    outlined retain of Locale((uint64_t)v125);
    swift_unknownObjectRetain();
    uint64_t v113 = AttributedString.Guts.init(string:runs:)(v125, v28, v29, v30, v31);
    swift_release();
  }

  __int128 v32 = *(_OWORD *)(v26 + 32);
  __int128 v122 = *(_OWORD *)(v26 + 16);
  __int128 v123 = v32;
  __int128 v124 = *(_OWORD *)(v26 + 48);
  unint64_t v33 = BigString.startIndex.getter();
  uint64_t v35 = v34;
  uint64_t v37 = v36;
  uint64_t v39 = v38;
  unint64_t result = BigString.endIndex.getter();
  if (result >> 10 >= v33 >> 10)
  {
    unint64_t v114 = v33;
    uint64_t v115 = v35;
    uint64_t v116 = v37;
    uint64_t v117 = v39;
    unint64_t v118 = result;
    uint64_t v119 = v41;
    uint64_t v120 = v42;
    uint64_t v121 = v43;
    uint64_t v44 = swift_retain();
    v49[0] = v26;
    AttributedString.Runs.init(_:in:)(v44, &v93);
    uint64_t v45 = v70;
    uint64_t v46 = v73;
    uint64_t v47 = v69;
    uint64_t v48 = v72;
    AttributedString.Runs.AttributesSlice5.init(runs:)( (uint64_t)&v93,  v74,  v67,  v66,  *((uint64_t *)&v66 + 1),  v69,  v72,  (uint64_t)&v79,  v70,  a12,  v71);
    __int128 v99 = v84[1];
    __int128 v100 = v84[2];
    __int128 v95 = v81;
    __int128 v96 = v82;
    __int128 v97 = v83;
    __int128 v98 = v84[0];
    __int128 v93 = v79;
    __int128 v94 = v80;
    __int128 v108 = v92;
    uint64_t v101 = v85;
    uint64_t v102 = v86;
    uint64_t v103 = v87;
    uint64_t v104 = v88;
    __int128 v105 = v89;
    __int128 v106 = v90;
    v49[6] = v84;
    uint64_t v107 = v91;
    uint64_t v109 = v86;
    v49[4] = &v77;
    v49[5] = &v78;
    uint64_t v110 = v87;
    uint64_t v111 = v88;
    v49[2] = &v75;
    v49[3] = &v76;
    uint64_t v112 = v89;
    uint64_t v68 = a12;
    *(void *)&__int128 v79 = v74;
    *((void *)&v79 + 1) = v67;
    __int128 v80 = v66;
    *(void *)&__int128 v81 = v46;
    *((void *)&v81 + 1) = v47;
    *(void *)&__int128 v82 = v48;
    *((void *)&v82 + 1) = v45;
    *(void *)&__int128 v83 = a12;
    *((void *)&v83 + 1) = v71;
    type metadata accessor for AttributedString.Runs.AttributesSlice5.Iterator();
  }

  __break(1u);
  return result;
}

unint64_t AttributedString.transformingAttributes<A>(_:_:)@<X0>( void *a1@<X0>, void (*a2)(__int128 *)@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X8>)
{
  return AttributedString.transformingAttributes<A>(_:_:)(a2, a3, *(void *)(*MEMORY[0x18961A9A8] + *a1 + 8LL), a4, a5);
}

unint64_t AttributedString.transformingAttributes<A, B>(_:_:_:)@<X0>( void *a1@<X0>, void *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  return AttributedString.transformingAttributes<A, B>(_:_:_:)( a3,  a4,  *(void *)(*a1 + *MEMORY[0x18961A9A8] + 8LL),  *(void *)(*a2 + *MEMORY[0x18961A9A8] + 8LL),  a5,  a6,  a7);
}

unint64_t AttributedString.transformingAttributes<A, B, C>(_:_:_:_:)@<X0>( void *a1@<X0>, void *a2@<X1>, void *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, unint64_t a8@<X7>, uint64_t a9@<X8>)
{
  return AttributedString.transformingAttributes<A, B, C>(_:_:_:_:)( a4,  a5,  *(void *)(*a1 + *MEMORY[0x18961A9A8] + 8LL),  *(void *)(*a2 + *MEMORY[0x18961A9A8] + 8LL),  *(void *)(*a3 + *MEMORY[0x18961A9A8] + 8LL),  a9,  a6,  a7,  a8);
}

unint64_t AttributedString.transformingAttributes<A, B, C, D>(_:_:_:_:_:)@<X0>( void *a1@<X0>, void *a2@<X1>, void *a3@<X2>, void *a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, unint64_t a11)
{
  return AttributedString.transformingAttributes<A, B, C, D>(_:_:_:_:_:)( a5,  a6,  *(void *)(*a1 + *MEMORY[0x18961A9A8] + 8LL),  *(void *)(*a2 + *MEMORY[0x18961A9A8] + 8LL),  a9,  *(void *)(*a3 + *MEMORY[0x18961A9A8] + 8LL),  *(void *)(*a4 + *MEMORY[0x18961A9A8] + 8LL),  a7,  a8,  a10,  a11);
}

unint64_t AttributedString.transformingAttributes<A, B, C, D, E>(_:_:_:_:_:_:)@<X0>( void *a1@<X0>, void *a2@<X1>, void *a3@<X2>, void *a4@<X3>, void *a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  return AttributedString.transformingAttributes<A, B, C, D, E>(_:_:_:_:_:_:)( a6,  a7,  *(void *)(*a1 + *MEMORY[0x18961A9A8] + 8LL),  a9,  *(void *)(*a2 + *MEMORY[0x18961A9A8] + 8LL),  *(void *)(*a3 + *MEMORY[0x18961A9A8] + 8LL),  *(void *)(*a4 + *MEMORY[0x18961A9A8] + 8LL),  *(void *)(*a5 + *MEMORY[0x18961A9A8] + 8LL),  a8,  a10,  a11,  a12,  a13);
}

uint64_t specialized AttributedString.SingleAttributeTransformer.value.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 16);
  uint64_t v4 = *(void *)(a2 + 24);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v6 = type metadata accessor for Optional();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = MEMORY[0x1895F8858](v6);
  uint64_t v10 = (char *)&v22 - v9;
  uint64_t v11 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v12 = MEMORY[0x1895F8858](v8);
  uint64_t v14 = (char *)&v22 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v12);
  uint64_t v16 = (char *)&v22 - v15;
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v10, a1, v6);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v10, 1LL, AssociatedTypeWitness) == 1)
  {
    (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
    uint64_t v30 = 0LL;
    __int128 v28 = 0u;
    __int128 v29 = 0u;
    __int128 v26 = 0u;
    __int128 v27 = 0u;
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v16, v10, AssociatedTypeWitness);
    uint64_t v17 = *(void (**)(char *, char *, uint64_t))(v11 + 16);
    v17(v14, v16, AssociatedTypeWitness);
    *((void *)&v24 + 1) = AssociatedTypeWitness;
    *(void *)uint64_t v25 = swift_getAssociatedConformanceWitness();
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v23);
    v17((char *)boxed_opaque_existential_1, v14, AssociatedTypeWitness);
    (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(v4 + 32))(&v26, v3, v4);
    *(_OWORD *)&v25[8] = v26;
    v25[24] = (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 40))(v3, v4) & 1;
    uint64_t v19 = (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 48))(v3, v4);
    uint64_t v20 = *(void (**)(char *, uint64_t))(v11 + 8);
    v20(v14, AssociatedTypeWitness);
    uint64_t v30 = v19;
    __int128 v28 = *(_OWORD *)v25;
    __int128 v29 = *(_OWORD *)&v25[16];
    __int128 v26 = v23;
    __int128 v27 = v24;
    v20(v16, AssociatedTypeWitness);
  }

  return outlined assign with take of AttributedString._AttributeValue?((uint64_t)&v26, v22 + 80);
}

uint64_t outlined assign with take of AttributedString._AttributeValue?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttributedString._AttributeValue?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40LL))(a2, a1, v4);
  return a2;
}

uint64_t outlined init with take of AttributedString._AttributeValue?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttributedString._AttributeValue?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32LL))(a2, a1, v4);
  return a2;
}

uint64_t type metadata accessor for AttributedString.SingleAttributeTransformer( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata( a1,  a2,  a3,  a4,  (uint64_t)&nominal type descriptor for AttributedString.SingleAttributeTransformer);
}

void *specialized RangeReplaceableCollection.init(_contents:_:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = 1LL;
  if (a2 != 1) {
    uint64_t v7 = 2LL;
  }
  if (a4 == 1) {
    int64_t v8 = a2 != 1;
  }
  else {
    int64_t v8 = v7;
  }
  if (v8)
  {
    uint64_t v10 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  v8,  0,  MEMORY[0x18961AFE8]);
    uint64_t v11 = v10;
    if (a2 != 1)
    {
      unint64_t v12 = v10[2];
      unint64_t v13 = v10[3];
      swift_bridgeObjectRetain();
      if (v12 >= v13 >> 1) {
        uint64_t v11 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (void *)(v13 > 1),  v12 + 1,  1,  v11);
      }
      v11[2] = v12 + 1;
      uint64_t v14 = &v11[2 * v12];
      v14[4] = a1;
      v14[5] = a2;
    }

    if (a4 != 1)
    {
      unint64_t v16 = v11[2];
      unint64_t v15 = v11[3];
      if (v16 >= v15 >> 1) {
        uint64_t v11 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (void *)(v15 > 1),  v16 + 1,  1,  v11);
      }
      v11[2] = v16 + 1;
      uint64_t v17 = &v11[2 * v16];
      void v17[4] = a3;
      void v17[5] = a4;
    }
  }

  else
  {
    outlined consume of AttributedString.AttributeRunBoundaries?(a3, a4);
    return (void *)MEMORY[0x18961AFE8];
  }

  return v11;
}

uint64_t sub_183040D2C@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  return AttributedString.SingleAttributeTransformer.value.getter(a4);
}

uint64_t sub_183040D64(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = type metadata accessor for AttributedString.SingleAttributeTransformer( 0LL,  *(void *)(a4 + a3 - 16),  *(void *)(a4 + a3 - 8),  a4);
  return specialized AttributedString.SingleAttributeTransformer.value.setter(a1, v5);
}

uint64_t sub_183040DA0()
{
  return 16LL;
}

__n128 sub_183040DAC(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t destroy for AttributedString.SingleAttributeTransformer(uint64_t a1)
{
  uint64_t result = swift_bridgeObjectRelease();
  if (*(void *)(a1 + 104))
  {
    __swift_destroy_boxed_opaque_existential_1(a1 + 80);
    if (*(void *)(a1 + 128) != 1LL) {
      swift_bridgeObjectRelease();
    }
    return swift_bridgeObjectRelease();
  }

  return result;
}

uint64_t initializeWithCopy for AttributedString.SingleAttributeTransformer(uint64_t a1, uint64_t a2)
{
  __int128 v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  __int128 v5 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v5;
  uint64_t v6 = *(void *)(a2 + 72);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = v6;
  uint64_t v7 = a2 + 80;
  uint64_t v8 = *(void *)(a2 + 104);
  swift_bridgeObjectRetain();
  if (v8)
  {
    uint64_t v9 = *(void *)(a2 + 112);
    *(void *)(a1 + 104) = v8;
    *(void *)(a1 + 112) = v9;
    (**(void (***)(uint64_t, uint64_t, uint64_t))(v8 - 8))(a1 + 80, v7, v8);
    uint64_t v10 = (_OWORD *)(a2 + 120);
    uint64_t v11 = *(void *)(a2 + 128);
    if (v11 == 1)
    {
      *(_OWORD *)(a1 + 120) = *v10;
    }

    else
    {
      *(void *)(a1 + 120) = *(void *)v10;
      *(void *)(a1 + 128) = v11;
      swift_bridgeObjectRetain();
    }

    *(_BYTE *)(a1 + 136) = *(_BYTE *)(a2 + 136);
    *(void *)(a1 + 144) = *(void *)(a2 + 144);
    swift_bridgeObjectRetain();
  }

  else
  {
    __int128 v12 = *(_OWORD *)(v7 + 48);
    *(_OWORD *)(a1 + 112) = *(_OWORD *)(v7 + 32);
    *(_OWORD *)(a1 + 128) = v12;
    *(void *)(a1 + 144) = *(void *)(v7 + 64);
    __int128 v13 = *(_OWORD *)(v7 + 16);
    *(_OWORD *)(a1 + 80) = *(_OWORD *)v7;
    *(_OWORD *)(a1 + 96) = v13;
  }

  return a1;
}

uint64_t assignWithCopy for AttributedString.SingleAttributeTransformer(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  __int128 v4 = *(_OWORD *)(a2 + 8);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(_OWORD *)(a1 + 8) = v4;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  __int128 v5 = *(_OWORD *)(a2 + 40);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(_OWORD *)(a1 + 40) = v5;
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = (_OWORD *)(a1 + 80);
  uint64_t v7 = (_OWORD *)(a2 + 80);
  uint64_t v8 = *(void *)(a2 + 104);
  if (*(void *)(a1 + 104))
  {
    if (v8)
    {
      __swift_assign_boxed_opaque_existential_1((uint64_t *)(a1 + 80), (uint64_t *)(a2 + 80));
      uint64_t v9 = *(void *)(a2 + 128);
      if (*(void *)(a1 + 128) == 1LL)
      {
        if (v9 != 1)
        {
          *(void *)(a1 + 120) = *(void *)(a2 + 120);
          *(void *)(a1 + 128) = *(void *)(a2 + 128);
          swift_bridgeObjectRetain();
LABEL_17:
          *(_BYTE *)(a1 + 136) = *(_BYTE *)(a2 + 136);
          *(void *)(a1 + 144) = *(void *)(a2 + 144);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRelease();
          return a1;
        }
      }

      else
      {
        if (v9 != 1)
        {
          *(void *)(a1 + 120) = *(void *)(a2 + 120);
          *(void *)(a1 + 128) = *(void *)(a2 + 128);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRelease();
          goto LABEL_17;
        }

        outlined destroy of AttributedString.AttributeRunBoundaries(a1 + 120);
      }

      *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
      goto LABEL_17;
    }

    outlined destroy of AttributedString._AttributeValue(a1 + 80);
    *uint64_t v6 = *v7;
    __int128 v11 = *(_OWORD *)(a2 + 112);
    __int128 v10 = *(_OWORD *)(a2 + 128);
    __int128 v12 = *(_OWORD *)(a2 + 96);
    *(void *)(a1 + 144) = *(void *)(a2 + 144);
    *(_OWORD *)(a1 + 112) = v11;
    *(_OWORD *)(a1 + 128) = v10;
    *(_OWORD *)(a1 + 96) = v12;
  }

  else if (v8)
  {
    *(void *)(a1 + 104) = v8;
    *(void *)(a1 + 112) = *(void *)(a2 + 112);
    (**(void (***)(uint64_t, uint64_t))(v8 - 8))(a1 + 80, a2 + 80);
    if (*(void *)(a2 + 128) == 1LL)
    {
      *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
    }

    else
    {
      *(void *)(a1 + 120) = *(void *)(a2 + 120);
      *(void *)(a1 + 128) = *(void *)(a2 + 128);
      swift_bridgeObjectRetain();
    }

    *(_BYTE *)(a1 + 136) = *(_BYTE *)(a2 + 136);
    *(void *)(a1 + 144) = *(void *)(a2 + 144);
    swift_bridgeObjectRetain();
  }

  else
  {
    *uint64_t v6 = *v7;
    __int128 v13 = *(_OWORD *)(a2 + 96);
    __int128 v14 = *(_OWORD *)(a2 + 112);
    __int128 v15 = *(_OWORD *)(a2 + 128);
    *(void *)(a1 + 144) = *(void *)(a2 + 144);
    *(_OWORD *)(a1 + 112) = v14;
    *(_OWORD *)(a1 + 128) = v15;
    *(_OWORD *)(a1 + 96) = v13;
  }

  return a1;
}

uint64_t outlined destroy of AttributedString.AttributeRunBoundaries(uint64_t a1)
{
  return a1;
}

__n128 __swift_memcpy152_8(uint64_t a1, uint64_t a2)
{
  __int128 v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  __int128 v3 = *(_OWORD *)(a2 + 32);
  __int128 v4 = *(_OWORD *)(a2 + 48);
  __int128 v5 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v5;
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)(a1 + 48) = v4;
  __n128 result = *(__n128 *)(a2 + 96);
  __int128 v7 = *(_OWORD *)(a2 + 112);
  __int128 v8 = *(_OWORD *)(a2 + 128);
  *(void *)(a1 + 144) = *(void *)(a2 + 144);
  *(_OWORD *)(a1 + 112) = v7;
  *(_OWORD *)(a1 + 128) = v8;
  *(__n128 *)(a1 + 96) = result;
  return result;
}

uint64_t assignWithTake for AttributedString.SingleAttributeTransformer(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  uint64_t v4 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = v4;
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  swift_bridgeObjectRelease();
  __int128 v5 = (_OWORD *)(a1 + 80);
  uint64_t v6 = (_OWORD *)(a2 + 80);
  if (*(void *)(a1 + 104))
  {
    if (*(void *)(a2 + 104))
    {
      __swift_destroy_boxed_opaque_existential_1(a1 + 80);
      __int128 v7 = *(_OWORD *)(a2 + 96);
      *__int128 v5 = *v6;
      *(_OWORD *)(a1 + 96) = v7;
      *(void *)(a1 + 112) = *(void *)(a2 + 112);
      __int128 v8 = (void *)(a2 + 120);
      if (*(void *)(a1 + 128) != 1LL)
      {
        uint64_t v9 = *(void *)(a2 + 128);
        if (v9 != 1)
        {
          *(void *)(a1 + 120) = *v8;
          *(void *)(a1 + 128) = v9;
          swift_bridgeObjectRelease();
          goto LABEL_10;
        }

        outlined destroy of AttributedString.AttributeRunBoundaries(a1 + 120);
      }

      *(_OWORD *)(a1 + 120) = *(_OWORD *)v8;
LABEL_10:
      *(_BYTE *)(a1 + 136) = *(_BYTE *)(a2 + 136);
      *(void *)(a1 + 144) = *(void *)(a2 + 144);
      swift_bridgeObjectRelease();
      return a1;
    }

    outlined destroy of AttributedString._AttributeValue(a1 + 80);
  }

  __int128 v10 = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 128) = v10;
  *(void *)(a1 + 144) = *(void *)(a2 + 144);
  __int128 v11 = *(_OWORD *)(a2 + 96);
  *__int128 v5 = *v6;
  *(_OWORD *)(a1 + 96) = v11;
  return a1;
}

uint64_t getEnumTagSinglePayload for AttributedString.SingleAttributeTransformer(uint64_t a1, int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0 && *(_BYTE *)(a1 + 152)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 72);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for AttributedString.SingleAttributeTransformer( uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(_BYTE *)(result + 152) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 72) = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 152) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

uint64_t Locale.Language.isEquivalent(to:)()
{
  uint64_t v0 = Locale.Language.maximalIdentifier.getter();
  uint64_t v2 = v1;
  if (v0 == Locale.Language.maximalIdentifier.getter() && v2 == v3) {
    char v4 = 1;
  }
  else {
    char v4 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v4 & 1;
}

uint64_t Locale.Language.init(identifier:)@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v30 = *MEMORY[0x1895F89C0];
  String.utf8CString.getter();
  int Language = uloc_getLanguage();
  uint64_t v3 = swift_release();
  if (Language <= 0)
  {
    uint64_t v25 = 0LL;
    uint64_t v26 = 0LL;
  }

  else
  {
    v29[Language] = 0;
    uint64_t v3 = MEMORY[0x186E1B634](v29);
    uint64_t v25 = v4;
    uint64_t v26 = v3;
  }

  MEMORY[0x1895F8858](v3);
  LODWORD(v27) = 0;
  String.utf8CString.getter();
  int Script = uloc_getScript();
  uint64_t v6 = swift_release();
  uint64_t v7 = 0LL;
  uint64_t v8 = 0LL;
  if (Script > 0)
  {
    v23[Script] = 0;
    uint64_t v6 = MEMORY[0x186E1B634](v23);
    uint64_t v7 = v6;
    uint64_t v8 = v9;
  }

  MEMORY[0x1895F8858](v6);
  LODWORD(v27) = 0;
  String.utf8CString.getter();
  int Country = uloc_getCountry();
  swift_release();
  uint64_t v11 = 0LL;
  uint64_t v12 = 0LL;
  if ((int)v27 <= 0 && Country > 0)
  {
    v23[Country] = 0;
    uint64_t v11 = MEMORY[0x186E1B634](v23);
    uint64_t v12 = v13;
  }

  swift_bridgeObjectRelease();
  uint64_t v14 = v25;
  if (v25)
  {
    Swift::String v15 = String.lowercased()();
    uint64_t countAndFlagsBits = v15._countAndFlagsBits;
    unint64_t object = v15._object;
    if (v8) {
      goto LABEL_11;
    }
LABEL_14:
    uint64_t v7 = 0LL;
    uint64_t v18 = 0LL;
    uint64_t v19 = 0LL;
    if (v12) {
      goto LABEL_12;
    }
LABEL_15:
    uint64_t v11 = 0LL;
    uint64_t result = 0LL;
    uint64_t v21 = 0LL;
    goto LABEL_16;
  }

  uint64_t v26 = 0LL;
  uint64_t countAndFlagsBits = 0LL;
  unint64_t object = 0LL;
  if (!v8) {
    goto LABEL_14;
  }
LABEL_11:
  uint64_t v27 = v7;
  uint64_t v28 = v8;
  swift_bridgeObjectRetain_n();
  String.init<A>(_:)();
  Swift::String v17 = String._capitalized()();
  uint64_t v18 = v17._countAndFlagsBits;
  uint64_t v19 = v17._object;
  swift_bridgeObjectRelease();
  uint64_t v14 = v25;
  swift_bridgeObjectRelease();
  if (!v12) {
    goto LABEL_15;
  }
LABEL_12:
  Swift::String v22 = String.uppercased()();
  uint64_t v21 = v22._object;
  uint64_t result = v22._countAndFlagsBits;
LABEL_16:
  *a1 = v26;
  a1[1] = v14;
  a1[2] = countAndFlagsBits;
  a1[3] = (uint64_t)object;
  a1[4] = v7;
  a1[5] = v8;
  a1[6] = v18;
  a1[7] = (uint64_t)v19;
  a1[8] = v11;
  a1[9] = v12;
  a1[10] = result;
  a1[11] = (uint64_t)v21;
  return result;
}

uint64_t Locale.Language.minimalIdentifier.getter()
{
  return Locale.Language.minimalIdentifier.getter( (uint64_t (*)(uint64_t, void, unint64_t))specialized _withFixedCharBuffer(size:_:),  (uint64_t (*)(uint64_t, uint64_t, uint64_t))specialized _withFixedCharBuffer(size:_:));
}

uint64_t Locale.Language.languageCode.getter@<X0>(uint64_t *a1@<X8>)
{
  __int128 v3 = v1[1];
  __int128 v14 = *v1;
  __int128 v15 = v3;
  __int128 v4 = v1[3];
  __int128 v16 = v1[2];
  __int128 v17 = v4;
  __int128 v5 = v1[5];
  __int128 v18 = v1[4];
  __int128 v19 = v5;
  __int128 v6 = v14;
  uint64_t v8 = *((void *)&v14 + 1);
  uint64_t v7 = v14;
  unint64_t object = (void *)*((void *)&v15 + 1);
  uint64_t countAndFlagsBits = v15;
  if (!*((void *)&v14 + 1))
  {
    outlined retain of Locale.Language( (uint64_t *)&v14,  (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))outlined copy of Locale.LanguageCode?);
    uint64_t v7 = specialized _withFixedCharBuffer(size:_:)(257LL, (uint64_t *)&v14);
    uint64_t v8 = v11;
    outlined retain of Locale.Language( (uint64_t *)&v14,  (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))outlined consume of Locale.LanguageCode?);
    if (v8)
    {
      Swift::String v12 = String.lowercased()();
      unint64_t object = v12._object;
      uint64_t countAndFlagsBits = v12._countAndFlagsBits;
    }

    else
    {
      uint64_t v7 = 0LL;
      uint64_t countAndFlagsBits = 0LL;
      unint64_t object = 0LL;
    }
  }

  *a1 = v7;
  a1[1] = v8;
  a1[2] = countAndFlagsBits;
  a1[3] = (uint64_t)object;
  return outlined copy of Locale.LanguageCode?(v6, *((uint64_t *)&v6 + 1));
}

uint64_t Locale.Language.maximalIdentifier.getter()
{
  return Locale.Language.minimalIdentifier.getter( (uint64_t (*)(uint64_t, void, unint64_t))specialized _withFixedCharBuffer(size:_:),  (uint64_t (*)(uint64_t, uint64_t, uint64_t))specialized _withFixedCharBuffer(size:_:));
}

uint64_t Locale.Language.minimalIdentifier.getter( uint64_t (*a1)(uint64_t, void, unint64_t), uint64_t (*a2)(uint64_t, uint64_t, uint64_t))
{
  uint64_t v3 = v2[1];
  uint64_t v5 = v2[2];
  __int128 v4 = (void *)v2[3];
  uint64_t v6 = v2[5];
  uint64_t v8 = v2[6];
  uint64_t v7 = (void *)v2[7];
  uint64_t v10 = v2[8];
  uint64_t v9 = v2[9];
  uint64_t v11 = v2[10];
  Swift::String v12 = (void *)v2[11];
  uint64_t v30 = v3;
  uint64_t v32 = v2[4];
  uint64_t v31 = *v2;
  uint64_t v13 = *v2;
  if (v3)
  {
    uint64_t v14 = v2[4];
    outlined copy of Locale.LanguageCode?(v13, v3);
    outlined copy of Locale.LanguageCode?(v14, v6);
    outlined copy of Locale.LanguageCode?(v10, v9);
    v15._uint64_t countAndFlagsBits = v5;
    v15._unint64_t object = v4;
    String.append(_:)(v15);
    if (!v6) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }

  uint64_t v28 = v2[4];
  outlined copy of Locale.LanguageCode?(v13, 0LL);
  outlined copy of Locale.LanguageCode?(v28, v6);
  outlined copy of Locale.LanguageCode?(v10, v9);
  if (v6)
  {
LABEL_3:
    v16._uint64_t countAndFlagsBits = 45LL;
    v16._unint64_t object = (void *)0xE100000000000000LL;
    String.append(_:)(v16);
    v17._uint64_t countAndFlagsBits = v8;
    v17._unint64_t object = v7;
    String.append(_:)(v17);
  }

void Locale.Components.icuIdentifier.getter()
{
  uint64_t v1 = *(void *)(v0 + 64);
  uint64_t v2 = *(void *)(v0 + 112);
  uint64_t v3 = *(void *)(v0 + 128);
  uint64_t v4 = *(void *)(v0 + 144);
  uint64_t v158 = *(void *)(v0 + 152);
  uint64_t v159 = *(void *)(v0 + 120);
  uint64_t v160 = *(void *)(v0 + 160);
  uint64_t v162 = *(void *)(v0 + 176);
  uint64_t v157 = *(void *)(v0 + 184);
  uint64_t v163 = *(void *)(v0 + 192);
  uint64_t v161 = *(unsigned __int8 *)(v0 + 200);
  uint64_t v5 = MEMORY[0x18961AFF0];
  if (*(_BYTE *)(v0 + 96) == 16) {
    goto LABEL_11;
  }
  uint64_t v155 = *(void *)(v0 + 64);
  uint64_t v6 = Calendar.Identifier.cldrIdentifier.getter();
  uint64_t v8 = v7;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  unint64_t v11 = specialized __RawDictionaryStorage.find<A>(_:)(0x7261646E656C6163LL, 0xE800000000000000LL);
  uint64_t v12 = *(void *)(v5 + 16);
  BOOL v13 = (v10 & 1) == 0;
  uint64_t v14 = v12 + v13;
  if (__OFADD__(v12, v13)) {
    goto LABEL_46;
  }
  char v15 = v10;
  if (*(void *)(v5 + 24) < v14)
  {
    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v14, isUniquelyReferenced_nonNull_native);
    unint64_t v16 = specialized __RawDictionaryStorage.find<A>(_:)(0x7261646E656C6163LL, 0xE800000000000000LL);
    if ((v15 & 1) != (v17 & 1)) {
      goto LABEL_192;
    }
    unint64_t v11 = v16;
    if ((v15 & 1) == 0) {
      goto LABEL_6;
    }
    goto LABEL_9;
  }

  if ((isUniquelyReferenced_nonNull_native & 1) != 0)
  {
    if ((v10 & 1) == 0) {
      goto LABEL_6;
    }
    goto LABEL_9;
  }

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<ICULegacyKey, String>);
  uint64_t v125 = static _DictionaryStorage.copy(original:)();
  uint64_t v126 = MEMORY[0x18961AFF0];
  uint64_t v5 = v125;
  uint64_t v127 = *(void *)(MEMORY[0x18961AFF0] + 16LL);
  if (!v127) {
    goto LABEL_182;
  }
  uint64_t v128 = (void *)(v125 + 64);
  unint64_t v129 = (unint64_t)((1LL << *(_BYTE *)(v5 + 32)) + 63) >> 6;
  if (v5 != MEMORY[0x18961AFF0] || (unint64_t)v128 >= MEMORY[0x18961AFF0] + 8 * v129 + 64)
  {
    memmove(v128, (const void *)(MEMORY[0x18961AFF0] + 64LL), 8 * v129);
    uint64_t v126 = MEMORY[0x18961AFF0];
  }

  int64_t v130 = 0LL;
  *(void *)(v5 + 16) = v127;
  uint64_t v131 = 1LL << *(_BYTE *)(v126 + 32);
  uint64_t v132 = *(void *)(v126 + 64);
  uint64_t v133 = -1LL;
  if (v131 < 64) {
    uint64_t v133 = ~(-1LL << v131);
  }
  unint64_t v134 = v133 & v132;
  int64_t v152 = (unint64_t)(v131 + 63) >> 6;
  while (1)
  {
    if (v134)
    {
      unint64_t v135 = __clz(__rbit64(v134));
      v134 &= v134 - 1;
      int64_t v154 = v130;
      unint64_t v136 = v135 | (v130 << 6);
      uint64_t v137 = MEMORY[0x18961AFF0];
    }

    else
    {
      BOOL v148 = __OFADD__(v130, 1LL);
      int64_t v149 = v130 + 1;
      uint64_t v137 = MEMORY[0x18961AFF0];
      if (v148) {
        goto LABEL_187;
      }
      if (v149 >= v152) {
        goto LABEL_182;
      }
      unint64_t v150 = *(void *)(MEMORY[0x18961AFF0] + 8 * v149 + 64);
      if (!v150)
      {
        int64_t v151 = v149 + 1;
        if (v149 + 1 >= v152) {
          goto LABEL_182;
        }
        unint64_t v150 = *(void *)(MEMORY[0x18961AFF0] + 8 * v151 + 64);
        if (!v150)
        {
          int64_t v151 = v149 + 2;
          if (v149 + 2 >= v152) {
            goto LABEL_182;
          }
          unint64_t v150 = *(void *)(MEMORY[0x18961AFF0] + 8 * v151 + 64);
          if (!v150)
          {
            int64_t v151 = v149 + 3;
            if (v149 + 3 >= v152) {
              goto LABEL_182;
            }
            unint64_t v150 = *(void *)(MEMORY[0x18961AFF0] + 8 * v151 + 64);
            if (!v150)
            {
              int64_t v151 = v149 + 4;
              if (v149 + 4 >= v152) {
                goto LABEL_182;
              }
              unint64_t v150 = *(void *)(MEMORY[0x18961AFF0] + 8 * v151 + 64);
              if (!v150)
              {
                int64_t v151 = v149 + 5;
                if (v149 + 5 >= v152) {
                  goto LABEL_182;
                }
                unint64_t v150 = *(void *)(MEMORY[0x18961AFF0] + 8 * v151 + 64);
                if (!v150)
                {
                  int64_t v151 = v149 + 6;
                  if (v149 + 6 >= v152) {
                    goto LABEL_182;
                  }
                  unint64_t v150 = *(void *)(MEMORY[0x18961AFF0] + 8 * v151 + 64);
                  if (!v150)
                  {
                    int64_t v151 = v149 + 7;
                    if (v149 + 7 >= v152) {
                      goto LABEL_182;
                    }
                    unint64_t v150 = *(void *)(MEMORY[0x18961AFF0] + 8 * v151 + 64);
                    if (!v150)
                    {
                      while (1)
                      {
                        int64_t v149 = v151 + 1;
                        if (__OFADD__(v151, 1LL)) {
                          goto LABEL_191;
                        }
                        uint64_t v137 = MEMORY[0x18961AFF0];
                        if (v149 >= v152) {
                          break;
                        }
                        unint64_t v150 = *(void *)(MEMORY[0x18961AFF0] + 8 * v149 + 64);
                        ++v151;
                        if (v150) {
                          goto LABEL_177;
                        }
                      }

LABEL_182:
                      swift_bridgeObjectRelease();
                      if ((v15 & 1) == 0)
                      {
LABEL_6:
                        specialized _NativeDictionary._insert(at:key:value:)( v11,  0x7261646E656C6163LL,  0xE800000000000000LL,  v6,  v8,  (void *)v5);
                        goto LABEL_10;
                      }

        __int128 v96 = v10;
        if (v15 != v14)
        {
LABEL_183:
          unint64_t v16 = v96 >> 16;
          if (v96 >> 16 >= v132)
          {
            __break(1u);
          }

          else
          {
            if ((v7 & 0x1000000000000000LL) != 0)
            {
              unint64_t v98 = String.UTF8View._foreignSubscript(position:)();
            }

            else if ((v7 & 0x2000000000000000LL) != 0)
            {
              *(void *)&v133[0] = v8;
              *((void *)&v133[0] + 1) = v7 & 0xFFFFFFFFFFFFFFLL;
              unint64_t v98 = *((_BYTE *)v133 + v16);
            }

            else
            {
              if ((v8 & 0x1000000000000000LL) != 0) {
                int64_t v97 = (v7 & 0xFFFFFFFFFFFFFFFLL) + 32;
              }
              else {
                int64_t v97 = _StringObject.sharedUTF8.getter();
              }
              unint64_t v98 = *(_BYTE *)(v97 + v16);
            }

            unint64_t v16 = v98 == 45;
            if (v15 != v14)
            {
              if ((v7 & 0x1000000000000000LL) == 0) {
                goto LABEL_194;
              }
LABEL_209:
              if (v132 <= v10 >> 16) {
                goto LABEL_278;
              }
              char v10 = String.UTF8View._foreignIndex(after:)();
              goto LABEL_211;
            }
          }

          char v10 = _StringGuts._slowEnsureMatchingEncoding(_:)(v10, v8, v7);
          if ((v7 & 0x1000000000000000LL) != 0) {
            goto LABEL_209;
          }
LABEL_194:
          char v10 = (v10 & 0xFFFFFFFFFFFF0000LL) + 65540;
LABEL_211:
          uint64_t v6 = v10 >> 14;
          goto LABEL_212;
        }
      }

      __int128 v96 = _StringGuts._slowEnsureMatchingEncoding(_:)(v10, v8, v7);
      goto LABEL_183;
    }

    if (v15 != v14)
    {
      char v15 = v10 >> 16;
      if ((v7 & 0x1000000000000000LL) != 0) {
        goto LABEL_159;
      }
LABEL_161:
      unint64_t v86 = 0;
      unint64_t v87 = LODWORD(v135[1]);
      uint64_t v88 = *((void *)&v135[0] + 1);
      __int128 v89 = *(void *)&v135[0];
LABEL_264:
      *(void *)a6 = v89;
      *(void *)(a6 + 8) = v88;
      *(void *)(a6 + 16) = v87;
      *(void *)(a6 + 24) = v15;
      *(_BYTE *)(a6 + 32) = v86;
      return;
    }

      uint64_t v120 = v180;
      if (v179 >= 1)
      {
        v194[0] = v139;
        *(double *)__unint64_t dst = v13;
        *((void *)&__dst[0] + 1) = v17;
        _CalendarGregorian.timeZoneTransitionInterval(at:timeZone:)(v194, (uint64_t)__dst, (uint64_t)__src);
        if ((__src[1] & 1) == 0) {
          uint64_t v139 = v139 - *((double *)__src + 1);
        }
      }

      uint64_t v9 = v138 + v139 + 0.0;
      goto LABEL_186;
    }

LABEL_189:
                                                                        __break(1u);
                                                                        goto LABEL_190;
                                                                      }

                                                                      int64_t v81 = v99;
                                                                    }
                                                                  }
                                                                }
                                                              }
                                                            }
                                                          }
                                                        }

  swift_release();
  outlined consume of Set<A1>.Iterator._Variant<A><A1>();

  swift_bridgeObjectRelease();
  uint64_t result = (uint64_t)objc_msgSend( objc_allocWithZone((Class)NSString),  sel_initWithBytesNoCopy_length_encoding_freeWhenDone_,  "NSDetailedErrors",  16,  1,  0);
  if (!result)
  {
LABEL_213:
    __break(1u);
    return result;
  }

  uint64_t v171 = (void *)result;
  uint64_t v172 = objc_msgSend(objc_allocWithZone((Class)NSString), sel_initWithString_, result);

  v182[0] = v172;
  AnyHashable.init<A>(_:)();
  if (*(void *)(v20 + 16) && (id v173 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)&v186), (v174 & 1) != 0))
  {
    outlined init with copy of Any(*(void *)(v20 + 56) + 32 * v173, (uint64_t)&v197);
  }

  else
  {
    uint64_t v197 = 0u;
    uint64_t v198 = 0u;
  }

  swift_release();
  outlined destroy of AnyHashable((uint64_t)&v186);
  if (*((void *)&v198 + 1))
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Error]);
    if ((swift_dynamicCast() & 1) != 0) {
      specialized Array.append<A>(contentsOf:)((uint64_t)v182[0]);
    }
  }

  else
  {
    outlined destroy of Any?((uint64_t)&v197, &demangling cache variable for type metadata for Any?);
  }

  return v199;
}

      if (v6)
      {
        __break(1u);
        goto LABEL_191;
      }

      goto LABEL_215;
    }
  }

  char v10 = swift_unknownObjectRetain_n();
  unint64_t v11 = specialized Rope._endPath.getter(v10);
  uint64_t result = swift_unknownObjectRelease();
  uint64_t v12 = 0LL;
  if (v3)
  {
LABEL_13:
    swift_unknownObjectRetain();
    specialized Rope._Node.distanceFromStart<A>(to:in:)(v140, v11, v12, v3, v8);
    uint64_t result = swift_unknownObjectRelease_n();
  }

  uint64_t v6 = v2[8];
  BOOL v13 = (__int128 *)v2[10];
  if (v6) {
    uint64_t v14 = v2[10];
  }
  else {
    uint64_t v14 = 0LL;
  }
  if (a2 < 0 || v14 < a2) {
    goto LABEL_234;
  }
  char v15 = v2[9];
  unint64_t v16 = v2[11];
  uint64_t v139 = v11;
  if (!v6 || !*(_WORD *)(v6 + 16) || (uint64_t)v13 <= a2)
  {
    char v28 = swift_unknownObjectRetain_n();
    __int128 v29 = specialized Rope._endPath.getter(v28);
    uint64_t result = swift_unknownObjectRelease();
    char v20 = 0LL;
    if (!v6) {
      goto LABEL_42;
    }
    goto LABEL_41;
  }

  unint64_t v136 = (__int128 *)v15;
  uint64_t v137 = v13;
  uint64_t v138 = v16;
  char v17 = *(unsigned __int8 *)(v6 + 18);
  if (*(_BYTE *)(v6 + 18))
  {
    uint64_t result = swift_unknownObjectRetain_n();
    Swift::String v18 = v6;
    while (1)
    {
      unint64_t v21 = *(unsigned __int16 *)(v18 + 16);
      if (!*(_WORD *)(v18 + 16)) {
        goto LABEL_25;
      }
      uint64_t v22 = *(void *)(v18 + 40);
      BOOL v23 = __OFSUB__(a2, v22);
      uint64_t v24 = a2 - v22;
      if (v23) {
        goto LABEL_229;
      }
      if (__OFADD__(v24, 1LL)) {
        goto LABEL_230;
      }
      if (v24 + 1 < 1)
      {
        unint64_t v21 = 0LL;
      }

      else
      {
        if ((_DWORD)v21 == 1)
        {
          a2 = v24;
LABEL_25:
          if (a2) {
            goto LABEL_226;
          }
          goto LABEL_26;
        }

        char v25 = (uint64_t *)(v18 + 64);
        uint64_t v26 = 1LL;
        while (1)
        {
          unint64_t v27 = *v25;
          v25 += 3;
          a2 = v24 - v27;
          if (__OFSUB__(v24, v27)) {
            goto LABEL_223;
          }
          if (__OFADD__(a2, 1LL)) {
            goto LABEL_224;
          }
          if (a2 + 1 < 1) {
            break;
          }
          ++v26;
          uint64_t v24 = a2;
          if (v21 == v26) {
            goto LABEL_25;
          }
        }

        unint64_t v21 = v26;
        a2 = v24;
      }

LABEL_177:
      unint64_t v134 = (v150 - 1) & v150;
      int64_t v154 = v149;
      unint64_t v136 = __clz(__rbit64(v150)) + (v149 << 6);
    }

    uint64_t v138 = 16 * v136;
    uint64_t v139 = *(void *)(v137 + 56);
    uint64_t v140 = (uint64_t *)(*(void *)(v137 + 48) + v138);
    uint64_t v142 = *v140;
    uint64_t v141 = v140[1];
    uint64_t v143 = v139 + v138;
    uint64_t v144 = *(void *)(v139 + v138);
    uint64_t v145 = *(void *)(v143 + 8);
    id v146 = (void *)(*(void *)(v5 + 48) + v138);
    *id v146 = v142;
    v146[1] = v141;
    id v147 = (void *)(*(void *)(v5 + 56) + v138);
    void *v147 = v144;
    v147[1] = v145;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    int64_t v130 = v154;
  }

      __break(1u);
      goto LABEL_178;
    }

    unint64_t v16 = v34;
LABEL_53:
    char v28 = (v33 - 1) & v33;
    uint64_t v31 = __clz(__rbit64(v33)) + (v16 << 6);
LABEL_54:
    unint64_t v35 = (uint64_t *)(*(void *)(v8 + 48) + 16 * v31);
    uint64_t v36 = *v35;
    uint64_t v5 = v35[1];
    BOOL v37 = *v35 == v29 && v5 == a2;
    if (v37 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
      continue;
    }
    uint64_t v38 = *v6;
    if (!*(void *)(*v6 + 16LL)) {
      goto LABEL_37;
    }
    swift_bridgeObjectRetain();
    char v39 = specialized __RawDictionaryStorage.find<A>(_:)(v36, v5);
    if ((v40 & 1) == 0) {
      goto LABEL_36;
    }
    outlined init with copy of AttributedString._AttributeValue(*(void *)(v38 + 56) + 72 * v39, (uint64_t)&v181);
    char v41 = v185;
    char v190 = v185;
    unint64_t v188 = v183;
    char v189 = v184;
    unint64_t v186 = v181;
    unint64_t v187 = v182;
    if (!v185)
    {
LABEL_35:
      outlined destroy of AttributedString._AttributeValue((uint64_t)&v186);
LABEL_36:
      swift_bridgeObjectRelease();
LABEL_37:
      char v25 = v165;
      continue;
    }

    uint64_t v8 = v185 + 56;
    uint64_t v42 = 1LL << *(_BYTE *)(v185 + 32);
    uint64_t v43 = v42 < 64 ? ~(-1LL << v42) : -1LL;
    char v44 = v43 & *(void *)(v185 + 56);
    char v45 = (unint64_t)(v42 + 63) >> 6;
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain();
    uint64_t v7 = 0LL;
    do
    {
      while (1)
      {
        if (v44)
        {
          unint64_t v46 = __clz(__rbit64(v44));
          v44 &= v44 - 1;
          uint64_t v47 = v46 | (v7 << 6);
        }

        else
        {
          BOOL v48 = v7 + 1;
          if (__OFADD__(v7, 1LL)) {
            goto LABEL_176;
          }
          if (v48 >= v45)
          {
LABEL_34:
            swift_bridgeObjectRelease();
            swift_release();
            swift_bridgeObjectRelease();
            uint64_t v8 = v163;
            uint64_t v6 = v164;
            __int128 v29 = a1;
            uint64_t v7 = (uint64_t)v174;
            goto LABEL_35;
          }

          uint64_t v49 = *(void *)(v8 + 8 * v48);
          ++v7;
          if (!v49)
          {
            uint64_t v7 = v48 + 1;
            if (v48 + 1 >= v45) {
              goto LABEL_34;
            }
            uint64_t v49 = *(void *)(v8 + 8 * v7);
            if (!v49)
            {
              uint64_t v7 = v48 + 2;
              if (v48 + 2 >= v45) {
                goto LABEL_34;
              }
              uint64_t v49 = *(void *)(v8 + 8 * v7);
              if (!v49)
              {
                uint64_t v7 = v48 + 3;
                if (v48 + 3 >= v45) {
                  goto LABEL_34;
                }
                uint64_t v49 = *(void *)(v8 + 8 * v7);
                if (!v49)
                {
                  char v50 = v48 + 4;
                  if (v50 >= v45) {
                    goto LABEL_34;
                  }
                  uint64_t v49 = *(void *)(v8 + 8 * v50);
                  if (!v49)
                  {
                    while (1)
                    {
                      uint64_t v7 = v50 + 1;
                      if (__OFADD__(v50, 1LL)) {
                        break;
                      }
                      if (v7 >= v45) {
                        goto LABEL_34;
                      }
                      uint64_t v49 = *(void *)(v8 + 8 * v7);
                      ++v50;
                      if (v49) {
                        goto LABEL_84;
                      }
                    }

                __break(1u);
LABEL_178:
                __break(1u);
LABEL_179:
                __break(1u);
LABEL_180:
                __break(1u);
LABEL_181:
                __break(1u);
LABEL_182:
                __break(1u);
                return result;
              }

              goto LABEL_113;
            }

            uint64_t v83 = 2LL;
LABEL_119:
            swift_unknownObjectRelease();
            swift_unknownObjectRelease();
            uint64_t v36 = v68 & 0xFFFFFFFFFFFFF0FFLL | (v83 << 8);
            uint64_t v82 = v157;
            uint64_t v59 = v67;
            int64_t v62 = v167;
            goto LABEL_82;
          }
        }
      }

      else
      {
        unint64_t v84 = v69;
      }

void *Locale.Components.init(locale:)@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *a1;
  uint64_t v4 = a1[1];
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(v4 + 64);
  swift_unknownObjectRetain();
  uint64_t v7 = v6(ObjectType, v4);
  uint64_t v9 = v8;
  swift_unknownObjectRelease();
  Locale.Components.init(identifier:)(v7, v9, __src);
  v11[0] = v3;
  v11[1] = v4;
  Locale.Components.applyPreferencesOverride(_:)(v11);
  swift_unknownObjectRelease();
  return memcpy(a2, __src, 0x160uLL);
}

uint64_t Locale.Language.Components.init(identifier:)@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v30 = *MEMORY[0x1895F89C0];
  String.utf8CString.getter();
  int Language = uloc_getLanguage();
  uint64_t v3 = swift_release();
  if (Language < 1)
  {
    uint64_t v25 = 0LL;
    uint64_t v26 = 0LL;
  }

  else
  {
    v29[Language] = 0;
    uint64_t v3 = MEMORY[0x186E1B634](v29);
    uint64_t v25 = v4;
    uint64_t v26 = v3;
  }

  MEMORY[0x1895F8858](v3);
  LODWORD(v27) = 0;
  String.utf8CString.getter();
  int Script = uloc_getScript();
  uint64_t v6 = swift_release();
  uint64_t v7 = 0LL;
  uint64_t v8 = 0LL;
  if (Script >= 1)
  {
    v23[Script] = 0;
    uint64_t v6 = MEMORY[0x186E1B634](v23);
    uint64_t v7 = v6;
    uint64_t v8 = v9;
  }

  MEMORY[0x1895F8858](v6);
  LODWORD(v27) = 0;
  String.utf8CString.getter();
  int Country = uloc_getCountry();
  swift_release();
  uint64_t v11 = 0LL;
  uint64_t v12 = 0LL;
  if ((int)v27 <= 0 && Country >= 1)
  {
    v23[Country] = 0;
    uint64_t v11 = MEMORY[0x186E1B634](v23);
    uint64_t v12 = v13;
  }

  swift_bridgeObjectRelease();
  uint64_t v14 = v25;
  if (v25)
  {
    Swift::String v15 = String.lowercased()();
    uint64_t countAndFlagsBits = v15._countAndFlagsBits;
    unint64_t object = v15._object;
    if (v8) {
      goto LABEL_11;
    }
LABEL_14:
    uint64_t v7 = 0LL;
    uint64_t v18 = 0LL;
    char v19 = 0LL;
    if (v12) {
      goto LABEL_12;
    }
LABEL_15:
    uint64_t v11 = 0LL;
    uint64_t result = 0LL;
    unint64_t v21 = 0LL;
    goto LABEL_16;
  }

  uint64_t v26 = 0LL;
  uint64_t countAndFlagsBits = 0LL;
  unint64_t object = 0LL;
  if (!v8) {
    goto LABEL_14;
  }
LABEL_11:
  uint64_t v27 = v7;
  uint64_t v28 = v8;
  swift_bridgeObjectRetain_n();
  String.init<A>(_:)();
  Swift::String v17 = String._capitalized()();
  uint64_t v18 = v17._countAndFlagsBits;
  char v19 = v17._object;
  swift_bridgeObjectRelease();
  uint64_t v14 = v25;
  swift_bridgeObjectRelease();
  if (!v12) {
    goto LABEL_15;
  }
LABEL_12:
  Swift::String v22 = String.uppercased()();
  unint64_t v21 = v22._object;
  uint64_t result = v22._countAndFlagsBits;
LABEL_16:
  *a1 = v26;
  a1[1] = v14;
  a1[2] = countAndFlagsBits;
  a1[3] = (uint64_t)object;
  a1[4] = v7;
  a1[5] = v8;
  a1[6] = v18;
  a1[7] = (uint64_t)v19;
  a1[8] = v11;
  a1[9] = v12;
  a1[10] = result;
  a1[11] = (uint64_t)v21;
  return result;
}

uint64_t *Locale.Components.init(identifier:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v113 = a3;
  uint64_t v204 = *MEMORY[0x1895F89C0];
  swift_bridgeObjectRetain();
  LODWORD(v161._countAndFlagsBits) = 0;
  String.utf8CString.getter();
  int Language = uloc_getLanguage();
  uint64_t v6 = swift_release();
  uint64_t v7 = 0LL;
  uint64_t v8 = 0LL;
  if (Language > 0)
  {
    v159[Language] = 0;
    uint64_t v6 = MEMORY[0x186E1B634](v159, 0LL);
    uint64_t v7 = v6;
  }

  unint64_t v150 = v8;
  MEMORY[0x1895F8858](v6);
  LODWORD(v161._countAndFlagsBits) = 0;
  String.utf8CString.getter();
  int Script = uloc_getScript();
  uint64_t v10 = swift_release();
  uint64_t v11 = 0LL;
  uint64_t v12 = 0LL;
  if (SLODWORD(v161._countAndFlagsBits) <= 0 && Script > 0)
  {
    v107[Script] = 0;
    uint64_t v10 = MEMORY[0x186E1B634](v107);
    uint64_t v11 = v10;
    uint64_t v12 = v13;
  }

  MEMORY[0x1895F8858](v10);
  LODWORD(v161._countAndFlagsBits) = 0;
  String.utf8CString.getter();
  int Country = uloc_getCountry();
  swift_release();
  uint64_t v15 = 0LL;
  if (SLODWORD(v161._countAndFlagsBits) > 0)
  {
    int64_t v151 = 0LL;
  }

  else
  {
    int64_t v151 = 0LL;
    if (Country > 0)
    {
      v107[Country] = 0;
      uint64_t v15 = MEMORY[0x186E1B634](v107);
      int64_t v151 = v16;
    }
  }

  uint64_t v157 = v15;
  swift_bridgeObjectRelease();
  uint64_t v17 = (uint64_t)v150;
  if (v150)
  {
    Swift::String v18 = String.lowercased()();
    uint64_t countAndFlagsBits = v18._countAndFlagsBits;
    unint64_t object = v18._object;
    char v19 = v151;
    if (v12)
    {
LABEL_12:
      v161._uint64_t countAndFlagsBits = v11;
      v161._unint64_t object = v12;
      swift_bridgeObjectRetain_n();
      String.init<A>(_:)();
      Swift::String v20 = String._capitalized()();
      uint64_t v155 = v20._countAndFlagsBits;
      BOOL v148 = v20._object;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_15;
    }
  }

  else
  {
    uint64_t v7 = 0LL;
    uint64_t countAndFlagsBits = 0LL;
    unint64_t object = 0LL;
    char v19 = v151;
    if (v12) {
      goto LABEL_12;
    }
  }

  uint64_t v11 = 0LL;
  uint64_t v155 = 0LL;
  BOOL v148 = 0LL;
LABEL_15:
  uint64_t v145 = a2;
  uint64_t v120 = a1;
  int64_t v151 = v19;
  if (v19)
  {
    Swift::String v21 = String.uppercased()();
    uint64_t v154 = v21._countAndFlagsBits;
    Swift::String v22 = v21._object;
  }

  else
  {
    uint64_t v157 = 0LL;
    uint64_t v154 = 0LL;
    Swift::String v22 = 0LL;
  }

  int64_t v121 = v22;
  outlined copy of Locale.LanguageCode?(v7, v17);
  outlined copy of Locale.LanguageCode?(v11, (uint64_t)v12);
  uint64_t v23 = v157;
  uint64_t v24 = (uint64_t)v151;
  outlined copy of Locale.LanguageCode?(v157, (uint64_t)v151);
  outlined consume of Locale.LanguageCode?(v7, v17);
  outlined consume of Locale.LanguageCode?(v11, (uint64_t)v12);
  outlined consume of Locale.LanguageCode?(v23, v24);
  uint64_t v143 = v7;
  outlined copy of Locale.LanguageCode?(v7, (uint64_t)v150);
  uint64_t v114 = v11;
  uint64_t v142 = v12;
  outlined copy of Locale.LanguageCode?(v11, (uint64_t)v12);
  uint64_t v25 = outlined copy of Locale.LanguageCode?(v23, v24);
  MEMORY[0x1895F8858](v25);
  LODWORD(v161._countAndFlagsBits) = 0;
  String.utf8CString.getter();
  int Variant = uloc_getVariant();
  swift_release();
  if (SLODWORD(v161._countAndFlagsBits) <= 0
    && Variant > 0
    && (v107[Variant] = 0, uint64_t v27 = MEMORY[0x186E1B634](v107), v28))
  {
    uint64_t v29 = v27;
    uint64_t v125 = v28;
    Swift::String v30 = String.lowercased()();
    int64_t v123 = v30._object;
    uint64_t v124 = v30._countAndFlagsBits;
    outlined consume of Locale.LanguageCode?(0LL, 0LL);
  }

  else
  {
    uint64_t v29 = 0LL;
    uint64_t v124 = 0LL;
    uint64_t v125 = 0LL;
    int64_t v123 = 0LL;
  }

  uint64_t v31 = v114;
  char v33 = v142;
  uint64_t v32 = v143;
  int v158 = 0;
  String.utf8CString.getter();
  uint64_t v34 = uloc_openKeywords();
  swift_release();
  uint64_t v122 = v29;
  if (v158 > 0 || !v34)
  {
    unint64_t v35 = v121;
    swift_bridgeObjectRelease();
    uint64_t v36 = 0LL;
    uint64_t v139 = 0LL;
    uint64_t v140 = 0LL;
    uint64_t v141 = 0LL;
    BOOL v37 = 0LL;
    unint64_t v136 = 0LL;
    uint64_t v137 = 0LL;
    uint64_t v138 = 0LL;
    uint64_t v38 = 0LL;
    uint64_t v133 = 0LL;
    uint64_t v134 = 0LL;
    unint64_t v135 = 0LL;
    uint64_t v152 = 0LL;
    uint64_t v153 = 0LL;
    uint64_t v131 = 0LL;
    uint64_t v132 = 0LL;
    uint64_t v146 = 0LL;
    uint64_t v147 = 0LL;
    uint64_t v127 = 0LL;
    uint64_t v128 = 0LL;
    unint64_t v129 = 0LL;
    int64_t v130 = 0LL;
    uint64_t v39 = 0LL;
    unint64_t v40 = 0LL;
    v126._uint64_t countAndFlagsBits = 0LL;
    v126._unint64_t object = 0LL;
    LODWORD(v145) = 4;
    uint64_t v41 = 7LL;
    int v42 = 16;
    goto LABEL_30;
  }

  type metadata accessor for ICU.Enumerator();
  uint64_t v118 = 7LL;
  uint64_t v43 = swift_allocObject();
  *(void *)(v43 + 16) = v34;
  swift_retain();
  LODWORD(v161._countAndFlagsBits) = 0;
  LODWORD(v160[0]._countAndFlagsBits) = 0;
  uint64_t v44 = uenum_next();
  if (SLODWORD(v161._countAndFlagsBits) <= 0)
  {
    uint64_t v49 = 0LL;
    uint64_t v48 = 0LL;
    v126._uint64_t countAndFlagsBits = 0LL;
    v126._unint64_t object = 0LL;
    uint64_t v115 = 0LL;
    uint64_t v116 = 0LL;
    uint64_t v47 = 0LL;
    unint64_t v129 = 0LL;
    int64_t v130 = 0LL;
    uint64_t v127 = 0LL;
    uint64_t v128 = 0LL;
    uint64_t v131 = 0LL;
    uint64_t v132 = 0LL;
    uint64_t v46 = 0LL;
    uint64_t v45 = 0LL;
    uint64_t v134 = 0LL;
    unint64_t v135 = 0LL;
    uint64_t v133 = 0LL;
    uint64_t v137 = 0LL;
    uint64_t v138 = 0LL;
    unint64_t v136 = 0LL;
    uint64_t v140 = 0LL;
    uint64_t v141 = 0LL;
    uint64_t v139 = 0LL;
    uint64_t v119 = 0LL;
    uint64_t v109 = 0LL;
    int countAndFlagsBits_low = 16;
    uint64_t v117 = 0LL;
    uint64_t v118 = 7LL;
    int v50 = 4;
    uint64_t v112 = v43;
    while (1)
    {
      uint64_t v39 = v47;
      uint64_t v153 = v49;
      if (!v44) {
        goto LABEL_29;
      }
      uint64_t v152 = v45;
      uint64_t v66 = String.init(cString:)();
      static Locale.legacyKey(forKey:)(v66, v67, &v161._countAndFlagsBits);
      uint64_t v68 = swift_bridgeObjectRelease();
      uint64_t v69 = v161._object;
      if (v161._object)
      {
        uint64_t v146 = v48;
        uint64_t v147 = v46;
        uint64_t v144 = v47;
        uint64_t v70 = v161._countAndFlagsBits;
        MEMORY[0x1895F8858](v68);
        LODWORD(v161._countAndFlagsBits) = 0;
        String.utf8CString.getter();
        String.utf8CString.getter();
        int KeywordValue = uloc_getKeywordValue();
        swift_release();
        swift_release();
        if (SLODWORD(v161._countAndFlagsBits) > 0 || KeywordValue <= 0) {
          goto LABEL_44;
        }
        v108[KeywordValue] = 0;
        uint64_t v72 = MEMORY[0x186E1B634](v108);
        uint64_t v46 = v147;
        if (!v73)
        {
          swift_bridgeObjectRelease();
          uint64_t v47 = v144;
          uint64_t v65 = v146;
          goto LABEL_49;
        }

        unint64_t v110 = v73;
        uint64_t v111 = v72;
        uint64_t v65 = v146;
        if (v70 == 0x7261646E656C6163LL && v69 == (void *)0xE800000000000000LL
          || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
        {
          swift_bridgeObjectRelease();
          v74._unint64_t object = v110;
          v74._uint64_t countAndFlagsBits = v111;
          Calendar.Identifier.init(identifierString:)(v74);
          int countAndFlagsBits_low = LOBYTE(v161._countAndFlagsBits);
        }

        else if (v70 == 0x6F6974616C6C6F63LL && v69 == (void *)0xE90000000000006ELL {
               || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
        }
        {
          swift_bridgeObjectRelease();
          uint64_t v75 = (uint64_t)v110;
          uint64_t v76 = v111;
          Swift::String v77 = String.lowercased()();
          outlined consume of Locale.LanguageCode?((uint64_t)v119, v140);
          uint64_t v119 = (void *)v76;
          uint64_t v46 = v147;
          uint64_t v139 = (void *)v77._countAndFlagsBits;
          uint64_t v140 = v75;
          uint64_t v141 = v77._object;
        }

        else
        {
          if ((v70 != 0x79636E6572727563LL || v69 != (void *)0xE800000000000000LL)
            && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
          {
            if (v70 == 0x737265626D756ELL && v69 == (void *)0xE700000000000000LL
              || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
            {
              swift_bridgeObjectRelease();
              uint64_t v81 = (uint64_t)v110;
              uint64_t v82 = v111;
              Swift::String v83 = String.lowercased()();
              outlined consume of Locale.LanguageCode?((uint64_t)v116, v134);
              uint64_t v116 = (void *)v82;
              uint64_t v133 = (void *)v83._countAndFlagsBits;
              uint64_t v134 = v81;
              unint64_t v135 = v83._object;
LABEL_62:
              uint64_t v45 = v152;
              uint64_t v47 = v144;
              uint64_t v46 = v147;
              goto LABEL_33;
            }

            if (v70 == 30566 && v69 == (void *)0xE200000000000000LL
              || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
            {
              swift_bridgeObjectRelease();
              v205._unint64_t object = v110;
              v205._uint64_t countAndFlagsBits = v111;
              Locale.Weekday.init(rawValue:)(v205, (char *)&v161);
              uint64_t v118 = LOBYTE(v161._countAndFlagsBits);
              goto LABEL_62;
            }

            if (v70 == 0x7372756F68LL && v69 == (void *)0xE500000000000000LL
              || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
            {
              swift_bridgeObjectRelease();
              v84._uint64_t countAndFlagsBits = v111;
              v84._unint64_t object = v110;
              Swift::Int v85 = _findStringSwitchCase(cases:string:)( (Swift::OpaquePointer)&outlined read-only object #0 of Locale.Components.init(identifier:),  v84);
              swift_bridgeObjectRelease();
              Swift::Int v86 = v85;
              uint64_t v46 = v147;
              int v50 = 0;
              uint64_t v45 = v152;
              uint64_t v47 = v144;
              switch(v86)
              {
                case 0LL:
                  goto LABEL_33;
                case 1LL:
                  int v50 = 1;
                  break;
                case 2LL:
                  int v50 = 2;
                  break;
                case 3LL:
                  int v50 = 3;
                  break;
                default:
                  int v50 = 4;
                  goto LABEL_43;
              }

              goto LABEL_33;
            }

            if (v70 == 0x6572757361656DLL && v69 == (void *)0xE700000000000000LL
              || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
            {
              swift_bridgeObjectRelease();
              unint64_t v87 = v110;
              if (v111 == 0x6C61697265706D69LL && v110 == (void *)0xE800000000000000LL
                || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
              {
                swift_bridgeObjectRelease();
                if (one-time initialization token for uk != -1) {
                  swift_once();
                }
                uint64_t v89 = static Locale.MeasurementSystem.uk;
                uint64_t v88 = *(void **)algn_18C5D4118;
                uint64_t v90 = (void *)*((void *)&xmmword_18C5D4120 + 1);
                uint64_t v46 = xmmword_18C5D4120;
                swift_bridgeObjectRetain();
                swift_bridgeObjectRetain();
                outlined consume of Locale.LanguageCode?(v152, (uint64_t)v131);
                uint64_t v131 = v88;
                uint64_t v132 = v90;
                uint64_t v47 = v144;
                uint64_t v65 = v146;
                uint64_t v45 = v89;
              }

              else
              {
                uint64_t v96 = v111;
                Swift::String v97 = String.lowercased()();
                outlined consume of Locale.LanguageCode?(v152, (uint64_t)v131);
                uint64_t v131 = v87;
                uint64_t v132 = v97._object;
                uint64_t v46 = v97._countAndFlagsBits;
                uint64_t v47 = v144;
                uint64_t v65 = v146;
                uint64_t v45 = v96;
              }

              goto LABEL_33;
            }

            if (v70 == 26482 && v69 == (void *)0xE200000000000000LL
              || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
            {
              swift_bridgeObjectRelease();
              if (String.count.getter() >= 3)
              {
                specialized Collection.prefix(_:)(2LL);
                swift_bridgeObjectRelease();
                Swift::String v91 = Substring.uppercased()();
                swift_bridgeObjectRelease();
                Swift::String v161 = v91;
                uint64_t v92 = String.init<A>(_:)();
                uint64_t v94 = v93;
                Swift::String v95 = String.uppercased()();
                outlined consume of Locale.LanguageCode?(v127, (uint64_t)v129);
                uint64_t v127 = v92;
                uint64_t v128 = v95._countAndFlagsBits;
                unint64_t v129 = v94;
                int64_t v130 = v95._object;
LABEL_45:
                uint64_t v47 = v144;
LABEL_46:
                uint64_t v65 = v146;
LABEL_47:
                uint64_t v46 = v147;
LABEL_49:
                uint64_t v45 = v152;
                goto LABEL_33;
              }

void *Locale.Components.applyPreferencesOverride(_:)(void *result)
{
  void (*v4)(uint64_t *__return_ptr, uint64_t, uint64_t);
  uint64_t v5;
  void (*v6)(uint64_t *__return_ptr, uint64_t, uint64_t);
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  void (*v10)(uint64_t *__return_ptr, uint64_t, uint64_t);
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v2 = result[1];
  if (*(_BYTE *)(v1 + 201) == 4)
  {
    uint64_t ObjectType = swift_getObjectType();
    uint64_t v4 = *(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v2 + 424);
    swift_unknownObjectRetain();
    v4(&v11, ObjectType, v2);
    uint64_t result = (void *)swift_unknownObjectRelease();
  }

  if (!*(void *)(v1 + 216))
  {
    uint64_t v5 = swift_getObjectType();
    uint64_t v6 = *(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v2 + 448);
    swift_unknownObjectRetain();
    v6(&v11, v5, v2);
    uint64_t result = (void *)swift_unknownObjectRelease();
    uint64_t v7 = v12;
    if (v12)
    {
      uint64_t v8 = v13;
      *(void *)(v1 + 208) = v11;
      *(void *)(v1 + 216) = v7;
      *(_OWORD *)(v1 + 224) = v8;
    }
  }

  if (*(_BYTE *)(v1 + 200) == 7)
  {
    uint64_t v9 = swift_getObjectType();
    uint64_t v10 = *(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v2 + 200);
    swift_unknownObjectRetain();
    v10(&v14, v9, v2);
    swift_unknownObjectRelease();
    uint64_t result = (*(void *(**)(uint64_t *__return_ptr, uint64_t *, uint64_t, uint64_t))(v2 + 432))( &v11,  &v14,  v9,  v2);
  }

  return result;
}

uint64_t Locale.LanguageCode.identifier(_:)(_BYTE *a1)
{
  uint64_t v2 = *(void *)(v1 + 16);
  unint64_t v3 = *(void *)(v1 + 24);
  if ((*a1 & 1) != 0)
  {
    uint64_t v4 = String.utf8CString.getter() + 32;
    ISO3int Language = uloc_getISO3Language();
    if (!ISO3Language)
    {
      swift_release();
      return 0LL;
    }

    if (ISO3Language == v4)
    {
      swift_bridgeObjectRetain();
    }

    else
    {
      uint64_t v2 = String.init(cString:)();
      unint64_t v3 = v6;
    }

    swift_release();
    uint64_t v9 = HIBYTE(v3) & 0xF;
    if ((v3 & 0x2000000000000000LL) == 0) {
      uint64_t v9 = v2 & 0xFFFFFFFFFFFFLL;
    }
    if (!v9)
    {
LABEL_16:
      swift_bridgeObjectRelease();
      return 0LL;
    }
  }

  else
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v2 = specialized _withFixedCharBuffer(size:_:)(257LL);
    uint64_t v8 = v7;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v8)
    {
      if (one-time initialization token for _isoLanguageCodeStrings != -1) {
        swift_once();
      }
      if ((specialized Sequence<>.contains(_:)(v2, v8, (void *)static Locale.LanguageCode._isoLanguageCodeStrings) & 1) == 0) {
        goto LABEL_16;
      }
    }

    else
    {
      return 0LL;
    }
  }

  return v2;
}

uint64_t Locale.LanguageCode.isISOLanguage.getter()
{
  uint64_t v2 = *(void *)(v0 + 16);
  uint64_t v1 = *(void *)(v0 + 24);
  if (one-time initialization token for _isoLanguageCodeStrings != -1) {
    swift_once();
  }
  uint64_t v3 = static Locale.LanguageCode._isoLanguageCodeStrings;
  uint64_t v4 = *(void *)(static Locale.LanguageCode._isoLanguageCodeStrings + 16);
  if (!v4) {
    goto LABEL_18;
  }
  if (*(void *)(static Locale.LanguageCode._isoLanguageCodeStrings + 32) == v2
    && *(void *)(static Locale.LanguageCode._isoLanguageCodeStrings + 40) == v1)
  {
    return 1LL;
  }

  uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
  if ((result & 1) != 0) {
    return 1LL;
  }
  if (v4 == 1)
  {
LABEL_18:
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v11 = specialized _withFixedCharBuffer(size:_:)(257LL);
    uint64_t v13 = v12;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (!v13) {
      return 0LL;
    }
    char v14 = specialized Sequence<>.contains(_:)(v11, v13, (void *)static Locale.LanguageCode._isoLanguageCodeStrings);
    swift_bridgeObjectRelease();
    return (v14 & 1) != 0;
  }

  uint64_t v7 = (void *)(v3 + 56);
  uint64_t v8 = 1LL;
  while (1)
  {
    uint64_t v9 = v8 + 1;
    if (__OFADD__(v8, 1LL)) {
      break;
    }
    if (*(v7 - 1) == v2 && *v7 == v1) {
      return 1LL;
    }
    uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
    if ((result & 1) != 0) {
      return 1LL;
    }
    v7 += 2;
    ++v8;
    if (v9 == v4) {
      goto LABEL_18;
    }
  }

  __break(1u);
  return result;
}

uint64_t static Locale.LanguageCode.isoLanguageCodes.getter()
{
  if (one-time initialization token for _isoLanguageCodeStrings != -1) {
    swift_once();
  }
  uint64_t v0 = static Locale.LanguageCode._isoLanguageCodeStrings;
  int64_t v1 = *(void *)(static Locale.LanguageCode._isoLanguageCodeStrings + 16);
  uint64_t v2 = MEMORY[0x18961AFE8];
  if (v1)
  {
    uint64_t v11 = MEMORY[0x18961AFE8];
    swift_bridgeObjectRetain();
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v1, 0);
    uint64_t v2 = v11;
    uint64_t v3 = (void **)(v0 + 40);
    do
    {
      uint64_t v4 = (uint64_t)*(v3 - 1);
      uint64_t v5 = *v3;
      Swift::String v6 = String.lowercased()();
      unint64_t v8 = *(void *)(v11 + 16);
      unint64_t v7 = *(void *)(v11 + 24);
      swift_bridgeObjectRetain();
      if (v8 >= v7 >> 1) {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v7 > 1, v8 + 1, 1);
      }
      v3 += 2;
      *(void *)(v11 + 16) = v8 + 1;
      uint64_t v9 = (Swift::String *)(v11 + 32 * v8);
      v9[2]._uint64_t countAndFlagsBits = v4;
      v9[2]._unint64_t object = v5;
      v9[3] = v6;
      --v1;
    }

    while (v1);
    swift_bridgeObjectRelease();
  }

  return v2;
}

void *one-time initialization function for _isoLanguageCodeStrings(uint64_t a1)
{
  return one-time initialization function for _isoLanguageCodeStrings( a1,  MEMORY[0x1896159A8],  &static Locale.LanguageCode._isoLanguageCodeStrings);
}

BOOL Locale.Script.isISOScript.getter()
{
  int Code = uscript_getCode();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return Code > 0 && v2 != -1;
}

BOOL Locale.Region.isISORegion.getter()
{
  uint64_t v5 = *MEMORY[0x1895F89C0];
  int v4 = 0;
  uint64_t v0 = String.utf8CString.getter();
  uint64_t v1 = MEMORY[0x186E218C8](v0 + 32, &v4);
  swift_release();
  return v4 < 1 && v1 != 0;
}

uint64_t Locale.Region.subRegions.getter()
{
  uint64_t v16 = *MEMORY[0x1895F89C0];
  int v15 = 0;
  uint64_t v0 = String.utf8CString.getter();
  uint64_t v1 = MEMORY[0x186E218C8](v0 + 32, &v15);
  swift_release();
  if (v15 > 0 || v1 == 0) {
    return MEMORY[0x18961AFE8];
  }
  uint64_t ContainedRegions = uregion_getContainedRegions();
  uint64_t v3 = MEMORY[0x18961AFE8];
  if (v15 <= 0 && ContainedRegions != 0)
  {
    uint64_t v6 = ContainedRegions;
    type metadata accessor for ICU.Enumerator();
    *(void *)(swift_initStackObject() + 16) = v6;
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, 0LL, 0);
    while (uenum_next())
    {
      uint64_t v7 = String.init(cString:)();
      uint64_t v9 = v8;
      Swift::String v10 = String.uppercased()();
      unint64_t v12 = *(void *)(v3 + 16);
      unint64_t v11 = *(void *)(v3 + 24);
      if (v12 >= v11 >> 1) {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v11 > 1, v12 + 1, 1);
      }
      *(void *)(v3 + 16) = v12 + 1;
      uint64_t v13 = (Swift::String *)(v3 + 32 * v12);
      v13[2]._uint64_t countAndFlagsBits = v7;
      v13[2]._unint64_t object = v9;
      v13[3] = v10;
    }

    swift_release();
  }

  return v3;
}

uint64_t Locale.Region.containingRegion.getter@<X0>(Swift::String *a1@<X8>)
{
  uint64_t v11 = *MEMORY[0x1895F89C0];
  int v10 = 0;
  uint64_t v2 = String.utf8CString.getter();
  uint64_t v3 = MEMORY[0x186E218C8](v2 + 32, &v10);
  uint64_t result = swift_release();
  if (v10 <= 0 && v3 != 0)
  {
    uint64_t result = MEMORY[0x186E218A4](v3);
    if (result)
    {
      uint64_t result = MEMORY[0x186E218BC]();
      if (!result)
      {
        __break(1u);
        return result;
      }

      uint64_t result = MEMORY[0x186E1B634]();
      if (v6)
      {
        uint64_t v7 = result;
        unint64_t v8 = v6;
        Swift::String v9 = String.uppercased()();
        uint64_t result = v9._countAndFlagsBits;
        a1->_uint64_t countAndFlagsBits = v7;
        a1->_unint64_t object = v8;
        a1[1] = v9;
        return result;
      }
    }
  }

  *a1 = 0u;
  a1[1] = 0u;
  return result;
}

uint64_t Locale.Region.continent.getter@<X0>(Swift::String *a1@<X8>)
{
  uint64_t v11 = *MEMORY[0x1895F89C0];
  int v10 = 0;
  uint64_t v2 = String.utf8CString.getter();
  uint64_t v3 = MEMORY[0x186E218C8](v2 + 32, &v10);
  uint64_t result = swift_release();
  if (v10 <= 0 && v3 != 0)
  {
    uint64_t result = MEMORY[0x186E218B0](v3, 3LL);
    if (result)
    {
      uint64_t result = MEMORY[0x186E218BC]();
      if (!result)
      {
        __break(1u);
        return result;
      }

      uint64_t result = MEMORY[0x186E1B634]();
      if (v6)
      {
        uint64_t v7 = result;
        unint64_t v8 = v6;
        Swift::String v9 = String.uppercased()();
        uint64_t result = v9._countAndFlagsBits;
        a1->_uint64_t countAndFlagsBits = v7;
        a1->_unint64_t object = v8;
        a1[1] = v9;
        return result;
      }
    }
  }

  *a1 = 0u;
  a1[1] = 0u;
  return result;
}

uint64_t static Locale.Region.isoRegions.getter()
{
  if (one-time initialization token for _isoRegionCodes != -1) {
    swift_once();
  }
  uint64_t v0 = static Locale.Region._isoRegionCodes;
  int64_t v1 = *(void *)(static Locale.Region._isoRegionCodes + 16);
  uint64_t v2 = MEMORY[0x18961AFE8];
  if (v1)
  {
    uint64_t v11 = MEMORY[0x18961AFE8];
    swift_bridgeObjectRetain();
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v1, 0);
    uint64_t v2 = v11;
    uint64_t v3 = (void **)(v0 + 40);
    do
    {
      uint64_t v4 = (uint64_t)*(v3 - 1);
      uint64_t v5 = *v3;
      Swift::String v6 = String.uppercased()();
      unint64_t v8 = *(void *)(v11 + 16);
      unint64_t v7 = *(void *)(v11 + 24);
      swift_bridgeObjectRetain();
      if (v8 >= v7 >> 1) {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v7 > 1, v8 + 1, 1);
      }
      v3 += 2;
      *(void *)(v11 + 16) = v8 + 1;
      Swift::String v9 = (Swift::String *)(v11 + 32 * v8);
      v9[2]._uint64_t countAndFlagsBits = v4;
      v9[2]._unint64_t object = v5;
      v9[3] = v6;
      --v1;
    }

    while (v1);
    swift_bridgeObjectRelease();
  }

  return v2;
}

void *one-time initialization function for isoCountries(uint64_t a1)
{
  return one-time initialization function for _isoLanguageCodeStrings( a1,  MEMORY[0x1896159A0],  &static Locale.Region.isoCountries);
}

void *one-time initialization function for _isoLanguageCodeStrings( uint64_t a1, uint64_t (*a2)(void), void *a3)
{
  uint64_t result = (void *)a2();
  if (result && (v5 = result, (uint64_t result = (void *)*result) != 0LL))
  {
    Swift::String v6 = v5 + 1;
    unint64_t v7 = (void *)MEMORY[0x18961AFE8];
    do
    {
      uint64_t v8 = String.init(cString:)();
      uint64_t v10 = v9;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        unint64_t v7 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  v7[2] + 1LL,  1,  v7);
      }
      unint64_t v12 = v7[2];
      unint64_t v11 = v7[3];
      if (v12 >= v11 >> 1) {
        unint64_t v7 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (void *)(v11 > 1),  v12 + 1,  1,  v7);
      }
      v7[2] = v12 + 1;
      uint64_t v13 = &v7[2 * v12];
      v13[4] = v8;
      v13[5] = v10;
      char v14 = (void *)*v6++;
      uint64_t result = v14;
    }

    while (v14);
  }

  else
  {
    unint64_t v7 = (void *)MEMORY[0x18961AFE8];
  }

  *a3 = v7;
  return result;
}

uint64_t one-time initialization function for _isoRegionCodes()
{
  uint64_t result = closure #1 in variable initialization expression of static Locale.Region._isoRegionCodes();
  static Locale.Region._isoRegionCodes = result;
  return result;
}

uint64_t closure #1 in variable initialization expression of static Locale.Region._isoRegionCodes()
{
  uint64_t v11 = MEMORY[0x18961AFE8];
  uint64_t Available = uregion_getAvailable();
  if (Available)
  {
    uint64_t v1 = Available;
    type metadata accessor for ICU.Enumerator();
    uint64_t inited = swift_initStackObject();
    *(void *)(inited + 16) = v1;
    specialized Array.append<A>(contentsOf:)(inited);
  }

  uint64_t v3 = uregion_getAvailable();
  if (v3)
  {
    uint64_t v4 = v3;
    type metadata accessor for ICU.Enumerator();
    uint64_t v5 = swift_initStackObject();
    *(void *)(v5 + 16) = v4;
    specialized Array.append<A>(contentsOf:)(v5);
  }

  uint64_t v6 = uregion_getAvailable();
  if (v6)
  {
    type metadata accessor for ICU.Enumerator();
    uint64_t v7 = swift_initStackObject();
    *(void *)(v7 + 16) = v6;
    specialized Array.append<A>(contentsOf:)(v7);
  }

  uint64_t v8 = uregion_getAvailable();
  if (v8)
  {
    type metadata accessor for ICU.Enumerator();
    uint64_t v9 = swift_initStackObject();
    *(void *)(v9 + 16) = v8;
    specialized Array.append<A>(contentsOf:)(v9);
  }

  return v11;
}

uint64_t static Locale.Collation.availableCollations.getter()
{
  uint64_t KeywordValues = ucol_getKeywordValues();
  uint64_t v1 = MEMORY[0x18961AFE8];
  if (KeywordValues)
  {
    uint64_t v2 = KeywordValues;
    type metadata accessor for ICU.Enumerator();
    *(void *)(swift_initStackObject() + 16) = v2;
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, 0LL, 0);
    while (uenum_next())
    {
      uint64_t v3 = String.init(cString:)();
      uint64_t v5 = v4;
      Swift::String v6 = String.lowercased()();
      unint64_t v8 = *(void *)(v1 + 16);
      unint64_t v7 = *(void *)(v1 + 24);
      if (v8 >= v7 >> 1) {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v7 > 1, v8 + 1, 1);
      }
      *(void *)(v1 + 16) = v8 + 1;
      uint64_t v9 = (Swift::String *)(v1 + 32 * v8);
      v9[2]._uint64_t countAndFlagsBits = v3;
      v9[2]._unint64_t object = v5;
      v9[3] = v6;
    }

    swift_release();
  }

  return v1;
}

uint64_t static Locale.Collation.availableCollations(for:)(uint64_t *a1)
{
  uint64_t v2 = *a1;
  uint64_t v1 = a1[1];
  uint64_t v3 = a1[2];
  uint64_t v4 = (void *)a1[3];
  uint64_t v5 = a1[4];
  uint64_t v6 = a1[5];
  uint64_t v8 = a1[6];
  unint64_t v7 = (void *)a1[7];
  uint64_t v9 = a1[8];
  uint64_t v10 = a1[9];
  uint64_t v12 = a1[10];
  uint64_t v11 = (void *)a1[11];
  uint64_t v29 = *a1;
  uint64_t v28 = v1;
  if (v1)
  {
    outlined copy of Locale.LanguageCode?(v2, v1);
    outlined copy of Locale.LanguageCode?(v5, v6);
    outlined copy of Locale.LanguageCode?(v9, v10);
    v13._uint64_t countAndFlagsBits = v3;
    v13._unint64_t object = v4;
    String.append(_:)(v13);
    if (!v6) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }

  outlined copy of Locale.LanguageCode?(v2, 0LL);
  outlined copy of Locale.LanguageCode?(v5, v6);
  outlined copy of Locale.LanguageCode?(v9, v10);
  if (v6)
  {
LABEL_3:
    v14._uint64_t countAndFlagsBits = 45LL;
    v14._unint64_t object = (void *)0xE100000000000000LL;
    String.append(_:)(v14);
    v15._uint64_t countAndFlagsBits = v8;
    v15._unint64_t object = v7;
    String.append(_:)(v15);
  }

uint64_t Locale.Currency.isISOCurrency.getter()
{
  return v1;
}

uint64_t closure #1 in Locale.Currency.isISOCurrency.getter@<X0>(BOOL *a1@<X8>)
{
  uint64_t result = ucurr_getNumericCode();
  *a1 = (_DWORD)result != 0;
  return result;
}

uint64_t one-time initialization function for unknown()
{
  Swift::String v1 = String.lowercased()();
  uint64_t result = v1._countAndFlagsBits;
  static Locale.Currency.unknown = 7895160LL;
  *(void *)algn_18C5C9E18 = 0xE300000000000000LL;
  xmmword_18C5C9E20 = (__int128)v1;
  return result;
}

{
  Swift::String v0;
  uint64_t result;
  String.init<A>(_:)();
  uint64_t v0 = String._capitalized()();
  uint64_t result = swift_bridgeObjectRelease();
  static Locale.Script.unknown = 2054847066LL;
  *(void *)algn_18C5D4078 = 0xE400000000000000LL;
  xmmword_18C5D4080 = (__int128)v0;
  return result;
}

{
  uint64_t result;
  Swift::String v1;
  Swift::String v1 = String.uppercased()();
  uint64_t result = v1._countAndFlagsBits;
  static Locale.Region.unknown = 23130LL;
  *(void *)algn_18C5D4098 = 0xE200000000000000LL;
  xmmword_18C5D40A0 = (__int128)v1;
  return result;
}

uint64_t static Locale.Currency.unknown.getter@<X0>(uint64_t a1@<X8>)
{
  if (one-time initialization token for unknown != -1) {
    swift_once();
  }
  uint64_t v2 = *(void *)algn_18C5C9E18;
  __int128 v3 = xmmword_18C5C9E20;
  *(void *)a1 = static Locale.Currency.unknown;
  *(void *)(a1 + 8) = v2;
  *(_OWORD *)(a1 + 16) = v3;
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRetain();
}

uint64_t static Locale.NumberingSystem.availableNumberingSystems.getter()
{
  uint64_t v0 = unumsys_openAvailableNames();
  uint64_t v1 = MEMORY[0x18961AFE8];
  if (v0)
  {
    uint64_t v2 = v0;
    type metadata accessor for ICU.Enumerator();
    *(void *)(swift_initStackObject() + 16) = v2;
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, 0LL, 0);
    while (uenum_next())
    {
      uint64_t v3 = String.init(cString:)();
      uint64_t v5 = v4;
      Swift::String v6 = String.lowercased()();
      unint64_t v8 = *(void *)(v1 + 16);
      unint64_t v7 = *(void *)(v1 + 24);
      if (v8 >= v7 >> 1) {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v7 > 1, v8 + 1, 1);
      }
      *(void *)(v1 + 16) = v8 + 1;
      uint64_t v9 = (Swift::String *)(v1 + 32 * v8);
      v9[2]._uint64_t countAndFlagsBits = v3;
      v9[2]._unint64_t object = v5;
      v9[3] = v6;
    }

    swift_release();
  }

  return v1;
}

uint64_t *static Locale.NumberingSystem.defaultNumberingSystem(for:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, Swift::String *a3@<X8>)
{
  uint64_t v33 = *MEMORY[0x1895F89C0];
  swift_bridgeObjectRetain();
  Locale.Components.init(identifier:)(a1, a2, v14);
  Swift::String v6 = String.lowercased()();
  outlined consume of Locale.LanguageCode?(v20, v21);
  __src[0] = v14[0];
  __src[1] = v14[1];
  __src[2] = v14[2];
  __src[3] = v14[3];
  __src[4] = v14[4];
  __src[5] = v14[5];
  LOBYTE(__src[6]) = v15;
  *(_OWORD *)((char *)&__src[6] + 8) = v16;
  *(_OWORD *)((char *)&__src[7] + 8) = v17;
  *(_OWORD *)((char *)&__src[8] + 8) = v18;
  *(_OWORD *)((char *)&__src[9] + 8) = v19;
  *(_OWORD *)((char *)&__src[10] + 8) = xmmword_183730190;
  *(Swift::String *)((char *)&__src[11] + 8) = v6;
  WORD4(__src[12]) = v22;
  __src[13] = v23;
  __src[14] = v24;
  __src[15] = v25;
  __src[16] = v26;
  __src[17] = v27;
  __src[18] = v28;
  __src[19] = v29;
  __src[20] = v30;
  __src[21] = v31;
  memcpy(__dst, __src, sizeof(__dst));
  Locale.Components.icuIdentifier.getter();
  String.utf8CString.getter();
  swift_bridgeObjectRelease();
  uint64_t v7 = unumsys_open();
  swift_release();
  if (MEMORY[0x186E21754](v7))
  {
    uint64_t v8 = String.init(cString:)();
    uint64_t v10 = v9;
    Swift::String v11 = String.lowercased()();
    a3->_uint64_t countAndFlagsBits = v8;
    a3->_unint64_t object = v10;
    a3[1] = v11;
  }

  else
  {
    *a3 = 0u;
    a3[1] = 0u;
  }

  unumsys_close();
  return outlined release of Locale.Components((uint64_t *)__src);
}

uint64_t Locale.NumberingSystem.init(localeIdentifier:)@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2 = unumsys_open();
  swift_release();
  if (!v2)
  {
    if (one-time initialization token for latn != -1) {
      swift_once();
    }
    uint64_t v4 = static Locale.NumberingSystem.latn;
    uint64_t v6 = qword_18C5D40F8;
    unint64_t object = (void *)*((void *)&xmmword_18C5D4100 + 1);
    uint64_t countAndFlagsBits = xmmword_18C5D4100;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    goto LABEL_7;
  }

  uint64_t result = MEMORY[0x186E21754](v2);
  if (result)
  {
    uint64_t v4 = String.init(cString:)();
    uint64_t v6 = v5;
    Swift::String v7 = String.lowercased()();
    uint64_t countAndFlagsBits = v7._countAndFlagsBits;
    unint64_t object = v7._object;
LABEL_7:
    uint64_t result = unumsys_close();
    *a1 = v4;
    a1[1] = v6;
    a1[2] = countAndFlagsBits;
    a1[3] = (uint64_t)object;
    return result;
  }

  __break(1u);
  return result;
}

uint64_t Locale.Language.lineLayoutDirection.getter()
{
  return Locale.Language.lineLayoutDirection.getter(MEMORY[0x1896159C8]);
}

uint64_t Locale.Language.characterDirection.getter()
{
  return Locale.Language.lineLayoutDirection.getter(MEMORY[0x189615958]);
}

uint64_t Locale.Language.lineLayoutDirection.getter(uint64_t (*a1)(uint64_t, int *))
{
  uint64_t v31 = *MEMORY[0x1895F89C0];
  uint64_t v2 = *v1;
  uint64_t v3 = v1[1];
  uint64_t v5 = v1[2];
  uint64_t v4 = (void *)v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = v1[5];
  uint64_t v9 = v1[6];
  uint64_t v8 = (void *)v1[7];
  uint64_t v11 = v1[8];
  uint64_t v10 = v1[9];
  uint64_t v12 = v1[10];
  Swift::String v13 = (void *)v1[11];
  int v30 = 0;
  uint64_t v27 = v6;
  uint64_t v28 = v2;
  uint64_t v26 = v3;
  if (v3)
  {
    uint64_t v14 = v5;
    char v15 = v4;
    outlined copy of Locale.LanguageCode?(v2, v3);
    outlined copy of Locale.LanguageCode?(v6, v7);
    outlined copy of Locale.LanguageCode?(v11, v10);
    v16._uint64_t countAndFlagsBits = v14;
    v16._unint64_t object = v15;
    String.append(_:)(v16);
    uint64_t v17 = v12;
    if (!v7) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }

  outlined copy of Locale.LanguageCode?(v2, 0LL);
  outlined copy of Locale.LanguageCode?(v6, v7);
  outlined copy of Locale.LanguageCode?(v11, v10);
  uint64_t v17 = v12;
  if (v7)
  {
LABEL_3:
    v18._uint64_t countAndFlagsBits = 45LL;
    v18._unint64_t object = (void *)0xE100000000000000LL;
    String.append(_:)(v18);
    v19._uint64_t countAndFlagsBits = v9;
    v19._unint64_t object = v8;
    String.append(_:)(v19);
  }

uint64_t Locale.Language.parent.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v37 = *MEMORY[0x1895F89C0];
  __int128 v3 = v1[3];
  v36[2] = v1[2];
  v36[3] = v3;
  __int128 v4 = v1[5];
  v36[4] = v1[4];
  v36[5] = v4;
  __int128 v5 = v1[1];
  v36[0] = *v1;
  v36[1] = v5;
  outlined retain of Locale.Language( (uint64_t *)v36,  (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))outlined copy of Locale.LanguageCode?);
  specialized _withFixedCharBuffer(size:_:)(257LL, (uint64_t *)v36);
  uint64_t v7 = v6;
  uint64_t result = (uint64_t)outlined retain of Locale.Language( (uint64_t *)v36,  (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))outlined consume of Locale.LanguageCode?);
  if (!v7)
  {
    *(_OWORD *)a1 = xmmword_183723F60;
    *(_OWORD *)(a1 + 16) = 0u;
    *(_OWORD *)(a1 + 32) = 0u;
    *(_OWORD *)(a1 + 48) = 0u;
    *(_OWORD *)(a1 + 64) = 0u;
    *(_OWORD *)(a1 + 80) = 0u;
    return result;
  }

  MEMORY[0x1895F8858](result);
  LODWORD(v34) = 0;
  String.utf8CString.getter();
  int Language = uloc_getLanguage();
  uint64_t v10 = swift_release();
  uint64_t v11 = 0LL;
  uint64_t v12 = 0LL;
  if (Language > 0)
  {
    v31[Language] = 0;
    uint64_t v10 = MEMORY[0x186E1B634](v31, 0LL);
    uint64_t v11 = v10;
  }

  uint64_t v33 = v12;
  MEMORY[0x1895F8858](v10);
  LODWORD(v34) = 0;
  String.utf8CString.getter();
  int Script = uloc_getScript();
  uint64_t v14 = swift_release();
  uint64_t v15 = 0LL;
  uint64_t v16 = 0LL;
  if ((int)v34 <= 0 && Script > 0)
  {
    v31[Script] = 0;
    uint64_t v14 = MEMORY[0x186E1B634](v31);
    uint64_t v15 = v14;
    uint64_t v16 = v17;
  }

  MEMORY[0x1895F8858](v14);
  LODWORD(v34) = 0;
  String.utf8CString.getter();
  int Country = uloc_getCountry();
  swift_release();
  uint64_t v19 = 0LL;
  uint64_t v20 = 0LL;
  if ((int)v34 <= 0 && Country > 0)
  {
    v31[Country] = 0;
    uint64_t v19 = MEMORY[0x186E1B634](v31);
    uint64_t v20 = v21;
  }

  swift_bridgeObjectRelease();
  uint64_t v22 = v33;
  if (v33)
  {
    Swift::String v23 = String.lowercased()();
    uint64_t countAndFlagsBits = v23._countAndFlagsBits;
    unint64_t object = v23._object;
    uint64_t v25 = v11;
    if (v16) {
      goto LABEL_13;
    }
LABEL_17:
    uint64_t v15 = 0LL;
    uint64_t v27 = 0LL;
    uint64_t v28 = 0LL;
    if (v20) {
      goto LABEL_14;
    }
LABEL_18:
    uint64_t v19 = 0LL;
    uint64_t result = 0LL;
    __int128 v29 = 0LL;
    goto LABEL_19;
  }

  uint64_t countAndFlagsBits = 0LL;
  unint64_t object = 0LL;
  uint64_t v25 = 0LL;
  if (!v16) {
    goto LABEL_17;
  }
LABEL_13:
  uint64_t v34 = v15;
  uint64_t v35 = v16;
  swift_bridgeObjectRetain_n();
  String.init<A>(_:)();
  Swift::String v26 = String._capitalized()();
  uint64_t v27 = v26._countAndFlagsBits;
  uint64_t v28 = v26._object;
  swift_bridgeObjectRelease();
  uint64_t v22 = v33;
  swift_bridgeObjectRelease();
  if (!v20) {
    goto LABEL_18;
  }
LABEL_14:
  Swift::String v30 = String.uppercased()();
  __int128 v29 = v30._object;
  uint64_t result = v30._countAndFlagsBits;
LABEL_19:
  *(void *)a1 = v25;
  *(void *)(a1 + 8) = v22;
  *(void *)(a1 + 16) = countAndFlagsBits;
  *(void *)(a1 + 24) = object;
  *(void *)(a1 + 32) = v15;
  *(void *)(a1 + 40) = v16;
  *(void *)(a1 + 48) = v27;
  *(void *)(a1 + 56) = v28;
  *(void *)(a1 + 64) = v19;
  *(void *)(a1 + 72) = v20;
  *(void *)(a1 + 80) = result;
  *(void *)(a1 + 88) = v29;
  return result;
}

uint64_t Locale.Language.hasCommonParent(with:)(_OWORD *a1)
{
  uint64_t v133 = *MEMORY[0x1895F89C0];
  __int128 v2 = a1[3];
  v131[2] = a1[2];
  v131[3] = v2;
  __int128 v3 = a1[5];
  v131[4] = a1[4];
  v131[5] = v3;
  __int128 v4 = a1[1];
  v131[0] = *a1;
  v131[1] = v4;
  __int128 v5 = v1[3];
  v132[2] = v1[2];
  v132[3] = v5;
  __int128 v6 = v1[5];
  v132[4] = v1[4];
  v132[5] = v6;
  __int128 v7 = v1[1];
  v132[0] = *v1;
  v132[1] = v7;
  outlined retain of Locale.Language( (uint64_t *)v132,  (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))outlined copy of Locale.LanguageCode?);
  uint64_t v8 = specialized _withFixedCharBuffer(size:_:)(257LL, (uint64_t *)v132);
  uint64_t v10 = v9;
  if (!v9)
  {
    outlined retain of Locale.Language( (uint64_t *)v132,  (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))outlined consume of Locale.LanguageCode?);
    uint64_t v104 = 0LL;
    uint64_t v105 = 0LL;
    uint64_t countAndFlagsBits = 0LL;
    uint64_t v102 = 0LL;
    uint64_t v26 = 0LL;
    uint64_t v27 = 0LL;
    uint64_t v99 = 0LL;
    Swift::String v100 = 0LL;
    uint64_t v21 = 0LL;
    uint64_t v22 = 0LL;
    uint64_t v23 = 1LL;
    goto LABEL_19;
  }

  MEMORY[0x1895F8858](v8);
  LODWORD(v107) = 0;
  String.utf8CString.getter();
  int Language = uloc_getLanguage();
  uint64_t v12 = swift_release();
  uint64_t v13 = 0LL;
  uint64_t v14 = 0LL;
  if (Language > 0)
  {
    v82[Language] = 0;
    uint64_t v12 = MEMORY[0x186E1B634](v82);
    uint64_t v13 = v12;
    uint64_t v14 = v15;
  }

  MEMORY[0x1895F8858](v12);
  LODWORD(v107) = 0;
  String.utf8CString.getter();
  int Script = uloc_getScript();
  swift_release();
  uint64_t v17 = 0LL;
  uint64_t v105 = v13;
  uint64_t v18 = 0LL;
  if ((int)v107 <= 0 && Script > 0)
  {
    v82[Script] = 0;
    uint64_t v17 = MEMORY[0x186E1B634](v82);
    uint64_t v18 = v19;
  }

  uint64_t v104 = v17;
  MEMORY[0x1895F8858](v17);
  LODWORD(v107) = 0;
  String.utf8CString.getter();
  int Country = uloc_getCountry();
  swift_release();
  uint64_t v21 = 0LL;
  uint64_t v22 = 0LL;
  if ((int)v107 > 0)
  {
    uint64_t v23 = v14;
  }

  else
  {
    uint64_t v23 = v14;
    if (Country > 0)
    {
      v82[Country] = 0;
      uint64_t v21 = MEMORY[0x186E1B634](v82);
      uint64_t v22 = v24;
    }
  }

  swift_bridgeObjectRelease();
  if (v23)
  {
    Swift::String v28 = String.lowercased()();
    uint64_t countAndFlagsBits = v28._countAndFlagsBits;
    unint64_t object = v28._object;
    uint64_t v26 = v18;
    if (v18) {
      goto LABEL_14;
    }
LABEL_17:
    uint64_t v104 = 0LL;
    uint64_t v27 = 0LL;
    Swift::String v100 = 0LL;
    uint64_t v102 = (uint64_t)object;
    if (v22) {
      goto LABEL_15;
    }
    goto LABEL_18;
  }

  uint64_t v105 = 0LL;
  uint64_t countAndFlagsBits = 0LL;
  unint64_t object = 0LL;
  uint64_t v26 = v18;
  if (!v18) {
    goto LABEL_17;
  }
LABEL_14:
  uint64_t v107 = v104;
  uint64_t v108 = v26;
  swift_bridgeObjectRetain_n();
  String.init<A>(_:)();
  Swift::String v30 = String._capitalized()();
  uint64_t v27 = v30._countAndFlagsBits;
  Swift::String v100 = v30._object;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v102 = (uint64_t)object;
  if (v22)
  {
LABEL_15:
    Swift::String v31 = String.uppercased()();
    uint64_t v10 = v31._countAndFlagsBits;
    uint64_t v99 = v31._object;
    outlined retain of Locale.Language( (uint64_t *)v132,  (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))outlined consume of Locale.LanguageCode?);
    goto LABEL_19;
  }

uint64_t Locale.Language.script.getter@<X0>(uint64_t *a1@<X8>)
{
  __int128 v3 = v1[3];
  __int128 v15 = v1[2];
  __int128 v16 = v3;
  __int128 v4 = v1[5];
  __int128 v17 = v1[4];
  __int128 v18 = v4;
  __int128 v5 = v1[1];
  v14[0] = *v1;
  v14[1] = v5;
  __int128 v6 = v15;
  uint64_t v8 = *((void *)&v15 + 1);
  uint64_t v7 = v15;
  unint64_t object = (void *)*((void *)&v16 + 1);
  uint64_t countAndFlagsBits = v16;
  if (!*((void *)&v15 + 1))
  {
    outlined retain of Locale.Language( (uint64_t *)v14,  (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))outlined copy of Locale.LanguageCode?);
    uint64_t v7 = specialized _withFixedCharBuffer(size:_:)(257LL, v14);
    uint64_t v8 = v11;
    outlined retain of Locale.Language( (uint64_t *)v14,  (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))outlined consume of Locale.LanguageCode?);
    if (v8)
    {
      swift_bridgeObjectRetain_n();
      String.init<A>(_:)();
      Swift::String v12 = String._capitalized()();
      uint64_t countAndFlagsBits = v12._countAndFlagsBits;
      unint64_t object = v12._object;
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
    }

    else
    {
      uint64_t v7 = 0LL;
      uint64_t countAndFlagsBits = 0LL;
      unint64_t object = 0LL;
    }
  }

  *a1 = v7;
  a1[1] = v8;
  a1[2] = countAndFlagsBits;
  a1[3] = (uint64_t)object;
  return outlined copy of Locale.LanguageCode?(v6, *((uint64_t *)&v6 + 1));
}

uint64_t Locale.Language.region.getter@<X0>(uint64_t *a1@<X8>)
{
  __int128 v3 = v1[5];
  __int128 v15 = v1[4];
  __int128 v16 = v3;
  __int128 v4 = v1[3];
  __int128 v14[2] = v1[2];
  v14[3] = v4;
  __int128 v5 = v1[1];
  v14[0] = *v1;
  v14[1] = v5;
  __int128 v6 = v15;
  uint64_t v8 = *((void *)&v15 + 1);
  uint64_t v7 = v15;
  unint64_t object = (void *)*((void *)&v16 + 1);
  uint64_t countAndFlagsBits = v16;
  if (!*((void *)&v15 + 1))
  {
    outlined retain of Locale.Language( (uint64_t *)v14,  (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))outlined copy of Locale.LanguageCode?);
    uint64_t v7 = specialized _withFixedCharBuffer(size:_:)(257LL, (uint64_t *)v14);
    uint64_t v8 = v11;
    outlined retain of Locale.Language( (uint64_t *)v14,  (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))outlined consume of Locale.LanguageCode?);
    if (v8)
    {
      Swift::String v12 = String.uppercased()();
      unint64_t object = v12._object;
      uint64_t countAndFlagsBits = v12._countAndFlagsBits;
    }

    else
    {
      uint64_t v7 = 0LL;
      uint64_t countAndFlagsBits = 0LL;
      unint64_t object = 0LL;
    }
  }

  *a1 = v7;
  a1[1] = v8;
  a1[2] = countAndFlagsBits;
  a1[3] = (uint64_t)object;
  return outlined copy of Locale.LanguageCode?(v6, *((uint64_t *)&v6 + 1));
}

uint64_t *Locale.Language.Components.init(language:)@<X0>(__int128 *a1@<X0>, uint64_t *a2@<X8>)
{
  __int128 v3 = a1[1];
  unsigned __int128 v42 = *a1;
  __int128 v43 = v3;
  __int128 v4 = a1[3];
  __int128 v44 = a1[2];
  __int128 v45 = v4;
  __int128 v5 = a1[5];
  __int128 v46 = a1[4];
  __int128 v47 = v5;
  unsigned __int128 v6 = v42;
  unsigned __int128 v7 = v43;
  uint64_t v8 = *((void *)&v44 + 1);
  uint64_t v34 = v45;
  uint64_t v35 = v44;
  uint64_t v9 = v46;
  uint64_t v33 = (void *)*((void *)&v45 + 1);
  uint64_t v10 = *((void *)&v46 + 1);
  uint64_t v40 = (void *)*((void *)&v5 + 1);
  uint64_t v41 = v5;
  outlined retain of Locale.Language( (uint64_t *)&v42,  (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))outlined copy of Locale.LanguageCode?);
  uint64_t v12 = v6 >> 64;
  uint64_t v11 = v6;
  uint64_t object = v7 >> 64;
  uint64_t countAndFlagsBits = v7;
  if (!*((void *)&v6 + 1))
  {
    outlined retain of Locale.Language( (uint64_t *)&v42,  (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))outlined copy of Locale.LanguageCode?);
    uint64_t v11 = specialized _withFixedCharBuffer(size:_:)(257LL, (uint64_t *)&v42);
    uint64_t v12 = v15;
    outlined retain of Locale.Language( (uint64_t *)&v42,  (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))outlined consume of Locale.LanguageCode?);
    if (v12)
    {
      Swift::String v16 = String.lowercased()();
      uint64_t object = (uint64_t)v16._object;
      uint64_t countAndFlagsBits = v16._countAndFlagsBits;
    }

    else
    {
      uint64_t v11 = 0LL;
      uint64_t countAndFlagsBits = 0LL;
      uint64_t object = 0LL;
    }
  }

  uint64_t v36 = object;
  uint64_t v37 = countAndFlagsBits;
  uint64_t v38 = v12;
  uint64_t v39 = v11;
  if (v8)
  {
    outlined copy of Locale.LanguageCode?(v6, *((uint64_t *)&v6 + 1));
    uint64_t v17 = v35;
    uint64_t v18 = v35;
    uint64_t v19 = v8;
    uint64_t v20 = v34;
    uint64_t v21 = v33;
  }

  else
  {
    outlined retain of Locale.Language( (uint64_t *)&v42,  (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))outlined copy of Locale.LanguageCode?);
    outlined copy of Locale.LanguageCode?(v6, *((uint64_t *)&v6 + 1));
    uint64_t v18 = specialized _withFixedCharBuffer(size:_:)(257LL, (__int128 *)&v42);
    uint64_t v19 = v22;
    outlined retain of Locale.Language( (uint64_t *)&v42,  (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))outlined consume of Locale.LanguageCode?);
    if (v19)
    {
      swift_bridgeObjectRetain_n();
      String.init<A>(_:)();
      Swift::String v23 = String._capitalized()();
      uint64_t v20 = v23._countAndFlagsBits;
      uint64_t v21 = v23._object;
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
    }

    else
    {
      uint64_t v18 = 0LL;
      uint64_t v20 = 0LL;
      uint64_t v21 = 0LL;
    }

    uint64_t v17 = v35;
  }

  outlined copy of Locale.LanguageCode?(v17, v8);
  outlined retain of Locale.Language( (uint64_t *)&v42,  (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))outlined consume of Locale.LanguageCode?);
  uint64_t v24 = v9;
  uint64_t v25 = v9;
  uint64_t v26 = v10;
  uint64_t v27 = v41;
  Swift::String v28 = v40;
  if (!v10)
  {
    uint64_t v32 = v24;
    outlined retain of Locale.Language( (uint64_t *)&v42,  (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))outlined copy of Locale.LanguageCode?);
    uint64_t v25 = specialized _withFixedCharBuffer(size:_:)(257LL, (uint64_t *)&v42);
    uint64_t v26 = v29;
    outlined retain of Locale.Language( (uint64_t *)&v42,  (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))outlined consume of Locale.LanguageCode?);
    if (v26)
    {
      Swift::String v30 = String.uppercased()();
      uint64_t v27 = v30._countAndFlagsBits;
      Swift::String v28 = v30._object;
    }

    else
    {
      uint64_t v25 = 0LL;
      uint64_t v27 = 0LL;
      Swift::String v28 = 0LL;
    }

    uint64_t v24 = v32;
  }

  outlined copy of Locale.LanguageCode?(v24, v10);
  uint64_t result = outlined retain of Locale.Language( (uint64_t *)&v42,  (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))outlined consume of Locale.LanguageCode?);
  *a2 = v39;
  a2[1] = v38;
  a2[2] = v37;
  a2[3] = v36;
  a2[4] = v18;
  a2[5] = v19;
  a2[6] = v20;
  a2[7] = (uint64_t)v21;
  a2[8] = v25;
  a2[9] = v26;
  a2[10] = v27;
  a2[11] = (uint64_t)v28;
  return result;
}

void *specialized static Locale.NumberingSystem.validNumberingSystems(for:)(uint64_t a1, uint64_t a2)
{
  uint64_t v144 = *MEMORY[0x1895F89C0];
  swift_bridgeObjectRetain();
  Locale.Components.init(identifier:)(a1, a2, &v117);
  uint64_t v4 = v130;
  uint64_t v5 = v131;
  uint64_t v6 = v132;
  uint64_t v7 = v133;
  if (v131)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v8 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  1LL,  1,  MEMORY[0x18961AFE8]);
    unint64_t v10 = v8[2];
    unint64_t v9 = v8[3];
    if (v10 >= v9 >> 1) {
      uint64_t v8 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (void *)(v9 > 1),  v10 + 1,  1,  v8);
    }
    v8[2] = v10 + 1;
    uint64_t v11 = &v8[4 * v10];
    v11[4] = v4;
    v11[5] = v5;
    v11[6] = v6;
    v11[7] = v7;
  }

  else
  {
    uint64_t v8 = (void *)MEMORY[0x18961AFE8];
  }

  uint64_t v12 = v118;
  uint64_t v13 = v119;
  uint64_t v89 = v117;
  uint64_t v90 = v120;
  Swift::String v49 = v8;
  uint64_t v88 = v118;
  if (!v118) {
    goto LABEL_18;
  }
  Swift::String v14 = String.lowercased()();
  if (v13 == v14._countAndFlagsBits && v90 == v14._object)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_18;
  }

  char v15 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v15 & 1) != 0) {
    goto LABEL_15;
  }
  Swift::String v16 = String.lowercased()();
  if (v13 == v16._countAndFlagsBits && v90 == v16._object) {
    goto LABEL_13;
  }
  char v17 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v17 & 1) != 0) {
    goto LABEL_15;
  }
  if (v89 == 7697783 && v12 == 0xE300000000000000LL)
  {
    uint64_t v18 = 7697783LL;
    uint64_t v19 = 0xE300000000000000LL;
    goto LABEL_17;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    uint64_t v18 = v89;
    goto LABEL_16;
  }

  Swift::String v38 = String.lowercased()();
  if (v13 == v38._countAndFlagsBits && v90 == v38._object)
  {
LABEL_13:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
LABEL_15:
    uint64_t v18 = v89;
LABEL_16:
    uint64_t v19 = v12;
LABEL_17:
    outlined consume of Locale.LanguageCode?(v18, v19);
    goto LABEL_18;
  }

  char v39 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined consume of Locale.LanguageCode?(v89, v12);
  if ((v39 & 1) == 0)
  {
    uint64_t v20 = (char *)&outlined read-only object #0 of static Locale.NumberingSystem.validNumberingSystems(for:);
    uint64_t v21 = 4LL;
    goto LABEL_19;
  }

uint64_t *outlined retain of Locale.Language( uint64_t *a1, void (*a2)(uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v4 = a1[4];
  uint64_t v5 = a1[5];
  uint64_t v6 = a1[6];
  uint64_t v7 = a1[7];
  uint64_t v8 = a1[8];
  uint64_t v9 = a1[9];
  uint64_t v10 = a1[10];
  uint64_t v11 = a1[11];
  a2(*a1, a1[1], a1[2], a1[3]);
  a2(v4, v5, v6, v7);
  a2(v8, v9, v10, v11);
  return a1;
}

unint64_t lazy protocol witness table accessor for type Unicode.UTF16 and conformance Unicode.UTF16()
{
  unint64_t result = lazy protocol witness table cache variable for type Unicode.UTF16 and conformance Unicode.UTF16;
  if (!lazy protocol witness table cache variable for type Unicode.UTF16 and conformance Unicode.UTF16)
  {
    unint64_t result = MEMORY[0x186E20D4C](MEMORY[0x18961AC00], MEMORY[0x18961ABF8]);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Unicode.UTF16 and conformance Unicode.UTF16);
  }

  return result;
}

uint64_t specialized static Locale.Currency.isoCurrencies.getter()
{
  uint64_t v0 = ucurr_openISOCurrencies();
  uint64_t v1 = MEMORY[0x18961AFE8];
  if (v0)
  {
    uint64_t v2 = v0;
    type metadata accessor for ICU.Enumerator();
    *(void *)(swift_initStackObject() + 16) = v2;
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, 0LL, 0);
    while (uenum_next())
    {
      uint64_t v3 = String.init(cString:)();
      uint64_t v5 = v4;
      Swift::String v6 = String.lowercased()();
      unint64_t v8 = *(void *)(v1 + 16);
      unint64_t v7 = *(void *)(v1 + 24);
      if (v8 >= v7 >> 1) {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v7 > 1, v8 + 1, 1);
      }
      *(void *)(v1 + 16) = v8 + 1;
      uint64_t v9 = (Swift::String *)(v1 + 32 * v8);
      v9[2]._uint64_t countAndFlagsBits = v3;
      v9[2]._uint64_t object = v5;
      v9[3] = v6;
    }

    swift_release();
  }

  return v1;
}

uint64_t specialized static Locale.Currency.commonISOCurrencies.getter()
{
  uint64_t v0 = ucurr_openISOCurrencies();
  uint64_t v1 = MEMORY[0x18961AFE8];
  if (v0)
  {
    uint64_t v2 = v0;
    type metadata accessor for ICU.Enumerator();
    *(void *)(swift_initStackObject() + 16) = v2;
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, 0LL, 0);
    while (uenum_next())
    {
      uint64_t v3 = String.init(cString:)();
      uint64_t v5 = v4;
      unint64_t v7 = *(void *)(v1 + 16);
      unint64_t v6 = *(void *)(v1 + 24);
      if (v7 >= v6 >> 1) {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v6 > 1, v7 + 1, 1);
      }
      *(void *)(v1 + 16) = v7 + 1;
      uint64_t v8 = v1 + 16 * v7;
      *(void *)(v8 + 32) = v3;
      *(void *)(v8 + 40) = v5;
    }

    swift_release();
  }

  return v1;
}

uint64_t outlined release of (Locale.Language?, Locale.Language?)(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 112);
  uint64_t v12 = *(void *)(a1 + 104);
  uint64_t v13 = *(void *)(a1 + 96);
  uint64_t v3 = *(void *)(a1 + 120);
  uint64_t v4 = *(void *)(a1 + 128);
  uint64_t v5 = *(void *)(a1 + 136);
  uint64_t v6 = *(void *)(a1 + 144);
  uint64_t v7 = *(void *)(a1 + 152);
  __int128 v11 = *(_OWORD *)(a1 + 160);
  uint64_t v9 = *(void *)(a1 + 176);
  uint64_t v8 = *(void *)(a1 + 184);
  outlined consume of Locale.Language?( *(void *)a1,  *(void *)(a1 + 8),  *(void *)(a1 + 16),  *(void *)(a1 + 24),  *(void *)(a1 + 32),  *(void *)(a1 + 40),  *(void *)(a1 + 48),  *(void *)(a1 + 56),  *(void *)(a1 + 64),  *(void *)(a1 + 72),  *(void *)(a1 + 80),  *(void *)(a1 + 88),  (void (*)(void))outlined consume of Locale.LanguageCode?);
  outlined consume of Locale.Language?( v13,  v12,  v2,  v3,  v4,  v5,  v6,  v7,  v11,  *((uint64_t *)&v11 + 1),  v9,  v8,  (void (*)(void))outlined consume of Locale.LanguageCode?);
  return a1;
}

uint64_t outlined consume of Locale.Language?( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void (*a13)(void))
{
  if (a2 != 1)
  {
    a13();
    ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))a13)(a5, a6, a7, a8);
    return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))a13)(a9, a10, a11, a12);
  }

  return result;
}

BOOL specialized static Strideable.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  return a2 == a1;
}

unint64_t specialized _parseHexIntegerDigits<A>(_:isNegative:)( unsigned __int8 *a1, uint64_t a2, int a3)
{
  if (a2)
  {
    if (a2 < 1) {
      return 0LL;
    }
    unint64_t v3 = 0LL;
    uint64_t v4 = &a1[a2];
    while (1)
    {
      int v5 = *a1;
      unsigned __int8 v6 = v5 - 48;
      if ((v5 - 48) >= 0xA)
      {
        if ((v5 - 65) < 6)
        {
          unsigned __int8 v6 = v5 - 55;
        }

        else
        {
          unsigned __int8 v6 = v5 - 87;
        }
      }

      uint64_t v7 = v6;
      BOOL v8 = 16 * v3 >= v6;
      uint64_t v9 = 16 * v3 - v6;
      BOOL v10 = !v8;
      if (v3 >> 60 || (a3 & v10 & 1) != 0) {
        break;
      }
      unint64_t v3 = 16 * v3 + v7;
      if ((a3 & 1) != 0) {
        unint64_t v3 = v9;
      }
      if (++a1 >= v4) {
        return v3;
      }
    }
  }

  return 0LL;
}

{
  unsigned int v3;
  unsigned __int8 *v4;
  int v5;
  unsigned __int8 v6;
  unsigned int v7;
  int v8;
  int v9;
  BOOL v10;
  unsigned __int8 v11;
  if (a2)
  {
    if (a2 < 1)
    {
      uint64_t v7 = 0;
      __int128 v11 = 0;
    }

    else
    {
      unint64_t v3 = 0;
      uint64_t v4 = &a1[a2];
      while (1)
      {
        int v5 = *a1;
        unsigned __int8 v6 = v5 - 48;
        if ((v5 - 48) >= 0xA)
        {
          if ((v5 - 65) < 6)
          {
            unsigned __int8 v6 = v5 - 55;
          }

          else
          {
            unsigned __int8 v6 = v5 - 87;
          }
        }

        uint64_t v7 = 0;
        BOOL v8 = v6;
        uint64_t v9 = 16 * v3 - v6;
        BOOL v10 = 16 * v3 < v6;
        __int128 v11 = 1;
        if (v3 >> 28 || (a3 & v10 & 1) != 0) {
          break;
        }
        unint64_t v3 = 16 * v3 + v8;
        if ((a3 & 1) != 0) {
          unint64_t v3 = v9;
        }
        if (++a1 >= v4)
        {
          __int128 v11 = 0;
          uint64_t v7 = v3;
          return v7 | ((unint64_t)v11 << 32);
        }
      }
    }
  }

  else
  {
LABEL_16:
    uint64_t v7 = 0;
    __int128 v11 = 1;
  }

  return v7 | ((unint64_t)v11 << 32);
}

uint64_t specialized _parseHexIntegerDigits<A>(_:isNegative:)(unsigned __int8 *a1, uint64_t a2, char a3)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 1) {
    return 0LL;
  }
  uint64_t result = 0LL;
  int v5 = &a1[a2];
  do
  {
    int v6 = *a1;
    unsigned __int8 v7 = v6 - 48;
    if ((v6 - 48) >= 0xA)
    {
      if ((v6 - 65) < 6)
      {
        unsigned __int8 v7 = v6 - 55;
      }

      else
      {
        unsigned __int8 v7 = v6 - 87;
      }
    }

    uint64_t v8 = 16 * result;
    uint64_t v9 = 16 * result + v7;
    BOOL v10 = __OFADD__(16 * result, v7);
    BOOL v11 = __OFSUB__(v8, v7);
    uint64_t v12 = v8 - v7;
    char v13 = v11;
    if ((a3 & 1) == 0) {
      char v13 = v10;
    }
    unint64_t v14 = (unint64_t)(result - 0x800000000000000LL) >> 60;
    uint64_t result = 0LL;
    if (v14 < 0xF || (v13 & 1) != 0) {
      break;
    }
    uint64_t result = (a3 & 1) != 0 ? v12 : v9;
    ++a1;
  }

  while (a1 < v5);
  return result;
}

{
  int v3;
  unsigned __int8 *v4;
  int v5;
  int v6;
  int v7;
  int v8;
  BOOL v9;
  unsigned __int8 v10;
  unsigned int v11;
  int v12;
  if (!a2)
  {
    BOOL v10 = 0;
    uint64_t v12 = 1;
    return v10 | (v12 << 8);
  }

  if (a2 >= 1)
  {
    unint64_t v3 = 0;
    uint64_t v4 = &a1[a2];
    while (1)
    {
      int v5 = *a1;
      int v6 = v5 - 48;
      int v6 = v5 - 55;
      unsigned __int8 v7 = 16 * v3;
      if ((a3 & 1) != 0)
      {
LABEL_9:
        uint64_t v8 = v7 - v6;
        uint64_t v9 = (v8 & 0xFFFFFF00) != 0;
        goto LABEL_12;
      }

{
  int v3;
  unsigned __int8 *v4;
  int v5;
  unsigned __int8 v6;
  int v7;
  BOOL v8;
  unsigned __int16 v9;
  unsigned int v10;
  int v11;
  if (!a2)
  {
    uint64_t v9 = 0;
    BOOL v11 = 1;
    return v9 | (v11 << 16);
  }

  if (a2 >= 1)
  {
    unint64_t v3 = 0;
    uint64_t v4 = &a1[a2];
    while (1)
    {
      int v5 = *a1;
      int v6 = v5 - 48;
      if ((v5 - 48) >= 0xA)
      {
        if ((v5 - 65) < 6)
        {
          int v6 = v5 - 55;
        }

        else
        {
          if ((v5 - 97) > 5)
          {
            uint64_t v9 = 0;
            BOOL v11 = 1;
            return v9 | (v11 << 16);
          }

          int v6 = v5 - 87;
        }
      }

      if ((a3 & 1) != 0)
      {
        unsigned __int8 v7 = (unsigned __int16)(16 * v3) - v6;
        uint64_t v8 = (v7 & 0xFFFF0000) != 0;
      }

      else
      {
        uint64_t v8 = 0;
        unsigned __int8 v7 = 16 * v3 + v6;
      }

      uint64_t v9 = 0;
      BOOL v10 = (unsigned __int16)v3;
      BOOL v11 = 1;
      if (v10 > 0xFFF || v8) {
        return v9 | (v11 << 16);
      }
      ++a1;
      unint64_t v3 = v7;
      if (a1 >= v4)
      {
        BOOL v11 = 0;
        uint64_t v9 = v7;
        return v9 | (v11 << 16);
      }
    }
  }

  uint64_t v9 = 0;
  BOOL v11 = 0;
  return v9 | (v11 << 16);
}

{
  char v3;
  unsigned __int8 *v4;
  int v5;
  char v6;
  int v7;
  int v8;
  unsigned __int8 v9;
  unsigned int v10;
  int v11;
  if (!a2)
  {
    uint64_t v9 = 0;
    BOOL v11 = 1;
    return v9 | (v11 << 8);
  }

  if (a2 >= 1)
  {
    unint64_t v3 = 0;
    uint64_t v4 = &a1[a2];
    while (1)
    {
      int v5 = *a1;
      int v6 = v5 - 48;
      if ((v5 - 48) >= 0xA)
      {
        if ((v5 - 65) < 6)
        {
          int v6 = v5 - 55;
        }

        else
        {
          if ((v5 - 97) > 5)
          {
            uint64_t v9 = 0;
            BOOL v11 = 1;
            return v9 | (v11 << 8);
          }

          int v6 = v5 - 87;
        }
      }

      unsigned __int8 v7 = (char)(16 * v3);
      if ((a3 & 1) != 0) {
        uint64_t v8 = v7 - v6;
      }
      else {
        uint64_t v8 = v7 + v6;
      }
      uint64_t v9 = 0;
      BOOL v10 = (v3 - 8);
      BOOL v11 = 1;
      ++a1;
      unint64_t v3 = v8;
      if (a1 >= v4)
      {
        BOOL v11 = 0;
        uint64_t v9 = v8;
        return v9 | (v11 << 8);
      }
    }
  }

  uint64_t v9 = 0;
  BOOL v11 = 0;
  return v9 | (v11 << 8);
}

{
  __int16 v3;
  unsigned __int8 *v4;
  int v5;
  unsigned __int8 v6;
  int v7;
  __int16 v8;
  int v9;
  unsigned __int16 v10;
  unsigned int v11;
  int v12;
  if (!a2)
  {
    BOOL v10 = 0;
    uint64_t v12 = 1;
    return v10 | (v12 << 16);
  }

  if (a2 >= 1)
  {
    unint64_t v3 = 0;
    uint64_t v4 = &a1[a2];
    while (1)
    {
      int v5 = *a1;
      int v6 = v5 - 48;
      if ((v5 - 48) >= 0xA)
      {
        if ((v5 - 65) < 6)
        {
          int v6 = v5 - 55;
        }

        else
        {
          if ((v5 - 97) > 5)
          {
            BOOL v10 = 0;
            uint64_t v12 = 1;
            return v10 | (v12 << 16);
          }

          int v6 = v5 - 87;
        }
      }

      unsigned __int8 v7 = v6;
      uint64_t v8 = 16 * v3;
      if ((a3 & 1) != 0) {
        uint64_t v9 = v8 - v7;
      }
      else {
        uint64_t v9 = v7 + v8;
      }
      BOOL v10 = 0;
      BOOL v11 = (unsigned __int16)(v3 - 2048);
      uint64_t v12 = 1;
      ++a1;
      unint64_t v3 = v9;
      if (a1 >= v4)
      {
        uint64_t v12 = 0;
        BOOL v10 = v9;
        return v10 | (v12 << 16);
      }
    }
  }

  BOOL v10 = 0;
  uint64_t v12 = 0;
  return v10 | (v12 << 16);
}

{
  uint64_t v3;
  unint64_t v4;
  unsigned __int8 *v5;
  int v6;
  unsigned __int8 v7;
  uint64_t v8;
  unint64_t v9;
  __int128 v10;
  unint64_t v11;
  BOOL v12;
  char v13;
  uint64_t v14;
  if (!a2) {
    return 0LL;
  }
  if (a2 >= 1)
  {
    unint64_t v3 = 0LL;
    uint64_t v4 = 0LL;
    int v5 = &a1[a2];
    while (1)
    {
      int v6 = *a1;
      unsigned __int8 v7 = v6 - 48;
      if ((v6 - 48) >= 0xA)
      {
        if ((v6 - 65) < 6)
        {
          unsigned __int8 v7 = v6 - 55;
        }

        else
        {
          unsigned __int8 v7 = v6 - 87;
        }
      }

      uint64_t v8 = 16 * v3;
      *((void *)&v10 + 1) = v4;
      *(void *)&BOOL v10 = v3;
      uint64_t v9 = v10 >> 60;
      if ((v4 & 0x8000000000000000LL) == 0) {
        break;
      }
      if (__PAIR128__(v4, v3) < __PAIR128__(0xF000000000000000LL, 1LL)) {
        goto LABEL_14;
      }
      LOBYTE(v11) = v8 != 0;
      if ((a3 & 1) != 0)
      {
LABEL_15:
        uint64_t v4 = (__PAIR128__(v9, v8) - v7) >> 64;
        unint64_t v3 = v8 - v7;
        uint64_t v12 = __OFSUB__(__PAIR128__(v9, v8), v7);
        goto LABEL_16;
      }

unint64_t specialized _parseHexIntegerDigits<A>(_:isNegative:)( unsigned __int8 *a1, uint64_t a2, char a3)
{
  if (a2)
  {
    if (a2 < 1)
    {
      unsigned int v3 = 0;
LABEL_25:
      unsigned __int8 v15 = 0;
    }

    else
    {
      unsigned int v3 = 0;
      uint64_t v4 = &a1[a2];
      while (1)
      {
        int v5 = *a1;
        unsigned __int8 v6 = v5 - 48;
        if ((v5 - 48) >= 0xA)
        {
          if ((v5 - 65) < 6)
          {
            unsigned __int8 v6 = v5 - 55;
          }

          else
          {
            unsigned __int8 v6 = v5 - 87;
          }
        }

        int v7 = v6;
        int v8 = 16 * v3;
        unsigned int v9 = v3 - 0x8000000;
        int v10 = v8 + v6;
        BOOL v11 = __OFADD__(v8, v7);
        BOOL v12 = __OFSUB__(v8, v7);
        unsigned int v13 = v8 - v7;
        char v14 = v12;
        if ((a3 & 1) != 0) {
          BOOL v11 = v14;
        }
        unsigned __int8 v15 = 1;
        unsigned int v16 = v9 >> 28;
        unsigned int v3 = 0;
        if (v16 < 0xF || v11) {
          break;
        }
        if ((a3 & 1) != 0) {
          unsigned int v3 = v13;
        }
        else {
          unsigned int v3 = v10;
        }
        if (++a1 >= v4) {
          goto LABEL_25;
        }
      }
    }
  }

  else
  {
LABEL_26:
    unsigned int v3 = 0;
    unsigned __int8 v15 = 1;
  }

  return v3 | ((unint64_t)v15 << 32);
}

uint64_t specialized _parseHexIntegerDigits<A>(_:isNegative:)(unsigned __int8 *a1, uint64_t a2, int a3)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 >= 1)
  {
    uint64_t result = 0LL;
    unint64_t v6 = 0LL;
    int v7 = &a1[a2];
    while (1)
    {
      int v8 = *a1;
      unsigned __int8 v9 = v8 - 48;
      if ((v8 - 48) >= 0xA)
      {
        if ((v8 - 65) < 6)
        {
          unsigned __int8 v9 = v8 - 55;
        }

        else
        {
          unsigned __int8 v9 = v8 - 87;
        }
      }

      *((void *)&v11 + 1) = v6;
      *(void *)&__int128 v11 = result;
      uint64_t v10 = v11 >> 60;
      uint64_t v12 = 16 * result;
      unsigned __int128 v13 = v11 * 16 - v9;
      BOOL v14 = v11 * 16 < (unsigned __int128)v9;
      uint64_t result = 0LL;
      if (!(v6 >> 60) && (a3 & v14 & 1) == 0)
      {
        uint64_t v15 = v12 + v9;
        uint64_t v16 = __CFADD__(v12, v9) ? v10 + 1 : v10;
        uint64_t result = (a3 & 1) != 0 ? v13 : v15;
        unint64_t v6 = (a3 & 1) != 0 ? *((void *)&v13 + 1) : v16;
        if (++a1 < v7) {
          continue;
        }
      }

      return result;
    }
  }

  return 0LL;
}

uint64_t specialized BufferViewIterator.next()()
{
  uint64_t v1 = (unsigned __int8 *)*v0;
  unint64_t v2 = v0[1];
  if (*v0 < v2)
  {
    int v3 = *v1;
    *uint64_t v0 = (unint64_t)(v1 + 1);
  }

  else
  {
    int v3 = 0;
  }

  return v3 | (((unint64_t)v1 >= v2) << 8);
}

void *JSON5Scanner.JSONPartialMapData.resizeIfNecessary(with:)(void *result, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = (void *)*v3;
  uint64_t v5 = *(void *)(*v3 + 16LL);
  if (v5) {
    BOOL v6 = (*(void *)(*v3 + 16LL) & 0x7FFLL) == 0;
  }
  else {
    BOOL v6 = 0;
  }
  if (!v6) {
    return result;
  }
  double v7 = (double)a2 / (double)(a3 - (uint64_t)result) * (double)v5;
  if ((~*(void *)&v7 & 0x7FF0000000000000LL) == 0)
  {
    __break(1u);
    goto LABEL_20;
  }

  if (v7 <= -9.22337204e18)
  {
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }

  if (v7 >= 9.22337204e18)
  {
LABEL_21:
    __break(1u);
    return result;
  }

  uint64_t v8 = (uint64_t)v7;
  uint64_t v9 = v3[1];
  if (!v9 || (double)v8 / (double)v9 > 1.25)
  {
    uint64_t result = (void *)swift_isUniquelyReferenced_nonNull_native();
    if (!(_DWORD)result || v8 > v4[3] >> 1)
    {
      if (v5 <= v8) {
        int64_t v10 = v8;
      }
      else {
        int64_t v10 = v5;
      }
      uint64_t result = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( result,  v10,  0,  v4);
      uint64_t v4 = result;
    }

    *int v3 = v4;
    v3[1] = v8;
  }

  return result;
}

int64_t JSON5Scanner.JSONPartialMapData.recordStartCollection(tagType:with:)( unsigned __int8 a1, void *a2, uint64_t a3, uint64_t a4)
{
  BOOL v6 = *v4;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    BOOL v6 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  v6[2] + 1LL,  1,  v6);
  }
  unint64_t v8 = v6[2];
  unint64_t v7 = v6[3];
  int64_t v9 = v8 + 1;
  if (v8 >= v7 >> 1) {
    BOOL v6 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (void *)(v7 > 1),  v8 + 1,  1,  v6);
  }
  v6[2] = v9;
  v6[v8 + 4] = a1;
  int64_t v10 = v8 + 3;
  if (__OFADD__(v8, 3LL))
  {
    __break(1u);
  }

  else
  {
    unint64_t v11 = v6[3];
    unint64_t v12 = v11 >> 1;
    if ((uint64_t)(v11 >> 1) >= v10)
    {
      unint64_t v13 = v8 + 1;
      goto LABEL_8;
    }
  }

  if (v9 <= v10) {
    int64_t v18 = v8 + 3;
  }
  else {
    int64_t v18 = v8 + 1;
  }
  BOOL v6 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (void *)1,  v18,  1,  v6);
  unint64_t v13 = v6[2];
  unint64_t v11 = v6[3];
  unint64_t v12 = v11 >> 1;
LABEL_8:
  unint64_t v14 = v13 + 1;
  if (v12 <= v13) {
    BOOL v6 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (void *)(v11 > 1),  v13 + 1,  1,  v6);
  }
  v6[2] = v14;
  v6[v13 + 4] = 0LL;
  unint64_t v15 = v6[3];
  int64_t v16 = v13 + 2;
  if (v16 > (uint64_t)(v15 >> 1)) {
    BOOL v6 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (void *)(v15 > 1),  v16,  1,  v6);
  }
  v6[2] = v16;
  v6[v14 + 4] = 0LL;
  *uint64_t v4 = v6;
  return v9;
}

void *JSON5Scanner.JSONPartialMapData.recordEmptyCollection(tagType:with:)( unsigned __int8 a1, void *a2, uint64_t a3, uint64_t a4)
{
  unint64_t v8 = *(void **)v4;
  int64_t v9 = *(void *)(*(void *)v4 + 16LL);
  int64_t v10 = v9 + 4;
  if (__OFADD__(v9, 4LL))
  {
    __break(1u);
LABEL_17:
    uint64_t result = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (void *)(v7 > 1),  v9,  1,  v8);
    unint64_t v8 = result;
    unint64_t v7 = result[3];
    unint64_t v12 = v7 >> 1;
    goto LABEL_9;
  }

  uint64_t result = (void *)swift_isUniquelyReferenced_nonNull_native();
  if (!(_DWORD)result || (v7 = v8[3], unint64_t v12 = v7 >> 1, (uint64_t)(v7 >> 1) < v10))
  {
    if (v9 <= v10) {
      int64_t v13 = v9 + 4;
    }
    else {
      int64_t v13 = v9;
    }
    uint64_t result = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( result,  v13,  1,  v8);
    unint64_t v8 = result;
    unint64_t v7 = result[3];
    unint64_t v12 = v7 >> 1;
  }

  unint64_t v5 = v8[2];
  int64_t v9 = v5 + 1;
  if (v12 <= v5) {
    goto LABEL_17;
  }
LABEL_9:
  v8[2] = v9;
  v8[v5 + 4] = a1;
  if ((uint64_t)v12 < (uint64_t)(v5 + 2))
  {
    uint64_t result = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (void *)(v7 > 1),  v5 + 2,  1,  v8);
    unint64_t v8 = result;
  }

  v8[2] = v5 + 2;
  v8[v9 + 4] = v10;
  unint64_t v15 = v8[2];
  unint64_t v14 = v8[3];
  int64_t v16 = v14 >> 1;
  unint64_t v17 = v15 + 1;
  if (v14 >> 1 <= v15)
  {
    uint64_t result = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (void *)(v14 > 1),  v15 + 1,  1,  v8);
    unint64_t v8 = result;
    unint64_t v14 = result[3];
    int64_t v16 = v14 >> 1;
  }

  v8[2] = v17;
  v8[v15 + 4] = 0LL;
  int64_t v18 = v15 + 2;
  if (v16 < v18)
  {
    uint64_t result = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (void *)(v14 > 1),  v18,  1,  v8);
    unint64_t v8 = result;
  }

  v8[2] = v18;
  v8[v17 + 4] = 7LL;
  *(void *)uint64_t v4 = v8;
  return result;
}

void *JSON5Scanner.JSONPartialMapData.record(tagType:count:dataOffset:with:)( unsigned __int8 a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6)
{
  unint64_t v11 = *(void **)v6;
  int64_t v12 = *(void *)(*(void *)v6 + 16LL);
  int64_t v13 = v12 + 3;
  if (__OFADD__(v12, 3LL))
  {
    __break(1u);
LABEL_15:
    uint64_t result = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (void *)(v10 > 1),  v12,  1,  v11);
    unint64_t v11 = result;
    unint64_t v10 = result[3];
    unint64_t v15 = v10 >> 1;
    goto LABEL_9;
  }

  uint64_t result = (void *)swift_isUniquelyReferenced_nonNull_native();
  if (!(_DWORD)result || (unint64_t v10 = v11[3], v15 = v10 >> 1, (uint64_t)(v10 >> 1) < v13))
  {
    if (v12 <= v13) {
      int64_t v16 = v12 + 3;
    }
    else {
      int64_t v16 = v12;
    }
    uint64_t result = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( result,  v16,  1,  v11);
    unint64_t v11 = result;
    unint64_t v10 = result[3];
    unint64_t v15 = v10 >> 1;
  }

  int64_t v13 = v11[2];
  int64_t v12 = v13 + 1;
  if (v15 <= v13) {
    goto LABEL_15;
  }
LABEL_9:
  void v11[2] = v12;
  v11[v13 + 4] = a1;
  if ((uint64_t)v15 < v13 + 2)
  {
    uint64_t result = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (void *)(v10 > 1),  v13 + 2,  1,  v11);
    unint64_t v11 = result;
  }

  void v11[2] = v13 + 2;
  v11[v12 + 4] = a2;
  unint64_t v18 = v11[2];
  unint64_t v17 = v11[3];
  if (v18 >= v17 >> 1)
  {
    uint64_t result = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (void *)(v17 > 1),  v18 + 1,  1,  v11);
    unint64_t v11 = result;
  }

  void v11[2] = v18 + 1;
  v11[v18 + 4] = a3;
  *(void *)uint64_t v6 = v11;
  return result;
}

void *JSON5Scanner.scan()()
{
  uint64_t v1 = v0;
  if (*(_BYTE *)v0 == 1)
  {
    int v3 = (unsigned __int8 *)v0[3];
    unint64_t v2 = v0[4];
    while (1)
    {
      unsigned int v4 = *v3;
      if (v4 < 0x40 && ((1LL << v4) & 0x100003E00LL) != 0) {
        goto LABEL_10;
      }
      if (v4 != 47) {
        break;
      }
      int v6 = v3[1];
      if (v6 == 42)
      {
        unint64_t v10 = v3 + 3;
        if ((unint64_t)(v3 + 3) >= v2)
        {
LABEL_35:
          lazy protocol witness table accessor for type JSONError and conformance JSONError();
          swift_allocError();
          *(void *)uint64_t v15 = 3LL;
          *(_OWORD *)(v15 + 8) = 0u;
          *(_OWORD *)(v15 + 24) = 0u;
          *(void *)(v15 + 40) = 0LL;
          char v16 = 12;
LABEL_44:
          *(_BYTE *)(v15 + 48) = v16;
          swift_willThrow();
          return v1;
        }

        unint64_t v11 = v3 + 2;
        while (2)
        {
          int v13 = *v10;
          if (*v11 == 42)
          {
            if (v13 == 42) {
              goto LABEL_32;
            }
            if (v13 == 47)
            {
              int v3 = v11 + 2;
              goto LABEL_11;
            }
          }

          else if (v13 == 42)
          {
LABEL_32:
            uint64_t v12 = 1LL;
LABEL_29:
            v11 += v12;
            unint64_t v10 = v11 + 1;
            continue;
          }

          break;
        }

        uint64_t v12 = 2LL;
        goto LABEL_29;
      }

      if (v6 != 47)
      {
LABEL_36:
        v0[3] = v3;
        goto LABEL_39;
      }

      if ((unint64_t)(v3 + 2) < v2)
      {
        unint64_t v7 = v2 - 2 - (void)v3;
        v3 += 3;
        while (1)
        {
          int v8 = *(v3 - 1);
          if (v8 == 13 || v8 == 10) {
            break;
          }
          ++v3;
          if (!--v7) {
            goto LABEL_39;
          }
        }

Swift::UInt8_optional __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> JSON5Scanner.DocumentReader.consumeWhitespace(allowingEOF:)( Swift::Bool allowingEOF)
{
  int v3 = *(unsigned __int8 **)(v1 + 16);
  unint64_t v2 = *(void *)(v1 + 24);
  if ((unint64_t)v3 < v2)
  {
    while (1)
    {
      unsigned int v4 = *v3;
      if (v4 <= 0x3F && ((1LL << v4) & 0x100003E00LL) != 0) {
        goto LABEL_9;
      }
      if (v4 != 47)
      {
        if (v4 == 160)
        {
LABEL_9:
          ++v3;
          goto LABEL_10;
        }

        goto LABEL_39;
      }

      int v6 = v3[1];
      if (v6 == 42) {
        break;
      }
      if (v6 != 47)
      {
LABEL_38:
        LOWORD(v4) = 47;
LABEL_39:
        *(void *)(v1 + 16) = v3;
        return (Swift::UInt8_optional)v4;
      }

      if ((unint64_t)(v3 + 2) < v2)
      {
        unint64_t v7 = v2 - 2 - (void)v3;
        v3 += 3;
        while (1)
        {
          int v8 = *(v3 - 1);
          if (v8 == 13 || v8 == 10) {
            break;
          }
          ++v3;
          if (!--v7) {
            goto LABEL_33;
          }
        }

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> JSON5Scanner.scanObject()()
{
  uint64_t v1 = (unsigned __int8 *)v0[3];
  if ((unsigned __int8 *)v0[4] == v1)
  {
    __break(1u);
    goto LABEL_7;
  }

  int v2 = *v1;
  v0[3] = v1 + 1;
  if (v2 != 123)
  {
LABEL_7:
    __break(1u);
    return;
  }

  if ((uint64_t)v0[5] > 511)
  {
    unint64_t v3 = specialized static JSONError.SourceLocation.sourceLocation(at:fullSource:)((unint64_t)v1, v0[1], v0[2]);
    uint64_t v5 = v4;
    uint64_t v7 = v6;
    lazy protocol witness table accessor for type JSONError and conformance JSONError();
    swift_allocError();
    *(void *)uint64_t v8 = v3;
    *(void *)(v8 + 8) = v5;
    *(void *)(v8 + 16) = v7;
    *(void *)(v8 + 24) = 0LL;
    *(void *)(v8 + 32) = 0LL;
    *(void *)(v8 + 40) = 0LL;
    *(_BYTE *)(v8 + 48) = 2;
    swift_willThrow();
  }

  else
  {
    JSON5Scanner.scanObject(withoutBraces:)(0);
  }

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> JSON5Scanner.scanObject(withoutBraces:)( Swift::Bool withoutBraces)
{
  int v2 = v1;
  unint64_t v4 = v1[4];
  ++v1[5];
  unint64_t v5 = v1[3];
  if (v5 >= v4)
  {
LABEL_34:
    if (withoutBraces)
    {
LABEL_35:
      JSON5Scanner.JSONPartialMapData.recordEmptyCollection(tagType:with:)(5u, (void *)v1[1], v1[2], v5);
      goto LABEL_40;
    }

    lazy protocol witness table accessor for type JSONError and conformance JSONError();
    swift_allocError();
    uint64_t v18 = 1LL;
    goto LABEL_38;
  }

  uint64_t v6 = (unsigned __int8 *)v1[3];
  while (1)
  {
    unsigned int v7 = *v6;
    if (v7 < 0x40 && ((1LL << v7) & 0x100003E00LL) != 0) {
      goto LABEL_10;
    }
    if (v7 != 47) {
      break;
    }
    int v9 = v6[1];
    if (v9 == 42)
    {
      int v13 = v6 + 3;
      if ((unint64_t)(v6 + 3) < v4)
      {
        uint64_t v14 = v6 + 2;
        do
        {
          int v16 = *v13;
          if (*v14 == 42)
          {
            if (v16 == 42) {
              goto LABEL_32;
            }
            if (v16 == 47)
            {
              uint64_t v6 = v14 + 2;
              goto LABEL_11;
            }
          }

          else if (v16 == 42)
          {
LABEL_32:
            uint64_t v15 = 1LL;
            goto LABEL_29;
          }

          uint64_t v15 = 2LL;
LABEL_29:
          v14 += v15;
          int v13 = v14 + 1;
        }

        while ((unint64_t)(v14 + 1) < v4);
      }

      lazy protocol witness table accessor for type JSONError and conformance JSONError();
      swift_allocError();
      uint64_t v18 = 3LL;
LABEL_38:
      *(void *)uint64_t v17 = v18;
      *(void *)(v17 + 40) = 0LL;
      *(_OWORD *)(v17 + 24) = 0u;
      *(_OWORD *)(v17 + 8) = 0u;
      *(_BYTE *)(v17 + 48) = 12;
LABEL_39:
      swift_willThrow();
      goto LABEL_40;
    }

    if (v9 != 47)
    {
LABEL_42:
      v1[3] = v6;
      goto LABEL_46;
    }

    if ((unint64_t)(v6 + 2) < v4)
    {
      unint64_t v10 = v4 - 2 - (void)v6;
      v6 += 3;
      while (1)
      {
        int v11 = *(v6 - 1);
        if (v11 == 13 || v11 == 10) {
          break;
        }
        ++v6;
        if (!--v10) {
          goto LABEL_34;
        }
      }

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> JSON5Scanner.scanValue()()
{
  int v2 = (unsigned __int8 *)v0[3];
  unint64_t v1 = v0[4];
  if ((unint64_t)v2 >= v1)
  {
LABEL_33:
    lazy protocol witness table accessor for type JSONError and conformance JSONError();
    swift_allocError();
    uint64_t v14 = 1LL;
    goto LABEL_35;
  }

  while (1)
  {
    uint64_t v3 = *v2;
    if ((_DWORD)v3 != 47) {
      break;
    }
    int v5 = v2[1];
    if (v5 == 42)
    {
      int v9 = v2 + 3;
      if ((unint64_t)(v2 + 3) < v1)
      {
        unint64_t v10 = v2 + 2;
        do
        {
          int v12 = *v9;
          if (*v10 == 42)
          {
            if (v12 == 42) {
              goto LABEL_31;
            }
            if (v12 == 47)
            {
              int v2 = v10 + 2;
              goto LABEL_10;
            }
          }

          else if (v12 == 42)
          {
LABEL_31:
            uint64_t v11 = 1LL;
            goto LABEL_28;
          }

          uint64_t v11 = 2LL;
LABEL_28:
          v10 += v11;
          int v9 = v10 + 1;
        }

        while ((unint64_t)(v10 + 1) < v1);
      }

      lazy protocol witness table accessor for type JSONError and conformance JSONError();
      swift_allocError();
      uint64_t v14 = 3LL;
LABEL_35:
      *(void *)uint64_t v13 = v14;
      *(void *)(v13 + 40) = 0LL;
      *(_OWORD *)(v13 + 24) = 0u;
      *(_OWORD *)(v13 + 8) = 0u;
      char v15 = 12;
LABEL_36:
      *(_BYTE *)(v13 + 48) = v15;
      swift_willThrow();
      return;
    }

    if (v5 != 47)
    {
LABEL_38:
      v0[3] = v2;
LABEL_39:
      unint64_t v16 = specialized static JSONError.SourceLocation.sourceLocation(at:fullSource:)( (unint64_t)v2,  v0[1],  v0[2]);
      uint64_t v18 = v17;
      uint64_t v20 = v19;
      lazy protocol witness table accessor for type JSONError and conformance JSONError();
      swift_allocError();
      *(void *)uint64_t v13 = 0LL;
      *(void *)(v13 + 8) = 0LL;
      *(void *)(v13 + 16) = v3;
      *(void *)(v13 + 24) = v16;
      *(void *)(v13 + 32) = v18;
      *(void *)(v13 + 40) = v20;
      char v15 = 1;
      goto LABEL_36;
    }

    if ((unint64_t)(v2 + 2) < v1)
    {
      unint64_t v6 = v1 - 2 - (void)v2;
      v2 += 3;
      while (1)
      {
        int v7 = *(v2 - 1);
        if (v7 == 13 || v7 == 10) {
          break;
        }
        ++v2;
        if (!--v6) {
          goto LABEL_33;
        }
      }

Swift::UInt8 __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> JSON5Scanner.DocumentReader.consumeWhitespace()()
{
  int v2 = *(unsigned __int8 **)(v0 + 16);
  unint64_t v1 = *(void *)(v0 + 24);
  if ((unint64_t)v2 >= v1)
  {
LABEL_33:
    lazy protocol witness table accessor for type JSONError and conformance JSONError();
    swift_allocError();
    uint64_t v14 = 1LL;
    goto LABEL_35;
  }

  while (1)
  {
    unsigned int v3 = *v2;
    if (v3 <= 0x3F && ((1LL << v3) & 0x100003E00LL) != 0) {
      goto LABEL_9;
    }
    if (v3 != 47) {
      break;
    }
    int v5 = v2[1];
    if (v5 == 42)
    {
      int v9 = v2 + 3;
      if ((unint64_t)(v2 + 3) < v1)
      {
        unint64_t v10 = v2 + 2;
        do
        {
          int v12 = *v9;
          if (*v10 == 42)
          {
            if (v12 == 42) {
              goto LABEL_31;
            }
            if (v12 == 47)
            {
              int v2 = v10 + 2;
              goto LABEL_10;
            }
          }

          else if (v12 == 42)
          {
LABEL_31:
            uint64_t v11 = 1LL;
            goto LABEL_28;
          }

          uint64_t v11 = 2LL;
LABEL_28:
          v10 += v11;
          int v9 = v10 + 1;
        }

        while ((unint64_t)(v10 + 1) < v1);
      }

      lazy protocol witness table accessor for type JSONError and conformance JSONError();
      swift_allocError();
      uint64_t v14 = 3LL;
LABEL_35:
      *(void *)uint64_t v13 = v14;
      *(void *)(v13 + 40) = 0LL;
      *(_OWORD *)(v13 + 24) = 0u;
      *(_OWORD *)(v13 + 8) = 0u;
      *(_BYTE *)(v13 + 48) = 12;
      swift_willThrow();
      LOBYTE(__swift_mutable_project_boxed_opaque_existential_1((uint64_t)v2, v3) = 0;
      return v3;
    }

    if (v5 != 47)
    {
LABEL_36:
      *(void *)(v0 + 16) = v2;
      LOBYTE(__swift_mutable_project_boxed_opaque_existential_1((uint64_t)v2, v3) = 47;
      return v3;
    }

    if ((unint64_t)(v2 + 2) < v1)
    {
      unint64_t v6 = v1 - 2 - (void)v2;
      v2 += 3;
      while (1)
      {
        int v7 = *(v2 - 1);
        if (v7 == 13 || v7 == 10) {
          break;
        }
        ++v2;
        if (!--v6) {
          goto LABEL_33;
        }
      }

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> JSON5Scanner.scanString(withQuote:)( Swift::UInt8_optional withQuote)
{
  char v12 = 0;
  unint64_t v4 = JSON5Scanner.DocumentReader.skipUTF8StringTillNextUnescapedQuote(isSimple:quote:)( &v12,  *(_WORD *)&withQuote & 0x1FF);
  if (v2) {
    return;
  }
  int v5 = (unsigned __int8 *)v1[3];
  if ((*(_WORD *)&withQuote & 0x100) == 0)
  {
    if ((unsigned __int8 *)v1[4] == v5)
    {
      __break(1u);
    }

    else
    {
      uint64_t v6 = (uint64_t)(v5 + 1);
      int v7 = *v5;
      v1[3] = v5 + 1;
      if (v7 == withQuote.value) {
        goto LABEL_6;
      }
    }

    __break(1u);
    return;
  }

  uint64_t v6 = v1[3];
LABEL_6:
  uint64_t v8 = v5 - v4;
  int v9 = (unsigned __int8 *)v1[1];
  uint64_t v10 = v4 - v9;
  if (v12) {
    unsigned __int8 v11 = 8;
  }
  else {
    unsigned __int8 v11 = 0;
  }
  JSON5Scanner.JSONPartialMapData.record(tagType:count:dataOffset:with:)(v11, v8, v10, v9, v1[2], v6);
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> JSON5Scanner.scanArray()()
{
  unsigned int v3 = (unsigned __int8 *)v1[3];
  unint64_t v4 = v1[4];
  if ((unsigned __int8 *)v4 == v3)
  {
    __break(1u);
  }

  else
  {
    uint64_t v0 = v1;
    int v5 = v3 + 1;
    int v6 = *v3;
    v1[3] = v3 + 1;
    if (v6 == 91)
    {
      uint64_t v7 = v1[5];
      if (v7 > 511)
      {
        unint64_t v18 = specialized static JSONError.SourceLocation.sourceLocation(at:fullSource:)( (unint64_t)v3,  v1[1],  v1[2]);
        uint64_t v20 = v19;
        uint64_t v22 = v21;
        lazy protocol witness table accessor for type JSONError and conformance JSONError();
        swift_allocError();
        *(void *)uint64_t v23 = v18;
        *(void *)(v23 + 8) = v20;
        *(void *)(v23 + 16) = v22;
        *(void *)(v23 + 24) = 0LL;
        *(void *)(v23 + 32) = 0LL;
        *(void *)(v23 + 40) = 0LL;
        *(_BYTE *)(v23 + 48) = 2;
        swift_willThrow();
        return;
      }

      v1[5] = v7 + 1;
      if ((unint64_t)v5 >= v4)
      {
LABEL_37:
        lazy protocol witness table accessor for type JSONError and conformance JSONError();
        swift_allocError();
        uint64_t v25 = 1LL;
      }

      else
      {
        while (1)
        {
          unsigned int v8 = *v5;
          if (v8 < 0x40 && ((1LL << v8) & 0x100003E00LL) != 0) {
            goto LABEL_12;
          }
          if (v8 != 47)
          {
            if (v8 == 160)
            {
LABEL_12:
              ++v5;
              goto LABEL_13;
            }

            v1[3] = v5;
            if (v8 != 93)
            {
              if (v8 <= 0x20)
              {
                uint64_t v34 = 1LL << v8;
                if (((1LL << v8) & 0x100002600LL) != 0)
                {
                  __break(1u);
LABEL_65:
                  if ((_DWORD)v34 == 93)
                  {
LABEL_70:
                    uint64_t v44 = v0[2];
                    uint64_t v45 = v0[3] + 1LL;
                    v0[3] = v45;
                    unint64_t v43 = (void *)v0[1];
                  }

                  else
                  {
                    if (v34 <= 0x20 && ((1LL << v34) & 0x100002600LL) != 0)
                    {
                      __break(1u);
LABEL_87:
                      __break(1u);
                      JUMPOUT(0x18304A568LL);
                    }

                    unint64_t v37 = specialized static JSONError.SourceLocation.sourceLocation(at:fullSource:)( v0[3],  v0[1],  v0[2]);
                    uint64_t v39 = v38;
                    uint64_t v41 = v40;
                    lazy protocol witness table accessor for type JSONError and conformance JSONError();
                    swift_allocError();
                    *(_OWORD *)uint64_t v42 = xmmword_1837301A0;
                    *(void *)(v42 + 16) = v1;
                    *(void *)(v42 + 24) = v37;
                    *(void *)(v42 + 32) = v39;
                    *(void *)(v42 + 40) = v41;
                    *(_BYTE *)(v42 + 48) = 1;
                    swift_willThrow();
LABEL_69:
                    unint64_t v43 = (void *)v0[1];
                    uint64_t v44 = v0[2];
                    uint64_t v45 = v0[3];
                  }

                  JSON5Scanner.JSONPartialMapData.resizeIfNecessary(with:)(v43, v44, v45);
                  __int128 v46 = (void *)v0[6];
                  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
                    __int128 v46 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  v46[2] + 1LL,  1,  v46);
                  }
                  unint64_t v48 = v46[2];
                  unint64_t v47 = v46[3];
                  unint64_t v49 = v48 + 1;
                  if (v48 >= v47 >> 1) {
                    __int128 v46 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (void *)(v47 > 1),  v48 + 1,  1,  v46);
                  }
                  v46[2] = v49;
                  v46[v48 + 4] = 7LL;
                  uint64_t v50 = &v46[v62 + 4];
                  *uint64_t v50 = v49;
                  v50[1] = v2 + 1;
                  goto LABEL_85;
                }
              }

              goto LABEL_42;
            }

            uint64_t v51 = (uint64_t)(v5 + 1);
            v1[3] = v51;
            JSON5Scanner.JSONPartialMapData.recordEmptyCollection(tagType:with:)(6u, (void *)v1[1], v1[2], v51);
LABEL_40:
            --v1[5];
            return;
          }

          int v10 = v5[1];
          if (v10 == 42) {
            break;
          }
          if (v10 != 47)
          {
LABEL_41:
            v1[3] = v5;
LABEL_42:
            int64_t v62 = JSON5Scanner.JSONPartialMapData.recordStartCollection(tagType:with:)( 6u,  (void *)v1[1],  v1[2],  (uint64_t)v5);
            unint64_t v26 = 0LL;
            while (2)
            {
              unint64_t v2 = v26;
              Swift::UInt8 v27 = JSON5Scanner.DocumentReader.consumeWhitespace()();
              if (!v28)
              {
                LOBYTE(v1) = v27;
                switch(v27)
                {
                  case '""':
                    Swift::UInt8_optional v30 = (Swift::UInt8_optional)34;
                    goto LABEL_51;
                  case '\'':
                    Swift::UInt8_optional v30 = (Swift::UInt8_optional)39;
LABEL_51:
                    JSON5Scanner.scanString(withQuote:)(v30);
                    goto LABEL_55;
                  case '+':
                  case '-':
                    goto LABEL_49;
                  case '[':
                    JSON5Scanner.scanArray()();
                    goto LABEL_55;
                  case 'f':
                  case 't':
                    JSON5Scanner.scanBool()();
                    goto LABEL_55;
                  case 'n':
                    JSON5Scanner.scanNull()();
                    goto LABEL_55;
                  case '{':
                    JSON5Scanner.scanObject()();
LABEL_55:
                    if (!v29) {
                      goto LABEL_56;
                    }
                    goto LABEL_80;
                  default:
                    if ((v27 - 58) <= 0xF5u)
                    {
                      switch(v27)
                      {
                        case 9u:
                        case 0xAu:
                        case 0xDu:
                        case 0x20u:
                          goto LABEL_87;
                        case 0x2Eu:
                        case 0x49u:
                        case 0x4Eu:
                          break;
                        default:
                          goto LABEL_79;
                      }
                    }

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> JSON5Scanner.scanNull()()
{
  unint64_t v2 = (_BYTE *)v0[3];
  unint64_t v3 = v0[4];
  if (v3 < (unint64_t)v2)
  {
    __break(1u);
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }

  if ((uint64_t)(v3 - (void)v2) <= 3)
  {
    lazy protocol witness table accessor for type JSONError and conformance JSONError();
    swift_allocError();
    *(void *)uint64_t v4 = 1LL;
    *(_OWORD *)(v4 + 8) = 0u;
    *(_OWORD *)(v4 + 24) = 0u;
    *(void *)(v4 + 40) = 0LL;
    char v5 = 12;
LABEL_22:
    *(_BYTE *)(v4 + 48) = v5;
    swift_willThrow();
    return;
  }

  unint64_t v1 = v0;
  if (*(_DWORD *)v2 != 1819047278)
  {
    if ((((v0[1] + v0[2] - v3) | (unint64_t)&v2[-v0[1]]) & 0x8000000000000000LL) == 0)
    {
      if (*v2 == 110)
      {
        if (v2[1] == 117)
        {
          if (v2[2] == 108)
          {
            if (v2[3] == 108) {
              uint64_t v6 = 0LL;
            }
            else {
              uint64_t v6 = 3LL;
            }
          }

          else
          {
            uint64_t v6 = 2LL;
          }
        }

        else
        {
          uint64_t v6 = 1LL;
        }
      }

      else
      {
        uint64_t v6 = 0LL;
      }

      _StringGuts.grow(_:)(20LL);
      swift_bridgeObjectRelease();
      uint64_t v12 = 0LL;
      uint64_t v13 = (unsigned __int8 *)(v0[3] + v6);
      unint64_t v14 = specialized static JSONError.SourceLocation.sourceLocation(at:fullSource:)( (unint64_t)v13,  v0[1],  v0[2]);
      uint64_t v16 = v15;
      uint64_t v18 = v17;
      lazy protocol witness table accessor for type JSONError and conformance JSONError();
      swift_allocError();
      *(void *)uint64_t v4 = 0xD000000000000016LL;
      *(void *)(v4 + 8) = 0x80000001839CB590LL;
      *(void *)(v4 + 16) = v12;
      *(void *)(v4 + 24) = v14;
      *(void *)(v4 + 32) = v16;
      *(void *)(v4 + 40) = v18;
      char v5 = 1;
      goto LABEL_22;
    }

    goto LABEL_24;
  }

  v0[3] = v2 + 4;
  uint64_t v7 = (void *)v0[1];
  uint64_t v8 = v0[2];
  v0 += 6;
  JSON5Scanner.JSONPartialMapData.resizeIfNecessary(with:)(v7, v8, (uint64_t)(v2 + 4));
  unint64_t v1 = (void *)v1[6];
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
LABEL_25:
  }
    unint64_t v1 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  v1[2] + 1LL,  1,  v1);
  unint64_t v10 = v1[2];
  unint64_t v9 = v1[3];
  unint64_t v11 = v10 + 1;
  if (v10 >= v9 >> 1)
  {
    uint64_t v19 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (void *)(v9 > 1),  v10 + 1,  1,  v1);
    unint64_t v11 = v10 + 1;
    unint64_t v1 = v19;
  }

  v1[2] = v11;
  v1[v10 + 4] = 2LL;
  *uint64_t v0 = v1;
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> JSON5Scanner.scanBool()()
{
  unint64_t v1 = (unsigned __int8 *)v0[3];
  unint64_t v2 = (unsigned __int8 *)v0[4];
  if (v2 != v1)
  {
    unint64_t v3 = v0;
    uint64_t v4 = v1 + 1;
    int v5 = *v1;
    v0[3] = v1 + 1;
    if (v5 == 116)
    {
      if (v2 >= v4)
      {
        if (v2 - v4 > 2)
        {
          if (*(_WORD *)v4 == 30066 && v1[3] == 101)
          {
            v0[3] = v1 + 4;
            unint64_t v10 = (void *)v0[1];
            uint64_t v11 = v0[2];
            v0 += 6;
            JSON5Scanner.JSONPartialMapData.resizeIfNecessary(with:)(v10, v11, (uint64_t)(v1 + 4));
            unint64_t v3 = (void *)v3[6];
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
            {
LABEL_27:
              unint64_t v13 = v3[2];
              unint64_t v12 = v3[3];
              unint64_t v14 = v13 + 1;
              if (v13 >= v12 >> 1)
              {
                uint64_t v29 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (void *)(v12 > 1),  v13 + 1,  1,  v3);
                unint64_t v14 = v13 + 1;
                unint64_t v3 = v29;
              }

              _OWORD v3[2] = v14;
              uint64_t v15 = &v3[v13];
              uint64_t v16 = 3LL;
LABEL_35:
              v15[4] = v16;
              *uint64_t v0 = v3;
              return;
            }

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> JSON5Scanner._scanObjectLoop(withoutBraces:count:done:)( Swift::Bool withoutBraces, Swift::Int *count, Swift::Bool *done)
{
  uint64_t v4 = v3;
  JSON5Scanner.scanKey()();
  if (v8) {
    return;
  }
  char v9 = (unsigned __int8 *)v3[3];
  unint64_t v10 = v3[4];
  if ((unint64_t)v9 >= v10)
  {
LABEL_34:
    lazy protocol witness table accessor for type JSONError and conformance JSONError();
    swift_allocError();
    uint64_t v22 = 1LL;
    goto LABEL_36;
  }

  while (1)
  {
    uint64_t v11 = *v9;
    if ((_DWORD)v11 != 47) {
      break;
    }
    int v13 = v9[1];
    if (v13 == 42)
    {
      uint64_t v17 = v9 + 3;
      if ((unint64_t)(v9 + 3) < v10)
      {
        uint64_t v18 = v9 + 2;
        do
        {
          int v20 = *v17;
          if (*v18 == 42)
          {
            if (v20 == 42) {
              goto LABEL_32;
            }
            if (v20 == 47)
            {
              char v9 = v18 + 2;
              goto LABEL_11;
            }
          }

          else if (v20 == 42)
          {
LABEL_32:
            uint64_t v19 = 1LL;
            goto LABEL_29;
          }

          uint64_t v19 = 2LL;
LABEL_29:
          v18 += v19;
          uint64_t v17 = v18 + 1;
        }

        while ((unint64_t)(v18 + 1) < v10);
      }

      lazy protocol witness table accessor for type JSONError and conformance JSONError();
      swift_allocError();
      uint64_t v22 = 3LL;
LABEL_36:
      *(void *)uint64_t v21 = v22;
      *(void *)(v21 + 40) = 0LL;
      *(_OWORD *)(v21 + 24) = 0u;
      *(_OWORD *)(v21 + 8) = 0u;
      char v23 = 12;
LABEL_37:
      *(_BYTE *)(v21 + 48) = v23;
      swift_willThrow();
      return;
    }

    if (v13 != 47)
    {
LABEL_39:
      v3[3] = v9;
LABEL_51:
      unint64_t v30 = specialized static JSONError.SourceLocation.sourceLocation(at:fullSource:)( (unint64_t)v9,  v3[1],  v3[2]);
      uint64_t v32 = v35;
      uint64_t v34 = v36;
      lazy protocol witness table accessor for type JSONError and conformance JSONError();
      swift_allocError();
      *(_OWORD *)uint64_t v21 = xmmword_1837301B0;
      *(void *)(v21 + 16) = v11;
      goto LABEL_52;
    }

    if ((unint64_t)(v9 + 2) < v10)
    {
      unint64_t v14 = v10 - 2 - (void)v9;
      v9 += 3;
      while (1)
      {
        int v15 = *(v9 - 1);
        if (v15 == 13 || v15 == 10) {
          break;
        }
        ++v9;
        if (!--v14) {
          goto LABEL_34;
        }
      }

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> JSON5Scanner.scanKey()()
{
  unint64_t v2 = v0;
  uint64_t v3 = type metadata accessor for Unicode.GeneralCategory();
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x1895F8858](v3);
  uint64_t v6 = (char *)&v37 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = type metadata accessor for Unicode.Scalar.Properties();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x1895F8858](v7);
  unint64_t v10 = (char *)&v37 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  unint64_t v12 = (unsigned __int8 *)v2[3];
  unint64_t v11 = v2[4];
  if ((unint64_t)v12 >= v11)
  {
LABEL_31:
    lazy protocol witness table accessor for type JSONError and conformance JSONError();
    swift_allocError();
    *(void *)uint64_t v35 = 1LL;
    *(_OWORD *)(v35 + 8) = 0u;
    *(_OWORD *)(v35 + 24) = 0u;
    *(void *)(v35 + 40) = 0LL;
    char v36 = 12;
LABEL_32:
    *(_BYTE *)(v35 + 48) = v36;
    swift_willThrow();
  }

  else
  {
    uint64_t v38 = v3;
    switch(*v12)
    {
      case '""':
        Swift::UInt8_optional v20 = (Swift::UInt8_optional)34;
        goto LABEL_35;
      case '$':
      case 'A':
      case 'B':
      case 'C':
      case 'D':
      case 'E':
      case 'F':
      case '\\':
      case '_':
      case 'a':
      case 'b':
      case 'c':
      case 'd':
      case 'e':
      case 'f':
        int v13 = specialized JSON5Scanner.DocumentReader.skipUTF8StringTillEndOfUnquotedKey(orEscapeSequence:)();
        if (v1) {
          return;
        }
        if (v13 == 92)
        {
          specialized JSON5Scanner.DocumentReader.skipUTF8StringTillEndOfUnquotedKey(orEscapeSequence:)();
          unsigned __int8 v14 = 0;
        }

        else
        {
          unsigned __int8 v14 = 8;
        }

        uint64_t v15 = v2[2];
        uint64_t v16 = v2[3];
        uint64_t v17 = v16 - (void)v12;
        uint64_t v18 = (unsigned __int8 *)v2[1];
        uint64_t v19 = v12 - v18;
        goto LABEL_8;
      case '\'':
        Swift::UInt8_optional v20 = (Swift::UInt8_optional)39;
LABEL_35:
        JSON5Scanner.scanString(withQuote:)(v20);
        return;
      default:
        uint64_t v37 = *v12;
        JSON5Scanner.DocumentReader.peekU32()(v2[1], v2[2], v12, v11);
        if (v1) {
          return;
        }
        if ((v21 & 1) != 0) {
          goto LABEL_31;
        }
        Unicode.Scalar.properties.getter();
        Unicode.Scalar.Properties.generalCategory.getter();
        (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
        uint64_t v22 = v38;
        int v23 = (*(uint64_t (**)(char *, uint64_t))(v4 + 88))(v6, v38);
        if (v23 != *MEMORY[0x18961AAA8]
          && v23 != *MEMORY[0x18961AA90]
          && v23 != *MEMORY[0x18961AAA0]
          && v23 != *MEMORY[0x18961AA68]
          && v23 != *MEMORY[0x18961AA20]
          && v23 != *MEMORY[0x18961AA40])
        {
          (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v22);
          unint64_t v30 = specialized static JSONError.SourceLocation.sourceLocation(at:fullSource:)(v2[3], v2[1], v2[2]);
          uint64_t v32 = v31;
          uint64_t v34 = v33;
          lazy protocol witness table accessor for type JSONError and conformance JSONError();
          swift_allocError();
          *(void *)uint64_t v35 = 0xD000000000000022LL;
          *(void *)(v35 + 8) = 0x80000001839CB530LL;
          *(void *)(v35 + 16) = v37;
          *(void *)(v35 + 24) = v30;
          *(void *)(v35 + 32) = v32;
          *(void *)(v35 + 40) = v34;
          char v36 = 1;
          goto LABEL_32;
        }

        uint64_t v29 = v2[3];
        if (specialized JSON5Scanner.DocumentReader.skipUTF8StringTillEndOfUnquotedKey(orEscapeSequence:)() == 92)
        {
          specialized JSON5Scanner.DocumentReader.skipUTF8StringTillEndOfUnquotedKey(orEscapeSequence:)();
          unsigned __int8 v14 = 0;
        }

        else
        {
          unsigned __int8 v14 = 8;
        }

        uint64_t v15 = v2[2];
        uint64_t v16 = v2[3];
        uint64_t v17 = v16 - v29;
        uint64_t v18 = (unsigned __int8 *)v2[1];
        uint64_t v19 = v29 - (void)v18;
LABEL_8:
        JSON5Scanner.JSONPartialMapData.record(tagType:count:dataOffset:with:)(v14, v17, v19, v18, v15, v16);
        break;
    }
  }

unint64_t JSON5Scanner.DocumentReader.peekU32()( unint64_t a1, uint64_t a2, unsigned __int8 *a3, unint64_t a4)
{
  if ((unint64_t)a3 >= a4)
  {
    LODWORD(result) = 0;
    return result;
  }

  if (*a3 != 92)
  {
    unint64_t result = BufferView<A>._decodeScalar()(a3, a4 - (void)a3);
    if ((result & 0x100000000LL) == 0) {
      return result;
    }
    unint64_t v23 = specialized static JSONError.SourceLocation.sourceLocation(at:fullSource:)((unint64_t)a3, a1, a2);
    uint64_t v25 = v24;
    uint64_t v27 = v26;
    lazy protocol witness table accessor for type JSONError and conformance JSONError();
    swift_allocError();
    *(void *)uint64_t v28 = v23;
    *(void *)(v28 + 8) = v25;
    *(void *)(v28 + 16) = v27;
    *(void *)(v28 + 24) = 0LL;
    *(void *)(v28 + 32) = 0LL;
    *(void *)(v28 + 40) = 0LL;
    *(_BYTE *)(v28 + 48) = 0;
    return swift_willThrow();
  }

  unint64_t result = (unint64_t)(a3 + 1);
  uint64_t v8 = *(unsigned __int8 *)result;
  if ((_DWORD)v8 != 120)
  {
    if ((_DWORD)v8 != 117)
    {
      unint64_t v29 = specialized static JSONError.SourceLocation.sourceLocation(at:fullSource:)(result, a1, a2);
      uint64_t v31 = v30;
      uint64_t v33 = v32;
      lazy protocol witness table accessor for type JSONError and conformance JSONError();
      swift_allocError();
      *(void *)uint64_t v21 = 0LL;
      *(void *)(v21 + 8) = 0LL;
      *(void *)(v21 + 16) = v8;
      *(void *)(v21 + 24) = v29;
      *(void *)(v21 + 32) = v31;
      *(void *)(v21 + 40) = v33;
      char v22 = 1;
      goto LABEL_46;
    }

    if ((uint64_t)(a4 - (void)a3) > 5)
    {
      unint64_t v9 = (unint64_t)(a3 + 2);
      uint64_t v10 = a1 + a2 - (void)(a3 + 2);
      if ((((unint64_t)&a3[-a1 + 2] | v10) & 0x8000000000000000LL) != 0)
      {
        __break(1u);
      }

      else
      {
        if (v10 >= 4) {
          uint64_t v11 = 4LL;
        }
        else {
          uint64_t v11 = a1 + a2 - (void)(a3 + 2);
        }
        if (v10 >= 4)
        {
          unsigned __int16 v12 = 0;
          int v13 = a3 + 2;
          while (1)
          {
            int v14 = *v13;
            unsigned __int8 v15 = v14 - 48;
            if ((v14 - 48) >= 0xA)
            {
              if ((v14 - 65) < 6)
              {
                unsigned __int8 v15 = v14 - 55;
              }

              else
              {
                unsigned __int8 v15 = v14 - 87;
              }
            }

            if (v12 > 0xFFFu) {
              break;
            }
            unsigned __int16 v12 = 16 * v12 + v15;
            if (++v13 >= &a3[v11 + 2])
            {
              if (!v12) {
                goto LABEL_48;
              }
              if (v12 >> 11 == 27)
              {
                unint64_t v16 = specialized static JSONError.SourceLocation.sourceLocation(at:fullSource:)( (unint64_t)a3,  a1,  a2);
                uint64_t v18 = v17;
                uint64_t v20 = v19;
                lazy protocol witness table accessor for type JSONError and conformance JSONError();
                swift_allocError();
                *(void *)uint64_t v21 = v16;
                *(void *)(v21 + 8) = v18;
                *(void *)(v21 + 16) = v20;
                *(void *)(v21 + 24) = v12;
                *(void *)(v21 + 32) = 0LL;
                *(void *)(v21 + 40) = 0LL;
                char v22 = 9;
                goto LABEL_46;
              }

              LODWORD(result) = v12;
              return result;
            }
          }

unsigned __int8 *JSON5Scanner.DocumentReader.skipUTF8StringTillNextUnescapedQuote(isSimple:quote:)( _BYTE *a1, __int16 quote)
{
  uint64_t v5 = (unsigned __int8 *)v2[2];
  if ((quote & 0x100) != 0)
  {
    int v14 = specialized JSON5Scanner.DocumentReader.skipUTF8StringTillEndOfUnquotedKey(orEscapeSequence:)();
    if (!v3)
    {
      if (v14 != 92) {
        goto LABEL_12;
      }
      *a1 = 0;
      specialized JSON5Scanner.DocumentReader.skipUTF8StringTillEndOfUnquotedKey(orEscapeSequence:)();
    }

    return v5;
  }

  uint64_t v6 = (unsigned __int8 *)v2[3];
  if (v6 == v5)
  {
LABEL_33:
    lazy protocol witness table accessor for type JSONError and conformance JSONError();
    swift_allocError();
    *(void *)uint64_t v19 = 1LL;
    *(_OWORD *)(v19 + 8) = 0u;
    *(_OWORD *)(v19 + 24) = 0u;
    *(void *)(v19 + 40) = 0LL;
    char v20 = 12;
LABEL_34:
    *(_BYTE *)(v19 + 48) = v20;
LABEL_35:
    swift_willThrow();
    return v5;
  }

  unsigned __int8 v7 = quote;
  unsigned int v9 = *v5++;
  uint64_t v8 = v9;
  v2[2] = (unint64_t)v5;
  if (v9 != quote)
  {
    unint64_t v15 = specialized static JSONError.SourceLocation.sourceLocation(at:fullSource:)((unint64_t)v5, *v2, v2[1]);
    uint64_t v5 = v16;
    uint64_t v18 = v17;
    lazy protocol witness table accessor for type JSONError and conformance JSONError();
    swift_allocError();
    *(void *)uint64_t v19 = 0LL;
    *(void *)(v19 + 8) = 0LL;
    *(void *)(v19 + 16) = v8;
    *(void *)(v19 + 24) = v15;
    *(void *)(v19 + 32) = v5;
    *(void *)(v19 + 40) = v18;
    char v20 = 1;
    goto LABEL_34;
  }

  unint64_t result = (unsigned __int8 *)JSON5Scanner.DocumentReader.skipUTF8StringTillQuoteOrBackslashOrInvalidCharacter(quote:)(quote);
  if (v11) {
    return v5;
  }
  if (result == v7)
  {
LABEL_12:
    *a1 = 1;
    return v5;
  }

  *a1 = 0;
  unsigned __int16 v12 = (unsigned __int8 *)v2[2];
  if (v12 >= v6) {
    goto LABEL_33;
  }
  int v13 = 16843009 * v7;
  while (1)
  {
    int v23 = *v12;
    if (v23 == v7) {
      return v5;
    }
    if (v23 != 92)
    {
      uint64_t v21 = v12 + 1;
      v2[2] = (unint64_t)(v12 + 1);
      char v22 = (unsigned __int8 *)v2[3];
      goto LABEL_14;
    }

    char v22 = (unsigned __int8 *)v2[3];
    if (v22 == v12) {
      break;
    }
    v2[2] = (unint64_t)(v12 + 1);
    if (v22 == v12 + 1) {
      goto LABEL_33;
    }
    int v24 = v12[1];
    uint64_t v21 = v12 + 2;
    v2[2] = (unint64_t)(v12 + 2);
    if (v24 == 120)
    {
      if (v22 - v21 <= 1)
      {
LABEL_37:
        lazy protocol witness table accessor for type JSONError and conformance JSONError();
        swift_allocError();
        *(void *)uint64_t v29 = 1LL;
        *(_OWORD *)(v29 + 8) = 0u;
        *(_OWORD *)(v29 + 24) = 0u;
        *(void *)(v29 + 40) = 0LL;
        char v30 = 12;
LABEL_39:
        *(_BYTE *)(v29 + 48) = v30;
        goto LABEL_35;
      }

      unint64_t v27 = (unint64_t)&v21[-*v2];
      uint64_t v28 = (char *)(v27 + 2);
      if (__OFADD__(v27, 2LL)) {
        goto LABEL_43;
      }
      if ((~((((v13 ^ *(unsigned __int16 *)v21) & 0x7F7F7F7F) + 2139062143) | *(unsigned __int16 *)v21) & 0x80808080) != 0)
      {
LABEL_38:
        uint64_t v5 = (unsigned __int8 *)static String._fromUTF8Repairing(_:)();
        uint64_t v32 = v31;
        unint64_t v33 = specialized static JSONError.SourceLocation.sourceLocation(at:fullSource:)(v2[2], *v2, v2[1]);
        uint64_t v35 = v34;
        uint64_t v37 = v36;
        lazy protocol witness table accessor for type JSONError and conformance JSONError();
        swift_allocError();
        *(void *)uint64_t v29 = v5;
        *(void *)(v29 + 8) = v32;
        *(void *)(v29 + 16) = v33;
        *(void *)(v29 + 24) = v35;
        *(void *)(v29 + 32) = v37;
        *(void *)(v29 + 40) = 0LL;
        char v30 = 3;
        goto LABEL_39;
      }

      uint64_t v21 = v12 + 4;
      v2[2] = (unint64_t)(v12 + 4);
    }

    else if (v24 == 117)
    {
      if (v22 - v21 <= 3) {
        goto LABEL_37;
      }
      unint64_t v25 = (unint64_t)&v21[-*v2];
      uint64_t v26 = (char *)(v25 + 4);
      if (__OFADD__(v25, 4LL)) {
        goto LABEL_41;
      }
      if ((~((((*(_DWORD *)v21 ^ v13) & 0x7F7F7F7F) + 2139062143) | *(_DWORD *)v21) & 0x80808080) != 0) {
        goto LABEL_38;
      }
      uint64_t v21 = v12 + 6;
      v2[2] = (unint64_t)(v12 + 6);
    }

Swift::Void __swiftcall JSON5Scanner.DocumentReader.skipNumber()()
{
  uint64_t v1 = *(unsigned __int8 **)(v0 + 16);
  unint64_t v2 = *(unsigned __int8 **)(v0 + 24);
  if (v2 == v1)
  {
    __break(1u);
LABEL_19:
    __break(1u);
    return;
  }

  int v5 = *v1;
  uint64_t v3 = v1 + 1;
  int v4 = v5;
  *(void *)(v0 + 16) = v3;
  if ((v5 - 58) <= 0xFFFFFFF5)
  {
    unsigned int v6 = v4 - 43;
    BOOL v7 = v6 > 0x23;
    uint64_t v8 = (1LL << v6) & 0x84000000DLL;
    if (v7 || v8 == 0) {
      goto LABEL_19;
    }
  }

  for (; v3 < v2; *(void *)(v0 + 16) = ++v3)
  {
    unsigned int v10 = *v3;
    if (v10 - 58 < 0xFFFFFFF6)
    {
      BOOL v11 = v10 > 0x2E || ((1LL << v10) & 0x680000000000LL) == 0;
      if (v11 && (v10 & 0xFFFFFFDF) - 91 <= 0xFFFFFFE5) {
        break;
      }
    }
  }

uint64_t specialized BufferView.suffix(from:)(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (((a2 + a3 - result) | (result - a2)) < 0) {
    __break(1u);
  }
  return result;
}

Swift::UInt8 __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> JSON5Scanner.DocumentReader.skipUTF8StringTillQuoteOrBackslashOrInvalidCharacter(quote:)( Swift::UInt8 quote)
{
  unint64_t v2 = *(unsigned __int8 **)(v1 + 16);
  unint64_t v3 = *(void *)(v1 + 24);
  if ((unint64_t)v2 >= v3)
  {
LABEL_9:
    lazy protocol witness table accessor for type JSONError and conformance JSONError();
    swift_allocError();
    *(void *)uint64_t v7 = 1LL;
    *(_OWORD *)(v7 + 8) = 0u;
    *(_OWORD *)(v7 + 24) = 0u;
    *(void *)(v7 + 40) = 0LL;
    *(_BYTE *)(v7 + 48) = 12;
    swift_willThrow();
    LOBYTE(v5) = 0;
  }

  else
  {
    int v4 = quote;
    while (1)
    {
      unsigned int v5 = *v2;
      BOOL v6 = v5 < 0x20 || v5 == v4;
      if (v6 || v5 == 92) {
        break;
      }
      *(void *)(v1 + 16) = ++v2;
    }
  }

  return v5;
}

uint64_t static JSON5Scanner.stringValue(from:fullSource:)( unint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v8 = (unsigned __int8 *)(a1 + a2);
  unsigned int v9 = (unsigned __int8 *)a1;
  if (a2 >= 1)
  {
    do
    {
      unsigned int v10 = *v9;
      if (v10 == 92) {
        break;
      }
      if (v10 < 0x20) {
        break;
      }
      ++v9;
    }

    while (v9 < v8);
    if ((unint64_t)v9 < a1)
    {
      __break(1u);
      return v19[0];
    }
  }

  uint64_t result = static String._tryFromUTF8(_:)();
  if (v12)
  {
    v19[0] = result;
    v19[1] = v12;
    if (v8 != v9)
    {
      if (v8 < v9)
      {
        __break(1u);
        return result;
      }

      specialized static JSON5Scanner._slowpath_stringValue(from:appendingTo:fullSource:)(v9, v8 - v9, v19, a3, a4);
      if (v4) {
        return swift_bridgeObjectRelease();
      }
      return v19[0];
    }
  }

  else
  {
    unint64_t v13 = specialized static JSONError.SourceLocation.sourceLocation(at:fullSource:)(a1, a3, a4);
    uint64_t v15 = v14;
    uint64_t v17 = v16;
    lazy protocol witness table accessor for type JSONError and conformance JSONError();
    swift_allocError();
    *(void *)uint64_t v18 = v13;
    *(void *)(v18 + 8) = v15;
    *(void *)(v18 + 16) = v17;
    *(void *)(v18 + 24) = 0LL;
    *(void *)(v18 + 32) = 0LL;
    *(void *)(v18 + 40) = 0LL;
    *(_BYTE *)(v18 + 48) = 0;
    return swift_willThrow();
  }

  return result;
}

uint64_t specialized BufferView.dropFirst(_:)(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (result < 0)
  {
    __break(1u);
  }

  else
  {
    if (result >= a3) {
      uint64_t v3 = a3;
    }
    else {
      uint64_t v3 = result;
    }
    return a2 + v3;
  }

  return result;
}

uint64_t specialized BufferView.prefix(_:)(uint64_t result, uint64_t a2)
{
  if ((result & 0x8000000000000000LL) == 0) {
    return a2;
  }
  __break(1u);
  return result;
}

uint64_t closure #1 in static JSON5Scanner.validateInfinity(from:fullSource:)( const char *a1, uint64_t a2, unint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6)
{
  if (a2 < 8 || (uint64_t result = strncmp(a1, "Infinity", 8uLL), (_DWORD)result))
  {
    uint64_t v10 = StaticString.description.getter();
    uint64_t v12 = v11;
    unint64_t v13 = specialized static JSONError.SourceLocation.sourceLocation(at:fullSource:)(a3, a5, a6);
    uint64_t v15 = v14;
    uint64_t v17 = v16;
    lazy protocol witness table accessor for type JSONError and conformance JSONError();
    swift_allocError();
    *(void *)uint64_t v18 = v10;
    *(void *)(v18 + 8) = v12;
    *(void *)(v18 + 16) = v13;
    *(void *)(v18 + 24) = v15;
    *(void *)(v18 + 32) = v17;
    *(void *)(v18 + 40) = 0LL;
    *(_BYTE *)(v18 + 48) = 5;
    return swift_willThrow();
  }

  return result;
}

unint64_t specialized JSON5Scanner.DocumentReader.skipUTF8StringTillEndOfUnquotedKey(orEscapeSequence:)()
{
  uint64_t v3 = v0;
  uint64_t v4 = type metadata accessor for Unicode.GeneralCategory();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1895F8858](v4);
  uint64_t v7 = &v31[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v42 = type metadata accessor for Unicode.Scalar.Properties();
  uint64_t v8 = *(void *)(v42 - 8);
  MEMORY[0x1895F8858](v42);
  uint64_t v10 = &v31[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  unint64_t v11 = JSON5Scanner.DocumentReader.peekU32()( *(void *)v3,  *(void *)(v3 + 8),  *(unsigned __int8 **)(v3 + 16),  *(void *)(v3 + 24));
  if (!v1)
  {
    unint64_t v2 = v11;
    uint64_t v14 = v12;
    uint64_t v41 = v8;
    int v40 = *MEMORY[0x18961AAA8];
    int v39 = *MEMORY[0x18961AA90];
    int v38 = *MEMORY[0x18961AAA0];
    int v37 = *MEMORY[0x18961AA68];
    int v36 = *MEMORY[0x18961AA20];
    int v35 = *MEMORY[0x18961AA78];
    int v34 = *MEMORY[0x18961AA38];
    int v33 = *MEMORY[0x18961AA48];
    int v32 = *MEMORY[0x18961AA40];
    int v15 = *MEMORY[0x18961AAD8];
    while ((v13 & 1) == 0)
    {
      Unicode.Scalar.properties.getter();
      Unicode.Scalar.Properties.generalCategory.getter();
      (*(void (**)(_BYTE *, uint64_t))(v41 + 8))(v10, v42);
      int v19 = (*(uint64_t (**)(_BYTE *, uint64_t))(v5 + 88))(v7, v4);
      if (v19 != v40
        && v19 != v39
        && v19 != v38
        && v19 != v37
        && v19 != v36
        && v19 != v35
        && v19 != v34
        && v19 != v33
        && v19 != v32
        && v19 != v15)
      {
        if (((v2 - 36) > 0x3B || ((1LL << (v2 - 36)) & 0x900000000000001LL) == 0)
          && (v2 - 8204) >= 2)
        {
          (*(void (**)(_BYTE *, uint64_t))(v5 + 8))(v7, v4);
          return v2;
        }

        (*(void (**)(_BYTE *, uint64_t))(v5 + 8))(v7, v4);
      }

      unint64_t v16 = *(void *)(v3 + 24);
      uint64_t v17 = (unsigned __int8 *)(*(void *)(v3 + 16) + v14);
      *(void *)(v3 + 16) = v17;
      unint64_t v2 = JSON5Scanner.DocumentReader.peekU32()(*(void *)v3, *(void *)(v3 + 8), v17, v16);
      uint64_t v14 = v18;
    }

    lazy protocol witness table accessor for type JSONError and conformance JSONError();
    swift_allocError();
    *(void *)uint64_t v29 = 1LL;
    *(_OWORD *)(v29 + 8) = 0u;
    *(_OWORD *)(v29 + 24) = 0u;
    *(void *)(v29 + 40) = 0LL;
    *(_BYTE *)(v29 + 48) = 12;
    swift_willThrow();
  }

  return v2;
}

unint64_t specialized static JSON5Scanner.parseEscapeSequence(from:into:fullSource:)( unsigned __int8 *a1, uint64_t a2, uint64_t *a3, unint64_t a4, uint64_t a5)
{
  if (!a2)
  {
    __break(1u);
LABEL_44:
    __break(1u);
    JUMPOUT(0x18304C528LL);
  }

  uint64_t v8 = a1;
  uint64_t v9 = *a1;
  switch(*a1)
  {
    case 0xAu:
    case 0x6Eu:
      uint64_t v9 = 10LL;
      goto LABEL_15;
    case 0xDu:
      if (a2 < 2 || a1[1] != 10) {
        goto LABEL_8;
      }
      v18._uint64_t countAndFlagsBits = 2573LL;
      v18._uint64_t object = (void *)0xE200000000000000LL;
      String.append(_:)(v18);
      v8 += 2;
      return (unint64_t)v8;
    case 0x22u:
      goto LABEL_15;
    case 0x27u:
      uint64_t v9 = 39LL;
      goto LABEL_15;
    case 0x2Fu:
      uint64_t v9 = 47LL;
      goto LABEL_15;
    case 0x5Cu:
      uint64_t v9 = 92LL;
      goto LABEL_15;
    case 0x62u:
      uint64_t v9 = 8LL;
      goto LABEL_15;
    case 0x66u:
      uint64_t v9 = 12LL;
      goto LABEL_15;
    case 0x72u:
LABEL_8:
      uint64_t v9 = 13LL;
      goto LABEL_15;
    case 0x74u:
      uint64_t v9 = 9LL;
LABEL_15:
      v19._uint64_t countAndFlagsBits = v9;
      v19._uint64_t object = (void *)0xE100000000000000LL;
      String.append(_:)(v19);
      return (unint64_t)++v8;
    case 0x75u:
      if (a2 >= 1) {
        uint64_t v21 = 1LL;
      }
      else {
        uint64_t v21 = a2;
      }
      unint64_t v22 = specialized static JSONScanner.parseUnicodeSequence(from:into:fullSource:allowNulls:)( (unint64_t)&a1[v21],  a2 - v21,  a3,  a4,  a5,  0);
      if (!v5) {
        return v22;
      }
      return (unint64_t)v8;
    case 0x78u:
      if (a2 >= 1) {
        uint64_t v23 = 1LL;
      }
      else {
        uint64_t v23 = a2;
      }
      BOOL v24 = a2 - v23 < 2;
      if (a2 - v23 >= 2) {
        uint64_t v25 = 2LL;
      }
      else {
        uint64_t v25 = a2 - v23;
      }
      if (v24) {
        goto LABEL_44;
      }
      unsigned __int8 v26 = 0;
      unint64_t v27 = (unint64_t)&a1[v23];
      uint64_t v8 = &a1[v23 + v25];
      uint64_t v28 = &a1[v23];
      break;
    default:
      unint64_t v11 = specialized static JSONError.SourceLocation.sourceLocation(at:fullSource:)((unint64_t)a1, a4, a5);
      uint64_t v13 = v12;
      uint64_t v15 = v14;
      lazy protocol witness table accessor for type JSONError and conformance JSONError();
      swift_allocError();
      *(void *)uint64_t v16 = v9;
      *(void *)(v16 + 8) = v11;
      *(void *)(v16 + 16) = v13;
      *(void *)(v16 + 24) = v15;
      *(void *)(v16 + 32) = 0LL;
      *(void *)(v16 + 40) = 0LL;
      char v17 = 6;
      goto LABEL_40;
  }

  do
  {
    int v29 = *v28;
    char v30 = v29 - 48;
    if ((v29 - 48) >= 0xA)
    {
      if ((v29 - 65) < 6)
      {
        char v30 = v29 - 55;
      }

      else
      {
        char v30 = v29 - 87;
      }
    }

    if (v26 > 0xFu)
    {
LABEL_39:
      uint64_t v31 = static String._fromUTF8Repairing(_:)();
      uint64_t v8 = v32;
      unint64_t v33 = specialized static JSONError.SourceLocation.sourceLocation(at:fullSource:)(v27, a4, a5);
      uint64_t v35 = v34;
      uint64_t v37 = v36;
      lazy protocol witness table accessor for type JSONError and conformance JSONError();
      swift_allocError();
      *(void *)uint64_t v16 = v31;
      *(void *)(v16 + 8) = v8;
      *(void *)(v16 + 16) = v33;
      *(void *)(v16 + 24) = v35;
      *(void *)(v16 + 32) = v37;
      *(void *)(v16 + 40) = 0LL;
      char v17 = 3;
      goto LABEL_40;
    }

    unsigned __int8 v26 = v30 + 16 * v26;
    ++v28;
  }

  while (v28 < v8);
  if (v26)
  {
    uint64_t v43 = *a3;
    uint64_t v44 = a3[1];
    String.UnicodeScalarView.append(_:)();
    *a3 = v43;
    a3[1] = v44;
    return (unint64_t)v8;
  }

  unint64_t v38 = specialized static JSONError.SourceLocation.sourceLocation(at:fullSource:)(v27, a4, a5);
  uint64_t v40 = v39;
  uint64_t v42 = v41;
  lazy protocol witness table accessor for type JSONError and conformance JSONError();
  swift_allocError();
  *(void *)uint64_t v16 = v38;
  *(void *)(v16 + 8) = v40;
  *(void *)(v16 + 16) = v42;
  *(void *)(v16 + 24) = 0LL;
  *(void *)(v16 + 32) = 0LL;
  *(void *)(v16 + 40) = 0LL;
  char v17 = 4;
LABEL_40:
  *(_BYTE *)(v16 + 48) = v17;
  swift_willThrow();
  return (unint64_t)v8;
}

unsigned __int8 *specialized static JSON5Scanner._slowpath_stringValue(from:appendingTo:fullSource:)( unsigned __int8 *result, uint64_t a2, uint64_t *a3, unint64_t a4, uint64_t a5)
{
  uint64_t v9 = result;
  if (a2 < 1)
  {
    unint64_t v11 = (unint64_t)result;
LABEL_14:
    uint64_t v17 = static String._tryFromUTF8(_:)();
    if (v18)
    {
      String.append(_:)(*(Swift::String *)&v17);
      return (unsigned __int8 *)swift_bridgeObjectRelease();
    }

    else
    {
LABEL_16:
      unint64_t v19 = specialized static JSONError.SourceLocation.sourceLocation(at:fullSource:)(v11, a4, a5);
      uint64_t v21 = v20;
      uint64_t v23 = v22;
      lazy protocol witness table accessor for type JSONError and conformance JSONError();
      swift_allocError();
      *(void *)uint64_t v24 = v19;
      *(void *)(v24 + 8) = v21;
      *(void *)(v24 + 16) = v23;
      *(void *)(v24 + 24) = 0LL;
      *(void *)(v24 + 32) = 0LL;
      *(void *)(v24 + 40) = 0LL;
      *(_BYTE *)(v24 + 48) = 0;
      return (unsigned __int8 *)swift_willThrow();
    }
  }

  else
  {
    uint64_t v10 = &result[a2];
    unint64_t v11 = (unint64_t)result;
    uint64_t v12 = result;
    do
    {
      uint64_t v13 = *v12;
      if ((_DWORD)v13 == 92)
      {
        if ((unint64_t)v12 < v11)
        {
          __break(1u);
LABEL_20:
          unint64_t v25 = specialized static JSONError.SourceLocation.sourceLocation(at:fullSource:)( (unint64_t)v12,  a4,  a5);
          uint64_t v27 = v26;
          uint64_t v29 = v28;
          lazy protocol witness table accessor for type JSONError and conformance JSONError();
          swift_allocError();
          *(void *)uint64_t v30 = v13;
          *(void *)(v30 + 8) = v25;
          *(void *)(v30 + 16) = v27;
          *(void *)(v30 + 24) = v29;
          *(void *)(v30 + 32) = 0LL;
          *(void *)(v30 + 40) = 0LL;
          *(_BYTE *)(v30 + 48) = 7;
          return (unsigned __int8 *)swift_willThrow();
        }

        uint64_t v14 = static String._tryFromUTF8(_:)();
        if (!v15) {
          goto LABEL_16;
        }
        String.append(_:)(*(Swift::String *)&v14);
        swift_bridgeObjectRelease();
        uint64_t result = v12 + 1;
        uint64_t v16 = v10 - (v12 + 1);
        if (((v12 + 1 - v9) | v16) < 0)
        {
          __break(1u);
          goto LABEL_22;
        }

        uint64_t result = (unsigned __int8 *)specialized static JSON5Scanner.parseEscapeSequence(from:into:fullSource:)( result,  v16,  a3,  a4,  a5);
        if (v5) {
          return result;
        }
        unint64_t v11 = (unint64_t)result;
        uint64_t v12 = result;
      }

      else
      {
        ++v12;
      }
    }

    while (v12 < v10);
LABEL_22:
    __break(1u);
  }

  return result;
}

unsigned __int8 *specialized static JSON5Scanner.validateLeadingZero(in:zero:fullSource:)( unsigned __int8 *result, uint64_t a2, unsigned __int8 *a3, unint64_t a4, uint64_t a5)
{
  if (!a2) {
    return a3;
  }
  uint64_t v5 = *result;
  if (*result <= 0x57u)
  {
    if ((_DWORD)v5 == 46 || (_DWORD)v5 == 69) {
      return a3;
    }
LABEL_15:
    unint64_t v8 = specialized static JSONError.SourceLocation.sourceLocation(at:fullSource:)((unint64_t)result, a4, a5);
    uint64_t v10 = v9;
    uint64_t v12 = v11;
    lazy protocol witness table accessor for type JSONError and conformance JSONError();
    swift_allocError();
    if ((v5 - 58) >= 0xFFFFFFF6)
    {
      *(void *)uint64_t v13 = v8;
      *(void *)(v13 + 8) = v10;
      *(void *)(v13 + 16) = v12;
      *(void *)(v13 + 24) = 0LL;
      *(void *)(v13 + 32) = 0LL;
      *(void *)(v13 + 40) = 0LL;
      char v14 = 10;
    }

    else
    {
      *(_OWORD *)uint64_t v13 = xmmword_1837301C0;
      *(void *)(v13 + 16) = v5;
      *(void *)(v13 + 24) = v8;
      *(void *)(v13 + 32) = v10;
      *(void *)(v13 + 40) = v12;
      char v14 = 1;
    }

    *(_BYTE *)(v13 + 48) = v14;
LABEL_19:
    swift_willThrow();
    return a3;
  }

  if ((_DWORD)v5 != 120)
  {
    if ((_DWORD)v5 == 101) {
      return a3;
    }
    if ((_DWORD)v5 != 88) {
      goto LABEL_15;
    }
  }

  if (a2 >= 1)
  {
    a3 = result + 1;
    unsigned __int8 v6 = result[1];
    unint64_t v15 = specialized static JSONError.SourceLocation.sourceLocation(at:fullSource:)( (unint64_t)(result + 1),  a4,  a5);
    uint64_t v17 = v16;
    uint64_t v19 = v18;
    lazy protocol witness table accessor for type JSONError and conformance JSONError();
    swift_allocError();
    *(_OWORD *)uint64_t v20 = xmmword_1837301C0;
    *(void *)(v20 + 16) = v6;
    *(void *)(v20 + 24) = v15;
    *(void *)(v20 + 32) = v17;
    *(void *)(v20 + 40) = v19;
    *(_BYTE *)(v20 + 48) = 1;
    goto LABEL_19;
  }

  __break(1u);
  return result;
}

uint64_t specialized static JSON5Scanner.validateInfinity(from:fullSource:)( char *__s1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  if (a2 <= 7 || (uint64_t result = strncmp(__s1, "Infinity", 8uLL), (_DWORD)result))
  {
    uint64_t v8 = StaticString.description.getter();
    uint64_t v10 = v9;
    unint64_t v11 = specialized static JSONError.SourceLocation.sourceLocation(at:fullSource:)((unint64_t)__s1, a3, a4);
    uint64_t v13 = v12;
    uint64_t v15 = v14;
    lazy protocol witness table accessor for type JSONError and conformance JSONError();
    swift_allocError();
    *(void *)uint64_t v16 = v8;
    *(void *)(v16 + 8) = v10;
    *(void *)(v16 + 16) = v11;
    *(void *)(v16 + 24) = v13;
    *(void *)(v16 + 32) = v15;
    *(void *)(v16 + 40) = 0LL;
    *(_BYTE *)(v16 + 48) = 5;
    return swift_willThrow();
  }

  return result;
}

uint64_t specialized static JSON5Scanner.validateNaN(from:fullSource:)( char *__s1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  if (a2 <= 2 || (uint64_t result = strncmp(__s1, "NaN", 3uLL), (_DWORD)result))
  {
    uint64_t v8 = StaticString.description.getter();
    uint64_t v10 = v9;
    unint64_t v11 = specialized static JSONError.SourceLocation.sourceLocation(at:fullSource:)((unint64_t)__s1, a3, a4);
    uint64_t v13 = v12;
    uint64_t v15 = v14;
    lazy protocol witness table accessor for type JSONError and conformance JSONError();
    swift_allocError();
    *(void *)uint64_t v16 = v8;
    *(void *)(v16 + 8) = v10;
    *(void *)(v16 + 16) = v11;
    *(void *)(v16 + 24) = v13;
    *(void *)(v16 + 32) = v15;
    *(void *)(v16 + 40) = 0LL;
    *(_BYTE *)(v16 + 48) = 5;
    return swift_willThrow();
  }

  return result;
}

unsigned __int8 *specialized static JSON5Scanner.validateLeadingDecimal(from:fullSource:)( unsigned __int8 *result, uint64_t a2, unint64_t a3, uint64_t a4)
{
  if (a2)
  {
    uint64_t v4 = *result;
    unint64_t v5 = specialized static JSONError.SourceLocation.sourceLocation(at:fullSource:)((unint64_t)result, a3, a4);
    uint64_t v7 = v6;
    uint64_t v9 = v8;
    lazy protocol witness table accessor for type JSONError and conformance JSONError();
    swift_allocError();
    *(void *)uint64_t v10 = 0xD000000000000013LL;
    *(void *)(v10 + 8) = 0x80000001839CB4D0LL;
    *(void *)(v10 + 16) = v4;
  }

  else
  {
    unint64_t v5 = specialized static JSONError.SourceLocation.sourceLocation(at:fullSource:)((unint64_t)result, a3, a4);
    uint64_t v7 = v11;
    uint64_t v9 = v12;
    lazy protocol witness table accessor for type JSONError and conformance JSONError();
    swift_allocError();
    *(void *)uint64_t v10 = 0LL;
    *(void *)(v10 + 8) = 0LL;
    *(void *)(v10 + 16) = 46LL;
  }

  *(void *)(v10 + 24) = v5;
  *(void *)(v10 + 32) = v7;
  *(void *)(v10 + 40) = v9;
  *(_BYTE *)(v10 + 48) = 1;
  return (unsigned __int8 *)swift_willThrow();
}

unint64_t specialized static JSON5Scanner.prevalidateJSONNumber(from:fullSource:)( char *__s1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  if (!a2)
  {
    __break(1u);
LABEL_45:
    __break(1u);
    goto LABEL_46;
  }

  unint64_t v9 = *__s1;
  if ((_DWORD)v9 != 48)
  {
    if ((v9 - 58) > 0xFFFFFFF6)
    {
LABEL_26:
      unint64_t v9 = (unint64_t)__s1;
LABEL_34:
      uint64_t v23 = &__s1[a2 - 1];
      uint64_t v24 = *v23;
      unint64_t v16 = specialized static JSONError.SourceLocation.sourceLocation(at:fullSource:)((unint64_t)v23, a3, a4);
      uint64_t v18 = v25;
      uint64_t v20 = v26;
      lazy protocol witness table accessor for type JSONError and conformance JSONError();
      swift_allocError();
      *(void *)uint64_t v21 = 0xD000000000000010LL;
      *(void *)(v21 + 8) = 0x80000001839CB4F0LL;
      *(void *)(v21 + 16) = v24;
LABEL_36:
      *(void *)(v21 + 24) = v16;
      *(void *)(v21 + 32) = v18;
      *(void *)(v21 + 40) = v20;
      *(_BYTE *)(v21 + 48) = 1;
      swift_willThrow();
      return v9;
    }

    switch(*__s1)
    {
      case '+':
      case '-':
        if (a2 >= 2)
        {
          unint64_t v9 = (unint64_t)(__s1 + 1);
          uint64_t v13 = __s1[1];
          if ((_DWORD)v13 == 48)
          {
            uint64_t v14 = specialized static JSON5Scanner.validateLeadingZero(in:zero:fullSource:)( (unsigned __int8 *)__s1 + 2,  a2 - 2,  (unsigned __int8 *)__s1 + 1,  a3,  a4);
            if (v4) {
              return v9;
            }
            unint64_t v9 = (unint64_t)v14;
            if ((v15 & 1) != 0) {
              return v9;
            }
          }

          else if ((v13 - 58) <= 0xFFFFFFF6)
          {
            switch((_DWORD)v13)
            {
              case '.':
                specialized static JSON5Scanner.validateLeadingDecimal(from:fullSource:)( (unsigned __int8 *)__s1 + 2,  a2 - 2,  a3,  a4);
                if (v4) {
                  return v9;
                }
                break;
              case 'N':
                specialized static JSON5Scanner.validateNaN(from:fullSource:)(__s1 + 1, a2 - 1, a3, a4);
                if (v4) {
                  return v9;
                }
                break;
              case 'I':
                specialized static JSON5Scanner.validateInfinity(from:fullSource:)(__s1 + 1, a2 - 1, a3, a4);
                if (v4) {
                  return v9;
                }
                break;
              default:
                _StringGuts.grow(_:)(20LL);
                swift_bridgeObjectRelease();
                uint64_t v37 = 0x27207265746661LL;
                unint64_t v38 = 0xE700000000000000LL;
                unsigned int v28 = *__s1;
                if ((v28 & 0x80) != 0) {
                  unsigned int v29 = ((v28 >> 6) & 0xFFFFC0FF | ((v28 & 0x3F) << 8)) + 33217;
                }
                else {
                  unsigned int v29 = v28 + 1;
                }
                uint64_t v36 = (v29 + 0xFEFEFEFEFEFEFFLL) & ~(-1LL << (8 * ((4 - (__clz(v29) >> 3)) & 7)));
                v30._uint64_t countAndFlagsBits = MEMORY[0x186E1B6AC](&v36);
                String.append(_:)(v30);
                swift_bridgeObjectRelease();
                v31._uint64_t countAndFlagsBits = 0x6D756E206E692027LL;
                v31._uint64_t object = (void *)0xEB00000000726562LL;
                String.append(_:)(v31);
                uint64_t v32 = v37;
                unint64_t v33 = v38;
                unint64_t v16 = specialized static JSONError.SourceLocation.sourceLocation(at:fullSource:)(v9, a3, a4);
                uint64_t v18 = v34;
                uint64_t v20 = v35;
                lazy protocol witness table accessor for type JSONError and conformance JSONError();
                swift_allocError();
                *(void *)uint64_t v21 = v32;
                *(void *)(v21 + 8) = v33;
                *(void *)(v21 + 16) = v13;
                goto LABEL_36;
            }
          }

          goto LABEL_34;
        }

        if (a2 == 1)
        {
          unint64_t v16 = specialized static JSONError.SourceLocation.sourceLocation(at:fullSource:)( (unint64_t)__s1,  a3,  a4);
          uint64_t v18 = v17;
          uint64_t v20 = v19;
          lazy protocol witness table accessor for type JSONError and conformance JSONError();
          swift_allocError();
          *(void *)uint64_t v21 = 0xD000000000000010LL;
          *(void *)(v21 + 8) = 0x80000001839CB4F0LL;
          *(void *)(v21 + 16) = v9;
          goto LABEL_36;
        }

        break;
      case '.':
        if (a2 >= 1) {
          uint64_t v22 = 1LL;
        }
        else {
          uint64_t v22 = a2;
        }
        specialized static JSON5Scanner.validateLeadingDecimal(from:fullSource:)( (unsigned __int8 *)&__s1[v22],  a2 - v22,  a3,  a4);
        if (!v4) {
          goto LABEL_26;
        }
        return v9;
      case 'I':
        specialized static JSON5Scanner.validateInfinity(from:fullSource:)(__s1, a2, a3, a4);
        if (!v4) {
          goto LABEL_26;
        }
        return v9;
      case 'N':
        specialized static JSON5Scanner.validateNaN(from:fullSource:)(__s1, a2, a3, a4);
        if (!v4) {
          goto LABEL_26;
        }
        return v9;
      default:
        goto LABEL_45;
    }

unint64_t specialized static JSON5Scanner.validateNumber(from:fullSource:)@<X0>( char *a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  if (a2 < 1) {
    goto LABEL_55;
  }
  uint64_t v8 = (uint64_t)a1;
  uint64_t v10 = &a1[a2];
  int v11 = *a1;
  if (v11 == 45 || (char v12 = a1, v11 == 43)) {
    char v12 = a1 + 1;
  }
  if (v10 < v12)
  {
LABEL_56:
    __break(1u);
    goto LABEL_57;
  }

  uint64_t v13 = v12 - a1;
  if (v12 - a1 < 0)
  {
LABEL_57:
    __break(1u);
    goto LABEL_58;
  }

  if (v10 - v12 < 0)
  {
LABEL_58:
    __break(1u);
    goto LABEL_59;
  }

  if (v10 - v12 >= 2) {
    size_t v14 = 2LL;
  }
  else {
    size_t v14 = v10 - v12;
  }
  if (_stringshims_strncasecmp_l(v12, "0x", v14, 0LL))
  {
    if (v12 < v10)
    {
      char v15 = 0;
      char v16 = 0;
      uint64_t v17 = (char *)(a2 + v8);
      uint64_t v18 = -v8;
      char v19 = 1;
LABEL_15:
      uint64_t v20 = 0LL;
      uint64_t v21 = v17 - v12;
      while ((uint64_t)&v12[v18 + v20] >= 0)
      {
        BOOL v22 = v21-- < 1;
        if (v22) {
          break;
        }
        uint64_t v8 = v12[v20];
        if ((v8 - 58) <= 0xF5u)
        {
          switch(v12[v20])
          {
            case '+':
            case '-':
              if (v20 != 0 || (v15 & 1) == 0) {
                goto LABEL_52;
              }
              char v15 = 0;
              char v19 = 0;
              v12 += v20 + 1;
              char v16 = 3;
              if (v12 < v10) {
                goto LABEL_15;
              }
              __break(1u);
              goto LABEL_54;
            case ',':
            case '/':
            case '0':
            case '1':
            case '2':
            case '3':
            case '4':
            case '5':
            case '6':
            case '7':
            case '8':
            case '9':
            case ':':
            case ';':
            case '<':
            case '=':
            case '>':
            case '?':
            case '@':
            case 'A':
            case 'B':
            case 'C':
            case 'D':
              goto LABEL_52;
            case '.':
              if ((v19 & 1) == 0) {
                goto LABEL_51;
              }
              char v15 = 0;
              char v19 = 0;
              v12 += v20 + 1;
              char v16 = 1;
              if (v12 < v10) {
                goto LABEL_15;
              }
              __break(1u);
              goto LABEL_34;
            case 'E':
              goto LABEL_27;
            default:
              if ((_DWORD)v8 != 101) {
                goto LABEL_52;
              }
LABEL_27:
              if (v16 != 1 && (v16 || v20 < 1)) {
                goto LABEL_52;
              }
              char v19 = 0;
              v12 += v20 + 1;
              char v16 = 2;
              char v15 = 1;
              if (v12 < v10) {
                goto LABEL_15;
              }
LABEL_54:
              __break(1u);
              break;
          }

unint64_t specialized min<A>(_:_:)(unint64_t result, unint64_t a2)
{
  if (a2 < result) {
    return a2;
  }
  return result;
}

uint64_t type metadata accessor for JSONMap()
{
  return objc_opt_self();
}

uint64_t JSONMap.loadValue(at:)(unint64_t a1)
{
  if ((a1 & 0x8000000000000000LL) != 0)
  {
    __break(1u);
LABEL_19:
    __break(1u);
LABEL_20:
    __break(1u);
LABEL_21:
    __break(1u);
LABEL_22:
    __break(1u);
LABEL_23:
    __break(1u);
LABEL_24:
    __break(1u);
LABEL_25:
    __break(1u);
LABEL_26:
    _StringGuts.grow(_:)(44LL);
    swift_bridgeObjectRelease();
    v10._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v10);
    swift_bridgeObjectRelease();
    v11._uint64_t countAndFlagsBits = 41LL;
    v11._uint64_t object = (void *)0xE100000000000000LL;
    String.append(_:)(v11);
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    JUMPOUT(0x18304D764LL);
  }

  uint64_t v3 = *(void *)(v1 + 16);
  unint64_t v4 = *(void *)(v3 + 16);
  if (v4 <= a1) {
    goto LABEL_19;
  }
  uint64_t v5 = v3 + 32;
  uint64_t v6 = *(void *)(v5 + 8 * a1);
  uint64_t result = 1LL;
  switch(v6)
  {
    case 0LL:
    case 8LL:
      if (a1 + 1 >= v4) {
        goto LABEL_20;
      }
      unint64_t v8 = a1 + 2;
      if (v8 >= v4) {
        goto LABEL_22;
      }
      uint64_t result = *(void *)(v5 + 8 * v8);
      break;
    case 1LL:
    case 9LL:
      if (a1 + 1 >= v4) {
        goto LABEL_21;
      }
      unint64_t v9 = a1 + 2;
      if (v9 >= v4) {
        goto LABEL_23;
      }
      uint64_t result = *(void *)(v5 + 8 * v9);
      break;
    case 2LL:
      return 0LL;
    case 3LL:
      return result;
    case 4LL:
      return 0LL;
    case 5LL:
      if (a1 + 2 >= v4) {
        goto LABEL_25;
      }
      return a1 + 3;
    case 6LL:
      if (a1 + 2 >= v4) {
        goto LABEL_24;
      }
      return a1 + 3;
    case 7LL:
      return 0LL;
    default:
      goto LABEL_26;
  }

  return result;
}

Swift::Int __swiftcall JSONMap.offset(after:)(Swift::Int after)
{
  if (after < 0)
  {
    __break(1u);
    goto LABEL_12;
  }

  uint64_t v2 = *(void *)(v1 + 16);
  unint64_t v3 = *(void *)(v2 + 16);
  if (v3 <= after)
  {
LABEL_12:
    __break(1u);
LABEL_13:
    __break(1u);
LABEL_14:
    _StringGuts.grow(_:)(44LL);
    swift_bridgeObjectRelease();
    v6._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v6);
    swift_bridgeObjectRelease();
    v7._uint64_t countAndFlagsBits = 41LL;
    v7._uint64_t object = (void *)0xE100000000000000LL;
    String.append(_:)(v7);
LABEL_16:
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    JUMPOUT(0x18304D95CLL);
  }

  uint64_t v4 = v2 + 32;
  switch(*(void *)(v4 + 8 * after))
  {
    case 0LL:
    case 1LL:
    case 8LL:
    case 9LL:
      BOOL v5 = __OFADD__(after, 3LL);
      after += 3LL;
      if (!v5) {
        return after;
      }
      __break(1u);
LABEL_7:
      ++after;
      break;
    case 2LL:
    case 3LL:
    case 4LL:
      goto LABEL_7;
    case 5LL:
    case 6LL:
      if (after + 1 >= v3) {
        goto LABEL_13;
      }
      after = *(void *)(v4 + 8 * (after + 1));
      break;
    case 7LL:
      _StringGuts.grow(_:)(68LL);
      v8._uint64_t countAndFlagsBits = 0xD000000000000041LL;
      v8._uint64_t object = (void *)0x80000001839CA0C0LL;
      String.append(_:)(v8);
      v9._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v9);
      swift_bridgeObjectRelease();
      v10._uint64_t countAndFlagsBits = 41LL;
      v10._uint64_t object = (void *)0xE100000000000000LL;
      String.append(_:)(v10);
      goto LABEL_16;
    default:
      goto LABEL_14;
  }

  return after;
}

uint64_t getEnumTagSinglePayload for JSONMap.Value(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 >= 0x7B && *(_BYTE *)(a1 + 17)) {
    return (*(_DWORD *)a1 + 123);
  }
  unsigned int v3 = ((*(unsigned __int8 *)(a1 + 16) >> 5) & 0xFFFFFF87 | (8 * ((*(unsigned __int8 *)(a1 + 16) >> 1) & 0xF))) ^ 0x7F;
  if (v3 >= 0x7A) {
    unsigned int v3 = -1;
  }
  return v3 + 1;
}

uint64_t storeEnumTagSinglePayload for JSONMap.Value(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7A)
  {
    *(_BYTE *)(result + 16) = 0;
    *(void *)uint64_t result = a2 - 123;
    *(void *)(result + 8) = 0LL;
    if (a3 >= 0x7B) {
      *(_BYTE *)(result + 17) = 1;
    }
  }

  else
  {
    if (a3 >= 0x7B) {
      *(_BYTE *)(result + 17) = 0;
    }
    if (a2)
    {
      *(void *)uint64_t result = 0LL;
      *(void *)(result + 8) = 0LL;
      *(_BYTE *)(result + 16) = 2 * (((-a2 >> 3) & 0xF) - 16 * a2);
    }
  }

  return result;
}

uint64_t getEnumTag for JSONMap.Value(uint64_t a1)
{
  unsigned int v1 = *(unsigned __int8 *)(a1 + 16);
  if (v1 <= 0x9F) {
    return v1 >> 5;
  }
  else {
    return (*(_DWORD *)a1 + 5);
  }
}

uint64_t destructiveProjectEnumData for JSONMap.Value(uint64_t result)
{
  *(_BYTE *)(result + 16) &= 0x1Fu;
  return result;
}

uint64_t destructiveInjectEnumTag for JSONMap.Value(uint64_t result, unsigned int a2)
{
  if (a2 < 5)
  {
    *(_BYTE *)(result + 16) = *(_BYTE *)(result + 16) & 1 | (32 * a2);
  }

  else
  {
    *(void *)uint64_t result = a2 - 5;
    *(void *)(result + 8) = 0LL;
    *(_BYTE *)(result + 16) = -96;
  }

  return result;
}

ValueMetadata *type metadata accessor for JSONMap.Value()
{
  return &type metadata for JSONMap.Value;
}

uint64_t outlined copy of JSONError( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, char a7)
{
  unsigned int v7 = (((a7 - 1) >> 1) | ((a7 - 1) << 7));
  BOOL v8 = v7 > 5;
  int v9 = (1 << v7) & 0x27;
  if (!v8 && v9 != 0) {
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t destroy for JSONError(uint64_t a1)
{
  return outlined consume of JSONError( *(void *)a1,  *(void *)(a1 + 8),  *(void *)(a1 + 16),  *(void *)(a1 + 24),  *(void *)(a1 + 32),  *(void *)(a1 + 40),  *(_BYTE *)(a1 + 48));
}

uint64_t initializeWithCopy for JSONError(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 16);
  uint64_t v6 = *(void *)(a2 + 24);
  uint64_t v7 = *(void *)(a2 + 32);
  uint64_t v8 = *(void *)(a2 + 40);
  char v9 = *(_BYTE *)(a2 + 48);
  outlined copy of JSONError(*(void *)a2, v4, v5, v6, v7, v8, v9);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v5;
  *(void *)(a1 + 24) = v6;
  *(void *)(a1 + 32) = v7;
  *(void *)(a1 + 40) = v8;
  *(_BYTE *)(a1 + 48) = v9;
  return a1;
}

uint64_t assignWithCopy for JSONError(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 16);
  uint64_t v6 = *(void *)(a2 + 24);
  uint64_t v7 = *(void *)(a2 + 32);
  uint64_t v8 = *(void *)(a2 + 40);
  char v9 = *(_BYTE *)(a2 + 48);
  outlined copy of JSONError(*(void *)a2, v4, v5, v6, v7, v8, v9);
  uint64_t v10 = *(void *)a1;
  uint64_t v11 = *(void *)(a1 + 8);
  uint64_t v12 = *(void *)(a1 + 16);
  uint64_t v13 = *(void *)(a1 + 24);
  uint64_t v14 = *(void *)(a1 + 32);
  uint64_t v15 = *(void *)(a1 + 40);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v5;
  *(void *)(a1 + 24) = v6;
  *(void *)(a1 + 32) = v7;
  *(void *)(a1 + 40) = v8;
  char v16 = *(_BYTE *)(a1 + 48);
  *(_BYTE *)(a1 + 48) = v9;
  outlined consume of JSONError(v10, v11, v12, v13, v14, v15, v16);
  return a1;
}

__n128 __swift_memcpy49_8(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  __int128 v3 = *(_OWORD *)(a2 + 16);
  __int128 v4 = *(_OWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = v4;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for JSONError(uint64_t a1, uint64_t a2)
{
  char v3 = *(_BYTE *)(a2 + 48);
  uint64_t v4 = *(void *)a1;
  uint64_t v6 = *(void *)(a1 + 8);
  uint64_t v5 = *(void *)(a1 + 16);
  uint64_t v7 = *(void *)(a1 + 24);
  uint64_t v8 = *(void *)(a1 + 32);
  uint64_t v9 = *(void *)(a1 + 40);
  __int128 v10 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v10;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  char v11 = *(_BYTE *)(a1 + 48);
  *(_BYTE *)(a1 + 48) = v3;
  outlined consume of JSONError(v4, v6, v5, v7, v8, v9, v11);
  return a1;
}

uint64_t getEnumTagSinglePayload for JSONError(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 >= 0xF4 && *(_BYTE *)(a1 + 49)) {
    return (*(_DWORD *)a1 + 244);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 48);
  if (v3 <= 0xC) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for JSONError(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xF3)
  {
    *(void *)(result + 40) = 0LL;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 48) = 0;
    *(void *)__n128 result = a2 - 244;
    if (a3 >= 0xF4) {
      *(_BYTE *)(result + 49) = 1;
    }
  }

  else
  {
    if (a3 >= 0xF4) {
      *(_BYTE *)(result + 49) = 0;
    }
    if (a2) {
      *(_BYTE *)(result + 48) = -(char)a2;
    }
  }

  return result;
}

uint64_t getEnumTag for JSONError(uint64_t a1)
{
  else {
    return (*(_DWORD *)a1 + 12);
  }
}

uint64_t destructiveInjectEnumTag for JSONError(uint64_t result, unsigned int a2)
{
  if (a2 >= 0xC)
  {
    *(void *)__n128 result = a2 - 12;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(void *)(result + 40) = 0LL;
    LOBYTE(a2) = 12;
  }

  *(_BYTE *)(result + 48) = a2;
  return result;
}

ValueMetadata *type metadata accessor for JSONError()
{
  return &type metadata for JSONError;
}

void JSONScanner.scan()()
{
  if (*(_BYTE *)v0 == 1)
  {
    uint64_t v2 = *(unsigned __int8 **)(v0 + 24);
    unint64_t v3 = *(void *)(v0 + 32);
    while (1)
    {
      unsigned int v4 = *v2;
      if (v4 >= 0x40) {
        break;
      }
      if (((1LL << v4) & 0x100002600LL) != 0)
      {
        *(void *)(v0 + 24) = ++v2;
      }

      goto LABEL_12;
    }

    if (v4 == 123)
    {
      JSONScanner.scanObject()();
      uint64_t v6 = v7;
      if (v7) {
        return;
      }
    }

    else
    {
LABEL_12:
      JSONScanner.scanObject(withoutBraces:)(1);
      uint64_t v6 = v8;
      if (v8) {
        return;
      }
    }
  }

  else
  {
    JSONScanner.scanValue()();
    uint64_t v6 = v5;
    if (v5) {
      return;
    }
  }

  unint64_t v9 = *(void *)(v0 + 24);
  unint64_t v10 = *(void *)(v0 + 32);
  if (v9 < v10)
  {
    uint64_t v11 = 0LL;
    while (1)
    {
      uint64_t v12 = *(unsigned __int8 *)(v9 + v11);
      if (v12 > 0x20 || ((1LL << v12) & 0x100002600LL) == 0)
      {
        unint64_t v22 = specialized static JSONError.SourceLocation.sourceLocation(at:fullSource:)( v9 + v11,  *(void *)(v0 + 8),  *(void *)(v0 + 16));
        uint64_t v24 = v23;
        uint64_t v26 = v25;
        lazy protocol witness table accessor for type JSONError and conformance JSONError();
        swift_allocError();
        *(void *)uint64_t v27 = 0xD000000000000015LL;
        *(void *)(v27 + 8) = 0x80000001839CB510LL;
        *(void *)(v27 + 16) = v12;
        *(void *)(v27 + 24) = v22;
        *(void *)(v27 + 32) = v24;
        *(void *)(v27 + 40) = v26;
        *(_BYTE *)(v27 + 48) = 1;
        swift_willThrow();
        return;
      }

      if (__OFADD__(v11, 1LL)) {
        break;
      }
      unint64_t v14 = v9 + ++v11;
      if (v14 >= v10) {
        goto LABEL_22;
      }
    }

    __break(1u);
    goto LABEL_29;
  }

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> JSONScanner.scanObject()()
{
  unsigned int v1 = (unsigned __int8 *)v0[3];
  if ((unsigned __int8 *)v0[4] == v1)
  {
    __break(1u);
    goto LABEL_7;
  }

  int v2 = *v1;
  v0[3] = v1 + 1;
  if (v2 != 123)
  {
LABEL_7:
    __break(1u);
    return;
  }

  if ((uint64_t)v0[5] > 511)
  {
    unint64_t v3 = specialized static JSONError.SourceLocation.sourceLocation(at:fullSource:)((unint64_t)v1, v0[1], v0[2]);
    uint64_t v5 = v4;
    uint64_t v7 = v6;
    lazy protocol witness table accessor for type JSONError and conformance JSONError();
    swift_allocError();
    *(void *)uint64_t v8 = v3;
    *(void *)(v8 + 8) = v5;
    *(void *)(v8 + 16) = v7;
    *(void *)(v8 + 24) = 0LL;
    *(void *)(v8 + 32) = 0LL;
    *(void *)(v8 + 40) = 0LL;
    *(_BYTE *)(v8 + 48) = 2;
    swift_willThrow();
  }

  else
  {
    JSONScanner.scanObject(withoutBraces:)(0);
  }

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> JSONScanner.scanObject(withoutBraces:)( Swift::Bool withoutBraces)
{
  int v2 = v1;
  ++v1[5];
  uint64_t v4 = (unsigned __int8 *)v1[3];
  unint64_t v5 = v1[4];
  if ((unint64_t)v4 < v5)
  {
    while (1)
    {
      unsigned int v6 = *v4;
      if (v6 >= 0x40) {
        break;
      }
      if (((1LL << v6) & 0x100002600LL) == 0) {
        goto LABEL_11;
      }
      v1[3] = ++v4;
    }

    if (v6 != 125)
    {
LABEL_11:
      Swift::Int count = 0LL;
      unint64_t v14 = v1 + 6;
      int64_t v15 = JSON5Scanner.JSONPartialMapData.recordStartCollection(tagType:with:)( 5u,  (void *)v1[1],  v1[2],  (uint64_t)v4);
      Swift::Bool done = 0;
      while (1)
      {
        JSONScanner._scanObjectLoop(withoutBraces:count:done:)(withoutBraces, &count, &done);
        if (v16) {
          break;
        }
        if (done)
        {
          Swift::Int v17 = count;
          JSON5Scanner.JSONPartialMapData.resizeIfNecessary(with:)((void *)v1[1], v1[2], v1[3]);
          uint64_t v18 = (void *)v1[6];
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            uint64_t v18 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  v18[2] + 1LL,  1,  v18);
          }
          unint64_t v20 = v18[2];
          unint64_t v19 = v18[3];
          unint64_t v21 = v20 + 1;
          if (v20 >= v19 >> 1) {
            uint64_t v18 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (void *)(v19 > 1),  v20 + 1,  1,  v18);
          }
          void v18[2] = v21;
          v18[v20 + 4] = 7LL;
          unint64_t v22 = &v18[v15 + 4];
          *unint64_t v22 = v21;
          v22[1] = v17;
          uint64_t v23 = v2[5] - 1LL;
          v2[6] = v18;
          goto LABEL_27;
        }
      }

      Swift::Int v24 = count;
      JSON5Scanner.JSONPartialMapData.resizeIfNecessary(with:)((void *)v1[1], v1[2], v1[3]);
      uint64_t v25 = (void *)v1[6];
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v25 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  v25[2] + 1LL,  1,  v25);
      }
      unint64_t v26 = v25[2];
      unint64_t v27 = v25[3];
      unint64_t v28 = v26 + 1;
      if (v26 >= v27 >> 1)
      {
        Swift::String v30 = v25;
        unint64_t v31 = v25[2];
        uint64_t v32 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (void *)(v27 > 1),  v26 + 1,  1,  v30);
        unint64_t v26 = v31;
        uint64_t v25 = v32;
      }

      v25[2] = v28;
      v25[v26 + 4] = 7LL;
      uint64_t v29 = &v25[v15 + 4];
      *uint64_t v29 = v28;
      v29[1] = v24;
      *unint64_t v14 = v25;
      goto LABEL_26;
    }

    if (withoutBraces)
    {
      unint64_t v9 = specialized static JSONError.SourceLocation.sourceLocation(at:fullSource:)( (unint64_t)v4,  v1[1],  v1[2]);
      uint64_t v11 = v10;
      uint64_t v13 = v12;
      lazy protocol witness table accessor for type JSONError and conformance JSONError();
      swift_allocError();
      *(void *)uint64_t v7 = 0LL;
      *(void *)(v7 + 8) = 0LL;
      *(void *)(v7 + 16) = 125LL;
      *(void *)(v7 + 24) = v9;
      *(void *)(v7 + 32) = v11;
      *(void *)(v7 + 40) = v13;
      char v8 = 1;
      goto LABEL_10;
    }

    v1[3] = ++v4;
    goto LABEL_25;
  }

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> JSONScanner.scanValue()()
{
  unsigned int v1 = (_BYTE *)v0[3];
  unint64_t v2 = v0[4];
  if ((unint64_t)v1 >= v2)
  {
LABEL_7:
    lazy protocol witness table accessor for type JSONError and conformance JSONError();
    swift_allocError();
    *(void *)uint64_t v5 = 1LL;
    *(_OWORD *)(v5 + 8) = 0u;
    *(_OWORD *)(v5 + 24) = 0u;
    *(void *)(v5 + 40) = 0LL;
    char v6 = 12;
  }

  else
  {
    while (1)
    {
      uint64_t v3 = *v1;
      v0[3] = ++v1;
    }

    switch(*v1)
    {
      case '[':
        JSONScanner.scanArray()();
        return;
      case '\\':
      case ']':
      case '^':
      case '_':
      case 'a':
      case 'b':
      case 'c':
      case 'd':
      case 'e':
      case 'g':
      case 'h':
      case 'i':
      case 'j':
      case 'k':
      case 'l':
      case 'm':
      case 'o':
      case 'p':
      case 'q':
      case 'r':
      case 's':
      case 'u':
      case 'v':
      case 'w':
      case 'x':
      case 'y':
      case 'z':
        goto LABEL_14;
      case 'f':
      case 't':
        JSONScanner.scanBool()();
        return;
      case 'n':
        JSONScanner.scanNull()();
        return;
      case '{':
        JSONScanner.scanObject()();
        return;
      default:
        if ((_DWORD)v3 == 34)
        {
          JSONScanner.scanString()();
          return;
        }

        if ((_DWORD)v3 == 45) {
          goto LABEL_18;
        }
LABEL_14:
        if ((v3 - 58) >= 0xFFFFFFF6)
        {
LABEL_18:
          JSONScanner.scanNumber()();
          return;
        }

        if (v3 <= 0x20 && ((1LL << v3) & 0x100002600LL) != 0)
        {
          __break(1u);
          JUMPOUT(0x18304E4C4LL);
        }

        unint64_t v7 = specialized static JSONError.SourceLocation.sourceLocation(at:fullSource:)( (unint64_t)v1,  v0[1],  v0[2]);
        uint64_t v9 = v8;
        uint64_t v11 = v10;
        lazy protocol witness table accessor for type JSONError and conformance JSONError();
        swift_allocError();
        *(void *)uint64_t v5 = 0LL;
        *(void *)(v5 + 8) = 0LL;
        *(void *)(v5 + 16) = v3;
        *(void *)(v5 + 24) = v7;
        *(void *)(v5 + 32) = v9;
        *(void *)(v5 + 40) = v11;
        char v6 = 1;
        break;
    }
  }

  *(_BYTE *)(v5 + 48) = v6;
  swift_willThrow();
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> JSONScanner.scanString()()
{
  char v9 = 0;
  unint64_t v2 = JSONScanner.DocumentReader.skipUTF8StringTillNextUnescapedQuote(isSimple:)(&v9);
  if (v1) {
    return;
  }
  uint64_t v3 = (unsigned __int8 *)v0[3];
  if ((unsigned __int8 *)v0[4] == v3)
  {
    __break(1u);
    goto LABEL_10;
  }

  int v4 = *v3;
  v0[3] = v3 + 1;
  if (v4 != 34)
  {
LABEL_10:
    __break(1u);
    return;
  }

  uint64_t v5 = v3 - v2;
  char v6 = (unsigned __int8 *)v0[1];
  uint64_t v7 = v2 - v6;
  if (v9) {
    unsigned __int8 v8 = 8;
  }
  else {
    unsigned __int8 v8 = 0;
  }
  JSON5Scanner.JSONPartialMapData.record(tagType:count:dataOffset:with:)(v8, v5, v7, v6, v0[2], (uint64_t)(v3 + 1));
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> JSONScanner.scanArray()()
{
  unint64_t v5 = v1[3];
  unint64_t v6 = v1[4];
  if (v6 == v5)
  {
    __break(1u);
LABEL_70:
    __break(1u);
LABEL_71:
    __break(1u);
LABEL_72:
    uint64_t v1 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (void *)(v5 > 1),  v3,  1,  v1);
    goto LABEL_57;
  }

  uint64_t v0 = v1;
  unint64_t v4 = v5 + 1;
  int v7 = *(unsigned __int8 *)v5;
  v1[3] = v5 + 1;
  if (v7 != 91) {
    goto LABEL_70;
  }
  uint64_t v8 = v1[5];
  if (v8 > 511)
  {
    unint64_t v11 = specialized static JSONError.SourceLocation.sourceLocation(at:fullSource:)(v5 + 2, v1[1], v1[2]);
    uint64_t v13 = v12;
    uint64_t v15 = v14;
    lazy protocol witness table accessor for type JSONError and conformance JSONError();
    swift_allocError();
    *(void *)uint64_t v16 = v11;
    *(void *)(v16 + 8) = v13;
    *(void *)(v16 + 16) = v15;
    *(void *)(v16 + 24) = 0LL;
    *(void *)(v16 + 32) = 0LL;
    *(void *)(v16 + 40) = 0LL;
    *(_BYTE *)(v16 + 48) = 2;
    swift_willThrow();
    return;
  }

  v1[5] = v8 + 1;
  if (v4 >= v6)
  {
LABEL_8:
    lazy protocol witness table accessor for type JSONError and conformance JSONError();
    swift_allocError();
    *(void *)uint64_t v10 = 1LL;
    *(_OWORD *)(v10 + 8) = 0u;
    *(_OWORD *)(v10 + 24) = 0u;
    *(void *)(v10 + 40) = 0LL;
    *(_BYTE *)(v10 + 48) = 12;
    swift_willThrow();
LABEL_48:
    --v1[5];
    return;
  }

  while (1)
  {
    unsigned int v9 = *(unsigned __int8 *)v4;
    if (v9 >= 0x40 || ((0x100002600uLL >> v9) & 1) == 0) {
      break;
    }
    v1[3] = ++v4;
    if (v4 >= v6) {
      goto LABEL_8;
    }
  }

  if (v9 == 93)
  {
    v1[3] = v4 + 1;
    JSON5Scanner.JSONPartialMapData.recordEmptyCollection(tagType:with:)(6u, (void *)v1[1], v1[2], v4 + 1);
    goto LABEL_48;
  }

  BOOL v17 = v9 > 0x20;
  uint64_t v18 = (1LL << v9) & 0x100002600LL;
  if (!v17 && v18 != 0)
  {
LABEL_73:
    __break(1u);
    goto LABEL_74;
  }

  int64_t v3 = (int64_t)(v1 + 6);
  int64_t v2 = JSON5Scanner.JSONPartialMapData.recordStartCollection(tagType:with:)(6u, (void *)v1[1], v1[2], v4);
  if (v4 >= v6)
  {
    unint64_t v6 = 0LL;
LABEL_50:
    lazy protocol witness table accessor for type JSONError and conformance JSONError();
    swift_allocError();
    *(void *)uint64_t v27 = 1LL;
    *(_OWORD *)(v27 + 8) = 0u;
    *(_OWORD *)(v27 + 24) = 0u;
    *(void *)(v27 + 40) = 0LL;
    char v28 = 12;
    goto LABEL_51;
  }

  unint64_t v6 = 0LL;
  while (2)
  {
    while (1)
    {
      uint64_t v20 = *(unsigned __int8 *)v4;
      unint64_t v22 = v0[4];
      unint64_t v4 = v0[3] + 1LL;
      v0[3] = v4;
      if (v4 >= v22) {
        goto LABEL_50;
      }
    }

    switch(*(_BYTE *)v4)
    {
      case '[':
        uint64_t v1 = v0;
        JSONScanner.scanArray()();
        goto LABEL_32;
      case '\\':
      case ']':
      case '^':
      case '_':
      case 'a':
      case 'b':
      case 'c':
      case 'd':
      case 'e':
      case 'g':
      case 'h':
      case 'i':
      case 'j':
      case 'k':
      case 'l':
      case 'm':
      case 'o':
      case 'p':
      case 'q':
      case 'r':
      case 's':
      case 'u':
      case 'v':
      case 'w':
      case 'x':
      case 'y':
      case 'z':
        goto LABEL_26;
      case 'f':
      case 't':
        uint64_t v1 = v0;
        JSONScanner.scanBool()();
        goto LABEL_32;
      case 'n':
        uint64_t v1 = v0;
        JSONScanner.scanNull()();
        goto LABEL_32;
      case '{':
        uint64_t v1 = v0;
        JSONScanner.scanObject()();
        goto LABEL_32;
      default:
        if ((_DWORD)v20 != 34)
        {
          if ((_DWORD)v20 == 45)
          {
LABEL_27:
            uint64_t v1 = v0;
            JSONScanner.scanNumber()();
            goto LABEL_32;
          }

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> JSONScanner.scanNull()()
{
  int64_t v2 = (_BYTE *)v0[3];
  unint64_t v3 = v0[4];
  if (v3 < (unint64_t)v2)
  {
    __break(1u);
    goto LABEL_23;
  }

  if ((uint64_t)(v3 - (void)v2) <= 3)
  {
    lazy protocol witness table accessor for type JSONError and conformance JSONError();
    swift_allocError();
    *(void *)uint64_t v4 = 1LL;
    *(_OWORD *)(v4 + 8) = 0u;
    *(_OWORD *)(v4 + 24) = 0u;
    *(void *)(v4 + 40) = 0LL;
    char v5 = 12;
LABEL_21:
    *(_BYTE *)(v4 + 48) = v5;
    swift_willThrow();
    return;
  }

  uint64_t v1 = v0;
  if (*(_DWORD *)v2 != 1819047278)
  {
    if ((((v0[1] + v0[2] - v3) | (unint64_t)&v2[-v0[1]]) & 0x8000000000000000LL) == 0)
    {
      if (*v2 == 110)
      {
        if (v2[1] == 117)
        {
          if (v2[2] == 108)
          {
            uint64_t v6 = 3LL;
            if (v2[3] == 108) {
              uint64_t v6 = 0LL;
            }
          }

          else
          {
            uint64_t v6 = 2LL;
          }
        }

        else
        {
          uint64_t v6 = 1LL;
        }
      }

      else
      {
        uint64_t v6 = 0LL;
      }

      uint64_t v12 = &v2[v6];
      v0[3] = &v2[v6];
      v20[0] = 0LL;
      v20[1] = 0xE000000000000000LL;
      uint64_t v0 = v20;
      _StringGuts.grow(_:)(20LL);
      swift_bridgeObjectRelease();
      if ((unint64_t)v12 < v1[4])
      {
        uint64_t v13 = *v12;
        unint64_t v14 = specialized static JSONError.SourceLocation.sourceLocation(at:fullSource:)( (unint64_t)v12,  v1[1],  v1[2]);
        uint64_t v16 = v15;
        uint64_t v18 = v17;
        lazy protocol witness table accessor for type JSONError and conformance JSONError();
        swift_allocError();
        *(void *)uint64_t v4 = 0xD000000000000016LL;
        *(void *)(v4 + 8) = 0x80000001839CB590LL;
        *(void *)(v4 + 16) = v13;
        *(void *)(v4 + 24) = v14;
        *(void *)(v4 + 32) = v16;
        *(void *)(v4 + 40) = v18;
        char v5 = 1;
        goto LABEL_21;
      }

      goto LABEL_24;
    }

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> JSONScanner.scanBool()()
{
  uint64_t v1 = (unsigned __int8 *)v0[3];
  int64_t v2 = (unsigned __int8 *)v0[4];
  if (v2 != v1)
  {
    unint64_t v3 = v0;
    uint64_t v4 = v1 + 1;
    int v5 = *v1;
    v0[3] = (uint64_t)(v1 + 1);
    if (v5 == 116)
    {
      if (v2 >= v4)
      {
        if (v2 - v4 > 2)
        {
          BOOL v6 = *(_WORD *)v4 == 30066 && v1[3] == 101;
          if (v6)
          {
            v0[3] = (uint64_t)(v1 + 4);
            unint64_t v11 = (void *)v0[1];
            uint64_t v12 = v0[2];
            v0 += 6;
            JSON5Scanner.JSONPartialMapData.resizeIfNecessary(with:)(v11, v12, (uint64_t)(v1 + 4));
            unint64_t v3 = (uint64_t *)v3[6];
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
            {
LABEL_26:
              unint64_t v14 = v3[2];
              unint64_t v13 = v3[3];
              unint64_t v15 = v14 + 1;
              if (v14 >= v13 >> 1)
              {
                unint64_t v34 = v14 + 1;
                uint64_t v30 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (void *)(v13 > 1),  v14 + 1,  1,  v3);
                unint64_t v15 = v34;
                unint64_t v3 = v30;
              }

              _OWORD v3[2] = v15;
              uint64_t v16 = &v3[v14];
              uint64_t v17 = 3LL;
LABEL_34:
              v16[4] = v17;
              *uint64_t v0 = (uint64_t)v3;
              return;
            }

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> JSONScanner.scanNumber()()
{
  uint64_t v1 = (unsigned __int8 *)v0[3];
  int64_t v2 = (unsigned __int8 *)v0[4];
  if (v2 == v1)
  {
    __break(1u);
LABEL_21:
    __break(1u);
    return;
  }

  unint64_t v3 = v1 + 1;
  int v4 = *v1;
  v0[3] = v1 + 1;
  if (v3 >= v2)
  {
LABEL_18:
    unsigned __int8 v9 = 1;
  }

  else
  {
    char v6 = 0;
    while (1)
    {
      while (1)
      {
        int v7 = *v3;
        if ((v7 - 58) <= 0xFFFFFFF5)
        {
          unsigned int v8 = v7 - 43;
          if (v8 > 0x3A) {
            goto LABEL_16;
          }
          if (((1LL << v8) & 0xD) == 0) {
            break;
          }
        }

        v0[3] = ++v3;
        if (v3 >= v2) {
          goto LABEL_16;
        }
      }

      if (((1LL << v8) & 0x400000004000000LL) == 0) {
        break;
      }
      v0[3] = ++v3;
      char v6 = 1;
      if (v3 >= v2) {
        goto LABEL_17;
      }
    }

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> JSONScanner._scanObjectLoop(withoutBraces:count:done:)( Swift::Bool withoutBraces, Swift::Int *count, Swift::Bool *done)
{
  if (!v7)
  {
    unsigned int v8 = (unsigned __int8 *)v3[3];
    unint64_t v9 = v3[4];
    if ((unint64_t)v8 >= v9)
    {
LABEL_6:
      lazy protocol witness table accessor for type JSONError and conformance JSONError();
      swift_allocError();
      *(void *)uint64_t v11 = 1LL;
      *(_OWORD *)(v11 + 8) = 0u;
      *(_OWORD *)(v11 + 24) = 0u;
      *(void *)(v11 + 40) = 0LL;
      char v12 = 12;
LABEL_18:
      *(_BYTE *)(v11 + 48) = v12;
      swift_willThrow();
    }

    else
    {
      while (1)
      {
        uint64_t v10 = *v8;
        if (((1LL << v10) & 0x100002600LL) == 0) {
          break;
        }
        v3[3] = ++v8;
      }

      if ((_DWORD)v10 != 58)
      {
LABEL_16:
        unint64_t v17 = specialized static JSONError.SourceLocation.sourceLocation(at:fullSource:)( (unint64_t)v8,  v3[1],  v3[2]);
        uint64_t v19 = v18;
        uint64_t v21 = v20;
        lazy protocol witness table accessor for type JSONError and conformance JSONError();
        swift_allocError();
        *(_OWORD *)uint64_t v11 = xmmword_1837301B0;
        *(void *)(v11 + 16) = v10;
        goto LABEL_17;
      }

      v3[3] = v8 + 1;
      JSONScanner.scanValue()();
      if (v13) {
        return;
      }
      if (!__OFADD__(*count, 2LL))
      {
        *count += 2LL;
        unint64_t v14 = (unsigned __int8 *)v3[3];
        unint64_t v15 = v3[4];
        while (1)
        {
          uint64_t v16 = *v14;
          v3[3] = ++v14;
        }

        if ((_DWORD)v16 == 125)
        {
LABEL_28:
          if (!withoutBraces)
          {
            v3[3] = v14 + 1;
LABEL_31:
            *Swift::Bool done = 1;
            return;
          }

          unint64_t v17 = specialized static JSONError.SourceLocation.sourceLocation(at:fullSource:)( (unint64_t)v14,  v3[1],  v3[2]);
          uint64_t v19 = v25;
          uint64_t v21 = v26;
          lazy protocol witness table accessor for type JSONError and conformance JSONError();
          swift_allocError();
          *(void *)uint64_t v11 = 0LL;
          *(void *)(v11 + 8) = 0LL;
          *(void *)(v11 + 16) = 125LL;
        }

        else
        {
          if ((_DWORD)v16 == 44)
          {
            while (1)
            {
              v3[3] = ++v14;
              unsigned int v22 = *v14;
              if (v22 >= 0x40)
              {
                if (v22 != 125) {
                  return;
                }
                goto LABEL_28;
              }

              if (((0x100002600uLL >> v22) & 1) == 0) {
                return;
              }
            }

unsigned __int8 *JSONScanner.DocumentReader.skipUTF8StringTillNextUnescapedQuote(isSimple:)(_BYTE *a1)
{
  int64_t v2 = (unsigned __int8 *)v1[2];
  unint64_t v3 = (unsigned __int8 *)v1[3];
  if (v3 == v2) {
    goto LABEL_22;
  }
  unsigned int v5 = *v2++;
  uint64_t v4 = v5;
  v1[2] = (unint64_t)v2;
  if (v5 != 34LL)
  {
    unint64_t v9 = specialized static JSONError.SourceLocation.sourceLocation(at:fullSource:)((unint64_t)v2, *v1, v1[1]);
    int64_t v2 = v10;
    uint64_t v12 = v11;
    lazy protocol witness table accessor for type JSONError and conformance JSONError();
    swift_allocError();
    *(void *)uint64_t v13 = 0LL;
    *(void *)(v13 + 8) = 0LL;
    *(void *)(v13 + 16) = v4;
    *(void *)(v13 + 24) = v9;
    *(void *)(v13 + 32) = v2;
    *(void *)(v13 + 40) = v12;
    char v14 = 1;
    goto LABEL_23;
  }

  __n128 result = (unsigned __int8 *)JSONScanner.DocumentReader.skipUTF8StringTillQuoteOrBackslashOrInvalidCharacter()();
  if (v8) {
    return v2;
  }
  if (result == 34)
  {
    *a1 = 1;
    return v2;
  }

  unint64_t v15 = (unsigned __int8 *)v1[2];
  if (v15 >= v3)
  {
LABEL_22:
    lazy protocol witness table accessor for type JSONError and conformance JSONError();
    swift_allocError();
    *(void *)uint64_t v13 = 1LL;
    *(_OWORD *)(v13 + 8) = 0u;
    *(_OWORD *)(v13 + 24) = 0u;
    *(void *)(v13 + 40) = 0LL;
    char v14 = 12;
LABEL_23:
    *(_BYTE *)(v13 + 48) = v14;
LABEL_24:
    swift_willThrow();
    return v2;
  }

  while (1)
  {
    int v18 = *v15;
    if (v18 != 92)
    {
      if (v18 == 34)
      {
        *a1 = 0;
        return v2;
      }

      uint64_t v16 = v15 + 1;
      v1[2] = (unint64_t)(v15 + 1);
      unint64_t v17 = (unsigned __int8 *)v1[3];
      goto LABEL_11;
    }

    unint64_t v17 = (unsigned __int8 *)v1[3];
    if (v17 == v15) {
      break;
    }
    v1[2] = (unint64_t)(v15 + 1);
    if (v17 == v15 + 1) {
      goto LABEL_22;
    }
    int v19 = v15[1];
    uint64_t v16 = v15 + 2;
    v1[2] = (unint64_t)(v15 + 2);
    if (v19 == 117)
    {
      if (v17 - v16 <= 3)
      {
        lazy protocol witness table accessor for type JSONError and conformance JSONError();
        swift_allocError();
        *(void *)uint64_t v22 = 1LL;
        *(_OWORD *)(v22 + 8) = 0u;
        *(_OWORD *)(v22 + 24) = 0u;
        *(void *)(v22 + 40) = 0LL;
        char v23 = 12;
LABEL_29:
        *(_BYTE *)(v22 + 48) = v23;
        goto LABEL_24;
      }

      unint64_t v20 = (unint64_t)&v16[-*v1];
      uint64_t v21 = (char *)(v20 + 4);
      if (__OFADD__(v20, 4LL)) {
        goto LABEL_31;
      }
      if ((~(((*(_DWORD *)v16 & 0x7F7F7F7F ^ 0x22222222) + 2139062143) | *(_DWORD *)v16) & 0x80808080) != 0)
      {
        int64_t v2 = (unsigned __int8 *)static String._fromUTF8Repairing(_:)();
        uint64_t v25 = v24;
        unint64_t v26 = specialized static JSONError.SourceLocation.sourceLocation(at:fullSource:)(v1[2], *v1, v1[1]);
        uint64_t v28 = v27;
        uint64_t v30 = v29;
        lazy protocol witness table accessor for type JSONError and conformance JSONError();
        swift_allocError();
        *(void *)uint64_t v22 = v2;
        *(void *)(v22 + 8) = v25;
        *(void *)(v22 + 16) = v26;
        *(void *)(v22 + 24) = v28;
        *(void *)(v22 + 32) = v30;
        *(void *)(v22 + 40) = 0LL;
        char v23 = 3;
        goto LABEL_29;
      }

      uint64_t v16 = v15 + 6;
      v1[2] = (unint64_t)(v15 + 6);
    }

Swift::UInt8 __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> JSONScanner.DocumentReader.skipUTF8StringTillQuoteOrBackslashOrInvalidCharacter()()
{
  uint64_t v1 = *(unsigned __int8 **)(v0 + 16);
  unint64_t v2 = *(void *)(v0 + 24);
  if ((unint64_t)v1 >= v2)
  {
LABEL_6:
    lazy protocol witness table accessor for type JSONError and conformance JSONError();
    swift_allocError();
    *(void *)uint64_t v4 = 1LL;
    *(_OWORD *)(v4 + 8) = 0u;
    *(_OWORD *)(v4 + 24) = 0u;
    *(void *)(v4 + 40) = 0LL;
    *(_BYTE *)(v4 + 48) = 12;
    swift_willThrow();
    LOBYTE(__swift_mutable_project_boxed_opaque_existential_1((uint64_t)v2, v3) = 0;
  }

  else
  {
    while (1)
    {
      unsigned int v3 = *v1;
      if (v3 == 34 || v3 == 92 || v3 < 0x20) {
        break;
      }
      *(void *)(v0 + 16) = ++v1;
    }
  }

  return v3;
}

uint64_t static JSONScanner.stringValue(from:fullSource:)( unint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v8 = (_BYTE *)(a1 + a2);
  unint64_t v9 = (_BYTE *)a1;
  if (a2 >= 1)
  {
    do
    {
      unsigned int v10 = *v9;
      if (v10 == 92) {
        break;
      }
      if (v10 < 0x20) {
        break;
      }
      ++v9;
    }

    while (v9 < v8);
    if ((unint64_t)v9 < a1)
    {
      __break(1u);
      return v19[0];
    }
  }

  uint64_t result = static String._tryFromUTF8(_:)();
  if (v12)
  {
    v19[0] = result;
    v19[1] = v12;
    if (v8 != v9)
    {
      if (v8 < v9)
      {
        __break(1u);
        return result;
      }

      specialized static JSONScanner._slowpath_stringValue(from:appendingTo:fullSource:)(v9, v8 - v9, v19, a3, a4);
      if (v4) {
        return swift_bridgeObjectRelease();
      }
      return v19[0];
    }
  }

  else
  {
    unint64_t v13 = specialized static JSONError.SourceLocation.sourceLocation(at:fullSource:)(a1, a3, a4);
    uint64_t v15 = v14;
    uint64_t v17 = v16;
    lazy protocol witness table accessor for type JSONError and conformance JSONError();
    swift_allocError();
    *(void *)uint64_t v18 = v13;
    *(void *)(v18 + 8) = v15;
    *(void *)(v18 + 16) = v17;
    *(void *)(v18 + 24) = 0LL;
    *(void *)(v18 + 32) = 0LL;
    *(void *)(v18 + 40) = 0LL;
    *(_BYTE *)(v18 + 48) = 0;
    return swift_willThrow();
  }

  return result;
}

uint64_t specialized RangeReplaceableCollection.init<A>(_:)@<X0>(void *a1@<X8>)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v23 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1895F8858](AssociatedTypeWitness);
  uint64_t v4 = (char *)&v22 - v3;
  AttributedString.UnicodeScalarView.init()((uint64_t)a1);
  dispatch thunk of Sequence.makeIterator()();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v25 = v4;
  uint64_t v26 = AssociatedTypeWitness;
  uint64_t v24 = AssociatedConformanceWitness;
  uint64_t result = dispatch thunk of IteratorProtocol.next()();
  if ((v32 & 1) != 0) {
    return (*(uint64_t (**)(char *, uint64_t))(v23 + 8))(v25, v26);
  }
  while (a1[5] >> 10 >= a1[1] >> 10)
  {
    int v30 = v31;
    uint64_t v7 = (_OWORD *)*a1;
    __int128 v8 = *(_OWORD *)(*a1 + 32LL);
    __int128 v39 = *(_OWORD *)(*a1 + 16LL);
    __int128 v40 = v8;
    __int128 v41 = v7[3];
    BigString.unicodeScalars.getter();
    uint64_t v9 = BigString.UnicodeScalarView.index(roundingDown:)();
    unint64_t v28 = v10;
    unint64_t v29 = v9;
    unint64_t v12 = v11;
    unint64_t v27 = v13;
    outlined release of Locale((uint64_t)&v33);
    __int128 v14 = v7[2];
    __int128 v36 = v7[1];
    __int128 v37 = v14;
    __int128 v38 = v7[3];
    BigString.unicodeScalars.getter();
    uint64_t v15 = BigString.UnicodeScalarView.index(roundingDown:)();
    unint64_t v17 = v16;
    unint64_t v19 = v18;
    unint64_t v21 = v20;
    outlined release of Locale((uint64_t)&v34);
    v35[0] = v29;
    v35[1] = v28;
    v35[2] = v12;
    v35[3] = v27;
    v35[4] = v15;
    v35[5] = v17;
    v35[6] = v19;
    v35[7] = v21;
    specialized AttributedString.UnicodeScalarView._replaceSubrange<A>(_:with:)(v35, v30);
    uint64_t result = dispatch thunk of IteratorProtocol.next()();
    if (v32 == 1) {
      return (*(uint64_t (**)(char *, uint64_t))(v23 + 8))(v25, v26);
    }
  }

  __break(1u);
  return result;
}

uint64_t specialized RangeReplaceableCollection.init<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v56 = a1;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v4 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1895F8858](AssociatedTypeWitness);
  char v6 = (char *)v50 - v5;
  BigString.init()();
  v62[0] = 0LL;
  MEMORY[0x186E20E78](v62, 8LL);
  unint64_t v7 = v62[0];
  type metadata accessor for AttributedString.Guts();
  uint64_t v8 = swift_allocObject();
  uint64_t result = BigString.isEmpty.getter();
  if ((result & 1) != 0)
  {
    v50[0] = v4;
    __int128 v10 = v60;
    *(_OWORD *)(v8 + 16) = v59;
    *(_OWORD *)(v8 + 32) = v10;
    *(_OWORD *)(v8 + 48) = v61;
    *(void *)(v8 + 64) = 0LL;
    *(void *)(v8 + 72) = 0LL;
    *(void *)(v8 + 80) = 0LL;
    *(void *)(v8 + 88) = v7;
    uint64_t v11 = BigString.startIndex.getter();
    uint64_t v51 = v6;
    uint64_t v52 = AssociatedTypeWitness;
    uint64_t v12 = v11;
    uint64_t v14 = v13;
    uint64_t v16 = v15;
    uint64_t v18 = v17;
    uint64_t v19 = BigString.endIndex.getter();
    *a2 = v8;
    a2[1] = v12;
    a2[2] = v14;
    a2[3] = v16;
    unint64_t v21 = v51;
    uint64_t v20 = v52;
    a2[4] = v18;
    a2[5] = v19;
    a2[6] = v22;
    a2[7] = v23;
    a2[8] = v24;
    a2[9] = 0LL;
    dispatch thunk of Sequence.makeIterator()();
    v50[1] = swift_getAssociatedConformanceWitness();
    while (1)
    {
      uint64_t result = dispatch thunk of IteratorProtocol.next()();
      uint64_t v25 = v58;
      if (!v58) {
        return (*(uint64_t (**)(char *, uint64_t))(v50[0] + 8LL))(v21, v20);
      }
      unint64_t v26 = a2[5];
      uint64_t v56 = v57;
      uint64_t v27 = a2[7];
      uint64_t v28 = a2[8];
      uint64_t v29 = a2[6];
      int v30 = (_OWORD *)*a2;
      __int128 v31 = *(_OWORD *)(*a2 + 16);
      __int128 v32 = *(_OWORD *)(*a2 + 48);
      v64[1] = *(_OWORD *)(*a2 + 32);
      v64[2] = v32;
      v64[0] = v31;
      __int128 v33 = v30[1];
      v65[1] = v30[2];
      v65[2] = v32;
      v65[0] = v33;
      outlined init with take of any PredicateExpression<Self.Output == B1>(v65, (uint64_t)v66);
      outlined retain of Locale((uint64_t)v66);
      uint64_t v34 = MEMORY[0x186E1AE90](v26, v29, v27, v28);
      unint64_t v54 = v35;
      unint64_t v55 = v34;
      unint64_t v37 = v36;
      unint64_t v53 = v38;
      outlined release of Locale((uint64_t)v64);
      __int128 v39 = v30[1];
      __int128 v40 = v30[3];
      v63[1] = v30[2];
      v63[2] = v40;
      v63[0] = v39;
      __int128 v41 = v30[1];
      v67[1] = v30[2];
      void v67[2] = v40;
      v67[0] = v41;
      outlined init with take of any PredicateExpression<Self.Output == B1>(v67, (uint64_t)v68);
      outlined retain of Locale((uint64_t)v68);
      uint64_t v42 = v28;
      unint64_t v21 = v51;
      uint64_t v43 = MEMORY[0x186E1AE90](v26, v29, v27, v42);
      unint64_t v45 = v44;
      unint64_t v47 = v46;
      unint64_t v49 = v48;
      outlined release of Locale((uint64_t)v63);
      v62[0] = v55;
      v62[1] = v37;
      v62[2] = v54;
      v62[3] = v53;
      v62[4] = v43;
      v62[5] = v45;
      v62[6] = v47;
      v62[7] = v49;
      uint64_t v20 = v52;
      specialized AttributedString.CharacterView._replaceSubrange<A>(_:with:)(v62, v56, v25);
      swift_bridgeObjectRelease();
    }

    __break(1u);
  }

  __break(1u);
  return result;
}

void closure #1 in Double.init(prevalidatedBuffer:)(const char *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  v10[1] = *(char **)MEMORY[0x1895F89C0];
  v10[0] = 0LL;
  double v6 = _stringshims_strtod_l(a1, v10, 0LL);
  if (v10[0]) {
    BOOL v7 = &a1[a2] == v10[0];
  }
  else {
    BOOL v7 = 0;
  }
  char v8 = !v7;
  double v9 = v6;
  if (!v7) {
    double v9 = 0.0;
  }
  *(double *)a3 = v9;
  *(_BYTE *)(a3 + 8) = v8;
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance JSONError.SourceLocation( void *a1, void *a2)
{
  return *a1 == *a2 && a1[1] == a2[1] && a1[2] == a2[2];
}

void JSONError.debugDescription.getter()
{
  __asm { BR              X10 }

uint64_t sub_18304FF44()
{
  v0._uint64_t countAndFlagsBits = 0xD00000000000002FLL;
  v0._uint64_t object = (void *)0x80000001839CB8F0LL;
  String.append(_:)(v0);
  v1._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v1);
  swift_bridgeObjectRelease();
  v2._uint64_t countAndFlagsBits = 0x6E6D756C6F63202CLL;
  v2._uint64_t object = (void *)0xE900000000000020LL;
  String.append(_:)(v2);
  v3._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v3);
  swift_bridgeObjectRelease();
  v4._uint64_t countAndFlagsBits = 46LL;
  v4._uint64_t object = (void *)0xE100000000000000LL;
  String.append(_:)(v4);
  return 0LL;
}

double JSONError.sourceLocation.getter()
{
  switch(v3)
  {
    case 0:
    case 4:
    case 8:
    case 9:
    case 10:
      double result = *(double *)v2;
      break;
    case 1:
      double result = *(double *)&v2[3];
      break;
    case 2:
      double result = *(double *)v2;
      break;
    case 3:
    case 5:
      double result = *(double *)&v2[2];
      break;
    case 6:
    case 7:
      double result = *(double *)&v2[1];
      break;
    default:
      double result = 0.0;
      break;
  }

  return result;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance JSONError( uint64_t a1, uint64_t a2)
{
  specialized static JSONError.== infix(_:_:)((uint64_t)v5, (uint64_t)v6);
  return v3 & 1;
}

uint64_t specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(uint64_t a1, uint64_t a2)
{
  return *(unsigned __int8 *)(a2 + a1);
}

void specialized static JSONError.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  __asm { BR              X10 }

BOOL sub_183050880()
{
  uint64_t v2 = v10;
  uint64_t v3 = v11;
  outlined init with take of JSONError(v1, (uint64_t)v8);
  return !v9 && v0 == v8[0] && v2 == v8[1] && v3 == v8[2];
}

unint64_t specialized static JSONError.SourceLocation.sourceLocation(at:fullSource:)( unint64_t result, unint64_t a2, uint64_t a3)
{
  if (result < a2 || (v3 = result, unint64_t v4 = a2 + a3, a2 + a3 < result))
  {
LABEL_29:
    __break(1u);
LABEL_30:
    __break(1u);
LABEL_31:
    __break(1u);
LABEL_32:
    __break(1u);
  }

  else
  {
    if (v4 >= result + 1) {
      unint64_t v4 = result + 1;
    }
    if (v4 <= a2)
    {
      return 1LL;
    }

    else
    {
      uint64_t v5 = -(uint64_t)a2;
      uint64_t v6 = a3 + a2;
      double result = 1LL;
LABEL_7:
      while (2)
      {
        uint64_t v7 = 0LL;
        uint64_t v8 = 0LL;
        uint64_t v9 = v6 - a2;
        while (1)
        {
          if ((uint64_t)(v5 + a2 + v8) < 0 || v9 + v7 < 1)
          {
            __break(1u);
LABEL_28:
            __break(1u);
            goto LABEL_29;
          }

          int v10 = *(unsigned __int8 *)(a2 + v8);
          if (v10 == 10)
          {
            BOOL v11 = __OFADD__(result++, 1LL);
            if (v11) {
              goto LABEL_30;
            }
            a2 += v8 + 1;
            if (a2 < v4) {
              goto LABEL_7;
            }
            return result;
          }

          if (v10 == 13) {
            break;
          }
          if (__OFADD__(v8, 1LL)) {
            goto LABEL_28;
          }
          ++v8;
          --v7;
          if (a2 + v8 >= v4) {
            return result;
          }
        }

        uint64_t v12 = a2 + v8;
        if (a2 + v8 + 1 <= v3)
        {
          if (((v5 + a2 + v8 + 1) & 0x8000000000000000LL) != 0 || ~v8 + v9 < 1) {
            goto LABEL_32;
          }
          if (*(_BYTE *)(v12 + 1) == 10) {
            uint64_t v12 = a2 + v8 + 1;
          }
        }

        BOOL v11 = __OFADD__(result++, 1LL);
        if (v11) {
          goto LABEL_31;
        }
        a2 = v12 + 1;
        if (v12 + 1 < v4) {
          continue;
        }
        break;
      }
    }
  }

  return result;
}

unint64_t specialized RangeReplaceableCollection.init<A>(_:)(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return 0LL;
  }
  uint64_t v2 = a1;
  LODWORD(a1) = 0;
  int v3 = 0;
  unint64_t v4 = (unsigned __int16 *)(v2 + 32);
  uint64_t v5 = v1;
  do
  {
    int v6 = *v4++;
    a1 = ((-65535 << (v3 & 0x10)) - 1) & a1 | (v6 << (v3 & 0x10));
    v3 += 16;
    --v5;
  }

  while (v5);
  return a1 & 0xFFFFFF0FFFFFFFFFLL | ((unint64_t)(v1 & 0xF) << 36);
}

unint64_t specialized static JSONScanner.parseUnicodeSequence(from:into:fullSource:allowNulls:)( unint64_t result, uint64_t a2, uint64_t *a3, unint64_t a4, uint64_t a5, char a6)
{
  if (a2 < 4)
  {
    __break(1u);
LABEL_42:
    unint64_t v39 = v8;
LABEL_38:
    unint64_t v40 = specialized static JSONError.SourceLocation.sourceLocation(at:fullSource:)(v39, v7, v6);
    BOOL v11 = v41;
    uint64_t v43 = v42;
    lazy protocol witness table accessor for type JSONError and conformance JSONError();
    swift_allocError();
    *(void *)uint64_t v19 = v40;
    *(void *)(v19 + 8) = v11;
    *(void *)(v19 + 16) = v43;
    *(void *)(v19 + 24) = 0LL;
    *(void *)(v19 + 32) = 0LL;
    *(void *)(v19 + 40) = 0LL;
    char v20 = 8;
    goto LABEL_33;
  }

  uint64_t v6 = a5;
  unint64_t v7 = a4;
  unint64_t v8 = result;
  unsigned __int16 v10 = 0;
  BOOL v11 = (unsigned __int8 *)(result + 4);
  uint64_t v12 = (unsigned __int8 *)result;
  do
  {
    int v13 = *v12;
    unsigned __int8 v14 = v13 - 48;
    if ((v13 - 48) >= 0xA)
    {
      if ((v13 - 65) < 6)
      {
        unsigned __int8 v14 = v13 - 55;
      }

      else
      {
        unsigned __int8 v14 = v13 - 87;
      }
    }

    if (v10 > 0xFFFu) {
      goto LABEL_32;
    }
    unsigned __int16 v10 = 16 * v10 + v14;
    ++v12;
  }

  while (v12 < v11);
  if ((a6 & 1) == 0 && !v10)
  {
    unint64_t v15 = specialized static JSONError.SourceLocation.sourceLocation(at:fullSource:)(result, a4, a5);
    BOOL v11 = v16;
    uint64_t v18 = v17;
    lazy protocol witness table accessor for type JSONError and conformance JSONError();
    swift_allocError();
    *(void *)uint64_t v19 = v15;
    *(void *)(v19 + 8) = v11;
    *(void *)(v19 + 16) = v18;
    *(void *)(v19 + 24) = 0LL;
    *(void *)(v19 + 32) = 0LL;
    *(void *)(v19 + 40) = 0LL;
    char v20 = 4;
    goto LABEL_33;
  }

  if (v10 >> 10 != 54)
  {
    if (v10 >> 11 != 27)
    {
      uint64_t v44 = *a3;
      uint64_t v45 = a3[1];
LABEL_40:
      String.UnicodeScalarView.append(_:)();
      *a3 = v44;
      a3[1] = v45;
      return (unint64_t)v11;
    }

    unint64_t v35 = specialized static JSONError.SourceLocation.sourceLocation(at:fullSource:)(result, a4, a5);
    BOOL v11 = v36;
    uint64_t v38 = v37;
    lazy protocol witness table accessor for type JSONError and conformance JSONError();
    swift_allocError();
    *(void *)uint64_t v19 = v35;
    *(void *)(v19 + 8) = v11;
    *(void *)(v19 + 16) = v38;
    *(void *)(v19 + 24) = v10;
    *(void *)(v19 + 32) = 0LL;
    *(void *)(v19 + 40) = 0LL;
    char v20 = 9;
LABEL_33:
    *(_BYTE *)(v19 + 48) = v20;
    swift_willThrow();
    return (unint64_t)v11;
  }

  if (((a2 - 4) & 0x8000000000000000LL) == 0)
  {
    if (a2 - 4 >= 2 && *v11 == 92 && *(_BYTE *)(result + 5) == 117)
    {
      unint64_t v21 = a2 - 6;
      if (a2 - 6 >= 4) {
        uint64_t v22 = 4LL;
      }
      else {
        uint64_t v22 = a2 - 6;
      }
      if (v21 >= 4)
      {
        unsigned __int16 v23 = 0;
        unint64_t v8 = result + 6;
        BOOL v11 = (unsigned __int8 *)(result + 6 + v22);
        uint64_t v24 = (unsigned __int8 *)(result + 6);
        while (1)
        {
          int v25 = *v24;
          unsigned __int8 v26 = v25 - 48;
          if ((v25 - 48) >= 0xA)
          {
            if ((v25 - 65) < 6)
            {
              unsigned __int8 v26 = v25 - 55;
            }

            else
            {
              unsigned __int8 v26 = v25 - 87;
            }
          }

          if (v23 > 0xFFFu) {
            break;
          }
          unsigned __int16 v23 = 16 * v23 + v26;
          if (++v24 >= v11)
          {
            unsigned __int16 v46 = v23;
            if (v23 >> 10 != 55) {
              goto LABEL_42;
            }
            __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<UInt16>);
            uint64_t inited = swift_initStackObject();
            *(_OWORD *)(inited + 16) = xmmword_1837232D0;
            *(_WORD *)(inited + 32) = v10;
            *(_WORD *)(inited + 34) = v46;
            specialized RangeReplaceableCollection.init<A>(_:)(inited);
            swift_setDeallocating();
            uint64_t v44 = *a3;
            uint64_t v45 = a3[1];
            goto LABEL_40;
          }
        }

unint64_t specialized static JSONScanner.parseEscapeSequence(from:into:fullSource:)( _BYTE *a1, uint64_t a2, uint64_t *a3, unint64_t a4, uint64_t a5)
{
  if (!a2)
  {
    __break(1u);
    JUMPOUT(0x183051360LL);
  }

  uint64_t v6 = *a1;
  switch(*a1)
  {
    case '""':
      goto LABEL_11;
    case '/':
      uint64_t v6 = 47LL;
      goto LABEL_11;
    case '\\':
      uint64_t v6 = 92LL;
      goto LABEL_11;
    case 'b':
      uint64_t v6 = 8LL;
      goto LABEL_11;
    case 'f':
      uint64_t v6 = 12LL;
      goto LABEL_11;
    case 'n':
      uint64_t v6 = 10LL;
      goto LABEL_11;
    case 'r':
      uint64_t v6 = 13LL;
      goto LABEL_11;
    case 't':
      uint64_t v6 = 9LL;
LABEL_11:
      v14._uint64_t countAndFlagsBits = v6;
      v14._uint64_t object = (void *)0xE100000000000000LL;
      String.append(_:)(v14);
      unint64_t result = (unint64_t)(a1 + 1);
      break;
    case 'u':
      if (a2 >= 1) {
        uint64_t v15 = 1LL;
      }
      else {
        uint64_t v15 = a2;
      }
      unint64_t result = specialized static JSONScanner.parseUnicodeSequence(from:into:fullSource:allowNulls:)( (unint64_t)&a1[v15],  a2 - v15,  a3,  a4,  a5,  1);
      break;
    default:
      unint64_t v7 = specialized static JSONError.SourceLocation.sourceLocation(at:fullSource:)((unint64_t)a1, a4, a5);
      uint64_t v9 = v8;
      uint64_t v11 = v10;
      lazy protocol witness table accessor for type JSONError and conformance JSONError();
      swift_allocError();
      *(void *)uint64_t v12 = v6;
      *(void *)(v12 + 8) = v7;
      *(void *)(v12 + 16) = v9;
      *(void *)(v12 + 24) = v11;
      *(void *)(v12 + 32) = 0LL;
      *(void *)(v12 + 40) = 0LL;
      *(_BYTE *)(v12 + 48) = 6;
      unint64_t result = swift_willThrow();
      break;
  }

  return result;
}

_BYTE *specialized static JSONScanner._slowpath_stringValue(from:appendingTo:fullSource:)( _BYTE *result, uint64_t a2, uint64_t *a3, unint64_t a4, uint64_t a5)
{
  uint64_t v9 = result;
  if (a2 < 1)
  {
    unint64_t v11 = (unint64_t)result;
LABEL_14:
    uint64_t v17 = static String._tryFromUTF8(_:)();
    if (v18)
    {
      String.append(_:)(*(Swift::String *)&v17);
      return (_BYTE *)swift_bridgeObjectRelease();
    }

    else
    {
LABEL_16:
      unint64_t v19 = specialized static JSONError.SourceLocation.sourceLocation(at:fullSource:)(v11, a4, a5);
      uint64_t v21 = v20;
      uint64_t v23 = v22;
      lazy protocol witness table accessor for type JSONError and conformance JSONError();
      swift_allocError();
      *(void *)uint64_t v24 = v19;
      *(void *)(v24 + 8) = v21;
      *(void *)(v24 + 16) = v23;
      *(void *)(v24 + 24) = 0LL;
      *(void *)(v24 + 32) = 0LL;
      *(void *)(v24 + 40) = 0LL;
      *(_BYTE *)(v24 + 48) = 0;
      return (_BYTE *)swift_willThrow();
    }
  }

  else
  {
    uint64_t v10 = &result[a2];
    unint64_t v11 = (unint64_t)result;
    uint64_t v12 = result;
    do
    {
      uint64_t v13 = *v12;
      if ((_DWORD)v13 == 92)
      {
        if ((unint64_t)v12 < v11)
        {
          __break(1u);
LABEL_20:
          unint64_t v25 = specialized static JSONError.SourceLocation.sourceLocation(at:fullSource:)( (unint64_t)v12,  a4,  a5);
          uint64_t v27 = v26;
          uint64_t v29 = v28;
          lazy protocol witness table accessor for type JSONError and conformance JSONError();
          swift_allocError();
          *(void *)uint64_t v30 = v13;
          *(void *)(v30 + 8) = v25;
          *(void *)(v30 + 16) = v27;
          *(void *)(v30 + 24) = v29;
          *(void *)(v30 + 32) = 0LL;
          *(void *)(v30 + 40) = 0LL;
          *(_BYTE *)(v30 + 48) = 7;
          return (_BYTE *)swift_willThrow();
        }

        uint64_t v14 = static String._tryFromUTF8(_:)();
        if (!v15) {
          goto LABEL_16;
        }
        String.append(_:)(*(Swift::String *)&v14);
        swift_bridgeObjectRelease();
        unint64_t result = v12 + 1;
        uint64_t v16 = v10 - (v12 + 1);
        if (((v12 + 1 - v9) | v16) < 0)
        {
          __break(1u);
          goto LABEL_22;
        }

        unint64_t result = (_BYTE *)specialized static JSONScanner.parseEscapeSequence(from:into:fullSource:)( result,  v16,  a3,  a4,  a5);
        if (v5) {
          return result;
        }
        unint64_t v11 = (unint64_t)result;
        uint64_t v12 = result;
      }

      else
      {
        ++v12;
      }
    }

    while (v12 < v10);
LABEL_22:
    __break(1u);
  }

  return result;
}

unsigned __int8 *specialized static JSONScanner.validateLeadingZero(in:fullSource:)( unsigned __int8 *result, uint64_t a2, unint64_t a3, uint64_t a4)
{
  if (a2)
  {
    uint64_t v4 = *result;
    if ((v4 - 46) > 0x37 || ((1LL << (v4 - 46)) & 0x80000000800001LL) == 0)
    {
      unint64_t v6 = specialized static JSONError.SourceLocation.sourceLocation(at:fullSource:)((unint64_t)result, a3, a4);
      uint64_t v8 = v7;
      uint64_t v10 = v9;
      lazy protocol witness table accessor for type JSONError and conformance JSONError();
      swift_allocError();
      if ((v4 - 58) >= 0xFFFFFFF6)
      {
        *(void *)uint64_t v11 = v6;
        *(void *)(v11 + 8) = v8;
        *(void *)(v11 + 16) = v10;
        *(void *)(v11 + 24) = 0LL;
        *(void *)(v11 + 32) = 0LL;
        *(void *)(v11 + 40) = 0LL;
        char v12 = 10;
      }

      else
      {
        *(_OWORD *)uint64_t v11 = xmmword_1837301C0;
        *(void *)(v11 + 16) = v4;
        *(void *)(v11 + 24) = v6;
        *(void *)(v11 + 32) = v8;
        *(void *)(v11 + 40) = v10;
        char v12 = 1;
      }

      *(_BYTE *)(v11 + 48) = v12;
      return (unsigned __int8 *)swift_willThrow();
    }
  }

  return result;
}

unsigned __int8 *specialized static JSONScanner.prevalidateJSONNumber(from:hasExponent:fullSource:)( unsigned __int8 *result, uint64_t a2, char a3, unint64_t a4, uint64_t a5)
{
  if (!a2)
  {
    __break(1u);
    goto LABEL_33;
  }

  uint64_t v11 = result;
  int v12 = *result;
  if (v12 == 48)
  {
    if (a2 >= 1) {
      uint64_t v13 = 1LL;
    }
    else {
      uint64_t v13 = a2;
    }
    specialized static JSONScanner.validateLeadingZero(in:fullSource:)(&result[v13], a2 - v13, a4, a5);
    unint64_t v6 = (unint64_t)v11;
    if (v5) {
      return (unsigned __int8 *)v6;
    }
    goto LABEL_15;
  }

  if ((v12 - 58) > 0xFFFFFFF6)
  {
    unint64_t v6 = (unint64_t)result;
    goto LABEL_15;
  }

  if (v12 != 45)
  {
LABEL_33:
    __break(1u);
    goto LABEL_34;
  }

  if (a2 < 2)
  {
    unint64_t v18 = specialized static JSONError.SourceLocation.sourceLocation(at:fullSource:)((unint64_t)result, a4, a5);
    uint64_t v20 = v19;
    uint64_t v22 = v21;
    lazy protocol witness table accessor for type JSONError and conformance JSONError();
    swift_allocError();
    *(void *)uint64_t v23 = 0xD000000000000010LL;
    *(void *)(v23 + 8) = 0x80000001839CB4F0LL;
    *(void *)(v23 + 16) = 45LL;
LABEL_28:
    *(void *)(v23 + 24) = v18;
    *(void *)(v23 + 32) = v20;
    *(void *)(v23 + 40) = v22;
    *(_BYTE *)(v23 + 48) = 1;
    swift_willThrow();
    return (unsigned __int8 *)v6;
  }

  unint64_t v6 = (unint64_t)(result + 1);
  uint64_t v14 = result[1];
  if ((_DWORD)v14 == 48)
  {
    specialized static JSONScanner.validateLeadingZero(in:fullSource:)(result + 2, a2 - 2, a4, a5);
    if (v5) {
      return (unsigned __int8 *)v6;
    }
  }

  else if ((v14 - 58) <= 0xFFFFFFF6)
  {
    unint64_t v18 = specialized static JSONError.SourceLocation.sourceLocation(at:fullSource:)( (unint64_t)(result + 1),  a4,  a5);
    uint64_t v20 = v30;
    uint64_t v22 = v31;
    lazy protocol witness table accessor for type JSONError and conformance JSONError();
    swift_allocError();
    *(void *)uint64_t v23 = 0xD000000000000013LL;
    *(void *)(v23 + 8) = 0x80000001839CB5E0LL;
    *(void *)(v23 + 16) = v14;
    goto LABEL_28;
  }

double specialized static JSONScanner.validateNumber(from:fullSource:)@<D0>( _BYTE *a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v5 = (uint64_t)a1;
  uint64_t v7 = &a1[a2];
  if (a2 >= 1)
  {
    uint64_t v8 = 0LL;
    uint64_t v9 = a2;
    while (1)
    {
      if (v8 < 0) {
        goto LABEL_33;
      }
      BOOL v10 = v9-- < 1;
      if (v10) {
        goto LABEL_33;
      }
      ++v8;
      a1 = (_BYTE *)(v5 + v8);
    }

    a1 = (_BYTE *)(v5 + v8);
  }

unint64_t lazy protocol witness table accessor for type UInt32 and conformance UInt32()
{
  unint64_t result = lazy protocol witness table cache variable for type UInt32 and conformance UInt32;
  if (!lazy protocol witness table cache variable for type UInt32 and conformance UInt32)
  {
    unint64_t result = MEMORY[0x186E20D4C](MEMORY[0x18961A888], MEMORY[0x18961A860]);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type UInt32 and conformance UInt32);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type UInt32 and conformance UInt32;
  if (!lazy protocol witness table cache variable for type UInt32 and conformance UInt32)
  {
    unint64_t result = MEMORY[0x186E20D4C](MEMORY[0x18961A890], MEMORY[0x18961A860]);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type UInt32 and conformance UInt32);
  }

  return result;
}

ValueMetadata *type metadata accessor for JSONMap.Region()
{
  return &type metadata for JSONMap.Region;
}

uint64_t getEnumTagSinglePayload for JSONError.SourceLocation(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 24)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0LL;
  }
}

uint64_t storeEnumTagSinglePayload for JSONError.SourceLocation(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)(result + 8) = 0LL;
    *(void *)(result + 16) = 0LL;
    *(void *)unint64_t result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }

  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }

  *(_BYTE *)(result + 24) = v3;
  return result;
}

ValueMetadata *type metadata accessor for JSONError.SourceLocation()
{
  return &type metadata for JSONError.SourceLocation;
}

ValueMetadata *type metadata accessor for JSONMap.ArrayIterator()
{
  return &type metadata for JSONMap.ArrayIterator;
}

uint64_t specialized AsyncLineSequence.AsyncIterator.next()()
{
  *(void *)(v1 + 16) = v0;
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;
  unsigned __int8 *v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  unsigned __int8 *v18;
  unsigned __int8 v19;
  int v20;
  uint64_t v21;
  char *v22;
  char v23;
  char *v24;
  int64_t v25;
  char v26;
  char *v27;
  uint64_t v28;
  int64_t v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  char v35;
  uint64_t v36;
  char v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  void *v41;
  uint64_t v42;
  unsigned __int8 *v43;
  int v44;
  void *v45;
  unsigned __int8 *v46;
  unsigned __int8 v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  char v51;
  unint64_t v52;
  unint64_t v53;
  uint64_t v54;
  size_t v55;
  void *v56;
  size_t v57;
  uint64_t v58;
  unsigned __int8 *v59;
  unsigned __int8 v60;
  int v61;
  uint64_t v62;
  char v64;
  unint64_t v65;
  unint64_t v66;
  unint64_t v67;
  uint64_t v68;
  char *v69;
  char v70;
  char v71;
  unint64_t v72;
  unint64_t v73;
  int64_t v74;
  uint64_t v75;
  char *v76;
  size_t v77;
  char v78;
  unint64_t v79;
  unint64_t v80;
  unint64_t v81;
  uint64_t v82;
  unint64_t v83;
  unint64_t v84;
  uint64_t v85;
  unint64_t v86;
  char v87;
  uint64_t v88;
  void *v89;
  size_t v90;
  void *v91;
  uint64_t (*v92)(__int16);
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v1 = *(void *)(v0 + 16);
  if ((*(_BYTE *)(v1 + 33) & 1) != 0)
  {
    uint64_t v2 = *(unsigned __int8 **)(v1 + 8);
    if (v2 == *(unsigned __int8 **)(v1 + 16))
    {
      uint64_t v91 = (void *)swift_task_alloc();
      *(void *)(v0 + 24) = v91;
      uint64_t v92 = specialized AsyncLineSequence.AsyncIterator.next();
      goto LABEL_99;
    }

    char v3 = *v2;
    *(void *)(v1 + 8) = v2 + 1;
    uint64_t v1 = *(void *)(v0 + 16);
  }

  else
  {
    char v3 = *(unsigned __int8 *)(v1 + 32);
  }

  *(_WORD *)(v1 + 32) = 256;
  if (v3 != 13)
  {
    if ((v3 - 10) < 3)
    {
      BOOL v10 = *(void *)(v0 + 16);
      if (*(void *)(*(void *)(v10 + 24) + 16LL))
      {
        swift_bridgeObjectRetain();
        char v11 = static String._fromUTF8Repairing(_:)();
        uint64_t v13 = v12;
        swift_bridgeObjectRelease();
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        char v15 = *(void *)(v10 + 24);
        goto LABEL_12;
      }

      unint64_t v35 = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v24 = *(char **)(v10 + 24);
      if ((v35 & 1) != 0)
      {
        unint64_t v36 = *(void *)(v0 + 16);
        uint64_t v25 = *((void *)v24 + 2);
        uint64_t v37 = swift_isUniquelyReferenced_nonNull_native();
        *(void *)(v36 + 24) = v24;
        if ((v37 & 1) == 0)
        {
          uint64_t v38 = *(void *)(v0 + 16);
          uint64_t v24 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  v25,  1,  v24);
          *(void *)(v38 + 24) = v24;
        }

{
  uint64_t v0;
  __int16 v1;
  int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  unsigned __int8 *v20;
  unsigned __int8 v21;
  int v22;
  uint64_t v23;
  char *v24;
  char v25;
  char *v26;
  int64_t v27;
  char v28;
  char *v29;
  uint64_t v30;
  int64_t v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  char v37;
  uint64_t v38;
  char v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  void *v43;
  uint64_t v44;
  unsigned __int8 *v45;
  int v46;
  void *v47;
  unsigned __int8 *v48;
  unsigned __int8 v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  char v53;
  unint64_t v54;
  unint64_t v55;
  uint64_t v56;
  size_t v57;
  void *v58;
  size_t v59;
  uint64_t v60;
  unsigned __int8 *v61;
  unsigned __int8 v62;
  int v63;
  uint64_t v64;
  char v66;
  unint64_t v67;
  unint64_t v68;
  unint64_t v69;
  uint64_t v70;
  char *v71;
  char v72;
  char v73;
  unint64_t v74;
  unint64_t v75;
  int64_t v76;
  uint64_t v77;
  char *v78;
  size_t v79;
  char v80;
  unint64_t v81;
  unint64_t v82;
  unint64_t v83;
  uint64_t v84;
  unint64_t v85;
  unint64_t v86;
  uint64_t v87;
  unint64_t v88;
  char v89;
  uint64_t v90;
  void *v91;
  size_t v92;
  void *v93;
  uint64_t (*v94)(__int16);
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v1 = *(_WORD *)(v0 + 96);
  *(_WORD *)(*(void *)(v0 + 16) + 32LL) = 256;
  if ((v1 & 0x100) != 0)
  {
    uint64_t v9 = *(void *)(v0 + 16);
    BOOL v10 = *(void *)(*(void *)(v9 + 24) + 16LL);
    if (!v10)
    {
      char v11 = 0LL;
      return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8))(v11, v10);
    }

    swift_bridgeObjectRetain();
    char v11 = static String._fromUTF8Repairing(_:)();
    BOOL v10 = v12;
    swift_bridgeObjectRelease();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v14 = *(void *)(v9 + 24);
    char v15 = (void *)(*(void *)(v0 + 16) + 24LL);
    if (!isUniquelyReferenced_nonNull_native) {
      goto LABEL_13;
    }
    goto LABEL_8;
  }

  uint64_t v2 = *(unsigned __int8 *)(v0 + 96);
  if (v2 != 13)
  {
    if ((v2 - 10) < 3)
    {
      char v16 = *(void *)(v0 + 16);
      if (*(void *)(*(void *)(v16 + 24) + 16LL))
      {
        swift_bridgeObjectRetain();
        char v11 = static String._fromUTF8Repairing(_:)();
        BOOL v10 = v17;
        swift_bridgeObjectRelease();
        unint64_t v18 = swift_isUniquelyReferenced_nonNull_native();
        uint64_t v14 = *(void *)(v16 + 24);
        goto LABEL_12;
      }

      uint64_t v37 = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v26 = *(char **)(v16 + 24);
      if ((v37 & 1) != 0)
      {
        uint64_t v38 = *(void *)(v0 + 16);
        uint64_t v27 = *((void *)v26 + 2);
        unint64_t v39 = swift_isUniquelyReferenced_nonNull_native();
        *(void *)(v38 + 24) = v26;
        if ((v39 & 1) == 0)
        {
          unint64_t v40 = *(void *)(v0 + 16);
          uint64_t v26 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  v27,  1,  v26);
          *(void *)(v40 + 24) = v26;
        }

{
  uint64_t v0;
  __int16 v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v1 = *(_WORD *)(v0 + 98);
  if ((v1 & 0x100) != 0)
  {
    char v3 = *(void *)(v0 + 48);
  }

  else
  {
    if (v1 != 10)
    {
      uint64_t v2 = *(void *)(v0 + 16);
      *(_BYTE *)(v2 + 32) = v1;
      *(_BYTE *)(v2 + 33) = 0;
    }

    char v3 = *(void *)(v0 + 48);
    if (!v3) {
      return swift_task_switch();
    }
  }

  return (*(uint64_t (**)(void, uint64_t))(v0 + 8))(*(void *)(v0 + 40), v3);
}

{
  uint64_t v0;
  __int16 v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  char *v11;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  char v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  int64_t v25;
  uint64_t v26;
  char v27;
  int64_t v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  size_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v1 = *(_WORD *)(v0 + 100);
  if ((v1 & 0x100) != 0)
  {
    BOOL v10 = *(void *)(v0 + 16);
    char v11 = *(char **)(v10 + 24);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *(void *)(v10 + 24) = v11;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      uint64_t v33 = *(void *)(v0 + 16);
      char v11 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  *((void *)v11 + 2) + 1LL,  1,  v11);
      *(void *)(v33 + 24) = v11;
    }

    uint64_t v14 = *((void *)v11 + 2);
    uint64_t v13 = *((void *)v11 + 3);
    if (v14 >= v13 >> 1) {
      char v11 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (char *)(v13 > 1),  v14 + 1,  1,  v11);
    }
    char v15 = *(void *)(v0 + 16);
    *((void *)v11 + 2) = v14 + 1;
    v11[v14 + 32] = -62;
    *(void *)(v15 + 24) = v11;
    swift_bridgeObjectRetain();
    uint64_t v4 = static String._fromUTF8Repairing(_:)();
    unint64_t v6 = v16;
    swift_bridgeObjectRelease();
    uint64_t v17 = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v8 = *(void *)(v15 + 24);
    uint64_t v9 = (void *)(*(void *)(v0 + 16) + 24LL);
    if (!v17) {
      goto LABEL_5;
    }
    goto LABEL_11;
  }

  uint64_t v2 = *(void *)(v0 + 16);
  char v3 = *(char **)(v2 + 24);
  if (v1 != 133)
  {
    uint64_t v19 = swift_isUniquelyReferenced_nonNull_native();
    *(void *)(v2 + 24) = v3;
    if ((v19 & 1) == 0)
    {
      uint64_t v34 = *(void *)(v0 + 16);
      char v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  *((void *)v3 + 2) + 1LL,  1,  v3);
      *(void *)(v34 + 24) = v3;
    }

    uint64_t v21 = *((void *)v3 + 2);
    unint64_t v20 = *((void *)v3 + 3);
    uint64_t v22 = v21 + 1;
    if (v21 >= v20 >> 1) {
      char v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (char *)(v20 > 1),  v21 + 1,  1,  v3);
    }
    uint64_t v23 = *(void *)(v0 + 16);
    *((void *)v3 + 2) = v22;
    v3[v21 + 32] = -62;
    *(void *)(v23 + 24) = v3;
    uint64_t v24 = *((void *)v3 + 3);
    uint64_t v25 = v21 + 2;
    if (v25 > (uint64_t)(v24 >> 1)) {
      char v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (char *)(v24 > 1),  v25,  1,  v3);
    }
    uint64_t v26 = *(void *)(v0 + 16);
    *((void *)v3 + 2) = v25;
    v3[v22 + 32] = v1;
    goto LABEL_20;
  }

  if (*((void *)v3 + 2))
  {
    swift_bridgeObjectRetain();
    uint64_t v4 = static String._fromUTF8Repairing(_:)();
    unint64_t v6 = v5;
    swift_bridgeObjectRelease();
    uint64_t v7 = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v8 = *(void *)(v2 + 24);
    uint64_t v9 = (void *)(*(void *)(v0 + 16) + 24LL);
    if ((v7 & 1) == 0)
    {
LABEL_5:
      *uint64_t v9 = specialized _ContiguousArrayBuffer.init(_uninitializedCount:minimumCapacity:)( 0LL,  *(void *)(v8 + 24) >> 1);
      swift_bridgeObjectRelease();
      return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8))(v4, v6);
    }

{
  uint64_t v0;
  __int16 v1;
  void *v2;
  char *v3;
  char v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  char *v14;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  char v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  int64_t v28;
  uint64_t v29;
  char *v30;
  char v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  char v41;
  uint64_t v42;
  void *v43;
  size_t v44;
  uint64_t v45;
  void *v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  unint64_t v50;
  char *v51;
  char *v52;
  unint64_t v53;
  char *v54;
  uint64_t v1 = *(_WORD *)(v0 + 102);
  if ((v1 & 0x100) != 0)
  {
    uint64_t v13 = *(void *)(v0 + 16);
    uint64_t v14 = *(char **)(v13 + 24);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *(void *)(v13 + 24) = v14;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      uint64_t v45 = *(void *)(v0 + 16);
      uint64_t v14 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  *((void *)v14 + 2) + 1LL,  1,  v14);
      *(void *)(v45 + 24) = v14;
    }

    uint64_t v17 = *((void *)v14 + 2);
    char v16 = *((void *)v14 + 3);
    if (v17 >= v16 >> 1) {
      uint64_t v14 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (char *)(v16 > 1),  v17 + 1,  1,  v14);
    }
    unint64_t v18 = *(void *)(v0 + 16);
    *((void *)v14 + 2) = v17 + 1;
    v14[v17 + 32] = -30;
    *(void *)(v18 + 24) = v14;
    swift_bridgeObjectRetain();
    uint64_t v7 = static String._fromUTF8Repairing(_:)();
    uint64_t v9 = v19;
    swift_bridgeObjectRelease();
    unint64_t v20 = swift_isUniquelyReferenced_nonNull_native();
    char v11 = *(void *)(v18 + 24);
    uint64_t v12 = (void *)(*(void *)(v0 + 16) + 24LL);
    if (!v20) {
      goto LABEL_7;
    }
    goto LABEL_13;
  }

  uint64_t v2 = *(void **)(v0 + 16);
  if (v1 != 128)
  {
    unint64_t v6 = (char *)v2[3];
    uint64_t v22 = swift_isUniquelyReferenced_nonNull_native();
    v2[3] = v6;
    if ((v22 & 1) == 0)
    {
      unint64_t v47 = *(void *)(v0 + 16);
      unint64_t v6 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  *((void *)v6 + 2) + 1LL,  1,  v6);
      *(void *)(v47 + 24) = v6;
    }

    uint64_t v24 = *((void *)v6 + 2);
    uint64_t v23 = *((void *)v6 + 3);
    uint64_t v25 = v24 + 1;
    if (v24 >= v23 >> 1) {
      unint64_t v6 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (char *)(v23 > 1),  v24 + 1,  1,  v6);
    }
    uint64_t v26 = *(void *)(v0 + 16);
    *((void *)v6 + 2) = v25;
    v6[v24 + 32] = -30;
    *(void *)(v26 + 24) = v6;
    uint64_t v27 = *((void *)v6 + 3);
    uint64_t v28 = v24 + 2;
    if (v28 > (uint64_t)(v27 >> 1)) {
      unint64_t v6 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (char *)(v27 > 1),  v28,  1,  v6);
    }
    uint64_t v29 = *(void *)(v0 + 16);
    *((void *)v6 + 2) = v28;
    uint64_t v30 = &v6[v25];
    goto LABEL_31;
  }

  char v3 = (char *)v2[1];
  if (v3 != (char *)v2[2])
  {
    uint64_t v4 = *v3;
    LOBYTE(v1) = *v3;
    v2[1] = v3 + 1;
    uint64_t v5 = *(void *)(v0 + 16);
    unint64_t v6 = *(char **)(v5 + 24);
    if ((v4 & 0xFE) == 0xA8)
    {
      if (*((void *)v6 + 2))
      {
        swift_bridgeObjectRetain();
        uint64_t v7 = static String._fromUTF8Repairing(_:)();
        uint64_t v9 = v8;
        swift_bridgeObjectRelease();
        BOOL v10 = swift_isUniquelyReferenced_nonNull_native();
        char v11 = *(void *)(v5 + 24);
        uint64_t v12 = (void *)(*(void *)(v0 + 16) + 24LL);
        if ((v10 & 1) == 0)
        {
LABEL_7:
          *uint64_t v12 = specialized _ContiguousArrayBuffer.init(_uninitializedCount:minimumCapacity:)( 0LL,  *(void *)(v11 + 24) >> 1);
          swift_bridgeObjectRelease();
          return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8))(v7, v9);
        }

{
  uint64_t v0;
  __int16 v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  char *v11;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  int64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  char v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  char v33;
  uint64_t v34;
  void *v35;
  size_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v1 = *(_WORD *)(v0 + 104);
  if ((v1 & 0x100) != 0)
  {
    BOOL v10 = *(void *)(v0 + 16);
    char v11 = *(char **)(v10 + 24);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *(void *)(v10 + 24) = v11;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      uint64_t v37 = *(void *)(v0 + 16);
      char v11 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  *((void *)v11 + 2) + 1LL,  1,  v11);
      *(void *)(v37 + 24) = v11;
    }

    uint64_t v14 = *((void *)v11 + 2);
    uint64_t v13 = *((void *)v11 + 3);
    char v15 = v14 + 1;
    if (v14 >= v13 >> 1) {
      char v11 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (char *)(v13 > 1),  v14 + 1,  1,  v11);
    }
    char v16 = *(void *)(v0 + 16);
    *((void *)v11 + 2) = v15;
    v11[v14 + 32] = -30;
    *(void *)(v16 + 24) = v11;
    uint64_t v17 = *((void *)v11 + 3);
    unint64_t v18 = v14 + 2;
    if (v18 > (uint64_t)(v17 >> 1)) {
      char v11 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (char *)(v17 > 1),  v18,  1,  v11);
    }
    uint64_t v19 = *(void *)(v0 + 16);
    *((void *)v11 + 2) = v18;
    v11[v15 + 32] = 0x80;
    *(void *)(v19 + 24) = v11;
    swift_bridgeObjectRetain();
    uint64_t v4 = static String._fromUTF8Repairing(_:)();
    unint64_t v6 = v20;
    swift_bridgeObjectRelease();
    uint64_t v21 = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v8 = *(void *)(v19 + 24);
    uint64_t v9 = (void *)(*(void *)(v0 + 16) + 24LL);
    if (!v21) {
      goto LABEL_5;
    }
    goto LABEL_13;
  }

  uint64_t v2 = *(void *)(v0 + 16);
  char v3 = *(char **)(v2 + 24);
  if ((v1 & 0xFE) == 0xA8)
  {
    if (*((void *)v3 + 2))
    {
      swift_bridgeObjectRetain();
      uint64_t v4 = static String._fromUTF8Repairing(_:)();
      unint64_t v6 = v5;
      swift_bridgeObjectRelease();
      uint64_t v7 = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v8 = *(void *)(v2 + 24);
      uint64_t v9 = (void *)(*(void *)(v0 + 16) + 24LL);
      if ((v7 & 1) == 0)
      {
LABEL_5:
        *uint64_t v9 = specialized _ContiguousArrayBuffer.init(_uninitializedCount:minimumCapacity:)( 0LL,  *(void *)(v8 + 24) >> 1);
        swift_bridgeObjectRelease();
        return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8))(v4, v6);
      }

{
  uint64_t v0;
  uint64_t v1;
  *(void *)(v1 + 16) = v0;
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;
  unsigned __int8 *v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  unsigned __int8 *v18;
  unsigned __int8 v19;
  int v20;
  uint64_t v21;
  char *v22;
  char v23;
  char *v24;
  int64_t v25;
  char v26;
  char *v27;
  uint64_t v28;
  int64_t v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  char v35;
  uint64_t v36;
  char v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  void *v41;
  uint64_t v42;
  unsigned __int8 *v43;
  int v44;
  void *v45;
  unsigned __int8 *v46;
  unsigned __int8 v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  char v51;
  unint64_t v52;
  unint64_t v53;
  uint64_t v54;
  size_t v55;
  void *v56;
  size_t v57;
  uint64_t v58;
  unsigned __int8 *v59;
  unsigned __int8 v60;
  int v61;
  uint64_t v62;
  char v64;
  unint64_t v65;
  unint64_t v66;
  unint64_t v67;
  uint64_t v68;
  char *v69;
  char v70;
  char v71;
  unint64_t v72;
  unint64_t v73;
  int64_t v74;
  uint64_t v75;
  char *v76;
  size_t v77;
  char v78;
  unint64_t v79;
  unint64_t v80;
  unint64_t v81;
  uint64_t v82;
  unint64_t v83;
  unint64_t v84;
  uint64_t v85;
  unint64_t v86;
  char v87;
  uint64_t v88;
  void *v89;
  size_t v90;
  void *v91;
  uint64_t (*v92)(__int16);
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v1 = *(void *)(v0 + 16);
  if ((*(_BYTE *)(v1 + 33) & 1) != 0)
  {
    uint64_t v2 = *(unsigned __int8 **)(v1 + 8);
    if (v2 == *(unsigned __int8 **)(v1 + 16))
    {
      uint64_t v91 = (void *)swift_task_alloc();
      *(void *)(v0 + 24) = v91;
      uint64_t v92 = specialized AsyncLineSequence.AsyncIterator.next();
      goto LABEL_99;
    }

    char v3 = *v2;
    *(void *)(v1 + 8) = v2 + 1;
    uint64_t v1 = *(void *)(v0 + 16);
  }

  else
  {
    char v3 = *(unsigned __int8 *)(v1 + 32);
  }

  *(_WORD *)(v1 + 32) = 256;
  if (v3 != 13)
  {
    if ((v3 - 10) < 3)
    {
      BOOL v10 = *(void *)(v0 + 16);
      if (*(void *)(*(void *)(v10 + 24) + 16LL))
      {
        swift_bridgeObjectRetain();
        char v11 = static String._fromUTF8Repairing(_:)();
        uint64_t v13 = v12;
        swift_bridgeObjectRelease();
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        char v15 = *(void *)(v10 + 24);
        goto LABEL_12;
      }

      unint64_t v35 = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v24 = *(char **)(v10 + 24);
      if ((v35 & 1) != 0)
      {
        unint64_t v36 = *(void *)(v0 + 16);
        uint64_t v25 = *((void *)v24 + 2);
        uint64_t v37 = swift_isUniquelyReferenced_nonNull_native();
        *(void *)(v36 + 24) = v24;
        if ((v37 & 1) == 0)
        {
          uint64_t v38 = *(void *)(v0 + 16);
          uint64_t v24 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  v25,  1,  v24);
          *(void *)(v38 + 24) = v24;
        }

{
  uint64_t v0;
  __int16 v1;
  int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  unsigned __int8 *v20;
  unsigned __int8 v21;
  int v22;
  uint64_t v23;
  char *v24;
  char v25;
  char *v26;
  int64_t v27;
  char v28;
  char *v29;
  uint64_t v30;
  int64_t v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  char v37;
  uint64_t v38;
  char v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  void *v43;
  uint64_t v44;
  unsigned __int8 *v45;
  int v46;
  void *v47;
  unsigned __int8 *v48;
  unsigned __int8 v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  char v53;
  unint64_t v54;
  unint64_t v55;
  uint64_t v56;
  size_t v57;
  void *v58;
  size_t v59;
  uint64_t v60;
  unsigned __int8 *v61;
  unsigned __int8 v62;
  int v63;
  uint64_t v64;
  char v66;
  unint64_t v67;
  unint64_t v68;
  unint64_t v69;
  uint64_t v70;
  char *v71;
  char v72;
  char v73;
  unint64_t v74;
  unint64_t v75;
  int64_t v76;
  uint64_t v77;
  char *v78;
  size_t v79;
  char v80;
  unint64_t v81;
  unint64_t v82;
  unint64_t v83;
  uint64_t v84;
  unint64_t v85;
  unint64_t v86;
  uint64_t v87;
  unint64_t v88;
  char v89;
  uint64_t v90;
  void *v91;
  size_t v92;
  void *v93;
  uint64_t (*v94)(__int16);
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v1 = *(_WORD *)(v0 + 96);
  *(_WORD *)(*(void *)(v0 + 16) + 32LL) = 256;
  if ((v1 & 0x100) != 0)
  {
    uint64_t v9 = *(void *)(v0 + 16);
    BOOL v10 = *(void *)(*(void *)(v9 + 24) + 16LL);
    if (!v10)
    {
      char v11 = 0LL;
      return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8))(v11, v10);
    }

    swift_bridgeObjectRetain();
    char v11 = static String._fromUTF8Repairing(_:)();
    BOOL v10 = v12;
    swift_bridgeObjectRelease();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v14 = *(void *)(v9 + 24);
    char v15 = (void *)(*(void *)(v0 + 16) + 24LL);
    if (!isUniquelyReferenced_nonNull_native) {
      goto LABEL_13;
    }
    goto LABEL_8;
  }

  uint64_t v2 = *(unsigned __int8 *)(v0 + 96);
  if (v2 != 13)
  {
    if ((v2 - 10) < 3)
    {
      char v16 = *(void *)(v0 + 16);
      if (*(void *)(*(void *)(v16 + 24) + 16LL))
      {
        swift_bridgeObjectRetain();
        char v11 = static String._fromUTF8Repairing(_:)();
        BOOL v10 = v17;
        swift_bridgeObjectRelease();
        unint64_t v18 = swift_isUniquelyReferenced_nonNull_native();
        uint64_t v14 = *(void *)(v16 + 24);
        goto LABEL_12;
      }

      uint64_t v37 = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v26 = *(char **)(v16 + 24);
      if ((v37 & 1) != 0)
      {
        uint64_t v38 = *(void *)(v0 + 16);
        uint64_t v27 = *((void *)v26 + 2);
        unint64_t v39 = swift_isUniquelyReferenced_nonNull_native();
        *(void *)(v38 + 24) = v26;
        if ((v39 & 1) == 0)
        {
          unint64_t v40 = *(void *)(v0 + 16);
          uint64_t v26 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  v27,  1,  v26);
          *(void *)(v40 + 24) = v26;
        }

{
  uint64_t v0;
  __int16 v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v1 = *(_WORD *)(v0 + 98);
  if ((v1 & 0x100) != 0)
  {
    char v3 = *(void *)(v0 + 48);
  }

  else
  {
    if (v1 != 10)
    {
      uint64_t v2 = *(void *)(v0 + 16);
      *(_BYTE *)(v2 + 32) = v1;
      *(_BYTE *)(v2 + 33) = 0;
    }

    char v3 = *(void *)(v0 + 48);
    if (!v3) {
      return swift_task_switch();
    }
  }

  return (*(uint64_t (**)(void, uint64_t))(v0 + 8))(*(void *)(v0 + 40), v3);
}

{
  uint64_t v0;
  __int16 v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  char *v11;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  char v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  int64_t v25;
  uint64_t v26;
  char v27;
  int64_t v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  size_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v1 = *(_WORD *)(v0 + 100);
  if ((v1 & 0x100) != 0)
  {
    BOOL v10 = *(void *)(v0 + 16);
    char v11 = *(char **)(v10 + 24);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *(void *)(v10 + 24) = v11;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      uint64_t v33 = *(void *)(v0 + 16);
      char v11 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  *((void *)v11 + 2) + 1LL,  1,  v11);
      *(void *)(v33 + 24) = v11;
    }

    uint64_t v14 = *((void *)v11 + 2);
    uint64_t v13 = *((void *)v11 + 3);
    if (v14 >= v13 >> 1) {
      char v11 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (char *)(v13 > 1),  v14 + 1,  1,  v11);
    }
    char v15 = *(void *)(v0 + 16);
    *((void *)v11 + 2) = v14 + 1;
    v11[v14 + 32] = -62;
    *(void *)(v15 + 24) = v11;
    swift_bridgeObjectRetain();
    uint64_t v4 = static String._fromUTF8Repairing(_:)();
    unint64_t v6 = v16;
    swift_bridgeObjectRelease();
    uint64_t v17 = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v8 = *(void *)(v15 + 24);
    uint64_t v9 = (void *)(*(void *)(v0 + 16) + 24LL);
    if (!v17) {
      goto LABEL_5;
    }
    goto LABEL_11;
  }

  uint64_t v2 = *(void *)(v0 + 16);
  char v3 = *(char **)(v2 + 24);
  if (v1 != 133)
  {
    uint64_t v19 = swift_isUniquelyReferenced_nonNull_native();
    *(void *)(v2 + 24) = v3;
    if ((v19 & 1) == 0)
    {
      uint64_t v34 = *(void *)(v0 + 16);
      char v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  *((void *)v3 + 2) + 1LL,  1,  v3);
      *(void *)(v34 + 24) = v3;
    }

    uint64_t v21 = *((void *)v3 + 2);
    unint64_t v20 = *((void *)v3 + 3);
    uint64_t v22 = v21 + 1;
    if (v21 >= v20 >> 1) {
      char v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (char *)(v20 > 1),  v21 + 1,  1,  v3);
    }
    uint64_t v23 = *(void *)(v0 + 16);
    *((void *)v3 + 2) = v22;
    v3[v21 + 32] = -62;
    *(void *)(v23 + 24) = v3;
    uint64_t v24 = *((void *)v3 + 3);
    uint64_t v25 = v21 + 2;
    if (v25 > (uint64_t)(v24 >> 1)) {
      char v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (char *)(v24 > 1),  v25,  1,  v3);
    }
    uint64_t v26 = *(void *)(v0 + 16);
    *((void *)v3 + 2) = v25;
    v3[v22 + 32] = v1;
    goto LABEL_20;
  }

  if (*((void *)v3 + 2))
  {
    swift_bridgeObjectRetain();
    uint64_t v4 = static String._fromUTF8Repairing(_:)();
    unint64_t v6 = v5;
    swift_bridgeObjectRelease();
    uint64_t v7 = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v8 = *(void *)(v2 + 24);
    uint64_t v9 = (void *)(*(void *)(v0 + 16) + 24LL);
    if ((v7 & 1) == 0)
    {
LABEL_5:
      *uint64_t v9 = specialized _ContiguousArrayBuffer.init(_uninitializedCount:minimumCapacity:)( 0LL,  *(void *)(v8 + 24) >> 1);
      swift_bridgeObjectRelease();
      return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8))(v4, v6);
    }

{
  uint64_t v0;
  __int16 v1;
  void *v2;
  char *v3;
  char v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  char *v14;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  char v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  int64_t v28;
  uint64_t v29;
  char *v30;
  char v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  char v41;
  uint64_t v42;
  void *v43;
  size_t v44;
  uint64_t v45;
  void *v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  unint64_t v50;
  char *v51;
  char *v52;
  unint64_t v53;
  char *v54;
  uint64_t v1 = *(_WORD *)(v0 + 102);
  if ((v1 & 0x100) != 0)
  {
    uint64_t v13 = *(void *)(v0 + 16);
    uint64_t v14 = *(char **)(v13 + 24);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *(void *)(v13 + 24) = v14;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      uint64_t v45 = *(void *)(v0 + 16);
      uint64_t v14 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  *((void *)v14 + 2) + 1LL,  1,  v14);
      *(void *)(v45 + 24) = v14;
    }

    uint64_t v17 = *((void *)v14 + 2);
    char v16 = *((void *)v14 + 3);
    if (v17 >= v16 >> 1) {
      uint64_t v14 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (char *)(v16 > 1),  v17 + 1,  1,  v14);
    }
    unint64_t v18 = *(void *)(v0 + 16);
    *((void *)v14 + 2) = v17 + 1;
    v14[v17 + 32] = -30;
    *(void *)(v18 + 24) = v14;
    swift_bridgeObjectRetain();
    uint64_t v7 = static String._fromUTF8Repairing(_:)();
    uint64_t v9 = v19;
    swift_bridgeObjectRelease();
    unint64_t v20 = swift_isUniquelyReferenced_nonNull_native();
    char v11 = *(void *)(v18 + 24);
    uint64_t v12 = (void *)(*(void *)(v0 + 16) + 24LL);
    if (!v20) {
      goto LABEL_7;
    }
    goto LABEL_13;
  }

  uint64_t v2 = *(void **)(v0 + 16);
  if (v1 != 128)
  {
    unint64_t v6 = (char *)v2[3];
    uint64_t v22 = swift_isUniquelyReferenced_nonNull_native();
    v2[3] = v6;
    if ((v22 & 1) == 0)
    {
      unint64_t v47 = *(void *)(v0 + 16);
      unint64_t v6 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  *((void *)v6 + 2) + 1LL,  1,  v6);
      *(void *)(v47 + 24) = v6;
    }

    uint64_t v24 = *((void *)v6 + 2);
    uint64_t v23 = *((void *)v6 + 3);
    uint64_t v25 = v24 + 1;
    if (v24 >= v23 >> 1) {
      unint64_t v6 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (char *)(v23 > 1),  v24 + 1,  1,  v6);
    }
    uint64_t v26 = *(void *)(v0 + 16);
    *((void *)v6 + 2) = v25;
    v6[v24 + 32] = -30;
    *(void *)(v26 + 24) = v6;
    uint64_t v27 = *((void *)v6 + 3);
    uint64_t v28 = v24 + 2;
    if (v28 > (uint64_t)(v27 >> 1)) {
      unint64_t v6 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (char *)(v27 > 1),  v28,  1,  v6);
    }
    uint64_t v29 = *(void *)(v0 + 16);
    *((void *)v6 + 2) = v28;
    uint64_t v30 = &v6[v25];
    goto LABEL_31;
  }

  char v3 = (char *)v2[1];
  if (v3 != (char *)v2[2])
  {
    uint64_t v4 = *v3;
    LOBYTE(v1) = *v3;
    v2[1] = v3 + 1;
    uint64_t v5 = *(void *)(v0 + 16);
    unint64_t v6 = *(char **)(v5 + 24);
    if ((v4 & 0xFE) == 0xA8)
    {
      if (*((void *)v6 + 2))
      {
        swift_bridgeObjectRetain();
        uint64_t v7 = static String._fromUTF8Repairing(_:)();
        uint64_t v9 = v8;
        swift_bridgeObjectRelease();
        BOOL v10 = swift_isUniquelyReferenced_nonNull_native();
        char v11 = *(void *)(v5 + 24);
        uint64_t v12 = (void *)(*(void *)(v0 + 16) + 24LL);
        if ((v10 & 1) == 0)
        {
LABEL_7:
          *uint64_t v12 = specialized _ContiguousArrayBuffer.init(_uninitializedCount:minimumCapacity:)( 0LL,  *(void *)(v11 + 24) >> 1);
          swift_bridgeObjectRelease();
          return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8))(v7, v9);
        }

{
  uint64_t v0;
  __int16 v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  char *v11;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  int64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  char v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  char v33;
  uint64_t v34;
  void *v35;
  size_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v1 = *(_WORD *)(v0 + 104);
  if ((v1 & 0x100) != 0)
  {
    BOOL v10 = *(void *)(v0 + 16);
    char v11 = *(char **)(v10 + 24);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *(void *)(v10 + 24) = v11;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      uint64_t v37 = *(void *)(v0 + 16);
      char v11 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  *((void *)v11 + 2) + 1LL,  1,  v11);
      *(void *)(v37 + 24) = v11;
    }

    uint64_t v14 = *((void *)v11 + 2);
    uint64_t v13 = *((void *)v11 + 3);
    char v15 = v14 + 1;
    if (v14 >= v13 >> 1) {
      char v11 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (char *)(v13 > 1),  v14 + 1,  1,  v11);
    }
    char v16 = *(void *)(v0 + 16);
    *((void *)v11 + 2) = v15;
    v11[v14 + 32] = -30;
    *(void *)(v16 + 24) = v11;
    uint64_t v17 = *((void *)v11 + 3);
    unint64_t v18 = v14 + 2;
    if (v18 > (uint64_t)(v17 >> 1)) {
      char v11 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (char *)(v17 > 1),  v18,  1,  v11);
    }
    uint64_t v19 = *(void *)(v0 + 16);
    *((void *)v11 + 2) = v18;
    v11[v15 + 32] = 0x80;
    *(void *)(v19 + 24) = v11;
    swift_bridgeObjectRetain();
    uint64_t v4 = static String._fromUTF8Repairing(_:)();
    unint64_t v6 = v20;
    swift_bridgeObjectRelease();
    uint64_t v21 = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v8 = *(void *)(v19 + 24);
    uint64_t v9 = (void *)(*(void *)(v0 + 16) + 24LL);
    if (!v21) {
      goto LABEL_5;
    }
    goto LABEL_13;
  }

  uint64_t v2 = *(void *)(v0 + 16);
  char v3 = *(char **)(v2 + 24);
  if ((v1 & 0xFE) == 0xA8)
  {
    if (*((void *)v3 + 2))
    {
      swift_bridgeObjectRetain();
      uint64_t v4 = static String._fromUTF8Repairing(_:)();
      unint64_t v6 = v5;
      swift_bridgeObjectRelease();
      uint64_t v7 = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v8 = *(void *)(v2 + 24);
      uint64_t v9 = (void *)(*(void *)(v0 + 16) + 24LL);
      if ((v7 & 1) == 0)
      {
LABEL_5:
        *uint64_t v9 = specialized _ContiguousArrayBuffer.init(_uninitializedCount:minimumCapacity:)( 0LL,  *(void *)(v8 + 24) >> 1);
        swift_bridgeObjectRelease();
        return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8))(v4, v6);
      }

{
  uint64_t v0;
  uint64_t v1;
  *(void *)(v1 + 16) = v0;
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;
  unsigned __int8 *v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  unsigned __int8 *v18;
  unsigned __int8 v19;
  int v20;
  uint64_t v21;
  char *v22;
  char v23;
  char *v24;
  int64_t v25;
  char v26;
  char *v27;
  uint64_t v28;
  int64_t v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  char v35;
  uint64_t v36;
  char v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  void *v41;
  uint64_t v42;
  unsigned __int8 *v43;
  int v44;
  void *v45;
  unsigned __int8 *v46;
  unsigned __int8 v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  char v51;
  unint64_t v52;
  unint64_t v53;
  uint64_t v54;
  size_t v55;
  void *v56;
  size_t v57;
  uint64_t v58;
  unsigned __int8 *v59;
  unsigned __int8 v60;
  int v61;
  uint64_t v62;
  char v64;
  unint64_t v65;
  unint64_t v66;
  unint64_t v67;
  uint64_t v68;
  char *v69;
  char v70;
  char v71;
  unint64_t v72;
  unint64_t v73;
  int64_t v74;
  uint64_t v75;
  char *v76;
  size_t v77;
  char v78;
  unint64_t v79;
  unint64_t v80;
  unint64_t v81;
  uint64_t v82;
  unint64_t v83;
  unint64_t v84;
  uint64_t v85;
  unint64_t v86;
  char v87;
  uint64_t v88;
  void *v89;
  size_t v90;
  void *v91;
  uint64_t (*v92)(__int16);
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v1 = *(void *)(v0 + 16);
  if ((*(_BYTE *)(v1 + 33) & 1) != 0)
  {
    uint64_t v2 = *(unsigned __int8 **)(v1 + 8);
    if (v2 == *(unsigned __int8 **)(v1 + 16))
    {
      uint64_t v91 = (void *)swift_task_alloc();
      *(void *)(v0 + 24) = v91;
      uint64_t v92 = specialized AsyncLineSequence.AsyncIterator.next();
      goto LABEL_99;
    }

    char v3 = *v2;
    *(void *)(v1 + 8) = v2 + 1;
    uint64_t v1 = *(void *)(v0 + 16);
  }

  else
  {
    char v3 = *(unsigned __int8 *)(v1 + 32);
  }

  *(_WORD *)(v1 + 32) = 256;
  if (v3 != 13)
  {
    if ((v3 - 10) < 3)
    {
      BOOL v10 = *(void *)(v0 + 16);
      if (*(void *)(*(void *)(v10 + 24) + 16LL))
      {
        swift_bridgeObjectRetain();
        char v11 = static String._fromUTF8Repairing(_:)();
        uint64_t v13 = v12;
        swift_bridgeObjectRelease();
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        char v15 = *(void *)(v10 + 24);
        goto LABEL_12;
      }

      unint64_t v35 = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v24 = *(char **)(v10 + 24);
      if ((v35 & 1) != 0)
      {
        unint64_t v36 = *(void *)(v0 + 16);
        uint64_t v25 = *((void *)v24 + 2);
        uint64_t v37 = swift_isUniquelyReferenced_nonNull_native();
        *(void *)(v36 + 24) = v24;
        if ((v37 & 1) == 0)
        {
          uint64_t v38 = *(void *)(v0 + 16);
          uint64_t v24 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  v25,  1,  v24);
          *(void *)(v38 + 24) = v24;
        }

{
  uint64_t v0;
  *(_WORD *)(*(void *)(v0 + 16) + 32LL) = 256;
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  __int16 v1;
  int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  unsigned __int8 *v20;
  unsigned __int8 v21;
  int v22;
  uint64_t v23;
  char *v24;
  char v25;
  char *v26;
  int64_t v27;
  char v28;
  char *v29;
  uint64_t v30;
  int64_t v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  char v37;
  uint64_t v38;
  char v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  void *v43;
  uint64_t v44;
  unsigned __int8 *v45;
  int v46;
  void *v47;
  unsigned __int8 *v48;
  unsigned __int8 v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  char v53;
  unint64_t v54;
  unint64_t v55;
  uint64_t v56;
  size_t v57;
  void *v58;
  size_t v59;
  uint64_t v60;
  unsigned __int8 *v61;
  unsigned __int8 v62;
  int v63;
  uint64_t v64;
  char v66;
  unint64_t v67;
  unint64_t v68;
  unint64_t v69;
  uint64_t v70;
  char *v71;
  char v72;
  char v73;
  unint64_t v74;
  unint64_t v75;
  int64_t v76;
  uint64_t v77;
  char *v78;
  size_t v79;
  char v80;
  unint64_t v81;
  unint64_t v82;
  unint64_t v83;
  uint64_t v84;
  unint64_t v85;
  unint64_t v86;
  uint64_t v87;
  unint64_t v88;
  char v89;
  uint64_t v90;
  void *v91;
  size_t v92;
  void *v93;
  uint64_t (*v94)(__int16);
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v1 = *(_WORD *)(v0 + 96);
  *(_WORD *)(*(void *)(v0 + 16) + 32LL) = 256;
  if ((v1 & 0x100) != 0)
  {
    uint64_t v9 = *(void *)(v0 + 16);
    BOOL v10 = *(void *)(*(void *)(v9 + 24) + 16LL);
    if (!v10)
    {
      char v11 = 0LL;
      return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8))(v11, v10);
    }

    swift_bridgeObjectRetain();
    char v11 = static String._fromUTF8Repairing(_:)();
    BOOL v10 = v12;
    swift_bridgeObjectRelease();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v14 = *(void *)(v9 + 24);
    char v15 = (void *)(*(void *)(v0 + 16) + 24LL);
    if (!isUniquelyReferenced_nonNull_native) {
      goto LABEL_13;
    }
    goto LABEL_8;
  }

  uint64_t v2 = *(unsigned __int8 *)(v0 + 96);
  if (v2 != 13)
  {
    if ((v2 - 10) < 3)
    {
      char v16 = *(void *)(v0 + 16);
      if (*(void *)(*(void *)(v16 + 24) + 16LL))
      {
        swift_bridgeObjectRetain();
        char v11 = static String._fromUTF8Repairing(_:)();
        BOOL v10 = v17;
        swift_bridgeObjectRelease();
        unint64_t v18 = swift_isUniquelyReferenced_nonNull_native();
        uint64_t v14 = *(void *)(v16 + 24);
        goto LABEL_12;
      }

      uint64_t v37 = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v26 = *(char **)(v16 + 24);
      if ((v37 & 1) != 0)
      {
        uint64_t v38 = *(void *)(v0 + 16);
        uint64_t v27 = *((void *)v26 + 2);
        unint64_t v39 = swift_isUniquelyReferenced_nonNull_native();
        *(void *)(v38 + 24) = v26;
        if ((v39 & 1) == 0)
        {
          unint64_t v40 = *(void *)(v0 + 16);
          uint64_t v26 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  v27,  1,  v26);
          *(void *)(v40 + 24) = v26;
        }

{
  uint64_t v0;
  swift_bridgeObjectRelease();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  __int16 v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v1 = *(_WORD *)(v0 + 98);
  if ((v1 & 0x100) != 0)
  {
    char v3 = *(void *)(v0 + 48);
  }

  else
  {
    if (v1 != 10)
    {
      uint64_t v2 = *(void *)(v0 + 16);
      *(_BYTE *)(v2 + 32) = v1;
      *(_BYTE *)(v2 + 33) = 0;
    }

    char v3 = *(void *)(v0 + 48);
    if (!v3) {
      return swift_task_switch();
    }
  }

  return (*(uint64_t (**)(void, uint64_t))(v0 + 8))(*(void *)(v0 + 40), v3);
}

{
  uint64_t v0;
  __int16 v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  char *v11;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  char v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  int64_t v25;
  uint64_t v26;
  char v27;
  int64_t v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  size_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v1 = *(_WORD *)(v0 + 100);
  if ((v1 & 0x100) != 0)
  {
    BOOL v10 = *(void *)(v0 + 16);
    char v11 = *(char **)(v10 + 24);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *(void *)(v10 + 24) = v11;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      uint64_t v33 = *(void *)(v0 + 16);
      char v11 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  *((void *)v11 + 2) + 1LL,  1,  v11);
      *(void *)(v33 + 24) = v11;
    }

    uint64_t v14 = *((void *)v11 + 2);
    uint64_t v13 = *((void *)v11 + 3);
    if (v14 >= v13 >> 1) {
      char v11 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (char *)(v13 > 1),  v14 + 1,  1,  v11);
    }
    char v15 = *(void *)(v0 + 16);
    *((void *)v11 + 2) = v14 + 1;
    v11[v14 + 32] = -62;
    *(void *)(v15 + 24) = v11;
    swift_bridgeObjectRetain();
    uint64_t v4 = static String._fromUTF8Repairing(_:)();
    unint64_t v6 = v16;
    swift_bridgeObjectRelease();
    uint64_t v17 = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v8 = *(void *)(v15 + 24);
    uint64_t v9 = (void *)(*(void *)(v0 + 16) + 24LL);
    if (!v17) {
      goto LABEL_5;
    }
    goto LABEL_11;
  }

  uint64_t v2 = *(void *)(v0 + 16);
  char v3 = *(char **)(v2 + 24);
  if (v1 != 133)
  {
    uint64_t v19 = swift_isUniquelyReferenced_nonNull_native();
    *(void *)(v2 + 24) = v3;
    if ((v19 & 1) == 0)
    {
      uint64_t v34 = *(void *)(v0 + 16);
      char v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  *((void *)v3 + 2) + 1LL,  1,  v3);
      *(void *)(v34 + 24) = v3;
    }

    uint64_t v21 = *((void *)v3 + 2);
    unint64_t v20 = *((void *)v3 + 3);
    uint64_t v22 = v21 + 1;
    if (v21 >= v20 >> 1) {
      char v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (char *)(v20 > 1),  v21 + 1,  1,  v3);
    }
    uint64_t v23 = *(void *)(v0 + 16);
    *((void *)v3 + 2) = v22;
    v3[v21 + 32] = -62;
    *(void *)(v23 + 24) = v3;
    uint64_t v24 = *((void *)v3 + 3);
    uint64_t v25 = v21 + 2;
    if (v25 > (uint64_t)(v24 >> 1)) {
      char v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (char *)(v24 > 1),  v25,  1,  v3);
    }
    uint64_t v26 = *(void *)(v0 + 16);
    *((void *)v3 + 2) = v25;
    v3[v22 + 32] = v1;
    goto LABEL_20;
  }

  if (*((void *)v3 + 2))
  {
    swift_bridgeObjectRetain();
    uint64_t v4 = static String._fromUTF8Repairing(_:)();
    unint64_t v6 = v5;
    swift_bridgeObjectRelease();
    uint64_t v7 = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v8 = *(void *)(v2 + 24);
    uint64_t v9 = (void *)(*(void *)(v0 + 16) + 24LL);
    if ((v7 & 1) == 0)
    {
LABEL_5:
      *uint64_t v9 = specialized _ContiguousArrayBuffer.init(_uninitializedCount:minimumCapacity:)( 0LL,  *(void *)(v8 + 24) >> 1);
      swift_bridgeObjectRelease();
      return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8))(v4, v6);
    }

{
  uint64_t v0;
  __int16 v1;
  void *v2;
  char *v3;
  char v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  char *v14;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  char v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  int64_t v28;
  uint64_t v29;
  char *v30;
  char v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  char v41;
  uint64_t v42;
  void *v43;
  size_t v44;
  uint64_t v45;
  void *v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  unint64_t v50;
  char *v51;
  char *v52;
  unint64_t v53;
  char *v54;
  uint64_t v1 = *(_WORD *)(v0 + 102);
  if ((v1 & 0x100) != 0)
  {
    uint64_t v13 = *(void *)(v0 + 16);
    uint64_t v14 = *(char **)(v13 + 24);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *(void *)(v13 + 24) = v14;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      uint64_t v45 = *(void *)(v0 + 16);
      uint64_t v14 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  *((void *)v14 + 2) + 1LL,  1,  v14);
      *(void *)(v45 + 24) = v14;
    }

    uint64_t v17 = *((void *)v14 + 2);
    char v16 = *((void *)v14 + 3);
    if (v17 >= v16 >> 1) {
      uint64_t v14 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (char *)(v16 > 1),  v17 + 1,  1,  v14);
    }
    unint64_t v18 = *(void *)(v0 + 16);
    *((void *)v14 + 2) = v17 + 1;
    v14[v17 + 32] = -30;
    *(void *)(v18 + 24) = v14;
    swift_bridgeObjectRetain();
    uint64_t v7 = static String._fromUTF8Repairing(_:)();
    uint64_t v9 = v19;
    swift_bridgeObjectRelease();
    unint64_t v20 = swift_isUniquelyReferenced_nonNull_native();
    char v11 = *(void *)(v18 + 24);
    uint64_t v12 = (void *)(*(void *)(v0 + 16) + 24LL);
    if (!v20) {
      goto LABEL_7;
    }
    goto LABEL_13;
  }

  uint64_t v2 = *(void **)(v0 + 16);
  if (v1 != 128)
  {
    unint64_t v6 = (char *)v2[3];
    uint64_t v22 = swift_isUniquelyReferenced_nonNull_native();
    v2[3] = v6;
    if ((v22 & 1) == 0)
    {
      unint64_t v47 = *(void *)(v0 + 16);
      unint64_t v6 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  *((void *)v6 + 2) + 1LL,  1,  v6);
      *(void *)(v47 + 24) = v6;
    }

    uint64_t v24 = *((void *)v6 + 2);
    uint64_t v23 = *((void *)v6 + 3);
    uint64_t v25 = v24 + 1;
    if (v24 >= v23 >> 1) {
      unint64_t v6 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (char *)(v23 > 1),  v24 + 1,  1,  v6);
    }
    uint64_t v26 = *(void *)(v0 + 16);
    *((void *)v6 + 2) = v25;
    v6[v24 + 32] = -30;
    *(void *)(v26 + 24) = v6;
    uint64_t v27 = *((void *)v6 + 3);
    uint64_t v28 = v24 + 2;
    if (v28 > (uint64_t)(v27 >> 1)) {
      unint64_t v6 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (char *)(v27 > 1),  v28,  1,  v6);
    }
    uint64_t v29 = *(void *)(v0 + 16);
    *((void *)v6 + 2) = v28;
    uint64_t v30 = &v6[v25];
    goto LABEL_31;
  }

  char v3 = (char *)v2[1];
  if (v3 != (char *)v2[2])
  {
    uint64_t v4 = *v3;
    LOBYTE(v1) = *v3;
    v2[1] = v3 + 1;
    uint64_t v5 = *(void *)(v0 + 16);
    unint64_t v6 = *(char **)(v5 + 24);
    if ((v4 & 0xFE) == 0xA8)
    {
      if (*((void *)v6 + 2))
      {
        swift_bridgeObjectRetain();
        uint64_t v7 = static String._fromUTF8Repairing(_:)();
        uint64_t v9 = v8;
        swift_bridgeObjectRelease();
        BOOL v10 = swift_isUniquelyReferenced_nonNull_native();
        char v11 = *(void *)(v5 + 24);
        uint64_t v12 = (void *)(*(void *)(v0 + 16) + 24LL);
        if ((v10 & 1) == 0)
        {
LABEL_7:
          *uint64_t v12 = specialized _ContiguousArrayBuffer.init(_uninitializedCount:minimumCapacity:)( 0LL,  *(void *)(v11 + 24) >> 1);
          swift_bridgeObjectRelease();
          return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8))(v7, v9);
        }

{
  uint64_t v0;
  __int16 v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  char *v11;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  int64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  char v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  char v33;
  uint64_t v34;
  void *v35;
  size_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v1 = *(_WORD *)(v0 + 104);
  if ((v1 & 0x100) != 0)
  {
    BOOL v10 = *(void *)(v0 + 16);
    char v11 = *(char **)(v10 + 24);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *(void *)(v10 + 24) = v11;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      uint64_t v37 = *(void *)(v0 + 16);
      char v11 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  *((void *)v11 + 2) + 1LL,  1,  v11);
      *(void *)(v37 + 24) = v11;
    }

    uint64_t v14 = *((void *)v11 + 2);
    uint64_t v13 = *((void *)v11 + 3);
    char v15 = v14 + 1;
    if (v14 >= v13 >> 1) {
      char v11 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (char *)(v13 > 1),  v14 + 1,  1,  v11);
    }
    char v16 = *(void *)(v0 + 16);
    *((void *)v11 + 2) = v15;
    v11[v14 + 32] = -30;
    *(void *)(v16 + 24) = v11;
    uint64_t v17 = *((void *)v11 + 3);
    unint64_t v18 = v14 + 2;
    if (v18 > (uint64_t)(v17 >> 1)) {
      char v11 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (char *)(v17 > 1),  v18,  1,  v11);
    }
    uint64_t v19 = *(void *)(v0 + 16);
    *((void *)v11 + 2) = v18;
    v11[v15 + 32] = 0x80;
    *(void *)(v19 + 24) = v11;
    swift_bridgeObjectRetain();
    uint64_t v4 = static String._fromUTF8Repairing(_:)();
    unint64_t v6 = v20;
    swift_bridgeObjectRelease();
    uint64_t v21 = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v8 = *(void *)(v19 + 24);
    uint64_t v9 = (void *)(*(void *)(v0 + 16) + 24LL);
    if (!v21) {
      goto LABEL_5;
    }
    goto LABEL_13;
  }

  uint64_t v2 = *(void *)(v0 + 16);
  char v3 = *(char **)(v2 + 24);
  if ((v1 & 0xFE) == 0xA8)
  {
    if (*((void *)v3 + 2))
    {
      swift_bridgeObjectRetain();
      uint64_t v4 = static String._fromUTF8Repairing(_:)();
      unint64_t v6 = v5;
      swift_bridgeObjectRelease();
      uint64_t v7 = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v8 = *(void *)(v2 + 24);
      uint64_t v9 = (void *)(*(void *)(v0 + 16) + 24LL);
      if ((v7 & 1) == 0)
      {
LABEL_5:
        *uint64_t v9 = specialized _ContiguousArrayBuffer.init(_uninitializedCount:minimumCapacity:)( 0LL,  *(void *)(v8 + 24) >> 1);
        swift_bridgeObjectRelease();
        return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8))(v4, v6);
      }

uint64_t specialized AsyncLineSequence.AsyncIterator.next()(__int16 a1)
{
  uint64_t v4 = *v2;
  *(void *)(*v2 + 32) = v1;
  swift_task_dealloc();
  if (!v1) {
    *(_WORD *)(v4 + 96) = a1;
  }
  return swift_task_switch();
}

{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v4 = *v2;
  *(void *)(*v2 + 64) = v1;
  swift_task_dealloc();
  if (!v1) {
    *(_WORD *)(v4 + 98) = a1;
  }
  return swift_task_switch();
}

{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v4 = *v2;
  uint64_t v5 = *v2;
  swift_task_dealloc();
  if (v1) {
    return (*(uint64_t (**)(void))(v5 + 8))();
  }
  *(_WORD *)(v4 + 100) = a1;
  return swift_task_switch();
}

{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v4 = *v2;
  uint64_t v5 = *v2;
  swift_task_dealloc();
  if (v1) {
    return (*(uint64_t (**)(void))(v5 + 8))();
  }
  *(_WORD *)(v4 + 102) = a1;
  return swift_task_switch();
}

{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v4 = *v2;
  uint64_t v5 = *v2;
  swift_task_dealloc();
  if (v1) {
    return (*(uint64_t (**)(void))(v5 + 8))();
  }
  *(_WORD *)(v4 + 104) = a1;
  return swift_task_switch();
}

{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v4 = *v2;
  *(void *)(*v2 + 32) = v1;
  swift_task_dealloc();
  if (!v1) {
    *(_WORD *)(v4 + 96) = a1;
  }
  return swift_task_switch();
}

{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v4 = *v2;
  *(void *)(*v2 + 64) = v1;
  swift_task_dealloc();
  if (!v1) {
    *(_WORD *)(v4 + 98) = a1;
  }
  return swift_task_switch();
}

{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v4 = *v2;
  uint64_t v5 = *v2;
  swift_task_dealloc();
  if (v1) {
    return (*(uint64_t (**)(void))(v5 + 8))();
  }
  *(_WORD *)(v4 + 100) = a1;
  return swift_task_switch();
}

{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v4 = *v2;
  uint64_t v5 = *v2;
  swift_task_dealloc();
  if (v1) {
    return (*(uint64_t (**)(void))(v5 + 8))();
  }
  *(_WORD *)(v4 + 102) = a1;
  return swift_task_switch();
}

{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v4 = *v2;
  uint64_t v5 = *v2;
  swift_task_dealloc();
  if (v1) {
    return (*(uint64_t (**)(void))(v5 + 8))();
  }
  *(_WORD *)(v4 + 104) = a1;
  return swift_task_switch();
}

{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v4 = *v2;
  *(void *)(*v2 + 32) = v1;
  swift_task_dealloc();
  if (!v1) {
    *(_WORD *)(v4 + 96) = a1;
  }
  return swift_task_switch();
}

{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v4 = *v2;
  *(void *)(*v2 + 64) = v1;
  swift_task_dealloc();
  if (!v1) {
    *(_WORD *)(v4 + 98) = a1;
  }
  return swift_task_switch();
}

{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v4 = *v2;
  uint64_t v5 = *v2;
  swift_task_dealloc();
  if (v1) {
    return (*(uint64_t (**)(void))(v5 + 8))();
  }
  *(_WORD *)(v4 + 100) = a1;
  return swift_task_switch();
}

{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v4 = *v2;
  uint64_t v5 = *v2;
  swift_task_dealloc();
  if (v1) {
    return (*(uint64_t (**)(void))(v5 + 8))();
  }
  *(_WORD *)(v4 + 102) = a1;
  return swift_task_switch();
}

{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v4 = *v2;
  uint64_t v5 = *v2;
  swift_task_dealloc();
  if (v1) {
    return (*(uint64_t (**)(void))(v5 + 8))();
  }
  *(_WORD *)(v4 + 104) = a1;
  return swift_task_switch();
}

uint64_t AsyncLineSequence.AsyncIterator.next()(uint64_t a1)
{
  *(void *)(v2 + 16) = a1;
  *(void *)(v2 + 24) = v1;
  char v3 = *(ValueMetadata **)(a1 + 16);
  *(void *)(v2 + 32) = v3;
  if (v3 == &type metadata for URL.AsyncBytes)
  {
    uint64_t v5 = (void *)swift_task_alloc();
    *(void *)(v2 + 168) = v5;
    unint64_t v6 = AsyncLineSequence.AsyncIterator.next();
  }

  else if (v3 == &type metadata for NSFileHandle.AsyncBytes)
  {
    uint64_t v5 = (void *)swift_task_alloc();
    *(void *)(v2 + 160) = v5;
    unint64_t v6 = AsyncLineSequence.AsyncIterator.next();
  }

  else
  {
    if (v3 != &type metadata for NSURLSession.AsyncBytes)
    {
      *(_DWORD *)(v2 + 176) = *(_DWORD *)(a1 + 40);
      return swift_task_switch();
    }

    uint64_t v5 = (void *)swift_task_alloc();
    *(void *)(v2 + 152) = v5;
    unint64_t v6 = AsyncLineSequence.AsyncIterator.next();
  }

  *uint64_t v5 = v2;
  v5[1] = v6;
  return v7();
}

uint64_t AsyncLineSequence.AsyncIterator.next()()
{
  uint64_t v1 = (unsigned __int8 *)(*(void *)(v0 + 24) + *(int *)(v0 + 176));
  if ((v1[1] & 1) != 0)
  {
    swift_getAssociatedTypeWitness();
    swift_getAssociatedConformanceWitness();
    uint64_t v2 = (void *)swift_task_alloc();
    *(void *)(v0 + 40) = v2;
    char v3 = AsyncLineSequence.AsyncIterator.next();
LABEL_47:
    *uint64_t v2 = v0;
    v2[1] = v3;
    return dispatch thunk of AsyncIteratorProtocol.next()();
  }

  int v4 = *v1;
  *(_WORD *)uint64_t v1 = 256;
  if (v4 == 13)
  {
    uint64_t v5 = (char **)(*(void *)(v0 + 24) + *(int *)(*(void *)(v0 + 16) + 36LL));
    if (*((void *)*v5 + 2))
    {
      swift_bridgeObjectRetain();
      uint64_t v6 = static String._fromUTF8Repairing(_:)();
      uint64_t v8 = v7;
      swift_bridgeObjectRelease();
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      BOOL v10 = *v5;
      if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      {
        specialized Array.replaceSubrange<A>(_:with:)(0LL, *((void *)v10 + 2));
      }

      else
      {
        if (*((void *)v10 + 3) >= 2uLL)
        {
          __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<UInt8>);
          uint64_t v23 = (void *)swift_allocObject();
          size_t v38 = _swift_stdlib_malloc_size(v23);
          v23[2] = 0LL;
          v23[3] = 2 * v38 - 64;
        }

        else
        {
          uint64_t v23 = (void *)MEMORY[0x18961AFE8];
        }

        *uint64_t v5 = (char *)v23;
        swift_bridgeObjectRelease();
      }

      goto LABEL_46;
    }

    char v17 = swift_isUniquelyReferenced_nonNull_native();
    unint64_t v18 = *v5;
    if ((v17 & 1) == 0)
    {
      if (*((void *)v18 + 3) >= 2uLL)
      {
        __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<UInt8>);
        uint64_t v30 = (void *)swift_allocObject();
        size_t v40 = _swift_stdlib_malloc_size(v30);
        v30[2] = 0LL;
        v30[3] = 2 * v40 - 64;
      }

      else
      {
        uint64_t v30 = (void *)MEMORY[0x18961AFE8];
      }

      *uint64_t v5 = (char *)v30;
      swift_bridgeObjectRelease();
      uint64_t v6 = 0LL;
      uint64_t v8 = 0LL;
      goto LABEL_46;
    }

    int64_t v19 = *((void *)v18 + 2);
    char v20 = swift_isUniquelyReferenced_nonNull_native();
    *uint64_t v5 = v18;
    if ((v20 & 1) == 0)
    {
      unint64_t v18 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  v19,  1,  v18);
      *uint64_t v5 = v18;
    }

    if (!v19)
    {
LABEL_20:
      uint64_t v6 = 0LL;
      uint64_t v8 = 0LL;
      *uint64_t v5 = v18;
LABEL_46:
      *(void *)(v0 + 56) = v6;
      *(void *)(v0 + 64) = v8;
      swift_getAssociatedTypeWitness();
      swift_getAssociatedConformanceWitness();
      uint64_t v2 = (void *)swift_task_alloc();
      *(void *)(v0 + 72) = v2;
      char v3 = AsyncLineSequence.AsyncIterator.next();
      goto LABEL_47;
    }

    uint64_t v21 = *((void *)v18 + 2);
    uint64_t v22 = v21 - v19;
    if (v21 - v19 >= 0)
    {
      memmove(v18 + 32, &v18[v19 + 32], v21 - v19);
      *((void *)v18 + 2) = v22;
      goto LABEL_20;
    }

    return _fatalErrorMessage(_:_:file:line:flags:)();
  }

  if ((v4 - 10) > 2)
  {
    if (v4 == 226)
    {
      *(void *)(v0 + 104) = swift_getAssociatedTypeWitness();
      *(void *)(v0 + 112) = swift_getAssociatedConformanceWitness();
      uint64_t v2 = (void *)swift_task_alloc();
      *(void *)(v0 + 120) = v2;
      char v3 = AsyncLineSequence.AsyncIterator.next();
      goto LABEL_47;
    }

    if (v4 == 194)
    {
      swift_getAssociatedTypeWitness();
      swift_getAssociatedConformanceWitness();
      uint64_t v2 = (void *)swift_task_alloc();
      *(void *)(v0 + 88) = v2;
      char v3 = AsyncLineSequence.AsyncIterator.next();
      goto LABEL_47;
    }

    uint64_t v31 = *(void *)(v0 + 24);
    uint64_t v32 = *(int *)(*(void *)(v0 + 16) + 36LL);
    uint64_t v33 = *(char **)(v31 + v32);
    char v34 = swift_isUniquelyReferenced_nonNull_native();
    *(void *)(v31 + v32) = v33;
    if ((v34 & 1) == 0)
    {
      uint64_t v33 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  *((void *)v33 + 2) + 1LL,  1,  v33);
      *(void *)(v31 + v32) = v33;
    }

    unint64_t v36 = *((void *)v33 + 2);
    unint64_t v35 = *((void *)v33 + 3);
    if (v36 >= v35 >> 1) {
      uint64_t v33 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (char *)(v35 > 1),  v36 + 1,  1,  v33);
    }
    *((void *)v33 + 2) = v36 + 1;
    v33[v36 + 32] = v4;
    *(void *)(v31 + v32) = v33;
    return swift_task_switch();
  }

  char v11 = (char **)(*(void *)(v0 + 24) + *(int *)(*(void *)(v0 + 16) + 36LL));
  if (!*((void *)*v11 + 2))
  {
    char v24 = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v25 = *v11;
    if ((v24 & 1) != 0)
    {
      int64_t v26 = *((void *)v25 + 2);
      char v27 = swift_isUniquelyReferenced_nonNull_native();
      *char v11 = v25;
      if ((v27 & 1) == 0)
      {
        uint64_t v25 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  v26,  1,  v25);
        *char v11 = v25;
      }

      if (v26)
      {
        uint64_t v28 = *((void *)v25 + 2);
        uint64_t v29 = v28 - v26;
        if (v28 - v26 < 0) {
          return _fatalErrorMessage(_:_:file:line:flags:)();
        }
        memmove(v25 + 32, &v25[v26 + 32], v28 - v26);
        *((void *)v25 + 2) = v29;
      }

      *char v11 = v25;
    }

    else
    {
      if (*((void *)v25 + 3) >= 2uLL)
      {
        __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<UInt8>);
        unint64_t v39 = (void *)swift_allocObject();
        size_t v41 = _swift_stdlib_malloc_size(v39);
        v39[2] = 0LL;
        v39[3] = 2 * v41 - 64;
      }

      else
      {
        unint64_t v39 = (void *)MEMORY[0x18961AFE8];
      }

      *char v11 = (char *)v39;
      swift_bridgeObjectRelease();
    }

    return swift_task_switch();
  }

  swift_bridgeObjectRetain();
  uint64_t v12 = static String._fromUTF8Repairing(_:)();
  uint64_t v14 = v13;
  swift_bridgeObjectRelease();
  char v15 = swift_isUniquelyReferenced_nonNull_native();
  char v16 = *v11;
  if ((v15 & 1) != 0)
  {
    specialized Array.replaceSubrange<A>(_:with:)(0LL, *((void *)v16 + 2));
  }

  else
  {
    *char v11 = (char *)specialized _ContiguousArrayBuffer.init(_uninitializedCount:minimumCapacity:)( 0LL,  *((void *)v16 + 3) >> 1);
    swift_bridgeObjectRelease();
  }

  return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8))(v12, v14);
}

{
  uint64_t v0;
  uint64_t v1;
  *(void *)(*(void *)v1 + 48LL) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v0;
  int v1;
  char v2;
  char **v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int isUniquelyReferenced_nonNull_native;
  char *v8;
  char **v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  char *v14;
  uint64_t v15;
  char v16;
  void *v18;
  uint64_t (*v19)();
  char v20;
  char *v21;
  int64_t v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  char v27;
  char *v28;
  int64_t v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  char v37;
  unint64_t v38;
  unint64_t v39;
  size_t v40;
  void *v41;
  size_t v42;
  size_t v43;
  uint64_t v1 = *(unsigned __int8 *)(v0 + 180);
  uint64_t v2 = *(_BYTE *)(v0 + 181);
  *(_WORD *)(*(void *)(v0 + 24) + *(int *)(v0 + 176)) = 256;
  if ((v2 & 1) != 0)
  {
    char v3 = (char **)(*(void *)(v0 + 24) + *(int *)(*(void *)(v0 + 16) + 36LL));
    int v4 = *((void *)*v3 + 2);
    if (!v4)
    {
      uint64_t v6 = 0LL;
      return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8))(v4, v6);
    }

    swift_bridgeObjectRetain();
    int v4 = static String._fromUTF8Repairing(_:)();
    uint64_t v6 = v5;
    swift_bridgeObjectRelease();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v8 = *v3;
    if (isUniquelyReferenced_nonNull_native) {
      goto LABEL_4;
    }
    goto LABEL_12;
  }

  if (v1 == 13)
  {
    uint64_t v9 = (char **)(*(void *)(v0 + 24) + *(int *)(*(void *)(v0 + 16) + 36LL));
    if (*((void *)*v9 + 2))
    {
      swift_bridgeObjectRetain();
      BOOL v10 = static String._fromUTF8Repairing(_:)();
      uint64_t v12 = v11;
      swift_bridgeObjectRelease();
      uint64_t v13 = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v14 = *v9;
      if ((v13 & 1) != 0)
      {
        specialized Array.replaceSubrange<A>(_:with:)(0LL, *((void *)v14 + 2));
      }

      else
      {
        if (*((void *)v14 + 3) >= 2uLL)
        {
          __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<UInt8>);
          int64_t v26 = (void *)swift_allocObject();
          size_t v40 = _swift_stdlib_malloc_size(v26);
          v26[2] = 0LL;
          v26[3] = 2 * v40 - 64;
        }

        else
        {
          int64_t v26 = (void *)MEMORY[0x18961AFE8];
        }

        *uint64_t v9 = (char *)v26;
        swift_bridgeObjectRelease();
      }

      goto LABEL_48;
    }

    char v20 = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v21 = *v9;
    if ((v20 & 1) == 0)
    {
      if (*((void *)v21 + 3) >= 2uLL)
      {
        __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<UInt8>);
        uint64_t v33 = (void *)swift_allocObject();
        uint64_t v42 = _swift_stdlib_malloc_size(v33);
        v33[2] = 0LL;
        v33[3] = 2 * v42 - 64;
      }

      else
      {
        uint64_t v33 = (void *)MEMORY[0x18961AFE8];
      }

      *uint64_t v9 = (char *)v33;
      swift_bridgeObjectRelease();
      BOOL v10 = 0LL;
      uint64_t v12 = 0LL;
      goto LABEL_48;
    }

    uint64_t v22 = *((void *)v21 + 2);
    uint64_t v23 = swift_isUniquelyReferenced_nonNull_native();
    *uint64_t v9 = v21;
    if ((v23 & 1) == 0)
    {
      uint64_t v21 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  v22,  1,  v21);
      *uint64_t v9 = v21;
    }

    if (!v22)
    {
LABEL_24:
      BOOL v10 = 0LL;
      uint64_t v12 = 0LL;
      *uint64_t v9 = v21;
LABEL_48:
      *(void *)(v0 + 56) = v10;
      *(void *)(v0 + 64) = v12;
      swift_getAssociatedTypeWitness();
      swift_getAssociatedConformanceWitness();
      unint64_t v18 = (void *)swift_task_alloc();
      *(void *)(v0 + 72) = v18;
      int64_t v19 = AsyncLineSequence.AsyncIterator.next();
      goto LABEL_49;
    }

    char v24 = *((void *)v21 + 2);
    uint64_t v25 = v24 - v22;
    if (v24 - v22 >= 0)
    {
      memmove(v21 + 32, &v21[v22 + 32], v24 - v22);
      *((void *)v21 + 2) = v25;
      goto LABEL_24;
    }

    return _fatalErrorMessage(_:_:file:line:flags:)();
  }

  if ((v1 - 10) > 2)
  {
    if (v1 == 226)
    {
      *(void *)(v0 + 104) = swift_getAssociatedTypeWitness();
      *(void *)(v0 + 112) = swift_getAssociatedConformanceWitness();
      unint64_t v18 = (void *)swift_task_alloc();
      *(void *)(v0 + 120) = v18;
      int64_t v19 = AsyncLineSequence.AsyncIterator.next();
    }

    else
    {
      if (v1 != 194)
      {
        char v34 = *(void *)(v0 + 24);
        unint64_t v35 = *(int *)(*(void *)(v0 + 16) + 36LL);
        unint64_t v36 = *(char **)(v34 + v35);
        uint64_t v37 = swift_isUniquelyReferenced_nonNull_native();
        *(void *)(v34 + v35) = v36;
        if ((v37 & 1) == 0)
        {
          unint64_t v36 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  *((void *)v36 + 2) + 1LL,  1,  v36);
          *(void *)(v34 + v35) = v36;
        }

        unint64_t v39 = *((void *)v36 + 2);
        size_t v38 = *((void *)v36 + 3);
        if (v39 >= v38 >> 1) {
          unint64_t v36 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (char *)(v38 > 1),  v39 + 1,  1,  v36);
        }
        *((void *)v36 + 2) = v39 + 1;
        v36[v39 + 32] = v1;
        *(void *)(v34 + v35) = v36;
        return swift_task_switch();
      }

      swift_getAssociatedTypeWitness();
      swift_getAssociatedConformanceWitness();
      unint64_t v18 = (void *)swift_task_alloc();
      *(void *)(v0 + 88) = v18;
      int64_t v19 = AsyncLineSequence.AsyncIterator.next();
    }

{
  uint64_t v0;
  *(_WORD *)(*(void *)(v0 + 24) + *(int *)(v0 + 176)) = 256;
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  uint64_t v1;
  *(void *)(*(void *)v1 + 80LL) = v0;
  swift_task_dealloc();
  if (v0) {
    swift_bridgeObjectRelease();
  }
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;
  int v2;
  if ((*(_BYTE *)(v0 + 189) & 1) != 0)
  {
    uint64_t v1 = *(void *)(v0 + 64);
    return (*(uint64_t (**)(void, uint64_t))(v0 + 8))(*(void *)(v0 + 56), v1);
  }

  uint64_t v2 = *(unsigned __int8 *)(v0 + 188);
  if (v2 != 10) {
    *(_WORD *)(*(void *)(v0 + 24) + *(int *)(v0 + 176)) = v2;
  }
  uint64_t v1 = *(void *)(v0 + 64);
  if (v1) {
    return (*(uint64_t (**)(void, uint64_t))(v0 + 8))(*(void *)(v0 + 56), v1);
  }
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;
  *(void *)(*(void *)v1 + 96LL) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char **v3;
  char *v4;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  char *v12;
  int v13;
  char *v14;
  uint64_t v15;
  char v16;
  char v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  int64_t v23;
  char v24;
  int64_t v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  size_t v29;
  uint64_t v2 = *(void *)(v0 + 16);
  uint64_t v1 = *(void *)(v0 + 24);
  if ((*(_BYTE *)(v0 + 187) & 1) != 0)
  {
    char v3 = (char **)(v1 + *(int *)(v2 + 36));
    int v4 = *v3;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *char v3 = v4;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      int v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  *((void *)v4 + 2) + 1LL,  1,  v4);
      *char v3 = v4;
    }

    uint64_t v7 = *((void *)v4 + 2);
    uint64_t v6 = *((void *)v4 + 3);
    if (v7 >= v6 >> 1) {
      int v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (char *)(v6 > 1),  v7 + 1,  1,  v4);
    }
    *((void *)v4 + 2) = v7 + 1;
    v4[v7 + 32] = -62;
    *char v3 = v4;
    swift_bridgeObjectRetain();
    uint64_t v8 = static String._fromUTF8Repairing(_:)();
    BOOL v10 = v9;
    swift_bridgeObjectRelease();
    char v11 = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v12 = *v3;
    if (v11) {
      goto LABEL_7;
    }
    goto LABEL_11;
  }

  uint64_t v13 = *(unsigned __int8 *)(v0 + 186);
  char v3 = (char **)(v1 + *(int *)(v2 + 36));
  uint64_t v14 = *v3;
  if (v13 != 133)
  {
    unint64_t v18 = swift_isUniquelyReferenced_nonNull_native();
    *char v3 = v14;
    if ((v18 & 1) == 0)
    {
      uint64_t v14 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  *((void *)v14 + 2) + 1LL,  1,  v14);
      *char v3 = v14;
    }

    char v20 = *((void *)v14 + 2);
    int64_t v19 = *((void *)v14 + 3);
    uint64_t v21 = v20 + 1;
    if (v20 >= v19 >> 1) {
      uint64_t v14 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (char *)(v19 > 1),  v20 + 1,  1,  v14);
    }
    *((void *)v14 + 2) = v21;
    v14[v20 + 32] = -62;
    *char v3 = v14;
    uint64_t v22 = *((void *)v14 + 3);
    uint64_t v23 = v20 + 2;
    if (v23 > (uint64_t)(v22 >> 1)) {
      uint64_t v14 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (char *)(v22 > 1),  v23,  1,  v14);
    }
    *((void *)v14 + 2) = v23;
    v14[v21 + 32] = v13;
    goto LABEL_20;
  }

  if (*((void *)v14 + 2))
  {
    swift_bridgeObjectRetain();
    uint64_t v8 = static String._fromUTF8Repairing(_:)();
    BOOL v10 = v15;
    swift_bridgeObjectRelease();
    char v16 = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v12 = *v3;
    if ((v16 & 1) != 0)
    {
LABEL_7:
      specialized Array.replaceSubrange<A>(_:with:)(0LL, *((void *)v12 + 2));
      return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8))(v8, v10);
    }

{
  uint64_t v0;
  uint64_t v1;
  *(void *)(*(void *)v1 + 128LL) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v0;
  int v1;
  char **v2;
  char *v3;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  char *v11;
  void *v12;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  int64_t v22;
  uint64_t v1 = *(unsigned __int8 *)(v0 + 182);
  if ((*(_BYTE *)(v0 + 183) & 1) != 0)
  {
    uint64_t v2 = (char **)(*(void *)(v0 + 24) + *(int *)(*(void *)(v0 + 16) + 36LL));
    char v3 = *v2;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *uint64_t v2 = v3;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      char v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  *((void *)v3 + 2) + 1LL,  1,  v3);
      *uint64_t v2 = v3;
    }

    uint64_t v6 = *((void *)v3 + 2);
    uint64_t v5 = *((void *)v3 + 3);
    if (v6 >= v5 >> 1) {
      char v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (char *)(v5 > 1),  v6 + 1,  1,  v3);
    }
    *((void *)v3 + 2) = v6 + 1;
    v3[v6 + 32] = -30;
    *uint64_t v2 = v3;
    swift_bridgeObjectRetain();
    uint64_t v7 = static String._fromUTF8Repairing(_:)();
    uint64_t v9 = v8;
    swift_bridgeObjectRelease();
    BOOL v10 = swift_isUniquelyReferenced_nonNull_native();
    char v11 = *v2;
    if (v10)
    {
      specialized Array.replaceSubrange<A>(_:with:)(0LL, *((void *)v11 + 2));
    }

    else
    {
      *uint64_t v2 = (char *)specialized _ContiguousArrayBuffer.init(_uninitializedCount:minimumCapacity:)( 0LL,  *((void *)v11 + 3) >> 1);
      swift_bridgeObjectRelease();
    }

    return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8))(v7, v9);
  }

  else if (v1 == 128)
  {
    uint64_t v12 = (void *)swift_task_alloc();
    *(void *)(v0 + 136) = v12;
    *uint64_t v12 = v0;
    v12[1] = AsyncLineSequence.AsyncIterator.next();
    return dispatch thunk of AsyncIteratorProtocol.next()();
  }

  else
  {
    uint64_t v14 = *(void *)(v0 + 24);
    char v15 = *(int *)(*(void *)(v0 + 16) + 36LL);
    char v16 = *(char **)(v14 + v15);
    char v17 = swift_isUniquelyReferenced_nonNull_native();
    *(void *)(v14 + v15) = v16;
    if ((v17 & 1) == 0)
    {
      char v16 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  *((void *)v16 + 2) + 1LL,  1,  v16);
      *(void *)(v14 + v15) = v16;
    }

    int64_t v19 = *((void *)v16 + 2);
    unint64_t v18 = *((void *)v16 + 3);
    char v20 = v19 + 1;
    if (v19 >= v18 >> 1) {
      char v16 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (char *)(v18 > 1),  v19 + 1,  1,  v16);
    }
    *((void *)v16 + 2) = v20;
    v16[v19 + 32] = -30;
    *(void *)(v14 + v15) = v16;
    uint64_t v21 = *((void *)v16 + 3);
    uint64_t v22 = v19 + 2;
    if (v22 > (uint64_t)(v21 >> 1)) {
      char v16 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (char *)(v21 > 1),  v22,  1,  v16);
    }
    *((void *)v16 + 2) = v22;
    v16[v20 + 32] = v1;
    *(void *)(v14 + v15) = v16;
    return swift_task_switch();
  }

{
  uint64_t v0;
  uint64_t v1;
  *(void *)(*(void *)v1 + 144LL) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char **v3;
  char *v4;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  char *v15;
  char v16;
  char *v17;
  uint64_t v18;
  char v19;
  char v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  char v28;
  char *v29;
  void *v30;
  size_t v31;
  uint64_t v2 = *(void *)(v0 + 16);
  uint64_t v1 = *(void *)(v0 + 24);
  if ((*(_BYTE *)(v0 + 185) & 1) != 0)
  {
    char v3 = (char **)(v1 + *(int *)(v2 + 36));
    int v4 = *v3;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *char v3 = v4;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      int v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  *((void *)v4 + 2) + 1LL,  1,  v4);
      *char v3 = v4;
    }

    uint64_t v7 = *((void *)v4 + 2);
    uint64_t v6 = *((void *)v4 + 3);
    uint64_t v8 = v7 + 1;
    if (v7 >= v6 >> 1) {
      int v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (char *)(v6 > 1),  v7 + 1,  1,  v4);
    }
    *((void *)v4 + 2) = v8;
    v4[v7 + 32] = -30;
    *char v3 = v4;
    uint64_t v9 = *((void *)v4 + 3);
    BOOL v10 = v7 + 2;
    if (v10 > (uint64_t)(v9 >> 1)) {
      int v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (char *)(v9 > 1),  v10,  1,  v4);
    }
    *((void *)v4 + 2) = v10;
    v4[v8 + 32] = 0x80;
    *char v3 = v4;
    swift_bridgeObjectRetain();
    char v11 = static String._fromUTF8Repairing(_:)();
    uint64_t v13 = v12;
    swift_bridgeObjectRelease();
    uint64_t v14 = swift_isUniquelyReferenced_nonNull_native();
    char v15 = *v3;
    if (v14) {
      goto LABEL_9;
    }
    goto LABEL_13;
  }

  char v16 = *(_BYTE *)(v0 + 184);
  char v3 = (char **)(v1 + *(int *)(v2 + 36));
  char v17 = *v3;
  if ((v16 & 0xFE) == 0xA8)
  {
    if (*((void *)v17 + 2))
    {
      swift_bridgeObjectRetain();
      char v11 = static String._fromUTF8Repairing(_:)();
      uint64_t v13 = v18;
      swift_bridgeObjectRelease();
      int64_t v19 = swift_isUniquelyReferenced_nonNull_native();
      char v15 = *v3;
      if ((v19 & 1) != 0)
      {
LABEL_9:
        specialized Array.replaceSubrange<A>(_:with:)(0LL, *((void *)v15 + 2));
        return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8))(v11, v13);
      }

{
  uint64_t v0;
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t AsyncLineSequence.AsyncIterator.next()(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = *v3;
  uint64_t v7 = swift_task_dealloc();
  if (!v2)
  {
    uint64_t v7 = a1;
    uint64_t v8 = a2;
  }

  return (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 8))(v7, v8);
}

{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v6 = *v3;
  uint64_t v7 = swift_task_dealloc();
  if (!v2)
  {
    uint64_t v7 = a1;
    uint64_t v8 = a2;
  }

  return (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 8))(v7, v8);
}

{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v6 = *v3;
  uint64_t v7 = swift_task_dealloc();
  if (!v2)
  {
    uint64_t v7 = a1;
    uint64_t v8 = a2;
  }

  return (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 8))(v7, v8);
}

uint64_t protocol witness for AsyncIteratorProtocol.next() in conformance AsyncLineSequence<A>.AsyncIterator( uint64_t a1, uint64_t a2)
{
  *(void *)(v2 + 16) = a1;
  int v4 = (void *)swift_task_alloc();
  *(void *)(v2 + 24) = v4;
  *int v4 = v2;
  v4[1] = protocol witness for AsyncIteratorProtocol.next() in conformance AsyncLineSequence<A>.AsyncIterator;
  return AsyncLineSequence.AsyncIterator.next()(a2);
}

{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v6 = *v3;
  uint64_t v7 = *v3;
  swift_task_dealloc();
  if (!v2)
  {
    uint64_t v8 = *(void **)(v6 + 16);
    *uint64_t v8 = a1;
    v8[1] = a2;
  }

  return (*(uint64_t (**)(void))(v7 + 8))();
}

uint64_t _s10Foundation17AsyncLineSequenceV0B8IteratorVyx_GScIAAScI4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTW( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[2] = a4;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v4[3] = AssociatedTypeWitness;
  v4[4] = *(void *)(AssociatedTypeWitness - 8);
  v4[5] = swift_task_alloc();
  uint64_t v6 = (void *)swift_task_alloc();
  void v4[6] = v6;
  *uint64_t v6 = v4;
  v6[1] = _s10Foundation17AsyncLineSequenceV0B8IteratorVyx_GScIAAScI4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTWTQ0_;
  return _sScIsE4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKF();
}

uint64_t _s10Foundation17AsyncLineSequenceV0B8IteratorVyx_GScIAAScI4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTWTQ0_()
{
  uint64_t v2 = (void *)*v1;
  char v3 = (void *)*v1;
  swift_task_dealloc();
  if (v0) {
    (*(void (**)(void, void, void))(v2[4] + 32LL))(v2[2], v2[5], v2[3]);
  }
  swift_task_dealloc();
  return ((uint64_t (*)(void))v3[1])();
}

uint64_t AsyncLineSequence.makeAsyncIterator()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = *(void *)(a1 + 16);
  MEMORY[0x1895F8858](a1);
  (*(void (**)(char *))(v6 + 16))((char *)&v10 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v7 = *(void *)(a1 + 24);
  dispatch thunk of AsyncSequence.makeAsyncIterator()();
  uint64_t result = type metadata accessor for AsyncLineSequence.AsyncIterator(0LL, v4, v7, v8);
  *(void *)(a2 + *(int *)(result + 36)) = MEMORY[0x18961AFE8];
  *(_WORD *)(a2 + *(int *)(result + 40)) = 256;
  return result;
}

uint64_t protocol witness for AsyncSequence.makeAsyncIterator() in conformance AsyncLineSequence<A>@<X0>( uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(a1 - 8) + 8LL))(v2, a1);
}

uint64_t AsyncSequence<>.lines.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(a1 - 8) + 16LL))(a2, v2);
}

void *specialized _ContiguousArrayBuffer.init(_uninitializedCount:minimumCapacity:)( uint64_t a1, uint64_t a2)
{
  if (a2 <= a1) {
    uint64_t v2 = a1;
  }
  else {
    uint64_t v2 = a2;
  }
  if (!v2) {
    return (void *)MEMORY[0x18961AFE8];
  }
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<UInt8>);
  uint64_t v4 = (void *)swift_allocObject();
  size_t v5 = _swift_stdlib_malloc_size(v4);
  v4[2] = a1;
  v4[3] = 2 * v5 - 64;
  return v4;
}

{
  uint64_t v2;
  void *v4;
  int64_t v5;
  uint64_t v6;
  if (a2 <= a1) {
    uint64_t v2 = a1;
  }
  else {
    uint64_t v2 = a2;
  }
  if (!v2) {
    return (void *)MEMORY[0x18961AFE8];
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Unicode.Scalar>);
  uint64_t v4 = (void *)swift_allocObject();
  size_t v5 = _swift_stdlib_malloc_size(v4);
  uint64_t v6 = v5 - 32;
  if (v5 < 32) {
    uint64_t v6 = v5 - 29;
  }
  v4[2] = a1;
  v4[3] = 2 * (v6 >> 2);
  return v4;
}

{
  uint64_t v2;
  void *v4;
  int64_t v5;
  int64_t v6;
  if (a2 <= a1) {
    uint64_t v2 = a1;
  }
  else {
    uint64_t v2 = a2;
  }
  if (!v2) {
    return (void *)MEMORY[0x18961AFE8];
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<UInt16>);
  uint64_t v4 = (void *)swift_allocObject();
  size_t v5 = _swift_stdlib_malloc_size(v4);
  uint64_t v6 = v5 - 32;
  if (v5 < 32) {
    uint64_t v6 = v5 - 31;
  }
  v4[2] = a1;
  v4[3] = v6 & 0xFFFFFFFFFFFFFFFELL;
  return v4;
}

uint64_t type metadata accessor for AsyncLineSequence.AsyncIterator( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata( a1,  a2,  a3,  a4,  (uint64_t)&nominal type descriptor for AsyncLineSequence.AsyncIterator);
}

uint64_t associated type witness table accessor for AsyncIteratorProtocol.Failure : Error in AsyncLineSequence<A>.AsyncIterator()
{
  return swift_getAssociatedConformanceWitness();
}

void associated type witness table accessor for AsyncSequence.AsyncIterator : AsyncIteratorProtocol in AsyncLineSequence<A>()
{
}

uint64_t type metadata completion function for AsyncLineSequence()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0LL;
  }

  return result;
}

uint64_t getEnumTagSinglePayload for AsyncLineSequence(uint64_t a1, unsigned int a2, uint64_t a3)
{
  if (!a2) {
    return 0LL;
  }
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8LL);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  unsigned int v6 = a2 - v5;
  if (a2 <= v5) {
    goto LABEL_18;
  }
  uint64_t v7 = *(void *)(v4 + 64);
  char v8 = 8 * v7;
  if (v7 <= 3)
  {
    unsigned int v10 = ((v6 + ~(-1 << v8)) >> v8) + 1;
    if (HIWORD(v10))
    {
      int v9 = *(_DWORD *)(a1 + v7);
      if (!v9) {
        goto LABEL_18;
      }
      goto LABEL_11;
    }

    if (v10 > 0xFF)
    {
      int v9 = *(unsigned __int16 *)(a1 + v7);
      if (!*(_WORD *)(a1 + v7)) {
        goto LABEL_18;
      }
      goto LABEL_11;
    }

    if (v10 < 2)
    {
LABEL_18:
      if (v5) {
        return (*(uint64_t (**)(void))(v4 + 48))();
      }
      return 0LL;
    }
  }

  int v9 = *(unsigned __int8 *)(a1 + v7);
  if (!*(_BYTE *)(a1 + v7)) {
    goto LABEL_18;
  }
LABEL_11:
  int v11 = (v9 - 1) << v8;
  if (!(_DWORD)v7) {
    return v5 + v11 + 1;
  }
  return ((uint64_t (*)(void))((char *)&loc_18305A2A0 + 4 * byte_183730390[(v7 - 1)]))();
}

void storeEnumTagSinglePayload for AsyncLineSequence( _WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8LL);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  size_t v8 = *(void *)(v6 + 64);
  BOOL v9 = a3 >= v7;
  unsigned int v10 = a3 - v7;
  if (v10 != 0 && v9)
  {
    if (v8 <= 3)
    {
      unsigned int v13 = ((v10 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v13))
      {
        unsigned int v11 = 4u;
      }

      else if (v13 >= 0x100)
      {
        unsigned int v11 = 2;
      }

      else
      {
        unsigned int v11 = v13 > 1;
      }
    }

    else
    {
      unsigned int v11 = 1u;
    }
  }

  else
  {
    unsigned int v11 = 0u;
  }

  if (v7 < a2)
  {
    unsigned int v12 = ~v7 + a2;
    if (v8 < 4)
    {
      if ((_DWORD)v8)
      {
        int v14 = v12 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if ((_DWORD)v8 == 3)
        {
          *a1 = v14;
          *((_BYTE *)a1 + 2) = BYTE2(v14);
        }

        else if ((_DWORD)v8 == 2)
        {
          *a1 = v14;
        }

        else
        {
          *(_BYTE *)a1 = v14;
        }
      }
    }

    else
    {
      bzero(a1, *(void *)(v6 + 64));
      *(_DWORD *)a1 = v12;
    }

    __asm { BR              X10 }
  }

  __asm { BR              X11 }

uint64_t type metadata accessor for AsyncLineSequence(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for AsyncLineSequence);
}

uint64_t type metadata completion function for AsyncLineSequence.AsyncIterator()
{
  uint64_t result = swift_getAssociatedTypeWitness();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0LL;
  }

  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for AsyncLineSequence.AsyncIterator(uint64_t *a1, uint64_t *a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  int v7 = *(_DWORD *)(v5 + 80);
  if ((v7 & 0x1000F8) != 0 || ((v6 + 7) & 0xFFFFFFFFFFFFFFF8LL) + 10 > 0x18)
  {
    uint64_t v9 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v9 + ((unsigned __int16)((v7 & 0xF8) + 23) & (unsigned __int16)~(v7 & 0xF8) & 0x1F8));
    swift_retain();
  }

  else
  {
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v5 + 16))(a1, a2, AssociatedTypeWitness);
    unint64_t v10 = ((unint64_t)a1 + v6 + 7) & 0xFFFFFFFFFFFFFFF8LL;
    unint64_t v11 = ((unint64_t)a2 + v6 + 7) & 0xFFFFFFFFFFFFFFF8LL;
    *(void *)unint64_t v10 = *(void *)v11;
    *(_WORD *)(v10 + 8) = *(_WORD *)(v11 + 8);
    swift_bridgeObjectRetain();
  }

  return a1;
}

uint64_t destroy for AsyncLineSequence.AsyncIterator(uint64_t a1)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 8LL))(a1, AssociatedTypeWitness);
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for AsyncLineSequence.AsyncIterator(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(a1, a2, AssociatedTypeWitness);
  uint64_t v6 = *(void *)(v5 + 64) + 7LL;
  unint64_t v7 = (v6 + a1) & 0xFFFFFFFFFFFFFFF8LL;
  unint64_t v8 = (v6 + a2) & 0xFFFFFFFFFFFFFFF8LL;
  *(void *)unint64_t v7 = *(void *)v8;
  *(_WORD *)(v7 + 8) = *(_WORD *)(v8 + 8);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for AsyncLineSequence.AsyncIterator(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 24))(a1, a2, AssociatedTypeWitness);
  uint64_t v6 = *(void *)(v5 + 64) + 7LL;
  unint64_t v7 = (v6 + a1) & 0xFFFFFFFFFFFFFFF8LL;
  unint64_t v8 = (v6 + a2) & 0xFFFFFFFFFFFFFFF8LL;
  *(void *)unint64_t v7 = *(void *)v8;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_WORD *)(v7 + 8) = *(_WORD *)(v8 + 8);
  return a1;
}

uint64_t initializeWithTake for AsyncLineSequence.AsyncIterator(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 32))(a1, a2, AssociatedTypeWitness);
  uint64_t v6 = *(void *)(v5 + 64) + 7LL;
  unint64_t v7 = (v6 + a1) & 0xFFFFFFFFFFFFFFF8LL;
  unint64_t v8 = (v6 + a2) & 0xFFFFFFFFFFFFFFF8LL;
  *(void *)unint64_t v7 = *(void *)v8;
  *(_WORD *)(v7 + 8) = *(_WORD *)(v8 + 8);
  return a1;
}

uint64_t assignWithTake for AsyncLineSequence.AsyncIterator(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 40))(a1, a2, AssociatedTypeWitness);
  uint64_t v6 = *(void *)(v5 + 64) + 7LL;
  unint64_t v7 = (v6 + a1) & 0xFFFFFFFFFFFFFFF8LL;
  unint64_t v8 = (v6 + a2) & 0xFFFFFFFFFFFFFFF8LL;
  *(void *)unint64_t v7 = *(void *)v8;
  swift_bridgeObjectRelease();
  *(_WORD *)(v7 + 8) = *(_WORD *)(v8 + 8);
  return a1;
}

uint64_t getEnumTagSinglePayload for AsyncLineSequence.AsyncIterator(uint64_t a1, unsigned int a2)
{
  uint64_t v4 = *(void *)(swift_getAssociatedTypeWitness() - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  if (v5 <= 0x7FFFFFFF) {
    unsigned int v6 = 0x7FFFFFFF;
  }
  else {
    unsigned int v6 = *(_DWORD *)(v4 + 84);
  }
  if (!a2) {
    return 0LL;
  }
  uint64_t v7 = *(void *)(v4 + 64);
  if (v6 < a2)
  {
    unsigned int v8 = ((v7 + 7) & 0xFFFFFFF8) + 10;
    if (v8 <= 3) {
      unsigned int v9 = ((a2 - v6 + 0xFFFF) >> (8 * v8)) + 1;
    }
    else {
      unsigned int v9 = 2;
    }
    if (v9 >= 0x10000) {
      unsigned int v10 = 4;
    }
    else {
      unsigned int v10 = 2;
    }
    if (v9 < 0x100) {
      unsigned int v10 = 1;
    }
    if (v9 >= 2) {
      uint64_t v11 = v10;
    }
    else {
      uint64_t v11 = 0LL;
    }
    __asm { BR              X15 }
  }

  if (v5 >= 0x7FFFFFFF) {
    return (*(uint64_t (**)(uint64_t))(v4 + 48))(a1);
  }
  unint64_t v13 = *(void *)((a1 + v7 + 7) & 0xFFFFFFFFFFFFF8LL);
  if (v13 >= 0xFFFFFFFF) {
    LODWORD(v13) = -1;
  }
  return (v13 + 1);
}

void storeEnumTagSinglePayload for AsyncLineSequence.AsyncIterator( unsigned int *a1, unsigned int a2, unsigned int a3)
{
  uint64_t v6 = *(void *)(swift_getAssociatedTypeWitness() - 8);
  if (*(_DWORD *)(v6 + 84) <= 0x7FFFFFFFu) {
    unsigned int v7 = 0x7FFFFFFF;
  }
  else {
    unsigned int v7 = *(_DWORD *)(v6 + 84);
  }
  size_t v8 = ((*(void *)(v6 + 64) + 7LL) & 0xFFFFFFFFFFFFFFF8LL) + 10;
  if (v7 >= a3)
  {
    int v11 = 0u;
    if (v7 >= a2) {
      goto LABEL_17;
    }
  }

  else
  {
    else {
      unsigned int v9 = 2;
    }
    if (v9 >= 0x10000) {
      int v10 = 4;
    }
    else {
      int v10 = 2;
    }
    if (v9 < 0x100) {
      int v10 = 1;
    }
    if (v9 >= 2) {
      int v11 = v10;
    }
    else {
      int v11 = 0;
    }
    if (v7 >= a2) {
LABEL_17:
    }
      __asm { BR              X12 }
  }

  unsigned int v12 = ~v7 + a2;
  bzero(a1, v8);
  else {
    *(_WORD *)a1 = v12;
  }
  __asm { BR              X11 }

void sub_18305AB48(char a1@<W8>)
{
  *(_BYTE *)(v1 + v2) = a1;
  JUMPOUT(0x18305ABC0LL);
}

void sub_18305AB50()
{
  *(_DWORD *)(v0 + v2) = 0;
  if (v1) {
    JUMPOUT(0x18305AB58LL);
  }
  JUMPOUT(0x18305ABC0LL);
}

void sub_18305AB9C(__int16 a1@<W8>)
{
  *(_WORD *)(v1 + v2) = a1;
  JUMPOUT(0x18305ABC0LL);
}

void sub_18305ABA4(int a1@<W8>)
{
  *(_DWORD *)(v1 + v2) = a1;
  JUMPOUT(0x18305ABC0LL);
}

uint64_t sub_18305ABAC@<X0>(unsigned int a1@<W2>, uint64_t a2@<X8>)
{
  *(_WORD *)(v3 + v5) = 0;
  if (!(_DWORD)v4) {
    JUMPOUT(0x18305ABC0LL);
  }
  if (a1 < 0x7FFFFFFF)
  {
    if ((v4 & 0x80000000) == 0) {
      JUMPOUT(0x18305ABBCLL);
    }
    JUMPOUT(0x18305ABB8LL);
  }

  return (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 56))(v3, v4);
}

id NSURLSession.dataTaskPublisher(for:)@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  id v3 = objc_msgSend( objc_allocWithZone(MEMORY[0x189601EB0]),  sel_initWithURL_cachePolicy_timeoutInterval_,  *a1,  0,  60.0);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _MutableHandle<NSMutableURLRequest>);
  uint64_t v4 = swift_allocObject();
  *(void *)(v4 + 16) = v3;
  *a2 = v4;
  a2[1] = (uint64_t)v6;
  return v6;
}

void *NSURLSession.DataTaskPublisher.init(request:session:)@<X0>( void *result@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  *a3 = *result;
  a3[1] = a2;
  return result;
}

id NSURLSession.dataTaskPublisher(for:)@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  *a2 = *a1;
  a2[1] = v2;
  swift_retain();
  return v4;
}

uint64_t NSURLSession.DataTaskPublisher.request.getter@<X0>(void *a1@<X8>)
{
  *a1 = *v1;
  return swift_retain();
}

id NSURLSession.DataTaskPublisher.session.getter()
{
  return *(id *)(v0 + 8);
}

uint64_t NSURLSession.DataTaskPublisher.receive<A>(subscriber:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  id v6 = (void *)v4[1];
  *(void *)&__int128 v11 = *v4;
  *((void *)&v11 + 1) = v6;
  uint64_t v7 = type metadata accessor for NSURLSession.DataTaskPublisher.Inner(0LL, a2, a3, a4);
  swift_allocObject();
  swift_retain();
  id v8 = v6;
  unsigned int v9 = specialized NSURLSession.DataTaskPublisher.Inner.init(_:_:)(&v11, a1);
  uint64_t v12 = v7;
  uint64_t v13 = MEMORY[0x186E20D4C](&protocol conformance descriptor for NSURLSession.DataTaskPublisher.Inner<A>, v7);
  *(void *)&__int128 v11 = v9;
  dispatch thunk of Subscriber.receive(subscription:)();
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)&v11);
}

uint64_t type metadata accessor for NSURLSession.DataTaskPublisher.Inner( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata( a1,  a2,  a3,  a4,  (uint64_t)&nominal type descriptor for NSURLSession.DataTaskPublisher.Inner);
}

void NSURLSession.DataTaskPublisher.Inner.customMirror.getter(uint64_t a1@<X8>)
{
  uint64_t v2 = v1;
  uint64_t v24 = a1;
  uint64_t v23 = type metadata accessor for Mirror.AncestorRepresentation();
  uint64_t v3 = *(void *)(v23 - 8);
  MEMORY[0x1895F8858](v23);
  uint64_t v5 = (char *)&v22 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Mirror.DisplayStyle?);
  MEMORY[0x1895F8858](v6);
  id v8 = (char *)&v22 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  os_unfair_lock_t v22 = (os_unfair_lock_t)v1[2];
  os_unfair_lock_lock(v22);
  uint64_t v25 = v1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
  uint64_t v9 = swift_allocObject();
  *(_OWORD *)(v9 + 16) = xmmword_183729E20;
  *(void *)(v9 + 32) = 1802723700LL;
  *(void *)(v9 + 40) = 0xE400000000000000LL;
  uint64_t v10 = *v1;
  __int128 v11 = *(void **)((char *)v2 + *(void *)(v10 + 128));
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSURLSessionDataTask?);
  *(void *)(v9 + 48) = v11;
  *(void *)(v9 + 72) = v12;
  *(void *)(v9 + 80) = 0x657274736E776F64LL;
  *(void *)(v9 + 88) = 0xEA00000000006D61LL;
  uint64_t v13 = (char *)v2 + *(void *)(v10 + 112);
  uint64_t v14 = type metadata accessor for Optional();
  *(void *)(v9 + 120) = v14;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)(v9 + 96));
  (*(void (**)(uint64_t *, char *, uint64_t))(*(void *)(v14 - 8) + 16LL))( boxed_opaque_existential_1,  v13,  v14);
  *(void *)(v9 + 128) = 0x746E65726170LL;
  *(void *)(v9 + 136) = 0xE600000000000000LL;
  char v16 = (void *)v2[3];
  char v17 = (void *)v2[4];
  uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSURLSession.DataTaskPublisher?);
  *(void *)(v9 + 144) = v16;
  *(void *)(v9 + 152) = v17;
  *(void *)(v9 + 168) = v18;
  *(void *)(v9 + 176) = 0x646E616D6564LL;
  *(void *)(v9 + 184) = 0xE600000000000000LL;
  uint64_t v19 = *(void *)((char *)v2 + *(void *)(*v2 + 120LL));
  *(void *)(v9 + 216) = MEMORY[0x189602260];
  *(void *)(v9 + 192) = v19;
  uint64_t v20 = type metadata accessor for Mirror.DisplayStyle();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v20 - 8) + 56LL))(v8, 1LL, 1LL, v20);
  (*(void (**)(char *, void, uint64_t))(v3 + 104))(v5, *MEMORY[0x18961A748], v23);
  id v21 = v11;
  swift_retain();
  outlined copy of NSURLSession.DataTaskPublisher?(v16, v17);
  Mirror.init<A>(_:children:displayStyle:ancestorRepresentation:)();
  os_unfair_lock_unlock(v22);
}

void NSURLSession.DataTaskPublisher.Inner.playgroundDescription.getter(void *a1@<X8>)
{
  a1[3] = MEMORY[0x189617FA8];
  *a1 = 0xD000000000000011LL;
  a1[1] = 0x80000001837304E0LL;
}

uint64_t NSURLSession.DataTaskPublisher.Inner.__deallocating_deinit()
{
  uint64_t v1 = v0 + *(void *)(*(void *)v0 + 112LL);
  uint64_t v2 = type metadata accessor for Optional();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(v1, v2);

  return swift_deallocClassInstance();
}

void NSURLSession.DataTaskPublisher.Inner.request(_:)(uint64_t a1)
{
  if ((static Subscribers.Demand.== infix(_:_:)() & 1) != 0) {
    goto LABEL_4;
  }
  if (a1 < 0)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }

  if (!a1)
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }

void implicit closure #4 in implicit closure #3 in NSURLSession.DataTaskPublisher.Inner.request(_:)( uint64_t a1, unint64_t a2, void *a3, void *a4, void *a5)
{
  unint64_t v48 = a4;
  id v49 = a3;
  uint64_t v44 = a1;
  unint64_t v45 = a2;
  uint64_t v46 = *a5;
  uint64_t v6 = *(void *)(v46 + 80);
  uint64_t v7 = type metadata accessor for Optional();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = MEMORY[0x1895F8858](v7);
  id v11 = (char *)&v41 - v10;
  uint64_t v50 = v6;
  uint64_t v12 = *(void *)(v6 - 8);
  MEMORY[0x1895F8858](v9);
  uint64_t v14 = (char *)&v41 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = (os_unfair_lock_s *)a5[2];
  os_unfair_lock_lock(v15);
  uint64_t v47 = *(void *)(*a5 + 120LL);
  uint64_t v16 = *(void *)((char *)a5 + v47);
  static Subscribers.Demand.unlimited.getter();
  if ((static Subscribers.Demand.== infix(_:_:)() & 1) == 0)
  {
    if (v16 < 0)
    {
      __break(1u);
      goto LABEL_28;
    }

    if (!v16) {
      goto LABEL_7;
    }
  }

  uint64_t v17 = a5[3];
  if (!v17)
  {
LABEL_7:
    os_unfair_lock_unlock(v15);
    return;
  }

  uint64_t v42 = (void *)a5[4];
  uint64_t v43 = v14;
  id v18 = (char *)a5 + *(void *)(*a5 + 112LL);
  (*(void (**)(char *, char *, uint64_t))(v8 + 16))(v11, v18, v7);
  uint64_t v19 = v50;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v11, 1LL, v50) == 1)
  {
    (*(void (**)(char *, uint64_t))(v8 + 8))(v11, v7);
    goto LABEL_7;
  }

  (*(void (**)(char *, char *, uint64_t))(v12 + 32))(v43, v11, v19);
  a5[3] = 0LL;
  a5[4] = 0LL;
  outlined consume of NSURLSession.DataTaskPublisher?(v17, v42);
  (*(void (**)(char *, uint64_t))(v8 + 8))(v18, v7);
  uint64_t v20 = v12;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v12 + 56))(v18, 1LL, 1LL, v19);
  *(void *)((char *)a5 + v47) = 0LL;
  uint64_t v21 = *(void *)(*a5 + 128LL);
  os_unfair_lock_t v22 = *(void **)((char *)a5 + v21);
  *(void *)((char *)a5 + v21) = 0LL;

  os_unfair_lock_unlock(v15);
  uint64_t v23 = v19;
  if (v49)
  {
    uint64_t v24 = v48;
    if (!v48)
    {
      uint64_t v26 = v44;
      unint64_t v25 = v45;
      if (v45 >> 60 == 15) {
        uint64_t v27 = 0LL;
      }
      else {
        uint64_t v27 = v44;
      }
      if (v45 >> 60 == 15) {
        unint64_t v28 = 0xC000000000000000LL;
      }
      else {
        unint64_t v28 = v45;
      }
      uint64_t v51 = v27;
      unint64_t v52 = v28;
      id v53 = v49;
      id v29 = v49;
      outlined copy of Data?(v26, v25);
      uint64_t v30 = v43;
      dispatch thunk of Subscriber.receive(_:)();
      outlined consume of Data._Representation(v27, v28);

      uint64_t v51 = 0LL;
      dispatch thunk of Subscriber.receive(completion:)();

      goto LABEL_25;
    }
  }

  else
  {
    uint64_t v24 = v48;
    if (!v48) {
      goto LABEL_20;
    }
  }

  uint64_t v51 = (uint64_t)v24;
  id v31 = v24;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
  if (!swift_dynamicCast())
  {
LABEL_20:
    static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSURLErrorDomain");
    id v33 = objc_allocWithZone((Class)&OBJC_CLASS___NSError);
    uint64_t v34 = String._bridgeToObjectiveCImpl()();
    swift_bridgeObjectRelease();
    id v32 = objc_msgSend(v33, sel_initWithDomain_code_userInfo_, v34, -1, _NativeDictionary.bridged()());
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    id v35 = objc_msgSend(v32, sel_domain);
    id v36 = static String._unconditionallyBridgeFromObjectiveC(_:)(v35);
    uint64_t v38 = v37;

    if (v36 == static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSURLErrorDomain") && v38 == v39)
    {
      swift_bridgeObjectRelease_n();
      goto LABEL_24;
    }

    char v40 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v40 & 1) != 0) {
      goto LABEL_24;
    }
LABEL_28:
    __break(1u);
    return;
  }

  id v32 = v54;
LABEL_24:
  uint64_t v51 = (uint64_t)v32;
  uint64_t v30 = v43;
  dispatch thunk of Subscriber.receive(completion:)();

LABEL_25:
  (*(void (**)(char *, uint64_t))(v20 + 8))(v30, v23);
}

uint64_t thunk for @escaping @callee_guaranteed @Sendable (@guaranteed Data?, @guaranteed NSURLResponse?, @guaranteed Error?) -> ()( uint64_t a1, id a2, void *a3, void *a4)
{
  uint64_t v7 = *(void (**)(id, unint64_t, void *, void *))(a1 + 32);
  swift_retain();
  if (a2)
  {
    id v8 = a2;
    a2 = specialized Data.init(referencing:)(v8);
    unint64_t v10 = v9;
  }

  else
  {
    unint64_t v10 = 0xF000000000000000LL;
  }

  id v11 = a3;
  id v12 = a4;
  v7(a2, v10, a3, a4);

  outlined consume of Data?((uint64_t)a2, v10);
  return swift_release();
}

void NSURLSession.DataTaskPublisher.Inner.cancel()()
{
  uint64_t v1 = *v0;
  uint64_t v2 = (os_unfair_lock_s *)v0[2];
  os_unfair_lock_lock(v2);
  uint64_t v3 = v0[3];
  if (v3)
  {
    uint64_t v4 = (void *)v0[4];
    v0[3] = 0LL;
    v0[4] = 0LL;
    outlined consume of NSURLSession.DataTaskPublisher?(v3, v4);
    uint64_t v5 = (char *)v0 + *(void *)(*v0 + 112LL);
    uint64_t v6 = *(void *)(v1 + 80);
    uint64_t v7 = type metadata accessor for Optional();
    (*(void (**)(char *, uint64_t))(*(void *)(v7 - 8) + 8LL))(v5, v7);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 56LL))(v5, 1LL, 1LL, v6);
    *(void *)((char *)v0 + *(void *)(*v0 + 120LL)) = 0LL;
    uint64_t v8 = *(void *)(*v0 + 128LL);
    id v9 = *(id *)((char *)v0 + v8);
    *(void *)((char *)v0 + v8) = 0LL;
    os_unfair_lock_unlock(v2);
    if (v9)
    {
      objc_msgSend(v9, sel_cancel);
    }
  }

  else
  {
    os_unfair_lock_unlock(v2);
  }

void protocol witness for Subscription.request(_:) in conformance NSURLSession.DataTaskPublisher.Inner<A>( uint64_t a1)
{
}

unint64_t protocol witness for CustomStringConvertible.description.getter in conformance NSURLSession.DataTaskPublisher.Inner<A>()
{
  return 0xD000000000000011LL;
}

void protocol witness for CustomReflectable.customMirror.getter in conformance NSURLSession.DataTaskPublisher.Inner<A>( uint64_t a1@<X8>)
{
}

void protocol witness for CustomPlaygroundDisplayConvertible.playgroundDescription.getter in conformance NSURLSession.DataTaskPublisher.Inner<A>( void *a1@<X8>)
{
}

void protocol witness for Cancellable.cancel() in conformance NSURLSession.DataTaskPublisher.Inner<A>()
{
}

void *specialized NSURLSession.DataTaskPublisher.Inner.init(_:_:)(_OWORD *a1, uint64_t a2)
{
  uint64_t v5 = *v2;
  v2[3] = 0LL;
  void v2[4] = 0LL;
  uint64_t v6 = *(void *)(v5 + 80);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v7 + 56);
  v8((char *)v2 + *(void *)(v5 + 112), 1LL, 1LL, v6);
  *(void *)((char *)v2 + *(void *)(*v2 + 128LL)) = 0LL;
  id v9 = (_DWORD *)swift_slowAlloc();
  *id v9 = 0;
  v2[2] = v9;
  uint64_t v10 = v2[3];
  id v11 = (void *)v2[4];
  *(_OWORD *)(v2 + 3) = *a1;
  outlined consume of NSURLSession.DataTaskPublisher?(v10, v11);
  id v12 = (char *)v2 + *(void *)(*v2 + 112LL);
  uint64_t v13 = type metadata accessor for Optional();
  (*(void (**)(char *, uint64_t))(*(void *)(v13 - 8) + 8LL))(v12, v13);
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v12, a2, v6);
  v8(v12, 0LL, 1LL, v6);
  *(void *)((char *)v2 + *(void *)(*v2 + 120LL)) = 0LL;
  return v2;
}

unint64_t lazy protocol witness table accessor for type URLError and conformance URLError()
{
  unint64_t result = lazy protocol witness table cache variable for type URLError and conformance URLError;
  if (!lazy protocol witness table cache variable for type URLError and conformance URLError)
  {
    unint64_t result = MEMORY[0x186E20D4C](&protocol conformance descriptor for URLError, &type metadata for URLError);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type URLError and conformance URLError);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type URLError and conformance URLError;
  if (!lazy protocol witness table cache variable for type URLError and conformance URLError)
  {
    unint64_t result = MEMORY[0x186E20D4C](&protocol conformance descriptor for URLError, &type metadata for URLError);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type URLError and conformance URLError);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type URLError and conformance URLError;
  if (!lazy protocol witness table cache variable for type URLError and conformance URLError)
  {
    unint64_t result = MEMORY[0x186E20D4C](&protocol conformance descriptor for URLError, &type metadata for URLError);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type URLError and conformance URLError);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type URLError and conformance URLError;
  if (!lazy protocol witness table cache variable for type URLError and conformance URLError)
  {
    unint64_t result = MEMORY[0x186E20D4C](&protocol conformance descriptor for URLError, &type metadata for URLError);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type URLError and conformance URLError);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type URLError and conformance URLError;
  if (!lazy protocol witness table cache variable for type URLError and conformance URLError)
  {
    unint64_t result = MEMORY[0x186E20D4C](&protocol conformance descriptor for URLError, &type metadata for URLError);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type URLError and conformance URLError);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type URLError and conformance URLError;
  if (!lazy protocol witness table cache variable for type URLError and conformance URLError)
  {
    unint64_t result = MEMORY[0x186E20D4C](&protocol conformance descriptor for URLError, &type metadata for URLError);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type URLError and conformance URLError);
  }

  return result;
}

void *initializeBufferWithCopyOfBuffer for NSURLSession.DataTaskPublisher(void *a1, void *a2)
{
  uint64_t v3 = (void *)a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_retain();
  id v4 = v3;
  return a1;
}

void destroy for NSURLSession.DataTaskPublisher(uint64_t a1)
{
}

void *assignWithCopy for NSURLSession.DataTaskPublisher(void *a1, void *a2)
{
  *a1 = *a2;
  swift_retain();
  swift_release();
  id v4 = (void *)a2[1];
  uint64_t v5 = (void *)a1[1];
  a1[1] = v4;
  id v6 = v4;

  return a1;
}

uint64_t assignWithTake for NSURLSession.DataTaskPublisher(uint64_t a1, _OWORD *a2)
{
  id v4 = *(void **)(a1 + 8);
  *(_OWORD *)a1 = *a2;

  return a1;
}

ValueMetadata *type metadata accessor for NSURLSession.DataTaskPublisher()
{
  return &type metadata for NSURLSession.DataTaskPublisher;
}

uint64_t type metadata completion function for NSURLSession.DataTaskPublisher.Inner()
{
  uint64_t result = type metadata accessor for Optional();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_initClassMetadata2();
    if (!result) {
      return 0LL;
    }
  }

  return result;
}

void base witness table accessor for Cancellable in NSURLSession.DataTaskPublisher.Inner<A>()
{
}

void base witness table accessor for CustomCombineIdentifierConvertible in NSURLSession.DataTaskPublisher.Inner<A>()
{
}

void partial apply for implicit closure #4 in implicit closure #3 in NSURLSession.DataTaskPublisher.Inner.request(_:)( uint64_t a1, unint64_t a2, void *a3, void *a4)
{
}

id outlined copy of NSURLSession.DataTaskPublisher?(id result, void *a2)
{
  if (result)
  {
    swift_retain();
    return a2;
  }

  return result;
}

void outlined consume of NSURLSession.DataTaskPublisher?(uint64_t a1, void *a2)
{
  if (a1)
  {
    swift_release();
  }

unint64_t type metadata accessor for NSMutableURLRequest()
{
  unint64_t result = lazy cache variable for type metadata for NSMutableURLRequest;
  if (!lazy cache variable for type metadata for NSMutableURLRequest)
  {
    objc_opt_self();
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for NSMutableURLRequest);
  }

  return result;
}

uint64_t sub_18305BD1C()
{
  return swift_deallocObject();
}

uint64_t block_copy_helper_3(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_3()
{
  return swift_release();
}

uint64_t ICUPatternGenerator.init(localeIdentifier:calendarIdentifier:)(uint64_t a1, uint64_t a2, char *a3)
{
  uint64_t v4 = v3;
  uint64_t v23 = *MEMORY[0x1895F89C0];
  char v7 = *a3;
  swift_bridgeObjectRetain();
  Locale.Components.init(identifier:)(a1, a2, v11);
  __src[0] = *(_OWORD *)v11;
  __src[1] = *(_OWORD *)&v11[2];
  __src[2] = *(_OWORD *)&v11[4];
  __src[3] = *(_OWORD *)&v11[6];
  __src[4] = *(_OWORD *)&v11[8];
  __src[5] = *(_OWORD *)&v11[10];
  LOBYTE(__src[6]) = v7;
  *(_OWORD *)((char *)&__src[6] + 8) = *(_OWORD *)&v11[13];
  *(_OWORD *)((char *)&__src[7] + 8) = *(_OWORD *)&v11[15];
  *(_OWORD *)((char *)&__src[8] + 8) = *(_OWORD *)&v11[17];
  *(_OWORD *)((char *)&__src[9] + 8) = *(_OWORD *)&v11[19];
  *(_OWORD *)((char *)&__src[10] + 8) = *(_OWORD *)&v11[21];
  *(_OWORD *)((char *)&__src[11] + 8) = *(_OWORD *)&v11[23];
  WORD4(__src[12]) = v12;
  __src[13] = v13;
  __src[14] = v14;
  __src[15] = v15;
  __src[16] = v16;
  __src[17] = v17;
  __src[18] = v18;
  __src[19] = v19;
  __src[20] = v20;
  __src[21] = v21;
  memcpy(__dst, __src, sizeof(__dst));
  Locale.Components.icuIdentifier.getter();
  outlined release of Locale.Components((uint64_t *)__src);
  swift_bridgeObjectRelease();
  String.utf8CString.getter();
  swift_bridgeObjectRelease();
  uint64_t v8 = udatpg_open();
  swift_release();
  if (v8)
  {
    *(void *)(v4 + 16) = v8;
  }

  else
  {
    swift_deallocPartialClassInstance();
    return 0LL;
  }

  return v4;
}

uint64_t ICUPatternGenerator.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for ICUPatternGenerator()
{
  return objc_opt_self();
}

Swift::String_optional __swiftcall ICUPatternGenerator._patternForSkeleton(_:)(Swift::String a1)
{
  uint64_t object = a1._object;
  uint64_t countAndFlagsBits = a1._countAndFlagsBits;
  void v11[2] = *MEMORY[0x1895F89C0];
  v10[21] = 0;
  if (udatpg_clone())
  {
    swift_bridgeObjectRetain();
    uint64_t v5 = specialized _copyCollectionToContiguousArray<A>(_:)(countAndFlagsBits, (unint64_t)object);
    swift_bridgeObjectRelease();
    uint64_t v6 = swift_bridgeObjectRetain_n();
    MEMORY[0x1895F8858](v6);
    swift_bridgeObjectRetain();
    specialized closure #1 in _withResizingUCharBuffer(initialSize:_:)((uint64_t)v10, (uint64_t)v5, v11);
    uint64_t v3 = v11[0];
    uint64_t v4 = v11[1];
    swift_release_n();
    udatpg_close();
  }

  else
  {
    udatpg_close();
    uint64_t v3 = 0LL;
    uint64_t v4 = 0LL;
  }

  uint64_t v7 = v3;
  uint64_t v8 = (void *)v4;
  result.value._uint64_t object = v8;
  result.value._uint64_t countAndFlagsBits = v7;
  return result;
}

uint64_t ICUPatternGenerator.defaultHourCycle.getter@<X0>(char *a1@<X8>)
{
  uint64_t v7 = *MEMORY[0x1895F89C0];
  int v6 = 0;
  uint64_t result = MEMORY[0x186E213DC](*(void *)(v1 + 16), &v6);
  else {
    char v5 = 2;
  }
  *a1 = v5;
  return result;
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance ICUPatternGenerator.PatternGeneratorInfo()
{
  Swift::UInt v1 = *(unsigned __int8 *)(v0 + 16);
  Hasher.init(_seed:)();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance ICUPatternGenerator.PatternGeneratorInfo()
{
  Swift::UInt v1 = *(unsigned __int8 *)(v0 + 16);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  Hasher._combine(_:)(v1);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance ICUPatternGenerator.PatternGeneratorInfo()
{
  Swift::UInt v1 = *(unsigned __int8 *)(v0 + 16);
  Hasher.init(_seed:)();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance ICUPatternGenerator.PatternGeneratorInfo( uint64_t a1, uint64_t a2)
{
  int v2 = *(unsigned __int8 *)(a1 + 16);
  int v3 = *(unsigned __int8 *)(a2 + 16);
  if (*(void *)a1 == *(void *)a2 && *(void *)(a1 + 8) == *(void *)(a2 + 8)) {
    return v2 == v3;
  }
  char v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
  BOOL result = 0LL;
  if ((v5 & 1) != 0) {
    return v2 == v3;
  }
  return result;
}

uint64_t one-time initialization function for _patternGeneratorCache()
{
  uint64_t result = swift_allocObject();
  *(_DWORD *)(result + 24) = 0;
  *(void *)(result + 16) = MEMORY[0x18961AFF0];
  static ICUPatternGenerator._patternGeneratorCache = 100LL;
  unk_18C5D62C0 = result;
  return result;
}

uint64_t specialized static ICUPatternGenerator.localizedPattern(symbols:locale:calendar:)( uint64_t a1, os_unfair_lock_s **a2, uint64_t a3)
{
  void (*v14)(uint64_t *__return_ptr, uint64_t, uint64_t);
  unsigned __int8 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  os_unfair_lock_s *v20;
  uint64_t v21;
  os_unfair_lock_s *v22;
  void *v23;
  os_unfair_lock_s *v24;
  unsigned __int8 v25;
  char isUniquelyReferenced_nonNull_native;
  char *object;
  unsigned __int8 v28;
  char *v29;
  char v30;
  unint64_t v31;
  uint64_t v32;
  BOOL v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  char v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  unint64_t v44;
  int64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  int64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  int64_t v58;
  unint64_t v59;
  int64_t v60;
  int64_t v61;
  char *v62;
  os_unfair_lock_s *v63;
  void *v64;
  uint64_t countAndFlagsBits;
  Swift::String v66;
  Swift::String_optional v67;
  uint64_t result;
  unint64_t v69;
  int64_t v70;
  char *__src;
  uint64_t v72;
  os_unfair_lock_s *v73;
  uint64_t v74;
  unsigned __int8 v75;
  Swift::String v76;
  uint64_t v77;
  os_unfair_lock_s *v78;
  void *v79;
  unsigned __int8 v80;
  uint64_t v81;
  int v3 = a2[1];
  uint64_t v4 = *(void *)(a3 + 8);
  char v78 = *a2;
  uint64_t v79 = v3;
  Date.FormatStyle.DateFieldCollection.formatterTemplate(overridingDayPeriodWithLocale:)();
  v76._uint64_t countAndFlagsBits = v5;
  uint64_t v7 = v6;
  uint64_t ObjectType = swift_getObjectType();
  id v9 = *(uint64_t (**)(uint64_t, os_unfair_lock_s *))&v3[118]._os_unfair_lock_opaque;
  swift_unknownObjectRetain();
  uint64_t v10 = v9(ObjectType, v3);
  uint64_t v12 = v11;
  swift_unknownObjectRelease();
  uint64_t v13 = swift_getObjectType();
  __int128 v14 = *(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v4 + 24);
  swift_unknownObjectRetain();
  v14(&v81, v13, v4);
  swift_unknownObjectRelease();
  __int128 v15 = v81;
  __int128 v16 = one-time initialization token for _patternGeneratorCache;
  swift_bridgeObjectRetain();
  if (v16 != -1) {
    swift_once();
  }
  __int128 v18 = static ICUPatternGenerator._patternGeneratorCache;
  __int128 v17 = unk_18C5D62C0;
  char v78 = (os_unfair_lock_s *)v10;
  uint64_t v79 = (void *)v12;
  uint64_t v80 = v15;
  __int128 v19 = unk_18C5D62C0 + 16LL;
  __int128 v20 = (os_unfair_lock_s *)(unk_18C5D62C0 + 24LL);
  swift_retain_n();
  os_unfair_lock_lock(v20);
  specialized closure #1 in FormatterCache.formatter(for:creator:)(v19, (uint64_t)&v78, &v77);
  os_unfair_lock_unlock(v20);
  swift_release();
  __int128 v21 = v77;
  if (v77 != 1) {
    goto LABEL_53;
  }
  LOBYTE(v76._object) = v15;
  type metadata accessor for ICUPatternGenerator();
  swift_allocObject();
  swift_bridgeObjectRetain();
  __int128 v21 = ICUPatternGenerator.init(localeIdentifier:calendarIdentifier:)(v10, v12, (char *)&v76._object);
  swift_retain();
  os_unfair_lock_lock(v20);
  os_unfair_lock_t v22 = v20;
  uint64_t v23 = v7;
  if (v18 >= *(void *)(*(void *)(v17 + 16) + 16LL)) {
    swift_bridgeObjectRetain();
  }
  else {
    *(void *)__int128 v19 = MEMORY[0x18961AFF0];
  }
  uint64_t v24 = v78;
  uint64_t v7 = v79;
  unint64_t v25 = v80;
  swift_retain();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v76._uint64_t object = *(void **)v19;
  uint64_t object = (char *)v76._object;
  *(void *)__int128 v19 = 0x8000000000000000LL;
  uint64_t v73 = v24;
  uint64_t v74 = (uint64_t)v7;
  uint64_t v75 = v25;
  unint64_t v28 = v25;
  id v29 = object;
  id v31 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v24, (uint64_t)v7, v28);
  id v32 = *((void *)v29 + 2);
  id v33 = (v30 & 1) == 0;
  uint64_t v34 = v32 + v33;
  if (__OFADD__(v32, v33))
  {
    __break(1u);
  }

  else
  {
    LOBYTE(v19) = v30;
    if (*((void *)v29 + 3) < v34)
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)( v34,  isUniquelyReferenced_nonNull_native);
      id v35 = (char *)v76._object;
      uint64_t v37 = (uint64_t)v24;
      id v36 = (uint64_t)v7;
      uint64_t v38 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v24, (uint64_t)v7, v75);
      if ((v19 & 1) != (v39 & 1)) {
        goto LABEL_60;
      }
      id v31 = v38;
      uint64_t v7 = v23;
      uint64_t v24 = v22;
      if ((v19 & 1) == 0) {
        goto LABEL_51;
      }
LABEL_14:
      char v40 = *((void *)v35 + 7);
      uint64_t v41 = 8 * v31;
      swift_release();
      *(void *)(v40 + v41) = v21;
LABEL_52:
      *(void *)(v17 + 16) = v35;
      swift_bridgeObjectRelease();
      os_unfair_lock_unlock(v24);
      swift_release();
      swift_bridgeObjectRelease();
      outlined consume of ICUDateIntervalFormatter??(v77);
LABEL_53:
      swift_release();
      swift_bridgeObjectRelease_n();
      if (!v21) {
        return v76._countAndFlagsBits;
      }
      uint64_t countAndFlagsBits = v76._countAndFlagsBits;
      v66._uint64_t countAndFlagsBits = v76._countAndFlagsBits;
      v66._uint64_t object = v7;
      uint64_t v67 = ICUPatternGenerator._patternForSkeleton(_:)(v66);
      swift_release();
      if (v67.value._object)
      {
        swift_bridgeObjectRelease();
        return v67.value._countAndFlagsBits;
      }

      return countAndFlagsBits;
    }

    uint64_t v7 = v23;
    uint64_t v24 = v22;
    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
    {
      id v35 = v29;
      uint64_t v37 = (uint64_t)v73;
      id v36 = v74;
      if ((v30 & 1) != 0) {
        goto LABEL_14;
      }
LABEL_51:
      specialized _NativeDictionary._insert(at:key:value:)(v31, v37, v36, v75, v21, v35);
      swift_bridgeObjectRetain();
      goto LABEL_52;
    }
  }

  char v69 = v31;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<ICUPatternGenerator.PatternGeneratorInfo, ICUPatternGenerator?>);
  uint64_t v42 = static _DictionaryStorage.copy(original:)();
  id v35 = (char *)v42;
  if (!*((void *)v29 + 2))
  {
LABEL_50:
    swift_bridgeObjectRelease();
    uint64_t v37 = (uint64_t)v73;
    id v36 = v74;
    id v31 = v69;
    if ((v19 & 1) != 0) {
      goto LABEL_14;
    }
    goto LABEL_51;
  }

  uint64_t v43 = (char *)(v42 + 64);
  __src = v29 + 64;
  uint64_t v44 = (unint64_t)((1LL << v35[32]) + 63) >> 6;
  if (v35 != v29 || v43 >= &__src[8 * v44]) {
    memmove(v43, __src, 8 * v44);
  }
  unint64_t v45 = 0LL;
  *((void *)v35 + 2) = *((void *)v29 + 2);
  uint64_t v46 = 1LL << v29[32];
  uint64_t v47 = -1LL;
  if (v46 < 64) {
    uint64_t v47 = ~(-1LL << v46);
  }
  unint64_t v48 = v47 & *((void *)v29 + 8);
  uint64_t v70 = (unint64_t)(v46 + 63) >> 6;
  while (1)
  {
    if (v48)
    {
      uint64_t v72 = (v48 - 1) & v48;
      id v49 = v45;
      uint64_t v50 = __clz(__rbit64(v48)) | (v45 << 6);
      goto LABEL_24;
    }

    uint64_t v58 = v45 + 1;
    if (__OFADD__(v45, 1LL))
    {
      __break(1u);
      goto LABEL_59;
    }

    if (v58 >= v70) {
      goto LABEL_50;
    }
    __int128 v59 = *(void *)&__src[8 * v58];
    __int128 v60 = v45 + 1;
    if (!v59)
    {
      __int128 v60 = v58 + 1;
      if (v58 + 1 >= v70) {
        goto LABEL_50;
      }
      __int128 v59 = *(void *)&__src[8 * v60];
      if (!v59)
      {
        __int128 v60 = v58 + 2;
        if (v58 + 2 >= v70) {
          goto LABEL_50;
        }
        __int128 v59 = *(void *)&__src[8 * v60];
        if (!v59)
        {
          __int128 v60 = v58 + 3;
          if (v58 + 3 >= v70) {
            goto LABEL_50;
          }
          __int128 v59 = *(void *)&__src[8 * v60];
          if (!v59)
          {
            __int128 v60 = v58 + 4;
            if (v58 + 4 >= v70) {
              goto LABEL_50;
            }
            __int128 v59 = *(void *)&__src[8 * v60];
            if (!v59)
            {
              __int128 v60 = v58 + 5;
              if (v58 + 5 >= v70) {
                goto LABEL_50;
              }
              __int128 v59 = *(void *)&__src[8 * v60];
              if (!v59)
              {
                __int128 v60 = v58 + 6;
                if (v58 + 6 >= v70) {
                  goto LABEL_50;
                }
                __int128 v59 = *(void *)&__src[8 * v60];
                if (!v59)
                {
                  __int128 v60 = v58 + 7;
                  if (v58 + 7 >= v70) {
                    goto LABEL_50;
                  }
                  __int128 v59 = *(void *)&__src[8 * v60];
                  if (!v59) {
                    break;
                  }
                }
              }
            }
          }
        }
      }
    }

uint64_t initializeBufferWithCopyOfBuffer for ICUPatternGenerator.PatternGeneratorInfo( uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for ICUPatternGenerator.PatternGeneratorInfo(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  return a1;
}

uint64_t assignWithTake for ICUPatternGenerator.PatternGeneratorInfo(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  return a1;
}

uint64_t getEnumTagSinglePayload for ICUPatternGenerator.PatternGeneratorInfo(uint64_t a1, int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0 && *(_BYTE *)(a1 + 17)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ICUPatternGenerator.PatternGeneratorInfo( uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_BYTE *)(result + 16) = 0;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0LL;
    if (a3 < 0) {
      *(_BYTE *)(result + 17) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 17) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for ICUPatternGenerator.PatternGeneratorInfo()
{
  return &type metadata for ICUPatternGenerator.PatternGeneratorInfo;
}

unint64_t lazy protocol witness table accessor for type ICUPatternGenerator.PatternGeneratorInfo and conformance ICUPatternGenerator.PatternGeneratorInfo()
{
  unint64_t result = lazy protocol witness table cache variable for type ICUPatternGenerator.PatternGeneratorInfo and conformance ICUPatternGenerator.PatternGeneratorInfo;
  if (!lazy protocol witness table cache variable for type ICUPatternGenerator.PatternGeneratorInfo and conformance ICUPatternGenerator.PatternGeneratorInfo)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for ICUPatternGenerator.PatternGeneratorInfo,  &type metadata for ICUPatternGenerator.PatternGeneratorInfo);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type ICUPatternGenerator.PatternGeneratorInfo and conformance ICUPatternGenerator.PatternGeneratorInfo);
  }

  return result;
}

BOOL specialized static Comparable.> infix(_:_:)(double a1, double a2, double a3, double a4)
{
  BOOL result = a3 < a1;
  if (a1 >= a3 && a1 <= a3) {
    return a4 < a2;
  }
  return result;
}

double DateInterval.start.getter@<D0>(void *a1@<X8>)
{
  double result = *v1;
  *a1 = *(void *)v1;
  return result;
}

double DateInterval.start.setter(double *a1)
{
  double result = *a1;
  *Swift::UInt v1 = *(void *)a1;
  return result;
}

uint64_t (*DateInterval.start.modify())()
{
  return destructiveProjectEnumData for PredicateCodableError;
}

double DateInterval.end.getter@<D0>(double *a1@<X8>)
{
  double result = *v1 + v1[1];
  *a1 = result;
  return result;
}

double *DateInterval.end.setter(double *result)
{
  if (*result < *v1 || (double v2 = *result - *v1, v2 < 0.0)) {
    __break(1u);
  }
  else {
    v1[1] = v2;
  }
  return result;
}

void DateInterval.duration.setter(double a1)
{
  if (a1 < 0.0) {
    __break(1u);
  }
  else {
    *(double *)(v1 + 8) = a1;
  }
}

uint64_t (*DateInterval.end.modify(uint64_t a1))(uint64_t result, char a2)
{
  *(void *)(a1 + 8) = v1;
  *(double *)a1 = *v1 + v1[1];
  return DateInterval.end.modify;
}

uint64_t DateInterval.end.modify(uint64_t result, char a2)
{
  double v2 = *(double **)(result + 8);
  BOOL v3 = *(double *)result < *v2;
  double v4 = *(double *)result - *v2;
  if (v4 < 0.0) {
    BOOL v3 = 1;
  }
  if ((a2 & 1) != 0)
  {
    if (!v3)
    {
LABEL_7:
      v2[1] = v4;
      return result;
    }

    __break(1u);
  }

  if (!v3) {
    goto LABEL_7;
  }
  __break(1u);
  return result;
}

double DateInterval.duration.getter()
{
  return *(double *)(v0 + 8);
}

double *(*DateInterval.duration.modify(void *a1))(double *result, char a2)
{
  a1[1] = v1;
  *a1 = *(void *)(v1 + 8);
  return DateInterval.duration.modify;
}

double *DateInterval.duration.modify(double *result, char a2)
{
  double v2 = *result;
  BOOL v3 = *result < 0.0;
  if ((a2 & 1) != 0)
  {
    if (*result >= 0.0)
    {
LABEL_5:
      *(double *)(*((void *)result + 1) + 8LL) = v2;
      return result;
    }

    __break(1u);
  }

  if (!v3) {
    goto LABEL_5;
  }
  __break(1u);
  return result;
}

Foundation::DateInterval __swiftcall DateInterval.init()()
{
  uint64_t v1 = v0;
  uint64_t v6 = *MEMORY[0x1895F89C0];
  __tp.tv_sec = 0LL;
  __tp.tv_nsec = 0LL;
  clock_gettime(_CLOCK_REALTIME, &__tp);
  double v2 = (double)__tp.tv_nsec * 0.000000001;
  double v3 = (double)__tp.tv_sec + -978307200.0 + v2;
  *(double *)uint64_t v1 = v3;
  *(void *)(v1 + 8) = 0LL;
  result.duration = v2;
  result.start = *(Foundation::Date *)&v3;
  return result;
}

Foundation::DateInterval __swiftcall DateInterval.init(start:end:)(Foundation::Date start, Foundation::Date end)
{
  double v5 = *v2;
  double v6 = *v3;
  if (*v3 < *v2)
  {
    __break(1u);
  }

  else
  {
    double v6 = v6 - v5;
    *double v4 = v5;
    v4[1] = v6;
  }

  result.duration = v6;
  result.start = *(Foundation::Date *)&v5;
  return result;
}

Foundation::DateInterval __swiftcall DateInterval.init(start:duration:)(Foundation::Date start, Swift::Double duration)
{
  if (start._time < 0.0)
  {
    __break(1u);
  }

  else
  {
    duration = *v2;
    *double v3 = *v2;
    v3[1] = start._time;
  }

  result.duration = duration;
  result.start = start;
  return result;
}

NSComparisonResult __swiftcall DateInterval.compare(_:)(Foundation::DateInterval a1)
{
  double v3 = v1[1];
  double v4 = v2[1];
  NSComparisonResult v5 = (unint64_t)(*v1 < *v2);
  if (*v2 < *v1) {
    NSComparisonResult v5 = NSOrderedAscending;
  }
  NSComparisonResult v6 = NSOrderedAscending;
  if (v4 >= v3) {
    NSComparisonResult v6 = (unint64_t)(v3 < v4);
  }
  if (v5) {
    return v5;
  }
  else {
    return v6;
  }
}

Swift::Bool __swiftcall DateInterval.intersects(_:)(Foundation::DateInterval a1)
{
  double v3 = *v1;
  double v4 = *v2;
  double v5 = *v2 + v2[1];
  if (*v2 <= *v1 && v3 <= v5) {
    return 1;
  }
  double v7 = v3 + v1[1];
  BOOL v8 = v3 <= v4;
  BOOL v9 = v4 <= v7;
  if (v4 > v7) {
    BOOL v8 = 0;
  }
  if (v7 > v5) {
    BOOL v9 = 0;
  }
  Swift::Bool result = 1;
  if (!v9 && !v8) {
    return v5 <= v7 && v3 <= v5;
  }
  return result;
}

Swift::Bool __swiftcall DateInterval.contains(_:)(Foundation::Date a1)
{
  return *v1 <= *v2 + v2[1] && *v2 <= *v1;
}

Foundation::DateInterval_optional __swiftcall DateInterval.intersection(with:)(Foundation::DateInterval with)
{
  double v4 = *v1;
  double v5 = v1[1];
  double v6 = *v3;
  double v7 = v3[1];
  double v8 = *v3 + v7;
  if (*v3 <= *v1 && v4 <= v8) {
    goto LABEL_18;
  }
  BOOL v10 = v4 <= v8;
  double v11 = v4 + v5;
  BOOL v12 = v6 <= v4 + v5 && v4 <= v6;
  BOOL v13 = v11 <= v8 && v6 <= v4 + v5;
  if (v8 > v11) {
    BOOL v10 = 0;
  }
  if (v12 || v13 || v10)
  {
LABEL_18:
    if (v6 == v4 && v7 == v5)
    {
      *(double *)uint64_t v2 = v6;
      *(double *)(v2 + 8) = v7;
      *(_BYTE *)(v2 + 16) = 0;
    }

    else
    {
      double v15 = v4 + v5;
      if (v6 > v4) {
        double v4 = *v3;
      }
      if (v8 > v15) {
        double v6 = v15;
      }
      else {
        double v6 = *v3 + v7;
      }
      if (v6 < v4)
      {
        __break(1u);
      }

      else
      {
        double v6 = v6 - v4;
        *(double *)uint64_t v2 = v4;
        *(double *)(v2 + 8) = v6;
        *(_BYTE *)(v2 + 16) = 0;
      }
    }
  }

  else
  {
    *(void *)uint64_t v2 = 0LL;
    *(void *)(v2 + 8) = 0LL;
    *(_BYTE *)(v2 + 16) = 1;
  }

  result.value.duration = v6;
  result.value.start._time = v4;
  result.is_nil = (char)v1;
  return result;
}

BOOL static DateInterval.== infix(_:_:)(double *a1, double *a2)
{
  return a1[1] == a2[1] && *a1 == *a2;
}

void DateInterval.hash(into:)()
{
  Swift::UInt64 v1 = v0[1];
  if ((*v0 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v2 = *v0;
  }
  else {
    Swift::UInt64 v2 = 0LL;
  }
  Hasher._combine(_:)(v2);
  if ((v1 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v3 = v1;
  }
  else {
    Swift::UInt64 v3 = 0LL;
  }
  Hasher._combine(_:)(v3);
}

BOOL static DateInterval.< infix(_:_:)(double *a1, double *a2)
{
  BOOL v2 = *a1 < *a2;
  if (*a2 >= *a1 && *a2 <= *a1) {
    return a1[1] < a2[1];
  }
  return v2;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance DateInterval.CodingKeys()
{
  if (*v0) {
    return 0x6E6F697461727564LL;
  }
  else {
    return 0x7472617473LL;
  }
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance DateInterval.CodingKeys@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result = specialized DateInterval.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance DateInterval.CodingKeys()
{
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance DateInterval.CodingKeys()
{
  return CodingKey.debugDescription.getter();
}

uint64_t DateInterval.encode(to:)(void *a1)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<DateInterval.CodingKeys>);
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1895F8858](v4);
  double v7 = &v10[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v8 = *v1;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type DateInterval.CodingKeys and conformance DateInterval.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  uint64_t v11 = v8;
  v10[7] = 0;
  lazy protocol witness table accessor for type Date and conformance Date();
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v2)
  {
    v10[6] = 1;
    KeyedEncodingContainer.encode(_:forKey:)();
  }

  return (*(uint64_t (**)(_BYTE *, uint64_t))(v5 + 8))(v7, v4);
}

Swift::Int DateInterval.hashValue.getter()
{
  Swift::UInt64 v1 = *v0;
  Swift::UInt64 v2 = v0[1];
  Hasher.init(_seed:)();
  if ((v1 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v3 = v1;
  }
  else {
    Swift::UInt64 v3 = 0LL;
  }
  Hasher._combine(_:)(v3);
  if ((v2 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v4 = v2;
  }
  else {
    Swift::UInt64 v4 = 0LL;
  }
  Hasher._combine(_:)(v4);
  return Hasher._finalize()();
}

uint64_t DateInterval.init(from:)@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<DateInterval.CodingKeys>);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1895F8858](v5);
  uint64_t v8 = &v13[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type DateInterval.CodingKeys and conformance DateInterval.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v2)
  {
    v13[15] = 0;
    lazy protocol witness table accessor for type Date and conformance Date();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    uint64_t v9 = v14;
    v13[14] = 1;
    KeyedDecodingContainer.decode(_:forKey:)();
    uint64_t v11 = v10;
    (*(void (**)(_BYTE *, uint64_t))(v6 + 8))(v8, v5);
    *a2 = v9;
    a2[1] = v11;
  }

  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

BOOL protocol witness for static Comparable.< infix(_:_:) in conformance DateInterval( void *a1, void *a2)
{
  return DateInterval.compare(_:)((Foundation::DateInterval)__PAIR128__(*a1, *a2)) == NSOrderedAscending;
}

BOOL protocol witness for static Comparable.<= infix(_:_:) in conformance DateInterval( double *a1, double *a2)
{
  return specialized static Comparable.<= infix(_:_:)(*a1, a1[1], *a2, a2[1]);
}

BOOL protocol witness for static Comparable.>= infix(_:_:) in conformance DateInterval( double *a1, double *a2)
{
  return specialized static Comparable.>= infix(_:_:)(*a1, a1[1], *a2, a2[1]);
}

BOOL protocol witness for static Comparable.> infix(_:_:) in conformance DateInterval( double *a1, double *a2)
{
  return specialized static Comparable.> infix(_:_:)(*a1, a1[1], *a2, a2[1]);
}

void protocol witness for Hashable.hash(into:) in conformance DateInterval()
{
  Swift::UInt64 v1 = v0[1];
  if ((*v0 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v2 = *v0;
  }
  else {
    Swift::UInt64 v2 = 0LL;
  }
  Hasher._combine(_:)(v2);
  if ((v1 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v3 = v1;
  }
  else {
    Swift::UInt64 v3 = 0LL;
  }
  Hasher._combine(_:)(v3);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance DateInterval()
{
  Swift::UInt64 v1 = *v0;
  Swift::UInt64 v2 = v0[1];
  Hasher.init(_seed:)();
  if ((v1 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v3 = v1;
  }
  else {
    Swift::UInt64 v3 = 0LL;
  }
  Hasher._combine(_:)(v3);
  if ((v2 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v4 = v2;
  }
  else {
    Swift::UInt64 v4 = 0LL;
  }
  Hasher._combine(_:)(v4);
  return Hasher._finalize()();
}

uint64_t protocol witness for Decodable.init(from:) in conformance DateInterval@<X0>( void *a1@<X0>, void *a2@<X8>)
{
  return DateInterval.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance DateInterval(void *a1)
{
  return DateInterval.encode(to:)(a1);
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance DateInterval( double *a1, double *a2)
{
  return a1[1] == a2[1] && *a1 == *a2;
}

id DateInterval.description.getter()
{
  double v1 = *v0;
  double v2 = v0[1];
  id v3 = objc_msgSend(objc_allocWithZone(MEMORY[0x189603F50]), sel_initWithTimeIntervalSinceReferenceDate_, *v0);
  id v4 = objc_msgSend(v3, sel_description);

  id v5 = static String._unconditionallyBridgeFromObjectiveC(_:)(v4);
  id v14 = v5;
  v6._uint64_t countAndFlagsBits = 544175136LL;
  v6._uint64_t object = (void *)0xE400000000000000LL;
  String.append(_:)(v6);
  id v7 = objc_msgSend(objc_allocWithZone(MEMORY[0x189603F50]), sel_initWithTimeIntervalSinceReferenceDate_, v1 + v2);
  id v8 = objc_msgSend(v7, sel_description);

  id v9 = static String._unconditionallyBridgeFromObjectiveC(_:)(v8);
  uint64_t v11 = v10;

  v12._uint64_t countAndFlagsBits = (uint64_t)v9;
  v12._uint64_t object = v11;
  String.append(_:)(v12);
  swift_bridgeObjectRelease();
  return v14;
}

uint64_t DateInterval.customMirror.getter()
{
  uint64_t v1 = type metadata accessor for Mirror.AncestorRepresentation();
  uint64_t v2 = *(void *)(v1 - 8);
  MEMORY[0x1895F8858](v1);
  id v4 = (char *)&v30 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Mirror.DisplayStyle?);
  MEMORY[0x1895F8858](v5);
  id v7 = (char *)&v30 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  double v8 = *v0;
  double v9 = v0[1];
  uint64_t v34 = &type metadata for Date;
  v33[0] = v8;
  __int128 v30 = xmmword_183730740;
  outlined init with take of Any(v33, &v31);
  uint64_t v10 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  1LL,  1,  MEMORY[0x18961AFE8]);
  unint64_t v12 = v10[2];
  unint64_t v11 = v10[3];
  if (v12 >= v11 >> 1) {
    uint64_t v10 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (void *)(v11 > 1),  v12 + 1,  1,  v10);
  }
  void v10[2] = v12 + 1;
  BOOL v13 = &v10[6 * v12];
  __int128 v14 = v30;
  __int128 v15 = v32;
  v13[3] = v31;
  v13[4] = v15;
  v13[2] = v14;
  uint64_t v34 = &type metadata for Date;
  v33[0] = v8 + v9;
  __int128 v30 = xmmword_183730750;
  outlined init with take of Any(v33, &v31);
  unint64_t v17 = v10[2];
  unint64_t v16 = v10[3];
  if (v17 >= v16 >> 1) {
    uint64_t v10 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (void *)(v16 > 1),  v17 + 1,  1,  v10);
  }
  void v10[2] = v17 + 1;
  __int128 v18 = &v10[6 * v17];
  __int128 v19 = v30;
  __int128 v20 = v32;
  v18[3] = v31;
  void v18[4] = v20;
  void v18[2] = v19;
  uint64_t v34 = (ValueMetadata *)MEMORY[0x189618560];
  v33[0] = v9;
  __int128 v30 = xmmword_183730760;
  outlined init with take of Any(v33, &v31);
  unint64_t v22 = v10[2];
  unint64_t v21 = v10[3];
  if (v22 >= v21 >> 1) {
    uint64_t v10 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (void *)(v21 > 1),  v22 + 1,  1,  v10);
  }
  void v10[2] = v22 + 1;
  uint64_t v23 = &v10[6 * v22];
  __int128 v24 = v30;
  __int128 v25 = v32;
  v23[3] = v31;
  v23[4] = v25;
  v23[2] = v24;
  *(double *)&__int128 v30 = v8;
  *((double *)&v30 + 1) = v9;
  *(void *)&v33[0] = v10;
  uint64_t v26 = *MEMORY[0x18961A718];
  uint64_t v27 = type metadata accessor for Mirror.DisplayStyle();
  uint64_t v28 = *(void *)(v27 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v28 + 104))(v7, v26, v27);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v28 + 56))(v7, 0LL, 1LL, v27);
  (*(void (**)(char *, void, uint64_t))(v2 + 104))(v4, *MEMORY[0x18961A748], v1);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [(label: String?, value: Any)]);
  lazy protocol witness table accessor for type [(label: String?, value: Any)] and conformance [A]();
  return Mirror.init<A, B>(_:children:displayStyle:ancestorRepresentation:)();
}

unint64_t static DateInterval._getObjectiveCType()()
{
  return type metadata accessor for NSDateInterval();
}

NSDateInterval __swiftcall DateInterval._bridgeToObjectiveC()()
{
  double v1 = *v0;
  double v2 = v0[1];
  id v3 = objc_allocWithZone((Class)&OBJC_CLASS___NSDateInterval);
  id v4 = objc_msgSend(objc_allocWithZone(MEMORY[0x189603F50]), sel_initWithTimeIntervalSinceReferenceDate_, v1);
  id v5 = objc_msgSend(v3, sel_initWithStartDate_duration_, v4, v2);

  return (NSDateInterval)v5;
}

id static DateInterval._forceBridgeFromObjectiveC(_:result:)(void *a1, uint64_t a2)
{
  id result = objc_msgSend(a1, sel_startDate);
  if (result)
  {
    id v5 = result;
    objc_msgSend(result, sel_timeIntervalSinceReferenceDate);
    uint64_t v7 = v6;

    id result = objc_msgSend(a1, sel_duration);
    if (v8 >= 0.0)
    {
      *(void *)a2 = v7;
      *(double *)(a2 + 8) = v8;
      *(_BYTE *)(a2 + 16) = 0;
      return result;
    }

    __break(1u);
  }

  __break(1u);
  return result;
}

uint64_t static DateInterval._conditionallyBridgeFromObjectiveC(_:result:)(void *a1, uint64_t a2)
{
  uint64_t result = (uint64_t)objc_msgSend(a1, sel_startDate);
  if (result)
  {
    id v5 = (void *)result;
    objc_msgSend((id)result, sel_timeIntervalSinceReferenceDate);
    uint64_t v7 = v6;

    uint64_t result = (uint64_t)objc_msgSend(a1, sel_duration);
    if (v8 >= 0.0)
    {
      *(void *)a2 = v7;
      *(double *)(a2 + 8) = v8;
      *(_BYTE *)(a2 + 16) = 0;
      return 1LL;
    }

    __break(1u);
  }

  __break(1u);
  return result;
}

id static DateInterval._unconditionallyBridgeFromObjectiveC(_:)@<X0>(id result@<X0>, uint64_t a2@<X8>)
{
  if (!result)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }

  double v2 = result;
  uint64_t result = objc_msgSend(result, sel_startDate);
  if (result)
  {
    id v4 = result;
    objc_msgSend(result, sel_timeIntervalSinceReferenceDate);
    uint64_t v6 = v5;

    uint64_t result = objc_msgSend(v2, sel_duration);
    if (v7 >= 0.0)
    {
      *(void *)a2 = v6;
      *(double *)(a2 + 8) = v7;
      return result;
    }

    __break(1u);
    goto LABEL_6;
  }

id protocol witness for _ObjectiveCBridgeable._bridgeToObjectiveC() in conformance DateInterval()
{
  double v1 = *v0;
  double v2 = v0[1];
  id v3 = objc_allocWithZone((Class)&OBJC_CLASS___NSDateInterval);
  id v4 = objc_msgSend(objc_allocWithZone(MEMORY[0x189603F50]), sel_initWithTimeIntervalSinceReferenceDate_, v1);
  id v5 = objc_msgSend(v3, sel_initWithStartDate_duration_, v4, v2);

  return v5;
}

id protocol witness for static _ObjectiveCBridgeable._forceBridgeFromObjectiveC(_:result:) in conformance DateInterval( void *a1, uint64_t a2)
{
  id result = objc_msgSend(a1, sel_startDate);
  if (result)
  {
    id v5 = result;
    objc_msgSend(result, sel_timeIntervalSinceReferenceDate);
    uint64_t v7 = v6;

    id result = objc_msgSend(a1, sel_duration);
    if (v8 >= 0.0)
    {
      *(void *)a2 = v7;
      *(double *)(a2 + 8) = v8;
      *(_BYTE *)(a2 + 16) = 0;
      return result;
    }

    __break(1u);
  }

  __break(1u);
  return result;
}

uint64_t protocol witness for static _ObjectiveCBridgeable._conditionallyBridgeFromObjectiveC(_:result:) in conformance DateInterval( void *a1, uint64_t a2)
{
  uint64_t result = (uint64_t)objc_msgSend(a1, sel_startDate);
  if (result)
  {
    id v5 = (void *)result;
    objc_msgSend((id)result, sel_timeIntervalSinceReferenceDate);
    uint64_t v7 = v6;

    uint64_t result = (uint64_t)objc_msgSend(a1, sel_duration);
    if (v8 >= 0.0)
    {
      *(void *)a2 = v7;
      *(double *)(a2 + 8) = v8;
      *(_BYTE *)(a2 + 16) = 0;
      return 1LL;
    }

    __break(1u);
  }

  __break(1u);
  return result;
}

id protocol witness for static _ObjectiveCBridgeable._unconditionallyBridgeFromObjectiveC(_:) in conformance DateInterval@<X0>( id result@<X0>, uint64_t a2@<X8>)
{
  if (!result)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }

  double v2 = result;
  uint64_t result = objc_msgSend(result, sel_startDate);
  if (result)
  {
    id v4 = result;
    objc_msgSend(result, sel_timeIntervalSinceReferenceDate);
    uint64_t v6 = v5;

    uint64_t result = objc_msgSend(v2, sel_duration);
    if (v7 >= 0.0)
    {
      *(void *)a2 = v6;
      *(double *)(a2 + 8) = v7;
      return result;
    }

    __break(1u);
    goto LABEL_6;
  }

id NSDateInterval._toCustomAnyHashable()()
{
  id result = objc_msgSend(v0, sel_startDate);
  if (result)
  {
    double v2 = result;
    objc_msgSend(result, sel_timeIntervalSinceReferenceDate);

    id result = objc_msgSend(v0, sel_duration);
    if (v3 >= 0.0)
    {
      lazy protocol witness table accessor for type DateInterval and conformance DateInterval();
      return (id)AnyHashable.init<A>(_:)();
    }

    __break(1u);
  }

  __break(1u);
  return result;
}

void protocol witness for _HasCustomAnyHashableRepresentation._toCustomAnyHashable() in conformance NSDateInterval()
{
  id v1 = *v0;
  id v2 = objc_msgSend(*v0, sel_startDate);
  if (v2)
  {
    double v3 = v2;
    objc_msgSend(v2, sel_timeIntervalSinceReferenceDate);

    objc_msgSend(v1, sel_duration);
    if (v4 >= 0.0)
    {
      lazy protocol witness table accessor for type DateInterval and conformance DateInterval();
      AnyHashable.init<A>(_:)();

      return;
    }

    __break(1u);
  }

  __break(1u);
}

unint64_t lazy protocol witness table accessor for type DateInterval.CodingKeys and conformance DateInterval.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type DateInterval.CodingKeys and conformance DateInterval.CodingKeys;
  if (!lazy protocol witness table cache variable for type DateInterval.CodingKeys and conformance DateInterval.CodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C](&protocol conformance descriptor for DateInterval.CodingKeys, &unk_189C77850);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type DateInterval.CodingKeys and conformance DateInterval.CodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type DateInterval.CodingKeys and conformance DateInterval.CodingKeys;
  if (!lazy protocol witness table cache variable for type DateInterval.CodingKeys and conformance DateInterval.CodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C](&protocol conformance descriptor for DateInterval.CodingKeys, &unk_189C77850);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type DateInterval.CodingKeys and conformance DateInterval.CodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type DateInterval.CodingKeys and conformance DateInterval.CodingKeys;
  if (!lazy protocol witness table cache variable for type DateInterval.CodingKeys and conformance DateInterval.CodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C](&protocol conformance descriptor for DateInterval.CodingKeys, &unk_189C77850);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type DateInterval.CodingKeys and conformance DateInterval.CodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type DateInterval.CodingKeys and conformance DateInterval.CodingKeys;
  if (!lazy protocol witness table cache variable for type DateInterval.CodingKeys and conformance DateInterval.CodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C](&protocol conformance descriptor for DateInterval.CodingKeys, &unk_189C77850);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type DateInterval.CodingKeys and conformance DateInterval.CodingKeys);
  }

  return result;
}

unint64_t type metadata accessor for NSDateInterval()
{
  unint64_t result = lazy cache variable for type metadata for NSDateInterval;
  if (!lazy cache variable for type metadata for NSDateInterval)
  {
    objc_opt_self();
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for NSDateInterval);
  }

  return result;
}

unint64_t lazy protocol witness table accessor for type DateInterval and conformance DateInterval()
{
  unint64_t result = lazy protocol witness table cache variable for type DateInterval and conformance DateInterval;
  if (!lazy protocol witness table cache variable for type DateInterval and conformance DateInterval)
  {
    unint64_t result = MEMORY[0x186E20D4C](&protocol conformance descriptor for DateInterval, &type metadata for DateInterval);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type DateInterval and conformance DateInterval);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type DateInterval and conformance DateInterval;
  if (!lazy protocol witness table cache variable for type DateInterval and conformance DateInterval)
  {
    unint64_t result = MEMORY[0x186E20D4C](&protocol conformance descriptor for DateInterval, &type metadata for DateInterval);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type DateInterval and conformance DateInterval);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type DateInterval and conformance DateInterval;
  if (!lazy protocol witness table cache variable for type DateInterval and conformance DateInterval)
  {
    unint64_t result = MEMORY[0x186E20D4C](&protocol conformance descriptor for DateInterval, &type metadata for DateInterval);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type DateInterval and conformance DateInterval);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type DateInterval and conformance DateInterval;
  if (!lazy protocol witness table cache variable for type DateInterval and conformance DateInterval)
  {
    unint64_t result = MEMORY[0x186E20D4C](&protocol conformance descriptor for DateInterval, &type metadata for DateInterval);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type DateInterval and conformance DateInterval);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type DateInterval and conformance DateInterval;
  if (!lazy protocol witness table cache variable for type DateInterval and conformance DateInterval)
  {
    unint64_t result = MEMORY[0x186E20D4C](&protocol conformance descriptor for DateInterval, &type metadata for DateInterval);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type DateInterval and conformance DateInterval);
  }

  return result;
}

unint64_t instantiation function for generic protocol witness table for DateInterval(void *a1)
{
  a1[1] = lazy protocol witness table accessor for type DateInterval and conformance DateInterval();
  a1[2] = lazy protocol witness table accessor for type DateInterval and conformance DateInterval();
  a1[3] = lazy protocol witness table accessor for type DateInterval and conformance DateInterval();
  unint64_t result = lazy protocol witness table accessor for type DateInterval and conformance DateInterval();
  a1[4] = result;
  return result;
}

double sub_18305E28C@<D0>(double *a1@<X0>, double *a2@<X8>)
{
  double result = *a1 + a1[1];
  *a2 = result;
  return result;
}

double *sub_18305E29C(double *result, double *a2)
{
  if (*result < *a2 || (double v2 = *result - *a2, v2 < 0.0)) {
    __break(1u);
  }
  else {
    a2[1] = v2;
  }
  return result;
}

double sub_18305E2C4@<D0>(uint64_t a1@<X0>, double *a2@<X8>)
{
  double result = *(double *)(a1 + 8);
  *a2 = result;
  return result;
}

void *sub_18305E2D0(void *result, uint64_t a2)
{
  else {
    *(void *)(a2 + 8) = *result;
  }
  return result;
}

ValueMetadata *type metadata accessor for DateInterval()
{
  return &type metadata for DateInterval;
}

uint64_t storeEnumTagSinglePayload for DateInterval.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFE) {
    return ((uint64_t (*)(void))((char *)&loc_18305E344 + 4 * byte_183730775[v4]))();
  }
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_18305E378 + 4 * byte_183730770[v4]))();
}

uint64_t sub_18305E378(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_18305E380(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x18305E388LL);
  }
  return result;
}

uint64_t sub_18305E394(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x18305E39CLL);
  }
  *(_BYTE *)double result = a2 + 1;
  return result;
}

uint64_t sub_18305E3A0(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_18305E3A8(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

void *type metadata accessor for DateInterval.CodingKeys()
{
  return &unk_189C77850;
}

uint64_t specialized DateInterval.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x7472617473LL && a2 == 0xE500000000000000LL;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0LL;
  }

  else if (a1 == 0x6E6F697461727564LL && a2 == 0xE800000000000000LL)
  {
    swift_bridgeObjectRelease();
    return 1LL;
  }

  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0) {
      return 1LL;
    }
    else {
      return 2LL;
    }
  }

Swift::Int protocol witness for Hashable.hashValue.getter in conformance ICURelativeDateFormatter.Signature()
{
  Swift::UInt32 v1 = *(_DWORD *)(v0 + 16);
  int v2 = *(unsigned __int8 *)(v0 + 20);
  Swift::UInt32 v4 = *(_DWORD *)(v0 + 24);
  Swift::UInt32 v3 = *(_DWORD *)(v0 + 28);
  Hasher.init(_seed:)();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  if (v2 == 1)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v1);
  }

  Hasher._combine(_:)(v4);
  Hasher._combine(_:)(v3);
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance ICURelativeDateFormatter.Signature()
{
  Swift::UInt32 v1 = *(_DWORD *)(v0 + 16);
  int v2 = *(unsigned __int8 *)(v0 + 20);
  Swift::UInt32 v4 = *(_DWORD *)(v0 + 24);
  Swift::UInt32 v3 = *(_DWORD *)(v0 + 28);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  if (v2 == 1)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v1);
  }

  Hasher._combine(_:)(v4);
  Hasher._combine(_:)(v3);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance ICURelativeDateFormatter.Signature()
{
  Swift::UInt32 v1 = *(_DWORD *)(v0 + 16);
  int v2 = *(unsigned __int8 *)(v0 + 20);
  Swift::UInt32 v4 = *(_DWORD *)(v0 + 24);
  Swift::UInt32 v3 = *(_DWORD *)(v0 + 28);
  Hasher.init(_seed:)();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  if (v2 == 1)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v1);
  }

  Hasher._combine(_:)(v4);
  Hasher._combine(_:)(v3);
  return Hasher._finalize()();
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance ICURelativeDateFormatter.Signature( uint64_t a1, uint64_t a2)
{
  return specialized static ICURelativeDateFormatter.Signature.== infix(_:_:)( *(void *)a1,  *(void *)(a1 + 8),  *(unsigned int *)(a1 + 16) | ((unint64_t)*(unsigned __int8 *)(a1 + 20) << 32),  *(void *)(a1 + 24),  *(void *)a2,  *(void *)(a2 + 8),  *(unsigned int *)(a2 + 16) | ((unint64_t)*(unsigned __int8 *)(a2 + 20) << 32),  *(void *)(a2 + 24));
}

void one-time initialization function for sortedAllowedComponents()
{
  static ICURelativeDateFormatter.sortedAllowedComponents = (uint64_t)&outlined read-only object #0 of one-time initialization function for sortedAllowedComponents;
}

unint64_t one-time initialization function for componentsToURelativeDateUnit()
{
  uint64_t v0 = (void *)static _DictionaryStorage.allocate(capacity:)();
  unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(1LL);
  if ((v2 & 1) != 0)
  {
    __break(1u);
    goto LABEL_17;
  }

  Swift::UInt32 v3 = v0 + 8;
  *(void *)((char *)v0 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8LL) + 64) |= 1LL << result;
  *(_BYTE *)(v0[6] + result) = 1;
  *(_DWORD *)(v0[7] + 4 * result) = 0;
  uint64_t v4 = v0[2];
  BOOL v5 = __OFADD__(v4, 1LL);
  uint64_t v6 = v4 + 1;
  if (v5)
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }

  v0[2] = v6;
  unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(2LL);
  if ((v7 & 1) != 0)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }

  *(void *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << result;
  *(_BYTE *)(v0[6] + result) = 2;
  *(_DWORD *)(v0[7] + 4 * result) = 2;
  uint64_t v8 = v0[2];
  BOOL v5 = __OFADD__(v8, 1LL);
  uint64_t v9 = v8 + 1;
  if (v5)
  {
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }

  v0[2] = v9;
  unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(10LL);
  if ((v10 & 1) != 0)
  {
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }

  *(void *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << result;
  *(_BYTE *)(v0[6] + result) = 10;
  *(_DWORD *)(v0[7] + 4 * result) = 3;
  uint64_t v11 = v0[2];
  BOOL v5 = __OFADD__(v11, 1LL);
  uint64_t v12 = v11 + 1;
  if (v5)
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }

  v0[2] = v12;
  unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(3LL);
  if ((v13 & 1) != 0)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }

  *(void *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << result;
  *(_BYTE *)(v0[6] + result) = 3;
  *(_DWORD *)(v0[7] + 4 * result) = 4;
  uint64_t v14 = v0[2];
  BOOL v5 = __OFADD__(v14, 1LL);
  uint64_t v15 = v14 + 1;
  if (v5)
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }

  v0[2] = v15;
  unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(4LL);
  if ((v16 & 1) != 0)
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }

  *(void *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << result;
  *(_BYTE *)(v0[6] + result) = 4;
  *(_DWORD *)(v0[7] + 4 * result) = 5;
  uint64_t v17 = v0[2];
  BOOL v5 = __OFADD__(v17, 1LL);
  uint64_t v18 = v17 + 1;
  if (v5)
  {
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }

  v0[2] = v18;
  unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(5LL);
  if ((v19 & 1) != 0)
  {
LABEL_26:
    __break(1u);
    goto LABEL_27;
  }

  *(void *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << result;
  *(_BYTE *)(v0[6] + result) = 5;
  *(_DWORD *)(v0[7] + 4 * result) = 6;
  uint64_t v20 = v0[2];
  BOOL v5 = __OFADD__(v20, 1LL);
  uint64_t v21 = v20 + 1;
  if (v5)
  {
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }

  v0[2] = v21;
  unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(6LL);
  if ((v22 & 1) != 0)
  {
LABEL_28:
    __break(1u);
    goto LABEL_29;
  }

  *(void *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << result;
  *(_BYTE *)(v0[6] + result) = 6;
  *(_DWORD *)(v0[7] + 4 * result) = 7;
  uint64_t v23 = v0[2];
  BOOL v5 = __OFADD__(v23, 1LL);
  uint64_t v24 = v23 + 1;
  if (!v5)
  {
    v0[2] = v24;
    static ICURelativeDateFormatter.componentsToURelativeDateUnit = (uint64_t)v0;
    return result;
  }

uint64_t ICURelativeDateFormatter.init(signature:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if ((a3 & 0x100000000LL) == 0)
  {
    String.utf8CString.getter();
    unum_open();
    swift_release();
  }

  String.utf8CString.getter();
  swift_bridgeObjectRelease();
  uint64_t v4 = ureldatefmt_open();
  swift_release();
  if (v4)
  {
    *(void *)(v3 + 16) = v4;
  }

  else
  {
    swift_deallocPartialClassInstance();
    return 0LL;
  }

  return v3;
}

uint64_t ICURelativeDateFormatter.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for ICURelativeDateFormatter()
{
  return objc_opt_self();
}

uint64_t ICURelativeDateFormatter.format(value:component:presentation:)( uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3)
{
  uint64_t v4 = v3;
  v16[2] = *MEMORY[0x1895F89C0];
  uint64_t v6 = *a2;
  int v7 = *a3;
  if (one-time initialization token for componentsToURelativeDateUnit != -1) {
    swift_once();
  }
  uint64_t v8 = static ICURelativeDateFormatter.componentsToURelativeDateUnit;
  if (!*(void *)(static ICURelativeDateFormatter.componentsToURelativeDateUnit + 16)) {
    return 0LL;
  }
  uint64_t v9 = specialized __RawDictionaryStorage.find<A>(_:)(v6);
  if ((v10 & 1) == 0) {
    return 0LL;
  }
  uint64_t v11 = *(unsigned int *)(*(void *)(v8 + 56) + 4 * v9);
  uint64_t v12 = swift_retain_n();
  MEMORY[0x1895F8858](v12);
  swift_retain();
  if (v7) {
    specialized closure #1 in _withResizingUCharBuffer(initialSize:_:)((uint64_t)v15, 32LL, v4, a1, v11, v16);
  }
  else {
    specialized closure #1 in _withResizingUCharBuffer(initialSize:_:)((uint64_t)v15, 32LL, v4, a1, v11, v16);
  }
  uint64_t v13 = v16[0];
  swift_release_n();
  return v13;
}

BOOL specialized static ICURelativeDateFormatter.Signature.== infix(_:_:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (a1 == a5 && a2 == a6 || (v12 = _stringCompareWithSmolCheck(_:_:expecting:)(), BOOL result = 0LL, (v12 & 1) != 0))
  {
    BOOL result = 0LL;
    if ((a3 & 0x100000000LL) != 0)
    {
      if ((a7 & 0x100000000LL) == 0) {
        return result;
      }
    }

    else if ((a7 & 0x100000000LL) != 0 || (_DWORD)a3 != (_DWORD)a7)
    {
      return result;
    }

    if ((_DWORD)a4 == (_DWORD)a8) {
      return HIDWORD(a4) == HIDWORD(a8);
    }
  }

  return result;
}

uint64_t initializeWithCopy for ICURelativeDateFormatter.Signature(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 20) = *(_BYTE *)(a2 + 20);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for ICURelativeDateFormatter.Signature(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  int v4 = *(_DWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 20) = *(_BYTE *)(a2 + 20);
  *(_DWORD *)(a1 + 16) = v4;
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  return a1;
}

uint64_t assignWithTake for ICURelativeDateFormatter.Signature(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 20) = *(_BYTE *)(a2 + 20);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  return a1;
}

ValueMetadata *type metadata accessor for ICURelativeDateFormatter.Signature()
{
  return &type metadata for ICURelativeDateFormatter.Signature;
}

unint64_t lazy protocol witness table accessor for type ICURelativeDateFormatter.Signature and conformance ICURelativeDateFormatter.Signature()
{
  unint64_t result = lazy protocol witness table cache variable for type ICURelativeDateFormatter.Signature and conformance ICURelativeDateFormatter.Signature;
  if (!lazy protocol witness table cache variable for type ICURelativeDateFormatter.Signature and conformance ICURelativeDateFormatter.Signature)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for ICURelativeDateFormatter.Signature,  &type metadata for ICURelativeDateFormatter.Signature);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type ICURelativeDateFormatter.Signature and conformance ICURelativeDateFormatter.Signature);
  }

  return result;
}

uint64_t one-time initialization function for _lock()
{
  uint64_t result = swift_allocObject();
  *(_DWORD *)(result + 24) = 0;
  *(void *)(result + 16) = MEMORY[0x18961AFF8];
  _lock = result;
  return result;
}

uint64_t specialized static NSKeyedUnarchiver.__swift_checkClassAndWarnForKeyedArchiving(_:operation:)( unint64_t a1, int a2)
{
  ObjCClassFromMetadata = (objc_class *)swift_getObjCClassFromMetadata();
  if ((_swift_isObjCTypeNameSerializable() & 1) != 0) {
    return 0LL;
  }
  if (one-time initialization token for _lock != -1) {
    swift_once();
  }
  uint64_t v6 = (os_unfair_lock_s *)(_lock + 24);
  os_unfair_lock_lock((os_unfair_lock_t)(_lock + 24));
  char v7 = specialized Set._Variant.insert(_:)(&v32, a1);
  os_unfair_lock_unlock(v6);
  if ((v7 & 1) == 0) {
    return 1LL;
  }
  unint64_t v32 = a1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Swift.AnyObject.Type);
  uint64_t v8 = String.init<A>(reflecting:)();
  char v10 = v9;
  uint64_t v11 = NSStringFromClass(ObjCClassFromMetadata);
  id v12 = static String._unconditionallyBridgeFromObjectiveC(_:)(v11);
  uint64_t v14 = v13;

  BOOL v15 = a2 == 1;
  if (a2 == 1) {
    uint64_t v16 = 0x7669686372616E75LL;
  }
  else {
    uint64_t v16 = 0x65766968637261LL;
  }
  if (v15) {
    uint64_t v17 = (void *)0xE900000000000065LL;
  }
  else {
    uint64_t v17 = (void *)0xE700000000000000LL;
  }
  unint64_t v32 = 0LL;
  unint64_t v33 = 0xE000000000000000LL;
  _StringGuts.grow(_:)(371LL);
  v18._uint64_t countAndFlagsBits = 0x6974706D65747441LL;
  v18._uint64_t object = (void *)0xEE00206F7420676ELL;
  String.append(_:)(v18);
  v19._uint64_t countAndFlagsBits = v16;
  v19._uint64_t object = v17;
  String.append(_:)(v19);
  swift_bridgeObjectRelease();
  v20._uint64_t countAndFlagsBits = 0x6320746669775320LL;
  v20._uint64_t object = (void *)0xEE0027207373616CLL;
  String.append(_:)(v20);
  v21._uint64_t countAndFlagsBits = v8;
  v21._uint64_t object = v10;
  String.append(_:)(v21);
  swift_bridgeObjectRelease();
  v22._uint64_t object = (void *)0x80000001839CBAA0LL;
  v22._uint64_t countAndFlagsBits = 0xD00000000000001ELL;
  String.append(_:)(v22);
  v23._uint64_t countAndFlagsBits = (uint64_t)v12;
  v23._uint64_t object = v14;
  String.append(_:)(v23);
  v24._uint64_t countAndFlagsBits = 0xD0000000000000AELL;
  v24._uint64_t object = (void *)0x80000001839CBAC0LL;
  String.append(_:)(v24);
  v25._uint64_t countAndFlagsBits = (uint64_t)v12;
  v25._uint64_t object = v14;
  String.append(_:)(v25);
  swift_bridgeObjectRelease();
  v26._uint64_t countAndFlagsBits = 0xD000000000000083LL;
  v26._uint64_t object = (void *)0x80000001839CBB70LL;
  String.append(_:)(v26);
  unint64_t v28 = v32;
  unint64_t v27 = v33;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_183720D90;
  *(void *)(inited + 56) = MEMORY[0x189617FA8];
  *(void *)(inited + 64) = lazy protocol witness table accessor for type String and conformance String();
  *(void *)(inited + 32) = v28;
  *(void *)(inited + 40) = v27;
  swift_bridgeObjectRetain();
  specialized withVaList<A>(_:_:)(inited);
  swift_setDeallocating();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CVarArg);
  uint64_t v5 = 1LL;
  swift_arrayDestroy();
  uint64_t v30 = String.utf8CString.getter();
  MEMORY[0x186E1F3B4](0LL, v30 + 32, 0LL);
  swift_bridgeObjectRelease();
  swift_release();
  return v5;
}

uint64_t _sSTsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFxq0_q_Ri_zRi0_zRi__Ri0__Ri_0_Ri0_0_r1_lyADs5NeverOSSIsgnrzr_xSaySSGAGSTRzSSRsd__AGRsd_0_r_0_lIetMgnozo_Tp5( void (*a1)(uint64_t *__return_ptr, char *), uint64_t a2, uint64_t a3, uint64_t a4)
{
  void (*v48)(uint64_t *__return_ptr, char *);
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v5 = v4;
  unint64_t v48 = a1;
  id v49 = a2;
  uint64_t v45 = a4;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v8 = type metadata accessor for Optional();
  uint64_t v41 = *(void *)(v8 - 8);
  uint64_t v42 = v8;
  uint64_t v9 = MEMORY[0x1895F8858](v8);
  uint64_t v11 = (char *)&v40 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = MEMORY[0x1895F8858](v9);
  uint64_t v47 = (char *)&v40 - v13;
  uint64_t v14 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v15 = MEMORY[0x1895F8858](v12);
  uint64_t v46 = (char *)&v40 - v16;
  uint64_t v51 = *(char **)(a3 - 8);
  MEMORY[0x1895F8858](v15);
  Swift::String v18 = (char *)&v40 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v50 = swift_getAssociatedTypeWitness();
  uint64_t v43 = *(void *)(v50 - 8);
  MEMORY[0x1895F8858](v50);
  Swift::String v20 = (char *)&v40 - v19;
  uint64_t v21 = dispatch thunk of Sequence.underestimatedCount.getter();
  unint64_t v54 = MEMORY[0x18961AFE8];
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v21 & ~(v21 >> 63), 0);
  (*((void (**)(char *, uint64_t, uint64_t))v51 + 2))(v18, v44, a3);
  uint64_t v51 = v20;
  uint64_t result = dispatch thunk of Sequence.makeIterator()();
  if (v21 < 0)
  {
    __break(1u);
LABEL_26:
    __break(1u);
    return result;
  }

  if (v21)
  {
    uint64_t v23 = v50;
    swift_getAssociatedConformanceWitness();
    while (1)
    {
      dispatch thunk of IteratorProtocol.next()();
      uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 48))(v11, 1LL, AssociatedTypeWitness);
      if ((_DWORD)result == 1) {
        goto LABEL_26;
      }
      v48(&v52, v11);
      if (v5)
      {
        (*(void (**)(char *, uint64_t))(v43 + 8))(v51, v23);
        swift_release();
        return (*(uint64_t (**)(char *, uint64_t))(v14 + 8))(v11, AssociatedTypeWitness);
      }

      uint64_t v5 = 0LL;
      (*(void (**)(char *, uint64_t))(v14 + 8))(v11, AssociatedTypeWitness);
      uint64_t v24 = v54;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)( 0,  *(void *)(v24 + 16) + 1LL,  1);
        uint64_t v24 = v54;
      }

      unint64_t v26 = *(void *)(v24 + 16);
      unint64_t v25 = *(void *)(v24 + 24);
      if (v26 >= v25 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v25 > 1, v26 + 1, 1);
        uint64_t v24 = v54;
      }

      uint64_t v27 = v52;
      uint64_t v28 = v53;
      *(void *)(v24 + 16) = v26 + 1;
      uint64_t v29 = v24 + 16 * v26;
      *(void *)(v29 + 32) = v27;
      *(void *)(v29 + 40) = v28;
      --v21;
      uint64_t v23 = v50;
      if (!v21) {
        goto LABEL_13;
      }
    }
  }

  uint64_t v23 = v50;
  swift_getAssociatedConformanceWitness();
LABEL_13:
  uint64_t v30 = v47;
  dispatch thunk of IteratorProtocol.next()();
  __int128 v31 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48);
  if (v31(v30, 1LL, AssociatedTypeWitness) == 1)
  {
LABEL_14:
    (*(void (**)(char *, uint64_t))(v43 + 8))(v51, v23);
    (*(void (**)(char *, uint64_t))(v41 + 8))(v30, v42);
    return v54;
  }

  else
  {
    unint64_t v32 = *(void (**)(void))(v14 + 32);
    while (1)
    {
      unint64_t v33 = v46;
      v32();
      v48(&v52, v33);
      if (v5) {
        break;
      }
      uint64_t v5 = 0LL;
      (*(void (**)(char *, uint64_t))(v14 + 8))(v33, AssociatedTypeWitness);
      uint64_t v34 = v54;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)( 0,  *(void *)(v34 + 16) + 1LL,  1);
        uint64_t v34 = v54;
      }

      unint64_t v36 = *(void *)(v34 + 16);
      unint64_t v35 = *(void *)(v34 + 24);
      if (v36 >= v35 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v35 > 1, v36 + 1, 1);
        uint64_t v34 = v54;
      }

      uint64_t v37 = v52;
      uint64_t v38 = v53;
      *(void *)(v34 + 16) = v36 + 1;
      uint64_t v39 = v34 + 16 * v36;
      *(void *)(v39 + 32) = v37;
      *(void *)(v39 + 40) = v38;
      uint64_t v30 = v47;
      uint64_t v23 = v50;
      dispatch thunk of IteratorProtocol.next()();
      if (v31(v30, 1LL, AssociatedTypeWitness) == 1) {
        goto LABEL_14;
      }
    }

    (*(void (**)(char *, uint64_t))(v14 + 8))(v33, AssociatedTypeWitness);
    (*(void (**)(char *, uint64_t))(v43 + 8))(v51, v23);
    return swift_release();
  }

uint64_t _sSTsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFxq0_q_Ri_zRi0_zRi__Ri0__Ri_0_Ri0_0_r1_lyADsAE_pypSgIsgnrzr_xSayAFGsAE_pSTRzAFRsd__sAE_pRsd_0_r_0_lIetMgnozo_Tp5( void (*a1)(void *__return_ptr, char *, uint64_t *), uint64_t a2, uint64_t a3, uint64_t a4)
{
  void (*v43)(void *__return_ptr, char *, uint64_t *);
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  void v48[4];
  uint64_t v49;
  uint64_t v5 = v4;
  uint64_t v43 = a1;
  uint64_t v44 = a2;
  uint64_t v40 = a4;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v8 = type metadata accessor for Optional();
  uint64_t v36 = *(void *)(v8 - 8);
  uint64_t v37 = v8;
  MEMORY[0x1895F8858](v8);
  uint64_t v10 = (char *)&v36 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v11);
  uint64_t v42 = (char *)&v36 - v12;
  uint64_t v13 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1895F8858](v14);
  uint64_t v41 = (char *)&v36 - v15;
  uint64_t v46 = *(char **)(a3 - 8);
  MEMORY[0x1895F8858](v16);
  Swift::String v18 = (char *)&v36 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v45 = swift_getAssociatedTypeWitness();
  uint64_t v38 = *(void *)(v45 - 8);
  MEMORY[0x1895F8858](v45);
  Swift::String v20 = (char *)&v36 - v19;
  uint64_t v21 = dispatch thunk of Sequence.underestimatedCount.getter();
  id v49 = MEMORY[0x18961AFE8];
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v21 & ~(v21 >> 63), 0);
  (*((void (**)(char *, uint64_t, uint64_t))v46 + 2))(v18, v39, a3);
  uint64_t v46 = v20;
  uint64_t result = dispatch thunk of Sequence.makeIterator()();
  if (v21 < 0)
  {
    __break(1u);
LABEL_26:
    __break(1u);
    return result;
  }

  if (v21)
  {
    uint64_t v23 = v45;
    swift_getAssociatedConformanceWitness();
    while (1)
    {
      dispatch thunk of IteratorProtocol.next()();
      uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v13 + 48))(v10, 1LL, AssociatedTypeWitness);
      if ((_DWORD)result == 1) {
        goto LABEL_26;
      }
      v43(v48, v10, &v47);
      if (v5)
      {
        (*(void (**)(char *, uint64_t))(v38 + 8))(v46, v23);
        swift_release();
        return (*(uint64_t (**)(char *, uint64_t))(v13 + 8))(v10, AssociatedTypeWitness);
      }

      uint64_t v5 = 0LL;
      (*(void (**)(char *, uint64_t))(v13 + 8))(v10, AssociatedTypeWitness);
      uint64_t v24 = v49;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)( 0,  *(void *)(v24 + 16) + 1LL,  1);
        uint64_t v24 = v49;
      }

      unint64_t v26 = *(void *)(v24 + 16);
      unint64_t v25 = *(void *)(v24 + 24);
      if (v26 >= v25 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v25 > 1, v26 + 1, 1);
        uint64_t v24 = v49;
      }

      *(void *)(v24 + 16) = v26 + 1;
      outlined init with take of LocalePreferences?( (uint64_t)v48,  v24 + 32 * v26 + 32,  &demangling cache variable for type metadata for Any?);
      --v21;
      uint64_t v23 = v45;
      if (!v21) {
        goto LABEL_13;
      }
    }
  }

  swift_getAssociatedConformanceWitness();
LABEL_13:
  uint64_t v27 = v42;
  dispatch thunk of IteratorProtocol.next()();
  uint64_t v28 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v13 + 48);
  int v29 = v28(v27, 1LL, AssociatedTypeWitness);
  uint64_t v30 = v41;
  if (v29 == 1)
  {
LABEL_14:
    (*(void (**)(char *, uint64_t))(v38 + 8))(v46, v45);
    (*(void (**)(char *, uint64_t))(v36 + 8))(v27, v37);
    return v49;
  }

  else
  {
    __int128 v31 = *(void (**)(char *, char *, uint64_t))(v13 + 32);
    while (1)
    {
      v31(v30, v27, AssociatedTypeWitness);
      v43(v48, v30, &v47);
      if (v5) {
        break;
      }
      uint64_t v5 = 0LL;
      (*(void (**)(char *, uint64_t))(v13 + 8))(v30, AssociatedTypeWitness);
      uint64_t v32 = v49;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)( 0,  *(void *)(v32 + 16) + 1LL,  1);
        uint64_t v32 = v49;
      }

      unint64_t v34 = *(void *)(v32 + 16);
      unint64_t v33 = *(void *)(v32 + 24);
      if (v34 >= v33 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v33 > 1, v34 + 1, 1);
        uint64_t v32 = v49;
      }

      *(void *)(v32 + 16) = v34 + 1;
      outlined init with take of LocalePreferences?( (uint64_t)v48,  v32 + 32 * v34 + 32,  &demangling cache variable for type metadata for Any?);
      uint64_t v27 = v42;
      dispatch thunk of IteratorProtocol.next()();
      int v35 = v28(v27, 1LL, AssociatedTypeWitness);
      uint64_t v30 = v41;
      if (v35 == 1) {
        goto LABEL_14;
      }
    }

    (*(void (**)(char *, uint64_t))(v13 + 8))(v30, AssociatedTypeWitness);
    (*(void (**)(char *, uint64_t))(v38 + 8))(v46, v45);
    return swift_release();
  }

uint64_t static ListFormatStyle.== infix(_:_:)()
{
  if ((dispatch thunk of static Equatable.== infix(_:_:)() & 1) != 0) {
    type metadata accessor for ListFormatStyle();
  }
  return 0LL;
}

void type metadata accessor for ListFormatStyle()
{
}

__n128 ListFormatStyle.locale(_:)@<Q0>(__n128 *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v7 = *(int *)(a2 + 60);
  __n128 v9 = *a1;
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  __n128 result = v9;
  *(__n128 *)(a3 + v7) = v9;
  return result;
}

uint64_t Sequence.formatted<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(a5 + 48))(v5, a3, a5);
}

uint64_t ListFormatStyle.width.getter@<X0>(uint64_t result@<X0>, _BYTE *a2@<X8>)
{
  *a2 = *(_BYTE *)(v2 + *(int *)(result + 52));
  return result;
}

_BYTE *ListFormatStyle.width.setter(_BYTE *result, uint64_t a2)
{
  *(_BYTE *)(v2 + *(int *)(a2 + 52)) = *result;
  return result;
}

uint64_t (*ListFormatStyle.width.modify())()
{
  return destructiveProjectEnumData for PredicateCodableError;
}

uint64_t ListFormatStyle.listType.getter@<X0>(uint64_t result@<X0>, _BYTE *a2@<X8>)
{
  *a2 = *(_BYTE *)(v2 + *(int *)(result + 56));
  return result;
}

_BYTE *ListFormatStyle.listType.setter(_BYTE *result, uint64_t a2)
{
  *(_BYTE *)(v2 + *(int *)(a2 + 56)) = *result;
  return result;
}

uint64_t (*ListFormatStyle.listType.modify())()
{
  return destructiveProjectEnumData for PredicateCodableError;
}

uint64_t ListFormatStyle.locale.getter@<X0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  *a2 = *(_OWORD *)(v2 + *(int *)(a1 + 60));
  return swift_unknownObjectRetain();
}

__n128 ListFormatStyle.locale.setter(__n128 *a1, uint64_t a2)
{
  uint64_t v4 = *(int *)(a2 + 60);
  swift_unknownObjectRelease();
  __n128 result = *a1;
  *(__n128 *)(v2 + v4) = *a1;
  return result;
}

uint64_t (*ListFormatStyle.locale.modify())()
{
  return destructiveProjectEnumData for PredicateCodableError;
}

void ListFormatStyle.init(memberStyle:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
}

uint64_t sub_18305FFB0(int *a1)
{
  *(_BYTE *)(v1 + a1[13]) = 0;
  *(_BYTE *)(v1 + a1[14]) = 0;
  if (one-time initialization token for cache != -1) {
    swift_once();
  }
  uint64_t v6 = static LocaleCache.cache + 16;
  uint64_t v7 = (os_unfair_lock_s *)(static LocaleCache.cache + 124);
  swift_retain_n();
  os_unfair_lock_lock(v7);
  closure #1 in LocaleCache.autoupdatingCurrent.getter(v6, &v12);
  os_unfair_lock_unlock(v7);
  swift_release_n();
  uint64_t v8 = v12;
  uint64_t v9 = lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( (unint64_t *)&lazy protocol witness table cache variable for type _LocaleAutoupdating and conformance _LocaleAutoupdating,  (uint64_t (*)(uint64_t))type metadata accessor for _LocaleAutoupdating,  (uint64_t)&protocol conformance descriptor for _LocaleAutoupdating);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 8))(v3, v2);
  uint64_t v11 = (uint64_t *)(v1 + a1[15]);
  *uint64_t v11 = v8;
  v11[1] = v9;
  return result;
}

void ListFormatStyle.format(_:)(uint64_t a1)
{
}

uint64_t specialized static ICUListFormatter.formatter<A, B>(for:)(unsigned int a1, uint64_t a2, uint64_t a3)
{
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(a3 + 64);
  swift_unknownObjectRetain();
  uint64_t v7 = v6(ObjectType, a3);
  uint64_t v9 = v8;
  swift_unknownObjectRelease();
  Swift::UInt v10 = (a1 >> 8) & 1;
  Swift::UInt v11 = a1;
  if (one-time initialization token for cache != -1) {
    swift_once();
  }
  uint64_t v13 = static ICUListFormatter.cache;
  uint64_t v12 = *(void *)algn_18C5D6358;
  uint64_t v14 = (uint64_t *)(*(void *)algn_18C5D6358 + 16LL);
  uint64_t v15 = (os_unfair_lock_s *)(*(void *)algn_18C5D6358 + 24LL);
  swift_retain_n();
  os_unfair_lock_lock(v15);
  uint64_t v16 = specialized closure #1 in FormatterCache.formatter(for:creator:)( (uint64_t)v14,  v7,  v9,  (a1 >> 8) & 1,  a1);
  os_unfair_lock_unlock(v15);
  swift_release();
  if (v16)
  {
    swift_bridgeObjectRelease();
    swift_release();
    return v16;
  }

  type metadata accessor for ICUListFormatter();
  uint64_t v16 = swift_allocObject();
  Swift::UInt v58 = v10;
  uint64_t v17 = outlined read-only object #0 of specialized static ICUListFormatter.formatter<A, B>(for:)[v10 + 8];
  swift_bridgeObjectRetain();
  if (v11 > 2)
  {
    __break(1u);
    __break(1u);
  }

  else
  {
    uint64_t v57 = v7;
    String.utf8CString.getter();
    swift_bridgeObjectRelease();
    uint64_t v20 = ulistfmt_openForType();
    swift_release();
    if (!v20)
    {
LABEL_59:
      __break(1u);
      goto LABEL_60;
    }

    *(void *)(v16 + 16) = v20;
    swift_retain();
    os_unfair_lock_lock(v15);
    if (v13 >= *(void *)(*(void *)(v12 + 16) + 16LL)) {
      swift_bridgeObjectRetain();
    }
    else {
      *uint64_t v14 = MEMORY[0x18961AFF0];
    }
    swift_retain();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v59 = *v14;
    uint64_t v17 = *v14;
    *uint64_t v14 = 0x8000000000000000LL;
    unint64_t v19 = specialized __RawDictionaryStorage.find<A>(_:)(v57, v9, v58, v11);
    uint64_t v22 = *(void *)(v17 + 16);
    BOOL v23 = (v18 & 1) == 0;
    uint64_t v24 = v22 + v23;
    if (!__OFADD__(v22, v23))
    {
      if (*(void *)(v17 + 24) < v24)
      {
        char v25 = v18;
        specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)( v24,  isUniquelyReferenced_nonNull_native);
        uint64_t v27 = v58;
        uint64_t v26 = v59;
        uint64_t v28 = v57;
        unint64_t v29 = specialized __RawDictionaryStorage.find<A>(_:)(v57, v9, v58, v11);
        if ((v25 & 1) != (v30 & 1)) {
          goto LABEL_61;
        }
        unint64_t v19 = v29;
        if ((v25 & 1) == 0) {
          goto LABEL_55;
        }
LABEL_17:
        uint64_t v31 = *(void *)(v26 + 56);
        uint64_t v32 = 8 * v19;
        swift_release();
        *(void *)(v31 + v32) = v16;
LABEL_56:
        *(void *)(v12 + 16) = v26;
        swift_bridgeObjectRelease();
        os_unfair_lock_unlock(v15);
        swift_bridgeObjectRelease();
        swift_release_n();
        swift_bridgeObjectRelease();
        return v16;
      }

      if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      {
        uint64_t v26 = v17;
        uint64_t v28 = v57;
        uint64_t v27 = v58;
        if ((v18 & 1) != 0) {
          goto LABEL_17;
        }
LABEL_55:
        specialized _NativeDictionary._insert(at:key:value:)(v19, v28, v9, v27, v11, v16, (void *)v26);
        swift_bridgeObjectRetain();
        goto LABEL_56;
      }

      goto LABEL_20;
    }
  }

  __break(1u);
LABEL_20:
  unint64_t v53 = v19;
  char v54 = v18;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<ICUListFormatter.Signature, ICUListFormatter>);
  uint64_t v33 = static _DictionaryStorage.copy(original:)();
  uint64_t v26 = v33;
  if (!*(void *)(v17 + 16))
  {
LABEL_54:
    swift_bridgeObjectRelease();
    uint64_t v28 = v57;
    uint64_t v27 = v58;
    unint64_t v19 = v53;
    if ((v54 & 1) != 0) {
      goto LABEL_17;
    }
    goto LABEL_55;
  }

  unint64_t v34 = (char *)(v33 + 64);
  __src = (char *)(v17 + 64);
  unint64_t v35 = (unint64_t)((1LL << *(_BYTE *)(v26 + 32)) + 63) >> 6;
  if (v26 != v17 || v34 >= &__src[8 * v35]) {
    memmove(v34, __src, 8 * v35);
  }
  int64_t v36 = 0LL;
  *(void *)(v26 + 16) = *(void *)(v17 + 16);
  uint64_t v37 = 1LL << *(_BYTE *)(v17 + 32);
  uint64_t v38 = -1LL;
  if (v37 < 64) {
    uint64_t v38 = ~(-1LL << v37);
  }
  unint64_t v39 = v38 & *(void *)(v17 + 64);
  int64_t v55 = (unint64_t)(v37 + 63) >> 6;
  while (1)
  {
    if (v39)
    {
      unint64_t v40 = __clz(__rbit64(v39));
      v39 &= v39 - 1;
      unint64_t v41 = v40 | (v36 << 6);
      goto LABEL_28;
    }

    int64_t v49 = v36 + 1;
    if (__OFADD__(v36, 1LL))
    {
      __break(1u);
      goto LABEL_59;
    }

    if (v49 >= v55) {
      goto LABEL_54;
    }
    unint64_t v50 = *(void *)&__src[8 * v49];
    ++v36;
    if (!v50)
    {
      int64_t v36 = v49 + 1;
      if (v49 + 1 >= v55) {
        goto LABEL_54;
      }
      unint64_t v50 = *(void *)&__src[8 * v36];
      if (!v50)
      {
        int64_t v36 = v49 + 2;
        if (v49 + 2 >= v55) {
          goto LABEL_54;
        }
        unint64_t v50 = *(void *)&__src[8 * v36];
        if (!v50)
        {
          int64_t v36 = v49 + 3;
          if (v49 + 3 >= v55) {
            goto LABEL_54;
          }
          unint64_t v50 = *(void *)&__src[8 * v36];
          if (!v50)
          {
            int64_t v36 = v49 + 4;
            if (v49 + 4 >= v55) {
              goto LABEL_54;
            }
            unint64_t v50 = *(void *)&__src[8 * v36];
            if (!v50)
            {
              int64_t v36 = v49 + 5;
              if (v49 + 5 >= v55) {
                goto LABEL_54;
              }
              unint64_t v50 = *(void *)&__src[8 * v36];
              if (!v50)
              {
                int64_t v36 = v49 + 6;
                if (v49 + 6 >= v55) {
                  goto LABEL_54;
                }
                unint64_t v50 = *(void *)&__src[8 * v36];
                if (!v50)
                {
                  int64_t v36 = v49 + 7;
                  if (v49 + 7 >= v55) {
                    goto LABEL_54;
                  }
                  unint64_t v50 = *(void *)&__src[8 * v36];
                  if (!v50) {
                    break;
                  }
                }
              }
            }
          }
        }
      }
    }

{
  uint64_t ObjectType;
  uint64_t (*v6)(uint64_t, uint64_t);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  Swift::UInt v10;
  Swift::UInt v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  os_unfair_lock_s *v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  unint64_t v19;
  uint64_t v20;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  unint64_t v35;
  int64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  __int128 v48;
  int64_t v49;
  unint64_t v50;
  int64_t v51;
  uint64_t result;
  unint64_t v53;
  char v54;
  int64_t v55;
  char *__src;
  uint64_t v57;
  Swift::UInt v58;
  uint64_t v59;
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(a3 + 64);
  swift_unknownObjectRetain();
  uint64_t v7 = v6(ObjectType, a3);
  uint64_t v9 = v8;
  swift_unknownObjectRelease();
  Swift::UInt v10 = (a1 >> 8) & 1;
  Swift::UInt v11 = a1;
  if (one-time initialization token for cache != -1) {
    swift_once();
  }
  uint64_t v13 = static ICUListFormatter.cache;
  uint64_t v12 = *(void *)algn_18C5D6358;
  uint64_t v14 = (uint64_t *)(*(void *)algn_18C5D6358 + 16LL);
  uint64_t v15 = (os_unfair_lock_s *)(*(void *)algn_18C5D6358 + 24LL);
  swift_retain_n();
  os_unfair_lock_lock(v15);
  uint64_t v16 = specialized closure #1 in FormatterCache.formatter(for:creator:)( (uint64_t)v14,  v7,  v9,  (a1 >> 8) & 1,  a1);
  os_unfair_lock_unlock(v15);
  swift_release();
  if (v16)
  {
    swift_bridgeObjectRelease();
    swift_release();
    return v16;
  }

  type metadata accessor for ICUListFormatter();
  uint64_t v16 = swift_allocObject();
  Swift::UInt v58 = v10;
  uint64_t v17 = outlined read-only object #0 of specialized static ICUListFormatter.formatter<A, B>(for:)[v10 + 8];
  swift_bridgeObjectRetain();
  if (v11 > 2)
  {
    __break(1u);
    __break(1u);
  }

  else
  {
    uint64_t v57 = v7;
    String.utf8CString.getter();
    swift_bridgeObjectRelease();
    uint64_t v20 = ulistfmt_openForType();
    swift_release();
    if (!v20)
    {
LABEL_59:
      __break(1u);
      goto LABEL_60;
    }

    *(void *)(v16 + 16) = v20;
    swift_retain();
    os_unfair_lock_lock(v15);
    if (v13 >= *(void *)(*(void *)(v12 + 16) + 16LL)) {
      swift_bridgeObjectRetain();
    }
    else {
      *uint64_t v14 = MEMORY[0x18961AFF0];
    }
    swift_retain();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v59 = *v14;
    uint64_t v17 = *v14;
    *uint64_t v14 = 0x8000000000000000LL;
    unint64_t v19 = specialized __RawDictionaryStorage.find<A>(_:)(v57, v9, v58, v11);
    uint64_t v22 = *(void *)(v17 + 16);
    BOOL v23 = (v18 & 1) == 0;
    uint64_t v24 = v22 + v23;
    if (!__OFADD__(v22, v23))
    {
      if (*(void *)(v17 + 24) < v24)
      {
        char v25 = v18;
        specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)( v24,  isUniquelyReferenced_nonNull_native);
        uint64_t v27 = v58;
        uint64_t v26 = v59;
        uint64_t v28 = v57;
        unint64_t v29 = specialized __RawDictionaryStorage.find<A>(_:)(v57, v9, v58, v11);
        if ((v25 & 1) != (v30 & 1)) {
          goto LABEL_61;
        }
        unint64_t v19 = v29;
        if ((v25 & 1) == 0) {
          goto LABEL_55;
        }
LABEL_17:
        uint64_t v31 = *(void *)(v26 + 56);
        uint64_t v32 = 8 * v19;
        swift_release();
        *(void *)(v31 + v32) = v16;
LABEL_56:
        *(void *)(v12 + 16) = v26;
        swift_bridgeObjectRelease();
        os_unfair_lock_unlock(v15);
        swift_bridgeObjectRelease();
        swift_release_n();
        swift_bridgeObjectRelease();
        return v16;
      }

      if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      {
        uint64_t v26 = v17;
        uint64_t v28 = v57;
        uint64_t v27 = v58;
        if ((v18 & 1) != 0) {
          goto LABEL_17;
        }
LABEL_55:
        specialized _NativeDictionary._insert(at:key:value:)(v19, v28, v9, v27, v11, v16, (void *)v26);
        swift_bridgeObjectRetain();
        goto LABEL_56;
      }

      goto LABEL_20;
    }
  }

  __break(1u);
LABEL_20:
  unint64_t v53 = v19;
  char v54 = v18;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<ICUListFormatter.Signature, ICUListFormatter>);
  uint64_t v33 = static _DictionaryStorage.copy(original:)();
  uint64_t v26 = v33;
  if (!*(void *)(v17 + 16))
  {
LABEL_54:
    swift_bridgeObjectRelease();
    uint64_t v28 = v57;
    uint64_t v27 = v58;
    unint64_t v19 = v53;
    if ((v54 & 1) != 0) {
      goto LABEL_17;
    }
    goto LABEL_55;
  }

  unint64_t v34 = (char *)(v33 + 64);
  __src = (char *)(v17 + 64);
  unint64_t v35 = (unint64_t)((1LL << *(_BYTE *)(v26 + 32)) + 63) >> 6;
  if (v26 != v17 || v34 >= &__src[8 * v35]) {
    memmove(v34, __src, 8 * v35);
  }
  int64_t v36 = 0LL;
  *(void *)(v26 + 16) = *(void *)(v17 + 16);
  uint64_t v37 = 1LL << *(_BYTE *)(v17 + 32);
  uint64_t v38 = -1LL;
  if (v37 < 64) {
    uint64_t v38 = ~(-1LL << v37);
  }
  unint64_t v39 = v38 & *(void *)(v17 + 64);
  int64_t v55 = (unint64_t)(v37 + 63) >> 6;
  while (1)
  {
    if (v39)
    {
      unint64_t v40 = __clz(__rbit64(v39));
      v39 &= v39 - 1;
      unint64_t v41 = v40 | (v36 << 6);
      goto LABEL_28;
    }

    int64_t v49 = v36 + 1;
    if (__OFADD__(v36, 1LL))
    {
      __break(1u);
      goto LABEL_59;
    }

    if (v49 >= v55) {
      goto LABEL_54;
    }
    unint64_t v50 = *(void *)&__src[8 * v49];
    ++v36;
    if (!v50)
    {
      int64_t v36 = v49 + 1;
      if (v49 + 1 >= v55) {
        goto LABEL_54;
      }
      unint64_t v50 = *(void *)&__src[8 * v36];
      if (!v50)
      {
        int64_t v36 = v49 + 2;
        if (v49 + 2 >= v55) {
          goto LABEL_54;
        }
        unint64_t v50 = *(void *)&__src[8 * v36];
        if (!v50)
        {
          int64_t v36 = v49 + 3;
          if (v49 + 3 >= v55) {
            goto LABEL_54;
          }
          unint64_t v50 = *(void *)&__src[8 * v36];
          if (!v50)
          {
            int64_t v36 = v49 + 4;
            if (v49 + 4 >= v55) {
              goto LABEL_54;
            }
            unint64_t v50 = *(void *)&__src[8 * v36];
            if (!v50)
            {
              int64_t v36 = v49 + 5;
              if (v49 + 5 >= v55) {
                goto LABEL_54;
              }
              unint64_t v50 = *(void *)&__src[8 * v36];
              if (!v50)
              {
                int64_t v36 = v49 + 6;
                if (v49 + 6 >= v55) {
                  goto LABEL_54;
                }
                unint64_t v50 = *(void *)&__src[8 * v36];
                if (!v50)
                {
                  int64_t v36 = v49 + 7;
                  if (v49 + 7 >= v55) {
                    goto LABEL_54;
                  }
                  unint64_t v50 = *(void *)&__src[8 * v36];
                  if (!v50) {
                    break;
                  }
                }
              }
            }
          }
        }
      }
    }

unint64_t ListFormatStyle.Width.init(rawValue:)@<X0>(unint64_t result@<X0>, char *a2@<X8>)
{
  char v2 = 3;
  if (result < 3) {
    char v2 = result;
  }
  *a2 = v2;
  return result;
}

uint64_t ListFormatStyle.Width.rawValue.getter()
{
  return *v0;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance ListFormatStyle<A, B>.Width( uint64_t a1, uint64_t a2, uint64_t a3)
{
  return == infix<A>(_:_:)();
}

uint64_t protocol witness for Hashable.hashValue.getter in conformance ListFormatStyle<A, B>.Width( uint64_t a1)
{
  return RawRepresentable<>.hashValue.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance ListFormatStyle<A, B>.Width()
{
  return RawRepresentable<>.hash(into:)();
}

uint64_t protocol witness for Hashable._rawHashValue(seed:) in conformance ListFormatStyle<A, B>.Width()
{
  return RawRepresentable<>._rawHashValue(seed:)();
}

unint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance ListFormatStyle<A, B>.Width@<X0>( unint64_t *a1@<X0>, char *a2@<X8>)
{
  return ListFormatStyle.Width.init(rawValue:)(*a1, a2);
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance ListFormatStyle<A, B>.Width@<X0>( uint64_t *a1@<X8>)
{
  uint64_t result = ListFormatStyle.Width.rawValue.getter();
  *a1 = result;
  return result;
}

uint64_t protocol witness for Decodable.init(from:) in conformance ListFormatStyle<A, B>.Width()
{
  return RawRepresentable<>.init(from:)();
}

uint64_t protocol witness for Encodable.encode(to:) in conformance ListFormatStyle<A, B>.Width()
{
  return RawRepresentable<>.encode(to:)();
}

uint64_t ListFormatStyle.ListType.init(rawValue:)@<X0>(uint64_t result@<X0>, char *a2@<X8>)
{
  if (result == 1) {
    char v2 = 1;
  }
  else {
    char v2 = 2;
  }
  if (!result) {
    char v2 = 0;
  }
  *a2 = v2;
  return result;
}

uint64_t ListFormatStyle.ListType.rawValue.getter()
{
  return *v0;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance ListFormatStyle<A, B>.ListType( uint64_t a1, uint64_t a2, uint64_t a3)
{
  return == infix<A>(_:_:)();
}

uint64_t protocol witness for Hashable.hashValue.getter in conformance ListFormatStyle<A, B>.ListType( uint64_t a1)
{
  return RawRepresentable<>.hashValue.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance ListFormatStyle<A, B>.ListType()
{
  return RawRepresentable<>.hash(into:)();
}

uint64_t protocol witness for Hashable._rawHashValue(seed:) in conformance ListFormatStyle<A, B>.ListType()
{
  return RawRepresentable<>._rawHashValue(seed:)();
}

uint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance ListFormatStyle<A, B>.ListType@<X0>( uint64_t *a1@<X0>, char *a2@<X8>)
{
  return ListFormatStyle.ListType.init(rawValue:)(*a1, a2);
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance ListFormatStyle<A, B>.ListType@<X0>( uint64_t *a1@<X8>)
{
  uint64_t result = ListFormatStyle.ListType.rawValue.getter();
  *a1 = result;
  return result;
}

uint64_t protocol witness for Decodable.init(from:) in conformance ListFormatStyle<A, B>.ListType()
{
  return RawRepresentable<>.init(from:)();
}

uint64_t protocol witness for Encodable.encode(to:) in conformance ListFormatStyle<A, B>.ListType()
{
  return RawRepresentable<>.encode(to:)();
}

uint64_t ListFormatStyle.hash(into:)(uint64_t a1, int *a2)
{
  void (*v9)(void *__return_ptr, uint64_t, uint64_t);
  Swift::UInt8 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _BYTE *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  id v22;
  id v23;
  id v24;
  id v25;
  id v26;
  id v27;
  id v28;
  id v29;
  id v30;
  id v31;
  id v32;
  id v33;
  id v34;
  uint64_t v35;
  uint64_t v36;
  Swift::UInt v37;
  Swift::UInt v38;
  Swift::UInt8 v39;
  Swift::UInt8 v40;
  Swift::UInt8 v41;
  _BYTE v42[144];
  _BYTE v43[8];
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  void *v49;
  void *v50;
  void *v51;
  void *v52;
  void *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char v57;
  char v58;
  char v59;
  char v60;
  void v61[18];
  _BYTE v62[144];
  _BYTE v63[152];
  dispatch thunk of Hashable.hash(into:)();
  Hasher._combine(_:)(*(unsigned __int8 *)(v2 + a2[13]));
  Hasher._combine(_:)(*(unsigned __int8 *)(v2 + a2[14]));
  uint64_t v5 = *(void *)(v2 + a2[15] + 8);
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 48);
  swift_unknownObjectRetain();
  if ((v7(ObjectType, v5) & 1) != 0)
  {
    Hasher._combine(_:)(1u);
    return swift_unknownObjectRelease();
  }

  Hasher._combine(_:)(0);
  (*(void (**)(uint64_t, uint64_t))(v5 + 64))(ObjectType, v5);
  String.hash(into:)();
  swift_bridgeObjectRelease();
  uint64_t v9 = *(void (**)(void *__return_ptr, uint64_t, uint64_t))(v5 + 464);
  swift_unknownObjectRetain();
  v9(v61, ObjectType, v5);
  swift_unknownObjectRelease();
  outlined init with take of LocalePreferences?( (uint64_t)v61,  (uint64_t)v62,  (uint64_t *)&demangling cache variable for type metadata for LocalePreferences?);
  outlined init with take of LocalePreferences?( (uint64_t)v62,  (uint64_t)v63,  (uint64_t *)&demangling cache variable for type metadata for LocalePreferences?);
  if (_s10Foundation17LocalePreferencesVSgWOg((uint64_t)v63) != 1)
  {
    outlined init with take of LocalePreferences?( (uint64_t)v62,  (uint64_t)v43,  (uint64_t *)&demangling cache variable for type metadata for LocalePreferences?);
    Hasher._combine(_:)(1u);
    if (v43[0] == 2)
    {
      Swift::UInt v10 = 0;
    }

    else
    {
      Swift::UInt v10 = v43[0] & 1;
      Hasher._combine(_:)(1u);
    }

    Hasher._combine(_:)(v10);
    Swift::UInt v11 = v44;
    if (v44)
    {
      Hasher._combine(_:)(1u);
      Hasher._combine(_:)(*(void *)(v11 + 16));
      uint64_t v12 = *(void *)(v11 + 16);
      if (v12)
      {
        outlined retain of LocalePreferences?( (uint64_t)v62,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined copy of LocalePreferences?);
        swift_bridgeObjectRetain();
        uint64_t v13 = v11 + 40;
        do
        {
          swift_bridgeObjectRetain();
          String.hash(into:)();
          swift_bridgeObjectRelease();
          v13 += 16LL;
          --v12;
        }

        while (v12);
        swift_bridgeObjectRelease();
        if (!v45)
        {
LABEL_13:
          Hasher._combine(_:)(0);
          if (!v46) {
            goto LABEL_14;
          }
          goto LABEL_21;
        }

uint64_t ListFormatStyle.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x74537265626D656DLL && a2 == 0xEB00000000656C79LL;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0LL;
  }

  else if (a1 == 0x6874646977LL && a2 == 0xE500000000000000LL {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1LL;
  }

  else if (a1 == 0x657079547473696CLL && a2 == 0xE800000000000000LL {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 2LL;
  }

  else if (a1 == 0x656C61636F6CLL && a2 == 0xE600000000000000LL)
  {
    swift_bridgeObjectRelease();
    return 3LL;
  }

  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0) {
      return 3LL;
    }
    else {
      return 4LL;
    }
  }

uint64_t ListFormatStyle.CodingKeys.stringValue.getter(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_183061C34 + 4 * byte_183730B60[a1]))( 0x74537265626D656DLL,  0xEB00000000656C79LL);
}

uint64_t sub_183061C34()
{
  return 0x6874646977LL;
}

uint64_t sub_183061C48()
{
  return 0x657079547473696CLL;
}

uint64_t sub_183061C60()
{
  return 0x656C61636F6CLL;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance ListFormatStyle<A, B>.CodingKeys()
{
  return ListFormatStyle.CodingKeys.stringValue.getter(*v0);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance ListFormatStyle<A, B>.CodingKeys@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result = ListFormatStyle.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CodingKey.init(intValue:) in conformance ListFormatStyle<A, B>.CodingKeys@<X0>( _BYTE *a1@<X8>)
{
  uint64_t result = specialized FloatingPointParseStrategy.CodingKeys.init(intValue:)();
  *a1 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance ListFormatStyle<A, B>.CodingKeys( uint64_t a1)
{
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance ListFormatStyle<A, B>.CodingKeys( uint64_t a1)
{
  return CodingKey.debugDescription.getter();
}

void ListFormatStyle.encode(to:)()
{
}

uint64_t sub_183061D98(uint64_t a1)
{
  uint64_t v4 = type metadata accessor for KeyedEncodingContainer();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1895F8858](v4);
  uint64_t v7 = (char *)&v15 - v6;
  __swift_project_boxed_opaque_existential_1(v1, v1[3]);
  uint64_t v8 = v4;
  uint64_t v10 = *(void *)(v3 - 136);
  uint64_t v9 = *(void *)(v3 - 128);
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  *(_BYTE *)(v3 - 112) = 0;
  uint64_t v11 = v2;
  uint64_t v12 = *(void *)(v3 - 120);
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v12)
  {
    *(void *)(v3 - 120) = v5;
    *(void *)(v3 - 112) = v10;
    uint64_t v13 = *(void *)(v3 - 160);
    *(_BYTE *)(v3 - 65) = *(_BYTE *)(v9 + *(int *)(*(void *)(v3 - 152) + 52LL));
    *(_BYTE *)(v3 - 66) = 1;
    *(void *)(v3 - 104) = v13;
    *(void *)(v3 - 96) = v11;
    *(void *)(v3 - 88) = *(void *)(v3 - 144);
    type metadata accessor for ListFormatStyle.Width();
  }

  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v8);
}

Swift::Int ListFormatStyle.hashValue.getter(int *a1)
{
  void (*v7)(void *__return_ptr, uint64_t, uint64_t);
  Swift::UInt8 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  id v20;
  id v21;
  id v22;
  id v23;
  id v24;
  id v25;
  id v26;
  id v27;
  id v28;
  id v29;
  id v30;
  id v31;
  id v32;
  uint64_t v33;
  uint64_t v34;
  Swift::UInt v35;
  Swift::UInt v36;
  Swift::UInt8 v37;
  Swift::UInt8 v38;
  Swift::UInt8 v39;
  _BYTE v41[144];
  _BYTE v42[8];
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  void *v48;
  void *v49;
  void *v50;
  void *v51;
  void *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char v56;
  char v57;
  char v58;
  char v59;
  void v60[18];
  _BYTE v61[144];
  _BYTE v62[144];
  _BYTE v63[72];
  Hasher.init(_seed:)();
  dispatch thunk of Hashable.hash(into:)();
  Hasher._combine(_:)(*(unsigned __int8 *)(v1 + a1[13]));
  Hasher._combine(_:)(*(unsigned __int8 *)(v1 + a1[14]));
  uint64_t v3 = *(void *)(v1 + a1[15] + 8);
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t))(v3 + 48);
  swift_unknownObjectRetain();
  if ((v5(ObjectType, v3) & 1) != 0)
  {
    Swift::UInt8 v6 = 1;
LABEL_5:
    Hasher._combine(_:)(v6);
    goto LABEL_56;
  }

  Hasher._combine(_:)(0);
  (*(void (**)(uint64_t, uint64_t))(v3 + 64))(ObjectType, v3);
  String.hash(into:)();
  swift_bridgeObjectRelease();
  uint64_t v7 = *(void (**)(void *__return_ptr, uint64_t, uint64_t))(v3 + 464);
  swift_unknownObjectRetain();
  v7(v60, ObjectType, v3);
  swift_unknownObjectRelease();
  outlined init with take of LocalePreferences?( (uint64_t)v60,  (uint64_t)v61,  (uint64_t *)&demangling cache variable for type metadata for LocalePreferences?);
  outlined init with take of LocalePreferences?( (uint64_t)v61,  (uint64_t)v62,  (uint64_t *)&demangling cache variable for type metadata for LocalePreferences?);
  if (_s10Foundation17LocalePreferencesVSgWOg((uint64_t)v62) == 1)
  {
    Swift::UInt8 v6 = 0;
    goto LABEL_5;
  }

  outlined init with take of LocalePreferences?( (uint64_t)v61,  (uint64_t)v42,  (uint64_t *)&demangling cache variable for type metadata for LocalePreferences?);
  Hasher._combine(_:)(1u);
  if (v42[0] == 2)
  {
    uint64_t v8 = 0;
  }

  else
  {
    uint64_t v8 = v42[0] & 1;
    Hasher._combine(_:)(1u);
  }

  Hasher._combine(_:)(v8);
  uint64_t v9 = v43;
  if (!v43)
  {
    Hasher._combine(_:)(0);
    uint64_t v14 = v42;
    goto LABEL_20;
  }

  Hasher._combine(_:)(1u);
  Hasher._combine(_:)(*(void *)(v9 + 16));
  uint64_t v10 = *(void *)(v9 + 16);
  if (!v10)
  {
    outlined init with take of LocalePreferences?( (uint64_t)v61,  (uint64_t)v41,  (uint64_t *)&demangling cache variable for type metadata for LocalePreferences?);
    uint64_t v14 = v41;
LABEL_20:
    outlined retain of LocalePreferences(v14);
    if (!v44) {
      goto LABEL_14;
    }
    goto LABEL_21;
  }

  outlined retain of LocalePreferences?( (uint64_t)v61,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined copy of LocalePreferences?);
  swift_bridgeObjectRetain();
  uint64_t v11 = v9 + 40;
  do
  {
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    v11 += 16LL;
    --v10;
  }

  while (v10);
  swift_bridgeObjectRelease();
  if (!v44)
  {
LABEL_14:
    Hasher._combine(_:)(0);
    if (!v45) {
      goto LABEL_15;
    }
    goto LABEL_22;
  }

void ListFormatStyle.init(from:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  v8[3] = a3;
  v8[9] = *(void *)(a2 - 8);
  MEMORY[0x1895F8858](a1);
  v8[7] = (char *)v8 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  v8[14] = v4;
  v8[15] = v5;
  v8[16] = v6;
  v8[17] = v7;
  type metadata accessor for ListFormatStyle.CodingKeys();
}

void sub_183062784(uint64_t a1)
{
  uint64_t v6 = type metadata accessor for KeyedDecodingContainer();
  *(void *)(v5 - 128) = v6;
  *(void *)(v5 - 192) = *(void *)(v6 - 8);
  MEMORY[0x1895F8858](v6);
  *(void *)(v5 - 160) = v2;
  *(void *)(v5 - 112) = v2;
  *(void *)(v5 - 104) = v4;
  *(void *)(v5 - 184) = v4;
  *(void *)(v5 - 176) = v3;
  *(void *)(v5 - 144) = v1;
  *(void *)(v5 - 96) = v1;
  *(void *)(v5 - 88) = v3;
  type metadata accessor for ListFormatStyle();
}

uint64_t sub_1830627FC(uint64_t a1)
{
  uint64_t v5 = *(void *)(a1 - 8);
  MEMORY[0x1895F8858](a1);
  uint64_t v7 = (char *)&v16 - v6;
  __swift_project_boxed_opaque_existential_1(v2, v2[3]);
  *(void *)(v3 - 136) = v1;
  uint64_t v8 = *(void *)(v3 - 120);
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v8)
  {
    uint64_t v10 = *(void *)(v3 - 184);
    uint64_t v9 = *(void *)(v3 - 176);
    *(void *)(v3 - 216) = v5;
    *(void *)(v3 - 208) = a1;
    uint64_t v11 = *(void *)(v3 - 152);
    *(void *)(v3 - 120) = v2;
    *(_BYTE *)(v3 - 112) = 0;
    uint64_t v13 = *(void *)(v3 - 168);
    uint64_t v12 = *(void *)(v3 - 160);
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    uint64_t v15 = *(void (**)(char *, uint64_t, uint64_t))(v11 + 32);
    *(void *)(v3 - 224) = v7;
    v15(v7, v13, v12);
    *(void *)(v3 - 112) = v12;
    *(void *)(v3 - 104) = v10;
    *(void *)(v3 - 96) = *(void *)(v3 - 144);
    *(void *)(v3 - 88) = v9;
    type metadata accessor for ListFormatStyle.Width();
  }

  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v2);
}

void sub_183062924(uint64_t a1)
{
  *(_BYTE *)(v6 - 112) = 1;
  MEMORY[0x186E20D4C](&protocol conformance descriptor for ListFormatStyle<A, B>.Width, a1);
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  if (v2)
  {
    (*(void (**)(void, void))(v3 + 8))(*(void *)(v6 - 136), *(void *)(v6 - 128));
    uint64_t v7 = *(void *)(v6 - 224);
    uint64_t v8 = *(void *)(v6 - 152);
    __swift_destroy_boxed_opaque_existential_1(*(void *)(v6 - 120));
    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v7, v4);
    JUMPOUT(0x1830628C8LL);
  }

  *(_BYTE *)(*(void *)(v6 - 224) + *(int *)(*(void *)(v6 - 208) + 52LL)) = *(_BYTE *)(v6 - 65);
  *(void *)(v6 - 112) = v4;
  *(void *)(v6 - 104) = v1;
  *(void *)(v6 - 96) = *(void *)(v6 - 144);
  *(void *)(v6 - 88) = v5;
  type metadata accessor for ListFormatStyle.ListType();
}

void protocol witness for FormatStyle.format(_:) in conformance ListFormatStyle<A, B>(uint64_t a1)
{
}

void protocol witness for Decodable.init(from:) in conformance ListFormatStyle<A, B>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
}

  ;
}

void protocol witness for Encodable.encode(to:) in conformance ListFormatStyle<A, B>()
{
}

  ;
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance ListFormatStyle<A, B>( uint64_t a1, int *a2)
{
  return Hasher._finalize()();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance ListFormatStyle<A, B>()
{
  return static ListFormatStyle.== infix(_:_:)();
}

Swift::String __swiftcall StringStyle.format(_:)(Swift::String a1)
{
  uint64_t object = a1._object;
  uint64_t countAndFlagsBits = a1._countAndFlagsBits;
  swift_bridgeObjectRetain();
  uint64_t v3 = countAndFlagsBits;
  uint64_t v4 = object;
  result._uint64_t object = v4;
  result._uint64_t countAndFlagsBits = v3;
  return result;
}

uint64_t static StringStyle.== infix(_:_:)()
{
  return 1LL;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance StringStyle.CodingKeys@<X0>( _BYTE *a1@<X8>)
{
  uint64_t result = swift_bridgeObjectRelease();
  *a1 = 1;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance StringStyle.CodingKeys()
{
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance StringStyle.CodingKeys()
{
  return CodingKey.debugDescription.getter();
}

uint64_t StringStyle.encode(to:)(void *a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<StringStyle.CodingKeys>);
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1895F8858](v2);
  uint64_t v5 = (char *)&v7 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type StringStyle.CodingKeys and conformance StringStyle.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
}

Swift::Int StringStyle.hashValue.getter()
{
  return Hasher._finalize()();
}

uint64_t StringStyle.init(from:)(uint64_t a1)
{
  return __swift_destroy_boxed_opaque_existential_1(a1);
}

uint64_t protocol witness for FormatStyle.format(_:) in conformance StringStyle@<X0>( uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *a1;
  uint64_t v3 = a1[1];
  *a2 = v2;
  a2[1] = v3;
  return swift_bridgeObjectRetain();
}

uint64_t protocol witness for Decodable.init(from:) in conformance StringStyle(uint64_t a1)
{
  return __swift_destroy_boxed_opaque_existential_1(a1);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance StringStyle(void *a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<StringStyle.CodingKeys>);
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1895F8858](v2);
  uint64_t v5 = (char *)&v7 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type StringStyle.CodingKeys and conformance StringStyle.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance StringStyle()
{
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance StringStyle()
{
  return Hasher._finalize()();
}

uint64_t Sequence<>.formatted()(uint64_t a1, uint64_t a2)
{
  if (one-time initialization token for cache != -1) {
    swift_once();
  }
  uint64_t v4 = static LocaleCache.cache + 16;
  uint64_t v5 = (os_unfair_lock_s *)(static LocaleCache.cache + 124);
  swift_retain_n();
  os_unfair_lock_lock(v5);
  closure #1 in LocaleCache.autoupdatingCurrent.getter(v4, &v13);
  os_unfair_lock_unlock(v5);
  swift_release_n();
  uint64_t v6 = v13;
  uint64_t v7 = lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( (unint64_t *)&lazy protocol witness table cache variable for type _LocaleAutoupdating and conformance _LocaleAutoupdating,  (uint64_t (*)(uint64_t))type metadata accessor for _LocaleAutoupdating,  (uint64_t)&protocol conformance descriptor for _LocaleAutoupdating);
  specialized static ICUListFormatter.formatter<A, B>(for:)(0, v6, v7);
  uint64_t v8 = swift_allocObject();
  *(void *)(v8 + 16) = a1;
  *(void *)(v8 + 24) = a2;
  v12[2] = a1;
  v12[3] = a2;
  v12[4] = partial apply for specialized implicit closure #2 in implicit closure #1 in ListFormatStyle.format(_:);
  v12[5] = MEMORY[0x1895F8858](v8);
  uint64_t v9 = _sSTsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFxq0_q_Ri_zRi0_zRi__Ri0__Ri_0_Ri0_0_r1_lyADs5NeverOSSIsgnrzr_xSaySSGAGSTRzSSRsd__AGRsd_0_r_0_lIetMgnozo_Tp5( (void (*)(uint64_t *__return_ptr, char *))partial apply for specialized thunk for @callee_guaranteed (@in_guaranteed A.FormatStyle.FormatInput) -> (@owned String),  (uint64_t)v12,  a1,  a2);
  swift_release();
  uint64_t countAndFlagsBits = ICUListFormatter.format(strings:)((Swift::OpaquePointer)v9)._countAndFlagsBits;
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  return countAndFlagsBits;
}

void static FormatStyle.list<A, B>(memberStyle:type:width:)( uint64_t a1@<X0>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  uint64_t v6 = (char *)&v10 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v6, v9, v8);
  ListFormatStyle.init(memberStyle:)((uint64_t)v6, a2, a3);
}

void sub_1830630CC()
{
  *(void *)(v4 - 96) = v3;
  *(void *)(v4 - 88) = v2;
  *(void *)(v4 - 80) = v1;
  *(void *)(v4 - 72) = v0;
  type metadata accessor for ListFormatStyle();
}

uint64_t sub_1830630E0(uint64_t result)
{
  *(_BYTE *)(v1 + *(int *)(result + 52)) = v3;
  *(_BYTE *)(v1 + *(int *)(result + 56)) = v2;
  return result;
}

uint64_t static FormatStyle.list<A>(type:width:)@<X0>(char *a1@<X0>, char *a2@<X1>, uint64_t a3@<X8>)
{
  char v4 = *a1;
  char v5 = *a2;
  if (one-time initialization token for cache != -1) {
    swift_once();
  }
  uint64_t v6 = static LocaleCache.cache + 16;
  uint64_t v7 = (os_unfair_lock_s *)(static LocaleCache.cache + 124);
  swift_retain_n();
  os_unfair_lock_lock(v7);
  closure #1 in LocaleCache.autoupdatingCurrent.getter(v6, &v10);
  os_unfair_lock_unlock(v7);
  swift_release_n();
  uint64_t v8 = v10;
  uint64_t result = lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( (unint64_t *)&lazy protocol witness table cache variable for type _LocaleAutoupdating and conformance _LocaleAutoupdating,  (uint64_t (*)(uint64_t))type metadata accessor for _LocaleAutoupdating,  (uint64_t)&protocol conformance descriptor for _LocaleAutoupdating);
  *(void *)(a3 + 8) = v8;
  *(void *)(a3 + 16) = result;
  *(_BYTE *)a3 = v5;
  *(_BYTE *)(a3 + 1) = v4;
  return result;
}

uint64_t sub_183063224()
{
  return swift_deallocObject();
}

uint64_t partial apply for implicit closure #2 in implicit closure #1 in ListFormatStyle.format(_:)()
{
  (*(void (**)(uint64_t *__return_ptr))(*(void *)(v0 + 32) + 48LL))(&v2);
  return v2;
}

uint64_t partial apply for thunk for @callee_guaranteed (@in_guaranteed A.FormatStyle.FormatInput) -> (@owned String)@<X0>( uint64_t *a1@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(v1 + 48))();
  *a1 = result;
  a1[1] = v4;
  return result;
}

void type metadata accessor for ListFormatStyle.CodingKeys()
{
}

void type metadata accessor for ListFormatStyle.Width()
{
}

void type metadata accessor for ListFormatStyle.ListType()
{
}

unint64_t lazy protocol witness table accessor for type StringStyle.CodingKeys and conformance StringStyle.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type StringStyle.CodingKeys and conformance StringStyle.CodingKeys;
  if (!lazy protocol witness table cache variable for type StringStyle.CodingKeys and conformance StringStyle.CodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C](&protocol conformance descriptor for StringStyle.CodingKeys, &unk_189C77C10);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type StringStyle.CodingKeys and conformance StringStyle.CodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type StringStyle.CodingKeys and conformance StringStyle.CodingKeys;
  if (!lazy protocol witness table cache variable for type StringStyle.CodingKeys and conformance StringStyle.CodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C](&protocol conformance descriptor for StringStyle.CodingKeys, &unk_189C77C10);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type StringStyle.CodingKeys and conformance StringStyle.CodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type StringStyle.CodingKeys and conformance StringStyle.CodingKeys;
  if (!lazy protocol witness table cache variable for type StringStyle.CodingKeys and conformance StringStyle.CodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C](&protocol conformance descriptor for StringStyle.CodingKeys, &unk_189C77C10);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type StringStyle.CodingKeys and conformance StringStyle.CodingKeys);
  }

  return result;
}

uint64_t sub_183063368()
{
  return swift_deallocObject();
}

uint64_t partial apply for specialized implicit closure #2 in implicit closure #1 in ListFormatStyle.format(_:)( uint64_t *a1)
{
  uint64_t v1 = *a1;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t partial apply for specialized thunk for @callee_guaranteed (@in_guaranteed A.FormatStyle.FormatInput) -> (@owned String)@<X0>( void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4 = *(uint64_t (**)(void *))(v2 + 32);
  uint64_t v5 = a1[1];
  v8[0] = *a1;
  v8[1] = v5;
  uint64_t result = v4(v8);
  *a2 = result;
  a2[1] = v7;
  return result;
}

void base witness table accessor for Equatable in ListFormatStyle<A, B>.Width()
{
}

void base witness table accessor for Equatable in ListFormatStyle<A, B>.ListType()
{
}

uint64_t instantiation function for generic protocol witness table for ListFormatStyle<A, B>( void *a1, uint64_t a2)
{
  a1[1] = MEMORY[0x186E20D4C](&protocol conformance descriptor for ListFormatStyle<A, B>);
  a1[2] = MEMORY[0x186E20D4C](&protocol conformance descriptor for ListFormatStyle<A, B>, a2);
  uint64_t result = MEMORY[0x186E20D4C](&protocol conformance descriptor for ListFormatStyle<A, B>, a2);
  a1[3] = result;
  return result;
}

void base witness table accessor for Equatable in ListFormatStyle<A, B>()
{
}

unint64_t instantiation function for generic protocol witness table for StringStyle(void *a1)
{
  a1[1] = lazy protocol witness table accessor for type StringStyle and conformance StringStyle();
  a1[2] = lazy protocol witness table accessor for type StringStyle and conformance StringStyle();
  unint64_t result = lazy protocol witness table accessor for type StringStyle and conformance StringStyle();
  a1[3] = result;
  return result;
}

unint64_t lazy protocol witness table accessor for type StringStyle and conformance StringStyle()
{
  unint64_t result = lazy protocol witness table cache variable for type StringStyle and conformance StringStyle;
  if (!lazy protocol witness table cache variable for type StringStyle and conformance StringStyle)
  {
    unint64_t result = MEMORY[0x186E20D4C](&protocol conformance descriptor for StringStyle, &type metadata for StringStyle);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type StringStyle and conformance StringStyle);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type StringStyle and conformance StringStyle;
  if (!lazy protocol witness table cache variable for type StringStyle and conformance StringStyle)
  {
    unint64_t result = MEMORY[0x186E20D4C](&protocol conformance descriptor for StringStyle, &type metadata for StringStyle);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type StringStyle and conformance StringStyle);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type StringStyle and conformance StringStyle;
  if (!lazy protocol witness table cache variable for type StringStyle and conformance StringStyle)
  {
    unint64_t result = MEMORY[0x186E20D4C](&protocol conformance descriptor for StringStyle, &type metadata for StringStyle);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type StringStyle and conformance StringStyle);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type StringStyle and conformance StringStyle;
  if (!lazy protocol witness table cache variable for type StringStyle and conformance StringStyle)
  {
    unint64_t result = MEMORY[0x186E20D4C](&protocol conformance descriptor for StringStyle, &type metadata for StringStyle);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type StringStyle and conformance StringStyle);
  }

  return result;
}

uint64_t type metadata instantiation function for ListFormatStyle()
{
  return swift_allocateGenericValueMetadata();
}

uint64_t type metadata completion function for ListFormatStyle()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0LL;
  }

  return result;
}

void *initializeBufferWithCopyOfBuffer for ListFormatStyle(void *a1, void *a2, uint64_t a3)
{
  uint64_t v4 = a1;
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8LL);
  uint64_t v6 = *(void *)(v5 + 64);
  int v7 = *(_DWORD *)(v5 + 80);
  if ((v7 & 0x1000F8) != 0 || ((v6 + 9) & 0xFFFFFFFFFFFFFFF8LL) + 16 > 0x18)
  {
    uint64_t v9 = *a2;
    *uint64_t v4 = *a2;
    uint64_t v4 = (void *)(v9 + ((unsigned __int16)((v7 & 0xF8) + 23) & (unsigned __int16)~(v7 & 0xF8) & 0x1F8));
    swift_retain();
  }

  else
  {
    (*(void (**)(void *, void *))(v5 + 16))(a1, a2);
    uint64_t v10 = (char *)v4 + v6;
    *uint64_t v10 = *((_BYTE *)a2 + v6);
    v10[1] = *((_BYTE *)a2 + v6 + 1);
    *(_OWORD *)(((unint64_t)v4 + v6 + 9) & 0xFFFFFFFFFFFFF8LL) = *(_OWORD *)(((unint64_t)a2 + v6 + 9) & 0xFFFFFFFFFFFFF8LL);
    swift_unknownObjectRetain();
  }

  return v4;
}

uint64_t destroy for ListFormatStyle(uint64_t a1, uint64_t a2)
{
  return swift_unknownObjectRelease();
}

uint64_t initializeWithCopy for ListFormatStyle(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8LL);
  (*(void (**)(void))(v5 + 16))();
  uint64_t v6 = *(void *)(v5 + 64);
  int v7 = (_BYTE *)(v6 + a1);
  uint64_t v8 = (_BYTE *)(v6 + a2);
  *int v7 = *v8;
  v7[1] = v8[1];
  *(_OWORD *)((unint64_t)(v7 + 9) & 0xFFFFFFFFFFFFF8LL) = *(_OWORD *)((unint64_t)(v8 + 9) & 0xFFFFFFFFFFFFF8LL);
  swift_unknownObjectRetain();
  return a1;
}

uint64_t assignWithCopy for ListFormatStyle(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8LL);
  (*(void (**)(void))(v5 + 24))();
  uint64_t v6 = *(void *)(v5 + 64);
  int v7 = (_BYTE *)(v6 + a1);
  uint64_t v8 = (_BYTE *)(v6 + a2);
  *int v7 = *v8;
  v7[1] = v8[1];
  uint64_t v9 = (void *)((unint64_t)(v7 + 9) & 0xFFFFFFFFFFFFFFF8LL);
  uint64_t v10 = (void *)((unint64_t)(v8 + 9) & 0xFFFFFFFFFFFFFFF8LL);
  uint64_t v11 = v10[1];
  *uint64_t v9 = *v10;
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  v9[1] = v11;
  return a1;
}

uint64_t initializeWithTake for ListFormatStyle(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8LL);
  (*(void (**)(void))(v5 + 32))();
  uint64_t v6 = *(void *)(v5 + 64);
  int v7 = (_BYTE *)(v6 + a1);
  uint64_t v8 = (_BYTE *)(v6 + a2);
  *int v7 = *v8;
  v7[1] = v8[1];
  *(_OWORD *)((unint64_t)(v7 + 9) & 0xFFFFFFFFFFFFF8LL) = *(_OWORD *)((unint64_t)(v8 + 9) & 0xFFFFFFFFFFFFF8LL);
  return a1;
}

uint64_t assignWithTake for ListFormatStyle(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8LL);
  (*(void (**)(void))(v5 + 40))();
  uint64_t v6 = *(void *)(v5 + 64);
  int v7 = (_BYTE *)(v6 + a1);
  uint64_t v8 = (_BYTE *)(v6 + a2);
  *int v7 = *v8;
  v7[1] = v8[1];
  uint64_t v9 = (void *)((unint64_t)(v7 + 9) & 0xFFFFFFFFFFFFFFF8LL);
  uint64_t v10 = (void *)((unint64_t)(v8 + 9) & 0xFFFFFFFFFFFFFFF8LL);
  uint64_t v11 = v10[1];
  *uint64_t v9 = *v10;
  swift_unknownObjectRelease();
  v9[1] = v11;
  return a1;
}

uint64_t getEnumTagSinglePayload for ListFormatStyle(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8LL);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  if (v5 <= 0x7FFFFFFF) {
    unsigned int v6 = 0x7FFFFFFF;
  }
  else {
    unsigned int v6 = *(_DWORD *)(v4 + 84);
  }
  if (!a2) {
    return 0LL;
  }
  uint64_t v7 = *(void *)(v4 + 64);
  if (v6 >= a2)
  {
    if (v5 < 0x7FFFFFFF)
    {
      unint64_t v12 = *(void *)((a1 + v7 + 9) & 0xFFFFFFFFFFFFF8LL);
      if (v12 >= 0xFFFFFFFF) {
        LODWORD(v12) = -1;
      }
      return (v12 + 1);
    }

    else
    {
      return (*(uint64_t (**)(void))(v4 + 48))();
    }
  }

  else
  {
    if (((((v7 + 9) & 0xFFFFFFFFFFFFFFF8LL) + 16) & 0xFFFFFFF8) != 0) {
      unsigned int v8 = 2;
    }
    else {
      unsigned int v8 = a2 - v6 + 1;
    }
    if (v8 >= 0x10000) {
      unsigned int v9 = 4;
    }
    else {
      unsigned int v9 = 2;
    }
    if (v8 < 0x100) {
      unsigned int v9 = 1;
    }
    if (v8 >= 2) {
      uint64_t v10 = v9;
    }
    else {
      uint64_t v10 = 0LL;
    }
    return ((uint64_t (*)(void))((char *)&loc_1830639BC + 4 * byte_183730B64[v10]))();
  }

void storeEnumTagSinglePayload for ListFormatStyle( unsigned int *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5 = *(void *)(*(void *)(a4 + 16) - 8LL);
  if (*(_DWORD *)(v5 + 84) <= 0x7FFFFFFFu) {
    unsigned int v6 = 0x7FFFFFFF;
  }
  else {
    unsigned int v6 = *(_DWORD *)(v5 + 84);
  }
  if (v6 >= a3)
  {
    int v9 = 0u;
    if (a2 <= v6) {
      goto LABEL_17;
    }
  }

  else
  {
    if (((*(_DWORD *)(v5 + 64) + 9) & 0xFFFFFFF8) == 0xFFFFFFF0) {
      unsigned int v7 = a3 - v6 + 1;
    }
    else {
      unsigned int v7 = 2;
    }
    if (v7 >= 0x10000) {
      int v8 = 4;
    }
    else {
      int v8 = 2;
    }
    if (v7 < 0x100) {
      int v8 = 1;
    }
    if (v7 >= 2) {
      int v9 = v8;
    }
    else {
      int v9 = 0;
    }
    if (a2 <= v6) {
LABEL_17:
    }
      __asm { BR              X12 }
  }

  if (((*(_DWORD *)(v5 + 64) + 9) & 0xFFFFFFF8) != 0xFFFFFFF0)
  {
    unsigned int v10 = ~v6 + a2;
    bzero(a1, ((*(void *)(v5 + 64) + 9LL) & 0xFFFFFFFFFFFFFFF8LL) + 16);
    *a1 = v10;
  }

  __asm { BR              X10 }

void sub_183063B34()
{
  *(_BYTE *)(v0 + v1) = v2;
  JUMPOUT(0x183063BACLL);
}

void sub_183063B3C(uint64_t a1, int a2)
{
  *(_DWORD *)(v2 + __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v2, v3) = 0;
  if (a2) {
    JUMPOUT(0x183063B44LL);
  }
  JUMPOUT(0x183063BACLL);
}

void sub_183063B84()
{
  *(_WORD *)(v0 + v1) = v2;
  JUMPOUT(0x183063BACLL);
}

void sub_183063B8C()
{
  *(_DWORD *)(v0 + v1) = v2;
  JUMPOUT(0x183063BACLL);
}

uint64_t sub_183063B94(uint64_t a1, int a2, unsigned int a3)
{
  *(_WORD *)(v5 + v6) = 0;
  if (!a2) {
    JUMPOUT(0x183063BACLL);
  }
  if (a3 < 0x7FFFFFFF)
  {
    if ((a2 & 0x80000000) == 0) {
      JUMPOUT(0x183063BA8LL);
    }
    JUMPOUT(0x183063BA0LL);
  }

  return (*(uint64_t (**)(uint64_t))(v4 + 56))(v5);
}

uint64_t storeEnumTagSinglePayload for ListFormatStyle.Width(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFD) {
    return ((uint64_t (*)(void))((char *)&loc_183063C10 + 4 * byte_183730B78[v4]))();
  }
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_183063C44 + 4 * byte_183730B73[v4]))();
}

uint64_t sub_183063C44(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_183063C4C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x183063C54LL);
  }
  return result;
}

uint64_t sub_183063C60(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x183063C68LL);
  }
  *(_BYTE *)uint64_t result = a2 + 2;
  return result;
}

uint64_t sub_183063C6C(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_183063C74(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t storeEnumTagSinglePayload for ListFormatStyle.ListType(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFE) {
    return ((uint64_t (*)(void))((char *)&loc_183063CCC + 4 * byte_183730B82[v4]))();
  }
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_183063D00 + 4 * byte_183730B7D[v4]))();
}

uint64_t sub_183063D00(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_183063D08(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x183063D10LL);
  }
  return result;
}

uint64_t sub_183063D1C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x183063D24LL);
  }
  *(_BYTE *)uint64_t result = a2 + 1;
  return result;
}

uint64_t sub_183063D28(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_183063D30(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for StringStyle()
{
  return &type metadata for StringStyle;
}

void *type metadata accessor for StringStyle.CodingKeys()
{
  return &unk_189C77C10;
}

uint64_t storeEnumTagSinglePayload for ListFormatStyle.CodingKeys( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFC) {
    return ((uint64_t (*)(void))((char *)&loc_183063DA8 + 4 * byte_183730B8C[v4]))();
  }
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_183063DDC + 4 * byte_183730B87[v4]))();
}

uint64_t sub_183063DDC(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_183063DE4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x183063DECLL);
  }
  return result;
}

uint64_t sub_183063DF8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x183063E00LL);
  }
  *(_BYTE *)uint64_t result = a2 + 3;
  return result;
}

uint64_t sub_183063E04(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_183063E0C(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

void base witness table accessor for Equatable in ListFormatStyle<A, B>.CodingKeys()
{
}

void base witness table accessor for CustomDebugStringConvertible in ListFormatStyle<A, B>.CodingKeys()
{
}

void base witness table accessor for CustomStringConvertible in ListFormatStyle<A, B>.CodingKeys()
{
}

void *specialized Sequence.compactMap<A>(_:)( void (*a1)(_OWORD *__return_ptr, __int128 *), uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v5 = *(void *)(a3 + 16);
  if (!v5) {
    return (void *)MEMORY[0x18961AFE8];
  }
  swift_bridgeObjectRetain();
  uint64_t v23 = a3;
  int v8 = (void *)(a3 + 48);
  int v9 = (void *)MEMORY[0x18961AFE8];
  do
  {
    uint64_t v11 = *v8;
    __int128 v21 = *((_OWORD *)v8 - 1);
    uint64_t v22 = v11;
    a1(v18, &v21);
    if (v4)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v9;
    }

    if ((v20 & 1) == 0)
    {
      __int128 v16 = v18[1];
      __int128 v17 = v18[0];
      uint64_t v12 = v19;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        int v9 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  v9[2] + 1LL,  1,  v9);
      }
      unint64_t v14 = v9[2];
      unint64_t v13 = v9[3];
      if (v14 >= v13 >> 1) {
        int v9 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (void *)(v13 > 1),  v14 + 1,  1,  v9);
      }
      void v9[2] = v14 + 1;
      unsigned int v10 = &v9[5 * v14];
      *((_OWORD *)v10 + 2) = v17;
      *((_OWORD *)v10 + 3) = v16;
      _BYTE v10[8] = v12;
    }

    v8 += 3;
    --v5;
  }

  while (v5);
  swift_bridgeObjectRelease();
  return v9;
}

void *specialized Sequence.compactMap<A>(_:)( void (*a1)(_OWORD *__return_ptr, void *), uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v21[0] = a3;
  v21[1] = a4;
  v21[2] = a5;
  a1(v18, v21);
  if (!v5)
  {
    if ((v20 & 1) != 0)
    {
      return (void *)MEMORY[0x18961AFE8];
    }

    else
    {
      __int128 v16 = v18[1];
      __int128 v17 = v18[0];
      uint64_t v7 = v19;
      uint64_t v6 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  1LL,  1,  MEMORY[0x18961AFE8]);
      unint64_t v8 = v6[2];
      unint64_t v9 = v6[3];
      unint64_t v10 = v8 + 1;
      if (v8 >= v9 >> 1)
      {
        unint64_t v14 = v6[2];
        unint64_t v15 = v8 + 1;
        unint64_t v13 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (void *)(v9 > 1),  v8 + 1,  1,  v6);
        unint64_t v8 = v14;
        unint64_t v10 = v15;
        uint64_t v6 = v13;
      }

      v6[2] = v10;
      uint64_t v11 = &v6[5 * v8];
      *((_OWORD *)v11 + 2) = v17;
      *((_OWORD *)v11 + 3) = v16;
      v11[8] = v7;
    }
  }

  return v6;
}

uint64_t _sSTsE10compactMapySayqd__Gqd__Sg7ElementQzKXEKlFxq_Sgs5Error_pRi_zRi0_zRi__Ri0__r0_lySSqd__Isgnrzo_SD4KeysVySSyp_GABsAG_pAJRszr__lIetMggozo_Tp5( void (*a1)(void *), uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _sSTsE10compactMapySayqd__Gqd__Sg7ElementQzKXEKlFxq_Sgs5Error_pRi_zRi0_zRi__Ri0__r0_lySSqd__Isgnrzo_SD4KeysVySSyp_GABsAG_pAJRszr__lIetMggozo_Tp5Tm( a1,  a2,  a3,  a4);
}

uint64_t _sSTsE10compactMapySayqd__Gqd__Sg7ElementQzKXEKlFxq_Sgs5Error_pRi_zRi0_zRi__Ri0__r0_lySSqd__Isgnrzo_SD4KeysVySSyp_GABsAG_pAJRszr__lIetMggozo_Tp5Tm( void (*a1)(void *), uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = v4;
  __int128 v61 = a1;
  uint64_t v9 = type metadata accessor for Optional();
  uint64_t v52 = *(void *)(v9 - 8);
  uint64_t v53 = v9;
  MEMORY[0x1895F8858](v9);
  uint64_t v11 = (char *)&v50 - v10;
  uint64_t v12 = *(void *)(a4 - 8);
  MEMORY[0x1895F8858](v13);
  __int128 v60 = (char *)&v50 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v15);
  int64_t v51 = (char *)&v50 - v16;
  _swift_isClassOrObjCExistentialType();
  uint64_t v63 = MEMORY[0x18961AFE8];
  uint64_t v17 = *(void *)(a3 + 64);
  uint64_t v56 = a3 + 64;
  uint64_t v18 = 1LL << *(_BYTE *)(a3 + 32);
  uint64_t v19 = -1LL;
  if (v18 < 64) {
    uint64_t v19 = ~(-1LL << v18);
  }
  unint64_t v20 = v19 & v17;
  int64_t v57 = (unint64_t)(v18 + 63) >> 6;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v22 = 0LL;
  uint64_t v54 = a2;
  uint64_t v55 = a3;
  if (v20) {
    goto LABEL_6;
  }
LABEL_7:
  if (!__OFADD__(v22++, 1LL))
  {
    if (v22 >= v57) {
      goto LABEL_58;
    }
    unint64_t v27 = *(void *)(v56 + 8 * v22);
    if (v27)
    {
LABEL_19:
      uint64_t v23 = v12;
      unint64_t v20 = (v27 - 1) & v27;
      for (unint64_t i = __clz(__rbit64(v27)) + (v22 << 6); ; unint64_t i = v24 | (v22 << 6))
      {
        uint64_t v29 = result;
        char v30 = (void *)(*(void *)(result + 48) + 16 * i);
        uint64_t v31 = v30[1];
        v62[0] = *v30;
        v62[1] = v31;
        swift_bridgeObjectRetain();
        v61(v62);
        if (v5)
        {
          swift_release();
          swift_bridgeObjectRelease();
          return swift_bridgeObjectRelease();
        }

        swift_bridgeObjectRelease();
        uint64_t v12 = v23;
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v23 + 48))(v11, 1LL, a4) == 1)
        {
          (*(void (**)(char *, uint64_t))(v52 + 8))(v11, v53);
          uint64_t result = v29;
          if (!v20) {
            goto LABEL_7;
          }
          goto LABEL_6;
        }

        uint64_t v32 = *(void (**)(char *, char *, uint64_t))(v23 + 32);
        uint64_t v33 = v51;
        v32(v51, v11, a4);
        v32(v60, v33, a4);
        char isClassOrObjCExistentialType = _swift_isClassOrObjCExistentialType();
        uint64_t v35 = v63;
        Swift::UInt v58 = (void (*)(unint64_t, char *, uint64_t))v32;
        uint64_t v59 = 0LL;
        if ((isClassOrObjCExistentialType & 1) != 0)
        {
          if ((swift_isUniquelyReferenced_nonNull_bridgeObject() & 1) != 0
            && ((_swift_isClassOrObjCExistentialType() & 1) == 0
             || (v35 & 0x8000000000000000LL) == 0 && (v35 & 0x4000000000000000LL) == 0))
          {
            goto LABEL_36;
          }
        }

        else if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
        {
          goto LABEL_36;
        }

        uint64_t v36 = v12;
        if ((_swift_isClassOrObjCExistentialType() & 1) != 0 && (v35 < 0 || (v35 & 0x4000000000000000LL) != 0))
        {
          specialized _ArrayBuffer._nonNative.getter(v35);
          swift_unknownObjectRetain();
          uint64_t v39 = _CocoaArrayWrapper.endIndex.getter();
          swift_unknownObjectRelease();
        }

        else
        {
          char v37 = _swift_isClassOrObjCExistentialType();
          uint64_t v38 = v35 & 0xFFFFFFFFFFFFF8LL;
          if ((v37 & 1) == 0) {
            uint64_t v38 = v35;
          }
          uint64_t v39 = *(void *)(v38 + 16);
        }

        uint64_t v35 = _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v39 + 1, 1, v35, a4);
        uint64_t v63 = v35;
        uint64_t v12 = v36;
LABEL_36:
        uint64_t v40 = v12;
        if ((_swift_isClassOrObjCExistentialType() & 1) != 0) {
          uint64_t v41 = v35 & 0xFFFFFFFFFFFFFF8LL;
        }
        else {
          uint64_t v41 = v35;
        }
        uint64_t v42 = *(void *)(v41 + 16);
        if ((_swift_isClassOrObjCExistentialType() & 1) != 0) {
          uint64_t v43 = v35 & 0xFFFFFFFFFFFFFF8LL;
        }
        else {
          uint64_t v43 = v35;
        }
        unint64_t v44 = *(void *)(v43 + 24);
        uint64_t v45 = v42 + 1;
        if (v42 + 1 > (uint64_t)(v44 >> 1))
        {
          Swift::Bool v49 = v44 > 1;
          type metadata accessor for Array();
          Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v49, v42 + 1, 1);
          uint64_t v35 = v63;
        }

        uint64_t v46 = v11;
        if ((_swift_isClassOrObjCExistentialType() & 1) != 0)
        {
          uint64_t v47 = v35 & 0xFFFFFFFFFFFFFF8LL;
          *(void *)((v35 & 0xFFFFFFFFFFFFFF8LL) + 0x10) = v45;
        }

        else
        {
          *(void *)(v35 + 16) = v45;
          uint64_t v47 = v35 & 0xFFFFFFFFFFFFFF8LL;
        }

        if ((_swift_isClassOrObjCExistentialType() & 1) != 0) {
          uint64_t v48 = v47;
        }
        else {
          uint64_t v48 = v35;
        }
        v58( v48 + ((*(unsigned __int8 *)(v40 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v40 + 80))
        + *(void *)(v40 + 72) * v42,
          v60,
          a4);
        uint64_t v63 = v35;
        uint64_t result = v55;
        uint64_t v11 = v46;
        uint64_t v12 = v40;
        uint64_t v5 = v59;
        if (!v20) {
          goto LABEL_7;
        }
LABEL_6:
        uint64_t v23 = v12;
        unint64_t v24 = __clz(__rbit64(v20));
        v20 &= v20 - 1;
      }
    }

    int64_t v28 = v22 + 1;
    if (v22 + 1 >= v57) {
      goto LABEL_58;
    }
    unint64_t v27 = *(void *)(v56 + 8 * v28);
    if (!v27)
    {
      int64_t v28 = v22 + 2;
      if (v22 + 2 >= v57) {
        goto LABEL_58;
      }
      unint64_t v27 = *(void *)(v56 + 8 * v28);
      if (!v27)
      {
        int64_t v28 = v22 + 3;
        if (v22 + 3 >= v57) {
          goto LABEL_58;
        }
        unint64_t v27 = *(void *)(v56 + 8 * v28);
        if (!v27)
        {
          int64_t v28 = v22 + 4;
          if (v22 + 4 < v57)
          {
            unint64_t v27 = *(void *)(v56 + 8 * v28);
            if (v27) {
              goto LABEL_18;
            }
            while (1)
            {
              int64_t v22 = v28 + 1;
              if (__OFADD__(v28, 1LL)) {
                goto LABEL_60;
              }
              if (v22 >= v57) {
                break;
              }
              unint64_t v27 = *(void *)(v56 + 8 * v22);
              ++v28;
              if (v27) {
                goto LABEL_19;
              }
            }
          }

void *specialized Sequence.compactMap<A>(_:)( void (*a1)(_OWORD *__return_ptr, void *), uint64_t a2, uint64_t a3, uint64_t a4)
{
  v18[0] = a3;
  v18[1] = a4;
  a1(v16, v18);
  if (!v4)
  {
    if ((v17 & 1) != 0)
    {
      return (void *)MEMORY[0x18961AFE8];
    }

    else
    {
      __int128 v14 = v16[1];
      __int128 v15 = v16[0];
      uint64_t v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  1LL,  1,  MEMORY[0x18961AFE8]);
      unint64_t v6 = v5[2];
      unint64_t v7 = v5[3];
      unint64_t v8 = v6 + 1;
      if (v6 >= v7 >> 1)
      {
        unint64_t v12 = v5[2];
        unint64_t v13 = v6 + 1;
        uint64_t v11 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (void *)(v7 > 1),  v6 + 1,  1,  v5);
        unint64_t v6 = v12;
        unint64_t v8 = v13;
        uint64_t v5 = v11;
      }

      v5[2] = v8;
      uint64_t v9 = &v5[4 * v6];
      *((_OWORD *)v9 + 2) = v15;
      *((_OWORD *)v9 + 3) = v14;
    }
  }

  return v5;
}

{
  uint64_t v4;
  void *v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  void *v9;
  void *v11;
  unint64_t v12;
  unint64_t v13;
  __int128 v14;
  __int128 v15;
  _OWORD v16[2];
  char v17;
  void v18[2];
  v18[0] = a3;
  v18[1] = a4;
  a1(v16, v18);
  if (!v4)
  {
    if ((v17 & 1) != 0)
    {
      return (void *)MEMORY[0x18961AFE8];
    }

    else
    {
      __int128 v14 = v16[1];
      __int128 v15 = v16[0];
      uint64_t v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  1LL,  1,  MEMORY[0x18961AFE8]);
      unint64_t v6 = v5[2];
      unint64_t v7 = v5[3];
      unint64_t v8 = v6 + 1;
      if (v6 >= v7 >> 1)
      {
        unint64_t v12 = v5[2];
        unint64_t v13 = v6 + 1;
        uint64_t v11 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (void *)(v7 > 1),  v6 + 1,  1,  v5);
        unint64_t v6 = v12;
        unint64_t v8 = v13;
        uint64_t v5 = v11;
      }

      v5[2] = v8;
      uint64_t v9 = &v5[4 * v6];
      *((_OWORD *)v9 + 2) = v15;
      *((_OWORD *)v9 + 3) = v14;
    }
  }

  return v5;
}

uint64_t DataProtocol.firstRange<A, B>(of:in:)@<X0>( uint64_t a1@<X0>, char *a2@<X1>, uint64_t a3@<X2>, void (*a4)(char *, char *, uint64_t)@<X3>, uint64_t a5@<X4>, void (*a6)(char *, uint64_t, uint64_t)@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  return DataProtocol.firstRange<A, B>(of:in:)(a1, a2, a7, a3, a4, a8, a5, a6, a9);
}

uint64_t specialized DataProtocol.firstRange<A, B>(of:in:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v7 = v6;
  uint64_t v32 = a6;
  uint64_t v11 = type metadata accessor for DispatchData();
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = MEMORY[0x1895F8858](v11);
  __int128 v15 = (char *)v30 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v13);
  char v17 = (char *)v30 - v16;
  v30[1] = lazy protocol witness table accessor for type DispatchData and conformance DispatchData( (unint64_t *)&lazy protocol witness table cache variable for type DispatchData and conformance DispatchData,  MEMORY[0x18961B770]);
  dispatch thunk of RangeExpression.relative<A>(to:)();
  uint64_t v31 = a3;
  uint64_t v32 = a5;
  v30[0] = a1;
  uint64_t v18 = dispatch thunk of Collection.count.getter();
  uint64_t v19 = *(void (**)(char *, uint64_t, uint64_t))(v12 + 16);
  v19(v17, v6, v11);
  uint64_t v35 = v38;
  uint64_t v36 = v37;
  if (v18)
  {
    lazy protocol witness table accessor for type DispatchData and conformance DispatchData( &lazy protocol witness table cache variable for type DispatchData and conformance DispatchData,  MEMORY[0x18961B768]);
    uint64_t v20 = dispatch thunk of RandomAccessCollection.distance(from:to:)();
    __int128 v21 = *(void (**)(char *, uint64_t))(v12 + 8);
    v21(v17, v11);
    if (v20 >= v18)
    {
      uint64_t v22 = v37;
      uint64_t v23 = v38;
      uint64_t v34 = v37;
      v19(v15, v7, v11);
      uint64_t v33 = v23;
      uint64_t v24 = v30[0];
      if (v22 >= v23)
      {
LABEL_7:
        v21(v15, v11);
      }

      else
      {
        while (1)
        {
          uint64_t v25 = dispatch thunk of RandomAccessCollection.distance(from:to:)();
          v21(v15, v11);
          if (v25 < v18) {
            break;
          }
          uint64_t v26 = v34;
          if ((specialized DataProtocol.matches<A>(_:from:)(v24, v34, v31, v32) & 1) != 0)
          {
            uint64_t result = dispatch thunk of RandomAccessCollection.index(_:offsetBy:)();
            if (v33 >= v26) {
              return v26;
            }
            __break(1u);
            return result;
          }

          dispatch thunk of Collection.index(after:)();
          uint64_t v27 = v33;
          uint64_t v34 = v33;
          uint64_t v28 = v38;
          v19(v15, v7, v11);
          uint64_t v33 = v28;
          if (v27 >= v28) {
            goto LABEL_7;
          }
        }
      }
    }
  }

  else
  {
    (*(void (**)(char *, uint64_t))(v12 + 8))(v17, v11);
  }

  return 0LL;
}

{
  uint64_t result;
  int64_t v11;
  uint64_t v12;
  int64_t v14;
  int64_t v15;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [UInt8]);
  lazy protocol witness table accessor for type [String] and conformance [A]( &lazy protocol witness table cache variable for type [UInt8] and conformance [A],  &demangling cache variable for type metadata for [UInt8],  MEMORY[0x189618488]);
  dispatch thunk of RangeExpression.relative<A>(to:)();
  uint64_t result = dispatch thunk of Collection.count.getter();
  if (!result) {
    return 0LL;
  }
  uint64_t v11 = v14;
  if (__OFSUB__(v15, v14))
  {
LABEL_18:
    __break(1u);
LABEL_19:
    __break(1u);
  }

  else
  {
    uint64_t v12 = result;
    if (v15 - v14 < result || v14 >= v15) {
      return 0LL;
    }
    while (1)
    {
      if (__OFSUB__(v15, v11))
      {
        __break(1u);
        goto LABEL_18;
      }

      if (v15 - v11 < v12) {
        return 0LL;
      }
      uint64_t result = specialized DataProtocol.matches<A>(_:from:)(a1, v11, a3, a4, a6);
      if ((result & 1) != 0) {
        break;
      }
      if (v15 == ++v11) {
        return 0LL;
      }
    }

    if (__OFADD__(v11, v12)) {
      goto LABEL_19;
    }
    if (v11 + v12 >= v11) {
      return v11;
    }
  }

  __break(1u);
  return result;
}

{
  uint64_t result;
  int64_t v11;
  uint64_t v12;
  int64_t v14;
  int64_t v15;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ContiguousArray<UInt8>);
  lazy protocol witness table accessor for type [String] and conformance [A]( &lazy protocol witness table cache variable for type ContiguousArray<UInt8> and conformance ContiguousArray<A>,  &demangling cache variable for type metadata for ContiguousArray<UInt8>,  MEMORY[0x189619590]);
  dispatch thunk of RangeExpression.relative<A>(to:)();
  uint64_t result = dispatch thunk of Collection.count.getter();
  if (!result) {
    return 0LL;
  }
  uint64_t v11 = v14;
  if (__OFSUB__(v15, v14))
  {
LABEL_18:
    __break(1u);
LABEL_19:
    __break(1u);
  }

  else
  {
    uint64_t v12 = result;
    if (v15 - v14 < result || v14 >= v15) {
      return 0LL;
    }
    while (1)
    {
      if (__OFSUB__(v15, v11))
      {
        __break(1u);
        goto LABEL_18;
      }

      if (v15 - v11 < v12) {
        return 0LL;
      }
      uint64_t result = specialized DataProtocol.matches<A>(_:from:)(a1, v11, a3, a4, a6);
      if ((result & 1) != 0) {
        break;
      }
      if (v15 == ++v11) {
        return 0LL;
      }
    }

    if (__OFADD__(v11, v12)) {
      goto LABEL_19;
    }
    if (v11 + v12 >= v11) {
      return v11;
    }
  }

  __break(1u);
  return result;
}

uint64_t specialized DataProtocol.firstRange<A, B>(of:in:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t result = dispatch thunk of Collection.count.getter();
  if (result)
  {
    uint64_t v15 = a5 + a4;
    if (__OFADD__(a5, a4))
    {
LABEL_27:
      __break(1u);
LABEL_28:
      __break(1u);
      goto LABEL_29;
    }

    if (v15 < v20) {
      goto LABEL_28;
    }
    uint64_t v16 = v19;
    if (v19 < a5 || v15 < v19 || v20 < a5) {
      goto LABEL_28;
    }
    if (__OFSUB__(v20, v19))
    {
LABEL_29:
      __break(1u);
      goto LABEL_30;
    }

    uint64_t v17 = result;
    uint64_t result = 0LL;
    if (v19 < v20 && v20 - v19 >= v17)
    {
      uint64_t result = specialized DataProtocol.matches<A>(_:from:)(a1, v19, a3, a4, a5, a6, a8);
      if ((result & 1) != 0)
      {
LABEL_17:
        uint64_t v18 = v16 + v17;
        if (!__OFADD__(v16, v17))
        {
          if (v18 >= a5 && v15 >= v18)
          {
            if (v18 >= v16) {
              return v16;
            }
            goto LABEL_32;
          }

uint64_t specialized DataProtocol.firstRange<A, B>(of:in:)( uint64_t a1, uint64_t a2, unint64_t a3, unint64_t a4)
{
  uint64_t v7 = dispatch thunk of Collection.count.getter();
  if (v7)
  {
    uint64_t v8 = v7;
    uint64_t v9 = v12;
    if (specialized RandomAccessCollection<>.distance(from:to:)(v12, v13, a3, a4) >= v7 && v12 < v13)
    {
      while (specialized RandomAccessCollection<>.distance(from:to:)(v9, v13, a3, a4) >= v8)
      {
        if ((specialized DataProtocol.matches<A>(_:from:)(a1, v9, a3, a4) & 1) != 0)
        {
          uint64_t result = specialized RandomAccessCollection<>.index(_:offsetBy:)(v9, v8, a3, a4);
          if (result >= v9) {
            return v9;
          }
          __break(1u);
          return result;
        }

        if (v13 == ++v9) {
          return 0LL;
        }
      }
    }
  }

  return 0LL;
}

uint64_t specialized DataProtocol.firstRange<A, B>(of:in:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v12 = dispatch thunk of Collection.count.getter();
  uint64_t v13 = v19;
  if (v12) {
    BOOL v14 = v20 - v19 < v12;
  }
  else {
    BOOL v14 = 1;
  }
  if (v14 || v20 <= v19) {
    return 0LL;
  }
  uint64_t v17 = v12;
  uint64_t v18 = ~v19 + v20;
  while (1)
  {
    uint64_t result = specialized DataProtocol.matches<A>(_:from:)(a1, v13, a3, a4, a5, a7);
    if ((result & 1) != 0) {
      break;
    }
    uint64_t result = 0LL;
    if (++v13 < v20)
    {
      BOOL v14 = v18-- < v17;
      if (!v14) {
        continue;
      }
    }

    return result;
  }

  if (v17 + v13 >= v13) {
    return v13;
  }
  __break(1u);
  return result;
}

{
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t result;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  lazy protocol witness table accessor for type UnsafeRawBufferPointer and conformance UnsafeRawBufferPointer();
  dispatch thunk of RangeExpression.relative<A>(to:)();
  uint64_t v12 = dispatch thunk of Collection.count.getter();
  if (v12)
  {
    uint64_t v13 = v12;
    if (specialized RandomAccessCollection<>.distance(from:to:)(v19, v20, a3, a4) >= v12 && v19 < v20)
    {
      if (a3) {
        uint64_t v15 = a4 - a3;
      }
      else {
        uint64_t v15 = 0LL;
      }
      uint64_t v16 = v19;
      while (1)
      {
        if (specialized RandomAccessCollection<>.distance(from:to:)(v16, v20, a3, a4) < v13) {
          return 0LL;
        }
        uint64_t result = specialized DataProtocol.matches<A>(_:from:)(a1, v16, a3, a4, a5, a7);
        if ((result & 1) != 0) {
          break;
        }
        if (v19 < 0 || v16 >= v15)
        {
          __break(1u);
LABEL_24:
          __break(1u);
          goto LABEL_25;
        }

        if (v20 == ++v16) {
          return 0LL;
        }
      }

      uint64_t v18 = v16 + v13;
      if (__OFADD__(v16, v13)) {
        goto LABEL_24;
      }
      if (v18 < 0 || v15 < v18)
      {
LABEL_25:
        __break(1u);
      }

      else if (v18 >= v16)
      {
        return v16;
      }

      __break(1u);
      return result;
    }
  }

  return 0LL;
}

uint64_t specialized DataProtocol.firstRange<A, B>(of:in:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t result = dispatch thunk of Collection.count.getter();
  if (!result) {
    return 0LL;
  }
  uint64_t v15 = v18;
  if (__OFSUB__(v19, v18))
  {
LABEL_18:
    __break(1u);
LABEL_19:
    __break(1u);
  }

  else
  {
    uint64_t v16 = result;
    if (v19 - v18 < result || v18 >= v19) {
      return 0LL;
    }
    while (1)
    {
      if (__OFSUB__(v19, v15))
      {
        __break(1u);
        goto LABEL_18;
      }

      if (v19 - v15 < v16) {
        return 0LL;
      }
      uint64_t result = specialized DataProtocol.matches<A>(_:from:)(a1, v15, a4, a5, a6, a7, a9);
      if ((result & 1) != 0) {
        break;
      }
      if (v19 == ++v15) {
        return 0LL;
      }
    }

    if (__OFADD__(v15, v16)) {
      goto LABEL_19;
    }
    if (v15 + v16 >= v15) {
      return v15;
    }
  }

  __break(1u);
  return result;
}

uint64_t specialized DataProtocol.firstRange<A, B>(of:in:)()
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  MEMORY[0x1895F8858](AssociatedTypeWitness);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for EmptyCollection<UInt8>);
  lazy protocol witness table accessor for type [String] and conformance [A]( &lazy protocol witness table cache variable for type EmptyCollection<UInt8> and conformance EmptyCollection<A>,  &demangling cache variable for type metadata for EmptyCollection<UInt8>,  MEMORY[0x1896195D0]);
  dispatch thunk of RangeExpression.relative<A>(to:)();
  if ((dispatch thunk of Collection.count.getter() & 0x8000000000000000LL) == 0 || v2 >= v3) {
    return 0LL;
  }
  uint64_t result = dispatch thunk of Collection.startIndex.getter();
  __break(1u);
  return result;
}

uint64_t specialized DataProtocol.firstRange<A, B>(of:in:)( uint64_t a1, uint64_t a2, uint64_t a3, unsigned __int8 a4, uint64_t a5)
{
  uint64_t result = dispatch thunk of Collection.count.getter();
  if (result)
  {
    if (v16 > a3 || (uint64_t v10 = v15, v15 > a3) || (v16 | v15) < 0)
    {
      __break(1u);
      goto LABEL_24;
    }

    uint64_t v11 = result;
    BOOL v12 = v16 - v15 < result || v16 <= v15;
    if (!v12)
    {
      uint64_t v13 = ~v15 + v16;
      while (1)
      {
        uint64_t result = specialized DataProtocol.matches<A>(_:from:)(a1, v10, a3, a4, a5);
        if ((result & 1) != 0) {
          break;
        }
        uint64_t result = 0LL;
        if (++v10 < v16)
        {
          BOOL v12 = v13-- < v11;
          if (!v12) {
            continue;
          }
        }

        return result;
      }

      uint64_t v14 = v10 + v11;
      if (!__OFADD__(v10, v11))
      {
        if ((v14 & 0x8000000000000000LL) == 0 && v14 <= a3)
        {
          if (v14 >= v10) {
            return v10;
          }
          goto LABEL_26;
        }

uint64_t DataProtocol.firstRange<A, B>(of:in:)@<X0>( uint64_t a1@<X0>, char *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, void (*a5)(char *, char *, uint64_t)@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, void (*a8)(char *, uint64_t, uint64_t)@<X7>, uint64_t a9@<X8>)
{
  __int128 v101 = a2;
  uint64_t v92 = a5;
  uint64_t v93 = a8;
  uint64_t v99 = a4;
  uint64_t v100 = a7;
  uint64_t v86 = a9;
  uint64_t v91 = a6;
  uint64_t v97 = *(void *)(a6 + 8);
  uint64_t v98 = a1;
  uint64_t v10 = *(void *)(*(void *)(v97 + 8) + 8LL);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v12 = MEMORY[0x1895F8858](TupleTypeMetadata2);
  uint64_t v83 = (char *)&v78 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = MEMORY[0x1895F8858](v12);
  uint64_t v81 = (char *)&v78 - v15;
  uint64_t v96 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v16 = MEMORY[0x1895F8858](v14);
  uint64_t v90 = (char *)&v78 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v18 = MEMORY[0x1895F8858](v16);
  uint64_t v20 = (char *)&v78 - v19;
  uint64_t v21 = *(void *)(a3 - 8);
  uint64_t v22 = MEMORY[0x1895F8858](v18);
  uint64_t v94 = (char *)&v78 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v22);
  uint64_t v87 = (char *)&v78 - v24;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v85 = AssociatedTypeWitness;
  uint64_t v95 = AssociatedConformanceWitness;
  uint64_t v26 = type metadata accessor for Range();
  uint64_t v27 = *(void *)(v26 - 8);
  uint64_t v28 = MEMORY[0x1895F8858](v26);
  uint64_t v80 = (char *)&v78 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v30 = MEMORY[0x1895F8858](v28);
  uint64_t v32 = (char *)&v78 - v31;
  uint64_t v33 = MEMORY[0x1895F8858](v30);
  uint64_t v35 = (char *)&v78 - v34;
  MEMORY[0x1895F8858](v33);
  uint64_t v37 = (char *)&v78 - v36;
  uint64_t v38 = v102;
  uint64_t v89 = v10;
  dispatch thunk of RangeExpression.relative<A>(to:)();
  uint64_t v39 = dispatch thunk of Collection.count.getter();
  uint64_t v40 = v38;
  uint64_t v41 = v39;
  uint64_t v88 = v21;
  uint64_t v42 = *(void (**)(char *, uint64_t, uint64_t))(v21 + 16);
  uint64_t v43 = v87;
  uint64_t v93 = v42;
  v42(v87, v40, a3);
  unint64_t v44 = *(void (**)(char *, char *, uint64_t))(v27 + 16);
  __int128 v101 = v37;
  uint64_t v92 = v44;
  v44(v35, v37, v26);
  if (!v41)
  {
    uint64_t v48 = *(void (**)(char *, uint64_t))(v27 + 8);
    v48(v35, v26);
    (*(void (**)(char *, uint64_t))(v88 + 8))(v43, a3);
    v48(v101, v26);
    goto LABEL_5;
  }

  uint64_t v45 = dispatch thunk of RandomAccessCollection.distance(from:to:)();
  uint64_t v84 = v27;
  uint64_t v46 = *(void (**)(char *, uint64_t))(v27 + 8);
  v46(v35, v26);
  uint64_t v88 = *(void *)(v88 + 8);
  ((void (*)(char *, uint64_t))v88)(v43, a3);
  if (v45 < v41)
  {
    uint64_t v47 = v46;
    uint64_t v27 = v84;
    v47(v101, v26);
LABEL_5:
    uint64_t v49 = 1LL;
    uint64_t v50 = v86;
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v27 + 56))(v50, v49, 1LL, v26);
  }

  int64_t v51 = v101;
  uint64_t v52 = v85;
  uint64_t v79 = *(void (**)(char *, char *, uint64_t))(v96 + 16);
  v79(v20, v101, v85);
  uint64_t v87 = &v51[*(int *)(v26 + 36)];
  char v53 = dispatch thunk of static Comparable.< infix(_:_:)();
  uint64_t v54 = v94;
  v93(v94, v102, a3);
  uint64_t v55 = v51;
  uint64_t v56 = v52;
  v92(v32, v55, v26);
  if ((v53 & 1) != 0)
  {
    while (1)
    {
      uint64_t v57 = dispatch thunk of RandomAccessCollection.distance(from:to:)();
      v46(v32, v26);
      ((void (*)(char *, uint64_t))v88)(v54, a3);
      if (v57 < v41) {
        break;
      }
      Swift::UInt v58 = (uint64_t (*)(char *, uint64_t))v46;
      uint64_t v59 = v102;
      if ((DataProtocol.matches<A>(_:from:)(v98, (uint64_t)v20, a3, v99, v91) & 1) != 0)
      {
        uint64_t v64 = v90;
        dispatch thunk of RandomAccessCollection.index(_:offsetBy:)();
        char v65 = dispatch thunk of static Comparable.<= infix(_:_:)();
        uint64_t result = v58(v101, v26);
        if ((v65 & 1) != 0)
        {
          uint64_t v66 = TupleTypeMetadata2;
          uint64_t v67 = v81;
          char v68 = &v81[*(int *)(TupleTypeMetadata2 + 48)];
          uint64_t v69 = v96;
          uint64_t v70 = *(void (**)(char *, char *, uint64_t))(v96 + 32);
          v70(v81, v20, v56);
          v70(v68, v64, v56);
          uint64_t v71 = v69;
          uint64_t v72 = v83;
          uint64_t v73 = &v83[*(int *)(v66 + 48)];
          uint64_t v74 = v79;
          v79(v83, v67, v56);
          v74(v73, v68, v56);
          uint64_t v75 = v80;
          v70(v80, v72, v56);
          uint64_t v76 = *(void (**)(char *, uint64_t))(v71 + 8);
          v76(v73, v56);
          uint64_t v77 = &v72[*(int *)(v66 + 48)];
          v70(v72, v67, v56);
          v70(v77, v68, v56);
          v70(&v75[*(int *)(v26 + 36)], v77, v56);
          v76(v72, v56);
          uint64_t v27 = v84;
          uint64_t v50 = v86;
          (*(void (**)(uint64_t, char *, uint64_t))(v84 + 32))(v86, v75, v26);
          uint64_t v49 = 0LL;
          return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v27 + 56))(v50, v49, 1LL, v26);
        }

        __break(1u);
        return result;
      }

      __int128 v60 = v90;
      dispatch thunk of Collection.index(after:)();
      __int128 v61 = v60;
      uint64_t v54 = v94;
      (*(void (**)(char *, char *, uint64_t))(v96 + 40))(v20, v61, v56);
      char v62 = dispatch thunk of static Comparable.< infix(_:_:)();
      v93(v54, v59, a3);
      v92(v32, v101, v26);
      uint64_t v46 = (void (*)(char *, uint64_t))v58;
      if ((v62 & 1) == 0) {
        goto LABEL_10;
      }
    }
  }

  else
  {
LABEL_10:
    v46(v32, v26);
    ((void (*)(char *, uint64_t))v88)(v54, a3);
  }

  (*(void (**)(char *, uint64_t))(v96 + 8))(v20, v56);
  v46(v101, v26);
  uint64_t v49 = 1LL;
  uint64_t v50 = v86;
  uint64_t v27 = v84;
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v27 + 56))(v50, v49, 1LL, v26);
}

uint64_t DataProtocol.lastRange<A, B>(of:in:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  return DataProtocol.lastRange<A, B>(of:in:)(a1, a2, a7, a3, a4, a8, a5, a6, a9);
}

{
  uint64_t v9;
  uint64_t AssociatedTypeWitness;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  void (*v34)(char *, uint64_t, uint64_t);
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t result;
  uint64_t v40;
  uint64_t v41;
  void (*v42)(char *, uint64_t);
  uint64_t (*v43)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v44;
  char v45;
  uint64_t v46;
  char *v47;
  void (*v48)(char *, uint64_t);
  char *v49;
  char v50;
  uint64_t v51;
  char *v52;
  char *v53;
  void (*v54)(char *, char *, uint64_t);
  char *v55;
  char *v56;
  void (*v57)(char *, char *, uint64_t);
  char *v58;
  void (*v59)(char *, uint64_t);
  char *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  char *v66;
  uint64_t TupleTypeMetadata2;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  char *v73;
  void (*v74)(char *, uint64_t);
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  char *v80;
  uint64_t AssociatedConformanceWitness;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v79 = a6;
  uint64_t v71 = a5;
  uint64_t v72 = a8;
  uint64_t v83 = a4;
  uint64_t v84 = a7;
  uint64_t v82 = a1;
  uint64_t v70 = a9;
  uint64_t v9 = *(void *)(a6 + 8);
  uint64_t v75 = a2;
  uint64_t v76 = v9;
  uint64_t v77 = *(void *)(v9 + 8);
  uint64_t v74 = *(void (**)(char *, uint64_t))(v77 + 8);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v12 = MEMORY[0x1895F8858](TupleTypeMetadata2);
  char v68 = (char *)&v64 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = MEMORY[0x1895F8858](v12);
  uint64_t v66 = (char *)&v64 - v15;
  uint64_t v69 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v16 = MEMORY[0x1895F8858](v14);
  uint64_t v80 = (char *)&v64 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v18 = MEMORY[0x1895F8858](v16);
  uint64_t v20 = (char *)&v64 - v19;
  uint64_t v21 = *(void *)(a3 - 8);
  MEMORY[0x1895F8858](v18);
  uint64_t v73 = (char *)&v64 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v23 = type metadata accessor for Range();
  uint64_t v24 = *(void *)(v23 - 8);
  uint64_t v25 = MEMORY[0x1895F8858](v23);
  char v65 = (char *)&v64 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v27 = MEMORY[0x1895F8858](v25);
  uint64_t v29 = (char *)&v64 - v28;
  MEMORY[0x1895F8858](v27);
  uint64_t v31 = (char *)&v64 - v30;
  uint64_t v32 = v78;
  dispatch thunk of RangeExpression.relative<A>(to:)();
  uint64_t v33 = dispatch thunk of Collection.count.getter();
  uint64_t v75 = v21;
  uint64_t v34 = *(void (**)(char *, uint64_t, uint64_t))(v21 + 16);
  uint64_t v35 = v73;
  uint64_t v36 = v32;
  uint64_t v37 = v33;
  v34(v73, v36, a3);
  (*(void (**)(char *, char *, uint64_t))(v24 + 16))(v29, v31, v23);
  if (!v37)
  {
    uint64_t v42 = *(void (**)(char *, uint64_t))(v24 + 8);
    v42(v29, v23);
    (*(void (**)(char *, uint64_t))(v75 + 8))(v35, a3);
    uint64_t v41 = v70;
    uint64_t v40 = v23;
    v42(v31, v23);
    goto LABEL_5;
  }

  uint64_t v38 = dispatch thunk of RandomAccessCollection.distance(from:to:)();
  uint64_t v72 = v24;
  uint64_t v74 = *(void (**)(char *, uint64_t))(v24 + 8);
  v74(v29, v23);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v75 + 8))(v35, a3);
  uint64_t v40 = v23;
  if (v38 >= v37)
  {
    if (__OFSUB__(0LL, v37))
    {
      __break(1u);
    }

    else
    {
      dispatch thunk of RandomAccessCollection.index(_:offsetBy:)();
      if ((dispatch thunk of static Comparable.>= infix(_:_:)() & 1) == 0)
      {
        uint64_t v48 = *(void (**)(char *, uint64_t))(v69 + 8);
LABEL_15:
        v48(v20, AssociatedTypeWitness);
        v74(v31, v23);
        uint64_t v43 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v72 + 56);
        unint64_t v44 = v70;
        return v43(v44, 1LL, 1LL, v40);
      }

      uint64_t v75 = v37;
      uint64_t v45 = DataProtocol.matches<A>(_:from:)(v82, (uint64_t)v20, a3, v83, v79);
      uint64_t v46 = v69;
      if ((v45 & 1) == 0)
      {
        uint64_t v47 = v80;
        do
        {
          dispatch thunk of BidirectionalCollection.index(before:)();
          uint64_t v48 = *(void (**)(char *, uint64_t))(v46 + 8);
          v48(v20, AssociatedTypeWitness);
          (*(void (**)(char *, char *, uint64_t))(v46 + 32))(v20, v47, AssociatedTypeWitness);
          if ((dispatch thunk of static Comparable.>= infix(_:_:)() & 1) == 0) {
            goto LABEL_15;
          }
        }

        while ((DataProtocol.matches<A>(_:from:)(v82, (uint64_t)v20, a3, v83, v79) & 1) == 0);
      }

      uint64_t v49 = v80;
      dispatch thunk of RandomAccessCollection.index(_:offsetBy:)();
      uint64_t v50 = dispatch thunk of static Comparable.<= infix(_:_:)();
      uint64_t result = ((uint64_t (*)(char *, uint64_t))v74)(v31, v40);
      uint64_t v84 = v40;
      if ((v50 & 1) != 0)
      {
        uint64_t v52 = v66;
        int64_t v51 = TupleTypeMetadata2;
        char v53 = &v66[*(int *)(TupleTypeMetadata2 + 48)];
        uint64_t v54 = *(void (**)(char *, char *, uint64_t))(v46 + 32);
        v54(v66, v20, AssociatedTypeWitness);
        v54(v53, v49, AssociatedTypeWitness);
        uint64_t v55 = v68;
        uint64_t v56 = &v68[*(int *)(v51 + 48)];
        uint64_t v57 = *(void (**)(char *, char *, uint64_t))(v46 + 16);
        v57(v68, v52, AssociatedTypeWitness);
        v57(v56, v53, AssociatedTypeWitness);
        Swift::UInt v58 = v65;
        v54(v65, v55, AssociatedTypeWitness);
        uint64_t v59 = *(void (**)(char *, uint64_t))(v46 + 8);
        v59(v56, AssociatedTypeWitness);
        __int128 v60 = &v55[*(int *)(v51 + 48)];
        v54(v55, v52, AssociatedTypeWitness);
        v54(v60, v53, AssociatedTypeWitness);
        __int128 v61 = v84;
        v54(&v58[*(int *)(v84 + 36)], v60, AssociatedTypeWitness);
        v59(v55, AssociatedTypeWitness);
        char v62 = v72;
        uint64_t v63 = v70;
        (*(void (**)(uint64_t, char *, uint64_t))(v72 + 32))(v70, v58, v61);
        return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v62 + 56))(v63, 0LL, 1LL, v61);
      }
    }

    __break(1u);
    return result;
  }

  uint64_t v41 = v70;
  uint64_t v24 = v72;
  v74(v31, v23);
LABEL_5:
  uint64_t v43 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v24 + 56);
  unint64_t v44 = v41;
  return v43(v44, 1LL, 1LL, v40);
}

uint64_t specialized DataProtocol.lastRange<A, B>(of:in:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9 = type metadata accessor for DispatchData();
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x1895F8858](v9);
  uint64_t v12 = (char *)v19 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  lazy protocol witness table accessor for type DispatchData and conformance DispatchData( (unint64_t *)&lazy protocol witness table cache variable for type DispatchData and conformance DispatchData,  MEMORY[0x18961B770]);
  dispatch thunk of RangeExpression.relative<A>(to:)();
  uint64_t v13 = dispatch thunk of Collection.count.getter();
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v12, v5, v9);
  uint64_t v22 = v25;
  uint64_t v23 = v24;
  if (!v13)
  {
    (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
    return 0LL;
  }

  uint64_t v14 = lazy protocol witness table accessor for type DispatchData and conformance DispatchData( &lazy protocol witness table cache variable for type DispatchData and conformance DispatchData,  MEMORY[0x18961B768]);
  uint64_t v15 = dispatch thunk of RandomAccessCollection.distance(from:to:)();
  uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  if (v15 < v13) {
    return 0LL;
  }
  if (__OFSUB__(0LL, v13))
  {
    __break(1u);
    goto LABEL_15;
  }

  v19[1] = v14;
  dispatch thunk of RandomAccessCollection.index(_:offsetBy:)();
  uint64_t v17 = v21;
  uint64_t v18 = v24;
  if (v21 < v24) {
    return 0LL;
  }
  if ((specialized DataProtocol.matches<A>(_:from:)(a1, v21, a3, a5) & 1) == 0)
  {
    lazy protocol witness table accessor for type DispatchData and conformance DispatchData( &lazy protocol witness table cache variable for type DispatchData and conformance DispatchData,  MEMORY[0x18961B760]);
    do
    {
      dispatch thunk of BidirectionalCollection.index(before:)();
      uint64_t v17 = v20;
      uint64_t v21 = v20;
      if (v20 < v18) {
        return 0LL;
      }
    }

    while ((specialized DataProtocol.matches<A>(_:from:)(a1, v20, a3, a5) & 1) == 0);
  }

  uint64_t result = dispatch thunk of RandomAccessCollection.index(_:offsetBy:)();
  if (v20 >= v17) {
    return v17;
  }
LABEL_15:
  __break(1u);
  return result;
}

uint64_t specialized DataProtocol.lastRange<A, B>(of:in:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t result = dispatch thunk of Collection.count.getter();
  if (!result) {
    return 0LL;
  }
  uint64_t v15 = a5 + a4;
  if (__OFADD__(a5, a4))
  {
    __break(1u);
LABEL_36:
    __break(1u);
    goto LABEL_37;
  }

  if (v15 < v22 || v21 < a5 || v15 < v21 || v22 < a5) {
    goto LABEL_36;
  }
  if (__OFSUB__(v22, v21))
  {
LABEL_37:
    __break(1u);
LABEL_38:
    __break(1u);
    goto LABEL_39;
  }

  uint64_t v16 = result;
  if (v22 - v21 < result) {
    return 0LL;
  }
  if (__OFSUB__(0LL, result)) {
    goto LABEL_38;
  }
  uint64_t v17 = v22 - result;
  if (__OFADD__(v22, -result))
  {
LABEL_39:
    __break(1u);
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }

  if (v17 < a5 || v15 < v17) {
    goto LABEL_40;
  }
  if (v17 < v21) {
    return 0LL;
  }
  uint64_t result = specialized DataProtocol.matches<A>(_:from:)(a1, v22 - result, a3, a4, a5, a6, a8);
  if ((result & 1) != 0) {
    goto LABEL_19;
  }
  BOOL v20 = __OFSUB__(v17--, 1LL);
  if (!v20)
  {
    if (v17 < a5 || v17 >= v15) {
      goto LABEL_47;
    }
    if (v17 < v21) {
      return 0LL;
    }
    uint64_t result = specialized DataProtocol.matches<A>(_:from:)(a1, v17, a3, a4, a5, a6, a8);
    if ((result & 1) != 0)
    {
LABEL_19:
      uint64_t v19 = v17 + v16;
      if (!__OFADD__(v17, v16))
      {
        if (v19 >= a5 && v15 >= v19)
        {
          if (v19 >= v17) {
            return v17;
          }
          goto LABEL_45;
        }

uint64_t specialized DataProtocol.lastRange<A, B>(of:in:)( uint64_t a1, uint64_t a2, unint64_t a3, unint64_t a4)
{
  uint64_t v7 = dispatch thunk of Collection.count.getter();
  if (!v7) {
    return 0LL;
  }
  uint64_t v8 = v7;
  uint64_t result = specialized RandomAccessCollection<>.distance(from:to:)(v13, v14, a3, a4);
  if (result < v8) {
    return 0LL;
  }
  if (!__OFSUB__(0LL, v8))
  {
    uint64_t v10 = specialized RandomAccessCollection<>.index(_:offsetBy:)(v14, -v8, a3);
    if (v10 >= v13)
    {
      uint64_t v11 = v10;
      while (1)
      {
        uint64_t result = specialized DataProtocol.matches<A>(_:from:)(a1, v11, a3, a4);
        if ((result & 1) != 0) {
          break;
        }
        if (__OFSUB__(v11--, 1LL))
        {
          __break(1u);
          goto LABEL_14;
        }

        if (v11 < v13) {
          return 0LL;
        }
      }

      uint64_t result = specialized RandomAccessCollection<>.index(_:offsetBy:)(v11, v8, a3);
      if (result < v11) {
        goto LABEL_15;
      }
      return v11;
    }

    return 0LL;
  }

uint64_t specialized DataProtocol.lastRange<A, B>(of:in:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t result = dispatch thunk of Collection.count.getter();
  if (result) {
    BOOL v13 = v17 - v16 < result;
  }
  else {
    BOOL v13 = 1;
  }
  if (v13) {
    return 0LL;
  }
  uint64_t v15 = result;
  if (__OFSUB__(0LL, result))
  {
    __break(1u);
    goto LABEL_16;
  }

  uint64_t v14 = v17 - result;
  if (v17 - result < v16) {
    return 0LL;
  }
  while (1)
  {
    uint64_t result = specialized DataProtocol.matches<A>(_:from:)(a1, v14, a3, a4, a5, a7);
    if ((result & 1) != 0) {
      break;
    }
    if (--v14 < v16) {
      return 0LL;
    }
  }

  if (v14 + v15 >= v14) {
    return v14;
  }
LABEL_16:
  __break(1u);
  return result;
}

{
  uint64_t v12;
  uint64_t v13;
  uint64_t result;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  lazy protocol witness table accessor for type UnsafeRawBufferPointer and conformance UnsafeRawBufferPointer();
  dispatch thunk of RangeExpression.relative<A>(to:)();
  uint64_t v12 = dispatch thunk of Collection.count.getter();
  if (!v12) {
    return 0LL;
  }
  BOOL v13 = v12;
  uint64_t result = specialized RandomAccessCollection<>.distance(from:to:)(v20, v21, a3, a4);
  if (result < v13) {
    return 0LL;
  }
  if (__OFSUB__(0LL, v13)) {
    goto LABEL_24;
  }
  uint64_t v15 = v21 - v13;
  if (__OFADD__(v21, -v13))
  {
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
LABEL_28:
    __break(1u);
    goto LABEL_29;
  }

  uint64_t v16 = a4 - a3;
  if (!a3) {
    uint64_t v16 = 0LL;
  }
  if (v15 < 0 || v16 < v15) {
    goto LABEL_26;
  }
  if (v15 < v20) {
    return 0LL;
  }
  uint64_t v19 = v16;
  uint64_t result = specialized DataProtocol.matches<A>(_:from:)(a1, v15, a3, a4, a5, a7);
  if ((result & 1) == 0)
  {
    while (1)
    {
      uint64_t v17 = v15 - 1;
      if (v15 < 1 || v21 + ~v13 >= v19) {
        break;
      }
      if (v15 <= v20) {
        return 0LL;
      }
      uint64_t result = specialized DataProtocol.matches<A>(_:from:)(a1, --v15, a3, a4, a5, a7);
      if ((result & 1) != 0) {
        goto LABEL_18;
      }
    }

    __break(1u);
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }

  uint64_t v17 = v21 - v13;
LABEL_18:
  uint64_t v18 = v17 + v13;
  if (__OFADD__(v17, v13)) {
    goto LABEL_27;
  }
  if (v18 >= v17) {
    return v17;
  }
LABEL_29:
  __break(1u);
  return result;
}

uint64_t specialized DataProtocol.lastRange<A, B>(of:in:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t result = dispatch thunk of Collection.count.getter();
  if (result)
  {
    if (__OFSUB__(v15, v14))
    {
      __break(1u);
    }

    else
    {
      uint64_t v11 = result;
      if (v15 - v14 < result) {
        return 0LL;
      }
      if (!__OFSUB__(0LL, result))
      {
        int64_t v12 = v15 - result;
        if (!__OFADD__(v15, -result))
        {
          while (v12 >= v14)
          {
            uint64_t result = specialized DataProtocol.matches<A>(_:from:)(a1, v12, a3, a4, a6);
            if ((result & 1) != 0) {
              goto LABEL_13;
            }
            if (__OFSUB__(v12--, 1LL))
            {
              __break(1u);
LABEL_13:
              if (__OFADD__(v12, v11)) {
                goto LABEL_19;
              }
              if (v12 + v11 < v12) {
                goto LABEL_20;
              }
              return v12;
            }
          }

          return 0LL;
        }

{
  uint64_t result;
  uint64_t v11;
  int64_t v12;
  int64_t v14;
  uint64_t v15;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ContiguousArray<UInt8>);
  lazy protocol witness table accessor for type [String] and conformance [A]( &lazy protocol witness table cache variable for type ContiguousArray<UInt8> and conformance ContiguousArray<A>,  &demangling cache variable for type metadata for ContiguousArray<UInt8>,  MEMORY[0x189619590]);
  dispatch thunk of RangeExpression.relative<A>(to:)();
  uint64_t result = dispatch thunk of Collection.count.getter();
  if (result)
  {
    if (__OFSUB__(v15, v14))
    {
      __break(1u);
    }

    else
    {
      uint64_t v11 = result;
      if (v15 - v14 < result) {
        return 0LL;
      }
      if (!__OFSUB__(0LL, result))
      {
        int64_t v12 = v15 - result;
        if (!__OFADD__(v15, -result))
        {
          while (v12 >= v14)
          {
            uint64_t result = specialized DataProtocol.matches<A>(_:from:)(a1, v12, a3, a4, a6);
            if ((result & 1) != 0) {
              goto LABEL_13;
            }
            if (__OFSUB__(v12--, 1LL))
            {
              __break(1u);
LABEL_13:
              if (__OFADD__(v12, v11)) {
                goto LABEL_19;
              }
              if (v12 + v11 < v12) {
                goto LABEL_20;
              }
              return v12;
            }
          }

          return 0LL;
        }

uint64_t specialized DataProtocol.lastRange<A, B>(of:in:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t result = dispatch thunk of Collection.count.getter();
  if (!result) {
    return 0LL;
  }
  if (__OFSUB__(v24, v23))
  {
LABEL_18:
    __break(1u);
LABEL_19:
    __break(1u);
LABEL_20:
    __break(1u);
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }

  uint64_t v14 = result;
  if (v24 - v23 < result) {
    return 0LL;
  }
  uint64_t v15 = -result;
  if (__OFSUB__(0LL, result)) {
    goto LABEL_19;
  }
  uint64_t v16 = v24 - result;
  if (__OFADD__(v24, v15)) {
    goto LABEL_20;
  }
  if (v16 < v23) {
    return 0LL;
  }
  uint64_t v17 = a1;
  uint64_t v18 = v24 + v15;
  uint64_t v19 = a4;
  for (uint64_t i = a5; ; uint64_t i = a5)
  {
    uint64_t result = specialized DataProtocol.matches<A>(_:from:)(v17, v18, v19, i, a6, a7, a9);
    if ((result & 1) != 0) {
      break;
    }
    if (__OFSUB__(v16--, 1LL))
    {
      __break(1u);
      goto LABEL_18;
    }

    if (v16 < v23) {
      return 0LL;
    }
    uint64_t v17 = a1;
    uint64_t v18 = v16;
    uint64_t v19 = a4;
  }

  if (__OFADD__(v16, v14)) {
    goto LABEL_21;
  }
  if (v16 + v14 >= v16) {
    return v16;
  }
LABEL_22:
  __break(1u);
  return result;
}

uint64_t specialized DataProtocol.lastRange<A, B>(of:in:)()
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  MEMORY[0x1895F8858](AssociatedTypeWitness);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for EmptyCollection<UInt8>);
  lazy protocol witness table accessor for type [String] and conformance [A]( &lazy protocol witness table cache variable for type EmptyCollection<UInt8> and conformance EmptyCollection<A>,  &demangling cache variable for type metadata for EmptyCollection<UInt8>,  MEMORY[0x1896195D0]);
  dispatch thunk of RangeExpression.relative<A>(to:)();
  if ((dispatch thunk of Collection.count.getter() & 0x8000000000000000LL) == 0 || v3 < v2) {
    return 0LL;
  }
  uint64_t result = dispatch thunk of Collection.startIndex.getter();
  __break(1u);
  return result;
}

uint64_t specialized DataProtocol.lastRange<A, B>(of:in:)( uint64_t a1, uint64_t a2, uint64_t a3, unsigned __int8 a4, uint64_t a5)
{
  uint64_t result = dispatch thunk of Collection.count.getter();
  if (!result) {
    return 0LL;
  }
  if (v15 > a3 || v14 > a3 || (v15 | v14) < 0) {
    goto LABEL_25;
  }
  uint64_t v10 = result;
  if (v15 - v14 < result) {
    return 0LL;
  }
  if (__OFSUB__(0LL, result)) {
    goto LABEL_26;
  }
  uint64_t v11 = v15 - result;
  if (__OFADD__(v15, -result))
  {
LABEL_27:
    __break(1u);
LABEL_28:
    __break(1u);
LABEL_29:
    __break(1u);
LABEL_30:
    __break(1u);
    goto LABEL_31;
  }

  if (v11 < 0 || v11 > a3) {
    goto LABEL_28;
  }
  if (v11 < v14) {
    return 0LL;
  }
  uint64_t result = specialized DataProtocol.matches<A>(_:from:)(a1, v15 - result, a3, a4, a5);
  if ((result & 1) == 0)
  {
    while (1)
    {
      unint64_t v12 = v11 - 1;
      if (v11 < 1 || v15 + ~v10 >= a3) {
        break;
      }
      if (v11 <= v14) {
        return 0LL;
      }
      uint64_t result = specialized DataProtocol.matches<A>(_:from:)(a1, --v11, a3, a4, a5);
      if ((result & 1) != 0) {
        goto LABEL_19;
      }
    }

    __break(1u);
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
    goto LABEL_27;
  }

  unint64_t v12 = v15 - v10;
LABEL_19:
  uint64_t v13 = v12 + v10;
  if (__OFADD__(v12, v10)) {
    goto LABEL_29;
  }
  if (v13 < 0 || v13 > a3) {
    goto LABEL_30;
  }
  if (v13 >= v12) {
    return v12;
  }
LABEL_31:
  __break(1u);
  return result;
}

uint64_t DataProtocol.copyBytes(to:count:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v55 = a1;
  uint64_t v56 = a2;
  uint64_t v58 = a5;
  uint64_t v59 = *(void *)(a5 + 8);
  uint64_t v60 = a3;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v8 = MEMORY[0x1895F8858](TupleTypeMetadata2);
  uint64_t v49 = (char *)&v47 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = MEMORY[0x1895F8858](v8);
  uint64_t v52 = (char *)&v47 - v11;
  uint64_t v12 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v13 = MEMORY[0x1895F8858](v10);
  uint64_t v15 = (char *)&v47 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v16 = MEMORY[0x1895F8858](v13);
  uint64_t v18 = (char *)&v47 - v17;
  MEMORY[0x1895F8858](v16);
  BOOL v20 = (char *)&v47 - v19;
  swift_getAssociatedConformanceWitness();
  uint64_t v21 = type metadata accessor for Range();
  uint64_t v53 = *(void *)(v21 - 8);
  uint64_t v22 = MEMORY[0x1895F8858](v21);
  uint64_t v50 = (char *)&v47 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v22);
  int64_t v51 = (char *)&v47 - v24;
  dispatch thunk of Collection.startIndex.getter();
  dispatch thunk of Collection.startIndex.getter();
  uint64_t v60 = v5;
  uint64_t v57 = a4;
  dispatch thunk of RandomAccessCollection.index(_:offsetBy:)();
  uint64_t v59 = v12;
  uint64_t v25 = *(void (**)(char *, uint64_t))(v12 + 8);
  v25(v15, AssociatedTypeWitness);
  uint64_t result = dispatch thunk of static Comparable.<= infix(_:_:)();
  if ((result & 1) != 0)
  {
    uint64_t v27 = TupleTypeMetadata2;
    uint64_t v28 = *(int *)(TupleTypeMetadata2 + 48);
    uint64_t v29 = v52;
    uint64_t v47 = v25;
    uint64_t v48 = v21;
    uint64_t v30 = &v52[v28];
    uint64_t v31 = v59;
    uint64_t v32 = *(void (**)(char *, char *, uint64_t))(v59 + 32);
    v32(v52, v20, AssociatedTypeWitness);
    v32(v30, v18, AssociatedTypeWitness);
    uint64_t v33 = v49;
    uint64_t v34 = &v49[*(int *)(v27 + 48)];
    uint64_t v35 = *(void (**)(char *, char *, uint64_t))(v31 + 16);
    v35(v49, v29, AssociatedTypeWitness);
    v35(v34, v30, AssociatedTypeWitness);
    uint64_t v36 = v50;
    v32(v50, v33, AssociatedTypeWitness);
    uint64_t v37 = v47;
    v47(v34, AssociatedTypeWitness);
    uint64_t v38 = &v33[*(int *)(v27 + 48)];
    v32(v33, v29, AssociatedTypeWitness);
    v32(v38, v30, AssociatedTypeWitness);
    uint64_t v39 = v48;
    v32(&v36[*(int *)(v48 + 36)], v38, AssociatedTypeWitness);
    v37(v33, AssociatedTypeWitness);
    uint64_t v40 = v53;
    uint64_t v41 = v51;
    uint64_t v42 = v39;
    (*(void (**)(char *, char *, uint64_t))(v53 + 32))(v51, v36, v39);
    uint64_t v43 = v58;
    unint64_t v44 = *(uint64_t (**)(uint64_t, uint64_t, char *, uint64_t, uint64_t, uint64_t, uint64_t))(v58 + 104);
    uint64_t v45 = MEMORY[0x186E20D4C](MEMORY[0x189618A48], v42);
    uint64_t v46 = v44(v55, v56, v41, v42, v45, v57, v43);
    (*(void (**)(char *, uint64_t))(v40 + 8))(v41, v42);
    return v46;
  }

  else
  {
    __break(1u);
  }

  return result;
}

uint64_t DataProtocol.copyBytes<A>(to:count:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return DataProtocol.copyBytes<A>(to:count:)(a1, a2, a3, a5, a4, a6);
}

{
  uint64_t v6;
  uint64_t AssociatedTypeWitness;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void (*v26)(char *, uint64_t);
  uint64_t result;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  char *v31;
  uint64_t v32;
  void (*v33)(char *, char *, uint64_t);
  char *v34;
  char *v35;
  void (*v36)(char *, char *, uint64_t);
  char *v37;
  void (*v38)(char *, uint64_t);
  char *v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t (*v44)(uint64_t, uint64_t, char *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  void (*v48)(char *, uint64_t);
  uint64_t v49;
  char *v50;
  char *v51;
  char *v52;
  char *v53;
  uint64_t v54;
  uint64_t TupleTypeMetadata2;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v57 = a2;
  uint64_t v58 = a5;
  uint64_t v56 = a1;
  uint64_t v60 = a6;
  __int128 v61 = *(void *)(a6 + 8);
  char v62 = a3;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v9 = MEMORY[0x1895F8858](TupleTypeMetadata2);
  uint64_t v50 = (char *)&v47 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = MEMORY[0x1895F8858](v9);
  uint64_t v53 = (char *)&v47 - v12;
  uint64_t v13 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v14 = MEMORY[0x1895F8858](v11);
  uint64_t v16 = (char *)&v47 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v17 = MEMORY[0x1895F8858](v14);
  uint64_t v19 = (char *)&v47 - v18;
  MEMORY[0x1895F8858](v17);
  uint64_t v21 = (char *)&v47 - v20;
  swift_getAssociatedConformanceWitness();
  uint64_t v22 = type metadata accessor for Range();
  uint64_t v54 = *(void *)(v22 - 8);
  uint64_t v23 = MEMORY[0x1895F8858](v22);
  int64_t v51 = (char *)&v47 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v23);
  uint64_t v52 = (char *)&v47 - v25;
  dispatch thunk of Collection.startIndex.getter();
  dispatch thunk of Collection.startIndex.getter();
  char v62 = v6;
  uint64_t v59 = a4;
  dispatch thunk of RandomAccessCollection.index(_:offsetBy:)();
  __int128 v61 = v13;
  uint64_t v26 = *(void (**)(char *, uint64_t))(v13 + 8);
  v26(v16, AssociatedTypeWitness);
  uint64_t result = dispatch thunk of static Comparable.<= infix(_:_:)();
  if ((result & 1) != 0)
  {
    uint64_t v28 = TupleTypeMetadata2;
    uint64_t v29 = *(int *)(TupleTypeMetadata2 + 48);
    uint64_t v30 = v53;
    uint64_t v48 = v26;
    uint64_t v49 = v22;
    uint64_t v31 = &v53[v29];
    uint64_t v32 = v61;
    uint64_t v33 = *(void (**)(char *, char *, uint64_t))(v61 + 32);
    v33(v53, v21, AssociatedTypeWitness);
    v33(v31, v19, AssociatedTypeWitness);
    uint64_t v34 = v50;
    uint64_t v35 = &v50[*(int *)(v28 + 48)];
    uint64_t v36 = *(void (**)(char *, char *, uint64_t))(v32 + 16);
    v36(v50, v30, AssociatedTypeWitness);
    v36(v35, v31, AssociatedTypeWitness);
    uint64_t v37 = v51;
    v33(v51, v34, AssociatedTypeWitness);
    uint64_t v38 = v48;
    v48(v35, AssociatedTypeWitness);
    uint64_t v39 = &v34[*(int *)(v28 + 48)];
    v33(v34, v30, AssociatedTypeWitness);
    v33(v39, v31, AssociatedTypeWitness);
    uint64_t v40 = v49;
    v33(&v37[*(int *)(v49 + 36)], v39, AssociatedTypeWitness);
    v38(v34, AssociatedTypeWitness);
    uint64_t v41 = v54;
    uint64_t v42 = v52;
    (*(void (**)(char *, char *, uint64_t))(v54 + 32))(v52, v37, v40);
    uint64_t v43 = v60;
    unint64_t v44 = *(uint64_t (**)(uint64_t, uint64_t, char *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v60 + 112);
    uint64_t v45 = MEMORY[0x186E20D4C](MEMORY[0x189618A48], v40);
    uint64_t v46 = v44(v56, v57, v42, v58, v40, v45, v59, v43);
    (*(void (**)(char *, uint64_t))(v41 + 8))(v42, v40);
    return v46;
  }

  else
  {
    __break(1u);
  }

  return result;
}

uint64_t specialized DataProtocol.copyBytes<A>(to:count:)( uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v10 = a6 + a3;
  if (__OFADD__(a6, a3))
  {
    __break(1u);
    goto LABEL_11;
  }

  if (__OFADD__(a6, a5))
  {
LABEL_11:
    __break(1u);
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }

  if (v10 < a6 || a6 + a5 < v10) {
    goto LABEL_12;
  }
  if (!result)
  {
    uint64_t v12 = 0LL;
    return specialized DataProtocol.copyBytes<A>(to:from:)(result, v12, a6, v10, a4, a5, a6);
  }

  uint64_t v11 = *(void *)(*(void *)(a7 - 8) + 72LL);
  if ((unsigned __int128)(a2 * (__int128)v11) >> 64 == (a2 * v11) >> 63)
  {
    uint64_t v12 = result + a2 * v11;
    return specialized DataProtocol.copyBytes<A>(to:from:)(result, v12, a6, v10, a4, a5, a6);
  }

uint64_t specialized DataProtocol.copyBytes<A>(to:count:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result = dispatch thunk of RandomAccessCollection.index(_:offsetBy:)();
  if (v10 < v11)
  {
    __break(1u);
  }

  else
  {
    if (!a1)
    {
      uint64_t v9 = 0LL;
      return specialized DataProtocol.copyBytes<A>(to:from:)(a1, v9, v11, v10);
    }

    uint64_t v8 = *(void *)(*(void *)(a4 - 8) + 72LL);
    if ((unsigned __int128)(a2 * (__int128)v8) >> 64 == (a2 * v8) >> 63)
    {
      uint64_t v9 = a1 + a2 * v8;
      return specialized DataProtocol.copyBytes<A>(to:from:)(a1, v9, v11, v10);
    }
  }

  __break(1u);
  return result;
}

uint64_t specialized DataProtocol.copyBytes<A>(to:count:)( uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6 = a5 - a4;
  if (!a4) {
    uint64_t v6 = 0LL;
  }
  if (a3 < 0 || v6 < a3)
  {
    __break(1u);
  }

  else
  {
    if (!result)
    {
      uint64_t v8 = 0LL;
      return specialized DataProtocol.copyBytes<A>(to:from:)(result, v8, 0LL, a3, a4, a5);
    }

    uint64_t v7 = *(void *)(*(void *)(a6 - 8) + 72LL);
    if ((unsigned __int128)(a2 * (__int128)v7) >> 64 == (a2 * v7) >> 63)
    {
      uint64_t v8 = result + a2 * v7;
      return specialized DataProtocol.copyBytes<A>(to:from:)(result, v8, 0LL, a3, a4, a5);
    }
  }

  __break(1u);
  return result;
}

{
  uint64_t v6;
  uint64_t v7;
  if (a3 < 0)
  {
    __break(1u);
  }

  else
  {
    if (!result)
    {
      uint64_t v7 = 0LL;
      return specialized DataProtocol.copyBytes<A>(to:from:)(result, v7, 0LL, a3, a4, a5);
    }

    uint64_t v6 = *(void *)(*(void *)(a6 - 8) + 72LL);
    if ((unsigned __int128)(a2 * (__int128)v6) >> 64 == (a2 * v6) >> 63)
    {
      uint64_t v7 = result + a2 * v6;
      return specialized DataProtocol.copyBytes<A>(to:from:)(result, v7, 0LL, a3, a4, a5);
    }
  }

  __break(1u);
  return result;
}

void specialized DataProtocol.copyBytes<A>(to:count:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  __asm { BR              X10 }

uint64_t sub_1830679E4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v8 = ((uint64_t (*)(void, uint64_t, uint64_t, unint64_t))specialized RandomAccessCollection<>.index(_:offsetBy:))( (int)v4,  a3,  v4,  v3);
  if (v8 < (int)v4)
  {
    __break(1u);
    goto LABEL_8;
  }

  if (!v5)
  {
    uint64_t v10 = 0LL;
    return specialized DataProtocol.copyBytes<A>(to:from:)(v5, v10, (int)v4, v8, v4, v3);
  }

  uint64_t v9 = *(void *)(*(void *)(v6 - 8) + 72LL);
  if ((unsigned __int128)(v7 * (__int128)v9) >> 64 != (v7 * v9) >> 63)
  {
LABEL_8:
    __break(1u);
    JUMPOUT(0x183067A64LL);
  }

  uint64_t v10 = v5 + v7 * v9;
  return specialized DataProtocol.copyBytes<A>(to:from:)(v5, v10, (int)v4, v8, v4, v3);
}

uint64_t specialized DataProtocol.copyBytes<A>(to:count:)( uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, unint64_t a7, uint64_t a8)
{
  uint64_t v12 = a6 + a3;
  if (__OFADD__(a6, a3))
  {
    __break(1u);
    goto LABEL_9;
  }

  if (v12 < a6)
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }

  if (!result)
  {
    uint64_t v14 = 0LL;
    return specialized DataProtocol.copyBytes<A>(to:from:)(result, v14, a6, v12, a4, a5, a6, a7);
  }

  uint64_t v13 = *(void *)(*(void *)(a8 - 8) + 72LL);
  if ((unsigned __int128)(a2 * (__int128)v13) >> 64 == (a2 * v13) >> 63)
  {
    uint64_t v14 = result + a2 * v13;
    return specialized DataProtocol.copyBytes<A>(to:from:)(result, v14, a6, v12, a4, a5, a6, a7);
  }

uint64_t specialized DataProtocol.copyBytes<A>(to:count:)( uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void (*a6)(uint64_t, uint64_t), void (*a7)(uint64_t, uint64_t))
{
  if (a3 < 0)
  {
    __break(1u);
  }

  else
  {
    if (!result)
    {
      uint64_t v8 = 0LL;
      return specialized DataProtocol.copyBytes<A>(to:from:)(result, v8, 0LL, a3, a4, a6, a7);
    }

    uint64_t v7 = *(void *)(*(void *)(a5 - 8) + 72LL);
    if ((unsigned __int128)(a2 * (__int128)v7) >> 64 == (a2 * v7) >> 63)
    {
      uint64_t v8 = result + a2 * v7;
      return specialized DataProtocol.copyBytes<A>(to:from:)(result, v8, 0LL, a3, a4, a6, a7);
    }
  }

  __break(1u);
  return result;
}

uint64_t specialized DataProtocol.copyBytes<A>(to:count:)( uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, char a5, uint64_t a6)
{
  if (a3 < 0 || a4 < a3)
  {
    __break(1u);
  }

  else
  {
    if (!result)
    {
      uint64_t v7 = 0LL;
      return specialized DataProtocol.copyBytes<A>(to:from:)(result, v7, 0LL, a3, a4, a5);
    }

    uint64_t v6 = *(void *)(*(void *)(a6 - 8) + 72LL);
    if ((unsigned __int128)(a2 * (__int128)v6) >> 64 == (a2 * v6) >> 63)
    {
      uint64_t v7 = result + a2 * v6;
      return specialized DataProtocol.copyBytes<A>(to:from:)(result, v7, 0LL, a3, a4, a5);
    }
  }

  __break(1u);
  return result;
}

uint64_t DataProtocol.copyBytes<A>(to:from:)( uint64_t a1, uint64_t a2, char *a3, unsigned int (*a4)(char *, uint64_t, uint64_t), uint64_t a5, uint64_t a6, uint64_t a7)
{
  return DataProtocol.copyBytes<A>(to:from:)(a1, a2, a3, a6, a4, a7, a5);
}

uint64_t specialized DataProtocol.copyBytes<A>(to:from:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Slice<DispatchData>);
  MEMORY[0x1895F8858](v8);
  uint64_t v10 = (uint64_t *)&v42[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  if (a1)
  {
    v46[1] = a3;
    v46[2] = a4;
    type metadata accessor for DispatchData();
    lazy protocol witness table accessor for type DispatchData and conformance DispatchData( (unint64_t *)&lazy protocol witness table cache variable for type DispatchData and conformance DispatchData,  MEMORY[0x18961B770]);
    dispatch thunk of Collection.subscript.getter();
    lazy protocol witness table accessor for type DispatchData and conformance DispatchData( &lazy protocol witness table cache variable for type DispatchData and conformance DispatchData,  MEMORY[0x18961B768]);
    uint64_t v11 = dispatch thunk of RandomAccessCollection.distance(from:to:)();
    uint64_t v12 = *v10;
    uint64_t v45 = v10[1];
    v46[0] = v12;
    uint64_t v13 = dispatch thunk of Collection.startIndex.getter();
    uint64_t v43 = MEMORY[0x18961AFE8];
    MEMORY[0x1895F8858](v13);
    uint64_t v14 = DispatchData.enumerateBytes(_:)();
    uint64_t v15 = v43;
    MEMORY[0x1895F8858](v14);
    uint64_t v38 = &v44;
    uint64_t v39 = (uint64_t)v10;
    uint64_t v40 = v46;
    uint64_t v41 = &v45;
    uint64_t v16 = specialized Sequence.compactMap<A>(_:)( (void (*)(_OWORD *__return_ptr, __int128 *))partial apply for specialized closure #1 in Slice<>.regions.getter,  (uint64_t)&v42[-48],  v15);
    swift_bridgeObjectRelease();
    uint64_t v17 = v16[2];
    if (v17)
    {
      uint64_t v18 = 0LL;
      uint64_t v19 = a2 - a1;
      if (v11 >= a2 - a1) {
        uint64_t v11 = a2 - a1;
      }
      uint64_t v20 = a2;
      uint64_t v21 = v16 + 8;
      while (v11 >= 1)
      {
        uint64_t v22 = *(v21 - 1);
        uint64_t v23 = *v21;
        BOOL v24 = __OFADD__(*v21, v22);
        uint64_t v25 = *v21 + v22;
        if (v24)
        {
          __break(1u);
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
LABEL_43:
          __break(1u);
LABEL_44:
          __break(1u);
LABEL_45:
          __break(1u);
LABEL_46:
          __break(1u);
LABEL_47:
          __break(1u);
LABEL_48:
          __break(1u);
          goto LABEL_49;
        }

        uint64_t v26 = *(v21 - 4);
        if (v25 < v26 || v26 < v23 || v25 < v23) {
          goto LABEL_41;
        }
        if (__OFSUB__(v26, v23)) {
          goto LABEL_42;
        }
        uint64_t v29 = *(v21 - 3);
        uint64_t v30 = *(v21 - 2);
        if (v30)
        {
          if (v29 < v23 || v25 < v29) {
            goto LABEL_45;
          }
          if (__OFSUB__(v29, v26)) {
            goto LABEL_46;
          }
          uint64_t v31 = (const void *)(v30 + v26 - v23);
          uint64_t v32 = v30 - v23 + v29;
          if (v19 < v18) {
            goto LABEL_43;
          }
        }

        else
        {
          if (v29 < v23 || v25 < v29) {
            goto LABEL_48;
          }
          uint64_t v32 = 0LL;
          uint64_t v31 = 0LL;
          if (v19 < v18) {
            goto LABEL_43;
          }
        }

        uint64_t v33 = (void *)(a1 + v18);
        int64_t v34 = v32 - (void)v31;
        if (v11 < v34) {
          int64_t v34 = v11;
        }
        if (v31) {
          int64_t v35 = v34;
        }
        else {
          int64_t v35 = 0LL;
        }
        if (v31)
        {
          int64_t v36 = v34;
          memmove(v33, v31, v34);
          BOOL v24 = __OFADD__(v18, v36);
          v18 += v36;
          if (v24) {
            goto LABEL_47;
          }
          BOOL v24 = __OFSUB__(v11, v36);
          v11 -= v36;
          if (v24) {
            goto LABEL_44;
          }
        }

        v21 += 5;
        if (!--v17) {
          break;
        }
      }
    }

    else
    {
      uint64_t v18 = 0LL;
    }

    swift_bridgeObjectRelease();
    outlined destroy of Any?((uint64_t)v10, &demangling cache variable for type metadata for Slice<DispatchData>);
    return v18;
  }

  else
  {
LABEL_49:
    __break(1u);
LABEL_50:
    LODWORD(v40) = 0;
    uint64_t v39 = 487LL;
    LOBYTE(v38) = 2;
    uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
  }

  return result;
}

uint64_t specialized DataProtocol.copyBytes<A>(to:from:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Slice<DispatchData>);
  MEMORY[0x1895F8858](v4);
  uint64_t v6 = (void *)((char *)v38 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  if (a1)
  {
    v38[0] = a2;
    type metadata accessor for DispatchData();
    lazy protocol witness table accessor for type DispatchData and conformance DispatchData( (unint64_t *)&lazy protocol witness table cache variable for type DispatchData and conformance DispatchData,  MEMORY[0x18961B770]);
    dispatch thunk of RangeExpression.relative<A>(to:)();
    dispatch thunk of Collection.subscript.getter();
    lazy protocol witness table accessor for type DispatchData and conformance DispatchData( &lazy protocol witness table cache variable for type DispatchData and conformance DispatchData,  MEMORY[0x18961B768]);
    uint64_t v7 = dispatch thunk of RandomAccessCollection.distance(from:to:)();
    uint64_t v8 = *v6;
    uint64_t v41 = v6[1];
    uint64_t v42 = v8;
    uint64_t v9 = dispatch thunk of Collection.startIndex.getter();
    uint64_t v39 = MEMORY[0x18961AFE8];
    MEMORY[0x1895F8858](v9);
    uint64_t v10 = DispatchData.enumerateBytes(_:)();
    uint64_t v11 = v39;
    MEMORY[0x1895F8858](v10);
    int64_t v34 = &v40;
    uint64_t v35 = (uint64_t)v6;
    int64_t v36 = &v42;
    uint64_t v37 = &v41;
    uint64_t v12 = specialized Sequence.compactMap<A>(_:)( (void (*)(_OWORD *__return_ptr, __int128 *))partial apply for specialized closure #1 in Slice<>.regions.getter,  (uint64_t)&v38[-6],  v11);
    swift_bridgeObjectRelease();
    uint64_t v13 = v12[2];
    if (v13)
    {
      uint64_t v14 = 0LL;
      uint64_t v15 = v38[0] - a1;
      if (v7 >= v38[0] - a1) {
        uint64_t v7 = v38[0] - a1;
      }
      uint64_t v16 = v38[0];
      uint64_t v17 = v12 + 8;
      while (v7 >= 1)
      {
        uint64_t v18 = *(v17 - 1);
        uint64_t v19 = *v17;
        BOOL v20 = __OFADD__(*v17, v18);
        uint64_t v21 = *v17 + v18;
        if (v20)
        {
          __break(1u);
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
LABEL_43:
          __break(1u);
LABEL_44:
          __break(1u);
LABEL_45:
          __break(1u);
LABEL_46:
          __break(1u);
LABEL_47:
          __break(1u);
LABEL_48:
          __break(1u);
          goto LABEL_49;
        }

        uint64_t v22 = *(v17 - 4);
        if (v21 < v22 || v22 < v19 || v21 < v19) {
          goto LABEL_41;
        }
        if (__OFSUB__(v22, v19)) {
          goto LABEL_42;
        }
        uint64_t v25 = *(v17 - 3);
        uint64_t v26 = *(v17 - 2);
        if (v26)
        {
          if (v25 < v19 || v21 < v25) {
            goto LABEL_45;
          }
          if (__OFSUB__(v25, v22)) {
            goto LABEL_46;
          }
          uint64_t v27 = (const void *)(v26 + v22 - v19);
          uint64_t v28 = v26 - v19 + v25;
          if (v15 < v14) {
            goto LABEL_43;
          }
        }

        else
        {
          if (v25 < v19 || v21 < v25) {
            goto LABEL_48;
          }
          uint64_t v28 = 0LL;
          uint64_t v27 = 0LL;
          if (v15 < v14) {
            goto LABEL_43;
          }
        }

        uint64_t v29 = (void *)(a1 + v14);
        int64_t v30 = v28 - (void)v27;
        if (v7 < v30) {
          int64_t v30 = v7;
        }
        if (v27) {
          int64_t v31 = v30;
        }
        else {
          int64_t v31 = 0LL;
        }
        if (v27)
        {
          int64_t v32 = v30;
          memmove(v29, v27, v30);
          BOOL v20 = __OFADD__(v14, v32);
          v14 += v32;
          if (v20) {
            goto LABEL_47;
          }
          BOOL v20 = __OFSUB__(v7, v32);
          v7 -= v32;
          if (v20) {
            goto LABEL_44;
          }
        }

        v17 += 5;
        if (!--v13) {
          break;
        }
      }
    }

    else
    {
      uint64_t v14 = 0LL;
    }

    swift_bridgeObjectRelease();
    outlined destroy of Any?((uint64_t)v6, &demangling cache variable for type metadata for Slice<DispatchData>);
    return v14;
  }

  else
  {
LABEL_49:
    __break(1u);
LABEL_50:
    LODWORD(v36) = 0;
    uint64_t v35 = 487LL;
    LOBYTE(v34) = 2;
    uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
  }

  return result;
}

uint64_t specialized DataProtocol.copyBytes<A>(to:from:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  if (!a1)
  {
LABEL_56:
    __break(1u);
    goto LABEL_57;
  }

  uint64_t v7 = a7 + a6;
  if (__OFADD__(a7, a6))
  {
LABEL_57:
    __break(1u);
    goto LABEL_58;
  }

  if (v7 < a7)
  {
LABEL_58:
    __break(1u);
    goto LABEL_59;
  }

  if (a3 < a7)
  {
LABEL_59:
    __break(1u);
    goto LABEL_60;
  }

  if (v7 < a4)
  {
LABEL_60:
    __break(1u);
    goto LABEL_61;
  }

  if (v7 < a3)
  {
LABEL_61:
    __break(1u);
    goto LABEL_62;
  }

  if (a4 < a7)
  {
LABEL_62:
    __break(1u);
LABEL_63:
    __break(1u);
LABEL_64:
    LODWORD(v39) = 0;
    uint64_t v38 = 487LL;
    LOBYTE(v37) = 2;
    uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }

  uint64_t v8 = a4 - a3;
  if (__OFSUB__(a4, a3)) {
    goto LABEL_63;
  }
  v44[0] = a3;
  v44[1] = a4;
  v44[2] = a5;
  v44[3] = a6;
  v44[4] = a7;
  uint64_t v42 = a4;
  uint64_t v43 = a3;
  uint64_t v41 = a7;
  MEMORY[0x1895F8858](a1);
  uint64_t v37 = &v41;
  uint64_t v38 = (uint64_t)v44;
  uint64_t v39 = &v43;
  char v40 = &v42;
  uint64_t v14 = specialized Sequence.compactMap<A>(_:)( (void (*)(_OWORD *__return_ptr, void *))partial apply for specialized closure #1 in Slice<>.regions.getter,  (uint64_t)&v36,  v11,  v12,  v13);
  uint64_t v15 = v14[2];
  if (v15)
  {
    uint64_t v16 = 0LL;
    uint64_t v17 = a2 - a1;
    if (v8 >= a2 - a1) {
      uint64_t v8 = a2 - a1;
    }
    uint64_t v18 = a2;
    uint64_t v19 = v14 + 8;
    while (v8 >= 1)
    {
      uint64_t v20 = *(v19 - 1);
      uint64_t v21 = *v19;
      BOOL v22 = __OFADD__(*v19, v20);
      uint64_t v23 = *v19 + v20;
      if (v22)
      {
        __break(1u);
LABEL_48:
        __break(1u);
LABEL_49:
        __break(1u);
LABEL_50:
        __break(1u);
LABEL_51:
        __break(1u);
LABEL_52:
        __break(1u);
LABEL_53:
        __break(1u);
LABEL_54:
        __break(1u);
LABEL_55:
        __break(1u);
        goto LABEL_56;
      }

      uint64_t v24 = *(v19 - 4);
      if (v23 < v24 || v24 < v21 || v23 < v21) {
        goto LABEL_48;
      }
      if (__OFSUB__(v24, v21)) {
        goto LABEL_49;
      }
      uint64_t v27 = *(v19 - 3);
      uint64_t v28 = *(v19 - 2);
      if (v28)
      {
        if (v27 < v21 || v23 < v27) {
          goto LABEL_52;
        }
        if (__OFSUB__(v27, v24)) {
          goto LABEL_53;
        }
        uint64_t v29 = (const void *)(v28 + v24 - v21);
        uint64_t v30 = v28 - v21 + v27;
        if (v17 < v16) {
          goto LABEL_50;
        }
      }

      else
      {
        if (v27 < v21 || v23 < v27) {
          goto LABEL_55;
        }
        uint64_t v30 = 0LL;
        uint64_t v29 = 0LL;
        if (v17 < v16) {
          goto LABEL_50;
        }
      }

      int64_t v31 = (void *)(a1 + v16);
      int64_t v32 = v30 - (void)v29;
      if (v8 < v32) {
        int64_t v32 = v8;
      }
      if (v29) {
        int64_t v33 = v32;
      }
      else {
        int64_t v33 = 0LL;
      }
      if (v29)
      {
        int64_t v34 = v32;
        memmove(v31, v29, v32);
        BOOL v22 = __OFADD__(v16, v34);
        v16 += v34;
        if (v22) {
          goto LABEL_54;
        }
        BOOL v22 = __OFSUB__(v8, v34);
        v8 -= v34;
        if (v22) {
          goto LABEL_51;
        }
      }

      v19 += 5;
      if (!--v15) {
        break;
      }
    }
  }

  else
  {
    uint64_t v16 = 0LL;
  }

  swift_bridgeObjectRelease();
  return v16;
}

uint64_t specialized DataProtocol.copyBytes<A>(to:from:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v47 = a4;
  uint64_t v48 = a5;
  uint64_t v49 = a6;
  if (!a1)
  {
LABEL_56:
    __break(1u);
    goto LABEL_57;
  }

  lazy protocol witness table accessor for type DispatchData.Region and conformance DispatchData.Region();
  uint64_t v11 = dispatch thunk of RangeExpression.relative<A>(to:)();
  uint64_t v12 = a6 + a5;
  if (__OFADD__(a6, a5))
  {
LABEL_57:
    __break(1u);
    goto LABEL_58;
  }

  if (v12 < a6)
  {
LABEL_58:
    __break(1u);
    goto LABEL_59;
  }

  if (v45 < a6)
  {
LABEL_59:
    __break(1u);
    goto LABEL_60;
  }

  if (v12 < v46)
  {
LABEL_60:
    __break(1u);
    goto LABEL_61;
  }

  if (v12 < v45)
  {
LABEL_61:
    __break(1u);
    goto LABEL_62;
  }

  if (v46 < a6)
  {
LABEL_62:
    __break(1u);
LABEL_63:
    __break(1u);
LABEL_64:
    LODWORD(v39) = 0;
    uint64_t v38 = 487LL;
    LOBYTE(v37) = 2;
    uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }

  uint64_t v13 = v46 - v45;
  if (__OFSUB__(v46, v45)) {
    goto LABEL_63;
  }
  v44[0] = v45;
  v44[1] = v46;
  v44[2] = a4;
  v44[3] = a5;
  v44[4] = a6;
  uint64_t v42 = v46;
  uint64_t v43 = v45;
  uint64_t v41 = a6;
  MEMORY[0x1895F8858](v11);
  uint64_t v37 = &v41;
  uint64_t v38 = (uint64_t)v44;
  uint64_t v39 = &v43;
  char v40 = &v42;
  uint64_t v14 = specialized Sequence.compactMap<A>(_:)( (void (*)(_OWORD *__return_ptr, void *))partial apply for specialized closure #1 in Slice<>.regions.getter,  (uint64_t)&v36,  a4,  a5,  a6);
  uint64_t v15 = v14[2];
  if (v15)
  {
    uint64_t v16 = 0LL;
    uint64_t v17 = a2 - a1;
    if (v13 >= a2 - a1) {
      uint64_t v13 = a2 - a1;
    }
    uint64_t v18 = a2;
    uint64_t v19 = v14 + 8;
    while (v13 >= 1)
    {
      uint64_t v20 = *(v19 - 1);
      uint64_t v21 = *v19;
      BOOL v22 = __OFADD__(*v19, v20);
      uint64_t v23 = *v19 + v20;
      if (v22)
      {
        __break(1u);
LABEL_48:
        __break(1u);
LABEL_49:
        __break(1u);
LABEL_50:
        __break(1u);
LABEL_51:
        __break(1u);
LABEL_52:
        __break(1u);
LABEL_53:
        __break(1u);
LABEL_54:
        __break(1u);
LABEL_55:
        __break(1u);
        goto LABEL_56;
      }

      uint64_t v24 = *(v19 - 4);
      if (v23 < v24 || v24 < v21 || v23 < v21) {
        goto LABEL_48;
      }
      if (__OFSUB__(v24, v21)) {
        goto LABEL_49;
      }
      uint64_t v27 = *(v19 - 3);
      uint64_t v28 = *(v19 - 2);
      if (v28)
      {
        if (v27 < v21 || v23 < v27) {
          goto LABEL_52;
        }
        if (__OFSUB__(v27, v24)) {
          goto LABEL_53;
        }
        uint64_t v29 = (const void *)(v28 + v24 - v21);
        uint64_t v30 = v28 - v21 + v27;
        if (v17 < v16) {
          goto LABEL_50;
        }
      }

      else
      {
        if (v27 < v21 || v23 < v27) {
          goto LABEL_55;
        }
        uint64_t v30 = 0LL;
        uint64_t v29 = 0LL;
        if (v17 < v16) {
          goto LABEL_50;
        }
      }

      int64_t v31 = (void *)(a1 + v16);
      int64_t v32 = v30 - (void)v29;
      if (v13 < v32) {
        int64_t v32 = v13;
      }
      if (v29) {
        int64_t v33 = v32;
      }
      else {
        int64_t v33 = 0LL;
      }
      if (v29)
      {
        int64_t v34 = v32;
        memmove(v31, v29, v32);
        BOOL v22 = __OFADD__(v16, v34);
        v16 += v34;
        if (v22) {
          goto LABEL_54;
        }
        BOOL v22 = __OFSUB__(v13, v34);
        v13 -= v34;
        if (v22) {
          goto LABEL_51;
        }
      }

      v19 += 5;
      if (!--v15) {
        break;
      }
    }
  }

  else
  {
    uint64_t v16 = 0LL;
  }

  swift_bridgeObjectRelease();
  return v16;
}

uint64_t specialized DataProtocol.copyBytes<A>(to:from:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6)
{
  if (!a1)
  {
    __break(1u);
    JUMPOUT(0x183068DE8LL);
  }

  Data._Representation.subscript.getter(a3, a4, a5, a6);
  uint64_t v13 = v12;
  unint64_t v15 = v14;
  uint64_t v16 = specialized RandomAccessCollection<>.distance(from:to:)(a3, a4, a5, a6);
  uint64_t v17 = a2 - a1;
  if (v16 < a2 - a1) {
    uint64_t v17 = v16;
  }
  if (v17 >= 1) {
    __asm { BR              X10 }
  }

  outlined consume of Data._Representation(v13, v15);
  return 0LL;
}

{
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  if (!a1)
  {
    __break(1u);
    JUMPOUT(0x183069034LL);
  }

  Data._Representation.subscript.getter(a3, a4, a5, a6);
  uint64_t v13 = v12;
  unint64_t v15 = v14;
  uint64_t v16 = specialized RandomAccessCollection<>.distance(from:to:)(a3, a4, a5, a6);
  uint64_t v17 = a2 - a1;
  if (v16 < a2 - a1) {
    uint64_t v17 = v16;
  }
  if (v17 >= 1) {
    __asm { BR              X10 }
  }

  outlined consume of Data._Representation(v13, v15);
  return 0LL;
}

uint64_t specialized DataProtocol.copyBytes<A>(to:from:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  if (!a1)
  {
    __break(1u);
    JUMPOUT(0x1830692B0LL);
  }

  lazy protocol witness table accessor for type Data and conformance Data();
  dispatch thunk of RangeExpression.relative<A>(to:)();
  Data._Representation.subscript.getter(v16, v17, a4, a5);
  uint64_t v10 = v9;
  unint64_t v12 = v11;
  uint64_t v13 = specialized RandomAccessCollection<>.distance(from:to:)(v16, v17, a4, a5);
  uint64_t v14 = a2 - a1;
  if (v13 < a2 - a1) {
    uint64_t v14 = v13;
  }
  if (v14 >= 1) {
    __asm { BR              X10 }
  }

  outlined consume of Data._Representation(v10, v12);
  return 0LL;
}

uint64_t specialized DataProtocol.copyBytes<A>(to:from:)( uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  if (result)
  {
    uint64_t v7 = result;
    uint64_t v8 = a4 - a3;
    if (a4 - a3 >= a2 - result) {
      uint64_t v8 = a2 - result;
    }
    uint64_t v22 = v8;
    uint64_t v23 = 0LL;
    v21[0] = a3;
    v21[1] = a4;
    v21[2] = a5;
    void v21[3] = a6;
    uint64_t v19 = a4;
    uint64_t v20 = a3;
    uint64_t v18 = 0LL;
    MEMORY[0x1895F8858](result);
    v17[2] = &v18;
    v17[3] = v21;
    void v17[4] = &v20;
    void v17[5] = &v19;
    uint64_t result = (uint64_t)specialized Sequence.compactMap<A>(_:)( (void (*)(_OWORD *__return_ptr, void *))closure #1 in Slice<>.regions.getterspecialized partial apply,  (uint64_t)v17,  v9,  v10);
    uint64_t v11 = result;
    unint64_t v12 = *(void *)(result + 16);
    if (!v12)
    {
LABEL_15:
      swift_bridgeObjectRelease();
      return v23;
    }

    unint64_t v13 = 0LL;
    uint64_t v14 = (void *)(result + 48);
    while (v13 < v12)
    {
      if (v22 > 0)
      {
        ++v13;
        uint64_t v15 = *v14 ? *v14 + *(v14 - 1) : 0LL;
        uint64_t v16 = *v14 ? *v14 + *(v14 - 2) : 0LL;
        uint64_t result = closure #1 in DataProtocol.copyBytes<A>(to:from:)(v16, v15, v7, a2, &v23, &v22);
        unint64_t v12 = *(void *)(v11 + 16);
        v14 += 4;
        if (v13 != v12) {
          continue;
        }
      }

      goto LABEL_15;
    }

    __break(1u);
  }

  __break(1u);
  return result;
}

{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void v25[7];
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void v29[4];
  uint64_t v30;
  uint64_t v31;
  if (result)
  {
    uint64_t v11 = result;
    int64_t v31 = 0LL;
    unint64_t v12 = specialized RandomAccessCollection<>.distance(from:to:)(a3, a4, a5, a6);
    unint64_t v13 = a2 - v11;
    if (v12 < a2 - v11) {
      unint64_t v13 = v12;
    }
    v29[3] = a6;
    uint64_t v30 = v13;
    v29[0] = a3;
    v29[1] = a4;
    v29[2] = a5;
    uint64_t v27 = a4;
    uint64_t v28 = a3;
    uint64_t v26 = 0LL;
    MEMORY[0x1895F8858](v12);
    v25[2] = &v26;
    v25[3] = v29;
    _OWORD v25[4] = &v28;
    v25[5] = &v27;
    uint64_t result = (uint64_t)specialized Sequence.compactMap<A>(_:)( (void (*)(_OWORD *__return_ptr, void *))closure #1 in Slice<>.regions.getterspecialized partial apply,  (uint64_t)v25,  a5,  a6);
    uint64_t v14 = result;
    uint64_t v15 = *(void *)(result + 16);
    if (!v15)
    {
LABEL_22:
      swift_bridgeObjectRelease();
      return v31;
    }

    uint64_t v16 = 0LL;
    uint64_t v17 = (void *)(result + 56);
    while (v16 < v15)
    {
      if (v30 <= 0) {
        goto LABEL_22;
      }
      uint64_t v20 = *(v17 - 3);
      uint64_t v21 = *(v17 - 1);
      uint64_t v22 = *v17 - v21;
      if (v21) {
        uint64_t v23 = *v17 - v21;
      }
      else {
        uint64_t v23 = 0LL;
      }
      if (v20 < 0 || v23 < v20) {
        goto LABEL_24;
      }
      uint64_t v24 = *(v17 - 2);
      if (v21)
      {
        if (v22 < v24 || v24 < 0 || v22 < v20) {
          goto LABEL_25;
        }
        uint64_t v18 = v21 + v20;
        uint64_t v19 = v21 + v24;
      }

      else
      {
        if (v24 | v20) {
          goto LABEL_26;
        }
        uint64_t v19 = 0LL;
        uint64_t v18 = 0LL;
      }

      ++v16;
      uint64_t result = closure #1 in DataProtocol.copyBytes<A>(to:from:)(v18, v19, v11, a2, &v31, &v30);
      uint64_t v15 = *(void *)(v14 + 16);
      v17 += 4;
      if (v16 == v15) {
        goto LABEL_22;
      }
    }

    __break(1u);
LABEL_24:
    __break(1u);
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
  }

  __break(1u);
  return result;
}

uint64_t specialized DataProtocol.copyBytes<A>(to:from:)( uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v26 = a4;
  uint64_t v27 = a5;
  if (result)
  {
    uint64_t v8 = result;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UnsafeBufferPointer<UInt8>);
    lazy protocol witness table accessor for type [String] and conformance [A]( &lazy protocol witness table cache variable for type UnsafeBufferPointer<UInt8> and conformance UnsafeBufferPointer<A>,  &demangling cache variable for type metadata for UnsafeBufferPointer<UInt8>,  MEMORY[0x189617C80]);
    uint64_t v9 = dispatch thunk of RangeExpression.relative<A>(to:)();
    uint64_t v10 = v25 - v24;
    if (v25 - v24 >= a2 - v8) {
      uint64_t v10 = a2 - v8;
    }
    uint64_t v22 = v10;
    uint64_t v23 = 0LL;
    v21[0] = v24;
    v21[1] = v25;
    v21[2] = a4;
    void v21[3] = a5;
    uint64_t v19 = v25;
    uint64_t v20 = v24;
    uint64_t v18 = 0LL;
    MEMORY[0x1895F8858](v9);
    v17[2] = &v18;
    v17[3] = v21;
    void v17[4] = &v20;
    void v17[5] = &v19;
    uint64_t result = (uint64_t)specialized Sequence.compactMap<A>(_:)( (void (*)(_OWORD *__return_ptr, void *))partial apply for specialized closure #1 in Slice<>.regions.getter,  (uint64_t)v17,  a4,  a5);
    uint64_t v11 = result;
    unint64_t v12 = *(void *)(result + 16);
    if (!v12)
    {
LABEL_15:
      swift_bridgeObjectRelease();
      return v23;
    }

    unint64_t v13 = 0LL;
    uint64_t v14 = (void *)(result + 48);
    while (v13 < v12)
    {
      if (v22 >= 1)
      {
        ++v13;
        uint64_t v15 = *v14 ? *v14 + *(v14 - 1) : 0LL;
        uint64_t v16 = *v14 ? *v14 + *(v14 - 2) : 0LL;
        uint64_t result = closure #1 in DataProtocol.copyBytes<A>(to:from:)(v16, v15, v8, a2, &v23, &v22);
        unint64_t v12 = *(void *)(v11 + 16);
        v14 += 4;
        if (v13 != v12) {
          continue;
        }
      }

      goto LABEL_15;
    }

    __break(1u);
  }

  __break(1u);
  return result;
}

{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void v22[7];
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void v26[4];
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int64_t v31 = a4;
  int64_t v32 = a5;
  if (result)
  {
    uint64_t v8 = result;
    lazy protocol witness table accessor for type UnsafeRawBufferPointer and conformance UnsafeRawBufferPointer();
    dispatch thunk of RangeExpression.relative<A>(to:)();
    uint64_t v28 = 0LL;
    uint64_t v9 = specialized RandomAccessCollection<>.distance(from:to:)(v29, v30, a4, a5);
    uint64_t v10 = a2 - v8;
    if (v9 < a2 - v8) {
      uint64_t v10 = v9;
    }
    v26[3] = a5;
    uint64_t v27 = v10;
    v26[0] = v29;
    v26[1] = v30;
    v26[2] = a4;
    uint64_t v24 = v30;
    uint64_t v25 = v29;
    uint64_t v23 = 0LL;
    MEMORY[0x1895F8858](v9);
    v22[2] = &v23;
    v22[3] = v26;
    v22[4] = &v25;
    v22[5] = &v24;
    uint64_t result = (uint64_t)specialized Sequence.compactMap<A>(_:)( (void (*)(_OWORD *__return_ptr, void *))partial apply for specialized closure #1 in Slice<>.regions.getter,  (uint64_t)v22,  a4,  a5);
    uint64_t v11 = result;
    unint64_t v12 = *(void *)(result + 16);
    if (!v12)
    {
LABEL_22:
      swift_bridgeObjectRelease();
      return v28;
    }

    unint64_t v13 = 0LL;
    uint64_t v14 = (void *)(result + 56);
    while (v13 < v12)
    {
      if (v27 < 1) {
        goto LABEL_22;
      }
      uint64_t v17 = *(v14 - 3);
      uint64_t v18 = *(v14 - 1);
      uint64_t v19 = *v14 - v18;
      if (v18) {
        uint64_t v20 = *v14 - v18;
      }
      else {
        uint64_t v20 = 0LL;
      }
      if (v17 < 0 || v20 < v17) {
        goto LABEL_24;
      }
      uint64_t v21 = *(v14 - 2);
      if (v18)
      {
        if (v19 < v21 || v21 < 0 || v19 < v17) {
          goto LABEL_25;
        }
        uint64_t v15 = v18 + v17;
        uint64_t v16 = v18 + v21;
      }

      else
      {
        if (v21 | v17) {
          goto LABEL_26;
        }
        uint64_t v16 = 0LL;
        uint64_t v15 = 0LL;
      }

      ++v13;
      uint64_t result = closure #1 in DataProtocol.copyBytes<A>(to:from:)(v15, v16, v8, a2, &v28, &v27);
      unint64_t v12 = *(void *)(v11 + 16);
      v14 += 4;
      if (v13 == v12) {
        goto LABEL_22;
      }
    }

    __break(1u);
LABEL_24:
    __break(1u);
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
  }

  __break(1u);
  return result;
}

uint64_t specialized DataProtocol.copyBytes<A>(to:from:)(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v13 = a4;
  if (!result)
  {
    __break(1u);
    goto LABEL_13;
  }

  uint64_t v6 = result;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [UInt8]);
  lazy protocol witness table accessor for type [String] and conformance [A]( &lazy protocol witness table cache variable for type [UInt8] and conformance [A],  &demangling cache variable for type metadata for [UInt8],  MEMORY[0x189618488]);
  uint64_t result = dispatch thunk of RangeExpression.relative<A>(to:)();
  if ((v11 & 0x8000000000000000LL) != 0)
  {
LABEL_13:
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }

  unint64_t v7 = *(void *)(a4 + 16);
  if (v12 < 0)
  {
LABEL_15:
    __break(1u);
    return result;
  }

  uint64_t v8 = a2 - v6;
  uint64_t v9 = v8;
  uint64_t v10 = 0LL;
  if (v8 < 1) {
    return 0LL;
  }
  swift_bridgeObjectRetain_n();
  closure #1 in DataProtocol.copyBytes<A>(to:from:)(a4 + v11 + 32, a4 + 32 + v12, v6, a2, &v10, &v9);
  swift_bridgeObjectRelease_n();
  return v10;
}

{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v13 = a4;
  if (!result)
  {
    __break(1u);
    goto LABEL_13;
  }

  uint64_t v6 = result;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ContiguousArray<UInt8>);
  lazy protocol witness table accessor for type [String] and conformance [A]( &lazy protocol witness table cache variable for type ContiguousArray<UInt8> and conformance ContiguousArray<A>,  &demangling cache variable for type metadata for ContiguousArray<UInt8>,  MEMORY[0x189619590]);
  uint64_t result = dispatch thunk of RangeExpression.relative<A>(to:)();
  if ((v11 & 0x8000000000000000LL) != 0)
  {
LABEL_13:
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }

  unint64_t v7 = *(void *)(a4 + 16);
  if (v12 < 0)
  {
LABEL_15:
    __break(1u);
    return result;
  }

  uint64_t v8 = a2 - v6;
  uint64_t v9 = v8;
  uint64_t v10 = 0LL;
  if (v8 < 1) {
    return 0LL;
  }
  swift_retain_n();
  closure #1 in DataProtocol.copyBytes<A>(to:from:)(a4 + v11 + 32, a4 + 32 + v12, v6, a2, &v10, &v9);
  swift_release_n();
  return v10;
}

uint64_t specialized DataProtocol.copyBytes<A>(to:from:)( uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, unint64_t a8)
{
  if (!result)
  {
    __break(1u);
    goto LABEL_15;
  }

  if ((uint64_t)(a8 >> 1) < a3)
  {
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }

  if (a3 < a7)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }

  if ((uint64_t)(a8 >> 1) < a4)
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }

  if (a4 < a7)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }

  if (a4 < 0)
  {
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }

  uint64_t v14 = 0LL;
  if (__OFSUB__(a4, a3))
  {
LABEL_20:
    __break(1u);
    return result;
  }

  uint64_t v9 = result;
  uint64_t v10 = a2 - result;
  if (a4 - a3 < a2 - result) {
    uint64_t v10 = a4 - a3;
  }
  uint64_t v13 = v10;
  if (v10 < 1) {
    return 0LL;
  }
  uint64_t v11 = a6 + a3;
  uint64_t v12 = a6 + a4;
  swift_unknownObjectRetain_n();
  closure #1 in DataProtocol.copyBytes<A>(to:from:)(v11, v12, v9, a2, &v14, &v13);
  swift_unknownObjectRelease_n();
  return v14;
}

uint64_t specialized DataProtocol.copyBytes<A>(to:from:)( uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, unint64_t a7)
{
  uint64_t v17 = a4;
  uint64_t v18 = a5;
  uint64_t v19 = a6;
  unint64_t v20 = a7;
  if (!result)
  {
    __break(1u);
    goto LABEL_15;
  }

  uint64_t v10 = result;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for ArraySlice<UInt8>);
  lazy protocol witness table accessor for type [String] and conformance [A]( &lazy protocol witness table cache variable for type ArraySlice<UInt8> and conformance ArraySlice<A>,  (uint64_t *)&demangling cache variable for type metadata for ArraySlice<UInt8>,  MEMORY[0x189618FA0]);
  uint64_t result = dispatch thunk of RangeExpression.relative<A>(to:)();
  if (v15 < a6)
  {
LABEL_15:
    __break(1u);
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }

  if (v16 < a6)
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }

  if (v16 < 0)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }

  uint64_t v14 = 0LL;
  if (__OFSUB__(v16, v15))
  {
LABEL_19:
    __break(1u);
    return result;
  }

  uint64_t v11 = a2 - v10;
  if (v16 - v15 < a2 - v10) {
    uint64_t v11 = v16 - v15;
  }
  uint64_t v13 = v11;
  if (v11 < 1) {
    return 0LL;
  }
  swift_unknownObjectRetain_n();
  closure #1 in DataProtocol.copyBytes<A>(to:from:)(a5 + v15, a5 + v16, v10, a2, &v14, &v13);
  swift_unknownObjectRelease_n();
  return v14;
}

uint64_t specialized DataProtocol.copyBytes<A>(to:from:)( uint64_t result, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, void (*a6)(uint64_t, uint64_t), void (*a7)(uint64_t, uint64_t))
{
  if (!result)
  {
    __break(1u);
    goto LABEL_15;
  }

  if ((a3 & 0x8000000000000000LL) != 0)
  {
LABEL_15:
    __break(1u);
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }

  unint64_t v8 = *(void *)(a5 + 16);
  if (a4 < 0)
  {
LABEL_17:
    __break(1u);
    return result;
  }

  uint64_t v11 = result;
  uint64_t v12 = a2 - result;
  uint64_t v16 = v12;
  uint64_t v17 = 0LL;
  if (v12 < 1) {
    return 0LL;
  }
  uint64_t v14 = a5 + a3 + 32;
  uint64_t v15 = a5 + 32 + a4;
  a6(a5, 2LL);
  closure #1 in DataProtocol.copyBytes<A>(to:from:)(v14, v15, v11, a2, &v17, &v16);
  a7(a5, 2LL);
  return v17;
}

uint64_t specialized DataProtocol.copyBytes<A>(to:from:)(uint64_t result)
{
  if (result)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for EmptyCollection<UInt8>);
    lazy protocol witness table accessor for type [String] and conformance [A]( &lazy protocol witness table cache variable for type EmptyCollection<UInt8> and conformance EmptyCollection<A>,  &demangling cache variable for type metadata for EmptyCollection<UInt8>,  MEMORY[0x1896195D0]);
    dispatch thunk of RangeExpression.relative<A>(to:)();
    return 0LL;
  }

  else
  {
    __break(1u);
  }

  return result;
}

uint64_t specialized DataProtocol.copyBytes<A>(to:from:)( uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, char a6)
{
  if (!a1)
  {
    __break(1u);
    goto LABEL_14;
  }

  if (a5 < 0)
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }

  if ((a3 & 0x8000000000000000LL) != 0)
  {
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }

  if (a5 < a4)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }

  if (a4 < 0 || a5 < a3)
  {
LABEL_17:
    __break(1u);
    JUMPOUT(0x18306A2E0LL);
  }

  uint64_t v6 = a4 - a3;
  uint64_t v9 = v6;
  unint64_t v7 = specialized Slice<>.regions.getter(a3, a4, a5, a6);
  if (v7[2] && v9 > 0) {
    __asm { BR              X9 }
  }

  swift_bridgeObjectRelease();
  return 0LL;
}

uint64_t specialized DataProtocol.copyBytes<A>(to:from:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  if (!a1)
  {
    __break(1u);
    goto LABEL_14;
  }

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Repeated<UInt8>);
  lazy protocol witness table accessor for type [String] and conformance [A]( &lazy protocol witness table cache variable for type Repeated<UInt8> and conformance Repeated<A>,  &demangling cache variable for type metadata for Repeated<UInt8>,  MEMORY[0x18961AF30]);
  dispatch thunk of RangeExpression.relative<A>(to:)();
  if (a4 < 0)
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }

  if ((v13 & 0x8000000000000000LL) != 0)
  {
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }

  if (v14 > a4)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }

  if (v13 > a4 || v14 < 0)
  {
LABEL_17:
    __break(1u);
    JUMPOUT(0x18306A6F4LL);
  }

  uint64_t v8 = v14 - v13;
  uint64_t v12 = v8;
  uint64_t v9 = specialized Slice<>.regions.getter(v13, v14, a4, a5);
  if (v9[2] && v12 >= 1) {
    __asm { BR              X9 }
  }

  swift_bridgeObjectRelease();
  return 0LL;
}

uint64_t DataProtocol.copyBytes<A>(to:from:)( uint64_t a1, uint64_t a2, char *a3, uint64_t a4, unsigned int (*a5)(char *, uint64_t, uint64_t), uint64_t a6, uint64_t a7)
{
  uint64_t v50 = a5;
  uint64_t v51 = a7;
  uint64_t v53 = a2;
  uint64_t v55 = a1;
  unint64_t v7 = *(char **)(a6 + 8);
  uint64_t v45 = a3;
  uint64_t v46 = v7;
  swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  swift_getAssociatedTypeWitness();
  uint64_t v52 = AssociatedConformanceWitness;
  uint64_t v9 = *(void *)(*(void *)(swift_getAssociatedConformanceWitness() + 8) + 8LL);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v40 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1895F8858](AssociatedTypeWitness);
  uint64_t v12 = (char *)&v38 - v11;
  uint64_t v13 = type metadata accessor for Optional();
  MEMORY[0x1895F8858](v13);
  uint64_t v15 = (char *)&v38 - v14;
  uint64_t v16 = swift_checkMetadataState();
  MEMORY[0x1895F8858](v16);
  uint64_t v41 = (char *)&v38 - v17;
  uint64_t v43 = v18;
  uint64_t v44 = v9;
  uint64_t v19 = swift_getAssociatedTypeWitness();
  uint64_t v20 = *(void *)(v19 - 8);
  MEMORY[0x1895F8858](v19);
  uint64_t v42 = (char *)&v38 - v21;
  uint64_t v54 = swift_checkMetadataState();
  uint64_t v47 = *(void *)(v54 - 8);
  MEMORY[0x1895F8858](v54);
  uint64_t v23 = (char *)&v38 - v22;
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t v24 = type metadata accessor for Range();
  uint64_t result = MEMORY[0x1895F8858](v24);
  uint64_t v28 = (char *)&v38 - v27;
  if (v55)
  {
    uint64_t v38 = v26;
    uint64_t v39 = v20;
    uint64_t v48 = result;
    dispatch thunk of RangeExpression.relative<A>(to:)();
    dispatch thunk of Collection.subscript.getter();
    uint64_t v57 = 0LL;
    uint64_t v45 = v28;
    uint64_t v29 = dispatch thunk of RandomAccessCollection.distance(from:to:)();
    uint64_t v30 = v53 - v55;
    if (v29 < v53 - v55) {
      uint64_t v30 = v29;
    }
    uint64_t v56 = v30;
    int64_t v31 = *(void (**)(uint64_t))(v52 + 64);
    uint64_t v46 = v23;
    v31(v54);
    int64_t v32 = v42;
    dispatch thunk of Sequence.makeIterator()();
    uint64_t v51 = swift_getAssociatedConformanceWitness();
    dispatch thunk of IteratorProtocol.next()();
    uint64_t v33 = v40;
    uint64_t v50 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v40 + 48);
    if (v50(v15, 1LL, AssociatedTypeWitness) != 1)
    {
      uint64_t v49 = *(uint64_t (**)(char *, char *, uint64_t))(v33 + 32);
      uint64_t v34 = MEMORY[0x18961AFC8] + 8LL;
      while (1)
      {
        uint64_t v35 = v49(v12, v15, AssociatedTypeWitness);
        if (v56 < 1) {
          break;
        }
        MEMORY[0x1895F8858](v35);
        uint64_t v36 = v53;
        *(&v38 - 4) = v55;
        *(&v38 - 3) = v36;
        *(&v38 - 2) = (uint64_t)&v57;
        *(&v38 - 1) = (uint64_t)&v56;
        uint64_t v37 = swift_getAssociatedConformanceWitness();
        (*(void (**)(uint64_t (*)(uint64_t, uint64_t), uint64_t *, uint64_t, uint64_t, uint64_t))(v37 + 8))( partial apply for closure #1 in DataProtocol.copyBytes<A>(to:from:),  &v38 - 6,  v34,  AssociatedTypeWitness,  v37);
        (*(void (**)(char *, uint64_t))(v33 + 8))(v12, AssociatedTypeWitness);
        dispatch thunk of IteratorProtocol.next()();
        if (v50(v15, 1LL, AssociatedTypeWitness) == 1) {
          goto LABEL_10;
        }
      }

      (*(void (**)(char *, uint64_t))(v33 + 8))(v12, AssociatedTypeWitness);
    }

uint64_t DataProtocol.copyBytes<A, B>(to:from:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return DataProtocol.copyBytes<A, B>(to:from:)(a1, a2, a3, a7, a4, a5, a8, a6);
}

uint64_t specialized DataProtocol.copyBytes<A, B>(to:from:)( uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (!result)
  {
    uint64_t v5 = 0LL;
    return specialized DataProtocol.copyBytes<A>(to:from:)(result, v5);
  }

  uint64_t v4 = *(void *)(*(void *)(a4 - 8) + 72LL);
  if ((unsigned __int128)(a2 * (__int128)v4) >> 64 == (a2 * v4) >> 63)
  {
    uint64_t v5 = result + a2 * v4;
    return specialized DataProtocol.copyBytes<A>(to:from:)(result, v5);
  }

  __break(1u);
  return result;
}

uint64_t specialized DataProtocol.copyBytes<A, B>(to:from:)( uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  if (!result)
  {
    uint64_t v8 = 0LL;
    return specialized DataProtocol.copyBytes<A>(to:from:)(result, v8, a3, a4, a5, a6);
  }

  uint64_t v7 = *(void *)(*(void *)(a7 - 8) + 72LL);
  if ((unsigned __int128)(a2 * (__int128)v7) >> 64 == (a2 * v7) >> 63)
  {
    uint64_t v8 = result + a2 * v7;
    return specialized DataProtocol.copyBytes<A>(to:from:)(result, v8, a3, a4, a5, a6);
  }

  __break(1u);
  return result;
}

uint64_t specialized DataProtocol.copyBytes<A, B>(to:from:)( uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t (*a9)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))
{
  if (!result)
  {
    uint64_t v10 = 0LL;
    return a9(result, v10, a3, a4, a5, a7, a8);
  }

  uint64_t v9 = *(void *)(*(void *)(a6 - 8) + 72LL);
  if ((unsigned __int128)(a2 * (__int128)v9) >> 64 == (a2 * v9) >> 63)
  {
    uint64_t v10 = result + a2 * v9;
    return a9(result, v10, a3, a4, a5, a7, a8);
  }

  __break(1u);
  return result;
}

uint64_t specialized DataProtocol.copyBytes<A, B>(to:from:)( uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, unint64_t a7, uint64_t a8)
{
  if (!result)
  {
    uint64_t v9 = 0LL;
    return specialized DataProtocol.copyBytes<A>(to:from:)(result, v9, a3, a4, a5, a6, a7);
  }

  uint64_t v8 = *(void *)(*(void *)(a8 - 8) + 72LL);
  if ((unsigned __int128)(a2 * (__int128)v8) >> 64 == (a2 * v8) >> 63)
  {
    uint64_t v9 = result + a2 * v8;
    return specialized DataProtocol.copyBytes<A>(to:from:)(result, v9, a3, a4, a5, a6, a7);
  }

  __break(1u);
  return result;
}

uint64_t specialized DataProtocol.copyBytes<A, B>(to:from:)( uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t (*a8)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))
{
  if (!result)
  {
    uint64_t v9 = 0LL;
    return a8(result, v9, a3, a4, a6, a7);
  }

  uint64_t v8 = *(void *)(*(void *)(a5 - 8) + 72LL);
  if ((unsigned __int128)(a2 * (__int128)v8) >> 64 == (a2 * v8) >> 63)
  {
    uint64_t v9 = result + a2 * v8;
    return a8(result, v9, a3, a4, a6, a7);
  }

  __break(1u);
  return result;
}

uint64_t specialized DataProtocol.copyBytes<A, B>(to:from:)(uint64_t result)
{
  if (result)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for EmptyCollection<UInt8>);
    lazy protocol witness table accessor for type [String] and conformance [A]( &lazy protocol witness table cache variable for type EmptyCollection<UInt8> and conformance EmptyCollection<A>,  &demangling cache variable for type metadata for EmptyCollection<UInt8>,  MEMORY[0x1896195D0]);
    dispatch thunk of RangeExpression.relative<A>(to:)();
    return 0LL;
  }

  else
  {
    __break(1u);
  }

  return result;
}

uint64_t specialized DataProtocol.copyBytes<A, B>(to:from:)( uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, char a5, uint64_t a6)
{
  if (!result)
  {
    uint64_t v7 = 0LL;
    return specialized DataProtocol.copyBytes<A>(to:from:)(result, v7, a3, a4, a5);
  }

  uint64_t v6 = *(void *)(*(void *)(a6 - 8) + 72LL);
  if ((unsigned __int128)(a2 * (__int128)v6) >> 64 == (a2 * v6) >> 63)
  {
    uint64_t v7 = result + a2 * v6;
    return specialized DataProtocol.copyBytes<A>(to:from:)(result, v7, a3, a4, a5);
  }

  __break(1u);
  return result;
}

uint64_t DataProtocol.copyBytes<A, B>(to:from:)( uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!result)
  {
    uint64_t v9 = 0LL;
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(a7 + 104))( result,  v9,  a3,  a6,  a8,  a4);
  }

  uint64_t v8 = *(void *)(*(void *)(a5 - 8) + 72LL);
  if ((unsigned __int128)(a2 * (__int128)v8) >> 64 == (a2 * v8) >> 63)
  {
    uint64_t v9 = result + a2 * v8;
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(a7 + 104))( result,  v9,  a3,  a6,  a8,  a4);
  }

  __break(1u);
  return result;
}

uint64_t MutableDataProtocol.resetBytes<A>(in:)()
{
  return MutableDataProtocol.resetBytes<A>(in:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t result;
  uint64_t v5;
  char v6;
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t v0 = type metadata accessor for Range();
  __int16 v1 = *(void *)(v0 - 8);
  MEMORY[0x1895F8858](v0);
  unint64_t v3 = (char *)&v5 - v2;
  dispatch thunk of RangeExpression.relative<A>(to:)();
  uint64_t result = dispatch thunk of RandomAccessCollection.distance(from:to:)();
  if (result < 0)
  {
    __break(1u);
  }

  else
  {
    uint64_t v5 = result;
    uint64_t v6 = 0;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Repeated<UInt8>);
    lazy protocol witness table accessor for type [String] and conformance [A]( &lazy protocol witness table cache variable for type Repeated<UInt8> and conformance Repeated<A>,  &demangling cache variable for type metadata for Repeated<UInt8>,  MEMORY[0x18961AF30]);
    dispatch thunk of RangeReplaceableCollection.replaceSubrange<A>(_:with:)();
    return (*(uint64_t (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  }

  return result;
}

uint64_t specialized MutableDataProtocol.resetBytes<A>(in:)()
{
  uint64_t result = specialized RandomAccessCollection<>.distance(from:to:)(v2, v3, *(void *)v0, *(void *)(v0 + 8));
  if ((result & 0x8000000000000000LL) == 0) {
    return specialized Data.replaceSubrange<A>(_:with:)(v2, v3, result, 0);
  }
  __break(1u);
  return result;
}

uint64_t specialized MutableDataProtocol.resetBytes<A>(in:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, unint64_t *a5, uint64_t a6, uint64_t (*a7)(void))
{
  uint64_t result = v12;
  if (__OFSUB__(v13, v12))
  {
    __break(1u);
  }

  else if (((v13 - v12) & 0x8000000000000000LL) == 0)
  {
    return a7();
  }

  __break(1u);
  return result;
}

uint64_t DataProtocol.firstRange<A>(of:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v51 = a3;
  uint64_t v52 = a5;
  uint64_t v49 = a6;
  uint64_t v50 = a1;
  uint64_t v55 = a4;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v9 = MEMORY[0x1895F8858](TupleTypeMetadata2);
  uint64_t v44 = (char *)&v42 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = MEMORY[0x1895F8858](v9);
  uint64_t v13 = (char *)&v42 - v12;
  uint64_t v45 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v14 = MEMORY[0x1895F8858](v11);
  uint64_t v16 = (char *)&v42 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v14);
  uint64_t v18 = (char *)&v42 - v17;
  swift_getAssociatedConformanceWitness();
  uint64_t v19 = type metadata accessor for Range();
  uint64_t v48 = *(void *)(v19 - 8);
  uint64_t v20 = MEMORY[0x1895F8858](v19);
  uint64_t v22 = (char *)&v42 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v20);
  uint64_t v46 = (char *)&v42 - v23;
  dispatch thunk of Collection.startIndex.getter();
  uint64_t v53 = a2;
  uint64_t v54 = v6;
  dispatch thunk of Collection.endIndex.getter();
  uint64_t result = dispatch thunk of static Comparable.<= infix(_:_:)();
  if ((result & 1) != 0)
  {
    uint64_t v25 = TupleTypeMetadata2;
    uint64_t v26 = &v13[*(int *)(TupleTypeMetadata2 + 48)];
    uint64_t v43 = v19;
    uint64_t v27 = v22;
    uint64_t v28 = v13;
    uint64_t v29 = v45;
    uint64_t v30 = *(void (**)(char *, char *, uint64_t))(v45 + 32);
    v30(v28, v18, AssociatedTypeWitness);
    v30(v26, v16, AssociatedTypeWitness);
    int64_t v31 = v44;
    int64_t v32 = &v44[*(int *)(v25 + 48)];
    uint64_t v33 = *(void (**)(char *, char *, uint64_t))(v29 + 16);
    v33(v44, v28, AssociatedTypeWitness);
    v33(v32, v26, AssociatedTypeWitness);
    v30(v27, v31, AssociatedTypeWitness);
    uint64_t v34 = *(void (**)(char *, uint64_t))(v29 + 8);
    v34(v32, AssociatedTypeWitness);
    uint64_t v35 = &v31[*(int *)(v25 + 48)];
    v30(v31, v28, AssociatedTypeWitness);
    v30(v35, v26, AssociatedTypeWitness);
    uint64_t v36 = v43;
    v30(&v27[*(int *)(v43 + 36)], v35, AssociatedTypeWitness);
    v34(v31, AssociatedTypeWitness);
    uint64_t v37 = v48;
    uint64_t v38 = v46;
    (*(void (**)(char *, char *, uint64_t))(v48 + 32))(v46, v27, v36);
    uint64_t v39 = v55;
    uint64_t v40 = *(void (**)(uint64_t, char *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v55 + 72);
    uint64_t v41 = MEMORY[0x186E20D4C](MEMORY[0x189618A48], v36);
    v40(v50, v38, v51, v36, v52, v41, v53, v39);
    return (*(uint64_t (**)(char *, uint64_t))(v37 + 8))(v38, v36);
  }

  else
  {
    __break(1u);
  }

  return result;
}

uint64_t DataProtocol.lastRange<A>(of:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v51 = a3;
  uint64_t v52 = a5;
  uint64_t v49 = a6;
  uint64_t v50 = a1;
  uint64_t v55 = a4;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v9 = MEMORY[0x1895F8858](TupleTypeMetadata2);
  uint64_t v44 = (char *)&v42 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = MEMORY[0x1895F8858](v9);
  uint64_t v13 = (char *)&v42 - v12;
  uint64_t v45 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v14 = MEMORY[0x1895F8858](v11);
  uint64_t v16 = (char *)&v42 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v14);
  uint64_t v18 = (char *)&v42 - v17;
  swift_getAssociatedConformanceWitness();
  uint64_t v19 = type metadata accessor for Range();
  uint64_t v48 = *(void *)(v19 - 8);
  uint64_t v20 = MEMORY[0x1895F8858](v19);
  uint64_t v22 = (char *)&v42 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v20);
  uint64_t v46 = (char *)&v42 - v23;
  dispatch thunk of Collection.startIndex.getter();
  uint64_t v53 = a2;
  uint64_t v54 = v6;
  dispatch thunk of Collection.endIndex.getter();
  uint64_t result = dispatch thunk of static Comparable.<= infix(_:_:)();
  if ((result & 1) != 0)
  {
    uint64_t v25 = TupleTypeMetadata2;
    uint64_t v26 = &v13[*(int *)(TupleTypeMetadata2 + 48)];
    uint64_t v43 = v19;
    uint64_t v27 = v22;
    uint64_t v28 = v13;
    uint64_t v29 = v45;
    uint64_t v30 = *(void (**)(char *, char *, uint64_t))(v45 + 32);
    v30(v28, v18, AssociatedTypeWitness);
    v30(v26, v16, AssociatedTypeWitness);
    int64_t v31 = v44;
    int64_t v32 = &v44[*(int *)(v25 + 48)];
    uint64_t v33 = *(void (**)(char *, char *, uint64_t))(v29 + 16);
    v33(v44, v28, AssociatedTypeWitness);
    v33(v32, v26, AssociatedTypeWitness);
    v30(v27, v31, AssociatedTypeWitness);
    uint64_t v34 = *(void (**)(char *, uint64_t))(v29 + 8);
    v34(v32, AssociatedTypeWitness);
    uint64_t v35 = &v31[*(int *)(v25 + 48)];
    v30(v31, v28, AssociatedTypeWitness);
    v30(v35, v26, AssociatedTypeWitness);
    uint64_t v36 = v43;
    v30(&v27[*(int *)(v43 + 36)], v35, AssociatedTypeWitness);
    v34(v31, AssociatedTypeWitness);
    uint64_t v37 = v48;
    uint64_t v38 = v46;
    (*(void (**)(char *, char *, uint64_t))(v48 + 32))(v46, v27, v36);
    uint64_t v39 = v55;
    uint64_t v40 = *(void (**)(uint64_t, char *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v55 + 80);
    uint64_t v41 = MEMORY[0x186E20D4C](MEMORY[0x189618A48], v36);
    v40(v50, v38, v51, v36, v52, v41, v53, v39);
    return (*(uint64_t (**)(char *, uint64_t))(v37 + 8))(v38, v36);
  }

  else
  {
    __break(1u);
  }

  return result;
}

uint64_t DataProtocol.copyBytes(to:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v46 = a1;
  uint64_t v47 = a2;
  uint64_t v50 = a4;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v7 = MEMORY[0x1895F8858](TupleTypeMetadata2);
  uint64_t v9 = (char *)&v39 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = MEMORY[0x1895F8858](v7);
  uint64_t v12 = (char *)&v39 - v11;
  uint64_t v42 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v13 = MEMORY[0x1895F8858](v10);
  uint64_t v15 = (char *)&v39 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v13);
  uint64_t v17 = (char *)&v39 - v16;
  swift_getAssociatedConformanceWitness();
  uint64_t v18 = type metadata accessor for Range();
  uint64_t v44 = *(void *)(v18 - 8);
  uint64_t v19 = MEMORY[0x1895F8858](v18);
  uint64_t v41 = (char *)&v39 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v19);
  uint64_t v43 = (char *)&v39 - v21;
  dispatch thunk of Collection.startIndex.getter();
  uint64_t v48 = a3;
  uint64_t v49 = v4;
  dispatch thunk of Collection.endIndex.getter();
  uint64_t result = dispatch thunk of static Comparable.<= infix(_:_:)();
  if ((result & 1) != 0)
  {
    uint64_t v23 = TupleTypeMetadata2;
    uint64_t v24 = &v12[*(int *)(TupleTypeMetadata2 + 48)];
    uint64_t v40 = v18;
    uint64_t v25 = v42;
    uint64_t v26 = *(void (**)(char *, char *, uint64_t))(v42 + 32);
    v26(v12, v17, AssociatedTypeWitness);
    v26(v24, v15, AssociatedTypeWitness);
    uint64_t v27 = &v9[*(int *)(v23 + 48)];
    uint64_t v28 = *(void (**)(char *, char *, uint64_t))(v25 + 16);
    v28(v9, v12, AssociatedTypeWitness);
    v28(v27, v24, AssociatedTypeWitness);
    uint64_t v29 = v41;
    v26(v41, v9, AssociatedTypeWitness);
    uint64_t v30 = *(void (**)(char *, uint64_t))(v25 + 8);
    v30(v27, AssociatedTypeWitness);
    int64_t v31 = &v9[*(int *)(v23 + 48)];
    v26(v9, v12, AssociatedTypeWitness);
    v26(v31, v24, AssociatedTypeWitness);
    uint64_t v32 = v40;
    v26(&v29[*(int *)(v40 + 36)], v31, AssociatedTypeWitness);
    v30(v9, AssociatedTypeWitness);
    uint64_t v34 = v43;
    uint64_t v33 = v44;
    (*(void (**)(char *, char *, uint64_t))(v44 + 32))(v43, v29, v32);
    uint64_t v35 = v50;
    uint64_t v36 = *(uint64_t (**)(uint64_t, uint64_t, char *, uint64_t, uint64_t, uint64_t, uint64_t))(v50 + 104);
    uint64_t v37 = MEMORY[0x186E20D4C](MEMORY[0x189618A48], v32);
    uint64_t v38 = v36(v46, v47, v34, v32, v37, v48, v35);
    (*(void (**)(char *, uint64_t))(v33 + 8))(v34, v32);
    return v38;
  }

  else
  {
    __break(1u);
  }

  return result;
}

uint64_t DataProtocol.copyBytes<A>(to:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v48 = a2;
  uint64_t v49 = a4;
  uint64_t v47 = a1;
  uint64_t v52 = a5;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v8 = MEMORY[0x1895F8858](TupleTypeMetadata2);
  uint64_t v10 = (char *)&v41 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = MEMORY[0x1895F8858](v8);
  uint64_t v13 = (char *)&v41 - v12;
  uint64_t v43 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v14 = MEMORY[0x1895F8858](v11);
  uint64_t v16 = (char *)&v41 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v14);
  uint64_t v18 = (char *)&v41 - v17;
  swift_getAssociatedConformanceWitness();
  uint64_t v19 = type metadata accessor for Range();
  uint64_t v46 = *(void *)(v19 - 8);
  uint64_t v20 = MEMORY[0x1895F8858](v19);
  uint64_t v42 = (char *)&v41 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v20);
  uint64_t v44 = (char *)&v41 - v22;
  dispatch thunk of Collection.startIndex.getter();
  uint64_t v50 = a3;
  uint64_t v51 = v5;
  dispatch thunk of Collection.endIndex.getter();
  uint64_t result = dispatch thunk of static Comparable.<= infix(_:_:)();
  if ((result & 1) != 0)
  {
    uint64_t v24 = TupleTypeMetadata2;
    uint64_t v25 = &v13[*(int *)(TupleTypeMetadata2 + 48)];
    uint64_t v41 = v19;
    uint64_t v26 = v10;
    uint64_t v27 = v43;
    uint64_t v28 = *(void (**)(char *, char *, uint64_t))(v43 + 32);
    v28(v13, v18, AssociatedTypeWitness);
    v28(v25, v16, AssociatedTypeWitness);
    uint64_t v29 = &v26[*(int *)(v24 + 48)];
    uint64_t v30 = *(void (**)(char *, char *, uint64_t))(v27 + 16);
    v30(v26, v13, AssociatedTypeWitness);
    v30(v29, v25, AssociatedTypeWitness);
    int64_t v31 = v42;
    v28(v42, v26, AssociatedTypeWitness);
    uint64_t v32 = *(void (**)(char *, uint64_t))(v27 + 8);
    v32(v29, AssociatedTypeWitness);
    uint64_t v33 = &v26[*(int *)(v24 + 48)];
    v28(v26, v13, AssociatedTypeWitness);
    v28(v33, v25, AssociatedTypeWitness);
    uint64_t v34 = v41;
    v28(&v31[*(int *)(v41 + 36)], v33, AssociatedTypeWitness);
    v32(v26, AssociatedTypeWitness);
    uint64_t v35 = v46;
    uint64_t v36 = v44;
    (*(void (**)(char *, char *, uint64_t))(v46 + 32))(v44, v31, v34);
    uint64_t v37 = v52;
    uint64_t v38 = *(uint64_t (**)(uint64_t, uint64_t, char *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v52 + 112);
    uint64_t v39 = MEMORY[0x186E20D4C](MEMORY[0x189618A48], v34);
    uint64_t v40 = v38(v47, v48, v36, v49, v34, v39, v50, v37);
    (*(void (**)(char *, uint64_t))(v35 + 8))(v36, v34);
    return v40;
  }

  else
  {
    __break(1u);
  }

  return result;
}

uint64_t closure #1 in DataProtocol.copyBytes<A>(to:from:)( uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5, void *a6)
{
  uint64_t v8 = result;
  uint64_t v9 = *a5;
  if (a3)
  {
    if (a4 - a3 < v9)
    {
LABEL_17:
      __break(1u);
      goto LABEL_18;
    }

    if (result) {
      goto LABEL_4;
    }
    goto LABEL_9;
  }

  if (v9 <= 0)
  {
    if (result)
    {
LABEL_4:
      uint64_t v10 = a2 - result;
      if (*a6 < a2 - result) {
        uint64_t v10 = *a6;
      }
      uint64_t v11 = result + v10;
      goto LABEL_10;
    }

uint64_t specialized DataProtocol.matches<A>(_:from:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = *(void *)(*(void *)(*(void *)(a4 + 8) + 8LL) + 8LL);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v34 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v35 = AssociatedTypeWitness;
  uint64_t v9 = MEMORY[0x1895F8858](AssociatedTypeWitness);
  uint64_t v32 = (char *)v31 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = MEMORY[0x1895F8858](v9);
  uint64_t v33 = (char *)v31 - v12;
  MEMORY[0x1895F8858](v11);
  uint64_t v14 = (char *)v31 - v13;
  uint64_t v41 = a2;
  uint64_t v36 = a1;
  uint64_t v37 = v7;
  uint64_t v38 = a3;
  dispatch thunk of Collection.startIndex.getter();
  uint64_t v15 = type metadata accessor for DispatchData();
  v31[0] = lazy protocol witness table accessor for type DispatchData and conformance DispatchData( (unint64_t *)&lazy protocol witness table cache variable for type DispatchData and conformance DispatchData,  MEMORY[0x18961B770]);
  v31[1] = v15;
  uint64_t v16 = v33;
  while (1)
  {
    uint64_t v17 = (void (*)(void *, void))dispatch thunk of Collection.subscript.read();
    int v19 = *v18;
    v17(v40, 0LL);
    uint64_t v20 = (void (*)(void *, void))dispatch thunk of Collection.subscript.read();
    int v22 = *v21;
    v20(v40, 0LL);
    if (v19 != v22) {
      break;
    }
    uint64_t v39 = v41;
    dispatch thunk of Collection.index(after:)();
    uint64_t v41 = v40[0];
    uint64_t v24 = v34;
    uint64_t v23 = v35;
    uint64_t v25 = *(void (**)(char *, char *, uint64_t))(v34 + 16);
    uint64_t v26 = v32;
    v25(v32, v14, v35);
    dispatch thunk of Collection.index(after:)();
    uint64_t v27 = *(void (**)(char *, uint64_t))(v24 + 8);
    v27(v26, v23);
    v27(v14, v23);
    (*(void (**)(char *, char *, uint64_t))(v24 + 32))(v14, v16, v23);
    v25(v16, v14, v23);
    dispatch thunk of Collection.endIndex.getter();
    swift_getAssociatedConformanceWitness();
    char v28 = dispatch thunk of static Equatable.== infix(_:_:)();
    v27(v26, v23);
    v27(v16, v23);
    if ((v28 & 1) == 0)
    {
      uint64_t v29 = v41;
      dispatch thunk of Collection.endIndex.getter();
      if (v29 != v40[0]) {
        continue;
      }
    }

    goto LABEL_7;
  }

  char v28 = 0;
  uint64_t v27 = *(void (**)(char *, uint64_t))(v34 + 8);
LABEL_7:
  v27(v14, v35);
  return v28 & 1;
}

uint64_t specialized DataProtocol.matches<A>(_:from:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v42 = a3;
  uint64_t v12 = *(void *)(*(void *)(*(void *)(a7 + 8) + 8LL) + 8LL);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v41 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v13 = MEMORY[0x1895F8858](AssociatedTypeWitness);
  uint64_t v39 = (char *)&v34 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = MEMORY[0x1895F8858](v13);
  uint64_t v38 = (char *)&v34 - v16;
  MEMORY[0x1895F8858](v15);
  uint64_t v47 = a6;
  uint64_t v48 = (char *)&v34 - v17;
  uint64_t v45 = v12;
  uint64_t v46 = a1;
  uint64_t result = dispatch thunk of Collection.startIndex.getter();
  uint64_t v19 = a5 + a4;
  if (!__OFADD__(a5, a4))
  {
    if (a2 <= v19) {
      uint64_t v20 = a5 + a4;
    }
    else {
      uint64_t v20 = a2;
    }
    uint64_t v40 = v20;
    uint64_t v34 = a5 + a4 - 1;
    uint64_t v35 = a5 + a4;
    uint64_t v21 = a2;
    uint64_t v36 = a5;
    uint64_t v37 = a2;
    uint64_t v22 = v41;
    uint64_t v23 = v48;
    uint64_t v24 = v38;
    while (a2 >= a5 && v19 >= v21)
    {
      if (__OFSUB__(v21, a5)) {
        goto LABEL_18;
      }
      int v25 = *(unsigned __int8 *)(v42 + v21 - a5);
      uint64_t v26 = (uint64_t (*)(char *, void))dispatch thunk of Collection.subscript.read();
      int v28 = *v27;
      uint64_t result = v26(v49, 0LL);
      if (v25 != v28)
      {
        char v32 = 0;
        int64_t v31 = *(void (**)(char *, uint64_t))(v41 + 8);
LABEL_16:
        v31(v48, AssociatedTypeWitness);
        return v32 & 1;
      }

      if (v40 == v21) {
        goto LABEL_19;
      }
      uint64_t v44 = *(void (**)(char *, char *, uint64_t))(v22 + 16);
      uint64_t v29 = v39;
      uint64_t v30 = AssociatedTypeWitness;
      v44(v39, v23, AssociatedTypeWitness);
      dispatch thunk of Collection.index(after:)();
      int64_t v31 = *(void (**)(char *, uint64_t))(v22 + 8);
      v31(v29, v30);
      v31(v23, v30);
      (*(void (**)(char *, char *, uint64_t))(v22 + 32))(v23, v24, v30);
      v44(v24, v23, v30);
      dispatch thunk of Collection.endIndex.getter();
      swift_getAssociatedConformanceWitness();
      char v32 = dispatch thunk of static Equatable.== infix(_:_:)();
      v31(v29, v30);
      uint64_t result = ((uint64_t (*)(char *, uint64_t))v31)(v24, v30);
      if ((v32 & 1) == 0)
      {
        uint64_t v19 = v35;
        BOOL v33 = v34 == v21++;
        a5 = v36;
        a2 = v37;
        if (!v33) {
          continue;
        }
      }

      goto LABEL_16;
    }

    __break(1u);
LABEL_18:
    __break(1u);
LABEL_19:
    __break(1u);
  }

  __break(1u);
  return result;
}

uint64_t specialized DataProtocol.matches<A>(_:from:)( uint64_t a1, uint64_t a2, unint64_t a3, unint64_t a4)
{
  uint64_t v55 = *MEMORY[0x1895F89C0];
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v48 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v49 = AssociatedTypeWitness;
  uint64_t v8 = MEMORY[0x1895F8858](AssociatedTypeWitness);
  uint64_t v47 = (char *)&v34 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = MEMORY[0x1895F8858](v8);
  uint64_t v46 = (char *)&v34 - v11;
  MEMORY[0x1895F8858](v10);
  uint64_t v13 = (char *)&v34 - v12;
  dispatch thunk of Collection.startIndex.getter();
  unint64_t v14 = a4 >> 62;
  if (a4 >> 62 == 3) {
    goto LABEL_36;
  }
  uint64_t v40 = (int)a3;
  uint64_t v41 = a4 & 0x3FFFFFFFFFFFFFFFLL;
  uint64_t v44 = (uint64_t)a3 >> 32;
  uint64_t v50 = BYTE6(a4);
  unint64_t v38 = a3 >> 8;
  unint64_t v39 = a4;
  unint64_t v36 = a3 >> 24;
  unint64_t v37 = a3 >> 16;
  unint64_t v35 = HIDWORD(a3);
  unint64_t v34 = a3 >> 40;
  uint64_t v15 = a2;
  unint64_t v42 = a4 >> 62;
  unint64_t v43 = a3;
  uint64_t v45 = v13;
  uint64_t v16 = v46;
  while (1)
  {
    uint64_t v51 = v15;
    if ((_DWORD)v14)
    {
      if ((_DWORD)v14 == 1)
      {
        if (v15 < v40 || v15 >= v44)
        {
          __break(1u);
LABEL_29:
          __break(1u);
LABEL_30:
          __break(1u);
LABEL_31:
          __break(1u);
LABEL_32:
          __break(1u);
LABEL_33:
          __break(1u);
LABEL_34:
          __break(1u);
LABEL_35:
          __break(1u);
LABEL_36:
          __break(1u);
        }

        uint64_t v17 = *(void *)(v41 + 16);
        if (!v17) {
          goto LABEL_34;
        }
        uint64_t v18 = *(void *)(v41 + 40);
        BOOL v19 = __OFSUB__(v15, v18);
        uint64_t v20 = v15 - v18;
        if (v19) {
          goto LABEL_31;
        }
      }

      else
      {
        if (v15 < *(void *)(a3 + 16)) {
          goto LABEL_30;
        }
        if (v15 >= *(void *)(a3 + 24)) {
          goto LABEL_32;
        }
        uint64_t v17 = *(void *)(v41 + 16);
        if (!v17) {
          goto LABEL_35;
        }
        uint64_t v22 = *(void *)(v41 + 40);
        BOOL v19 = __OFSUB__(v15, v22);
        uint64_t v20 = v15 - v22;
        if (v19) {
          goto LABEL_33;
        }
      }

      int v21 = *(unsigned __int8 *)(v17 + v20);
    }

    else
    {
      if (v15 >= v50) {
        goto LABEL_29;
      }
      v52[0] = v40;
      v52[1] = v38;
      v52[2] = v37;
      v52[3] = v36;
      v52[4] = v35;
      v52[5] = v34;
      v52[6] = BYTE6(a3);
      v52[7] = HIBYTE(a3);
      int v53 = v39;
      __int16 v54 = WORD2(v39);
      int v21 = v52[v15];
    }

    uint64_t v23 = (void (*)(_BYTE *, void))dispatch thunk of Collection.subscript.read();
    int v25 = *v24;
    v23(v52, 0LL);
    if (v21 != v25)
    {
      char v31 = 0;
      (*(void (**)(char *, uint64_t))(v48 + 8))(v13, v49);
      return v31 & 1;
    }

    uint64_t v27 = v47;
    uint64_t v26 = v48;
    int v28 = *(void (**)(char *, char *, uint64_t))(v48 + 16);
    uint64_t v29 = v49;
    v28(v47, v13, v49);
    dispatch thunk of Collection.index(after:)();
    uint64_t v30 = *(void (**)(char *, uint64_t))(v26 + 8);
    v30(v27, v29);
    v30(v13, v29);
    (*(void (**)(char *, char *, uint64_t))(v26 + 32))(v13, v16, v29);
    v28(v16, v13, v29);
    dispatch thunk of Collection.endIndex.getter();
    swift_getAssociatedConformanceWitness();
    char v31 = dispatch thunk of static Equatable.== infix(_:_:)();
    v30(v27, v29);
    v30(v16, v29);
    if ((v31 & 1) != 0) {
      break;
    }
    uint64_t v32 = v50;
    LODWORD(v14) = v42;
    a3 = v43;
    if ((_DWORD)v42)
    {
      uint64_t v32 = v44;
      if ((_DWORD)v42 != 1) {
        uint64_t v32 = *(void *)(v43 + 24);
      }
    }

    uint64_t v15 = v51 + 1;
    uint64_t v13 = v45;
    if (v51 + 1 == v32) {
      goto LABEL_26;
    }
  }

  uint64_t v13 = v45;
LABEL_26:
  v30(v13, v49);
  return v31 & 1;
}

uint64_t specialized DataProtocol.matches<A>(_:from:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v11 = *(void *)(*(void *)(*(void *)(a6 + 8) + 8LL) + 8LL);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v40 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v13 = MEMORY[0x1895F8858](AssociatedTypeWitness);
  unint64_t v39 = (char *)&v38 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = MEMORY[0x1895F8858](v13);
  unint64_t v38 = (char *)&v38 - v16;
  MEMORY[0x1895F8858](v15);
  uint64_t v18 = (char *)&v38 - v17;
  uint64_t v41 = v11;
  dispatch thunk of Collection.startIndex.getter();
  uint64_t v19 = ~a2 + a4;
  uint64_t v20 = (unsigned __int8 *)(a3 + a2);
  int v21 = v38;
  while (1)
  {
    uint64_t v22 = v19;
    int v24 = *v20;
    uint64_t v23 = v20 + 1;
    int v25 = (void (*)(_BYTE *, void))dispatch thunk of Collection.subscript.read();
    int v27 = *v26;
    v25(v44, 0LL);
    if (v24 != v27) {
      break;
    }
    uint64_t v42 = v22;
    unint64_t v43 = v23;
    uint64_t v28 = a1;
    uint64_t v29 = a5;
    uint64_t v30 = v18;
    char v31 = v39;
    uint64_t v32 = v40;
    BOOL v33 = *(void (**)(char *, char *, uint64_t))(v40 + 16);
    v33(v39, v30, AssociatedTypeWitness);
    dispatch thunk of Collection.index(after:)();
    unint64_t v34 = *(void (**)(char *, uint64_t))(v32 + 8);
    v34(v31, AssociatedTypeWitness);
    v34(v30, AssociatedTypeWitness);
    unint64_t v35 = *(void (**)(char *, char *, uint64_t))(v32 + 32);
    uint64_t v18 = v30;
    v35(v30, v21, AssociatedTypeWitness);
    v33(v21, v30, AssociatedTypeWitness);
    a5 = v29;
    a1 = v28;
    dispatch thunk of Collection.endIndex.getter();
    swift_getAssociatedConformanceWitness();
    char v36 = dispatch thunk of static Equatable.== infix(_:_:)();
    v34(v31, AssociatedTypeWitness);
    v34(v21, AssociatedTypeWitness);
    if ((v36 & 1) == 0)
    {
      uint64_t v20 = v43;
      uint64_t v19 = v42 - 1;
      if (v42) {
        continue;
      }
    }

    goto LABEL_7;
  }

  char v36 = 0;
  unint64_t v34 = *(void (**)(char *, uint64_t))(v40 + 8);
LABEL_7:
  v34(v18, AssociatedTypeWitness);
  return v36 & 1;
}

{
  uint64_t v11;
  uint64_t AssociatedTypeWitness;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  int v22;
  uint64_t (*v23)(char *, void);
  unsigned __int8 *v24;
  int v25;
  uint64_t result;
  void (*v27)(char *, char *, uint64_t);
  char *v28;
  void (*v29)(char *, uint64_t);
  char v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  char v43[32];
  uint64_t v11 = *(void *)(*(void *)(*(void *)(a6 + 8) + 8LL) + 8LL);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  unint64_t v37 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v13 = MEMORY[0x1895F8858](AssociatedTypeWitness);
  unint64_t v34 = (char *)&v31 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = MEMORY[0x1895F8858](v13);
  BOOL v33 = (char *)&v31 - v16;
  MEMORY[0x1895F8858](v15);
  uint64_t v41 = a5;
  uint64_t v42 = (char *)&v31 - v17;
  unint64_t v39 = v11;
  uint64_t v40 = a1;
  dispatch thunk of Collection.startIndex.getter();
  if (a3) {
    uint64_t v18 = a4 - a3;
  }
  else {
    uint64_t v18 = 0LL;
  }
  unint64_t v35 = v18;
  char v36 = a2;
  char v31 = a4 - a3 - 1;
  uint64_t v32 = a3;
  uint64_t v19 = v37;
  uint64_t v20 = v34;
  int v21 = v42;
  while (1)
  {
    uint64_t v22 = *(unsigned __int8 *)(a3 + a2);
    uint64_t v23 = (uint64_t (*)(char *, void))dispatch thunk of Collection.subscript.read();
    int v25 = *v24;
    uint64_t result = v23(v43, 0LL);
    if (v22 != v25)
    {
      uint64_t v30 = 0;
      uint64_t v29 = *(void (**)(char *, uint64_t))(v37 + 8);
LABEL_13:
      v29(v42, AssociatedTypeWitness);
      return v30 & 1;
    }

    if (v36 < 0 || a2 >= v35) {
      break;
    }
    unint64_t v38 = a2;
    int v27 = *(void (**)(char *, char *, uint64_t))(v19 + 16);
    v27(v20, v21, AssociatedTypeWitness);
    uint64_t v28 = v33;
    dispatch thunk of Collection.index(after:)();
    uint64_t v29 = *(void (**)(char *, uint64_t))(v19 + 8);
    v29(v20, AssociatedTypeWitness);
    v29(v21, AssociatedTypeWitness);
    (*(void (**)(char *, char *, uint64_t))(v19 + 32))(v21, v28, AssociatedTypeWitness);
    v27(v28, v21, AssociatedTypeWitness);
    dispatch thunk of Collection.endIndex.getter();
    swift_getAssociatedConformanceWitness();
    uint64_t v30 = dispatch thunk of static Equatable.== infix(_:_:)();
    v29(v20, AssociatedTypeWitness);
    v29(v28, AssociatedTypeWitness);
    if ((v30 & 1) == 0)
    {
      a2 = v38 + 1;
      a3 = v32;
      if (!v32 || v31 != v38) {
        continue;
      }
    }

    goto LABEL_13;
  }

  __break(1u);
  return result;
}

uint64_t specialized DataProtocol.matches<A>(_:from:)( uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9 = *(void *)(*(void *)(*(void *)(a5 + 8) + 8LL) + 8LL);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v42 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v11 = MEMORY[0x1895F8858](AssociatedTypeWitness);
  uint64_t v41 = (char *)&v39 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = MEMORY[0x1895F8858](v11);
  uint64_t v40 = (char *)&v39 - v14;
  MEMORY[0x1895F8858](v13);
  uint64_t v16 = (char *)&v39 - v15;
  uint64_t v43 = v9;
  uint64_t result = dispatch thunk of Collection.startIndex.getter();
  unint64_t v18 = *(void *)(a3 + 16);
  unint64_t v19 = ~a2 + v18;
  BOOL v20 = v18 >= a2;
  unint64_t v21 = v18 - a2;
  if (v20) {
    unint64_t v22 = v21;
  }
  else {
    unint64_t v22 = 0LL;
  }
  uint64_t v23 = (unsigned __int8 *)(a2 + a3 + 32);
  while (v22)
  {
    unint64_t v24 = v19;
    int v25 = *v23;
    uint64_t v26 = (void (*)(_BYTE *, void))dispatch thunk of Collection.subscript.read();
    int v28 = *v27;
    v26(v47, 0LL);
    if (v25 != v28)
    {
      char v38 = 0;
      char v36 = *(void (**)(char *, uint64_t))(v42 + 8);
LABEL_11:
      v36(v16, AssociatedTypeWitness);
      return v38 & 1;
    }

    unint64_t v44 = v24;
    uint64_t v45 = v23;
    unint64_t v46 = v22;
    uint64_t v29 = a1;
    uint64_t v30 = a4;
    char v31 = v16;
    BOOL v33 = v41;
    uint64_t v32 = v42;
    unint64_t v34 = *(void (**)(char *, char *, uint64_t))(v42 + 16);
    v34(v41, v31, AssociatedTypeWitness);
    unint64_t v35 = v40;
    dispatch thunk of Collection.index(after:)();
    char v36 = *(void (**)(char *, uint64_t))(v32 + 8);
    v36(v33, AssociatedTypeWitness);
    v36(v31, AssociatedTypeWitness);
    unint64_t v37 = *(void (**)(char *, char *, uint64_t))(v32 + 32);
    uint64_t v16 = v31;
    v37(v31, v35, AssociatedTypeWitness);
    v34(v35, v31, AssociatedTypeWitness);
    a4 = v30;
    a1 = v29;
    dispatch thunk of Collection.endIndex.getter();
    swift_getAssociatedConformanceWitness();
    char v38 = dispatch thunk of static Equatable.== infix(_:_:)();
    v36(v33, AssociatedTypeWitness);
    uint64_t result = ((uint64_t (*)(char *, uint64_t))v36)(v35, AssociatedTypeWitness);
    if ((v38 & 1) == 0)
    {
      unint64_t v19 = v44 - 1;
      unint64_t v22 = v46 - 1;
      uint64_t v23 = v45 + 1;
      if (v44) {
        continue;
      }
    }

    goto LABEL_11;
  }

  __break(1u);
  return result;
}

uint64_t specialized DataProtocol.matches<A>(_:from:)( uint64_t a1, uint64_t a2, uint64_t a3, unsigned __int8 a4, uint64_t a5)
{
  int v33 = a4;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v32 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v10 = MEMORY[0x1895F8858](AssociatedTypeWitness);
  uint64_t v30 = (char *)&v28 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = MEMORY[0x1895F8858](v10);
  char v31 = (char *)&v28 - v13;
  MEMORY[0x1895F8858](v12);
  uint64_t v15 = (char *)&v28 - v14;
  uint64_t v34 = a1;
  uint64_t result = dispatch thunk of Collection.startIndex.getter();
  uint64_t v35 = a3;
  uint64_t v36 = a2;
  uint64_t v29 = a3 - 1;
  uint64_t v17 = v31;
  while ((v36 & 0x8000000000000000LL) == 0 && a2 < v35)
  {
    unint64_t v18 = (void (*)(_BYTE *, void))dispatch thunk of Collection.subscript.read();
    int v20 = *v19;
    v18(v38, 0LL);
    if (v20 != v33)
    {
      char v27 = 0;
      int v25 = *(void (**)(char *, uint64_t))(v32 + 8);
LABEL_9:
      v25(v15, AssociatedTypeWitness);
      return v27 & 1;
    }

    uint64_t v37 = a2;
    uint64_t v21 = a5;
    uint64_t v22 = v32;
    uint64_t v23 = *(void (**)(char *, char *, uint64_t))(v32 + 16);
    unint64_t v24 = v30;
    v23(v30, v15, AssociatedTypeWitness);
    dispatch thunk of Collection.index(after:)();
    int v25 = *(void (**)(char *, uint64_t))(v22 + 8);
    v25(v24, AssociatedTypeWitness);
    v25(v15, AssociatedTypeWitness);
    uint64_t v26 = *(void (**)(char *, char *, uint64_t))(v22 + 32);
    a5 = v21;
    v26(v15, v17, AssociatedTypeWitness);
    v23(v17, v15, AssociatedTypeWitness);
    dispatch thunk of Collection.endIndex.getter();
    swift_getAssociatedConformanceWitness();
    char v27 = dispatch thunk of static Equatable.== infix(_:_:)();
    v25(v24, AssociatedTypeWitness);
    uint64_t result = ((uint64_t (*)(char *, uint64_t))v25)(v17, AssociatedTypeWitness);
    if ((v27 & 1) == 0)
    {
      a2 = v37 + 1;
      if (v29 != v37) {
        continue;
      }
    }

    goto LABEL_9;
  }

  __break(1u);
  return result;
}

uint64_t DataProtocol.matches<A>(_:from:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v54 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v10 = MEMORY[0x1895F8858](AssociatedTypeWitness);
  int v53 = (char *)&v49 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = MEMORY[0x1895F8858](v10);
  uint64_t v52 = (char *)&v49 - v13;
  MEMORY[0x1895F8858](v12);
  uint64_t v15 = (char *)&v49 - v14;
  uint64_t v16 = *(void *)(*(void *)(*(void *)(a5 + 8) + 8LL) + 8LL);
  uint64_t v64 = a3;
  uint64_t v17 = swift_getAssociatedTypeWitness();
  uint64_t v18 = MEMORY[0x1895F8858](v17);
  uint64_t v63 = (char *)&v49 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v20 = MEMORY[0x1895F8858](v18);
  char v62 = (char *)&v49 - v21;
  MEMORY[0x1895F8858](v20);
  uint64_t v23 = (char *)&v49 - v22;
  uint64_t v57 = v24;
  __int128 v61 = *(void (**)(char *, uint64_t, uint64_t))(v24 + 16);
  v61((char *)&v49 - v22, a2, v17);
  uint64_t v55 = a1;
  uint64_t v56 = a4;
  int v25 = v23;
  dispatch thunk of Collection.startIndex.getter();
  uint64_t v50 = v23;
  uint64_t v51 = v15;
  uint64_t v49 = v16;
  while (1)
  {
    uint64_t v26 = (void (*)(_BYTE *, void))dispatch thunk of Collection.subscript.read();
    int v28 = *v27;
    v26(v65, 0LL);
    uint64_t v29 = (void (*)(_BYTE *, void))dispatch thunk of Collection.subscript.read();
    int v31 = *v30;
    v29(v65, 0LL);
    if (v28 != v31)
    {
      LODWORD(v60) = 0;
      (*(void (**)(char *, uint64_t))(v54 + 8))(v15, AssociatedTypeWitness);
      goto LABEL_9;
    }

    uint64_t v32 = v63;
    v61(v63, (uint64_t)v25, v17);
    int v33 = v62;
    dispatch thunk of Collection.index(after:)();
    uint64_t v34 = v57;
    uint64_t v35 = *(void (**)(char *, uint64_t))(v57 + 8);
    v35(v32, v17);
    uint64_t v59 = v35;
    v35(v25, v17);
    (*(void (**)(char *, char *, uint64_t))(v34 + 32))(v25, v33, v17);
    uint64_t v37 = v53;
    uint64_t v36 = v54;
    uint64_t v60 = *(void (**)(char *, char *, uint64_t))(v54 + 16);
    uint64_t v38 = v17;
    uint64_t v39 = AssociatedTypeWitness;
    v60(v53, v15, AssociatedTypeWitness);
    uint64_t v40 = v52;
    dispatch thunk of Collection.index(after:)();
    uint64_t v41 = *(void (**)(char *, uint64_t))(v36 + 8);
    v41(v37, v39);
    v41(v15, v39);
    (*(void (**)(char *, char *, uint64_t))(v36 + 32))(v15, v40, v39);
    v60(v40, v15, v39);
    dispatch thunk of Collection.endIndex.getter();
    swift_getAssociatedConformanceWitness();
    LODWORD(v34) = dispatch thunk of static Equatable.== infix(_:_:)();
    v41(v37, v39);
    v41(v40, v39);
    LODWORD(v60) = v34;
    if ((v34 & 1) != 0) {
      break;
    }
    uint64_t v42 = v62;
    uint64_t v43 = v50;
    v61(v62, (uint64_t)v50, v38);
    unint64_t v44 = v63;
    dispatch thunk of Collection.endIndex.getter();
    swift_getAssociatedConformanceWitness();
    char v45 = dispatch thunk of static Equatable.== infix(_:_:)();
    unint64_t v46 = v44;
    uint64_t v47 = v59;
    v59(v46, v38);
    v47(v42, v38);
    uint64_t v15 = v51;
    uint64_t v17 = v38;
    int v25 = v43;
    if ((v45 & 1) != 0) {
      goto LABEL_8;
    }
  }

  int v25 = v50;
  uint64_t v15 = v51;
  uint64_t v17 = v38;
LABEL_8:
  v41(v15, AssociatedTypeWitness);
LABEL_9:
  (*(void (**)(char *, uint64_t))(v57 + 8))(v25, v17);
  return v60 & 1;
}

uint64_t partial apply for closure #1 in DataProtocol.copyBytes<A>(to:from:)(uint64_t a1, uint64_t a2)
{
  return closure #1 in DataProtocol.copyBytes<A>(to:from:)( a1,  a2,  *(void *)(v2 + 16),  *(void *)(v2 + 24),  *(uint64_t **)(v2 + 32),  *(void **)(v2 + 40));
}

uint64_t DataProtocol<>.copyBytes<A, B>(to:from:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v23 = a5;
  uint64_t v24 = a7;
  uint64_t v22 = a3;
  uint64_t v25 = a8;
  uint64_t v26 = a2;
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t v13 = type metadata accessor for Range();
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t result = MEMORY[0x1895F8858](v13);
  uint64_t v17 = (char *)&v22 - v16;
  if (a1)
  {
    uint64_t v18 = dispatch thunk of RangeExpression.relative<A>(to:)();
    MEMORY[0x1895F8858](v18);
    uint64_t v20 = v23;
    uint64_t v19 = v24;
    *(&v22 - 10) = a4;
    *(&v22 - 9) = v20;
    *(&v22 - 8) = a6;
    *(&v22 - 7) = v19;
    *(&v22 - 6) = v25;
    *(&v22 - 5) = a9;
    *(&v22 - 4) = v9;
    *(&v22 - 3) = (uint64_t)v17;
    uint64_t v21 = v26;
    *(&v22 - 2) = a1;
    *(&v22 - 1) = v21;
    (*(void (**)(void *(*)(uint64_t, uint64_t)))(v19 + 8))(partial apply for closure #1 in DataProtocol<>.copyBytes<A, B>(to:from:));
    return (*(uint64_t (**)(char *, uint64_t))(v14 + 8))(v17, v13);
  }

  else
  {
    __break(1u);
  }

  return result;
}

void *closure #1 in DataProtocol<>.copyBytes<A, B>(to:from:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v20 = a5;
  v19[3] = a9;
  void v19[2] = a12;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v14 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1895F8858](AssociatedTypeWitness);
  uint64_t v16 = (char *)v19 - v15;
  dispatch thunk of Collection.startIndex.getter();
  uint64_t v17 = dispatch thunk of RandomAccessCollection.distance(from:to:)();
  (*(void (**)(char *, uint64_t))(v14 + 8))(v16, AssociatedTypeWitness);
  swift_getAssociatedConformanceWitness();
  type metadata accessor for Range();
  uint64_t result = (void *)dispatch thunk of RandomAccessCollection.distance(from:to:)();
  if (v20)
  {
    if (a1) {
      return memcpy(v20, (const void *)(a1 + v17), (size_t)result);
    }
  }

  else
  {
    __break(1u);
  }

  __break(1u);
  return result;
}

void *partial apply for closure #1 in DataProtocol<>.copyBytes<A, B>(to:from:)(uint64_t a1, uint64_t a2)
{
  return closure #1 in DataProtocol<>.copyBytes<A, B>(to:from:)( a1,  a2,  *(void *)(v2 + 64),  *(void *)(v2 + 72),  *(void **)(v2 + 80),  *(void *)(v2 + 88),  *(void *)(v2 + 16),  *(void *)(v2 + 24),  *(void *)(v2 + 32),  *(void *)(v2 + 40),  *(void *)(v2 + 48),  *(void *)(v2 + 56));
}

void *specialized Slice<>.regions.getter(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v27 = *MEMORY[0x1895F89C0];
  uint64_t v22 = 0LL;
  if (!a3)
  {
    uint64_t v5 = 0LL;
    uint64_t v19 = (void *)MEMORY[0x18961AFE8];
    uint64_t v7 = 0xC000000000000000LL;
    goto LABEL_19;
  }

  if (a3 < 1) {
LABEL_21:
  }
    __break(1u);
  uint64_t v25 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CollectionOfOne<UInt8>);
  uint64_t v26 = &protocol witness table for <A> CollectionOfOne<A>;
  LOBYTE(v23) = a4;
  char __src = *(_BYTE *)__swift_project_boxed_opaque_existential_1(&v23, v25);
  uint64_t v5 = specialized Data.InlineData.init(_:)(&__src, &v22);
  uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFLL;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v23);
  uint64_t v8 = 0LL;
  uint64_t v19 = (void *)MEMORY[0x18961AFE8];
  do
  {
    if (v8 <= a3) {
      uint64_t v9 = a3;
    }
    else {
      uint64_t v9 = v8;
    }
    uint64_t v10 = -v9;
    ++v8;
    while (1)
    {
      if (v10 + v8 == 1)
      {
        __break(1u);
        goto LABEL_21;
      }

      specialized closure #1 in Slice<>.regions.getter(v5, v7);
      unint64_t v11 = v24;
      if (v24 >> 60 != 15) {
        break;
      }
      if (++v8 - a3 == 1) {
        goto LABEL_19;
      }
    }

    uint64_t v18 = v23;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v19 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  v19[2] + 1LL,  1,  v19);
    }
    unint64_t v13 = v19[2];
    unint64_t v12 = v19[3];
    unint64_t v14 = v13 + 1;
    if (v13 >= v12 >> 1)
    {
      uint64_t v16 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (void *)(v12 > 1),  v13 + 1,  1,  v19);
      unint64_t v14 = v13 + 1;
      uint64_t v19 = v16;
    }

    void v19[2] = v14;
    uint64_t v15 = &v19[2 * v13];
    v15[4] = v18;
    v15[5] = v11;
  }

  while (a3 != v8);
LABEL_19:
  outlined consume of Data._Representation(v5, v7);
  return v19;
}

uint64_t Slice<>.regions.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = *(void *)(a1 + 16);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v28 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1895F8858](AssociatedTypeWitness);
  uint64_t v29 = (char *)&v24 - v7;
  uint64_t v8 = swift_getAssociatedTypeWitness();
  uint64_t v27 = *(void *)(v8 - 8);
  uint64_t v9 = MEMORY[0x1895F8858](v8);
  unint64_t v11 = (char *)&v24 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = MEMORY[0x1895F8858](v9);
  unint64_t v14 = (char *)&v24 - v13;
  MEMORY[0x1895F8858](v12);
  uint64_t v16 = (char *)&v24 - v15;
  uint64_t v18 = *(void (**)(char *, uint64_t, uint64_t))(v17 + 16);
  v18((char *)&v24 - v15, v3, v8);
  v18(v14, v3 + *(int *)(a1 + 36), v8);
  uint64_t v25 = v11;
  dispatch thunk of Collection.startIndex.getter();
  (*(void (**)(uint64_t, uint64_t))(a2 + 64))(v6, a2);
  uint64_t v30 = v6;
  uint64_t v31 = a2;
  uint64_t v32 = v11;
  uint64_t v33 = v3;
  uint64_t v34 = v16;
  uint64_t v35 = v14;
  uint64_t v19 = AssociatedTypeWitness;
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedTypeWitness();
  uint64_t v20 = v29;
  uint64_t v21 = Sequence.compactMap<A>(_:)();
  (*(void (**)(char *, uint64_t))(v28 + 8))(v20, v19);
  uint64_t v22 = *(void (**)(char *, uint64_t))(v27 + 8);
  v22(v14, v8);
  v22(v16, v8);
  v22(v25, v8);
  return v21;
}

uint64_t specialized closure #1 in Slice<>.regions.getter@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X3>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X8>)
{
  uint64_t v13 = *a4;
  uint64_t result = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Slice<DispatchData>);
  uint64_t v15 = a3 + a2;
  if (__OFADD__(a3, a2))
  {
    __break(1u);
    goto LABEL_34;
  }

  uint64_t v22 = a3 + a2;
  if (v15 < a3)
  {
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }

  if (__OFSUB__(v15, a3))
  {
LABEL_35:
    __break(1u);
    goto LABEL_36;
  }

  type metadata accessor for DispatchData();
  lazy protocol witness table accessor for type DispatchData and conformance DispatchData( &lazy protocol witness table cache variable for type DispatchData and conformance DispatchData,  MEMORY[0x18961B768]);
  uint64_t result = dispatch thunk of RandomAccessCollection.index(_:offsetBy:)();
  *a4 = v23;
  if (v13 <= a5 && v23 >= a6)
  {
    uint64_t result = dispatch thunk of RandomAccessCollection.distance(from:to:)();
    uint64_t v16 = a3 + result;
    if (!__OFADD__(a3, result))
    {
      if (v16 >= a3 && v22 >= v16)
      {
        uint64_t result = dispatch thunk of RandomAccessCollection.distance(from:to:)();
        uint64_t v18 = a3 + result;
        if (!__OFADD__(a3, result))
        {
          if (v18 >= a3 && v22 >= v18)
          {
            if (v18 >= v16)
            {
              *(void *)(a7 + 16) = a1;
              *(void *)(a7 + 24) = a2;
              *(void *)(a7 + 32) = a3;
              *(void *)a7 = v16;
              *(void *)(a7 + 8) = v18;
              *(_BYTE *)(a7 + 40) = 0;
              return result;
            }

            goto LABEL_40;
          }

uint64_t specialized closure #1 in Slice<>.regions.getter@<X0>( uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  uint64_t v8 = a3 + a2;
  if (__OFADD__(a3, a2))
  {
    __break(1u);
    goto LABEL_50;
  }

  if (__OFSUB__(v8, a3))
  {
LABEL_50:
    __break(1u);
    goto LABEL_51;
  }

  uint64_t v9 = *a4;
  uint64_t v10 = *a4 + a2;
  if (__OFADD__(*a4, a2))
  {
LABEL_51:
    __break(1u);
    goto LABEL_52;
  }

  uint64_t v12 = *(void *)(a5 + 24);
  uint64_t v11 = *(void *)(a5 + 32);
  BOOL v13 = __OFADD__(v11, v12);
  uint64_t v14 = v11 + v12;
  if (v13)
  {
LABEL_52:
    __break(1u);
LABEL_53:
    __break(1u);
    goto LABEL_54;
  }

  if (v8 < a3 || v10 < v11 || v14 < v10) {
    goto LABEL_53;
  }
  *a4 = v10;
  if (v9 <= a6 && v10 >= a7)
  {
    uint64_t v15 = a6 - v9;
    if (!__OFSUB__(a6, v9))
    {
      BOOL v13 = __OFADD__(a3, v15);
      uint64_t v16 = a3 + v15;
      if (!v13)
      {
        uint64_t v17 = a7 - v9;
        if (!__OFSUB__(a7, v9))
        {
          BOOL v13 = __OFADD__(a3, v17);
          uint64_t v18 = a3 + v17;
          if (!v13)
          {
            if (v8 >= v18
              && v18 >= a3
              && v11 <= a7
              && v8 >= v16
              && v16 >= a3
              && v14 >= a6
              && v11 <= a6
              && v9 >= v11
              && v14 >= v9)
            {
              if (v18 >= v16)
              {
                *(void *)(a8 + 16) = result;
                *(void *)(a8 + 24) = a2;
                *(void *)(a8 + 32) = a3;
                *(void *)a8 = v16;
                *(void *)(a8 + 8) = v18;
                *(_BYTE *)(a8 + 40) = 0;
                return result;
              }

              goto LABEL_59;
            }

void specialized closure #1 in Slice<>.regions.getter(uint64_t a1, uint64_t a2)
{
  __asm { BR              X11 }

uint64_t sub_18306E534( uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v13 = v11 + BYTE6(v10);
  if (__OFADD__(v11, BYTE6(v10)))
  {
    __break(1u);
    goto LABEL_18;
  }

  if (v13 < 0 || v13 > a6)
  {
LABEL_18:
    __break(1u);
    JUMPOUT(0x18306E7E4LL);
  }

  *a3 = v13;
  if (a8 >= v11 && v13 >= v12) {
    __asm { BR              X9 }
  }

  if (a8 <= v11 && v13 <= v12) {
    __asm { BR              X10 }
  }

  if (a8 >= v11 && v13 >= a8) {
    __asm { BR              X9 }
  }

  uint64_t result = 0LL;
  if (a8 <= v11 && v12 >= v11) {
    __asm { BR              X10 }
  }

  *uint64_t v9 = 0LL;
  v9[1] = 0xF000000000000000LL;
  return result;
}

uint64_t closure #1 in Slice<>.regions.getter@<X0>( uint64_t a1@<X0>, char *a2@<X1>, uint64_t a3@<X2>, char *a4@<X3>, char *a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  uint64_t v176 = a1;
  uint64_t v177 = a5;
  uint64_t v180 = a4;
  uint64_t v175 = a3;
  uint64_t v172 = a8;
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v12 = a6;
  uint64_t v161 = *(void *)(swift_getAssociatedConformanceWitness() + 8);
  uint64_t v178 = *(void *)(*(void *)(v161 + 8) + 8LL);
  uint64_t v168 = AssociatedTypeWitness;
  uint64_t v13 = swift_getAssociatedTypeWitness();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v14 = MEMORY[0x1895F8858](TupleTypeMetadata2);
  uint64_t v155 = (char *)&v150 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v14);
  uint64_t v154 = (char *)&v150 - v16;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v158 = type metadata accessor for Range();
  uint64_t v157 = *(void *)(v158 - 8);
  uint64_t v17 = MEMORY[0x1895F8858](v158);
  uint64_t v163 = (char *)&v150 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v19 = MEMORY[0x1895F8858](v17);
  uint64_t v156 = (char *)&v150 - v20;
  uint64_t v170 = v13;
  uint64_t v164 = *(void **)(v13 - 8);
  uint64_t v21 = MEMORY[0x1895F8858](v19);
  unint64_t v150 = (char *)&v150 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v23 = MEMORY[0x1895F8858](v21);
  uint64_t v171 = (char *)&v150 - v24;
  MEMORY[0x1895F8858](v23);
  uint64_t v173 = (char *)&v150 - v25;
  uint64_t v174 = *(void *)(a7 + 8);
  uint64_t v166 = *(void *)(*(void *)(v174 + 8) + 8LL);
  uint64_t v26 = v12;
  uint64_t v27 = swift_getAssociatedTypeWitness();
  uint64_t v165 = *(void *)(v27 - 8);
  uint64_t v28 = MEMORY[0x1895F8858](v27);
  int64_t v151 = (char *)&v150 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v30 = MEMORY[0x1895F8858](v28);
  uint64_t v152 = (char *)&v150 - v31;
  uint64_t v32 = MEMORY[0x1895F8858](v30);
  uint64_t v153 = (char *)&v150 - v33;
  uint64_t v34 = MEMORY[0x1895F8858](v32);
  uint64_t v162 = (char *)&v150 - v35;
  uint64_t v36 = MEMORY[0x1895F8858](v34);
  char v167 = (char *)&v150 - v37;
  uint64_t v38 = MEMORY[0x1895F8858](v36);
  uint64_t v40 = (char *)&v150 - v39;
  uint64_t v41 = MEMORY[0x1895F8858](v38);
  uint64_t v43 = (char *)&v150 - v42;
  MEMORY[0x1895F8858](v41);
  char v45 = (char *)&v150 - v44;
  uint64_t v47 = *(void (**)(char *, char *, uint64_t))(v46 + 16);
  v47((char *)&v150 - v44, a2, v27);
  uint64_t v48 = v26;
  uint64_t v49 = v175 + *(int *)(type metadata accessor for Slice() + 40);
  v47(v40, a2, v27);
  uint64_t v175 = swift_checkMetadataState();
  dispatch thunk of Collection.count.getter();
  uint64_t v160 = v49;
  dispatch thunk of RandomAccessCollection.index(_:offsetBy:)();
  uint64_t v50 = v165;
  uint64_t v51 = *(void (**)(char *, uint64_t))(v165 + 8);
  v51(v40, v27);
  (*(void (**)(char *, char *, uint64_t))(v50 + 40))(a2, v43, v27);
  uint64_t v52 = v48;
  int v53 = v167;
  uint64_t v168 = v52;
  swift_getAssociatedConformanceWitness();
  id v179 = v45;
  LOBYTE(v50) = dispatch thunk of static Comparable.>= infix(_:_:)();
  v47(v53, v177, v27);
  if ((v50 & 1) != 0)
  {
    v47(v43, a2, v27);
    char v54 = dispatch thunk of static Comparable.<= infix(_:_:)();
    v51(v43, v27);
    v51(v53, v27);
    if ((v54 & 1) != 0)
    {
      char v167 = (char *)v51;
      uint64_t v55 = v171;
      dispatch thunk of Collection.startIndex.getter();
      dispatch thunk of RandomAccessCollection.distance(from:to:)();
      dispatch thunk of RandomAccessCollection.index(_:offsetBy:)();
      uint64_t v56 = (char *)v164[1];
      uint64_t v57 = v170;
      ((void (*)(char *, uint64_t))v56)(v55, v170);
      uint64_t v58 = v150;
      dispatch thunk of Collection.startIndex.getter();
      dispatch thunk of RandomAccessCollection.distance(from:to:)();
      dispatch thunk of RandomAccessCollection.index(_:offsetBy:)();
      uint64_t v180 = v56;
      ((void (*)(char *, uint64_t))v56)(v58, v57);
      uint64_t v59 = v173;
      uint64_t result = dispatch thunk of static Comparable.<= infix(_:_:)();
      if ((result & 1) != 0)
      {
        uint64_t v61 = TupleTypeMetadata2;
        char v62 = v154;
        uint64_t v63 = &v154[*(int *)(TupleTypeMetadata2 + 48)];
        uint64_t v64 = v164;
        char v65 = (void (*)(char *, char *, uint64_t))v164[2];
        v65(v154, v59, v57);
        uint64_t v66 = v63;
        uint64_t v177 = v63;
        v65(v63, v171, v57);
        uint64_t v67 = v155;
        char v68 = &v155[*(int *)(v61 + 48)];
        v65(v155, v62, v57);
        v65(v68, v66, v57);
        uint64_t v69 = (void (*)(char *, char *, uint64_t))v64[4];
        uint64_t v70 = v163;
        v69(v163, v67, v57);
        uint64_t v71 = v180;
        ((void (*)(char *, uint64_t))v180)(v68, v57);
        uint64_t v72 = &v67[*(int *)(v61 + 48)];
        v69(v67, v62, v57);
        v69(v72, v177, v57);
        uint64_t v73 = v158;
        v69(&v70[*(int *)(v158 + 36)], v72, v57);
        ((void (*)(char *, uint64_t))v71)(v67, v57);
        uint64_t v74 = v157;
        uint64_t v75 = v156;
        (*(void (**)(char *, char *, uint64_t))(v157 + 32))(v156, v70, v73);
        dispatch thunk of Collection.subscript.getter();
        (*(void (**)(char *, uint64_t))(v74 + 8))(v75, v73);
        ((void (*)(char *, uint64_t))v71)(v171, v57);
        ((void (*)(char *, uint64_t))v71)(v173, v57);
        ((void (*)(char *, uint64_t))v167)(v179, v27);
LABEL_21:
        uint64_t v148 = swift_getAssociatedTypeWitness();
        return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v148 - 8) + 56LL))( v172,  0LL,  1LL,  v148);
      }

      __break(1u);
      goto LABEL_26;
    }
  }

  else
  {
    v51(v53, v27);
  }

  char v167 = a2;
  char v76 = dispatch thunk of static Comparable.>= infix(_:_:)();
  uint64_t v77 = v162;
  v47(v162, v177, v27);
  uint64_t v78 = v170;
  if ((v76 & 1) != 0)
  {
    v47(v43, v167, v27);
    char v79 = dispatch thunk of static Comparable.<= infix(_:_:)();
    v51(v43, v27);
    v51(v77, v27);
    if ((v79 & 1) != 0)
    {
      char v167 = (char *)v51;
      uint64_t v80 = v173;
      dispatch thunk of Collection.startIndex.getter();
      uint64_t v81 = v171;
      dispatch thunk of Collection.endIndex.getter();
      uint64_t result = dispatch thunk of static Comparable.<= infix(_:_:)();
      if ((result & 1) == 0)
      {
LABEL_26:
        __break(1u);
        goto LABEL_27;
      }

      uint64_t v82 = TupleTypeMetadata2;
      uint64_t v83 = v154;
      uint64_t v84 = &v154[*(int *)(TupleTypeMetadata2 + 48)];
      uint64_t v85 = v164;
      uint64_t v86 = (void (*)(char *, char *, uint64_t))v164[4];
      v86(v154, v80, v78);
      uint64_t v180 = v84;
      v86(v84, v81, v78);
      uint64_t v87 = v155;
      uint64_t v88 = &v155[*(int *)(v82 + 48)];
      uint64_t v89 = (void (*)(char *, char *, uint64_t))v85[2];
      v89(v155, v83, v78);
      v89(v88, v84, v78);
      v86(v163, v87, v78);
      uint64_t v90 = (void (*)(char *, uint64_t))v85[1];
      v90(v88, v78);
      uint64_t v91 = &v87[*(int *)(TupleTypeMetadata2 + 48)];
      v86(v87, v83, v78);
      v86(v91, v180, v78);
      uint64_t v92 = v158;
      uint64_t v93 = v163;
      v86(&v163[*(int *)(v158 + 36)], v91, v78);
      v90(v87, v78);
      uint64_t v94 = v157;
      uint64_t v95 = v156;
      (*(void (**)(char *, char *, uint64_t))(v157 + 32))(v156, v93, v92);
      uint64_t v96 = v172;
      dispatch thunk of Collection.subscript.getter();
      (*(void (**)(char *, uint64_t))(v94 + 8))(v95, v92);
      ((void (*)(char *, uint64_t))v167)(v179, v27);
LABEL_15:
      uint64_t v124 = swift_getAssociatedTypeWitness();
      return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v124 - 8) + 56LL))( v96,  0LL,  1LL,  v124);
    }
  }

  else
  {
    v51(v77, v27);
  }

  uint64_t v97 = v47;
  uint64_t v98 = v78;
  uint64_t v99 = v180;
  char v100 = dispatch thunk of static Comparable.>= infix(_:_:)();
  __int128 v101 = v153;
  v47(v153, v99, v27);
  if ((v100 & 1) != 0)
  {
    v47(v43, v167, v27);
    char v102 = dispatch thunk of static Comparable.<= infix(_:_:)();
    v51(v43, v27);
    v51(v101, v27);
    if ((v102 & 1) != 0)
    {
      uint64_t v103 = v98;
      char v167 = (char *)v51;
      uint64_t v104 = v171;
      dispatch thunk of Collection.startIndex.getter();
      dispatch thunk of RandomAccessCollection.distance(from:to:)();
      uint64_t v105 = v173;
      dispatch thunk of RandomAccessCollection.index(_:offsetBy:)();
      Swift::String v106 = v164;
      uint64_t v180 = (char *)v164[1];
      ((void (*)(char *, uint64_t))v180)(v104, v103);
      dispatch thunk of Collection.endIndex.getter();
      uint64_t result = dispatch thunk of static Comparable.<= infix(_:_:)();
      if ((result & 1) == 0)
      {
LABEL_27:
        __break(1u);
LABEL_28:
        __break(1u);
        return result;
      }

      uint64_t v107 = TupleTypeMetadata2;
      __int128 v108 = v154;
      __int128 v109 = &v154[*(int *)(TupleTypeMetadata2 + 48)];
      __int128 v110 = (void (*)(char *, char *, uint64_t))v106[2];
      v110(v154, v105, v103);
      __int128 v111 = (void (*)(char *, char *, uint64_t))v106[4];
      __int128 v112 = v109;
      uint64_t v177 = v109;
      v111(v109, v104, v103);
      uint64_t v113 = *(int *)(v107 + 48);
      __int128 v114 = v155;
      __int128 v115 = &v155[v113];
      v110(v155, v108, v103);
      v110(v115, v112, v103);
      __int128 v116 = v163;
      v111(v163, v114, v103);
      uint64_t v117 = v115;
      uint64_t v118 = v180;
      ((void (*)(char *, uint64_t))v180)(v117, v103);
      uint64_t v119 = v118;
      uint64_t v120 = &v114[*(int *)(TupleTypeMetadata2 + 48)];
      v111(v114, v108, v103);
      v111(v120, v177, v103);
      uint64_t v121 = v158;
      v111(&v116[*(int *)(v158 + 36)], v120, v103);
      ((void (*)(char *, uint64_t))v119)(v114, v103);
      uint64_t v122 = v157;
      __int128 v123 = v156;
      (*(void (**)(char *, char *, uint64_t))(v157 + 32))(v156, v116, v121);
      uint64_t v96 = v172;
      dispatch thunk of Collection.subscript.getter();
      (*(void (**)(char *, uint64_t))(v122 + 8))(v123, v121);
      ((void (*)(char *, uint64_t))v180)(v173, v103);
      ((void (*)(char *, uint64_t))v167)(v179, v27);
      goto LABEL_15;
    }
  }

  else
  {
    v51(v101, v27);
  }

  char v125 = v179;
  char v126 = dispatch thunk of static Comparable.>= infix(_:_:)();
  __int128 v127 = v152;
  v97(v152, v125, v27);
  __int128 v128 = v151;
  v97(v151, v177, v27);
  if ((v126 & 1) != 0)
  {
    char v129 = dispatch thunk of static Comparable.<= infix(_:_:)();
    v51(v128, v27);
    v51(v127, v27);
    if ((v129 & 1) != 0)
    {
      char v167 = (char *)v51;
      uint64_t v130 = v171;
      dispatch thunk of Collection.startIndex.getter();
      dispatch thunk of RandomAccessCollection.distance(from:to:)();
      uint64_t v131 = v173;
      dispatch thunk of RandomAccessCollection.index(_:offsetBy:)();
      uint64_t v132 = v164;
      uint64_t v133 = v170;
      uint64_t v180 = (char *)v164[1];
      ((void (*)(char *, uint64_t))v180)(v130, v170);
      dispatch thunk of Collection.startIndex.getter();
      uint64_t result = dispatch thunk of static Comparable.<= infix(_:_:)();
      if ((result & 1) != 0)
      {
        uint64_t v134 = TupleTypeMetadata2;
        __int128 v135 = v154;
        __int128 v136 = &v154[*(int *)(TupleTypeMetadata2 + 48)];
        __int128 v137 = (void (*)(char *, char *, uint64_t))v132[4];
        v137(v154, v130, v133);
        __int128 v138 = (void (*)(char *, char *, uint64_t))v132[2];
        __int128 v139 = v136;
        uint64_t v177 = v136;
        v138(v136, v131, v133);
        __int128 v140 = v155;
        __int128 v141 = &v155[*(int *)(v134 + 48)];
        v138(v155, v135, v133);
        v138(v141, v139, v133);
        __int128 v142 = v163;
        v137(v163, v140, v133);
        ((void (*)(char *, uint64_t))v180)(v141, v133);
        __int128 v143 = &v140[*(int *)(v134 + 48)];
        v137(v140, v135, v133);
        v137(v143, v177, v133);
        uint64_t v144 = v158;
        v137(&v142[*(int *)(v158 + 36)], v143, v133);
        uint64_t v145 = v180;
        ((void (*)(char *, uint64_t))v180)(v140, v133);
        uint64_t v146 = v157;
        uint64_t v147 = v156;
        (*(void (**)(char *, char *, uint64_t))(v157 + 32))(v156, v142, v144);
        dispatch thunk of Collection.subscript.getter();
        (*(void (**)(char *, uint64_t))(v146 + 8))(v147, v144);
        ((void (*)(char *, uint64_t))v145)(v173, v133);
        ((void (*)(char *, uint64_t))v167)(v179, v27);
        goto LABEL_21;
      }

      goto LABEL_28;
    }
  }

  else
  {
    v51(v128, v27);
    v51(v127, v27);
  }

  v51(v125, v27);
  uint64_t v149 = swift_getAssociatedTypeWitness();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v149 - 8) + 56LL))( v172,  1LL,  1LL,  v149);
}

uint64_t partial apply for closure #1 in Slice<>.regions.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return closure #1 in Slice<>.regions.getter( a1,  *(char **)(v2 + 32),  *(void *)(v2 + 40),  *(char **)(v2 + 48),  *(char **)(v2 + 56),  *(void *)(v2 + 16),  *(void *)(v2 + 24),  a2);
}

void associated type witness table accessor for DataProtocol.Regions : BidirectionalCollection in <> Slice<A>()
{
}

uint64_t associated type witness table accessor for Collection.SubSequence : DataProtocol in <> Slice<A>( uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a3 - 8);
  return MEMORY[0x186E20D4C](&protocol conformance descriptor for <> Slice<A>, a1, &v4);
}

uint64_t associated type witness table accessor for DataProtocol.Regions.Sequence.Element : DataProtocol in <> Slice<A>()
{
  return swift_getAssociatedConformanceWitness();
}

uint64_t associated type witness table accessor for DataProtocol.Regions.Sequence.Element.Collection.SubSequence : ContiguousBytes in <> Slice<A>()
{
  return swift_getAssociatedConformanceWitness();
}

uint64_t protocol witness for DataProtocol.regions.getter in conformance <> Slice<A>@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t result = Slice<>.regions.getter(a1, *(void *)(a2 - 8));
  *a3 = result;
  return result;
}

uint64_t instantiation function for generic protocol witness table for <> Slice<A>( uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)a3 + 8LL);
  uint64_t result = MEMORY[0x186E20D4C](MEMORY[0x18961A5E0], a2, &v5);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t default associated conformance accessor for DataProtocol.Collection.SubSequence: DataProtocol( uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = a3;
  return MEMORY[0x186E20D4C](&protocol conformance descriptor for <> Slice<A>, a1, &v4);
}

uint64_t dispatch thunk of DataProtocol.regions.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 64))();
}

uint64_t dispatch thunk of DataProtocol.firstRange<A, B>(of:in:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return (*(uint64_t (**)(void))(a8 + 72))();
}

uint64_t dispatch thunk of DataProtocol.lastRange<A, B>(of:in:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return (*(uint64_t (**)(void))(a8 + 80))();
}

uint64_t dispatch thunk of DataProtocol.copyBytes(to:count:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 88))();
}

uint64_t dispatch thunk of DataProtocol.copyBytes<A>(to:count:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return (*(uint64_t (**)(void))(a6 + 96))();
}

uint64_t dispatch thunk of DataProtocol.copyBytes<A>(to:from:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return (*(uint64_t (**)(void))(a7 + 104))();
}

uint64_t dispatch thunk of DataProtocol.copyBytes<A, B>(to:from:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return (*(uint64_t (**)(void))(a8 + 112))();
}

uint64_t dispatch thunk of MutableDataProtocol.resetBytes<A>(in:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 32))();
}

uint64_t specialized RandomAccessCollection<>.distance(from:to:)( uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  return ((uint64_t (*)(void))((char *)&loc_18306FB20 + *((int *)qword_18306FBC8 + (a4 >> 62))))();
}

uint64_t sub_18306FB34@<X0>(uint64_t a1@<X0>, uint64_t a2@<X3>, unsigned int a3@<W8>)
{
  if (BYTE6(a2) < a1 || a1 < 0)
  {
    __break(1u);
    JUMPOUT(0x18306FBC0LL);
  }

  return ((uint64_t (*)(void))((char *)&loc_18306FB70 + *((int *)qword_18306FBD8 + a3)))();
}

uint64_t protocol witness for DataProtocol.firstRange<A, B>(of:in:) in conformance UnsafeRawBufferPointer@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  return protocol witness for DataProtocol.firstRange<A, B>(of:in:) in conformance UnsafeRawBufferPointer( a1,  a2,  a3,  a4,  a5,  a6,  a7,  (uint64_t (*)(uint64_t, uint64_t, void, void, uint64_t, uint64_t, uint64_t, uint64_t))specialized DataProtocol.firstRange<A, B>(of:in:));
}

uint64_t protocol witness for DataProtocol.lastRange<A, B>(of:in:) in conformance UnsafeRawBufferPointer@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  return protocol witness for DataProtocol.firstRange<A, B>(of:in:) in conformance UnsafeRawBufferPointer( a1,  a2,  a3,  a4,  a5,  a6,  a7,  (uint64_t (*)(uint64_t, uint64_t, void, void, uint64_t, uint64_t, uint64_t, uint64_t))specialized DataProtocol.lastRange<A, B>(of:in:));
}

uint64_t protocol witness for DataProtocol.copyBytes(to:count:) in conformance UnsafeRawBufferPointer( uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3[1];
  uint64_t v5 = v4 - *v3;
  if (!*v3) {
    uint64_t v5 = 0LL;
  }
  if ((a3 & 0x8000000000000000LL) == 0 && v5 >= a3) {
    return specialized DataProtocol.copyBytes<A>(to:from:)(result, a2, 0LL, a3, *v3, v4);
  }
  __break(1u);
  return result;
}

uint64_t protocol witness for DataProtocol.copyBytes<A>(to:count:) in conformance UnsafeRawBufferPointer( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return specialized DataProtocol.copyBytes<A>(to:count:)(a1, a2, a3, *v4, v4[1], a4);
}

uint64_t protocol witness for DataProtocol.copyBytes<A>(to:from:) in conformance UnsafeRawBufferPointer( uint64_t a1, uint64_t a2, uint64_t a3)
{
  return specialized DataProtocol.copyBytes<A>(to:from:)(a1, a2, a3, *v3, v3[1]);
}

uint64_t protocol witness for DataProtocol.copyBytes<A, B>(to:from:) in conformance UnsafeRawBufferPointer( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return specialized DataProtocol.copyBytes<A, B>(to:from:)( a1,  a2,  a3,  *v6,  v6[1],  a4,  a5,  a6,  (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))specialized DataProtocol.copyBytes<A>(to:from:));
}

uint64_t protocol witness for DataProtocol.firstRange<A, B>(of:in:) in conformance <A> UnsafeBufferPointer<A>@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  return protocol witness for DataProtocol.firstRange<A, B>(of:in:) in conformance UnsafeRawBufferPointer( a1,  a2,  a3,  a4,  a5,  a6,  a7,  (uint64_t (*)(uint64_t, uint64_t, void, void, uint64_t, uint64_t, uint64_t, uint64_t))specialized DataProtocol.firstRange<A, B>(of:in:));
}

uint64_t protocol witness for DataProtocol.lastRange<A, B>(of:in:) in conformance <A> UnsafeBufferPointer<A>@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  return protocol witness for DataProtocol.firstRange<A, B>(of:in:) in conformance UnsafeRawBufferPointer( a1,  a2,  a3,  a4,  a5,  a6,  a7,  (uint64_t (*)(uint64_t, uint64_t, void, void, uint64_t, uint64_t, uint64_t, uint64_t))specialized DataProtocol.lastRange<A, B>(of:in:));
}

uint64_t protocol witness for DataProtocol.copyBytes(to:count:) in conformance <A> UnsafeBufferPointer<A>( uint64_t result, uint64_t a2, uint64_t a3)
{
  if ((a3 & 0x8000000000000000LL) == 0) {
    return specialized DataProtocol.copyBytes<A>(to:from:)(result, a2, 0LL, a3, *v3, v3[1]);
  }
  __break(1u);
  return result;
}

uint64_t protocol witness for DataProtocol.copyBytes<A>(to:count:) in conformance <A> UnsafeBufferPointer<A>( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return specialized DataProtocol.copyBytes<A>(to:count:)(a1, a2, a3, *v4, v4[1], a4);
}

uint64_t protocol witness for DataProtocol.copyBytes<A>(to:from:) in conformance <A> UnsafeBufferPointer<A>( uint64_t a1, uint64_t a2, uint64_t a3)
{
  return specialized DataProtocol.copyBytes<A>(to:from:)(a1, a2, a3, *v3, v3[1]);
}

uint64_t protocol witness for DataProtocol.copyBytes<A, B>(to:from:) in conformance <A> UnsafeBufferPointer<A>( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return specialized DataProtocol.copyBytes<A, B>(to:from:)( a1,  a2,  a3,  *v6,  v6[1],  a4,  a5,  a6,  (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))specialized DataProtocol.copyBytes<A>(to:from:));
}

uint64_t protocol witness for DataProtocol.firstRange<A, B>(of:in:) in conformance DispatchData.Region@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  return protocol witness for DataProtocol.firstRange<A, B>(of:in:) in conformance DispatchData.Region( a1,  a2,  a3,  a4,  a5,  a6,  a7,  (uint64_t (*)(uint64_t, uint64_t, void, void, void, uint64_t, uint64_t, uint64_t, uint64_t))specialized DataProtocol.firstRange<A, B>(of:in:));
}

uint64_t protocol witness for DataProtocol.lastRange<A, B>(of:in:) in conformance DispatchData.Region@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  return protocol witness for DataProtocol.firstRange<A, B>(of:in:) in conformance DispatchData.Region( a1,  a2,  a3,  a4,  a5,  a6,  a7,  (uint64_t (*)(uint64_t, uint64_t, void, void, void, uint64_t, uint64_t, uint64_t, uint64_t))specialized DataProtocol.lastRange<A, B>(of:in:));
}

uint64_t protocol witness for DataProtocol.firstRange<A, B>(of:in:) in conformance DispatchData.Region@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>, uint64_t (*a8)(uint64_t, uint64_t, void, void, void, uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t result = a8(a1, a2, *v8, v8[1], v8[2], a3, a4, a5, a6);
  *(void *)a7 = result;
  *(void *)(a7 + 8) = v11;
  *(_BYTE *)(a7 + 16) = v12 & 1;
  return result;
}

uint64_t protocol witness for DataProtocol.copyBytes(to:count:) in conformance DispatchData.Region( uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = v3[2];
  uint64_t v6 = v5 + a3;
  if (__OFADD__(v5, a3))
  {
    __break(1u);
    goto LABEL_9;
  }

  uint64_t v7 = v3[1];
  uint64_t v8 = v5 + v7;
  if (__OFADD__(v5, v7))
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }

  if (v6 >= v5)
  {
    BOOL v10 = __OFSUB__(v8, v6);
    BOOL v9 = v8 - v6 < 0;
  }

  else
  {
    BOOL v10 = 0;
    BOOL v9 = 1;
  }

  if (v9 == v10) {
    return specialized DataProtocol.copyBytes<A>(to:from:)(result, a2, v5, v6, *v3, v7, v3[2]);
  }
LABEL_10:
  __break(1u);
  return result;
}

uint64_t protocol witness for DataProtocol.copyBytes<A>(to:count:) in conformance DispatchData.Region( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return specialized DataProtocol.copyBytes<A>(to:count:)(a1, a2, a3, *v4, v4[1], v4[2], a4);
}

uint64_t protocol witness for DataProtocol.copyBytes<A>(to:from:) in conformance DispatchData.Region( uint64_t a1, uint64_t a2, uint64_t a3)
{
  return specialized DataProtocol.copyBytes<A>(to:from:)(a1, a2, a3, *v3, v3[1], v3[2]);
}

uint64_t protocol witness for DataProtocol.copyBytes<A, B>(to:from:) in conformance DispatchData.Region( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return specialized DataProtocol.copyBytes<A, B>(to:from:)(a1, a2, a3, *v4, v4[1], v4[2], a4);
}

uint64_t protocol witness for DataProtocol.firstRange<A, B>(of:in:) in conformance DispatchData@<X0>( uint64_t a1@<X8>)
{
  return protocol witness for DataProtocol.firstRange<A, B>(of:in:) in conformance DispatchData( a1,  (uint64_t (*)(void))specialized DataProtocol.firstRange<A, B>(of:in:));
}

uint64_t protocol witness for DataProtocol.lastRange<A, B>(of:in:) in conformance DispatchData@<X0>( uint64_t a1@<X8>)
{
  return protocol witness for DataProtocol.firstRange<A, B>(of:in:) in conformance DispatchData( a1,  (uint64_t (*)(void))specialized DataProtocol.lastRange<A, B>(of:in:));
}

uint64_t protocol witness for DataProtocol.firstRange<A, B>(of:in:) in conformance DispatchData@<X0>( uint64_t a1@<X8>, uint64_t (*a2)(void))
{
  uint64_t result = a2();
  *(void *)a1 = result;
  *(void *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = v5 & 1;
  return result;
}

uint64_t protocol witness for DataProtocol.copyBytes(to:count:) in conformance DispatchData( uint64_t a1, uint64_t a2)
{
  uint64_t result = dispatch thunk of RandomAccessCollection.index(_:offsetBy:)();
  if (v5 >= v6) {
    return specialized DataProtocol.copyBytes<A>(to:from:)(a1, a2, v6, v5);
  }
  __break(1u);
  return result;
}

uint64_t specialized Data.replaceSubrange<A>(_:with:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  v13[5] = a3;
  char v14 = a4;
  uint64_t v11 = a3;
  char v12 = a4;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Repeated<UInt8>);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ContiguousBytes);
  if (swift_dynamicCast())
  {
    outlined init with take of any PredicateExpression<Self.Output == B1>(v9, (uint64_t)v13);
    uint64_t v5 = v13[4];
    uint64_t v6 = __swift_project_boxed_opaque_existential_1(v13, v13[3]);
    MEMORY[0x1895F8858](v6);
    (*(void (**)(void (*)()))(v5 + 8))(partial apply for closure #1 in Data.replaceSubrange<A>(_:with:));
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v13);
  }

  else
  {
    uint64_t v10 = 0LL;
    memset(v9, 0, sizeof(v9));
    uint64_t v8 = outlined destroy of Any?((uint64_t)v9, &demangling cache variable for type metadata for ContiguousBytes?);
    MEMORY[0x1895F8858](v8);
    return _withStackOrHeapBuffer(capacity:_:)( a3,  (void (*)(uint64_t, uint64_t))partial apply for specialized closure #3 in Data.replaceSubrange<A>(_:with:));
  }

void specialized closure #3 in Data.replaceSubrange<A>(_:with:)( int8x16_t *a1, uint64_t a2, uint64_t a3, char a4)
{
  if (a1 && a2)
  {
    if (a2 < 0)
    {
LABEL_24:
      __break(1u);
      goto LABEL_25;
    }

    if (a3)
    {
      unint64_t v6 = a3 & ~(a3 >> 63);
      unint64_t v7 = a2 - 1;
      unint64_t v8 = a3 - 1;
      if (v6 < a3 - 1) {
        unint64_t v8 = a3 & ~(a3 >> 63);
      }
      if (v7 >= v8) {
        unint64_t v7 = v8;
      }
      if (v7 > 0xF)
      {
        unint64_t v12 = v7 + 1;
        uint64_t v13 = v12 & 0xF;
        if ((v12 & 0xF) == 0) {
          uint64_t v13 = 16LL;
        }
        uint64_t v9 = v12 - v13;
        uint64_t v10 = v9 + 1;
        uint64_t v11 = (int8x16_t *)((char *)a1 + v9);
        int8x16_t v14 = vdupq_n_s8(a4);
        uint64_t v15 = v9;
        uint64_t v16 = a1;
        do
        {
          *v16++ = v14;
          v15 -= 16LL;
        }

        while (v15);
      }

      else
      {
        uint64_t v9 = 0LL;
        uint64_t v10 = 1LL;
        uint64_t v11 = a1;
      }

      uint64_t v17 = a3 + 1;
      do
      {
        BOOL v5 = __OFSUB__(v9, v6);
        BOOL v4 = (uint64_t)(v9 - v6) < 0;
        if (v9 == v6) {
          goto LABEL_23;
        }
        uint64_t v9 = v10;
        v11->i8[0] = a4;
        if (a2 == v10) {
          goto LABEL_12;
        }
        uint64_t v11 = (int8x16_t *)((char *)v11 + 1);
        ++v10;
        BOOL v5 = __OFSUB__(v17, v9 + 1);
        BOOL v4 = a3 - v9 < 0;
      }

      while (v17 != v9 + 1);
    }

uint64_t protocol witness for DataProtocol.firstRange<A, B>(of:in:) in conformance Data@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  return protocol witness for DataProtocol.firstRange<A, B>(of:in:) in conformance UnsafeRawBufferPointer( a1,  a2,  a3,  a4,  a5,  a6,  a7,  (uint64_t (*)(uint64_t, uint64_t, void, void, uint64_t, uint64_t, uint64_t, uint64_t))specialized DataProtocol.firstRange<A, B>(of:in:));
}

uint64_t protocol witness for DataProtocol.lastRange<A, B>(of:in:) in conformance Data@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  return protocol witness for DataProtocol.firstRange<A, B>(of:in:) in conformance UnsafeRawBufferPointer( a1,  a2,  a3,  a4,  a5,  a6,  a7,  (uint64_t (*)(uint64_t, uint64_t, void, void, uint64_t, uint64_t, uint64_t, uint64_t))specialized DataProtocol.lastRange<A, B>(of:in:));
}

uint64_t protocol witness for DataProtocol.firstRange<A, B>(of:in:) in conformance UnsafeRawBufferPointer@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>, uint64_t (*a8)(uint64_t, uint64_t, void, void, uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t result = a8(a1, a2, *v8, v8[1], a3, a4, a5, a6);
  *(void *)a7 = result;
  *(void *)(a7 + 8) = v11;
  *(_BYTE *)(a7 + 16) = v12 & 1;
  return result;
}

void protocol witness for DataProtocol.copyBytes(to:count:) in conformance Data()
{
  __asm { BR              X10 }

uint64_t sub_18307033C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = specialized RandomAccessCollection<>.index(_:offsetBy:)((int)v3, a3, v3);
  if (v7 < (int)v3)
  {
    __break(1u);
    JUMPOUT(0x183070394LL);
  }

  return specialized DataProtocol.copyBytes<A>(to:from:)(v6, v5, (int)v3, v7, v3, v4);
}

void protocol witness for DataProtocol.copyBytes<A>(to:count:) in conformance Data( uint64_t a1, uint64_t a2, uint64_t a3)
{
}

uint64_t protocol witness for DataProtocol.copyBytes<A>(to:from:) in conformance Data( uint64_t a1, uint64_t a2, uint64_t a3)
{
  return specialized DataProtocol.copyBytes<A>(to:from:)(a1, a2, a3, *(void *)v3, *(void *)(v3 + 8));
}

uint64_t protocol witness for DataProtocol.copyBytes<A, B>(to:from:) in conformance Data( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return specialized DataProtocol.copyBytes<A, B>(to:from:)( a1,  a2,  a3,  *v6,  v6[1],  a4,  a5,  a6,  (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))specialized DataProtocol.copyBytes<A>(to:from:));
}

uint64_t protocol witness for DataProtocol.firstRange<A, B>(of:in:) in conformance <A> [A]@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  return protocol witness for DataProtocol.firstRange<A, B>(of:in:) in conformance <A> [A]( a1,  a2,  a3,  a4,  a5,  a6,  a7,  (uint64_t (*)(uint64_t, uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t))specialized DataProtocol.firstRange<A, B>(of:in:));
}

uint64_t protocol witness for DataProtocol.lastRange<A, B>(of:in:) in conformance <A> [A]@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  return protocol witness for DataProtocol.firstRange<A, B>(of:in:) in conformance <A> [A]( a1,  a2,  a3,  a4,  a5,  a6,  a7,  (uint64_t (*)(uint64_t, uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t))specialized DataProtocol.lastRange<A, B>(of:in:));
}

uint64_t protocol witness for DataProtocol.copyBytes(to:count:) in conformance <A> [A]( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return protocol witness for DataProtocol.copyBytes(to:count:) in conformance <A> [A]( a1,  a2,  a3,  a4,  a5,  (void (*)(uint64_t, uint64_t))MEMORY[0x18961B120],  (void (*)(uint64_t, uint64_t))MEMORY[0x18961B110]);
}

uint64_t protocol witness for DataProtocol.copyBytes<A>(to:count:) in conformance <A> [A]( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return specialized DataProtocol.copyBytes<A>(to:count:)( a1,  a2,  a3,  *v4,  a4,  (void (*)(uint64_t, uint64_t))MEMORY[0x18961B120],  (void (*)(uint64_t, uint64_t))MEMORY[0x18961B110]);
}

uint64_t protocol witness for DataProtocol.copyBytes<A>(to:from:) in conformance <A> [A]( uint64_t a1, uint64_t a2, uint64_t a3)
{
  return specialized DataProtocol.copyBytes<A>(to:from:)(a1, a2, a3, *v3);
}

uint64_t protocol witness for DataProtocol.copyBytes<A, B>(to:from:) in conformance <A> [A]( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return specialized DataProtocol.copyBytes<A, B>(to:from:)( a1,  a2,  a3,  *v6,  a4,  a5,  a6,  (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))specialized DataProtocol.copyBytes<A>(to:from:));
}

uint64_t protocol witness for DataProtocol.firstRange<A, B>(of:in:) in conformance <A> ArraySlice<A>@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  return protocol witness for DataProtocol.firstRange<A, B>(of:in:) in conformance <A> ArraySlice<A>( a1,  a2,  a3,  a4,  a5,  a6,  a7,  (uint64_t (*)(uint64_t, uint64_t, void, void, void, void, uint64_t, uint64_t, uint64_t, uint64_t))specialized DataProtocol.firstRange<A, B>(of:in:));
}

uint64_t protocol witness for DataProtocol.lastRange<A, B>(of:in:) in conformance <A> ArraySlice<A>@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  return protocol witness for DataProtocol.firstRange<A, B>(of:in:) in conformance <A> ArraySlice<A>( a1,  a2,  a3,  a4,  a5,  a6,  a7,  (uint64_t (*)(uint64_t, uint64_t, void, void, void, void, uint64_t, uint64_t, uint64_t, uint64_t))specialized DataProtocol.lastRange<A, B>(of:in:));
}

uint64_t protocol witness for DataProtocol.firstRange<A, B>(of:in:) in conformance <A> ArraySlice<A>@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>, uint64_t (*a8)(uint64_t, uint64_t, void, void, void, void, uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t result = a8(a1, a2, *v8, v8[1], v8[2], v8[3], a3, a4, a5, a6);
  *(void *)a7 = result;
  *(void *)(a7 + 8) = v11;
  *(_BYTE *)(a7 + 16) = v12 & 1;
  return result;
}

uint64_t protocol witness for DataProtocol.copyBytes(to:count:) in conformance <A> ArraySlice<A>( uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(v3 + 16);
  uint64_t v6 = v5 + a3;
  if (__OFADD__(v5, a3))
  {
    __break(1u);
  }

  else if (v6 >= v5)
  {
    return specialized DataProtocol.copyBytes<A>(to:from:)( result,  a2,  v5,  v6,  *(void *)v3,  *(void *)(v3 + 8),  *(void *)(v3 + 16),  *(void *)(v3 + 24));
  }

  __break(1u);
  return result;
}

uint64_t protocol witness for DataProtocol.copyBytes<A>(to:count:) in conformance <A> ArraySlice<A>( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return specialized DataProtocol.copyBytes<A>(to:count:)( a1,  a2,  a3,  *(void *)v4,  *(void *)(v4 + 8),  *(void *)(v4 + 16),  *(void *)(v4 + 24),  a4);
}

uint64_t protocol witness for DataProtocol.copyBytes<A>(to:from:) in conformance <A> ArraySlice<A>( uint64_t a1, uint64_t a2, uint64_t a3)
{
  return specialized DataProtocol.copyBytes<A>(to:from:)( a1,  a2,  a3,  *(void *)v3,  *(void *)(v3 + 8),  *(void *)(v3 + 16),  *(void *)(v3 + 24));
}

uint64_t protocol witness for DataProtocol.copyBytes<A, B>(to:from:) in conformance <A> ArraySlice<A>( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return specialized DataProtocol.copyBytes<A, B>(to:from:)( a1,  a2,  a3,  *(void *)v4,  *(void *)(v4 + 8),  *(void *)(v4 + 16),  *(void *)(v4 + 24),  a4);
}

uint64_t protocol witness for DataProtocol.firstRange<A, B>(of:in:) in conformance <A> ContiguousArray<A>@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  return protocol witness for DataProtocol.firstRange<A, B>(of:in:) in conformance <A> [A]( a1,  a2,  a3,  a4,  a5,  a6,  a7,  (uint64_t (*)(uint64_t, uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t))specialized DataProtocol.firstRange<A, B>(of:in:));
}

uint64_t protocol witness for DataProtocol.lastRange<A, B>(of:in:) in conformance <A> ContiguousArray<A>@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  return protocol witness for DataProtocol.firstRange<A, B>(of:in:) in conformance <A> [A]( a1,  a2,  a3,  a4,  a5,  a6,  a7,  (uint64_t (*)(uint64_t, uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t))specialized DataProtocol.lastRange<A, B>(of:in:));
}

uint64_t protocol witness for DataProtocol.firstRange<A, B>(of:in:) in conformance <A> [A]@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>, uint64_t (*a8)(uint64_t, uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t result = a8(a1, a2, *v8, a3, a4, a5, a6);
  *(void *)a7 = result;
  *(void *)(a7 + 8) = v11;
  *(_BYTE *)(a7 + 16) = v12 & 1;
  return result;
}

uint64_t protocol witness for DataProtocol.copyBytes(to:count:) in conformance <A> ContiguousArray<A>( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return protocol witness for DataProtocol.copyBytes(to:count:) in conformance <A> [A]( a1,  a2,  a3,  a4,  a5,  (void (*)(uint64_t, uint64_t))MEMORY[0x18961B3E8],  (void (*)(uint64_t, uint64_t))MEMORY[0x18961B3D0]);
}

uint64_t protocol witness for DataProtocol.copyBytes(to:count:) in conformance <A> [A]( uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void (*a6)(uint64_t, uint64_t), void (*a7)(uint64_t, uint64_t))
{
  if ((a3 & 0x8000000000000000LL) == 0) {
    return specialized DataProtocol.copyBytes<A>(to:from:)(result, a2, 0LL, a3, *v7, a6, a7);
  }
  __break(1u);
  return result;
}

uint64_t protocol witness for DataProtocol.copyBytes<A>(to:count:) in conformance <A> ContiguousArray<A>( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return specialized DataProtocol.copyBytes<A>(to:count:)( a1,  a2,  a3,  *v4,  a4,  (void (*)(uint64_t, uint64_t))MEMORY[0x18961B3E8],  (void (*)(uint64_t, uint64_t))MEMORY[0x18961B3D0]);
}

uint64_t protocol witness for DataProtocol.copyBytes<A>(to:from:) in conformance <A> ContiguousArray<A>( uint64_t a1, uint64_t a2, uint64_t a3)
{
  return specialized DataProtocol.copyBytes<A>(to:from:)(a1, a2, a3, *v3);
}

uint64_t protocol witness for DataProtocol.copyBytes<A, B>(to:from:) in conformance <A> ContiguousArray<A>( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return specialized DataProtocol.copyBytes<A, B>(to:from:)( a1,  a2,  a3,  *v6,  a4,  a5,  a6,  (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))specialized DataProtocol.copyBytes<A>(to:from:));
}

uint64_t protocol witness for DataProtocol.firstRange<A, B>(of:in:) in conformance <A> EmptyCollection<A>@<X0>( uint64_t a1@<X8>)
{
  return protocol witness for DataProtocol.firstRange<A, B>(of:in:) in conformance DispatchData( a1,  specialized DataProtocol.firstRange<A, B>(of:in:));
}

uint64_t protocol witness for DataProtocol.lastRange<A, B>(of:in:) in conformance <A> EmptyCollection<A>@<X0>( uint64_t a1@<X8>)
{
  return protocol witness for DataProtocol.firstRange<A, B>(of:in:) in conformance DispatchData( a1,  specialized DataProtocol.lastRange<A, B>(of:in:));
}

uint64_t protocol witness for DataProtocol.copyBytes(to:count:) in conformance <A> EmptyCollection<A>( uint64_t result)
{
  if (result) {
    return 0LL;
  }
  __break(1u);
  return result;
}

uint64_t protocol witness for DataProtocol.copyBytes<A>(to:count:) in conformance <A> EmptyCollection<A>( uint64_t result)
{
  return protocol witness for DataProtocol.copyBytes(to:count:) in conformance <A> EmptyCollection<A>(result);
}

uint64_t protocol witness for DataProtocol.firstRange<A, B>(of:in:) in conformance <A> Repeated<A>@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  return protocol witness for DataProtocol.firstRange<A, B>(of:in:) in conformance <A> Repeated<A>( a1,  a2,  a3,  a4,  a5,  a6,  a7,  (uint64_t (*)(uint64_t, uint64_t, void, void, uint64_t, uint64_t, uint64_t, uint64_t))specialized DataProtocol.firstRange<A, B>(of:in:));
}

uint64_t protocol witness for DataProtocol.lastRange<A, B>(of:in:) in conformance <A> Repeated<A>@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  return protocol witness for DataProtocol.firstRange<A, B>(of:in:) in conformance <A> Repeated<A>( a1,  a2,  a3,  a4,  a5,  a6,  a7,  (uint64_t (*)(uint64_t, uint64_t, void, void, uint64_t, uint64_t, uint64_t, uint64_t))specialized DataProtocol.lastRange<A, B>(of:in:));
}

uint64_t protocol witness for DataProtocol.firstRange<A, B>(of:in:) in conformance <A> Repeated<A>@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>, uint64_t (*a8)(uint64_t, uint64_t, void, void, uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t result = a8(a1, a2, *(void *)v8, *(unsigned __int8 *)(v8 + 8), a3, a4, a5, a6);
  *(void *)a7 = result;
  *(void *)(a7 + 8) = v11;
  *(_BYTE *)(a7 + 16) = v12 & 1;
  return result;
}

uint64_t protocol witness for DataProtocol.copyBytes(to:count:) in conformance <A> Repeated<A>( uint64_t result, uint64_t a2, uint64_t a3)
{
  if ((a3 & 0x8000000000000000LL) == 0 && *(void *)v3 >= a3) {
    return specialized DataProtocol.copyBytes<A>(to:from:)(result, a2, 0LL, a3, *(void *)v3, *(_BYTE *)(v3 + 8));
  }
  __break(1u);
  return result;
}

uint64_t protocol witness for DataProtocol.copyBytes<A>(to:count:) in conformance <A> Repeated<A>( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return specialized DataProtocol.copyBytes<A>(to:count:)(a1, a2, a3, *(void *)v4, *(_BYTE *)(v4 + 8), a4);
}

uint64_t protocol witness for DataProtocol.copyBytes<A>(to:from:) in conformance <A> Repeated<A>( uint64_t a1, uint64_t a2, uint64_t a3)
{
  return specialized DataProtocol.copyBytes<A>(to:from:)(a1, a2, a3, *(void *)v3, *(_BYTE *)(v3 + 8));
}

uint64_t protocol witness for DataProtocol.copyBytes<A, B>(to:from:) in conformance <A> Repeated<A>( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return specialized DataProtocol.copyBytes<A, B>(to:from:)(a1, a2, a3, *(void *)v4, *(_BYTE *)(v4 + 8), a4);
}

uint64_t protocol witness for MutableDataProtocol.resetBytes<A>(in:) in conformance <A> [A]( uint64_t a1, uint64_t a2, uint64_t a3)
{
  return specialized MutableDataProtocol.resetBytes<A>(in:)( a1,  a2,  a3,  &demangling cache variable for type metadata for [UInt8],  &lazy protocol witness table cache variable for type [UInt8] and conformance [A],  MEMORY[0x189618488],  (uint64_t (*)(void))specialized Array.replaceSubrange<A>(_:with:));
}

uint64_t protocol witness for MutableDataProtocol.resetBytes<A>(in:) in conformance <A> ContiguousArray<A>( uint64_t a1, uint64_t a2, uint64_t a3)
{
  return specialized MutableDataProtocol.resetBytes<A>(in:)( a1,  a2,  a3,  &demangling cache variable for type metadata for ContiguousArray<UInt8>,  &lazy protocol witness table cache variable for type ContiguousArray<UInt8> and conformance ContiguousArray<A>,  MEMORY[0x189619590],  (uint64_t (*)(void))specialized ContiguousArray.replaceSubrange<A>(_:with:));
}

uint64_t specialized closure #1 in Slice<>.regions.getter@<X0>( uint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X3>, uint64_t *a4@<X4>, uint64_t a5@<X8>)
{
  uint64_t result = specialized closure #1 in Slice<>.regions.getter(*a1, a1[1], a2, *a3, *a4, (uint64_t)v8);
  if (!v5) {
    return outlined init with take of LocalePreferences?( (uint64_t)v8,  a5,  &demangling cache variable for type metadata for Slice<UnsafeBufferPointer<UInt8>>?);
  }
  return result;
}

uint64_t specialized closure #1 in Slice<>.regions.getter@<X0>( uint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X3>, uint64_t *a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t result = specialized closure #1 in Slice<>.regions.getter( *a1,  a1[1],  a2,  *(void *)(a3 + 16),  *(void *)(a3 + 24),  *a4,  *a5,  (uint64_t)v9);
  if (!v6) {
    return outlined init with take of LocalePreferences?( (uint64_t)v9,  a6,  &demangling cache variable for type metadata for Slice<UnsafeRawBufferPointer>?);
  }
  return result;
}

uint64_t specialized DataProtocol.matches<A>(_:from:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v42 = a4;
  uint64_t v39 = a3;
  uint64_t v11 = *(void *)(*(void *)(*(void *)(a7 + 8) + 8LL) + 8LL);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v38 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v13 = MEMORY[0x1895F8858](AssociatedTypeWitness);
  uint64_t v36 = (char *)&v34 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = MEMORY[0x1895F8858](v13);
  uint64_t v37 = (char *)&v34 - v16;
  MEMORY[0x1895F8858](v15);
  uint64_t v18 = (char *)&v34 - v17;
  uint64_t result = dispatch thunk of Collection.startIndex.getter();
  int64_t v40 = a5 >> 1;
  uint64_t v41 = a2;
  uint64_t v35 = (a5 >> 1) - 1;
  uint64_t v20 = v36;
  uint64_t v21 = v37;
  while (v41 >= v42 && a2 < v40)
  {
    int v22 = *(unsigned __int8 *)(v39 + a2);
    uint64_t v23 = (void (*)(_BYTE *, void))dispatch thunk of Collection.subscript.read();
    int v25 = *v24;
    v23(v44, 0LL);
    if (v22 != v25)
    {
      char v32 = 0;
      uint64_t v30 = *(void (**)(char *, uint64_t))(v38 + 8);
LABEL_10:
      v30(v18, AssociatedTypeWitness);
      return v32 & 1;
    }

    uint64_t v26 = a1;
    uint64_t v27 = v11;
    uint64_t v28 = a6;
    uint64_t v29 = v38;
    uint64_t v43 = *(void (**)(char *, char *, uint64_t))(v38 + 16);
    v43(v20, v18, AssociatedTypeWitness);
    dispatch thunk of Collection.index(after:)();
    uint64_t v30 = *(void (**)(char *, uint64_t))(v29 + 8);
    v30(v20, AssociatedTypeWitness);
    v30(v18, AssociatedTypeWitness);
    uint64_t v31 = *(void (**)(char *, char *, uint64_t))(v29 + 32);
    a6 = v28;
    uint64_t v11 = v27;
    v31(v18, v21, AssociatedTypeWitness);
    v43(v21, v18, AssociatedTypeWitness);
    a1 = v26;
    dispatch thunk of Collection.endIndex.getter();
    swift_getAssociatedConformanceWitness();
    char v32 = dispatch thunk of static Equatable.== infix(_:_:)();
    v30(v20, AssociatedTypeWitness);
    uint64_t result = ((uint64_t (*)(char *, uint64_t))v30)(v21, AssociatedTypeWitness);
    if ((v32 & 1) == 0 && v35 != a2++) {
      continue;
    }
    goto LABEL_10;
  }

  __break(1u);
  return result;
}

void partial apply for specialized closure #3 in Data.replaceSubrange<A>(_:with:)(int8x16_t *a1, uint64_t a2)
{
}

void partial apply for closure #1 in Data.replaceSubrange<A>(_:with:)()
{
}

uint64_t partial apply for specialized closure #1 in Slice<>.regions.getter@<X0>( uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  return partial apply for specialized closure #1 in Slice<>.regions.getter(a1, a2);
}

{
  uint64_t **v2;
  return specialized closure #1 in Slice<>.regions.getter(*a1, a1[1], a1[2], v2[2], *v2[4], *v2[5], a2);
}

{
  return partial apply for specialized closure #1 in Slice<>.regions.getter(a1, a2);
}

{
  void *v2;
  void *v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  _OWORD v12[2];
  uint64_t v13;
  uint64_t v3 = (void *)v2[2];
  uint64_t v4 = v2[3];
  uint64_t v5 = (uint64_t *)v2[4];
  uint64_t v6 = (uint64_t *)v2[5];
  uint64_t v8 = *a1;
  uint64_t v7 = a1[1];
  uint64_t v9 = a1[2];
  uint64_t v10 = *(_OWORD *)(v4 + 16);
  v12[0] = *(_OWORD *)v4;
  v12[1] = v10;
  uint64_t v13 = *(void *)(v4 + 32);
  return specialized closure #1 in Slice<>.regions.getter(v8, v7, v9, v3, (uint64_t)v12, *v5, *v6, a2);
}

{
  uint64_t **v2;
  return specialized closure #1 in Slice<>.regions.getter(a1, v2[2], v2[4], v2[5], a2);
}

{
  uint64_t v2;
  return specialized closure #1 in Slice<>.regions.getter( a1,  *(uint64_t **)(v2 + 16),  *(void *)(v2 + 24),  *(uint64_t **)(v2 + 32),  *(uint64_t **)(v2 + 40),  a2);
}

uint64_t lazy protocol witness table accessor for type DispatchData and conformance DispatchData( unint64_t *a1, uint64_t a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    uint64_t v5 = type metadata accessor for DispatchData();
    uint64_t result = MEMORY[0x186E20D4C](a2, v5);
    atomic_store(result, a1);
  }

  return result;
}

unint64_t lazy protocol witness table accessor for type DispatchData.Region and conformance DispatchData.Region()
{
  unint64_t result = lazy protocol witness table cache variable for type DispatchData.Region and conformance DispatchData.Region;
  if (!lazy protocol witness table cache variable for type DispatchData.Region and conformance DispatchData.Region)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for DispatchData.Region,  &type metadata for DispatchData.Region);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type DispatchData.Region and conformance DispatchData.Region);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type DispatchData.Region and conformance DispatchData.Region;
  if (!lazy protocol witness table cache variable for type DispatchData.Region and conformance DispatchData.Region)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for DispatchData.Region,  &type metadata for DispatchData.Region);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type DispatchData.Region and conformance DispatchData.Region);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type DispatchData.Region and conformance DispatchData.Region;
  if (!lazy protocol witness table cache variable for type DispatchData.Region and conformance DispatchData.Region)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for DispatchData.Region,  &type metadata for DispatchData.Region);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type DispatchData.Region and conformance DispatchData.Region);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type DispatchData.Region and conformance DispatchData.Region;
  if (!lazy protocol witness table cache variable for type DispatchData.Region and conformance DispatchData.Region)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for DispatchData.Region,  &type metadata for DispatchData.Region);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type DispatchData.Region and conformance DispatchData.Region);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type DispatchData.Region and conformance DispatchData.Region;
  if (!lazy protocol witness table cache variable for type DispatchData.Region and conformance DispatchData.Region)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for DispatchData.Region,  &type metadata for DispatchData.Region);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type DispatchData.Region and conformance DispatchData.Region);
  }

  return result;
}

uint64_t specialized closure #1 in Slice<>.regions.getter@<X0>( uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v6 = *a3;
  uint64_t v7 = *a3 + a2;
  *a3 = v7;
  uint64_t v8 = a4 - v6;
  if (a4 >= v6 && v7 >= a5)
  {
    uint64_t v13 = a5 - v6;
    if (v13 >= v8)
    {
      char v14 = 0;
      goto LABEL_29;
    }

    __break(1u);
    goto LABEL_31;
  }

  if (a4 <= v6 && v7 <= a5)
  {
    if ((a2 & 0x8000000000000000LL) == 0)
    {
      char v14 = 0;
      uint64_t v8 = 0LL;
      uint64_t v13 = a2;
      goto LABEL_29;
    }

unint64_t lazy protocol witness table accessor for type UnsafeRawBufferPointer and conformance UnsafeRawBufferPointer()
{
  unint64_t result = lazy protocol witness table cache variable for type UnsafeRawBufferPointer and conformance UnsafeRawBufferPointer;
  if (!lazy protocol witness table cache variable for type UnsafeRawBufferPointer and conformance UnsafeRawBufferPointer)
  {
    unint64_t result = MEMORY[0x186E20D4C](MEMORY[0x1896181E8], MEMORY[0x1896181D0]);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type UnsafeRawBufferPointer and conformance UnsafeRawBufferPointer);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type UnsafeRawBufferPointer and conformance UnsafeRawBufferPointer;
  if (!lazy protocol witness table cache variable for type UnsafeRawBufferPointer and conformance UnsafeRawBufferPointer)
  {
    unint64_t result = MEMORY[0x186E20D4C](&protocol conformance descriptor for UnsafeRawBufferPointer, MEMORY[0x1896181D0]);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type UnsafeRawBufferPointer and conformance UnsafeRawBufferPointer);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type UnsafeRawBufferPointer and conformance UnsafeRawBufferPointer;
  if (!lazy protocol witness table cache variable for type UnsafeRawBufferPointer and conformance UnsafeRawBufferPointer)
  {
    unint64_t result = MEMORY[0x186E20D4C](MEMORY[0x1896181E0], MEMORY[0x1896181D0]);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type UnsafeRawBufferPointer and conformance UnsafeRawBufferPointer);
  }

  return result;
}

uint64_t specialized closure #1 in Slice<>.regions.getter@<X0>( uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  uint64_t v9 = *a3;
  if (result) {
    uint64_t v10 = a2 - result;
  }
  else {
    uint64_t v10 = 0LL;
  }
  uint64_t v11 = v9 + v10;
  if (__OFADD__(v9, v10))
  {
    __break(1u);
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }

  uint64_t v14 = a5 - a4;
  if (!a4) {
    uint64_t v14 = 0LL;
  }
  if (v11 < 0 || v14 < v11) {
    goto LABEL_34;
  }
  uint64_t v17 = result;
  *a3 = v11;
  if (v9 <= a6 && v11 >= a7)
  {
    unint64_t result = specialized RandomAccessCollection<>.distance(from:to:)(v9, a6, a4, a5);
    if ((result & 0x8000000000000000LL) == 0)
    {
      unint64_t v18 = result;
      if (v10 >= result)
      {
        unint64_t result = specialized RandomAccessCollection<>.distance(from:to:)(v9, a7, a4, a5);
        if ((result & 0x8000000000000000LL) == 0 && v10 >= result)
        {
          if (result >= v18)
          {
            char v19 = 0;
LABEL_17:
            uint64_t v20 = a2;
            uint64_t v21 = v17;
LABEL_32:
            *(void *)a8 = v18;
            *(void *)(a8 + 8) = result;
            *(void *)(a8 + 16) = v21;
            *(void *)(a8 + 24) = v20;
            *(_BYTE *)(a8 + 32) = v19;
            return result;
          }

          goto LABEL_37;
        }

uint64_t closure #1 in Slice<>.regions.getterspecialized partial apply@<X0>( uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  return partial apply for specialized closure #1 in Slice<>.regions.getter(a1, a2);
}

{
  return partial apply for specialized closure #1 in Slice<>.regions.getter(a1, a2);
}

ValueMetadata *type metadata accessor for SendableOSLog()
{
  return &type metadata for SendableOSLog;
}

unint64_t specialized Collection.formIndex(_:offsetBy:)( unint64_t *a1, uint64_t a2, unint64_t a3, unint64_t a4)
{
  unint64_t result = *a1;
  uint64_t v9 = (a3 >> 59) & 1;
  if ((a4 & 0x1000000000000000LL) == 0) {
    LOBYTE(v9) = 1;
  }
  if ((result & 0xC) != 4LL << v9)
  {
    if ((a4 & 0x1000000000000000LL) == 0) {
      goto LABEL_5;
    }
LABEL_13:
    unint64_t result = MEMORY[0x186E1B838]();
    goto LABEL_11;
  }

  unint64_t result = _StringGuts._slowEnsureMatchingEncoding(_:)(result, a3, a4);
  if ((a4 & 0x1000000000000000LL) != 0) {
    goto LABEL_13;
  }
LABEL_5:
  unint64_t v10 = a2 + (result >> 16);
  if (__OFADD__(a2, result >> 16))
  {
    __break(1u);
    goto LABEL_15;
  }

  if ((v10 & 0x8000000000000000LL) != 0)
  {
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }

  unint64_t v11 = HIBYTE(a4) & 0xF;
  if ((a4 & 0x2000000000000000LL) == 0) {
    unint64_t v11 = a3 & 0xFFFFFFFFFFFFLL;
  }
  if (v11 >= v10)
  {
    unint64_t result = (v10 << 16) | 4;
LABEL_11:
    *a1 = result;
    return result;
  }

BOOL NSDecimal.isNaN.getter(unint64_t a1, unint64_t a2, unsigned int a3)
{
  __int16 v3 = a3;
  __int16 v4 = a2;
  int v5 = a1;
  unint64_t v13 = a1;
  unint64_t v6 = HIDWORD(a1);
  unint64_t v7 = HIWORD(a1);
  unint64_t v8 = a2 >> 16;
  unint64_t v14 = a2;
  unint64_t v9 = HIDWORD(a2);
  unint64_t v10 = HIWORD(a2);
  unsigned int v11 = HIWORD(a3);
  unsigned int v15 = a3;
  LODWORD(v13) = v5;
  WORD2(v13) = v6;
  HIWORD(v13) = v7;
  LOWORD(v14) = v4;
  WORD1(v14) = v8;
  WORD2(v14) = v9;
  HIWORD(v14) = v10;
  LOWORD(v15) = v3;
  HIWORD(v15) = v11;
  return _So9NSDecimala__isNegative_getter(&v13) != 0;
}

uint64_t NSDecimal.subscript.setter(uint64_t result, int a2)
{
  switch(a2)
  {
    case 0:
      v2[2] = result;
      break;
    case 1:
      v2[3] = result;
      break;
    case 2:
      void v2[4] = result;
      break;
    case 3:
      v2[5] = result;
      break;
    case 4:
      v2[6] = result;
      break;
    case 5:
      v2[7] = result;
      break;
    case 6:
      v2[8] = result;
      break;
    case 7:
      v2[9] = result;
      break;
    default:
      _StringGuts.grow(_:)(30LL);
      swift_bridgeObjectRelease();
      v3._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v3);
      swift_bridgeObjectRelease();
      v4._uint64_t countAndFlagsBits = 0x616D5F20726F6620LL;
      v4._uint64_t object = (void *)0xEE0061737369746ELL;
      String.append(_:)(v4);
      unint64_t result = _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
      break;
  }

  return result;
}

void __swiftcall NSDecimal.init(integerLiteral:)(NSDecimal *__return_ptr retstr, Swift::Int integerLiteral)
{
  Swift::Int v2 = integerLiteral;
  unint64_t v7 = specialized NSDecimal.init(_:)(integerLiteral);
  int v8 = v3;
  __int16 v9 = v4;
  __int16 v10 = v5;
  int v11 = v6;
  if (v2 < 0) {
    _So9NSDecimala__isNegative_setter(1LL, &v7);
  }
}

uint64_t static NSDecimal.nan.getter()
{
  *(void *)&v1[1] = 0LL;
  *(void *)&v1[3] = 0LL;
  _So9NSDecimala__exponent_setter(0LL, v1);
  _So9NSDecimala__length_setter(0LL, v1);
  _So9NSDecimala__isNegative_setter(1LL, v1);
  _So9NSDecimala__isCompact_setter_0(0LL, v1);
  _So9NSDecimala__reserved_setter(v1);
  return *(void *)v1;
}

BOOL NSDecimal.isZero.getter(unint64_t a1, unint64_t a2, unsigned int a3)
{
  __int16 v3 = a3;
  __int16 v4 = a2;
  int v5 = a1;
  unint64_t v13 = a1;
  unint64_t v6 = HIDWORD(a1);
  unint64_t v7 = HIWORD(a1);
  unint64_t v8 = a2 >> 16;
  unint64_t v14 = a2;
  unint64_t v9 = HIDWORD(a2);
  unint64_t v10 = HIWORD(a2);
  unsigned int v11 = HIWORD(a3);
  unsigned int v15 = a3;
  LODWORD(v13) = v5;
  WORD2(v13) = v6;
  HIWORD(v13) = v7;
  LOWORD(v14) = v4;
  WORD1(v14) = v8;
  WORD2(v14) = v9;
  HIWORD(v14) = v10;
  LOWORD(v15) = v3;
  HIWORD(v15) = v11;
  return _So9NSDecimala__isNegative_getter(&v13) == 0;
}

unint64_t NSDecimal.magnitude.getter(unint64_t a1, unint64_t a2, unsigned int a3)
{
  __int16 v3 = a3;
  __int16 v4 = a2;
  unsigned int v5 = a1;
  unint64_t v16 = a1;
  unint64_t v6 = HIDWORD(a1);
  unint64_t v7 = HIWORD(a1);
  unint64_t v8 = a2 >> 16;
  unint64_t v17 = a2;
  unint64_t v9 = HIDWORD(a2);
  unint64_t v10 = HIWORD(a2);
  unsigned int v11 = HIWORD(a3);
  unsigned int v18 = a3;
  if (_So9NSDecimala__length_getter(&v16))
  {
    LODWORD(v16) = v5;
    WORD2(v16) = v6;
    HIWORD(v16) = v7;
    LOWORD(v17) = v4;
    WORD1(v17) = v8;
    WORD2(v17) = v9;
    HIWORD(v17) = v10;
    LOWORD(v18) = v3;
    HIWORD(v18) = v11;
    unsigned int v15 = _So9NSDecimala__exponent_getter((char *)&v16);
    LODWORD(v16) = v5;
    WORD2(v16) = v6;
    HIWORD(v16) = v7;
    LOWORD(v17) = v4;
    WORD1(v17) = v8;
    WORD2(v17) = v9;
    HIWORD(v17) = v10;
    LOWORD(v18) = v3;
    HIWORD(v18) = v11;
    uint64_t v12 = _So9NSDecimala__length_getter(&v16);
    LODWORD(v16) = v5;
    WORD2(v16) = v6;
    HIWORD(v16) = v7;
    LOWORD(v17) = v4;
    WORD1(v17) = v8;
    WORD2(v17) = v9;
    HIWORD(v17) = v10;
    LOWORD(v18) = v3;
    HIWORD(v18) = v11;
    uint64_t isCompact_getter = _So9NSDecimala__isCompact_getter(&v16);
    WORD2(v16) = v6;
    HIWORD(v16) = v7;
    LOWORD(v17) = v4;
    WORD1(v17) = v8;
    WORD2(v17) = v9;
    HIWORD(v17) = v10;
    LOWORD(v18) = v3;
    HIWORD(v18) = v11;
    _So9NSDecimala__exponent_setter(v15, &v16);
    _So9NSDecimala__length_setter(v12, &v16);
    _So9NSDecimala__isNegative_setter(0LL, &v16);
    _So9NSDecimala__isCompact_setter_0(isCompact_getter, &v16);
    _So9NSDecimala__reserved_setter(&v16);
    unsigned int v5 = v16;
    LOWORD(v6) = WORD2(v16);
    unint64_t v7 = HIWORD(v16);
  }

  return v5 | ((unint64_t)(unsigned __int16)v6 << 32) | (v7 << 48);
}

BOOL static NSDecimal.< infix(_:_:)( unint64_t a1, unint64_t a2, unsigned int a3, unint64_t a4, unint64_t a5, unsigned int a6)
{
  return specialized static NSDecimal._compare(lhs:rhs:)(a1, a2, a3, a4, a5, a6) == -1;
}

unint64_t NSDecimal.significand.getter(unint64_t a1, unint64_t a2, unsigned int a3)
{
  __int16 v3 = a3;
  __int16 v4 = a2;
  int v5 = a1;
  unint64_t v15 = a1;
  unint64_t v6 = HIDWORD(a1);
  unint64_t v7 = HIWORD(a1);
  unint64_t v8 = a2 >> 16;
  unint64_t v16 = a2;
  unint64_t v9 = HIDWORD(a2);
  unint64_t v10 = HIWORD(a2);
  unsigned int v11 = HIWORD(a3);
  unsigned int v17 = a3;
  uint64_t v12 = _So9NSDecimala__length_getter(&v15);
  LODWORD(v15) = v5;
  WORD2(v15) = v6;
  HIWORD(v15) = v7;
  LOWORD(v16) = v4;
  WORD1(v16) = v8;
  WORD2(v16) = v9;
  HIWORD(v16) = v10;
  LOWORD(v17) = v3;
  HIWORD(v17) = v11;
  uint64_t isCompact_getter = _So9NSDecimala__isCompact_getter(&v15);
  WORD2(v15) = v6;
  HIWORD(v15) = v7;
  LOWORD(v16) = v4;
  WORD1(v16) = v8;
  WORD2(v16) = v9;
  HIWORD(v16) = v10;
  LOWORD(v17) = v3;
  HIWORD(v17) = v11;
  _So9NSDecimala__exponent_setter(0LL, &v15);
  _So9NSDecimala__length_setter(v12, &v15);
  _So9NSDecimala__isNegative_setter(0LL, &v15);
  _So9NSDecimala__isCompact_setter_0(isCompact_getter, &v15);
  _So9NSDecimala__reserved_setter(&v15);
  return v15;
}

void __swiftcall NSDecimal.init(_:)(NSDecimal *__return_ptr retstr, Swift::Int a2)
{
  Swift::Int v2 = a2;
  if (a2 < 0) {
    a2 = -a2;
  }
  unint64_t v7 = specialized NSDecimal.init(_:)(a2);
  int v8 = v3;
  __int16 v9 = v4;
  __int16 v10 = v5;
  int v11 = v6;
  if (v2 < 0) {
    _So9NSDecimala__isNegative_setter(1LL, &v7);
  }
}

uint64_t NSDecimal.description.getter(unint64_t a1, unint64_t a2, unsigned int a3)
{
  LOWORD(__swift_mutable_project_boxed_opaque_existential_1((uint64_t)v2, v3) = a3;
  LOWORD(v4) = a2;
  LODWORD(v5) = a1;
  unsigned int v49 = a1;
  unint64_t v6 = HIDWORD(a1);
  LOWORD(v50) = WORD2(a1);
  unint64_t v7 = HIWORD(a1);
  WORD1(v50) = HIWORD(a1);
  unint64_t v8 = a2 >> 16;
  *(void *)((char *)&v50 + 4) = a2;
  unint64_t v9 = HIDWORD(a2);
  uint64_t v10 = HIWORD(a2);
  unsigned int v11 = HIWORD(a3);
  HIDWORD(v50) = a3;
  if (!_So9NSDecimala__length_getter(&v49))
  {
    unsigned int v49 = v5;
    LOWORD(v50) = v6;
    WORD1(v50) = v7;
    WORD2(v50) = v4;
    WORD3(v50) = v8;
    WORD4(v50) = v9;
    WORD5(v50) = v10;
    WORD6(v50) = v3;
    HIWORD(v50) = v11;
  }

  unsigned int v49 = v5;
  LOWORD(v50) = v6;
  WORD1(v50) = v7;
  WORD2(v50) = v4;
  WORD3(v50) = v8;
  WORD4(v50) = v9;
  WORD5(v50) = v10;
  WORD6(v50) = v3;
  HIWORD(v50) = v11;
  uint64_t v47 = 0LL;
  unint64_t v48 = 0xE000000000000000LL;
  unsigned int v49 = v5;
  LOWORD(v50) = v6;
  WORD1(v50) = v7;
  WORD2(v50) = v4;
  WORD3(v50) = v8;
  WORD4(v50) = v9;
  WORD5(v50) = v10;
  WORD6(v50) = v3;
  HIWORD(v50) = v11;
  *(_DWORD *)uint64_t v46 = v5;
  *(_WORD *)&v46[4] = v6;
  *(_WORD *)&v46[6] = v7;
  *(_WORD *)&v46[8] = v4;
  *(_WORD *)&v46[10] = v8;
  *(_WORD *)&v46[12] = v9;
  *(_WORD *)&v46[14] = v10;
  *(_WORD *)&v46[16] = v3;
  *(_WORD *)&v46[18] = v11;
  if ((int)_So9NSDecimala__exponent_getter(v46) >= 1)
  {
    do
    {
      v12._uint64_t countAndFlagsBits = 48LL;
      v12._uint64_t object = (void *)0xE100000000000000LL;
      String.append(_:)(v12);
      *(_DWORD *)uint64_t v46 = v5;
      *(_WORD *)&v46[4] = v6;
      *(_WORD *)&v46[6] = v7;
      *(_WORD *)&v46[8] = v4;
      *(_WORD *)&v46[10] = v8;
      *(_WORD *)&v46[12] = v9;
      *(_WORD *)&v46[14] = v10;
      *(_WORD *)&v46[16] = v3;
      *(_WORD *)&v46[18] = v11;
      int v13 = _So9NSDecimala__exponent_getter(v46);
      _So9NSDecimala__exponent_setter((v13 - 1), &v49);
      LODWORD(v5) = v49;
      LOWORD(v6) = v50;
      LOWORD(v7) = WORD1(v50);
      LOWORD(v4) = WORD2(v50);
      LOWORD(v8) = WORD3(v50);
      LOWORD(v9) = WORD4(v50);
      LOWORD(v10) = WORD5(v50);
      LOWORD(__swift_mutable_project_boxed_opaque_existential_1((uint64_t)v2, v3) = WORD6(v50);
      LOWORD(v11) = HIWORD(v50);
      *(void *)uint64_t v46 = __PAIR64__(v50, v49);
      *(void *)&v46[8] = *(void *)((char *)&v50 + 4);
      *(_DWORD *)&v46[16] = HIDWORD(v50);
    }

    while ((int)_So9NSDecimala__exponent_getter(v46) > 0);
  }

  *(_DWORD *)uint64_t v46 = v5;
  *(_WORD *)&v46[4] = v6;
  *(_WORD *)&v46[6] = v7;
  *(_WORD *)&v46[8] = v4;
  *(_WORD *)&v46[10] = v8;
  *(_WORD *)&v46[12] = v9;
  *(_WORD *)&v46[14] = v10;
  *(_WORD *)&v46[16] = v3;
  *(_WORD *)&v46[18] = v11;
  if (!_So9NSDecimala__exponent_getter(v46))
  {
    _So9NSDecimala__exponent_setter(1LL, &v49);
    LODWORD(v5) = v49;
    LOWORD(v6) = v50;
    LOWORD(v7) = WORD1(v50);
    LOWORD(v4) = WORD2(v50);
    LOWORD(v8) = WORD3(v50);
    LOWORD(v9) = WORD4(v50);
    LOWORD(v10) = WORD5(v50);
    LOWORD(__swift_mutable_project_boxed_opaque_existential_1((uint64_t)v2, v3) = WORD6(v50);
    LOWORD(v11) = HIWORD(v50);
  }

  *(_DWORD *)uint64_t v46 = v5;
  __int16 v42 = v6;
  *(_WORD *)&v46[4] = v6;
  LOWORD(v14) = v7;
  *(_WORD *)&v46[6] = v7;
  *(_WORD *)&v46[8] = v4;
  *(_WORD *)&v46[10] = v8;
  *(_WORD *)&v46[12] = v9;
  *(_WORD *)&v46[14] = v10;
  *(_WORD *)&v46[16] = v3;
  *(_WORD *)&v46[18] = v11;
  if (!_So9NSDecimala__length_getter(v46))
  {
LABEL_29:
    __int16 v15 = v14;
    __int16 v16 = v42;
LABEL_30:
    *(_DWORD *)uint64_t v46 = v5;
    *(_WORD *)&v46[4] = v16;
    *(_WORD *)&v46[6] = v15;
    *(_WORD *)&v46[8] = v4;
    *(_WORD *)&v46[10] = v8;
    *(_WORD *)&v46[12] = v9;
    *(_WORD *)&v46[14] = v10;
    *(_WORD *)&v46[16] = v3;
    *(_WORD *)&v46[18] = v11;
    __int16 v31 = v15;
    __int16 v32 = v16;
    if ((int)_So9NSDecimala__exponent_getter(v46) <= 0)
    {
      while (1)
      {
        *(_DWORD *)uint64_t v46 = v5;
        *(_WORD *)&v46[4] = v32;
        *(_WORD *)&v46[6] = v31;
        *(_WORD *)&v46[8] = v4;
        *(_WORD *)&v46[10] = v8;
        *(_WORD *)&v46[12] = v9;
        *(_WORD *)&v46[14] = v10;
        *(_WORD *)&v46[16] = v3;
        *(_WORD *)&v46[18] = v11;
        v33._uint64_t countAndFlagsBits = 48LL;
        v33._uint64_t object = (void *)0xE100000000000000LL;
        String.append(_:)(v33);
        *(_DWORD *)uint64_t v46 = v5;
        *(_WORD *)&v46[4] = v32;
        *(_WORD *)&v46[6] = v31;
        *(_WORD *)&v46[8] = v4;
        *(_WORD *)&v46[10] = v8;
        *(_WORD *)&v46[12] = v9;
        *(_WORD *)&v46[14] = v10;
        *(_WORD *)&v46[16] = v3;
        *(_WORD *)&v46[18] = v11;
        int v34 = _So9NSDecimala__exponent_getter(v46);
        _So9NSDecimala__exponent_setter((v34 + 1), &v49);
        LODWORD(v5) = v49;
        __int16 v32 = v50;
        __int16 v31 = WORD1(v50);
        LOWORD(v4) = WORD2(v50);
        LOWORD(v8) = WORD3(v50);
        LOWORD(v9) = WORD4(v50);
        LOWORD(v10) = WORD5(v50);
        LOWORD(__swift_mutable_project_boxed_opaque_existential_1((uint64_t)v2, v3) = WORD6(v50);
        LOWORD(v11) = HIWORD(v50);
      }

      v35._uint64_t countAndFlagsBits = 46LL;
      v35._uint64_t object = (void *)0xE100000000000000LL;
      String.append(_:)(v35);
      v36._uint64_t countAndFlagsBits = 48LL;
      v36._uint64_t object = (void *)0xE100000000000000LL;
      String.append(_:)(v36);
    }

    *(_DWORD *)uint64_t v46 = v5;
    *(_WORD *)&v46[4] = v32;
    *(_WORD *)&v46[6] = v31;
    *(_WORD *)&v46[8] = v4;
    *(_WORD *)&v46[10] = v8;
    *(_WORD *)&v46[12] = v9;
    *(_WORD *)&v46[14] = v10;
    *(_WORD *)&v46[16] = v3;
    *(_WORD *)&v46[18] = v11;
    if (_So9NSDecimala__isNegative_getter(v46))
    {
      v37._uint64_t countAndFlagsBits = 45LL;
      v37._uint64_t object = (void *)0xE100000000000000LL;
      String.append(_:)(v37);
    }

    *(void *)uint64_t v46 = v47;
    *(void *)&v46[8] = v48;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ReversedCollection<String>);
    lazy protocol witness table accessor for type ReversedCollection<String> and conformance ReversedCollection<A>();
    return String.init<A>(_:)();
  }

  __int16 v15 = v7;
  __int16 v16 = v6;
  while (1)
  {
    __int16 v43 = v15;
    *(_DWORD *)uint64_t v46 = v5;
    *(_WORD *)&v46[4] = v16;
    *(_WORD *)&v46[6] = v15;
    *(_WORD *)&v46[8] = v4;
    *(_WORD *)&v46[10] = v8;
    *(_WORD *)&v46[12] = v9;
    *(_WORD *)&v46[14] = v10;
    *(_WORD *)&v46[16] = v3;
    *(_WORD *)&v46[18] = v11;
    if (!_So9NSDecimala__exponent_getter(v46))
    {
      v17._uint64_t countAndFlagsBits = 46LL;
      v17._uint64_t object = (void *)0xE100000000000000LL;
      String.append(_:)(v17);
    }

    *(_DWORD *)uint64_t v46 = v5;
    *(_WORD *)&v46[4] = v16;
    *(_WORD *)&v46[6] = v43;
    *(_WORD *)&v46[8] = v4;
    *(_WORD *)&v46[10] = v8;
    *(_WORD *)&v46[12] = v9;
    *(_WORD *)&v46[14] = v10;
    *(_WORD *)&v46[16] = v3;
    *(_WORD *)&v46[18] = v11;
    int v18 = _So9NSDecimala__exponent_getter(v46);
    _So9NSDecimala__exponent_setter((v18 + 1), &v49);
    unsigned int v19 = v49;
    LOWORD(v8) = WORD1(v50);
    LOWORD(v11) = WORD5(v50);
    __int16 v42 = WORD2(v50);
    __int16 v44 = v50;
    __int16 v40 = WORD4(v50);
    __int16 v41 = WORD3(v50);
    LOWORD(v9) = HIWORD(v50);
    __int16 v39 = WORD6(v50);
    NSDecimal.asVariableLengthInteger()( v49 | ((unint64_t)(unsigned __int16)v50 << 32) | ((unint64_t)WORD1(v50) << 48),  WORD2(v50) | ((unint64_t)WORD3(v50) << 16) | ((unint64_t)WORD4(v50) << 32) | ((unint64_t)WORD5(v50) << 48),  WORD6(v50) | (HIWORD(v50) << 16));
    uint64_t v14 = v20;
    uint64_t v3 = *(void *)(v20 + 16);
    if (!v3)
    {
      unsigned int v4 = 0;
      uint64_t v5 = MEMORY[0x18961AFE8];
      uint64_t v24 = *(void *)(MEMORY[0x18961AFE8] + 16LL);
      if (!v24) {
        goto LABEL_22;
      }
LABEL_19:
      if (!*(_WORD *)(v5 + 2 * v24 + 30))
      {
        do
        {
          *(void *)(v5 + 16) = v24 - 1;
          if (v24 == 1) {
            break;
          }
        }

        while (!*(unsigned __int16 *)(v5 + 28 + 2 * v24--));
      }

      goto LABEL_22;
    }

    unsigned int v38 = v19;
    uint64_t v5 = static Array._allocateBufferUninitialized(minimumCapacity:)();
    uint64_t v10 = v5 + 30;
    *(void *)(v5 + 16) = v3;
    bzero((void *)(v5 + 32), 2 * v3);
    unsigned int v21 = *(unsigned __int16 *)(2 * v3 + v14 + 30);
    unsigned int v22 = v21 / 0xA;
    while (1)
    {
      *(_WORD *)(v10 + 2 * __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v2, v3) = v22;
      unsigned int v4 = v21 % 0xA;
      if (v3 == 1) {
        break;
      }
      unsigned int v21 = *(unsigned __int16 *)(v14 + 28 + 2 * v3) | (v4 << 16);
      unsigned int v22 = v21 / 0xA;
      unint64_t v23 = v3 - 2;
      --v3;
      if (v23 >= *(void *)(v5 + 16))
      {
        __break(1u);
        goto LABEL_29;
      }
    }

    unsigned int v19 = v38;
    uint64_t v24 = *(void *)(v5 + 16);
    if (v24) {
      goto LABEL_19;
    }
LABEL_22:
    swift_bridgeObjectRelease();
    *(_DWORD *)uint64_t v46 = v19;
    *(_WORD *)&v46[4] = v44;
    *(_WORD *)&v46[6] = v8;
    *(_WORD *)&v46[8] = v42;
    *(_WORD *)&v46[10] = v41;
    *(_WORD *)&v46[12] = v40;
    *(_WORD *)&v46[14] = v11;
    *(_WORD *)&v46[16] = v39;
    *(_WORD *)&v46[18] = v9;
    NSDecimal.copyVariableLengthInteger(_:)((Swift::OpaquePointer)v5);
    if (v26) {
      break;
    }
    unint64_t v27 = *(void *)(v5 + 16);
    swift_bridgeObjectRelease();
    if (HIDWORD(v27)) {
      goto LABEL_39;
    }
    _So9NSDecimala__length_setter(v27, v46);
    unsigned int v49 = *(_DWORD *)v46;
    __int128 v50 = *(_OWORD *)&v46[4];
    *(void *)uint64_t v46 = v4 | 0x30;
    v28._uint64_t countAndFlagsBits = MEMORY[0x186E1B6AC](v46, 1LL);
    String.append(_:)(v28);
    swift_bridgeObjectRelease();
    LODWORD(v5) = v49;
    __int16 v16 = v50;
    __int16 v45 = WORD1(v50);
    LOWORD(v4) = WORD2(v50);
    LOWORD(v8) = WORD3(v50);
    LOWORD(v9) = WORD4(v50);
    LOWORD(v10) = WORD5(v50);
    LOWORD(__swift_mutable_project_boxed_opaque_existential_1((uint64_t)v2, v3) = WORD6(v50);
    LOWORD(v11) = HIWORD(v50);
    *(void *)uint64_t v46 = __PAIR64__(v50, v49);
    *(void *)&v46[8] = *(void *)((char *)&v50 + 4);
    *(_DWORD *)&v46[16] = HIDWORD(v50);
    int v29 = _So9NSDecimala__length_getter(v46);
    __int16 v15 = v45;
    if (!v29) {
      goto LABEL_30;
    }
  }

  swift_bridgeObjectRelease();
  swift_unexpectedError();
  __break(1u);
LABEL_39:
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t NSDecimal.init(string:locale:)(unint64_t a1, unint64_t a2, void *a3)
{
  if (!*a3
    || (uint64_t v5 = a3[1],
        uint64_t ObjectType = swift_getObjectType(),
        unint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 224),
        swift_unknownObjectRetain(),
        unint64_t v8 = v7(ObjectType, v5),
        unint64_t v10 = v9,
        swift_unknownObjectRelease(),
        !v10))
  {
    swift_bridgeObjectRelease();
    unint64_t v10 = 0xE100000000000000LL;
    unint64_t v8 = 46LL;
  }

  swift_bridgeObjectRetain();
  specialized static NSDecimal._decimal<A>(from:decimalSeparator:matchEntireString:)(a1, a2, v8, v10, 0, (uint64_t)v12);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined init with take of NSDecimal.DecimalParseResult((uint64_t)v12, (uint64_t)&v13);
  if (v14 == 1) {
    return 0LL;
  }
  else {
    return v13;
  }
}

void specialized static NSDecimal._decimal<A>(from:decimalSeparator:matchEntireString:)( uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, unint64_t a4@<X3>, char a5@<W4>, uint64_t a6@<X8>)
{
  uint64_t v9 = a1;
  memset(v113, 0, 20);
  unint64_t v10 = (unsigned __int8 *)specialized skipWhiteSpaces #1 <A>(from:) in static NSDecimal._decimal<A>(from:decimalSeparator:matchEntireString:)( a1,  a1,  a2);
  unsigned int v11 = v10;
  uint64_t v104 = a2;
  Swift::String v12 = (unsigned __int8 *)(v9 + a2);
  char v101 = a5;
  if ((unsigned __int8 *)(v9 + a2) != v10)
  {
    int v13 = *v10;
    if (v13 == 45 || v13 == 43)
    {
      _So9NSDecimala__isNegative_setter(v13 == 45, v113);
      ++v11;
    }
  }

  char v14 = (unsigned __int8 *)(v9 + a2);
  if (v12 == v11) {
    goto LABEL_92;
  }
  LOBYTE(v15) = 0;
  uint64_t v16 = -v9;
  uint64_t v102 = v9;
  uint64_t v17 = a2 + v9;
  Swift::String v106 = (unsigned __int8 *)(v9 + a2);
  uint64_t v97 = a2 + v9;
  uint64_t v98 = -v9;
LABEL_9:
  unint64_t v18 = (unint64_t)&v11[v16];
  uint64_t v19 = v17 - (void)v11;
  do
  {
    if ((v18 & 0x8000000000000000LL) != 0 || (BOOL v20 = v19 < 1, v21 = v19 - 1, v20))
    {
      __break(1u);
      goto LABEL_105;
    }

    char v22 = v15;
    int v23 = *v11;
    __int128 v110 = v11;
    int v24 = v113[0];
    __int16 v25 = WORD3(v113[0]);
    __int16 v26 = WORD4(v113[0]);
    __int16 v27 = WORD5(v113[0]);
    __int16 v28 = WORD6(v113[0]);
    __int16 v29 = HIWORD(v113[0]);
    __int16 v6 = v113[1];
    __int16 v30 = WORD1(v113[1]);
    if ((v15 & 1) == 0)
    {
      __int16 v108 = WORD2(v113[0]);
      NSDecimal._multiply(byShort:)( (NSDecimal *)(WORD4(v113[0]) | ((unint64_t)WORD5(v113[0]) << 16) | ((unint64_t)WORD6(v113[0]) << 32)),  0xAu);
      if (!v41)
      {
        NSDecimal._add(_:)((NSDecimal *)(v23 - 48), (v23 - 48));
        if (!v41)
        {
          LOBYTE(v15) = 0;
          *(void *)&v113[0] = v42;
          *((void *)&v113[0] + 1) = v43;
          LODWORD(v113[1]) = v44;
          goto LABEL_29;
        }
      }

      *(_DWORD *)__int128 v112 = v24;
      *(_WORD *)&v112[4] = v108;
      *(_WORD *)&v112[6] = v25;
      *(_WORD *)&v112[8] = v26;
      *(_WORD *)&v112[10] = v27;
      *(_WORD *)&v112[12] = v28;
      *(_WORD *)&v112[14] = v29;
      *(_WORD *)&v112[16] = v6;
      *(_WORD *)&v112[18] = v30;
      if (_So9NSDecimala__exponent_getter(v112) == 127)
      {
        *(_OWORD *)&v112[4] = 0uLL;
        _So9NSDecimala__exponent_setter(0LL, v112);
        _So9NSDecimala__length_setter(0LL, v112);
        _So9NSDecimala__isNegative_setter(1LL, v112);
        _So9NSDecimala__isCompact_setter_0(0LL, v112);
        _So9NSDecimala__reserved_setter(v112);
        int v45 = *(_DWORD *)v112;
        __int16 v46 = *(_WORD *)&v112[4];
        __int16 v47 = *(_WORD *)&v112[6];
        __int16 v48 = *(_WORD *)&v112[8];
        __int16 v49 = *(_WORD *)&v112[10];
        __int16 v50 = *(_WORD *)&v112[12];
        __int16 v51 = *(_WORD *)&v112[14];
        __int16 v6 = *(_WORD *)&v112[16];
        __int16 v52 = *(_WORD *)&v112[18];
        v113[0] = *(_OWORD *)v112;
        LODWORD(v113[1]) = *(_DWORD *)&v112[16];
      }

      else
      {
        *(_DWORD *)__int128 v112 = v24;
        *(_WORD *)&v112[4] = v108;
        *(_WORD *)&v112[6] = v25;
        *(_WORD *)&v112[8] = v26;
        *(_WORD *)&v112[10] = v27;
        *(_WORD *)&v112[12] = v28;
        *(_WORD *)&v112[14] = v29;
        *(_WORD *)&v112[16] = v6;
        *(_WORD *)&v112[18] = v30;
        int v53 = _So9NSDecimala__exponent_getter(v112);
        _So9NSDecimala__exponent_setter((v53 + 1), v113);
        int v45 = v113[0];
        __int16 v46 = WORD2(v113[0]);
        __int16 v47 = WORD3(v113[0]);
        __int16 v48 = WORD4(v113[0]);
        __int16 v49 = WORD5(v113[0]);
        __int16 v50 = WORD6(v113[0]);
        __int16 v51 = HIWORD(v113[0]);
        __int16 v6 = v113[1];
        __int16 v52 = WORD1(v113[1]);
      }

      *(_DWORD *)__int128 v112 = v45;
      *(_WORD *)&v112[4] = v46;
      *(_WORD *)&v112[6] = v47;
      *(_WORD *)&v112[8] = v48;
      *(_WORD *)&v112[10] = v49;
      *(_WORD *)&v112[12] = v50;
      *(_WORD *)&v112[14] = v51;
      *(_WORD *)&v112[16] = v6;
      *(_WORD *)&v112[18] = v52;
      if (_So9NSDecimala__length_getter(v112))
      {
        LOBYTE(v15) = 1;
        goto LABEL_29;
      }

      *(_DWORD *)__int128 v112 = v45;
      *(_WORD *)&v112[4] = v46;
      *(_WORD *)&v112[6] = v47;
      *(_WORD *)&v112[8] = v48;
      *(_WORD *)&v112[10] = v49;
      *(_WORD *)&v112[12] = v50;
      *(_WORD *)&v112[14] = v51;
      *(_WORD *)&v112[16] = v6;
      *(_WORD *)&v112[18] = v52;
      int isNegative_getter = _So9NSDecimala__isNegative_getter(v112);
      LOBYTE(v15) = 1;
      if (!isNegative_getter)
      {
LABEL_29:
        unsigned int v11 = v110 + 1;
        Swift::String v12 = v106;
        uint64_t v17 = v97;
        uint64_t v16 = v98;
        if (v110 + 1 != v106) {
          goto LABEL_9;
        }
        char v14 = v106;
        uint64_t v9 = v102;
        if ((v101 & 1) != 0) {
          goto LABEL_93;
        }
        goto LABEL_81;
      }

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance NSDecimal()
{
  return NSDecimal.description.getter(*(void *)v0, *(void *)(v0 + 8), *(_DWORD *)(v0 + 16));
}

double one-time initialization function for leastFiniteMagnitude(uint64_t a1)
{
  *(void *)&double result = one-time initialization function for leastFiniteMagnitude( a1,  1LL,  &static NSDecimal.leastFiniteMagnitude,  (__n128 *)((char *)&static NSDecimal.leastFiniteMagnitude + 4)).n128_u64[0];
  return result;
}

uint64_t static NSDecimal.leastFiniteMagnitude.getter()
{
  if (one-time initialization token for leastFiniteMagnitude != -1) {
    swift_once();
  }
  return static NSDecimal.leastFiniteMagnitude;
}

double one-time initialization function for greatestFiniteMagnitude(uint64_t a1)
{
  *(void *)&double result = one-time initialization function for leastFiniteMagnitude( a1,  0LL,  &static NSDecimal.greatestFiniteMagnitude,  (__n128 *)((char *)&static NSDecimal.greatestFiniteMagnitude + 4)).n128_u64[0];
  return result;
}

__n128 one-time initialization function for leastFiniteMagnitude( uint64_t a1, uint64_t a2, _DWORD *a3, __n128 *a4)
{
  v9.n128_u64[0] = -1LL;
  v9.n128_u64[1] = -1LL;
  _So9NSDecimala__exponent_setter(127LL, &v8);
  _So9NSDecimala__length_setter(8LL, &v8);
  _So9NSDecimala__isNegative_setter(a2, &v8);
  _So9NSDecimala__isCompact_setter_0(1LL, &v8);
  _So9NSDecimala__reserved_setter(&v8);
  __n128 result = v9;
  *a3 = v8;
  *a4 = result;
  return result;
}

uint64_t static NSDecimal.greatestFiniteMagnitude.getter()
{
  if (one-time initialization token for greatestFiniteMagnitude != -1) {
    swift_once();
  }
  return static NSDecimal.greatestFiniteMagnitude;
}

double one-time initialization function for leastNormalMagnitude(uint64_t a1)
{
  *(void *)&double result = one-time initialization function for leastNormalMagnitude( a1,  &static NSDecimal.leastNormalMagnitude,  (__n128 *)((char *)&static NSDecimal.leastNormalMagnitude + 4)).n128_u64[0];
  return result;
}

uint64_t static NSDecimal.leastNormalMagnitude.getter()
{
  if (one-time initialization token for leastNormalMagnitude != -1) {
    swift_once();
  }
  return static NSDecimal.leastNormalMagnitude;
}

double one-time initialization function for leastNonzeroMagnitude(uint64_t a1)
{
  *(void *)&double result = one-time initialization function for leastNormalMagnitude( a1,  &static NSDecimal.leastNonzeroMagnitude,  (__n128 *)((char *)&static NSDecimal.leastNonzeroMagnitude + 4)).n128_u64[0];
  return result;
}

__n128 one-time initialization function for leastNormalMagnitude(uint64_t a1, _DWORD *a2, __n128 *a3)
{
  v7.n128_u16[0] = 1;
  *(unint64_t *)((char *)v7.n128_u64 + 2) = 0LL;
  v7.n128_u64[1] = 0LL;
  _So9NSDecimala__exponent_setter(4294967169LL, &v6);
  _So9NSDecimala__length_setter(1LL, &v6);
  _So9NSDecimala__isNegative_setter(0LL, &v6);
  _So9NSDecimala__isCompact_setter_0(1LL, &v6);
  _So9NSDecimala__reserved_setter(&v6);
  __n128 result = v7;
  *a2 = v6;
  *a3 = result;
  return result;
}

uint64_t static NSDecimal.leastNonzeroMagnitude.getter()
{
  if (one-time initialization token for leastNonzeroMagnitude != -1) {
    swift_once();
  }
  return static NSDecimal.leastNonzeroMagnitude;
}

double one-time initialization function for pi()
{
  __int128 v2 = xmmword_183731680;
  _So9NSDecimala__exponent_setter(4294967258LL, &v1);
  _So9NSDecimala__length_setter(8LL, &v1);
  _So9NSDecimala__isNegative_setter(0LL, &v1);
  _So9NSDecimala__isCompact_setter_0(1LL, &v1);
  _So9NSDecimala__reserved_setter(&v1);
  double result = *(double *)&v2;
  LODWORD(static NSDecimal.pi) = v1;
  *(_OWORD *)((char *)&static NSDecimal.pi + 4) = v2;
  return result;
}

uint64_t static NSDecimal.pi.getter()
{
  if (one-time initialization token for pi != -1) {
    swift_once();
  }
  return static NSDecimal.pi;
}

void static NSDecimal.infinity.getter()
{
}

void static NSDecimal.signalingNaN.getter()
{
}

uint64_t static NSDecimal.quietNaN.getter()
{
  *(void *)&v1[1] = 0LL;
  *(void *)&v1[3] = 0LL;
  _So9NSDecimala__exponent_setter(0LL, v1);
  _So9NSDecimala__length_setter(0LL, v1);
  _So9NSDecimala__isNegative_setter(1LL, v1);
  _So9NSDecimala__isCompact_setter_0(0LL, v1);
  _So9NSDecimala__reserved_setter(v1);
  return *(void *)v1;
}

uint64_t static NSDecimal.radix.getter()
{
  return 10LL;
}

void __swiftcall NSDecimal.init(_:)(NSDecimal *__return_ptr retstr, Swift::UInt8 a2)
{
}

void __swiftcall NSDecimal.init(_:)(NSDecimal *__return_ptr retstr, Swift::Int8 a2)
{
  if (a2 >= 0) {
    unint64_t v3 = a2;
  }
  else {
    unint64_t v3 = -a2;
  }
  unint64_t v8 = specialized NSDecimal.init(_:)(v3);
  int v9 = v4;
  __int16 v10 = v5;
  __int16 v11 = v6;
  int v12 = v7;
  if (a2 < 0) {
    _So9NSDecimala__isNegative_setter(1LL, &v8);
  }
}

void __swiftcall NSDecimal.init(_:)(NSDecimal *__return_ptr retstr, Swift::Int64 a2)
{
  Swift::Int64 v2 = a2;
  if (a2 < 0) {
    a2 = -a2;
  }
  unint64_t v7 = specialized NSDecimal.init(_:)(a2);
  int v8 = v3;
  __int16 v9 = v4;
  __int16 v10 = v5;
  int v11 = v6;
  if (v2 < 0) {
    _So9NSDecimala__isNegative_setter(1LL, &v7);
  }
}

void __swiftcall NSDecimal.init(_:)(NSDecimal *__return_ptr retstr, Swift::UInt16 a2)
{
}

void __swiftcall NSDecimal.init(_:)(NSDecimal *__return_ptr retstr, Swift::Int16 a2)
{
  if (a2 >= 0) {
    unint64_t v3 = a2;
  }
  else {
    unint64_t v3 = -a2;
  }
  unint64_t v8 = specialized NSDecimal.init(_:)(v3);
  int v9 = v4;
  __int16 v10 = v5;
  __int16 v11 = v6;
  int v12 = v7;
  if (a2 < 0) {
    _So9NSDecimala__isNegative_setter(1LL, &v8);
  }
}

void __swiftcall NSDecimal.init(_:)(NSDecimal *__return_ptr retstr, Swift::UInt32 a2)
{
}

void __swiftcall NSDecimal.init(_:)(NSDecimal *__return_ptr retstr, Swift::Int32 a2)
{
  Swift::Int32 v2 = a2;
  if (a2 >= 0) {
    *(void *)&a2 = a2;
  }
  else {
    *(void *)&a2 = -a2;
  }
  unint64_t v7 = specialized NSDecimal.init(_:)(*(unint64_t *)&a2);
  int v8 = v3;
  __int16 v9 = v4;
  __int16 v10 = v5;
  int v11 = v6;
  if (v2 < 0) {
    _So9NSDecimala__isNegative_setter(1LL, &v7);
  }
}

uint64_t NSDecimal.init(sign:exponent:significand:)( uint64_t result, uint64_t a2, unint64_t a3, unint64_t a4, unsigned int a5)
{
  unsigned int v9 = result & 1;
  if (one-time initialization token for compatibility1 != -1) {
    double result = swift_once();
  }
  if (static NSDecimal.compatibility1 != 1)
  {
    uint64_t v15 = 0x7FFFLL;
    if (a2 < 0x7FFF) {
      uint64_t v15 = a2;
    }
    if (v15 <= -32768) {
      uint64_t v16 = -32768LL;
    }
    else {
      uint64_t v16 = v15;
    }
    unint64_t v17 = specialized NSDecimal._multiplyByPowerOfTen(power:roundingMode:)(v16, a3, a4, a5);
    unsigned int v26 = v17;
    __int16 v20 = v18;
    __int16 v21 = v19;
    v33[0] = v17;
    a4 = HIDWORD(v17);
    unint64_t v27 = HIWORD(v17);
    unsigned int v22 = HIWORD(v19);
    v33[1] = v18;
    unint64_t v23 = v18 >> 16;
    unint64_t v24 = HIDWORD(v18);
    unint64_t v25 = HIWORD(v18);
    LOWORD(v33[2]) = v19;
    WORD1(v33[2]) = HIWORD(v19);
    if (v9)
    {
      unint64_t v30 = v17;
      unint64_t v31 = v18;
      unsigned int v32 = v19;
      if (_So9NSDecimala__length_getter(&v30))
      {
        LODWORD(v30) = v26;
        WORD2(v30) = a4;
        HIWORD(v30) = v27;
        LOWORD(v31) = v20;
        WORD1(v31) = v23;
        WORD2(v31) = v24;
        HIWORD(v31) = v25;
        LOWORD(v32) = v21;
        HIWORD(v32) = v22;
        int isNegative_getter = _So9NSDecimala__isNegative_getter(&v30);
        _So9NSDecimala__isNegative_setter(isNegative_getter ^ 1u, v33);
        unsigned int v26 = v33[0];
        LOWORD(a4) = WORD2(v33[0]);
        unint64_t v27 = HIWORD(v33[0]);
      }
    }

    return v26 | ((unint64_t)(unsigned __int16)a4 << 32) | (v27 << 48);
  }

  if (a2 < (uint64_t)0xFFFFFFFF80000000LL)
  {
    __break(1u);
    goto LABEL_19;
  }

  if (a2 > 0x7FFFFFFF)
  {
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }

  v33[0] = a3;
  unint64_t v10 = HIDWORD(a3);
  unint64_t v11 = HIWORD(a3);
  v33[1] = a4;
  LODWORD(v33[2]) = a5;
  double result = _So9NSDecimala__exponent_getter((char *)v33);
  BOOL v12 = __OFADD__((_DWORD)a2, (_DWORD)result);
  uint64_t v13 = (a2 + result);
  if (!v12)
  {
    v33[0] = a3;
    v33[1] = a4;
    LODWORD(v33[2]) = a5;
    unsigned int v29 = _So9NSDecimala__length_getter(v33);
    v33[0] = a3;
    v33[1] = a4;
    LODWORD(v33[2]) = a5;
    uint64_t isCompact_getter = _So9NSDecimala__isCompact_getter(v33);
    WORD2(v33[0]) = v10;
    HIWORD(v33[0]) = v11;
    v33[1] = a4;
    LODWORD(v33[2]) = a5;
    _So9NSDecimala__exponent_setter(v13, v33);
    _So9NSDecimala__length_setter(v29, v33);
    _So9NSDecimala__isNegative_setter(v9, v33);
    _So9NSDecimala__isCompact_setter_0(isCompact_getter, v33);
    _So9NSDecimala__reserved_setter(v33);
    unsigned int v26 = v33[0];
    LOWORD(a4) = WORD2(v33[0]);
    unint64_t v27 = HIWORD(v33[0]);
    return v26 | ((unint64_t)(unsigned __int16)a4 << 32) | (v27 << 48);
  }

Swift::Void __swiftcall NSDecimal.negate()()
{
  int v1 = *v0;
  __int16 v2 = *((_WORD *)v0 + 2);
  __int16 v3 = *((_WORD *)v0 + 3);
  __int16 v4 = *((_WORD *)v0 + 4);
  __int16 v5 = *((_WORD *)v0 + 5);
  __int16 v6 = *((_WORD *)v0 + 6);
  __int16 v7 = *((_WORD *)v0 + 7);
  __int16 v8 = *((_WORD *)v0 + 8);
  __int16 v9 = *((_WORD *)v0 + 9);
  int v11 = *v0;
  __int16 v12 = v2;
  __int16 v13 = v3;
  __int16 v14 = v4;
  __int16 v15 = v5;
  __int16 v16 = v6;
  __int16 v17 = v7;
  __int16 v18 = v8;
  __int16 v19 = v9;
  if (_So9NSDecimala__length_getter(&v11))
  {
    int v11 = v1;
    __int16 v12 = v2;
    __int16 v13 = v3;
    __int16 v14 = v4;
    __int16 v15 = v5;
    __int16 v16 = v6;
    __int16 v17 = v7;
    __int16 v18 = v8;
    __int16 v19 = v9;
    int isNegative_getter = _So9NSDecimala__isNegative_getter(&v11);
    _So9NSDecimala__isNegative_setter(isNegative_getter ^ 1u, v0);
  }

void __swiftcall NSDecimal.init(signOf:magnitudeOf:)( NSDecimal *__return_ptr retstr, NSDecimal *signOf, NSDecimal *magnitudeOf)
{
  __int16 v7 = v6;
  __int16 v8 = v5;
  int v9 = v4;
  __int16 v19 = v3;
  __int16 v10 = (__int16)magnitudeOf;
  int v23 = (int)signOf;
  unint64_t v24 = (unint64_t)signOf >> 32;
  unint64_t v25 = (unint64_t)signOf >> 48;
  unint64_t v27 = (unint64_t)magnitudeOf >> 16;
  unint64_t v29 = v4;
  unint64_t v11 = HIDWORD(v4);
  unint64_t v12 = HIWORD(v4);
  unint64_t v13 = v5 >> 16;
  unint64_t v30 = v5;
  unint64_t v14 = HIDWORD(v5);
  unint64_t v15 = HIWORD(v5);
  unint64_t v21 = (unint64_t)magnitudeOf >> 48;
  unint64_t v22 = (unint64_t)magnitudeOf >> 32;
  unsigned int v16 = HIWORD(v6);
  unsigned int v31 = v6;
  unsigned int v20 = HIWORD(v3);
  unsigned int v28 = _So9NSDecimala__exponent_getter((char *)&v29);
  LODWORD(v29) = v9;
  WORD2(v29) = v11;
  HIWORD(v29) = v12;
  LOWORD(v30) = v8;
  WORD1(v30) = v13;
  WORD2(v30) = v14;
  HIWORD(v30) = v15;
  LOWORD(v31) = v7;
  HIWORD(v31) = v16;
  unsigned int v26 = _So9NSDecimala__length_getter(&v29);
  LODWORD(v29) = v23;
  WORD2(v29) = v24;
  HIWORD(v29) = v25;
  LOWORD(v30) = v10;
  WORD1(v30) = v27;
  WORD2(v30) = v22;
  HIWORD(v30) = v21;
  LOWORD(v31) = v19;
  HIWORD(v31) = v20;
  uint64_t isNegative_getter = _So9NSDecimala__isNegative_getter(&v29);
  LODWORD(v29) = v9;
  WORD2(v29) = v11;
  HIWORD(v29) = v12;
  LOWORD(v30) = v8;
  WORD1(v30) = v13;
  WORD2(v30) = v14;
  HIWORD(v30) = v15;
  LOWORD(v31) = v7;
  HIWORD(v31) = v16;
  uint64_t isCompact_getter = _So9NSDecimala__isCompact_getter(&v29);
  WORD2(v29) = v11;
  HIWORD(v29) = v12;
  LOWORD(v30) = v8;
  WORD1(v30) = v13;
  WORD2(v30) = v14;
  HIWORD(v30) = v15;
  LOWORD(v31) = v7;
  HIWORD(v31) = v16;
  _So9NSDecimala__exponent_setter(v28, &v29);
  _So9NSDecimala__length_setter(v26, &v29);
  _So9NSDecimala__isNegative_setter(isNegative_getter, &v29);
  _So9NSDecimala__isCompact_setter_0(isCompact_getter, &v29);
  _So9NSDecimala__reserved_setter(&v29);
}

uint64_t NSDecimal.exponent.getter(uint64_t a1, uint64_t a2, int a3)
{
  v4[0] = a1;
  v4[1] = a2;
  int v5 = a3;
  return (int)_So9NSDecimala__exponent_getter((char *)v4);
}

uint64_t NSDecimal.sign.getter(uint64_t a1, uint64_t a2, int a3)
{
  v4[0] = a1;
  v4[1] = a2;
  int v5 = a3;
  return _So9NSDecimala__isNegative_getter(v4);
}

unint64_t NSDecimal.ulp.getter(unint64_t a1, unint64_t a2, unsigned int a3)
{
  __int16 v3 = a3;
  __int16 v4 = a2;
  *(void *)unint64_t v29 = a1;
  unint64_t v5 = HIDWORD(a1);
  int v6 = a1;
  unint64_t v7 = HIWORD(a1);
  unint64_t v8 = a2 >> 16;
  *(void *)&v29[8] = a2;
  unint64_t v9 = HIDWORD(a2);
  unint64_t v10 = HIWORD(a2);
  unsigned int v11 = HIWORD(a3);
  *(_DWORD *)&v29[16] = a3;
  if (!_So9NSDecimala__length_getter(v29))
  {
    *(_DWORD *)unint64_t v29 = v6;
    *(_WORD *)&v29[4] = v5;
    *(_WORD *)&v29[6] = v7;
    *(_WORD *)&v29[8] = v4;
    *(_WORD *)&v29[10] = v8;
    *(_WORD *)&v29[12] = v9;
    *(_WORD *)&v29[14] = v10;
    *(_WORD *)&v29[16] = v3;
    *(_WORD *)&v29[18] = v11;
    if (_So9NSDecimala__isNegative_getter(v29))
    {
      *(_OWORD *)&v29[4] = 0uLL;
      _So9NSDecimala__exponent_setter(0LL, v29);
      _So9NSDecimala__length_setter(0LL, v29);
      _So9NSDecimala__isNegative_setter(1LL, v29);
      uint64_t v16 = 0LL;
LABEL_20:
      _So9NSDecimala__isCompact_setter_0(v16, v29);
      _So9NSDecimala__reserved_setter(v29);
      return *(unsigned int *)v29 | ((unint64_t)*(unsigned __int16 *)&v29[4] << 32) | ((unint64_t)*(unsigned __int16 *)&v29[6] << 48);
    }
  }

  *(_DWORD *)unint64_t v29 = v6;
  *(_WORD *)&v29[4] = v5;
  *(_WORD *)&v29[6] = v7;
  *(_WORD *)&v29[8] = v4;
  *(_WORD *)&v29[10] = v8;
  *(_WORD *)&v29[12] = v9;
  *(_WORD *)&v29[14] = v10;
  *(_WORD *)&v29[16] = v3;
  *(_WORD *)&v29[18] = v11;
  if (!_So9NSDecimala__length_getter(v29))
  {
    *(_DWORD *)unint64_t v29 = v6;
    *(_WORD *)&v29[4] = v5;
    *(_WORD *)&v29[6] = v7;
    *(_WORD *)&v29[8] = v4;
    *(_WORD *)&v29[10] = v8;
    *(_WORD *)&v29[12] = v9;
    *(_WORD *)&v29[14] = v10;
    *(_WORD *)&v29[16] = v3;
    *(_WORD *)&v29[18] = v11;
    if (!_So9NSDecimala__isNegative_getter(v29))
    {
      uint64_t v18 = 4294967168LL;
LABEL_19:
      *(_WORD *)&v29[4] = 1;
      *(void *)&v29[6] = 0LL;
      *(void *)&v29[12] = 0LL;
      _So9NSDecimala__exponent_setter(v18, v29);
      _So9NSDecimala__length_setter(1LL, v29);
      _So9NSDecimala__isNegative_setter(0LL, v29);
      uint64_t v16 = 1LL;
      goto LABEL_20;
    }
  }

  if (one-time initialization token for _powersOfTenDividingUInt128Max != -1) {
    swift_once();
  }
  __int16 v22 = v8;
  uint64_t v20 = *((void *)_powersOfTenDividingUInt128Max._rawValue + 2);
  if (v20)
  {
    __int16 v21 = v3;
    uint64_t v12 = swift_bridgeObjectRetain();
    unint64_t v13 = 0LL;
    int v19 = v6;
    uint64_t v14 = v12 + 50;
    while (1)
    {
      unint64_t v28 = v13;
      unint64_t v26 = *(void *)(v14 - 10);
      unint64_t v27 = *(void *)(v14 - 18);
      unsigned int v25 = *(_DWORD *)(v14 - 2);
      *(_DWORD *)unint64_t v29 = v6;
      *(_WORD *)&v29[4] = v5;
      *(_WORD *)&v29[6] = v7;
      *(_WORD *)&v29[8] = v4;
      *(_WORD *)&v29[10] = v8;
      *(_WORD *)&v29[12] = v9;
      *(_WORD *)&v29[14] = v10;
      *(_WORD *)&v29[16] = v21;
      *(_WORD *)&v29[18] = v11;
      unsigned int v24 = _So9NSDecimala__length_getter(v29);
      *(_DWORD *)unint64_t v29 = v6;
      *(_WORD *)&v29[4] = v5;
      *(_WORD *)&v29[6] = v7;
      *(_WORD *)&v29[8] = v4;
      *(_WORD *)&v29[10] = v8;
      *(_WORD *)&v29[12] = v9;
      *(_WORD *)&v29[14] = v10;
      *(_WORD *)&v29[16] = v21;
      *(_WORD *)&v29[18] = v11;
      unsigned int isCompact_getter = _So9NSDecimala__isCompact_getter(v29);
      *(_WORD *)&v29[4] = v5;
      *(_WORD *)&v29[6] = v7;
      *(_WORD *)&v29[8] = v4;
      *(_WORD *)&v29[10] = v8;
      *(_WORD *)&v29[12] = v9;
      *(_WORD *)&v29[14] = v10;
      *(_WORD *)&v29[16] = v21;
      *(_WORD *)&v29[18] = v11;
      _So9NSDecimala__exponent_setter(0LL, v29);
      _So9NSDecimala__length_setter(v24, v29);
      _So9NSDecimala__isNegative_setter(0LL, v29);
      _So9NSDecimala__isCompact_setter_0(isCompact_getter, v29);
      _So9NSDecimala__reserved_setter(v29);
      if (specialized static NSDecimal._compare(lhs:rhs:)( v27,  v26,  v25,  *(unint64_t *)v29,  *(unint64_t *)&v29[8],  *(unsigned int *)&v29[16]) == -1) {
        break;
      }
      v14 += 20LL;
      unint64_t v13 = v28 + 1;
      int v6 = v19;
      if (v20 == v28 + 1)
      {
        swift_bridgeObjectRelease();
        unint64_t v15 = *((void *)_powersOfTenDividingUInt128Max._rawValue + 2);
        __int16 v3 = v21;
        goto LABEL_15;
      }
    }

    swift_bridgeObjectRelease();
    __int16 v3 = v21;
    int v6 = v19;
    unint64_t v15 = v28;
  }

  else
  {
    unint64_t v15 = 0LL;
  }

BOOL NSDecimal.isFinite.getter(unint64_t a1, unint64_t a2, unsigned int a3)
{
  __int16 v3 = a3;
  __int16 v4 = a2;
  int v5 = a1;
  unint64_t v13 = a1;
  unint64_t v6 = HIDWORD(a1);
  unint64_t v7 = HIWORD(a1);
  unint64_t v8 = a2 >> 16;
  unint64_t v14 = a2;
  unint64_t v9 = HIDWORD(a2);
  unint64_t v10 = HIWORD(a2);
  unsigned int v11 = HIWORD(a3);
  unsigned int v15 = a3;
  LODWORD(v13) = v5;
  WORD2(v13) = v6;
  HIWORD(v13) = v7;
  LOWORD(v14) = v4;
  WORD1(v14) = v8;
  WORD2(v14) = v9;
  HIWORD(v14) = v10;
  LOWORD(v15) = v3;
  HIWORD(v15) = v11;
  return _So9NSDecimala__isNegative_getter(&v13) == 0;
}

uint64_t NSDecimal.floatingPointClass.getter(unint64_t a1, unint64_t a2, unsigned int a3)
{
  __int16 v3 = a3;
  __int16 v4 = a2;
  int v5 = a1;
  unint64_t v13 = a1;
  unint64_t v6 = HIDWORD(a1);
  unint64_t v7 = HIWORD(a1);
  unint64_t v8 = a2 >> 16;
  unint64_t v14 = a2;
  unint64_t v9 = HIDWORD(a2);
  unint64_t v10 = HIWORD(a2);
  unsigned int v11 = HIWORD(a3);
  unsigned int v15 = a3;
  if (!_So9NSDecimala__length_getter(&v13))
  {
    LODWORD(v13) = v5;
    WORD2(v13) = v6;
    HIWORD(v13) = v7;
    LOWORD(v14) = v4;
    WORD1(v14) = v8;
    WORD2(v14) = v9;
    HIWORD(v14) = v10;
    LOWORD(v15) = v3;
    HIWORD(v15) = v11;
  }

  LODWORD(v13) = v5;
  WORD2(v13) = v6;
  HIWORD(v13) = v7;
  LOWORD(v14) = v4;
  WORD1(v14) = v8;
  WORD2(v14) = v9;
  HIWORD(v14) = v10;
  LOWORD(v15) = v3;
  HIWORD(v15) = v11;
  LODWORD(v13) = v5;
  WORD2(v13) = v6;
  HIWORD(v13) = v7;
  LOWORD(v14) = v4;
  WORD1(v14) = v8;
  WORD2(v14) = v9;
  HIWORD(v14) = v10;
  LOWORD(v15) = v3;
  HIWORD(v15) = v11;
  else {
    return 8LL;
  }
}

uint64_t NSDecimal.isCanonical.getter()
{
  return 1LL;
}

BOOL NSDecimal.isSignMinus.getter(uint64_t a1, uint64_t a2, int a3)
{
  v4[0] = a1;
  v4[1] = a2;
  int v5 = a3;
  return _So9NSDecimala__isNegative_getter(v4) != 0;
}

uint64_t NSDecimal.isNormal.getter(unint64_t a1, unint64_t a2, unsigned int a3)
{
  __int16 v3 = a3;
  __int16 v4 = a2;
  int v5 = a1;
  unint64_t v13 = a1;
  unint64_t v6 = HIDWORD(a1);
  unint64_t v7 = HIWORD(a1);
  unint64_t v8 = a2 >> 16;
  unint64_t v14 = a2;
  unint64_t v9 = HIDWORD(a2);
  unint64_t v10 = HIWORD(a2);
  unsigned int v11 = HIWORD(a3);
  unsigned int v15 = a3;
  LODWORD(v13) = v5;
  WORD2(v13) = v6;
  HIWORD(v13) = v7;
  LOWORD(v14) = v4;
  WORD1(v14) = v8;
  WORD2(v14) = v9;
  HIWORD(v14) = v10;
  LOWORD(v15) = v3;
  HIWORD(v15) = v11;
  uint64_t result = _So9NSDecimala__isNegative_getter(&v13);
  if ((_DWORD)result)
  {
LABEL_3:
    LODWORD(v13) = v5;
    WORD2(v13) = v6;
    HIWORD(v13) = v7;
    LOWORD(v14) = v4;
    WORD1(v14) = v8;
    WORD2(v14) = v9;
    HIWORD(v14) = v10;
    LOWORD(v15) = v3;
    HIWORD(v15) = v11;
    if (_So9NSDecimala__length_getter(&v13))
    {
      return 1LL;
    }

    else
    {
      LODWORD(v13) = v5;
      WORD2(v13) = v6;
      HIWORD(v13) = v7;
      LOWORD(v14) = v4;
      WORD1(v14) = v8;
      WORD2(v14) = v9;
      HIWORD(v14) = v10;
      LOWORD(v15) = v3;
      HIWORD(v15) = v11;
      return _So9NSDecimala__isNegative_getter(&v13) == 0;
    }
  }

  return result;
}

uint64_t NSDecimal.isInfinite.getter()
{
  return 0LL;
}

Swift::Void __swiftcall NSDecimal.formTruncatingRemainder(dividingBy:)(NSDecimal *dividingBy)
{
}

unint64_t NSDecimal.nextUp.getter(unint64_t a1, unint64_t a2, unsigned int a3)
{
  unsigned int v27 = a1;
  unint64_t v5 = HIWORD(a1);
  LOWORD(v28) = WORD2(a1);
  WORD1(v28) = HIWORD(a1);
  int v6 = WORD2(a1);
  int v7 = (unsigned __int16)a2;
  *(void *)((char *)&v28 + 4) = a2;
  unint64_t v8 = HIWORD(a2);
  int v9 = (unsigned __int16)a3;
  int v10 = WORD1(a2);
  unsigned int v11 = HIWORD(a3);
  HIDWORD(v28) = a3;
  int v12 = WORD2(a2);
  if (!_So9NSDecimala__isNegative_getter(&v27))
  {
    unsigned int v27 = a1;
    LOWORD(v28) = v6;
    WORD1(v28) = v5;
    WORD2(v28) = v7;
    WORD3(v28) = v10;
    WORD4(v28) = v12;
    WORD5(v28) = v8;
    WORD6(v28) = v9;
    HIWORD(v28) = v11;
    int v19 = _So9NSDecimala__exponent_getter((char *)&v27);
    int v14 = v9;
    int v15 = v7;
    __int16 v16 = v6;
    if (v19 <= 126
      && v6 == 0xFFFF
      && (_DWORD)v5 == 0xFFFF
      && v15 == 0xFFFF
      && v10 == 0xFFFF
      && v12 == 0xFFFF
      && (_DWORD)v8 == 0xFFFF
      && v14 == 0xFFFF
      && v11 == 0xFFFF)
    {
      unsigned int v27 = a1;
      *(void *)&__int128 v28 = -1LL;
      *((void *)&v28 + 1) = -1LL;
      int v20 = _So9NSDecimala__exponent_getter((char *)&v27);
      LOWORD(v28) = -26214;
      *(void *)((char *)&v28 + 2) = 0x9999999999999999LL;
      *(_DWORD *)((char *)&v28 + 10) = -1717986919;
      HIWORD(v28) = 6553;
      _So9NSDecimala__exponent_setter((v20 + 1), &v27);
      _So9NSDecimala__length_setter(8LL, &v27);
      uint64_t v18 = 0LL;
      goto LABEL_22;
    }

uint64_t static NSDecimal.+ infix(_:_:)( uint64_t a1, uint64_t a2, int a3, unint64_t a4, unint64_t a5, unsigned int a6)
{
  v7[0] = a1;
  v7[1] = a2;
  int v8 = a3;
  specialized static NSDecimal.+= infix(_:_:)((int *)v7, a4, a5, a6);
  return v7[0];
}

unint64_t NSDecimal.nextDown.getter(unint64_t a1, unint64_t a2, unsigned int a3)
{
  __int16 v3 = a3;
  __int16 v4 = a2;
  unsigned int v5 = a1;
  unint64_t v34 = a1;
  unint64_t v6 = HIDWORD(a1);
  unint64_t v7 = HIWORD(a1);
  unint64_t v8 = a2 >> 16;
  unint64_t v35 = a2;
  unint64_t v9 = HIDWORD(a2);
  unint64_t v10 = HIWORD(a2);
  unsigned int v11 = HIWORD(a3);
  unsigned int v36 = a3;
  unsigned int v37 = a1;
  __int16 v38 = WORD2(a1);
  *(_DWORD *)__int16 v39 = __PAIR32__(a2, HIWORD(a1));
  *(_WORD *)&v39[4] = WORD1(a2);
  *(_WORD *)&v39[6] = WORD2(a2);
  *(_WORD *)&v39[8] = HIWORD(a2);
  unsigned int v40 = a3;
  if (_So9NSDecimala__length_getter(&v37))
  {
    unsigned int v37 = v5;
    __int16 v38 = v6;
    *(_WORD *)__int16 v39 = v7;
    *(_WORD *)&v39[2] = v4;
    *(_WORD *)&v39[4] = v8;
    *(_WORD *)&v39[6] = v9;
    *(_WORD *)&v39[8] = v10;
    LOWORD(v40) = v3;
    HIWORD(v40) = v11;
    int isNegative_getter = _So9NSDecimala__isNegative_getter(&v37);
    _So9NSDecimala__isNegative_setter(isNegative_getter ^ 1u, &v34);
    unsigned int v5 = v34;
    LOWORD(v6) = WORD2(v34);
    unint64_t v7 = HIWORD(v34);
  }

  unint64_t v13 = NSDecimal.nextUp.getter(v5 | ((unint64_t)(unsigned __int16)v6 << 32) | (v7 << 48), v35, v36);
  unsigned int v14 = v13;
  __int16 v16 = v15;
  __int16 v18 = v17;
  unsigned int v37 = v13;
  unint64_t v19 = HIDWORD(v13);
  __int16 v38 = WORD2(v13);
  unint64_t v20 = HIWORD(v13);
  *(_WORD *)__int16 v39 = HIWORD(v13);
  unint64_t v21 = v15 >> 16;
  *(void *)&v39[2] = v15;
  unint64_t v22 = HIDWORD(v15);
  unint64_t v23 = HIWORD(v15);
  unsigned int v24 = HIWORD(v17);
  unsigned int v40 = v17;
  int v27 = v13;
  __int16 v28 = WORD2(v13);
  unsigned int v29 = __PAIR32__(v15, HIWORD(v13));
  __int16 v30 = WORD1(v15);
  __int16 v31 = WORD2(v15);
  __int16 v32 = HIWORD(v15);
  unsigned int v33 = v17;
  if (_So9NSDecimala__length_getter(&v27))
  {
    int v27 = v14;
    __int16 v28 = v19;
    LOWORD(v29) = v20;
    HIWORD(v29) = v16;
    __int16 v30 = v21;
    __int16 v31 = v22;
    __int16 v32 = v23;
    LOWORD(v33) = v18;
    HIWORD(v33) = v24;
    int v25 = _So9NSDecimala__isNegative_getter(&v27);
    _So9NSDecimala__isNegative_setter(v25 ^ 1u, &v37);
    unsigned int v14 = v37;
    LOWORD(v19) = v38;
    unint64_t v20 = *(unsigned __int16 *)v39;
  }

  return v14 | ((unint64_t)(unsigned __int16)v19 << 32) | (v20 << 48);
}

Swift::Bool __swiftcall NSDecimal.isEqual(to:)(NSDecimal *to)
{
  return specialized static NSDecimal.== infix(_:_:)(v3, v4, v5, (unint64_t)to, v1, v2);
}

Swift::Bool __swiftcall NSDecimal.isLess(than:)(NSDecimal *than)
{
  return specialized static NSDecimal._compare(lhs:rhs:)(v3, v4, v5, (unint64_t)than, v1, v2) == -1;
}

Swift::Bool __swiftcall NSDecimal.isLessThanOrEqualTo(_:)(NSDecimal *a1)
{
  return (unint64_t)(specialized static NSDecimal._compare(lhs:rhs:)(v3, v4, v5, (unint64_t)a1, v1, v2) + 1) < 2;
}

Swift::Bool __swiftcall NSDecimal.isTotallyOrdered(belowOrEqualTo:)(NSDecimal *belowOrEqualTo)
{
  unsigned int v6 = v5;
  unint64_t v7 = v4;
  unint64_t v8 = v3;
  unsigned int v18 = v2;
  unint64_t v19 = v3;
  unint64_t v17 = v1;
  unint64_t v10 = HIDWORD(v3);
  unint64_t v11 = HIWORD(v3);
  unint64_t v20 = v4;
  unint64_t v12 = v4 >> 16;
  unint64_t v13 = HIDWORD(v4);
  unint64_t v14 = HIWORD(v4);
  unsigned int v15 = HIWORD(v5);
  unsigned int v21 = v5;
  if (!_So9NSDecimala__length_getter(&v19))
  {
    LODWORD(v19) = v8;
    WORD2(v19) = v10;
    HIWORD(v19) = v11;
    LOWORD(v20) = v7;
    WORD1(v20) = v12;
    WORD2(v20) = v13;
    HIWORD(v20) = v14;
    LOWORD(v21) = v6;
    HIWORD(v21) = v15;
  }

  return specialized static NSDecimal._compare(lhs:rhs:)((unint64_t)belowOrEqualTo, v17, v18, v8, v7, v6) != -1;
}

unint64_t protocol witness for ExpressibleByFloatLiteral.init(floatLiteral:) in conformance NSDecimal@<X0>( double *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t result = specialized NSDecimal.init(_:)(*a1);
  *(void *)a2 = result;
  *(_WORD *)(a2 + 8) = v4;
  *(_WORD *)(a2 + 10) = v5;
  *(_WORD *)(a2 + 12) = v6;
  *(_WORD *)(a2 + 14) = v7;
  *(_WORD *)(a2 + 16) = v8;
  *(_WORD *)(a2 + 18) = v9;
  return result;
}

unint64_t protocol witness for ExpressibleByIntegerLiteral.init(integerLiteral:) in conformance NSDecimal@<X0>( uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *a1;
  if (*a1 >= 0) {
    unint64_t v4 = *a1;
  }
  else {
    unint64_t v4 = -v3;
  }
  unint64_t result = specialized NSDecimal.init(_:)(v4);
  unint64_t v14 = result;
  unint64_t v8 = HIDWORD(result);
  unint64_t v9 = HIWORD(result);
  unint64_t v10 = v6 >> 16;
  unint64_t v15 = v6;
  unint64_t v11 = HIDWORD(v6);
  unint64_t v12 = HIWORD(v6);
  unsigned int v13 = HIWORD(v7);
  unsigned int v16 = v7;
  if (v3 < 0)
  {
    _So9NSDecimala__isNegative_setter(1LL, &v14);
    unint64_t result = v14;
    LOWORD(v8) = WORD2(v14);
    LOWORD(v9) = HIWORD(v14);
    LOWORD(v6) = v15;
    LOWORD(v10) = WORD1(v15);
    LOWORD(v11) = WORD2(v15);
    LOWORD(v12) = HIWORD(v15);
    LOWORD(v7) = v16;
    LOWORD(v13) = HIWORD(v16);
  }

  *(_DWORD *)a2 = result;
  *(_WORD *)(a2 + 4) = v8;
  *(_WORD *)(a2 + 6) = v9;
  *(_WORD *)(a2 + 8) = v6;
  *(_WORD *)(a2 + 10) = v10;
  *(_WORD *)(a2 + 12) = v11;
  *(_WORD *)(a2 + 14) = v12;
  *(_WORD *)(a2 + 16) = v7;
  *(_WORD *)(a2 + 18) = v13;
  return result;
}

void NSDecimal.hash(into:)(uint64_t a1, unint64_t a2, unint64_t a3, unsigned int a4)
{
  if ((v4 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v5 = v4;
  }
  else {
    Swift::UInt64 v5 = 0LL;
  }
  Hasher._combine(_:)(v5);
}

Swift::Int NSDecimal.hashValue.getter(unint64_t a1, unint64_t a2, unsigned int a3)
{
  if ((v6 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v7 = v6;
  }
  else {
    Swift::UInt64 v7 = 0LL;
  }
  Hasher._combine(_:)(v7);
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance NSDecimal()
{
  unsigned int v1 = *(_DWORD *)(v0 + 16);
  uint64_t v4 = v0;
  unint64_t v2 = *(void *)v0;
  unint64_t v3 = *(void *)(v4 + 8);
  Hasher.init(_seed:)();
  NSDecimal.doubleValue.getter(v2, v3, v1);
  if ((v5 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v6 = v5;
  }
  else {
    Swift::UInt64 v6 = 0LL;
  }
  Hasher._combine(_:)(v6);
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance NSDecimal()
{
  if ((v1 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v2 = v1;
  }
  else {
    Swift::UInt64 v2 = 0LL;
  }
  Hasher._combine(_:)(v2);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance NSDecimal()
{
  unsigned int v1 = *(_DWORD *)(v0 + 16);
  uint64_t v4 = v0;
  unint64_t v2 = *(void *)v0;
  unint64_t v3 = *(void *)(v4 + 8);
  Hasher.init(_seed:)();
  NSDecimal.doubleValue.getter(v2, v3, v1);
  if ((v5 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v6 = v5;
  }
  else {
    Swift::UInt64 v6 = 0LL;
  }
  Hasher._combine(_:)(v6);
  return Hasher._finalize()();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance NSDecimal( uint64_t a1, uint64_t a2)
{
  return specialized static NSDecimal.== infix(_:_:)( *(void *)a1,  *(void *)(a1 + 8),  *(_DWORD *)(a1 + 16),  *(void *)a2,  *(void *)(a2 + 8),  *(_DWORD *)(a2 + 16));
}

BOOL protocol witness for static Comparable.< infix(_:_:) in conformance NSDecimal(uint64_t a1, uint64_t a2)
{
  return specialized static NSDecimal._compare(lhs:rhs:)( *(void *)a1,  *(void *)(a1 + 8),  *(_DWORD *)(a1 + 16),  *(void *)a2,  *(void *)(a2 + 8),  *(_DWORD *)(a2 + 16)) == -1;
}

BOOL protocol witness for static Comparable.<= infix(_:_:) in conformance NSDecimal(uint64_t a1, uint64_t a2)
{
  return specialized static NSDecimal._compare(lhs:rhs:)( *(void *)a2,  *(void *)(a2 + 8),  *(_DWORD *)(a2 + 16),  *(void *)a1,  *(void *)(a1 + 8),  *(_DWORD *)(a1 + 16)) != -1;
}

BOOL protocol witness for static Comparable.>= infix(_:_:) in conformance NSDecimal(uint64_t a1, uint64_t a2)
{
  return specialized static NSDecimal._compare(lhs:rhs:)( *(void *)a1,  *(void *)(a1 + 8),  *(_DWORD *)(a1 + 16),  *(void *)a2,  *(void *)(a2 + 8),  *(_DWORD *)(a2 + 16)) != -1;
}

BOOL protocol witness for static Comparable.> infix(_:_:) in conformance NSDecimal(uint64_t a1, uint64_t a2)
{
  return specialized static NSDecimal._compare(lhs:rhs:)( *(void *)a2,  *(void *)(a2 + 8),  *(_DWORD *)(a2 + 16),  *(void *)a1,  *(void *)(a1 + 8),  *(_DWORD *)(a1 + 16)) == -1;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance NSDecimal.CodingKeys()
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_183074EC8 + 4 * byte_18373123C[*v0]))( 0x746E656E6F707865LL,  0xE800000000000000LL);
}

uint64_t sub_183074EC8()
{
  return 0x6874676E656CLL;
}

uint64_t sub_183074EDC()
{
  return 0x69746167654E7369LL;
}

uint64_t sub_183074EF8()
{
  return 0x6361706D6F437369LL;
}

uint64_t sub_183074F14()
{
  return 0x61737369746E616DLL;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance NSDecimal.CodingKeys@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result = specialized NSDecimal.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

unint64_t protocol witness for CodingKey.init(intValue:) in conformance NSDecimal.CodingKeys@<X0>( unint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result = specialized FormatStyleCapitalizationContext.Option.init(rawValue:)(a1);
  *a2 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance NSDecimal.CodingKeys()
{
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance NSDecimal.CodingKeys()
{
  return CodingKey.debugDescription.getter();
}

char *NSDecimal.init(from:)(void *a1)
{
  unint64_t result = specialized NSDecimal.init(from:)(a1);
  if (v1) {
    return (char *)v3;
  }
  return result;
}

uint64_t NSDecimal.encode(to:)(void *a1, unint64_t a2, unint64_t a3, unsigned int a4)
{
  unint64_t v26 = HIWORD(a2);
  unint64_t v27 = HIDWORD(a2);
  unint64_t v25 = HIDWORD(a3);
  unint64_t v28 = HIWORD(a3);
  unint64_t v29 = a3 >> 16;
  unsigned int v8 = HIWORD(a4);
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<NSDecimal.CodingKeys>);
  uint64_t v24 = *(void *)(v9 - 8);
  MEMORY[0x1895F8858](v9);
  unint64_t v11 = (char *)&v21 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type NSDecimal.CodingKeys and conformance NSDecimal.CodingKeys();
  uint64_t v12 = v9;
  unsigned int v13 = v8;
  unint64_t v14 = v11;
  __int16 v16 = v26;
  __int16 v15 = v27;
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  unint64_t v21 = a2;
  unint64_t v22 = a3;
  int v30 = a2;
  __int16 v31 = v15;
  __int16 v32 = v16;
  __int16 v33 = a3;
  __int16 v34 = v29;
  __int16 v17 = v25;
  __int16 v35 = v25;
  __int16 v18 = v28;
  __int16 v36 = v28;
  __int16 v37 = a4;
  __int16 v38 = v13;
  _So9NSDecimala__exponent_getter((char *)&v30);
  LOBYTE(v30) = 0;
  uint64_t v19 = v23;
  KeyedEncodingContainer.encode(_:forKey:)();
  if (v19) {
    return (*(uint64_t (**)(char *, uint64_t))(v24 + 8))(v14, v12);
  }
  int v30 = v21;
  __int16 v31 = v15;
  __int16 v32 = v16;
  __int16 v33 = v22;
  __int16 v34 = v29;
  __int16 v35 = v17;
  __int16 v36 = v18;
  __int16 v37 = a4;
  __int16 v38 = v13;
  _So9NSDecimala__length_getter(&v30);
  LOBYTE(v30) = 1;
  KeyedEncodingContainer.encode(_:forKey:)();
  int v30 = v21;
  __int16 v31 = v15;
  __int16 v32 = v16;
  __int16 v33 = v22;
  __int16 v34 = v29;
  __int16 v35 = v17;
  __int16 v36 = v18;
  __int16 v37 = a4;
  __int16 v38 = v13;
  _So9NSDecimala__isNegative_getter(&v30);
  LOBYTE(v30) = 2;
  KeyedEncodingContainer.encode(_:forKey:)();
  int v30 = v21;
  __int16 v31 = v15;
  __int16 v32 = v16;
  __int16 v33 = v22;
  __int16 v34 = v29;
  __int16 v35 = v17;
  __int16 v36 = v28;
  __int16 v37 = a4;
  __int16 v38 = v13;
  _So9NSDecimala__isCompact_getter(&v30);
  LOBYTE(v30) = 3;
  KeyedEncodingContainer.encode(_:forKey:)();
  LODWORD(v23) = a4;
  char v40 = 4;
  KeyedEncodingContainer.nestedUnkeyedContainer(forKey:)();
  __swift_mutable_project_boxed_opaque_existential_1((uint64_t)&v30, v39);
  dispatch thunk of UnkeyedEncodingContainer.encode(_:)();
  LODWORD(v27) = v13;
  __swift_mutable_project_boxed_opaque_existential_1((uint64_t)&v30, v39);
  dispatch thunk of UnkeyedEncodingContainer.encode(_:)();
  __swift_mutable_project_boxed_opaque_existential_1((uint64_t)&v30, v39);
  dispatch thunk of UnkeyedEncodingContainer.encode(_:)();
  __swift_mutable_project_boxed_opaque_existential_1((uint64_t)&v30, v39);
  dispatch thunk of UnkeyedEncodingContainer.encode(_:)();
  __swift_mutable_project_boxed_opaque_existential_1((uint64_t)&v30, v39);
  dispatch thunk of UnkeyedEncodingContainer.encode(_:)();
  __swift_mutable_project_boxed_opaque_existential_1((uint64_t)&v30, v39);
  dispatch thunk of UnkeyedEncodingContainer.encode(_:)();
  __swift_mutable_project_boxed_opaque_existential_1((uint64_t)&v30, v39);
  dispatch thunk of UnkeyedEncodingContainer.encode(_:)();
  __swift_mutable_project_boxed_opaque_existential_1((uint64_t)&v30, v39);
  dispatch thunk of UnkeyedEncodingContainer.encode(_:)();
  (*(void (**)(char *, uint64_t))(v24 + 8))(v14, v12);
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)&v30);
}

char *protocol witness for Decodable.init(from:) in conformance NSDecimal@<X0>( void *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t result = specialized NSDecimal.init(from:)(a1);
  if (!v2)
  {
    *(void *)a2 = result;
    *(void *)(a2 + 8) = v5;
    *(_DWORD *)(a2 + 16) = v6;
  }

  return result;
}

uint64_t protocol witness for Encodable.encode(to:) in conformance NSDecimal(void *a1)
{
  return NSDecimal.encode(to:)(a1, *(void *)v1, *(void *)(v1 + 8), *(_DWORD *)(v1 + 16));
}

uint64_t NSDecimal.init<A>(exactly:)(_BYTE *a1, _BYTE *a2, uint64_t a3)
{
  uint64_t v144 = a3;
  __int128 v137 = a1;
  uint64_t v4 = *(void *)(a3 + 24);
  swift_getAssociatedTypeWitness();
  uint64_t v140 = *(void *)(swift_getAssociatedConformanceWitness() + 16);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  MEMORY[0x1895F8858](AssociatedTypeWitness);
  uint64_t v138 = swift_checkMetadataState();
  uint64_t v142 = *(void *)(v138 - 8);
  uint64_t v6 = MEMORY[0x1895F8858](v138);
  char v129 = &v118[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v8 = MEMORY[0x1895F8858](v6);
  __int128 v128 = &v118[-v9];
  uint64_t v10 = MEMORY[0x1895F8858](v8);
  uint64_t v133 = &v118[-v11];
  uint64_t v12 = MEMORY[0x1895F8858](v10);
  unint64_t v14 = &v118[-v13];
  MEMORY[0x1895F8858](v12);
  __int128 v143 = &v118[-v15];
  uint64_t v135 = v4;
  uint64_t v16 = *(void *)(v4 + 16);
  uint64_t v17 = swift_getAssociatedTypeWitness();
  uint64_t v18 = MEMORY[0x1895F8858](v17);
  unint64_t v20 = &v118[-v19];
  uint64_t v146 = *((void *)a2 - 1);
  uint64_t v21 = MEMORY[0x1895F8858](v18);
  char v126 = &v118[-((v22 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v23 = MEMORY[0x1895F8858](v21);
  __int128 v127 = &v118[-v24];
  uint64_t v25 = MEMORY[0x1895F8858](v23);
  uint64_t v131 = &v118[-v26];
  uint64_t v27 = MEMORY[0x1895F8858](v25);
  __int128 v136 = &v118[-v28];
  uint64_t v29 = MEMORY[0x1895F8858](v27);
  uint64_t v145 = &v118[-v30];
  uint64_t v31 = MEMORY[0x1895F8858](v29);
  __int128 v141 = &v118[-v32];
  MEMORY[0x1895F8858](v31);
  __int16 v34 = &v118[-v33];
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  MEMORY[0x186E1CDF8](&unk_1837317E8, 256LL, v17, AssociatedConformanceWitness);
  uint64_t v124 = v20;
  uint64_t v125 = v16;
  dispatch thunk of ExpressibleByFloatLiteral.init(floatLiteral:)();
  uint64_t v36 = *(void *)(*(void *)(v144 + 16) + 8LL);
  if ((dispatch thunk of static Equatable.== infix(_:_:)() & 1) != 0)
  {
    __int16 v37 = *(void (**)(uint64_t, _BYTE *))(v146 + 8);
    v37((uint64_t)v137, a2);
    v37((uint64_t)v34, a2);
    return 0LL;
  }

  uint64_t v120 = AssociatedConformanceWitness;
  uint64_t v121 = v17;
  uint64_t v122 = v36;
  char v39 = dispatch thunk of static BinaryInteger.isSigned.getter();
  char v40 = *(void (**)(_BYTE *, uint64_t, _BYTE *))(v146 + 16);
  __int16 v41 = v141;
  v40(v141, (uint64_t)v137, a2);
  uint64_t v134 = v34;
  v40(v145, (uint64_t)v34, a2);
  uint64_t v130 = (void (*)(_BYTE *, _BYTE *, _BYTE *))v40;
  if ((v39 & 1) == 0)
  {
    __int16 v47 = *(void (**)(_BYTE *, _BYTE *))(v146 + 8);
    v47(v145, a2);
    uint64_t v132 = v47;
    v47(v41, a2);
    goto LABEL_7;
  }

  uint64_t v42 = v145;
  char v43 = dispatch thunk of static Comparable.< infix(_:_:)();
  int v44 = *(void (**)(_BYTE *, _BYTE *))(v146 + 8);
  v44(v42, a2);
  uint64_t v132 = v44;
  v44(v41, a2);
  if ((v43 & 1) == 0)
  {
LABEL_7:
    uint64_t v46 = v142;
    uint64_t v45 = v138;
    unsigned int v123 = 0;
    goto LABEL_8;
  }

  unsigned int v123 = 1;
  uint64_t v45 = v138;
  uint64_t v46 = v142;
LABEL_8:
  __int128 v141 = a2;
  dispatch thunk of Numeric.magnitude.getter();
  uint64_t v48 = swift_getAssociatedConformanceWitness();
  LODWORD(v146) = 0;
  __int16 v49 = &unk_1837317F0;
  uint64_t v138 = v48;
  __int128 v139 = v14;
  while (1)
  {
    __int16 v50 = v49;
    MEMORY[0x186E1CDF8]();
    dispatch thunk of ExpressibleByFloatLiteral.init(floatLiteral:)();
    __int16 v51 = v14;
    uint64_t v52 = swift_getAssociatedConformanceWitness();
    char v53 = dispatch thunk of BinaryInteger.isMultiple(of:)();
    uint64_t v54 = v45;
    uint64_t v145 = *(_BYTE **)(v46 + 8);
    ((void (*)(_BYTE *, uint64_t))v145)(v51, v45);
    LODWORD(v146) = v146 + 1;
    uint64_t v55 = v50;
    MEMORY[0x186E1CDF8](v50, 1280LL, AssociatedTypeWitness, v138);
    uint64_t v56 = v139;
    dispatch thunk of ExpressibleByFloatLiteral.init(floatLiteral:)();
    unint64_t v14 = v56;
    dispatch thunk of static BinaryInteger./= infix(_:_:)();
    ((void (*)(_BYTE *, uint64_t))v145)(v56, v45);
    __int16 v49 = v55;
    uint64_t v46 = v142;
  }

  uint64_t v57 = v143;
  uint64_t v58 = v45;
  uint64_t v59 = dispatch thunk of BinaryInteger.bitWidth.getter();
  uint64_t v60 = v136;
  unint64_t v61 = v141;
  v130(v136, v134, v141);
  if (v59 < 129)
  {
    v132(v60, v61);
    goto LABEL_19;
  }

  *(void *)uint64_t v147 = 128LL;
  lazy protocol witness table accessor for type Int and conformance Int();
  unint64_t v62 = v133;
  dispatch thunk of static BinaryInteger.>> infix<A>(_:_:)();
  int v63 = dispatch thunk of static BinaryInteger.isSigned.getter();
  if (((v63 ^ dispatch thunk of static BinaryInteger.isSigned.getter()) & 1) == 0)
  {
    uint64_t v88 = dispatch thunk of BinaryInteger.bitWidth.getter();
    uint64_t v89 = v62;
    uint64_t v90 = v136;
    uint64_t v45 = v58;
    if (v88 >= dispatch thunk of BinaryInteger.bitWidth.getter())
    {
      v130(v131, v90, v61);
      char v100 = v139;
      dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
      swift_getAssociatedConformanceWitness();
      char v92 = dispatch thunk of static Equatable.== infix(_:_:)();
      char v101 = (void (*)(_BYTE *, uint64_t))v145;
      ((void (*)(_BYTE *, uint64_t))v145)(v100, v58);
      v101(v89, v58);
      uint64_t v93 = v90;
      uint64_t v94 = v61;
      int v71 = v132;
    }

    else
    {
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v142 + 16))(v139, v89, v58);
      uint64_t v91 = v131;
      dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
      char v92 = dispatch thunk of static Equatable.== infix(_:_:)();
      int v71 = v132;
      v132(v91, v61);
      ((void (*)(_BYTE *, uint64_t))v145)(v89, v58);
      uint64_t v93 = v90;
      uint64_t v94 = v61;
    }

    v71(v93, v94);
    uint64_t v57 = v143;
    uint64_t v72 = v134;
    if ((v92 & 1) == 0) {
      goto LABEL_45;
    }
    goto LABEL_19;
  }

  int v119 = dispatch thunk of static BinaryInteger.isSigned.getter();
  uint64_t v64 = dispatch thunk of BinaryInteger.bitWidth.getter();
  uint64_t v65 = dispatch thunk of BinaryInteger.bitWidth.getter();
  if ((v119 & 1) == 0)
  {
    uint64_t v72 = v134;
    if (v64 < v65)
    {
      uint64_t v95 = v133;
      uint64_t v45 = v54;
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v142 + 16))(v139, v133, v54);
      uint64_t v96 = v131;
      uint64_t v97 = v141;
      dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
      uint64_t v98 = v136;
      char v99 = dispatch thunk of static Equatable.== infix(_:_:)();
      int v71 = v132;
      v132(v96, v97);
      ((void (*)(_BYTE *, uint64_t))v145)(v95, v45);
      unint64_t v61 = v97;
      v71(v98, v97);
      uint64_t v57 = v143;
      if ((v99 & 1) == 0) {
        goto LABEL_45;
      }
      goto LABEL_19;
    }

    MEMORY[0x186E1CDF8](&unk_1837317E8, 256LL);
    __int128 v112 = v131;
    uint64_t v103 = v141;
    dispatch thunk of ExpressibleByFloatLiteral.init(floatLiteral:)();
    __int16 v109 = v136;
    char v113 = dispatch thunk of static Comparable.>= infix(_:_:)();
    int v71 = v132;
    v132(v112, v103);
    __int128 v114 = v129;
    uint64_t v45 = v54;
    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v142 + 16))(v129, v133, v54);
    __int128 v115 = v126;
    v130(v126, v109, v103);
    Swift::String v106 = (void (*)(_BYTE *, uint64_t))v145;
    if ((v113 & 1) != 0)
    {
      __int128 v116 = v139;
      dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
      swift_getAssociatedConformanceWitness();
      LODWORD(v144) = dispatch thunk of static Equatable.== infix(_:_:)();
      v106(v116, v45);
      v106(v114, v45);
      __int128 v111 = v133;
LABEL_41:
      v106(v111, v45);
      v71(v109, v103);
      unint64_t v61 = v103;
      uint64_t v57 = v143;
      uint64_t v72 = v134;
      if ((v144 & 1) == 0) {
        goto LABEL_45;
      }
      goto LABEL_19;
    }

uint64_t static NSDecimal.zero.getter()
{
  return 0LL;
}

uint64_t static NSDecimal./= infix(_:_:)( uint64_t a1, unint64_t a2, unint64_t a3, unsigned int a4)
{
  uint64_t result = specialized NSDecimal._divide(by:roundingMode:)( a2,  a3,  a4,  *(void *)a1,  *(void *)(a1 + 8),  *(_DWORD *)(a1 + 16));
  *(void *)a1 = result;
  *(_WORD *)(a1 + 8) = v6;
  *(_WORD *)(a1 + 10) = v7;
  *(_WORD *)(a1 + 12) = v8;
  *(_WORD *)(a1 + 14) = v9;
  *(_WORD *)(a1 + 16) = v10;
  *(_WORD *)(a1 + 18) = v11;
  return result;
}

unint64_t static NSDecimal./ infix(_:_:)( unint64_t a1, unint64_t a2, unsigned int a3, unint64_t a4, unint64_t a5, unsigned int a6)
{
  unint64_t v6 = specialized NSDecimal._divide(by:roundingMode:)(a4, a5, a6, a1, a2, a3);
  return v6 | ((unint64_t)WORD2(v6) << 32) | (HIWORD(v6) << 48);
}

uint64_t protocol witness for static SignedNumeric.- prefix(_:) in conformance NSDecimal@<X0>( int *a1@<X0>, uint64_t a2@<X8>)
{
  int v3 = *a1;
  __int16 v4 = *((_WORD *)a1 + 2);
  __int16 v5 = *((_WORD *)a1 + 3);
  __int16 v6 = *((_WORD *)a1 + 4);
  __int16 v7 = *((_WORD *)a1 + 5);
  __int16 v8 = *((_WORD *)a1 + 6);
  __int16 v9 = *((_WORD *)a1 + 7);
  __int16 v10 = *((_WORD *)a1 + 8);
  __int16 v11 = *((_WORD *)a1 + 9);
  *(_DWORD *)a2 = *a1;
  *(_WORD *)(a2 + 4) = v4;
  *(_WORD *)(a2 + 6) = v5;
  *(_WORD *)(a2 + 8) = v6;
  *(_WORD *)(a2 + 10) = v7;
  *(_WORD *)(a2 + 12) = v8;
  *(_WORD *)(a2 + 14) = v9;
  *(_WORD *)(a2 + 16) = v10;
  *(_WORD *)(a2 + 18) = v11;
  int v14 = v3;
  __int16 v15 = v4;
  __int16 v16 = v5;
  __int16 v17 = v6;
  __int16 v18 = v7;
  __int16 v19 = v8;
  __int16 v20 = v9;
  __int16 v21 = v10;
  __int16 v22 = v11;
  uint64_t result = _So9NSDecimala__length_getter(&v14);
  if ((_DWORD)result)
  {
    int v14 = v3;
    __int16 v15 = v4;
    __int16 v16 = v5;
    __int16 v17 = v6;
    __int16 v18 = v7;
    __int16 v19 = v8;
    __int16 v20 = v9;
    __int16 v21 = v10;
    __int16 v22 = v11;
    int isNegative_getter = _So9NSDecimala__isNegative_getter(&v14);
    return _So9NSDecimala__isNegative_setter(isNegative_getter ^ 1u, (_DWORD *)a2);
  }

  return result;
}

uint64_t protocol witness for SignedNumeric.negate() in conformance NSDecimal()
{
  int v1 = *v0;
  __int16 v2 = *((_WORD *)v0 + 2);
  __int16 v3 = *((_WORD *)v0 + 3);
  __int16 v4 = *((_WORD *)v0 + 4);
  __int16 v5 = *((_WORD *)v0 + 5);
  __int16 v6 = *((_WORD *)v0 + 6);
  __int16 v7 = *((_WORD *)v0 + 7);
  __int16 v8 = *((_WORD *)v0 + 8);
  __int16 v9 = *((_WORD *)v0 + 9);
  int v12 = *v0;
  __int16 v13 = v2;
  __int16 v14 = v3;
  __int16 v15 = v4;
  __int16 v16 = v5;
  __int16 v17 = v6;
  __int16 v18 = v7;
  __int16 v19 = v8;
  __int16 v20 = v9;
  uint64_t result = _So9NSDecimala__length_getter(&v12);
  if ((_DWORD)result)
  {
    int v12 = v1;
    __int16 v13 = v2;
    __int16 v14 = v3;
    __int16 v15 = v4;
    __int16 v16 = v5;
    __int16 v17 = v6;
    __int16 v18 = v7;
    __int16 v19 = v8;
    __int16 v20 = v9;
    int isNegative_getter = _So9NSDecimala__isNegative_getter(&v12);
    return _So9NSDecimala__isNegative_setter(isNegative_getter ^ 1u, v0);
  }

  return result;
}

uint64_t protocol witness for Numeric.init<A>(exactly:) in conformance NSDecimal@<X0>( _BYTE *a1@<X0>, _BYTE *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t result = NSDecimal.init<A>(exactly:)(a1, a2, a3);
  *(void *)a4 = result;
  *(void *)(a4 + 8) = v6;
  *(_DWORD *)(a4 + 16) = v7;
  *(_BYTE *)(a4 + 20) = v8 & 1;
  return result;
}

unint64_t protocol witness for Numeric.magnitude.getter in conformance NSDecimal@<X0>( uint64_t a1@<X8>)
{
  unint64_t result = NSDecimal.magnitude.getter(*(void *)v1, *(void *)(v1 + 8), *(_DWORD *)(v1 + 16));
  *(void *)a1 = result;
  *(_WORD *)(a1 + 8) = v4;
  *(_WORD *)(a1 + 10) = v5;
  *(_WORD *)(a1 + 12) = v6;
  *(_WORD *)(a1 + 14) = v7;
  *(_WORD *)(a1 + 16) = v8;
  *(_WORD *)(a1 + 18) = v9;
  return result;
}

uint64_t protocol witness for static Numeric.* infix(_:_:) in conformance NSDecimal@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return protocol witness for static Numeric.* infix(_:_:) in conformance NSDecimal( a1,  a2,  (uint64_t (*)(void, void, void, void, void, void))specialized static NSDecimal.* infix(_:_:),  a3);
}

uint64_t protocol witness for static Numeric.*= infix(_:_:) in conformance NSDecimal( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return protocol witness for static Numeric.*= infix(_:_:) in conformance NSDecimal( a1,  a2,  a3,  a4,  (uint64_t (*)(uint64_t, void, void, void))specialized static NSDecimal.*= infix(_:_:));
}

void protocol witness for static AdditiveArithmetic.zero.getter in conformance NSDecimal(uint64_t a1@<X8>)
{
  *(void *)a1 = 0LL;
  *(void *)(a1 + 8) = 0LL;
  *(_DWORD *)(a1 + 16) = 0;
}

__n128 protocol witness for static AdditiveArithmetic.+ infix(_:_:) in conformance NSDecimal@<Q0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  unsigned int v4 = *(_DWORD *)(a2 + 16);
  unint64_t v5 = *(void *)a2;
  unint64_t v6 = *(void *)(a2 + 8);
  int v9 = *(_DWORD *)a1;
  __n128 v10 = *(__n128 *)(a1 + 4);
  specialized static NSDecimal.+= infix(_:_:)(&v9, v5, v6, v4);
  __n128 result = v10;
  *(_DWORD *)a3 = v9;
  *(__n128 *)(a3 + 4) = result;
  return result;
}

uint64_t protocol witness for static AdditiveArithmetic.+= infix(_:_:) in conformance NSDecimal( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return protocol witness for static Numeric.*= infix(_:_:) in conformance NSDecimal( a1,  a2,  a3,  a4,  (uint64_t (*)(uint64_t, void, void, void))specialized static NSDecimal.+= infix(_:_:));
}

uint64_t protocol witness for static AdditiveArithmetic.- infix(_:_:) in conformance NSDecimal@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return protocol witness for static Numeric.* infix(_:_:) in conformance NSDecimal( a1,  a2,  (uint64_t (*)(void, void, void, void, void, void))specialized static NSDecimal.- infix(_:_:),  a3);
}

uint64_t protocol witness for static Numeric.* infix(_:_:) in conformance NSDecimal@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t (*a3)(void, void, void, void, void, void)@<X4>, uint64_t a4@<X8>)
{
  uint64_t result = a3( *(void *)a1,  *(void *)(a1 + 8),  *(unsigned int *)(a1 + 16),  *(void *)a2,  *(void *)(a2 + 8),  *(unsigned int *)(a2 + 16));
  *(void *)a4 = result;
  *(_WORD *)(a4 + 8) = v6;
  *(_WORD *)(a4 + 10) = v7;
  *(_WORD *)(a4 + 12) = v8;
  *(_WORD *)(a4 + 14) = v9;
  *(_WORD *)(a4 + 16) = v10;
  *(_WORD *)(a4 + 18) = v11;
  return result;
}

uint64_t protocol witness for static AdditiveArithmetic.-= infix(_:_:) in conformance NSDecimal( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return protocol witness for static Numeric.*= infix(_:_:) in conformance NSDecimal( a1,  a2,  a3,  a4,  (uint64_t (*)(uint64_t, void, void, void))specialized static NSDecimal.-= infix(_:_:));
}

uint64_t protocol witness for static Numeric.*= infix(_:_:) in conformance NSDecimal( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(uint64_t, void, void, void))
{
  return a5(a1, *(void *)a2, *(void *)(a2 + 8), *(unsigned int *)(a2 + 16));
}

void __swiftcall NSDecimal.distance(to:)(NSDecimal *__return_ptr retstr, NSDecimal *to)
{
  __int16 v7 = v6;
  __int16 v8 = v5;
  int v9 = v4;
  unsigned int v105 = v3;
  uint64_t v139 = *MEMORY[0x1895F89C0];
  int v136 = v4;
  unint64_t v10 = HIDWORD(v4);
  LOWORD(v137) = WORD2(v4);
  unint64_t v11 = HIWORD(v4);
  WORD1(v137) = HIWORD(v4);
  HIDWORD(v137) = v5;
  unint64_t v12 = v5 >> 16;
  unint64_t v109 = (unint64_t)to >> 32;
  unint64_t v111 = (unint64_t)to >> 48;
  unint64_t v13 = HIDWORD(v5);
  LOWORD(v138) = WORD2(v5);
  int v121 = (int)to;
  unint64_t v14 = HIWORD(v5);
  WORD1(v138) = HIWORD(v5);
  HIDWORD(v138) = v6;
  unsigned int v15 = HIWORD(v6);
  unint64_t v113 = v2 >> 16;
  unint64_t v115 = HIDWORD(v2);
  uint64_t v133 = v4;
  unint64_t v117 = HIWORD(v2);
  unint64_t v134 = v5;
  unsigned int v135 = v6;
  __int16 v119 = v2;
  if (_So9NSDecimala__length_getter(&v133))
  {
    LODWORD(v133) = v9;
    WORD2(v133) = v10;
    HIWORD(v133) = v11;
    LOWORD(v134) = v8;
    WORD1(v134) = v12;
    WORD2(v134) = v13;
    HIWORD(v134) = v14;
    LOWORD(v135) = v7;
    HIWORD(v135) = v15;
    int isNegative_getter = _So9NSDecimala__isNegative_getter(&v133);
    _So9NSDecimala__isNegative_setter(isNegative_getter ^ 1u, &v136);
    int v9 = v136;
    LOWORD(v10) = v137;
    LOWORD(v11) = WORD1(v137);
    __int16 v8 = WORD2(v137);
    LOWORD(v12) = HIWORD(v137);
    LOWORD(v13) = v138;
    LOWORD(v14) = WORD1(v138);
    __int16 v7 = WORD2(v138);
    __int16 v107 = HIWORD(v138);
  }

  else
  {
    __int16 v107 = v15;
  }

  LODWORD(v133) = v121;
  WORD2(v133) = v109;
  HIWORD(v133) = v111;
  LOWORD(v134) = v119;
  WORD1(v134) = v113;
  WORD2(v134) = v115;
  HIWORD(v134) = v117;
  unsigned int v135 = v105;
  if (!_So9NSDecimala__length_getter(&v133))
  {
    LODWORD(v133) = v121;
    WORD2(v133) = v109;
    HIWORD(v133) = v111;
    LOWORD(v134) = v119;
    WORD1(v134) = v113;
    WORD2(v134) = v115;
    HIWORD(v134) = v117;
    unsigned int v135 = v105;
  }

  LODWORD(v133) = v9;
  WORD2(v133) = v10;
  HIWORD(v133) = v11;
  LOWORD(v134) = v8;
  WORD1(v134) = v12;
  WORD2(v134) = v13;
  HIWORD(v134) = v14;
  LOWORD(v135) = v7;
  HIWORD(v135) = v107;
  if (!_So9NSDecimala__length_getter(&v133))
  {
    LODWORD(v133) = v9;
    WORD2(v133) = v10;
    HIWORD(v133) = v11;
    LOWORD(v134) = v8;
    WORD1(v134) = v12;
    WORD2(v134) = v13;
    HIWORD(v134) = v14;
    LOWORD(v135) = v7;
    HIWORD(v135) = v107;
  }

  LODWORD(v133) = v121;
  WORD2(v133) = v109;
  HIWORD(v133) = v111;
  LOWORD(v134) = v119;
  WORD1(v134) = v113;
  WORD2(v134) = v115;
  HIWORD(v134) = v117;
  unsigned int v135 = v105;
  LODWORD(v133) = v9;
  WORD2(v133) = v10;
  HIWORD(v133) = v11;
  LOWORD(v134) = v8;
  WORD1(v134) = v12;
  WORD2(v134) = v13;
  HIWORD(v134) = v14;
  LOWORD(v135) = v7;
  HIWORD(v135) = v107;
  LODWORD(v133) = v121;
  WORD2(v133) = v109;
  HIWORD(v133) = v111;
  LOWORD(v134) = v119;
  WORD1(v134) = v113;
  WORD2(v134) = v115;
  HIWORD(v134) = v117;
  unsigned int v135 = v105;
  LODWORD(v130) = v9;
  WORD2(v130) = v10;
  HIWORD(v130) = v11;
  LOWORD(v131) = v8;
  WORD1(v131) = v12;
  WORD2(v131) = v13;
  HIWORD(v131) = v14;
  LOWORD(v132) = v7;
  HIWORD(v132) = v107;
  specialized static NSDecimal._normalize(a:b:roundingMode:)((int *)&v133, (uint64_t)&v130);
  uint64_t v17 = WORD2(v133);
  uint64_t v18 = HIWORD(v133);
  uint64_t v108 = v133;
  uint64_t v127 = v133;
  uint64_t v118 = WORD1(v134);
  uint64_t v120 = (unsigned __int16)v134;
  unint64_t v128 = v134;
  uint64_t v114 = HIWORD(v134);
  uint64_t v116 = WORD2(v134);
  int v112 = (unsigned __int16)v135;
  unsigned int v129 = v135;
  int v110 = HIWORD(v135);
  int v19 = _So9NSDecimala__length_getter(&v127);
  uint64_t v20 = HIWORD(v130);
  uint64_t v21 = (unsigned __int16)v131;
  uint64_t v22 = WORD1(v131);
  uint64_t v23 = WORD2(v131);
  uint64_t v24 = HIWORD(v131);
  int v25 = (unsigned __int16)v132;
  int v26 = HIWORD(v132);
  if (!v19) {
    return;
  }
  uint64_t v122 = v130;
  uint64_t v127 = v130;
  unint64_t v128 = v131;
  unsigned int v129 = v132;
  uint64_t v106 = WORD2(v130);
  LODWORD(v127) = v108;
  WORD2(v127) = v17;
  HIWORD(v127) = v18;
  LOWORD(v128) = v120;
  WORD1(v128) = v118;
  WORD2(v128) = v116;
  HIWORD(v128) = v114;
  LOWORD(v129) = v112;
  HIWORD(v129) = v110;
  LODWORD(v124) = v108;
  WORD2(v124) = v17;
  HIWORD(v124) = v18;
  unint64_t v125 = __PAIR64__(__PAIR32__(v114, v116), __PAIR32__(v118, v120));
  LOWORD(v126) = v112;
  HIWORD(v126) = v110;
  uint64_t v104 = v18;
  uint64_t v27 = v17;
  int v28 = _So9NSDecimala__isNegative_getter(&v124);
  LODWORD(v124) = v122;
  WORD2(v124) = v106;
  HIWORD(v124) = v20;
  LOWORD(v125) = v21;
  WORD1(v125) = v22;
  WORD2(v125) = v23;
  HIWORD(v125) = v24;
  LOWORD(v126) = v25;
  HIWORD(v126) = v26;
  if (v28 == _So9NSDecimala__isNegative_getter(&v124))
  {
    LODWORD(v124) = v108;
    WORD2(v124) = v27;
    HIWORD(v124) = v104;
    LOWORD(v125) = v120;
    WORD1(v125) = v118;
    WORD2(v125) = v116;
    HIWORD(v125) = v114;
    LOWORD(v126) = v112;
    HIWORD(v126) = v110;
    uint64_t v29 = _So9NSDecimala__isNegative_getter(&v124);
    _So9NSDecimala__isNegative_setter(v29, &v127);
    NSDecimal.asVariableLengthInteger()( v108 | (v27 << 32) | (v104 << 48),  v120 | (v118 << 16) | (v116 << 32) | (v114 << 48),  v112 | (v110 << 16));
    uint64_t v31 = v30;
    NSDecimal.asVariableLengthInteger()( v122 | (v106 << 32) | (v20 << 48),  v21 | (v22 << 16) | (v23 << 32) | (v24 << 48),  v25 | (v26 << 16));
    uint64_t v34 = specialized static NSDecimal._integerAdd(lhs:rhs:maxResultLength:)(v31, v32, 9LL, v33);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    unint64_t v35 = *(void *)(v34 + 16);
    if (v35 <= 8)
    {
      v37._rawValue = (void *)v34;
LABEL_29:
      _So9NSDecimala__length_setter(v35, &v127);
      NSDecimal.copyVariableLengthInteger(_:)(v37);
      __int16 v49 = v54;
      swift_bridgeObjectRelease();
      if (v54) {
        goto LABEL_21;
      }
      goto LABEL_146;
    }

    specialized static NSDecimal._fitMantissa(_:roundingMode:)(v34, 0LL);
    v37._rawValue = v36;
    uint64_t v39 = v38;
    swift_bridgeObjectRelease();
    int v40 = v127;
    __int16 v41 = WORD2(v127);
    __int16 v42 = HIWORD(v127);
    __int16 v43 = v128;
    __int16 v44 = WORD1(v128);
    __int16 v45 = WORD2(v128);
    __int16 v46 = HIWORD(v128);
    __int16 v47 = v129;
    uint64_t v124 = v127;
    unint64_t v125 = v128;
    unsigned int v126 = v129;
    __int16 v123 = HIWORD(v129);
    int v48 = _So9NSDecimala__exponent_getter((char *)&v124);
    if (v39 >= (uint64_t)0xFFFFFFFF80000000LL)
    {
      if (v39 <= 0x7FFFFFFF)
      {
        if (!__OFADD__(v48, (_DWORD)v39))
        {
          if (v48 + (int)v39 > 127)
          {
            swift_bridgeObjectRelease();
LABEL_20:
            lazy protocol witness table accessor for type NSDecimal._CalculationError and conformance NSDecimal._CalculationError();
            __int16 v49 = (void *)swift_allocError();
            *__int16 v50 = 0;
            swift_willThrow();
            goto LABEL_21;
          }

          LODWORD(v124) = v40;
          WORD2(v124) = v41;
          HIWORD(v124) = v42;
          LOWORD(v125) = v43;
          WORD1(v125) = v44;
          WORD2(v125) = v45;
          HIWORD(v125) = v46;
          LOWORD(v126) = v47;
          HIWORD(v126) = v123;
          int v77 = _So9NSDecimala__exponent_getter((char *)&v124);
          BOOL v78 = __OFADD__(v77, (_DWORD)v39);
          uint64_t v79 = (v77 + v39);
          if (!v78)
          {
            _So9NSDecimala__exponent_setter(v79, &v127);
            unint64_t v35 = *((void *)v37._rawValue + 2);
            if (HIDWORD(v35)) {
              goto LABEL_160;
            }
            goto LABEL_29;
          }

          __break(1u);
          goto LABEL_158;
        }

void __swiftcall NSDecimal.advanced(by:)(NSDecimal *__return_ptr retstr, NSDecimal *by)
{
  uint64_t v7 = v4;
  uint64_t v8 = v5;
  int v9 = v6;
  specialized static NSDecimal.+= infix(_:_:)((int *)&v7, (unint64_t)by, v2, v3);
}

void protocol witness for Strideable.distance(to:) in conformance NSDecimal( NSDecimal **a1@<X0>, NSDecimal *a2@<X8>)
{
  *(_DWORD *)a2 = v3;
  a2->_mantissa[0] = v4;
  a2->_mantissa[1] = v5;
  a2->_mantissa[2] = v6;
  a2->_mantissa[3] = v7;
  a2->_mantissa[4] = v8;
  a2->_mantissa[5] = v9;
  a2->_mantissa[6] = v10;
  a2->_mantissa[7] = v11;
}

__n128 protocol witness for Strideable.advanced(by:) in conformance NSDecimal@<Q0>( uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  unsigned int v4 = *(_DWORD *)(a1 + 16);
  unint64_t v5 = *(void *)a1;
  unint64_t v6 = *(void *)(a1 + 8);
  int v8 = *(_DWORD *)v2;
  __n128 v9 = *(__n128 *)(v2 + 4);
  specialized static NSDecimal.+= infix(_:_:)(&v8, v5, v6, v4);
  __n128 result = v9;
  *(_DWORD *)a2 = v8;
  *(__n128 *)(a2 + 4) = result;
  return result;
}

uint64_t protocol witness for static Strideable._step(after:from:by:) in conformance NSDecimal( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  unsigned int v7 = *(_DWORD *)(a6 + 16);
  unint64_t v8 = *(void *)a6;
  unint64_t v9 = *(void *)(a6 + 8);
  int v12 = *(_DWORD *)a4;
  __int128 v13 = *(_OWORD *)(a4 + 4);
  specialized static NSDecimal.+= infix(_:_:)(&v12, v8, v9, v7);
  __int128 v10 = v13;
  *(_DWORD *)a1 = v12;
  *(_OWORD *)(a1 + 4) = v10;
  return 0LL;
}

__n128 one-time initialization function for _powersOfTenDividingUInt128Max()
{
  uint64_t v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_183731690;
  *(void *)((char *)&v40 + 6) = 0x9999999999999999LL;
  *(void *)&__int128 v40 = 0x9999999999999999LL;
  HIWORD(v40) = 6553;
  _So9NSDecimala__exponent_setter(0LL, &v39);
  _So9NSDecimala__length_setter(8LL, &v39);
  _So9NSDecimala__isNegative_setter(0LL, &v39);
  _So9NSDecimala__isCompact_setter_0(1LL, &v39);
  _So9NSDecimala__reserved_setter(&v39);
  __int128 v1 = v40;
  *(_DWORD *)(v0 + 32) = v39;
  *(_OWORD *)(v0 + 36) = v1;
  __int128 v40 = xmmword_1837316A0;
  _So9NSDecimala__exponent_setter(0LL, &v39);
  _So9NSDecimala__length_setter(8LL, &v39);
  _So9NSDecimala__isNegative_setter(0LL, &v39);
  _So9NSDecimala__isCompact_setter_0(1LL, &v39);
  _So9NSDecimala__reserved_setter(&v39);
  __int128 v2 = v40;
  *(_DWORD *)(v0 + 52) = v39;
  *(_OWORD *)(v0 + 56) = v2;
  __int128 v40 = xmmword_1837316B0;
  _So9NSDecimala__exponent_setter(0LL, &v39);
  _So9NSDecimala__length_setter(8LL, &v39);
  _So9NSDecimala__isNegative_setter(0LL, &v39);
  _So9NSDecimala__isCompact_setter_0(1LL, &v39);
  _So9NSDecimala__reserved_setter(&v39);
  __int128 v3 = v40;
  *(_DWORD *)(v0 + 72) = v39;
  *(_OWORD *)(v0 + 76) = v3;
  __int128 v40 = xmmword_1837316C0;
  _So9NSDecimala__exponent_setter(0LL, &v39);
  _So9NSDecimala__length_setter(8LL, &v39);
  _So9NSDecimala__isNegative_setter(0LL, &v39);
  _So9NSDecimala__isCompact_setter_0(1LL, &v39);
  _So9NSDecimala__reserved_setter(&v39);
  __int128 v4 = v40;
  *(_DWORD *)(v0 + 92) = v39;
  *(_OWORD *)(v0 + 96) = v4;
  __int128 v40 = xmmword_1837316D0;
  _So9NSDecimala__exponent_setter(0LL, &v39);
  _So9NSDecimala__length_setter(7LL, &v39);
  _So9NSDecimala__isNegative_setter(0LL, &v39);
  _So9NSDecimala__isCompact_setter_0(1LL, &v39);
  _So9NSDecimala__reserved_setter(&v39);
  __int128 v5 = v40;
  *(_DWORD *)(v0 + 112) = v39;
  *(_OWORD *)(v0 + 116) = v5;
  __int128 v40 = xmmword_1837316E0;
  _So9NSDecimala__exponent_setter(0LL, &v39);
  _So9NSDecimala__length_setter(7LL, &v39);
  _So9NSDecimala__isNegative_setter(0LL, &v39);
  _So9NSDecimala__isCompact_setter_0(1LL, &v39);
  _So9NSDecimala__reserved_setter(&v39);
  __int128 v6 = v40;
  *(_DWORD *)(v0 + 132) = v39;
  *(_OWORD *)(v0 + 136) = v6;
  __int128 v40 = xmmword_1837316F0;
  _So9NSDecimala__exponent_setter(0LL, &v39);
  _So9NSDecimala__length_setter(7LL, &v39);
  _So9NSDecimala__isNegative_setter(0LL, &v39);
  _So9NSDecimala__isCompact_setter_0(1LL, &v39);
  _So9NSDecimala__reserved_setter(&v39);
  __int128 v7 = v40;
  *(_DWORD *)(v0 + 152) = v39;
  *(_OWORD *)(v0 + 156) = v7;
  __int128 v40 = xmmword_183731700;
  _So9NSDecimala__exponent_setter(0LL, &v39);
  _So9NSDecimala__length_setter(7LL, &v39);
  _So9NSDecimala__isNegative_setter(0LL, &v39);
  _So9NSDecimala__isCompact_setter_0(1LL, &v39);
  _So9NSDecimala__reserved_setter(&v39);
  __int128 v8 = v40;
  *(_DWORD *)(v0 + 172) = v39;
  *(_OWORD *)(v0 + 176) = v8;
  __int128 v40 = xmmword_183731710;
  _So9NSDecimala__exponent_setter(0LL, &v39);
  _So9NSDecimala__length_setter(7LL, &v39);
  _So9NSDecimala__isNegative_setter(0LL, &v39);
  _So9NSDecimala__isCompact_setter_0(1LL, &v39);
  _So9NSDecimala__reserved_setter(&v39);
  __int128 v9 = v40;
  *(_DWORD *)(v0 + 192) = v39;
  *(_OWORD *)(v0 + 196) = v9;
  __int128 v40 = xmmword_183731720;
  _So9NSDecimala__exponent_setter(0LL, &v39);
  _So9NSDecimala__length_setter(6LL, &v39);
  _So9NSDecimala__isNegative_setter(0LL, &v39);
  _So9NSDecimala__isCompact_setter_0(1LL, &v39);
  _So9NSDecimala__reserved_setter(&v39);
  __int128 v10 = v40;
  *(_DWORD *)(v0 + 212) = v39;
  *(_OWORD *)(v0 + 216) = v10;
  __int128 v40 = xmmword_183731730;
  _So9NSDecimala__exponent_setter(0LL, &v39);
  _So9NSDecimala__length_setter(6LL, &v39);
  _So9NSDecimala__isNegative_setter(0LL, &v39);
  _So9NSDecimala__isCompact_setter_0(1LL, &v39);
  _So9NSDecimala__reserved_setter(&v39);
  __int128 v11 = v40;
  *(_DWORD *)(v0 + 232) = v39;
  *(_OWORD *)(v0 + 236) = v11;
  __int128 v40 = xmmword_183731740;
  _So9NSDecimala__exponent_setter(0LL, &v39);
  _So9NSDecimala__length_setter(6LL, &v39);
  _So9NSDecimala__isNegative_setter(0LL, &v39);
  _So9NSDecimala__isCompact_setter_0(1LL, &v39);
  _So9NSDecimala__reserved_setter(&v39);
  __int128 v12 = v40;
  *(_DWORD *)(v0 + 252) = v39;
  *(_OWORD *)(v0 + 256) = v12;
  __int128 v40 = xmmword_183731750;
  _So9NSDecimala__exponent_setter(0LL, &v39);
  _So9NSDecimala__length_setter(6LL, &v39);
  _So9NSDecimala__isNegative_setter(0LL, &v39);
  _So9NSDecimala__isCompact_setter_0(0LL, &v39);
  _So9NSDecimala__reserved_setter(&v39);
  __int128 v13 = v40;
  *(_DWORD *)(v0 + 272) = v39;
  *(_OWORD *)(v0 + 276) = v13;
  __int128 v40 = xmmword_183731760;
  _So9NSDecimala__exponent_setter(0LL, &v39);
  _So9NSDecimala__length_setter(6LL, &v39);
  _So9NSDecimala__isNegative_setter(0LL, &v39);
  _So9NSDecimala__isCompact_setter_0(1LL, &v39);
  _So9NSDecimala__reserved_setter(&v39);
  __int128 v14 = v40;
  *(_DWORD *)(v0 + 292) = v39;
  *(_OWORD *)(v0 + 296) = v14;
  __int128 v40 = xmmword_183731770;
  _So9NSDecimala__exponent_setter(0LL, &v39);
  _So9NSDecimala__length_setter(5LL, &v39);
  _So9NSDecimala__isNegative_setter(0LL, &v39);
  _So9NSDecimala__isCompact_setter_0(1LL, &v39);
  _So9NSDecimala__reserved_setter(&v39);
  __int128 v15 = v40;
  *(_DWORD *)(v0 + 312) = v39;
  *(_OWORD *)(v0 + 316) = v15;
  __int128 v40 = xmmword_183731780;
  _So9NSDecimala__exponent_setter(0LL, &v39);
  _So9NSDecimala__length_setter(5LL, &v39);
  _So9NSDecimala__isNegative_setter(0LL, &v39);
  _So9NSDecimala__isCompact_setter_0(1LL, &v39);
  _So9NSDecimala__reserved_setter(&v39);
  __int128 v16 = v40;
  *(_DWORD *)(v0 + 332) = v39;
  *(_OWORD *)(v0 + 336) = v16;
  __int128 v40 = xmmword_183731790;
  _So9NSDecimala__exponent_setter(0LL, &v39);
  _So9NSDecimala__length_setter(5LL, &v39);
  _So9NSDecimala__isNegative_setter(0LL, &v39);
  _So9NSDecimala__isCompact_setter_0(1LL, &v39);
  _So9NSDecimala__reserved_setter(&v39);
  __int128 v17 = v40;
  *(_DWORD *)(v0 + 352) = v39;
  *(_OWORD *)(v0 + 356) = v17;
  __int128 v40 = xmmword_1837317A0;
  _So9NSDecimala__exponent_setter(0LL, &v39);
  _So9NSDecimala__length_setter(5LL, &v39);
  _So9NSDecimala__isNegative_setter(0LL, &v39);
  _So9NSDecimala__isCompact_setter_0(1LL, &v39);
  _So9NSDecimala__reserved_setter(&v39);
  __int128 v18 = v40;
  *(_DWORD *)(v0 + 372) = v39;
  *(_OWORD *)(v0 + 376) = v18;
  __int128 v40 = xmmword_1837317B0;
  _So9NSDecimala__exponent_setter(0LL, &v39);
  _So9NSDecimala__length_setter(5LL, &v39);
  _So9NSDecimala__isNegative_setter(0LL, &v39);
  _So9NSDecimala__isCompact_setter_0(1LL, &v39);
  _So9NSDecimala__reserved_setter(&v39);
  __int128 v19 = v40;
  *(_DWORD *)(v0 + 392) = v39;
  *(_OWORD *)(v0 + 396) = v19;
  __int128 v40 = 0x2F394219248446BAuLL;
  _So9NSDecimala__exponent_setter(0LL, &v39);
  _So9NSDecimala__length_setter(4LL, &v39);
  _So9NSDecimala__isNegative_setter(0LL, &v39);
  _So9NSDecimala__isCompact_setter_0(1LL, &v39);
  _So9NSDecimala__reserved_setter(&v39);
  __int128 v20 = v40;
  *(_DWORD *)(v0 + 412) = v39;
  *(_OWORD *)(v0 + 416) = v20;
  __int128 v40 = 0x4B8ED0283A6D3DFuLL;
  _So9NSDecimala__exponent_setter(0LL, &v39);
  _So9NSDecimala__length_setter(4LL, &v39);
  _So9NSDecimala__isNegative_setter(0LL, &v39);
  _So9NSDecimala__isCompact_setter_0(1LL, &v39);
  _So9NSDecimala__reserved_setter(&v39);
  __int128 v21 = v40;
  *(_DWORD *)(v0 + 432) = v39;
  *(_OWORD *)(v0 + 436) = v21;
  __int128 v40 = 0x78E480405D7B96uLL;
  _So9NSDecimala__exponent_setter(0LL, &v39);
  _So9NSDecimala__length_setter(4LL, &v39);
  _So9NSDecimala__isNegative_setter(0LL, &v39);
  _So9NSDecimala__isCompact_setter_0(1LL, &v39);
  _So9NSDecimala__reserved_setter(&v39);
  __int128 v22 = v40;
  *(_DWORD *)(v0 + 452) = v39;
  *(_OWORD *)(v0 + 456) = v22;
  __int128 v40 = 0xC16D9A0095928uLL;
  _So9NSDecimala__exponent_setter(0LL, &v39);
  _So9NSDecimala__length_setter(4LL, &v39);
  _So9NSDecimala__isNegative_setter(0LL, &v39);
  _So9NSDecimala__isCompact_setter_0(1LL, &v39);
  _So9NSDecimala__reserved_setter(&v39);
  __int128 v23 = v40;
  *(_DWORD *)(v0 + 472) = v39;
  *(_OWORD *)(v0 + 476) = v23;
  __int128 v40 = 0x1357C299A88EAuLL;
  _So9NSDecimala__exponent_setter(0LL, &v39);
  _So9NSDecimala__length_setter(4LL, &v39);
  _So9NSDecimala__isNegative_setter(0LL, &v39);
  _So9NSDecimala__isCompact_setter_0(1LL, &v39);
  _So9NSDecimala__reserved_setter(&v39);
  __int128 v24 = v40;
  *(_DWORD *)(v0 + 492) = v39;
  *(_OWORD *)(v0 + 496) = v24;
  __int128 v40 = 0x1EF2D0F5DA7DuLL;
  _So9NSDecimala__exponent_setter(0LL, &v39);
  _So9NSDecimala__length_setter(3LL, &v39);
  _So9NSDecimala__isNegative_setter(0LL, &v39);
  _So9NSDecimala__isCompact_setter_0(1LL, &v39);
  _So9NSDecimala__reserved_setter(&v39);
  __int128 v25 = v40;
  *(_DWORD *)(v0 + 512) = v39;
  *(_OWORD *)(v0 + 516) = v25;
  __int128 v40 = 0x318481895D9uLL;
  _So9NSDecimala__exponent_setter(0LL, &v39);
  _So9NSDecimala__length_setter(3LL, &v39);
  _So9NSDecimala__isNegative_setter(0LL, &v39);
  _So9NSDecimala__isCompact_setter_0(1LL, &v39);
  _So9NSDecimala__reserved_setter(&v39);
  __int128 v26 = v40;
  *(_DWORD *)(v0 + 532) = v39;
  *(_OWORD *)(v0 + 536) = v26;
  __int128 v40 = 0x4F3A68DBC8uLL;
  _So9NSDecimala__exponent_setter(0LL, &v39);
  _So9NSDecimala__length_setter(3LL, &v39);
  _So9NSDecimala__isNegative_setter(0LL, &v39);
  _So9NSDecimala__isCompact_setter_0(0LL, &v39);
  _So9NSDecimala__reserved_setter(&v39);
  __int128 v27 = v40;
  *(_DWORD *)(v0 + 552) = v39;
  *(_OWORD *)(v0 + 556) = v27;
  __int128 v40 = 0x7EC3DAF94uLL;
  _So9NSDecimala__exponent_setter(0LL, &v39);
  _So9NSDecimala__length_setter(3LL, &v39);
  _So9NSDecimala__isNegative_setter(0LL, &v39);
  _So9NSDecimala__isCompact_setter_0(1LL, &v39);
  _So9NSDecimala__reserved_setter(&v39);
  __int128 v28 = v40;
  *(_DWORD *)(v0 + 572) = v39;
  *(_OWORD *)(v0 + 576) = v28;
  __int128 v40 = 0xCAD2F7F5uLL;
  _So9NSDecimala__exponent_setter(0LL, &v39);
  _So9NSDecimala__length_setter(2LL, &v39);
  _So9NSDecimala__isNegative_setter(0LL, &v39);
  _So9NSDecimala__isCompact_setter_0(1LL, &v39);
  _So9NSDecimala__reserved_setter(&v39);
  __int128 v29 = v40;
  *(_DWORD *)(v0 + 592) = v39;
  *(_OWORD *)(v0 + 596) = v29;
  __int128 v40 = 0x14484BFEuLL;
  _So9NSDecimala__exponent_setter(0LL, &v39);
  _So9NSDecimala__length_setter(2LL, &v39);
  _So9NSDecimala__isNegative_setter(0LL, &v39);
  _So9NSDecimala__isCompact_setter_0(1LL, &v39);
  _So9NSDecimala__reserved_setter(&v39);
  __int128 v30 = v40;
  *(_DWORD *)(v0 + 612) = v39;
  *(_OWORD *)(v0 + 616) = v30;
  __int128 v40 = 0x2073ACCuLL;
  _So9NSDecimala__exponent_setter(0LL, &v39);
  _So9NSDecimala__length_setter(2LL, &v39);
  _So9NSDecimala__isNegative_setter(0LL, &v39);
  _So9NSDecimala__isCompact_setter_0(1LL, &v39);
  _So9NSDecimala__reserved_setter(&v39);
  __int128 v31 = v40;
  *(_DWORD *)(v0 + 632) = v39;
  *(_OWORD *)(v0 + 636) = v31;
  __int128 v40 = 0x33EC47uLL;
  _So9NSDecimala__exponent_setter(0LL, &v39);
  _So9NSDecimala__length_setter(2LL, &v39);
  _So9NSDecimala__isNegative_setter(0LL, &v39);
  _So9NSDecimala__isCompact_setter_0(1LL, &v39);
  _So9NSDecimala__reserved_setter(&v39);
  __int128 v32 = v40;
  *(_DWORD *)(v0 + 652) = v39;
  *(_OWORD *)(v0 + 656) = v32;
  __int128 v40 = 0x5313AuLL;
  _So9NSDecimala__exponent_setter(0LL, &v39);
  _So9NSDecimala__length_setter(2LL, &v39);
  _So9NSDecimala__isNegative_setter(0LL, &v39);
  _So9NSDecimala__isCompact_setter_0(1LL, &v39);
  _So9NSDecimala__reserved_setter(&v39);
  __int128 v33 = v40;
  *(_DWORD *)(v0 + 672) = v39;
  *(_OWORD *)(v0 + 676) = v33;
  LOWORD(v40) = -31508;
  *(void *)((char *)&v40 + 2) = 0LL;
  *((void *)&v40 + 1) = 0LL;
  _So9NSDecimala__exponent_setter(0LL, &v39);
  _So9NSDecimala__length_setter(1LL, &v39);
  _So9NSDecimala__isNegative_setter(0LL, &v39);
  _So9NSDecimala__isCompact_setter_0(1LL, &v39);
  _So9NSDecimala__reserved_setter(&v39);
  __int128 v34 = v40;
  *(_DWORD *)(v0 + 692) = v39;
  *(_OWORD *)(v0 + 696) = v34;
  LOWORD(v40) = 3402;
  *(void *)((char *)&v40 + 2) = 0LL;
  *((void *)&v40 + 1) = 0LL;
  _So9NSDecimala__exponent_setter(0LL, &v39);
  _So9NSDecimala__length_setter(1LL, &v39);
  _So9NSDecimala__isNegative_setter(0LL, &v39);
  _So9NSDecimala__isCompact_setter_0(1LL, &v39);
  _So9NSDecimala__reserved_setter(&v39);
  __int128 v35 = v40;
  *(_DWORD *)(v0 + 712) = v39;
  *(_OWORD *)(v0 + 716) = v35;
  LOWORD(v40) = 340;
  *(void *)((char *)&v40 + 2) = 0LL;
  *((void *)&v40 + 1) = 0LL;
  _So9NSDecimala__exponent_setter(0LL, &v39);
  _So9NSDecimala__length_setter(1LL, &v39);
  _So9NSDecimala__isNegative_setter(0LL, &v39);
  _So9NSDecimala__isCompact_setter_0(0LL, &v39);
  _So9NSDecimala__reserved_setter(&v39);
  __int128 v36 = v40;
  *(_DWORD *)(v0 + 732) = v39;
  *(_OWORD *)(v0 + 736) = v36;
  LOWORD(v40) = 34;
  *(void *)((char *)&v40 + 2) = 0LL;
  *((void *)&v40 + 1) = 0LL;
  _So9NSDecimala__exponent_setter(0LL, &v39);
  _So9NSDecimala__length_setter(1LL, &v39);
  _So9NSDecimala__isNegative_setter(0LL, &v39);
  _So9NSDecimala__isCompact_setter_0(1LL, &v39);
  _So9NSDecimala__reserved_setter(&v39);
  __int128 v37 = v40;
  *(_DWORD *)(v0 + 752) = v39;
  *(_OWORD *)(v0 + 756) = v37;
  LOWORD(v40) = 3;
  *(void *)((char *)&v40 + 2) = 0LL;
  *((void *)&v40 + 1) = 0LL;
  _So9NSDecimala__exponent_setter(0LL, &v39);
  _So9NSDecimala__length_setter(1LL, &v39);
  _So9NSDecimala__isNegative_setter(0LL, &v39);
  _So9NSDecimala__isCompact_setter_0(1LL, &v39);
  _So9NSDecimala__reserved_setter(&v39);
  __n128 result = (__n128)v40;
  *(_DWORD *)(v0 + 772) = v39;
  *(__n128 *)(v0 + 776) = result;
  _powersOfTenDividingUInt128Max._rawValue = (void *)v0;
  return result;
}

uint64_t specialized skipWhiteSpaces #1 <A>(from:) in static NSDecimal._decimal<A>(from:decimalSeparator:matchEntireString:)( uint64_t result, uint64_t a2, uint64_t a3)
{
  __int128 v3 = (char *)result;
  __int128 v4 = (unsigned __int8 *)(a2 + a3);
  if (a2 + a3 == result) {
    return (uint64_t)v3;
  }
  uint64_t v5 = result - a2;
  uint64_t v6 = a3 + a2 - result;
  while ((v5 & 0x8000000000000000LL) == 0)
  {
    if (v6-- < 1) {
      break;
    }
    unsigned int v8 = *v3;
    if (*v3 >= 0) {
      unsigned int v9 = v8 + 1;
    }
    else {
      unsigned int v9 = ((v8 >> 6) & 0xFFFFC0FF | ((v8 & 0x3F) << 8)) + 33217;
    }
    uint64_t v11 = (v9 + 0xFEFEFEFEFEFEFFLL) & ~(-1LL << (8 * ((4 - (__clz(v9) >> 3)) & 7)));
    MEMORY[0x186E1B6AC](&v11);
    char v10 = Character.isWhitespace.getter();
    __n128 result = swift_bridgeObjectRelease();
    if ((v10 & 1) == 0) {
      return (uint64_t)v3;
    }
    ++v3;
    ++v5;
  }

  __break(1u);
  return result;
}

unint64_t specialized skipWhiteSpaces #1 <A>(from:) in static NSDecimal._decimal<A>(from:decimalSeparator:matchEntireString:)( unint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3 = a1;
  if ((a3 & 0x2000000000000000LL) != 0) {
    unint64_t v4 = HIBYTE(a3) & 0xF;
  }
  else {
    unint64_t v4 = a2 & 0xFFFFFFFFFFFFLL;
  }
  uint64_t v5 = 4 * v4;
  if (4 * v4 == a1 >> 14) {
    return v3;
  }
  uint64_t v9 = (a2 >> 59) & 1;
  if ((a3 & 0x1000000000000000LL) == 0) {
    LOBYTE(v9) = 1;
  }
  uint64_t v10 = 4LL << v9;
  uint64_t v19 = a3 & 0xFFFFFFFFFFFFFFLL;
  uint64_t v11 = (a3 & 0xFFFFFFFFFFFFFFFLL) + 32;
  while (1)
  {
    unint64_t result = v3;
    if ((v3 & 0xC) == v10) {
      unint64_t result = _StringGuts._slowEnsureMatchingEncoding(_:)(v3, a2, a3);
    }
    unint64_t v12 = result >> 16;
    if (result >> 16 >= v4) {
      break;
    }
    if ((a3 & 0x1000000000000000LL) != 0)
    {
      unsigned __int8 v14 = String.UTF8View._foreignSubscript(position:)();
    }

    else if ((a3 & 0x2000000000000000LL) != 0)
    {
      v20[0] = a2;
      v20[1] = v19;
      unsigned __int8 v14 = *((_BYTE *)v20 + v12);
    }

    else
    {
      uint64_t v13 = v11;
      if ((a2 & 0x1000000000000000LL) == 0) {
        uint64_t v13 = _StringObject.sharedUTF8.getter();
      }
      unsigned __int8 v14 = *(_BYTE *)(v13 + v12);
    }

    unsigned int v15 = (((v14 & 0x3F) << 8) | (v14 >> 6)) + 33217;
    if ((v14 & 0x80) == 0) {
      unsigned int v15 = (v14 + 1);
    }
    unsigned int v16 = __clz(v15);
    uint64_t v17 = 4LL - (v16 >> 3);
    v20[0] = (v15 + 0xFEFEFEFEFEFEFFLL) & ~(-1LL << (8 * ((4 - (v16 >> 3)) & 7)));
    swift_bridgeObjectRetain();
    MEMORY[0x186E1B6AC](v20, v17);
    char v18 = Character.isWhitespace.getter();
    swift_bridgeObjectRelease();
    unint64_t result = swift_bridgeObjectRelease();
    if ((v18 & 1) == 0) {
      return v3;
    }
    if ((v3 & 0xC) == v10)
    {
      unint64_t result = _StringGuts._slowEnsureMatchingEncoding(_:)(v3, a2, a3);
      unint64_t v3 = result;
      if ((a3 & 0x1000000000000000LL) == 0) {
        goto LABEL_9;
      }
LABEL_24:
      if (v4 <= v3 >> 16) {
        goto LABEL_31;
      }
      unint64_t v3 = String.UTF8View._foreignIndex(after:)();
      if (v5 == v3 >> 14) {
        return v3;
      }
    }

    else
    {
      if ((a3 & 0x1000000000000000LL) != 0) {
        goto LABEL_24;
      }
LABEL_9:
      unint64_t v3 = (v3 & 0xFFFFFFFFFFFF0000LL) + 65540;
      if (v5 == v3 >> 14) {
        return v3;
      }
    }
  }

  __break(1u);
LABEL_31:
  __break(1u);
  return result;
}

uint64_t specialized stringViewContainsDecimalSeparator #1 <A>(at:) in static NSDecimal._decimal<A>(from:decimalSeparator:matchEntireString:)( uint64_t a1, unint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9 = HIBYTE(a3) & 0xF;
  if ((a3 & 0x1000000000000000LL) != 0) {
    goto LABEL_38;
  }
  if ((a3 & 0x2000000000000000LL) != 0) {
    uint64_t v10 = HIBYTE(a3) & 0xF;
  }
  else {
    uint64_t v10 = a2 & 0xFFFFFFFFFFFFLL;
  }
  if (v10)
  {
    do
    {
      unint64_t v11 = 0LL;
      uint64_t v12 = (a2 >> 59) & 1;
      if ((a3 & 0x1000000000000000LL) == 0) {
        LOBYTE(v12) = 1;
      }
      uint64_t v13 = 4LL;
      if ((a3 & 0x2000000000000000LL) != 0) {
        unint64_t v14 = v9;
      }
      else {
        unint64_t v14 = a2 & 0xFFFFFFFFFFFFLL;
      }
      uint64_t v24 = v10 - 1;
      uint64_t v25 = 4LL << v12;
      a5 = a5 + a4 - a1;
      uint64_t v9 = a1 - a4;
      while (v10 != v11)
      {
        if ((a3 & 0x1000000000000000LL) != 0)
        {
          unint64_t v15 = MEMORY[0x186E1B838](15LL, v11, a2, a3);
        }

        else
        {
          unint64_t v15 = v13;
          if (v14 < v11) {
            goto LABEL_37;
          }
        }

        if (a5-- < 1) {
          goto LABEL_35;
        }
        a4 = v10;
        int v17 = *(unsigned __int8 *)(a1 + v11);
        if ((v15 & 0xC) == v25) {
          unint64_t v15 = _StringGuts._slowEnsureMatchingEncoding(_:)(v15, a2, a3);
        }
        unint64_t v18 = v15 >> 16;
        if (v15 >> 16 >= v14) {
          goto LABEL_36;
        }
        if ((a3 & 0x1000000000000000LL) != 0)
        {
          unsigned __int8 v20 = String.UTF8View._foreignSubscript(position:)();
        }

        else if ((a3 & 0x2000000000000000LL) != 0)
        {
          v27[0] = a2;
          v27[1] = a3 & 0xFFFFFFFFFFFFFFLL;
          unsigned __int8 v20 = *((_BYTE *)v27 + v18);
        }

        else
        {
          uint64_t v19 = (a3 & 0xFFFFFFFFFFFFFFFLL) + 32;
          if ((a2 & 0x1000000000000000LL) == 0) {
            uint64_t v19 = _StringObject.sharedUTF8.getter();
          }
          unsigned __int8 v20 = *(_BYTE *)(v19 + v18);
        }

        BOOL v21 = v17 == v20;
        uint64_t result = v21;
        if (v21)
        {
          v13 += 0x10000LL;
          BOOL v21 = v24 == v11++;
          uint64_t v10 = a4;
          if (!v21) {
            continue;
          }
        }

        return result;
      }

      __break(1u);
LABEL_35:
      __break(1u);
LABEL_36:
      __break(1u);
LABEL_37:
      __break(1u);
LABEL_38:
      Swift::Int v23 = String.UTF8View._foreignCount()();
      if (v23 < 0) {
        __break(1u);
      }
      uint64_t v10 = v23;
    }

    while (v23);
  }

  return 1LL;
}

uint64_t specialized stringViewContainsDecimalSeparator #1 <A>(at:) in static NSDecimal._decimal<A>(from:decimalSeparator:matchEntireString:)( unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4, unint64_t a5)
{
  unint64_t v7 = a2;
  uint64_t v8 = HIBYTE(a3) & 0xF;
  if ((a3 & 0x1000000000000000LL) != 0) {
    goto LABEL_60;
  }
  if ((a3 & 0x2000000000000000LL) != 0) {
    uint64_t v9 = HIBYTE(a3) & 0xF;
  }
  else {
    uint64_t v9 = a2 & 0xFFFFFFFFFFFFLL;
  }
  if (v9)
  {
    do
    {
      unint64_t v10 = 0LL;
      uint64_t v11 = (a4 >> 59) & 1;
      if ((a5 & 0x1000000000000000LL) == 0) {
        LOBYTE(v11) = 1;
      }
      if ((a5 & 0x2000000000000000LL) != 0) {
        unint64_t v12 = HIBYTE(a5) & 0xF;
      }
      else {
        unint64_t v12 = a4 & 0xFFFFFFFFFFFFLL;
      }
      uint64_t v13 = 4LL << v11;
      uint64_t v14 = (v7 >> 59) & 1;
      if ((a3 & 0x1000000000000000LL) == 0) {
        LOBYTE(v14) = 1;
      }
      uint64_t v30 = 4LL << v14;
      uint64_t v31 = v7;
      if ((a3 & 0x2000000000000000LL) != 0) {
        unint64_t v15 = v8;
      }
      else {
        unint64_t v15 = v7 & 0xFFFFFFFFFFFFLL;
      }
      uint64_t v28 = v9 - 1;
      uint64_t v29 = v9;
      uint64_t v8 = 4LL;
      while (v9 != v10)
      {
        unint64_t v16 = a1;
        if ((a1 & 0xC) == v13)
        {
          unint64_t v16 = _StringGuts._slowEnsureMatchingEncoding(_:)(a1, a4, a5);
          if ((a5 & 0x1000000000000000LL) != 0)
          {
LABEL_26:
            unint64_t v18 = MEMORY[0x186E1B838](v16, v10, a4, a5);
            if ((a3 & 0x1000000000000000LL) != 0) {
              goto LABEL_24;
            }
            goto LABEL_27;
          }
        }

        else if ((a5 & 0x1000000000000000LL) != 0)
        {
          goto LABEL_26;
        }

        unint64_t v17 = v10 + (v16 >> 16);
        if (__OFADD__(v10, v16 >> 16)) {
          goto LABEL_56;
        }
        if ((v17 & 0x8000000000000000LL) != 0) {
          goto LABEL_57;
        }
        if (v12 < v17) {
          goto LABEL_59;
        }
        unint64_t v18 = (v17 << 16) | 4;
        if ((a3 & 0x1000000000000000LL) != 0)
        {
LABEL_24:
          unint64_t v7 = MEMORY[0x186E1B838](15LL, v10, v7, a3);
          goto LABEL_28;
        }

unint64_t specialized $defer #1 <A>() in static NSDecimal._decimal<A>(from:decimalSeparator:matchEntireString:)( unint64_t a1, unint64_t a2, unint64_t *a3)
{
  unint64_t result = *a3;
  uint64_t v7 = (a1 >> 59) & 1;
  if ((a2 & 0x1000000000000000LL) == 0) {
    LOBYTE(v7) = 1;
  }
  if ((*a3 & 0xC) == 4LL << v7)
  {
    unint64_t result = _StringGuts._slowEnsureMatchingEncoding(_:)(result, a1, a2);
    if ((a2 & 0x1000000000000000LL) == 0) {
      goto LABEL_5;
    }
  }

  else if ((a2 & 0x1000000000000000LL) == 0)
  {
LABEL_5:
    unint64_t result = (result & 0xFFFFFFFFFFFF0000LL) + 65540;
LABEL_6:
    *a3 = result;
    return result;
  }

  unint64_t v8 = HIBYTE(a2) & 0xF;
  if ((a2 & 0x2000000000000000LL) == 0) {
    unint64_t v8 = a1 & 0xFFFFFFFFFFFFLL;
  }
  if (v8 > result >> 16)
  {
    unint64_t result = String.UTF8View._foreignIndex(after:)();
    goto LABEL_6;
  }

  __break(1u);
  return result;
}

uint64_t specialized static NSDecimal.== infix(_:_:)( unint64_t a1, unint64_t a2, unsigned int a3, unint64_t a4, unint64_t a5, unsigned int a6)
{
  __int16 v184 = a6;
  __int16 v6 = a5;
  __int16 v178 = a5;
  unsigned int v181 = a1;
  int v7 = a4;
  uint64_t v174 = a4;
  __int16 v8 = a2;
  unint64_t v170 = HIDWORD(a1);
  unint64_t v167 = HIWORD(a1);
  uint64_t v173 = a2 >> 16;
  uint64_t v196 = *MEMORY[0x1895F89C0];
  unint64_t v193 = a1;
  unint64_t v9 = HIDWORD(a2);
  unint64_t v10 = HIWORD(a2);
  __int16 v169 = a3;
  unsigned int v11 = HIWORD(a3);
  unint64_t v168 = HIDWORD(a4);
  unint64_t v194 = a2;
  unint64_t v12 = HIWORD(a4);
  unint64_t v186 = a5 >> 16;
  unint64_t v13 = HIDWORD(a5);
  unint64_t v175 = HIDWORD(a5);
  unint64_t v14 = HIWORD(a5);
  unsigned int v195 = a3;
  unsigned int v15 = HIWORD(a6);
  unsigned int v171 = HIWORD(a6);
  int v166 = _So9NSDecimala__exponent_getter((char *)&v193);
  LODWORD(v193) = v7;
  WORD2(v193) = v168;
  HIWORD(v193) = v12;
  LOWORD(v194) = v6;
  WORD1(v194) = v186;
  WORD2(v194) = v13;
  HIWORD(v194) = v14;
  LOWORD(v195) = v184;
  HIWORD(v195) = v15;
  int v16 = _So9NSDecimala__exponent_getter((char *)&v193);
  unsigned __int16 v17 = v170;
  if (v166 == v16)
  {
    LODWORD(v193) = v181;
    WORD2(v193) = v170;
    HIWORD(v193) = v167;
    LOWORD(v194) = v8;
    WORD1(v194) = v173;
    WORD2(v194) = v9;
    HIWORD(v194) = v10;
    LOWORD(v195) = v169;
    HIWORD(v195) = v11;
    __int16 v18 = v8;
    int v19 = _So9NSDecimala__length_getter(&v193);
    LODWORD(v193) = v174;
    WORD2(v193) = v168;
    HIWORD(v193) = v12;
    LOWORD(v194) = v178;
    WORD1(v194) = v186;
    WORD2(v194) = v175;
    HIWORD(v194) = v14;
    LOWORD(v195) = v184;
    HIWORD(v195) = v171;
    BOOL v20 = v19 == _So9NSDecimala__length_getter(&v193);
    __int16 v8 = v18;
    unsigned __int16 v17 = v170;
    if (v20)
    {
      LODWORD(v193) = v181;
      WORD2(v193) = v170;
      HIWORD(v193) = v167;
      LOWORD(v194) = v18;
      WORD1(v194) = v173;
      WORD2(v194) = v9;
      HIWORD(v194) = v10;
      LOWORD(v195) = v169;
      HIWORD(v195) = v11;
      int isNegative_getter = _So9NSDecimala__isNegative_getter(&v193);
      LODWORD(v193) = v174;
      WORD2(v193) = v168;
      HIWORD(v193) = v12;
      LOWORD(v194) = v178;
      WORD1(v194) = v186;
      WORD2(v194) = v175;
      HIWORD(v194) = v14;
      LOWORD(v195) = v184;
      HIWORD(v195) = v171;
      BOOL v20 = isNegative_getter == _So9NSDecimala__isNegative_getter(&v193);
      __int16 v8 = v18;
      unsigned __int16 v17 = v170;
      if (v20)
      {
        LODWORD(v193) = v181;
        WORD2(v193) = v170;
        HIWORD(v193) = v167;
        LOWORD(v194) = v18;
        WORD1(v194) = v173;
        WORD2(v194) = v9;
        HIWORD(v194) = v10;
        LOWORD(v195) = v169;
        HIWORD(v195) = v11;
        int isCompact_getter = _So9NSDecimala__isCompact_getter(&v193);
        LODWORD(v193) = v174;
        WORD2(v193) = v168;
        HIWORD(v193) = v12;
        LOWORD(v194) = v178;
        WORD1(v194) = v186;
        WORD2(v194) = v175;
        HIWORD(v194) = v14;
        LOWORD(v195) = v184;
        HIWORD(v195) = v171;
        BOOL v20 = isCompact_getter == _So9NSDecimala__isCompact_getter(&v193);
        __int16 v8 = v18;
        unsigned __int16 v17 = v170;
        if (v20)
        {
          LODWORD(v193) = v181;
          WORD2(v193) = v170;
          HIWORD(v193) = v167;
          LOWORD(v194) = v18;
          WORD1(v194) = v173;
          WORD2(v194) = v9;
          HIWORD(v194) = v10;
          LOWORD(v195) = v169;
          HIWORD(v195) = v11;
          int v23 = _So9NSDecimala__reserved_getter(&v193);
          LODWORD(v193) = v174;
          WORD2(v193) = v168;
          HIWORD(v193) = v12;
          LOWORD(v194) = v178;
          WORD1(v194) = v186;
          WORD2(v194) = v175;
          HIWORD(v194) = v14;
          LOWORD(v195) = v184;
          HIWORD(v195) = v171;
          BOOL v20 = v23 == _So9NSDecimala__reserved_getter(&v193);
          __int16 v8 = v18;
          unsigned __int16 v17 = v170;
          if (v20
            && (unsigned __int16)v170 == (unsigned __int16)v168
            && (_DWORD)v167 == (_DWORD)v12
            && v18 == v178
            && (unsigned __int16)v173 == (unsigned __int16)v186
            && (unsigned __int16)v9 == (unsigned __int16)v175
            && (_DWORD)v10 == (_DWORD)v14
            && v169 == v184
            && v11 == v171)
          {
            return 1LL;
          }
        }
      }
    }
  }

  LODWORD(v193) = v181;
  WORD2(v193) = v17;
  HIWORD(v193) = v167;
  LOWORD(v194) = v8;
  WORD1(v194) = v173;
  WORD2(v194) = v9;
  HIWORD(v194) = v10;
  LOWORD(v195) = v169;
  HIWORD(v195) = v11;
  unsigned __int16 v25 = v17;
  if (!_So9NSDecimala__length_getter(&v193))
  {
    LODWORD(v193) = v181;
    WORD2(v193) = v25;
    HIWORD(v193) = v167;
    LOWORD(v194) = v8;
    WORD1(v194) = v173;
    WORD2(v194) = v9;
    HIWORD(v194) = v10;
    LOWORD(v195) = v169;
    HIWORD(v195) = v11;
    if (_So9NSDecimala__isNegative_getter(&v193))
    {
      LODWORD(v193) = v174;
      WORD2(v193) = v168;
      HIWORD(v193) = v12;
      LOWORD(v194) = v178;
      WORD1(v194) = v186;
      WORD2(v194) = v175;
      HIWORD(v194) = v14;
      LOWORD(v195) = v184;
      HIWORD(v195) = v171;
      LODWORD(v193) = v174;
      WORD2(v193) = v168;
      HIWORD(v193) = v12;
      LOWORD(v194) = v178;
      WORD1(v194) = v186;
      WORD2(v194) = v175;
      HIWORD(v194) = v14;
      LOWORD(v195) = v184;
      HIWORD(v195) = v171;
      uint64_t v38 = 0LL;
      return v38 == 0;
    }
  }

  __int16 v26 = v8;
  LODWORD(v193) = v174;
  WORD2(v193) = v168;
  HIWORD(v193) = v12;
  LOWORD(v194) = v178;
  WORD1(v194) = v186;
  WORD2(v194) = v175;
  HIWORD(v194) = v14;
  LOWORD(v195) = v184;
  HIWORD(v195) = v171;
  if (!_So9NSDecimala__length_getter(&v193))
  {
    LODWORD(v193) = v174;
    WORD2(v193) = v168;
    HIWORD(v193) = v12;
    LOWORD(v194) = v178;
    WORD1(v194) = v186;
    WORD2(v194) = v175;
    HIWORD(v194) = v14;
    LOWORD(v195) = v184;
    HIWORD(v195) = v171;
  }

  LODWORD(v193) = v181;
  WORD2(v193) = v25;
  HIWORD(v193) = v167;
  LOWORD(v194) = v8;
  WORD1(v194) = v173;
  WORD2(v194) = v9;
  HIWORD(v194) = v10;
  LOWORD(v195) = v169;
  HIWORD(v195) = v11;
  unsigned int v27 = _So9NSDecimala__isNegative_getter(&v193);
  LODWORD(v193) = v174;
  WORD2(v193) = v168;
  HIWORD(v193) = v12;
  LOWORD(v194) = v178;
  WORD1(v194) = v186;
  WORD2(v194) = v175;
  HIWORD(v194) = v14;
  LOWORD(v195) = v184;
  HIWORD(v195) = v171;
  LODWORD(v193) = v181;
  WORD2(v193) = v25;
  HIWORD(v193) = v167;
  LOWORD(v194) = v26;
  WORD1(v194) = v173;
  WORD2(v194) = v9;
  HIWORD(v194) = v10;
  LOWORD(v195) = v169;
  HIWORD(v195) = v11;
  unsigned int v28 = _So9NSDecimala__isNegative_getter(&v193);
  LODWORD(v193) = v174;
  WORD2(v193) = v168;
  HIWORD(v193) = v12;
  LOWORD(v194) = v178;
  WORD1(v194) = v186;
  WORD2(v194) = v175;
  HIWORD(v194) = v14;
  LOWORD(v195) = v184;
  HIWORD(v195) = v171;
  LODWORD(v193) = v181;
  WORD2(v193) = v25;
  HIWORD(v193) = v167;
  LOWORD(v194) = v26;
  WORD1(v194) = v173;
  WORD2(v194) = v9;
  HIWORD(v194) = v10;
  LOWORD(v195) = v169;
  HIWORD(v195) = v11;
  if (!_So9NSDecimala__length_getter(&v193))
  {
    LODWORD(v193) = v174;
    WORD2(v193) = v168;
    HIWORD(v193) = v12;
    LOWORD(v194) = v178;
    WORD1(v194) = v186;
    WORD2(v194) = v175;
    HIWORD(v194) = v14;
    LOWORD(v195) = v184;
    HIWORD(v195) = v171;
    else {
      uint64_t v38 = 0LL;
    }
    return v38 == 0;
  }

  LODWORD(v193) = v174;
  WORD2(v193) = v168;
  LOWORD(v29) = v12;
  HIWORD(v193) = v12;
  LOWORD(v194) = v178;
  WORD1(v194) = v186;
  WORD2(v194) = v175;
  HIWORD(v194) = v14;
  LOWORD(v195) = v184;
  HIWORD(v195) = v171;
  if (!_So9NSDecimala__length_getter(&v193))
  {
    LODWORD(v193) = v181;
    WORD2(v193) = v25;
    HIWORD(v193) = v167;
    LOWORD(v194) = v26;
    WORD1(v194) = v173;
    WORD2(v194) = v9;
    HIWORD(v194) = v10;
    LOWORD(v195) = v169;
    HIWORD(v195) = v11;
    uint64_t v38 = _So9NSDecimala__length_getter(&v193) != 0;
    return v38 == 0;
  }

  LODWORD(v193) = v181;
  WORD2(v193) = v25;
  HIWORD(v193) = v167;
  LOWORD(v194) = v26;
  WORD1(v194) = v173;
  WORD2(v194) = v9;
  HIWORD(v194) = v10;
  LOWORD(v195) = v169;
  HIWORD(v195) = v11;
  LODWORD(v190) = v174;
  WORD2(v190) = v168;
  HIWORD(v190) = v12;
  LOWORD(v191) = v178;
  WORD1(v191) = v186;
  WORD2(v191) = v175;
  HIWORD(v191) = v14;
  LOWORD(v192) = v184;
  HIWORD(v192) = v171;
  int v188 = v181;
  LOWORD(v189) = v25;
  WORD1(v189) = v167;
  WORD2(v189) = v26;
  WORD3(v189) = v173;
  WORD4(v189) = v9;
  WORD5(v189) = v10;
  WORD6(v189) = v169;
  HIWORD(v189) = v11;
  int v30 = _So9NSDecimala__exponent_getter((char *)&v188);
  int v188 = v174;
  LOWORD(v189) = v168;
  WORD1(v189) = v12;
  WORD2(v189) = v178;
  WORD3(v189) = v186;
  WORD4(v189) = v175;
  WORD5(v189) = v14;
  WORD6(v189) = v184;
  HIWORD(v189) = v171;
  int v31 = _So9NSDecimala__exponent_getter((char *)&v188);
  int v32 = v30 - v31;
  if (v30 == v31) {
    goto LABEL_193;
  }
  uint64_t v33 = v32;
  if (v32 < 0)
  {
    unint64_t v34 = (char *)&v190 + 4;
    uint64_t v33 = -v33;
    uint64_t v35 = (uint64_t)&v190;
    __int128 v36 = &v193;
    unsigned __int16 v37 = v168;
    unsigned int v181 = v174;
  }

  else
  {
    unint64_t v34 = (char *)&v193 + 4;
    uint64_t v35 = (uint64_t)&v193;
    __int128 v36 = &v190;
    unsigned __int16 v37 = v25;
  }

  int64_t v39 = v181 | ((unint64_t)v37 << 32) | ((unint64_t)*((unsigned __int16 *)v34 + 1) << 48);
  unint64_t v40 = *(void *)(v34 + 4);
  LODWORD(v41) = *((_DWORD *)v34 + 3);
  NSDecimal.asVariableLengthInteger()(v39, v40, v41);
  uint64_t v43 = v42;
  uint64_t v187 = v36;
  if (!v33)
  {
    uint64_t v49 = v42;
    goto LABEL_96;
  }

  uint64_t v174 = v33;
  uint64_t v44 = specialized abs<A>(_:)(v33);
  uint64_t v45 = one-time initialization token for powerOfTen;
  swift_bridgeObjectRetain();
  if (v45 != -1) {
    goto LABEL_324;
  }
  while (1)
  {
    rawValue = powerOfTen._rawValue;
    uint64_t v47 = *((void *)powerOfTen._rawValue + 2);
    unint64_t v182 = v39;
    LOWORD(v185) = v43;
    unint64_t v179 = v40;
    unsigned int v176 = v41;
    if (v47 > v44) {
      break;
    }
    if (!v47) {
      goto LABEL_333;
    }
    int64_t v39 = v47 - 1;
    uint64_t v41 = v43;
    uint64_t v29 = 0LL;
    while (1)
    {
      BOOL v50 = __OFSUB__(v44, v39);
      v44 -= v39;
      if (v50) {
        goto LABEL_322;
      }
      uint64_t v51 = *(void *)(v41 + 16);
      if (v51 && (v43 = *((void *)powerOfTen._rawValue + v39 + 4), (unint64_t v40 = *(void *)(v43 + 16)) != 0))
      {
        int64_t v172 = v39;
        if (__OFADD__(v51, v40)) {
          goto LABEL_334;
        }
        uint64_t v173 = v35;
        else {
          int64_t v39 = v51 + v40;
        }
        if (v39 < 0) {
          goto LABEL_373;
        }
        swift_bridgeObjectRetain();
        uint64_t v49 = static Array._allocateBufferUninitialized(minimumCapacity:)();
        *(void *)(v49 + 16) = v39;
        uint64_t v35 = v49 + 32;
        bzero((void *)(v49 + 32), 2 * v39);
        uint64_t v52 = 0LL;
        uint64_t v53 = v43 + 32;
        do
        {
          unsigned int v54 = 0;
          uint64_t v55 = 0LL;
          uint64_t v56 = v52++;
          do
          {
            int64_t v59 = v55 + v56;
            if (__OFADD__(v55, v56))
            {
              __break(1u);
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              goto LABEL_191;
            }

            if (v59 >= v39)
            {
              if (v54) {
                goto LABEL_94;
              }
              unsigned int v54 = *(unsigned __int16 *)(v53 + 2 * v56);
              if (*(_WORD *)(v53 + 2 * v56))
              {
                unsigned int v54 = *(unsigned __int16 *)(v41 + 2 * v55 + 32);
                if (*(_WORD *)(v41 + 2 * v55 + 32)) {
                  goto LABEL_94;
                }
              }
            }

            else
            {
              if (v59 < 0)
              {
                __break(1u);
LABEL_310:
                __break(1u);
LABEL_311:
                __break(1u);
LABEL_312:
                __break(1u);
LABEL_313:
                __break(1u);
LABEL_314:
                uint64_t v38 = 0LL;
                goto LABEL_197;
              }

              uint64_t v57 = 2 * v59;
              unsigned int v58 = v54
              unsigned int v54 = HIWORD(v58);
              *(_WORD *)(v35 + v57) = v58;
            }

            ++v55;
          }

          while (v51 != v55);
          if (v54)
          {
            BOOL v50 = __OFADD__(v51, v56);
            int64_t v60 = v51 + v56;
            if (v50) {
              goto LABEL_337;
            }
            if (v60 >= v39) {
              goto LABEL_94;
            }
            if (v60 < 0) {
              goto LABEL_340;
            }
            if ((unint64_t)v60 >= *(void *)(v49 + 16))
            {
LABEL_341:
              __break(1u);
              goto LABEL_342;
            }

            *(_WORD *)(v35 + 2 * v60) = v54;
          }
        }

        while (v52 != v40);
        uint64_t v61 = *(void *)(v49 + 16);
        if (v61 && !*(_WORD *)(v35 + 2 * v61 - 2))
        {
          uint64_t v62 = v61 + 14;
          do
          {
            *(void *)(v49 + 16) = v62 - 15;
            if (v62 == 15) {
              break;
            }
          }

          while (!*(unsigned __int16 *)(v49 + 2 * v62--));
        }

        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v41 = v49;
        int64_t v39 = v172;
        uint64_t v35 = v173;
      }

      else
      {
        swift_bridgeObjectRelease();
        uint64_t v41 = MEMORY[0x18961AFE8];
      }

      if (v47 > v44)
      {
        rawValue = powerOfTen._rawValue;
        if (v44 < 0) {
          goto LABEL_93;
        }
        goto LABEL_44;
      }
    }

LABEL_272:
        NSDecimal.copyVariableLengthInteger(_:)((Swift::OpaquePointer)v131);
        if (!v29)
        {
          unint64_t v149 = *(void *)(v131 + 16);
          swift_bridgeObjectRelease();
          if (HIDWORD(v149)) {
            goto LABEL_374;
          }
          _So9NSDecimala__length_setter(v149, (_DWORD *)v35);
          if (v83 >= (uint64_t)0xFFFFFFFF80000000LL)
          {
            if (v83 <= 0x7FFFFFFF)
            {
              int v188 = *(_DWORD *)v35;
              __int128 v189 = *(_OWORD *)(v35 + 4);
              int v151 = _So9NSDecimala__exponent_getter((char *)&v188);
              BOOL v50 = __OFSUB__(v151, (_DWORD)v83);
              uint64_t v66 = (v151 - v83);
              if (v50)
              {
                __break(1u);
                goto LABEL_279;
              }

                      __break(1u);
LABEL_273:
                      __break(1u);
                      goto LABEL_274;
                    }

LABEL_366:
          __break(1u);
          goto LABEL_367;
        }

LABEL_361:
      __break(1u);
LABEL_362:
      __break(1u);
LABEL_363:
      __break(1u);
LABEL_364:
      __break(1u);
LABEL_365:
      __break(1u);
      goto LABEL_366;
    }

        v421._uint64_t countAndFlagsBits = 0LL;
        v421._uint64_t object = (void *)0xE000000000000000LL;
        _StringGuts.grow(_:)(22LL);
        swift_bridgeObjectRelease();
        v421._uint64_t countAndFlagsBits = 0xD000000000000014LL;
        v421._uint64_t object = (void *)0x80000001839C9190LL;
        LODWORD(v420) = v65;
        goto LABEL_362;
      }

      uint64_t v407 = v30;
      unint64_t v103 = *(void *)(v417 + 64);
      v413 = (void *)(v417 + 64);
      int64_t v104 = 1LL << *(_BYTE *)(v417 + 32);
      uint64_t v105 = -1LL;
      if (v104 < 64) {
        uint64_t v105 = ~(-1LL << v104);
      }
      uint64_t v106 = v105 & v103;
      v414 = (unint64_t)(v104 + 63) >> 6;
      swift_bridgeObjectRetain();
      if (v106)
      {
        __int16 v107 = __clz(__rbit64(v106));
        goto LABEL_87;
      }

      uint64_t v108 = 1LL;
      if (v414 > 1)
      {
        unint64_t v109 = v413[1];
        if (v109)
        {
LABEL_86:
          __int16 v107 = __clz(__rbit64(v109)) + (v108 << 6);
LABEL_87:
          uint64_t v111 = *(void *)(*(void *)(v417 + 56) + 16 * v107 + 8);
          swift_bridgeObjectRetain_n();
          __asm { BR              X8 }
        }

        uint64_t v110 = 2LL;
        if (v414 > 2)
        {
          unint64_t v109 = v413[2];
          if (v109) {
            goto LABEL_85;
          }
          uint64_t v110 = 3LL;
          if (v414 <= 3) {
            goto LABEL_92;
          }
          unint64_t v109 = v413[3];
          if (v109)
          {
LABEL_85:
            uint64_t v108 = v110;
            goto LABEL_86;
          }

          uint64_t v110 = 4LL;
          if (v414 > 4)
          {
            unint64_t v109 = v413[4];
            if (v109) {
              goto LABEL_85;
            }
            while (1)
            {
              uint64_t v108 = v110 + 1;
              if (__OFADD__(v110, 1LL)) {
                goto LABEL_346;
              }
              if (v108 >= v414) {
                break;
              }
              unint64_t v109 = v413[v108];
              ++v110;
              if (v109) {
                goto LABEL_86;
              }
            }
          }
        }
      }

  if (v219) {
    goto LABEL_416;
  }
LABEL_362:
  while (1)
  {
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    uint64_t v231 = a3 & 0xFFFFFFFFFFFFF0FFLL | (v104 << 8);
    a3 = v354;
    if (!v16) {
      break;
    }
LABEL_240:
    swift_unknownObjectRetain();
    unint64_t v232 = specialized Rope._Node.distanceFromStart<A>(to:in:)(v11, v231, v42, v16, v355);
    swift_release();
    swift_unknownObjectRelease_n();
    uint64_t v44 = v32 - v219;
    if (!__OFSUB__(v32, v219)) {
      goto LABEL_241;
    }
LABEL_365:
    __break(1u);
LABEL_366:
    __break(1u);
LABEL_367:
    __break(1u);
LABEL_368:
    __break(1u);
LABEL_369:
    __break(1u);
LABEL_370:
    int64_t v104 = v47;
    char v219 = v44;
  }

LABEL_360:
    __break(1u);
    goto LABEL_361;
  }

  if (!v39) {
    goto LABEL_344;
  }
  int64_t v90 = v39 - 1;
  swift_bridgeObjectRetain();
  uint64_t v35 = v43;
  uint64_t v183 = v86;
  do
  {
    uint64_t v41 = *((void *)powerOfTen._rawValue + v90 + 4);
    if (v86 < 0)
    {
      int64_t v104 = v90;
      swift_bridgeObjectRetain();
      uint64_t v105 = specialized static NSDecimal._integerDivide(dividend:divisor:maxResultLength:)(v35, v41, 8LL);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v35 = v105;
      int64_t v90 = v104;
    }

    else
    {
      unint64_t v40 = *(void *)(v35 + 16);
      if (v40 && (uint64_t v91 = *(void *)(v41 + 16)) != 0)
      {
        uint64_t v180 = v43;
        if (__OFADD__(v40, v91)) {
          goto LABEL_345;
        }
        int64_t v177 = v90;
        else {
          uint64_t v43 = v40 + v91;
        }
        if (v43 < 0) {
          goto LABEL_373;
        }
        swift_bridgeObjectRetain();
        uint64_t v49 = static Array._allocateBufferUninitialized(minimumCapacity:)();
        *(void *)(v49 + 16) = v43;
        uint64_t v44 = v49 + 32;
        bzero((void *)(v49 + 32), 2 * v43);
        uint64_t v92 = 0LL;
        uint64_t v93 = v41 + 32;
        do
        {
          unsigned int v94 = 0;
          uint64_t v95 = 0LL;
          uint64_t v96 = v92++;
          do
          {
            uint64_t v97 = v95 + v96;
            if (__OFADD__(v95, v96)) {
              goto LABEL_313;
            }
            if (v97 >= v43)
            {
              if (v94) {
                goto LABEL_186;
              }
              unsigned int v94 = *(unsigned __int16 *)(v93 + 2 * v96);
              if (*(_WORD *)(v93 + 2 * v96))
              {
                unsigned int v94 = *(unsigned __int16 *)(v35 + 2 * v95 + 32);
                if (*(_WORD *)(v35 + 2 * v95 + 32)) {
                  goto LABEL_186;
                }
              }
            }

            else
            {
              if (v97 < 0) {
                goto LABEL_317;
              }
              uint64_t v98 = 2 * v97;
              unsigned int v99 = v94
              unsigned int v94 = HIWORD(v99);
              *(_WORD *)(v44 + v98) = v99;
            }

            ++v95;
          }

          while (v40 != v95);
          if (v94)
          {
            BOOL v50 = __OFADD__(v40, v96);
            uint64_t v100 = v40 + v96;
            if (v50) {
              goto LABEL_355;
            }
            if (v100 >= v43)
            {
LABEL_186:
              lazy protocol witness table accessor for type NSDecimal._CalculationError and conformance NSDecimal._CalculationError();
              uint64_t v106 = swift_allocError();
              _BYTE *v107 = 0;
              swift_willThrow();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              uint64_t v108 = (void *)v106;
              goto LABEL_192;
            }

            if (v100 < 0) {
              goto LABEL_356;
            }
            *(_WORD *)(v44 + 2 * v100) = v94;
          }
        }

        while (v92 != v91);
        uint64_t v101 = *(void *)(v49 + 16);
        if (v101 && !*(_WORD *)(v44 + 2 * v101 - 2))
        {
          uint64_t v102 = v101 + 14;
          do
          {
            *(void *)(v49 + 16) = v102 - 15;
            if (v102 == 15) {
              break;
            }
          }

          while (!*(unsigned __int16 *)(v49 + 2 * v102--));
        }

        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v35 = v49;
        uint64_t v83 = (uint64_t)v187;
        uint64_t v43 = v180;
        uint64_t v86 = v183;
        int64_t v90 = v177;
      }

      else
      {
        swift_bridgeObjectRelease();
        uint64_t v35 = MEMORY[0x18961AFE8];
        uint64_t v86 = v183;
      }
    }

    v87 -= v90;
  }

  while (v39 <= v87);
  uint64_t v88 = (uint64_t)powerOfTen._rawValue;
  if (v87 < 0) {
    goto LABEL_257;
  }
LABEL_137:
  if ((unint64_t)v87 >= *(void *)(v88 + 16))
  {
LABEL_342:
    __break(1u);
LABEL_343:
    __break(1u);
LABEL_344:
    __break(1u);
LABEL_345:
    __break(1u);
LABEL_346:
    __break(1u);
LABEL_347:
    __break(1u);
LABEL_348:
    __break(1u);
LABEL_349:
    __break(1u);
LABEL_350:
    __break(1u);
    goto LABEL_351;
  }

  uint64_t v44 = *(void *)(v88 + 8 * v87 + 32);
  if (v86 < 0)
  {
    swift_bridgeObjectRetain();
    uint64_t v87 = specialized static NSDecimal._integerDivide(dividend:divisor:maxResultLength:)(v35, v44, 8LL);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_189;
  }

  uint64_t v89 = *(void *)(v35 + 16);
  if (!v89 || (int64_t v39 = *(void *)(v44 + 16)) == 0)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v87 = MEMORY[0x18961AFE8];
LABEL_189:
    uint64_t v35 = v173;
    goto LABEL_190;
  }

  uint64_t v41 = v86;
  unint64_t v40 = v43;
  uint64_t v43 = v89 + v39;
  if (__OFADD__(v89, v39))
  {
LABEL_359:
    __break(1u);
    goto LABEL_360;
  }

  if (v43 > 7)
  {
    uint64_t v43 = 8LL;
  }

  else
  {
    if (v43 < 0) {
      goto LABEL_373;
    }
    if (!v43)
    {
      swift_bridgeObjectRetain();
      uint64_t v87 = MEMORY[0x18961AFE8];
      goto LABEL_222;
    }
  }

  swift_bridgeObjectRetain();
  uint64_t v87 = static Array._allocateBufferUninitialized(minimumCapacity:)();
  *(void *)(v87 + 16) = v43;
  bzero((void *)(v87 + 32), 2 * v43);
LABEL_222:
  uint64_t v132 = 0LL;
  uint64_t v133 = v44 + 32;
  uint64_t v134 = v87 + 32;
  while (2)
  {
    if (v132 == v39)
    {
      __break(1u);
      goto LABEL_359;
    }

    unsigned int v135 = 0;
    uint64_t v136 = 0LL;
    uint64_t v137 = v132 + 1;
    do
    {
      if (v89 == v136) {
        goto LABEL_320;
      }
      uint64_t v138 = v136 + v132;
      if (__OFADD__(v136, v132)) {
        goto LABEL_321;
      }
      if (v138 >= v43)
      {
        if (v135) {
          goto LABEL_248;
        }
        unsigned int v135 = *(unsigned __int16 *)(v133 + 2 * v132);
        if (*(_WORD *)(v133 + 2 * v132))
        {
          unsigned int v135 = *(unsigned __int16 *)(v35 + 2 * v136 + 32);
          if (*(_WORD *)(v35 + 2 * v136 + 32)) {
            goto LABEL_248;
          }
        }
      }

      else
      {
        if (v138 < 0)
        {
          __break(1u);
LABEL_326:
          __break(1u);
LABEL_327:
          __break(1u);
LABEL_328:
          __break(1u);
          goto LABEL_329;
        }

        uint64_t v139 = 2 * v138;
        unsigned int v140 = v135
        unsigned int v135 = HIWORD(v140);
        *(_WORD *)(v134 + v139) = v140;
      }

      ++v136;
    }

    while (v89 != v136);
    if (!v135) {
      goto LABEL_242;
    }
    BOOL v50 = __OFADD__(v89, v132);
    uint64_t v141 = v89 + v132;
    if (v50) {
      goto LABEL_362;
    }
    if (v141 < v43)
    {
      if (v141 < 0) {
        goto LABEL_363;
      }
      *(_WORD *)(v134 + 2 * v141) = v135;
LABEL_242:
      uint64_t v132 = v137;
      if (v137 != v39) {
        continue;
      }
      uint64_t v142 = *(void *)(v87 + 16);
      if (v142 && !*(_WORD *)(v134 + 2 * v142 - 2))
      {
        do
        {
          *(void *)(v87 + 16) = v142 - 1;
          if (v142 == 1) {
            break;
          }
        }

        while (!*(unsigned __int16 *)(v87 + 28 + 2 * v142--));
      }

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v35 = v173;
      uint64_t v86 = v41;
LABEL_190:
      NSDecimal.copyVariableLengthInteger(_:)((Swift::OpaquePointer)v87);
      if (v29) {
        goto LABEL_191;
      }
      unint64_t v120 = *(void *)(v87 + 16);
      swift_bridgeObjectRelease();
      if (!(v120 >> 31))
      {
        _So9NSDecimala__length_setter(v120, (_DWORD *)v83);
        if (v86 >= (uint64_t)0xFFFFFFFF80000000LL)
        {
          if (v86 <= 0x7FFFFFFF)
          {
            int v188 = *(_DWORD *)v83;
            __int128 v189 = *(_OWORD *)(v83 + 4);
            int v121 = _So9NSDecimala__exponent_getter((char *)&v188);
            BOOL v50 = __OFSUB__(v121, (_DWORD)v86);
            uint64_t v122 = (v121 - v86);
            if (!v50)
            {
              _So9NSDecimala__exponent_setter(v122, (_BYTE *)v83);
              _So9NSDecimala__isCompact_setter_0(0LL, (_DWORD *)v83);
              int v188 = *(_DWORD *)v83;
              __int128 v189 = *(_OWORD *)(v83 + 4);
              int v123 = _So9NSDecimala__length_getter(&v188);
              uint64_t v124 = *(unsigned __int16 *)(v35 + 4);
              uint64_t v125 = *(unsigned __int16 *)(v35 + 6);
              if (!v123)
              {
                int v129 = *(_DWORD *)(v35 + 16);
                int v188 = *(_DWORD *)v35;
                LOWORD(v189) = v124;
                WORD1(v189) = v125;
                *(void *)((char *)&v189 + 4) = *(void *)(v35 + 8);
                HIDWORD(v189) = v129;
                uint64_t v130 = _So9NSDecimala__exponent_getter((char *)&v188);
                _So9NSDecimala__exponent_setter(v130, (_BYTE *)v83);
                goto LABEL_193;
              }

              NSDecimal.asVariableLengthInteger()( *(unsigned int *)v35 | (unint64_t)(v124 << 32) | (v125 << 48),  *(void *)(v35 + 8),  *(_DWORD *)(v35 + 16));
              uint64_t v127 = v126;
              uint64_t v83 = v185;
              if (!v185)
              {
                uint64_t v131 = v126;
                goto LABEL_272;
              }

              uint64_t v88 = specialized abs<A>(_:)(v185);
              unint64_t v128 = powerOfTen._rawValue;
              int64_t v39 = *((void *)powerOfTen._rawValue + 2);
              if (v39 > v88)
              {
                swift_bridgeObjectRetain();
                uint64_t v43 = v127;
                goto LABEL_259;
              }

              if (!v39) {
                goto LABEL_365;
              }
              uint64_t v41 = v35;
              uint64_t v87 = v39 - 1;
              swift_bridgeObjectRetain();
              uint64_t v146 = v127;
              while ((unint64_t)v39 <= *((void *)powerOfTen._rawValue + 2))
              {
                uint64_t v148 = *((void *)powerOfTen._rawValue + v87 + 4);
                swift_bridgeObjectRetain();
                if (v185 < 0) {
                  uint64_t v147 = specialized static NSDecimal._integerDivide(dividend:divisor:maxResultLength:)(v146, v148, 8LL);
                }
                else {
                  uint64_t v147 = specialized static NSDecimal._integerMultiply(lhs:rhs:maxResultLength:)(v146, v148, 8LL);
                }
                uint64_t v43 = v147;
                v88 -= v87;
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                uint64_t v146 = v43;
                if (v39 > v88) {
                  goto LABEL_258;
                }
              }

    v421._uint64_t countAndFlagsBits = 0LL;
    v421._uint64_t object = (void *)0xE000000000000000LL;
    _StringGuts.grow(_:)(22LL);
    swift_bridgeObjectRelease();
    v421._uint64_t countAndFlagsBits = 0xD000000000000014LL;
    v421._uint64_t object = (void *)0x80000001839C9190LL;
    LODWORD(v418._countAndFlagsBits) = v65;
LABEL_362:
    v402._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v402);
    swift_bridgeObjectRelease();
    LODWORD(v405) = 0;
    char v404 = 73LL;
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    JUMPOUT(0x1832CA538LL);
  }

  uint64_t v52 = (char *)swift_slowAlloc();
  uint64_t v53 = (unint64_t)v415;
  swift_bridgeObjectRetain();
  String._decomposed(_:into:nullTerminated:)(1, (uint64_t)v52, v20, 1, v16, v53);
  uint64_t v55 = v54;
  swift_bridgeObjectRelease();
  if ((v55 & 1) == 0)
  {
    id v409 = v6;
    if ((v416 & 2) != 0) {
      uint64_t v56 = 3585;
    }
    else {
      uint64_t v56 = 1537;
    }
    LODWORD(v416) = _NSOpenFileDescriptor_Protected(v52, v56, v416, 438LL);
    if ((v416 & 0x80000000) == 0)
    {
      if ((v410 & 1) != 0
        && (uint64_t v57 = (void *)objc_opt_self(),
            unsigned int v58 = objc_msgSend(v57, sel_currentProgress),
            v58,
            v58))
      {
        if (v411) {
          int64_t v59 = &v412[-v411];
        }
        else {
          int64_t v59 = 0LL;
        }
        int64_t v60 = objc_msgSend(v57, sel_progressWithTotalUnitCount_, v59);
      }

      else
      {
        int64_t v60 = 0LL;
      }

      v421._uint64_t countAndFlagsBits = (uint64_t)v409;
      v421._uint64_t object = (void *)v7;
      uint64_t v422 = v8;
      unint64_t v423 = (char)v413;
      unsigned int v116 = (char *)v414;
      uint64_t v117 = write(buffer:toFileDescriptor:path:parentProgress:)(v411, (uint64_t)v412, v416, (uint64_t)&v421, v60);
      unsigned int v118 = v116;
      if (!v116)
      {
        v410 = v60;
        uint64_t v408 = (uint64_t *)v52;
        uint64_t v138 = v417 + 64;
        uint64_t v139 = 1LL << *(_BYTE *)(v417 + 32);
        unsigned int v140 = -1LL;
        if (v139 < 64) {
          unsigned int v140 = ~(-1LL << v139);
        }
        uint64_t v141 = v140 & *(void *)(v417 + 64);
        uint64_t v142 = (unint64_t)(v139 + 63) >> 6;
        swift_bridgeObjectRetain();
        __int128 v143 = 0LL;
        while (1)
        {
          if (v141)
          {
            uint64_t v144 = __clz(__rbit64(v141));
            v141 &= v141 - 1;
            uint64_t v145 = v144 | (v143 << 6);
          }

          else
          {
            if (__OFADD__(v143++, 1LL))
            {
              __break(1u);
              goto LABEL_345;
            }

            if (v143 >= v142) {
              goto LABEL_156;
            }
            uint64_t v150 = *(void *)(v138 + 8 * v143);
            if (!v150)
            {
              int v151 = v143 + 1;
              if (v143 + 1 >= v142) {
                goto LABEL_156;
              }
              uint64_t v150 = *(void *)(v138 + 8 * v151);
              if (!v150)
              {
                int v151 = v143 + 2;
                if (v143 + 2 >= v142) {
                  goto LABEL_156;
                }
                uint64_t v150 = *(void *)(v138 + 8 * v151);
                if (!v150)
                {
                  int v151 = v143 + 3;
                  if (v143 + 3 >= v142)
                  {
LABEL_156:
                    swift_release();

                    close(v416);
                    unsigned int v115 = v408;
                    goto LABEL_101;
                  }

                  uint64_t v150 = *(void *)(v138 + 8 * v151);
                  if (!v150)
                  {
                    while (1)
                    {
                      __int128 v143 = v151 + 1;
                      if (__OFADD__(v151, 1LL)) {
                        break;
                      }
                      if (v143 >= v142) {
                        goto LABEL_156;
                      }
                      uint64_t v150 = *(void *)(v138 + 8 * v143);
                      ++v151;
                      if (v150) {
                        goto LABEL_137;
                      }
                    }

  if (v216) {
    goto LABEL_415;
  }
LABEL_361:
  while (1)
  {
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    uint64_t v228 = v3 & 0xFFFFFFFFFFFFF0FFLL | (v98 << 8);
    char v213 = v335;
    unint64_t v3 = v351;
    BOOL v215 = v349;
    if (!v15) {
      break;
    }
LABEL_239:
    swift_unknownObjectRetain();
    char v229 = specialized Rope._Node.distanceFromStart<A>(to:in:)(v10, v228, v2, v15, v215);
    swift_release();
    swift_unknownObjectRelease_n();
    uint64_t v43 = v13 - v216;
    if (!__OFSUB__(v13, v216)) {
      goto LABEL_240;
    }
LABEL_364:
    __break(1u);
LABEL_365:
    __break(1u);
LABEL_366:
    __break(1u);
LABEL_367:
    __break(1u);
LABEL_368:
    __break(1u);
LABEL_369:
    uint64_t v98 = v46;
    BOOL v216 = v43;
  }

LABEL_354:
            __break(1u);
LABEL_355:
            __break(1u);
LABEL_356:
            __break(1u);
LABEL_357:
            __break(1u);
          }

                  int64_t v104 = 1LL;
                  char v219 = v56;
                  goto LABEL_362;
                }

                int v16 = v108;
                uint64_t v56 = 1LL;
              }

LABEL_353:
          __break(1u);
          goto LABEL_354;
        }

                  uint64_t v98 = 1LL;
                  BOOL v216 = v54;
                  goto LABEL_361;
                }

                __int128 v2 = v103;
                unsigned int v54 = 1LL;
              }

LABEL_352:
        __break(1u);
        goto LABEL_353;
      }

                          __break(1u);
LABEL_353:
                          __break(1u);
LABEL_354:
                          __break(1u);
LABEL_355:
                          __break(1u);
LABEL_356:
                          __break(1u);
LABEL_357:
                          __break(1u);
LABEL_358:
                          __break(1u);
                          goto LABEL_359;
                        }

                        uint64_t v137 = v147;
                        goto LABEL_311;
                      }

                      uint64_t v145 = 0LL;
                    }

                    else
                    {
LABEL_311:
                      if (v137) {
                        goto LABEL_372;
                      }
                    }

LABEL_351:
      __break(1u);
      goto LABEL_352;
    }

    break;
  }

  __break(1u);
LABEL_354:
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
LABEL_355:
  swift_bridgeObjectRelease();
  lazy protocol witness table accessor for type NSDecimal._CalculationError and conformance NSDecimal._CalculationError();
  swift_allocError();
  void *v239 = 0;
  swift_willThrow();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_unexpectedError();
  __break(1u);
}

                    __break(1u);
LABEL_352:
                    __break(1u);
LABEL_353:
                    __break(1u);
LABEL_354:
                    __break(1u);
                    goto LABEL_355;
                  }

LABEL_196:
    uint64_t v38 = -1LL;
    goto LABEL_197;
  }

    __break(1u);
LABEL_197:
    __break(1u);
  }

  return result;
}

LABEL_194:
  uint64_t v38 = 1LL;
LABEL_197:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  int v188 = v39;
  LOWORD(v189) = (_WORD)v187;
  WORD1(v189) = (_WORD)v29;
  WORD2(v189) = v185;
  WORD3(v189) = v40;
  WORD4(v189) = v35;
  WORD5(v189) = v43;
  WORD6(v189) = v41;
  HIWORD(v189) = v49;
  if (_So9NSDecimala__isNegative_getter(&v188) && v38 != -1 && v38) {
LABEL_33:
  }
    uint64_t v38 = -1LL;
  return v38 == 0;
}

        uint64_t v157 = (v169 - 1) & v169;
      }
    }
  }

  Week = (void *)__CFLocalePrefsCopyAppleMinDaysInFirstWeek(v2);
  if (Week)
  {
    uint64_t v198 = Week;
    v238[0] = 0LL;
    specialized static Dictionary._conditionallyBridgeFromObjectiveC(_:result:)(Week, v238);

    uint64_t v199 = v238[0];
    if (v238[0])
    {
      uint64_t v200 = 0LL;
      v238[0] = MEMORY[0x18961AFF0];
      unint64_t v201 = v199 + 64;
      uint64_t v202 = 1LL << *(_BYTE *)(v199 + 32);
      uint64_t v203 = -1LL;
      if (v202 < 64) {
        uint64_t v203 = ~(-1LL << v202);
      }
      uint64_t v204 = v203 & *(void *)(v199 + 64);
      Swift::String v205 = (unint64_t)(v202 + 63) >> 6;
      while (1)
      {
        if (v204)
        {
          char v206 = __clz(__rbit64(v204));
          v204 &= v204 - 1;
          char v207 = v206 | (v200 << 6);
        }

        else
        {
          char v208 = v200 + 1;
          if (__OFADD__(v200, 1LL)) {
            goto LABEL_274;
          }
          if (v208 >= v205)
          {
LABEL_267:
            swift_release();
            BOOL v216 = v238[0];
            if (*(void *)(v238[0] + 16LL))
            {
              swift_bridgeObjectRelease();
              v234[7] = v216;
            }

            else
            {
              swift_bridgeObjectRelease();
            }

            return;
          }

          int64_t v209 = *(void *)(v201 + 8 * v208);
          ++v200;
          if (!v209)
          {
            uint64_t v200 = v208 + 1;
            if (v208 + 1 >= v205) {
              goto LABEL_267;
            }
            int64_t v209 = *(void *)(v201 + 8 * v200);
            if (!v209)
            {
              uint64_t v200 = v208 + 2;
              if (v208 + 2 >= v205) {
                goto LABEL_267;
              }
              int64_t v209 = *(void *)(v201 + 8 * v200);
              if (!v209)
              {
                uint64_t v210 = v208 + 3;
                if (v210 >= v205) {
                  goto LABEL_267;
                }
                int64_t v209 = *(void *)(v201 + 8 * v210);
                if (!v209)
                {
                  while (1)
                  {
                    uint64_t v200 = v210 + 1;
                    if (__OFADD__(v210, 1LL)) {
                      break;
                    }
                    if (v200 >= v205) {
                      goto LABEL_267;
                    }
                    int64_t v209 = *(void *)(v201 + 8 * v200);
                    ++v210;
                    if (v209) {
                      goto LABEL_264;
                    }
                  }

        uint64_t v97 = v87 + 365;
        if (!__OFADD__(v87, 365LL))
        {
LABEL_195:
          uint64_t v98 = weekdaya;
          __int16 v6 = _CalendarGregorian.weekNumber(desiredDay:dayOfPeriod:weekday:)(v97, v97, weekdaya);
LABEL_225:
          uint64_t v117 = _CalendarGregorian.weekNumber(desiredDay:dayOfPeriod:weekday:)(dayOfPeriod, dayOfPeriod, v98);
          if (__OFSUB__(dayOfPeriod, 1LL))
          {
LABEL_263:
            __break(1u);
            goto LABEL_264;
          }

          uint64_t v114 = (dayOfPeriod - 1) / 7 + 1;
          unint64_t v4 = v122;
          a4 = v109;
          uint64_t v42 = weekdaya;
LABEL_48:
          uint64_t v125 = 0uLL;
          uint64_t v124 = 0uLL;
          DateComponents.init(calendar:timeZone:era:year:month:day:hour:minute:second:nanosecond:weekday:weekdayOrdinal:quarter:weekOfMonth:weekOfYear:yearForWeekOfYear:)( &v125,  (uint64_t *)&v124,  0LL,  1,  0LL,  1,  0LL,  1,  (uint64_t)__src,  0LL,  1,  0LL,  1,  0LL,  1,  0LL,  1,  0LL,  1,  0LL,  1,  0LL,  1,  0LL,  1,  0LL,  1,  0LL,  1,  0LL,  1);
          if ((v12 & 0x4000) == 0)
          {
            if ((v12 & 0x8000) == 0) {
              goto LABEL_50;
            }
            goto LABEL_75;
          }

          weekday = v42;
          unint64_t v112 = v6;
          int v121 = v4;
          LOBYTE(v6) = v41;
          __int16 v8 = v15;
          unint64_t v4 = (unint64_t)a4;
          if (one-time initialization token for cache == -1)
          {
LABEL_72:
            uint64_t v45 = static CalendarCache.cache + 16;
            __int16 v46 = (os_unfair_lock_s *)(static CalendarCache.cache + 60);
            swift_retain_n();
            os_unfair_lock_lock(v46);
            closure #1 in CalendarCache.fixed(_:)(v45, 0LL, &v125);
            os_unfair_lock_unlock(v46);
            swift_release_n();
            *(void *)&uint64_t v124 = v14;
            *((void *)&v124 + 1) = v8;
            unsigned int v15 = v8;
            swift_unknownObjectRetain();
            Calendar.timeZone.setter((uint64_t *)&v124);
            uint64_t v47 = v125;
            swift_unknownObjectRetain();
            swift_unknownObjectRelease();
            __src[0] = v47;
            if (*(void *)&__src[1])
            {
              uint64_t v124 = __src[1];
              swift_unknownObjectRetain();
              Calendar.timeZone.setter((uint64_t *)&v124);
            }

            swift_unknownObjectRelease();
            a4 = (void *)v4;
            uint64_t v41 = v6;
            unint64_t v4 = v121;
            uint64_t v42 = weekday;
            __int16 v6 = v112;
            if ((v12 & 0x8000) == 0)
            {
LABEL_50:
              if ((v12 & 1) == 0) {
                goto LABEL_51;
              }
LABEL_77:
              *(void *)&__src[2] = v7 > 0;
              BYTE8(__src[2]) = 0;
              if ((v12 & 2) == 0)
              {
LABEL_52:
                if ((v12 & 4) == 0) {
                  goto LABEL_53;
                }
                goto LABEL_84;
              }

              goto LABEL_78;
            }

unint64_t specialized NSDecimal.init(_:)(unint64_t result)
{
  uint64_t v4 = 0LL;
  uint64_t v5 = 0LL;
  int v6 = 0;
  if (result)
  {
    unint64_t v1 = result;
    if (__ROR8__(0xCCCCCCCCCCCCCCCDLL * result, 1) <= 0x1999999999999999uLL)
    {
      int v3 = 0;
      while (1)
      {
        uint64_t v2 = (v3 + 1);
        if (__OFADD__(v3, 1)) {
          break;
        }
        v1 /= 0xAuLL;
        ++v3;
        if (__ROR8__(0xCCCCCCCCCCCCCCCDLL * v1, 1) >= 0x199999999999999AuLL) {
          goto LABEL_7;
        }
      }

      __break(1u);
    }

    else
    {
      uint64_t v2 = 0LL;
LABEL_7:
      _So9NSDecimala__isCompact_setter_0(1LL, &v4);
      _So9NSDecimala__exponent_setter(v2, &v4);
      _So9NSDecimala__length_setter((79 - __clz(v1)) >> 4, &v4);
      LOWORD(v5) = WORD2(v1);
      WORD1(v5) = HIWORD(v1);
      return v4 | (v1 << 32);
    }
  }

  return result;
}

void specialized static NSDecimal.+= infix(_:_:)( int *a1, unint64_t a2, unint64_t a3, unsigned int a4)
{
  uint64_t v284 = *MEMORY[0x1895F89C0];
  __int16 v7 = *((_WORD *)a1 + 2);
  __int16 v8 = *((_WORD *)a1 + 4);
  __int16 v9 = *((_WORD *)a1 + 5);
  unsigned __int16 v10 = *((_WORD *)a1 + 6);
  unsigned __int16 v11 = *((_WORD *)a1 + 7);
  unsigned __int16 v12 = *((_WORD *)a1 + 8);
  __int16 v254 = *((_WORD *)a1 + 3);
  unsigned __int16 v13 = *((_WORD *)a1 + 9);
  unsigned int v257 = *a1;
  unsigned int v282 = *a1;
  __int16 v260 = v7;
  LOWORD(v283) = v7;
  WORD1(v283) = v254;
  WORD2(v283) = v8;
  __int16 v274 = v9;
  WORD3(v283) = v9;
  unsigned __int16 v267 = v11;
  unsigned __int16 v270 = v10;
  WORD4(v283) = v10;
  WORD5(v283) = v11;
  unsigned __int16 v266 = v12;
  WORD6(v283) = v12;
  unsigned __int16 v262 = v13;
  HIWORD(v283) = v13;
  if (!_So9NSDecimala__length_getter(&v282))
  {
    unsigned int v282 = v257;
    LOWORD(v283) = v260;
    WORD1(v283) = v254;
    WORD2(v283) = v8;
    WORD3(v283) = v274;
    WORD4(v283) = v270;
    WORD5(v283) = v267;
    WORD6(v283) = v266;
    HIWORD(v283) = v262;
  }

  unsigned int v282 = a2;
  unint64_t v14 = HIDWORD(a2);
  LOWORD(v283) = WORD2(a2);
  WORD1(v283) = HIWORD(a2);
  *(void *)((char *)&v283 + 4) = a3;
  HIDWORD(v283) = a4;
  if (!_So9NSDecimala__length_getter(&v282))
  {
    unsigned int v282 = a2;
    LOWORD(v283) = WORD2(a2);
    WORD1(v283) = HIWORD(a2);
    *(void *)((char *)&v283 + 4) = a3;
    HIDWORD(v283) = a4;
  }

  unsigned int v282 = v257;
  LOWORD(v283) = v260;
  WORD1(v283) = v254;
  WORD2(v283) = v8;
  WORD3(v283) = v274;
  WORD4(v283) = v270;
  WORD5(v283) = v267;
  WORD6(v283) = v266;
  HIWORD(v283) = v262;
  if (!_So9NSDecimala__length_getter(&v282))
  {
    unint64_t v26 = HIWORD(a2);
    unint64_t v27 = a3 >> 16;
    unint64_t v28 = HIDWORD(a3);
    unint64_t v29 = HIWORD(a3);
    __int16 v30 = a4;
    unsigned int v31 = HIWORD(a4);
    goto LABEL_306;
  }

  unsigned int v282 = a2;
  LOWORD(v283) = WORD2(a2);
  WORD1(v283) = HIWORD(a2);
  *(void *)((char *)&v283 + 4) = a3;
  HIDWORD(v283) = a4;
  if (!_So9NSDecimala__length_getter(&v282))
  {
    LODWORD(a2) = v257;
    LOWORD(v14) = v260;
    LOWORD(v31) = v262;
    LOWORD(a3) = v8;
    LOWORD(v26) = v254;
    LOWORD(v27) = v274;
    LOWORD(v29) = v267;
    LOWORD(v28) = v270;
    __int16 v30 = v266;
    goto LABEL_306;
  }

  uint64_t v252 = 0LL;
  unsigned int v282 = v257;
  LOWORD(v283) = v260;
  WORD1(v283) = v254;
  WORD2(v283) = v8;
  WORD3(v283) = v274;
  WORD4(v283) = v270;
  WORD5(v283) = v267;
  WORD6(v283) = v266;
  HIWORD(v283) = v262;
  *(void *)&__int128 v280 = a2;
  *((void *)&v280 + 1) = a3;
  unsigned int v281 = a4;
  *(_DWORD *)uint64_t v279 = v257;
  *(_WORD *)&v279[4] = v260;
  *(_WORD *)&v279[6] = v254;
  *(_WORD *)&v279[8] = v8;
  *(_WORD *)&v279[10] = v274;
  *(void *)&v279[12] = __PAIR64__(__PAIR32__(v262, v266), __PAIR32__(v267, v270));
  uint64_t v15 = _So9NSDecimala__exponent_getter(v279);
  *(void *)uint64_t v279 = a2;
  *(void *)&v279[8] = a3;
  *(_DWORD *)&v279[16] = a4;
  int v16 = _So9NSDecimala__exponent_getter(v279);
  int v17 = v15 - v16;
  if ((_DWORD)v15 == v16)
  {
    __int16 v18 = 0LL;
    goto LABEL_7;
  }

  uint64_t v40 = v17;
  if (v17 < 0)
  {
    uint64_t v72 = (char *)&v280 + 4;
    uint64_t v40 = -v40;
    uint64_t v20 = (uint64_t)&v280;
    uint64_t v73 = (__int128 *)&v282;
    unint64_t v74 = HIDWORD(a2);
    unsigned int v75 = a2;
    uint64_t v41 = 0LL;
  }

  else
  {
    uint64_t v72 = (char *)&v283;
    uint64_t v20 = (uint64_t)&v282;
    uint64_t v73 = &v280;
    uint64_t v41 = 0LL;
    LOWORD(v74) = v260;
    unsigned int v75 = v257;
  }

  unint64_t v76 = v75 | ((unint64_t)(unsigned __int16)v74 << 32) | ((unint64_t)*((unsigned __int16 *)v72 + 1) << 48);
  unint64_t v34 = *(void *)(v72 + 4);
  LODWORD(v77) = *((_DWORD *)v72 + 3);
  NSDecimal.asVariableLengthInteger()(v76, v34, v77);
  uint64_t v79 = (uint64_t)v78;
  if (!v40)
  {
    v87._rawValue = v78;
    goto LABEL_106;
  }

  unint64_t v265 = v76;
  unint64_t v275 = (unint64_t)v73;
  uint64_t v80 = one-time initialization token for powerOfTen;
  swift_bridgeObjectRetain();
  if (v80 != -1) {
    goto LABEL_312;
  }
LABEL_40:
  rawValue = powerOfTen._rawValue;
  uint64_t v82 = *((void *)powerOfTen._rawValue + 2);
  uint64_t v273 = (unsigned int *)v20;
  unint64_t v264 = v34;
  unsigned int v261 = v77;
  if (v82 > v40)
  {
    unint64_t v34 = v79;
    uint64_t v77 = v40;
    goto LABEL_42;
  }

  if (!v82) {
    goto LABEL_320;
  }
  uint64_t v15 = v82 - 1;
  unint64_t v34 = v79;
  uint64_t v77 = v40;
  do
  {
    BOOL v88 = __OFSUB__(v77, v15);
    v77 -= v15;
    if (v88) {
      goto LABEL_310;
    }
    if ((unint64_t)v82 > *((void *)powerOfTen._rawValue + 2))
    {
LABEL_311:
      __break(1u);
LABEL_312:
      swift_once();
      goto LABEL_40;
    }

    uint64_t v84 = *(void *)(v34 + 16);
    if (v84 && (v269 = *((void *)powerOfTen._rawValue + v15 + 4), (uint64_t v41 = *(void **)(v269 + 16)) != 0LL))
    {
      uint64_t v259 = v79;
      if (__OFADD__(v84, v41))
      {
        __break(1u);
LABEL_323:
        __break(1u);
LABEL_324:
        __break(1u);
LABEL_325:
        __break(1u);
LABEL_326:
        __break(1u);
LABEL_327:
        __break(1u);
        goto LABEL_328;
      }

      uint64_t v256 = v40;
      else {
        uint64_t v79 = (uint64_t)v41 + v84;
      }
      if (v79 < 0) {
        goto LABEL_353;
      }
      LOWORD(v83) = *((void *)powerOfTen._rawValue + v15 + 4);
      swift_bridgeObjectRetain();
      uint64_t v40 = static Array._allocateBufferUninitialized(minimumCapacity:)();
      *(void *)(v40 + 16) = v79;
      uint64_t v20 = v40 + 32;
      bzero((void *)(v40 + 32), 2 * v79);
      unint64_t v89 = 0LL;
      uint64_t v90 = v269 + 32;
      do
      {
        unint64_t v91 = 0LL;
        uint64_t v92 = 0LL;
        unint64_t v93 = v89++;
        do
        {
          uint64_t v94 = v92 + v93;
          if (__OFADD__(v92, v93))
          {
            __break(1u);
LABEL_262:
            unsigned int v85 = 0xFFFF;
            unsigned int v118 = v92 + *(unsigned __int16 *)(v34 + 42) - *(unsigned __int16 *)(v40 + 42) + 0xFFFF;
            LODWORD(v92) = HIWORD(v118);
            *(_WORD *)(v84 + 42) = v118;
            if (v91 == 5)
            {
              unint64_t v119 = 6LL;
              goto LABEL_276;
            }

            goto LABEL_268;
          }

          if (v94 >= v79)
          {
            if ((_DWORD)v91) {
              goto LABEL_95;
            }
            unint64_t v91 = *(unsigned __int16 *)(v90 + 2 * v93);
            if (*(_WORD *)(v90 + 2 * v93))
            {
              unint64_t v91 = *(unsigned __int16 *)(v34 + 2 * v92 + 32);
              if (*(_WORD *)(v34 + 2 * v92 + 32)) {
                goto LABEL_95;
              }
            }
          }

          else
          {
            if (v94 < 0)
            {
              __break(1u);
LABEL_265:
              __break(1u);
LABEL_266:
              __break(1u);
LABEL_267:
              __break(1u);
LABEL_268:
              unsigned int v86 = *(unsigned __int16 *)(v40 + 44);
              unsigned int v118 = v92 + *(unsigned __int16 *)(v34 + 44) - v86 + v85;
              LODWORD(v92) = HIWORD(v118);
              *(_WORD *)(v84 + 44) = v118;
              if (v91 != 6) {
                goto LABEL_274;
              }
              unint64_t v119 = 7LL;
LABEL_276:
              if (v119 >= v93)
              {
LABEL_288:
                if ((uint64_t)v119 < (uint64_t)v89)
                {
                  while (1)
                  {
LABEL_289:
                    if (v119 >= v89) {
                      goto LABEL_341;
                    }
                    unint64_t v93 = *(void *)(v84 + 16);
                    if (v119 < v93) {
                      break;
                    }
LABEL_294:
                    __break(1u);
LABEL_295:
                    LODWORD(v92) = HIWORD(v86);
                    unint64_t v119 = v93;
                  }

                  unsigned int v234 = v92 + (*(unsigned __int16 *)(v40 + 32 + 2 * v119) ^ 0xFFFF);
                  --v89;
                  unint64_t v93 = v40 + 34;
                  while (1)
                  {
                    LODWORD(v92) = HIWORD(v234);
                    *(_WORD *)(v90 + 2 * v119) = v234;
                    if (v89 == v119) {
                      break;
                    }
                    unsigned int v234 = v92 + (*(unsigned __int16 *)(v93 + 2 * v119++) ^ 0xFFFF);
                    if (v119 >= *(void *)(v84 + 16)) {
                      goto LABEL_294;
                    }
                  }
                }

LABEL_296:
                if (!(_DWORD)v92)
                {
                  swift_bridgeObjectRelease();
                  lazy protocol witness table accessor for type NSDecimal._CalculationError and conformance NSDecimal._CalculationError();
                  __int16 v18 = (void *)swift_allocError();
                  *uint64_t v238 = 0;
                  swift_willThrow();
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  goto LABEL_31;
                }

                uint64_t v230 = *(void *)(v84 + 16);
                if (v230) {
                  goto LABEL_298;
                }
                goto LABEL_301;
              }

              if (!HIWORD(v118))
              {
                while (v119 < *(void *)(v84 + 16))
                {
                  int v232 = *(unsigned __int16 *)(v94 + 2 * v119);
                  unsigned int v86 = v232 + 0xFFFF;
                  *(_WORD *)(v90 + 2 * v119) = v232 - 1;
                  if (v93 - 1 == v119) {
                    goto LABEL_295;
                  }
                  ++v119;
                  if (v232) {
                    goto LABEL_281;
                  }
                }

                __break(1u);
                goto LABEL_314;
              }

LABEL_281:
              if (v119 <= v93) {
                unint64_t v233 = v93;
              }
              else {
                unint64_t v233 = v119;
              }
              while (v233 != v119)
              {
                if (v119 >= *(void *)(v84 + 16)) {
                  goto LABEL_309;
                }
                *(_WORD *)(v90 + 2 * v119) = *(_WORD *)(v34 + 32 + 2 * v119);
                if ((uint64_t)++v119 >= (uint64_t)v93)
                {
                  LODWORD(v92) = 1;
                  goto LABEL_288;
                }
              }

              __break(1u);
LABEL_309:
              __break(1u);
LABEL_310:
              __break(1u);
              goto LABEL_311;
            }

            uint64_t v95 = 2 * v94;
            unsigned int v85 = *(unsigned __int16 *)(v34 + 2 * v92 + 32);
            unsigned int v96 = v91 + *(unsigned __int16 *)(v20 + v95) + v85 * *(unsigned __int16 *)(v90 + 2 * v93);
            unint64_t v91 = HIWORD(v96);
            *(_WORD *)(v20 + v95) = v96;
          }

          ++v92;
        }

        while (v84 != v92);
        if ((_DWORD)v91)
        {
          BOOL v88 = __OFADD__(v84, v93);
          uint64_t v97 = v84 + v93;
          if (v88) {
            goto LABEL_325;
          }
          if (v97 >= v79)
          {
LABEL_95:
            uint64_t v15 = v40;
            lazy protocol witness table accessor for type NSDecimal._CalculationError and conformance NSDecimal._CalculationError();
            uint64_t v102 = (void *)swift_allocError();
            *unint64_t v103 = 0;
            uint64_t v41 = v102;
            swift_willThrow();
            swift_bridgeObjectRelease();
            uint64_t v73 = (__int128 *)v275;
            uint64_t v40 = v256;
            goto LABEL_147;
          }

          if (v97 < 0) {
            goto LABEL_326;
          }
          *(_WORD *)(v20 + 2 * v97) = v91;
        }
      }

      while ((void *)v89 != v41);
      uint64_t v98 = *(void *)(v40 + 16);
      if (v98)
      {
        uint64_t v79 = v259;
        if (*(_WORD *)(v20 + 2 * v98 - 2))
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          unint64_t v34 = v40;
          uint64_t v20 = (uint64_t)v273;
        }

        else
        {
          uint64_t v99 = v98 + 14;
          uint64_t v20 = (uint64_t)v273;
          do
          {
            *(void *)(v40 + 16) = v99 - 15;
            if (v99 == 15) {
              break;
            }
          }

          while (!*(unsigned __int16 *)(v40 + 2 * v99--));
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          unint64_t v34 = v40;
        }

        uint64_t v40 = v256;
      }

      else
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        unint64_t v34 = v40;
        uint64_t v20 = (uint64_t)v273;
        uint64_t v40 = v256;
        uint64_t v79 = v259;
      }
    }

    else
    {
      swift_bridgeObjectRelease();
      unint64_t v34 = MEMORY[0x18961AFE8];
    }
  }

  while (v82 <= v77);
  rawValue = powerOfTen._rawValue;
  uint64_t v41 = v252;
LABEL_42:
  uint64_t v252 = v41;
  uint64_t v73 = (__int128 *)v275;
  if (v77 < 0) {
    goto LABEL_318;
  }
  if ((unint64_t)v77 >= rawValue[2])
  {
LABEL_319:
    __break(1u);
LABEL_320:
    __break(1u);
    goto LABEL_321;
  }

  uint64_t v83 = *(void *)(v34 + 16);
  if (!v83 || (v77 = rawValue[v77 + 4], (uint64_t v41 = *(void **)(v77 + 16)) == 0LL))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v87._rawValue = (void *)MEMORY[0x18961AFE8];
    goto LABEL_106;
  }

  uint64_t v84 = (uint64_t)v41 + v83;
  if (__OFADD__(v83, v41)) {
    goto LABEL_332;
  }
  if (v84 > 7)
  {
    uint64_t v84 = 8LL;
LABEL_119:
    swift_bridgeObjectRetain();
    uint64_t v15 = static Array._allocateBufferUninitialized(minimumCapacity:)();
    *(void *)(v15 + 16) = v84;
    bzero((void *)(v15 + 32), 2 * v84);
    goto LABEL_120;
  }

  if (v84 < 0)
  {
LABEL_353:
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    goto LABEL_354;
  }

  if (v84) {
    goto LABEL_119;
  }
  swift_bridgeObjectRetain();
  uint64_t v15 = MEMORY[0x18961AFE8];
LABEL_120:
  unint64_t v91 = 0LL;
  unint64_t v89 = v77 + 32;
  uint64_t v90 = v15 + 32;
  while (2)
  {
    LODWORD(v92) = 0;
    uint64_t v94 = 0LL;
    unint64_t v93 = v91 + 1;
LABEL_124:
    if (v83 == v94) {
      goto LABEL_266;
    }
    uint64_t v134 = v94 + v91;
    if (__OFADD__(v94, v91)) {
      goto LABEL_267;
    }
    if (v134 >= v84)
    {
      if ((_DWORD)v92) {
        goto LABEL_146;
      }
      LODWORD(v92) = *(unsigned __int16 *)(v89 + 2 * v91);
      if (*(_WORD *)(v89 + 2 * v91))
      {
        LODWORD(v92) = *(unsigned __int16 *)(v34 + 2 * v94 + 32);
        if (*(_WORD *)(v34 + 2 * v94 + 32)) {
          goto LABEL_146;
        }
      }

  __break(1u);
  return result;
}

LABEL_350:
                                  __break(1u);
                                  goto LABEL_351;
                                }

                                __break(1u);
                                goto LABEL_350;
                              }

LABEL_346:
                              __break(1u);
LABEL_347:
                              __break(1u);
                            }

                            unsigned int v169 = v143[4];
                            *(_DWORD *)uint64_t v279 = *v143;
                            *(_WORD *)&v279[4] = v157;
                            *(_WORD *)&v279[6] = v158;
                            *(void *)&v279[8] = *((void *)v143 + 1);
                            *(_DWORD *)&v279[16] = v169;
                            uint64_t v170 = _So9NSDecimala__exponent_getter(v279);
                            _So9NSDecimala__exponent_setter(v170, v73);
LABEL_7:
                            uint64_t v19 = v282;
                            uint64_t v20 = (unsigned __int16)v283;
                            uint64_t v21 = WORD1(v283);
                            uint64_t v22 = WORD2(v283);
                            uint64_t v23 = WORD3(v283);
                            unint64_t v14 = WORD4(v283);
                            a3 = WORD5(v283);
                            int v24 = WORD6(v283);
                            *(_DWORD *)uint64_t v279 = v282;
                            *(_OWORD *)&v279[4] = v283;
                            unsigned int v261 = HIWORD(v283);
                            int v25 = _So9NSDecimala__length_getter(v279);
                            unint64_t v26 = WORD3(v280);
                            LOWORD(v27) = WORD5(v280);
                            LOWORD(v28) = WORD6(v280);
                            LOWORD(v29) = HIWORD(v280);
                            __int16 v30 = v281;
                            LOWORD(v31) = HIWORD(v281);
                            if (!v25)
                            {
                              LODWORD(a2) = v280;
                              LOWORD(v14) = WORD2(v280);
                              LOWORD(a3) = WORD4(v280);
                              goto LABEL_306;
                            }

                            *(_OWORD *)uint64_t v279 = v280;
                            *(_DWORD *)&v279[16] = v281;
                            unint64_t v275 = WORD5(v280);
                            uint64_t v268 = HIWORD(v280);
                            uint64_t v271 = WORD6(v280);
                            LODWORD(v265) = (unsigned __int16)v281;
                            int v263 = HIWORD(v281);
                            uint64_t v255 = WORD2(v280);
                            uint64_t v258 = v280;
                            uint64_t v251 = WORD4(v280);
                            if (!_So9NSDecimala__length_getter(v279))
                            {
                              __int16 v30 = v24;
                              LODWORD(a2) = v19;
                              __int16 v101 = v14;
                              LOWORD(v14) = v20;
                              LOWORD(v26) = v21;
                              LOWORD(v29) = a3;
                              LOWORD(a3) = v22;
                              LOWORD(v27) = v23;
                              LOWORD(v28) = v101;
                              LOWORD(v31) = v261;
                              goto LABEL_306;
                            }

                            uint64_t v252 = v18;
                            *(_DWORD *)uint64_t v279 = v19;
                            *(_WORD *)&v279[4] = v20;
                            *(_WORD *)&v279[6] = v21;
                            *(_WORD *)&v279[8] = v22;
                            *(_WORD *)&v279[10] = v23;
                            *(_WORD *)&v279[12] = v14;
                            *(_WORD *)&v279[14] = a3;
                            *(_WORD *)&v279[16] = v24;
                            *(_WORD *)&v279[18] = v261;
                            LODWORD(v277) = v19;
                            WORD2(v277) = v20;
                            WORD3(v277) = v21;
                            WORD4(v277) = v22;
                            WORD5(v277) = v23;
                            WORD6(v277) = v14;
                            HIWORD(v277) = a3;
                            LOWORD(v278) = v24;
                            HIWORD(v278) = v261;
                            int v32 = v24;
                            int isNegative_getter = _So9NSDecimala__isNegative_getter(&v277);
                            LODWORD(v277) = v258;
                            WORD2(v277) = v255;
                            WORD3(v277) = v26;
                            WORD4(v277) = v251;
                            WORD5(v277) = v275;
                            WORD6(v277) = v271;
                            HIWORD(v277) = v268;
                            LOWORD(v278) = v265;
                            HIWORD(v278) = v263;
                            if (isNegative_getter == _So9NSDecimala__isNegative_getter(&v277))
                            {
                              LODWORD(v277) = v19;
                              WORD2(v277) = v20;
                              WORD3(v277) = v21;
                              WORD4(v277) = v22;
                              WORD5(v277) = v23;
                              WORD6(v277) = v14;
                              HIWORD(v277) = a3;
                              LOWORD(v278) = v32;
                              unint64_t v34 = v261;
                              HIWORD(v278) = v261;
                              uint64_t v35 = _So9NSDecimala__isNegative_getter(&v277);
                              _So9NSDecimala__isNegative_setter(v35, v279);
                              NSDecimal.asVariableLengthInteger()( v19 | (v20 << 32) | (v21 << 48),  v22 | (v23 << 16) | (v14 << 32) | (a3 << 48),  v32 | (v261 << 16));
                              uint64_t v37 = v36;
                              NSDecimal.asVariableLengthInteger()( v258 | (v255 << 32) | (v26 << 48),  v251 | (v275 << 16) | (v271 << 32) | (v268 << 48),  v265 | (v263 << 16));
                              uint64_t v15 = v38;
                              unint64_t v39 = *(void *)(v37 + 16);
                              uint64_t v40 = *(void *)(v38 + 16);
                              if (v40 >= v39) {
                                uint64_t v41 = *(void **)(v37 + 16);
                              }
                              else {
                                uint64_t v41 = *(void **)(v38 + 16);
                              }
                              uint64_t v42 = static Array._allocateBufferUninitialized(minimumCapacity:)();
                              *(void *)(v42 + 16) = 9LL;
                              *(void *)(v42 + 32) = 0LL;
                              *(void *)(v42 + 40) = 0LL;
                              *(_WORD *)(v42 + 48) = 0;
                              *(void *)&__int128 v277 = v42;
                              unint64_t v275 = (unint64_t)v41;
                              if (!v41)
                              {
                                unint64_t v34 = v42;
                                if (v39)
                                {
                                  uint64_t v132 = v40;
                                  uint64_t v133 = v252;
                                  unint64_t v275 = 0LL;
                                  goto LABEL_227;
                                }

                                unint64_t v275 = 0LL;
                                uint64_t v41 = v252;
                                if (v40)
                                {
LABEL_231:
                                  *(void *)&__int128 v277 = v34;
                                  unint64_t v202 = v275 + 16;
                                  do
                                  {
                                    specialized Array._checkSubscript(_:wasNativeTypeChecked:)(v202 - 16, 1LL, v15);
                                    __int16 v203 = *(_WORD *)(v15 + 2 * v202);
                                    specialized Array._makeMutableAndUnique()();
                                    uint64_t v204 = v277;
                                    unint64_t v205 = specialized Array._checkSubscript_mutating(_:)(v202 - 16, v277);
                                    *(_WORD *)(v204 + 2 * v202) = v203;
                                    destructiveProjectEnumData for PredicateCodableError(v205, v206);
                                    unint64_t v207 = v202 + 1;
                                    uint64_t v208 = v202 - 15;
                                    ++v202;
                                  }

                                  while (v208 < v40);
                                  unint64_t v275 = v207 - 16;
                                }

                                goto LABEL_234;
                              }

                              if (*(void *)(v37 + 16))
                              {
                                uint64_t v41 = v252;
                                if (*(void *)(v15 + 16))
                                {
                                  uint64_t v43 = v37 + 32;
                                  unsigned int v44 = *(unsigned __int16 *)(v15 + 32) + *(unsigned __int16 *)(v37 + 32);
                                  uint64_t MutableAnd = specialized Array._makeMutableAndUnique()();
                                  destructiveProjectEnumData for PredicateCodableError(MutableAnd, v46);
                                  uint64_t v47 = specialized Array._makeMutableAndUnique()();
                                  destructiveProjectEnumData for PredicateCodableError(v47, v48);
                                  unsigned int v49 = HIWORD(v44);
                                  specialized Array._makeMutableAndUnique()();
                                  uint64_t v50 = v277;
                                  unint64_t v51 = specialized Array._checkSubscript_mutating(_:)(0LL, v277);
                                  *(_WORD *)(v50 + 32) = v44;
                                  destructiveProjectEnumData for PredicateCodableError(v51, v52);
                                  if (v275 >= 2)
                                  {
                                    uint64_t v53 = 17LL;
                                    do
                                    {
                                      specialized Array._checkSubscript(_:wasNativeTypeChecked:)(v53 - 16, 1LL, v37);
                                      int v54 = *(unsigned __int16 *)(v37 + 2 * v53);
                                      specialized Array._checkSubscript(_:wasNativeTypeChecked:)(v53 - 16, 1LL, v15);
                                      unsigned int v44 = v49 + v54 + *(unsigned __int16 *)(v15 + 2 * v53);
                                      unsigned int v49 = HIWORD(v44);
                                      specialized Array._makeMutableAndUnique()();
                                      uint64_t v55 = v277;
                                      unint64_t v56 = specialized Array._checkSubscript_mutating(_:)(v53 - 16, v277);
                                      *(_WORD *)(v55 + 2 * v53) = v44;
                                      destructiveProjectEnumData for PredicateCodableError(v56, v57);
                                      ++v53;
                                    }

                                    while (1 - v275 + v53 != 17);
                                    uint64_t v41 = v252;
                                    uint64_t v43 = v37 + 32;
                                  }

                                  if (v39 > v40)
                                  {
                                    if (v44 < 0x10000) {
                                      goto LABEL_225;
                                    }
                                    specialized Array._checkSubscript(_:wasNativeTypeChecked:)(v275, 1LL, v37);
                                    int v58 = *(unsigned __int16 *)(v43 + 2 * v275);
                                    uint64_t v59 = specialized Array._makeMutableAndUnique()();
                                    destructiveProjectEnumData for PredicateCodableError(v59, v60);
                                    uint64_t v61 = specialized Array._makeMutableAndUnique()();
                                    destructiveProjectEnumData for PredicateCodableError(v61, v62);
                                    unsigned int v63 = v58 + 1;
                                    specialized Array._makeMutableAndUnique()();
                                    uint64_t v64 = v277;
                                    unint64_t v65 = specialized Array._checkSubscript_mutating(_:)(v275, v277);
                                    *(_WORD *)(v64 + 2 * v275 + 32) = v58 + 1;
                                    destructiveProjectEnumData for PredicateCodableError(v65, v66);
                                    if (v275 + 1 < v39)
                                    {
                                      uint64_t v272 = v40;
                                      unint64_t v67 = v275 + 17;
                                      while (1)
                                      {
                                        unint64_t v275 = v67 - 16;
                                        if (v58 != 0xFFFF) {
                                          break;
                                        }
                                        specialized Array._checkSubscript(_:wasNativeTypeChecked:)(v275, 1LL, v37);
                                        int v58 = *(unsigned __int16 *)(v37 + 2 * v67);
                                        unsigned int v63 = v58 + 1;
                                        specialized Array._makeMutableAndUnique()();
                                        uint64_t v68 = v277;
                                        unint64_t v69 = specialized Array._checkSubscript_mutating(_:)(v275, v277);
                                        *(_WORD *)(v68 + 2 * v67) = v58 + 1;
                                        destructiveProjectEnumData for PredicateCodableError(v69, v70);
                                        ++v67;
                                        if (1 - v39 + v67 == 17)
                                        {
                                          uint64_t v40 = v272;
                                          goto LABEL_202;
                                        }
                                      }

                                      uint64_t v40 = v272;
LABEL_225:
                                      uint64_t v132 = v40;
                                      unint64_t v34 = v277;
                                      uint64_t v133 = v41;
                                      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
                                        unint64_t v34 = (unint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v34);
                                      }
LABEL_227:
                                      *(void *)&__int128 v277 = v34;
                                      unint64_t v195 = v275 + 16;
                                      do
                                      {
                                        specialized Array._checkSubscript(_:wasNativeTypeChecked:)(v195 - 16, 1LL, v37);
                                        __int16 v196 = *(_WORD *)(v37 + 2 * v195);
                                        specialized Array._makeMutableAndUnique()();
                                        uint64_t v197 = v277;
                                        unint64_t v198 = specialized Array._checkSubscript_mutating(_:)(v195 - 16, v277);
                                        *(_WORD *)(v197 + 2 * v195) = v196;
                                        destructiveProjectEnumData for PredicateCodableError(v198, v199);
                                        unint64_t v200 = v195 + 1;
                                        int64_t v201 = v195 - 15;
                                        ++v195;
                                      }

                                      while (v201 < (uint64_t)v39);
                                      unint64_t v275 = v200 - 16;
                                      uint64_t v41 = v133;
                                      uint64_t v40 = v132;
                                      if ((uint64_t)(v200 - 16) < v132)
                                      {
LABEL_230:
                                        unint64_t v34 = v277;
                                        if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0) {
                                          goto LABEL_231;
                                        }
LABEL_342:
                                        unint64_t v34 = (unint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v34);
                                        goto LABEL_231;
                                      }

                    outlined release of AttributedString.Runs((uint64_t)v413);
LABEL_347:
                    uint64_t v268 = v341[8];
                    unsigned __int16 v267 = v341[9];
                    uint64_t v269 = v341[10];
                    unsigned __int16 v270 = v341[11];
                    swift_unknownObjectRetain();
                    specialized Rope.subscript.getter(v338, v309, v310, v268, v267, v269, v270);
                    __int16 v8 = v271;
                    swift_unknownObjectRelease();
                    if (one-time initialization token for name == -1)
                    {
                      if (!*(void *)(v8 + 16))
                      {
LABEL_395:
                        uint64_t v384 = 0LL;
                        v382 = 0u;
                        v383 = 0u;
                        uint64_t v380 = 0u;
                        v381 = 0u;
                        goto LABEL_396;
                      }

LABEL_345:
                                        __break(1u);
                                        goto LABEL_346;
                                      }

                                      __break(1u);
                                      goto LABEL_345;
                                    }

                                    unint64_t v39 = v275 + 1;
LABEL_202:
                                    unsigned int v49 = HIWORD(v63);
                                    unint64_t v275 = v39;
                                  }

                                  if ((uint64_t)v275 < v40)
                                  {
                                    if (!v49) {
                                      goto LABEL_230;
                                    }
                                    specialized Array._checkSubscript(_:wasNativeTypeChecked:)(v275, 1LL, v15);
                                    int v171 = *(unsigned __int16 *)(v15 + 32 + 2 * v275);
                                    uint64_t v172 = specialized Array._makeMutableAndUnique()();
                                    destructiveProjectEnumData for PredicateCodableError(v172, v173);
                                    uint64_t v174 = specialized Array._makeMutableAndUnique()();
                                    destructiveProjectEnumData for PredicateCodableError(v174, v175);
                                    unsigned int v176 = v171 + 1;
                                    specialized Array._makeMutableAndUnique()();
                                    uint64_t v177 = v277;
                                    unint64_t v178 = specialized Array._checkSubscript_mutating(_:)(v275, v277);
                                    *(_WORD *)(v177 + 2 * v275 + 32) = v171 + 1;
                                    destructiveProjectEnumData for PredicateCodableError(v178, v179);
                                    unint64_t v180 = v275 + 1;
                                    if ((uint64_t)(v275 + 1) < v40)
                                    {
                                      unint64_t v181 = v275 + 17;
                                      do
                                      {
                                        unint64_t v275 = v181 - 16;
                                        if (v171 != 0xFFFF) {
                                          goto LABEL_230;
                                        }
                                        specialized Array._checkSubscript(_:wasNativeTypeChecked:)(v275, 1LL, v15);
                                        int v171 = *(unsigned __int16 *)(v15 + 2 * v181);
                                        unsigned int v176 = v171 + 1;
                                        specialized Array._makeMutableAndUnique()();
                                        uint64_t v182 = v277;
                                        unint64_t v183 = specialized Array._checkSubscript_mutating(_:)(v275, v277);
                                        *(_WORD *)(v182 + 2 * v181) = v171 + 1;
                                        destructiveProjectEnumData for PredicateCodableError(v183, v184);
                                        ++v181;
                                      }

                                      while (1 - v40 + v181 != 17);
                                      unint64_t v180 = v40;
                                    }

                                    unsigned int v49 = HIWORD(v176);
                                    unint64_t v275 = v180;
                                  }

                                  if (v49)
                                  {
                                    if (v275 >= 0xA) {
                                      goto LABEL_355;
                                    }
                                    specialized Array._makeMutableAndUnique()();
                                    uint64_t v185 = v277;
                                    unint64_t v186 = specialized Array._checkSubscript_mutating(_:)(v275, v277);
                                    *(_WORD *)(v185 + 2 * v275 + 32) = 1;
                                    destructiveProjectEnumData for PredicateCodableError(v186, v187);
                                    ++v275;
                                  }

                                  goto LABEL_234;
                                }

        __break(1u);
LABEL_346:
        __break(1u);
LABEL_347:
        __break(1u);
        goto LABEL_348;
      }

      uint64_t v19 = v27;
LABEL_19:
      if (v19) {
        goto LABEL_370;
      }
      goto LABEL_20;
    }
  }

  unint64_t v14 = swift_unknownObjectRetain_n();
  uint64_t v15 = v11;
  int v16 = specialized Rope._endPath.getter(v14);
  uint64_t result = (void *)swift_unknownObjectRelease();
  __int16 v18 = 0LL;
  uint64_t v19 = 0LL;
  if (!v5) {
    goto LABEL_51;
  }
LABEL_13:
  swift_unknownObjectRetain();
  uint64_t v175 = specialized Rope._Node.distanceFromStart<A>(to:in:)(v12, v16, (uint64_t)v18, v5, v15);
  uint64_t result = (void *)swift_unknownObjectRelease_n();
  uint64_t v20 = __OFSUB__(v8, v19);
  uint64_t v21 = v8 - v19;
  if (v20)
  {
LABEL_53:
    __break(1u);
    goto LABEL_54;
  }

  while (1)
  {
    while (1)
    {
      uint64_t v177 = v16;
      unsigned __int16 v11 = *v6;
      if (v8 != v9)
      {
        if (v11) {
          unsigned int v44 = v10[10];
        }
        else {
          unsigned int v44 = 0LL;
        }
        uint64_t v45 = v177;
        goto LABEL_108;
      }

      if (!v11)
      {
        if (v8 > 0) {
          goto LABEL_378;
        }
        __int16 v9 = 0LL;
        goto LABEL_106;
      }

      uint64_t v38 = v10[10];
      if (v38 < v8) {
        goto LABEL_367;
      }
      unint64_t v39 = v10[9];
      uint64_t v40 = v10[11];
      uint64_t v22 = *(unsigned __int8 *)(v11 + 18);
      uint64_t v41 = !*(_WORD *)(v11 + 16) || v38 <= v8;
      uint64_t v179 = v39;
      uint64_t v172 = v40;
      if (v41) {
        break;
      }
      if (!*(_BYTE *)(v11 + 18))
      {
        uint64_t result = (void *)swift_unknownObjectRetain_n();
        uint64_t v22 = 0LL;
        __int16 v9 = v8;
        uint64_t v43 = v11;
LABEL_91:
        unint64_t v51 = *(unsigned __int16 *)(v43 + 16);
        if (*(_WORD *)(v43 + 16))
        {
          uint64_t v52 = *(void *)(v43 + 24);
          uint64_t v20 = __OFSUB__(v9, v52);
          uint64_t v53 = v9 - v52;
          if (v20) {
            goto LABEL_382;
          }
          if (__OFADD__(v53, 1LL)) {
            goto LABEL_383;
          }
          if (v53 + 1 <= 0)
          {
            unint64_t v51 = 0LL;
          }

          else
          {
            if ((_DWORD)v51 == 1)
            {
              __int16 v9 = v53;
              goto LABEL_103;
            }

            int v54 = (uint64_t *)(v43 + 48);
            uint64_t v55 = 1LL;
            while (1)
            {
              unint64_t v56 = *v54;
              v54 += 3;
              __int16 v9 = v53 - v56;
              if (__OFSUB__(v53, v56)) {
                goto LABEL_362;
              }
              if (__OFADD__(v9, 1LL)) {
                goto LABEL_363;
              }
              if (v9 + 1 < 1) {
                break;
              }
              ++v55;
              uint64_t v53 = v9;
              if (v51 == v55) {
                goto LABEL_103;
              }
            }

            unint64_t v51 = v55;
            __int16 v9 = v53;
          }

        __break(1u);
LABEL_346:
        __break(1u);
LABEL_347:
        __break(1u);
        goto LABEL_348;
      }

      uint64_t v19 = v27;
LABEL_19:
      if (v19) {
        goto LABEL_370;
      }
      goto LABEL_20;
    }
  }

  unint64_t v14 = swift_unknownObjectRetain_n();
  uint64_t v15 = v11;
  int v16 = specialized Rope._endPath.getter(v14);
  uint64_t result = (void *)swift_unknownObjectRelease();
  __int16 v18 = 0LL;
  uint64_t v19 = 0LL;
  if (!v5) {
    goto LABEL_51;
  }
LABEL_13:
  swift_unknownObjectRetain();
  uint64_t v174 = specialized Rope._Node.distanceFromStart<A>(to:in:)(v12, v16, (uint64_t)v18, v5, v15);
  uint64_t result = (void *)swift_unknownObjectRelease_n();
  uint64_t v20 = __OFSUB__(v8, v19);
  uint64_t v21 = v8 - v19;
  if (v20)
  {
LABEL_53:
    __break(1u);
    goto LABEL_54;
  }

  while (1)
  {
    while (1)
    {
      unsigned int v176 = v16;
      unsigned __int16 v11 = *v6;
      if (v8 != v9)
      {
        if (v11) {
          unsigned int v44 = v10[10];
        }
        else {
          unsigned int v44 = 0LL;
        }
        uint64_t v45 = v176;
        goto LABEL_108;
      }

      if (!v11)
      {
        if (v8 > 0) {
          goto LABEL_378;
        }
        __int16 v9 = 0LL;
        goto LABEL_106;
      }

      uint64_t v38 = v10[10];
      if (v38 < v8) {
        goto LABEL_367;
      }
      unint64_t v39 = v10[9];
      uint64_t v40 = v10[11];
      uint64_t v22 = *(unsigned __int8 *)(v11 + 18);
      uint64_t v41 = !*(_WORD *)(v11 + 16) || v38 <= v8;
      unint64_t v178 = v39;
      int v171 = v40;
      if (v41) {
        break;
      }
      if (!*(_BYTE *)(v11 + 18))
      {
        uint64_t result = (void *)swift_unknownObjectRetain_n();
        uint64_t v22 = 0LL;
        __int16 v9 = v8;
        uint64_t v43 = v11;
LABEL_91:
        unint64_t v51 = *(unsigned __int16 *)(v43 + 16);
        if (*(_WORD *)(v43 + 16))
        {
          uint64_t v52 = *(void *)(v43 + 24);
          uint64_t v20 = __OFSUB__(v9, v52);
          uint64_t v53 = v9 - v52;
          if (v20) {
            goto LABEL_382;
          }
          if (__OFADD__(v53, 1LL)) {
            goto LABEL_383;
          }
          if (v53 + 1 <= 0)
          {
            unint64_t v51 = 0LL;
          }

          else
          {
            if ((_DWORD)v51 == 1)
            {
              __int16 v9 = v53;
              goto LABEL_103;
            }

            int v54 = (uint64_t *)(v43 + 48);
            uint64_t v55 = 1LL;
            while (1)
            {
              unint64_t v56 = *v54;
              v54 += 3;
              __int16 v9 = v53 - v56;
              if (__OFSUB__(v53, v56)) {
                goto LABEL_362;
              }
              if (__OFADD__(v9, 1LL)) {
                goto LABEL_363;
              }
              if (v9 + 1 < 1) {
                break;
              }
              ++v55;
              uint64_t v53 = v9;
              if (v51 == v55) {
                goto LABEL_103;
              }
            }

            unint64_t v51 = v55;
            __int16 v9 = v53;
          }

LABEL_331:
                                __break(1u);
LABEL_332:
                                __break(1u);
LABEL_333:
                                __break(1u);
LABEL_334:
                                __break(1u);
LABEL_335:
                                __break(1u);
LABEL_336:
                                __break(1u);
LABEL_337:
                                __break(1u);
                                goto LABEL_338;
                              }

LABEL_330:
                              __break(1u);
                              goto LABEL_331;
                            }

                            __int16 v244 = v14;
                            uint64_t v104 = v21;
                            unint64_t v105 = v19 | (v20 << 32) | (v21 << 48);
                            __int16 v242 = v23;
                            uint64_t v243 = a3;
                            int v106 = v22;
                            unint64_t v249 = v22 | (v23 << 16) | (v14 << 32) | (a3 << 48);
                            unint64_t v250 = v105;
                            unsigned int v248 = v32 | (v261 << 16);
                            NSDecimal.asVariableLengthInteger()(v105, v249, v248);
                            uint64_t v108 = v107;
                            __int16 v109 = v26;
                            unint64_t v246 = v251 | (v275 << 16) | (v271 << 32) | (v268 << 48);
                            unint64_t v247 = v258 | (v255 << 32) | (v26 << 48);
                            unsigned int v245 = v265 | (v263 << 16);
                            NSDecimal.asVariableLengthInteger()(v247, v246, v245);
                            uint64_t v111 = v110;
                            unint64_t v112 = *(void *)(v108 + 16);
                            unint64_t v113 = *(void *)(v110 + 16);
                            if (v113 < v112)
                            {
                              __int16 v241 = v32;
                              int v240 = v19;
                              uint64_t v79 = v104;
                              LODWORD(v77) = v106;
                              uint64_t v41 = v252;
                              goto LABEL_98;
                            }

                            if (v112 < v113)
                            {
                              __int16 v124 = v109;
                              goto LABEL_113;
                            }

                            __int16 v241 = v32;
                            if (v112)
                            {
                              int v240 = v19;
                              specialized Array._checkSubscript(_:wasNativeTypeChecked:)(v112 - 1, 1LL, v108);
                              unsigned int v149 = *(unsigned __int16 *)(v108 + 2 * (v112 - 1) + 32);
                              specialized Array._checkSubscript(_:wasNativeTypeChecked:)(v112 - 1, 1LL, v111);
                              unsigned int v150 = *(unsigned __int16 *)(v111 + 2 * (v112 - 1) + 32);
                              if (v150 >= v149)
                              {
                                __int16 v124 = v109;
                                if (v149 < v150)
                                {
LABEL_113:
                                  swift_bridgeObjectRelease();
                                  swift_bridgeObjectRelease();
                                  NSDecimal.asVariableLengthInteger()(v247, v246, v245);
                                  uint64_t v126 = v125;
                                  NSDecimal.asVariableLengthInteger()(v250, v249, v248);
                                  uint64_t v128 = specialized static NSDecimal._integerSubtract(term:subtrahend:maxResultLength:)( v126,  v127,  8LL);
                                  swift_bridgeObjectRelease();
                                  swift_bridgeObjectRelease();
                                  unint64_t v129 = specialized Array._getCount()(v128);
                                  if ((v129 & 0x8000000000000000LL) != 0 || HIDWORD(v129)) {
                                    goto LABEL_354;
                                  }
                                  _So9NSDecimala__length_setter(v129, v279);
                                  LODWORD(v277) = v258;
                                  WORD2(v277) = v255;
                                  WORD3(v277) = v124;
                                  WORD4(v277) = v251;
                                  WORD5(v277) = v275;
                                  WORD6(v277) = v271;
                                  HIWORD(v277) = v268;
                                  LOWORD(v278) = v265;
                                  HIWORD(v278) = v263;
                                  uint64_t v130 = _So9NSDecimala__isNegative_getter(&v277);
                                  _So9NSDecimala__isNegative_setter(v130, v279);
                                  NSDecimal.copyVariableLengthInteger(_:)((Swift::OpaquePointer)v128);
                                  __int16 v18 = v131;
                                  goto LABEL_304;
                                }

                                uint64_t v41 = v252;
                                uint64_t v79 = v104;
                                while (1)
                                {
                                  if (v112 == 1) {
                                    goto LABEL_321;
                                  }
                                  unint64_t v191 = v112 - 2;
                                  specialized Array._checkSubscript(_:wasNativeTypeChecked:)(v112 - 2, 1LL, v108);
                                  uint64_t v192 = 2 * v112;
                                  unsigned int v193 = *(unsigned __int16 *)(v108 + v192 + 28);
                                  specialized Array._checkSubscript(_:wasNativeTypeChecked:)(v191, 1LL, v111);
                                  unsigned int v194 = *(unsigned __int16 *)(v111 + v192 + 28);
                                  if (v194 < v193) {
                                    break;
                                  }
                                  unint64_t v112 = v191 + 1;
                                  if (v193 < v194) {
                                    goto LABEL_113;
                                  }
                                }

                                LODWORD(v77) = v106;
                              }

                              else
                              {
                                LODWORD(v77) = v106;
                                uint64_t v41 = v252;
                                uint64_t v79 = v104;
                              }

              v344 = 0LL;
              unint64_t v346 = 0LL;
              uint64_t v347 = 0;
              goto LABEL_331;
            }

            uint64_t v464 = (uint64_t *)v66;
            uint64_t v473 = v62 + 64;
            id v351 = 1LL << *(_BYTE *)(v62 + 32);
            v352 = -1LL;
            if (v351 < 64) {
              v352 = ~(-1LL << v351);
            }
            id v353 = v352 & *(void *)(v62 + 64);
            v354 = (unint64_t)(v351 + 63) >> 6;
            id v454 = v354 - 1;
            uint64_t result = swift_bridgeObjectRetain();
            uint64_t v5 = 0LL;
            uint64_t v483 = v354;
            uint64_t v460 = v354 - 5;
            while (!v353)
            {
              id v360 = v5 + 1;
              if (__OFADD__(v5, 1LL)) {
                goto LABEL_587;
              }
              if (v360 < v483)
              {
                v361 = *(void *)(v473 + 8 * v360);
                if (v361) {
                  goto LABEL_362;
                }
                if (v5 + 2 >= v483)
                {
                  ++v5;
                }

                else
                {
                  v361 = *(void *)(v473 + 8 * (v5 + 2));
                  if (v361)
                  {
                    id v360 = v5 + 2;
                    goto LABEL_362;
                  }

                  if (v5 + 3 >= v483)
                  {
                    v5 += 2LL;
                  }

                  else
                  {
                    v361 = *(void *)(v473 + 8 * (v5 + 3));
                    if (v361)
                    {
                      id v360 = v5 + 3;
LABEL_362:
                      id v353 = (v361 - 1) & v361;
                      v356 = __clz(__rbit64(v361)) + (v360 << 6);
                      uint64_t v5 = v360;
LABEL_358:
                      v357 = *(void *)(v62 + 56);
                      id v358 = (void *)(*(void *)(v62 + 48) + 16 * v356);
                      v359 = v358[1];
                      *(void *)&Swift::String v508 = *v358;
                      *((void *)&v508 + 1) = v359;
                      outlined init with copy of AttributedString._AttributeValue(v357 + 72 * v356, (uint64_t)&v509);
                      swift_bridgeObjectRetain();
                      goto LABEL_368;
                    }

                    id v360 = v5 + 4;
                    if (v5 + 4 >= v483)
                    {
                      v5 += 3LL;
                    }

                    else
                    {
                      v361 = *(void *)(v473 + 8 * v360);
                      if (v361) {
                        goto LABEL_362;
                      }
                      while (v460 != v5)
                      {
                        v361 = *(void *)(v62 + 104 + 8 * v5++);
                        if (v361)
                        {
                          id v360 = v5 + 4;
                          goto LABEL_362;
                        }
                      }

                      uint64_t v5 = v454;
                    }
                  }
                }
              }

              id v353 = 0LL;
              uint64_t v511 = 0u;
              memset(v512, 0, sizeof(v512));
              uint64_t v509 = 0u;
              Swift::String v510 = 0u;
              Swift::String v508 = 0u;
LABEL_368:
              outlined init with take of (key: String, value: AttributedString._AttributeValue)?( (uint64_t)&v508,  (uint64_t)&v525);
              v362 = *((void *)&v525 + 1);
              if (!*((void *)&v525 + 1))
              {
                swift_release();
                id v368 = *(void *)(v496 + 64);
                v369 = 1LL << *(_BYTE *)(v496 + 32);
                uint64_t result = swift_bridgeObjectRelease();
                v370 = 0LL;
                v371 = -1LL;
                if (v369 < 64) {
                  v371 = ~(-1LL << v369);
                }
                uint64_t v5 = v371 & v368;
                Swift::String v372 = (unint64_t)(v369 + 63) >> 6;
                v456 = v372 - 1;
                v474 = v496 + 64;
                uint64_t v484 = v372;
                Swift::Int v469 = v372 - 5;
                while (!v5)
                {
                  while (1)
                  {
                    uint64_t v378 = v370 + 1;
                    if (__OFADD__(v370, 1LL)) {
                      goto LABEL_593;
                    }
                    if (v378 < v484)
                    {
                      uint64_t v379 = *(void *)(v474 + 8 * v378);
                      if (v379) {
                        goto LABEL_399;
                      }
                      if ((uint64_t)(v370 + 2) >= v484)
                      {
                        ++v370;
                      }

                      else
                      {
                        uint64_t v379 = *(void *)(v474 + 8 * (v370 + 2));
                        if (v379)
                        {
                          uint64_t v378 = v370 + 2;
                          goto LABEL_399;
                        }

                        if ((uint64_t)(v370 + 3) >= v484)
                        {
                          v370 += 2LL;
                        }

                        else
                        {
                          uint64_t v379 = *(void *)(v474 + 8 * (v370 + 3));
                          if (v379)
                          {
                            uint64_t v378 = v370 + 3;
LABEL_399:
                            uint64_t v5 = (v379 - 1) & v379;
                            v374 = __clz(__rbit64(v379)) + (v378 << 6);
                            v370 = v378;
LABEL_395:
                            v375 = *(void *)(v496 + 56);
                            id v376 = (void *)(*(void *)(v496 + 48) + 16 * v374);
                            id v377 = v376[1];
                            *(void *)&Swift::String v508 = *v376;
                            *((void *)&v508 + 1) = v377;
                            outlined init with copy of AttributedString._AttributeValue( v375 + 72 * v374,  (uint64_t)&v509);
                            swift_bridgeObjectRetain();
                            goto LABEL_405;
                          }

                          uint64_t v378 = v370 + 4;
                          if ((uint64_t)(v370 + 4) >= v484)
                          {
                            v370 += 3LL;
                          }

                          else
                          {
                            uint64_t v379 = *(void *)(v474 + 8 * v378);
                            if (v379) {
                              goto LABEL_399;
                            }
                            while (v469 != v370)
                            {
                              uint64_t v379 = *(void *)(v496 + 104 + 8 * v370++);
                              if (v379)
                              {
                                uint64_t v378 = v370 + 4;
                                goto LABEL_399;
                              }
                            }

                            v370 = v456;
                          }
                        }
                      }
                    }

                    uint64_t v5 = 0LL;
                    uint64_t v511 = 0u;
                    memset(v512, 0, sizeof(v512));
                    uint64_t v509 = 0u;
                    Swift::String v510 = 0u;
                    Swift::String v508 = 0u;
LABEL_405:
                    outlined init with take of (key: String, value: AttributedString._AttributeValue)?( (uint64_t)&v508,  (uint64_t)&v525);
                    uint64_t v110 = *((void *)&v525 + 1);
                    if (!*((void *)&v525 + 1))
                    {
                      swift_release();
                      swift_bridgeObjectRelease();
                      swift_bridgeObjectRelease();
                      uint64_t v306 = 0LL;
                      goto LABEL_310;
                    }

                    uint64_t v380 = v525;
                    *(_OWORD *)v523 = v528;
                    *(_OWORD *)&v523[16] = v529;
                    v524 = v530;
                    v521 = v526;
                    v522 = v527;
                    v381 = *((void *)&v528 + 1);
                    v382 = v529;
                    if ((void)v529 == 1LL) {
                      break;
                    }
                    Swift::String v508 = *(_OWORD *)&v523[8];
                    v518 = 0uLL;
                    outlined copy of AttributedString.AttributeRunBoundaries?( *(uint64_t *)&v523[8],  *(uint64_t *)&v523[16]);
                    outlined copy of AttributedString.AttributeRunBoundaries?(v381, v382);
                    v383 = specialized static AttributedString.AttributeRunBoundaries.== infix(_:_:)(&v508, &v518);
                    swift_bridgeObjectRelease();
                    outlined consume of AttributedString.AttributeRunBoundaries?(v381, v382);
                    if ((v383 & 1) == 0) {
                      goto LABEL_392;
                    }
                    specialized Dictionary.subscript.getter(v380, v110, v62, (uint64_t)&v518);
                    swift_bridgeObjectRelease();
                    outlined init with copy of AttributedString._AttributeValue((uint64_t)&v521, (uint64_t)v517);
                    outlined init with copy of AttributedString._AttributeValue?((uint64_t)&v518, (uint64_t)&v508);
                    outlined init with copy of AttributedString._AttributeValue?((uint64_t)v517, (uint64_t)&v512[8]);
                    if (*((void *)&v509 + 1))
                    {
                      outlined init with copy of AttributedString._AttributeValue?((uint64_t)&v508, (uint64_t)v507);
                      if (!*((void *)&v513 + 1)) {
                        goto LABEL_536;
                      }
                      uint64_t v504 = v514;
                      id v505 = v515;
                      uint64_t v506 = v516;
                      char v502 = *(_OWORD *)&v512[8];
                      Swift::String v503 = v513;
                      uint64_t v384 = specialized static AttributedString._AttributeValue.== infix(_:_:)( (uint64_t)v507,  (uint64_t)&v502);
                      outlined destroy of AttributedString._AttributeValue((uint64_t)v507);
                      outlined destroy of AttributedString._AttributeValue((uint64_t)&v502);
                      outlined destroy of Any?( (uint64_t)&v508,  &demangling cache variable for type metadata for AttributedString._AttributeValue?);
                      outlined destroy of Any?( (uint64_t)v517,  &demangling cache variable for type metadata for AttributedString._AttributeValue?);
                      outlined destroy of Any?( (uint64_t)&v518,  &demangling cache variable for type metadata for AttributedString._AttributeValue?);
                      if ((v384 & 1) == 0) {
                        goto LABEL_538;
                      }
                    }

                    else
                    {
                      if (*((void *)&v513 + 1)) {
                        goto LABEL_537;
                      }
                      outlined destroy of Any?( (uint64_t)&v508,  &demangling cache variable for type metadata for AttributedString._AttributeValue?);
                      outlined destroy of Any?( (uint64_t)v517,  &demangling cache variable for type metadata for AttributedString._AttributeValue?);
                      outlined destroy of Any?( (uint64_t)&v518,  &demangling cache variable for type metadata for AttributedString._AttributeValue?);
                    }

                    uint64_t result = outlined destroy of AttributedString._AttributeValue((uint64_t)&v521);
                    if (v5) {
                      goto LABEL_394;
                    }
                  }

                  outlined consume of AttributedString.AttributeRunBoundaries?(*(uint64_t *)&v523[8], 1LL);
                  outlined consume of AttributedString.AttributeRunBoundaries?(0LL, 0LL);
LABEL_392:
                  swift_bridgeObjectRelease();
                  uint64_t result = outlined destroy of AttributedString._AttributeValue((uint64_t)&v521);
                }

            __break(1u);
LABEL_331:
            __break(1u);
LABEL_332:
            __break(1u);
LABEL_333:
            __break(1u);
LABEL_334:
            __break(1u);
LABEL_335:
            __break(1u);
LABEL_336:
            __break(1u);
LABEL_337:
            __break(1u);
LABEL_338:
            __break(1u);
LABEL_339:
            __break(1u);
LABEL_340:
            __break(1u);
LABEL_341:
            __break(1u);
LABEL_342:
            __break(1u);
            goto LABEL_343;
          }

          __int16 v9 = v94;
          uint64_t v97 = 1LL;
        }

LABEL_301:
                              swift_bridgeObjectRelease();
                              swift_bridgeObjectRelease();
                              unint64_t v236 = *(void *)(v84 + 16);
                              if (HIDWORD(v236)) {
                                goto LABEL_354;
                              }
                              _So9NSDecimala__length_setter(v236, v279);
                              LODWORD(v277) = v240;
                              WORD2(v277) = v20;
                              WORD3(v277) = v79;
                              WORD4(v277) = v77;
                              WORD5(v277) = v242;
                              WORD6(v277) = v83;
                              HIWORD(v277) = v15;
                              LOWORD(v278) = v241;
                              HIWORD(v278) = v261;
                              uint64_t v237 = _So9NSDecimala__isNegative_getter(&v277);
                              _So9NSDecimala__isNegative_setter(v237, v279);
                              goto LABEL_303;
                            }

                          uint64_t v259 = (v262 - 1) & v262;
                          unsigned int v261 = __clz(__rbit64(v262)) + (v255 << 6);
                        }

                        unint64_t v264 = (unint64_t *)(*(void *)(v254 + 48) + 16 * v261);
                        unsigned __int16 v266 = *v264;
                        unint64_t v265 = v264[1];
                        uint64_t v2 = *(void *)(*(void *)(v254 + 56) + 8 * v261);
                        uint64_t result = specialized Array._getCount()(v2);
                        if (result)
                        {
                          unsigned __int16 v267 = result;
                          if (result < 1) {
                            goto LABEL_376;
                          }
                          swift_bridgeObjectRetain();
                          swift_bridgeObjectRetain();
                          uint64_t v268 = (uint64_t *)(v2 + 40);
                          do
                          {
                            AttributedString.Guts.removeAttributeValue(forKey:in:adjustConstrainedAttributes:)( v266,  v265,  *(v268 - 1),  *v268,  0);
                            v268 += 2;
                            --v267;
                          }

                          while (v267);
                          swift_bridgeObjectRelease();
                          uint64_t result = swift_bridgeObjectRelease();
                        }
                      }
                    }

                          unsigned __int16 v262 = (v265 - 1) & v265;
                          unint64_t v264 = __clz(__rbit64(v265)) + (v258 << 6);
                        }

                        unsigned __int16 v267 = (unint64_t *)(*(void *)(v257 + 48) + 16 * v264);
                        uint64_t v269 = *v267;
                        uint64_t v268 = v267[1];
                        int v3 = *(void *)(*(void *)(v257 + 56) + 8 * v264);
                        uint64_t result = specialized Array._getCount()(v3);
                        if (result)
                        {
                          unsigned __int16 v270 = result;
                          if (result < 1) {
                            goto LABEL_375;
                          }
                          swift_bridgeObjectRetain();
                          swift_bridgeObjectRetain();
                          uint64_t v271 = (uint64_t *)(v3 + 40);
                          do
                          {
                            AttributedString.Guts.removeAttributeValue(forKey:in:adjustConstrainedAttributes:)( v269,  v268,  *(v271 - 1),  *v271,  0);
                            v271 += 2;
                            --v270;
                          }

                          while (v270);
                          swift_bridgeObjectRelease();
                          uint64_t result = swift_bridgeObjectRelease();
                        }
                      }
                    }

            __break(1u);
LABEL_302:
            __break(1u);
            goto LABEL_303;
          }

          if (v140 == 13) {
            break;
          }
          a4 = v12 + 1;
          if (__OFADD__(v12, 1LL)) {
            goto LABEL_279;
          }
          ++v12;
          --v40;
          if (v138 + v12 >= v8) {
            goto LABEL_175;
          }
        }

        uint64_t v141 = v138 + v12;
        a4 = v138 + v12 + 1;
        uint64_t v137 = v220;
        if (!specialized static Comparable.<= infix(_:_:)(a4, v132)) {
          goto LABEL_171;
        }
LABEL_171:
        uint64_t v71 = __OFADD__(v11++, 1LL);
        if (v71) {
          goto LABEL_302;
        }
        uint64_t v138 = v141 + 1;
LABEL_173:
        uint64_t v136 = v217;
      }

      while (v138 < v8);
      a4 = 0LL;
LABEL_175:
      a3 = v223;
      uint64_t v134 = v213;
LABEL_181:
      lazy protocol witness table accessor for type JSONError and conformance JSONError();
      swift_allocError();
      *(void *)uint64_t v147 = 0xD000000000000010LL;
      *(void *)(v147 + 8) = 0x80000001839CB4F0LL;
      *(void *)(v147 + 16) = v134;
      *(void *)(v147 + 24) = v11;
      *(void *)(v147 + 32) = a4;
      *(void *)(v147 + 40) = v132 - a3;
      *(_BYTE *)(v147 + 48) = 1;
LABEL_249:
      swift_willThrow();
      return v7;
    case '.':
      uint64_t v130 = (unsigned __int8 *)specialized BufferView.dropFirst(_:)(1LL, v12, v11);
      specialized static JSON5Scanner.validateLeadingDecimal(from:fullSource:)(v130, v131, a3, a4);
      if (!v6) {
        goto LABEL_148;
      }
      return v7;
    case 'I':
      specialized static JSON5Scanner.validateInfinity(from:fullSource:)((char *)v12, v11, a3, a4);
      goto LABEL_142;
    case 'N':
      specialized static JSON5Scanner.validateNaN(from:fullSource:)((char *)v12, v11, a3, a4);
LABEL_142:
      if (v6) {
        return v7;
      }
      __int16 v215 = a4;
      __int16 v18 = 1;
      goto LABEL_150;
    default:
      goto LABEL_314;
  }

            __break(1u);
LABEL_302:
            __break(1u);
            goto LABEL_303;
          }

          if (v142 == 13) {
            break;
          }
          a4 = v12 + 1;
          if (__OFADD__(v12, 1LL)) {
            goto LABEL_279;
          }
          ++v12;
          --v40;
          if (v140 + v12 >= v8) {
            goto LABEL_175;
          }
        }

        __int128 v143 = v140 + v12;
        a4 = v140 + v12 + 1;
        uint64_t v139 = v222;
        if (!specialized static Comparable.<= infix(_:_:)(a4, v134)) {
          goto LABEL_171;
        }
LABEL_171:
        uint64_t v71 = __OFADD__(v11++, 1LL);
        if (v71) {
          goto LABEL_302;
        }
        uint64_t v140 = v143 + 1;
LABEL_173:
        uint64_t v138 = v219;
      }

      while (v140 < v8);
      a4 = 0LL;
LABEL_175:
      a3 = v225;
      uint64_t v136 = v215;
LABEL_181:
      lazy protocol witness table accessor for type JSONError and conformance JSONError();
      swift_allocError();
      *(void *)unsigned int v149 = 0xD000000000000010LL;
      *(void *)(v149 + 8) = 0x80000001839CB4F0LL;
      *(void *)(v149 + 16) = v136;
      *(void *)(v149 + 24) = v11;
      *(void *)(v149 + 32) = a4;
      *(void *)(v149 + 40) = v134 - a3;
      *(_BYTE *)(v149 + 48) = 1;
LABEL_249:
      swift_willThrow();
      return v7;
    case '.':
      uint64_t v132 = (unsigned __int8 *)specialized BufferView.dropFirst(_:)(1LL, v12, v11);
      specialized static JSON5Scanner.validateLeadingDecimal(from:fullSource:)(v132, v133, a3, a4);
      if (!v6) {
        goto LABEL_148;
      }
      return v7;
    case 'I':
      specialized static JSON5Scanner.validateInfinity(from:fullSource:)((char *)v12, v11, a3, a4);
      goto LABEL_142;
    case 'N':
      specialized static JSON5Scanner.validateNaN(from:fullSource:)((char *)v12, v11, a3, a4);
LABEL_142:
      if (v6) {
        return v7;
      }
      __int16 v217 = a4;
      __int16 v18 = 1;
      goto LABEL_150;
    default:
      goto LABEL_314;
  }

      unint64_t v119 = 1LL;
      unint64_t v14 = v15;
      goto LABEL_297;
    }
  }

  swift_retain_n();
  unsigned __int16 v12 = swift_unknownObjectRetain_n();
  uint64_t v138 = specialized Rope._endPath.getter(v12);
  swift_unknownObjectRelease();
  unsigned __int16 v13 = 0LL;
  unint64_t v14 = 0LL;
  if (!v5) {
    goto LABEL_298;
  }
LABEL_12:
  swift_unknownObjectRetain();
  uint64_t v135 = specialized Rope._Node.distanceFromStart<A>(to:in:)(v10, v138, v13, (uint64_t)v5, v9);
  swift_release();
  uint64_t result = (void *)swift_unknownObjectRelease_n();
  int v17 = __OFSUB__(v4, v14);
  unint64_t v14 = v4 - v14;
  if (v17)
  {
LABEL_300:
    __break(1u);
    goto LABEL_301;
  }

LABEL_321:
                            swift_bridgeObjectRelease();
                            swift_bridgeObjectRelease();
                            LODWORD(a2) = 0;
                            LOWORD(v14) = 0;
                            LOWORD(v26) = 0;
                            LOWORD(a3) = 0;
                            LOWORD(v27) = 0;
                            LOWORD(v28) = 0;
                            LOWORD(v29) = 0;
                            __int16 v30 = 0;
                            LOWORD(v31) = 0;
                            goto LABEL_306;
                          }

                if (v353 == *(void *)(v359 + 88))
                {
                  if (v268)
                  {
                    uint64_t v269 = *(void *)(v268 + 24 * ((v344 >> ((4 * *(_BYTE *)(v268 + 18) + 8) & 0x3C)) & 0xF) + 32);
                    swift_bridgeObjectRetain();
                    swift_bridgeObjectRetain();
                  }

                  else
                  {
                    unsigned __int16 v270 = *(void *)(v359 + 64);
                    swift_unknownObjectRetain();
                    specialized Rope._Node.subscript.getter(v344, v270);
                    uint64_t v269 = v271;
                    swift_unknownObjectRelease();
                  }

                  uint64_t v272 = (*(uint64_t (**)(void, void))(v354[6] + 24LL))(v354[2], v354[6]);
                  if (*(void *)(v269 + 16)
                    && (__int16 v274 = specialized __RawDictionaryStorage.find<A>(_:)(v272, v273), (v275 & 1) != 0))
                  {
                    outlined init with copy of AttributedString._AttributeValue( *(void *)(v269 + 56) + 72 * v274,  (uint64_t)&v394);
                  }

                  else
                  {
                    uint64_t v398 = 0LL;
                    uint64_t v396 = 0u;
                    uint64_t v397 = 0u;
                    id v394 = 0u;
                    uint64_t v395 = 0u;
                  }

                  swift_bridgeObjectRelease();
                  if (*((void *)&v395 + 1))
                  {
                    outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>( (uint64_t)&v394,  (uint64_t)v378);
                    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Hashable & Sendable);
                    uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
                    __int128 v277 = v326;
                    swift_dynamicCast();
                    outlined destroy of AttributedString._AttributeValue((uint64_t)&v394);
                    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8)
                                                                              + 56LL))( v277,  0LL,  1LL,  AssociatedTypeWitness);
                  }

                  else
                  {
                    outlined destroy of Any?( (uint64_t)&v394,  &demangling cache variable for type metadata for AttributedString._AttributeValue?);
                    int v278 = swift_getAssociatedTypeWitness();
                    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v278 - 8) + 56LL))( v326,  1LL,  1LL,  v278);
                  }

                  uint64_t v279 = (*(uint64_t (**)(void, void))(v354[7] + 24LL))(v354[3], v354[7]);
                  if (*(void *)(v269 + 16)
                    && (unsigned int v281 = specialized __RawDictionaryStorage.find<A>(_:)(v279, v280), (v282 & 1) != 0))
                  {
                    outlined init with copy of AttributedString._AttributeValue( *(void *)(v269 + 56) + 72 * v281,  (uint64_t)&v394);
                  }

                  else
                  {
                    uint64_t v398 = 0LL;
                    uint64_t v396 = 0u;
                    uint64_t v397 = 0u;
                    id v394 = 0u;
                    uint64_t v395 = 0u;
                  }

                  swift_bridgeObjectRelease();
                  if (*((void *)&v395 + 1))
                  {
                    outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>( (uint64_t)&v394,  (uint64_t)v378);
                    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Hashable & Sendable);
                    __int128 v283 = swift_getAssociatedTypeWitness();
                    uint64_t v284 = v327;
                    swift_dynamicCast();
                    outlined destroy of AttributedString._AttributeValue((uint64_t)&v394);
                    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v283 - 8) + 56LL))( v284,  0LL,  1LL,  v283);
                  }

                  else
                  {
                    outlined destroy of Any?( (uint64_t)&v394,  &demangling cache variable for type metadata for AttributedString._AttributeValue?);
                    id v285 = swift_getAssociatedTypeWitness();
                    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v285 - 8) + 56LL))( v327,  1LL,  1LL,  v285);
                  }

                  uint64_t v286 = (*(uint64_t (**)(void, void))(v354[8] + 24LL))(v354[4], v354[8]);
                  if (*(void *)(v269 + 16)
                    && (uint64_t v288 = specialized __RawDictionaryStorage.find<A>(_:)(v286, v287), (v289 & 1) != 0))
                  {
                    outlined init with copy of AttributedString._AttributeValue( *(void *)(v269 + 56) + 72 * v288,  (uint64_t)&v394);
                  }

                  else
                  {
                    uint64_t v398 = 0LL;
                    uint64_t v396 = 0u;
                    uint64_t v397 = 0u;
                    id v394 = 0u;
                    uint64_t v395 = 0u;
                  }

                  swift_bridgeObjectRelease();
                  if (*((void *)&v395 + 1))
                  {
                    outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>( (uint64_t)&v394,  (uint64_t)v378);
                    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Hashable & Sendable);
                    uint64_t v290 = swift_getAssociatedTypeWitness();
                    id v291 = v328;
                    swift_dynamicCast();
                    outlined destroy of AttributedString._AttributeValue((uint64_t)&v394);
                    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v290 - 8) + 56LL))( v291,  0LL,  1LL,  v290);
                  }

                  else
                  {
                    outlined destroy of Any?( (uint64_t)&v394,  &demangling cache variable for type metadata for AttributedString._AttributeValue?);
                    id v292 = swift_getAssociatedTypeWitness();
                    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v292 - 8) + 56LL))( v328,  1LL,  1LL,  v292);
                  }

                  id v293 = (*(uint64_t (**)(void, void))(v354[9] + 24LL))(v354[5], v354[9]);
                  if (*(void *)(v269 + 16)
                    && (uint64_t v295 = specialized __RawDictionaryStorage.find<A>(_:)(v293, v294), (v296 & 1) != 0))
                  {
                    outlined init with copy of AttributedString._AttributeValue( *(void *)(v269 + 56) + 72 * v295,  (uint64_t)&v394);
                  }

                  else
                  {
                    uint64_t v398 = 0LL;
                    uint64_t v396 = 0u;
                    uint64_t v397 = 0u;
                    id v394 = 0u;
                    uint64_t v395 = 0u;
                  }

                  swift_bridgeObjectRelease();
                  if (*((void *)&v395 + 1))
                  {
                    outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>( (uint64_t)&v394,  (uint64_t)v378);
                    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Hashable & Sendable);
                    uint64_t v297 = swift_getAssociatedTypeWitness();
                    char v298 = v329;
                    swift_dynamicCast();
                    outlined destroy of AttributedString._AttributeValue((uint64_t)&v394);
                    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v297 - 8) + 56LL))( v298,  0LL,  1LL,  v297);
                  }

                  else
                  {
                    outlined destroy of Any?( (uint64_t)&v394,  &demangling cache variable for type metadata for AttributedString._AttributeValue?);
                    uint64_t v299 = swift_getAssociatedTypeWitness();
                    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v299 - 8) + 56LL))( v329,  1LL,  1LL,  v299);
                  }

                  Swift::String v300 = v324;
                  swift_bridgeObjectRelease();
                  uint64_t result = swift_bridgeObjectRelease();
                  if (v255 >> 10 >= v337 >> 10)
                  {
                    uint64_t v301 = v325;
                    *id v325 = v337;
                    size_t v302 = v342;
                    v301[1] = v338;
                    v301[2] = v302;
                    v301[3] = v300;
                    v301[4] = v255;
                    v301[5] = v371;
                    v301[6] = v257;
                    v301[7] = v258;
                    return result;
                  }

LABEL_340:
                          __break(1u);
LABEL_341:
                          __break(1u);
                          goto LABEL_342;
                        }

                        __break(1u);
                        goto LABEL_340;
                      }

                            uint64_t v306 = 0LL;
                            uint64_t v308 = 0LL;
                            uint64_t v309 = 0;
LABEL_341:
                            if ((v89 & 1) == 0 && v5 < v19)
                            {
                              id v358 = 0LL;
                              v359 = 0LL;
                              AttributedString.Guts._applyStyle(type:from:to:)((uint64_t)&v358, v10, v5, v19);
                            }

                            if (v315 < v308) {
                              unint64_t v310 = v309;
                            }
                            else {
                              unint64_t v310 = 0;
                            }
                            if (v310 == 1)
                            {
                              id v358 = 0LL;
                              v359 = 0LL;
                              AttributedString.Guts._applyStyle(type:from:to:)((uint64_t)&v358, v306, v315, v308);
                            }

                            goto LABEL_240;
                          }

                          unsigned __int16 v262 = *(void *)(v256 + 8 * v255);
                          if (!v262)
                          {
                            int v263 = v255 + 1;
                            if (v255 + 1 >= v346) {
                              goto LABEL_311;
                            }
                            unsigned __int16 v262 = *(void *)(v256 + 8 * v263);
                            if (!v262)
                            {
                              int v263 = v255 + 2;
                              if (v255 + 2 >= v346) {
                                goto LABEL_311;
                              }
                              unsigned __int16 v262 = *(void *)(v256 + 8 * v263);
                              if (!v262)
                              {
                                int v263 = v255 + 3;
                                if (v255 + 3 >= v346) {
                                  goto LABEL_311;
                                }
                                unsigned __int16 v262 = *(void *)(v256 + 8 * v263);
                                if (!v262)
                                {
                                  while (1)
                                  {
                                    uint64_t v255 = v263 + 1;
                                    if (__OFADD__(v263, 1LL)) {
                                      goto LABEL_392;
                                    }
                                    if (v255 >= v346) {
                                      goto LABEL_311;
                                    }
                                    unsigned __int16 v262 = *(void *)(v256 + 8 * v255);
                                    ++v263;
                                    if (v262) {
                                      goto LABEL_301;
                                    }
                                  }
                                }
                              }
                            }

                            uint64_t v255 = v263;
                          }

                          __break(1u);
LABEL_341:
                          __break(1u);
LABEL_342:
                          __break(1u);
LABEL_343:
                          __break(1u);
                          goto LABEL_344;
                        }

                        uint64_t v35 = v157;
                        goto LABEL_262;
                      }

                      unint64_t v153 = 1LL;
                      uint64_t v35 = v155;
                    }

                          __break(1u);
LABEL_341:
                          __break(1u);
LABEL_342:
                          __break(1u);
LABEL_343:
                          __break(1u);
                          goto LABEL_344;
                        }

                        unint64_t v34 = v159;
                        goto LABEL_267;
                      }

                      uint64_t v155 = 1LL;
                      unint64_t v34 = v157;
                    }

LABEL_329:
                      __break(1u);
                      goto LABEL_330;
                    }

LABEL_328:
                    __break(1u);
                    goto LABEL_329;
                  }

            swift_unknownObjectRelease();
            swift_unknownObjectRelease();
            int v16 = v16 & 0xFFFFFFFFFFFFF0FFLL | (v160 << 8);
            __int16 v8 = a2;
            goto LABEL_55;
          }

            swift_unknownObjectRelease();
            swift_unknownObjectRelease();
            int v16 = v16 & 0xFFFFFFFFFFFFF0FFLL | (v159 << 8);
            __int16 v8 = a2;
            goto LABEL_55;
          }

LABEL_317:
                  __break(1u);
LABEL_318:
                  __break(1u);
                  goto LABEL_319;
                }

uint64_t specialized static NSDecimal.- infix(_:_:)( unint64_t a1, unint64_t a2, unsigned int a3, unint64_t a4, unint64_t a5, unsigned int a6)
{
  __int16 v6 = a6;
  __int16 v7 = a5;
  unsigned int v8 = a4;
  uint64_t v141 = *MEMORY[0x1895F89C0];
  unsigned int v138 = a4;
  unint64_t v9 = HIDWORD(a4);
  LOWORD(v139) = WORD2(a4);
  unint64_t v10 = HIWORD(a4);
  WORD1(v139) = HIWORD(a4);
  HIDWORD(v139) = a5;
  unint64_t v11 = a5 >> 16;
  unint64_t v111 = HIDWORD(a1);
  unint64_t v113 = HIWORD(a1);
  unint64_t v12 = HIDWORD(a5);
  LOWORD(v140) = WORD2(a5);
  unsigned int v123 = a1;
  unint64_t v13 = HIWORD(a5);
  WORD1(v140) = HIWORD(a5);
  HIDWORD(v140) = a6;
  unsigned int v14 = HIWORD(a6);
  unint64_t v115 = a2 >> 16;
  unint64_t v117 = HIDWORD(a2);
  uint64_t v135 = a4;
  unint64_t v119 = HIWORD(a2);
  unint64_t v136 = a5;
  unsigned int v137 = a6;
  __int16 v121 = a2;
  if (_So9NSDecimala__length_getter(&v135))
  {
    LODWORD(v135) = v8;
    WORD2(v135) = v9;
    HIWORD(v135) = v10;
    LOWORD(v136) = v7;
    WORD1(v136) = v11;
    WORD2(v136) = v12;
    HIWORD(v136) = v13;
    LOWORD(v137) = v6;
    HIWORD(v137) = v14;
    int isNegative_getter = _So9NSDecimala__isNegative_getter(&v135);
    _So9NSDecimala__isNegative_setter(isNegative_getter ^ 1u, &v138);
    unsigned int v8 = v138;
    LOWORD(v9) = v139;
    unint64_t v10 = WORD1(v139);
    __int16 v7 = WORD2(v139);
    LOWORD(v11) = HIWORD(v139);
    LOWORD(v12) = v140;
    LOWORD(v13) = WORD1(v140);
    __int16 v6 = WORD2(v140);
    __int16 v109 = HIWORD(v140);
  }

  else
  {
    __int16 v109 = v14;
  }

  LODWORD(v135) = v123;
  WORD2(v135) = v111;
  HIWORD(v135) = v113;
  LOWORD(v136) = v121;
  WORD1(v136) = v115;
  WORD2(v136) = v117;
  HIWORD(v136) = v119;
  unsigned int v137 = a3;
  if (!_So9NSDecimala__length_getter(&v135))
  {
    LODWORD(v135) = v123;
    WORD2(v135) = v111;
    HIWORD(v135) = v113;
    LOWORD(v136) = v121;
    WORD1(v136) = v115;
    WORD2(v136) = v117;
    HIWORD(v136) = v119;
    unsigned int v137 = a3;
  }

  LODWORD(v135) = v8;
  WORD2(v135) = v9;
  HIWORD(v135) = v10;
  LOWORD(v136) = v7;
  WORD1(v136) = v11;
  WORD2(v136) = v12;
  HIWORD(v136) = v13;
  LOWORD(v137) = v6;
  HIWORD(v137) = v109;
  if (!_So9NSDecimala__length_getter(&v135))
  {
    LODWORD(v135) = v8;
    WORD2(v135) = v9;
    HIWORD(v135) = v10;
    LOWORD(v136) = v7;
    WORD1(v136) = v11;
    WORD2(v136) = v12;
    HIWORD(v136) = v13;
    LOWORD(v137) = v6;
    HIWORD(v137) = v109;
  }

  LODWORD(v135) = v123;
  WORD2(v135) = v111;
  HIWORD(v135) = v113;
  LOWORD(v136) = v121;
  WORD1(v136) = v115;
  WORD2(v136) = v117;
  HIWORD(v136) = v119;
  unsigned int v137 = a3;
  if (!_So9NSDecimala__length_getter(&v135))
  {
    unsigned int v19 = v8;
    unsigned __int16 v20 = v9;
    unint64_t v21 = v10;
    return v19 | ((unint64_t)v20 << 32) | (v21 << 48);
  }

  LODWORD(v135) = v8;
  WORD2(v135) = v9;
  HIWORD(v135) = v10;
  LOWORD(v136) = v7;
  WORD1(v136) = v11;
  WORD2(v136) = v12;
  HIWORD(v136) = v13;
  LOWORD(v137) = v6;
  HIWORD(v137) = v109;
  if (!_So9NSDecimala__length_getter(&v135))
  {
    unsigned __int16 v20 = v111;
    unint64_t v21 = v113;
    unsigned int v19 = v123;
    return v19 | ((unint64_t)v20 << 32) | (v21 << 48);
  }

  LODWORD(v135) = v123;
  WORD2(v135) = v111;
  HIWORD(v135) = v113;
  LOWORD(v136) = v121;
  WORD1(v136) = v115;
  WORD2(v136) = v117;
  HIWORD(v136) = v119;
  unsigned int v137 = a3;
  LODWORD(v132) = v8;
  WORD2(v132) = v9;
  HIWORD(v132) = v10;
  LOWORD(v133) = v7;
  WORD1(v133) = v11;
  WORD2(v133) = v12;
  HIWORD(v133) = v13;
  LOWORD(v134) = v6;
  HIWORD(v134) = v109;
  specialized static NSDecimal._normalize(a:b:roundingMode:)((int *)&v135, (uint64_t)&v132);
  uint64_t v16 = WORD2(v135);
  unint64_t v17 = HIWORD(v135);
  uint64_t v110 = v135;
  uint64_t v129 = v135;
  uint64_t v120 = WORD1(v136);
  uint64_t v122 = (unsigned __int16)v136;
  unint64_t v130 = v136;
  uint64_t v116 = HIWORD(v136);
  uint64_t v118 = WORD2(v136);
  int v114 = (unsigned __int16)v137;
  unsigned int v131 = v137;
  int v112 = HIWORD(v137);
  int v18 = _So9NSDecimala__length_getter(&v129);
  unsigned int v19 = v132;
  unsigned __int16 v20 = WORD2(v132);
  unint64_t v21 = HIWORD(v132);
  uint64_t v22 = (unsigned __int16)v133;
  uint64_t v23 = WORD1(v133);
  uint64_t v24 = WORD2(v133);
  uint64_t v25 = HIWORD(v133);
  int v26 = (unsigned __int16)v134;
  int v27 = HIWORD(v134);
  if (!v18) {
    return v19 | ((unint64_t)v20 << 32) | (v21 << 48);
  }
  uint64_t v124 = v132;
  uint64_t v129 = v132;
  unint64_t v130 = v133;
  unsigned int v131 = v134;
  uint64_t v108 = WORD2(v132);
  if (!_So9NSDecimala__length_getter(&v129))
  {
    unsigned int v19 = v110;
    unsigned __int16 v20 = v16;
    unint64_t v21 = v17;
    return v19 | ((unint64_t)v20 << 32) | (v21 << 48);
  }

  LODWORD(v129) = v110;
  WORD2(v129) = v16;
  HIWORD(v129) = v17;
  LOWORD(v130) = v122;
  WORD1(v130) = v120;
  WORD2(v130) = v118;
  HIWORD(v130) = v116;
  LOWORD(v131) = v114;
  HIWORD(v131) = v112;
  LODWORD(v126) = v110;
  WORD2(v126) = v16;
  HIWORD(v126) = v17;
  unint64_t v127 = __PAIR64__(__PAIR32__(v116, v118), __PAIR32__(v120, v122));
  LOWORD(v128) = v114;
  HIWORD(v128) = v112;
  unint64_t v106 = v17;
  uint64_t v28 = v16;
  int v29 = _So9NSDecimala__isNegative_getter(&v126);
  LODWORD(v126) = v124;
  WORD2(v126) = v108;
  HIWORD(v126) = v21;
  LOWORD(v127) = v22;
  WORD1(v127) = v23;
  WORD2(v127) = v24;
  HIWORD(v127) = v25;
  LOWORD(v128) = v26;
  HIWORD(v128) = v27;
  if (v29 == _So9NSDecimala__isNegative_getter(&v126))
  {
    LODWORD(v126) = v110;
    WORD2(v126) = v28;
    HIWORD(v126) = v106;
    LOWORD(v127) = v122;
    WORD1(v127) = v120;
    WORD2(v127) = v118;
    HIWORD(v127) = v116;
    LOWORD(v128) = v114;
    HIWORD(v128) = v112;
    uint64_t v30 = _So9NSDecimala__isNegative_getter(&v126);
    _So9NSDecimala__isNegative_setter(v30, &v129);
    NSDecimal.asVariableLengthInteger()( v110 | (v28 << 32) | (v106 << 48),  v122 | (v120 << 16) | (v118 << 32) | (v116 << 48),  v114 | (v112 << 16));
    uint64_t v32 = v31;
    NSDecimal.asVariableLengthInteger()( v124 | (v108 << 32) | (v21 << 48),  v22 | (v23 << 16) | (v24 << 32) | (v25 << 48),  v26 | (v27 << 16));
    uint64_t v35 = specialized static NSDecimal._integerAdd(lhs:rhs:maxResultLength:)(v32, v33, 9LL, v34);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    unint64_t v36 = *(void *)(v35 + 16);
    if (v36 <= 8)
    {
      v38._rawValue = (void *)v35;
LABEL_30:
      _So9NSDecimala__length_setter(v36, &v129);
      NSDecimal.copyVariableLengthInteger(_:)(v38);
      uint64_t v50 = v56;
      swift_bridgeObjectRelease();
      if (v56) {
        goto LABEL_21;
      }
      goto LABEL_147;
    }

    specialized static NSDecimal._fitMantissa(_:roundingMode:)(v35, 0LL);
    v38._rawValue = v37;
    uint64_t v40 = v39;
    swift_bridgeObjectRelease();
    int v41 = v129;
    __int16 v42 = WORD2(v129);
    __int16 v43 = HIWORD(v129);
    __int16 v44 = v130;
    __int16 v45 = WORD1(v130);
    __int16 v46 = WORD2(v130);
    __int16 v47 = HIWORD(v130);
    __int16 v48 = v131;
    uint64_t v126 = v129;
    unint64_t v127 = v130;
    unsigned int v128 = v131;
    __int16 v125 = HIWORD(v131);
    int v49 = _So9NSDecimala__exponent_getter((char *)&v126);
    if (v40 >= (uint64_t)0xFFFFFFFF80000000LL)
    {
      if (v40 <= 0x7FFFFFFF)
      {
        if (!__OFADD__(v49, (_DWORD)v40))
        {
          if (v49 + (int)v40 > 127)
          {
            swift_bridgeObjectRelease();
LABEL_20:
            lazy protocol witness table accessor for type NSDecimal._CalculationError and conformance NSDecimal._CalculationError();
            uint64_t v50 = (void *)swift_allocError();
            *unint64_t v51 = 0;
            swift_willThrow();
            goto LABEL_21;
          }

          LODWORD(v126) = v41;
          WORD2(v126) = v42;
          HIWORD(v126) = v43;
          LOWORD(v127) = v44;
          WORD1(v127) = v45;
          WORD2(v127) = v46;
          HIWORD(v127) = v47;
          LOWORD(v128) = v48;
          HIWORD(v128) = v125;
          int v79 = _So9NSDecimala__exponent_getter((char *)&v126);
          BOOL v80 = __OFADD__(v79, (_DWORD)v40);
          uint64_t v81 = (v79 + v40);
          if (!v80)
          {
            _So9NSDecimala__exponent_setter(v81, &v129);
            unint64_t v36 = *((void *)v38._rawValue + 2);
            if (HIDWORD(v36)) {
              goto LABEL_161;
            }
            goto LABEL_30;
          }

          __break(1u);
          goto LABEL_159;
        }

LABEL_155:
        __break(1u);
LABEL_156:
        __break(1u);
LABEL_157:
        __break(1u);
      }

      __break(1u);
      goto LABEL_156;
    }

    __break(1u);
    goto LABEL_156;
  }

  uint64_t v110 = v131 | (v125 << 16) | (v123 << 32) | (v121 << 48);
  unint64_t v111 = v127 | (v116 << 32) | (v133 << 48);
  __int16 v109 = v119 | (v129 << 16);
  NSDecimal.asVariableLengthInteger()(v111, v110, v109);
  int v41 = v40;
  uint64_t v107 = v11 | (v6 << 16) | (v9 << 32) | (v10 << 48);
  uint64_t v108 = v8 | (v5 << 32) | (v15 << 48);
  unint64_t v106 = v7 | (v14 << 16);
  NSDecimal.asVariableLengthInteger()(v108, v107, v106);
  int v112 = specialized static NSDecimal._integerCompare(lhs:rhs:)(v41, v42);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  __int16 v43 = v112;
  __int16 v44 = v133;
  if (v112 == -1)
  {
    unint64_t v117 = v15;
    NSDecimal.asVariableLengthInteger()(v108, v107, v106);
    __int16 v47 = v46;
    NSDecimal.asVariableLengthInteger()(v111, v110, v109);
    int v49 = v48;
    uint64_t v50 = static Array._allocateBufferUninitialized(minimumCapacity:)();
    uint64_t v52 = v49;
    *(void *)(v50 + 32) = 0LL;
    uint64_t v53 = (_WORD *)(v50 + 32);
    *(void *)(v50 + 16) = 8LL;
    uint64_t v54 = (unint64_t *)v50;
    *(void *)(v50 + 40) = 0LL;
    uint64_t v55 = *(void *)(v47 + 16);
    unint64_t v56 = *(void *)(v52 + 16);
    if (v56 >= v55) {
      uint64_t v57 = *(void *)(v47 + 16);
    }
    else {
      uint64_t v57 = *(void *)(v52 + 16);
    }
    unint64_t v105 = v7;
    if (!v57)
    {
      if (!v55)
      {
        uint64_t v62 = v117;
        if (v56)
        {
          unsigned int v61 = 0LL;
          LODWORD(v60) = 1;
          goto LABEL_91;
        }

        unsigned int v86 = 8LL;
        goto LABEL_100;
      }

      unsigned int v61 = 0LL;
      uint64_t v62 = v117;
      goto LABEL_83;
    }

    uint64_t v58 = v47 + 32;
    uint64_t v59 = (*(unsigned __int16 *)(v47 + 32) | 0x10000) - *(unsigned __int16 *)(v52 + 32);
    LODWORD(v60) = HIWORD(v59);
    char *v53 = *(_WORD *)(v47 + 32) - *(_WORD *)(v52 + 32);
    unsigned int v61 = v57 - 1;
    if (!v61)
    {
      unsigned int v61 = 1LL;
      goto LABEL_56;
    }

    uint64_t v59 = v60 + *(unsigned __int16 *)(v47 + 34) - *(unsigned __int16 *)(v52 + 34) + 0xFFFF;
    LODWORD(v60) = HIWORD(v59);
    *(_WORD *)(v50 + 34) = v59;
    uint64_t v62 = v117;
    if (v61 == 1)
    {
      unsigned int v61 = 2LL;
    }

    else
    {
      unint64_t v51 = *(unsigned __int16 *)(v52 + 36);
      uint64_t v59 = v60 + *(unsigned __int16 *)(v47 + 36) - v51 + 0xFFFF;
      LODWORD(v60) = HIWORD(v59);
      *(_WORD *)(v50 + 36) = v59;
      if (v61 == 2)
      {
        unsigned int v61 = 3LL;
      }

      else
      {
        uint64_t v59 = v60 + *(unsigned __int16 *)(v47 + 38) - *(unsigned __int16 *)(v52 + 38) + 0xFFFF;
        LODWORD(v60) = HIWORD(v59);
        *(_WORD *)(v50 + 38) = v59;
        if (v61 == 3)
        {
          unsigned int v61 = 4LL;
        }

        else
        {
          unint64_t v51 = *(unsigned __int16 *)(v52 + 40);
          uint64_t v59 = v60 + *(unsigned __int16 *)(v47 + 40) - v51 + 0xFFFF;
          LODWORD(v60) = HIWORD(v59);
          *(_WORD *)(v50 + 40) = v59;
          if (v61 == 4)
          {
            unsigned int v61 = 5LL;
          }

          else
          {
            uint64_t v59 = v60 + *(unsigned __int16 *)(v47 + 42) - *(unsigned __int16 *)(v52 + 42) + 0xFFFF;
            LODWORD(v60) = HIWORD(v59);
            *(_WORD *)(v50 + 42) = v59;
            if (v61 != 5)
            {
              unint64_t v51 = *(unsigned __int16 *)(v52 + 44);
              uint64_t v59 = v60 + *(unsigned __int16 *)(v47 + 44) - v51 + 0xFFFF;
              LODWORD(v60) = HIWORD(v59);
              *(_WORD *)(v50 + 44) = v59;
              if (v61 != 6) {
                goto LABEL_114;
              }
              unsigned int v61 = 7LL;
              goto LABEL_56;
            }

            unsigned int v61 = 6LL;
          }
        }
      }
    }

    while (1)
    {
      if (v61 >= v55) {
        goto LABEL_90;
      }
      if (!HIWORD(v59)) {
        break;
      }
LABEL_83:
      uint64_t v58 = v47 + 32;
      if (v61 <= v55) {
        uint64_t v60 = v55;
      }
      else {
        uint64_t v60 = v61;
      }
      while (v60 != v61)
      {
        if (v61 >= *(void *)(v50 + 16)) {
          goto LABEL_113;
        }
        v53[v61] = *(_WORD *)(v58 + 2 * v61);
        if ((uint64_t)++v61 >= (uint64_t)v55)
        {
          LODWORD(v60) = 1;
LABEL_90:
          if ((uint64_t)v61 < (uint64_t)v56)
          {
            while (1)
            {
LABEL_91:
              if (v61 >= v56) {
                goto LABEL_158;
              }
              uint64_t v55 = *(void *)(v50 + 16);
              if (v61 < v55) {
                break;
              }
LABEL_96:
              __break(1u);
LABEL_97:
              LODWORD(v60) = HIWORD(v51);
              unsigned int v61 = v55;
            }

            unint64_t v89 = v60 + (*(unsigned __int16 *)(v52 + 32 + 2 * v61) ^ 0xFFFF);
            --v56;
            uint64_t v55 = v52 + 34;
            while (1)
            {
              LODWORD(v60) = HIWORD(v89);
              v53[v61] = v89;
              if (v56 == v61) {
                break;
              }
              unint64_t v89 = v60 + (*(unsigned __int16 *)(v55 + 2 * v61++) ^ 0xFFFF);
              if (v61 >= *(void *)(v50 + 16)) {
                goto LABEL_96;
              }
            }
          }

    __break(1u);
    goto LABEL_156;
  }

  uint64_t v120 = v23;
  __int16 v121 = v21;
  LOWORD(v123) = v22;
  uint64_t v62 = v22 | (v23 << 16) | (v24 << 32) | (v150 << 48);
  uint64_t v132 = v21 | (v145 << 32) | (v143 << 48);
  uint64_t v122 = v147 | (v25 << 16);
  NSDecimal.asVariableLengthInteger()(v132, v62, v122);
  unint64_t v64 = v63;
  unint64_t v65 = v128 | (v141 << 32) | (v139 << 48);
  uint64_t v66 = v36;
  unsigned int v67 = v137 | (v135 << 16) | (v32 << 32) | (v36 << 48);
  int v68 = v130 | (v129 << 16);
  NSDecimal.asVariableLengthInteger()(v65, v67, v68);
  __int16 v48 = specialized static NSDecimal._integerCompare(lhs:rhs:)(v64, v69);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v48 == -1)
  {
    unsigned int v123 = v66;
    __int16 v48 = v141;
    uint64_t v71 = v124;
    NSDecimal.asVariableLengthInteger()(v65, v67, v68);
    uint64_t v73 = v72;
    NSDecimal.asVariableLengthInteger()(v132, v62, v122);
    uint64_t v75 = v74;
    unsigned int v76 = static Array._allocateBufferUninitialized(minimumCapacity:)();
    v46._rawValue = (void *)v76;
    *(void *)(v76 + 32) = 0LL;
    unint64_t v78 = (_WORD *)(v76 + 32);
    *(void *)(v76 + 16) = 8LL;
    *(void *)(v76 + 40) = 0LL;
    int v79 = *(void *)(v73 + 16);
    BOOL v80 = *(void *)(v75 + 16);
    if (v80 >= v79) {
      uint64_t v81 = *(void *)(v73 + 16);
    }
    else {
      uint64_t v81 = *(void *)(v75 + 16);
    }
    if (v81)
    {
      uint64_t v82 = (*(unsigned __int16 *)(v73 + 32) | 0x10000) - *(unsigned __int16 *)(v75 + 32);
      uint64_t v83 = HIWORD(v82);
      *unint64_t v78 = *(_WORD *)(v73 + 32) - *(_WORD *)(v75 + 32);
      int v84 = v81 - 1;
      int v85 = v128;
      unsigned int v86 = v141;
      if (v84)
      {
        uint64_t v82 = v83 + *(unsigned __int16 *)(v73 + 34) - *(unsigned __int16 *)(v75 + 34) + 0xFFFF;
        uint64_t v83 = HIWORD(v82);
        *(_WORD *)(v76 + 34) = v82;
        unsigned __int16 v20 = v124;
        if (v84 == 1)
        {
          Swift::OpaquePointer v87 = 2LL;
        }

        else
        {
          unint64_t v77 = *(unsigned __int16 *)(v75 + 36);
          uint64_t v82 = v83 + *(unsigned __int16 *)(v73 + 36) - v77 + 0xFFFF;
          uint64_t v83 = HIWORD(v82);
          *(_WORD *)(v76 + 36) = v82;
          if (v84 == 2)
          {
            Swift::OpaquePointer v87 = 3LL;
          }

          else
          {
            uint64_t v82 = v83 + *(unsigned __int16 *)(v73 + 38) - *(unsigned __int16 *)(v75 + 38) + 0xFFFF;
            uint64_t v83 = HIWORD(v82);
            *(_WORD *)(v76 + 38) = v82;
            if (v84 == 3)
            {
              Swift::OpaquePointer v87 = 4LL;
            }

            else
            {
              unint64_t v77 = *(unsigned __int16 *)(v75 + 40);
              uint64_t v82 = v83 + *(unsigned __int16 *)(v73 + 40) - v77 + 0xFFFF;
              uint64_t v83 = HIWORD(v82);
              *(_WORD *)(v76 + 40) = v82;
              if (v84 == 4)
              {
                Swift::OpaquePointer v87 = 5LL;
              }

              else
              {
                uint64_t v82 = v83 + *(unsigned __int16 *)(v73 + 42) - *(unsigned __int16 *)(v75 + 42) + 0xFFFF;
                uint64_t v83 = HIWORD(v82);
                *(_WORD *)(v76 + 42) = v82;
                if (v84 == 5)
                {
                  Swift::OpaquePointer v87 = 6LL;
                }

                else
                {
                  unint64_t v77 = *(unsigned __int16 *)(v75 + 44);
                  uint64_t v82 = v83 + *(unsigned __int16 *)(v73 + 44) - v77 + 0xFFFF;
                  uint64_t v83 = HIWORD(v82);
                  *(_WORD *)(v76 + 44) = v82;
                  if (v84 == 6)
                  {
                    Swift::OpaquePointer v87 = 7LL;
                  }

                  else
                  {
                    unint64_t v105 = v83 + *(unsigned __int16 *)(v73 + 46) - *(unsigned __int16 *)(v75 + 46);
                    uint64_t v82 = v105 + 0xFFFF;
                    *(_WORD *)(v76 + 46) = v105 - 1;
                    if (v84 != 7)
                    {
LABEL_161:
                      __break(1u);
                      goto LABEL_162;
                    }

                    uint64_t v83 = HIWORD(v82);
                    Swift::OpaquePointer v87 = 8LL;
                  }

                  unsigned __int16 v20 = v124;
                  int v85 = v128;
                  unsigned int v86 = v141;
                }
              }
            }
          }
        }
      }

      else
      {
        Swift::OpaquePointer v87 = 1LL;
        unsigned __int16 v20 = v124;
      }

      __int16 v48 = v123;
      if (v87 >= v79) {
        goto LABEL_95;
      }
      if (!HIWORD(v82))
      {
        while (v87 < *(void *)(v76 + 16))
        {
          unint64_t v106 = *(unsigned __int16 *)(v73 + 32 + 2 * v87);
          unint64_t v77 = v106 + 0xFFFF;
          v78[v87] = v106 - 1;
          if (v79 - 1 == v87) {
            goto LABEL_102;
          }
          ++v87;
          if (v106) {
            goto LABEL_88;
          }
        }

        goto LABEL_153;
      }
    }

    else
    {
      int v85 = v128;
      unsigned int v86 = v141;
      if (!v79)
      {
        unsigned __int16 v20 = v124;
        if (v80)
        {
          Swift::OpaquePointer v87 = 0LL;
          uint64_t v83 = 1;
          __int16 v48 = v123;
          goto LABEL_96;
        }

        unint64_t v103 = 8LL;
        __int16 v48 = v123;
        goto LABEL_105;
      }

      Swift::OpaquePointer v87 = 0LL;
      unsigned __int16 v20 = v124;
      __int16 v48 = v123;
    }

      __break(1u);
      goto LABEL_156;
    }

    __break(1u);
    goto LABEL_156;
  }

  uint64_t v120 = v23;
  __int16 v121 = v21;
  LOWORD(v123) = v22;
  uint64_t v62 = v22 | (v23 << 16) | (v24 << 32) | (v150 << 48);
  uint64_t v132 = v21 | (v145 << 32) | (v143 << 48);
  uint64_t v122 = v147 | (v25 << 16);
  NSDecimal.asVariableLengthInteger()(v132, v62, v122);
  unint64_t v64 = v63;
  unint64_t v65 = v128 | (v141 << 32) | (v139 << 48);
  uint64_t v66 = v36;
  unsigned int v67 = v137 | (v135 << 16) | (v32 << 32) | (v36 << 48);
  int v68 = v130 | (v129 << 16);
  NSDecimal.asVariableLengthInteger()(v65, v67, v68);
  __int16 v48 = specialized static NSDecimal._integerCompare(lhs:rhs:)(v64, v69);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v48 == -1)
  {
    unsigned int v123 = v66;
    __int16 v48 = v141;
    uint64_t v71 = v124;
    NSDecimal.asVariableLengthInteger()(v65, v67, v68);
    uint64_t v73 = v72;
    NSDecimal.asVariableLengthInteger()(v132, v62, v122);
    uint64_t v75 = v74;
    unsigned int v76 = static Array._allocateBufferUninitialized(minimumCapacity:)();
    v46._rawValue = (void *)v76;
    *(void *)(v76 + 32) = 0LL;
    unint64_t v78 = (_WORD *)(v76 + 32);
    *(void *)(v76 + 16) = 8LL;
    *(void *)(v76 + 40) = 0LL;
    int v79 = *(void *)(v73 + 16);
    BOOL v80 = *(void *)(v75 + 16);
    if (v80 >= v79) {
      uint64_t v81 = *(void *)(v73 + 16);
    }
    else {
      uint64_t v81 = *(void *)(v75 + 16);
    }
    if (v81)
    {
      uint64_t v82 = (*(unsigned __int16 *)(v73 + 32) | 0x10000) - *(unsigned __int16 *)(v75 + 32);
      uint64_t v83 = HIWORD(v82);
      *unint64_t v78 = *(_WORD *)(v73 + 32) - *(_WORD *)(v75 + 32);
      int v84 = v81 - 1;
      int v85 = v128;
      unsigned int v86 = v141;
      if (v84)
      {
        uint64_t v82 = v83 + *(unsigned __int16 *)(v73 + 34) - *(unsigned __int16 *)(v75 + 34) + 0xFFFF;
        uint64_t v83 = HIWORD(v82);
        *(_WORD *)(v76 + 34) = v82;
        unsigned __int16 v20 = v124;
        if (v84 == 1)
        {
          Swift::OpaquePointer v87 = 2LL;
        }

        else
        {
          unint64_t v77 = *(unsigned __int16 *)(v75 + 36);
          uint64_t v82 = v83 + *(unsigned __int16 *)(v73 + 36) - v77 + 0xFFFF;
          uint64_t v83 = HIWORD(v82);
          *(_WORD *)(v76 + 36) = v82;
          if (v84 == 2)
          {
            Swift::OpaquePointer v87 = 3LL;
          }

          else
          {
            uint64_t v82 = v83 + *(unsigned __int16 *)(v73 + 38) - *(unsigned __int16 *)(v75 + 38) + 0xFFFF;
            uint64_t v83 = HIWORD(v82);
            *(_WORD *)(v76 + 38) = v82;
            if (v84 == 3)
            {
              Swift::OpaquePointer v87 = 4LL;
            }

            else
            {
              unint64_t v77 = *(unsigned __int16 *)(v75 + 40);
              uint64_t v82 = v83 + *(unsigned __int16 *)(v73 + 40) - v77 + 0xFFFF;
              uint64_t v83 = HIWORD(v82);
              *(_WORD *)(v76 + 40) = v82;
              if (v84 == 4)
              {
                Swift::OpaquePointer v87 = 5LL;
              }

              else
              {
                uint64_t v82 = v83 + *(unsigned __int16 *)(v73 + 42) - *(unsigned __int16 *)(v75 + 42) + 0xFFFF;
                uint64_t v83 = HIWORD(v82);
                *(_WORD *)(v76 + 42) = v82;
                if (v84 == 5)
                {
                  Swift::OpaquePointer v87 = 6LL;
                }

                else
                {
                  unint64_t v77 = *(unsigned __int16 *)(v75 + 44);
                  uint64_t v82 = v83 + *(unsigned __int16 *)(v73 + 44) - v77 + 0xFFFF;
                  uint64_t v83 = HIWORD(v82);
                  *(_WORD *)(v76 + 44) = v82;
                  if (v84 == 6)
                  {
                    Swift::OpaquePointer v87 = 7LL;
                  }

                  else
                  {
                    unint64_t v105 = v83 + *(unsigned __int16 *)(v73 + 46) - *(unsigned __int16 *)(v75 + 46);
                    uint64_t v82 = v105 + 0xFFFF;
                    *(_WORD *)(v76 + 46) = v105 - 1;
                    if (v84 != 7)
                    {
LABEL_161:
                      __break(1u);
                      goto LABEL_162;
                    }

                    uint64_t v83 = HIWORD(v82);
                    Swift::OpaquePointer v87 = 8LL;
                  }

                  unsigned __int16 v20 = v124;
                  int v85 = v128;
                  unsigned int v86 = v141;
                }
              }
            }
          }
        }
      }

      else
      {
        Swift::OpaquePointer v87 = 1LL;
        unsigned __int16 v20 = v124;
      }

      __int16 v48 = v123;
      if (v87 >= v79) {
        goto LABEL_95;
      }
      if (!HIWORD(v82))
      {
        while (v87 < *(void *)(v76 + 16))
        {
          unint64_t v106 = *(unsigned __int16 *)(v73 + 32 + 2 * v87);
          unint64_t v77 = v106 + 0xFFFF;
          v78[v87] = v106 - 1;
          if (v79 - 1 == v87) {
            goto LABEL_102;
          }
          ++v87;
          if (v106) {
            goto LABEL_88;
          }
        }

        goto LABEL_153;
      }
    }

    else
    {
      int v85 = v128;
      unsigned int v86 = v141;
      if (!v79)
      {
        unsigned __int16 v20 = v124;
        if (v80)
        {
          Swift::OpaquePointer v87 = 0LL;
          uint64_t v83 = 1;
          __int16 v48 = v123;
          goto LABEL_96;
        }

        unint64_t v103 = 8LL;
        __int16 v48 = v123;
        goto LABEL_105;
      }

      Swift::OpaquePointer v87 = 0LL;
      unsigned __int16 v20 = v124;
      __int16 v48 = v123;
    }

      __break(1u);
      goto LABEL_156;
    }

  __break(1u);
}

          __break(1u);
          goto LABEL_156;
        }

        if (v9 != 2) {
          goto LABEL_7;
        }
        unint64_t v12 = 48;
LABEL_8:
        uint64_t v32 = v12;
        --v9;
        break;
      case '4':
        if (v9 != 1)
        {
          if (v9 != 2) {
            goto LABEL_7;
          }
          unint64_t v12 = 64;
          goto LABEL_8;
        }

        unint64_t v12 = 4;
        goto LABEL_130;
      case '5':
        if (v9 != 1)
        {
          if (v9 == 2)
          {
            unint64_t v12 = 80;
            goto LABEL_8;
          }

          goto LABEL_7;
        }

        unint64_t v12 = 5;
        goto LABEL_130;
      case '6':
        if (v9 != 1)
        {
          if (v9 != 2) {
            goto LABEL_7;
          }
          unint64_t v12 = 96;
          goto LABEL_8;
        }

        unint64_t v12 = 6;
        goto LABEL_130;
      case '7':
        if (v9 != 1)
        {
          if (v9 != 2) {
            goto LABEL_7;
          }
          unint64_t v12 = 112;
          goto LABEL_8;
        }

        unint64_t v12 = 7;
        goto LABEL_130;
      case '8':
        if (v9 != 1)
        {
          if (v9 != 2) {
            goto LABEL_7;
          }
          unint64_t v12 = 128;
          goto LABEL_8;
        }

        unint64_t v12 = 8;
        goto LABEL_130;
      case '9':
        if (v9 != 1)
        {
          if (v9 != 2) {
            goto LABEL_7;
          }
          unint64_t v12 = 144;
          goto LABEL_8;
        }

        unint64_t v12 = 9;
        goto LABEL_130;
      case 'A':
      case 'a':
        if (v9 != 1)
        {
          if (v9 == 2)
          {
            unint64_t v12 = 160;
            goto LABEL_8;
          }

          goto LABEL_7;
        }

        unint64_t v12 = 10;
        goto LABEL_130;
      case 'B':
      case 'b':
        if (v9 != 1)
        {
          if (v9 == 2)
          {
            unint64_t v12 = 176;
            goto LABEL_8;
          }

          goto LABEL_7;
        }

        unint64_t v12 = 11;
        goto LABEL_130;
      case 'C':
      case 'c':
        if (v9 != 1)
        {
          if (v9 == 2)
          {
            unint64_t v12 = 192;
            goto LABEL_8;
          }

          goto LABEL_7;
        }

        unint64_t v12 = 12;
        goto LABEL_130;
      case 'D':
      case 'd':
        if (v9 != 1)
        {
          if (v9 == 2)
          {
            unint64_t v12 = 208;
            goto LABEL_8;
          }

          goto LABEL_7;
        }

        unint64_t v12 = 13;
        goto LABEL_130;
      case 'E':
      case 'e':
        if (v9 != 1)
        {
          if (v9 == 2)
          {
            unint64_t v12 = 224;
            goto LABEL_8;
          }

          goto LABEL_7;
        }

        unint64_t v12 = 14;
        goto LABEL_130;
      case 'F':
      case 'f':
        if (v9 != 1)
        {
          if (v9 == 2)
          {
            unint64_t v12 = 240;
            goto LABEL_8;
          }

          goto LABEL_7;
        }

        unint64_t v12 = 15;
        goto LABEL_130;
      default:
        goto LABEL_150;
    }
  }

  while (1)
  {
    *(_BYTE *)(a1 + v10) = v17;
    uint64_t v22 = __OFADD__(v10++, 1LL);
    if (v22) {
      goto LABEL_153;
    }
    if (v36 == v11 >> 14) {
      break;
    }
    uint64_t v23 = v11 & 0xC;
    uint64_t v24 = v11;
    if (v23 == v8) {
      uint64_t v24 = _StringGuts._slowEnsureMatchingEncoding(_:)(v11, a2, a3);
    }
    uint64_t v25 = v24 >> 16;
    if (v24 >> 16 >= v6) {
      goto LABEL_152;
    }
    if ((a3 & 0x1000000000000000LL) != 0)
    {
      unint64_t v17 = String.UTF8View._foreignSubscript(position:)();
      if (v23 == v8) {
        goto LABEL_52;
      }
    }

    else if ((a3 & 0x2000000000000000LL) != 0)
    {
      uint64_t v37 = a2;
      Swift::OpaquePointer v38 = v34;
      unint64_t v17 = *((_BYTE *)&v37 + v25);
      if (v23 == v8) {
        goto LABEL_52;
      }
    }

    else
    {
      int v26 = v33;
      if ((a2 & 0x1000000000000000LL) == 0) {
        int v26 = _StringObject.sharedUTF8.getter();
      }
      unint64_t v17 = *(_BYTE *)(v26 + v25);
      if (v23 == v8)
      {
LABEL_52:
        unint64_t v11 = _StringGuts._slowEnsureMatchingEncoding(_:)(v11, a2, a3);
        if ((a3 & 0x1000000000000000LL) == 0) {
          goto LABEL_40;
        }
        goto LABEL_56;
      }
    }

    if ((a3 & 0x1000000000000000LL) == 0)
    {
LABEL_40:
      unint64_t v11 = (v11 & 0xFFFFFFFFFFFF0000LL) + 65540;
      goto LABEL_41;
    }

      swift_unknownObjectRetain();
      __int16 v125 = specialized Rope._Node.distanceFromStart<A>(to:in:)(v337, v22, v124, v58, v353);
      swift_unknownObjectRelease_n();
      goto LABEL_234;
    }

    outlined release of Locale((uint64_t)v427);
    goto LABEL_64;
  }

  BigString.utf8.getter();
  unint64_t v10 = BigString.UTF8View.index(before:)();
  v352 = v152;
  id v353 = v151;
  int v154 = v153;
  outlined release of Locale((uint64_t)&v401);
  BigString.utf8.getter();
  BigString.UTF8View.subscript.getter();
  uint64_t result = outlined release of Locale((uint64_t)&v402);
  if (v148 < v10 >> 10)
  {
LABEL_456:
    __break(1u);
    goto LABEL_457;
  }

  v428[0] = v10;
  v428[1] = v353;
  v428[2] = v352;
  v428[3] = v154;
  v428[4] = v141;
  v428[5] = v143;
  v428[6] = v9;
  v428[7] = v21;
  specialized BidirectionalCollection<>._getBlock(for:in:)(1LL, v428, &v365);
  uint64_t result = outlined release of Locale((uint64_t)&v403);
  uint64_t v22 = (unint64_t)v341;
  uint64_t v155 = v332;
  uint64_t v157 = v328;
  int v156 = v329;
  if (v368 == 2) {
    goto LABEL_193;
  }
  uint64_t v155 = v365;
  if (v148 >= v365 >> 10)
  {
    unint64_t v324 = v366;
    int v156 = v367;
    uint64_t v157 = v368;
    goto LABEL_193;
  }

unint64_t specialized NSDecimal.init(_:)(double a1)
{
  if ((~*(void *)&a1 & 0x7FF0000000000000LL) != 0)
  {
    if (a1 == 0.0)
    {
      uint64_t v3 = 0LL;
      uint64_t v2 = 0LL;
      unsigned int v1 = 0;
      memset(v12, 0, 20);
      return v1 | (unint64_t)(v2 << 32) | (v3 << 48);
    }

    double v6 = -a1;
    if (a1 >= 0.0) {
      double v6 = a1;
    }
    memset(v12, 0, 20);
    unsigned __int8 v7 = 0;
    if (v6 < 1.84467441e19)
    {
      do
      {
        double v6 = v6 * 10.0;
        --v7;
        if (v6 >= 1.84467441e19) {
          goto LABEL_13;
        }
      }

      while (v7 != 128);
LABEL_18:
      __int128 v11 = 0uLL;
      _So9NSDecimala__exponent_setter(0LL, &v10);
      _So9NSDecimala__length_setter(0LL, &v10);
      _So9NSDecimala__isNegative_setter(1LL, &v10);
      _So9NSDecimala__isCompact_setter_0(0LL, &v10);
      _So9NSDecimala__reserved_setter(&v10);
      unsigned int v1 = v10;
      uint64_t v2 = (unsigned __int16)v11;
      uint64_t v3 = WORD1(v11);
      int v4 = HIDWORD(v11);
      uint64_t v5 = *(void *)((char *)&v11 + 4);
      goto LABEL_4;
    }

uint64_t specialized static NSDecimal.* infix(_:_:)( unint64_t a1, unint64_t a2, unsigned int a3, unint64_t a4, unint64_t a5, unsigned int a6)
{
  v69[0] = a1;
  unint64_t v61 = HIDWORD(a1);
  unint64_t v57 = HIWORD(a1);
  v69[1] = a2;
  unint64_t v9 = a2 >> 16;
  unint64_t v58 = HIDWORD(a2);
  unint64_t v60 = HIWORD(a2);
  LODWORD(v69[2]) = a3;
  unsigned int v59 = HIWORD(a3);
  if (!_So9NSDecimala__length_getter(v69))
  {
    LODWORD(v69[0]) = a1;
    WORD2(v69[0]) = v61;
    HIWORD(v69[0]) = v57;
    LOWORD(v69[1]) = a2;
    WORD1(v69[1]) = v9;
    WORD2(v69[1]) = v58;
    HIWORD(v69[1]) = v60;
    LOWORD(v69[2]) = a3;
    WORD1(v69[2]) = v59;
  }

  v69[0] = a4;
  v69[1] = a5;
  LODWORD(v69[2]) = a6;
  if (!_So9NSDecimala__length_getter(v69))
  {
    v69[0] = a4;
    v69[1] = a5;
    LODWORD(v69[2]) = a6;
    if (_So9NSDecimala__isNegative_getter(v69))
    {
LABEL_16:
      lazy protocol witness table accessor for type NSDecimal._CalculationError and conformance NSDecimal._CalculationError();
      uint64_t v22 = (void *)swift_allocError();
      *uint64_t v23 = 0;
      swift_willThrow();
LABEL_17:
      *(void *)((char *)&v69[1] + 4) = 0LL;
      *(void *)((char *)v69 + 4) = 0LL;
      _So9NSDecimala__exponent_setter(0LL, v69);
      _So9NSDecimala__length_setter(0LL, v69);
      _So9NSDecimala__isNegative_setter(1LL, v69);
      _So9NSDecimala__isCompact_setter_0(0LL, v69);
      _So9NSDecimala__reserved_setter(v69);

LABEL_18:
      unsigned int v19 = v69[0];
      uint64_t v20 = WORD2(v69[0]);
      uint64_t v21 = HIWORD(v69[0]);
      return v19 | (unint64_t)(v20 << 32) | (v21 << 48);
    }
  }

  unint64_t v53 = HIWORD(a4);
  int v56 = a4;
  unint64_t v54 = HIDWORD(a4);
  __int16 v55 = HIWORD(a6);
  LODWORD(v69[0]) = a1;
  WORD2(v69[0]) = v61;
  HIWORD(v69[0]) = v57;
  LOWORD(v69[1]) = a2;
  WORD1(v69[1]) = v9;
  WORD2(v69[1]) = v58;
  HIWORD(v69[1]) = v60;
  LOWORD(v69[2]) = a3;
  WORD1(v69[2]) = v59;
  if (!_So9NSDecimala__length_getter(v69)
    || (v69[0] = a4, v69[1] = a5, __int16 v10 = a6, LODWORD(v69[2]) = a6, !_So9NSDecimala__length_getter(v69)))
  {
    unsigned int v19 = 0;
    uint64_t v20 = 0LL;
    uint64_t v21 = 0LL;
    return v19 | (unint64_t)(v20 << 32) | (v21 << 48);
  }

  __int16 v52 = v9;
  NSDecimal.asVariableLengthInteger()(a1, a2, a3);
  uint64_t v12 = v11;
  NSDecimal.asVariableLengthInteger()(a4, a5, a6);
  uint64_t v14 = v13;
  uint64_t v15 = *(void *)(v12 + 16);
  if (v15)
  {
    uint64_t v16 = *(void *)(v13 + 16);
    if (v16)
    {
      uint64_t v17 = v15 + v16;
      if (__OFADD__(v15, v16)) {
        goto LABEL_67;
      }
      if (v17 > 15)
      {
        uint64_t v17 = 16LL;
        goto LABEL_29;
      }

      if ((v17 & 0x8000000000000000LL) == 0)
      {
        if (!v17)
        {
          uint64_t v18 = MEMORY[0x18961AFE8];
          goto LABEL_30;
        }

char *specialized NSDecimal.init(from:)(void *a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<NSDecimal.CodingKeys>);
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x1895F8858](v3);
  double v6 = (char *)v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type NSDecimal.CodingKeys and conformance NSDecimal.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v1)
  {
    v29[0] = 0;
    uint64_t v7 = KeyedDecodingContainer.decode(_:forKey:)();
    v29[0] = 1;
    uint64_t v8 = KeyedDecodingContainer.decode(_:forKey:)();
    v29[0] = 2;
    int v9 = KeyedDecodingContainer.decode(_:forKey:)();
    v29[0] = 3;
    int v33 = KeyedDecodingContainer.decode(_:forKey:)();
    LOBYTE(v22) = 4;
    KeyedDecodingContainer.nestedUnkeyedContainer(forKey:)();
    int v32 = v9;
    uint64_t v21 = v31;
    __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v29, v30);
    int v20 = dispatch thunk of UnkeyedDecodingContainer.decode(_:)();
    uint64_t v21 = v31;
    __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v29, v30);
    int v19 = dispatch thunk of UnkeyedDecodingContainer.decode(_:)();
    uint64_t v21 = v31;
    __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v29, v30);
    int v18 = dispatch thunk of UnkeyedDecodingContainer.decode(_:)();
    uint64_t v21 = v31;
    __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v29, v30);
    LODWORD(v21) = dispatch thunk of UnkeyedDecodingContainer.decode(_:)();
    uint64_t v17 = v31;
    __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v29, v30);
    LODWORD(v17) = dispatch thunk of UnkeyedDecodingContainer.decode(_:)();
    uint64_t v16 = v31;
    __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v29, v30);
    LODWORD(v16) = dispatch thunk of UnkeyedDecodingContainer.decode(_:)();
    uint64_t v15 = v31;
    __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v29, v30);
    LODWORD(v15) = dispatch thunk of UnkeyedDecodingContainer.decode(_:)();
    v14[1] = v31;
    __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v29, v30);
    __int16 v11 = dispatch thunk of UnkeyedDecodingContainer.decode(_:)();
    uint64_t v12 = v32 & 1;
    WORD2(v22) = v20;
    uint64_t v13 = v33 & 1;
    HIWORD(v22) = v19;
    __int16 v23 = v18;
    __int16 v24 = v21;
    __int16 v25 = v17;
    __int16 v26 = v16;
    __int16 v27 = v15;
    __int16 v28 = v11;
    _So9NSDecimala__exponent_setter(v7, &v22);
    _So9NSDecimala__length_setter(v8, &v22);
    _So9NSDecimala__isNegative_setter(v12, &v22);
    _So9NSDecimala__isCompact_setter_0(v13, &v22);
    _So9NSDecimala__reserved_setter(&v22);
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
    double v6 = v22;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v29);
  }

  __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  return v6;
}

void specialized static NSDecimal._decimal<A>(from:decimalSeparator:matchEntireString:)( unint64_t a1@<X0>, unint64_t a2@<X1>, unint64_t a3@<X2>, unint64_t a4@<X3>, char a5@<W4>, uint64_t a6@<X8>)
{
  unint64_t v7 = a2;
  unint64_t v8 = a1;
  memset(v135, 0, 20);
  unint64_t v9 = specialized skipWhiteSpaces #1 <A>(from:) in static NSDecimal._decimal<A>(from:decimalSeparator:matchEntireString:)( 0xFuLL,  a1,  a2);
  unint64_t v10 = v9;
  unint64_t v134 = v9;
  uint64_t v11 = HIBYTE(v7) & 0xF;
  if ((v7 & 0x2000000000000000LL) == 0) {
    uint64_t v11 = v8 & 0xFFFFFFFFFFFFLL;
  }
  unint64_t v132 = v11;
  unint64_t v12 = v9 >> 14;
  unint64_t v131 = 4 * v11;
  if (v9 >> 14 == 4 * v11) {
    goto LABEL_47;
  }
  uint64_t v13 = (v8 >> 59) & 1;
  if ((v7 & 0x1000000000000000LL) == 0) {
    LOBYTE(v13) = 1;
  }
  uint64_t v14 = v9 & 0xC;
  uint64_t v15 = 4LL << v13;
  if (v14 == 4LL << v13) {
    unint64_t v9 = _StringGuts._slowEnsureMatchingEncoding(_:)(v9, v8, v7);
  }
  unint64_t v16 = v9 >> 16;
  if (v9 >> 16 >= v132)
  {
    __break(1u);
    goto LABEL_41;
  }

  if ((v7 & 0x1000000000000000LL) != 0)
  {
LABEL_41:
    char v18 = String.UTF8View._foreignSubscript(position:)();
    goto LABEL_15;
  }

  if ((v7 & 0x2000000000000000LL) != 0)
  {
    *(void *)&v133[0] = v8;
    *((void *)&v133[0] + 1) = v7 & 0xFFFFFFFFFFFFFFLL;
    char v18 = *((_BYTE *)v133 + v16);
    goto LABEL_15;
  }

  if ((v8 & 0x1000000000000000LL) == 0) {
    goto LABEL_196;
  }
  for (uint64_t i = (v7 & 0xFFFFFFFFFFFFFFFLL) + 32; ; uint64_t i = _StringObject.sharedUTF8.getter())
  {
    char v18 = *(_BYTE *)(i + v16);
LABEL_15:
    if (v18 == 43) {
      goto LABEL_27;
    }
    unint64_t v19 = v10;
    if (v14 == v15) {
      unint64_t v19 = _StringGuts._slowEnsureMatchingEncoding(_:)(v10, v8, v7);
    }
    unint64_t v16 = v19 >> 16;
    if (v19 >> 16 < v132) {
      break;
    }
    __break(1u);
LABEL_196:
    ;
  }

  if ((v7 & 0x1000000000000000LL) != 0)
  {
    char v21 = String.UTF8View._foreignSubscript(position:)();
    goto LABEL_26;
  }

  if ((v7 & 0x2000000000000000LL) != 0)
  {
    *(void *)&v133[0] = v8;
    *((void *)&v133[0] + 1) = v7 & 0xFFFFFFFFFFFFFFLL;
    char v21 = *((_BYTE *)v133 + v16);
    goto LABEL_26;
  }

  if ((v8 & 0x1000000000000000LL) == 0) {
    goto LABEL_279;
  }
  uint64_t v20 = (v7 & 0xFFFFFFFFFFFFFFFLL) + 32;
  while (2)
  {
    char v21 = *(_BYTE *)(v20 + v16);
LABEL_26:
    if (v21 != 45) {
      goto LABEL_47;
    }
LABEL_27:
    unint64_t v22 = v10;
    if (v14 == v15) {
      unint64_t v22 = _StringGuts._slowEnsureMatchingEncoding(_:)(v10, v8, v7);
    }
    unint64_t v16 = v22 >> 16;
    if (v22 >> 16 >= v132)
    {
      __break(1u);
      goto LABEL_43;
    }

    if ((v7 & 0x1000000000000000LL) != 0)
    {
      char v24 = String.UTF8View._foreignSubscript(position:)();
    }

    else if ((v7 & 0x2000000000000000LL) != 0)
    {
      *(void *)&v133[0] = v8;
      *((void *)&v133[0] + 1) = v7 & 0xFFFFFFFFFFFFFFLL;
      char v24 = *((_BYTE *)v133 + v16);
    }

    else
    {
      if ((v8 & 0x1000000000000000LL) == 0) {
        goto LABEL_273;
      }
      uint64_t v23 = (v7 & 0xFFFFFFFFFFFFFFFLL) + 32;
LABEL_34:
      char v24 = *(_BYTE *)(v23 + v16);
    }

    _So9NSDecimala__isNegative_setter(v24 == 45, v135);
    if (v14 == v15)
    {
LABEL_43:
      unint64_t v10 = _StringGuts._slowEnsureMatchingEncoding(_:)(v10, v8, v7);
      if ((v7 & 0x1000000000000000LL) == 0) {
        goto LABEL_39;
      }
LABEL_44:
      if (v132 <= v10 >> 16)
      {
        __break(1u);
LABEL_202:
        __break(1u);
        goto LABEL_203;
      }

      unint64_t v10 = String.UTF8View._foreignIndex(after:)();
      goto LABEL_46;
    }

    if ((v7 & 0x1000000000000000LL) != 0) {
      goto LABEL_44;
    }
LABEL_39:
    unint64_t v10 = (v10 & 0xFFFFFFFFFFFF0000LL) + 65540;
LABEL_46:
    unint64_t v134 = v10;
    unint64_t v12 = v10 >> 14;
LABEL_47:
    unint64_t v128 = v8;
    if (v12 == v131)
    {
LABEL_48:
      unint64_t v134 = v10;
LABEL_49:
      if (v131 <= v10 >> 14) {
        goto LABEL_245;
      }
      uint64_t v25 = (v8 >> 59) & 1;
      if ((v7 & 0x1000000000000000LL) == 0) {
        LOBYTE(v25) = 1;
      }
      uint64_t v26 = v10 & 0xC;
      uint64_t v14 = 4LL << v25;
      unint64_t v27 = v10;
      if (v26 != 4LL << v25)
      {
LABEL_53:
        unint64_t v28 = v27 >> 16;
        if (v27 >> 16 >= v132)
        {
          __break(1u);
        }

        else if ((v7 & 0x1000000000000000LL) == 0)
        {
          if ((v7 & 0x2000000000000000LL) == 0)
          {
            if ((v8 & 0x1000000000000000LL) != 0)
            {
              uint64_t v29 = (v7 & 0xFFFFFFFFFFFFFFFLL) + 32;
              goto LABEL_58;
            }

            goto LABEL_200;
          }

          *(void *)&v133[0] = v8;
          *((void *)&v133[0] + 1) = v7 & 0xFFFFFFFFFFFFFFLL;
          char v30 = *((_BYTE *)v133 + v28);
          goto LABEL_105;
        }

        char v30 = String.UTF8View._foreignSubscript(position:)();
        goto LABEL_105;
      }

LABEL_277:
      __break(1u);
LABEL_278:
      __break(1u);
LABEL_279:
      uint64_t v20 = _StringObject.sharedUTF8.getter();
      continue;
    }

    break;
  }

  uint64_t v15 = 0LL;
  unint64_t v6 = v7 & 0xFFFFFFFFFFFFFFLL;
  unint64_t v12 = 10LL;
  while (2)
  {
    unint64_t v99 = v10;
    v10 &= 0xCu;
    unint64_t v100 = v99;
    if (v10 == v14) {
      unint64_t v99 = _StringGuts._slowEnsureMatchingEncoding(_:)(v99, v8, v7);
    }
    unint64_t v8 = v99 >> 16;
    if (v99 >> 16 < v132)
    {
      if ((v7 & 0x1000000000000000LL) != 0)
      {
        unint64_t v8 = v128;
        char v105 = String.UTF8View._foreignSubscript(position:)();
        uint64_t v103 = UInt8.digitValue.getter(v105);
        if ((v106 & 1) != 0) {
          goto LABEL_238;
        }
      }

      else if ((v7 & 0x2000000000000000LL) != 0)
      {
        *(void *)&v133[0] = v128;
        *((void *)&v133[0] + 1) = v7 & 0xFFFFFFFFFFFFFFLL;
        char v107 = *((_BYTE *)v133 + v8);
        unint64_t v8 = v128;
        uint64_t v103 = UInt8.digitValue.getter(v107);
        if ((v108 & 1) != 0) {
          goto LABEL_238;
        }
      }

      else
      {
        uint64_t v101 = (v7 & 0xFFFFFFFFFFFFFFFLL) + 32;
        if ((v128 & 0x1000000000000000LL) == 0) {
          uint64_t v101 = _StringObject.sharedUTF8.getter();
        }
        char v102 = *(_BYTE *)(v101 + v8);
        unint64_t v8 = v128;
        uint64_t v103 = UInt8.digitValue.getter(v102);
        if ((v104 & 1) != 0)
        {
LABEL_238:
          unint64_t v10 = v100;
          goto LABEL_239;
        }
      }

      uint64_t v109 = 10 * v15;
      uint64_t v15 = v109 + v103;
      if (__OFADD__(v109, v103)) {
        goto LABEL_267;
      }
      if (v15 > 254) {
        goto LABEL_243;
      }
      if (v10 == v14)
      {
        unint64_t v100 = _StringGuts._slowEnsureMatchingEncoding(_:)(v100, v8, v7);
        if ((v7 & 0x1000000000000000LL) == 0) {
          goto LABEL_215;
        }
LABEL_234:
        if (v132 <= v100 >> 16) {
          goto LABEL_268;
        }
        unint64_t v10 = String.UTF8View._foreignIndex(after:)();
      }

      else
      {
        if ((v7 & 0x1000000000000000LL) != 0) {
          goto LABEL_234;
        }
LABEL_215:
        unint64_t v10 = (v100 & 0xFFFFFFFFFFFF0000LL) + 65540;
      }

      if (v131 == v10 >> 14) {
        goto LABEL_239;
      }
      continue;
    }

    break;
  }

  __break(1u);
LABEL_266:
  __break(1u);
LABEL_267:
  __break(1u);
LABEL_268:
  __break(1u);
LABEL_269:
  uint64_t v15 = (unint64_t)_StringGuts._slowEnsureMatchingEncoding(_:)(v10, v8, v7) >> 16;
  if ((v7 & 0x1000000000000000LL) == 0) {
    goto LABEL_254;
  }
LABEL_270:
  if (v132 >= v15)
  {
    uint64_t v15 = String.UTF8View._foreignDistance(from:to:)();
    goto LABEL_254;
  }

  __break(1u);
}

                __break(1u);
                goto LABEL_278;
              }

              unint64_t v153 = v170;
            }
          }
        }

            uint64_t v251 = a6;
            uint64_t v252 = v17;
            unint64_t v84 = v332;
            goto LABEL_278;
          }

          __int16 v216 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          unint64_t v84 = v332;
          if ((v216 & 1) != 0) {
            goto LABEL_178;
          }
LABEL_300:
          __break(1u);
LABEL_301:
          __break(1u);
        }

        CocoaError.Code.init(fileErrno:reading:)(v86, 0);
        char v102 = (uint64_t (*)(void))v337._countAndFlagsBits;
        uint64_t v103 = v332;
        char v104 = v333;
        if ((_DWORD)v15 == 102)
        {
          uint64_t v15 = 0LL;
          char v105 = (uint64_t)v331;
          goto LABEL_193;
        }

        if ((POSIXErrorCode.init(rawValue:)() & 0x100000000LL) == 0)
        {
          static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSPOSIXErrorDomain");
          uint64_t v140 = (int)POSIXErrorCode.rawValue.getter();
          uint64_t v141 = objc_allocWithZone((Class)&OBJC_CLASS___NSError);
          double v142 = String._bridgeToObjectiveCImpl()();
          swift_bridgeObjectRelease();
          uint64_t v15 = (uint64_t)objc_msgSend( v141,  sel_initWithDomain_code_userInfo_,  v142,  v140,  _NativeDictionary.bridged()());
          swift_unknownObjectRelease();
          swift_unknownObjectRelease();
          __int128 v143 = objc_msgSend((id)v15, sel_domain);
          Swift::OpaquePointer v144 = static String._unconditionallyBridgeFromObjectiveC(_:)(v143);
          uint64_t v146 = v145;

          if (v144 == static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSPOSIXErrorDomain")
            && v146 == v147)
          {
            swift_bridgeObjectRelease_n();
            char v105 = (uint64_t)v331;
            uint64_t v103 = v332;
            char v104 = v333;
          }

          else
          {
            uint64_t v243 = _stringCompareWithSmolCheck(_:_:expecting:)();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            char v105 = (uint64_t)v331;
            uint64_t v103 = v332;
            char v104 = v333;
            if ((v243 & 1) == 0) {
              goto LABEL_301;
            }
          }

                            __break(1u);
                          }

uint64_t outlined init with take of NSDecimal.DecimalParseResult(uint64_t a1, uint64_t a2)
{
  return a2;
}

unint64_t lazy protocol witness table accessor for type NSDecimal.CodingKeys and conformance NSDecimal.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type NSDecimal.CodingKeys and conformance NSDecimal.CodingKeys;
  if (!lazy protocol witness table cache variable for type NSDecimal.CodingKeys and conformance NSDecimal.CodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C](&protocol conformance descriptor for NSDecimal.CodingKeys, &unk_189C77E40);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type NSDecimal.CodingKeys and conformance NSDecimal.CodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type NSDecimal.CodingKeys and conformance NSDecimal.CodingKeys;
  if (!lazy protocol witness table cache variable for type NSDecimal.CodingKeys and conformance NSDecimal.CodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C](&protocol conformance descriptor for NSDecimal.CodingKeys, &unk_189C77E40);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type NSDecimal.CodingKeys and conformance NSDecimal.CodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type NSDecimal.CodingKeys and conformance NSDecimal.CodingKeys;
  if (!lazy protocol witness table cache variable for type NSDecimal.CodingKeys and conformance NSDecimal.CodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C](&protocol conformance descriptor for NSDecimal.CodingKeys, &unk_189C77E40);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type NSDecimal.CodingKeys and conformance NSDecimal.CodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type NSDecimal.CodingKeys and conformance NSDecimal.CodingKeys;
  if (!lazy protocol witness table cache variable for type NSDecimal.CodingKeys and conformance NSDecimal.CodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C](&protocol conformance descriptor for NSDecimal.CodingKeys, &unk_189C77E40);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type NSDecimal.CodingKeys and conformance NSDecimal.CodingKeys);
  }

  return result;
}

uint64_t specialized NSDecimal.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x746E656E6F707865LL && a2 == 0xE800000000000000LL;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0LL;
  }

  else if (a1 == 0x6874676E656CLL && a2 == 0xE600000000000000LL {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1LL;
  }

  else if (a1 == 0x69746167654E7369LL && a2 == 0xEA00000000006576LL {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 2LL;
  }

  else if (a1 == 0x6361706D6F437369LL && a2 == 0xE900000000000074LL {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 3LL;
  }

  else if (a1 == 0x61737369746E616DLL && a2 == 0xE800000000000000LL)
  {
    swift_bridgeObjectRelease();
    return 4LL;
  }

  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0) {
      return 4LL;
    }
    else {
      return 5LL;
    }
  }

void specialized static NSDecimal.-= infix(_:_:)( int *a1, unint64_t a2, unint64_t a3, unsigned int a4)
{
  __int16 v4 = a4;
  uint64_t v136 = *MEMORY[0x1895F89C0];
  int v5 = *a1;
  __int16 v116 = *((_WORD *)a1 + 2);
  unint64_t v6 = HIDWORD(a2);
  unint64_t v7 = HIWORD(a2);
  __int16 v119 = *((_WORD *)a1 + 3);
  LODWORD(v8) = a2;
  unint64_t v9 = a3 >> 16;
  unint64_t v10 = HIDWORD(a3);
  unint64_t v11 = HIWORD(a3);
  __int16 v110 = *((_WORD *)a1 + 5);
  __int16 v12 = a3;
  unsigned int v13 = HIWORD(a4);
  __int16 v114 = *((_WORD *)a1 + 6);
  __int16 v112 = *((_WORD *)a1 + 7);
  __int16 v104 = *((_WORD *)a1 + 4);
  __int16 v106 = *((_WORD *)a1 + 8);
  __int16 v108 = *((_WORD *)a1 + 9);
  int v133 = a2;
  LOWORD(v134) = WORD2(a2);
  WORD1(v134) = HIWORD(a2);
  HIDWORD(v134) = a3;
  LOWORD(v135) = WORD2(a3);
  WORD1(v135) = HIWORD(a3);
  HIDWORD(v135) = a4;
  unint64_t v130 = a2;
  unint64_t v131 = a3;
  unsigned int v132 = a4;
  if (_So9NSDecimala__length_getter(&v130))
  {
    LODWORD(v130) = v8;
    WORD2(v130) = v6;
    HIWORD(v130) = v7;
    LOWORD(v131) = v12;
    WORD1(v131) = v9;
    WORD2(v131) = v10;
    HIWORD(v131) = v11;
    LOWORD(v132) = v4;
    HIWORD(v132) = v13;
    int isNegative_getter = _So9NSDecimala__isNegative_getter(&v130);
    _So9NSDecimala__isNegative_setter(isNegative_getter ^ 1u, &v133);
    LODWORD(v8) = v133;
    LOWORD(v6) = v134;
    LOWORD(v7) = WORD1(v134);
    __int16 v12 = WORD2(v134);
    LOWORD(v9) = HIWORD(v134);
    LOWORD(v10) = v135;
    LOWORD(v11) = WORD1(v135);
    __int16 v4 = WORD2(v135);
    LOWORD(v13) = HIWORD(v135);
  }

  LODWORD(v130) = v5;
  WORD2(v130) = v116;
  HIWORD(v130) = v119;
  LOWORD(v131) = v104;
  WORD1(v131) = v110;
  WORD2(v131) = v114;
  HIWORD(v131) = v112;
  LOWORD(v132) = v106;
  HIWORD(v132) = v108;
  if (!_So9NSDecimala__length_getter(&v130))
  {
    LODWORD(v130) = v5;
    WORD2(v130) = v116;
    HIWORD(v130) = v119;
    LOWORD(v131) = v104;
    WORD1(v131) = v110;
    WORD2(v131) = v114;
    HIWORD(v131) = v112;
    LOWORD(v132) = v106;
    HIWORD(v132) = v108;
  }

  LODWORD(v130) = v8;
  WORD2(v130) = v6;
  HIWORD(v130) = v7;
  LOWORD(v131) = v12;
  WORD1(v131) = v9;
  WORD2(v131) = v10;
  HIWORD(v131) = v11;
  LOWORD(v132) = v4;
  HIWORD(v132) = v13;
  if (!_So9NSDecimala__length_getter(&v130))
  {
    LODWORD(v130) = v8;
    WORD2(v130) = v6;
    HIWORD(v130) = v7;
    LOWORD(v131) = v12;
    WORD1(v131) = v9;
    WORD2(v131) = v10;
    HIWORD(v131) = v11;
    LOWORD(v132) = v4;
    HIWORD(v132) = v13;
  }

  LODWORD(v130) = v5;
  WORD2(v130) = v116;
  HIWORD(v130) = v119;
  LOWORD(v131) = v104;
  WORD1(v131) = v110;
  WORD2(v131) = v114;
  HIWORD(v131) = v112;
  LOWORD(v132) = v106;
  HIWORD(v132) = v108;
  if (!_So9NSDecimala__length_getter(&v130))
  {
    uint64_t v32 = a1;
    int v17 = v8;
    LOWORD(v8) = v12;
    LOWORD(v5) = v4;
    LOWORD(v18) = v13;
    goto LABEL_20;
  }

  LODWORD(v130) = v8;
  WORD2(v130) = v6;
  HIWORD(v130) = v7;
  LOWORD(v131) = v12;
  WORD1(v131) = v9;
  WORD2(v131) = v10;
  HIWORD(v131) = v11;
  LOWORD(v132) = v4;
  HIWORD(v132) = v13;
  if (!_So9NSDecimala__length_getter(&v130))
  {
    int v17 = v5;
    LOWORD(v8) = v104;
    LOWORD(v5) = v106;
    LOWORD(v18) = v108;
    LOWORD(v6) = v116;
    LOWORD(v7) = v119;
    uint64_t v32 = a1;
    LOWORD(v9) = v110;
    LOWORD(v11) = v112;
    LOWORD(v10) = v114;
    goto LABEL_20;
  }

  LODWORD(v130) = v5;
  WORD2(v130) = v116;
  HIWORD(v130) = v119;
  LOWORD(v131) = v104;
  WORD1(v131) = v110;
  WORD2(v131) = v114;
  HIWORD(v131) = v112;
  LOWORD(v132) = v106;
  HIWORD(v132) = v108;
  LODWORD(v127) = v8;
  WORD2(v127) = v6;
  HIWORD(v127) = v7;
  LOWORD(v128) = v12;
  WORD1(v128) = v9;
  WORD2(v128) = v10;
  HIWORD(v128) = v11;
  LOWORD(v129) = v4;
  HIWORD(v129) = v13;
  specialized static NSDecimal._normalize(a:b:roundingMode:)((int *)&v130, (uint64_t)&v127);
  uint64_t v15 = WORD2(v130);
  uint64_t v117 = HIWORD(v130);
  uint64_t v120 = v130;
  unint64_t v124 = v130;
  uint64_t v115 = (unsigned __int16)v131;
  unint64_t v125 = v131;
  uint64_t v109 = WORD2(v131);
  uint64_t v111 = WORD1(v131);
  uint64_t v107 = HIWORD(v131);
  int v105 = (unsigned __int16)v132;
  unsigned int v126 = v132;
  int v113 = HIWORD(v132);
  int v16 = _So9NSDecimala__length_getter(&v124);
  int v17 = v127;
  unint64_t v6 = WORD2(v127);
  unint64_t v7 = HIWORD(v127);
  uint64_t v8 = (unsigned __int16)v128;
  unint64_t v9 = WORD1(v128);
  unint64_t v10 = WORD2(v128);
  unint64_t v11 = HIWORD(v128);
  int v5 = (unsigned __int16)v129;
  int v18 = HIWORD(v129);
  if (!v16) {
    goto LABEL_17;
  }
  __int16 v101 = v15;
  uint64_t v102 = v127;
  unint64_t v124 = v127;
  unint64_t v125 = v128;
  unsigned int v126 = v129;
  if (!_So9NSDecimala__length_getter(&v124))
  {
    LOWORD(v7) = v117;
    int v17 = v120;
    LOWORD(v6) = v15;
    LOWORD(v8) = v115;
    LOWORD(v10) = v109;
    LOWORD(v9) = v111;
    LOWORD(v11) = v107;
    LOWORD(v5) = v105;
    LOWORD(v18) = v113;
    goto LABEL_17;
  }

  LODWORD(v124) = v120;
  WORD2(v124) = v15;
  HIWORD(v124) = v117;
  LOWORD(v125) = v115;
  WORD1(v125) = v111;
  WORD2(v125) = v109;
  HIWORD(v125) = v107;
  LOWORD(v126) = v105;
  HIWORD(v126) = v113;
  unint64_t v121 = __PAIR64__(__PAIR32__(v117, v15), v120);
  LOWORD(v122) = v115;
  *(_DWORD *)((char *)&v122 + 2) = __PAIR32__(v109, v111);
  HIWORD(v122) = v107;
  LOWORD(v123) = v105;
  HIWORD(v123) = v113;
  int v100 = _So9NSDecimala__isNegative_getter(&v121);
  LODWORD(v121) = v102;
  WORD2(v121) = v6;
  HIWORD(v121) = v7;
  LOWORD(v122) = v8;
  WORD1(v122) = v9;
  WORD2(v122) = v10;
  HIWORD(v122) = v11;
  LOWORD(v123) = v5;
  HIWORD(v123) = v18;
  if (v100 == _So9NSDecimala__isNegative_getter(&v121))
  {
    LODWORD(v121) = v120;
    WORD2(v121) = v15;
    HIWORD(v121) = v117;
    LOWORD(v122) = v115;
    WORD1(v122) = v111;
    WORD2(v122) = v109;
    HIWORD(v122) = v107;
    LOWORD(v123) = v105;
    HIWORD(v123) = v113;
    uint64_t v19 = _So9NSDecimala__isNegative_getter(&v121);
    _So9NSDecimala__isNegative_setter(v19, &v124);
    NSDecimal.asVariableLengthInteger()( v120 | (v15 << 32) | (v117 << 48),  v115 | (v111 << 16) | (v109 << 32) | (v107 << 48),  v105 | (v113 << 16));
    uint64_t v21 = v20;
    NSDecimal.asVariableLengthInteger()( v102 | (v6 << 32) | (v7 << 48),  v8 | (v9 << 16) | (v10 << 32) | (v11 << 48),  v5 | (v18 << 16));
    uint64_t v24 = specialized static NSDecimal._integerAdd(lhs:rhs:maxResultLength:)(v21, v22, 9LL, v23);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    unint64_t v25 = *(void *)(v24 + 16);
    if (v25 <= 8)
    {
      v27._rawValue = (void *)v24;
LABEL_26:
      _So9NSDecimala__length_setter(v25, &v124);
      NSDecimal.copyVariableLengthInteger(_:)(v27);
      char v30 = v37;
      swift_bridgeObjectRelease();
      if (v37) {
        goto LABEL_16;
      }
      goto LABEL_148;
    }

    specialized static NSDecimal._fitMantissa(_:roundingMode:)(v24, 0LL);
    v27._rawValue = v26;
    uint64_t v29 = v28;
    swift_bridgeObjectRelease();
    int v62 = v124;
    __int16 v63 = WORD2(v124);
    __int16 v64 = HIWORD(v124);
    __int16 v65 = v125;
    __int16 v66 = WORD1(v125);
    unint64_t v36 = WORD2(v125);
    __int16 v67 = HIWORD(v125);
    __int16 v68 = v126;
    unint64_t v121 = v124;
    unint64_t v122 = v125;
    unsigned int v123 = v126;
    __int16 v118 = HIWORD(v126);
    int v69 = _So9NSDecimala__exponent_getter((char *)&v121);
    if (v29 >= (uint64_t)0xFFFFFFFF80000000LL)
    {
      if (v29 <= 0x7FFFFFFF)
      {
        if (!__OFADD__(v69, (_DWORD)v29))
        {
          if (v69 + (int)v29 > 127)
          {
            swift_bridgeObjectRelease();
LABEL_15:
            lazy protocol witness table accessor for type NSDecimal._CalculationError and conformance NSDecimal._CalculationError();
            char v30 = (void *)swift_allocError();
            *uint64_t v31 = 0;
            swift_willThrow();
            goto LABEL_16;
          }

          LODWORD(v121) = v62;
          WORD2(v121) = v63;
          HIWORD(v121) = v64;
          LOWORD(v122) = v65;
          WORD1(v122) = v66;
          WORD2(v122) = v36;
          HIWORD(v122) = v67;
          LOWORD(v123) = v68;
          HIWORD(v123) = v118;
          int v70 = _So9NSDecimala__exponent_getter((char *)&v121);
          BOOL v71 = __OFADD__(v70, (_DWORD)v29);
          uint64_t v72 = (v70 + v29);
          if (!v71)
          {
            _So9NSDecimala__exponent_setter(v72, &v124);
            unint64_t v25 = *((void *)v27._rawValue + 2);
            if (HIDWORD(v25)) {
              goto LABEL_162;
            }
            goto LABEL_26;
          }

          __break(1u);
          goto LABEL_160;
        }

LABEL_156:
        __break(1u);
LABEL_157:
        __break(1u);
LABEL_158:
        __break(1u);
      }

          swift_unknownObjectRelease();
          swift_unknownObjectRelease();
          __int16 v108 = v16 & 0xFFFFFFFFFFFFF0FFLL | (v119 << 8);
          goto LABEL_139;
        }

        unint64_t v95 = *(void *)(v33 + 72);
      }

      else if (v328 >= 0x800)
      {
        goto LABEL_412;
      }

      swift_unknownObjectRetain_n();
      __int16 v108 = specialized Rope._endPath.getter(v42);
      unint64_t result = swift_unknownObjectRelease();
      int v5 = 0LL;
      uint64_t v3 = 0LL;
      if (!v42)
      {
        uint64_t v107 = 0LL;
        goto LABEL_158;
      }

      __break(1u);
      goto LABEL_157;
    }

      __break(1u);
      goto LABEL_157;
    }

        __break(1u);
LABEL_157:
        __break(1u);
LABEL_158:
        __break(1u);
      }

      __break(1u);
      goto LABEL_157;
    }

        __break(1u);
LABEL_157:
        __break(1u);
LABEL_158:
        __break(1u);
      }

                    __break(1u);
LABEL_157:
                    __break(1u);
LABEL_158:
                    __break(1u);
                    goto LABEL_159;
                  }

                  unint64_t v6 = v15;
                }
              }
            }
          }

          swift_unknownObjectRelease();
          swift_unknownObjectRelease();
          __int16 v116 = v11 & 0xFFFFFFFFFFFFF0FFLL | (v125 << 8);
LABEL_137:
          swift_unknownObjectRetain();
          uint64_t v115 = specialized Rope._Node.distanceFromStart<A>(to:in:)(v102, v116, a3, v100, v101);
          unint64_t result = swift_unknownObjectRelease_n();
          __int16 v119 = v42 - v16;
          if (__OFSUB__(v42, v16)) {
            goto LABEL_395;
          }
          goto LABEL_158;
        }
      }

      else
      {
        uint64_t v42 = v340 >> 11;
        uint64_t v103 = v348;
        if (v340 >= 0x800) {
          goto LABEL_408;
        }
      }

      swift_unknownObjectRetain_n();
      __int16 v116 = specialized Rope._endPath.getter(v100);
      swift_unknownObjectRelease();
      a3 = 0LL;
      int v16 = 0LL;
      if (v100) {
        goto LABEL_137;
      }
      uint64_t v115 = 0LL;
      __int16 v119 = v42;
LABEL_158:
      *(void *)&v375 = v102;
      *((void *)&v375 + 1) = v116;
      *(void *)&id v376 = a3;
      *((void *)&v376 + 1) = v115;
      *(void *)&id v377 = v119;
      swift_retain();
      swift_bridgeObjectRetain();
      specialized AttributedString.Guts.updateRun(at:within:with:)( (uint64_t *)&v375,  0LL,  v42,  (void *)v32,  (uint64_t *)&v357,  v103,  v344,  (uint64_t)&v363);
      swift_bridgeObjectRelease();
      swift_release();
      int v83 = v377;
      unint64_t v127 = *(void *)(v32 + 64);
      unint64_t v128 = *(void *)(v32 + 72);
      unsigned int v129 = *(void *)(v32 + 80);
      unint64_t v130 = *(void *)(v32 + 88);
      swift_unknownObjectRetain();
      AttributedString._InternalRuns.index(atUTF8Offset:preferEnd:)( 0LL,  v354 & 1,  v127,  v128,  v129,  v130,  (uint64_t *)&v432);
      unint64_t v131 = v434;
      swift_unknownObjectRelease();
      if (v131 >= v83 || !*(void *)(v357 + 16))
      {
        swift_release();
        unint64_t v88 = v355;
        goto LABEL_162;
      }
    }
  }

  swift_release();
LABEL_162:
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  *(void *)&v375 = v88;
  unsigned int v132 = *(void *)(v32 + 64);
  int v133 = *(void *)(v32 + 72);
  uint64_t v134 = *(void *)(v32 + 80);
  uint64_t v135 = *(void *)(v32 + 88);
  swift_unknownObjectRetain();
  AttributedString._InternalRuns.index(atUTF8Offset:preferEnd:)( v88 - 1,  v354 & 1,  v132,  v133,  v134,  v135,  (uint64_t *)&v432);
  v349 = v432;
  Swift::Int v345 = v433;
  uint64_t v136 = v434;
  swift_unknownObjectRelease();
  v445[0] = v349;
  v445[1] = v345;
  uint64_t v446 = v136;
  unsigned int v137 = *(void *)(v32 + 64);
  unsigned int v138 = *(void *)(v32 + 72);
  uint64_t v139 = *(void *)(v32 + 80);
  uint64_t v140 = *(void *)(v32 + 88);
  swift_unknownObjectRetain();
  AttributedString._InternalRuns.subscript.getter((unint64_t)v445, v137, v138, v139, v140);
  double v142 = v141;
  uint64_t v42 = v143;
  swift_unknownObjectRelease();
  unint64_t v11 = AttributedString._AttributeStorage.filterWithoutInvalidatingDependents(_:)( (uint64_t (*)(uint64_t, uint64_t, __int128 *))closure #1 in AttributedString.Guts._characterInvalidatedAttributes(at:),  0LL,  v142);
  uint64_t v145 = v144;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  int v16 = *(void *)(v11 + 16);
  swift_bridgeObjectRetain();
  unint64_t result = Set.init(minimumCapacity:)();
  a3 = 0LL;
  *(void *)&v357 = result;
  uint64_t v146 = 1LL << *(_BYTE *)(v11 + 32);
  unint64_t v47 = -1LL;
  if (v146 < 64) {
    unint64_t v47 = ~(-1LL << v146);
  }
  uint64_t v147 = v11 + 64;
  uint64_t v148 = v47 & *(void *)(v11 + 64);
  unsigned int v149 = (unint64_t)(v146 + 63) >> 6;
  while (1)
  {
    if (v148)
    {
      unsigned int v150 = __clz(__rbit64(v148));
      v148 &= v148 - 1;
      uint64_t v151 = v150 | (a3 << 6);
      goto LABEL_166;
    }

    uint64_t v44 = a3 + 1;
    if (__OFADD__(a3, 1LL)) {
      goto LABEL_369;
    }
    if (v44 >= v149) {
      break;
    }
    int v154 = *(void *)(v147 + 8 * v44);
    ++a3;
    if (!v154)
    {
      a3 = v44 + 1;
      if (v44 + 1 >= v149) {
        break;
      }
      int v154 = *(void *)(v147 + 8 * a3);
      if (!v154)
      {
        a3 = v44 + 2;
        if (v44 + 2 >= v149) {
          break;
        }
        int v154 = *(void *)(v147 + 8 * a3);
        if (!v154)
        {
          a3 = v44 + 3;
          if (v44 + 3 >= v149) {
            break;
          }
          int v154 = *(void *)(v147 + 8 * a3);
          if (!v154)
          {
            a3 = v44 + 4;
            if (v44 + 4 >= v149) {
              break;
            }
            int v154 = *(void *)(v147 + 8 * a3);
            if (!v154)
            {
              uint64_t v155 = v44 + 5;
              if (v155 >= v149) {
                break;
              }
              int v154 = *(void *)(v147 + 8 * v155);
              if (!v154)
              {
                while (1)
                {
                  a3 = v155 + 1;
                  if (__OFADD__(v155, 1LL)) {
                    break;
                  }
                  if (a3 >= v149) {
                    goto LABEL_186;
                  }
                  int v154 = *(void *)(v147 + 8 * a3);
                  ++v155;
                  if (v154) {
                    goto LABEL_185;
                  }
                }

            __break(1u);
LABEL_157:
            __break(1u);
            goto LABEL_158;
          }

void specialized static NSDecimal.*= infix(_:_:)( unsigned int *a1, unint64_t a2, unint64_t a3, unsigned int a4)
{
  uint64_t v7 = *((unsigned __int16 *)a1 + 3);
  uint64_t v8 = *((unsigned __int16 *)a1 + 4);
  uint64_t v9 = *((unsigned __int16 *)a1 + 5);
  uint64_t v10 = *((unsigned __int16 *)a1 + 6);
  uint64_t v11 = *((unsigned __int16 *)a1 + 7);
  int v12 = *((unsigned __int16 *)a1 + 8);
  int v13 = *((unsigned __int16 *)a1 + 9);
  uint64_t v68 = *((unsigned __int16 *)a1 + 2);
  uint64_t v69 = *a1;
  LODWORD(v83[0]) = *a1;
  WORD2(v83[0]) = v68;
  HIWORD(v83[0]) = v7;
  uint64_t v72 = v9;
  uint64_t v73 = v8;
  LOWORD(v83[1]) = v8;
  WORD1(v83[1]) = v9;
  uint64_t v70 = v11;
  uint64_t v71 = v10;
  WORD2(v83[1]) = v10;
  HIWORD(v83[1]) = v11;
  int v66 = v13;
  int v67 = v12;
  LOWORD(v83[2]) = v12;
  WORD1(v83[2]) = v13;
  if (!_So9NSDecimala__length_getter(v83))
  {
    LODWORD(v83[0]) = v69;
    WORD2(v83[0]) = v68;
    HIWORD(v83[0]) = v7;
    LOWORD(v83[1]) = v73;
    WORD1(v83[1]) = v72;
    WORD2(v83[1]) = v71;
    HIWORD(v83[1]) = v70;
    LOWORD(v83[2]) = v67;
    WORD1(v83[2]) = v66;
  }

  v83[0] = a2;
  v83[1] = a3;
  LODWORD(v83[2]) = a4;
  if (!_So9NSDecimala__length_getter(v83))
  {
    v83[0] = a2;
    v83[1] = a3;
    LODWORD(v83[2]) = a4;
    if (_So9NSDecimala__isNegative_getter(v83))
    {
LABEL_15:
      lazy protocol witness table accessor for type NSDecimal._CalculationError and conformance NSDecimal._CalculationError();
      uint64_t v28 = (void *)swift_allocError();
      *uint64_t v29 = 0;
      swift_willThrow();
LABEL_57:
      *(_OWORD *)((char *)v83 + 4) = 0uLL;
      _So9NSDecimala__exponent_setter(0LL, v83);
      _So9NSDecimala__length_setter(0LL, v83);
      _So9NSDecimala__isNegative_setter(1LL, v83);
      _So9NSDecimala__isCompact_setter_0(0LL, v83);
      _So9NSDecimala__reserved_setter(v83);

LABEL_58:
      unsigned int v30 = v83[0];
      __int128 v15 = *(_OWORD *)((char *)v83 + 4);
      goto LABEL_59;
    }
  }

  unint64_t v60 = HIWORD(a3);
  unint64_t v61 = HIDWORD(a3);
  unint64_t v62 = a3 >> 16;
  unint64_t v63 = HIWORD(a2);
  __int16 v64 = HIWORD(a4);
  LODWORD(v83[0]) = v69;
  WORD2(v83[0]) = v68;
  HIWORD(v83[0]) = v7;
  LOWORD(v83[1]) = v73;
  WORD1(v83[1]) = v72;
  WORD2(v83[1]) = v71;
  HIWORD(v83[1]) = v70;
  LOWORD(v83[2]) = v67;
  WORD1(v83[2]) = v66;
  int v14 = _So9NSDecimala__length_getter(v83);
  __int128 v15 = 0uLL;
  if (!v14)
  {
    unsigned int v30 = 0;
LABEL_59:
    uint64_t v41 = a1;
    goto LABEL_60;
  }

  unint64_t v16 = a2;
  v83[0] = a2;
  unint64_t v17 = HIDWORD(a2);
  __int16 v18 = a3;
  v83[1] = a3;
  __int16 v19 = a4;
  LODWORD(v83[2]) = a4;
  if (!_So9NSDecimala__length_getter(v83))
  {
    unsigned int v30 = 0;
    uint64_t v41 = a1;
    __int128 v15 = 0uLL;
LABEL_60:
    *uint64_t v41 = v30;
    *(_OWORD *)(v41 + 1) = v15;
    return;
  }

  __int16 v59 = v7;
  NSDecimal.asVariableLengthInteger()( v69 | (v68 << 32) | (v7 << 48),  v73 | (v72 << 16) | (v71 << 32) | (v70 << 48),  v67 | (v66 << 16));
  uint64_t v21 = v20;
  NSDecimal.asVariableLengthInteger()(v16, a3, a4);
  uint64_t v23 = v22;
  uint64_t v24 = *(void *)(v21 + 16);
  if (!v24 || (uint64_t v25 = *(void *)(v22 + 16)) == 0)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v58 = MEMORY[0x18961AFE8];
    goto LABEL_18;
  }

  uint64_t v26 = v24 + v25;
  if (__OFADD__(v24, v25)) {
    goto LABEL_69;
  }
  if (v26 > 15)
  {
    uint64_t v26 = 16LL;
LABEL_27:
    uint64_t v27 = static Array._allocateBufferUninitialized(minimumCapacity:)();
    *(void *)(v27 + 16) = v26;
    bzero((void *)(v27 + 32), 2 * v26);
    goto LABEL_28;
  }

  if (v26 < 0)
  {
LABEL_76:
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    goto LABEL_77;
  }

  if (v26) {
    goto LABEL_27;
  }
  uint64_t v27 = MEMORY[0x18961AFE8];
LABEL_28:
  uint64_t v43 = 0LL;
  uint64_t v44 = v23 + 32;
  uint64_t v45 = v27 + 32;
  while (2)
  {
    if (v43 == v25)
    {
LABEL_68:
      __break(1u);
LABEL_69:
      __break(1u);
LABEL_70:
      __break(1u);
LABEL_71:
      __break(1u);
      goto LABEL_72;
    }

    unsigned int v46 = 0;
    uint64_t v47 = 0LL;
    uint64_t v48 = v43 + 1;
    do
    {
      if (v24 == v47)
      {
        __break(1u);
LABEL_65:
        __break(1u);
LABEL_66:
        __break(1u);
LABEL_67:
        __break(1u);
        goto LABEL_68;
      }

      uint64_t v49 = v47 + v43;
      if (__OFADD__(v47, v43)) {
        goto LABEL_65;
      }
      if (v49 >= v26)
      {
        if (v46) {
          goto LABEL_55;
        }
        unsigned int v46 = *(unsigned __int16 *)(v44 + 2 * v43);
        if (*(_WORD *)(v44 + 2 * v43))
        {
          unsigned int v46 = *(unsigned __int16 *)(v21 + 2 * v47 + 32);
          if (*(_WORD *)(v21 + 2 * v47 + 32)) {
            goto LABEL_55;
          }
        }
      }

      else
      {
        if (v49 < 0) {
          goto LABEL_66;
        }
        uint64_t v50 = 2 * v49;
        unsigned int v51 = v46
        unsigned int v46 = HIWORD(v51);
        *(_WORD *)(v45 + v50) = v51;
      }

      ++v47;
    }

    while (v24 != v47);
    if (!v46) {
      goto LABEL_48;
    }
    BOOL v40 = __OFADD__(v24, v43);
    uint64_t v52 = v24 + v43;
    if (v40) {
      goto LABEL_70;
    }
    if (v52 >= v26)
    {
LABEL_55:
      lazy protocol witness table accessor for type NSDecimal._CalculationError and conformance NSDecimal._CalculationError();
      uint64_t v28 = (void *)swift_allocError();
      _BYTE *v56 = 0;
      swift_willThrow();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_56;
    }

    if (v52 < 0) {
      goto LABEL_71;
    }
    if ((unint64_t)v52 >= *(void *)(v27 + 16))
    {
LABEL_72:
      __break(1u);
LABEL_73:
      __break(1u);
      goto LABEL_74;
    }

    *(_WORD *)(v45 + 2 * v52) = v46;
LABEL_48:
    uint64_t v43 = v48;
    if (v48 != v25) {
      continue;
    }
    break;
  }

  uint64_t v53 = *(void *)(v27 + 16);
  uint64_t v58 = v27;
  if (v53 && !*(_WORD *)(v45 + 2 * v53 - 2))
  {
    uint64_t v54 = v53 + 14;
    do
    {
      *(void *)(v27 + 16) = v54 - 15;
      if (v54 == 15) {
        break;
      }
    }

    while (!*(unsigned __int16 *)(v27 + 2 * v54--));
  }

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
LABEL_18:
  memset(v83, 0, 20);
  int v74 = v69;
  __int16 v75 = v68;
  __int16 v76 = v59;
  __int16 v77 = v73;
  __int16 v78 = v72;
  __int16 v79 = v71;
  __int16 v80 = v70;
  __int16 v81 = v67;
  __int16 v82 = v66;
  int isNegative_getter = _So9NSDecimala__isNegative_getter(&v74);
  int v74 = v16;
  __int16 v75 = v17;
  __int16 v76 = v63;
  __int16 v77 = v18;
  __int16 v78 = v62;
  __int16 v79 = v61;
  __int16 v80 = v60;
  __int16 v81 = v19;
  __int16 v82 = v64;
  BOOL v32 = isNegative_getter != _So9NSDecimala__isNegative_getter(&v74);
  _So9NSDecimala__isNegative_setter(v32, v83);
  int v74 = v69;
  __int16 v75 = v68;
  __int16 v76 = v59;
  __int16 v77 = v73;
  __int16 v78 = v72;
  __int16 v79 = v71;
  __int16 v80 = v70;
  __int16 v81 = v67;
  __int16 v82 = v66;
  int v33 = _So9NSDecimala__exponent_getter((char *)&v74);
  int v74 = v16;
  __int16 v75 = v17;
  __int16 v76 = v63;
  __int16 v77 = v18;
  __int16 v78 = v62;
  __int16 v79 = v61;
  __int16 v80 = v60;
  __int16 v81 = v19;
  __int16 v82 = v64;
  uint64_t v34 = _So9NSDecimala__exponent_getter((char *)&v74) + v33;
  v35._rawValue = (void *)v58;
  if (*(void *)(v58 + 16) < 9uLL) {
    goto LABEL_24;
  }
  specialized static NSDecimal._fitMantissa(_:roundingMode:)(v58, 0LL);
  int v37 = v36;
  uint64_t v39 = v38;
  swift_bridgeObjectRelease();
  if (v39 > 0x7FFFFFFF)
  {
LABEL_74:
    __break(1u);
    goto LABEL_75;
  }

  BOOL v40 = __OFADD__((_DWORD)v34, (_DWORD)v39);
  uint64_t v34 = (v34 + v39);
  if (v40)
  {
LABEL_75:
    __break(1u);
    goto LABEL_76;
  }

  v35._rawValue = v37;
LABEL_24:
  NSDecimal.copyVariableLengthInteger(_:)(v35);
  if (v42)
  {
    uint64_t v28 = v42;
LABEL_56:
    swift_bridgeObjectRelease();
    goto LABEL_57;
  }

  unint64_t v57 = *((void *)v35._rawValue + 2);
  swift_bridgeObjectRelease();
  if (!HIDWORD(v57))
  {
    _So9NSDecimala__length_setter(v57, v83);
    _So9NSDecimala__isCompact_setter_0(0LL, v83);
    if ((int)v34 < 128)
    {
      _So9NSDecimala__exponent_setter(v34, v83);
      NSDecimal.compact()();
      goto LABEL_58;
    }

    goto LABEL_15;
  }

uint64_t associated type witness table accessor for ExpressibleByIntegerLiteral.IntegerLiteralType : _ExpressibleByBuiltinIntegerLiteral in NSDecimal()
{
  return MEMORY[0x1896187A8];
}

uint64_t base witness table accessor for Equatable in NSDecimal()
{
  return lazy protocol witness table accessor for type NSDecimal and conformance NSDecimal( &lazy protocol witness table cache variable for type NSDecimal and conformance NSDecimal,  (uint64_t)&protocol conformance descriptor for NSDecimal);
}

uint64_t base witness table accessor for Numeric in NSDecimal()
{
  return lazy protocol witness table accessor for type NSDecimal and conformance NSDecimal( &lazy protocol witness table cache variable for type NSDecimal and conformance NSDecimal,  (uint64_t)&protocol conformance descriptor for NSDecimal);
}

uint64_t base witness table accessor for AdditiveArithmetic in NSDecimal()
{
  return lazy protocol witness table accessor for type NSDecimal and conformance NSDecimal( &lazy protocol witness table cache variable for type NSDecimal and conformance NSDecimal,  (uint64_t)&protocol conformance descriptor for NSDecimal);
}

uint64_t base witness table accessor for ExpressibleByIntegerLiteral in NSDecimal()
{
  return lazy protocol witness table accessor for type NSDecimal and conformance NSDecimal( &lazy protocol witness table cache variable for type NSDecimal and conformance NSDecimal,  (uint64_t)&protocol conformance descriptor for NSDecimal);
}

uint64_t associated type witness table accessor for Numeric.Magnitude : Comparable in NSDecimal()
{
  return lazy protocol witness table accessor for type NSDecimal and conformance NSDecimal( &lazy protocol witness table cache variable for type NSDecimal and conformance NSDecimal,  (uint64_t)&protocol conformance descriptor for NSDecimal);
}

uint64_t associated type witness table accessor for Strideable.Stride : SignedNumeric in NSDecimal()
{
  return lazy protocol witness table accessor for type NSDecimal and conformance NSDecimal( &lazy protocol witness table cache variable for type NSDecimal and conformance NSDecimal,  (uint64_t)&protocol conformance descriptor for NSDecimal);
}

uint64_t lazy protocol witness table accessor for type NSDecimal and conformance NSDecimal( unint64_t *a1, uint64_t a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for NSDecimal(255LL);
    uint64_t result = MEMORY[0x186E20D4C](a2, v5);
    atomic_store(result, a1);
  }

  return result;
}

uint64_t storeEnumTagSinglePayload for NSDecimal.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 4 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 4) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFC) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFB) {
    return ((uint64_t (*)(void))((char *)&loc_18308221C + 4 * byte_183731246[v4]))();
  }
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_183082250 + 4 * byte_183731241[v4]))();
}

uint64_t sub_183082250(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_183082258(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x183082260LL);
  }
  return result;
}

uint64_t sub_18308226C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x183082274LL);
  }
  *(_BYTE *)uint64_t result = a2 + 4;
  return result;
}

uint64_t sub_183082278(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_183082280(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

void *type metadata accessor for NSDecimal.CodingKeys()
{
  return &unk_189C77E40;
}

uint64_t specialized _arrayForceCast<A, B>(_:)(unint64_t a1)
{
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v2 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }

  else
  {
    uint64_t v2 = *(void *)((a1 & 0xFFFFFFFFFFFFF8LL) + 0x10);
  }

  uint64_t v3 = MEMORY[0x18961AFE8];
  if (!v2) {
    return v3;
  }
  uint64_t v15 = MEMORY[0x18961AFE8];
  uint64_t result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)( 0,  v2 & ~(v2 >> 63),  0);
  if ((v2 & 0x8000000000000000LL) == 0)
  {
    if ((a1 & 0xC000000000000001LL) != 0)
    {
      uint64_t v5 = 0LL;
      uint64_t v3 = v15;
      do
      {
        MEMORY[0x186E1C36C](v5, a1);
        swift_dynamicCast();
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)( 0,  *(void *)(v3 + 16) + 1LL,  1);
          uint64_t v3 = v15;
        }

        unint64_t v7 = *(void *)(v3 + 16);
        unint64_t v6 = *(void *)(v3 + 24);
        if (v7 >= v6 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v6 > 1, v7 + 1, 1);
          uint64_t v3 = v15;
        }

        ++v5;
        *(void *)(v3 + 16) = v7 + 1;
        uint64_t v8 = v3 + 16 * v7;
        *(void *)(v8 + 32) = v13;
        *(void *)(v8 + 40) = v14;
      }

      while (v2 != v5);
    }

    else
    {
      unint64_t v9 = a1 + 32;
      uint64_t v3 = v15;
      do
      {
        swift_unknownObjectRetain();
        swift_dynamicCast();
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)( 0,  *(void *)(v3 + 16) + 1LL,  1);
          uint64_t v3 = v15;
        }

        unint64_t v11 = *(void *)(v3 + 16);
        unint64_t v10 = *(void *)(v3 + 24);
        if (v11 >= v10 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)( v10 > 1,  v11 + 1,  1);
          uint64_t v3 = v15;
        }

        *(void *)(v3 + 16) = v11 + 1;
        uint64_t v12 = v3 + 16 * v11;
        *(void *)(v12 + 32) = v13;
        *(void *)(v12 + 40) = v14;
        v9 += 8LL;
        --v2;
      }

      while (v2);
    }

    return v3;
  }

  __break(1u);
  return result;
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v2 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }

  else
  {
    uint64_t v2 = *(void *)((a1 & 0xFFFFFFFFFFFFF8LL) + 0x10);
  }

  uint64_t v3 = MEMORY[0x18961AFE8];
  if (!v2) {
    return v3;
  }
  unint64_t v16 = MEMORY[0x18961AFE8];
  uint64_t result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)( 0,  v2 & ~(v2 >> 63),  0);
  if ((v2 & 0x8000000000000000LL) == 0)
  {
    if ((a1 & 0xC000000000000001LL) != 0)
    {
      uint64_t v5 = 0LL;
      uint64_t v3 = v16;
      do
      {
        MEMORY[0x186E1C36C](v5, a1);
        swift_dynamicCast();
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)( 0,  *(void *)(v3 + 16) + 1LL,  1);
          uint64_t v3 = v16;
        }

        unint64_t v7 = *(void *)(v3 + 16);
        unint64_t v6 = *(void *)(v3 + 24);
        if (v7 >= v6 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v6 > 1, v7 + 1, 1);
          uint64_t v3 = v16;
        }

        ++v5;
        *(void *)(v3 + 16) = v7 + 1;
        uint64_t v8 = v3 + 40 * v7;
        *(void *)(v8 + 64) = v15;
        *(_OWORD *)(v8 + 32) = v13;
        *(_OWORD *)(v8 + 48) = v14;
      }

      while (v2 != v5);
    }

    else
    {
      unint64_t v9 = a1 + 32;
      uint64_t v3 = v16;
      do
      {
        swift_unknownObjectRetain();
        swift_dynamicCast();
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)( 0,  *(void *)(v3 + 16) + 1LL,  1);
          uint64_t v3 = v16;
        }

        unint64_t v11 = *(void *)(v3 + 16);
        unint64_t v10 = *(void *)(v3 + 24);
        if (v11 >= v10 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)( v10 > 1,  v11 + 1,  1);
          uint64_t v3 = v16;
        }

        *(void *)(v3 + 16) = v11 + 1;
        uint64_t v12 = v3 + 40 * v11;
        *(void *)(v12 + 64) = v15;
        *(_OWORD *)(v12 + 32) = v13;
        *(_OWORD *)(v12 + 48) = v14;
        v9 += 8LL;
        --v2;
      }

      while (v2);
    }

    return v3;
  }

  __break(1u);
  return result;
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  uint64_t v16;
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v2 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }

  else
  {
    uint64_t v2 = *(void *)((a1 & 0xFFFFFFFFFFFFF8LL) + 0x10);
  }

  uint64_t v3 = MEMORY[0x18961AFE8];
  if (!v2) {
    return v3;
  }
  unint64_t v16 = MEMORY[0x18961AFE8];
  uint64_t result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)( 0,  v2 & ~(v2 >> 63),  0);
  if ((v2 & 0x8000000000000000LL) == 0)
  {
    if ((a1 & 0xC000000000000001LL) != 0)
    {
      uint64_t v5 = 0LL;
      uint64_t v3 = v16;
      do
      {
        MEMORY[0x186E1C36C](v5, a1);
        swift_dynamicCast();
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)( 0,  *(void *)(v3 + 16) + 1LL,  1);
          uint64_t v3 = v16;
        }

        unint64_t v7 = *(void *)(v3 + 16);
        unint64_t v6 = *(void *)(v3 + 24);
        if (v7 >= v6 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v6 > 1, v7 + 1, 1);
          uint64_t v3 = v16;
        }

        ++v5;
        uint64_t v8 = v3 + 32 * v7;
        *(void *)(v3 + 16) = v7 + 1;
        *(void *)(v8 + 32) = v13;
        *(void *)(v8 + 40) = v14;
        *(_OWORD *)(v8 + 48) = v15;
      }

      while (v2 != v5);
    }

    else
    {
      unint64_t v9 = a1 + 32;
      uint64_t v3 = v16;
      do
      {
        swift_unknownObjectRetain();
        swift_dynamicCast();
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)( 0,  *(void *)(v3 + 16) + 1LL,  1);
          uint64_t v3 = v16;
        }

        unint64_t v11 = *(void *)(v3 + 16);
        unint64_t v10 = *(void *)(v3 + 24);
        if (v11 >= v10 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)( v10 > 1,  v11 + 1,  1);
          uint64_t v3 = v16;
        }

        uint64_t v12 = v3 + 32 * v11;
        *(void *)(v3 + 16) = v11 + 1;
        *(void *)(v12 + 32) = v13;
        *(void *)(v12 + 40) = v14;
        *(_OWORD *)(v12 + 48) = v15;
        v9 += 8LL;
        --v2;
      }

      while (v2);
    }

    return v3;
  }

  __break(1u);
  return result;
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v2 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }

  else
  {
    uint64_t v2 = *(void *)((a1 & 0xFFFFFFFFFFFFF8LL) + 0x10);
  }

  uint64_t v3 = MEMORY[0x18961AFE8];
  if (!v2) {
    return v3;
  }
  uint64_t v15 = MEMORY[0x18961AFE8];
  uint64_t result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)( 0,  v2 & ~(v2 >> 63),  0);
  if ((v2 & 0x8000000000000000LL) == 0)
  {
    if ((a1 & 0xC000000000000001LL) != 0)
    {
      uint64_t v5 = 0LL;
      uint64_t v3 = v15;
      do
      {
        MEMORY[0x186E1C36C](v5, a1);
        swift_dynamicCast();
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)( 0,  *(void *)(v3 + 16) + 1LL,  1);
          uint64_t v3 = v15;
        }

        unint64_t v7 = *(void *)(v3 + 16);
        unint64_t v6 = *(void *)(v3 + 24);
        if (v7 >= v6 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v6 > 1, v7 + 1, 1);
          uint64_t v3 = v15;
        }

        ++v5;
        uint64_t v8 = v3 + 24 * v7;
        *(void *)(v3 + 16) = v7 + 1;
        *(void *)(v8 + 32) = v13;
        *(_OWORD *)(v8 + 40) = v14;
      }

      while (v2 != v5);
    }

    else
    {
      unint64_t v9 = a1 + 32;
      uint64_t v3 = v15;
      do
      {
        swift_unknownObjectRetain();
        swift_dynamicCast();
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)( 0,  *(void *)(v3 + 16) + 1LL,  1);
          uint64_t v3 = v15;
        }

        unint64_t v11 = *(void *)(v3 + 16);
        unint64_t v10 = *(void *)(v3 + 24);
        if (v11 >= v10 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)( v10 > 1,  v11 + 1,  1);
          uint64_t v3 = v15;
        }

        uint64_t v12 = v3 + 24 * v11;
        *(void *)(v3 + 16) = v11 + 1;
        *(void *)(v12 + 32) = v13;
        *(_OWORD *)(v12 + 40) = v14;
        v9 += 8LL;
        --v2;
      }

      while (v2);
    }

    return v3;
  }

  __break(1u);
  return result;
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  _OWORD v11[2];
  uint64_t v12;
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v2 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }

  else
  {
    uint64_t v2 = *(void *)((a1 & 0xFFFFFFFFFFFFF8LL) + 0x10);
  }

  uint64_t v3 = MEMORY[0x18961AFE8];
  if (!v2) {
    return v3;
  }
  uint64_t v12 = MEMORY[0x18961AFE8];
  uint64_t result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)( 0,  v2 & ~(v2 >> 63),  0);
  if ((v2 & 0x8000000000000000LL) == 0)
  {
    if ((a1 & 0xC000000000000001LL) != 0)
    {
      uint64_t v5 = 0LL;
      uint64_t v3 = v12;
      do
      {
        MEMORY[0x186E1C36C](v5, a1);
        swift_dynamicCast();
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)( 0,  *(void *)(v3 + 16) + 1LL,  1);
          uint64_t v3 = v12;
        }

        unint64_t v7 = *(void *)(v3 + 16);
        unint64_t v6 = *(void *)(v3 + 24);
        if (v7 >= v6 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v6 > 1, v7 + 1, 1);
          uint64_t v3 = v12;
        }

        ++v5;
        *(void *)(v3 + 16) = v7 + 1;
        outlined init with take of Any(v11, (_OWORD *)(v3 + 32 * v7 + 32));
      }

      while (v2 != v5);
    }

    else
    {
      uint64_t v8 = a1 + 32;
      uint64_t v3 = v12;
      do
      {
        swift_unknownObjectRetain();
        swift_dynamicCast();
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)( 0,  *(void *)(v3 + 16) + 1LL,  1);
          uint64_t v3 = v12;
        }

        unint64_t v10 = *(void *)(v3 + 16);
        unint64_t v9 = *(void *)(v3 + 24);
        if (v10 >= v9 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)( v9 > 1,  v10 + 1,  1);
          uint64_t v3 = v12;
        }

        *(void *)(v3 + 16) = v10 + 1;
        outlined init with take of Any(v11, (_OWORD *)(v3 + 32 * v10 + 32));
        v8 += 8LL;
        --v2;
      }

      while (v2);
    }

    return v3;
  }

  __break(1u);
  return result;
}

void specialized _arrayForceCast<A, B>(_:)(unint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 - 8);
  uint64_t v5 = MEMORY[0x1895F8858](a1);
  unint64_t v7 = (char *)v21 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v5);
  unint64_t v9 = (char *)v21 - v8;
  char isClassOrObjCExistentialType = _swift_isClassOrObjCExistentialType();
  unint64_t v11 = a1 >> 62;
  if ((isClassOrObjCExistentialType & 1) != 0)
  {
    if (v11)
    {
      swift_bridgeObjectRetain();
      _bridgeCocoaArray<A>(_:)();
      swift_bridgeObjectRelease();
    }

    else
    {
      swift_bridgeObjectRetain();
      specialized _ContiguousArrayBuffer.storesOnlyElementsOfType<A>(_:)(a1 & 0xFFFFFFFFFFFFFF8LL, a2);
    }

    return;
  }

  if (!v11)
  {
    uint64_t v12 = *(void *)((a1 & 0xFFFFFFFFFFFFF8LL) + 0x10);
    if (v12) {
      goto LABEL_6;
    }
LABEL_24:
    _swift_isClassOrObjCExistentialType();
    return;
  }

  swift_bridgeObjectRetain();
  uint64_t v12 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (!v12) {
    goto LABEL_24;
  }
LABEL_6:
  uint64_t v23 = MEMORY[0x18961AFE8];
  v21[1] = type metadata accessor for ContiguousArray();
  ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v12 & ~(v12 >> 63), 0);
  if (v12 < 0)
  {
    __break(1u);
  }

  else if ((a1 & 0xC000000000000001LL) != 0)
  {
    uint64_t v13 = 0LL;
    uint64_t v14 = v23;
    do
    {
      uint64_t v22 = MEMORY[0x186E1C36C](v13, a1);
      swift_dynamicCast();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)( 0,  *(void *)(v14 + 16) + 1LL,  1);
        uint64_t v14 = v23;
      }

      unint64_t v16 = *(void *)(v14 + 16);
      unint64_t v15 = *(void *)(v14 + 24);
      if (v16 >= v15 >> 1)
      {
        ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v15 > 1, v16 + 1, 1);
        uint64_t v14 = v23;
      }

      ++v13;
      *(void *)(v14 + 16) = v16 + 1;
      (*(void (**)(unint64_t, char *, uint64_t))(v4 + 32))( v14 + ((*(unsigned __int8 *)(v4 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80))
      + *(void *)(v4 + 72) * v16,
        v9,
        a2);
    }

    while (v12 != v13);
  }

  else
  {
    unint64_t v17 = (uint64_t *)(a1 + 32);
    uint64_t v18 = v23;
    do
    {
      uint64_t v22 = *v17;
      swift_unknownObjectRetain();
      swift_dynamicCast();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)( 0,  *(void *)(v18 + 16) + 1LL,  1);
        uint64_t v18 = v23;
      }

      unint64_t v20 = *(void *)(v18 + 16);
      unint64_t v19 = *(void *)(v18 + 24);
      if (v20 >= v19 >> 1)
      {
        ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v19 > 1, v20 + 1, 1);
        uint64_t v18 = v23;
      }

      *(void *)(v18 + 16) = v20 + 1;
      (*(void (**)(unint64_t, char *, uint64_t))(v4 + 32))( v18 + ((*(unsigned __int8 *)(v4 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80))
      + *(void *)(v4 + 72) * v20,
        v7,
        a2);
      ++v17;
      --v12;
    }

    while (v12);
  }

uint64_t specialized _arrayForceCast<A, B>(_:)(uint64_t a1)
{
  int64_t v1 = *(void *)(a1 + 16);
  uint64_t v2 = MEMORY[0x18961AFE8];
  if (v1)
  {
    uint64_t v9 = MEMORY[0x18961AFE8];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v1, 0);
    uint64_t v4 = a1 + 32;
    uint64_t v2 = v9;
    do
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Swift.AnyObject.Type);
      swift_dynamicCast();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)( 0,  *(void *)(v2 + 16) + 1LL,  1);
        uint64_t v2 = v9;
      }

      unint64_t v6 = *(void *)(v2 + 16);
      unint64_t v5 = *(void *)(v2 + 24);
      if (v6 >= v5 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v5 > 1, v6 + 1, 1);
        uint64_t v2 = v9;
      }

      *(void *)(v2 + 16) = v6 + 1;
      outlined init with take of Any(&v8, (_OWORD *)(v2 + 32 * v6 + 32));
      v4 += 8LL;
      --v1;
    }

    while (v1);
  }

  return v2;
}

uint64_t protocol witness for ExpressibleByArrayLiteral.init(arrayLiteral:) in conformance NSArray@<X0>( void *a1@<X8>)
{
  id v2 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
  id v3 = objc_msgSend(v2, sel_initWithArray_, _ContiguousArrayBuffer._asCocoaArray()());
  uint64_t result = swift_unknownObjectRelease();
  *a1 = v3;
  return result;
}

uint64_t static Array._forceBridgeFromObjectiveC(_:result:)(void *a1, uint64_t *a2, uint64_t a3)
{
  if (swift_dynamicCastClass())
  {
    swift_retain();
  }

  type metadata accessor for _ContiguousArrayStorage();
  uint64_t result = swift_dynamicCastClass();
  uint64_t v7 = result;
  if (!result)
  {
    swift_unknownObjectRelease();
    char isClassOrObjCExistentialType = _swift_isClassOrObjCExistentialType();
    objc_msgSend(a1, sel_copy);
    if ((isClassOrObjCExistentialType & 1) != 0)
    {
      uint64_t v7 = _bridgeCocoaArray<A>(_:)();
      uint64_t result = swift_unknownObjectRelease();
    }

    else
    {
      unint64_t v9 = _bridgeCocoaArray<A>(_:)();
      swift_unknownObjectRelease();
      specialized _arrayForceCast<A, B>(_:)(v9, a3);
      uint64_t v7 = v10;
      uint64_t result = swift_bridgeObjectRelease();
    }
  }

  *a2 = v7;
  return result;
}

BOOL static Array._conditionallyBridgeFromObjectiveC(_:result:)(void *a1, uint64_t *a2, uint64_t a3)
{
  unint64_t v6 = _bridgeCocoaArray<A>(_:)();
  swift_unknownObjectRelease();
  uint64_t v7 = specialized _arrayConditionalCast<A, B>(_:)(v6, a3);
  swift_bridgeObjectRelease();
  *a2 = v7;
  return v7 != 0;
}

NSArray protocol witness for _ObjectiveCBridgeable._bridgeToObjectiveC() in conformance [A]()
{
  return Array._bridgeToObjectiveC()();
}

uint64_t protocol witness for static _ObjectiveCBridgeable._forceBridgeFromObjectiveC(_:result:) in conformance [A]( void *a1, uint64_t *a2, uint64_t a3)
{
  return static Array._forceBridgeFromObjectiveC(_:result:)(a1, a2, *(void *)(a3 + 16));
}

BOOL protocol witness for static _ObjectiveCBridgeable._conditionallyBridgeFromObjectiveC(_:result:) in conformance [A]( void *a1, uint64_t *a2, uint64_t a3)
{
  return static Array._conditionallyBridgeFromObjectiveC(_:result:)(a1, a2, *(void *)(a3 + 16));
}

uint64_t protocol witness for static _ObjectiveCBridgeable._unconditionallyBridgeFromObjectiveC(_:) in conformance [A]@<X0>( void *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t result = static Array._unconditionallyBridgeFromObjectiveC(_:)(a1, *(void *)(a2 + 16));
  *a3 = result;
  return result;
}

uint64_t NSArray._toCustomAnyHashable()()
{
  if (swift_dynamicCastClass())
  {
    swift_retain();
  }

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<AnyHashable>);
  if (!swift_dynamicCastClass())
  {
    swift_unknownObjectRelease();
    objc_msgSend(v0, sel_copy);
    unint64_t v1 = _bridgeCocoaArray<A>(_:)();
    swift_unknownObjectRelease();
    specialized _arrayForceCast<A, B>(_:)(v1);
    swift_bridgeObjectRelease();
  }

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [AnyHashable]);
  lazy protocol witness table accessor for type [AnyHashable] and conformance <A> [A]();
  return AnyHashable.init<A>(_:)();
}

void protocol witness for _HasCustomAnyHashableRepresentation._toCustomAnyHashable() in conformance NSArray()
{
  id v1 = *v0;
  NSArray._toCustomAnyHashable()();
}

double NSArray.makeIterator()@<D0>(uint64_t a1@<X8>)
{
  uint64_t v2 = swift_unknownObjectRetain();
  return NSFastEnumerationIterator.init(_:)(v2, a1);
}

double protocol witness for Sequence.makeIterator() in conformance NSArray@<D0>(uint64_t a1@<X8>)
{
  return NSFastEnumerationIterator.init(_:)(*v1, a1);
}

id protocol witness for Sequence.underestimatedCount.getter in conformance NSArray()
{
  return objc_msgSend(*v0, sel_count);
}

uint64_t protocol witness for Sequence._copyToContiguousArray() in conformance NSArray()
{
  id v1 = (void *)*v0;
  uint64_t v2 = specialized _copySequenceToContiguousArray<A>(_:)(*v0);

  return v2;
}

uint64_t protocol witness for Sequence._copyContents(initializing:) in conformance NSArray()
{
  return specialized Sequence._copyContents(initializing:)();
}

uint64_t protocol witness for Sequence.withContiguousStorageIfAvailable<A>(_:) in conformance NSArray@<X0>( uint64_t a1@<X2>, uint64_t a2@<X8>)
{
  return protocol witness for MutableCollection.withContiguousMutableStorageIfAvailable<A>(_:) in conformance IndexPath( a1,  a2);
}

id NSArray.init(arrayLiteral:)()
{
  id v0 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
  id v1 = objc_msgSend(v0, sel_initWithArray_, _ContiguousArrayBuffer._asCocoaArray()());
  swift_unknownObjectRelease();
  return v1;
}

id NSArray.init(array:)(void *a1)
{
  if (swift_dynamicCastClass())
  {
    swift_retain();
  }

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  unint64_t v2 = swift_dynamicCastClass();
  if (!v2)
  {
    swift_unknownObjectRelease();
    objc_msgSend(a1, sel_copy);
    unint64_t v2 = _bridgeCocoaArray<A>(_:)();
    swift_unknownObjectRelease();
  }

  id v3 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
  specialized _arrayForceCast<A, B>(_:)(v2);
  swift_bridgeObjectRelease();
  id v4 = objc_msgSend(v3, sel_initWithArray_, _ContiguousArrayBuffer._asCocoaArray()());
  swift_unknownObjectRelease();
  return v4;
}

uint64_t NSArray.customMirror.getter()
{
  if (swift_dynamicCastClass())
  {
    swift_retain();
  }

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  if (!swift_dynamicCastClass())
  {
    swift_unknownObjectRelease();
    objc_msgSend(v0, sel_copy);
    _bridgeCocoaArray<A>(_:)();
    swift_unknownObjectRelease();
  }

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Swift.AnyObject]);
  return Mirror.init(reflecting:)();
}

uint64_t protocol witness for CustomReflectable.customMirror.getter in conformance NSArray()
{
  return NSArray.customMirror.getter();
}

uint64_t protocol witness for CVarArg._cVarArgEncoding.getter in conformance [A](uint64_t a1, uint64_t a2)
{
  uint64_t v4 = MEMORY[0x186E20D4C](&protocol conformance descriptor for [A], a1);
  return CVarArg<>._cVarArgEncoding.getter(a1, a2, v4);
}

uint64_t specialized _ContiguousArrayBuffer.storesOnlyElementsOfType<A>(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 - 8);
  MEMORY[0x1895F8858](a1);
  unint64_t v6 = (char *)v10 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  dispatch thunk of __ContiguousArrayStorageBase.staticElementType.getter();
  uint64_t result = swift_dynamicCastMetatype();
  if (result) {
    return 1LL;
  }
  unint64_t v8 = *(void *)(a1 + 16);
  if (!v8) {
    return 1LL;
  }
  unint64_t v9 = 0LL;
  while (v9 < v8)
  {
    v10[1] = *(void *)(a1 + 32 + 8 * v9);
    swift_unknownObjectRetain();
    uint64_t result = swift_dynamicCast();
    if (!(_DWORD)result) {
      return result;
    }
    ++v9;
    uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, a2);
    unint64_t v8 = *(void *)(a1 + 16);
    if (v9 == v8) {
      return 1LL;
    }
  }

  __break(1u);
  return result;
}

uint64_t specialized _ArrayBuffer._nonNative.getter(uint64_t result)
{
  if (result >= 0) {
    return result & 0xFFFFFFFFFFFFFF8LL;
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type [AnyHashable] and conformance <A> [A]()
{
  unint64_t result = lazy protocol witness table cache variable for type [AnyHashable] and conformance <A> [A];
  if (!lazy protocol witness table cache variable for type [AnyHashable] and conformance <A> [A])
  {
    uint64_t v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [AnyHashable]);
    uint64_t v2 = MEMORY[0x1896190F8];
    unint64_t result = MEMORY[0x186E20D4C](MEMORY[0x189618450], v1, &v2);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type [AnyHashable] and conformance <A> [A]);
  }

  return result;
}

unint64_t lazy protocol witness table accessor for type NSFastEnumerationIterator and conformance NSFastEnumerationIterator()
{
  unint64_t result = lazy protocol witness table cache variable for type NSFastEnumerationIterator and conformance NSFastEnumerationIterator;
  if (!lazy protocol witness table cache variable for type NSFastEnumerationIterator and conformance NSFastEnumerationIterator)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for NSFastEnumerationIterator,  &type metadata for NSFastEnumerationIterator);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type NSFastEnumerationIterator and conformance NSFastEnumerationIterator);
  }

  return result;
}

uint64_t BuiltInUnicodeScalarSet._bitmapPtrForPlane(_:)(uint64_t result, char a2)
{
  uint64_t v48 = *MEMORY[0x1895F89C0];
  uint64_t v2 = qword_18379D970[a2];
  int v6 = 15;
  uint64_t v7 = &__CFUniCharLetterCharacterSetBitmap;
  int v8 = 2;
  unint64_t v9 = &__CFUniCharLowercaseLetterCharacterSetBitmap;
  int v10 = 2;
  unint64_t v11 = &__CFUniCharUppercaseLetterCharacterSetBitmap;
  int v12 = 15;
  uint64_t v13 = &__CFUniCharNonBaseCharacterSetBitmap;
  int v14 = 3;
  unint64_t v15 = &__CFUniCharCanonicalDecomposableCharacterSetBitmap;
  int v16 = 15;
  unint64_t v17 = &__CFUniCharAlphanumericCharacterSetBitmap;
  int v18 = 2;
  unint64_t v19 = &__CFUniCharPunctuationCharacterSetBitmap;
  int v20 = 15;
  uint64_t v21 = &__CFUniCharLegalCharacterSetBitmap;
  int v22 = 1;
  uint64_t v23 = &__CFUniCharTitlecaseLetterCharacterSetBitmap;
  int v24 = 2;
  uint64_t v25 = &__CFUniCharSymbolAndOperatorCharacterSetBitmap;
  int v26 = 2;
  uint64_t v27 = &__CFUniCharCompatibilityDecomposableCharacterSetBitmap;
  int v28 = 2;
  uint64_t v29 = &__CFUniCharHfsPlusDecomposableCharacterSetBitmap;
  int v30 = 2;
  uint64_t v31 = &__CFUniCharStrongRightToLeftCharacterSetBitmap;
  int v32 = 2;
  int v33 = &__CFUniCharHasNonSelfLowercaseMappingBitmap;
  int v34 = 2;
  Swift::OpaquePointer v35 = &__CFUniCharHasNonSelfUppercaseMappingBitmap;
  int v36 = 2;
  int v37 = &__CFUniCharHasNonSelfTitlecaseMappingBitmap;
  int v38 = 1;
  uint64_t v39 = &__CFUniCharHasNonSelfCaseFoldingMappingBitmap;
  int v40 = 2;
  uint64_t v41 = &__CFUniCharHasMirroredMappingBitmap;
  int v42 = 15;
  uint64_t v43 = &__CFUniCharControlAndFormatterBitmap;
  int v44 = 15;
  uint64_t v45 = &__CFUniCharCaseIgnorableCharacterSetBitmap;
  int v46 = 15;
  uint64_t v47 = &__CFUniCharGraphemeExtendCharacterSetBitmap;
  id v3 = (unsigned int *)&v5[16 * v2];
  if (*v3 <= result) {
    return 0LL;
  }
  uint64_t v4 = *((void *)v3 + 1);
  if (v4) {
    return *(void *)(v4 + 8 * result);
  }
  __break(1u);
  return result;
}

BOOL BuiltInUnicodeScalarSet._isMemberOfBitmap(_:_:)(unsigned __int16 a1, uint64_t a2, uint64_t a3)
{
  if (!a2) {
    return 0LL;
  }
  uint64_t v3 = a1 >> (BYTE2(a3) & 0xF);
  if ((a3 & 0xFFF00000) != 0) {
    uint64_t v3 = 0LL;
  }
  uint64_t v4 = *(unsigned __int8 *)(a2 + v3);
  else {
    uint64_t v5 = (1 << (BYTE4(a3) & a1));
  }
  return (v5 & v4) != 0;
}

double one-time initialization function for prefixHeuristics()
{
  uint64_t v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_183729DF0;
  Swift::String v1 = String.lowercased()();
  *(void *)(v0 + 32) = 28261LL;
  *(void *)(v0 + 40) = 0xE200000000000000LL;
  *(Swift::String *)(v0 + 48) = v1;
  *(void *)(v0 + 64) = closure #1 in variable initialization expression of prefixHeuristics;
  *(void *)(v0 + 72) = 0LL;
  *(void *)(v0 + 80) = closure #2 in variable initialization expression of prefixHeuristics;
  *(void *)(v0 + 88) = 0LL;
  *(void *)(v0 + 96) = 0LL;
  *(void *)(v0 + 104) = 0LL;
  Swift::String v2 = String.lowercased()();
  *(void *)(v0 + 112) = 28261LL;
  *(void *)(v0 + 120) = 0xE200000000000000LL;
  *(Swift::String *)(v0 + 128) = v2;
  *(void *)(v0 + 144) = closure #3 in variable initialization expression of prefixHeuristics;
  *(void *)(v0 + 152) = 0LL;
  *(void *)(v0 + 160) = closure #4 in variable initialization expression of prefixHeuristics;
  *(void *)(v0 + 168) = 0LL;
  *(void *)(v0 + 176) = 0LL;
  *(void *)(v0 + 184) = 0LL;
  Swift::String v3 = String.lowercased()();
  *(void *)(v0 + 192) = 29286LL;
  *(void *)(v0 + 200) = 0xE200000000000000LL;
  *(Swift::String *)(v0 + 208) = v3;
  *(void *)(v0 + 224) = closure #5 in variable initialization expression of prefixHeuristics;
  *(void *)(v0 + 232) = 0LL;
  *(void *)(v0 + 240) = destructiveProjectEnumData for PredicateCodableError;
  *(void *)(v0 + 248) = 0LL;
  *(void *)(v0 + 256) = 0xD000000000000010LL;
  *(void *)(v0 + 264) = 0x80000001839CBCE0LL;
  Swift::String v4 = String.lowercased()();
  *(void *)(v0 + 272) = 29286LL;
  *(void *)(v0 + 280) = 0xE200000000000000LL;
  *(Swift::String *)(v0 + 288) = v4;
  *(void *)(v0 + 304) = closure #7 in variable initialization expression of prefixHeuristics;
  *(void *)(v0 + 312) = 0LL;
  *(void *)(v0 + 320) = destructiveProjectEnumData for PredicateCodableError;
  *(void *)(v0 + 328) = 0LL;
  *(_OWORD *)(v0 + 336) = xmmword_18379D9A0;
  Swift::String v5 = String.lowercased()();
  *(void *)(v0 + 352) = 29286LL;
  *(void *)(v0 + 360) = 0xE200000000000000LL;
  *(Swift::String *)(v0 + 368) = v5;
  *(void *)(v0 + 384) = closure #9 in variable initialization expression of prefixHeuristics;
  *(void *)(v0 + 392) = 0LL;
  *(void *)(v0 + 400) = destructiveProjectEnumData for PredicateCodableError;
  *(void *)(v0 + 408) = 0LL;
  *(void *)(v0 + 416) = 0xD000000000000011LL;
  *(void *)(v0 + 424) = 0x80000001839CBD00LL;
  Swift::String v6 = String.lowercased()();
  *(void *)(v0 + 432) = 29286LL;
  *(void *)(v0 + 440) = 0xE200000000000000LL;
  *(Swift::String *)(v0 + 448) = v6;
  *(void *)(v0 + 464) = closure #11 in variable initialization expression of prefixHeuristics;
  *(void *)(v0 + 472) = 0LL;
  *(void *)(v0 + 480) = destructiveProjectEnumData for PredicateCodableError;
  *(void *)(v0 + 488) = 0LL;
  *(_OWORD *)(v0 + 496) = xmmword_18379D9B0;
  Swift::String v7 = String.lowercased()();
  *(void *)(v0 + 512) = 29286LL;
  *(void *)(v0 + 520) = 0xE200000000000000LL;
  *(Swift::String *)(v0 + 528) = v7;
  *(void *)(v0 + 544) = closure #13 in variable initialization expression of prefixHeuristics;
  *(void *)(v0 + 552) = 0LL;
  *(void *)(v0 + 560) = destructiveProjectEnumData for PredicateCodableError;
  *(void *)(v0 + 568) = 0LL;
  double result = 9.54924866e-307;
  *(_OWORD *)(v0 + 576) = xmmword_18379D9C0;
  prefixHeuristics._rawValue = (void *)v0;
  return result;
}

uint64_t closure #1 in variable initialization expression of prefixHeuristics(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 8289 && a2 == 0xE200000000000000LL;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0 || a1 == 2125409 && a2 == 0xE300000000000000LL) {
    return 1LL;
  }
  else {
    return _stringCompareWithSmolCheck(_:_:expecting:)();
  }
}

id closure #2 in variable initialization expression of prefixHeuristics(void *a1)
{
  return objc_msgSend(a1, sel_setDefiniteness_, 1);
}

uint64_t closure #3 in variable initialization expression of prefixHeuristics(uint64_t a1, uint64_t a2)
{
  if (a1 == 543516788 && a2 == 0xE400000000000000LL) {
    return 1LL;
  }
  else {
    return _stringCompareWithSmolCheck(_:_:expecting:)();
  }
}

id closure #4 in variable initialization expression of prefixHeuristics(void *a1)
{
  return objc_msgSend(a1, sel_setDefiniteness_, 2);
}

uint64_t closure #5 in variable initialization expression of prefixHeuristics(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 2123107 && a2 == 0xE300000000000000LL;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0 || a1 == 544499043 && a2 == 0xE400000000000000LL) {
    return 1LL;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0 || a1 == 0x206574746563LL && a2 == 0xE600000000000000LL) {
    return 1LL;
  }
  char v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
  BOOL v6 = a1 == 544433507 && a2 == 0xE400000000000000LL;
  BOOL v7 = v6;
  if ((v5 & 1) != 0 || v7) {
    return 1LL;
  }
  else {
    return _stringCompareWithSmolCheck(_:_:expecting:)();
  }
}

uint64_t closure #7 in variable initialization expression of prefixHeuristics(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 2123108 && a2 == 0xE300000000000000LL;
  if (v2
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0
    || a1 == 10084 && a2 == 0xE200000000000000LL
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0
    || a1 == 2575360612LL && a2 == 0xA400000000000000LL)
  {
    return 1LL;
  }

  else
  {
    return _stringCompareWithSmolCheck(_:_:expecting:)();
  }

uint64_t closure #9 in variable initialization expression of prefixHeuristics(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x276C206564LL && a2 == 0xE500000000000000LL;
  if (v2
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0
    || a1 == 0x9980E26C206564LL && a2 == 0xA700000000000000LL
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0
    || a1 == 0x20616C206564LL && a2 == 0xE600000000000000LL
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0
    || a1 == 2127204 && a2 == 0xE300000000000000LL
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0
    || a1 == 544433508 && a2 == 0xE400000000000000LL)
  {
    return 1LL;
  }

  else
  {
    return _stringCompareWithSmolCheck(_:_:expecting:)();
  }

uint64_t closure #11 in variable initialization expression of prefixHeuristics(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 10092 && a2 == 0xE200000000000000LL;
  if (v2
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0
    || a1 == 2575360620LL && a2 == 0xA400000000000000LL)
  {
    return 1LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0 || a1 == 2123116 && a2 == 0xE300000000000000LL) {
    return 1LL;
  }
  char v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
  BOOL v6 = a1 == 2122092 && a2 == 0xE300000000000000LL;
  BOOL v7 = v6;
  if ((v5 & 1) != 0
    || v7
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0
    || a1 == 544433516 && a2 == 0xE400000000000000LL)
  {
    return 1LL;
  }

  else
  {
    return _stringCompareWithSmolCheck(_:_:expecting:)();
  }

uint64_t closure #13 in variable initialization expression of prefixHeuristics(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 2585969 && a2 == 0xE300000000000000LL;
  if (v2
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0
    || a1 == 0x9980E27571LL && a2 == 0xA500000000000000LL
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0
    || a1 == 543520113 && a2 == 0xE400000000000000LL)
  {
    return 1LL;
  }

  else
  {
    return _stringCompareWithSmolCheck(_:_:expecting:)();
  }

uint64_t one-time initialization function for suffixHeuristics()
{
  uint64_t v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_183729DF0;
  Swift::String v1 = String.lowercased()();
  *(void *)(v0 + 32) = 28261LL;
  *(void *)(v0 + 40) = 0xE200000000000000LL;
  *(Swift::String *)(v0 + 48) = v1;
  *(void *)(v0 + 64) = closure #1 in variable initialization expression of suffixHeuristics;
  *(void *)(v0 + 72) = 0LL;
  *(void *)(v0 + 80) = closure #2 in variable initialization expression of suffixHeuristics;
  *(void *)(v0 + 88) = 0LL;
  *(void *)(v0 + 96) = 0LL;
  *(void *)(v0 + 104) = 0LL;
  Swift::String v2 = String.lowercased()();
  *(void *)(v0 + 112) = 28523LL;
  *(void *)(v0 + 120) = 0xE200000000000000LL;
  *(Swift::String *)(v0 + 128) = v2;
  *(void *)(v0 + 144) = closure #3 in variable initialization expression of suffixHeuristics;
  *(void *)(v0 + 152) = 0LL;
  *(void *)(v0 + 160) = closure #4 in variable initialization expression of suffixHeuristics;
  *(void *)(v0 + 168) = 0LL;
  *(void *)(v0 + 176) = 0LL;
  *(void *)(v0 + 184) = 0LL;
  Swift::String v3 = String.lowercased()();
  *(void *)(v0 + 192) = 28523LL;
  *(void *)(v0 + 200) = 0xE200000000000000LL;
  *(Swift::String *)(v0 + 208) = v3;
  *(void *)(v0 + 224) = closure #5 in variable initialization expression of suffixHeuristics;
  *(void *)(v0 + 232) = 0LL;
  *(void *)(v0 + 240) = closure #6 in variable initialization expression of suffixHeuristics;
  *(void *)(v0 + 248) = 0LL;
  *(void *)(v0 + 256) = 0LL;
  *(void *)(v0 + 264) = 0LL;
  Swift::String v4 = String.lowercased()();
  *(void *)(v0 + 272) = 28523LL;
  *(void *)(v0 + 280) = 0xE200000000000000LL;
  *(Swift::String *)(v0 + 288) = v4;
  *(void *)(v0 + 304) = closure #7 in variable initialization expression of suffixHeuristics;
  *(void *)(v0 + 312) = 0LL;
  *(void *)(v0 + 320) = closure #8 in variable initialization expression of suffixHeuristics;
  *(void *)(v0 + 328) = 0LL;
  *(void *)(v0 + 336) = 0LL;
  *(void *)(v0 + 344) = 0LL;
  Swift::String v5 = String.lowercased()();
  *(void *)(v0 + 352) = 28523LL;
  *(void *)(v0 + 360) = 0xE200000000000000LL;
  *(Swift::String *)(v0 + 368) = v5;
  *(void *)(v0 + 384) = closure #9 in variable initialization expression of suffixHeuristics;
  *(void *)(v0 + 392) = 0LL;
  *(void *)(v0 + 400) = closure #10 in variable initialization expression of suffixHeuristics;
  *(void *)(v0 + 408) = 0LL;
  *(void *)(v0 + 416) = 0LL;
  *(void *)(v0 + 424) = 0LL;
  Swift::String v6 = String.lowercased()();
  *(void *)(v0 + 432) = 28523LL;
  *(void *)(v0 + 440) = 0xE200000000000000LL;
  *(Swift::String *)(v0 + 448) = v6;
  *(void *)(v0 + 464) = closure #11 in variable initialization expression of suffixHeuristics;
  *(void *)(v0 + 472) = 0LL;
  *(void *)(v0 + 480) = closure #12 in variable initialization expression of suffixHeuristics;
  *(void *)(v0 + 488) = 0LL;
  *(void *)(v0 + 496) = 0LL;
  *(void *)(v0 + 504) = 0LL;
  Swift::String v8 = String.lowercased()();
  uint64_t result = v8._countAndFlagsBits;
  *(void *)(v0 + 512) = 28523LL;
  *(void *)(v0 + 520) = 0xE200000000000000LL;
  *(Swift::String *)(v0 + 528) = v8;
  *(void *)(v0 + 544) = closure #13 in variable initialization expression of suffixHeuristics;
  *(void *)(v0 + 552) = 0LL;
  *(void *)(v0 + 560) = closure #14 in variable initialization expression of suffixHeuristics;
  *(void *)(v0 + 568) = 0LL;
  *(void *)(v0 + 584) = 0LL;
  *(void *)(v0 + 576) = 0LL;
  suffixHeuristics._rawValue = (void *)v0;
  return result;
}

uint64_t closure #1 in variable initialization expression of suffixHeuristics(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 1939439842 && a2 == 0xA400000000000000LL;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0 || a1 == 29479 && a2 == 0xE200000000000000LL) {
    return 1LL;
  }
  else {
    return _stringCompareWithSmolCheck(_:_:expecting:)();
  }
}

id closure #2 in variable initialization expression of suffixHeuristics(void *a1)
{
  return objc_msgSend(a1, sel_setGrammaticalCase_, 4);
}

uint64_t closure #3 in variable initialization expression of suffixHeuristics(uint64_t a1, uint64_t a2)
{
  if (a1 == 9734891 && a2 == 0xA300000000000000LL) {
    return 1LL;
  }
  char v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
  BOOL v6 = a1 == 8429036 && a2 == 0xA300000000000000LL;
  BOOL v7 = v6;
  if ((v5 & 1) != 0 || v7) {
    return 1LL;
  }
  else {
    return _stringCompareWithSmolCheck(_:_:expecting:)();
  }
}

id closure #4 in variable initialization expression of suffixHeuristics(void *a1)
{
  return objc_msgSend(a1, sel_setGrammaticalCase_, 1);
}

uint64_t closure #5 in variable initialization expression of suffixHeuristics(uint64_t a1, uint64_t a2)
{
  if (a1 == 8433898 && a2 == 0xA300000000000000LL) {
    return 1LL;
  }
  char v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
  BOOL v6 = a1 == 11836908 && a2 == 0xA300000000000000LL;
  BOOL v7 = v6;
  if ((v5 & 1) != 0 || v7) {
    return 1LL;
  }
  else {
    return _stringCompareWithSmolCheck(_:_:expecting:)();
  }
}

id closure #6 in variable initialization expression of suffixHeuristics(void *a1)
{
  return objc_msgSend(a1, sel_set_clusivity_, 1);
}

uint64_t closure #7 in variable initialization expression of suffixHeuristics(uint64_t a1, uint64_t a2)
{
  if (a1 == 12363243 && a2 == 0xA300000000000000LL) {
    return 1LL;
  }
  char v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
  BOOL v6 = a1 == 8691180 && a2 == 0xA300000000000000LL;
  BOOL v7 = v6;
  if ((v5 & 1) != 0 || v7) {
    return 1LL;
  }
  else {
    return _stringCompareWithSmolCheck(_:_:expecting:)();
  }
}

id closure #8 in variable initialization expression of suffixHeuristics(void *a1)
{
  return objc_msgSend(a1, sel_setGrammaticalCase_, 2);
}

uint64_t closure #9 in variable initialization expression of suffixHeuristics(uint64_t a1, uint64_t a2)
{
  if (a1 == 12366826 && a2 == 0xA300000000000000LL) {
    return 1LL;
  }
  char v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
  BOOL v6 = a1 == 8428012 && a2 == 0xA300000000000000LL;
  BOOL v7 = v6;
  if ((v5 & 1) != 0 || v7) {
    return 1LL;
  }
  else {
    return _stringCompareWithSmolCheck(_:_:expecting:)();
  }
}

id closure #10 in variable initialization expression of suffixHeuristics(void *a1)
{
  return objc_msgSend(a1, sel_setGrammaticalCase_, 16);
}

uint64_t closure #11 in variable initialization expression of suffixHeuristics(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 10265067 && a2 == 0xA300000000000000LL;
  if (v2
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0
    || a1 == 0x9CA1EBBC9CECLL && a2 == 0xA600000000000000LL)
  {
    return 1LL;
  }

  else
  {
    return _stringCompareWithSmolCheck(_:_:expecting:)();
  }

id closure #12 in variable initialization expression of suffixHeuristics(void *a1)
{
  return objc_msgSend(a1, sel_setGrammaticalCase_, 15);
}

uint64_t closure #13 in variable initialization expression of suffixHeuristics(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 12361195 && a2 == 0xA300000000000000LL;
  if (v2
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0
    || a1 == 0xBC9DEBB49DECLL && a2 == 0xA600000000000000LL)
  {
    return 1LL;
  }

  else
  {
    return _stringCompareWithSmolCheck(_:_:expecting:)();
  }

id closure #14 in variable initialization expression of suffixHeuristics(void *a1)
{
  return objc_msgSend(a1, sel_set_adjectival_, 1);
}

void (*specialized static NSMorphology._heuristicMorphology(language:prefix:suffix:featureNamePointer:matchedPrefixPointer:matchedSuffixPointer:)( uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6, void **a7, _BYTE *a8, char *a9))(void)
{
  uint64_t v68 = a7;
  uint64_t v69 = a8;
  uint64_t v77 = a5;
  uint64_t v78 = a6;
  uint64_t v75 = a3;
  __int16 v76 = a4;
  uint64_t v96 = *MEMORY[0x1895F89C0];
  swift_bridgeObjectRetain();
  LODWORD(v84) = 0;
  String.utf8CString.getter();
  int Language = uloc_getLanguage();
  int v10 = (void (*)(void))swift_release();
  if (Language <= 0)
  {
    __int16 v80 = 0LL;
    uint64_t v12 = 0LL;
  }

  else
  {
    v83[Language] = 0;
    int v10 = (void (*)(void))MEMORY[0x186E1B634](v83);
    __int16 v80 = v10;
    uint64_t v12 = v11;
  }

  MEMORY[0x1895F8858](v10);
  LODWORD(v84) = 0;
  String.utf8CString.getter();
  int Script = uloc_getScript();
  swift_release();
  uint64_t v14 = 0LL;
  uint64_t v15 = 0LL;
  if ((int)v84 <= 0 && Script > 0)
  {
    v67[Script] = 0;
    uint64_t v14 = MEMORY[0x186E1B634](v67);
    uint64_t v15 = v16;
  }

  int v74 = (void (*)(void))v14;
  MEMORY[0x1895F8858](v14);
  LODWORD(v84) = 0;
  String.utf8CString.getter();
  int Country = uloc_getCountry();
  swift_release();
  uint64_t v18 = 0LL;
  unint64_t v19 = 0LL;
  if ((int)v84 <= 0 && Country > 0)
  {
    v67[Country] = 0;
    uint64_t v18 = MEMORY[0x186E1B634](v67, 0LL);
  }

  __int16 v79 = v19;
  swift_bridgeObjectRelease();
  if (v12)
  {
    Swift::String v20 = String.lowercased()();
    uint64_t countAndFlagsBits = v20._countAndFlagsBits;
    uint64_t object = v20._object;
    uint64_t v23 = v74;
    if (v15)
    {
LABEL_12:
      int v84 = v23;
      uint64_t v85 = v15;
      swift_bridgeObjectRetain_n();
      String.init<A>(_:)();
      Swift::String v24 = String._capitalized()();
      uint64_t v25 = v24._countAndFlagsBits;
      int v26 = (char *)v24._object;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_15;
    }
  }

  else
  {
    __int16 v80 = 0LL;
    uint64_t countAndFlagsBits = 0LL;
    uint64_t object = 0LL;
    uint64_t v23 = v74;
    if (v15) {
      goto LABEL_12;
    }
  }

  int v74 = 0LL;
  uint64_t v25 = 0LL;
  int v26 = 0LL;
LABEL_15:
  uint64_t v72 = v26;
  uint64_t v73 = v25;
  uint64_t v27 = v79;
  if (v79)
  {
    Swift::String v30 = String.uppercased()();
    uint64_t v29 = v30._object;
    uint64_t v28 = v30._countAndFlagsBits;
    uint64_t v27 = v79;
  }

  else
  {
    uint64_t v18 = 0LL;
    uint64_t v28 = 0LL;
    uint64_t v29 = 0LL;
  }

  int v84 = v80;
  uint64_t v85 = v12;
  uint64_t v86 = countAndFlagsBits;
  uint64_t v87 = object;
  uint64_t v71 = (void (*)(void))countAndFlagsBits;
  uint64_t v31 = (uint64_t)v74;
  uint64_t v88 = (uint64_t)v74;
  uint64_t v89 = v15;
  uint64_t v90 = v73;
  uint64_t v91 = v72;
  uint64_t v92 = v18;
  unint64_t v93 = v27;
  uint64_t v94 = v28;
  unint64_t v95 = v29;
  if (v12)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v70 = v12;
    __int16 v81 = object;
    uint64_t v82 = (uint64_t)v71;
    uint64_t v32 = v12;
LABEL_22:
    outlined consume of Locale.LanguageCode?((uint64_t)v80, v32);
    outlined consume of Locale.LanguageCode?((uint64_t)v74, v15);
    outlined consume of Locale.LanguageCode?(v18, (uint64_t)v79);
    id v36 = objc_msgSend(objc_allocWithZone((Class)NSMorphology), sel_init);
    uint64_t v37 = one-time initialization token for prefixHeuristics;
    int v38 = (void (*)(void))v36;
    if (v37 != -1) {
      swift_once();
    }
    uint64_t v39 = (void (*)(void))*((void *)prefixHeuristics._rawValue + 2);
    int v40 = v81;
    int v74 = v38;
    if (!v39)
    {
      int v48 = 0;
      int v46 = 0LL;
      goto LABEL_41;
    }

    uint64_t v73 = swift_bridgeObjectRetain();
    uint64_t v41 = (void **)(v73 + 56);
    while (1)
    {
      uint64_t v42 = (uint64_t)*(v41 - 1);
      uint64_t v43 = *v41;
      int v44 = (uint64_t (*)(uint64_t, void *))v41[1];
      uint64_t v45 = (void (*)(void))v41[5];
      __int16 v79 = (void (*)(void))v41[3];
      __int16 v80 = v45;
      int v46 = v41[6];
      BOOL v47 = v42 == v82 && v43 == v40;
      if (v47 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      {
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_retain();
        swift_retain();
        if ((v44(v75, v76) & 1) != 0)
        {
          swift_bridgeObjectRelease();
          int v38 = v74;
          v79(v74);
          swift_release();
          swift_release();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          int v40 = v81;
          if (v46) {
            uint64_t v39 = v80;
          }
          else {
            uint64_t v39 = 0LL;
          }
          int v48 = 1;
LABEL_41:
          uint64_t v49 = a9;
          if (one-time initialization token for suffixHeuristics != -1) {
            swift_once();
          }
          __int16 v76 = v46;
          uint64_t v50 = *((void *)suffixHeuristics._rawValue + 2);
          if (v50)
          {
            uint64_t v71 = v39;
            uint64_t v72 = a9;
            LODWORD(v73) = v48;
            uint64_t v75 = swift_bridgeObjectRetain();
            unsigned int v51 = (void **)(v75 + 56);
            while (1)
            {
              uint64_t v52 = (uint64_t)*(v51 - 1);
              uint64_t v54 = *v51;
              uint64_t v53 = (uint64_t (*)(uint64_t, uint64_t))v51[1];
              uint64_t v55 = (void (*)(void))v51[3];
              __int16 v79 = (void (*)(void))v51[5];
              __int16 v80 = v55;
              uint64_t v56 = v51[6];
              BOOL v57 = v52 == v82 && v54 == v40;
              if (v57 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
              {
                swift_bridgeObjectRetain();
                swift_bridgeObjectRetain();
                swift_bridgeObjectRetain();
                swift_retain();
                swift_retain();
                if ((v53(v77, v78) & 1) != 0)
                {
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  int v38 = v74;
                  v80(v74);
                  swift_release();
                  swift_release();
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  char v58 = 1;
                  if (v56)
                  {
                    swift_bridgeObjectRelease();
                    *uint64_t v69 = v73;
                    *uint64_t v72 = 1;
LABEL_61:
                    swift_bridgeObjectRetain();
                    id v61 = objc_allocWithZone((Class)&OBJC_CLASS___NSString);
                    uint64_t v62 = String._bridgeToObjectiveCImpl()();
                    swift_bridgeObjectRelease();
                    id v63 = objc_msgSend(v61, sel_initWithString_, v62);
                    swift_unknownObjectRelease();
                    __int16 v64 = *v68;
                    *uint64_t v68 = v63;

LABEL_62:
                    unsigned int v65 = -[NSMorphology isIdentity](v38);

                    swift_bridgeObjectRelease();
                    if (v65)
                    {

                      return 0LL;
                    }

                    return v38;
                  }

                  __int16 v59 = v69;
                  unint64_t v60 = v76;
                  uint64_t v49 = v72;
                  LOBYTE(v48) = v73;
LABEL_57:
                  _BYTE *v59 = v48;
                  *uint64_t v49 = v58;
                  if (v60) {
                    goto LABEL_61;
                  }
                  goto LABEL_62;
                }

                swift_bridgeObjectRelease();
                swift_release();
                swift_release();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                int v40 = v81;
              }

              v51 += 10;
              if (!--v50)
              {
                swift_bridgeObjectRelease();
                int v38 = v74;
                LOBYTE(v48) = v73;
                uint64_t v49 = v72;
                break;
              }
            }
          }

          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          char v58 = 0;
          __int16 v59 = v69;
          unint64_t v60 = v76;
          goto LABEL_57;
        }

        swift_bridgeObjectRelease();
        swift_release();
        swift_release();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        int v40 = v81;
      }

      v41 += 10;
      uint64_t v39 = (void (*)(void))((char *)v39 - 1);
      if (!v39)
      {
        swift_bridgeObjectRelease();
        int v48 = 0;
        int v46 = 0LL;
        int v38 = v74;
        goto LABEL_41;
      }
    }
  }

  uint64_t v33 = (uint64_t)v27;
  outlined copy of Locale.LanguageCode?((uint64_t)v80, 0LL);
  outlined copy of Locale.LanguageCode?(v31, v15);
  outlined copy of Locale.LanguageCode?(v18, v33);
  uint64_t v82 = specialized _withFixedCharBuffer(size:_:)(257LL, (uint64_t *)&v84);
  uint64_t v70 = v34;
  outlined consume of Locale.LanguageCode?((uint64_t)v80, 0LL);
  outlined consume of Locale.LanguageCode?(v31, v15);
  outlined consume of Locale.LanguageCode?(v18, v33);
  if (v70)
  {
    Swift::String v35 = String.lowercased()();
    __int16 v81 = v35._object;
    uint64_t v82 = v35._countAndFlagsBits;
    uint64_t v32 = 0LL;
    goto LABEL_22;
  }

  outlined consume of Locale.LanguageCode?((uint64_t)v80, 0LL);
  outlined consume of Locale.LanguageCode?(v31, v15);
  outlined consume of Locale.LanguageCode?(v18, (uint64_t)v79);
  return 0LL;
}

__n128 __swift_memcpy80_8(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  __n128 result = *(__n128 *)(a2 + 16);
  __int128 v3 = *(_OWORD *)(a2 + 32);
  __int128 v4 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v4;
  *(__n128 *)(a1 + 16) = result;
  *(_OWORD *)(a1 + 32) = v3;
  return result;
}

ValueMetadata *type metadata accessor for PrefixInflectionHeuristic()
{
  return &type metadata for PrefixInflectionHeuristic;
}

uint64_t destroy for PrefixInflectionHeuristic()
{
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for PrefixInflectionHeuristic(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  uint64_t v4 = *(void *)(a2 + 64);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = v4;
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for PrefixInflectionHeuristic(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v4 = a2[5];
  a1[4] = a2[4];
  a1[5] = v4;
  swift_retain();
  swift_release();
  uint64_t v5 = a2[7];
  a1[6] = a2[6];
  a1[7] = v5;
  swift_retain();
  swift_release();
  a1[8] = a2[8];
  a1[9] = a2[9];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for PrefixInflectionHeuristic(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  swift_release();
  uint64_t v5 = *(void *)(a2 + 56);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(void *)(a1 + 56) = v5;
  swift_release();
  uint64_t v6 = *(void *)(a2 + 72);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = v6;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for PrefixInflectionHeuristic(uint64_t a1, int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0 && *(_BYTE *)(a1 + 80)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for PrefixInflectionHeuristic(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 72) = 0LL;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(_BYTE *)(result + 80) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 80) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for SuffixInflectionHeuristic()
{
  return &type metadata for SuffixInflectionHeuristic;
}

NSSet __swiftcall Set._bridgeToObjectiveC()()
{
  if ((v0 & 0xC000000000000001LL) != 0)
  {
    if (v0 < 0) {
      uint64_t v1 = v0;
    }
    else {
      uint64_t v1 = v0 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain();
    return (NSSet)v1;
  }

  else
  {
    swift_bridgeObjectRetain();
    return (NSSet)_NativeSet.bridged()();
  }

unint64_t static Set._unconditionallyBridgeFromObjectiveC(_:)(void *a1, uint64_t a2, uint64_t a3)
{
  if (!a1) {
    return MEMORY[0x18961AFF8];
  }
  unint64_t v4 = 0LL;
  static Set._forceBridgeFromObjectiveC(_:result:)(a1, &v4, a2, a3);
  unint64_t result = v4;
  if (!v4) {
    __break(1u);
  }
  return result;
}

double NSOrderedSet.makeIterator()@<D0>(uint64_t a1@<X8>)
{
  uint64_t v2 = swift_unknownObjectRetain();
  return NSFastEnumerationIterator.init(_:)(v2, a1);
}

unint64_t static Set._forceBridgeFromObjectiveC(_:result:)( void *a1, unint64_t *a2, uint64_t a3, uint64_t a4)
{
  unint64_t result = static Set._bridgeFromObjectiveCAdoptingNativeStorageOf(_:)();
  if (result)
  {
    *a2 = result;
    return result;
  }

  if ((_swift_isClassOrObjCExistentialType() & 1) != 0)
  {
    unint64_t result = (unint64_t)objc_msgSend(a1, sel_copyWithZone_, 0);
    *a2 = ~(result >> 1) & 0x4000000000000000LL | result;
    return result;
  }

  uint64_t v9 = MEMORY[0x189617FA8];
  if (a3 != MEMORY[0x189617FA8])
  {
    id v10 = objc_msgSend(a1, sel_count);
    if (v10)
    {
      type metadata accessor for _SetStorage();
      uint64_t v11 = static _SetStorage.allocate(capacity:)();
    }

    else
    {
      uint64_t v11 = MEMORY[0x18961AFF8];
    }

    uint64_t v29 = v11;
    id v30 = v10;
    unint64_t v17 = (void *)swift_allocObject();
    v17[2] = a3;
    v17[3] = a4;
    void v17[4] = &v29;
    uint64_t v18 = swift_allocObject();
    *(void *)(v18 + 16) = partial apply for closure #2 in static Set._forceBridgeFromObjectiveC(_:result:);
    *(void *)(v18 + 24) = v17;
    uint64_t v27 = partial apply for closure #1 in NSRunLoop.schedule(options:_:);
    uint64_t v28 = v18;
    uint64_t v23 = MEMORY[0x1895F87A8];
    uint64_t v24 = 1107296256LL;
    uint64_t v25 = thunk for @escaping @callee_guaranteed (@in_guaranteed Any, @unowned UnsafeMutablePointer<ObjCBool>) -> ();
    int v26 = &block_descriptor_4;
    unint64_t v19 = _Block_copy(&v23);
    swift_retain();
    swift_release();
    objc_msgSend(a1, sel_enumerateObjectsUsingBlock_, v19);
    _Block_release(v19);
    char isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
    unint64_t result = swift_release();
    if ((isEscapingClosureAtFileLocation & 1) != 0)
    {
      __break(1u);
    }

    else
    {
      uint64_t v16 = v29;
      id v21 = v30;
      id v22 = *(id *)(v29 + 16);
      unint64_t result = swift_release();
      if (v22 == v21) {
        goto LABEL_13;
      }
    }

    __break(1u);
LABEL_17:
    __break(1u);
    return result;
  }

  objc_msgSend(a1, sel_count);
  uint64_t v29 = Set.init(minimumCapacity:)();
  uint64_t v12 = (void *)swift_allocObject();
  v12[2] = v9;
  void v12[3] = a4;
  v12[4] = &v29;
  uint64_t v13 = swift_allocObject();
  *(void *)(v13 + 16) = partial apply for closure #1 in static Set._forceBridgeFromObjectiveC(_:result:);
  *(void *)(v13 + 24) = v12;
  uint64_t v27 = closure #1 in NSRunLoop.schedule(options:_:)partial apply;
  uint64_t v28 = v13;
  uint64_t v23 = MEMORY[0x1895F87A8];
  uint64_t v24 = 1107296256LL;
  uint64_t v25 = thunk for @escaping @callee_guaranteed (@in_guaranteed Any, @unowned UnsafeMutablePointer<ObjCBool>) -> ();
  int v26 = &block_descriptor_13;
  uint64_t v14 = _Block_copy(&v23);
  swift_retain();
  swift_release();
  objc_msgSend(a1, sel_enumerateObjectsUsingBlock_, v14);
  _Block_release(v14);
  char v15 = swift_isEscapingClosureAtFileLocation();
  unint64_t result = swift_release();
  if ((v15 & 1) != 0) {
    goto LABEL_17;
  }
  uint64_t v16 = v29;
  unint64_t result = swift_release();
LABEL_13:
  *a2 = v16;
  return result;
}

uint64_t closure #1 in static Set._forceBridgeFromObjectiveC(_:result:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = *(void *)(a4 - 8);
  uint64_t v6 = MEMORY[0x1895F8858](a1);
  uint64_t v7 = MEMORY[0x1895F8858](v6);
  uint64_t v9 = &v11[-v8];
  outlined init with copy of Any(v7, (uint64_t)v11);
  swift_dynamicCast();
  type metadata accessor for Set._Variant();
  Set._Variant.insert(_:)();
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v5 + 8))(v9, a4);
}

uint64_t thunk for @callee_guaranteed (@in_guaranteed Any, @unowned UnsafeMutablePointer<ObjCBool>) -> ()( uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  return a3();
}

uint64_t thunk for @escaping @callee_guaranteed (@in_guaranteed Any, @unowned UnsafeMutablePointer<ObjCBool>) -> ()( uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void (**)(void *, uint64_t))(a1 + 32);
  v7[3] = swift_getObjectType();
  v7[0] = a2;
  swift_unknownObjectRetain();
  v5(v7, a3);
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v7);
}

uint64_t specialized closure #2 in static Set._forceBridgeFromObjectiveC(_:result:)( uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t result = swift_dynamicCast();
  uint64_t v5 = (void *)*a3;
  if (*(void *)(*a3 + 16LL) >= a3[1])
  {
    __break(1u);
  }

  else
  {
    outlined init with copy of AnyHashable((uint64_t)v7, (uint64_t)v6);
    specialized _NativeSet._unsafeInsertNew(_:)((uint64_t)v6, v5);
    return outlined destroy of AnyHashable((uint64_t)v7);
  }

  return result;
}

uint64_t closure #2 in static Set._forceBridgeFromObjectiveC(_:result:)( uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(a4 - 8);
  uint64_t v7 = MEMORY[0x1895F8858](a1);
  uint64_t v9 = &v14[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v10 = MEMORY[0x1895F8858](v7);
  uint64_t v12 = &v14[-v11];
  outlined init with copy of Any(v10, (uint64_t)v14);
  uint64_t result = swift_dynamicCast();
  if (*(void *)(*a3 + 16LL) >= a3[1])
  {
    __break(1u);
  }

  else
  {
    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v6 + 16))(v9, v12, a4);
    _NativeSet._unsafeInsertNew(_:)();
    return (*(uint64_t (**)(_BYTE *, uint64_t))(v6 + 8))(v12, a4);
  }

  return result;
}

uint64_t sub_183085F64()
{
  return swift_deallocObject();
}

uint64_t partial apply for closure #2 in static Set._forceBridgeFromObjectiveC(_:result:)( uint64_t a1, uint64_t a2)
{
  return closure #2 in static Set._forceBridgeFromObjectiveC(_:result:)( a1,  a2,  *(void **)(v2 + 32),  *(void *)(v2 + 16));
}

uint64_t sub_183085F80()
{
  return swift_deallocObject();
}

uint64_t block_copy_helper_4(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_4()
{
  return swift_release();
}

uint64_t sub_183085FA8()
{
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in static Set._forceBridgeFromObjectiveC(_:result:)( uint64_t a1, uint64_t a2)
{
  return closure #1 in static Set._forceBridgeFromObjectiveC(_:result:)( a1,  a2,  *(void *)(v2 + 32),  *(void *)(v2 + 16));
}

uint64_t sub_183085FC4()
{
  return swift_deallocObject();
}

BOOL static Set._conditionallyBridgeFromObjectiveC(_:result:)(void *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = static Set._bridgeFromObjectiveCAdoptingNativeStorageOf(_:)();
  if (!v8)
  {
    unint64_t v9 = (unint64_t)objc_msgSend(a1, sel_copyWithZone_, 0);
    uint64_t v8 = ~(v9 >> 1) & 0x4000000000000000LL | v9;
  }

  _swift_isClassOrObjCExistentialType();
  uint64_t v10 = specialized _setDownCastConditional<A, B>(_:)(v8, a3, a4);
  swift_bridgeObjectRelease();
  *a2 = v10;
  return v10 != 0;
}

unint64_t lazy protocol witness table accessor for type NSObject and conformance NSObject()
{
  unint64_t result = lazy protocol witness table cache variable for type NSObject and conformance NSObject;
  if (!lazy protocol witness table cache variable for type NSObject and conformance NSObject)
  {
    unint64_t v1 = type metadata accessor for NSObject();
    unint64_t result = MEMORY[0x186E20D4C](MEMORY[0x18961BB08], v1);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type NSObject and conformance NSObject);
  }

  return result;
}

uint64_t specialized _setDownCastConditional<A, B>(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v89 = a3;
  uint64_t v5 = type metadata accessor for Optional();
  uint64_t v80 = *(void *)(v5 - 8);
  uint64_t v81 = v5;
  uint64_t v6 = MEMORY[0x1895F8858](v5);
  uint64_t v8 = (char *)&v79 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = MEMORY[0x1895F8858](v6);
  uint64_t v11 = (char *)&v79 - v10;
  uint64_t v12 = *(void *)(a2 - 8);
  uint64_t v13 = MEMORY[0x1895F8858](v9);
  char v15 = (char *)&v79 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v16 = MEMORY[0x1895F8858](v13);
  uint64_t v87 = (char *)&v79 - v17;
  uint64_t v18 = MEMORY[0x1895F8858](v16);
  uint64_t v88 = (char *)&v79 - v19;
  MEMORY[0x1895F8858](v18);
  id v21 = (char *)&v79 - v20;
  unint64_t v22 = a1 & 0xC000000000000001LL;
  if ((a1 & 0xC000000000000001LL) == 0)
  {
    uint64_t v23 = (char *)a1;
    if (*(void *)(a1 + 16)) {
      goto LABEL_3;
    }
LABEL_5:
    uint64_t v24 = MEMORY[0x18961AFF8];
    goto LABEL_6;
  }

  uint64_t v23 = (char *)a1;
  if (!__CocoaSet.count.getter()) {
    goto LABEL_5;
  }
LABEL_3:
  type metadata accessor for _SetStorage();
  uint64_t v24 = static _SetStorage.allocate(capacity:)();
LABEL_6:
  unint64_t v25 = (unint64_t)v23;
  uint64_t v92 = v24;
  uint64_t v26 = MEMORY[0x18961AFB8];
  if (a2 == MEMORY[0x189617FA8])
  {
    if (v22)
    {
      swift_bridgeObjectRetain();
      __CocoaSet.makeIterator()();
      type metadata accessor for NSObject();
      lazy protocol witness table accessor for type NSObject and conformance NSObject();
      uint64_t result = Set.Iterator.init(_cocoa:)();
      unint64_t v25 = (unint64_t)v93;
      uint64_t v87 = v94;
      uint64_t v31 = v95;
      uint64_t v32 = v96;
      unint64_t v33 = v97;
    }

    else
    {
      uint64_t v60 = -1LL << *(_BYTE *)(v25 + 32);
      uint64_t v61 = *(void *)(v25 + 56);
      uint64_t v87 = (char *)(v25 + 56);
      uint64_t v31 = ~v60;
      uint64_t v62 = -v60;
      if (v62 < 64) {
        uint64_t v63 = ~(-1LL << v62);
      }
      else {
        uint64_t v63 = -1LL;
      }
      unint64_t v33 = v63 & v61;
      uint64_t result = swift_bridgeObjectRetain();
      uint64_t v32 = 0LL;
    }

    uint64_t v83 = v31;
    uint64_t v85 = v25 & 0x7FFFFFFFFFFFFFFFLL;
    int64_t v86 = (unint64_t)(v31 + 64) >> 6;
    uint64_t v64 = MEMORY[0x189617FA8];
    int64_t v84 = v26 + 8;
    unint64_t v65 = v25;
    if ((v25 & 0x8000000000000000LL) != 0) {
      goto LABEL_58;
    }
    while (1)
    {
      if (v33)
      {
        uint64_t v66 = (v33 - 1) & v33;
        unint64_t v67 = __clz(__rbit64(v33)) | (v32 << 6);
        uint64_t v68 = v32;
      }

      else
      {
        int64_t v71 = v32 + 1;
        if (__OFADD__(v32, 1LL)) {
          goto LABEL_86;
        }
        if (v71 >= v86)
        {
LABEL_83:
          uint64_t v91 = 0LL;
LABEL_84:
          outlined consume of Set<A1>.Iterator._Variant<A><A1>();
          return v92;
        }

        unint64_t v72 = *(void *)&v87[8 * v71];
        uint64_t v68 = v32 + 1;
        if (!v72)
        {
          uint64_t v68 = v32 + 2;
          if (v32 + 2 >= v86) {
            goto LABEL_83;
          }
          unint64_t v72 = *(void *)&v87[8 * v68];
          if (!v72)
          {
            uint64_t v68 = v32 + 3;
            if (v32 + 3 >= v86) {
              goto LABEL_83;
            }
            unint64_t v72 = *(void *)&v87[8 * v68];
            if (!v72)
            {
              uint64_t v68 = v32 + 4;
              if (v32 + 4 >= v86) {
                goto LABEL_83;
              }
              unint64_t v72 = *(void *)&v87[8 * v68];
              if (!v72)
              {
                uint64_t v68 = v32 + 5;
                if (v32 + 5 >= v86) {
                  goto LABEL_83;
                }
                unint64_t v72 = *(void *)&v87[8 * v68];
                if (!v72)
                {
                  uint64_t v73 = v32 + 6;
                  do
                  {
                    if (v86 == v73) {
                      goto LABEL_83;
                    }
                    unint64_t v72 = *(void *)&v87[8 * v73++];
                  }

                  while (!v72);
                  uint64_t v68 = v73 - 1;
                }
              }
            }
          }
        }

        uint64_t v66 = (v72 - 1) & v72;
        unint64_t v67 = __clz(__rbit64(v72)) + (v68 << 6);
      }

      uint64_t v70 = *(void **)(*(void *)(v25 + 48) + 8 * v67);
      uint64_t v91 = v70;
      id v74 = v70;
      while (1)
      {
        uint64_t v90 = (uint64_t)v70;
        type metadata accessor for NSObject();
        int v75 = swift_dynamicCast();
        (*(void (**)(char *, void, uint64_t, uint64_t))(v12 + 56))(v11, v75 ^ 1u, 1LL, v64);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v11, 1LL, v64) == 1)
        {
          swift_release();
          outlined consume of Set<A1>.Iterator._Variant<A><A1>();
          (*(void (**)(char *, uint64_t))(v80 + 8))(v11, v81);
          return 0LL;
        }

        __int16 v76 = *(void (**)(char *, char *, uint64_t))(v12 + 32);
        v76(v21, v11, v64);
        uint64_t v77 = (uint64_t)v88;
        v76(v88, v21, v64);
        uint64_t v78 = type metadata accessor for _NativeSet();
        uint64_t result = _NativeSet._unsafeUpdate(with:)(v77, v78);
        uint64_t v32 = v68;
        unint64_t v33 = v66;
        unint64_t v25 = v65;
        if ((v65 & 0x8000000000000000LL) == 0) {
          break;
        }
LABEL_58:
        uint64_t v69 = __CocoaSet.Iterator.next()();
        if (!v69) {
          goto LABEL_83;
        }
        uint64_t v90 = v69;
        type metadata accessor for NSObject();
        swift_dynamicCast();
        uint64_t v70 = v91;
        uint64_t v68 = v32;
        uint64_t v66 = v33;
      }
    }
  }

  int64_t v86 = (int64_t)v15;
  if (v22)
  {
    swift_bridgeObjectRetain();
    swift_retain();
    __CocoaSet.makeIterator()();
    type metadata accessor for NSObject();
    lazy protocol witness table accessor for type NSObject and conformance NSObject();
    uint64_t result = Set.Iterator.init(_cocoa:)();
    unint64_t v25 = (unint64_t)v93;
    uint64_t v85 = (uint64_t)v94;
    uint64_t v28 = v95;
    uint64_t v29 = v96;
    unint64_t v30 = v97;
  }

  else
  {
    uint64_t v34 = -1LL << *(_BYTE *)(v25 + 32);
    uint64_t v35 = *(void *)(v25 + 56);
    uint64_t v85 = v25 + 56;
    uint64_t v28 = ~v34;
    uint64_t v36 = -v34;
    if (v36 < 64) {
      uint64_t v37 = ~(-1LL << v36);
    }
    else {
      uint64_t v37 = -1LL;
    }
    unint64_t v30 = v37 & v35;
    swift_bridgeObjectRetain();
    uint64_t result = swift_retain();
    uint64_t v29 = 0LL;
  }

  uint64_t v79 = v28;
  uint64_t v83 = v25 & 0x7FFFFFFFFFFFFFFFLL;
  int64_t v84 = (unint64_t)(v28 + 64) >> 6;
  uint64_t v38 = v24 + 56;
  uint64_t v82 = v26 + 8;
  uint64_t v88 = (char *)v25;
  while ((v25 & 0x8000000000000000LL) != 0)
  {
    uint64_t v43 = __CocoaSet.Iterator.next()();
    if (!v43) {
      goto LABEL_82;
    }
    uint64_t v90 = v43;
    type metadata accessor for NSObject();
    swift_dynamicCast();
    int v44 = v91;
    uint64_t v42 = v29;
    uint64_t v40 = v30;
LABEL_40:
    uint64_t v90 = (uint64_t)v44;
    type metadata accessor for NSObject();
    int v49 = swift_dynamicCast();
    (*(void (**)(char *, void, uint64_t, uint64_t))(v12 + 56))(v8, v49 ^ 1u, 1LL, a2);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v8, 1LL, a2) == 1)
    {
      swift_release();
      swift_release();
      outlined consume of Set<A1>.Iterator._Variant<A><A1>();
      (*(void (**)(char *, uint64_t))(v80 + 8))(v8, v81);
      return 0LL;
    }

    uint64_t v50 = *(void (**)(char *, char *, uint64_t))(v12 + 32);
    unsigned int v51 = v87;
    v50(v87, v8, a2);
    int64_t v52 = v86;
    v50((char *)v86, v51, a2);
    uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)();
    uint64_t v53 = -1LL << *(_BYTE *)(v24 + 32);
    unint64_t v54 = result & ~v53;
    unint64_t v55 = v54 >> 6;
    if (((-1LL << v54) & ~*(void *)(v38 + 8 * (v54 >> 6))) != 0)
    {
      unint64_t v39 = __clz(__rbit64((-1LL << v54) & ~*(void *)(v38 + 8 * (v54 >> 6)))) | v54 & 0x7FFFFFFFFFFFFFC0LL;
      unint64_t v25 = (unint64_t)v88;
    }

    else
    {
      char v56 = 0;
      unint64_t v57 = (unint64_t)(63 - v53) >> 6;
      unint64_t v25 = (unint64_t)v88;
      do
      {
        if (++v55 == v57 && (v56 & 1) != 0)
        {
          __break(1u);
          goto LABEL_85;
        }

        BOOL v58 = v55 == v57;
        if (v55 == v57) {
          unint64_t v55 = 0LL;
        }
        v56 |= v58;
        uint64_t v59 = *(void *)(v38 + 8 * v55);
      }

      while (v59 == -1);
      unint64_t v39 = __clz(__rbit64(~v59)) + (v55 << 6);
    }

    *(void *)(v38 + ((v39 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v39;
    uint64_t result = ((uint64_t (*)(unint64_t, int64_t, uint64_t))v50)( *(void *)(v24 + 48) + *(void *)(v12 + 72) * v39,  v52,  a2);
    ++*(void *)(v24 + 16);
    uint64_t v29 = v42;
    unint64_t v30 = v40;
  }

  if (v30)
  {
    uint64_t v40 = (v30 - 1) & v30;
    unint64_t v41 = __clz(__rbit64(v30)) | (v29 << 6);
    uint64_t v42 = v29;
LABEL_39:
    int v44 = *(void **)(*(void *)(v25 + 48) + 8 * v41);
    uint64_t v91 = v44;
    id v48 = v44;
    goto LABEL_40;
  }

  int64_t v45 = v29 + 1;
  if (!__OFADD__(v29, 1LL))
  {
    if (v45 >= v84) {
      goto LABEL_82;
    }
    unint64_t v46 = *(void *)(v85 + 8 * v45);
    uint64_t v42 = v29 + 1;
    if (!v46)
    {
      uint64_t v42 = v29 + 2;
      if (v29 + 2 >= v84) {
        goto LABEL_82;
      }
      unint64_t v46 = *(void *)(v85 + 8 * v42);
      if (!v46)
      {
        uint64_t v42 = v29 + 3;
        if (v29 + 3 >= v84) {
          goto LABEL_82;
        }
        unint64_t v46 = *(void *)(v85 + 8 * v42);
        if (!v46)
        {
          uint64_t v42 = v29 + 4;
          if (v29 + 4 >= v84) {
            goto LABEL_82;
          }
          unint64_t v46 = *(void *)(v85 + 8 * v42);
          if (!v46)
          {
            uint64_t v42 = v29 + 5;
            if (v29 + 5 >= v84) {
              goto LABEL_82;
            }
            unint64_t v46 = *(void *)(v85 + 8 * v42);
            if (!v46)
            {
              uint64_t v47 = v29 + 6;
              while (v84 != v47)
              {
                unint64_t v46 = *(void *)(v85 + 8 * v47++);
                if (v46)
                {
                  uint64_t v42 = v47 - 1;
                  goto LABEL_38;
                }
              }

NSSet protocol witness for _ObjectiveCBridgeable._bridgeToObjectiveC() in conformance Set<A>()
{
  return Set._bridgeToObjectiveC()();
}

unint64_t protocol witness for static _ObjectiveCBridgeable._forceBridgeFromObjectiveC(_:result:) in conformance Set<A>( void *a1, unint64_t *a2, uint64_t a3)
{
  return static Set._forceBridgeFromObjectiveC(_:result:)(a1, a2, *(void *)(a3 + 16), *(void *)(a3 + 24));
}

BOOL protocol witness for static _ObjectiveCBridgeable._conditionallyBridgeFromObjectiveC(_:result:) in conformance Set<A>( void *a1, uint64_t *a2, uint64_t a3)
{
  return static Set._conditionallyBridgeFromObjectiveC(_:result:)(a1, a2, *(void *)(a3 + 16), *(void *)(a3 + 24));
}

unint64_t protocol witness for static _ObjectiveCBridgeable._unconditionallyBridgeFromObjectiveC(_:) in conformance Set<A>@<X0>( void *a1@<X0>, uint64_t a2@<X1>, unint64_t *a3@<X8>)
{
  unint64_t result = static Set._unconditionallyBridgeFromObjectiveC(_:)(a1, *(void *)(a2 + 16), *(void *)(a2 + 24));
  *a3 = result;
  return result;
}

uint64_t NSSet._toCustomAnyHashable()()
{
  unint64_t v1 = v0;
  swift_unknownObjectRetain();
  uint64_t v2 = static Set._bridgeFromObjectiveCAdoptingNativeStorageOf(_:)();
  if (v2)
  {
    uint64_t v3 = v2;
LABEL_9:
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    v13[0] = v3;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Set<AnyHashable>);
    lazy protocol witness table accessor for type Set<AnyHashable> and conformance Set<A>();
    return AnyHashable.init<A>(_:)();
  }

  id v4 = objc_msgSend(v0, sel_count);
  if (v4)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<AnyHashable>);
    uint64_t v5 = static _SetStorage.allocate(capacity:)();
  }

  else
  {
    uint64_t v5 = MEMORY[0x18961AFF8];
  }

  uint64_t v14 = v5;
  id v15 = v4;
  uint64_t v6 = swift_allocObject();
  *(void *)(v6 + 16) = &v14;
  uint64_t v7 = swift_allocObject();
  *(void *)(v7 + 16) = partial apply for specialized closure #2 in static Set._forceBridgeFromObjectiveC(_:result:);
  *(void *)(v7 + 24) = v6;
  v13[4] = closure #1 in NSRunLoop.schedule(options:_:)partial apply;
  v13[5] = v7;
  v13[0] = MEMORY[0x1895F87A8];
  v13[1] = 1107296256LL;
  v13[2] = thunk for @escaping @callee_guaranteed (@in_guaranteed Any, @unowned UnsafeMutablePointer<ObjCBool>) -> ();
  v13[3] = &block_descriptor_23;
  uint64_t v8 = _Block_copy(v13);
  swift_retain();
  swift_release();
  objc_msgSend(v1, sel_enumerateObjectsUsingBlock_, v8);
  _Block_release(v8);
  char isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
  uint64_t result = swift_release();
  if ((isEscapingClosureAtFileLocation & 1) != 0)
  {
    __break(1u);
  }

  else
  {
    uint64_t v3 = v14;
    id v11 = v15;
    id v12 = *(id *)(v14 + 16);
    uint64_t result = swift_release();
    if (v12 == v11)
    {
      swift_bridgeObjectRetain();
      goto LABEL_9;
    }
  }

  __break(1u);
  return result;
}

uint64_t sub_183086BE8()
{
  return swift_deallocObject();
}

uint64_t partial apply for specialized closure #2 in static Set._forceBridgeFromObjectiveC(_:result:)( uint64_t a1, uint64_t a2)
{
  return specialized closure #2 in static Set._forceBridgeFromObjectiveC(_:result:)(a1, a2, *(void **)(v2 + 16));
}

uint64_t sub_183086C00()
{
  return swift_deallocObject();
}

unint64_t lazy protocol witness table accessor for type Set<AnyHashable> and conformance Set<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type Set<AnyHashable> and conformance Set<A>;
  if (!lazy protocol witness table cache variable for type Set<AnyHashable> and conformance Set<A>)
  {
    uint64_t v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Set<AnyHashable>);
    unint64_t result = MEMORY[0x186E20D4C](MEMORY[0x189618700], v1);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Set<AnyHashable> and conformance Set<A>);
  }

  return result;
}

void protocol witness for _HasCustomAnyHashableRepresentation._toCustomAnyHashable() in conformance NSSet()
{
  id v1 = *v0;
  NSSet._toCustomAnyHashable()();
}

id NSSet.init(set:)(void *a1)
{
  id result = objc_msgSend(a1, sel_count);
  if (((unint64_t)result - 0x1000000000000000LL) >> 61 == 7)
  {
    id v3 = result;
    id v4 = (const void **)swift_slowAlloc();
    CFSetGetValues((CFSetRef)a1, v4);
    id v5 = objc_msgSend(objc_allocWithZone((Class)swift_getObjCClassFromMetadata()), sel_initWithObjects_count_, v4, v3);
    MEMORY[0x186E20E60](v4, -1LL, -1LL);
    return v5;
  }

  else
  {
    __break(1u);
  }

  return result;
}

uint64_t NSSet.customMirror.getter()
{
  if (!static Set._bridgeFromObjectiveCAdoptingNativeStorageOf(_:)()) {
    objc_msgSend(v0, sel_copyWithZone_, 0);
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Set<NSObject>);
  return Mirror.init(reflecting:)();
}

uint64_t protocol witness for CustomReflectable.customMirror.getter in conformance NSSet()
{
  return NSSet.customMirror.getter();
}

uint64_t protocol witness for CVarArg._cVarArgEncoding.getter in conformance Set<A>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = MEMORY[0x186E20D4C](&protocol conformance descriptor for Set<A>, a1);
  return CVarArg<>._cVarArgEncoding.getter(a1, a2, v4);
}

uint64_t _NativeSet._unsafeUpdate(with:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 16);
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x1895F8858](a1);
  uint64_t v6 = (char *)v23 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  v23[0] = v2;
  uint64_t v7 = *v2;
  uint64_t v9 = *(void *)(v8 + 24);
  uint64_t v25 = v10;
  v23[1] = v9;
  uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)();
  uint64_t v12 = -1LL << *(_BYTE *)(v7 + 32);
  unint64_t v13 = result & ~v12;
  uint64_t v14 = *(void *)(v7 + 56 + ((v13 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v13;
  uint64_t v24 = v4;
  if ((v14 & 1) != 0)
  {
    uint64_t v15 = ~v12;
    uint64_t v16 = *(void *)(v4 + 72);
    uint64_t v17 = *(void (**)(char *, unint64_t, uint64_t))(v4 + 16);
    while (1)
    {
      v17(v6, *(void *)(v7 + 48) + v16 * v13, v3);
      char v18 = dispatch thunk of static Equatable.== infix(_:_:)();
      uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v24 + 8))(v6, v3);
      if ((v18 & 1) != 0) {
        return (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v24 + 40))( *(void *)(*(void *)v23[0] + 48LL) + v16 * v13,  v25,  v3);
      }
      unint64_t v13 = (v13 + 1) & v15;
      if (((*(void *)(v7 + 56 + ((v13 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v13) & 1) == 0) {
        goto LABEL_5;
      }
    }
  }

  else
  {
LABEL_5:
    uint64_t v19 = *(void *)v23[0];
    if (*(void *)(*(void *)v23[0] + 16LL) >= *(void *)(*(void *)v23[0] + 24LL))
    {
      __break(1u);
    }

    else
    {
      *(void *)(v19 + ((v13 >> 3) & 0xFFFFFFFFFFFFFF8LL) + 56) |= 1LL << v13;
      uint64_t result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v24 + 32))( *(void *)(v19 + 48) + *(void *)(v24 + 72) * v13,  v25,  v3);
      uint64_t v20 = *(void *)(v19 + 16);
      BOOL v21 = __OFADD__(v20, 1LL);
      uint64_t v22 = v20 + 1;
      if (!v21)
      {
        *(void *)(v19 + 16) = v22;
        return result;
      }
    }

    __break(1u);
  }

  return result;
}

uint64_t protocol witness for ContiguousBytes.withUnsafeBytes<A>(_:) in conformance <A> [A]( uint64_t (*a1)(uint64_t, uint64_t), uint64_t a2)
{
  return _sSa15withUnsafeBytesyqd__qd__SWKXEKlFSWxs5Error_pRi_zRi0_zlyqd__Isgyrzo_Says5UInt8VGqd__sAB_pADRszr__lIetMggrzo_Tpq5( a1,  a2,  *v2);
}

uint64_t _sSa15withUnsafeBytesyqd__qd__SWKXEKlFSWxs5Error_pRi_zRi0_zlyqd__Isgyrzo_Says5UInt8VGqd__sAB_pADRszr__lIetMggrzo_Tpq5( uint64_t (*a1)(uint64_t, uint64_t), uint64_t a2, uint64_t a3)
{
  return a1(a3 + 32, a3 + 32 + *(void *)(a3 + 16));
}

uint64_t (*protocol witness for ContiguousBytes.withUnsafeBytes<A>(_:) in conformance <A> ArraySlice<A>( uint64_t (*a1)(uint64_t, unint64_t), uint64_t a2))(uint64_t, unint64_t)
{
  return _ss10ArraySliceV15withUnsafeBytesyqd__qd__SWKXEKlFSWxs5Error_pRi_zRi0_zlyqd__Isgyrzo_ABys5UInt8VGqd__sAD_pAFRszr__lIetMggrzo_Tpq5( a1,  a2,  *(void *)v2,  *(void *)(v2 + 8),  *(void *)(v2 + 16),  *(void *)(v2 + 24));
}

uint64_t (*_ss10ArraySliceV15withUnsafeBytesyqd__qd__SWKXEKlFSWxs5Error_pRi_zRi0_zlyqd__Isgyrzo_ABys5UInt8VGqd__sAD_pAFRszr__lIetMggrzo_Tpq5( uint64_t (*result)(uint64_t, unint64_t), uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6))(uint64_t, unint64_t)
{
  if (!__OFSUB__(a6 >> 1, a5)) {
    return (uint64_t (*)(uint64_t, unint64_t))result(a4 + a5, a4 + (a6 >> 1));
  }
  __break(1u);
  return result;
}

uint64_t UnsafeRawBufferPointer.withUnsafeBytes<A>(_:)( uint64_t (*a1)(uint64_t, uint64_t), uint64_t a2, uint64_t a3, uint64_t a4)
{
  return a1(a3, a4);
}

uint64_t protocol witness for ContiguousBytes.withUnsafeBytes<A>(_:) in conformance UnsafeRawBufferPointer( uint64_t (*a1)(uint64_t, uint64_t), uint64_t a2)
{
  return UnsafeRawBufferPointer.withUnsafeBytes<A>(_:)(a1, a2, *v2, v2[1]);
}

uint64_t UnsafeMutableRawBufferPointer.withUnsafeBytes<A>(_:)( uint64_t (*a1)(uint64_t, uint64_t), uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a3) {
    uint64_t v4 = a4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  return a1(a3, v4);
}

uint64_t protocol witness for ContiguousBytes.withUnsafeBytes<A>(_:) in conformance UnsafeMutableRawBufferPointer( uint64_t (*a1)(uint64_t, uint64_t), uint64_t a2)
{
  return UnsafeMutableRawBufferPointer.withUnsafeBytes<A>(_:)(a1, a2, *v2, v2[1]);
}

uint64_t UnsafeBufferPointer<A>.withUnsafeBytes<A>(_:)( uint64_t (*a1)(uint64_t, uint64_t), uint64_t a2, uint64_t a3, uint64_t a4)
{
  return UnsafeBufferPointer<A>.withUnsafeBytes<A>(_:)(a1, a2, a3, a4);
}

{
  uint64_t v4;
  if (a3) {
    uint64_t v4 = a3 + a4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  return a1(a3, v4);
}

uint64_t protocol witness for ContiguousBytes.withUnsafeBytes<A>(_:) in conformance <A> UnsafeBufferPointer<A>( uint64_t (*a1)(uint64_t, uint64_t), uint64_t a2)
{
  return UnsafeBufferPointer<A>.withUnsafeBytes<A>(_:)(a1, a2, *v2, v2[1]);
}

uint64_t UnsafeMutableBufferPointer<A>.withUnsafeBytes<A>(_:)( uint64_t (*a1)(uint64_t, uint64_t), uint64_t a2, uint64_t a3, uint64_t a4)
{
  return UnsafeBufferPointer<A>.withUnsafeBytes<A>(_:)(a1, a2, a3, a4);
}

uint64_t EmptyCollection<A>.withUnsafeBytes<A>(_:)(uint64_t (*a1)(void, void))
{
  return a1(0LL, 0LL);
}

uint64_t protocol witness for ContiguousBytes.withUnsafeBytes<A>(_:) in conformance <A> EmptyCollection<A>( uint64_t (*a1)(void, void))
{
  return EmptyCollection<A>.withUnsafeBytes<A>(_:)(a1);
}

uint64_t CollectionOfOne<A>.withUnsafeBytes<A>(_:)( uint64_t (*a1)(char *, uint64_t *), uint64_t a2, char a3)
{
  uint64_t v5 = *MEMORY[0x1895F89C0];
  char v4 = a3;
  return a1(&v4, &v5);
}

uint64_t protocol witness for ContiguousBytes.withUnsafeBytes<A>(_:) in conformance <A> CollectionOfOne<A>( uint64_t (*a1)(char *, uint64_t *), uint64_t a2)
{
  return CollectionOfOne<A>.withUnsafeBytes<A>(_:)(a1, a2, *v2);
}

uint64_t Slice<>.withUnsafeBytes<A>(_:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v7 = v6;
  uint64_t v23 = a4;
  uint64_t v24 = a5;
  uint64_t v25 = a1;
  uint64_t v26 = a2;
  uint64_t v27 = a6;
  uint64_t v9 = *(void *)(a3 + 16);
  uint64_t v22 = *(void *)(v9 - 8);
  MEMORY[0x1895F8858](a1);
  id v11 = (char *)&v22 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = *(void *)(v12 + 24);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v15 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1895F8858](AssociatedTypeWitness);
  uint64_t v17 = (char *)&v22 - v16;
  uint64_t v18 = v7 + *(int *)(a3 + 40);
  dispatch thunk of Collection.startIndex.getter();
  uint64_t v19 = dispatch thunk of Collection.distance(from:to:)();
  (*(void (**)(char *, uint64_t))(v15 + 8))(v17, AssociatedTypeWitness);
  uint64_t v20 = v22;
  (*(void (**)(char *, uint64_t, uint64_t))(v22 + 16))(v11, v18, v9);
  uint64_t v29 = v9;
  uint64_t v30 = v23;
  uint64_t v31 = v24;
  uint64_t v32 = v13;
  uint64_t v33 = v19;
  uint64_t v34 = v7;
  uint64_t v35 = v25;
  uint64_t v36 = v26;
  (*(void (**)(uint64_t (*)(uint64_t), _BYTE *))(v24 + 8))( partial apply for closure #1 in Slice<>.withUnsafeBytes<A>(_:),  v28);
  return (*(uint64_t (**)(char *, uint64_t))(v20 + 8))(v11, v9);
}

uint64_t partial apply for closure #1 in Slice<>.withUnsafeBytes<A>(_:)(uint64_t a1)
{
  uint64_t v2 = *(uint64_t (**)(uint64_t, uint64_t))(v1 + 64);
  if (a1) {
    uint64_t v3 = a1 + *(void *)(v1 + 48);
  }
  else {
    uint64_t v3 = 0LL;
  }
  type metadata accessor for Slice();
  uint64_t v4 = dispatch thunk of Collection.distance(from:to:)();
  if (v3) {
    uint64_t v5 = v3 + v4;
  }
  else {
    uint64_t v5 = 0LL;
  }
  return v2(v3, v5);
}

uint64_t protocol witness for ContiguousBytes.withUnsafeBytes<A>(_:) in conformance <> Slice<A>@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  return Slice<>.withUnsafeBytes<A>(_:)(a1, a2, a4, a3, *(void *)(a5 - 8), a6);
}

uint64_t dispatch thunk of ContiguousBytes.withUnsafeBytes<A>(_:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 8))();
}

uint64_t protocol witness for ContiguousBytes.withUnsafeBytes<A>(_:) in conformance <A> ContiguousArray<A>( uint64_t (*a1)(uint64_t, uint64_t), uint64_t a2)
{
  return protocol witness for ContiguousBytes.withUnsafeBytes<A>(_:) in conformance <A> [A](a1, a2);
}

uint64_t protocol witness for ContiguousBytes.withUnsafeBytes<A>(_:) in conformance <A> UnsafeMutableBufferPointer<A>( uint64_t (*a1)(uint64_t, uint64_t), uint64_t a2)
{
  return protocol witness for ContiguousBytes.withUnsafeBytes<A>(_:) in conformance <A> UnsafeBufferPointer<A>(a1, a2);
}

uint64_t PredicateBindings.subscript.setter(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v7 = type metadata accessor for Optional();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = MEMORY[0x1895F8858](v7);
  id v11 = (char *)&v36 - v10;
  uint64_t v40 = *(void *)(a3 - 8);
  MEMORY[0x1895F8858](v9);
  unint64_t v39 = (char *)&v36 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = *a2;
  uint64_t v14 = *v3;
  uint64_t v15 = *(void *)(*v3 + 16);
  if (v15)
  {
    uint64_t v36 = v3;
    uint64_t v37 = v8;
    uint64_t v38 = v7;
    uint64_t v16 = a1;
    uint64_t v17 = v14 + 32;
    swift_bridgeObjectRetain();
    unint64_t v18 = 0LL;
    while (1)
    {
      outlined init with copy of (id: PredicateExpressions.VariableID, value: Any)(v17, (uint64_t)&v43);
      uint64_t v19 = v43;
      outlined destroy of Any?( (uint64_t)&v43,  &demangling cache variable for type metadata for (id: PredicateExpressions.VariableID, value: Any));
      if (v19 == v13) {
        break;
      }
      ++v18;
      v17 += 40LL;
      if (v15 == v18)
      {
        swift_bridgeObjectRelease();
        unint64_t v18 = 0LL;
        int v20 = 1;
        goto LABEL_8;
      }
    }

    swift_bridgeObjectRelease();
    int v20 = 0;
LABEL_8:
    a1 = v16;
    uint64_t v8 = v37;
    uint64_t v7 = v38;
    uint64_t v3 = v36;
  }

  else
  {
    unint64_t v18 = 0LL;
    int v20 = 1;
  }

  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v11, a1, v7);
  uint64_t v21 = v40;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v40 + 48))(v11, 1LL, a3) == 1)
  {
    uint64_t v22 = *(void (**)(char *, uint64_t))(v8 + 8);
    v22(v11, v7);
    if (v20)
    {
      return ((uint64_t (*)(uint64_t, uint64_t))v22)(a1, v7);
    }

    else
    {
      specialized Array.remove(at:)(v18, (uint64_t)&v43);
      v22((char *)a1, v7);
      return __swift_destroy_boxed_opaque_existential_1((uint64_t)&v43 + 8);
    }
  }

  else
  {
    uint64_t v38 = a1;
    uint64_t v24 = v39;
    (*(void (**)(char *, char *, uint64_t))(v21 + 32))(v39, v11, a3);
    if ((v20 & 1) != 0)
    {
      uint64_t v42 = a3;
      boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v41);
      (*(void (**)(uint64_t *, char *, uint64_t))(v21 + 16))(boxed_opaque_existential_1, v24, a3);
      *(void *)&__int128 v43 = v13;
      outlined init with take of Any(&v41, (__int128 *)((char *)&v43 + 8));
      uint64_t v26 = (void *)*v3;
      uint64_t v27 = v24;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v26 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  v26[2] + 1LL,  1,  v26);
      }
      uint64_t v28 = v38;
      unint64_t v30 = v26[2];
      unint64_t v29 = v26[3];
      if (v30 >= v29 >> 1) {
        uint64_t v26 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (void *)(v29 > 1),  v30 + 1,  1,  v26);
      }
      v26[2] = v30 + 1;
      uint64_t v31 = &v26[5 * v30];
      __int128 v32 = v43;
      __int128 v33 = v44;
      v31[8] = v45;
      *((_OWORD *)v31 + 2) = v32;
      *((_OWORD *)v31 + 3) = v33;
      *uint64_t v3 = (uint64_t)v26;
      (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v28, v7);
      return (*(uint64_t (**)(char *, uint64_t))(v21 + 8))(v27, a3);
    }

    else
    {
      *((void *)&v44 + 1) = a3;
      uint64_t v34 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v43);
      (*(void (**)(uint64_t *, char *, uint64_t))(v21 + 16))(v34, v24, a3);
      uint64_t v35 = (void *)*v3;
      uint64_t result = swift_isUniquelyReferenced_nonNull_native();
      *uint64_t v3 = (uint64_t)v35;
      if ((result & 1) == 0)
      {
        uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v35);
        uint64_t v35 = (void *)result;
        *uint64_t v3 = result;
      }

      if (v18 >= v35[2])
      {
        __break(1u);
      }

      else
      {
        __swift_destroy_boxed_opaque_existential_1((uint64_t)&v35[5 * v18 + 5]);
        outlined init with take of Any(&v43, &v35[5 * v18 + 5]);
        (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v38, v7);
        return (*(uint64_t (**)(char *, uint64_t))(v21 + 8))(v24, a3);
      }
    }
  }

  return result;
}

uint64_t PredicateBindings.init<each A>(_:)@<X0>( uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, void *a5@<X8>)
{
  if (a2)
  {
    uint64_t v34 = a5;
    uint64_t v5 = (uint64_t *)(a3 & 0xFFFFFFFFFFFFFFFELL);
    uint64_t v37 = (_OWORD *)((char *)v43 + 8);
    uint64_t v6 = (void *)MEMORY[0x18961AFE8];
    unint64_t v33 = a3 & 0xFFFFFFFFFFFFFFFELL;
    uint64_t v35 = result;
    uint64_t v36 = a2;
    uint64_t v7 = (unint64_t **)result;
    do
    {
      uint64_t v42 = a2;
      unint64_t v39 = v5;
      uint64_t v8 = *v5;
      uint64_t v9 = *v7;
      type metadata accessor for PredicateExpressions.Variable(255LL, *v5, a3, a4);
      TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
      __int128 v41 = &v33;
      unint64_t v11 = (*(void *)(*(void *)(TupleTypeMetadata2 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
      uint64_t v12 = *(int *)(MEMORY[0x1895F8858](TupleTypeMetadata2) + 48);
      unint64_t v13 = *v9;
      *(unint64_t *)((char *)&v33 - v11) = *v9;
      uint64_t v14 = *(void *)(v8 - 8);
      uint64_t v15 = v6;
      uint64_t v16 = *(uint64_t (**)(void))(v14 + 16);
      uint64_t v40 = (char *)&v33 + v12 - v11;
      uint64_t v17 = v16();
      uint64_t v38 = &v33;
      MEMORY[0x1895F8858](v17);
      uint64_t v18 = *(int *)(TupleTypeMetadata2 + 48);
      uint64_t v19 = (char *)&v33 + v18 - v11;
      ((void (*)(char *, char *, uint64_t))v16)(v19, (char *)v9 + v18, v8);
      uint64_t v6 = v15;
      uint64_t v46 = v8;
      boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v45);
      (*(void (**)(uint64_t *, char *, uint64_t))(v14 + 32))(boxed_opaque_existential_1, v19, v8);
      *(void *)&v43[0] = v13;
      outlined init with take of Any(&v45, v37);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v6 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  v15[2] + 1LL,  1,  v15);
      }
      unint64_t v22 = v6[2];
      unint64_t v21 = v6[3];
      if (v22 >= v21 >> 1) {
        uint64_t v6 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (void *)(v21 > 1),  v22 + 1,  1,  v6);
      }
      v6[2] = v22 + 1;
      uint64_t v23 = &v6[5 * v22];
      __int128 v24 = v43[0];
      __int128 v25 = v43[1];
      v23[8] = v44;
      *((_OWORD *)v23 + 2) = v24;
      *((_OWORD *)v23 + 3) = v25;
      (*(void (**)(char *, uint64_t))(v14 + 8))(v40, v8);
      ++v7;
      uint64_t v5 = v39 + 1;
      a2 = v42 - 1;
    }

    while (v42 != 1);
    *uint64_t v34 = v6;
    unint64_t v26 = v33 - 8;
    uint64_t v27 = v35 - 8;
    uint64_t v28 = v36;
    do
    {
      uint64_t v29 = v28 - 1;
      uint64_t v30 = 8 * v28;
      uint64_t v31 = *(void *)(v27 + v30);
      type metadata accessor for PredicateExpressions.Variable(255LL, *(void *)(v26 + v30), a3, a4);
      uint64_t v32 = swift_getTupleTypeMetadata2();
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v32 - 8) + 8LL))(v31, v32);
      uint64_t v28 = v29;
    }

    while (v29);
  }

  else
  {
    *a5 = MEMORY[0x18961AFE8];
  }

  return result;
}

uint64_t PredicateBindings.subscript.getter@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = *v3;
  uint64_t v7 = *(void *)(*v3 + 16);
  if (v7)
  {
    uint64_t v8 = *a1;
    uint64_t v9 = v6 + 32;
    swift_bridgeObjectRetain();
    while (1)
    {
      outlined init with copy of (id: PredicateExpressions.VariableID, value: Any)(v9, (uint64_t)&v12);
      if ((void)v12 == v8) {
        break;
      }
      outlined destroy of Any?( (uint64_t)&v12,  &demangling cache variable for type metadata for (id: PredicateExpressions.VariableID, value: Any));
      v9 += 40LL;
      if (!--v7) {
        goto LABEL_7;
      }
    }

    __int128 v15 = v12;
    __int128 v16 = v13;
    uint64_t v17 = v14;
    swift_bridgeObjectRelease();
    if (v17)
    {
      outlined init with take of Any((__int128 *)((char *)&v15 + 8), &v12);
      goto LABEL_9;
    }
  }

  else
  {
    swift_bridgeObjectRetain();
LABEL_7:
    uint64_t v17 = 0LL;
    __int128 v15 = 0u;
    __int128 v16 = 0u;
    swift_bridgeObjectRelease();
  }

  outlined destroy of Any?( (uint64_t)&v15,  &demangling cache variable for type metadata for (id: PredicateExpressions.VariableID, value: Any)?);
  __int128 v12 = 0u;
  __int128 v13 = 0u;
LABEL_9:
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  int v10 = swift_dynamicCast();
  return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(a2 - 8) + 56LL))( a3,  v10 ^ 1u,  1LL,  a2);
}

uint64_t key path setter for PredicateBindings.subscript<A>(_:) : <A>PredicateBindingsA( uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v6 = *(uint64_t *)((char *)a3 + a4 - 8);
  uint64_t v7 = type metadata accessor for Optional();
  MEMORY[0x1895F8858](v7);
  uint64_t v9 = (char *)&v13 - v8;
  uint64_t v10 = *a3;
  (*(void (**)(char *, uint64_t))(v11 + 16))((char *)&v13 - v8, a1);
  uint64_t v14 = v10;
  return PredicateBindings.subscript.setter((uint64_t)v9, &v14, v6);
}

void (*PredicateBindings.subscript.modify( void *a1, uint64_t *a2, uint64_t a3))(uint64_t **a1, char a2)
{
  uint64_t v7 = malloc(0x38uLL);
  *a1 = v7;
  *uint64_t v7 = a3;
  v7[1] = v3;
  uint64_t v8 = type metadata accessor for Optional();
  void v7[2] = v8;
  uint64_t v9 = *(void *)(v8 - 8);
  v7[3] = v9;
  size_t v10 = *(void *)(v9 + 64);
  void v7[4] = malloc(v10);
  uint64_t v11 = malloc(v10);
  uint64_t v12 = *a2;
  v7[5] = v11;
  v7[6] = v12;
  uint64_t v13 = *v3;
  v15[0] = v12;
  v15[1] = v13;
  PredicateBindings.subscript.getter(v15, a3, (uint64_t)v11);
  return PredicateBindings.subscript.modify;
}

void PredicateBindings.subscript.modify(uint64_t **a1, char a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = (void *)(*a1)[5];
  uint64_t v4 = (*a1)[6];
  uint64_t v5 = (void *)(*a1)[4];
  if ((a2 & 1) != 0)
  {
    uint64_t v6 = v2[2];
    uint64_t v7 = v2[3];
    uint64_t v8 = *v2;
    (*(void (**)(uint64_t, void *, uint64_t))(v7 + 16))((*a1)[4], v3, v6);
    uint64_t v10 = v4;
    PredicateBindings.subscript.setter((uint64_t)v5, &v10, v8);
    (*(void (**)(void *, uint64_t))(v7 + 8))(v3, v6);
  }

  else
  {
    uint64_t v9 = *v2;
    uint64_t v10 = (*a1)[6];
    PredicateBindings.subscript.setter((uint64_t)v3, &v10, v9);
  }

  free(v3);
  free(v5);
  free(v2);
}

uint64_t PredicateBindings.binding<A>(_:to:)@<X0>( uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  uint64_t v9 = type metadata accessor for Optional();
  MEMORY[0x1895F8858](v9);
  uint64_t v11 = (char *)&v15 - v10;
  uint64_t v12 = *a1;
  *a4 = *v4;
  uint64_t v13 = *(void *)(a3 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))((char *)&v15 - v10, a2, a3);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v13 + 56))(v11, 0LL, 1LL, a3);
  uint64_t v16 = v12;
  swift_bridgeObjectRetain();
  return PredicateBindings.subscript.setter((uint64_t)v11, &v16, a3);
}

uint64_t sub_183087F4C@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4 = *(uint64_t *)((char *)a2 + a3 - 8);
  uint64_t v5 = *a1;
  v7[0] = *a2;
  v7[1] = v5;
  return PredicateBindings.subscript.getter(v7, v4, a4);
}

uint64_t sub_183087F94()
{
  return 8LL;
}

void *sub_183087FA0(void *result, void *a2)
{
  *a2 = *result;
  return result;
}

ValueMetadata *type metadata accessor for PredicateBindings()
{
  return &type metadata for PredicateBindings;
}

uint64_t thunk for @escaping @callee_guaranteed (@unowned Bool) -> ()(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void (**)(uint64_t))(a1 + 32);
  swift_retain();
  v3(a2);
  return swift_release();
}

uint64_t setupThermalStateNotificationAndFetchState #1 @Sendable () in _NSSwiftProcessInfo.thermalState.getter( uint64_t a1)
{
  uint64_t v9 = *MEMORY[0x1895F89C0];
  int out_token = 0;
  uint64_t v2 = (const char *)_platform_shims_kOSThermalNotificationPressureLevelName();
  uint64_t v3 = (dispatch_queue_s *)__NSDispatchQueueGetGenericMatchingMain();
  uint64_t v4 = swift_allocObject();
  *(void *)(v4 + 16) = a1;
  void v7[4] = (uint64_t)partial apply for closure #1 in setupThermalStateNotificationAndFetchState #1 @Sendable () in _NSSwiftProcessInfo.thermalState.getter;
  v7[5] = v4;
  v7[0] = MEMORY[0x1895F87A8];
  v7[1] = 1107296256LL;
  uint64_t v7[2] = (uint64_t)thunk for @escaping @callee_guaranteed (@unowned Bool) -> ();
  v7[3] = (uint64_t)&block_descriptor_6_0;
  uint64_t v5 = _Block_copy(v7);
  swift_release();
  LODWORD(v2) = notify_register_dispatch(v2, &out_token, v3, v5);
  _Block_release(v5);

  if ((_DWORD)v2) {
    return 0LL;
  }
  v7[0] = 0LL;
  if (notify_get_state(out_token, v7)) {
    return 0LL;
  }
  else {
    return v7[0];
  }
}

uint64_t closure #1 in setupThermalStateNotificationAndFetchState #1 @Sendable () in _NSSwiftProcessInfo.thermalState.getter( int a1)
{
  v6[1] = *MEMORY[0x1895F89C0];
  v6[0] = 0LL;
  uint64_t result = notify_get_state(a1, v6);
  if (!(_DWORD)result)
  {
    uint64_t v3 = specialized static _NSSwiftProcessInfo._mapOSThermalToThermalState(_:)(v6[0]);
    if (one-time initialization token for _globalState != -1) {
      swift_once();
    }
    uint64_t v4 = static _NSSwiftProcessInfo._globalState;
    uint64_t v5 = (os_unfair_lock_s *)(static _NSSwiftProcessInfo._globalState + 44);
    swift_retain();
    os_unfair_lock_lock(v5);
    *(void *)(v4 + 16) = v3;
    *(_BYTE *)(v4 + 24) = 0;
    *(_DWORD *)(v4 + 28) = a1;
    *(_BYTE *)(v4 + 32) = 0;
    os_unfair_lock_unlock(v5);
    return swift_release();
  }

  return result;
}

uint64_t closure #1 in _NSSwiftProcessInfo.thermalState.getter@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  if (*(_BYTE *)(a1 + 8) == 1)
  {
    uint64_t v5 = setupThermalStateNotificationAndFetchState #1 @Sendable () in _NSSwiftProcessInfo.thermalState.getter(a2);
    if ((v6 & 1) != 0)
    {
      uint64_t result = 0LL;
    }

    else
    {
      uint64_t result = specialized static _NSSwiftProcessInfo._mapOSThermalToThermalState(_:)(v5);
      *(void *)a1 = result;
      *(_BYTE *)(a1 + 8) = 0;
    }
  }

  else
  {
    uint64_t result = *(void *)a1;
  }

  *a3 = result;
  return result;
}

uint64_t closure #1 in static _NSSwiftProcessInfo.cancelThermalStateNotifyNotification()(uint64_t result)
{
  if ((*(_BYTE *)(result + 16) & 1) == 0)
  {
    uint64_t v1 = result;
    uint64_t result = notify_cancel(*(_DWORD *)(result + 12));
    *(_DWORD *)(v1 + 12) = 0;
    *(_BYTE *)(v1 + 16) = 1;
  }

  return result;
}

uint64_t static _NSSwiftProcessInfo.updateThermalState(_:)(unint64_t a1)
{
  if (one-time initialization token for _globalState != -1) {
    swift_once();
  }
  uint64_t v2 = static _NSSwiftProcessInfo._globalState + 16;
  uint64_t v3 = (os_unfair_lock_s *)(static _NSSwiftProcessInfo._globalState + 44);
  swift_retain();
  os_unfair_lock_lock(v3);
  closure #1 in static _NSSwiftProcessInfo.updateThermalState(_:)(v2, a1);
  os_unfair_lock_unlock(v3);
  return swift_release();
}

uint64_t closure #1 in static _NSSwiftProcessInfo.updateThermalState(_:)(uint64_t result, unint64_t a2)
{
  uint64_t v2 = HIDWORD(a2);
  if (HIDWORD(a2))
  {
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }

  else
  {
    switch((int)a2)
    {
      case 10:
        uint64_t v2 = 1LL;
        break;
      case 20:
        uint64_t v2 = 2LL;
        break;
      case 30:
      case 40:
      case 50:
        uint64_t v2 = 3LL;
        break;
      default:
        break;
    }

    *(void *)uint64_t result = v2;
    *(_BYTE *)(result + 8) = 0;
  }

  return result;
}

uint64_t closure #1 in static _NSSwiftProcessInfo.cancelPowerStateNotifyNotification()(uint64_t result)
{
  if ((*(_BYTE *)(result + 24) & 1) == 0)
  {
    uint64_t v1 = result;
    uint64_t result = notify_cancel(*(_DWORD *)(result + 20));
    *(_DWORD *)(v1 + 20) = 0;
    *(_BYTE *)(v1 + 24) = 1;
  }

  return result;
}

uint64_t destroy for _NSSwiftProcessInfo.State(uint64_t result)
{
  if (*(void *)(result + 32)) {
    return swift_release();
  }
  return result;
}

uint64_t initializeWithCopy for _NSSwiftProcessInfo.State(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  uint64_t v4 = *(void *)(a2 + 32);
  if (v4)
  {
    uint64_t v5 = *(void *)(a2 + 40);
    *(void *)(a1 + 32) = v4;
    *(void *)(a1 + 40) = v5;
    swift_retain();
  }

  else
  {
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  }

  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  return a1;
}

uint64_t assignWithCopy for _NSSwiftProcessInfo.State(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  uint64_t v4 = (_OWORD *)(a1 + 32);
  char v6 = (_OWORD *)(a2 + 32);
  uint64_t v5 = *(void *)(a2 + 32);
  if (!*(void *)(a1 + 32))
  {
    if (v5)
    {
      uint64_t v8 = *(void *)(a2 + 40);
      *(void *)(a1 + 32) = v5;
      *(void *)(a1 + 40) = v8;
      swift_retain();
      goto LABEL_8;
    }

uint64_t assignWithTake for _NSSwiftProcessInfo.State(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  uint64_t v4 = (_OWORD *)(a1 + 32);
  char v6 = (_OWORD *)(a2 + 32);
  uint64_t v5 = *(void *)(a2 + 32);
  if (!*(void *)(a1 + 32))
  {
    if (v5)
    {
      uint64_t v8 = *(void *)(a2 + 40);
      *(void *)(a1 + 32) = v5;
      *(void *)(a1 + 40) = v8;
      goto LABEL_8;
    }

uint64_t getEnumTagSinglePayload for _NSSwiftProcessInfo.State(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 57)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  unint64_t v3 = *(void *)(a1 + 32);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(__swift_mutable_project_boxed_opaque_existential_1((uint64_t)v2, v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for _NSSwiftProcessInfo.State( uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 56) = 0;
    *(void *)uint64_t result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(_BYTE *)(result + 57) = 1;
    }
  }

  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(_BYTE *)(result + 57) = 0;
    }
    if (a2) {
      *(void *)(result + 32) = a2;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for _NSSwiftProcessInfo.State()
{
  return &type metadata for _NSSwiftProcessInfo.State;
}

uint64_t partial apply for closure #1 in _NSSwiftProcessInfo._setShouldRelaunchDue(toAutomaticTerminationStateChangedHandler:)( uint64_t a1)
{
  uint64_t v3 = *(void *)(v1 + 16);
  if (v3) {
    uint64_t v4 = *(void *)(v1 + 24);
  }
  else {
    uint64_t v4 = 0LL;
  }
  uint64_t v5 = *(void *)(a1 + 32);
  outlined copy of (@escaping @callee_guaranteed (@in_guaranteed URL, @guaranteed Error) -> (@unowned Bool))?(v3);
  uint64_t result = outlined consume of (@escaping @callee_guaranteed (@in_guaranteed URL, @guaranteed Error) -> (@unowned Bool))?(v5);
  *(void *)(a1 + 32) = v3;
  *(void *)(a1 + 40) = v4;
  return result;
}

uint64_t sub_183088EE0()
{
  return swift_deallocObject();
}

uint64_t partial apply for thunk for @escaping @callee_unowned @convention(block) @Sendable () -> ()()
{
  return (*(uint64_t (**)(void))(*(void *)(v0 + 16) + 16LL))();
}

uint64_t partial apply for closure #1 in static _NSSwiftProcessInfo.updatePowerState(_:)(uint64_t result)
{
  *(_BYTE *)(result + 17) = *(void *)(v1 + 16) != 0LL;
  return result;
}

uint64_t partial apply for closure #1 in _NSSwiftProcessInfo.isLowPowerModeEnabled.getter@<X0>( uint64_t result@<X0>, char *a2@<X8>)
{
  int v3 = *(unsigned __int8 *)(result + 17);
  if (v3 == 2)
  {
    uint64_t v4 = result;
    uint64_t result = specialized setupPowerStateNotificationAndFetchState #1 @Sendable () in _NSSwiftProcessInfo.isLowPowerModeEnabled.getter();
    if ((v5 & 1) != 0)
    {
      char v6 = 0;
    }

    else if (result)
    {
      char v6 = 1;
      *(_BYTE *)(v4 + 17) = 1;
    }

    else
    {
      char v6 = 0;
      *(_BYTE *)(v4 + 17) = 0;
    }
  }

  else
  {
    char v6 = v3 & 1;
  }

  *a2 = v6;
  return result;
}

uint64_t specialized closure #1 in setupPowerStateNotificationAndFetchState #1 @Sendable () in _NSSwiftProcessInfo.isLowPowerModeEnabled.getter( int a1)
{
  v7[1] = *MEMORY[0x1895F89C0];
  v7[0] = 0LL;
  uint64_t result = notify_get_state(a1, v7);
  if (!(_DWORD)result)
  {
    uint64_t v3 = v7[0];
    if (one-time initialization token for _globalState != -1) {
      swift_once();
    }
    BOOL v4 = v3 != 0;
    uint64_t v5 = static _NSSwiftProcessInfo._globalState;
    char v6 = (os_unfair_lock_s *)(static _NSSwiftProcessInfo._globalState + 44);
    swift_retain();
    os_unfair_lock_lock(v6);
    *(_DWORD *)(v5 + 36) = a1;
    *(_BYTE *)(v5 + 40) = 0;
    *(_BYTE *)(v5 + 33) = v4;
    os_unfair_lock_unlock(v6);
    return swift_release();
  }

  return result;
}

void specialized _NSSwiftProcessInfo.performActivity(options:reason:block:)( uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5)
{
  char v6 = a4;
  if (!a3)
  {
    uint64_t v8 = 0LL;
    if (!a4) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }

  uint64_t v8 = (void *)String._bridgeToObjectiveCImpl()();
  if (v6)
  {
LABEL_3:
    void v9[4] = v6;
    v9[5] = a5;
    v9[0] = MEMORY[0x1895F87A8];
    v9[1] = 1107296256LL;
    __int128 v9[2] = thunk for @escaping @callee_guaranteed @Sendable () -> ();
    v9[3] = &block_descriptor_18;
    char v6 = _Block_copy(v9);
    swift_retain();
    swift_release();
  }

uint64_t specialized static _NSSwiftProcessInfo._mapOSThermalToThermalState(_:)(unint64_t a1)
{
  if (HIDWORD(a1))
  {
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }

  else
  {
    int v1 = a1;
    uint64_t result = 0LL;
    switch(v1)
    {
      case 10:
        uint64_t result = 1LL;
        break;
      case 20:
        uint64_t result = 2LL;
        break;
      case 30:
      case 40:
      case 50:
        uint64_t result = 3LL;
        break;
      default:
        return result;
    }
  }

  return result;
}

uint64_t specialized setupPowerStateNotificationAndFetchState #1 @Sendable () in _NSSwiftProcessInfo.isLowPowerModeEnabled.getter()
{
  uint64_t v6 = *MEMORY[0x1895F89C0];
  int out_token = 0;
  uint64_t v0 = (dispatch_queue_s *)__NSDispatchQueueGetGenericMatchingMain();
  v4[4] = (uint64_t)specialized closure #1 in setupPowerStateNotificationAndFetchState #1 @Sendable () in _NSSwiftProcessInfo.isLowPowerModeEnabled.getter;
  v4[5] = 0LL;
  v4[0] = MEMORY[0x1895F87A8];
  v4[1] = 1107296256LL;
  void v4[2] = (uint64_t)thunk for @escaping @callee_guaranteed (@unowned Bool) -> ();
  v4[3] = (uint64_t)&block_descriptor_5;
  int v1 = _Block_copy(v4);
  swift_release();
  uint32_t v2 = notify_register_dispatch("com.apple.system.lowpowermode", &out_token, v0, v1);
  _Block_release(v1);

  if (v2) {
    return 0LL;
  }
  v4[0] = 0LL;
  if (notify_get_state(out_token, v4)) {
    return 0LL;
  }
  else {
    return v4[0];
  }
}

id __NSDispatchQueueGetGenericMatchingMain()
{
  qos_class_t v0 = qos_class_main();
  dispatch_get_global_queue(v0, 2uLL);
  return (id)objc_claimAutoreleasedReturnValue();
}

uint64_t block_copy_helper_5(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_5()
{
  return swift_release();
}

uint64_t partial apply for closure #1 in _NSSwiftProcessInfo.thermalState.getter@<X0>( uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  return closure #1 in _NSSwiftProcessInfo.thermalState.getter(a1, *(void *)(v2 + 16), a2);
}

uint64_t sub_183089344()
{
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in setupThermalStateNotificationAndFetchState #1 @Sendable () in _NSSwiftProcessInfo.thermalState.getter( int a1)
{
  return closure #1 in setupThermalStateNotificationAndFetchState #1 @Sendable () in _NSSwiftProcessInfo.thermalState.getter(a1);
}

uint64_t partial apply for thunk for @escaping @callee_unowned @convention(block) (@unowned ObjCBool) -> ()( char a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(v1 + 16) + 16LL))(*(void *)(v1 + 16), a1 & 1);
}

uint64_t partial apply for thunk for @escaping @callee_unowned @convention(block) () -> ()()
{
  return thunk for @escaping @callee_unowned @convention(block) () -> ()(*(void *)(v0 + 16));
}

uint64_t getEnumTagSinglePayload for _NSSwiftProcessInfo.GlobalState(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 >= 0xFE && *(_BYTE *)(a1 + 25)) {
    return (*(_DWORD *)a1 + 254);
  }
  else {
    int v3 = *(unsigned __int8 *)(a1 + 17);
  }
  int v4 = v3 - 3;
  else {
    int v5 = v4;
  }
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for _NSSwiftProcessInfo.GlobalState( uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(void *)(result + 8) = 0LL;
    *(void *)(result + 16) = 0LL;
    *(_BYTE *)(result + 24) = 0;
    *(void *)uint64_t result = a2 - 254;
    if (a3 >= 0xFE) {
      *(_BYTE *)(result + 25) = 1;
    }
  }

  else
  {
    if (a3 >= 0xFE) {
      *(_BYTE *)(result + 25) = 0;
    }
    if (a2) {
      *(_BYTE *)(result + 17) = a2 + 2;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for _NSSwiftProcessInfo.GlobalState()
{
  return &type metadata for _NSSwiftProcessInfo.GlobalState;
}

uint64_t storeEnumTagSinglePayload for _NSSwiftProcessInfo.PowerState( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFE) {
    return ((uint64_t (*)(void))((char *)&loc_183089470 + 4 * byte_18379DDBB[v4]))();
  }
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1830894A4 + 4 * byte_18379DDB6[v4]))();
}

uint64_t sub_1830894A4(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1830894AC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x1830894B4LL);
  }
  return result;
}

uint64_t sub_1830894C0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x1830894C8LL);
  }
  *(_BYTE *)uint64_t result = a2 + 1;
  return result;
}

uint64_t sub_1830894CC(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1830894D4(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for _NSSwiftProcessInfo.PowerState()
{
  return &type metadata for _NSSwiftProcessInfo.PowerState;
}

unint64_t lazy protocol witness table accessor for type _NSSwiftProcessInfo.PowerState and conformance _NSSwiftProcessInfo.PowerState()
{
  unint64_t result = lazy protocol witness table cache variable for type _NSSwiftProcessInfo.PowerState and conformance _NSSwiftProcessInfo.PowerState;
  if (!lazy protocol witness table cache variable for type _NSSwiftProcessInfo.PowerState and conformance _NSSwiftProcessInfo.PowerState)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for _NSSwiftProcessInfo.PowerState,  &type metadata for _NSSwiftProcessInfo.PowerState);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type _NSSwiftProcessInfo.PowerState and conformance _NSSwiftProcessInfo.PowerState);
  }

  return result;
}

uint64_t _CalendarAutoupdating.identifier.getter()
{
  if (one-time initialization token for cache != -1) {
    swift_once();
  }
  uint64_t v0 = (os_unfair_lock_s *)(static CalendarCache.cache + 60);
  swift_retain_n();
  os_unfair_lock_lock(v0);
  closure #1 in CalendarCache.current.getter(v4);
  os_unfair_lock_unlock(v0);
  swift_release_n();
  uint64_t v1 = v4[1];
  uint64_t ObjectType = swift_getObjectType();
  (*(void (**)(uint64_t, uint64_t))(v1 + 24))(ObjectType, v1);
  return swift_unknownObjectRelease();
}

uint64_t _CalendarAutoupdating.timeZone.getter()
{
  if (one-time initialization token for cache != -1) {
    swift_once();
  }
  uint64_t v0 = (os_unfair_lock_s *)(static CalendarCache.cache + 60);
  swift_retain_n();
  os_unfair_lock_lock(v0);
  closure #1 in CalendarCache.current.getter(v4);
  os_unfair_lock_unlock(v0);
  swift_release_n();
  uint64_t v1 = v4[1];
  uint64_t ObjectType = swift_getObjectType();
  (*(void (**)(uint64_t, uint64_t))(v1 + 48))(ObjectType, v1);
  return swift_unknownObjectRelease();
}

Swift::Int_optional __swiftcall _CalendarAutoupdating.ordinality(of:in:for:)( Foundation::Calendar::Component of, Foundation::Calendar::Component in, Foundation::Date a3)
{
  Swift::Int v4 = specialized _CalendarAutoupdating.ordinality(of:in:for:)((char *)of, (char *)in, v3);
  Swift::Bool v6 = v5 & 1;
  result.Swift::UInt8 value = v4;
  result.is_nil = v6;
  return result;
}

Foundation::DateInterval_optional __swiftcall _CalendarAutoupdating.dateInterval(of:for:)( Foundation::Calendar::Component of, Foundation::Date a2)
{
  char v3 = *(_BYTE *)of;
  uint64_t v4 = *v2;
  if (one-time initialization token for cache != -1) {
    swift_once();
  }
  char v5 = (os_unfair_lock_s *)(static CalendarCache.cache + 60);
  swift_retain_n();
  os_unfair_lock_lock(v5);
  closure #1 in CalendarCache.current.getter(v12);
  os_unfair_lock_unlock(v5);
  swift_release_n();
  uint64_t v6 = v12[1];
  uint64_t ObjectType = swift_getObjectType();
  v11[0] = v3;
  v12[0] = v4;
  (*(void (**)(_BYTE *, uint64_t *, uint64_t, uint64_t))(v6 + 160))(v11, v12, ObjectType, v6);
  char v8 = swift_unknownObjectRelease();
  result.value.duration = v10;
  result.value.start._time = v9;
  result.is_nil = v8;
  return result;
}

uint64_t _CalendarAutoupdating.date(from:)(const void *a1)
{
  if (one-time initialization token for cache != -1) {
    swift_once();
  }
  uint64_t v2 = (os_unfair_lock_s *)(static CalendarCache.cache + 60);
  swift_retain_n();
  os_unfair_lock_lock(v2);
  closure #1 in CalendarCache.current.getter(__dst);
  os_unfair_lock_unlock(v2);
  swift_release_n();
  uint64_t v3 = __dst[1];
  uint64_t ObjectType = swift_getObjectType();
  memcpy(__dst, a1, 0x11AuLL);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(v3 + 176))(__dst, ObjectType, v3);
  return swift_unknownObjectRelease();
}

uint64_t _CalendarAutoupdating.dateComponents(_:from:in:)(uint64_t *a1, uint64_t *a2, __int128 *a3)
{
  uint64_t v3 = *a1;
  uint64_t v4 = *a2;
  __int128 v9 = *a3;
  if (one-time initialization token for cache != -1) {
    swift_once();
  }
  char v5 = (os_unfair_lock_s *)(static CalendarCache.cache + 60);
  swift_retain_n();
  os_unfair_lock_lock(v5);
  closure #1 in CalendarCache.current.getter((uint64_t *)&v12);
  os_unfair_lock_unlock(v5);
  swift_release_n();
  uint64_t v6 = *((void *)&v12 + 1);
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v11 = v3;
  uint64_t v10 = v4;
  __int128 v12 = v9;
  (*(void (**)(uint64_t *, uint64_t *, __int128 *, uint64_t, uint64_t))(v6 + 184))( &v11,  &v10,  &v12,  ObjectType,  v6);
  return swift_unknownObjectRelease();
}

uint64_t _CalendarAutoupdating.dateComponents(_:from:)(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = *a2;
  if (one-time initialization token for cache != -1) {
    swift_once();
  }
  uint64_t v4 = (os_unfair_lock_s *)(static CalendarCache.cache + 60);
  swift_retain_n();
  os_unfair_lock_lock(v4);
  closure #1 in CalendarCache.current.getter(v9);
  os_unfair_lock_unlock(v4);
  swift_release_n();
  uint64_t v5 = v9[1];
  uint64_t ObjectType = swift_getObjectType();
  v9[0] = v2;
  uint64_t v8 = v3;
  (*(void (**)(uint64_t *, uint64_t *, uint64_t, uint64_t))(v5 + 192))(v9, &v8, ObjectType, v5);
  return swift_unknownObjectRelease();
}

uint64_t _CalendarAutoupdating.date(byAdding:to:wrappingComponents:)(const void *a1, uint64_t *a2, char a3)
{
  uint64_t v5 = *a2;
  if (one-time initialization token for cache != -1) {
    swift_once();
  }
  uint64_t v6 = (os_unfair_lock_s *)(static CalendarCache.cache + 60);
  swift_retain_n();
  os_unfair_lock_lock(v6);
  closure #1 in CalendarCache.current.getter(__dst);
  os_unfair_lock_unlock(v6);
  swift_release_n();
  uint64_t v7 = __dst[1];
  uint64_t ObjectType = swift_getObjectType();
  memcpy(__dst, a1, 0x11AuLL);
  uint64_t v10 = v5;
  (*(void (**)(uint64_t *, uint64_t *, void, uint64_t, uint64_t))(v7 + 200))( __dst,  &v10,  a3 & 1,  ObjectType,  v7);
  return swift_unknownObjectRelease();
}

uint64_t _CalendarAutoupdating.dateComponents(_:from:to:)(uint64_t *a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3 = *a1;
  uint64_t v4 = *a2;
  uint64_t v5 = *a3;
  if (one-time initialization token for cache != -1) {
    swift_once();
  }
  uint64_t v6 = (os_unfair_lock_s *)(static CalendarCache.cache + 60);
  swift_retain_n();
  os_unfair_lock_lock(v6);
  closure #1 in CalendarCache.current.getter(v12);
  os_unfair_lock_unlock(v6);
  swift_release_n();
  uint64_t v7 = v12[1];
  uint64_t ObjectType = swift_getObjectType();
  v12[0] = v3;
  uint64_t v10 = v5;
  uint64_t v11 = v4;
  (*(void (**)(uint64_t *, uint64_t *, uint64_t *, uint64_t, uint64_t))(v7 + 208))( v12,  &v11,  &v10,  ObjectType,  v7);
  return swift_unknownObjectRelease();
}

uint64_t _CalendarAutoupdating.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for _CalendarAutoupdating()
{
  return objc_opt_self();
}

void protocol witness for _CalendarProtocol.init(identifier:timeZone:locale:firstWeekday:minimumDaysInFirstWeek:gregorianStartDate:) in conformance _CalendarAutoupdating()
{
}

uint64_t protocol witness for _CalendarProtocol.identifier.getter in conformance _CalendarAutoupdating()
{
  return _CalendarAutoupdating.identifier.getter();
}

uint64_t protocol witness for _CalendarProtocol.locale.getter in conformance _CalendarAutoupdating()
{
  if (one-time initialization token for cache != -1) {
    swift_once();
  }
  uint64_t v0 = (os_unfair_lock_s *)(static CalendarCache.cache + 60);
  swift_retain_n();
  os_unfair_lock_lock(v0);
  closure #1 in CalendarCache.current.getter(v4);
  os_unfair_lock_unlock(v0);
  swift_release_n();
  uint64_t v1 = v4[1];
  uint64_t ObjectType = swift_getObjectType();
  (*(void (**)(uint64_t, uint64_t))(v1 + 32))(ObjectType, v1);
  return swift_unknownObjectRelease();
}

uint64_t protocol witness for _CalendarProtocol.timeZone.getter in conformance _CalendarAutoupdating()
{
  return _CalendarAutoupdating.timeZone.getter();
}

uint64_t protocol witness for _CalendarProtocol.copy(changingLocale:changingTimeZone:changingFirstWeekday:changingMinimumDaysInFirstWeek:) in conformance _CalendarAutoupdating( uint64_t *a1, uint64_t *a2, uint64_t a3, char a4, uint64_t a5, char a6)
{
  return specialized _CalendarAutoupdating.copy(changingLocale:changingTimeZone:changingFirstWeekday:changingMinimumDaysInFirstWeek:)( a1,  a2,  a3,  a4 & 1,  a5,  a6 & 1);
}

void protocol witness for _CalendarProtocol.hash(into:) in conformance _CalendarAutoupdating()
{
}

uint64_t protocol witness for _CalendarProtocol.minimumRange(of:) in conformance _CalendarAutoupdating( char *a1)
{
  return specialized _CalendarAutoupdating.minimumRange(of:)(a1);
}

uint64_t protocol witness for _CalendarProtocol.maximumRange(of:) in conformance _CalendarAutoupdating( char *a1)
{
  return specialized _CalendarAutoupdating.maximumRange(of:)(a1);
}

uint64_t protocol witness for _CalendarProtocol.range(of:in:for:) in conformance _CalendarAutoupdating( char *a1, char *a2, uint64_t *a3)
{
  return specialized _CalendarAutoupdating.range(of:in:for:)(a1, a2, a3);
}

unint64_t protocol witness for _CalendarProtocol.ordinality(of:in:for:) in conformance _CalendarAutoupdating( Foundation::Calendar::Component a1, Foundation::Calendar::Component a2, double a3)
{
  return (unint64_t)_CalendarAutoupdating.ordinality(of:in:for:)(a1, a2, *(Foundation::Date *)&a3);
}

double protocol witness for _CalendarProtocol.dateInterval(of:for:) in conformance _CalendarAutoupdating( Foundation::Calendar::Component a1, double a2)
{
  *(void *)&double result = (unint64_t)_CalendarAutoupdating.dateInterval(of:for:)(a1, *(Foundation::Date *)&a2);
  return result;
}

uint64_t protocol witness for _CalendarProtocol.isDateInWeekend(_:) in conformance _CalendarAutoupdating( uint64_t *a1)
{
  uint64_t v1 = *a1;
  if (one-time initialization token for cache != -1) {
    swift_once();
  }
  uint64_t v2 = (os_unfair_lock_s *)(static CalendarCache.cache + 60);
  swift_retain_n();
  os_unfair_lock_lock(v2);
  closure #1 in CalendarCache.current.getter(v6);
  os_unfair_lock_unlock(v2);
  swift_release_n();
  uint64_t v3 = v6[1];
  uint64_t ObjectType = swift_getObjectType();
  v6[0] = v1;
  LOBYTE(__swift_mutable_project_boxed_opaque_existential_1((uint64_t)v2, v3) = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(v3 + 168))(v6, ObjectType, v3);
  swift_unknownObjectRelease();
  return v3 & 1;
}

uint64_t protocol witness for _CalendarProtocol.date(from:) in conformance _CalendarAutoupdating( const void *a1)
{
  return _CalendarAutoupdating.date(from:)(a1);
}

uint64_t protocol witness for _CalendarProtocol.dateComponents(_:from:in:) in conformance _CalendarAutoupdating( uint64_t *a1, uint64_t *a2, __int128 *a3)
{
  return _CalendarAutoupdating.dateComponents(_:from:in:)(a1, a2, a3);
}

uint64_t protocol witness for _CalendarProtocol.dateComponents(_:from:) in conformance _CalendarAutoupdating( uint64_t *a1, uint64_t *a2)
{
  return _CalendarAutoupdating.dateComponents(_:from:)(a1, a2);
}

uint64_t protocol witness for _CalendarProtocol.date(byAdding:to:wrappingComponents:) in conformance _CalendarAutoupdating( const void *a1, uint64_t *a2, char a3)
{
  return _CalendarAutoupdating.date(byAdding:to:wrappingComponents:)(a1, a2, a3);
}

uint64_t protocol witness for _CalendarProtocol.dateComponents(_:from:to:) in conformance _CalendarAutoupdating( uint64_t *a1, uint64_t *a2, uint64_t *a3)
{
  return _CalendarAutoupdating.dateComponents(_:from:to:)(a1, a2, a3);
}

unint64_t instantiation function for generic protocol witness table for _CalendarAutoupdating( uint64_t a1)
{
  unint64_t result = lazy protocol witness table accessor for type _CalendarAutoupdating and conformance _CalendarAutoupdating();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t lazy protocol witness table accessor for type _CalendarAutoupdating and conformance _CalendarAutoupdating()
{
  unint64_t result = lazy protocol witness table cache variable for type _CalendarAutoupdating and conformance _CalendarAutoupdating;
  if (!lazy protocol witness table cache variable for type _CalendarAutoupdating and conformance _CalendarAutoupdating)
  {
    uint64_t v1 = type metadata accessor for _CalendarAutoupdating();
    unint64_t result = MEMORY[0x186E20D4C](&protocol conformance descriptor for _CalendarAutoupdating, v1);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type _CalendarAutoupdating and conformance _CalendarAutoupdating);
  }

  return result;
}

uint64_t specialized _CalendarAutoupdating.firstWeekday.getter()
{
  if (one-time initialization token for cache != -1) {
    swift_once();
  }
  uint64_t v0 = (os_unfair_lock_s *)(static CalendarCache.cache + 60);
  swift_retain_n();
  os_unfair_lock_lock(v0);
  closure #1 in CalendarCache.current.getter(v5);
  os_unfair_lock_unlock(v0);
  swift_release_n();
  uint64_t v1 = v5[1];
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v3 = (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 56))(ObjectType, v1);
  swift_unknownObjectRelease();
  return v3;
}

uint64_t specialized _CalendarAutoupdating.minimumDaysInFirstWeek.getter()
{
  if (one-time initialization token for cache != -1) {
    swift_once();
  }
  uint64_t v0 = (os_unfair_lock_s *)(static CalendarCache.cache + 60);
  swift_retain_n();
  os_unfair_lock_lock(v0);
  closure #1 in CalendarCache.current.getter(v5);
  os_unfair_lock_unlock(v0);
  swift_release_n();
  uint64_t v1 = v5[1];
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v3 = (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 72))(ObjectType, v1);
  swift_unknownObjectRelease();
  return v3;
}

uint64_t specialized _CalendarAutoupdating.maximumRange(of:)(char *a1)
{
  char v1 = *a1;
  if (one-time initialization token for cache != -1) {
    swift_once();
  }
  uint64_t v2 = (os_unfair_lock_s *)(static CalendarCache.cache + 60);
  swift_retain_n();
  os_unfair_lock_lock(v2);
  closure #1 in CalendarCache.current.getter(v7);
  os_unfair_lock_unlock(v2);
  swift_release_n();
  uint64_t v3 = v7[1];
  uint64_t ObjectType = swift_getObjectType();
  LOBYTE(v7[0]) = v1;
  uint64_t v5 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(v3 + 136))(v7, ObjectType, v3);
  swift_unknownObjectRelease();
  return v5;
}

uint64_t specialized _CalendarAutoupdating.minimumRange(of:)(char *a1)
{
  char v1 = *a1;
  if (one-time initialization token for cache != -1) {
    swift_once();
  }
  uint64_t v2 = (os_unfair_lock_s *)(static CalendarCache.cache + 60);
  swift_retain_n();
  os_unfair_lock_lock(v2);
  closure #1 in CalendarCache.current.getter(v7);
  os_unfair_lock_unlock(v2);
  swift_release_n();
  uint64_t v3 = v7[1];
  uint64_t ObjectType = swift_getObjectType();
  LOBYTE(v7[0]) = v1;
  uint64_t v5 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(v3 + 128))(v7, ObjectType, v3);
  swift_unknownObjectRelease();
  return v5;
}

uint64_t specialized _CalendarAutoupdating.copy(changingLocale:changingTimeZone:changingFirstWeekday:changingMinimumDaysInFirstWeek:)( uint64_t *a1, uint64_t *a2, uint64_t a3, char a4, uint64_t a5, char a6)
{
  uint64_t v8 = *a1;
  uint64_t v9 = a1[1];
  uint64_t v10 = *a2;
  uint64_t v11 = a2[1];
  if (one-time initialization token for cache != -1) {
    swift_once();
  }
  __int128 v12 = (os_unfair_lock_s *)(static CalendarCache.cache + 60);
  swift_retain_n();
  os_unfair_lock_lock(v12);
  closure #1 in CalendarCache.current.getter(&v21);
  uint64_t v13 = a4 & 1;
  os_unfair_lock_unlock(v12);
  swift_release_n();
  uint64_t v14 = v22;
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v21 = v8;
  uint64_t v22 = v9;
  v20[0] = v10;
  v20[1] = v11;
  uint64_t v16 = (*(uint64_t (**)(uint64_t *, void *, uint64_t, uint64_t, uint64_t, void, uint64_t, uint64_t))(v14 + 112))( &v21,  v20,  a3,  v13,  a5,  a6 & 1,  ObjectType,  v14);
  swift_unknownObjectRelease();
  return v16;
}

id specialized _CalendarAutoupdating.bridgeToNSCalendar()()
{
  if (one-time initialization token for cache != -1) {
    swift_once();
  }
  uint64_t v0 = static CalendarCache.cache + 16;
  char v1 = (os_unfair_lock_s *)(static CalendarCache.cache + 60);
  swift_retain_n();
  os_unfair_lock_lock(v1);
  closure #1 in CalendarCache.autoupdatingCurrent.getter(v0, (uint64_t *)&v9);
  os_unfair_lock_unlock(v1);
  swift_release_n();
  uint64_t v2 = (objc_class *)type metadata accessor for _NSSwiftCalendar();
  __int128 v7 = v9;
  uint64_t v3 = (char *)objc_allocWithZone(v2);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ManagedBuffer<Calendar, os_unfair_lock_s>);
  uint64_t v4 = swift_allocObject();
  *(_DWORD *)(v4 + 32) = 0;
  *(_OWORD *)(v4 + 16) = v7;
  *(void *)&v3[OBJC_IVAR____NSSwiftCalendar__lock] = v4;
  uint64_t v5 = *MEMORY[0x1896039C8];
  v8.receiver = v3;
  v8.super_class = v2;
  id result = objc_msgSendSuper2(&v8, sel_initWithCheckedCalendarIdentifier_, v5);
  if (!result) {
    __break(1u);
  }
  return result;
}

uint64_t specialized _CalendarAutoupdating.range(of:in:for:)(char *a1, char *a2, uint64_t *a3)
{
  char v3 = *a1;
  char v4 = *a2;
  uint64_t v5 = *a3;
  if (one-time initialization token for cache != -1) {
    swift_once();
  }
  uint64_t v6 = (os_unfair_lock_s *)(static CalendarCache.cache + 60);
  swift_retain_n();
  os_unfair_lock_lock(v6);
  closure #1 in CalendarCache.current.getter(v13);
  os_unfair_lock_unlock(v6);
  swift_release_n();
  uint64_t v7 = v13[1];
  uint64_t ObjectType = swift_getObjectType();
  v12[0] = v3;
  char v11 = v4;
  v13[0] = v5;
  uint64_t v9 = (*(uint64_t (**)(_BYTE *, char *, uint64_t *, uint64_t, uint64_t))(v7 + 144))( v12,  &v11,  v13,  ObjectType,  v7);
  swift_unknownObjectRelease();
  return v9;
}

uint64_t specialized _CalendarAutoupdating.debugDescription.getter()
{
  uint64_t v6 = 0LL;
  unint64_t v7 = 0xE000000000000000LL;
  v0._uint64_t countAndFlagsBits = 0x616470756F747561LL;
  v0._uint64_t object = (void *)0xED000020676E6974LL;
  String.append(_:)(v0);
  if (one-time initialization token for cache != -1) {
    swift_once();
  }
  char v1 = (os_unfair_lock_s *)(static CalendarCache.cache + 60);
  swift_retain_n();
  os_unfair_lock_lock(v1);
  closure #1 in CalendarCache.current.getter(v5);
  os_unfair_lock_unlock(v1);
  swift_release_n();
  uint64_t v2 = v5[1];
  uint64_t ObjectType = swift_getObjectType();
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v2 + 24))(v5, ObjectType, v2);
  swift_unknownObjectRelease();
  _print_unlocked<A, B>(_:_:)();
  return v6;
}

uint64_t specialized _CalendarAutoupdating.ordinality(of:in:for:)(char *a1, char *a2, uint64_t *a3)
{
  char v3 = *a1;
  char v4 = *a2;
  uint64_t v5 = *a3;
  if (one-time initialization token for cache != -1) {
    swift_once();
  }
  uint64_t v6 = (os_unfair_lock_s *)(static CalendarCache.cache + 60);
  swift_retain_n();
  os_unfair_lock_lock(v6);
  closure #1 in CalendarCache.current.getter(v13);
  os_unfair_lock_unlock(v6);
  swift_release_n();
  uint64_t v7 = v13[1];
  uint64_t ObjectType = swift_getObjectType();
  v12[0] = v3;
  char v11 = v4;
  v13[0] = v5;
  uint64_t v9 = (*(uint64_t (**)(_BYTE *, char *, uint64_t *, uint64_t, uint64_t))(v7 + 152))( v12,  &v11,  v13,  ObjectType,  v7);
  swift_unknownObjectRelease();
  return v9;
}

uint64_t NSData.startIndex.getter()
{
  return 0LL;
}

id NSData.endIndex.getter()
{
  return objc_msgSend(v0, sel_length);
}

void NSData.lastRange<A, B>(of:in:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
}

{
  uint64_t v5;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  void v15[8];
  void v15[7] = *MEMORY[0x1895F89C0];
  uint64_t v9 = MEMORY[0x1895F8858](a1);
  MEMORY[0x1895F8858](v9);
  char v11 = (char *)v15 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  (*(void (**)(char *))(v12 + 16))(v11);
  Data.init<A>(_:)((uint64_t)v11, a3, *(void *)(*(void *)(*(void *)(*(void *)(a5 + 8) + 8LL) + 8LL) + 8LL));
  uint64_t v14 = (char *)&loc_18308AAFC + *((int *)qword_18308AD40 + (v13 >> 62));
  v15[0] = v5;
  v15[1] = a2;
  __asm { BR              X10 }

void NSData.firstRange<A, B>(of:in:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
}

id sub_18308AB10()
{
  *(void *)(v6 - 104) = v5;
  *(_WORD *)(v6 - 96) = v4;
  *(_BYTE *)(v6 - 94) = BYTE2(v4);
  *(_BYTE *)(v6 - 93) = BYTE3(v4);
  *(_BYTE *)(v6 - 92) = BYTE4(v4);
  *(_BYTE *)(v6 - 91) = BYTE5(v4);
  id v7 = objc_msgSend(objc_allocWithZone(MEMORY[0x189603F48]), sel_initWithBytes_length_, v6 - 104, BYTE6(v4));
  outlined consume of Data._Representation(v5, v4);
  (*(void (**)(uint64_t, void, uint64_t))(v0 + 16))(v2, *(void *)(v6 - 136), v1);
  *(_OWORD *)(v6 - 128) = xmmword_18379DEB0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Range<Int>);
  lazy protocol witness table accessor for type Range<Int> and conformance <> Range<A>( (unint64_t *)&lazy protocol witness table cache variable for type Range<Int> and conformance <> Range<A>,  MEMORY[0x189618A60]);
  dispatch thunk of RangeExpression.relative<A>(to:)();
  uint64_t v9 = *(void *)(v6 - 104);
  uint64_t v8 = *(void *)(v6 - 96);
  uint64_t v10 = v8 - v9;
  if (__OFSUB__(v8, v9))
  {
    __break(1u);
    goto LABEL_7;
  }

  (*(void (**)(uint64_t, uint64_t))(v0 + 8))(v2, v1);
  id v11 = objc_msgSend(*(id *)(v6 - 144), sel_rangeOfData_options_range_, v7, v3, v9, v10);
  uint64_t v13 = v12;

  if (v11 == (id)0x7FFFFFFFFFFFFFFFLL) {
    return 0LL;
  }
  if (__OFADD__(v11, v13))
  {
LABEL_7:
    __break(1u);
    JUMPOUT(0x18308AD38LL);
  }

  return v11;
}

uint64_t NSData.regions.getter()
{
  uint64_t v8 = MEMORY[0x18961AFE8];
  uint64_t v1 = swift_allocObject();
  *(void *)(v1 + 16) = &v8;
  *(void *)(v1 + 24) = v0;
  uint64_t v2 = swift_allocObject();
  *(void *)(v2 + 16) = partial apply for closure #1 in NSData.regions.getter;
  *(void *)(v2 + 24) = v1;
  aBlock[4] = partial apply for closure #1 in NSRunLoop.schedule(options:_:);
  aBlock[5] = v2;
  aBlock[0] = MEMORY[0x1895F87A8];
  aBlock[1] = 1107296256LL;
  aBlock[2] = thunk for @escaping @callee_guaranteed (@unowned UnsafeRawPointer, @unowned _NSRange, @unowned UnsafeMutablePointer<ObjCBool>) -> ();
  aBlock[3] = &block_descriptor_6;
  uint64_t v3 = _Block_copy(aBlock);
  id v4 = v0;
  swift_retain();
  swift_release();
  objc_msgSend(v4, sel_enumerateByteRangesUsingBlock_, v3);
  _Block_release(v3);
  LOBYTE(v4) = swift_isEscapingClosureAtFileLocation();
  uint64_t result = swift_release();
  if ((v4 & 1) != 0)
  {
    __break(1u);
  }

  else
  {
    uint64_t v6 = v8;
    swift_release();
    return v6;
  }

  return result;
}

uint64_t closure #1 in NSData.regions.getter( unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5, void *a6)
{
  uint64_t v10 = swift_allocObject();
  *(void *)(v10 + 16) = a6;
  if (a3)
  {
    type metadata accessor for __DataStorage();
    swift_allocObject();
    id v11 = a6;
    swift_retain();
    uint64_t v12 = (void *)__DataStorage.init(bytes:length:copy:deallocator:offset:)( a1,  a3,  0,  (void (*)(unint64_t, uint64_t))destructiveProjectEnumData for PredicateCodableError,  v10,  0LL);
    uint64_t v13 = specialized Data._Representation.init(_:count:)(v12, a3);
    unint64_t v15 = v14;
    swift_release();
  }

  else
  {
    id v16 = a6;
    swift_release();
    uint64_t v13 = 0LL;
    unint64_t v15 = 0xC000000000000000LL;
  }

  uint64_t v17 = (void *)*a5;
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  *a5 = (uint64_t)v17;
  if ((result & 1) == 0)
  {
    uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  v17[2] + 1LL,  1,  v17);
    uint64_t v17 = (void *)result;
    *a5 = result;
  }

  unint64_t v20 = v17[2];
  unint64_t v19 = v17[3];
  if (v20 >= v19 >> 1)
  {
    uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (void *)(v19 > 1),  v20 + 1,  1,  v17);
    uint64_t v17 = (void *)result;
  }

  v17[2] = v20 + 1;
  uint64_t v21 = &v17[2 * v20];
  void v21[4] = v13;
  v21[5] = v15;
  *a5 = (uint64_t)v17;
  return result;
}

uint64_t thunk for @callee_guaranteed (@unowned UnsafeRawPointer, @unowned _NSRange, @unowned UnsafeMutablePointer<ObjCBool>) -> ()( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void))
{
  return a5();
}

uint64_t thunk for @escaping @callee_guaranteed (@unowned UnsafeRawPointer, @unowned _NSRange, @unowned UnsafeMutablePointer<ObjCBool>) -> ()( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(a1 + 32))(a2, a3, a4, a5);
}

uint64_t NSData.subscript.getter(uint64_t a1)
{
  unsigned __int8 v11 = 0;
  uint64_t v10 = a1;
  uint64_t v3 = (void *)swift_allocObject();
  _OWORD v3[2] = &v10;
  v3[3] = a1;
  v3[4] = &v11;
  uint64_t v4 = swift_allocObject();
  *(void *)(v4 + 16) = partial apply for closure #1 in NSData.subscript.getter;
  *(void *)(v4 + 24) = v3;
  void v9[4] = closure #1 in NSRunLoop.schedule(options:_:)partial apply;
  v9[5] = v4;
  v9[0] = MEMORY[0x1895F87A8];
  v9[1] = 1107296256LL;
  uint64_t v9[2] = thunk for @escaping @callee_guaranteed (@unowned UnsafeRawPointer, @unowned _NSRange, @unowned UnsafeMutablePointer<ObjCBool>) -> ();
  v9[3] = &block_descriptor_13_0;
  uint64_t v5 = _Block_copy(v9);
  swift_retain();
  swift_release();
  objc_msgSend(v1, sel_enumerateByteRangesUsingBlock_, v5);
  _Block_release(v5);
  char isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
  uint64_t result = swift_release();
  if ((isEscapingClosureAtFileLocation & 1) != 0)
  {
    __break(1u);
  }

  else
  {
    uint64_t v8 = v11;
    swift_release();
    return v8;
  }

  return result;
}

uint64_t closure #1 in NSData.subscript.getter( uint64_t result, uint64_t a2, uint64_t a3, _BYTE *a4, void *a5, uint64_t a6, _BYTE *a7)
{
  uint64_t v7 = *a5 - a2;
  if (__OFSUB__(*a5, a2))
  {
    __break(1u);
    goto LABEL_8;
  }

  *a5 = v7;
  if (a6 < a2) {
    return result;
  }
  if (__OFSUB__(a6, a2))
  {
LABEL_8:
    __break(1u);
    return result;
  }

  if (a6 - a2 < a3)
  {
    *a7 = *(_BYTE *)(result + v7);
    *a4 = 1;
  }

  return result;
}

uint64_t protocol witness for DataProtocol.regions.getter in conformance NSData@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = NSData.regions.getter();
  *a1 = result;
  return result;
}

uint64_t protocol witness for DataProtocol.firstRange<A, B>(of:in:) in conformance NSData@<X0>( uint64_t a1@<X8>)
{
  return protocol witness for DataProtocol.firstRange<A, B>(of:in:) in conformance NSData( a1,  (uint64_t (*)(void))NSData.firstRange<A, B>(of:in:));
}

uint64_t protocol witness for DataProtocol.lastRange<A, B>(of:in:) in conformance NSData@<X0>( uint64_t a1@<X8>)
{
  return protocol witness for DataProtocol.firstRange<A, B>(of:in:) in conformance NSData( a1,  (uint64_t (*)(void))NSData.lastRange<A, B>(of:in:));
}

uint64_t protocol witness for DataProtocol.firstRange<A, B>(of:in:) in conformance NSData@<X0>( uint64_t a1@<X8>, uint64_t (*a2)(void))
{
  uint64_t result = a2();
  *(void *)a1 = result;
  *(void *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = v5 & 1;
  return result;
}

void *protocol witness for BidirectionalCollection.index(before:) in conformance NSData@<X0>( void *result@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4 = *result - 1LL;
  if (__OFSUB__(*result, 1LL))
  {
    __break(1u);
  }

  else
  {
    uint64_t result = objc_msgSend(*v2, sel_length);
    if ((v4 & 0x8000000000000000LL) == 0 && v4 < (uint64_t)result)
    {
      *a2 = v4;
      return result;
    }
  }

  __break(1u);
  return result;
}

uint64_t *protocol witness for BidirectionalCollection.formIndex(before:) in conformance NSData( uint64_t *result)
{
  uint64_t v2 = *result - 1;
  if (__OFSUB__(*result, 1LL))
  {
    __break(1u);
  }

  else
  {
    uint64_t v3 = result;
    uint64_t result = (uint64_t *)objc_msgSend(*v1, sel_length);
    if ((v2 & 0x8000000000000000LL) == 0 && v2 < (uint64_t)result)
    {
      *uint64_t v3 = v2;
      return result;
    }
  }

  __break(1u);
  return result;
}

id protocol witness for Collection.endIndex.getter in conformance NSData@<X0>(void *a1@<X8>)
{
  id result = objc_msgSend(*v1, sel_length);
  *a1 = result;
  return result;
}

uint64_t (*protocol witness for Collection.subscript.read in conformance NSData( _BYTE *a1, uint64_t *a2))(void, void)
{
  *a1 = NSData.subscript.getter(*a2);
  return destructiveProjectEnumData for PredicateCodableError;
}

uint64_t protocol witness for Collection.subscript.getter in conformance NSData@<X0>( uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v5 = *a1;
  uint64_t v4 = a1[1];
  id v7 = *v2;
  uint64_t result = (uint64_t)objc_msgSend(*v2, sel_length);
  if (result < 0)
  {
    __break(1u);
    goto LABEL_6;
  }

  if (v5 < 0)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }

  if (result >= v4)
  {
    *a2 = v5;
    a2[1] = v4;
    a2[2] = v7;
    return (uint64_t)v7;
  }

unint64_t protocol witness for Collection.indices.getter in conformance NSData@<X0>(void *a1@<X8>)
{
  unint64_t result = (unint64_t)objc_msgSend(*v1, sel_length);
  if ((result & 0x8000000000000000LL) != 0)
  {
    __break(1u);
  }

  else
  {
    *a1 = 0LL;
    a1[1] = result;
  }

  return result;
}

void *protocol witness for RandomAccessCollection.index(_:offsetBy:) in conformance NSData@<X0>( void *result@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v5 = *result + a2;
  if (__OFADD__(*result, a2))
  {
    __break(1u);
  }

  else
  {
    unint64_t result = objc_msgSend(*v3, sel_length);
    if ((v5 & 0x8000000000000000LL) == 0 && (uint64_t)result >= v5)
    {
      *a3 = v5;
      return result;
    }
  }

  __break(1u);
  return result;
}

id protocol witness for RandomAccessCollection.index(_:offsetBy:limitedBy:) in conformance NSData@<X0>( uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  id result = specialized RandomAccessCollection.index(_:offsetBy:limitedBy:)(*a1, a2, *a3);
  *(void *)a4 = result;
  *(_BYTE *)(a4 + 8) = v6 & 1;
  return result;
}

id protocol witness for RandomAccessCollection.distance(from:to:) in conformance NSData( uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = *a2;
  id v5 = *v2;
  id result = objc_msgSend(*v2, sel_length);
  if (v3 < 0 || (uint64_t)result < v3)
  {
    __break(1u);
  }

  else
  {
    id result = objc_msgSend(v5, sel_length);
  }

  __break(1u);
  return result;
}

id protocol witness for Collection.index(after:) in conformance NSData@<X0>( uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v4 = *a1;
  id result = objc_msgSend(*v2, sel_length);
  else {
    *a2 = v4 + 1;
  }
  return result;
}

id protocol witness for Collection.formIndex(after:) in conformance NSData(uint64_t *a1)
{
  uint64_t v3 = *v1;
  uint64_t v4 = *a1;
  id result = objc_msgSend(v3, sel_length);
  else {
    *a1 = v4 + 1;
  }
  return result;
}

void protocol witness for Sequence.makeIterator() in conformance NSData(void *a1@<X8>)
{
  *a1 = *v1;
  a1[1] = 0LL;
}

uint64_t protocol witness for Sequence.underestimatedCount.getter in conformance NSData(uint64_t a1)
{
  return Collection.underestimatedCount.getter();
}

uint64_t protocol witness for Sequence._copyToContiguousArray() in conformance NSData()
{
  uint64_t v1 = *v0;
  uint64_t v2 = specialized _copyCollectionToContiguousArray<A>(_:)(*v0);

  return v2;
}

void *protocol witness for Sequence._copyContents(initializing:) in conformance NSData( void *a1, uint64_t a2, uint64_t a3)
{
  return specialized Sequence._copySequenceContents(initializing:)(a1, a2, a3);
}

uint64_t sub_18308B68C()
{
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in NSData.regions.getter( unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return closure #1 in NSData.regions.getter(a1, a2, a3, a4, *(uint64_t **)(v4 + 16), *(void **)(v4 + 24));
}

uint64_t sub_18308B6B8()
{
  return swift_deallocObject();
}

uint64_t block_copy_helper_6(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_6()
{
  return swift_release();
}

uint64_t sub_18308B6E0()
{
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in NSData.subscript.getter( uint64_t result, uint64_t a2, uint64_t a3, _BYTE *a4)
{
  id v5 = (void *)v4[2];
  uint64_t v6 = *v5 - a2;
  if (__OFSUB__(*v5, a2))
  {
    __break(1u);
    goto LABEL_8;
  }

  uint64_t v8 = v4[3];
  id v7 = (_BYTE *)v4[4];
  *id v5 = v6;
  if (v8 < a2) {
    return result;
  }
  if (__OFSUB__(v8, a2))
  {
LABEL_8:
    __break(1u);
    return result;
  }

  if (v8 - a2 < a3)
  {
    *id v7 = *(_BYTE *)(result + v6);
    *a4 = 1;
  }

  return result;
}

uint64_t sub_18308B738()
{
  return swift_deallocObject();
}

uint64_t associated type witness table accessor for DataProtocol.Regions : BidirectionalCollection in NSData()
{
  return lazy protocol witness table accessor for type [String] and conformance [A]( &lazy protocol witness table cache variable for type [Data] and conformance [A],  &demangling cache variable for type metadata for [Data],  MEMORY[0x189618458]);
}

uint64_t associated type witness table accessor for Collection.SubSequence : DataProtocol in NSData()
{
  return lazy protocol witness table accessor for type Slice<NSData> and conformance <> Slice<A>( &lazy protocol witness table cache variable for type Slice<NSData> and conformance <> Slice<A>,  &lazy protocol witness table cache variable for type NSData and conformance NSData,  (uint64_t)&protocol conformance descriptor for NSData,  (uint64_t)&protocol conformance descriptor for <> Slice<A>);
}

unint64_t type metadata accessor for NSData()
{
  unint64_t result = lazy cache variable for type metadata for NSData;
  if (!lazy cache variable for type metadata for NSData)
  {
    objc_opt_self();
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for NSData);
  }

  return result;
}

_UNKNOWN **associated type witness table accessor for DataProtocol.Regions.Sequence.Element : ContiguousBytes in NSData()
{
  return &protocol witness table for Data;
}

uint64_t instantiation function for generic protocol witness table for NSData(uint64_t a1)
{
  uint64_t result = lazy protocol witness table accessor for type NSData and conformance NSData( &lazy protocol witness table cache variable for type NSData and conformance NSData,  (uint64_t)&protocol conformance descriptor for NSData);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t base witness table accessor for BidirectionalCollection in NSData()
{
  return lazy protocol witness table accessor for type NSData and conformance NSData( &lazy protocol witness table cache variable for type NSData and conformance NSData,  (uint64_t)&protocol conformance descriptor for NSData);
}

uint64_t associated type witness table accessor for Collection.Indices : RandomAccessCollection in NSData()
{
  return lazy protocol witness table accessor for type Range<Int> and conformance <> Range<A>( &lazy protocol witness table cache variable for type Range<Int> and conformance <> Range<A>,  MEMORY[0x189618A58]);
}

uint64_t associated type witness table accessor for Collection.SubSequence : RandomAccessCollection in NSData()
{
  return lazy protocol witness table accessor for type Slice<NSData> and conformance <> Slice<A>( &lazy protocol witness table cache variable for type Slice<NSData> and conformance <> Slice<A>,  &lazy protocol witness table cache variable for type NSData and conformance NSData,  (uint64_t)&protocol conformance descriptor for NSData,  MEMORY[0x18961A5E0]);
}

uint64_t lazy protocol witness table accessor for type Slice<NSData> and conformance <> Slice<A>( unint64_t *a1, unint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t result = *a1;
  if (!result)
  {
    uint64_t v9 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Slice<NSData>);
    uint64_t v10 = lazy protocol witness table accessor for type NSData and conformance NSData(a2, a3);
    uint64_t result = MEMORY[0x186E20D4C](a4, v9, &v10);
    atomic_store(result, a1);
  }

  return result;
}

uint64_t base witness table accessor for Collection in NSData()
{
  return lazy protocol witness table accessor for type NSData and conformance NSData( &lazy protocol witness table cache variable for type NSData and conformance NSData,  (uint64_t)&protocol conformance descriptor for NSData);
}

uint64_t associated type witness table accessor for Collection.Indices : BidirectionalCollection in NSData()
{
  return lazy protocol witness table accessor for type Range<Int> and conformance <> Range<A>( &lazy protocol witness table cache variable for type Range<Int> and conformance <> Range<A>,  MEMORY[0x189618A40]);
}

uint64_t lazy protocol witness table accessor for type Range<Int> and conformance <> Range<A>( unint64_t *a1, uint64_t a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    uint64_t v5 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Range<Int>);
    unint64_t v6 = lazy protocol witness table accessor for type Int and conformance Int();
    v7[0] = MEMORY[0x189618780];
    v7[1] = v6;
    uint64_t result = MEMORY[0x186E20D4C](a2, v5, v7);
    atomic_store(result, a1);
  }

  return result;
}

uint64_t associated type witness table accessor for Collection.SubSequence : BidirectionalCollection in NSData()
{
  return lazy protocol witness table accessor for type Slice<NSData> and conformance <> Slice<A>( &lazy protocol witness table cache variable for type Slice<NSData> and conformance <> Slice<A>,  &lazy protocol witness table cache variable for type NSData and conformance NSData,  (uint64_t)&protocol conformance descriptor for NSData,  MEMORY[0x18961A5C8]);
}

uint64_t base witness table accessor for Sequence in NSData()
{
  return lazy protocol witness table accessor for type NSData and conformance NSData( &lazy protocol witness table cache variable for type NSData and conformance NSData,  (uint64_t)&protocol conformance descriptor for NSData);
}

uint64_t lazy protocol witness table accessor for type NSData and conformance NSData( unint64_t *a1, uint64_t a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    unint64_t v5 = type metadata accessor for NSData();
    uint64_t result = MEMORY[0x186E20D4C](a2, v5);
    atomic_store(result, a1);
  }

  return result;
}

uint64_t associated type witness table accessor for Collection.Indices : Collection in NSData()
{
  return lazy protocol witness table accessor for type Range<Int> and conformance <> Range<A>( (unint64_t *)&lazy protocol witness table cache variable for type Range<Int> and conformance <> Range<A>,  MEMORY[0x189618A60]);
}

uint64_t associated type witness table accessor for Collection.SubSequence : Collection in NSData()
{
  return lazy protocol witness table accessor for type [String] and conformance [A]( &lazy protocol witness table cache variable for type Slice<NSData> and conformance Slice<A>,  &demangling cache variable for type metadata for Slice<NSData>,  MEMORY[0x18961A5E8]);
}

uint64_t associated type witness table accessor for Sequence.Iterator : IteratorProtocol in NSData()
{
  return lazy protocol witness table accessor for type [String] and conformance [A]( &lazy protocol witness table cache variable for type IndexingIterator<NSData> and conformance IndexingIterator<A>,  &demangling cache variable for type metadata for IndexingIterator<NSData>,  MEMORY[0x189619678]);
}

uint64_t sub_18308BB2C()
{
  return swift_deallocObject();
}

uint64_t PredicateExpressions.Variable.description.getter()
{
  v0._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v0);
  swift_bridgeObjectRelease();
  v1._uint64_t countAndFlagsBits = 41LL;
  v1._uint64_t object = (void *)0xE100000000000000LL;
  String.append(_:)(v1);
  return 0x656C626169726156LL;
}

uint64_t KeyPath._unsafeAssumeSendable.getter()
{
  return v1;
}

uint64_t PredicateExpressions.Variable.init()@<X0>(unint64_t *a1@<X8>)
{
  if (one-time initialization token for nextID != -1) {
    uint64_t result = swift_once();
  }
  do
    unint64_t v2 = __ldxr((unint64_t *)&static PredicateExpressions.VariableID.nextID);
  while (__stxr(v2 + 1, (unint64_t *)&static PredicateExpressions.VariableID.nextID));
  *a1 = v2;
  return result;
}

BOOL static PredicateExpressions.VariableID.== infix(_:_:)(void *a1, void *a2)
{
  return *a1 == *a2;
}

void PredicateError._Error.hash(into:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  __asm { BR              X10 }

void sub_18308BCF4()
{
  if (v0)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    String.hash(into:)();
    outlined consume of PredicateError._Error(v1, v0, 0);
  }

  else
  {
    Hasher._combine(_:)(0);
  }

void PredicateError._Error.hashValue.getter(uint64_t a1, uint64_t a2, char a3)
{
  __asm { BR              X10 }

Swift::Int sub_18308BE20()
{
  if (v0)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    String.hash(into:)();
    outlined consume of PredicateError._Error(v1, v0, 0);
  }

  else
  {
    Hasher._combine(_:)(0);
  }

  return Hasher._finalize()();
}

void protocol witness for Hashable.hashValue.getter in conformance PredicateError._Error()
{
}

void protocol witness for Hashable.hash(into:) in conformance PredicateError._Error(uint64_t a1)
{
}

void protocol witness for Hashable._rawHashValue(seed:) in conformance PredicateError._Error()
{
  uint64_t v1 = *(unsigned __int8 *)(v0 + 16);
  Hasher.init(_seed:)();
  __asm { BR              X9 }

Swift::Int sub_18308BF84()
{
  if (v0)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    String.hash(into:)();
    outlined consume of PredicateError._Error(v1, v0, 0);
  }

  else
  {
    Hasher._combine(_:)(0);
  }

  return Hasher._finalize()();
}

void protocol witness for static Equatable.== infix(_:_:) in conformance PredicateError._Error(uint64_t a1)
{
  specialized static PredicateError._Error.== infix(_:_:)(*(void *)a1, *(void *)(a1 + 8), *(_BYTE *)(a1 + 16));
}

void PredicateError.debugDescription.getter()
{
  __asm { BR              X10 }

uint64_t sub_18308C0F8(uint64_t a1)
{
  if (!v1) {
    return a1 + 4;
  }
  swift_bridgeObjectRetain();
  return v2;
}

void static PredicateError.== infix(_:_:)(uint64_t a1)
{
  __asm { BR              X11 }

BOOL sub_18308C188@<W0>(int a1@<W8>)
{
  return a1 == 0;
}

void static PredicateError.undefinedVariable.getter(uint64_t a1@<X8>)
{
  *(void *)a1 = 0LL;
  *(void *)(a1 + 8) = 0LL;
  *(_BYTE *)(a1 + 16) = 3;
}

void static PredicateError.forceUnwrapFailure.getter(uint64_t a1@<X8>)
{
  *(void *)a1 = 0LL;
  *(void *)(a1 + 8) = 0LL;
  *(_BYTE *)(a1 + 16) = 0;
}

void static PredicateError.forceCastFailure.getter(uint64_t a1@<X8>)
{
  *(void *)a1 = 0LL;
  *(void *)(a1 + 8) = 0LL;
  *(_BYTE *)(a1 + 16) = 1;
}

void static PredicateError.invalidInput.getter(uint64_t a1@<X8>)
{
  *(void *)a1 = 0LL;
  *(void *)(a1 + 8) = 0LL;
  *(_BYTE *)(a1 + 16) = 2;
}

void PredicateError.hash(into:)()
{
  __asm { BR              X10 }

uint64_t sub_18308C250()
{
  if (v1)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    String.hash(into:)();
    uint64_t v2 = v0;
    uint64_t v3 = v1;
  }

  else
  {
    Hasher._combine(_:)(0);
    uint64_t v2 = v0;
    uint64_t v3 = 0LL;
  }

  return outlined consume of PredicateError._Error(v2, v3, 0);
}

void PredicateError.hashValue.getter()
{
  uint64_t v1 = *(unsigned __int8 *)(v0 + 16);
  Hasher.init(_seed:)();
  __asm { BR              X9 }

Swift::Int sub_18308C3A8()
{
  if (v0)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    String.hash(into:)();
    outlined consume of PredicateError._Error(v1, v0, 0);
  }

  else
  {
    Hasher._combine(_:)(0);
  }

  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance PredicateError()
{
  __asm { BR              X10 }

void sub_18308C4F4()
{
  if (v0)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    String.hash(into:)();
    outlined consume of PredicateError._Error(v1, v0, 0);
  }

  else
  {
    Hasher._combine(_:)(0);
  }

void protocol witness for Hashable._rawHashValue(seed:) in conformance PredicateError()
{
  uint64_t v1 = *(unsigned __int8 *)(v0 + 16);
  Hasher.init(_seed:)();
  __asm { BR              X9 }

Swift::Int sub_18308C614()
{
  if (v0)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    String.hash(into:)();
    outlined consume of PredicateError._Error(v1, v0, 0);
  }

  else
  {
    Hasher._combine(_:)(0);
  }

  return Hasher._finalize()();
}

void one-time initialization function for nextID()
{
  static PredicateExpressions.VariableID.nextID = 0LL;
}

uint64_t outlined consume of PredicateError._Error(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  if (a3 <= 2u) {
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t PredicateExpressions.VariableID.encode(to:)(void *a1)
{
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v2);
}

uint64_t PredicateExpressions.VariableID.init(from:)@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  if (v2) {
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  }
  __swift_project_boxed_opaque_existential_1(v44, v44[3]);
  uint64_t v5 = dispatch thunk of SingleValueDecodingContainer.decode(_:)();
  if (one-time initialization token for predicateArchivingState != -1) {
    swift_once();
  }
  unint64_t v6 = (uint64_t *)pthread_getspecific(static _ThreadLocal.Key<A>.predicateArchivingState);
  if (!v6)
  {
    uint64_t v11 = v5;
    goto LABEL_58;
  }

  uint64_t v7 = *v6;
  uint64_t v8 = *(void *)(*v6 + 40);
  if (*(void *)(v8 + 16))
  {
    uint64_t v9 = specialized __RawDictionaryStorage.find<A>(_:)(v5);
    if ((v10 & 1) != 0)
    {
      uint64_t v11 = *(void *)(*(void *)(v8 + 56) + 8 * v9);
LABEL_58:
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v44);
      *a2 = v11;
      return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
    }
  }

  uint64_t v12 = one-time initialization token for nextID;
  swift_retain();
  if (v12 != -1) {
    swift_once();
  }
  do
    uint64_t v11 = __ldxr((unint64_t *)&static PredicateExpressions.VariableID.nextID);
  while (__stxr(v11 + 1, (unint64_t *)&static PredicateExpressions.VariableID.nextID));
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v45 = *(void *)(v7 + 40);
  uint64_t v14 = v45;
  *(void *)(v7 + 40) = 0x8000000000000000LL;
  unint64_t v15 = specialized __RawDictionaryStorage.find<A>(_:)(v5);
  uint64_t v17 = *(void *)(v14 + 16);
  BOOL v18 = (v16 & 1) == 0;
  BOOL v19 = __OFADD__(v17, v18);
  uint64_t v20 = v17 + v18;
  if (v19)
  {
    __break(1u);
  }

  else
  {
    if (*(void *)(v14 + 24) < v20)
    {
      char v21 = v16;
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)( v20,  isUniquelyReferenced_nonNull_native);
      uint64_t v22 = v45;
      unint64_t v15 = specialized __RawDictionaryStorage.find<A>(_:)(v5);
      if ((v21 & 1) != (v23 & 1)) {
        goto LABEL_62;
      }
      if ((v21 & 1) == 0) {
        goto LABEL_56;
      }
LABEL_19:
      *(void *)(*(void *)(v22 + 56) + 8 * v15) = v11;
LABEL_57:
      *(void *)(v7 + 40) = v22;
      swift_release();
      swift_bridgeObjectRelease();
      goto LABEL_58;
    }

    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
    {
      uint64_t v22 = v14;
      if ((v16 & 1) != 0) {
        goto LABEL_19;
      }
LABEL_56:
      specialized _NativeDictionary._insert(at:key:value:)(v15, v5, v11, (void *)v22);
      goto LABEL_57;
    }
  }

  char v43 = v16;
  unint64_t v42 = v15;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<UInt, PredicateExpressions.VariableID>);
  uint64_t v24 = static _DictionaryStorage.copy(original:)();
  uint64_t v22 = v24;
  if (!*(void *)(v14 + 16))
  {
LABEL_55:
    swift_bridgeObjectRelease();
    unint64_t v15 = v42;
    if ((v43 & 1) != 0) {
      goto LABEL_19;
    }
    goto LABEL_56;
  }

  __int128 v25 = (void *)(v24 + 64);
  uint64_t v26 = v14 + 64;
  unint64_t v27 = (unint64_t)((1LL << *(_BYTE *)(v22 + 32)) + 63) >> 6;
  int64_t v28 = 0LL;
  *(void *)(v22 + 16) = *(void *)(v14 + 16);
  uint64_t v29 = 1LL << *(_BYTE *)(v14 + 32);
  uint64_t v30 = -1LL;
  if (v29 < 64) {
    uint64_t v30 = ~(-1LL << v29);
  }
  unint64_t v31 = v30 & *(void *)(v14 + 64);
  int64_t v32 = (unint64_t)(v29 + 63) >> 6;
  uint64_t v33 = v14 + 64;
  while (1)
  {
    if (v31)
    {
      unint64_t v34 = __clz(__rbit64(v31));
      v31 &= v31 - 1;
      unint64_t v35 = v34 | (v28 << 6);
      goto LABEL_29;
    }

    int64_t v38 = v28 + 1;
    if (__OFADD__(v28, 1LL))
    {
      __break(1u);
      goto LABEL_61;
    }

    if (v38 >= v32) {
      goto LABEL_55;
    }
    unint64_t v39 = *(void *)(v33 + 8 * v38);
    ++v28;
    if (!v39)
    {
      int64_t v28 = v38 + 1;
      if (v38 + 1 >= v32) {
        goto LABEL_55;
      }
      unint64_t v39 = *(void *)(v33 + 8 * v28);
      if (!v39)
      {
        int64_t v28 = v38 + 2;
        if (v38 + 2 >= v32) {
          goto LABEL_55;
        }
        unint64_t v39 = *(void *)(v33 + 8 * v28);
        if (!v39)
        {
          int64_t v28 = v38 + 3;
          if (v38 + 3 >= v32) {
            goto LABEL_55;
          }
          unint64_t v39 = *(void *)(v33 + 8 * v28);
          if (!v39)
          {
            int64_t v28 = v38 + 4;
            if (v38 + 4 >= v32) {
              goto LABEL_55;
            }
            unint64_t v39 = *(void *)(v33 + 8 * v28);
            if (!v39)
            {
              int64_t v28 = v38 + 5;
              if (v38 + 5 >= v32) {
                goto LABEL_55;
              }
              unint64_t v39 = *(void *)(v33 + 8 * v28);
              if (!v39)
              {
                int64_t v28 = v38 + 6;
                if (v38 + 6 >= v32) {
                  goto LABEL_55;
                }
                unint64_t v39 = *(void *)(v33 + 8 * v28);
                if (!v39)
                {
                  int64_t v28 = v38 + 7;
                  if (v38 + 7 >= v32) {
                    goto LABEL_55;
                  }
                  unint64_t v39 = *(void *)(v33 + 8 * v28);
                  if (!v39) {
                    break;
                  }
                }
              }
            }
          }
        }
      }
    }

void PredicateExpressions.VariableID.hash(into:)()
{
}

Swift::Int PredicateExpressions.VariableID.hashValue.getter()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance PredicateExpressions.VariableID()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance PredicateExpressions.VariableID()
{
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance PredicateExpressions.VariableID()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

uint64_t protocol witness for Decodable.init(from:) in conformance PredicateExpressions.VariableID@<X0>( void *a1@<X0>, uint64_t *a2@<X8>)
{
  return PredicateExpressions.VariableID.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance PredicateExpressions.VariableID( void *a1)
{
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v2);
}

void PredicateExpressions.Variable.key.getter(void *a1@<X8>)
{
  *a1 = *v1;
}

uint64_t PredicateExpressions.Variable.evaluate(_:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = *(void *)(a2 + 16);
  uint64_t v7 = type metadata accessor for Optional();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x1895F8858](v7);
  char v10 = (char *)v15 - v9;
  uint64_t v11 = *a1;
  v15[0] = *v3;
  v15[1] = v11;
  PredicateBindings.subscript.getter(v15, v6, (uint64_t)v10);
  uint64_t v12 = *(void *)(v6 - 8);
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  lazy protocol witness table accessor for type PredicateError and conformance PredicateError();
  swift_allocError();
  *(void *)uint64_t v13 = 0LL;
  *(void *)(v13 + 8) = 0LL;
  *(_BYTE *)(v13 + 16) = 3;
  return swift_willThrow();
}

uint64_t PredicateExpressions.Variable.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  if (a1 == 7955819 && a2 == 0xE300000000000000LL)
  {
    swift_bridgeObjectRelease();
    char v4 = 0;
  }

  else
  {
    char v3 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    char v4 = v3 ^ 1;
  }

  return v4 & 1;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance PredicateExpressions.Variable<A>.CodingKeys()
{
  return 7955819LL;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance PredicateExpressions.Variable<A>.CodingKeys@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result = PredicateExpressions.Variable.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result & 1;
  return result;
}

uint64_t protocol witness for CodingKey.init(intValue:) in conformance PredicateExpressions.Variable<A>.CodingKeys@<X0>( _BYTE *a1@<X8>)
{
  uint64_t result = default argument 1 of _typeName(_:qualified:)();
  *a1 = result & 1;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance PredicateExpressions.Variable<A>.CodingKeys( uint64_t a1)
{
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PredicateExpressions.Variable<A>.CodingKeys( uint64_t a1)
{
  return CodingKey.debugDescription.getter();
}

uint64_t PredicateExpressions.Variable.encode(to:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = type metadata accessor for PredicateExpressions.Variable.CodingKeys(255LL, *(void *)(a2 + 16), a3, a4);
  MEMORY[0x186E20D4C](&protocol conformance descriptor for PredicateExpressions.Variable<A>.CodingKeys, v6);
  uint64_t v7 = type metadata accessor for KeyedEncodingContainer();
  v12[0] = *(void *)(v7 - 8);
  MEMORY[0x1895F8858](v7);
  uint64_t v9 = (char *)v12 - v8;
  uint64_t v10 = *v4;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  void v12[3] = v10;
  lazy protocol witness table accessor for type PredicateExpressions.VariableID and conformance PredicateExpressions.VariableID();
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  return (*(uint64_t (**)(char *, uint64_t))(v12[0] + 8LL))(v9, v7);
}

uint64_t PredicateExpressions.Variable.init(from:)@<X0>( void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, void *a5@<X8>)
{
  unint64_t v15 = a5;
  uint64_t v7 = type metadata accessor for PredicateExpressions.Variable.CodingKeys(255LL, a2, a3, a4);
  MEMORY[0x186E20D4C](&protocol conformance descriptor for PredicateExpressions.Variable<A>.CodingKeys, v7);
  uint64_t v8 = type metadata accessor for KeyedDecodingContainer();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x1895F8858](v8);
  uint64_t v11 = (char *)&v14 - v10;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v5)
  {
    uint64_t v12 = v15;
    lazy protocol witness table accessor for type PredicateExpressions.VariableID and conformance PredicateExpressions.VariableID();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
    *uint64_t v12 = v16;
  }

  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t protocol witness for PredicateExpression.evaluate(_:) in conformance PredicateExpressions.Variable<A>@<X0>( uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return PredicateExpressions.Variable.evaluate(_:)(a1, a2, a3);
}

uint64_t protocol witness for Decodable.init(from:) in conformance PredicateExpressions.Variable<A>@<X0>( void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, void *a5@<X8>)
{
  return PredicateExpressions.Variable.init(from:)(a1, *(void *)(a2 + 16), a3, a4, a5);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance PredicateExpressions.Variable<A>( void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return PredicateExpressions.Variable.encode(to:)(a1, a2, a3, a4);
}

uint64_t PredicateExpressions.KeyPath.keyPath.getter()
{
  return swift_retain();
}

uint64_t PredicateExpressions.KeyPath.init(root:keyPath:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t result = type metadata accessor for PredicateExpressions.KeyPath(0LL, a3, a4, a5);
  *(void *)(a6 + *(int *)(result + 44)) = a2;
  return result;
}

uint64_t PredicateExpressions.KeyPath.evaluate(_:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v12 = a3;
  uint64_t v5 = *(void *)(a2 + 32);
  uint64_t v6 = *(void *)(a2 + 16);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v8 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1895F8858](AssociatedTypeWitness);
  uint64_t v10 = (char *)&v12 - v9;
  uint64_t v13 = *a1;
  uint64_t result = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(v5 + 16))(&v13, v6, v5);
  if (!v3)
  {
    swift_getAtKeyPath();
    return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v10, AssociatedTypeWitness);
  }

  return result;
}

uint64_t protocol witness for PredicateExpression.evaluate(_:) in conformance PredicateExpressions.KeyPath<A, B>@<X0>( uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return PredicateExpressions.KeyPath.evaluate(_:)(a1, a2, a3);
}

uint64_t PredicateExpressions.Value.value.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a1 + 16) - 8LL) + 16LL))(a2, v2);
}

uint64_t PredicateExpressions.Value.init(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(a2 - 8) + 32LL))(a3, a1);
}

uint64_t PredicateExpressions.Value.evaluate(_:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a1 + 16) - 8LL) + 16LL))(a2, v2);
}

uint64_t protocol witness for PredicateExpression.evaluate(_:) in conformance PredicateExpressions.Value<A>@<X0>( uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  return PredicateExpressions.Value.evaluate(_:)(a1, a2);
}

uint64_t static PredicateExpressions.build_Arg<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(a2 - 8) + 16LL))(a3, a1);
}

{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(a2 - 8) + 16LL))(a3, a1);
}

uint64_t static PredicateExpressions.build_KeyPath<A, B>(root:keyPath:)@<X0>( uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v9 = *a2;
  uint64_t v10 = *(void *)(a3 - 8);
  MEMORY[0x1895F8858](a1);
  uint64_t v12 = (char *)v16 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  (*(void (**)(char *))(v10 + 16))(v12);
  v16[0] = a2;
  uint64_t v13 = *(void *)(v9 + *MEMORY[0x18961A9A8] + 8);
  type metadata accessor for KeyPath();
  swift_retain();
  swift_dynamicCast();
  uint64_t v14 = v16[1];
  swift_retain();
  AnyKeyPath._validateForPredicateUsage(restrictArguments:)(0);
  swift_release();
  (*(void (**)(uint64_t, char *, uint64_t))(v10 + 32))(a5, v12, a3);
  uint64_t result = type metadata accessor for PredicateExpressions.KeyPath(0LL, a3, v13, a4);
  *(void *)(a5 + *(int *)(result + 44)) = v14;
  return result;
}

uint64_t AnyKeyPath._unsafeAssumeSendableAnyKeyPath.getter()
{
  return v1;
}

BOOL static PredicateExpressions.KeyPath<>.CodingKeys.== infix(_:_:)(int a1, int a2)
{
  return ((a2 ^ a1) & 1) == 0;
}

void PredicateExpressions.KeyPath<>.CodingKeys.hash(into:)(uint64_t a1, char a2)
{
}

uint64_t PredicateExpressions.KeyPath<>.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 1953460082 && a2 == 0xE400000000000000LL;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0LL;
  }

  else if (a1 == 0x696669746E656469LL && a2 == 0xEA00000000007265LL)
  {
    swift_bridgeObjectRelease();
    return 1LL;
  }

  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0) {
      return 1LL;
    }
    else {
      return 2LL;
    }
  }

Swift::Int PredicateExpressions.KeyPath<>.CodingKeys.hashValue.getter(char a1)
{
  return Hasher._finalize()();
}

uint64_t PredicateExpressions.KeyPath<>.CodingKeys.stringValue.getter(char a1)
{
  if ((a1 & 1) != 0) {
    return 0x696669746E656469LL;
  }
  else {
    return 1953460082LL;
  }
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance PredicateExpressions.KeyPath<A, B><>.CodingKeys( unsigned __int8 *a1, unsigned __int8 *a2)
{
  return static PredicateExpressions.KeyPath<>.CodingKeys.== infix(_:_:)(*a1, *a2);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance PredicateExpressions.KeyPath<A, B><>.CodingKeys()
{
  return PredicateExpressions.KeyPath<>.CodingKeys.hashValue.getter(*v0);
}

void protocol witness for Hashable.hash(into:) in conformance PredicateExpressions.KeyPath<A, B><>.CodingKeys( uint64_t a1)
{
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance PredicateExpressions.KeyPath<A, B><>.CodingKeys()
{
  return Hasher._finalize()();
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance PredicateExpressions.KeyPath<A, B><>.CodingKeys()
{
  return PredicateExpressions.KeyPath<>.CodingKeys.stringValue.getter(*v0);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance PredicateExpressions.KeyPath<A, B><>.CodingKeys@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result = PredicateExpressions.KeyPath<>.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CodingKey.init(intValue:) in conformance PredicateExpressions.KeyPath<A, B><>.CodingKeys@<X0>( _BYTE *a1@<X8>)
{
  uint64_t result = protocol witness for Sequence._customContainsEquatableElement(_:) in conformance _DarwinSearchPathsSequence();
  *a1 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance PredicateExpressions.KeyPath<A, B><>.CodingKeys( uint64_t a1)
{
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PredicateExpressions.KeyPath<A, B><>.CodingKeys( uint64_t a1)
{
  return CodingKey.debugDescription.getter();
}

void PredicateExpressions.KeyPath<>.encode(to:)()
{
}

uint64_t sub_18308DA30(uint64_t a1)
{
  uint64_t v4 = type metadata accessor for KeyedEncodingContainer();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1895F8858](v4);
  uint64_t v7 = (char *)&v23 - v6;
  __swift_project_boxed_opaque_existential_1(v1, v1[3]);
  uint64_t v8 = *(void *)(v3 - 144);
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  *(_BYTE *)(v3 - 128) = 0;
  uint64_t v9 = *(void *)(v3 - 72);
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (v9) {
    return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  }
  *(void *)(v3 - 72) = v2;
  if (one-time initialization token for predicateArchivingState != -1) {
    swift_once();
  }
  uint64_t v11 = pthread_getspecific(static _ThreadLocal.Key<A>.predicateArchivingState);
  if (!v11) {
    goto LABEL_8;
  }
  uint64_t v12 = *(void *)(*(void *)v11 + 24LL);
  char v13 = *(_BYTE *)(*(void *)v11 + 32LL);
  *(void *)(v3 - 128) = *(void *)(*(void *)v11 + 16LL);
  *(void *)(v3 - 120) = v12;
  *(_BYTE *)(v3 - 112) = v13;
  uint64_t v14 = *(void *)(v8 + *(int *)(*(void *)(v3 - 72) + 44LL));
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  specialized PredicateCodableConfiguration._identifier(for:)(v14, (uint64_t *)(v3 - 128));
  uint64_t v16 = v15;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v16)
  {
    *(_BYTE *)(v3 - 128) = 1;
    KeyedEncodingContainer.encode(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    return swift_bridgeObjectRelease();
  }

  else
  {
LABEL_8:
    uint64_t v17 = type metadata accessor for EncodingError();
    swift_allocError();
    BOOL v19 = v18;
    *(void *)(v3 - 136) = (char *)v18
    uint64_t v20 = *(void **)(v8 + *(int *)(*(void *)(v3 - 72) + 44LL));
    v19[3] = *v20;
    *BOOL v19 = v20;
    swift_retain();
    KeyedDecodingContainer.codingPath.getter();
    *(void *)(v3 - 128) = 0LL;
    *(void *)(v3 - 120) = 0xE000000000000000LL;
    _StringGuts.grow(_:)(49LL);
    swift_bridgeObjectRelease();
    *(void *)(v3 - 128) = 0x2720656854LL;
    *(void *)(v3 - 120) = 0xE500000000000000LL;
    v21._uint64_t countAndFlagsBits = AnyKeyPath.debugDescription.getter();
    String.append(_:)(v21);
    swift_bridgeObjectRelease();
    v22._uint64_t object = (void *)0x80000001839CBF20LL;
    v22._uint64_t countAndFlagsBits = 0xD00000000000002ALL;
    String.append(_:)(v22);
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(void *, void, uint64_t))(*(void *)(v17 - 8) + 104LL))( v19,  *MEMORY[0x1896193B8],  v17);
    swift_willThrow();
    return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  }

void PredicateExpressions.KeyPath<>.init(from:)( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v9[2] = a3;
  v9[8] = *(void *)(a2 - 8);
  MEMORY[0x1895F8858](a1);
  void v9[6] = v4;
  v9[7] = (char *)v9 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  v9[13] = v5;
  v9[14] = v6;
  v9[15] = v7;
  v9[16] = v4;
  v9[17] = v8;
  type metadata accessor for PredicateExpressions.KeyPath<>.CodingKeys();
}

uint64_t sub_18308DDB0(uint64_t a1)
{
  uint64_t v6 = type metadata accessor for KeyedDecodingContainer();
  uint64_t v7 = *(void *)(v6 - 8);
  *(void *)(v5 - 152) = v6;
  *(void *)(v5 - 144) = v7;
  MEMORY[0x1895F8858](v6);
  uint64_t v9 = &v58[-v8];
  *(void *)(v5 - 192) = v1;
  *(void *)(v5 - 184) = v2;
  *(void *)(v5 - 200) = v3;
  uint64_t v10 = type metadata accessor for PredicateExpressions.KeyPath(0LL, v2, v3, v1);
  uint64_t v11 = *(void *)(v10 - 8);
  MEMORY[0x1895F8858](v10);
  char v13 = &v58[-v12];
  __swift_project_boxed_opaque_existential_1(v4, v4[3]);
  *(void *)(v5 - 136) = v9;
  uint64_t v14 = *(void *)(v5 - 128);
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v14) {
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v4);
  }
  *(void *)(v5 - 216) = v11;
  *(void *)(v5 - 128) = v10;
  uint64_t v15 = v13;
  uint64_t v17 = *(void *)(v5 - 168);
  uint64_t v16 = *(void *)(v5 - 160);
  *(_BYTE *)(v5 - 120) = 0;
  uint64_t v18 = *(void *)(v5 - 184);
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v16 + 32))(v15, v17, v18);
  *(_BYTE *)(v5 - 120) = 1;
  uint64_t v20 = KeyedDecodingContainer.decode(_:forKey:)();
  Swift::String v22 = v21;
  *(void *)(v5 - 168) = v20;
  if (one-time initialization token for predicateArchivingState != -1) {
    swift_once();
  }
  uint64_t v23 = pthread_getspecific(static _ThreadLocal.Key<A>.predicateArchivingState);
  if (!v23) {
    goto LABEL_10;
  }
  uint64_t v24 = *(void *)(*(void *)v23 + 24LL);
  char v25 = *(_BYTE *)(*(void *)v23 + 32LL);
  *(void *)(v5 - 120) = *(void *)(*(void *)v23 + 16LL);
  *(void *)(v5 - 112) = v24;
  *(_BYTE *)(v5 - 104) = v25;
  uint64_t AssociatedTypeWitness = (uint64_t *)swift_getAssociatedTypeWitness();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v27 = *(void *)(v5 - 168);
  *(void *)(v5 - 176) = AssociatedTypeWitness;
  uint64_t v28 = PredicateCodableConfiguration._keyPath(for:rootType:)(v27, (uint64_t)v22, AssociatedTypeWitness);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v28)
  {
    *(void *)(v5 - 192) = v22;
    type metadata accessor for KeyPath();
    uint64_t v29 = swift_dynamicCastClass();
    if (v29)
    {
      uint64_t v30 = v29;
      swift_retain();
      swift_bridgeObjectRelease();
      *(void *)(v5 - 72) = v30;
      swift_retain();
      swift_dynamicCast();
      uint64_t v31 = *(void *)(v5 - 120);
      swift_release_n();
      (*(void (**)(void, void))(*(void *)(v5 - 144) + 8LL))( *(void *)(v5 - 136),  *(void *)(v5 - 152));
      uint64_t v32 = *(void *)(v5 - 128);
      *(void *)&v15[*(int *)(v32 + 44)] = v31;
      uint64_t v33 = *(void *)(v5 - 216);
      (*(void (**)(void, _BYTE *, uint64_t))(v33 + 16))(*(void *)(v5 - 208), v15, v32);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v4);
      return (*(uint64_t (**)(_BYTE *, uint64_t))(v33 + 8))(v15, v32);
    }

    *(_BYTE *)(v5 - 72) = 1;
    *(void *)(v5 - 120) = 0LL;
    *(void *)(v5 - 112) = 0xE000000000000000LL;
    _StringGuts.grow(_:)(114LL);
    uint64_t v41 = *(void *)(v5 - 112);
    *(void *)(v5 - 120) = *(void *)(v5 - 120);
    *(void *)(v5 - 112) = v41;
    v42._uint64_t countAndFlagsBits = 0x687461702079654BLL;
    v42._uint64_t object = (void *)0xEA00000000002720LL;
    String.append(_:)(v42);
    swift_retain();
    uint64_t v43 = AnyKeyPath.debugDescription.getter();
    uint64_t v45 = v44;
    swift_release();
    v46._uint64_t countAndFlagsBits = v43;
    v46._uint64_t object = v45;
    String.append(_:)(v46);
    swift_bridgeObjectRelease();
    v47._uint64_t countAndFlagsBits = 0x615079654B282027LL;
    v47._uint64_t object = (void *)0xEB000000003C6874LL;
    String.append(_:)(v47);
    dispatch thunk of static AnyKeyPath._rootAndValueType.getter();
    v48._uint64_t countAndFlagsBits = _typeName(_:qualified:)();
    String.append(_:)(v48);
    swift_bridgeObjectRelease();
    v49._uint64_t countAndFlagsBits = 8236LL;
    v49._uint64_t object = (void *)0xE200000000000000LL;
    String.append(_:)(v49);
    dispatch thunk of static AnyKeyPath._rootAndValueType.getter();
    v50._uint64_t countAndFlagsBits = _typeName(_:qualified:)();
    String.append(_:)(v50);
    swift_bridgeObjectRelease();
    v51._uint64_t object = (void *)0x80000001839CBFA0LL;
    v51._uint64_t countAndFlagsBits = 0xD000000000000013LL;
    String.append(_:)(v51);
    v52._uint64_t countAndFlagsBits = *(void *)(v5 - 168);
    v52._uint64_t object = *(void **)(v5 - 192);
    String.append(_:)(v52);
    swift_bridgeObjectRelease();
    v53._uint64_t countAndFlagsBits = 0xD000000000000039LL;
    v53._uint64_t object = (void *)0x80000001839CBFC0LL;
    String.append(_:)(v53);
    v54._uint64_t countAndFlagsBits = _typeName(_:qualified:)();
    String.append(_:)(v54);
    swift_bridgeObjectRelease();
    v55._uint64_t countAndFlagsBits = 8236LL;
    v55._uint64_t object = (void *)0xE200000000000000LL;
    String.append(_:)(v55);
    v56._uint64_t countAndFlagsBits = _typeName(_:qualified:)();
    String.append(_:)(v56);
    swift_bridgeObjectRelease();
    v57._uint64_t countAndFlagsBits = 62LL;
    v57._uint64_t object = (void *)0xE100000000000000LL;
    String.append(_:)(v57);
    type metadata accessor for DecodingError();
    swift_allocError();
    uint64_t v38 = *(void *)(v5 - 152);
    MEMORY[0x186E20D4C](MEMORY[0x189619B88], v38);
    uint64_t v39 = *(void *)(v5 - 136);
    static DecodingError.dataCorruptedError<A>(forKey:in:debugDescription:)();
    swift_bridgeObjectRelease();
    swift_willThrow();
    swift_release();
  }

  else
  {
LABEL_10:
    *(_BYTE *)(v5 - 72) = 1;
    *(void *)(v5 - 120) = 0LL;
    *(void *)(v5 - 112) = 0xE000000000000000LL;
    _StringGuts.grow(_:)(66LL);
    uint64_t v34 = *(void *)(v5 - 112);
    *(void *)(v5 - 120) = *(void *)(v5 - 120);
    *(void *)(v5 - 112) = v34;
    v35._uint64_t object = (void *)0x80000001839CBF50LL;
    v35._uint64_t countAndFlagsBits = 0xD000000000000013LL;
    String.append(_:)(v35);
    v36._uint64_t countAndFlagsBits = *(void *)(v5 - 168);
    v36._uint64_t object = v22;
    String.append(_:)(v36);
    swift_bridgeObjectRelease();
    v37._uint64_t countAndFlagsBits = 0xD00000000000002DLL;
    v37._uint64_t object = (void *)0x80000001839CBF70LL;
    String.append(_:)(v37);
    type metadata accessor for DecodingError();
    swift_allocError();
    uint64_t v38 = *(void *)(v5 - 152);
    MEMORY[0x186E20D4C](MEMORY[0x189619B88], v38);
    uint64_t v39 = *(void *)(v5 - 136);
    static DecodingError.dataCorruptedError<A>(forKey:in:debugDescription:)();
    swift_bridgeObjectRelease();
    swift_willThrow();
  }

  (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 144) + 8LL))(v39, v38);
  uint64_t v40 = *(void *)(v5 - 160);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v4);
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v40 + 8))(v15, v18);
}

void protocol witness for Decodable.init(from:) in conformance <> PredicateExpressions.KeyPath<A, B>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
}

  ;
}

void protocol witness for Encodable.encode(to:) in conformance <> PredicateExpressions.KeyPath<A, B>()
{
}

  ;
}

uint64_t PredicateExpressions.KeyPath.description.getter()
{
  v0._uint64_t countAndFlagsBits = 0x286874615079654BLL;
  v0._uint64_t object = (void *)0xEE00203A746F6F72LL;
  String.append(_:)(v0);
  _print_unlocked<A, B>(_:_:)();
  v1._uint64_t countAndFlagsBits = 0x74615079656B202CLL;
  v1._uint64_t object = (void *)0xEB00000000203A68LL;
  String.append(_:)(v1);
  v2._uint64_t countAndFlagsBits = AnyKeyPath.debugDescription.getter();
  String.append(_:)(v2);
  swift_bridgeObjectRelease();
  v3._uint64_t countAndFlagsBits = 41LL;
  v3._uint64_t object = (void *)0xE100000000000000LL;
  String.append(_:)(v3);
  return 0LL;
}

uint64_t PredicateExpressions.Value<A>.encode(to:)(void *a1)
{
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v2);
}

uint64_t PredicateExpressions.Value<A>.init(from:)@<X0>( void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v23 = a4;
  uint64_t v24 = *(void *)(a2 - 8);
  uint64_t v25 = a3;
  MEMORY[0x1895F8858](a1);
  uint64_t v27 = (char *)&v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = type metadata accessor for PredicateExpressions.Value(0LL, v8, v9, v10);
  uint64_t v12 = *(void *)(v11 - 8);
  MEMORY[0x1895F8858](v11);
  uint64_t v14 = (char *)&v19 - v13;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  dispatch thunk of Decoder.singleValueContainer()();
  if (!v4)
  {
    uint64_t v20 = v14;
    uint64_t v21 = v12;
    uint64_t v22 = v11;
    uint64_t v15 = v24;
    __swift_project_boxed_opaque_existential_1(v26, v26[3]);
    uint64_t v16 = v27;
    dispatch thunk of SingleValueDecodingContainer.decode<A>(_:)();
    uint64_t v17 = v20;
    (*(void (**)(char *, char *, uint64_t))(v15 + 32))(v20, v16, a2);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v26);
    (*(void (**)(uint64_t, char *, uint64_t))(v21 + 32))(v23, v17, v22);
  }

  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t protocol witness for Decodable.init(from:) in conformance <A> PredicateExpressions.Value<A>@<X0>( void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  return PredicateExpressions.Value<A>.init(from:)(a1, *(void *)(a2 + 16), *(void *)(a3 - 8), a4);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance <A> PredicateExpressions.Value<A>( void *a1)
{
  return PredicateExpressions.Value<A>.encode(to:)(a1);
}

uint64_t PredicateExpressions.Value.description.getter(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  v3._uint64_t countAndFlagsBits = _typeName(_:qualified:)();
  String.append(_:)(v3);
  swift_bridgeObjectRelease();
  v4._uint64_t countAndFlagsBits = 10302LL;
  v4._uint64_t object = (void *)0xE200000000000000LL;
  String.append(_:)(v4);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Any>);
  uint64_t v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_183720D90;
  *(void *)(v5 + 56) = v2;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)(v5 + 32));
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v2 - 8) + 16LL))(boxed_opaque_existential_1, v1, v2);
  debugPrint<A>(_:separator:terminator:to:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  v7._uint64_t countAndFlagsBits = 41LL;
  v7._uint64_t object = (void *)0xE100000000000000LL;
  String.append(_:)(v7);
  swift_bridgeObjectRelease();
  return 0x3C65756C6156LL;
}

BOOL static PredicateExpressions.KeyPath.CommonKeyPathKind.== infix(_:_:)( unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

void PredicateExpressions.KeyPath.CommonKeyPathKind.hash(into:)()
{
}

Swift::Int PredicateExpressions.KeyPath.CommonKeyPathKind.hashValue.getter()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance PredicateExpressions.KeyPath<A, B>.CommonKeyPathKind()
{
  return Hasher._finalize()();
}

uint64_t PredicateExpressions.KeyPath.kind.getter@<X0>(char *a1@<X8>)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t result = swift_conformsToProtocol2();
  if (result) {
    uint64_t v4 = AssociatedTypeWitness;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (v4) {
    return static PredicateExpressions.KeyPath.kind<A>(_:collectionType:)(a1);
  }
  *a1 = 4;
  return result;
}

uint64_t static PredicateExpressions.KeyPath.kind<A>(_:collectionType:)@<X0>(char *a1@<X8>)
{
  char v2 = dispatch thunk of static Equatable.== infix(_:_:)();
  swift_release();
  if ((v2 & 1) == 0)
  {
    swift_getKeyPath();
    swift_retain();
    char v3 = dispatch thunk of static Equatable.== infix(_:_:)();
    swift_release();
    uint64_t v4 = swift_release();
    if ((v3 & 1) == 0)
    {
      MEMORY[0x1895F8858](v4);
      swift_getKeyPath();
      swift_retain();
      char v5 = dispatch thunk of static Equatable.== infix(_:_:)();
      swift_release();
      swift_release();
      if ((v5 & 1) == 0)
      {
        swift_getKeyPath();
        swift_retain();
        char v7 = dispatch thunk of static Equatable.== infix(_:_:)();
        swift_release();
        swift_release();
        if ((v7 & 1) != 0) {
          goto LABEL_9;
        }
        swift_getKeyPath();
        swift_retain();
        char v8 = dispatch thunk of static Equatable.== infix(_:_:)();
        swift_release();
        uint64_t v9 = swift_release();
        if ((v8 & 1) != 0
          || (MEMORY[0x1895F8858](v9),
              swift_getKeyPath(),
              swift_retain(),
              char v10 = dispatch thunk of static Equatable.== infix(_:_:)(),
              swift_release(),
              uint64_t v11 = swift_release(),
              (v10 & 1) != 0))
        {
LABEL_9:
          uint64_t result = swift_release();
          char v12 = 1;
        }

        else
        {
          MEMORY[0x1895F8858](v11);
          swift_getKeyPath();
          swift_retain();
          char v13 = dispatch thunk of static Equatable.== infix(_:_:)();
          swift_release();
          uint64_t v14 = swift_release();
          if ((v13 & 1) != 0)
          {
            uint64_t result = swift_release();
            char v12 = 2;
          }

          else
          {
            MEMORY[0x1895F8858](v14);
            swift_getKeyPath();
            swift_retain();
            char v15 = dispatch thunk of static Equatable.== infix(_:_:)();
            swift_release();
            swift_release();
            if ((v15 & 1) != 0)
            {
              uint64_t result = swift_release();
              char v12 = 3;
            }

            else
            {
              uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
              if (swift_conformsToProtocol2()) {
                uint64_t v17 = AssociatedTypeWitness;
              }
              else {
                uint64_t v17 = 0LL;
              }
              if (v17)
              {
                static PredicateExpressions.KeyPath.kind<A, B>(_:hashableElementType:)(a1);
                return swift_release();
              }

              uint64_t result = swift_release();
              char v12 = 4;
            }
          }
        }

        *a1 = v12;
        return result;
      }
    }
  }

  uint64_t result = swift_release();
  *a1 = 0;
  return result;
}

uint64_t key path getter for String.count : String@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = String.count.getter();
  *a1 = result;
  return result;
}

uint64_t key path getter for Collection.count : Substring@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2 = Substring.distance(from:to:)();
  uint64_t result = swift_bridgeObjectRelease();
  *a1 = v2;
  return result;
}

uint64_t key path getter for Array.count : <A, B><A1>[A1.Element]@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3 = *a1;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t result = MEMORY[0x186E1BB20](v3, AssociatedTypeWitness);
  *a2 = result;
  return result;
}

void *key path getter for String.isEmpty : String@<X0>(void *result@<X0>, BOOL *a2@<X8>)
{
  unint64_t v2 = result[1];
  uint64_t v3 = *result & 0xFFFFFFFFFFFFLL;
  if ((v2 & 0x2000000000000000LL) != 0) {
    uint64_t v3 = HIBYTE(v2) & 0xF;
  }
  *a2 = v3 == 0;
  return result;
}

void *key path getter for Collection.isEmpty : Substring@<X0>(void *result@<X0>, BOOL *a2@<X8>)
{
  *a2 = (result[1] ^ *result) < 0x4000uLL;
  return result;
}

uint64_t key path getter for Collection.isEmpty : <A, B><A1>[A1.Element]@<X0>(_BYTE *a1@<X8>)
{
  uint64_t v2 = type metadata accessor for Array();
  MEMORY[0x186E20D4C](MEMORY[0x189618488], v2);
  uint64_t result = Collection.isEmpty.getter();
  *a1 = result & 1;
  return result;
}

uint64_t key path getter for Collection.first : <A, B><A1>[A1.Element]( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t))
{
  uint64_t v7 = type metadata accessor for Array();
  uint64_t v8 = MEMORY[0x186E20D4C](a4, v7);
  return a5(v7, v8);
}

uint64_t static PredicateExpressions.KeyPath.kind<A, B>(_:hashableElementType:)@<X0>(char *a1@<X8>)
{
  char v1 = dispatch thunk of static Equatable.== infix(_:_:)();
  uint64_t result = swift_release();
  if ((v1 & 1) != 0)
  {
    char v3 = 0;
  }

  else
  {
    MEMORY[0x1895F8858](result);
    swift_getKeyPath();
    char v4 = dispatch thunk of static Equatable.== infix(_:_:)();
    uint64_t result = swift_release();
    if ((v4 & 1) != 0) {
      char v3 = 1;
    }
    else {
      char v3 = 4;
    }
  }

  *a1 = v3;
  return result;
}

uint64_t type metadata accessor for PredicateExpressions.Variable.CodingKeys( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata( a1,  a2,  a3,  a4,  (uint64_t)&nominal type descriptor for PredicateExpressions.Variable.CodingKeys);
}

unint64_t lazy protocol witness table accessor for type PredicateExpressions.VariableID and conformance PredicateExpressions.VariableID()
{
  unint64_t result = lazy protocol witness table cache variable for type PredicateExpressions.VariableID and conformance PredicateExpressions.VariableID;
  if (!lazy protocol witness table cache variable for type PredicateExpressions.VariableID and conformance PredicateExpressions.VariableID)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for PredicateExpressions.VariableID,  &type metadata for PredicateExpressions.VariableID);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type PredicateExpressions.VariableID and conformance PredicateExpressions.VariableID);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type PredicateExpressions.VariableID and conformance PredicateExpressions.VariableID;
  if (!lazy protocol witness table cache variable for type PredicateExpressions.VariableID and conformance PredicateExpressions.VariableID)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for PredicateExpressions.VariableID,  &type metadata for PredicateExpressions.VariableID);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type PredicateExpressions.VariableID and conformance PredicateExpressions.VariableID);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type PredicateExpressions.VariableID and conformance PredicateExpressions.VariableID;
  if (!lazy protocol witness table cache variable for type PredicateExpressions.VariableID and conformance PredicateExpressions.VariableID)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for PredicateExpressions.VariableID,  &type metadata for PredicateExpressions.VariableID);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type PredicateExpressions.VariableID and conformance PredicateExpressions.VariableID);
  }

  return result;
}

uint64_t type metadata accessor for PredicateExpressions.KeyPath( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata( a1,  a2,  a3,  a4,  (uint64_t)&nominal type descriptor for PredicateExpressions.KeyPath);
}

void type metadata accessor for PredicateExpressions.KeyPath<>.CodingKeys()
{
}

uint64_t type metadata accessor for PredicateExpressions.Value( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata( a1,  a2,  a3,  a4,  (uint64_t)&nominal type descriptor for PredicateExpressions.Value);
}

uint64_t instantiation function for generic protocol witness table for PredicateExpressions.Variable<A>( void *a1, uint64_t a2)
{
  a1[1] = MEMORY[0x186E20D4C](&protocol conformance descriptor for PredicateExpressions.Variable<A>);
  a1[2] = MEMORY[0x186E20D4C](&protocol conformance descriptor for PredicateExpressions.Variable<A>, a2);
  uint64_t result = MEMORY[0x186E20D4C](&protocol conformance descriptor for PredicateExpressions.Variable<A>, a2);
  a1[3] = result;
  return result;
}

uint64_t instantiation function for generic protocol witness table for <> PredicateExpressions.KeyPath<A, B>( void *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = *a3;
  a1[1] = MEMORY[0x186E20D4C](&protocol conformance descriptor for PredicateExpressions.KeyPath<A, B>);
  uint64_t v7 = *(void *)(v5 + 16);
  uint64_t v6 = *(void *)(v5 + 24);
  v10[0] = v7;
  v10[1] = v6;
  a1[2] = MEMORY[0x186E20D4C](&protocol conformance descriptor for <> PredicateExpressions.KeyPath<A, B>, a2, v10);
  v9[0] = v7;
  v9[1] = v6;
  uint64_t result = MEMORY[0x186E20D4C](&protocol conformance descriptor for <> PredicateExpressions.KeyPath<A, B>, a2, v9);
  a1[3] = result;
  return result;
}

uint64_t instantiation function for generic protocol witness table for <A> PredicateExpressions.Value<A>( void *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = *a3;
  uint64_t v6 = a3[1];
  a1[1] = MEMORY[0x186E20D4C](&protocol conformance descriptor for PredicateExpressions.Value<A>);
  v9[0] = v5;
  v9[1] = v6;
  a1[2] = MEMORY[0x186E20D4C](&protocol conformance descriptor for <A> PredicateExpressions.Value<A>, a2, v9);
  v8[0] = v5;
  v8[1] = v6;
  uint64_t result = MEMORY[0x186E20D4C](&protocol conformance descriptor for <A> PredicateExpressions.Value<A>, a2, v8);
  a1[3] = result;
  return result;
}

void base witness table accessor for Equatable in PredicateExpressions.KeyPath<A, B>.CommonKeyPathKind()
{
}

uint64_t dispatch thunk of PredicateExpression.evaluate(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 16))();
}

uint64_t outlined copy of PredicateError._Error(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  if (a3 <= 2u) {
    return swift_bridgeObjectRetain();
  }
  return result;
}

ValueMetadata *type metadata accessor for PredicateError()
{
  return &type metadata for PredicateError;
}

ValueMetadata *type metadata accessor for PredicateExpressions.VariableID()
{
  return &type metadata for PredicateExpressions.VariableID;
}

uint64_t type metadata accessor for PredicateExpressions.Variable( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata( a1,  a2,  a3,  a4,  (uint64_t)&nominal type descriptor for PredicateExpressions.Variable);
}

uint64_t type metadata completion function for PredicateExpressions.KeyPath()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0LL;
  }

  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for PredicateExpressions.KeyPath( uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  char v4 = a1;
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8LL);
  uint64_t v6 = *(void *)(v5 + 64);
  int v7 = *(_DWORD *)(v5 + 80);
  if ((v7 & 0x1000F8) != 0 || ((v6 + 7) & 0xFFFFFFFFFFFFFFF8LL) + 8 > 0x18)
  {
    uint64_t v9 = *a2;
    *char v4 = *a2;
    char v4 = (uint64_t *)(v9 + ((unsigned __int16)((v7 & 0xF8) + 23) & (unsigned __int16)~(v7 & 0xF8) & 0x1F8));
  }

  else
  {
    (*(void (**)(uint64_t *, uint64_t *))(v5 + 16))(a1, a2);
    *(void *)(((unint64_t)v4 + v6 + 7) & 0xFFFFFFFFFFFFF8LL) = *(void *)(((unint64_t)a2 + v6 + 7) & 0xFFFFFFFFFFFFF8LL);
  }

  swift_retain();
  return v4;
}

uint64_t destroy for PredicateExpressions.KeyPath(uint64_t a1, uint64_t a2)
{
  return swift_release();
}

uint64_t initializeWithCopy for PredicateExpressions.KeyPath(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8LL);
  (*(void (**)(void))(v5 + 16))();
  *(void *)((*(void *)(v5 + 64) + 7LL + a1) & 0xFFFFFFFFFFFFF8LL) = *(void *)((*(void *)(v5 + 64) + 7LL + a2) & 0xFFFFFFFFFFFFF8LL);
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for PredicateExpressions.KeyPath(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8LL);
  (*(void (**)(void))(v5 + 24))();
  *(void *)((*(void *)(v5 + 64) + 7LL + a1) & 0xFFFFFFFFFFFFFFF8LL) = *(void *)((*(void *)(v5 + 64) + 7LL + a2) & 0xFFFFFFFFFFFFF8LL);
  swift_retain();
  swift_release();
  return a1;
}

uint64_t initializeWithTake for PredicateExpressions.KeyPath(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8LL);
  (*(void (**)(void))(v5 + 32))();
  *(void *)((*(void *)(v5 + 64) + 7LL + a1) & 0xFFFFFFFFFFFFF8LL) = *(void *)((*(void *)(v5 + 64) + 7LL + a2) & 0xFFFFFFFFFFFFF8LL);
  return a1;
}

uint64_t assignWithTake for PredicateExpressions.KeyPath(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8LL);
  (*(void (**)(void))(v5 + 40))();
  *(void *)((*(void *)(v5 + 64) + 7LL + a1) & 0xFFFFFFFFFFFFFFF8LL) = *(void *)((*(void *)(v5 + 64) + 7LL + a2) & 0xFFFFFFFFFFFFF8LL);
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for PredicateExpressions.KeyPath(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8LL);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  if (v5 <= 0x7FFFFFFF) {
    unsigned int v6 = 0x7FFFFFFF;
  }
  else {
    unsigned int v6 = *(_DWORD *)(v4 + 84);
  }
  if (!a2) {
    return 0LL;
  }
  uint64_t v7 = *(void *)(v4 + 64);
  if (v6 >= a2)
  {
    if (v5 < 0x7FFFFFFF)
    {
      unint64_t v12 = *(void *)((a1 + v7 + 7) & 0xFFFFFFFFFFFFF8LL);
      if (v12 >= 0xFFFFFFFF) {
        LODWORD(v12) = -1;
      }
      return (v12 + 1);
    }

    else
    {
      return (*(uint64_t (**)(void))(v4 + 48))();
    }
  }

  else
  {
    if (((((v7 + 7) & 0xFFFFFFFFFFFFFFF8LL) + 8) & 0xFFFFFFF8) != 0) {
      unsigned int v8 = 2;
    }
    else {
      unsigned int v8 = a2 - v6 + 1;
    }
    if (v8 >= 0x10000) {
      unsigned int v9 = 4;
    }
    else {
      unsigned int v9 = 2;
    }
    if (v8 < 0x100) {
      unsigned int v9 = 1;
    }
    if (v8 >= 2) {
      uint64_t v10 = v9;
    }
    else {
      uint64_t v10 = 0LL;
    }
    return ((uint64_t (*)(void))((char *)&loc_18308F8C4 + 4 * byte_18379E104[v10]))();
  }

void storeEnumTagSinglePayload for PredicateExpressions.KeyPath( unsigned int *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5 = *(void *)(*(void *)(a4 + 16) - 8LL);
  if (*(_DWORD *)(v5 + 84) <= 0x7FFFFFFFu) {
    unsigned int v6 = 0x7FFFFFFF;
  }
  else {
    unsigned int v6 = *(_DWORD *)(v5 + 84);
  }
  if (v6 >= a3)
  {
    int v9 = 0u;
    if (a2 <= v6) {
      goto LABEL_17;
    }
  }

  else
  {
    if (((*(_DWORD *)(v5 + 64) + 7) & 0xFFFFFFF8) == 0xFFFFFFF8) {
      unsigned int v7 = a3 - v6 + 1;
    }
    else {
      unsigned int v7 = 2;
    }
    if (v7 >= 0x10000) {
      int v8 = 4;
    }
    else {
      int v8 = 2;
    }
    if (v7 < 0x100) {
      int v8 = 1;
    }
    if (v7 >= 2) {
      int v9 = v8;
    }
    else {
      int v9 = 0;
    }
    if (a2 <= v6) {
LABEL_17:
    }
      __asm { BR              X12 }
  }

  if (((*(_DWORD *)(v5 + 64) + 7) & 0xFFFFFFF8) != 0xFFFFFFF8)
  {
    unsigned int v10 = ~v6 + a2;
    bzero(a1, ((*(void *)(v5 + 64) + 7LL) & 0xFFFFFFFFFFFFFFF8LL) + 8);
    *a1 = v10;
  }

  __asm { BR              X10 }

void sub_18308FA3C()
{
  *(_BYTE *)(v0 + v1) = v2;
  JUMPOUT(0x18308FAB0LL);
}

void sub_18308FA44(uint64_t a1, int a2)
{
  *(_DWORD *)(v2 + __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v2, v3) = 0;
  if (a2) {
    JUMPOUT(0x18308FA4CLL);
  }
  JUMPOUT(0x18308FAB0LL);
}

void sub_18308FA8C()
{
  *(_WORD *)(v0 + v1) = v2;
  JUMPOUT(0x18308FAB0LL);
}

void sub_18308FA94()
{
  *(_DWORD *)(v0 + v1) = v2;
  JUMPOUT(0x18308FAB0LL);
}

uint64_t sub_18308FA9C(uint64_t a1, int a2, unsigned int a3)
{
  *(_WORD *)(v5 + v6) = 0;
  if (!a2) {
    JUMPOUT(0x18308FAB0LL);
  }
  if (a3 < 0x7FFFFFFF)
  {
    if ((a2 & 0x80000000) == 0) {
      JUMPOUT(0x18308FAACLL);
    }
    JUMPOUT(0x18308FAA8LL);
  }

  return (*(uint64_t (**)(uint64_t))(v4 + 56))(v5);
}

uint64_t type metadata completion function for PredicateExpressions.Value()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0LL;
  }

  return result;
}

uint64_t getEnumTagSinglePayload for PredicateExpressions.Value(uint64_t a1, unsigned int a2, uint64_t a3)
{
  if (!a2) {
    return 0LL;
  }
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8LL);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  unsigned int v6 = a2 - v5;
  if (a2 <= v5) {
    goto LABEL_18;
  }
  uint64_t v7 = *(void *)(v4 + 64);
  char v8 = 8 * v7;
  if (v7 <= 3)
  {
    unsigned int v10 = ((v6 + ~(-1 << v8)) >> v8) + 1;
    if (HIWORD(v10))
    {
      int v9 = *(_DWORD *)(a1 + v7);
      if (!v9) {
        goto LABEL_18;
      }
      goto LABEL_11;
    }

    if (v10 > 0xFF)
    {
      int v9 = *(unsigned __int16 *)(a1 + v7);
      if (!*(_WORD *)(a1 + v7)) {
        goto LABEL_18;
      }
      goto LABEL_11;
    }

    if (v10 < 2)
    {
LABEL_18:
      if (v5) {
        return (*(uint64_t (**)(void))(v4 + 48))();
      }
      return 0LL;
    }
  }

  int v9 = *(unsigned __int8 *)(a1 + v7);
  if (!*(_BYTE *)(a1 + v7)) {
    goto LABEL_18;
  }
LABEL_11:
  int v11 = (v9 - 1) << v8;
  if (!(_DWORD)v7) {
    return v5 + v11 + 1;
  }
  return ((uint64_t (*)(void))((char *)&loc_18308FBE4 + 4 * byte_18379E113[(v7 - 1)]))();
}

void storeEnumTagSinglePayload for PredicateExpressions.Value( _WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8LL);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  size_t v8 = *(void *)(v6 + 64);
  BOOL v9 = a3 >= v7;
  unsigned int v10 = a3 - v7;
  if (v10 != 0 && v9)
  {
    if (v8 <= 3)
    {
      unsigned int v13 = ((v10 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v13))
      {
        unsigned int v11 = 4u;
      }

      else if (v13 >= 0x100)
      {
        unsigned int v11 = 2;
      }

      else
      {
        unsigned int v11 = v13 > 1;
      }
    }

    else
    {
      unsigned int v11 = 1u;
    }
  }

  else
  {
    unsigned int v11 = 0u;
  }

  if (v7 < a2)
  {
    unsigned int v12 = ~v7 + a2;
    if (v8 < 4)
    {
      if ((_DWORD)v8)
      {
        int v14 = v12 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if ((_DWORD)v8 == 3)
        {
          *a1 = v14;
          *((_BYTE *)a1 + 2) = BYTE2(v14);
        }

        else if ((_DWORD)v8 == 2)
        {
          *a1 = v14;
        }

        else
        {
          *(_BYTE *)a1 = v14;
        }
      }
    }

    else
    {
      bzero(a1, *(void *)(v6 + 64));
      *(_DWORD *)a1 = v12;
    }

    __asm { BR              X10 }
  }

  __asm { BR              X11 }

uint64_t storeEnumTagSinglePayload for PredicateExpressions.KeyPath.CommonKeyPathKind( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFC) {
    return ((uint64_t (*)(void))((char *)&loc_18308FE30 + 4 * byte_18379E126[v4]))();
  }
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_18308FE64 + 4 * byte_18379E121[v4]))();
}

uint64_t sub_18308FE64(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_18308FE6C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x18308FE74LL);
  }
  return result;
}

uint64_t sub_18308FE80(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x18308FE88LL);
  }
  *(_BYTE *)uint64_t result = a2 + 3;
  return result;
}

uint64_t sub_18308FE8C(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_18308FE94(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t type metadata accessor for PredicateExpressions.KeyPath.CommonKeyPathKind( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata( a1,  a2,  a3,  a4,  (uint64_t)&nominal type descriptor for PredicateExpressions.KeyPath.CommonKeyPathKind);
}

uint64_t destroy for PredicateError._Error(uint64_t a1)
{
  return outlined consume of PredicateError._Error(*(void *)a1, *(void *)(a1 + 8), *(_BYTE *)(a1 + 16));
}

uint64_t initializeBufferWithCopyOfBuffer for PredicateError(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  unsigned __int8 v5 = *(_BYTE *)(a2 + 16);
  outlined copy of PredicateError._Error(*(void *)a2, v4, v5);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = v5;
  return a1;
}

uint64_t assignWithCopy for PredicateError(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  unsigned __int8 v5 = *(_BYTE *)(a2 + 16);
  outlined copy of PredicateError._Error(*(void *)a2, v4, v5);
  uint64_t v6 = *(void *)a1;
  uint64_t v7 = *(void *)(a1 + 8);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  unsigned __int8 v8 = *(_BYTE *)(a1 + 16);
  *(_BYTE *)(a1 + 16) = v5;
  outlined consume of PredicateError._Error(v6, v7, v8);
  return a1;
}

uint64_t assignWithTake for PredicateError(uint64_t a1, uint64_t a2)
{
  char v3 = *(_BYTE *)(a2 + 16);
  uint64_t v4 = *(void *)a1;
  uint64_t v5 = *(void *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  unsigned __int8 v6 = *(_BYTE *)(a1 + 16);
  *(_BYTE *)(a1 + 16) = v3;
  outlined consume of PredicateError._Error(v4, v5, v6);
  return a1;
}

ValueMetadata *type metadata accessor for PredicateError._Error()
{
  return &type metadata for PredicateError._Error;
}

uint64_t storeEnumTagSinglePayload for PredicateExpressions.KeyPath<>.CodingKeys( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFE) {
    return ((uint64_t (*)(void))((char *)&loc_18308FFF8 + 4 * byte_18379E130[v4]))();
  }
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_18309002C + 4 * byte_18379E12B[v4]))();
}

uint64_t sub_18309002C(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_183090034(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x18309003CLL);
  }
  return result;
}

uint64_t sub_183090048(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x183090050LL);
  }
  *(_BYTE *)uint64_t result = a2 + 1;
  return result;
}

uint64_t sub_183090054(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_18309005C(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t storeEnumTagSinglePayload for PredicateExpressions.Variable.CodingKeys(uint64_t a1, int a2, int a3)
{
  else {
    int v3 = 2;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2) {
    return ((uint64_t (*)(void))((char *)sub_1830900A8 + 4 * byte_18379E135[v4]))();
  }
  else {
    return ((uint64_t (*)(void))((char *)sub_1830900C8 + 4 * byte_18379E13A[v4]))();
  }
}

_BYTE *sub_1830900A8(_BYTE *result, char a2)
{
  *uint64_t result = a2;
  return result;
}

_BYTE *sub_1830900C8(_BYTE *result)
{
  *uint64_t result = 0;
  return result;
}

_DWORD *sub_1830900D0(_DWORD *result, int a2)
{
  *uint64_t result = a2;
  return result;
}

_WORD *sub_1830900D8(_WORD *result, __int16 a2)
{
  *uint64_t result = a2;
  return result;
}

_WORD *sub_1830900E0(_WORD *result)
{
  *uint64_t result = 0;
  return result;
}

_DWORD *sub_1830900E8(_DWORD *result)
{
  *uint64_t result = 0;
  return result;
}

void base witness table accessor for Equatable in PredicateExpressions.Variable<A>.CodingKeys()
{
}

void base witness table accessor for Equatable in PredicateExpressions.KeyPath<A, B><>.CodingKeys()
{
}

unint64_t lazy protocol witness table accessor for type PredicateError._Error and conformance PredicateError._Error()
{
  unint64_t result = lazy protocol witness table cache variable for type PredicateError._Error and conformance PredicateError._Error;
  if (!lazy protocol witness table cache variable for type PredicateError._Error and conformance PredicateError._Error)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for PredicateError._Error,  &type metadata for PredicateError._Error);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type PredicateError._Error and conformance PredicateError._Error);
  }

  return result;
}

void base witness table accessor for CustomDebugStringConvertible in PredicateExpressions.KeyPath<A, B><>.CodingKeys()
{
}

void base witness table accessor for CustomStringConvertible in PredicateExpressions.KeyPath<A, B><>.CodingKeys()
{
}

void base witness table accessor for CustomDebugStringConvertible in PredicateExpressions.Variable<A>.CodingKeys()
{
}

void base witness table accessor for CustomStringConvertible in PredicateExpressions.Variable<A>.CodingKeys()
{
}

void specialized static PredicateError._Error.== infix(_:_:)(uint64_t a1, uint64_t a2, char a3)
{
  __asm { BR              X10 }

BOOL sub_1830901C0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6)
{
  if (a6) {
    return 0LL;
  }
  if (a2) {
    return a5 && (a1 == a4 && a2 == a5 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0);
  }
  if (!a5) {
    return 1LL;
  }
  outlined consume of PredicateError._Error(a1, 0LL, 0);
  return 0LL;
}

uint64_t sub_183090274@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = String.count.getter();
  *a1 = result;
  return result;
}

uint64_t sub_1830902F0()
{
  return 40LL;
}

__n128 sub_1830902FC(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a1;
  __int128 v3 = *(_OWORD *)(a1 + 16);
  *(void *)(a2 + 32) = *(void *)(a1 + 32);
  *(__n128 *)a2 = result;
  *(_OWORD *)(a2 + 16) = v3;
  return result;
}

void *sub_183090310@<X0>(void *result@<X0>, BOOL *a2@<X8>)
{
  unint64_t v2 = result[1];
  uint64_t v3 = *result & 0xFFFFFFFFFFFFLL;
  if ((v2 & 0x2000000000000000LL) != 0) {
    uint64_t v3 = HIBYTE(v2) & 0xF;
  }
  *a2 = v3 == 0;
  return result;
}

void *sub_183090334@<X0>(void *result@<X0>, BOOL *a2@<X8>)
{
  *a2 = (result[1] ^ *result) < 0x4000uLL;
  return result;
}

void sub_18309034C()
{
}

uint64_t sub_18309035C()
{
  return 40LL;
}

__n128 sub_183090368(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a1;
  __int128 v3 = *(_OWORD *)(a1 + 16);
  *(void *)(a2 + 32) = *(void *)(a1 + 32);
  *(__n128 *)a2 = result;
  *(_OWORD *)(a2 + 16) = v3;
  return result;
}

uint64_t sub_18309037C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return key path getter for Collection.first : <A, B><A1>[A1.Element]( a1,  a2,  a3,  MEMORY[0x189618488],  (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1896188D0]);
}

uint64_t sub_1830903A0()
{
  return 40LL;
}

__n128 sub_1830903AC(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a1;
  __int128 v3 = *(_OWORD *)(a1 + 16);
  *(void *)(a2 + 32) = *(void *)(a1 + 32);
  *(__n128 *)a2 = result;
  *(_OWORD *)(a2 + 16) = v3;
  return result;
}

void sub_1830903C0()
{
}

void get_witness_table_10Foundation19PredicateExpressionRzSlRd__r0__lSay7ElementQyd__GSlHPyHCTm()
{
}

uint64_t sub_183090420(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return key path getter for Collection.first : <A, B><A1>[A1.Element]( a1,  a2,  a3,  MEMORY[0x189618458],  (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x189617AF8]);
}

uint64_t sub_183090444()
{
  return 40LL;
}

__n128 sub_183090450(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a1;
  __int128 v3 = *(_OWORD *)(a1 + 16);
  *(void *)(a2 + 32) = *(void *)(a1 + 32);
  *(__n128 *)a2 = result;
  *(_OWORD *)(a2 + 16) = v3;
  return result;
}

uint64_t sub_183090464(uint64_t a1)
{
  return *(void *)(a1 + 48);
}

uint64_t sub_18309046C@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = Set.count.getter();
  *a1 = result;
  return result;
}

uint64_t sub_1830904A0()
{
  return 56LL;
}

__n128 sub_1830904AC(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a1;
  __int128 v3 = *(_OWORD *)(a1 + 16);
  __int128 v4 = *(_OWORD *)(a1 + 32);
  *(void *)(a2 + 48) = *(void *)(a1 + 48);
  *(_OWORD *)(a2 + 16) = v3;
  *(_OWORD *)(a2 + 32) = v4;
  *(__n128 *)a2 = result;
  return result;
}

uint64_t sub_1830904C8@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result = Set.isEmpty.getter();
  *a1 = result & 1;
  return result;
}

uint64_t sub_183090500()
{
  return 56LL;
}

__n128 sub_18309050C(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a1;
  __int128 v3 = *(_OWORD *)(a1 + 16);
  __int128 v4 = *(_OWORD *)(a1 + 32);
  *(void *)(a2 + 48) = *(void *)(a1 + 48);
  *(_OWORD *)(a2 + 16) = v3;
  *(_OWORD *)(a2 + 32) = v4;
  *(__n128 *)a2 = result;
  return result;
}

uint64_t PredicateExpressions.ConditionalCast.input.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a1 + 16) - 8LL) + 16LL))(a2, v2);
}

uint64_t PredicateExpressions.ConditionalCast.init(_:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(a2 - 8) + 32LL))(a3, a1);
}

uint64_t PredicateExpressions.ConditionalCast.evaluate(_:)@<X0>( uint64_t *a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v7 = a2[4];
  uint64_t v8 = a2[2];
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  MEMORY[0x1895F8858](AssociatedTypeWitness);
  uint64_t v13 = *a1;
  uint64_t result = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(v7 + 16))(&v13, v8, v7);
  if (!v3)
  {
    uint64_t v11 = a2[3];
    int v12 = swift_dynamicCast();
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v11 - 8) + 56LL))( a3,  v12 ^ 1u,  1LL,  v11);
  }

  return result;
}

uint64_t protocol witness for PredicateExpression.evaluate(_:) in conformance PredicateExpressions.ConditionalCast<A, B>@<X0>( uint64_t *a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  return PredicateExpressions.ConditionalCast.evaluate(_:)(a1, a2, a3);
}

uint64_t PredicateExpressions.ForceCast.evaluate(_:)@<X0>( unint64_t *a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v32 = a3;
  uint64_t v34 = a2[3];
  uint64_t v6 = type metadata accessor for Optional();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x1895F8858](v6);
  BOOL v9 = (char *)&v32 - v8;
  uint64_t v10 = a2[4];
  uint64_t v11 = a2[2];
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v38 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v12 = MEMORY[0x1895F8858](AssociatedTypeWitness);
  int v14 = (char *)&v32 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v12);
  unint64_t v15 = *a1;
  Swift::String v35 = (char *)&v32 - v16;
  unint64_t v36 = v15;
  uint64_t result = (*(uint64_t (**)(unint64_t *, uint64_t, uint64_t))(v10 + 16))(&v36, v11, v10);
  if (!v3)
  {
    uint64_t v18 = v32;
    uint64_t v19 = AssociatedTypeWitness;
    (*(void (**)(char *, char *, uint64_t))(v38 + 16))(v14, v35, AssociatedTypeWitness);
    uint64_t v20 = v34;
    char v21 = swift_dynamicCast();
    uint64_t v22 = *(void *)(v20 - 8);
    uint64_t v23 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v22 + 56);
    if ((v21 & 1) != 0)
    {
      v23(v9, 0LL, 1LL, v20);
      (*(void (**)(uint64_t, char *, uint64_t))(v22 + 32))(v18, v9, v20);
      return (*(uint64_t (**)(char *, uint64_t))(v38 + 8))(v35, v19);
    }

    else
    {
      v23(v9, 1LL, 1LL, v20);
      (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
      unint64_t v36 = 0LL;
      unint64_t v37 = 0xE000000000000000LL;
      _StringGuts.grow(_:)(41LL);
      swift_bridgeObjectRelease();
      unint64_t v36 = 0xD00000000000001ELL;
      unint64_t v37 = 0x80000001839CC000LL;
      uint64_t v24 = v35;
      swift_getDynamicType();
      v25._uint64_t countAndFlagsBits = _typeName(_:qualified:)();
      String.append(_:)(v25);
      swift_bridgeObjectRelease();
      v26._uint64_t countAndFlagsBits = 0x27206F742027LL;
      v26._uint64_t object = (void *)0xE600000000000000LL;
      String.append(_:)(v26);
      v27._uint64_t countAndFlagsBits = _typeName(_:qualified:)();
      String.append(_:)(v27);
      swift_bridgeObjectRelease();
      v28._uint64_t countAndFlagsBits = 39LL;
      v28._uint64_t object = (void *)0xE100000000000000LL;
      String.append(_:)(v28);
      unint64_t v29 = v36;
      unint64_t v30 = v37;
      lazy protocol witness table accessor for type PredicateError and conformance PredicateError();
      swift_allocError();
      *(void *)uint64_t v31 = v29;
      *(void *)(v31 + 8) = v30;
      *(_BYTE *)(v31 + 16) = 1;
      swift_willThrow();
      return (*(uint64_t (**)(char *, uint64_t))(v38 + 8))(v24, v19);
    }
  }

  return result;
}

uint64_t protocol witness for PredicateExpression.evaluate(_:) in conformance PredicateExpressions.ForceCast<A, B>@<X0>( unint64_t *a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  return PredicateExpressions.ForceCast.evaluate(_:)(a1, a2, a3);
}

uint64_t PredicateExpressions.TypeCheck.evaluate(_:)(uint64_t *a1, uint64_t a2)
{
  uint64_t v16 = *(void *)(a2 + 24);
  uint64_t v4 = *(void *)(v16 - 8);
  MEMORY[0x1895F8858](a1);
  uint64_t v6 = (char *)&v15 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = *(void *)(v7 + 32);
  uint64_t v9 = *(void *)(v7 + 16);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  char v11 = AssociatedTypeWitness;
  MEMORY[0x1895F8858](AssociatedTypeWitness);
  uint64_t v17 = *a1;
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(v8 + 16))(&v17, v9, v8);
  if (!v2)
  {
    uint64_t v12 = v16;
    int v13 = swift_dynamicCast();
    char v11 = v13;
    if (v13) {
      (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v12);
    }
  }

  return v11 & 1;
}

uint64_t protocol witness for PredicateExpression.evaluate(_:) in conformance PredicateExpressions.TypeCheck<A, B>@<X0>( uint64_t *a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result = PredicateExpressions.TypeCheck.evaluate(_:)(a1, a2);
  if (!v3) {
    *a3 = result & 1;
  }
  return result;
}

uint64_t PredicateExpressions.ConditionalCast.description.getter(int a1)
{
  return PredicateExpressions.ConditionalCast.description.getter( a1,  43LL,  0xD000000000000017LL,  (void *)0x80000001839CC020LL);
}

uint64_t PredicateExpressions.ForceCast.description.getter(int a1)
{
  return PredicateExpressions.ConditionalCast.description.getter( a1,  37LL,  0xD000000000000011LL,  (void *)0x80000001839CC040LL);
}

uint64_t PredicateExpressions.TypeCheck.description.getter(int a1)
{
  return PredicateExpressions.ConditionalCast.description.getter( a1,  37LL,  0xD000000000000011LL,  (void *)0x80000001839CC060LL);
}

uint64_t PredicateExpressions.ConditionalCast.description.getter(int a1, Swift::Int a2, uint64_t a3, void *a4)
{
  v6._uint64_t countAndFlagsBits = a3;
  v6._uint64_t object = a4;
  String.append(_:)(v6);
  _print_unlocked<A, B>(_:_:)();
  v7._uint64_t countAndFlagsBits = 0x657269736564202CLL;
  v7._uint64_t object = (void *)0xEF203A6570795464LL;
  String.append(_:)(v7);
  v8._uint64_t countAndFlagsBits = _typeName(_:qualified:)();
  String.append(_:)(v8);
  swift_bridgeObjectRelease();
  v9._uint64_t countAndFlagsBits = 41LL;
  v9._uint64_t object = (void *)0xE100000000000000LL;
  String.append(_:)(v9);
  return 0LL;
}

uint64_t PredicateExpressions.ConditionalCast<>.encode(to:)(void *a1)
{
  return PredicateExpressions.ConditionalCast<>.encode(to:)(a1);
}

{
  _BYTE v2[24];
  uint64_t v3;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  dispatch thunk of Encoder.singleValueContainer()();
  __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v2, v3);
  dispatch thunk of SingleValueEncodingContainer.encode<A>(_:)();
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v2);
}

uint64_t PredicateExpressions.ConditionalCast<>.init(from:)@<X0>( void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X4>, uint64_t a4@<X8>)
{
  return PredicateExpressions.ConditionalCast<>.init(from:)(a1, a2, a3, a4);
}

{
  uint64_t v4;
  uint64_t v7;
  uint64_t (*v8)(void);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void v24[4];
  char *v25;
  char v21 = a4;
  uint64_t v22 = *(void *)(a2 - 8);
  uint64_t v23 = a3;
  MEMORY[0x1895F8858](a1);
  Swift::String v25 = (char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  Swift::String v9 = v8(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x1895F8858](v9);
  uint64_t v12 = (char *)&v17 - v11;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  dispatch thunk of Decoder.singleValueContainer()();
  if (!v4)
  {
    uint64_t v18 = v12;
    uint64_t v19 = v10;
    uint64_t v20 = v9;
    int v13 = v22;
    __swift_project_boxed_opaque_existential_1(v24, v24[3]);
    int v14 = v25;
    dispatch thunk of SingleValueDecodingContainer.decode<A>(_:)();
    uint64_t v15 = v18;
    (*(void (**)(char *, char *, uint64_t))(v13 + 32))(v18, v14, a2);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v24);
    (*(void (**)(uint64_t, char *, uint64_t))(v19 + 32))(v21, v15, v20);
  }

  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t type metadata accessor for PredicateExpressions.ConditionalCast( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata( a1,  a2,  a3,  a4,  (uint64_t)&nominal type descriptor for PredicateExpressions.ConditionalCast);
}

uint64_t protocol witness for Decodable.init(from:) in conformance <> PredicateExpressions.ConditionalCast<A, B>@<X0>( void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  return PredicateExpressions.ConditionalCast<>.init(from:)(a1, *(void *)(a2 + 16), *(void *)(a3 - 8), a4);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance <> PredicateExpressions.ConditionalCast<A, B>( void *a1)
{
  return PredicateExpressions.ConditionalCast<>.encode(to:)(a1);
}

uint64_t PredicateExpressions.ForceCast<>.encode(to:)(void *a1)
{
  return PredicateExpressions.ConditionalCast<>.encode(to:)(a1);
}

uint64_t PredicateExpressions.ForceCast<>.init(from:)@<X0>( void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X4>, uint64_t a4@<X8>)
{
  return PredicateExpressions.ConditionalCast<>.init(from:)(a1, a2, a3, a4);
}

uint64_t type metadata accessor for PredicateExpressions.ForceCast( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata( a1,  a2,  a3,  a4,  (uint64_t)&nominal type descriptor for PredicateExpressions.ForceCast);
}

uint64_t protocol witness for Decodable.init(from:) in conformance <> PredicateExpressions.ForceCast<A, B>@<X0>( void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  return PredicateExpressions.ForceCast<>.init(from:)(a1, *(void *)(a2 + 16), *(void *)(a3 - 8), a4);
}

uint64_t PredicateExpressions.TypeCheck<>.encode(to:)(void *a1)
{
  return PredicateExpressions.ConditionalCast<>.encode(to:)(a1);
}

uint64_t PredicateExpressions.TypeCheck<>.init(from:)@<X0>( void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X4>, uint64_t a4@<X8>)
{
  return PredicateExpressions.ConditionalCast<>.init(from:)(a1, a2, a3, a4);
}

uint64_t type metadata accessor for PredicateExpressions.TypeCheck( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata( a1,  a2,  a3,  a4,  (uint64_t)&nominal type descriptor for PredicateExpressions.TypeCheck);
}

uint64_t instantiation function for generic protocol witness table for <> PredicateExpressions.ConditionalCast<A, B>( void *a1, uint64_t a2, uint64_t *a3)
{
  return instantiation function for generic protocol witness table for <> PredicateExpressions.ConditionalCast<A, B>( a1,  a2,  a3,  (uint64_t)&protocol conformance descriptor for PredicateExpressions.ConditionalCast<A, B>,  (uint64_t)&protocol conformance descriptor for <> PredicateExpressions.ConditionalCast<A, B>,  (uint64_t)&protocol conformance descriptor for <> PredicateExpressions.ConditionalCast<A, B>);
}

uint64_t instantiation function for generic protocol witness table for <> PredicateExpressions.ForceCast<A, B>( void *a1, uint64_t a2, uint64_t *a3)
{
  return instantiation function for generic protocol witness table for <> PredicateExpressions.ConditionalCast<A, B>( a1,  a2,  a3,  (uint64_t)&protocol conformance descriptor for PredicateExpressions.ForceCast<A, B>,  (uint64_t)&protocol conformance descriptor for <> PredicateExpressions.ForceCast<A, B>,  (uint64_t)&protocol conformance descriptor for <> PredicateExpressions.ForceCast<A, B>);
}

uint64_t instantiation function for generic protocol witness table for <> PredicateExpressions.ConditionalCast<A, B>( void *a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v10 = *a3;
  a1[1] = MEMORY[0x186E20D4C](a4);
  uint64_t v12 = *(void *)(v10 + 16);
  uint64_t v11 = *(void *)(v10 + 24);
  v15[0] = v12;
  v15[1] = v11;
  a1[2] = MEMORY[0x186E20D4C](a5, a2, v15);
  v14[0] = v12;
  v14[1] = v11;
  uint64_t result = MEMORY[0x186E20D4C](a6, a2, v14);
  a1[3] = result;
  return result;
}

uint64_t protocol witness for Decodable.init(from:) in conformance <> PredicateExpressions.TypeCheck<A, B>@<X0>( void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  return PredicateExpressions.TypeCheck<>.init(from:)(a1, *(void *)(a2 + 16), *(void *)(a3 - 8), a4);
}

uint64_t getEnumTagSinglePayload for PredicateExpressions.ConditionalCast( uint64_t a1, unsigned int a2, uint64_t a3)
{
  if (!a2) {
    return 0LL;
  }
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8LL);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  unsigned int v6 = a2 - v5;
  if (a2 <= v5) {
    goto LABEL_18;
  }
  uint64_t v7 = *(void *)(v4 + 64);
  char v8 = 8 * v7;
  if (v7 <= 3)
  {
    unsigned int v10 = ((v6 + ~(-1 << v8)) >> v8) + 1;
    if (HIWORD(v10))
    {
      int v9 = *(_DWORD *)(a1 + v7);
      if (!v9) {
        goto LABEL_18;
      }
      goto LABEL_11;
    }

    if (v10 > 0xFF)
    {
      int v9 = *(unsigned __int16 *)(a1 + v7);
      if (!*(_WORD *)(a1 + v7)) {
        goto LABEL_18;
      }
      goto LABEL_11;
    }

    if (v10 < 2)
    {
LABEL_18:
      if (v5) {
        return (*(uint64_t (**)(void))(v4 + 48))();
      }
      return 0LL;
    }
  }

  int v9 = *(unsigned __int8 *)(a1 + v7);
  if (!*(_BYTE *)(a1 + v7)) {
    goto LABEL_18;
  }
LABEL_11:
  int v11 = (v9 - 1) << v8;
  if (!(_DWORD)v7) {
    return v5 + v11 + 1;
  }
  return ((uint64_t (*)(void))((char *)&loc_183091150 + 4 * byte_18379EBF8[(v7 - 1)]))();
}

void storeEnumTagSinglePayload for PredicateExpressions.ConditionalCast( _WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8LL);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  size_t v8 = *(void *)(v6 + 64);
  BOOL v9 = a3 >= v7;
  unsigned int v10 = a3 - v7;
  if (v10 != 0 && v9)
  {
    if (v8 <= 3)
    {
      unsigned int v13 = ((v10 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v13))
      {
        unsigned int v11 = 4u;
      }

      else if (v13 >= 0x100)
      {
        unsigned int v11 = 2;
      }

      else
      {
        unsigned int v11 = v13 > 1;
      }
    }

    else
    {
      unsigned int v11 = 1u;
    }
  }

  else
  {
    unsigned int v11 = 0u;
  }

  if (v7 < a2)
  {
    unsigned int v12 = ~v7 + a2;
    if (v8 < 4)
    {
      if ((_DWORD)v8)
      {
        int v14 = v12 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if ((_DWORD)v8 == 3)
        {
          *a1 = v14;
          *((_BYTE *)a1 + 2) = BYTE2(v14);
        }

        else if ((_DWORD)v8 == 2)
        {
          *a1 = v14;
        }

        else
        {
          *(_BYTE *)a1 = v14;
        }
      }
    }

    else
    {
      bzero(a1, *(void *)(v6 + 64));
      *(_DWORD *)a1 = v12;
    }

    __asm { BR              X10 }
  }

  __asm { BR              X11 }

uint64_t protocol witness for Encodable.encode(to:) in conformance <> PredicateExpressions.ForceCast<A, B>( void *a1)
{
  return protocol witness for Encodable.encode(to:) in conformance <> PredicateExpressions.ConditionalCast<A, B>(a1);
}

uint64_t PersonNameComponents.init()@<X0>(uint64_t *a1@<X8>)
{
  id v2 = objc_msgSend(objc_allocWithZone((Class)NSPersonNameComponents), sel_init);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _MutableHandle<NSPersonNameComponents>);
  uint64_t result = swift_allocObject();
  *(void *)(result + 16) = v2;
  *a1 = result;
  return result;
}

void PersonNameComponents.init(namePrefix:givenName:middleName:familyName:nameSuffix:nickname:phoneticRepresentation:)( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t *a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t *a14)
{
  uint64_t v25 = *a14;
  id v21 = objc_msgSend(objc_allocWithZone((Class)NSPersonNameComponents), sel_init);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _MutableHandle<NSPersonNameComponents>);
  uint64_t v22 = swift_allocObject();
  *(void *)(v22 + 16) = v21;
  *a9 = v22;
  specialized PersonNameComponents.namePrefix.setter(a1, a2, (SEL *)&selRef_setNamePrefix_);
  swift_bridgeObjectRelease();
  specialized PersonNameComponents.namePrefix.setter(a3, a4, (SEL *)&selRef_setGivenName_);
  swift_bridgeObjectRelease();
  specialized PersonNameComponents.namePrefix.setter(a5, a6, (SEL *)&selRef_setMiddleName_);
  swift_bridgeObjectRelease();
  specialized PersonNameComponents.namePrefix.setter(a7, a8, (SEL *)&selRef_setFamilyName_);
  swift_bridgeObjectRelease();
  specialized PersonNameComponents.namePrefix.setter(a10, a11, (SEL *)&selRef_setNameSuffix_);
  swift_bridgeObjectRelease();
  specialized PersonNameComponents.namePrefix.setter(a12, a13, (SEL *)&selRef_setNickname_);
  swift_bridgeObjectRelease();
  uint64_t v26 = v25;
  PersonNameComponents.phoneticRepresentation.setter(&v26);
}

uint64_t PersonNameComponents.namePrefix.setter(uint64_t a1, uint64_t a2)
{
  return swift_bridgeObjectRelease();
}

uint64_t PersonNameComponents.givenName.setter(uint64_t a1, uint64_t a2)
{
  return swift_bridgeObjectRelease();
}

uint64_t PersonNameComponents.middleName.setter(uint64_t a1, uint64_t a2)
{
  return swift_bridgeObjectRelease();
}

uint64_t PersonNameComponents.familyName.setter(uint64_t a1, uint64_t a2)
{
  return swift_bridgeObjectRelease();
}

uint64_t PersonNameComponents.nameSuffix.setter(uint64_t a1, uint64_t a2)
{
  return swift_bridgeObjectRelease();
}

uint64_t PersonNameComponents.nickname.setter(uint64_t a1, uint64_t a2)
{
  return swift_bridgeObjectRelease();
}

void PersonNameComponents.phoneticRepresentation.setter(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    uint64_t v3 = *(void **)(*(void *)v1 + 16LL);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _MutableHandle<NSPersonNameComponents>);
    uint64_t v4 = swift_allocObject();
    id v5 = v3;
    objc_msgSend(v5, sel_copy);
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
    type metadata accessor for NSPersonNameComponents();
    swift_dynamicCast();
    *(void *)(v4 + 16) = v11;
    swift_release();
    *(void *)uint64_t v1 = v4;
  }

  uint64_t v6 = *(void **)(*(void *)v1 + 16LL);
  if (v2)
  {
    unsigned int v7 = *(void **)(v2 + 16);
    id v8 = v6;
    objc_msgSend(v7, sel_copy);
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
    type metadata accessor for NSPersonNameComponents();
    swift_dynamicCast();
    BOOL v9 = v11;
  }

  else
  {
    id v10 = v6;
    BOOL v9 = 0LL;
  }

  objc_msgSend(v6, sel_setPhoneticRepresentation_, v9);
  swift_release();
}

id PersonNameComponents.namePrefix.getter()
{
  return PersonNameComponents.namePrefix.getter((SEL *)&selRef_namePrefix);
}

uint64_t (*PersonNameComponents.namePrefix.modify(void *a1))(uint64_t *a1, char a2)
{
  a1[2] = v1;
  id v3 = *(id *)(*(void *)v1 + 16LL);
  id v4 = objc_msgSend(v3, sel_namePrefix);
  if (v4)
  {
    id v5 = v4;
    id v6 = static String._unconditionallyBridgeFromObjectiveC(_:)(v4);
    uint64_t v8 = v7;
  }

  else
  {

    id v6 = 0LL;
    uint64_t v8 = 0LL;
  }

  *a1 = v6;
  a1[1] = v8;
  return PersonNameComponents.namePrefix.modify;
}

uint64_t PersonNameComponents.namePrefix.modify(uint64_t *a1, char a2)
{
  return PersonNameComponents.namePrefix.modify(a1, a2, (SEL *)&selRef_setNamePrefix_);
}

id PersonNameComponents.givenName.getter()
{
  return PersonNameComponents.namePrefix.getter((SEL *)&selRef_givenName);
}

uint64_t key path setter for PersonNameComponents.namePrefix : PersonNameComponents( uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, SEL *a5)
{
  uint64_t v6 = *a1;
  uint64_t v7 = a1[1];
  swift_bridgeObjectRetain();
  specialized PersonNameComponents.namePrefix.setter(v6, v7, a5);
  return swift_bridgeObjectRelease();
}

uint64_t (*PersonNameComponents.givenName.modify(void *a1))(uint64_t *a1, char a2)
{
  a1[2] = v1;
  id v3 = *(id *)(*(void *)v1 + 16LL);
  id v4 = objc_msgSend(v3, sel_givenName);
  if (v4)
  {
    id v5 = v4;
    id v6 = static String._unconditionallyBridgeFromObjectiveC(_:)(v4);
    uint64_t v8 = v7;
  }

  else
  {

    id v6 = 0LL;
    uint64_t v8 = 0LL;
  }

  *a1 = v6;
  a1[1] = v8;
  return PersonNameComponents.givenName.modify;
}

uint64_t PersonNameComponents.givenName.modify(uint64_t *a1, char a2)
{
  return PersonNameComponents.namePrefix.modify(a1, a2, (SEL *)&selRef_setGivenName_);
}

uint64_t PersonNameComponents.namePrefix.modify(uint64_t *a1, char a2, SEL *a3)
{
  uint64_t v5 = *a1;
  uint64_t v4 = a1[1];
  if ((a2 & 1) != 0)
  {
    swift_bridgeObjectRetain();
    specialized PersonNameComponents.namePrefix.setter(v5, v4, a3);
    swift_bridgeObjectRelease();
  }

  else
  {
    specialized PersonNameComponents.namePrefix.setter(*a1, v4, a3);
  }

  return swift_bridgeObjectRelease();
}

id PersonNameComponents.middleName.getter()
{
  return PersonNameComponents.namePrefix.getter((SEL *)&selRef_middleName);
}

uint64_t (*PersonNameComponents.middleName.modify(void *a1))(uint64_t *a1, char a2)
{
  a1[2] = v1;
  id v3 = *(id *)(*(void *)v1 + 16LL);
  id v4 = objc_msgSend(v3, sel_middleName);
  if (v4)
  {
    uint64_t v5 = v4;
    id v6 = static String._unconditionallyBridgeFromObjectiveC(_:)(v4);
    uint64_t v8 = v7;
  }

  else
  {

    id v6 = 0LL;
    uint64_t v8 = 0LL;
  }

  *a1 = v6;
  a1[1] = v8;
  return PersonNameComponents.middleName.modify;
}

uint64_t PersonNameComponents.middleName.modify(uint64_t *a1, char a2)
{
  return PersonNameComponents.namePrefix.modify(a1, a2, (SEL *)&selRef_setMiddleName_);
}

id PersonNameComponents.familyName.getter()
{
  return PersonNameComponents.namePrefix.getter((SEL *)&selRef_familyName);
}

uint64_t (*PersonNameComponents.familyName.modify(void *a1))(uint64_t *a1, char a2)
{
  a1[2] = v1;
  id v3 = *(id *)(*(void *)v1 + 16LL);
  id v4 = objc_msgSend(v3, sel_familyName);
  if (v4)
  {
    uint64_t v5 = v4;
    id v6 = static String._unconditionallyBridgeFromObjectiveC(_:)(v4);
    uint64_t v8 = v7;
  }

  else
  {

    id v6 = 0LL;
    uint64_t v8 = 0LL;
  }

  *a1 = v6;
  a1[1] = v8;
  return PersonNameComponents.familyName.modify;
}

uint64_t PersonNameComponents.familyName.modify(uint64_t *a1, char a2)
{
  return PersonNameComponents.namePrefix.modify(a1, a2, (SEL *)&selRef_setFamilyName_);
}

id PersonNameComponents.nameSuffix.getter()
{
  return PersonNameComponents.namePrefix.getter((SEL *)&selRef_nameSuffix);
}

uint64_t (*PersonNameComponents.nameSuffix.modify(void *a1))(uint64_t *a1, char a2)
{
  a1[2] = v1;
  id v3 = *(id *)(*(void *)v1 + 16LL);
  id v4 = objc_msgSend(v3, sel_nameSuffix);
  if (v4)
  {
    uint64_t v5 = v4;
    id v6 = static String._unconditionallyBridgeFromObjectiveC(_:)(v4);
    uint64_t v8 = v7;
  }

  else
  {

    id v6 = 0LL;
    uint64_t v8 = 0LL;
  }

  *a1 = v6;
  a1[1] = v8;
  return PersonNameComponents.nameSuffix.modify;
}

uint64_t PersonNameComponents.nameSuffix.modify(uint64_t *a1, char a2)
{
  return PersonNameComponents.namePrefix.modify(a1, a2, (SEL *)&selRef_setNameSuffix_);
}

id PersonNameComponents.nickname.getter()
{
  return PersonNameComponents.namePrefix.getter((SEL *)&selRef_nickname);
}

id PersonNameComponents.namePrefix.getter(SEL *a1)
{
  id v3 = *(id *)(*(void *)v1 + 16LL);
  id v4 = [v3 *a1];
  if (v4)
  {
    uint64_t v5 = v4;
    id v6 = static String._unconditionallyBridgeFromObjectiveC(_:)(v4);
  }

  else
  {

    return 0LL;
  }

  return v6;
}

void key path getter for PersonNameComponents.namePrefix : PersonNameComponents( uint64_t a1@<X0>, SEL *a2@<X3>, void *a3@<X8>)
{
  id v5 = *(id *)(*(void *)a1 + 16LL);
  swift_retain();
  id v6 = [v5 *a2];
  if (v6)
  {
    uint64_t v7 = v6;
    id v8 = static String._unconditionallyBridgeFromObjectiveC(_:)(v6);
    uint64_t v10 = v9;
    swift_release();
  }

  else
  {
    swift_release();

    id v8 = 0LL;
    uint64_t v10 = 0LL;
  }

  *a3 = v8;
  a3[1] = v10;
}

uint64_t (*PersonNameComponents.nickname.modify(void *a1))(uint64_t *a1, char a2)
{
  a1[2] = v1;
  id v3 = *(id *)(*(void *)v1 + 16LL);
  id v4 = objc_msgSend(v3, sel_nickname);
  if (v4)
  {
    id v5 = v4;
    id v6 = static String._unconditionallyBridgeFromObjectiveC(_:)(v4);
    uint64_t v8 = v7;
  }

  else
  {

    id v6 = 0LL;
    uint64_t v8 = 0LL;
  }

  *a1 = v6;
  a1[1] = v8;
  return PersonNameComponents.nickname.modify;
}

uint64_t PersonNameComponents.nickname.modify(uint64_t *a1, char a2)
{
  return PersonNameComponents.namePrefix.modify(a1, a2, (SEL *)&selRef_setNickname_);
}

void PersonNameComponents.phoneticRepresentation.getter(uint64_t *a1@<X8>)
{
  id v3 = *(id *)(*(void *)v1 + 16LL);
  id v4 = objc_msgSend(v3, sel_phoneticRepresentation);
  if (v4)
  {
    id v5 = v4;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _MutableHandle<NSPersonNameComponents>);
    uint64_t v6 = swift_allocObject();
    objc_msgSend(v5, sel_copy);
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
    type metadata accessor for NSPersonNameComponents();
    swift_dynamicCast();
    *(void *)(v6 + 16) = v7;
  }

  else
  {

    uint64_t v6 = 0LL;
  }

  *a1 = v6;
}

uint64_t static PersonNameComponents._unconditionallyBridgeFromObjectiveC(_:)@<X0>( uint64_t result@<X0>, uint64_t *a2@<X8>)
{
  if (result)
  {
    uint64_t v2 = (void *)result;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _MutableHandle<NSPersonNameComponents>);
    uint64_t v4 = swift_allocObject();
    objc_msgSend(v2, sel_copy);
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
    type metadata accessor for NSPersonNameComponents();
    uint64_t result = swift_dynamicCast();
    *(void *)(v4 + 16) = v5;
    *a2 = v4;
  }

  else
  {
    __break(1u);
  }

  return result;
}

NSPersonNameComponents __swiftcall PersonNameComponents._bridgeToObjectiveC()()
{
  uint64_t v2 = v4;
  result._private = v1;
  result.super.isa = v2;
  return result;
}

void (*PersonNameComponents.phoneticRepresentation.modify(void *a1))(uint64_t a1, char a2)
{
  id v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[6] = v1;
  id v4 = *(id *)(*(void *)v1 + 16LL);
  id v5 = objc_msgSend(v4, sel_phoneticRepresentation);
  if (v5)
  {
    uint64_t v6 = v5;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _MutableHandle<NSPersonNameComponents>);
    uint64_t v7 = swift_allocObject();
    objc_msgSend(v6, sel_copy);
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
    type metadata accessor for NSPersonNameComponents();
    swift_dynamicCast();
    *(void *)(v7 + 16) = v3[5];
  }

  else
  {

    uint64_t v7 = 0LL;
  }

  v3[4] = v7;
  return PersonNameComponents.phoneticRepresentation.modify;
}

void PersonNameComponents.phoneticRepresentation.modify(uint64_t a1, char a2)
{
  uint64_t v2 = *(void **)a1;
  uint64_t v3 = *(void *)(*(void *)a1 + 32LL);
  if ((a2 & 1) != 0)
  {
    swift_retain();
    PersonNameComponents.phoneticRepresentation.setter(&v3);
    swift_release();
  }

  else
  {
    PersonNameComponents.phoneticRepresentation.setter(&v3);
  }

  free(v2);
}

void PersonNameComponents.hash(into:)()
{
  uint64_t v1 = *(void **)(*(void *)v0 + 16LL);
  swift_retain();
  id v2 = v1;
  NSObject.hash(into:)();
  swift_release();
}

id static PersonNameComponents.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  return objc_msgSend(*(id *)(*(void *)a1 + 16), sel_isEqual_, *(void *)(*(void *)a2 + 16));
}

Swift::Int PersonNameComponents.hashValue.getter()
{
  uint64_t v1 = *v0;
  Hasher.init(_seed:)();
  id v2 = *(void **)(v1 + 16);
  swift_retain();
  id v3 = v2;
  NSObject.hash(into:)();
  swift_release();

  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance PersonNameComponents()
{
  uint64_t v1 = *v0;
  Hasher.init(_seed:)();
  id v2 = *(void **)(v1 + 16);
  swift_retain();
  id v3 = v2;
  NSObject.hash(into:)();
  swift_release();

  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance PersonNameComponents()
{
  uint64_t v1 = *(void **)(*(void *)v0 + 16LL);
  swift_retain();
  id v2 = v1;
  NSObject.hash(into:)();
  swift_release();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance PersonNameComponents()
{
  uint64_t v1 = *v0;
  Hasher.init(_seed:)();
  id v2 = *(void **)(v1 + 16);
  swift_retain();
  id v3 = v2;
  NSObject.hash(into:)();
  swift_release();

  return Hasher._finalize()();
}

id protocol witness for static Equatable.== infix(_:_:) in conformance PersonNameComponents( uint64_t a1, uint64_t a2)
{
  return objc_msgSend(*(id *)(*(void *)a1 + 16), sel_isEqual_, *(void *)(*(void *)a2 + 16));
}

uint64_t PersonNameComponents.description.getter()
{
  uint64_t v107 = type metadata accessor for Mirror.AncestorRepresentation();
  uint64_t v105 = *(void *)(v107 - 8);
  MEMORY[0x1895F8858](v107);
  uint64_t v109 = (char *)&v104 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Mirror.DisplayStyle?);
  MEMORY[0x1895F8858](v2);
  id v4 = (char *)&v104 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v108 = type metadata accessor for Mirror();
  uint64_t v106 = *(void *)(v108 - 8);
  MEMORY[0x1895F8858](v108);
  uint64_t v6 = (char *)&v104 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = *v0;
  uint64_t v8 = *(void **)(*v0 + 16);
  swift_retain_n();
  id v9 = v8;
  id v10 = objc_msgSend(v9, sel_namePrefix);
  uint64_t v11 = MEMORY[0x189617FA8];
  if (v10)
  {
    unsigned int v12 = v10;
    id v13 = static String._unconditionallyBridgeFromObjectiveC(_:)(v10);
    uint64_t v15 = v14;
    swift_release();

    *((void *)&v114[0] + 1) = v11;
    *(void *)&__int128 v113 = v13;
    *((void *)&v113 + 1) = v15;
    __int128 v115 = xmmword_18379EF40;
    outlined init with take of Any(&v113, &v116);
    uint64_t v16 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  1LL,  1,  MEMORY[0x18961AFE8]);
    unint64_t v18 = v16[2];
    unint64_t v17 = v16[3];
    if (v18 >= v17 >> 1) {
      uint64_t v16 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (void *)(v17 > 1),  v18 + 1,  1,  v16);
    }
    void v16[2] = v18 + 1;
    uint64_t v19 = &v16[6 * v18];
    __int128 v20 = v115;
    __int128 v21 = v117;
    v19[3] = v116;
    void v19[4] = v21;
    void v19[2] = v20;
  }

  else
  {
    swift_release();

    uint64_t v16 = (void *)MEMORY[0x18961AFE8];
  }

  uint64_t v22 = *(void **)(v7 + 16);
  swift_retain();
  id v23 = v22;
  id v24 = objc_msgSend(v23, sel_givenName);
  if (v24)
  {
    uint64_t v25 = v24;
    id v26 = static String._unconditionallyBridgeFromObjectiveC(_:)(v24);
    uint64_t v28 = v27;
    swift_release();

    *((void *)&v114[0] + 1) = v11;
    *(void *)&__int128 v113 = v26;
    *((void *)&v113 + 1) = v28;
    __int128 v115 = xmmword_18379EF50;
    outlined init with take of Any(&v113, &v116);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v16 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  v16[2] + 1LL,  1,  v16);
    }
    unint64_t v30 = v16[2];
    unint64_t v29 = v16[3];
    if (v30 >= v29 >> 1) {
      uint64_t v16 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (void *)(v29 > 1),  v30 + 1,  1,  v16);
    }
    void v16[2] = v30 + 1;
    uint64_t v31 = &v16[6 * v30];
    __int128 v32 = v115;
    __int128 v33 = v117;
    v31[3] = v116;
    _BYTE v31[4] = v33;
    void v31[2] = v32;
  }

  else
  {
    swift_release();
  }

  uint64_t v34 = *(void **)(v7 + 16);
  swift_retain();
  id v35 = v34;
  id v36 = objc_msgSend(v35, sel_middleName);
  if (v36)
  {
    unint64_t v37 = v36;
    id v38 = static String._unconditionallyBridgeFromObjectiveC(_:)(v36);
    uint64_t v40 = v39;
    swift_release();

    *((void *)&v114[0] + 1) = v11;
    *(void *)&__int128 v113 = v38;
    *((void *)&v113 + 1) = v40;
    __int128 v115 = xmmword_18379EF60;
    outlined init with take of Any(&v113, &v116);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v16 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  v16[2] + 1LL,  1,  v16);
    }
    unint64_t v42 = v16[2];
    unint64_t v41 = v16[3];
    if (v42 >= v41 >> 1) {
      uint64_t v16 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (void *)(v41 > 1),  v42 + 1,  1,  v16);
    }
    void v16[2] = v42 + 1;
    uint64_t v43 = &v16[6 * v42];
    __int128 v44 = v115;
    __int128 v45 = v117;
    v43[3] = v116;
    v43[4] = v45;
    _OWORD v43[2] = v44;
  }

  else
  {
    swift_release();
  }

  Swift::String v46 = *(void **)(v7 + 16);
  swift_retain();
  id v47 = v46;
  id v48 = objc_msgSend(v47, sel_familyName);
  if (v48)
  {
    Swift::String v49 = v48;
    id v50 = static String._unconditionallyBridgeFromObjectiveC(_:)(v48);
    uint64_t v52 = v51;
    swift_release();

    *((void *)&v114[0] + 1) = v11;
    *(void *)&__int128 v113 = v50;
    *((void *)&v113 + 1) = v52;
    __int128 v115 = xmmword_18379EF70;
    outlined init with take of Any(&v113, &v116);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v16 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  v16[2] + 1LL,  1,  v16);
    }
    unint64_t v54 = v16[2];
    unint64_t v53 = v16[3];
    if (v54 >= v53 >> 1) {
      uint64_t v16 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (void *)(v53 > 1),  v54 + 1,  1,  v16);
    }
    void v16[2] = v54 + 1;
    Swift::String v55 = &v16[6 * v54];
    __int128 v56 = v115;
    __int128 v57 = v117;
    v55[3] = v116;
    v55[4] = v57;
    v55[2] = v56;
  }

  else
  {
    swift_release();
  }

  BOOL v58 = *(void **)(v7 + 16);
  swift_retain();
  id v59 = v58;
  id v60 = objc_msgSend(v59, sel_nameSuffix);
  if (v60)
  {
    uint64_t v61 = v60;
    id v62 = static String._unconditionallyBridgeFromObjectiveC(_:)(v60);
    uint64_t v64 = v63;
    swift_release();

    *((void *)&v114[0] + 1) = v11;
    *(void *)&__int128 v113 = v62;
    *((void *)&v113 + 1) = v64;
    __int128 v115 = xmmword_18379EF80;
    outlined init with take of Any(&v113, &v116);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v16 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  v16[2] + 1LL,  1,  v16);
    }
    unint64_t v66 = v16[2];
    unint64_t v65 = v16[3];
    if (v66 >= v65 >> 1) {
      uint64_t v16 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (void *)(v65 > 1),  v66 + 1,  1,  v16);
    }
    void v16[2] = v66 + 1;
    unint64_t v67 = &v16[6 * v66];
    __int128 v68 = v115;
    __int128 v69 = v117;
    __int128 v67[3] = v116;
    v67[4] = v69;
    void v67[2] = v68;
  }

  else
  {
    swift_release();
  }

  uint64_t v70 = *(void **)(v7 + 16);
  swift_retain();
  id v71 = v70;
  id v72 = objc_msgSend(v71, sel_nickname);
  if (v72)
  {
    uint64_t v73 = v72;
    id v74 = static String._unconditionallyBridgeFromObjectiveC(_:)(v72);
    uint64_t v76 = v75;
    swift_release();

    *((void *)&v114[0] + 1) = v11;
    *(void *)&__int128 v113 = v74;
    *((void *)&v113 + 1) = v76;
    __int128 v115 = xmmword_18379EF90;
    outlined init with take of Any(&v113, &v116);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v16 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  v16[2] + 1LL,  1,  v16);
    }
    unint64_t v78 = v16[2];
    unint64_t v77 = v16[3];
    if (v78 >= v77 >> 1) {
      uint64_t v16 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (void *)(v77 > 1),  v78 + 1,  1,  v16);
    }
    void v16[2] = v78 + 1;
    uint64_t v79 = &v16[6 * v78];
    __int128 v80 = v115;
    __int128 v81 = v117;
    v79[3] = v116;
    v79[4] = v81;
    v79[2] = v80;
  }

  else
  {
    swift_release();
  }

  uint64_t v82 = *(void **)(v7 + 16);
  swift_retain();
  id v83 = v82;
  id v84 = objc_msgSend(v83, sel_phoneticRepresentation);
  if (v84)
  {
    uint64_t v85 = v84;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _MutableHandle<NSPersonNameComponents>);
    uint64_t v86 = swift_allocObject();
    objc_msgSend(v85, sel_copy);
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
    type metadata accessor for NSPersonNameComponents();
    swift_dynamicCast();
    *(void *)(v86 + 16) = v113;
    swift_release();

    *((void *)&v114[0] + 1) = &type metadata for PersonNameComponents;
    *(void *)&__int128 v113 = v86;
    *(void *)&__int128 v115 = 0xD000000000000016LL;
    *((void *)&v115 + 1) = 0x80000001839CC080LL;
    outlined init with take of Any(&v113, &v116);
    swift_retain();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v16 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  v16[2] + 1LL,  1,  v16);
    }
    unint64_t v88 = v16[2];
    unint64_t v87 = v16[3];
    if (v88 >= v87 >> 1) {
      uint64_t v16 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (void *)(v87 > 1),  v88 + 1,  1,  v16);
    }
    void v16[2] = v88 + 1;
    uint64_t v89 = &v16[6 * v88];
    __int128 v90 = v115;
    __int128 v91 = v117;
    v89[3] = v116;
    v89[4] = v91;
    v89[2] = v90;
    swift_release();
  }

  else
  {
    swift_release();
  }

  *(void *)&__int128 v115 = v7;
  *(void *)&__int128 v113 = v16;
  uint64_t v92 = *MEMORY[0x18961A718];
  uint64_t v93 = type metadata accessor for Mirror.DisplayStyle();
  uint64_t v94 = *(void *)(v93 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v94 + 104))(v4, v92, v93);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v94 + 56))(v4, 0LL, 1LL, v93);
  (*(void (**)(char *, void, uint64_t))(v105 + 104))(v109, *MEMORY[0x18961A748], v107);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [(label: String?, value: Any)]);
  lazy protocol witness table accessor for type [(label: String?, value: Any)] and conformance [A]();
  Mirror.init<A, B>(_:children:displayStyle:ancestorRepresentation:)();
  uint64_t v95 = Mirror.children.getter();
  (*(void (**)(char *, uint64_t))(v106 + 8))(v6, v108);
  uint64_t v118 = 0LL;
  unint64_t v119 = 0xE000000000000000LL;
  swift_retain();
  dispatch thunk of _AnySequenceBox._makeIterator()();
  swift_release();
  dispatch thunk of _AnyIteratorBoxBase.next()();
  if (*((void *)&v117 + 1))
  {
    uint64_t v109 = (char *)v95;
    do
    {
      __int128 v113 = v115;
      v114[0] = v116;
      v114[1] = v117;
      v112._uint64_t countAndFlagsBits = 0LL;
      v112._uint64_t object = (void *)0xE000000000000000LL;
      __int128 v96 = v115;
      __int128 v110 = v115;
      outlined init with copy of Any((uint64_t)v114, (uint64_t)v111);
      if (*((void *)&v96 + 1)) {
        uint64_t v97 = v96;
      }
      else {
        uint64_t v97 = 0LL;
      }
      if (*((void *)&v96 + 1)) {
        unint64_t v98 = (void *)*((void *)&v96 + 1);
      }
      else {
        unint64_t v98 = (void *)0xE000000000000000LL;
      }
      swift_bridgeObjectRetain();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v111);
      v99._uint64_t countAndFlagsBits = v97;
      v99._uint64_t object = v98;
      String.append(_:)(v99);
      swift_bridgeObjectRelease();
      v100._uint64_t countAndFlagsBits = 8250LL;
      v100._uint64_t object = (void *)0xE200000000000000LL;
      String.append(_:)(v100);
      _print_unlocked<A, B>(_:_:)();
      v101._uint64_t countAndFlagsBits = 32LL;
      v101._uint64_t object = (void *)0xE100000000000000LL;
      String.append(_:)(v101);
      String.append(_:)(v112);
      swift_bridgeObjectRelease();
      outlined destroy of (label: String?, value: Any)((uint64_t)&v113);
      dispatch thunk of _AnyIteratorBoxBase.next()();
    }

    while (*((void *)&v117 + 1));
    uint64_t v102 = v118;
  }

  else
  {
    uint64_t v102 = 0LL;
  }

  swift_release();
  swift_release();
  return v102;
}

uint64_t PersonNameComponents.customMirror.getter@<X0>(uint64_t a1@<X8>)
{
  v96[1] = a1;
  uint64_t v2 = type metadata accessor for Mirror.AncestorRepresentation();
  v96[0] = *(void *)(v2 - 8);
  MEMORY[0x1895F8858](v2);
  id v4 = (char *)v96 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Mirror.DisplayStyle?);
  MEMORY[0x1895F8858](v5);
  uint64_t v7 = (char *)v96 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = *v1;
  id v9 = *(id *)(*v1 + 16);
  swift_retain();
  id v10 = objc_msgSend(v9, sel_namePrefix);
  uint64_t v11 = (ValueMetadata *)MEMORY[0x189617FA8];
  if (v10)
  {
    unsigned int v12 = v10;
    id v13 = static String._unconditionallyBridgeFromObjectiveC(_:)(v10);
    uint64_t v15 = v14;
    swift_release();

    Swift::String v101 = v11;
    *(void *)&__int128 v100 = v13;
    *((void *)&v100 + 1) = v15;
    __int128 v97 = xmmword_18379EF40;
    outlined init with take of Any(&v100, &v98);
    uint64_t v16 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  1LL,  1,  MEMORY[0x18961AFE8]);
    unint64_t v18 = v16[2];
    unint64_t v17 = v16[3];
    if (v18 >= v17 >> 1) {
      uint64_t v16 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (void *)(v17 > 1),  v18 + 1,  1,  v16);
    }
    void v16[2] = v18 + 1;
    uint64_t v19 = &v16[6 * v18];
    __int128 v20 = v97;
    __int128 v21 = v99;
    v19[3] = v98;
    void v19[4] = v21;
    void v19[2] = v20;
  }

  else
  {
    swift_release();

    uint64_t v16 = (void *)MEMORY[0x18961AFE8];
  }

  uint64_t v22 = *(void **)(v8 + 16);
  swift_retain();
  id v23 = v22;
  id v24 = objc_msgSend(v23, sel_givenName);
  if (v24)
  {
    uint64_t v25 = v24;
    id v26 = static String._unconditionallyBridgeFromObjectiveC(_:)(v24);
    uint64_t v28 = v27;
    swift_release();

    Swift::String v101 = v11;
    *(void *)&__int128 v100 = v26;
    *((void *)&v100 + 1) = v28;
    __int128 v97 = xmmword_18379EF50;
    outlined init with take of Any(&v100, &v98);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v16 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  v16[2] + 1LL,  1,  v16);
    }
    unint64_t v30 = v16[2];
    unint64_t v29 = v16[3];
    if (v30 >= v29 >> 1) {
      uint64_t v16 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (void *)(v29 > 1),  v30 + 1,  1,  v16);
    }
    void v16[2] = v30 + 1;
    uint64_t v31 = &v16[6 * v30];
    __int128 v32 = v97;
    __int128 v33 = v99;
    v31[3] = v98;
    _BYTE v31[4] = v33;
    void v31[2] = v32;
  }

  else
  {
    swift_release();
  }

  uint64_t v34 = *(void **)(v8 + 16);
  swift_retain();
  id v35 = v34;
  id v36 = objc_msgSend(v35, sel_middleName);
  if (v36)
  {
    unint64_t v37 = v36;
    id v38 = static String._unconditionallyBridgeFromObjectiveC(_:)(v36);
    uint64_t v40 = v39;
    swift_release();

    Swift::String v101 = v11;
    *(void *)&__int128 v100 = v38;
    *((void *)&v100 + 1) = v40;
    __int128 v97 = xmmword_18379EF60;
    outlined init with take of Any(&v100, &v98);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v16 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  v16[2] + 1LL,  1,  v16);
    }
    unint64_t v42 = v16[2];
    unint64_t v41 = v16[3];
    if (v42 >= v41 >> 1) {
      uint64_t v16 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (void *)(v41 > 1),  v42 + 1,  1,  v16);
    }
    void v16[2] = v42 + 1;
    uint64_t v43 = &v16[6 * v42];
    __int128 v44 = v97;
    __int128 v45 = v99;
    v43[3] = v98;
    v43[4] = v45;
    _OWORD v43[2] = v44;
  }

  else
  {
    swift_release();
  }

  Swift::String v46 = *(void **)(v8 + 16);
  swift_retain();
  id v47 = v46;
  id v48 = objc_msgSend(v47, sel_familyName);
  if (v48)
  {
    Swift::String v49 = v48;
    id v50 = static String._unconditionallyBridgeFromObjectiveC(_:)(v48);
    uint64_t v52 = v51;
    swift_release();

    Swift::String v101 = v11;
    *(void *)&__int128 v100 = v50;
    *((void *)&v100 + 1) = v52;
    __int128 v97 = xmmword_18379EF70;
    outlined init with take of Any(&v100, &v98);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v16 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  v16[2] + 1LL,  1,  v16);
    }
    unint64_t v54 = v16[2];
    unint64_t v53 = v16[3];
    if (v54 >= v53 >> 1) {
      uint64_t v16 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (void *)(v53 > 1),  v54 + 1,  1,  v16);
    }
    void v16[2] = v54 + 1;
    Swift::String v55 = &v16[6 * v54];
    __int128 v56 = v97;
    __int128 v57 = v99;
    v55[3] = v98;
    v55[4] = v57;
    v55[2] = v56;
  }

  else
  {
    swift_release();
  }

  BOOL v58 = *(void **)(v8 + 16);
  swift_retain();
  id v59 = v58;
  id v60 = objc_msgSend(v59, sel_nameSuffix);
  if (v60)
  {
    uint64_t v61 = v60;
    id v62 = static String._unconditionallyBridgeFromObjectiveC(_:)(v60);
    uint64_t v64 = v63;
    swift_release();

    Swift::String v101 = v11;
    *(void *)&__int128 v100 = v62;
    *((void *)&v100 + 1) = v64;
    __int128 v97 = xmmword_18379EF80;
    outlined init with take of Any(&v100, &v98);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v16 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  v16[2] + 1LL,  1,  v16);
    }
    unint64_t v66 = v16[2];
    unint64_t v65 = v16[3];
    if (v66 >= v65 >> 1) {
      uint64_t v16 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (void *)(v65 > 1),  v66 + 1,  1,  v16);
    }
    void v16[2] = v66 + 1;
    unint64_t v67 = &v16[6 * v66];
    __int128 v68 = v97;
    __int128 v69 = v99;
    __int128 v67[3] = v98;
    v67[4] = v69;
    void v67[2] = v68;
  }

  else
  {
    swift_release();
  }

  uint64_t v70 = *(void **)(v8 + 16);
  swift_retain();
  id v71 = v70;
  id v72 = objc_msgSend(v71, sel_nickname);
  if (v72)
  {
    uint64_t v73 = v72;
    id v74 = static String._unconditionallyBridgeFromObjectiveC(_:)(v72);
    uint64_t v76 = v75;
    swift_release();

    Swift::String v101 = v11;
    *(void *)&__int128 v100 = v74;
    *((void *)&v100 + 1) = v76;
    __int128 v97 = xmmword_18379EF90;
    outlined init with take of Any(&v100, &v98);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v16 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  v16[2] + 1LL,  1,  v16);
    }
    unint64_t v78 = v16[2];
    unint64_t v77 = v16[3];
    if (v78 >= v77 >> 1) {
      uint64_t v16 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (void *)(v77 > 1),  v78 + 1,  1,  v16);
    }
    void v16[2] = v78 + 1;
    uint64_t v79 = &v16[6 * v78];
    __int128 v80 = v97;
    __int128 v81 = v99;
    v79[3] = v98;
    v79[4] = v81;
    v79[2] = v80;
  }

  else
  {
    swift_release();
  }

  uint64_t v82 = *(void **)(v8 + 16);
  swift_retain();
  id v83 = v82;
  id v84 = objc_msgSend(v83, sel_phoneticRepresentation);
  if (v84)
  {
    uint64_t v85 = v84;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _MutableHandle<NSPersonNameComponents>);
    uint64_t v86 = swift_allocObject();
    objc_msgSend(v85, sel_copy);
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
    type metadata accessor for NSPersonNameComponents();
    swift_dynamicCast();
    *(void *)(v86 + 16) = v100;
    swift_release();

    Swift::String v101 = &type metadata for PersonNameComponents;
    *(void *)&__int128 v100 = v86;
    *(void *)&__int128 v97 = 0xD000000000000016LL;
    *((void *)&v97 + 1) = 0x80000001839CC080LL;
    outlined init with take of Any(&v100, &v98);
    swift_retain();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v16 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  v16[2] + 1LL,  1,  v16);
    }
    unint64_t v88 = v16[2];
    unint64_t v87 = v16[3];
    if (v88 >= v87 >> 1) {
      uint64_t v16 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (void *)(v87 > 1),  v88 + 1,  1,  v16);
    }
    void v16[2] = v88 + 1;
    uint64_t v89 = &v16[6 * v88];
    __int128 v90 = v97;
    __int128 v91 = v99;
    v89[3] = v98;
    v89[4] = v91;
    v89[2] = v90;
    swift_release();
  }

  else
  {
    swift_release();
  }

  *(void *)&__int128 v97 = v8;
  *(void *)&__int128 v100 = v16;
  uint64_t v92 = *MEMORY[0x18961A718];
  uint64_t v93 = type metadata accessor for Mirror.DisplayStyle();
  uint64_t v94 = *(void *)(v93 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v94 + 104))(v7, v92, v93);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v94 + 56))(v7, 0LL, 1LL, v93);
  (*(void (**)(char *, void, uint64_t))(v96[0] + 104LL))(v4, *MEMORY[0x18961A748], v2);
  swift_retain();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [(label: String?, value: Any)]);
  lazy protocol witness table accessor for type [(label: String?, value: Any)] and conformance [A]();
  return Mirror.init<A, B>(_:children:displayStyle:ancestorRepresentation:)();
}

uint64_t PersonNameComponents.debugDescription.getter()
{
  uint64_t v108 = type metadata accessor for Mirror.AncestorRepresentation();
  uint64_t v106 = *(void *)(v108 - 8);
  MEMORY[0x1895F8858](v108);
  uint64_t v2 = (char *)&v105 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Mirror.DisplayStyle?);
  MEMORY[0x1895F8858](v3);
  uint64_t v5 = (char *)&v105 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v109 = type metadata accessor for Mirror();
  uint64_t v107 = *(void *)(v109 - 8);
  MEMORY[0x1895F8858](v109);
  uint64_t v7 = (char *)&v105 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = *v0;
  id v9 = *(void **)(*v0 + 16);
  swift_retain_n();
  id v10 = v9;
  id v11 = objc_msgSend(v10, sel_namePrefix);
  uint64_t v12 = MEMORY[0x189617FA8];
  if (v11)
  {
    id v13 = v11;
    id v14 = static String._unconditionallyBridgeFromObjectiveC(_:)(v11);
    uint64_t v16 = v15;
    swift_release();

    *((void *)&v115[0] + 1) = v12;
    *(void *)&__int128 v114 = v14;
    *((void *)&v114 + 1) = v16;
    __int128 v116 = xmmword_18379EF40;
    outlined init with take of Any(&v114, &v117);
    unint64_t v17 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  1LL,  1,  MEMORY[0x18961AFE8]);
    unint64_t v19 = v17[2];
    unint64_t v18 = v17[3];
    if (v19 >= v18 >> 1) {
      unint64_t v17 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (void *)(v18 > 1),  v19 + 1,  1,  v17);
    }
    v17[2] = v19 + 1;
    __int128 v20 = &v17[6 * v19];
    __int128 v21 = v116;
    __int128 v22 = v118;
    void v20[3] = v117;
    v20[4] = v22;
    void v20[2] = v21;
  }

  else
  {
    swift_release();

    unint64_t v17 = (void *)MEMORY[0x18961AFE8];
  }

  id v23 = *(void **)(v8 + 16);
  swift_retain();
  id v24 = v23;
  id v25 = objc_msgSend(v24, sel_givenName);
  if (v25)
  {
    id v26 = v25;
    id v27 = static String._unconditionallyBridgeFromObjectiveC(_:)(v25);
    uint64_t v29 = v28;
    swift_release();

    *((void *)&v115[0] + 1) = v12;
    *(void *)&__int128 v114 = v27;
    *((void *)&v114 + 1) = v29;
    __int128 v116 = xmmword_18379EF50;
    outlined init with take of Any(&v114, &v117);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      unint64_t v17 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  v17[2] + 1LL,  1,  v17);
    }
    unint64_t v31 = v17[2];
    unint64_t v30 = v17[3];
    if (v31 >= v30 >> 1) {
      unint64_t v17 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (void *)(v30 > 1),  v31 + 1,  1,  v17);
    }
    v17[2] = v31 + 1;
    __int128 v32 = &v17[6 * v31];
    __int128 v33 = v116;
    __int128 v34 = v118;
    v32[3] = v117;
    v32[4] = v34;
    v32[2] = v33;
  }

  else
  {
    swift_release();
  }

  id v35 = *(void **)(v8 + 16);
  swift_retain();
  id v36 = v35;
  id v37 = objc_msgSend(v36, sel_middleName);
  if (v37)
  {
    id v38 = v37;
    id v39 = static String._unconditionallyBridgeFromObjectiveC(_:)(v37);
    uint64_t v41 = v40;
    swift_release();

    *((void *)&v115[0] + 1) = v12;
    *(void *)&__int128 v114 = v39;
    *((void *)&v114 + 1) = v41;
    __int128 v116 = xmmword_18379EF60;
    outlined init with take of Any(&v114, &v117);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      unint64_t v17 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  v17[2] + 1LL,  1,  v17);
    }
    unint64_t v43 = v17[2];
    unint64_t v42 = v17[3];
    if (v43 >= v42 >> 1) {
      unint64_t v17 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (void *)(v42 > 1),  v43 + 1,  1,  v17);
    }
    v17[2] = v43 + 1;
    __int128 v44 = &v17[6 * v43];
    __int128 v45 = v116;
    __int128 v46 = v118;
    v44[3] = v117;
    void v44[4] = v46;
    v44[2] = v45;
  }

  else
  {
    swift_release();
  }

  id v47 = *(void **)(v8 + 16);
  swift_retain();
  id v48 = v47;
  id v49 = objc_msgSend(v48, sel_familyName);
  if (v49)
  {
    id v50 = v49;
    id v51 = static String._unconditionallyBridgeFromObjectiveC(_:)(v49);
    uint64_t v53 = v52;
    swift_release();

    *((void *)&v115[0] + 1) = v12;
    *(void *)&__int128 v114 = v51;
    *((void *)&v114 + 1) = v53;
    __int128 v116 = xmmword_18379EF70;
    outlined init with take of Any(&v114, &v117);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      unint64_t v17 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  v17[2] + 1LL,  1,  v17);
    }
    unint64_t v55 = v17[2];
    unint64_t v54 = v17[3];
    if (v55 >= v54 >> 1) {
      unint64_t v17 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (void *)(v54 > 1),  v55 + 1,  1,  v17);
    }
    v17[2] = v55 + 1;
    __int128 v56 = &v17[6 * v55];
    __int128 v57 = v116;
    __int128 v58 = v118;
    v56[3] = v117;
    v56[4] = v58;
    v56[2] = v57;
  }

  else
  {
    swift_release();
  }

  id v59 = *(void **)(v8 + 16);
  swift_retain();
  id v60 = v59;
  id v61 = objc_msgSend(v60, sel_nameSuffix);
  if (v61)
  {
    id v62 = v61;
    id v63 = static String._unconditionallyBridgeFromObjectiveC(_:)(v61);
    uint64_t v65 = v64;
    swift_release();

    *((void *)&v115[0] + 1) = v12;
    *(void *)&__int128 v114 = v63;
    *((void *)&v114 + 1) = v65;
    __int128 v116 = xmmword_18379EF80;
    outlined init with take of Any(&v114, &v117);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      unint64_t v17 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  v17[2] + 1LL,  1,  v17);
    }
    unint64_t v67 = v17[2];
    unint64_t v66 = v17[3];
    if (v67 >= v66 >> 1) {
      unint64_t v17 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (void *)(v66 > 1),  v67 + 1,  1,  v17);
    }
    v17[2] = v67 + 1;
    __int128 v68 = &v17[6 * v67];
    __int128 v69 = v116;
    __int128 v70 = v118;
    v68[3] = v117;
    v68[4] = v70;
    v68[2] = v69;
  }

  else
  {
    swift_release();
  }

  id v71 = *(void **)(v8 + 16);
  swift_retain();
  id v72 = v71;
  id v73 = objc_msgSend(v72, sel_nickname);
  if (v73)
  {
    id v74 = v73;
    id v75 = static String._unconditionallyBridgeFromObjectiveC(_:)(v73);
    uint64_t v77 = v76;
    swift_release();

    *((void *)&v115[0] + 1) = v12;
    *(void *)&__int128 v114 = v75;
    *((void *)&v114 + 1) = v77;
    __int128 v116 = xmmword_18379EF90;
    outlined init with take of Any(&v114, &v117);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      unint64_t v17 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  v17[2] + 1LL,  1,  v17);
    }
    unint64_t v79 = v17[2];
    unint64_t v78 = v17[3];
    if (v79 >= v78 >> 1) {
      unint64_t v17 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (void *)(v78 > 1),  v79 + 1,  1,  v17);
    }
    v17[2] = v79 + 1;
    __int128 v80 = &v17[6 * v79];
    __int128 v81 = v116;
    __int128 v82 = v118;
    v80[3] = v117;
    v80[4] = v82;
    v80[2] = v81;
  }

  else
  {
    swift_release();
  }

  id v83 = *(void **)(v8 + 16);
  swift_retain();
  id v84 = v83;
  id v85 = objc_msgSend(v84, sel_phoneticRepresentation);
  uint64_t v110 = v8;
  if (v85)
  {
    uint64_t v86 = v85;
    uint64_t v105 = v7;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _MutableHandle<NSPersonNameComponents>);
    uint64_t v87 = swift_allocObject();
    objc_msgSend(v86, sel_copy);
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
    type metadata accessor for NSPersonNameComponents();
    swift_dynamicCast();
    *(void *)(v87 + 16) = v114;
    swift_release();

    *((void *)&v115[0] + 1) = &type metadata for PersonNameComponents;
    *(void *)&__int128 v114 = v87;
    *(void *)&__int128 v116 = 0xD000000000000016LL;
    *((void *)&v116 + 1) = 0x80000001839CC080LL;
    outlined init with take of Any(&v114, &v117);
    swift_retain();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      unint64_t v17 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  v17[2] + 1LL,  1,  v17);
    }
    unint64_t v89 = v17[2];
    unint64_t v88 = v17[3];
    uint64_t v8 = v110;
    if (v89 >= v88 >> 1) {
      unint64_t v17 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (void *)(v88 > 1),  v89 + 1,  1,  v17);
    }
    uint64_t v7 = v105;
    v17[2] = v89 + 1;
    __int128 v90 = &v17[6 * v89];
    __int128 v91 = v116;
    __int128 v92 = v118;
    v90[3] = v117;
    v90[4] = v92;
    v90[2] = v91;
    swift_release();
  }

  else
  {
    swift_release();
  }

  *(void *)&__int128 v116 = v8;
  *(void *)&__int128 v114 = v17;
  uint64_t v93 = *MEMORY[0x18961A718];
  uint64_t v94 = type metadata accessor for Mirror.DisplayStyle();
  uint64_t v95 = *(void *)(v94 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v95 + 104))(v5, v93, v94);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v95 + 56))(v5, 0LL, 1LL, v94);
  (*(void (**)(char *, void, uint64_t))(v106 + 104))(v2, *MEMORY[0x18961A748], v108);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [(label: String?, value: Any)]);
  lazy protocol witness table accessor for type [(label: String?, value: Any)] and conformance [A]();
  Mirror.init<A, B>(_:children:displayStyle:ancestorRepresentation:)();
  uint64_t v96 = Mirror.children.getter();
  (*(void (**)(char *, uint64_t))(v107 + 8))(v7, v109);
  uint64_t v119 = 0LL;
  unint64_t v120 = 0xE000000000000000LL;
  swift_retain();
  dispatch thunk of _AnySequenceBox._makeIterator()();
  swift_release();
  dispatch thunk of _AnyIteratorBoxBase.next()();
  if (*((void *)&v118 + 1))
  {
    uint64_t v109 = v96;
    do
    {
      __int128 v114 = v116;
      v115[0] = v117;
      v115[1] = v118;
      v113._uint64_t countAndFlagsBits = 0LL;
      v113._uint64_t object = (void *)0xE000000000000000LL;
      __int128 v98 = (void *)*((void *)&v116 + 1);
      uint64_t v97 = v116;
      __int128 v111 = v116;
      outlined init with copy of Any((uint64_t)v115, (uint64_t)v112);
      if (v98)
      {
        __int128 v99 = v98;
      }

      else
      {
        uint64_t v97 = 0LL;
        __int128 v99 = (void *)0xE000000000000000LL;
      }

      swift_bridgeObjectRetain();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v112);
      v100._uint64_t countAndFlagsBits = v97;
      v100._uint64_t object = v99;
      String.append(_:)(v100);
      swift_bridgeObjectRelease();
      v101._uint64_t countAndFlagsBits = 8250LL;
      v101._uint64_t object = (void *)0xE200000000000000LL;
      String.append(_:)(v101);
      _print_unlocked<A, B>(_:_:)();
      v102._uint64_t countAndFlagsBits = 32LL;
      v102._uint64_t object = (void *)0xE100000000000000LL;
      String.append(_:)(v102);
      String.append(_:)(v113);
      swift_bridgeObjectRelease();
      outlined destroy of (label: String?, value: Any)((uint64_t)&v114);
      dispatch thunk of _AnyIteratorBoxBase.next()();
    }

    while (*((void *)&v118 + 1));
    uint64_t v103 = v119;
  }

  else
  {
    uint64_t v103 = 0LL;
  }

  swift_release();
  swift_release();
  swift_release();
  return v103;
}

unint64_t static PersonNameComponents._getObjectiveCType()()
{
  return type metadata accessor for NSPersonNameComponents();
}

uint64_t static PersonNameComponents._forceBridgeFromObjectiveC(_:result:)(void *a1, uint64_t *a2)
{
  uint64_t v4 = swift_allocObject();
  objc_msgSend(a1, sel_copy);
  _bridgeAnyObjectToAny(_:)();
  swift_unknownObjectRelease();
  type metadata accessor for NSPersonNameComponents();
  uint64_t result = swift_dynamicCast();
  *(void *)(v4 + 16) = v6;
  *a2 = v4;
  return result;
}

uint64_t static PersonNameComponents._conditionallyBridgeFromObjectiveC(_:result:)(void *a1, uint64_t *a2)
{
  uint64_t v4 = swift_allocObject();
  objc_msgSend(a1, sel_copy);
  _bridgeAnyObjectToAny(_:)();
  swift_unknownObjectRelease();
  type metadata accessor for NSPersonNameComponents();
  swift_dynamicCast();
  *(void *)(v4 + 16) = v6;
  *a2 = v4;
  return 1LL;
}

uint64_t protocol witness for _ObjectiveCBridgeable._bridgeToObjectiveC() in conformance PersonNameComponents()
{
  return v2;
}

uint64_t protocol witness for static _ObjectiveCBridgeable._forceBridgeFromObjectiveC(_:result:) in conformance PersonNameComponents( void *a1, uint64_t *a2)
{
  uint64_t v4 = swift_allocObject();
  objc_msgSend(a1, sel_copy);
  _bridgeAnyObjectToAny(_:)();
  swift_unknownObjectRelease();
  type metadata accessor for NSPersonNameComponents();
  uint64_t result = swift_dynamicCast();
  *(void *)(v4 + 16) = v6;
  *a2 = v4;
  return result;
}

uint64_t protocol witness for static _ObjectiveCBridgeable._conditionallyBridgeFromObjectiveC(_:result:) in conformance PersonNameComponents( void *a1, uint64_t *a2)
{
  uint64_t v4 = swift_allocObject();
  objc_msgSend(a1, sel_copy);
  _bridgeAnyObjectToAny(_:)();
  swift_unknownObjectRelease();
  type metadata accessor for NSPersonNameComponents();
  swift_dynamicCast();
  *(void *)(v4 + 16) = v6;
  *a2 = v4;
  return 1LL;
}

uint64_t protocol witness for static _ObjectiveCBridgeable._unconditionallyBridgeFromObjectiveC(_:) in conformance PersonNameComponents@<X0>( uint64_t result@<X0>, uint64_t *a2@<X8>)
{
  if (result)
  {
    uint64_t v2 = (void *)result;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _MutableHandle<NSPersonNameComponents>);
    uint64_t v4 = swift_allocObject();
    objc_msgSend(v2, sel_copy);
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
    type metadata accessor for NSPersonNameComponents();
    uint64_t result = swift_dynamicCast();
    *(void *)(v4 + 16) = v5;
    *a2 = v4;
  }

  else
  {
    __break(1u);
  }

  return result;
}

uint64_t NSPersonNameComponents._toCustomAnyHashable()()
{
  uint64_t v1 = swift_allocObject();
  objc_msgSend(v0, sel_copy);
  _bridgeAnyObjectToAny(_:)();
  swift_unknownObjectRelease();
  type metadata accessor for NSPersonNameComponents();
  swift_dynamicCast();
  *(void *)(v1 + 16) = v3;
  lazy protocol witness table accessor for type PersonNameComponents and conformance PersonNameComponents();
  return AnyHashable.init<A>(_:)();
}

void protocol witness for _HasCustomAnyHashableRepresentation._toCustomAnyHashable() in conformance NSPersonNameComponents()
{
  id v1 = *v0;
  NSPersonNameComponents._toCustomAnyHashable()();
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance PersonNameComponents.CodingKeys()
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_18309467C + 4 * byte_18379EFA0[*v0]))( 0x66657250656D616ELL,  0xEA00000000007869LL);
}

uint64_t sub_18309467C()
{
  return 0x6D614E6E65766967LL;
}

uint64_t sub_183094698()
{
  return 0x614E656C6464696DLL;
}

uint64_t sub_1830946C4()
{
  return 0x66667553656D616ELL;
}

uint64_t sub_1830946D8()
{
  return 0x656D616E6B63696ELL;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance PersonNameComponents.CodingKeys@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result = specialized PersonNameComponents.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

unint64_t protocol witness for CodingKey.init(intValue:) in conformance PersonNameComponents.CodingKeys@<X0>( unint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result = specialized FloatingPointRoundingRule.CodingValue.init(rawValue:)(a1);
  *a2 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance PersonNameComponents.CodingKeys()
{
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PersonNameComponents.CodingKeys()
{
  return CodingKey.debugDescription.getter();
}

uint64_t PersonNameComponents.init(from:)@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v27 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<PersonNameComponents.CodingKeys>);
  uint64_t v5 = *(void *)(v27 - 8);
  MEMORY[0x1895F8858](v27);
  uint64_t v7 = (char *)&v26 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  id v8 = objc_msgSend(objc_allocWithZone((Class)NSPersonNameComponents), sel_init);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _MutableHandle<NSPersonNameComponents>);
  uint64_t v9 = swift_allocObject();
  *(void *)(v9 + 16) = v8;
  uint64_t v35 = v9;
  uint64_t v10 = a1[3];
  uint64_t v28 = a1;
  __swift_project_boxed_opaque_existential_1(a1, v10);
  lazy protocol witness table accessor for type PersonNameComponents.CodingKeys and conformance PersonNameComponents.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2)
  {
    swift_release();
  }

  else
  {
    uint64_t v11 = v5;
    char v34 = 0;
    uint64_t v12 = v27;
    uint64_t v13 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    specialized PersonNameComponents.namePrefix.setter(v13, v15, (SEL *)&selRef_setNamePrefix_);
    swift_bridgeObjectRelease();
    char v33 = 1;
    uint64_t v16 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    specialized PersonNameComponents.namePrefix.setter(v16, v17, (SEL *)&selRef_setGivenName_);
    swift_bridgeObjectRelease();
    char v32 = 2;
    uint64_t v18 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    specialized PersonNameComponents.namePrefix.setter(v18, v19, (SEL *)&selRef_setMiddleName_);
    swift_bridgeObjectRelease();
    char v31 = 3;
    uint64_t v20 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    specialized PersonNameComponents.namePrefix.setter(v20, v21, (SEL *)&selRef_setFamilyName_);
    swift_bridgeObjectRelease();
    char v30 = 4;
    uint64_t v22 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    specialized PersonNameComponents.namePrefix.setter(v22, v23, (SEL *)&selRef_setNameSuffix_);
    swift_bridgeObjectRelease();
    char v29 = 5;
    uint64_t v24 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    specialized PersonNameComponents.namePrefix.setter(v24, v25, (SEL *)&selRef_setNickname_);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v11 + 8))(v7, v12);
    *a2 = v35;
  }

  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v28);
}

uint64_t PersonNameComponents.encode(to:)(void *a1)
{
  uint64_t v3 = v2;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<PersonNameComponents.CodingKeys>);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1895F8858](v5);
  id v8 = (char *)&v34 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = *v1;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type PersonNameComponents.CodingKeys and conformance PersonNameComponents.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  id v10 = *(id *)(v9 + 16);
  swift_retain();
  id v11 = objc_msgSend(v10, sel_namePrefix);
  if (v11)
  {
    uint64_t v12 = v11;
    static String._unconditionallyBridgeFromObjectiveC(_:)(v11);
    swift_release();

    char v35 = 0;
    KeyedEncodingContainer.encode(_:forKey:)();
    if (v2) {
      goto LABEL_23;
    }
    swift_bridgeObjectRelease();
  }

  else
  {
    swift_release();
  }

  uint64_t v13 = *(void **)(v9 + 16);
  swift_retain();
  id v14 = v13;
  id v15 = objc_msgSend(v14, sel_givenName);
  if (v15)
  {
    uint64_t v16 = v15;
    static String._unconditionallyBridgeFromObjectiveC(_:)(v15);
    swift_release();

    char v36 = 1;
    KeyedEncodingContainer.encode(_:forKey:)();
    if (v3) {
      goto LABEL_23;
    }
    swift_bridgeObjectRelease();
  }

  else
  {
    swift_release();
  }

  uint64_t v17 = *(void **)(v9 + 16);
  swift_retain();
  id v18 = v17;
  id v19 = objc_msgSend(v18, sel_middleName);
  if (v19)
  {
    uint64_t v20 = v19;
    static String._unconditionallyBridgeFromObjectiveC(_:)(v19);
    swift_release();

    char v37 = 2;
    KeyedEncodingContainer.encode(_:forKey:)();
    if (v3) {
      goto LABEL_23;
    }
    swift_bridgeObjectRelease();
  }

  else
  {
    swift_release();
  }

  uint64_t v21 = *(void **)(v9 + 16);
  swift_retain();
  id v22 = v21;
  id v23 = objc_msgSend(v22, sel_familyName);
  if (v23)
  {
    uint64_t v24 = v23;
    static String._unconditionallyBridgeFromObjectiveC(_:)(v23);
    swift_release();

    char v38 = 3;
    KeyedEncodingContainer.encode(_:forKey:)();
    if (v3) {
      goto LABEL_23;
    }
    swift_bridgeObjectRelease();
  }

  else
  {
    swift_release();
  }

  uint64_t v25 = *(void **)(v9 + 16);
  swift_retain();
  id v26 = v25;
  id v27 = objc_msgSend(v26, sel_nameSuffix);
  if (v27)
  {
    uint64_t v28 = v27;
    static String._unconditionallyBridgeFromObjectiveC(_:)(v27);
    swift_release();

    char v39 = 4;
    KeyedEncodingContainer.encode(_:forKey:)();
    if (!v3)
    {
      swift_bridgeObjectRelease();
      goto LABEL_21;
    }

uint64_t protocol witness for Decodable.init(from:) in conformance PersonNameComponents@<X0>( void *a1@<X0>, uint64_t *a2@<X8>)
{
  return PersonNameComponents.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance PersonNameComponents(void *a1)
{
  return PersonNameComponents.encode(to:)(a1);
}

void specialized PersonNameComponents.namePrefix.setter(uint64_t a1, uint64_t a2, SEL *a3)
{
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    uint64_t v6 = *(void **)(*(void *)v3 + 16LL);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _MutableHandle<NSPersonNameComponents>);
    uint64_t v7 = swift_allocObject();
    id v8 = v6;
    objc_msgSend(v8, sel_copy);
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
    type metadata accessor for NSPersonNameComponents();
    swift_dynamicCast();
    *(void *)(v7 + 16) = v12;
    swift_release();
    *(void *)uint64_t v3 = v7;
  }

  uint64_t v9 = *(void **)(*(void *)v3 + 16LL);
  if (a2) {
    id v10 = (void *)String._bridgeToObjectiveCImpl()();
  }
  else {
    id v10 = 0LL;
  }
  id v11 = v9;
  objc_msgSend(v11, *a3, v10);
}

unint64_t type metadata accessor for NSPersonNameComponents()
{
  unint64_t result = lazy cache variable for type metadata for NSPersonNameComponents;
  if (!lazy cache variable for type metadata for NSPersonNameComponents)
  {
    objc_opt_self();
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for NSPersonNameComponents);
  }

  return result;
}

unint64_t lazy protocol witness table accessor for type PersonNameComponents and conformance PersonNameComponents()
{
  unint64_t result = lazy protocol witness table cache variable for type PersonNameComponents and conformance PersonNameComponents;
  if (!lazy protocol witness table cache variable for type PersonNameComponents and conformance PersonNameComponents)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for PersonNameComponents,  &type metadata for PersonNameComponents);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type PersonNameComponents and conformance PersonNameComponents);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type PersonNameComponents and conformance PersonNameComponents;
  if (!lazy protocol witness table cache variable for type PersonNameComponents and conformance PersonNameComponents)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for PersonNameComponents,  &type metadata for PersonNameComponents);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type PersonNameComponents and conformance PersonNameComponents);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type PersonNameComponents and conformance PersonNameComponents;
  if (!lazy protocol witness table cache variable for type PersonNameComponents and conformance PersonNameComponents)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for PersonNameComponents,  &type metadata for PersonNameComponents);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type PersonNameComponents and conformance PersonNameComponents);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type PersonNameComponents and conformance PersonNameComponents;
  if (!lazy protocol witness table cache variable for type PersonNameComponents and conformance PersonNameComponents)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for PersonNameComponents,  &type metadata for PersonNameComponents);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type PersonNameComponents and conformance PersonNameComponents);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type PersonNameComponents and conformance PersonNameComponents;
  if (!lazy protocol witness table cache variable for type PersonNameComponents and conformance PersonNameComponents)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for PersonNameComponents,  &type metadata for PersonNameComponents);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type PersonNameComponents and conformance PersonNameComponents);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type PersonNameComponents and conformance PersonNameComponents;
  if (!lazy protocol witness table cache variable for type PersonNameComponents and conformance PersonNameComponents)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for PersonNameComponents,  &type metadata for PersonNameComponents);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type PersonNameComponents and conformance PersonNameComponents);
  }

  return result;
}

unint64_t lazy protocol witness table accessor for type PersonNameComponents.CodingKeys and conformance PersonNameComponents.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type PersonNameComponents.CodingKeys and conformance PersonNameComponents.CodingKeys;
  if (!lazy protocol witness table cache variable for type PersonNameComponents.CodingKeys and conformance PersonNameComponents.CodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C](&protocol conformance descriptor for PersonNameComponents.CodingKeys, &unk_189C79830);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type PersonNameComponents.CodingKeys and conformance PersonNameComponents.CodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type PersonNameComponents.CodingKeys and conformance PersonNameComponents.CodingKeys;
  if (!lazy protocol witness table cache variable for type PersonNameComponents.CodingKeys and conformance PersonNameComponents.CodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C](&protocol conformance descriptor for PersonNameComponents.CodingKeys, &unk_189C79830);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type PersonNameComponents.CodingKeys and conformance PersonNameComponents.CodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type PersonNameComponents.CodingKeys and conformance PersonNameComponents.CodingKeys;
  if (!lazy protocol witness table cache variable for type PersonNameComponents.CodingKeys and conformance PersonNameComponents.CodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C](&protocol conformance descriptor for PersonNameComponents.CodingKeys, &unk_189C79830);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type PersonNameComponents.CodingKeys and conformance PersonNameComponents.CodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type PersonNameComponents.CodingKeys and conformance PersonNameComponents.CodingKeys;
  if (!lazy protocol witness table cache variable for type PersonNameComponents.CodingKeys and conformance PersonNameComponents.CodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C](&protocol conformance descriptor for PersonNameComponents.CodingKeys, &unk_189C79830);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type PersonNameComponents.CodingKeys and conformance PersonNameComponents.CodingKeys);
  }

  return result;
}

unint64_t instantiation function for generic protocol witness table for PersonNameComponents( void *a1)
{
  a1[1] = lazy protocol witness table accessor for type PersonNameComponents and conformance PersonNameComponents();
  a1[2] = lazy protocol witness table accessor for type PersonNameComponents and conformance PersonNameComponents();
  a1[3] = lazy protocol witness table accessor for type PersonNameComponents and conformance PersonNameComponents();
  unint64_t result = lazy protocol witness table accessor for type PersonNameComponents and conformance PersonNameComponents();
  a1[4] = result;
  return result;
}

unint64_t instantiation function for generic protocol witness table for PersonNameComponents( uint64_t a1)
{
  unint64_t result = lazy protocol witness table accessor for type PersonNameComponents and conformance PersonNameComponents();
  *(void *)(a1 + 8) = result;
  return result;
}

void sub_18309527C(uint64_t a1@<X0>, void *a2@<X8>)
{
}

uint64_t sub_183095298(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for PersonNameComponents.namePrefix : PersonNameComponents( a1,  a2,  a3,  a4,  (SEL *)&selRef_setNamePrefix_);
}

void sub_1830952B4(uint64_t a1@<X0>, void *a2@<X8>)
{
}

uint64_t sub_1830952D0(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for PersonNameComponents.namePrefix : PersonNameComponents( a1,  a2,  a3,  a4,  (SEL *)&selRef_setGivenName_);
}

void sub_1830952EC(uint64_t a1@<X0>, void *a2@<X8>)
{
}

uint64_t sub_183095308(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for PersonNameComponents.namePrefix : PersonNameComponents( a1,  a2,  a3,  a4,  (SEL *)&selRef_setMiddleName_);
}

void sub_183095324(uint64_t a1@<X0>, void *a2@<X8>)
{
}

uint64_t sub_183095340(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for PersonNameComponents.namePrefix : PersonNameComponents( a1,  a2,  a3,  a4,  (SEL *)&selRef_setFamilyName_);
}

void sub_18309535C(uint64_t a1@<X0>, void *a2@<X8>)
{
}

uint64_t sub_183095378(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for PersonNameComponents.namePrefix : PersonNameComponents( a1,  a2,  a3,  a4,  (SEL *)&selRef_setNameSuffix_);
}

void sub_183095394(uint64_t a1@<X0>, void *a2@<X8>)
{
}

uint64_t sub_1830953B0(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for PersonNameComponents.namePrefix : PersonNameComponents( a1,  a2,  a3,  a4,  (SEL *)&selRef_setNickname_);
}

void sub_1830953CC(void *a1@<X8>)
{
  *a1 = v2;
}

void sub_18309540C(uint64_t *a1)
{
  uint64_t v1 = *a1;
  swift_retain();
  PersonNameComponents.phoneticRepresentation.setter(&v1);
}

ValueMetadata *type metadata accessor for PersonNameComponents()
{
  return &type metadata for PersonNameComponents;
}

uint64_t storeEnumTagSinglePayload for PersonNameComponents.CodingKeys( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 5 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 5) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFB) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFA) {
    return ((uint64_t (*)(void))((char *)&loc_1830954A0 + 4 * byte_18379EFAB[v4]))();
  }
  *a1 = a2 + 5;
  return ((uint64_t (*)(void))((char *)sub_1830954D4 + 4 * byte_18379EFA6[v4]))();
}

uint64_t sub_1830954D4(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1830954DC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x1830954E4LL);
  }
  return result;
}

uint64_t sub_1830954F0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x1830954F8LL);
  }
  *(_BYTE *)unint64_t result = a2 + 5;
  return result;
}

uint64_t sub_1830954FC(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_183095504(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

void *type metadata accessor for PersonNameComponents.CodingKeys()
{
  return &unk_189C79830;
}

uint64_t specialized PersonNameComponents.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x66657250656D616ELL && a2 == 0xEA00000000007869LL;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0LL;
  }

  else if (a1 == 0x6D614E6E65766967LL && a2 == 0xE900000000000065LL {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1LL;
  }

  else if (a1 == 0x614E656C6464696DLL && a2 == 0xEA0000000000656DLL {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 2LL;
  }

  else if (a1 == 0x614E796C696D6166LL && a2 == 0xEA0000000000656DLL {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 3LL;
  }

  else if (a1 == 0x66667553656D616ELL && a2 == 0xEA00000000007869LL {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 4LL;
  }

  else if (a1 == 0x656D616E6B63696ELL && a2 == 0xE800000000000000LL)
  {
    swift_bridgeObjectRelease();
    return 5LL;
  }

  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0) {
      return 5LL;
    }
    else {
      return 6LL;
    }
  }

Swift::Void __swiftcall CalendarCache.State.check()()
{
  uint64_t NoteCount = _CFLocaleGetNoteCount();
  uint64_t v2 = _CFTimeZoneGetNoteCount();
  BOOL v3 = __OFADD__(NoteCount, v2);
  uint64_t v4 = NoteCount + v2;
  if (v3)
  {
    __break(1u);
    goto LABEL_8;
  }

  Midnightuint64_t NoteCount = _CFCalendarGetMidnightNoteCount();
  BOOL v3 = __OFADD__(v4, MidnightNoteCount);
  uint64_t v6 = v4 + MidnightNoteCount;
  if (v3)
  {
LABEL_8:
    __break(1u);
    return;
  }

  if (v6 != *(void *)(v0 + 32) || *(_BYTE *)(v0 + 40) == 1)
  {
    swift_unknownObjectRelease();
    *(void *)uint64_t v0 = 0LL;
    *(void *)(v0 + 8) = 0LL;
    swift_bridgeObjectRelease();
    *(void *)(v0 + 24) = MEMORY[0x18961AFF0];
    *(void *)(v0 + 32) = v6;
    *(_BYTE *)(v0 + 40) = 0;
  }

uint64_t CalendarCache.State.current()()
{
  __int16 v1 = v0;
  CalendarCache.State.check()();
  if (*v0)
  {
    uint64_t v2 = *v0;
  }

  else
  {
    if (one-time initialization token for cache != -1) {
      swift_once();
    }
    v17[0] = static LocaleCache.cache;
    LocaleCache.current.getter();
    uint64_t v4 = v3;
    uint64_t ObjectType = swift_getObjectType();
    (*(void (**)(void *__return_ptr, uint64_t, uint64_t))(v4 + 200))(v17, ObjectType, v4);
    swift_unknownObjectRelease();
    char v6 = v17[0];
    if (LOBYTE(v17[0]))
    {
      uint64_t v7 = type metadata accessor for _CalendarICU();
      id v8 = type metadata accessor for _CalendarICU;
      uint64_t v9 = (unint64_t *)&lazy protocol witness table cache variable for type _CalendarICU and conformance _CalendarICU;
      id v10 = &protocol conformance descriptor for _CalendarICU;
    }

    else
    {
      uint64_t v7 = type metadata accessor for _CalendarGregorian();
      id v8 = type metadata accessor for _CalendarGregorian;
      uint64_t v9 = (unint64_t *)&lazy protocol witness table cache variable for type _CalendarGregorian and conformance _CalendarGregorian;
      id v10 = &protocol conformance descriptor for _CalendarGregorian;
    }

    uint64_t v11 = lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( v9,  (uint64_t (*)(uint64_t))v8,  (uint64_t)v10);
    char v18 = v6;
    v17[0] = 0LL;
    v17[1] = 0LL;
    v16[0] = LocaleCache.current.getter();
    v16[1] = v12;
    uint64_t v14 = 0LL;
    char v15 = 1;
    uint64_t v2 = (*(uint64_t (**)(char *, void *, void *, void, uint64_t, void, uint64_t, uint64_t *, uint64_t, uint64_t))(v11 + 16))( &v18,  v17,  v16,  0LL,  1LL,  0LL,  1LL,  &v14,  v7,  v11);
    *__int16 v1 = v2;
    v1[1] = v11;
    swift_unknownObjectRetain();
  }

  swift_unknownObjectRetain();
  return v2;
}

uint64_t closure #1 in CalendarCache.reset()(uint64_t result)
{
  *(_BYTE *)(result + 40) = 1;
  return result;
}

uint64_t closure #1 in CalendarCache.current.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = CalendarCache.State.current()();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t closure #1 in CalendarCache.autoupdatingCurrent.getter@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3 = *(void *)(a1 + 16);
  if (v3)
  {
    uint64_t v4 = lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( &lazy protocol witness table cache variable for type _CalendarAutoupdating and conformance _CalendarAutoupdating,  (uint64_t (*)(uint64_t))type metadata accessor for _CalendarAutoupdating,  (uint64_t)&protocol conformance descriptor for _CalendarAutoupdating);
    uint64_t v5 = v3;
  }

  else
  {
    type metadata accessor for _CalendarAutoupdating();
    uint64_t v5 = swift_allocObject();
    *(void *)(a1 + 16) = v5;
    uint64_t v4 = lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( &lazy protocol witness table cache variable for type _CalendarAutoupdating and conformance _CalendarAutoupdating,  (uint64_t (*)(uint64_t))type metadata accessor for _CalendarAutoupdating,  (uint64_t)&protocol conformance descriptor for _CalendarAutoupdating);
    swift_retain();
  }

  *a2 = v5;
  a2[1] = v4;
  return swift_retain();
}

uint64_t closure #1 in CalendarCache.fixed(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  uint64_t v7 = *(void *)(a1 + 24);
  if (*(void *)(v7 + 16))
  {
    uint64_t v8 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
    if ((v9 & 1) != 0)
    {
      __int128 v48 = *(_OWORD *)(*(void *)(v7 + 56) + 16 * v8);
      uint64_t result = swift_unknownObjectRetain();
      __int128 v11 = v48;
LABEL_54:
      *a3 = v11;
      return result;
    }
  }

  id v49 = a3;
  if ((_BYTE)a2)
  {
    uint64_t v12 = type metadata accessor for _CalendarICU();
    uint64_t v13 = type metadata accessor for _CalendarICU;
    uint64_t v14 = (unint64_t *)&lazy protocol witness table cache variable for type _CalendarICU and conformance _CalendarICU;
    char v15 = &protocol conformance descriptor for _CalendarICU;
  }

  else
  {
    uint64_t v12 = type metadata accessor for _CalendarGregorian();
    uint64_t v13 = type metadata accessor for _CalendarGregorian;
    uint64_t v14 = (unint64_t *)&lazy protocol witness table cache variable for type _CalendarGregorian and conformance _CalendarGregorian;
    char v15 = &protocol conformance descriptor for _CalendarGregorian;
  }

  uint64_t v16 = lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( v14,  (uint64_t (*)(uint64_t))v13,  (uint64_t)v15);
  char v54 = a2;
  v53[0] = 0LL;
  v53[1] = 0LL;
  v52[0] = 0LL;
  v52[1] = 0LL;
  uint64_t v50 = 0LL;
  char v51 = 1;
  uint64_t v17 = (*(uint64_t (**)(char *, void *, void *, void, uint64_t, void, uint64_t, uint64_t *, uint64_t, uint64_t))(v16 + 16))( &v54,  v53,  v52,  0LL,  1LL,  0LL,  1LL,  &v50,  v12,  v16);
  swift_unknownObjectRetain();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v53[0] = *(void *)(a1 + 24);
  uint64_t v19 = v53[0];
  *(void *)(a1 + 24) = 0x8000000000000000LL;
  unint64_t v21 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  uint64_t v22 = *(void *)(v19 + 16);
  BOOL v23 = (v20 & 1) == 0;
  uint64_t v24 = v22 + v23;
  if (__OFADD__(v22, v23))
  {
    __break(1u);
    goto LABEL_16;
  }

  char v3 = v20;
  if (*(void *)(v19 + 24) >= v24)
  {
    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
    {
      uint64_t v25 = v19;
      if ((v20 & 1) == 0) {
        goto LABEL_51;
      }
LABEL_14:
      uint64_t v28 = (uint64_t *)(*(void *)(v25 + 56) + 16 * v21);
      swift_unknownObjectRelease();
      *uint64_t v28 = v17;
      v28[1] = v16;
LABEL_53:
      *(void *)(a1 + 24) = v25;
      uint64_t result = swift_bridgeObjectRelease();
      *(void *)&__int128 v11 = v17;
      *((void *)&v11 + 1) = v16;
      a3 = v49;
      goto LABEL_54;
    }

uint64_t CalendarCache.fixed(identifier:locale:timeZone:firstWeekday:minimumDaysInFirstWeek:gregorianStartDate:)( char *a1, __int128 *a2, __int128 *a3, uint64_t a4, char a5, uint64_t a6, char a7, uint64_t *a8)
{
  char v12 = *a1;
  __int128 v22 = *a3;
  __int128 v23 = *a2;
  uint64_t v13 = *a8;
  char v14 = *((_BYTE *)a8 + 8);
  if (*a1)
  {
    uint64_t v15 = type metadata accessor for _CalendarICU();
    uint64_t v16 = type metadata accessor for _CalendarICU;
    uint64_t v17 = (unint64_t *)&lazy protocol witness table cache variable for type _CalendarICU and conformance _CalendarICU;
    char v18 = &protocol conformance descriptor for _CalendarICU;
  }

  else
  {
    uint64_t v15 = type metadata accessor for _CalendarGregorian();
    uint64_t v16 = type metadata accessor for _CalendarGregorian;
    uint64_t v17 = (unint64_t *)&lazy protocol witness table cache variable for type _CalendarGregorian and conformance _CalendarGregorian;
    char v18 = &protocol conformance descriptor for _CalendarGregorian;
  }

  uint64_t v19 = lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( v17,  (uint64_t (*)(uint64_t))v16,  (uint64_t)v18);
  char v28 = v12;
  __int128 v26 = v23;
  __int128 v27 = v22;
  uint64_t v24 = v13;
  char v25 = v14;
  char v20 = *(uint64_t (**)(char *, __int128 *, __int128 *, uint64_t, void, uint64_t, void, uint64_t *, uint64_t, uint64_t))(v19 + 16);
  swift_unknownObjectRetain();
  swift_unknownObjectRetain();
  return v20(&v28, &v27, &v26, a4, a5 & 1, a6, a7 & 1, &v24, v15, v19);
}

ValueMetadata *type metadata accessor for CalendarCache()
{
  return &type metadata for CalendarCache;
}

uint64_t destroy for CalendarCache.State()
{
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for CalendarCache.State(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  uint64_t v3 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v3;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  swift_unknownObjectRetain();
  swift_retain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for CalendarCache.State(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_retain();
  swift_release();
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  return a1;
}

__n128 __swift_memcpy41_8(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  __int128 v3 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 25) = *(_OWORD *)(a2 + 25);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t assignWithTake for CalendarCache.State(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_release();
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  return a1;
}

uint64_t getEnumTagSinglePayload for CalendarCache.State(uint64_t a1, int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0 && *(_BYTE *)(a1 + 41)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 24);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for CalendarCache.State(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 40) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(_BYTE *)(result + 41) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 24) = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 41) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for CalendarCache.State()
{
  return &type metadata for CalendarCache.State;
}

uint64_t Duration.formatted<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v6[0] = a2;
  v6[1] = a3;
  return (*(uint64_t (**)(void *, uint64_t, uint64_t))(a5 + 48))(v6, a4, a5);
}

Swift::String __swiftcall Duration.formatted()()
{
  uint64_t v2 = v1;
  uint64_t v3 = v0;
  uint64_t v4 = type metadata accessor for Duration.TimeFormatStyle(0LL);
  MEMORY[0x1895F8858](v4);
  char v6 = (uint64_t *)((char *)&v23 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v7 = (char *)v6
  *char v6 = 0LL;
  uint64_t v8 = *MEMORY[0x189619F70];
  uint64_t v9 = type metadata accessor for FloatingPointRoundingRule();
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v9 - 8) + 104LL))(v7, v8, v9);
  type metadata accessor for Duration.TimeFormatStyle.Pattern.Fields(0LL);
  swift_storeEnumTagMultiPayload();
  id v10 = (char *)v6 + *(int *)(type metadata accessor for Duration.TimeFormatStyle.Pattern(0LL) + 20);
  *(void *)id v10 = 0LL;
  _BYTE v10[8] = 1;
  if (one-time initialization token for cache != -1) {
    swift_once();
  }
  uint64_t v11 = static LocaleCache.cache + 16;
  char v12 = (os_unfair_lock_s *)(static LocaleCache.cache + 124);
  swift_retain_n();
  os_unfair_lock_lock(v12);
  closure #1 in LocaleCache.autoupdatingCurrent.getter(v11, &v24);
  os_unfair_lock_unlock(v12);
  swift_release_n();
  uint64_t v13 = v24;
  unint64_t v14 = lazy protocol witness table accessor for type _LocaleAutoupdating and conformance _LocaleAutoupdating();
  uint64_t v15 = type metadata accessor for Duration.TimeFormatStyle.Attributed(0LL);
  *((_BYTE *)v6 + *(int *)(v15 + 20)) = 0;
  uint64_t v16 = (void *)((char *)v6 + *(int *)(v15 + 24));
  *uint64_t v16 = v13;
  v16[1] = v14;
  unint64_t v17 = Duration.TimeFormatStyle.format(_:)(v3, v2);
  uint64_t v19 = v18;
  outlined destroy of Duration.TimeFormatStyle((uint64_t)v6);
  uint64_t v20 = v17;
  unint64_t v21 = v19;
  result._uint64_t object = v21;
  result._uint64_t countAndFlagsBits = v20;
  return result;
}

uint64_t static Duration.bound(for:in:countingDown:roundingRule:)( uint64_t a1, void (*a2)(void, void, void), uint64_t a3, uint64_t a4, int a5, uint64_t a6)
{
  uint64_t v173 = a6;
  int v170 = a5;
  uint64_t v169 = type metadata accessor for FloatingPointRoundingRule();
  uint64_t v172 = *(void *)(v169 - 8);
  MEMORY[0x1895F8858](v169);
  uint64_t v160 = (char *)&v156 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v11);
  Swift::OpaquePointer v159 = (char *)&v156 - v12;
  MEMORY[0x1895F8858](v13);
  uint64_t v162 = (char *)&v156 - v14;
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (FloatingPointRoundingRule, Bool));
  MEMORY[0x1895F8858](v15);
  int v171 = (char *)&v156 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v17);
  uint64_t v163 = (char *)&v156 - v18;
  static Duration.zero.getter();
  uint64_t v19 = a3;
  uint64_t v20 = a4;
  if ((static Duration.< infix(_:_:)() & 1) != 0)
  {
    uint64_t v21 = static Duration.zero.getter();
    uint64_t v19 = MEMORY[0x186E1D11C](v21);
    uint64_t v20 = v22;
  }

  uint64_t v164 = a4;
  uint64_t v165 = a3;
  uint64_t v166 = v15;
  static Duration.zero.getter();
  uint64_t v23 = a1;
  uint64_t v24 = a2;
  if ((static Duration.< infix(_:_:)() & 1) != 0)
  {
    uint64_t v25 = static Duration.zero.getter();
    uint64_t v23 = MEMORY[0x186E1D11C](v25);
    uint64_t v24 = v26;
  }

  uint64_t v174 = a2;
  uint64_t v27 = Duration.components.getter();
  static Duration.zero.getter();
  if ((static Duration.< infix(_:_:)() & 1) != 0)
  {
    uint64_t v28 = static Duration.zero.getter();
    MEMORY[0x186E1D11C](v28);
  }

  uint64_t v29 = Duration.components.getter();
  unint64_t v31 = v30;
  if (!v29)
  {
    unint64_t v175 = (unint64_t)v30;
    lazy protocol witness table accessor for type Int64 and conformance Int64();
    uint64_t v32 = static Duration./ infix<A>(_:_:)();
    uint64_t v34 = v37;
    unint64_t v175 = (unint64_t)v31;
    uint64_t v35 = static Duration.* infix<A>(_:_:)();
    goto LABEL_23;
  }

  if (!v30)
  {
    uint64_t v38 = v29;
    if (v27 == 0x8000000000000000LL && v29 == -1) {
      goto LABEL_133;
    }
    uint64_t v39 = v27 / v29;
    uint64_t v32 = Duration.init(secondsComponent:attosecondsComponent:)();
    unint64_t v31 = v174;
    if ((unsigned __int128)(v38 * (__int128)v39) >> 64 == (v38 * v39) >> 63)
    {
      uint64_t v34 = v40;
      uint64_t v41 = Duration.init(secondsComponent:attosecondsComponent:)();
      uint64_t v43 = v42;
      goto LABEL_24;
    }

    __break(1u);
    goto LABEL_127;
  }

  if ((static Duration.< infix(_:_:)() & 1) == 0)
  {
    static Duration./ infix(_:_:)();
    if ((~*(void *)&v44 & 0x7FF0000000000000LL) != 0)
    {
      if (v44 > -1.0)
      {
        if (v44 < 1.84467441e19)
        {
          unint64_t v45 = (unint64_t)v44;
          unint64_t v175 = (unint64_t)v44;
          unint64_t v31 = (void (*)(void, void, void))lazy protocol witness table accessor for type UInt64 and conformance UInt64();
          uint64_t v46 = static Duration.* infix<A>(_:_:)();
          MEMORY[0x186E1D11C](v23, v24, v46, v47);
          static Duration./ infix(_:_:)();
          if ((~*(void *)&v48 & 0x7FF0000000000000LL) != 0)
          {
            if (v48 > -9.22337204e18)
            {
              if (v48 < 9.22337204e18)
              {
                uint64_t v49 = (uint64_t)v48;
                uint64_t v168 = (uint64_t)v48;
                Duration.init(secondsComponent:attosecondsComponent:)();
                unint64_t v175 = v45;
                uint64_t v161 = static Duration.* infix<A>(_:_:)();
                uint64_t v51 = v50;
                Duration.init(secondsComponent:attosecondsComponent:)();
                unint64_t v167 = v31;
                unint64_t v175 = v49;
                lazy protocol witness table accessor for type Int64 and conformance Int64();
                uint64_t v52 = static Duration.* infix<A>(_:_:)();
                uint64_t v54 = MEMORY[0x186E1D110](v161, v51, v52, v53);
                __int128 v56 = v55;
                unint64_t v175 = v45;
                uint64_t v57 = static Duration.* infix<A>(_:_:)();
                uint64_t v59 = v58;
                unint64_t v175 = v168;
                uint64_t v32 = v54;
                uint64_t v60 = static Duration.* infix<A>(_:_:)();
                uint64_t v62 = v61;
                uint64_t v63 = v59;
                uint64_t v34 = v56;
                uint64_t v35 = MEMORY[0x186E1D110](v57, v63, v60, v62);
                goto LABEL_23;
              }

              goto LABEL_132;
            }

void *Duration.valuesForUnits(_:trailingFractionalLength:smallestUnitRounding:roundingIncrement:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, uint64_t a6, uint64_t a7)
{
  uint64_t v14 = type metadata accessor for FloatingPointRoundingRule();
  MEMORY[0x1895F8858](v14);
  uint64_t v18 = (char *)&v126 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v19 = *(void *)(a1 + 16);
  if (!v19) {
    return (void *)MEMORY[0x18961AFE8];
  }
  unint64_t v20 = *(char *)(v19 + a1 + 31);
  uint64_t v135 = v15;
  uint64_t v136 = a3;
  int v133 = v18;
  uint64_t v134 = v16;
  if (v20 < 5)
  {
    static Duration.interval(fractionalSecondsLength:)(a2);
    unint64_t v137 = qword_18379F338[v20];
    lazy protocol witness table accessor for type Int64 and conformance Int64();
    uint64_t v30 = static Duration.* infix<A>(_:_:)();
    uint64_t v31 = v30;
    uint64_t v25 = v32;
    if ((a5 & 1) != 0)
    {
      uint64_t v23 = v30;
      goto LABEL_16;
    }

    uint64_t v26 = static Duration.* infix(_:_:)();
    uint64_t v28 = v33;
    uint64_t v23 = v31;
    goto LABEL_13;
  }

  if ((v20 - 5) >= 3u)
  {
LABEL_97:
    __break(1u);
    __break(1u);
    goto LABEL_98;
  }

  uint64_t v21 = 3LL * (v20 - 5) + 3;
  uint64_t v22 = v21 ^ 0x7FFFFFFFFFFFFFFFLL;
  if ((v21 ^ 0x7FFFFFFFFFFFFFFFLL) >= a2) {
    uint64_t v22 = a2;
  }
  if (__OFADD__(v21, v22)) {
    goto LABEL_88;
  }
  uint64_t v23 = static Duration.interval(fractionalSecondsLength:)(v21 + v22);
  uint64_t v25 = v24;
  if ((a5 & 1) == 0)
  {
    if ((v20 - 5) >= 3u)
    {
LABEL_98:
      __break(1u);
LABEL_99:
      __break(1u);
      JUMPOUT(0x18309824CLL);
    }

    uint64_t v26 = static Duration.* infix(_:_:)();
    uint64_t v28 = v27;
LABEL_13:
    if ((static Duration.< infix(_:_:)() & 1) == 0)
    {
      uint64_t v23 = v26;
      uint64_t v25 = v28;
    }
  }

uint64_t Duration.factor(intoUnits:)(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (v1)
  {
    swift_bridgeObjectRetain();
    uint64_t v3 = 0LL;
    uint64_t v4 = (void *)MEMORY[0x18961AFE8];
    while (1)
    {
      unint64_t v5 = *(char *)(a1 + v3 + 32);
      if (v5 <= 4)
      {
        uint64_t v12 = qword_18379F338[v5];
        uint64_t v13 = Duration.components.getter();
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  v4[2] + 1LL,  1,  v4);
        }
        unint64_t v15 = v4[2];
        unint64_t v14 = v4[3];
        if (v15 >= v14 >> 1) {
          uint64_t v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (void *)(v14 > 1),  v15 + 1,  1,  v4);
        }
        uint64_t v4[2] = v15 + 1;
        *(double *)&v4[v15 + 4] = (double)(v13 / v12);
        Duration.components.getter();
      }

      else
      {
        if ((v5 - 5) > 2u)
        {
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            uint64_t v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  v4[2] + 1LL,  1,  v4);
          }
          unint64_t v17 = v4[2];
          unint64_t v16 = v4[3];
          if (v17 >= v16 >> 1) {
            uint64_t v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (void *)(v16 > 1),  v17 + 1,  1,  v4);
          }
          uint64_t v4[2] = v17 + 1;
          v4[v17 + 4] = 0LL;
          goto LABEL_5;
        }

        uint64_t v6 = qword_18379F360[(char)(v5 - 5)];
        Duration.components.getter();
        double v8 = (double)(v7 / v6);
        if (Duration.components.getter())
        {
          uint64_t result = Duration.components.getter();
          if ((v5 - 5) > 2u)
          {
            __break(1u);
            return result;
          }

          double v8 = __exp10(dbl_18379F378[(char)(v5 - 5)]) * (double)result + v8;
        }

        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  v4[2] + 1LL,  1,  v4);
        }
        unint64_t v11 = v4[2];
        unint64_t v10 = v4[3];
        if (v11 >= v10 >> 1) {
          uint64_t v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (void *)(v10 > 1),  v11 + 1,  1,  v4);
        }
        uint64_t v4[2] = v11 + 1;
        *(double *)&v4[v11 + 4] = v8;
      }

      Duration.init(secondsComponent:attosecondsComponent:)();
LABEL_5:
      if (v1 == ++v3)
      {
        swift_bridgeObjectRelease();
        return (uint64_t)v4;
      }
    }
  }

  return MEMORY[0x18961AFE8];
}

uint64_t static Duration.interval(fractionalSecondsLength:)(uint64_t a1)
{
  uint64_t v1 = a1 % 3;
  if (!(a1 % 3))
  {
    if (a1 >= 1)
    {
      if ((unint64_t)a1 >= 7)
      {
        goto LABEL_18;
      }

      return 1000000000000LL;
    }

    return 1000000000000000000LL;
  }

  if (v1 == 2)
  {
    if (a1 >= 1)
    {
      if ((unint64_t)a1 >= 7)
      {
        goto LABEL_18;
      }

      return 10000000000000LL;
    }

    return 1000000000000000000LL;
  }

  if (v1 != 1)
  {
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }

  if (a1 < 1) {
    return 1000000000000000000LL;
  }
  if ((unint64_t)a1 > 9)
  {
LABEL_18:
    pow(0.1, (double)a1);
    return static Duration.seconds(_:)();
  }

  return 100000000000LL;
}

unint64_t lazy protocol witness table accessor for type _LocaleAutoupdating and conformance _LocaleAutoupdating()
{
  unint64_t result = lazy protocol witness table cache variable for type _LocaleAutoupdating and conformance _LocaleAutoupdating;
  if (!lazy protocol witness table cache variable for type _LocaleAutoupdating and conformance _LocaleAutoupdating)
  {
    uint64_t v1 = type metadata accessor for _LocaleAutoupdating();
    unint64_t result = MEMORY[0x186E20D4C](&protocol conformance descriptor for _LocaleAutoupdating, v1);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type _LocaleAutoupdating and conformance _LocaleAutoupdating);
  }

  return result;
}

{
  unint64_t result;
  uint64_t v1;
  unint64_t result = lazy protocol witness table cache variable for type _LocaleAutoupdating and conformance _LocaleAutoupdating;
  if (!lazy protocol witness table cache variable for type _LocaleAutoupdating and conformance _LocaleAutoupdating)
  {
    uint64_t v1 = type metadata accessor for _LocaleAutoupdating();
    unint64_t result = MEMORY[0x186E20D4C](&protocol conformance descriptor for _LocaleAutoupdating, v1);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type _LocaleAutoupdating and conformance _LocaleAutoupdating);
  }

  return result;
}

uint64_t outlined destroy of Duration.TimeFormatStyle(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for Duration.TimeFormatStyle(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

id specialized Measurement<>.converted(to:)@<X0>(id a1@<X1>, void *a2@<X0>, uint64_t a3@<X8>, double a4@<D0>)
{
  if ((objc_msgSend(a1, sel_isEqual_) & 1) == 0)
  {
    id v7 = objc_msgSend(a1, sel_converter);
    objc_msgSend(v7, sel_baseUnitValueFromValue_, a4);
    a4 = v8;

    swift_getObjectType();
    id v9 = objc_msgSend((id)swift_getObjCClassFromMetadata(), sel_baseUnit);
    LODWORD(v7) = objc_msgSend(a2, sel_isEqual_, v9);

    if (!(_DWORD)v7)
    {
      id v10 = objc_msgSend(a2, sel_converter);
      objc_msgSend(v10, sel_valueFromBaseUnitValue_, a4);
      a4 = v11;
    }
  }

  *(void *)a3 = a2;
  *(double *)(a3 + 8) = a4;
  return a2;
}

uint64_t Measurement<>.AttributedStyle.format(_:)@<X0>(void *a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v4 = v3;
  uint64_t v226 = a3;
  uint64_t v241 = 0LL;
  uint64_t v6 = *(void *)(a2 - 8);
  MEMORY[0x1895F8858](a1);
  id v225 = (char *)&v218 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v228 = v8;
  uint64_t v9 = *(void *)(v8 + 16);
  uint64_t v12 = type metadata accessor for Measurement<>.FormatStyle(0LL, v9, v10, v11);
  uint64_t v13 = *(void *)(v12 - 8);
  MEMORY[0x1895F8858](v12);
  unint64_t v15 = (char *)&v218 - v14;
  uint64_t v17 = a1[1];
  *(void *)&v255[0] = *a1;
  unint64_t v16 = *(void **)&v255[0];
  *((void *)&v255[0] + 1) = v17;
  type metadata accessor for Measurement(0LL, v9, v18, v19);
  id v20 = v16;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Measurement<NSUnitTemperature>);
  int v21 = swift_dynamicCast();
  uint64_t v22 = v6;
  uint64_t v224 = v6;
  uint64_t v240 = v4;
  id v227 = v20;
  if (!v21)
  {
    (*(void (**)(_BYTE *, uint64_t, uint64_t))(v13 + 16))(v15, v4, v12);
    id v72 = NSDimension.skeleton.getter();
    uint64_t v27 = v4;
    if (v73)
    {
      LOBYTE(v255[0]) = *v15;
      uint64_t v74 = *(int *)(v12 + 32);
      LOBYTE(v243) = v15[*(int *)(v12 + 36)];
      uint64_t v75 = (void *)static Measurement<>.FormatStyle.skeleton(_:width:usage:numberFormatStyle:)( (uint64_t)v72,  v73,  (unsigned __int8 *)v255,  (unsigned __int8 *)&v243,  (uint64_t)&v15[v74]);
      unint64_t v77 = v76;
      swift_bridgeObjectRelease();
      (*(void (**)(_BYTE *, uint64_t))(v13 + 8))(v15, v12);
      v255[0] = *(_OWORD *)(v4 + 8);
      swift_unknownObjectRetain();
      uint64_t v78 = specialized static ICUMeasurementNumberFormatter.create(for:locale:)(v75, v77, (uint64_t)v255);
      swift_unknownObjectRelease();
      uint64_t v79 = v241;
      if (v78)
      {
        ICUNumberFormatterBase.attributedFormatPositions(_:)(v17, 0LL, 0x100000000LL);
        if (v81)
        {
          uint64_t v83 = v80;
          uint64_t v84 = v81;
          uint64_t v85 = v82;
          unint64_t v221 = v77;
          swift_bridgeObjectRetain();
          *(void *)unint64_t v233 = v83;
          BigString.init(_:)();
          AttributedString.init(_:attributes:)(v253, MEMORY[0x18961AFF0], MEMORY[0x18961AFF8], (uint64_t *)v255);
          uint64_t v38 = *(void *)&v255[0];
          uint64_t v86 = *(void *)(v85 + 16);
          uint64_t v40 = v228;
          if (v86)
          {
            *(void *)&v233[8] = v84;
            int v220 = v78;
            uint64_t v230 = (__int128 *)((char *)&v243 + 8);
            int v231 = v256;
            swift_bridgeObjectRetain();
            int v232 = (_OWORD *)lazy protocol witness table accessor for type String and conformance String();
            uint64_t v219 = v85;
            uint64_t v87 = v85 + 48;
            id v222 = (id)0x80000001839CC1F0LL;
            unint64_t v223 = 0x80000001839CC230LL;
            do
            {
              uint64_t v241 = v79;
              uint64_t v238 = v87;
              uint64_t v239 = v86;
              uint64_t v88 = *(unsigned int *)(v87 - 16);
              uint64_t v90 = *(void *)v233;
              uint64_t v89 = *(void *)&v233[8];
              __int128 v243 = *(_OWORD *)v233;
              swift_bridgeObjectRetain();
              unint64_t v91 = String.Index.init<A>(utf16Offset:in:)();
              *(void *)&__int128 v243 = v90;
              *((void *)&v243 + 1) = v89;
              swift_bridgeObjectRetain();
              unint64_t v92 = String.Index.init<A>(utf16Offset:in:)();
              if (v92 >> 14 < v91 >> 14) {
                goto LABEL_128;
              }
              unint64_t v93 = v92;
              swift_retain();
              specialized Range<>.init<A>(_range:in:)(v91, v93, (_OWORD *)v38, (unint64_t *)&v243);
              uint64_t v94 = v245;
              if (v245 == 2) {
                goto LABEL_136;
              }
              uint64_t v234 = *((void *)&v243 + 1);
              uint64_t v235 = v243;
              *(void *)&v233[16] = v244;
              uint64_t v95 = v246;
              unint64_t v96 = v247;
              uint64_t v236 = v249;
              uint64_t v237 = v248;
              __int128 v252 = MEMORY[0x18961AFF0];
              char v97 = 0;
              char v98 = 2;
              switch((int)v88)
              {
                case 0:
                  goto LABEL_36;
                case 1:
                  char v97 = 1;
LABEL_36:
                  specialized AttributeContainer.subscript.setter( v97,  (uint64_t)&type metadata for AttributeScopes.FoundationAttributes.NumberFormatAttributes.NumberPartAttribute.NumberPart,  (uint64_t (*)(void))lazy protocol witness table accessor for type AttributeScopes.FoundationAttributes.NumberFormatAttributes.NumberPartAttribute.NumberPart and conformance AttributeScopes.FoundationAttributes.NumberFormatAttributes.NumberPartAttribute.NumberPart,  0xD00000000000001BLL,  (unint64_t)v222);
                  break;
                case 2:
                  goto LABEL_41;
                case 6:
                  char v98 = 0;
                  goto LABEL_41;
                case 7:
                  char v98 = 3;
                  goto LABEL_41;
                case 8:
                  char v98 = 4;
                  goto LABEL_41;
                case 10:
                  char v98 = 1;
LABEL_41:
                  specialized AttributeContainer.subscript.setter(v98);
                  break;
                default:
                  break;
              }

              AttributeScopes.FoundationAttributes.MeasurementAttribute.Component.init(unumberFormatField:)(v88, &v243);
              if (v243 != 2) {
                specialized AttributeContainer.subscript.setter( v243,  (uint64_t)&type metadata for AttributeScopes.FoundationAttributes.MeasurementAttribute.Component,  (uint64_t (*)(void))lazy protocol witness table accessor for type AttributeScopes.FoundationAttributes.MeasurementAttribute.Component and conformance AttributeScopes.FoundationAttributes.MeasurementAttribute.Component,  0xD00000000000001FLL,  v223);
              }
              __int128 v251 = v252;
              char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
              uint64_t v79 = v241;
              if ((isUniquelyReferenced_nonNull_native & 1) == 0)
              {
                __int128 v100 = *(_OWORD *)(v38 + 32);
                __int128 v271 = *(_OWORD *)(v38 + 16);
                __int128 v272 = v100;
                __int128 v273 = *(_OWORD *)(v38 + 48);
                uint64_t v101 = v95;
                uint64_t v102 = *(void *)(v38 + 64);
                uint64_t v103 = *(void *)(v38 + 72);
                unint64_t v229 = v96;
                uint64_t v104 = *(void *)(v38 + 80);
                uint64_t v105 = *(void *)(v38 + 88);
                type metadata accessor for AttributedString.Guts();
                swift_allocObject();
                outlined retain of Locale((uint64_t)&v271);
                swift_unknownObjectRetain();
                uint64_t v106 = v103;
                uint64_t v95 = v101;
                uint64_t v107 = v104;
                unint64_t v96 = v229;
                uint64_t v108 = v105;
                uint64_t v27 = v240;
                uint64_t v109 = AttributedString.Guts.init(string:runs:)(&v271, v102, v106, v107, v108);
                swift_release();
                uint64_t v38 = v109;
              }

              uint64_t v110 = v239;
              __int128 v111 = *(_OWORD *)(v38 + 32);
              __int128 v268 = *(_OWORD *)(v38 + 16);
              __int128 v269 = v111;
              __int128 v270 = *(_OWORD *)(v38 + 48);
              BigString.startIndex.getter();
              BigString.endIndex.getter();
              uint64_t v260 = v235;
              uint64_t v261 = v234;
              uint64_t v262 = *(void *)&v233[16];
              uint64_t v263 = v94;
              uint64_t v264 = v95;
              unint64_t v265 = v96;
              uint64_t v266 = v237;
              uint64_t v267 = v236;
              BigString.unicodeScalars.getter();
              swift_retain_n();
              BigString.UnicodeScalarView.subscript.getter();
              swift_release();
              outlined release of Locale((uint64_t)v254);
              outlined release of Locale((uint64_t)v255);
              unint64_t v113 = v230;
              uint64_t v112 = v231;
              __int128 v114 = *((_OWORD *)v231 + 1);
              _OWORD *v230 = *(_OWORD *)v231;
              v113[1] = v114;
              __int128 v115 = *((_OWORD *)v112 + 3);
              _OWORD v113[2] = *((_OWORD *)v112 + 2);
              v113[3] = v115;
              *(void *)&__int128 v243 = v38;
              if (one-time initialization token for currentIdentity != -1) {
                swift_once();
              }
              unint64_t v116 = (uint64_t *)(static AttributedString.currentIdentity + 16);
              uint64_t v117 = (os_unfair_lock_s *)(static AttributedString.currentIdentity + 24);
              swift_retain();
              os_unfair_lock_lock(v117);
              closure #1 in static AttributedString._nextModifyIdentity.getter(v116, &v242);
              os_unfair_lock_unlock(v117);
              swift_release();
              uint64_t v118 = v242;
              uint64_t v250 = v242;
              BigString.init()();
              uint64_t v242 = 0LL;
              MEMORY[0x186E20E78](&v242, 8LL);
              uint64_t v119 = v242;
              type metadata accessor for AttributedString.Guts();
              uint64_t v120 = swift_allocObject();
              if ((BigString.isEmpty.getter() & 1) == 0) {
                goto LABEL_130;
              }
              __int128 v121 = v258;
              *(_OWORD *)(v120 + 16) = v257;
              *(_OWORD *)(v120 + 32) = v121;
              *(_OWORD *)(v120 + 48) = v259;
              *(void *)(v120 + 64) = 0LL;
              *(void *)(v120 + 72) = 0LL;
              *(void *)(v120 + 80) = 0LL;
              *(void *)(v120 + 88) = v119;
              swift_release();
              LOBYTE(v242) = 0;
              AttributedSubstring.mergeAttributes(_:mergePolicy:)((uint64_t *)&v251, (char *)&v242);
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              if (v250 != v118) {
                goto LABEL_139;
              }
              uint64_t v87 = v238 + 24;
              uint64_t v38 = v243;
              swift_release();
              uint64_t v86 = v110 - 1;
            }

            while (v86);
            swift_bridgeObjectRelease();
            uint64_t v40 = v228;
          }

          swift_bridgeObjectRelease();
          swift_release();
          swift_bridgeObjectRelease();
          goto LABEL_120;
        }

        goto LABEL_122;
      }

      swift_bridgeObjectRelease();
    }

    else
    {
      (*(void (**)(_BYTE *, uint64_t))(v13 + 8))(v15, v12);
    }

    if ((Measurement<>.FormatStyle.shouldConvertToBestUnit.getter(v12) & 1) != 0)
    {
      *(void *)&v255[0] = v227;
      *((void *)&v255[0] + 1) = v17;
      uint64_t v122 = Measurement<>.FormatStyle.skeletonForUsage(_:)((uint64_t)v255, v12);
      if (v123)
      {
        uint64_t v125 = (void *)v122;
        uint64_t v126 = v123;
        uint64_t v127 = v124;
        v255[0] = *(_OWORD *)(v4 + 8);
        swift_unknownObjectRetain();
        uint64_t v128 = specialized static ICUMeasurementNumberFormatter.create(for:locale:)( v125,  (unint64_t)v126,  (uint64_t)v255);
        swift_unknownObjectRelease();
        if (v128)
        {
          ICUNumberFormatterBase.attributedFormatPositions(_:)(v127, 0LL, 0x100000000LL);
          if (v130)
          {
            uint64_t v132 = v129;
            uint64_t v133 = v130;
            uint64_t v134 = v131;
            swift_bridgeObjectRetain();
            *(void *)&v233[8] = v133;
            BigString.init(_:)();
            AttributedString.init(_:attributes:)(v253, MEMORY[0x18961AFF0], MEMORY[0x18961AFF8], (uint64_t *)v255);
            uint64_t v38 = *(void *)&v255[0];
            uint64_t v135 = *(void *)(v134 + 16);
            uint64_t v40 = v228;
            if (v135)
            {
              *(void *)unint64_t v233 = v132;
              unint64_t v221 = (unint64_t)v128;
              id v222 = v126;
              uint64_t v230 = (__int128 *)((char *)&v243 + 8);
              int v231 = v256;
              swift_bridgeObjectRetain();
              int v232 = (_OWORD *)lazy protocol witness table accessor for type String and conformance String();
              int v220 = (char *)v134;
              uint64_t v136 = v134 + 48;
              unint64_t v229 = 0x80000001839CC230LL;
              unint64_t v223 = 0x80000001839CC1F0LL;
              do
              {
                uint64_t v238 = v136;
                uint64_t v239 = v135;
                uint64_t v137 = *(unsigned int *)(v136 - 16);
                uint64_t v139 = *(void *)v233;
                uint64_t v138 = *(void *)&v233[8];
                __int128 v243 = *(_OWORD *)v233;
                swift_bridgeObjectRetain();
                unint64_t v140 = String.Index.init<A>(utf16Offset:in:)();
                *(void *)&__int128 v243 = v139;
                *((void *)&v243 + 1) = v138;
                swift_bridgeObjectRetain();
                unint64_t v141 = String.Index.init<A>(utf16Offset:in:)();
                if (v141 >> 14 < v140 >> 14) {
                  goto LABEL_133;
                }
                unint64_t v142 = v141;
                swift_retain();
                specialized Range<>.init<A>(_range:in:)(v140, v142, (_OWORD *)v38, (unint64_t *)&v243);
                uint64_t v143 = v245;
                if (v245 == 2) {
                  goto LABEL_138;
                }
                uint64_t v234 = *((void *)&v243 + 1);
                uint64_t v235 = v243;
                *(void *)&v233[16] = v244;
                uint64_t v144 = v246;
                unint64_t v145 = v247;
                uint64_t v236 = v249;
                uint64_t v237 = v248;
                __int128 v252 = MEMORY[0x18961AFF0];
                char v146 = 0;
                char v147 = 2;
                switch((int)v137)
                {
                  case 0:
                    goto LABEL_66;
                  case 1:
                    char v146 = 1;
LABEL_66:
                    specialized AttributeContainer.subscript.setter( v146,  (uint64_t)&type metadata for AttributeScopes.FoundationAttributes.NumberFormatAttributes.NumberPartAttribute.NumberPart,  (uint64_t (*)(void))lazy protocol witness table accessor for type AttributeScopes.FoundationAttributes.NumberFormatAttributes.NumberPartAttribute.NumberPart and conformance AttributeScopes.FoundationAttributes.NumberFormatAttributes.NumberPartAttribute.NumberPart,  0xD00000000000001BLL,  v223);
                    break;
                  case 2:
                    goto LABEL_71;
                  case 6:
                    char v147 = 0;
                    goto LABEL_71;
                  case 7:
                    char v147 = 3;
                    goto LABEL_71;
                  case 8:
                    char v147 = 4;
                    goto LABEL_71;
                  case 10:
                    char v147 = 1;
LABEL_71:
                    specialized AttributeContainer.subscript.setter(v147);
                    break;
                  default:
                    break;
                }

                AttributeScopes.FoundationAttributes.MeasurementAttribute.Component.init(unumberFormatField:)( v137,  &v243);
                if (v243 != 2) {
                  specialized AttributeContainer.subscript.setter( v243,  (uint64_t)&type metadata for AttributeScopes.FoundationAttributes.MeasurementAttribute.Component,  (uint64_t (*)(void))lazy protocol witness table accessor for type AttributeScopes.FoundationAttributes.MeasurementAttribute.Component and conformance AttributeScopes.FoundationAttributes.MeasurementAttribute.Component,  0xD00000000000001FLL,  v229);
                }
                __int128 v251 = v252;
                if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
                {
                  __int128 v148 = *(_OWORD *)(v38 + 32);
                  __int128 v271 = *(_OWORD *)(v38 + 16);
                  __int128 v272 = v148;
                  __int128 v273 = *(_OWORD *)(v38 + 48);
                  unint64_t v149 = v145;
                  uint64_t v150 = *(void *)(v38 + 64);
                  uint64_t v151 = *(void *)(v38 + 72);
                  uint64_t v153 = *(void *)(v38 + 80);
                  uint64_t v152 = *(void *)(v38 + 88);
                  type metadata accessor for AttributedString.Guts();
                  swift_allocObject();
                  outlined retain of Locale((uint64_t)&v271);
                  swift_unknownObjectRetain();
                  uint64_t v154 = v151;
                  unint64_t v145 = v149;
                  uint64_t v155 = v152;
                  uint64_t v27 = v240;
                  uint64_t v156 = AttributedString.Guts.init(string:runs:)(&v271, v150, v154, v153, v155);
                  swift_release();
                  uint64_t v38 = v156;
                }

                uint64_t v157 = v241;
                __int128 v158 = *(_OWORD *)(v38 + 32);
                __int128 v268 = *(_OWORD *)(v38 + 16);
                __int128 v269 = v158;
                __int128 v270 = *(_OWORD *)(v38 + 48);
                BigString.startIndex.getter();
                BigString.endIndex.getter();
                uint64_t v260 = v235;
                uint64_t v261 = v234;
                uint64_t v262 = *(void *)&v233[16];
                uint64_t v263 = v143;
                uint64_t v264 = v144;
                unint64_t v265 = v145;
                uint64_t v266 = v237;
                uint64_t v267 = v236;
                BigString.unicodeScalars.getter();
                swift_retain_n();
                BigString.UnicodeScalarView.subscript.getter();
                swift_release();
                outlined release of Locale((uint64_t)v254);
                outlined release of Locale((uint64_t)v255);
                uint64_t v160 = v230;
                Swift::OpaquePointer v159 = v231;
                __int128 v161 = *((_OWORD *)v231 + 1);
                _OWORD *v230 = *(_OWORD *)v231;
                v160[1] = v161;
                __int128 v162 = *((_OWORD *)v159 + 3);
                v160[2] = *((_OWORD *)v159 + 2);
                v160[3] = v162;
                *(void *)&__int128 v243 = v38;
                if (one-time initialization token for currentIdentity != -1) {
                  swift_once();
                }
                uint64_t v163 = (uint64_t *)(static AttributedString.currentIdentity + 16);
                uint64_t v164 = (os_unfair_lock_s *)(static AttributedString.currentIdentity + 24);
                swift_retain();
                os_unfair_lock_lock(v164);
                closure #1 in static AttributedString._nextModifyIdentity.getter(v163, &v242);
                uint64_t v241 = v157;
                os_unfair_lock_unlock(v164);
                swift_release();
                uint64_t v165 = v242;
                uint64_t v250 = v242;
                BigString.init()();
                uint64_t v242 = 0LL;
                MEMORY[0x186E20E78](&v242, 8LL);
                uint64_t v166 = v242;
                type metadata accessor for AttributedString.Guts();
                uint64_t v167 = swift_allocObject();
                if ((BigString.isEmpty.getter() & 1) == 0) {
                  goto LABEL_134;
                }
                __int128 v168 = v258;
                *(_OWORD *)(v167 + 16) = v257;
                *(_OWORD *)(v167 + 32) = v168;
                *(_OWORD *)(v167 + 48) = v259;
                *(void *)(v167 + 64) = 0LL;
                *(void *)(v167 + 72) = 0LL;
                *(void *)(v167 + 80) = 0LL;
                *(void *)(v167 + 88) = v166;
                swift_release();
                LOBYTE(v242) = 0;
                AttributedSubstring.mergeAttributes(_:mergePolicy:)((uint64_t *)&v251, (char *)&v242);
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                if (v250 != v165) {
                  goto LABEL_139;
                }
                uint64_t v136 = v238 + 24;
                uint64_t v38 = v243;
                swift_release();
                uint64_t v135 = v239 - 1;
              }

              while (v239 != 1);
              swift_bridgeObjectRelease();
              uint64_t v40 = v228;
            }

            swift_bridgeObjectRelease();
            swift_release();
            goto LABEL_119;
          }

          goto LABEL_122;
        }

        swift_bridgeObjectRelease();
        uint64_t v22 = v224;
      }
    }

uint64_t Measurement<>.AttributedStyle.formatAsDescription(_:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, void *a5@<X8>)
{
  uint64_t v119 = 0LL;
  uint64_t v163 = *MEMORY[0x1895F89C0];
  id v103 = *(id *)a1;
  uint64_t v7 = *(void *)(a1 + 8);
  char v8 = *v5;
  LOBYTE(v131[0]) = *v5;
  uint64_t v9 = type metadata accessor for Measurement<>.FormatStyle(0LL, *(void *)(a2 + 16), a3, a4);
  uint64_t v10 = *(int *)(v9 + 32);
  char v11 = v5[*(int *)(v9 + 36)];
  LOBYTE(v120) = v11;
  uint64_t v12 = (uint64_t)&v5[v10];
  uint64_t v13 = (void *)static Measurement<>.FormatStyle.skeleton(_:width:usage:numberFormatStyle:)( 0LL,  0LL,  (unsigned __int8 *)v131,  (unsigned __int8 *)&v120,  (uint64_t)&v5[v10]);
  uint64_t v14 = *((void *)v5 + 1);
  uint64_t v15 = *((void *)v5 + 2);
  unint64_t v17 = v16;
  *(void *)&v131[0] = v14;
  *((void *)&v131[0] + 1) = v15;
  swift_unknownObjectRetain();
  uint64_t v18 = specialized static ICUMeasurementNumberFormatter.create(for:locale:)(v13, v17, (uint64_t)v131);
  swift_unknownObjectRelease();
  uint64_t v104 = a5;
  if (!v18)
  {
    swift_bridgeObjectRelease();
    LOBYTE(v131[0]) = v8;
    LOBYTE(v120) = v11;
    uint64_t v60 = (void *)static Measurement<>.FormatStyle.skeleton(_:width:usage:numberFormatStyle:)( 0LL,  0LL,  (unsigned __int8 *)v131,  (unsigned __int8 *)&v120,  v12);
    unint64_t v62 = v61;
    *(void *)&v131[0] = v14;
    *((void *)&v131[0] + 1) = v15;
    swift_unknownObjectRetain();
    uint64_t v63 = specialized static ICUMeasurementNumberFormatter.create(for:locale:)(v60, v62, (uint64_t)v131);
    swift_unknownObjectRelease();
    swift_bridgeObjectRelease();
    if (v63)
    {
      type metadata accessor for ICUNumberFormatterBase.FormatResult();
      swift_allocObject();
      ICUNumberFormatterBase.FormatResult.init(formatter:value:)();
      uint64_t v96 = swift_retain_n();
      MEMORY[0x1895F8858](v96);
      swift_retain();
      specialized closure #1 in _withResizingUCharBuffer(initialSize:_:)((uint64_t)v98, (uint64_t *)v131);
      uint64_t v97 = *((void *)&v131[0] + 1);
      swift_release_n();
      if (v97)
      {
        BigString.init(_:)();
        AttributedString.init(_:attributes:)(v131, MEMORY[0x18961AFF0], MEMORY[0x18961AFF8], (uint64_t *)&v120);
        swift_release();
        goto LABEL_29;
      }

      swift_release();
    }

    Double.description.getter();
    BigString.init(_:)();
    AttributedString.init(_:attributes:)(v131, MEMORY[0x18961AFF0], MEMORY[0x18961AFF8], (uint64_t *)&v120);
LABEL_29:
    uint64_t v26 = (uint64_t)v120;
    goto LABEL_32;
  }

  unint64_t v102 = v17;
  ICUNumberFormatterBase.attributedFormatPositions(_:)(v7, 0LL, 0x100000000LL);
  uint64_t v22 = v18;
  if (v20)
  {
    uint64_t v23 = v19;
    uint64_t v24 = v20;
    uint64_t v25 = v21;
    swift_bridgeObjectRetain();
    BigString.init(_:)();
    AttributedString.init(_:attributes:)(v129, MEMORY[0x18961AFF0], MEMORY[0x18961AFF8], (uint64_t *)v131);
    uint64_t v26 = *(void *)&v131[0];
    uint64_t v27 = *(void *)(v25 + 16);
    if (v27)
    {
      uint64_t v111 = v23;
      uint64_t v112 = v24;
      uint64_t v101 = v22;
      uint64_t v108 = &v121;
      uint64_t v109 = v132;
      swift_bridgeObjectRetain();
      unint64_t v110 = lazy protocol witness table accessor for type String and conformance String();
      uint64_t v100 = v25;
      uint64_t v28 = v25 + 48;
      unint64_t v105 = 0x80000001839CC1F0LL;
      unint64_t v106 = 0x80000001839CC230LL;
      do
      {
        uint64_t v29 = *(unsigned int *)(v28 - 16);
        uint64_t v118 = v28;
        uint64_t v120 = (_OWORD *)v111;
        uint64_t v121 = v112;
        swift_bridgeObjectRetain();
        unint64_t v30 = String.Index.init<A>(utf16Offset:in:)();
        uint64_t v120 = (_OWORD *)v111;
        uint64_t v121 = v112;
        swift_bridgeObjectRetain();
        unint64_t v31 = String.Index.init<A>(utf16Offset:in:)();
        if (v31 >> 14 < v30 >> 14)
        {
          __break(1u);
LABEL_40:
          __break(1u);
LABEL_41:
          __break(1u);
        }

        unint64_t v32 = v31;
        uint64_t v117 = v27;
        swift_retain();
        specialized Range<>.init<A>(_range:in:)(v30, v32, (_OWORD *)v26, (unint64_t *)&v120);
        uint64_t v33 = v123;
        if (v123 == (ValueMetadata *)2) {
          goto LABEL_41;
        }
        uint64_t v114 = v121;
        uint64_t v115 = (uint64_t)v120;
        uint64_t v113 = v122;
        unint64_t v34 = v124;
        uint64_t v36 = *((void *)&v125 + 1);
        uint64_t v35 = v125;
        unint64_t v116 = v126;
        __int128 v139 = MEMORY[0x18961AFF0];
        char v37 = 0;
        char v38 = 2;
        switch((int)v29)
        {
          case 0:
            goto LABEL_9;
          case 1:
            char v37 = 1;
LABEL_9:
            specialized AttributeContainer.subscript.setter( v37,  (uint64_t)&type metadata for AttributeScopes.FoundationAttributes.NumberFormatAttributes.NumberPartAttribute.NumberPart,  (uint64_t (*)(void))lazy protocol witness table accessor for type AttributeScopes.FoundationAttributes.NumberFormatAttributes.NumberPartAttribute.NumberPart and conformance AttributeScopes.FoundationAttributes.NumberFormatAttributes.NumberPartAttribute.NumberPart,  0xD00000000000001BLL,  v105);
            break;
          case 2:
            goto LABEL_14;
          case 6:
            char v38 = 0;
            goto LABEL_14;
          case 7:
            char v38 = 3;
            goto LABEL_14;
          case 8:
            char v38 = 4;
            goto LABEL_14;
          case 10:
            char v38 = 1;
LABEL_14:
            specialized AttributeContainer.subscript.setter(v38);
            break;
          default:
            break;
        }

        AttributeScopes.FoundationAttributes.MeasurementAttribute.Component.init(unumberFormatField:)(v29, &v120);
        if (v120 != 2) {
          specialized AttributeContainer.subscript.setter( (char)v120,  (uint64_t)&type metadata for AttributeScopes.FoundationAttributes.MeasurementAttribute.Component,  (uint64_t (*)(void))lazy protocol witness table accessor for type AttributeScopes.FoundationAttributes.MeasurementAttribute.Component and conformance AttributeScopes.FoundationAttributes.MeasurementAttribute.Component,  0xD00000000000001FLL,  v106);
        }
        v150[0] = v139;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          __int128 v39 = *(_OWORD *)(v26 + 32);
          v162[0] = *(_OWORD *)(v26 + 16);
          v162[1] = v39;
          __int128 v162[2] = *(_OWORD *)(v26 + 48);
          unint64_t v107 = v34;
          uint64_t v40 = v36;
          uint64_t v41 = *(void *)(v26 + 64);
          uint64_t v42 = *(void *)(v26 + 72);
          uint64_t v44 = *(void *)(v26 + 80);
          uint64_t v43 = *(void *)(v26 + 88);
          type metadata accessor for AttributedString.Guts();
          swift_allocObject();
          outlined retain of Locale((uint64_t)v162);
          swift_unknownObjectRetain();
          uint64_t v45 = v42;
          uint64_t v36 = v40;
          unint64_t v34 = v107;
          uint64_t v46 = AttributedString.Guts.init(string:runs:)(v162, v41, v45, v44, v43);
          swift_release();
          uint64_t v26 = v46;
        }

        uint64_t v47 = v119;
        __int128 v48 = *(_OWORD *)(v26 + 32);
        __int128 v159 = *(_OWORD *)(v26 + 16);
        __int128 v160 = v48;
        __int128 v161 = *(_OWORD *)(v26 + 48);
        BigString.startIndex.getter();
        BigString.endIndex.getter();
        uint64_t v151 = v115;
        uint64_t v152 = v114;
        uint64_t v153 = v113;
        uint64_t v154 = v33;
        unint64_t v155 = v34;
        uint64_t v156 = v35;
        uint64_t v157 = v36;
        __int128 v158 = v116;
        BigString.unicodeScalars.getter();
        swift_retain_n();
        BigString.UnicodeScalarView.subscript.getter();
        swift_release();
        outlined release of Locale((uint64_t)&v130);
        outlined release of Locale((uint64_t)v131);
        uint64_t v50 = v108;
        unint64_t v49 = v109;
        __int128 v51 = v109[1];
        *(_OWORD *)uint64_t v108 = *v109;
        *((_OWORD *)v50 + 1) = v51;
        __int128 v52 = v49[3];
        *((_OWORD *)v50 + 2) = v49[2];
        *((_OWORD *)v50 + 3) = v52;
        uint64_t v120 = (_OWORD *)v26;
        if (one-time initialization token for currentIdentity != -1) {
          swift_once();
        }
        char v53 = (uint64_t *)(static AttributedString.currentIdentity + 16);
        __int128 v54 = (os_unfair_lock_s *)(static AttributedString.currentIdentity + 24);
        swift_retain();
        os_unfair_lock_lock(v54);
        closure #1 in static AttributedString._nextModifyIdentity.getter(v53, (uint64_t *)v149);
        uint64_t v119 = v47;
        os_unfair_lock_unlock(v54);
        swift_release();
        uint64_t v55 = *(void *)&v149[0];
        uint64_t v128 = *(void *)&v149[0];
        BigString.init()();
        *(void *)&v149[0] = 0LL;
        MEMORY[0x186E20E78](v149, 8LL);
        uint64_t v56 = *(void *)&v149[0];
        type metadata accessor for AttributedString.Guts();
        uint64_t v57 = swift_allocObject();
        uint64_t v58 = v117;
        if ((BigString.isEmpty.getter() & 1) == 0) {
          goto LABEL_40;
        }
        __int128 v59 = v132[5];
        *(_OWORD *)(v57 + 16) = v132[4];
        *(_OWORD *)(v57 + 32) = v59;
        *(_OWORD *)(v57 + 48) = v132[6];
        *(void *)(v57 + 64) = 0LL;
        *(void *)(v57 + 72) = 0LL;
        *(void *)(v57 + 80) = 0LL;
        *(void *)(v57 + 88) = v56;
        swift_release();
        LOBYTE(v149[0]) = 0;
        AttributedSubstring.mergeAttributes(_:mergePolicy:)((uint64_t *)v150, (char *)v149);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if (v128 != v55)
        {
          int v99 = 0;
          v98[6] = 347LL;
          _assertionFailure(_:_:file:line:flags:)();
          __break(1u);
          swift_release_n();
          swift_willThrow();
          __break(1u);
          JUMPOUT(0x18309ADE4LL);
        }

        uint64_t v28 = v118 + 24;
        uint64_t v26 = (uint64_t)v120;
        swift_release();
        uint64_t v27 = v58 - 1;
      }

      while (v27);
      swift_bridgeObjectRelease();
    }

    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }

  else
  {
    Double.description.getter();
    BigString.init(_:)();
    AttributedString.init(_:attributes:)(v131, MEMORY[0x18961AFF0], MEMORY[0x18961AFF8], (uint64_t *)&v120);
    swift_bridgeObjectRelease();
    swift_release();
    uint64_t v26 = (uint64_t)v120;
  }

__n128 Measurement<>.AttributedStyle.locale(_:)@<Q0>(__n128 *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  __n128 v7 = *a1;
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  __n128 result = v7;
  *(__n128 *)(a3 + 8) = v7;
  return result;
}

void Measurement<>.AttributedStyle.hash(into:)(uint64_t a1, uint64_t a2)
{
  void (*v14)(void *__return_ptr, uint64_t, uint64_t);
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  Swift::UInt8 v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  void *v32;
  void *v33;
  id v34;
  id v35;
  id v36;
  id v37;
  id v38;
  id v39;
  void *v40;
  id v41;
  void *v42;
  id v43;
  void *v44;
  id v45;
  id v46;
  id v47;
  id v48;
  id v49;
  void *v50;
  uint64_t v51;
  uint64_t v52;
  Swift::UInt v53;
  Swift::UInt v54;
  Swift::UInt8 v55;
  Swift::UInt8 v56;
  Swift::UInt8 v57;
  int *v58;
  uint64_t v59;
  int v60;
  void *v61;
  void *v62;
  char *v63;
  id v64;
  uint64_t v65;
  void *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  _BYTE v70[144];
  char v71[8];
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  void *v77;
  void *v78;
  void *v79;
  void *v80;
  void *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  char v85;
  char v86;
  char v87;
  char v88;
  void v89[18];
  _BYTE v90[144];
  _BYTE v91[152];
  uint64_t v3 = v2;
  uint64_t v68 = a2;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointFormatStyle<Double>);
  uint64_t v69 = *(void *)(v5 - 8);
  MEMORY[0x1895F8858](v5);
  uint64_t v67 = (uint64_t)&v61 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointFormatStyle<Double>?);
  MEMORY[0x1895F8858](v7);
  uint64_t v9 = (char *)&v61 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  Hasher._combine(_:)(*v2);
  uint64_t v10 = *((void *)v2 + 2);
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t))(v10 + 48);
  swift_unknownObjectRetain();
  if ((v12(ObjectType, v10) & 1) != 0)
  {
    Swift::UInt8 v13 = 1;
LABEL_5:
    Hasher._combine(_:)(v13);
    swift_unknownObjectRelease();
    uint64_t v18 = v68;
    unint64_t v17 = v69;
    goto LABEL_57;
  }

  Hasher._combine(_:)(0);
  (*(void (**)(uint64_t, uint64_t))(v10 + 64))(ObjectType, v10);
  String.hash(into:)();
  swift_bridgeObjectRelease();
  uint64_t v14 = *(void (**)(void *__return_ptr, uint64_t, uint64_t))(v10 + 464);
  swift_unknownObjectRetain();
  v14(v89, ObjectType, v10);
  swift_unknownObjectRelease();
  outlined init with take of LocalePreferences?( (uint64_t)v89,  (uint64_t)v90,  (uint64_t *)&demangling cache variable for type metadata for LocalePreferences?);
  outlined init with take of LocalePreferences?( (uint64_t)v90,  (uint64_t)v91,  (uint64_t *)&demangling cache variable for type metadata for LocalePreferences?);
  if (_s10Foundation17LocalePreferencesVSgWOg((uint64_t)v91) == 1)
  {
    Swift::UInt8 v13 = 0;
    goto LABEL_5;
  }

  outlined init with take of LocalePreferences?( (uint64_t)v90,  (uint64_t)v71,  (uint64_t *)&demangling cache variable for type metadata for LocalePreferences?);
  Hasher._combine(_:)(1u);
  if (v71[0] == 2)
  {
    uint64_t v19 = 0;
  }

  else
  {
    uint64_t v19 = v71[0] & 1;
    Hasher._combine(_:)(1u);
  }

  Hasher._combine(_:)(v19);
  uint64_t v20 = v72;
  __int128 v65 = v5;
  if (!v72)
  {
    Hasher._combine(_:)(0);
    uint64_t v25 = v71;
    goto LABEL_20;
  }

  Hasher._combine(_:)(1u);
  Hasher._combine(_:)(*(void *)(v20 + 16));
  uint64_t v21 = *(void *)(v20 + 16);
  if (!v21)
  {
    outlined init with take of LocalePreferences?( (uint64_t)v90,  (uint64_t)v70,  (uint64_t *)&demangling cache variable for type metadata for LocalePreferences?);
    uint64_t v25 = v70;
LABEL_20:
    outlined retain of LocalePreferences(v25);
    if (!v73) {
      goto LABEL_14;
    }
    goto LABEL_21;
  }

  outlined retain of LocalePreferences?( (uint64_t)v90,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined copy of LocalePreferences?);
  swift_bridgeObjectRetain();
  uint64_t v22 = v20 + 40;
  do
  {
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    v22 += 16LL;
    --v21;
  }

  while (v21);
  swift_bridgeObjectRelease();
  if (!v73)
  {
LABEL_14:
    Hasher._combine(_:)(0);
    if (!v74) {
      goto LABEL_15;
    }
    goto LABEL_22;
  }

BOOL static Measurement<>.AttributedStyle.== infix(_:_:)(unsigned __int8 *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointFormatStyle<Double>);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1895F8858](v5);
  uint64_t v8 = (char *)&v47 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (FloatingPointFormatStyle<Double>?, FloatingPointFormatStyle<Double>?));
  MEMORY[0x1895F8858](v9);
  char v11 = (char *)&v47 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointFormatStyle<Double>?);
  uint64_t v13 = MEMORY[0x1895F8858](v12);
  uint64_t v15 = (__int128 *)((char *)&v47 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v16 = MEMORY[0x1895F8858](v13);
  uint64_t v18 = (char *)&v47 - v17;
  MEMORY[0x1895F8858](v16);
  uint64_t v21 = (char *)&v47 - v20;
  if (*a1 != *v19) {
    return 0LL;
  }
  __int128 v22 = *(_OWORD *)(a1 + 8);
  __int128 v51 = *(_OWORD *)(v19 + 8);
  __int128 v52 = v22;
  uint64_t v50 = v19;
  __int128 v48 = (__int128 *)v8;
  uint64_t v25 = v50;
  uint64_t v26 = type metadata accessor for Measurement<>.FormatStyle(0LL, a3, v23, v24);
  uint64_t v27 = *(int *)(v26 + 32);
  unint64_t v49 = a1;
  uint64_t v28 = (uint64_t)&a1[v27];
  uint64_t v29 = (int *)v26;
  outlined init with copy of (Hashable & Sendable)?( v28,  (uint64_t)v21,  &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>?);
  outlined init with copy of (Hashable & Sendable)?( (uint64_t)&v25[v29[8]],  (uint64_t)v18,  &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>?);
  uint64_t v30 = (uint64_t)&v11[*(int *)(v9 + 48)];
  outlined init with copy of (Hashable & Sendable)?( (uint64_t)v21,  (uint64_t)v11,  &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>?);
  outlined init with copy of (Hashable & Sendable)?( (uint64_t)v18,  v30,  &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>?);
  unint64_t v31 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48);
  if (v31((uint64_t)v11, 1LL, v5) == 1)
  {
    if (v31(v30, 1LL, v5) == 1)
    {
      outlined destroy of Any?( (uint64_t)v11,  &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>?);
      outlined destroy of Any?( (uint64_t)v18,  &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>?);
      outlined destroy of Any?( (uint64_t)v21,  &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>?);
      uint64_t v33 = v49;
      unint64_t v32 = v50;
      goto LABEL_6;
    }

    char v37 = &demangling cache variable for type metadata for (FloatingPointFormatStyle<Double>?, FloatingPointFormatStyle<Double>?);
LABEL_21:
    outlined destroy of Any?((uint64_t)v11, v37);
    outlined destroy of Any?( (uint64_t)v18,  &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>?);
    outlined destroy of Any?( (uint64_t)v21,  &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>?);
    return 0LL;
  }

  outlined init with copy of (Hashable & Sendable)?( (uint64_t)v11,  (uint64_t)v15,  &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>?);
  if (v31(v30, 1LL, v5) == 1)
  {
    char v37 = &demangling cache variable for type metadata for (FloatingPointFormatStyle<Double>?, FloatingPointFormatStyle<Double>?);
LABEL_20:
    outlined destroy of Any?( (uint64_t)v15,  &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>);
    goto LABEL_21;
  }

  char v38 = v48;
  outlined init with take of LocalePreferences?( v30,  (uint64_t)v48,  &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>);
  __int128 v39 = *v15;
  __int128 v51 = *v38;
  __int128 v52 = v39;
  if ((specialized static Locale.== infix(_:_:)((uint64_t)&v52, (uint64_t)&v51) & 1) == 0)
  {
    outlined destroy of Any?( (uint64_t)v15,  &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>);
    char v37 = &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>?;
    uint64_t v15 = v38;
    goto LABEL_20;
  }

  char v40 = static NumberFormatStyleConfiguration.Collection.== infix(_:_:)( (char *)v15 + *(int *)(v5 + 36),  (char *)v38 + *(int *)(v5 + 36));
  outlined destroy of Any?( (uint64_t)v15,  &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>);
  outlined destroy of Any?( (uint64_t)v38,  &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>);
  outlined destroy of Any?( (uint64_t)v11,  &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>?);
  outlined destroy of Any?( (uint64_t)v18,  &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>?);
  outlined destroy of Any?( (uint64_t)v21,  &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>?);
  uint64_t v33 = v49;
  unint64_t v32 = v50;
  if ((v40 & 1) == 0) {
    return 0LL;
  }
LABEL_6:
  uint64_t v34 = v29[9];
  int v35 = v33[v34];
  int v36 = v32[v34];
  if (v35 == 14)
  {
    if (v36 == 14) {
      return v33[v29[10]] == v32[v29[10]];
    }
    return 0LL;
  }

  if (v36 == 14) {
    return 0LL;
  }
  uint64_t v41 = Usage.rawValue.getter(v35);
  uint64_t v43 = v42;
  if (v41 == Usage.rawValue.getter(v36) && v43 == v44)
  {
    swift_bridgeObjectRelease_n();
    unint64_t v32 = v50;
    return v33[v29[10]] == v32[v29[10]];
  }

  char v46 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  unint64_t v32 = v50;
  if ((v46 & 1) == 0) {
    return 0LL;
  }
  return v33[v29[10]] == v32[v29[10]];
}

uint64_t Measurement<>.AttributedStyle.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  if (a1 == 0x79745372656E6E69LL && a2 == 0xEA0000000000656CLL)
  {
    swift_bridgeObjectRelease();
    char v4 = 0;
  }

  else
  {
    char v3 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    char v4 = v3 ^ 1;
  }

  return v4 & 1;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance Measurement<A><>.AttributedStyle.CodingKeys()
{
  return 0x79745372656E6E69LL;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance Measurement<A><>.AttributedStyle.CodingKeys@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result = Measurement<>.AttributedStyle.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result & 1;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance Measurement<A><>.AttributedStyle.CodingKeys( uint64_t a1)
{
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance Measurement<A><>.AttributedStyle.CodingKeys( uint64_t a1)
{
  return CodingKey.debugDescription.getter();
}

uint64_t Measurement<>.AttributedStyle.encode(to:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = *(void *)(a2 + 16);
  uint64_t v6 = type metadata accessor for Measurement<>.AttributedStyle.CodingKeys(255LL, v5, a3, a4);
  MEMORY[0x186E20D4C](&protocol conformance descriptor for Measurement<A><>.AttributedStyle.CodingKeys, v6);
  uint64_t v7 = type metadata accessor for KeyedEncodingContainer();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x1895F8858](v7);
  uint64_t v10 = (char *)&v15 - v9;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  uint64_t v13 = type metadata accessor for Measurement<>.FormatStyle(0LL, v5, v11, v12);
  MEMORY[0x186E20D4C](&protocol conformance descriptor for Measurement<A><>.FormatStyle, v13);
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v10, v7);
}

Swift::Int Measurement<>.AttributedStyle.hashValue.getter(uint64_t a1)
{
  void (*v14)(void *__return_ptr, uint64_t, uint64_t);
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  Swift::UInt8 v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  id v31;
  id v32;
  void *v33;
  id v34;
  id v35;
  id v36;
  id v37;
  id v38;
  id v39;
  id v40;
  id v41;
  void *v42;
  void *v43;
  id v44;
  id v45;
  void *v46;
  id v47;
  uint64_t v48;
  uint64_t v49;
  Swift::UInt v50;
  Swift::UInt v51;
  Swift::UInt8 v52;
  Swift::UInt8 v53;
  Swift::UInt8 v54;
  int *v55;
  uint64_t v56;
  int v57;
  void *v59;
  char *v60;
  void *v61;
  id v62;
  uint64_t v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  _BYTE v67[144];
  char v68[8];
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  void *v74;
  void *v75;
  void *v76;
  void *v77;
  void *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  char v82;
  char v83;
  char v84;
  char v85;
  void v86[18];
  _BYTE v87[144];
  _BYTE v88[144];
  _BYTE v89[80];
  uint64_t v2 = v1;
  __int128 v65 = a1;
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointFormatStyle<Double>);
  uint64_t v66 = *(void *)(v3 - 8);
  MEMORY[0x1895F8858](v3);
  uint64_t v5 = (char *)&v59 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointFormatStyle<Double>?);
  MEMORY[0x1895F8858](v6);
  uint64_t v8 = (char *)&v59 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  Hasher.init(_seed:)();
  Hasher._combine(_:)(*v1);
  uint64_t v9 = *((void *)v1 + 2);
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t))(v9 + 48);
  swift_unknownObjectRetain();
  char v12 = v11(ObjectType, v9);
  __int128 v64 = v5;
  if ((v12 & 1) != 0)
  {
    Swift::UInt8 v13 = 1;
LABEL_5:
    Hasher._combine(_:)(v13);
    swift_unknownObjectRelease();
    uint64_t v18 = v65;
    uint64_t v17 = v66;
    goto LABEL_59;
  }

  Hasher._combine(_:)(0);
  (*(void (**)(uint64_t, uint64_t))(v9 + 64))(ObjectType, v9);
  String.hash(into:)();
  swift_bridgeObjectRelease();
  uint64_t v14 = *(void (**)(void *__return_ptr, uint64_t, uint64_t))(v9 + 464);
  swift_unknownObjectRetain();
  v14(v86, ObjectType, v9);
  swift_unknownObjectRelease();
  outlined init with take of LocalePreferences?( (uint64_t)v86,  (uint64_t)v87,  (uint64_t *)&demangling cache variable for type metadata for LocalePreferences?);
  outlined init with take of LocalePreferences?( (uint64_t)v87,  (uint64_t)v88,  (uint64_t *)&demangling cache variable for type metadata for LocalePreferences?);
  if (_s10Foundation17LocalePreferencesVSgWOg((uint64_t)v88) == 1)
  {
    Swift::UInt8 v13 = 0;
    goto LABEL_5;
  }

  outlined init with take of LocalePreferences?( (uint64_t)v87,  (uint64_t)v68,  (uint64_t *)&demangling cache variable for type metadata for LocalePreferences?);
  Hasher._combine(_:)(1u);
  if (v68[0] == 2)
  {
    uint64_t v19 = 0;
  }

  else
  {
    uint64_t v19 = v68[0] & 1;
    Hasher._combine(_:)(1u);
  }

  Hasher._combine(_:)(v19);
  uint64_t v20 = v69;
  uint64_t v63 = v3;
  if (!v69)
  {
    Hasher._combine(_:)(0);
    uint64_t v25 = v68;
    goto LABEL_20;
  }

  Hasher._combine(_:)(1u);
  Hasher._combine(_:)(*(void *)(v20 + 16));
  uint64_t v21 = *(void *)(v20 + 16);
  if (!v21)
  {
    outlined init with take of LocalePreferences?( (uint64_t)v87,  (uint64_t)v67,  (uint64_t *)&demangling cache variable for type metadata for LocalePreferences?);
    uint64_t v25 = v67;
LABEL_20:
    outlined retain of LocalePreferences(v25);
    if (!v70) {
      goto LABEL_14;
    }
    goto LABEL_21;
  }

  outlined retain of LocalePreferences?( (uint64_t)v87,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined copy of LocalePreferences?);
  swift_bridgeObjectRetain();
  __int128 v22 = v20 + 40;
  do
  {
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    v22 += 16LL;
    --v21;
  }

  while (v21);
  swift_bridgeObjectRelease();
  if (!v70)
  {
LABEL_14:
    Hasher._combine(_:)(0);
    if (!v71) {
      goto LABEL_15;
    }
    goto LABEL_22;
  }

uint64_t Measurement<>.AttributedStyle.init(from:)@<X0>( void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v26 = a5;
  uint64_t v31 = type metadata accessor for Measurement<>.FormatStyle(0LL, a2, a3, a4);
  uint64_t v29 = *(void *)(v31 - 8);
  MEMORY[0x1895F8858](v31);
  unint64_t v32 = (char *)&v25 - v7;
  uint64_t v10 = type metadata accessor for Measurement<>.AttributedStyle.CodingKeys(255LL, a2, v8, v9);
  MEMORY[0x186E20D4C](&protocol conformance descriptor for Measurement<A><>.AttributedStyle.CodingKeys, v10);
  uint64_t v30 = type metadata accessor for KeyedDecodingContainer();
  uint64_t v27 = *(void *)(v30 - 8);
  MEMORY[0x1895F8858](v30);
  char v12 = (char *)&v25 - v11;
  uint64_t v25 = type metadata accessor for Measurement<>.AttributedStyle(0LL, a2, v13, v14);
  uint64_t v15 = *(void *)(v25 - 8);
  MEMORY[0x1895F8858](v25);
  uint64_t v17 = (char *)&v25 - v16;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  uint64_t v28 = v12;
  uint64_t v18 = v33;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v18)
  {
    uint64_t v33 = v15;
    uint64_t v19 = v27;
    uint64_t v20 = v29;
    uint64_t v21 = v31;
    MEMORY[0x186E20D4C](&protocol conformance descriptor for Measurement<A><>.FormatStyle, v31);
    uint64_t v22 = v30;
    uint64_t v23 = v28;
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v19 + 8))(v23, v22);
    (*(void (**)(char *, char *, uint64_t))(v20 + 32))(v17, v32, v21);
    (*(void (**)(uint64_t, char *, uint64_t))(v33 + 32))(v26, v17, v25);
  }

  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t protocol witness for Decodable.init(from:) in conformance Measurement<A><>.AttributedStyle@<X0>( void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  return Measurement<>.AttributedStyle.init(from:)(a1, *(void *)(a2 + 16), a3, a4, a5);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance Measurement<A><>.AttributedStyle( void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return Measurement<>.AttributedStyle.encode(to:)(a1, a2, a3, a4);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance Measurement<A><>.AttributedStyle( uint64_t a1, uint64_t a2)
{
  return Hasher._finalize()();
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance Measurement<A><>.AttributedStyle( unsigned __int8 *a1, uint64_t a2, uint64_t a3)
{
  return static Measurement<>.AttributedStyle.== infix(_:_:)(a1, a2, *(void *)(a3 + 16));
}

void Measurement<>.AttributedStyle<>.ByteCount.style.getter(_BYTE *a1@<X8>)
{
  *a1 = *v1;
}

_BYTE *Measurement<>.AttributedStyle<>.ByteCount.style.setter(_BYTE *result)
{
  *uint64_t v1 = *result;
  return result;
}

uint64_t (*Measurement<>.AttributedStyle<>.ByteCount.style.modify(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  *(_BYTE *)(a1 + 8) = *v1;
  return Measurement<>.AttributedStyle<>.ByteCount.style.modify;
}

uint64_t Measurement<>.AttributedStyle<>.ByteCount.style.modify(uint64_t result)
{
  **(_BYTE **)uint64_t result = *(_BYTE *)(result + 8);
  return result;
}

void Measurement<>.AttributedStyle<>.ByteCount.allowedUnits.getter(void *a1@<X8>)
{
  *a1 = *(void *)(v1 + 8);
}

void *Measurement<>.AttributedStyle<>.ByteCount.allowedUnits.setter(void *result)
{
  *(void *)(v1 + 8) = *result;
  return result;
}

void *(*Measurement<>.AttributedStyle<>.ByteCount.allowedUnits.modify( void *a1))(void *result)
{
  *a1 = *(void *)(v1 + 8);
  a1[1] = v1;
  return Measurement<>.AttributedStyle<>.ByteCount.allowedUnits.modify;
}

void *Measurement<>.AttributedStyle<>.ByteCount.allowedUnits.modify(void *result)
{
  *(void *)(result[1] + 8LL) = *result;
  return result;
}

uint64_t Measurement<>.AttributedStyle<>.ByteCount.spellsOutZero.getter()
{
  return *(unsigned __int8 *)(v0 + 16);
}

uint64_t Measurement<>.AttributedStyle<>.ByteCount.spellsOutZero.setter(uint64_t result)
{
  *(_BYTE *)(v1 + 16) = result;
  return result;
}

_BYTE *(*Measurement<>.AttributedStyle<>.ByteCount.spellsOutZero.modify( uint64_t a1))(_BYTE *result)
{
  *(void *)a1 = v1;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(v1 + 16);
  return Measurement<>.AttributedStyle<>.ByteCount.spellsOutZero.modify;
}

_BYTE *Measurement<>.AttributedStyle<>.ByteCount.spellsOutZero.modify(_BYTE *result)
{
  *(_BYTE *)(*(void *)result + 16LL) = result[8];
  return result;
}

uint64_t Measurement<>.AttributedStyle<>.ByteCount.includesActualByteCount.getter()
{
  return *(unsigned __int8 *)(v0 + 17);
}

uint64_t Measurement<>.AttributedStyle<>.ByteCount.includesActualByteCount.setter(uint64_t result)
{
  *(_BYTE *)(v1 + 17) = result;
  return result;
}

_BYTE *(*Measurement<>.AttributedStyle<>.ByteCount.includesActualByteCount.modify( uint64_t a1))(_BYTE *result)
{
  *(void *)a1 = v1;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(v1 + 17);
  return Measurement<>.AttributedStyle<>.ByteCount.includesActualByteCount.modify;
}

_BYTE *Measurement<>.AttributedStyle<>.ByteCount.includesActualByteCount.modify(_BYTE *result)
{
  *(_BYTE *)(*(void *)result + 17LL) = result[8];
  return result;
}

uint64_t Measurement<>.AttributedStyle<>.ByteCount.locale.getter@<X0>(_OWORD *a1@<X8>)
{
  *a1 = *(_OWORD *)(v1 + 24);
  return swift_unknownObjectRetain();
}

__n128 Measurement<>.AttributedStyle<>.ByteCount.locale.setter(__n128 *a1)
{
  __n128 result = *a1;
  *(__n128 *)(v1 + 24) = *a1;
  return result;
}

uint64_t (*Measurement<>.AttributedStyle<>.ByteCount.locale.modify( uint64_t a1))(uint64_t *a1, char a2)
{
  *(void *)(a1 + 16) = v1;
  *(_OWORD *)a1 = *(_OWORD *)(v1 + 24);
  swift_unknownObjectRetain();
  return Measurement<>.AttributedStyle<>.ByteCount.locale.modify;
}

uint64_t Measurement<>.AttributedStyle<>.ByteCount.locale.modify(uint64_t *a1, char a2)
{
  uint64_t v3 = a1[1];
  uint64_t v2 = a1[2];
  uint64_t v4 = *a1;
  if ((a2 & 1) != 0)
  {
    swift_unknownObjectRetain();
    swift_unknownObjectRelease();
    *(void *)(v2 + 24) = v4;
    *(void *)(v2 + 32) = v3;
    return swift_unknownObjectRelease();
  }

  else
  {
    uint64_t result = swift_unknownObjectRelease();
    *(void *)(v2 + 24) = v4;
    *(void *)(v2 + 32) = v3;
  }

  return result;
}

__n128 Measurement<>.AttributedStyle<>.ByteCount.init(style:allowedUnits:spellsOutZero:includesActualByteCount:locale:)@<Q0>( _BYTE *a1@<X0>, uint64_t *a2@<X1>, char a3@<W2>, char a4@<W3>, __n128 *a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v6 = *a2;
  *(_BYTE *)a6 = *a1;
  *(void *)(a6 + 8) = v6;
  *(_BYTE *)(a6 + 16) = a3;
  *(_BYTE *)(a6 + 17) = a4;
  __n128 result = *a5;
  *(__n128 *)(a6 + 24) = *a5;
  return result;
}

void Measurement<>.AttributedStyle<>.ByteCount.format(_:)(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4 = *(void **)a1;
  double v5 = *(double *)(a1 + 8);
  char v6 = *v2;
  double v7 = *((double *)v2 + 1);
  char v8 = v2[16];
  char v9 = v2[17];
  id v10 = objc_msgSend((id)objc_opt_self(), sel_bytes);
  specialized Measurement<>.converted(to:)(v4, v10, (uint64_t)&v13, v5);

  id v12 = v13;
  double v11 = v14;
  LOBYTE(v13) = v6;
  double v14 = v7;
  char v15 = v8;
  char v16 = v9;
  __int128 v17 = *(_OWORD *)(v2 + 24);
  swift_unknownObjectRetain();
  ByteCountFormatStyle.Attributed._format(_:doubleValue:)(a2, v11);
  swift_unknownObjectRelease();
}

uint64_t Measurement<>.AttributedStyle<>.ByteCount.locale(_:)@<X0>(_OWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *(void *)(v2 + 8);
  char v4 = *(_BYTE *)(v2 + 16);
  char v5 = *(_BYTE *)(v2 + 17);
  *(_BYTE *)a2 = *(_BYTE *)v2;
  *(void *)(a2 + 8) = v3;
  *(_BYTE *)(a2 + 16) = v4;
  *(_BYTE *)(a2 + 17) = v5;
  *(_OWORD *)(a2 + 24) = *a1;
  return swift_unknownObjectRetain();
}

uint64_t Measurement<>.AttributedStyle<>.ByteCount.hash(into:)(uint64_t a1)
{
  void (*v10)(void *__return_ptr, uint64_t, uint64_t);
  Swift::UInt8 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  id v23;
  id v24;
  id v25;
  id v26;
  id v27;
  id v28;
  id v29;
  id v30;
  id v31;
  id v32;
  id v33;
  id v34;
  id v35;
  uint64_t v36;
  uint64_t v37;
  Swift::UInt v38;
  Swift::UInt v39;
  Swift::UInt8 v40;
  Swift::UInt8 v41;
  Swift::UInt8 v42;
  _BYTE v44[144];
  _BYTE v45[8];
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  void *v51;
  void *v52;
  void *v53;
  void *v54;
  void *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char v59;
  char v60;
  char v61;
  char v62;
  void v63[18];
  _BYTE v64[144];
  _BYTE v65[152];
  Swift::UInt v3 = *((void *)v1 + 1);
  Swift::UInt8 v4 = v1[16];
  Swift::UInt8 v5 = v1[17];
  uint64_t v6 = *((void *)v1 + 4);
  Hasher._combine(_:)(*v1);
  Hasher._combine(_:)(v3);
  Hasher._combine(_:)(v4);
  Hasher._combine(_:)(v5);
  uint64_t ObjectType = swift_getObjectType();
  char v8 = *(uint64_t (**)(uint64_t, uint64_t))(v6 + 48);
  swift_unknownObjectRetain_n();
  if ((v8(ObjectType, v6) & 1) != 0)
  {
    Swift::UInt8 v9 = 1;
LABEL_5:
    Hasher._combine(_:)(v9);
    return swift_unknownObjectRelease_n();
  }

  Hasher._combine(_:)(0);
  (*(void (**)(uint64_t, uint64_t))(v6 + 64))(ObjectType, v6);
  String.hash(into:)();
  swift_bridgeObjectRelease();
  id v10 = *(void (**)(void *__return_ptr, uint64_t, uint64_t))(v6 + 464);
  swift_unknownObjectRetain();
  v10(v63, ObjectType, v6);
  swift_unknownObjectRelease();
  outlined init with take of LocalePreferences?( (uint64_t)v63,  (uint64_t)v64,  (uint64_t *)&demangling cache variable for type metadata for LocalePreferences?);
  outlined init with take of LocalePreferences?( (uint64_t)v64,  (uint64_t)v65,  (uint64_t *)&demangling cache variable for type metadata for LocalePreferences?);
  if (_s10Foundation17LocalePreferencesVSgWOg((uint64_t)v65) == 1)
  {
    Swift::UInt8 v9 = 0;
    goto LABEL_5;
  }

  outlined init with take of LocalePreferences?( (uint64_t)v64,  (uint64_t)v45,  (uint64_t *)&demangling cache variable for type metadata for LocalePreferences?);
  Hasher._combine(_:)(1u);
  if (v45[0] == 2)
  {
    double v11 = 0;
  }

  else
  {
    double v11 = v45[0] & 1;
    Hasher._combine(_:)(1u);
  }

  Hasher._combine(_:)(v11);
  id v12 = v46;
  if (!v46)
  {
    Hasher._combine(_:)(0);
    __int128 v17 = v45;
    goto LABEL_20;
  }

  Hasher._combine(_:)(1u);
  Hasher._combine(_:)(*(void *)(v12 + 16));
  uint64_t v13 = *(void *)(v12 + 16);
  if (!v13)
  {
    outlined init with take of LocalePreferences?( (uint64_t)v64,  (uint64_t)v44,  (uint64_t *)&demangling cache variable for type metadata for LocalePreferences?);
    __int128 v17 = v44;
LABEL_20:
    outlined retain of LocalePreferences(v17);
    if (!v47) {
      goto LABEL_14;
    }
    goto LABEL_21;
  }

  outlined retain of LocalePreferences?( (uint64_t)v64,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined copy of LocalePreferences?);
  swift_bridgeObjectRetain();
  double v14 = v12 + 40;
  do
  {
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    v14 += 16LL;
    --v13;
  }

  while (v13);
  swift_bridgeObjectRelease();
  if (!v47)
  {
LABEL_14:
    Hasher._combine(_:)(0);
    if (!v48) {
      goto LABEL_15;
    }
    goto LABEL_22;
  }

uint64_t static Measurement<>.AttributedStyle<>.ByteCount.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  char v3 = *(_BYTE *)(a1 + 16);
  char v4 = *(_BYTE *)(a1 + 17);
  unsigned __int8 v5 = *(_BYTE *)a2;
  uint64_t v6 = *(void *)(a2 + 8);
  char v7 = *(_BYTE *)(a2 + 16);
  char v8 = *(_BYTE *)(a2 + 17);
  v15[0] = *(_BYTE *)a1;
  uint64_t v16 = v2;
  char v17 = v3;
  char v18 = v4;
  __int128 v19 = *(_OWORD *)(a1 + 24);
  v10[0] = v5;
  uint64_t v11 = v6;
  char v12 = v7;
  char v13 = v8;
  __int128 v14 = *(_OWORD *)(a2 + 24);
  return specialized static Measurement<>.FormatStyle<>.ByteCount.== infix(_:_:)(v15, v10) & 1;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance Measurement<A><>.AttributedStyle<>.ByteCount.CodingKeys()
{
  return 0x6E756F4365747962LL;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance Measurement<A><>.AttributedStyle<>.ByteCount.CodingKeys@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  if (a1 == 0x6E756F4365747962LL && a2 == 0xEE00656C79745374LL)
  {
    uint64_t result = swift_bridgeObjectRelease();
    char v7 = 0;
  }

  else
  {
    char v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
    uint64_t result = swift_bridgeObjectRelease();
    char v7 = v5 ^ 1;
  }

  *a3 = v7 & 1;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance Measurement<A><>.AttributedStyle<>.ByteCount.CodingKeys()
{
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance Measurement<A><>.AttributedStyle<>.ByteCount.CodingKeys()
{
  return CodingKey.debugDescription.getter();
}

uint64_t Measurement<>.AttributedStyle<>.ByteCount.encode(to:)(void *a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<Measurement<NSUnitInformationStorage><>.AttributedStyle<>.ByteCount.CodingKeys>);
  uint64_t v13 = *(void *)(v3 - 8);
  MEMORY[0x1895F8858](v3);
  char v5 = (char *)&v8 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  int v12 = *v1;
  uint64_t v11 = *((void *)v1 + 1);
  int v6 = v1[16];
  int v9 = v1[17];
  int v10 = v6;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  type metadata accessor for Measurement<NSUnitInformationStorage><>.AttributedStyle<>.ByteCount.CodingKeys( 0LL,  &lazy cache variable for type metadata for Measurement<NSUnitInformationStorage><>.AttributedStyle<>.ByteCount.CodingKeys,  (uint64_t (*)(void))type metadata accessor for Measurement<>.AttributedStyle<>.ByteCount.CodingKeys);
  lazy protocol witness table accessor for type Measurement<NSUnitInformationStorage><>.AttributedStyle<>.ByteCount.CodingKeys and conformance Measurement<A><>.AttributedStyle<>.ByteCount.CodingKeys( &lazy protocol witness table cache variable for type Measurement<NSUnitInformationStorage><>.AttributedStyle<>.ByteCount.CodingKeys and conformance Measurement<A><>.AttributedStyle<>.ByteCount.CodingKeys,  &lazy cache variable for type metadata for Measurement<NSUnitInformationStorage><>.AttributedStyle<>.ByteCount.CodingKeys,  (uint64_t (*)(void))type metadata accessor for Measurement<>.AttributedStyle<>.ByteCount.CodingKeys,  (uint64_t)&protocol conformance descriptor for Measurement<A><>.AttributedStyle<>.ByteCount.CodingKeys);
  __int128 v8 = *(_OWORD *)(v1 + 24);
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  char v14 = v12;
  uint64_t v15 = v11;
  char v16 = v10;
  char v17 = v9;
  __int128 v18 = v8;
  lazy protocol witness table accessor for type ByteCountFormatStyle.Attributed and conformance ByteCountFormatStyle.Attributed();
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  return (*(uint64_t (**)(char *, uint64_t))(v13 + 8))(v5, v3);
}

Swift::Int Measurement<>.AttributedStyle<>.ByteCount.hashValue.getter()
{
  void (*v9)(void *__return_ptr, uint64_t, uint64_t);
  Swift::UInt8 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _BYTE *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  id v22;
  id v23;
  id v24;
  id v25;
  id v26;
  id v27;
  id v28;
  id v29;
  id v30;
  id v31;
  id v32;
  id v33;
  id v34;
  uint64_t v35;
  uint64_t v36;
  Swift::UInt v37;
  Swift::UInt v38;
  Swift::UInt8 v39;
  Swift::UInt8 v40;
  Swift::UInt8 v41;
  _BYTE v43[144];
  _BYTE v44[8];
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  void *v50;
  void *v51;
  void *v52;
  void *v53;
  void *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char v58;
  char v59;
  char v60;
  char v61;
  void v62[18];
  _BYTE v63[144];
  _BYTE v64[144];
  _BYTE v65[72];
  Swift::UInt v1 = *v0;
  Swift::UInt v2 = *((void *)v0 + 1);
  Swift::UInt8 v3 = v0[16];
  Swift::UInt8 v4 = v0[17];
  uint64_t v5 = *((void *)v0 + 4);
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
  Hasher._combine(_:)(v3);
  Hasher._combine(_:)(v4);
  uint64_t ObjectType = swift_getObjectType();
  char v7 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 48);
  swift_unknownObjectRetain();
  if ((v7(ObjectType, v5) & 1) != 0)
  {
    Swift::UInt8 v8 = 1;
LABEL_5:
    Hasher._combine(_:)(v8);
    goto LABEL_56;
  }

  Hasher._combine(_:)(0);
  (*(void (**)(uint64_t, uint64_t))(v5 + 64))(ObjectType, v5);
  String.hash(into:)();
  swift_bridgeObjectRelease();
  int v9 = *(void (**)(void *__return_ptr, uint64_t, uint64_t))(v5 + 464);
  swift_unknownObjectRetain();
  v9(v62, ObjectType, v5);
  swift_unknownObjectRelease();
  outlined init with take of LocalePreferences?( (uint64_t)v62,  (uint64_t)v63,  (uint64_t *)&demangling cache variable for type metadata for LocalePreferences?);
  outlined init with take of LocalePreferences?( (uint64_t)v63,  (uint64_t)v64,  (uint64_t *)&demangling cache variable for type metadata for LocalePreferences?);
  if (_s10Foundation17LocalePreferencesVSgWOg((uint64_t)v64) == 1)
  {
    Swift::UInt8 v8 = 0;
    goto LABEL_5;
  }

  outlined init with take of LocalePreferences?( (uint64_t)v63,  (uint64_t)v44,  (uint64_t *)&demangling cache variable for type metadata for LocalePreferences?);
  Hasher._combine(_:)(1u);
  if (v44[0] == 2)
  {
    int v10 = 0;
  }

  else
  {
    int v10 = v44[0] & 1;
    Hasher._combine(_:)(1u);
  }

  Hasher._combine(_:)(v10);
  uint64_t v11 = v45;
  if (!v45)
  {
    Hasher._combine(_:)(0);
    char v16 = v44;
    goto LABEL_20;
  }

  Hasher._combine(_:)(1u);
  Hasher._combine(_:)(*(void *)(v11 + 16));
  int v12 = *(void *)(v11 + 16);
  if (!v12)
  {
    outlined init with take of LocalePreferences?( (uint64_t)v63,  (uint64_t)v43,  (uint64_t *)&demangling cache variable for type metadata for LocalePreferences?);
    char v16 = v43;
LABEL_20:
    outlined retain of LocalePreferences(v16);
    if (!v46) {
      goto LABEL_14;
    }
    goto LABEL_21;
  }

  outlined retain of LocalePreferences?( (uint64_t)v63,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined copy of LocalePreferences?);
  swift_bridgeObjectRetain();
  uint64_t v13 = v11 + 40;
  do
  {
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    v13 += 16LL;
    --v12;
  }

  while (v12);
  swift_bridgeObjectRelease();
  if (!v46)
  {
LABEL_14:
    Hasher._combine(_:)(0);
    if (!v47) {
      goto LABEL_15;
    }
    goto LABEL_22;
  }

uint64_t Measurement<>.AttributedStyle<>.ByteCount.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v14 = a2;
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<Measurement<NSUnitInformationStorage><>.AttributedStyle<>.ByteCount.CodingKeys>);
  uint64_t v15 = *(void *)(v3 - 8);
  MEMORY[0x1895F8858](v3);
  uint64_t v5 = (char *)&v13 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  type metadata accessor for Measurement<NSUnitInformationStorage><>.AttributedStyle<>.ByteCount.CodingKeys( 0LL,  &lazy cache variable for type metadata for Measurement<NSUnitInformationStorage><>.AttributedStyle<>.ByteCount.CodingKeys,  (uint64_t (*)(void))type metadata accessor for Measurement<>.AttributedStyle<>.ByteCount.CodingKeys);
  lazy protocol witness table accessor for type Measurement<NSUnitInformationStorage><>.AttributedStyle<>.ByteCount.CodingKeys and conformance Measurement<A><>.AttributedStyle<>.ByteCount.CodingKeys( &lazy protocol witness table cache variable for type Measurement<NSUnitInformationStorage><>.AttributedStyle<>.ByteCount.CodingKeys and conformance Measurement<A><>.AttributedStyle<>.ByteCount.CodingKeys,  &lazy cache variable for type metadata for Measurement<NSUnitInformationStorage><>.AttributedStyle<>.ByteCount.CodingKeys,  (uint64_t (*)(void))type metadata accessor for Measurement<>.AttributedStyle<>.ByteCount.CodingKeys,  (uint64_t)&protocol conformance descriptor for Measurement<A><>.AttributedStyle<>.ByteCount.CodingKeys);
  uint64_t v6 = v21;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v6)
  {
    uint64_t v7 = v14;
    lazy protocol witness table accessor for type ByteCountFormatStyle.Attributed and conformance ByteCountFormatStyle.Attributed();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v15 + 8))(v5, v3);
    uint64_t v8 = v17;
    char v9 = v18;
    char v10 = v19;
    __int128 v11 = v20;
    *(_BYTE *)uint64_t v7 = v16;
    *(void *)(v7 + 8) = v8;
    *(_BYTE *)(v7 + 16) = v9;
    *(_BYTE *)(v7 + 17) = v10;
    *(_OWORD *)(v7 + 24) = v11;
  }

  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

void protocol witness for FormatStyle.format(_:) in conformance Measurement<A><>.AttributedStyle<>.ByteCount( uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4 = *(void **)a1;
  double v5 = *(double *)(a1 + 8);
  char v6 = *v2;
  double v7 = *((double *)v2 + 1);
  char v8 = v2[16];
  char v9 = v2[17];
  id v10 = objc_msgSend((id)objc_opt_self(), sel_bytes);
  specialized Measurement<>.converted(to:)(v4, v10, (uint64_t)&v13, v5);

  id v12 = v13;
  double v11 = v14;
  LOBYTE(v13) = v6;
  double v14 = v7;
  char v15 = v8;
  char v16 = v9;
  __int128 v17 = *(_OWORD *)(v2 + 24);
  swift_unknownObjectRetain();
  ByteCountFormatStyle.Attributed._format(_:doubleValue:)(a2, v11);
  swift_unknownObjectRelease();
}

uint64_t protocol witness for FormatStyle.locale(_:) in conformance Measurement<A><>.AttributedStyle<>.ByteCount@<X0>( _OWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *(void *)(v2 + 8);
  char v4 = *(_BYTE *)(v2 + 16);
  char v5 = *(_BYTE *)(v2 + 17);
  *(_BYTE *)a2 = *(_BYTE *)v2;
  *(void *)(a2 + 8) = v3;
  *(_BYTE *)(a2 + 16) = v4;
  *(_BYTE *)(a2 + 17) = v5;
  *(_OWORD *)(a2 + 24) = *a1;
  return swift_unknownObjectRetain();
}

uint64_t protocol witness for Decodable.init(from:) in conformance Measurement<A><>.AttributedStyle<>.ByteCount@<X0>( void *a1@<X0>, uint64_t a2@<X8>)
{
  return Measurement<>.AttributedStyle<>.ByteCount.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance Measurement<A><>.AttributedStyle<>.ByteCount( void *a1)
{
  return Measurement<>.AttributedStyle<>.ByteCount.encode(to:)(a1);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance Measurement<A><>.AttributedStyle<>.ByteCount( uint64_t a1)
{
  void (*v10)(void *__return_ptr, uint64_t, uint64_t);
  Swift::UInt8 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  id v22;
  id v23;
  id v24;
  id v25;
  id v26;
  id v27;
  id v28;
  id v29;
  id v30;
  id v31;
  id v32;
  id v33;
  id v34;
  uint64_t v35;
  uint64_t v36;
  Swift::UInt v37;
  Swift::UInt v38;
  Swift::UInt8 v39;
  Swift::UInt8 v40;
  Swift::UInt8 v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  void *v48;
  void *v49;
  void *v50;
  void *v51;
  void *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char v56;
  char v57;
  char v58;
  char v59;
  void v60[18];
  _BYTE v61[144];
  _BYTE v62[152];
  Swift::UInt v3 = *((void *)v1 + 1);
  Swift::UInt8 v4 = v1[16];
  Swift::UInt8 v5 = v1[17];
  uint64_t v6 = *((void *)v1 + 4);
  Hasher._combine(_:)(*v1);
  Hasher._combine(_:)(v3);
  Hasher._combine(_:)(v4);
  Hasher._combine(_:)(v5);
  uint64_t ObjectType = swift_getObjectType();
  char v8 = *(uint64_t (**)(uint64_t, uint64_t))(v6 + 48);
  swift_unknownObjectRetain();
  if ((v8(ObjectType, v6) & 1) != 0)
  {
    Hasher._combine(_:)(1u);
    return swift_unknownObjectRelease();
  }

  Hasher._combine(_:)(0);
  (*(void (**)(uint64_t, uint64_t))(v6 + 64))(ObjectType, v6);
  String.hash(into:)();
  swift_bridgeObjectRelease();
  id v10 = *(void (**)(void *__return_ptr, uint64_t, uint64_t))(v6 + 464);
  swift_unknownObjectRetain();
  v10(v60, ObjectType, v6);
  swift_unknownObjectRelease();
  outlined init with take of LocalePreferences?( (uint64_t)v60,  (uint64_t)v61,  (uint64_t *)&demangling cache variable for type metadata for LocalePreferences?);
  outlined init with take of LocalePreferences?( (uint64_t)v61,  (uint64_t)v62,  (uint64_t *)&demangling cache variable for type metadata for LocalePreferences?);
  if (_s10Foundation17LocalePreferencesVSgWOg((uint64_t)v62) != 1)
  {
    outlined init with take of LocalePreferences?( (uint64_t)v61,  (uint64_t)&v42,  (uint64_t *)&demangling cache variable for type metadata for LocalePreferences?);
    Hasher._combine(_:)(1u);
    if (v42 == 2)
    {
      double v11 = 0;
    }

    else
    {
      double v11 = v42 & 1;
      Hasher._combine(_:)(1u);
    }

    Hasher._combine(_:)(v11);
    id v12 = v43;
    if (v43)
    {
      Hasher._combine(_:)(1u);
      Hasher._combine(_:)(*(void *)(v12 + 16));
      uint64_t v13 = *(void *)(v12 + 16);
      if (v13)
      {
        outlined retain of LocalePreferences?( (uint64_t)v61,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined copy of LocalePreferences?);
        swift_bridgeObjectRetain();
        double v14 = v12 + 40;
        do
        {
          swift_bridgeObjectRetain();
          String.hash(into:)();
          swift_bridgeObjectRelease();
          v14 += 16LL;
          --v13;
        }

        while (v13);
        swift_bridgeObjectRelease();
        if (!v44)
        {
LABEL_13:
          Hasher._combine(_:)(0);
          if (!v45) {
            goto LABEL_14;
          }
          goto LABEL_20;
        }

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance Measurement<A><>.AttributedStyle<>.ByteCount()
{
  void (*v9)(void *__return_ptr, uint64_t, uint64_t);
  Swift::UInt8 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  id v21;
  id v22;
  id v23;
  id v24;
  id v25;
  id v26;
  id v27;
  id v28;
  id v29;
  id v30;
  id v31;
  id v32;
  id v33;
  uint64_t v34;
  uint64_t v35;
  Swift::UInt v36;
  Swift::UInt v37;
  Swift::UInt8 v38;
  Swift::UInt8 v39;
  Swift::UInt8 v40;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  void *v48;
  void *v49;
  void *v50;
  void *v51;
  void *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char v56;
  char v57;
  char v58;
  char v59;
  void v60[18];
  _BYTE v61[144];
  _BYTE v62[144];
  _BYTE v63[72];
  Swift::UInt v1 = *v0;
  Swift::UInt v2 = *((void *)v0 + 1);
  Swift::UInt8 v3 = v0[16];
  Swift::UInt8 v4 = v0[17];
  uint64_t v5 = *((void *)v0 + 4);
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
  Hasher._combine(_:)(v3);
  Hasher._combine(_:)(v4);
  uint64_t ObjectType = swift_getObjectType();
  double v7 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 48);
  swift_unknownObjectRetain();
  if ((v7(ObjectType, v5) & 1) != 0)
  {
    Swift::UInt8 v8 = 1;
LABEL_5:
    Hasher._combine(_:)(v8);
    goto LABEL_55;
  }

  Hasher._combine(_:)(0);
  (*(void (**)(uint64_t, uint64_t))(v5 + 64))(ObjectType, v5);
  String.hash(into:)();
  swift_bridgeObjectRelease();
  char v9 = *(void (**)(void *__return_ptr, uint64_t, uint64_t))(v5 + 464);
  swift_unknownObjectRetain();
  v9(v60, ObjectType, v5);
  swift_unknownObjectRelease();
  outlined init with take of LocalePreferences?( (uint64_t)v60,  (uint64_t)v61,  (uint64_t *)&demangling cache variable for type metadata for LocalePreferences?);
  outlined init with take of LocalePreferences?( (uint64_t)v61,  (uint64_t)v62,  (uint64_t *)&demangling cache variable for type metadata for LocalePreferences?);
  if (_s10Foundation17LocalePreferencesVSgWOg((uint64_t)v62) == 1)
  {
    Swift::UInt8 v8 = 0;
    goto LABEL_5;
  }

  outlined init with take of LocalePreferences?( (uint64_t)v61,  (uint64_t)&v42,  (uint64_t *)&demangling cache variable for type metadata for LocalePreferences?);
  Hasher._combine(_:)(1u);
  if (v42 == 2)
  {
    id v10 = 0;
  }

  else
  {
    id v10 = v42 & 1;
    Hasher._combine(_:)(1u);
  }

  Hasher._combine(_:)(v10);
  double v11 = v43;
  if (!v43)
  {
    Hasher._combine(_:)(0);
LABEL_19:
    outlined retain of LocalePreferences(&v42);
    if (!v44) {
      goto LABEL_14;
    }
    goto LABEL_20;
  }

  Hasher._combine(_:)(1u);
  Hasher._combine(_:)(*(void *)(v11 + 16));
  id v12 = *(void *)(v11 + 16);
  if (!v12) {
    goto LABEL_19;
  }
  outlined retain of LocalePreferences?( (uint64_t)v61,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined copy of LocalePreferences?);
  swift_bridgeObjectRetain();
  uint64_t v13 = v11 + 40;
  do
  {
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    v13 += 16LL;
    --v12;
  }

  while (v12);
  swift_bridgeObjectRelease();
  if (!v44)
  {
LABEL_14:
    Hasher._combine(_:)(0);
    if (!v45) {
      goto LABEL_15;
    }
    goto LABEL_21;
  }

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance Measurement<A><>.AttributedStyle<>.ByteCount( uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  char v3 = *(_BYTE *)(a1 + 16);
  char v4 = *(_BYTE *)(a1 + 17);
  unsigned __int8 v5 = *(_BYTE *)a2;
  uint64_t v6 = *(void *)(a2 + 8);
  char v7 = *(_BYTE *)(a2 + 16);
  char v8 = *(_BYTE *)(a2 + 17);
  v15[0] = *(_BYTE *)a1;
  uint64_t v16 = v2;
  char v17 = v3;
  char v18 = v4;
  __int128 v19 = *(_OWORD *)(a1 + 24);
  v10[0] = v5;
  uint64_t v11 = v6;
  char v12 = v7;
  char v13 = v8;
  __int128 v14 = *(_OWORD *)(a2 + 24);
  return specialized static Measurement<>.FormatStyle<>.ByteCount.== infix(_:_:)(v15, v10) & 1;
}

uint64_t Measurement<>.AttributedStyle.subscript.getter()
{
  return swift_getAtKeyPath();
}

uint64_t key path setter for Measurement<>.AttributedStyle.subscript<A>(dynamicMember:) : <A><A1>Measurement<A><>.AttributedStyleAA1( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_release();
}

uint64_t Measurement<>.AttributedStyle.subscript.setter(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  specialized Measurement<>.AttributedStyle.subscript.setter(a1);
  swift_release();
  return (*(uint64_t (**)(uint64_t))(*(void *)(*(void *)(*MEMORY[0x189619628] + v3 + 8) - 8LL) + 8LL))(a1);
}

void (*Measurement<>.AttributedStyle.subscript.modify( void *a1, void *a2))(uint64_t a1, char a2)
{
  unsigned __int8 v5 = malloc(0x38uLL);
  *a1 = v5;
  *unsigned __int8 v5 = a2;
  v5[1] = v2;
  uint64_t v6 = *(void *)(*MEMORY[0x189619628] + *a2 + 8LL);
  uint64_t v5[2] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  v5[3] = v7;
  size_t v8 = *(void *)(v7 + 64);
  v5[4] = malloc(v8);
  v5[5] = malloc(v8);
  v5[6] = malloc(v8);
  swift_getAtKeyPath();
  return Measurement<>.AttributedStyle.subscript.modify;
}

void Measurement<>.AttributedStyle.subscript.modify(uint64_t a1, char a2)
{
  uint64_t v3 = *(void **)a1;
  char v4 = *(void (**)(void, void, void))(*(void *)(*(void *)a1 + 24LL) + 16LL);
  v4(*(void *)(*(void *)a1 + 40LL), v3[6], v3[2]);
  unsigned __int8 v5 = (void *)v3[5];
  uint64_t v6 = (void *)v3[6];
  uint64_t v8 = v3[3];
  uint64_t v7 = (void *)v3[4];
  uint64_t v9 = v3[2];
  if ((a2 & 1) != 0)
  {
    v4(v3[4], v3[5], v3[2]);
    swift_retain();
    swift_setAtWritableKeyPath();
    swift_release();
    id v10 = *(void (**)(void *, uint64_t))(v8 + 8);
    v10(v5, v9);
  }

  else
  {
    swift_retain();
    swift_setAtWritableKeyPath();
    swift_release();
    id v10 = *(void (**)(void *, uint64_t))(v8 + 8);
  }

  v10(v6, v9);
  free(v6);
  free(v5);
  free(v7);
  free(v3);
}

id NSMeasurementFormatter.string<A>(from:)(uint64_t a1)
{
  id v2 = objc_msgSend( objc_allocWithZone((Class)NSMeasurement),  sel_initWithDoubleValue_unit_,  *(void *)a1,  *(double *)(a1 + 8));
  id v3 = objc_msgSend(v1, sel_stringForObjectValue_, v2);

  if (!v3) {
    return 0LL;
  }
  id v4 = static String._unconditionallyBridgeFromObjectiveC(_:)(v3);

  return v4;
}

void specialized FloatingPointFormatStyle.hash(into:)(uint64_t a1)
{
  void (*v14)(void *__return_ptr, uint64_t, uint64_t);
  uint64_t v15;
  Swift::UInt8 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  void *v23;
  void *v24;
  void *v25;
  char *v26;
  void *v27;
  id v28;
  id v29;
  id v30;
  id v31;
  id v32;
  void *v33;
  void *v34;
  id v35;
  id v36;
  id v37;
  id v38;
  id v39;
  void *v40;
  id v41;
  void *v42;
  id v43;
  id v44;
  void *v45;
  uint64_t v46;
  uint64_t v47;
  Swift::UInt v48;
  Swift::UInt v49;
  Swift::UInt8 v50;
  Swift::UInt8 v51;
  Swift::UInt8 v52;
  uint64_t v53;
  Swift::UInt64 v54;
  Swift::UInt64 v55;
  int v56;
  Swift::UInt v57;
  int v58;
  unsigned int v59;
  uint64_t v60;
  int v61;
  Swift::UInt v62;
  int *v63;
  char *v64;
  uint64_t v65;
  int v66;
  Swift::UInt v67;
  Swift::UInt64 v68;
  Swift::UInt v69;
  uint64_t v70;
  void *v71;
  id v72;
  uint64_t v73;
  void *v74;
  id v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  _BYTE v79[144];
  char v80[8];
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  void *v86;
  void *v87;
  void *v88;
  void *v89;
  void *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  char v94;
  char v95;
  char v96;
  char v97;
  void v98[18];
  _BYTE v99[144];
  _BYTE v100[152];
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for FloatingPointRoundingRule();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v77 = v4;
  __int128 v78 = v5;
  MEMORY[0x1895F8858](v4);
  uint64_t v76 = (char *)&v70 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
  MEMORY[0x1895F8858](v7);
  uint64_t v9 = (char *)&v70 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = *(void *)(v1 + 8);
  uint64_t ObjectType = swift_getObjectType();
  char v12 = *(uint64_t (**)(uint64_t, uint64_t))(v10 + 48);
  swift_unknownObjectRetain();
  if ((v12(ObjectType, v10) & 1) == 0)
  {
    Hasher._combine(_:)(0);
    (*(void (**)(uint64_t, uint64_t))(v10 + 64))(ObjectType, v10);
    String.hash(into:)();
    swift_bridgeObjectRelease();
    __int128 v14 = *(void (**)(void *__return_ptr, uint64_t, uint64_t))(v10 + 464);
    swift_unknownObjectRetain();
    v14(v98, ObjectType, v10);
    swift_unknownObjectRelease();
    outlined init with take of LocalePreferences?( (uint64_t)v98,  (uint64_t)v99,  (uint64_t *)&demangling cache variable for type metadata for LocalePreferences?);
    outlined init with take of LocalePreferences?( (uint64_t)v99,  (uint64_t)v100,  (uint64_t *)&demangling cache variable for type metadata for LocalePreferences?);
    if (_s10Foundation17LocalePreferencesVSgWOg((uint64_t)v100) == 1)
    {
      Swift::UInt8 v13 = 0;
      goto LABEL_5;
    }

    outlined init with take of LocalePreferences?( (uint64_t)v99,  (uint64_t)v80,  (uint64_t *)&demangling cache variable for type metadata for LocalePreferences?);
    Hasher._combine(_:)(1u);
    if (v80[0] == 2)
    {
      uint64_t v16 = 0;
    }

    else
    {
      uint64_t v16 = v80[0] & 1;
      Hasher._combine(_:)(1u);
    }

    Hasher._combine(_:)(v16);
    char v17 = v81;
    if (v81)
    {
      Hasher._combine(_:)(1u);
      Hasher._combine(_:)(*(void *)(v17 + 16));
      char v18 = *(void *)(v17 + 16);
      if (v18)
      {
        outlined retain of LocalePreferences?( (uint64_t)v99,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined copy of LocalePreferences?);
        swift_bridgeObjectRetain();
        __int128 v19 = v17 + 40;
        do
        {
          swift_bridgeObjectRetain();
          String.hash(into:)();
          swift_bridgeObjectRelease();
          v19 += 16LL;
          --v18;
        }

        while (v18);
        swift_bridgeObjectRelease();
        if (!v82)
        {
LABEL_14:
          Hasher._combine(_:)(0);
          if (!v83) {
            goto LABEL_15;
          }
          goto LABEL_22;
        }

uint64_t specialized Range<>.init<A>(_range:in:)@<X0>( unint64_t a1@<X0>, unint64_t a2@<X1>, _OWORD *a3@<X2>, unint64_t *a4@<X8>)
{
  __int128 v8 = a3[2];
  v28[0] = a3[1];
  v28[1] = v8;
  __int128 v29 = a3[3];
  v30[0] = v28[0];
  v30[1] = v8;
  void v30[2] = v29;
  outlined init with take of any PredicateExpression<Self.Output == B1>(v30, (uint64_t)v31);
  outlined retain of Locale((uint64_t)v31);
  unint64_t v9 = BigString.index(from:)(a1);
  unint64_t v11 = v10;
  unint64_t v13 = v12;
  unint64_t v15 = v14;
  outlined release of Locale((uint64_t)v28);
  if (v15 == 2) {
    goto LABEL_4;
  }
  __int128 v16 = a3[2];
  v26[0] = a3[1];
  v26[1] = v16;
  __int128 v27 = a3[3];
  v32[0] = v26[0];
  v32[1] = v16;
  v32[2] = v27;
  outlined init with take of any PredicateExpression<Self.Output == B1>(v32, (uint64_t)v33);
  outlined retain of Locale((uint64_t)v33);
  unint64_t v17 = BigString.index(from:)(a2);
  unint64_t v24 = v19;
  unint64_t v25 = v18;
  unint64_t v21 = v20;
  outlined release of Locale((uint64_t)v26);
  if (v21 == 2 || v9 >> 10 < (unint64_t)BigString.startIndex.getter() >> 10)
  {
LABEL_4:
    uint64_t result = swift_release();
  }

  else
  {
    unint64_t v23 = BigString.endIndex.getter();
    uint64_t result = swift_release();
    if (v23 >> 10 >= v17 >> 10)
    {
      *a4 = v9;
      a4[1] = v11;
      a4[2] = v13;
      a4[3] = v15;
      a4[4] = v17;
      a4[5] = v25;
      a4[6] = v24;
      a4[7] = v21;
      return result;
    }
  }

  *a4 = 0LL;
  a4[1] = 0LL;
  a4[2] = 0LL;
  a4[3] = 2LL;
  *((_OWORD *)a4 + 2) = 0u;
  *((_OWORD *)a4 + 3) = 0u;
  return result;
}

uint64_t specialized AttributeContainer.subscript.setter(char a1)
{
  return specialized AttributeContainer.subscript.setter( a1,  (uint64_t)&type metadata for AttributeScopes.FoundationAttributes.NumberFormatAttributes.NumberPartAttribute.NumberPart,  (uint64_t (*)(void))lazy protocol witness table accessor for type AttributeScopes.FoundationAttributes.NumberFormatAttributes.NumberPartAttribute.NumberPart and conformance AttributeScopes.FoundationAttributes.NumberFormatAttributes.NumberPartAttribute.NumberPart,  0xD00000000000001BLL,  0x80000001839CC1F0LL);
}

{
  __int128 v3;
  __int128 v4;
  _OWORD v5[2];
  uint64_t v6;
  if (a1 == 5)
  {
    uint64_t v6 = 0LL;
    memset(v5, 0, sizeof(v5));
    id v3 = 0u;
    uint64_t v4 = 0u;
  }

  else
  {
    *((void *)&v4 + 1) = &type metadata for AttributeScopes.FoundationAttributes.NumberFormatAttributes.SymbolAttribute.Symbol;
    *(void *)&v5[0] = lazy protocol witness table accessor for type AttributeScopes.FoundationAttributes.NumberFormatAttributes.SymbolAttribute.Symbol and conformance AttributeScopes.FoundationAttributes.NumberFormatAttributes.SymbolAttribute.Symbol();
    LOBYTE(__swift_mutable_project_boxed_opaque_existential_1((uint64_t)v2, v3) = a1;
    *(_OWORD *)((char *)v5 + 8) = xmmword_183723F60;
    BYTE8(v5[1]) = 1;
    uint64_t v6 = 0LL;
  }

  return specialized AttributedString._AttributeStorage.subscript.setter( (uint64_t)&v3,  0xD00000000000001DLL,  0x80000001839CC210LL);
}

{
  __int128 v3;
  __int128 v4;
  _OWORD v5[2];
  uint64_t v6;
  if (a1 == 12)
  {
    uint64_t v6 = 0LL;
    memset(v5, 0, sizeof(v5));
    id v3 = 0u;
    uint64_t v4 = 0u;
  }

  else
  {
    *((void *)&v4 + 1) = &type metadata for AttributeScopes.FoundationAttributes.ByteCountAttribute.Component;
    *(void *)&v5[0] = lazy protocol witness table accessor for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Component and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Component();
    LOBYTE(__swift_mutable_project_boxed_opaque_existential_1((uint64_t)v2, v3) = a1;
    *(_OWORD *)((char *)v5 + 8) = xmmword_183723F60;
    BYTE8(v5[1]) = 1;
    uint64_t v6 = 0LL;
  }

  return specialized AttributedString._AttributeStorage.subscript.setter( (uint64_t)&v3,  0xD00000000000001DLL,  0x80000001839C8100LL);
}

{
  __int128 v3;
  __int128 v4;
  _OWORD v5[2];
  uint64_t v6;
  if (a1 == 17)
  {
    uint64_t v6 = 0LL;
    memset(v5, 0, sizeof(v5));
    id v3 = 0u;
    uint64_t v4 = 0u;
  }

  else
  {
    *((void *)&v4 + 1) = &type metadata for AttributeScopes.FoundationAttributes.DateFieldAttribute.Field;
    *(void *)&v5[0] = lazy protocol witness table accessor for type AttributeScopes.FoundationAttributes.DateFieldAttribute.Field and conformance AttributeScopes.FoundationAttributes.DateFieldAttribute.Field();
    LOBYTE(__swift_mutable_project_boxed_opaque_existential_1((uint64_t)v2, v3) = a1;
    *(_OWORD *)((char *)v5 + 8) = xmmword_183723F60;
    BYTE8(v5[1]) = 1;
    uint64_t v6 = 0LL;
  }

  return specialized AttributedString._AttributeStorage.subscript.setter( (uint64_t)&v3,  0xD00000000000001ALL,  0x80000001839CC1D0LL);
}

uint64_t specialized AttributeContainer.subscript.setter( char a1, uint64_t a2, uint64_t (*a3)(void), unint64_t a4, unint64_t a5)
{
  if (a1 == 2)
  {
    uint64_t v12 = 0LL;
    memset(v11, 0, sizeof(v11));
    __int128 v9 = 0u;
    __int128 v10 = 0u;
  }

  else
  {
    char v7 = a1 & 1;
    *((void *)&v10 + 1) = a2;
    *(void *)&v11[0] = a3();
    LOBYTE(v9) = v7;
    *(_OWORD *)((char *)v11 + 8) = xmmword_183723F60;
    BYTE8(v11[1]) = 1;
    uint64_t v12 = 0LL;
  }

  return specialized AttributedString._AttributeStorage.subscript.setter((uint64_t)&v9, a4, a5);
}

unint64_t lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef()
{
  unint64_t result = lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef;
  if (!lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef)
  {
    type metadata accessor for CFDictionaryRef(255LL);
    unint64_t result = MEMORY[0x186E20D4C](&protocol conformance descriptor for CFDictionaryRef, v1);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef);
  }

  return result;
}

uint64_t type metadata accessor for Measurement<>.AttributedStyle.CodingKeys( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata( a1,  a2,  a3,  a4,  (uint64_t)&nominal type descriptor for Measurement<>.AttributedStyle.CodingKeys);
}

uint64_t type metadata accessor for Measurement<>.AttributedStyle( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata( a1,  a2,  a3,  a4,  (uint64_t)&nominal type descriptor for Measurement<>.AttributedStyle);
}

uint64_t type metadata accessor for Measurement<>.AttributedStyle<>.ByteCount.CodingKeys( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata( a1,  a2,  a3,  a4,  (uint64_t)&nominal type descriptor for Measurement<>.AttributedStyle<>.ByteCount.CodingKeys);
}

uint64_t lazy protocol witness table accessor for type Measurement<NSUnitInformationStorage><>.AttributedStyle<>.ByteCount.CodingKeys and conformance Measurement<A><>.AttributedStyle<>.ByteCount.CodingKeys( unint64_t *a1, unint64_t *a2, uint64_t (*a3)(void), uint64_t a4)
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for Measurement<NSUnitInformationStorage><>.AttributedStyle<>.ByteCount.CodingKeys( 255LL,  a2,  a3);
    uint64_t result = MEMORY[0x186E20D4C](a4, v7);
    atomic_store(result, a1);
  }

  return result;
}

unint64_t lazy protocol witness table accessor for type ByteCountFormatStyle.Attributed and conformance ByteCountFormatStyle.Attributed()
{
  unint64_t result = lazy protocol witness table cache variable for type ByteCountFormatStyle.Attributed and conformance ByteCountFormatStyle.Attributed;
  if (!lazy protocol witness table cache variable for type ByteCountFormatStyle.Attributed and conformance ByteCountFormatStyle.Attributed)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for ByteCountFormatStyle.Attributed,  &type metadata for ByteCountFormatStyle.Attributed);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type ByteCountFormatStyle.Attributed and conformance ByteCountFormatStyle.Attributed);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type ByteCountFormatStyle.Attributed and conformance ByteCountFormatStyle.Attributed;
  if (!lazy protocol witness table cache variable for type ByteCountFormatStyle.Attributed and conformance ByteCountFormatStyle.Attributed)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for ByteCountFormatStyle.Attributed,  &type metadata for ByteCountFormatStyle.Attributed);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type ByteCountFormatStyle.Attributed and conformance ByteCountFormatStyle.Attributed);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type ByteCountFormatStyle.Attributed and conformance ByteCountFormatStyle.Attributed;
  if (!lazy protocol witness table cache variable for type ByteCountFormatStyle.Attributed and conformance ByteCountFormatStyle.Attributed)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for ByteCountFormatStyle.Attributed,  &type metadata for ByteCountFormatStyle.Attributed);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type ByteCountFormatStyle.Attributed and conformance ByteCountFormatStyle.Attributed);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type ByteCountFormatStyle.Attributed and conformance ByteCountFormatStyle.Attributed;
  if (!lazy protocol witness table cache variable for type ByteCountFormatStyle.Attributed and conformance ByteCountFormatStyle.Attributed)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for ByteCountFormatStyle.Attributed,  &type metadata for ByteCountFormatStyle.Attributed);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type ByteCountFormatStyle.Attributed and conformance ByteCountFormatStyle.Attributed);
  }

  return result;
}

uint64_t specialized Measurement<>.AttributedStyle.subscript.setter(uint64_t a1)
{
  return swift_setAtWritableKeyPath();
}

uint64_t instantiation function for generic protocol witness table for Measurement<A><>.AttributedStyle( void *a1, uint64_t a2)
{
  a1[1] = MEMORY[0x186E20D4C](&protocol conformance descriptor for Measurement<A><>.AttributedStyle);
  a1[2] = MEMORY[0x186E20D4C](&protocol conformance descriptor for Measurement<A><>.AttributedStyle, a2);
  uint64_t result = MEMORY[0x186E20D4C](&protocol conformance descriptor for Measurement<A><>.AttributedStyle, a2);
  a1[3] = result;
  return result;
}

void base witness table accessor for Equatable in Measurement<A><>.AttributedStyle()
{
}

uint64_t instantiation function for generic protocol witness table for Measurement<A><>.AttributedStyle<>.ByteCount( void *a1)
{
  a1[1] = lazy protocol witness table accessor for type Measurement<NSUnitInformationStorage><>.AttributedStyle<>.ByteCount.CodingKeys and conformance Measurement<A><>.AttributedStyle<>.ByteCount.CodingKeys( &lazy protocol witness table cache variable for type Measurement<NSUnitInformationStorage><>.AttributedStyle<>.ByteCount and conformance Measurement<A><>.AttributedStyle<>.ByteCount,  &lazy cache variable for type metadata for Measurement<NSUnitInformationStorage><>.AttributedStyle<>.ByteCount,  (uint64_t (*)(void))type metadata accessor for Measurement<>.AttributedStyle<>.ByteCount,  (uint64_t)&protocol conformance descriptor for Measurement<A><>.AttributedStyle<>.ByteCount);
  a1[2] = lazy protocol witness table accessor for type Measurement<NSUnitInformationStorage><>.AttributedStyle<>.ByteCount.CodingKeys and conformance Measurement<A><>.AttributedStyle<>.ByteCount.CodingKeys( &lazy protocol witness table cache variable for type Measurement<NSUnitInformationStorage><>.AttributedStyle<>.ByteCount and conformance Measurement<A><>.AttributedStyle<>.ByteCount,  &lazy cache variable for type metadata for Measurement<NSUnitInformationStorage><>.AttributedStyle<>.ByteCount,  (uint64_t (*)(void))type metadata accessor for Measurement<>.AttributedStyle<>.ByteCount,  (uint64_t)&protocol conformance descriptor for Measurement<A><>.AttributedStyle<>.ByteCount);
  uint64_t result = lazy protocol witness table accessor for type Measurement<NSUnitInformationStorage><>.AttributedStyle<>.ByteCount.CodingKeys and conformance Measurement<A><>.AttributedStyle<>.ByteCount.CodingKeys( &lazy protocol witness table cache variable for type Measurement<NSUnitInformationStorage><>.AttributedStyle<>.ByteCount and conformance Measurement<A><>.AttributedStyle<>.ByteCount,  &lazy cache variable for type metadata for Measurement<NSUnitInformationStorage><>.AttributedStyle<>.ByteCount,  (uint64_t (*)(void))type metadata accessor for Measurement<>.AttributedStyle<>.ByteCount,  (uint64_t)&protocol conformance descriptor for Measurement<A><>.AttributedStyle<>.ByteCount);
  a1[3] = result;
  return result;
}

void type metadata accessor for Measurement<NSUnitInformationStorage><>.AttributedStyle<>.ByteCount.CodingKeys( uint64_t a1, unint64_t *a2, uint64_t (*a3)(void))
{
  if (!*a2)
  {
    unint64_t v4 = a3(0LL);
    if (!v5) {
      atomic_store(v4, a2);
    }
  }

uint64_t type metadata accessor for Measurement<>.AttributedStyle<>.ByteCount( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata( a1,  a2,  a3,  a4,  (uint64_t)&nominal type descriptor for Measurement<>.AttributedStyle<>.ByteCount);
}

uint64_t base witness table accessor for Equatable in Measurement<A><>.AttributedStyle<>.ByteCount()
{
  return lazy protocol witness table accessor for type Measurement<NSUnitInformationStorage><>.AttributedStyle<>.ByteCount.CodingKeys and conformance Measurement<A><>.AttributedStyle<>.ByteCount.CodingKeys( &lazy protocol witness table cache variable for type Measurement<NSUnitInformationStorage><>.AttributedStyle<>.ByteCount and conformance Measurement<A><>.AttributedStyle<>.ByteCount,  &lazy cache variable for type metadata for Measurement<NSUnitInformationStorage><>.AttributedStyle<>.ByteCount,  (uint64_t (*)(void))type metadata accessor for Measurement<>.AttributedStyle<>.ByteCount,  (uint64_t)&protocol conformance descriptor for Measurement<A><>.AttributedStyle<>.ByteCount);
}

_BYTE *sub_1830A02B8@<X0>(_BYTE *result@<X0>, _BYTE *a2@<X8>)
{
  *a2 = *result;
  return result;
}

_BYTE *sub_1830A02C4(_BYTE *result, _BYTE *a2)
{
  *a2 = *result;
  return result;
}

uint64_t sub_1830A02D0()
{
  return 0LL;
}

uint64_t sub_1830A02E0@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  *a2 = *(void *)(result + 8);
  return result;
}

void *sub_1830A02EC(void *result, uint64_t a2)
{
  *(void *)(a2 + 8) = *result;
  return result;
}

uint64_t sub_1830A02F8()
{
  return 0LL;
}

uint64_t sub_1830A0308@<X0>(uint64_t result@<X0>, _BYTE *a2@<X8>)
{
  *a2 = *(_BYTE *)(result + 16);
  return result;
}

_BYTE *sub_1830A0314(_BYTE *result, uint64_t a2)
{
  *(_BYTE *)(a2 + 16) = *result;
  return result;
}

uint64_t sub_1830A0320()
{
  return 0LL;
}

uint64_t sub_1830A0330@<X0>(uint64_t result@<X0>, _BYTE *a2@<X8>)
{
  *a2 = *(_BYTE *)(result + 17);
  return result;
}

_BYTE *sub_1830A033C(_BYTE *result, uint64_t a2)
{
  *(_BYTE *)(a2 + 17) = *result;
  return result;
}

uint64_t sub_1830A0348()
{
  return 0LL;
}

uint64_t sub_1830A0358@<X0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  *a2 = *(_OWORD *)(a1 + 24);
  return swift_unknownObjectRetain();
}

__n128 sub_1830A0368(__n128 *a1, uint64_t a2)
{
  __n128 v4 = *a1;
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  __n128 result = v4;
  *(__n128 *)(a2 + 24) = v4;
  return result;
}

uint64_t sub_1830A03B0()
{
  return 0LL;
}

uint64_t sub_1830A03C0()
{
  return Measurement<>.AttributedStyle.subscript.getter();
}

uint64_t sub_1830A03E8()
{
  return 16LL;
}

__n128 sub_1830A03F4(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t type metadata completion function for Measurement<>.AttributedStyle( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for Measurement<>.FormatStyle(319LL, *(void *)(a1 + 16), a3, a4);
  if (v5 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0LL;
  }

  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for Measurement<>.AttributedStyle( uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = type metadata accessor for Measurement<>.FormatStyle(0LL, *(void *)(a3 + 16), a3, a4);
  int v7 = *(_DWORD *)(*(void *)(v6 - 8) + 80LL);
  if ((v7 & 0x20000) != 0)
  {
    uint64_t v15 = *a2;
    *(void *)a1 = *a2;
    a1 = v15 + ((v7 + 16LL) & ~(unint64_t)v7);
    swift_retain();
  }

  else
  {
    uint64_t v8 = v6;
    *(_BYTE *)a1 = *(_BYTE *)a2;
    *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 1);
    uint64_t v9 = *(int *)(v6 + 32);
    __int128 v10 = (_OWORD *)(a1 + v9);
    unint64_t v11 = (_OWORD *)((char *)a2 + v9);
    swift_unknownObjectRetain();
    uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointFormatStyle<Double>);
    uint64_t v13 = *(void *)(v12 - 8);
    if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v13 + 48))(v11, 1LL, v12))
    {
      uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointFormatStyle<Double>?);
      memcpy(v10, v11, *(void *)(*(void *)(v14 - 8) + 64LL));
    }

    else
    {
      uint64_t v33 = v13;
      uint64_t v34 = v10;
      *__int128 v10 = *v11;
      uint64_t v16 = *(int *)(v12 + 36);
      unint64_t v17 = (char *)v10 + v16;
      unint64_t v18 = (char *)v11 + v16;
      v17[8] = v18[8];
      *(void *)unint64_t v17 = *(void *)v18;
      *(_OWORD *)(v17 + 57) = *(_OWORD *)(v18 + 57);
      __int128 v19 = *((_OWORD *)v18 + 3);
      __int128 v20 = *((_OWORD *)v18 + 1);
      *((_OWORD *)v17 + 2) = *((_OWORD *)v18 + 2);
      *((_OWORD *)v17 + 3) = v19;
      *((_OWORD *)v17 + 1) = v20;
      v17[73] = v18[73];
      v17[76] = v18[76];
      *((_WORD *)v17 + 37) = *((_WORD *)v18 + 37);
      v17[77] = v18[77];
      unint64_t v32 = (int *)type metadata accessor for NumberFormatStyleConfiguration.Collection(0LL);
      uint64_t v21 = v32[9];
      __unint64_t dst = &v17[v21];
      uint64_t v22 = &v18[v21];
      uint64_t v23 = type metadata accessor for FloatingPointRoundingRule();
      uint64_t v24 = *(void *)(v23 - 8);
      unint64_t v25 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v24 + 48);
      swift_unknownObjectRetain();
      if (v25(v22, 1LL, v23))
      {
        uint64_t v26 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
        memcpy(__dst, v22, *(void *)(*(void *)(v26 - 8) + 64LL));
      }

      else
      {
        (*(void (**)(char *, char *, uint64_t))(v24 + 16))(__dst, v22, v23);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v24 + 56))(__dst, 0LL, 1LL, v23);
      }

      uint64_t v27 = v32[10];
      uint64_t v28 = &v17[v27];
      __int128 v29 = &v18[v27];
      *(void *)uint64_t v28 = *(void *)v29;
      v28[8] = v29[8];
      v17[v32[11]] = v18[v32[11]];
      (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v33 + 56))(v34, 0LL, 1LL, v12);
    }

    *(_BYTE *)(a1 + *(int *)(v8 + 36)) = *((_BYTE *)a2 + *(int *)(v8 + 36));
    *(_BYTE *)(a1 + *(int *)(v8 + 40)) = *((_BYTE *)a2 + *(int *)(v8 + 40));
  }

  return a1;
}

uint64_t destroy for Measurement<>.AttributedStyle(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = a1 + *(int *)(type metadata accessor for Measurement<>.FormatStyle(0LL, *(void *)(a2 + 16), v4, v5) + 32);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointFormatStyle<Double>);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 48LL))(v6, 1LL, v7);
  if (!(_DWORD)result)
  {
    swift_unknownObjectRelease();
    uint64_t v9 = *(int *)(v7 + 36);
    uint64_t v10 = v6 + v9 + *(int *)(type metadata accessor for NumberFormatStyleConfiguration.Collection(0LL) + 36);
    uint64_t v11 = type metadata accessor for FloatingPointRoundingRule();
    uint64_t v12 = *(void *)(v11 - 8);
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48))(v10, 1LL, v11);
    if (!(_DWORD)result) {
      return (*(uint64_t (**)(uint64_t, uint64_t))(v12 + 8))(v10, v11);
    }
  }

  return result;
}

uint64_t initializeWithCopy for Measurement<>.AttributedStyle(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  uint64_t v6 = (int *)type metadata accessor for Measurement<>.FormatStyle(0LL, *(void *)(a3 + 16), a3, a4);
  uint64_t v7 = v6[8];
  uint64_t v8 = (_OWORD *)(a1 + v7);
  uint64_t v9 = (_OWORD *)(a2 + v7);
  swift_unknownObjectRetain();
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointFormatStyle<Double>);
  uint64_t v11 = *(void *)(v10 - 8);
  if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v11 + 48))(v9, 1LL, v10))
  {
    uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointFormatStyle<Double>?);
    memcpy(v8, v9, *(void *)(*(void *)(v12 - 8) + 64LL));
  }

  else
  {
    uint64_t v31 = v11;
    unint64_t v32 = v8;
    *uint64_t v8 = *v9;
    uint64_t v13 = *(int *)(v10 + 36);
    uint64_t v14 = (char *)v8 + v13;
    uint64_t v15 = (char *)v9 + v13;
    v14[8] = v15[8];
    *(void *)uint64_t v14 = *(void *)v15;
    *(_OWORD *)(v14 + 57) = *(_OWORD *)(v15 + 57);
    __int128 v16 = *((_OWORD *)v15 + 3);
    __int128 v17 = *((_OWORD *)v15 + 1);
    *((_OWORD *)v14 + 2) = *((_OWORD *)v15 + 2);
    *((_OWORD *)v14 + 3) = v16;
    *((_OWORD *)v14 + 1) = v17;
    v14[73] = v15[73];
    v14[76] = v15[76];
    *((_WORD *)v14 + 37) = *((_WORD *)v15 + 37);
    v14[77] = v15[77];
    uint64_t v18 = type metadata accessor for NumberFormatStyleConfiguration.Collection(0LL);
    uint64_t v19 = *(int *)(v18 + 36);
    __unint64_t dst = &v14[v19];
    uint64_t v30 = v18;
    __int128 v20 = &v15[v19];
    uint64_t v21 = type metadata accessor for FloatingPointRoundingRule();
    uint64_t v22 = *(void *)(v21 - 8);
    uint64_t v23 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v22 + 48);
    swift_unknownObjectRetain();
    if (v23(v20, 1LL, v21))
    {
      uint64_t v24 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
      memcpy(__dst, v20, *(void *)(*(void *)(v24 - 8) + 64LL));
    }

    else
    {
      (*(void (**)(char *, char *, uint64_t))(v22 + 16))(__dst, v20, v21);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v22 + 56))(__dst, 0LL, 1LL, v21);
    }

    uint64_t v25 = *(int *)(v30 + 40);
    uint64_t v26 = &v14[v25];
    uint64_t v27 = &v15[v25];
    *(void *)uint64_t v26 = *(void *)v27;
    v26[8] = v27[8];
    v14[*(int *)(v30 + 44)] = v15[*(int *)(v30 + 44)];
    (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v31 + 56))(v32, 0LL, 1LL, v10);
  }

  *(_BYTE *)(a1 + v6[9]) = *(_BYTE *)(a2 + v6[9]);
  *(_BYTE *)(a1 + v6[10]) = *(_BYTE *)(a2 + v6[10]);
  return a1;
}

uint64_t assignWithCopy for Measurement<>.AttributedStyle(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  uint64_t v6 = *(void *)(a2 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  *(void *)(a1 + 16) = v6;
  uint64_t v9 = (int *)type metadata accessor for Measurement<>.FormatStyle(0LL, *(void *)(a3 + 16), v7, v8);
  uint64_t v10 = v9[8];
  uint64_t v11 = (void *)(a1 + v10);
  uint64_t v12 = (void *)(a2 + v10);
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointFormatStyle<Double>);
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v14 + 48);
  int v16 = v15(v11, 1LL, v13);
  int v17 = v15(v12, 1LL, v13);
  if (!v16)
  {
    if (v17)
    {
      outlined destroy of Any?( (uint64_t)v11,  &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>);
      goto LABEL_7;
    }

    unint64_t v62 = v9;
    uint64_t v32 = v12[1];
    *uint64_t v11 = *v12;
    swift_unknownObjectRetain();
    swift_unknownObjectRelease();
    v11[1] = v32;
    uint64_t v33 = *(int *)(v13 + 36);
    uint64_t v34 = (char *)v11 + v33;
    int v35 = (char *)v12 + v33;
    LOBYTE(v33) = *((_BYTE *)v12 + v33 + 8);
    *(void *)uint64_t v34 = *(void *)v35;
    v34[8] = v33;
    __int128 v36 = *((_OWORD *)v35 + 1);
    __int128 v37 = *((_OWORD *)v35 + 2);
    __int128 v38 = *((_OWORD *)v35 + 3);
    *(_OWORD *)(v34 + 57) = *(_OWORD *)(v35 + 57);
    *((_OWORD *)v34 + 2) = v37;
    *((_OWORD *)v34 + 3) = v38;
    *((_OWORD *)v34 + 1) = v36;
    v34[73] = v35[73];
    LOWORD(v33) = *((_WORD *)v35 + 37);
    v34[76] = v35[76];
    *((_WORD *)v34 + 37) = v33;
    v34[77] = v35[77];
    uint64_t v60 = (int *)type metadata accessor for NumberFormatStyleConfiguration.Collection(0LL);
    uint64_t v39 = v60[9];
    char v40 = &v34[v39];
    uint64_t v41 = &v35[v39];
    uint64_t v42 = type metadata accessor for FloatingPointRoundingRule();
    uint64_t v43 = *(void *)(v42 - 8);
    uint64_t v44 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v43 + 48);
    int v45 = v44(v40, 1LL, v42);
    int v46 = v44(v41, 1LL, v42);
    if (v45)
    {
      if (!v46)
      {
        (*(void (**)(char *, char *, uint64_t))(v43 + 16))(v40, v41, v42);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v43 + 56))(v40, 0LL, 1LL, v42);
LABEL_16:
        uint64_t v9 = v62;
        uint64_t v52 = v60[10];
        char v53 = &v34[v52];
        __int128 v54 = &v35[v52];
        uint64_t v55 = *(void *)v54;
        v53[8] = v54[8];
        *(void *)char v53 = v55;
        v34[v60[11]] = v35[v60[11]];
        goto LABEL_17;
      }
    }

    else
    {
      if (!v46)
      {
        (*(void (**)(char *, char *, uint64_t))(v43 + 24))(v40, v41, v42);
        goto LABEL_16;
      }

      (*(void (**)(char *, uint64_t))(v43 + 8))(v40, v42);
    }

    uint64_t v51 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
    memcpy(v40, v41, *(void *)(*(void *)(v51 - 8) + 64LL));
    goto LABEL_16;
  }

  if (v17)
  {
LABEL_7:
    uint64_t v31 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointFormatStyle<Double>?);
    memcpy(v11, v12, *(void *)(*(void *)(v31 - 8) + 64LL));
    goto LABEL_17;
  }

  unint64_t v61 = v9;
  *(_OWORD *)uint64_t v11 = *(_OWORD *)v12;
  uint64_t v18 = *(int *)(v13 + 36);
  uint64_t v19 = (char *)v11 + v18;
  __int128 v20 = (char *)v12 + v18;
  uint64_t v21 = *(void *)v20;
  v19[8] = v20[8];
  *(void *)uint64_t v19 = v21;
  __int128 v22 = *((_OWORD *)v20 + 1);
  __int128 v23 = *((_OWORD *)v20 + 2);
  __int128 v24 = *((_OWORD *)v20 + 3);
  *(_OWORD *)(v19 + 57) = *(_OWORD *)(v20 + 57);
  *((_OWORD *)v19 + 2) = v23;
  *((_OWORD *)v19 + 3) = v24;
  *((_OWORD *)v19 + 1) = v22;
  v19[73] = v20[73];
  LOWORD(v21) = *((_WORD *)v20 + 37);
  v19[76] = v20[76];
  *((_WORD *)v19 + 37) = v21;
  v19[77] = v20[77];
  uint64_t v25 = type metadata accessor for NumberFormatStyleConfiguration.Collection(0LL);
  uint64_t v26 = *(int *)(v25 + 36);
  __unint64_t dst = &v19[v26];
  uint64_t v59 = v25;
  uint64_t v27 = &v20[v26];
  uint64_t v28 = type metadata accessor for FloatingPointRoundingRule();
  uint64_t v57 = *(void *)(v28 - 8);
  __int128 v29 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v57 + 48);
  swift_unknownObjectRetain();
  if (v29(v27, 1LL, v28))
  {
    uint64_t v30 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
    memcpy(__dst, v27, *(void *)(*(void *)(v30 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v57 + 16))(__dst, v27, v28);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v57 + 56))(__dst, 0LL, 1LL, v28);
  }

  uint64_t v9 = v61;
  uint64_t v47 = *(int *)(v59 + 40);
  __int128 v48 = &v19[v47];
  unint64_t v49 = &v20[v47];
  uint64_t v50 = *(void *)v49;
  v48[8] = v49[8];
  *(void *)__int128 v48 = v50;
  v19[*(int *)(v59 + 44)] = v20[*(int *)(v59 + 44)];
  (*(void (**)(void *, void, uint64_t, uint64_t))(v14 + 56))(v11, 0LL, 1LL, v13);
LABEL_17:
  *(_BYTE *)(a1 + v9[9]) = *(_BYTE *)(a2 + v9[9]);
  *(_BYTE *)(a1 + v9[10]) = *(_BYTE *)(a2 + v9[10]);
  return a1;
}

uint64_t initializeWithTake for Measurement<>.AttributedStyle(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  uint64_t v6 = (int *)type metadata accessor for Measurement<>.FormatStyle(0LL, *(void *)(a3 + 16), a3, a4);
  uint64_t v7 = v6[8];
  uint64_t v8 = (_OWORD *)(a1 + v7);
  uint64_t v9 = (_OWORD *)(a2 + v7);
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointFormatStyle<Double>);
  uint64_t v11 = *(void *)(v10 - 8);
  if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v11 + 48))(v9, 1LL, v10))
  {
    uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointFormatStyle<Double>?);
    memcpy(v8, v9, *(void *)(*(void *)(v12 - 8) + 64LL));
  }

  else
  {
    uint64_t v28 = v11;
    *uint64_t v8 = *v9;
    uint64_t v13 = *(int *)(v10 + 36);
    uint64_t v14 = (char *)v8 + v13;
    uint64_t v15 = (char *)v9 + v13;
    v14[8] = v15[8];
    *(void *)uint64_t v14 = *(void *)v15;
    *(_OWORD *)(v14 + 57) = *(_OWORD *)(v15 + 57);
    __int128 v16 = *((_OWORD *)v15 + 3);
    __int128 v17 = *((_OWORD *)v15 + 1);
    *((_OWORD *)v14 + 2) = *((_OWORD *)v15 + 2);
    *((_OWORD *)v14 + 3) = v16;
    *((_OWORD *)v14 + 1) = v17;
    v14[73] = v15[73];
    LOWORD(v13) = *((_WORD *)v15 + 37);
    v14[76] = v15[76];
    *((_WORD *)v14 + 37) = v13;
    v14[77] = v15[77];
    uint64_t v27 = (int *)type metadata accessor for NumberFormatStyleConfiguration.Collection(0LL);
    uint64_t v18 = v27[9];
    __unint64_t dst = &v14[v18];
    uint64_t v19 = &v15[v18];
    uint64_t v20 = type metadata accessor for FloatingPointRoundingRule();
    uint64_t v21 = *(void *)(v20 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v21 + 48))(v19, 1LL, v20))
    {
      uint64_t v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
      memcpy(__dst, v19, *(void *)(*(void *)(v22 - 8) + 64LL));
    }

    else
    {
      (*(void (**)(char *, char *, uint64_t))(v21 + 32))(__dst, v19, v20);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v21 + 56))(__dst, 0LL, 1LL, v20);
    }

    uint64_t v23 = v27[10];
    __int128 v24 = &v14[v23];
    uint64_t v25 = &v15[v23];
    *(void *)__int128 v24 = *(void *)v25;
    v24[8] = v25[8];
    v14[v27[11]] = v15[v27[11]];
    (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v28 + 56))(v8, 0LL, 1LL, v10);
  }

  *(_BYTE *)(a1 + v6[9]) = *(_BYTE *)(a2 + v6[9]);
  *(_BYTE *)(a1 + v6[10]) = *(_BYTE *)(a2 + v6[10]);
  return a1;
}

uint64_t assignWithTake for Measurement<>.AttributedStyle(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  uint64_t v6 = *(void *)(a2 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_unknownObjectRelease();
  *(void *)(a1 + 16) = v6;
  uint64_t v9 = (int *)type metadata accessor for Measurement<>.FormatStyle(0LL, *(void *)(a3 + 16), v7, v8);
  uint64_t v10 = v9[8];
  uint64_t v11 = (void *)(a1 + v10);
  uint64_t v12 = (void *)(a2 + v10);
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointFormatStyle<Double>);
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v14 + 48);
  int v16 = v15(v11, 1LL, v13);
  int v17 = v15(v12, 1LL, v13);
  if (!v16)
  {
    if (v17)
    {
      outlined destroy of Any?( (uint64_t)v11,  &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>);
      goto LABEL_7;
    }

    uint64_t v55 = v9;
    uint64_t v30 = v12[1];
    *uint64_t v11 = *v12;
    swift_unknownObjectRelease();
    v11[1] = v30;
    uint64_t v31 = *(int *)(v13 + 36);
    uint64_t v32 = (char *)v11 + v31;
    uint64_t v33 = (char *)v12 + v31;
    *(void *)uint64_t v32 = *(void *)((char *)v12 + v31);
    v32[8] = *((_BYTE *)v12 + v31 + 8);
    __int128 v34 = *(_OWORD *)((char *)v12 + v31 + 32);
    *((_OWORD *)v32 + 1) = *(_OWORD *)((char *)v12 + v31 + 16);
    *((_OWORD *)v32 + 2) = v34;
    *((_OWORD *)v32 + 3) = *(_OWORD *)((char *)v12 + v31 + 48);
    *(_OWORD *)(v32 + 57) = *(_OWORD *)((char *)v12 + v31 + 57);
    v32[73] = *((_BYTE *)v12 + v31 + 73);
    v32[76] = *((_BYTE *)v12 + v31 + 76);
    *((_WORD *)v32 + 37) = *(_WORD *)((char *)v12 + v31 + 74);
    v32[77] = *((_BYTE *)v12 + v31 + 77);
    __dsta = (int *)type metadata accessor for NumberFormatStyleConfiguration.Collection(0LL);
    uint64_t v35 = __dsta[9];
    __int128 v36 = &v32[v35];
    __int128 v37 = &v33[v35];
    uint64_t v38 = type metadata accessor for FloatingPointRoundingRule();
    uint64_t v39 = *(void *)(v38 - 8);
    char v40 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v39 + 48);
    int v41 = v40(v36, 1LL, v38);
    int v42 = v40(v37, 1LL, v38);
    if (v41)
    {
      if (!v42)
      {
        (*(void (**)(char *, char *, uint64_t))(v39 + 32))(v36, v37, v38);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v39 + 56))(v36, 0LL, 1LL, v38);
LABEL_16:
        uint64_t v9 = v55;
        uint64_t v47 = __dsta[10];
        __int128 v48 = &v32[v47];
        unint64_t v49 = &v33[v47];
        *(void *)__int128 v48 = *(void *)v49;
        v48[8] = v49[8];
        v32[__dsta[11]] = v33[__dsta[11]];
        goto LABEL_17;
      }
    }

    else
    {
      if (!v42)
      {
        (*(void (**)(char *, char *, uint64_t))(v39 + 40))(v36, v37, v38);
        goto LABEL_16;
      }

      (*(void (**)(char *, uint64_t))(v39 + 8))(v36, v38);
    }

    uint64_t v46 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
    memcpy(v36, v37, *(void *)(*(void *)(v46 - 8) + 64LL));
    goto LABEL_16;
  }

  if (v17)
  {
LABEL_7:
    uint64_t v29 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointFormatStyle<Double>?);
    memcpy(v11, v12, *(void *)(*(void *)(v29 - 8) + 64LL));
    goto LABEL_17;
  }

  __int128 v54 = v9;
  *(_OWORD *)uint64_t v11 = *(_OWORD *)v12;
  uint64_t v18 = *(int *)(v13 + 36);
  uint64_t v19 = (char *)v11 + v18;
  uint64_t v20 = (char *)v12 + v18;
  v19[8] = v20[8];
  *(void *)uint64_t v19 = *(void *)v20;
  *(_OWORD *)(v19 + 57) = *(_OWORD *)(v20 + 57);
  __int128 v21 = *((_OWORD *)v20 + 3);
  __int128 v22 = *((_OWORD *)v20 + 1);
  *((_OWORD *)v19 + 2) = *((_OWORD *)v20 + 2);
  *((_OWORD *)v19 + 3) = v21;
  *((_OWORD *)v19 + 1) = v22;
  v19[73] = v20[73];
  LOWORD(v18) = *((_WORD *)v20 + 37);
  v19[76] = v20[76];
  *((_WORD *)v19 + 37) = v18;
  v19[77] = v20[77];
  uint64_t v23 = type metadata accessor for NumberFormatStyleConfiguration.Collection(0LL);
  uint64_t v24 = *(int *)(v23 + 36);
  uint64_t v51 = v23;
  __unint64_t dst = &v19[v24];
  uint64_t v25 = &v20[v24];
  uint64_t v26 = type metadata accessor for FloatingPointRoundingRule();
  uint64_t v27 = *(void *)(v26 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v27 + 48))(v25, 1LL, v26))
  {
    uint64_t v28 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
    memcpy(__dst, v25, *(void *)(*(void *)(v28 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v27 + 32))(__dst, v25, v26);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v27 + 56))(__dst, 0LL, 1LL, v26);
  }

  uint64_t v43 = *(int *)(v51 + 40);
  uint64_t v44 = &v19[v43];
  int v45 = &v20[v43];
  *(void *)uint64_t v44 = *(void *)v45;
  v44[8] = v45[8];
  v19[*(int *)(v51 + 44)] = v20[*(int *)(v51 + 44)];
  (*(void (**)(void *, void, uint64_t, uint64_t))(v14 + 56))(v11, 0LL, 1LL, v13);
  uint64_t v9 = v54;
LABEL_17:
  *(_BYTE *)(a1 + v9[9]) = *(_BYTE *)(a2 + v9[9]);
  *(_BYTE *)(a1 + v9[10]) = *(_BYTE *)(a2 + v9[10]);
  return a1;
}

uint64_t getEnumTagSinglePayload for Measurement<>.AttributedStyle()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_1830A13B0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = type metadata accessor for Measurement<>.FormatStyle(0LL, *(void *)(a3 + 16), a3, a4);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 48LL))(a1, a2, v6);
}

uint64_t storeEnumTagSinglePayload for Measurement<>.AttributedStyle()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_1830A13FC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = type metadata accessor for Measurement<>.FormatStyle(0LL, *(void *)(a4 + 16), a3, a4);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 56LL))(a1, a2, a2, v6);
}

uint64_t destroy for Measurement<>.AttributedStyle<>.ByteCount()
{
  return swift_unknownObjectRelease();
}

uint64_t initializeWithCopy for Measurement<>.AttributedStyle<>.ByteCount(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(_WORD *)(a1 + 16) = *(_WORD *)(a2 + 16);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  swift_unknownObjectRetain();
  return a1;
}

uint64_t assignWithCopy for Measurement<>.AttributedStyle<>.ByteCount(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_BYTE *)(a1 + 17) = *(_BYTE *)(a2 + 17);
  uint64_t v3 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  *(void *)(a1 + 32) = v3;
  return a1;
}

uint64_t assignWithTake for Measurement<>.AttributedStyle<>.ByteCount(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_BYTE *)(a1 + 17) = *(_BYTE *)(a2 + 17);
  swift_unknownObjectRelease();
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  return a1;
}

uint64_t getEnumTagSinglePayload for Measurement<>.AttributedStyle<>.ByteCount(uint64_t a1, int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0 && *(_BYTE *)(a1 + 40)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 24);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD((*(void (**)(char *))(v1 + 16))((char *)&v4 - v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for Measurement<>.AttributedStyle<>.ByteCount( uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(_BYTE *)(result + 40) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 24) = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 40) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

uint64_t type metadata instantiation function for Measurement<>.AttributedStyle<>.ByteCount.CodingKeys()
{
  return swift_allocateGenericValueMetadata();
}

uint64_t storeEnumTagSinglePayload for Measurement<>.AttributedStyle<>.ByteCount.CodingKeys( uint64_t a1, int a2, int a3)
{
  else {
    int v3 = 2;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2) {
    return ((uint64_t (*)(void))((char *)sub_1830A1624 + 4 * byte_18379F390[v4]))();
  }
  else {
    return ((uint64_t (*)(void))((char *)sub_1830A1644 + 4 * byte_18379F395[v4]))();
  }
}

_BYTE *sub_1830A1624(_BYTE *result, char a2)
{
  *uint64_t result = a2;
  return result;
}

_BYTE *sub_1830A1644(_BYTE *result)
{
  *uint64_t result = 0;
  return result;
}

_DWORD *sub_1830A164C(_DWORD *result, int a2)
{
  *uint64_t result = a2;
  return result;
}

_WORD *sub_1830A1654(_WORD *result, __int16 a2)
{
  *uint64_t result = a2;
  return result;
}

_WORD *sub_1830A165C(_WORD *result)
{
  *uint64_t result = 0;
  return result;
}

_DWORD *sub_1830A1664(_DWORD *result)
{
  *uint64_t result = 0;
  return result;
}

void base witness table accessor for Equatable in Measurement<A><>.AttributedStyle.CodingKeys()
{
}

uint64_t base witness table accessor for Equatable in Measurement<A><>.AttributedStyle<>.ByteCount.CodingKeys()
{
  return lazy protocol witness table accessor for type Measurement<NSUnitInformationStorage><>.AttributedStyle<>.ByteCount.CodingKeys and conformance Measurement<A><>.AttributedStyle<>.ByteCount.CodingKeys( &lazy protocol witness table cache variable for type Measurement<NSUnitInformationStorage><>.AttributedStyle<>.ByteCount.CodingKeys and conformance Measurement<A><>.AttributedStyle<>.ByteCount.CodingKeys,  &lazy cache variable for type metadata for Measurement<NSUnitInformationStorage><>.AttributedStyle<>.ByteCount.CodingKeys,  (uint64_t (*)(void))type metadata accessor for Measurement<>.AttributedStyle<>.ByteCount.CodingKeys,  (uint64_t)&protocol conformance descriptor for Measurement<A><>.AttributedStyle<>.ByteCount.CodingKeys);
}

uint64_t base witness table accessor for CustomDebugStringConvertible in Measurement<A><>.AttributedStyle<>.ByteCount.CodingKeys()
{
  return lazy protocol witness table accessor for type Measurement<NSUnitInformationStorage><>.AttributedStyle<>.ByteCount.CodingKeys and conformance Measurement<A><>.AttributedStyle<>.ByteCount.CodingKeys( &lazy protocol witness table cache variable for type Measurement<NSUnitInformationStorage><>.AttributedStyle<>.ByteCount.CodingKeys and conformance Measurement<A><>.AttributedStyle<>.ByteCount.CodingKeys,  &lazy cache variable for type metadata for Measurement<NSUnitInformationStorage><>.AttributedStyle<>.ByteCount.CodingKeys,  (uint64_t (*)(void))type metadata accessor for Measurement<>.AttributedStyle<>.ByteCount.CodingKeys,  (uint64_t)&protocol conformance descriptor for Measurement<A><>.AttributedStyle<>.ByteCount.CodingKeys);
}

uint64_t base witness table accessor for CustomStringConvertible in Measurement<A><>.AttributedStyle<>.ByteCount.CodingKeys()
{
  return lazy protocol witness table accessor for type Measurement<NSUnitInformationStorage><>.AttributedStyle<>.ByteCount.CodingKeys and conformance Measurement<A><>.AttributedStyle<>.ByteCount.CodingKeys( &lazy protocol witness table cache variable for type Measurement<NSUnitInformationStorage><>.AttributedStyle<>.ByteCount.CodingKeys and conformance Measurement<A><>.AttributedStyle<>.ByteCount.CodingKeys,  &lazy cache variable for type metadata for Measurement<NSUnitInformationStorage><>.AttributedStyle<>.ByteCount.CodingKeys,  (uint64_t (*)(void))type metadata accessor for Measurement<>.AttributedStyle<>.ByteCount.CodingKeys,  (uint64_t)&protocol conformance descriptor for Measurement<A><>.AttributedStyle<>.ByteCount.CodingKeys);
}

void base witness table accessor for CustomDebugStringConvertible in Measurement<A><>.AttributedStyle.CodingKeys()
{
}

void base witness table accessor for CustomStringConvertible in Measurement<A><>.AttributedStyle.CodingKeys()
{
}

unint64_t lazy protocol witness table accessor for type AttributeScopes.FoundationAttributes.DateFieldAttribute.Field and conformance AttributeScopes.FoundationAttributes.DateFieldAttribute.Field()
{
  unint64_t result = lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.DateFieldAttribute.Field and conformance AttributeScopes.FoundationAttributes.DateFieldAttribute.Field;
  if (!lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.DateFieldAttribute.Field and conformance AttributeScopes.FoundationAttributes.DateFieldAttribute.Field)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for AttributeScopes.FoundationAttributes.DateFieldAttribute.Field,  &type metadata for AttributeScopes.FoundationAttributes.DateFieldAttribute.Field);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.DateFieldAttribute.Field and conformance AttributeScopes.FoundationAttributes.DateFieldAttribute.Field);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.DateFieldAttribute.Field and conformance AttributeScopes.FoundationAttributes.DateFieldAttribute.Field;
  if (!lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.DateFieldAttribute.Field and conformance AttributeScopes.FoundationAttributes.DateFieldAttribute.Field)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for AttributeScopes.FoundationAttributes.DateFieldAttribute.Field,  &type metadata for AttributeScopes.FoundationAttributes.DateFieldAttribute.Field);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.DateFieldAttribute.Field and conformance AttributeScopes.FoundationAttributes.DateFieldAttribute.Field);
  }

  return result;
}

unint64_t lazy protocol witness table accessor for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Component and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Component()
{
  unint64_t result = lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Component and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Component;
  if (!lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Component and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Component)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for AttributeScopes.FoundationAttributes.ByteCountAttribute.Component,  &type metadata for AttributeScopes.FoundationAttributes.ByteCountAttribute.Component);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Component and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Component);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Component and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Component;
  if (!lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Component and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Component)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for AttributeScopes.FoundationAttributes.ByteCountAttribute.Component,  &type metadata for AttributeScopes.FoundationAttributes.ByteCountAttribute.Component);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Component and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Component);
  }

  return result;
}

unint64_t lazy protocol witness table accessor for type AttributeScopes.FoundationAttributes.NumberFormatAttributes.NumberPartAttribute.NumberPart and conformance AttributeScopes.FoundationAttributes.NumberFormatAttributes.NumberPartAttribute.NumberPart()
{
  unint64_t result = lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.NumberFormatAttributes.NumberPartAttribute.NumberPart and conformance AttributeScopes.FoundationAttributes.NumberFormatAttributes.NumberPartAttribute.NumberPart;
  if (!lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.NumberFormatAttributes.NumberPartAttribute.NumberPart and conformance AttributeScopes.FoundationAttributes.NumberFormatAttributes.NumberPartAttribute.NumberPart)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for AttributeScopes.FoundationAttributes.NumberFormatAttributes.NumberPartAttribute.NumberPart,  &type metadata for AttributeScopes.FoundationAttributes.NumberFormatAttributes.NumberPartAttribute.NumberPart);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.NumberFormatAttributes.NumberPartAttribute.NumberPart and conformance AttributeScopes.FoundationAttributes.NumberFormatAttributes.NumberPartAttribute.NumberPart);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.NumberFormatAttributes.NumberPartAttribute.NumberPart and conformance AttributeScopes.FoundationAttributes.NumberFormatAttributes.NumberPartAttribute.NumberPart;
  if (!lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.NumberFormatAttributes.NumberPartAttribute.NumberPart and conformance AttributeScopes.FoundationAttributes.NumberFormatAttributes.NumberPartAttribute.NumberPart)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for AttributeScopes.FoundationAttributes.NumberFormatAttributes.NumberPartAttribute.NumberPart,  &type metadata for AttributeScopes.FoundationAttributes.NumberFormatAttributes.NumberPartAttribute.NumberPart);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.NumberFormatAttributes.NumberPartAttribute.NumberPart and conformance AttributeScopes.FoundationAttributes.NumberFormatAttributes.NumberPartAttribute.NumberPart);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.NumberFormatAttributes.NumberPartAttribute.NumberPart and conformance AttributeScopes.FoundationAttributes.NumberFormatAttributes.NumberPartAttribute.NumberPart;
  if (!lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.NumberFormatAttributes.NumberPartAttribute.NumberPart and conformance AttributeScopes.FoundationAttributes.NumberFormatAttributes.NumberPartAttribute.NumberPart)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for AttributeScopes.FoundationAttributes.NumberFormatAttributes.NumberPartAttribute.NumberPart,  &type metadata for AttributeScopes.FoundationAttributes.NumberFormatAttributes.NumberPartAttribute.NumberPart);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.NumberFormatAttributes.NumberPartAttribute.NumberPart and conformance AttributeScopes.FoundationAttributes.NumberFormatAttributes.NumberPartAttribute.NumberPart);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.NumberFormatAttributes.NumberPartAttribute.NumberPart and conformance AttributeScopes.FoundationAttributes.NumberFormatAttributes.NumberPartAttribute.NumberPart;
  if (!lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.NumberFormatAttributes.NumberPartAttribute.NumberPart and conformance AttributeScopes.FoundationAttributes.NumberFormatAttributes.NumberPartAttribute.NumberPart)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for AttributeScopes.FoundationAttributes.NumberFormatAttributes.NumberPartAttribute.NumberPart,  &type metadata for AttributeScopes.FoundationAttributes.NumberFormatAttributes.NumberPartAttribute.NumberPart);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.NumberFormatAttributes.NumberPartAttribute.NumberPart and conformance AttributeScopes.FoundationAttributes.NumberFormatAttributes.NumberPartAttribute.NumberPart);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.NumberFormatAttributes.NumberPartAttribute.NumberPart and conformance AttributeScopes.FoundationAttributes.NumberFormatAttributes.NumberPartAttribute.NumberPart;
  if (!lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.NumberFormatAttributes.NumberPartAttribute.NumberPart and conformance AttributeScopes.FoundationAttributes.NumberFormatAttributes.NumberPartAttribute.NumberPart)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for AttributeScopes.FoundationAttributes.NumberFormatAttributes.NumberPartAttribute.NumberPart,  &type metadata for AttributeScopes.FoundationAttributes.NumberFormatAttributes.NumberPartAttribute.NumberPart);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.NumberFormatAttributes.NumberPartAttribute.NumberPart and conformance AttributeScopes.FoundationAttributes.NumberFormatAttributes.NumberPartAttribute.NumberPart);
  }

  return result;
}

unint64_t lazy protocol witness table accessor for type AttributeScopes.FoundationAttributes.NumberFormatAttributes.SymbolAttribute.Symbol and conformance AttributeScopes.FoundationAttributes.NumberFormatAttributes.SymbolAttribute.Symbol()
{
  unint64_t result = lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.NumberFormatAttributes.SymbolAttribute.Symbol and conformance AttributeScopes.FoundationAttributes.NumberFormatAttributes.SymbolAttribute.Symbol;
  if (!lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.NumberFormatAttributes.SymbolAttribute.Symbol and conformance AttributeScopes.FoundationAttributes.NumberFormatAttributes.SymbolAttribute.Symbol)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for AttributeScopes.FoundationAttributes.NumberFormatAttributes.SymbolAttribute.Symbol,  &type metadata for AttributeScopes.FoundationAttributes.NumberFormatAttributes.SymbolAttribute.Symbol);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.NumberFormatAttributes.SymbolAttribute.Symbol and conformance AttributeScopes.FoundationAttributes.NumberFormatAttributes.SymbolAttribute.Symbol);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.NumberFormatAttributes.SymbolAttribute.Symbol and conformance AttributeScopes.FoundationAttributes.NumberFormatAttributes.SymbolAttribute.Symbol;
  if (!lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.NumberFormatAttributes.SymbolAttribute.Symbol and conformance AttributeScopes.FoundationAttributes.NumberFormatAttributes.SymbolAttribute.Symbol)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for AttributeScopes.FoundationAttributes.NumberFormatAttributes.SymbolAttribute.Symbol,  &type metadata for AttributeScopes.FoundationAttributes.NumberFormatAttributes.SymbolAttribute.Symbol);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.NumberFormatAttributes.SymbolAttribute.Symbol and conformance AttributeScopes.FoundationAttributes.NumberFormatAttributes.SymbolAttribute.Symbol);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.NumberFormatAttributes.SymbolAttribute.Symbol and conformance AttributeScopes.FoundationAttributes.NumberFormatAttributes.SymbolAttribute.Symbol;
  if (!lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.NumberFormatAttributes.SymbolAttribute.Symbol and conformance AttributeScopes.FoundationAttributes.NumberFormatAttributes.SymbolAttribute.Symbol)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for AttributeScopes.FoundationAttributes.NumberFormatAttributes.SymbolAttribute.Symbol,  &type metadata for AttributeScopes.FoundationAttributes.NumberFormatAttributes.SymbolAttribute.Symbol);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.NumberFormatAttributes.SymbolAttribute.Symbol and conformance AttributeScopes.FoundationAttributes.NumberFormatAttributes.SymbolAttribute.Symbol);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.NumberFormatAttributes.SymbolAttribute.Symbol and conformance AttributeScopes.FoundationAttributes.NumberFormatAttributes.SymbolAttribute.Symbol;
  if (!lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.NumberFormatAttributes.SymbolAttribute.Symbol and conformance AttributeScopes.FoundationAttributes.NumberFormatAttributes.SymbolAttribute.Symbol)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for AttributeScopes.FoundationAttributes.NumberFormatAttributes.SymbolAttribute.Symbol,  &type metadata for AttributeScopes.FoundationAttributes.NumberFormatAttributes.SymbolAttribute.Symbol);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.NumberFormatAttributes.SymbolAttribute.Symbol and conformance AttributeScopes.FoundationAttributes.NumberFormatAttributes.SymbolAttribute.Symbol);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.NumberFormatAttributes.SymbolAttribute.Symbol and conformance AttributeScopes.FoundationAttributes.NumberFormatAttributes.SymbolAttribute.Symbol;
  if (!lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.NumberFormatAttributes.SymbolAttribute.Symbol and conformance AttributeScopes.FoundationAttributes.NumberFormatAttributes.SymbolAttribute.Symbol)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for AttributeScopes.FoundationAttributes.NumberFormatAttributes.SymbolAttribute.Symbol,  &type metadata for AttributeScopes.FoundationAttributes.NumberFormatAttributes.SymbolAttribute.Symbol);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.NumberFormatAttributes.SymbolAttribute.Symbol and conformance AttributeScopes.FoundationAttributes.NumberFormatAttributes.SymbolAttribute.Symbol);
  }

  return result;
}

unint64_t lazy protocol witness table accessor for type AttributeScopes.FoundationAttributes.MeasurementAttribute.Component and conformance AttributeScopes.FoundationAttributes.MeasurementAttribute.Component()
{
  unint64_t result = lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.MeasurementAttribute.Component and conformance AttributeScopes.FoundationAttributes.MeasurementAttribute.Component;
  if (!lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.MeasurementAttribute.Component and conformance AttributeScopes.FoundationAttributes.MeasurementAttribute.Component)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for AttributeScopes.FoundationAttributes.MeasurementAttribute.Component,  &type metadata for AttributeScopes.FoundationAttributes.MeasurementAttribute.Component);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.MeasurementAttribute.Component and conformance AttributeScopes.FoundationAttributes.MeasurementAttribute.Component);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.MeasurementAttribute.Component and conformance AttributeScopes.FoundationAttributes.MeasurementAttribute.Component;
  if (!lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.MeasurementAttribute.Component and conformance AttributeScopes.FoundationAttributes.MeasurementAttribute.Component)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for AttributeScopes.FoundationAttributes.MeasurementAttribute.Component,  &type metadata for AttributeScopes.FoundationAttributes.MeasurementAttribute.Component);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.MeasurementAttribute.Component and conformance AttributeScopes.FoundationAttributes.MeasurementAttribute.Component);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.MeasurementAttribute.Component and conformance AttributeScopes.FoundationAttributes.MeasurementAttribute.Component;
  if (!lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.MeasurementAttribute.Component and conformance AttributeScopes.FoundationAttributes.MeasurementAttribute.Component)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for AttributeScopes.FoundationAttributes.MeasurementAttribute.Component,  &type metadata for AttributeScopes.FoundationAttributes.MeasurementAttribute.Component);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.MeasurementAttribute.Component and conformance AttributeScopes.FoundationAttributes.MeasurementAttribute.Component);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.MeasurementAttribute.Component and conformance AttributeScopes.FoundationAttributes.MeasurementAttribute.Component;
  if (!lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.MeasurementAttribute.Component and conformance AttributeScopes.FoundationAttributes.MeasurementAttribute.Component)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for AttributeScopes.FoundationAttributes.MeasurementAttribute.Component,  &type metadata for AttributeScopes.FoundationAttributes.MeasurementAttribute.Component);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.MeasurementAttribute.Component and conformance AttributeScopes.FoundationAttributes.MeasurementAttribute.Component);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.MeasurementAttribute.Component and conformance AttributeScopes.FoundationAttributes.MeasurementAttribute.Component;
  if (!lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.MeasurementAttribute.Component and conformance AttributeScopes.FoundationAttributes.MeasurementAttribute.Component)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for AttributeScopes.FoundationAttributes.MeasurementAttribute.Component,  &type metadata for AttributeScopes.FoundationAttributes.MeasurementAttribute.Component);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type AttributeScopes.FoundationAttributes.MeasurementAttribute.Component and conformance AttributeScopes.FoundationAttributes.MeasurementAttribute.Component);
  }

  return result;
}

BOOL static PredicateExpressions.ComparisonOperator.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

void PredicateExpressions.ComparisonOperator.hash(into:)()
{
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance PredicateExpressions.ComparisonOperator.CodingKeys()
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1830A1900 + 4 * byte_18379F7E0[*v0]))( 0x6E6168547373656CLL,  0xE800000000000000LL);
}

  ;
}

uint64_t sub_1830A1914()
{
  return 0x5472657461657267LL;
}

unint64_t sub_1830A1934()
{
  return 0xD000000000000012LL;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance PredicateExpressions.ComparisonOperator.CodingKeys@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result = specialized PredicateExpressions.ComparisonOperator.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance PredicateExpressions.ComparisonOperator.CodingKeys()
{
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PredicateExpressions.ComparisonOperator.CodingKeys()
{
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance PredicateExpressions.ComparisonOperator.GreaterThanCodingKeys()
{
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PredicateExpressions.ComparisonOperator.GreaterThanCodingKeys()
{
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance PredicateExpressions.ComparisonOperator.GreaterThanOrEqualCodingKeys()
{
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PredicateExpressions.ComparisonOperator.GreaterThanOrEqualCodingKeys()
{
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance PredicateExpressions.ComparisonOperator.LessThanCodingKeys()
{
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PredicateExpressions.ComparisonOperator.LessThanCodingKeys()
{
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance PredicateExpressions.ComparisonOperator.LessThanOrEqualCodingKeys()
{
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PredicateExpressions.ComparisonOperator.LessThanOrEqualCodingKeys()
{
  return CodingKey.debugDescription.getter();
}

void PredicateExpressions.ComparisonOperator.encode(to:)(void *a1)
{
  unint64_t v2 = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<PredicateExpressions.ComparisonOperator.GreaterThanOrEqualCodingKeys>);
  uint64_t v19 = *(void *)(v4 - 8);
  uint64_t v20 = v4;
  MEMORY[0x1895F8858](v4);
  uint64_t v18 = (char *)&v11 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<PredicateExpressions.ComparisonOperator.GreaterThanCodingKeys>);
  uint64_t v16 = *(void *)(v6 - 8);
  uint64_t v17 = v6;
  MEMORY[0x1895F8858](v6);
  uint64_t v15 = (char *)&v11 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<PredicateExpressions.ComparisonOperator.LessThanOrEqualCodingKeys>);
  uint64_t v13 = *(void *)(v8 - 8);
  uint64_t v14 = v8;
  MEMORY[0x1895F8858](v8);
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<PredicateExpressions.ComparisonOperator.LessThanCodingKeys>);
  MEMORY[0x1895F8858](v12);
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<PredicateExpressions.ComparisonOperator.CodingKeys>);
  uint64_t v21 = *(void *)(v9 - 8);
  MEMORY[0x1895F8858](v9);
  uint64_t v10 = *v2;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type PredicateExpressions.ComparisonOperator.CodingKeys and conformance PredicateExpressions.ComparisonOperator.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  __asm { BR              X9 }

uint64_t sub_1830A1CBC()
{
  *(_BYTE *)(v4 - 68) = 0;
  lazy protocol witness table accessor for type PredicateExpressions.ComparisonOperator.LessThanCodingKeys and conformance PredicateExpressions.ComparisonOperator.LessThanCodingKeys();
  KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
  (*(void (**)(uint64_t, void))(v3 + 8))(v2, *(void *)(v4 - 168));
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v4 - 96) + 8LL))(v1, v0);
}

unint64_t lazy protocol witness table accessor for type PredicateExpressions.ComparisonOperator.CodingKeys and conformance PredicateExpressions.ComparisonOperator.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type PredicateExpressions.ComparisonOperator.CodingKeys and conformance PredicateExpressions.ComparisonOperator.CodingKeys;
  if (!lazy protocol witness table cache variable for type PredicateExpressions.ComparisonOperator.CodingKeys and conformance PredicateExpressions.ComparisonOperator.CodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for PredicateExpressions.ComparisonOperator.CodingKeys,  &unk_189C79EA0);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type PredicateExpressions.ComparisonOperator.CodingKeys and conformance PredicateExpressions.ComparisonOperator.CodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type PredicateExpressions.ComparisonOperator.CodingKeys and conformance PredicateExpressions.ComparisonOperator.CodingKeys;
  if (!lazy protocol witness table cache variable for type PredicateExpressions.ComparisonOperator.CodingKeys and conformance PredicateExpressions.ComparisonOperator.CodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for PredicateExpressions.ComparisonOperator.CodingKeys,  &unk_189C79EA0);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type PredicateExpressions.ComparisonOperator.CodingKeys and conformance PredicateExpressions.ComparisonOperator.CodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type PredicateExpressions.ComparisonOperator.CodingKeys and conformance PredicateExpressions.ComparisonOperator.CodingKeys;
  if (!lazy protocol witness table cache variable for type PredicateExpressions.ComparisonOperator.CodingKeys and conformance PredicateExpressions.ComparisonOperator.CodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for PredicateExpressions.ComparisonOperator.CodingKeys,  &unk_189C79EA0);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type PredicateExpressions.ComparisonOperator.CodingKeys and conformance PredicateExpressions.ComparisonOperator.CodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type PredicateExpressions.ComparisonOperator.CodingKeys and conformance PredicateExpressions.ComparisonOperator.CodingKeys;
  if (!lazy protocol witness table cache variable for type PredicateExpressions.ComparisonOperator.CodingKeys and conformance PredicateExpressions.ComparisonOperator.CodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for PredicateExpressions.ComparisonOperator.CodingKeys,  &unk_189C79EA0);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type PredicateExpressions.ComparisonOperator.CodingKeys and conformance PredicateExpressions.ComparisonOperator.CodingKeys);
  }

  return result;
}

unint64_t lazy protocol witness table accessor for type PredicateExpressions.ComparisonOperator.GreaterThanOrEqualCodingKeys and conformance PredicateExpressions.ComparisonOperator.GreaterThanOrEqualCodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type PredicateExpressions.ComparisonOperator.GreaterThanOrEqualCodingKeys and conformance PredicateExpressions.ComparisonOperator.GreaterThanOrEqualCodingKeys;
  if (!lazy protocol witness table cache variable for type PredicateExpressions.ComparisonOperator.GreaterThanOrEqualCodingKeys and conformance PredicateExpressions.ComparisonOperator.GreaterThanOrEqualCodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for PredicateExpressions.ComparisonOperator.GreaterThanOrEqualCodingKeys,  &unk_189C79F20);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type PredicateExpressions.ComparisonOperator.GreaterThanOrEqualCodingKeys and conformance PredicateExpressions.ComparisonOperator.GreaterThanOrEqualCodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type PredicateExpressions.ComparisonOperator.GreaterThanOrEqualCodingKeys and conformance PredicateExpressions.ComparisonOperator.GreaterThanOrEqualCodingKeys;
  if (!lazy protocol witness table cache variable for type PredicateExpressions.ComparisonOperator.GreaterThanOrEqualCodingKeys and conformance PredicateExpressions.ComparisonOperator.GreaterThanOrEqualCodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for PredicateExpressions.ComparisonOperator.GreaterThanOrEqualCodingKeys,  &unk_189C79F20);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type PredicateExpressions.ComparisonOperator.GreaterThanOrEqualCodingKeys and conformance PredicateExpressions.ComparisonOperator.GreaterThanOrEqualCodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type PredicateExpressions.ComparisonOperator.GreaterThanOrEqualCodingKeys and conformance PredicateExpressions.ComparisonOperator.GreaterThanOrEqualCodingKeys;
  if (!lazy protocol witness table cache variable for type PredicateExpressions.ComparisonOperator.GreaterThanOrEqualCodingKeys and conformance PredicateExpressions.ComparisonOperator.GreaterThanOrEqualCodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for PredicateExpressions.ComparisonOperator.GreaterThanOrEqualCodingKeys,  &unk_189C79F20);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type PredicateExpressions.ComparisonOperator.GreaterThanOrEqualCodingKeys and conformance PredicateExpressions.ComparisonOperator.GreaterThanOrEqualCodingKeys);
  }

  return result;
}

unint64_t lazy protocol witness table accessor for type PredicateExpressions.ComparisonOperator.GreaterThanCodingKeys and conformance PredicateExpressions.ComparisonOperator.GreaterThanCodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type PredicateExpressions.ComparisonOperator.GreaterThanCodingKeys and conformance PredicateExpressions.ComparisonOperator.GreaterThanCodingKeys;
  if (!lazy protocol witness table cache variable for type PredicateExpressions.ComparisonOperator.GreaterThanCodingKeys and conformance PredicateExpressions.ComparisonOperator.GreaterThanCodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for PredicateExpressions.ComparisonOperator.GreaterThanCodingKeys,  &unk_189C79F00);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type PredicateExpressions.ComparisonOperator.GreaterThanCodingKeys and conformance PredicateExpressions.ComparisonOperator.GreaterThanCodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type PredicateExpressions.ComparisonOperator.GreaterThanCodingKeys and conformance PredicateExpressions.ComparisonOperator.GreaterThanCodingKeys;
  if (!lazy protocol witness table cache variable for type PredicateExpressions.ComparisonOperator.GreaterThanCodingKeys and conformance PredicateExpressions.ComparisonOperator.GreaterThanCodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for PredicateExpressions.ComparisonOperator.GreaterThanCodingKeys,  &unk_189C79F00);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type PredicateExpressions.ComparisonOperator.GreaterThanCodingKeys and conformance PredicateExpressions.ComparisonOperator.GreaterThanCodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type PredicateExpressions.ComparisonOperator.GreaterThanCodingKeys and conformance PredicateExpressions.ComparisonOperator.GreaterThanCodingKeys;
  if (!lazy protocol witness table cache variable for type PredicateExpressions.ComparisonOperator.GreaterThanCodingKeys and conformance PredicateExpressions.ComparisonOperator.GreaterThanCodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for PredicateExpressions.ComparisonOperator.GreaterThanCodingKeys,  &unk_189C79F00);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type PredicateExpressions.ComparisonOperator.GreaterThanCodingKeys and conformance PredicateExpressions.ComparisonOperator.GreaterThanCodingKeys);
  }

  return result;
}

unint64_t lazy protocol witness table accessor for type PredicateExpressions.ComparisonOperator.LessThanOrEqualCodingKeys and conformance PredicateExpressions.ComparisonOperator.LessThanOrEqualCodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type PredicateExpressions.ComparisonOperator.LessThanOrEqualCodingKeys and conformance PredicateExpressions.ComparisonOperator.LessThanOrEqualCodingKeys;
  if (!lazy protocol witness table cache variable for type PredicateExpressions.ComparisonOperator.LessThanOrEqualCodingKeys and conformance PredicateExpressions.ComparisonOperator.LessThanOrEqualCodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for PredicateExpressions.ComparisonOperator.LessThanOrEqualCodingKeys,  &unk_189C79EE0);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type PredicateExpressions.ComparisonOperator.LessThanOrEqualCodingKeys and conformance PredicateExpressions.ComparisonOperator.LessThanOrEqualCodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type PredicateExpressions.ComparisonOperator.LessThanOrEqualCodingKeys and conformance PredicateExpressions.ComparisonOperator.LessThanOrEqualCodingKeys;
  if (!lazy protocol witness table cache variable for type PredicateExpressions.ComparisonOperator.LessThanOrEqualCodingKeys and conformance PredicateExpressions.ComparisonOperator.LessThanOrEqualCodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for PredicateExpressions.ComparisonOperator.LessThanOrEqualCodingKeys,  &unk_189C79EE0);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type PredicateExpressions.ComparisonOperator.LessThanOrEqualCodingKeys and conformance PredicateExpressions.ComparisonOperator.LessThanOrEqualCodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type PredicateExpressions.ComparisonOperator.LessThanOrEqualCodingKeys and conformance PredicateExpressions.ComparisonOperator.LessThanOrEqualCodingKeys;
  if (!lazy protocol witness table cache variable for type PredicateExpressions.ComparisonOperator.LessThanOrEqualCodingKeys and conformance PredicateExpressions.ComparisonOperator.LessThanOrEqualCodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for PredicateExpressions.ComparisonOperator.LessThanOrEqualCodingKeys,  &unk_189C79EE0);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type PredicateExpressions.ComparisonOperator.LessThanOrEqualCodingKeys and conformance PredicateExpressions.ComparisonOperator.LessThanOrEqualCodingKeys);
  }

  return result;
}

unint64_t lazy protocol witness table accessor for type PredicateExpressions.ComparisonOperator.LessThanCodingKeys and conformance PredicateExpressions.ComparisonOperator.LessThanCodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type PredicateExpressions.ComparisonOperator.LessThanCodingKeys and conformance PredicateExpressions.ComparisonOperator.LessThanCodingKeys;
  if (!lazy protocol witness table cache variable for type PredicateExpressions.ComparisonOperator.LessThanCodingKeys and conformance PredicateExpressions.ComparisonOperator.LessThanCodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for PredicateExpressions.ComparisonOperator.LessThanCodingKeys,  &unk_189C79EC0);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type PredicateExpressions.ComparisonOperator.LessThanCodingKeys and conformance PredicateExpressions.ComparisonOperator.LessThanCodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type PredicateExpressions.ComparisonOperator.LessThanCodingKeys and conformance PredicateExpressions.ComparisonOperator.LessThanCodingKeys;
  if (!lazy protocol witness table cache variable for type PredicateExpressions.ComparisonOperator.LessThanCodingKeys and conformance PredicateExpressions.ComparisonOperator.LessThanCodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for PredicateExpressions.ComparisonOperator.LessThanCodingKeys,  &unk_189C79EC0);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type PredicateExpressions.ComparisonOperator.LessThanCodingKeys and conformance PredicateExpressions.ComparisonOperator.LessThanCodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type PredicateExpressions.ComparisonOperator.LessThanCodingKeys and conformance PredicateExpressions.ComparisonOperator.LessThanCodingKeys;
  if (!lazy protocol witness table cache variable for type PredicateExpressions.ComparisonOperator.LessThanCodingKeys and conformance PredicateExpressions.ComparisonOperator.LessThanCodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for PredicateExpressions.ComparisonOperator.LessThanCodingKeys,  &unk_189C79EC0);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type PredicateExpressions.ComparisonOperator.LessThanCodingKeys and conformance PredicateExpressions.ComparisonOperator.LessThanCodingKeys);
  }

  return result;
}

Swift::Int PredicateExpressions.ComparisonOperator.hashValue.getter()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

uint64_t PredicateExpressions.ComparisonOperator.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v23 = a2;
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<PredicateExpressions.ComparisonOperator.GreaterThanOrEqualCodingKeys>);
  v21[5] = *(void *)(v3 - 8);
  v21[6] = v3;
  MEMORY[0x1895F8858](v3);
  uint64_t v26 = (char *)v21 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<PredicateExpressions.ComparisonOperator.GreaterThanCodingKeys>);
  void v21[4] = *(void *)(v22 - 8);
  MEMORY[0x1895F8858](v22);
  uint64_t v25 = (char *)v21 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<PredicateExpressions.ComparisonOperator.LessThanOrEqualCodingKeys>);
  void v21[2] = *(void *)(v6 - 8);
  void v21[3] = v6;
  MEMORY[0x1895F8858](v6);
  uint64_t v24 = (char *)v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<PredicateExpressions.ComparisonOperator.LessThanCodingKeys>);
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x1895F8858](v8);
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<PredicateExpressions.ComparisonOperator.CodingKeys>);
  uint64_t v11 = *(void *)(v10 - 8);
  MEMORY[0x1895F8858](v10);
  uint64_t v13 = (char *)v21 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = a1[3];
  uint64_t v27 = a1;
  __swift_project_boxed_opaque_existential_1(a1, v14);
  lazy protocol witness table accessor for type PredicateExpressions.ComparisonOperator.CodingKeys and conformance PredicateExpressions.ComparisonOperator.CodingKeys();
  uint64_t v15 = v28;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v15)
  {
    v21[0] = v9;
    v21[1] = v8;
    uint64_t v28 = v11;
    uint64_t v16 = KeyedDecodingContainer.allKeys.getter();
    if (*(void *)(v16 + 16) == 1LL) {
      __asm { BR              X9 }
    }

    uint64_t v17 = type metadata accessor for DecodingError();
    swift_allocError();
    uint64_t v19 = v18;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
    *uint64_t v19 = &type metadata for PredicateExpressions.ComparisonOperator;
    KeyedDecodingContainer.codingPath.getter();
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(void *, void, uint64_t))(*(void *)(v17 - 8) + 104LL))( v19,  *MEMORY[0x189619358],  v17);
    swift_willThrow();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v28 + 8))(v13, v10);
  }

  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v27);
}

uint64_t protocol witness for Decodable.init(from:) in conformance PredicateExpressions.ComparisonOperator@<X0>( void *a1@<X0>, uint64_t a2@<X8>)
{
  return PredicateExpressions.ComparisonOperator.init(from:)(a1, a2);
}

void protocol witness for Encodable.encode(to:) in conformance PredicateExpressions.ComparisonOperator( void *a1)
{
}

void PredicateExpressions.Comparison.op.getter(_BYTE *a1@<X8>)
{
  *a1 = *v1;
}

uint64_t PredicateExpressions.Comparison.lhs.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a1 + 16) - 8LL) + 16LL))( a2,  v2 + *(int *)(a1 + 60));
}

uint64_t PredicateExpressions.Comparison.rhs.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a1 + 24) - 8LL) + 16LL))( a2,  v2 + *(int *)(a1 + 64));
}

void PredicateExpressions.Comparison.init(lhs:rhs:op:)()
{
}

uint64_t sub_1830A24C4(uint64_t a1)
{
  uint64_t result = (*(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(*(void *)(v1 - 8) + 32LL))( &v5[*(int *)(a1 + 64)],  v3,  v1);
  *uint64_t v5 = v6;
  return result;
}

void type metadata accessor for PredicateExpressions.Comparison()
{
}

uint64_t PredicateExpressions.Comparison.evaluate(_:)(uint64_t *a1, uint64_t a2)
{
  uint64_t v5 = *(void *)(a2 + 32);
  uint64_t v6 = *(void *)(a2 + 16);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v8 = MEMORY[0x1895F8858](AssociatedTypeWitness);
  MEMORY[0x1895F8858](v8);
  uint64_t v9 = *a1;
  uint64_t v12 = v2;
  char v10 = v2 + *(_DWORD *)(a2 + 60);
  uint64_t v14 = v9;
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(v5 + 16))(&v14, v6, v5);
  if (!v13)
  {
    uint64_t v14 = v9;
    (*(void (**)(uint64_t *, void))(*(void *)(a2 + 40) + 16LL))(&v14, *(void *)(a2 + 24));
    __asm { BR              X10 }
  }

  return v10 & 1;
}

void sub_1830A2698()
{
  uint64_t v4 = *(void (**)(uint64_t, uint64_t))(v1 + 8);
  v4(v0, v2);
  v4(v3, v2);
  JUMPOUT(0x1830A264CLL);
}

uint64_t protocol witness for PredicateExpression.evaluate(_:) in conformance PredicateExpressions.Comparison<A, B>@<X0>( uint64_t *a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result = PredicateExpressions.Comparison.evaluate(_:)(a1, a2);
  if (!v3) {
    *a3 = result & 1;
  }
  return result;
}

void static PredicateExpressions.build_Comparison<A, B>(lhs:rhs:op:)()
{
}

uint64_t sub_1830A27A0(uint64_t a1)
{
  uint64_t result = (*(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(*(void *)(v1 - 8) + 16LL))( &v5[*(int *)(a1 + 64)],  v3,  v1);
  *uint64_t v5 = v6;
  return result;
}

uint64_t PredicateExpressions.Comparison.description.getter()
{
  BYTE8(v6) = 0;
  _StringGuts.grow(_:)(42LL);
  v1._uint64_t object = (void *)0x80000001839CC250LL;
  v1._uint64_t countAndFlagsBits = 0xD000000000000010LL;
  String.append(_:)(v1);
  _print_unlocked<A, B>(_:_:)();
  v2._uint64_t countAndFlagsBits = 0x74617265706F202CLL;
  v2._uint64_t object = (void *)0xEC000000203A726FLL;
  String.append(_:)(v2);
  *(void *)&__int128 v6 = *v0;
  _print_unlocked<A, B>(_:_:)();
  v3._uint64_t countAndFlagsBits = 0x203A736872202CLL;
  v3._uint64_t object = (void *)0xE700000000000000LL;
  String.append(_:)(v3);
  _print_unlocked<A, B>(_:_:)();
  v4._uint64_t countAndFlagsBits = 41LL;
  v4._uint64_t object = (void *)0xE100000000000000LL;
  String.append(_:)(v4);
  return *(void *)((char *)&v6 + 1);
}

uint64_t PredicateExpressions.Comparison<>.encode(to:)(void *a1)
{
  if (!v1)
  {
    __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v3, v4);
    dispatch thunk of UnkeyedEncodingContainer.encode<A>(_:)();
    __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v3, v4);
    lazy protocol witness table accessor for type PredicateExpressions.ComparisonOperator and conformance PredicateExpressions.ComparisonOperator();
    dispatch thunk of UnkeyedEncodingContainer.encode<A>(_:)();
  }

  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v3);
}

unint64_t lazy protocol witness table accessor for type PredicateExpressions.ComparisonOperator and conformance PredicateExpressions.ComparisonOperator()
{
  unint64_t result = lazy protocol witness table cache variable for type PredicateExpressions.ComparisonOperator and conformance PredicateExpressions.ComparisonOperator;
  if (!lazy protocol witness table cache variable for type PredicateExpressions.ComparisonOperator and conformance PredicateExpressions.ComparisonOperator)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for PredicateExpressions.ComparisonOperator,  &type metadata for PredicateExpressions.ComparisonOperator);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type PredicateExpressions.ComparisonOperator and conformance PredicateExpressions.ComparisonOperator);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type PredicateExpressions.ComparisonOperator and conformance PredicateExpressions.ComparisonOperator;
  if (!lazy protocol witness table cache variable for type PredicateExpressions.ComparisonOperator and conformance PredicateExpressions.ComparisonOperator)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for PredicateExpressions.ComparisonOperator,  &type metadata for PredicateExpressions.ComparisonOperator);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type PredicateExpressions.ComparisonOperator and conformance PredicateExpressions.ComparisonOperator);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type PredicateExpressions.ComparisonOperator and conformance PredicateExpressions.ComparisonOperator;
  if (!lazy protocol witness table cache variable for type PredicateExpressions.ComparisonOperator and conformance PredicateExpressions.ComparisonOperator)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for PredicateExpressions.ComparisonOperator,  &type metadata for PredicateExpressions.ComparisonOperator);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type PredicateExpressions.ComparisonOperator and conformance PredicateExpressions.ComparisonOperator);
  }

  return result;
}

void PredicateExpressions.Comparison<>.init(from:)( uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X4>, uint64_t a4@<X7>, uint64_t a5@<X8>)
{
  v14[3] = a5;
  _OWORD v14[4] = a4;
  v14[8] = a3;
  _OWORD v14[6] = *(void *)(a2 - 8);
  uint64_t v5 = MEMORY[0x1895F8858](a1);
  v14[5] = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  v14[7] = *(void *)(v7 - 8);
  MEMORY[0x1895F8858](v5);
  v14[9] = (char *)v14 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  v14[11] = v9;
  v14[12] = v10;
  v14[13] = v11;
  v14[14] = v12;
  v14[15] = v13;
  type metadata accessor for PredicateExpressions.Comparison();
}

uint64_t sub_1830A2B78(uint64_t a1)
{
  uint64_t v6 = *(void *)(a1 - 8);
  MEMORY[0x1895F8858](a1);
  uint64_t v8 = (char *)&v18 - v7;
  __swift_project_boxed_opaque_existential_1(v3, v3[3]);
  uint64_t v9 = *(void *)(v4 - 128);
  dispatch thunk of Decoder.unkeyedContainer()();
  if (v9) {
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v3);
  }
  *(void *)(v4 - 200) = v6;
  *(void *)(v4 - 192) = v8;
  *(void *)(v4 - 128) = v3;
  __swift_mutable_project_boxed_opaque_existential_1(v4 - 120, *(void *)(v4 - 96));
  dispatch thunk of UnkeyedDecodingContainer.decode<A>(_:)();
  uint64_t v10 = *(_BYTE **)(v4 - 192);
  uint64_t v11 = &v10[*(int *)(a1 + 60)];
  uint64_t v12 = *(void (**)(_BYTE *, uint64_t, uint64_t))(*(void *)(v4 - 152) + 32LL);
  uint64_t v13 = *(void *)(v4 - 136);
  *(void *)(v4 - 136) = v1;
  v12(v11, v13, v1);
  __swift_mutable_project_boxed_opaque_existential_1(v4 - 120, *(void *)(v4 - 96));
  uint64_t v14 = *(void *)(v4 - 168);
  dispatch thunk of UnkeyedDecodingContainer.decode<A>(_:)();
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(*(void *)(v4 - 160) + 32LL))(&v10[*(int *)(a1 + 64)], v14, v2);
  __swift_mutable_project_boxed_opaque_existential_1(v4 - 120, *(void *)(v4 - 96));
  lazy protocol witness table accessor for type PredicateExpressions.ComparisonOperator and conformance PredicateExpressions.ComparisonOperator();
  dispatch thunk of UnkeyedDecodingContainer.decode<A>(_:)();
  uint64_t v15 = *(void *)(v4 - 128);
  *uint64_t v10 = *(_BYTE *)(v4 - 65);
  __swift_destroy_boxed_opaque_existential_1(v4 - 120);
  uint64_t v16 = *(void *)(v4 - 200);
  (*(void (**)(void, _BYTE *, uint64_t))(v16 + 16))(*(void *)(v4 - 184), v10, a1);
  __swift_destroy_boxed_opaque_existential_1(v15);
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v16 + 8))(v10, a1);
}

void protocol witness for Decodable.init(from:) in conformance <> PredicateExpressions.Comparison<A, B>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
}

  ;
}

uint64_t protocol witness for Encodable.encode(to:) in conformance <> PredicateExpressions.Comparison<A, B>( void *a1)
{
  return PredicateExpressions.Comparison<>.encode(to:)(a1);
}

ValueMetadata *type metadata accessor for PredicateExpressions.ComparisonOperator()
{
  return &type metadata for PredicateExpressions.ComparisonOperator;
}

uint64_t type metadata completion function for PredicateExpressions.Comparison()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_checkMetadataState();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0LL;
    }
  }

  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for PredicateExpressions.Comparison( uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  Swift::String v3 = a1;
  uint64_t v4 = *(void *)(a3 + 24);
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8LL);
  unint64_t v6 = *(_DWORD *)(v5 + 80);
  uint64_t v7 = *(void *)(v4 - 8);
  uint64_t v8 = *(_DWORD *)(v7 + 80);
  uint64_t v9 = *(void *)(v5 + 64) + v8;
  if ((v8 | v6) > 7
    || ((*(_DWORD *)(v7 + 80) | *(_DWORD *)(v5 + 80)) & 0x100000) != 0
    || ((v9 + ((v6 + 1) & ~v6)) & ~v8) + *(void *)(v7 + 64) > 0x18)
  {
    uint64_t v12 = *a2;
    *Swift::String v3 = *a2;
    Swift::String v3 = (uint64_t *)(v12 + (((v8 | v6) + 16) & ~(v8 | v6)));
    swift_retain();
  }

  else
  {
    uint64_t v13 = ~v8;
    *(_BYTE *)a1 = *(_BYTE *)a2;
    uint64_t v14 = ((unint64_t)a1 + v6 + 1) & ~v6;
    uint64_t v15 = ((unint64_t)a2 + v6 + 1) & ~v6;
    (*(void (**)(uint64_t, uint64_t))(v5 + 16))(v14, v15);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 16))((v14 + v9) & v13, (v15 + v9) & v13, v4);
  }

  return v3;
}

uint64_t destroy for PredicateExpressions.Comparison(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(*(void *)(a2 + 16) - 8LL);
  unint64_t v4 = (a1 + *(unsigned __int8 *)(v3 + 80) + 1) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  (*(void (**)(unint64_t))(v3 + 8))(v4);
  return (*(uint64_t (**)(unint64_t))(*(void *)(*(void *)(a2 + 24) - 8LL) + 8LL))((v4 + *(void *)(v3 + 64) + *(unsigned __int8 *)(*(void *)(*(void *)(a2 + 24) - 8LL) + 80LL)) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(*(void *)(a2 + 24) - 8LL) + 80LL));
}

_BYTE *initializeWithCopy for PredicateExpressions.Comparison(_BYTE *a1, _BYTE *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8LL);
  uint64_t v6 = *(unsigned __int8 *)(v5 + 80);
  uint64_t v7 = (unint64_t)&a1[v6 + 1] & ~v6;
  uint64_t v8 = (unint64_t)&a2[v6 + 1] & ~v6;
  (*(void (**)(uint64_t, uint64_t))(v5 + 16))(v7, v8);
  uint64_t v9 = *(void *)(*(void *)(a3 + 24) - 8LL);
  (*(void (**)(unint64_t, unint64_t))(v9 + 16))( (*(void *)(v5 + 64) + *(unsigned __int8 *)(v9 + 80) + v7) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80),  (*(void *)(v5 + 64) + *(unsigned __int8 *)(v9 + 80) + v8) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80));
  return a1;
}

_BYTE *assignWithCopy for PredicateExpressions.Comparison(_BYTE *a1, _BYTE *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8LL);
  uint64_t v6 = *(unsigned __int8 *)(v5 + 80);
  uint64_t v7 = (unint64_t)&a1[v6 + 1] & ~v6;
  uint64_t v8 = (unint64_t)&a2[v6 + 1] & ~v6;
  (*(void (**)(uint64_t, uint64_t))(v5 + 24))(v7, v8);
  uint64_t v9 = *(void *)(*(void *)(a3 + 24) - 8LL);
  (*(void (**)(unint64_t, unint64_t))(v9 + 24))( (*(void *)(v5 + 64) + *(unsigned __int8 *)(v9 + 80) + v7) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80),  (*(void *)(v5 + 64) + *(unsigned __int8 *)(v9 + 80) + v8) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80));
  return a1;
}

_BYTE *initializeWithTake for PredicateExpressions.Comparison(_BYTE *a1, _BYTE *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8LL);
  uint64_t v6 = *(unsigned __int8 *)(v5 + 80);
  uint64_t v7 = (unint64_t)&a1[v6 + 1] & ~v6;
  uint64_t v8 = (unint64_t)&a2[v6 + 1] & ~v6;
  (*(void (**)(uint64_t, uint64_t))(v5 + 32))(v7, v8);
  uint64_t v9 = *(void *)(*(void *)(a3 + 24) - 8LL);
  (*(void (**)(unint64_t, unint64_t))(v9 + 32))( (*(void *)(v5 + 64) + *(unsigned __int8 *)(v9 + 80) + v7) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80),  (*(void *)(v5 + 64) + *(unsigned __int8 *)(v9 + 80) + v8) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80));
  return a1;
}

_BYTE *assignWithTake for PredicateExpressions.Comparison(_BYTE *a1, _BYTE *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8LL);
  uint64_t v6 = *(unsigned __int8 *)(v5 + 80);
  uint64_t v7 = (unint64_t)&a1[v6 + 1] & ~v6;
  uint64_t v8 = (unint64_t)&a2[v6 + 1] & ~v6;
  (*(void (**)(uint64_t, uint64_t))(v5 + 40))(v7, v8);
  uint64_t v9 = *(void *)(*(void *)(a3 + 24) - 8LL);
  (*(void (**)(unint64_t, unint64_t))(v9 + 40))( (*(void *)(v5 + 64) + *(unsigned __int8 *)(v9 + 80) + v7) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80),  (*(void *)(v5 + 64) + *(unsigned __int8 *)(v9 + 80) + v8) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80));
  return a1;
}

uint64_t getEnumTagSinglePayload for PredicateExpressions.Comparison( unsigned __int8 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(*(void *)(a3 + 16) - 8LL);
  unsigned int v4 = *(_DWORD *)(v3 + 84);
  uint64_t v5 = *(void *)(*(void *)(a3 + 24) - 8LL);
  if (v4 <= *(_DWORD *)(v5 + 84)) {
    unsigned int v6 = *(_DWORD *)(v5 + 84);
  }
  else {
    unsigned int v6 = *(_DWORD *)(v3 + 84);
  }
  if (v6 <= 0xFC) {
    unsigned int v7 = 252;
  }
  else {
    unsigned int v7 = v6;
  }
  if (!a2) {
    return 0LL;
  }
  uint64_t v8 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v9 = *(void *)(v3 + 64);
  uint64_t v10 = *(unsigned __int8 *)(v5 + 80);
  if (a2 <= v7) {
    goto LABEL_27;
  }
  uint64_t v11 = ((v9 + v10 + ((v8 + 1) & ~v8)) & ~v10) + *(void *)(v5 + 64);
  char v12 = 8 * v11;
  if (v11 <= 3)
  {
    unsigned int v15 = ((a2 - v7 + ~(-1 << v12)) >> v12) + 1;
    if (HIWORD(v15))
    {
      int v13 = *(_DWORD *)&a1[v11];
      if (!v13) {
        goto LABEL_27;
      }
      goto LABEL_18;
    }

    if (v15 > 0xFF)
    {
      int v13 = *(unsigned __int16 *)&a1[v11];
      if (!*(_WORD *)&a1[v11]) {
        goto LABEL_27;
      }
      goto LABEL_18;
    }

    if (v15 < 2)
    {
LABEL_27:
      if (v6 > 0xFC)
      {
        uint64_t v19 = (unint64_t)&a1[v8 + 1] & ~v8;
        if (v4 == v7) {
          return (*(uint64_t (**)(uint64_t, void))(v3 + 48))(v19, *(unsigned int *)(v3 + 84));
        }
        else {
          return (*(uint64_t (**)(uint64_t))(v5 + 48))((v19 + v9 + v10) & ~v10);
        }
      }

      else
      {
        unsigned int v18 = *a1;
        if (v18 >= 4) {
          return v18 - 3;
        }
        else {
          return 0LL;
        }
      }
    }
  }

  int v13 = a1[v11];
  if (!a1[v11]) {
    goto LABEL_27;
  }
LABEL_18:
  int v16 = (v13 - 1) << v12;
  if (!(_DWORD)v11) {
    return v7 + v16 + 1;
  }
  else {
    int v17 = 4;
  }
  return ((uint64_t (*)(void))((char *)&loc_1830A348C + 4 * byte_18379F7F0[v17 - 1]))();
}

void storeEnumTagSinglePayload for PredicateExpressions.Comparison( _WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5 = *(void *)(*(void *)(a4 + 16) - 8LL);
  uint64_t v6 = *(void *)(*(void *)(a4 + 24) - 8LL);
  if (*(_DWORD *)(v5 + 84) <= *(_DWORD *)(v6 + 84)) {
    unsigned int v7 = *(_DWORD *)(v6 + 84);
  }
  else {
    unsigned int v7 = *(_DWORD *)(v5 + 84);
  }
  if (v7 <= 0xFC) {
    unsigned int v8 = 252;
  }
  else {
    unsigned int v8 = v7;
  }
  size_t v9 = ((*(void *)(v5 + 64)
       + *(unsigned __int8 *)(v6 + 80)
  if (a3 > v8)
  {
    if (v9 <= 3)
    {
      unsigned int v12 = ((a3 - v8 + ~(-1 << (8 * v9))) >> (8 * v9)) + 1;
      if (HIWORD(v12))
      {
        unsigned int v10 = 4u;
      }

      else if (v12 >= 0x100)
      {
        unsigned int v10 = 2;
      }

      else
      {
        unsigned int v10 = v12 > 1;
      }
    }

    else
    {
      unsigned int v10 = 1u;
    }
  }

  else
  {
    unsigned int v10 = 0u;
  }

  if (v8 < a2)
  {
    int v11 = ~v8 + a2;
    if (v9 < 4)
    {
      if ((_DWORD)v9)
      {
        int v13 = v11 & ~(-1 << (8 * v9));
        bzero(a1, v9);
        if ((_DWORD)v9 == 3)
        {
          *a1 = v13;
          *((_BYTE *)a1 + 2) = BYTE2(v13);
        }

        else if ((_DWORD)v9 == 2)
        {
          *a1 = v13;
        }

        else
        {
          *(_BYTE *)a1 = v13;
        }
      }
    }

    else
    {
      bzero(a1, v9);
      *(_DWORD *)a1 = v11;
    }

    __asm { BR              X10 }
  }

  __asm { BR              X6 }

uint64_t storeEnumTagSinglePayload for PredicateExpressions.ComparisonOperator( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    LODWORD(__swift_mutable_project_boxed_opaque_existential_1((uint64_t)v3, v4) = 1;
  }
  else {
    LODWORD(__swift_mutable_project_boxed_opaque_existential_1((uint64_t)v3, v4) = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFC) {
    return ((uint64_t (*)(void))((char *)&loc_1830A37B8 + 4 * byte_18379F803[v4]))();
  }
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_1830A37EC + 4 * byte_18379F7FE[v4]))();
}

uint64_t sub_1830A37EC(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1830A37F4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x1830A37FCLL);
  }
  return result;
}

uint64_t sub_1830A3808(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x1830A3810LL);
  }
  *(_BYTE *)uint64_t result = a2 + 3;
  return result;
}

uint64_t sub_1830A3814(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1830A381C(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

void *type metadata accessor for PredicateExpressions.ComparisonOperator.CodingKeys()
{
  return &unk_189C79EA0;
}

void *type metadata accessor for PredicateExpressions.ComparisonOperator.LessThanCodingKeys()
{
  return &unk_189C79EC0;
}

void *type metadata accessor for PredicateExpressions.ComparisonOperator.LessThanOrEqualCodingKeys()
{
  return &unk_189C79EE0;
}

void *type metadata accessor for PredicateExpressions.ComparisonOperator.GreaterThanCodingKeys()
{
  return &unk_189C79F00;
}

void *type metadata accessor for PredicateExpressions.ComparisonOperator.GreaterThanOrEqualCodingKeys()
{
  return &unk_189C79F20;
}

uint64_t specialized PredicateExpressions.ComparisonOperator.CodingKeys.init(stringValue:)( uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x6E6168547373656CLL && a2 == 0xE800000000000000LL;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0LL;
  }

  else if (a1 == 0x6E6168547373656CLL && a2 == 0xEF6C61757145724FLL {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1LL;
  }

  else if (a1 == 0x5472657461657267LL && a2 == 0xEB000000006E6168LL {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 2LL;
  }

  else if (a1 == 0xD000000000000012LL && a2 == 0x80000001839CC270LL)
  {
    swift_bridgeObjectRelease();
    return 3LL;
  }

  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0) {
      return 3LL;
    }
    else {
      return 4LL;
    }
  }

void __swiftcall Morphology.Pronoun.init(_:)( Foundation::Morphology::Pronoun *__return_ptr retstr, NSMorphologyPronoun a2)
{
  Class isa = a2.super.isa;
  id v4 = -[objc_class pronoun](a2.super.isa, sel_pronoun, a2._morphology, a2._dependentMorphology);
  id v14 = static String._unconditionallyBridgeFromObjectiveC(_:)(v4);
  char v6 = v5;

  swift_bridgeObjectRetain();
  Morphology.init(_:)((NSMorphology_optional *)-[objc_class morphology](isa, sel_morphology));
  v7.i32[0] = v18;
  int16x8_t v13 = (int16x8_t)vmovl_u8(v7);
  swift_bridgeObjectRetain();
  unsigned int v8 = (NSMorphology_optional *)-[objc_class dependentMorphology](isa, sel_dependentMorphology);
  size_t v9 = v8;
  if (v8)
  {
    unsigned int v10 = v8;
    Morphology.init(_:)(v9);

    int v11 = v17;
    size_t v9 = (NSMorphology_optional *)(v15 | ((unint64_t)v16 << 16));
    unint64_t v12 = v18 | ((unint64_t)v19 << 32);
  }

  else
  {

    int v11 = 0LL;
    unint64_t v12 = 0LL;
  }

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  retstr->pronoun._uint64_t countAndFlagsBits = (uint64_t)v14;
  retstr->pronoun._uint64_t object = v6;
  *(_WORD *)&retstr->morphology.grammaticalGender.Swift::UInt8 value = v15;
  retstr->morphology.number.Swift::UInt8 value = v16;
  retstr->morphology.customPronouns._rawValue = v17;
  *(_DWORD *)&retstr->morphology.grammaticalCase.Swift::UInt8 value = vmovn_s16(v13).u32[0];
  retstr->morphology.definiteness.Swift::UInt8 value = v19;
  *(void *)&retstr->dependentMorphology.value.grammaticalGender.Swift::UInt8 value = v9;
  retstr->dependentMorphology.value.customPronouns._rawValue = v11;
  retstr->dependentMorphology.value.definiteness.Swift::UInt8 value = BYTE4(v12);
  *(_DWORD *)&retstr->dependentMorphology.value.grammaticalCase.Swift::UInt8 value = v12;
}

NSMorphologyPronoun __swiftcall NSMorphologyPronoun.init(_:)(Foundation::Morphology::Pronoun *a1)
{
  __int16 v2 = *(_WORD *)&a1->morphology.grammaticalGender.value;
  Foundation::Morphology::GrammaticalNumber value = a1->morphology.number.value;
  rawValue = a1->morphology.customPronouns._rawValue;
  Foundation::Morphology::Definiteness v5 = a1->morphology.definiteness.value;
  uint64_t v7 = *(void *)&a1->dependentMorphology.value.grammaticalGender.value;
  char v6 = a1->dependentMorphology.value.customPronouns._rawValue;
  uint64_t v8 = a1->dependentMorphology.value.definiteness.value;
  uint64_t v9 = *(unsigned int *)&a1->dependentMorphology.value.grammaticalCase.value;
  uint64_t v24 = String._bridgeToObjectiveCImpl()();
  type metadata accessor for NSMorphologyPronoun(0LL, &lazy cache variable for type metadata for NSMorphology);
  __int16 v25 = v2;
  Foundation::Morphology::GrammaticalNumber v26 = value;
  uint64_t v27 = rawValue;
  *(_DWORD *)uint64_t v28 = *(_DWORD *)&a1->morphology.grammaticalCase.value;
  v28[4] = v5;
  swift_bridgeObjectRetain();
  *(void *)&v29.grammaticalGender.Foundation::Morphology::GrammaticalNumber value = &v25;
  NSMorphology.init(_:)(v10, v29);
  unint64_t v12 = v11;
  if (v6)
  {
    v13.i64[0] = 0xFFFFFFFFFFLL;
    v13.i64[1] = 0xFFFFFFFFFFLL;
    uint64x2_t v14 = (uint64x2_t)vandq_s8((int8x16_t)vdupq_n_s64(v9 | (unint64_t)(v8 << 32)), v13);
    int16x8_t v15 = (int16x8_t)vshlq_u64(v14, (uint64x2_t)xmmword_183728FF0);
    __int16 v25 = v7;
    Foundation::Morphology::GrammaticalNumber v26 = BYTE2(v7);
    uint64_t v27 = v6;
    v28[0] = v9;
    *(int32x2_t *)v14.i8 = vmovn_s64((int64x2_t)vshlq_u64(v14, (uint64x2_t)xmmword_183728FE0));
    *(int32x2_t *)v15.i8 = vmovn_s64((int64x2_t)v15);
    v15.i16[1] = v15.i16[2];
    v15.i16[2] = v14.i16[0];
    v15.i16[3] = v14.i16[2];
    *(_DWORD *)&v28[1] = vmovn_s16(v15).u32[0];
    swift_bridgeObjectRetain_n();
    *(void *)&v30.grammaticalGender.Foundation::Morphology::GrammaticalNumber value = &v25;
    NSMorphology.init(_:)(v16, v30);
    unsigned __int32 v18 = v17;
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }

  else
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    unsigned __int32 v18 = 0LL;
  }

  Foundation::Morphology::Definiteness v19 = (objc_class *)objc_msgSend( objc_allocWithZone((Class)swift_getObjCClassFromMetadata()),  sel_initWithPronoun_morphology_dependentMorphology_,  v24,  v12,  v18);

  swift_unknownObjectRelease();
  uint64_t v23 = v19;
  result._dependentMorphology = v22;
  result._morphology = v21;
  result._pronoun = v20;
  result.super.Class isa = v23;
  return result;
}

Foundation::Morphology __swiftcall Morphology.init()()
{
  *(_WORD *)uint64_t v0 = 3587;
  *(_BYTE *)(v0 + 2) = 6;
  *(void *)(v0 + 8) = MEMORY[0x18961AFF0];
  *(_DWORD *)(v0 + 16) = 33751822;
  *(_BYTE *)(v0 + 20) = 2;
  return result;
}

void Morphology.grammaticalGender.getter(_BYTE *a1@<X8>)
{
  *a1 = *v1;
}

_BYTE *Morphology.grammaticalGender.setter(_BYTE *result)
{
  *__int16 v1 = *result;
  return result;
}

uint64_t (*Morphology.grammaticalGender.modify())()
{
  return destructiveProjectEnumData for PredicateCodableError;
}

Foundation::Morphology::PartOfSpeech_optional __swiftcall Morphology.PartOfSpeech.init(rawValue:)(Swift::Int rawValue)
{
  char v2 = rawValue - 1;
  *__int16 v1 = v2;
  return (Foundation::Morphology::PartOfSpeech_optional)rawValue;
}

Foundation::Morphology::PartOfSpeech_optional protocol witness for RawRepresentable.init(rawValue:) in conformance Morphology.PartOfSpeech( Swift::Int *a1)
{
  return Morphology.PartOfSpeech.init(rawValue:)(*a1);
}

void Morphology.partOfSpeech.getter(_BYTE *a1@<X8>)
{
  *a1 = *(_BYTE *)(v1 + 1);
}

_BYTE *Morphology.partOfSpeech.setter(_BYTE *result)
{
  *(_BYTE *)(v1 + 1) = *result;
  return result;
}

uint64_t (*Morphology.partOfSpeech.modify())()
{
  return destructiveProjectEnumData for PredicateCodableError;
}

Foundation::Morphology::GrammaticalNumber_optional __swiftcall Morphology.GrammaticalNumber.init(rawValue:)( Swift::Int rawValue)
{
  unint64_t v2 = 0x5040302010006uLL >> (8 * rawValue);
  *uint64_t v1 = v2;
  return (Foundation::Morphology::GrammaticalNumber_optional)rawValue;
}

Foundation::Morphology::GrammaticalNumber_optional protocol witness for RawRepresentable.init(rawValue:) in conformance Morphology.GrammaticalNumber( Swift::Int *a1)
{
  return Morphology.GrammaticalNumber.init(rawValue:)(*a1);
}

void Morphology.number.getter(_BYTE *a1@<X8>)
{
  *a1 = *(_BYTE *)(v1 + 2);
}

_BYTE *Morphology.number.setter(_BYTE *result)
{
  *(_BYTE *)(v1 + 2) = *result;
  return result;
}

uint64_t (*Morphology.number.modify())()
{
  return destructiveProjectEnumData for PredicateCodableError;
}

void Morphology.grammaticalCase.getter(_BYTE *a1@<X8>)
{
  *a1 = *(_BYTE *)(v1 + 16);
}

_BYTE *Morphology.grammaticalCase.setter(_BYTE *result)
{
  *(_BYTE *)(v1 + 16) = *result;
  return result;
}

uint64_t (*Morphology.grammaticalCase.modify())()
{
  return destructiveProjectEnumData for PredicateCodableError;
}

void Morphology.grammaticalPerson.getter(_BYTE *a1@<X8>)
{
  *a1 = *(_BYTE *)(v1 + 17);
}

_BYTE *Morphology.grammaticalPerson.setter(_BYTE *result)
{
  *(_BYTE *)(v1 + 17) = *result;
  return result;
}

uint64_t (*Morphology.grammaticalPerson.modify())()
{
  return destructiveProjectEnumData for PredicateCodableError;
}

Foundation::Morphology::PronounType_optional __swiftcall Morphology.PronounType.init(rawValue:)(Swift::Int rawValue)
{
  unsigned int v2 = 0x2010003u >> (8 * rawValue);
  *uint64_t v1 = v2;
  return (Foundation::Morphology::PronounType_optional)rawValue;
}

uint64_t Morphology.PronounType.rawValue.getter()
{
  return *v0 + 1LL;
}

Foundation::Morphology::PronounType_optional protocol witness for RawRepresentable.init(rawValue:) in conformance Morphology.PronounType( Swift::Int *a1)
{
  return Morphology.PronounType.init(rawValue:)(*a1);
}

void Morphology.pronounType.getter(_BYTE *a1@<X8>)
{
  *a1 = *(_BYTE *)(v1 + 18);
}

_BYTE *Morphology.pronounType.setter(_BYTE *result)
{
  *(_BYTE *)(v1 + 18) = *result;
  return result;
}

uint64_t (*Morphology.pronounType.modify())()
{
  return destructiveProjectEnumData for PredicateCodableError;
}

void Morphology.determination.getter(_BYTE *a1@<X8>)
{
  *a1 = *(_BYTE *)(v1 + 19);
}

_BYTE *Morphology.determination.setter(_BYTE *result)
{
  *(_BYTE *)(v1 + 19) = *result;
  return result;
}

uint64_t (*Morphology.determination.modify())()
{
  return destructiveProjectEnumData for PredicateCodableError;
}

Foundation::Morphology::Definiteness_optional __swiftcall Morphology.Definiteness.init(rawValue:)(Swift::Int rawValue)
{
  if (rawValue == 2) {
    char v2 = 1;
  }
  else {
    char v2 = 2;
  }
  if (rawValue == 1) {
    char v2 = 0;
  }
  *uint64_t v1 = v2;
  return (Foundation::Morphology::Definiteness_optional)rawValue;
}

uint64_t Morphology.Definiteness.rawValue.getter()
{
  if (*v0) {
    return 2LL;
  }
  else {
    return 1LL;
  }
}

void *protocol witness for RawRepresentable.init(rawValue:) in conformance Morphology.Definiteness@<X0>( void *result@<X0>, char *a2@<X8>)
{
  if (*result == 2LL) {
    char v2 = 1;
  }
  else {
    char v2 = 2;
  }
  if (*result == 1LL) {
    char v3 = 0;
  }
  else {
    char v3 = v2;
  }
  *a2 = v3;
  return result;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance Morphology.Definiteness( uint64_t *a1@<X8>)
{
  uint64_t v2 = 1LL;
  if (*v1) {
    uint64_t v2 = 2LL;
  }
  *a1 = v2;
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance Morphology.Determination()
{
  int v1 = *v0;
  Hasher.init(_seed:)();
  if (v1) {
    Swift::UInt v2 = 2LL;
  }
  else {
    Swift::UInt v2 = 1LL;
  }
  Hasher._combine(_:)(v2);
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance Morphology.Definiteness()
{
  if (*v0) {
    Swift::UInt v1 = 2LL;
  }
  else {
    Swift::UInt v1 = 1LL;
  }
  Hasher._combine(_:)(v1);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance Morphology.Determination()
{
  int v1 = *v0;
  Hasher.init(_seed:)();
  if (v1) {
    Swift::UInt v2 = 2LL;
  }
  else {
    Swift::UInt v2 = 1LL;
  }
  Hasher._combine(_:)(v2);
  return Hasher._finalize()();
}

void Morphology.definiteness.getter(_BYTE *a1@<X8>)
{
  *a1 = *(_BYTE *)(v1 + 20);
}

_BYTE *Morphology.definiteness.setter(_BYTE *result)
{
  *(_BYTE *)(v1 + 20) = *result;
  return result;
}

uint64_t (*Morphology.definiteness.modify())()
{
  return destructiveProjectEnumData for PredicateCodableError;
}

unsigned __int16 *InflectionRule.init(morphology:)@<X0>(unsigned __int16 *result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2 = *((void *)result + 1);
  int v3 = *((_DWORD *)result + 4);
  char v4 = *((_BYTE *)result + 20);
  *(void *)a2 = *result | ((unint64_t)*((unsigned __int8 *)result + 2) << 16);
  *(void *)(a2 + 8) = v2;
  *(_BYTE *)(a2 + 20) = v4;
  *(_DWORD *)(a2 + 16) = v3;
  return result;
}

void Morphology.hash(into:)(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = *v2;
  uint64_t v5 = v2[1];
  uint64_t v6 = v2[2];
  uint64_t v7 = *((void *)v2 + 1);
  uint64_t v8 = v2[16];
  uint64_t v9 = v2[17];
  uint64_t v10 = v2[18];
  int v11 = v2[19];
  int v12 = v2[20];
  if (v4 == 3)
  {
    Hasher._combine(_:)(0);
    if ((_DWORD)v5 != 14) {
      goto LABEL_3;
    }
LABEL_6:
    Hasher._combine(_:)(0);
    if ((_DWORD)v6 != 6) {
      goto LABEL_4;
    }
    goto LABEL_7;
  }

  Hasher._combine(_:)(1u);
  Hasher._combine(_:)(v4 + 1);
  if ((_DWORD)v5 == 14) {
    goto LABEL_6;
  }
LABEL_3:
  Hasher._combine(_:)(1u);
  Hasher._combine(_:)(v5 + 1);
  if ((_DWORD)v6 != 6)
  {
LABEL_4:
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v6 + 1);
    goto LABEL_8;
  }

Swift::Int Morphology.hashValue.getter()
{
  uint64_t v1 = *v0;
  uint64_t v2 = v0[1];
  uint64_t v3 = v0[2];
  uint64_t v4 = *((void *)v0 + 1);
  uint64_t v5 = v0[16];
  uint64_t v6 = v0[17];
  uint64_t v7 = v0[18];
  int v8 = v0[19];
  int v9 = v0[20];
  Hasher.init(_seed:)();
  if (v1 == 3)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v1 + 1);
  }

  if ((_DWORD)v2 == 14)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v2 + 1);
  }

  if ((_DWORD)v3 == 6)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v3 + 1);
  }

  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)((uint64_t)v11, v4);
  swift_bridgeObjectRelease();
  if ((_DWORD)v5 == 14)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v5 + 1);
  }

  if ((_DWORD)v6 == 3)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v6 + 1);
  }

  if ((_DWORD)v7 == 3)
  {
    Hasher._combine(_:)(0);
    if (v8 != 2) {
      goto LABEL_18;
    }
LABEL_21:
    Hasher._combine(_:)(0);
    if (v9 != 2) {
      goto LABEL_19;
    }
LABEL_22:
    Hasher._combine(_:)(0);
    return Hasher._finalize()();
  }

  Hasher._combine(_:)(1u);
  Hasher._combine(_:)(v7 + 1);
  if (v8 == 2) {
    goto LABEL_21;
  }
LABEL_18:
  Hasher._combine(_:)(1u);
  Hasher._combine(_:)((v8 & 1) + 1LL);
  if (v9 == 2) {
    goto LABEL_22;
  }
LABEL_19:
  Hasher._combine(_:)(1u);
  Hasher._combine(_:)((v9 & 1) + 1LL);
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance Morphology()
{
  uint64_t v1 = *v0;
  uint64_t v2 = v0[1];
  uint64_t v3 = v0[2];
  uint64_t v4 = *((void *)v0 + 1);
  uint64_t v5 = v0[16];
  uint64_t v6 = v0[17];
  uint64_t v7 = v0[18];
  int v8 = v0[19];
  int v9 = v0[20];
  Hasher.init(_seed:)();
  if (v1 == 3)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v1 + 1);
  }

  if ((_DWORD)v2 == 14)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v2 + 1);
  }

  if ((_DWORD)v3 == 6)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v3 + 1);
  }

  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)((uint64_t)v11, v4);
  swift_bridgeObjectRelease();
  if ((_DWORD)v5 == 14)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v5 + 1);
  }

  if ((_DWORD)v6 == 3)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v6 + 1);
  }

  if ((_DWORD)v7 == 3)
  {
    Hasher._combine(_:)(0);
    if (v8 != 2) {
      goto LABEL_18;
    }
LABEL_21:
    Hasher._combine(_:)(0);
    if (v9 != 2) {
      goto LABEL_19;
    }
LABEL_22:
    Hasher._combine(_:)(0);
    return Hasher._finalize()();
  }

  Hasher._combine(_:)(1u);
  Hasher._combine(_:)(v7 + 1);
  if (v8 == 2) {
    goto LABEL_21;
  }
LABEL_18:
  Hasher._combine(_:)(1u);
  Hasher._combine(_:)((v8 & 1) + 1LL);
  if (v9 == 2) {
    goto LABEL_22;
  }
LABEL_19:
  Hasher._combine(_:)(1u);
  Hasher._combine(_:)((v9 & 1) + 1LL);
  return Hasher._finalize()();
}

void InflectionRule.hash(into:)(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = v2[1];
  if (v4)
  {
    uint64_t v5 = *((unsigned __int8 *)v2 + 20);
    uint64_t v6 = *((unsigned int *)v2 + 4);
    uint64_t v7 = *v2;
    Hasher._combine(_:)(1uLL);
    if (v7 == 3LL)
    {
      Hasher._combine(_:)(0);
    }

    else
    {
      Hasher._combine(_:)(1u);
      Hasher._combine(_:)(v7 + 1LL);
    }

    unint64_t v9 = v6 | (v5 << 32);
    if ((v7 & 0xFF00) == 0xE00)
    {
      Hasher._combine(_:)(0);
    }

    else
    {
      Hasher._combine(_:)(1u);
      Hasher._combine(_:)(BYTE1(v7) + 1LL);
    }

    if ((v7 & 0xFF0000) == 0x60000)
    {
      Hasher._combine(_:)(0);
    }

    else
    {
      Hasher._combine(_:)(1u);
      Hasher._combine(_:)(BYTE2(v7) + 1LL);
    }

    swift_bridgeObjectRetain();
    specialized Dictionary<>.hash(into:)(a1, v4);
    swift_bridgeObjectRelease();
    if (v6 == 14)
    {
      Hasher._combine(_:)(0);
    }

    else
    {
      Hasher._combine(_:)(1u);
      Hasher._combine(_:)(v9 + 1LL);
    }

    if (BYTE1(v9) == 3)
    {
      Hasher._combine(_:)(0);
    }

    else
    {
      Hasher._combine(_:)(1u);
      Hasher._combine(_:)(BYTE1(v9) + 1LL);
    }

    if (BYTE2(v9) == 3)
    {
      Hasher._combine(_:)(0);
    }

    else
    {
      Hasher._combine(_:)(1u);
      Hasher._combine(_:)(BYTE2(v9) + 1LL);
    }

    if ((v9 & 0xFF000000) == 0x2000000)
    {
      Hasher._combine(_:)(0);
    }

    else
    {
      Hasher._combine(_:)(1u);
      Hasher._combine(_:)(((v9 >> 24) & 1) + 1);
    }

    if (HIDWORD(v9) == 2)
    {
      Hasher._combine(_:)(0);
      return;
    }

    Hasher._combine(_:)(1u);
    Swift::UInt v8 = (HIDWORD(v9) & 1) + 1;
  }

  else
  {
    Swift::UInt v8 = 0LL;
  }

  Hasher._combine(_:)(v8);
}

Swift::Int InflectionRule.hashValue.getter()
{
  uint64_t v2 = *v0;
  uint64_t v1 = v0[1];
  uint64_t v3 = *((unsigned __int8 *)v0 + 20);
  uint64_t v4 = *((unsigned int *)v0 + 4);
  Hasher.init(_seed:)();
  if (!v1)
  {
    Swift::UInt v6 = 0LL;
LABEL_27:
    Hasher._combine(_:)(v6);
    return Hasher._finalize()();
  }

  unint64_t v5 = v4 | (v3 << 32);
  Hasher._combine(_:)(1uLL);
  if (v2 == 3LL)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v2 + 1LL);
  }

  if ((v2 & 0xFF00) == 0xE00)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(BYTE1(v2) + 1LL);
  }

  if ((v2 & 0xFF0000) == 0x60000)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(BYTE2(v2) + 1LL);
  }

  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)((uint64_t)v8, v1);
  swift_bridgeObjectRelease();
  if (v5 == 14)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v5 + 1LL);
  }

  if (BYTE1(v5) == 3)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(BYTE1(v5) + 1LL);
  }

  if (BYTE2(v5) == 3)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(BYTE2(v5) + 1LL);
  }

  if ((v5 & 0xFF000000) == 0x2000000)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(((v5 >> 24) & 1) + 1);
  }

  if (BYTE4(v5) != 2LL)
  {
    Hasher._combine(_:)(1u);
    Swift::UInt v6 = (HIDWORD(v5) & 1) + 1;
    goto LABEL_27;
  }

  Hasher._combine(_:)(0);
  return Hasher._finalize()();
}

uint64_t Morphology.CodingKeys.rawValue.getter(unsigned __int8 a1)
{
  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_1830A5154 + 4 * byte_18379FE80[a1]))( 0xD000000000000011LL,  0x80000001839C8420LL);
}

uint64_t sub_1830A5154()
{
  return 0x6974616D6D617267LL;
}

uint64_t sub_1830A5178()
{
  return 0x7053664F74726170LL;
}

uint64_t sub_1830A5198()
{
  return 0x7265626D756ELL;
}

uint64_t sub_1830A51AC()
{
  return 0x72506D6F74737563LL;
}

  ;
}

uint64_t sub_1830A51E4()
{
  return 0x546E756F6E6F7270LL;
}

uint64_t sub_1830A5204()
{
  return 0x6E696D7265746564LL;
}

uint64_t sub_1830A5228()
{
  return 0x6574696E69666564LL;
}

uint64_t Morphology.CodingKeys.stringValue.getter(unsigned __int8 a1)
{
  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_1830A5280 + 4 * byte_18379FE89[a1]))( 0xD000000000000011LL,  0x80000001839C8420LL);
}

uint64_t sub_1830A5280()
{
  return 0x6974616D6D617267LL;
}

uint64_t sub_1830A52A4()
{
  return 0x7053664F74726170LL;
}

uint64_t sub_1830A52C4()
{
  return 0x7265626D756ELL;
}

uint64_t sub_1830A52D8()
{
  return 0x72506D6F74737563LL;
}

  ;
}

uint64_t sub_1830A5310()
{
  return 0x546E756F6E6F7270LL;
}

uint64_t sub_1830A5330()
{
  return 0x6E696D7265746564LL;
}

uint64_t sub_1830A5354()
{
  return 0x6574696E69666564LL;
}

void protocol witness for Hashable.hash(into:) in conformance InflectionRule(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = v2[1];
  if (v4)
  {
    uint64_t v5 = *((unsigned __int8 *)v2 + 20);
    uint64_t v6 = *((unsigned int *)v2 + 4);
    uint64_t v7 = *v2;
    Hasher._combine(_:)(1uLL);
    if (v7 == 3LL)
    {
      Hasher._combine(_:)(0);
    }

    else
    {
      Hasher._combine(_:)(1u);
      Hasher._combine(_:)(v7 + 1LL);
    }

    unint64_t v9 = v6 | (v5 << 32);
    if ((v7 & 0xFF00) == 0xE00)
    {
      Hasher._combine(_:)(0);
    }

    else
    {
      Hasher._combine(_:)(1u);
      Hasher._combine(_:)(BYTE1(v7) + 1LL);
    }

    if ((v7 & 0xFF0000) == 0x60000)
    {
      Hasher._combine(_:)(0);
    }

    else
    {
      Hasher._combine(_:)(1u);
      Hasher._combine(_:)(BYTE2(v7) + 1LL);
    }

    swift_bridgeObjectRetain();
    specialized Dictionary<>.hash(into:)(a1, v4);
    swift_bridgeObjectRelease();
    if (v6 == 14)
    {
      Hasher._combine(_:)(0);
    }

    else
    {
      Hasher._combine(_:)(1u);
      Hasher._combine(_:)(v9 + 1LL);
    }

    if (BYTE1(v9) == 3)
    {
      Hasher._combine(_:)(0);
    }

    else
    {
      Hasher._combine(_:)(1u);
      Hasher._combine(_:)(BYTE1(v9) + 1LL);
    }

    if (BYTE2(v9) == 3)
    {
      Hasher._combine(_:)(0);
    }

    else
    {
      Hasher._combine(_:)(1u);
      Hasher._combine(_:)(BYTE2(v9) + 1LL);
    }

    if ((v9 & 0xFF000000) == 0x2000000)
    {
      Hasher._combine(_:)(0);
    }

    else
    {
      Hasher._combine(_:)(1u);
      Hasher._combine(_:)(((v9 >> 24) & 1) + 1);
    }

    if (HIDWORD(v9) == 2)
    {
      Hasher._combine(_:)(0);
      return;
    }

    Hasher._combine(_:)(1u);
    Swift::UInt v8 = (HIDWORD(v9) & 1) + 1;
  }

  else
  {
    Swift::UInt v8 = 0LL;
  }

  Hasher._combine(_:)(v8);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance InflectionRule()
{
  uint64_t v2 = *v0;
  uint64_t v1 = v0[1];
  uint64_t v3 = *((unsigned __int8 *)v0 + 20);
  uint64_t v4 = *((unsigned int *)v0 + 4);
  Hasher.init(_seed:)();
  if (!v1)
  {
    Swift::UInt v6 = 0LL;
LABEL_27:
    Hasher._combine(_:)(v6);
    return Hasher._finalize()();
  }

  unint64_t v5 = v4 | (v3 << 32);
  Hasher._combine(_:)(1uLL);
  if (v2 == 3LL)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v2 + 1LL);
  }

  if ((v2 & 0xFF00) == 0xE00)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(BYTE1(v2) + 1LL);
  }

  if ((v2 & 0xFF0000) == 0x60000)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(BYTE2(v2) + 1LL);
  }

  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)((uint64_t)v8, v1);
  swift_bridgeObjectRelease();
  if (v5 == 14)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v5 + 1LL);
  }

  if (BYTE1(v5) == 3)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(BYTE1(v5) + 1LL);
  }

  if (BYTE2(v5) == 3)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(BYTE2(v5) + 1LL);
  }

  if ((v5 & 0xFF000000) == 0x2000000)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(((v5 >> 24) & 1) + 1);
  }

  if (BYTE4(v5) != 2LL)
  {
    Hasher._combine(_:)(1u);
    Swift::UInt v6 = (HIDWORD(v5) & 1) + 1;
    goto LABEL_27;
  }

  Hasher._combine(_:)(0);
  return Hasher._finalize()();
}

void protocol witness for static Equatable.== infix(_:_:) in conformance Morphology.CodingKeys(char *a1)
{
  specialized == infix<A>(_:_:)(*a1);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance Morphology.CodingKeys()
{
  char v1 = *v0;
  Hasher.init(_seed:)();
  specialized RawRepresentable<>.hash(into:)((uint64_t)v3, v1);
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance Morphology.CodingKeys(uint64_t a1)
{
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance Morphology.CodingKeys()
{
  char v1 = *v0;
  Hasher.init(_seed:)();
  specialized RawRepresentable<>.hash(into:)((uint64_t)v3, v1);
  return Hasher._finalize()();
}

unint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance Morphology.CodingKeys@<X0>( Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result = specialized Morphology.CodingKeys.init(rawValue:)(*a1);
  *a2 = result;
  return result;
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance Morphology.CodingKeys@<X0>( uint64_t *a1@<X8>)
{
  uint64_t result = Morphology.CodingKeys.rawValue.getter(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance Morphology.CodingKeys()
{
  return Morphology.CodingKeys.stringValue.getter(*v0);
}

unint64_t protocol witness for CodingKey.init(stringValue:) in conformance Morphology.CodingKeys@<X0>( Swift::String a1@<X1:X0>, _BYTE *a2@<X8>)
{
  unint64_t result = specialized Morphology.CodingKeys.init(rawValue:)(a1);
  *a2 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance Morphology.CodingKeys()
{
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance Morphology.CodingKeys()
{
  return CodingKey.debugDescription.getter();
}

uint64_t Morphology.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<Morphology.CodingKeys>);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1895F8858](v5);
  Swift::UInt v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type Morphology.CodingKeys and conformance Morphology.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v2)
  {
    char v23 = 0;
    lazy protocol witness table accessor for type Morphology.GrammaticalGender and conformance Morphology.GrammaticalGender();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    char v9 = v21;
    char v23 = 1;
    lazy protocol witness table accessor for type Morphology.GrammaticalCase and conformance Morphology.GrammaticalCase();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    int v10 = v21;
    char v23 = 2;
    lazy protocol witness table accessor for type Morphology.PartOfSpeech and conformance Morphology.PartOfSpeech();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    int v22 = v10;
    int v11 = v21;
    char v23 = 3;
    lazy protocol witness table accessor for type Morphology.GrammaticalNumber and conformance Morphology.GrammaticalNumber();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    int v20 = v11;
    int v12 = v21;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : Morphology._CustomPronoun]);
    char v23 = 4;
    lazy protocol witness table accessor for type [String : Morphology._CustomPronoun] and conformance <> [A : B]( &lazy protocol witness table cache variable for type [String : Morphology._CustomPronoun] and conformance <> [A : B],  (uint64_t (*)(void))lazy protocol witness table accessor for type Morphology._CustomPronoun and conformance Morphology._CustomPronoun,  MEMORY[0x189617FD8],  MEMORY[0x189617928]);
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    int v19 = v12;
    if (v21) {
      uint64_t v14 = v21;
    }
    else {
      uint64_t v14 = MEMORY[0x18961AFF0];
    }
    char v23 = 5;
    lazy protocol witness table accessor for type Morphology.GrammaticalPerson and conformance Morphology.GrammaticalPerson();
    swift_bridgeObjectRetain();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    int v18 = v21;
    char v23 = 6;
    lazy protocol witness table accessor for type Morphology.PronounType and conformance Morphology.PronounType();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    int v17 = v21;
    char v23 = 7;
    lazy protocol witness table accessor for type Morphology.Determination and conformance Morphology.Determination();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    HIDWORD(v16) = v21;
    char v23 = 8;
    lazy protocol witness table accessor for type Morphology.Definiteness and conformance Morphology.Definiteness();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    char v15 = v21;
    *(_BYTE *)a2 = v9;
    *(_BYTE *)(a2 + 1) = v20;
    *(_BYTE *)(a2 + 2) = v19;
    *(void *)(a2 + 8) = v14;
    *(_BYTE *)(a2 + 16) = v22;
    *(_BYTE *)(a2 + 17) = v18;
    *(_BYTE *)(a2 + 18) = v17;
    *(_BYTE *)(a2 + 19) = BYTE4(v16);
    *(_BYTE *)(a2 + 20) = v15;
  }

  __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  return swift_bridgeObjectRelease();
}

uint64_t Morphology.encode(to:)(void *a1)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<Morphology.CodingKeys>);
  uint64_t v25 = *(void *)(v4 - 8);
  MEMORY[0x1895F8858](v4);
  uint64_t v6 = (char *)&v17 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  int v7 = *v1;
  LODWORD(v5) = v1[2];
  int v19 = v1[1];
  int v20 = v5;
  uint64_t v21 = *((void *)v1 + 1);
  int v8 = v1[16];
  LODWORD(v5) = v1[18];
  int v22 = v1[17];
  int v23 = v5;
  int v24 = v1[19];
  int v18 = v1[20];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type Morphology.CodingKeys and conformance Morphology.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  if (v7 == 3)
  {
    uint64_t v9 = v4;
  }

  else
  {
    LOBYTE(v27) = v7;
    char v26 = 0;
    lazy protocol witness table accessor for type Morphology.GrammaticalGender and conformance Morphology.GrammaticalGender();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    uint64_t v9 = v4;
    if (v2) {
      return (*(uint64_t (**)(char *, uint64_t))(v25 + 8))(v6, v9);
    }
  }

  if (v8 == 14
    || (LOBYTE(v27) = v8,
        char v26 = 1,
        lazy protocol witness table accessor for type Morphology.GrammaticalCase and conformance Morphology.GrammaticalCase(),
        KeyedEncodingContainer.encode<A>(_:forKey:)(),
        !v2))
  {
    int v11 = v23;
    int v10 = v24;
    int v12 = v22;
    uint64_t v13 = v21;
    int v14 = v20;
    if (v19 == 14
      || (LOBYTE(v27) = v19,
          char v26 = 2,
          lazy protocol witness table accessor for type Morphology.PartOfSpeech and conformance Morphology.PartOfSpeech(),
          KeyedEncodingContainer.encode<A>(_:forKey:)(),
          !v2))
    {
      if (v14 == 6
        || (LOBYTE(v27) = v14,
            char v26 = 3,
            lazy protocol witness table accessor for type Morphology.GrammaticalNumber and conformance Morphology.GrammaticalNumber(),
            KeyedEncodingContainer.encode<A>(_:forKey:)(),
            !v2))
      {
        if (!*(void *)(v13 + 16)
          || (uint64_t v27 = v13,
              char v26 = 4,
              __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : Morphology._CustomPronoun]),
              lazy protocol witness table accessor for type [String : Morphology._CustomPronoun] and conformance <> [A : B]( &lazy protocol witness table cache variable for type [String : Morphology._CustomPronoun] and conformance <> [A : B],  (uint64_t (*)(void))lazy protocol witness table accessor for type Morphology._CustomPronoun and conformance Morphology._CustomPronoun,  MEMORY[0x189617FB0],  MEMORY[0x189617910]),  KeyedEncodingContainer.encode<A>(_:forKey:)(),  !v2))
        {
          int v15 = v18;
          if (v12 != 3)
          {
            LOBYTE(v27) = v12;
            char v26 = 5;
            lazy protocol witness table accessor for type Morphology.GrammaticalPerson and conformance Morphology.GrammaticalPerson();
            KeyedEncodingContainer.encode<A>(_:forKey:)();
            if (v2) {
              return (*(uint64_t (**)(char *, uint64_t))(v25 + 8))(v6, v9);
            }
            int v15 = v18;
          }

          if (v11 != 3)
          {
            LOBYTE(v27) = v11;
            char v26 = 6;
            lazy protocol witness table accessor for type Morphology.PronounType and conformance Morphology.PronounType();
            KeyedEncodingContainer.encode<A>(_:forKey:)();
            if (v2) {
              return (*(uint64_t (**)(char *, uint64_t))(v25 + 8))(v6, v9);
            }
            int v15 = v18;
          }

          if (v10 != 2)
          {
            LOBYTE(v27) = v10 & 1;
            char v26 = 7;
            lazy protocol witness table accessor for type Morphology.Determination and conformance Morphology.Determination();
            KeyedEncodingContainer.encode<A>(_:forKey:)();
            if (v2) {
              return (*(uint64_t (**)(char *, uint64_t))(v25 + 8))(v6, v9);
            }
            int v15 = v18;
          }

          if (v15 != 2)
          {
            LOBYTE(v27) = v15 & 1;
            char v26 = 8;
            lazy protocol witness table accessor for type Morphology.Definiteness and conformance Morphology.Definiteness();
            KeyedEncodingContainer.encode<A>(_:forKey:)();
          }
        }
      }
    }
  }

  return (*(uint64_t (**)(char *, uint64_t))(v25 + 8))(v6, v9);
}

uint64_t protocol witness for Decodable.init(from:) in conformance Morphology@<X0>( void *a1@<X0>, uint64_t a2@<X8>)
{
  return Morphology.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance Morphology(void *a1)
{
  return Morphology.encode(to:)(a1);
}

uint64_t Morphology.GrammaticalGender.init(from:)@<X0>(void *a1@<X0>, char *a2@<X8>)
{
  if (v2) {
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  }
  __swift_project_boxed_opaque_existential_1(v21, v21[3]);
  uint64_t v6 = dispatch thunk of SingleValueDecodingContainer.decode(_:)();
  uint64_t v7 = v5;
  BOOL v8 = v6 == 0x656E696E696D6566LL && v5 == 0xE800000000000000LL;
  if (v8 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    char v9 = 0;
LABEL_17:
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v21);
    *a2 = v9;
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  }

  if (v6 == 0x6E696C756373616DLL && v7 == 0xE900000000000065LL
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    char v9 = 1;
    goto LABEL_17;
  }

  if (v6 == 0x72657475656ELL && v7 == 0xE600000000000000LL)
  {
    swift_bridgeObjectRelease();
LABEL_16:
    char v9 = 2;
    goto LABEL_17;
  }

  char v10 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  if ((v10 & 1) != 0) {
    goto LABEL_16;
  }
  static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSCocoaErrorDomain");
  id v12 = objc_allocWithZone((Class)&OBJC_CLASS___NSError);
  uint64_t v13 = String._bridgeToObjectiveCImpl()();
  swift_bridgeObjectRelease();
  id v14 = objc_msgSend(v12, sel_initWithDomain_code_userInfo_, v13, 4866, _NativeDictionary.bridged()());
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  id v15 = objc_msgSend(v14, sel_domain);
  id v16 = static String._unconditionallyBridgeFromObjectiveC(_:)(v15);
  uint64_t v18 = v17;

  if (v16 == static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSCocoaErrorDomain") && v18 == v19)
  {
    swift_bridgeObjectRelease_n();
LABEL_23:
    swift_willThrow();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v21);
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  }

  char v20 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  if ((v20 & 1) != 0) {
    goto LABEL_23;
  }
  __break(1u);
  return result;
}

uint64_t Morphology.GrammaticalGender.encode(to:)(void *a1)
{
  return Morphology.GrammaticalGender.encode(to:)(a1);
}

{
  _BYTE v2[24];
  uint64_t v3;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  dispatch thunk of Encoder.singleValueContainer()();
  __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v2, v3);
  dispatch thunk of SingleValueEncodingContainer.encode(_:)();
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v2);
}

uint64_t protocol witness for Decodable.init(from:) in conformance Morphology.GrammaticalGender@<X0>( void *a1@<X0>, char *a2@<X8>)
{
  return Morphology.GrammaticalGender.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance Morphology.GrammaticalGender(void *a1)
{
  return Morphology.GrammaticalGender.encode(to:)(a1);
}

uint64_t Morphology.GrammaticalNumber.init(from:)@<X0>(void *a1@<X0>, char *a2@<X8>)
{
  if (v2) {
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  }
  __swift_project_boxed_opaque_existential_1(v21, v21[3]);
  uint64_t v6 = dispatch thunk of SingleValueDecodingContainer.decode(_:)();
  uint64_t v7 = v5;
  BOOL v8 = v6 == 6647407 && v5 == 0xE300000000000000LL;
  if (v8 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    char v9 = 0;
LABEL_29:
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v21);
    *a2 = v9;
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  }

  if (v6 == 1869768058 && v7 == 0xE400000000000000LL || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    char v9 = 1;
    goto LABEL_29;
  }

  if (v6 == 0x726568746FLL && v7 == 0xE500000000000000LL || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    char v9 = 2;
    goto LABEL_29;
  }

  if (v6 == 7305076 && v7 == 0xE300000000000000LL || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    char v9 = 3;
    goto LABEL_29;
  }

  if (v6 == 7824742 && v7 == 0xE300000000000000LL || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    char v9 = 4;
    goto LABEL_29;
  }

  if (v6 == 2037277037 && v7 == 0xE400000000000000LL)
  {
    swift_bridgeObjectRelease();
LABEL_28:
    char v9 = 5;
    goto LABEL_29;
  }

  char v10 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  if ((v10 & 1) != 0) {
    goto LABEL_28;
  }
  static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSCocoaErrorDomain");
  id v12 = objc_allocWithZone((Class)&OBJC_CLASS___NSError);
  uint64_t v13 = String._bridgeToObjectiveCImpl()();
  swift_bridgeObjectRelease();
  id v14 = objc_msgSend(v12, sel_initWithDomain_code_userInfo_, v13, 4866, _NativeDictionary.bridged()());
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  id v15 = objc_msgSend(v14, sel_domain);
  id v16 = static String._unconditionallyBridgeFromObjectiveC(_:)(v15);
  uint64_t v18 = v17;

  if (v16 == static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSCocoaErrorDomain") && v18 == v19)
  {
    swift_bridgeObjectRelease_n();
LABEL_35:
    swift_willThrow();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v21);
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  }

  char v20 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  if ((v20 & 1) != 0) {
    goto LABEL_35;
  }
  __break(1u);
  return result;
}

void Morphology.GrammaticalNumber.encode(to:)(void *a1)
{
  uint64_t v2 = *v1;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  dispatch thunk of Encoder.singleValueContainer()();
  __asm { BR              X9 }

uint64_t sub_1830A68C8()
{
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v1);
}

uint64_t protocol witness for Decodable.init(from:) in conformance Morphology.GrammaticalNumber@<X0>( void *a1@<X0>, char *a2@<X8>)
{
  return Morphology.GrammaticalNumber.init(from:)(a1, a2);
}

void protocol witness for Encodable.encode(to:) in conformance Morphology.GrammaticalNumber(void *a1)
{
}

uint64_t Morphology.PartOfSpeech.init(from:)@<X0>(void *a1@<X0>, char *a2@<X8>)
{
  if (v2) {
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  }
  __swift_project_boxed_opaque_existential_1(v21, v21[3]);
  uint64_t v6 = dispatch thunk of SingleValueDecodingContainer.decode(_:)();
  uint64_t v7 = v5;
  BOOL v8 = v6 == 0x6E696D7265746564LL && v5 == 0xEA00000000007265LL;
  if (v8 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    char v9 = 0;
LABEL_8:
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v21);
    *a2 = v9;
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  }

  if (v6 == 0x6E756F6E6F7270LL && v7 == 0xE700000000000000LL
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    char v9 = 1;
    goto LABEL_8;
  }

  if (v6 == 0x72657474656CLL && v7 == 0xE600000000000000LL || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    char v9 = 2;
    goto LABEL_8;
  }

  if (v6 == 0x627265766461LL && v7 == 0xE600000000000000LL || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    char v9 = 3;
    goto LABEL_8;
  }

  if (v6 == 0x656C636974726170LL && v7 == 0xE800000000000000LL
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    char v9 = 4;
    goto LABEL_8;
  }

  if (v6 == 0x76697463656A6461LL && v7 == 0xE900000000000065LL
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    char v9 = 5;
    goto LABEL_8;
  }

  if (v6 == 0x697469736F706461LL && v7 == 0xEA00000000006E6FLL
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    char v9 = 6;
    goto LABEL_8;
  }

  if (v6 == 1651664246 && v7 == 0xE400000000000000LL || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    char v9 = 7;
    goto LABEL_8;
  }

  if (v6 == 1853189998 && v7 == 0xE400000000000000LL || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    char v9 = 8;
    goto LABEL_8;
  }

  if (v6 == 0x74636E756A6E6F63LL && v7 == 0xEB000000006E6F69LL
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    char v9 = 9;
    goto LABEL_8;
  }

  if (v6 == 0x6C6172656D756ELL && v7 == 0xE700000000000000LL
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    char v9 = 10;
    goto LABEL_8;
  }

  if (v6 == 0x63656A7265746E69LL && v7 == 0xEC0000006E6F6974LL
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    char v9 = 11;
    goto LABEL_8;
  }

  if (v6 == 0x7469736F70657270LL && v7 == 0xEB000000006E6F69LL
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    char v9 = 12;
    goto LABEL_8;
  }

  if (v6 == 0x6169766572626261LL && v7 == 0xEC0000006E6F6974LL)
  {
    swift_bridgeObjectRelease();
LABEL_62:
    char v9 = 13;
    goto LABEL_8;
  }

  char v11 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  if ((v11 & 1) != 0) {
    goto LABEL_62;
  }
  static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSCocoaErrorDomain");
  id v12 = objc_allocWithZone((Class)&OBJC_CLASS___NSError);
  uint64_t v13 = String._bridgeToObjectiveCImpl()();
  swift_bridgeObjectRelease();
  id v14 = objc_msgSend(v12, sel_initWithDomain_code_userInfo_, v13, 4866, _NativeDictionary.bridged()());
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  id v15 = objc_msgSend(v14, sel_domain);
  id v16 = static String._unconditionallyBridgeFromObjectiveC(_:)(v15);
  uint64_t v18 = v17;

  if (v16 == static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSCocoaErrorDomain") && v18 == v19)
  {
    swift_bridgeObjectRelease_n();
LABEL_67:
    swift_willThrow();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v21);
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  }

  char v20 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  if ((v20 & 1) != 0) {
    goto LABEL_67;
  }
  __break(1u);
  return result;
}

void Morphology.PartOfSpeech.encode(to:)(void *a1)
{
  uint64_t v2 = *v1;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  dispatch thunk of Encoder.singleValueContainer()();
  __asm { BR              X9 }

uint64_t sub_1830A71F0()
{
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v1);
}

uint64_t protocol witness for Decodable.init(from:) in conformance Morphology.PartOfSpeech@<X0>( void *a1@<X0>, char *a2@<X8>)
{
  return Morphology.PartOfSpeech.init(from:)(a1, a2);
}

void protocol witness for Encodable.encode(to:) in conformance Morphology.PartOfSpeech(void *a1)
{
}

uint64_t Morphology.GrammaticalCase.init(from:)@<X0>(void *a1@<X0>, char *a2@<X8>)
{
  if (v2) {
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  }
  __swift_project_boxed_opaque_existential_1(v21, v21[3]);
  uint64_t v6 = dispatch thunk of SingleValueDecodingContainer.decode(_:)();
  uint64_t v7 = v5;
  BOOL v8 = v6 == 0x6974616E696D6F6ELL && v5 == 0xEA00000000006576LL;
  if (v8 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    char v9 = 0;
LABEL_8:
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v21);
    *a2 = v9;
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  }

  if (v6 == 0x6974617375636361LL && v7 == 0xEA00000000006576LL
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    char v9 = 1;
    goto LABEL_8;
  }

  if (v6 == 0x657669746164LL && v7 == 0xE600000000000000LL || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    char v9 = 2;
    goto LABEL_8;
  }

  if (v6 == 0x65766974696E6567LL && v7 == 0xE800000000000000LL
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    char v9 = 3;
    goto LABEL_8;
  }

  if (v6 == 0x7469736F70657270LL && v7 == 0xED00006C616E6F69LL
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    char v9 = 4;
    goto LABEL_8;
  }

  if (v6 == 0x65766974616C6261LL && v7 == 0xE800000000000000LL
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    char v9 = 5;
    goto LABEL_8;
  }

  if (v6 == 0x6576697373656461LL && v7 == 0xE800000000000000LL
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    char v9 = 6;
    goto LABEL_8;
  }

  if (v6 == 0x65766974616C6C61LL && v7 == 0xE800000000000000LL
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    char v9 = 7;
    goto LABEL_8;
  }

  if (v6 == 0x65766974616C65LL && v7 == 0xE700000000000000LL
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    char v9 = 8;
    goto LABEL_8;
  }

  if (v6 == 0x65766974616C6C69LL && v7 == 0xE800000000000000LL
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    char v9 = 9;
    goto LABEL_8;
  }

  if (v6 == 0x657669737365LL && v7 == 0xE600000000000000LL || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    char v9 = 10;
    goto LABEL_8;
  }

  if (v6 == 0x6576697373656E69LL && v7 == 0xE800000000000000LL
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    char v9 = 11;
    goto LABEL_8;
  }

  if (v6 == 0x6576697461636F6CLL && v7 == 0xE800000000000000LL
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    char v9 = 12;
    goto LABEL_8;
  }

  if (v6 == 0x74616C736E617274LL && v7 == 0xEB00000000657669LL)
  {
    swift_bridgeObjectRelease();
LABEL_62:
    char v9 = 13;
    goto LABEL_8;
  }

  char v11 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  if ((v11 & 1) != 0) {
    goto LABEL_62;
  }
  static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSCocoaErrorDomain");
  id v12 = objc_allocWithZone((Class)&OBJC_CLASS___NSError);
  uint64_t v13 = String._bridgeToObjectiveCImpl()();
  swift_bridgeObjectRelease();
  id v14 = objc_msgSend(v12, sel_initWithDomain_code_userInfo_, v13, 4866, _NativeDictionary.bridged()());
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  id v15 = objc_msgSend(v14, sel_domain);
  id v16 = static String._unconditionallyBridgeFromObjectiveC(_:)(v15);
  uint64_t v18 = v17;

  if (v16 == static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSCocoaErrorDomain") && v18 == v19)
  {
    swift_bridgeObjectRelease_n();
LABEL_67:
    swift_willThrow();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v21);
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  }

  char v20 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  if ((v20 & 1) != 0) {
    goto LABEL_67;
  }
  __break(1u);
  return result;
}

void Morphology.GrammaticalCase.encode(to:)(void *a1)
{
  uint64_t v2 = *v1;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  dispatch thunk of Encoder.singleValueContainer()();
  __asm { BR              X9 }

uint64_t sub_1830A7C78()
{
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v1);
}

uint64_t protocol witness for Decodable.init(from:) in conformance Morphology.GrammaticalCase@<X0>( void *a1@<X0>, char *a2@<X8>)
{
  return Morphology.GrammaticalCase.init(from:)(a1, a2);
}

void protocol witness for Encodable.encode(to:) in conformance Morphology.GrammaticalCase(void *a1)
{
}

uint64_t Morphology.Determination.init(from:)@<X0>(void *a1@<X0>, char *a2@<X8>)
{
  if (v2) {
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  }
  __swift_project_boxed_opaque_existential_1(v22, v22[3]);
  uint64_t v5 = dispatch thunk of SingleValueDecodingContainer.decode(_:)();
  uint64_t v7 = v5;
  uint64_t v8 = v6;
  BOOL v9 = v5 == 0x646E657065646E69LL && v6 == 0xEB00000000746E65LL;
  if (v9 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    char v10 = 0;
LABEL_15:
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v22);
    *a2 = v10;
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  }

  if (v7 == 0x6E65646E65706564LL && v8 == 0xE900000000000074LL)
  {
    swift_bridgeObjectRelease();
LABEL_14:
    char v10 = 1;
    goto LABEL_15;
  }

  char v11 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  if ((v11 & 1) != 0) {
    goto LABEL_14;
  }
  static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSCocoaErrorDomain");
  id v13 = objc_allocWithZone((Class)&OBJC_CLASS___NSError);
  uint64_t v14 = String._bridgeToObjectiveCImpl()();
  swift_bridgeObjectRelease();
  id v15 = objc_msgSend(v13, sel_initWithDomain_code_userInfo_, v14, 4866, _NativeDictionary.bridged()());
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  id v16 = objc_msgSend(v15, sel_domain);
  id v17 = static String._unconditionallyBridgeFromObjectiveC(_:)(v16);
  uint64_t v19 = v18;

  if (v17 == static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSCocoaErrorDomain") && v19 == v20)
  {
    swift_bridgeObjectRelease_n();
    goto LABEL_21;
  }

  char v21 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  if ((v21 & 1) != 0)
  {
LABEL_21:
    swift_willThrow();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v22);
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  }

  __break(1u);
  return result;
}

uint64_t Morphology.Determination.encode(to:)(void *a1)
{
  return Morphology.Determination.encode(to:)(a1);
}

{
  _BYTE v2[24];
  uint64_t v3;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  dispatch thunk of Encoder.singleValueContainer()();
  __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v2, v3);
  dispatch thunk of SingleValueEncodingContainer.encode(_:)();
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v2);
}

uint64_t protocol witness for Decodable.init(from:) in conformance Morphology.Determination@<X0>( void *a1@<X0>, char *a2@<X8>)
{
  return Morphology.Determination.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance Morphology.Determination(void *a1)
{
  return protocol witness for Encodable.encode(to:) in conformance Morphology.Determination(a1);
}

{
  _BYTE v2[24];
  uint64_t v3;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  dispatch thunk of Encoder.singleValueContainer()();
  __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v2, v3);
  dispatch thunk of SingleValueEncodingContainer.encode(_:)();
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v2);
}

uint64_t Morphology.Definiteness.init(from:)@<X0>(void *a1@<X0>, char *a2@<X8>)
{
  if (v2) {
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  }
  __swift_project_boxed_opaque_existential_1(v22, v22[3]);
  uint64_t v5 = dispatch thunk of SingleValueDecodingContainer.decode(_:)();
  uint64_t v7 = v5;
  uint64_t v8 = v6;
  BOOL v9 = v5 == 0x696E696665646E69LL && v6 == 0xEA00000000006574LL;
  if (v9 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    char v10 = 0;
LABEL_15:
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v22);
    *a2 = v10;
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  }

  if (v7 == 0x6574696E69666564LL && v8 == 0xE800000000000000LL)
  {
    swift_bridgeObjectRelease();
LABEL_14:
    char v10 = 1;
    goto LABEL_15;
  }

  char v11 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  if ((v11 & 1) != 0) {
    goto LABEL_14;
  }
  static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSCocoaErrorDomain");
  id v13 = objc_allocWithZone((Class)&OBJC_CLASS___NSError);
  uint64_t v14 = String._bridgeToObjectiveCImpl()();
  swift_bridgeObjectRelease();
  id v15 = objc_msgSend(v13, sel_initWithDomain_code_userInfo_, v14, 4866, _NativeDictionary.bridged()());
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  id v16 = objc_msgSend(v15, sel_domain);
  id v17 = static String._unconditionallyBridgeFromObjectiveC(_:)(v16);
  uint64_t v19 = v18;

  if (v17 == static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSCocoaErrorDomain") && v19 == v20)
  {
    swift_bridgeObjectRelease_n();
    goto LABEL_21;
  }

  char v21 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  if ((v21 & 1) != 0)
  {
LABEL_21:
    swift_willThrow();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v22);
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  }

  __break(1u);
  return result;
}

uint64_t Morphology.Definiteness.encode(to:)(void *a1)
{
  return Morphology.Determination.encode(to:)(a1);
}

uint64_t protocol witness for Decodable.init(from:) in conformance Morphology.Definiteness@<X0>( void *a1@<X0>, char *a2@<X8>)
{
  return Morphology.Definiteness.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance Morphology.Definiteness(void *a1)
{
  return protocol witness for Encodable.encode(to:) in conformance Morphology.Determination(a1);
}

uint64_t Morphology.GrammaticalPerson.init(from:)@<X0>(void *a1@<X0>, char *a2@<X8>)
{
  if (v2) {
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  }
  __swift_project_boxed_opaque_existential_1(v21, v21[3]);
  uint64_t v6 = dispatch thunk of SingleValueDecodingContainer.decode(_:)();
  uint64_t v7 = v5;
  BOOL v8 = v6 == 0x7473726966LL && v5 == 0xE500000000000000LL;
  if (v8 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    char v9 = 0;
LABEL_17:
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v21);
    *a2 = v9;
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  }

  if (v6 == 0x646E6F636573LL && v7 == 0xE600000000000000LL || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    char v9 = 1;
    goto LABEL_17;
  }

  if (v6 == 0x6472696874LL && v7 == 0xE500000000000000LL)
  {
    swift_bridgeObjectRelease();
LABEL_16:
    char v9 = 2;
    goto LABEL_17;
  }

  char v10 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  if ((v10 & 1) != 0) {
    goto LABEL_16;
  }
  static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSCocoaErrorDomain");
  id v12 = objc_allocWithZone((Class)&OBJC_CLASS___NSError);
  uint64_t v13 = String._bridgeToObjectiveCImpl()();
  swift_bridgeObjectRelease();
  id v14 = objc_msgSend(v12, sel_initWithDomain_code_userInfo_, v13, 4866, _NativeDictionary.bridged()());
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  id v15 = objc_msgSend(v14, sel_domain);
  id v16 = static String._unconditionallyBridgeFromObjectiveC(_:)(v15);
  uint64_t v18 = v17;

  if (v16 == static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSCocoaErrorDomain") && v18 == v19)
  {
    swift_bridgeObjectRelease_n();
LABEL_23:
    swift_willThrow();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v21);
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  }

  char v20 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  if ((v20 & 1) != 0) {
    goto LABEL_23;
  }
  __break(1u);
  return result;
}

uint64_t Morphology.GrammaticalPerson.encode(to:)(void *a1)
{
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v2);
}

uint64_t protocol witness for Decodable.init(from:) in conformance Morphology.GrammaticalPerson@<X0>( void *a1@<X0>, char *a2@<X8>)
{
  return Morphology.GrammaticalPerson.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance Morphology.GrammaticalPerson(void *a1)
{
  return Morphology.GrammaticalPerson.encode(to:)(a1);
}

uint64_t Morphology.PronounType.init(from:)@<X0>(void *a1@<X0>, char *a2@<X8>)
{
  if (v2) {
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  }
  __swift_project_boxed_opaque_existential_1(v21, v21[3]);
  uint64_t v6 = dispatch thunk of SingleValueDecodingContainer.decode(_:)();
  uint64_t v7 = v5;
  BOOL v8 = v6 == 0x6C616E6F73726570LL && v5 == 0xE800000000000000LL;
  if (v8 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    char v9 = 0;
LABEL_17:
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v21);
    *a2 = v9;
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  }

  if (v6 == 0x766978656C666572LL && v7 == 0xE900000000000065LL
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    char v9 = 1;
    goto LABEL_17;
  }

  if (v6 == 0x6973736573736F70LL && v7 == 0xEA00000000006576LL)
  {
    swift_bridgeObjectRelease();
LABEL_16:
    char v9 = 2;
    goto LABEL_17;
  }

  char v10 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  if ((v10 & 1) != 0) {
    goto LABEL_16;
  }
  static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSCocoaErrorDomain");
  id v12 = objc_allocWithZone((Class)&OBJC_CLASS___NSError);
  uint64_t v13 = String._bridgeToObjectiveCImpl()();
  swift_bridgeObjectRelease();
  id v14 = objc_msgSend(v12, sel_initWithDomain_code_userInfo_, v13, 4866, _NativeDictionary.bridged()());
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  id v15 = objc_msgSend(v14, sel_domain);
  id v16 = static String._unconditionallyBridgeFromObjectiveC(_:)(v15);
  uint64_t v18 = v17;

  if (v16 == static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSCocoaErrorDomain") && v18 == v19)
  {
    swift_bridgeObjectRelease_n();
LABEL_23:
    swift_willThrow();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v21);
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  }

  char v20 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  if ((v20 & 1) != 0) {
    goto LABEL_23;
  }
  __break(1u);
  return result;
}

uint64_t Morphology.PronounType.encode(to:)(void *a1)
{
  return Morphology.GrammaticalGender.encode(to:)(a1);
}

uint64_t protocol witness for Decodable.init(from:) in conformance Morphology.PronounType@<X0>( void *a1@<X0>, char *a2@<X8>)
{
  return Morphology.PronounType.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance Morphology.PronounType(void *a1)
{
  return Morphology.PronounType.encode(to:)(a1);
}

uint64_t InflectionRule.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  if (!v2)
  {
    __swift_project_boxed_opaque_existential_1(v14, v15);
    if ((dispatch thunk of SingleValueDecodingContainer.decode(_:)() & 1) != 0)
    {
      unint64_t v5 = 0LL;
      uint64_t v6 = 0LL;
      unint64_t v7 = 0LL;
    }

    else
    {
      __swift_project_boxed_opaque_existential_1(v14, v15);
      lazy protocol witness table accessor for type Morphology and conformance Morphology();
      dispatch thunk of SingleValueDecodingContainer.decode<A>(_:)();
      uint64_t v6 = v11;
      unint64_t v5 = v9 | ((unint64_t)v10 << 16);
      unint64_t v7 = v12 | ((unint64_t)v13 << 32);
    }

    __swift_destroy_boxed_opaque_existential_1((uint64_t)v14);
    *(void *)a2 = v5;
    *(void *)(a2 + 8) = v6;
    *(_BYTE *)(a2 + 20) = BYTE4(v7);
    *(_DWORD *)(a2 + 16) = v7;
  }

  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t InflectionRule.encode(to:)(void *a1)
{
  uint64_t v2 = *(void *)(v1 + 8);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  dispatch thunk of Encoder.singleValueContainer()();
  __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v4, v5);
  if (v2)
  {
    lazy protocol witness table accessor for type Morphology and conformance Morphology();
    dispatch thunk of SingleValueEncodingContainer.encode<A>(_:)();
  }

  else
  {
    dispatch thunk of SingleValueEncodingContainer.encode(_:)();
  }

  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v4);
}

uint64_t protocol witness for Decodable.init(from:) in conformance InflectionRule@<X0>( void *a1@<X0>, uint64_t a2@<X8>)
{
  return InflectionRule.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance InflectionRule(void *a1)
{
  return InflectionRule.encode(to:)(a1);
}

id static InflectionRule.canInflect(language:)(uint64_t a1, uint64_t a2)
{
  return static InflectionRule.canInflect(language:)(a1, a2, (uint64_t)off_189C618C8, (SEL *)&selRef_canInflectLanguage_);
}

id static InflectionRule.canInflectPreferredLocalization.getter()
{
  return objc_msgSend((id)objc_opt_self(), sel_canInflectPreferredLocalization);
}

uint64_t Morphology.CustomPronoun.subjectForm.getter()
{
  uint64_t v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t key path setter for Morphology.CustomPronoun.subjectForm : Morphology.CustomPronoun( uint64_t *a1, void *a2)
{
  uint64_t v4 = *a1;
  uint64_t v3 = a1[1];
  swift_bridgeObjectRetain();
  uint64_t result = swift_bridgeObjectRelease();
  *a2 = v4;
  a2[1] = v3;
  return result;
}

uint64_t Morphology.CustomPronoun.subjectForm.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_bridgeObjectRelease();
  *uint64_t v2 = a1;
  v2[1] = a2;
  return result;
}

uint64_t Morphology.CustomPronoun.objectForm.getter()
{
  uint64_t v1 = *(void *)(v0 + 16);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t key path getter for Morphology.CustomPronoun.objectForm : Morphology.CustomPronoun@<X0>( uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = *(void *)(a1 + 24);
  *a2 = v2;
  a2[1] = v3;
  return swift_bridgeObjectRetain();
}

uint64_t key path setter for Morphology.CustomPronoun.objectForm : Morphology.CustomPronoun( uint64_t *a1, uint64_t a2)
{
  uint64_t v4 = *a1;
  uint64_t v3 = a1[1];
  swift_bridgeObjectRetain();
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(a2 + 16) = v4;
  *(void *)(a2 + 24) = v3;
  return result;
}

uint64_t Morphology.CustomPronoun.objectForm.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v2 + 16) = a1;
  *(void *)(v2 + 24) = a2;
  return result;
}

uint64_t Morphology.CustomPronoun.possessiveForm.getter()
{
  uint64_t v1 = *(void *)(v0 + 32);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t key path getter for Morphology.CustomPronoun.possessiveForm : Morphology.CustomPronoun@<X0>( uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = *(void *)(a1 + 40);
  *a2 = v2;
  a2[1] = v3;
  return swift_bridgeObjectRetain();
}

uint64_t key path setter for Morphology.CustomPronoun.possessiveForm : Morphology.CustomPronoun( uint64_t *a1, uint64_t a2)
{
  uint64_t v4 = *a1;
  uint64_t v3 = a1[1];
  swift_bridgeObjectRetain();
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(a2 + 32) = v4;
  *(void *)(a2 + 40) = v3;
  return result;
}

uint64_t Morphology.CustomPronoun.possessiveForm.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v2 + 32) = a1;
  *(void *)(v2 + 40) = a2;
  return result;
}

uint64_t Morphology.CustomPronoun.possessiveAdjectiveForm.getter()
{
  uint64_t v1 = *(void *)(v0 + 48);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t key path getter for Morphology.CustomPronoun.possessiveAdjectiveForm : Morphology.CustomPronoun@<X0>( uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *(void *)(a1 + 48);
  uint64_t v3 = *(void *)(a1 + 56);
  *a2 = v2;
  a2[1] = v3;
  return swift_bridgeObjectRetain();
}

uint64_t key path setter for Morphology.CustomPronoun.possessiveAdjectiveForm : Morphology.CustomPronoun( uint64_t *a1, uint64_t a2)
{
  uint64_t v4 = *a1;
  uint64_t v3 = a1[1];
  swift_bridgeObjectRetain();
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(a2 + 48) = v4;
  *(void *)(a2 + 56) = v3;
  return result;
}

uint64_t Morphology.CustomPronoun.possessiveAdjectiveForm.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v2 + 48) = a1;
  *(void *)(v2 + 56) = a2;
  return result;
}

uint64_t Morphology.CustomPronoun.reflexiveForm.getter()
{
  uint64_t v1 = *(void *)(v0 + 64);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t key path getter for Morphology.CustomPronoun.reflexiveForm : Morphology.CustomPronoun@<X0>( uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *(void *)(a1 + 64);
  uint64_t v3 = *(void *)(a1 + 72);
  *a2 = v2;
  a2[1] = v3;
  return swift_bridgeObjectRetain();
}

uint64_t key path setter for Morphology.CustomPronoun.reflexiveForm : Morphology.CustomPronoun( uint64_t *a1, uint64_t a2)
{
  uint64_t v4 = *a1;
  uint64_t v3 = a1[1];
  swift_bridgeObjectRetain();
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(a2 + 64) = v4;
  *(void *)(a2 + 72) = v3;
  return result;
}

uint64_t Morphology.CustomPronoun.reflexiveForm.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v2 + 64) = a1;
  *(void *)(v2 + 72) = a2;
  return result;
}

void __swiftcall Morphology.customPronoun(forLanguage:)( Foundation::Morphology::CustomPronoun_optional *__return_ptr retstr, Swift::String forLanguage)
{
  uint64_t v4 = *(void *)(v2 + 8);
  Swift::String v5 = String.lowercased()();
  if (*(void *)(v4 + 16)
    && (unint64_t v6 = specialized __RawDictionaryStorage.find<A>(_:)(v5._countAndFlagsBits, (uint64_t)v5._object), (v7 & 1) != 0))
  {
    BOOL v8 = (uint64_t *)(*(void *)(v4 + 56) + 80 * v6);
    uint64_t v10 = *v8;
    unsigned __int16 v9 = (void *)v8[1];
    uint64_t v12 = v8[2];
    uint64_t v11 = (void *)v8[3];
    uint64_t v14 = v8[4];
    unsigned __int8 v13 = (void *)v8[5];
    uint64_t v15 = (void *)v8[7];
    id v16 = (void *)v8[9];
    uint64_t v17 = v8[8];
    uint64_t v18 = v8[6];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    retstr->value._pronoun.subjectForm.value._uint64_t countAndFlagsBits = v10;
    retstr->value._pronoun.subjectForm.value._uint64_t object = v9;
    retstr->value._pronoun.objectForm.value._uint64_t countAndFlagsBits = v12;
    retstr->value._pronoun.objectForm.value._uint64_t object = v11;
    retstr->value._pronoun.possessiveForm.value._uint64_t countAndFlagsBits = v14;
    retstr->value._pronoun.possessiveForm.value._uint64_t object = v13;
    retstr->value._pronoun.possessiveAdjectiveForm.value._uint64_t countAndFlagsBits = v18;
    retstr->value._pronoun.possessiveAdjectiveForm.value._uint64_t object = v15;
    retstr->value._pronoun.reflexiveForm.value._uint64_t countAndFlagsBits = v17;
    retstr->value._pronoun.reflexiveForm.value._uint64_t object = v16;
  }

  else
  {
    swift_bridgeObjectRelease();
    retstr->value._pronoun.subjectForm = (Swift::String_optional)xmmword_183723F60;
    retstr->value._pronoun.objectForm = 0u;
    retstr->value._pronoun.possessiveForm = 0u;
    retstr->value._pronoun.possessiveAdjectiveForm = 0u;
    retstr->value._pronoun.reflexiveForm = 0u;
  }

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> Morphology.setCustomPronoun(_:forLanguage:)( Foundation::Morphology::CustomPronoun_optional *_, Swift::String forLanguage)
{
  v41[10] = *MEMORY[0x1895F89C0];
  uint64_t countAndFlagsBits = _->value._pronoun.subjectForm.value._countAndFlagsBits;
  uint64_t object = _->value._pronoun.subjectForm.value._object;
  uint64_t v5 = _->value._pronoun.objectForm.value._countAndFlagsBits;
  uint64_t v4 = _->value._pronoun.objectForm.value._object;
  uint64_t v6 = _->value._pronoun.possessiveForm.value._countAndFlagsBits;
  char v7 = _->value._pronoun.possessiveForm.value._object;
  uint64_t v8 = _->value._pronoun.possessiveAdjectiveForm.value._countAndFlagsBits;
  uint64_t v38 = _->value._pronoun.reflexiveForm.value._countAndFlagsBits;
  uint64_t v39 = _->value._pronoun.possessiveAdjectiveForm.value._object;
  __int128 v37 = _->value._pronoun.reflexiveForm.value._object;
  if (object == (void *)1)
  {
    Swift::String v9 = String.lowercased()();
    uint64_t v35 = v9._object;
    unint64_t v36 = v9._countAndFlagsBits;
    uint64_t v10 = 0LL;
    uint64_t v11 = 0LL;
    uint64_t v12 = 0LL;
    uint64_t v13 = 0LL;
    uint64_t v14 = 0LL;
    uint64_t v15 = 0LL;
    id v16 = 0LL;
    uint64_t v17 = 0LL;
    uint64_t v18 = 0LL;
LABEL_5:
    v41[0] = v10;
    v41[1] = object;
    v41[2] = v11;
    v41[3] = v12;
    v41[4] = v13;
    v41[5] = v14;
    v41[6] = v15;
    v41[7] = v16;
    v41[8] = v17;
    v41[9] = v18;
    outlined copy of Morphology.CustomPronoun?(countAndFlagsBits, (uint64_t)object);
    specialized Dictionary.subscript.setter((uint64_t)v41, v36, (uint64_t)v35);
    return;
  }

  uint64_t v19 = (void *)swift_allocObject();
  void v19[2] = countAndFlagsBits;
  v19[3] = object;
  void v19[4] = v5;
  v19[5] = v4;
  v19[6] = v6;
  v19[7] = v7;
  v19[8] = v8;
  v19[9] = v39;
  v19[10] = v38;
  v19[11] = v37;
  aBlock[4] = partial apply for closure #1 in Morphology.setCustomPronoun(_:forLanguage:);
  aBlock[5] = v19;
  aBlock[0] = (id)MEMORY[0x1895F87A8];
  aBlock[1] = (id)1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed (@guaranteed String) -> (@out Any?);
  aBlock[3] = &block_descriptor_7;
  char v20 = _Block_copy(aBlock);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_release();
  uint64_t v21 = String._bridgeToObjectiveCImpl()();
  aBlock[0] = 0LL;
  uint64_t v22 = v8;
  BOOL v23 = __NSMorphologyCustomPronounValidate((uint64_t)v20, v21, (uint64_t)aBlock);
  swift_unknownObjectRelease();
  _Block_release(v20);
  id v24 = aBlock[0];
  if (v23)
  {

    Swift::String v25 = String.lowercased()();
    uint64_t v35 = v25._object;
    unint64_t v36 = v25._countAndFlagsBits;
    uint64_t v10 = countAndFlagsBits;
    uint64_t v11 = v5;
    uint64_t v12 = v4;
    uint64_t v13 = v6;
    uint64_t v14 = v7;
    uint64_t v15 = v22;
    id v16 = v39;
    uint64_t v17 = v38;
    uint64_t v18 = v37;
    goto LABEL_5;
  }

  if (!v24)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSCocoaErrorDomain");
    id v26 = objc_allocWithZone((Class)&OBJC_CLASS___NSError);
    uint64_t v27 = String._bridgeToObjectiveCImpl()();
    swift_bridgeObjectRelease();
    id v28 = objc_msgSend(v26, sel_initWithDomain_code_userInfo_, v27, 1024, _NativeDictionary.bridged()());
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    id v29 = objc_msgSend(v28, sel_domain);
    id v30 = static String._unconditionallyBridgeFromObjectiveC(_:)(v29);
    uint64_t v32 = v31;

    if (v30 == static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSCocoaErrorDomain") && v32 == v33)
    {
      swift_bridgeObjectRelease_n();
    }

    else
    {
      char v34 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v34 & 1) == 0) {
        __break(1u);
      }
    }
  }

  swift_willThrow();
}

double closure #1 in Morphology.setCustomPronoun(_:forLanguage:)@<D0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  if (specialized static Morphology.CustomPronoun.keyPath(forObjectiveCKey:)(a1, a2))
  {
    outlined retain of Morphology._CustomPronoun(a3);
    swift_getAtKeyPath();
    outlined release of Morphology._CustomPronoun(a3);
    if (v8)
    {
      *(void *)(a4 + 24) = MEMORY[0x189617FA8];
      swift_release();
      *(void *)a4 = v7;
      *(void *)(a4 + 8) = v8;
      return result;
    }

    swift_release();
  }

  double result = 0.0;
  *(_OWORD *)a4 = 0u;
  *(_OWORD *)(a4 + 16) = 0u;
  return result;
}

id thunk for @escaping @callee_guaranteed (@guaranteed String) -> (@out Any?)(uint64_t a1, void *a2)
{
  void (*v2)(void *__return_ptr, id, uint64_t);
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  void *v11;
  void v13[3];
  uint64_t v14;
  uint64_t v2 = *(void (**)(void *__return_ptr, id, uint64_t))(a1 + 32);
  uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(a2);
  uint64_t v5 = v4;
  swift_retain();
  v2(v13, v3, v5);
  swift_release();
  swift_bridgeObjectRelease();
  uint64_t v6 = v14;
  if (!v14) {
    return 0LL;
  }
  uint64_t v7 = __swift_project_boxed_opaque_existential_1(v13, v14);
  uint64_t v8 = *(void *)(v6 - 8);
  MEMORY[0x1895F8858](v7);
  uint64_t v10 = (char *)v13 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  (*(void (**)(char *))(v8 + 16))(v10);
  uint64_t v11 = (void *)_bridgeAnythingToObjectiveC<A>(_:)();
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v6);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v13);
  return v11;
}

void __swiftcall Morphology.CustomPronoun.init()(Foundation::Morphology::CustomPronoun *__return_ptr retstr)
{
  retstr->_pronoun.possessiveAdjectiveForm = 0u;
  retstr->_pronoun.reflexiveForm = 0u;
  retstr->_pronoun.objectForm = 0u;
  retstr->_pronoun.possessiveForm = 0u;
  retstr->_pronoun.subjectForm = 0u;
}

id static Morphology.CustomPronoun.isSupported(forLanguage:)(uint64_t a1, uint64_t a2)
{
  return static InflectionRule.canInflect(language:)( a1,  a2,  (uint64_t)off_189C61A40,  (SEL *)&selRef_isSupportedForLanguage_);
}

id static InflectionRule.canInflect(language:)(uint64_t a1, uint64_t a2, uint64_t a3, SEL *a4)
{
  uint64_t v5 = (void *)objc_opt_self();
  id v6 = objc_msgSend(v5, *a4, String._bridgeToObjectiveCImpl()());
  swift_unknownObjectRelease();
  return v6;
}

uint64_t static Morphology.CustomPronoun.requiredKeys(forLanguage:)()
{
  uint64_t v0 = (void *)objc_opt_self();
  id v1 = objc_msgSend(v0, sel_requiredKeysForLanguage_, String._bridgeToObjectiveCImpl()());
  swift_unknownObjectRelease();
  if (v1)
  {
    type metadata accessor for __SwiftDeferredNSArray();
    swift_unknownObjectRetain();
    if (swift_dynamicCastClass())
    {
      swift_retain();
    }

    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
    uint64_t v2 = swift_dynamicCastClass();
    if (v2)
    {
      uint64_t v3 = v2;
    }

    else
    {
      swift_unknownObjectRelease();
      objc_msgSend(v1, sel_copy);
      unint64_t v4 = _bridgeCocoaArray<A>(_:)();
      swift_unknownObjectRelease();
      uint64_t v3 = specialized _arrayForceCast<A, B>(_:)(v4);

      swift_bridgeObjectRelease();
    }
  }

  else
  {
    uint64_t v3 = MEMORY[0x18961AFE8];
  }

  uint64_t v5 = specialized Sequence.compactMap<A>(_:)(v3);
  swift_bridgeObjectRelease();
  return v5;
}

uint64_t (*Morphology.CustomPronoun.subjectForm.modify(void *a1))(uint64_t *a1, char a2)
{
  a1[2] = v1;
  uint64_t v3 = v1[1];
  *a1 = *v1;
  a1[1] = v3;
  swift_bridgeObjectRetain();
  return Morphology.CustomPronoun.subjectForm.modify;
}

uint64_t Morphology.CustomPronoun.subjectForm.modify(uint64_t *a1, char a2)
{
  uint64_t v2 = a1[1];
  uint64_t v3 = (void *)a1[2];
  uint64_t v4 = *a1;
  if ((a2 & 1) != 0)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *uint64_t v3 = v4;
    v3[1] = v2;
    return swift_bridgeObjectRelease();
  }

  else
  {
    uint64_t result = swift_bridgeObjectRelease();
    *uint64_t v3 = v4;
    v3[1] = v2;
  }

  return result;
}

uint64_t (*Morphology.CustomPronoun.objectForm.modify(void *a1))(uint64_t *a1, char a2)
{
  a1[2] = v1;
  uint64_t v3 = *(void *)(v1 + 24);
  *a1 = *(void *)(v1 + 16);
  a1[1] = v3;
  swift_bridgeObjectRetain();
  return Morphology.CustomPronoun.objectForm.modify;
}

uint64_t Morphology.CustomPronoun.objectForm.modify(uint64_t *a1, char a2)
{
  uint64_t v2 = a1[1];
  uint64_t v3 = a1[2];
  uint64_t v4 = *a1;
  if ((a2 & 1) != 0)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(void *)(v3 + 16) = v4;
    *(void *)(v3 + 24) = v2;
    return swift_bridgeObjectRelease();
  }

  else
  {
    uint64_t result = swift_bridgeObjectRelease();
    *(void *)(v3 + 16) = v4;
    *(void *)(v3 + 24) = v2;
  }

  return result;
}

uint64_t (*Morphology.CustomPronoun.possessiveForm.modify(void *a1))(uint64_t *a1, char a2)
{
  a1[2] = v1;
  uint64_t v3 = *(void *)(v1 + 40);
  *a1 = *(void *)(v1 + 32);
  a1[1] = v3;
  swift_bridgeObjectRetain();
  return Morphology.CustomPronoun.possessiveForm.modify;
}

uint64_t Morphology.CustomPronoun.possessiveForm.modify(uint64_t *a1, char a2)
{
  uint64_t v2 = a1[1];
  uint64_t v3 = a1[2];
  uint64_t v4 = *a1;
  if ((a2 & 1) != 0)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(void *)(v3 + 32) = v4;
    *(void *)(v3 + 40) = v2;
    return swift_bridgeObjectRelease();
  }

  else
  {
    uint64_t result = swift_bridgeObjectRelease();
    *(void *)(v3 + 32) = v4;
    *(void *)(v3 + 40) = v2;
  }

  return result;
}

uint64_t (*Morphology.CustomPronoun.possessiveAdjectiveForm.modify( void *a1))(uint64_t *a1, char a2)
{
  a1[2] = v1;
  uint64_t v3 = *(void *)(v1 + 56);
  *a1 = *(void *)(v1 + 48);
  a1[1] = v3;
  swift_bridgeObjectRetain();
  return Morphology.CustomPronoun.possessiveAdjectiveForm.modify;
}

uint64_t Morphology.CustomPronoun.possessiveAdjectiveForm.modify(uint64_t *a1, char a2)
{
  uint64_t v2 = a1[1];
  uint64_t v3 = a1[2];
  uint64_t v4 = *a1;
  if ((a2 & 1) != 0)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(void *)(v3 + 48) = v4;
    *(void *)(v3 + 56) = v2;
    return swift_bridgeObjectRelease();
  }

  else
  {
    uint64_t result = swift_bridgeObjectRelease();
    *(void *)(v3 + 48) = v4;
    *(void *)(v3 + 56) = v2;
  }

  return result;
}

uint64_t (*Morphology.CustomPronoun.reflexiveForm.modify(void *a1))(uint64_t *a1, char a2)
{
  a1[2] = v1;
  uint64_t v3 = *(void *)(v1 + 72);
  *a1 = *(void *)(v1 + 64);
  a1[1] = v3;
  swift_bridgeObjectRetain();
  return Morphology.CustomPronoun.reflexiveForm.modify;
}

uint64_t Morphology.CustomPronoun.reflexiveForm.modify(uint64_t *a1, char a2)
{
  uint64_t v2 = a1[1];
  uint64_t v3 = a1[2];
  uint64_t v4 = *a1;
  if ((a2 & 1) != 0)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(void *)(v3 + 64) = v4;
    *(void *)(v3 + 72) = v2;
    return swift_bridgeObjectRelease();
  }

  else
  {
    uint64_t result = swift_bridgeObjectRelease();
    *(void *)(v3 + 64) = v4;
    *(void *)(v3 + 72) = v2;
  }

  return result;
}

uint64_t Morphology.CustomPronoun.init(from:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<Morphology._CustomPronoun.CodingKeys>);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1895F8858](v5);
  uint64_t v8 = (char *)&v29 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v35 = a1;
  outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>(a1, (uint64_t)v36);
  __swift_project_boxed_opaque_existential_1(v36, v36[3]);
  lazy protocol witness table accessor for type Morphology._CustomPronoun.CodingKeys and conformance Morphology._CustomPronoun.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2)
  {
    uint64_t v9 = v35;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v36);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return __swift_destroy_boxed_opaque_existential_1(v9);
  }

  else
  {
    char v37 = 0;
    uint64_t v10 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    uint64_t v12 = v11;
    char v37 = 1;
    swift_bridgeObjectRetain();
    uint64_t v13 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    uint64_t v15 = v14;
    uint64_t v33 = v13;
    uint64_t v34 = v10;
    char v37 = 2;
    swift_bridgeObjectRetain();
    uint64_t v16 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    uint64_t v18 = v17;
    uint64_t v31 = v16;
    uint64_t v32 = a2;
    char v37 = 3;
    swift_bridgeObjectRetain();
    uint64_t v19 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    uint64_t v21 = v20;
    uint64_t v30 = v19;
    char v37 = 4;
    swift_bridgeObjectRetain();
    uint64_t v22 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    uint64_t v24 = v23;
    Swift::String v25 = *(void (**)(char *, uint64_t))(v6 + 8);
    uint64_t v26 = v22;
    v25(v8, v5);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v36);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t result = __swift_destroy_boxed_opaque_existential_1(v35);
    id v28 = v32;
    *uint64_t v32 = v34;
    v28[1] = v12;
    _OWORD v28[2] = v33;
    v28[3] = v15;
    v28[4] = v31;
    _BYTE v28[5] = v18;
    v28[6] = v30;
    v28[7] = v21;
    v28[8] = v26;
    v28[9] = v24;
  }

  return result;
}

uint64_t Morphology.CustomPronoun.encode(to:)(void *a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<Morphology._CustomPronoun.CodingKeys>);
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x1895F8858](v3);
  uint64_t v6 = (char *)v13 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = v1[2];
  v13[7] = v1[3];
  v13[8] = v7;
  uint64_t v8 = v1[4];
  v13[5] = v1[5];
  void v13[6] = v8;
  uint64_t v9 = v1[6];
  v13[3] = v1[7];
  v13[4] = v9;
  uint64_t v10 = v1[8];
  v13[1] = v1[9];
  uint64_t v13[2] = v10;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type Morphology._CustomPronoun.CodingKeys and conformance Morphology._CustomPronoun.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  char v18 = 0;
  uint64_t v11 = v13[9];
  KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
  if (!v11)
  {
    char v17 = 1;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    char v16 = 2;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    char v15 = 3;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    char v14 = 4;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
  }

  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

uint64_t Morphology._CustomPronoun.encode(to:)(void *a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<Morphology._CustomPronoun.CodingKeys>);
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x1895F8858](v3);
  uint64_t v6 = &v8[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type Morphology._CustomPronoun.CodingKeys and conformance Morphology._CustomPronoun.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v8[15] = 0;
  KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
  if (!v1)
  {
    v8[14] = 1;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    v8[13] = 2;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    v8[12] = 3;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    v8[11] = 4;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
  }

  return (*(uint64_t (**)(_BYTE *, uint64_t))(v4 + 8))(v6, v3);
}

void Morphology._CustomPronoun.hash(into:)()
{
  if (v0[1])
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    if (v0[3]) {
      goto LABEL_3;
    }
  }

  else
  {
    Hasher._combine(_:)(0);
    if (v0[3])
    {
LABEL_3:
      Hasher._combine(_:)(1u);
      swift_bridgeObjectRetain();
      String.hash(into:)();
      swift_bridgeObjectRelease();
      if (v0[5]) {
        goto LABEL_4;
      }
      goto LABEL_9;
    }
  }

  Hasher._combine(_:)(0);
  if (v0[5])
  {
LABEL_4:
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    if (v0[7]) {
      goto LABEL_5;
    }
LABEL_10:
    Hasher._combine(_:)(0);
    if (v0[9]) {
      goto LABEL_6;
    }
    goto LABEL_11;
  }

uint64_t static Morphology.CustomPronoun.== infix(_:_:)(_OWORD *a1, __int128 *a2)
{
  __int128 v2 = a1[3];
  void v8[2] = a1[2];
  v8[3] = v2;
  __int128 v3 = a1[4];
  __int128 v4 = a1[1];
  v8[0] = *a1;
  v8[1] = v4;
  __int128 v5 = a2[3];
  void v9[2] = a2[2];
  v9[3] = v5;
  void v9[4] = a2[4];
  __int128 v6 = *a2;
  v9[1] = a2[1];
  void v8[4] = v3;
  v9[0] = v6;
  return specialized static Morphology._CustomPronoun.== infix(_:_:)(v8, v9) & 1;
}

Swift::Int Morphology.CustomPronoun.hashValue.getter()
{
  uint64_t v1 = v0[1];
  uint64_t v2 = v0[3];
  uint64_t v3 = v0[5];
  uint64_t v4 = v0[7];
  uint64_t v5 = v0[9];
  Hasher.init(_seed:)();
  if (v1)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    if (v2) {
      goto LABEL_3;
    }
  }

  else
  {
    Hasher._combine(_:)(0);
    if (v2)
    {
LABEL_3:
      Hasher._combine(_:)(1u);
      swift_bridgeObjectRetain();
      String.hash(into:)();
      swift_bridgeObjectRelease();
      if (v3) {
        goto LABEL_4;
      }
      goto LABEL_9;
    }
  }

  Hasher._combine(_:)(0);
  if (v3)
  {
LABEL_4:
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    if (v4) {
      goto LABEL_5;
    }
LABEL_10:
    Hasher._combine(_:)(0);
    if (v5) {
      goto LABEL_6;
    }
LABEL_11:
    Hasher._combine(_:)(0);
    return Hasher._finalize()();
  }

uint64_t protocol witness for Decodable.init(from:) in conformance Morphology.CustomPronoun@<X0>( uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  return Morphology.CustomPronoun.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance Morphology.CustomPronoun(void *a1)
{
  return Morphology.CustomPronoun.encode(to:)(a1);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance Morphology.CustomPronoun()
{
  uint64_t v1 = v0[1];
  uint64_t v2 = v0[3];
  uint64_t v3 = v0[5];
  uint64_t v4 = v0[7];
  uint64_t v5 = v0[9];
  Hasher.init(_seed:)();
  if (v1)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    if (v2) {
      goto LABEL_3;
    }
  }

  else
  {
    Hasher._combine(_:)(0);
    if (v2)
    {
LABEL_3:
      Hasher._combine(_:)(1u);
      swift_bridgeObjectRetain();
      String.hash(into:)();
      swift_bridgeObjectRelease();
      if (v3) {
        goto LABEL_4;
      }
      goto LABEL_9;
    }
  }

  Hasher._combine(_:)(0);
  if (v3)
  {
LABEL_4:
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    if (v4) {
      goto LABEL_5;
    }
LABEL_10:
    Hasher._combine(_:)(0);
    if (v5) {
      goto LABEL_6;
    }
LABEL_11:
    Hasher._combine(_:)(0);
    return Hasher._finalize()();
  }

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance Morphology.CustomPronoun( _OWORD *a1, __int128 *a2)
{
  __int128 v2 = a1[3];
  void v8[2] = a1[2];
  v8[3] = v2;
  __int128 v3 = a1[4];
  __int128 v4 = a1[1];
  v8[0] = *a1;
  v8[1] = v4;
  __int128 v5 = a2[3];
  void v9[2] = a2[2];
  v9[3] = v5;
  void v9[4] = a2[4];
  __int128 v6 = *a2;
  v9[1] = a2[1];
  void v8[4] = v3;
  v9[0] = v6;
  return specialized static Morphology._CustomPronoun.== infix(_:_:)(v8, v9) & 1;
}