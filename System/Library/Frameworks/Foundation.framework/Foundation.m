xpc_object_t __NSXPCCONNECTION_IS_CREATING_REPLY__(void *a1)
{
  return xpc_dictionary_create_reply(a1);
}

void message_handler_message(uint64_t a1, xpc_object_t xdict, uint64_t a3)
{
  uint64_t uint64 = xpc_dictionary_get_uint64(xdict, "f");
  uint64_t v7 = uint64;
  if ((uint64 & 4) != 0)
  {
    if ((uint64 & 8) != 0)
    {
      uint64_t v9 = xpc_dictionary_get_uint64(xdict, "proxynum");
      if (v9) {
        -[_NSXPCConnectionExportedObjectTable receivedReleaseForProxyNumber:userQueue:]( *(void *)(a1 + 56),  v9,  *(dispatch_queue_t *)(a1 + 24));
      }
    }

    else if ((uint64 & 0x10) != 0)
    {
      [(id)a1 _decodeProgressMessageWithData:xdict flags:uint64];
    }
  }

  else
  {
    v8 = (void *)MEMORY[0x186E1FF60]();
    [(id)a1 _decodeAndInvokeMessageWithEvent:xdict reply:a3 flags:v7];
    objc_autoreleasePoolPop(v8);
  }
}

LABEL_10:
    -[NSXPCConnection invalidate](self, "invalidate");
    return;
  }

  v14 = atomic_load((unint64_t *)&self->_delegate);
  v53 = (void *)v14;
  v55 = objc_opt_respondsToSelector();
  v65 = 0LL;
  v66 = 0LL;
  memset(v74, 0, 32);
  v63[0] = 0LL;
  v63[1] = v63;
  v63[2] = 0x2020000000LL;
  v64 = 0;
  v61 = 0LL;
  v62 = 0LL;
  v15 = -[NSXPCDecoder initWithInterface:](objc_alloc(&OBJC_CLASS___NSXPCDecoder), "initWithInterface:", v13);
  -[NSXPCDecoder _setConnection:](v15, "_setConnection:", self);
  if (self->_otherInfo) {
    -[NSXPCCoder setUserInfo:](v15, "setUserInfo:");
  }
  v56 = -[NSXPCDecoder _decodeMessageFromXPCObject:allowingSimpleMessageSend:outInvocation:outArguments:outArgumentsMaxCount:outMethodSignature:outSelector:]( v15,  "_decodeMessageFromXPCObject:allowingSimpleMessageSend:outInvocation:outArguments:outArgumentsMaxCount:outMetho dSignature:outSelector:",  a3,  (v55 & 1) == 0,  &v62,  v74,  4LL,  &v61,  &v66) == 1;
  if (!v66)
  {
    v18 = (os_log_s *)_NSXPCLog();
    if (os_log_type_enabled(v18, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 138543362;
      *(void *)&buf[4] = self;
      _os_log_fault_impl( &dword_182EB1000,  v18,  OS_LOG_TYPE_FAULT,  "%{public}@: received an undecodable message (invocation with no selector)",  buf,  0xCu);
    }

    v56 = 0;
    v62 = 0LL;
  }

  if (!v62 && !v56) {
    goto LABEL_88;
  }
  if ((v5 & 0x20) == 0)
  {
    if (![v62 _hasBlockArgument])
    {
      oslog = 0LL;
      v21 = 1;
      goto LABEL_36;
    }

    v19 = (os_log_s *)_NSXPCLog();
    if (os_log_type_enabled(v19, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 138543362;
      *(void *)&buf[4] = self;
      _os_log_fault_impl( &dword_182EB1000,  v19,  OS_LOG_TYPE_FAULT,  "%{public}@: received an undecodable message (remote asked for no reply, but we expected one). Dropping message.",  buf,  0xCu);
    }

    goto LABEL_88;
  }

  v20 = xpc_dictionary_get_uint64(a3, "sequence");
  v52 = (const void *)v20;
  if ((v5 & 0x40) != 0)
  {
    v22 = -[NSProgress initWithParent:userInfo:]( objc_alloc(&OBJC_CLASS____NSProgressWithRemoteParent),  "initWithParent:userInfo:",  0LL,  0LL);
    -[NSProgress setTotalUnitCount:](v22, "setTotalUnitCount:", 1LL);
    -[NSProgress set_adoptChildUserInfo:](v22, "set_adoptChildUserInfo:", 1LL);
    -[_NSProgressWithRemoteParent setSequence:](v22, "setSequence:", v20);
    -[_NSProgressWithRemoteParent setParentConnection:](v22, "setParentConnection:", self);
    oslog = (os_log_t)v22;
    v21 = (v5 & 0x80) == 0LL;
  }

  else
  {
    oslog = 0LL;
    v21 = 1;
  }

  v23 = [v61 numberOfArguments];
  v24 = v23 - 2;
  if (v23 == 2) {
    goto LABEL_36;
  }
  v25 = 0LL;
  while (1)
  {
    v26 = (_WORD *)[v61 _argInfo:v25 + 2];
    if (!v26)
    {
      v29 = (os_log_s *)_NSXPCLog();
      if (!os_log_type_enabled(v29, OS_LOG_TYPE_FAULT)) {
        goto LABEL_88;
      }
      *(_DWORD *)buf = 138543362;
      *(void *)&buf[4] = self;
      v30 = "%{public}@: received an undecodable message (invocation with bad argument info)";
LABEL_105:
      _os_log_fault_impl(&dword_182EB1000, v29, OS_LOG_TYPE_FAULT, v30, buf, 0xCu);
      goto LABEL_88;
    }

    v27 = v26[17];
    if ((v27 & 0x80) == 0) {
      goto LABEL_34;
    }
    if (!*(void *)v26)
    {
      v29 = (os_log_s *)_NSXPCLog();
      if (!os_log_type_enabled(v29, OS_LOG_TYPE_FAULT)) {
        goto LABEL_88;
      }
      *(_DWORD *)buf = 138543362;
      *(void *)&buf[4] = self;
      v30 = "%{public}@: received an undecodable message (invocation with bad replaced by pointer argument)";
      goto LABEL_105;
    }

    v27 = *(_WORD *)(*(void *)v26 + 34LL);
LABEL_34:
    if (v27 < 0) {
      break;
    }
    if (v24 == ++v25) {
      goto LABEL_36;
    }
  }

  string = xpc_dictionary_get_string(a3, "replysig");
  if (!string)
  {
    v38 = (os_log_s *)_NSXPCLog();
    if (os_log_type_enabled(v38, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 138543362;
      *(void *)&buf[4] = self;
      _os_log_fault_impl( &dword_182EB1000,  v38,  OS_LOG_TYPE_FAULT,  "%{public}@: received an undecodable message (invocation with no signature info)",  buf,  0xCu);
    }

    goto LABEL_88;
  }

  exception_object = (_Unwind_Exception *)[MEMORY[0x189603FA0] signatureWithObjCTypes:string];
  v32 = -[os_unfair_lock_s _methodSignatureForReplyBlockOfSelector:]( v13,  "_methodSignatureForReplyBlockOfSelector:",  v66);
  v33 = (void *)v32;
  if (!exception_object
    || !v32
    || (-[_Unwind_Exception isEqual:](exception_object, "isEqual:", v32) & 1) == 0
    && ([v33 _isCompatibleWithMethodSignature:exception_object] & 1) == 0)
  {
    v35 = (os_log_s *)_NSXPCLog();
    if (os_log_type_enabled(v35, OS_LOG_TYPE_FAULT))
    {
      Name = sel_getName(v66);
      v45 = -[_Unwind_Exception debugDescription](exception_object, "debugDescription");
      v46 = [v33 debugDescription];
      *(_DWORD *)buf = 138544130;
      *(void *)&buf[4] = self;
      v68 = 2082;
      v69 = Name;
      v70 = 2114;
      v71 = v45;
      v72 = 2114;
      v73 = v46;
      _os_log_fault_impl( &dword_182EB1000,  v35,  OS_LOG_TYPE_FAULT,  "%{public}@ received an undecodable message (incompatible reply block signature for %{public}s (wire: %{public}@ vs local: %{public}@)",  buf,  0x2Au);
    }

    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<PredicateExpressions.VariableID, String>);
    v25 = static _DictionaryStorage.copy(original:)();
    v19 = v25;
    if (*(void *)(v13 + 16))
    {
      v26 = (void *)(v25 + 64);
      v27 = (unint64_t)((1LL << *(_BYTE *)(v19 + 32)) + 63) >> 6;
      v76 = v13 + 64;
      v28 = 0LL;
      *(void *)(v19 + 16) = *(void *)(v13 + 16);
      v29 = 1LL << *(_BYTE *)(v13 + 32);
      v30 = -1LL;
      if (v29 < 64) {
        v30 = ~(-1LL << v29);
      }
      v31 = v30 & *(void *)(v13 + 64);
      v77 = (unint64_t)(v29 + 63) >> 6;
      while (1)
      {
        if (v31)
        {
          v32 = __clz(__rbit64(v31));
          v31 &= v31 - 1;
          v78 = v28;
          v33 = v32 | (v28 << 6);
        }

        else
        {
          v41 = v28 + 1;
          if (__OFADD__(v28, 1LL)) {
            goto LABEL_62;
          }
          if (v41 >= v77) {
            break;
          }
          v42 = *(void *)(v76 + 8 * v41);
          v43 = v28 + 1;
          if (!v42)
          {
            v43 = v28 + 2;
            if (v28 + 2 >= v77) {
              break;
            }
            v42 = *(void *)(v76 + 8 * v43);
            if (!v42)
            {
              v43 = v28 + 3;
              if (v28 + 3 >= v77) {
                break;
              }
              v42 = *(void *)(v76 + 8 * v43);
              if (!v42)
              {
                v43 = v28 + 4;
                if (v28 + 4 >= v77) {
                  break;
                }
                v42 = *(void *)(v76 + 8 * v43);
                if (!v42)
                {
                  v43 = v28 + 5;
                  if (v28 + 5 >= v77) {
                    break;
                  }
                  v42 = *(void *)(v76 + 8 * v43);
                  if (!v42)
                  {
                    v43 = v28 + 6;
                    if (v28 + 6 >= v77) {
                      break;
                    }
                    v42 = *(void *)(v76 + 8 * v43);
                    if (!v42)
                    {
                      v43 = v28 + 7;
                      if (v28 + 7 >= v77) {
                        break;
                      }
                      v42 = *(void *)(v76 + 8 * v43);
                      if (!v42)
                      {
                        v43 = v28 + 8;
                        if (v28 + 8 >= v77) {
                          break;
                        }
                        v42 = *(void *)(v76 + 8 * v43);
                        if (!v42)
                        {
                          v44 = v28 + 9;
                          if (v28 + 9 >= v77) {
                            break;
                          }
                          v42 = *(void *)(v76 + 8 * v44);
                          if (!v42)
                          {
                            while (1)
                            {
                              v43 = v44 + 1;
                              if (__OFADD__(v44, 1LL)) {
                                goto LABEL_63;
                              }
                              if (v43 >= v77) {
                                goto LABEL_44;
                              }
                              v42 = *(void *)(v76 + 8 * v43);
                              ++v44;
                              if (v42) {
                                goto LABEL_43;
                              }
                            }
                          }

                          v43 = v28 + 9;
                        }
                      }
                    }
                  }
                }
              }
            }
          }

    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<PredicateExpressions.VariableID, String>);
    v25 = static _DictionaryStorage.copy(original:)();
    v22 = v25;
    if (*(void *)(v16 + 16))
    {
      v26 = (void *)(v25 + 64);
      v27 = (unint64_t)((1LL << *(_BYTE *)(v22 + 32)) + 63) >> 6;
      v74 = v16 + 64;
      v28 = 0LL;
      *(void *)(v22 + 16) = *(void *)(v16 + 16);
      v29 = 1LL << *(_BYTE *)(v16 + 32);
      v30 = -1LL;
      if (v29 < 64) {
        v30 = ~(-1LL << v29);
      }
      v31 = v30 & *(void *)(v16 + 64);
      v75 = (unint64_t)(v29 + 63) >> 6;
      while (1)
      {
        if (v31)
        {
          v32 = __clz(__rbit64(v31));
          v31 &= v31 - 1;
          v76 = v28;
          v33 = v32 | (v28 << 6);
        }

        else
        {
          v41 = v28 + 1;
          if (__OFADD__(v28, 1LL)) {
            goto LABEL_60;
          }
          if (v41 >= v75) {
            break;
          }
          v42 = *(void *)(v74 + 8 * v41);
          v43 = v28 + 1;
          if (!v42)
          {
            v43 = v28 + 2;
            if (v28 + 2 >= v75) {
              break;
            }
            v42 = *(void *)(v74 + 8 * v43);
            if (!v42)
            {
              v43 = v28 + 3;
              if (v28 + 3 >= v75) {
                break;
              }
              v42 = *(void *)(v74 + 8 * v43);
              if (!v42)
              {
                v43 = v28 + 4;
                if (v28 + 4 >= v75) {
                  break;
                }
                v42 = *(void *)(v74 + 8 * v43);
                if (!v42)
                {
                  v43 = v28 + 5;
                  if (v28 + 5 >= v75) {
                    break;
                  }
                  v42 = *(void *)(v74 + 8 * v43);
                  if (!v42)
                  {
                    v43 = v28 + 6;
                    if (v28 + 6 >= v75) {
                      break;
                    }
                    v42 = *(void *)(v74 + 8 * v43);
                    if (!v42)
                    {
                      v43 = v28 + 7;
                      if (v28 + 7 >= v75) {
                        break;
                      }
                      v42 = *(void *)(v74 + 8 * v43);
                      if (!v42)
                      {
                        v44 = v28 + 8;
                        if (v28 + 8 >= v75) {
                          break;
                        }
                        v42 = *(void *)(v74 + 8 * v44);
                        if (!v42)
                        {
                          while (1)
                          {
                            v43 = v44 + 1;
                            if (__OFADD__(v44, 1LL)) {
                              goto LABEL_61;
                            }
                            if (v43 >= v75) {
                              goto LABEL_42;
                            }
                            v42 = *(void *)(v74 + 8 * v43);
                            ++v44;
                            if (v42) {
                              goto LABEL_41;
                            }
                          }
                        }

                        v43 = v28 + 8;
                      }
                    }
                  }
                }
              }
            }
          }

  __break(1u);
  return result;
}

          Hasher._combine(_:)(1u);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          String.hash(into:)();
          v13 = v18;
          outlined consume of Locale.LanguageCode?(v18, v9);
          v16 = v9;
          v14 = v21;
LABEL_16:
          outlined consume of Locale.LanguageCode?(v20, v14);
          outlined consume of Locale.LanguageCode?(v23, v7);
          outlined consume of Locale.LanguageCode?(v13, v16);
          specialized Array<A>.hash(into:)(a1, v5);
LABEL_4:
          v4 += 13;
          outlined consume of TermOfAddress._TermOfAddress(v20, v21, v19, v6, v23, v7, v22, v8, v18, v9, v10, v11, v5);
          if (!--v3) {
            return;
          }
          break;
      }
    }
  }

          Hasher._combine(_:)(0);
          v10 = v4;
          goto LABEL_11;
        }
      }

      Hasher._combine(_:)(0);
      uint64_t v9 = v3;
      if (v3) {
        goto LABEL_5;
      }
      goto LABEL_10;
  }

          Hasher._combine(_:)(0);
          v10 = v4;
          goto LABEL_11;
        }
      }

      Hasher._combine(_:)(0);
      uint64_t v9 = v3;
      if (v3) {
        goto LABEL_5;
      }
      goto LABEL_10;
  }

  v128 = v2;
  *(void *)(v3 + 24) = countAndFlagsBits;
  *(void *)(v3 + 32) = object;
  swift_bridgeObjectRetain();
  uint64_t v9 = swift_bridgeObjectRelease();
  v10 = *(_BYTE **)v3;
  v11 = *(_BYTE *)(v3 + 8);
  v12 = *(_BYTE *)(v3 + 9);
  v13 = *(unsigned __int8 *)(v3 + 10);
  v14 = *(unsigned __int8 *)(v3 + 11);
  v15 = *(_BYTE *)(v3 + 12);
  v16 = *(unsigned __int8 *)(v3 + 13);
  v17 = *(_BYTE *)(v3 + 14);
  v18 = *(_BYTE *)(v3 + 15);
  v19 = *(_BYTE *)(v3 + 16);
  v20 = *(void *)(v3 + 40);
  v21 = *(void *)(v3 + 64);
  v22 = *(void *)(v3 + 72);
  v24 = *(unsigned __int8 *)(v3 + 152);
  v25 = *(_BYTE *)(v3 + 153);
  v104 = *(_BYTE *)(v3 + 96);
  v23 = v104;
  v105 = v10;
  v106 = v11;
  v107 = v12;
  v108 = v13;
  v109 = v14;
  v110 = v15;
  v111 = v16;
  v112 = v17;
  v113 = v18;
  v114 = v19;
  v115 = countAndFlagsBits;
  v116 = object;
  v117 = v20;
  v26 = *(_OWORD *)(v3 + 48);
  v118 = v26;
  v119 = v21;
  v120 = v22;
  v121 = *(_OWORD *)(v3 + 80);
  v122 = v104;
  v123 = *(_OWORD *)(v3 + 104);
  v124 = *(_OWORD *)(v3 + 120);
  v125 = *(_OWORD *)(v3 + 136);
  v126 = v24;
  v127 = v25;
  if ((void)v121)
  {
    v27 = v121;
    goto LABEL_51;
  }

  v95 = v26;
  v96 = v21;
  v97 = v14;
  v94 = v24;
  v28 = v15 ^ 1;
  if (v10) {
    v29 = v28;
  }
  else {
    v29 = 1;
  }
  if ((v29 & 1) == 0 && (v10[120] & 1) == 0)
  {
    v36 = String.subscript.getter();
    MEMORY[0x186E1B610](v36);
    swift_bridgeObjectRelease();
    uint64_t v9 = swift_bridgeObjectRelease();
    v33 = v97;
    v34 = v96;
    v35 = v95;
    if ((v10[120] & 1) != 0)
    {
LABEL_21:
      if (v23)
      {
        if (v16 && v10 && (v10[144] & 1) == 0)
        {
          v39 = String.subscript.getter();
          v43 = v42;
          if ((v39 ^ v40) >> 14)
          {
            v44 = v39;
            v45 = v40;
            v46 = v41;
            v47 = v128;
            _ss5SliceV32withContiguousStorageIfAvailableyqd__Sgqd__SRy7ElementQzGKXEKlFSRyxGq_s5Error_pRi_zRi0_zRi__Ri0__r0_lys5UInt8Vqd__Isgyrzo_ABySS8UTF8ViewVGADsAI_pAMRszr__lIetMggrzo_Tpq5SiSg_Tg5061_ss17FixedWidthIntegerPsE_5radixxSgqd___SitcSyRd__lufcADSRys5I15VGXEfU_Si_SsTG5SiTf1cn_n( v39,  v40,  v41,  v42,  10LL);
            v128 = v47;
            if ((v48 & 0x100) != 0)
            {
              specialized _parseInteger<A, B>(ascii:radix:)(v44, v45, v46, v43, 10LL);
              v52 = v51;
              uint64_t v9 = swift_bridgeObjectRelease();
              v50 = v52 & 1;
            }

            else
            {
              v49 = v48;
              uint64_t v9 = swift_bridgeObjectRelease();
              v50 = v49 & 1;
            }

            v22 = 0LL;
            v27 = 0xE000000000000000LL;
            LOBYTE(v24) = v94;
            v33 = v97;
            v34 = v96;
            if (!v50 || (void)v95)
            {
LABEL_51:
              v56 = v22 & 0xFFFFFFFFFFFFLL;
              if ((v27 & 0x2000000000000000LL) != 0) {
                v57 = HIBYTE(v27) & 0xF;
              }
              else {
                v57 = v22 & 0xFFFFFFFFFFFFLL;
              }
              if (!v57)
              {
                swift_bridgeObjectRetain();
                swift_bridgeObjectRelease();
                v53 = 0LL;
                v54 = 0xE000000000000000LL;
                goto LABEL_71;
              }

              if ((v24 & 1) != 0)
              {
                v102 = (int32_t (__cdecl *)(const UIDNA *, const char *, int32_t, char *, int32_t, UIDNAInfo *, UErrorCode *))v22;
                v103 = v27;
                MEMORY[0x1895F8858](v9);
                v92 = &v102;
                v93 = MEMORY[0x18961AFF8];
                swift_bridgeObjectRetain();
                swift_bridgeObjectRetain();
                v58 = specialized String.UTF8View.withContiguousStorageIfAvailable<A>(_:)( (void *(*)(__int128 *__return_ptr, void *, uint64_t))closure #1 in StringProtocol.removingURLPercentEncoding(excluding:)specialized partial apply,  (uint64_t)&v91,  v22,  v27);
                if (v59 == 1)
                {
                  v60 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v102;
                  v61 = v103;
                  swift_bridgeObjectRetain();
                  v53 = (unint64_t)specialized StringProtocol.removingURLPercentEncoding<A>(utf8Buffer:excluding:)( (Swift::Int)v60,  v61,  MEMORY[0x18961AFF8]);
                  v54 = v62;
LABEL_58:
                  swift_bridgeObjectRelease_n();
                  swift_bridgeObjectRelease();
                  goto LABEL_71;
                }

                v53 = (unint64_t)v58;
                v54 = v59;
LABEL_70:
                swift_bridgeObjectRelease_n();
                goto LABEL_71;
              }

              if ((v27 & 0x1000000000000000LL) != 0)
              {
                swift_bridgeObjectRetain();
                swift_bridgeObjectRetain();
              }

              else
              {
                if ((v27 & 0x2000000000000000LL) != 0)
                {
                  v102 = (int32_t (__cdecl *)(const UIDNA *, const char *, int32_t, char *, int32_t, UIDNAInfo *, UErrorCode *))v22;
                  v103 = v27 & 0xFFFFFFFFFFFFFFLL;
                  v100 = @nonobjc uidna_nameToUnicodeUTF8(_:_:_:_:_:_:_:);
                  v101 = 0LL;
                  swift_bridgeObjectRetain();
                  swift_bridgeObjectRetain_n();
                  closure #1 in static UIDNAHookICU.IDNACodedHostUTF8(_:encodeToASCII:)( (uint64_t)&v102,  HIBYTE(v27) & 0xF,  (uint64_t (**)(uint64_t, uint64_t, uint64_t))&v100,  0,  (unsigned __int8 *)&v102,  HIBYTE(v27) & 0xF,  (uint64_t *)&v98);
                  v53 = v98;
                  v54 = v99;
                  swift_release();
                }

                else
                {
                  if ((v22 & 0x1000000000000000LL) != 0)
                  {
                    v63 = (unsigned __int8 *)((v27 & 0xFFFFFFFFFFFFFFFLL) + 32);
                  }

                  else
                  {
                    v63 = (unsigned __int8 *)_StringObject.sharedUTF8.getter();
                    v56 = v87;
                  }

                  v102 = @nonobjc uidna_nameToUnicodeUTF8(_:_:_:_:_:_:_:);
                  v103 = 0LL;
                  swift_bridgeObjectRetain();
                  swift_bridgeObjectRetain_n();
                  v53 = _sSRsRi_zrlE17withMemoryRebound2to_qd_1_qd__m_qd_1_SRyqd__Gqd_0_YKXEtqd_0_YKs5ErrorRd_0_Ri_d__Ri_d_1_r1_lFs5UInt8V_s4Int8Vs5NeverOSSSgTgm50110_s10Foundation12UIDNAHookICUV17IDNACodedHostUTF833_438666AB1527AE198C118BCABA7FD215LL_13encodeToASCIISSSgSRys5f15VG_SbtFZAGSRys4G7VGXEfU_10Foundation0K3ICUVXMts13OpaquePointerVSgSPyAHGSgs5Int32VSpyAHGSgAVSpySo9UIDNAInfoVGSgSpySo10UErrorCodeVGSgAVIeghyyyyyyyd_SbSRyAFGTf1cn_n( (uint64_t)v63,  v56,  (uint64_t (**)(uint64_t, uint64_t, uint64_t))&v102,  0,  v63,  v56);
                  v54 = v64;
                }

                swift_bridgeObjectRelease();
                if (v54 != 1) {
                  goto LABEL_70;
                }
              }

              v102 = (int32_t (__cdecl *)(const UIDNA *, const char *, int32_t, char *, int32_t, UIDNAInfo *, UErrorCode *))v22;
              v103 = v27;
              lazy protocol witness table accessor for type String and conformance String();
              StringProtocol._ephemeralString.getter();
              v65 = (void *)String._bridgeToObjectiveCImpl()();
              swift_bridgeObjectRelease();
              v66 = objc_msgSend(v65, sel__fastCharacterContents);
              v67 = v65;
              if (v66)
              {
                v102 = (int32_t (__cdecl *)(const UIDNA *, const char *, int32_t, char *, int32_t, UIDNAInfo *, UErrorCode *))v22;
                v103 = v27;
                StringProtocol._ephemeralString.getter();
                v68 = (void *)String._bridgeToObjectiveCImpl()();
                swift_bridgeObjectRelease();
                v69 = objc_msgSend(v68, sel_length);
                v70 = swift_unknownObjectRelease();
                v71 = MEMORY[0x1895F8858](v70);
                LOBYTE(v92) = 0;
                MEMORY[0x1895F8858](v71);
                v90[2] = v66;
                v90[3] = v69;
                v53 = specialized static UIDNAHookICU.IDNACodedHost<A>(hostBuffer:transcode:allowErrors:createString:)( (uint64_t)v66,  (uint64_t)v69,  (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, __int16 *, int *))@nonobjc uidna_nameToUnicode(_:_:_:_:_:_:_:),  0LL,  (uint64_t (*)(void))closure #1 in static UIDNAHookICU.IDNACodedHostUTF16(_:encodeToASCII:)partial apply,  v72,  (uint64_t (*)(uint64_t, void))closure #2 in static UIDNAHookICU.IDNACodedHostUTF16(_:encodeToASCII:)partial apply,  (uint64_t)v90);
                v54 = v73;
                swift_bridgeObjectRelease_n();
                goto LABEL_71;
              }

              v102 = (int32_t (__cdecl *)(const UIDNA *, const char *, int32_t, char *, int32_t, UIDNAInfo *, UErrorCode *))v22;
              v103 = v27;
              swift_bridgeObjectRetain();
              v75 = String.init<A>(_:)();
              v76 = v74;
              if ((v74 & 0x1000000000000000LL) != 0)
              {
                v75 = static String._copying(_:)();
                v89 = v88;
                swift_bridgeObjectRelease();
                v76 = v89;
                if ((v89 & 0x2000000000000000LL) == 0) {
                  goto LABEL_74;
                }
              }

              else if ((v74 & 0x2000000000000000LL) == 0)
              {
LABEL_74:
                if ((v75 & 0x1000000000000000LL) != 0)
                {
                  v77 = (unsigned __int8 *)((v76 & 0xFFFFFFFFFFFFFFFLL) + 32);
                  v78 = v75 & 0xFFFFFFFFFFFFLL;
                }

                else
                {
                  v77 = (unsigned __int8 *)_StringObject.sharedUTF8.getter();
                }

                v102 = @nonobjc uidna_nameToUnicodeUTF8(_:_:_:_:_:_:_:);
                v103 = 0LL;
                v53 = _sSRsRi_zrlE17withMemoryRebound2to_qd_1_qd__m_qd_1_SRyqd__Gqd_0_YKXEtqd_0_YKs5ErrorRd_0_Ri_d__Ri_d_1_r1_lFs5UInt8V_s4Int8Vs5NeverOSSSgTgm50110_s10Foundation12UIDNAHookICUV17IDNACodedHostUTF833_438666AB1527AE198C118BCABA7FD215LL_13encodeToASCIISSSgSRys5f15VG_SbtFZAGSRys4G7VGXEfU_10Foundation0K3ICUVXMts13OpaquePointerVSgSPyAHGSgs5Int32VSpyAHGSgAVSpySo9UIDNAInfoVGSgSpySo10UErrorCodeVGSgAVIeghyyyyyyyd_SbSRyAFGTf1cn_n( (uint64_t)v77,  v78,  (uint64_t (**)(uint64_t, uint64_t, uint64_t))&v102,  0,  v77,  v78);
                v54 = v79;
                goto LABEL_58;
              }

              v102 = (int32_t (__cdecl *)(const UIDNA *, const char *, int32_t, char *, int32_t, UIDNAInfo *, UErrorCode *))v75;
              v103 = v76 & 0xFFFFFFFFFFFFFFLL;
              v100 = @nonobjc uidna_nameToUnicodeUTF8(_:_:_:_:_:_:_:);
              v101 = 0LL;
              closure #1 in static UIDNAHookICU.IDNACodedHostUTF8(_:encodeToASCII:)( (uint64_t)&v102,  HIBYTE(v76) & 0xF,  (uint64_t (**)(uint64_t, uint64_t, uint64_t))&v100,  0,  (unsigned __int8 *)&v102,  HIBYTE(v76) & 0xF,  (uint64_t *)&v98);
              v53 = v98;
              v54 = v99;
              swift_release();
              goto LABEL_58;
            }

  (*(void (**)(char *, uint64_t))(v70 + 8))(v6, v4);
  return swift_bridgeObjectRelease();
}

  *a1 = v5 & 0xFFFFFFFFFFFFF0FFLL | (v6 << 8);
  return v8;
}

      v6 = 0LL;
      v8 = 0LL;
      while (1)
      {
        v11 = v3[v8];
        result[3] = (uint64_t)&v3[v8 + 1];
        if (v11 == 59) {
          break;
        }
        if (v8 == 8)
        {
          _StringGuts.grow(_:)(116LL);
          v16._object = (void *)0x80000001839C9F00LL;
          v16._countAndFlagsBits = 0xD000000000000031LL;
          String.append(_:)(v16);
          BufferReader.lineNumber.getter();
          v17._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
          String.append(_:)(v17);
          swift_bridgeObjectRelease();
          v14 = 0xD000000000000041LL;
          v15 = " while parsing data (too large of a value for a Unicode sequence)";
          goto LABEL_27;
        }

        uint64_t v9 = 16 * v6;
        if ((v11 - 58) >= 0xF6u)
        {
          if (!v5) {
            uint64_t v9 = 10 * v6;
          }
          v10 = -48;
        }

        else
        {
          if ((v5 & 1) == 0)
          {
            v21 = BufferReader.lineNumber.getter();
            lazy protocol witness table accessor for type XMLPlistError and conformance XMLPlistError();
            swift_allocError();
            *(void *)v19 = v11;
            *(void *)(v19 + 8) = v21;
            v22 = 0xD00000000000001CLL;
            v23 = "while parsing decimal entity";
            goto LABEL_30;
          }

          if ((v11 - 71) > 0xF9u)
          {
            v10 = -55;
          }

          else
          {
            if ((v11 - 103) <= 0xF9u)
            {
              v24 = BufferReader.lineNumber.getter();
              lazy protocol witness table accessor for type XMLPlistError and conformance XMLPlistError();
              swift_allocError();
              *(void *)v19 = v11;
              *(void *)(v19 + 8) = v24;
              v22 = 0xD000000000000020LL;
              v23 = "while parsing hexadecimal entity";
LABEL_30:
              *(void *)(v19 + 16) = v22;
              *(void *)(v19 + 24) = (unint64_t)(v23 - 32) | 0x8000000000000000LL;
              v20 = 3;
LABEL_31:
              *(_BYTE *)(v19 + 32) = v20;
              goto LABEL_32;
            }

            v10 = -87;
          }
        }

        ++v8;
        v6 = v9 + (v11 + v10);
        if (&v3[v8] == (_BYTE *)v2) {
          goto LABEL_8;
        }
      }

      if (WORD1(v6) > 0x10u || (v6 & 0xFFFFF800) == 0xD800)
      {
        _StringGuts.grow(_:)(110LL);
        v12._object = (void *)0x80000001839C9F00LL;
        v12._countAndFlagsBits = 0xD000000000000031LL;
        String.append(_:)(v12);
        BufferReader.lineNumber.getter();
        v13._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
        String.append(_:)(v13);
        swift_bridgeObjectRelease();
        v14 = 0xD00000000000003BLL;
        v15 = " while parsing data (input did not result in a real string)";
LABEL_27:
        v18 = (unint64_t)(v15 - 32) | 0x8000000000000000LL;
        String.append(_:)(*(Swift::String *)&v14);
        lazy protocol witness table accessor for type XMLPlistError and conformance XMLPlistError();
        swift_allocError();
        *(void *)v19 = 0LL;
        *(void *)(v19 + 8) = 0xE000000000000000LL;
        *(void *)(v19 + 16) = 0LL;
        *(void *)(v19 + 24) = 0LL;
        v20 = 5;
        goto LABEL_31;
      }

      return (uint64_t *)v6;
    }

  Hasher._combine(_:)(0);
  return Hasher._finalize()();
}

  Hasher._combine(_:)(0);
  return Hasher._finalize()();
}

    v30 = v58;
    v4[12] = v57;
    v4[13] = v30;
    v4[14] = v59;
    v31 = v54;
    v4[8] = v53;
    v4[9] = v31;
    v32 = v56;
    v4[10] = v55;
    v4[11] = v32;
    v33 = v50;
    v4[4] = v49;
    v4[5] = v33;
    v34 = v52;
    v4[6] = v51;
    v4[7] = v34;
    v35 = v46;
    *v4 = v45;
    v4[1] = v35;
    v37 = v47;
    v36 = v48;
LABEL_13:
    v4[2] = v37;
    v4[3] = v36;
    return v15;
  }

  __break(1u);
  return result;
}

    __break(1u);
  }

  __break(1u);
  return result;
}

  __break(1u);
}

    __break(1u);
  }

  uint64_t v7 = *(void *)(a2 + 24);
  v8 = *(void *)(a2 + 32);
  swift_bridgeObjectRetain();
  if (specialized _copyCollectionToContiguousArray<A>(_:)(v7, v8)[2] >> 31)
  {
    __break(1u);
    goto LABEL_10;
  }

  uint64_t v9 = ucal_open();
  swift_release();
  result = swift_bridgeObjectRelease();
  if (v9)
  {
    *a1 = v9;
    goto LABEL_2;
  }

  *a3 = 0LL;
  return result;
}

    v11 = v6;
    swift_bridgeObjectRelease();
    swift_willThrow();
    swift_bridgeObjectRelease();

    return v5;
  }

  type metadata accessor for __SwiftDeferredNSArray();
  swift_unknownObjectRetain();
  if (swift_dynamicCastClass())
  {
    swift_retain();
  }

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Any>);
  uint64_t v7 = swift_dynamicCastClass();
  if (!v7)
  {
    swift_unknownObjectRelease();
    -[NSArray copy](v5, sel_copy);
    v8 = _bridgeCocoaArray<A>(_:)();
    swift_unknownObjectRelease();
    uint64_t v7 = specialized _arrayForceCast<A, B>(_:)(v8);
    swift_bridgeObjectRelease();
  }

  uint64_t v9 = v6;

  if (v9) {
    goto LABEL_10;
  }
  swift_bridgeObjectRelease();
  if (!v7) {
    return 0LL;
  }
  v5 = (NSArray *)specialized _arrayConditionalCast<A, B>(_:)(v7, v0);
  swift_bridgeObjectRelease();
  return v5;
}

        AttributedString.applyChanges<A>(withOriginal:andChanged:to:key:)(&v184, &v171, &v228, v51, v52, v98);
        v50(&v171, v113);
        v50(&v184, v113);
        (*(void (**)(char *, uint64_t))(v149 + 8))(v148, v150);
        v46 = v119;
        v48 = v157;
        v38 = v127;
        if (v119 == v131)
        {
          v19 = v228;
          v47 = v145;
          goto LABEL_25;
        }
      }

      v50 = *(void (**)(__int128 *, uint64_t))(v114 + 8);
      v50(&v165, v113);
      v50((__int128 *)v164, v113);
      v49 = *((void *)&v160 + 1);
      v52 = v99;
LABEL_23:
      v229[0] = v184;
      v229[1] = v185;
      v229[2] = v186;
      v229[3] = v187;
      AttributedString.Guts.removeAttributeValue<A>(forKey:in:)(v52, (uint64_t)v229, v52, v98);
      goto LABEL_10;
    }
      }

      goto LABEL_33;
    }

    v10 = v3 + 3;
    if ((unint64_t)(v3 + 3) < v2)
    {
      v11 = v3 + 2;
      do
      {
        v13 = *v10;
        if (*v11 == 42)
        {
          if (v13 == 42) {
            goto LABEL_31;
          }
          if (v13 == 47)
          {
            v3 = v11 + 2;
            goto LABEL_10;
          }
        }

        else if (v13 == 42)
        {
LABEL_31:
          v12 = 1LL;
          goto LABEL_28;
        }

        v12 = 2LL;
LABEL_28:
        v11 += v12;
        v10 = v11 + 1;
      }

      while ((unint64_t)(v11 + 1) < v2);
    }

    lazy protocol witness table accessor for type JSONError and conformance JSONError();
    swift_allocError();
    v16 = 3LL;
    goto LABEL_37;
  }
    }

    goto LABEL_33;
  }

  if ((_DWORD)v3 == 160)
  {
LABEL_9:
    ++v2;
    goto LABEL_10;
  }

  v0[3] = v2;
  switch((int)v3)
  {
    case '""':
      v21 = (Swift::UInt8_optional)34;
      goto LABEL_48;
    case '\'':
LABEL_47:
      v21 = (Swift::UInt8_optional)39;
LABEL_48:
      JSON5Scanner.scanString(withQuote:)(v21);
      return;
    case '+':
    case '-':
      goto LABEL_41;
    case '[':
      JSON5Scanner.scanArray()();
      return;
    case 'f':
    case 't':
      JSON5Scanner.scanBool()();
      return;
    case 'n':
      JSON5Scanner.scanNull()();
      return;
    case '{':
      JSON5Scanner.scanObject()();
      return;
    default:
      if ((v3 - 58) <= 0xFFFFFFF5)
      {
        switch((int)v3)
        {
          case 9:
          case 10:
          case 13:
          case 32:
            __break(1u);
            goto LABEL_47;
          case 46:
          case 73:
          case 78:
            break;
          default:
            goto LABEL_39;
        }
      }
    }

    goto LABEL_33;
  }

  if (v3 == 160)
  {
LABEL_9:
    ++v2;
    goto LABEL_10;
  }

  *(void *)(v0 + 16) = v2;
  return v3;
}

  __break(1u);
  return result;
}

    (*(void (**)(char *, uint64_t))(v39 + 8))(v32, v19);
    (*(void (**)(char *, uint64_t))(v47 + 8))(v46, v54);
    (*(void (**)(char *, uint64_t))(v38 + 8))(v45, v48);
    return v57;
  }

  else
  {
    __break(1u);
  }

  return result;
}

  swift_release();
  return v14;
}

          swift_bridgeObjectRetain_n();
LABEL_11:
          swift_bridgeObjectRelease_n();
          return 0LL;
        }

        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
      }

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_11;
    }
  }

  return result;
}

    if (++v22 == 15)
    {
      outlined retain of DateComponents((uint64_t)v68);
      swift_unknownObjectRetain();
      outlined retain of DateComponents((uint64_t)v68);
      specialized _NativeSet.filter(_:)(v21);
      outlined release of DateComponents((uint64_t)v68);
      *(double *)__dst = v54;
      *((double *)__dst + 1) = v58;
      v35 = swift_bridgeObjectRetain();
      Calendar.ComponentSet.init(_:)(v35, v61);
      v36 = BYTE9(v68[17]);
      v66[0] = v10;
      Calendar._dateComponents(_:from:)((uint64_t *)v61, v66, __src);
      swift_release();
      if (v36 == 2)
      {
        result = outlined retain of DateComponents((uint64_t)v68);
      }

      else
      {
        *(void *)&v66[0] = 4LL;
        *(double *)v61 = v10;
        v37 = *(void (**)(_OWORD *__return_ptr, double *, _BYTE *, uint64_t, void))(*(void *)&v58 + 192LL);
        outlined retain of DateComponents((uint64_t)v68);
        v37(__dst, v66, v61, ObjectType, *(void *)&v58);
        memcpy(v61, __dst, 0x11AuLL);
        result = outlined release of DateComponents((uint64_t)v61);
        BYTE9(__src[17]) = v61[281];
      }

      v38 = *(void *)&v68[10];
      v39 = *(void *)&__src[10];
      v40 = BYTE8(__src[10]) ^ 1 | BYTE8(v68[10]);
      if ((BYTE8(__src[10]) & 1) == 0 && (BYTE8(v68[10]) & 1) == 0)
      {
        v41 = *(void *)&__src[10] - *(void *)&v68[10];
        if (__OFSUB__(*(void *)&__src[10], *(void *)&v68[10])) {
          goto LABEL_49;
        }
        if (v41 < 0) {
          v41 = *(void *)&v68[10] - *(void *)&__src[10];
        }
        if ((unint64_t)v41 >= 0x1F5)
        {
          outlined release of DateComponents((uint64_t)v68);
          *(void *)&__dst[2] = *(void *)&__src[2];
          BYTE8(__dst[2]) = BYTE8(__src[2]);
          *(void *)&__dst[3] = *(void *)&__src[3];
          BYTE8(__dst[3]) = BYTE8(__src[3]);
          *(void *)&__dst[4] = *(void *)&__src[4];
          BYTE8(__dst[4]) = BYTE8(__src[4]);
          *(void *)&__dst[5] = *(void *)&__src[5];
          BYTE8(__dst[5]) = BYTE8(__src[5]);
          *(void *)&__dst[6] = *(void *)&__src[6];
          BYTE8(__dst[6]) = BYTE8(__src[6]);
          *(void *)&__dst[7] = *(void *)&__src[7];
          BYTE8(__dst[7]) = BYTE8(__src[7]);
          *(void *)&__dst[8] = *(void *)&__src[8];
          BYTE8(__dst[8]) = BYTE8(__src[8]);
          *(void *)&__dst[9] = *(void *)&__src[9];
          BYTE8(__dst[9]) = BYTE8(__src[9]);
          *(void *)&__dst[10] = v39;
          *(void *)&__dst[11] = *(void *)&__src[11];
          BYTE8(__dst[11]) = BYTE8(__src[11]);
          *(void *)&__dst[12] = *(void *)&__src[12];
          BYTE8(__dst[12]) = BYTE8(__src[12]);
          *(void *)&__dst[13] = *(void *)&__src[13];
          BYTE8(__dst[13]) = BYTE8(__src[13]);
          *(void *)&__dst[14] = *(void *)&__src[14];
          BYTE8(__dst[14]) = BYTE8(__src[14]);
          *(void *)&__dst[15] = *(void *)&__src[15];
          BYTE8(__dst[15]) = BYTE8(__src[15]);
          BYTE8(__dst[16]) = BYTE8(__src[16]);
          *(void *)&__dst[16] = *(void *)&__src[16];
          *(void *)&__dst[17] = *(void *)&__src[17];
          WORD4(__dst[17]) = WORD4(__src[17]);
          __dst[0] = __src[0];
          __dst[1] = __src[1];
          BYTE8(__dst[10]) = 0;
          outlined release of DateComponents((uint64_t)__dst);
          swift_unknownObjectRelease();
          goto LABEL_36;
        }

        v39 = 0LL;
        v38 = 0LL;
        v40 = 0;
      }

      *(void *)&v61[32] = *(void *)&v68[2];
      v61[40] = BYTE8(v68[2]);
      *(void *)&v61[48] = *(void *)&v68[3];
      v61[56] = BYTE8(v68[3]);
      *(void *)&v61[64] = *(void *)&v68[4];
      v61[72] = BYTE8(v68[4]);
      *(void *)&v61[80] = *(void *)&v68[5];
      v61[88] = BYTE8(v68[5]);
      *(void *)&v61[96] = *(void *)&v68[6];
      v61[104] = BYTE8(v68[6]);
      *(void *)&v61[112] = *(void *)&v68[7];
      v61[120] = BYTE8(v68[7]);
      *(void *)&v61[128] = *(void *)&v68[8];
      v61[136] = BYTE8(v68[8]);
      *(void *)&v61[144] = *(void *)&v68[9];
      v61[152] = BYTE8(v68[9]);
      *(void *)&v61[160] = v38;
      v61[168] = v40;
      *(void *)&v61[176] = *(void *)&v68[11];
      v61[184] = BYTE8(v68[11]);
      *(void *)&v61[192] = *(void *)&v68[12];
      v61[200] = BYTE8(v68[12]);
      *(void *)&v61[208] = *(void *)&v68[13];
      v61[216] = BYTE8(v68[13]);
      *(void *)&v61[224] = *(void *)&v68[14];
      v61[232] = BYTE8(v68[14]);
      *(void *)&v61[240] = *(void *)&v68[15];
      v61[248] = BYTE8(v68[15]);
      v61[264] = BYTE8(v68[16]);
      *(void *)&v61[256] = *(void *)&v68[16];
      *(void *)&v61[272] = *(void *)&v68[17];
      v61[280] = BYTE8(v68[17]);
      v61[281] = v36;
      *(_OWORD *)v61 = v68[0];
      *(_OWORD *)&v61[16] = v68[1];
      memcpy(v66, v61, 0x11AuLL);
      *(void *)&__dst[2] = *(void *)&__src[2];
      BYTE8(__dst[2]) = BYTE8(__src[2]);
      *(void *)&__dst[3] = *(void *)&__src[3];
      BYTE8(__dst[3]) = BYTE8(__src[3]);
      *(void *)&__dst[4] = *(void *)&__src[4];
      BYTE8(__dst[4]) = BYTE8(__src[4]);
      *(void *)&__dst[5] = *(void *)&__src[5];
      BYTE8(__dst[5]) = BYTE8(__src[5]);
      *(void *)&__dst[6] = *(void *)&__src[6];
      BYTE8(__dst[6]) = BYTE8(__src[6]);
      *(void *)&__dst[7] = *(void *)&__src[7];
      BYTE8(__dst[7]) = BYTE8(__src[7]);
      *(void *)&__dst[8] = *(void *)&__src[8];
      BYTE8(__dst[8]) = BYTE8(__src[8]);
      *(void *)&__dst[9] = *(void *)&__src[9];
      BYTE8(__dst[9]) = BYTE8(__src[9]);
      *(void *)&__dst[10] = v39;
      BYTE8(__dst[10]) = BYTE8(__src[10]);
      *(void *)&__dst[11] = *(void *)&__src[11];
      BYTE8(__dst[11]) = BYTE8(__src[11]);
      *(void *)&__dst[12] = *(void *)&__src[12];
      BYTE8(__dst[12]) = BYTE8(__src[12]);
      *(void *)&__dst[13] = *(void *)&__src[13];
      BYTE8(__dst[13]) = BYTE8(__src[13]);
      *(void *)&__dst[14] = *(void *)&__src[14];
      BYTE8(__dst[14]) = BYTE8(__src[14]);
      *(void *)&__dst[15] = *(void *)&__src[15];
      BYTE8(__dst[15]) = BYTE8(__src[15]);
      BYTE8(__dst[16]) = BYTE8(__src[16]);
      *(void *)&__dst[16] = *(void *)&__src[16];
      *(void *)&__dst[17] = *(void *)&__src[17];
      WORD4(__dst[17]) = WORD4(__src[17]);
      __dst[0] = __src[0];
      __dst[1] = __src[1];
      memcpy(v65, __dst, 0x11AuLL);
      v42 = specialized static DateComponents.== infix(_:_:)((uint64_t)v66, v65);
      outlined release of DateComponents((uint64_t)v61);
      outlined release of DateComponents((uint64_t)__dst);
      swift_unknownObjectRelease();
      if (v42)
      {
        v43 = v58;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          v20 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  v20[2] + 1LL,  1,  v20);
        }
        v45 = v20[2];
        v44 = v20[3];
        if (v45 >= v44 >> 1) {
          v20 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (void *)(v44 > 1),  v45 + 1,  1,  v20);
        }
        v20[2] = v45 + 1;
        *(double *)&v20[v45 + 4] = v8;
LABEL_37:
        *(double *)v61 = v54;
        *(double *)&v61[8] = v43;
        *(void *)&v61[16] = v53;
        *(void *)&v61[24] = v53;
        *(double *)&v61[32] = v18;
        v61[40] = 0;
        memcpy(&v61[48], v67, 0x11AuLL);
        v46 = v70;
        v62 = v70;
        v63 = v52;
        v64 = 0;
        memcpy(__dst, v68, 0x11AuLL);
        v66[0] = v54;
        v66[1] = v43;
        swift_unknownObjectRetain();
        outlined retain of DateComponents((uint64_t)v68);
        swift_unknownObjectRetain();
        outlined retain of DateComponents((uint64_t)v68);
        v47 = DateComponents._validate(for:)((uint64_t *)v66);
        outlined release of Calendar.DatesByAdding((uint64_t)v61);
        LOBYTE(v65[0]) = 1;
        v69 = 0;
        memcpy(&__src[5], v67, 0x11AuLL);
        __src[0] = xmmword_1837A9530;
        LOBYTE(__src[1]) = 1;
        *((void *)&__src[1] + 1) = v53;
        *(void *)&__src[2] = v53;
        *((double *)&__src[2] + 1) = v18;
        LOBYTE(__src[3]) = 0;
        *((void *)&__src[3] + 1) = v53;
        *(double *)&__src[4] = v54;
        *((double *)&__src[4] + 1) = v43;
        BYTE10(__src[22]) = v46;
        *(_WORD *)((char *)&__src[22] + 11) = v52;
        *(void *)&__src[23] = 100LL;
        BYTE8(__src[23]) = !v47;
        Calendar.DatesByMatching.Iterator.next()();
        if ((BYTE8(__dst[0]) & 1) != 0)
        {
          v19 = v57;
        }

        else
        {
          v48 = *(void *)&__dst[0];
          v19 = v57;
          do
          {
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
              v20 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  v20[2] + 1LL,  1,  v20);
            }
            v50 = v20[2];
            v49 = v20[3];
            if (v50 >= v49 >> 1) {
              v20 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (void *)(v49 > 1),  v50 + 1,  1,  v20);
            }
            v20[2] = v50 + 1;
            v20[v50 + 4] = v48;
            Calendar.DatesByMatching.Iterator.next()();
            v48 = *(void *)&__dst[0];
          }

          while ((BYTE8(__dst[0]) & 1) == 0);
        }

        memcpy(__dst, __src, 0x179uLL);
        outlined release of Calendar.DatesByMatching.Iterator((uint64_t)__dst);
        outlined release of DateComponents((uint64_t)v68);
        if (v19 == v56)
        {
          result = swift_bridgeObjectRelease();
          a5 = v51;
          goto LABEL_47;
        }

        goto LABEL_9;
      }

  v238._countAndFlagsBits = (uint64_t)v8;
  v238._object = v7;
  v239 = v9;
  URL.scheme.getter();
  v16 = v15;
  swift_bridgeObjectRelease();
  if (!v16) {
    goto LABEL_43;
  }
  swift_retain();
  v17 = v8;
  swift_retain();
  if (!_foundation_swift_url_feature_enabled())
  {
    v38 = objc_msgSend(v17, sel_isFileURL);
    swift_release();
    swift_release();

    if ((v38 & 1) != 0) {
      goto LABEL_43;
    }
    goto LABEL_51;
  }

  v238._countAndFlagsBits = (uint64_t)v17;
  v238._object = v7;
  v239 = v9;
  URL.scheme.getter();
  if (!v18)
  {
    swift_release();
    swift_release();

    goto LABEL_51;
  }

  v230 = v8;
  v234 = v5;
  v19 = String.lowercased()();
  swift_bridgeObjectRelease();
  if (v19._countAndFlagsBits == 1701603686 && v19._object == (void *)0xE400000000000000LL)
  {
    swift_release();
    swift_release();

    swift_bridgeObjectRelease();
    v5 = v234;
    v8 = v230;
    goto LABEL_43;
  }

  v51 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_release();
  swift_release();

  swift_bridgeObjectRelease();
  v5 = v234;
  v8 = v230;
  if ((v51 & 1) == 0)
  {
LABEL_51:
    v68 = v17;
    swift_retain_n();
    swift_retain_n();
    v69 = v7;
    v70 = v68;
    if (_foundation_swift_url_feature_enabled())
    {
      v239 = v9;
      v71 = v70;
      v232 = v69;
      swift_retain();
      v231 = v9;
      swift_retain();
      v72 = URL.path(percentEncoded:)(1);
      v73 = v72._countAndFlagsBits;
      v238 = v72;
      swift_bridgeObjectRetain();
      if (String.count.getter() <= 1)
      {
        v74 = (unint64_t)v72._object;
      }

      else
      {
        v74 = (unint64_t)v72._object;
        if ((specialized BidirectionalCollection.last.getter(v72._countAndFlagsBits, (unint64_t)v72._object) & 0x1FF) == 0x2F)
        {
          specialized RangeReplaceableCollection<>.popLast()();
          swift_bridgeObjectRelease();
          v73 = v238._countAndFlagsBits;
          v74 = (unint64_t)v238._object;
        }
      }

      v236._countAndFlagsBits = Set.init(minimumCapacity:)();
      v104 = specialized Set._Variant.insert(_:)(&v237, 0x2FuLL);
      v105 = v236._countAndFlagsBits;
      v106 = HIBYTE(v74) & 0xF;
      if ((v74 & 0x2000000000000000LL) == 0) {
        v106 = v73 & 0xFFFFFFFFFFFFLL;
      }
      if (v106)
      {
        v236._countAndFlagsBits = v73;
        v236._object = (void *)v74;
        MEMORY[0x1895F8858](v104);
        v225 = (uint64_t)&v236;
        v226 = v105;
        swift_bridgeObjectRetain();
        specialized String.UTF8View.withContiguousStorageIfAvailable<A>(_:)( (void *(*)(__int128 *__return_ptr, void *, uint64_t))closure #1 in StringProtocol.removingURLPercentEncoding(excluding:)specialized partial apply,  (uint64_t)v224,  v73,  v74);
        if (v107 == 1)
        {
          v108 = (unint64_t)v236._object;
          v109 = v236._countAndFlagsBits;
          swift_bridgeObjectRetain();
          specialized StringProtocol.removingURLPercentEncoding<A>(utf8Buffer:excluding:)(v109, v108, v105);
          swift_bridgeObjectRelease();
        }

        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }

      else
      {
        swift_bridgeObjectRelease();
      }

      swift_release();
      swift_release();

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_release();
      swift_release();
    }

    else
    {
      v87 = objc_msgSend(v70, sel__parameterString);
      if (v87)
      {
        v88 = v87;
        v89 = static String._unconditionallyBridgeFromObjectiveC(_:)(v87);
        v91 = v90;

        if (getEnumTag for _DarwinSearchPathsSequence.Iterator.State()
          && (v92 = objc_msgSend(v70, sel_path)) != 0)
        {
          v93 = v92;
          v94 = static String._unconditionallyBridgeFromObjectiveC(_:)(v92);
          v96 = v95;

          v238._countAndFlagsBits = (uint64_t)v94;
          v238._object = v96;
          swift_bridgeObjectRetain();
          v97._countAndFlagsBits = 59LL;
          v97._object = (void *)0xE100000000000000LL;
          String.append(_:)(v97);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRetain();
          v98._countAndFlagsBits = (uint64_t)v89;
          v98._object = v91;
          String.append(_:)(v98);
          swift_release();
          swift_release();

          swift_bridgeObjectRelease();
        }

        else
        {
          v238._countAndFlagsBits = 59LL;
          v238._object = (void *)0xE100000000000000LL;
          v208._countAndFlagsBits = (uint64_t)v89;
          v208._object = v91;
          String.append(_:)(v208);
          swift_release();
          swift_release();
        }

        swift_bridgeObjectRelease();
      }

      else
      {
        v209 = objc_msgSend(v70, sel_path);
        if (v209)
        {
          v210 = v209;
          static String._unconditionallyBridgeFromObjectiveC(_:)(v209);
          swift_release();
          swift_release();
        }

        else
        {
          swift_release();
          swift_release();
        }
      }
    }

    v214 = (void *)objc_opt_self();
    v215 = String._bridgeToObjectiveCImpl()();
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
    v216 = objc_msgSend( v214,  sel__cocoaErrorWithCode_path_url_underlying_variant_source_destination_,  518,  v215,  v70,  0,  0,  0,  0);
    goto LABEL_176;
  }

  swift_retain();
  v14 = v6;
  swift_retain();
  if (!_foundation_swift_url_feature_enabled())
  {
    v35 = objc_msgSend(v14, sel_isFileURL);
    swift_release();
    swift_release();

    if ((v35 & 1) != 0) {
      goto LABEL_39;
    }
    goto LABEL_43;
  }

  v227._countAndFlagsBits = (uint64_t)v14;
  v227._object = v7;
  v228 = v8;
  URL.scheme.getter();
  if (!v15)
  {
    swift_release();
    swift_release();

    goto LABEL_43;
  }

  v16 = String.lowercased()();
  swift_bridgeObjectRelease();
  if (v16._countAndFlagsBits == 1701603686 && v16._object == (void *)0xE400000000000000LL)
  {
    swift_release();
    swift_release();

    swift_bridgeObjectRelease();
    v5 = v224;
    goto LABEL_39;
  }

  v45 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_release();
  swift_release();

  swift_bridgeObjectRelease();
  v5 = v224;
  if ((v45 & 1) == 0)
  {
LABEL_43:
    v50 = v14;
    swift_retain_n();
    swift_retain_n();
    v51 = v50;
    if (_foundation_swift_url_feature_enabled())
    {
      v228 = v8;
      v52 = v51;
      swift_retain();
      swift_retain();
      v53 = URL.path(percentEncoded:)(1);
      v54 = v53._countAndFlagsBits;
      v227 = v53;
      swift_bridgeObjectRetain();
      v224 = v52;
      if (String.count.getter() <= 1)
      {
        v55 = (unint64_t)v53._object;
      }

      else
      {
        v55 = (unint64_t)v53._object;
        if ((specialized BidirectionalCollection.last.getter(v53._countAndFlagsBits, (unint64_t)v53._object) & 0x1FF) == 0x2F)
        {
          specialized RangeReplaceableCollection<>.popLast()();
          swift_bridgeObjectRelease();
          v54 = v227._countAndFlagsBits;
          v55 = (unint64_t)v227._object;
        }
      }

      v225._countAndFlagsBits = Set.init(minimumCapacity:)();
      v80 = specialized Set._Variant.insert(_:)(&v226, 0x2FuLL);
      v81 = v225._countAndFlagsBits;
      v82 = HIBYTE(v55) & 0xF;
      if ((v55 & 0x2000000000000000LL) == 0) {
        v82 = v54 & 0xFFFFFFFFFFFFLL;
      }
      if (v82)
      {
        v222 = v8;
        v225._countAndFlagsBits = v54;
        v225._object = (void *)v55;
        MEMORY[0x1895F8858](v80);
        v214 = (uint64_t)&v225;
        v215 = v81;
        swift_bridgeObjectRetain();
        specialized String.UTF8View.withContiguousStorageIfAvailable<A>(_:)( (void *(*)(__int128 *__return_ptr, void *, uint64_t))closure #1 in StringProtocol.removingURLPercentEncoding(excluding:)specialized partial apply,  (uint64_t)v213,  v54,  v55);
        if (v83 == 1)
        {
          v84 = (unint64_t)v225._object;
          v85 = v225._countAndFlagsBits;
          swift_bridgeObjectRetain();
          specialized StringProtocol.removingURLPercentEncoding<A>(utf8Buffer:excluding:)(v85, v84, v81);
          swift_bridgeObjectRelease();
        }

        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v101 = v224;
      }

      else
      {
        swift_bridgeObjectRelease();
        v101 = v224;
      }

      swift_release();
      swift_release();

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_release();
      swift_release();
    }

    else
    {
      v56 = objc_msgSend(v51, sel__parameterString);
      if (v56)
      {
        v57 = v56;
        v58 = static String._unconditionallyBridgeFromObjectiveC(_:)(v56);
        v60 = v59;

        if (getEnumTag for _DarwinSearchPathsSequence.Iterator.State()
          && (v61 = objc_msgSend(v51, sel_path)) != 0)
        {
          v62 = v61;
          v63 = static String._unconditionallyBridgeFromObjectiveC(_:)(v61);
          v65 = v64;

          v227._countAndFlagsBits = (uint64_t)v63;
          v227._object = v65;
          swift_bridgeObjectRetain();
          v66._countAndFlagsBits = 59LL;
          v66._object = (void *)0xE100000000000000LL;
          String.append(_:)(v66);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRetain();
          v67._countAndFlagsBits = (uint64_t)v58;
          v67._object = v60;
          String.append(_:)(v67);
          swift_release();
          swift_release();

          swift_bridgeObjectRelease();
        }

        else
        {
          v227._countAndFlagsBits = 59LL;
          v227._object = (void *)0xE100000000000000LL;
          v98._countAndFlagsBits = (uint64_t)v58;
          v98._object = v60;
          String.append(_:)(v98);
          swift_release();
          swift_release();
        }

        swift_bridgeObjectRelease();
      }

      else
      {
        v99 = objc_msgSend(v51, sel_path);
        if (v99)
        {
          v100 = v99;
          static String._unconditionallyBridgeFromObjectiveC(_:)(v99);
          swift_release();
          swift_release();
        }

        else
        {
          swift_release();
          swift_release();
        }
      }
    }

    v107 = (void *)objc_opt_self();
    v108 = String._bridgeToObjectiveCImpl()();
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
    v109 = objc_msgSend( v107,  sel__cocoaErrorWithCode_path_url_underlying_variant_source_destination_,  518,  v108,  v51,  0,  0,  0,  0);
    goto LABEL_88;
  }

      v15 = 0LL;
      v42 = v5;
      v43 = v6;
      v44 = v14;
      v45 = v7;
      v46 = v3;
      v47 = v11;
      v16 = 40LL;
      v48 = v12;
      v49 = v13;
      while (1)
      {
        v17 = v15 + 1;
        if (__OFADD__(v15, 1LL))
        {
          __break(1u);
          goto LABEL_40;
        }

        if (*(void *)(a2 + v16)) {
          break;
        }
        v16 += 16LL;
        ++v15;
        if (v17 == v4) {
          return v3;
        }
      }

      swift_bridgeObjectRetain();
      v18 = (unint64_t *)(a2 + 40);
      v19 = (char *)MEMORY[0x18961AFE8];
      do
      {
        v20 = *v18;
        if (*v18)
        {
          v21 = *(v18 - 1);
          if ((v20 & 0x2000000000000000LL) != 0 ? HIBYTE(v20) & 0xF : v21 & 0xFFFFFFFFFFFFLL)
          {
            if ((v20 & 0x1000000000000000LL) != 0)
            {
              v23 = _StringGuts.foreignErrorCorrectedScalar(startingAt:)();
            }

            else
            {
              if ((v20 & 0x2000000000000000LL) != 0)
              {
                v37[0] = *(v18 - 1);
                v37[1] = v20 & 0xFFFFFFFFFFFFFFLL;
                swift_bridgeObjectRetain();
              }

              else
              {
                if ((v21 & 0x1000000000000000LL) == 0) {
                  _StringObject.sharedUTF8.getter();
                }
                swift_bridgeObjectRetain();
              }

              v23 = _decodeScalar(_:startingAt:)();
              swift_bridgeObjectRelease();
            }

            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
              v19 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  *((void *)v19 + 2) + 1LL,  1,  v19);
            }
            v25 = *((void *)v19 + 2);
            v24 = *((void *)v19 + 3);
            if (v25 >= v24 >> 1) {
              v19 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (char *)(v24 > 1),  v25 + 1,  1,  v19);
            }
            *((void *)v19 + 2) = v25 + 1;
            *(_DWORD *)&v19[4 * v25 + 32] = v23;
          }
        }

        v18 += 2;
        --v4;
      }

      while (v4);
      swift_bridgeObjectRelease();
      BigString.unicodeScalars.getter();
      BigString.UnicodeScalarView.subscript.getter();
      outlined release of Locale((uint64_t)v36);
      v26 = BigSubstring.UnicodeScalarView._findFirstScalarBoundary(for:)((uint64_t)v19);
      v28 = v27;
      swift_bridgeObjectRelease();
      result = outlined release of Locale((uint64_t)v37);
      if (v28 != 2)
      {
        if (v29 > v26 >> 10) {
          goto LABEL_41;
        }
        return v26;
      }
    }
  }

  return v3;
}

  *(void *)(v2 + 8 * v6) = v8 | v7;
  *(void *)(v9 + 8 * v5) = v0;
  v11 = *(void *)(v1 + 16);
  v12 = __OFADD__(v11, 1LL);
  v13 = v11 + 1;
  if (!v12)
  {
    *(void *)(v1 + 16) = v13;
    return v1;
  }

  __break(1u);
  return result;
}

  swift_retain();
  v17 = v9;
  swift_retain();
  if (!_foundation_swift_url_feature_enabled())
  {
    v38 = objc_msgSend(v17, sel_isFileURL);
    swift_release();
    swift_release();

    if ((v38 & 1) != 0) {
      goto LABEL_39;
    }
    goto LABEL_43;
  }

  v232._countAndFlagsBits = (uint64_t)v17;
  v232._object = v10;
  v233 = v11;
  URL.scheme.getter();
  if (!v18)
  {
    swift_release();
    swift_release();

    goto LABEL_43;
  }

  v19 = String.lowercased()();
  swift_bridgeObjectRelease();
  if (v19._countAndFlagsBits == 1701603686 && v19._object == (void *)0xE400000000000000LL)
  {
    swift_release();
    swift_release();

    swift_bridgeObjectRelease();
    goto LABEL_39;
  }

  v48 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_release();
  swift_release();

  swift_bridgeObjectRelease();
  if ((v48 & 1) == 0)
  {
LABEL_43:
    v53 = v17;
    swift_retain_n();
    swift_retain_n();
    v54 = v11;
    v55 = v53;
    if (_foundation_swift_url_feature_enabled())
    {
      v233 = v54;
      v56 = v55;
      swift_retain();
      v226 = v54;
      swift_retain();
      v57 = URL.path(percentEncoded:)(1);
      v58 = v57._countAndFlagsBits;
      v232 = v57;
      swift_bridgeObjectRetain();
      if (String.count.getter() <= 1)
      {
        v59 = (unint64_t)v57._object;
      }

      else
      {
        v59 = (unint64_t)v57._object;
        if ((specialized BidirectionalCollection.last.getter(v57._countAndFlagsBits, (unint64_t)v57._object) & 0x1FF) == 0x2F)
        {
          specialized RangeReplaceableCollection<>.popLast()();
          swift_bridgeObjectRelease();
          v58 = v232._countAndFlagsBits;
          v59 = (unint64_t)v232._object;
        }
      }

      v231._countAndFlagsBits = Set.init(minimumCapacity:)();
      v84 = specialized Set._Variant.insert(_:)(&v234, 0x2FuLL);
      v85 = v231._countAndFlagsBits;
      v86 = HIBYTE(v59) & 0xF;
      if ((v59 & 0x2000000000000000LL) == 0) {
        v86 = v58 & 0xFFFFFFFFFFFFLL;
      }
      if (v86)
      {
        v230 = v56;
        v231._countAndFlagsBits = v58;
        v231._object = (void *)v59;
        MEMORY[0x1895F8858](v84);
        v221 = &v231;
        v222 = v85;
        swift_bridgeObjectRetain();
        specialized String.UTF8View.withContiguousStorageIfAvailable<A>(_:)( (void *(*)(__int128 *__return_ptr, void *, uint64_t))closure #1 in StringProtocol.removingURLPercentEncoding(excluding:)specialized partial apply,  (uint64_t)v220,  v58,  v59);
        if (v87 == 1)
        {
          v88 = (unint64_t)v231._object;
          v89 = v231._countAndFlagsBits;
          swift_bridgeObjectRetain();
          specialized StringProtocol.removingURLPercentEncoding<A>(utf8Buffer:excluding:)(v89, v88, v85);
          swift_bridgeObjectRelease();
        }

        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v56 = v230;
      }

      else
      {
        swift_bridgeObjectRelease();
      }

      swift_release();
      swift_release();

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_release();
      swift_release();
    }

    else
    {
      v60 = objc_msgSend(v55, sel__parameterString);
      if (v60)
      {
        v61 = v60;
        v62 = static String._unconditionallyBridgeFromObjectiveC(_:)(v60);
        v64 = v63;

        if (getEnumTag for _DarwinSearchPathsSequence.Iterator.State()
          && (v65 = objc_msgSend(v55, sel_path)) != 0)
        {
          v66 = v65;
          v67 = static String._unconditionallyBridgeFromObjectiveC(_:)(v65);
          v69 = v68;

          v232._countAndFlagsBits = (uint64_t)v67;
          v232._object = v69;
          swift_bridgeObjectRetain();
          v70._countAndFlagsBits = 59LL;
          v70._object = (void *)0xE100000000000000LL;
          String.append(_:)(v70);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRetain();
          v71._countAndFlagsBits = (uint64_t)v62;
          v71._object = v64;
          String.append(_:)(v71);
          swift_release();
          swift_release();

          swift_bridgeObjectRelease();
        }

        else
        {
          v232._countAndFlagsBits = 59LL;
          v232._object = (void *)0xE100000000000000LL;
          v106._countAndFlagsBits = (uint64_t)v62;
          v106._object = v64;
          String.append(_:)(v106);
          swift_release();
          swift_release();
        }

        swift_bridgeObjectRelease();
        goto LABEL_88;
      }

      v107 = objc_msgSend(v55, sel_path);
      if (!v107)
      {
        swift_release();
        swift_release();

        goto LABEL_88;
      }

      v56 = v107;
      static String._unconditionallyBridgeFromObjectiveC(_:)(v107);
      swift_release();
      swift_release();
    }

LABEL_88:
    v116 = (void *)objc_opt_self();
    v117 = String._bridgeToObjectiveCImpl()();
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
    v118 = objc_msgSend( v116,  sel__cocoaErrorWithCode_path_url_underlying_variant_source_destination_,  262,  v117,  v55,  0,  0,  0,  0);
LABEL_89:
    v118;
    swift_unknownObjectRelease();

    return swift_willThrow();
  }

  v13 = v8;
  swift_retain();
  swift_retain();
  v113 = v4;
  if (_foundation_swift_url_feature_enabled())
  {
    v114 = v3;
    v117 = v7;
    v14 = v13;
    swift_retain();
    swift_retain();
    v15 = URL.path(percentEncoded:)(1);
    v16 = v15._countAndFlagsBits;
    v116 = v15;
    swift_bridgeObjectRetain();
    v112 = v14;
    if (String.count.getter() <= 1)
    {
      v17 = (unint64_t)v15._object;
    }

    else
    {
      v17 = (unint64_t)v15._object;
      if ((specialized BidirectionalCollection.last.getter(v15._countAndFlagsBits, (unint64_t)v15._object) & 0x1FF) == 0x2F)
      {
        specialized RangeReplaceableCollection<>.popLast()();
        swift_bridgeObjectRelease();
        v16 = v116._countAndFlagsBits;
        v17 = (unint64_t)v116._object;
      }
    }

    v115._countAndFlagsBits = Set.init(minimumCapacity:)();
    v56 = specialized Set._Variant.insert(_:)(&v118, 0x2FuLL);
    v57 = v115._countAndFlagsBits;
    v58 = HIBYTE(v17) & 0xF;
    if ((v17 & 0x2000000000000000LL) == 0) {
      v58 = v16 & 0xFFFFFFFFFFFFLL;
    }
    if (v58)
    {
      v111 = v13;
      v115._countAndFlagsBits = v16;
      v115._object = (void *)v17;
      MEMORY[0x1895F8858](v56);
      v109 = (uint64_t)&v115;
      v110 = v57;
      swift_bridgeObjectRetain();
      v59 = v114;
      v60 = specialized String.UTF8View.withContiguousStorageIfAvailable<A>(_:)( (void *(*)(__int128 *__return_ptr, void *, uint64_t))closure #1 in StringProtocol.removingURLPercentEncoding(excluding:)specialized partial apply,  (uint64_t)v108,  v16,  v17);
      v114 = v59;
      if (v61 == 1)
      {
        v63 = (unint64_t)v115._object;
        v62 = v115._countAndFlagsBits;
        swift_bridgeObjectRetain();
        v64 = (uint64_t)specialized StringProtocol.removingURLPercentEncoding<A>(utf8Buffer:excluding:)(v62, v63, v57);
        v66 = v65;
        swift_bridgeObjectRelease();
      }

      else
      {
        v64 = (uint64_t)v60;
        v66 = v61;
      }

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v13 = v111;
      v74 = v112;
      if (!v66)
      {
        swift_release();
        swift_release();

        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v64 = 0LL;
        v66 = 0xE000000000000000LL;
        goto LABEL_55;
      }
    }

    else
    {
      swift_bridgeObjectRelease();
      v64 = 0LL;
      v66 = 0xE000000000000000LL;
      v74 = v112;
    }

    swift_release();
    swift_release();

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
LABEL_55:
    swift_release();
    swift_release();

    v3 = v114;
    goto LABEL_56;
  }

  v36 = objc_msgSend(v13, sel__parameterString);
  if (v36)
  {
    v37 = v36;
    v38 = static String._unconditionallyBridgeFromObjectiveC(_:)(v36);
    v40 = v39;

    if (getEnumTag for _DarwinSearchPathsSequence.Iterator.State()
      && (v41 = objc_msgSend(v13, sel_path)) != 0)
    {
      v42 = v41;
      v43 = static String._unconditionallyBridgeFromObjectiveC(_:)(v41);
      v44 = v13;
      v45 = v3;
      v47 = v46;

      v116._countAndFlagsBits = (uint64_t)v43;
      v116._object = v47;
      swift_bridgeObjectRetain();
      v48._countAndFlagsBits = 59LL;
      v48._object = (void *)0xE100000000000000LL;
      String.append(_:)(v48);
      v3 = v45;
      v13 = v44;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRetain();
      v49._countAndFlagsBits = (uint64_t)v38;
      v49._object = v40;
      String.append(_:)(v49);
      swift_release();
      swift_release();

      swift_bridgeObjectRelease();
    }

    else
    {
      v116._countAndFlagsBits = 59LL;
      v116._object = (void *)0xE100000000000000LL;
      v70._countAndFlagsBits = (uint64_t)v38;
      v70._object = v40;
      String.append(_:)(v70);
      swift_release();
      swift_release();
    }

    swift_bridgeObjectRelease();
    v64 = v116._countAndFlagsBits;
    v66 = (unint64_t)v116._object;
  }

  else
  {
    v71 = objc_msgSend(v13, sel_path);
    if (v71)
    {
      v72 = v71;
      v64 = (uint64_t)static String._unconditionallyBridgeFromObjectiveC(_:)(v71);
      v66 = v73;
      swift_release();
      swift_release();
    }

    else
    {
      swift_release();
      swift_release();

      v64 = 0LL;
      v66 = 0xE000000000000000LL;
    }
  }

      __break(1u);
    }
  }

  swift_retain();
  v17 = v8;
  swift_retain();
  if (!_foundation_swift_url_feature_enabled())
  {
    v38 = objc_msgSend(v17, sel_isFileURL);
    swift_release();
    swift_release();

    if ((v38 & 1) != 0) {
      goto LABEL_39;
    }
    goto LABEL_43;
  }

  v217._countAndFlagsBits = (uint64_t)v17;
  v217._object = v215;
  v218 = v9;
  URL.scheme.getter();
  if (!v18)
  {
    swift_release();
    swift_release();

    goto LABEL_43;
  }

  v19 = String.lowercased()();
  swift_bridgeObjectRelease();
  if (v19._countAndFlagsBits == 1701603686 && v19._object == (void *)0xE400000000000000LL)
  {
    swift_release();
    swift_release();

    swift_bridgeObjectRelease();
    goto LABEL_39;
  }

  v48 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_release();
  swift_release();

  swift_bridgeObjectRelease();
  if ((v48 & 1) == 0)
  {
LABEL_43:
    v53 = v17;
    swift_retain_n();
    swift_retain_n();
    v54 = v53;
    if (_foundation_swift_url_feature_enabled())
    {
      v218 = v9;
      v55 = v54;
      swift_retain();
      swift_retain();
      v56 = URL.path(percentEncoded:)(1);
      v57 = v56._countAndFlagsBits;
      v217 = v56;
      swift_bridgeObjectRetain();
      v212 = v9;
      if (String.count.getter() <= 1)
      {
        v58 = (unint64_t)v56._object;
      }

      else
      {
        v58 = (unint64_t)v56._object;
        if ((specialized BidirectionalCollection.last.getter(v56._countAndFlagsBits, (unint64_t)v56._object) & 0x1FF) == 0x2F)
        {
          specialized RangeReplaceableCollection<>.popLast()();
          swift_bridgeObjectRelease();
          v57 = v217._countAndFlagsBits;
          v58 = (unint64_t)v217._object;
        }
      }

      v216._countAndFlagsBits = Set.init(minimumCapacity:)();
      v85 = specialized Set._Variant.insert(_:)(&v219, 0x2FuLL);
      v86 = v216._countAndFlagsBits;
      v87 = HIBYTE(v58) & 0xF;
      if ((v58 & 0x2000000000000000LL) == 0) {
        v87 = v57 & 0xFFFFFFFFFFFFLL;
      }
      if (v87)
      {
        v216._countAndFlagsBits = v57;
        v216._object = (void *)v58;
        MEMORY[0x1895F8858](v85);
        v207 = &v216;
        v208 = v86;
        swift_bridgeObjectRetain();
        specialized String.UTF8View.withContiguousStorageIfAvailable<A>(_:)( (void *(*)(__int128 *__return_ptr, void *, uint64_t))closure #1 in StringProtocol.removingURLPercentEncoding(excluding:)specialized partial apply,  (uint64_t)v206,  v57,  v58);
        if (v88 == 1)
        {
          v89 = (unint64_t)v216._object;
          v90 = v216._countAndFlagsBits;
          swift_bridgeObjectRetain();
          specialized StringProtocol.removingURLPercentEncoding<A>(utf8Buffer:excluding:)(v90, v89, v86);
          swift_bridgeObjectRelease();
        }

        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }

      else
      {
        swift_bridgeObjectRelease();
      }

      swift_release();
      swift_release();

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_release();
      swift_release();
    }

    else
    {
      v59 = objc_msgSend(v54, sel__parameterString);
      if (v59)
      {
        v60 = v59;
        v61 = static String._unconditionallyBridgeFromObjectiveC(_:)(v59);
        v63 = v62;

        if (getEnumTag for _DarwinSearchPathsSequence.Iterator.State()
          && (v64 = objc_msgSend(v54, sel_path)) != 0)
        {
          v65 = v64;
          v66 = static String._unconditionallyBridgeFromObjectiveC(_:)(v64);
          v68 = v67;

          v217._countAndFlagsBits = (uint64_t)v66;
          v217._object = v68;
          swift_bridgeObjectRetain();
          v69._countAndFlagsBits = 59LL;
          v69._object = (void *)0xE100000000000000LL;
          String.append(_:)(v69);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRetain();
          v70._countAndFlagsBits = (uint64_t)v61;
          v70._object = v63;
          String.append(_:)(v70);
          swift_release();
          swift_release();

          swift_bridgeObjectRelease();
        }

        else
        {
          v217._countAndFlagsBits = 59LL;
          v217._object = (void *)0xE100000000000000LL;
          v106._countAndFlagsBits = (uint64_t)v61;
          v106._object = v63;
          String.append(_:)(v106);
          swift_release();
          swift_release();
        }

        swift_bridgeObjectRelease();
        goto LABEL_88;
      }

      v107 = objc_msgSend(v54, sel_path);
      if (!v107)
      {
        swift_release();
        swift_release();

        goto LABEL_88;
      }

      v55 = v107;
      static String._unconditionallyBridgeFromObjectiveC(_:)(v107);
      swift_release();
      swift_release();
    }

LABEL_88:
    v112 = (void *)objc_opt_self();
    v113 = String._bridgeToObjectiveCImpl()();
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
    v114 = objc_msgSend( v112,  sel__cocoaErrorWithCode_path_url_underlying_variant_source_destination_,  262,  v113,  v54,  0,  0,  0,  0);
LABEL_89:
    v114;
    swift_unknownObjectRelease();

    return swift_willThrow();
  }

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

  *(void *)(v5 + 8 * v9) = v11 | v10;
  *(_BYTE *)(v12 + v8) = v2;
  v14 = *(void *)(v4 + 16);
  v15 = __OFADD__(v14, 1LL);
  v16 = v14 + 1;
  if (v15) {
    goto LABEL_52;
  }
  *(void *)(v4 + 16) = v16;
LABEL_12:
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<Calendar.Component, NSCalendarUnit>);
  result = static _DictionaryStorage.allocate(capacity:)();
  v17 = (void *)result;
  v18 = 0LL;
  v19 = result + 64;
  do
  {
    v20 = outlined read-only object #0 of _CalendarBridged.minimumRange(of:)[v18 + 32];
    if (v20 == 18) {
      break;
    }
    v21 = *(void *)&outlined read-only object #0 of _CalendarBridged.minimumRange(of:)[v18 + 40];
    result = specialized __RawDictionaryStorage.find<A>(_:)(outlined read-only object #0 of _CalendarBridged.minimumRange(of:)[v18 + 32]);
    if ((v22 & 1) != 0) {
      goto LABEL_49;
    }
    *(void *)(v19 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << result;
    *(_BYTE *)(v17[6] + result) = v20;
    *(void *)(v17[7] + 8 * result) = v21;
    v23 = v17[2];
    v15 = __OFADD__(v23, 1LL);
    v24 = v23 + 1;
    if (v15) {
      goto LABEL_50;
    }
    v17[2] = v24;
    v18 += 16LL;
  }

  while (v18 != 256);
  v25 = 0LL;
  v26 = 0LL;
  v27 = 1LL << *(_BYTE *)(v4 + 32);
  v28 = *(void *)(v4 + 56);
  v29 = -1LL;
  if (v27 < 64) {
    v29 = ~(-1LL << v27);
  }
  v30 = v29 & v28;
  v31 = (unint64_t)(v27 + 63) >> 6;
  if ((v29 & v28) == 0) {
    goto LABEL_22;
  }
LABEL_20:
  v32 = __clz(__rbit64(v30));
  v30 &= v30 - 1;
  v33 = v32 | (v25 << 6);
  if (v17[2])
  {
    while (1)
    {
      result = specialized __RawDictionaryStorage.find<A>(_:)(*(unsigned __int8 *)(*(void *)(v4 + 48) + v33));
      if ((v37 & 1) == 0) {
        break;
      }
      v38 = *(void *)(v17[7] + 8 * result);
      if ((v38 & ~v26) == 0) {
        v38 = 0LL;
      }
      v26 |= v38;
      if (v30) {
        goto LABEL_20;
      }
LABEL_22:
      v34 = v25 + 1;
      if (__OFADD__(v25, 1LL)) {
        goto LABEL_48;
      }
      if (v34 >= v31)
      {
LABEL_41:
        swift_release();
        swift_release();
        result = (unint64_t)objc_msgSend(v3, sel_minimumRangeOfUnit_, v26);
        if (result == 0x7FFFFFFFFFFFFFFFLL) {
          return 0LL;
        }
        if (__OFADD__(result, v39)) {
          goto LABEL_53;
        }
        return result;
      }

      v35 = *(void *)(v5 + 8 * v34);
      ++v25;
      if (!v35)
      {
        v25 = v34 + 1;
        if (v34 + 1 >= v31) {
          goto LABEL_41;
        }
        v35 = *(void *)(v5 + 8 * v25);
        if (!v35)
        {
          v25 = v34 + 2;
          if (v34 + 2 >= v31) {
            goto LABEL_41;
          }
          v35 = *(void *)(v5 + 8 * v25);
          if (!v35)
          {
            v36 = v34 + 3;
            if (v36 >= v31) {
              goto LABEL_41;
            }
            v35 = *(void *)(v5 + 8 * v36);
            if (!v35)
            {
              while (1)
              {
                v25 = v36 + 1;
                if (__OFADD__(v36, 1LL)) {
                  goto LABEL_51;
                }
                if (v25 >= v31) {
                  goto LABEL_41;
                }
                v35 = *(void *)(v5 + 8 * v25);
                ++v36;
                if (v35) {
                  goto LABEL_35;
                }
              }
            }

            v25 = v36;
          }
        }
      }

  *(void *)(v5 + 8 * v9) = v11 | v10;
  *(_BYTE *)(v12 + v8) = v2;
  v14 = *(void *)(v4 + 16);
  v15 = __OFADD__(v14, 1LL);
  v16 = v14 + 1;
  if (v15) {
    goto LABEL_54;
  }
  *(void *)(v4 + 16) = v16;
LABEL_12:
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<Calendar.Component, NSCalendarUnit>);
  result = static _DictionaryStorage.allocate(capacity:)();
  v17 = (void *)result;
  v18 = 0LL;
  v19 = result + 64;
  do
  {
    v20 = outlined read-only object #0 of _CalendarBridged.maximumRange(of:)[v18 + 32];
    if (v20 == 18) {
      break;
    }
    v21 = *(void *)&outlined read-only object #0 of _CalendarBridged.maximumRange(of:)[v18 + 40];
    result = specialized __RawDictionaryStorage.find<A>(_:)(outlined read-only object #0 of _CalendarBridged.maximumRange(of:)[v18 + 32]);
    if ((v22 & 1) != 0) {
      goto LABEL_51;
    }
    *(void *)(v19 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << result;
    *(_BYTE *)(v17[6] + result) = v20;
    *(void *)(v17[7] + 8 * result) = v21;
    v23 = v17[2];
    v15 = __OFADD__(v23, 1LL);
    v24 = v23 + 1;
    if (v15) {
      goto LABEL_52;
    }
    v17[2] = v24;
    v18 += 16LL;
  }

  while (v18 != 256);
  v25 = 0LL;
  v26 = 0LL;
  v27 = 1LL << *(_BYTE *)(v4 + 32);
  v28 = *(void *)(v4 + 56);
  v29 = -1LL;
  if (v27 < 64) {
    v29 = ~(-1LL << v27);
  }
  v30 = v29 & v28;
  v31 = (unint64_t)(v27 + 63) >> 6;
  if ((v29 & v28) == 0) {
    goto LABEL_22;
  }
LABEL_20:
  v32 = __clz(__rbit64(v30));
  v30 &= v30 - 1;
  v33 = v32 | (v25 << 6);
  if (v17[2])
  {
    while (1)
    {
      result = specialized __RawDictionaryStorage.find<A>(_:)(*(unsigned __int8 *)(*(void *)(v4 + 48) + v33));
      if ((v37 & 1) == 0) {
        break;
      }
      v38 = *(void *)(v17[7] + 8 * result);
      if ((v38 & ~v26) == 0) {
        v38 = 0LL;
      }
      v26 |= v38;
      if (v30) {
        goto LABEL_20;
      }
LABEL_22:
      v34 = v25 + 1;
      if (__OFADD__(v25, 1LL)) {
        goto LABEL_50;
      }
      if (v34 >= v31)
      {
LABEL_43:
        swift_release();
        swift_release();
        result = (unint64_t)objc_msgSend(v3, sel_maximumRangeOfUnit_, v26);
        if (result == 0x7FFFFFFFFFFFFFFFLL) {
          return 0LL;
        }
        if (__OFADD__(result, v39)) {
          goto LABEL_55;
        }
        return result;
      }

      v35 = *(void *)(v5 + 8 * v34);
      ++v25;
      if (!v35)
      {
        v25 = v34 + 1;
        if (v34 + 1 >= v31) {
          goto LABEL_43;
        }
        v35 = *(void *)(v5 + 8 * v25);
        if (!v35)
        {
          v25 = v34 + 2;
          if (v34 + 2 >= v31) {
            goto LABEL_43;
          }
          v35 = *(void *)(v5 + 8 * v25);
          if (!v35)
          {
            v25 = v34 + 3;
            if (v34 + 3 >= v31) {
              goto LABEL_43;
            }
            v35 = *(void *)(v5 + 8 * v25);
            if (!v35)
            {
              v36 = v34 + 4;
              if (v36 >= v31) {
                goto LABEL_43;
              }
              v35 = *(void *)(v5 + 8 * v36);
              if (!v35)
              {
                while (1)
                {
                  v25 = v36 + 1;
                  if (__OFADD__(v36, 1LL)) {
                    goto LABEL_53;
                  }
                  if (v25 >= v31) {
                    goto LABEL_43;
                  }
                  v35 = *(void *)(v5 + 8 * v25);
                  ++v36;
                  if (v35) {
                    goto LABEL_37;
                  }
                }
              }

              v25 = v36;
            }
          }
        }
      }

    if (v10 <= v9) {
      v11 = v9;
    }
    else {
      v11 = v10;
    }
    goto LABEL_24;
  }

  uint64_t v9 = MEMORY[0x186E1ACC8](v5);
  v8 = 0LL;
  if ((a2 & 1) != 0) {
    v10 = v9;
  }
  else {
    v10 = 0LL;
  }
  if (v9 > 0) {
    goto LABEL_10;
  }
LABEL_14:
  if (v10 <= v9) {
    v12 = v9;
  }
  else {
    v12 = v10;
  }
  result = MEMORY[0x186E1ACC8](*(void *)(v6 + 16));
  if (result <= v12) {
    v13 = v12;
  }
  else {
    v13 = result;
  }
  if (v13 < v8)
  {
    if (v10 <= v13) {
      v11 = v13;
    }
    else {
      v11 = v10;
    }
LABEL_24:
    v14 = specialized static _HashTable.create<A>(uncheckedUniqueElements:scale:reservedScale:)(v6, v11, 0, v10);
    result = swift_release();
    *v3 = v14;
    return result;
  }

  if (!v7 || (result = swift_isUniquelyReferenced_native(), (_DWORD)result))
  {
    v15 = *v3;
    if (*v3) {
      goto LABEL_29;
    }
LABEL_33:
    if (!v10) {
      return result;
    }
    __break(1u);
    goto LABEL_35;
  }

  result = *v3;
  if (!*v3)
  {
LABEL_36:
    __break(1u);
    return result;
  }

  v15 = _HashTable.copy()();
  result = swift_release();
  *v3 = v15;
  if (!v15) {
    goto LABEL_33;
  }
LABEL_29:
  if ((*(void *)(v15 + 24) & 0x3FLL) != v10) {
    *(void *)(v15 + 24) = *(void *)(v15 + 24) & 0xFFFFFFFFFFFFFFC0LL | v10 & 0x3F;
  }
  return result;
}

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

  *a2 = result;
  return result;
}

  v22 = 0LL;
  if (v21)
  {
LABEL_16:
    v23 = (void *)String._bridgeToObjectiveCImpl()();
    swift_bridgeObjectRelease();
    goto LABEL_17;
  }

    v95 = a11;
    v96 = a12;
    LODWORD(v29) = MEMORY[0x186E1B0E8]();
    v31 = *a5;
    v30 = a5[1];
    swift_bridgeObjectRetain();
    cleanupTemporaryDirectory(at:)(v31, v30);
    swift_bridgeObjectRelease();
    if ((a10 & 1) == 0)
    {
      v32 = 4LL;
      switch((int)v29)
      {
        case 1:
        case 13:
          v32 = 513LL;
          goto LABEL_27;
        case 2:
          goto LABEL_27;
        case 3:
        case 4:
        case 5:
        case 6:
        case 7:
        case 8:
        case 9:
        case 10:
        case 11:
        case 12:
        case 14:
        case 15:
        case 16:
        case 18:
        case 19:
        case 20:
        case 21:
        case 22:
        case 23:
        case 24:
        case 25:
        case 26:
        case 27:
        case 29:
        case 31:
        case 32:
        case 33:
        case 34:
        case 35:
        case 36:
        case 37:
        case 38:
        case 39:
        case 40:
        case 41:
        case 42:
        case 43:
        case 44:
        case 45:
        case 46:
        case 47:
        case 48:
        case 49:
        case 50:
        case 51:
        case 52:
        case 53:
        case 54:
        case 55:
        case 56:
        case 57:
        case 58:
        case 59:
        case 60:
        case 61:
        case 62:
        case 64:
        case 65:
        case 66:
        case 67:
        case 68:
          goto LABEL_22;
        case 17:
          v32 = 516LL;
          goto LABEL_27;
        case 28:
        case 69:
          v32 = 640LL;
          goto LABEL_27;
        case 30:
          v32 = 642LL;
          goto LABEL_27;
        case 63:
          v32 = 514LL;
          goto LABEL_27;
        default:
          if ((_DWORD)v29 == 102)
          {
            v34 = 0LL;
            v32 = 512LL;
LABEL_32:
            swift_bridgeObjectRetain();
            outlined copy of PathOrURL((void *)a6, a7, (uint64_t)a8, 0);
            specialized CocoaError.init<A>(_:path:underlying:variant:source:destination:)( (uint64_t (*)(void))v32,  a6,  a7,  v34,  v95,  v96,  0LL,  0LL,  &v99,  0LL,  0LL,  (void (*)(uint64_t))lazy protocol witness table accessor for type POSIXError and conformance POSIXError,  (uint64_t)&type metadata for POSIXError,  (uint64_t (*)(void *))closure #1 in Sequence<>.contains(_:)specialized partial apply,  (uint64_t (*)(void *))partial apply for specialized closure #1 in Sequence<>.contains(_:),  (void *(*)(void *__return_ptr, void *, uint64_t))_sSy10FoundationE21addingPercentEncoding33_A90579D1FA072CB135F95EF00BA46450LL15forURLComponentSSAA0M3SetACLLV_tFSSSRys5UInt8VGXEfU_SS_TG5TA_0,  (void *(*)(void *__return_ptr, void, void))_sSy10FoundationE21addingPercentEncoding33_A90579D1FA072CB135F95EF00BA46450LL15forURLComponentSSAA0M3SetACLLV_tFSSSRys5UInt8VGXEfU_Ss_TG5TA_0,  (uint64_t (*)(void))partial apply for closure #1 in static UIDNAHookICU.IDNACodedHostUTF16(_:encodeToASCII:),  partial apply for closure #2 in static UIDNAHookICU.IDNACodedHostUTF16(_:encodeToASCII:),  (uint64_t)closure #1 in StringProtocol.removingURLPercentEncoding(excluding:)specialized partial apply,  (uint64_t (*)(void))closure #1 in static UIDNAHookICU.IDNACodedHostUTF16(_:encodeToASCII:)partial apply,  (uint64_t (*)(uint64_t, void))closure #2 in static UIDNAHookICU.IDNACodedHostUTF16(_:encodeToASCII:)partial apply);
            return swift_willThrow();
          }

  *(_OWORD *)(v5 + 16) = 0u;
  v49[0] = 0u;
LABEL_11:
  outlined init with take of LocalePreferences?( (uint64_t)v49,  (uint64_t)&v50,  &demangling cache variable for type metadata for Any?);
  if (*((void *)&v51[0] + 1))
  {
    if ((swift_dynamicCast() & 1) != 0)
    {
      v10 = v47;
      uint64_t v9 = v48;
      v24 = one-time initialization token for cache;
      swift_bridgeObjectRetain();
      if (v24 == -1)
      {
LABEL_14:
        v25 = static LocaleCache.cache + 16;
        v26 = (os_unfair_lock_s *)(static LocaleCache.cache + 124);
        swift_retain_n();
        os_unfair_lock_lock(v26);
        closure #1 in LocaleCache.fixed(_:)(v25, v10, v9, &v50);
        os_unfair_lock_unlock(v26);
        swift_bridgeObjectRelease();
        swift_release_n();
        *(_OWORD *)((char *)v4 + OBJC_IVAR____NSSwiftLocale_locale) = v50;
        LOBYTE(v25) = specialized static Locale.identifierDoesNotRequireSpecialCaseHandling(_:)();
        swift_bridgeObjectRelease();
        *((_BYTE *)v1 + v3) = v25 & 1;

        v27 = String._bridgeToObjectiveCImpl()();
        v46.receiver = v4;
        v46.super_class = (Class)type metadata accessor for _NSSwiftLocale();
        v28 = objc_msgSendSuper2(&v46, sel_initWithLocaleIdentifier_, v27);
        swift_unknownObjectRelease();

        return (uint64_t)v28;
      }

    v13 = *(void *)a1;
    if (*(void *)a1 > 0x7FFuLL) {
      goto LABEL_13;
    }
    if (v13 == 512)
    {
      swift_getKeyPath();
      v82 = dispatch thunk of AnyKeyPath._storedInlineOffset.getter();
      swift_release();
      v15 = (unsigned int *)(*(void *)(a1 + v82) + 20LL);
      goto LABEL_14;
    }

    if (!v13)
    {
LABEL_13:
      swift_getKeyPath();
      v14 = dispatch thunk of AnyKeyPath._storedInlineOffset.getter();
      swift_release();
      v15 = (unsigned int *)(*(void *)(a1 + v14) + 36LL);
LABEL_14:
      v16 = *v15;
      goto LABEL_15;
    }

    v83 = static Metadata.Kind.tuple.getter();
    v16 = 0LL;
    if (v83 <= 0x7FF && v83 == v13)
    {
      MEMORY[0x186E1AB6C](a1);
      v16 = TupleMetadata.Elements.endIndex.getter();
      if (TupleMetadata.Elements.endIndex.getter() < 0) {
        goto LABEL_260;
      }
      v84 = TupleMetadata.Elements.endIndex.getter();
      if (v16 < 0 || v84 < v16) {
        goto LABEL_261;
      }
    }

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

  v3[3] = a2 + 1;
  v11 = v14[1];
  v12 = v14[2];
  *v5 = v14[0];
  v5[1] = v11;
  v5[2] = v12;
  if ((v6 & 0x100) == 0) {
    return v16;
  }
  swift_unknownObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v13 = specialized Rope._endPath.getter(v7);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();
  return v13;
}

  __break(1u);
  return result;
}

      _StringGuts.grow(_:)(40LL);
      swift_bridgeObjectRelease();
      v15._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v15);
      swift_bridgeObjectRelease();
      type metadata accessor for DecodingError();
      swift_allocError();
      static DecodingError._dataCorrupted<A>(_:for:_:)(0xD000000000000026LL, 0x80000001839CA140LL, a3, a4, a5, a6, v16);
      swift_bridgeObjectRelease();
      swift_willThrow();
    }
  }

    if (a8 == -1)
    {
      _CodingPathNode.path.getter(a4);
    }

    else
    {
      v35 = (uint64_t *)a7;
      outlined copy of _CodingKey(a5, a6, a7, a8);
      v27 = _CodingPathNode.path.getter(a4);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CodingKey>);
      v28 = swift_initStackObject();
      *(_OWORD *)(v28 + 16) = xmmword_183720D90;
      *(void *)(v28 + 56) = &type metadata for _CodingKey;
      *(void *)(v28 + 64) = lazy protocol witness table accessor for type _CodingKey and conformance _CodingKey();
      v29 = swift_allocObject();
      *(void *)(v28 + 32) = v29;
      *(void *)(v29 + 16) = a5;
      *(void *)(v29 + 24) = a6;
      *(void *)(v29 + 32) = v35;
      *(_BYTE *)(v29 + 40) = a8;
      v36[0] = v27;
      specialized Array.append<A>(contentsOf:)(v28);
    }

    type metadata accessor for DecodingError();
    swift_allocError();
    JSONDecoderImpl.createTypeMismatchError(type:for:value:)(MEMORY[0x189617FA8], a3, v30);
    swift_bridgeObjectRelease();
    return swift_willThrow();
  }

  if (a3 > 0x1Fu) {
    goto LABEL_10;
  }
  v35 = &v34;
  MEMORY[0x1895F8858](a1);
  v25 = *(void *)(*(void *)(v10 + 32) + 24LL);
  swift_retain();
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v25 + 40));
  specialized closure #1 in XMLPlistMap.withBuffer<A>(for:perform:)( (void *)(v25 + 16),  (void *(*)(void *__return_ptr, uint64_t, uint64_t))partial apply for closure #1 in JSONDecoderImpl.unwrapString<A>(from:for:_:),  a1,  a2,  v36);
  os_unfair_lock_unlock((os_unfair_lock_t)(v25 + 40));
  swift_release();
  result = swift_release();
  if (!v9) {
    return v36[0];
  }
  return result;
}

  v52 = v18;
  v28[8] = v33;
  v34 = *(void **)(a5 + 40);
  v51 = v10;
  v35 = *(void *)(a5 + 64);
  v36 = *(void *)(a5 + 80);
  v37 = *(void *)(a5 + 88);
  v45 = *(void *)(a5 + 72);
  v43 = *(void *)(a5 + 48);
  v44 = *(void *)(a5 + 104);
  v57 = *(void *)(a5 + 112);
  v38 = *(void *)(a5 + 128);
  v46 = *(void *)(a5 + 120);
  v47 = *(void *)(a5 + 96);
  v39 = *(void *)(a5 + 144);
  v48 = *(void *)(a5 + 136);
  v49 = *(_BYTE *)(a5 + 152);
  v50 = v11;
  v40 = *(_BYTE *)(a5 + 56);
  type metadata accessor for JSONDecoderImpl();
  a5 = swift_allocObject();
  *(void *)(a5 + 160) = v28;
  *(void *)(a5 + 24) = v27;
  *(void *)(a5 + 32) = v55;
  *(void *)(a5 + 40) = v34;
  *(void *)(a5 + 48) = v43;
  *(_BYTE *)(a5 + 56) = v40;
  *(void *)(a5 + 64) = v35;
  *(void *)(a5 + 72) = v45;
  *(void *)(a5 + 80) = v36;
  *(void *)(a5 + 88) = v37;
  *(void *)(a5 + 96) = v47;
  *(void *)(a5 + 104) = v44;
  *(void *)(a5 + 112) = v57;
  *(void *)(a5 + 120) = v46;
  *(void *)(a5 + 128) = v38;
  *(void *)(a5 + 136) = v48;
  *(void *)(a5 + 144) = v39;
  *(_BYTE *)(a5 + 152) = v49;
  outlined copy of _CodingKey(v59, v58, v50, v51);
  swift_bridgeObjectRetain();
  swift_retain();
  outlined copy of JSONEncoder.DateEncodingStrategy(v34, v43, v40);
  outlined copy of JSONEncoder.KeyEncodingStrategy(v35);
  outlined copy of JSONEncoder.NonConformingFloatEncodingStrategy(v36, v37);
  outlined copy of JSONEncoder.KeyEncodingStrategy(v38);
  swift_bridgeObjectRetain();
  v32 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  1LL,  1,  MEMORY[0x18961AFE8]);
  v27 = v32[2];
  v33 = v32[3];
  v31 = v27 + 1;
  if (v27 >= v33 >> 1) {
LABEL_14:
  }
    v32 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (void *)(v33 > 1),  v31,  1,  v32);
  v32[2] = v31;
  v41 = &v32[3 * v27];
  v41[4] = v52;
  v41[5] = v54;
  *((_BYTE *)v41 + 48) = v53;
  *(void *)(a5 + 16) = v32;
  return a5;
}

    __break(1u);
  }

  __break(1u);
}

    __break(1u);
  }

  __break(1u);
  return result;
}

    __break(1u);
  }

  __break(1u);
  return result;
}

    __break(1u);
  }

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

  *a3 = __src;
  a3[1] = v7;
  return __src;
}

    *a3 = 0LL;
    a3[1] = 0LL;
    goto LABEL_11;
  }

  v6 = specialized static RFC3986Parser.parse(urlString:encodingInvalidCharacters:)(a1, a2, 1);
  if (!v6) {
    goto LABEL_10;
  }
  uint64_t v7 = v6;
  v8 = swift_retain();
  uint64_t v9 = specialized static URL._cfURL(from:baseURL:)(v8);
  swift_release();
LABEL_9:
  *a3 = v9;
  a3[1] = v7;
LABEL_11:
  a3[2] = 0LL;
}

            if (4 * v8 == v11 >> 14) {
              goto LABEL_59;
            }
            break;
        }
      }
    }

    *a4 = 0LL;
    a4[1] = 0LL;
    goto LABEL_11;
  }

  v8 = specialized static RFC3986Parser.parse(urlString:encodingInvalidCharacters:)(a1, a2, a3 & 1);
  if (!v8) {
    goto LABEL_10;
  }
  uint64_t v9 = v8;
  v10 = swift_retain();
  v11 = specialized static URL._cfURL(from:baseURL:)(v10);
  swift_release();
LABEL_9:
  *a4 = v11;
  a4[1] = v9;
LABEL_11:
  a4[2] = 0LL;
}

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

  v15 = v10;
  swift_retain();
  swift_retain();
  if (_foundation_swift_url_feature_enabled())
  {
    v125 = v9;
    v116 = v15;
    swift_retain();
    swift_retain();
    v16 = URL.path(percentEncoded:)(1);
    v17 = v16._countAndFlagsBits;
    v124 = v16;
    swift_bridgeObjectRetain();
    v117 = v6;
    v118 = v15;
    if (String.count.getter() <= 1)
    {
      v18 = (unint64_t)v16._object;
    }

    else
    {
      v18 = (unint64_t)v16._object;
      if ((specialized BidirectionalCollection.last.getter(v16._countAndFlagsBits, (unint64_t)v16._object) & 0x1FF) == 0x2F)
      {
        specialized RangeReplaceableCollection<>.popLast()();
        swift_bridgeObjectRelease();
        v17 = v124._countAndFlagsBits;
        v18 = (unint64_t)v124._object;
      }
    }

    v122._countAndFlagsBits = Set.init(minimumCapacity:)();
    v55 = specialized Set._Variant.insert(_:)(&v123, 0x2FuLL);
    v56 = v122._countAndFlagsBits;
    v57 = HIBYTE(v18) & 0xF;
    if ((v18 & 0x2000000000000000LL) == 0) {
      v57 = v17 & 0xFFFFFFFFFFFFLL;
    }
    if (v57)
    {
      v122._countAndFlagsBits = v17;
      v122._object = (void *)v18;
      MEMORY[0x1895F8858](v55);
      v114 = (uint64_t)&v122;
      v115 = v56;
      swift_bridgeObjectRetain();
      v58 = specialized String.UTF8View.withContiguousStorageIfAvailable<A>(_:)( (void *(*)(__int128 *__return_ptr, void *, uint64_t))closure #1 in StringProtocol.removingURLPercentEncoding(excluding:)specialized partial apply,  (uint64_t)v113,  v17,  v18);
      v119 = v4;
      if (v59 == 1)
      {
        v61 = (unint64_t)v122._object;
        v60 = v122._countAndFlagsBits;
        swift_bridgeObjectRetain();
        v62 = (uint64_t)specialized StringProtocol.removingURLPercentEncoding<A>(utf8Buffer:excluding:)(v60, v61, v56);
        v64 = v63;
        swift_bridgeObjectRelease();
      }

      else
      {
        v62 = (uint64_t)v58;
        v64 = v59;
      }

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v15 = v118;
      v6 = v119;
      if (!v64)
      {
        swift_release();
        swift_release();
        v73 = v116;

        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v62 = 0LL;
        v64 = 0xE000000000000000LL;
        goto LABEL_56;
      }
    }

    else
    {
      v6 = v4;
      swift_bridgeObjectRelease();
      v62 = 0LL;
      v64 = 0xE000000000000000LL;
      v15 = v118;
    }

    swift_release();
    swift_release();
    v73 = v116;

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
LABEL_56:
    swift_release();
    swift_release();

    v69 = v120;
    v4 = v6;
    LOBYTE(v6) = v117;
    goto LABEL_57;
  }

  v37 = objc_msgSend(v15, sel__parameterString);
  if (v37)
  {
    v38 = v37;
    v39 = static String._unconditionallyBridgeFromObjectiveC(_:)(v37);
    v41 = v40;

    if (getEnumTag for _DarwinSearchPathsSequence.Iterator.State()
      && (v42 = objc_msgSend(v15, sel_path)) != 0)
    {
      v43 = v42;
      v118 = v15;
      v44 = static String._unconditionallyBridgeFromObjectiveC(_:)(v42);
      v46 = v45;

      v124._countAndFlagsBits = (uint64_t)v44;
      v124._object = v46;
      swift_bridgeObjectRetain();
      v47._countAndFlagsBits = 59LL;
      v47._object = (void *)0xE100000000000000LL;
      String.append(_:)(v47);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRetain();
      v48._countAndFlagsBits = (uint64_t)v39;
      v48._object = v41;
      String.append(_:)(v48);
      swift_release();
      swift_release();

      swift_bridgeObjectRelease();
      v15 = v118;
    }

    else
    {
      v124._countAndFlagsBits = 59LL;
      v124._object = (void *)0xE100000000000000LL;
      v68._countAndFlagsBits = (uint64_t)v39;
      v68._object = v41;
      String.append(_:)(v68);
      swift_release();
      swift_release();
    }

    swift_bridgeObjectRelease();
    v62 = v124._countAndFlagsBits;
    v64 = (unint64_t)v124._object;
    v69 = v120;
  }

  else
  {
    v70 = objc_msgSend(v15, sel_path);
    if (v70)
    {
      v71 = v70;
      v62 = (uint64_t)static String._unconditionallyBridgeFromObjectiveC(_:)(v70);
      v64 = v72;
      swift_release();
      swift_release();
    }

    else
    {
      swift_release();
      swift_release();

      v62 = 0LL;
      v64 = 0xE000000000000000LL;
    }

    v69 = v120;
  }

    if ([v5 partOfSpeech]) {
      goto LABEL_12;
    }
    goto LABEL_11;
  }

  return result;
}

  memmove((void *)a3, v10, a4);
}

      [v5 appendString:@"w"];
      goto LABEL_11;
    }

  if (softLinkUTTypeConformsTo((uint64_t)self->_sharedContentType, (uint64_t)@"public.presentation")
    || -[NSString isEqualToString:](self->_sharedContentType, "isEqualToString:", @"key"))
  {
    v6 = @"Presentation";
    goto LABEL_13;
  }

  if (softLinkUTTypeConformsTo((uint64_t)self->_sharedContentType, (uint64_t)@"public.spreadsheet")
    || -[NSString isEqualToString:](self->_sharedContentType, "isEqualToString:", @"numbers"))
  {
    v6 = @"Spreadsheet";
    goto LABEL_13;
  }

  if (softLinkUTTypeConformsTo((uint64_t)self->_sharedContentType, (uint64_t)@"com.apple.notes.note"))
  {
    v6 = @"Note";
    goto LABEL_13;
  }

  if (softLinkUTTypeConformsTo( (uint64_t)self->_sharedContentType,  (uint64_t)@"com.apple.iwork.pages.pages")
    || -[NSString isEqualToString:](self->_sharedContentType, "isEqualToString:", @"pages"))
  {
    v6 = @"Document";
    goto LABEL_13;
  }

  return v4;
}

  ++*(void *)(*(void *)(result[5] + 8LL) + 24LL);
  return result;
}

      objc_msgSend( (id)a1,  "__failWithExceptionName:errorCode:format:",  @"NSArchiverArchiveInconsistency",  4864,  v14,  v48,  v49,  v50);
      goto LABEL_11;
    }

    goto LABEL_50;
  }

  v18 = atomic_load((unint64_t *)(a1 + 16));
  if ((v18 & 4) != 0
    && (-[NSKeyedUnarchiver _validatePropertyListClass:forKey:]( a1,  (objc_class *)[v17 classForCoder],  (uint64_t)a2) & 1) == 0)
  {
    goto LABEL_11;
  }

  *a3 = v17;
  return 1LL;
}

  uint64_t v7 = v4;
  -[NSRecursiveLock unlock](self->_lock, "unlock");
  return (NSString *)v4;
}

  v12 = (__objc2_class *)MEMORY[0x186E1FF60]();
  v14 = atomic_load((unsigned __int8 *)&self->_iop.__isCancelled);
  if ((v14 & 1) != 0) {
    goto LABEL_27;
  }
  if (atomic_load(&self->_iop.__isExecutingObserverCount))
  {
    v41[0] = MEMORY[0x1895F87A8];
    v41[1] = 3221225472LL;
    v41[2] = __iop_start_block_invoke;
    v41[3] = &__block_descriptor_40_e5_v8__0l;
    v41[4] = p_iop;
    -[NSOperation _changeValueForKeys:count:maybeOldValuesDict:maybeNewValuesDict:usingBlock:]( self,  "_changeValueForKeys:count:maybeOldValuesDict:maybeNewValuesDict:usingBlock:",  _NSOperationExecutingKeys,  1LL,  0LL,  0LL,  v41);
  }

  else
  {
    atomic_store(0xE0u, &self->_iop.__state);
    +[__NSOperationInternalObserver _observeValueForKeyPath:ofObject:changeKind:oldValue:newValue:indexes:context:]( &OBJC_CLASS_____NSOperationInternalObserver,  "_observeValueForKeyPath:ofObject:changeKind:oldValue:newValue:indexes:context:",  @"isExecuting",  self,  0LL,  0LL,  0LL,  0LL,  0LL);
  }

  thread_prio = self->_iop.__thread_prio;
  v4 = &off_189C61000;
  if (thread_prio == 0.5)
  {
    v5 = 0.0;
  }

  else
  {
    +[NSThread threadPriority](&OBJC_CLASS___NSThread, "threadPriority");
    v5 = v16;
    +[NSThread setThreadPriority:](&OBJC_CLASS___NSThread, "setThreadPriority:", self->_iop.__thread_prio);
  }

  os_unfair_lock_lock(&self->_iop.__lock);
  v2 = self->_iop.__queue;
  os_unfair_lock_unlock(&self->_iop.__lock);
  if (v2
    && object_getClass(self) != (Class)&OBJC_CLASS____NSBarrierOperation
    && (v17 = atomic_load(&v2->_iqp.__progressReporting)) != 0)
  {
    os_unfair_lock_lock(&v2->_iqp.__queueLock);
    progress = v2->_iqp._progress;
    if (!progress)
    {
      progress = (_NSOperationQueueProgress *)-[_NSOperationQueueProgress initWithQueue:]( objc_alloc(&OBJC_CLASS____NSOperationQueueProgress),  (uint64_t)v2);
      v2->_iqp._progress = progress;
    }

    os_unfair_lock_unlock(&v2->_iqp.__queueLock);
    v3 = -[NSProgress initWithParent:userInfo:]( objc_alloc(&OBJC_CLASS___NSProgress),  "initWithParent:userInfo:",  0LL,  0LL);
    -[NSProgress setTotalUnitCount:](v3, "setTotalUnitCount:", 1LL);
    -[NSProgress addChild:withPendingUnitCount:](progress, "addChild:withPendingUnitCount:", v3, 1LL);
  }

  else
  {
    v3 = 0LL;
  }

  -[NSProgress becomeCurrentWithPendingUnitCount:](v3, "becomeCurrentWithPendingUnitCount:", 1LL);
  _CFExecutableLinkedOnOrAfter();
  __NSOPERATION_IS_INVOKING_MAIN__(self);
LABEL_25:
  -[NSProgress resignCurrent](v3, "resignCurrent");

  if (thread_prio != 0.5) {
    [v4[456] setThreadPriority:v5];
  }
LABEL_27:
  v19 = atomic_load(p_state);
  if (v19 != 224)
  {
    if (atomic_load(&self->_iop.__isFinishedObserverCount))
    {
      v36 = MEMORY[0x1895F87A8];
      v37 = 3221225472LL;
      v38 = __iop_start_block_invoke_3;
      v39 = &__block_descriptor_40_e5_v8__0l;
      v40 = p_iop;
      -[NSOperation _changeValueForKeys:count:maybeOldValuesDict:maybeNewValuesDict:usingBlock:]( self,  "_changeValueForKeys:count:maybeOldValuesDict:maybeNewValuesDict:usingBlock:",  &_NSOperationFinishedKeys,  1LL,  0LL,  0LL,  &v36);
    }

    else
    {
      atomic_store(0xF0u, &self->_iop.__state);
      +[__NSOperationInternalObserver _observeValueForKeyPath:ofObject:changeKind:oldValue:newValue:indexes:context:]( &OBJC_CLASS_____NSOperationInternalObserver,  "_observeValueForKeyPath:ofObject:changeKind:oldValue:newValue:indexes:context:",  @"isFinished",  self,  0LL,  0LL,  0LL,  0LL,  0LL);
    }

    goto LABEL_51;
  }

  v20 = 0;
  v21 = 0LL;
  v22 = 1;
  v23 = 1;
  do
  {
    while (1)
    {
      while (1)
      {
        v24 = v20;
        v25 = v23;
        v26 = v22;
        v27 = _NSOperationExecutingAndFinishedKeys[v21];
        if (v27 != @"isReady") {
          break;
        }
        v23 = 0;
        v28 = atomic_load(&self->_iop.__isReadyObserverCount);
        v29 = v20 | (v28 != 0);
        v20 = 1;
        v22 = v25;
        v21 = 1LL;
        if ((v29 & 1) != 0) {
          goto LABEL_41;
        }
      }

      if (v27 != @"isFinished") {
        break;
      }
      v23 = 0;
      p_isFinishedObserverCount = &self->_iop.__isFinishedObserverCount;
LABEL_40:
      v28 = atomic_load(p_isFinishedObserverCount);
      v31 = v20 | (v28 != 0);
      v21 = 1LL;
      v22 = v25;
      v20 = 1;
      if ((v31 & 1) != 0)
      {
LABEL_41:
        if (v28) {
          v32 = v26;
        }
        else {
          v32 = v25;
        }
        if ((v32 & 1) != 0) {
          goto LABEL_45;
        }
        goto LABEL_50;
      }
    }

    if (v27 == @"isExecuting")
    {
      v23 = 0;
      p_isFinishedObserverCount = &self->_iop.__isExecutingObserverCount;
      goto LABEL_40;
    }

    if (v27 == @"isCancelled")
    {
      v23 = 0;
      p_isFinishedObserverCount = &self->_iop.__isCancelledObserverCount;
      goto LABEL_40;
    }

    v23 = 0;
    v21 = 1LL;
    v22 = v25;
    v20 = 1;
  }

  while ((v24 & 1) == 0);
  if ((v25 & 1) != 0)
  {
LABEL_45:
    v36 = MEMORY[0x1895F87A8];
    v37 = 3221225472LL;
    v38 = __iop_start_block_invoke_2;
    v39 = &__block_descriptor_40_e5_v8__0l;
    v40 = p_iop;
    -[NSOperation _changeValueForKeys:count:maybeOldValuesDict:maybeNewValuesDict:usingBlock:]( self,  "_changeValueForKeys:count:maybeOldValuesDict:maybeNewValuesDict:usingBlock:",  _NSOperationExecutingAndFinishedKeys,  2LL,  0LL,  0LL,  &v36);
    goto LABEL_51;
  }

    v21.receiver = self;
    v21.super_class = (Class)&OBJC_CLASS___NSOperationQueue;
    -[NSOperationQueue addObserver:forKeyPath:options:context:]( &v21,  sel_addObserver_forKeyPath_options_context_,  a3,  a4,  a5,  a6);
    return;
  }

  p_operationsObserverCount = &self->_iqp.__operationsObserverCount;
  do
    v12 = __ldaxr(p_operationsObserverCount);
  while (__stlxr(v12 + 1, p_operationsObserverCount));
  if (v12 != 255) {
    goto LABEL_10;
  }
  atomic_store(0xFFu, p_operationsObserverCount);
  v13 = @"operations";
LABEL_12:
  v16 = +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"added too many observers to an NSOperationQueue for %@",  v13);
  objc_exception_throw((id)[MEMORY[0x189603F70] exceptionWithName:*MEMORY[0x189603A60] reason:v16 userInfo:0]);
  -[NSOperationQueue removeObserver:forKeyPath:](v17, v18, v19, v20);
}

    v13[0] = v8;
  }

  v10 = _NSStartOfPathExtension((uint64_t)v6, v8);
  if (v10 < 1) {
    v11 = (NSString *)&stru_189CA6A28;
  }
  else {
    v11 = +[NSPathStore2 pathStoreWithCharacters:length:]( &OBJC_CLASS___NSPathStore2,  "pathStoreWithCharacters:length:",  &v6[v10 + 1],  v8 + ~v10);
  }
  if (v3 >= 0x101) {
    free(v6);
  }
  return v11;
}

  v10 = _NSStartOfPathExtension((uint64_t)v6, v8);
  if (v10 <= 0) {
    v11 = v8;
  }
  else {
    v11 = v10;
  }
  v12 = +[NSPathStore2 pathStoreWithCharacters:length:]( &OBJC_CLASS___NSPathStore2,  "pathStoreWithCharacters:length:",  v6,  v11);
  if (v3 >= 0x101) {
    free(v6);
  }
  return v12;
}

          v17[0] = v9;
          v17[1] = v8;
          v17[2] = v12;
          if ([(id)qword_18C496B40 indexForBytes:v17 length:3] != 0x7FFFFFFFFFFFFFFFLL) {
            ++a1[16];
          }
          goto LABEL_18;
        }

  [(id)qword_18C497F48 unlock];
  return v7;
}

  *p_ckeys = 0LL;
LABEL_11:

  v9.receiver = self;
  v9.super_class = (Class)&OBJC_CLASS____NSSharedKeySetS;
  -[_NSSharedKeySetS dealloc](&v9, sel_dealloc);
}

        if (++v10 <= v11)
        {
          if (v10 == v11)
          {
            [v6 addObject:v9];
            v10 = v11;
          }
        }

        else
        {
          v6 = (void *)[MEMORY[0x189603FA8] arrayWithObject:v9];
          v11 = v10;
        }
      }

      v8 = [v5 countByEnumeratingWithState:&v22 objects:v21 count:16];
    }

    while (v8);
  }

  return v6;
}

    internal = uregex_open( CharactersPtr,  v11,  (4 * options) & 0x20 | (2 * (options & 3)) | (options >> 1) & 8 | (options >> 5) & 1 | (((options >> 6) & 1) << 8),  &pe,  &status);
    v9->_internal = internal;
    v14 = status > U_ZERO_ERROR;
    goto LABEL_11;
  }

  return v9;
}

    -[objc_class startViewServiceSessionManagerAsPlugin:]( objc_getClass("_UIViewServiceSessionManager"),  "startViewServiceSessionManagerAsPlugin:",  1LL);
    v6 = 0LL;
LABEL_12:
    result = +[_NSExtensionContextVendor _startListening:]( &OBJC_CLASS____NSExtensionContextVendor,  "_startListening:",  v6);
    *(_BYTE *)(*(void *)(v1 + 32) + 8LL) = 1;
  }

  return result;
}

LABEL_88:
    -[NSXPCConnection invalidate](self, "invalidate");
    goto LABEL_85;
  }

  v49 = v33;
  exception_objecta = (_Unwind_Exception *)([v33 numberOfArguments] - 1);
  else {
    v34 = [v33 _isAllObjects];
  }
  -[_NSXPCConnectionRequestedReplies beginTransactionForSequence:selector:reply:withProgress:]( (uint64_t)self->_repliesRequested,  v52,  v66,  a4,  oslog);
  v39 = v34 ^ 1;
  if (exception_objecta) {
    v40 = 1;
  }
  else {
    v40 = v34 ^ 1;
  }
  if ((v40 & 1) == 0)
  {
    v60[0] = MEMORY[0x1895F87A8];
    v60[1] = 3221225472LL;
    v60[2] = __64__NSXPCConnection__decodeAndInvokeMessageWithEvent_reply_flags___block_invoke;
    v60[3] = &unk_189CA5B18;
    v60[5] = a4;
    v60[6] = v63;
    v60[7] = v52;
    v60[8] = v66;
    v60[9] = uint64;
    v60[4] = self;
    v41 = v60;
    goto LABEL_110;
  }

  if (exception_objecta != (_Unwind_Exception *)1) {
    v39 = 1;
  }
  if ((v39 & 1) == 0)
  {
    v59[0] = MEMORY[0x1895F87A8];
    v59[1] = 3221225472LL;
    v59[2] = __64__NSXPCConnection__decodeAndInvokeMessageWithEvent_reply_flags___block_invoke_3;
    v59[3] = &unk_189CA5B40;
    v59[4] = self;
    v59[5] = v13;
    v59[8] = v52;
    v59[9] = v66;
    v59[10] = uint64;
    v59[6] = a4;
    v59[7] = v63;
    v41 = v59;
    goto LABEL_110;
  }

  v42 = v34 ^ 1;
  if (exception_objecta == (_Unwind_Exception *)2) {
    v43 = v34 ^ 1;
  }
  else {
    v43 = 1;
  }
  if ((v43 & 1) == 0)
  {
    v58[0] = MEMORY[0x1895F87A8];
    v58[1] = 3221225472LL;
    v58[2] = __64__NSXPCConnection__decodeAndInvokeMessageWithEvent_reply_flags___block_invoke_5;
    v58[3] = &unk_189CA5B90;
    v58[4] = self;
    v58[5] = v13;
    v58[8] = v52;
    v58[9] = v66;
    v58[10] = uint64;
    v58[6] = a4;
    v58[7] = v63;
    v41 = v58;
    goto LABEL_110;
  }

  if (exception_objecta != (_Unwind_Exception *)3) {
    v42 = 1;
  }
  if ((v42 & 1) != 0)
  {
    [v49 _cTypeString];
    v65 = (id)__NSMakeSpecialForwardingCaptureBlock();
    v47 = v65;
  }

  else
  {
    v57[0] = MEMORY[0x1895F87A8];
    v57[1] = 3221225472LL;
    v57[2] = __64__NSXPCConnection__decodeAndInvokeMessageWithEvent_reply_flags___block_invoke_7;
    v57[3] = &unk_189CA5BE0;
    v57[4] = self;
    v57[5] = v13;
    v57[8] = v52;
    v57[9] = v66;
    v57[10] = uint64;
    v57[6] = a4;
    v57[7] = v63;
    v41 = v57;
LABEL_110:
    v65 = v41;
  }

  if (v62)
  {
    [v62 setArgument:&v65 atIndex:v25 + 2];
  }

  else if (v56)
  {

    v74[v25] = v65;
  }

      swift_bridgeObjectRetain();
      v81 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
LABEL_70:
      if (v89 >= v81)
      {
        outlined consume of JSONEncoder.KeyEncodingStrategy((unint64_t)v92);
        type metadata accessor for JSONReference();
        v27 = swift_allocObject();
        *(void *)(v27 + 16) = MEMORY[0x18961AFF0];
        *(void *)(v27 + 24) = 0LL;
        *(_BYTE *)(v27 + 32) = 4;
        return v27;
      }

      if (*v88 >> 62)
      {
        swift_bridgeObjectRetain();
        v86 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
        if (v86) {
          goto LABEL_73;
        }
      }

      else if (*(void *)((*v88 & 0xFFFFFFFFFFFFF8LL) + 0x10))
      {
LABEL_73:
        v27 = specialized RangeReplaceableCollection<>.popLast()();
        outlined consume of JSONEncoder.KeyEncodingStrategy((unint64_t)v92);
        return v27;
      }

      __break(1u);
      JUMPOUT(0x18300C6DCLL);
    }

    v59 = *(void (**)(char *, char *, uint64_t))(v42 + 32);
    v59(v10, v17, a5);
    v60 = v44;
    v12 = (uint64_t *)swift_allocObject();
    v61 = v93;
    v12[5] = a5;
    v12[6] = v61;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v12 + 2);
    v59((char *)boxed_opaque_existential_1, v10, a5);
    (*(void (**)(char *, uint64_t))(v91 + 8))(v20, v13);
    v12[7] = v60;
    if ((_DWORD)v45)
    {
      v49 = v100;
      v50 = v98;
      if ((_DWORD)v45 != 1)
      {
        v51 = 1LL;
LABEL_58:
        v12[8] = v51;
        v47 = v32[18];
        v48 = v32[19];
        v32[18] = v12;
        goto LABEL_59;
      }

      v63 = (uint64_t *)((v96 & 0x3FFFFFFFFFFFFFFFLL) + 32);
LABEL_57:
      v78 = *v63;
      swift_retain();
      v65 = __OFADD__(v78, 1LL);
      v51 = v78 + 1;
      if (v65)
      {
        __break(1u);
        JUMPOUT(0x18300C328LL);
      }

      goto LABEL_58;
    }

    v73 = v56 + 32;
    if (v68 <= v62) {
      v75 = v62;
    }
    else {
      v75 = v68;
    }
    while (v75 != v68)
    {
      if (v68 >= *(void *)(v58 + 16)) {
        goto LABEL_112;
      }
      v60[v68] = *(_WORD *)(v73 + 2 * v68);
      if ((uint64_t)++v68 >= (uint64_t)v62)
      {
        v66 = 1;
LABEL_95:
        if ((uint64_t)v68 < (uint64_t)v63)
        {
          while (1)
          {
LABEL_96:
            if (v68 >= v63) {
              goto LABEL_155;
            }
            v62 = *(void *)(v58 + 16);
            if (v68 < v62) {
              break;
            }
LABEL_101:
            __break(1u);
LABEL_102:
            v66 = HIWORD(v59);
            v68 = v62;
          }

          v84 = v66 + (*(unsigned __int16 *)(v39 + 32 + 2 * v68) ^ 0xFFFF);
          --v63;
          v62 = v39 + 34;
          while (1)
          {
            v66 = HIWORD(v84);
            v60[v68] = v84;
            if (v63 == v68) {
              break;
            }
            v84 = v66 + (*(unsigned __int16 *)(v62 + 2 * v68++) ^ 0xFFFF);
            if (v68 >= *(void *)(v58 + 16)) {
              goto LABEL_101;
            }
          }
        }

    v92 = v73 + 32;
    if (v87 <= v79) {
      v94 = v79;
    }
    else {
      v94 = v87;
    }
    while (v94 != v87)
    {
      if (v87 >= *(void *)(v76 + 16)) {
        goto LABEL_112;
      }
      v78[v87] = *(_WORD *)(v92 + 2 * v87);
      if ((uint64_t)++v87 >= (uint64_t)v79)
      {
        v83 = 1;
LABEL_95:
        if ((uint64_t)v87 < (uint64_t)v80)
        {
          while (1)
          {
LABEL_96:
            if (v87 >= v80) {
              goto LABEL_158;
            }
            v79 = *(void *)(v76 + 16);
            if (v87 < v79) {
              break;
            }
LABEL_101:
            __break(1u);
LABEL_102:
            v83 = HIWORD(v77);
            v87 = v79;
          }

          v107 = v83 + (*(unsigned __int16 *)(v75 + 32 + 2 * v87) ^ 0xFFFF);
          --v80;
          v79 = v75 + 34;
          while (1)
          {
            v83 = HIWORD(v107);
            v78[v87] = v107;
            if (v80 == v87) {
              break;
            }
            v107 = v83 + (*(unsigned __int16 *)(v79 + 2 * v87++) ^ 0xFFFF);
            if (v87 >= *(void *)(v76 + 16)) {
              goto LABEL_101;
            }
          }
        }

    v92 = v73 + 32;
    if (v87 <= v79) {
      v94 = v79;
    }
    else {
      v94 = v87;
    }
    while (v94 != v87)
    {
      if (v87 >= *(void *)(v76 + 16)) {
        goto LABEL_112;
      }
      v78[v87] = *(_WORD *)(v92 + 2 * v87);
      if ((uint64_t)++v87 >= (uint64_t)v79)
      {
        v83 = 1;
LABEL_95:
        if ((uint64_t)v87 < (uint64_t)v80)
        {
          while (1)
          {
LABEL_96:
            if (v87 >= v80) {
              goto LABEL_158;
            }
            v79 = *(void *)(v76 + 16);
            if (v87 < v79) {
              break;
            }
LABEL_101:
            __break(1u);
LABEL_102:
            v83 = HIWORD(v77);
            v87 = v79;
          }

          v107 = v83 + (*(unsigned __int16 *)(v75 + 32 + 2 * v87) ^ 0xFFFF);
          --v80;
          v79 = v75 + 34;
          while (1)
          {
            v83 = HIWORD(v107);
            v78[v87] = v107;
            if (v80 == v87) {
              break;
            }
            v107 = v83 + (*(unsigned __int16 *)(v79 + 2 * v87++) ^ 0xFFFF);
            if (v87 >= *(void *)(v76 + 16)) {
              goto LABEL_101;
            }
          }
        }

        outlined retain of LocalePreferences?( (uint64_t)v106,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined consume of LocalePreferences?);
        goto LABEL_55;
      }
    }

    else if (!v81)
    {
      goto LABEL_45;
    }

            outlined destroy of Any?( (uint64_t)v252,  &demangling cache variable for type metadata for (Hashable & Sendable)?);
            outlined destroy of Any?( (uint64_t)v253,  &demangling cache variable for type metadata for (Hashable & Sendable)?);
            outlined destroy of AttributedString._AttributeValue((uint64_t)&v218);
            outlined destroy of AttributedString._AttributeValue((uint64_t)v223);
            outlined destroy of Any?( (uint64_t)&v224,  &demangling cache variable for type metadata for AttributedString._AttributeValue?);
            outlined destroy of Any?( (uint64_t)&v230,  &demangling cache variable for type metadata for AttributedString._AttributeValue?);
            result = outlined destroy of Any?( (uint64_t)&v235,  &demangling cache variable for type metadata for AttributedString._AttributeValue?);
            if ((v91 & 1) == 0) {
              goto LABEL_120;
            }
LABEL_89:
            v90 += 2;
            ++v89;
            v85 = v217;
            if (v92 == v63)
            {
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              result = swift_bridgeObjectRelease();
              v111 = v177;
              v185 = v177;
              v23 = v198;
              v64 = v181;
              v65 = v179;
              if (v195 < v186) {
                goto LABEL_64;
              }
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              v112 = v111;
              goto LABEL_121;
            }
          }
        }
      }

      v75 = *(unsigned __int8 *)(v66 + 18);
      v76 = (4 * v75 + 8) & 0x3C;
      v77 = (v64 >> v76) & 0xF;
      *(void *)&v245 = v77;
      v56 = v69;
      if (v75)
      {
        swift_unknownObjectRetain();
        v78 = specialized closure #1 in Rope._Node.formPredecessor(of:)( v66 + 16,  v66 + 24,  (uint64_t *)&v245,  (uint64_t)&v224,  v75);
        result = swift_unknownObjectRelease();
        if ((v78 & 1) != 0)
        {
          if (v224 != v23)
          {
LABEL_194:
            __break(1u);
            goto LABEL_195;
          }

          v74 = v225;
          v65 = v226;
          v63 = v211;
          if (v226) {
            goto LABEL_76;
          }
          goto LABEL_79;
        }
      }

      else if (v77)
      {
        v74 = ((v77 - 1) << v76) | ((-15LL << v76) - 1) & v64;
        v225 = v74;
        v226 = v66;
        v65 = v66;
        if (v66) {
          goto LABEL_76;
        }
LABEL_79:
        swift_unknownObjectRetain();
        v181 = v74;
        v80 = specialized Rope._Node.subscript.getter(v74, v66);
        swift_unknownObjectRelease();
        v179 = 0LL;
        v81 = 1;
        goto LABEL_80;
      }

          Hasher._combine(_:)(1u);
          swift_bridgeObjectRetain();
          specialized Dictionary<>.hash(into:)(a1, v39);
          swift_bridgeObjectRelease();
LABEL_89:
          v75 = v108;
          v76 = v109;
          v78 = v110;
          v77 = v111;
          v79 = v112;
          if (v108)
          {
            Hasher._combine(_:)(1u);
            type metadata accessor for CFDictionaryRef(0LL);
            lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( (unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef,  (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef,  (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
            v80 = v76;
            v81 = v78;
            v82 = v77;
            v83 = v79;
            v84 = v75;
            _CFObject.hash(into:)();
            if (v76) {
              goto LABEL_91;
            }
          }

          else
          {
            Hasher._combine(_:)(0);
            v89 = v79;
            v90 = v76;
            v91 = v78;
            v92 = v77;
            if (v76)
            {
LABEL_91:
              Hasher._combine(_:)(1u);
              type metadata accessor for CFDictionaryRef(0LL);
              lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( (unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef,  (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef,  (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
              v85 = v76;
              _CFObject.hash(into:)();

              if (v78) {
                goto LABEL_92;
              }
              goto LABEL_97;
            }
          }

          Hasher._combine(_:)(0);
          if (v78)
          {
LABEL_92:
            Hasher._combine(_:)(1u);
            type metadata accessor for CFDictionaryRef(0LL);
            lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( (unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef,  (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef,  (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
            v86 = v78;
            _CFObject.hash(into:)();

            if (v77) {
              goto LABEL_93;
            }
            goto LABEL_98;
          }

          Hasher._combine(_:)(1u);
          swift_bridgeObjectRetain();
          specialized Dictionary<>.hash(into:)(a1, v36);
          swift_bridgeObjectRelease();
LABEL_89:
          v76 = v115;
          v75 = v116;
          v78 = v117;
          v77 = v118;
          v79 = v119;
          if (v115)
          {
            Hasher._combine(_:)(1u);
            type metadata accessor for CFDictionaryRef(0LL);
            lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( (unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef,  (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef,  (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
            v80 = v75;
            v81 = v78;
            v82 = v77;
            v83 = v79;
            v84 = v76;
            _CFObject.hash(into:)();
            if (v75) {
              goto LABEL_91;
            }
          }

          else
          {
            Hasher._combine(_:)(0);
            v89 = v79;
            v90 = v75;
            v91 = v78;
            v92 = v77;
            if (v75)
            {
LABEL_91:
              Hasher._combine(_:)(1u);
              type metadata accessor for CFDictionaryRef(0LL);
              lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( (unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef,  (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef,  (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
              v85 = v75;
              _CFObject.hash(into:)();

              if (v78) {
                goto LABEL_92;
              }
              goto LABEL_97;
            }
          }

          Hasher._combine(_:)(0);
          if (v78)
          {
LABEL_92:
            Hasher._combine(_:)(1u);
            type metadata accessor for CFDictionaryRef(0LL);
            lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( (unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef,  (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef,  (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
            v86 = v78;
            _CFObject.hash(into:)();

            if (v77) {
              goto LABEL_93;
            }
            goto LABEL_98;
          }

  __break(1u);
LABEL_89:
  __break(1u);
LABEL_90:
  __break(1u);
LABEL_91:
  __break(1u);
LABEL_92:
  __break(1u);
LABEL_93:
  __break(1u);
LABEL_94:
  __break(1u);
LABEL_95:
  __break(1u);
LABEL_96:
  __break(1u);
LABEL_97:
  __break(1u);
LABEL_98:
  __break(1u);
LABEL_99:
  __break(1u);
LABEL_100:
  __break(1u);
LABEL_101:
  __break(1u);
LABEL_102:
  result.value = v11;
  result.is_nil = v12;
  return result;
}

              v25 = v4 + 2;
              if (v9 == v4 + 2 && a2 == 0x80000001839CFFA0LL
                || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
              {
                result = v38;
                goto LABEL_92;
              }

    if (v3 == v7) {
      return a1 & 1;
    }
    goto LABEL_89;
  }

  if (v3 > 9022)
  {
    if (v3 <= 9584)
    {
      if (v3 == 9023 || v3 == 9134) {
        return a1 & 1;
      }
      uint64_t v7 = 9290;
    }

    else
    {
      uint64_t v7 = 10744;
    }

    goto LABEL_88;
  }

  if (v3 > 8721)
  {
    goto LABEL_89;
  }

  if (v3 == 46)
  {
LABEL_59:
    LOBYTE(a1) = 0;
    return a1 & 1;
  }

  if (v3 == 775)
  {
    if ((v2 & 0x100000000LL) == 0 && ((_DWORD)v2 == 305 || (_DWORD)v2 == 567 || (_DWORD)v2 == 1493)) {
      return a1 & 1;
    }
    goto LABEL_59;
  }
    }

    v69 = MEMORY[0x18961AFF0];
    if (!*(void *)(MEMORY[0x18961AFF0] + 16LL))
    {
LABEL_90:
      v20 = MEMORY[0x18961AFF0];
      goto LABEL_91;
    }

          v59 = (v67 - 1) & v67;
          v65 = __clz(__rbit64(v67)) + (v61 << 6);
        }

        v69 = (uint64_t *)(*(void *)(v9 + 48) + 16 * v65);
        v70 = *v69;
        v71 = v69[1];
        Hasher.init(_seed:)();
        swift_bridgeObjectRetain();
        String.hash(into:)();
        result = Hasher._finalize()();
        v72 = -1LL << *(_BYTE *)(v12 + 32);
        v73 = result & ~v72;
        v74 = v73 >> 6;
        if (((-1LL << v73) & ~*(void *)(v60 + 8 * (v73 >> 6))) != 0)
        {
          v62 = __clz(__rbit64((-1LL << v73) & ~*(void *)(v60 + 8 * (v73 >> 6)))) | v73 & 0x7FFFFFFFFFFFFFC0LL;
          goto LABEL_72;
        }

        v75 = 0;
        v76 = (unint64_t)(63 - v72) >> 6;
        do
        {
          if (++v74 == v76 && (v75 & 1) != 0)
          {
LABEL_119:
            __break(1u);
LABEL_120:
            __break(1u);
LABEL_121:
            __break(1u);
LABEL_122:
            __break(1u);
            goto LABEL_123;
          }

          v77 = v74 == v76;
          if (v74 == v76) {
            v74 = 0LL;
          }
          v75 |= v77;
          v78 = *(void *)(v60 + 8 * v74);
        }

        while (v78 == -1);
        v62 = __clz(__rbit64(~v78)) + (v74 << 6);
LABEL_72:
        *(void *)(v60 + ((v62 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v62;
        v63 = (void *)(*(void *)(v12 + 48) + 16 * v62);
        *v63 = v70;
        v63[1] = v71;
        ++*(void *)(v12 + 16);
      }
    }

LABEL_36:
  _CFGetTSD();
  _CFGetTSD();
  _CFGetTSD();
  _CFSetTSD();
  _CFSetTSD();
  if (a4)
  {
    xpc_retain(a4);
    _CFSetTSD();
  }

  if (oslog) {
    v28 = !v21;
  }
  else {
    v28 = 1;
  }
  if ((v28 & 1) == 0) {
    -[os_log_s becomeCurrentWithPendingUnitCount:](oslog, "becomeCurrentWithPendingUnitCount:", 1LL);
  }
  *(void *)buf = 0LL;
  if (v62)
  {
    [v62 setTarget:v11];
    if ((v55 & 1) != 0)
    {
      [v62 retainArguments];
      [v53 connection:self handleInvocation:v62 isReply:0];
    }

    else
    {
      __NSXPCCONNECTION_IS_CALLING_OUT_TO_REPLY_BLOCK__(v62);
    }
  }

  else
  {
    if (!v56)
    {
      v48 = (void *)[MEMORY[0x189603F70] exceptionWithName:*MEMORY[0x189603A58], +[NSString stringWithFormat:]( NSString, "stringWithFormat:", @"%@: Attempt to dispatch neither invocation nor simple message send.", _NSMethodExceptionProem((objc_class *)self, a2)), 0 reason userInfo];
      objc_exception_throw(v48);
      __break(1u);
      JUMPOUT(0x182EB403CLL);
    }

    switch([v61 numberOfArguments])
    {
      case 2LL:
      case 3LL:
      case 4LL:
      case 5LL:
      case 6LL:
        *(void *)buf = __NSXPCCONNECTION_IS_CALLING_OUT_TO_EXPORTED_OBJECT_S0__(v11, v66);
        break;
      default:
        break;
    }
  }

  if (oslog) {
    v36 = v21;
  }
  else {
    v36 = 1;
  }
  if ((v36 & 1) == 0)
  {
    if (!v56) {
      [v62 getReturnValue:buf];
    }
    if (*(void *)buf && (objc_opt_isKindOfClass() & 1) != 0)
    {
      if (([*(id *)buf isCancellable] & 1) == 0) {
        -[os_log_s setCancellable:](oslog, "setCancellable:", 0LL);
      }
      -[os_log_s addChild:withPendingUnitCount:](oslog, "addChild:withPendingUnitCount:", *(void *)buf, 1LL);
    }
  }

  if ((v28 & 1) == 0) {
    -[os_log_s resignCurrent](oslog, "resignCurrent");
  }

  _CFSetTSD();
  if (a4) {
    xpc_release(a4);
  }
  if (v56)
  {
    for (i = 0LL; i != 4; ++i)
  }

  _CFSetTSD();
  _CFSetTSD();
LABEL_85:
  _Block_object_dispose(v63, 8);
}

  v38 = 0LL;
LABEL_46:
  _Block_object_dispose(&v53, 8);
  _Block_object_dispose(&v57, 8);
  return v38;
}

            v6 = *(void *)(a1 + 16);
            uint64_t v7 = *(void *)(a1 + 24);
            if (v6 <= v7) {
              goto LABEL_16;
            }
            break;
        }
      }
    }

    v8 = *(void *)a1;
    do
    {
      uint64_t v9 = *(unsigned __int8 *)(v8 + v7);
      if (v9 > 0xC)
      {
        if (v9 != 32)
        {
          if (v9 != 13) {
            return 1LL;
          }
          v10 = v7 + 1;
          *(void *)(a1 + 24) = v7 + 1;
          if (v6 > v7 + 1 && *(_BYTE *)(v8 + v10) == 10)
          {
            v10 = v7 + 2;
            *(void *)(a1 + 24) = v7 + 2;
          }

          ++*(void *)(a1 + 40);
          *(void *)(a1 + 48) = v10;
          uint64_t v7 = v10;
          continue;
        }
      }

      else if (v9 != 9)
      {
        if (v9 != 10) {
          return 1LL;
        }
        *(void *)(a1 + 24) = ++v7;
        ++*(void *)(a1 + 40);
        *(void *)(a1 + 48) = v7;
        continue;
      }

      *(void *)(a1 + 24) = ++v7;
    }

    while (v6 > v7);
  }

            __break(1u);
LABEL_37:
            __break(1u);
            return result;
          }

  Hasher._combine(_:)(0);
  if (!v21) {
    goto LABEL_37;
  }
LABEL_32:
  Hasher._combine(_:)(1u);
  type metadata accessor for CFDictionaryRef(0LL);
  lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( (unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef,  (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef,  (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
  v31 = v21;
  _CFObject.hash(into:)();

  if (v23)
  {
LABEL_33:
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0LL);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( (unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef,  (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef,  (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
    v32 = v23;
    _CFObject.hash(into:)();

    goto LABEL_39;
  }

  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

  swift_bridgeObjectRelease();
LABEL_37:
  lazy protocol witness table accessor for type URLComponents.InvalidComponentError and conformance URLComponents.InvalidComponentError();
  v31 = (void *)swift_allocError();
  *v32 = 7;
  v2 = v31;
  swift_willThrow();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();

  swift_bridgeObjectRelease();
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
LABEL_38:
  v42 = v8;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
  lazy protocol witness table accessor for type [String] and conformance [A]( (unint64_t *)&lazy protocol witness table cache variable for type [String] and conformance [A],  &demangling cache variable for type metadata for [String],  MEMORY[0x189618458]);
  v33 = BidirectionalCollection<>.joined(separator:)();
  v35 = v34;
  swift_release();
  swift_bridgeObjectRelease();
  v2[15] = v33;
  v2[16] = v35;
  return result;
}

  objc_msgSend(v8, sel_setWeekOfYear_, v31);
  if ((v47 & 1) != 0)
  {
LABEL_19:
    if ((v32 & 1) != 0) {
      goto LABEL_20;
    }
    goto LABEL_38;
  }

  __break(1u);
  return result;
}

        goto LABEL_39;
      }

      if (v6 >= 0x10000)
      {
        while (v4 + 1 < *(void *)(v13 + 16))
        {
          v16 = *(unsigned __int16 *)(a1 + 34 + 2 * v4);
          *(_WORD *)(v13 + 2 * v4 + 34) = v16 + 1;
          if (v7 - 2 == v4)
          {
            v5 = (v16 + 1) >> 16;
            v22 = v13;
            a4 = v7;
            goto LABEL_49;
          }

          ++v4;
          if (v16 != 0xFFFF)
          {
            v22 = v13;
            a4 = v4 + 1;
            goto LABEL_18;
          }
        }

        goto LABEL_60;
      }

    specialized _NativeDictionary._insert(at:key:value:)(v2, 4LL, v238, v241, (void *)v3);
LABEL_37:
    v242 = v3;
    swift_bridgeObjectRelease();
    if (v18 < 2) {
      goto LABEL_14;
    }
LABEL_38:
    swift_bridgeObjectRetain();
    LOBYTE(v4) = swift_isUniquelyReferenced_nonNull_native();
    v2 = specialized __RawDictionaryStorage.find<A>(_:)(8LL);
    v39 = *(void *)(v3 + 16);
    v40 = (v38 & 1) == 0;
    v41 = v39 + v40;
    if (__OFADD__(v39, v40)) {
      goto LABEL_78;
    }
    v1 = v38;
    if (*(void *)(v3 + 24) < v41)
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v41, v4);
      v4 = v3;
      v42 = specialized __RawDictionaryStorage.find<A>(_:)(8LL);
      if ((v1 & 1) != (v43 & 1)) {
        goto LABEL_334;
      }
      v2 = v42;
      v44 = v237;
      if ((v1 & 1) == 0) {
        goto LABEL_45;
      }
      goto LABEL_42;
    }

    if ((v4 & 1) != 0)
    {
      v4 = v3;
      v44 = v237;
      if ((v38 & 1) == 0) {
        goto LABEL_45;
      }
      goto LABEL_42;
    }

    v233 = v5;
    v241 = v6;
    v141 = v7;
    v142 = v8;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<Int, String>);
    v143 = static _DictionaryStorage.copy(original:)();
    v4 = v143;
    if (!*(void *)(v3 + 16)) {
      goto LABEL_312;
    }
    v144 = (void *)(v143 + 64);
    v145 = v3 + 64;
    v146 = (unint64_t)((1LL << *(_BYTE *)(v4 + 32)) + 63) >> 6;
    v147 = 0LL;
    *(void *)(v4 + 16) = *(void *)(v3 + 16);
    v148 = 1LL << *(_BYTE *)(v3 + 32);
    v149 = -1LL;
    if (v148 < 64) {
      v149 = ~(-1LL << v148);
    }
    v150 = v149 & *(void *)(v3 + 64);
    v151 = (unint64_t)(v148 + 63) >> 6;
    while (2)
    {
      if (v150)
      {
        v152 = __clz(__rbit64(v150));
        v150 &= v150 - 1;
        v153 = v152 | (v147 << 6);
LABEL_187:
        v154 = 8 * v153;
        v155 = *(void *)(*(void *)(v3 + 48) + 8 * v153);
        v156 = 16 * v153;
        v157 = (uint64_t *)(*(void *)(v3 + 56) + v156);
        v159 = *v157;
        v158 = v157[1];
        *(void *)(*(void *)(v4 + 48) + v154) = v155;
        v160 = (void *)(*(void *)(v4 + 56) + v156);
        *v160 = v159;
        v160[1] = v158;
        swift_bridgeObjectRetain();
        continue;
      }

      break;
    }

    v161 = v147 + 1;
    if (__OFADD__(v147, 1LL)) {
      goto LABEL_323;
    }
    v18 = (unint64_t)v240;
    if (v161 >= v151) {
      goto LABEL_312;
    }
    v162 = *(void *)(v145 + 8 * v161);
    ++v147;
    if (v162) {
      goto LABEL_210;
    }
    v147 = v161 + 1;
    if (v161 + 1 >= v151) {
      goto LABEL_312;
    }
    v162 = *(void *)(v145 + 8 * v147);
    if (v162) {
      goto LABEL_210;
    }
    v147 = v161 + 2;
    if (v161 + 2 >= v151) {
      goto LABEL_312;
    }
    v162 = *(void *)(v145 + 8 * v147);
    if (v162) {
      goto LABEL_210;
    }
    v147 = v161 + 3;
    if (v161 + 3 >= v151) {
      goto LABEL_312;
    }
    v162 = *(void *)(v145 + 8 * v147);
    if (v162) {
      goto LABEL_210;
    }
    v147 = v161 + 4;
    if (v161 + 4 >= v151) {
      goto LABEL_312;
    }
    v162 = *(void *)(v145 + 8 * v147);
    if (v162) {
      goto LABEL_210;
    }
    v147 = v161 + 5;
    if (v161 + 5 >= v151) {
      goto LABEL_312;
    }
    v162 = *(void *)(v145 + 8 * v147);
    if (v162) {
      goto LABEL_210;
    }
    v147 = v161 + 6;
    if (v161 + 6 >= v151) {
      goto LABEL_312;
    }
    v162 = *(void *)(v145 + 8 * v147);
    if (v162)
    {
LABEL_210:
      v150 = (v162 - 1) & v162;
      v153 = __clz(__rbit64(v162)) + (v147 << 6);
      goto LABEL_187;
    }

    v163 = v161 + 7;
    if (v163 >= v151) {
      goto LABEL_312;
    }
    v162 = *(void *)(v145 + 8 * v163);
    if (v162)
    {
      v147 = v163;
      goto LABEL_210;
    }

    while (1)
    {
      v147 = v163 + 1;
      if (__OFADD__(v163, 1LL)) {
        goto LABEL_330;
      }
      v18 = (unint64_t)v240;
      if (v147 >= v151) {
        break;
      }
      v162 = *(void *)(v145 + 8 * v147);
      ++v163;
      if (v162) {
        goto LABEL_210;
      }
    }

          outlined consume of JSONEncoder.DateEncodingStrategy(v10, (uint64_t)v18, 1);
          type metadata accessor for JSONReference();
          v29 = swift_allocObject();
          *(void *)(v29 + 16) = MEMORY[0x18961AFF0];
          *(void *)(v29 + 24) = 0LL;
          *(_BYTE *)(v29 + 32) = 4;
          return v29;
        }

        v32 = *(void *)(a1 + 32);
        swift_retain();
LABEL_18:
        v35 = v43;
        swift_retain();
        goto LABEL_19;
      }

      v32 = *(void *)(a1 + 64);
      swift_retain();
      v20 = a4;
LABEL_17:
      outlined copy of _CodingKey?(a2, a3, v20, a5);
      goto LABEL_18;
    }

    v18 = (void *)swift_allocObject();
    v18[5] = &type metadata for _CodingKey;
    v18[6] = lazy protocol witness table accessor for type _CodingKey and conformance _CodingKey();
    v19 = swift_allocObject();
    v18[2] = v19;
    *(void *)(v19 + 16) = a2;
    *(void *)(v19 + 24) = a3;
    v20 = a4;
    *(void *)(v19 + 32) = a4;
    *(_BYTE *)(v19 + 40) = a5;
    v18[7] = a1;
    if (a1 >> 62)
    {
      if (a1 >> 62 != 1)
      {
        v32 = 1LL;
LABEL_16:
        v18[8] = v32;
        v31 = v8[18];
        v34 = v8[19];
        v8[18] = v18;
        v30 = v34;
        goto LABEL_17;
      }

      v21 = (uint64_t *)((a1 & 0x3FFFFFFFFFFFFFFFLL) + 32);
    }

    else
    {
      v21 = (uint64_t *)(a1 + 64);
    }

    v33 = *v21;
    swift_retain();
    v20 = a4;
    v32 = v33 + 1;
    if (__OFADD__(v33, 1LL))
    {
      __break(1u);
      goto LABEL_36;
    }

    goto LABEL_16;
  }

  v22 = objc_allocWithZone(MEMORY[0x189603F50]);
  v23 = v10;
  v24 = objc_msgSend(v22, sel_initWithTimeIntervalSinceReferenceDate_, a6);
  v25 = objc_msgSend(v23, sel_stringFromDate_, v24);

  v26 = static String._unconditionallyBridgeFromObjectiveC(_:)(v25);
  v28 = v27;
  outlined consume of JSONEncoder.DateEncodingStrategy(v10, v11, 0);

  type metadata accessor for JSONReference();
  v29 = swift_allocObject();
  *(void *)(v29 + 16) = v26;
  *(void *)(v29 + 24) = v28;
  *(_BYTE *)(v29 + 32) = 0;
  return v29;
}

  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

  v102 = v18;
  if ((v21 & 0x1000000000000000LL) != 0)
  {
    isStackAllocationSafe = String.UTF8View._foreignCount()();
  }

  else if ((v21 & 0x2000000000000000LL) != 0)
  {
    isStackAllocationSafe = HIBYTE(v21) & 0xF;
  }

  else
  {
    isStackAllocationSafe = v19 & 0xFFFFFFFFFFFFLL;
  }

  v36 = v106;
  v37 = 3 * isStackAllocationSafe;
  if ((unsigned __int128)(isStackAllocationSafe * (__int128)3LL) >> 64 != (3 * isStackAllocationSafe) >> 63)
  {
    __break(1u);
    goto LABEL_125;
  }

  if (v37 < -1)
  {
LABEL_127:
    __break(1u);
    goto LABEL_128;
  }

  v38 = v37 + 1;
  if (v37 < 1024 || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
  {
    MEMORY[0x1895F8858](isStackAllocationSafe);
    v40 = (char *)v98 - v39;
    swift_bridgeObjectRetain();
    String._decomposed(_:into:nullTerminated:)(1, (uint64_t)v40, v38, 1, v19, v21);
    v42 = v41;
    swift_bridgeObjectRelease();
    if ((v42 & 1) != 0) {
      v43 = 0LL;
    }
    else {
      v43 = strnlen(v40, 0x100uLL);
    }
    v44 = swift_bridgeObjectRelease();
    v15 = v105;
    v13 = v36;
    v18 = v102;
    if ((v102 & 0x1000000000000000LL) == 0) {
      goto LABEL_48;
    }
LABEL_61:
    v44 = String.UTF8View._foreignCount()();
    v20 = v44;
    goto LABEL_48;
  }

  v52 = (const char *)swift_slowAlloc();
  swift_bridgeObjectRetain();
  String._decomposed(_:into:nullTerminated:)(1, (uint64_t)v52, v38, 1, v19, v21);
  v54 = v53;
  swift_bridgeObjectRelease();
  if ((v54 & 1) != 0) {
    v43 = 0LL;
  }
  else {
    v43 = strnlen(v52, 0x100uLL);
  }
  v18 = v102;
  MEMORY[0x186E20E60](v52, -1LL, -1LL);
  v44 = swift_bridgeObjectRelease();
  v13 = v106;
  if ((v102 & 0x1000000000000000LL) != 0) {
    goto LABEL_61;
  }
LABEL_48:
  v45 = 3 * v20;
  if ((unsigned __int128)(v20 * (__int128)3LL) >> 64 != (3 * v20) >> 63)
  {
LABEL_125:
    __break(1u);
LABEL_126:
    __break(1u);
    goto LABEL_127;
  }

  if (v45 < -1)
  {
LABEL_128:
    __break(1u);
    goto LABEL_129;
  }

  v46 = v45 + 1;
  if (v45 < 1024 || (v44 = swift_stdlib_isStackAllocationSafe(), (v44 & 1) != 0))
  {
    MEMORY[0x1895F8858](v44);
    v48 = (char *)v98 - v47;
    swift_bridgeObjectRetain();
    String._decomposed(_:into:nullTerminated:)(1, (uint64_t)v48, v46, 1, v13, v18);
    v50 = v49;
    swift_bridgeObjectRelease();
    if ((v50 & 1) != 0) {
      v51 = 0LL;
    }
    else {
      v51 = strnlen(v48, 0x401uLL);
    }
  }

  else
  {
    v55 = (const char *)swift_slowAlloc();
    swift_bridgeObjectRetain();
    String._decomposed(_:into:nullTerminated:)(1, (uint64_t)v55, v46, 1, v13, v18);
    v57 = v56;
    swift_bridgeObjectRelease();
    if ((v57 & 1) != 0) {
      v51 = 0LL;
    }
    else {
      v51 = strnlen(v55, 0x401uLL);
    }
    MEMORY[0x186E20E60](v55, -1LL, -1LL);
  }

  swift_bridgeObjectRelease();
  if (v43 <= 255 && v51 < 1025)
  {
    swift_bridgeObjectRelease();
    v13 = v104;
    goto LABEL_22;
  }

  swift_bridgeObjectRelease();
  v29 = v18;
LABEL_67:
  v102 = v29;
  switch(v12)
  {
    case 13:
LABEL_70:
      v58 = 513LL;
      goto LABEL_74;
    case 2:
      v58 = 4LL;
      goto LABEL_74;
    case 1:
      goto LABEL_70;
    case 63:
      v58 = 514LL;
      goto LABEL_74;
  }

  v58 = 640LL;
  if (v12 <= 29)
  {
    if (v12 != 17)
    {
      if (v12 == 28) {
        goto LABEL_74;
      }
      goto LABEL_92;
    }

    v58 = 516LL;
  }

  else
  {
    if (v12 == 102)
    {
      v62 = 0LL;
      v58 = 512LL;
      goto LABEL_80;
    }

    if (v12 != 69)
    {
      if (v12 == 30)
      {
        v58 = 642LL;
        goto LABEL_74;
      }

  v102 = v18;
  if ((v21 & 0x1000000000000000LL) != 0)
  {
    isStackAllocationSafe = String.UTF8View._foreignCount()();
  }

  else if ((v21 & 0x2000000000000000LL) != 0)
  {
    isStackAllocationSafe = HIBYTE(v21) & 0xF;
  }

  else
  {
    isStackAllocationSafe = v19 & 0xFFFFFFFFFFFFLL;
  }

  v36 = v106;
  v37 = 3 * isStackAllocationSafe;
  if ((unsigned __int128)(isStackAllocationSafe * (__int128)3LL) >> 64 != (3 * isStackAllocationSafe) >> 63)
  {
    __break(1u);
    goto LABEL_125;
  }

  if (v37 < -1)
  {
LABEL_127:
    __break(1u);
    goto LABEL_128;
  }

  v38 = v37 + 1;
  if (v37 < 1024 || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
  {
    MEMORY[0x1895F8858](isStackAllocationSafe);
    v40 = (char *)v98 - v39;
    swift_bridgeObjectRetain();
    String._decomposed(_:into:nullTerminated:)(1, (uint64_t)v40, v38, 1, v19, v21);
    v42 = v41;
    swift_bridgeObjectRelease();
    if ((v42 & 1) != 0) {
      v43 = 0LL;
    }
    else {
      v43 = strnlen(v40, 0x100uLL);
    }
    v44 = swift_bridgeObjectRelease();
    v15 = v105;
    v13 = v36;
    v18 = v102;
    if ((v102 & 0x1000000000000000LL) == 0) {
      goto LABEL_48;
    }
LABEL_61:
    v44 = String.UTF8View._foreignCount()();
    v20 = v44;
    goto LABEL_48;
  }

  v52 = (const char *)swift_slowAlloc();
  swift_bridgeObjectRetain();
  String._decomposed(_:into:nullTerminated:)(1, (uint64_t)v52, v38, 1, v19, v21);
  v54 = v53;
  swift_bridgeObjectRelease();
  if ((v54 & 1) != 0) {
    v43 = 0LL;
  }
  else {
    v43 = strnlen(v52, 0x100uLL);
  }
  v18 = v102;
  MEMORY[0x186E20E60](v52, -1LL, -1LL);
  v44 = swift_bridgeObjectRelease();
  v13 = v106;
  if ((v102 & 0x1000000000000000LL) != 0) {
    goto LABEL_61;
  }
LABEL_48:
  v45 = 3 * v20;
  if ((unsigned __int128)(v20 * (__int128)3LL) >> 64 != (3 * v20) >> 63)
  {
LABEL_125:
    __break(1u);
LABEL_126:
    __break(1u);
    goto LABEL_127;
  }

  if (v45 < -1)
  {
LABEL_128:
    __break(1u);
    goto LABEL_129;
  }

  v46 = v45 + 1;
  if (v45 < 1024 || (v44 = swift_stdlib_isStackAllocationSafe(), (v44 & 1) != 0))
  {
    MEMORY[0x1895F8858](v44);
    v48 = (char *)v98 - v47;
    swift_bridgeObjectRetain();
    String._decomposed(_:into:nullTerminated:)(1, (uint64_t)v48, v46, 1, v13, v18);
    v50 = v49;
    swift_bridgeObjectRelease();
    if ((v50 & 1) != 0) {
      v51 = 0LL;
    }
    else {
      v51 = strnlen(v48, 0x401uLL);
    }
  }

  else
  {
    v55 = (const char *)swift_slowAlloc();
    swift_bridgeObjectRetain();
    String._decomposed(_:into:nullTerminated:)(1, (uint64_t)v55, v46, 1, v13, v18);
    v57 = v56;
    swift_bridgeObjectRelease();
    if ((v57 & 1) != 0) {
      v51 = 0LL;
    }
    else {
      v51 = strnlen(v55, 0x401uLL);
    }
    MEMORY[0x186E20E60](v55, -1LL, -1LL);
  }

  swift_bridgeObjectRelease();
  if (v43 <= 255 && v51 < 1025)
  {
    swift_bridgeObjectRelease();
    v13 = v104;
    goto LABEL_22;
  }

  swift_bridgeObjectRelease();
  v29 = v18;
LABEL_67:
  v102 = v29;
  switch(v12)
  {
    case 13:
LABEL_70:
      v58 = 513LL;
      goto LABEL_74;
    case 2:
      v58 = 4LL;
      goto LABEL_74;
    case 1:
      goto LABEL_70;
    case 63:
      v58 = 514LL;
      goto LABEL_74;
  }

  v58 = 640LL;
  if (v12 <= 29)
  {
    if (v12 != 17)
    {
      if (v12 == 28) {
        goto LABEL_74;
      }
      goto LABEL_92;
    }

    v58 = 516LL;
  }

  else
  {
    if (v12 == 102)
    {
      v62 = 0LL;
      v58 = 512LL;
      goto LABEL_80;
    }

    if (v12 != 69)
    {
      if (v12 == 30)
      {
        v58 = 642LL;
        goto LABEL_74;
      }

              uint64_t v7 = 1LL;
              goto LABEL_37;
            }

    __break(1u);
    goto LABEL_37;
  }

  if (v13 >= a5 && v23 <= a6)
  {
    *(void *)(a7 + 16) = a1;
    *(void *)(a7 + 24) = a2;
    *(void *)(a7 + 32) = a3;
    *(void *)a7 = a3;
    *(void *)(a7 + 8) = v22;
    *(_BYTE *)(a7 + 40) = 0;
    return result;
  }

  if (v13 <= a5 && v23 >= a5)
  {
    result = dispatch thunk of RandomAccessCollection.distance(from:to:)();
    v19 = a3 + result;
    if (!__OFADD__(a3, result))
    {
      if (v19 >= a3 && v22 >= v19)
      {
        *(void *)(a7 + 16) = a1;
        *(void *)(a7 + 24) = a2;
        *(void *)(a7 + 32) = a3;
        *(void *)a7 = v19;
        *(void *)(a7 + 8) = v22;
        *(_BYTE *)(a7 + 40) = 0;
        return result;
      }

      goto LABEL_42;
    }

        __break(1u);
LABEL_37:
        __break(1u);
LABEL_38:
        __break(1u);
LABEL_39:
        __break(1u);
        goto LABEL_40;
      }
    }

  specialized Set._Variant.insert(_:)(&v3, 0xEuLL);
  if ((a1 & 0x200000) != 0) {
    goto LABEL_37;
  }
LABEL_18:
  if ((a1 & 0x100) != 0) {
LABEL_19:
  }
    specialized Set._Variant.insert(_:)(&v3, 0xBuLL);
  return v4;
}

          Hasher._combine(_:)(0);
          if (v21) {
            goto LABEL_32;
          }
          goto LABEL_37;
        }

          Hasher._combine(_:)(0);
          if (v20) {
            goto LABEL_32;
          }
          goto LABEL_37;
        }

            Hasher._combine(_:)(0);
            v28 = 0LL;
LABEL_37:

            v33 = v52;
            if (v33)
            {
              Hasher._combine(_:)(1u);
              swift_bridgeObjectRetain();
              specialized Dictionary<>.hash(into:)((uint64_t)v62, v33);
              swift_bridgeObjectRelease();
              v34 = v53;
              if (v53) {
                goto LABEL_39;
              }
            }

            else
            {
              Hasher._combine(_:)(0);
              v34 = v53;
              if (v53)
              {
LABEL_39:
                Hasher._combine(_:)(1u);
                swift_bridgeObjectRetain();
                specialized Dictionary<>.hash(into:)((uint64_t)v62, v34);
                swift_bridgeObjectRelease();
                if (v54)
                {
LABEL_40:
                  Hasher._combine(_:)(1u);
                  swift_bridgeObjectRetain();
                  String.hash(into:)();
                  swift_bridgeObjectRelease();
LABEL_44:
                  if (v55 == 2)
                  {
                    Hasher._combine(_:)(0);
                  }

                  else
                  {
                    v35 = v55 & 1;
                    Hasher._combine(_:)(1u);
                    Hasher._combine(_:)(v35);
                  }

                  if (v56 == 2)
                  {
                    Hasher._combine(_:)(0);
                  }

                  else
                  {
                    v36 = v56 & 1;
                    Hasher._combine(_:)(1u);
                    Hasher._combine(_:)(v36);
                  }

                  if (v57 == 2)
                  {
                    v37 = 0;
                  }

                  else
                  {
                    v37 = v57 & 1;
                    Hasher._combine(_:)(1u);
                  }

                  Hasher._combine(_:)(v37);
                  if (v58 == 2)
                  {
                    v38 = 0;
                  }

                  else
                  {
                    v39 = v58 & 1;
                    Hasher._combine(_:)(1u);
                    v38 = v39;
                  }

                  Hasher._combine(_:)(v38);
                  outlined retain of LocalePreferences?( (uint64_t)v60,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined consume of LocalePreferences?);
                  outlined retain of LocalePreferences?( (uint64_t)v60,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined consume of LocalePreferences?);
                  goto LABEL_57;
                }

        v26 = 1;
        goto LABEL_6;
      }

      v26 = 2;
      if (v17 == 3 || !v32) {
        goto LABEL_51;
      }
    }

    else
    {
      v28 = a8;
      if ((v59 & 1) != 0)
      {
        if (!v32) {
          goto LABEL_33;
        }
        goto LABEL_36;
      }

      v26 = 2;
      if (v17 == 3 || !v58 || !v32) {
        goto LABEL_51;
      }
    }

    v26 = 0;
    goto LABEL_6;
  }

  v32 = 1LL;
LABEL_29:
  if ((v31 & 0x2000) != 0) {
    goto LABEL_30;
  }
  DateComponents.highestSetUnit.getter((char *)v54);
  if (LOBYTE(v54[0]) == 4)
  {
    v55 = 16LL;
    if (v27 <= 1.59271755e13) {
      v33 = v27;
    }
    else {
      v33 = 1.59271755e13;
    }
    v34 = fmax(v33, -2.11845067e11);
    ObjectType = swift_getObjectType();
    v43 = v34;
    v36 = *(void (**)(void *__return_ptr, void, void, void, void))(v23 + 192);
    v36(v54, &v55, &v43, ObjectType, v23);
    outlined release of DateComponents((uint64_t)v54);
    if ((BYTE8(v54[7]) & 1) != 0)
    {
      v37 = 0LL;
      if ((v19 & 1) == 0)
      {
LABEL_43:
        v38 = 3600.0;
LABEL_54:
        v39 = v38 + v27;
        v47 = 16LL;
        if (v39 <= 1.59271755e13) {
          v40 = v39;
        }
        else {
          v40 = 1.59271755e13;
        }
        v52 = fmax(v40, -2.11845067e11);
        v36(&v43, &v47, &v52, ObjectType, v23);
        outlined release of DateComponents((uint64_t)&v43);
        result = outlined release of DateComponents((uint64_t)__src);
        if ((v46 & 1) != 0) {
          v41 = v37 == 0;
        }
        else {
          v41 = v37 == v45;
        }
        if (v41) {
          v20 = v39;
        }
        goto LABEL_5;
      }
    }

    else
    {
      v37 = *(void *)&v54[7];
      if ((v19 & 1) == 0) {
        goto LABEL_43;
      }
    }

    v38 = -3600.0;
    goto LABEL_54;
  }

  v32 = v10 + 1;
  if (__OFADD__(v10, 1LL))
  {
LABEL_56:
    __break(1u);
    goto LABEL_57;
  }

  if ((uint64_t)v6 < v32)
  {
LABEL_57:
    __break(1u);
    goto LABEL_58;
  }

  if ((unsigned __int16 *)v32 != v6)
  {
    if (v32 >= (uint64_t)v6)
    {
LABEL_59:
      __break(1u);
      return result;
    }

    v33 = &v8[3 * v10 + 5];
    v34 = (char *)v6 + ~v10;
    do
    {
      v35 = *(v33 - 1);
      v36 = *v33;
      v33 += 3;
      v37 = swift_unknownObjectRetain();
      result = (unsigned __int16 *)specialized Rope.Builder._insertBeforeTip(_:)(v37, v35, v36);
      --v34;
    }

    while (v34);
  }

  if (v5 < 0 || (v38 = &v8[3 * (void)v6], v38[2] < v5))
  {
LABEL_58:
    __break(1u);
    goto LABEL_59;
  }

  if (v5)
  {
    v39 = *v38;
    v40 = *(unsigned __int8 *)(*v38 + 18LL);
    v41 = *v38 + 24LL;
    swift_unknownObjectRetain();
    v25 = v39 + 16;
    v26 = (void *)v41;
    v27 = 0LL;
    if (!v40) {
      goto LABEL_25;
    }
    goto LABEL_46;
  }

  return result;
}

      v43 = v58;
      goto LABEL_37;
    }
  }

  Hasher._combine(_:)(0);
  v32 = 0LL;
LABEL_37:

  v33 = v59;
  if (v33)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    specialized Dictionary<>.hash(into:)((uint64_t)v69, v33);
    swift_bridgeObjectRelease();
  }

  else
  {
    Hasher._combine(_:)(0);
  }

  v2 = v46;
  v3 = v47;
  v34 = v60;
  if (!v60)
  {
    Hasher._combine(_:)(0);
    if (v61) {
      goto LABEL_42;
    }
LABEL_44:
    Hasher._combine(_:)(0);
    goto LABEL_45;
  }

  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)((uint64_t)v69, v34);
  swift_bridgeObjectRelease();
  if (!v61) {
    goto LABEL_44;
  }
LABEL_42:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
LABEL_45:
  if (v62 == 2)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    v35 = v62 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v35);
  }

  if (v63 == 2)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    v36 = v63 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v36);
  }

  if (v64 == 2)
  {
    v37 = 0;
  }

  else
  {
    v37 = v64 & 1;
    Hasher._combine(_:)(1u);
  }

  Hasher._combine(_:)(v37);
  if (v65 == 2)
  {
    v38 = 0;
  }

  else
  {
    v39 = v65 & 1;
    Hasher._combine(_:)(1u);
    v38 = v39;
  }

  Hasher._combine(_:)(v38);
  outlined retain of LocalePreferences?( (uint64_t)v67,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined consume of LocalePreferences?);
  outlined retain of LocalePreferences?( (uint64_t)v67,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined consume of LocalePreferences?);
LABEL_58:
  swift_unknownObjectRelease();
  v40 = swift_getObjectType();
  v41 = *(void (**)(_BYTE *, uint64_t, uint64_t))(v2 + 112);
  swift_unknownObjectRetain();
  v41(v69, v40, v2);
  swift_unknownObjectRelease();
  v42 = swift_getObjectType();
  v43 = *(void (**)(_BYTE *, uint64_t, uint64_t))(v3 + 120);
  swift_unknownObjectRetain();
  v43(v69, v42, v3);
  swift_unknownObjectRelease();
  specialized Hasher.combine<A>(_:)((uint64_t)v70);
  return Hasher._finalize()();
}

  specialized Set._Variant.insert(_:)(&v3, 0xFuLL);
  if ((v1 & 0x10000) != 0) {
    goto LABEL_37;
  }
LABEL_18:
  if ((v1 & 0x40000) != 0) {
LABEL_19:
  }
    specialized Set._Variant.insert(_:)(&v3, 0x11uLL);
  return v4;
}

  Hasher._combine(_:)(0);
  v34 = 0LL;
LABEL_37:

  v35 = v58;
  if (v35)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    specialized Dictionary<>.hash(into:)((uint64_t)v68, v35);
    swift_bridgeObjectRelease();
  }

  else
  {
    Hasher._combine(_:)(0);
  }

  v5 = v46;
  v36 = v59;
  if (!v59)
  {
    Hasher._combine(_:)(0);
    if (v60) {
      goto LABEL_42;
    }
LABEL_44:
    Hasher._combine(_:)(0);
    goto LABEL_45;
  }

  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)((uint64_t)v68, v36);
  swift_bridgeObjectRelease();
  if (!v60) {
    goto LABEL_44;
  }
LABEL_42:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
LABEL_45:
  if (v61 == 2)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    v37 = v61 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v37);
  }

  if (v62 == 2)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    v38 = v62 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v38);
  }

  if (v63 == 2)
  {
    v39 = 0;
  }

  else
  {
    v39 = v63 & 1;
    Hasher._combine(_:)(1u);
  }

  Hasher._combine(_:)(v39);
  if (v64 == 2)
  {
    v40 = 0;
  }

  else
  {
    v41 = v64 & 1;
    Hasher._combine(_:)(1u);
    v40 = v41;
  }

  Hasher._combine(_:)(v40);
  outlined retain of LocalePreferences?( (uint64_t)v66,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined consume of LocalePreferences?);
  outlined retain of LocalePreferences?( (uint64_t)v66,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined consume of LocalePreferences?);
LABEL_58:
  swift_unknownObjectRelease();
  v42 = swift_getObjectType();
  v43 = *(void (**)(_BYTE *, uint64_t, uint64_t))(v5 + 120);
  swift_unknownObjectRetain();
  v43(v68, v42, v5);
  swift_unknownObjectRelease();
  swift_bridgeObjectRetain();
  specialized Set.hash(into:)(v68, v6);
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

          uint64_t v7 = 0LL;
          uint64_t v9 = 1;
LABEL_37:
          v24 = v9;
LABEL_38:
          v17 = v24;
          goto LABEL_39;
        }

        goto LABEL_55;
      }

      if (v3)
      {
        if (v3 != 1)
        {
          if ((BYTE1(a1) - 48) <= 9u)
          {
            uint64_t v7 = -(uint64_t)(BYTE1(a1) - 48);
            if (BYTE1(a1) == 48)
            {
              v10 = v3 - 2;
              if (v10)
              {
                v11 = (unsigned __int8 *)v23 + 2;
                do
                {
                  v12 = *v11 - 48;
                  if (v12 > 9) {
                    goto LABEL_36;
                  }
                  if (!is_mul_ok(v7, 0xAuLL)) {
                    goto LABEL_36;
                  }
                  v13 = 10 * v7 >= v12;
                  uint64_t v7 = 10 * v7 - v12;
                  if (!v13) {
                    goto LABEL_36;
                  }
                  ++v11;
                }

                while (--v10);
              }

  Hasher._combine(_:)(0);
LABEL_37:
  if (v42 == 2)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v42 & 1);
  }

  if (v32 == 2)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v32 & 1);
  }

  if (v33 == 2)
  {
    v30 = 0;
  }

  else
  {
    v30 = v33 & 1;
    Hasher._combine(_:)(1u);
  }

  Hasher._combine(_:)(v30);
  if (v43 == 2)
  {
    v31 = 0;
  }

  else
  {
    v31 = v43 & 1;
    Hasher._combine(_:)(1u);
  }

  Hasher._combine(_:)(v31);
}

  swift_bridgeObjectRelease();
LABEL_37:
  lazy protocol witness table accessor for type URLComponents.InvalidComponentError and conformance URLComponents.InvalidComponentError();
  swift_allocError();
  *v35 = 7;
  swift_willThrow();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_release();
}

      v21 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  v47[2] + 1LL,  1,  v47);
LABEL_30:
      v23 = v21[2];
      v22 = v21[3];
      if (v23 >= v22 >> 1) {
        v21 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (void *)(v22 > 1),  v23 + 1,  1,  v21);
      }
      v21[2] = v23 + 1;
      v47 = v21;
      v24 = &v21[4 * v23];
      v24[4] = v14;
      *((_BYTE *)v24 + 40) = v48 & 1;
      v24[6] = v44;
      v24[7] = v9;
      v10 = v9;
      v48 = v20;
      v14 = (void *)MEMORY[0x18961AFE8];
      v13 = v46;
      if (countAndFlagsBits == 39)
      {
LABEL_54:
        if (v11 == (void *)0xE100000000000000LL) {
          goto LABEL_56;
        }
      }

  Hasher._combine(_:)(0);
  if (!v22) {
    goto LABEL_37;
  }
LABEL_32:
  Hasher._combine(_:)(1u);
  type metadata accessor for CFDictionaryRef(0LL);
  lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( (unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef,  (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef,  (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
  v32 = v22;
  _CFObject.hash(into:)();

  if (v24)
  {
LABEL_33:
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0LL);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( (unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef,  (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef,  (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
    v33 = v24;
    _CFObject.hash(into:)();

    goto LABEL_39;
  }

  Hasher._combine(_:)(0);
  if (!v20) {
    goto LABEL_37;
  }
LABEL_32:
  Hasher._combine(_:)(1u);
  type metadata accessor for CFDictionaryRef(0LL);
  lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( (unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef,  (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef,  (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
  v30 = v20;
  _CFObject.hash(into:)();

  if (v22)
  {
LABEL_33:
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0LL);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( (unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef,  (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef,  (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
    v31 = v22;
    _CFObject.hash(into:)();

    goto LABEL_39;
  }

  __break(1u);
  return result;
}

          v4 = v68;
          v6 = v69;
        }

  v45(v41, v5);
  v77 = (uint64_t)v117;
  dispatch thunk of BinaryFloatingPoint.exponentBitPattern.getter();
  v78 = dispatch thunk of static BinaryInteger.isSigned.getter();
  v79 = v119;
  v80 = swift_getAssociatedConformanceWitness();
  v65 = numericStringRepresentationForBinaryInteger<A>(words:isSigned:)( v77,  v78 & 1,  v79,  *(void *)(*(void *)(v80 + 8) + 8LL));
  v66 = v81;
  (*(void (**)(uint64_t, uint64_t))(v118 + 8))(v77, v79);
  v67 = 3LL;
LABEL_37:
  v82 = (uint64_t)v128;
  (*(void (**)(char *, uint64_t, uint64_t))(v126 + 16))(v128, v129, v127);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  v84 = v132;
  if (EnumCaseMultiPayload)
  {
    if (EnumCaseMultiPayload == 1)
    {
      v86 = v114;
      v85 = v115;
      v87 = v116;
      (*(void (**)(char *, uint64_t, uint64_t))(v115 + 32))(v114, v82, v116);
      type metadata accessor for ICUPercentNumberFormatter();
    }

    else
    {
      v86 = v109;
      v85 = v110;
      v87 = v112;
      (*(void (**)(char *, uint64_t, uint64_t))(v110 + 32))(v109, v82, v112);
      type metadata accessor for ICUCurrencyNumberFormatter();
      if (static ICUCurrencyNumberFormatter.create<A>(for:)(v86, v5, v6))
      {
LABEL_44:
        ICUNumberFormatter.attributedFormat(_:)(v65, v66, v67 << 32);
        swift_release();
        outlined consume of ICUNumberFormatterBase.Value(v65, v66, 0LL, v67);
        return (*(uint64_t (**)(char *, uint64_t))(v85 + 8))(v86, v87);
      }
    }

    (*(void (**)(char *, uint64_t))(v85 + 8))(v86, v87);
    v102 = v65;
    v103 = v66;
    v104 = v67;
  }

  else
  {
    v129 = v67;
    v130 = v65;
    (*(void (**)(char *, uint64_t, uint64_t))(v120 + 32))(v132, v82, v50);
    v128 = &v84[*(int *)(v50 + 36)];
    v88 = *((void *)v84 + 1);
    ObjectType = swift_getObjectType();
    v90 = *(uint64_t (**)(uint64_t, uint64_t))(v88 + 472);
    swift_unknownObjectRetain();
    v91 = v90(ObjectType, v88);
    v93 = v92;
    swift_unknownObjectRelease();
    v94 = *(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v88 + 464);
    swift_unknownObjectRetain();
    v94(v134, ObjectType, v88);
    swift_unknownObjectRelease();
    outlined init with take of LocalePreferences?( (uint64_t)v134,  (uint64_t)v135,  (uint64_t *)&demangling cache variable for type metadata for LocalePreferences?);
    v95 = v113;
    outlined init with copy of ICUNumberFormatter.Signature( (uint64_t)v128,  v113,  type metadata accessor for NumberFormatStyleConfiguration.Collection);
    v96 = v111;
    v97 = (uint64_t *)(v95 + *(int *)(v111 + 20));
    *v97 = v91;
    v97[1] = v93;
    outlined init with take of LocalePreferences?( (uint64_t)v135,  v95 + *(int *)(v96 + 24),  (uint64_t *)&demangling cache variable for type metadata for LocalePreferences?);
    v98 = specialized static ICUNumberFormatter._create(with:)(v95);
    outlined destroy of ICUNumberFormatter.Signature(v95, type metadata accessor for ICUNumberFormatter.Signature);
    if (v98)
    {
      v100 = v129;
      v99 = v130;
      ICUNumberFormatter.attributedFormat(_:)(v130, v66, v129 << 32);
      swift_release();
      outlined consume of ICUNumberFormatterBase.Value(v99, v66, 0LL, v100);
      return (*(uint64_t (**)(char *, uint64_t))(v120 + 8))(v132, v131);
    }

    (*(void (**)(char *, uint64_t))(v120 + 8))(v132, v131);
    v104 = v129;
    v102 = v130;
    v103 = v66;
  }

  outlined consume of ICUNumberFormatterBase.Value(v102, v103, 0LL, v104);
  v133(v123, v121, v5);
  String.init<A>(_:radix:uppercase:)();
  BigString.init(_:)();
  result = AttributedString.init(_:attributes:)(v135, MEMORY[0x18961AFF0], MEMORY[0x18961AFF8], v134);
  *v125 = v134[0];
  return result;
}

  Hasher._combine(_:)(0);
  v35 = 0LL;
LABEL_37:

  v36 = v61;
  if (v36)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    specialized Dictionary<>.hash(into:)((uint64_t)v71, v36);
    swift_bridgeObjectRelease();
  }

  else
  {
    Hasher._combine(_:)(0);
  }

  v6 = v48;
  v37 = v62;
  if (!v62)
  {
    Hasher._combine(_:)(0);
    if (v63) {
      goto LABEL_42;
    }
LABEL_44:
    Hasher._combine(_:)(0);
    goto LABEL_45;
  }

  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)((uint64_t)v71, v37);
  swift_bridgeObjectRelease();
  if (!v63) {
    goto LABEL_44;
  }
LABEL_42:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
LABEL_45:
  v11 = v49;
  if (v64 == 2)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    v38 = v64 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v38);
  }

  if (v65 == 2)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    v39 = v65 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v39);
  }

  if (v66 == 2)
  {
    v40 = 0;
  }

  else
  {
    v40 = v66 & 1;
    Hasher._combine(_:)(1u);
  }

  Hasher._combine(_:)(v40);
  if (v67 == 2)
  {
    v41 = 0;
  }

  else
  {
    v42 = v67 & 1;
    Hasher._combine(_:)(1u);
    v41 = v42;
  }

  Hasher._combine(_:)(v41);
  outlined retain of LocalePreferences?( (uint64_t)v69,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined consume of LocalePreferences?);
  outlined retain of LocalePreferences?( (uint64_t)v69,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined consume of LocalePreferences?);
  swift_unknownObjectRelease();
LABEL_58:
  v43 = swift_getObjectType();
  v44 = *(void (**)(_BYTE *, uint64_t, uint64_t))(v11 + 120);
  swift_unknownObjectRetain();
  v44(v71, v43, v11);
  swift_unknownObjectRelease();
  swift_bridgeObjectRetain();
  specialized Set.hash(into:)(v71, v5);
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease_n();
  if ((v6 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    v45 = v6;
  }
  else {
    v45 = 0LL;
  }
  Hasher._combine(_:)(v45);
  return Hasher._finalize()();
}

  Hasher._combine(_:)(0);
  if (!v25) {
    goto LABEL_37;
  }
LABEL_32:
  Hasher._combine(_:)(1u);
  type metadata accessor for CFDictionaryRef(0LL);
  lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef();
  v35 = v25;
  _CFObject.hash(into:)();

  if (v27)
  {
LABEL_33:
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0LL);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef();
    v36 = v27;
    _CFObject.hash(into:)();

    goto LABEL_39;
  }

  Hasher._combine(_:)(0);
  if (!v23) {
    goto LABEL_37;
  }
LABEL_32:
  Hasher._combine(_:)(1u);
  type metadata accessor for CFDictionaryRef(0LL);
  lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef();
  v33 = v23;
  _CFObject.hash(into:)();

  if (v25)
  {
LABEL_33:
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0LL);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef();
    v34 = v25;
    _CFObject.hash(into:)();

    goto LABEL_39;
  }

      v8 = v38;
      v5 = v24;
      if (!v38) {
        goto LABEL_2;
      }
      uint64_t v7 = v37;
      if ((v37 & 0xF800) == 0xD800) {
        goto LABEL_5;
      }
      lazy protocol witness table accessor for type Unicode.UTF16.ForwardParser and conformance Unicode.UTF16.ForwardParser();
      v18 = Locale.Language.components.modify();
      specialized RangeReplaceableCollection.remove(at:)(0LL);
      ((void (*)(_BYTE *, void))v18)(v36, 0LL);
    }
  }

  uint64_t v7 = (unsigned __int16)v6 | (HIWORD(v37) << 16);
  v8 = 16;
LABEL_5:
  uint64_t v9 = specialized UTF16EndianAdaptor.Iterator.next()();
  if ((v9 & 0x10000) != 0)
  {
    v10 = v8;
    goto LABEL_12;
  }

  uint64_t v7 = ((-65535 << v8) - 1) & v7 | ((unsigned __int16)v9 << v8);
  v10 = v8 + 16;
  v11 = specialized UTF16EndianAdaptor.Iterator.next()();
  if ((v11 & 0x10000) != 0)
  {
LABEL_12:
    if (v10) {
      goto LABEL_13;
    }
LABEL_50:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    v32 = static String._tryFromUTF8(_:)();
    v34 = v33;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    if (v34) {
      return v32;
    }
    else {
      return 0LL;
    }
  }

  uint64_t v7 = ((-65535 << v10) - 1) & v7 | ((unsigned __int16)v11 << v10);
  v10 = v8 + 32;
  if (v8 >= 0xE0u)
  {
    v12 = specialized UTF16EndianAdaptor.Iterator.next()();
    if ((v12 & 0x10000) == 0)
    {
      uint64_t v7 = ((-65535 << v8) - 1) & v7 | ((unsigned __int16)v12 << v8);
      v10 = v8 + 48;
      goto LABEL_13;
    }

    goto LABEL_12;
  }

      v10 = v40;
      uint64_t v7 = v26;
      if (!v40) {
        goto LABEL_2;
      }
      uint64_t v9 = v39;
      if ((v39 & 0xF800) == 0xD800) {
        goto LABEL_5;
      }
      lazy protocol witness table accessor for type Unicode.UTF16.ForwardParser and conformance Unicode.UTF16.ForwardParser();
      v20 = Locale.Language.components.modify();
      specialized RangeReplaceableCollection.remove(at:)(0LL);
      ((void (*)(uint64_t *, void))v20)(&v38, 0LL);
    }
  }

  uint64_t v9 = (unsigned __int16)v8 | (HIWORD(v39) << 16);
  v10 = 16;
LABEL_5:
  v11 = specialized UTF16EndianAdaptor.Iterator.next()();
  if ((v11 & 0x10000) != 0)
  {
    v12 = v10;
    goto LABEL_12;
  }

  uint64_t v9 = ((-65535 << v10) - 1) & v9 | ((unsigned __int16)v11 << v10);
  v12 = v10 + 16;
  v13 = specialized UTF16EndianAdaptor.Iterator.next()();
  if ((v13 & 0x10000) != 0)
  {
LABEL_12:
    if (v12) {
      goto LABEL_13;
    }
LABEL_50:
    swift_bridgeObjectRetain();
    v34 = static String._tryFromUTF8(_:)();
    v36 = v35;
    swift_bridgeObjectRelease_n();
    if (v36) {
      return v34;
    }
    else {
      return 0LL;
    }
  }

  uint64_t v9 = ((-65535 << v12) - 1) & v9 | ((unsigned __int16)v13 << v12);
  v12 = v10 + 32;
  if (v10 >= 0xE0u)
  {
    v14 = specialized UTF16EndianAdaptor.Iterator.next()();
    if ((v14 & 0x10000) == 0)
    {
      uint64_t v9 = ((-65535 << v10) - 1) & v9 | ((unsigned __int16)v14 << v10);
      v12 = v10 + 48;
      goto LABEL_13;
    }

    goto LABEL_12;
  }

  v280 = MEMORY[0x18961AFE8];
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, 4LL, 0);
  v30 = v280;
  v32 = *(void *)(v280 + 16);
  v31 = *(void *)(v280 + 24);
  v33 = v32 + 1;
  if (v32 >= v31 >> 1)
  {
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v31 > 1, v32 + 1, 1);
    v30 = v280;
  }

  *(void *)(v30 + 16) = v33;
  *(_DWORD *)(v30 + 4 * v32 + 32) = 46;
  v34 = *(void *)(v30 + 24);
  v35 = v32 + 2;
  if (v33 >= v34 >> 1) {
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v34 > 1, v35, 1);
  }
  *(void *)(v30 + 16) = v35;
  *(_DWORD *)(v30 + 4 * v33 + 32) = 1088;
  v37 = *(void *)(v30 + 16);
  v36 = *(void *)(v30 + 24);
  v38 = v37 + 1;
  if (v37 >= v36 >> 1) {
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v36 > 1, v37 + 1, 1);
  }
  *(void *)(v30 + 16) = v38;
  *(_DWORD *)(v30 + 4 * v37 + 32) = 1091;
  v39 = *(void *)(v30 + 24);
  v40 = v37 + 2;
  if (v38 >= v39 >> 1) {
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v39 > 1, v40, 1);
  }
  *(void *)(v30 + 16) = v40;
  *(_DWORD *)(v30 + 4 * v38 + 32) = 1089;
  String.UnicodeScalarView.append<A>(contentsOf:)();
  swift_release();
  swift_bridgeObjectRetain();
  v41 = String.count.getter();
  swift_bridgeObjectRelease();
  v42 = String.UnicodeScalarView.distance(from:to:)(0xFuLL, 7uLL, 0LL, 0xE000000000000000LL);
  if ((a2 & 0x2000000000000000LL) != 0) {
    v43 = HIBYTE(a2) & 0xF;
  }
  else {
    v43 = a1 & 0xFFFFFFFFFFFFLL;
  }
  v44 = 7LL;
  if (((a2 >> 60) & ((a1 & 0x800000000000000LL) == 0)) != 0) {
    v44 = 11LL;
  }
  v45 = v44 | (v43 << 16);
  v46 = String.UnicodeScalarView.distance(from:to:)(0xFuLL, 7uLL, 0LL, 0xE000000000000000LL);
  if (__OFSUB__(0LL, v46)) {
    goto LABEL_176;
  }
  swift_bridgeObjectRetain();
  String.UnicodeScalarView.subscript.getter();
  lazy protocol witness table accessor for type Substring.UnicodeScalarView and conformance Substring.UnicodeScalarView();
  String.UnicodeScalarView.append<A>(contentsOf:)();
  v47 = specialized Sequence<>.elementsEqual<A>(_:)(0LL, 0xE000000000000000LL, 0LL, 0xE000000000000000LL);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v47 & 1) != 0)
  {
    v48 = String.UnicodeScalarView.distance(from:to:)(0xFuLL, 7uLL, 0LL, 0xE000000000000000LL);
    swift_bridgeObjectRetain();
    v49 = specialized BidirectionalCollection.dropLast(_:)(v48, a1, a2);
    v51 = v50;
    v53 = v52;
    v55 = v54;
    swift_bridgeObjectRelease();
    if (v49 >> 14 != v51 >> 14)
    {
      while (1)
      {
        Substring.UnicodeScalarView.formIndex(before:)();
        _StringGuts.validateScalarIndex(_:in:)(v51, v49, v51, v53, v55);
        if ((v55 & 0x1000000000000000LL) != 0)
        {
          v56 = _StringGuts.foreignErrorCorrectedScalar(startingAt:)();
        }

        else
        {
          if ((v55 & 0x2000000000000000LL) == 0 && (v53 & 0x1000000000000000LL) == 0) {
            _StringObject.sharedUTF8.getter();
          }
          v56 = _decodeScalar(_:startingAt:)();
        }

        v57 = v56;
        if (v49 >> 14 == v51 >> 14) {
          goto LABEL_172;
        }
      }

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v29 = v57 == 46;
      goto LABEL_104;
    }

    goto LABEL_172;
  }

  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    v2 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  *((void *)v2 + 2) + 1LL,  1,  v2);
  }
  v12 = *((void *)v2 + 2);
  v11 = *((void *)v2 + 3);
  if (v12 >= v11 >> 1) {
    v2 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (char *)(v11 > 1),  v12 + 1,  1,  v2);
  }
  *((void *)v2 + 2) = v12 + 1;
  v2[v12 + 32] = 2;
  if ((v1 & 0x800) == 0)
  {
LABEL_16:
    if ((v1 & 0x400) == 0) {
      goto LABEL_17;
    }
    goto LABEL_46;
  }

  __src[12] = (int)ucal_getFieldDifference();
  LOBYTE(__src[13]) = 0;
  if ((a2 & 0x80) == 0)
  {
LABEL_23:
    if ((a2 & 0x100) == 0) {
      goto LABEL_24;
    }
    goto LABEL_38;
  }

  __break(1u);
  return result;
}

          v23 = (4 * *(_BYTE *)(v12 + 18) + 8) & 0x3C;
          uint64_t v7 = ((-15LL << v23) - 1) & v7 | (v24 << v23);
          uint64_t v9 = *(void *)(v12 + 24 + 24 * v24);
          swift_unknownObjectRetain();
          result = swift_unknownObjectRelease();
          v12 = v9;
          if (!*(_BYTE *)(v9 + 18)) {
            goto LABEL_51;
          }
        }
      }

      result = swift_unknownObjectRetain_n();
      uint64_t v7 = 0LL;
      v8 = v6;
      uint64_t v9 = v17;
LABEL_51:
      v29 = *(unsigned __int16 *)(v9 + 16);
      if (!*(_WORD *)(v9 + 16)) {
        goto LABEL_63;
      }
      v30 = *(void *)(v9 + 24);
      v15 = __OFSUB__(v8, v30);
      v31 = (void *)((char *)v8 - v30);
      if (v15) {
        goto LABEL_287;
      }
      if (__OFADD__(v31, 1LL)) {
        goto LABEL_288;
      }
      if ((uint64_t)v31 + 1 < 1)
      {
        v29 = 0LL;
      }

      else
      {
        if ((_DWORD)v29 == 1)
        {
          v8 = v31;
LABEL_63:
          if (v8) {
            goto LABEL_286;
          }
          goto LABEL_64;
        }

        v32 = (uint64_t *)(v9 + 48);
        v33 = 1LL;
        while (1)
        {
          v34 = *v32;
          v32 += 3;
          v8 = (void *)((char *)v31 - v34);
          if (__OFSUB__(v31, v34)) {
            goto LABEL_270;
          }
          if (__OFADD__(v8, 1LL)) {
            goto LABEL_271;
          }
          ++v33;
          v31 = v8;
          if (v29 == v33) {
            goto LABEL_63;
          }
        }

        v29 = v33;
        v8 = v31;
      }

  v27 = v101;
  if (!v101) {
    return MEMORY[0x18961AFF0];
  }
  if (v101 != *(void *)(v1 + 16))
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, AttributedString._AttributeValue>);
    v49 = static _DictionaryStorage.allocate(capacity:)();
    v50 = 0LL;
    v51 = *v100;
    v52 = v49 + 64;
    while (1)
    {
      if (v51)
      {
        v56 = __clz(__rbit64(v51));
        v51 &= v51 - 1;
        v57 = v56 | (v50 << 6);
      }

      else
      {
        v58 = v50 + 1;
        if (__OFADD__(v50, 1LL)) {
          goto LABEL_147;
        }
        if (v58 >= v99) {
          return v49;
        }
        v59 = v100[v58];
        ++v50;
        if (!v59)
        {
          v50 = v58 + 1;
          if (v58 + 1 >= v99) {
            return v49;
          }
          v59 = v100[v50];
          if (!v59)
          {
            v50 = v58 + 2;
            if (v58 + 2 >= v99) {
              return v49;
            }
            v59 = v100[v50];
            if (!v59)
            {
              v50 = v58 + 3;
              if (v58 + 3 >= v99) {
                return v49;
              }
              v59 = v100[v50];
              if (!v59)
              {
                v60 = v58 + 4;
                if (v60 >= v99) {
                  return v49;
                }
                v59 = v100[v60];
                if (!v59)
                {
                  while (1)
                  {
                    v50 = v60 + 1;
                    if (__OFADD__(v60, 1LL)) {
                      break;
                    }
                    if (v50 >= v99) {
                      return v49;
                    }
                    v59 = v100[v50];
                    ++v60;
                    if (v59) {
                      goto LABEL_96;
                    }
                  }

  __break(1u);
LABEL_37:
  __break(1u);
  return result;
}

  v157 = v2;
  v158 = v9;
  v159 = v10;
  v160 = v147;
  v161 = v27;
  v162 = v17;
  v163 = v28;
  v164 = v30;
  specialized IndexingIterator.next()();
  if (v31)
  {
    v1 = v31;
    v145 = MEMORY[0x18961AFF0];
    v142 = (__int128 *)(v2 + 2);
    v129 = v2;
    while (1)
    {
      v32 = v130;
      v33 = v143;
      while (1)
      {
        v34 = v142[1];
        v176 = *v142;
        v177 = v34;
        v178 = v142[2];
        BigString.utf8.getter();
        v143 = BigString.UTF8View.index(_:offsetBy:)();
        v36 = v35;
        outlined release of Locale((uint64_t)v167);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v37 = specialized AttributedString._AttributeStorage.containsScalarConstraint.getter(v1);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if ((v37 & 1) != 0) {
          break;
        }
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        specialized IndexingIterator.next()();
        v1 = v38;
        v32 = v36;
        v33 = v143;
        if (!v38) {
          goto LABEL_148;
        }
      }

      v128 = v1;
      v141 = v32;
      v130 = v36;
      if (v143 >> 10 > v33 >> 10) {
        break;
      }
LABEL_145:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      specialized IndexingIterator.next()();
      v1 = v102;
      if (!v102) {
        goto LABEL_148;
      }
    }

    v11 = v33;
    v2 = v129;
    v144 = v1 + 64;
    v127 = v1 + 104;
    v39 = v142;
LABEL_45:
    v40 = v39[1];
    v173 = *v39;
    v174 = v40;
    v175 = v39[2];
    BigString.unicodeScalars.getter();
    v17 = v141;
    LODWORD(v146) = BigString.UnicodeScalarView.subscript.getter();
    outlined release of Locale((uint64_t)v168);
    v41 = v39[1];
    v170 = *v39;
    v171 = v41;
    v172 = v39[2];
    BigString.unicodeScalars.getter();
    v42 = BigString.UnicodeScalarView.index(after:)();
    v141 = v43;
    outlined release of Locale((uint64_t)v169);
    v44 = 1LL << *(_BYTE *)(v1 + 32);
    uint64_t v9 = (unint64_t)(v44 + 63) >> 6;
    if (v44 < 64) {
      v45 = ~(-1LL << v44);
    }
    else {
      v45 = -1LL;
    }
    v46 = v45 & *(void *)(v1 + 64);
    v139 = v11 >> 11;
    v140 = v42;
    v138 = v42 >> 11;
    v136 = v9 - 1;
    swift_bridgeObjectRetain();
    v48 = 0LL;
    v147 = v9;
    v137 = v9 - 5;
    if (!v46)
    {
LABEL_54:
      v54 = v48 + 1;
      if (__OFADD__(v48, 1LL))
      {
        __break(1u);
LABEL_186:
        v121 = 1LL;
        v14 = v47;
        goto LABEL_194;
      }

      if (v54 >= v147)
      {
        v56 = v48;
      }

      else
      {
        v55 = *(void *)(v144 + 8 * v54);
        if (v55)
        {
LABEL_57:
          v46 = (v55 - 1) & v55;
          v50 = __clz(__rbit64(v55)) + (v54 << 6);
          v48 = v54;
          goto LABEL_53;
        }

        v56 = v48 + 1;
        if (v48 + 2 < v147)
        {
          v55 = *(void *)(v144 + 8 * (v48 + 2));
          if (v55)
          {
            v54 = v48 + 2;
            goto LABEL_57;
          }

          v56 = v48 + 2;
          if (v48 + 3 < v147)
          {
            v55 = *(void *)(v144 + 8 * (v48 + 3));
            if (v55)
            {
              v54 = v48 + 3;
              goto LABEL_57;
            }

            v54 = v48 + 4;
            v56 = v48 + 3;
            if (v48 + 4 < v147)
            {
              v55 = *(void *)(v144 + 8 * v54);
              if (v55) {
                goto LABEL_57;
              }
              while (v137 != v48)
              {
                v55 = *(void *)(v127 + 8 * v48++);
                if (v55)
                {
                  v54 = v48 + 4;
                  goto LABEL_57;
                }
              }

              v56 = v136;
            }
          }
        }
      }

      v46 = 0LL;
      v151 = 0LL;
      memset(v150, 0, sizeof(v150));
      v48 = v56;
      v149 = 0u;
      goto LABEL_60;
    }

    while (1)
    {
      while (1)
      {
        v49 = __clz(__rbit64(v46));
        v46 &= v46 - 1;
        v50 = v49 | (v48 << 6);
LABEL_53:
        v51 = *(void *)(v1 + 56);
        v52 = (void *)(*(void *)(v1 + 48) + 16 * v50);
        v53 = v52[1];
        *(void *)&v149 = *v52;
        *((void *)&v149 + 1) = v53;
        outlined init with copy of AttributedString._AttributeValue(v51 + 72 * v50, (uint64_t)v150);
        swift_bridgeObjectRetain();
LABEL_60:
        outlined init with take of (key: String, value: AttributedString._AttributeValue)?( (uint64_t)&v149,  (uint64_t)&v152);
        v17 = v153;
        if (!v153)
        {
          swift_release();
          v11 = v140;
          v39 = v142;
          if (v143 >> 10 <= v140 >> 10) {
            goto LABEL_145;
          }
          goto LABEL_45;
        }

        uint64_t v9 = v152;
        v11 = v155;
        v57 = v156;
        outlined copy of AttributedString.AttributeRunBoundaries?(v155, v156);
        outlined destroy of AttributedString._AttributeValue((uint64_t)&v154);
        if (v57 >= 2) {
          break;
        }
LABEL_51:
        swift_bridgeObjectRelease();
        if (!v46) {
          goto LABEL_54;
        }
      }

      v58 = HIBYTE(v57) & 0xF;
      if ((v57 & 0x2000000000000000LL) == 0) {
        v58 = v11 & 0xFFFFFFFFFFFFLL;
      }
      if (!v58)
      {
        outlined consume of AttributedString.AttributeRunBoundaries?(v11, v57);
        goto LABEL_51;
      }

      if ((v57 & 0x1000000000000000LL) != 0)
      {
        v60 = _StringGuts.foreignErrorCorrectedScalar(startingAt:)();
      }

      else if ((v57 & 0x2000000000000000LL) != 0)
      {
        if ((v11 & 0x80) != 0) {
          __asm { BR              X10 }
        }

        v60 = v11;
      }

      else
      {
        if ((v11 & 0x1000000000000000LL) != 0) {
          v59 = (char *)((v57 & 0xFFFFFFFFFFFFFFFLL) + 32);
        }
        else {
          v59 = (char *)_StringObject.sharedUTF8.getter();
        }
        v60 = *v59;
        if (*v59 < 0) {
          __asm { BR              X9 }
        }
      }

      outlined consume of AttributedString.AttributeRunBoundaries?(v11, v57);
      if (v60 == (_DWORD)v146) {
        goto LABEL_51;
      }
      if (v138 < v139) {
        goto LABEL_207;
      }
      swift_bridgeObjectRetain();
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      *(void *)&v149 = v145;
      v63 = specialized __RawDictionaryStorage.find<A>(_:)(v9, v17);
      v64 = *(void *)(v145 + 16);
      v133 = v62;
      v65 = (v62 & 1) == 0;
      v66 = v64 + v65;
      if (__OFADD__(v64, v65))
      {
LABEL_208:
        __break(1u);
LABEL_209:
        __break(1u);
LABEL_210:
        __break(1u);
LABEL_211:
        __break(1u);
LABEL_212:
        __break(1u);
        goto LABEL_213;
      }

      if (*(void *)(v145 + 24) >= v66)
      {
        if ((isUniquelyReferenced_nonNull_native & 1) != 0)
        {
          v67 = v145;
          v70 = v62;
        }

        else
        {
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, [Range<Int>]>);
          v81 = static _DictionaryStorage.copy(original:)();
          v67 = v81;
          v70 = v133;
          if (*(void *)(v145 + 16))
          {
            v132 = v63;
            v82 = (char *)(v81 + 64);
            v83 = (char *)(v145 + 64);
            v84 = (unint64_t)((1LL << *(_BYTE *)(v67 + 32)) + 63) >> 6;
            v125 = v145 + 64;
            if (v67 != v145 || v82 >= &v83[8 * v84]) {
              memmove(v82, v83, 8 * v84);
            }
            v85 = 0LL;
            v135 = v67;
            *(void *)(v67 + 16) = *(void *)(v145 + 16);
            v86 = 1LL << *(_BYTE *)(v145 + 32);
            if (v86 < 64) {
              v87 = ~(-1LL << v86);
            }
            else {
              v87 = -1LL;
            }
            v88 = v87 & *(void *)(v145 + 64);
            v126 = (unint64_t)(v86 + 63) >> 6;
            while (1)
            {
              if (v88)
              {
                v89 = __clz(__rbit64(v88));
                v88 &= v88 - 1;
                v90 = v85;
                v91 = v89 | (v85 << 6);
              }

              else
              {
                v98 = v85 + 1;
                if (__OFADD__(v85, 1LL)) {
                  goto LABEL_223;
                }
                v67 = v135;
                v63 = v132;
                if (v98 >= v126) {
                  break;
                }
                v99 = *(void *)(v125 + 8 * v98);
                v100 = v85 + 1;
                if (!v99)
                {
                  v100 = v85 + 2;
                  if (v85 + 2 >= v126) {
                    break;
                  }
                  v99 = *(void *)(v125 + 8 * v100);
                  if (!v99)
                  {
                    v100 = v85 + 3;
                    if (v85 + 3 >= v126) {
                      break;
                    }
                    v99 = *(void *)(v125 + 8 * v100);
                    if (!v99)
                    {
                      v100 = v85 + 4;
                      if (v85 + 4 >= v126) {
                        break;
                      }
                      v99 = *(void *)(v125 + 8 * v100);
                      if (!v99)
                      {
                        v100 = v85 + 5;
                        if (v85 + 5 >= v126) {
                          break;
                        }
                        v99 = *(void *)(v125 + 8 * v100);
                        if (!v99)
                        {
                          v100 = v85 + 6;
                          if (v85 + 6 >= v126) {
                            break;
                          }
                          v99 = *(void *)(v125 + 8 * v100);
                          if (!v99)
                          {
                            v101 = v85 + 7;
                            if (v85 + 7 >= v126) {
                              break;
                            }
                            v99 = *(void *)(v125 + 8 * v101);
                            if (!v99)
                            {
                              v1 = v128;
                              v2 = v129;
                              v67 = v135;
                              v63 = v132;
                              v70 = v133;
                              while (1)
                              {
                                v100 = v101 + 1;
                                if (__OFADD__(v101, 1LL)) {
                                  goto LABEL_224;
                                }
                                if (v100 >= v126) {
                                  goto LABEL_144;
                                }
                                v99 = *(void *)(v125 + 8 * v100);
                                ++v101;
                                if (v99) {
                                  goto LABEL_143;
                                }
                              }
                            }

                            v100 = v85 + 7;
                            v1 = v128;
                            v2 = v129;
                          }
                        }
                      }
                    }
                  }
                }

      v69 = *(void *)(v7 - 200);
      v70 = dispatch thunk of BinaryInteger._lowWord.getter();
      v71 = v69;
      v8 = *(void (**)(uint64_t, uint64_t))(v7 - 208);
      v8(v71, v1);
      if (*(void *)(v7 - 96) >= v70) {
        break;
      }
      goto LABEL_40;
    }

    if (v62 <= 63) {
      goto LABEL_36;
    }
    *(void *)(v7 - 128) = 0x7FFFFFFFFFFFFFFFLL;
    v35 = *(void (**)(uint64_t, uint64_t))(v7 - 336);
    (*(void (**)(void (*)(uint64_t, uint64_t), void, uint64_t))(v7 - 280))( v35,  *(void *)(v7 - 200),  v1);
    v73 = *(void *)(v7 - 352);
    dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
    v74 = dispatch thunk of static Comparable.< infix(_:_:)();
    v75 = v73;
    v8 = *(void (**)(uint64_t, uint64_t))(v7 - 208);
    v8(v75, v1);
    v8((uint64_t)v35, v1);
    if ((v74 & 1) == 0) {
      break;
    }
LABEL_40:
    __break(1u);
LABEL_41:
    v76 = dispatch thunk of static BinaryInteger.isSigned.getter();
    v77 = dispatch thunk of BinaryInteger.bitWidth.getter();
    if ((v76 & 1) == 0)
    {
      if (v77 < 64)
      {
        v86 = *(void *)(v7 - 344);
        v39 = dispatch thunk of BinaryInteger._lowWord.getter();
        v40 = v86;
LABEL_53:
        v8(v40, v1);
        if (v39 < *(void *)(v7 - 96)) {
          goto LABEL_54;
        }
      }

      else
      {
        v8(*(void *)(v7 - 344), v1);
      }

      goto LABEL_8;
    }

    if (v77 > 64)
    {
      v78 = *(void *)(v7 - 336);
      dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
      v39 = *(void *)(v7 - 344);
      v79 = dispatch thunk of static Comparable.< infix(_:_:)();
      v80 = v78;
      v8 = *(void (**)(uint64_t, uint64_t))(v7 - 208);
      v8(v80, v1);
      v8(v39, v1);
      if ((v79 & 1) != 0) {
        goto LABEL_54;
      }
      goto LABEL_8;
    }

          Hasher._combine(_:)(0);
          if (v21) {
            goto LABEL_32;
          }
          goto LABEL_37;
        }

  Hasher._combine(_:)(0);
  if (!v18) {
    goto LABEL_37;
  }
LABEL_32:
  Hasher._combine(_:)(1u);
  type metadata accessor for CFDictionaryRef(0LL);
  lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef();
  v28 = v18;
  _CFObject.hash(into:)();

  if (v20)
  {
LABEL_33:
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0LL);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef();
    v29 = v20;
    _CFObject.hash(into:)();

    goto LABEL_39;
  }

  Hasher._combine(_:)(0);
  if (!v21) {
    goto LABEL_37;
  }
LABEL_32:
  Hasher._combine(_:)(1u);
  type metadata accessor for CFDictionaryRef(0LL);
  lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( (unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef,  (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef,  (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
  v31 = v21;
  _CFObject.hash(into:)();

  if (v23)
  {
LABEL_33:
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0LL);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( (unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef,  (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef,  (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
    v32 = v23;
    _CFObject.hash(into:)();

    goto LABEL_39;
  }

  free(v10);
  return (id)[MEMORY[0x189603F48] data];
}

  v19[1] = 0LL;
  v19[2] = 0LL;
  v18.receiver = self;
  v18.super_class = (Class)&OBJC_CLASS___NSKeyValueIvarGetter;
  v19[0] = a6;
  return -[NSKeyValueAccessor initWithContainerClassID:key:implementation:selector:extraArguments:count:]( &v18,  sel_initWithContainerClassID_key_implementation_selector_extraArguments_count_,  a3,  a4,  v12,  0LL,  v19,  1LL);
}

  if (_NSKVONotifyingMutatorsShouldNotifyForIsaAndKey(a5, a4)) {
    return -[NSKeyValueAccessor initWithContainerClassID:key:implementation:selector:extraArguments:count:]( &v20,  sel_initWithContainerClassID_key_implementation_selector_extraArguments_count_,  a3,  a4,  _NSSetValueAndNotifyForKeyInIvar,  0LL,  &v21,  3LL,  v19.receiver,  v19.super_class,  self,  &OBJC_CLASS___NSKeyValueIvarSetter,  a4,  a6,  v13,  v22);
  }
  else {
    return -[NSKeyValueAccessor initWithContainerClassID:key:implementation:selector:extraArguments:count:]( &v19,  sel_initWithContainerClassID_key_implementation_selector_extraArguments_count_,  a3,  a4,  v13,  0LL,  &v21,  2LL,  self,  &OBJC_CLASS___NSKeyValueIvarSetter,  v20.receiver,  v20.super_class,  a4,  a6,  0LL,  v22);
  }
}

        ++v7;
        v2 = v26;
      }

      while (v5 > 0);
      os_unfair_lock_unlock(v2);
      if (v6)
      {
        v24 = (id *)__ptr;
        do
        {
          v25 = *v24++;

          --v6;
        }

        while (v6);
      }

      if (__ptr != __src) {
        free(__ptr);
      }
    }
  }

      v33 = vcvtd_n_s64_f64(v32 + v31, 0x20uLL);
      v34 = 0x100000000LL;
      v35 = v33;
      do
      {
        v36 = v35;
        v35 = v34;
        v34 = v36 % v34;
      }

      while (v34);
      *(void *)result = v33 / v35;
      v8 = 0x100000000LL / v35;
      goto LABEL_39;
    }
  }

  return result;
}

      v33 = vcvtd_n_s64_f64(v32 - v31, 0x20uLL);
      v34 = 0x100000000LL;
      v35 = v33;
      do
      {
        v36 = v35;
        v35 = v34;
        v34 = v36 % v34;
      }

      while (v34);
      *(void *)result = v33 / v35;
      v8 = 0x100000000LL / v35;
      goto LABEL_39;
    }
  }

  return result;
}

  result = *(void *)(a1 + 48) + *(void *)(a1 + 56);
  *(void *)(a1 + 40) = result;
  return result;
}

        LODWORD(a1) = 0;
        goto LABEL_37;
      }
    }

    goto LABEL_35;
  }

  uint64_t v9 = [a3 decodeObjectOfClass:objc_opt_class() forKey:@"NS.minimalBookmarkData"];
  if (!v9) {
    goto LABEL_18;
  }
  v10 = v9;
  if (a1)
  {
    v11 = (void *)[MEMORY[0x189604030] URLByResolvingBookmarkData:v10 options:768 relativeToURL:0 bookmarkDataIsStale:0 error:0];
    if (v11)
    {
      v12 = objc_msgSend((id)objc_msgSend(v11, "filePathURL"), "absoluteString");
      if (v12)
      {
        v13 = (const __CFString *)v12;
        result = -[objc_class initWithString:](a1, "initWithString:", v12);
        if (result) {
          return result;
        }
        v15 = v13;
        v16 = 0LL;
        goto LABEL_22;
      }

    if (!v8) {
      goto LABEL_46;
    }
LABEL_39:
    if (*(void *)(a2 + 64))
    {
      v22 = 0LL;
      v8 = 1LL;
      for (m = 128LL; m != 148; ++m)
      {
        if (*(void *)(a3 + 8 * m) > v22)
        {
          v8 = m;
          v22 = *(void *)(a3 + 8 * m);
        }
      }
    }

    else
    {
      v8 = 1LL;
    }

    goto LABEL_46;
  }

  v20 = 1LL;
  if (v8) {
    goto LABEL_39;
  }
LABEL_46:
  if (v11) {
    v24 = 160LL;
  }
  else {
    v24 = 0LL;
  }
  if (v10) {
    v25 = 192LL;
  }
  else {
    v25 = 0LL;
  }
  return NSOrthographyFlagsForScriptAndOrthographyIndexes(v4, v20, v8, v24, v25, v12);
}

void sub_182EB40C4(uint64_t a1, int a2)
{
  if (a2)
  {
    objc_end_catch();
    JUMPOUT(0x182EB40E0LL);
  }

  JUMPOUT(0x182EB4258LL);
}

void sub_182EB40F4(_Unwind_Exception *a1)
{
}

void sub_182EB4120(uint64_t a1, int a2)
{
  if (a2) {
    JUMPOUT(0x182EB412CLL);
  }
  JUMPOUT(0x182EB4258LL);
}

void sub_182EB4204(uint64_t a1, int a2)
{
  if (a2)
  {
    objc_end_catch();
    JUMPOUT(0x182EB421CLL);
  }

  JUMPOUT(0x182EB4258LL);
}

void sub_182EB4230( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, _Unwind_Exception *exception_object)
{
}

void sub_182EB4238()
{
}

void sub_182EB4240(_Unwind_Exception *a1)
{
  if (v1) {
    objc_end_catch();
  }
  _Block_object_dispose((const void *)(v2 - 240), 8);
  _Unwind_Resume(a1);
}

os_unfair_lock_s *sub_182EB4260(uint64_t a1, int a2)
{
  if (!a2) {
    JUMPOUT(0x182EB4258LL);
  }
  objc_terminate();
  return -[_NSXPCConnectionExportedObjectTable exportedObjectForProxyNumber:](v2, v3);
}

uint64_t _NSXPCSerializationStartRead(void *a1, void *a2, uint64_t a3)
{
  v9[1] = *MEMORY[0x1895F89C0];
  v9[0] = 0LL;
  data = xpc_dictionary_get_data(a1, "root", v9);
  size_t v6 = v9[0];
  if (data) {
    BOOL v7 = (int64_t)v9[0] < 9;
  }
  else {
    BOOL v7 = 1;
  }
  if (v7) {
    return 0LL;
  }
  *a2 = data;
  a2[1] = v6;
  if (*data != 0x37317473696C7062LL) {
    return 0LL;
  }
  a2[2] = CFDictionaryCreateMutable(0LL, 0LL, 0LL, MEMORY[0x189605250]);
  *(_DWORD *)(a3 + _Block_object_dispose((const void *)(v11 - 240), 8) = 255;
  *(void *)a3 = 8LL;
  *(_DWORD *)(a3 + _Block_object_dispose((const void *)(v11 - 240), 8) = *(_BYTE *)(*a2 + 8LL) & 0xF0;
  return 1LL;
}

uint64_t _NSXPCSerializationASCIIStringForObject(uint64_t *a1, unint64_t *a2)
{
  v6[1] = *MEMORY[0x1895F89C0];
  unint64_t v2 = *a2;
  uint64_t v4 = 0LL;
  if (!v2) {
    return 0LL;
  }
  return 0LL;
}

uint64_t _getASCIIStringAtMarker( uint64_t *a1, void *a2, unint64_t a3, uint64_t *a4, unint64_t *a5)
{
  v22[1] = *MEMORY[0x1895F89C0];
  v22[0] = a3;
  unint64_t v5 = a1[1];
  if (v5 <= a3) {
    return 0LL;
  }
  char v10 = *(_BYTE *)(*a1 + a3);
  if ((v10 & 0xF0) == 0x80)
  {
    uint64_t result = _getReferenceAtMarker(a1, v22, a3, a5);
    if ((_DWORD)result) {
      return _getASCIIStringAtMarker(a1, a2, v22[0], a4, &v21);
    }
    return result;
  }

  if ((v10 & 0xF0) != 0x70) {
    return 0LL;
  }
  uint64_t v12 = v10 & 0xF;
  unint64_t v13 = a3 + 1;
  uint64_t v21 = v12;
  v22[0] = v13;
  if (v13 >= v5) {
    return 0LL;
  }
  if ((_DWORD)v12 == 15)
  {
    uint64_t result = _getIntAtMarker(a1, &v21, v13, v22);
    if (!(_DWORD)result) {
      return result;
    }
    uint64_t result = 0LL;
    unint64_t v13 = v22[0] + 1;
    uint64_t v14 = v22[0] == -1LL;
    uint64_t v15 = v14 << 63 >> 63;
    if (v15 != v14 || v15 < 0) {
      return result;
    }
    if (a1[1] <= v13) {
      return 0LL;
    }
    uint64_t v12 = v21;
  }

  BOOL v16 = v12 < 1;
  uint64_t v17 = v12 - 1;
  if (v16) {
    return 0LL;
  }
  uint64_t result = 0LL;
  unint64_t v18 = v13 + v17;
  uint64_t v19 = __CFADD__(v13, v17);
  uint64_t v20 = v19 << 63 >> 63;
  *a5 = v18;
  if (v20 == v19 && (v20 & 0x8000000000000000LL) == 0)
  {
    if (a1[1] > v18 && !*(_BYTE *)(*a1 + v18))
    {
      *a2 = *a1 + v13;
      *a4 = v17;
      return 1LL;
    }

    return 0LL;
  }

  return result;
}

void sub_182EB4EE4(void *a1)
{
}

void sub_182EB4EFC(_Unwind_Exception *a1)
{
}

uint64_t _getLastByteOfValueIncludingMarker(void *a1, unint64_t a2, unint64_t *a3)
{
  v23[1] = *MEMORY[0x1895F89C0];
  unint64_t v3 = a1[1];
  if (v3 <= a2) {
    return 0LL;
  }
  uint64_t result = 0LL;
  char v6 = *(_BYTE *)(*a1 + a2);
  int v7 = v6 & 0xF0;
  switch((v7 - 16) >> 4)
  {
    case 0u:
    case 7u:
    case 0xEu:
      unint64_t v9 = a2 + (v6 & 0xF);
      *a3 = v9;
      if (__CFADD__(a2, v6 & 0xF) || v9 >= a1[1]) {
        return 0LL;
      }
      goto LABEL_34;
    case 1u:
      if ((v6 & 0xF) == 3)
      {
        uint64_t result = 0LL;
        BOOL v19 = __CFADD__(a2, 8LL);
        unint64_t v13 = a2 + 8;
      }

      else
      {
        if ((v6 & 0xF) != 2) {
          return 0LL;
        }
        uint64_t result = 0LL;
        BOOL v19 = __CFADD__(a2, 4LL);
        unint64_t v13 = a2 + 4;
      }

      uint64_t v20 = v19;
      uint64_t v21 = v20 << 63 >> 63;
      *a3 = v13;
      if (v21 != v20 || v21 < 0) {
        return result;
      }
LABEL_33:
      if (a1[1] <= v13) {
        return 0LL;
      }
LABEL_34:
      uint64_t result = 1LL;
      break;
    case 3u:
    case 5u:
    case 6u:
      uint64_t v10 = v6 & 0xF;
      uint64_t v22 = v10;
      if ((v6 & 0xF) == 0) {
        goto LABEL_18;
      }
      if ((_DWORD)v10 == 15)
      {
        v23[0] = a2 + 1;
        if (a2 + 1 >= v3) {
          return 0LL;
        }
        a2 = v23[0];
        if (v23[0] >= a1[1]) {
          return 0LL;
        }
        uint64_t v10 = v22;
        if (v22 < 0) {
          return 0LL;
        }
      }

      uint64_t v11 = v10 << (v7 == 96);
      uint64_t v12 = v11 >> 63;
      BOOL v19 = __CFADD__(a2, v11);
      unint64_t v13 = a2 + v11;
      uint64_t v14 = v19 ? v12 + 1 : v12;
      uint64_t v15 = v14 << 63 >> 63;
      *a3 = v13;
      if (v15 != v14 || v15 < 0) {
        return 0LL;
      }
      goto LABEL_33;
    case 9u:
    case 0xCu:
      uint64_t result = 0LL;
      uint64_t v16 = a2 >= 0xFFFFFFFFFFFFFFF7LL;
      uint64_t v17 = v16 << 63 >> 63;
      if (v17 != v16 || v17 < 0 || v3 <= a2 + 9) {
        return result;
      }
      unint64_t v18 = *(void *)(a2 + *a1 + 1);
      *a3 = v18;
      if (v18 >= v3) {
        return 0LL;
      }
      goto LABEL_34;
    case 0xAu:
    case 0xBu:
    case 0xDu:
LABEL_18:
      *a3 = a2;
      goto LABEL_34;
    default:
      return result;
  }

  return result;
}

void _NSXPCSerializationDecodeInvocationArgumentArray( void *a1, void *a2, void *a3, uint64_t *a4, void *a5, void *a6)
{
  v35 = a3;
  uint64_t v39 = *MEMORY[0x1895F89C0];
  unsigned int v11 = [a2 numberOfArguments];
  else {
    uint64_t v12 = 2LL;
  }
  uint64_t v34 = v12;
  if ((int)v12 < (int)v11)
  {
    uint64_t v13 = *a5;
    unint64_t v14 = *a5 + 9LL;
    uint64_t v15 = *a5 >= 0xFFFFFFFFFFFFFFF7LL;
    uint64_t v16 = v15 << 63 >> 63;
    if (v16 != v15 || v16 < 0 || a4[1] <= v14)
    {
      objc_exception_throw((id)[MEMORY[0x189603F70] exceptionWithName:@"NSInvalidUnarchiveOperationException" reason:@"Expected to find array of NSInvocation arguments but there were no entries" userInfo:0]);
LABEL_33:
      __break(1u);
      return;
    }

    v33 = a5;
    unint64_t v17 = *(void *)(v13 + *a4 + 1);
    unint64_t v37 = v14;
    unint64_t v38 = v17;
    uint64_t v18 = v11;
    if (v11 > (unint64_t)v34)
    {
      uint64_t v19 = v34;
      while (1)
      {
        if (v14 > v38 || v14 >= a4[1])
        {
          objc_exception_throw((id)[MEMORY[0x189603F70] exceptionWithName:@"NSInvalidUnarchiveOperationException" reason:@"Expected to find entry in array of NSInvocation arguments but there were no entries" userInfo:0]);
          goto LABEL_33;
        }

        char v20 = *(_BYTE *)(*a4 + v14);
        unint64_t v21 = [a2 _argInfo:v19];
        unint64_t v22 = v21;
        if ((*(_WORD *)(v21 + 34) & 0x80) != 0) {
          unint64_t v22 = *(void *)v21;
        }
        if (a6 && (unint64_t v21 = [a6 count], v21 > v19 - v34))
        {
          unint64_t v21 = objc_msgSend(a6, "objectAtIndex:");
          uint64_t v23 = v21;
        }

        else
        {
          uint64_t v23 = 0LL;
        }

        if ((*(_WORD *)(v22 + 34) & 0x1000) != 0)
        {
          if ((v20 & 0xF0) == 0xE0)
          {
            [a1 setArgument:&_NSXPCSerializationDecodeInvocationArgumentArray_argument atIndex:v19];
          }

          else
          {
            unint64_t v26 = v22;
            do
            {
              unint64_t v27 = v26;
              if ((*(_WORD *)(v26 + 34) & 0x1000) == 0) {
                break;
              }
              unint64_t v26 = *(void *)v26;
            }

            while (*(void *)v27);
            unint64_t v28 = *(unsigned int *)(v27 + 16);
            v29 = (void *)[MEMORY[0x189603FB8] dataWithLength:v28];
            v36 = (unsigned __int8 *)[v29 mutableBytes];
            [a1 _addAttachedObject:v29];
            _NSXPCSerializationDecodeTypedObjCValuesFromArray( v35,  a4,  (_BYTE *)(*(void *)v22 + 37LL),  v36,  v28,  0LL,  (uint64_t)v33,  &v37,  (uint64_t)a1,  v23);
            [a1 setArgument:&v36 atIndex:v19];
          }
        }

        else
        {
          MEMORY[0x1895F8858](v21);
          v25 = (unsigned __int8 *)&v32 - ((v24 + 15) & 0x1FFFFFFF0LL);
          _NSXPCSerializationDecodeTypedObjCValuesFromArray( v35,  a4,  (_BYTE *)(v22 + 37),  v25,  v24,  0LL,  (uint64_t)v33,  &v37,  (uint64_t)a1,  v23);
          [a1 setArgument:v25 atIndex:v19];
        }

        _getLastByteOfValueIncludingMarker(a4, v37, &v37);
        unint64_t v14 = v37 + 1;
        uint64_t v30 = v37 == -1LL;
        uint64_t v31 = v30 << 63 >> 63;
        ++v37;
        if (v31 != v30 || v31 < 0) {
          break;
        }
        if (++v19 == v18) {
          return;
        }
      }

      objc_exception_throw((id)[MEMORY[0x189603F70] exceptionWithName:@"NSInvalidUnarchiveOperationException" reason:@"Overflow of array data" userInfo:0]);
      goto LABEL_33;
    }
  }

void sub_182EB56D8()
{
}

void _NSXPCSerializationDecodeTypedObjCValuesFromArray( void *a1, uint64_t *a2, _BYTE *a3, unsigned __int8 *a4, unint64_t a5, uint64_t a6, uint64_t a7, unint64_t *a8, uint64_t a9, uint64_t a10)
{
  uint64_t v60 = *MEMORY[0x1895F89C0];
  unint64_t v17 = _xpc_skipAttributesOfType(a3);
  int v18 = *v17;
  if (v18 > 90)
  {
    switch(*v17)
    {
      case 'c':
        unint64_t v22 = *a8;
        if (*a8 > a8[1] || v22 >= a2[1]) {
          goto LABEL_103;
        }
        unint64_t v58 = *a8;
        int v59 = *(_BYTE *)(*a2 + v22) & 0xF0;
        if (!a5) {
          goto LABEL_104;
        }
        unsigned __int8 v23 = -[NSNumber charValue](_NSXPCSerializationNumberForObject(a2, &v58), "charValue");
LABEL_59:
        *a4 = v23;
        return;
      case 'd':
        unint64_t v39 = *a8;
        if (*a8 > a8[1] || v39 >= a2[1]) {
          goto LABEL_103;
        }
        unint64_t v58 = *a8;
        int v59 = *(_BYTE *)(*a2 + v39) & 0xF0;
        if (a5 <= 7) {
          goto LABEL_104;
        }
        -[NSNumber doubleValue](_NSXPCSerializationNumberForObject(a2, &v58), "doubleValue");
        *(void *)a4 = v40;
        return;
      case 'e':
      case 'g':
      case 'h':
      case 'j':
      case 'k':
      case 'm':
      case 'n':
      case 'o':
      case 'p':
      case 'r':
        goto LABEL_108;
      case 'f':
        unint64_t v41 = *a8;
        if (*a8 > a8[1] || v41 >= a2[1]) {
          goto LABEL_103;
        }
        unint64_t v58 = *a8;
        int v59 = *(_BYTE *)(*a2 + v41) & 0xF0;
        if (a5 <= 3) {
          goto LABEL_104;
        }
        -[NSNumber floatValue](_NSXPCSerializationNumberForObject(a2, &v58), "floatValue");
        *(_DWORD *)a4 = v42;
        return;
      case 'i':
        unint64_t v43 = *a8;
        if (*a8 > a8[1] || v43 >= a2[1]) {
          goto LABEL_103;
        }
        unint64_t v58 = *a8;
        int v59 = *(_BYTE *)(*a2 + v43) & 0xF0;
        if (a5 <= 3) {
          goto LABEL_104;
        }
        int v44 = -[NSNumber intValue](_NSXPCSerializationNumberForObject(a2, &v58), "intValue");
        goto LABEL_89;
      case 'l':
        unint64_t v45 = *a8;
        if (*a8 > a8[1] || v45 >= a2[1]) {
          goto LABEL_103;
        }
        unint64_t v58 = *a8;
        int v59 = *(_BYTE *)(*a2 + v45) & 0xF0;
        if (a5 <= 7) {
          goto LABEL_104;
        }
        unint64_t v21 = -[NSNumber longValue](_NSXPCSerializationNumberForObject(a2, &v58), "longValue");
        goto LABEL_98;
      case 'q':
        unint64_t v46 = *a8;
        if (*a8 > a8[1] || v46 >= a2[1]) {
          goto LABEL_103;
        }
        unint64_t v58 = *a8;
        int v59 = *(_BYTE *)(*a2 + v46) & 0xF0;
        if (a5 <= 7) {
          goto LABEL_104;
        }
        unint64_t v21 = -[NSNumber longLongValue](_NSXPCSerializationNumberForObject(a2, &v58), "longLongValue");
        goto LABEL_98;
      case 's':
        unint64_t v47 = *a8;
        if (*a8 > a8[1] || v47 >= a2[1]) {
          goto LABEL_103;
        }
        unint64_t v58 = *a8;
        int v59 = *(_BYTE *)(*a2 + v47) & 0xF0;
        if (a5 <= 1) {
          goto LABEL_104;
        }
        __int16 v34 = -[NSNumber shortValue](_NSXPCSerializationNumberForObject(a2, &v58), "shortValue");
        goto LABEL_84;
      default:
        if (v18 != 91 && v18 != 123) {
          goto LABEL_108;
        }
        _xpc_walkDataStructure(a1, 0LL, a2, v17, (uint64_t)a3, (uint64_t)a4, a5, 0, a9, a10, a7, a8);
        return;
    }
  }

  if (v18 > 72)
  {
    if (v18 > 80)
    {
      if (v18 == 81)
      {
        unint64_t v49 = *a8;
        if (*a8 > a8[1] || v49 >= a2[1]) {
          goto LABEL_103;
        }
        unint64_t v58 = *a8;
        int v59 = *(_BYTE *)(*a2 + v49) & 0xF0;
        if (a5 <= 7) {
          goto LABEL_104;
        }
        unint64_t v21 = -[NSNumber unsignedLongLongValue](_NSXPCSerializationNumberForObject(a2, &v58), "unsignedLongLongValue");
        goto LABEL_98;
      }

      if (v18 != 83) {
        goto LABEL_108;
      }
      unint64_t v33 = *a8;
      if (*a8 <= a8[1] && v33 < a2[1])
      {
        unint64_t v58 = *a8;
        int v59 = *(_BYTE *)(*a2 + v33) & 0xF0;
        if (a5 > 1)
        {
          __int16 v34 = -[NSNumber unsignedShortValue](_NSXPCSerializationNumberForObject(a2, &v58), "unsignedShortValue");
LABEL_84:
          *(_WORD *)a4 = v34;
          return;
        }

        goto LABEL_104;
      }
    }

    else
    {
      if (v18 != 73)
      {
        if (v18 != 76)
        {
LABEL_108:
          i = +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"decodeDataAt:ofObjCType: undecodable type (%s)",  a3);
          v55 = (void *)MEMORY[0x189603F70];
          v56 = (const __CFString *)*MEMORY[0x189603A48];
          goto LABEL_105;
        }

        unint64_t v24 = *a8;
        if (*a8 > a8[1] || v24 >= a2[1]) {
          goto LABEL_103;
        }
        unint64_t v58 = *a8;
        int v59 = *(_BYTE *)(*a2 + v24) & 0xF0;
        if (a5 <= 7)
        {
LABEL_104:
          v55 = (void *)MEMORY[0x189603F70];
          v56 = @"NSInvalidUnarchiveOperationException";
          i = @"Size of available buffer is not big enough to hold the decoded data";
          goto LABEL_105;
        }

        unint64_t v21 = -[NSNumber unsignedLongValue](_NSXPCSerializationNumberForObject(a2, &v58), "unsignedLongValue");
LABEL_98:
        *(void *)a4 = v21;
        return;
      }

      unint64_t v48 = *a8;
      if (*a8 <= a8[1] && v48 < a2[1])
      {
        unint64_t v58 = *a8;
        int v59 = *(_BYTE *)(*a2 + v48) & 0xF0;
        if (a5 > 3)
        {
          int v44 = -[NSNumber unsignedIntValue](_NSXPCSerializationNumberForObject(a2, &v58), "unsignedIntValue");
LABEL_89:
          *(_DWORD *)a4 = v44;
          return;
        }

        goto LABEL_104;
      }
    }

LABEL_103:
    v55 = (void *)MEMORY[0x189603F70];
    v56 = @"NSInvalidUnarchiveOperationException";
    i = @"Expected to find entry in array of NSInvocation arguments but there were no entries";
    goto LABEL_105;
  }

  switch(*v17)
  {
    case ':':
      unint64_t v19 = *a8;
      if (*a8 > a8[1] || v19 >= a2[1]) {
        goto LABEL_106;
      }
      unint64_t v58 = *a8;
      int v59 = *(_BYTE *)(*a2 + v19) & 0xF0;
      if (a5 <= 7) {
        goto LABEL_104;
      }
      char v20 = (const char *)_NSXPCSerializationASCIIStringForObject(a2, &v58);
      unint64_t v21 = (void *)sel_registerName(v20);
      goto LABEL_98;
    case ';':
    case '<':
    case '=':
    case '>':
    case '?':
    case 'A':
      goto LABEL_108;
    case '@':
      unint64_t v35 = *a8;
      if (*a8 <= a8[1] && v35 < a2[1])
      {
        unint64_t v58 = *a8;
        int v59 = *(_BYTE *)(*a2 + v35) & 0xF0;
        if (a5 > 7)
        {
          v36 = (void *)[a1 _decodeObjectOfClasses:a10 atObject:&v58];
          uint64_t v32 = v36;
          *(void *)a4 = v36;
          if (a9)
          {
            uint64_t v31 = (void *)a9;
            goto LABEL_49;
          }

          id v52 = v36;
          return;
        }

        goto LABEL_104;
      }

      v55 = (void *)MEMORY[0x189603F70];
      v56 = @"NSInvalidUnarchiveOperationException";
      i = @"Expected to find entry in array for an object but there was no entry";
      goto LABEL_105;
    case 'B':
      unint64_t v37 = *a8;
      if (*a8 > a8[1] || v37 >= a2[1]) {
        goto LABEL_103;
      }
      if (!a5) {
        goto LABEL_104;
      }
      if (v37) {
        LOBYTE(v37) = *(unsigned __int8 *)(*a2 + v37) == 176;
      }
      *a4 = v37;
      return;
    case 'C':
      unint64_t v38 = *a8;
      if (*a8 > a8[1] || v38 >= a2[1]) {
        goto LABEL_103;
      }
      unint64_t v58 = *a8;
      int v59 = *(_BYTE *)(*a2 + v38) & 0xF0;
      if (!a5) {
        goto LABEL_104;
      }
      unsigned __int8 v23 = -[NSNumber unsignedCharValue](_NSXPCSerializationNumberForObject(a2, &v58), "unsignedCharValue");
      goto LABEL_59;
    default:
      if (v18 == 35)
      {
        unint64_t v50 = *a8;
        if (*a8 > a8[1] || v50 >= a2[1]) {
          goto LABEL_103;
        }
        unint64_t v58 = *a8;
        int v59 = *(_BYTE *)(*a2 + v50) & 0xF0;
        v51 = (const char *)_NSXPCSerializationASCIIStringForObject(a2, &v58);
        if (a5 <= 7) {
          goto LABEL_104;
        }
        unint64_t v21 = objc_lookUpClass(v51);
        goto LABEL_98;
      }

      if (v18 != 42) {
        goto LABEL_108;
      }
      unint64_t v25 = *a8;
      if (*a8 > a8[1] || v25 >= a2[1]) {
        goto LABEL_103;
      }
      if (a5 <= 7) {
        goto LABEL_104;
      }
      _getLastByteOfValueIncludingMarker(a2, v25, a8);
      unint64_t v26 = *a8 + 1;
      uint64_t v27 = *a8 == -1LL;
      uint64_t v28 = v27 << 63 >> 63;
      *a8 = v26;
      if (v28 != v27 || v28 < 0)
      {
        v55 = (void *)MEMORY[0x189603F70];
        v56 = @"NSInvalidUnarchiveOperationException";
        for (i = @"Unexpected EoF while decoding pointer";
              ;
              i = @"Expected to find SEL entry in array of NSInvocation arguments but there were no entries")
        {
LABEL_105:
          objc_exception_throw((id)[v55 exceptionWithName:v56 reason:i userInfo:0]);
LABEL_106:
          v55 = (void *)MEMORY[0x189603F70];
          v56 = @"NSInvalidUnarchiveOperationException";
        }
      }

      if (a8[1] < v26 || a2[1] <= v26)
      {
        v55 = (void *)MEMORY[0x189603F70];
        v56 = @"NSInvalidUnarchiveOperationException";
        i = @"Missing data after non-null entry";
        goto LABEL_105;
      }

      unint64_t v58 = v26;
      int v59 = *(_BYTE *)(*a2 + v26) & 0xF0;
      id v29 = _NSXPCSerializationDataForObject(a2, &v58);
      if (!v29 || (uint64_t v30 = v29, ![v29 length]))
      {
LABEL_99:
        *(void *)a4 = 0LL;
        return;
      }

      if (a9)
      {
        *(void *)a4 = [v30 bytes];
        uint64_t v31 = (void *)a9;
        uint64_t v32 = v30;
LABEL_49:
        [v31 _addAttachedObject:v32];
        return;
      }

      uint64_t v53 = [v30 length];
      v54 = malloc(v53 + 1);
      [v30 getBytes:v54 length:v53];
      *(void *)a4 = v54;
      v54[v53] = 0;
      return;
  }

    Hasher._combine(_:)(0);
    v85 = 0LL;
LABEL_104:

    v90 = v147;
    if (v90)
    {
      Hasher._combine(_:)(1u);
      swift_bridgeObjectRetain();
      specialized Dictionary<>.hash(into:)((uint64_t)&v157, v90);
      swift_bridgeObjectRelease();
    }

    else
    {
      Hasher._combine(_:)(0);
    }

    char v6 = v108;
    uint64_t v4 = v109;
    unint64_t v9 = v115;
    v91 = v148;
    if (v148)
    {
      Hasher._combine(_:)(1u);
      swift_bridgeObjectRetain();
      specialized Dictionary<>.hash(into:)((uint64_t)&v157, v91);
      swift_bridgeObjectRelease();
      if (!v149) {
        goto LABEL_111;
      }
    }

    else
    {
      Hasher._combine(_:)(0);
      if (!v149)
      {
LABEL_111:
        Hasher._combine(_:)(0);
        goto LABEL_112;
      }
    }

    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
LABEL_112:
    unint64_t v26 = v114;
    if (v150 == 2)
    {
      Hasher._combine(_:)(0);
    }

    else
    {
      v92 = v150 & 1;
      Hasher._combine(_:)(1u);
      Hasher._combine(_:)(v92);
    }

    if (v151 == 2)
    {
      Hasher._combine(_:)(0);
    }

    else
    {
      v93 = v151 & 1;
      Hasher._combine(_:)(1u);
      Hasher._combine(_:)(v93);
    }

    if (v152 == 2)
    {
      v94 = 0;
    }

    else
    {
      v94 = v152 & 1;
      Hasher._combine(_:)(1u);
    }

    Hasher._combine(_:)(v94);
    if (v153 == 2)
    {
      v95 = 0;
    }

    else
    {
      v96 = v153 & 1;
      Hasher._combine(_:)(1u);
      v95 = v96;
    }

    Hasher._combine(_:)(v95);
    outlined retain of LocalePreferences?( (uint64_t)v155,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined consume of LocalePreferences?);
    outlined retain of LocalePreferences?( (uint64_t)v155,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined consume of LocalePreferences?);
    swift_unknownObjectRelease();
    unsigned int v11 = v116;
LABEL_125:
    Hasher._combine(_:)(v119);
    v97 = Hasher._finalize()();
    v98 = -1LL << *(_BYTE *)(v6 + 32);
    v99 = v97 & ~v98;
    v100 = v99 >> 6;
    if (((-1LL << v99) & ~*(void *)(v10 + 8 * (v99 >> 6))) != 0)
    {
      uint64_t v12 = __clz(__rbit64((-1LL << v99) & ~*(void *)(v10 + 8 * (v99 >> 6)))) | v99 & 0x7FFFFFFFFFFFFFC0LL;
      unint64_t v14 = v117;
      uint64_t v13 = v118;
      uint64_t v15 = v120;
    }

    else
    {
      v101 = 0;
      v102 = (unint64_t)(63 - v98) >> 6;
      unint64_t v14 = v117;
      uint64_t v13 = v118;
      uint64_t v15 = v120;
      do
      {
        if (++v100 == v102 && (v101 & 1) != 0)
        {
          __break(1u);
          goto LABEL_142;
        }

        v103 = v100 == v102;
        if (v100 == v102) {
          v100 = 0LL;
        }
        v101 |= v103;
        v104 = *(void *)(v10 + 8 * v100);
      }

      while (v104 == -1);
      uint64_t v12 = __clz(__rbit64(~v104)) + (v100 << 6);
    }

    *(void *)(v10 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v12;
    uint64_t v16 = *(void *)(v6 + 48) + 56 * v12;
    *(_BYTE *)uint64_t v16 = v14;
    *(void *)(v16 + _Block_object_dispose((const void *)(v11 - 240), 8) = v113;
    *(void *)(v16 + 16) = v121;
    *(void *)(v16 + 24) = v26;
    *(void *)(v16 + 32) = v122;
    *(void *)(v16 + 40) = v15;
    *(_BYTE *)(v16 + 4_Block_object_dispose((const void *)(v11 - 240), 8) = v119;
    *(void *)(*(void *)(v6 + 56) + 8 * v12) = v13;
    ++*(void *)(v6 + 16);
  }

  outlined retain of LocalePreferences?( (uint64_t)v155,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined copy of LocalePreferences?);
  swift_bridgeObjectRetain();
  unint64_t v38 = v36 + 40;
  do
  {
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    v38 += 16LL;
    --v37;
  }

  while (v37);
  swift_bridgeObjectRelease();
  if (!v138) {
    goto LABEL_40;
  }
LABEL_47:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  if (!v139) {
    goto LABEL_41;
  }
LABEL_48:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  unint64_t v39 = v140;
  if (!v140) {
    goto LABEL_42;
  }
LABEL_49:
  Hasher._combine(_:)(1u);
  int v42 = 0LL;
  unint64_t v43 = 0LL;
  int v44 = v39 + 64;
  unint64_t v45 = 1LL << *(_BYTE *)(v39 + 32);
  if (v45 < 64) {
    unint64_t v46 = ~(-1LL << v45);
  }
  else {
    unint64_t v46 = -1LL;
  }
  unint64_t v47 = v46 & *(void *)(v39 + 64);
  unint64_t v48 = (unint64_t)(v45 + 63) >> 6;
  v127 = v158;
  v129 = v157;
  v123 = v160;
  v125 = v159;
  unint64_t v49 = v161;
  while (2)
  {
    if (v47)
    {
      unint64_t v50 = __clz(__rbit64(v47));
      v47 &= v47 - 1;
      v51 = v50 | (v43 << 6);
LABEL_54:
      id v52 = *(unsigned __int8 *)(*(void *)(v39 + 48) + v51);
      uint64_t v53 = *(void *)(*(void *)(v39 + 56) + 8 * v51);
      v131 = v129;
      v132 = v127;
      v133 = v125;
      v134 = v123;
      v135 = v49;
      Hasher._combine(_:)(v52);
      Hasher._combine(_:)(v53);
      v42 ^= Hasher._finalize()();
      continue;
    }

    break;
  }

  v54 = v43 + 1;
  if (__OFADD__(v43, 1LL))
  {
LABEL_142:
    __break(1u);
LABEL_143:
    __break(1u);
    goto LABEL_144;
  }

  if (v54 >= v48) {
    goto LABEL_70;
  }
  v55 = *(void *)(v44 + 8 * v54);
  ++v43;
  if (v55) {
    goto LABEL_69;
  }
  unint64_t v43 = v54 + 1;
  if (v54 + 1 >= v48) {
    goto LABEL_70;
  }
  v55 = *(void *)(v44 + 8 * v43);
  if (v55) {
    goto LABEL_69;
  }
  unint64_t v43 = v54 + 2;
  if (v54 + 2 >= v48) {
    goto LABEL_70;
  }
  v55 = *(void *)(v44 + 8 * v43);
  if (v55)
  {
LABEL_69:
    unint64_t v47 = (v55 - 1) & v55;
    v51 = __clz(__rbit64(v55)) + (v43 << 6);
    goto LABEL_54;
  }

  v56 = v54 + 3;
  if (v56 < v48)
  {
    v55 = *(void *)(v44 + 8 * v56);
    if (!v55)
    {
      while (1)
      {
        unint64_t v43 = v56 + 1;
        if (__OFADD__(v56, 1LL)) {
          break;
        }
        if (v43 >= v48) {
          goto LABEL_70;
        }
        v55 = *(void *)(v44 + 8 * v43);
        ++v56;
        if (v55) {
          goto LABEL_69;
        }
      }

  __break(1u);
LABEL_104:
  __break(1u);
LABEL_105:
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
}

        if (v66)
        {
          v80 = *(void *)(v58 + 16);
          if (v80) {
            goto LABEL_105;
          }
          goto LABEL_108;
        }

        swift_bridgeObjectRelease();
        lazy protocol witness table accessor for type NSDecimal._CalculationError and conformance NSDecimal._CalculationError();
        unint64_t v49 = (void *)swift_allocError();
        *v87 = 0;
        swift_willThrow();
        swift_bridgeObjectRelease();
LABEL_144:
        swift_bridgeObjectRelease();
        goto LABEL_21;
      }
    }

    __break(1u);
LABEL_112:
    __break(1u);
    goto LABEL_113;
  }

  if (!v39) {
    return;
  }
  if (v39 != 1)
  {
LABEL_161:
    type metadata accessor for NSComparisonResult(0LL);
    v124 = v39;
    _diagnoseUnexpectedEnumCaseValue<A, B>(type:rawValue:)();
    __break(1u);
    return;
  }

  LOWORD(v24) = v104;
  NSDecimal.asVariableLengthInteger()(v98, v103, v102);
  unint64_t v39 = v69;
  NSDecimal.asVariableLengthInteger()(v101, v100, v99);
  unint64_t v21 = v70;
  v71 = static Array._allocateBufferUninitialized(minimumCapacity:)();
  *(void *)(v71 + 32) = 0LL;
  uint64_t v60 = (_WORD *)(v71 + 32);
  *(void *)(v71 + 16) = 8LL;
  v61._rawValue = (void *)v71;
  *(void *)(v71 + 40) = 0LL;
  v62 = *(void *)(v39 + 16);
  v63 = *(void *)(v21 + 16);
  if (v63 >= v62) {
    v72 = *(void *)(v39 + 16);
  }
  else {
    v72 = *(void *)(v21 + 16);
  }
  if (v72)
  {
    v73 = v39 + 32;
    v74 = (*(unsigned __int16 *)(v39 + 32) | 0x10000) - *(unsigned __int16 *)(v21 + 32);
    LODWORD(v75) = HIWORD(v74);
    *uint64_t v60 = *(_WORD *)(v39 + 32) - *(_WORD *)(v21 + 32);
    v68 = v72 - 1;
    if (!v68)
    {
      v76 = 1LL;
      goto LABEL_115;
    }

    v74 = v75 + *(unsigned __int16 *)(v39 + 34) - *(unsigned __int16 *)(v21 + 34) + 0xFFFF;
    LODWORD(v75) = HIWORD(v74);
    *(_WORD *)(v71 + 34) = v74;
    if (v68 == 1)
    {
      v76 = 2LL;
      goto LABEL_115;
    }

    int v59 = *(unsigned __int16 *)(v21 + 36);
    v74 = v75 + *(unsigned __int16 *)(v39 + 36) - v59 + 0xFFFF;
    LODWORD(v75) = HIWORD(v74);
    *(_WORD *)(v71 + 36) = v74;
    if (v68 == 2)
    {
      v76 = 3LL;
      goto LABEL_115;
    }

    v74 = v75 + *(unsigned __int16 *)(v39 + 38) - *(unsigned __int16 *)(v21 + 38) + 0xFFFF;
    LODWORD(v75) = HIWORD(v74);
    *(_WORD *)(v71 + 3_Block_object_dispose((const void *)(v11 - 240), 8) = v74;
    if (v68 == 3)
    {
      v76 = 4LL;
      goto LABEL_115;
    }

    int v59 = *(unsigned __int16 *)(v21 + 40);
    v74 = v75 + *(unsigned __int16 *)(v39 + 40) - v59 + 0xFFFF;
    LODWORD(v75) = HIWORD(v74);
    *(_WORD *)(v71 + 40) = v74;
    if (v68 == 4)
    {
      v76 = 5LL;
      goto LABEL_115;
    }

    v74 = v75 + *(unsigned __int16 *)(v39 + 42) - *(unsigned __int16 *)(v21 + 42) + 0xFFFF;
    LODWORD(v75) = HIWORD(v74);
    *(_WORD *)(v71 + 42) = v74;
    if (v68 == 5)
    {
      v76 = 6LL;
      goto LABEL_115;
    }

    int v59 = *(unsigned __int16 *)(v21 + 44);
    v74 = v75 + *(unsigned __int16 *)(v39 + 44) - v59 + 0xFFFF;
    LODWORD(v75) = HIWORD(v74);
    *(_WORD *)(v71 + 44) = v74;
    if (v68 == 6)
    {
      v76 = 7LL;
      goto LABEL_115;
    }

    unint64_t v5 = (v70 - 1) & v70;
    v68 = __clz(__rbit64(v70)) + (v65 << 6);
LABEL_84:
    v69 = (uint64_t *)(*(void *)(v10 + 48) + 16 * v68);
    unint64_t v19 = *v69;
    unint64_t v2 = v69[1];
    swift_bridgeObjectRetain();
    uint64_t v15 = (uint64_t)&v365;
    specialized Set._Variant.insert(_:)((unint64_t *)&v433, v19, v2);
    uint64_t result = swift_bridgeObjectRelease();
  }

  v71 = v43 + 5;
  if (v71 < v13)
  {
    v70 = *(void *)(v40 + 8 * v71);
    if (!v70)
    {
      while (1)
      {
        v65 = v71 + 1;
        if (__OFADD__(v71, 1LL)) {
          break;
        }
        if (v65 >= v13) {
          goto LABEL_104;
        }
        v70 = *(void *)(v40 + 8 * v65);
        ++v71;
        if (v70) {
          goto LABEL_103;
        }
      }

  swift_release();
  v74 = v369;
  *(void *)&v351 = v369;
  v334 = v11;
  if (v328 > 0x7FF)
  {
    v79 = *(void *)(v33 + 64);
    v80 = *(void *)(v33 + 72);
    v81 = *(void *)(v33 + 80);
    v82 = *(void *)(v33 + 88);
    swift_unknownObjectRetain();
    swift_retain();
    AttributedString._InternalRuns.endIndex.getter(v79, v80, v81, v82, &v377);
    v342 = v377;
    v326 = v378;
    v78 = v379;
    swift_unknownObjectRelease();
    v77 = v326;
    v76 = v342;
  }

  else
  {
    v75 = (void *)swift_retain();
    AttributedString._InternalRunsSlice.startIndex.getter(v75, 0LL, (unint64_t *)&v377);
    v76 = v377;
    v77 = v378;
    v78 = v379;
  }

  v83 = v348;
  v369 = v76;
  v370 = v77;
  *(void *)&v371 = v78;
  v84 = *(void *)(v33 + 64);
  v85 = *(void *)(v33 + 72);
  v86 = *(void *)(v33 + 80);
  v87 = *(void *)(v33 + 88);
  Enum = getEnumTag for _DarwinSearchPathsSequence.Iterator.State();
  swift_unknownObjectRetain();
  v343 = Enum;
  AttributedString._InternalRuns.index(atUTF8Offset:preferEnd:)(0LL, Enum & 1, v84, v85, v86, v87, (uint64_t *)&v437);
  v89 = v439;
  swift_unknownObjectRelease();
  if (v89 < v78 && *(void *)(v74 + 16))
  {
    while (1)
    {
      unint64_t v5 = *((void *)&v369 + 1);
      v90 = v369;
      v91 = v370;
      v92 = *(void *)(v33 + 64);
      unint64_t v3 = *(void *)(v33 + 72);
      v93 = *(void *)(v33 + 80);
      v94 = swift_unknownObjectRetain();
      uint64_t result = specialized Rope._endPath.getter(v94);
      if (v92)
      {
        uint64_t result = swift_unknownObjectRelease();
        if (v78 != v93) {
          goto LABEL_132;
        }
      }

      else if (v78)
      {
LABEL_132:
        v104 = *(void *)(v33 + 64);
        v105 = *(void *)(v33 + 72);
        unint64_t v3 = *(void *)(v33 + 80);
        v106 = *(void *)(v33 + 88);
        *(void *)&v437 = v90;
        *((void *)&v437 + 1) = v5;
        *(void *)&v438 = v91;
        v107 = *((void *)&v91 + 1) - 1LL;
        if (__OFSUB__(*((void *)&v91 + 1), 1LL)) {
          goto LABEL_397;
        }
        swift_unknownObjectRetain();
        specialized Rope.formIndex(before:)((uint64_t)&v437, v104, v105, v3, v106);
        v108 = *((void *)&v437 + 1);
        unint64_t v5 = v438;
        v109 = v437;
        v110 = specialized Rope.subscript.getter(v437, *((unint64_t *)&v437 + 1), v438, v104, v105, v3, v106);
        unint64_t v3 = v111;
        swift_unknownObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t result = swift_bridgeObjectRelease();
        v112 = v78 - v110;
        if (__OFSUB__(v78, v110)) {
          goto LABEL_398;
        }
        v113 = v346;
        v96 = v109;
        goto LABEL_160;
      }

      int v42 = *(void *)(v33 + 64);
      v95 = *(void *)(v33 + 72);
      v96 = *(void *)(v33 + 88);
      if (v42)
      {
        v327 = *(void *)(v33 + 72);
        int v44 = *(void *)(v33 + 88);
        unint64_t v3 = v346;
        unsigned int v11 = *(void *)(v33 + 80);
        if (v11 < v346) {
          goto LABEL_402;
        }
        if (*(_WORD *)(v42 + 16))
        {
          uint64_t v16 = *(unsigned __int8 *)(v42 + 18);
          if (*(_BYTE *)(v42 + 18))
          {
            uint64_t result = swift_unknownObjectRetain_n();
            unint64_t v43 = v42;
            while (1)
            {
              v98 = *(unsigned __int16 *)(v43 + 16);
              if (!*(_WORD *)(v43 + 16)) {
                goto LABEL_426;
              }
              v99 = *(void *)(v43 + 40);
              unint64_t v48 = __OFSUB__(v3, v99);
              v100 = v3 - v99;
              if (v48) {
                goto LABEL_376;
              }
              if (v100 <= 0)
              {
                v56 = 0LL;
              }

              else
              {
                if ((_DWORD)v98 == 1) {
                  goto LABEL_428;
                }
                v101 = *(void *)(v43 + 64);
                unint64_t v3 = v100 - v101;
                if (__OFSUB__(v100, v101)) {
                  goto LABEL_380;
                }
                if (v3 >= 1)
                {
                  if ((_DWORD)v98 == 2) {
                    goto LABEL_428;
                  }
                  v102 = (void *)(v43 + 88);
                  v56 = 2LL;
                  while (v98 != v56)
                  {
                    v103 = v3 - *v102;
                    if (__OFSUB__(v3, *v102)) {
                      goto LABEL_350;
                    }
                    if (v103 < 1) {
                      goto LABEL_116;
                    }
                    ++v56;
                    v102 += 3;
                    unint64_t v3 = v103;
                    if (v98 == v56) {
                      goto LABEL_428;
                    }
                  }

                  __break(1u);
LABEL_350:
                  __break(1u);
LABEL_351:
                  v314 = *(void *)(v43 + 48);
                  unint64_t v48 = __OFSUB__(v56, v314);
                  unint64_t v46 = v56 - v314;
                  if (v48) {
                    goto LABEL_424;
                  }
                  if (__OFADD__(v46, 1LL)) {
                    goto LABEL_425;
                  }
                  if (v46 + 1 >= 1)
                  {
                    if ((_DWORD)v3 != 2)
                    {
                      v315 = (void *)(v43 + 72);
                      unint64_t v49 = 2LL;
                      while (v3 != v49)
                      {
                        v211 = v46 - *v315;
                        if (__OFSUB__(v46, *v315)) {
                          goto LABEL_418;
                        }
                        if (__OFADD__(v211, 1LL)) {
                          goto LABEL_419;
                        }
                        if (v211 + 1 < 1) {
                          goto LABEL_370;
                        }
                        ++v49;
                        v315 += 3;
                        unint64_t v46 = v211;
                        if (v3 == v49) {
                          goto LABEL_333;
                        }
                      }

                      goto LABEL_417;
                    }

                    v211 = v46;
                    goto LABEL_333;
                  }

        if (!v83) {
          goto LABEL_150;
        }
        v103 = *(void *)(v76 + 16);
        if (v103)
        {
LABEL_105:
          if (!v78[v103 - 1])
          {
            do
            {
              *(void *)(v76 + 16) = v103 - 1;
              if (v103 == 1) {
                break;
              }
            }

            while (!*(unsigned __int16 *)(v76 + 28 + 2 * v103--));
          }
        }

        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v109 = *((void *)v46._rawValue + 2);
        if (!HIDWORD(v109))
        {
          _So9NSDecimala__length_setter(v109, &v155);
          LODWORD(v152) = v85;
          WORD2(v152) = v86;
          HIWORD(v152) = v139;
          LOWORD(v153) = v137;
          WORD1(v153) = v135;
          WORD2(v153) = v126;
          HIWORD(v153) = v48;
          LOWORD(v154) = v130;
          HIWORD(v154) = v129;
          goto LABEL_143;
        }

        if (!v83) {
          goto LABEL_150;
        }
        v103 = *(void *)(v76 + 16);
        if (v103)
        {
LABEL_105:
          if (!v78[v103 - 1])
          {
            do
            {
              *(void *)(v76 + 16) = v103 - 1;
              if (v103 == 1) {
                break;
              }
            }

            while (!*(unsigned __int16 *)(v76 + 28 + 2 * v103--));
          }
        }

        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v109 = *((void *)v46._rawValue + 2);
        if (!HIDWORD(v109))
        {
          _So9NSDecimala__length_setter(v109, &v155);
          LODWORD(v152) = v85;
          WORD2(v152) = v86;
          HIWORD(v152) = v139;
          LOWORD(v153) = v137;
          WORD1(v153) = v135;
          WORD2(v153) = v126;
          HIWORD(v153) = v48;
          LOWORD(v154) = v130;
          HIWORD(v154) = v129;
          goto LABEL_143;
        }

        swift_unknownObjectRelease();
        v67 = v215;
        swift_unknownObjectRelease();
        v66 = v55 & 0xFFFFFFFFFFFFF0FFLL | (v71 << 8);
        v54 = v230;
        goto LABEL_71;
      }

      int v44 = v208;
LABEL_102:
      if (v56)
      {
LABEL_275:
        __break(1u);
        goto LABEL_276;
      }

      goto LABEL_103;
    }
  }

  else
  {
    v54 = v230;
    if (v229 >= 0x800)
    {
LABEL_273:
      __break(1u);
      goto LABEL_274;
    }
  }

  swift_unknownObjectRetain_n();
  swift_retain();
  outlined retain of ReversedCollection<AttributedString.Runs.AttributesSlice1<AttributeScopes.FoundationAttributes.InflectionRuleAttribute>>((uint64_t)&v263);
  v66 = specialized Rope._endPath.getter(v51);
  uint64_t result = swift_unknownObjectRelease();
  v67 = 0LL;
  v56 = 0LL;
  if (v51)
  {
LABEL_71:
    swift_unknownObjectRetain();
    v235 = specialized Rope._Node.distanceFromStart<A>(to:in:)(v225, v66, v67, v51, v235);
    uint64_t result = swift_unknownObjectRelease_n();
    goto LABEL_105;
  }

  v235 = 0LL;
LABEL_105:
  v218 = v54 - v56;
  if (__OFSUB__(v54, v56))
  {
LABEL_259:
    __break(1u);
    goto LABEL_260;
  }

  v80 = v44[1];
  v298[3] = *v44;
  v298[4] = v80;
  v298[5] = v44[2];
  uint64_t result = BigString.utf8.getter();
  if (__OFSUB__(0LL, v56))
  {
LABEL_260:
    __break(1u);
    goto LABEL_261;
  }

  v81 = BigString.UTF8View.index(_:offsetBy:)();
  v83 = v82;
  v193 = v85;
  v194 = v84;
  uint64_t result = outlined release of Locale((uint64_t)&v288);
  v207 = v231;
  if ((uint64_t)v235 >= (uint64_t)v231)
  {
LABEL_261:
    __break(1u);
    goto LABEL_262;
  }

  if ((void)v225 != *(void *)(v8 + 88))
  {
LABEL_262:
    __break(1u);
LABEL_263:
    __break(1u);
LABEL_264:
    __break(1u);
    goto LABEL_265;
  }

  v191 = v83;
  v192 = v81;
  v86 = *(uint64_t **)(v8 + 64);
  if (v67)
  {
    v87 = v67 + 24 * ((v66 >> ((4 * *(_BYTE *)(v67 + 18) + 8) & 0x3C)) & 0xF);
    v88 = *(void *)(v87 + 40);
    *(void *)&v230 = *(void *)(v87 + 32);
    swift_bridgeObjectRetain();
    v195 = v88;
    uint64_t result = swift_bridgeObjectRetain();
    v89 = v225;
    v90 = v225;
    v91 = v226;
  }

  else
  {
    swift_unknownObjectRetain();
    specialized Rope._Node.subscript.getter(v66, (uint64_t)v86);
    *(void *)&v230 = v92;
    v195 = v93;
    uint64_t result = swift_unknownObjectRelease();
    v86 = *(uint64_t **)(v8 + 64);
    v90 = *(void *)(v8 + 88);
    v91 = v226;
    v89 = v225;
  }

  v216 = v235 + 1;
  v243 = v89;
  v244 = v66;
  v233 = (__int128 *)&v295;
  v234 = &v251;
  v206 = (uint64_t *)(v223 + 40);
  v245 = (uint64_t *)v67;
LABEL_113:
  if (v89 != v90) {
    goto LABEL_247;
  }
  v214 = v90;
  v219 = v66;
  if (v67)
  {
    v94 = *(void *)(v67 + 24 * ((v66 >> ((4 * *(_BYTE *)(v67 + 18) + 8) & 0x3C)) & 0xF) + 24);
    swift_unknownObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }

  else
  {
    swift_unknownObjectRetain();
    v94 = specialized Rope._Node.subscript.getter(v66, (uint64_t)v86);
  }

  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  if (__OFADD__(v218, v94)) {
    goto LABEL_248;
  }
  v205 = v218 + v94;
  if (v86)
  {
    v95 = ((-15LL << ((4 * *((_BYTE *)v86 + 18) + 8) & 0x3C)) - 1) & (unint64_t)*((unsigned __int8 *)v86 + 18) | ((unint64_t)*((unsigned __int16 *)v86 + 8) << ((4 * *((_BYTE *)v86 + 18) + 8) & 0x3C));
    uint64_t result = swift_unknownObjectRetain();
  }

  else
  {
    v95 = 0LL;
  }

  if (v219 >= v95) {
    goto LABEL_249;
  }
  if (v67)
  {
    v96 = (4 * *(_BYTE *)(v67 + 18) + 8) & 0x3C;
    v97 = ((v219 >> v96) & 0xF) + 1;
    if (v97 < *(unsigned __int16 *)(v67 + 16))
    {
      v98 = (v97 << v96) | ((-15LL << v96) - 1) & v219;
      uint64_t result = swift_unknownObjectRelease_n();
LABEL_128:
      v86 = v245;
      goto LABEL_135;
    }
  }

  v99 = *((unsigned __int8 *)v86 + 18);
  v100 = (4 * v99 + 8) & 0x3C;
  v101 = (v219 >> v100) & 0xF;
  *(void *)&v293 = v101;
  if (v99)
  {
    swift_unknownObjectRetain();
    v102 = specialized closure #1 in Rope._Node.formSuccessor(of:)( (uint64_t)(v86 + 3),  (uint64_t *)&v293,  (uint64_t)&v243,  (uint64_t)v86,  v99);
    uint64_t result = swift_unknownObjectRelease();
    if ((v102 & 1) != 0)
    {
      uint64_t result = swift_unknownObjectRelease_n();
      v98 = v244;
      goto LABEL_128;
    }
  }

  else
  {
    v103 = v101 + 1;
    if (v101 + 1 < (unint64_t)*((unsigned __int16 *)v86 + 8))
    {
      uint64_t result = swift_unknownObjectRelease_n();
      v98 = (v103 << v100) | ((-15LL << v100) - 1) & v219;
      goto LABEL_135;
    }
  }

  if (v86)
  {
    v104 = *((unsigned __int8 *)v86 + 18);
    v105 = *((unsigned __int16 *)v86 + 8);
    uint64_t result = swift_unknownObjectRelease_n();
    v98 = ((-15LL << ((4 * v104 + 8) & 0x3C)) - 1) & v104 | (unint64_t)(v105 << ((4 * v104 + 8) & 0x3C));
  }

  else
  {
    v98 = 0LL;
  }

  v86 = 0LL;
  v243 = v214;
LABEL_135:
  v106 = v230;
  if (v216 != v207)
  {
    if (v243 != *(void *)(v8 + 88))
    {
LABEL_250:
      __break(1u);
LABEL_251:
      __break(1u);
LABEL_252:
      __break(1u);
      goto LABEL_253;
    }

    *(void *)&v225 = v243;
    v215 = v67;
    v203 = v86;
    v204 = v98;
    if (v86)
    {
      v107 = &v86[3 * ((v98 >> ((4 * *((_BYTE *)v86 + 18) + 8) & 0x3C)) & 0xF)];
      v108 = v107[4];
      v109 = v107[5];
      swift_bridgeObjectRetain();
      v209 = v109;
      swift_bridgeObjectRetain();
    }

    else
    {
      v110 = *(void *)(v8 + 64);
      swift_unknownObjectRetain();
      v106 = v230;
      specialized Rope._Node.subscript.getter(v98, v110);
      v209 = v111;
      v108 = v112;
      swift_unknownObjectRelease();
    }

    uint64_t result = swift_bridgeObjectRetain();
    v113 = 0LL;
    v114 = v206;
    v235 = v108;
    while (1)
    {
      v116 = v113 + 1;
      if (__OFADD__(v113, 1LL))
      {
        __break(1u);
LABEL_237:
        __break(1u);
        goto LABEL_238;
      }

      v118 = *(v114 - 1);
      v117 = *v114;
      if (*(void *)(v106 + 16))
      {
        swift_bridgeObjectRetain_n();
        v119 = specialized __RawDictionaryStorage.find<A>(_:)(v118, v117);
        if ((v120 & 1) != 0)
        {
          outlined init with copy of AttributedString._AttributeValue( *(void *)(v106 + 56) + 72 * v119,  (uint64_t)&v258);
        }

        else
        {
          v262 = 0LL;
          v260 = 0u;
          v261 = 0u;
          v258 = 0u;
          v259 = 0u;
        }

        swift_bridgeObjectRelease();
        v108 = v235;
        if (!*(void *)(v235 + 16))
        {
LABEL_150:
          v257 = 0LL;
          v255 = 0u;
          v256 = 0u;
          v253 = 0u;
          v254 = 0u;
          goto LABEL_157;
        }
      }

      else
      {
        v262 = 0LL;
        v260 = 0u;
        v261 = 0u;
        v258 = 0u;
        v259 = 0u;
        swift_bridgeObjectRetain();
        if (!*(void *)(v108 + 16)) {
          goto LABEL_150;
        }
      }

      swift_bridgeObjectRetain();
      v121 = specialized __RawDictionaryStorage.find<A>(_:)(v118, v117);
      if ((v122 & 1) != 0)
      {
        outlined init with copy of AttributedString._AttributeValue(*(void *)(v108 + 56) + 72 * v121, (uint64_t)&v253);
      }

      else
      {
        v257 = 0LL;
        v255 = 0u;
        v256 = 0u;
        v253 = 0u;
        v254 = 0u;
      }

      swift_bridgeObjectRelease();
LABEL_157:
      swift_bridgeObjectRelease();
      v86 = &demangling cache variable for type metadata for AttributedString._AttributeValue?;
      outlined init with copy of (Hashable & Sendable)?( (uint64_t)&v258,  (uint64_t)&v243,  &demangling cache variable for type metadata for AttributedString._AttributeValue?);
      outlined init with copy of (Hashable & Sendable)?( (uint64_t)&v253,  (uint64_t)v234,  &demangling cache variable for type metadata for AttributedString._AttributeValue?);
      if (!v246)
      {
        if (v252) {
          goto LABEL_174;
        }
        outlined destroy of Any?( (uint64_t)&v243,  &demangling cache variable for type metadata for AttributedString._AttributeValue?);
        outlined destroy of Any?( (uint64_t)&v253,  &demangling cache variable for type metadata for AttributedString._AttributeValue?);
        uint64_t result = outlined destroy of Any?( (uint64_t)&v258,  &demangling cache variable for type metadata for AttributedString._AttributeValue?);
        goto LABEL_144;
      }

      outlined init with copy of (Hashable & Sendable)?( (uint64_t)&v243,  (uint64_t)v242,  &demangling cache variable for type metadata for AttributedString._AttributeValue?);
      if (!v252) {
        goto LABEL_173;
      }
      v123 = *((_OWORD *)v234 + 3);
      v239 = *((_OWORD *)v234 + 2);
      v240 = v123;
      v241 = v234[8];
      v124 = *((_OWORD *)v234 + 1);
      v237 = *(_OWORD *)v234;
      v238 = v124;
      outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>( (uint64_t)v242,  (uint64_t)v298);
      outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>( (uint64_t)&v237,  (uint64_t)v297);
      outlined init with copy of (Hashable & Sendable)?( (uint64_t)v298,  (uint64_t)&v293,  &demangling cache variable for type metadata for (Hashable & Sendable)?);
      outlined init with copy of (Hashable & Sendable)?( (uint64_t)v297,  (uint64_t)v233,  &demangling cache variable for type metadata for (Hashable & Sendable)?);
      if (v294)
      {
        if (!v296)
        {
          __swift_destroy_boxed_opaque_existential_1((uint64_t)&v293);
LABEL_142:
          v115 = 0;
          goto LABEL_143;
        }

        outlined init with take of any PredicateExpression<Self.Output == B1>(&v293, (uint64_t)v290);
        outlined init with take of any PredicateExpression<Self.Output == B1>(v233, (uint64_t)v289);
        v125 = v291;
        v228 = v292;
        *(void *)&v227 = __swift_project_boxed_opaque_existential_1(v290, v291);
        v232 = &v191;
        v126 = *(void *)(v125 - 8);
        MEMORY[0x1895F8858](v227);
        v128 = (char *)&v191 - ((v127 + 15) & 0xFFFFFFFFFFFFFFF0LL);
        outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>( (uint64_t)v289,  (uint64_t)&v236);
        v129 = type metadata accessor for Optional();
        *(void *)&v231 = &v191;
        v130 = *(void *)(v129 - 8);
        MEMORY[0x1895F8858](v129);
        v132 = (char *)&v191 - v131;
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Hashable & Sendable);
        v133 = swift_dynamicCast();
        v134 = *(void (**)(char *, void, uint64_t, uint64_t))(v126 + 56);
        if (v133)
        {
          v134(v132, 0LL, 1LL, v125);
          (*(void (**)(char *, char *, uint64_t))(v126 + 32))(v128, v132, v125);
          v115 = dispatch thunk of static Equatable.== infix(_:_:)();
          (*(void (**)(char *, uint64_t))(v126 + 8))(v128, v125);
        }

        else
        {
          v134(v132, 1LL, 1LL, v125);
          (*(void (**)(char *, uint64_t))(v130 + 8))(v132, v129);
          v115 = 0;
        }

        v91 = v226;
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v289);
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v290);
        v106 = v230;
      }

      else
      {
        if (v296)
        {
          outlined destroy of Any?( (uint64_t)v233,  &demangling cache variable for type metadata for (Hashable & Sendable)?);
          goto LABEL_142;
        }

        v115 = 1;
      }

        swift_unknownObjectRelease();
        swift_unknownObjectRelease();
        v85 = v59 & 0xFFFFFFFFFFFFF0FFLL;
        v71 = v253;
        v70 = v85 | (v76 << 8);
        v57 = v263;
        goto LABEL_71;
      }

      unint64_t v39 = (uint64_t)v258;
LABEL_102:
      if (v60)
      {
LABEL_298:
        __break(1u);
        goto LABEL_299;
      }

      goto LABEL_103;
    }
  }

  else if (v244 >= 0x800)
  {
LABEL_296:
    __break(1u);
    goto LABEL_297;
  }

  swift_unknownObjectRetain_n();
  swift_retain();
  outlined retain of ReversedCollection<AttributedString.Runs.AttributesSlice1<AttributeScopes.FoundationAttributes.InflectionRuleAttribute>>((uint64_t)&v292);
  v70 = specialized Rope._endPath.getter(v56);
  uint64_t result = swift_unknownObjectRelease();
  v71 = 0LL;
  uint64_t v60 = 0LL;
  if (v56)
  {
LABEL_71:
    swift_unknownObjectRetain();
    v72 = specialized Rope._Node.distanceFromStart<A>(to:in:)(v254, v70, v71, v56, (uint64_t)v57);
    uint64_t result = swift_unknownObjectRelease_n();
    goto LABEL_105;
  }

  v72 = 0LL;
LABEL_105:
  v243 = v264 - v60;
  if (__OFSUB__(v264, v60))
  {
LABEL_282:
    __break(1u);
    goto LABEL_283;
  }

  v86 = v233[1];
  v328[3] = *v233;
  v328[4] = v86;
  v328[5] = v233[2];
  uint64_t result = BigString.utf8.getter();
  if (__OFSUB__(0LL, v60))
  {
LABEL_283:
    __break(1u);
    goto LABEL_284;
  }

  v224 = BigString.UTF8View.index(_:offsetBy:)();
  v88 = v87;
  v222[2] = v90;
  v222[3] = v89;
  uint64_t result = outlined release of Locale((uint64_t)&v317);
  v231 = v261;
  if (v72 >= (uint64_t)v261)
  {
LABEL_284:
    __break(1u);
    goto LABEL_285;
  }

  if ((void)v254 != *(void *)(v39 + 88))
  {
LABEL_285:
    __break(1u);
LABEL_286:
    __break(1u);
LABEL_287:
    __break(1u);
    goto LABEL_288;
  }

  *(void *)&v255 = v70;
  v222[1] = v88;
  v91 = *(uint64_t **)(v39 + 64);
  if (v71)
  {
    v92 = v255;
    v93 = v71 + 24 * (((unint64_t)v255 >> ((4 * *(_BYTE *)(v71 + 18) + 8) & 0x3C)) & 0xF);
    v94 = *(void *)(v93 + 40);
    v259 = *(void *)(v93 + 32);
    swift_bridgeObjectRetain();
    v223 = v94;
    uint64_t result = swift_bridgeObjectRetain();
    v95 = v254;
    v96 = v254;
  }

  else
  {
    swift_unknownObjectRetain();
    v92 = v255;
    specialized Rope._Node.subscript.getter(v255, (uint64_t)v91);
    v259 = v97;
    v223 = v98;
    uint64_t result = swift_unknownObjectRelease();
    v91 = *(uint64_t **)(v39 + 64);
    v96 = *(void *)(v39 + 88);
    v95 = v254;
  }

  v241 = v72 + 1;
  v272 = v95;
  v273 = v92;
  v263 = (__int128 *)&v322;
  v230 = (uint64_t *)(v250 + 40);
  v274 = (uint64_t *)v71;
  v252 = v55;
  v260 = &v280;
LABEL_113:
  if (v95 != v96) {
    goto LABEL_270;
  }
  v238 = v96;
  if (v71)
  {
    v99 = *(void *)(v71 + 24 * (((unint64_t)v255 >> ((4 * *(_BYTE *)(v71 + 18) + 8) & 0x3C)) & 0xF) + 24);
    swift_unknownObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }

  else
  {
    swift_unknownObjectRetain();
    v99 = specialized Rope._Node.subscript.getter(v255, (uint64_t)v91);
  }

  v100 = v240;
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  if (__OFADD__(v243, v99)) {
    goto LABEL_271;
  }
  v229 = v243 + v99;
  *(void *)&v253 = v71;
  if (v91)
  {
    v101 = ((-15LL << ((4 * *((_BYTE *)v91 + 18) + 8) & 0x3C)) - 1) & (unint64_t)*((unsigned __int8 *)v91 + 18) | ((unint64_t)*((unsigned __int16 *)v91 + 8) << ((4 * *((_BYTE *)v91 + 18) + 8) & 0x3C));
    uint64_t result = swift_unknownObjectRetain();
  }

  else
  {
    v101 = 0LL;
  }

  v102 = v255;
  v104 = v259;
  v103 = (uint64_t)v260;
  v105 = v253;
  if ((void)v253)
  {
    v106 = (4 * *(_BYTE *)(v253 + 18) + 8) & 0x3C;
    v107 = (((unint64_t)v255 >> v106) & 0xF) + 1;
    if (v107 < *(unsigned __int16 *)(v253 + 16))
    {
      v239 = (v107 << v106) | ((-15LL << v106) - 1) & v255;
      uint64_t result = swift_unknownObjectRelease_n();
LABEL_128:
      v91 = v274;
      goto LABEL_137;
    }
  }

  v108 = *((unsigned __int8 *)v91 + 18);
  v109 = (4 * v108 + 8) & 0x3C;
  v110 = ((unint64_t)v255 >> v109) & 0xF;
  *(void *)&v320 = v110;
  if (v108)
  {
    swift_unknownObjectRetain();
    v104 = v259;
    v111 = specialized closure #1 in Rope._Node.formSuccessor(of:)( (uint64_t)(v91 + 3),  (uint64_t *)&v320,  (uint64_t)&v272,  (uint64_t)v91,  v108);
    uint64_t result = swift_unknownObjectRelease();
    v105 = v253;
    if ((v111 & 1) != 0)
    {
      uint64_t result = swift_unknownObjectRelease_n();
      v239 = v273;
      v103 = (uint64_t)v260;
      goto LABEL_128;
    }

    goto LABEL_132;
  }

  v112 = v110 + 1;
  if (v110 + 1 >= *((unsigned __int16 *)v91 + 8))
  {
    v105 = v253;
LABEL_132:
    if (v91)
    {
      v113 = *((unsigned __int8 *)v91 + 18);
      v114 = *((unsigned __int16 *)v91 + 8);
      uint64_t result = swift_unknownObjectRelease_n();
      v115 = (4 * v113 + 8) & 0x3C;
      v116 = ((-15LL << v115) - 1) & v113;
      v105 = v253;
      v239 = v116 | (v114 << v115);
    }

    else
    {
      v239 = 0LL;
    }

    v91 = 0LL;
    v272 = v238;
    goto LABEL_136;
  }

  uint64_t result = swift_unknownObjectRelease_n();
  v239 = (v112 << v109) | ((-15LL << v109) - 1) & v102;
  v105 = v253;
LABEL_136:
  v103 = (uint64_t)v260;
LABEL_137:
  if (v241 != v231)
  {
    if (v272 != *(void *)(v39 + 88))
    {
LABEL_273:
      __break(1u);
LABEL_274:
      __break(1u);
LABEL_275:
      __break(1u);
      goto LABEL_276;
    }

    *(void *)&v254 = v272;
    v228 = v91;
    if (v91)
    {
      v117 = &v91[3 * ((v239 >> ((4 * *((_BYTE *)v91 + 18) + 8) & 0x3C)) & 0xF)];
      v118 = v117[4];
      v119 = v117[5];
      swift_bridgeObjectRetain();
      v232 = v119;
      swift_bridgeObjectRetain();
    }

    else
    {
      v120 = *(void *)(v39 + 64);
      swift_unknownObjectRetain();
      v104 = v259;
      v103 = (uint64_t)v260;
      specialized Rope._Node.subscript.getter(v239, v120);
      v232 = v121;
      v118 = v122;
      swift_unknownObjectRelease();
    }

    uint64_t result = swift_bridgeObjectRetain();
    v123 = 0LL;
    v124 = v230;
    v264 = v118;
    while (1)
    {
      v126 = v123 + 1;
      if (__OFADD__(v123, 1LL))
      {
        __break(1u);
LABEL_260:
        __break(1u);
        goto LABEL_261;
      }

      v127 = *(v124 - 1);
      v128 = *v124;
      if (*(void *)(v104 + 16))
      {
        swift_bridgeObjectRetain_n();
        v129 = specialized __RawDictionaryStorage.find<A>(_:)(v127, v128);
        if ((v130 & 1) != 0)
        {
          outlined init with copy of AttributedString._AttributeValue( *(void *)(v104 + 56) + 72 * v129,  (uint64_t)&v287);
        }

        else
        {
          v291 = 0LL;
          v289 = 0u;
          v290 = 0u;
          v287 = 0u;
          v288 = 0u;
        }

        swift_bridgeObjectRelease();
        v118 = v264;
        if (!*(void *)(v264 + 16))
        {
LABEL_152:
          v286 = 0LL;
          v284 = 0u;
          v285 = 0u;
          v282 = 0u;
          v283 = 0u;
          goto LABEL_159;
        }
      }

      else
      {
        v291 = 0LL;
        v289 = 0u;
        v290 = 0u;
        v287 = 0u;
        v288 = 0u;
        swift_bridgeObjectRetain();
        if (!*(void *)(v118 + 16)) {
          goto LABEL_152;
        }
      }

      swift_bridgeObjectRetain();
      v131 = specialized __RawDictionaryStorage.find<A>(_:)(v127, v128);
      if ((v132 & 1) != 0)
      {
        outlined init with copy of AttributedString._AttributeValue(*(void *)(v118 + 56) + 72 * v131, (uint64_t)&v282);
      }

      else
      {
        v286 = 0LL;
        v284 = 0u;
        v285 = 0u;
        v282 = 0u;
        v283 = 0u;
      }

      swift_bridgeObjectRelease();
LABEL_159:
      swift_bridgeObjectRelease();
      v91 = &demangling cache variable for type metadata for AttributedString._AttributeValue?;
      outlined init with copy of (Hashable & Sendable)?( (uint64_t)&v287,  (uint64_t)&v272,  &demangling cache variable for type metadata for AttributedString._AttributeValue?);
      outlined init with copy of (Hashable & Sendable)?( (uint64_t)&v282,  v103,  &demangling cache variable for type metadata for AttributedString._AttributeValue?);
      if (!v275)
      {
        if (v281) {
          goto LABEL_176;
        }
        outlined destroy of Any?( (uint64_t)&v272,  &demangling cache variable for type metadata for AttributedString._AttributeValue?);
        outlined destroy of Any?( (uint64_t)&v282,  &demangling cache variable for type metadata for AttributedString._AttributeValue?);
        uint64_t result = outlined destroy of Any?( (uint64_t)&v287,  &demangling cache variable for type metadata for AttributedString._AttributeValue?);
        goto LABEL_146;
      }

      outlined init with copy of (Hashable & Sendable)?( (uint64_t)&v272,  (uint64_t)v270,  &demangling cache variable for type metadata for AttributedString._AttributeValue?);
      if (!v281) {
        goto LABEL_175;
      }
      v133 = *(_OWORD *)(v103 + 48);
      v267 = *(_OWORD *)(v103 + 32);
      v268 = v133;
      v269 = *(void *)(v103 + 64);
      v134 = *(_OWORD *)(v103 + 16);
      v265 = *(_OWORD *)v103;
      v266 = v134;
      outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>( (uint64_t)v270,  (uint64_t)v328);
      outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>( (uint64_t)&v265,  (uint64_t)v327);
      outlined init with copy of (Hashable & Sendable)?( (uint64_t)v328,  (uint64_t)&v320,  &demangling cache variable for type metadata for (Hashable & Sendable)?);
      outlined init with copy of (Hashable & Sendable)?( (uint64_t)v327,  (uint64_t)v263,  &demangling cache variable for type metadata for (Hashable & Sendable)?);
      if (v321)
      {
        if (!v323)
        {
          __swift_destroy_boxed_opaque_existential_1((uint64_t)&v320);
LABEL_144:
          v125 = 0;
          goto LABEL_145;
        }

        outlined init with take of any PredicateExpression<Self.Output == B1>(&v320, (uint64_t)v324);
        outlined init with take of any PredicateExpression<Self.Output == B1>(v263, (uint64_t)v319);
        v135 = v325;
        v257 = v326;
        v256 = __swift_project_boxed_opaque_existential_1(v324, v325);
        v262 = v222;
        v136 = *(void *)(v135 - 8);
        MEMORY[0x1895F8858](v256);
        v138 = (char *)v222 - ((v137 + 15) & 0xFFFFFFFFFFFFFFF0LL);
        outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>( (uint64_t)v319,  (uint64_t)v318);
        v139 = type metadata accessor for Optional();
        *(void *)&v261 = v222;
        v140 = *(void *)(v139 - 8);
        MEMORY[0x1895F8858](v139);
        v142 = (char *)v222 - v141;
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Hashable & Sendable);
        v143 = swift_dynamicCast();
        v144 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v136 + 56);
        if (v143)
        {
          v144(v142, 0LL, 1LL, v135);
          (*(void (**)(char *, char *, uint64_t))(v136 + 32))(v138, v142, v135);
          v125 = dispatch thunk of static Equatable.== infix(_:_:)();
          (*(void (**)(char *, uint64_t))(v136 + 8))(v138, v135);
        }

        else
        {
          v144(v142, 1LL, 1LL, v135);
          (*(void (**)(char *, uint64_t))(v140 + 8))(v142, v139);
          v125 = 0;
        }

        v55 = v252;
        v104 = v259;
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v319);
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v324);
        v103 = (uint64_t)v260;
      }

      else
      {
        if (v323)
        {
          outlined destroy of Any?( (uint64_t)v263,  &demangling cache variable for type metadata for (Hashable & Sendable)?);
          goto LABEL_144;
        }

        v125 = 1;
      }

        swift_unknownObjectRelease();
        swift_unknownObjectRelease();
        v85 = v57 & 0xFFFFFFFFFFFFF0FFLL;
        v69 = v268;
        v68 = v85 | (v76 << 8);
        v54 = v246;
        v56 = v273;
        goto LABEL_71;
      }

      v51 = v267;
LABEL_102:
      if (v58)
      {
LABEL_301:
        __break(1u);
        goto LABEL_302;
      }

      goto LABEL_103;
    }
  }

  else
  {
    v56 = v273;
    if (v260 >= 0x800)
    {
LABEL_299:
      __break(1u);
      goto LABEL_300;
    }
  }

  swift_unknownObjectRetain_n();
  swift_retain();
  outlined retain of ReversedCollection<AttributedString.Runs.AttributesSlice1<AttributeScopes.FoundationAttributes.InflectionRuleAttribute>>((uint64_t)&v305);
  v68 = specialized Rope._endPath.getter(v52);
  uint64_t result = swift_unknownObjectRelease();
  v69 = 0LL;
  unint64_t v58 = 0LL;
  if (v52)
  {
LABEL_71:
    swift_unknownObjectRetain();
    v70 = v53;
    v71 = v54;
    v72 = specialized Rope._Node.distanceFromStart<A>(to:in:)(v54, v68, v69, v52, v70);
    uint64_t result = swift_unknownObjectRelease_n();
    goto LABEL_105;
  }

  v71 = v54;
  v72 = 0LL;
LABEL_105:
  v259 = v56 - v58;
  if (__OFSUB__(v56, v58))
  {
LABEL_285:
    __break(1u);
    goto LABEL_286;
  }

  v86 = v249[1];
  v341[3] = *v249;
  v341[4] = v86;
  v341[5] = v249[2];
  uint64_t result = BigString.utf8.getter();
  if (__OFSUB__(0LL, v58))
  {
LABEL_286:
    __break(1u);
    goto LABEL_287;
  }

  v237 = BigString.UTF8View.index(_:offsetBy:)();
  v88 = v87;
  v235[2] = v90;
  v235[3] = v89;
  uint64_t result = outlined release of Locale((uint64_t)&v330);
  v245 = v275;
  if (v72 >= (uint64_t)v275)
  {
LABEL_287:
    __break(1u);
    goto LABEL_288;
  }

  if (v71 != *(void *)(v272 + 88))
  {
LABEL_288:
    __break(1u);
LABEL_289:
    __break(1u);
LABEL_290:
    __break(1u);
    goto LABEL_291;
  }

  v235[1] = v88;
  v91 = *(uint64_t **)(v272 + 64);
  if (v69)
  {
    v92 = v69 + 24 * ((v68 >> ((4 * *(_BYTE *)(v69 + 18) + 8) & 0x3C)) & 0xF);
    v93 = *(void *)(v92 + 40);
    v271 = *(void *)(v92 + 32);
    swift_bridgeObjectRetain();
    v236 = v93;
    uint64_t result = swift_bridgeObjectRetain();
    v94 = v71;
  }

  else
  {
    swift_unknownObjectRetain();
    specialized Rope._Node.subscript.getter(v68, (uint64_t)v91);
    v271 = v95;
    v236 = v96;
    uint64_t result = swift_unknownObjectRelease();
    v91 = *(uint64_t **)(v272 + 64);
    v94 = *(void *)(v272 + 88);
  }

  v257 = v72 + 1;
  v276 = &v293;
  v285 = v71;
  v286 = v68;
  *(void *)&v275 = &v335;
  v244 = (uint64_t *)(v264 + 40);
  v287 = (uint64_t *)v69;
  v97 = v68;
  v98 = v272;
LABEL_113:
  if (v71 != v94) {
    goto LABEL_273;
  }
  v255 = v94;
  if (v69)
  {
    v99 = *(void *)(v69 + 24 * ((v97 >> ((4 * *(_BYTE *)(v69 + 18) + 8) & 0x3C)) & 0xF) + 24);
    swift_unknownObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }

  else
  {
    swift_unknownObjectRetain();
    v99 = specialized Rope._Node.subscript.getter(v97, (uint64_t)v91);
  }

  v100 = v271;
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  if (__OFADD__(v259, v99)) {
    goto LABEL_274;
  }
  v243 = v259 + v99;
  *(void *)&v268 = v69;
  if (!v91) {
    goto LABEL_275;
  }
  v101 = ((-15LL << ((4 * *((_BYTE *)v91 + 18) + 8) & 0x3C)) - 1) & (unint64_t)*((unsigned __int8 *)v91 + 18) | ((unint64_t)*((unsigned __int16 *)v91 + 8) << ((4 * *((_BYTE *)v91 + 18) + 8) & 0x3C));
  uint64_t result = swift_unknownObjectRetain();
  if (v97 >= v101) {
    goto LABEL_275;
  }
  v102 = v268;
  v256 = v97;
  if ((void)v268)
  {
    v103 = (4 * *(_BYTE *)(v268 + 18) + 8) & 0x3C;
    v104 = ((v97 >> v103) & 0xF) + 1;
    if (v104 < *(unsigned __int16 *)(v268 + 16))
    {
      v105 = (v104 << v103) | ((-15LL << v103) - 1) & v97;
      uint64_t result = swift_unknownObjectRelease_n();
LABEL_128:
      v91 = v287;
      goto LABEL_132;
    }
  }

  v106 = *((unsigned __int8 *)v91 + 18);
  v107 = (4 * v106 + 8) & 0x3C;
  v108 = (v97 >> v107) & 0xF;
  *(void *)&v333 = v108;
  if (v106)
  {
    swift_unknownObjectRetain();
    v109 = specialized closure #1 in Rope._Node.formSuccessor(of:)( (uint64_t)(v91 + 3),  (uint64_t *)&v333,  (uint64_t)&v285,  (uint64_t)v91,  v106);
    swift_unknownObjectRelease();
    v102 = v268;
    if ((v109 & 1) != 0)
    {
      uint64_t result = swift_unknownObjectRelease_n();
      v105 = v286;
      goto LABEL_128;
    }
  }

  else
  {
    v110 = v108 + 1;
    if (v108 + 1 < (unint64_t)*((unsigned __int16 *)v91 + 8))
    {
      uint64_t result = swift_unknownObjectRelease_n();
      v111 = v110 << v107;
      v97 = v256;
      v105 = v111 | ((-15LL << v107) - 1) & v256;
      v102 = v268;
      goto LABEL_132;
    }
  }

  v112 = *((unsigned __int8 *)v91 + 18);
  v113 = *((unsigned __int16 *)v91 + 8);
  uint64_t result = swift_unknownObjectRelease_n();
  v114 = (4 * v112 + 8) & 0x3C;
  v115 = ((-15LL << v114) - 1) & v112;
  v102 = v268;
  v116 = v113 << v114;
  v97 = v256;
  v105 = v115 | v116;
  v91 = 0LL;
  v285 = v255;
LABEL_132:
  if (v257 != v245)
  {
    if (v285 != *(void *)(v98 + 88))
    {
LABEL_276:
      __break(1u);
LABEL_277:
      __break(1u);
LABEL_278:
      __break(1u);
      goto LABEL_279;
    }

    v246 = v285;
    v241 = v91;
    v242 = v105;
    if (v91)
    {
      v117 = &v91[3 * ((v105 >> ((4 * *((_BYTE *)v91 + 18) + 8) & 0x3C)) & 0xF)];
      v118 = v117[4];
      v119 = v117[5];
      swift_bridgeObjectRetain();
      v247 = v119;
      swift_bridgeObjectRetain();
    }

    else
    {
      v120 = *(void *)(v98 + 64);
      swift_unknownObjectRetain();
      specialized Rope._Node.subscript.getter(v105, v120);
      v247 = v121;
      v118 = v122;
      swift_unknownObjectRelease();
    }

    uint64_t result = swift_bridgeObjectRetain();
    v123 = 0LL;
    v124 = v244;
    v277 = v118;
    while (1)
    {
      v126 = v123 + 1;
      if (__OFADD__(v123, 1LL))
      {
        __break(1u);
LABEL_263:
        __break(1u);
        goto LABEL_264;
      }

      v127 = *(v124 - 1);
      v128 = *v124;
      if (*(void *)(v100 + 16))
      {
        swift_bridgeObjectRetain_n();
        v129 = specialized __RawDictionaryStorage.find<A>(_:)(v127, v128);
        if ((v130 & 1) != 0)
        {
          outlined init with copy of AttributedString._AttributeValue( *(void *)(v100 + 56) + 72 * v129,  (uint64_t)&v300);
        }

        else
        {
          v304 = 0LL;
          v302 = 0u;
          v303 = 0u;
          v300 = 0u;
          v301 = 0u;
        }

        swift_bridgeObjectRelease();
        v118 = v277;
        if (!*(void *)(v277 + 16))
        {
LABEL_147:
          v299 = 0LL;
          v297 = 0u;
          v298 = 0u;
          v295 = 0u;
          v296 = 0u;
          goto LABEL_154;
        }
      }

      else
      {
        v304 = 0LL;
        v302 = 0u;
        v303 = 0u;
        v300 = 0u;
        v301 = 0u;
        swift_bridgeObjectRetain();
        if (!*(void *)(v118 + 16)) {
          goto LABEL_147;
        }
      }

      swift_bridgeObjectRetain();
      v131 = specialized __RawDictionaryStorage.find<A>(_:)(v127, v128);
      if ((v132 & 1) != 0)
      {
        outlined init with copy of AttributedString._AttributeValue(*(void *)(v118 + 56) + 72 * v131, (uint64_t)&v295);
      }

      else
      {
        v299 = 0LL;
        v297 = 0u;
        v298 = 0u;
        v295 = 0u;
        v296 = 0u;
      }

      swift_bridgeObjectRelease();
LABEL_154:
      swift_bridgeObjectRelease();
      v91 = &demangling cache variable for type metadata for AttributedString._AttributeValue?;
      outlined init with copy of (Hashable & Sendable)?( (uint64_t)&v300,  (uint64_t)&v285,  &demangling cache variable for type metadata for AttributedString._AttributeValue?);
      outlined init with copy of (Hashable & Sendable)?( (uint64_t)&v295,  (uint64_t)v276,  &demangling cache variable for type metadata for AttributedString._AttributeValue?);
      if (!v288)
      {
        if (v294) {
          goto LABEL_171;
        }
        outlined destroy of Any?( (uint64_t)&v285,  &demangling cache variable for type metadata for AttributedString._AttributeValue?);
        outlined destroy of Any?( (uint64_t)&v295,  &demangling cache variable for type metadata for AttributedString._AttributeValue?);
        uint64_t result = outlined destroy of Any?( (uint64_t)&v300,  &demangling cache variable for type metadata for AttributedString._AttributeValue?);
        goto LABEL_141;
      }

      outlined init with copy of (Hashable & Sendable)?( (uint64_t)&v285,  (uint64_t)v283,  &demangling cache variable for type metadata for AttributedString._AttributeValue?);
      if (!v294) {
        goto LABEL_170;
      }
      v133 = *((_OWORD *)v276 + 3);
      v280 = *((_OWORD *)v276 + 2);
      v281 = v133;
      v282 = v276[8];
      v134 = *((_OWORD *)v276 + 1);
      v278 = *(_OWORD *)v276;
      v279 = v134;
      outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>( (uint64_t)v283,  (uint64_t)v341);
      outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>( (uint64_t)&v278,  (uint64_t)v340);
      outlined init with copy of (Hashable & Sendable)?( (uint64_t)v341,  (uint64_t)&v333,  &demangling cache variable for type metadata for (Hashable & Sendable)?);
      outlined init with copy of (Hashable & Sendable)?( (uint64_t)v340,  v275,  &demangling cache variable for type metadata for (Hashable & Sendable)?);
      if (v334)
      {
        if (!v336)
        {
          __swift_destroy_boxed_opaque_existential_1((uint64_t)&v333);
LABEL_139:
          v125 = 0;
          goto LABEL_140;
        }

        outlined init with take of any PredicateExpression<Self.Output == B1>(&v333, (uint64_t)v337);
        outlined init with take of any PredicateExpression<Self.Output == B1>((__int128 *)v275, (uint64_t)v332);
        v135 = v338;
        v270 = v339;
        v269 = __swift_project_boxed_opaque_existential_1(v337, v338);
        v274 = v235;
        v136 = *(void *)(v135 - 8);
        MEMORY[0x1895F8858](v269);
        v138 = (char *)v235 - ((v137 + 15) & 0xFFFFFFFFFFFFFFF0LL);
        outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>( (uint64_t)v332,  (uint64_t)v331);
        v139 = type metadata accessor for Optional();
        v273 = (char *)v235;
        v140 = *(void *)(v139 - 8);
        MEMORY[0x1895F8858](v139);
        v142 = (char *)v235 - v141;
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Hashable & Sendable);
        v143 = swift_dynamicCast();
        v144 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v136 + 56);
        if (v143)
        {
          v144(v142, 0LL, 1LL, v135);
          (*(void (**)(char *, char *, uint64_t))(v136 + 32))(v138, v142, v135);
          v125 = dispatch thunk of static Equatable.== infix(_:_:)();
          (*(void (**)(char *, uint64_t))(v136 + 8))(v138, v135);
        }

        else
        {
          v144(v142, 1LL, 1LL, v135);
          (*(void (**)(char *, uint64_t))(v140 + 8))(v142, v139);
          v125 = 0;
        }

        v100 = v271;
        v98 = v272;
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v332);
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v337);
        v51 = v267;
      }

      else
      {
        if (v336)
        {
          outlined destroy of Any?(v275, &demangling cache variable for type metadata for (Hashable & Sendable)?);
          goto LABEL_139;
        }

        v125 = 1;
      }

        swift_unknownObjectRelease();
        v71 = v63;
        swift_unknownObjectRelease();
        v70 = v60 & 0xFFFFFFFFFFFFF0FFLL | (v77 << 8);
        v54 = v285;
        *(void *)&v284 = v70;
        goto LABEL_71;
      }

      v56 = (uint64_t)v296;
LABEL_102:
      if (v59)
      {
LABEL_313:
        __break(1u);
        goto LABEL_314;
      }

      goto LABEL_103;
    }
  }

  else if (v289 >= 0x800)
  {
LABEL_311:
    __break(1u);
    goto LABEL_312;
  }

  swift_unknownObjectRetain_n();
  swift_retain();
  outlined retain of ReversedCollection<AttributedString.Runs.AttributesSlice1<AttributeScopes.FoundationAttributes.InflectionRuleAttribute>>((uint64_t)&v324);
  v70 = specialized Rope._endPath.getter(v55);
  uint64_t result = swift_unknownObjectRelease();
  v71 = 0LL;
  int v59 = 0LL;
  *(void *)&v284 = v70;
  if (v55)
  {
LABEL_71:
    swift_unknownObjectRetain();
    v72 = v281;
    v73 = specialized Rope._Node.distanceFromStart<A>(to:in:)(v281, v70, v71, v55, v56);
    uint64_t result = swift_unknownObjectRelease_n();
    goto LABEL_105;
  }

  v73 = 0LL;
  v72 = v281;
LABEL_105:
  v276 = (char *)(v292 - v59);
  if (__OFSUB__(v292, v59))
  {
LABEL_297:
    __break(1u);
    goto LABEL_298;
  }

  v86 = v266[1];
  v360[3] = *v266;
  v360[4] = v86;
  v360[5] = v266[2];
  uint64_t result = BigString.utf8.getter();
  if (__OFSUB__(0LL, v59))
  {
LABEL_298:
    __break(1u);
    goto LABEL_299;
  }

  v256 = BigString.UTF8View.index(_:offsetBy:)();
  v88 = v87;
  v254[1] = v90;
  v254[2] = v89;
  uint64_t result = outlined release of Locale((uint64_t)&v349);
  v264 = v294;
  if (v73 >= (uint64_t)v294)
  {
LABEL_299:
    __break(1u);
    goto LABEL_300;
  }

  if (v72 != *(void *)(v8 + 88))
  {
LABEL_300:
    __break(1u);
LABEL_301:
    __break(1u);
LABEL_302:
    __break(1u);
    goto LABEL_303;
  }

  v254[0] = v88;
  v91 = *(void *)(v8 + 64);
  if (v71)
  {
    v92 = v284;
    v93 = v71 + 24 * (((unint64_t)v284 >> ((4 * *(_BYTE *)(v71 + 18) + 8) & 0x3C)) & 0xF);
    v94 = v73;
    v95 = *(void *)(v93 + 40);
    v295 = *(void *)(v93 + 32);
    swift_bridgeObjectRetain();
    v255 = v95;
    v73 = v94;
    v8 = v290;
    uint64_t result = swift_bridgeObjectRetain();
    v96 = v72;
  }

  else
  {
    swift_unknownObjectRetain();
    v92 = v284;
    specialized Rope._Node.subscript.getter(v284, v91);
    v295 = v97;
    v255 = v98;
    uint64_t result = swift_unknownObjectRelease();
    v91 = *(void *)(v8 + 64);
    v96 = *(void *)(v8 + 88);
  }

  v273 = v73 + 1;
  v296 = &v312;
  v304 = v72;
  v305 = v92;
  *(void *)&v294 = &v354;
  v263 = (uint64_t *)(v282 + 40);
  v306 = v71;
  v99 = v92;
LABEL_113:
  if (v72 != v96) {
    goto LABEL_285;
  }
  v272 = v96;
  v275 = v71;
  if (v71)
  {
    v100 = *(void *)(v71 + 24 * ((v99 >> ((4 * *(_BYTE *)(v71 + 18) + 8) & 0x3C)) & 0xF) + 24);
    swift_unknownObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }

  else
  {
    swift_unknownObjectRetain();
    v100 = specialized Rope._Node.subscript.getter(v99, v91);
  }

  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  if (__OFADD__(v276, v100)) {
    goto LABEL_286;
  }
  v262 = &v276[v100];
  if (v91)
  {
    v101 = ((-15LL << ((4 * *(_BYTE *)(v91 + 18) + 8) & 0x3C)) - 1) & (unint64_t)*(unsigned __int8 *)(v91 + 18) | ((unint64_t)*(unsigned __int16 *)(v91 + 16) << ((4 * *(_BYTE *)(v91 + 18) + 8) & 0x3C));
    uint64_t result = swift_unknownObjectRetain();
  }

  else
  {
    v101 = 0LL;
  }

  if (v99 >= v101) {
    goto LABEL_287;
  }
  *(void *)&v284 = v99;
  if (v275)
  {
    v102 = (4 * *(_BYTE *)(v275 + 18) + 8) & 0x3C;
    v103 = ((v99 >> v102) & 0xF) + 1;
    if (v103 < *(unsigned __int16 *)(v275 + 16))
    {
      v104 = (v103 << v102) | ((-15LL << v102) - 1) & v99;
      uint64_t result = swift_unknownObjectRelease_n();
LABEL_128:
      v109 = v306;
LABEL_129:
      v110 = v295;
      goto LABEL_137;
    }
  }

  v105 = *(unsigned __int8 *)(v91 + 18);
  v106 = (4 * v105 + 8) & 0x3C;
  v107 = (v99 >> v106) & 0xF;
  *(void *)&v352 = v107;
  if (v105)
  {
    swift_unknownObjectRetain();
    v108 = specialized closure #1 in Rope._Node.formSuccessor(of:)( v91 + 24,  (uint64_t *)&v352,  (uint64_t)&v304,  v91,  v105);
    uint64_t result = swift_unknownObjectRelease();
    if ((v108 & 1) != 0)
    {
      uint64_t result = swift_unknownObjectRelease_n();
      v104 = v305;
      goto LABEL_128;
    }
  }

  else
  {
    v111 = v107 + 1;
    if (v107 + 1 < (unint64_t)*(unsigned __int16 *)(v91 + 16))
    {
      uint64_t result = swift_unknownObjectRelease_n();
      v112 = v111 << v106;
      v99 = v284;
      v104 = v112 | ((-15LL << v106) - 1) & v284;
      v109 = v91;
      goto LABEL_129;
    }

    v99 = v284;
  }

  if (v91)
  {
    v113 = *(unsigned __int8 *)(v91 + 18);
    v114 = *(unsigned __int16 *)(v91 + 16);
    uint64_t result = swift_unknownObjectRelease_n();
    v115 = (4 * v113 + 8) & 0x3C;
    v116 = ((-15LL << v115) - 1) & v113;
    v117 = v114 << v115;
    v99 = v284;
    v104 = v116 | v117;
  }

  else
  {
    v104 = 0LL;
  }

  v110 = v295;
  v109 = 0LL;
  v304 = v272;
LABEL_137:
  if (v273 != v264)
  {
    if (v304 != *(void *)(v8 + 88))
    {
LABEL_288:
      __break(1u);
LABEL_289:
      __break(1u);
LABEL_290:
      __break(1u);
      goto LABEL_291;
    }

    v281 = v304;
    v260 = v109;
    v261 = v104;
    if (v109)
    {
      v118 = v109 + 24 * ((v104 >> ((4 * *(_BYTE *)(v109 + 18) + 8) & 0x3C)) & 0xF);
      v120 = *(void *)(v118 + 32);
      v119 = *(void *)(v118 + 40);
      swift_bridgeObjectRetain();
      v265 = v119;
      swift_bridgeObjectRetain();
    }

    else
    {
      v121 = *(void *)(v8 + 64);
      swift_unknownObjectRetain();
      specialized Rope._Node.subscript.getter(v104, v121);
      v120 = v122;
      v265 = v123;
      v110 = v295;
      swift_unknownObjectRelease();
    }

    uint64_t result = swift_bridgeObjectRetain();
    v124 = 0LL;
    v125 = v263;
    v293 = v120;
    while (1)
    {
      v128 = v124 + 1;
      if (__OFADD__(v124, 1LL))
      {
        __break(1u);
LABEL_275:
        __break(1u);
        goto LABEL_276;
      }

      v129 = *(v125 - 1);
      v130 = *v125;
      if (*(void *)(v110 + 16))
      {
        swift_bridgeObjectRetain_n();
        v131 = specialized __RawDictionaryStorage.find<A>(_:)(v129, v130);
        if ((v132 & 1) != 0)
        {
          outlined init with copy of AttributedString._AttributeValue( *(void *)(v110 + 56) + 72 * v131,  (uint64_t)&v319);
        }

        else
        {
          v323 = 0LL;
          v321 = 0u;
          v322 = 0u;
          v319 = 0u;
          v320 = 0u;
        }

        swift_bridgeObjectRelease();
        if (!*(void *)(v120 + 16))
        {
LABEL_152:
          v318 = 0LL;
          v316 = 0u;
          v317 = 0u;
          v314 = 0u;
          v315 = 0u;
          goto LABEL_159;
        }
      }

      else
      {
        v323 = 0LL;
        v321 = 0u;
        v322 = 0u;
        v319 = 0u;
        v320 = 0u;
        swift_bridgeObjectRetain();
        if (!*(void *)(v120 + 16)) {
          goto LABEL_152;
        }
      }

      swift_bridgeObjectRetain();
      v133 = specialized __RawDictionaryStorage.find<A>(_:)(v129, v130);
      if ((v134 & 1) != 0)
      {
        outlined init with copy of AttributedString._AttributeValue(*(void *)(v120 + 56) + 72 * v133, (uint64_t)&v314);
      }

      else
      {
        v318 = 0LL;
        v316 = 0u;
        v317 = 0u;
        v314 = 0u;
        v315 = 0u;
      }

      swift_bridgeObjectRelease();
      v110 = v295;
LABEL_159:
      swift_bridgeObjectRelease();
      outlined init with copy of (Hashable & Sendable)?( (uint64_t)&v319,  (uint64_t)&v304,  &demangling cache variable for type metadata for AttributedString._AttributeValue?);
      outlined init with copy of (Hashable & Sendable)?( (uint64_t)&v314,  (uint64_t)v296,  &demangling cache variable for type metadata for AttributedString._AttributeValue?);
      if (!v307)
      {
        if (v313) {
          goto LABEL_176;
        }
        outlined destroy of Any?( (uint64_t)&v304,  &demangling cache variable for type metadata for AttributedString._AttributeValue?);
        outlined destroy of Any?( (uint64_t)&v314,  &demangling cache variable for type metadata for AttributedString._AttributeValue?);
        uint64_t result = outlined destroy of Any?( (uint64_t)&v319,  &demangling cache variable for type metadata for AttributedString._AttributeValue?);
        goto LABEL_146;
      }

      outlined init with copy of (Hashable & Sendable)?( (uint64_t)&v304,  (uint64_t)v302,  &demangling cache variable for type metadata for AttributedString._AttributeValue?);
      if (!v313) {
        goto LABEL_175;
      }
      v135 = *((_OWORD *)v296 + 3);
      v299 = *((_OWORD *)v296 + 2);
      v300 = v135;
      v301 = v296[8];
      v136 = *((_OWORD *)v296 + 1);
      v297 = *(_OWORD *)v296;
      v298 = v136;
      outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>( (uint64_t)v302,  (uint64_t)v360);
      outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>( (uint64_t)&v297,  (uint64_t)v359);
      outlined init with copy of (Hashable & Sendable)?( (uint64_t)v360,  (uint64_t)&v352,  &demangling cache variable for type metadata for (Hashable & Sendable)?);
      outlined init with copy of (Hashable & Sendable)?( (uint64_t)v359,  v294,  &demangling cache variable for type metadata for (Hashable & Sendable)?);
      if (v353)
      {
        if (!v355)
        {
          v126 = v8;
          __swift_destroy_boxed_opaque_existential_1((uint64_t)&v352);
LABEL_144:
          v127 = 0;
          goto LABEL_145;
        }

        outlined init with take of any PredicateExpression<Self.Output == B1>(&v352, (uint64_t)v356);
        outlined init with take of any PredicateExpression<Self.Output == B1>((__int128 *)v294, (uint64_t)v351);
        v137 = v357;
        v287 = v358;
        *(void *)&v286 = __swift_project_boxed_opaque_existential_1(v356, v357);
        v292 = (char *)v254;
        v138 = *(void *)(v137 - 8);
        MEMORY[0x1895F8858](v286);
        v140 = (char *)v254 - ((v139 + 15) & 0xFFFFFFFFFFFFFFF0LL);
        outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>( (uint64_t)v351,  (uint64_t)v350);
        v141 = type metadata accessor for Optional();
        v291 = v254;
        v142 = *(void *)(v141 - 8);
        MEMORY[0x1895F8858](v141);
        v144 = (char *)v254 - v143;
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Hashable & Sendable);
        v145 = swift_dynamicCast();
        v146 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v138 + 56);
        if (v145)
        {
          v146(v144, 0LL, 1LL, v137);
          (*(void (**)(char *, char *, uint64_t))(v138 + 32))(v140, v144, v137);
          v127 = dispatch thunk of static Equatable.== infix(_:_:)();
          (*(void (**)(char *, uint64_t))(v138 + 8))(v140, v137);
        }

        else
        {
          v146(v144, 1LL, 1LL, v137);
          (*(void (**)(char *, uint64_t))(v142 + 8))(v144, v141);
          v127 = 0;
        }

        v126 = v290;
        v54 = v285;
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v351);
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v356);
        v110 = v295;
      }

      else
      {
        v126 = v8;
        if (v355)
        {
          outlined destroy of Any?(v294, &demangling cache variable for type metadata for (Hashable & Sendable)?);
          goto LABEL_144;
        }

        v127 = 1;
      }

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease_n();
  object = v201._object;
  if (!v201._object) {
    goto LABEL_147;
  }
  countAndFlagsBits = v201._countAndFlagsBits;
  swift_bridgeObjectRetain();
  v153 = specialized static Duration.TimeFormatStyle.Attributed.componentsFromPatternString(_:patternSet:)( countAndFlagsBits,  (unint64_t)object,  outlined read-only object #3 of Duration.TimeFormatStyle.Attributed.format(_:));
  swift_arrayDestroy();
  swift_bridgeObjectRelease();
  v154 = v188;
  if (!v137[2])
  {
    v156 = 0.0;
    v157 = 0.0;
LABEL_114:
    v160 = 0.0;
    goto LABEL_115;
  }

  v155 = specialized __RawDictionaryStorage.find<A>(_:)(2u);
  v156 = 0.0;
  v157 = 0.0;
  if ((v158 & 1) != 0) {
    v157 = *(double *)(v137[7] + 8 * v155);
  }
  if (!v137[2]) {
    goto LABEL_114;
  }
  v159 = specialized __RawDictionaryStorage.find<A>(_:)(3u);
  v160 = 0.0;
  if ((v161 & 1) != 0) {
    v156 = *(double *)(v137[7] + 8 * v159);
  }
  if (v137[2])
  {
    v162 = specialized __RawDictionaryStorage.find<A>(_:)(4u);
    if ((v163 & 1) != 0) {
      v160 = *(double *)(v137[7] + 8 * v162);
    }
  }

  __break(1u);
LABEL_104:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

              if (v42 == 0x7FFFFFFFFFFFFFFFLL) {
                v55 = 0LL;
              }
              else {
                v55 = v42;
              }
              *(void *)&__src[11] = v55;
              BYTE8(__src[11]) = v42 == 0x7FFFFFFFFFFFFFFFLL;
              if ((v12 & 0x100) == 0)
              {
LABEL_60:
                if ((v12 & 0x200) == 0) {
                  goto LABEL_61;
                }
LABEL_110:
                if ((v41 & 1) != 0)
                {
                  if ((uint64_t)v4 >= 91)
                  {
                    if (v4 >= 0xB6)
                    {
                      if (v4 >= 0x112)
                      {
                        if (v4 >= 0x16F) {
                          goto LABEL_268;
                        }
                        goto LABEL_148;
                      }

    v68 = (v73 - 1) & v73;
    v70 = __clz(__rbit64(v73)) + (v65 << 6);
LABEL_84:
    v71 = (unint64_t *)(*(void *)(v10 + 48) + 16 * v70);
    v72 = *v71;
    unint64_t v2 = v71[1];
    swift_bridgeObjectRetain();
    uint64_t v15 = (uint64_t)&v371;
    specialized Set._Variant.insert(_:)((unint64_t *)&v439, v72, v2);
    uint64_t result = swift_bridgeObjectRelease();
  }

  v348 = v69;
  swift_release();
  v79 = v375;
  *(void *)&v357 = v375;
  if (v340 > 0x7FF)
  {
    v84 = *(void *)(v32 + 64);
    v85 = *(void *)(v32 + 72);
    v86 = *(void *)(v32 + 80);
    v87 = *(void *)(v32 + 88);
    swift_unknownObjectRetain();
    swift_retain();
    AttributedString._InternalRuns.endIndex.getter(v84, v85, v86, v87, &v383);
    v354 = v383;
    v339 = v384;
    v83 = v385;
    swift_unknownObjectRelease();
    v82 = v339;
    v81 = v354;
  }

  else
  {
    v80 = (void *)swift_retain();
    AttributedString._InternalRunsSlice.startIndex.getter(v80, 0LL, (unint64_t *)&v383);
    v81 = v383;
    v82 = v384;
    v83 = v385;
  }

  v88 = v355;
  v375 = v81;
  v376 = v82;
  *(void *)&v377 = v83;
  v89 = *(void *)(v32 + 64);
  v90 = *(void *)(v32 + 72);
  v91 = *(void *)(v32 + 80);
  v92 = *(void *)(v32 + 88);
  Enum = getEnumTag for _DarwinSearchPathsSequence.Iterator.State();
  swift_unknownObjectRetain();
  LODWORD(v354) = Enum;
  AttributedString._InternalRuns.index(atUTF8Offset:preferEnd:)(0LL, Enum & 1, v89, v90, v91, v92, (uint64_t *)&v432);
  v94 = v434;
  swift_unknownObjectRelease();
  if (v94 < v83 && *(void *)(v79 + 16))
  {
    while (1)
    {
      a3 = *((void *)&v375 + 1);
      v95 = v375;
      v96 = v376;
      v97 = *(void *)(v32 + 64);
      v98 = *(void *)(v32 + 80);
      v99 = swift_unknownObjectRetain();
      uint64_t result = specialized Rope._endPath.getter(v99);
      if (v97)
      {
        uint64_t result = swift_unknownObjectRelease();
        if (v83 != v98) {
          goto LABEL_132;
        }
      }

      else if (v83)
      {
LABEL_132:
        v113 = *(void *)(v32 + 64);
        v112 = *(void *)(v32 + 72);
        v114 = *(void *)(v32 + 80);
        uint64_t v16 = *(void *)(v32 + 88);
        *(void *)&v432 = v95;
        *((void *)&v432 + 1) = a3;
        *(void *)&v433 = v96;
        v115 = *((void *)&v96 + 1) - 1LL;
        if (__OFSUB__(*((void *)&v96 + 1), 1LL)) {
          goto LABEL_393;
        }
        swift_unknownObjectRetain();
        specialized Rope.formIndex(before:)((uint64_t)&v432, v113, v112, v114, v16);
        v116 = *((void *)&v432 + 1);
        a3 = v433;
        v102 = v432;
        v117 = specialized Rope.subscript.getter(v432, *((unint64_t *)&v432 + 1), v433, v113, v112, v114, v16);
        uint64_t v16 = v118;
        swift_unknownObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t result = swift_bridgeObjectRelease();
        v119 = v83 - v117;
        if (__OFSUB__(v83, v117)) {
          goto LABEL_394;
        }
        int v42 = v340 >> 11;
        v103 = v348;
        goto LABEL_158;
      }

      v100 = *(void *)(v32 + 64);
      v101 = *(void *)(v32 + 72);
      uint64_t v16 = *(void *)(v32 + 80);
      v102 = *(void *)(v32 + 88);
      if (v100)
      {
        int v42 = v340 >> 11;
        v103 = v348;
        if (*(_WORD *)(v100 + 16))
        {
          unsigned int v11 = *(unsigned __int8 *)(v100 + 18);
          if (*(_BYTE *)(v100 + 18))
          {
            uint64_t result = swift_unknownObjectRetain_n();
            uint64_t v16 = v340 >> 11;
            v104 = v100;
            while (1)
            {
              v106 = *(unsigned __int16 *)(v104 + 16);
              if (!*(_WORD *)(v104 + 16)) {
                goto LABEL_423;
              }
              v107 = *(void *)(v104 + 40);
              unint64_t v46 = __OFSUB__(v16, v107);
              v108 = v16 - v107;
              if (v46) {
                break;
              }
              if (v108 <= 0)
              {
                v56 = 0LL;
              }

              else
              {
                if ((_DWORD)v106 == 1) {
                  goto LABEL_425;
                }
                v109 = *(void *)(v104 + 64);
                uint64_t v16 = v108 - v109;
                if (__OFSUB__(v108, v109)) {
                  goto LABEL_376;
                }
                if (v16 >= 1)
                {
                  if ((_DWORD)v106 == 2) {
                    goto LABEL_425;
                  }
                  v110 = (void *)(v104 + 88);
                  v56 = 2LL;
                  while (v106 != v56)
                  {
                    v111 = v16 - *v110;
                    if (__OFSUB__(v16, *v110)) {
                      goto LABEL_346;
                    }
                    if (v111 < 1) {
                      goto LABEL_116;
                    }
                    ++v56;
                    v110 += 3;
                    uint64_t v16 = v111;
                    if (v106 == v56) {
                      goto LABEL_425;
                    }
                  }

                  __break(1u);
LABEL_346:
                  __break(1u);
LABEL_347:
                  v328 = *(void *)(v42 + 48);
                  unint64_t v46 = __OFSUB__(v56, v328);
                  int v44 = v56 - v328;
                  if (v46) {
                    goto LABEL_421;
                  }
                  if (__OFADD__(v44, 1LL)) {
                    goto LABEL_422;
                  }
                  if (v44 + 1 >= 1)
                  {
                    if ((_DWORD)v104 != 2)
                    {
                      v329 = (void *)(v42 + 72);
                      unint64_t v47 = 2LL;
                      while (v104 != v47)
                      {
                        v219 = v44 - *v329;
                        if (__OFSUB__(v44, *v329)) {
                          goto LABEL_414;
                        }
                        if (__OFADD__(v219, 1LL)) {
                          goto LABEL_415;
                        }
                        if (v219 + 1 < 1) {
                          goto LABEL_370;
                        }
                        ++v47;
                        v329 += 3;
                        int v44 = v219;
                        if (v104 == v47) {
                          goto LABEL_361;
                        }
                      }

                      goto LABEL_413;
                    }

                    v219 = v44;
                    goto LABEL_361;
                  }

        if (v9) {
          goto LABEL_380;
        }
        goto LABEL_104;
      }

      uint64_t result = (void *)swift_unknownObjectRetain_n();
      unint64_t v9 = v8;
      unint64_t v5 = v11;
LABEL_77:
      unint64_t v33 = *(unsigned __int16 *)(v5 + 16);
      if (!*(_WORD *)(v5 + 16)) {
        goto LABEL_75;
      }
      unint64_t v47 = *(void *)(v5 + 40);
      char v20 = __OFSUB__(v9, v47);
      unint64_t v35 = v9 - v47;
      if (v20) {
        goto LABEL_337;
      }
      if (__OFADD__(v35, 1LL)) {
        goto LABEL_338;
      }
      if (v35 + 1 <= 0)
      {
        unint64_t v33 = 0LL;
        goto LABEL_76;
      }

      if ((_DWORD)v33 == 1)
      {
        unint64_t v9 = v35;
LABEL_75:
        if (!v9) {
          goto LABEL_76;
        }
        __break(1u);
LABEL_336:
        __break(1u);
LABEL_337:
        __break(1u);
LABEL_338:
        __break(1u);
LABEL_339:
        __break(1u);
LABEL_340:
        __break(1u);
        goto LABEL_341;
      }

      unint64_t v48 = (uint64_t *)(v5 + 64);
      unint64_t v49 = 1LL;
      while (1)
      {
        unint64_t v50 = *v48;
        v48 += 3;
        unint64_t v9 = v35 - v50;
        if (__OFSUB__(v35, v50)) {
          break;
        }
        if (__OFADD__(v9, 1LL)) {
          goto LABEL_331;
        }
        if (v9 + 1 < 1)
        {
          unint64_t v33 = v49;
          unint64_t v9 = v35;
LABEL_76:
          unint64_t v46 = (4 * *(_BYTE *)(v5 + 18) + 8) & 0x3C;
          unint64_t v22 = ((-15LL << v46) - 1) & v22 | (v33 << v46);
          unint64_t v43 = *(void *)(v5 + 24 + 24 * v33);
          swift_unknownObjectRetain();
          uint64_t result = (void *)swift_unknownObjectRelease();
          unint64_t v5 = v43;
          if (!*(_BYTE *)(v43 + 18)) {
            goto LABEL_91;
          }
          goto LABEL_77;
        }

        ++v49;
        unint64_t v35 = v9;
        if (v33 == v49) {
          goto LABEL_75;
        }
      }

      __break(1u);
LABEL_331:
      __break(1u);
LABEL_332:
      __break(1u);
LABEL_333:
      __break(1u);
LABEL_334:
      uint64_t v15 = v11;
      uint64_t v31 = v35;
      unint64_t v19 = v33;
LABEL_50:
      swift_unknownObjectRelease();
      uint64_t result = (void *)swift_unknownObjectRelease();
      unint64_t v17 = v22 & 0xFFFFFFFFFFFFF0FFLL;
      uint64_t v16 = v22 & 0xFFFFFFFFFFFFF0FFLL | (v31 << 8);
      v8 = a2;
      uint64_t v10 = v181;
      if (v5) {
        goto LABEL_13;
      }
LABEL_51:
      v175 = 0LL;
      char v20 = __OFSUB__(v8, v19);
      unint64_t v21 = v8 - v19;
      if (v20) {
        goto LABEL_53;
      }
    }

    int v42 = ((-15LL << ((4 * v22 + 8) & 0x3C)) - 1) & v22 | ((unint64_t)*(unsigned __int16 *)(v11 + 16) << ((4 * v22 + 8) & 0x3C));
    swift_unknownObjectRetain();
    unint64_t v9 = 0LL;
    unint64_t v43 = 0LL;
LABEL_105:
    swift_unknownObjectRetain();
    specialized Rope._Node.distanceFromStart<A>(to:in:)(v172, v42, v43, v11, v179);
    uint64_t result = (void *)swift_unknownObjectRelease_n();
    v8 = a2;
    uint64_t v10 = v181;
LABEL_106:
    int v44 = v8 - v9;
    unint64_t v45 = v177;
    if (__OFSUB__(v8, v9)) {
      goto LABEL_356;
    }
    unint64_t v9 = a3;
LABEL_108:
    if (v21 >= v44) {
      return result;
    }
    if (v12 != v10[11]) {
      goto LABEL_346;
    }
    if (v18)
    {
      v57 = &v18[3 * ((v45 >> ((4 * *((_BYTE *)v18 + 18) + 8) & 0x3C)) & 0xF)];
      int v59 = v57[4];
      unint64_t v58 = v57[5];
      uint64_t v60 = v57[3];
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain_n();
    }

    else
    {
      v61 = v10[8];
      swift_unknownObjectRetain();
      specialized Rope._Node.subscript.getter(v45, v61);
      int v59 = v62;
      unint64_t v58 = v63;
      uint64_t result = (void *)swift_unknownObjectRelease();
      if (v12 != v10[11]) {
        goto LABEL_366;
      }
      v64 = v10[8];
      swift_unknownObjectRetain();
      uint64_t v60 = specialized Rope._Node.subscript.getter(v177, v64);
      unint64_t v45 = v177;
      swift_unknownObjectRelease();
    }

    swift_bridgeObjectRelease();
    uint64_t result = (void *)swift_bridgeObjectRelease();
    v65 = v21 + v60;
    if (__OFADD__(v21, v60)) {
      goto LABEL_347;
    }
    *(void *)&v191 = v59;
    *((void *)&v191 + 1) = v58;
    v66 = v21 >= v9 ? v9 : v21;
    v67 = v21 >= a2 ? v66 : a2;
    v68 = v65 <= a2 ? a2 : v21 + v60;
    v69 = v65 <= v9 ? v68 : v9;
    if (v67 == v69) {
      break;
    }
    if (v67 != v21 || v69 != v65)
    {
      v190 = 0LL;
      v188 = 0u;
      v189 = 0u;
      v186 = 0u;
      v187 = 0u;
      uint64_t result = (void *)specialized AttributedString._AttributeStorage.subscript.setter((uint64_t)&v186, a4, a5);
      if (__OFSUB__(v69, v67)) {
        goto LABEL_358;
      }
      v85 = *((void *)&v191 + 1);
      unint64_t v5 = v191;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      specialized AttributedString._InternalRuns.replaceUTF8Subrange<A>(_:with:)(v67, v69, v69 - v67, v5, v85);
      swift_bridgeObjectRelease();
      uint64_t result = (void *)swift_bridgeObjectRelease();
      v86 = v181;
      unsigned int v11 = v181[8];
      uint64_t v12 = v181[10];
      if (v11) {
        v87 = v181[10];
      }
      else {
        v87 = 0LL;
      }
      if (v21 < 0 || v87 < v21) {
        goto LABEL_360;
      }
      int v18 = (void *)v181[9];
      v178 = (uint64_t)v18;
      v180 = v181[11];
      if (!v11 || !*(_WORD *)(v11 + 16) || v21 >= v12)
      {
        v93 = v6;
        v94 = swift_unknownObjectRetain_n();
        v95 = specialized Rope._endPath.getter(v94);
        swift_unknownObjectRelease();
        int v18 = 0LL;
        unint64_t v9 = 0LL;
        if (!v11)
        {
          swift_bridgeObjectRelease();
          uint64_t result = (void *)swift_bridgeObjectRelease();
          v81 = 0LL;
LABEL_231:
          unint64_t v9 = a3;
          v96 = v95;
          char v6 = v93;
          goto LABEL_232;
        }

        if (v9) {
          goto LABEL_380;
        }
        goto LABEL_104;
      }

      uint64_t result = (void *)swift_unknownObjectRetain_n();
      unint64_t v9 = v8;
      unint64_t v5 = v11;
LABEL_77:
      unint64_t v33 = *(unsigned __int16 *)(v5 + 16);
      if (!*(_WORD *)(v5 + 16)) {
        goto LABEL_75;
      }
      unint64_t v47 = *(void *)(v5 + 40);
      char v20 = __OFSUB__(v9, v47);
      unint64_t v35 = v9 - v47;
      if (v20) {
        goto LABEL_337;
      }
      if (__OFADD__(v35, 1LL)) {
        goto LABEL_338;
      }
      if (v35 + 1 <= 0)
      {
        unint64_t v33 = 0LL;
        goto LABEL_76;
      }

      if ((_DWORD)v33 == 1)
      {
        unint64_t v9 = v35;
LABEL_75:
        if (!v9) {
          goto LABEL_76;
        }
        __break(1u);
LABEL_336:
        __break(1u);
LABEL_337:
        __break(1u);
LABEL_338:
        __break(1u);
LABEL_339:
        __break(1u);
LABEL_340:
        __break(1u);
        goto LABEL_341;
      }

      unint64_t v48 = (uint64_t *)(v5 + 64);
      unint64_t v49 = 1LL;
      while (1)
      {
        unint64_t v50 = *v48;
        v48 += 3;
        unint64_t v9 = v35 - v50;
        if (__OFSUB__(v35, v50)) {
          break;
        }
        if (__OFADD__(v9, 1LL)) {
          goto LABEL_331;
        }
        if (v9 + 1 < 1)
        {
          unint64_t v33 = v49;
          unint64_t v9 = v35;
LABEL_76:
          unint64_t v46 = (4 * *(_BYTE *)(v5 + 18) + 8) & 0x3C;
          unint64_t v22 = ((-15LL << v46) - 1) & v22 | (v33 << v46);
          unint64_t v43 = *(void *)(v5 + 24 + 24 * v33);
          swift_unknownObjectRetain();
          uint64_t result = (void *)swift_unknownObjectRelease();
          unint64_t v5 = v43;
          if (!*(_BYTE *)(v43 + 18)) {
            goto LABEL_91;
          }
          goto LABEL_77;
        }

        ++v49;
        unint64_t v35 = v9;
        if (v33 == v49) {
          goto LABEL_75;
        }
      }

      __break(1u);
LABEL_331:
      __break(1u);
LABEL_332:
      __break(1u);
LABEL_333:
      __break(1u);
LABEL_334:
      uint64_t v15 = v11;
      uint64_t v31 = v35;
      unint64_t v19 = v33;
LABEL_50:
      swift_unknownObjectRelease();
      uint64_t result = (void *)swift_unknownObjectRelease();
      unint64_t v17 = v22 & 0xFFFFFFFFFFFFF0FFLL;
      uint64_t v16 = v22 & 0xFFFFFFFFFFFFF0FFLL | (v31 << 8);
      v8 = a2;
      uint64_t v10 = v180;
      if (v5) {
        goto LABEL_13;
      }
LABEL_51:
      v174 = 0LL;
      char v20 = __OFSUB__(v8, v19);
      unint64_t v21 = v8 - v19;
      if (v20) {
        goto LABEL_53;
      }
    }

    int v42 = ((-15LL << ((4 * v22 + 8) & 0x3C)) - 1) & v22 | ((unint64_t)*(unsigned __int16 *)(v11 + 16) << ((4 * v22 + 8) & 0x3C));
    swift_unknownObjectRetain();
    unint64_t v9 = 0LL;
    unint64_t v43 = 0LL;
LABEL_105:
    swift_unknownObjectRetain();
    specialized Rope._Node.distanceFromStart<A>(to:in:)(v171, v42, v43, v11, v178);
    uint64_t result = (void *)swift_unknownObjectRelease_n();
    v8 = a2;
    uint64_t v10 = v180;
LABEL_106:
    char v20 = __OFSUB__(v8, v9);
    int v44 = v8 - v9;
    unint64_t v45 = v176;
    if (v20) {
      goto LABEL_356;
    }
    unint64_t v9 = a3;
LABEL_108:
    if (v21 >= v44) {
      return result;
    }
    if (v12 != v10[11]) {
      goto LABEL_346;
    }
    if (v18)
    {
      v57 = &v18[3 * ((v45 >> ((4 * *((_BYTE *)v18 + 18) + 8) & 0x3C)) & 0xF)];
      int v59 = v57[4];
      unint64_t v58 = v57[5];
      uint64_t v60 = v57[3];
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain_n();
    }

    else
    {
      v61 = v10[8];
      swift_unknownObjectRetain();
      specialized Rope._Node.subscript.getter(v45, v61);
      int v59 = v62;
      unint64_t v58 = v63;
      uint64_t result = (void *)swift_unknownObjectRelease();
      if (v12 != v10[11]) {
        goto LABEL_366;
      }
      v64 = v10[8];
      swift_unknownObjectRetain();
      uint64_t v60 = specialized Rope._Node.subscript.getter(v176, v64);
      swift_unknownObjectRelease();
    }

    swift_bridgeObjectRelease();
    uint64_t result = (void *)swift_bridgeObjectRelease();
    v65 = v21 + v60;
    if (__OFADD__(v21, v60)) {
      goto LABEL_347;
    }
    *(void *)&v190 = v59;
    *((void *)&v190 + 1) = v58;
    v66 = v21 >= v9 ? v9 : v21;
    v67 = v21 >= a2 ? v66 : a2;
    v68 = v65 <= a2 ? a2 : v21 + v60;
    v69 = v65 <= v9 ? v68 : v9;
    if (v67 == v69) {
      break;
    }
    if (v67 != v21 || v69 != v65)
    {
      v189 = 0LL;
      v187 = 0u;
      v188 = 0u;
      v185 = 0u;
      v186 = 0u;
      swift_bridgeObjectRetain();
      specialized AttributedString._AttributeStorage.subscript.setter((uint64_t)&v185, a4, a5);
      uint64_t result = (void *)swift_bridgeObjectRelease();
      v84 = v180;
      if (__OFSUB__(v69, v67)) {
        goto LABEL_358;
      }
      v85 = *((void *)&v190 + 1);
      unint64_t v5 = v190;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      specialized AttributedString._InternalRuns.replaceUTF8Subrange<A>(_:with:)(v67, v69, v69 - v67, v5, v85);
      swift_bridgeObjectRelease();
      uint64_t result = (void *)swift_bridgeObjectRelease();
      unsigned int v11 = v180[8];
      uint64_t v12 = v180[10];
      if (v11) {
        v86 = v180[10];
      }
      else {
        v86 = 0LL;
      }
      if (v21 < 0 || v86 < v21) {
        goto LABEL_360;
      }
      int v18 = (void *)v180[9];
      v177 = (uint64_t)v18;
      v179 = v180[11];
      if (!v11 || !*(_WORD *)(v11 + 16) || v21 >= v12)
      {
        v92 = v6;
        v93 = swift_unknownObjectRetain_n();
        v94 = specialized Rope._endPath.getter(v93);
        swift_unknownObjectRelease();
        int v18 = 0LL;
        unint64_t v9 = 0LL;
        if (!v11)
        {
          swift_bridgeObjectRelease();
          uint64_t result = (void *)swift_bridgeObjectRelease();
          v80 = 0LL;
LABEL_231:
          unint64_t v9 = a3;
          v95 = v94;
          char v6 = v92;
          goto LABEL_232;
        }

      cf = 0LL;
      unint64_t v46 = off_18C496910(v87, &cf);
      if (cf)
      {
        if (_NSInflectionLog_onceToken != -1) {
          dispatch_once(&_NSInflectionLog_onceToken, &__block_literal_global_13);
        }
        unint64_t v47 = (os_log_s *)_NSInflectionLog_log;
        if (!os_log_type_enabled((os_log_t)_NSInflectionLog_log, OS_LOG_TYPE_ERROR)) {
          goto LABEL_107;
        }
        *(_DWORD *)buf = 136315394;
        v105 = "msfc_isExists(pronounSemanticFeatureConcept, &error)";
        v106 = 2112;
        v107 = cf;
LABEL_137:
        _os_log_error_impl( &dword_182EB1000,  v47,  OS_LOG_TYPE_ERROR,  "Inflection engine reported an error for '%s' while attempting to inflect: %@",  buf,  0x16u);
LABEL_107:
        CFRelease(cf);
LABEL_188:
        uint64_t v15 = 0LL;
        goto LABEL_189;
      }

      if ((v46 & 1) == 0) {
        goto LABEL_188;
      }
      if (a6)
      {
        cf = 0LL;
        unint64_t v48 = off_18C496820(a6, &cf);
        if (cf)
        {
          if (_NSInflectionLog_onceToken != -1) {
            dispatch_once(&_NSInflectionLog_onceToken, &__block_literal_global_13);
          }
          unint64_t v47 = (os_log_s *)_NSInflectionLog_log;
          if (!os_log_type_enabled((os_log_t)_NSInflectionLog_log, OS_LOG_TYPE_ERROR)) {
            goto LABEL_107;
          }
          *(_DWORD *)buf = 136315394;
          v105 = "mss_create((CFStringRef)dependency, &error)";
          v106 = 2112;
          v107 = cf;
          goto LABEL_137;
        }

        v51 = v48;
        if (!v48) {
          goto LABEL_188;
        }
        cf = 0LL;
        id v52 = off_18C496828(v86, v48, &cf);
        if (cf)
        {
          if (_NSInflectionLog_onceToken != -1) {
            dispatch_once(&_NSInflectionLog_onceToken, &__block_literal_global_13);
          }
          uint64_t v53 = (os_log_s *)_NSInflectionLog_log;
          if (os_log_type_enabled((os_log_t)_NSInflectionLog_log, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 136315394;
            v105 = "minf_create(model, dependencySpeakableString, &error)";
            v106 = 2112;
            v107 = cf;
            _os_log_error_impl( &dword_182EB1000,  v53,  OS_LOG_TYPE_ERROR,  "Inflection engine reported an error for '%s' while attempting to inflect: %@",  buf,  0x16u);
          }

          CFRelease(cf);
          goto LABEL_135;
        }

        v70 = v52;
        if (!v52)
        {
LABEL_135:
          off_18C496850(v51);
          goto LABEL_188;
        }

        cf = 0LL;
        v71 = off_18C496918(v52, &cf);
        if (cf)
        {
          if (_NSInflectionLog_onceToken != -1) {
            dispatch_once(&_NSInflectionLog_onceToken, &__block_literal_global_13);
          }
          v72 = (os_log_s *)_NSInflectionLog_log;
          if (!os_log_type_enabled((os_log_t)_NSInflectionLog_log, OS_LOG_TYPE_ERROR)) {
            goto LABEL_186;
          }
          *(_DWORD *)buf = 136315394;
          v105 = "minf_toSemanticFeatureConcept(dependencyInflectableStringConcept, &error)";
          v106 = 2112;
          v107 = cf;
LABEL_214:
          _os_log_error_impl( &dword_182EB1000,  v72,  OS_LOG_TYPE_ERROR,  "Inflection engine reported an error for '%s' while attempting to inflect: %@",  buf,  0x16u);
LABEL_186:
          CFRelease(cf);
LABEL_187:
          off_18C496850(v51);
          off_18C496858(v70);
          goto LABEL_188;
        }

        if (!v71) {
          goto LABEL_187;
        }
        cf = 0LL;
        v75 = off_18C496920(v87, v71, &cf);
        if (cf)
        {
          if (_NSInflectionLog_onceToken != -1) {
            dispatch_once(&_NSInflectionLog_onceToken, &__block_literal_global_13);
          }
          v72 = (os_log_s *)_NSInflectionLog_log;
          if (!os_log_type_enabled((os_log_t)_NSInflectionLog_log, OS_LOG_TYPE_ERROR)) {
            goto LABEL_186;
          }
          *(_DWORD *)buf = 136315394;
          v105 = "msfc_toSpeakableStringWithDependencyCopy(pronounSemanticFeatureConcept, dependencySemanticFeatureConcept, &error)";
          v106 = 2112;
          v107 = cf;
          goto LABEL_214;
        }

        v54 = v75;
        if (!v75) {
          goto LABEL_187;
        }
        off_18C496850(v51);
        off_18C496858(v70);
      }

      else
      {
        cf = 0LL;
        unint64_t v50 = off_18C496928(v87, &cf);
        if (cf)
        {
          if (_NSInflectionLog_onceToken != -1) {
            dispatch_once(&_NSInflectionLog_onceToken, &__block_literal_global_13);
          }
          unint64_t v47 = (os_log_s *)_NSInflectionLog_log;
          if (!os_log_type_enabled((os_log_t)_NSInflectionLog_log, OS_LOG_TYPE_ERROR)) {
            goto LABEL_107;
          }
          *(_DWORD *)buf = 136315394;
          v105 = "msfc_toSpeakableStringCopy(pronounSemanticFeatureConcept, &error)";
          v106 = 2112;
          v107 = cf;
          goto LABEL_137;
        }

        v54 = v50;
        if (!v50) {
          goto LABEL_188;
        }
      }

      cf = 0LL;
      v55 = off_18C496848(v54, &cf);
      if (cf)
      {
        if (_NSInflectionLog_onceToken != -1) {
          dispatch_once(&_NSInflectionLog_onceToken, &__block_literal_global_13);
        }
        v56 = (os_log_s *)_NSInflectionLog_log;
        if (os_log_type_enabled((os_log_t)_NSInflectionLog_log, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136315394;
          v105 = "(NSString *)mss_createPrintCopy(speakableResult, &error)";
          v106 = 2112;
          v107 = cf;
          _os_log_error_impl( &dword_182EB1000,  v56,  OS_LOG_TYPE_ERROR,  "Inflection engine reported an error for '%s' while attempting to inflect: %@",  buf,  0x16u);
        }

        CFRelease(cf);
      }

      else
      {
        v73 = (void *)v55;
        if (v55)
        {
          if (v81 && ![a4 _containsPronoun:v55 withGrammemes:v78])
          {
            v73 = 0LL;
            uint64_t v15 = 0LL;
          }

          else
          {
            if (objc_msgSend( v79,  "isEqualToString:",  objc_msgSend(v79, "lowercaseStringWithLocale:", v80, v76)))
            {
              v74 = (void *)[v73 lowercaseStringWithLocale:v80];
            }

            else if (objc_msgSend( v79,  "isEqualToString:",  objc_msgSend(v79, "uppercaseStringWithLocale:", v80)))
            {
              v74 = (void *)[v73 uppercaseStringWithLocale:v80];
            }

            else if (objc_msgSend( v79,  "isEqualToString:",  objc_msgSend(v79, "capitalizedStringWithLocale:", v80)))
            {
              v74 = (void *)[v73 capitalizedStringWithLocale:v80];
            }

            else
            {
              v74 = v73;
            }

            uint64_t v15 = (void *)[v74 copy];
          }

          goto LABEL_212;
        }
      }

      uint64_t v15 = 0LL;
LABEL_212:
      off_18C496850(v54);
LABEL_189:
      unint64_t v22 = (void (**)(void))&metadata instantiation cache for protocol conformance descriptor for _TimeZoneICU;
      off_18C496930(v82);
      unint64_t v25 = v81;
      unint64_t v24 = theArray;
      if (!v81)
      {
LABEL_42:
        if (v24) {
          CFRelease(v24);
        }
        return v15;
      }

  _NSTransmutePathSlashes(a1, v12);
  unint64_t v38 = *v48;
  if (*v48 < 2) {
    return;
  }
  while (a1[v38 - 1] == 47)
  {
    *unint64_t v48 = --v38;
  }

  if (v38 < 23)
  {
    if (v38 < 15)
    {
      if (v38 < 9 || *a1 != 47) {
        return;
      }
      unint64_t v39 = *v20;
      goto LABEL_157;
    }

    if (*a1 != 47) {
      return;
    }
    unint64_t v39 = *v20;
  }

  else
  {
    if (*a1 != 47) {
      return;
    }
    unint64_t v39 = *v20;
    if (v39 == 112)
    {
      if (a1[2] == 114
        && a1[3] == 105
        && *v46 == 118
        && a1[5] == 97
        && a1[6] == 116
        && a1[7] == 101
        && a1[8] == 47
        && a1[9] == 118
        && a1[10] == 97
        && a1[11] == 114
        && a1[12] == 47
        && a1[13] == 97
        && a1[14] == 117
        && a1[15] == 116
        && a1[16] == 111
        && a1[17] == 109
        && a1[18] == 111
        && a1[19] == 117
        && a1[20] == 110
        && a1[21] == 116)
      {
        uint64_t v40 = a1 + 22;
        if (a1[22] == 47)
        {
          if ((_NSStandardizePathRewriteAutomountIsPathExcluded(a1 + 22, v38 - 22) & 1) == 0)
          {
            unint64_t v41 = _NSFileExistsAtPath( +[NSFileManager defaultManager](&OBJC_CLASS___NSFileManager, "defaultManager"),  (uint64_t)(a1 + 22),  *v48 - 22,  __src);
            int v42 = v48;
            if (v41)
            {
              unint64_t v43 = *v48 - 22;
LABEL_168:
              *int v42 = v43;
              memmove(a1, v40, 2 * v43);
              return;
            }
          }

          return;
        }
      }

_BYTE *_xpc_skipAttributesOfType(_BYTE *result)
{
  while (1)
  {
    int v1 = (char)*result;
    BOOL v2 = (v1 - 78) > 0x24 || ((1LL << (*result - 78)) & 0x1300000113LL) == 0;
    if (v2 && v1 != 43) {
      break;
    }
    ++result;
  }

  return result;
}

NSNumber *_NSXPCSerializationNumberForObject(uint64_t *a1, unint64_t *a2)
{
  v17[1] = *(double *)MEMORY[0x1895F89C0];
  unint64_t v2 = *a2;
  uint64_t v3 = *a1;
  unsigned int v4 = *(unsigned __int8 *)(*a1 + *a2);
  int v5 = v4 & 0xF0;
  if (v5 != 240)
  {
    if (v5 == 32)
    {
      if ((v4 & 0xF) == 3)
      {
      }

      else if ((v4 & 0xF) == 2 && _getFloatAtMarker(a1, v17, v2, v16))
      {
        LODWORD(v15) = LODWORD(v17[0]);
        return +[NSNumber numberWithFloat:](&OBJC_CLASS___NSNumber, "numberWithFloat:", v15);
      }
    }

    else if (v5 == 16 && _getIntAtMarker(a1, v17, v2, v16))
    {
      char v6 = (const __CFAllocator *)*MEMORY[0x189604DD0];
      int v7 = v17;
      CFNumberType v8 = kCFNumberSInt64Type;
      return (NSNumber *)CFNumberCreate(v6, v8, v7);
    }

    return 0LL;
  }

  unint64_t v9 = a1[1];
  if (v4 < 0xF0 || v9 <= v2) {
    return 0LL;
  }
  uint64_t result = 0LL;
  uint64_t v12 = v2 >= 0xFFFFFFFFFFFFFFF8LL;
  uint64_t v13 = v12 << 63 >> 63;
  if (v13 == v12 && (v13 & 0x8000000000000000LL) == 0 && v9 > v2 + 8)
  {
    unint64_t v14 = *(void *)(v2 + v3 + 1);
    v16[0] = 0LL;
    v16[1] = v14;
    char v6 = (const __CFAllocator *)*MEMORY[0x189604DD0];
    int v7 = (double *)v16;
    CFNumberType v8 = kCFNumberMaxType|kCFNumberSInt8Type;
    return (NSNumber *)CFNumberCreate(v6, v8, v7);
  }

  return result;
}

uint64_t _getIntAtMarker(void *a1, void *a2, unint64_t a3, unint64_t *a4)
{
  if (a1[1] <= a3) {
    return 0LL;
  }
  char v5 = *(_BYTE *)(*a1 + a3);
  if ((v5 & 0xF0) != 0x10) {
    return 0LL;
  }
  uint64_t v6 = 0LL;
  int v7 = v5 & 0xF;
  BOOL v8 = __CFADD__(a3, v5 & 0xF);
  unint64_t v9 = a3 + (v5 & 0xF);
  uint64_t v10 = v8;
  uint64_t v11 = v10 << 63 >> 63;
  *a4 = v9;
  if (v11 != v10 || v11 < 0) {
    return v6;
  }
  if (a1[1] <= v9) {
    return 0LL;
  }
  uint64_t v6 = 0LL;
  switch(v7)
  {
    case 1:
      uint64_t v6 = 1LL;
      __memcpy_chk();
      *a2 = v15;
      return v6;
    case 2:
      __memcpy_chk();
      uint64_t v13 = (unsigned __int16)v15;
      goto LABEL_14;
    case 4:
      __memcpy_chk();
      uint64_t v13 = v15;
      goto LABEL_14;
    case 8:
      __memcpy_chk();
      uint64_t v13 = v15;
LABEL_14:
      *a2 = v13;
      uint64_t v6 = 1LL;
      break;
    default:
      return v6;
  }

  return v6;
}

uint64_t __NSXPCCONNECTION_IS_CALLING_OUT_TO_REPLY_BLOCK__(void *a1)
{
  return [a1 invoke];
}

LABEL_133:
}

      v97 = HIBYTE(v38) & 0xF;
LABEL_209:
      v172 = v56;
      v177 = v175;
      unint64_t v43 = v16;
      int v44 = v170;
      v174 = v51;
      if (v51 >> 14 == 4 * v97)
      {
        if ((v36 & 1) != 0)
        {
          v140 = 1;
          v141 = v172;
          v175 = v177;
          v181 = v42;
          goto LABEL_222;
        }

        v141 = v172;
        v175 = v177;
        v181 = v42;
        goto LABEL_221;
      }

      if ((v36 & 1) != 0)
      {
        unint64_t v35 = 1;
        v173 = 1;
        unint64_t v41 = v166;
        if (v166 >= v168)
        {
          if (v166 != v168) {
            goto LABEL_248;
          }
          if ((v185 & 1) == 0)
          {
            v142 = 0;
            v144 = v177;
            v181 = v42;
            unint64_t v37 = v172;
            v143 = v154;
            if ((v177 & 0x2000000000000000LL) != 0) {
              goto LABEL_232;
            }
            goto LABEL_244;
          }

          unint64_t v37 = v172;
          v175 = v177;
          v181 = v42;
          goto LABEL_243;
        }
      }

      else
      {
        unint64_t v45 = v36;
        unint64_t v46 = Substring.index(after:)();
        v36 = v45;
        v193[0] = v46;
        unint64_t v35 = 1;
        v173 = 1;
        unint64_t v41 = v166;
        if (v166 >= v168)
        {
          if (v166 == v168)
          {
LABEL_288:
            if ((v185 & 1) != 0)
            {
LABEL_284:
              if (v193[0] >> 14 < v44 >> 14) {
                specialized _StringCompareOptionsIterable._consumeExtendCharacters(from:)( (unint64_t)v193,  v15,  v44);
              }
              goto LABEL_289;
            }

            goto LABEL_289;
          }

  __break(1u);
LABEL_134:
  v136 = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
LABEL_135:
  result._object = v137;
  result._countAndFlagsBits = v136;
  return result;
}

  type metadata accessor for NSURLResourceKey(0LL);
  uint64_t result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

                  uint64_t v60 = v16;
LABEL_134:
                  if (v60) {
                    goto LABEL_327;
                  }
                  goto LABEL_135;
                }

                uint64_t v15 = 3LL;
                uint64_t v60 = v72;
              }
            }
          }

void _NSXPCSerializationStartWrite(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)(a1 + 0x2000) = 0LL;
  if (a2)
  {
    uint64_t v4 = a3;
    if (a3)
    {
      *(void *)(a1 + 8216) = a2;
      char v5 = 1;
LABEL_6:
      *(void *)(a1 + 820_Block_object_dispose((const void *)(v11 - 240), 8) = v4;
      *(void *)(a1 + 8200) = 0LL;
      *(_BYTE *)(a1 + 824_Block_object_dispose((const void *)(v11 - 240), 8) = 0;
      *(_BYTE *)(a1 + 8249) = v5;
      _reserveSpace(a1, 8LL);
      *(void *)(*(void *)(a1 + 8216) + *(void *)(a1 + 8200)) = 0x37317473696C7062LL;
      *(void *)(a1 + 8200) += 8LL;
      return;
    }
  }

  uint64_t v4 = 8196LL;
  uint64_t v6 = malloc(0x2004uLL);
  *(void *)(a1 + 8216) = v6;
  if (v6)
  {
    char v5 = 0;
    goto LABEL_6;
  }

  objc_exception_throw((id)[MEMORY[0x189603F70] exceptionWithName:*MEMORY[0x189603A60] reason:@"Unable to allocate enough memory to encode data" userInfo:0]);
  _reserveSpace(v7, v8);
}

void _reserveSpace(uint64_t a1, uint64_t a2)
{
  uint64_t v16 = *MEMORY[0x1895F89C0];
  size_t v2 = *(void *)(a1 + 8200);
  unint64_t v3 = v2 + a2;
  if (__CFADD__(v2, a2))
  {
    uint64_t v12 = (void *)MEMORY[0x189603F70];
    uint64_t v13 = *MEMORY[0x189603A60];
    unint64_t v14 = @"Unable to allocate enough memory to encode data (overflow)";
    goto LABEL_21;
  }

  if (v3 <= *(void *)(a1 + 8208)) {
    return;
  }
  if ((float)v3 > 1.1529e19)
  {
    uint64_t v12 = (void *)MEMORY[0x189603F70];
    uint64_t v13 = *MEMORY[0x189603A60];
    unint64_t v14 = @"Unable to allocate enough memory to encode data (overflow 2)";
    goto LABEL_21;
  }

  char v5 = (_BYTE *)(a1 + 8248);
  float v6 = (float)v3 * 1.6;
  mach_vm_size_t v7 = (unint64_t)v6;
  if ((unint64_t)v6 <= 0x20000)
  {
    if (!*(_BYTE *)(a1 + 8249))
    {
      *(void *)(a1 + 8216) = __CFSafelyReallocate();
      *(void *)(a1 + 820_Block_object_dispose((const void *)(v11 - 240), 8) = v7;
      return;
    }

    uint64_t v10 = malloc((unint64_t)v6);
    if (v10)
    {
      uint64_t v11 = v10;
      memcpy(v10, *(const void **)(a1 + 8216), v2);
      *(void *)(a1 + 8216) = v11;
      *(void *)(a1 + 820_Block_object_dispose((const void *)(v11 - 240), 8) = v7;
      *(_BYTE *)(a1 + 8249) = 0;
      return;
    }

    goto LABEL_20;
  }

  __dst = 0LL;
  uint64_t v8 = v7 + *MEMORY[0x1895FD590] - 1;
  unint64_t v9 = (vm_map_t *)MEMORY[0x1895FBBE0];
  if (mach_vm_allocate(*MEMORY[0x1895FBBE0], (mach_vm_address_t *)&__dst, v7, 687865857))
  {
LABEL_20:
    uint64_t v12 = (void *)MEMORY[0x189603F70];
    uint64_t v13 = *MEMORY[0x189603A60];
    unint64_t v14 = @"Unable to allocate enough memory to encode data";
LABEL_21:
    objc_exception_throw((id)objc_msgSend(v12, "exceptionWithName:reason:userInfo:", v13, v14, 0, __dst, v16));
  }

  memmove(__dst, *(const void **)(a1 + 8216), *(void *)(a1 + 8200));
  if (*v5)
  {
    mach_vm_deallocate(*v9, *(void *)(a1 + 8216), *(void *)(a1 + 8208));
  }

  else if (!*(_BYTE *)(a1 + 8249))
  {
    free(*(void **)(a1 + 8216));
  }

  *(void *)(a1 + 8216) = __dst;
  *(void *)(a1 + 820_Block_object_dispose((const void *)(v11 - 240), 8) = v7;
  *(_WORD *)char v5 = 1;
}

void _NSXPCSerializationStartArrayWrite(void *a1)
{
  if ((uint64_t)a1[1024] >= 1024)
  {
    objc_exception_throw((id)[MEMORY[0x189603F70] exceptionWithName:*MEMORY[0x189603A60] reason:@"Data structure has too many nested collections to encode" userInfo:0]);
  }

  else
  {
    _reserveSpace((uint64_t)a1, 1LL);
    *(_BYTE *)(a1[1027] + a1[1025]) = -96;
    uint64_t v2 = a1[1025] + 1LL;
    a1[1025] = v2;
    uint64_t v3 = a1[1024];
    a1[1024] = v3 + 1;
    a1[v3] = v2;
    uint64_t v4 = (uint64_t)a1;
  }

  _appendZeroedBytes(v4);
}

void _appendZeroedBytes(uint64_t a1)
{
  *(void *)(*(void *)(a1 + 8216) + *(void *)(a1 + 8200)) = 0LL;
  *(void *)(a1 + 8200) += 8LL;
}

void *_NSXPCSerializationAddASCIIString(uint64_t a1, void *key, uint64_t a3, int a4)
{
  if (a3 && a4)
  {
    Mutable = *(const __CFDictionary **)(a1 + 8240);
    if (!Mutable)
    {
      Mutable = CFDictionaryCreateMutable(0LL, 0LL, 0LL, 0LL);
      *(void *)(a1 + 8240) = Mutable;
    }

    Value = CFDictionaryGetValue(Mutable, key);
    if (Value) {
      return _NSXPCSerializationAddReference(a1, (unint64_t)Value);
    }
    CFDictionaryAddValue(*(CFMutableDictionaryRef *)(a1 + 8240), key, *(const void **)(a1 + 8200));
  }

  unint64_t v10 = a3 + 1;
  _reserveSpace(a1, 1LL);
  char v11 = 15;
  *(_BYTE *)(*(void *)(a1 + 8216) + (*(void *)(a1 + 8200))++) = v11 | 0x70;
  if (v10 >= 0xF) {
    _NSXPCSerializationAddInteger(a1, a3 + 1);
  }
  _reserveSpace(a1, a3 + 1);
  uint64_t result = memmove((void *)(*(void *)(a1 + 8216) + *(void *)(a1 + 8200)), key, a3 + 1);
  *(void *)(a1 + 8200) += v10;
  return result;
}

void *_NSXPCSerializationAddInteger(uint64_t a1, unint64_t a2)
{
  v7[1] = *MEMORY[0x1895F89C0];
  v7[0] = a2;
  if (HIDWORD(a2)) {
    int v3 = 8;
  }
  else {
    int v3 = 4;
  }
  if (a2 >= 0x10000) {
    unsigned int v4 = v3;
  }
  else {
    unsigned int v4 = 2;
  }
  if (a2 >= 0x100) {
    size_t v5 = v4;
  }
  else {
    size_t v5 = 1LL;
  }
  _reserveSpace(a1, 1LL);
  *(_BYTE *)(*(void *)(a1 + 8216) + (*(void *)(a1 + 8200))++) = v5 | 0x10;
  _reserveSpace(a1, v5);
  uint64_t result = memmove((void *)(*(void *)(a1 + 8216) + *(void *)(a1 + 8200)), v7, v5);
  *(void *)(a1 + 8200) += v5;
  return result;
}

void *_NSXPCSerializationAddInvocationArgumentsArray(void *a1, void *a2, void *a3, void *a4, int a5)
{
  LODWORD(v5) = a5;
  v18[1] = *(SEL **)MEMORY[0x1895F89C0];
  int v10 = [a2 numberOfArguments];
  _NSXPCSerializationStartArrayWrite(a4);
  if (v10 > (int)v5)
  {
    uint64_t v11 = v10;
    if (v10 > (unint64_t)(int)v5)
    {
      uint64_t v5 = (int)v5;
      while (1)
      {
        uint64_t v12 = (_WORD *)[a2 _argInfo:v5];
        uint64_t v13 = v12;
        __int16 v14 = v12[17];
        if ((v14 & 0x80) != 0)
        {
          uint64_t v13 = *(_BYTE **)v12;
          __int16 v14 = *(_WORD *)(*(void *)v12 + 34LL);
        }

        if (v14 < 0) {
          break;
        }
        if ((v14 & 0x1000) != 0)
        {
          v18[0] = 0LL;
          [a1 getArgument:v18 atIndex:v5];
          if (!v18[0]) {
            break;
          }
          _NSXPCSerializationAddTypedObjCValuesToArray(a3, (uint64_t)a4, (_BYTE *)(*(void *)v13 + 37LL), v18[0]);
        }

        else
        {
          MEMORY[0x1895F8858](v12);
          uint64_t v16 = (SEL *)((char *)v18 - ((v15 + 15) & 0x1FFFFFFF0LL));
          [a1 getArgument:v16 atIndex:v5];
          _NSXPCSerializationAddTypedObjCValuesToArray(a3, (uint64_t)a4, v13 + 37, v16);
        }

LABEL_12:
        if (v11 == ++v5) {
          return _NSXPCSerializationEndArrayWrite(a4);
        }
      }

      _NSXPCSerializationAddNull((uint64_t)a4);
      goto LABEL_12;
    }
  }

  return _NSXPCSerializationEndArrayWrite(a4);
}

    objc_msgSend( (id)a1,  "__failWithExceptionName:errorCode:format:",  @"NSInvalidUnarchiveOperationException",  4864,  @"%@: value for key (%@) is not a BOOLean",  _NSMethodExceptionProem((objc_class *)a1, sel_decodeBoolForKey_),  a2);
    goto LABEL_13;
  }

  Value = (void *)CFDictionaryGetValue(ValueAtIndex, a2);
  uint64_t v15 = Value;
  if (Value) {
    goto LABEL_10;
  }
LABEL_13:
  __int16 v14 = 0;
  uint64_t result = 0LL;
LABEL_17:
  *a3 = v14;
  return result;
}

              if (!v13) {
                goto LABEL_77;
              }
              uint64_t v15 = *v14++;
              uint64_t v12 = v15;
              --v13;
              if (v15 < 0) {
                goto LABEL_45;
              }
            }

            if (v12 == 61) {
              goto LABEL_45;
            }
LABEL_22:
            goto LABEL_12;
          }

  unint64_t v26 = MEMORY[0x189618740];
  if ((BYTE8(v118[2]) & 1) != 0)
  {
    if ((BYTE8(v118[3]) & 1) != 0) {
      goto LABEL_14;
    }
  }

  else
  {
    v116 = MEMORY[0x189618740];
    *(void *)&v115 = *(void *)&v118[2];
    v117[0] = xmmword_1837293C0;
    outlined init with take of Any(&v115, &v117[1]);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v12 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  v12[2] + 1LL,  1,  v12);
    }
    uint64_t v28 = v12[2];
    uint64_t v27 = v12[3];
    if (v28 >= v27 >> 1) {
      uint64_t v12 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (void *)(v27 > 1),  v28 + 1,  1,  v12);
    }
    v12[2] = v28 + 1;
    id v29 = &v12[6 * v28];
    uint64_t v30 = v117[0];
    uint64_t v31 = v117[2];
    v29[3] = v117[1];
    v29[4] = v31;
    v29[2] = v30;
    if ((BYTE8(v118[3]) & 1) != 0)
    {
LABEL_14:
      if ((BYTE8(v118[4]) & 1) != 0) {
        goto LABEL_15;
      }
      goto LABEL_34;
    }
  }

  v116 = v26;
  *(void *)&v115 = *(void *)&v118[3];
  v117[0] = xmmword_1837293D0;
  outlined init with take of Any(&v115, &v117[1]);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v12 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  v12[2] + 1LL,  1,  v12);
  }
  unint64_t v33 = v12[2];
  uint64_t v32 = v12[3];
  if (v33 >= v32 >> 1) {
    uint64_t v12 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (void *)(v32 > 1),  v33 + 1,  1,  v12);
  }
  v12[2] = v33 + 1;
  __int16 v34 = &v12[6 * v33];
  unint64_t v35 = v117[0];
  v36 = v117[2];
  v34[3] = v117[1];
  v34[4] = v36;
  v34[2] = v35;
  if ((BYTE8(v118[4]) & 1) != 0)
  {
LABEL_15:
    if ((BYTE8(v118[5]) & 1) != 0) {
      goto LABEL_16;
    }
    goto LABEL_39;
  }

  Hasher._combine(_:)(1u);
  Hasher._combine(_:)(v2);
}

        if (v9 < 0x10)
        {
          uint64_t v27 = 0x303030755CLL;
          uint64_t v12 = 0xE500000000000000LL;
          goto LABEL_27;
        }

        if (v9 > 0x1F)
        {
LABEL_16:
          if (++v5 >= v7) {
            goto LABEL_36;
          }
          continue;
        }

        uint64_t v27 = 808482140LL;
        uint64_t v12 = 0xE400000000000000LL;
LABEL_27:
        uint64_t v28 = v12;
        lazy protocol witness table accessor for type UInt8 and conformance UInt8();
        v13._countAndFlagsBits = String.init<A>(_:radix:uppercase:)();
        String.append(_:)(v13);
        swift_bridgeObjectRelease();
        uint64_t v11 = v27;
        int v10 = v28;
LABEL_28:
        if (v8 < v5) {
          goto LABEL_29;
        }
LABEL_30:
        swift_bridgeObjectRetain();
        uint64_t v27 = v11;
        uint64_t v28 = v10 & 0xFFFFFFFFFFFFFFLL;
        if ((v10 & 0xF00000000000000LL) != 0) {
          Data._Representation.append(contentsOf:)();
        }
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v8 = ++v5;
        if (v5 < v7) {
          continue;
        }
LABEL_36:
        if (v8 < v5) {
LABEL_72:
        }
          Data._Representation.append(contentsOf:)();
        return;
    }
  }

    int v42 = (uint64_t *)(v38 + 64);
    goto LABEL_13;
  }

  __swift_memcpy25_8((uint64_t)v32, (uint64_t)v28);
  uint64_t v40 = (uint64_t *)swift_allocObject();
  unint64_t v43 = v64;
  v40[5] = (uint64_t)&type metadata for _CodingKey;
  v40[6] = v43;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v40 + 2);
  __swift_memcpy25_8((uint64_t)boxed_opaque_existential_1, (uint64_t)v32);
  swift_retain();
  swift_retain();
  unint64_t v41 = v72;
  outlined copy of JSONEncoder.DateEncodingStrategy(v72, v82, v81);
  outlined copy of JSONEncoder.KeyEncodingStrategy(v80);
  outlined copy of JSONEncoder.NonConformingFloatEncodingStrategy(v78, v77);
  __int16 v34 = v68;
  unint64_t v35 = v69;
  outlined copy of JSONEncoder.KeyEncodingStrategy(v68);
  unint64_t v45 = *(void (**)(char *, uint64_t))(v66 + 8);
  unint64_t v37 = v67;
  swift_bridgeObjectRetain();
  v45(v28, v33);
  unint64_t v38 = v70;
  v40[7] = v70;
  unint64_t v39 = v38 >> 62;
  if (v38 >> 62)
  {
    if ((_DWORD)v39 != 1)
    {
      unint64_t v50 = 1LL;
LABEL_11:
      v40[8] = v50;
      swift_release();
      swift_release();
      if ((_DWORD)v39) {
        goto LABEL_3;
      }
      goto LABEL_12;
    }

    unint64_t v46 = (uint64_t *)((v38 & 0x3FFFFFFFFFFFFFFFLL) + 32);
  }

  else
  {
    unint64_t v46 = (uint64_t *)(v38 + 64);
  }

  unint64_t v48 = *v46;
  uint64_t result = swift_retain();
  unint64_t v50 = v48 + 1;
  if (!__OFADD__(v48, 1LL)) {
    goto LABEL_11;
  }
  __break(1u);
  return result;
}

    unint64_t v47 = (uint64_t *)(v46 + 64);
    goto LABEL_13;
  }

  unint64_t v48 = *(void (**)(char *, char *, uint64_t))(v29 + 32);
  unint64_t v49 = v70;
  v48(v70, v28, v23);
  int v44 = swift_allocObject();
  *(_OWORD *)(v44 + 40) = v71;
  unint64_t v50 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)(v44 + 16));
  v48((char *)v50, v49, v23);
  swift_retain();
  swift_retain();
  unint64_t v45 = v81;
  unint64_t v35 = v78;
  outlined copy of JSONEncoder.DateEncodingStrategy(v81, v78, v90);
  outlined copy of JSONEncoder.KeyEncodingStrategy(v89);
  outlined copy of JSONEncoder.NonConformingFloatEncodingStrategy(v87, v86);
  unint64_t v37 = v76;
  v36 = v77;
  outlined copy of JSONEncoder.KeyEncodingStrategy(v77);
  v51 = *(void (**)(char *, uint64_t))(v73 + 8);
  unint64_t v39 = v75;
  swift_bridgeObjectRetain();
  v51(v28, v74);
  id v52 = v80;
  *(void *)(v44 + 56) = v80;
  unint64_t v43 = v52 >> 62;
  if (v52 >> 62)
  {
    if ((_DWORD)v43 != 1)
    {
      v57 = 1LL;
LABEL_11:
      *(void *)(v44 + 64) = v57;
      swift_release();
      swift_release();
      unint64_t v46 = v80;
      if ((_DWORD)v43) {
        goto LABEL_3;
      }
      goto LABEL_12;
    }

    uint64_t v53 = (uint64_t *)((v52 & 0x3FFFFFFFFFFFFFFFLL) + 32);
  }

  else
  {
    uint64_t v53 = (uint64_t *)(v52 + 64);
  }

  v55 = *v53;
  uint64_t result = swift_retain();
  v57 = v55 + 1;
  if (!__OFADD__(v55, 1LL)) {
    goto LABEL_11;
  }
  __break(1u);
  return result;
}

      int v3 = v8 + v7;
      uint64_t v12 = __OFADD__(__CFADD__(v8, v7), v9);
      unsigned int v4 = __CFADD__(v8, v7) + v9;
LABEL_16:
      uint64_t v13 = v12;
      __int16 v14 = 0LL;
      if ((v11 & 1) != 0 || (v13 & 1) != 0) {
        return v14;
      }
      if (++a1 >= v5) {
        return v3;
      }
    }

    if (!(v4 >> 60))
    {
      uint64_t v11 = v9 >> 63;
      if ((a3 & 1) != 0) {
        goto LABEL_15;
      }
      goto LABEL_12;
    }

    const void *v3 = (char *)specialized _ContiguousArrayBuffer.init(_uninitializedCount:minimumCapacity:)( 0LL,  *((void *)v8 + 3) >> 1);
    swift_bridgeObjectRelease();
    return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8))(v4, v6);
  }

  uint64_t v27 = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v28 = *v3;
  if ((v27 & 1) == 0)
  {
    if (*((void *)v28 + 3) >= 2uLL)
    {
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<UInt8>);
      unint64_t v41 = (void *)swift_allocObject();
      unint64_t v43 = _swift_stdlib_malloc_size(v41);
      v41[2] = 0LL;
      v41[3] = 2 * v43 - 64;
    }

    else
    {
      unint64_t v41 = (void *)MEMORY[0x18961AFE8];
    }

    const void *v3 = (char *)v41;
    swift_bridgeObjectRelease();
    return swift_task_switch();
  }

  id v29 = *((void *)v28 + 2);
  uint64_t v30 = swift_isUniquelyReferenced_nonNull_native();
  const void *v3 = v28;
  if ((v30 & 1) == 0)
  {
    uint64_t v28 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0LL, v29, 1, v28);
    const void *v3 = v28;
  }

  if (!v29)
  {
LABEL_33:
    const void *v3 = v28;
    return swift_task_switch();
  }

  uint64_t v31 = *((void *)v28 + 2);
  uint64_t v32 = v31 - v29;
  if (v31 - v29 >= 0)
  {
    memmove(v28 + 32, &v28[v29 + 32], v31 - v29);
    *((void *)v28 + 2) = v32;
    goto LABEL_33;
  }

  return _fatalErrorMessage(_:_:file:line:flags:)();
}

  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

      uint64_t result = (uint64_t)objc_msgSend(*(id *)(v3 + 16), sel_rangeCount);
      *a1 = v6;
      a1[1] = v6;
      a1[2] = v8;
      a1[3] = 0LL;
      goto LABEL_13;
    }

    __break(1u);
    goto LABEL_15;
  }

  if (v9)
  {
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }

  if (v8 >= result) {
    goto LABEL_12;
  }
LABEL_16:
  __break(1u);
  return result;
}

  if (v15)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }

  uint64_t v8 = result;
  unint64_t v9 = v11;
LABEL_19:
  __break(1u);
  return result;
}

        __break(1u);
        goto LABEL_13;
      }
    }

    __break(1u);
    goto LABEL_12;
  }

  return result;
}

  if ((Measurement<>.FormatStyle.shouldConvertToBestUnit.getter(a2) & 1) == 0
    || (v43 = v14, v44 = v10, unint64_t v35 = Measurement<>.FormatStyle.skeletonForBaseUnit(_:)((uint64_t)&v43, a2), !v36))
  {
    (*(void (**)(char *, _BYTE *, uint64_t))(v5 + 16))(v8, v3, a2);
LABEL_17:
    unint64_t v43 = v14;
    int v44 = v10;
    int v18 = Measurement<>.FormatStyle.formatAsDescription(_:)(&v43, a2);
    goto LABEL_18;
  }

  unint64_t v37 = (void *)v35;
  unint64_t v38 = v36;
  swift_bridgeObjectRelease();
  int v18 = Measurement<>.FormatStyle._format(_:withSkeleton:)(v37, v38);
  uint64_t v40 = v39;
  swift_bridgeObjectRelease();
  (*(void (**)(char *, _BYTE *, uint64_t))(v5 + 16))(v8, v3, a2);
  if (!v40) {
    goto LABEL_17;
  }
LABEL_18:
  (*(void (**)(char *, uint64_t))(v5 + 8))(v8, a2);
  return v18;
}

  *(_OWORD *)a6 = v12;
  *(_OWORD *)(a6 + 16) = v14;
  *(_OWORD *)(a6 + 32) = v13;
  *(_BYTE *)(a6 + 4_Block_object_dispose((const void *)(v11 - 240), 8) = v28;
  *(void *)(a6 + 56) = v18;
  uint64_t result = vmovn_s16(a7);
  *(_DWORD *)(a6 + 64) = result.i32[0];
  *(void *)(a6 + 72) = v17;
  *(_BYTE *)(a6 + 80) = v16;
  *(_BYTE *)(a6 + 81) = v21;
  *(_BYTE *)(a6 + 82) = v15;
  *(_BYTE *)(a6 + 83) = v26;
  *(_BYTE *)(a6 + 84) = v27;
  *(_BYTE *)(a6 + 85) = v25;
  *(_BYTE *)(a6 + 86) = v24;
  *(_BYTE *)(a6 + 87) = v29;
  *(void *)(a6 + 8_Block_object_dispose((const void *)(v11 - 240), 8) = v19;
  *(_BYTE *)(a6 + 96) = v23;
  *(_BYTE *)(a6 + 97) = v22;
  return result;
}

  swift_setDeallocating();
  swift_deallocClassInstance();
  v26[1] = v7;
  v26[2] = v8;
  unint64_t v22 = swift_bridgeObjectRetain();
  Calendar.ComponentSet.init(_:)(v22, v26);
  unsigned __int8 v23 = 1.59271755e13;
  if (v6 <= 1.59271755e13) {
    unsigned __int8 v23 = v6;
  }
  __dst[0] = fmax(v23, -2.11845067e11);
  Calendar._dateComponents(_:from:)(v26, __dst, v25);
  swift_release();
  outlined release of DateComponents((uint64_t)v25);
  __asm { BR              X9 }

  return result;
}

      unint64_t v17 = v42;
      unint64_t v19 = v39;
      int v18 = v40;
LABEL_13:
      char v20 = 0LL;
      int v3 = v41;
      v51 = v41;
      id v52 = v17;
      uint64_t v53 = v18;
      v54 = v19;
      v55 = v5;
      v56 = v6;
      unint64_t v21 = 40LL;
      v57 = v7;
      unint64_t v58 = v8;
      while (1)
      {
        unint64_t v22 = v20 + 1;
        if (__OFADD__(v20, 1LL))
        {
          __break(1u);
          goto LABEL_43;
        }

        if (*(void *)(a2 + v21)) {
          break;
        }
        v21 += 16LL;
        ++v20;
        if (v22 == v4) {
          return v3;
        }
      }

      swift_bridgeObjectRetain();
      unsigned __int8 v23 = (unint64_t *)(a2 + 40);
      unint64_t v24 = (char *)MEMORY[0x18961AFE8];
      do
      {
        unint64_t v25 = *v23;
        if (*v23)
        {
          unint64_t v26 = *(v23 - 1);
          if ((v25 & 0x2000000000000000LL) != 0 ? HIBYTE(v25) & 0xF : v26 & 0xFFFFFFFFFFFFLL)
          {
            if ((v25 & 0x1000000000000000LL) != 0)
            {
              uint64_t v28 = _StringGuts.foreignErrorCorrectedScalar(startingAt:)();
            }

            else
            {
              if ((v25 & 0x2000000000000000LL) != 0)
              {
                unint64_t v47 = *(v23 - 1);
                unint64_t v48 = v25 & 0xFFFFFFFFFFFFFFLL;
                swift_bridgeObjectRetain();
              }

              else
              {
                if ((v26 & 0x1000000000000000LL) == 0) {
                  _StringObject.sharedUTF8.getter();
                }
                swift_bridgeObjectRetain();
              }

              uint64_t v28 = _decodeScalar(_:startingAt:)();
              swift_bridgeObjectRelease();
            }

            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
              unint64_t v24 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  *((void *)v24 + 2) + 1LL,  1,  v24);
            }
            uint64_t v30 = *((void *)v24 + 2);
            id v29 = *((void *)v24 + 3);
            if (v30 >= v29 >> 1) {
              unint64_t v24 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (char *)(v29 > 1),  v30 + 1,  1,  v24);
            }
            *((void *)v24 + 2) = v30 + 1;
            *(_DWORD *)&v24[4 * v30 + 32] = v28;
          }
        }

        v23 += 2;
        --v4;
      }

      while (v4);
      swift_bridgeObjectRelease();
      BigString.unicodeScalars.getter();
      BigString.UnicodeScalarView.subscript.getter();
      outlined release of Locale((uint64_t)v46);
      uint64_t v31 = BigSubstring.UnicodeScalarView._findLastScalarBoundary(for:)((uint64_t)v24);
      unint64_t v33 = v32;
      swift_bridgeObjectRelease();
      uint64_t result = outlined release of Locale((uint64_t)&v47);
      if (v33 != 2)
      {
        if (v38 < v31 >> 10) {
          goto LABEL_44;
        }
        return v31;
      }
    }
  }

  return v3;
}

    (*(void (**)(char *, uint64_t))(v52 + 8))(v23, v53);
    outlined destroy of Any?( (uint64_t)v26,  &demangling cache variable for type metadata for (Duration.TimeFormatStyle.Pattern.Fields, Duration.TimeFormatStyle.Pattern.Fields));
    goto LABEL_14;
  }

  outlined init with copy of ICUNumberFormatter.Signature( (uint64_t)v26,  (uint64_t)v23,  type metadata accessor for Duration.TimeFormatStyle.Pattern.Fields);
  unint64_t v39 = v52;
  uint64_t v40 = v53;
  (*(void (**)(char *, char *, uint64_t))(v52 + 32))(v14, v28, v53);
  unint64_t v41 = static FloatingPointRoundingRule.== infix(_:_:)();
  int v42 = *(void (**)(char *, uint64_t))(v39 + 8);
  v42(v14, v40);
  unint64_t v43 = v23;
  int v44 = v40;
LABEL_11:
  v42(v43, v44);
  outlined destroy of ICUNumberFormatter.Signature( (uint64_t)v26,  type metadata accessor for Duration.TimeFormatStyle.Pattern.Fields);
  return v41 & 1;
}

  *a3 = 4LL;
  return result;
}

  outlined init with copy of Notification(v1, &v34);
  *(void *)&unint64_t v37 = v11;
  uint64_t v28 = *MEMORY[0x18961A710];
  id v29 = type metadata accessor for Mirror.DisplayStyle();
  uint64_t v30 = *(void *)(v29 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v30 + 104))(v8, v28, v29);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v30 + 56))(v8, 0LL, 1LL, v29);
  (*(void (**)(char *, void, uint64_t))(v3 + 104))(v5, *MEMORY[0x18961A748], v2);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [(label: String?, value: Any)]);
  lazy protocol witness table accessor for type [(label: String?, value: Any)] and conformance [A]();
  return Mirror.init<A, B>(_:children:displayStyle:ancestorRepresentation:)();
}

  unint64_t v24 = *(void (**)(char *, uint64_t, uint64_t))(v4 + 16);
  v24(v11, a1, a2);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CustomNSError);
  if (swift_dynamicCast())
  {
    outlined init with take of any PredicateExpression<Self.Output == B1>(&v76, (uint64_t)aBlock);
    unint64_t v25 = v81;
    unint64_t v26 = v82;
    __swift_project_boxed_opaque_existential_1(aBlock, (uint64_t)v81);
    uint64_t v27 = (*((uint64_t (**)(void *, uint64_t (*)()))v26 + 4))(v25, v26);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)aBlock);
    v79 = v27;
    if ((v22 & 1) != 0) {
      goto LABEL_30;
    }
  }

  else
  {
    v78 = 0LL;
    v76 = 0u;
    v77 = 0u;
    outlined destroy of Any?((uint64_t)&v76, &demangling cache variable for type metadata for CustomNSError?);
    v79 = MEMORY[0x18961AFF0];
    if ((v22 & 1) != 0) {
      goto LABEL_30;
    }
  }

  v24(v8, a1, a2);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LocalizedError);
  if ((swift_dynamicCast() & 1) != 0)
  {
    outlined init with take of any PredicateExpression<Self.Output == B1>(&v76, (uint64_t)aBlock);
    uint64_t v28 = v81;
    id v29 = v82;
    __swift_project_boxed_opaque_existential_1(aBlock, (uint64_t)v81);
    uint64_t v30 = (*((uint64_t (**)(void *, uint64_t (*)()))v29 + 2))(v28, v29);
    uint64_t v32 = MEMORY[0x189617FA8];
    if (v31)
    {
      unint64_t v33 = v30;
      __int16 v34 = v31;
      unint64_t v35 = static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSLocalizedDescription");
      *((void *)&v77 + 1) = v32;
      *(void *)&v76 = v33;
      *((void *)&v76 + 1) = v34;
      specialized Dictionary.subscript.setter((uint64_t)&v76, (uint64_t)v35, v36);
    }

    unint64_t v37 = v81;
    unint64_t v38 = v82;
    __swift_project_boxed_opaque_existential_1(aBlock, (uint64_t)v81);
    unint64_t v39 = (*((uint64_t (**)(void *, uint64_t (*)()))v38 + 3))(v37, v38);
    if (v40)
    {
      unint64_t v41 = v39;
      int v42 = v40;
      unint64_t v43 = static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSLocalizedFailureReason");
      *((void *)&v77 + 1) = v32;
      *(void *)&v76 = v41;
      *((void *)&v76 + 1) = v42;
      specialized Dictionary.subscript.setter((uint64_t)&v76, (uint64_t)v43, v44);
    }

    unint64_t v45 = v81;
    unint64_t v46 = v82;
    __swift_project_boxed_opaque_existential_1(aBlock, (uint64_t)v81);
    unint64_t v47 = (*((uint64_t (**)(void *, uint64_t (*)()))v46 + 4))(v45, v46);
    if (v48)
    {
      unint64_t v49 = v47;
      unint64_t v50 = v48;
      v51 = static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSLocalizedRecoverySuggestion");
      *((void *)&v77 + 1) = v32;
      *(void *)&v76 = v49;
      *((void *)&v76 + 1) = v50;
      specialized Dictionary.subscript.setter((uint64_t)&v76, (uint64_t)v51, v52);
    }

    uint64_t v53 = v81;
    v54 = v82;
    __swift_project_boxed_opaque_existential_1(aBlock, (uint64_t)v81);
    v55 = (*((uint64_t (**)(void *, uint64_t (*)()))v54 + 5))(v53, v54);
    if (v56)
    {
      v57 = v55;
      unint64_t v58 = v56;
      int v59 = static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSHelpAnchor");
      *((void *)&v77 + 1) = v32;
      *(void *)&v76 = v57;
      *((void *)&v76 + 1) = v58;
      specialized Dictionary.subscript.setter((uint64_t)&v76, (uint64_t)v59, v60);
    }

    __swift_destroy_boxed_opaque_existential_1((uint64_t)aBlock);
  }

  else
  {
    v78 = 0LL;
    v76 = 0u;
    v77 = 0u;
    outlined destroy of Any?((uint64_t)&v76, &demangling cache variable for type metadata for LocalizedError?);
  }

  v24(v74, a1, a2);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RecoverableError);
  if ((swift_dynamicCast() & 1) != 0)
  {
    outlined init with take of any PredicateExpression<Self.Output == B1>(&v76, (uint64_t)aBlock);
    v61 = static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSLocalizedRecoveryOptions");
    v63 = v62;
    v64 = v81;
    v65 = v82;
    __swift_project_boxed_opaque_existential_1(aBlock, (uint64_t)v81);
    v66 = (*((uint64_t (**)(void *, uint64_t (*)()))v65 + 2))(v64, v65);
    *((void *)&v77 + 1) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
    *(void *)&v76 = v66;
    specialized Dictionary.subscript.setter((uint64_t)&v76, (uint64_t)v61, v63);
    v67 = static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSRecoveryAttempter");
    v69 = v68;
    v70 = type metadata accessor for __NSErrorRecoveryAttempter();
    v71 = swift_allocObject();
    *((void *)&v77 + 1) = v70;
    *(void *)&v76 = v71;
    specialized Dictionary.subscript.setter((uint64_t)&v76, (uint64_t)v67, v69);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)aBlock);
  }

  else
  {
    v78 = 0LL;
    v76 = 0u;
    v77 = 0u;
    outlined destroy of Any?((uint64_t)&v76, &demangling cache variable for type metadata for RecoverableError?);
  }

  v84 = v5;
  v83 = v7;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<Calendar.Component, NSCalendarUnit>);
  unint64_t v21 = (void *)static _DictionaryStorage.allocate(capacity:)();
  for (i = 0LL; i != 256; i += 16LL)
  {
    unsigned __int8 v23 = outlined read-only object #0 of _CalendarBridged.range(of:in:for:)[i + 32];
    if (v23 == 18) {
      break;
    }
    unint64_t v24 = *(void *)&outlined read-only object #0 of _CalendarBridged.range(of:in:for:)[i + 40];
    unint64_t v25 = specialized __RawDictionaryStorage.find<A>(_:)(outlined read-only object #0 of _CalendarBridged.range(of:in:for:)[i + 32]);
    if ((v26 & 1) != 0) {
      goto LABEL_89;
    }
    *(void *)((char *)v21 + ((v25 >> 3) & 0x1FFFFFFFFFFFFFF8LL) + 64) |= 1LL << v25;
    *(_BYTE *)(v21[6] + v25) = v23;
    *(void *)(v21[7] + 8 * v25) = v24;
    uint64_t v27 = v21[2];
    unint64_t v19 = __OFADD__(v27, 1LL);
    uint64_t v28 = v27 + 1;
    if (v19) {
      goto LABEL_90;
    }
    v21[2] = v28;
  }

  id v29 = 0LL;
  uint64_t v30 = 0LL;
  uint64_t v31 = 1LL << *(_BYTE *)(v8 + 32);
  uint64_t v32 = *(void *)(v8 + 56);
  unint64_t v33 = -1LL;
  if (v31 < 64) {
    unint64_t v33 = ~(-1LL << v31);
  }
  __int16 v34 = v33 & v32;
  unint64_t v35 = (unint64_t)(v31 + 63) >> 6;
  if ((v33 & v32) == 0) {
    goto LABEL_22;
  }
LABEL_20:
  v36 = __clz(__rbit64(v34));
  v34 &= v34 - 1;
  unint64_t v37 = v36 | (v29 << 6);
  if (v21[2])
  {
    while (1)
    {
      unint64_t v41 = specialized __RawDictionaryStorage.find<A>(_:)(*(unsigned __int8 *)(*(void *)(v8 + 48) + v37));
      if ((v42 & 1) == 0) {
        goto LABEL_85;
      }
      unint64_t v43 = *(void *)(v21[7] + 8 * v41);
      if ((v43 & ~v30) == 0) {
        unint64_t v43 = 0LL;
      }
      v30 |= v43;
      if (v34) {
        goto LABEL_20;
      }
LABEL_22:
      unint64_t v38 = v29 + 1;
      if (__OFADD__(v29, 1LL)) {
        goto LABEL_88;
      }
      if (v38 >= v35) {
        break;
      }
      unint64_t v39 = *(void *)(v9 + 8 * v38);
      ++v29;
      if (!v39)
      {
        id v29 = v38 + 1;
        if (v38 + 1 >= v35) {
          break;
        }
        unint64_t v39 = *(void *)(v9 + 8 * v29);
        if (!v39)
        {
          id v29 = v38 + 2;
          if (v38 + 2 >= v35) {
            break;
          }
          unint64_t v39 = *(void *)(v9 + 8 * v29);
          if (!v39)
          {
            uint64_t v40 = v38 + 3;
            if (v40 >= v35) {
              break;
            }
            unint64_t v39 = *(void *)(v9 + 8 * v40);
            if (!v39)
            {
              while (1)
              {
                id v29 = v40 + 1;
                if (__OFADD__(v40, 1LL)) {
                  goto LABEL_94;
                }
                if (v29 >= v35) {
                  goto LABEL_41;
                }
                unint64_t v39 = *(void *)(v9 + 8 * v29);
                ++v40;
                if (v39) {
                  goto LABEL_35;
                }
              }
            }

            id v29 = v40;
          }
        }
      }

  v55 = v9;
  v56 = v5;
  unsigned __int8 v23 = v8;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<Calendar.Component, NSCalendarUnit>);
  unint64_t v24 = (void *)static _DictionaryStorage.allocate(capacity:)();
  for (i = 0LL; i != 256; i += 16LL)
  {
    unint64_t v26 = outlined read-only object #0 of _CalendarBridged.dateInterval(of:for:)[i + 32];
    if (v26 == 18) {
      break;
    }
    uint64_t v27 = *(void *)&outlined read-only object #0 of _CalendarBridged.dateInterval(of:for:)[i + 40];
    uint64_t v28 = specialized __RawDictionaryStorage.find<A>(_:)(outlined read-only object #0 of _CalendarBridged.dateInterval(of:for:)[i + 32]);
    if ((v29 & 1) != 0) {
      goto LABEL_50;
    }
    *(void *)((char *)v24 + ((v28 >> 3) & 0x1FFFFFFFFFFFFFF8LL) + 64) |= 1LL << v28;
    *(_BYTE *)(v24[6] + v2_Block_object_dispose((const void *)(v11 - 240), 8) = v26;
    *(void *)(v24[7] + 8 * v2_Block_object_dispose((const void *)(v11 - 240), 8) = v27;
    uint64_t v30 = v24[2];
    unint64_t v21 = __OFADD__(v30, 1LL);
    uint64_t v31 = v30 + 1;
    if (v21) {
      goto LABEL_51;
    }
    v24[2] = v31;
  }

  uint64_t v32 = 0LL;
  unint64_t v33 = 0LL;
  __int16 v34 = 1LL << *(_BYTE *)(v10 + 32);
  unint64_t v35 = *(void *)(v10 + 56);
  v36 = -1LL;
  if (v34 < 64) {
    v36 = ~(-1LL << v34);
  }
  unint64_t v37 = v36 & v35;
  unint64_t v38 = (unint64_t)(v34 + 63) >> 6;
  if ((v36 & v35) == 0) {
    goto LABEL_22;
  }
LABEL_20:
  unint64_t v39 = __clz(__rbit64(v37));
  v37 &= v37 - 1;
  uint64_t v40 = v39 | (v32 << 6);
  if (!v24[2])
  {
LABEL_47:
    __break(1u);
LABEL_48:
    __break(1u);
LABEL_49:
    __break(1u);
LABEL_50:
    __break(1u);
LABEL_51:
    __break(1u);
    goto LABEL_52;
  }

  while (1)
  {
    int v44 = specialized __RawDictionaryStorage.find<A>(_:)(*(unsigned __int8 *)(*(void *)(v10 + 48) + v40));
    if ((v45 & 1) == 0) {
      goto LABEL_48;
    }
    unint64_t v46 = *(void *)(v24[7] + 8 * v44);
    if ((v46 & ~v33) == 0) {
      unint64_t v46 = 0LL;
    }
    v33 |= v46;
    if (v37) {
      goto LABEL_20;
    }
LABEL_22:
    unint64_t v41 = v32 + 1;
    if (__OFADD__(v32, 1LL)) {
      goto LABEL_49;
    }
    if (v41 >= v38) {
      break;
    }
    int v42 = *(void *)(v11 + 8 * v41);
    ++v32;
    if (!v42)
    {
      uint64_t v32 = v41 + 1;
      if (v41 + 1 >= v38) {
        break;
      }
      int v42 = *(void *)(v11 + 8 * v32);
      if (!v42)
      {
        uint64_t v32 = v41 + 2;
        if (v41 + 2 >= v38) {
          break;
        }
        int v42 = *(void *)(v11 + 8 * v32);
        if (!v42)
        {
          unint64_t v43 = v41 + 3;
          if (v43 >= v38) {
            break;
          }
          int v42 = *(void *)(v11 + 8 * v43);
          if (!v42)
          {
            while (1)
            {
              uint64_t v32 = v43 + 1;
              if (__OFADD__(v43, 1LL)) {
                break;
              }
              if (v32 >= v38) {
                goto LABEL_41;
              }
              int v42 = *(void *)(v11 + 8 * v32);
              ++v43;
              if (v42) {
                goto LABEL_35;
              }
            }

  v77 = v6;
  v76 = v8;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<Calendar.Component, NSCalendarUnit>);
  uint64_t v11 = static _DictionaryStorage.allocate(capacity:)();
  unsigned __int8 v23 = (void *)v11;
  unint64_t v24 = 0LL;
  unint64_t v25 = v11 + 64;
  do
  {
    unint64_t v26 = outlined read-only object #0 of _CalendarBridged.ordinality(of:in:for:)[v24 + 32];
    if (v26 == 18) {
      break;
    }
    uint64_t v27 = *(void *)&outlined read-only object #0 of _CalendarBridged.ordinality(of:in:for:)[v24 + 40];
    uint64_t v11 = specialized __RawDictionaryStorage.find<A>(_:)(outlined read-only object #0 of _CalendarBridged.ordinality(of:in:for:)[v24 + 32]);
    if (v12) {
      goto LABEL_94;
    }
    *(void *)(v25 + ((v11 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v11;
    *(_BYTE *)(v23[6] + v11) = v26;
    *(void *)(v23[7] + 8 * v11) = v27;
    uint64_t v28 = v23[2];
    unint64_t v21 = __OFADD__(v28, 1LL);
    id v29 = v28 + 1;
    if (v21) {
      goto LABEL_95;
    }
    unint64_t v23[2] = v29;
    v24 += 16LL;
  }

  while (v24 != 256);
  uint64_t v30 = 0LL;
  uint64_t v31 = 0LL;
  uint64_t v32 = 1LL << *(_BYTE *)(v9 + 32);
  unint64_t v33 = *(void *)(v9 + 56);
  __int16 v34 = -1LL;
  if (v32 < 64) {
    __int16 v34 = ~(-1LL << v32);
  }
  unint64_t v35 = v34 & v33;
  v36 = (unint64_t)(v32 + 63) >> 6;
  if ((v34 & v33) == 0) {
    goto LABEL_22;
  }
LABEL_20:
  unint64_t v37 = __clz(__rbit64(v35));
  v35 &= v35 - 1;
  unint64_t v38 = v37 | (v30 << 6);
  if (v23[2])
  {
    while (1)
    {
      uint64_t v11 = specialized __RawDictionaryStorage.find<A>(_:)(*(unsigned __int8 *)(*(void *)(v9 + 48) + v38));
      if (!v12) {
        goto LABEL_89;
      }
      int v42 = *(void *)(v23[7] + 8 * v11);
      if ((v42 & ~v31) == 0) {
        int v42 = 0LL;
      }
      v31 |= v42;
      if (v35) {
        goto LABEL_20;
      }
LABEL_22:
      unint64_t v39 = v30 + 1;
      if (__OFADD__(v30, 1LL)) {
        goto LABEL_92;
      }
      if (v39 >= v36) {
        break;
      }
      uint64_t v40 = *(void *)(v10 + 8 * v39);
      ++v30;
      if (!v40)
      {
        uint64_t v30 = v39 + 1;
        if (v39 + 1 >= v36) {
          break;
        }
        uint64_t v40 = *(void *)(v10 + 8 * v30);
        if (!v40)
        {
          uint64_t v30 = v39 + 2;
          if (v39 + 2 >= v36) {
            break;
          }
          uint64_t v40 = *(void *)(v10 + 8 * v30);
          if (!v40)
          {
            uint64_t v30 = v39 + 3;
            if (v39 + 3 >= v36) {
              break;
            }
            uint64_t v40 = *(void *)(v10 + 8 * v30);
            if (!v40)
            {
              unint64_t v41 = v39 + 4;
              if (v41 >= v36) {
                break;
              }
              uint64_t v40 = *(void *)(v10 + 8 * v41);
              if (!v40)
              {
                while (1)
                {
                  uint64_t v30 = v41 + 1;
                  if (__OFADD__(v41, 1LL)) {
                    goto LABEL_98;
                  }
                  if (v30 >= v36) {
                    goto LABEL_43;
                  }
                  uint64_t v40 = *(void *)(v10 + 8 * v30);
                  ++v41;
                  if (v40) {
                    goto LABEL_37;
                  }
                }
              }

              uint64_t v30 = v41;
            }
          }
        }
      }

    __int16 v34 = (uint64_t *)(v31 + 64);
    goto LABEL_13;
  }

  __swift_memcpy25_8((uint64_t)v26, (uint64_t)v23);
  unint64_t v33 = (uint64_t *)swift_allocObject();
  unint64_t v35 = v46;
  v33[5] = (uint64_t)&type metadata for _CodingKey;
  v33[6] = v35;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v33 + 2);
  __swift_memcpy25_8((uint64_t)boxed_opaque_existential_1, (uint64_t)v26);
  unint64_t v37 = *(void (**)(char *, uint64_t))(v21 + 8);
  uint64_t v30 = v48;
  swift_bridgeObjectRetain();
  v37(v23, v20);
  uint64_t v31 = v49;
  v33[7] = v49;
  uint64_t v32 = v31 >> 62;
  if (v31 >> 62)
  {
    if ((_DWORD)v32 != 1)
    {
      int v42 = 1LL;
LABEL_11:
      v33[8] = v42;
      swift_release();
      swift_release();
      if ((_DWORD)v32) {
        goto LABEL_3;
      }
      goto LABEL_12;
    }

    unint64_t v38 = (uint64_t *)((v31 & 0x3FFFFFFFFFFFFFFFLL) + 32);
  }

  else
  {
    unint64_t v38 = (uint64_t *)(v31 + 64);
  }

  uint64_t v40 = *v38;
  uint64_t result = swift_retain();
  int v42 = v40 + 1;
  if (!__OFADD__(v40, 1LL)) {
    goto LABEL_11;
  }
  __break(1u);
  return result;
}

    unint64_t v49 = dispatch thunk of BinaryInteger.bitWidth.getter();
    unint64_t v50 = v103;
    v39(v103, (uint64_t)v40, v6);
    if (v49 >= 65)
    {
      v45(v50, v6);
      v39(v44, (uint64_t)v40, v6);
LABEL_14:
      v114 = 0x7FFFFFFFFFFFFFFFLL;
      v51 = dispatch thunk of static BinaryInteger.isSigned.getter();
      id v52 = dispatch thunk of BinaryInteger.bitWidth.getter();
      if ((v51 & 1) != 0)
      {
        if (v52 > 64)
        {
          lazy protocol witness table accessor for type Int64 and conformance Int64();
          uint64_t v53 = v111;
          dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
          v54 = v110;
          v55 = dispatch thunk of static Comparable.< infix(_:_:)();
          v45(v53, v6);
          v56 = v54;
          goto LABEL_36;
        }
      }

      else if (v52 > 63)
      {
        v113 = 0x7FFFFFFFFFFFFFFFLL;
        v75 = v111;
        (*(void (**)(char *, char *, uint64_t))(v108 + 32))(v111, v110, v6);
        lazy protocol witness table accessor for type Int64 and conformance Int64();
        v76 = v98;
        dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
        v55 = dispatch thunk of static Comparable.< infix(_:_:)();
        v45(v76, v6);
        v56 = v75;
LABEL_36:
        v45(v56, v6);
        if ((v55 & 1) != 0) {
          goto LABEL_43;
        }
LABEL_29:
        dispatch thunk of BinaryInteger._lowWord.getter();
        v45(v40, v6);
        type metadata accessor for ICUNumberFormatterBase.FormatResult();
        swift_initStackObject();
        ICUNumberFormatterBase.FormatResult.init(formatter:value:)();
        v66 = swift_retain_n();
        MEMORY[0x1895F8858](v66);
        swift_retain();
        specialized closure #1 in _withResizingUCharBuffer(initialSize:_:)((uint64_t)(&v95 - 8), &v114);
        v67 = v114;
        v68 = v115;
        swift_release();
        goto LABEL_44;
      }

      v64 = v110;
      dispatch thunk of BinaryInteger._lowWord.getter();
      v65 = v64;
LABEL_28:
      v45(v65, v6);
      goto LABEL_29;
    }

    v57 = dispatch thunk of BinaryInteger.bitWidth.getter();
    v45(v50, v6);
    if (v57 == 64)
    {
      unint64_t v58 = dispatch thunk of static BinaryInteger.isSigned.getter();
      v39(v44, (uint64_t)v40, v6);
      if ((v58 & 1) == 0) {
        goto LABEL_14;
      }
    }

    else
    {
      v39(v44, (uint64_t)v40, v6);
    }

    v65 = v44;
    goto LABEL_28;
  }

  int v59 = dispatch thunk of static BinaryInteger.isSigned.getter();
  uint64_t v60 = dispatch thunk of BinaryInteger.bitWidth.getter();
  if ((v59 & 1) != 0)
  {
    if (v60 > 64)
    {
      lazy protocol witness table accessor for type Int64 and conformance Int64();
      v61 = v111;
      dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
      v62 = v109;
      v63 = dispatch thunk of static Comparable.< infix(_:_:)();
      v45(v61, v6);
      v45(v62, v6);
      int v44 = v110;
      if ((v63 & 1) != 0) {
        goto LABEL_43;
      }
      goto LABEL_12;
    }

    v77 = v96;
    AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
    MEMORY[0x186E1CDF8](&unk_1837317E8, 256LL, v77, AssociatedConformanceWitness);
    v79 = v111;
    dispatch thunk of ExpressibleByFloatLiteral.init(floatLiteral:)();
    v80 = v109;
    LOBYTE(v77) = dispatch thunk of static Comparable.< infix(_:_:)();
    v45(v79, v6);
    v81 = v97;
    (*(void (**)(char *, char *, uint64_t))(v38 + 32))(v97, v80, v6);
    if ((v77 & 1) != 0)
    {
      v45(v81, v6);
      goto LABEL_43;
    }

    v82 = v81;
    v83 = v114;
    v84 = dispatch thunk of BinaryInteger._lowWord.getter();
    v45(v82, v6);
    v74 = v84 < v83;
  }

  else
  {
    if (v60 >= 64)
    {
      v45(v109, v6);
      int v44 = v110;
      goto LABEL_12;
    }

    v72 = v109;
    v73 = dispatch thunk of BinaryInteger._lowWord.getter();
    v45(v72, v6);
    v74 = v73 < v114;
  }

  int v44 = v110;
  if (!v74) {
    goto LABEL_12;
  }
LABEL_43:
  v45(v40, v6);
  v85 = (uint64_t)v100;
  dispatch thunk of BinaryFloatingPoint.exponentBitPattern.getter();
  v86 = dispatch thunk of static BinaryInteger.isSigned.getter();
  v87 = v102;
  v88 = swift_getAssociatedConformanceWitness();
  v89 = numericStringRepresentationForBinaryInteger<A>(words:isSigned:)( v85,  v86 & 1,  v87,  *(void *)(*(void *)(v88 + 8) + 8LL));
  v91 = v90;
  (*(void (**)(uint64_t, uint64_t))(v101 + 8))(v85, v87);
  v92 = *(void *)(v106 + 16);
  type metadata accessor for ICUNumberFormatterBase.FormatResult();
  swift_initStackObject();
  swift_bridgeObjectRetain();
  ICUNumberFormatterBase.FormatResult.init(formatter:value:)(v92, v89, v91);
  v93 = swift_retain_n();
  MEMORY[0x1895F8858](v93);
  swift_retain();
  specialized closure #1 in _withResizingUCharBuffer(initialSize:_:)((uint64_t)(&v95 - 8), &v114);
  v67 = v114;
  v68 = v115;
  swift_release();
  swift_bridgeObjectRelease();
LABEL_44:
  swift_release_n();
  if (!v68)
  {
    v39(v111, v112, v6);
    return String.init<A>(_:radix:uppercase:)();
  }

  return v67;
}

    unint64_t v45 = dispatch thunk of BinaryInteger.bitWidth.getter();
    v39(v37, v33, v9);
    if (v45 < 65)
    {
      v51 = dispatch thunk of BinaryInteger.bitWidth.getter();
      v38(v37, v9);
      if (v51 != 64)
      {
        v39(v41, v33, v9);
        goto LABEL_27;
      }

      id v52 = dispatch thunk of static BinaryInteger.isSigned.getter();
      v39(v41, v33, v9);
      if ((v52 & 1) != 0) {
        goto LABEL_27;
      }
    }

    else
    {
      v38(v37, v9);
      v39(v41, v33, v9);
    }

    v101 = 0x7FFFFFFFFFFFFFFFLL;
    unint64_t v46 = dispatch thunk of static BinaryInteger.isSigned.getter();
    unint64_t v47 = dispatch thunk of BinaryInteger.bitWidth.getter();
    if ((v46 & 1) != 0)
    {
      if (v47 > 64)
      {
        lazy protocol witness table accessor for type Int64 and conformance Int64();
        unint64_t v48 = v99;
        dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
        unint64_t v49 = dispatch thunk of static Comparable.< infix(_:_:)();
        v38(v48, v9);
        unint64_t v50 = v41;
        goto LABEL_35;
      }
    }

    else if (v47 > 63)
    {
      v100 = 0x7FFFFFFFFFFFFFFFLL;
      v65 = v99;
      (*(void (**)(char *, char *, uint64_t))(v85 + 32))(v99, v41, v9);
      lazy protocol witness table accessor for type Int64 and conformance Int64();
      v66 = v90;
      dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
      unint64_t v49 = dispatch thunk of static Comparable.< infix(_:_:)();
      v38(v66, v9);
      unint64_t v50 = v65;
LABEL_35:
      v38(v50, v9);
      if ((v49 & 1) != 0) {
        goto LABEL_42;
      }
LABEL_28:
      dispatch thunk of BinaryInteger._lowWord.getter();
      v38(v33, v9);
      type metadata accessor for ICUNumberFormatterBase.FormatResult();
      swift_initStackObject();
      ICUNumberFormatterBase.FormatResult.init(formatter:value:)();
      v57 = swift_retain_n();
      MEMORY[0x1895F8858](v57);
      swift_retain();
      specialized closure #1 in _withResizingUCharBuffer(initialSize:_:)((uint64_t)(&v84 - 8), &v101);
      unint64_t v58 = v101;
      int v59 = v102;
      swift_release();
      goto LABEL_43;
    }

    dispatch thunk of BinaryInteger._lowWord.getter();
LABEL_27:
    v38(v41, v9);
    goto LABEL_28;
  }

  uint64_t v53 = dispatch thunk of static BinaryInteger.isSigned.getter();
  v54 = dispatch thunk of BinaryInteger.bitWidth.getter();
  if ((v53 & 1) != 0)
  {
    if (v54 > 64)
    {
      lazy protocol witness table accessor for type Int64 and conformance Int64();
      v55 = v99;
      dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
      v56 = dispatch thunk of static Comparable.< infix(_:_:)();
      v38(v55, v9);
      v38(v26, v9);
      unint64_t v43 = v94;
      unint64_t v41 = v95;
      int v44 = v97;
      unint64_t v37 = v98;
      if ((v56 & 1) != 0) {
        goto LABEL_42;
      }
      goto LABEL_12;
    }

    v67 = v87;
    AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
    MEMORY[0x186E1CDF8](&unk_1837317E8, 256LL, v67, AssociatedConformanceWitness);
    v69 = v99;
    dispatch thunk of ExpressibleByFloatLiteral.init(floatLiteral:)();
    LOBYTE(v67) = dispatch thunk of static Comparable.< infix(_:_:)();
    v38(v69, v9);
    v70 = v89;
    (*(void (**)(char *, char *, uint64_t))(v85 + 32))(v89, v26, v9);
    if ((v67 & 1) != 0)
    {
      v38(v70, v9);
      unint64_t v43 = v94;
      int v44 = v97;
      goto LABEL_42;
    }

    v71 = v101;
    v72 = dispatch thunk of BinaryInteger._lowWord.getter();
    v38(v70, v9);
    v64 = v72 < v71;
    unint64_t v43 = v94;
    unint64_t v41 = v95;
  }

  else
  {
    unint64_t v41 = v95;
    if (v54 >= 64)
    {
      v38(v26, v9);
      unint64_t v43 = v94;
      int v44 = v97;
      unint64_t v37 = v98;
      goto LABEL_12;
    }

    v63 = dispatch thunk of BinaryInteger._lowWord.getter();
    v38(v26, v9);
    v64 = v63 < v101;
    unint64_t v43 = v94;
  }

  int v44 = v97;
  unint64_t v37 = v98;
  if (!v64) {
    goto LABEL_12;
  }
LABEL_42:
  v38(v33, v9);
  v73 = (uint64_t)v91;
  dispatch thunk of BinaryFloatingPoint.exponentBitPattern.getter();
  v74 = dispatch thunk of static BinaryInteger.isSigned.getter();
  v75 = v93;
  v76 = swift_getAssociatedConformanceWitness();
  v77 = numericStringRepresentationForBinaryInteger<A>(words:isSigned:)( v73,  v74 & 1,  v75,  *(void *)(*(void *)(v76 + 8) + 8LL));
  v79 = v78;
  (*(void (**)(uint64_t, uint64_t))(v92 + 8))(v73, v75);
  v80 = *(void *)(v44 + 16);
  type metadata accessor for ICUNumberFormatterBase.FormatResult();
  swift_initStackObject();
  swift_bridgeObjectRetain();
  ICUNumberFormatterBase.FormatResult.init(formatter:value:)(v80, v77, v79);
  v81 = swift_retain_n();
  MEMORY[0x1895F8858](v81);
  swift_retain();
  specialized closure #1 in _withResizingUCharBuffer(initialSize:_:)((uint64_t)(&v84 - 8), &v101);
  unint64_t v58 = v101;
  int v59 = v102;
  swift_release();
  swift_bridgeObjectRelease();
LABEL_43:
  v82 = v96;
  swift_release_n();
  if (!v59)
  {
    v82(v99, v43, v9);
    return String.init<A>(_:radix:uppercase:)();
  }

  return v58;
}

    if ((v1 & 0x1000000000000LL) == 0)
    {
      if ((Data.subscript.getter(0LL, v2, v1), v11 == 254) && (Data.subscript.getter(1LL, v2, v1), v12 == -1)
        || (Data.subscript.getter(0LL, v2, v1), v13 == -1) && (Data.subscript.getter(1LL, v2, v1), v14 == 254))
      {
        uint64_t v15 = 10LL;
        goto LABEL_19;
      }
    }

    goto LABEL_18;
  }

  Data.subscript.getter(0LL, v2, v1);
  if (v3 != -1
    || (Data.subscript.getter(1LL, v2, v1), v4 != 254)
    || (Data.subscript.getter(2LL, v2, v1), v5)
    || (Data.subscript.getter(3LL, v2, v1), v6))
  {
    Data.subscript.getter(0LL, v2, v1);
    if (v7) {
      goto LABEL_12;
    }
    Data.subscript.getter(1LL, v2, v1);
    if (v8) {
      goto LABEL_12;
    }
    Data.subscript.getter(3LL, v2, v1);
    if (v9 != 254) {
      goto LABEL_12;
    }
    Data.subscript.getter(4LL, v2, v1);
    if (v10 != -1) {
      goto LABEL_12;
    }
  }

  uint64_t v15 = 2348810496LL;
LABEL_19:
  uint64_t v16 = specialized String.init<A>(bytes:encoding:)(v2, v1, v15);
  int v18 = v17;
  outlined consume of Data._Representation(v2, v1);
  if (v18) {
    *v0 = v15;
  }
  return v16;
}

  __dst = 0uLL;
  v61 = 0uLL;
  DateComponents.init(calendar:timeZone:era:year:month:day:hour:minute:second:nanosecond:weekday:weekdayOrdinal:quarter:weekOfMonth:weekOfYear:yearForWeekOfYear:)( &__dst,  (uint64_t *)&v61,  0LL,  1,  0LL,  1,  0LL,  1,  (uint64_t)__src,  0LL,  1,  0LL,  1,  0LL,  1,  0LL,  1,  0LL,  1,  0LL,  1,  0LL,  1,  0LL,  1,  0LL,  1,  0LL,  1,  0LL,  1);
  *(void *)&__dst = v8;
  uint64_t v15 = orderedComponents #1 (_:) in _CalendarGregorian.dateComponents(_:from:to:)((uint64_t *)&__dst);
  uint64_t v16 = v15;
  unint64_t v58 = *((void *)v15 + 2);
  if (v58)
  {
    unint64_t v17 = 0LL;
    v57 = v15 + 32;
    int v18 = 0x7FFFFFFFLL;
    if (v9 >= v10) {
      int v18 = 0xFFFFFFFF80000000LL;
    }
    v55 = v18;
    v56 = v15;
    uint64_t v53 = v7;
    do
    {
      if (v17 >= *((void *)v16 + 2))
      {
        __break(1u);
LABEL_99:
        __break(1u);
LABEL_100:
        __break(1u);
LABEL_101:
        __break(1u);
LABEL_102:
        __break(1u);
        JUMPOUT(0x18333B1ECLL);
      }

      char v20 = v57[v17++];
      if (((1 << v20) & 0x23DFF) != 0)
      {
        if (v11 == v12)
        {
          *(double *)&unint64_t v21 = 0.0;
          goto LABEL_24;
        }

        if ((v20 - 1) >= 0xC) {
          __asm { BR              X8 }
        }

        *(double *)&unint64_t v21 = 0.0;
        uint64_t v31 = -1LL;
        if (v12 < v11) {
          uint64_t v31 = 1LL;
        }
        while (1)
        {
          uint64_t v32 = v31;
          LOBYTE(v59) = v20;
          v66 = v12;
          v61 = *(_OWORD *)(v5 + 104);
          swift_unknownObjectRetain();
          _s10Foundation18_CalendarGregorianC3add_2to6amount10inTimeZoneAA4DateVAA0B0V9ComponentO_AISiAA0hI0VtAA0cB5ErrorOYKF( (unsigned __int8 *)&v59,  &v66,  v32,  v60);
          swift_unknownObjectRelease();
          unint64_t v33 = v60[0] < v12;
          if (v12 < v11) {
            unint64_t v33 = v12 < v60[0];
          }
          if (!v33) {
            break;
          }
          if (v60[0] == v11)
          {
            unint64_t v21 = v32;
            uint64_t v12 = v60[0];
            goto LABEL_81;
          }

          if (v12 >= v11)
          {
            if (v60[0] < v11)
            {
              while (1)
              {
LABEL_61:
                if (v12 >= v11)
                {
                  if (__OFSUB__(v21, v32)) {
                    goto LABEL_101;
                  }
                  if (v21 - v32 < 2)
                  {
LABEL_82:
                    LOBYTE(v59) = v20;
                    v66 = v12;
                    v61 = *(_OWORD *)(v5 + 104);
                    swift_unknownObjectRetain();
                    _s10Foundation18_CalendarGregorianC3add_2to6amount10inTimeZoneAA4DateVAA0B0V9ComponentO_AISiAA0hI0VtAA0cB5ErrorOYKF( (unsigned __int8 *)&v59,  &v66,  v21,  v60);
                    swift_unknownObjectRelease();
                    uint64_t v12 = v60[0];
LABEL_81:
                    uint64_t v16 = v56;
LABEL_24:
                    if ((_DWORD)v20 == 13)
                    {
                      *(void *)&unint64_t v22 = (char *)v7 + v21;
                      unsigned __int8 v23 = __OFADD__(v21, v7);
                      unint64_t v24 = __OFSUB__(v21, v7);
                      if (v10 < v9) {
                        unsigned __int8 v23 = v24;
                      }
                      if (v23)
                      {
                        if (one-time initialization token for logger != -1) {
                          swift_once();
                        }
                        unint64_t v25 = type metadata accessor for Logger();
                        __swift_project_value_buffer(v25, (uint64_t)static _CalendarGregorian.logger);
                        unint64_t v26 = (os_log_s *)Logger.logObject.getter();
                        uint64_t v27 = static os_log_type_t.error.getter();
                        if (os_log_type_enabled(v26, v27))
                        {
                          uint64_t v28 = swift_slowAlloc();
                          id v29 = swift_slowAlloc();
                          *(void *)&__dst = v29;
                          *(_DWORD *)uint64_t v28 = 134349570;
                          *(double *)(v28 + 4) = v9;
                          *(_WORD *)(v28 + 12) = 2050;
                          *(double *)(v28 + 14) = v10;
                          *(_WORD *)(v28 + 22) = 2082;
                          *(void *)(v28 + 24) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)( 0x6F6365736F6E616ELL,  0xEA0000000000646ELL,  (uint64_t *)&__dst);
                          swift_bridgeObjectRelease();
                          _os_log_impl( &dword_182EB1000,  v26,  v27,  "Overflowing in dateComponents(from:start:end:). start: %{public}f. end: %{public}f. component: %{public}s",  (uint8_t *)v28,  0x20u);
                          swift_arrayDestroy();
                          MEMORY[0x186E20E60](v29, -1LL, -1LL);
                          MEMORY[0x186E20E60](v28, -1LL, -1LL);
                        }

                        uint64_t v16 = v56;
                        else {
                          uint64_t v30 = *(double *)&v21;
                        }
                        __src[20] = v30;
                        LOBYTE(__src[21]) = v21 == 0x7FFFFFFFFFFFFFFFLL;
                      }

                      else
                      {
                        if (v10 < v9) {
                          *(void *)&unint64_t v22 = v21 - (void)v7;
                        }
                        unint64_t v38 = *(void *)&v22 == 0x7FFFFFFFFFFFFFFFLL;
                        if (v22 == NAN) {
                          unint64_t v22 = 0.0;
                        }
                        __src[20] = v22;
                        LOBYTE(__src[21]) = v38;
                      }

                      goto LABEL_19;
                    }

                    LOBYTE(__dst) = v20;
                    v19.value = v21;
LABEL_18:
                    v19.is_nil = 0;
                    DateComponents.setValue(_:for:)(v19, (Foundation::Calendar::Component)&__dst);
                    goto LABEL_19;
                  }

                  unint64_t v35 = v32 - v21;
                  if (__OFSUB__(v32, v21)) {
                    goto LABEL_99;
                  }
                }

                else
                {
                  unint64_t v35 = v32 - v21;
                  if (__OFSUB__(v32, v21)) {
                    goto LABEL_102;
                  }
                  if (v35 <= 1) {
                    goto LABEL_82;
                  }
                }

                v36 = v35;
                unint64_t v37 = v21 + v35 / 2;
                if (__OFADD__(v21, v35 / 2)) {
                  goto LABEL_100;
                }
                LOBYTE(v59) = v20;
                v66 = v12;
                v61 = *(_OWORD *)(v5 + 104);
                swift_unknownObjectRetain();
                _s10Foundation18_CalendarGregorianC3add_2to6amount10inTimeZoneAA4DateVAA0B0V9ComponentO_AISiAA0hI0VtAA0cB5ErrorOYKF( (unsigned __int8 *)&v59,  &v66,  v37,  v60);
                swift_unknownObjectRelease();
                if (v60[0] == v11)
                {
                  v21 += v36 / 2;
                  uint64_t v12 = v60[0];
                  uint64_t v16 = v56;
                  goto LABEL_24;
                }

                __int16 v34 = v11 < v60[0];
                if (v12 >= v11) {
                  __int16 v34 = v60[0] < v11;
                }
                if (v34) {
                  uint64_t v32 = v21 + v36 / 2;
                }
                else {
                  v21 += v36 / 2;
                }
              }
            }

            uint64_t v31 = 2 * v32;
            unint64_t v21 = v32;
            if (((2 * v32) & 0x8000000000000000LL) == 0)
            {
LABEL_55:
              *(void *)&__dst = v20;
              *((double *)&__dst + 1) = v12;
              v63 = 0LL;
              v64 = v11;
              LOBYTE(v65) = 0;
              lazy protocol witness table accessor for type GregorianCalendarError and conformance GregorianCalendarError();
              swift_willThrowTypedImpl();
              if (one-time initialization token for logger != -1) {
                swift_once();
              }
              unint64_t v46 = type metadata accessor for Logger();
              __swift_project_value_buffer(v46, (uint64_t)static _CalendarGregorian.logger);
              uint64_t v40 = (os_log_s *)Logger.logObject.getter();
              unint64_t v47 = static os_log_type_t.error.getter();
              if (os_log_type_enabled(v40, v47))
              {
                unint64_t v48 = swift_slowAlloc();
                unint64_t v49 = swift_slowAlloc();
                *(void *)&__dst = v49;
                *(_DWORD *)unint64_t v48 = 134349570;
                *(double *)(v48 + 4) = v12;
                *(_WORD *)(v48 + 12) = 2050;
                *(double *)(v48 + 14) = v10;
                *(_WORD *)(v48 + 22) = 2082;
                LOBYTE(v61) = v20;
                unint64_t v50 = Calendar.Component.debugDescription.getter();
                *(void *)(v48 + 24) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)( v50,  v51,  (uint64_t *)&__dst);
                swift_bridgeObjectRelease();
                _os_log_impl( &dword_182EB1000,  v40,  v47,  "Overflowing in dateComponents(from:start:end:). start: %{public}f. end: %{public}f. component: %{public}s",  (uint8_t *)v48,  0x20u);
                swift_arrayDestroy();
                MEMORY[0x186E20E60](v49, -1LL, -1LL);
                unint64_t v45 = v48;
LABEL_91:
                MEMORY[0x186E20E60](v45, -1LL, -1LL);
              }

              goto LABEL_92;
            }
          }

          else
          {
            if (v11 < v60[0]) {
              goto LABEL_61;
            }
            uint64_t v31 = 2 * v32;
            unint64_t v21 = v32;
            if (2 * v32 < 0) {
              goto LABEL_55;
            }
          }
        }

        *(double *)&__dst = v12;
        *((double *)&__dst + 1) = v60[0];
        v63 = 0LL;
        v64 = 0.0;
        LOBYTE(v65) = 0x80;
        lazy protocol witness table accessor for type GregorianCalendarError and conformance GregorianCalendarError();
        swift_willThrowTypedImpl();
        if (one-time initialization token for logger != -1) {
          swift_once();
        }
        unint64_t v39 = type metadata accessor for Logger();
        __swift_project_value_buffer(v39, (uint64_t)static _CalendarGregorian.logger);
        uint64_t v40 = (os_log_s *)Logger.logObject.getter();
        unint64_t v41 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v40, v41))
        {
          int v42 = swift_slowAlloc();
          v54 = swift_slowAlloc();
          *(void *)&__dst = v54;
          *(_DWORD *)int v42 = 134349570;
          *(double *)&v61 = v12;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          *(_WORD *)(v42 + 12) = 2050;
          *(double *)&v61 = v10;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          *(_WORD *)(v42 + 22) = 2082;
          LOBYTE(v61) = v20;
          unint64_t v43 = Calendar.Component.debugDescription.getter();
          *(void *)&v61 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v43, v44, (uint64_t *)&__dst);
          mach_vm_size_t v7 = v53;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          _os_log_impl( &dword_182EB1000,  v40,  v41,  "Not advancing in dateComponents(from:start:end:). start: %{public}f end: %{public}f component: %{public}s",  (uint8_t *)v42,  0x20u);
          swift_arrayDestroy();
          MEMORY[0x186E20E60](v54, -1LL, -1LL);
          unint64_t v45 = v42;
          goto LABEL_91;
        }

  if ((v1 & 0x1000) != 0)
  {
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v2 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  *((void *)v2 + 2) + 1LL,  1,  v2);
    }
    uint64_t v8 = *((void *)v2 + 2);
    mach_vm_size_t v7 = *((void *)v2 + 3);
    if (v8 >= v7 >> 1) {
      uint64_t v2 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (char *)(v7 > 1),  v8 + 1,  1,  v2);
    }
    *((void *)v2 + 2) = v8 + 1;
    v2[v8 + 32] = 12;
    if ((v1 & 0x200) == 0)
    {
LABEL_14:
      if ((v1 & 4) == 0) {
        goto LABEL_15;
      }
      goto LABEL_36;
    }
  }

  else if ((v1 & 0x200) == 0)
  {
    goto LABEL_14;
  }

  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v2 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  *((void *)v2 + 2) + 1LL,  1,  v2);
  }
  int v10 = *((void *)v2 + 2);
  unint64_t v9 = *((void *)v2 + 3);
  if (v10 >= v9 >> 1) {
    uint64_t v2 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (char *)(v9 > 1),  v10 + 1,  1,  v2);
  }
  *((void *)v2 + 2) = v10 + 1;
  v2[v10 + 32] = 9;
  if ((v1 & 4) == 0)
  {
LABEL_15:
    if ((v1 & 0x800) == 0) {
      goto LABEL_16;
    }
    goto LABEL_41;
  }

    unint64_t v37 = (uint64_t *)(v33 + 64);
    goto LABEL_13;
  }

  __swift_memcpy25_8((uint64_t)v28, (uint64_t)v25);
  unint64_t v35 = (uint64_t *)swift_allocObject();
  unint64_t v38 = v48;
  v35[5] = (uint64_t)&type metadata for _CodingKey;
  v35[6] = v38;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v35 + 2);
  __swift_memcpy25_8((uint64_t)boxed_opaque_existential_1, (uint64_t)v28);
  uint64_t v40 = *(void (**)(char *, uint64_t))(v23 + 8);
  v36 = v50;
  swift_bridgeObjectRetain();
  v40(v25, v22);
  unint64_t v33 = v51;
  v35[7] = v51;
  __int16 v34 = v33 >> 62;
  if (v33 >> 62)
  {
    if ((_DWORD)v34 != 1)
    {
      unint64_t v45 = 1LL;
LABEL_11:
      v35[8] = v45;
      swift_release();
      if ((_DWORD)v34) {
        goto LABEL_3;
      }
      goto LABEL_12;
    }

    unint64_t v41 = (uint64_t *)((v33 & 0x3FFFFFFFFFFFFFFFLL) + 32);
  }

  else
  {
    unint64_t v41 = (uint64_t *)(v33 + 64);
  }

  unint64_t v43 = *v41;
  uint64_t result = swift_retain();
  unint64_t v45 = v43 + 1;
  if (!__OFADD__(v43, 1LL)) {
    goto LABEL_11;
  }
  __break(1u);
  return result;
}

    unint64_t v37 = (uint64_t *)(v33 + 64);
    goto LABEL_13;
  }

  unint64_t v38 = *(void (**)(char *, char *, uint64_t))(v25 + 32);
  v38(v28, (char *)&v48 - v24, v18);
  unint64_t v35 = swift_allocObject();
  *(_OWORD *)(v35 + 40) = v48;
  unint64_t v39 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)(v35 + 16));
  v38((char *)v39, v28, v18);
  uint64_t v40 = *(void (**)(char *, uint64_t))(v21 + 8);
  unint64_t v41 = v51;
  swift_bridgeObjectRetain();
  v40((char *)&v48 - v24, v20);
  unint64_t v33 = v52;
  *(void *)(v35 + 56) = v52;
  __int16 v34 = v33 >> 62;
  v36 = v41;
  if (v33 >> 62)
  {
    if ((_DWORD)v34 != 1)
    {
      unint64_t v46 = 1LL;
LABEL_11:
      *(void *)(v35 + 64) = v46;
      swift_release();
      if ((_DWORD)v34) {
        goto LABEL_3;
      }
      goto LABEL_12;
    }

    int v42 = (uint64_t *)((v33 & 0x3FFFFFFFFFFFFFFFLL) + 32);
  }

  else
  {
    int v42 = (uint64_t *)(v33 + 64);
  }

  int v44 = *v42;
  uint64_t result = swift_retain();
  unint64_t v46 = v44 + 1;
  if (!__OFADD__(v44, 1LL)) {
    goto LABEL_11;
  }
  __break(1u);
  return result;
}

    __break(1u);
    goto LABEL_13;
  }

  LODWORD(v6) = Limit + 1;
  if (__OFADD__(Limit, 1))
  {
    __break(1u);
    goto LABEL_11;
  }

  mach_vm_size_t v7 = result + 2;
  if (__OFADD__((_DWORD)result, 2))
  {
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }

  float v6 = (int)v6;
  if (v7 < (int)v6)
  {
    __break(1u);
    goto LABEL_6;
  }

    if (v14) {
      goto LABEL_58;
    }
LABEL_13:
    uint64_t v16 = (4 * *(_BYTE *)(v15 + 18) + 8) & 0x3C;
    uint64_t v13 = ((-15LL << v16) - 1) & v13 | (v17 << v16);
    uint64_t v15 = *(void *)(v15 + 24 + 24 * v17);
    swift_unknownObjectRetain();
    uint64_t result = swift_unknownObjectRelease();
  }

  while (*(_BYTE *)(v15 + 18));
  uint64_t v27 = v13 & 0xFFFFFFFFFFFFF0FFLL;
  int v10 = a4;
  unint64_t v9 = a5;
  uint64_t v28 = *(unsigned __int16 *)(v15 + 16);
  if (!*(_WORD *)(v15 + 16)) {
    goto LABEL_41;
  }
LABEL_30:
  id v29 = v14 - 1;
  if (__OFSUB__(v14, 1LL)) {
    goto LABEL_63;
  }
  if (__OFADD__(v29, 1LL))
  {
LABEL_64:
    __break(1u);
LABEL_65:
    __break(1u);
    return result;
  }

  if (v14 < 1)
  {
    uint64_t v28 = 0LL;
    goto LABEL_52;
  }

  if ((_DWORD)v28 != 1)
  {
    uint64_t v30 = v28 - 2;
    if (v29 < v28 - 2) {
      uint64_t v30 = v14 - 1;
    }
    if (v30 >= v14 + 0x7FFFFFFFFFFFFFFFLL) {
      uint64_t v30 = v14 + 0x7FFFFFFFFFFFFFFFLL;
    }
    uint64_t v31 = v30 + 1;
    if (v31 >= 5)
    {
      unint64_t v33 = v31 & 3;
      if ((v31 & 3) == 0) {
        unint64_t v33 = 4LL;
      }
      __int16 v34 = v31 - v33;
      uint64_t v32 = v34 + 1;
      unint64_t v35 = 0uLL;
      v36 = (int64x2_t)(unint64_t)(v14 - 1);
      v37.i64[0] = -1LL;
      v37.i64[1] = -1LL;
      do
      {
        v36 = vaddq_s64(v36, v37);
        unint64_t v35 = vaddq_s64(v35, v37);
        v34 -= 4LL;
      }

      while (v34);
      id v29 = vaddvq_s64(vaddq_s64(v35, v36));
    }

    else
    {
      uint64_t v32 = 1LL;
    }

    while (v14 + 0x8000000000000000LL != v32)
    {
      if (v14 == v32)
      {
        uint64_t v28 = v14;
        goto LABEL_52;
      }

      ++v32;
      --v29;
      if (v28 == v32) {
        goto LABEL_51;
      }
    }

  __break(1u);
  return result;
}

  __break(1u);
}

            uint64_t v13 = (4 * *(_BYTE *)(v9 + 18) + 8) & 0x3C;
            uint64_t v11 = ((-15LL << v13) - 1) & v11 | (v14 << v13);
            unint64_t v9 = *(void *)(v9 + 24 + 24 * v14);
            swift_unknownObjectRetain();
            uint64_t result = swift_unknownObjectRelease();
            if (!*(_BYTE *)(v9 + 18)) {
              goto LABEL_29;
            }
          }

          uint64_t v15 = 0LL;
          uint64_t v16 = (uint64_t *)(v9 + 40);
          while (1)
          {
            int v18 = *v16;
            v16 += 3;
            unint64_t v17 = v18;
            unint64_t v19 = v7 - v18;
            if (__OFSUB__(v7, v18)) {
              break;
            }
            if (__OFADD__(v19, v12)) {
              goto LABEL_33;
            }
            if (v19 + v12 < 1)
            {
              __int16 v14 = v15;
              goto LABEL_12;
            }

            ++v15;
            mach_vm_size_t v7 = v19;
            if (v14 == v15)
            {
              mach_vm_size_t v7 = v19;
              goto LABEL_21;
            }
          }

          __break(1u);
LABEL_33:
          __break(1u);
LABEL_34:
          __break(1u);
LABEL_35:
          __break(1u);
          goto LABEL_36;
        }

        swift_unknownObjectRetain();
LABEL_29:
        uint64_t result = specialized Rope._UnsafeHandle.findSlot<A>(at:in:preferEnd:)( v7,  a2 & 1,  (_WORD *)(v9 + 16),  (uint64_t *)(v9 + 24));
        if (result < 0) {
          goto LABEL_37;
        }
        swift_unknownObjectRelease();
      }

      else
      {
        specialized Rope._endPath.getter(a3);
      }

      return a6;
    }
  }

    if ((v15 & 1) != 0)
    {
LABEL_13:
      *(void *)(*(void *)(v16 + 56) + 8 * v9) = a1;
LABEL_76:
      *unsigned int v4 = v16;
      return (void *)swift_bridgeObjectRelease();
    }

    if ((v15 & 1) != 0)
    {
LABEL_13:
      *(void *)(*(void *)(v16 + 56) + 8 * v9) = a1;
LABEL_76:
      *unsigned int v4 = v16;
      return (void *)swift_bridgeObjectRelease();
    }

    type metadata accessor for __SwiftDeferredNSArray();
    uint64_t v16 = v11;
    swift_unknownObjectRetain();
    if (swift_dynamicCastClass())
    {
      swift_retain();
    }

    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
    unint64_t v17 = swift_dynamicCastClass();
    if (!v17)
    {
      swift_unknownObjectRelease();
      objc_msgSend(v16, sel_copy);
      int v18 = _bridgeCocoaArray<A>(_:)();
      swift_unknownObjectRelease();
      unint64_t v17 = specialized _arrayForceCast<A, B>(_:)(v18);
      swift_bridgeObjectRelease();
    }

    *a3 = v17;

    swift_bridgeObjectRelease();
    if (!v12) {
      goto LABEL_24;
    }
LABEL_17:
    if (!a1)
    {

      return v9;
    }

    unint64_t v19 = v12;
    goto LABEL_23;
  }

  StringProtocol._ephemeralString.getter();
  unint64_t v24 = (void *)String._bridgeToObjectiveCImpl()();
  swift_bridgeObjectRelease();
  if (a4)
  {
    swift_bridgeObjectRetain();
    unint64_t v25 = (void *)_ContiguousArrayBuffer._asCocoaArray()();
  }

  else
  {
    unint64_t v25 = 0LL;
  }

  unint64_t v26 = objc_msgSend(v24, sel_completePathIntoString_caseSensitive_matchesIntoArray_filterTypes_, 0, a2 & 1, 0, v25);
  swift_unknownObjectRelease();

  return v26;
}

  __break(1u);
  return result;
}

  swift_bridgeObjectRelease();
  return v14 & 1;
}

        uint64_t v13 = 0LL;
        __int16 v14 = 0LL;
        if (v9 < 0)
        {
LABEL_24:
          mach_vm_size_t v7 = 0;
          uint64_t v5 = v13 | v14;
          uint64_t result = v9 >= v10;
          goto LABEL_25;
        }

        goto LABEL_23;
      }

      uint64_t v5 = 0LL;
      uint64_t result = 0LL;
      mach_vm_size_t v7 = 1;
    }
  }

  else
  {
    mach_vm_size_t v7 = 0;
    uint64_t result = 1LL;
  }

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

  __break(1u);
}

  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

    __break(1u);
    goto LABEL_13;
  }

  if (__OFSUB__(a2, result)) {
    goto LABEL_12;
  }
  uint64_t v11 = 0LL;
  uint64_t v13 = 0LL;
LABEL_9:
  closure #1 in static Data.== infix(_:_:)(v11, v13, a4, a5);
  if (!v5) {
    __int16 v14 = v15;
  }
  return v14 & 1;
}

  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

    unint64_t v35 = (uint64_t *)(v32 + 64);
    goto LABEL_13;
  }

  __swift_memcpy25_8((uint64_t)v27, (uint64_t)v24);
  __int16 v34 = (uint64_t *)swift_allocObject();
  v36 = v46;
  v34[5] = (uint64_t)&type metadata for _CodingKey;
  v34[6] = v36;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v34 + 2);
  __swift_memcpy25_8((uint64_t)boxed_opaque_existential_1, (uint64_t)v27);
  unint64_t v38 = *(void (**)(char *, uint64_t))(v22 + 8);
  uint64_t v31 = v48;
  swift_bridgeObjectRetain();
  v38(v24, v21);
  uint64_t v32 = v49;
  v34[7] = v49;
  unint64_t v33 = v32 >> 62;
  if (v32 >> 62)
  {
    unint64_t v39 = v50;
    if ((_DWORD)v33 != 1)
    {
      int v44 = 1LL;
LABEL_11:
      v34[8] = v44;
      swift_release();

      if ((_DWORD)v33) {
        goto LABEL_3;
      }
      goto LABEL_12;
    }

    uint64_t v40 = (uint64_t *)((v32 & 0x3FFFFFFFFFFFFFFFLL) + 32);
  }

  else
  {
    uint64_t v40 = (uint64_t *)(v32 + 64);
    unint64_t v39 = v50;
  }

  int v42 = *v40;
  uint64_t result = swift_retain();
  int v44 = v42 + 1;
  if (!__OFADD__(v42, 1LL)) {
    goto LABEL_11;
  }
  __break(1u);
  return result;
}

  _StringGuts.grow(_:)(25LL);
  swift_bridgeObjectRelease();
  type metadata accessor for NSMorphologyPronoun( 0LL,  (unint64_t *)&lazy cache variable for type metadata for NSNumber);
  v9._countAndFlagsBits = _typeName(_:qualified:)();
  String.append(_:)(v9);
  swift_bridgeObjectRelease();
  v10._countAndFlagsBits = 544175136LL;
  v10._object = (void *)0xE400000000000000LL;
  String.append(_:)(v10);
  v11._countAndFlagsBits = 1819242306LL;
  v11._object = (void *)0xE400000000000000LL;
  String.append(_:)(v11);
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

  *((void *)v14 + v13) = v9;
  ++**(void **)(a1 + 88);
LABEL_13:
  if (_decodeCharAtCursor( *(void *)(*(void *)(a1 + 8) + 8LL),  *(void *)(*(void *)(a1 + 8) + 16LL),  (void *)(a1 + 16)) != -122)
  {
    uint64_t v16 = +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"*** NSUnarchiver: inconsistency between written and read data for object %p",  v9,  v22);
LABEL_22:
    char v20 = v16;
    int v18 = (void *)MEMORY[0x189603F70];
    for (i = &NSInconsistentArchiveException; ; i = (const NSExceptionName *)MEMORY[0x189603A48])
    {
      unint64_t v19 = (const __CFString *)*i;
LABEL_25:
      objc_exception_throw((id)[v18 exceptionWithName:v19 reason:v20 userInfo:0]);
LABEL_26:
      char v20 = +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"*** value %lu too large (may have wrapped)",  v1);
      int v18 = (void *)MEMORY[0x189603F70];
    }
  }

  return v9;
}

    return 0LL;
  }

  if (object_getClass(a3) == (Class)&OBJC_CLASS___NSKeyedUnarchiver
    || [a3 containsValueForKey:@"NS.data"])
  {
    int v10 = [a3 _decodePropertyListForKey:@"NS.data"];
    objc_msgSend( a3,  "failWithError:",  +[NSError _readCorruptErrorWithFormat:]( NSError,  "_readCorruptErrorWithFormat:",  @"Decoded object is not a data"));
    goto LABEL_12;
  }

  uint64_t v11 = [a3 decodeBytesForKey:@"NS.bytes" returnedLength:&v12];

  return (id)[MEMORY[0x189603F48] _newZeroingDataWithBytes:v11 length:v12];
}

  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 16))(a2, 16LL);
  if ((v3 & 0x20) == 0)
  {
LABEL_6:
    if ((v3 & 0x40) == 0) {
      goto LABEL_7;
    }
    goto LABEL_14;
  }

    unint64_t v9 = (void *)[MEMORY[0x189603F70] exceptionWithName:*MEMORY[0x189603A58], +[NSString stringWithFormat:]( NSString, "stringWithFormat:", @"%@: bad objCType: %s", _NSMethodExceptionProem((objc_class *)self, a2), -[NSValue objCType](self, "objCType")), 0 reason userInfo];
    objc_exception_throw(v9);
    return -[NSNumber integerValue](v10, v11);
  }

  -[NSNumber doubleValue](self, "doubleValue");
  float v6 = v8 == 0.0;
  return !v6;
}

  *((_DWORD *)v8 + 10) = 1;
  return v8;
}

    char v20 = (os_log_s *)_NSFCFSEventsLog();
    if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
    {
      LOWORD(buf.f_bsize) = 0;
      _os_log_error_impl( &dword_182EB1000,  v20,  OS_LOG_TYPE_ERROR,  "NSFileCoordinator: dispatch_source_create() returned NULL, which is a surprise.",  (uint8_t *)&buf,  2u);
    }

    [v9 close];
    if ((v18 & 1) == 0) {
      return 0LL;
    }
    return v27((uint64_t)v26, a2);
  }

  if (*(_BYTE *)(*(void *)(a1[6] + 8LL) + 24LL))
  {
    *(_BYTE *)(*(void *)(a1[7] + 8LL) + 24LL) = 1;
    uint64_t v11 = 41LL;
    goto LABEL_4;
  }

  if (!fstatfs(v10, &buf) && (buf.f_flags & 0x1000) == 0)
  {
    *(_BYTE *)(*(void *)(a1[7] + 8LL) + 24LL) = 1;
    *(_BYTE *)(*(void *)(a1[8] + 8LL) + 24LL) = 1;
    [v9 close];
    return v27((uint64_t)v26, a2);
  }

  uint64_t v11 = 111LL;
LABEL_4:
  uint64_t v12 = dispatch_source_create(MEMORY[0x1895F8B88], v10, v11, *(dispatch_queue_t *)(a1[4] + 8LL));
  if (!v12)
  {
    int v18 = 1;
    goto LABEL_12;
  }

  uint64_t v13 = v12;
  __int16 v14 = *(id *)(*(void *)(a1[5] + 8LL) + 40LL);
  *(void *)&buf.f_bsize = 0LL;
  buf.f_blocks = (uint64_t)&buf;
  buf.f_bfree = 0x3052000000LL;
  buf.f_bavail = (uint64_t)__Block_byref_object_copy__66;
  buf.f_files = (uint64_t)__Block_byref_object_dispose__67;
  buf.f_ffree = 0LL;
  handler[0] = v6;
  handler[1] = 3221225472LL;
  handler[2] = __26__NSFileWatcher_watchItem__block_invoke_68;
  handler[3] = &unk_189CA58F0;
  handler[5] = v26;
  handler[6] = &buf;
  handler[4] = a2;
  dispatch_source_set_registration_handler(v13, handler);
  v23[0] = v6;
  v23[1] = 3221225472LL;
  unint64_t v23[2] = __26__NSFileWatcher_watchItem__block_invoke_2_69;
  v23[3] = &unk_189CA5918;
  v23[4] = v13;
  v23[5] = a2;
  uint64_t v15 = a1[4];
  unint64_t v24 = v10;
  v23[8] = v26;
  v23[9] = &buf;
  v23[6] = v15;
  v23[7] = a3;
  dispatch_source_set_event_handler(v13, v23);
  v22[0] = v6;
  v22[1] = 3221225472LL;
  unint64_t v22[2] = __26__NSFileWatcher_watchItem__block_invoke_70;
  v22[3] = &unk_189CA5940;
  v22[4] = v9;
  v22[5] = &buf;
  v22[6] = a1[5];
  dispatch_source_set_cancel_handler(v13, v22);
  dispatch_resume(v13);
  _Block_object_dispose(&buf, 8);
  return (uint64_t)v13;
}

void _NSXPCSerializationAddTypedObjCValuesToArray(void *a1, uint64_t a2, _BYTE *a3, SEL *a4)
{
  uint64_t v8 = _xpc_skipAttributesOfType(a3);
  int v9 = *v8;
  if (v9 <= 90)
  {
    if (v9 <= 72)
    {
      switch(*v8)
      {
        case ':':
          Name = sel_getName(*a4);
          goto LABEL_32;
        case ';':
        case '<':
        case '=':
        case '>':
        case '?':
        case 'A':
          goto LABEL_35;
        case '@':
          [a1 _encodeUnkeyedObject:*a4];
          return;
        case 'B':
          int v14 = *(unsigned __int8 *)a4;
          uint64_t v15 = a2;
          goto LABEL_34;
        case 'C':
          unint64_t v11 = *(unsigned __int8 *)a4;
          goto LABEL_22;
        default:
          if (v9 == 35)
          {
            Name = class_getName((Class)*a4);
LABEL_32:
            uint64_t v16 = (char *)Name;
            size_t v17 = strlen(Name);
            _NSXPCSerializationAddASCIIString(a2, v16, v17, 1);
          }

          else
          {
            if (v9 != 42) {
              goto LABEL_35;
            }
            uint64_t v12 = *a4;
            if (v12)
            {
              _NSXPCSerializationAddBool(a2, 0);
              unint64_t v13 = strlen(v12) + 1;
              _NSXPCSerializationAddRawData(a2, v12, v13);
            }

            else
            {
              uint64_t v15 = a2;
              int v14 = 1;
LABEL_34:
              _NSXPCSerializationAddBool(v15, v14);
            }
          }

          break;
      }

      return;
    }

    if (v9 > 80)
    {
      if (v9 != 81)
      {
        if (v9 != 83)
        {
LABEL_35:
          int v18 = +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"encodeDataAt:ofObjCType: unencodable type (%s)",  a3);
          objc_exception_throw((id)[MEMORY[0x189603F70] exceptionWithName:*MEMORY[0x189603A60] reason:v18 userInfo:0]);
          _NSXPCSerializationAddNull();
          return;
        }

        unint64_t v11 = *(unsigned __int16 *)a4;
LABEL_22:
        _NSXPCSerializationAddInteger(a2, v11);
        return;
      }
    }

    else
    {
      if (v9 == 73)
      {
        unint64_t v11 = *(unsigned int *)a4;
        goto LABEL_22;
      }

      if (v9 != 76) {
        goto LABEL_35;
      }
    }

LABEL_21:
    unint64_t v11 = (unint64_t)*a4;
    goto LABEL_22;
  }

  switch(*v8)
  {
    case 'c':
      unint64_t v11 = *(char *)a4;
      goto LABEL_22;
    case 'd':
      _NSXPCSerializationAddDouble(a2, *(double *)a4);
      break;
    case 'e':
    case 'g':
    case 'h':
    case 'j':
    case 'k':
    case 'm':
    case 'n':
    case 'o':
    case 'p':
    case 'r':
      goto LABEL_35;
    case 'f':
      _NSXPCSerializationAddFloat(a2, *(float *)a4);
      break;
    case 'i':
      unint64_t v11 = *(int *)a4;
      goto LABEL_22;
    case 'l':
    case 'q':
      goto LABEL_21;
    case 's':
      unint64_t v11 = *(__int16 *)a4;
      goto LABEL_22;
    default:
      if (v9 != 91 && v9 != 123) {
        goto LABEL_35;
      }
      _xpc_walkDataStructure((int)a1, a2, 0, v8, (int)a3, (int)a4, -1, 1, 0LL, 0LL, 0LL, 0LL);
      break;
  }

  swift_bridgeObjectRelease();
  return v22;
}

  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)((uint64_t)v55, v7);
  swift_bridgeObjectRelease();
LABEL_22:
  int v10 = v43;
  int v9 = v44;
  uint64_t v12 = v45;
  unint64_t v11 = v46;
  unint64_t v13 = v47;
  if (v43)
  {
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0LL);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( (unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef,  (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef,  (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
    int v14 = v9;
    uint64_t v15 = v12;
    uint64_t v16 = v11;
    size_t v17 = v13;
    int v18 = v10;
    _CFObject.hash(into:)();
    if (v9) {
      goto LABEL_24;
    }
  }

  else
  {
    Hasher._combine(_:)(0);
    unsigned __int8 v23 = v13;
    unint64_t v24 = v9;
    unint64_t v25 = v12;
    unint64_t v26 = v11;
    if (v9)
    {
LABEL_24:
      Hasher._combine(_:)(1u);
      type metadata accessor for CFDictionaryRef(0LL);
      lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( (unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef,  (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef,  (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
      unint64_t v19 = v9;
      _CFObject.hash(into:)();

      if (v12) {
        goto LABEL_25;
      }
      goto LABEL_30;
    }
  }

  Hasher._combine(_:)(0);
  if (v12)
  {
LABEL_25:
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0LL);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( (unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef,  (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef,  (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
    char v20 = v12;
    _CFObject.hash(into:)();

    if (v11) {
      goto LABEL_26;
    }
LABEL_31:
    Hasher._combine(_:)(0);
    if (v13) {
      goto LABEL_27;
    }
    goto LABEL_32;
  }

  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)((uint64_t)v55, v7);
  swift_bridgeObjectRelease();
LABEL_22:
  int v10 = v43;
  int v9 = v44;
  uint64_t v12 = v45;
  unint64_t v11 = v46;
  unint64_t v13 = v47;
  if (v43)
  {
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0LL);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( (unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef,  (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef,  (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
    int v14 = v9;
    uint64_t v15 = v12;
    uint64_t v16 = v11;
    size_t v17 = v13;
    int v18 = v10;
    _CFObject.hash(into:)();
    if (v9) {
      goto LABEL_24;
    }
  }

  else
  {
    Hasher._combine(_:)(0);
    unsigned __int8 v23 = v13;
    unint64_t v24 = v9;
    unint64_t v25 = v12;
    unint64_t v26 = v11;
    if (v9)
    {
LABEL_24:
      Hasher._combine(_:)(1u);
      type metadata accessor for CFDictionaryRef(0LL);
      lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( (unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef,  (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef,  (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
      unint64_t v19 = v9;
      _CFObject.hash(into:)();

      if (v12) {
        goto LABEL_25;
      }
      goto LABEL_30;
    }
  }

  Hasher._combine(_:)(0);
  if (v12)
  {
LABEL_25:
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0LL);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( (unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef,  (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef,  (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
    char v20 = v12;
    _CFObject.hash(into:)();

    if (v11) {
      goto LABEL_26;
    }
LABEL_31:
    Hasher._combine(_:)(0);
    if (v13) {
      goto LABEL_27;
    }
    goto LABEL_32;
  }

  unint64_t v24 = (uint64_t)v104;
  if (!*((void *)&v124 + 1))
  {
    v70 = v5;
    v71 = v12;
    if (v104)
    {
      outlined init with take of LocalePreferences?( (uint64_t)v134,  (uint64_t)v96,  (uint64_t *)&demangling cache variable for type metadata for LocalePreferences?);
      outlined init with take of LocalePreferences?( (uint64_t)v134,  (uint64_t)v98,  (uint64_t *)&demangling cache variable for type metadata for LocalePreferences?);
      outlined retain of LocalePreferences(v98);
      __int16 v34 = v96;
LABEL_42:
      outlined retain of LocalePreferences(v34);
      goto LABEL_43;
    }

        unint64_t v11 = (v18 - 1) & v18;
        uint64_t v16 = __clz(__rbit64(v18)) + (v8 << 6);
      }

      char v20 = *(unsigned __int8 *)(*(void *)(v5 + 48) + v16);
      unint64_t v21 = *(void *)(*(void *)(v5 + 56) + 8 * v16);
      Hasher.init(_seed:)();
      Hasher._combine(_:)(v20);
      uint64_t result = Hasher._finalize()();
      unint64_t v22 = -1LL << *(_BYTE *)(v7 + 32);
      unsigned __int8 v23 = result & ~v22;
      unint64_t v24 = v23 >> 6;
      if (((-1LL << v23) & ~*(void *)(v13 + 8 * (v23 >> 6))) != 0)
      {
        int v14 = __clz(__rbit64((-1LL << v23) & ~*(void *)(v13 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0LL;
      }

      else
      {
        unint64_t v25 = 0;
        unint64_t v26 = (unint64_t)(63 - v22) >> 6;
        do
        {
          if (++v24 == v26 && (v25 & 1) != 0)
          {
            __break(1u);
            goto LABEL_39;
          }

          uint64_t v27 = v24 == v26;
          if (v24 == v26) {
            unint64_t v24 = 0LL;
          }
          v25 |= v27;
          uint64_t v28 = *(void *)(v13 + 8 * v24);
        }

        while (v28 == -1);
        int v14 = __clz(__rbit64(~v28)) + (v24 << 6);
      }

      *(void *)(v13 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v14;
      *(_BYTE *)(*(void *)(v7 + 48) + v14) = v20;
      *(void *)(*(void *)(v7 + 56) + 8 * v14) = v21;
      ++*(void *)(v7 + 16);
    }
  }

  uint64_t result = swift_release();
LABEL_38:
  const void *v3 = v7;
  return result;
}

        int v10 = (v19 - 1) & v19;
        size_t v17 = __clz(__rbit64(v19)) + (v13 << 6);
      }

      unint64_t v21 = (uint64_t *)(*(void *)(v5 + 48) + 16 * v17);
      unsigned __int8 v23 = *v21;
      unint64_t v22 = v21[1];
      unint64_t v24 = (_OWORD *)(*(void *)(v5 + 56) + 32 * v17);
      if ((a2 & 1) != 0)
      {
        outlined init with take of Any(v24, v35);
      }

      else
      {
        outlined init with copy of Any((uint64_t)v24, (uint64_t)v35);
        swift_bridgeObjectRetain();
      }

      Hasher.init(_seed:)();
      String.hash(into:)();
      uint64_t result = Hasher._finalize()();
      unint64_t v25 = -1LL << *(_BYTE *)(v7 + 32);
      unint64_t v26 = result & ~v25;
      uint64_t v27 = v26 >> 6;
      if (((-1LL << v26) & ~*(void *)(v11 + 8 * (v26 >> 6))) != 0)
      {
        int v14 = __clz(__rbit64((-1LL << v26) & ~*(void *)(v11 + 8 * (v26 >> 6)))) | v26 & 0x7FFFFFFFFFFFFFC0LL;
      }

      else
      {
        uint64_t v28 = 0;
        id v29 = (unint64_t)(63 - v25) >> 6;
        do
        {
          if (++v27 == v29 && (v28 & 1) != 0)
          {
            __break(1u);
            goto LABEL_40;
          }

          uint64_t v30 = v27 == v29;
          if (v27 == v29) {
            uint64_t v27 = 0LL;
          }
          v28 |= v30;
          uint64_t v31 = *(void *)(v11 + 8 * v27);
        }

        while (v31 == -1);
        int v14 = __clz(__rbit64(~v31)) + (v27 << 6);
      }

      *(void *)(v11 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v14;
      uint64_t v15 = (void *)(*(void *)(v7 + 48) + 16 * v14);
      *uint64_t v15 = v23;
      v15[1] = v22;
      uint64_t result = (uint64_t)outlined init with take of Any(v35, (_OWORD *)(*(void *)(v7 + 56) + 32 * v14));
      ++*(void *)(v7 + 16);
    }
  }

  uint64_t result = swift_release();
  const void *v3 = v7;
  return result;
}

        uint64_t v12 = (v20 - 1) & v20;
        int v18 = __clz(__rbit64(v20)) + (v8 << 6);
      }

      unint64_t v22 = 8 * v18;
      unsigned __int8 v23 = *(void *)(*(void *)(v5 + 48) + v22);
      unint64_t v24 = *(void *)(*(void *)(v5 + 56) + v22);
      uint64_t result = static Hasher._hash(seed:_:)();
      unint64_t v25 = -1LL << *(_BYTE *)(v7 + 32);
      unint64_t v26 = result & ~v25;
      uint64_t v27 = v26 >> 6;
      if (((-1LL << v26) & ~*(void *)(v14 + 8 * (v26 >> 6))) != 0)
      {
        uint64_t v15 = __clz(__rbit64((-1LL << v26) & ~*(void *)(v14 + 8 * (v26 >> 6)))) | v26 & 0x7FFFFFFFFFFFFFC0LL;
      }

      else
      {
        uint64_t v28 = 0;
        id v29 = (unint64_t)(63 - v25) >> 6;
        do
        {
          if (++v27 == v29 && (v28 & 1) != 0)
          {
            __break(1u);
            goto LABEL_39;
          }

          uint64_t v30 = v27 == v29;
          if (v27 == v29) {
            uint64_t v27 = 0LL;
          }
          v28 |= v30;
          uint64_t v31 = *(void *)(v14 + 8 * v27);
        }

        while (v31 == -1);
        uint64_t v15 = __clz(__rbit64(~v31)) + (v27 << 6);
      }

      *(void *)(v14 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v15;
      uint64_t v16 = 8 * v15;
      *(void *)(*(void *)(v7 + 48) + v16) = v23;
      *(void *)(*(void *)(v7 + 56) + v16) = v24;
      ++*(void *)(v7 + 16);
    }
  }

  uint64_t result = swift_release();
LABEL_38:
  const void *v3 = v7;
  return result;
}

    int v10 = (v24 - 1) & v24;
    unint64_t v21 = __clz(__rbit64(v24)) + (v13 << 6);
LABEL_22:
    unint64_t v26 = (uint64_t *)(*(void *)(v5 + 48) + 16 * v21);
    uint64_t v28 = *v26;
    uint64_t v27 = v26[1];
    id v29 = *(void *)(v5 + 56) + 72 * v21;
    if ((v44 & 1) != 0)
    {
      unint64_t v45 = *(_OWORD *)v29;
      uint64_t v30 = *(_OWORD *)(v29 + 16);
      uint64_t v31 = *(_OWORD *)(v29 + 32);
      uint64_t v32 = *(_OWORD *)(v29 + 48);
      unint64_t v49 = *(void *)(v29 + 64);
      unint64_t v47 = v31;
      unint64_t v48 = v32;
      unint64_t v46 = v30;
    }

    else
    {
      outlined init with copy of AttributedString._AttributeValue(v29, (uint64_t)&v45);
      swift_bridgeObjectRetain();
    }

    Hasher.init(_seed:)();
    String.hash(into:)();
    uint64_t result = Hasher._finalize()();
    unint64_t v33 = -1LL << *(_BYTE *)(v7 + 32);
    __int16 v34 = result & ~v33;
    unint64_t v35 = v34 >> 6;
    if (((-1LL << v34) & ~*(void *)(v11 + 8 * (v34 >> 6))) != 0)
    {
      int v14 = __clz(__rbit64((-1LL << v34) & ~*(void *)(v11 + 8 * (v34 >> 6)))) | v34 & 0x7FFFFFFFFFFFFFC0LL;
    }

    else
    {
      v36 = 0;
      unint64_t v37 = (unint64_t)(63 - v33) >> 6;
      do
      {
        if (++v35 == v37 && (v36 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }

        unint64_t v38 = v35 == v37;
        if (v35 == v37) {
          unint64_t v35 = 0LL;
        }
        v36 |= v38;
        unint64_t v39 = *(void *)(v11 + 8 * v35);
      }

      while (v39 == -1);
      int v14 = __clz(__rbit64(~v39)) + (v35 << 6);
    }

    *(void *)(v11 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v14;
    uint64_t v15 = (void *)(*(void *)(v7 + 48) + 16 * v14);
    *uint64_t v15 = v28;
    v15[1] = v27;
    uint64_t v16 = *(void *)(v7 + 56) + 72 * v14;
    *(_OWORD *)uint64_t v16 = v45;
    size_t v17 = v46;
    int v18 = v47;
    unint64_t v19 = v48;
    *(void *)(v16 + 64) = v49;
    *(_OWORD *)(v16 + 32) = v18;
    *(_OWORD *)(v16 + 4_Block_object_dispose((const void *)(v11 - 240), 8) = v19;
    *(_OWORD *)(v16 + 16) = v17;
    ++*(void *)(v7 + 16);
  }

  swift_release();
  int v3 = v41;
  unsigned __int8 v23 = (void *)(v5 + 64);
  if ((v44 & 1) == 0) {
    goto LABEL_41;
  }
LABEL_37:
  uint64_t v40 = 1LL << *(_BYTE *)(v5 + 32);
  if (v40 >= 64) {
    bzero(v23, ((unint64_t)(v40 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8LL);
  }
  else {
    *unsigned __int8 v23 = -1LL << v40;
  }
  *(void *)(v5 + 16) = 0LL;
LABEL_41:
  uint64_t result = swift_release();
  const void *v3 = v7;
  return result;
}

    int v14 = (v23 - 1) & v23;
    char v20 = __clz(__rbit64(v23)) + (v17 << 6);
LABEL_22:
    unint64_t v25 = *(void *)(v39 + 72);
    unint64_t v26 = *(void *)(v8 + 48) + v25 * v20;
    if ((v40 & 1) != 0)
    {
      outlined init with take of ICUNumberFormatter.Signature( v26,  (uint64_t)v7,  type metadata accessor for ICULegacyNumberFormatter.Signature);
      uint64_t v27 = *(void *)(*(void *)(v8 + 56) + 8 * v20);
    }

    else
    {
      outlined init with copy of ICUNumberFormatter.Signature( v26,  (uint64_t)v7,  type metadata accessor for ICULegacyNumberFormatter.Signature);
      uint64_t v27 = *(void *)(*(void *)(v8 + 56) + 8 * v20);
      swift_retain();
    }

    Hasher.init(_seed:)();
    ICULegacyNumberFormatter.Signature.hash(into:)();
    uint64_t result = Hasher._finalize()();
    uint64_t v28 = -1LL << *(_BYTE *)(v10 + 32);
    id v29 = result & ~v28;
    uint64_t v30 = v29 >> 6;
    if (((-1LL << v29) & ~*(void *)(v15 + 8 * (v29 >> 6))) != 0)
    {
      int v18 = __clz(__rbit64((-1LL << v29) & ~*(void *)(v15 + 8 * (v29 >> 6)))) | v29 & 0x7FFFFFFFFFFFFFC0LL;
    }

    else
    {
      uint64_t v31 = 0;
      uint64_t v32 = (unint64_t)(63 - v28) >> 6;
      do
      {
        if (++v30 == v32 && (v31 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }

        unint64_t v33 = v30 == v32;
        if (v30 == v32) {
          uint64_t v30 = 0LL;
        }
        v31 |= v33;
        __int16 v34 = *(void *)(v15 + 8 * v30);
      }

      while (v34 == -1);
      int v18 = __clz(__rbit64(~v34)) + (v30 << 6);
    }

    *(void *)(v15 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v18;
    uint64_t result = outlined init with take of ICUNumberFormatter.Signature( (uint64_t)v7,  *(void *)(v10 + 48) + v25 * v18,  type metadata accessor for ICULegacyNumberFormatter.Signature);
    *(void *)(*(void *)(v10 + 56) + 8 * v1_Block_object_dispose((const void *)(v11 - 240), 8) = v27;
    ++*(void *)(v10 + 16);
  }

  swift_release();
  int v3 = v36;
  unint64_t v22 = v38;
  if ((v40 & 1) == 0) {
    goto LABEL_41;
  }
LABEL_37:
  unint64_t v35 = 1LL << *(_BYTE *)(v8 + 32);
  if (v35 >= 64) {
    bzero(v22, ((unint64_t)(v35 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8LL);
  }
  else {
    *unint64_t v22 = -1LL << v35;
  }
  *(void *)(v8 + 16) = 0LL;
LABEL_41:
  uint64_t result = swift_release();
  const void *v3 = v10;
  return result;
}

    v124 = (v27 - 1) & v27;
    unint64_t v25 = __clz(__rbit64(v27)) + (v13 << 6);
  }

  v125 = v13;
  id v29 = *(void *)(v6 + 48) + 176 * v25;
  if ((a2 & 1) != 0)
  {
    uint64_t v31 = *(void *)v29;
    uint64_t v30 = *(void *)(v29 + 8);
    uint64_t v32 = *(void *)(v29 + 16);
    unint64_t v33 = *(void *)(v29 + 24);
    outlined init with take of LocalePreferences?( v29 + 32,  (uint64_t)&v146,  (uint64_t *)&demangling cache variable for type metadata for LocalePreferences?);
    v123 = *(void *)(*(void *)(v6 + 56) + 8 * v25);
    __int16 v34 = &v146;
  }

  else
  {
    unint64_t v35 = *(_OWORD *)(v29 + 48);
    v36 = *(_OWORD *)(v29 + 64);
    unint64_t v37 = *(_OWORD *)(v29 + 96);
    v151 = *(_OWORD *)(v29 + 80);
    v152 = v37;
    v149 = v35;
    v150 = v36;
    unint64_t v38 = *(_OWORD *)(v29 + 112);
    unint64_t v39 = *(_OWORD *)(v29 + 128);
    uint64_t v40 = *(_OWORD *)(v29 + 144);
    *(_OWORD *)((char *)v155 + 12) = *(_OWORD *)(v29 + 156);
    v154 = v39;
    v155[0] = v40;
    v153 = v38;
    int v42 = *(_OWORD *)(v29 + 16);
    unint64_t v41 = *(_OWORD *)(v29 + 32);
    v146 = *(_OWORD *)v29;
    v147 = v42;
    v148 = v41;
    unint64_t v43 = *(void *)(*(void *)(v6 + 56) + 8 * v25);
    unint64_t v33 = *((void *)&v42 + 1);
    uint64_t v32 = v42;
    uint64_t v30 = *((void *)&v146 + 1);
    uint64_t v31 = v146;
    outlined retain of ICUByteCountNumberFormatter.Signature((uint64_t)&v146);
    v123 = v43;
    swift_retain();
    __int16 v34 = &v148;
  }

  outlined init with take of LocalePreferences?( (uint64_t)v34,  (uint64_t)v156,  (uint64_t *)&demangling cache variable for type metadata for LocalePreferences?);
  Hasher.init(_seed:)();
  swift_bridgeObjectRetain();
  v122 = v31;
  String.hash(into:)();
  v121 = v30;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  outlined init with take of LocalePreferences?( (uint64_t)v156,  (uint64_t)v145,  (uint64_t *)&demangling cache variable for type metadata for LocalePreferences?);
  int v44 = v33;
  v126 = v32;
  if (_s10Foundation17LocalePreferencesVSgWOg((uint64_t)v145) == 1)
  {
    Hasher._combine(_:)(0);
    goto LABEL_121;
  }

  outlined init with take of LocalePreferences?( (uint64_t)v156,  (uint64_t)&v146,  (uint64_t *)&demangling cache variable for type metadata for LocalePreferences?);
  Hasher._combine(_:)(1u);
  if (v146 == 2)
  {
    unint64_t v45 = 0;
  }

  else
  {
    unint64_t v45 = v146 & 1;
    Hasher._combine(_:)(1u);
  }

  Hasher._combine(_:)(v45);
  unint64_t v46 = *((void *)&v146 + 1);
  if (!*((void *)&v146 + 1))
  {
    Hasher._combine(_:)(0);
    outlined retain of LocalePreferences(&v146);
    unint64_t v49 = &v146;
    goto LABEL_39;
  }

  Hasher._combine(_:)(1u);
  Hasher._combine(_:)(*(void *)(v46 + 16));
  unint64_t v47 = *(void *)(v46 + 16);
  if (!v47)
  {
    outlined init with take of LocalePreferences?( (uint64_t)v156,  (uint64_t)&v135,  (uint64_t *)&demangling cache variable for type metadata for LocalePreferences?);
    outlined retain of LocalePreferences?( (uint64_t)v156,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined copy of LocalePreferences?);
    unint64_t v49 = &v135;
LABEL_39:
    outlined retain of LocalePreferences(v49);
    if (!*((void *)&v147 + 1)) {
      goto LABEL_35;
    }
LABEL_40:
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    if (!*((void *)&v148 + 1)) {
      goto LABEL_36;
    }
LABEL_41:
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    goto LABEL_42;
  }

  outlined retain of LocalePreferences?( (uint64_t)v156,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined copy of LocalePreferences?);
  outlined retain of LocalePreferences?( (uint64_t)v156,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined copy of LocalePreferences?);
  swift_bridgeObjectRetain();
  unint64_t v48 = v46 + 40;
  do
  {
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    v48 += 16LL;
    --v47;
  }

  while (v47);
  swift_bridgeObjectRelease();
  if (*((void *)&v147 + 1)) {
    goto LABEL_40;
  }
LABEL_35:
  Hasher._combine(_:)(0);
  if (*((void *)&v148 + 1)) {
    goto LABEL_41;
  }
LABEL_36:
  Hasher._combine(_:)(0);
LABEL_42:
  unint64_t v50 = v149;
  v120 = v33;
  if ((void)v149)
  {
    Hasher._combine(_:)(1u);
    v51 = 0LL;
    id v52 = 0LL;
    uint64_t v53 = v50 + 64;
    v54 = 1LL << *(_BYTE *)(v50 + 32);
    if (v54 < 64) {
      v55 = ~(-1LL << v54);
    }
    else {
      v55 = -1LL;
    }
    v56 = v55 & *(void *)(v50 + 64);
    v57 = (unint64_t)(v54 + 63) >> 6;
    v131 = v141;
    v133 = v140;
    v127 = v143;
    v129 = v142;
    unint64_t v58 = v144;
    while (1)
    {
      if (v56)
      {
        int v59 = __clz(__rbit64(v56));
        v56 &= v56 - 1;
        uint64_t v60 = v59 | (v52 << 6);
      }

      else
      {
        v63 = v52 + 1;
        if (__OFADD__(v52, 1LL))
        {
LABEL_136:
          __break(1u);
LABEL_137:
          __break(1u);
          goto LABEL_138;
        }

        if (v63 >= v57) {
          goto LABEL_64;
        }
        v64 = *(void *)(v53 + 8 * v63);
        ++v52;
        if (!v64)
        {
          id v52 = v63 + 1;
          if (v63 + 1 >= v57) {
            goto LABEL_64;
          }
          v64 = *(void *)(v53 + 8 * v52);
          if (!v64)
          {
            id v52 = v63 + 2;
            if (v63 + 2 >= v57) {
              goto LABEL_64;
            }
            v64 = *(void *)(v53 + 8 * v52);
            if (!v64)
            {
              v65 = v63 + 3;
              if (v65 >= v57)
              {
LABEL_64:
                swift_bridgeObjectRetain();
                Hasher._combine(_:)(v51);
                swift_bridgeObjectRelease();
                v66 = *((void *)&v149 + 1);
                if (*((void *)&v149 + 1)) {
                  goto LABEL_65;
                }
LABEL_88:
                Hasher._combine(_:)(0);
LABEL_89:
                v82 = v150;
                v83 = v151;
                v84 = (void *)v152;
                if ((void)v150)
                {
                  Hasher._combine(_:)(1u);
                  type metadata accessor for CFDictionaryRef(0LL);
                  lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( (unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef,  (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef,  (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
                  v85 = *((id *)&v82 + 1);
                  v86 = (id)v83;
                  v87 = *((id *)&v83 + 1);
                  v88 = v84;
                  v89 = (id)v82;
                  _CFObject.hash(into:)();
                  if (*((void *)&v82 + 1)) {
                    goto LABEL_91;
                  }
LABEL_96:
                  Hasher._combine(_:)(0);
                  if (!(void)v83) {
                    goto LABEL_97;
                  }
LABEL_92:
                  Hasher._combine(_:)(1u);
                  type metadata accessor for CFDictionaryRef(0LL);
                  lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( (unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef,  (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef,  (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
                  v91 = (id)v83;
                  _CFObject.hash(into:)();

                  if (*((void *)&v83 + 1)) {
                    goto LABEL_93;
                  }
LABEL_98:
                  Hasher._combine(_:)(0);
                  if (!v84) {
                    goto LABEL_99;
                  }
LABEL_94:
                  Hasher._combine(_:)(1u);
                  type metadata accessor for CFDictionaryRef(0LL);
                  lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( (unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef,  (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef,  (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
                  v93 = v84;
                  _CFObject.hash(into:)();
                }

                else
                {
                  Hasher._combine(_:)(0);
                  v94 = v84;
                  v95 = *((id *)&v82 + 1);
                  v96 = (id)v83;
                  v97 = *((id *)&v83 + 1);
                  if (!*((void *)&v82 + 1)) {
                    goto LABEL_96;
                  }
LABEL_91:
                  Hasher._combine(_:)(1u);
                  type metadata accessor for CFDictionaryRef(0LL);
                  lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( (unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef,  (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef,  (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
                  v90 = *((id *)&v82 + 1);
                  _CFObject.hash(into:)();

                  if ((void)v83) {
                    goto LABEL_92;
                  }
LABEL_97:
                  Hasher._combine(_:)(0);
                  if (!*((void *)&v83 + 1)) {
                    goto LABEL_98;
                  }
LABEL_93:
                  Hasher._combine(_:)(1u);
                  type metadata accessor for CFDictionaryRef(0LL);
                  lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( (unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef,  (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef,  (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
                  v92 = *((id *)&v83 + 1);
                  _CFObject.hash(into:)();

                  if (v84) {
                    goto LABEL_94;
                  }
LABEL_99:
                  Hasher._combine(_:)(0);
                  v93 = 0LL;
                }

                int v44 = v120;

                v98 = *((void *)&v152 + 1);
                if (v98)
                {
                  Hasher._combine(_:)(1u);
                  swift_bridgeObjectRetain();
                  specialized Dictionary<>.hash(into:)((uint64_t)&v140, v98);
                  swift_bridgeObjectRelease();
                }

                else
                {
                  Hasher._combine(_:)(0);
                }

                v99 = v153;
                if ((void)v153)
                {
                  Hasher._combine(_:)(1u);
                  swift_bridgeObjectRetain();
                  specialized Dictionary<>.hash(into:)((uint64_t)&v140, v99);
                  swift_bridgeObjectRelease();
                  if ((void)v154) {
                    goto LABEL_105;
                  }
LABEL_107:
                  Hasher._combine(_:)(0);
                }

                else
                {
                  Hasher._combine(_:)(0);
                  if (!(void)v154) {
                    goto LABEL_107;
                  }
LABEL_105:
                  Hasher._combine(_:)(1u);
                  swift_bridgeObjectRetain();
                  String.hash(into:)();
                  swift_bridgeObjectRelease();
                }

                if (BYTE8(v154) == 2)
                {
                  Hasher._combine(_:)(0);
                }

                else
                {
                  v100 = BYTE8(v154) & 1;
                  Hasher._combine(_:)(1u);
                  Hasher._combine(_:)(v100);
                }

                if (BYTE9(v154) == 2)
                {
                  Hasher._combine(_:)(0);
                }

                else
                {
                  v101 = BYTE9(v154) & 1;
                  Hasher._combine(_:)(1u);
                  Hasher._combine(_:)(v101);
                }

                if (BYTE10(v154) == 2)
                {
                  v102 = 0;
                }

                else
                {
                  v102 = BYTE10(v154) & 1;
                  Hasher._combine(_:)(1u);
                }

                Hasher._combine(_:)(v102);
                if (BYTE11(v154) == 2)
                {
                  v103 = 0;
                }

                else
                {
                  v104 = BYTE11(v154) & 1;
                  Hasher._combine(_:)(1u);
                  v103 = v104;
                }

                Hasher._combine(_:)(v103);
                outlined retain of LocalePreferences?( (uint64_t)v156,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined consume of LocalePreferences?);
                outlined retain of LocalePreferences?( (uint64_t)v156,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined consume of LocalePreferences?);
                uint64_t v8 = v117;
                float v6 = v118;
                a2 = v116;
LABEL_121:
                v105 = Hasher._finalize()();
                v106 = -1LL << *(_BYTE *)(v8 + 32);
                v107 = v105 & ~v106;
                v108 = v107 >> 6;
                if (((-1LL << v107) & ~*(void *)(v12 + 8 * (v107 >> 6))) != 0)
                {
                  int v14 = __clz(__rbit64((-1LL << v107) & ~*(void *)(v12 + 8 * (v107 >> 6)))) | v107 & 0x7FFFFFFFFFFFFFC0LL;
                  uint64_t v15 = v126;
                }

                else
                {
                  v109 = 0;
                  v110 = (unint64_t)(63 - v106) >> 6;
                  uint64_t v15 = v126;
                  do
                  {
                    if (++v108 == v110 && (v109 & 1) != 0)
                    {
                      __break(1u);
                      goto LABEL_136;
                    }

                    v111 = v108 == v110;
                    if (v108 == v110) {
                      v108 = 0LL;
                    }
                    v109 |= v111;
                    v112 = *(void *)(v12 + 8 * v108);
                  }

                  while (v112 == -1);
                  int v14 = __clz(__rbit64(~v112)) + (v108 << 6);
                }

                *(void *)&v146 = v122;
                *((void *)&v146 + 1) = v121;
                *(void *)&v147 = v15;
                *((void *)&v147 + 1) = v44;
                outlined init with take of LocalePreferences?( (uint64_t)v156,  (uint64_t)&v148,  (uint64_t *)&demangling cache variable for type metadata for LocalePreferences?);
                *(void *)(v12 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v14;
                uint64_t v16 = (_OWORD *)(*(void *)(v8 + 48) + 176 * v14);
                int v18 = v147;
                size_t v17 = v148;
                *uint64_t v16 = v146;
                v16[1] = v18;
                unint64_t v16[2] = v17;
                unint64_t v19 = v152;
                unint64_t v21 = v149;
                char v20 = v150;
                v16[5] = v151;
                v16[6] = v19;
                v16[3] = v21;
                v16[4] = v20;
                unint64_t v22 = v153;
                unsigned __int8 v23 = v154;
                unint64_t v24 = v155[0];
                *(_OWORD *)((char *)v16 + 156) = *(_OWORD *)((char *)v155 + 12);
                v16[8] = v23;
                v16[9] = v24;
                v16[7] = v22;
                *(void *)(*(void *)(v8 + 56) + 8 * v14) = v123;
                ++*(void *)(v8 + 16);
                unint64_t v11 = v124;
                unint64_t v13 = v125;
                goto LABEL_8;
              }

              v64 = *(void *)(v53 + 8 * v65);
              if (!v64)
              {
                while (1)
                {
                  id v52 = v65 + 1;
                  if (__OFADD__(v65, 1LL)) {
                    break;
                  }
                  if (v52 >= v57) {
                    goto LABEL_64;
                  }
                  v64 = *(void *)(v53 + 8 * v52);
                  ++v65;
                  if (v64) {
                    goto LABEL_63;
                  }
                }

      v133 = (v26 - 1) & v26;
      unint64_t v24 = __clz(__rbit64(v26)) + (v21 << 6);
    }

    uint64_t v28 = *(void *)(v128 + 72);
    id v29 = *(void *)(v13 + 48) + v28 * v24;
    v134 = v21;
    v132 = v28;
    if ((v130 & 1) != 0)
    {
      outlined init with take of ICUNumberFormatter.Signature( v29,  (uint64_t)v12,  type metadata accessor for ICUCurrencyNumberFormatter.Signature);
      v131 = *(void *)(*(void *)(v13 + 56) + 8 * v24);
    }

    else
    {
      outlined init with copy of ICUNumberFormatter.Signature( v29,  (uint64_t)v12,  type metadata accessor for ICUCurrencyNumberFormatter.Signature);
      v131 = *(void *)(*(void *)(v13 + 56) + 8 * v24);
      swift_retain();
    }

    Hasher.init(_seed:)();
    v163 = v168;
    v164 = v169;
    v165 = v170;
    v161 = v166;
    v162 = v167;
    if (v12[8] == 1)
    {
      Hasher._combine(_:)(0);
    }

    else
    {
      uint64_t v30 = *(void *)v12;
      Hasher._combine(_:)(1u);
      if ((v30 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
        uint64_t v31 = v30;
      }
      else {
        uint64_t v31 = 0LL;
      }
      Hasher._combine(_:)(v31);
    }

    outlined init with take of LocalePreferences?( (uint64_t)v126,  (uint64_t)v171,  &demangling cache variable for type metadata for NumberFormatStyleConfiguration.Precision?);
    specialized Optional<A>.hash(into:)();
    uint64_t v32 = v12[73];
    if (v32 == 2)
    {
      Hasher._combine(_:)(0);
    }

    else
    {
      unint64_t v33 = v32 & 1;
      Hasher._combine(_:)(1u);
      __int16 v34 = v33;
      uint64_t v12 = v135;
      Hasher._combine(_:)(v34);
    }

    unint64_t v35 = *(unsigned int *)(v12 + 74);
    if (*(_DWORD *)(v12 + 74) == 2)
    {
      LOBYTE(v36) = 0;
    }

    else
    {
      Hasher._combine(_:)(1u);
      uint64_t v12 = v135;
      Hasher._combine(_:)(v35 & 1);
      Hasher._combine(_:)((v35 >> 8) & 1);
      Hasher._combine(_:)(WORD1(v35) & 1);
      v36 = BYTE3(v35) & 1;
    }

    Hasher._combine(_:)(v36);
    unint64_t v37 = v12[78];
    if (v37 == 2)
    {
      Hasher._combine(_:)(0);
    }

    else
    {
      unint64_t v38 = v37 & 1;
      Hasher._combine(_:)(1u);
      Hasher._combine(_:)(v38);
    }

    unint64_t v39 = (uint64_t)v127;
    uint64_t v40 = (int *)type metadata accessor for CurrencyFormatStyleConfiguration.Collection(0LL);
    outlined init with copy of FloatingPointRoundingRule?((uint64_t)&v135[v40[9]], v39);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v39, 1LL, v5) == 1)
    {
      Hasher._combine(_:)(0);
    }

    else
    {
      unint64_t v41 = v124;
      (*(void (**)(char *, uint64_t, uint64_t))(v6 + 32))(v124, v39, v5);
      Hasher._combine(_:)(1u);
      dispatch thunk of Hashable.hash(into:)();
      (*(void (**)(char *, uint64_t))(v6 + 8))(v41, v5);
    }

    int v42 = &v135[v40[10]];
    unint64_t v43 = v42[8];
    if (v43 == 255)
    {
      Hasher._combine(_:)(0);
    }

    else
    {
      int v44 = *(void *)v42;
      Hasher._combine(_:)(1u);
      if ((v43 & 1) != 0)
      {
        Hasher._combine(_:)(1uLL);
        if ((v44 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
          unint64_t v45 = v44;
        }
        else {
          unint64_t v45 = 0LL;
        }
        Hasher._combine(_:)(v45);
      }

      else
      {
        Hasher._combine(_:)(0LL);
        Hasher._combine(_:)(v44);
      }

      float v6 = v125;
    }

    unint64_t v46 = v135;
    Hasher._combine(_:)(v135[v40[11]]);
    unint64_t v47 = v46[v40[12]];
    if (v47 == 3)
    {
      Hasher._combine(_:)(0);
    }

    else
    {
      Hasher._combine(_:)(1u);
      Hasher._combine(_:)(v47);
    }

    unint64_t v48 = v129;
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    String.hash(into:)();
    uint64_t v12 = v135;
    swift_bridgeObjectRelease();
    outlined init with take of LocalePreferences?( (uint64_t)&v12[*(int *)(v48 + 28)],  (uint64_t)v159,  (uint64_t *)&demangling cache variable for type metadata for LocalePreferences?);
    outlined init with take of LocalePreferences?( (uint64_t)v159,  (uint64_t)v160,  (uint64_t *)&demangling cache variable for type metadata for LocalePreferences?);
    if (_s10Foundation17LocalePreferencesVSgWOg((uint64_t)v160) == 1)
    {
      Hasher._combine(_:)(0);
      goto LABEL_150;
    }

    outlined init with take of LocalePreferences?( (uint64_t)v159,  (uint64_t)&v141,  (uint64_t *)&demangling cache variable for type metadata for LocalePreferences?);
    Hasher._combine(_:)(1u);
    if (v141 == 2)
    {
      unint64_t v49 = 0;
    }

    else
    {
      unint64_t v49 = v141 & 1;
      Hasher._combine(_:)(1u);
    }

    Hasher._combine(_:)(v49);
    unint64_t v50 = v142;
    if (!v142)
    {
      Hasher._combine(_:)(0);
      outlined retain of LocalePreferences(&v141);
      v55 = &v141;
      goto LABEL_71;
    }

    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(*(void *)(v50 + 16));
    v51 = *(void *)(v50 + 16);
    if (v51) {
      break;
    }
    outlined init with take of LocalePreferences?( (uint64_t)v159,  (uint64_t)&v136,  (uint64_t *)&demangling cache variable for type metadata for LocalePreferences?);
    outlined retain of LocalePreferences?( (uint64_t)v159,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined copy of LocalePreferences?);
    v55 = (uint64_t *)&v136;
LABEL_71:
    outlined retain of LocalePreferences(v55);
    if (v143) {
      goto LABEL_72;
    }
LABEL_65:
    Hasher._combine(_:)(0);
    if (v144) {
      goto LABEL_73;
    }
LABEL_66:
    Hasher._combine(_:)(0);
    uint64_t v53 = v145;
    if (v145) {
      goto LABEL_74;
    }
LABEL_67:
    Hasher._combine(_:)(0);
    v54 = v146;
    if (v146) {
      goto LABEL_96;
    }
LABEL_68:
    Hasher._combine(_:)(0);
LABEL_118:
    v84 = v147;
    v85 = v148;
    v86 = v149;
    v87 = v150;
    v88 = v151;
    if (v147)
    {
      Hasher._combine(_:)(1u);
      type metadata accessor for CFDictionaryRef(0LL);
      lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( (unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef,  (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef,  (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
      v89 = v85;
      v90 = v86;
      v91 = v87;
      v92 = v88;
      v93 = v84;
      _CFObject.hash(into:)();
      if (v85) {
        goto LABEL_120;
      }
    }

    else
    {
      Hasher._combine(_:)(0);
      v98 = v88;
      v99 = v85;
      v100 = v86;
      v101 = v87;
      if (v85)
      {
LABEL_120:
        Hasher._combine(_:)(1u);
        type metadata accessor for CFDictionaryRef(0LL);
        lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( (unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef,  (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef,  (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
        v94 = v85;
        _CFObject.hash(into:)();

        if (v86) {
          goto LABEL_121;
        }
        goto LABEL_126;
      }
    }

    Hasher._combine(_:)(0);
    if (v86)
    {
LABEL_121:
      Hasher._combine(_:)(1u);
      type metadata accessor for CFDictionaryRef(0LL);
      lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( (unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef,  (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef,  (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
      v95 = v86;
      _CFObject.hash(into:)();

      if (v87) {
        goto LABEL_122;
      }
      goto LABEL_127;
    }

      v138 = (v29 - 1) & v29;
      uint64_t v27 = __clz(__rbit64(v29)) + (v24 << 6);
    }

    uint64_t v31 = *(void *)(v133 + 72);
    uint64_t v32 = *(void *)(v16 + 48) + v31 * v27;
    v139 = v24;
    v137 = v31;
    if ((v135 & 1) != 0)
    {
      outlined init with take of ICUNumberFormatter.Signature(v32, (uint64_t)v15, a3);
      v136 = *(void *)(*(void *)(v16 + 56) + 8 * v27);
    }

    else
    {
      outlined init with copy of ICUNumberFormatter.Signature(v32, (uint64_t)v15, a3);
      v136 = *(void *)(*(void *)(v16 + 56) + 8 * v27);
      swift_retain();
    }

    Hasher.init(_seed:)();
    v168 = v173;
    v169 = v174;
    v170 = v175;
    v166 = v171;
    v167 = v172;
    if (*((_BYTE *)v15 + 8) == 1)
    {
      Hasher._combine(_:)(0);
    }

    else
    {
      unint64_t v33 = *v140;
      Hasher._combine(_:)(1u);
      if ((v33 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
        __int16 v34 = v33;
      }
      else {
        __int16 v34 = 0LL;
      }
      uint64_t v15 = v140;
      Hasher._combine(_:)(v34);
    }

    outlined init with take of LocalePreferences?( (uint64_t)v130,  (uint64_t)v176,  &demangling cache variable for type metadata for NumberFormatStyleConfiguration.Precision?);
    specialized Optional<A>.hash(into:)();
    unint64_t v35 = *((unsigned __int8 *)v15 + 73);
    if (v35 == 2)
    {
      Hasher._combine(_:)(0);
    }

    else
    {
      v36 = v35 & 1;
      Hasher._combine(_:)(1u);
      unint64_t v37 = v36;
      uint64_t v15 = v140;
      Hasher._combine(_:)(v37);
    }

    unint64_t v38 = *((unsigned __int16 *)v15 + 37);
    unint64_t v39 = v38 | (*((unsigned __int8 *)v15 + 76) << 16);
    if (v38 == 2)
    {
      Hasher._combine(_:)(0);
    }

    else
    {
      Hasher._combine(_:)(1u);
      uint64_t v15 = v140;
      Hasher._combine(_:)(v39 & 1);
      Hasher._combine(_:)((v39 >> 8) & 1);
      Hasher._combine(_:)(HIWORD(v39) & 1);
    }

    uint64_t v40 = v132;
    unint64_t v41 = *((unsigned __int8 *)v15 + 77);
    if (v41 == 2)
    {
      Hasher._combine(_:)(0);
    }

    else
    {
      int v42 = v41 & 1;
      Hasher._combine(_:)(1u);
      Hasher._combine(_:)(v42);
    }

    unint64_t v43 = (uint64_t)v131;
    int v44 = (int *)type metadata accessor for NumberFormatStyleConfiguration.Collection(0LL);
    outlined init with copy of FloatingPointRoundingRule?((uint64_t)v140 + v44[9], v43);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(v43, 1LL, v40) == 1)
    {
      Hasher._combine(_:)(0);
    }

    else
    {
      unint64_t v45 = v128;
      (*(void (**)(char *, uint64_t, uint64_t))(v9 + 32))(v128, v43, v40);
      Hasher._combine(_:)(1u);
      dispatch thunk of Hashable.hash(into:)();
      (*(void (**)(char *, uint64_t))(v9 + 8))(v45, v40);
    }

    unint64_t v46 = (char *)v140 + v44[10];
    unint64_t v47 = v46[8];
    if (v47 == 255)
    {
      Hasher._combine(_:)(0);
    }

    else
    {
      unint64_t v48 = *(void *)v46;
      Hasher._combine(_:)(1u);
      if ((v47 & 1) != 0)
      {
        Hasher._combine(_:)(1uLL);
        if ((v48 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
          unint64_t v49 = v48;
        }
        else {
          unint64_t v49 = 0LL;
        }
        Hasher._combine(_:)(v49);
      }

      else
      {
        Hasher._combine(_:)(0LL);
        Hasher._combine(_:)(v48);
      }

      int v9 = v129;
    }

    unint64_t v50 = *((unsigned __int8 *)v140 + v44[11]);
    if (v50 == 3)
    {
      Hasher._combine(_:)(0);
    }

    else
    {
      Hasher._combine(_:)(1u);
      Hasher._combine(_:)(v50);
    }

    v51 = v134;
    swift_bridgeObjectRetain();
    String.hash(into:)();
    uint64_t v15 = v140;
    swift_bridgeObjectRelease();
    outlined init with take of LocalePreferences?( (uint64_t)v15 + *(int *)(v51 + 24),  (uint64_t)v164,  (uint64_t *)&demangling cache variable for type metadata for LocalePreferences?);
    outlined init with take of LocalePreferences?( (uint64_t)v164,  (uint64_t)v165,  (uint64_t *)&demangling cache variable for type metadata for LocalePreferences?);
    if (_s10Foundation17LocalePreferencesVSgWOg((uint64_t)v165) == 1)
    {
      Hasher._combine(_:)(0);
      goto LABEL_150;
    }

    outlined init with take of LocalePreferences?( (uint64_t)v164,  (uint64_t)&v146,  (uint64_t *)&demangling cache variable for type metadata for LocalePreferences?);
    Hasher._combine(_:)(1u);
    if (v146 == 2)
    {
      id v52 = 0;
    }

    else
    {
      id v52 = v146 & 1;
      Hasher._combine(_:)(1u);
    }

    Hasher._combine(_:)(v52);
    uint64_t v53 = v147;
    if (!v147)
    {
      Hasher._combine(_:)(0);
      outlined retain of LocalePreferences(&v146);
      unint64_t v58 = &v146;
      goto LABEL_71;
    }

    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(*(void *)(v53 + 16));
    v54 = *(void *)(v53 + 16);
    if (v54) {
      break;
    }
    outlined init with take of LocalePreferences?( (uint64_t)v164,  (uint64_t)&v141,  (uint64_t *)&demangling cache variable for type metadata for LocalePreferences?);
    outlined retain of LocalePreferences?( (uint64_t)v164,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined copy of LocalePreferences?);
    unint64_t v58 = (uint64_t *)&v141;
LABEL_71:
    outlined retain of LocalePreferences(v58);
    if (v148) {
      goto LABEL_72;
    }
LABEL_65:
    Hasher._combine(_:)(0);
    if (v149) {
      goto LABEL_73;
    }
LABEL_66:
    Hasher._combine(_:)(0);
    v56 = v150;
    if (v150) {
      goto LABEL_74;
    }
LABEL_67:
    Hasher._combine(_:)(0);
    v57 = v151;
    if (v151) {
      goto LABEL_96;
    }
LABEL_68:
    Hasher._combine(_:)(0);
LABEL_118:
    v87 = v152;
    v88 = v153;
    v90 = v154;
    v89 = v155;
    v91 = v156;
    if (v152)
    {
      Hasher._combine(_:)(1u);
      type metadata accessor for CFDictionaryRef(0LL);
      lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( (unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef,  (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef,  (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
      v92 = v88;
      v93 = v90;
      v94 = v89;
      v95 = v91;
      v96 = v87;
      _CFObject.hash(into:)();
      if (v88) {
        goto LABEL_120;
      }
    }

    else
    {
      Hasher._combine(_:)(0);
      v101 = v91;
      v102 = v88;
      v103 = v90;
      v104 = v89;
      if (v88)
      {
LABEL_120:
        Hasher._combine(_:)(1u);
        type metadata accessor for CFDictionaryRef(0LL);
        lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( (unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef,  (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef,  (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
        v97 = v88;
        _CFObject.hash(into:)();

        if (v90) {
          goto LABEL_121;
        }
        goto LABEL_126;
      }
    }

    Hasher._combine(_:)(0);
    if (v90)
    {
LABEL_121:
      Hasher._combine(_:)(1u);
      type metadata accessor for CFDictionaryRef(0LL);
      lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( (unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef,  (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef,  (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
      v98 = v90;
      _CFObject.hash(into:)();

      if (v89) {
        goto LABEL_122;
      }
      goto LABEL_127;
    }

        int v10 = (v20 - 1) & v20;
        int v18 = __clz(__rbit64(v20)) + (v14 << 6);
      }

      unint64_t v22 = *(void *)(v5 + 56);
      unsigned __int8 v23 = *(void *)(v5 + 48) + 32 * v18;
      unint64_t v25 = *(void *)v23;
      unint64_t v24 = *(void *)(v23 + 8);
      unint64_t v26 = *(_DWORD *)(v23 + 16);
      uint64_t v27 = *(unsigned __int8 *)(v23 + 20);
      *(void *)&unint64_t v13 = *(void *)(v23 + 24);
      unint64_t v41 = v13;
      uint64_t v28 = *(void *)(v22 + 8 * v18);
      if ((v40 & 1) == 0)
      {
        swift_retain();
        swift_bridgeObjectRetain();
      }

      Hasher.init(_seed:)();
      swift_bridgeObjectRetain();
      String.hash(into:)();
      swift_bridgeObjectRelease();
      if (v27)
      {
        Hasher._combine(_:)(0);
      }

      else
      {
        Hasher._combine(_:)(1u);
        Hasher._combine(_:)(v26);
      }

      Hasher._combine(_:)(v41);
      Hasher._combine(_:)(DWORD1(v41));
      uint64_t result = Hasher._finalize()();
      id v29 = -1LL << *(_BYTE *)(v7 + 32);
      uint64_t v30 = result & ~v29;
      uint64_t v31 = v30 >> 6;
      if (((-1LL << v30) & ~*(void *)(v11 + 8 * (v30 >> 6))) != 0)
      {
        uint64_t v15 = __clz(__rbit64((-1LL << v30) & ~*(void *)(v11 + 8 * (v30 >> 6)))) | v30 & 0x7FFFFFFFFFFFFFC0LL;
      }

      else
      {
        uint64_t v32 = 0;
        unint64_t v33 = (unint64_t)(63 - v29) >> 6;
        do
        {
          if (++v31 == v33 && (v32 & 1) != 0)
          {
            __break(1u);
            goto LABEL_42;
          }

          __int16 v34 = v31 == v33;
          if (v31 == v33) {
            uint64_t v31 = 0LL;
          }
          v32 |= v34;
          unint64_t v35 = *(void *)(v11 + 8 * v31);
        }

        while (v35 == -1);
        uint64_t v15 = __clz(__rbit64(~v35)) + (v31 << 6);
      }

      *(void *)(v11 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v15;
      uint64_t v16 = *(void *)(v7 + 48) + 32 * v15;
      *(void *)uint64_t v16 = v25;
      *(void *)(v16 + _Block_object_dispose((const void *)(v11 - 240), 8) = v24;
      *(_DWORD *)(v16 + 16) = v26;
      *(_BYTE *)(v16 + 20) = v27;
      *((void *)&v13 + 1) = *((void *)&v41 + 1);
      *(void *)(v16 + 24) = v41;
      *(void *)(*(void *)(v7 + 56) + 8 * v15) = v28;
      ++*(void *)(v7 + 16);
    }
  }

  uint64_t result = swift_release();
  const void *v3 = v7;
  return result;
}

      int v18 = (v21 - 1) & v21;
      unint64_t v19 = __clz(__rbit64(v21)) + (v11 << 6);
    }

    unsigned __int8 v23 = (unsigned __int8 *)(*(void *)(v4 + 48) + 56 * v19);
    unint64_t v24 = *v23;
    unint64_t v25 = *((void *)v23 + 1);
    v121 = *((void *)v23 + 2);
    unint64_t v26 = *((void *)v23 + 3);
    v122 = *((void *)v23 + 4);
    v120 = *((void *)v23 + 5);
    v119 = v23[48];
    uint64_t v27 = *(void **)(*(void *)(v4 + 56) + 8 * v19);
    if ((v112 & 1) == 0)
    {
      swift_bridgeObjectRetain();
      swift_unknownObjectRetain();
      swift_unknownObjectRetain();
      uint64_t v28 = v27;
    }

    v118 = v27;
    Hasher.init(_seed:)();
    v117 = v24;
    Hasher._combine(_:)(v24);
    v115 = v18;
    v116 = v11;
    v113 = v25;
    if (v25)
    {
      Hasher._combine(_:)(1u);
      swift_bridgeObjectRetain();
      specialized Set.hash(into:)(&v157, v25);
      swift_bridgeObjectRelease();
    }

    else
    {
      Hasher._combine(_:)(0);
    }

    ObjectType = swift_getObjectType();
    uint64_t v30 = *(void (**)(__int128 *, uint64_t, uint64_t))(v26 + 120);
    swift_unknownObjectRetain();
    v114 = v26;
    v30(&v157, ObjectType, v26);
    swift_unknownObjectRelease();
    uint64_t v31 = swift_getObjectType();
    uint64_t v32 = *(uint64_t (**)(uint64_t, uint64_t))(v120 + 48);
    swift_unknownObjectRetain();
    if ((v32(v31, v120) & 1) != 0)
    {
      unint64_t v33 = 1;
LABEL_31:
      Hasher._combine(_:)(v33);
      swift_unknownObjectRelease();
      int v9 = v115;
      unint64_t v11 = v116;
      goto LABEL_125;
    }

    Hasher._combine(_:)(0);
    (*(void (**)(uint64_t, uint64_t))(v120 + 64))(v31, v120);
    String.hash(into:)();
    swift_bridgeObjectRelease();
    __int16 v34 = *(void (**)(void *__return_ptr, uint64_t, uint64_t))(v120 + 464);
    swift_unknownObjectRetain();
    v34(v154, v31, v120);
    swift_unknownObjectRelease();
    outlined init with take of LocalePreferences?( (uint64_t)v154,  (uint64_t)v155,  (uint64_t *)&demangling cache variable for type metadata for LocalePreferences?);
    outlined init with take of LocalePreferences?( (uint64_t)v155,  (uint64_t)v156,  (uint64_t *)&demangling cache variable for type metadata for LocalePreferences?);
    if (_s10Foundation17LocalePreferencesVSgWOg((uint64_t)v156) == 1)
    {
      unint64_t v33 = 0;
      goto LABEL_31;
    }

    outlined init with take of LocalePreferences?( (uint64_t)v155,  (uint64_t)v136,  (uint64_t *)&demangling cache variable for type metadata for LocalePreferences?);
    Hasher._combine(_:)(1u);
    if (v136[0] == 2)
    {
      unint64_t v35 = 0;
    }

    else
    {
      unint64_t v35 = v136[0] & 1;
      Hasher._combine(_:)(1u);
    }

    Hasher._combine(_:)(v35);
    v36 = v137;
    if (!v137)
    {
      Hasher._combine(_:)(0);
      unint64_t v41 = (__int128 *)v136;
      goto LABEL_46;
    }

    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(*(void *)(v36 + 16));
    unint64_t v37 = *(void *)(v36 + 16);
    if (v37) {
      break;
    }
    outlined init with take of LocalePreferences?( (uint64_t)v155,  (uint64_t)&v131,  (uint64_t *)&demangling cache variable for type metadata for LocalePreferences?);
    unint64_t v41 = &v131;
LABEL_46:
    outlined retain of LocalePreferences(v41);
    if (v138) {
      goto LABEL_47;
    }
LABEL_40:
    Hasher._combine(_:)(0);
    if (v139) {
      goto LABEL_48;
    }
LABEL_41:
    Hasher._combine(_:)(0);
    unint64_t v39 = v140;
    if (v140) {
      goto LABEL_49;
    }
LABEL_42:
    Hasher._combine(_:)(0);
    uint64_t v40 = v141;
    if (v141) {
      goto LABEL_71;
    }
LABEL_43:
    Hasher._combine(_:)(0);
LABEL_93:
    v73 = v142;
    v72 = v143;
    v75 = v144;
    v74 = v145;
    v76 = v146;
    if (v142)
    {
      Hasher._combine(_:)(1u);
      type metadata accessor for CFDictionaryRef(0LL);
      lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( (unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef,  (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef,  (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
      v77 = v72;
      v78 = v75;
      v79 = v74;
      v80 = v76;
      v81 = v73;
      _CFObject.hash(into:)();
      if (v72) {
        goto LABEL_95;
      }
    }

    else
    {
      Hasher._combine(_:)(0);
      v86 = v76;
      v87 = v72;
      v88 = v75;
      v89 = v74;
      if (v72)
      {
LABEL_95:
        Hasher._combine(_:)(1u);
        type metadata accessor for CFDictionaryRef(0LL);
        lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( (unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef,  (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef,  (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
        v82 = v72;
        _CFObject.hash(into:)();

        if (v75) {
          goto LABEL_96;
        }
        goto LABEL_101;
      }
    }

    Hasher._combine(_:)(0);
    if (v75)
    {
LABEL_96:
      Hasher._combine(_:)(1u);
      type metadata accessor for CFDictionaryRef(0LL);
      lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( (unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef,  (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef,  (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
      v83 = v75;
      _CFObject.hash(into:)();

      if (v74) {
        goto LABEL_97;
      }
      goto LABEL_102;
    }

        uint64_t v12 = (v19 - 1) & v19;
        size_t v17 = __clz(__rbit64(v19)) + (v8 << 6);
      }

      unint64_t v21 = *(unsigned __int8 *)(*(void *)(v5 + 48) + v17);
      unint64_t v22 = *(void *)(*(void *)(v5 + 56) + 8 * v17);
      Hasher.init(_seed:)();
      Hasher._combine(_:)(v21);
      uint64_t result = Hasher._finalize()();
      unsigned __int8 v23 = -1LL << *(_BYTE *)(v7 + 32);
      unint64_t v24 = result & ~v23;
      unint64_t v25 = v24 >> 6;
      if (((-1LL << v24) & ~*(void *)(v14 + 8 * (v24 >> 6))) != 0)
      {
        uint64_t v15 = __clz(__rbit64((-1LL << v24) & ~*(void *)(v14 + 8 * (v24 >> 6)))) | v24 & 0x7FFFFFFFFFFFFFC0LL;
      }

      else
      {
        unint64_t v26 = 0;
        uint64_t v27 = (unint64_t)(63 - v23) >> 6;
        do
        {
          if (++v25 == v27 && (v26 & 1) != 0)
          {
            __break(1u);
            goto LABEL_39;
          }

          uint64_t v28 = v25 == v27;
          if (v25 == v27) {
            unint64_t v25 = 0LL;
          }
          v26 |= v28;
          id v29 = *(void *)(v14 + 8 * v25);
        }

        while (v29 == -1);
        uint64_t v15 = __clz(__rbit64(~v29)) + (v25 << 6);
      }

      *(void *)(v14 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v15;
      *(_BYTE *)(*(void *)(v7 + 48) + v15) = v21;
      *(void *)(*(void *)(v7 + 56) + 8 * v15) = v22;
      ++*(void *)(v7 + 16);
    }
  }

  uint64_t result = swift_release();
LABEL_38:
  const void *v3 = v7;
  return result;
}

        int v10 = (v20 - 1) & v20;
        int v18 = __clz(__rbit64(v20)) + (v12 << 6);
      }

      unint64_t v22 = 24 * v18;
      unsigned __int8 v23 = *(void *)(v5 + 48) + v22;
      unint64_t v24 = *(void *)v23;
      unint64_t v25 = *(void *)(v23 + 8);
      unint64_t v26 = *(unsigned __int8 *)(v23 + 16);
      uint64_t v27 = *(void *)(v5 + 56) + v22;
      id v29 = *(void *)v27;
      uint64_t v28 = *(void *)(v27 + 8);
      uint64_t v30 = *(_BYTE *)(v27 + 16);
      if ((v45 & 1) == 0)
      {
        outlined copy of _XMLPlistEncodingFormat.Reference(*(void *)v23, *(void *)(v23 + 8), *(_BYTE *)(v23 + 16));
        outlined copy of _XMLPlistEncodingFormat.Reference(v29, v28, v30);
      }

      Hasher.init(_seed:)();
      if (v26) {
        goto LABEL_42;
      }
      swift_bridgeObjectRetain();
      String.hash(into:)();
      outlined consume of _XMLPlistEncodingFormat.Reference(v24, v25, 0);
      uint64_t v31 = Hasher._finalize()();
      uint64_t v32 = -1LL << *(_BYTE *)(v7 + 32);
      unint64_t v33 = v31 & ~v32;
      __int16 v34 = v33 >> 6;
      if (((-1LL << v33) & ~*(void *)(v11 + 8 * (v33 >> 6))) != 0)
      {
        unint64_t v13 = __clz(__rbit64((-1LL << v33) & ~*(void *)(v11 + 8 * (v33 >> 6)))) | v33 & 0x7FFFFFFFFFFFFFC0LL;
      }

      else
      {
        unint64_t v35 = 0;
        v36 = (unint64_t)(63 - v32) >> 6;
        do
        {
          if (++v34 == v36 && (v35 & 1) != 0)
          {
            __break(1u);
            goto LABEL_40;
          }

          unint64_t v37 = v34 == v36;
          if (v34 == v36) {
            __int16 v34 = 0LL;
          }
          v35 |= v37;
          unint64_t v38 = *(void *)(v11 + 8 * v34);
        }

        while (v38 == -1);
        unint64_t v13 = __clz(__rbit64(~v38)) + (v34 << 6);
      }

      *(void *)(v11 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v13;
      int v14 = 24 * v13;
      uint64_t v15 = *(void *)(v7 + 48) + v14;
      *(void *)uint64_t v15 = v24;
      *(void *)(v15 + _Block_object_dispose((const void *)(v11 - 240), 8) = v25;
      *(_BYTE *)(v15 + 16) = 0;
      uint64_t v16 = *(void *)(v7 + 56) + v14;
      *(void *)uint64_t v16 = v29;
      *(void *)(v16 + _Block_object_dispose((const void *)(v11 - 240), 8) = v28;
      *(_BYTE *)(v16 + 16) = v30;
      ++*(void *)(v7 + 16);
    }
  }

  uint64_t result = swift_release();
  const void *v3 = v7;
  return result;
}

      v116 = (v25 - 1) & v25;
      unsigned __int8 v23 = __clz(__rbit64(v25)) + (v12 << 6);
    }

    v117 = v12;
    uint64_t v27 = *(void *)(v5 + 48) + 160 * v23;
    if ((v113 & 1) != 0)
    {
      uint64_t v28 = *(void *)v27;
      id v29 = *(void *)(v27 + 8);
      outlined init with take of LocalePreferences?( v27 + 16,  (uint64_t)&v138,  (uint64_t *)&demangling cache variable for type metadata for LocalePreferences?);
      v115 = *(id *)(*(void *)(v5 + 56) + 8 * v23);
      uint64_t v30 = &v138;
    }

    else
    {
      uint64_t v31 = *(_OWORD *)(v27 + 32);
      uint64_t v32 = *(_OWORD *)(v27 + 48);
      unint64_t v33 = *(_OWORD *)(v27 + 80);
      v142 = *(_OWORD *)(v27 + 64);
      v143 = v33;
      v141 = v32;
      __int16 v34 = *(_OWORD *)(v27 + 96);
      unint64_t v35 = *(_OWORD *)(v27 + 112);
      v36 = *(_OWORD *)(v27 + 128);
      *(_OWORD *)((char *)v146 + 12) = *(_OWORD *)(v27 + 140);
      v145 = v35;
      v146[0] = v36;
      v144 = v34;
      unint64_t v37 = *(_OWORD *)(v27 + 16);
      v138 = *(_OWORD *)v27;
      v139 = v37;
      v140 = v31;
      unint64_t v38 = *(void **)(*(void *)(v5 + 56) + 8 * v23);
      id v29 = *((void *)&v138 + 1);
      uint64_t v28 = v138;
      outlined retain of LocaleCache.State.IdentifierAndPrefs((uint64_t)&v138);
      v115 = v38;
      uint64_t v30 = &v139;
    }

    outlined init with take of LocalePreferences?( (uint64_t)v30,  (uint64_t)v147,  (uint64_t *)&demangling cache variable for type metadata for LocalePreferences?);
    Hasher.init(_seed:)();
    v114 = v29;
    String.hash(into:)();
    outlined init with take of LocalePreferences?( (uint64_t)v147,  (uint64_t)v137,  (uint64_t *)&demangling cache variable for type metadata for LocalePreferences?);
    v118 = v28;
    if (_s10Foundation17LocalePreferencesVSgWOg((uint64_t)v137) == 1)
    {
      Hasher._combine(_:)(0);
      goto LABEL_120;
    }

    outlined init with take of LocalePreferences?( (uint64_t)v147,  (uint64_t)&v138,  (uint64_t *)&demangling cache variable for type metadata for LocalePreferences?);
    Hasher._combine(_:)(1u);
    if (v138 == 2)
    {
      unint64_t v39 = 0;
    }

    else
    {
      unint64_t v39 = v138 & 1;
      Hasher._combine(_:)(1u);
    }

    Hasher._combine(_:)(v39);
    uint64_t v40 = *((void *)&v138 + 1);
    if (!*((void *)&v138 + 1))
    {
      Hasher._combine(_:)(0);
      unint64_t v45 = &v138;
      goto LABEL_41;
    }

    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(*(void *)(v40 + 16));
    unint64_t v41 = *(void *)(v40 + 16);
    if (v41) {
      break;
    }
    outlined init with take of LocalePreferences?( (uint64_t)v147,  (uint64_t)&v127,  (uint64_t *)&demangling cache variable for type metadata for LocalePreferences?);
    unint64_t v45 = &v127;
LABEL_41:
    outlined retain of LocalePreferences(v45);
    if (*((void *)&v139 + 1)) {
      goto LABEL_42;
    }
LABEL_35:
    Hasher._combine(_:)(0);
    if (*((void *)&v140 + 1)) {
      goto LABEL_43;
    }
LABEL_36:
    Hasher._combine(_:)(0);
    unint64_t v43 = v141;
    if ((void)v141) {
      goto LABEL_44;
    }
LABEL_37:
    Hasher._combine(_:)(0);
    int v44 = *((void *)&v141 + 1);
    if (*((void *)&v141 + 1)) {
      goto LABEL_66;
    }
LABEL_38:
    Hasher._combine(_:)(0);
LABEL_88:
    v76 = v142;
    v77 = v143;
    v78 = (void *)v144;
    if ((void)v142)
    {
      Hasher._combine(_:)(1u);
      type metadata accessor for CFDictionaryRef(0LL);
      lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( (unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef,  (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef,  (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
      v79 = *((id *)&v76 + 1);
      v80 = (id)v77;
      v81 = *((id *)&v77 + 1);
      v82 = v78;
      v83 = (id)v76;
      _CFObject.hash(into:)();
      if (*((void *)&v76 + 1)) {
        goto LABEL_90;
      }
    }

    else
    {
      Hasher._combine(_:)(0);
      v88 = v78;
      v89 = *((id *)&v76 + 1);
      v90 = (id)v77;
      v91 = *((id *)&v77 + 1);
      if (*((void *)&v76 + 1))
      {
LABEL_90:
        Hasher._combine(_:)(1u);
        type metadata accessor for CFDictionaryRef(0LL);
        lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( (unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef,  (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef,  (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
        v84 = *((id *)&v76 + 1);
        _CFObject.hash(into:)();

        if ((void)v77) {
          goto LABEL_91;
        }
        goto LABEL_96;
      }
    }

    Hasher._combine(_:)(0);
    if ((void)v77)
    {
LABEL_91:
      Hasher._combine(_:)(1u);
      type metadata accessor for CFDictionaryRef(0LL);
      lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( (unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef,  (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef,  (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
      v85 = (id)v77;
      _CFObject.hash(into:)();

      if (*((void *)&v77 + 1)) {
        goto LABEL_92;
      }
      goto LABEL_97;
    }

        unint64_t v25 = (v28 - 1) & v28;
        unint64_t v26 = __clz(__rbit64(v28)) + (v12 << 6);
      }

      v77 = v25;
      v78 = v12;
      if ((v74 & 1) != 0)
      {
        uint64_t v30 = *(void *)(v5 + 56);
        uint64_t v31 = *(void *)(v5 + 48) + 352 * v26;
        uint64_t v32 = *(void *)v31;
        v79 = *(void *)(v31 + 8);
        v130 = *(void *)(v31 + 24);
        v131 = *(void *)(v31 + 16);
        v128 = *(void *)(v31 + 40);
        v129 = *(void *)(v31 + 32);
        v126 = *(void *)(v31 + 56);
        v127 = *(void *)(v31 + 48);
        v124 = *(void *)(v31 + 72);
        v125 = *(void *)(v31 + 64);
        v122 = *(void *)(v31 + 88);
        v123 = *(void *)(v31 + 80);
        unint64_t v33 = *(_BYTE *)(v31 + 96);
        __int16 v34 = *(void *)(v31 + 104);
        unint64_t v35 = *(void *)(v31 + 112);
        v80 = *(void *)(v31 + 128);
        v36 = *(void *)(v31 + 136);
        unint64_t v37 = *(void *)(v31 + 144);
        unint64_t v38 = *(void *)(v31 + 152);
        v81 = *(void *)(v31 + 160);
        uint64_t v40 = *(void *)(v31 + 168);
        unint64_t v39 = *(void *)(v31 + 176);
        unint64_t v41 = *(void *)(v31 + 184);
        int v42 = *(void *)(v31 + 192);
        unint64_t v43 = *(_BYTE *)(v31 + 200);
        int v44 = *(_BYTE *)(v31 + 201);
        unint64_t v45 = *(_OWORD *)(v30 + 16 * v26);
        unint64_t v46 = *(void *)(v31 + 120);
        v84 = v45;
        unint64_t v47 = *(void *)(v31 + 208);
        unint64_t v48 = *(void *)(v31 + 216);
        unint64_t v49 = *(void *)(v31 + 224);
        unint64_t v50 = *(void *)(v31 + 232);
        v51 = *(void *)(v31 + 240);
        id v52 = *(void *)(v31 + 248);
        uint64_t v53 = *(void *)(v31 + 256);
        v54 = *(void *)(v31 + 264);
        v55 = *(void *)(v31 + 280);
        v86 = *(void *)(v31 + 272);
        v56 = *(void *)(v31 + 288);
        v57 = *(void *)(v31 + 296);
        v82 = *(void *)(v31 + 304);
        v92 = *(void *)(v31 + 312);
        v83 = *(void *)(v31 + 320);
        v89 = *(void *)(v31 + 328);
        int v59 = *(void *)(v31 + 336);
        unint64_t v58 = *(void *)(v31 + 344);
        v85 = v59;
      }

      else
      {
        memcpy(__dst, (const void *)(*(void *)(v5 + 48) + 352 * v26), 0x160uLL);
        v84 = *(_OWORD *)(*(void *)(v5 + 56) + 16 * v26);
        v89 = __dst[41];
        v90 = __dst[43];
        v82 = __dst[38];
        v83 = __dst[40];
        v92 = __dst[39];
        v85 = __dst[42];
        v86 = __dst[34];
        v87 = __dst[35];
        v118 = __dst[37];
        v120 = __dst[36];
        v114 = __dst[31];
        v116 = __dst[30];
        v110 = __dst[33];
        v112 = __dst[32];
        v106 = __dst[27];
        v108 = __dst[26];
        v102 = __dst[29];
        v104 = __dst[28];
        v98 = __dst[25];
        v100 = BYTE1(__dst[25]);
        v95 = __dst[22];
        v97 = __dst[21];
        v93 = __dst[23];
        uint64_t v60 = __dst[24];
        v36 = __dst[17];
        unint64_t v37 = __dst[18];
        __int16 v34 = __dst[13];
        unint64_t v35 = __dst[14];
        unint64_t v46 = __dst[15];
        v80 = __dst[16];
        v81 = __dst[20];
        unint64_t v33 = __dst[12];
        uint64_t v32 = __dst[0];
        v79 = __dst[1];
        v130 = __dst[3];
        v131 = __dst[2];
        v128 = __dst[5];
        v129 = __dst[4];
        v126 = __dst[7];
        v127 = __dst[6];
        v124 = __dst[9];
        v125 = __dst[8];
        v122 = __dst[11];
        v123 = __dst[10];
        outlined retain of Locale.Components(__dst);
        swift_unknownObjectRetain();
        unint64_t v38 = __dst[19];
        v57 = v118;
        v56 = v120;
        v55 = v87;
        unint64_t v58 = v90;
        unint64_t v48 = v106;
        unint64_t v47 = v108;
        unint64_t v43 = v98;
        int v44 = v100;
        unint64_t v41 = v93;
        unint64_t v39 = v95;
        unint64_t v50 = v102;
        unint64_t v49 = v104;
        int v42 = v60;
        uint64_t v40 = v97;
        v54 = v110;
        uint64_t v53 = v112;
        id v52 = v114;
        v51 = v116;
      }

      __dst[0] = v32;
      __dst[1] = v79;
      __dst[2] = v131;
      __dst[3] = v130;
      __dst[4] = v129;
      __dst[5] = v128;
      __dst[6] = v127;
      __dst[7] = v126;
      __dst[8] = v125;
      __dst[9] = v124;
      __dst[10] = v123;
      __dst[11] = v122;
      LOBYTE(__dst[12]) = v33;
      __dst[13] = v34;
      __dst[14] = v35;
      __dst[15] = v46;
      __dst[16] = v80;
      v76 = v42;
      __dst[17] = v36;
      __dst[18] = v37;
      __dst[19] = v38;
      __dst[20] = v81;
      v96 = v39;
      __dst[21] = v40;
      __dst[22] = v39;
      v94 = v41;
      __dst[23] = v41;
      __dst[24] = v42;
      v99 = v43;
      v101 = v44;
      LOBYTE(__dst[25]) = v43;
      BYTE1(__dst[25]) = v44;
      v107 = v48;
      v109 = v47;
      __dst[26] = v47;
      __dst[27] = v48;
      v103 = v50;
      v105 = v49;
      __dst[28] = v49;
      __dst[29] = v50;
      v115 = v52;
      v117 = v51;
      __dst[30] = v51;
      __dst[31] = v52;
      v111 = v54;
      v113 = v53;
      __dst[32] = v53;
      __dst[33] = v54;
      __dst[34] = v86;
      v88 = v55;
      __dst[35] = v55;
      v119 = v57;
      v121 = v56;
      __dst[36] = v56;
      __dst[37] = v57;
      __dst[38] = v82;
      __dst[39] = v92;
      __dst[40] = v83;
      __dst[41] = v89;
      __dst[42] = v85;
      v91 = v58;
      __dst[43] = v58;
      Hasher.init(_seed:)();
      Locale.Components.hash(into:)((uint64_t)v132);
      v61 = Hasher._finalize()();
      v62 = -1LL << *(_BYTE *)(v75 + 32);
      v63 = v61 & ~v62;
      v64 = v63 >> 6;
      if (((-1LL << v63) & ~*(void *)(v10 + 8 * (v63 >> 6))) != 0)
      {
        unint64_t v13 = __clz(__rbit64((-1LL << v63) & ~*(void *)(v10 + 8 * (v63 >> 6)))) | v63 & 0x7FFFFFFFFFFFFFC0LL;
        uint64_t v15 = v130;
        int v14 = v131;
        uint64_t result = v128;
        uint64_t v16 = v129;
        int v18 = v126;
        size_t v17 = v127;
        char v20 = v124;
        unint64_t v19 = v125;
        unint64_t v22 = v122;
        unint64_t v21 = v123;
      }

      else
      {
        v65 = 0;
        v66 = (unint64_t)(63 - v62) >> 6;
        uint64_t v15 = v130;
        int v14 = v131;
        uint64_t result = v128;
        uint64_t v16 = v129;
        int v18 = v126;
        size_t v17 = v127;
        char v20 = v124;
        unint64_t v19 = v125;
        unint64_t v22 = v122;
        unint64_t v21 = v123;
        do
        {
          if (++v64 == v66 && (v65 & 1) != 0)
          {
            __break(1u);
            goto LABEL_40;
          }

          v67 = v64 == v66;
          if (v64 == v66) {
            v64 = 0LL;
          }
          v65 |= v67;
          v68 = *(void *)(v10 + 8 * v64);
        }

        while (v68 == -1);
        unint64_t v13 = __clz(__rbit64(~v68)) + (v64 << 6);
      }

      *(void *)(v10 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v13;
      unsigned __int8 v23 = *(void *)(v75 + 48) + 352 * v13;
      *(void *)unsigned __int8 v23 = v32;
      *(void *)(v23 + _Block_object_dispose((const void *)(v11 - 240), 8) = v79;
      *(void *)(v23 + 16) = v14;
      *(void *)(v23 + 24) = v15;
      *(void *)(v23 + 32) = v16;
      *(void *)(v23 + 40) = result;
      *(void *)(v23 + 4_Block_object_dispose((const void *)(v11 - 240), 8) = v17;
      *(void *)(v23 + 56) = v18;
      *(void *)(v23 + 64) = v19;
      *(void *)(v23 + 72) = v20;
      *(void *)(v23 + 80) = v21;
      *(void *)(v23 + 8_Block_object_dispose((const void *)(v11 - 240), 8) = v22;
      *(_BYTE *)(v23 + 96) = v33;
      *(void *)(v23 + 104) = v34;
      *(void *)(v23 + 112) = v35;
      *(void *)(v23 + 120) = v46;
      *(void *)(v23 + 12_Block_object_dispose((const void *)(v11 - 240), 8) = v80;
      *(void *)(v23 + 136) = v36;
      *(void *)(v23 + 144) = v37;
      *(void *)(v23 + 152) = v38;
      *(void *)(v23 + 160) = v81;
      *(void *)(v23 + 16_Block_object_dispose((const void *)(v11 - 240), 8) = v40;
      *(void *)(v23 + 176) = v96;
      *(void *)(v23 + 184) = v94;
      *(void *)(v23 + 192) = v76;
      *(_BYTE *)(v23 + 200) = v99;
      *(_BYTE *)(v23 + 201) = v101;
      *(void *)(v23 + 20_Block_object_dispose((const void *)(v11 - 240), 8) = v109;
      *(void *)(v23 + 216) = v107;
      *(void *)(v23 + 224) = v105;
      *(void *)(v23 + 232) = v103;
      *(void *)(v23 + 240) = v117;
      *(void *)(v23 + 24_Block_object_dispose((const void *)(v11 - 240), 8) = v115;
      *(void *)(v23 + 256) = v113;
      *(void *)(v23 + 264) = v111;
      *(void *)(v23 + 272) = v86;
      *(void *)(v23 + 280) = v88;
      *(void *)(v23 + 28_Block_object_dispose((const void *)(v11 - 240), 8) = v121;
      *(void *)(v23 + 296) = v119;
      *(void *)(v23 + 304) = v82;
      *(void *)(v23 + 312) = v92;
      *(void *)(v23 + 320) = v83;
      *(void *)(v23 + 32_Block_object_dispose((const void *)(v11 - 240), 8) = v89;
      *(void *)(v23 + 336) = v85;
      *(void *)(v23 + 344) = v91;
      *(_OWORD *)(*(void *)(v75 + 56) + 16 * v13) = v84;
      ++*(void *)(v75 + 16);
      uint64_t v5 = v73;
      int v9 = v77;
      uint64_t v12 = v78;
    }
  }

  uint64_t result = swift_release();
  const void *v3 = v75;
  return result;
}

    unint64_t v11 = (v20 - 1) & v20;
    size_t v17 = __clz(__rbit64(v20)) + (v14 << 6);
LABEL_22:
    unint64_t v22 = *(void **)(*(void *)(v6 + 48) + 8 * v17);
    unsigned __int8 v23 = (_OWORD *)(*(void *)(v6 + 56) + 32 * v17);
    if ((v36 & 1) != 0)
    {
      outlined init with take of Any(v23, v37);
    }

    else
    {
      outlined init with copy of Any((uint64_t)v23, (uint64_t)v37);
      unint64_t v24 = v22;
    }

    static String._unconditionallyBridgeFromObjectiveC(_:)(v22);
    Hasher.init(_seed:)();
    String.hash(into:)();
    unint64_t v25 = Hasher._finalize()();
    uint64_t result = swift_bridgeObjectRelease();
    unint64_t v26 = -1LL << *(_BYTE *)(v8 + 32);
    uint64_t v27 = v25 & ~v26;
    uint64_t v28 = v27 >> 6;
    if (((-1LL << v27) & ~*(void *)(v12 + 8 * (v27 >> 6))) != 0)
    {
      uint64_t v15 = __clz(__rbit64((-1LL << v27) & ~*(void *)(v12 + 8 * (v27 >> 6)))) | v27 & 0x7FFFFFFFFFFFFFC0LL;
    }

    else
    {
      id v29 = 0;
      uint64_t v30 = (unint64_t)(63 - v26) >> 6;
      do
      {
        if (++v28 == v30 && (v29 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }

        uint64_t v31 = v28 == v30;
        if (v28 == v30) {
          uint64_t v28 = 0LL;
        }
        v29 |= v31;
        uint64_t v32 = *(void *)(v12 + 8 * v28);
      }

      while (v32 == -1);
      uint64_t v15 = __clz(__rbit64(~v32)) + (v28 << 6);
    }

    *(void *)(v12 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v15;
    *(void *)(*(void *)(v8 + 48) + 8 * v15) = v22;
    uint64_t result = (uint64_t)outlined init with take of Any(v37, (_OWORD *)(*(void *)(v8 + 56) + 32 * v15));
    ++*(void *)(v8 + 16);
  }

  swift_release();
  unint64_t v19 = (void *)(v6 + 64);
  if ((v36 & 1) == 0) {
    goto LABEL_41;
  }
LABEL_37:
  unint64_t v33 = 1LL << *(_BYTE *)(v6 + 32);
  if (v33 >= 64) {
    bzero(v19, ((unint64_t)(v33 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8LL);
  }
  else {
    *unint64_t v19 = -1LL << v33;
  }
  *(void *)(v6 + 16) = 0LL;
LABEL_41:
  uint64_t result = swift_release();
  *unsigned int v4 = v8;
  return result;
}

        uint64_t v12 = (v22 - 1) & v22;
        char v20 = __clz(__rbit64(v22)) + (v15 << 6);
      }

      unint64_t v24 = *(void *)(v6 + 56);
      unint64_t v25 = v6;
      unint64_t v26 = *(void *)(v6 + 48) + 24 * v20;
      uint64_t v27 = *(void *)v26;
      uint64_t v28 = *(void *)(v26 + 8);
      id v29 = *(_BYTE *)(v26 + 16);
      uint64_t v30 = *(void *)(v16 + 72);
      uint64_t v31 = v24 + v30 * v20;
      if ((v43 & 1) != 0)
      {
        (*(void (**)(char *, uint64_t, uint64_t))(v16 + 32))(v45, v31, v46);
      }

      else
      {
        (*(void (**)(char *, uint64_t, uint64_t))(v16 + 16))(v45, v31, v46);
        swift_bridgeObjectRetain();
      }

      Hasher.init(_seed:)();
      swift_bridgeObjectRetain();
      String.hash(into:)();
      swift_bridgeObjectRelease();
      Hasher._combine(_:)(v29);
      uint64_t result = Hasher._finalize()();
      uint64_t v32 = -1LL << *(_BYTE *)(v8 + 32);
      unint64_t v33 = result & ~v32;
      __int16 v34 = v33 >> 6;
      if (((-1LL << v33) & ~*(void *)(v13 + 8 * (v33 >> 6))) != 0)
      {
        size_t v17 = __clz(__rbit64((-1LL << v33) & ~*(void *)(v13 + 8 * (v33 >> 6)))) | v33 & 0x7FFFFFFFFFFFFFC0LL;
        uint64_t v16 = v44;
      }

      else
      {
        unint64_t v35 = 0;
        v36 = (unint64_t)(63 - v32) >> 6;
        uint64_t v16 = v44;
        do
        {
          if (++v34 == v36 && (v35 & 1) != 0)
          {
            __break(1u);
            goto LABEL_40;
          }

          unint64_t v37 = v34 == v36;
          if (v34 == v36) {
            __int16 v34 = 0LL;
          }
          v35 |= v37;
          unint64_t v38 = *(void *)(v13 + 8 * v34);
        }

        while (v38 == -1);
        size_t v17 = __clz(__rbit64(~v38)) + (v34 << 6);
      }

      *(void *)(v13 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v17;
      int v18 = *(void *)(v8 + 48) + 24 * v17;
      *(void *)int v18 = v27;
      *(void *)(v18 + _Block_object_dispose((const void *)(v11 - 240), 8) = v28;
      *(_BYTE *)(v18 + 16) = v29;
      uint64_t result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(v16 + 32))( *(void *)(v8 + 56) + v30 * v17,  v45,  v46);
      ++*(void *)(v8 + 16);
      float v6 = v25;
    }
  }

  uint64_t result = swift_release();
  const void *v3 = v8;
  return result;
}

        uint64_t v12 = (v19 - 1) & v19;
        size_t v17 = __clz(__rbit64(v19)) + (v8 << 6);
      }

      unint64_t v21 = *(_DWORD *)(*(void *)(v5 + 48) + 4 * v17);
      unint64_t v22 = *(void *)(*(void *)(v5 + 56) + 8 * v17);
      uint64_t result = MEMORY[0x186E1CE88](*(void *)(v7 + 40), v21, 4LL);
      unsigned __int8 v23 = -1LL << *(_BYTE *)(v7 + 32);
      unint64_t v24 = result & ~v23;
      unint64_t v25 = v24 >> 6;
      if (((-1LL << v24) & ~*(void *)(v14 + 8 * (v24 >> 6))) != 0)
      {
        uint64_t v15 = __clz(__rbit64((-1LL << v24) & ~*(void *)(v14 + 8 * (v24 >> 6)))) | v24 & 0x7FFFFFFFFFFFFFC0LL;
      }

      else
      {
        unint64_t v26 = 0;
        uint64_t v27 = (unint64_t)(63 - v23) >> 6;
        do
        {
          if (++v25 == v27 && (v26 & 1) != 0)
          {
            __break(1u);
            goto LABEL_39;
          }

          uint64_t v28 = v25 == v27;
          if (v25 == v27) {
            unint64_t v25 = 0LL;
          }
          v26 |= v28;
          id v29 = *(void *)(v14 + 8 * v25);
        }

        while (v29 == -1);
        uint64_t v15 = __clz(__rbit64(~v29)) + (v25 << 6);
      }

      *(void *)(v14 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v15;
      *(_DWORD *)(*(void *)(v7 + 48) + 4 * v15) = v21;
      *(void *)(*(void *)(v7 + 56) + 8 * v15) = v22;
      ++*(void *)(v7 + 16);
    }
  }

  uint64_t result = swift_release();
LABEL_38:
  const void *v3 = v7;
  return result;
}

    uint64_t v15 = (v24 - 1) & v24;
    unint64_t v21 = __clz(__rbit64(v24)) + (v18 << 6);
LABEL_22:
    unint64_t v26 = *(void *)(v6 + 72);
    uint64_t v27 = *(void *)(v9 + 48) + v26 * v21;
    if ((v39 & 1) != 0)
    {
      (*(void (**)(char *, unint64_t, uint64_t))(v6 + 32))(v8, v27, v5);
      outlined init with take of Any((_OWORD *)(*(void *)(v9 + 56) + 32 * v21), v40);
    }

    else
    {
      (*(void (**)(char *, unint64_t, uint64_t))(v6 + 16))(v8, v27, v5);
      outlined init with copy of Any(*(void *)(v9 + 56) + 32 * v21, (uint64_t)v40);
    }

    uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)();
    uint64_t v28 = -1LL << *(_BYTE *)(v11 + 32);
    id v29 = result & ~v28;
    uint64_t v30 = v29 >> 6;
    if (((-1LL << v29) & ~*(void *)(v16 + 8 * (v29 >> 6))) != 0)
    {
      unint64_t v19 = __clz(__rbit64((-1LL << v29) & ~*(void *)(v16 + 8 * (v29 >> 6)))) | v29 & 0x7FFFFFFFFFFFFFC0LL;
    }

    else
    {
      uint64_t v31 = 0;
      uint64_t v32 = (unint64_t)(63 - v28) >> 6;
      do
      {
        if (++v30 == v32 && (v31 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }

        unint64_t v33 = v30 == v32;
        if (v30 == v32) {
          uint64_t v30 = 0LL;
        }
        v31 |= v33;
        __int16 v34 = *(void *)(v16 + 8 * v30);
      }

      while (v34 == -1);
      unint64_t v19 = __clz(__rbit64(~v34)) + (v30 << 6);
    }

    *(void *)(v16 + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v19;
    (*(void (**)(unint64_t, char *, uint64_t))(v6 + 32))(*(void *)(v11 + 48) + v26 * v19, v8, v5);
    uint64_t result = (uint64_t)outlined init with take of Any(v40, (_OWORD *)(*(void *)(v11 + 56) + 32 * v19));
    ++*(void *)(v11 + 16);
  }

  swift_release();
  int v3 = v36;
  unsigned __int8 v23 = v38;
  if ((v39 & 1) == 0) {
    goto LABEL_41;
  }
LABEL_37:
  unint64_t v35 = 1LL << *(_BYTE *)(v9 + 32);
  if (v35 >= 64) {
    bzero(v23, ((unint64_t)(v35 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8LL);
  }
  else {
    *unsigned __int8 v23 = -1LL << v35;
  }
  *(void *)(v9 + 16) = 0LL;
LABEL_41:
  uint64_t result = swift_release();
  const void *v3 = v11;
  return result;
}

    uint64_t v15 = (v24 - 1) & v24;
    unint64_t v21 = __clz(__rbit64(v24)) + (v18 << 6);
LABEL_22:
    unint64_t v26 = *(void *)(v6 + 72);
    uint64_t v27 = *(void *)(v9 + 48) + v26 * v21;
    if ((v39 & 1) != 0)
    {
      (*(void (**)(char *, unint64_t, uint64_t))(v6 + 32))(v8, v27, v5);
      uint64_t v40 = *(_OWORD *)(*(void *)(v9 + 56) + 16 * v21);
    }

    else
    {
      (*(void (**)(char *, unint64_t, uint64_t))(v6 + 16))(v8, v27, v5);
      uint64_t v40 = *(_OWORD *)(*(void *)(v9 + 56) + 16 * v21);
      swift_retain();
    }

    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( (unint64_t *)&lazy protocol witness table cache variable for type CombineIdentifier and conformance CombineIdentifier,  (uint64_t (*)(uint64_t))MEMORY[0x1896021B0],  MEMORY[0x1896021C0]);
    uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)();
    uint64_t v28 = -1LL << *(_BYTE *)(v11 + 32);
    id v29 = result & ~v28;
    uint64_t v30 = v29 >> 6;
    if (((-1LL << v29) & ~*(void *)(v16 + 8 * (v29 >> 6))) != 0)
    {
      unint64_t v19 = __clz(__rbit64((-1LL << v29) & ~*(void *)(v16 + 8 * (v29 >> 6)))) | v29 & 0x7FFFFFFFFFFFFFC0LL;
    }

    else
    {
      uint64_t v31 = 0;
      uint64_t v32 = (unint64_t)(63 - v28) >> 6;
      do
      {
        if (++v30 == v32 && (v31 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }

        unint64_t v33 = v30 == v32;
        if (v30 == v32) {
          uint64_t v30 = 0LL;
        }
        v31 |= v33;
        __int16 v34 = *(void *)(v16 + 8 * v30);
      }

      while (v34 == -1);
      unint64_t v19 = __clz(__rbit64(~v34)) + (v30 << 6);
    }

    *(void *)(v16 + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v19;
    uint64_t result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(v6 + 32))( *(void *)(v11 + 48) + v26 * v19,  v8,  v5);
    *(_OWORD *)(*(void *)(v11 + 56) + 16 * v19) = v40;
    ++*(void *)(v11 + 16);
  }

  swift_release();
  int v3 = v36;
  unsigned __int8 v23 = v38;
  if ((v39 & 1) == 0) {
    goto LABEL_41;
  }
LABEL_37:
  unint64_t v35 = 1LL << *(_BYTE *)(v9 + 32);
  if (v35 >= 64) {
    bzero(v23, ((unint64_t)(v35 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8LL);
  }
  else {
    *unsigned __int8 v23 = -1LL << v35;
  }
  *(void *)(v9 + 16) = 0LL;
LABEL_41:
  uint64_t result = swift_release();
  const void *v3 = v11;
  return result;
}

  uint64_t v30 = *(_OWORD *)(a2 + 288);
  *(_OWORD *)(a1 + 272) = *(_OWORD *)(a2 + 272);
  *(_OWORD *)(a1 + 28_Block_object_dispose((const void *)(v11 - 240), 8) = v30;
LABEL_22:
  *(_OWORD *)(a1 + 304) = *(_OWORD *)(a2 + 304);
  uint64_t v31 = *(void *)(a2 + 328);
  swift_unknownObjectRetain();
  if (v31)
  {
    *(void *)(a1 + 320) = *(void *)(a2 + 320);
    *(void *)(a1 + 32_Block_object_dispose((const void *)(v11 - 240), 8) = v31;
    uint64_t v32 = *(void *)(a2 + 344);
    *(void *)(a1 + 336) = *(void *)(a2 + 336);
    *(void *)(a1 + 344) = v32;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }

  else
  {
    unint64_t v33 = *(_OWORD *)(a2 + 336);
    *(_OWORD *)(a1 + 320) = *(_OWORD *)(a2 + 320);
    *(_OWORD *)(a1 + 336) = v33;
  }

  *(_BYTE *)(a1 + 352) = *(_BYTE *)(a2 + 352);
  __int16 v34 = *(void *)(a2 + 368);
  *(void *)(a1 + 360) = *(void *)(a2 + 360);
  *(void *)(a1 + 36_Block_object_dispose((const void *)(v11 - 240), 8) = v34;
  unint64_t v35 = *(void *)(a2 + 376);
  v36 = *(void *)(a2 + 384);
  *(void *)(a1 + 376) = v35;
  *(void *)(a1 + 384) = v36;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

        int v18 = HIBYTE(v6) & 0xF;
        if ((v6 & 0x2000000000000000LL) == 0) {
          int v18 = v3 & 0xFFFFFFFFFFFFLL;
        }
        if (v18)
        {
          v2[22] = v3;
          v2[23] = v6;
          MEMORY[0x1895F8858](v17);
          unint64_t v43 = v4;
          int v44 = 2;
          swift_bridgeObjectRetain();
          unint64_t v19 = specialized String.UTF8View.withContiguousStorageIfAvailable<A>(_:)( (void *(*)(void *__return_ptr, void *, uint64_t))partial apply for specialized closure #1 in StringProtocol.addingPercentEncoding(forURLComponent:),  (uint64_t)v42,  v3,  v6);
          if (v20)
          {
            int v3 = (uint64_t)v19;
            unint64_t v21 = v20;
          }

          else
          {
            unint64_t v26 = v2[22];
            uint64_t v27 = v2[23];
            swift_bridgeObjectRetain();
            int v3 = specialized StringProtocol.addingPercentEncoding<A>(utf8Buffer:component:)(v26, v27, 2u);
            unint64_t v21 = v28;
            swift_bridgeObjectRelease();
          }

          swift_bridgeObjectRelease_n();
          float v6 = v21;
        }

        else
        {
          swift_bridgeObjectRelease();
          int v3 = 0LL;
          float v6 = 0xE000000000000000LL;
        }

        goto LABEL_33;
      }

      if ((v6 & 0x2000000000000000LL) != 0)
      {
        int v10 = HIBYTE(v6) & 0xF;
        v2[22] = v3;
        v2[23] = v6 & 0xFFFFFFFFFFFFFFLL;
        int v9 = (char *)v4;
      }

      else if ((v3 & 0x1000000000000000LL) != 0)
      {
        int v9 = (char *)((v6 & 0xFFFFFFFFFFFFFFFLL) + 32);
        int v10 = v3 & 0xFFFFFFFFFFFFLL;
      }

      else
      {
        int v9 = (char *)_StringObject.sharedUTF8.getter();
      }

      size_t v17 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v9, v10, 2u, 0);
      if ((v17 & 1) == 0) {
        goto LABEL_21;
      }
    }

        int v18 = HIBYTE(v6) & 0xF;
        if ((v6 & 0x2000000000000000LL) == 0) {
          int v18 = v3 & 0xFFFFFFFFFFFFLL;
        }
        if (v18)
        {
          v2[22] = v3;
          v2[23] = v6;
          MEMORY[0x1895F8858](v17);
          unint64_t v43 = v4;
          int v44 = 2;
          swift_bridgeObjectRetain();
          unint64_t v19 = specialized String.UTF8View.withContiguousStorageIfAvailable<A>(_:)( (void *(*)(void *__return_ptr, void *, uint64_t))partial apply for specialized closure #1 in StringProtocol.addingPercentEncoding(forURLComponent:),  (uint64_t)v42,  v3,  v6);
          if (v20)
          {
            int v3 = (uint64_t)v19;
            unint64_t v21 = v20;
          }

          else
          {
            unint64_t v26 = v2[22];
            uint64_t v27 = v2[23];
            swift_bridgeObjectRetain();
            int v3 = specialized StringProtocol.addingPercentEncoding<A>(utf8Buffer:component:)(v26, v27, 2u);
            unint64_t v21 = v28;
            swift_bridgeObjectRelease();
          }

          swift_bridgeObjectRelease_n();
          float v6 = v21;
        }

        else
        {
          swift_bridgeObjectRelease();
          int v3 = 0LL;
          float v6 = 0xE000000000000000LL;
        }

        goto LABEL_33;
      }

      if ((v6 & 0x2000000000000000LL) != 0)
      {
        int v10 = HIBYTE(v6) & 0xF;
        v2[22] = v3;
        v2[23] = v6 & 0xFFFFFFFFFFFFFFLL;
        int v9 = (char *)v4;
      }

      else if ((v3 & 0x1000000000000000LL) != 0)
      {
        int v9 = (char *)((v6 & 0xFFFFFFFFFFFFFFFLL) + 32);
        int v10 = v3 & 0xFFFFFFFFFFFFLL;
      }

      else
      {
        int v9 = (char *)_StringObject.sharedUTF8.getter();
      }

      size_t v17 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v9, v10, 2u, 0);
      if ((v17 & 1) == 0) {
        goto LABEL_21;
      }
    }

        int v18 = HIBYTE(v6) & 0xF;
        if ((v6 & 0x2000000000000000LL) == 0) {
          int v18 = v3 & 0xFFFFFFFFFFFFLL;
        }
        if (v18)
        {
          v2[22] = v3;
          v2[23] = v6;
          MEMORY[0x1895F8858](v17);
          unint64_t v43 = v4;
          int v44 = 64;
          swift_bridgeObjectRetain();
          unint64_t v19 = specialized String.UTF8View.withContiguousStorageIfAvailable<A>(_:)( (void *(*)(void *__return_ptr, void *, uint64_t))partial apply for specialized closure #1 in StringProtocol.addingPercentEncoding(forURLComponent:),  (uint64_t)v42,  v3,  v6);
          if (v20)
          {
            int v3 = (uint64_t)v19;
            unint64_t v21 = v20;
          }

          else
          {
            unint64_t v26 = v2[22];
            uint64_t v27 = v2[23];
            swift_bridgeObjectRetain();
            int v3 = specialized StringProtocol.addingPercentEncoding<A>(utf8Buffer:component:)(v26, v27, 0x40u);
            unint64_t v21 = v28;
            swift_bridgeObjectRelease();
          }

          swift_bridgeObjectRelease_n();
          float v6 = v21;
        }

        else
        {
          swift_bridgeObjectRelease();
          int v3 = 0LL;
          float v6 = 0xE000000000000000LL;
        }

        goto LABEL_33;
      }

      if ((v6 & 0x2000000000000000LL) != 0)
      {
        int v10 = HIBYTE(v6) & 0xF;
        v2[22] = v3;
        v2[23] = v6 & 0xFFFFFFFFFFFFFFLL;
        int v9 = (char *)v4;
      }

      else if ((v3 & 0x1000000000000000LL) != 0)
      {
        int v9 = (char *)((v6 & 0xFFFFFFFFFFFFFFFLL) + 32);
        int v10 = v3 & 0xFFFFFFFFFFFFLL;
      }

      else
      {
        int v9 = (char *)_StringObject.sharedUTF8.getter();
      }

      size_t v17 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v9, v10, 0x40u, 0);
      if ((v17 & 1) == 0) {
        goto LABEL_21;
      }
    }

        int v18 = HIBYTE(v6) & 0xF;
        if ((v6 & 0x2000000000000000LL) == 0) {
          int v18 = v3 & 0xFFFFFFFFFFFFLL;
        }
        if (v18)
        {
          v2[22] = v3;
          v2[23] = v6;
          MEMORY[0x1895F8858](v17);
          unint64_t v43 = v4;
          int v44 = 64;
          swift_bridgeObjectRetain();
          unint64_t v19 = specialized String.UTF8View.withContiguousStorageIfAvailable<A>(_:)( (void *(*)(void *__return_ptr, void *, uint64_t))partial apply for specialized closure #1 in StringProtocol.addingPercentEncoding(forURLComponent:),  (uint64_t)v42,  v3,  v6);
          if (v20)
          {
            int v3 = (uint64_t)v19;
            unint64_t v21 = v20;
          }

          else
          {
            unint64_t v26 = v2[22];
            uint64_t v27 = v2[23];
            swift_bridgeObjectRetain();
            int v3 = specialized StringProtocol.addingPercentEncoding<A>(utf8Buffer:component:)(v26, v27, 0x40u);
            unint64_t v21 = v28;
            swift_bridgeObjectRelease();
          }

          swift_bridgeObjectRelease_n();
          float v6 = v21;
        }

        else
        {
          swift_bridgeObjectRelease();
          int v3 = 0LL;
          float v6 = 0xE000000000000000LL;
        }

        goto LABEL_33;
      }

      if ((v6 & 0x2000000000000000LL) != 0)
      {
        int v10 = HIBYTE(v6) & 0xF;
        v2[22] = v3;
        v2[23] = v6 & 0xFFFFFFFFFFFFFFLL;
        int v9 = (char *)v4;
      }

      else if ((v3 & 0x1000000000000000LL) != 0)
      {
        int v9 = (char *)((v6 & 0xFFFFFFFFFFFFFFFLL) + 32);
        int v10 = v3 & 0xFFFFFFFFFFFFLL;
      }

      else
      {
        int v9 = (char *)_StringObject.sharedUTF8.getter();
      }

      size_t v17 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v9, v10, 0x40u, 0);
      if ((v17 & 1) == 0) {
        goto LABEL_21;
      }
    }

        Hasher._combine(_:)(1u);
        swift_bridgeObjectRetain();
        String.hash(into:)();
        swift_bridgeObjectRelease();
        if (!v89)
        {
LABEL_15:
          Hasher._combine(_:)(0);
          unint64_t v21 = v90;
          if (!v90) {
            goto LABEL_16;
          }
          goto LABEL_23;
        }

        Hasher._combine(_:)(1u);
        swift_bridgeObjectRetain();
        String.hash(into:)();
        swift_bridgeObjectRelease();
        unint64_t v22 = v90;
        if (!v90) {
          goto LABEL_16;
        }
        goto LABEL_22;
      }

      outlined init with take of LocalePreferences?( (uint64_t)v105,  (uint64_t)v85,  (uint64_t *)&demangling cache variable for type metadata for LocalePreferences?);
      unsigned __int8 v23 = v85;
    }

    else
    {
      Hasher._combine(_:)(0);
      unsigned __int8 v23 = v86;
    }

    outlined retain of LocalePreferences(v23);
    if (!v88) {
      goto LABEL_14;
    }
    goto LABEL_20;
  }

  uint64_t v15 = 1;
LABEL_5:
  Hasher._combine(_:)(v15);
  swift_unknownObjectRelease();
  size_t v17 = v83;
LABEL_60:
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  int v59 = v4 + *(int *)(__swift_instantiateConcreteTypeFromMangledName(a2) + 40);
  if ((*(_BYTE *)(v59 + 8) & 1) != 0)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    uint64_t v60 = *(void *)v59;
    Hasher._combine(_:)(1u);
    if ((v60 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
      v61 = v60;
    }
    else {
      v61 = 0LL;
    }
    Hasher._combine(_:)(v61);
  }

  v62 = v84;
  outlined init with take of LocalePreferences?( v59 + 16,  (uint64_t)v106,  &demangling cache variable for type metadata for NumberFormatStyleConfiguration.Precision?);
  specialized Optional<A>.hash(into:)();
  v63 = *(unsigned __int8 *)(v59 + 73);
  if (v63 == 2)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    v64 = v63 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v64);
  }

  v65 = *(unsigned int *)(v59 + 74);
  if (*(_DWORD *)(v59 + 74) == 2)
  {
    LOBYTE(v66) = 0;
  }

  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v65 & 1);
    Hasher._combine(_:)((v65 >> 8) & 1);
    Hasher._combine(_:)(WORD1(v65) & 1);
    v66 = BYTE3(v65) & 1;
  }

  Hasher._combine(_:)(v66);
  v67 = *(unsigned __int8 *)(v59 + 78);
  if (v67 == 2)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    v68 = v67 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v68);
  }

  v69 = (int *)type metadata accessor for CurrencyFormatStyleConfiguration.Collection(0LL);
  outlined init with copy of (Hashable & Sendable)?( v59 + v69[9],  (uint64_t)v11,  &demangling cache variable for type metadata for FloatingPointRoundingRule?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v62 + 48))(v11, 1LL, v17) == 1)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    v70 = v82;
    (*(void (**)(char *, char *, uint64_t))(v62 + 32))(v82, v11, v17);
    Hasher._combine(_:)(1u);
    dispatch thunk of Hashable.hash(into:)();
    (*(void (**)(char *, uint64_t))(v62 + 8))(v70, v17);
  }

  v71 = v59 + v69[10];
  v72 = *(unsigned __int8 *)(v71 + 8);
  if (v72 == 255)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    v73 = *(void *)v71;
    Hasher._combine(_:)(1u);
    if ((v72 & 1) != 0)
    {
      Hasher._combine(_:)(1uLL);
      if ((v73 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
        v74 = v73;
      }
      else {
        v74 = 0LL;
      }
      Hasher._combine(_:)(v74);
    }

    else
    {
      Hasher._combine(_:)(0LL);
      Hasher._combine(_:)(v73);
    }
  }

  Hasher._combine(_:)(*(unsigned __int8 *)(v59 + v69[11]));
  v75 = *(unsigned __int8 *)(v59 + v69[12]);
  if (v75 == 3)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v75);
  }

  Hasher._combine(_:)(0);
  if (!v29)
  {
LABEL_6:
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v16);
    if (!v30) {
      goto LABEL_7;
    }
    goto LABEL_23;
  }

  Hasher._combine(_:)(0);
  if (!v29)
  {
LABEL_6:
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v16);
    if (!v30) {
      goto LABEL_7;
    }
    goto LABEL_23;
  }

  __break(1u);
}

  __break(1u);
}

  __break(1u);
}

    uint64_t v5 = 0LL;
    unint64_t v24 = 0LL;
    unint64_t v22 = 0u;
    unsigned __int8 v23 = 0u;
    char v20 = 0u;
    unint64_t v21 = 0u;
    unint64_t v19 = 0u;
  }

  int v14 = *(void *)(v17 + 8 * v16);
  if (v14)
  {
    v13 += 2LL;
    goto LABEL_9;
  }

  while (1)
  {
    unint64_t v13 = v16 + 1;
    if (__OFADD__(v16, 1LL)) {
      break;
    }
    if (v13 >= v18)
    {
      mach_vm_size_t v7 = v18 - 1;
      goto LABEL_21;
    }

    int v14 = *(void *)(v17 + 8 * v13);
    ++v16;
    if (v14) {
      goto LABEL_9;
    }
  }

  __break(1u);
}

  __break(1u);
}

    swift_bridgeObjectRelease();
    LODWORD(v125) = v121;
    WORD2(v125) = v119;
    HIWORD(v125) = v123;
    LOWORD(v126) = v33;
    WORD1(v126) = v37;
    WORD2(v126) = v111;
    HIWORD(v126) = v110;
    LOWORD(v127) = v38;
    HIWORD(v127) = v132;
    NSDecimal.copyVariableLengthInteger(_:)((Swift::OpaquePointer)v43);
    if (v50) {
      break;
    }
    v51 = *(void *)(v43 + 16);
    swift_bridgeObjectRelease();
    if (HIDWORD(v51)) {
      goto LABEL_91;
    }
    _So9NSDecimala__length_setter(v51, &v125);
    uint64_t v32 = v125;
    uint64_t v31 = WORD2(v125);
    uint64_t v30 = HIWORD(v125);
    uint64_t v8 = (unsigned __int16)v126;
    id v29 = WORD1(v126);
    __int16 v34 = (unsigned __int16)v127;
    uint64_t v28 = (unsigned __int16)v46;
    unint64_t v33 = (unsigned __int16)v126;
    unint64_t v37 = WORD1(v126);
    LOWORD(v115) = WORD2(v126);
    LOWORD(v116) = HIWORD(v126);
    unint64_t v35 = WORD2(v126);
    unint64_t v39 = HIWORD(v127);
    v36 = HIWORD(v126);
    unint64_t v38 = (unsigned __int16)v127;
    unint64_t v24 = v117 - 4;
    uint64_t v27 = v131;
    if (v117 <= 8)
    {
      v129 = v126;
      uint64_t v53 = WORD2(v126);
      id v52 = HIWORD(v126);
      v130 = v127;
      v128 = v125;
      unint64_t v24 = v117 - 4;
      LOWORD(v11) = v99;
      LOWORD(v12) = v106;
      goto LABEL_26;
    }
  }

    uint64_t v53 = type metadata accessor for EncodingError();
    swift_allocError();
    v55 = v54;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Any, EncodingError.Context));
    v55[3] = a3;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v55);
    (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(a3 - 8) + 16LL))( boxed_opaque_existential_1,  a1,  a3);
    v57 = v6;
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(uint64_t *, void, uint64_t))(*(void *)(v53 - 8) + 104LL))( v55,  *MEMORY[0x1896193B8],  v53);
    swift_willThrow();

    return (unint64_t)v6;
  }

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
  unint64_t v35 = swift_initStackObject();
  *(_OWORD *)(v35 + 16) = xmmword_183720D90;
  *(void *)(v35 + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSDebugDescription");
  *(void *)(v35 + 40) = v36;
  int v59 = 0LL;
  uint64_t v60 = 0xE000000000000000LL;
  _StringGuts.grow(_:)(31LL);
  v37._object = (void *)0x80000001839CA850LL;
  v37._countAndFlagsBits = 0xD00000000000001DLL;
  String.append(_:)(v37);
  v63 = v12;
  type metadata accessor for NSPropertyListFormat(0LL);
  _print_unlocked<A, B>(_:_:)();
  *(void *)(v35 + 72) = MEMORY[0x189617FA8];
  *(void *)(v35 + 4_Block_object_dispose((const void *)(v11 - 240), 8) = 0LL;
  *(void *)(v35 + 56) = 0xE000000000000000LL;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Any>);
  unint64_t v38 = (void *)static _DictionaryStorage.allocate(capacity:)();
  outlined init with copy of (String, Any)(v35 + 32, (uint64_t)&v59);
  unint64_t v39 = v59;
  uint64_t v40 = v60;
  swift_retain();
  uint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(v39, v40);
  if ((v41 & 1) != 0) {
    goto LABEL_26;
  }
  v38[(result >> 6) + 8] |= 1LL << result;
  int v42 = (uint64_t *)(v38[6] + 16 * result);
  *int v42 = v39;
  v42[1] = v40;
  uint64_t result = (unint64_t)outlined init with take of Any(&v61, (_OWORD *)(v38[7] + 32 * result));
  unint64_t v43 = v38[2];
  unint64_t v25 = __OFADD__(v43, 1LL);
  int v44 = v43 + 1;
  if (v25)
  {
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }

  v38[2] = v44;
  swift_release();
  swift_bridgeObjectRelease();
  static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSCocoaErrorDomain");
  unint64_t v45 = objc_allocWithZone((Class)&OBJC_CLASS___NSError);
  unint64_t v46 = String._bridgeToObjectiveCImpl()();
  swift_bridgeObjectRelease();
  float v6 = objc_msgSend(v45, sel_initWithDomain_code_userInfo_, v46, 3852, _NativeDictionary.bridged()());
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  unint64_t v47 = objc_msgSend(v6, sel_domain);
  unint64_t v48 = static String._unconditionallyBridgeFromObjectiveC(_:)(v47);
  unint64_t v50 = v49;

  if (v48 == static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSCocoaErrorDomain") && v50 == v51)
  {
LABEL_18:
    swift_bridgeObjectRelease_n();
    goto LABEL_20;
  }

  id v52 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  if ((v52 & 1) != 0) {
    goto LABEL_20;
  }
LABEL_28:
  __break(1u);
  return result;
}

    uint64_t v8 = (v16 - 1) & v16;
    int v14 = __clz(__rbit64(v16)) + (v15 << 6);
    unint64_t v11 = v15;
  }

  __break(1u);
LABEL_39:
  __break(1u);
LABEL_40:
  __break(1u);
  return result;
}

  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  if (!v43)
  {
LABEL_15:
    Hasher._combine(_:)(0);
    unint64_t v11 = v44;
    if (!v44) {
      goto LABEL_16;
    }
LABEL_23:
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    specialized Dictionary<>.hash(into:)(a1, v11);
    swift_bridgeObjectRelease();
    uint64_t v12 = v45;
    if (!v45) {
      goto LABEL_17;
    }
    goto LABEL_24;
  }

  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  if (!v42)
  {
LABEL_15:
    Hasher._combine(_:)(0);
    int v9 = v43;
    if (!v43) {
      goto LABEL_16;
    }
LABEL_23:
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    specialized Dictionary<>.hash(into:)((uint64_t)v60, v9);
    swift_bridgeObjectRelease();
    int v10 = v44;
    if (!v44) {
      goto LABEL_17;
    }
    goto LABEL_24;
  }

  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  int v9 = v41;
  if (v41) {
    goto LABEL_22;
  }
LABEL_16:
  Hasher._combine(_:)(0);
  int v10 = v42;
  if (!v42)
  {
LABEL_17:
    Hasher._combine(_:)(0);
    goto LABEL_24;
  }

        Hasher._combine(_:)(1u);
        swift_bridgeObjectRetain();
        String.hash(into:)();
        swift_bridgeObjectRelease();
        int v14 = v47;
        if (!v47)
        {
LABEL_15:
          Hasher._combine(_:)(0);
          uint64_t v15 = v48;
          if (!v48)
          {
LABEL_16:
            Hasher._combine(_:)(0);
            goto LABEL_24;
          }

  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  if (!v45)
  {
LABEL_15:
    Hasher._combine(_:)(0);
    uint64_t v12 = v46;
    if (!v46) {
      goto LABEL_16;
    }
LABEL_23:
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    specialized Dictionary<>.hash(into:)((uint64_t)v63, v12);
    swift_bridgeObjectRelease();
    unint64_t v13 = v47;
    if (!v47) {
      goto LABEL_17;
    }
    goto LABEL_24;
  }

  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  if (!v74)
  {
LABEL_15:
    Hasher._combine(_:)(0);
    unsigned __int8 v23 = v75;
    if (!v75) {
      goto LABEL_16;
    }
LABEL_23:
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    specialized Dictionary<>.hash(into:)(a1, v23);
    swift_bridgeObjectRelease();
    unint64_t v24 = v76;
    if (!v76) {
      goto LABEL_17;
    }
    goto LABEL_24;
  }

  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  if (!v71)
  {
LABEL_15:
    Hasher._combine(_:)(0);
    unsigned __int8 v23 = v72;
    if (!v72) {
      goto LABEL_16;
    }
LABEL_23:
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    specialized Dictionary<>.hash(into:)((uint64_t)v89, v23);
    swift_bridgeObjectRelease();
    unint64_t v24 = v73;
    if (!v73) {
      goto LABEL_17;
    }
    goto LABEL_24;
  }

  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  if (!v48)
  {
LABEL_15:
    Hasher._combine(_:)(0);
    uint64_t v15 = v49;
    if (!v49) {
      goto LABEL_16;
    }
LABEL_23:
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    specialized Dictionary<>.hash(into:)(a1, v15);
    swift_bridgeObjectRelease();
    uint64_t v16 = v50;
    if (!v50) {
      goto LABEL_17;
    }
    goto LABEL_24;
  }

  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  if (!v47)
  {
LABEL_15:
    Hasher._combine(_:)(0);
    int v14 = v48;
    if (!v48) {
      goto LABEL_16;
    }
LABEL_23:
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    specialized Dictionary<>.hash(into:)((uint64_t)v65, v14);
    swift_bridgeObjectRelease();
    uint64_t v15 = v49;
    if (!v49) {
      goto LABEL_17;
    }
    goto LABEL_24;
  }

        Hasher._combine(_:)(1u);
        swift_bridgeObjectRetain();
        specialized Dictionary<>.hash(into:)(a1, v15);
        swift_bridgeObjectRelease();
        uint64_t v16 = v47;
        if (!v47) {
          goto LABEL_16;
        }
        goto LABEL_22;
      }
    }

    else
    {
      Hasher._combine(_:)(0);
    }

    outlined retain of LocalePreferences(&v42);
    if (!v44) {
      goto LABEL_13;
    }
    goto LABEL_19;
  }

  Hasher._combine(_:)(0);
  return swift_unknownObjectRelease();
}

  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  int v14 = v46;
  if (v46) {
    goto LABEL_22;
  }
LABEL_16:
  Hasher._combine(_:)(0);
  uint64_t v15 = v47;
  if (!v47)
  {
LABEL_17:
    Hasher._combine(_:)(0);
    goto LABEL_24;
  }

        Hasher._combine(_:)(1u);
        swift_bridgeObjectRetain();
        String.hash(into:)();
        swift_bridgeObjectRelease();
        if (!v83)
        {
LABEL_15:
          Hasher._combine(_:)(0);
          char v20 = v84;
          if (!v84) {
            goto LABEL_16;
          }
          goto LABEL_23;
        }

  unint64_t v21 = String._insertingQueryResolveFlags(_:)(v51, v8, v20);
  unsigned __int8 v23 = v22;
  swift_bridgeObjectRelease();
  v84 = 0;
  v77 = 0;
  if (!v23)
  {
    unint64_t v26 = 0;
    uint64_t v27 = 0;
    goto LABEL_34;
  }

  if ((v23 & 0x1000000000000000LL) != 0)
  {
    id v52 = v17;
    *(void *)&v114[0] = v21;
    *((void *)&v114[0] + 1) = v23;
    lazy protocol witness table accessor for type String and conformance String();
    swift_bridgeObjectRetain();
    StringProtocol._ephemeralString.getter();
    unint64_t v41 = (void *)String._bridgeToObjectiveCImpl()();
    swift_bridgeObjectRelease();
    int v42 = (unsigned __int16 *)objc_msgSend(v41, sel__fastCharacterContents);
    unint64_t v43 = v41;
    if (v42)
    {
      *(void *)&v114[0] = v21;
      *((void *)&v114[0] + 1) = v23;
      StringProtocol._ephemeralString.getter();
      int v44 = (void *)String._bridgeToObjectiveCImpl()();
      swift_bridgeObjectRelease();
      unint64_t v45 = objc_msgSend(v44, sel_length);
      swift_unknownObjectRelease();
      unint64_t v46 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)( v42,  (uint64_t)v45,  0x40u,  1);
    }

    else
    {
      unint64_t v46 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v21, v23, 0x40u, 1);
    }

    unint64_t v48 = v46;
    swift_bridgeObjectRelease();
    size_t v17 = v52;
    if ((v48 & 1) != 0) {
      goto LABEL_33;
    }
LABEL_50:
    swift_bridgeObjectRelease();
    uint64_t v31 = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    goto LABEL_51;
  }

  if ((v23 & 0x2000000000000000LL) != 0)
  {
    unint64_t v25 = HIBYTE(v23) & 0xF;
    *(void *)&v114[0] = v21;
    *((void *)&v114[0] + 1) = v23 & 0xFFFFFFFFFFFFFFLL;
    unint64_t v24 = (char *)v114;
  }

  else if ((v21 & 0x1000000000000000LL) != 0)
  {
    unint64_t v24 = (char *)((v23 & 0xFFFFFFFFFFFFFFFLL) + 32);
    unint64_t v25 = v21 & 0xFFFFFFFFFFFFLL;
  }

  else
  {
    unint64_t v24 = (char *)_StringObject.sharedUTF8.getter();
  }

  if (!specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v24, v25, 0x40u, 1)) {
    goto LABEL_50;
  }
LABEL_33:
  uint64_t v27 = v84;
  unint64_t v26 = v77;
LABEL_34:
  swift_bridgeObjectRelease();
  *(void *)&v64 = v17;
  BYTE8(v64) = v27;
  BYTE9(v64) = v83;
  BYTE10(v64) = v82;
  BYTE11(v64) = v81;
  BYTE12(v64) = v80;
  BYTE13(v64) = v79;
  BYTE14(v64) = v78;
  HIBYTE(v64) = v26;
  LOBYTE(v65) = v76;
  *((void *)&v65 + 1) = v63;
  *(void *)&v66 = v62;
  *((void *)&v66 + 1) = v61;
  *(void *)&v67 = v60;
  *((void *)&v67 + 1) = v59;
  *(void *)&v68 = v58;
  *((void *)&v68 + 1) = v57;
  *(void *)&v69 = v56;
  *((void *)&v69 + 1) = v55;
  LOBYTE(v70) = v75;
  *((void *)&v70 + 1) = v14;
  *(void *)&v71 = v16;
  *((void *)&v71 + 1) = v21;
  *(void *)v72 = v23;
  *(void *)&v72[8] = v54;
  *(void *)&v72[16] = v53;
  v72[24] = v74;
  v72[25] = v73;
  v114[0] = v64;
  v114[1] = v65;
  v114[4] = v68;
  v114[5] = v69;
  v114[2] = v66;
  v114[3] = v67;
  *(_OWORD *)((char *)v115 + 10) = *(_OWORD *)&v72[10];
  v114[7] = v71;
  v115[0] = *(_OWORD *)v72;
  v114[6] = v70;
  outlined retain of URLComponents((uint64_t)&v64);
  uint64_t v28 = URLComponents._URLComponents.computedString.getter();
  uint64_t v30 = v29;
  outlined release of URLComponents((uint64_t)&v64);
  if (v30)
  {
    swift_bridgeObjectRelease();
    outlined release of URLComponents((uint64_t)&v64);
    int v3 = v28;
    uint64_t v5 = v30;
  }

  else
  {
    outlined release of URLComponents((uint64_t)&v64);
  }

  v19[10] = v24[10];
  v19[11] = v24[11];
  v20[0] = v25[0];
  *(_OWORD *)((char *)v20 + 9) = *(_OWORD *)((char *)v25 + 9);
  v19[6] = v24[6];
  v19[7] = v24[7];
  v19[8] = v24[8];
  v19[9] = v24[9];
  v19[2] = v24[2];
  v19[3] = v24[3];
  v19[4] = v24[4];
  v19[5] = v24[5];
  v19[0] = v24[0];
  v19[1] = v24[1];
  outlined release of Locale((uint64_t)v19);
  uint64_t result = outlined destroy of Any?((uint64_t)&v21, &demangling cache variable for type metadata for Any?);
  uint64_t v16 = v1[3];
  if (v16 < 2) {
    return (uint64_t)v1;
  }
  size_t v17 = v16 >> 1;
  uint64_t v15 = __OFSUB__(v17, v2);
  int v18 = v17 - v2;
  if (!v15)
  {
    v1[2] = v18;
    return (uint64_t)v1;
  }

  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)(a1, v8);
  swift_bridgeObjectRelease();
LABEL_22:
  unint64_t v11 = v42;
  int v10 = v43;
  unint64_t v13 = v44;
  uint64_t v12 = v45;
  int v14 = v46;
  if (v42)
  {
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0LL);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( (unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef,  (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef,  (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
    uint64_t v15 = v10;
    uint64_t v16 = v13;
    size_t v17 = v12;
    int v18 = v14;
    unint64_t v19 = v11;
    _CFObject.hash(into:)();
    if (v10) {
      goto LABEL_24;
    }
  }

  else
  {
    Hasher._combine(_:)(0);
    unint64_t v24 = v14;
    unint64_t v25 = v10;
    unint64_t v26 = v13;
    uint64_t v27 = v12;
    if (v10)
    {
LABEL_24:
      Hasher._combine(_:)(1u);
      type metadata accessor for CFDictionaryRef(0LL);
      lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( (unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef,  (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef,  (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
      char v20 = v10;
      _CFObject.hash(into:)();

      if (v13) {
        goto LABEL_25;
      }
      goto LABEL_30;
    }
  }

  Hasher._combine(_:)(0);
  if (v13)
  {
LABEL_25:
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0LL);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( (unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef,  (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef,  (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
    unint64_t v21 = v13;
    _CFObject.hash(into:)();

    if (v12) {
      goto LABEL_26;
    }
LABEL_31:
    Hasher._combine(_:)(0);
    if (v14) {
      goto LABEL_27;
    }
    goto LABEL_32;
  }

  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)((uint64_t)v53, v6);
  swift_bridgeObjectRelease();
LABEL_22:
  int v9 = v41;
  uint64_t v8 = v42;
  unint64_t v11 = v43;
  int v10 = v44;
  uint64_t v12 = v45;
  if (v41)
  {
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0LL);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( (unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef,  (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef,  (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
    unint64_t v13 = v8;
    int v14 = v11;
    uint64_t v15 = v10;
    uint64_t v16 = v12;
    size_t v17 = v9;
    _CFObject.hash(into:)();
    if (v8) {
      goto LABEL_24;
    }
  }

  else
  {
    Hasher._combine(_:)(0);
    unint64_t v22 = v12;
    unsigned __int8 v23 = v8;
    unint64_t v24 = v11;
    unint64_t v25 = v10;
    if (v8)
    {
LABEL_24:
      Hasher._combine(_:)(1u);
      type metadata accessor for CFDictionaryRef(0LL);
      lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( (unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef,  (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef,  (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
      int v18 = v8;
      _CFObject.hash(into:)();

      if (v11) {
        goto LABEL_25;
      }
      goto LABEL_30;
    }
  }

  Hasher._combine(_:)(0);
  if (v11)
  {
LABEL_25:
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0LL);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( (unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef,  (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef,  (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
    unint64_t v19 = v11;
    _CFObject.hash(into:)();

    if (v10) {
      goto LABEL_26;
    }
LABEL_31:
    Hasher._combine(_:)(0);
    if (v12) {
      goto LABEL_27;
    }
    goto LABEL_32;
  }

  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)((uint64_t)v53, v6);
  swift_bridgeObjectRelease();
LABEL_22:
  int v9 = v41;
  uint64_t v8 = v42;
  unint64_t v11 = v43;
  int v10 = v44;
  uint64_t v12 = v45;
  if (v41)
  {
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0LL);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( (unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef,  (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef,  (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
    unint64_t v13 = v8;
    int v14 = v11;
    uint64_t v15 = v10;
    uint64_t v16 = v12;
    size_t v17 = v9;
    _CFObject.hash(into:)();
    if (v8) {
      goto LABEL_24;
    }
  }

  else
  {
    Hasher._combine(_:)(0);
    unint64_t v22 = v12;
    unsigned __int8 v23 = v8;
    unint64_t v24 = v11;
    unint64_t v25 = v10;
    if (v8)
    {
LABEL_24:
      Hasher._combine(_:)(1u);
      type metadata accessor for CFDictionaryRef(0LL);
      lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( (unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef,  (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef,  (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
      int v18 = v8;
      _CFObject.hash(into:)();

      if (v11) {
        goto LABEL_25;
      }
      goto LABEL_30;
    }
  }

  Hasher._combine(_:)(0);
  if (v11)
  {
LABEL_25:
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0LL);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( (unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef,  (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef,  (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
    unint64_t v19 = v11;
    _CFObject.hash(into:)();

    if (v10) {
      goto LABEL_26;
    }
LABEL_31:
    Hasher._combine(_:)(0);
    if (v12) {
      goto LABEL_27;
    }
    goto LABEL_32;
  }

        Hasher._combine(_:)(1u);
        swift_bridgeObjectRetain();
        String.hash(into:)();
        swift_bridgeObjectRelease();
        if (!v89)
        {
LABEL_15:
          Hasher._combine(_:)(0);
          unint64_t v21 = v90;
          if (!v90) {
            goto LABEL_16;
          }
          goto LABEL_23;
        }

        Hasher._combine(_:)(1u);
        swift_bridgeObjectRetain();
        String.hash(into:)();
        swift_bridgeObjectRelease();
        if (!v82)
        {
LABEL_15:
          Hasher._combine(_:)(0);
          char v20 = v83;
          if (!v83) {
            goto LABEL_16;
          }
          goto LABEL_23;
        }

  v69 = v19;
  v71 = v18;
  if ((v17 & 6) != 0)
  {
    unint64_t v24 = v79;
    v65 = v21;
    v67 = v20;
    if (v4 == v79)
    {
      unint64_t v26 = v75;
      unint64_t v25 = v77;
      uint64_t v27 = v73;
      uint64_t v28 = v81;
      if (v79 >= v22) {
        goto LABEL_30;
      }
    }

    else
    {
      uint64_t v28 = BigSubstring.UTF8View.index(before:)();
      uint64_t v27 = v40;
      unint64_t v26 = v41;
      unint64_t v25 = v42;
      unint64_t v24 = v28 >> 10;
      if (v28 >> 10 >= v84)
      {
LABEL_30:
        v82 = v28;
        v74 = v27;
        v76 = v26;
        v78 = v25;
        uint64_t result = swift_bridgeObjectRelease();
        uint64_t v32 = 0LL;
        unint64_t v33 = 0LL;
        __int16 v34 = 0LL;
        unint64_t v35 = 0LL;
        v36 = 0LL;
        unint64_t v37 = 0LL;
        unint64_t v38 = 2LL;
        unint64_t v39 = 2LL;
        goto LABEL_39;
      }
    }

    specialized BidirectionalCollection<>._matchesSeparators(_:from:reverse:)(v23, v28, v27, v26, v25, 1, &v85);
    unint64_t v38 = v88;
    if (v88 != 2)
    {
      unint64_t v37 = v91;
      unint64_t v39 = v92;
      unint64_t v35 = v89;
      v36 = v90;
      unint64_t v33 = v86;
      __int16 v34 = v87;
      uint64_t v32 = v85;
      uint64_t result = swift_bridgeObjectRelease();
LABEL_41:
      uint64_t v31 = v65;
      id v29 = v67;
      goto LABEL_42;
    }

    while (1)
    {
      specialized BidirectionalCollection<>._matchesSeparators(_:from:reverse:)(v23, v28, v27, v26, v25, 0, &v85);
      unint64_t v38 = v88;
      if (v88 != 2) {
        break;
      }
      uint64_t v28 = BigSubstring.UTF8View.index(after:)();
      uint64_t v27 = v43;
      unint64_t v26 = v44;
      unint64_t v25 = v45;
      unint64_t v24 = v28 >> 10;
      if (v28 >> 10 >= v84) {
        goto LABEL_30;
      }
    }

    v82 = v28;
    v74 = v27;
    v76 = v26;
    v78 = v25;
    unint64_t v37 = v91;
    unint64_t v39 = v92;
    unint64_t v35 = v89;
    v36 = v90;
    unint64_t v33 = v86;
    __int16 v34 = v87;
    uint64_t v32 = v85;
    uint64_t result = swift_bridgeObjectRelease();
LABEL_39:
    if (v24 == v84)
    {
      uint64_t v32 = v82;
      unint64_t v33 = v74;
      __int16 v34 = v76;
      unint64_t v38 = v78;
      unint64_t v35 = v82;
      v36 = v74;
      unint64_t v37 = v76;
      unint64_t v39 = v78;
    }

    goto LABEL_41;
  }

  id v29 = v20;
  uint64_t v30 = v21;
  uint64_t result = swift_bridgeObjectRelease();
  uint64_t v31 = v30;
  uint64_t v32 = 0LL;
  unint64_t v33 = 0LL;
  __int16 v34 = 0LL;
  unint64_t v35 = 0LL;
  v36 = 0LL;
  unint64_t v37 = 0LL;
  unint64_t v38 = 2LL;
  unint64_t v39 = 2LL;
LABEL_42:
  *a3 = v71;
  a3[1] = v69;
  a3[2] = v29;
  a3[3] = v31;
  a3[4] = v35;
  a3[5] = v36;
  a3[6] = v37;
  a3[7] = v39;
  a3[8] = v32;
  a3[9] = v33;
  a3[10] = v34;
  a3[11] = v38;
  return result;
}

        swift_bridgeObjectRetain();
        specialized CocoaError.init<A>(_:path:underlying:variant:source:destination:)( (uint64_t (*)(void))v11,  a5,  a6,  v14,  0LL,  0LL,  0LL,  0LL,  (void *(*)(void *__return_ptr, void *, uint64_t))v26,  0LL,  0LL);
        break;
    }
  }

  else
  {
    swift_bridgeObjectRetain();
    specialized CocoaError.init<A>(_:path:underlying:variant:source:destination:)( (uint64_t (*)(void))0x100,  a2,  a3,  0LL,  0LL,  0LL,  0LL,  0LL,  (void *(*)(void *__return_ptr, void *, uint64_t))v26,  0LL,  0LL);
  }

  return swift_willThrow();
}

          unint64_t v33 = 256LL;
        }

  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  if (!v73)
  {
LABEL_15:
    Hasher._combine(_:)(0);
    unint64_t v21 = v74;
    if (!v74) {
      goto LABEL_16;
    }
LABEL_23:
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    specialized Dictionary<>.hash(into:)(a1, v21);
    swift_bridgeObjectRelease();
    unint64_t v22 = v75;
    if (!v75) {
      goto LABEL_17;
    }
    goto LABEL_24;
  }

  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  if (!v70)
  {
LABEL_15:
    Hasher._combine(_:)(0);
    unint64_t v19 = v71;
    if (!v71) {
      goto LABEL_16;
    }
LABEL_23:
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    specialized Dictionary<>.hash(into:)((uint64_t)v88, v19);
    swift_bridgeObjectRelease();
    char v20 = v72;
    if (!v72) {
      goto LABEL_17;
    }
    goto LABEL_24;
  }

        Hasher._combine(_:)(1u);
        swift_bridgeObjectRetain();
        String.hash(into:)();
        swift_bridgeObjectRelease();
        uint64_t v15 = v48;
        if (!v48)
        {
LABEL_15:
          Hasher._combine(_:)(0);
          uint64_t v16 = v49;
          if (!v49)
          {
LABEL_16:
            Hasher._combine(_:)(0);
            goto LABEL_24;
          }

  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  if (!v47)
  {
LABEL_15:
    Hasher._combine(_:)(0);
    int v14 = v48;
    if (!v48) {
      goto LABEL_16;
    }
LABEL_23:
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    specialized Dictionary<>.hash(into:)((uint64_t)v65, v14);
    swift_bridgeObjectRelease();
    uint64_t v15 = v49;
    if (!v49) {
      goto LABEL_17;
    }
    goto LABEL_24;
  }

  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  int v14 = v46;
  if (v46) {
    goto LABEL_22;
  }
LABEL_16:
  Hasher._combine(_:)(0);
  uint64_t v15 = v47;
  if (!v47)
  {
LABEL_17:
    Hasher._combine(_:)(0);
    goto LABEL_24;
  }

  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)((uint64_t)v69, v13);
  swift_bridgeObjectRelease();
LABEL_22:
  int v14 = v53;
  unint64_t v46 = v2;
  unint64_t v47 = v3;
  if (v53)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    specialized Dictionary<>.hash(into:)((uint64_t)v69, v14);
    swift_bridgeObjectRelease();
  }

  else
  {
    Hasher._combine(_:)(0);
  }

  uint64_t v16 = v54;
  uint64_t v15 = v55;
  int v18 = v56;
  size_t v17 = v57;
  unint64_t v19 = v58;
  if (v54)
  {
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0LL);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( (unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef,  (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef,  (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
    char v20 = v15;
    unint64_t v21 = v18;
    unint64_t v22 = v17;
    unsigned __int8 v23 = v19;
    unint64_t v24 = v16;
    _CFObject.hash(into:)();
  }

  else
  {
    Hasher._combine(_:)(0);
    unint64_t v25 = v19;
    unint64_t v26 = v15;
    uint64_t v27 = v18;
    uint64_t v28 = v17;
  }

  unint64_t v45 = v16;
  if (v15)
  {
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0LL);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( (unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef,  (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef,  (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
    id v29 = v15;
    _CFObject.hash(into:)();

    if (v18) {
      goto LABEL_30;
    }
  }

  else
  {
    Hasher._combine(_:)(0);
    if (v18)
    {
LABEL_30:
      Hasher._combine(_:)(1u);
      type metadata accessor for CFDictionaryRef(0LL);
      lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( (unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef,  (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef,  (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
      uint64_t v30 = v18;
      _CFObject.hash(into:)();

      if (v17) {
        goto LABEL_31;
      }
LABEL_35:
      Hasher._combine(_:)(0);
      if (v19) {
        goto LABEL_32;
      }
      goto LABEL_36;
    }
  }

  Hasher._combine(_:)(0);
  if (!v17) {
    goto LABEL_35;
  }
LABEL_31:
  Hasher._combine(_:)(1u);
  type metadata accessor for CFDictionaryRef(0LL);
  lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( (unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef,  (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef,  (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
  uint64_t v31 = v17;
  _CFObject.hash(into:)();

  if (v19)
  {
LABEL_32:
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0LL);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( (unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef,  (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef,  (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
    uint64_t v32 = v19;
    _CFObject.hash(into:)();

    goto LABEL_37;
  }

  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)((uint64_t)v68, v15);
  swift_bridgeObjectRelease();
LABEL_22:
  uint64_t v16 = v52;
  unint64_t v46 = v5;
  if (v52)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    specialized Dictionary<>.hash(into:)((uint64_t)v68, v16);
    swift_bridgeObjectRelease();
  }

  else
  {
    Hasher._combine(_:)(0);
  }

  size_t v17 = v53;
  int v18 = v54;
  char v20 = v55;
  unint64_t v19 = v56;
  unint64_t v21 = v57;
  if (v53)
  {
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0LL);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( (unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef,  (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef,  (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
    unint64_t v22 = v18;
    unsigned __int8 v23 = v20;
    unint64_t v24 = v19;
    unint64_t v25 = v21;
    unint64_t v26 = v17;
    _CFObject.hash(into:)();
  }

  else
  {
    Hasher._combine(_:)(0);
    uint64_t v27 = v21;
    uint64_t v28 = v18;
    id v29 = v20;
    uint64_t v30 = v19;
  }

  unint64_t v45 = v17;
  if (v18)
  {
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0LL);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( (unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef,  (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef,  (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
    uint64_t v31 = v18;
    _CFObject.hash(into:)();

    if (v20) {
      goto LABEL_30;
    }
  }

  else
  {
    Hasher._combine(_:)(0);
    if (v20)
    {
LABEL_30:
      Hasher._combine(_:)(1u);
      type metadata accessor for CFDictionaryRef(0LL);
      lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( (unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef,  (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef,  (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
      uint64_t v32 = v20;
      _CFObject.hash(into:)();

      if (v19) {
        goto LABEL_31;
      }
LABEL_35:
      Hasher._combine(_:)(0);
      if (v21) {
        goto LABEL_32;
      }
      goto LABEL_36;
    }
  }

  Hasher._combine(_:)(0);
  if (!v19) {
    goto LABEL_35;
  }
LABEL_31:
  Hasher._combine(_:)(1u);
  type metadata accessor for CFDictionaryRef(0LL);
  lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( (unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef,  (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef,  (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
  unint64_t v33 = v19;
  _CFObject.hash(into:)();

  if (v21)
  {
LABEL_32:
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0LL);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( (unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef,  (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef,  (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
    __int16 v34 = v21;
    _CFObject.hash(into:)();

    goto LABEL_37;
  }

  if (v5 >= 0xFE) {
    return (*(uint64_t (**)(uint64_t))(v4 + 48))(a1);
  }
  int v14 = *(unsigned __int8 *)(a1 + v7 + 1);
  if (v14 < 2) {
    return 0LL;
  }
  uint64_t v15 = (v14 + 2147483646) & 0x7FFFFFFF;
  return (v15 + 1);
}

  if (v5 >= 0xFE) {
    return (*(uint64_t (**)(void))(v4 + 48))();
  }
  uint64_t v15 = *(unsigned __int8 *)(v7 + a1);
  if (v15 < 2) {
    return 0LL;
  }
  return ((v15 + 2147483646) & 0x7FFFFFFF) + 1;
}

          __break(1u);
          goto LABEL_22;
        }

        --v8;
        ++v6;
        if (v5 + v6 + 5 >= v7) {
          goto LABEL_12;
        }
      }

      __break(1u);
LABEL_19:
      __break(1u);
LABEL_20:
      __break(1u);
      goto LABEL_21;
    }
  }

  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)((uint64_t)v53, v6);
  swift_bridgeObjectRelease();
LABEL_22:
  int v9 = v41;
  uint64_t v8 = v42;
  unint64_t v11 = v43;
  int v10 = v44;
  uint64_t v12 = v45;
  if (v41)
  {
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0LL);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( (unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef,  (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef,  (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
    unint64_t v13 = v8;
    int v14 = v11;
    uint64_t v15 = v10;
    uint64_t v16 = v12;
    size_t v17 = v9;
    _CFObject.hash(into:)();
    if (v8) {
      goto LABEL_24;
    }
  }

  else
  {
    Hasher._combine(_:)(0);
    unint64_t v22 = v12;
    unsigned __int8 v23 = v8;
    unint64_t v24 = v11;
    unint64_t v25 = v10;
    if (v8)
    {
LABEL_24:
      Hasher._combine(_:)(1u);
      type metadata accessor for CFDictionaryRef(0LL);
      lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( (unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef,  (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef,  (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
      int v18 = v8;
      _CFObject.hash(into:)();

      if (v11) {
        goto LABEL_25;
      }
      goto LABEL_30;
    }
  }

  Hasher._combine(_:)(0);
  if (v11)
  {
LABEL_25:
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0LL);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( (unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef,  (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef,  (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
    unint64_t v19 = v11;
    _CFObject.hash(into:)();

    if (v10) {
      goto LABEL_26;
    }
LABEL_31:
    Hasher._combine(_:)(0);
    if (v12) {
      goto LABEL_27;
    }
    goto LABEL_32;
  }

          uint64_t result = _assertionFailure(_:_:file:line:flags:)();
          __break(1u);
          return result;
        }
      }

      else
      {
        outlined destroy of _FileManagerImpl((uint64_t)v29);
      }

      return 1;
    }
  }

  else
  {
    swift_bridgeObjectRelease();
  }

  return 0;
}

  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  if (!v58)
  {
LABEL_15:
    Hasher._combine(_:)(0);
    unint64_t v13 = v59;
    if (!v59) {
      goto LABEL_16;
    }
LABEL_23:
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    specialized Dictionary<>.hash(into:)(a1, v13);
    swift_bridgeObjectRelease();
    int v14 = v60;
    if (!v60) {
      goto LABEL_17;
    }
    goto LABEL_24;
  }

  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  if (!v56)
  {
LABEL_15:
    Hasher._combine(_:)(0);
    unint64_t v11 = v57;
    if (!v57) {
      goto LABEL_16;
    }
LABEL_23:
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    specialized Dictionary<>.hash(into:)((uint64_t)v74, v11);
    swift_bridgeObjectRelease();
    uint64_t v12 = v58;
    if (!v58) {
      goto LABEL_17;
    }
    goto LABEL_24;
  }

  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)((uint64_t)v75, v14);
  swift_bridgeObjectRelease();
LABEL_22:
  uint64_t v15 = v59;
  uint64_t v53 = a2;
  if (v59)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    specialized Dictionary<>.hash(into:)((uint64_t)v75, v15);
    swift_bridgeObjectRelease();
  }

  else
  {
    Hasher._combine(_:)(0);
  }

  size_t v17 = v60;
  uint64_t v16 = v61;
  unint64_t v19 = v62;
  int v18 = v63;
  char v20 = v64;
  if (v60)
  {
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0LL);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( (unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef,  (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef,  (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
    unint64_t v21 = v16;
    unint64_t v22 = v19;
    unsigned __int8 v23 = v18;
    unint64_t v24 = v20;
    unint64_t v25 = v17;
    _CFObject.hash(into:)();
    if (v16) {
      goto LABEL_27;
    }
  }

  else
  {
    Hasher._combine(_:)(0);
    uint64_t v30 = v20;
    uint64_t v31 = v16;
    uint64_t v32 = v19;
    unint64_t v33 = v18;
    if (v16)
    {
LABEL_27:
      Hasher._combine(_:)(1u);
      type metadata accessor for CFDictionaryRef(0LL);
      lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( (unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef,  (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef,  (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
      unint64_t v26 = v16;
      _CFObject.hash(into:)();

      if (v19) {
        goto LABEL_28;
      }
      goto LABEL_33;
    }
  }

  Hasher._combine(_:)(0);
  if (v19)
  {
LABEL_28:
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0LL);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( (unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef,  (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef,  (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
    uint64_t v27 = v19;
    _CFObject.hash(into:)();

    if (v18) {
      goto LABEL_29;
    }
LABEL_34:
    Hasher._combine(_:)(0);
    if (v20) {
      goto LABEL_30;
    }
    goto LABEL_35;
  }

  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  if (!v58)
  {
LABEL_15:
    Hasher._combine(_:)(0);
    unint64_t v13 = v59;
    if (!v59) {
      goto LABEL_16;
    }
LABEL_23:
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    specialized Dictionary<>.hash(into:)(a1, v13);
    swift_bridgeObjectRelease();
    int v14 = v60;
    if (!v60) {
      goto LABEL_17;
    }
    goto LABEL_24;
  }

  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  if (!v56)
  {
LABEL_15:
    Hasher._combine(_:)(0);
    unint64_t v11 = v57;
    if (!v57) {
      goto LABEL_16;
    }
LABEL_23:
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    specialized Dictionary<>.hash(into:)((uint64_t)v74, v11);
    swift_bridgeObjectRelease();
    uint64_t v12 = v58;
    if (!v58) {
      goto LABEL_17;
    }
    goto LABEL_24;
  }

  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  unint64_t v11 = v55;
  if (v55) {
    goto LABEL_22;
  }
LABEL_16:
  Hasher._combine(_:)(0);
  uint64_t v12 = v56;
  if (!v56)
  {
LABEL_17:
    Hasher._combine(_:)(0);
    goto LABEL_24;
  }

      swift_retain();
      swift_retain();
      uint64_t result = swift_retain();
      unint64_t v21 = 0LL;
      while (v21 < *(void *)(v5 + 16))
      {
        ++v21;
        unint64_t v22 = swift_retain();
        _BPlistEncodingFormat.Writer.flattenPlist(_:_:)(v22, a2);
        uint64_t result = swift_release();
        if (v18 == v21)
        {
          swift_release();
          swift_release();
          swift_release();
          goto LABEL_25;
        }
      }

      goto LABEL_28;
    }

    swift_retain();
    swift_retain();
    outlined copy of _BPlistEncodingFormat.Reference.Backing(v3, v4, v5, v6);
    swift_retain();
    swift_retain();
    uint64_t result = swift_retain();
    uint64_t v16 = 0LL;
    while (v16 < *(void *)(v4 + 16))
    {
      ++v16;
      size_t v17 = swift_retain();
      _BPlistEncodingFormat.Writer.flattenPlist(_:_:)(v17, a2);
      uint64_t result = swift_release();
      if (v15 == v16)
      {
        swift_release();
        swift_release();
        int v18 = *(void *)(v5 + 16);
        if (v18) {
          goto LABEL_21;
        }
        goto LABEL_25;
      }
    }

        Hasher._combine(_:)(1u);
        swift_bridgeObjectRetain();
        String.hash(into:)();
        swift_bridgeObjectRelease();
        if (!v89)
        {
LABEL_15:
          Hasher._combine(_:)(0);
          unint64_t v21 = v90;
          if (!v90) {
            goto LABEL_16;
          }
          goto LABEL_23;
        }

        Hasher._combine(_:)(1u);
        swift_bridgeObjectRetain();
        String.hash(into:)();
        swift_bridgeObjectRelease();
        unint64_t v22 = v90;
        if (!v90) {
          goto LABEL_16;
        }
        goto LABEL_22;
      }

      outlined init with take of LocalePreferences?( (uint64_t)v105,  (uint64_t)v85,  (uint64_t *)&demangling cache variable for type metadata for LocalePreferences?);
      unsigned __int8 v23 = v85;
    }

    else
    {
      Hasher._combine(_:)(0);
      unsigned __int8 v23 = v86;
    }

    outlined retain of LocalePreferences(v23);
    if (!v88) {
      goto LABEL_14;
    }
    goto LABEL_20;
  }

  uint64_t v15 = 1;
LABEL_5:
  Hasher._combine(_:)(v15);
  swift_unknownObjectRelease();
  size_t v17 = v83;
LABEL_60:
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  int v59 = v3 + *(int *)(a2 + 40);
  if ((*(_BYTE *)(v59 + 8) & 1) != 0)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    uint64_t v60 = *(void *)v59;
    Hasher._combine(_:)(1u);
    if ((v60 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
      v61 = v60;
    }
    else {
      v61 = 0LL;
    }
    Hasher._combine(_:)(v61);
  }

  v62 = v84;
  outlined init with take of LocalePreferences?( v59 + 16,  (uint64_t)v106,  &demangling cache variable for type metadata for NumberFormatStyleConfiguration.Precision?);
  specialized Optional<A>.hash(into:)();
  v63 = *(unsigned __int8 *)(v59 + 73);
  if (v63 == 2)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    v64 = v63 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v64);
  }

  v65 = *(unsigned int *)(v59 + 74);
  if (*(_DWORD *)(v59 + 74) == 2)
  {
    LOBYTE(v66) = 0;
  }

  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v65 & 1);
    Hasher._combine(_:)((v65 >> 8) & 1);
    Hasher._combine(_:)(WORD1(v65) & 1);
    v66 = BYTE3(v65) & 1;
  }

  Hasher._combine(_:)(v66);
  v67 = *(unsigned __int8 *)(v59 + 78);
  if (v67 == 2)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    v68 = v67 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v68);
  }

  v69 = (int *)type metadata accessor for CurrencyFormatStyleConfiguration.Collection(0LL);
  outlined init with copy of FloatingPointRoundingRule?(v59 + v69[9], (uint64_t)v11);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v62 + 48))(v11, 1LL, v17) == 1)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    v70 = v82;
    (*(void (**)(char *, char *, uint64_t))(v62 + 32))(v82, v11, v17);
    Hasher._combine(_:)(1u);
    dispatch thunk of Hashable.hash(into:)();
    (*(void (**)(char *, uint64_t))(v62 + 8))(v70, v17);
  }

  v71 = v59 + v69[10];
  v72 = *(unsigned __int8 *)(v71 + 8);
  if (v72 == 255)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    v73 = *(void *)v71;
    Hasher._combine(_:)(1u);
    if ((v72 & 1) != 0)
    {
      Hasher._combine(_:)(1uLL);
      if ((v73 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
        v74 = v73;
      }
      else {
        v74 = 0LL;
      }
      Hasher._combine(_:)(v74);
    }

    else
    {
      Hasher._combine(_:)(0LL);
      Hasher._combine(_:)(v73);
    }
  }

  Hasher._combine(_:)(*(unsigned __int8 *)(v59 + v69[11]));
  v75 = *(unsigned __int8 *)(v59 + v69[12]);
  if (v75 == 3)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v75);
  }

  v153 = v37 >> 14;
  if (v37 >> 14 == v36 >> 14)
  {
    __break(1u);
    goto LABEL_104;
  }

  swift_bridgeObjectRetain();
  if (Substring.UTF8View.subscript.getter() == 91)
  {
    if (!__OFSUB__(specialized Collection.count.getter(v36, v37, v39, v41), 1LL))
    {
      Substring.UTF8View.index(_:offsetBy:)();
      int v42 = Substring.UTF8View.subscript.getter();
      swift_bridgeObjectRelease();
      if (v42 == 93)
      {
        swift_bridgeObjectRetain();
        unint64_t v43 = Substring.UTF8View.index(after:)();
        if (!__OFSUB__(specialized Collection.count.getter(v36, v37, v39, v41), 1LL))
        {
          if ((unint64_t)Substring.UTF8View.index(_:offsetBy:)() >> 14 >= v43 >> 14)
          {
            v154 = v2;
            int v44 = Substring.subscript.getter();
            unint64_t v46 = v45;
            unint64_t v48 = v47;
            v155 = v49;
            unint64_t v50 = specialized Collection<>.firstIndex(of:)(0x25u, v36, v37, v39, v41);
            if ((v51 & 1) != 0)
            {
              v54 = _ss5SliceV32withContiguousStorageIfAvailableyqd__Sgqd__SRy7ElementQzGKXEKlFSRyxGq_s5Error_pRi_zRi0_zRi__Ri0__r0_lys5UInt8Vqd__Isgyrzo_ABySS8UTF8ViewVGADsAI_pAMRszr__lIetMggrzo_Tpq5Sb_Tg50162_s10Foundation13RFC3986ParserV8validate33_A90579D1FA072CB135F95EF00BA46450LL6string9component22percentEncodingAllowedSbx_AA15URLComponentSetAELLVSbtSyRzlFZSbSRys5I7VGXEfU_10Foundation0nO0VXMtAP15URLComponentSet01_qrstuvW0LLVSbTf1cn_nTf4ndnn_n( v44,  v46,  v48,  v155,  2u,  0);
              if (v54 != 2)
              {
                v62 = v54;
LABEL_44:
                swift_bridgeObjectRelease_n();
LABEL_45:
                swift_bridgeObjectRelease();
                uint64_t v2 = v154;
                if (v62) {
                  goto LABEL_47;
                }
                goto LABEL_46;
              }

              v55 = v48;
              lazy protocol witness table accessor for type Substring and conformance Substring();
              StringProtocol._ephemeralString.getter();
              v56 = v46;
              v57 = (void *)String._bridgeToObjectiveCImpl()();
              swift_bridgeObjectRelease();
              unint64_t v58 = (unsigned __int16 *)objc_msgSend(v57, sel__fastCharacterContents);
              int v59 = v57;
              if (v58)
              {
                StringProtocol._ephemeralString.getter();
                uint64_t v60 = (void *)String._bridgeToObjectiveCImpl()();
                swift_bridgeObjectRelease();
                v61 = objc_msgSend(v60, sel_length);
                swift_unknownObjectRelease();
                v62 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)( v58,  (uint64_t)v61,  2u,  0);
                swift_bridgeObjectRelease_n();
                goto LABEL_45;
              }

              swift_bridgeObjectRetain();
              v120 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)( v44,  v56,  v55,  v155,  2u,  0);
              swift_bridgeObjectRelease_n();
              goto LABEL_86;
            }

            id v52 = v50;
            if (v153 == (unint64_t)Substring.UTF8View.index(after:)() >> 14
              || Substring.UTF8View.subscript.getter() != 50
              || v153 == (unint64_t)Substring.UTF8View.index(after:)() >> 14
              || Substring.UTF8View.subscript.getter() != 53)
            {
              goto LABEL_31;
            }

            if (v52 >> 14 >= v44 >> 14)
            {
              v121 = v46;
              v122 = Substring.subscript.getter();
              v124 = v123;
              v126 = v125;
              v128 = v127;
              v129 = _ss5SliceV32withContiguousStorageIfAvailableyqd__Sgqd__SRy7ElementQzGKXEKlFSRyxGq_s5Error_pRi_zRi0_zRi__Ri0__r0_lys5UInt8Vqd__Isgyrzo_ABySS8UTF8ViewVGADsAI_pAMRszr__lIetMggrzo_Tpq5Sb_Tg50162_s10Foundation13RFC3986ParserV8validate33_A90579D1FA072CB135F95EF00BA46450LL6string9component22percentEncodingAllowedSbx_AA15URLComponentSetAELLVSbtSyRzlFZSbSRys5I7VGXEfU_10Foundation0nO0VXMtAP15URLComponentSet01_qrstuvW0LLVSbTf1cn_nTf4ndnn_n( v122,  v123,  v125,  v127,  2u,  0);
              if (v129 == 2)
              {
                lazy protocol witness table accessor for type Substring and conformance Substring();
                StringProtocol._ephemeralString.getter();
                v130 = (void *)String._bridgeToObjectiveCImpl()();
                swift_bridgeObjectRelease();
                v131 = (unsigned __int16 *)objc_msgSend(v130, sel__fastCharacterContents);
                v132 = v130;
                v133 = v131;
                v134 = v132;
                if (v133)
                {
                  StringProtocol._ephemeralString.getter();
                  v135 = (void *)String._bridgeToObjectiveCImpl()();
                  swift_bridgeObjectRelease();
                  v136 = (uint64_t)objc_msgSend(v135, sel_length);
                  swift_unknownObjectRelease();
                  LOBYTE(v136) = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)( v133,  v136,  2u,  0);
                  swift_bridgeObjectRelease();
                  v121 = v46;
                  if ((v136 & 1) == 0)
                  {
LABEL_31:
                    swift_bridgeObjectRelease();
                    swift_bridgeObjectRelease_n();
                    LODWORD(v2) = v154;
LABEL_46:
                    uint64_t v2 = v2 | 8;
                    goto LABEL_47;
                  }
                }

                else
                {
                  swift_bridgeObjectRetain();
                  v152 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)( v122,  v124,  v126,  v128,  2u,  0);
                  swift_bridgeObjectRelease_n();
                  v121 = v46;
                  if (!v152) {
                    goto LABEL_31;
                  }
                }
              }

              else
              {
                v137 = v129;
                swift_bridgeObjectRelease();
                if ((v137 & 1) == 0) {
                  goto LABEL_31;
                }
              }

              swift_bridgeObjectRetain();
              if (v121 >> 14 >= (unint64_t)Substring.index(after:)() >> 14)
              {
                v138 = Substring.subscript.getter();
                v140 = v139;
                v142 = v141;
                v144 = v143;
                v145 = _ss5SliceV32withContiguousStorageIfAvailableyqd__Sgqd__SRy7ElementQzGKXEKlFSRyxGq_s5Error_pRi_zRi0_zRi__Ri0__r0_lys5UInt8Vqd__Isgyrzo_ABySS8UTF8ViewVGADsAI_pAMRszr__lIetMggrzo_Tpq5Sb_Tg50162_s10Foundation13RFC3986ParserV8validate33_A90579D1FA072CB135F95EF00BA46450LL6string9component22percentEncodingAllowedSbx_AA15URLComponentSetAELLVSbtSyRzlFZSbSRys5I7VGXEfU_10Foundation0nO0VXMtAP15URLComponentSet01_qrstuvW0LLVSbTf1cn_nTf4ndnn_n( v138,  v139,  v141,  v143,  8u,  1);
                if (v145 == 2)
                {
                  lazy protocol witness table accessor for type Substring and conformance Substring();
                  StringProtocol._ephemeralString.getter();
                  v146 = (void *)String._bridgeToObjectiveCImpl()();
                  swift_bridgeObjectRelease();
                  v147 = (unsigned __int16 *)objc_msgSend(v146, sel__fastCharacterContents);
                  v148 = v146;
                  if (v147)
                  {
                    StringProtocol._ephemeralString.getter();
                    v149 = (void *)String._bridgeToObjectiveCImpl()();
                    swift_bridgeObjectRelease();
                    v150 = objc_msgSend(v149, sel_length);
                    swift_unknownObjectRelease();
                    v62 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)( v147,  (uint64_t)v150,  8u,  1);
                    swift_bridgeObjectRelease_n();
                    goto LABEL_44;
                  }

                  swift_bridgeObjectRetain();
                  v120 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)( v138,  v140,  v142,  v144,  8u,  1);
                  swift_bridgeObjectRelease_n();
                  swift_bridgeObjectRelease_n();
                }

                else
                {
                  v151 = v145;
                  swift_bridgeObjectRelease_n();
                  swift_bridgeObjectRelease();
                  v120 = v151 & 1;
                }

  swift_release();
  return v15;
}

  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)((uint64_t)v71, v16);
  swift_bridgeObjectRelease();
LABEL_22:
  size_t v17 = v55;
  unint64_t v48 = v6;
  if (v55)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    specialized Dictionary<>.hash(into:)((uint64_t)v71, v17);
    swift_bridgeObjectRelease();
  }

  else
  {
    Hasher._combine(_:)(0);
  }

  int v18 = v56;
  unint64_t v19 = v57;
  unint64_t v21 = v58;
  char v20 = v59;
  unint64_t v22 = v60;
  if (v56)
  {
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0LL);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef();
    unsigned __int8 v23 = v19;
    unint64_t v24 = v21;
    unint64_t v25 = v20;
    unint64_t v26 = v22;
    uint64_t v27 = v18;
    _CFObject.hash(into:)();
  }

  else
  {
    Hasher._combine(_:)(0);
    uint64_t v28 = v22;
    id v29 = v19;
    uint64_t v30 = v21;
    uint64_t v31 = v20;
  }

  unint64_t v47 = v18;
  if (v19)
  {
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0LL);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef();
    uint64_t v32 = v19;
    _CFObject.hash(into:)();

    if (v21) {
      goto LABEL_30;
    }
  }

  else
  {
    Hasher._combine(_:)(0);
    if (v21)
    {
LABEL_30:
      Hasher._combine(_:)(1u);
      type metadata accessor for CFDictionaryRef(0LL);
      lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef();
      unint64_t v33 = v21;
      _CFObject.hash(into:)();

      if (v20) {
        goto LABEL_31;
      }
LABEL_35:
      Hasher._combine(_:)(0);
      if (v22) {
        goto LABEL_32;
      }
      goto LABEL_36;
    }
  }

  Hasher._combine(_:)(0);
  if (!v20) {
    goto LABEL_35;
  }
LABEL_31:
  Hasher._combine(_:)(1u);
  type metadata accessor for CFDictionaryRef(0LL);
  lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef();
  __int16 v34 = v20;
  _CFObject.hash(into:)();

  if (v22)
  {
LABEL_32:
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0LL);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef();
    unint64_t v35 = v22;
    _CFObject.hash(into:)();

    goto LABEL_37;
  }

  if (v271 == 1)
  {
    if (v189 == 1) {
      goto LABEL_23;
    }
LABEL_33:
    v73 = v264;
    v74 = v271;
    outlined copy of Locale.Subdivision??(v264, v271);
    v75 = v263;
    v76 = v263;
    v77 = v189;
    v78 = v189;
LABEL_34:
    outlined copy of Locale.Subdivision??(v76, v78);
    outlined consume of Locale.Subdivision??(v73, v74);
    outlined consume of Locale.Subdivision??(v75, v77);
    return 0LL;
  }

  if (v189 == 1) {
    goto LABEL_33;
  }
  v79 = v271;
  if (!v271)
  {
    v80 = v264;
    v81 = v263;
    if (!v189)
    {
      v307 = v12;
      v300 = v14;
      v314 = v13;
      v179 = v31;
      v166 = v21;
      v292 = v20;
      v103 = v18;
      v104 = v19;
      v105 = v16;
      v106 = v17;
      v107 = v30;
      v108 = v15;
      v338 = v9;
      v346 = v8;
      v322 = v23;
      v330 = v10;
      outlined copy of Locale.Subdivision??(v264, 0LL);
      outlined copy of Locale.Subdivision??(v263, 0LL);
      unsigned __int8 v23 = v322;
      int v10 = v330;
      int v9 = v338;
      uint64_t v8 = v346;
      uint64_t v15 = v108;
      uint64_t v30 = v107;
      uint64_t v31 = v179;
      int v14 = v300;
      uint64_t v12 = v307;
      unint64_t v13 = v314;
      size_t v17 = v106;
      uint64_t v16 = v105;
      unint64_t v19 = v104;
      int v18 = v103;
      char v20 = v292;
      unint64_t v21 = v166;
      goto LABEL_23;
    }

    outlined copy of Locale.LanguageCode?(v264, 0LL);
LABEL_51:
    v100 = v189;
    outlined copy of Locale.LanguageCode?(v81, v189);
    v101 = v80;
    v102 = v271;
LABEL_52:
    outlined consume of Locale.LanguageCode?(v101, v102);
    outlined consume of Locale.LanguageCode?(v81, v100);
    outlined consume of Locale.Subdivision??(v80, v79);
    return 0LL;
  }

  v80 = v264;
  v81 = v263;
  if (!v189)
  {
    outlined copy of Locale.Subdivision??(v264, v271);
    outlined copy of Locale.Subdivision??(v264, v271);
    outlined copy of Locale.Subdivision??(v264, v271);
    outlined copy of Locale.Subdivision??(v263, 0LL);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_51;
  }

  if (v268 != v267 || v266 != v265)
  {
    v306 = v12;
    v299 = v14;
    v313 = v13;
    v171 = v30;
    v177 = v31;
    v82 = v21;
    v83 = v20;
    v84 = v18;
    v85 = v19;
    v86 = v16;
    v87 = v17;
    v88 = v15;
    v336 = v9;
    v344 = v8;
    v320 = v23;
    v328 = v10;
    v89 = _stringCompareWithSmolCheck(_:_:expecting:)();
    unsigned __int8 v23 = v320;
    int v10 = v328;
    int v9 = v336;
    uint64_t v8 = v344;
    uint64_t v15 = v88;
    uint64_t v30 = v171;
    uint64_t v31 = v177;
    int v14 = v299;
    uint64_t v12 = v306;
    unint64_t v13 = v313;
    size_t v17 = v87;
    uint64_t v16 = v86;
    unint64_t v19 = v85;
    int v18 = v84;
    char v20 = v83;
    unint64_t v21 = v82;
    if ((v89 & 1) == 0) {
      return 0LL;
    }
  }

    closure #2 in String.init<A>(bytes:encoding:)( a1 + 32,  *(void *)(a1 + 16),  v9,  (void (*)(__int128 *, uint64_t, uint64_t, uint64_t, uint64_t))closure #1 in closure #2 in String.init<A>(bytes:encoding:),  &v22);
    if (*((void *)&v22 + 1) < 2uLL)
    {
      uint64_t v12 = swift_bridgeObjectRetain();
      mach_vm_size_t v7 = specialized String.init<A, B>(_validating:as:)(v12, v9);
      if (v13) {
        return (id)v7;
      }
      return 0LL;
    }

    return (id)v22;
  }

  if (a2 > 9)
  {
    int v9 = 2LL;
    if (a2 != 10)
    {
      if (a2 != 2348810496LL) {
        goto LABEL_30;
      }
LABEL_25:
      closure #2 in String.init<A>(bytes:encoding:)( a1 + 32,  *(void *)(a1 + 16),  v9,  (void (*)(__int128 *, uint64_t, uint64_t, uint64_t, uint64_t))closure #1 in closure #3 in String.init<A>(bytes:encoding:),  &v22);
      if (*((void *)&v22 + 1) < 2uLL)
      {
        swift_bridgeObjectRetain();
        mach_vm_size_t v7 = specialized String.init<A, B>(_validating:as:)();
        if (v14) {
          return (id)v7;
        }
        return 0LL;
      }

      return (id)v22;
    }

    goto LABEL_21;
  }

  if (a2 == 1)
  {
    uint64_t v5 = specialized String.init<A, B>(_validating:as:)((char *)(a1 + 32), *(void *)(a1 + 16));
    if (v10) {
      return (id)v5;
    }
    if (one-time initialization token for compatibility1 != -1) {
      swift_once();
    }
    if ((static String.compatibility1 & 1) != 0)
    {
      int v18 = *(void *)(a1 + 16);
      unint64_t v19 = objc_allocWithZone((Class)&OBJC_CLASS___NSString);
      swift_bridgeObjectRetain();
      char v20 = objc_msgSend(v19, sel_initWithBytes_length_encoding_, a1 + 32, v18, 1);
      if (v20)
      {
        unint64_t v21 = v20;
        unint64_t v11 = static String._unconditionallyBridgeFromObjectiveC(_:)(v20);
        swift_bridgeObjectRelease();

        return v11;
      }

      swift_bridgeObjectRelease();
    }

    return 0LL;
  }

  if (a2 != 4)
  {
LABEL_30:
    uint64_t v16 = objc_msgSend( objc_allocWithZone((Class)NSString),  sel_initWithBytes_length_encoding_,  a1 + 32,  *(void *)(a1 + 16),  a2);
    if (v16)
    {
      size_t v17 = v16;
      unint64_t v11 = static String._unconditionallyBridgeFromObjectiveC(_:)(v16);

      return v11;
    }

    return 0LL;
  }

  int v3 = (unsigned __int8 *)(a1 + 32);
  unsigned int v4 = *(void *)(a1 + 16);
  uint64_t v5 = static String._tryFromUTF8(_:)();
  if (!v6)
  {
    mach_vm_size_t v7 = (unint64_t)specialized String.init<A, B>(_validating:as:)(v3, v4);
    if (!v8) {
      return 0LL;
    }
    return (id)v7;
  }

  return (id)v5;
}

    closure #2 in String.init<A>(bytes:encoding:)( (uint64_t)a1,  a2,  v9,  (void (*)(__int128 *, uint64_t, uint64_t, uint64_t, uint64_t))closure #1 in closure #2 in String.init<A>(bytes:encoding:),  &v20);
    if (*((void *)&v20 + 1)) {
      return (id)v20;
    }
    mach_vm_size_t v7 = specialized String.init<A, B>(_validating:as:)((uint64_t)a1, a2, v9);
    if (v12) {
      return (id)v7;
    }
    return 0LL;
  }

  if (a3 > 9)
  {
    int v9 = 2LL;
    if (a3 != 10)
    {
      if (a3 != 2348810496LL) {
        goto LABEL_29;
      }
      goto LABEL_25;
    }

    goto LABEL_21;
  }

  if (a3 == 1)
  {
    uint64_t v5 = specialized String.init<A, B>(_validating:as:)(a1, a2);
    if (v10) {
      return (id)v5;
    }
    if (one-time initialization token for compatibility1 != -1) {
      swift_once();
    }
    if ((static String.compatibility1 & 1) != 0)
    {
      uint64_t v16 = specialized _copyCollectionToContiguousArray<A>(_:)(a1, a2);
      size_t v17 = objc_msgSend( objc_allocWithZone((Class)NSString),  sel_initWithBytes_length_encoding_,  v16 + 32,  *(void *)(v16 + 16),  1);
      if (v17)
      {
        int v18 = v17;
        unint64_t v11 = static String._unconditionallyBridgeFromObjectiveC(_:)(v17);
        swift_release();

        return v11;
      }

      swift_release();
    }

    return 0LL;
  }

  if (a3 != 4)
  {
LABEL_29:
    int v14 = objc_msgSend( objc_allocWithZone((Class)NSString),  sel_initWithBytes_length_encoding_,  a1,  a2,  a3);
    if (v14)
    {
      uint64_t v15 = v14;
      unint64_t v11 = static String._unconditionallyBridgeFromObjectiveC(_:)(v14);

      return v11;
    }

    return 0LL;
  }

  uint64_t v5 = static String._tryFromUTF8(_:)();
  if (!v6)
  {
    mach_vm_size_t v7 = (unint64_t)specialized String.init<A, B>(_validating:as:)((unsigned __int8 *)a1, a2);
    if (!v8) {
      return 0LL;
    }
    return (id)v7;
  }

  return (id)v5;
}

    closure #2 in String.init<A>(bytes:encoding:)( (uint64_t)a1,  a2,  v9,  (void (*)(__int128 *, uint64_t, uint64_t, uint64_t, uint64_t))closure #1 in closure #2 in String.init<A>(bytes:encoding:),  &v20);
    if (*((void *)&v20 + 1) < 2uLL)
    {
      mach_vm_size_t v7 = specialized String.init<A, B>(_validating:as:)((uint64_t)a1, a2, v9);
      if (v12) {
        return (id)v7;
      }
      return 0LL;
    }

    return (id)v20;
  }

  if (a3 > 9)
  {
    int v9 = 2LL;
    if (a3 != 10)
    {
      if (a3 != 2348810496LL) {
        goto LABEL_30;
      }
LABEL_25:
      closure #2 in String.init<A>(bytes:encoding:)( (uint64_t)a1,  a2,  v9,  (void (*)(__int128 *, uint64_t, uint64_t, uint64_t, uint64_t))closure #1 in closure #3 in String.init<A>(bytes:encoding:),  &v20);
      if (*((void *)&v20 + 1) < 2uLL)
      {
        mach_vm_size_t v7 = specialized String.init<A, B>(_validating:as:)();
        if (v13) {
          return (id)v7;
        }
        return 0LL;
      }

      return (id)v20;
    }

    goto LABEL_21;
  }

  if (a3 == 1)
  {
    uint64_t v5 = specialized String.init<A, B>(_validating:as:)(a1, a2);
    if (v10) {
      return (id)v5;
    }
    if (one-time initialization token for compatibility1 != -1) {
      swift_once();
    }
    if ((static String.compatibility1 & 1) != 0)
    {
      size_t v17 = specialized _copyCollectionToContiguousArray<A>(_:)(a1, a2);
      int v18 = objc_msgSend( objc_allocWithZone((Class)NSString),  sel_initWithBytes_length_encoding_,  v17 + 32,  *((void *)v17 + 2),  1);
      if (v18)
      {
        unint64_t v19 = v18;
        unint64_t v11 = static String._unconditionallyBridgeFromObjectiveC(_:)(v18);
        swift_release();

        return v11;
      }

      swift_release();
    }

    return 0LL;
  }

  if (a3 != 4)
  {
LABEL_30:
    uint64_t v15 = objc_msgSend( objc_allocWithZone((Class)NSString),  sel_initWithBytes_length_encoding_,  a1,  a2,  a3);
    if (v15)
    {
      uint64_t v16 = v15;
      unint64_t v11 = static String._unconditionallyBridgeFromObjectiveC(_:)(v15);

      return v11;
    }

    return 0LL;
  }

  uint64_t v5 = static String._tryFromUTF8(_:)();
  if (!v6)
  {
    mach_vm_size_t v7 = (unint64_t)specialized String.init<A, B>(_validating:as:)((unsigned __int8 *)a1, a2);
    if (!v8) {
      return 0LL;
    }
    return (id)v7;
  }

  return (id)v5;
}

      float v6 = v15;
      a1 = (unsigned __int8 *)v7;
      if (!v15) {
        goto LABEL_53;
      }
LABEL_25:
      if ((v5 & 0xC0E0) == 0x80C0)
      {
        if ((v5 & 0x1E) == 0) {
          goto LABEL_52;
        }
        uint64_t v16 = 16;
      }

      else if ((v5 & 0xC0C0F0) == 0x8080E0)
      {
        if ((v5 & 0x200F) == 0 || (v5 & 0x200F) == 0x200D) {
          goto LABEL_52;
        }
        uint64_t v16 = 24;
      }

      else
      {
        if ((v5 & 0xC0C0C0F8) != 0x808080F0 || (v5 & 0x3007) == 0 || __rev16(v5 & 0x3007) > 0x400)
        {
LABEL_52:
          unint64_t v25 = Unicode.UTF8.ForwardParser._invalidLength()();
          uint64_t v30 = (unint64_t)v5 >> ((8 * v25) & 0x38);
          uint64_t v31 = v6 - 8 * v25;
          swift_bridgeObjectRelease();
          return 0LL;
        }

        uint64_t v16 = 32;
      }

      uint64_t v30 = (unint64_t)v5 >> v16;
      uint64_t v31 = v6 - v16;
      size_t v17 = ((1 << (v16 >> 1) << (v16 >> 1)) - 1) & (v5 + 16843009);
      if (v17) {
        goto LABEL_37;
      }
      goto LABEL_5;
    }

    lazy protocol witness table accessor for type Unicode.UTF8.ForwardParser and conformance Unicode.UTF8.ForwardParser();
    uint64_t result = Locale.Language.components.modify();
    unint64_t v24 = *(_BYTE *)(v23 + 4);
    if (!v24)
    {
      __break(1u);
      return result;
    }

    *(_DWORD *)v23 >>= 8;
    *(_BYTE *)(v23 + 4) = v24 - 8;
    ((void (*)(_BYTE *, void))result)(v29, 0LL);
    size_t v17 = (v5 + 1);
    uint64_t v8 = MEMORY[0x18961AB88];
    if ((_BYTE)v5 != 0xFF)
    {
LABEL_37:
      int v14 = *((void *)v4 + 2);
      for (i = v17; ; i >>= 8)
      {
        while (1)
        {
LABEL_38:
          int v18 = *((void *)v4 + 3);
          if (v14 >= v18 >> 1)
          {
            char v20 = v8;
            unint64_t v21 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (char *)(v18 > 1),  v14 + 1,  1,  v4);
            uint64_t v8 = v20;
            unsigned int v4 = v21;
          }

          *((void *)v4 + 2) = v14 + 1;
          v4[v14 + 32] = i - 1;
          ++v14;
          unint64_t v19 = i >= 0x100;
          i >>= 8;
          if (!v19) {
            goto LABEL_5;
          }
        }

        int v9 = 0;
        ++v14;
        if (i < 0x100) {
          break;
        }
      }
    }

      if ((specialized URL.UnicodeLookalikeTable.isLookalikeScalar(_:withPreviousScalar:)( v10,  v5 | ((unint64_t)(v7 & 1) << 32)) & 1) != 0) {
        goto LABEL_24;
      }
      mach_vm_size_t v7 = 0;
      v6 += v11;
      uint64_t v5 = v10;
      if (v6 >= v2) {
        goto LABEL_26;
      }
    }

    __break(1u);
LABEL_26:
    swift_bridgeObjectRelease();
  }

  return 1LL;
}

    __break(1u);
    goto LABEL_22;
  }

  __src[26] = 0LL;
  LOBYTE(__src[27]) = 0;
  if ((a2 & 4) == 0)
  {
LABEL_7:
    if ((a2 & 8) == 0) {
      goto LABEL_8;
    }
    goto LABEL_23;
  }

    __break(1u);
LABEL_22:
    __break(1u);
  }

  __break(1u);
  return result;
}

        Hasher._combine(_:)(1u);
        swift_bridgeObjectRetain();
        String.hash(into:)();
        swift_bridgeObjectRelease();
        unint64_t v22 = v90;
        if (!v90) {
          goto LABEL_16;
        }
        goto LABEL_22;
      }

      outlined init with take of LocalePreferences?( (uint64_t)v105,  (uint64_t)v85,  (uint64_t *)&demangling cache variable for type metadata for LocalePreferences?);
      unsigned __int8 v23 = v85;
    }

    else
    {
      Hasher._combine(_:)(0);
      unsigned __int8 v23 = v86;
    }

    outlined retain of LocalePreferences(v23);
    if (!v88) {
      goto LABEL_14;
    }
    goto LABEL_20;
  }

  uint64_t v15 = 1;
LABEL_5:
  Hasher._combine(_:)(v15);
  swift_unknownObjectRelease();
  size_t v17 = v83;
LABEL_60:
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  int v59 = v3 + *(int *)(a2 + 40);
  if ((*(_BYTE *)(v59 + 8) & 1) != 0)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    uint64_t v60 = *(void *)v59;
    Hasher._combine(_:)(1u);
    if ((v60 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
      v61 = v60;
    }
    else {
      v61 = 0LL;
    }
    Hasher._combine(_:)(v61);
  }

  v62 = v84;
  outlined init with take of LocalePreferences?( v59 + 16,  (uint64_t)v106,  &demangling cache variable for type metadata for NumberFormatStyleConfiguration.Precision?);
  specialized Optional<A>.hash(into:)();
  v63 = *(unsigned __int8 *)(v59 + 73);
  if (v63 == 2)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    v64 = v63 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v64);
  }

  v65 = *(unsigned int *)(v59 + 74);
  if (*(_DWORD *)(v59 + 74) == 2)
  {
    LOBYTE(v66) = 0;
  }

  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v65 & 1);
    Hasher._combine(_:)((v65 >> 8) & 1);
    Hasher._combine(_:)(WORD1(v65) & 1);
    v66 = BYTE3(v65) & 1;
  }

  Hasher._combine(_:)(v66);
  v67 = *(unsigned __int8 *)(v59 + 78);
  if (v67 == 2)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    v68 = v67 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v68);
  }

  v69 = (int *)type metadata accessor for CurrencyFormatStyleConfiguration.Collection(0LL);
  outlined init with copy of FloatingPointRoundingRule?(v59 + v69[9], (uint64_t)v11);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v62 + 48))(v11, 1LL, v17) == 1)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    v70 = v82;
    (*(void (**)(char *, char *, uint64_t))(v62 + 32))(v82, v11, v17);
    Hasher._combine(_:)(1u);
    dispatch thunk of Hashable.hash(into:)();
    (*(void (**)(char *, uint64_t))(v62 + 8))(v70, v17);
  }

  v71 = v59 + v69[10];
  v72 = *(unsigned __int8 *)(v71 + 8);
  if (v72 == 255)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    v73 = *(void *)v71;
    Hasher._combine(_:)(1u);
    if ((v72 & 1) != 0)
    {
      Hasher._combine(_:)(1uLL);
      if ((v73 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
        v74 = v73;
      }
      else {
        v74 = 0LL;
      }
      Hasher._combine(_:)(v74);
    }

    else
    {
      Hasher._combine(_:)(0LL);
      Hasher._combine(_:)(v73);
    }
  }

  Hasher._combine(_:)(*(unsigned __int8 *)(v59 + v69[11]));
  v75 = *(unsigned __int8 *)(v59 + v69[12]);
  if (v75 == 3)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v75);
  }

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

  size_t v17 = a3 != 1 && v6 == 254;
  int v18 = v17 && v10 == 255;
  unint64_t v19 = v18;
  if (v18) {
    char v20 = v9;
  }
  else {
    char v20 = 0;
  }
  if (v14) {
    char v20 = 0;
  }
  size_t v17 = (v15 & v20 & (v8 == 0)) == 0;
  unint64_t v11 = 2LL;
  if (v17)
  {
    uint64_t v16 = 2415919360LL;
  }

  else
  {
    unint64_t v11 = 4LL;
    uint64_t v16 = 2617245952LL;
  }

  if ((v19 & 1) != 0) {
    goto LABEL_43;
  }
  uint64_t v16 = 2483028224LL;
  if (a3 != 1 && v6 == 255 && v10 == 254)
  {
    unint64_t v11 = 2LL;
    goto LABEL_43;
  }

  if (a3 != 1 && v6 == 239 && v10 == 187) {
    uint64_t v27 = v9;
  }
  else {
    uint64_t v27 = 0;
  }
  if (v27 == 1 && v14 == 191)
  {
    unint64_t v11 = 3LL;
    goto LABEL_5;
  }

  if (*a1) {
    uint64_t v28 = 0;
  }
  else {
    uint64_t v28 = v15;
  }
  if (v28 == 1)
  {
    if (a3 == 1)
    {
      float v6 = 0;
      uint64_t v15 = 1;
      goto LABEL_76;
    }

    uint64_t v30 = v9 ^ 1;
    if (v10) {
      uint64_t v30 = 1;
    }
    if ((v30 & 1) == 0)
    {
      int v10 = 0;
      if (!v14)
      {
        if (v8)
        {
          unint64_t v11 = 0LL;
          goto LABEL_19;
        }
      }
    }

    if (v9)
    {
      if (!v14 && v10 && v8) {
        goto LABEL_97;
      }
      float v6 = 0;
      if (v10)
      {
        mach_vm_size_t v7 = 0;
        goto LABEL_102;
      }

          if ((v10 & 0x8000000000000000LL) == 0)
          {
LABEL_23:
            unint64_t v13 = 1 << v10;
            goto LABEL_24;
          }

          LOBYTE(v13) = 0;
LABEL_24:
          mach_vm_size_t v7 = 0;
          LOBYTE(v6) = v6 | v13;
          uint64_t result = v10 >= v11;
          goto LABEL_25;
        }

        if ((unint64_t)(v6 - 65) < 0xFFFFFFFFFFFFFF7FLL)
        {
          LOBYTE(v6) = 0;
          goto LABEL_21;
        }

        if ((v6 & 0x8000000000000000LL) == 0)
        {
          else {
            float v6 = v5 << v6;
          }
          goto LABEL_21;
        }
      }

      else {
        float v6 = v5 >> (v12 - v10);
      }
      goto LABEL_21;
    }
  }

          if ((v10 & 0x8000000000000000LL) == 0)
          {
LABEL_23:
            unint64_t v13 = 1 << v10;
            goto LABEL_24;
          }

          LOWORD(v13) = 0;
LABEL_24:
          mach_vm_size_t v7 = 0;
          LOWORD(v6) = v6 | v13;
          uint64_t result = v10 >= v11;
          goto LABEL_25;
        }

        if ((unint64_t)(v6 - 65) < 0xFFFFFFFFFFFFFF7FLL)
        {
          LOWORD(v6) = 0;
          goto LABEL_21;
        }

        if ((v6 & 0x8000000000000000LL) == 0)
        {
          else {
            float v6 = v5 << v6;
          }
          goto LABEL_21;
        }
      }

      else {
        float v6 = v5 >> (v12 - v10);
      }
      goto LABEL_21;
    }
  }

          if ((v10 & 0x8000000000000000LL) == 0)
          {
LABEL_23:
            unint64_t v13 = 1 << v10;
            goto LABEL_24;
          }

          unint64_t v13 = 0;
LABEL_24:
          mach_vm_size_t v7 = 0;
          LODWORD(v6) = v6 | v13;
          uint64_t result = v10 >= v11;
          goto LABEL_25;
        }

        if ((unint64_t)(v6 - 65) < 0xFFFFFFFFFFFFFF7FLL)
        {
          LODWORD(v6) = 0;
          goto LABEL_21;
        }

        if ((v6 & 0x8000000000000000LL) == 0)
        {
          else {
            float v6 = v5 << v6;
          }
          goto LABEL_21;
        }
      }

      else {
        float v6 = v5 >> (v12 - v10);
      }
      goto LABEL_21;
    }
  }

    uint64_t v8 = (v13 - 1) & v13;
    unint64_t v11 = __clz(__rbit64(v13)) + (v4 << 6);
LABEL_22:
    uint64_t v15 = *(void *)(*(void *)(v3 + 56) + 8 * v11);
    uint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(*(unsigned __int8 *)(*(void *)(v3 + 48) + v11));
    if ((v16 & 1) == 0 || *(void *)(*(void *)(a2 + 56) + 8 * result) != v15) {
      return 0LL;
    }
  }

  int v14 = v12 + 3;
  if (v14 >= v9) {
    return 1LL;
  }
  unint64_t v13 = *(void *)(v5 + 8 * v14);
  if (v13)
  {
    unsigned int v4 = v14;
    goto LABEL_21;
  }

  while (1)
  {
    unsigned int v4 = v14 + 1;
    if (__OFADD__(v14, 1LL)) {
      break;
    }
    if (v4 >= v9) {
      return 1LL;
    }
    unint64_t v13 = *(void *)(v5 + 8 * v4);
    ++v14;
    if (v13) {
      goto LABEL_21;
    }
  }

    uint64_t v8 = (v13 - 1) & v13;
    unint64_t v11 = __clz(__rbit64(v13)) + (v4 << 6);
LABEL_22:
    uint64_t v15 = *(void *)(*(void *)(v3 + 48) + 8 * v11);
    uint64_t v16 = (uint64_t *)(*(void *)(v3 + 56) + 16 * v11);
    size_t v17 = *v16;
    int v18 = v16[1];
    unint64_t v19 = specialized __RawDictionaryStorage.find<A>(_:)(v15);
    if ((v20 & 1) != 0)
    {
      unint64_t v21 = (uint64_t *)(*(void *)(a2 + 56) + 16 * v19);
      uint64_t result = *v21;
      if (*v21 == v17 && v21[1] == v18) {
        continue;
      }
      uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
      if ((result & 1) != 0) {
        continue;
      }
    }

    return 0LL;
  }

  int v14 = v12 + 3;
  if (v14 >= v9) {
    return 1LL;
  }
  unint64_t v13 = *(void *)(v5 + 8 * v14);
  if (v13)
  {
    unsigned int v4 = v14;
    goto LABEL_21;
  }

  while (1)
  {
    unsigned int v4 = v14 + 1;
    if (__OFADD__(v14, 1LL)) {
      break;
    }
    if (v4 >= v9) {
      return 1LL;
    }
    unint64_t v13 = *(void *)(v5 + 8 * v4);
    ++v14;
    if (v13) {
      goto LABEL_21;
    }
  }

    uint64_t v8 = (v13 - 1) & v13;
    unint64_t v11 = __clz(__rbit64(v13)) + (v4 << 6);
LABEL_22:
    uint64_t v15 = *(_DWORD *)(*(void *)(v3 + 48) + 4 * v11);
    uint64_t v16 = (uint64_t *)(*(void *)(v3 + 56) + 16 * v11);
    size_t v17 = *v16;
    int v18 = v16[1];
    unint64_t v19 = specialized __RawDictionaryStorage.find<A>(_:)(v15);
    if ((v20 & 1) != 0)
    {
      unint64_t v21 = (uint64_t *)(*(void *)(a2 + 56) + 16 * v19);
      uint64_t result = *v21;
      if (*v21 == v17 && v21[1] == v18) {
        continue;
      }
      uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
      if ((result & 1) != 0) {
        continue;
      }
    }

    return 0LL;
  }

  int v14 = v12 + 3;
  if (v14 >= v9) {
    return 1LL;
  }
  unint64_t v13 = *(void *)(v5 + 8 * v14);
  if (v13)
  {
    unsigned int v4 = v14;
    goto LABEL_21;
  }

  while (1)
  {
    unsigned int v4 = v14 + 1;
    if (__OFADD__(v14, 1LL)) {
      break;
    }
    if (v4 >= v9) {
      return 1LL;
    }
    unint64_t v13 = *(void *)(v5 + 8 * v4);
    ++v14;
    if (v13) {
      goto LABEL_21;
    }
  }

    uint64_t v8 = (v13 - 1) & v13;
    unint64_t v11 = __clz(__rbit64(v13)) + (v4 << 6);
LABEL_22:
    uint64_t v15 = (uint64_t *)(*(void *)(v3 + 56) + 16 * v11);
    uint64_t v16 = *v15;
    size_t v17 = v15[1];
    int v18 = specialized __RawDictionaryStorage.find<A>(_:)(*(unsigned __int8 *)(*(void *)(v3 + 48) + v11));
    if ((v19 & 1) != 0)
    {
      char v20 = (uint64_t *)(*(void *)(a2 + 56) + 16 * v18);
      uint64_t result = *v20;
      if (*v20 == v16 && v20[1] == v17) {
        continue;
      }
      uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
      if ((result & 1) != 0) {
        continue;
      }
    }

    return 0LL;
  }

  int v14 = v12 + 3;
  if (v14 >= v9) {
    return 1LL;
  }
  unint64_t v13 = *(void *)(v5 + 8 * v14);
  if (v13)
  {
    unsigned int v4 = v14;
    goto LABEL_21;
  }

  while (1)
  {
    unsigned int v4 = v14 + 1;
    if (__OFADD__(v14, 1LL)) {
      break;
    }
    if (v4 >= v9) {
      return 1LL;
    }
    unint64_t v13 = *(void *)(v5 + 8 * v4);
    ++v14;
    if (v13) {
      goto LABEL_21;
    }
  }

    uint64_t v8 = (v13 - 1) & v13;
    unint64_t v11 = __clz(__rbit64(v13)) + (v4 << 6);
LABEL_22:
    uint64_t v15 = *(void *)(*(void *)(v3 + 56) + 8 * v11);
    uint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(*(_DWORD *)(*(void *)(v3 + 48) + 4 * v11));
    if ((v16 & 1) == 0 || *(void *)(*(void *)(a2 + 56) + 8 * result) != v15) {
      return 0LL;
    }
  }

  int v14 = v12 + 3;
  if (v14 >= v9) {
    return 1LL;
  }
  unint64_t v13 = *(void *)(v5 + 8 * v14);
  if (v13)
  {
    unsigned int v4 = v14;
    goto LABEL_21;
  }

  while (1)
  {
    unsigned int v4 = v14 + 1;
    if (__OFADD__(v14, 1LL)) {
      break;
    }
    if (v4 >= v9) {
      return 1LL;
    }
    unint64_t v13 = *(void *)(v5 + 8 * v4);
    ++v14;
    if (v13) {
      goto LABEL_21;
    }
  }

    if (v4 <= v8 >> 16) {
      goto LABEL_28;
    }
    uint64_t v8 = String.UTF8View._foreignIndex(after:)();
LABEL_8:
  }

  __break(1u);
LABEL_28:
  __break(1u);
  return result;
}

    outlined copy of Locale.LanguageCode?(v12, v11);
    outlined consume of Locale.LanguageCode?(v83, v88);
    unint64_t v22 = v12;
    unsigned __int8 v23 = v11;
    goto LABEL_38;
  }

  if (!v11)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    goto LABEL_21;
  }

  if (v86 == v13 && v87 == v14) {
    goto LABEL_14;
  }
  char v20 = _stringCompareWithSmolCheck(_:_:expecting:)();
  uint64_t result = 0LL;
  if ((v20 & 1) != 0) {
    goto LABEL_14;
  }
  return result;
}

  uint64_t v30 = *(_OWORD *)(a2 + 288);
  *(_OWORD *)(a1 + 272) = *(_OWORD *)(a2 + 272);
  *(_OWORD *)(a1 + 28_Block_object_dispose((const void *)(v11 - 240), 8) = v30;
LABEL_22:
  *(_OWORD *)(a1 + 304) = *(_OWORD *)(a2 + 304);
  uint64_t v31 = *(void *)(a2 + 328);
  swift_unknownObjectRetain();
  if (v31)
  {
    *(void *)(a1 + 320) = *(void *)(a2 + 320);
    *(void *)(a1 + 32_Block_object_dispose((const void *)(v11 - 240), 8) = v31;
    uint64_t v32 = *(void *)(a2 + 336);
    unint64_t v33 = *(void *)(a2 + 344);
    *(void *)(a1 + 336) = v32;
    *(void *)(a1 + 344) = v33;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }

  else
  {
    __int16 v34 = *(_OWORD *)(a2 + 336);
    *(_OWORD *)(a1 + 320) = *(_OWORD *)(a2 + 320);
    *(_OWORD *)(a1 + 336) = v34;
  }

  return a1;
}

        __break(1u);
        goto LABEL_22;
      }
    }

    __break(1u);
    goto LABEL_21;
  }

  if (*(_WORD *)(v9 + 16) == 15)
  {
    v36 = specialized Rope._Node.split(keeping:)(8LL);
    specialized Rope._Node._appendItem(_:)(a1, a2, a3);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return v36;
  }

  specialized Rope._Node._appendItem(_:)(a1, a2, a3);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return 0LL;
}

        Hasher._combine(_:)(1u);
        swift_bridgeObjectRetain();
        String.hash(into:)();
        swift_bridgeObjectRelease();
        uint64_t v12 = v45;
        if (!v45)
        {
LABEL_15:
          Hasher._combine(_:)(0);
          unint64_t v13 = v46;
          if (!v46)
          {
LABEL_16:
            Hasher._combine(_:)(0);
            goto LABEL_24;
          }

  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  if (!v44)
  {
LABEL_15:
    Hasher._combine(_:)(0);
    unint64_t v11 = v45;
    if (!v45) {
      goto LABEL_16;
    }
LABEL_23:
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    specialized Dictionary<>.hash(into:)((uint64_t)v62, v11);
    swift_bridgeObjectRelease();
    uint64_t v12 = v46;
    if (!v46) {
      goto LABEL_17;
    }
    goto LABEL_24;
  }

  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  unint64_t v11 = v43;
  if (v43) {
    goto LABEL_22;
  }
LABEL_16:
  Hasher._combine(_:)(0);
  uint64_t v12 = v44;
  if (!v44)
  {
LABEL_17:
    Hasher._combine(_:)(0);
    goto LABEL_24;
  }

        Hasher._combine(_:)(1u);
        swift_bridgeObjectRetain();
        String.hash(into:)();
        swift_bridgeObjectRelease();
        uint64_t v15 = v48;
        if (!v48)
        {
LABEL_15:
          Hasher._combine(_:)(0);
          uint64_t v16 = v49;
          if (!v49)
          {
LABEL_16:
            Hasher._combine(_:)(0);
            goto LABEL_24;
          }

  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  if (!v47)
  {
LABEL_15:
    Hasher._combine(_:)(0);
    int v14 = v48;
    if (!v48) {
      goto LABEL_16;
    }
LABEL_23:
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    specialized Dictionary<>.hash(into:)((uint64_t)v65, v14);
    swift_bridgeObjectRelease();
    uint64_t v15 = v49;
    if (!v49) {
      goto LABEL_17;
    }
    goto LABEL_24;
  }

  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  int v14 = v46;
  if (v46) {
    goto LABEL_22;
  }
LABEL_16:
  Hasher._combine(_:)(0);
  uint64_t v15 = v47;
  if (!v47)
  {
LABEL_17:
    Hasher._combine(_:)(0);
    goto LABEL_24;
  }

  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  if (!v48)
  {
LABEL_15:
    Hasher._combine(_:)(0);
    uint64_t v15 = v49;
    if (!v49) {
      goto LABEL_16;
    }
LABEL_23:
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    specialized Dictionary<>.hash(into:)(a1, v15);
    swift_bridgeObjectRelease();
    uint64_t v16 = v50;
    if (!v50) {
      goto LABEL_17;
    }
    goto LABEL_24;
  }

  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  if (!v47)
  {
LABEL_15:
    Hasher._combine(_:)(0);
    int v14 = v48;
    if (!v48) {
      goto LABEL_16;
    }
LABEL_23:
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    specialized Dictionary<>.hash(into:)((uint64_t)v65, v14);
    swift_bridgeObjectRelease();
    uint64_t v15 = v49;
    if (!v49) {
      goto LABEL_17;
    }
    goto LABEL_24;
  }

  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  int v14 = v46;
  if (v46) {
    goto LABEL_22;
  }
LABEL_16:
  Hasher._combine(_:)(0);
  uint64_t v15 = v47;
  if (!v47)
  {
LABEL_17:
    Hasher._combine(_:)(0);
    goto LABEL_24;
  }
}

    size_t v17 = -[NSLookupMatch initWithType:range:score:]( objc_alloc(&OBJC_CLASS___NSLookupMatch),  "initWithType:range:score:",  1LL,  a3,  a4,  0.5);
    [*(id *)(a1 + 32) addObject:v17];

    int v10 = *(void *)(a1 + 40);
    unint64_t v11 = *(void *)(a1 + 48);
    goto LABEL_22;
  }

  if (v10 + v11 >= a3 + a4) {
    uint64_t v12 = a3 + a4;
  }
  else {
    uint64_t v12 = v10 + v11;
  }
  unint64_t v13 = a3 > v10 || v10 >= a3 + a4;
  int v14 = *(void *)(a1 + 40);
  if (!v13 || (v10 <= a3 ? (v15 = a3 >= v10 + v11) : (v15 = 1), int v14 = a3, !v15))
  {
    if (v12 != v14) {
      goto LABEL_21;
    }
  }

  if (v25)
  {
    free(v10);
    uint64_t v15 = v27;
  }

  int v3 = +[NSPathStore2 pathStoreWithCharacters:length:]( &OBJC_CLASS___NSPathStore2,  "pathStoreWithCharacters:length:",  v14,  v15);
  if (v11 >= 0x101) {
    free(v14);
  }
  return v3;
}

    size_t v17 = 28LL;
    goto LABEL_22;
  }

  unint64_t v13 = [a5 count];
  unint64_t v50 = 0u;
  v51 = 0u;
  id v52 = 0u;
  uint64_t v53 = 0u;
  int v14 = [a5 countByEnumeratingWithState:&v50 objects:v49 count:16];
  if (!v14) {
    goto LABEL_21;
  }
  uint64_t v15 = v14;
  uint64_t v16 = *(void *)v51;
  size_t v17 = 28LL;
  do
  {
    for (i = 0LL; i != v15; ++i)
    {
      if (*(void *)v51 != v16) {
        objc_enumerationMutation(a5);
      }
      if ((objc_opt_respondsToSelector() & 1) != 0)
      {
        unint64_t v19 = 12LL;
      }

      else if ((objc_opt_respondsToSelector() & 1) != 0 && (objc_opt_respondsToSelector() & 1) != 0)
      {
        unint64_t v19 = 16LL;
      }

      else
      {
        unint64_t v19 = 0LL;
      }

      v17 += v19;
    }

    uint64_t v15 = [a5 countByEnumeratingWithState:&v50 objects:v49 count:16];
  }

  while (v15);
  int v9 = a7;
LABEL_22:
  char v20 = (char *)calloc(1uLL, v17);
  unint64_t v21 = (mach_msg_header_t *)v20;
  *(void *)(v20 + 4) = 28LL;
  *((_DWORD *)v20 + 3) = 0;
  *((_DWORD *)v20 + 5) = 0;
  *((_DWORD *)v20 + 6) = v13;
  if (!v13) {
    goto LABEL_37;
  }
  unint64_t v22 = 0LL;
  unsigned __int8 v23 = v20 + 28;
  do
  {
    unint64_t v24 = v11;
    if (a5) {
      unint64_t v24 = (void *)[a5 objectAtIndex:v22];
    }
    if ((objc_opt_respondsToSelector() & 1) != 0)
    {
      *(_DWORD *)unsigned __int8 v23 = [v24 machPort];
      *((_WORD *)v23 + 5) = 19;
      v23 += 12;
    }

    else if ((objc_opt_respondsToSelector() & 1) != 0 && (objc_opt_respondsToSelector() & 1) != 0)
    {
      unint64_t v25 = v11;
      unint64_t v26 = [v24 length];
      uint64_t v27 = [v24 bytes];
      uint64_t v28 = a9;
      if (v22) {
        uint64_t v28 = 0LL;
      }
      id v29 = v26 - v28;
      unint64_t v11 = v25;
      *(void *)unsigned __int8 v23 = v27 + v28;
      *((_DWORD *)v23 + 2) = ((v29 >= *MEMORY[0x1895FD590] >> 1) << 8) | (v23[10] << 16) | 0x1000000;
      *((_DWORD *)v23 + 3) = v29;
      v23 += 16;
    }

    else
    {
      uint64_t v30 = objc_opt_class();
      NSLog((NSString *)@"*** D.O. message send ignoring unknown component type '%@'", v30);
      --v21[1].msgh_bits;
    }

    ++v22;
  }

  while (v13 != v22);
  msgh_bits = v21[1].msgh_bits;
  v21->msgh_size += 16 * msgh_bits;
  int v9 = a7;
  if (msgh_bits) {
    uint64_t v32 = 0x80000000;
  }
  else {
LABEL_37:
  }
    uint64_t v32 = 0;
  v21->msgh_bits = v32;
  unint64_t v33 = a1 - CFAbsoluteTimeGetCurrent();
  __int16 v34 = a6;
  if (v33 < 0.0)
  {
    unint64_t v35 = 0LL;
    if (!a6) {
      goto LABEL_46;
    }
    goto LABEL_45;
  }

  if (v33 >= 4294967.29)
  {
    unint64_t v35 = 0xFFFFFFFFLL;
    if (!a6) {
      goto LABEL_46;
    }
    goto LABEL_45;
  }

  unint64_t v35 = vcvtmd_u64_f64(v33 * 1000.0) + 3;
  if (a6) {
LABEL_45:
  }
    __int16 v34 = [a6 machPort];
LABEL_46:
  v21->msgh_remote_port = v34;
  if (v9)
  {
    v36 = [v9 machPort];
    v21->msgh_local_port = v36;
    v21->msgh_id = a8;
    if (v36)
    {
      unint64_t v37 = 5139;
      goto LABEL_51;
    }
  }

  else
  {
    v21->msgh_local_port = 0;
    v21->msgh_id = a8;
  }

  unint64_t v37 = 19;
LABEL_51:
  msgh_size = v21->msgh_size;
  v21->msgh_bits |= v37;
  if (v35 == 0xFFFFFFFF) {
    unint64_t v39 = 1;
  }
  else {
    unint64_t v39 = 17;
  }
  uint64_t v40 = mach_msg(v21, v39, msgh_size, 0, 0, v35, 0);
  free(v21);
  if (v40 <= 268435459LL)
  {
    if (!v40) {
      return 1LL;
    }
    if (v40 == 268435459LL)
    {
      [a6 invalidate];
      int v42 = (void *)MEMORY[0x189603F70];
      unint64_t v43 = @"NSInvalidSendPortException";
      int v44 = (NSString *)@"[NSMachPort sendBeforeDate:] destination port invalid";
LABEL_64:
      objc_exception_throw((id)[v42 exceptionWithName:v43 reason:v44 userInfo:0]);
      return -[NSMachPort(NSMachPort) sendBeforeTime:streamData:components:from:msgid:]();
    }

    goto LABEL_63;
  }

  uint64_t result = 0LL;
  if (v40 != 268435460LL)
  {
    if (v40 == 268435465LL)
    {
      [v9 invalidate];
      int v42 = (void *)MEMORY[0x189603F70];
      unint64_t v43 = @"NSInvalidReceivePortException";
      int v44 = (NSString *)@"[NSMachPort sendBeforeDate:] reply port invalid";
      goto LABEL_64;
    }

  a1[12] = a1[8];
  uint64_t result = a1[18] + a1[17];
  a1[5] = result;
  return result;
}

  freehostent(v5);
  if (!v8) {
    return 0LL;
  }
  char v20 = -[NSURLHostNameAddressInfo _initWithAddressInfo:]( objc_alloc(&OBJC_CLASS___NSURLHostNameAddressInfo),  "_initWithAddressInfo:",  v8);
  uint64_t v5 = v20;
  if (v20)
  {
    unint64_t v21 = v20;
    [(id)_MergedGlobals_125 lock];
    [(id)qword_18C496C78 removeObjectForKey:a1];
    [(id)qword_18C496C78 setObject:v5 forKey:a1];
    [(id)_MergedGlobals_125 unlock];
  }

  return v5;
}

    [*(id *)(*(void *)(a1 + 48) + 104) addAttributeChange];
    goto LABEL_22;
  }

void _NSXPCSerializationAddNull(uint64_t a1)
{
  *(_BYTE *)(*(void *)(a1 + 8216) + (*(void *)(a1 + 8200))++) = -32;
}

void *_NSXPCSerializationEndArrayWrite(void *a1)
{
  v6[1] = *MEMORY[0x1895F89C0];
  uint64_t v1 = a1[1024];
  if (!v1) {
    objc_exception_throw((id)[MEMORY[0x189603F70] exceptionWithName:*MEMORY[0x189603A60] reason:@"Unbalanced end of array collection" userInfo:0]);
  }
  uint64_t v2 = a1[1025];
  uint64_t v3 = v1 - 1;
  a1[1024] = v3;
  uint64_t v4 = a1[v3];
  v6[0] = v2 - 1;
  return _replaceBytes(a1, v4, 8LL, v6);
}

void *_replaceBytes(void *result, uint64_t a2, int64_t a3, void *__src)
{
  __int128 v4 = a2 + (__int128)a3;
  return result;
}

xpc_object_t _NSXPCSerializationCreateWriteData(uint64_t a1)
{
  uint64_t v2 = *(const void **)(a1 + 8224);
  if (v2)
  {
    CFRelease(v2);
    *(void *)(a1 + 8224) = 0LL;
  }

  uint64_t v3 = *(const void **)(a1 + 8232);
  if (v3)
  {
    CFRelease(v3);
    *(void *)(a1 + 8232) = 0LL;
  }

  __int128 v4 = *(const void **)(a1 + 8240);
  if (v4)
  {
    CFRelease(v4);
    *(void *)(a1 + 8240) = 0LL;
  }

  uint64_t v5 = *(const void **)(a1 + 8216);
  if (*(_BYTE *)(a1 + 8248))
  {
    float v6 = dispatch_data_create(v5, *(void *)(a1 + 8208), 0LL, (dispatch_block_t)*MEMORY[0x1895F8AA0]);
    xpc_object_t v7 = xpc_data_create_with_dispatch_data(v6);
    dispatch_release(v6);
  }

  else
  {
    xpc_object_t v7 = xpc_data_create(v5, *(void *)(a1 + 8200));
    if (!*(_BYTE *)(a1 + 8249)) {
      free(*(void **)(a1 + 8216));
    }
  }

  return v7;
}

void sub_182EB8518(_Unwind_Exception *a1)
{
}

xpc_object_t __NSXPCCONNECTION_IS_WAITING_FOR_A_SYNCHRONOUS_REPLY__(_xpc_connection_s *a1, void *a2)
{
  return xpc_connection_send_message_with_reply_sync(a1, a2);
}

LABEL_42:
        -[_NSXPCConnectionExpectedReplyInfo cleanup](*(void *)(a1 + 40));
        goto LABEL_43;
      }

  *(void *)(a1 + 16) = v20 + 0x400000;
  *(void *)(a1 + 24) = v21;
  return result;
}

    swift_bridgeObjectRelease();
    if ((v8 & 1) == 0) {
      goto LABEL_43;
    }
    goto LABEL_8;
  }

  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v21, isUniquelyReferenced_nonNull_native);
  unint64_t v22 = v83;
  unsigned __int8 v23 = specialized __RawDictionaryStorage.find<A>(_:)(v13);
  if ((v8 & 1) == (v24 & 1))
  {
    int v18 = v23;
    if ((v8 & 1) == 0) {
      goto LABEL_43;
    }
    goto LABEL_8;
  }

    if (v79)
    {
      uint64_t v3 = v54;
      if (!*((void *)&v88 + 1)
        || __PAIR128__(v79, v77) != v88 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
      {
        goto LABEL_68;
      }
    }

    else
    {
      uint64_t v3 = v54;
      if (*((void *)&v88 + 1)) {
        goto LABEL_68;
      }
    }

    if (v78)
    {
      if (!*((void *)&v89 + 1)
        || __PAIR128__(v78, v75) != v89 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
      {
        goto LABEL_68;
      }
    }

    else if (*((void *)&v89 + 1))
    {
      goto LABEL_68;
    }

    if (v76)
    {
      if (!(void)v90 || (specialized static Dictionary<>.== infix(_:_:)(v76, v90) & 1) == 0) {
        goto LABEL_68;
      }
    }

    else if ((void)v90)
    {
      goto LABEL_68;
    }

    if (v73)
    {
      if (!*((void *)&v90 + 1)
        || (specialized static Dictionary<>.== infix(_:_:)(v73, *((uint64_t *)&v90 + 1)) & 1) == 0)
      {
        goto LABEL_68;
      }
    }

    else if (*((void *)&v90 + 1))
    {
      goto LABEL_68;
    }

    v55 = (void *)*((void *)&v91 + 1);
    unint64_t v22 = v91;
    if (v72)
    {
      if (!(void)v91)
      {
LABEL_66:
        outlined retain of LocalePreferences?( (uint64_t)v108,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined copy of LocalePreferences?);
        outlined retain of LocalePreferences?( (uint64_t)v108,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined copy of LocalePreferences?);
        outlined retain of ICUByteCountNumberFormatter.Signature((uint64_t)&v106);
        goto LABEL_70;
      }

      unint64_t v50 = (void *)*((void *)&v92 + 1);
      v51 = (void *)v92;
      unint64_t v49 = (void *)v93;
      type metadata accessor for CFDictionaryRef(0LL);
      outlined retain of LocalePreferences?( (uint64_t)v108,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined copy of LocalePreferences?);
      outlined retain of LocalePreferences?( (uint64_t)v108,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined copy of LocalePreferences?);
      outlined retain of ICUByteCountNumberFormatter.Signature((uint64_t)&v106);
      outlined retain of LocalePreferences?( (uint64_t)v110,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined copy of LocalePreferences?);
      lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( (unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef,  (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef,  (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
      uint64_t v32 = (id)v22;
      unint64_t v48 = v72;
      unint64_t v33 = static _CFObject.== infix(_:_:)();

      if ((v33 & 1) == 0) {
        goto LABEL_92;
      }
    }

    else
    {
      unint64_t v50 = (void *)*((void *)&v92 + 1);
      v51 = (void *)v92;
      unint64_t v49 = (void *)v93;
      outlined retain of LocalePreferences?( (uint64_t)v108,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined copy of LocalePreferences?);
      outlined retain of LocalePreferences?( (uint64_t)v108,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined copy of LocalePreferences?);
      outlined retain of ICUByteCountNumberFormatter.Signature((uint64_t)&v106);
      if (v22) {
        goto LABEL_69;
      }
      outlined retain of LocalePreferences?( (uint64_t)v110,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined copy of LocalePreferences?);
    }

    if (v71)
    {
      if (!v55
        || (type metadata accessor for CFDictionaryRef(0LL),
            lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( (unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef,  (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef,  (uint64_t)&protocol conformance descriptor for CFDictionaryRef),  __int16 v34 = v55,  v56 = v71,  v35 = static _CFObject.== infix(_:_:)(),  v56,  v34,  (v35 & 1) == 0))
      {
LABEL_92:
        outlined retain of LocalePreferences?( (uint64_t)v110,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined consume of LocalePreferences?);
        goto LABEL_69;
      }
    }

    else if (v55)
    {
      goto LABEL_92;
    }

    if (v70)
    {
      if (!v51) {
        goto LABEL_92;
      }
      type metadata accessor for CFDictionaryRef(0LL);
      lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( (unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef,  (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef,  (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
      v36 = v51;
      id v52 = v70;
      unint64_t v37 = static _CFObject.== infix(_:_:)();

      if ((v37 & 1) == 0) {
        goto LABEL_92;
      }
    }

    else if (v51)
    {
      goto LABEL_92;
    }

    if (v69)
    {
      if (!v50) {
        goto LABEL_92;
      }
      type metadata accessor for CFDictionaryRef(0LL);
      lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( (unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef,  (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef,  (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
      unint64_t v38 = v50;
      uint64_t v53 = v69;
      unint64_t v39 = static _CFObject.== infix(_:_:)();

      if ((v39 & 1) == 0) {
        goto LABEL_92;
      }
    }

    else if (v50)
    {
      goto LABEL_92;
    }

    v57 = v3;
    if (v68)
    {
      if (!v49) {
        goto LABEL_119;
      }
      type metadata accessor for CFDictionaryRef(0LL);
      lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( (unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef,  (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef,  (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
      uint64_t v40 = v49;
      unint64_t v41 = v68;
      int v42 = static _CFObject.== infix(_:_:)();

      if ((v42 & 1) == 0) {
        goto LABEL_119;
      }
    }

    else if (v49)
    {
      goto LABEL_119;
    }

    unint64_t v22 = *((void *)&v93 + 1);
    if (v67)
    {
      if (!*((void *)&v93 + 1)) {
        goto LABEL_103;
      }
      swift_bridgeObjectRetain();
      unint64_t v43 = swift_bridgeObjectRetain();
      int v44 = specialized static Dictionary<>.== infix(_:_:)(v43, v22);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v44 & 1) == 0)
      {
LABEL_119:
        outlined retain of LocalePreferences?( (uint64_t)v110,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined consume of LocalePreferences?);
LABEL_120:
        LOBYTE(v22) = 0;
LABEL_121:
        uint64_t v3 = v57;
        int v10 = v80;
        goto LABEL_70;
      }
    }

    else if (*((void *)&v93 + 1))
    {
      goto LABEL_119;
    }

    unint64_t v22 = *(void *)v94;
    if (v66)
    {
      if (!*(void *)v94)
      {
LABEL_103:
        outlined retain of LocalePreferences?( (uint64_t)v110,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined consume of LocalePreferences?);
        goto LABEL_121;
      }

      swift_bridgeObjectRetain();
      unint64_t v45 = swift_bridgeObjectRetain();
      unint64_t v46 = specialized static Dictionary<>.== infix(_:_:)(v45, v22);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v46 & 1) == 0) {
        goto LABEL_119;
      }
    }

    else if (*(void *)v94)
    {
      goto LABEL_119;
    }

    if (*((void *)&v65 + 1))
    {
      if (!*(void *)&v94[16] || v65 != *(_OWORD *)&v94[8] && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
        goto LABEL_119;
      }
    }

    else if (*(void *)&v94[16])
    {
      goto LABEL_119;
    }

    if (v64 == 2)
    {
      if (v94[24] != 2) {
        goto LABEL_119;
      }
    }

    else if (v94[24] == 2 || ((v94[24] ^ v64) & 1) != 0)
    {
      goto LABEL_119;
    }

    unint64_t v47 = v94[25];
    if (v63 == 2)
    {
      outlined retain of LocalePreferences?( (uint64_t)v110,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined consume of LocalePreferences?);
      if (v47 != 2) {
        goto LABEL_120;
      }
    }

    else
    {
      outlined retain of LocalePreferences?( (uint64_t)v110,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined consume of LocalePreferences?);
      if (v47 == 2 || ((v47 ^ v63) & 1) != 0) {
        goto LABEL_120;
      }
    }

    if (v62 == 2)
    {
      uint64_t v3 = v57;
      int v10 = v80;
      if (v94[26] != 2) {
        goto LABEL_69;
      }
    }

    else
    {
      LOBYTE(v22) = 0;
      if (v94[26] == 2) {
        goto LABEL_121;
      }
      uint64_t v3 = v57;
      int v10 = v80;
      if (((((v62 & 1) == 0) ^ v94[26]) & 1) == 0) {
        goto LABEL_70;
      }
    }

    if (v61 == 2)
    {
      uint64_t v3 = v57;
      int v10 = v80;
      if (v94[27] == 2) {
        goto LABEL_134;
      }
      goto LABEL_69;
    }

    LOBYTE(v22) = 0;
    if (v94[27] == 2) {
      goto LABEL_121;
    }
    uint64_t v3 = v57;
    int v10 = v80;
    if (((((v61 & 1) == 0) ^ v94[27]) & 1) != 0) {
LABEL_134:
    }
      LOBYTE(v22) = 1;
LABEL_70:
    LOBYTE(v81[0]) = v60;
    v81[1] = v74;
    v81[2] = v77;
    v81[3] = v79;
    v81[4] = v75;
    v81[5] = v78;
    v81[6] = v76;
    v81[7] = v73;
    v81[8] = v72;
    v81[9] = v71;
    v81[10] = v70;
    v81[11] = v69;
    v81[12] = v68;
    v81[13] = v67;
    v81[14] = v66;
    v82 = v65;
    v83 = v64;
    v84 = v63;
    v85 = v62;
    v86 = v61;
    outlined release of LocalePreferences(v81);
    outlined retain of LocalePreferences?( (uint64_t)v108,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined consume of LocalePreferences?);
    outlined release of ICUByteCountNumberFormatter.Signature((uint64_t)&v106);
    if ((v22 & 1) != 0) {
      return v5;
    }
    unint64_t v11 = v58;
    xpc_object_t v7 = v59;
LABEL_5:
    uint64_t v5 = (v5 + 1) & v7;
    if (((*(void *)(v3 + ((v5 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v5) & 1) == 0) {
      return v5;
    }
  }

  id v29 = (void *)(v22 + 72);
  uint64_t v30 = v21 + 9;
  while (v28)
  {
    uint64_t result = *(v30 - 1);
    if (result != *(v29 - 1) || *v30 != *v29)
    {
      uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
      if ((result & 1) == 0) {
        goto LABEL_33;
      }
    }

    v29 += 2;
    v30 += 2;
    if (!--v28) {
      goto LABEL_42;
    }
  }

  __break(1u);
  return result;
}

            v204[0] = v176;
            v204[1] = v38;
            v204[2] = v39;
            v204[3] = v43;
            v204[4] = v58;
            v204[5] = v48;
            v204[6] = v59;
            v204[7] = v61;
            specialized IndexingIterator.next()();
            v63 = v175;
            if (!v62)
            {
              v182 = MEMORY[0x18961AFF0];
LABEL_175:
              swift_release();
              v145 = 0LL;
              v146 = v182;
              v147 = v182 + 64;
              v148 = 1LL << *(_BYTE *)(v182 + 32);
              v149 = -1LL;
              if (v148 < 64) {
                v149 = ~(-1LL << v148);
              }
              v150 = v149 & *(void *)(v182 + 64);
              v151 = (unint64_t)(v148 + 63) >> 6;
              while (1)
              {
                if (v150)
                {
                  v152 = __clz(__rbit64(v150));
                  v150 &= v150 - 1;
                  v153 = v152 | (v145 << 6);
                }

                else
                {
                  v154 = v145 + 1;
                  if (__OFADD__(v145, 1LL)) {
                    goto LABEL_235;
                  }
                  if (v154 >= v151)
                  {
LABEL_198:
                    swift_release();
                    v199 = 0uLL;
                    v163 = AttributedString.Guts._constrainedAttributes(at:with:)(v174, (uint64_t *)&v199);
                    v164 = v185[1];
                    v193 = *v185;
                    v194 = v164;
                    v195 = v185[2];
                    BigString.utf8.getter();
                    specialized BidirectionalCollection<>._getBlock(for:in:)(3, v221, (unint64_t *)&v199);
                    outlined release of Locale((uint64_t)v204);
                    if (*((void *)&v200 + 1) != 2LL)
                    {
                      if (*((void *)&v202 + 1) != 2LL)
                      {
                        v165 = (unint64_t)v199 >> 11;
                        if ((uint64_t)((unint64_t)v199 >> 11) <= v174
                          && (unint64_t)v201 >> 10 >= (unint64_t)v199 >> 10)
                        {
                          v166 = (unint64_t)v201 >> 11;
                          swift_retain();
                          swift_bridgeObjectRetain();
                          swift_bridgeObjectRetain();
                          specialized AttributedString._InternalRunsSlice.updateEach(with:)(v176, v165, v174, v163);
                          swift_release();
                          swift_bridgeObjectRelease();
                          swift_bridgeObjectRelease();
                          if (v166 >= v173)
                          {
                            swift_retain();
                            swift_bridgeObjectRetain();
                            swift_bridgeObjectRetain();
                            specialized AttributedString._InternalRunsSlice.updateEach(with:)(v176, v173, v166, v163);
                            swift_release();
                            swift_bridgeObjectRelease_n();
                            return swift_bridgeObjectRelease_n();
                          }

    if ((v7 & 0x1000000000000000LL) == 0) {
      break;
    }
    v3[22] = v4;
    v3[23] = v7;
    lazy protocol witness table accessor for type String and conformance String();
    swift_bridgeObjectRetain_n();
    StringProtocol._ephemeralString.getter();
    uint64_t v31 = (void *)String._bridgeToObjectiveCImpl()();
    swift_bridgeObjectRelease();
    uint64_t v32 = (unsigned __int16 *)objc_msgSend(v31, sel__fastCharacterContents);
    unint64_t v33 = v31;
    if (v32)
    {
      v3[22] = v4;
      v3[23] = v7;
      StringProtocol._ephemeralString.getter();
      __int16 v34 = (void *)String._bridgeToObjectiveCImpl()();
      swift_bridgeObjectRelease();
      unint64_t v35 = objc_msgSend(v34, sel_length);
      swift_unknownObjectRelease();
      v36 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)( v32,  (uint64_t)v35,  4u,  1);
    }

    else
    {
      v36 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v4, v7, 4u, 1);
    }

    uint64_t v2 = v36;
    swift_bridgeObjectRelease_n();
    if ((v2 & 1) != 0) {
      goto LABEL_48;
    }
LABEL_83:
    swift_bridgeObjectRelease();
    unint64_t v47 = 0;
    unint64_t v46 = 876LL;
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
LABEL_84:
    ;
  }

  if ((v7 & 0x2000000000000000LL) != 0)
  {
    unint64_t v22 = HIBYTE(v7) & 0xF;
    v3[22] = v4;
    v3[23] = v7 & 0xFFFFFFFFFFFFFFLL;
    unint64_t v21 = (char *)v5;
  }

  else if ((v4 & 0x1000000000000000LL) != 0)
  {
    unint64_t v21 = (char *)((v7 & 0xFFFFFFFFFFFFFFFLL) + 32);
    unint64_t v22 = v4 & 0xFFFFFFFFFFFFLL;
  }

  else
  {
LABEL_76:
    unint64_t v21 = (char *)_StringObject.sharedUTF8.getter();
  }

  uint64_t v2 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v21, v22, 4u, 1);
  swift_bridgeObjectRetain();
  if ((v2 & 1) == 0) {
    goto LABEL_83;
  }
LABEL_48:
  unsigned __int8 v23 = v3[24];
  swift_bridgeObjectRetain();
  unint64_t v24 = swift_bridgeObjectRelease();
  *(void *)(v23 + 72) = v4;
  *(void *)(v23 + 80) = v7;
  *((_BYTE *)v3 + 176) = 37;
  MEMORY[0x1895F8858](v24);
  unint64_t v46 = v5;
  swift_bridgeObjectRetain();
  unint64_t v25 = specialized Sequence.contains(where:)( (uint64_t (*)(void *))closure #1 in Sequence<>.contains(_:)specialized partial apply,  (uint64_t)v45,  v4,  v7);
  swift_bridgeObjectRelease_n();
  *(_BYTE *)(v6 + 152) = v25 & 1;
LABEL_49:
  swift_bridgeObjectRelease();
LABEL_61:
  free(v3);
}

    outlined consume of URL?(v4);
    outlined consume of URL?(v4);
    return (uint64_t)v17;
  }

    v70 = swift_conformsToProtocol2();
    if (v70) {
      v71 = v8;
    }
    else {
      v71 = 0LL;
    }
    if (v71)
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v12 + 16))(v26, v11, v8);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _JSONDirectArrayEncodable);
      swift_dynamicCast();
      v72 = v130;
      v73 = *(void *)(v130 + 24);
      v74 = v150;
      v131 = v149;
      v129 = __swift_project_boxed_opaque_existential_1(v148, (uint64_t)v149);
      v76 = *(void **)(v72 + 32);
      v75 = *(void **)(v72 + 40);
      v77 = *(unsigned __int8 *)(v72 + 48);
      v79 = *(void *)(v72 + 56);
      v78 = *(void *)(v72 + 64);
      v81 = *(void *)(v72 + 72);
      v80 = *(void *)(v72 + 80);
      v83 = *(void *)(v72 + 88);
      v82 = *(void *)(v72 + 96);
      v85 = *(void *)(v72 + 104);
      v84 = *(void *)(v72 + 112);
      v87 = *(void *)(v72 + 120);
      v86 = *(void *)(v72 + 128);
      v88 = *(void *)(v72 + 136);
      v133 = v88;
      v132 = v86;
      v128 = v81;
      LODWORD(v127) = v77;
      v126 = v74;
      *(void *)v135 = v73;
      *(void *)&v135[8] = v76;
      *(void *)&v135[16] = v75;
      v136 = v77;
      if ((v73 & 1) != 0)
      {
        v137 = v79;
        v138 = v78;
        v122 = v79;
        v139 = v81;
        v140 = v80;
        v141 = v83;
        v142 = v82;
        v143 = v85;
        v144 = v84;
        v145 = v87;
        v146 = v86;
        v147 = v88;
        v130 = *(void *)(v74 + 16);
        v111 = v80;
        v124 = v80;
        v123 = v75;
        outlined copy of JSONEncoder.DateEncodingStrategy(v76, (uint64_t)v75, v77);
        outlined copy of JSONEncoder.KeyEncodingStrategy(v79);
        v112 = v128;
        outlined copy of JSONEncoder.NonConformingFloatEncodingStrategy(v128, v111);
        outlined copy of JSONEncoder.KeyEncodingStrategy(v87);
        swift_bridgeObjectRetain();
        v113 = ((uint64_t (*)(_BYTE *, char *, uint64_t))v130)(v135, v131, v126);
        outlined consume of JSONEncoder.DateEncodingStrategy(v76, (uint64_t)v123, (char)v127);
        outlined consume of JSONEncoder.KeyEncodingStrategy(v122);
        outlined consume of JSONEncoder.NonConformingFloatEncodingStrategy(v112, v124);
        outlined consume of JSONEncoder.KeyEncodingStrategy(v87);
        swift_bridgeObjectRelease();
        type metadata accessor for JSONReference();
        v97 = swift_allocObject();
        uint64_t v15 = (char *)v97;
        *(void *)(v97 + 16) = v113;
        *(void *)(v97 + 24) = 0LL;
        v98 = 6;
      }

      else
      {
        v89 = v79;
        v137 = v79;
        v138 = v78;
        v125 = v78;
        v90 = v81;
        v139 = v81;
        v140 = v80;
        v141 = v83;
        v142 = v82;
        v143 = v85;
        v144 = v84;
        v145 = v87;
        v146 = v86;
        v147 = v88;
        v121 = *(uint64_t (**)(_BYTE *, char *, uint64_t))(v74 + 8);
        v130 = v87;
        v91 = v76;
        v123 = v76;
        v92 = v80;
        v93 = v89;
        outlined copy of JSONEncoder.DateEncodingStrategy(v91, (uint64_t)v75, v77);
        outlined copy of JSONEncoder.KeyEncodingStrategy(v93);
        outlined copy of JSONEncoder.NonConformingFloatEncodingStrategy(v90, v92);
        outlined copy of JSONEncoder.KeyEncodingStrategy(v130);
        swift_bridgeObjectRetain();
        v94 = v121(v135, v131, v126);
        v96 = v95;
        outlined consume of JSONEncoder.DateEncodingStrategy(v123, (uint64_t)v75, (char)v127);
        outlined consume of JSONEncoder.KeyEncodingStrategy(v93);
        outlined consume of JSONEncoder.NonConformingFloatEncodingStrategy(v128, v92);
        outlined consume of JSONEncoder.KeyEncodingStrategy(v130);
        swift_bridgeObjectRelease();
        type metadata accessor for JSONReference();
        v97 = swift_allocObject();
        uint64_t v15 = (char *)v97;
        *(void *)(v97 + 16) = v94;
        *(void *)(v97 + 24) = v96;
        v98 = 5;
      }

      *(_BYTE *)(v97 + 32) = v98;
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v148);
      return (uint64_t)v15;
    }

    MEMORY[0x1895F8858](v70);
    v118 = v8;
    v119 = v129;
    v120 = v11;
    v109 = v151;
    unint64_t v25 = specialized __JSONEncoder._wrapGeneric<A>(_:for:_:)( (void (*)(void))partial apply for specialized closure #1 in __JSONEncoder.wrapGeneric<A, B>(_:for:_:),  (uint64_t)(&v121 - 6),  v110,  a3,  v35,  v27,  v133);
    if (!v109) {
      return v25;
    }
    return (uint64_t)v15;
  }

  (*(void (**)(uint64_t, uint64_t, uint64_t))(v12 + 16))(v26, v11, v8);
  swift_dynamicCast();
  v36 = *(_DWORD *)v135;
  unint64_t v37 = *(unsigned __int16 *)&v135[4];
  unint64_t v38 = *(unsigned __int16 *)&v135[6];
  unint64_t v39 = *(_WORD *)&v135[8];
  uint64_t v40 = *(_WORD *)&v135[10];
  unint64_t v41 = *(_WORD *)&v135[12];
  int v42 = *(_WORD *)&v135[14];
  unint64_t v43 = *(_WORD *)&v135[16];
  LODWORD(v44) = *(unsigned __int16 *)&v135[18];
  if (!_So9NSDecimala__length_getter(v135))
  {
    *(_DWORD *)v135 = v36;
    *(_WORD *)&v135[4] = v37;
    *(_WORD *)&v135[6] = v38;
    *(_WORD *)&v135[8] = v39;
    *(_WORD *)&v135[10] = v40;
    *(_WORD *)&v135[12] = v41;
    *(_WORD *)&v135[14] = v42;
    *(_WORD *)&v135[16] = v43;
    *(_WORD *)&v135[18] = v44;
    if (_So9NSDecimala__isNegative_getter(v135))
    {
      v68 = 0xE300000000000000LL;
      v69 = 5136718LL;
LABEL_63:
      type metadata accessor for JSONReference();
      uint64_t v15 = (char *)swift_allocObject();
      *((void *)v15 + 2) = v69;
      *((void *)v15 + 3) = v68;
      v15[32] = 1;
      return (uint64_t)v15;
    }
  }

  *(_DWORD *)v135 = v36;
  *(_WORD *)&v135[4] = v37;
  *(_WORD *)&v135[6] = v38;
  *(_WORD *)&v135[8] = v39;
  *(_WORD *)&v135[10] = v40;
  *(_WORD *)&v135[12] = v41;
  *(_WORD *)&v135[14] = v42;
  *(_WORD *)&v135[16] = v43;
  *(_WORD *)&v135[18] = v44;
  if (!_So9NSDecimala__length_getter(v135))
  {
    v68 = 0xE100000000000000LL;
    v69 = 48LL;
    goto LABEL_63;
  }

  *(void *)&v134 = 0LL;
  *((void *)&v134 + 1) = 0xE000000000000000LL;
  *(_DWORD *)v135 = v36;
  *(_WORD *)&v135[4] = v37;
  *(_WORD *)&v135[6] = v38;
  *(_WORD *)&v135[8] = v39;
  *(_WORD *)&v135[10] = v40;
  *(_WORD *)&v135[12] = v41;
  *(_WORD *)&v135[14] = v42;
  *(_WORD *)&v135[16] = v43;
  *(_WORD *)&v135[18] = v44;
  *(_DWORD *)v148 = v36;
  *(_WORD *)&v148[4] = v37;
  *(_WORD *)&v148[6] = v38;
  *(_WORD *)&v148[8] = v39;
  *(_WORD *)&v148[10] = v40;
  *(_WORD *)&v148[12] = v41;
  *(_WORD *)&v148[14] = v42;
  *(_WORD *)&v148[16] = v43;
  *(_WORD *)&v148[18] = v44;
  if ((int)_So9NSDecimala__exponent_getter(v148) >= 1)
  {
    do
    {
      LODWORD(v133) = v44;
      v45._countAndFlagsBits = 48LL;
      v45._object = (void *)0xE100000000000000LL;
      String.append(_:)(v45);
      *(_DWORD *)v148 = v36;
      *(_WORD *)&v148[4] = v37;
      *(_WORD *)&v148[6] = v38;
      *(_WORD *)&v148[8] = v39;
      *(_WORD *)&v148[10] = v40;
      *(_WORD *)&v148[12] = v41;
      *(_WORD *)&v148[14] = v42;
      *(_WORD *)&v148[16] = v43;
      *(_WORD *)&v148[18] = v133;
      unint64_t v46 = _So9NSDecimala__exponent_getter(v148);
      _So9NSDecimala__exponent_setter((v46 - 1), v135);
      v36 = *(_DWORD *)v135;
      unint64_t v37 = *(unsigned __int16 *)&v135[4];
      unint64_t v38 = *(unsigned __int16 *)&v135[6];
      unint64_t v39 = *(_WORD *)&v135[8];
      uint64_t v40 = *(_WORD *)&v135[10];
      unint64_t v41 = *(_WORD *)&v135[12];
      int v42 = *(_WORD *)&v135[14];
      unint64_t v43 = *(_WORD *)&v135[16];
      LODWORD(v44) = *(unsigned __int16 *)&v135[18];
      *(_OWORD *)v148 = *(_OWORD *)v135;
      *(_DWORD *)&v148[16] = *(_DWORD *)&v135[16];
    }

    while ((int)_So9NSDecimala__exponent_getter(v148) > 0);
  }

  *(_DWORD *)v148 = v36;
  *(_WORD *)&v148[4] = v37;
  *(_WORD *)&v148[6] = v38;
  *(_WORD *)&v148[8] = v39;
  *(_WORD *)&v148[10] = v40;
  *(_WORD *)&v148[12] = v41;
  *(_WORD *)&v148[14] = v42;
  *(_WORD *)&v148[16] = v43;
  *(_WORD *)&v148[18] = v44;
  if (!_So9NSDecimala__exponent_getter(v148))
  {
    _So9NSDecimala__exponent_setter(1LL, v135);
    v36 = *(_DWORD *)v135;
    unint64_t v37 = *(unsigned __int16 *)&v135[4];
    unint64_t v38 = *(unsigned __int16 *)&v135[6];
    unint64_t v39 = *(_WORD *)&v135[8];
    uint64_t v40 = *(_WORD *)&v135[10];
    unint64_t v41 = *(_WORD *)&v135[12];
    int v42 = *(_WORD *)&v135[14];
    unint64_t v43 = *(_WORD *)&v135[16];
    LOWORD(v44) = *(_WORD *)&v135[18];
  }

  LODWORD(v133) = v36;
  *(_DWORD *)v148 = v36;
  unint64_t v47 = v38;
  unint64_t v48 = v37;
  *(_WORD *)&v148[4] = v37;
  LODWORD(v131) = v47;
  *(_WORD *)&v148[6] = v47;
  *(_WORD *)&v148[8] = v39;
  *(_WORD *)&v148[10] = v40;
  *(_WORD *)&v148[12] = v41;
  *(_WORD *)&v148[14] = v42;
  *(_WORD *)&v148[16] = v43;
  *(_WORD *)&v148[18] = v44;
  if (!_So9NSDecimala__length_getter(v148))
  {
    unint64_t v49 = v133;
    unint64_t v50 = v37;
    LOWORD(v51) = (_WORD)v131;
LABEL_49:
    *(_DWORD *)v148 = v49;
    *(_WORD *)&v148[4] = v50;
    *(_WORD *)&v148[6] = v51;
    *(_WORD *)&v148[8] = v39;
    *(_WORD *)&v148[10] = v40;
    *(_WORD *)&v148[12] = v41;
    *(_WORD *)&v148[14] = v42;
    *(_WORD *)&v148[16] = v43;
    *(_WORD *)&v148[18] = v44;
    v99 = v49;
    v100 = v50;
    v101 = _So9NSDecimala__exponent_getter(v148);
    v102 = v99;
    v103 = v100;
    if (v101 <= 0)
    {
      *(_DWORD *)v148 = v99;
      LODWORD(v132) = v100;
      *(_WORD *)&v148[4] = v100;
      *(_WORD *)&v148[6] = v51;
      *(_WORD *)&v148[8] = v39;
      *(_WORD *)&v148[10] = v40;
      *(_WORD *)&v148[12] = v41;
      *(_WORD *)&v148[14] = v42;
      *(_WORD *)&v148[16] = v43;
      *(_WORD *)&v148[18] = v44;
      v104 = _So9NSDecimala__exponent_getter(v148);
      LODWORD(v133) = v99;
      v105 = v51;
      if (v104)
      {
        v106 = v132;
        do
        {
          v107._countAndFlagsBits = 48LL;
          v107._object = (void *)0xE100000000000000LL;
          String.append(_:)(v107);
          *(_DWORD *)v148 = v133;
          *(_WORD *)&v148[4] = v106;
          *(_WORD *)&v148[6] = v105;
          *(_WORD *)&v148[8] = v39;
          *(_WORD *)&v148[10] = v40;
          *(_WORD *)&v148[12] = v41;
          *(_WORD *)&v148[14] = v42;
          *(_WORD *)&v148[16] = v43;
          *(_WORD *)&v148[18] = v44;
          v108 = _So9NSDecimala__exponent_getter(v148);
          _So9NSDecimala__exponent_setter((v108 + 1), v135);
          v106 = *(_WORD *)&v135[4];
          v105 = *(_WORD *)&v135[6];
          unint64_t v39 = *(_WORD *)&v135[8];
          uint64_t v40 = *(_WORD *)&v135[10];
          unint64_t v41 = *(_WORD *)&v135[12];
          int v42 = *(_WORD *)&v135[14];
          unint64_t v43 = *(_WORD *)&v135[16];
          LOWORD(v44) = *(_WORD *)&v135[18];
          LODWORD(v133) = *(_DWORD *)v135;
          *(_OWORD *)v148 = *(_OWORD *)v135;
          *(_DWORD *)&v148[16] = *(_DWORD *)&v135[16];
        }

        while (_So9NSDecimala__exponent_getter(v148));
      }

      else
      {
        v106 = v132;
      }

      v114._countAndFlagsBits = 46LL;
      v114._object = (void *)0xE100000000000000LL;
      String.append(_:)(v114);
      v115._countAndFlagsBits = 48LL;
      v115._object = (void *)0xE100000000000000LL;
      String.append(_:)(v115);
      LOWORD(v51) = v105;
      v102 = v133;
      v103 = v106;
    }

    *(_DWORD *)v148 = v102;
    *(_WORD *)&v148[4] = v103;
    *(_WORD *)&v148[6] = v51;
    *(_WORD *)&v148[8] = v39;
    *(_WORD *)&v148[10] = v40;
    *(_WORD *)&v148[12] = v41;
    *(_WORD *)&v148[14] = v42;
    *(_WORD *)&v148[16] = v43;
    *(_WORD *)&v148[18] = v44;
    if (_So9NSDecimala__isNegative_getter(v148))
    {
      v116._countAndFlagsBits = 45LL;
      v116._object = (void *)0xE100000000000000LL;
      String.append(_:)(v116);
    }

    *(_OWORD *)v148 = v134;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ReversedCollection<String>);
    lazy protocol witness table accessor for type [String] and conformance [A]( (unint64_t *)&lazy protocol witness table cache variable for type ReversedCollection<String> and conformance ReversedCollection<A>,  &demangling cache variable for type metadata for ReversedCollection<String>,  MEMORY[0x189619928]);
    v69 = String.init<A>(_:)();
    v68 = v117;
    goto LABEL_63;
  }

  unint64_t v26 = 3435973837LL;
  uint64_t v12 = 10LL;
  unint64_t v49 = v133;
  unint64_t v50 = v48;
  v51 = (int)v131;
  while (1)
  {
    LODWORD(v133) = v49;
    LODWORD(v132) = v50;
    *(_DWORD *)v148 = v49;
    *(_WORD *)&v148[4] = v50;
    *(_WORD *)&v148[6] = v51;
    *(_WORD *)&v148[8] = v39;
    *(_WORD *)&v148[10] = v40;
    *(_WORD *)&v148[12] = v41;
    *(_WORD *)&v148[14] = v42;
    *(_WORD *)&v148[16] = v43;
    *(_WORD *)&v148[18] = v44;
    if (!_So9NSDecimala__exponent_getter(v148))
    {
      LODWORD(v131) = v51;
      v52._countAndFlagsBits = 46LL;
      v52._object = (void *)0xE100000000000000LL;
      String.append(_:)(v52);
      LOWORD(v51) = (_WORD)v131;
    }

    *(_DWORD *)v148 = v133;
    *(_WORD *)&v148[4] = v132;
    *(_WORD *)&v148[6] = v51;
    *(_WORD *)&v148[8] = v39;
    *(_WORD *)&v148[10] = v40;
    *(_WORD *)&v148[12] = v41;
    *(_WORD *)&v148[14] = v42;
    *(_WORD *)&v148[16] = v43;
    *(_WORD *)&v148[18] = v44;
    uint64_t v53 = _So9NSDecimala__exponent_getter(v148);
    _So9NSDecimala__exponent_setter((v53 + 1), v135);
    v54 = *(unsigned int *)v135;
    v55 = *(unsigned __int16 *)&v135[4];
    uint64_t v27 = *(unsigned __int16 *)&v135[6];
    v56 = *(unsigned __int16 *)&v135[8];
    v130 = *(unsigned __int16 *)&v135[10];
    v129 = (void *)*(unsigned __int16 *)&v135[12];
    unint64_t v11 = *(unsigned __int16 *)&v135[18];
    v127 = (char *)*(unsigned __int16 *)&v135[14];
    LODWORD(v12_Block_object_dispose((const void *)(v11 - 240), 8) = *(unsigned __int16 *)&v135[16];
    NSDecimal.asVariableLengthInteger()( *(unsigned int *)v135 | ((unint64_t)*(unsigned __int16 *)&v135[4] << 32) | ((unint64_t)*(unsigned __int16 *)&v135[6] << 48),  *(unsigned __int16 *)&v135[8] | ((unint64_t)*(unsigned __int16 *)&v135[10] << 16) | ((unint64_t)*(unsigned __int16 *)&v135[12] << 32) | ((unint64_t)*(unsigned __int16 *)&v135[14] << 48),  *(unsigned __int16 *)&v135[16] | (*(unsigned __int16 *)&v135[18] << 16));
    uint64_t v15 = v57;
    a3 = *((void *)v57 + 2);
    v133 = v54;
    v132 = v55;
    v131 = (char *)v56;
    if (a3)
    {
      unint64_t v58 = static Array._allocateBufferUninitialized(minimumCapacity:)();
      unint64_t v35 = v58 + 30;
      *(void *)(v58 + 16) = a3;
      bzero((void *)(v58 + 32), 2 * a3);
      int v59 = *(unsigned __int16 *)&v15[2 * a3 + 30];
      uint64_t v60 = v59 / 0xA;
      while (1)
      {
        *(_WORD *)(v35 + 2 * a3) = v60;
        uint64_t v8 = v59 % 0xA;
        if (a3 == 1) {
          break;
        }
        int v59 = *(unsigned __int16 *)&v15[2 * a3 + 28] | ((_DWORD)v8 << 16);
        uint64_t v60 = v59 / 0xA;
        v61 = a3 - 2;
        --a3;
        if (v61 >= *(void *)(v58 + 16))
        {
          __break(1u);
          goto LABEL_42;
        }
      }
    }

    else
    {
      LODWORD(v_Block_object_dispose((const void *)(v11 - 240), 8) = 0;
      unint64_t v58 = MEMORY[0x18961AFE8];
    }

    v62 = *(void *)(v58 + 16);
    if (v62 && !*(_WORD *)(v58 + 2 * v62 + 30))
    {
      do
      {
        *(void *)(v58 + 16) = v62 - 1;
        if (v62 == 1) {
          break;
        }
      }

      while (!*(unsigned __int16 *)(v58 + 28 + 2 * v62--));
    }

    swift_bridgeObjectRelease();
    *(_DWORD *)v148 = v133;
    *(_WORD *)&v148[4] = v132;
    *(_WORD *)&v148[6] = v27;
    *(_WORD *)&v148[8] = (_WORD)v131;
    *(_WORD *)&v148[10] = v130;
    *(_WORD *)&v148[12] = (_WORD)v129;
    *(_WORD *)&v148[14] = (_WORD)v127;
    *(_WORD *)&v148[16] = v128;
    *(_WORD *)&v148[18] = v11;
    NSDecimal.copyVariableLengthInteger(_:)((Swift::OpaquePointer)v58);
    if (v64) {
      break;
    }
    v151 = 0LL;
    int v44 = *(void *)(v58 + 16);
    swift_bridgeObjectRelease();
    if (HIDWORD(v44)) {
      goto LABEL_65;
    }
    _So9NSDecimala__length_setter(v44, v148);
    *(_DWORD *)v135 = *(_DWORD *)v148;
    *(_OWORD *)&v135[4] = *(_OWORD *)&v148[4];
    *(void *)v148 = v8 | 0x30;
    v65._countAndFlagsBits = MEMORY[0x186E1B6AC](v148, 1LL);
    String.append(_:)(v65);
    swift_bridgeObjectRelease();
    LODWORD(v133) = *(_DWORD *)v135;
    LODWORD(v132) = *(unsigned __int16 *)&v135[4];
    v51 = *(unsigned __int16 *)&v135[6];
    unint64_t v39 = *(_WORD *)&v135[8];
    uint64_t v40 = *(_WORD *)&v135[10];
    unint64_t v41 = *(_WORD *)&v135[12];
    int v42 = *(_WORD *)&v135[14];
    unint64_t v43 = *(_WORD *)&v135[16];
    LOWORD(v44) = *(_WORD *)&v135[18];
    *(_OWORD *)v148 = *(_OWORD *)v135;
    *(_DWORD *)&v148[16] = *(_DWORD *)&v135[16];
    v66 = _So9NSDecimala__length_getter(v148);
    unint64_t v50 = v132;
    unint64_t v49 = v133;
    if (!v66) {
      goto LABEL_49;
    }
  }

  swift_bridgeObjectRelease();
  swift_unexpectedError();
  __break(1u);
LABEL_65:
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

    v68 = swift_conformsToProtocol2();
    if (v68) {
      v69 = v7;
    }
    else {
      v69 = 0LL;
    }
    if (v69)
    {
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t, uint64_t, __int128 *))(v11 + 16))( v17,  v10,  v7,  v130,  v132,  v133);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _JSONDirectArrayEncodable);
      swift_dynamicCast();
      v70 = v134;
      v71 = *(void *)(v134 + 24);
      v72 = v151;
      v132 = v150;
      v131 = __swift_project_boxed_opaque_existential_1(v149, v150);
      v74 = *(void **)(v70 + 32);
      v73 = *(void **)(v70 + 40);
      v75 = *(unsigned __int8 *)(v70 + 48);
      v77 = *(void *)(v70 + 56);
      v76 = *(void *)(v70 + 64);
      v79 = *(void *)(v70 + 72);
      v78 = *(void *)(v70 + 80);
      v81 = *(void *)(v70 + 88);
      v80 = *(void *)(v70 + 96);
      v83 = *(void *)(v70 + 104);
      v82 = *(void *)(v70 + 112);
      v85 = *(void *)(v70 + 120);
      v84 = *(__int128 **)(v70 + 128);
      v86 = *(void *)(v70 + 136);
      v134 = v86;
      v133 = v84;
      v130 = v79;
      LODWORD(v129) = v75;
      v128 = v72;
      *(void *)v136 = v71;
      *(void *)&v136[8] = v74;
      *(void *)&v136[16] = v73;
      v137 = v75;
      if ((v71 & 1) != 0)
      {
        v138 = v77;
        v139 = v76;
        v123 = v77;
        v140 = v79;
        v141 = v78;
        v142 = v81;
        v143 = v80;
        v144 = v83;
        v145 = v82;
        v146 = v85;
        v147 = v84;
        v148 = v86;
        v127 = (uint64_t (*)(_BYTE *, uint64_t, char *))*((void *)v72 + 2);
        v112 = v78;
        v125 = v78;
        v124 = v73;
        outlined copy of JSONEncoder.DateEncodingStrategy(v74, (uint64_t)v73, v75);
        outlined copy of JSONEncoder.KeyEncodingStrategy(v77);
        v113 = v130;
        outlined copy of JSONEncoder.NonConformingFloatEncodingStrategy(v130, v112);
        outlined copy of JSONEncoder.KeyEncodingStrategy(v85);
        swift_bridgeObjectRetain();
        v114 = v127(v136, v132, v128);
        outlined consume of JSONEncoder.DateEncodingStrategy(v74, (uint64_t)v124, v129);
        outlined consume of JSONEncoder.KeyEncodingStrategy(v123);
        outlined consume of JSONEncoder.NonConformingFloatEncodingStrategy(v113, v125);
        outlined consume of JSONEncoder.KeyEncodingStrategy(v85);
        swift_bridgeObjectRelease();
        type metadata accessor for JSONReference();
        v95 = swift_allocObject();
        a2 = v95;
        *(void *)(v95 + 16) = v114;
        *(void *)(v95 + 24) = 0LL;
        v96 = 6;
      }

      else
      {
        v87 = v77;
        v138 = v77;
        v139 = v76;
        v126 = v76;
        v88 = v79;
        v140 = v79;
        v141 = v78;
        v142 = v81;
        v143 = v80;
        v144 = v83;
        v145 = v82;
        v146 = v85;
        v147 = v84;
        v148 = v86;
        v122 = (uint64_t (*)(_BYTE *, uint64_t, char *))*((void *)v72 + 1);
        v127 = (uint64_t (*)(_BYTE *, uint64_t, char *))v85;
        v89 = v74;
        v124 = v74;
        v90 = v78;
        v91 = v87;
        outlined copy of JSONEncoder.DateEncodingStrategy(v89, (uint64_t)v73, v75);
        outlined copy of JSONEncoder.KeyEncodingStrategy(v91);
        outlined copy of JSONEncoder.NonConformingFloatEncodingStrategy(v88, v90);
        outlined copy of JSONEncoder.KeyEncodingStrategy((unint64_t)v127);
        swift_bridgeObjectRetain();
        v92 = v122(v136, v132, v128);
        v94 = v93;
        outlined consume of JSONEncoder.DateEncodingStrategy(v124, (uint64_t)v73, v129);
        outlined consume of JSONEncoder.KeyEncodingStrategy(v91);
        outlined consume of JSONEncoder.NonConformingFloatEncodingStrategy(v130, v90);
        outlined consume of JSONEncoder.KeyEncodingStrategy((unint64_t)v127);
        swift_bridgeObjectRelease();
        type metadata accessor for JSONReference();
        v95 = swift_allocObject();
        a2 = v95;
        *(void *)(v95 + 16) = v92;
        *(void *)(v95 + 24) = v94;
        v96 = 5;
      }

      *(_BYTE *)(v95 + 32) = v96;
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v149);
      return a2;
    }

    MEMORY[0x1895F8858](v68);
    *(&v122 - 6) = (uint64_t (*)(_BYTE *, uint64_t, char *))v7;
    *(&v122 - 5) = (uint64_t (*)(_BYTE *, uint64_t, char *))v107;
    v119 = v131;
    v120 = v108;
    v121 = v10;
    v109 = v152;
    unint64_t v24 = __JSONEncoder._wrapGeneric<A>(_:for:_:)( (void (*)(void *))partial apply for closure #1 in __JSONEncoder.wrapGeneric<A, B>(_:for:_:),  (uint64_t)(&v122 - 8),  v110,  v111,  v107,  v108);
    if (!v109) {
      return v24;
    }
    return a2;
  }

  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v17, v10, v7);
  swift_dynamicCast();
  uint64_t v31 = *(_DWORD *)v136;
  uint64_t v32 = *(unsigned __int16 *)&v136[4];
  unint64_t v33 = *(unsigned __int16 *)&v136[6];
  __int16 v34 = *(_WORD *)&v136[8];
  unint64_t v35 = *(_WORD *)&v136[10];
  v36 = *(_WORD *)&v136[12];
  unint64_t v37 = *(_WORD *)&v136[14];
  unint64_t v38 = *(_WORD *)&v136[16];
  LODWORD(v39) = *(unsigned __int16 *)&v136[18];
  if (!_So9NSDecimala__length_getter(v136))
  {
    *(_DWORD *)v136 = v31;
    *(_WORD *)&v136[4] = v32;
    *(_WORD *)&v136[6] = v33;
    *(_WORD *)&v136[8] = v34;
    *(_WORD *)&v136[10] = v35;
    *(_WORD *)&v136[12] = v36;
    *(_WORD *)&v136[14] = v37;
    *(_WORD *)&v136[16] = v38;
    *(_WORD *)&v136[18] = v39;
    if (_So9NSDecimala__isNegative_getter(v136))
    {
      v66 = 0xE300000000000000LL;
      v67 = 5136718LL;
LABEL_63:
      type metadata accessor for JSONReference();
      a2 = swift_allocObject();
      *(void *)(a2 + 16) = v67;
      *(void *)(a2 + 24) = v66;
      *(_BYTE *)(a2 + 32) = 1;
      return a2;
    }
  }

  *(_DWORD *)v136 = v31;
  *(_WORD *)&v136[4] = v32;
  *(_WORD *)&v136[6] = v33;
  *(_WORD *)&v136[8] = v34;
  *(_WORD *)&v136[10] = v35;
  *(_WORD *)&v136[12] = v36;
  *(_WORD *)&v136[14] = v37;
  *(_WORD *)&v136[16] = v38;
  *(_WORD *)&v136[18] = v39;
  if (!_So9NSDecimala__length_getter(v136))
  {
    v66 = 0xE100000000000000LL;
    v67 = 48LL;
    goto LABEL_63;
  }

  *(void *)&v135 = 0LL;
  *((void *)&v135 + 1) = 0xE000000000000000LL;
  *(_DWORD *)v136 = v31;
  *(_WORD *)&v136[4] = v32;
  *(_WORD *)&v136[6] = v33;
  *(_WORD *)&v136[8] = v34;
  *(_WORD *)&v136[10] = v35;
  *(_WORD *)&v136[12] = v36;
  *(_WORD *)&v136[14] = v37;
  *(_WORD *)&v136[16] = v38;
  *(_WORD *)&v136[18] = v39;
  *(_DWORD *)v149 = v31;
  *(_WORD *)&v149[4] = v32;
  *(_WORD *)&v149[6] = v33;
  *(_WORD *)&v149[8] = v34;
  *(_WORD *)&v149[10] = v35;
  *(_WORD *)&v149[12] = v36;
  *(_WORD *)&v149[14] = v37;
  *(_WORD *)&v149[16] = v38;
  *(_WORD *)&v149[18] = v39;
  if ((int)_So9NSDecimala__exponent_getter(v149) >= 1)
  {
    do
    {
      LODWORD(v134) = v39;
      v40._countAndFlagsBits = 48LL;
      v40._object = (void *)0xE100000000000000LL;
      String.append(_:)(v40);
      *(_DWORD *)v149 = v31;
      *(_WORD *)&v149[4] = v32;
      *(_WORD *)&v149[6] = v33;
      *(_WORD *)&v149[8] = v34;
      *(_WORD *)&v149[10] = v35;
      *(_WORD *)&v149[12] = v36;
      *(_WORD *)&v149[14] = v37;
      *(_WORD *)&v149[16] = v38;
      *(_WORD *)&v149[18] = v134;
      unint64_t v41 = _So9NSDecimala__exponent_getter(v149);
      _So9NSDecimala__exponent_setter((v41 - 1), v136);
      uint64_t v31 = *(_DWORD *)v136;
      uint64_t v32 = *(unsigned __int16 *)&v136[4];
      unint64_t v33 = *(unsigned __int16 *)&v136[6];
      __int16 v34 = *(_WORD *)&v136[8];
      unint64_t v35 = *(_WORD *)&v136[10];
      v36 = *(_WORD *)&v136[12];
      unint64_t v37 = *(_WORD *)&v136[14];
      unint64_t v38 = *(_WORD *)&v136[16];
      LODWORD(v39) = *(unsigned __int16 *)&v136[18];
      *(_OWORD *)v149 = *(_OWORD *)v136;
      *(_DWORD *)&v149[16] = *(_DWORD *)&v136[16];
    }

    while ((int)_So9NSDecimala__exponent_getter(v149) > 0);
  }

  *(_DWORD *)v149 = v31;
  *(_WORD *)&v149[4] = v32;
  *(_WORD *)&v149[6] = v33;
  *(_WORD *)&v149[8] = v34;
  *(_WORD *)&v149[10] = v35;
  *(_WORD *)&v149[12] = v36;
  *(_WORD *)&v149[14] = v37;
  *(_WORD *)&v149[16] = v38;
  *(_WORD *)&v149[18] = v39;
  if (!_So9NSDecimala__exponent_getter(v149))
  {
    _So9NSDecimala__exponent_setter(1LL, v136);
    uint64_t v31 = *(_DWORD *)v136;
    uint64_t v32 = *(unsigned __int16 *)&v136[4];
    unint64_t v33 = *(unsigned __int16 *)&v136[6];
    __int16 v34 = *(_WORD *)&v136[8];
    unint64_t v35 = *(_WORD *)&v136[10];
    v36 = *(_WORD *)&v136[12];
    unint64_t v37 = *(_WORD *)&v136[14];
    unint64_t v38 = *(_WORD *)&v136[16];
    LOWORD(v39) = *(_WORD *)&v136[18];
  }

  LODWORD(v134) = v31;
  *(_DWORD *)v149 = v31;
  int v42 = v33;
  unint64_t v43 = v32;
  *(_WORD *)&v149[4] = v32;
  LODWORD(v132) = v42;
  *(_WORD *)&v149[6] = v42;
  *(_WORD *)&v149[8] = v34;
  *(_WORD *)&v149[10] = v35;
  *(_WORD *)&v149[12] = v36;
  *(_WORD *)&v149[14] = v37;
  *(_WORD *)&v149[16] = v38;
  *(_WORD *)&v149[18] = v39;
  if (!_So9NSDecimala__length_getter(v149))
  {
    int v44 = v134;
    unint64_t v45 = v32;
    LOWORD(v46) = v132;
LABEL_49:
    *(_DWORD *)v149 = v44;
    *(_WORD *)&v149[4] = v45;
    *(_WORD *)&v149[6] = v46;
    *(_WORD *)&v149[8] = v34;
    *(_WORD *)&v149[10] = v35;
    *(_WORD *)&v149[12] = v36;
    *(_WORD *)&v149[14] = v37;
    *(_WORD *)&v149[16] = v38;
    *(_WORD *)&v149[18] = v39;
    v97 = v44;
    v98 = v45;
    v99 = _So9NSDecimala__exponent_getter(v149);
    v100 = v97;
    v101 = v98;
    if (v99 <= 0)
    {
      *(_DWORD *)v149 = v97;
      LODWORD(v133) = v98;
      *(_WORD *)&v149[4] = v98;
      *(_WORD *)&v149[6] = v46;
      *(_WORD *)&v149[8] = v34;
      *(_WORD *)&v149[10] = v35;
      *(_WORD *)&v149[12] = v36;
      *(_WORD *)&v149[14] = v37;
      *(_WORD *)&v149[16] = v38;
      *(_WORD *)&v149[18] = v39;
      v102 = _So9NSDecimala__exponent_getter(v149);
      LODWORD(v134) = v97;
      v103 = v46;
      if (v102)
      {
        v104 = (__int16)v133;
        do
        {
          v105._countAndFlagsBits = 48LL;
          v105._object = (void *)0xE100000000000000LL;
          String.append(_:)(v105);
          *(_DWORD *)v149 = v134;
          *(_WORD *)&v149[4] = v104;
          *(_WORD *)&v149[6] = v103;
          *(_WORD *)&v149[8] = v34;
          *(_WORD *)&v149[10] = v35;
          *(_WORD *)&v149[12] = v36;
          *(_WORD *)&v149[14] = v37;
          *(_WORD *)&v149[16] = v38;
          *(_WORD *)&v149[18] = v39;
          v106 = _So9NSDecimala__exponent_getter(v149);
          _So9NSDecimala__exponent_setter((v106 + 1), v136);
          v104 = *(_WORD *)&v136[4];
          v103 = *(_WORD *)&v136[6];
          __int16 v34 = *(_WORD *)&v136[8];
          unint64_t v35 = *(_WORD *)&v136[10];
          v36 = *(_WORD *)&v136[12];
          unint64_t v37 = *(_WORD *)&v136[14];
          unint64_t v38 = *(_WORD *)&v136[16];
          LOWORD(v39) = *(_WORD *)&v136[18];
          LODWORD(v134) = *(_DWORD *)v136;
          *(_OWORD *)v149 = *(_OWORD *)v136;
          *(_DWORD *)&v149[16] = *(_DWORD *)&v136[16];
        }

        while (_So9NSDecimala__exponent_getter(v149));
      }

      else
      {
        v104 = (__int16)v133;
      }

      v115._countAndFlagsBits = 46LL;
      v115._object = (void *)0xE100000000000000LL;
      String.append(_:)(v115);
      v116._countAndFlagsBits = 48LL;
      v116._object = (void *)0xE100000000000000LL;
      String.append(_:)(v116);
      LOWORD(v46) = v103;
      v100 = v134;
      v101 = v104;
    }

    *(_DWORD *)v149 = v100;
    *(_WORD *)&v149[4] = v101;
    *(_WORD *)&v149[6] = v46;
    *(_WORD *)&v149[8] = v34;
    *(_WORD *)&v149[10] = v35;
    *(_WORD *)&v149[12] = v36;
    *(_WORD *)&v149[14] = v37;
    *(_WORD *)&v149[16] = v38;
    *(_WORD *)&v149[18] = v39;
    if (_So9NSDecimala__isNegative_getter(v149))
    {
      v117._countAndFlagsBits = 45LL;
      v117._object = (void *)0xE100000000000000LL;
      String.append(_:)(v117);
    }

    *(_OWORD *)v149 = v135;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ReversedCollection<String>);
    lazy protocol witness table accessor for type [String] and conformance [A]( (unint64_t *)&lazy protocol witness table cache variable for type ReversedCollection<String> and conformance ReversedCollection<A>,  &demangling cache variable for type metadata for ReversedCollection<String>,  MEMORY[0x189619928]);
    v67 = String.init<A>(_:)();
    v66 = v118;
    goto LABEL_63;
  }

  unint64_t v11 = 3435973837LL;
  int v10 = 10LL;
  int v44 = v134;
  unint64_t v45 = v43;
  unint64_t v46 = v132;
  while (1)
  {
    LODWORD(v134) = v44;
    LODWORD(v133) = v45;
    *(_DWORD *)v149 = v44;
    *(_WORD *)&v149[4] = v45;
    *(_WORD *)&v149[6] = v46;
    *(_WORD *)&v149[8] = v34;
    *(_WORD *)&v149[10] = v35;
    *(_WORD *)&v149[12] = v36;
    *(_WORD *)&v149[14] = v37;
    *(_WORD *)&v149[16] = v38;
    *(_WORD *)&v149[18] = v39;
    if (!_So9NSDecimala__exponent_getter(v149))
    {
      LODWORD(v132) = v46;
      v47._countAndFlagsBits = 46LL;
      v47._object = (void *)0xE100000000000000LL;
      String.append(_:)(v47);
      LOWORD(v46) = v132;
    }

    *(_DWORD *)v149 = v134;
    *(_WORD *)&v149[4] = (_WORD)v133;
    *(_WORD *)&v149[6] = v46;
    *(_WORD *)&v149[8] = v34;
    *(_WORD *)&v149[10] = v35;
    *(_WORD *)&v149[12] = v36;
    *(_WORD *)&v149[14] = v37;
    *(_WORD *)&v149[16] = v38;
    *(_WORD *)&v149[18] = v39;
    unint64_t v48 = _So9NSDecimala__exponent_getter(v149);
    _So9NSDecimala__exponent_setter((v48 + 1), v136);
    unint64_t v49 = *(unsigned int *)v136;
    unint64_t v50 = (__int128 *)*(unsigned __int16 *)&v136[4];
    v51 = *(_WORD *)&v136[6];
    id v52 = *(unsigned __int16 *)&v136[8];
    v131 = (void *)*(unsigned __int16 *)&v136[10];
    v130 = *(unsigned __int16 *)&v136[12];
    uint64_t v53 = *(_WORD *)&v136[18];
    v128 = (char *)*(unsigned __int16 *)&v136[14];
    LODWORD(v129) = *(unsigned __int16 *)&v136[16];
    NSDecimal.asVariableLengthInteger()( *(unsigned int *)v136 | ((unint64_t)*(unsigned __int16 *)&v136[4] << 32) | ((unint64_t)*(unsigned __int16 *)&v136[6] << 48),  *(unsigned __int16 *)&v136[8] | ((unint64_t)*(unsigned __int16 *)&v136[10] << 16) | ((unint64_t)*(unsigned __int16 *)&v136[12] << 32) | ((unint64_t)*(unsigned __int16 *)&v136[14] << 48),  *(unsigned __int16 *)&v136[16] | (*(unsigned __int16 *)&v136[18] << 16));
    a2 = v54;
    v55 = *(void *)(v54 + 16);
    v134 = v49;
    v133 = v50;
    v132 = v52;
    if (v55)
    {
      xpc_object_t v7 = static Array._allocateBufferUninitialized(minimumCapacity:)();
      size_t v17 = (char *)(v7 + 30);
      *(void *)(v7 + 16) = v55;
      bzero((void *)(v7 + 32), 2 * v55);
      v56 = *(unsigned __int16 *)(2 * v55 + a2 + 30);
      v57 = v56 / 0xA;
      while (1)
      {
        *(_WORD *)&v17[2 * v55] = v57;
        unint64_t v58 = v56 % 0xA;
        if (v55 == 1) {
          break;
        }
        v56 = *(unsigned __int16 *)(a2 + 28 + 2 * v55) | (v58 << 16);
        v57 = v56 / 0xA;
        int v59 = v55 - 2;
        --v55;
        if (v59 >= *(void *)(v7 + 16))
        {
          __break(1u);
          goto LABEL_42;
        }
      }
    }

    else
    {
      unint64_t v58 = 0;
      xpc_object_t v7 = MEMORY[0x18961AFE8];
    }

    uint64_t v60 = *(void *)(v7 + 16);
    if (v60 && !*(_WORD *)(v7 + 2 * v60 + 30))
    {
      do
      {
        *(void *)(v7 + 16) = v60 - 1;
        if (v60 == 1) {
          break;
        }
      }

      while (!*(unsigned __int16 *)(v7 + 28 + 2 * v60--));
    }

    swift_bridgeObjectRelease();
    *(_DWORD *)v149 = v134;
    *(_WORD *)&v149[4] = (_WORD)v133;
    *(_WORD *)&v149[6] = v51;
    *(_WORD *)&v149[8] = v132;
    *(_WORD *)&v149[10] = (_WORD)v131;
    *(_WORD *)&v149[12] = v130;
    *(_WORD *)&v149[14] = (_WORD)v128;
    *(_WORD *)&v149[16] = v129;
    *(_WORD *)&v149[18] = v53;
    NSDecimal.copyVariableLengthInteger(_:)((Swift::OpaquePointer)v7);
    if (v62) {
      break;
    }
    v152 = 0LL;
    unint64_t v39 = *(void *)(v7 + 16);
    swift_bridgeObjectRelease();
    if (HIDWORD(v39)) {
      goto LABEL_65;
    }
    _So9NSDecimala__length_setter(v39, v149);
    *(_DWORD *)v136 = *(_DWORD *)v149;
    *(_OWORD *)&v136[4] = *(_OWORD *)&v149[4];
    *(void *)v149 = v58 | 0x30;
    v63._countAndFlagsBits = MEMORY[0x186E1B6AC](v149, 1LL);
    String.append(_:)(v63);
    swift_bridgeObjectRelease();
    LODWORD(v134) = *(_DWORD *)v136;
    LODWORD(v133) = *(unsigned __int16 *)&v136[4];
    unint64_t v46 = *(unsigned __int16 *)&v136[6];
    __int16 v34 = *(_WORD *)&v136[8];
    unint64_t v35 = *(_WORD *)&v136[10];
    v36 = *(_WORD *)&v136[12];
    unint64_t v37 = *(_WORD *)&v136[14];
    unint64_t v38 = *(_WORD *)&v136[16];
    LOWORD(v39) = *(_WORD *)&v136[18];
    *(_OWORD *)v149 = *(_OWORD *)v136;
    *(_DWORD *)&v149[16] = *(_DWORD *)&v136[16];
    v64 = _So9NSDecimala__length_getter(v149);
    unint64_t v45 = (int)v133;
    int v44 = v134;
    if (!v64) {
      goto LABEL_49;
    }
  }

  swift_bridgeObjectRelease();
  swift_unexpectedError();
  __break(1u);
LABEL_65:
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

  v73 = v32[18];
  v102 = &unk_189C763D8;
  v74 = lazy protocol witness table accessor for type _JSONUnkeyedEncodingContainer and conformance _JSONUnkeyedEncodingContainer();
  v101[0] = v32;
  v101[1] = v68;
  v103 = v74;
  v101[2] = v73;
  swift_retain();
  swift_retain();
  specialized Data._Representation.withUnsafeBytes<A>(_:)(v98, v97);
  if (!v37)
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v101);
    swift_release();
    v32[18] = v34;
    swift_retain();
    swift_release();
    v32[19] = v33;
    swift_release();
    swift_release();
    v77 = v32[2];
    if (v77 >> 62)
    {
      swift_bridgeObjectRetain();
      v83 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (v83) {
        return specialized RangeReplaceableCollection<>.popLast()();
      }
    }

    else if (*(void *)((v77 & 0xFFFFFFFFFFFFF8LL) + 0x10))
    {
      return specialized RangeReplaceableCollection<>.popLast()();
    }

    __break(1u);
    goto LABEL_91;
  }

  __swift_destroy_boxed_opaque_existential_1((uint64_t)v101);
  swift_release();
  v32[18] = v34;
  swift_retain();
  swift_release();
  v32[19] = v33;
  swift_release();
  swift_release();
  v75 = v32[2];
  if (v75 >> 62)
  {
    swift_bridgeObjectRetain();
    v76 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }

  else
  {
    v76 = *(void *)((v75 & 0xFFFFFFFFFFFFF8LL) + 0x10);
  }

  if (!(*(void *)v27 >> 62))
  {
    if (!*(void *)((*(void *)v27 & 0xFFFFFFFFFFFFF8LL) + 0x10))
    {
LABEL_94:
      __break(1u);
      JUMPOUT(0x18300C6A8LL);
    }

    goto LABEL_48;
  }

    uint64_t v30 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v30 & 1) == 0) {
      goto LABEL_45;
    }
LABEL_43:
    uint64_t v31 = specialized Collection<>.firstIndex(of:)(47LL, 0xE100000000000000LL, v5, v7);
    if ((v32 & 1) == 0)
    {
      unint64_t v21 = v31;
LABEL_56:
      uint64_t result = String.index(after:)();
      if (v21 >> 14 == result >> 14)
      {
LABEL_57:
        unint64_t v38 = 0LL;
        unint64_t v39 = 0LL;
LABEL_61:
        int v42 = static String.homeDirectoryPath(forUser:)(v38, v39);
        int v44 = v43;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRetain();
        specialized Collection.suffix(from:)(v21, v5, v7);
        swift_bridgeObjectRelease();
        lazy protocol witness table accessor for type Substring and conformance Substring();
        swift_bridgeObjectRetain();
        String.append<A>(contentsOf:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v5 = v42;
        unint64_t v33 = v44;
        goto LABEL_62;
      }

      if (v21 >> 14 < result >> 14)
      {
        __break(1u);
        return result;
      }

          a2 = v60;
        }

        swift_bridgeObjectRetain();
        id v52 = v14;
        uint64_t v53 = a2;
        v54 = a3;
        v55 = v16;
LABEL_44:
        specialized CocoaError.init<A>(_:path:underlying:variant:source:destination:)( (uint64_t (*)(void))v52,  v53,  v54,  v55,  0x65766F6D6552LL,  0xE600000000000000LL,  0LL,  0LL,  (void *(*)(void *__return_ptr, void *, uint64_t))&dst,  0LL,  0LL);
        goto LABEL_45;
    }
  }

  uint64_t v12 = (void *)v10[2];
  if (!v12)
  {
    swift_release();
    return removefile_state_free(v9);
  }

  v12;
LABEL_45:
  swift_willThrow();
  swift_release();
  return removefile_state_free(v9);
}

              unsigned __int8 v23 = &v4[v10];
              v0[3] = (uint64_t)&v4[v10];
              uint64_t v32 = 0LL;
              unint64_t v33 = 0xE000000000000000LL;
              v0 = &v32;
              _StringGuts.grow(_:)(20LL);
              swift_bridgeObjectRelease();
              if ((unint64_t)v23 < v3[4])
              {
LABEL_43:
                unint64_t v24 = *v23;
                unint64_t v25 = specialized static JSONError.SourceLocation.sourceLocation(at:fullSource:)( (unint64_t)v23,  v3[1],  v3[2]);
                uint64_t v27 = v26;
                id v29 = v28;
                lazy protocol witness table accessor for type JSONError and conformance JSONError();
                swift_allocError();
                *(void *)uint64_t v8 = 0xD000000000000019LL;
                *(void *)(v8 + _Block_object_dispose((const void *)(v11 - 240), 8) = 0x80000001839CB560LL;
                *(void *)(v8 + 16) = v24;
                *(void *)(v8 + 24) = v25;
                *(void *)(v8 + 32) = v27;
                *(void *)(v8 + 40) = v29;
                int v9 = 1;
                goto LABEL_44;
              }

              goto LABEL_50;
            }

    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
LABEL_43:
    _fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
    goto LABEL_44;
  }

  int v18 = (void *)MEMORY[0x18961AFE8];
  if ((a1 & 1) != 0)
  {
LABEL_23:
    unint64_t v24 = _swift_isClassOrObjCExistentialType();
    if ((v14 & 0x8000000000000000LL) == 0)
    {
      if ((v24 & 1) != 0) {
        unint64_t v25 = a4 & 0xFFFFFFFFFFFFFF8LL;
      }
      else {
        unint64_t v25 = a4;
      }
      unint64_t v26 = *(void *)(a5 - 8);
      if ((unint64_t)v18 < v25
        || (uint64_t v27 = (*(unsigned __int8 *)(v26 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v26 + 80),
            (unint64_t)v18 + v27 >= v25 + v27 + *(void *)(v26 + 72) * v14))
      {
        swift_arrayInitWithTakeFrontToBack();
      }

      else if (v18 != (void *)v25)
      {
        swift_arrayInitWithTakeBackToFront();
      }

      if ((_swift_isClassOrObjCExistentialType() & 1) != 0) {
        uint64_t v28 = a4 & 0xFFFFFFFFFFFFFF8LL;
      }
      else {
        uint64_t v28 = a4;
      }
      *(void *)(v28 + 16) = 0LL;
      swift_bridgeObjectRelease();
      return (uint64_t)v18;
    }

    goto LABEL_43;
  }

            uint64_t v12 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v12);
            uint64_t v15 = *((void *)v12 + 2);
            if (v15) {
              goto LABEL_18;
            }
LABEL_43:
            __break(1u);
            goto LABEL_44;
          }

    swift_bridgeObjectRetain();
    unint64_t v26 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    unint64_t v22 = v26 + v8;
    if (!__OFADD__(v26, v8)) {
      goto LABEL_28;
    }
LABEL_44:
    __break(1u);
  }

  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

    specialized $defer #1 <A>() in _merge<A>(low:mid:high:buffer:by:)((void **)&v24, (const void **)&v23, &v22);
    return 1LL;
  }

  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

  Hasher._combine(_:)(0);
  if (!v33) {
    goto LABEL_43;
  }
LABEL_38:
  Hasher._combine(_:)(1u);
  type metadata accessor for CFDictionaryRef(0LL);
  lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( (unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef,  (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef,  (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
  unint64_t v43 = v33;
  _CFObject.hash(into:)();

  if (v35)
  {
LABEL_39:
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0LL);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( (unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef,  (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef,  (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
    int v44 = v35;
    _CFObject.hash(into:)();

    goto LABEL_45;
  }

  Hasher._combine(_:)(0);
  if (!v30) {
    goto LABEL_43;
  }
LABEL_38:
  Hasher._combine(_:)(1u);
  type metadata accessor for CFDictionaryRef(0LL);
  lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( (unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef,  (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef,  (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
  uint64_t v40 = v30;
  _CFObject.hash(into:)();

  if (v32)
  {
LABEL_39:
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0LL);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( (unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef,  (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef,  (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
    unint64_t v41 = v32;
    _CFObject.hash(into:)();

    goto LABEL_45;
  }

  Hasher._combine(_:)(0);
  if (!v34) {
    goto LABEL_43;
  }
LABEL_38:
  Hasher._combine(_:)(1u);
  type metadata accessor for CFDictionaryRef(0LL);
  lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( (unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef,  (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef,  (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
  int v44 = v34;
  _CFObject.hash(into:)();

  if (v36)
  {
LABEL_39:
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0LL);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( (unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef,  (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef,  (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
    unint64_t v45 = v36;
    _CFObject.hash(into:)();

    goto LABEL_45;
  }

  Hasher._combine(_:)(0);
  if (!v30) {
    goto LABEL_43;
  }
LABEL_38:
  Hasher._combine(_:)(1u);
  type metadata accessor for CFDictionaryRef(0LL);
  lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( (unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef,  (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef,  (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
  uint64_t v40 = v30;
  _CFObject.hash(into:)();

  if (v32)
  {
LABEL_39:
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0LL);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( (unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef,  (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef,  (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
    unint64_t v41 = v32;
    _CFObject.hash(into:)();

    goto LABEL_45;
  }

            __int16 v34 = dispatch thunk of BinaryInteger._lowWord.getter();
            v18(v12, v6);
            __swift_destroy_boxed_opaque_existential_1((uint64_t)v58);
            if (!v34)
            {
              __swift_destroy_boxed_opaque_existential_1((uint64_t)&v55);
              return 0LL;
            }

            if (v34 == 1)
            {
              __swift_destroy_boxed_opaque_existential_1((uint64_t)&v55);
              return 1LL;
            }

            __swift_destroy_boxed_opaque_existential_1((uint64_t)&v55);
            return 2LL;
          }

  if (v258)
  {
    if (!v257) {
      return 0LL;
    }
    v90 = v21;
    v291 = v20;
    v91 = v18;
    v286 = v19;
    v92 = v16;
    v93 = v17;
    v94 = v13;
    v95 = v12;
    v96 = v14;
    v178 = v31;
    v97 = v30;
    v98 = v15;
    v337 = v9;
    v345 = v8;
    v321 = v23;
    v329 = v10;
    v99 = specialized static Array<A>.== infix(_:_:)(v258, v257);
    unsigned __int8 v23 = v321;
    int v10 = v329;
    int v9 = v337;
    uint64_t v8 = v345;
    uint64_t v15 = v98;
    uint64_t v30 = v97;
    uint64_t v31 = v178;
    int v14 = v96;
    uint64_t v12 = v95;
    unint64_t v13 = v94;
    size_t v17 = v93;
    uint64_t v16 = v92;
    unint64_t v19 = v286;
    int v18 = v91;
    char v20 = v291;
    unint64_t v21 = v90;
    if ((v99 & 1) == 0) {
      return 0LL;
    }
  }

  else if (v257)
  {
    return 0LL;
  }

  if (v254 == 7)
  {
    if (v253 != 7) {
      return 0LL;
    }
  }

  else
  {
    if (v253 == 7) {
      return 0LL;
    }
    v109 = v21;
    v293 = v20;
    v110 = v18;
    v287 = v19;
    v111 = v16;
    v112 = v17;
    v113 = v13;
    v114 = v12;
    v115 = v14;
    v180 = v31;
    v116 = v30;
    v117 = v15;
    v339 = v9;
    v347 = v8;
    v323 = v23;
    v331 = v10;
    v118 = specialized == infix<A>(_:_:)(v254, v253);
    unsigned __int8 v23 = v323;
    int v10 = v331;
    int v9 = v339;
    uint64_t v8 = v347;
    uint64_t v15 = v117;
    uint64_t v30 = v116;
    uint64_t v31 = v180;
    int v14 = v115;
    uint64_t v12 = v114;
    unint64_t v13 = v113;
    size_t v17 = v112;
    uint64_t v16 = v111;
    unint64_t v19 = v287;
    int v18 = v110;
    char v20 = v293;
    unint64_t v21 = v109;
    if ((v118 & 1) == 0) {
      return 0LL;
    }
  }

  if ((v252 & 1) != 0)
  {
    if ((v251 & 1) == 0) {
      return 0LL;
    }
  }

  else
  {
    if ((v251 & 1) != 0) {
      return 0LL;
    }
    if ((v248 & 1) != 0)
    {
      if ((v247 & 1) == 0) {
        return 0LL;
      }
    }

    else
    {
      v172 = v30;
      v181 = v31;
      v301 = v14;
      v308 = v12;
      v315 = v13;
      v283 = v17;
      v368 = v8;
      v369 = v9;
      v370 = v10;
      LOBYTE(v371) = 0;
      if ((v247 & 1) != 0) {
        return 0LL;
      }
      v119 = v15;
      v120 = v16;
      v121 = v19;
      v122 = v18;
      v123 = v20;
      v124 = v21;
      v357 = v234;
      LOBYTE(v35_Block_object_dispose((const void *)(v11 - 240), 8) = v235 & 1;
      v359 = v236;
      LOBYTE(v360) = v237 & 1;
      v361 = v23;
      v125 = specialized static WeekendRange.== infix(_:_:)((uint64_t)&v368, (uint64_t)&v357);
      unint64_t v21 = v124;
      char v20 = v123;
      int v18 = v122;
      unint64_t v19 = v121;
      uint64_t v16 = v120;
      size_t v17 = v283;
      unint64_t v13 = v315;
      uint64_t v12 = v308;
      int v14 = v301;
      uint64_t v30 = v172;
      uint64_t v31 = v181;
      uint64_t v15 = v119;
      if (!v125) {
        return 0LL;
      }
    }
  }

  if ((v249 & 1) != 0)
  {
    if (!v250) {
      return 0LL;
    }
  }

  else
  {
    v126 = v250;
    if (v244 != v243) {
      v126 = 1;
    }
    if ((v126 & 1) != 0) {
      return 0LL;
    }
  }

  if (v246 == 4)
  {
    if (v245 != 4) {
      return 0LL;
    }
  }

  else
  {
    if (v245 == 4) {
      return 0LL;
    }
    v127 = v21;
    v294 = v20;
    v128 = v18;
    v288 = v19;
    v129 = v16;
    v130 = v17;
    v131 = v13;
    v132 = v12;
    v133 = v14;
    v182 = v31;
    v134 = v30;
    v135 = v15;
    v136 = specialized == infix<A>(_:_:)(v246, v245);
    uint64_t v15 = v135;
    uint64_t v30 = v134;
    uint64_t v31 = v182;
    int v14 = v133;
    uint64_t v12 = v132;
    unint64_t v13 = v131;
    size_t v17 = v130;
    uint64_t v16 = v129;
    unint64_t v19 = v288;
    int v18 = v128;
    char v20 = v294;
    unint64_t v21 = v127;
    if ((v136 & 1) == 0) {
      return 0LL;
    }
  }

  v173 = v30;
  v183 = v31;
  v164 = v15;
  if (!v242)
  {
    if (!v241) {
      goto LABEL_87;
    }
    goto LABEL_91;
  }

  if (!v241)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
LABEL_91:
    v69 = v229;
    v70 = v241;
    outlined copy of Locale.LanguageCode?(v229, v241);
    v71 = v230;
    v72 = v242;
    goto LABEL_31;
  }

  v137 = v14;
  v138 = v12;
  v139 = v13;
  v140 = v17;
  v141 = v16;
  v142 = v19;
  v143 = v18;
  v144 = v20;
  v145 = v21;
  if (v239 != v238 || v240 != v233)
  {
    v146 = _stringCompareWithSmolCheck(_:_:expecting:)();
    int v14 = v137;
    uint64_t v12 = v138;
    unint64_t v13 = v139;
    size_t v17 = v140;
    uint64_t v16 = v141;
    unint64_t v19 = v142;
    int v18 = v143;
    char v20 = v144;
    unint64_t v21 = v145;
    if ((v146 & 1) == 0) {
      return 0LL;
    }
  }

            swift_bridgeObjectRetain();
            outlined copy of PathOrURL((void *)a6, a7, (uint64_t)a8, 1);
            if (_foundation_swift_url_feature_enabled())
            {
              v100 = a8;
              swift_retain();
              v57 = (id)a6;
              swift_retain();
              unint64_t v58 = URL.path(percentEncoded:)(1);
              countAndFlagsBits = v58._countAndFlagsBits;
              v99 = v58;
              swift_bridgeObjectRetain();
              if (String.count.getter() <= 1)
              {
                object = (unint64_t)v58._object;
              }

              else
              {
                object = (unint64_t)v58._object;
                if ((specialized BidirectionalCollection.last.getter( v58._countAndFlagsBits,  (unint64_t)v58._object) & 0x1FF) == 0x2F)
                {
                  specialized RangeReplaceableCollection<>.popLast()();
                  swift_bridgeObjectRelease();
                  countAndFlagsBits = v99._countAndFlagsBits;
                  object = (unint64_t)v99._object;
                }
              }

              v97 = Set.init(minimumCapacity:)();
              v73 = specialized Set._Variant.insert(_:)(&v101, 0x2FuLL);
              v74 = v97;
              v75 = HIBYTE(object) & 0xF;
              if ((object & 0x2000000000000000LL) == 0) {
                v75 = countAndFlagsBits & 0xFFFFFFFFFFFFLL;
              }
              if (v75)
              {
                v92 = (uint64_t)&v92;
                v97 = countAndFlagsBits;
                v98 = object;
                MEMORY[0x1895F8858](v73);
                v90 = (uint64_t)&v97;
                v91 = v74;
                swift_bridgeObjectRetain();
                specialized String.UTF8View.withContiguousStorageIfAvailable<A>(_:)( (void *(*)(__int128 *__return_ptr, void *, uint64_t))closure #1 in StringProtocol.removingURLPercentEncoding(excluding:)specialized partial apply,  (uint64_t)&v89,  countAndFlagsBits,  object);
                if (v76 == 1)
                {
                  v77 = v97;
                  v78 = v98;
                  swift_bridgeObjectRetain();
                  specialized StringProtocol.removingURLPercentEncoding<A>(utf8Buffer:excluding:)(v77, v78, v74);
                  swift_bridgeObjectRelease();
                }

                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                id v29 = v96;
              }

              else
              {
                swift_bridgeObjectRelease();
                id v29 = v96;
              }

              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              outlined consume of PathOrURL((void *)a6, a7, (uint64_t)a8, 1);
            }

            else
            {
              v61 = objc_msgSend((id)a6, sel__parameterString);
              if (v61)
              {
                v62 = v61;
                v63 = static String._unconditionallyBridgeFromObjectiveC(_:)(v61);
                v65 = v64;

                if (getEnumTag for _DarwinSearchPathsSequence.Iterator.State()
                  && (v66 = objc_msgSend((id)a6, sel_path)) != 0)
                {
                  v67 = v66;
                  v68 = static String._unconditionallyBridgeFromObjectiveC(_:)(v66);
                  v70 = v69;

                  v99._countAndFlagsBits = (uint64_t)v68;
                  v99._object = v70;
                  swift_bridgeObjectRetain();
                  v71._countAndFlagsBits = 59LL;
                  v71._object = (void *)0xE100000000000000LL;
                  String.append(_:)(v71);
                  id v29 = v96;
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRetain();
                  v72._countAndFlagsBits = (uint64_t)v63;
                  v72._object = v65;
                  String.append(_:)(v72);
                  swift_bridgeObjectRelease();
                }

                else
                {
                  v99._countAndFlagsBits = 59LL;
                  v99._object = (void *)0xE100000000000000LL;
                  v79._countAndFlagsBits = (uint64_t)v63;
                  v79._object = v65;
                  String.append(_:)(v79);
                }

                swift_bridgeObjectRelease();
                outlined consume of PathOrURL((void *)a6, a7, (uint64_t)a8, 1);
                goto LABEL_64;
              }

              v80 = objc_msgSend((id)a6, sel_path);
              if (v80)
              {
                v81 = v80;
                static String._unconditionallyBridgeFromObjectiveC(_:)(v80);
              }
            }

            outlined consume of PathOrURL((void *)a6, a7, (uint64_t)a8, 1);
LABEL_64:
            v82 = String._bridgeToObjectiveCImpl()();
            swift_bridgeObjectRelease();
            v83 = (id)a6;
            outlined consume of PathOrURL((void *)a6, a7, (uint64_t)a8, 1);
            v84 = (void *)v93;
            if (v93)
            {
              v99._countAndFlagsBits = v93;
              lazy protocol witness table accessor for type POSIXError and conformance POSIXError();
              v85 = v84;
              if (_getErrorEmbeddedNSError<A>(_:)())
              {
              }

              else
              {
                swift_allocError();
                *v87 = v85;
              }

              v86 = (void *)_swift_stdlib_bridgeErrorToNSError();
              id v29 = v96;
            }

            else
            {
              v86 = 0LL;
            }

            if (v29)
            {
              id v29 = String._bridgeToObjectiveCImpl()();
              swift_bridgeObjectRelease();
            }

             objc_msgSend( (id)objc_opt_self(),  sel__cocoaErrorWithCode_path_url_underlying_variant_source_destination_,  v94,  v82,  v83,  v86,  v29,  0,  0);
            swift_unknownObjectRelease();

            outlined consume of PathOrURL((void *)a6, a7, (uint64_t)a8, 1);
            return swift_willThrow();
          }

          swift_bridgeObjectRelease_n();
        }

        id v29 = v96;
        goto LABEL_42;
    }
  }

  static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSCocoaErrorDomain");
  unint64_t v22 = objc_allocWithZone((Class)&OBJC_CLASS___NSError);
  unsigned __int8 v23 = String._bridgeToObjectiveCImpl()();
  swift_bridgeObjectRelease();
  unint64_t v24 = objc_msgSend(v22, sel_initWithDomain_code_userInfo_, v23, 514, _NativeDictionary.bridged()());
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  a8 = objc_msgSend(v24, sel_domain);
  unint64_t v25 = static String._unconditionallyBridgeFromObjectiveC(_:)(a8);
  a5 = v26;

  if (v25 == static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSCocoaErrorDomain") && a5 == v27)
  {
    swift_bridgeObjectRelease_n();
  }

  else
  {
    a7 = (unint64_t)v27;
    a6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((a6 & 1) == 0)
    {
      __break(1u);
      goto LABEL_10;
    }
  }

  return swift_willThrow();
}

    int v9 = (void *)MEMORY[0x18961AFF0];
    __int128 v4 = __src;
    goto LABEL_43;
  }

  swift_unknownObjectRetain();
  int v9 = (void *)static Dictionary._bridgeFromObjectiveCAdoptingNativeStorageOf(_:)();
  if (v9) {
    goto LABEL_43;
  }
  __src = v4;
  unint64_t v41 = objc_msgSend(v6, sel_count);
  if (!v41) {
    goto LABEL_42;
  }
  int v42 = (uint64_t)v41;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _DictionaryStorage<String, String>);
  int v9 = (void *)static _DictionaryStorage.allocate(capacity:)();
  unint64_t v43 = (char *)v9[6];
  int v44 = v9[7];
  swift_retain();
  unint64_t v45 = (uint64_t)specialized closure #2 in static Dictionary._forceBridgeFromObjectiveC(_:result:)(v43, v44, v6, v42);
  if (v45 < 0 || v42 < v45) {
    goto LABEL_179;
  }
  size_t v9[2] = v45;
  if (v45)
  {
    v209 = a1;
    a1 = v45 - 1;
    uint64_t v15 = (uint64_t)(v9 + 8);
    size_t v17 = (void *)MEMORY[0x189617FA8];
    while (1)
    {
      while (1)
      {
        unint64_t v47 = (uint64_t *)(v9[6] + 16 * a1);
        unint64_t v48 = *v47;
        unint64_t v22 = v47[1];
        swift_bridgeObjectRetain();
        unint64_t v49 = specialized __RawDictionaryStorage.find<A>(_:)(v48, v22);
        v51 = v50;
        swift_bridgeObjectRelease();
        if ((v51 & 1) == 0) {
          break;
        }
        LOBYTE(v16) = 16 * a1;
        swift_arrayDestroy();
        unint64_t v24 = swift_arrayDestroy();
        id v52 = v9[2];
        unint64_t v26 = __OFSUB__(v52, 1LL);
        uint64_t v53 = v52 - 1;
        if (v26) {
          goto LABEL_138;
        }
        size_t v9[2] = v53;
LABEL_31:
        if (--a1 < 0) {
          goto LABEL_39;
        }
      }

      *(void *)(v15 + ((v49 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v49;
      if (a1 < (uint64_t)v49)
      {
        unint64_t v46 = 16 * v49;
        *(_OWORD *)(v9[6] + v46) = *(_OWORD *)(v9[6] + 16 * a1);
        *(_OWORD *)(v9[7] + v46) = *(_OWORD *)(v9[7] + 16 * a1);
        goto LABEL_31;
      }

      if (v49 == a1) {
        goto LABEL_31;
      }
      v54 = v9[6];
      v55 = (uint64_t *)(v54 + 16 * v49);
      v56 = (uint64_t *)(v54 + 16 * a1);
      v57 = *v55;
      unint64_t v58 = v55[1];
      int v59 = v56[1];
      void *v55 = *v56;
      v55[1] = v59;
      CFStringRef v56 = v57;
      v56[1] = v58;
      uint64_t v60 = v9[7];
      v61 = (uint64_t *)(v60 + 16 * v49);
      v62 = (uint64_t *)(v60 + 16 * a1);
      v63 = *v61;
      v64 = v61[1];
      v65 = v62[1];
      *v61 = *v62;
      v61[1] = v65;
      *v62 = v63;
      v62[1] = v64;
      if (a1 < 0)
      {
LABEL_39:
        swift_release();
        a1 = v209;
        goto LABEL_41;
      }
    }
  }

  if (v3 > 12828)
  {
LABEL_46:
    if (v3 <= 65086)
    {
      if (v3 > 42800)
      {
        if (v3 <= 65043)
        {
          if (v3 == 42801 || v3 == 42865) {
            return a1 & 1;
          }
          xpc_object_t v7 = 42889;
          goto LABEL_88;
        }

        float v6 = -65044;
      }

      else
      {
        float v6 = -12829;
      }
    }

    else
    {
      if (v3 <= 65531)
      {
        if ((v3 - 65087) <= 0x1F && ((1 << (v3 - 63)) & 0xC0000001) != 0
          || (v3 - 65294) < 2)
        {
          return a1 & 1;
        }

        xpc_object_t v7 = 65377;
        goto LABEL_88;
      }

      float v6 = -65532;
    }

    goto LABEL_89;
  }

  if (v3 > 11002)
  {
    switch(v3)
    {
      case 12272:
      case 12273:
      case 12274:
      case 12275:
      case 12276:
      case 12277:
      case 12278:
      case 12279:
      case 12280:
      case 12281:
      case 12282:
      case 12283:
      case 12290:
      case 12296:
      case 12308:
      case 12309:
      case 12339:
      case 12341:
        return a1 & 1;
      case 12284:
      case 12285:
      case 12286:
      case 12287:
      case 12288:
      case 12289:
      case 12291:
      case 12292:
      case 12293:
      case 12294:
      case 12295:
      case 12297:
      case 12298:
      case 12299:
      case 12300:
      case 12301:
      case 12302:
      case 12303:
      case 12304:
      case 12305:
      case 12306:
      case 12307:
      case 12310:
      case 12311:
      case 12312:
      case 12313:
      case 12314:
      case 12315:
      case 12316:
      case 12317:
      case 12318:
      case 12319:
      case 12320:
      case 12321:
      case 12322:
      case 12323:
      case 12324:
      case 12325:
      case 12326:
      case 12327:
      case 12328:
      case 12329:
      case 12330:
      case 12331:
      case 12332:
      case 12333:
      case 12334:
      case 12335:
      case 12336:
      case 12337:
      case 12338:
      case 12340:
        goto LABEL_89;
      default:
        if (v3 == 11003) {
          return a1 & 1;
        }
        xpc_object_t v7 = 11005;
        break;
    }

          __break(1u);
        }

          uint64_t v28 = (v35 - 1) & v35;
          uint64_t v31 = __clz(__rbit64(v35)) + (v25 << 6);
        }

        uint64_t v32 = 8 * v31;
        unint64_t v33 = *(void *)(*(void *)(a1 + 56) + v32);
        *(void *)(*(void *)(v21 + 48) + v32) = *(void *)(*(void *)(a1 + 48) + v32);
        *(void *)(*(void *)(v21 + 56) + v32) = v33;
      }
    }

          uint64_t v28 = (v34 - 1) & v34;
          uint64_t v31 = __clz(__rbit64(v34)) + (v25 << 6);
        }

        uint64_t v32 = *(void *)(*(void *)(a1 + 56) + 8 * v31);
        *(_BYTE *)(*(void *)(v21 + 48) + v31) = *(_BYTE *)(*(void *)(a1 + 48) + v31);
        *(void *)(*(void *)(v21 + 56) + 8 * v31) = v32;
      }
    }

  uint64_t v28 = v103;
  if (v103)
  {
    if (v103 != *(unint64_t **)(v3 + 16))
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, AttributedString._AttributeValue>);
      unint64_t v50 = static _DictionaryStorage.allocate(capacity:)();
      v51 = 0LL;
      id v52 = *(void *)v105;
      uint64_t v53 = v50 + 64;
      while (1)
      {
        if (v52)
        {
          v57 = v28;
          unint64_t v58 = __clz(__rbit64(v52));
          v52 &= v52 - 1;
          int v59 = v58 | (v51 << 6);
        }

        else
        {
          uint64_t v60 = v51 + 1;
          if (__OFADD__(v51, 1LL)) {
            goto LABEL_158;
          }
          if (v60 >= v104)
          {
LABEL_119:
            uint64_t v3 = v50;
            goto LABEL_153;
          }

          v61 = *(void *)&v105[8 * v60];
          ++v51;
          if (!v61)
          {
            v51 = v60 + 1;
            if (v60 + 1 >= v104) {
              goto LABEL_119;
            }
            v61 = *(void *)&v105[8 * v51];
            if (!v61)
            {
              v51 = v60 + 2;
              if (v60 + 2 >= v104) {
                goto LABEL_119;
              }
              v61 = *(void *)&v105[8 * v51];
              if (!v61)
              {
                v51 = v60 + 3;
                if (v60 + 3 >= v104) {
                  goto LABEL_119;
                }
                v61 = *(void *)&v105[8 * v51];
                if (!v61)
                {
                  v62 = v60 + 4;
                  if (v62 >= v104) {
                    goto LABEL_119;
                  }
                  v61 = *(void *)&v105[8 * v62];
                  if (!v61)
                  {
                    while (1)
                    {
                      v51 = v62 + 1;
                      if (__OFADD__(v62, 1LL)) {
                        break;
                      }
                      if (v51 >= v104) {
                        goto LABEL_119;
                      }
                      v61 = *(void *)&v105[8 * v51];
                      ++v62;
                      if (v61) {
                        goto LABEL_109;
                      }
                    }

      if (!*(void *)(a1 + 16))
      {
        uint64_t v60 = 0LL;
        unint64_t v58 = 0u;
        int v59 = 0u;
        v56 = 0u;
        v57 = 0u;
        goto LABEL_49;
      }

      swift_bridgeObjectRetain();
      unint64_t v26 = specialized __RawDictionaryStorage.find<A>(_:)(v20, v19);
      if ((v27 & 1) != 0)
      {
        outlined init with copy of AttributedString._AttributeValue(*(void *)(a1 + 56) + 72 * v26, (uint64_t)&v56);
      }

      else
      {
        uint64_t v60 = 0LL;
        unint64_t v58 = 0u;
        int v59 = 0u;
        v56 = 0u;
        v57 = 0u;
      }

      swift_bridgeObjectRelease();
      if (*((void *)&v57 + 1))
      {
        outlined destroy of Any?( (uint64_t)&v56,  &demangling cache variable for type metadata for AttributedString._AttributeValue?);
LABEL_6:
        uint64_t result = swift_bridgeObjectRelease();
      }

      else
      {
LABEL_49:
        outlined destroy of Any?( (uint64_t)&v56,  &demangling cache variable for type metadata for AttributedString._AttributeValue?);
        uint64_t v60 = 0LL;
        unint64_t v58 = 0u;
        int v59 = 0u;
        v56 = 0u;
        v57 = 0u;
        specialized AttributedString._AttributeStorage.subscript.setter((uint64_t)&v56, v20, v19);
        uint64_t result = swift_bridgeObjectRelease();
        unint64_t v48 = 1;
      }
    }

    else
    {
      if (!v5)
      {
        swift_bridgeObjectRelease_n();
        outlined consume of AttributedString.AttributeRunBoundaries?(v12, 0LL);
        goto LABEL_42;
      }

      __break(1u);
      goto LABEL_43;
    }

    v68 = (v55 - 1) & v55;
    v63 = v56;
    unint64_t v47 = __clz(__rbit64(v55)) + (v56 << 6);
LABEL_19:
    *(void *)&v64 = v47;
    unint64_t v48 = v62;
    unint64_t v49 = *(void *)(v44 + 72) * v47;
    (*(void (**)(char *, unint64_t, uint64_t))(v44 + 16))(v45, v62[6] + v49, v43);
    unint64_t v50 = v48[7];
    v51 = 16 * v64;
    id v52 = *(void *)(v30 + 48) + v49;
    uint64_t v53 = *(void (**)(unint64_t, char *, uint64_t))(v44 + 32);
    v64 = *(_OWORD *)(v50 + 16 * v64);
    v53(v52, v45, v43);
    *(_OWORD *)(*(void *)(v30 + 56) + v51) = v64;
    swift_retain();
  }

  v57 = v63 + 8;
  if (v63 + 8 >= v59) {
    goto LABEL_43;
  }
  v55 = *(void *)&v60[8 * v57];
  if (v55)
  {
    v56 = v63 + 8;
    goto LABEL_42;
  }

  while (1)
  {
    v56 = v57 + 1;
    if (__OFADD__(v57, 1LL)) {
      break;
    }
    uint64_t v31 = v70;
    unint64_t v22 = v61;
    if (v56 >= v59) {
      goto LABEL_43;
    }
    v55 = *(void *)&v60[8 * v56];
    ++v57;
    if (v55) {
      goto LABEL_42;
    }
  }

            if (!a5) {
              goto LABEL_50;
            }
LABEL_43:
            if (v11-- < 1)
            {
              unint64_t v11 = 0LL;
            }

            else if ((v17 - 58) <= 0xF5u {
                   && (v17 - 71) <= 0xF9u
            }
                   && (v17 <= 0x60u || v17 >= 0x67u))
            {
              goto LABEL_50;
            }

            if (v10 != v16 >> 14) {
              continue;
            }
LABEL_67:
            swift_bridgeObjectRelease();
            break;
        }

        return v11 == 0;
      }

      break;
    }

    if (v31 <= v16 >> 16) {
      goto LABEL_70;
    }
    int v18 = String.UTF8View._foreignIndex(after:)();
    if ((v17 & 0x80) != 0)
    {
LABEL_50:
      swift_bridgeObjectRelease();
      return 0LL;
    }

    uint64_t v16 = v18;
    goto LABEL_21;
  }

  unint64_t v11 = 0LL;
  return v11 == 0;
}

      id v52 = (4 * *(_BYTE *)(v51 + 18) + 8) & 0x3C;
      unint64_t v49 = ((-15LL << v52) - 1) & v49 | (v53 << v52);
      int v10 = *(void *)(v51 + 24 + 24 * v53);
      swift_unknownObjectRetain();
      uint64_t result = swift_unknownObjectRelease();
      v51 = v10;
      if (!*(_BYTE *)(v10 + 18)) {
        goto LABEL_75;
      }
    }
  }

  swift_unknownObjectRetain_n();
  uint64_t result = swift_retain();
  unint64_t v50 = v161;
  int v10 = v39;
LABEL_75:
  v62 = *(unsigned __int16 *)(v10 + 16);
  if (!*(_WORD *)(v10 + 16)) {
    goto LABEL_89;
  }
  v63 = v50 - 1;
  if (__OFSUB__(v50, 1LL)) {
    goto LABEL_158;
  }
  if (!__OFADD__(v63, 1LL))
  {
    if (v50 <= 0)
    {
      v62 = 0LL;
    }

    else
    {
      if ((_DWORD)v62 == 1) {
        goto LABEL_88;
      }
      v55 = __OFSUB__(v63, 1LL);
      v63 = v50 - 2;
      if (v55) {
        goto LABEL_162;
      }
      if (__OFADD__(v63, 1LL)) {
        goto LABEL_163;
      }
      if (v50 - 1 < 1)
      {
        v62 = 1LL;
        goto LABEL_108;
      }

      if ((_DWORD)v62 == 2)
      {
LABEL_88:
        unint64_t v50 = v63;
LABEL_89:
        if (v50) {
          goto LABEL_157;
        }
        goto LABEL_108;
      }

      v55 = __OFSUB__(v63, 1LL);
      v63 = v50 - 3;
      if (v55) {
        goto LABEL_164;
      }
      if (__OFADD__(v63, 1LL)) {
        goto LABEL_165;
      }
      if (v50 - 2 >= 1)
      {
        if ((_DWORD)v62 != 3)
        {
          v64 = 0LL;
          v65 = 3LL;
          if (v62 > 3) {
            v65 = *(unsigned __int16 *)(v10 + 16);
          }
          v66 = v65 - 3;
          if (v63 >= v62 - 4) {
            v67 = v62 - 4;
          }
          else {
            v67 = v50 - 3;
          }
          if (v67 >= v50 + 0x7FFFFFFFFFFFFFFDLL) {
            v67 = v50 + 0x7FFFFFFFFFFFFFFDLL;
          }
          while (v66 > v67)
          {
            if (v50 + 0x7FFFFFFFFFFFFFFDLL == v64) {
              goto LABEL_161;
            }
            if (v63 == v64)
            {
              v62 = v50;
              goto LABEL_108;
            }

            if (v62 - 3 == ++v64)
            {
              if (v63 == v64) {
                goto LABEL_108;
              }
              goto LABEL_157;
            }
          }

          goto LABEL_160;
        }

        goto LABEL_88;
      }

      v62 = 2LL;
    }

  unint64_t v25 = v9 || !v15;
  if (v8)
  {
LABEL_61:
    unint64_t v19 = 1;
    unint64_t v24 = v11;
    goto LABEL_62;
  }

  unint64_t v24 = v11;
LABEL_44:
  if (v14 >= a4)
  {
    unint64_t v19 = 0;
  }

  else
  {
    unint64_t v26 = ~v14 + a4;
    uint64_t v27 = (unsigned __int8 *)(a3 + v14);
    do
    {
      id v29 = *v27++;
      uint64_t v28 = v29;
      if ((a5 & 1) != 0)
      {
        if ((v28 & 0x80) != 0) {
          uint64_t v31 = -1;
        }
        else {
          uint64_t v31 = _decodeCharacter_DataDecodeTable[v28];
        }
        uint64_t v30 = v31 < 0;
      }

      else
      {
        uint64_t v30 = 0;
      }

      uint64_t v32 = (_DWORD)v28 == 61 || v30;
      unint64_t v33 = v26-- != 0;
    }

    while (v33 && (v32 & 1) != 0);
    unint64_t v19 = v32 ^ 1;
  }

  uint64_t v30 = NSKeyValueMethodForPattern((objc_class *)a1, "enumeratorOf%s", v10);
  uint64_t v31 = NSKeyValueMethodForPattern((objc_class *)a1, "memberOf%s:", v10);
  if (v21)
  {
    if (v30)
    {
      uint64_t v32 = v31;
      if (v31)
      {
        uint64_t v28 = objc_alloc_init(&OBJC_CLASS___NSKeyValueNonmutatingSetMethodSet);
        v28->count = v21;
        v28->objectAtIndex = v30;
        v28->getObjectsRange = v32;
        id v29 = objc_alloc(&OBJC_CLASS___NSKeyValueCollectionGetter);
        goto LABEL_46;
      }
    }
  }

  if ([a1 accessInstanceVariablesDirectly])
  {
    unint64_t v33 = NSKeyValueIvarForPattern((objc_class *)a1, "_%s", v15);
    if (v33
      || (unint64_t v33 = NSKeyValueIvarForPattern((objc_class *)a1, "_is%s", v10)) != 0LL
      || (unint64_t v33 = NSKeyValueIvarForPattern((objc_class *)a1, "%s", v15)) != 0LL
      || (unint64_t v33 = NSKeyValueIvarForPattern((objc_class *)a1, "is%s", v10)) != 0LL)
    {
      int v18 = -[NSKeyValueIvarGetter initWithContainerClassID:key:containerIsa:ivar:]( objc_alloc(&OBJC_CLASS___NSKeyValueIvarGetter),  "initWithContainerClassID:key:containerIsa:ivar:",  a3,  a4,  a1,  v33);
      goto LABEL_29;
    }
  }

LABEL_49:
      unint64_t v13 = 0LL;
      goto LABEL_17;
    }

    if (a2 != (void *)MEMORY[0x1895F91A0])
    {
      if (a2 != (void *)MEMORY[0x1895F91C0])
      {
        if (a2 != (void *)MEMORY[0x1895F91C8])
        {
          int v10 = (void *)MEMORY[0x186E21CF4](a2);
          unint64_t v11 = (os_log_s *)_NSXPCLog();
          if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 136315138;
            v36 = v10;
            _os_log_error_impl( &dword_182EB1000,  v11,  OS_LOG_TYPE_ERROR,  "Unexpected XPC error type on reply: %s",  buf,  0xCu);
          }

          free(v10);
        }

        goto LABEL_42;
      }

      unint64_t v25 = *(void *)(a1 + 40);
      if (v25) {
        unint64_t v26 = *(const char **)(v25 + 56);
      }
      else {
        unint64_t v26 = 0LL;
      }
      uint64_t v27 = *(void **)(a1 + 40);
      if (!v27 || !objc_getProperty(v27, v26, 16LL, 1)) {
        goto LABEL_42;
      }
      unint64_t v37 = @"NSDebugDescription";
      unint64_t v38 = @"The code signature requirement failed.";
      uint64_t v15 = [MEMORY[0x189603F68] dictionaryWithObjects:&v38 forKeys:&v37 count:1];
      uint64_t v16 = 4102LL;
LABEL_39:
      +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  @"NSCocoaErrorDomain",  v16,  v15);
      Property = *(id *)(a1 + 40);
      if (Property) {
        Property = objc_getProperty(Property, v31, 16LL, 1);
      }
      __NSINDEXSET_IS_CALLING_OUT_TO_A_RANGE_BLOCK__((uint64_t)Property);
      goto LABEL_42;
    }

    size_t v17 = *(void *)(a1 + 40);
    if (v17) {
      int v18 = *(const char **)(v17 + 56);
    }
    else {
      int v18 = 0LL;
    }
    unint64_t v19 = *(void **)(a1 + 40);
    if (!v19 || !objc_getProperty(v19, v18, 16LL, 1)) {
      goto LABEL_42;
    }
    char v20 = atomic_load((unsigned int *)(*(void *)(a1 + 32) + 36LL));
    if ((v20 & 8) != 0)
    {
      unint64_t v43 = @"NSDebugDescription";
      int v44 = +[NSString stringWithFormat:]( NSString,  "stringWithFormat:",  @"The %@ was invalidated from this process.",  [*(id *)(a1 + 32) _errorDescription]);
      uint64_t v28 = (void *)MEMORY[0x189603F68];
      id v29 = &v44;
      uint64_t v30 = &v43;
    }

    else
    {
      unint64_t v21 = atomic_load((unsigned int *)(*(void *)(a1 + 32) + 36LL));
      if ((v21 & 0x40) == 0)
      {
        [*(id *)(a1 + 32) _xpcConnection];
        unint64_t v22 = xpc_connection_copy_invalidation_reason();
        if (v22)
        {
          unsigned __int8 v23 = (void *)v22;
          unint64_t v41 = @"NSDebugDescription";
          int v42 = +[NSString stringWithFormat:]( NSString,  "stringWithFormat:",  @"The %@ was invalidated: %s.",  [*(id *)(a1 + 32) _errorDescription],  v22);
          unint64_t v24 = [MEMORY[0x189603F68] dictionaryWithObjects:&v42 forKeys:&v41 count:1];
          free(v23);
LABEL_38:
          uint64_t v16 = 4099LL;
          uint64_t v15 = v24;
          goto LABEL_39;
        }
      }

      unint64_t v39 = @"NSDebugDescription";
      uint64_t v40 = +[NSString stringWithFormat:]( NSString,  "stringWithFormat:",  @"The %@ was invalidated.",  [*(id *)(a1 + 32) _errorDescription]);
      uint64_t v28 = (void *)MEMORY[0x189603F68];
      id v29 = &v40;
      uint64_t v30 = &v39;
    }

    unint64_t v24 = [v28 dictionaryWithObjects:v29 forKeys:v30 count:1];
    goto LABEL_38;
  }

  if (Class != (Class)MEMORY[0x1895F9250])
  {
    uint64_t v8 = &OBJC_CLASS___NSString;
    __int16 v34 = (void *)[MEMORY[0x189603F70] exceptionWithName:*MEMORY[0x189603A60], +[NSString stringWithFormat:]( NSString, "stringWithFormat:", @"%@: encoded data has been corrupted, root object is not an XPC dictionary", _NSMethodExceptionProem(*(objc_class **)(a1 + 32), *(const char **)(a1 + 72))), 0 reason userInfo];
    objc_exception_throw(v34);
    goto LABEL_49;
  }

  [*(id *)(a1 + 32) _decodeAndInvokeReplyBlockWithEvent:a2 sequence:*(void *)(a1 + 56) replyInfo:*(void *)(a1 + 40)];
LABEL_43:
  if (*(_BYTE *)(a1 + 80))
  {
    unint64_t v33 = *(void *)(*(void *)(a1 + 32) + 56LL);
    if (v33) {
      dispatch_group_leave(*(dispatch_group_t *)(v33 + 48));
    }
  }

  objc_autoreleasePoolPop(v8);
}

    unint64_t v48 = 0LL;
    if (v12 >= 8) {
      uint64_t v30 = 8LL;
    }
    else {
      uint64_t v30 = v12;
    }
    objc_msgSend(a3, "getBytes:range:", &v48, 0, v30, offsetObjMap);
    if (v39) {
      -[NSKeyedUnarchiver setDecodingFailurePolicy:](v6, "setDecodingFailurePolicy:", 0LL);
    }
    uint64_t v31 = _NSMethodExceptionProem((objc_class *)v6, a2);
    -[NSCoder __failWithExceptionName:errorCode:format:]( v6,  "__failWithExceptionName:errorCode:format:",  *MEMORY[0x189603A60],  4864LL,  @"%@: incomprehensible archive (0x%x, 0x%x, 0x%x, 0x%x, 0x%x, 0x%x, 0x%x, 0x%x)",  v31,  (char)v48,  SBYTE1(v48),  SBYTE2(v48),  SBYTE3(v48),  SBYTE4(v48),  SBYTE5(v48),  SBYTE6(v48),  SHIBYTE(v48));
    if (!a4) {
      goto LABEL_62;
    }
    goto LABEL_60;
  }

  v36 = v6->_offsetObjMap;
  if ((__CFBinaryPlistGetOffsetForValueFromDictionary3() & 1) == 0)
  {
    if (v39) {
      -[NSKeyedUnarchiver setDecodingFailurePolicy:](v6, "setDecodingFailurePolicy:", 0LL, v36);
    }
    -[NSCoder __failWithExceptionName:errorCode:format:]( v6,  "__failWithExceptionName:errorCode:format:",  @"NSArchiverArchiveInconsistency",  4864LL,  @"%@: data is corrupt or archive is missing key components or object is too large to decode",  _NSMethodExceptionProem((objc_class *)v6, a2));
    if (!a4) {
      goto LABEL_62;
    }
    goto LABEL_60;
  }

  unint64_t v37 = v6->_offsetObjMap;
  if ((__CFBinaryPlistGetOffsetForValueFromDictionary3() & 1) == 0)
  {
    if (v39) {
      -[NSKeyedUnarchiver setDecodingFailurePolicy:](v6, "setDecodingFailurePolicy:", 0LL, v37);
    }
    -[NSCoder __failWithExceptionName:errorCode:format:]( v6,  "__failWithExceptionName:errorCode:format:",  @"NSArchiverArchiveInconsistency",  4864LL,  @"%@: data is corrupt or archive is missing key components or object is too large to decode",  _NSMethodExceptionProem((objc_class *)v6, a2));
    if (!a4) {
      goto LABEL_62;
    }
    goto LABEL_60;
  }

  if ((*(_BYTE *)(v10 + v43) & 0xF0) != 0xA0)
  {
    if (a4)
    {
      __int16 v34 = -[NSString initWithFormat:]( objc_alloc(&OBJC_CLASS___NSString),  "initWithFormat:",  @"%@: data is corrupt or archive is missing key components or object is too large to decode",  _NSMethodExceptionProem((objc_class *)v6, a2));
      unint64_t v49 = @"NSDebugDescription";
      unint64_t v50 = v34;
      *a4 = +[NSError errorWithDomain:code:userInfo:]( NSError,  "errorWithDomain:code:userInfo:",  @"NSCocoaErrorDomain",  4864,  [MEMORY[0x189603F68] dictionaryWithObjects:&v50 forKeys:&v49 count:1]);
    }

    goto LABEL_62;
  }

  size_t v17 = (const __CFAllocator *)*MEMORY[0x189604DD0];
  int v18 = ($4AD1472FA10EC216323D2D00A4144E55 *)MEMORY[0x186E1D20C](*MEMORY[0x189604DD0], 48LL, 0LL);
  v6->_offsetData = v18;
  unint64_t v19 = v47;
  *(_OWORD *)v18->var0.var0 = v46;
  *(_OWORD *)&v18->var0.var5 = v19;
  offsetData = v6->_offsetData;
  offsetData->var1 = v42;
  offsetData->var2 = v43;
  v6->_data = (__CFData *)CFRetain(a3);
  v6->_bytes = (const char *)v10;
  v6->_len = v12;
  v6->_objRefMap = CFDictionaryCreateMutable(0LL, 0LL, 0LL, 0LL);
  v6->_tmpRefObjMap = CFDictionaryCreateMutable(v17, 0LL, 0LL, 0LL);
  v6->_refObjMap = CFDictionaryCreateMutable(0LL, 0LL, 0LL, MEMORY[0x189605250]);
  _CFDictionarySetCapacity();
  _CFDictionarySetCapacity();
  v6->_offsetObjMap = CFDictionaryCreateMutable(0LL, 0LL, 0LL, MEMORY[0x189605250]);
  return v6;
}

    __break(1u);
  }

  return v5;
}

    if (v19 == 1) {
      unint64_t v19 = -1LL;
    }
    goto LABEL_51;
  }

  __break(1u);
  return result;
}

              (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v11 + 56))(v20, 1LL, 1LL, v10);
              swift_release();
              outlined consume of Set<A1>.Iterator._Variant<A><A1>();
              v54 = _NativeSet.bridged()();
              v55 = v63;
              objc_msgSend(v63, *v64, v62, v65, v54);

              swift_unknownObjectRelease();
              swift_unknownObjectRelease();
              return swift_release();
            }
          }
        }
      }
    }

              v56 = (4 * *(_BYTE *)(v55 + 18) + 8) & 0x3C;
              uint64_t v53 = ((-15LL << v56) - 1) & v53 | (v57 << v56);
              unint64_t v46 = *(void *)(v55 + 24 + 24 * v57);
              swift_unknownObjectRetain();
              uint64_t result = swift_unknownObjectRelease();
              v55 = v46;
              if (!*(_BYTE *)(v46 + 18)) {
                goto LABEL_81;
              }
            }
          }

          swift_unknownObjectRetain_n();
          uint64_t result = swift_retain();
          v54 = v144;
LABEL_81:
          v66 = v46;
          v67 = *(unsigned __int16 *)(v46 + 16);
          if ((_DWORD)v67)
          {
            v68 = v54 - 1;
            if (__OFSUB__(v54, 1LL))
            {
LABEL_180:
              __break(1u);
LABEL_181:
              __break(1u);
LABEL_182:
              __break(1u);
LABEL_183:
              __break(1u);
LABEL_184:
              __break(1u);
              goto LABEL_185;
            }

            if (__OFADD__(v68, 1LL)) {
              goto LABEL_181;
            }
            if (v54 <= 0)
            {
              v67 = 0LL;
            }

            else
            {
              if ((_DWORD)v67 == 1) {
                goto LABEL_147;
              }
              int v59 = __OFSUB__(v68, 1LL);
              v68 = v54 - 2;
              if (v59) {
                goto LABEL_184;
              }
              if (__OFADD__(v68, 1LL))
              {
LABEL_185:
                __break(1u);
LABEL_186:
                __break(1u);
                goto LABEL_187;
              }

              if (v54 - 1 < 1)
              {
                v67 = 1LL;
              }

              else
              {
                if ((_DWORD)v67 == 2) {
                  goto LABEL_147;
                }
                int v59 = __OFSUB__(v68, 1LL);
                v68 = v54 - 3;
                if (v59) {
                  goto LABEL_186;
                }
                if (__OFADD__(v68, 1LL))
                {
LABEL_187:
                  __break(1u);
                  return result;
                }

                if (v54 - 2 < 1)
                {
                  v67 = 2LL;
                }

                else
                {
                  if ((_DWORD)v67 == 3) {
                    goto LABEL_147;
                  }
                  v69 = 0LL;
                  if (v68 >= v67 - 4) {
                    v70 = v67 - 4;
                  }
                  else {
                    v70 = v54 - 3;
                  }
                  if (v70 >= v54 + 0x7FFFFFFFFFFFFFFDLL) {
                    v70 = v54 + 0x7FFFFFFFFFFFFFFDLL;
                  }
                  while (1)
                  {
                    if (v67 - 3 <= v70) {
                      goto LABEL_182;
                    }
                    if (v54 + 0x7FFFFFFFFFFFFFFDLL == v69) {
                      goto LABEL_183;
                    }
                    if (v68 == v69) {
                      break;
                    }
                    if (v67 - 3 == ++v69)
                    {
                      v68 -= v69;
                      goto LABEL_147;
                    }
                  }

                  v67 = v54;
                }
              }
            }
          }

          else
          {
            v68 = v54;
LABEL_147:
            if (v68)
            {
LABEL_179:
              __break(1u);
              goto LABEL_180;
            }
          }

          swift_unknownObjectRelease();
          unint64_t v50 = v66;
          uint64_t result = swift_unknownObjectRelease();
          v51 = v53 & 0xFFFFFFFFFFFFF0FFLL | (v67 << 8);
          unint64_t v46 = v132;
          if (!v132)
          {
LABEL_106:
            unint64_t v49 = v48;
            goto LABEL_107;
          }

  uint64_t v27 = __dst[20] * a1;
  if ((unsigned __int128)(__dst[20] * (__int128)a1) >> 64 != (__dst[20] * a1) >> 63)
  {
LABEL_86:
    __break(1u);
    goto LABEL_87;
  }

  if (v27 == 0x7FFFFFFFFFFFFFFFLL) {
    int v9 = 0LL;
  }
  else {
    int v9 = __dst[20] * a1;
  }
  unint64_t v43 = v27 == 0x7FFFFFFFFFFFFFFFLL;
  if ((__dst[27] & 1) != 0)
  {
LABEL_13:
    char v20 = __dst[28];
    if ((__dst[29] & 1) != 0) {
      goto LABEL_14;
    }
    goto LABEL_59;
  }

  v116 = v26;
  *(void *)&v115 = *(void *)&v118[8];
  v117[0] = xmmword_183729410;
  outlined init with take of Any(&v115, &v117[1]);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v12 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  v12[2] + 1LL,  1,  v12);
  }
  uint64_t v53 = v12[2];
  id v52 = v12[3];
  if (v53 >= v52 >> 1) {
    uint64_t v12 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (void *)(v52 > 1),  v53 + 1,  1,  v12);
  }
  v12[2] = v53 + 1;
  v54 = &v12[6 * v53];
  v55 = v117[0];
  v56 = v117[2];
  v54[3] = v117[1];
  v54[4] = v56;
  v54[2] = v55;
  if ((BYTE8(v118[9]) & 1) != 0)
  {
LABEL_19:
    if ((BYTE8(v118[10]) & 1) != 0) {
      goto LABEL_20;
    }
    goto LABEL_59;
  }

        if (v26 < 0x10)
        {
          unint64_t v45 = 0x303030755CLL;
          id v29 = 0xE500000000000000LL;
          goto LABEL_64;
        }

        if (v26 > 0x1F)
        {
LABEL_53:
          unint64_t v24 = (uint64_t *)((char *)v24 + 1);
          if (v24 >= v23) {
            goto LABEL_71;
          }
          continue;
        }

        unint64_t v45 = 808482140LL;
        id v29 = 0xE400000000000000LL;
LABEL_64:
        unint64_t v46 = v29;
        lazy protocol witness table accessor for type UInt8 and conformance UInt8();
        v30._countAndFlagsBits = String.init<A>(_:radix:uppercase:)();
        String.append(_:)(v30);
        swift_bridgeObjectRelease();
        uint64_t v28 = v45;
        uint64_t v27 = v46;
LABEL_65:
        if (v25 < (char *)v24) {
LABEL_66:
        }
          specialized Array.append<A>(contentsOf:)(v25, (char *)((char *)v24 - v25));
LABEL_67:
        specialized Array.append<A>(contentsOf:)(v28, v27);
        unint64_t v24 = (uint64_t *)((char *)v24 + 1);
        unint64_t v25 = (char *)v24;
        if (v24 < v23) {
          continue;
        }
LABEL_71:
        if (v25 < (char *)v24)
        {
          uint64_t v31 = (char *)((char *)v24 - v25);
          uint64_t v32 = v25;
          goto LABEL_75;
        }

    unint64_t v50 = (v60 - 1) & v60;
    id v52 = __clz(__rbit64(v60)) + (v47 << 6);
LABEL_24:
    uint64_t v53 = 16 * v52;
    v54 = (void *)(*(void *)(v31 + 48) + 16 * v52);
    v55 = v54[1];
    v56 = 8 * v52;
    v57 = *(void *)(*(void *)(v31 + 56) + v56);
    unint64_t v58 = (void *)(*(void *)(v39 + 48) + v53);
    *unint64_t v58 = *v54;
    v58[1] = v55;
    *(void *)(*(void *)(v39 + 56) + v56) = v57;
    swift_bridgeObjectRetain();
    uint64_t result = (void *)swift_retain();
  }

  v61 = v59 + 8;
  if (v61 >= v69) {
    goto LABEL_50;
  }
  uint64_t v60 = v71[v61];
  if (v60)
  {
    unint64_t v47 = v61;
    goto LABEL_49;
  }

  while (1)
  {
    unint64_t v47 = v61 + 1;
    if (__OFADD__(v61, 1LL)) {
      break;
    }
    if (v47 >= v69) {
      goto LABEL_50;
    }
    uint64_t v60 = v71[v47];
    ++v61;
    if (v60) {
      goto LABEL_49;
    }
  }

        __break(1u);
        JUMPOUT(0x183021570LL);
      }
    }

    __break(1u);
LABEL_44:
    __break(1u);
LABEL_45:
    __break(1u);
LABEL_46:
    __break(1u);
LABEL_47:
    __break(1u);
LABEL_48:
    __break(1u);
    goto LABEL_49;
  }

                    uint64_t v31 = v0[3];
                    JSON5Scanner.DocumentReader.skipNumber()();
                    JSON5Scanner.JSONPartialMapData.record(tagType:count:dataOffset:with:)( 1u,  v0[3] - v31,  v31 - v0[1],  (void *)v0[1],  v0[2],  v0[3]);
LABEL_56:
                    uint64_t v32 = JSON5Scanner.DocumentReader.consumeWhitespace()();
                    if (v33) {
                      goto LABEL_69;
                    }
                    LOBYTE(v1) = v32;
                    LODWORD(v34) = v32;
                    if (v32 != 44) {
                      goto LABEL_65;
                    }
                    ++v0[3];
                    unint64_t v35 = JSON5Scanner.DocumentReader.consumeWhitespace()();
                    if (v36) {
                      goto LABEL_69;
                    }
                    unint64_t v26 = v2 + 1;
                    if (v35 == 93) {
                      goto LABEL_70;
                    }
                    continue;
                }
              }

              goto LABEL_80;
            }
          }

          if ((unint64_t)(v5 + 2) < v4)
          {
            unint64_t v11 = v4 - 2 - (void)v5;
            v5 += 3;
            while (1)
            {
              uint64_t v12 = *(v5 - 1);
              if (v12 == 13 || v12 == 10) {
                break;
              }
              ++v5;
              if (!--v11) {
                goto LABEL_37;
              }
            }

          __break(1u);
LABEL_50:
          __break(1u);
          goto LABEL_51;
        }

        goto LABEL_16;
      }

    *int v18 = v0;
    v18[1] = v19;
    return dispatch thunk of AsyncIteratorProtocol.next()();
  }

  uint64_t v3 = (char **)(*(void *)(v0 + 24) + *(int *)(*(void *)(v0 + 16) + 36LL));
  if (*((void *)*v3 + 2))
  {
    swift_bridgeObjectRetain();
    __int128 v4 = static String._fromUTF8Repairing(_:)();
    float v6 = v15;
    swift_bridgeObjectRelease();
    uint64_t v16 = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v8 = *v3;
    if ((v16 & 1) != 0)
    {
LABEL_4:
      specialized Array.replaceSubrange<A>(_:with:)(0LL, *((void *)v8 + 2));
      return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8))(v4, v6);
    }

    v72 = (v59 - 1) & v59;
    unint64_t v49 = v60;
    unint64_t v50 = __clz(__rbit64(v59)) + (v60 << 6);
LABEL_24:
    v51 = 24 * v50;
    id v52 = *((void *)v29 + 6) + 24 * v50;
    uint64_t v53 = *(void *)v52;
    v54 = *(void *)(v52 + 8);
    LOBYTE(v52) = *(_BYTE *)(v52 + 16);
    v55 = 8 * v50;
    v56 = *(void *)(*((void *)v29 + 7) + v55);
    v57 = *((void *)v35 + 6) + v51;
    *(void *)v57 = v53;
    *(void *)(v57 + _Block_object_dispose((const void *)(v11 - 240), 8) = v54;
    *(_BYTE *)(v57 + 16) = v52;
    *(void *)(*((void *)v35 + 7) + v55) = v56;
    swift_retain();
    swift_bridgeObjectRetain();
    unint64_t v45 = v49;
    unint64_t v48 = v72;
  }

  v61 = v58 + 8;
  if (v61 >= v70) {
    goto LABEL_50;
  }
  v62 = v29;
  v63 = v24;
  v64 = v7;
  int v59 = *(void *)&__src[8 * v61];
  if (v59)
  {
    uint64_t v60 = v61;
    goto LABEL_49;
  }

  while (1)
  {
    uint64_t v60 = v61 + 1;
    if (__OFADD__(v61, 1LL)) {
      break;
    }
    xpc_object_t v7 = v64;
    unint64_t v24 = v63;
    id v29 = v62;
    if (v60 >= v70) {
      goto LABEL_50;
    }
    int v59 = *(void *)&__src[8 * v60];
    ++v61;
    if (v59) {
      goto LABEL_49;
    }
  }

          unint64_t v35 = (v40 - 1) & v40;
          unint64_t v37 = __clz(__rbit64(v40)) + (v32 << 6);
        }

        unint64_t v38 = *(_OWORD *)(*(void *)(v19 + 56) + 16 * v37);
        *(_BYTE *)(*(void *)(v25 + 48) + v37) = *(_BYTE *)(*(void *)(v19 + 48) + v37);
        *(_OWORD *)(*(void *)(v25 + 56) + 16 * v37) = v38;
        swift_unknownObjectRetain();
      }
    }

  unint64_t v43 = *((void *)v4 + 3);
  if (v43 >= 2)
  {
    int v44 = v43 >> 1;
    id v29 = __OFSUB__(v44, v14);
    unint64_t v45 = v44 - v14;
    if (v29)
    {
LABEL_60:
      __break(1u);
      return;
    }

    *((void *)v4 + 2) = v45;
  }

            __break(1u);
LABEL_50:
            __break(1u);
            return;
          }
        }

        else
        {
          Calendar.DatesByRecurring.Iterator.nextGroup()();
          int v9 = v67;
          if (v67[2])
          {
            *((void *)&v66 + 1) = 0LL;
          }

          else
          {
            unint64_t v13 = *((void *)&v66 + 1) + 1LL;
            if (__OFADD__(*((void *)&v66 + 1), 1LL)) {
              goto LABEL_47;
            }
            ++*((void *)&v66 + 1);
          }
        }
      }

      while ((v65 & 1) == 0);
    }

    uint64_t v28 = v7;
    id v29 = v6;
  }

  memcpy(v40, v63, sizeof(v40));
  *(void *)uint64_t v30 = v46[1];
  *(_OWORD *)&v30[8] = v47;
  *(_WORD *)&v30[24] = v48;
  v30[26] = v49;
  uint64_t v31 = v50;
  v32[0] = v51;
  *(_OWORD *)&v32[8] = v52;
  *(_OWORD *)&v32[24] = v53;
  *(_OWORD *)&v32[40] = v54;
  *(_OWORD *)&v32[56] = v55;
  unint64_t v33 = v56;
  __int16 v34 = v57;
  unint64_t v35 = v58;
  v36 = v59;
  unint64_t v37 = v60;
  unint64_t v38 = v61;
  unint64_t v39 = v62;
  unint64_t v41 = v64;
  int v42 = 1;
  unint64_t v43 = v66;
  int v44 = v67;
  outlined release of Calendar.DatesByRecurring.Iterator((uint64_t)v30);
  unint64_t v25 = v29[3];
  if (v25 >= 2)
  {
    unint64_t v26 = v25 >> 1;
    unint64_t v24 = __OFSUB__(v26, v28);
    uint64_t v27 = v26 - v28;
    if (v24)
    {
LABEL_48:
      __break(1u);
      goto LABEL_49;
    }

    v29[2] = v27;
  }

    v73 = (v64 - 1) & v64;
    v74 = (int *)v65;
    unint64_t v58 = __clz(__rbit64(v64)) + (v65 << 6);
LABEL_24:
    int v59 = v76;
    uint64_t v60 = *(void *)(v75 + 72) * v58;
    outlined init with copy of ICUNumberFormatter.Signature( *(void *)(v40 + 48) + v60,  v76,  type metadata accessor for ICUCurrencyNumberFormatter.Signature);
    v61 = 8 * v58;
    v62 = *(void *)(*(void *)(v40 + 56) + 8 * v58);
    outlined init with take of ICUNumberFormatter.Signature( v59,  *(void *)(v46 + 48) + v60,  type metadata accessor for ICUCurrencyNumberFormatter.Signature);
    *(void *)(*(void *)(v46 + 56) + v61) = v62;
    swift_retain();
    v57 = v73;
    v54 = v74;
  }

  v66 = v63 + 8;
  if (v66 >= v71) {
    goto LABEL_50;
  }
  v64 = *(void *)&v72[8 * v66];
  if (v64)
  {
    v65 = v66;
    goto LABEL_49;
  }

  while (1)
  {
    v65 = v66 + 1;
    if (__OFADD__(v66, 1LL)) {
      break;
    }
    unint64_t v37 = v78;
    if (v65 >= v71) {
      goto LABEL_50;
    }
    v64 = *(void *)&v72[8 * v65];
    ++v66;
    if (v64) {
      goto LABEL_49;
    }
  }

    v62 = (v47 - 1) & v47;
    v63 = v48;
    unint64_t v43 = __clz(__rbit64(v47)) + (v48 << 6);
LABEL_24:
    int v44 = *(void *)(v23 + 48);
    int v59 = *(void *)(v60 + 72) * v43;
    outlined init with copy of ICUNumberFormatter.Signature( v44 + v59,  v42,  type metadata accessor for ICUPercentNumberFormatter.Signature);
    unint64_t v45 = 8 * v43;
    unint64_t v58 = *(void *)(*(void *)(v23 + 56) + v45);
    outlined init with take of ICUNumberFormatter.Signature( v42,  *(void *)(v29 + 48) + v59,  type metadata accessor for ICUPercentNumberFormatter.Signature);
    *(void *)(*(void *)(v29 + 56) + v45) = v58;
    swift_retain();
    unint64_t v41 = v62;
    unint64_t v38 = v63;
  }

  unint64_t v49 = v46 + 8;
  if (v49 >= v55) {
    goto LABEL_50;
  }
  unint64_t v47 = *(void *)&v56[8 * v49];
  if (v47)
  {
    unint64_t v48 = v49;
    goto LABEL_49;
  }

  while (1)
  {
    unint64_t v48 = v49 + 1;
    if (__OFADD__(v49, 1LL)) {
      break;
    }
    if (v48 >= v55) {
      goto LABEL_50;
    }
    unint64_t v47 = *(void *)&v56[8 * v48];
    ++v49;
    if (v47) {
      goto LABEL_49;
    }
  }

    v67 = (v55 - 1) & v55;
    v68 = v56;
    v51 = __clz(__rbit64(v55)) + (v56 << 6);
LABEL_24:
    id v52 = *(void *)(v31 + 48);
    v66 = *(void *)(v69 + 72) * v51;
    outlined init with copy of ICUNumberFormatter.Signature( v52 + v66,  v50,  type metadata accessor for ICUPercentNumberFormatter.Signature);
    uint64_t v53 = 8 * v51;
    v65 = *(void *)(*(void *)(v31 + 56) + v53);
    outlined init with take of ICUNumberFormatter.Signature( v50,  *(void *)(v37 + 48) + v66,  type metadata accessor for ICUPercentNumberFormatter.Signature);
    *(void *)(*(void *)(v37 + 56) + v53) = v65;
    swift_retain();
    unint64_t v49 = v67;
    unint64_t v46 = v68;
  }

  v57 = v54 + 8;
  if (v57 >= v63) {
    goto LABEL_50;
  }
  v55 = *(void *)&v64[8 * v57];
  if (v55)
  {
    v56 = v57;
    goto LABEL_49;
  }

  while (1)
  {
    v56 = v57 + 1;
    if (__OFADD__(v57, 1LL)) {
      break;
    }
    if (v56 >= v63) {
      goto LABEL_50;
    }
    v55 = *(void *)&v64[8 * v56];
    ++v57;
    if (v55) {
      goto LABEL_49;
    }
  }

    v70 = (v55 - 1) & v55;
    v71 = (int *)v56;
    unint64_t v49 = __clz(__rbit64(v55)) + (v56 << 6);
LABEL_24:
    unint64_t v50 = v68;
    v51 = *(void *)(v67 + 72) * v49;
    outlined init with copy of ICUNumberFormatter.Signature( *(void *)(v30 + 48) + v51,  v68,  type metadata accessor for ICUCurrencyNumberFormatter.Signature);
    id v52 = 8 * v49;
    uint64_t v53 = *(void *)(*(void *)(v30 + 56) + 8 * v49);
    outlined init with take of ICUNumberFormatter.Signature( v50,  *(void *)(v36 + 48) + v51,  type metadata accessor for ICUCurrencyNumberFormatter.Signature);
    *(void *)(*(void *)(v36 + 56) + v52) = v53;
    swift_retain();
    unint64_t v48 = v70;
    unint64_t v45 = v71;
  }

  v57 = v54 + 8;
  if (v57 >= v63) {
    goto LABEL_50;
  }
  v55 = *(void *)&v64[8 * v57];
  if (v55)
  {
    v56 = v57;
    goto LABEL_49;
  }

  while (1)
  {
    v56 = v57 + 1;
    if (__OFADD__(v57, 1LL)) {
      break;
    }
    uint64_t v28 = v65;
    int v14 = v66;
    if (v56 >= v63) {
      goto LABEL_50;
    }
    v55 = *(void *)&v64[8 * v56];
    ++v57;
    if (v55) {
      goto LABEL_49;
    }
  }

              swift_setDeallocating();
              swift_deallocClassInstance();
              v56 = v13;
              v57 = v12;
              unint64_t v47 = swift_bridgeObjectRetain();
              Calendar.ComponentSet.init(_:)(v47, &v54);
              unint64_t v48 = 1.59271755e13;
              if (v9 <= 1.59271755e13) {
                unint64_t v48 = v9;
              }
              __dst[0] = fmax(v48, -2.11845067e11);
              Calendar._dateComponents(_:from:)(&v54, __dst, __src);
              swift_release();
              outlined release of DateComponents((uint64_t)__src);
              __asm { BR              X9 }
            }
          }
        }
      }

      __break(1u);
      goto LABEL_50;
    }

    unint64_t v11 = *(void *)(v2 + 8 * v12);
    if (!v11) {
      break;
    }
    xpc_object_t v7 = v12;
LABEL_21:
    uint64_t v5 = (v11 - 1) & v11;
    int v9 = __clz(__rbit64(v11)) + (v7 << 6);
LABEL_22:
    unint64_t v13 = 16 * v9;
    int v14 = (uint64_t *)(*(void *)(v1 + 48) + v13);
    uint64_t v16 = *v14;
    uint64_t v15 = (void *)v14[1];
    size_t v17 = *(void *)(v1 + 56) + v13;
    int v18 = *(void *)v17;
    if ((*(_BYTE *)(v17 + 8) & 1) != 0)
    {
      swift_bridgeObjectRetain();
      PredicateCodableConfiguration._allowPartialType(_:identifier:)(v18, v16, v15);
    }

    else
    {
      swift_bridgeObjectRetain();
      PredicateCodableConfiguration._allowType(_:identifier:preferNewIdentifier:)(v18, v16, v15, 1);
    }

    swift_bridgeObjectRelease();
  }

  while (1)
  {
    xpc_object_t v7 = v12 + 1;
    if (__OFADD__(v12, 1LL)) {
      break;
    }
    if (v7 >= v6) {
      goto LABEL_24;
    }
    unint64_t v11 = *(void *)(v2 + 8 * v7);
    ++v12;
    if (v11) {
      goto LABEL_21;
    }
  }

  __break(1u);
LABEL_50:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

      __break(1u);
      JUMPOUT(0x183307048LL);
    }

  __break(1u);
LABEL_50:
  __break(1u);
LABEL_51:
  __break(1u);
LABEL_52:
  __break(1u);
  return result;
}

    v71 = (v63 - 1) & v63;
    v69 = v64;
    unint64_t v50 = __clz(__rbit64(v63)) + (v64 << 6);
LABEL_24:
    v51 = 24 * v50;
    id v52 = *(void *)(v31 + 48) + v51;
    uint64_t v53 = *(void *)v52;
    v54 = *(void *)(v52 + 8);
    v55 = *(void *)(v31 + 56) + v51;
    v57 = *(void *)(v55 + 8);
    v70 = *(void *)v55;
    v56 = v70;
    unint64_t v58 = *(void *)(v37 + 48) + v51;
    int v59 = *(_BYTE *)(v52 + 16);
    uint64_t v60 = *(_BYTE *)(v55 + 16);
    *(void *)unint64_t v58 = v53;
    *(void *)(v58 + _Block_object_dispose((const void *)(v11 - 240), 8) = v54;
    *(_BYTE *)(v58 + 16) = v59;
    v61 = *(void *)(v37 + 56) + v51;
    *(void *)v61 = v56;
    *(void *)(v61 + _Block_object_dispose((const void *)(v11 - 240), 8) = v57;
    *(_BYTE *)(v61 + 16) = v60;
    outlined copy of _XMLPlistEncodingFormat.Reference(v53, v54, v59);
    outlined copy of _XMLPlistEncodingFormat.Reference(v70, v57, v60);
  }

  v65 = v69 + 9;
  if (v69 + 9 >= v67) {
    goto LABEL_50;
  }
  v63 = *(void *)&v68[8 * v65];
  if (v63)
  {
    v64 = v69 + 9;
    goto LABEL_49;
  }

  while (1)
  {
    v64 = v65 + 1;
    if (__OFADD__(v65, 1LL)) {
      break;
    }
    if (v64 >= v67) {
      goto LABEL_50;
    }
    v63 = *(void *)&v68[8 * v64];
    ++v65;
    if (v63) {
      goto LABEL_49;
    }
  }

    v108 = (v67 - 1) & v67;
    v109 = v68;
    v54 = __clz(__rbit64(v67)) + (v68 << 6);
LABEL_24:
    v55 = 24 * v54;
    v56 = *(void *)(v36 + 48) + v55;
    v57 = *(void *)v56;
    unint64_t v58 = *(void *)(v56 + 8);
    int v59 = *(void *)(v36 + 56) + v55;
    uint64_t v60 = *(void *)(v59 + 8);
    v106 = *(void *)v59;
    v61 = v106;
    v107 = v60;
    v62 = *(void *)(v43 + 48) + v55;
    v63 = *(_BYTE *)(v56 + 16);
    v64 = *(_BYTE *)(v59 + 16);
    *(void *)v62 = v57;
    *(void *)(v62 + _Block_object_dispose((const void *)(v11 - 240), 8) = v58;
    *(_BYTE *)(v62 + 16) = v63;
    v65 = *(void *)(v43 + 56) + v55;
    *(void *)v65 = v61;
    *(void *)(v65 + _Block_object_dispose((const void *)(v11 - 240), 8) = v60;
    *(_BYTE *)(v65 + 16) = v64;
    outlined copy of _XMLPlistEncodingFormat.Reference(v57, v58, v63);
    outlined copy of _XMLPlistEncodingFormat.Reference(v106, v107, v64);
    uint64_t v53 = v108;
    unint64_t v50 = v109;
  }

  v69 = v50 + 9;
  if (v50 + 9 >= v105) {
    goto LABEL_50;
  }
  v70 = v12;
  v71 = v16;
  v72 = v33;
  v73 = v19;
  v67 = *(void *)(v104 + 8 * v69);
  if (v67)
  {
    v68 = v69;
    goto LABEL_49;
  }

  while (1)
  {
    v68 = v69 + 1;
    if (__OFADD__(v69, 1LL)) {
      break;
    }
    unint64_t v19 = v73;
    unint64_t v33 = v72;
    uint64_t v16 = v71;
    if (v68 >= v105) {
      goto LABEL_50;
    }
    uint64_t v12 = v70;
    v67 = *(void *)(v104 + 8 * v68);
    ++v69;
    if (v67) {
      goto LABEL_49;
    }
  }

    v95 = v66;
    v96 = (v65 - 1) & v65;
    id v52 = __clz(__rbit64(v65)) + (v66 << 6);
LABEL_24:
    uint64_t v53 = 24 * v52;
    v54 = *(void *)(v33 + 48) + v53;
    v55 = *(void *)v54;
    v56 = *(void *)(v54 + 8);
    v57 = *(void *)(v33 + 56) + v53;
    int v59 = *(void *)(v57 + 8);
    v94 = *(void *)v57;
    unint64_t v58 = v94;
    uint64_t v60 = *(void *)(v41 + 48) + v53;
    v61 = *(_BYTE *)(v54 + 16);
    v62 = *(_BYTE *)(v57 + 16);
    *(void *)uint64_t v60 = v55;
    *(void *)(v60 + _Block_object_dispose((const void *)(v11 - 240), 8) = v56;
    *(_BYTE *)(v60 + 16) = v61;
    v63 = *(void *)(v41 + 56) + v53;
    *(void *)v63 = v58;
    *(void *)(v63 + _Block_object_dispose((const void *)(v11 - 240), 8) = v59;
    *(_BYTE *)(v63 + 16) = v62;
    outlined copy of _XMLPlistEncodingFormat.Reference(v55, v56, v61);
    outlined copy of _XMLPlistEncodingFormat.Reference(v94, v59, v62);
    unint64_t v48 = v95;
    v51 = v96;
  }

  v67 = v48 + 9;
  if (v48 + 9 >= v93) {
    goto LABEL_50;
  }
  v68 = v13;
  v69 = v27;
  v65 = *((void *)v92 + v67);
  if (v65)
  {
    v66 = v67;
    goto LABEL_49;
  }

  while (1)
  {
    v66 = v67 + 1;
    if (__OFADD__(v67, 1LL)) {
      break;
    }
    id v29 = v105;
    uint64_t v40 = v106;
    uint64_t v27 = v69;
    unint64_t v13 = v68;
    if (v66 >= v93) {
      goto LABEL_50;
    }
    v65 = *((void *)v92 + v66);
    ++v67;
    if (v65) {
      goto LABEL_49;
    }
  }

    swift_once();
    goto LABEL_18;
  }

  StringProtocol._ephemeralString.getter();
  if ((v120 & 1) != 0)
  {
    LOBYTE(v44) = v46;
    StringProtocol._ephemeralString.getter();
    unint64_t v38 = (void *)String._bridgeToObjectiveCImpl()();
    swift_bridgeObjectRelease();
    v78 = String._bridgeToObjectiveCImpl()();
    swift_bridgeObjectRelease();
    if (v115) {
      v76 = objc_msgSend(v38, sel_rangeOfString_options_, v78);
    }
    else {
      v76 = objc_msgSend(v38, sel_rangeOfString_, v78);
    }
    goto LABEL_27;
  }

  LOBYTE(v44) = v46;
  StringProtocol._ephemeralString.getter();
  unint64_t v38 = (void *)String._bridgeToObjectiveCImpl()();
  swift_bridgeObjectRelease();
  v73 = String._bridgeToObjectiveCImpl()();
  swift_bridgeObjectRelease();
  uint64_t result = StringProtocol._toUTF16Offsets(_:)();
  if (!__OFSUB__(v75, result))
  {
    v76 = objc_msgSend(v38, sel_rangeOfString_options_range_, v73, v115, result, v75 - result);
LABEL_27:
    v56 = v76;
    unint64_t v43 = v77;
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    goto LABEL_28;
  }

  __break(1u);
  return result;
}

  if (*a5 != 1) {
    goto LABEL_56;
  }
  if ((v10[3] & 1) != 0)
  {
    uint64_t v30 = _stringCompareWithSmolCheck(_:_:expecting:)();
    uint64_t result = swift_bridgeObjectRelease();
    if ((v30 & 1) == 0) {
      goto LABEL_56;
    }
  }

  else
  {
    uint64_t result = swift_bridgeObjectRelease();
  }

  uint64_t v31 = v71;
  if (v71 >= v70)
  {
LABEL_132:
    __break(1u);
    goto LABEL_133;
  }

  *(_BYTE *)(v69 + v71) = 45;
  v71 = v31 + 1;
LABEL_56:
  if (v14)
  {
    if ((v14 & 4) != 0)
    {
      outlined init with take of Int?(v21 + 176, (uint64_t)v76);
      uint64_t result = outlined init with take of Int?((uint64_t)v76, (uint64_t)&v92);
      if ((v93 & 1) != 0)
      {
LABEL_149:
        __break(1u);
        goto LABEL_150;
      }

      unint64_t v33 = v92;
      if (v92 >= 10) {
        unint64_t v33 = 10LL;
      }
      uint64_t result = v33 - 1;
      if (__OFSUB__(v33, 1LL)) {
        goto LABEL_122;
      }
      goto LABEL_67;
    }

    if ((v14 & 2) == 0)
    {
      outlined init with take of Int?(v21 + 96, (uint64_t)v76);
      uint64_t result = outlined init with take of Int?((uint64_t)v76, (uint64_t)&v92);
      if ((v93 & 1) != 0)
      {
LABEL_151:
        __break(1u);
        goto LABEL_152;
      }

      uint64_t result = v92;
      uint64_t v32 = 3LL;
LABEL_68:
      uint64_t result = append #1 (_:zeroPad:buffer:) in closure #1 in Date.ISO8601FormatStyle.format(_:appendingTimeZoneOffset:)( result,  v32,  &v69,  48);
      *a5 = 1;
      unint64_t v25 = v14;
      if (!v14) {
        goto LABEL_69;
      }
      goto LABEL_35;
    }
  }

  outlined init with take of Int?(v21 + 80, (uint64_t)v76);
  uint64_t result = outlined init with take of Int?((uint64_t)v76, (uint64_t)&v92);
  if ((v93 & 1) == 0)
  {
    uint64_t result = v92;
LABEL_67:
    uint64_t v32 = 2LL;
    goto LABEL_68;
  }

    v90 = (uint64_t *)(v89 + 64);
    v71 = v152;
    goto LABEL_50;
  }

  LODWORD(v153) = v40;
  v57 = *(void (**)(char *, uint64_t, uint64_t, __n128))(v36 + 16);
  unint64_t v58 = v157;
  int v59 = v36;
  v57(v31, v158, v157, v39);
  ((void (*)(char *, char *, uint64_t))v57)(v28, v31, v58);
  uint64_t v60 = v156;
  v61 = (uint64_t)v159;
  if ((*(unsigned int (**)(char *, uint64_t, char *))(v156 + 48))(v28, 1LL, v159) == 1)
  {
    v62 = *(void (**)(char *, uint64_t))(v59 + 8);
    v62(v31, v58);
    v62(v28, v58);
    v63 = v160;
    v64 = v160 & 0x3FFFFFFFFFFFFFFFLL;
    swift_retain();
    v65 = v155;
    goto LABEL_29;
  }

  v80 = *(void (**)(char *, char *, uint64_t))(v60 + 32);
  v80(v14, v28, v61);
  v63 = swift_allocObject();
  v81 = v154;
  *(void *)(v63 + 40) = v61;
  *(void *)(v63 + 4_Block_object_dispose((const void *)(v11 - 240), 8) = v81;
  v82 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)(v63 + 16));
  v80((char *)v82, v14, v61);
  (*(void (**)(char *, uint64_t))(v59 + 8))(v31, v58);
  v83 = v160;
  *(void *)(v63 + 56) = v160;
  if (!(v83 >> 62))
  {
    v84 = (uint64_t *)(v83 + 64);
    v65 = v155;
LABEL_27:
    v91 = *v84;
    swift_retain();
    v119 = v91 + 1;
    if (__OFADD__(v91, 1LL))
    {
      __break(1u);
      goto LABEL_49;
    }

    goto LABEL_28;
  }

  v65 = v155;
  if (v83 >> 62 == 1)
  {
    v84 = (uint64_t *)((v83 & 0x3FFFFFFFFFFFFFFFLL) + 32);
    goto LABEL_27;
  }

  v119 = 1LL;
LABEL_28:
  *(void *)(v63 + 64) = v119;
  v64 = v63 & 0x3FFFFFFFFFFFFFFFLL;
LABEL_29:
  v71 = v50[20];
  v50[20] = v63;
  v92 = v50[2];
  swift_retain();
  v93 = swift_isUniquelyReferenced_nonNull_native();
  v50[2] = v92;
  if ((v93 & 1) == 0) {
    goto LABEL_85;
  }
  while (1)
  {
    v95 = *(void *)(v92 + 16);
    v94 = *(void *)(v92 + 24);
    if (v95 >= v94 >> 1) {
      v92 = (unint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (void *)(v94 > 1),  v95 + 1,  1,  (void *)v92);
    }
    *(void *)(v92 + 16) = v95 + 1;
    v96 = v92 + 32 + 24 * v95;
    v97 = *((void *)&v162 + 1);
    *(void *)v96 = v162;
    *(void *)(v96 + _Block_object_dispose((const void *)(v11 - 240), 8) = v97;
    *(_BYTE *)(v96 + 16) = (_BYTE)v153;
    v50[2] = v92;
    v98 = *(void *)(v92 + 16);
    if (!v98)
    {
      __break(1u);
      goto LABEL_87;
    }

    v99 = v92 + 32 + 24 * v98;
    v101 = *(void *)(v99 - 24);
    v100 = *(void *)(v99 - 16);
    v102 = *(unsigned __int8 *)(v99 - 8);
    if (v102 >> 5 != 4) {
      break;
    }
    v113 = v161[20];
    v114 = v161[4];
    v167 = &unk_189C8F8C0;
    v168 = lazy protocol witness table accessor for type JSONDecoderImpl.UnkeyedContainer and conformance JSONDecoderImpl.UnkeyedContainer();
    v115 = swift_allocObject();
    v166[0] = v115;
    *(void *)(v115 + 16) = v161;
    *(void *)(v115 + 24) = v101;
    *(void *)(v115 + 40) = 0LL;
    *(void *)(v115 + 4_Block_object_dispose((const void *)(v11 - 240), 8) = 0LL;
    *(void *)(v115 + 32) = v114;
    *(_BYTE *)(v115 + 56) = -2;
    *(void *)(v115 + 64) = v100;
    *(_BYTE *)(v115 + 72) = 0;
    *(void *)(v115 + 80) = 0LL;
    *(void *)(v115 + 8_Block_object_dispose((const void *)(v11 - 240), 8) = v113;
    __swift_project_boxed_opaque_existential_1(v166, (uint64_t)&unk_189C8F8C0);
    unint64_t v50 = v161;
    swift_retain();
    swift_retain_n();
    swift_retain();
    v116 = dispatch thunk of UnkeyedDecodingContainer.count.getter();
    if ((v117 & 1) != 0) {
      goto LABEL_65;
    }
    v92 = v116;
    *(void *)&v165 = specialized Data._Representation.init(count:)(v116);
    *((void *)&v165 + 1) = v118;
    if ((v92 & 0x8000000000000000LL) != 0) {
      goto LABEL_101;
    }
    if (!v92) {
      goto LABEL_66;
    }
    v106 = 0LL;
    while ((void *)v92 != v106)
    {
      v108 = (unint64_t)v167;
      __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v166, (uint64_t)v167);
      dispatch thunk of UnkeyedDecodingContainer.decode(_:)();
      if (v65) {
        goto LABEL_75;
      }
      Data._Representation.subscript.setter();
      v106 = (void *)((char *)v106 + 1);
      if ((void *)v92 == v106) {
        goto LABEL_66;
      }
    }

    __break(1u);
LABEL_85:
    v92 = (unint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  *(void *)(v92 + 16) + 1LL,  1,  (void *)v92);
    v50[2] = v92;
  }

  if (v102 >> 5 == 5 && !(v100 | v101) && v102 == 160)
  {
    v103 = type metadata accessor for DecodingError();
    swift_allocError();
    v105 = v104;
    v106 = (uint64_t *)((char *)v104
    *v105 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Any]);
    v107 = v50[20];
    v108 = v107 & 0x3FFFFFFFFFFFFFFFLL;
    swift_retain();
    swift_retain();
    _CodingPathNode.path.getter(v107);
    swift_release();
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(uint64_t *, void, uint64_t))(*(void *)(v103 - 8) + 104LL))( v105,  *MEMORY[0x189619368],  v103);
    swift_willThrow();
    swift_release();
    goto LABEL_76;
  }

  *((void *)&v162 + 1) = v64;
  char v20 = (char *)type metadata accessor for DecodingError();
  swift_allocError();
  v108 = (unint64_t)v109;
  *v109 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Any]);
  v110 = v50[20];
  swift_retain();
  swift_retain();
  _CodingPathNode.path.getter(v110);
  swift_release();
  v163 = 0LL;
  v164 = 0xE000000000000000LL;
  _StringGuts.grow(_:)(43LL);
  swift_bridgeObjectRelease();
  v163 = 0xD000000000000028LL;
  v164 = 0x80000001839D2CB0LL;
  v111 = v50[2];
  if (*(void *)(v111 + 16)) {
    __asm { BR              X10 }
  }

    __break(1u);
    goto LABEL_50;
  }

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Decoder);
  uint64_t v15 = (void *)_CodingPathNode.path.getter(*(void *)(v3 + 72));
  __int128 v4 = *(void *)(v3 + 64);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
LABEL_46:
  }
    uint64_t v15 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  v15[2] + 1LL,  1,  v15);
  size_t v17 = v15[2];
  uint64_t v16 = v15[3];
  if (v17 >= v16 >> 1) {
    uint64_t v15 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (void *)(v16 > 1),  v17 + 1,  1,  v15);
  }
  v67 = &type metadata for _CodingKey;
  v68 = lazy protocol witness table accessor for type _CodingKey and conformance _CodingKey();
  int v18 = swift_allocObject();
  *(void *)&v65 = v18;
  *(void *)(v18 + 24) = 0LL;
  *(void *)(v18 + 32) = 0LL;
  *(void *)(v18 + 16) = v4;
  *(_BYTE *)(v18 + 40) = 2;
  v15[2] = v17 + 1;
  outlined init with take of any PredicateExpression<Self.Output == B1>(&v65, (uint64_t)&v15[5 * v17 + 4]);
  unint64_t v19 = type metadata accessor for DecodingError();
  swift_allocError();
  unint64_t v21 = v20;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
  *unint64_t v21 = v10;
  DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
  (*(void (**)(void *, void, uint64_t))(*(void *)(v19 - 8) + 104LL))( v21,  *MEMORY[0x189619368],  v19);
  return swift_willThrow();
}

    uint64_t v40 = objc_msgSend(v37, sel_relativeString);
    goto LABEL_50;
  }

  uint64_t v1 = 0LL;
  if (v8[48] != 1)
  {
    swift_retain();
    swift_retain();
    uint64_t v15 = String.subscript.getter();
    uint64_t v16 = MEMORY[0x186E1B610](v15);
    int v18 = v17;
    swift_bridgeObjectRelease();
    v19.value._countAndFlagsBits = v16;
    v19.value._object = v18;
    URLComponents._URLComponents.setScheme(_:)(v19);
    if (!v1)
    {
      swift_bridgeObjectRelease();
      __int128 v4 = (unint64_t)&v208;
      goto LABEL_19;
    }

    return 0LL;
  }

  return v4;
}

  uint64_t result = *(void *)(a1 + 48) + *(void *)(a1 + 56);
  *(void *)(a1 + 40) = result;
  return result;
}

        if (v33 >= 0x2000) {
          unint64_t v38 = 0x2000LL;
        }
        else {
          unint64_t v38 = v33;
        }
        if (!*(_DWORD *)(v20 + 44))
        {
          *__error() = 0;
          for (i = fread((void *)(*(void *)(*(void *)yy_buffer_stack + 8LL) + v83), 1uLL, v38, (FILE *)_qfqp2in);
                ;
                i = fread((void *)(*(void *)(*(void *)yy_buffer_stack + 8LL) + v83), 1uLL, v38, (FILE *)_qfqp2in))
          {
            yy_n_chars = i;
            if (i)
            {
              uint64_t v30 = 0;
              unint64_t v19 = yy_buffer_stack;
              char v20 = *(void *)yy_buffer_stack;
              *(void *)(*(void *)yy_buffer_stack + 32LL) = i;
              uint64_t v2 = &_qfqp2text;
              uint64_t v3 = &off_18C497000;
              goto LABEL_73;
            }

            if (!ferror((FILE *)_qfqp2in)) {
              break;
            }
            if (*__error() != 4) {
              goto LABEL_228;
            }
            *__error() = 0;
            clearerr((FILE *)_qfqp2in);
          }

          unint64_t v19 = yy_buffer_stack;
          char v20 = *(void *)yy_buffer_stack;
          uint64_t v2 = &_qfqp2text;
          uint64_t v3 = &off_18C497000;
          LODWORD(v27) = v81;
LABEL_39:
          *(void *)(v20 + 32) = 0LL;
          if ((_DWORD)v27) {
            goto LABEL_40;
          }
          goto LABEL_75;
        }

        unint64_t v39 = 0LL;
        uint64_t v40 = v83;
        while (1)
        {
          unint64_t v41 = getc((FILE *)_qfqp2in);
          if (v41 == -1 || v41 == 10) {
            break;
          }
          *(_BYTE *)(*(void *)(*(void *)yy_buffer_stack + 8LL) + v40 + v39++) = v41;
          if (v38 == v39) {
            goto LABEL_61;
          }
        }

        LODWORD(v3_Block_object_dispose((const void *)(v11 - 240), 8) = v39;
LABEL_61:
        uint64_t v2 = &_qfqp2text;
        uint64_t v3 = &off_18C497000;
        if (v41 == -1)
        {
          unint64_t v43 = ferror((FILE *)_qfqp2in);
          uint64_t v3 = &off_18C497000;
          uint64_t v2 = &_qfqp2text;
          if (v43)
          {
LABEL_228:
            v78 = (FILE *)*MEMORY[0x1895F89D0];
            v79 = "input in flex scanner failed";
            goto LABEL_229;
          }
        }

        else if (v41 == 10)
        {
          uint64_t v30 = 0;
          unint64_t v19 = yy_buffer_stack;
          *(_BYTE *)(*(void *)(*(void *)yy_buffer_stack + 8LL) + v40 + v3_Block_object_dispose((const void *)(v11 - 240), 8) = 10;
          i = (int)v38 + 1;
          yy_n_chars = i;
          char v20 = *(void *)v19;
          *(void *)(*(void *)v19 + 32LL) = i;
LABEL_73:
          LODWORD(v27) = v81;
          goto LABEL_76;
        }

        i = (int)v38;
        yy_n_chars = (int)v38;
        unint64_t v19 = yy_buffer_stack;
        char v20 = *(void *)yy_buffer_stack;
        *(void *)(*(void *)yy_buffer_stack + 32LL) = (int)v38;
        if ((_DWORD)v38)
        {
          uint64_t v30 = 0;
          goto LABEL_73;
        }

        LODWORD(v27) = v81;
        if ((_DWORD)v81)
        {
LABEL_40:
          i = 0LL;
          uint64_t v30 = 2;
          *(_DWORD *)(v20 + 64) = 2;
          goto LABEL_76;
        }

  if (p_location)
  {
    *p_location = tokenRange;
    p_location[1] = scores;
  }

  if (sentenceRange)
  {
    sentenceRange->location = (NSUInteger)v23;
    sentenceRange->length = v24;
  }

  return v32;
}

      if (v31) {
        unint64_t v38 = 1;
      }
      else {
        unint64_t v38 = v5 == 0LL;
      }
      unint64_t v39 = !v38;
      if (!locked || !v39)
      {
        if ((v39 & 1) != 0) {
          goto LABEL_3;
        }
        unint64_t v46 = v31 || locked == 0LL;
        uint64_t v5 = v46 ? v31 : locked;
        if (v5) {
          goto LABEL_3;
        }
        goto LABEL_60;
      }

      uint64_t v30 = +[NSString stringWithFormat:]( NSString,  "stringWithFormat:",  [(id)_NSFoundationBundle() localizedStringForKey:@"%@ (%@)" value:&stru_189CA6A28 table:@"Progress"],  locked,  v5);
      goto LABEL_58;
    }

void sub_182EB8FDC(uint64_t a1, int a2)
{
  if (a2)
  {
    objc_end_catch();
    JUMPOUT(0x182EB8FF0LL);
  }

  JUMPOUT(0x182EB8F0CLL);
}

void sub_182EB9134()
{
}

uint64_t _setAllowedClass(uint64_t result, uint64_t a2)
{
  if (a2)
  {
    uint64_t v2 = *(void *)(result + 4440);
    if (v2 >= 271)
    {
      objc_exception_throw((id)[MEMORY[0x189603F70] exceptionWithName:@"NSInvalidUnarchiveOperationException" reason:@"decodeObjectOfClass:forKey: too many nested collections" userInfo:0]);
      return _setAllowedClasses();
    }

    else
    {
      uint64_t v3 = v2 + 1;
      *(void *)(result + 4440) = v3;
      *(void *)(result + 2264 + 8 * v3) = a2;
    }
  }

  return result;
}

void *_setAllowedClasses(void *result, void *a2)
{
  if (a2)
  {
    uint64_t v2 = result;
    uint64_t v3 = result[555];
    if (v3 >= 271)
    {
      objc_exception_throw((id)[MEMORY[0x189603F70] exceptionWithName:@"NSInvalidUnarchiveOperationException" reason:@"decodeObjectOfClass:forKey: too many nested collections" userInfo:0]);
      return (void *)_NSXPCSerializationCreateObjectInDictionaryForASCIIKey(v4, v5, v6);
    }

    else
    {
      result[555] = v3 + 1;
      uint64_t result = a2;
      v2[v2[555] + 283] = result;
    }
  }

  return result;
}

BOOL _NSXPCSerializationCreateObjectInDictionaryForASCIIKey(uint64_t *a1, void *a2, char *__s, uint64_t a4)
{
  uint64_t v15 = *MEMORY[0x1895F89C0];
  uint64_t v11 = 0LL;
  uint64_t v12 = &v11;
  uint64_t v13 = 0x2020000000LL;
  char v14 = 0;
  v10[0] = MEMORY[0x1895F87A8];
  v10[1] = 3221225472LL;
  v10[2] = ___NSXPCSerializationCreateObjectInDictionaryForASCIIKey_block_invoke;
  v10[3] = &unk_189CA6820;
  v10[6] = strlen(__s);
  v10[7] = __s;
  v10[4] = &v11;
  v10[5] = a1;
  v10[8] = a4;
  else {
    BOOL v8 = 0LL;
  }
  _Block_object_dispose(&v11, 8);
  return v8;
}

void sub_182EB9458( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
}

uint64_t _iterateDictionaryKeysAndValues(uint64_t *a1, void *a2, uint64_t a3)
{
  uint64_t result = 0LL;
  v27[1] = *MEMORY[0x1895F89C0];
  unint64_t v5 = *a2 + 8LL;
  uint64_t v6 = *a2 >= 0xFFFFFFFFFFFFFFF8LL;
  uint64_t v7 = v6 << 63 >> 63;
  if (v7 == v6 && (v7 & 0x8000000000000000LL) == 0)
  {
    unint64_t v8 = a1[1];
    if (v8 <= v5) {
      return 0LL;
    }
    unint64_t v9 = *(void *)(*a2 + *a1 + 1);
    if (v9 == v5) {
      return 1LL;
    }
    uint64_t result = 0LL;
    unint64_t v10 = *a2 + 9LL;
    uint64_t v11 = v5 == -1LL;
    uint64_t v12 = v11 << 63 >> 63;
    v27[0] = v10;
    if (v12 != v11 || v12 < 0 || v8 <= v10) {
      return result;
    }
    if (v9 < v10) {
      return 1LL;
    }
    while (1)
    {
      int v26 = 255;
      unint64_t v24 = 0LL;
      unint64_t v25 = v10;
      int v26 = *(_BYTE *)(*a1 + v10) & 0xF0;
      unint64_t v23 = v10;
      if (v26 == 128)
      {
        if (!_getReferenceAtMarker(a1, &v23, v10, &v24)) {
          return 0LL;
        }
        unint64_t v14 = v23;
        unint64_t v25 = v10;
        int v26 = *(_BYTE *)(*a1 + v14) & 0xF0;
      }

      unint64_t v15 = v24 + 1;
      uint64_t v16 = v24 == -1LL;
      uint64_t v17 = v16 << 63 >> 63;
      if (v17 != v16 || v17 < 0 || a1[1] <= v15) {
        return 0LL;
      }
      int v22 = 255;
      uint64_t v21 = v24 + 1;
      int v22 = *(_BYTE *)(*a1 + v15) & 0xF0;
      uint64_t result = _getLastByteOfValueIncludingMarker(a1, v15, v27);
      if (!(_DWORD)result) {
        break;
      }
      uint64_t result = 0LL;
      unint64_t v18 = v27[0] + 1;
      uint64_t v19 = v27[0] == -1LL;
      uint64_t v20 = v19 << 63 >> 63;
      ++v27[0];
      if (v20 != v19 || v20 < 0) {
        break;
      }
      if (a1[1] <= v18) {
        return 1LL;
      }
      if (v10 >= v18) {
        return 0LL;
      }
      unint64_t v10 = v18;
      if (v9 < v18) {
        return 1LL;
      }
    }
  }

  return result;
}

void sub_182EBA294(_Unwind_Exception *exception_object, int a2)
{
  if (a2)
  {
    if (a2 == 2)
    {
      id v3 = objc_begin_catch(exception_object);
      objc_exception_throw(v3);
    }

    else
    {
      objc_begin_catch(exception_object);
      free(v2);
      objc_exception_rethrow();
    }

    __break(1u);
    JUMPOUT(0x182EBA2F4LL);
  }

  _Unwind_Resume(exception_object);
}

BOOL _NSXPCSerializationCreateObjectInDictionaryForKey( uint64_t *a1, void *a2, const __CFString *a3, uint64_t a4)
{
  uint64_t v17 = *MEMORY[0x1895F89C0];
  uint64_t v13 = 0LL;
  unint64_t v14 = &v13;
  uint64_t v15 = 0x2020000000LL;
  char v16 = 0;
  CFIndex v12 = 0LL;
  unint64_t v8 = _stringIsASCII(a3, &v12);
  v11[0] = MEMORY[0x1895F87A8];
  v11[1] = 3221225472LL;
  v11[2] = ___NSXPCSerializationCreateObjectInDictionaryForKey_block_invoke;
  v11[3] = &unk_189CA6848;
  v11[6] = a1;
  v11[7] = v8;
  v11[4] = a3;
  v11[5] = &v13;
  v11[8] = v12;
  v11[9] = a4;
  else {
    BOOL v9 = 0LL;
  }
  _Block_object_dispose(&v13, 8);
  return v9;
}

void sub_182EBA4BC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
}

const char *_stringIsASCII(const __CFString *a1, CFIndex *a2)
{
  uint64_t v30 = *MEMORY[0x1895F89C0];
  CFIndex Length = CFStringGetLength(a1);
  uint64_t result = CFStringGetCStringPtr(a1, 0x600u);
  if (result) {
    goto LABEL_29;
  }
  CFStringRef theString = a1;
  uint64_t v26 = 0LL;
  CFIndex v27 = Length;
  CharactersPtr = CFStringGetCharactersPtr(a1);
  CStringPtr = 0LL;
  unint64_t v24 = CharactersPtr;
  if (!CharactersPtr) {
    CStringPtr = CFStringGetCStringPtr(a1, 0x600u);
  }
  uint64_t v28 = 0LL;
  uint64_t v29 = 0LL;
  unint64_t v25 = CStringPtr;
  if (!Length)
  {
LABEL_26:
    uint64_t v20 = (CFStringEncoding *)MEMORY[0x189604970];
    CFStringEncoding v21 = *MEMORY[0x189604970];
    if (*MEMORY[0x189604970] == -1)
    {
      __CFStringComputeEightBitStringEncoding();
      CFStringEncoding v21 = *v20;
    }

    uint64_t result = CFStringGetCStringPtr(a1, v21);
    if (!result) {
      return result;
    }
LABEL_29:
    if (a2) {
      *a2 = Length;
    }
    return result;
  }

  uint64_t v8 = 0LL;
  uint64_t v9 = 0LL;
  uint64_t v10 = 0LL;
  uint64_t v11 = 64LL;
  while (1)
  {
    uint64_t v12 = (unint64_t)v10 >= 4 ? 4LL : v10;
    CFIndex v13 = v27;
    if (v27 > v10)
    {
      if (v24)
      {
        UniChar v14 = v24[v10 + v26];
      }

      else if (v25)
      {
        UniChar v14 = v25[v26 + v10];
      }

      else
      {
        if (v29 <= v10 || v9 > v10)
        {
          uint64_t v16 = v12 + v8;
          uint64_t v17 = v11 - v12;
          uint64_t v18 = v10 - v12;
          CFIndex v19 = v18 + 64;
          if (v18 + 64 >= v27) {
            CFIndex v19 = v27;
          }
          uint64_t v28 = v18;
          uint64_t v29 = v19;
          if (v27 >= v17) {
            CFIndex v13 = v17;
          }
          v31.length = v13 + v16;
          v31.location = v18 + v26;
          CFStringGetCharacters(theString, v31, v22);
          uint64_t v9 = v28;
        }

        UniChar v14 = v22[v10 - v9];
      }

      if (v14 > 0x7Eu) {
        return 0LL;
      }
    }

    ++v10;
    --v8;
    ++v11;
    if (Length == v10) {
      goto LABEL_26;
    }
  }

void *_NSXPCSerializationIterateArrayObject(void *result, void *a2, uint64_t a3)
{
  v18[1] = *MEMORY[0x1895F89C0];
  unint64_t v3 = *a2 + 8LL;
  uint64_t v4 = *a2 >= 0xFFFFFFFFFFFFFFF8LL;
  uint64_t v5 = v4 << 63 >> 63;
  if (v5 == v4 && (v5 & 0x8000000000000000LL) == 0)
  {
    uint64_t v6 = result;
    unint64_t v7 = result[1];
    if (v7 > v3)
    {
      unint64_t v8 = *(void *)(*a2 + *result + 1LL);
      if (v8 != v3)
      {
        unint64_t v9 = *a2 + 9LL;
        uint64_t v10 = v3 == -1LL;
        uint64_t v11 = v10 << 63 >> 63;
        v18[0] = v9;
        if (v11 == v10 && (v11 & 0x8000000000000000LL) == 0 && v7 > v9 && v8 >= v9)
        {
          do
          {
            int v17 = 255;
            unint64_t v16 = v9;
            if (v9 >= v7) {
              break;
            }
            int v17 = *(_BYTE *)(*v6 + v9) & 0xF0;
            uint64_t result = (void *)(*(uint64_t (**)(uint64_t, unint64_t *))(a3 + 16))(a3, &v16);
            if (!(_DWORD)result) {
              break;
            }
            uint64_t result = (void *)_getLastByteOfValueIncludingMarker(v6, v9, v18);
            unint64_t v13 = v18[0] + 1;
            uint64_t v14 = v18[0] == -1LL;
            uint64_t v15 = v14 << 63 >> 63;
            ++v18[0];
            if (v15 != v14) {
              break;
            }
            if (v15 < 0) {
              break;
            }
            if (v9 >= v13) {
              break;
            }
            unint64_t v7 = v6[1];
            if (v7 <= v13) {
              break;
            }
            unint64_t v9 = v13;
          }

          while (v8 >= v13);
        }
      }
    }
  }

  return result;
}

BOOL _getReferenceAtMarker(uint64_t *a1, unint64_t *a2, unint64_t a3, unint64_t *a4)
{
  if (a1[1] <= a3) {
    return 0LL;
  }
  char v6 = *(_BYTE *)(*a1 + a3);
  if ((v6 & 0xF0) != 0x80) {
    return 0LL;
  }
  BOOL result = 0LL;
  int v8 = v6 & 0xF;
  BOOL v9 = __CFADD__(a3, v6 & 0xF);
  unint64_t v10 = a3 + (v6 & 0xF);
  uint64_t v11 = v9;
  uint64_t v12 = v11 << 63 >> 63;
  *a4 = v10;
  if (v12 != v11 || v12 < 0) {
    return result;
  }
  unint64_t v13 = a1[1];
  if (v13 <= v10) {
    return 0LL;
  }
  BOOL result = 0LL;
  uint64_t v15 = *a1;
  switch(v8)
  {
    case 1:
      __memcpy_chk();
      unint64_t v16 = v21;
      goto LABEL_14;
    case 2:
      __memcpy_chk();
      unint64_t v16 = (unsigned __int16)v21;
      goto LABEL_14;
    case 4:
      __memcpy_chk();
      unint64_t v16 = v21;
      goto LABEL_14;
    case 8:
      __memcpy_chk();
      unint64_t v16 = v21;
LABEL_14:
      *a2 = v16;
      if (v16 >= v13) {
        return 0LL;
      }
      char v17 = *(_BYTE *)(v15 + v16);
      int v18 = v17 & 0xF0;
      BOOL result = (v17 & 0xB0) != 0x80 && v18 != 176 && v18 != 224;
      break;
    default:
      return result;
  }

  return result;
}

void sub_182EBB22C(uint64_t a1, int a2)
{
  if (a2)
  {
    objc_end_catch();
    JUMPOUT(0x182EBB208LL);
  }

  JUMPOUT(0x182EBB25CLL);
}

CFStringRef _NSXPCSerializationStringForObject(uint64_t *a1, char **a2)
{
  v5[1] = *MEMORY[0x1895F89C0];
  uint64_t v2 = *a2;
  uint64_t v4 = 0LL;
  if (!v2) {
    return 0LL;
  }
  return 0LL;
}

uint64_t _getStringAtMarker(uint64_t *a1, const __CFString **a2, char *a3, unint64_t *a4)
{
  uint64_t v5 = a3;
  key[1] = *(void **)MEMORY[0x1895F89C0];
  key[0] = a3;
  int v8 = (const __CFDictionary *)a1[2];
  if (v8)
  {
    Value = (const __CFString *)CFDictionaryGetValue(v8, a3);
    if (Value)
    {
LABEL_31:
      *a2 = Value;
      return 1LL;
    }
  }

  unint64_t v10 = a1[1];
  char v11 = v5[*a1];
  int v12 = v11 & 0xF0;
  if (v12 == 112)
  {
    cStr = 0LL;
    uint64_t result = _getASCIIStringAtMarker(a1, &cStr, (unint64_t)v5, &numChars, a4);
    if (!(_DWORD)result) {
      return result;
    }
    CFStringRef v14 = CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x189604DB0], cStr, 0x600u);
LABEL_28:
    unint64_t v24 = (__CFString *)v14;
    unint64_t v25 = (__CFDictionary *)a1[2];
    if (v25) {
      CFDictionarySetValue(v25, v5, v24);
    }
    Value = v24;
    goto LABEL_31;
  }

  if (v12 == 128)
  {
    uint64_t result = _getReferenceAtMarker(a1, (unint64_t *)key, (unint64_t)v5, a4);
    if ((_DWORD)result) {
      return _getStringAtMarker(a1, a2, key[0], &numChars);
    }
    return result;
  }

  if (v12 != 96) {
    return 0LL;
  }
  CFIndex v15 = v11 & 0xF;
  CFIndex numChars = v15;
  if ((v11 & 0xF) == 0)
  {
    *a4 = (unint64_t)v5;
    if (!a2) {
      return 1LL;
    }
    Value = &stru_189CA6A28;
    goto LABEL_31;
  }

  key[0] = ++v5;
  if ((_DWORD)v15 != 15
    || (uint64_t result = _getIntAtMarker(a1, &numChars, (unint64_t)v5, (unint64_t *)key), (_DWORD)result)
    && (result = 0LL, uint64_t v5 = (char *)key[0] + 1, v16 = key[0] == (void *)-1LL, v17 = v16 << 63 >> 63, v17 == v16)
    && (v17 & 0x8000000000000000LL) == 0
    && (uint64_t result = 0LL, a1[1] > (unint64_t)v5)
    && (CFIndex v15 = numChars, (numChars & 0x8000000000000000LL) == 0))
  {
    if (2 * v15 < 0) {
      return 0LL;
    }
    uint64_t result = 0LL;
    uint64_t v18 = 2 * v15 - 1;
    uint64_t v19 = v18 >> 63;
    BOOL v20 = __CFADD__(v5, v18);
    unint64_t v21 = &v5[v18];
    uint64_t v22 = v20 ? v19 + 1 : v19;
    uint64_t v23 = v22 << 63 >> 63;
    *a4 = (unint64_t)v21;
    if (v23 == v22 && (v23 & 0x8000000000000000LL) == 0)
    {
      if (a1[1] > (unint64_t)v21)
      {
        if (!a2) {
          return 1LL;
        }
        CFStringRef v14 = CFStringCreateWithCharacters((CFAllocatorRef)*MEMORY[0x189604DD0], (const UniChar *)&v5[*a1], v15);
        goto LABEL_28;
      }

      return 0LL;
    }
  }

  return result;
}

void _resetAllowedClasses(uint64_t a1, uint64_t a2)
{
  if (a2)
  {

    *(void *)(a1 + 2264 + 8LL * (*(void *)(a1 + 4440))--) = 0LL;
  }

LABEL_18:
  char v11 = (_NSPlaceholderData *)dispatch_data_create(v13, a4, 0LL, (dispatch_block_t)*MEMORY[0x1895F8AA0]);
  if (a6) {
    goto LABEL_19;
  }
  return v11;
}

  v28.length = v17;
  v28.location = v18;
  return v28;
}

  if (v11 < a4)
  {
    uint64_t v30 = +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"Index %ld out of range bounds [0...%ld]",  a4,  v11);
    objc_exception_throw((id)[MEMORY[0x189603F70] exceptionWithName:*MEMORY[0x189603A60] reason:v30 userInfo:0]);
    +[NSThread callStackReturnAddresses](v31, v32);
  }

  else
  {
    -[NSMutableIndexSet _ensureRangeCapacity:](self, "_ensureRangeCapacity:", v11 + 1);
    p_internal = &self->super._internal;
    if ((*(_BYTE *)&self->super._indexSetFlags & 1) != 0)
    {
      unint64_t v24 = &p_internal[a4];
      v24->_singleRange._range.location = location;
      v24->_singleRange._range.length = length;
    }

    else
    {
      CFStringRef v14 = (void *)p_internal->_singleRange._range.location;
      uint64_t v16 = *(void *)p_internal->_singleRange._range.location;
      CFIndex v15 = *(void *)(p_internal->_singleRange._range.location + 8);
      uint64_t v17 = v15 - a4;
      uint64_t v18 = *(void *)(p_internal->_singleRange._range.location + 24);
      uint64_t v19 = v18 + v15;
      if (v15 - a4 > a4 && v18 != 0 || v16 == v19)
      {
        if (v15 == a4)
        {
          if (v18 <= 1) {
            uint64_t v22 = 1LL;
          }
          else {
            uint64_t v22 = v18 >> 1;
          }
          memmove(&v14[2 * v18 + 8 + -2 * v22], &v14[2 * v18 + 8], 16 * a4);
          CFStringRef v14 = (void *)p_internal->_singleRange._range.location;
          uint64_t v23 = *(void *)(p_internal->_singleRange._range.location + 24) - v22;
        }

        else
        {
          if (a4)
          {
            memmove(&v14[2 * v18 + 6], &v14[2 * v18 + 8], 16 * a4);
            CFStringRef v14 = (void *)p_internal->_singleRange._range.location;
            uint64_t v18 = *(void *)(p_internal->_singleRange._range.location + 24);
          }

          uint64_t v23 = v18 - 1;
        }

        v14[3] = v23;
      }

      else if (a4)
      {
        if (v15 != a4) {
          memmove(&v14[2 * v18 + 10 + 2 * a4], &v14[2 * v18 + 8 + 2 * a4], 16 * v17);
        }
      }

      else
      {
        unint64_t v25 = v16 - v19;
        uint64_t v26 = (unint64_t)(v16 - v19) >> 1;
        if (v25 <= 1) {
          CFIndex v27 = 1LL;
        }
        else {
          CFIndex v27 = v26;
        }
        memmove(&v14[2 * v18 + 8 + 2 * v27], &v14[2 * v18 + 8], 16 * v17);
        *(void *)(p_internal->_singleRange._range.location + 24) = v27 - 1;
      }

      uint64_t v28 = &self->super._internal;
      if ((*(_BYTE *)&self->super._indexSetFlags & 1) == 0) {
        uint64_t v28 = ($BA656A43A73A71AF6C4B982E4240B787 *)(p_internal->_singleRange._range.location
      }
      uint64_t v29 = &v28[a4];
      v29->_singleRange._range.location = location;
      v29->_singleRange._range.length = length;
      atomic_store(0LL, (unint64_t *)(p_internal->_singleRange._range.location + 56));
      ++*(void *)(p_internal->_singleRange._range.location + 8);
      *(void *)(p_internal->_singleRange._range.location + 16) += length;
    }
  }

  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  if (!v40)
  {
LABEL_12:
    Hasher._combine(_:)(0);
    char v6 = v41;
    if (!v41) {
      goto LABEL_13;
    }
LABEL_20:
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    specialized Dictionary<>.hash(into:)((uint64_t)v55, v6);
    swift_bridgeObjectRelease();
    unint64_t v7 = v42;
    if (!v42) {
      goto LABEL_14;
    }
    goto LABEL_21;
  }

  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  if (!v40)
  {
LABEL_12:
    Hasher._combine(_:)(0);
    char v6 = v41;
    if (!v41) {
      goto LABEL_13;
    }
LABEL_20:
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    specialized Dictionary<>.hash(into:)((uint64_t)v55, v6);
    swift_bridgeObjectRelease();
    unint64_t v7 = v42;
    if (!v42) {
      goto LABEL_14;
    }
    goto LABEL_21;
  }

                if (v44) {
                  goto LABEL_242;
                }
LABEL_19:
                unint64_t v47 = (4 * *((_BYTE *)v45 + 18) + 8) & 0x3C;
                unint64_t v33 = ((-15LL << v47) - 1) & v33 | (v49 << v47);
                unint64_t v48 = *((void *)v45 + 3 * v49 + 3);
                swift_unknownObjectRetain();
                swift_unknownObjectRelease();
                unint64_t v45 = (_OWORD *)v48;
                if (!*(_BYTE *)(v48 + 18)) {
                  goto LABEL_207;
                }
              }
            }

            swift_retain_n();
            v57 = swift_unknownObjectRetain_n();
            unint64_t v58 = specialized Rope._endPath.getter(v57);
            swift_unknownObjectRelease();
            unint64_t v48 = 0LL;
            int v44 = 0LL;
            if (!v40) {
              goto LABEL_229;
            }
            while (1)
            {
              swift_unknownObjectRetain();
              int v59 = specialized Rope._Node.distanceFromStart<A>(to:in:)(v43, v58, v48, (uint64_t)v40, v42);
              swift_release();
              swift_unknownObjectRelease_n();
              v61 = v38 - v44;
              if (!__OFSUB__(v38, v44)) {
                break;
              }
              while (1)
              {
                __break(1u);
LABEL_232:
                v167 = v60;
                int v44 = v61;
LABEL_228:
                swift_unknownObjectRelease();
                swift_unknownObjectRelease();
                unint64_t v58 = v33 & 0xFFFFFFFFFFFFF0FFLL | (v167 << 8);
                int v42 = (uint64_t)v191;
                unint64_t v39 = v192;
                if (v40) {
                  break;
                }
LABEL_229:
                swift_release();
                int v59 = 0LL;
                v61 = v38 - v44;
                if (!__OFSUB__(v38, v44)) {
                  goto LABEL_42;
                }
              }
            }

  String.utf8CString.getter();
  swift_bridgeObjectRelease();
  if ((v30 & 1) == 0)
  {
    String.utf8CString.getter();
    swift_bridgeObjectRelease();
  }

  String.utf8CString.getter();
  uameasfmt_getUnitsForUsage();
  swift_release();
  swift_unknownObjectRelease();
  swift_release();
  if (*(int *)v38 >= 1)
  {
    swift_bridgeObjectRelease();
    return v37;
  }

  uint64_t v32 = getDimensionUnitFromUnitSpecifier(*(unsigned int *)&v38[4]);
  swift_bridgeObjectRelease();
  if (!v32) {
    return v37;
  }
  objc_opt_self();
  uint64_t result = (id)swift_dynamicCastObjCClass();
  if (!result)
  {

    return v37;
  }

  return result;
}

      CFIndex v27 = v52;
      uint64_t v28 = v23;
      dispatch thunk of static FloatingPoint.infinity.getter();
      goto LABEL_19;
    }

    uint64_t v40 = (char *)&v47 - v22;
    if (a2 == 9 && v25 == 45)
    {
      unint64_t v41 = v24;
      int v42 = _stringshims_strncasecmp_l(a1, "-infinity", 9uLL, 0LL);
      uint64_t v23 = v32;
      if (v42) {
        goto LABEL_35;
      }
    }

    else
    {
      if (a2 != 4 || v25 != 45)
      {
        if (a2 != 8 || v26 != 73) {
          goto LABEL_35;
        }
        unint64_t v33 = "infinity";
        __int16 v34 = a1;
        unint64_t v35 = 8LL;
LABEL_11:
        v36 = _stringshims_strncasecmp_l(v34, v33, v35, 0LL);
        uint64_t v23 = v32;
        if (!v36) {
          goto LABEL_18;
        }
LABEL_35:
        unint64_t v37 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v23 + 56);
        unint64_t v38 = v52;
        unint64_t v39 = 1LL;
        return v37(v38, v39, 1LL, a10);
      }

      if ((*((unsigned __int8 *)a1 + 1) | 0x20) != 0x69
        || (*((unsigned __int8 *)a1 + 2) | 0x20) != 0x6E
        || (*((unsigned __int8 *)a1 + 3) | 0x20) != 0x66)
      {
        goto LABEL_35;
      }

      unint64_t v41 = v24;
    }

    unint64_t v43 = v23;
    dispatch thunk of static FloatingPoint.infinity.getter();
    AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
    MEMORY[0x186E1CDF8](&unk_183729740, 257LL, AssociatedTypeWitness, AssociatedConformanceWitness);
    dispatch thunk of ExpressibleByFloatLiteral.init(floatLiteral:)();
    unint64_t v45 = v52;
    dispatch thunk of static Numeric.* infix(_:_:)();
    unint64_t v46 = *(void (**)(char *, uint64_t))(v43 + 8);
    v46(v41, a10);
    v46(v40, a10);
    unint64_t v37 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v43 + 56);
    unint64_t v38 = v45;
    goto LABEL_20;
  }

  CFIndex v27 = v52;
  uint64_t v28 = v23;
  dispatch thunk of static FloatingPoint.nan.getter();
LABEL_19:
  unint64_t v37 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v28 + 56);
  unint64_t v38 = v27;
LABEL_20:
  unint64_t v39 = 0LL;
  return v37(v38, v39, 1LL, a10);
}

    char v6 = (v13 - 1) & v13;
    char v11 = __clz(__rbit64(v13)) + (v9 << 6);
LABEL_5:
    Hasher._combine(_:)(*(_DWORD *)(*(void *)(a2 + 48) + 4 * v11));
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    v8 ^= Hasher._finalize()();
  }

  CFStringRef v14 = v12 + 2;
  if (v14 >= v7)
  {
LABEL_19:
    swift_release();
    Hasher._combine(_:)(v8);
    return;
  }

  unint64_t v13 = *(void *)(v3 + 8 * v14);
  if (v13)
  {
    BOOL v9 = v14;
    goto LABEL_18;
  }

  while (1)
  {
    BOOL v9 = v14 + 1;
    if (__OFADD__(v14, 1LL)) {
      break;
    }
    if (v9 >= v7) {
      goto LABEL_19;
    }
    unint64_t v13 = *(void *)(v3 + 8 * v9);
    ++v14;
    if (v13) {
      goto LABEL_18;
    }
  }

    char v6 = (v13 - 1) & v13;
    char v11 = __clz(__rbit64(v13)) + (v9 << 6);
LABEL_5:
    Hasher._combine(_:)(*(void *)(*(void *)(a2 + 48) + 8 * v11));
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    v8 ^= Hasher._finalize()();
  }

  CFStringRef v14 = v12 + 2;
  if (v14 >= v7)
  {
LABEL_19:
    swift_release();
    Hasher._combine(_:)(v8);
    return;
  }

  unint64_t v13 = *(void *)(v3 + 8 * v14);
  if (v13)
  {
    BOOL v9 = v14;
    goto LABEL_18;
  }

  while (1)
  {
    BOOL v9 = v14 + 1;
    if (__OFADD__(v14, 1LL)) {
      break;
    }
    if (v9 >= v7) {
      goto LABEL_19;
    }
    unint64_t v13 = *(void *)(v3 + 8 * v9);
    ++v14;
    if (v13) {
      goto LABEL_18;
    }
  }

    int v8 = (v14 - 1) & v14;
    char v11 = __clz(__rbit64(v14)) + (v4 << 6);
LABEL_5:
    int v12 = *(void *)(*(void *)(a2 + 56) + 8 * v11);
    Hasher._combine(_:)(*(unsigned __int8 *)(*(void *)(a2 + 48) + v11));
    Hasher._combine(_:)(v12);
    v3 ^= Hasher._finalize()();
  }

  CFIndex v15 = v13 + 2;
  if (v15 >= v9)
  {
LABEL_19:
    Hasher._combine(_:)(v3);
    return;
  }

  CFStringRef v14 = *(void *)(v5 + 8 * v15);
  if (v14)
  {
    uint64_t v4 = v15;
    goto LABEL_18;
  }

  while (1)
  {
    uint64_t v4 = v15 + 1;
    if (__OFADD__(v15, 1LL)) {
      break;
    }
    if (v4 >= v9) {
      goto LABEL_19;
    }
    CFStringRef v14 = *(void *)(v5 + 8 * v4);
    ++v15;
    if (v14) {
      goto LABEL_18;
    }
  }

    int v8 = (v14 - 1) & v14;
    char v11 = __clz(__rbit64(v14)) + (v4 << 6);
LABEL_5:
    int v12 = *(void *)(*(void *)(a2 + 56) + 8 * v11);
    Hasher._combine(_:)(*(_DWORD *)(*(void *)(a2 + 48) + 4 * v11));
    Hasher._combine(_:)(v12);
    v3 ^= Hasher._finalize()();
  }

  CFIndex v15 = v13 + 2;
  if (v15 >= v9)
  {
LABEL_19:
    Hasher._combine(_:)(v3);
    return;
  }

  CFStringRef v14 = *(void *)(v5 + 8 * v15);
  if (v14)
  {
    uint64_t v4 = v15;
    goto LABEL_18;
  }

  while (1)
  {
    uint64_t v4 = v15 + 1;
    if (__OFADD__(v15, 1LL)) {
      break;
    }
    if (v4 >= v9) {
      goto LABEL_19;
    }
    CFStringRef v14 = *(void *)(v5 + 8 * v4);
    ++v15;
    if (v14) {
      goto LABEL_18;
    }
  }

    char v6 = (v13 - 1) & v13;
    char v11 = __clz(__rbit64(v13)) + (v9 << 6);
LABEL_5:
    Hasher._combine(_:)(*(unsigned __int8 *)(*(void *)(a2 + 48) + v11));
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    v8 ^= Hasher._finalize()();
  }

  CFStringRef v14 = v12 + 2;
  if (v14 >= v7)
  {
LABEL_19:
    swift_release();
    Hasher._combine(_:)(v8);
    return;
  }

  unint64_t v13 = *(void *)(v3 + 8 * v14);
  if (v13)
  {
    BOOL v9 = v14;
    goto LABEL_18;
  }

  while (1)
  {
    BOOL v9 = v14 + 1;
    if (__OFADD__(v14, 1LL)) {
      break;
    }
    if (v9 >= v7) {
      goto LABEL_19;
    }
    unint64_t v13 = *(void *)(v3 + 8 * v9);
    ++v14;
    if (v13) {
      goto LABEL_18;
    }
  }

  if (!WORD1(a2))
  {
    if (!WORD2(a2) && !(_DWORD)v5 && !(_WORD)a3 && !v8)
    {
      unint64_t v21 = HIDWORD(a1);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<UInt16>);
      uint64_t v22 = swift_allocObject();
      *(void *)&uint64_t result = 2LL;
      *(_OWORD *)(v22 + 16) = xmmword_1837232D0;
      *(_WORD *)(v22 + 32) = v21;
      *(_WORD *)(v22 + 34) = v9;
      return result;
    }

    goto LABEL_13;
  }

      if ((uint64_t)a4 >= (uint64_t)v7)
      {
        uint64_t v5 = 0;
        if ((uint64_t)a4 >= v8)
        {
LABEL_49:
          int v8 = a4;
          if (v5)
          {
LABEL_50:
            if (v8 > a3)
            {
              swift_bridgeObjectRelease();
              lazy protocol witness table accessor for type NSDecimal._CalculationError and conformance NSDecimal._CalculationError();
              swift_allocError();
              *BOOL v20 = 0;
              return swift_willThrow();
            }

            *(_WORD *)(v13 + 2 * v8 + 32) = 1;
            uint64_t v22 = v13;
            a4 = v8 + 1;
          }

          else
          {
LABEL_47:
            a4 = v8;
          }

    int v8 = (v16 - 1) & v16;
    CFStringRef v14 = __clz(__rbit64(v16)) + (v15 << 6);
    char v11 = v15;
  }

  __break(1u);
LABEL_41:
  __break(1u);
LABEL_42:
  __break(1u);
  return result;
}

    BOOL v9 = (v18 - 1) & v18;
    uint64_t v16 = __clz(__rbit64(v18)) + (v17 << 6);
    int v12 = v17;
  }

  __break(1u);
LABEL_41:
  __break(1u);
LABEL_42:
  __break(1u);
  return result;
}

    BOOL v9 = (v18 - 1) & v18;
    uint64_t v16 = __clz(__rbit64(v18)) + (v17 << 6);
    int v12 = v17;
  }

  __break(1u);
LABEL_41:
  __break(1u);
LABEL_42:
  __break(1u);
  return result;
}

  swift_bridgeObjectRelease();
LABEL_19:
  char v11 = 4 * v3;
  if (!(v4 >> 14))
  {
    if (String.count.getter() == 1) {
      return 47LL;
    }
    if (v11 >= (unint64_t)String.index(after:)() >> 14)
    {
LABEL_29:
      uint64_t v16 = String.subscript.getter();
      uint64_t v2 = MEMORY[0x186E1B610](v16);
LABEL_30:
      swift_bridgeObjectRelease();
      return v2;
    }

    __break(1u);
  }

  if ((String.index(before:)() ^ v4) >> 14)
  {
    __break(1u);
    return 47LL;
  }

  int v12 = (unint64_t)String.subscript.getter() >> 14;
  if (v12 == v13 >> 14)
  {
LABEL_34:
    swift_bridgeObjectRelease();
    return 47LL;
  }

  CFStringRef v14 = Substring.index(before:)();
  if (Substring.subscript.getter() == 47 && v15 == 0xE100000000000000LL) {
    goto LABEL_35;
  }
LABEL_36:
  uint64_t v18 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  if ((v18 & 1) != 0)
  {
    while (v12 != v14 >> 14)
    {
      CFStringRef v14 = Substring.index(before:)();
      if (Substring.subscript.getter() != 47 || v19 != 0xE100000000000000LL) {
        goto LABEL_36;
      }
LABEL_35:
      swift_bridgeObjectRelease();
    }

    goto LABEL_34;
  }

  swift_bridgeObjectRelease();
  unint64_t v21 = (unint64_t)String.subscript.getter() >> 14;
  if (v21 == v22 >> 14)
  {
LABEL_44:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    String.index(after:)();
LABEL_58:
    uint64_t v28 = String.subscript.getter();
    uint64_t v30 = v29;
    uint64_t v32 = v31;
    __int16 v34 = v33;
    swift_bridgeObjectRelease();
    uint64_t v2 = MEMORY[0x186E1B610](v28, v30, v32, v34);
    goto LABEL_30;
  }

  uint64_t v23 = Substring.index(before:)();
  if (Substring.subscript.getter() == 47 && v24 == 0xE100000000000000LL)
  {
LABEL_47:
    swift_bridgeObjectRelease();
  }

  else
  {
    unint64_t v35 = v21;
    while (1)
    {
      unint64_t v25 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if ((v25 & 1) != 0) {
        break;
      }
      if (v35 == v23 >> 14) {
        goto LABEL_44;
      }
      uint64_t v23 = Substring.index(before:)();
      if (Substring.subscript.getter() == 47 && v26 == 0xE100000000000000LL) {
        goto LABEL_47;
      }
    }
  }

  swift_bridgeObjectRelease();
  uint64_t result = String.index(after:)();
  if (v14 >> 14 >= result >> 14)
  {
    swift_bridgeObjectRetain();
    String.index(after:)();
    goto LABEL_58;
  }

  __break(1u);
  return result;
}

                                            uint64_t v30 = v26;
                                            if (v162) {
                                              goto LABEL_33;
                                            }
                                            goto LABEL_19;
                                          }

  outlined retain of Locale.Language( (uint64_t *)v132,  (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))outlined consume of Locale.LanguageCode?);
  unint64_t v21 = 0LL;
  unint64_t v10 = 0LL;
  v99 = 0LL;
LABEL_19:
  outlined retain of Locale.Language( (uint64_t *)v131,  (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))outlined copy of Locale.LanguageCode?);
  uint64_t v32 = specialized _withFixedCharBuffer(size:_:)(257LL, (uint64_t *)v131);
  v97 = v23;
  if (v33)
  {
    v93 = v10;
    v94 = v22;
    v95 = v21;
    v92 = v26;
    MEMORY[0x1895F8858](v32);
    LODWORD(v107) = 0;
    String.utf8CString.getter();
    __int16 v34 = uloc_getLanguage();
    swift_release();
    unint64_t v35 = 0LL;
    v36 = 0LL;
    if ((int)v107 <= 0 && v34 > 0)
    {
      v82[v34] = 0;
      unint64_t v35 = MEMORY[0x186E1B634](v82);
      v36 = v37;
    }

    v98 = v35;
    v103 = countAndFlagsBits;
    MEMORY[0x1895F8858](v35);
    LODWORD(v107) = 0;
    String.utf8CString.getter();
    unint64_t v38 = uloc_getScript();
    unint64_t v39 = swift_release();
    uint64_t v40 = 0LL;
    if ((int)v107 > 0)
    {
      v101 = 0LL;
    }

    else
    {
      v101 = 0LL;
      if (v38 > 0)
      {
        v82[v38] = 0;
        unint64_t v39 = MEMORY[0x186E1B634](v82);
        uint64_t v40 = v39;
        v101 = v41;
      }
    }

    MEMORY[0x1895F8858](v39);
    LODWORD(v107) = 0;
    String.utf8CString.getter();
    int v42 = uloc_getCountry();
    swift_release();
    unint64_t v43 = 0LL;
    int v44 = 0LL;
    if ((int)v107 > 0)
    {
      unint64_t v45 = v101;
    }

    else
    {
      unint64_t v45 = v101;
      if (v42 > 0)
      {
        v82[v42] = 0;
        unint64_t v43 = MEMORY[0x186E1B634](v82, 0LL);
      }
    }

    v96 = v44;
    swift_bridgeObjectRelease();
    if (v36)
    {
      unint64_t v46 = String.lowercased()();
      unint64_t v47 = v46._countAndFlagsBits;
      v90 = v46._object;
      uint64_t v23 = v97;
      if (v45) {
        goto LABEL_35;
      }
    }

    else
    {
      v98 = 0LL;
      unint64_t v47 = 0LL;
      v90 = 0LL;
      uint64_t v23 = v97;
      if (v45)
      {
LABEL_35:
        v107 = v40;
        v108 = v45;
        swift_bridgeObjectRetain_n();
        String.init<A>(_:)();
        unint64_t v48 = String._capitalized()();
        v88 = v48._object;
        v89 = v48._countAndFlagsBits;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if (v96)
        {
LABEL_36:
          unint64_t v49 = String.uppercased()();
          v84 = v49._object;
          v85 = v49._countAndFlagsBits;
          outlined retain of Locale.Language( (uint64_t *)v131,  (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))outlined consume of Locale.LanguageCode?);
LABEL_40:
          v51 = v99;
          unint64_t v50 = v100;
          v91 = v40;
          v86 = v47;
          v87 = v43;
          if (v23 == 1)
          {
            uint64_t v53 = v104;
            id v52 = v105;
            v54 = v92;
            v55 = v93;
            v56 = v27;
            unint64_t v58 = v94;
            v57 = v95;
            uint64_t v60 = v102;
            int v59 = v103;
            if (v36 == 1)
            {
              LOBYTE(v23) = 1;
              return v23 & 1;
            }

  BOOL v20 = (char *)&outlined read-only object #1 of static Locale.NumberingSystem.validNumberingSystems(for:);
  unint64_t v21 = 1LL;
LABEL_19:
  v86 = v121;
  v87 = v13;
  v84 = v122;
  v85 = *((void *)&v121 + 1);
  v82 = v123;
  v83 = *((void *)&v122 + 1);
  v80 = v124;
  v81 = *((void *)&v123 + 1);
  v79 = *((void *)&v124 + 1);
  v78 = v125;
  v76 = *((void *)&v126 + 1);
  v77 = v126;
  v74 = *((void *)&v127 + 1);
  v75 = v127;
  v72 = *((void *)&v128 + 1);
  v73 = v128;
  v70 = *((void *)&v129 + 1);
  v71 = v129;
  v68 = HIBYTE(v134);
  v69 = v134;
  v66 = *((void *)&v135 + 1);
  v67 = v135;
  v64 = *((void *)&v136 + 1);
  v65 = v136;
  v62 = *((void *)&v137 + 1);
  v63 = v137;
  uint64_t v60 = *((void *)&v138 + 1);
  v61 = v138;
  unint64_t v58 = *((void *)&v139 + 1);
  int v59 = v139;
  v56 = *((void *)&v140 + 1);
  v57 = v140;
  v54 = *((void *)&v141 + 1);
  v55 = v141;
  id v52 = *((void *)&v142 + 1);
  uint64_t v53 = v142;
  uint64_t v22 = (uint64_t *)(v20 + 40);
  unint64_t v50 = *((void *)&v143 + 1);
  v51 = v143;
  do
  {
    uint64_t v23 = v5;
    unint64_t v24 = v4;
    uint64_t v4 = *(v22 - 1);
    uint64_t v5 = *v22;
    unint64_t v25 = String.lowercased()();
    swift_bridgeObjectRetain();
    outlined consume of Locale.LanguageCode?(v24, v23);
    HIDWORD(v91) = HIDWORD(v89);
    v92 = v88;
    v93 = v87;
    v94 = v90;
    *(void *)&v95 = v86;
    *((void *)&v95 + 1) = v85;
    *(void *)&v96 = v84;
    *((void *)&v96 + 1) = v83;
    *(void *)&v97 = v82;
    *((void *)&v97 + 1) = v81;
    *(void *)&v98 = v80;
    *((void *)&v98 + 1) = v79;
    v99 = v78;
    *(void *)&v100 = v77;
    *((void *)&v100 + 1) = v76;
    *(void *)&v101 = v75;
    *((void *)&v101 + 1) = v74;
    *(void *)&v102 = v73;
    *((void *)&v102 + 1) = v72;
    *(void *)&v103 = v71;
    *((void *)&v103 + 1) = v70;
    v104 = v4;
    v105 = v5;
    v106 = v25;
    LOBYTE(v107) = v69;
    HIBYTE(v107) = v68;
    *(void *)&v108 = v67;
    *((void *)&v108 + 1) = v66;
    *(void *)&v109 = v65;
    *((void *)&v109 + 1) = v64;
    *(void *)&v110 = v63;
    *((void *)&v110 + 1) = v62;
    *(void *)&v111 = v61;
    *((void *)&v111 + 1) = v60;
    *(void *)&v112 = v59;
    *((void *)&v112 + 1) = v58;
    *(void *)&v113 = v57;
    *((void *)&v113 + 1) = v56;
    *(void *)&v114 = v55;
    *((void *)&v114 + 1) = v54;
    *(void *)&v115 = v53;
    *((void *)&v115 + 1) = v52;
    *(void *)&v116 = v51;
    *((void *)&v116 + 1) = v50;
    Locale.Components.icuIdentifier.getter();
    LODWORD(v91) = 0;
    String.utf8CString.getter();
    swift_bridgeObjectRelease();
    uint64_t v26 = unumsys_open();
    swift_release();
    if (!MEMORY[0x186E2176C](v26)
      && MEMORY[0x186E21760](v26) == 10
      && MEMORY[0x186E21754](v26))
    {
      CFIndex v27 = String.init(cString:)();
      uint64_t v29 = v28;
      uint64_t v30 = String.lowercased()();
      unint64_t v48 = v27;
      if ((specialized Sequence<>.contains(_:)(v27, v29, v30._countAndFlagsBits, (uint64_t)v30._object, (uint64_t)v49) & 1) != 0)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }

      else
      {
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          unint64_t v49 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  v49[2] + 1LL,  1,  v49);
        }
        uint64_t v32 = v49[2];
        CFRange v31 = v49[3];
        unint64_t v33 = v32 + 1;
        if (v32 >= v31 >> 1)
        {
          v36 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (void *)(v31 > 1),  v32 + 1,  1,  v49);
          unint64_t v33 = v32 + 1;
          object = v30._object;
          unint64_t v49 = v36;
        }

        else
        {
          object = v30._object;
        }

        v49[2] = v33;
        unint64_t v35 = &v49[4 * v32];
        v35[4] = v48;
        v35[5] = v29;
        v35[6] = v30._countAndFlagsBits;
        v35[7] = object;
      }
    }

    v22 += 2;
    unumsys_close();
    --v21;
  }

  while (v21);
  swift_bridgeObjectRelease();
  unint64_t v37 = v87;
  uint64_t v40 = String.lowercased()();
  unint64_t v41 = v49;
  int v42 = specialized Sequence<>.contains(_:)( 1853120876LL,  0xE400000000000000LL,  v40._countAndFlagsBits,  (uint64_t)v40._object,  (uint64_t)v49);
  if ((v42 & 1) != 0)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }

  else
  {
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      unint64_t v41 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  v49[2] + 1LL,  1,  v49);
    }
    int v44 = v41[2];
    unint64_t v43 = v41[3];
    unint64_t v45 = v41;
    if (v44 >= v43 >> 1) {
      unint64_t v45 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (void *)(v43 > 1),  v44 + 1,  1,  v41);
    }
    v45[2] = v44 + 1;
    unint64_t v46 = (Swift::String *)&v45[4 * v44];
    unint64_t v41 = v45;
    v46[2]._countAndFlagsBits = 1853120876LL;
    v46[2]._object = (void *)0xE400000000000000LL;
    v46[3] = v40;
    unint64_t v37 = v87;
  }

  v91 = v89;
  v92 = v88;
  v93 = v37;
  v94 = v90;
  v95 = v121;
  v96 = v122;
  v97 = v123;
  v98 = v124;
  v99 = v125;
  v100 = v126;
  v101 = v127;
  v102 = v128;
  v103 = v129;
  v104 = v4;
  v105 = v5;
  v106 = v25;
  v107 = v134;
  v108 = v135;
  v109 = v136;
  v110 = v137;
  v111 = v138;
  v112 = v139;
  v113 = v140;
  v114 = v141;
  v115 = v142;
  v116 = v143;
  outlined release of Locale.Components(&v91);
  return v41;
}

    uint64_t v22 = v28;
    goto LABEL_19;
  }

  __break(1u);
LABEL_60:
  __break(1u);
  return result;
}

        __break(1u);
LABEL_19:
        __break(1u);
LABEL_20:
        __break(1u);
        return result;
      }
    }

    __break(1u);
    goto LABEL_18;
  }

  return 0LL;
}

        __break(1u);
LABEL_19:
        __break(1u);
LABEL_20:
        __break(1u);
        return result;
      }
    }

    __break(1u);
    goto LABEL_18;
  }

  return 0LL;
}

  __break(1u);
  return result;
}

  Hasher._combine(_:)(0);
}

  (*(void (**)(char *, uint64_t))(v24 + 8))(v26, v41);
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v47);
}

  *(void *)(v4 + 8 * v12) = v14 | v13;
  unint64_t v21 = (void *)(*(void *)(v1 + 48) + 16 * v11);
  *unint64_t v21 = v8;
  v21[1] = v7;
  uint64_t v22 = *(void *)(v1 + 16);
  uint64_t v23 = __OFADD__(v22, 1LL);
  unint64_t v24 = v22 + 1;
  if (!v23)
  {
    *(void *)(v1 + 16) = v24;
    goto LABEL_3;
  }

  __break(1u);
  return result;
}

  *(void *)(v4 + 8 * v12) = v14 | v13;
  unint64_t v21 = (void *)(*(void *)(v1 + 48) + 16 * v11);
  *unint64_t v21 = v8;
  v21[1] = v7;
  uint64_t v22 = *(void *)(v1 + 16);
  uint64_t v23 = __OFADD__(v22, 1LL);
  unint64_t v24 = v22 + 1;
  if (!v23)
  {
    *(void *)(v1 + 16) = v24;
    goto LABEL_3;
  }

  __break(1u);
  return result;
}

  __break(1u);
}

  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  if (!v39)
  {
LABEL_12:
    Hasher._combine(_:)(0);
    unint64_t v7 = v40;
    if (!v40) {
      goto LABEL_13;
    }
LABEL_20:
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    specialized Dictionary<>.hash(into:)(a1, v7);
    swift_bridgeObjectRelease();
    int v8 = v41;
    if (!v41) {
      goto LABEL_14;
    }
    goto LABEL_21;
  }

  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  if (!v38)
  {
LABEL_12:
    Hasher._combine(_:)(0);
    uint64_t v5 = v39;
    if (!v39) {
      goto LABEL_13;
    }
LABEL_20:
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    specialized Dictionary<>.hash(into:)((uint64_t)v53, v5);
    swift_bridgeObjectRelease();
    char v6 = v40;
    if (!v40) {
      goto LABEL_14;
    }
    goto LABEL_21;
  }

  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  if (!v38)
  {
LABEL_12:
    Hasher._combine(_:)(0);
    uint64_t v5 = v39;
    if (!v39) {
      goto LABEL_13;
    }
LABEL_20:
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    specialized Dictionary<>.hash(into:)((uint64_t)v53, v5);
    swift_bridgeObjectRelease();
    char v6 = v40;
    if (!v40) {
      goto LABEL_14;
    }
    goto LABEL_21;
  }

      if (v8) {
        goto LABEL_56;
      }
LABEL_19:
      uint64_t v16 = (4 * *(_BYTE *)(v13 + 18) + 8) & 0x3C;
      CFIndex v15 = ((-15LL << v16) - 1) & v15 | (v17 << v16);
      unint64_t v13 = *(void *)(v13 + 24 + 24 * v17);
      swift_unknownObjectRetain();
      uint64_t result = (unint64_t *)swift_unknownObjectRelease();
      if (!*(_BYTE *)(v13 + 18))
      {
        unint64_t v24 = v15 & 0xFFFFFFFFFFFFF0FFLL;
        goto LABEL_35;
      }
    }
  }

  uint64_t result = (unint64_t *)swift_unknownObjectRetain_n();
  unint64_t v24 = 0LL;
  unint64_t v13 = v7;
LABEL_35:
  unint64_t v25 = *(unsigned __int16 *)(v13 + 16);
  if (*(_WORD *)(v13 + 16))
  {
    uint64_t v26 = *(void *)(v13 + 24);
    uint64_t v19 = __OFSUB__(v8, v26);
    CFIndex v27 = v8 - v26;
    if (v19)
    {
LABEL_65:
      __break(1u);
      goto LABEL_66;
    }

    if (__OFADD__(v27, 1LL))
    {
LABEL_66:
      __break(1u);
      goto LABEL_67;
    }

    if (v27 + 1 < 1)
    {
      unint64_t v25 = 0LL;
LABEL_48:
      swift_unknownObjectRelease();
      swift_unknownObjectRelease();
      int v12 = v24 | (v25 << 8);
      goto LABEL_14;
    }

    if ((_DWORD)v25 != 1)
    {
      uint64_t v28 = (uint64_t *)(v13 + 48);
      uint64_t v29 = 1LL;
      while (1)
      {
        uint64_t v30 = *v28;
        v28 += 3;
        int v8 = v27 - v30;
        if (__OFSUB__(v27, v30)) {
          goto LABEL_63;
        }
        if (__OFADD__(v8, 1LL)) {
          goto LABEL_64;
        }
        if (v8 + 1 < 1)
        {
          unint64_t v25 = v29;
          int v8 = v27;
          goto LABEL_48;
        }

        ++v29;
        CFIndex v27 = v8;
        if (v25 == v29) {
          goto LABEL_47;
        }
      }
    }

    int v8 = v27;
  }

    swift_unknownObjectRetain();
    uint64_t v28 = specialized Rope._Node.distanceFromStart<A>(to:in:)(v23, v212, v26, v11, v22);
    uint64_t result = swift_unknownObjectRelease_n();
    goto LABEL_54;
  }

  v216 = (uint64_t *)v22;
  v194 = v16;
  v198 = v23;
  uint64_t v29 = *(unsigned __int8 *)(v11 + 18);
  if (*(_BYTE *)(v11 + 18))
  {
    uint64_t result = swift_unknownObjectRetain_n();
    CFIndex v27 = v13;
    uint64_t v30 = v11;
    while (1)
    {
      unint64_t v33 = *(unsigned __int16 *)(v30 + 16);
      if (!*(_WORD *)(v30 + 16)) {
        break;
      }
      __int16 v34 = *(void *)(v30 + 40);
      unint64_t v35 = __OFSUB__(v27, v34);
      v36 = v27 - v34;
      if (v35) {
        goto LABEL_180;
      }
      if (__OFADD__(v36, 1LL)) {
        goto LABEL_181;
      }
      if (v36 + 1 < 1)
      {
        unint64_t v33 = 0LL;
        goto LABEL_23;
      }

      if ((_DWORD)v33 == 1)
      {
        CFIndex v27 = v36;
        break;
      }

      unint64_t v37 = (uint64_t *)(v30 + 64);
      unint64_t v38 = 1LL;
      while (1)
      {
        unint64_t v39 = *v37;
        v37 += 3;
        CFIndex v27 = v36 - v39;
        if (__OFSUB__(v36, v39))
        {
          __break(1u);
LABEL_176:
          __break(1u);
LABEL_177:
          __break(1u);
          goto LABEL_178;
        }

        if (__OFADD__(v27, 1LL)) {
          goto LABEL_176;
        }
        if (v27 + 1 < 1) {
          break;
        }
        ++v38;
        v36 = v27;
        if (v33 == v38) {
          goto LABEL_22;
        }
      }

      unint64_t v33 = v38;
      CFIndex v27 = v36;
LABEL_23:
      CFRange v31 = (4 * *(_BYTE *)(v30 + 18) + 8) & 0x3C;
      uint64_t v29 = ((-15LL << v31) - 1) & v29 | (v33 << v31);
      uint64_t v32 = *(void *)(v30 + 24 + 24 * v33);
      swift_unknownObjectRetain();
      uint64_t result = swift_unknownObjectRelease();
      uint64_t v30 = v32;
      if (!*(_BYTE *)(v32 + 18)) {
        goto LABEL_38;
      }
    }

  *(void *)(a3 + 4_Block_object_dispose(va, 8) = 0LL;
  uint64_t result = 0.0;
  *(_OWORD *)(a3 + 16) = 0u;
  *(_OWORD *)(a3 + 32) = 0u;
  *(_OWORD *)a3 = 0u;
  return result;
}

  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  if (!v38)
  {
LABEL_12:
    Hasher._combine(_:)(0);
    uint64_t v5 = v39;
    if (!v39) {
      goto LABEL_13;
    }
LABEL_20:
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    specialized Dictionary<>.hash(into:)((uint64_t)v53, v5);
    swift_bridgeObjectRelease();
    char v6 = v40;
    if (!v40) {
      goto LABEL_14;
    }
    goto LABEL_21;
  }

  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  unint64_t v7 = v38;
  if (v38) {
    goto LABEL_19;
  }
LABEL_13:
  Hasher._combine(_:)(0);
  int v8 = v39;
  if (!v39)
  {
LABEL_14:
    Hasher._combine(_:)(0);
    goto LABEL_21;
  }

  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  uint64_t v5 = v37;
  if (v37) {
    goto LABEL_19;
  }
LABEL_13:
  Hasher._combine(_:)(0);
  char v6 = v38;
  if (!v38)
  {
LABEL_14:
    Hasher._combine(_:)(0);
    goto LABEL_21;
  }

        uint64_t v19 = 512LL;
LABEL_22:
        if ((POSIXErrorCode.init(rawValue:)() & 0x100000000LL) == 0)
        {
          static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSPOSIXErrorDomain");
          unint64_t v21 = (int)POSIXErrorCode.rawValue.getter();
          uint64_t v22 = objc_allocWithZone((Class)&OBJC_CLASS___NSError);
          uint64_t v23 = String._bridgeToObjectiveCImpl()();
          swift_bridgeObjectRelease();
          BOOL v20 = objc_msgSend(v22, sel_initWithDomain_code_userInfo_, v23, v21, _NativeDictionary.bridged()());
          swift_unknownObjectRelease();
          swift_unknownObjectRelease();
          unint64_t v24 = objc_msgSend(v20, sel_domain);
          unint64_t v25 = static String._unconditionallyBridgeFromObjectiveC(_:)(v24);
          CFIndex v27 = v26;

          if (v25 == static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSPOSIXErrorDomain") && v27 == v28)
          {
            swift_bridgeObjectRelease_n();
            goto LABEL_27;
          }

          uint64_t v29 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if ((v29 & 1) != 0) {
            goto LABEL_27;
          }
          __break(1u);
        }

        _StringGuts.grow(_:)(22LL);
        swift_bridgeObjectRelease();
        v31[0] = 0xD000000000000014LL;
        v31[1] = 0x80000001839C9190LL;
        v30._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
        String.append(_:)(v30);
        swift_bridgeObjectRelease();
        _assertionFailure(_:_:file:line:flags:)();
        __break(1u);
        JUMPOUT(0x183224054LL);
    }
  }

  return result;
}

    dispatch thunk of BinaryInteger._lowWord.getter();
    v29(v32, a2);
LABEL_20:
    unint64_t v38 = dispatch thunk of BinaryInteger._lowWord.getter();
    v29(v26, a2);
    return v38;
  }

  if (v34 <= 64) {
    goto LABEL_18;
  }
  lazy protocol witness table accessor for type Int and conformance Int();
LABEL_19:
  v36 = v54;
  dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
  unint64_t v37 = dispatch thunk of static Comparable.< infix(_:_:)();
  v29(v36, a2);
  v29(v32, a2);
  if ((v37 & 1) == 0) {
    goto LABEL_20;
  }
  __break(1u);
LABEL_32:
  uint64_t result = ((uint64_t (*)(char *, uint64_t))v29)(v36, a2);
  __break(1u);
  return result;
}

  swift_bridgeObjectRelease();
}

  swift_release();
LABEL_19:

  if (!*(void *)(v6 + 16)) {
    goto LABEL_23;
  }
LABEL_20:
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<AnyHashable, Any>);
  v36 = static _DictionaryStorage.allocate(capacity:)();
LABEL_24:
  v65 = v6 + 64;
  unint64_t v37 = -1LL << *(_BYTE *)(v6 + 32);
  if (-v37 < 64) {
    unint64_t v38 = ~(-1LL << -(char)v37);
  }
  else {
    unint64_t v38 = -1LL;
  }
  unint64_t v39 = v38 & *(void *)(v6 + 64);
  v66 = (unint64_t)(63 - v37) >> 6;
  uint64_t v40 = v36 + 64;
  swift_bridgeObjectRetain();
  uint64_t result = swift_retain();
  unint64_t v41 = 0LL;
  while (1)
  {
    if (v39)
    {
      int v44 = __clz(__rbit64(v39));
      v39 &= v39 - 1;
      unint64_t v45 = v44 | (v41 << 6);
      goto LABEL_48;
    }

    unint64_t v46 = v41 + 1;
    if (__OFADD__(v41, 1LL))
    {
LABEL_66:
      __break(1u);
LABEL_67:
      __break(1u);
      goto LABEL_68;
    }

    if (v46 >= v66) {
      goto LABEL_57;
    }
    unint64_t v47 = *(void *)(v65 + 8 * v46);
    unint64_t v48 = v41 + 1;
    if (!v47)
    {
      unint64_t v48 = v41 + 2;
      if (v41 + 2 >= v66) {
        goto LABEL_57;
      }
      unint64_t v47 = *(void *)(v65 + 8 * v48);
      if (!v47)
      {
        unint64_t v48 = v41 + 3;
        if (v41 + 3 >= v66) {
          goto LABEL_57;
        }
        unint64_t v47 = *(void *)(v65 + 8 * v48);
        if (!v47)
        {
          unint64_t v48 = v41 + 4;
          if (v41 + 4 >= v66) {
            goto LABEL_57;
          }
          unint64_t v47 = *(void *)(v65 + 8 * v48);
          if (!v47) {
            break;
          }
        }
      }
    }

  swift_release();
LABEL_19:

  if (!*(void *)(v5 + 16)) {
    goto LABEL_23;
  }
LABEL_20:
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<AnyHashable, Any>);
  unint64_t v35 = static _DictionaryStorage.allocate(capacity:)();
LABEL_24:
  v63 = v5 + 64;
  v36 = -1LL << *(_BYTE *)(v5 + 32);
  if (-v36 < 64) {
    unint64_t v37 = ~(-1LL << -(char)v36);
  }
  else {
    unint64_t v37 = -1LL;
  }
  unint64_t v38 = v37 & *(void *)(v5 + 64);
  v64 = (unint64_t)(63 - v36) >> 6;
  unint64_t v39 = v35 + 64;
  swift_bridgeObjectRetain();
  uint64_t result = swift_retain();
  uint64_t v40 = 0LL;
  while (1)
  {
    if (v38)
    {
      unint64_t v43 = __clz(__rbit64(v38));
      v38 &= v38 - 1;
      int v44 = v43 | (v40 << 6);
      goto LABEL_48;
    }

    unint64_t v45 = v40 + 1;
    if (__OFADD__(v40, 1LL))
    {
LABEL_67:
      __break(1u);
LABEL_68:
      __break(1u);
      goto LABEL_69;
    }

    if (v45 >= v64) {
      goto LABEL_57;
    }
    unint64_t v46 = *(void *)(v63 + 8 * v45);
    unint64_t v47 = v40 + 1;
    if (!v46)
    {
      unint64_t v47 = v40 + 2;
      if (v40 + 2 >= v64) {
        goto LABEL_57;
      }
      unint64_t v46 = *(void *)(v63 + 8 * v47);
      if (!v46)
      {
        unint64_t v47 = v40 + 3;
        if (v40 + 3 >= v64) {
          goto LABEL_57;
        }
        unint64_t v46 = *(void *)(v63 + 8 * v47);
        if (!v46)
        {
          unint64_t v47 = v40 + 4;
          if (v40 + 4 >= v64) {
            goto LABEL_57;
          }
          unint64_t v46 = *(void *)(v63 + 8 * v47);
          if (!v46) {
            break;
          }
        }
      }
    }

  swift_release();
LABEL_19:

  if (!*(void *)(v5 + 16)) {
    goto LABEL_23;
  }
LABEL_20:
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<AnyHashable, Any>);
  unint64_t v35 = static _DictionaryStorage.allocate(capacity:)();
LABEL_24:
  v63 = v5 + 64;
  v36 = -1LL << *(_BYTE *)(v5 + 32);
  if (-v36 < 64) {
    unint64_t v37 = ~(-1LL << -(char)v36);
  }
  else {
    unint64_t v37 = -1LL;
  }
  unint64_t v38 = v37 & *(void *)(v5 + 64);
  v64 = (unint64_t)(63 - v36) >> 6;
  unint64_t v39 = v35 + 64;
  swift_bridgeObjectRetain();
  uint64_t result = swift_retain();
  uint64_t v40 = 0LL;
  while (1)
  {
    if (v38)
    {
      unint64_t v43 = __clz(__rbit64(v38));
      v38 &= v38 - 1;
      int v44 = v43 | (v40 << 6);
      goto LABEL_48;
    }

    unint64_t v45 = v40 + 1;
    if (__OFADD__(v40, 1LL))
    {
LABEL_65:
      __break(1u);
LABEL_66:
      __break(1u);
      goto LABEL_67;
    }

    if (v45 >= v64) {
      goto LABEL_57;
    }
    unint64_t v46 = *(void *)(v63 + 8 * v45);
    unint64_t v47 = v40 + 1;
    if (!v46)
    {
      unint64_t v47 = v40 + 2;
      if (v40 + 2 >= v64) {
        goto LABEL_57;
      }
      unint64_t v46 = *(void *)(v63 + 8 * v47);
      if (!v46)
      {
        unint64_t v47 = v40 + 3;
        if (v40 + 3 >= v64) {
          goto LABEL_57;
        }
        unint64_t v46 = *(void *)(v63 + 8 * v47);
        if (!v46)
        {
          unint64_t v47 = v40 + 4;
          if (v40 + 4 >= v64) {
            goto LABEL_57;
          }
          unint64_t v46 = *(void *)(v63 + 8 * v47);
          if (!v46) {
            break;
          }
        }
      }
    }

  swift_release();
LABEL_19:

  if (!*(void *)(v6 + 16)) {
    goto LABEL_23;
  }
LABEL_20:
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<AnyHashable, Any>);
  v36 = static _DictionaryStorage.allocate(capacity:)();
LABEL_24:
  v65 = v6 + 64;
  unint64_t v37 = -1LL << *(_BYTE *)(v6 + 32);
  if (-v37 < 64) {
    unint64_t v38 = ~(-1LL << -(char)v37);
  }
  else {
    unint64_t v38 = -1LL;
  }
  unint64_t v39 = v38 & *(void *)(v6 + 64);
  v66 = (unint64_t)(63 - v37) >> 6;
  uint64_t v40 = v36 + 64;
  swift_bridgeObjectRetain();
  uint64_t result = swift_retain();
  unint64_t v41 = 0LL;
  while (1)
  {
    if (v39)
    {
      int v44 = __clz(__rbit64(v39));
      v39 &= v39 - 1;
      unint64_t v45 = v44 | (v41 << 6);
      goto LABEL_48;
    }

    unint64_t v46 = v41 + 1;
    if (__OFADD__(v41, 1LL))
    {
LABEL_66:
      __break(1u);
LABEL_67:
      __break(1u);
      goto LABEL_68;
    }

    if (v46 >= v66) {
      goto LABEL_57;
    }
    unint64_t v47 = *(void *)(v65 + 8 * v46);
    unint64_t v48 = v41 + 1;
    if (!v47)
    {
      unint64_t v48 = v41 + 2;
      if (v41 + 2 >= v66) {
        goto LABEL_57;
      }
      unint64_t v47 = *(void *)(v65 + 8 * v48);
      if (!v47)
      {
        unint64_t v48 = v41 + 3;
        if (v41 + 3 >= v66) {
          goto LABEL_57;
        }
        unint64_t v47 = *(void *)(v65 + 8 * v48);
        if (!v47)
        {
          unint64_t v48 = v41 + 4;
          if (v41 + 4 >= v66) {
            goto LABEL_57;
          }
          unint64_t v47 = *(void *)(v65 + 8 * v48);
          if (!v47) {
            break;
          }
        }
      }
    }

    uint64_t v40 = 0LL;
    unint64_t v41 = 1;
    goto LABEL_19;
  }

  uint64_t v19 = String.subscript.getter();
  uint64_t v23 = v22;
  if (!((v19 ^ v20) >> 14))
  {
    swift_bridgeObjectRelease();
    goto LABEL_14;
  }

  unint64_t v24 = v19;
  unint64_t v25 = v20;
  uint64_t v26 = v21;
  CFIndex v27 = _ss5SliceV32withContiguousStorageIfAvailableyqd__Sgqd__SRy7ElementQzGKXEKlFSRyxGq_s5Error_pRi_zRi0_zRi__Ri0__r0_lys5UInt8Vqd__Isgyrzo_ABySS8UTF8ViewVGADsAI_pAMRszr__lIetMggrzo_Tpq5SuSg_Tg5061_ss17FixedWidthIntegerPsE_5radixxSgqd___SitcSyRd__lufcADSRys5I15VGXEfU_Su_SsTG5SiTf1cn_n( v19,  v20,  v21,  v22,  10LL);
  if ((v28 & 0x100) != 0)
  {
    uint64_t v29 = specialized _parseInteger<A, B>(ascii:radix:)(v24, v25, v26, v23, 10LL);
    unint64_t v43 = v42;
    swift_bridgeObjectRelease();
    if ((v43 & 1) != 0) {
      goto LABEL_14;
    }
  }

  else
  {
    uint64_t v29 = v27;
    uint64_t v30 = v28;
    swift_bridgeObjectRelease();
    if ((v30 & 1) != 0) {
      goto LABEL_14;
    }
  }

  if (!HIDWORD(v29))
  {
    if (CFStringIsEncodingAvailable(v29))
    {
      uint64_t v40 = CFStringConvertEncodingToNSStringEncoding(v29);
      swift_bridgeObjectRelease();
      unint64_t v41 = 0;
      goto LABEL_19;
    }

    goto LABEL_14;
  }

  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

  unint64_t v3 = 0;
  CFStringRef v14 = (unsigned __int16)(value | (unsigned __int16)(*(_WORD *)&v7 << 8)) | (v9 << 16) | (v10 << 24);
  CFIndex v15 = *(unsigned __int8 *)(v0 + 64);
  uint64_t v16 = (v15 & 1) != 0 || v15 == 2;
  uint64_t v17 = bswap32(v14);
  if (v16) {
    CFStringRef v14 = v17;
  }
  return v14 | ((unint64_t)v3 << 32);
}

      MEMORY[0x1895F8858](v20);
      *((_BYTE *)&v66 - 16) = v36;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for String?);
      unint64_t v37 = v67;
      dispatch thunk of Sequence.withContiguousStorageIfAvailable<A>(_:)();
      if (v70 < 2)
      {
        (*(void (**)(char *, uint64_t, uint64_t))(v66 + 16))(v9, v37, a3);
        v9[*(int *)(v7 + 36)] = v36;
        MEMORY[0x186E20D4C](&protocol conformance descriptor for UTF32EndianAdaptor<A>, v7);
        unint64_t v38 = specialized String.init<A, B>(_validating:as:)((uint64_t)v9, v7);
        if (!v39) {
          return 0LL;
        }
        return v38;
      }

      return v69;
    }

    if (v24 != 2415919360LL)
    {
      if (v24 != 2483028224LL) {
        goto LABEL_34;
      }
      v36 = 0;
    }

  unint64_t v21 = *(void *)(v2 + 112);
  uint64_t v22 = swift_getObjectType();
  uint64_t v23 = *(void (**)(void *__return_ptr, uint64_t, uint64_t))(v21 + 464);
  swift_unknownObjectRetain();
  v23(v29, v22, v21);
  swift_unknownObjectRelease();
  outlined init with take of LocalePreferences?( (uint64_t)v29,  (uint64_t)v30,  (uint64_t *)&demangling cache variable for type metadata for LocalePreferences?);
  outlined init with take of LocalePreferences?( (uint64_t)v30,  (uint64_t)v31,  (uint64_t *)&demangling cache variable for type metadata for LocalePreferences?);
  unint64_t v24 = v33;
  swift_bridgeObjectRetain();
  outlined release of LocalePreferences?((uint64_t)v30);
  if (!v24) {
    goto LABEL_24;
  }
  if (!*(void *)(v24 + 16) || (unint64_t v25 = specialized __RawDictionaryStorage.find<A>(_:)(v5), (v26 & 1) == 0))
  {
    swift_bridgeObjectRelease();
    goto LABEL_24;
  }

  CFIndex v27 = *(void *)(*(void *)(v24 + 56) + 8 * v25);
  swift_bridgeObjectRelease();
  Hasher._combine(_:)(1u);
  Hasher._combine(_:)(v27);
LABEL_25:
  swift_retain();
  os_unfair_lock_unlock(v4 + 4);
  return swift_release();
}

    unint64_t v7 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  v7[2] + 1LL,  1,  v7);
    goto LABEL_12;
  }

  unint64_t v10 = a3 + 24;
  if (!*(_BYTE *)(a3 + 18))
  {
    uint64_t v29 = (uint64_t *)(v10 + 24 * a1);
    uint64_t v30 = *v29;
    CFRange v31 = v29[1];
    uint64_t v32 = v29[2];
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain_n();
    specialized Rope.Builder._insertAfterTip(_:)(v30, v31, v32);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_unknownObjectRelease();
  }

  char v11 = (uint64_t *)(v10 + 24 * a1);
  int v12 = *v11;
  unint64_t v13 = v11[1];
  CFStringRef v14 = v11[2];
  unint64_t v37 = 0LL;
  swift_unknownObjectRetain_n();
  MEMORY[0x186E20E78](&v37, 8LL);
  CFIndex v15 = v37;
  uint64_t v16 = *(void **)(v3 + 80);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v16 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  v16[2] + 1LL,  1,  v16);
  }
  uint64_t v17 = v16[2];
  uint64_t v18 = v16[3];
  uint64_t v19 = v17 + 1;
  if (v17 >= v18 >> 1)
  {
    __int16 v34 = v16;
    unint64_t v35 = v16[2];
    v36 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (void *)(v18 > 1),  v17 + 1,  1,  v34);
    uint64_t v17 = v35;
    uint64_t v16 = v36;
  }

  unint64_t v16[2] = v19;
  BOOL v20 = &v16[4 * v17];
  v20[4] = v12;
  v20[5] = v13;
  v20[6] = v14;
  v20[7] = v15;
  swift_unknownObjectRelease();
  uint64_t result = swift_unknownObjectRelease();
  *(void *)(v3 + 80) = v16;
  return result;
}

  __break(1u);
LABEL_19:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

    if (v14) {
      goto LABEL_55;
    }
LABEL_19:
    uint64_t v18 = (4 * *(_BYTE *)(v13 + 18) + 8) & 0x3C;
    uint64_t v17 = ((-15LL << v18) - 1) & v17 | (v19 << v18);
    unint64_t v13 = *(void *)(v13 + 24 + 24 * v19);
    swift_unknownObjectRetain();
    uint64_t result = (void *)swift_unknownObjectRelease();
  }

  while (*(_BYTE *)(v13 + 18));
  int v8 = v17 & 0xFFFFFFFFFFFFF0FFLL;
  uint64_t v26 = *(unsigned __int16 *)(v13 + 16);
  if (*(_WORD *)(v13 + 16)) {
    goto LABEL_36;
  }
LABEL_47:
  if (!v14)
  {
    while (1)
    {
LABEL_48:
      swift_unknownObjectRelease();
      uint64_t result = (void *)swift_unknownObjectRelease();
      char v11 = v8 | (v26 << 8);
      unint64_t v7 = v30;
      int v8 = v31;
      if (v4)
      {
LABEL_13:
        swift_unknownObjectRetain();
        CFIndex v15 = specialized Rope._Node.distanceFromStart<A>(to:in:)(v8, v11, v13, v4, v7);
        uint64_t result = (void *)swift_unknownObjectRelease_n();
        uint64_t v16 = a2 - v14;
        if (!__OFSUB__(a2, v14)) {
          goto LABEL_14;
        }
      }

      else
      {
LABEL_49:
        CFIndex v15 = 0LL;
        uint64_t v16 = a2 - v14;
        if (!__OFSUB__(a2, v14))
        {
LABEL_14:
          *a3 = v8;
          a3[1] = v11;
          a3[2] = v13;
          a3[3] = v15;
          a3[4] = v16;
          return result;
        }
      }

      __break(1u);
LABEL_52:
      uint64_t v26 = v12;
      CFStringRef v14 = v16;
    }
  }

  swift_release();
LABEL_19:

  if (!*(void *)(v5 + 16)) {
    goto LABEL_23;
  }
LABEL_20:
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<AnyHashable, Any>);
  unint64_t v35 = static _DictionaryStorage.allocate(capacity:)();
LABEL_24:
  v63 = v5 + 64;
  v36 = -1LL << *(_BYTE *)(v5 + 32);
  if (-v36 < 64) {
    unint64_t v37 = ~(-1LL << -(char)v36);
  }
  else {
    unint64_t v37 = -1LL;
  }
  unint64_t v38 = v37 & *(void *)(v5 + 64);
  v64 = (unint64_t)(63 - v36) >> 6;
  unint64_t v39 = v35 + 64;
  swift_bridgeObjectRetain();
  uint64_t result = swift_retain();
  uint64_t v40 = 0LL;
  while (1)
  {
    if (v38)
    {
      unint64_t v43 = __clz(__rbit64(v38));
      v38 &= v38 - 1;
      int v44 = v43 | (v40 << 6);
      goto LABEL_48;
    }

    unint64_t v45 = v40 + 1;
    if (__OFADD__(v40, 1LL))
    {
LABEL_67:
      __break(1u);
LABEL_68:
      __break(1u);
      goto LABEL_69;
    }

    if (v45 >= v64) {
      goto LABEL_57;
    }
    unint64_t v46 = *(void *)(v63 + 8 * v45);
    unint64_t v47 = v40 + 1;
    if (!v46)
    {
      unint64_t v47 = v40 + 2;
      if (v40 + 2 >= v64) {
        goto LABEL_57;
      }
      unint64_t v46 = *(void *)(v63 + 8 * v47);
      if (!v46)
      {
        unint64_t v47 = v40 + 3;
        if (v40 + 3 >= v64) {
          goto LABEL_57;
        }
        unint64_t v46 = *(void *)(v63 + 8 * v47);
        if (!v46)
        {
          unint64_t v47 = v40 + 4;
          if (v40 + 4 >= v64) {
            goto LABEL_57;
          }
          unint64_t v46 = *(void *)(v63 + 8 * v47);
          if (!v46) {
            break;
          }
        }
      }
    }

  swift_release();
LABEL_19:

  if (!*(void *)(v6 + 16)) {
    goto LABEL_23;
  }
LABEL_20:
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<AnyHashable, Any>);
  v36 = static _DictionaryStorage.allocate(capacity:)();
LABEL_24:
  v66 = v6 + 64;
  unint64_t v37 = -1LL << *(_BYTE *)(v6 + 32);
  if (-v37 < 64) {
    unint64_t v38 = ~(-1LL << -(char)v37);
  }
  else {
    unint64_t v38 = -1LL;
  }
  unint64_t v39 = v38 & *(void *)(v6 + 64);
  v67 = (unint64_t)(63 - v37) >> 6;
  uint64_t v40 = v36 + 64;
  swift_bridgeObjectRetain();
  swift_retain();
  unint64_t v41 = 0LL;
  while (1)
  {
    if (v39)
    {
      int v44 = __clz(__rbit64(v39));
      v39 &= v39 - 1;
      unint64_t v45 = v44 | (v41 << 6);
      goto LABEL_48;
    }

    unint64_t v46 = v41 + 1;
    if (__OFADD__(v41, 1LL))
    {
LABEL_66:
      __break(1u);
LABEL_67:
      __break(1u);
      goto LABEL_68;
    }

    if (v46 >= v67) {
      goto LABEL_57;
    }
    unint64_t v47 = *(void *)(v66 + 8 * v46);
    unint64_t v48 = v41 + 1;
    if (!v47)
    {
      unint64_t v48 = v41 + 2;
      if (v41 + 2 >= v67) {
        goto LABEL_57;
      }
      unint64_t v47 = *(void *)(v66 + 8 * v48);
      if (!v47)
      {
        unint64_t v48 = v41 + 3;
        if (v41 + 3 >= v67) {
          goto LABEL_57;
        }
        unint64_t v47 = *(void *)(v66 + 8 * v48);
        if (!v47)
        {
          unint64_t v48 = v41 + 4;
          if (v41 + 4 >= v67) {
            goto LABEL_57;
          }
          unint64_t v47 = *(void *)(v66 + 8 * v48);
          if (!v47) {
            break;
          }
        }
      }
    }

  swift_release();
LABEL_19:

  if (!*(void *)(v5 + 16)) {
    goto LABEL_23;
  }
LABEL_20:
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<AnyHashable, Any>);
  unint64_t v35 = static _DictionaryStorage.allocate(capacity:)();
LABEL_24:
  v63 = v5 + 64;
  v36 = -1LL << *(_BYTE *)(v5 + 32);
  if (-v36 < 64) {
    unint64_t v37 = ~(-1LL << -(char)v36);
  }
  else {
    unint64_t v37 = -1LL;
  }
  unint64_t v38 = v37 & *(void *)(v5 + 64);
  v64 = (unint64_t)(63 - v36) >> 6;
  unint64_t v39 = v35 + 64;
  swift_bridgeObjectRetain();
  uint64_t result = swift_retain();
  uint64_t v40 = 0LL;
  while (1)
  {
    if (v38)
    {
      unint64_t v43 = __clz(__rbit64(v38));
      v38 &= v38 - 1;
      int v44 = v43 | (v40 << 6);
      goto LABEL_48;
    }

    unint64_t v45 = v40 + 1;
    if (__OFADD__(v40, 1LL))
    {
LABEL_67:
      __break(1u);
LABEL_68:
      __break(1u);
      goto LABEL_69;
    }

    if (v45 >= v64) {
      goto LABEL_57;
    }
    unint64_t v46 = *(void *)(v63 + 8 * v45);
    unint64_t v47 = v40 + 1;
    if (!v46)
    {
      unint64_t v47 = v40 + 2;
      if (v40 + 2 >= v64) {
        goto LABEL_57;
      }
      unint64_t v46 = *(void *)(v63 + 8 * v47);
      if (!v46)
      {
        unint64_t v47 = v40 + 3;
        if (v40 + 3 >= v64) {
          goto LABEL_57;
        }
        unint64_t v46 = *(void *)(v63 + 8 * v47);
        if (!v46)
        {
          unint64_t v47 = v40 + 4;
          if (v40 + 4 >= v64) {
            goto LABEL_57;
          }
          unint64_t v46 = *(void *)(v63 + 8 * v47);
          if (!v46) {
            break;
          }
        }
      }
    }

  swift_release();
LABEL_19:

  if (!*(void *)(v6 + 16)) {
    goto LABEL_23;
  }
LABEL_20:
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<AnyHashable, Any>);
  v36 = static _DictionaryStorage.allocate(capacity:)();
LABEL_24:
  v65 = v6 + 64;
  unint64_t v37 = -1LL << *(_BYTE *)(v6 + 32);
  if (-v37 < 64) {
    unint64_t v38 = ~(-1LL << -(char)v37);
  }
  else {
    unint64_t v38 = -1LL;
  }
  unint64_t v39 = v38 & *(void *)(v6 + 64);
  v66 = (unint64_t)(63 - v37) >> 6;
  uint64_t v40 = v36 + 64;
  swift_bridgeObjectRetain();
  uint64_t result = swift_retain();
  unint64_t v41 = 0LL;
  while (1)
  {
    if (v39)
    {
      int v44 = __clz(__rbit64(v39));
      v39 &= v39 - 1;
      unint64_t v45 = v44 | (v41 << 6);
      goto LABEL_48;
    }

    unint64_t v46 = v41 + 1;
    if (__OFADD__(v41, 1LL))
    {
LABEL_66:
      __break(1u);
LABEL_67:
      __break(1u);
      goto LABEL_68;
    }

    if (v46 >= v66) {
      goto LABEL_57;
    }
    unint64_t v47 = *(void *)(v65 + 8 * v46);
    unint64_t v48 = v41 + 1;
    if (!v47)
    {
      unint64_t v48 = v41 + 2;
      if (v41 + 2 >= v66) {
        goto LABEL_57;
      }
      unint64_t v47 = *(void *)(v65 + 8 * v48);
      if (!v47)
      {
        unint64_t v48 = v41 + 3;
        if (v41 + 3 >= v66) {
          goto LABEL_57;
        }
        unint64_t v47 = *(void *)(v65 + 8 * v48);
        if (!v47)
        {
          unint64_t v48 = v41 + 4;
          if (v41 + 4 >= v66) {
            goto LABEL_57;
          }
          unint64_t v47 = *(void *)(v65 + 8 * v48);
          if (!v47) {
            break;
          }
        }
      }
    }

  uint64_t result = append #1 (_:zeroPad:buffer:) in closure #1 in Date.ISO8601FormatStyle.format(_:appendingTimeZoneOffset:)( v19,  4LL,  &v69,  48);
  *a5 = 1;
  LOBYTE(v15) = v14;
  if (!v14) {
    LOBYTE(v15) = 59;
  }
LABEL_20:
  unint64_t v21 = v102;
  if ((v15 & 2) == 0) {
    goto LABEL_30;
  }
  if (*a5 == 1)
  {
    if ((v10[3] & 1) != 0)
    {
      uint64_t v22 = _stringCompareWithSmolCheck(_:_:expecting:)();
      uint64_t result = swift_bridgeObjectRelease();
      if ((v22 & 1) == 0) {
        goto LABEL_28;
      }
    }

    else
    {
      uint64_t result = swift_bridgeObjectRelease();
    }

    uint64_t v23 = v71;
    if (v71 >= v70)
    {
LABEL_130:
      __break(1u);
      goto LABEL_131;
    }

    *(_BYTE *)(v69 + v71) = 45;
    v71 = v23 + 1;
  }

    __break(1u);
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }

  if ((a2 & 0x2000000000000000LL) == 0)
  {
    if ((a1 & 0x1000000000000000LL) != 0)
    {
      unint64_t v7 = (char *)((a2 & 0xFFFFFFFFFFFFFFFLL) + 32);
      int v8 = a1 & 0xFFFFFFFFFFFFLL;
    }

    else
    {
      unint64_t v7 = (char *)_StringObject.sharedUTF8.getter();
    }

    return specialized closure #1 in UnsafeMutableBufferPointer.initialize<A>(fromContentsOf:)(v7, v8, __dst, a4);
  }

  BOOL v9 = HIBYTE(a2) & 0xF;
  __src[0] = a1;
  __src[1] = a2 & 0xFFFFFFFFFFFFFFLL;
  if (!v9) {
    return v9;
  }
  if (v9 > a4)
  {
    __break(1u);
    goto LABEL_18;
  }

  if (!__dst) {
    return v9;
  }
  if (__src >= (void *)&__dst[v9] || (char *)__src + v9 <= __dst)
  {
    memcpy(__dst, __src, HIBYTE(a2) & 0xF);
    return v9;
  }

        __break(1u);
LABEL_19:
        __break(1u);
        goto LABEL_20;
      }

  __break(1u);
}

  (*(void (**)(char *, uint64_t))(v24 + 8))(v26, v42);
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v48);
}

  swift_bridgeObjectRelease();
  if (String.count.getter() != 1)
  {
    if (String.count.getter() == 2)
    {
      char v11 = 1LL;
      goto LABEL_28;
    }

  Hasher._combine(_:)(0);
LABEL_19:
  if (v26 == 7)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    Hasher._combine(_:)(1u);
    String.hash(into:)();
    swift_bridgeObjectRelease();
  }

  char v11 = v10;
  if (v27 == 4)
  {
    Hasher._combine(_:)(0);
    if (v33) {
      goto LABEL_24;
    }
  }

  else
  {
    Hasher._combine(_:)(1u);
    String.hash(into:)();
    swift_bridgeObjectRelease();
    if (v33)
    {
LABEL_24:
      Hasher._combine(_:)(1u);
      outlined copy of Locale.LanguageCode?(v18, v33);
      swift_bridgeObjectRetain();
      String.hash(into:)();
      swift_bridgeObjectRelease();
      outlined consume of Locale.LanguageCode?(v18, v33);
      int v12 = v34;
      if (v34) {
        goto LABEL_25;
      }
      goto LABEL_31;
    }
  }

  Hasher._combine(_:)(0);
  int v12 = v34;
  if (v34)
  {
LABEL_25:
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    String.hash(into:)();
    outlined consume of Locale.LanguageCode?(v19, v12);
    if (v28) {
      goto LABEL_26;
    }
    goto LABEL_32;
  }

      uint64_t result = swift_isUniquelyReferenced_nonNull_native();
      if ((result & 1) == 0) {
        uint64_t result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)( 0,  *(void *)(v6 + 16) + 1LL,  1);
      }
      CFIndex v15 = *(void *)(v6 + 16);
      CFStringRef v14 = *(void *)(v6 + 24);
      if (v15 >= v14 >> 1) {
        uint64_t result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)( v14 > 1,  v15 + 1,  1);
      }
      *(void *)(v6 + 16) = v15 + 1;
      *(_BYTE *)(v6 + v15 + 32) = v8;
      if (v3 == v2) {
        return v6;
      }
    }
  }

  return MEMORY[0x18961AFE8];
}

  if (v11 != a3) {
    free((void *)v11);
  }
}

    [v6 appendString:@"w"];
    if (!self->_flags) {
      return v6;
    }
    goto LABEL_12;
  }

  if (v3 == 99)
  {
    uint64_t v4 = @"CONTAINS";
    goto LABEL_5;
  }

  objc_exception_throw((id)[MEMORY[0x189603F70] exceptionWithName:*MEMORY[0x189603A58], +[NSString stringWithFormat:]( NSString, "stringWithFormat:", @"In operator with invalid type %lu", v3), 0 reason userInfo]);
  return (id)-[NSInPredicateOperator flags](v9, v10);
}

  if (location < a3)
  {
    CFStringRef v14 = +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"Index %ld out of range bounds [0...%ld]",  a3,  location);
    objc_exception_throw((id)[MEMORY[0x189603F70] exceptionWithName:*MEMORY[0x189603A60] reason:v14 userInfo:0]);
    -[NSMutableIndexSet _replaceRangeInArrayAtIndex:withRange:](v15, v16, v17, v18);
  }

  else if ((*(_BYTE *)&self->super._indexSetFlags & 1) != 0)
  {
    self->super._internal._singleRange._range.length = 0LL;
  }

  else
  {
    BOOL v9 = self->super._internal._singleRange._range.location;
    unint64_t v10 = *(void *)(v9 + 24);
    char v11 = (void *)(v9 + 16 * v10 + 64);
    int v12 = v11[2 * a3 + 1];
    unint64_t v13 = *(void *)(v9 + 8) + ~a3;
    if (v13 <= a3)
    {
      if (v13) {
        memmove(&v11[2 * a3], &v11[2 * a3 + 2], 16 * v13);
      }
    }

    else
    {
      if (a3)
      {
        memmove((void *)(v9 + 16 * v10 + 80), v11, 16 * a3);
        BOOL v9 = self->super._internal._singleRange._range.location;
        unint64_t v10 = *(void *)(v9 + 24);
      }

      *(void *)(v9 + 24) = v10 + 1;
    }

    atomic_store(0LL, (unint64_t *)(self->super._internal._singleRange._range.location + 56));
    --*(void *)(self->super._internal._singleRange._range.location + 8);
    *(void *)(self->super._internal._singleRange._range.location + 16) -= v12;
  }

  BOOL v20 = +[NSPathStore2 pathStoreWithCharacters:length:]( &OBJC_CLASS___NSPathStore2,  "pathStoreWithCharacters:length:",  v15);
  if (v12 >= 0x101) {
    free(v15);
  }
  if (v6 >= 0x101) {
    free(v9);
  }
  return v20;
}

    BOOL v20 = +[NSPathStore2 pathStoreWithCharacters:length:]( &OBJC_CLASS___NSPathStore2,  "pathStoreWithCharacters:length:",  v16,  v17);
  }

  else
  {
    uint64_t v19 = _NSMethodExceptionProem((objc_class *)self, a2);
    NSLog((NSString *)@"%@: cannot append extension '%@' to path '%@'", v19, str, self);
    BOOL v20 = 0LL;
  }

  if (v6 >= 0x101) {
    free(v10);
  }
  if (v13 >= 0x101) {
    free(v16);
  }
  return v20;
}

    *__error() = 63;
    goto LABEL_19;
  }

  unint64_t v10 = +[NSFileManager defaultManager](&OBJC_CLASS___NSFileManager, "defaultManager");
  char v11 = -[NSURL path]( -[NSFileManager URLForDirectory:inDomain:appropriateForURL:create:error:]( v10,  "URLForDirectory:inDomain:appropriateForURL:create:error:",  99,  1,  [MEMORY[0x189604030] fileURLWithPath:a1 isDirectory:0],  1,  __s),  "path");
  *a4 = v11;
  if (!v11)
  {
    if (a5) {
      *a5 = *(NSError **)__s;
    }
    return 0LL;
  }

  int v12 = (NSString *)objc_msgSend(v11, "stringByAppendingPathComponent:", objc_msgSend(a1, "lastPathComponent"));
  unint64_t v13 = _NSOpenFileDescriptor_Protected( (char *)-[NSString fileSystemRepresentation](v12, "fileSystemRepresentation"),  2562,  0,  438LL);
  if (v13 < 0)
  {
    if (a5)
    {
      uint64_t v28 = __error();
      *a5 = _NSErrorWithFilePathErrnoVariantAndExtraUserInfo(*v28, (uint64_t)a1, 0, 0LL, 0LL);
    }

    _NSCleanupTemporaryDirectory(*a4);
    *a4 = 0LL;
    return 0LL;
  }

  CFStringRef v14 = v13;
  if (a2) {
LABEL_5:
  }
    *a2 = v12;
LABEL_6:
  if (a3) {
    *a3 = v14;
  }
  else {
    close(v14);
  }
  return 1LL;
}

    uint64_t v17 = [a3 decodeObjectOfClass:objc_opt_class() forKey:@"NS.relative"];
    if (v17)
    {
      uint64_t v18 = (const __CFString *)v17;
      if (_NSIsNSString())
      {
        uint64_t v19 = [a3 decodeObjectOfClass:objc_opt_class() forKey:@"NS.base"];
        uint64_t result = -[objc_class initWithString:relativeToURL:](a1, "initWithString:relativeToURL:", v18, v19);
        if (result) {
          return result;
        }
        CFIndex v15 = v18;
        uint64_t v16 = (const __CFURL *)v19;
LABEL_22:
        uint64_t result = CFURLCreateWithString(0LL, v15, v16);
        if (result)
        {
LABEL_23:
          CFRelease(result);
          LODWORD(a1) = 1;
          goto LABEL_37;
        }

    _os_log_error_impl(&dword_182EB1000, v10, OS_LOG_TYPE_ERROR, v11, buf, 2u);
    if (!outError) {
      return 0;
    }
    goto LABEL_16;
  }

  *(void *)buf = 0LL;
  uint64_t v17 = buf;
  uint64_t v18 = 0x3052000000LL;
  uint64_t v19 = __Block_byref_object_copy__30;
  BOOL v20 = __Block_byref_object_dispose__30;
  unint64_t v21 = 0LL;
  uint64_t v5 = dispatch_semaphore_create(0LL);
  char v6 = (void *)-[GSAddition storage](self->_addition, "storage");
  v22[0] = self->_addition;
  unint64_t v7 = [MEMORY[0x189603F18] arrayWithObjects:v22 count:1];
  v15[0] = MEMORY[0x1895F87A8];
  v15[1] = 3221225472LL;
  v15[2] = __38__NSFileVersion_removeAndReturnError___block_invoke;
  v15[3] = &unk_189CA5750;
  v15[4] = v5;
  v15[5] = buf;
  [v6 removeAdditions:v7 completionHandler:v15];
  dispatch_semaphore_wait(v5, 0xFFFFFFFFFFFFFFFFLL);
  dispatch_release(v5);
  int v8 = (void *)*((void *)v17 + 5);
  BOOL v9 = v8 == 0LL;
  if (v8)
  {
    if (outError) {
      *outError = (NSError *)v8;
    }
    else {
  }
    }

  else
  {
    +[NSFileCoordinator __itemAtURL:didLoseVersionWithClientID:name:purposeID:]( &OBJC_CLASS___NSFileCoordinator,  "__itemAtURL:didLoseVersionWithClientID:name:purposeID:",  self->_fileURL,  -[GSAddition nameSpace](self->_addition, "nameSpace"),  -[GSAddition name](self->_addition, "name"),  0LL);
  }

  _Block_object_dispose(buf, 8);
  return v9;
}

id NSAllocateObject(Class aClass, NSUInteger extraBytes, NSZone *zone)
{
  id Instance = class_createInstance(aClass, extraBytes);
  if (Instance)
  {
    uint64_t v5 = Instance;
    if (*MEMORY[0x1896049A0])
    {
      object_getClassName(Instance);
      __CFSetLastAllocationEventName();
    }

    return v5;
  }

  else
  {
    unint64_t v7 = (void *)[MEMORY[0x189603F70] exceptionWithName:*MEMORY[0x189603B38], +[NSString stringWithFormat:]( NSString, "stringWithFormat:", @"*** NSAllocateObject(): attempt to allocate object of class '%s' failed", class_getName(aClass)), 0 reason userInfo];
    objc_exception_throw(v7);
    return -[NSConcreteData initWithBytes:length:copy:deallocator:](v8, v9, v10, v11, v12, v13);
  }

void NSKeyValueWillChangeWithPerThreadPendingNotifications( void *a1, uint64_t a2, int a3, void (*a4)(__int128 *__return_ptr, uint64_t, uint64_t, void, void, uint64_t, char *), uint64_t a5, uint64_t a6)
{
  void (*v29)(__int128 *__return_ptr, uint64_t, uint64_t, void, void, uint64_t, char *);
  uint64_t v30;
  CFArrayRef v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v29 = a4;
  uint64_t v30 = a5;
  uint64_t v27 = a2;
  __int16 v34 = *MEMORY[0x1895F89C0];
  os_unfair_recursive_lock_lock_with_options();
  uint64_t v9 = (uint64_t)_NSKeyValueRetainedObservationInfoForObject(a1, 0LL);
  uint64_t v10 = [a1 _implicitObservationInfo];
  uint64_t v11 = v10;
  if (v9)
  {
    uint64_t v10 = [*(id *)(v9 + 8) count];
    uint64_t v12 = v10;
  }

  else
  {
    uint64_t v12 = 0LL;
  }

  int v28 = a3;
  if (v11)
  {
    uint64_t v10 = [*(id *)(v11 + 8) count];
    uint64_t v13 = v10;
  }

  else
  {
    uint64_t v13 = 0LL;
  }

  uint64_t v14 = v13 + v12;
  MEMORY[0x1895F8858](v10);
  uint64_t v16 = (uint64_t *)((char *)&v27 - v15);
  if (v9) {
    _NSKeyValueObservationInfoGetObservances(v9, (uint64_t)&v27 - v15, v12);
  }
  if (v11) {
    _NSKeyValueObservationInfoGetObservances(v11, (uint64_t)&v16[v12], v13);
  }
  if (v14)
  {
    uint64_t v17 = (id **)v16;
    uint64_t v18 = v13 + v12;
    do
    {
      if (-[NSKeyValueObservance retainedObserver](*v17))
      {
        uint64_t v19 = *v17;
        if (*v17)
        {
          if (((_BYTE)v19[5] & 0x20) != 0) {
            uint64_t v19 = (id *)v19[4];
          }
          else {
            uint64_t v19 = 0LL;
          }
        }
      }

      else
      {
        uint64_t v19 = 0LL;
        *uint64_t v17 = 0LL;
      }

      BOOL v20 = v19;
      ++v17;
      --v18;
    }

    while (v18);
  }

  os_unfair_recursive_lock_unlock();
  if (v9 | v11)
  {
    uint64_t v21 = v27;
    uint64_t v22 = a6;
    uint64_t v23 = a6;
    int v24 = v28;
    CFRange v31 = (const __CFArray *)NSKVOCopyPendingNotificationStack(a1, v27, v23, v28, 1LL);
    uint64_t v32 = 1;
    unint64_t v33 = v9;
    if (v9) {
      NSKeyValueWillChange( (uint64_t)a1,  v21,  v24,  v16,  v12,  v29,  v30,  (void (*)(uint64_t, uint64_t, uint64_t, __int128 *, void, void, uint64_t))NSKeyValuePushPendingNotificationPerThread,  (uint64_t)&v31,  v22);
    }
    if (v11)
    {
      unint64_t v33 = 0LL;
      NSKeyValueWillChange( (uint64_t)a1,  v21,  v24,  &v16[v12],  v13,  v29,  v30,  (void (*)(uint64_t, uint64_t, uint64_t, __int128 *, void, void, uint64_t))NSKeyValuePushPendingNotificationPerThread,  (uint64_t)&v31,  v22);
    }

    if (!CFArrayGetCount(v31)) {
      NSKVOPendingNotificationStackRemove(a1, v21, v22, v24);
    }
    CFRelease(v31);
  }

  for (; v14; --v14)
  {
    if (!*v16) {
      goto LABEL_34;
    }
    BOOL isClass = object_isClass((id)*v16);
    uint64_t v26 = *v16;
    if (!isClass)
    {

      uint64_t v26 = *v16;
    }

    if (!v26) {
      goto LABEL_36;
    }
    if ((*(_BYTE *)(v26 + 40) & 0x20) != 0) {
      uint64_t v26 = *(void *)(v26 + 32);
    }
    else {
LABEL_34:
    }
      uint64_t v26 = 0LL;
LABEL_36:

    ++v16;
  }
}

void *_NSKeyValueRetainedObservationInfoForObject(void *a1, uint64_t a2)
{
  if (a2) {
    uint64_t v4 = (void *)(*(uint64_t (**)(void *, char *))(a2 + 16))(a1, sel_observationInfo);
  }
  else {
    uint64_t v4 = (void *)[a1 observationInfo];
  }
  uint64_t v5 = v4;
  id v6 = v4;
  os_unfair_lock_unlock(&NSKeyValueObservationInfoLock);
  return v5;
}

uint64_t allocateInitialCapacity(uint64_t *a1, uint64_t a2)
{
  uint64_t result = (*(uint64_t (**)(uint64_t))(a1[3] + 8))(a2);
  *a1 = result;
  if (!result)
  {
    objc_exception_throw((id)[MEMORY[0x189603F70] exceptionWithName:*MEMORY[0x189603B38] reason:@"*** NSHashTable unable to allocate memory -- allocation function failed" userInfo:0]);
    return allocateInitialCapacity_0();
  }

  return result;
}

uint64_t allocateInitialCapacity_0(uint64_t *a1, uint64_t a2)
{
  uint64_t result = (*(uint64_t (**)(uint64_t))(a1[3] + 8))(a2);
  *a1 = result;
  if (!result)
  {
    objc_exception_throw((id)[MEMORY[0x189603F70] exceptionWithName:*MEMORY[0x189603B38] reason:@"*** NSMapTable unable to allocate memory -- allocation function failed" userInfo:0]);
    return allocateInitialCapacity_1();
  }

  return result;
}

void *allocateInitialCapacity_1(void *a1, uint64_t a2)
{
  uint64_t result = (void *)(*(uint64_t (**)(uint64_t))(a1[3] + 8LL))(a2);
  *a1 = result;
  if (!result)
  {
    objc_exception_throw((id)[MEMORY[0x189603F70] exceptionWithName:*MEMORY[0x189603B38] reason:@"*** NSPointerArray unable to allocate memory -- allocation function failed" userInfo:0]);
    return allocateStorage(v4);
  }

  return result;
}

void *allocateStorage(size_t a1)
{
  if (a1 >> 61) {
    return 0LL;
  }
  else {
    return calloc(a1, 8uLL);
  }
}

uint64_t empty(uint64_t result, uint64_t a2)
{
  if (a2)
  {
    uint64_t v2 = a2;
    unint64_t v3 = (void *)result;
    uint64_t v4 = 0LL;
    do
    {
      uint64_t v5 = (*(uint64_t (**)(uint64_t, void))(v3[3] + 24LL))(*v3 + v4, 0LL);
      uint64_t v6 = v5;
      if (v5)
      {
        unint64_t v7 = *(void (**)(uint64_t, void))(v3[1] + 16LL);
        if (v7) {
          v7(v5, *(void *)(v3[2] + 8LL));
        }
      }

      (*(void (**)(uint64_t))(v3[3] + 48LL))(*v3 + v4);
      uint64_t result = (*(uint64_t (**)(uint64_t))(v3[3] + 32LL))(v6);
      v4 += 8LL;
      --v2;
    }

    while (v2);
  }

  return result;
}

uint64_t empty_0(uint64_t result, uint64_t a2)
{
  if (a2)
  {
    uint64_t v2 = a2;
    unint64_t v3 = (void *)result;
    uint64_t v4 = 0LL;
    do
    {
      uint64_t v5 = (*(uint64_t (**)(uint64_t, void))(v3[3] + 24LL))(*v3 + v4, 0LL);
      uint64_t v6 = v5;
      if (v5)
      {
        unint64_t v7 = *(void (**)(uint64_t, void))(v3[1] + 16LL);
        if (v7) {
          v7(v5, *(void *)(v3[2] + 8LL));
        }
      }

      (*(void (**)(uint64_t))(v3[3] + 32LL))(v6);
      uint64_t result = (*(uint64_t (**)(uint64_t))(v3[3] + 48LL))(*v3 + v4);
      v4 += 8LL;
      --v2;
    }

    while (v2);
  }

  return result;
}

void *clearPointerAt(void *result)
{
  *uint64_t result = 0LL;
  return result;
}

void NSKeyValueDidChangeWithPerThreadPendingNotifications( void *a1, uint64_t a2, char a3, void (*a4)(__int128 *__return_ptr, uint64_t, uint64_t, uint64_t, BOOL, uint64_t, _OWORD *), uint64_t a5)
{
  v13[3] = *MEMORY[0x1895F89C0];
  uint64_t v10 = (const __CFArray *)NSKVOCopyPendingNotificationStack(a1, a2, a5, a3, 0LL);
  if (v10)
  {
    uint64_t v11 = v10;
    if (CFArrayGetCount(v10) >= 1)
    {
      id v12 = a1;
      v13[0] = v11;
      v13[1] = 0LL;
      v13[2] = a5;
      NSKeyValueDidChange( (uint64_t)a1,  a2,  a3,  a4,  0LL,  (uint64_t (*)(uint64_t, uint64_t, uint64_t *, __int128 *, void *, CFTypeRef *, uint64_t))NSKeyValuePopPendingNotificationPerThread,  (uint64_t)v13);
      if (!CFArrayGetCount(v11)) {
        NSKVOPendingNotificationStackRemove(a1, a2, a5, a3);
      }
    }

    CFRelease(v11);
  }

CFTypeRef NSKVOCopyPendingNotificationStack(void *a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5)
{
  int v5 = a5;
  uint64_t v18 = *MEMORY[0x1895F89C0];
  if ((a4 & 1) != 0) {
    uint64_t v9 = NSKVOPendingPerThreadNotificationStack(a5);
  }
  else {
    uint64_t v9 = (const __CFDictionary *)[a1 _pendingChangeNotificationsArrayForKey:a2 create:a5];
  }
  uint64_t v10 = v9;
  if (!v9 || (v5 & 1) == 0 && CFDictionaryGetCount(v9) < 1) {
    return 0LL;
  }
  *(void *)&__int128 v16 = a1;
  *((void *)&v16 + 1) = a2;
  uint64_t v17 = a3;
  Value = CFDictionaryGetValue(v10, &v16);
  if (!Value)
  {
    if (v5)
    {
      Value = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x189604DD0], 0LL, &NSKVOPendingNotificationArrayCallbacks);
      id v12 = malloc(0x18uLL);
      *(_OWORD *)id v12 = v16;
      *((void *)v12 + 2) = v17;
      id v13 = *((id *)v12 + 1);
      id v14 = *((id *)v12 + 2);
      CFDictionarySetValue(v10, v12, Value);
      CFRelease(Value);
    }
  }

  if (Value) {
    return CFRetain(Value);
  }
  else {
    return 0LL;
  }
}

CFMutableDictionaryRef NSKVOPendingPerThreadNotificationStack(char a1)
{
  uint64_t v2 = (CFMutableDictionaryRef *)_CFGetTSD();
  if (!v2)
  {
    if ((a1 & 1) == 0) {
      return 0LL;
    }
    int v5 = malloc_default_zone();
    unint64_t v3 = (CFMutableDictionaryRef *)malloc_zone_calloc(v5, 1uLL, 0x58uLL);
    _CFSetTSD();
    CFMutableDictionaryRef result = *v3;
    if (*v3) {
      return result;
    }
LABEL_7:
    CFMutableDictionaryRef result = CFDictionaryCreateMutable( (CFAllocatorRef)*MEMORY[0x189604DD0],  0LL,  &NSKVOPendingNotificationStackIdentifierCallbacks,  MEMORY[0x189605250]);
    CFMutableDictionaryRef *v3 = result;
    return result;
  }

  unint64_t v3 = v2;
  CFMutableDictionaryRef result = *v2;
  if (!result && (a1 & 1) != 0) {
    goto LABEL_7;
  }
  return result;
}

CFTypeRef _NSDescriptionWithStringProxyFunc(void *a1, uint64_t a2, uint64_t a3, int a4, _BYTE *a5)
{
  if ((objc_opt_respondsToSelector() & 1) != 0)
  {
    if (a5) {
      *a5 = 1;
    }
    if (a4)
    {
      uint64_t v10 = (const void *)[a1 _dynamicContextEvaluation:a2 patternString:a3];
      if (v10) {
        return CFRetain(v10);
      }
    }
  }

  else if (a5)
  {
    *a5 = 0;
  }

  return 0LL;
}

CFTypeRef _NSDescriptionWithLocaleFunc(void *a1, uint64_t a2)
{
  if (a1)
  {
    if ((objc_opt_respondsToSelector() & 1) != 0) {
      uint64_t v4 = (const __CFString *)[a1 descriptionWithLocale:a2];
    }
    else {
      uint64_t v4 = (const __CFString *)[a1 description];
    }
  }

  else
  {
    uint64_t v4 = @"*nil*";
  }

  if (!v4) {
    uint64_t v4 = @"*nil description*";
  }
  return CFRetain(v4);
}

LABEL_26:
  uint64_t v15 = (void *)[MEMORY[0x189603F70] exceptionWithName:*MEMORY[0x189603A58], +[NSString stringWithFormat:]( NSString, "stringWithFormat:", @"%@: bad objCType: %s", _NSMethodExceptionProem((objc_class *)self, a2), -[NSValue objCType](self, "objCType")), 0 reason userInfo];
  objc_exception_throw(v15);
  return -[NSString initWithFormat:locale:](v16, v17, v18, v19);
}

    ++a4;
    --a5;
  }

  while (a5);
  uint64_t v26 = (void *)v38[0];
LABEL_29:
}

    __int16 v34 = v33 & 0xFFFFFFFFFFFFLL;
    goto LABEL_27;
  }

          if (a5)
          {
LABEL_27:
            if (v5 >= a2)
            {
              __break(1u);
LABEL_37:
              __break(1u);
LABEL_38:
              __break(1u);
LABEL_39:
              __break(1u);
LABEL_40:
              __break(1u);
              JUMPOUT(0x182F50D58LL);
            }

            int v8 = v5;
            unint64_t v7 = 1LL;
          }

          else
          {
LABEL_30:
            if (v5 >= a2) {
              goto LABEL_37;
            }
            *(_BYTE *)(a1 + v5) = 37;
            if (v5 + 1 >= a2) {
              goto LABEL_38;
            }
            *(_BYTE *)(a1 + v5 + 1) = a0123456789abcd_0[v6 >> 4];
            int v8 = v5 + 2;
            if (v5 + 2 >= a2)
            {
              __break(1u);
              goto LABEL_34;
            }

            LOBYTE(v6) = a0123456789abcd_0[v6 & 0xF];
            unint64_t v7 = 3LL;
          }

          *(_BYTE *)(a1 + v_Block_object_dispose(va, 8) = v6;
          v5 += v7;
          ++a3;
          if (!--a4) {
            goto LABEL_34;
          }
          break;
      }
    }
  }

          if (a5)
          {
LABEL_27:
            if (v5 >= a2)
            {
              __break(1u);
LABEL_37:
              __break(1u);
LABEL_38:
              __break(1u);
LABEL_39:
              __break(1u);
LABEL_40:
              __break(1u);
              JUMPOUT(0x182F50FB8LL);
            }

            int v8 = v5;
            unint64_t v7 = 1LL;
          }

          else
          {
LABEL_30:
            if (v5 >= a2) {
              goto LABEL_37;
            }
            *(_BYTE *)(a1 + v5) = 37;
            if (v5 + 1 >= a2) {
              goto LABEL_38;
            }
            *(_BYTE *)(a1 + v5 + 1) = a0123456789abcd_0[v6 >> 4];
            int v8 = v5 + 2;
            if (v5 + 2 >= a2)
            {
              __break(1u);
              goto LABEL_34;
            }

            LOBYTE(v6) = a0123456789abcd_0[v6 & 0xF];
            unint64_t v7 = 3LL;
          }

          *(_BYTE *)(a1 + v_Block_object_dispose(va, 8) = v6;
          v5 += v7;
          ++a3;
          if (!--a4) {
            goto LABEL_34;
          }
          break;
      }
    }
  }

          __break(1u);
          return result;
        }

  Hasher._combine(_:)(0);
  if (!v32)
  {
LABEL_15:
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v19);
    if (!v33) {
      goto LABEL_16;
    }
    goto LABEL_28;
  }

  Hasher._combine(_:)(0);
  if (!v34)
  {
LABEL_11:
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v21);
    if (!v35) {
      goto LABEL_12;
    }
    goto LABEL_28;
  }

  Hasher._combine(_:)(0);
  if (!v34)
  {
LABEL_11:
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v21);
    if (!v35) {
      goto LABEL_12;
    }
    goto LABEL_28;
  }

  objc_msgSend(v8, sel_setMonth_, v21);
  if ((v37 & 1) != 0)
  {
LABEL_9:
    if ((v38 & 1) != 0) {
      goto LABEL_10;
    }
    goto LABEL_28;
  }

    if (!v8)
    {
      uint64_t v17 = HIDWORD(a1);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<UInt16>);
      uint64_t v18 = swift_allocObject();
      *(void *)&CFMutableDictionaryRef result = 7LL;
      *(_OWORD *)(v18 + 16) = xmmword_183729DF0;
      *(_WORD *)(v18 + 32) = v17;
      *(_WORD *)(v18 + 34) = v9;
      *(_WORD *)(v18 + 36) = v6;
      *(_WORD *)(v18 + 3_Block_object_dispose(va, 8) = v3;
      *(_WORD *)(v18 + 40) = v4;
      *(_WORD *)(v18 + 42) = v5;
      *(_WORD *)(v18 + 44) = v7;
      return result;
    }

    goto LABEL_29;
  }

  uint64_t v23 = HIDWORD(a1);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<UInt16>);
  int v24 = swift_allocObject();
  *(void *)&CFMutableDictionaryRef result = 4LL;
  *(_OWORD *)(v24 + 16) = xmmword_183729E20;
  *(_WORD *)(v24 + 32) = v23;
  *(_WORD *)(v24 + 34) = v9;
  *(_WORD *)(v24 + 36) = v6;
  *(_WORD *)(v24 + 3_Block_object_dispose(va, 8) = v3;
  return result;
}

      __break(1u);
      goto LABEL_27;
    }

    __break(1u);
LABEL_27:
    swift_bridgeObjectRetain();
    id v12 = _CocoaArrayWrapper.endIndex.getter();
    a1 = swift_bridgeObjectRelease();
    if (!v12) {
      goto LABEL_28;
    }
  }

  if (*(_BYTE *)(v4 + 32) != 4)
  {
LABEL_70:
    __break(1u);
    goto LABEL_71;
  }

  unint64_t v3 = v4 & 0x7FFFFFFFFFFFFFFFLL;
  int v5 = *(void *)((v4 & 0x7FFFFFFFFFFFFFFFLL) + 0x10);
  *(void *)(v3 + 16) = 0LL;
  *(void *)(v3 + 24) = 0LL;
  *(_BYTE *)(v3 + 32) = 7;
  outlined copy of __JSONReferencingEncoder.Reference(v4);
  swift_retain();
  swift_bridgeObjectRetain();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  a1 = specialized __RawDictionaryStorage.find<A>(_:)(v2, v12);
  uint64_t v19 = *(void *)(v5 + 16);
  BOOL v20 = (v18 & 1) == 0;
  uint64_t v21 = __OFADD__(v19, v20);
  uint64_t v22 = v19 + v20;
  if (v21)
  {
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }

  LOBYTE(v4) = v18;
  if (*(void *)(v5 + 24) >= v22) {
    goto LABEL_20;
  }
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v22, isUniquelyReferenced_nonNull_native);
  uint64_t v23 = v5;
  a1 = specialized __RawDictionaryStorage.find<A>(_:)(v2, v12);
  if ((v4 & 1) == (v24 & 1))
  {
LABEL_22:
    if ((v4 & 1) == 0)
    {
LABEL_65:
      specialized _NativeDictionary._insert(at:key:value:)(a1, v2, v12, v11, v23);
      swift_bridgeObjectRetain();
      goto LABEL_66;
    }

          if (v20 <= 0x20 && ((1LL << v20) & 0x100002600LL) != 0)
          {
LABEL_74:
            __break(1u);
            JUMPOUT(0x18304EAD8LL);
          }

          uint64_t v40 = specialized static JSONError.SourceLocation.sourceLocation(at:fullSource:)(v0[3], v0[1], v0[2]);
          int v42 = v41;
          int v44 = v43;
          lazy protocol witness table accessor for type JSONError and conformance JSONError();
          swift_allocError();
          *(void *)uint64_t v27 = 0LL;
          *(void *)(v27 + _Block_object_dispose(va, 8) = 0LL;
          *(void *)(v27 + 16) = v20;
          *(void *)(v27 + 24) = v40;
          *(void *)(v27 + 32) = v42;
          *(void *)(v27 + 40) = v44;
          int v28 = 1;
LABEL_51:
          *(_BYTE *)(v27 + 4_Block_object_dispose(va, 8) = v28;
          goto LABEL_52;
        }

        uint64_t v1 = v0;
        JSONScanner.scanString()();
LABEL_32:
        if (v21) {
          goto LABEL_53;
        }
        if (__OFADD__(v6++, 1LL)) {
          goto LABEL_71;
        }
        uint64_t v4 = v0[3];
        int v24 = v0[4];
        while (1)
        {
          if (v4 >= v24) {
            goto LABEL_50;
          }
          unint64_t v25 = *(unsigned __int8 *)v4;
          v0[3] = ++v4;
        }

        if ((_DWORD)v25 == 44)
        {
          while (1)
          {
            v0[3] = ++v4;
            if (v4 >= v24) {
              goto LABEL_50;
            }
            uint64_t v26 = *(unsigned __int8 *)v4;
            if (v26 >= 0x40) {
              break;
            }
            if (((0x100002600uLL >> v26) & 1) == 0) {
              goto LABEL_45;
            }
          }

          if (v26 == 93) {
            goto LABEL_65;
          }
LABEL_45:
          if (v4 >= v24) {
            goto LABEL_50;
          }
          continue;
        }

        if ((_DWORD)v25 == 93)
        {
LABEL_65:
          CFRange v31 = v4 + 1;
          v0[3] = v4 + 1;
          uint64_t v29 = (void *)v0[1];
          uint64_t v30 = v0[2];
        }

        else
        {
          if (v25 <= 0x20 && ((1LL << v25) & 0x100002600LL) != 0)
          {
            __break(1u);
            goto LABEL_73;
          }

          __int16 v34 = specialized static JSONError.SourceLocation.sourceLocation(at:fullSource:)(v4, v0[1], v0[2]);
          v36 = v35;
          unint64_t v38 = v37;
          lazy protocol witness table accessor for type JSONError and conformance JSONError();
          swift_allocError();
          *(_OWORD *)unint64_t v39 = xmmword_1837301A0;
          *(void *)(v39 + 16) = v25;
          *(void *)(v39 + 24) = v34;
          *(void *)(v39 + 32) = v36;
          *(void *)(v39 + 40) = v38;
          *(_BYTE *)(v39 + 4_Block_object_dispose(va, 8) = 1;
LABEL_52:
          swift_willThrow();
LABEL_53:
          uint64_t v29 = (void *)v0[1];
          uint64_t v30 = v0[2];
          CFRange v31 = v0[3];
        }

        JSON5Scanner.JSONPartialMapData.resizeIfNecessary(with:)(v29, v30, v31);
        uint64_t v1 = (void *)v0[6];
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v1 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  v1[2] + 1LL,  1,  v1);
        }
        uint64_t v4 = v1[2];
        int v5 = v1[3];
        unint64_t v3 = v4 + 1;
        if (v4 >= v5 >> 1) {
          goto LABEL_72;
        }
LABEL_57:
        v1[2] = v3;
        v1[v4 + 4] = 7LL;
        uint64_t v32 = &v1[v2 + 4];
        *uint64_t v32 = v3;
        v32[1] = v6;
        --v0[5];
        v0[6] = v1;
        return;
    }
  }

  NSDecimal.copyVariableLengthInteger(_:)(v29);
  if (v35)
  {
    uint64_t v22 = v35;
    swift_bridgeObjectRelease();
    goto LABEL_17;
  }

  unint64_t v50 = *((void *)v29._rawValue + 2);
  swift_bridgeObjectRelease();
  if (!HIDWORD(v50))
  {
    _So9NSDecimala__length_setter(v50, v69);
    _So9NSDecimala__isCompact_setter_0(0LL, v69);
    if ((int)v28 < 128)
    {
      _So9NSDecimala__exponent_setter(v28, v69);
      NSDecimal.compact()();
      goto LABEL_18;
    }

    goto LABEL_16;
  }

  specialized Set._Variant.insert(_:)(&v3, 5uLL);
  if ((a1 & 0x80) == 0)
  {
LABEL_8:
    if ((a1 & 0x200) == 0) {
      goto LABEL_9;
    }
    goto LABEL_28;
  }

  __break(1u);
  return result;
}

    int v28 = (v36 - 1) & v36;
    CFRange v31 = __clz(__rbit64(v36)) + (v25 << 6);
LABEL_7:
    uint64_t v32 = (unint64_t *)(*(void *)(v23 + 48) + 16 * v31);
    unint64_t v33 = *v32;
    __int16 v34 = v32[1];
    swift_bridgeObjectRetain();
    specialized Set._Variant.insert(_:)((unint64_t *)&v508, v33, v34);
    CFMutableDictionaryRef result = swift_bridgeObjectRelease();
  }

  unint64_t v37 = v35 + 5;
  if (v37 < v29)
  {
    v36 = *(void *)(v5 + 8 * v37);
    if (!v36)
    {
      while (1)
      {
        unint64_t v25 = v37 + 1;
        if (__OFADD__(v37, 1LL)) {
          break;
        }
        if (v25 >= v29) {
          goto LABEL_27;
        }
        v36 = *(void *)(v5 + 8 * v25);
        ++v37;
        if (v36) {
          goto LABEL_26;
        }
      }

          Hasher._combine(_:)(1u);
          swift_bridgeObjectRetain();
          specialized Dictionary<>.hash(into:)(a1, v15);
          swift_bridgeObjectRelease();
LABEL_27:
          uint64_t v17 = v50;
          uint64_t v18 = v51;
          BOOL v20 = v52;
          uint64_t v19 = v53;
          uint64_t v21 = v54;
          if (v50)
          {
            Hasher._combine(_:)(1u);
            type metadata accessor for CFDictionaryRef(0LL);
            lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef();
            uint64_t v22 = v18;
            uint64_t v23 = v20;
            int v24 = v19;
            unint64_t v25 = v21;
            uint64_t v26 = v17;
            _CFObject.hash(into:)();
            int v42 = v17;
            if (v18) {
              goto LABEL_29;
            }
          }

          else
          {
            Hasher._combine(_:)(0);
            CFRange v31 = v21;
            uint64_t v32 = v18;
            unint64_t v33 = v20;
            __int16 v34 = v19;
            int v42 = 0LL;
            if (v18)
            {
LABEL_29:
              Hasher._combine(_:)(1u);
              type metadata accessor for CFDictionaryRef(0LL);
              lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef();
              uint64_t v27 = v18;
              _CFObject.hash(into:)();

              if (v20) {
                goto LABEL_30;
              }
              goto LABEL_35;
            }
          }

          Hasher._combine(_:)(0);
          if (v20)
          {
LABEL_30:
            Hasher._combine(_:)(1u);
            type metadata accessor for CFDictionaryRef(0LL);
            lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef();
            int v28 = v20;
            _CFObject.hash(into:)();

            if (v19) {
              goto LABEL_31;
            }
            goto LABEL_36;
          }

          Hasher._combine(_:)(1u);
          swift_bridgeObjectRetain();
          specialized Dictionary<>.hash(into:)((uint64_t)v64, v14);
          swift_bridgeObjectRelease();
LABEL_27:
          uint64_t v17 = v49;
          __int128 v16 = v50;
          uint64_t v19 = v51;
          uint64_t v18 = v52;
          BOOL v20 = v53;
          if (v49)
          {
            Hasher._combine(_:)(1u);
            type metadata accessor for CFDictionaryRef(0LL);
            lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef();
            uint64_t v21 = v16;
            uint64_t v22 = v19;
            uint64_t v23 = v18;
            int v24 = v20;
            unint64_t v25 = v17;
            _CFObject.hash(into:)();
            if (v16) {
              goto LABEL_29;
            }
          }

          else
          {
            Hasher._combine(_:)(0);
            uint64_t v30 = v20;
            CFRange v31 = v16;
            uint64_t v32 = v19;
            unint64_t v33 = v18;
            if (v16)
            {
LABEL_29:
              Hasher._combine(_:)(1u);
              type metadata accessor for CFDictionaryRef(0LL);
              lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef();
              uint64_t v26 = v16;
              _CFObject.hash(into:)();

              if (v19) {
                goto LABEL_30;
              }
              goto LABEL_35;
            }
          }

          Hasher._combine(_:)(0);
          if (v19)
          {
LABEL_30:
            Hasher._combine(_:)(1u);
            type metadata accessor for CFDictionaryRef(0LL);
            lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef();
            uint64_t v27 = v19;
            _CFObject.hash(into:)();

            if (v18) {
              goto LABEL_31;
            }
            goto LABEL_36;
          }

    if ((a5 & 0x1000000000000000LL) == 0) {
      goto LABEL_27;
    }
    goto LABEL_7;
  }

  return result;
}

  CFMutableDictionaryRef result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

  uint64_t v27 = v20[2];
  int v28 = v20[3];
  swift_bridgeObjectRetain();
  if (v27 >= v28 >> 1) {
    BOOL v20 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (void *)(v28 > 1),  v27 + 1,  1,  v20);
  }
  v20[2] = v27 + 1;
  uint64_t v29 = &v20[2 * v27];
  v29[4] = a5;
  v29[5] = a6;
  if (a8 == 1)
  {
LABEL_17:
    if (a10 == 1) {
      return v20;
    }
    goto LABEL_32;
  }

  specialized Set._Variant.insert(_:)(&v3, 5uLL);
  if ((v1 & 0x40) == 0)
  {
LABEL_8:
    if ((v1 & 0x80) == 0) {
      goto LABEL_9;
    }
    goto LABEL_28;
  }

  Hasher._combine(_:)(0);
  if (v16)
  {
LABEL_19:
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0LL);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef();
    uint64_t v23 = v16;
    _CFObject.hash(into:)();

    if (v15) {
      goto LABEL_20;
    }
LABEL_28:
    Hasher._combine(_:)(0);
    if (v34) {
      goto LABEL_21;
    }
    goto LABEL_29;
  }

  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)((uint64_t)v72, v16);
  swift_bridgeObjectRelease();
LABEL_27:
  uint64_t v18 = v57;
  uint64_t v17 = v58;
  BOOL v20 = v59;
  uint64_t v19 = v60;
  uint64_t v21 = v61;
  if (v57)
  {
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0LL);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( (unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef,  (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef,  (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
    uint64_t v22 = v17;
    uint64_t v23 = v20;
    int v24 = v19;
    unint64_t v25 = v21;
    uint64_t v26 = v18;
    _CFObject.hash(into:)();
    if (v17) {
      goto LABEL_29;
    }
  }

  else
  {
    Hasher._combine(_:)(0);
    CFRange v31 = v21;
    uint64_t v32 = v17;
    unint64_t v33 = v20;
    __int16 v34 = v19;
    if (v17)
    {
LABEL_29:
      Hasher._combine(_:)(1u);
      type metadata accessor for CFDictionaryRef(0LL);
      lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( (unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef,  (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef,  (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
      uint64_t v27 = v17;
      _CFObject.hash(into:)();

      if (v20) {
        goto LABEL_30;
      }
      goto LABEL_35;
    }
  }

  Hasher._combine(_:)(0);
  if (v20)
  {
LABEL_30:
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0LL);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( (unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef,  (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef,  (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
    int v28 = v20;
    _CFObject.hash(into:)();

    if (v19) {
      goto LABEL_31;
    }
LABEL_36:
    Hasher._combine(_:)(0);
    if (v21) {
      goto LABEL_32;
    }
    goto LABEL_37;
  }

  Hasher._combine(_:)(0);
  if ((_DWORD)v10 != 6)
  {
LABEL_23:
    Hasher._combine(_:)(1u);
    __asm { BR              X9 }
  }

      int v8 = 0LL;
      int v28 = 0LL;
      uint64_t v26 = 0u;
      uint64_t v27 = 0u;
      int v24 = 0u;
      unint64_t v25 = 0u;
    }

    uint64_t v19 = *(void *)(v21 + 8 * v20);
    if (v19)
    {
LABEL_15:
      uint64_t v18 = v20;
LABEL_12:
      int v8 = (v19 - 1) & v19;
      uint64_t v17 = __clz(__rbit64(v19)) + (v18 << 6);
      uint64_t v11 = v18;
      continue;
    }

    break;
  }

  while (1)
  {
    uint64_t v18 = v20 + 1;
    if (__OFADD__(v20, 1LL)) {
      break;
    }
    if (v18 >= v9)
    {
      uint64_t v11 = v9 - 1;
      goto LABEL_26;
    }

    uint64_t v19 = *(void *)(v21 + 8 * v18);
    ++v20;
    if (v19) {
      goto LABEL_12;
    }
  }

      uint64_t v6 = 0LL;
      uint64_t v32 = 0LL;
      uint64_t v30 = 0u;
      CFRange v31 = 0u;
      int v28 = 0u;
      uint64_t v29 = 0u;
    }

    uint64_t v18 = *(void *)(v20 + 8 * v19);
    if (v18)
    {
LABEL_15:
      uint64_t v17 = v19;
LABEL_12:
      uint64_t v6 = (v18 - 1) & v18;
      __int128 v16 = __clz(__rbit64(v18)) + (v17 << 6);
      id v14 = v17;
      continue;
    }

    break;
  }

  while (1)
  {
    uint64_t v17 = v19 + 1;
    if (__OFADD__(v19, 1LL)) {
      break;
    }
    if (v17 >= v21)
    {
      id v14 = v21 - 1;
      goto LABEL_26;
    }

    uint64_t v18 = *(void *)(v20 + 8 * v17);
    ++v19;
    if (v18) {
      goto LABEL_12;
    }
  }

      unint64_t v25 = (v30 - 1) & v30;
      int v28 = __clz(__rbit64(v30)) + (v20 << 6);
      if (!v11[2]) {
        goto LABEL_37;
      }
    }
  }

  else
  {
LABEL_37:
    __break(1u);
  }

  __break(1u);
LABEL_39:
  __break(1u);
LABEL_40:
  __break(1u);
LABEL_41:
  __break(1u);
LABEL_42:
  __break(1u);
LABEL_43:
  __break(1u);
  return result;
}

  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)((uint64_t)v66, v19);
  swift_bridgeObjectRelease();
LABEL_27:
  BOOL v20 = v51;
  uint64_t v21 = v52;
  uint64_t v23 = v53;
  uint64_t v22 = v54;
  int v24 = v55;
  if (v51)
  {
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0LL);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef();
    unint64_t v25 = v21;
    uint64_t v26 = v23;
    uint64_t v27 = v22;
    int v28 = v24;
    uint64_t v29 = v20;
    _CFObject.hash(into:)();
    if (v21) {
      goto LABEL_29;
    }
  }

  else
  {
    Hasher._combine(_:)(0);
    __int16 v34 = v24;
    unint64_t v35 = v21;
    v36 = v23;
    unint64_t v37 = v22;
    if (v21)
    {
LABEL_29:
      Hasher._combine(_:)(1u);
      type metadata accessor for CFDictionaryRef(0LL);
      lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef();
      uint64_t v30 = v21;
      _CFObject.hash(into:)();

      if (v23) {
        goto LABEL_30;
      }
      goto LABEL_35;
    }
  }

  Hasher._combine(_:)(0);
  if (v23)
  {
LABEL_30:
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0LL);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef();
    CFRange v31 = v23;
    _CFObject.hash(into:)();

    if (v22) {
      goto LABEL_31;
    }
LABEL_36:
    Hasher._combine(_:)(0);
    if (v24) {
      goto LABEL_32;
    }
    goto LABEL_37;
  }

  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)((uint64_t)v71, v19);
  swift_bridgeObjectRelease();
LABEL_27:
  BOOL v20 = v56;
  uint64_t v21 = v57;
  uint64_t v22 = v58;
  uint64_t v23 = v59;
  int v24 = v60;
  unint64_t v47 = v58;
  unint64_t v48 = v60;
  if (v56)
  {
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0LL);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef();
    unint64_t v25 = v21;
    uint64_t v26 = v22;
    uint64_t v27 = v23;
    int v28 = v23;
    uint64_t v29 = v24;
    uint64_t v30 = v20;
    _CFObject.hash(into:)();
  }

  else
  {
    Hasher._combine(_:)(0);
    CFRange v31 = v24;
    uint64_t v32 = v21;
    unint64_t v33 = v22;
    uint64_t v27 = v23;
    __int16 v34 = v23;
  }

  unint64_t v49 = v20;
  if (v21)
  {
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0LL);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef();
    unint64_t v35 = v21;
    _CFObject.hash(into:)();
  }

  else
  {
    Hasher._combine(_:)(0);
  }

  if (v47)
  {
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0LL);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef();
    v36 = v47;
    _CFObject.hash(into:)();

    if (v27) {
      goto LABEL_35;
    }
LABEL_38:
    Hasher._combine(_:)(0);
    unint64_t v38 = v48;
    if (v48) {
      goto LABEL_36;
    }
    goto LABEL_39;
  }

  Hasher._combine(_:)(0);
  if (!v27) {
    goto LABEL_38;
  }
LABEL_35:
  Hasher._combine(_:)(1u);
  type metadata accessor for CFDictionaryRef(0LL);
  lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef();
  unint64_t v37 = v27;
  _CFObject.hash(into:)();

  unint64_t v38 = v48;
  if (v48)
  {
LABEL_36:
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0LL);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef();
    unint64_t v39 = v38;
    _CFObject.hash(into:)();

    goto LABEL_40;
  }

  __break(1u);
  return result;
}

    swift_bridgeObjectRelease();
    v72 = 0LL;
    v74 = 0xE000000000000000LL;
    unint64_t v38 = v179;
    goto LABEL_114;
  }

  uint64_t v32 = (void *)objc_opt_self();
  swift_bridgeObjectRetain();
  unint64_t v33 = objc_msgSend(v32, sel_mainBundle);
  __int16 v34 = objc_msgSend(v33, sel__objectForUnlocalizedInfoDictionaryKey_, String._bridgeToObjectiveCImpl()());

  swift_unknownObjectRelease();
  _bridgeAnyObjectToAny(_:)();
  swift_unknownObjectRelease();
  outlined init with copy of Any?((uint64_t)&v184, (uint64_t)&v196);
  if (!v197)
  {
    outlined destroy of Any?((uint64_t)&v196, &demangling cache variable for type metadata for Any?);
    v36 = 0;
    unint64_t v37 = v182;
    unint64_t v38 = v179;
LABEL_31:
    unint64_t v35 = a4;
    goto LABEL_32;
  }

  outlined init with take of Any(&v196, v198);
  outlined init with copy of Any((uint64_t)v198, (uint64_t)&v196);
  unint64_t v35 = a4;
  if ((swift_dynamicCast() & 1) != 0)
  {
    v36 = v183;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v198);
LABEL_7:
    unint64_t v37 = v182;
    unint64_t v38 = v179;
    goto LABEL_32;
  }

  outlined init with copy of Any((uint64_t)v198, (uint64_t)&v196);
  if ((swift_dynamicCast() & 1) != 0)
  {
    v171 = v32;
    v169 = v183;
    v196 = v183;
    swift_bridgeObjectRetain();
    v170 = (const __CFAllocator *)Substring.init<A>(_:)();
    unint64_t v43 = v42;
    unint64_t v45 = v44;
    unint64_t v47 = v46;
    *(void *)&v196 = 1702195828LL;
    *((void *)&v196 + 1) = 0xE400000000000000LL;
    unint64_t v48 = Substring.init<A>(_:)();
    id v52 = specialized _StringCompareOptionsIterable._compare<A>(_:toHalfWidth:diacriticsInsensitive:caseFold:numeric:forceOrdering:)( v48,  v49,  v50,  v51,  0,  0,  1,  0,  0,  (unint64_t)v170,  v43,  v45,  v47);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v52)
    {
      v196 = v169;
      swift_bridgeObjectRetain();
      v170 = (const __CFAllocator *)Substring.init<A>(_:)();
      v54 = v53;
      v56 = v55;
      unint64_t v58 = v57;
      *(void *)&v196 = 5457241LL;
      *((void *)&v196 + 1) = 0xE300000000000000LL;
      int v59 = Substring.init<A>(_:)();
      v63 = specialized _StringCompareOptionsIterable._compare<A>(_:toHalfWidth:diacriticsInsensitive:caseFold:numeric:forceOrdering:)( v59,  v60,  v61,  v62,  0,  0,  1,  0,  0,  (unint64_t)v170,  v54,  v56,  v58);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v36 = v63 == 0;
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v198);
    }

    else
    {
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v198);
      swift_bridgeObjectRelease();
      v36 = 1;
    }

    unint64_t v37 = v182;
    unint64_t v38 = v179;
    uint64_t v32 = v171;
    goto LABEL_31;
  }

  outlined init with copy of Any((uint64_t)v198, (uint64_t)&v196);
  if ((swift_dynamicCast() & 1) != 0)
  {
    v69 = v183;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v198);
    v36 = v69 != 0;
    goto LABEL_7;
  }

  outlined init with take of Any(v198, &v196);
  v75 = swift_dynamicCast();
  unint64_t v37 = v182;
  unint64_t v38 = v179;
  if (v75) {
    v36 = *(double *)&v183 != 0.0;
  }
  else {
    v36 = 0;
  }
LABEL_32:
  outlined destroy of Any?((uint64_t)&v184, &demangling cache variable for type metadata for Any?);
  if (v37)
  {
    if (v38)
    {
      if (((v35 | v36) & 1) != 0) {
        goto LABEL_110;
      }
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain();
      v76 = objc_msgSend(v32, sel_mainBundle);
      v77 = objc_msgSend(v76, sel_localizations);
      if (v77)
      {
        v78 = v77;
        type metadata accessor for __SwiftDeferredNSArray();
        swift_unknownObjectRetain();
        if (swift_dynamicCastClass())
        {
          swift_retain();
        }

        v79 = v32;
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
        v80 = swift_dynamicCastClass();
        if (v80)
        {
          v81 = v80;
        }

        else
        {
          swift_unknownObjectRelease();
          objc_msgSend(v78, sel_copy);
          v117 = _bridgeCocoaArray<A>(_:)();
          swift_unknownObjectRelease();
          v81 = specialized _arrayForceCast<A, B>(_:)(v117);

          swift_bridgeObjectRelease();
        }
      }

      else
      {
        v79 = v32;
        v81 = MEMORY[0x18961AFE8];
      }

      v118 = specialized static Locale.canonicalizeLocalizations(_:)(v81);
      swift_bridgeObjectRelease();
      if (!v118[2] || !*(void *)(v37 + 16)) {
        goto LABEL_80;
      }
      v119 = HIBYTE(v38) & 0xF;
      if ((v38 & 0x2000000000000000LL) == 0) {
        v119 = v180 & 0xFFFFFFFFFFFFLL;
      }
      if (!v119)
      {
LABEL_80:
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease();

LABEL_110:
        unint64_t v39 = v180;
LABEL_111:
        v147 = (const __CFAllocator *)*MEMORY[0x189604DD0];
        v148 = (const __CFString *)String._bridgeToObjectiveCImpl()();
        v149 = (__CFString *)CFLocaleCreateCanonicalLocaleIdentifierFromString(v147, v148);
        swift_unknownObjectRelease();
        if (v149)
        {
          v72 = (uint64_t)static String._unconditionallyBridgeFromObjectiveC(_:)(v149);
          v74 = v150;
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
        }

        else
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          v72 = 0LL;
          v74 = 0xE000000000000000LL;
        }

        goto LABEL_114;
      }

      swift_bridgeObjectRetain();
      specialized static Locale.canonicalizeLocalizations(_:)(v37);
      swift_bridgeObjectRetain();
      v120 = _ContiguousArrayBuffer._asCocoaArray()();
      v121 =  objc_msgSend( v79,  sel_preferredLocalizationsFromArray_forPreferences_,  v120,  _ContiguousArrayBuffer._asCocoaArray()());
      swift_unknownObjectRelease();
      swift_unknownObjectRelease();
      if (v121)
      {
        type metadata accessor for __SwiftDeferredNSArray();
        swift_unknownObjectRetain();
        if (swift_dynamicCastClass())
        {
          swift_retain();
        }

        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
        v122 = swift_dynamicCastClass();
        if (v122)
        {
          v123 = (void *)v122;
        }

        else
        {
          swift_unknownObjectRelease();
          objc_msgSend(v121, sel_copy);
          v129 = _bridgeCocoaArray<A>(_:)();
          swift_unknownObjectRelease();
          v123 = (void *)specialized _arrayForceCast<A, B>(_:)(v129);

          swift_bridgeObjectRelease();
        }
      }

      else
      {
        v123 = (void *)MEMORY[0x18961AFE8];
      }

      if (!v123[2])
      {
        swift_bridgeObjectRelease();
        v139 = v182;
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease();

        unint64_t v37 = v139;
LABEL_109:
        swift_bridgeObjectRelease();
        goto LABEL_110;
      }

      v131 = v123[4];
      v130 = v123[5];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRetain();
      v132 = specialized _withFixedCharBuffer(size:_:)(257LL, v180, v38);
      v134 = v133;
      swift_bridgeObjectRelease();
      if (v134)
      {
        Locale.Components.init(identifier:)(v132, v134, &v184);
        if (*((void *)&v184 + 1))
        {
          v135 = (void *)*((void *)&v187 + 1);
          if (*((void *)&v187 + 1))
          {
            v136 = v187;
            v198[0] = v184;
            outlined copy of Locale.LanguageCode?(v187, *((uint64_t *)&v187 + 1));
            swift_bridgeObjectRetain();
            v137._countAndFlagsBits = 45LL;
            v137._object = (void *)0xE100000000000000LL;
            String.append(_:)(v137);
            swift_bridgeObjectRetain();
            unint64_t v38 = v179;
            outlined consume of Locale.LanguageCode?(v136, (uint64_t)v135);
            v138._countAndFlagsBits = v136;
            v138._object = v135;
            String.append(_:)(v138);
            swift_bridgeObjectRelease();
            outlined release of Locale.Components((uint64_t *)&v184);
            v174 = *((void *)&v198[0] + 1);
            v132 = *(void *)&v198[0];
            goto LABEL_98;
          }
        }

        outlined release of Locale.Components((uint64_t *)&v184);
        v132 = 0LL;
      }

      v174 = 0LL;
LABEL_98:
      unint64_t v37 = v182;
      swift_bridgeObjectRetain();
      v140 = specialized _withFixedCharBuffer(size:_:)(257LL, v131, v130);
      v142 = v141;
      swift_bridgeObjectRelease();
      if (v142)
      {
        Locale.Components.init(identifier:)(v140, v142, &v184);
        if (*((void *)&v184 + 1) && (v143 = (void *)*((void *)&v187 + 1)) != 0LL)
        {
          v173 = v131;
          v144 = v187;
          v198[0] = v184;
          outlined copy of Locale.LanguageCode?(v187, *((uint64_t *)&v187 + 1));
          swift_bridgeObjectRetain();
          v145._countAndFlagsBits = 45LL;
          v145._object = (void *)0xE100000000000000LL;
          String.append(_:)(v145);
          swift_bridgeObjectRetain();
          v131 = v173;
          unint64_t v37 = v182;
          outlined consume of Locale.LanguageCode?(v144, (uint64_t)v143);
          v146._countAndFlagsBits = v144;
          unint64_t v38 = v179;
          v146._object = v143;
          String.append(_:)(v146);
          swift_bridgeObjectRelease();
          outlined release of Locale.Components((uint64_t *)&v184);
          v142 = *((void *)&v198[0] + 1);
          v140 = *(void *)&v198[0];
        }

        else
        {
          outlined release of Locale.Components((uint64_t *)&v184);
          v140 = 0LL;
          v142 = 0LL;
        }
      }

      if (v174 && v142)
      {
        if (v132 == v140 && v174 == v142)
        {

          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
LABEL_124:
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease_n();
          swift_bridgeObjectRelease_n();
          unint64_t v39 = v180;
          v72 = v180;
          v74 = v38;
          goto LABEL_114;
        }

        v166 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if ((v166 & 1) != 0)
        {

          goto LABEL_124;
        }

        v72 = specialized static Locale.localeIdentifierByReplacingLanguageCodeAndScriptCode(localeIDWithDesiredLangCode:localeIDWithDesiredComponents:)( v131,  v130,  v180,  v38);
        v74 = v167;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();

        swift_bridgeObjectRelease();
        if (v74)
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          unint64_t v39 = v180;
          goto LABEL_114;
        }
      }

      else
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease();

        swift_bridgeObjectRelease();
      }

      goto LABEL_109;
    }

    v82 = swift_bridgeObjectRetain();
    v83 = specialized static Locale.canonicalizeLocalizations(_:)(v82);
    swift_bridgeObjectRelease();
    if (v83[2])
    {
      v84 = (const __CFAllocator *)*MEMORY[0x189604DD0];
      v85 = (const __CFString *)String._bridgeToObjectiveCImpl()();
      swift_bridgeObjectRetain();
      v86 = (__CFString *)CFLocaleCreateCanonicalLocaleIdentifierFromString(v84, v85);
      swift_unknownObjectRelease();
      if (v86)
      {
        v87 = static String._unconditionallyBridgeFromObjectiveC(_:)(v86);
        v89 = v88;
        swift_bridgeObjectRelease();

        v90 = v181;
        if (v181)
        {
LABEL_45:
          v91 = one-time initialization token for log;
          swift_bridgeObjectRetain();
          if (v91 != -1) {
            swift_once();
          }
          v92 = (id)static _LocaleICU.log;
          Logger.init(_:)();
          swift_bridgeObjectRetain_n();
          v93 = (os_log_s *)Logger.logObject.getter();
          v94 = static os_log_type_t.debug.getter();
          if (os_log_type_enabled(v93, v94))
          {
            v170 = v84;
            v95 = (uint8_t *)swift_slowAlloc();
            v96 = swift_slowAlloc();
            v171 = (void *)v89;
            v97 = v96;
            *(void *)&v184 = v96;
            *(_DWORD *)v95 = 136446210;
            swift_bridgeObjectRetain();
            v98 = v178;
            *(void *)&v198[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)( v178,  (unint64_t)v181,  (uint64_t *)&v184);
            v84 = v170;
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_bridgeObjectRelease_n();
            _os_log_impl( &dword_182EB1000,  v93,  v94,  "Locale.current constructing a locale identifier from preferred languages by combining with set country code '%{public}s'",  v95,  0xCu);
            swift_arrayDestroy();
            v99 = v97;
            v89 = (unint64_t)v171;
            MEMORY[0x186E20E60](v99, -1LL, -1LL);
            v100 = v95;
            v90 = v181;
            MEMORY[0x186E20E60](v100, -1LL, -1LL);

            (*(void (**)(char *, uint64_t))(v173 + 8))(v172, v174);
            unint64_t v37 = v182;
            unint64_t v39 = v180;
          }

          else
          {

            swift_bridgeObjectRelease_n();
            (*(void (**)(char *, uint64_t))(v173 + 8))(v172, v174);
            unint64_t v37 = v182;
            unint64_t v39 = v180;
            v98 = v178;
          }

          *(void *)&v184 = v87;
          *((void *)&v184 + 1) = v89;
          v124._countAndFlagsBits = 95LL;
          v124._object = (void *)0xE100000000000000LL;
          String.append(_:)(v124);
          v125._countAndFlagsBits = v98;
          v125._object = v90;
          String.append(_:)(v125);
          swift_bridgeObjectRelease();
          v126 = (const __CFString *)String._bridgeToObjectiveCImpl()();
          v127 = (__CFString *)CFLocaleCreateCanonicalLocaleIdentifierFromString(v84, v126);
          swift_unknownObjectRelease();
          if (v127)
          {
            v72 = (uint64_t)static String._unconditionallyBridgeFromObjectiveC(_:)(v127);
            v74 = v128;
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();

            unint64_t v38 = v179;
            goto LABEL_114;
          }

          swift_bridgeObjectRelease();
          goto LABEL_26;
        }
      }

      else
      {
        swift_bridgeObjectRelease();
        v87 = 0LL;
        v89 = 0xE000000000000000LL;
        v90 = v181;
        if (v181) {
          goto LABEL_45;
        }
      }

      if (one-time initialization token for log != -1) {
        swift_once();
      }
      v110 = (id)static _LocaleICU.log;
      Logger.init(_:)();
      v111 = (os_log_s *)Logger.logObject.getter();
      v112 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v111, v112))
      {
        v113 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v113 = 0;
        _os_log_impl( &dword_182EB1000,  v111,  v112,  "Locale.current constructing a locale identifier from preferred languages without a set country code",  v113,  2u);
        MEMORY[0x186E20E60](v113, -1LL, -1LL);
      }

      (*(void (**)(char *, uint64_t))(v173 + 8))(v15, v174);
      v114 = (const __CFString *)String._bridgeToObjectiveCImpl()();
      v115 = (__CFString *)CFLocaleCreateCanonicalLocaleIdentifierFromString(v84, v114);
      swift_unknownObjectRelease();
      if (v115)
      {
        v72 = (uint64_t)static String._unconditionallyBridgeFromObjectiveC(_:)(v115);
        v74 = v116;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }

      else
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v72 = 0LL;
        v74 = 0xE000000000000000LL;
      }

      unint64_t v38 = v179;
      unint64_t v39 = v180;
      goto LABEL_114;
    }

    if (one-time initialization token for log != -1) {
      swift_once();
    }
    v105 = (id)static _LocaleICU.log;
    Logger.init(_:)();
    v106 = (os_log_s *)Logger.logObject.getter();
    v107 = static os_log_type_t.debug.getter();
    v108 = os_log_type_enabled(v106, v107);
    unint64_t v39 = v180;
    if (v108)
    {
      v109 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v109 = 0;
      _os_log_impl( &dword_182EB1000,  v106,  v107,  "Value for 'AppleLanguages' found in preferences contains no valid entries; falling back to default locale identifier as current",
        v109,
        2u);
      MEMORY[0x186E20E60](v109, -1LL, -1LL);
    }

    (*(void (**)(char *, uint64_t))(v173 + 8))(v10, v174);
    swift_bridgeObjectRelease();
    unint64_t v38 = v179;
  }

  else
  {
    unint64_t v39 = v180;
    if (one-time initialization token for log != -1) {
      swift_once();
    }
    v101 = (id)static _LocaleICU.log;
    Logger.init(_:)();
    v102 = (os_log_s *)Logger.logObject.getter();
    v103 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v102, v103))
    {
      v104 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v104 = 0;
      _os_log_impl( &dword_182EB1000,  v102,  v103,  "Lookup of 'AppleLanguages' from current preferences failed lookup (app preferences do not contain the key); like"
        "ly falling back to default locale identifier as current",
        v104,
        2u);
      MEMORY[0x186E20E60](v104, -1LL, -1LL);
    }

    (*(void (**)(char *, uint64_t))(v173 + 8))(v18, v174);
    if (v38) {
      goto LABEL_111;
    }
  }

  String.utf8CString.getter();
  int v28 = sandbox_extension_consume();
  swift_release();
  v114 = v5;
  if (v28 != -1)
  {
    uint64_t v29 = 0LL;
    goto LABEL_35;
  }

  if (one-time initialization token for localizedStringLogger != -1) {
    swift_once();
  }
  unint64_t v49 = type metadata accessor for Logger();
  __swift_project_value_buffer(v49, (uint64_t)localizedStringLogger);
  outlined retain of LocalizedStringResource(v8);
  outlined retain of LocalizedStringResource(v8);
  unint64_t v50 = (id)Logger.logObject.getter();
  v51 = static os_log_type_t.error.getter();
  if (!os_log_type_enabled((os_log_t)v50, (os_log_type_t)v51))
  {
    outlined release of LocalizedStringResource(v8);
    outlined release of LocalizedStringResource(v8);

    goto LABEL_34;
  }

  id v52 = swift_slowAlloc();
  v110 = swift_slowAlloc();
  *(void *)&v116 = v110;
  *(_DWORD *)id v52 = 136315394;
  outlined retain of URL((void **)&v119);
  uint64_t v53 = _foundation_swift_url_feature_enabled();
  LODWORD(v111) = v51;
  if ((v53 & 1) != 0)
  {
    v109 = v50;
    v122 = v119;
    v123 = v120;
    outlined retain of URL((void **)&v119);
    v54 = URL.path(percentEncoded:)(1);
    v122 = v54;
    swift_bridgeObjectRetain();
    if (String.count.getter() > 1
      && (specialized BidirectionalCollection.last.getter(v54._countAndFlagsBits, (unint64_t)v54._object) & 0x1FF) == 0x2F)
    {
      specialized RangeReplaceableCollection<>.popLast()();
      swift_bridgeObjectRelease();
    }

    v117._countAndFlagsBits = Set.init(minimumCapacity:)();
    v55 = specialized Set._Variant.insert(_:)(&v131, 0x2FuLL);
    v56 = v117._countAndFlagsBits;
    v57 = v122;
    unint64_t v58 = ((unint64_t)v122._object >> 56) & 0xF;
    if (v58)
    {
      v117 = v122;
      MEMORY[0x1895F8858](v55);
      v102 = &v117;
      v103 = v56;
      swift_bridgeObjectRetain();
      int v59 = v114;
      v114 = specialized String.UTF8View.withContiguousStorageIfAvailable<A>(_:)( (void *(*)(__int128 *__return_ptr, void *, uint64_t))closure #1 in StringProtocol.removingURLPercentEncoding(excluding:)specialized partial apply,  (uint64_t)v101,  v57._countAndFlagsBits,  (unint64_t)v57._object);
      v61 = v59;
      if (v60 == 1)
      {
        v62 = v117;
        swift_bridgeObjectRetain();
        v114 = specialized StringProtocol.removingURLPercentEncoding<A>(utf8Buffer:excluding:)( v62._countAndFlagsBits,  (unint64_t)v62._object,  v56);
        object = v63;
        swift_bridgeObjectRelease();
      }

      else
      {
        object = v60;
      }

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      a4 = v112;
      if (!object)
      {
        v114 = v59;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        outlined release of URL((id *)&v119);
        v95 = 0LL;
        object = 0xE000000000000000LL;
        goto LABEL_82;
      }

      v95 = (uint64_t)v114;
    }

    else
    {
      swift_bridgeObjectRelease();
      v95 = 0LL;
      object = 0xE000000000000000LL;
      v61 = v114;
    }

    v114 = v61;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    outlined release of URL((id *)&v119);
LABEL_82:
    outlined release of URL((id *)&v119);
    a3 = v113;
    goto LABEL_83;
  }

  v80 = (void *)v119._countAndFlagsBits;
  v81 = objc_msgSend((id)v119._countAndFlagsBits, sel__parameterString);
  if (!v81)
  {
    v96 = objc_msgSend(v80, sel_path);
    if (v96)
    {
      v97 = v96;
      v95 = (uint64_t)static String._unconditionallyBridgeFromObjectiveC(_:)(v96);
      object = v98;

      outlined release of URL((id *)&v119);
    }

    else
    {
      outlined release of URL((id *)&v119);
      v95 = 0LL;
      object = 0xE000000000000000LL;
    }

    goto LABEL_84;
  }

  v82 = v81;
  v109 = v50;
  v83 = a4;
  v84 = static String._unconditionallyBridgeFromObjectiveC(_:)(v81);
  v86 = v85;

  if (getEnumTag for _DarwinSearchPathsSequence.Iterator.State()
    && (v87 = objc_msgSend(v80, sel_path)) != 0)
  {
    v88 = v87;
    v89 = static String._unconditionallyBridgeFromObjectiveC(_:)(v87);
    v91 = v90;

    v122._countAndFlagsBits = (uint64_t)v89;
    v122._object = v91;
    swift_bridgeObjectRetain();
    v92._countAndFlagsBits = 59LL;
    v92._object = (void *)0xE100000000000000LL;
    String.append(_:)(v92);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    v93._countAndFlagsBits = (uint64_t)v84;
    v93._object = v86;
    String.append(_:)(v93);
    swift_bridgeObjectRelease();
  }

  else
  {
    v122._countAndFlagsBits = 59LL;
    v122._object = (void *)0xE100000000000000LL;
    v94._countAndFlagsBits = (uint64_t)v84;
    v94._object = v86;
    String.append(_:)(v94);
  }

  swift_bridgeObjectRelease();
  outlined release of URL((id *)&v119);
  object = (unint64_t)v122._object;
  v95 = v122._countAndFlagsBits;
  a4 = v83;
LABEL_83:
  unint64_t v50 = v109;
LABEL_84:
  v99 = v110;
  v122._countAndFlagsBits = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v95, object, (uint64_t *)&v116);
  UnsafeMutableRawBufferPointer.copyMemory(from:)();
  swift_bridgeObjectRelease();
  outlined release of LocalizedStringResource(v8);
  v100 = outlined release of LocalizedStringResource(v8);
  *(_WORD *)(v52 + 12) = 1026;
  LODWORD(v122._countAndFlagsBits) = MEMORY[0x186E1B0E8](v100);
  UnsafeMutableRawBufferPointer.copyMemory(from:)();
  _os_log_impl( &dword_182EB1000,  (os_log_t)v50,  (os_log_type_t)v111,  "Unable to consume sandbox extension for path '%s' (errno: %{public}d)",  (uint8_t *)v52,  0x12u);
  uint64_t v29 = 1LL;
  swift_arrayDestroy();
  MEMORY[0x186E20E60](v99, -1LL, -1LL);
  MEMORY[0x186E20E60](v52, -1LL, -1LL);

  int v28 = 0LL;
  a2 = v115;
LABEL_35:
  v117 = *(Swift::String *)(v8 + 72);
  v118 = *(void *)(v8 + 88);
  CFRange v31 = objc_allocWithZone((Class)&OBJC_CLASS___NSBundle);
  uint64_t v32 = v117._countAndFlagsBits;
  outlined retain of URL((void **)&v117);
  unint64_t v33 = objc_msgSend(v31, sel_initWithURL_, v32);
  __int16 v34 = v33;
  if (!v33)
  {
    outlined release of URL((id *)&v117);
    if ((v29 & 1) != 0) {
      goto LABEL_67;
    }
    goto LABEL_66;
  }

  v111 = v29;
  unint64_t v35 = *(void *)(a2 + 48);
  v110 = v28;
  v109 = v33;
  if (v35)
  {
    v36 = *(void *)(a2 + 40);
    outlined retain of AttributedString.LocalizationOptions(a2);
    goto LABEL_65;
  }

  outlined retain of AttributedString.LocalizationOptions(a2);
  unint64_t v37 = objc_msgSend(v34, sel_localizations);
  if (!v37) {
    unint64_t v37 = (id)_ContiguousArrayBuffer._asCocoaArray()();
  }
  unint64_t v38 = (void *)objc_opt_self();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
  unint64_t v39 = swift_allocObject();
  *(_OWORD *)(v39 + 16) = xmmword_183720D90;
  v116 = *(_OWORD *)(a3 + 56);
  uint64_t v40 = *((void *)&v116 + 1);
  ObjectType = swift_getObjectType();
  int v42 = *(uint64_t (**)(uint64_t, uint64_t))(v40 + 64);
  outlined retain of Locale((uint64_t)&v116);
  unint64_t v43 = v42(ObjectType, v40);
  unint64_t v45 = v44;
  outlined release of Locale((uint64_t)&v116);
  *(void *)(v39 + 32) = v43;
  *(void *)(v39 + 40) = v45;
  unint64_t v46 =  objc_msgSend( v38,  sel_preferredLocalizationsFromArray_forPreferences_,  v37,  _ContiguousArrayBuffer._asCocoaArray()());

  swift_unknownObjectRelease();
  if (v46)
  {
    type metadata accessor for __SwiftDeferredNSArray();
    swift_unknownObjectRetain();
    if (swift_dynamicCastClass())
    {
      swift_retain();
    }

    unint64_t v47 = swift_dynamicCastClass();
    if (!v47)
    {
      swift_unknownObjectRelease();
      objc_msgSend(v46, sel_copy);
      v65 = _bridgeCocoaArray<A>(_:)();
      swift_unknownObjectRelease();
      unint64_t v48 = (void *)specialized _arrayForceCast<A, B>(_:)(v65);

      swift_bridgeObjectRelease();
      a2 = v115;
      if (v48[2]) {
        goto LABEL_61;
      }
      goto LABEL_64;
    }

    unint64_t v48 = (void *)v47;
  }

  else
  {
    unint64_t v48 = (void *)MEMORY[0x18961AFE8];
  }

  a2 = v115;
  if (v48[2])
  {
LABEL_61:
    v36 = v48[4];
    unint64_t v35 = v48[5];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    goto LABEL_65;
  }

  String.utf8CString.getter();
  uint64_t v29 = sandbox_extension_consume();
  swift_release();
  if (v29 != -1)
  {
    uint64_t v30 = 0;
    goto LABEL_47;
  }

  if (one-time initialization token for localizedStringLogger != -1) {
    swift_once();
  }
  uint64_t v32 = type metadata accessor for Logger();
  __swift_project_value_buffer(v32, (uint64_t)localizedStringLogger);
  outlined retain of LocalizedStringResource(v6);
  outlined retain of LocalizedStringResource(v6);
  int v24 = (os_log_s *)Logger.logObject.getter();
  unint64_t v33 = static os_log_type_t.error.getter();
  if (!os_log_type_enabled(v24, (os_log_type_t)v33))
  {
    outlined release of LocalizedStringResource(v6);
    outlined release of LocalizedStringResource(v6);
    goto LABEL_46;
  }

  v78 = a1;
  __int16 v34 = swift_slowAlloc();
  unint64_t v35 = swift_slowAlloc();
  v92 = v35;
  *(_DWORD *)__int16 v34 = 136315394;
  outlined retain of URL((void **)&v88);
  v36 = _foundation_swift_url_feature_enabled();
  v81 = v5;
  v79 = v24;
  v76 = v33;
  v75 = v35;
  if (!v36)
  {
    id v52 = (void *)v88._countAndFlagsBits;
    uint64_t v53 = objc_msgSend((id)v88._countAndFlagsBits, sel__parameterString);
    if (v53)
    {
      v54 = v53;
      v55 = static String._unconditionallyBridgeFromObjectiveC(_:)(v53);
      v57 = v56;

      if (getEnumTag for _DarwinSearchPathsSequence.Iterator.State()
        && (unint64_t v58 = objc_msgSend(v52, sel_path)) != 0)
      {
        int v59 = v58;
        uint64_t v60 = static String._unconditionallyBridgeFromObjectiveC(_:)(v58);
        v62 = v61;

        v84._countAndFlagsBits = (uint64_t)v60;
        v84._object = v62;
        swift_bridgeObjectRetain();
        v63._countAndFlagsBits = 59LL;
        v63._object = (void *)0xE100000000000000LL;
        String.append(_:)(v63);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRetain();
        v64._countAndFlagsBits = (uint64_t)v55;
        v64._object = v57;
        String.append(_:)(v64);
        swift_bridgeObjectRelease();
      }

      else
      {
        v84._countAndFlagsBits = 59LL;
        v84._object = (void *)0xE100000000000000LL;
        v65._countAndFlagsBits = (uint64_t)v55;
        v65._object = v57;
        String.append(_:)(v65);
      }

      swift_bridgeObjectRelease();
      outlined release of URL((id *)&v88);
      object = (unint64_t)v84._object;
      unint64_t v48 = v84._countAndFlagsBits;
      int v5 = v81;
    }

    else
    {
      v66 = objc_msgSend(v52, sel_path);
      int v5 = v81;
      if (v66)
      {
        v67 = v66;
        unint64_t v48 = (uint64_t)static String._unconditionallyBridgeFromObjectiveC(_:)(v66);
        object = v68;

        outlined release of URL((id *)&v88);
      }

      else
      {
        outlined release of URL((id *)&v88);
        unint64_t v48 = 0LL;
        object = 0xE000000000000000LL;
      }
    }

    goto LABEL_66;
  }

  v80 = a2;
  v84 = v88;
  v85 = v89;
  outlined retain of URL((void **)&v88);
  unint64_t v37 = URL.path(percentEncoded:)(1);
  v84 = v37;
  swift_bridgeObjectRetain();
  if (String.count.getter() > 1
    && (specialized BidirectionalCollection.last.getter(v37._countAndFlagsBits, (unint64_t)v37._object) & 0x1FF) == 0x2F)
  {
    specialized RangeReplaceableCollection<>.popLast()();
    swift_bridgeObjectRelease();
  }

  v82._countAndFlagsBits = Set.init(minimumCapacity:)();
  unint64_t v38 = specialized Set._Variant.insert(_:)(&v83, 0x2FuLL);
  unint64_t v39 = v82._countAndFlagsBits;
  uint64_t v40 = v84;
  unint64_t v41 = ((unint64_t)v84._object >> 56) & 0xF;
  if (v41)
  {
    v77 = a3;
    v82 = v84;
    MEMORY[0x1895F8858](v38);
    v73 = &v82;
    v74 = v39;
    swift_bridgeObjectRetain();
    int v42 = v81;
    unint64_t v43 = specialized String.UTF8View.withContiguousStorageIfAvailable<A>(_:)( (void *(*)(__int128 *__return_ptr, void *, uint64_t))closure #1 in StringProtocol.removingURLPercentEncoding(excluding:)specialized partial apply,  (uint64_t)v72,  v40._countAndFlagsBits,  (unint64_t)v40._object);
    int v5 = v42;
    if (v44 == 1)
    {
      unint64_t v45 = v42;
      unint64_t v47 = (unint64_t)v82._object;
      unint64_t v46 = v82._countAndFlagsBits;
      swift_bridgeObjectRetain();
      unint64_t v48 = (uint64_t)specialized StringProtocol.removingURLPercentEncoding<A>(utf8Buffer:excluding:)(v46, v47, v39);
      object = v49;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      int v5 = v45;
    }

    else
    {
      unint64_t v48 = (uint64_t)v43;
      object = v44;
      swift_bridgeObjectRelease();
    }

    swift_bridgeObjectRelease();
    a3 = v77;
    if (!object)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      outlined release of URL((id *)&v88);
      unint64_t v48 = 0LL;
      object = 0xE000000000000000LL;
      goto LABEL_65;
    }
  }

  else
  {
    swift_bridgeObjectRelease();
    unint64_t v48 = 0LL;
    object = 0xE000000000000000LL;
    int v5 = v81;
  }

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined release of URL((id *)&v88);
LABEL_65:
  outlined release of URL((id *)&v88);
LABEL_66:
  v84._countAndFlagsBits = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v48, object, &v92);
  UnsafeMutableRawBufferPointer.copyMemory(from:)();
  swift_bridgeObjectRelease();
  outlined release of LocalizedStringResource(v6);
  v69 = outlined release of LocalizedStringResource(v6);
  *(_WORD *)(v34 + 12) = 1026;
  LODWORD(v84._countAndFlagsBits) = MEMORY[0x186E1B0E8](v69);
  UnsafeMutableRawBufferPointer.copyMemory(from:)();
  v70 = v79;
  _os_log_impl( &dword_182EB1000,  v79,  (os_log_type_t)v76,  "Unable to consume sandbox extension for path '%s' (errno: %{public}d)",  (uint8_t *)v34,  0x12u);
  uint64_t v30 = 1;
  v71 = v75;
  swift_arrayDestroy();
  MEMORY[0x186E20E60](v71, -1LL, -1LL);
  MEMORY[0x186E20E60](v34, -1LL, -1LL);

  a1 = v78;
LABEL_47:
  v86 = *(_OWORD *)(v6 + 72);
  v87 = *(void *)(v6 + 88);
  v84 = *(Swift::String *)(v6 + 72);
  v85 = *(void *)(v6 + 88);
  outlined retain of URL((void **)&v86);
  a1(&v82, &v84);
  CFMutableDictionaryRef result = (uint64_t)outlined release of URL((id *)&v86);
  if (!v5)
  {
    if ((v30 & 1) == 0) {
      CFMutableDictionaryRef result = sandbox_extension_release();
    }
    *a3 = v82._countAndFlagsBits;
  }

  return result;
}

  if (v7 >= a1 && v7 < result >> 14) {
    return 0LL;
  }
  return result;
}

  __src[30] = (int)ucal_get();
  LOBYTE(__src[31]) = 0;
  if ((a2 & 0x1000) == 0)
  {
LABEL_12:
    if ((a2 & 0x80) == 0) {
      goto LABEL_13;
    }
    goto LABEL_28;
  }

    __break(1u);
    goto LABEL_27;
  }

  swift_unknownObjectRetain();
LABEL_9:
  uint64_t v17 = *(unsigned __int16 *)(*v4 + 16LL);
  if (v5 < v17)
  {
    uint64_t v18 = *v4 + 24 * v5;
    BOOL v20 = *(void *)(v18 + 24);
    uint64_t v19 = (uint64_t *)(v18 + 24);
    if (*(unsigned __int16 *)(v20 + 16) + (unint64_t)*(unsigned __int16 *)(v9 + 16) <= 0xF)
    {
      swift_unknownObjectRetain();
      specialized static Rope._Node.redistributeChildren(_:_:to:)(v36, v19, 0LL);
      swift_unknownObjectRelease();
      CFMutableDictionaryRef result = swift_unknownObjectRelease();
      uint64_t v26 = v4[1];
      __int128 v16 = __OFADD__(v26, v8);
      uint64_t v27 = v26 + v8;
      if (!v16)
      {
        v4[1] = v27;
        int v28 = v4[2];
        __int128 v16 = __OFADD__(v28, v7);
        uint64_t v29 = v28 + v7;
        if (!v16)
        {
          uint64_t v21 = 0LL;
          v4[2] = v29;
          goto LABEL_24;
        }

  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  if (v62) {
    goto LABEL_27;
  }
LABEL_22:
  Hasher._combine(_:)(0);
  uint64_t v21 = v63;
  if (!v63)
  {
LABEL_23:
    Hasher._combine(_:)(0);
    goto LABEL_29;
  }

    CFMutableDictionaryRef result = swift_release();
    v157[0] = v162;
    if (v153 < 0)
    {
LABEL_369:
      __break(1u);
LABEL_370:
      __break(1u);
      goto LABEL_371;
    }

    uint64_t v21 = v2[8];
    BOOL v20 = v2[9];
    uint64_t v22 = v2[10];
    uint64_t v23 = v2[11];
    v156 = v2;
    if (v153)
    {
      swift_unknownObjectRetain();
      swift_retain();
      int v24 = v22;
      CFMutableDictionaryRef result = specialized Rope._endPath.getter(v21);
      unint64_t v25 = result;
      if (v21)
      {
        CFMutableDictionaryRef result = swift_unknownObjectRelease();
        uint64_t v26 = 0LL;
      }

      else
      {
        uint64_t v26 = 0LL;
        BOOL v20 = 0LL;
        int v24 = 0LL;
      }

      goto LABEL_74;
    }

    if (v21)
    {
      if (v22 < 0)
      {
LABEL_386:
        __break(1u);
LABEL_387:
        __break(1u);
        goto LABEL_388;
      }

      if (*(_WORD *)(v21 + 16) && v22)
      {
        uint64_t v27 = *(unsigned __int8 *)(v21 + 18);
        if (*(_BYTE *)(v21 + 18))
        {
          swift_unknownObjectRetain_n();
          CFMutableDictionaryRef result = swift_retain();
          uint64_t v9 = 0LL;
          int v28 = v21;
          while (1)
          {
            uint64_t v30 = *(unsigned __int16 *)(v28 + 16);
            if (!*(_WORD *)(v28 + 16)) {
              goto LABEL_37;
            }
            CFRange v31 = *(void *)(v28 + 40);
            uint64_t v32 = __OFSUB__(v9, v31);
            unint64_t v33 = v9 - v31;
            if (v32) {
              goto LABEL_364;
            }
            if (__OFADD__(v33, 1LL))
            {
LABEL_365:
              __break(1u);
LABEL_366:
              __break(1u);
LABEL_367:
              __break(1u);
LABEL_368:
              __break(1u);
              goto LABEL_369;
            }

            if (v33 + 1 >= 1) {
              break;
            }
            uint64_t v30 = 0LL;
LABEL_38:
            uint64_t v29 = (4 * *(_BYTE *)(v28 + 18) + 8) & 0x3C;
            uint64_t v27 = ((-15LL << v29) - 1) & v27 | (v30 << v29);
            uint64_t v26 = *(void *)(v28 + 24 + 24 * v30);
            swift_unknownObjectRetain();
            CFMutableDictionaryRef result = swift_unknownObjectRelease();
            int v28 = v26;
            if (!*(_BYTE *)(v26 + 18)) {
              goto LABEL_58;
            }
          }

          if ((_DWORD)v30 != 1)
          {
            __int16 v34 = (uint64_t *)(v28 + 64);
            unint64_t v35 = 1LL;
            while (1)
            {
              v36 = *v34;
              v34 += 3;
              uint64_t v9 = v33 - v36;
              if (__OFSUB__(v33, v36)) {
                goto LABEL_342;
              }
              if (__OFADD__(v9, 1LL))
              {
LABEL_343:
                __break(1u);
LABEL_344:
                __break(1u);
LABEL_345:
                __break(1u);
LABEL_346:
                __break(1u);
LABEL_347:
                __break(1u);
LABEL_348:
                __break(1u);
LABEL_349:
                __break(1u);
LABEL_350:
                __break(1u);
LABEL_351:
                __break(1u);
                goto LABEL_352;
              }

              if (v9 + 1 < 1) {
                break;
              }
              ++v35;
              unint64_t v33 = v9;
              if (v30 == v35) {
                goto LABEL_37;
              }
            }

            uint64_t v30 = v35;
            uint64_t v9 = v33;
            goto LABEL_38;
          }

          uint64_t v9 = v33;
LABEL_37:
          if (v9) {
            goto LABEL_363;
          }
          goto LABEL_38;
        }

        swift_unknownObjectRetain_n();
        CFMutableDictionaryRef result = swift_retain();
        uint64_t v9 = 0LL;
        uint64_t v26 = v21;
LABEL_58:
        unint64_t v37 = *(unsigned __int16 *)(v26 + 16);
        if (!*(_WORD *)(v26 + 16)) {
          goto LABEL_71;
        }
        unint64_t v38 = *(void *)(v26 + 24);
        uint64_t v32 = __OFSUB__(v9, v38);
        unint64_t v39 = v9 - v38;
        if (v32)
        {
LABEL_391:
          __break(1u);
LABEL_392:
          __break(1u);
LABEL_393:
          if (!v9) {
            __break(1u);
          }
          goto LABEL_395;
        }

        if (__OFADD__(v39, 1LL)) {
          goto LABEL_392;
        }
        if (v39 + 1 < 1)
        {
          unint64_t v37 = 0LL;
          goto LABEL_72;
        }

        if ((_DWORD)v37 == 1)
        {
          uint64_t v9 = v39;
LABEL_71:
          if (!v9) {
            goto LABEL_72;
          }
          goto LABEL_390;
        }

        uint64_t v40 = (uint64_t *)(v26 + 48);
        unint64_t v41 = 1LL;
        while (1)
        {
          int v42 = *v40;
          v40 += 3;
          uint64_t v9 = v39 - v42;
          if (__OFSUB__(v39, v42)) {
            goto LABEL_384;
          }
          if (__OFADD__(v9, 1LL)) {
            break;
          }
          if (v9 + 1 < 1)
          {
            unint64_t v37 = v41;
            uint64_t v9 = v39;
LABEL_72:
            swift_unknownObjectRelease();
            swift_unknownObjectRelease();
            unint64_t v25 = v27 & 0xFFFFFFFFFFFFF0FFLL | (v37 << 8);
LABEL_53:
            swift_unknownObjectRetain();
            BOOL v20 = specialized Rope._Node.distanceFromStart<A>(to:in:)(v23, v25, v26, v21, v20);
            CFMutableDictionaryRef result = swift_unknownObjectRelease_n();
            int v24 = -v9;
            if (__OFSUB__(0LL, v9)) {
              goto LABEL_382;
            }
            goto LABEL_74;
          }

          ++v41;
          unint64_t v39 = v9;
          if (v37 == v41) {
            goto LABEL_71;
          }
        }

      uint64_t v19 = (4 * *(_BYTE *)(v18 + 18) + 8) & 0x3C;
      uint64_t v17 = ((-15LL << v19) - 1) & v17 | (v21 << v19);
      BOOL v20 = *(void *)(v18 + 24 + 24 * v21);
      swift_unknownObjectRetain();
      CFMutableDictionaryRef result = swift_unknownObjectRelease();
      uint64_t v18 = v20;
      if (!*(_BYTE *)(v20 + 18)) {
        goto LABEL_192;
      }
    }
  }

      uint64_t v27 = (4 * *(_BYTE *)(v26 + 18) + 8) & 0x3C;
      uint64_t v10 = ((-15LL << v27) - 1) & v10 | (v28 << v27);
      uint64_t v4 = *(void *)(v26 + 24 + 24 * v28);
      swift_unknownObjectRetain();
      CFMutableDictionaryRef result = swift_unknownObjectRelease();
      uint64_t v26 = v4;
      if (!*(_BYTE *)(v4 + 18)) {
        goto LABEL_73;
      }
    }
  }

  swift_unknownObjectRetain_n();
  CFMutableDictionaryRef result = swift_retain();
  unint64_t v25 = a3;
  uint64_t v4 = v6;
LABEL_73:
  int v44 = *(unsigned __int16 *)(v4 + 16);
  if (!*(_WORD *)(v4 + 16))
  {
LABEL_81:
    int v24 = v258;
    goto LABEL_89;
  }

  unint64_t v49 = *(void *)(v4 + 24);
  uint64_t v30 = __OFSUB__(v25, v49);
  unint64_t v50 = v25 - v49;
  if (v30) {
    goto LABEL_499;
  }
  if (!__OFADD__(v50, 1LL))
  {
    if (v50 + 1 < 1)
    {
      int v44 = 0LL;
      goto LABEL_90;
    }

    if ((_DWORD)v44 != 1)
    {
      v51 = (uint64_t *)(v4 + 48);
      id v52 = 1LL;
      while (1)
      {
        uint64_t v53 = *v51;
        v51 += 3;
        unint64_t v25 = v50 - v53;
        if (__OFSUB__(v50, v53)) {
          goto LABEL_486;
        }
        if (__OFADD__(v25, 1LL)) {
          goto LABEL_487;
        }
        if (v25 + 1 < 1) {
          break;
        }
        ++v52;
        unint64_t v50 = v25;
        if (v44 == v52) {
          goto LABEL_89;
        }
      }

      int v44 = v52;
      unint64_t v25 = v50;
      goto LABEL_90;
    }

    unint64_t v25 = v50;
LABEL_89:
    if (v25) {
      goto LABEL_496;
    }
LABEL_90:
    swift_unknownObjectRelease();
    CFMutableDictionaryRef result = swift_unknownObjectRelease();
    unint64_t v35 = v10 & 0xFFFFFFFFFFFFF0FFLL | (v44 << 8);
    uint64_t v23 = v264;
    if (!v6) {
      goto LABEL_91;
    }
    goto LABEL_41;
  }

        __break(1u);
        goto LABEL_27;
      }

      __break(1u);
      goto LABEL_27;
    }

    goto LABEL_23;
  }

    uint64_t v19 = swift_conformsToProtocol2();
    if (v19) {
      BOOL v20 = v19;
    }
    else {
      BOOL v20 = 0LL;
    }
    if (v19) {
      uint64_t v21 = v18;
    }
    else {
      uint64_t v21 = 0LL;
    }
    if (v21)
    {
      v75 = (*(uint64_t (**)(uint64_t, uint64_t))(v20 + 24))(v21, v20);
      v77 = v76;
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      v201 = v75;
      v79 = v75;
      uint64_t v10 = v6;
      v81 = specialized __RawDictionaryStorage.find<A>(_:)(v79, v77);
      v82 = *(void *)(v6 + 16);
      v83 = (v80 & 1) == 0;
      v84 = v82 + v83;
      if (__OFADD__(v82, v83)) {
        goto LABEL_261;
      }
      if (*(void *)(v6 + 24) < v84)
      {
        v198 = v80;
        specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)( v84,  isUniquelyReferenced_nonNull_native);
        uint64_t v10 = v6;
        v85 = specialized __RawDictionaryStorage.find<A>(_:)(v201, v77);
        v87 = v86 & 1;
        v80 = v198;
        if ((v198 & 1) != v87) {
          goto LABEL_271;
        }
        v81 = v85;
LABEL_106:
        if ((v80 & 1) == 0) {
          goto LABEL_193;
        }
LABEL_107:
        v88 = (uint64_t *)(*(void *)(v6 + 56) + 16 * v81);
        *v88 = v21;
        v88[1] = v20;
        goto LABEL_195;
      }

      if ((isUniquelyReferenced_nonNull_native & 1) != 0) {
        goto LABEL_106;
      }
      v199 = v80;
      uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, AttributedStringKey.Type>);
      v197 = static _DictionaryStorage.copy(original:)();
      if (!*(void *)(v6 + 16)) {
        goto LABEL_192;
      }
      v132 = (char *)(v197 + 64);
      __srca = (char *)(v6 + 64);
      v133 = (unint64_t)((1LL << *(_BYTE *)(v197 + 32)) + 63) >> 6;
      if (v197 != v6 || v132 >= &__srca[8 * v133]) {
        memmove(v132, __srca, 8 * v133);
      }
      uint64_t v10 = 0LL;
      *(void *)(v197 + 16) = *(void *)(v6 + 16);
      v134 = 1LL << *(_BYTE *)(v6 + 32);
      if (v134 < 64) {
        v135 = ~(-1LL << v134);
      }
      else {
        v135 = -1LL;
      }
      v136 = v135 & *(void *)(v6 + 64);
      v137 = (unint64_t)(v134 + 63) >> 6;
      while (1)
      {
        if (v136)
        {
          v138 = __clz(__rbit64(v136));
          v136 &= v136 - 1;
          v139 = v138 | (v10 << 6);
        }

        else
        {
          unint64_t v50 = __OFADD__(v10++, 1LL);
          if (v50) {
            goto LABEL_267;
          }
          if (v10 >= v137) {
            goto LABEL_192;
          }
          v146 = *(void *)&__srca[8 * v10];
          if (!v146)
          {
            v147 = v10 + 1;
            if (v10 + 1 >= v137) {
              goto LABEL_192;
            }
            v146 = *(void *)&__srca[8 * v147];
            if (!v146)
            {
              v147 = v10 + 2;
              if (v10 + 2 >= v137) {
                goto LABEL_192;
              }
              v146 = *(void *)&__srca[8 * v147];
              if (!v146)
              {
                v147 = v10 + 3;
                if (v10 + 3 >= v137) {
                  goto LABEL_192;
                }
                v146 = *(void *)&__srca[8 * v147];
                if (!v146)
                {
                  v147 = v10 + 4;
                  if (v10 + 4 >= v137) {
                    goto LABEL_192;
                  }
                  v146 = *(void *)&__srca[8 * v147];
                  if (!v146)
                  {
                    v147 = v10 + 5;
                    if (v10 + 5 >= v137) {
                      goto LABEL_192;
                    }
                    v146 = *(void *)&__srca[8 * v147];
                    if (!v146)
                    {
                      v147 = v10 + 6;
                      if (v10 + 6 >= v137) {
                        goto LABEL_192;
                      }
                      v146 = *(void *)&__srca[8 * v147];
                      if (!v146)
                      {
                        v147 = v10 + 7;
                        if (v10 + 7 >= v137) {
                          goto LABEL_192;
                        }
                        v146 = *(void *)&__srca[8 * v147];
                        if (!v146)
                        {
                          v147 = v10 + 8;
                          if (v10 + 8 >= v137) {
                            goto LABEL_192;
                          }
                          v146 = *(void *)&__srca[8 * v147];
                          if (!v146)
                          {
                            while (1)
                            {
                              uint64_t v10 = v147 + 1;
                              if (__OFADD__(v147, 1LL)) {
                                goto LABEL_272;
                              }
                              if (v10 >= v137) {
                                break;
                              }
                              v146 = *(void *)&__srca[8 * v10];
                              ++v147;
                              if (v146) {
                                goto LABEL_187;
                              }
                            }

        if (v8 <= v11 >> 16) {
          goto LABEL_63;
        }
        uint64_t v11 = String.UTF8View._foreignIndex(after:)();
        if ((v16 & 0x80) != 0)
        {
LABEL_60:
          uint64_t v18 = 0;
          return v18 & 1;
        }

  *uint64_t v2 = v5;
  v2[1] = v6;
  v2[2] = v7;
}

          Hasher._combine(_:)(1u);
          swift_bridgeObjectRetain();
          specialized Dictionary<>.hash(into:)(a1, v15);
          swift_bridgeObjectRelease();
LABEL_27:
          uint64_t v18 = v49;
          uint64_t v17 = v50;
          BOOL v20 = v51;
          uint64_t v19 = v52;
          uint64_t v21 = v53;
          if (v49)
          {
            Hasher._combine(_:)(1u);
            type metadata accessor for CFDictionaryRef(0LL);
            lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef();
            uint64_t v22 = v17;
            uint64_t v23 = v20;
            int v24 = v19;
            unint64_t v25 = v21;
            uint64_t v26 = v18;
            _CFObject.hash(into:)();
            if (v17) {
              goto LABEL_29;
            }
          }

          else
          {
            Hasher._combine(_:)(0);
            CFRange v31 = v21;
            uint64_t v32 = v17;
            unint64_t v33 = v20;
            __int16 v34 = v19;
            if (v17)
            {
LABEL_29:
              Hasher._combine(_:)(1u);
              type metadata accessor for CFDictionaryRef(0LL);
              lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef();
              uint64_t v27 = v17;
              _CFObject.hash(into:)();

              if (v20) {
                goto LABEL_30;
              }
              goto LABEL_35;
            }
          }

          Hasher._combine(_:)(0);
          if (v20)
          {
LABEL_30:
            Hasher._combine(_:)(1u);
            type metadata accessor for CFDictionaryRef(0LL);
            lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef();
            int v28 = v20;
            _CFObject.hash(into:)();

            if (v19) {
              goto LABEL_31;
            }
            goto LABEL_36;
          }

  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)((uint64_t)v62, v14);
  swift_bridgeObjectRelease();
LABEL_27:
  __int128 v16 = v47;
  uint64_t v15 = v48;
  uint64_t v18 = v49;
  uint64_t v17 = v50;
  uint64_t v19 = v51;
  if (v47)
  {
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0LL);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef();
    BOOL v20 = v15;
    uint64_t v21 = v18;
    uint64_t v22 = v17;
    uint64_t v23 = v19;
    int v24 = v16;
    _CFObject.hash(into:)();
    if (v15) {
      goto LABEL_29;
    }
  }

  else
  {
    Hasher._combine(_:)(0);
    uint64_t v29 = v19;
    uint64_t v30 = v15;
    CFRange v31 = v18;
    uint64_t v32 = v17;
    if (v15)
    {
LABEL_29:
      Hasher._combine(_:)(1u);
      type metadata accessor for CFDictionaryRef(0LL);
      lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef();
      unint64_t v25 = v15;
      _CFObject.hash(into:)();

      if (v18) {
        goto LABEL_30;
      }
      goto LABEL_35;
    }
  }

  Hasher._combine(_:)(0);
  if (v18)
  {
LABEL_30:
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0LL);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef();
    uint64_t v26 = v18;
    _CFObject.hash(into:)();

    if (v17) {
      goto LABEL_31;
    }
LABEL_36:
    Hasher._combine(_:)(0);
    if (v19) {
      goto LABEL_32;
    }
    goto LABEL_37;
  }

        if (!v35) {
          goto LABEL_27;
        }
LABEL_203:
        __break(1u);
LABEL_204:
        __break(1u);
LABEL_205:
        __break(1u);
LABEL_206:
        __break(1u);
LABEL_207:
        __break(1u);
LABEL_208:
        __break(1u);
LABEL_209:
        __break(1u);
LABEL_210:
        __break(1u);
LABEL_211:
        __break(1u);
LABEL_212:
        __break(1u);
LABEL_213:
        __break(1u);
LABEL_214:
        __break(1u);
LABEL_215:
        __break(1u);
LABEL_216:
        __break(1u);
LABEL_217:
        __break(1u);
LABEL_218:
        __break(1u);
LABEL_219:
        __break(1u);
LABEL_220:
        __break(1u);
        goto LABEL_221;
      }

      CFMutableDictionaryRef result = swift_unknownObjectRetain_n();
      __int16 v34 = 0LL;
      unint64_t v35 = v24;
      unint64_t v38 = v30;
LABEL_47:
      unint64_t v48 = *(unsigned __int16 *)(v38 + 16);
      v49.i64[0] = -1LL;
      v49.i64[1] = -1LL;
      if (*(_WORD *)(v38 + 16))
      {
        unint64_t v50 = v35 - 1;
        if (__OFSUB__(v35, 1LL)) {
          goto LABEL_225;
        }
        if (__OFADD__(v50, 1LL)) {
          goto LABEL_226;
        }
        if (v35 < 1)
        {
          unint64_t v48 = 0LL;
LABEL_69:
          swift_unknownObjectRelease();
          swift_unknownObjectRelease();
          unint64_t v47 = v34 & 0xFFFFFFFFFFFFF0FFLL | (v48 << 8);
          uint64_t v22 = v163;
          goto LABEL_70;
        }

        if ((_DWORD)v48 != 1)
        {
          v51 = v48 - 2;
          if (v50 < v48 - 2) {
            v51 = v35 - 1;
          }
          if (v51 >= v35 + 0x7FFFFFFFFFFFFFFFLL) {
            v51 = v35 + 0x7FFFFFFFFFFFFFFFLL;
          }
          id v52 = v51 + 1;
          if (v52 >= 5)
          {
            v54 = v52 & 3;
            if ((v52 & 3) == 0) {
              v54 = 4LL;
            }
            v55 = v52 - v54;
            uint64_t v53 = v55 + 1;
            v56 = 0uLL;
            v57 = (int64x2_t)(unint64_t)(v35 - 1);
            do
            {
              v57 = vaddq_s64(v57, v49);
              v56 = vaddq_s64(v56, v49);
              v55 -= 4LL;
            }

            while (v55);
            unint64_t v50 = vaddvq_s64(vaddq_s64(v56, v57));
          }

          else
          {
            uint64_t v53 = 1LL;
          }

          while (1)
          {
            if (v35 + 0x8000000000000000LL == v53) {
              goto LABEL_219;
            }
            if (v35 == v53) {
              break;
            }
            ++v53;
            --v50;
            if (v48 == v53) {
              goto LABEL_68;
            }
          }

          unint64_t v48 = v35;
          goto LABEL_69;
        }
      }

      else
      {
        unint64_t v50 = v35;
      }

  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)((uint64_t)v65, v17);
  swift_bridgeObjectRelease();
LABEL_27:
  uint64_t v19 = v50;
  uint64_t v18 = v51;
  uint64_t v21 = v52;
  BOOL v20 = v53;
  uint64_t v22 = v54;
  if (v50)
  {
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0LL);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( (unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef,  (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef,  (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
    uint64_t v23 = v18;
    int v24 = v21;
    unint64_t v25 = v20;
    uint64_t v26 = v22;
    uint64_t v27 = v19;
    _CFObject.hash(into:)();
    if (v18) {
      goto LABEL_29;
    }
  }

  else
  {
    Hasher._combine(_:)(0);
    uint64_t v32 = v22;
    unint64_t v33 = v18;
    __int16 v34 = v21;
    unint64_t v35 = v20;
    if (v18)
    {
LABEL_29:
      Hasher._combine(_:)(1u);
      type metadata accessor for CFDictionaryRef(0LL);
      lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( (unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef,  (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef,  (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
      int v28 = v18;
      _CFObject.hash(into:)();

      if (v21) {
        goto LABEL_30;
      }
      goto LABEL_35;
    }
  }

  Hasher._combine(_:)(0);
  if (v21)
  {
LABEL_30:
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0LL);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( (unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef,  (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef,  (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
    uint64_t v29 = v21;
    _CFObject.hash(into:)();

    if (v20) {
      goto LABEL_31;
    }
LABEL_36:
    Hasher._combine(_:)(0);
    if (v22) {
      goto LABEL_32;
    }
    goto LABEL_37;
  }

  -[NSFunctionExpression _validateExpression]((uint64_t)v5);
  if ((objc_opt_isKindOfClass() & 1) != 0)
  {
    selector = (char *)v5->_selector;
    if (selector != sel_valueForKeyPath_ && selector != sel_valueForKey_)
    {
      objc_opt_self();
      if ((_CFPredicatePolicyData_getFlags() & 8) != 0) {
        goto LABEL_38;
      }
    }
  }

  if (v22)
  {
  }

  if (v11)
  {

    objc_exception_throw(v11);
LABEL_38:
    uint64_t v19 = (void *)MEMORY[0x189603F70];
    BOOL v20 = *MEMORY[0x189603A60];
    uint64_t v21 = @"NSKeyPathExpression is malformed";
LABEL_36:
    objc_exception_throw((id)[v19 exceptionWithName:v20 reason:v21 userInfo:0]);
  }

  return v5;
}

  CFMutableDictionaryRef result = *(void *)(a1 + 48) + *(void *)(a1 + 56);
  *(void *)(a1 + 40) = result;
  return result;
}

  CFMutableDictionaryRef result = *(void *)(a1 + 48) + *(void *)(a1 + 56);
  *(void *)(a1 + 40) = result;
  return result;
}

  CFMutableDictionaryRef result = *(void *)(a1 + 48) + *(void *)(a1 + 56);
  *(void *)(a1 + 40) = result;
  return result;
}

  CFMutableDictionaryRef result = *(void *)(a1 + 48) + *(void *)(a1 + 56);
  *(void *)(a1 + 40) = result;
  return result;
}

  CFMutableDictionaryRef result = *(void *)(a1 + 48) + *(void *)(a1 + 56);
  *(void *)(a1 + 40) = result;
  return result;
}

  CFMutableDictionaryRef result = *(void *)(a1 + 48) + *(void *)(a1 + 56);
  *(void *)(a1 + 40) = result;
  return result;
}

  a1[12] = a1[8];
  CFMutableDictionaryRef result = a1[18] + a1[17];
  a1[5] = result;
  return result;
}

  a1[12] = a1[8];
  CFMutableDictionaryRef result = a1[18] + a1[17];
  a1[5] = result;
  return result;
}

  a1[12] = a1[8];
  CFMutableDictionaryRef result = a1[18] + a1[17];
  a1[5] = result;
  return result;
}

  a1[12] = a1[8];
  CFMutableDictionaryRef result = a1[18] + a1[17];
  a1[5] = result;
  return result;
}

  a1[12] = a1[8];
  CFMutableDictionaryRef result = a1[18] + a1[17];
  a1[5] = result;
  return result;
}

  a1[12] = a1[8];
  CFMutableDictionaryRef result = a1[18] + a1[17];
  a1[5] = result;
  return result;
}

  a1[12] = a1[8];
  CFMutableDictionaryRef result = a1[18] + a1[17];
  a1[5] = result;
  return result;
}

  a1[12] = a1[8];
  CFMutableDictionaryRef result = a1[18] + a1[17];
  a1[5] = result;
  return result;
}

  a1[12] = a1[8];
  CFMutableDictionaryRef result = a1[18] + a1[17];
  a1[5] = result;
  return result;
}

  a1[12] = a1[8];
  CFMutableDictionaryRef result = a1[18] + a1[17];
  a1[5] = result;
  return result;
}

  CFIndex Length = CFStringGetLength((CFStringRef)a3);
  LODWORD(a1) = Length > 899;
  MEMORY[0x1895F8858](Length);
  uint64_t v9 = (UniChar *)((char *)v40 - v24);
  if (v25 < 900)
  {
    uint64_t v26 = 1024LL;
  }

  else
  {
    uint64_t v26 = Length + 200;
    uint64_t v9 = (UniChar *)malloc(2 * (Length + 200));
  }

  v50.location = 0LL;
  v50.length = Length;
  CFStringGetCharacters((CFStringRef)a3, v50, v9);
  v9[Length] = 0;
  if (((a6 >> 2) & 1) == 0)
  {
    MutableWithExternalCharactersNoCopy = CFStringCreateMutableWithExternalCharactersNoCopy( (CFAllocatorRef)*MEMORY[0x189604DB0],  v9,  Length,  v26,  (CFAllocatorRef)*MEMORY[0x189604DC8]);
    int v28 = MutableWithExternalCharactersNoCopy;
    if ((a6 & 3) != 0) {
      CFStringFold(MutableWithExternalCharactersNoCopy, v15, 0LL);
    }
    CFStringNormalize(v28, (CFStringNormalizationForm)a7->var2);
    if (CFStringGetCharactersPtr(v28) == v9)
    {
      LODWORD(Length) = CFStringGetLength(v28);
    }

    else
    {
      if (Length >= 900) {
        free(v9);
      }
      CFIndex Length = CFStringGetLength(v28);
      uint64_t v9 = (UniChar *)malloc(2 * Length + 2);
      LODWORD(a1) = 1;
      v51.location = 0LL;
      v51.length = Length;
      CFStringGetCharacters(v28, v51, v9);
      v9[Length] = 0;
    }

    CFRelease(v28);
  }

  uregex_setText((URegularExpression *)a7->var1, v9, Length, &status);
  uint64_t v29 = status;
  if (status > U_ZERO_ERROR) {
    goto LABEL_44;
  }
  uint64_t v30 = uregex_matches((URegularExpression *)a7->var1, 0, &status);
  uint64_t v29 = status;
  if (status >= U_ILLEGAL_ARGUMENT_ERROR)
  {
    uint64_t v32 = @"Can't do match %s (string %@, pattern %@, case %ld, canon %ld)";
    goto LABEL_46;
  }

  if ((_DWORD)a1) {
    free(v9);
  }
  return v30 != 0;
}
  }

  if (_MergedGlobals_132) {
    NSLog((NSString *)@"<KVODebugging>: %@ -- No longer tracking for consistency changes.", a4);
  }
  if (qword_18C496D20 != -1) {
    dispatch_once(&qword_18C496D20, &__block_literal_global_143);
  }
  uint64_t v18 = (os_log_s *)qword_18C496D18;
  if (os_log_type_enabled((os_log_t)qword_18C496D18, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 138543362;
    BOOL v20 = a4;
    _os_log_impl( &dword_182EB1000,  v18,  OS_LOG_TYPE_INFO,  "%{public}@ -- No longer tracking for consistency changes.",  buf,  0xCu);
  }

  os_unfair_lock_lock(&self->_lock);
  if ((id)-[NSMutableDictionary objectForKeyedSubscript:](self->_consistencyTable, "objectForKeyedSubscript:", a4) == a3) {
    -[NSMutableDictionary removeObjectForKey:](self->_consistencyTable, "removeObjectForKey:", a4);
  }
  os_unfair_lock_unlock(&self->_lock);
}

    CFMutableDictionaryRef result = [(id)a1 automaticallyEmitsObjects];
    if (!(_DWORD)result) {
      return result;
    }
    [(id)a1 emitObject];
    return 0LL;
  }

  CFMutableDictionaryRef result = [*(id *)(a1 + 136) count];
  if (!result)
  {
    *(_DWORD *)(a1 + 64) = 0;
    return result;
  }

  unint64_t v7 = result;
  if (_pressureSensitiveMaxCount_onceToken != -1) {
    dispatch_once(&_pressureSensitiveMaxCount_onceToken, &__block_literal_global_58);
  }
  [(id)a1 isMemoryPressureSensitive];
  if (v7 < *(void *)(a1 + 144)) {
    goto LABEL_26;
  }
  *(_DWORD *)(a1 + 64) = 2;
  dispatch_suspend(*(dispatch_object_t *)(a1 + 40));
  return 1LL;
}

void append4Bytes(void *a1, unsigned __int8 *a2)
{
  uint64_t v21 = *MEMORY[0x1895F89C0];
  unsigned int v3 = *a2;
  if (v3 >= 0xA0) {
    char v4 = 87;
  }
  else {
    char v4 = 48;
  }
  bytes[0] = v4 + (*a2 >> 4);
  unsigned int v5 = v3 & 0xF;
  if (v5 >= 0xA) {
    char v6 = 87;
  }
  else {
    char v6 = 48;
  }
  bytes[1] = v6 + v5;
  unsigned int v7 = a2[1];
  if (v7 >= 0xA0) {
    char v8 = 87;
  }
  else {
    char v8 = 48;
  }
  bytes[2] = v8 + (a2[1] >> 4);
  unsigned int v9 = v7 & 0xF;
  if (v9 >= 0xA) {
    char v10 = 87;
  }
  else {
    char v10 = 48;
  }
  bytes[3] = v10 + v9;
  unsigned int v11 = a2[2];
  if (v11 >= 0xA0) {
    char v12 = 87;
  }
  else {
    char v12 = 48;
  }
  bytes[4] = v12 + (a2[2] >> 4);
  unsigned int v13 = v11 & 0xF;
  if (v13 >= 0xA) {
    char v14 = 87;
  }
  else {
    char v14 = 48;
  }
  bytes[5] = v14 + v13;
  unsigned int v15 = a2[3];
  if (v15 >= 0xA0) {
    char v16 = 87;
  }
  else {
    char v16 = 48;
  }
  bytes[6] = v16 + (a2[3] >> 4);
  unsigned int v17 = v15 & 0xF;
  if (v17 >= 0xA) {
    char v18 = 87;
  }
  else {
    char v18 = 48;
  }
  bytes[7] = v18 + v17;
  bytes[8] = 32;
  CFStringRef v19 = CFStringCreateWithBytes(0LL, bytes, 9LL, 0x600u, 0);
  [a1 appendString:v19];
  CFRelease(v19);
}

LABEL_29:
          char v16 = v21;
          unsigned int v15 = v22;
          if (v22 >= v21)
          {
            unsigned int v17 = v24 + v21;
            if (v4 > v24 + v21)
            {
              if (v4 - (v24 + v21) >= 0x20) {
                char v18 = 32LL;
              }
              else {
                char v18 = v4 - (v24 + v21);
              }
              v24 += v21;
              uint64_t v21 = v18;
              objc_msgSend(v23, sel_getUid("getCharacters:range:"), v25, v17, v18);
              unsigned int v9 = v25[0];
              uint64_t v26 = v25[0];
              uint64_t v22 = 1LL;
              char v16 = v18;
              char v10 = 1LL;
              goto LABEL_38;
            }

            char v10 = v21 + 1;
            uint64_t v22 = v21 + 1;
            unsigned int v9 = -1;
          }

          else
          {
            char v10 = ++v22;
            unsigned int v9 = v25[v15];
          }

          uint64_t v26 = v9;
LABEL_38:
          if (v10 - 1 >= v16)
          {
            *(_WORD *)&v7[v11] = 34;
            BOOL v20 = (const char *)__CFSafelyReallocateWithAllocator();
            return (id)(id)CFStringCreateWithCStringNoCopy( (CFAllocatorRef)*MEMORY[0x189604DB0],  v20,  0x600u,  0LL);
          }

          break;
      }
    }
  }

  return result;
}

    -[NSCoder __failWithExceptionName:errorCode:format:]( self,  "__failWithExceptionName:errorCode:format:",  @"NSArchiverArchiveInconsistency",  4864LL,  v21,  v20);
    goto LABEL_36;
  }

  Count = CFArrayGetCount(containers);
  ValueAtIndex = (const __CFArray *)CFArrayGetValueAtIndex(self->_containers, Count - 1);
  if (CFGetTypeID(ValueAtIndex) == 19)
  {
    Value = (void *)CFArrayGetValueAtIndex(ValueAtIndex, 0LL);
    char v12 = Value;
    CFArrayRemoveValueAtIndex(ValueAtIndex, 0LL);
  }

  else
  {
    Value = (void *)CFDictionaryGetValue(ValueAtIndex, v6);
    uint64_t v22 = Value;
  }

  if (Value)
  {
    CFStringRef v19 = [Value count];
    uint64_t v23 = _CFCreateArrayStorage();
    v54[3] = v23;
    if (v23)
    {
      CFRetain(Value);
      CFArrayAppendValue(self->_containers, Value);
      int v24 = CFGetTypeID(Value);
      unint64_t v25 = atomic_load(&self->_flags);
      atomic_store(v25 & 0xFFFFFFFFFFFFFFFELL | (v24 == 19), &self->_flags);
      v58[3] = 0LL;
      if (v19)
      {
        uint64_t v26 = 0LL;
        uint64_t v27 = v54[3];
        do
        {
          _decodeObjectXML((uint64_t)self, &stru_189CA6A28, (void *)(v27 + 8 * v26));
          uint64_t v27 = v54[3];
          int v28 = v58[3];
          uint64_t v29 = *(void *)(v27 + 8 * v28);
          uint64_t v30 = v29 == 0;
          if (!v29) {
            break;
          }
          uint64_t v26 = v28 + 1;
          v58[3] = v26;
        }

        while (v26 < v19);
      }

      else
      {
        uint64_t v30 = 0;
      }

      CFRange v31 = CFArrayGetCount(self->_containers);
      uint64_t v32 = CFArrayGetValueAtIndex(self->_containers, v31 - 1);
      CFArrayRemoveValueAtIndex(self->_containers, v31 - 1);
      CFRelease(v32);
      unint64_t v33 = v31 - 2;
      if (v31 >= 2)
      {
        __int16 v34 = CFArrayGetValueAtIndex(self->_containers, v33);
        unint64_t v35 = CFGetTypeID(v34);
        v36 = atomic_load(&self->_flags);
        atomic_store(v36 & 0xFFFFFFFFFFFFFFFELL | (v35 == 19), &self->_flags);
      }

      if (v30)
      {
LABEL_34:
        ((void (*)(void *, CFIndex))v49)(v48, v33);
        unint64_t v37 = 0LL;
LABEL_45:
        unint64_t v38 = v37;
        goto LABEL_46;
      }

          os_unfair_lock_unlock(v2);
        }

        return swift_release();
      }

      goto LABEL_33;
    }

      unsigned int v7 = 0LL;
      unsigned int v5 = 0LL;
      char v4 = v10;
      goto LABEL_5;
    }

    unint64_t v37 = String.subscript.getter();
    uint64_t v22 = MEMORY[0x186E1B610](v37);
    uint64_t v27 = v38;
    unsigned int v9 = swift_bridgeObjectRelease();
    goto LABEL_30;
  }

  unsigned int v9 = URLComponents._URLComponents.port.getter();
  if ((v30 & 1) == 0
    || (URLComponents._URLComponents.percentEncodedUser.getter(), v32 = v31, unsigned int v9 = swift_bridgeObjectRelease(), v32))
  {
    unint64_t v33 = v97;
    __int16 v34 = v96;
    unint64_t v35 = v95;
    if ((v29 & 1) != 0 || (v10[120] & 1) != 0) {
      goto LABEL_21;
    }
    goto LABEL_29;
  }

  swift_bridgeObjectRetain();
  char v16 = swift_bridgeObjectRelease();
  *(void *)(v3 + 72) = a1;
  *(void *)(v3 + 80) = a2;
  LOBYTE(v2_Block_object_dispose(va, 8) = 37;
  MEMORY[0x1895F8858](v16);
  uint64_t v26 = (uint64_t)&v28;
  swift_bridgeObjectRetain();
  unsigned int v17 = specialized Sequence.contains(where:)( (uint64_t (*)(void *))partial apply for specialized closure #1 in Sequence<>.contains(_:),  (uint64_t)&v25,  a1,  a2);
  CFMutableDictionaryRef result = swift_bridgeObjectRelease_n();
  *(_BYTE *)(v3 + 152) = v17 & 1;
  return result;
}

      (*(void (**)(char *, char *, uint64_t))(v47 + 32))(v44, v45, v46);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v47 + 56))(v44, 0LL, 1LL, v46);
      goto LABEL_30;
    case 13:
      *(void *)a1 = *(void *)a2;
      char v8 = (_OWORD *)((char *)a1 + v7);
      unsigned int v9 = (_OWORD *)((char *)a2 + v7);
      type metadata accessor for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format(0LL);
      char v10 = swift_getEnumCaseMultiPayload();
      if (v10 == 2)
      {
        NSConcreteData *v8 = *v9;
        unint64_t v39 = &demangling cache variable for type metadata for IntegerFormatStyle<Int>.Percent;
      }

      else
      {
        if (v10 == 1)
        {
          unsigned int v11 = v9[1];
          NSConcreteData *v8 = *v9;
          v8[1] = v11;
          unsigned int v13 = (char *)v8 + v12;
          char v14 = (char *)v9 + v12;
          *(void *)unsigned int v13 = *(void *)((char *)v9 + v12);
          v13[8] = *((_BYTE *)v9 + v12 + 8);
          unsigned int v15 = *(_OWORD *)((char *)v9 + v12 + 32);
          *((_OWORD *)v13 + 1) = *(_OWORD *)((char *)v9 + v12 + 16);
          *((_OWORD *)v13 + 2) = v15;
          *((_OWORD *)v13 + 3) = *(_OWORD *)((char *)v9 + v12 + 48);
          *(_OWORD *)(v13 + 57) = *(_OWORD *)((char *)v9 + v12 + 57);
          v13[73] = *((_BYTE *)v9 + v12 + 73);
          *(_DWORD *)(v13 + 74) = *(_DWORD *)((char *)v9 + v12 + 74);
          v13[78] = *((_BYTE *)v9 + v12 + 78);
          char v16 = (int *)type metadata accessor for CurrencyFormatStyleConfiguration.Collection(0LL);
          unsigned int v17 = v16[9];
          char v18 = &v13[v17];
          CFStringRef v19 = &v14[v17];
          BOOL v20 = type metadata accessor for FloatingPointRoundingRule();
          uint64_t v21 = *(void *)(v20 - 8);
          goto LABEL_31;
        }

        NSConcreteData *v8 = *v9;
        unint64_t v39 = (uint64_t *)&demangling cache variable for type metadata for IntegerFormatStyle<Int>;
      }

      uint64_t v40 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(v39) + 36);
      unsigned int v13 = (char *)v8 + v40;
      char v14 = (char *)v9 + v40;
      *(void *)unsigned int v13 = *(void *)((char *)v9 + v40);
      v13[8] = *((_BYTE *)v9 + v40 + 8);
      unint64_t v41 = *(_OWORD *)((char *)v9 + v40 + 32);
      *((_OWORD *)v13 + 1) = *(_OWORD *)((char *)v9 + v40 + 16);
      *((_OWORD *)v13 + 2) = v41;
      *((_OWORD *)v13 + 3) = *(_OWORD *)((char *)v9 + v40 + 48);
      *(_OWORD *)(v13 + 57) = *(_OWORD *)((char *)v9 + v40 + 57);
      v13[73] = *((_BYTE *)v9 + v40 + 73);
      v13[76] = *((_BYTE *)v9 + v40 + 76);
      *((_WORD *)v13 + 37) = *(_WORD *)((char *)v9 + v40 + 74);
      v13[77] = *((_BYTE *)v9 + v40 + 77);
      int v42 = (int *)type metadata accessor for NumberFormatStyleConfiguration.Collection(0LL);
      unint64_t v43 = v42[9];
      int v44 = &v13[v43];
      unint64_t v45 = &v14[v43];
      unint64_t v46 = type metadata accessor for FloatingPointRoundingRule();
      unint64_t v47 = *(void *)(v46 - 8);
      goto LABEL_29;
  }

  memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64LL));
  return a1;
}

  uint64_t v23 = v19 * a1;
  if ((unsigned __int128)(v19 * (__int128)a1) >> 64 != (v19 * a1) >> 63)
  {
LABEL_82:
    __break(1u);
    goto LABEL_83;
  }

  if (v23 == 0x7FFFFFFFFFFFFFFFLL) {
    CFStringRef v19 = 0LL;
  }
  else {
    v19 *= a1;
  }
  unint64_t v48 = v23 == 0x7FFFFFFFFFFFFFFFLL;
  if ((__dst[15] & 1) != 0)
  {
LABEL_9:
    if ((__dst[17] & 1) != 0) {
      goto LABEL_10;
    }
    goto LABEL_39;
  }

  Hasher._combine(_:)(0);
  if (!v35)
  {
LABEL_18:
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v22);
    if (!v36) {
      goto LABEL_19;
    }
    goto LABEL_31;
  }

  Hasher._combine(_:)(0);
  if (!v37)
  {
LABEL_14:
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v24);
    if (!v38) {
      goto LABEL_15;
    }
    goto LABEL_31;
  }

  Hasher._combine(_:)(0);
  if (!v37)
  {
LABEL_14:
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v24);
    if (!v38) {
      goto LABEL_15;
    }
    goto LABEL_31;
  }

  objc_msgSend(v8, sel_setMinute_, v24);
  if ((v40 & 1) != 0)
  {
LABEL_12:
    if ((v41 & 1) != 0) {
      goto LABEL_13;
    }
    goto LABEL_31;
  }

  __break(1u);
LABEL_30:
  __break(1u);
  return result;
}

  Hasher._combine(_:)(0);
  if (BYTE4(v9) == 9)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    Hasher._combine(_:)(1u);
    specialized RawRepresentable<>.hash(into:)(a1, SBYTE4(v9));
  }

  if (BYTE5(v9) == 14)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    Hasher._combine(_:)(1u);
    Date.FormatStyle.Symbol.SymbolType.HourOption.rawValue.getter(BYTE5(v9));
    String.hash(into:)();
    swift_bridgeObjectRelease();
  }

  if ((v9 & 0xFF000000000000LL) == 0x2000000000000LL)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    Hasher._combine(_:)(1u);
    String.hash(into:)();
    swift_bridgeObjectRelease();
  }

  if (HIBYTE(v9) == 2)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    Hasher._combine(_:)(1u);
    String.hash(into:)();
    swift_bridgeObjectRelease();
  }

  if ((_BYTE)v10 == 0xFF)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    Hasher._combine(_:)(1u);
    specialized RawRepresentable<>.hash(into:)(a1, v8, v10 & 1);
  }

  if (v10 >> 8 == 12) {
    goto LABEL_45;
  }
  Hasher._combine(_:)(1u);
  Date.FormatStyle.Symbol.SymbolType.TimeZoneSymbolOption.rawValue.getter(BYTE1(v10));
  String.hash(into:)();
  swift_bridgeObjectRelease();
}

  if ((uint64_t)v12 < (uint64_t)v11)
  {
    while (v12 >= v11)
    {
      __break(1u);
LABEL_39:
      unsigned int v3 = WORD1(v5);
      char v12 = v10;
    }

    while (v12 >= *(void *)(v9 + 16))
    {
LABEL_35:
      __break(1u);
LABEL_36:
      if (!v11) {
        goto LABEL_41;
      }
      char v12 = 0LL;
      unsigned int v3 = 1;
    }

    char v18 = v3 + (*(unsigned __int16 *)(a2 + 32 + 2 * v12) ^ 0xFFFF);
    --v11;
    while (1)
    {
      unsigned int v3 = HIWORD(v18);
      *(_WORD *)(v9 + 32 + 2 * v12) = v18;
      if (v11 == v12) {
        break;
      }
      char v18 = v3 + (*(unsigned __int16 *)(a2 + 34 + 2 * v12++) ^ 0xFFFF);
      if (v12 >= *(void *)(v9 + 16)) {
        goto LABEL_35;
      }
    }
  }

  swift_retain();
LABEL_30:
  v32[19] = v38;
  v66 = *(uint64_t (**)(uint64_t))(*v32 + 208LL);
  v67 = swift_retain();
  if ((v66(v67) & 1) != 0)
  {
    type metadata accessor for JSONReference();
    v68 = swift_allocObject();
    *(void *)(v68 + 16) = MEMORY[0x18961AFE8];
    *(void *)(v68 + 24) = 0LL;
    *(_BYTE *)(v68 + 32) = 3;
    v69 = swift_retain();
    MEMORY[0x186E1BAC0](v69);
    if (*(void *)((*(void *)v27 & 0xFFFFFFFFFFFFFF8LL) + 0x10) >= *(void *)((*(void *)v27 & 0xFFFFFFFFFFFFFF8LL)
                                                                                 + 0x18) >> 1)
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized Array._endMutation()();
    goto LABEL_42;
  }

  v70 = *(void *)v27;
  if (!(*(void *)v27 >> 62))
  {
    v71 = *(void *)((v70 & 0xFFFFFFFFFFFFF8LL) + 0x10);
    swift_bridgeObjectRetain();
    if (v71) {
      goto LABEL_36;
    }
LABEL_83:
    v72 = swift_bridgeObjectRelease();
    __break(1u);
    goto LABEL_84;
  }

  swift_bridgeObjectRetain();
  v71 = _CocoaArrayWrapper.endIndex.getter();
  if (!v71) {
    goto LABEL_83;
  }
LABEL_36:
  v72 = v71 - 1;
  if (__OFSUB__(v71, 1LL))
  {
LABEL_84:
    __break(1u);
    goto LABEL_85;
  }

  if ((v70 & 0xC000000000000001LL) == 0)
  {
    if ((v72 & 0x8000000000000000LL) != 0)
    {
      __break(1u);
    }

    else if (v72 < *(void *)((v70 & 0xFFFFFFFFFFFFF8LL) + 0x10))
    {
      v68 = *(void *)(v70 + 8 * v72 + 32);
      swift_retain();
      goto LABEL_41;
    }

    __break(1u);
    goto LABEL_88;
  }

        BOOL v20 = specialized static JSONError.SourceLocation.sourceLocation(at:fullSource:)((unint64_t)a1, a3, a4);
        CFMutableDictionaryRef result = 2.38954692e180;
        *(_OWORD *)a5 = xmmword_1837301C0;
        *(void *)(a5 + 16) = v19;
        *(void *)(a5 + 24) = v20;
        *(void *)(a5 + 32) = v22;
        *(void *)(a5 + 40) = v23;
        *(_BYTE *)(a5 + 4_Block_object_dispose(va, 8) = 1;
        return result;
    }
  }

  __break(1u);
  return result;
}

        char v18 = static Array._allocateBufferUninitialized(minimumCapacity:)();
        *(void *)(v18 + 16) = v17;
        bzero((void *)(v18 + 32), 2 * v17);
LABEL_30:
        v36 = 0LL;
        unint64_t v37 = v14 + 32;
        unint64_t v38 = v18 + 32;
LABEL_31:
        if (v36 == v16) {
          goto LABEL_66;
        }
        unint64_t v39 = 0;
        uint64_t v40 = 0LL;
        unint64_t v41 = v36 + 1;
        while (v15 != v40)
        {
          int v42 = v40 + v36;
          if (__OFADD__(v40, v36)) {
            goto LABEL_62;
          }
          if (v42 >= v17)
          {
            if (v39) {
              goto LABEL_57;
            }
            unint64_t v39 = *(unsigned __int16 *)(v37 + 2 * v36);
            if (*(_WORD *)(v37 + 2 * v36))
            {
              unint64_t v39 = *(unsigned __int16 *)(v12 + 2 * v40 + 32);
              if (*(_WORD *)(v12 + 2 * v40 + 32)) {
                goto LABEL_57;
              }
            }
          }

          else
          {
            if (v42 < 0)
            {
              __break(1u);
LABEL_65:
              __break(1u);
LABEL_66:
              __break(1u);
LABEL_67:
              __break(1u);
LABEL_68:
              __break(1u);
LABEL_69:
              __break(1u);
LABEL_70:
              __break(1u);
LABEL_71:
              __break(1u);
              goto LABEL_72;
            }

            unint64_t v43 = 2 * v42;
            int v44 = v39
            unint64_t v39 = HIWORD(v44);
            *(_WORD *)(v38 + v43) = v44;
          }

          if (v15 == ++v40)
          {
            if (v39)
            {
              __int16 v34 = __OFADD__(v15, v36);
              unint64_t v45 = v15 + v36;
              if (v34) {
                goto LABEL_68;
              }
              if (v45 >= v17)
              {
LABEL_57:
                lazy protocol witness table accessor for type NSDecimal._CalculationError and conformance NSDecimal._CalculationError();
                uint64_t v22 = (void *)swift_allocError();
                *unint64_t v49 = 0;
                swift_willThrow();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                goto LABEL_17;
              }

              if (v45 < 0) {
                goto LABEL_69;
              }
              *(_WORD *)(v38 + 2 * v45) = v39;
            }

            v36 = v41;
            if (v41 != v16) {
              goto LABEL_31;
            }
            unint64_t v46 = *(void *)(v18 + 16);
            v51 = v18;
            if (v46 && !*(_WORD *)(v38 + 2 * v46 - 2))
            {
              unint64_t v47 = v46 + 14;
              do
              {
                *(void *)(v18 + 16) = v47 - 15;
                if (v47 == 15) {
                  break;
                }
              }

              while (!*(unsigned __int16 *)(v18 + 2 * v47--));
            }

  specialized Set._Variant.insert(_:)(&v3, 8uLL);
  if ((a1 & 0x800) == 0)
  {
LABEL_11:
    if ((a1 & 0x1000) == 0) {
      goto LABEL_12;
    }
    goto LABEL_31;
  }

      if (v21) {
        goto LABEL_63;
      }
LABEL_30:
      unint64_t v33 = (4 * *(_BYTE *)(v29 + 18) + 8) & 0x3C;
      uint64_t v32 = ((-15LL << v33) - 1) & v32 | (v34 << v33);
      uint64_t v29 = *(void *)(v29 + 24 + 24 * v34);
      swift_unknownObjectRetain();
      CFMutableDictionaryRef result = swift_unknownObjectRelease();
      if (!*(_BYTE *)(v29 + 18))
      {
        unint64_t v41 = v32 & 0xFFFFFFFFFFFFF0FFLL;
        goto LABEL_46;
      }
    }
  }

  CFMutableDictionaryRef result = swift_unknownObjectRetain_n();
  unint64_t v41 = 0LL;
  uint64_t v29 = v20;
LABEL_46:
  int v42 = *(unsigned __int16 *)(v29 + 16);
  a1 = v49;
  if (!*(_WORD *)(v29 + 16)) {
    goto LABEL_56;
  }
  unint64_t v43 = *(void *)(v29 + 24);
  v36 = __OFSUB__(v21, v43);
  v21 -= v43;
  if (v36) {
    goto LABEL_70;
  }
  if (!__OFADD__(v21, 1LL))
  {
    if (v21 + 1 < 1) {
      goto LABEL_58;
    }
    if ((_DWORD)v42 != 1)
    {
      int v44 = (uint64_t *)(v29 + 48);
      unint64_t v45 = 1LL;
      do
      {
        unint64_t v46 = *v44;
        v44 += 3;
        v36 = __OFSUB__(v21, v46);
        v21 -= v46;
        if (v36) {
          goto LABEL_68;
        }
        if (__OFADD__(v21, 1LL)) {
          goto LABEL_69;
        }
        if (v21 + 1 < 1)
        {
          int v42 = v45;
          goto LABEL_60;
        }
      }

      while (v42 != ++v45);
    }

  CFMutableDictionaryRef result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

  CFMutableDictionaryRef result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

  CFMutableDictionaryRef result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

        CFRange v31 = static Array._allocateBufferUninitialized(minimumCapacity:)();
        *(void *)(v31 + 16) = v30;
        bzero((void *)(v31 + 32), 2 * v30);
LABEL_30:
        unint64_t v49 = 0LL;
        unint64_t v50 = v27 + 32;
        v51 = v31 + 32;
LABEL_31:
        if (v49 == v29) {
          goto LABEL_73;
        }
        id v52 = 0;
        uint64_t v53 = 0LL;
        v54 = v49 + 1;
        while (v28 != v53)
        {
          v55 = v53 + v49;
          if (__OFADD__(v53, v49)) {
            goto LABEL_69;
          }
          if (v55 >= v30)
          {
            if (v52) {
              goto LABEL_57;
            }
            id v52 = *(unsigned __int16 *)(v50 + 2 * v49);
            if (*(_WORD *)(v50 + 2 * v49))
            {
              id v52 = *(unsigned __int16 *)(v25 + 2 * v53 + 32);
              if (*(_WORD *)(v25 + 2 * v53 + 32)) {
                goto LABEL_57;
              }
            }
          }

          else
          {
            if (v55 < 0)
            {
              __break(1u);
LABEL_72:
              __break(1u);
LABEL_73:
              __break(1u);
LABEL_74:
              __break(1u);
LABEL_75:
              __break(1u);
LABEL_76:
              __break(1u);
LABEL_77:
              __break(1u);
LABEL_78:
              __break(1u);
              goto LABEL_79;
            }

            v56 = 2 * v55;
            v57 = v52
            id v52 = HIWORD(v57);
            *(_WORD *)(v51 + v56) = v57;
          }

          if (v28 == ++v53)
          {
            if (v52)
            {
              unint64_t v58 = __OFADD__(v28, v49);
              int v59 = v28 + v49;
              if (v58) {
                goto LABEL_75;
              }
              if (v59 >= v30)
              {
LABEL_57:
                lazy protocol witness table accessor for type NSDecimal._CalculationError and conformance NSDecimal._CalculationError();
                uint64_t v32 = (void *)swift_allocError();
                *v63 = 0;
                swift_willThrow();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                goto LABEL_16;
              }

              if (v59 < 0) {
                goto LABEL_76;
              }
              *(_WORD *)(v51 + 2 * v59) = v52;
            }

            unint64_t v49 = v54;
            if (v54 != v29) {
              goto LABEL_31;
            }
            uint64_t v60 = *(void *)(v31 + 16);
            v71 = v14;
            v69 = v31;
            if (v60 && !*(_WORD *)(v51 + 2 * v60 - 2))
            {
              v61 = v60 + 14;
              do
              {
                *(void *)(v31 + 16) = v61 - 15;
                if (v61 == 15) {
                  break;
                }
              }

              while (!*(unsigned __int16 *)(v31 + 2 * v61--));
            }

  uint64_t v30 = v20[2];
  CFRange v31 = v20[3];
  swift_bridgeObjectRetain();
  if (v30 >= v31 >> 1) {
    BOOL v20 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (void *)(v31 > 1),  v30 + 1,  1,  v20);
  }
  v20[2] = v30 + 1;
  uint64_t v32 = &v20[2 * v30];
  v32[4] = a7;
  v32[5] = a8;
  if (a10 != 1)
  {
LABEL_32:
    __int16 v34 = v20[2];
    unint64_t v33 = v20[3];
    if (v34 >= v33 >> 1) {
      BOOL v20 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (void *)(v33 > 1),  v34 + 1,  1,  v20);
    }
    v20[2] = v34 + 1;
    unint64_t v35 = &v20[2 * v34];
    v35[4] = v11;
    v35[5] = a10;
  }

  return v20;
}

  specialized Set._Variant.insert(_:)(&v3, 8uLL);
  if ((v1 & 0x200) == 0)
  {
LABEL_11:
    if ((v1 & 0x400) == 0) {
      goto LABEL_12;
    }
    goto LABEL_31;
  }

  Hasher._combine(_:)(0);
  unint64_t v25 = 0LL;
LABEL_30:

  if (v39)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    specialized Dictionary<>.hash(into:)(a1, v39);
    swift_bridgeObjectRelease();
    if (v40) {
      goto LABEL_32;
    }
LABEL_35:
    Hasher._combine(_:)(0);
    if (v41) {
      goto LABEL_33;
    }
    goto LABEL_36;
  }

  Hasher._combine(_:)(0);
  if (!v40) {
    goto LABEL_35;
  }
LABEL_32:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)(a1, v40);
  swift_bridgeObjectRelease();
  if (v41)
  {
LABEL_33:
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    goto LABEL_37;
  }

  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  if (!v57)
  {
LABEL_24:
    Hasher._combine(_:)(0);
    unint64_t v25 = v58;
    if (!v58) {
      goto LABEL_25;
    }
LABEL_31:
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    specialized Dictionary<>.hash(into:)((uint64_t)v75, v25);
    swift_bridgeObjectRelease();
    uint64_t v26 = v59;
    if (!v59) {
      goto LABEL_26;
    }
    goto LABEL_32;
  }

  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  if (!v60)
  {
LABEL_24:
    Hasher._combine(_:)(0);
    uint64_t v29 = v61;
    if (!v61) {
      goto LABEL_25;
    }
LABEL_31:
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    specialized Dictionary<>.hash(into:)(a1, v29);
    swift_bridgeObjectRelease();
    uint64_t v30 = v62;
    if (!v62) {
      goto LABEL_26;
    }
    goto LABEL_32;
  }

  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  if (!v58)
  {
LABEL_24:
    Hasher._combine(_:)(0);
    uint64_t v27 = v59;
    if (!v59) {
      goto LABEL_25;
    }
LABEL_31:
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    specialized Dictionary<>.hash(into:)((uint64_t)v76, v27);
    swift_bridgeObjectRelease();
    int v28 = v60;
    if (!v60) {
      goto LABEL_26;
    }
    goto LABEL_32;
  }

  Hasher._combine(_:)(0);
  if (!v11) {
    goto LABEL_30;
  }
LABEL_25:
  Hasher._combine(_:)(1u);
  type metadata accessor for CFDictionaryRef(0LL);
  lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( (unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef,  (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef,  (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
  uint64_t v21 = v11;
  _CFObject.hash(into:)();

  if (v13)
  {
LABEL_26:
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0LL);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( (unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef,  (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef,  (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
    uint64_t v22 = v13;
    _CFObject.hash(into:)();

    goto LABEL_32;
  }

  Hasher._combine(_:)(0);
  if (!v9) {
    goto LABEL_30;
  }
LABEL_25:
  Hasher._combine(_:)(1u);
  type metadata accessor for CFDictionaryRef(0LL);
  lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( (unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef,  (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef,  (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
  CFStringRef v19 = v9;
  _CFObject.hash(into:)();

  if (v11)
  {
LABEL_26:
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0LL);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( (unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef,  (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef,  (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
    BOOL v20 = v11;
    _CFObject.hash(into:)();

    goto LABEL_32;
  }

    if (v15 == v38) {
      break;
    }
    if (v34 == v32) {
      return 0LL;
    }
    unsigned int v9 = Substring.index(_:offsetBy:)();
  }

  CFMutableDictionaryRef result = v9;
  if (v34 > v14 >> 14) {
    __break(1u);
  }
  return result;
}

  *(void *)&v113 = v31;
  *((void *)&v113 + 1) = v10;
  swift_unknownObjectRetain();
  unint64_t v37 = a3;
  if ((a4 & 1) != 0) {
    unint64_t v37 = objc_msgSend(v11, sel_firstWeekday);
  }
  unint64_t v38 = a5;
  if ((a6 & 1) != 0) {
    unint64_t v38 = objc_msgSend(v11, sel_minimumDaysInFirstWeek);
  }
  v111 = 0LL;
  v112 = 1;
  unint64_t v39 = CalendarCache.fixed(identifier:locale:timeZone:firstWeekday:minimumDaysInFirstWeek:gregorianStartDate:)( &v115,  &v114,  &v113,  (uint64_t)v37,  0,  (uint64_t)v38,  0,  &v111);
  swift_release();
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  return v39;
}

        *(void *)(a5 + 96) = v16;
        *(void *)(a5 + 104) = v7;
        unsigned int v7 = result;
        *(_BYTE *)(a5 + 112) = 0;
      }

        CFMutableDictionaryRef result = swift_release();
        goto LABEL_30;
      }

      __break(1u);
      goto LABEL_32;
    }

    __break(1u);
  }

  else
  {
    CFMutableDictionaryRef result = swift_slowAlloc();
    uint64_t v30 = 16;
    *(void *)CFRange v31 = 0LL;
    *(void *)&v31[3] = 0LL;
    uint64_t v29 = 0;
    if (v12)
    {
      if (a2 >= (uint64_t)0xFFFFFFFF80000000LL)
      {
        BOOL v20 = v12;
        uint64_t v21 = result;
        uint64_t v22 = v13(v28, v20, a2);
        unsigned int v15 = 0LL;
        if ((a4 & 1) != 0) {
          unint64_t v25 = -1;
        }
        else {
          unint64_t v25 = -64;
        }
        char v16 = 0LL;
        if ((*(_DWORD *)&v31[1] & v25) == 0 && v22 > 0)
        {
          unsigned int v15 = closure #2 in closure #1 in static UIDNAHookICU.IDNACodedHostUTF8(_:encodeToASCII:)( v21,  v22,  a5,  a6);
          char v16 = v26;
        }

        MEMORY[0x186E20E60](v21, -1LL, -1LL);
        goto LABEL_29;
      }

                  uint64_t v23 = __clz(__rbit64(v21));
                  v21 &= v21 - 1;
                }
              }
            }
          }
        }

  if (!v114) {
    return (void *)MEMORY[0x18961AFF0];
  }
  if (v114 != v2[2])
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, PredicateCodableConfiguration.AllowListKeyPath>);
    unint64_t v45 = (void *)static _DictionaryStorage.allocate(capacity:)();
    unint64_t v46 = 0LL;
    unint64_t v47 = *v113;
    unint64_t v48 = v114;
    unint64_t v49 = v45 + 8;
    v112 = v45;
    while (1)
    {
      v114 = v48;
      if (v47)
      {
        v120 = (v47 - 1) & v47;
        v121 = v46;
        v54 = __clz(__rbit64(v47)) | (v46 << 6);
      }

      else
      {
        v55 = v46 + 1;
        if (__OFADD__(v46, 1LL)) {
          goto LABEL_136;
        }
        if (v55 >= v111) {
          return v45;
        }
        v56 = v113[v55];
        v57 = v46 + 1;
        if (!v56)
        {
          v57 = v46 + 2;
          if (v46 + 2 >= v111) {
            return v45;
          }
          v56 = v113[v57];
          if (!v56)
          {
            v57 = v46 + 3;
            if (v46 + 3 >= v111) {
              return v45;
            }
            v56 = v113[v57];
            if (!v56)
            {
              v57 = v46 + 4;
              if (v46 + 4 >= v111) {
                return v45;
              }
              v56 = v113[v57];
              if (!v56)
              {
                v57 = v46 + 5;
                if (v46 + 5 >= v111) {
                  return v45;
                }
                v56 = v113[v57];
                if (!v56)
                {
                  unint64_t v58 = v46 + 6;
                  if (v46 + 6 >= v111) {
                    return v45;
                  }
                  v56 = v113[v58];
                  if (!v56)
                  {
                    while (1)
                    {
                      v57 = v58 + 1;
                      if (__OFADD__(v58, 1LL)) {
                        break;
                      }
                      if (v57 >= v111) {
                        return v45;
                      }
                      v56 = v113[v57];
                      ++v58;
                      if (v56) {
                        goto LABEL_85;
                      }
                    }

                CFMutableDictionaryRef result = swift_once();
                goto LABEL_22;
              }
            }
          }
        }
      }
    }

    v16[0] = 0;
    String.utf8CString.getter();
    LODWORD(v11) = ucal_open();
    swift_release();
    if (v16[0] > 0 || (Attribute = ucal_getAttribute(), Attribute - 8 < 0xFFFFFFF9))
    {
      *(_BYTE *)(v6 + 20_Block_object_dispose(va, 8) = 0;
      *a3 = 0;
      return ucal_close();
    }

    unsigned int v13 = Attribute;
    if (one-time initialization token for weekdays != -1) {
      swift_once();
    }
    if (*((void *)static Locale.Weekday.weekdays + 2) >= (unint64_t)v13)
    {
      char v14 = *((_BYTE *)static Locale.Weekday.weekdays + v13 + 31);
      *(_BYTE *)(v6 + 20_Block_object_dispose(va, 8) = v14;
      *a3 = v14;
      return ucal_close();
    }

    __break(1u);
    goto LABEL_27;
  }

      uint64_t v23 = *((void *)v6 + 2);
      for (i = v22; ; i >>= 8)
      {
        while (1)
        {
          unint64_t v25 = *((void *)v6 + 3);
          if (v23 >= v25 >> 1) {
            char v6 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (char *)(v25 > 1),  v23 + 1,  1,  v6);
          }
          *((void *)v6 + 2) = v23 + 1;
          v6[v23 + 32] = i - 1;
          ++v23;
          uint64_t v26 = i >= 0x100;
          i >>= 8;
          if (!v26) {
            goto LABEL_37;
          }
        }

        uint64_t v27 = 0LL;
        char v8 = 0LL;
        ++v23;
        if (i < 0x100) {
          break;
        }
      }

  __src[24] = (int)ucal_get();
  LOBYTE(__src[25]) = 0;
  if ((a2 & 0x10) == 0)
  {
LABEL_15:
    if ((a2 & 0x20) == 0) {
      goto LABEL_16;
    }
    goto LABEL_31;
  }

  __break(1u);
  return result;
}

    __break(1u);
LABEL_30:
    __break(1u);
LABEL_31:
    __break(1u);
    goto LABEL_32;
  }

  swift_unknownObjectRetain();
  unsigned int v17 = specialized Rope._Node._graftFront(_:)(v47, a2);
  CFStringRef v19 = v18;
  uint64_t v21 = v20;
  CFMutableDictionaryRef result = swift_unknownObjectRelease();
  uint64_t v23 = v47[0];
  int v24 = v3[1];
  unint64_t v25 = __OFADD__(v24, v47[0]);
  uint64_t v26 = v24 + v47[0];
  if (v25)
  {
    __break(1u);
    goto LABEL_28;
  }

  uint64_t v27 = v47[1];
  v3[1] = v26;
  int v28 = v3[2];
  unint64_t v25 = __OFADD__(v28, v27);
  uint64_t v29 = v28 + v27;
  if (v25)
  {
LABEL_28:
    __break(1u);
    goto LABEL_29;
  }

  v3[2] = v29;
  if (!v17)
  {
    uint64_t v30 = 0LL;
    *a1 = v23;
    a1[1] = v27;
    return v30;
  }

  if (*(_WORD *)(*v3 + 16) != 15)
  {
    if (!__OFADD__(v23, v19))
    {
      if (!__OFADD__(v27, v21))
      {
        specialized Rope._Node._insertNode(_:at:)(v17, v19, v21, 0LL);
        swift_unknownObjectRelease();
        uint64_t v30 = 0LL;
        *a1 = v23 + v19;
        a1[1] = v27 + v21;
        return v30;
      }

      goto LABEL_35;
    }

    unint64_t v45 = 0u;
    unint64_t v46 = 0u;
LABEL_30:
    swift_bridgeObjectRelease();
    if (*((void *)&v46 + 1))
    {
      if (swift_dynamicCast())
      {
        v43._countAndFlagsBits = 0x2E32312E38LL;
        v43._object = (void *)0xE500000000000000LL;
        unsigned int v7 = String.hasPrefix(_:)(v43);
        swift_bridgeObjectRelease();
        goto LABEL_35;
      }

  unint64_t v33 = v19;
  __int16 v34 = (v18 - 1) & v18;
  for (i = __clz(__rbit64(v18)) + (v19 << 6); ; i = __clz(__rbit64(v6)) | (v33 << 6))
  {
    outlined init with copy of AnyHashable(*(void *)(v2 + 48) + 40 * i, (uint64_t)&v45);
    outlined init with copy of Any(*(void *)(v2 + 56) + 32 * i, (uint64_t)v7);
    v43[0] = v47[0];
    v43[1] = v47[1];
    int v44 = v48;
    unint64_t v41 = v45;
    int v42 = v46;
    v35[2] = v45;
    v35[3] = v46;
    v36 = *(void *)&v47[0];
    swift_dynamicCast();
    outlined init with take of Any(v8, v35);
    swift_dynamicCast();
    uint64_t v21 = v39;
    uint64_t v22 = v40;
    int v24 = v37;
    uint64_t v23 = v38;
    CFMutableDictionaryRef result = specialized __RawDictionaryStorage.find<A>(_:)(v39, v40);
    if ((v25 & 1) != 0)
    {
      char v10 = v8;
      unsigned int v11 = 16 * result;
      char v12 = v2;
      unsigned int v13 = v7;
      char v14 = (uint64_t *)(v3[6] + 16 * result);
      swift_bridgeObjectRelease();
      *char v14 = v21;
      v14[1] = v22;
      unsigned int v7 = v13;
      uint64_t v2 = v12;
      unsigned int v15 = (void *)(v3[7] + v11);
      char v8 = v10;
      CFMutableDictionaryRef result = swift_bridgeObjectRelease();
      *unsigned int v15 = v24;
      v15[1] = v23;
      char v6 = v34;
      if (!v34) {
        goto LABEL_12;
      }
      goto LABEL_11;
    }

    if (v3[2] >= v3[3]) {
      break;
    }
    *(void *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8LL) + 64) |= 1LL << result;
    uint64_t v26 = (uint64_t *)(v3[6] + 16 * result);
    *uint64_t v26 = v21;
    v26[1] = v22;
    uint64_t v27 = (void *)(v3[7] + 16 * result);
    *uint64_t v27 = v24;
    v27[1] = v23;
    int v28 = v3[2];
    uint64_t v29 = __OFADD__(v28, 1LL);
    uint64_t v30 = v28 + 1;
    if (v29) {
      goto LABEL_38;
    }
    v3[2] = v30;
    char v6 = v34;
    if (!v34) {
      goto LABEL_12;
    }
LABEL_11:
    __int16 v34 = (v6 - 1) & v6;
  }

  __break(1u);
LABEL_38:
  __break(1u);
LABEL_39:
  __break(1u);
LABEL_40:
  __break(1u);
  return result;
}

  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  uint64_t v21 = v63;
  if (v63) {
    goto LABEL_30;
  }
LABEL_23:
  Hasher._combine(_:)(0);
  uint64_t v22 = v64;
  if (!v64)
  {
LABEL_24:
    Hasher._combine(_:)(0);
    goto LABEL_32;
  }

  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)((uint64_t)v82, v21);
  swift_bridgeObjectRelease();
LABEL_30:
  uint64_t v23 = v66;
  if (v66)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    specialized Dictionary<>.hash(into:)((uint64_t)v82, v23);
    swift_bridgeObjectRelease();
  }

  else
  {
    Hasher._combine(_:)(0);
  }

  int v24 = v68;
  uint64_t v26 = v69;
  unint64_t v25 = v70;
  uint64_t v27 = v71;
  v54 = v71;
  v55 = v67;
  if (v67)
  {
    v57 = v5;
    int v28 = v67;
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0LL);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef();
    uint64_t v29 = v24;
    uint64_t v30 = v26;
    CFRange v31 = v25;
    uint64_t v32 = v27;
    unint64_t v33 = v28;
    unsigned int v5 = v57;
    _CFObject.hash(into:)();
  }

  else
  {
    Hasher._combine(_:)(0);
    __int16 v34 = v27;
    unint64_t v35 = v24;
    v36 = v26;
    unint64_t v37 = v25;
  }

  unint64_t v58 = v25;
  unint64_t v38 = v5;
  if (v24)
  {
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0LL);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef();
    unint64_t v39 = v24;
    uint64_t v40 = v24;
    unint64_t v41 = v26;
    int v42 = v40;
    _CFObject.hash(into:)();

    uint64_t v26 = v41;
  }

  else
  {
    unint64_t v39 = 0LL;
    Hasher._combine(_:)(0);
  }

  v56 = v26;
  if (v26)
  {
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0LL);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef();
    unint64_t v43 = v26;
    _CFObject.hash(into:)();
  }

  else
  {
    Hasher._combine(_:)(0);
  }

  int v44 = v39;
  unsigned int v5 = v38;
  if (v58)
  {
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0LL);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef();
    unint64_t v45 = v58;
    _CFObject.hash(into:)();

    if (v54)
    {
LABEL_44:
      Hasher._combine(_:)(1u);
      type metadata accessor for CFDictionaryRef(0LL);
      lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef();
      unint64_t v46 = v54;
      _CFObject.hash(into:)();

      goto LABEL_47;
    }
  }

  else
  {
    Hasher._combine(_:)(0);
    if (v54) {
      goto LABEL_44;
    }
  }

  Hasher._combine(_:)(0);
  unint64_t v46 = 0LL;
LABEL_47:

  unint64_t v47 = v72;
  if (v47)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    specialized Dictionary<>.hash(into:)((uint64_t)v82, v47);
    swift_bridgeObjectRelease();
  }

  else
  {
    Hasher._combine(_:)(0);
  }

  unint64_t v48 = v73;
  if (!v73)
  {
    Hasher._combine(_:)(0);
    if (v74) {
      goto LABEL_52;
    }
LABEL_54:
    Hasher._combine(_:)(0);
    goto LABEL_55;
  }

  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)((uint64_t)v82, v48);
  swift_bridgeObjectRelease();
  if (!v74) {
    goto LABEL_54;
  }
LABEL_52:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
LABEL_55:
  unsigned int v11 = v59;
  if (v75 == 2)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    unint64_t v49 = v75 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v49);
  }

  if (v76 == 2)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    unint64_t v50 = v76 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v50);
  }

  if (v77 == 2)
  {
    v51 = 0;
  }

  else
  {
    v51 = v77 & 1;
    Hasher._combine(_:)(1u);
  }

  Hasher._combine(_:)(v51);
  if (v78 == 2)
  {
    id v52 = 0;
  }

  else
  {
    uint64_t v53 = v78 & 1;
    Hasher._combine(_:)(1u);
    id v52 = v53;
  }

  Hasher._combine(_:)(v52);
  outlined retain of LocalePreferences?( (uint64_t)v80,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined consume of LocalePreferences?);
  outlined retain of LocalePreferences?( (uint64_t)v80,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined consume of LocalePreferences?);
  swift_unknownObjectRelease_n();
LABEL_12:
  char v12 = swift_getObjectType();
  unsigned int v13 = *(void (**)(_BYTE *, uint64_t, uint64_t))(v5 + 112);
  swift_unknownObjectRetain();
  v13(v82, v12, v5);
  swift_unknownObjectRelease();
  char v14 = swift_getObjectType();
  unsigned int v15 = *(void (**)(_BYTE *, uint64_t, uint64_t))(v11 + 120);
  swift_unknownObjectRetain();
  v15(v82, v14, v11);
  swift_unknownObjectRelease();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

  __break(1u);
  return result;
}

  if (!v90) {
    return MEMORY[0x18961AFF0];
  }
  if (v90 != *(void *)(v3 + 16))
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, AttributedString._AttributeValue>);
    unint64_t v35 = static _DictionaryStorage.allocate(capacity:)();
    v36 = 0LL;
    unint64_t v37 = *v88;
    unint64_t v38 = v35 + 64;
    while (1)
    {
      if (v37)
      {
        unint64_t v45 = __clz(__rbit64(v37));
        v37 &= v37 - 1;
        unint64_t v46 = v45 | (v36 << 6);
      }

      else
      {
        char v14 = __OFADD__(v36++, 1LL);
        if (v14) {
          goto LABEL_134;
        }
        if (v36 >= v89) {
          return v35;
        }
        unint64_t v47 = v88[v36];
        if (!v47)
        {
          unint64_t v48 = v36 + 1;
          if (v36 + 1 >= v89) {
            return v35;
          }
          unint64_t v47 = v88[v48];
          if (!v47)
          {
            unint64_t v48 = v36 + 2;
            if (v36 + 2 >= v89) {
              return v35;
            }
            unint64_t v47 = v88[v48];
            if (!v47)
            {
              unint64_t v48 = v36 + 3;
              if (v36 + 3 >= v89) {
                return v35;
              }
              unint64_t v47 = v88[v48];
              if (!v47)
              {
                unint64_t v48 = v36 + 4;
                if (v36 + 4 >= v89) {
                  return v35;
                }
                unint64_t v47 = v88[v48];
                if (!v47)
                {
                  while (1)
                  {
                    v36 = v48 + 1;
                    if (__OFADD__(v48, 1LL)) {
                      break;
                    }
                    if (v36 >= v89) {
                      return v35;
                    }
                    unint64_t v47 = v88[v36];
                    ++v48;
                    if (v47) {
                      goto LABEL_80;
                    }
                  }

      unsigned int v7 = 0LL;
      v56 = 0LL;
      v55 = 0u;
      memset(v54, 0, sizeof(v54));
      uint64_t v53 = 0u;
    }

    if ((void)v55)
    {
      outlined init with take of any PredicateExpression<Self.Output == B1>(&v53, (uint64_t)v45);
      outlined init with take of any PredicateExpression<Self.Output == B1>(v8, (uint64_t)v44);
      uint64_t v21 = v46;
      unint64_t v39 = v47;
      unint64_t v38 = __swift_project_boxed_opaque_existential_1(v45, v46);
      unint64_t v41 = &v31;
      uint64_t v22 = *(void *)(v21 - 8);
      MEMORY[0x1895F8858](v38);
      int v24 = (char *)&v31 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0LL);
      outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>( (uint64_t)v44,  (uint64_t)&v43);
      unint64_t v25 = type metadata accessor for Optional();
      uint64_t v26 = *(void *)(v25 - 8);
      MEMORY[0x1895F8858](v25);
      int v28 = (char *)&v31 - v27;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Hashable & Sendable);
      uint64_t v29 = swift_dynamicCast();
      uint64_t v30 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v22 + 56);
      if (v29)
      {
        v30(v28, 0LL, 1LL, v21);
        (*(void (**)(char *, char *, uint64_t))(v22 + 32))(v24, v28, v21);
        unsigned int v9 = dispatch thunk of static Equatable.== infix(_:_:)();
        (*(void (**)(char *, uint64_t))(v22 + 8))(v24, v21);
      }

      else
      {
        v30(v28, 1LL, 1LL, v21);
        (*(void (**)(char *, uint64_t))(v26 + 8))(v28, v25);
        unsigned int v9 = 0;
      }

      unsigned int v3 = v35;
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v44);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v45);
      outlined destroy of Any?((uint64_t)v48, &demangling cache variable for type metadata for (Hashable & Sendable)?);
      outlined destroy of Any?((uint64_t)v49, &demangling cache variable for type metadata for (Hashable & Sendable)?);
      outlined destroy of AttributedString._AttributeValue((uint64_t)v50);
      CFMutableDictionaryRef result = outlined destroy of AttributedString._AttributeValue((uint64_t)v51);
      char v8 = v36;
      uint64_t v2 = v37;
      if ((v9 & 1) == 0) {
        return 0LL;
      }
      if (v7) {
        continue;
      }
      goto LABEL_12;
    }

    break;
  }

  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v53);
LABEL_42:
  outlined destroy of Any?((uint64_t)v48, &demangling cache variable for type metadata for (Hashable & Sendable)?);
  outlined destroy of Any?((uint64_t)v49, &demangling cache variable for type metadata for (Hashable & Sendable)?);
  outlined destroy of AttributedString._AttributeValue((uint64_t)v50);
LABEL_43:
  outlined destroy of AttributedString._AttributeValue((uint64_t)v51);
  return 0LL;
}

    unsigned int v15 = (v22 - 1) & v22;
    BOOL v20 = __clz(__rbit64(v22)) + (v11 << 6);
LABEL_30:
    int v24 = *(unsigned __int8 *)(*(void *)(v7 + 48) + v20);
    Hasher.init(_seed:)();
    Hasher._combine(_:)(v24);
    CFMutableDictionaryRef result = Hasher._finalize()();
    unint64_t v25 = -1LL << *(_BYTE *)(v10 + 32);
    uint64_t v26 = result & ~v25;
    uint64_t v27 = v26 >> 6;
    if (((-1LL << v26) & ~*(void *)(v17 + 8 * (v26 >> 6))) != 0)
    {
      char v18 = __clz(__rbit64((-1LL << v26) & ~*(void *)(v17 + 8 * (v26 >> 6)))) | v26 & 0x7FFFFFFFFFFFFFC0LL;
    }

    else
    {
      int v28 = 0;
      uint64_t v29 = (unint64_t)(63 - v25) >> 6;
      do
      {
        if (++v27 == v29 && (v28 & 1) != 0)
        {
          __break(1u);
          goto LABEL_115;
        }

        uint64_t v30 = v27 == v29;
        if (v27 == v29) {
          uint64_t v27 = 0LL;
        }
        v28 |= v30;
        CFRange v31 = *(void *)(v17 + 8 * v27);
      }

      while (v31 == -1);
      char v18 = __clz(__rbit64(~v31)) + (v27 << 6);
    }

    *(void *)(v17 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v18;
    *(_BYTE *)(*(void *)(v10 + 48) + v1_Block_object_dispose(va, 8) = v24;
    ++*(void *)(v10 + 16);
  }

  uint64_t v23 = v21 + 4;
  if (v23 >= v16) {
    goto LABEL_66;
  }
  uint64_t v22 = v12[v23];
  if (v22)
  {
    unsigned int v11 = v23;
    goto LABEL_29;
  }

  while (1)
  {
    unsigned int v11 = v23 + 1;
    if (__OFADD__(v23, 1LL)) {
      break;
    }
    if (v11 >= v16) {
      goto LABEL_66;
    }
    uint64_t v22 = v12[v11];
    ++v23;
    if (v22) {
      goto LABEL_29;
    }
  }

    unsigned int v15 = (v22 - 1) & v22;
    BOOL v20 = __clz(__rbit64(v22)) + (v11 << 6);
LABEL_30:
    int v24 = *(_BYTE *)(*(void *)(v7 + 48) + v20);
    CFMutableDictionaryRef result = MEMORY[0x186E1CE88](*(void *)(v10 + 40), v24, 1LL);
    unint64_t v25 = -1LL << *(_BYTE *)(v10 + 32);
    uint64_t v26 = result & ~v25;
    uint64_t v27 = v26 >> 6;
    if (((-1LL << v26) & ~*(void *)(v17 + 8 * (v26 >> 6))) != 0)
    {
      char v18 = __clz(__rbit64((-1LL << v26) & ~*(void *)(v17 + 8 * (v26 >> 6)))) | v26 & 0x7FFFFFFFFFFFFFC0LL;
    }

    else
    {
      int v28 = 0;
      uint64_t v29 = (unint64_t)(63 - v25) >> 6;
      do
      {
        if (++v27 == v29 && (v28 & 1) != 0)
        {
          __break(1u);
          goto LABEL_114;
        }

        uint64_t v30 = v27 == v29;
        if (v27 == v29) {
          uint64_t v27 = 0LL;
        }
        v28 |= v30;
        CFRange v31 = *(void *)(v17 + 8 * v27);
      }

      while (v31 == -1);
      char v18 = __clz(__rbit64(~v31)) + (v27 << 6);
    }

    *(void *)(v17 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v18;
    *(_BYTE *)(*(void *)(v10 + 48) + v1_Block_object_dispose(va, 8) = v24;
    ++*(void *)(v10 + 16);
  }

  uint64_t v23 = v21 + 4;
  if (v23 >= v16) {
    goto LABEL_66;
  }
  uint64_t v22 = v12[v23];
  if (v22)
  {
    unsigned int v11 = v23;
    goto LABEL_29;
  }

  while (1)
  {
    unsigned int v11 = v23 + 1;
    if (__OFADD__(v23, 1LL)) {
      break;
    }
    if (v11 >= v16) {
      goto LABEL_66;
    }
    uint64_t v22 = v12[v11];
    ++v23;
    if (v22) {
      goto LABEL_29;
    }
  }

    unsigned int v15 = (v22 - 1) & v22;
    BOOL v20 = __clz(__rbit64(v22)) + (v11 << 6);
LABEL_30:
    int v24 = *(void *)(*(void *)(v7 + 48) + 8 * v20);
    CFMutableDictionaryRef result = static Hasher._hash(seed:_:)();
    unint64_t v25 = -1LL << *(_BYTE *)(v10 + 32);
    uint64_t v26 = result & ~v25;
    uint64_t v27 = v26 >> 6;
    if (((-1LL << v26) & ~*(void *)(v17 + 8 * (v26 >> 6))) != 0)
    {
      char v18 = __clz(__rbit64((-1LL << v26) & ~*(void *)(v17 + 8 * (v26 >> 6)))) | v26 & 0x7FFFFFFFFFFFFFC0LL;
    }

    else
    {
      int v28 = 0;
      uint64_t v29 = (unint64_t)(63 - v25) >> 6;
      do
      {
        if (++v27 == v29 && (v28 & 1) != 0)
        {
          __break(1u);
          goto LABEL_114;
        }

        uint64_t v30 = v27 == v29;
        if (v27 == v29) {
          uint64_t v27 = 0LL;
        }
        v28 |= v30;
        CFRange v31 = *(void *)(v17 + 8 * v27);
      }

      while (v31 == -1);
      char v18 = __clz(__rbit64(~v31)) + (v27 << 6);
    }

    *(void *)(v17 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v18;
    *(void *)(*(void *)(v10 + 48) + 8 * v1_Block_object_dispose(va, 8) = v24;
    ++*(void *)(v10 + 16);
  }

  uint64_t v23 = v21 + 4;
  if (v23 >= v16) {
    goto LABEL_66;
  }
  uint64_t v22 = v12[v23];
  if (v22)
  {
    unsigned int v11 = v23;
    goto LABEL_29;
  }

  while (1)
  {
    unsigned int v11 = v23 + 1;
    if (__OFADD__(v23, 1LL)) {
      break;
    }
    if (v11 >= v16) {
      goto LABEL_66;
    }
    uint64_t v22 = v12[v11];
    ++v23;
    if (v22) {
      goto LABEL_29;
    }
  }

    unsigned int v15 = (v23 - 1) & v23;
    uint64_t v21 = __clz(__rbit64(v23)) + (v18 << 6);
LABEL_30:
    unint64_t v25 = *(void *)(*(void *)(v7 + 48) + 8 * v21);
    Hasher.init(_seed:)();
    _BPlistEncodingFormat.Reference.hash(into:)((uint64_t)v80);
    CFMutableDictionaryRef result = Hasher._finalize()();
    uint64_t v26 = -1LL << *(_BYTE *)(v10 + 32);
    uint64_t v27 = result & ~v26;
    int v28 = v27 >> 6;
    if (((-1LL << v27) & ~*(void *)(v17 + 8 * (v27 >> 6))) != 0)
    {
      CFStringRef v19 = __clz(__rbit64((-1LL << v27) & ~*(void *)(v17 + 8 * (v27 >> 6)))) | v27 & 0x7FFFFFFFFFFFFFC0LL;
    }

    else
    {
      uint64_t v29 = 0;
      uint64_t v30 = (unint64_t)(63 - v26) >> 6;
      do
      {
        if (++v28 == v30 && (v29 & 1) != 0)
        {
          __break(1u);
          goto LABEL_115;
        }

        CFRange v31 = v28 == v30;
        if (v28 == v30) {
          int v28 = 0LL;
        }
        v29 |= v31;
        uint64_t v32 = *(void *)(v17 + 8 * v28);
      }

      while (v32 == -1);
      CFStringRef v19 = __clz(__rbit64(~v32)) + (v28 << 6);
    }

    *(void *)(v17 + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v19;
    *(void *)(*(void *)(v10 + 48) + 8 * v19) = v25;
    ++*(void *)(v10 + 16);
  }

  int v24 = v22 + 4;
  if (v24 >= v16) {
    goto LABEL_66;
  }
  uint64_t v23 = v13[v24];
  if (v23)
  {
    char v18 = v24;
    goto LABEL_29;
  }

  while (1)
  {
    char v18 = v24 + 1;
    if (__OFADD__(v24, 1LL)) {
      break;
    }
    if (v18 >= v16) {
      goto LABEL_66;
    }
    uint64_t v23 = v13[v18];
    ++v24;
    if (v23) {
      goto LABEL_29;
    }
  }

    unsigned int v15 = (v22 - 1) & v22;
    BOOL v20 = __clz(__rbit64(v22)) + (v11 << 6);
LABEL_30:
    int v24 = *(_DWORD *)(*(void *)(v7 + 48) + 4 * v20);
    Hasher.init(_seed:)();
    Hasher._combine(_:)(v24);
    CFMutableDictionaryRef result = Hasher._finalize()();
    unint64_t v25 = -1LL << *(_BYTE *)(v10 + 32);
    uint64_t v26 = result & ~v25;
    uint64_t v27 = v26 >> 6;
    if (((-1LL << v26) & ~*(void *)(v17 + 8 * (v26 >> 6))) != 0)
    {
      char v18 = __clz(__rbit64((-1LL << v26) & ~*(void *)(v17 + 8 * (v26 >> 6)))) | v26 & 0x7FFFFFFFFFFFFFC0LL;
    }

    else
    {
      int v28 = 0;
      uint64_t v29 = (unint64_t)(63 - v25) >> 6;
      do
      {
        if (++v27 == v29 && (v28 & 1) != 0)
        {
          __break(1u);
          goto LABEL_115;
        }

        uint64_t v30 = v27 == v29;
        if (v27 == v29) {
          uint64_t v27 = 0LL;
        }
        v28 |= v30;
        CFRange v31 = *(void *)(v17 + 8 * v27);
      }

      while (v31 == -1);
      char v18 = __clz(__rbit64(~v31)) + (v27 << 6);
    }

    *(void *)(v17 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v18;
    *(_DWORD *)(*(void *)(v10 + 48) + 4 * v1_Block_object_dispose(va, 8) = v24;
    ++*(void *)(v10 + 16);
  }

  uint64_t v23 = v21 + 4;
  if (v23 >= v16) {
    goto LABEL_66;
  }
  uint64_t v22 = v12[v23];
  if (v22)
  {
    unsigned int v11 = v23;
    goto LABEL_29;
  }

  while (1)
  {
    unsigned int v11 = v23 + 1;
    if (__OFADD__(v23, 1LL)) {
      break;
    }
    if (v11 >= v16) {
      goto LABEL_66;
    }
    uint64_t v22 = v12[v11];
    ++v23;
    if (v22) {
      goto LABEL_29;
    }
  }

    unsigned int v15 = (v22 - 1) & v22;
    BOOL v20 = __clz(__rbit64(v22)) + (v11 << 6);
LABEL_30:
    int v24 = *(void *)(*(void *)(v7 + 48) + 8 * v20);
    CFMutableDictionaryRef result = static Hasher._hash(seed:_:)();
    unint64_t v25 = -1LL << *(_BYTE *)(v10 + 32);
    uint64_t v26 = result & ~v25;
    uint64_t v27 = v26 >> 6;
    if (((-1LL << v26) & ~*(void *)(v17 + 8 * (v26 >> 6))) != 0)
    {
      char v18 = __clz(__rbit64((-1LL << v26) & ~*(void *)(v17 + 8 * (v26 >> 6)))) | v26 & 0x7FFFFFFFFFFFFFC0LL;
    }

    else
    {
      int v28 = 0;
      uint64_t v29 = (unint64_t)(63 - v25) >> 6;
      do
      {
        if (++v27 == v29 && (v28 & 1) != 0)
        {
          __break(1u);
          goto LABEL_114;
        }

        uint64_t v30 = v27 == v29;
        if (v27 == v29) {
          uint64_t v27 = 0LL;
        }
        v28 |= v30;
        CFRange v31 = *(void *)(v17 + 8 * v27);
      }

      while (v31 == -1);
      char v18 = __clz(__rbit64(~v31)) + (v27 << 6);
    }

    *(void *)(v17 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v18;
    *(void *)(*(void *)(v10 + 48) + 8 * v1_Block_object_dispose(va, 8) = v24;
    ++*(void *)(v10 + 16);
  }

  uint64_t v23 = v21 + 4;
  if (v23 >= v16) {
    goto LABEL_66;
  }
  uint64_t v22 = v12[v23];
  if (v22)
  {
    unsigned int v11 = v23;
    goto LABEL_29;
  }

  while (1)
  {
    unsigned int v11 = v23 + 1;
    if (__OFADD__(v23, 1LL)) {
      break;
    }
    if (v11 >= v16) {
      goto LABEL_66;
    }
    uint64_t v22 = v12[v11];
    ++v23;
    if (v22) {
      goto LABEL_29;
    }
  }

    unsigned int v15 = (v22 - 1) & v22;
    BOOL v20 = __clz(__rbit64(v22)) + (v11 << 6);
LABEL_30:
    int v24 = *(unsigned __int8 *)(*(void *)(v7 + 48) + v20);
    Hasher.init(_seed:)();
    Hasher._combine(_:)(v24);
    CFMutableDictionaryRef result = Hasher._finalize()();
    unint64_t v25 = -1LL << *(_BYTE *)(v10 + 32);
    uint64_t v26 = result & ~v25;
    uint64_t v27 = v26 >> 6;
    if (((-1LL << v26) & ~*(void *)(v17 + 8 * (v26 >> 6))) != 0)
    {
      char v18 = __clz(__rbit64((-1LL << v26) & ~*(void *)(v17 + 8 * (v26 >> 6)))) | v26 & 0x7FFFFFFFFFFFFFC0LL;
    }

    else
    {
      int v28 = 0;
      uint64_t v29 = (unint64_t)(63 - v25) >> 6;
      do
      {
        if (++v27 == v29 && (v28 & 1) != 0)
        {
          __break(1u);
          goto LABEL_115;
        }

        uint64_t v30 = v27 == v29;
        if (v27 == v29) {
          uint64_t v27 = 0LL;
        }
        v28 |= v30;
        CFRange v31 = *(void *)(v17 + 8 * v27);
      }

      while (v31 == -1);
      char v18 = __clz(__rbit64(~v31)) + (v27 << 6);
    }

    *(void *)(v17 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v18;
    *(_BYTE *)(*(void *)(v10 + 48) + v1_Block_object_dispose(va, 8) = v24;
    ++*(void *)(v10 + 16);
  }

  uint64_t v23 = v21 + 4;
  if (v23 >= v16) {
    goto LABEL_66;
  }
  uint64_t v22 = v12[v23];
  if (v22)
  {
    unsigned int v11 = v23;
    goto LABEL_29;
  }

  while (1)
  {
    unsigned int v11 = v23 + 1;
    if (__OFADD__(v23, 1LL)) {
      break;
    }
    if (v11 >= v16) {
      goto LABEL_66;
    }
    uint64_t v22 = v12[v11];
    ++v23;
    if (v22) {
      goto LABEL_29;
    }
  }

          char v14 = (v21 - 1) & v21;
          CFStringRef v19 = __clz(__rbit64(v21)) + (v16 << 6);
        }

        uint64_t v23 = *(void **)(*(void *)(v7 + 48) + 8 * v19);
        static String._unconditionallyBridgeFromObjectiveC(_:)(v23);
        Hasher.init(_seed:)();
        String.hash(into:)();
        int v24 = Hasher._finalize()();
        swift_bridgeObjectRelease();
        unint64_t v25 = -1LL << *(_BYTE *)(v10 + 32);
        uint64_t v26 = v24 & ~v25;
        uint64_t v27 = v26 >> 6;
        if (((-1LL << v26) & ~*(void *)(v15 + 8 * (v26 >> 6))) != 0)
        {
          unsigned int v17 = __clz(__rbit64((-1LL << v26) & ~*(void *)(v15 + 8 * (v26 >> 6)))) | v26 & 0x7FFFFFFFFFFFFFC0LL;
        }

        else
        {
          int v28 = 0;
          uint64_t v29 = (unint64_t)(63 - v25) >> 6;
          do
          {
            if (++v27 == v29 && (v28 & 1) != 0)
            {
              __break(1u);
              goto LABEL_124;
            }

            uint64_t v30 = v27 == v29;
            if (v27 == v29) {
              uint64_t v27 = 0LL;
            }
            v28 |= v30;
            CFRange v31 = *(void *)(v15 + 8 * v27);
          }

          while (v31 == -1);
          unsigned int v17 = __clz(__rbit64(~v31)) + (v27 << 6);
        }

        *(void *)(v15 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v17;
        *(void *)(*(void *)(v10 + 48) + 8 * v17) = v23;
        ++*(void *)(v10 + 16);
      }
    }

    unsigned int v17 = (v25 - 1) & v25;
    uint64_t v23 = __clz(__rbit64(v25)) + (v19 << 6);
LABEL_30:
    uint64_t v27 = (uint64_t *)(*(void *)(v10 + 48) + 32 * v23);
    int v28 = *v27;
    uint64_t v29 = v27[1];
    uint64_t v30 = v27[2];
    CFRange v31 = v27[3];
    Hasher.init(_seed:)();
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    CFMutableDictionaryRef result = Hasher._finalize()();
    uint64_t v32 = -1LL << *(_BYTE *)(v13 + 32);
    unint64_t v33 = result & ~v32;
    __int16 v34 = v33 >> 6;
    if (((-1LL << v33) & ~*(void *)(v18 + 8 * (v33 >> 6))) != 0)
    {
      BOOL v20 = __clz(__rbit64((-1LL << v33) & ~*(void *)(v18 + 8 * (v33 >> 6)))) | v33 & 0x7FFFFFFFFFFFFFC0LL;
    }

    else
    {
      unint64_t v35 = 0;
      v36 = (unint64_t)(63 - v32) >> 6;
      do
      {
        if (++v34 == v36 && (v35 & 1) != 0)
        {
          __break(1u);
          goto LABEL_124;
        }

        unint64_t v37 = v34 == v36;
        if (v34 == v36) {
          __int16 v34 = 0LL;
        }
        v35 |= v37;
        unint64_t v38 = *(void *)(v18 + 8 * v34);
      }

      while (v38 == -1);
      BOOL v20 = __clz(__rbit64(~v38)) + (v34 << 6);
    }

    *(void *)(v18 + ((v20 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v20;
    uint64_t v21 = (void *)(*(void *)(v13 + 48) + 32 * v20);
    *uint64_t v21 = v28;
    v21[1] = v29;
    v21[2] = v30;
    v21[3] = v31;
    ++*(void *)(v13 + 16);
    char v10 = v105;
  }

  uint64_t v26 = v24 + 4;
  if (v26 >= v102) {
    goto LABEL_66;
  }
  unint64_t v25 = v101[v26];
  if (v25)
  {
    CFStringRef v19 = v26;
    goto LABEL_29;
  }

  while (1)
  {
    CFStringRef v19 = v26 + 1;
    if (__OFADD__(v26, 1LL)) {
      break;
    }
    if (v19 >= v102) {
      goto LABEL_66;
    }
    unint64_t v25 = v101[v19];
    ++v26;
    if (v25) {
      goto LABEL_29;
    }
  }

  uint64_t v27 = (void *)MEMORY[0x189603F70];
  int v28 = *MEMORY[0x189603B38];
  uint64_t v29 = @"*** memory allocation failed";
LABEL_31:
  objc_exception_throw((id)[v27 exceptionWithName:v28 reason:v29 userInfo:0]);
  return (NSUnarchiver *)_decodeCharAtCursor(v30, v31, v32);
}

  ((void (*)(void *, uint64_t))v23)(v22, v9);
  +[__NSOperationInternalObserver _observeValueForKeyPath:ofObject:changeKind:oldValue:newValue:indexes:context:]( &OBJC_CLASS_____NSOperationInternalObserver,  "_observeValueForKeyPath:ofObject:changeKind:oldValue:newValue:indexes:context:",  @"isReady",  self,  0LL,  0LL,  0LL,  0LL,  0LL);
LABEL_30:
}

  CFMutableDictionaryRef result = *(void *)(a1 + 48) + *(void *)(a1 + 56);
  *(void *)(a1 + 40) = result;
  return result;
}

  a1[12] = a1[8];
  CFMutableDictionaryRef result = a1[18] + a1[17];
  a1[5] = result;
  return result;
}

  if (!data) {
    return 0x7FFFFFFFFFFFFFFFLL;
  }
  if (!-[NSData length](data, "length"))
  {
    if (v250)
    {
      int v28 = objc_msgSend((id)objc_msgSend(v14, "objectAtIndex:", 0), "integerValue");
      if (!string)
      {
LABEL_65:
        if (usedLossyConversion) {
          *usedLossyConversion = 0;
        }
        return v28;
      }
    }

    else
    {
      int v28 = 4LL;
      if (!string) {
        goto LABEL_65;
      }
    }

    *string = (NSString *)&stru_189CA6A28;
    goto LABEL_65;
  }

  if (qword_18C496B88 != -1) {
    dispatch_once(&qword_18C496B88, &__block_literal_global_41);
  }
  uint64_t v26 = v255;
  if (qword_18C496B90 != -1)
  {
    dispatch_once(&qword_18C496B90, &__block_literal_global_157);
    uint64_t v26 = v255;
  }

  if (v26 == 1) {
    uint64_t v27 = v259;
  }
  else {
    uint64_t v27 = 0;
  }
  if (v27 == 1)
  {
    LOBYTE(iterations) = 0;
    int v28 = objc_msgSend((id)objc_msgSend(v14, "objectAtIndex:", 0), "integerValue");
    if (string)
    {
      StringWithEncoding =  -[NSString initWithData:encoding:]( objc_alloc(&OBJC_CLASS___NSString),  "initWithData:encoding:",  data,  v28);
      if (!StringWithEncoding)
      {
        StringWithEncoding = +[NSEncodingDetector detectorForCFStringEncoding:allowBackupDetectors:]( &OBJC_CLASS___NSEncodingDetector,  "detectorForCFStringEncoding:allowBackupDetectors:",  CFStringConvertNSStringEncodingToEncoding(v28),  1LL);
        if (StringWithEncoding)
        {
          uint64_t v30 = StringWithEncoding;
          CFRange v31 = -[NSData bytes](data, "bytes");
          uint64_t v32 = data;
          unint64_t v33 = (uint64_t)v31;
          __int16 v34 = -[NSData length](v32, "length");
          -[NSString recognizeString:withDataLength:intoBuffer:]( v30,  "recognizeString:withDataLength:intoBuffer:",  v33,  v34,  0LL);
          StringWithEncoding = (NSString *)generateStringWithEncoding( v30,  v33,  v34,  0,  v249,  (uint64_t)v11,  (BOOL *)&iterations);
        }
      }

      *string = StringWithEncoding;
      if (usedLossyConversion) {
        *usedLossyConversion = iterations;
      }
    }

    return v28;
  }

  v257 = (void *)[MEMORY[0x189603FC8] dictionaryWithSharedKeySet:_MergedGlobals_117];
  obj = objc_alloc_init(MEMORY[0x189603FA8]);
  v252 = data;
  v241 = usedLossyConversion;
  v242 = string;
  v240 = (uint64_t)v11;
  if (v14)
  {
    v307 = 0u;
    v306 = 0u;
    v305 = 0u;
    v304 = 0u;
    unint64_t v35 = [v14 countByEnumeratingWithState:&v304 objects:v303 count:16];
    if (v35)
    {
      v36 = v35;
      v253 = 0;
      unint64_t v37 = *(void *)v305;
      unint64_t v38 = v255;
      do
      {
        unint64_t v39 = v14;
        for (i = 0LL; i != v36; ++i)
        {
          if (*(void *)v305 != v37) {
            objc_enumerationMutation(v39);
          }
          unint64_t v41 = *(void **)(*((void *)&v304 + 1) + 8 * i);
          int v28 = [v41 integerValue];
          int v42 = CFStringConvertNSStringEncodingToEncoding(v28);
          unint64_t v43 = +[NSEncodingDetector detectorForCFStringEncoding:allowBackupDetectors:]( &OBJC_CLASS___NSEncodingDetector,  "detectorForCFStringEncoding:allowBackupDetectors:",  v42,  v259);
          if (v43)
          {
            int v44 = (double *)v43;
            objc_msgSend( v257,  "setObject:forKey:",  v43,  +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", v42));
            *((_DWORD *)v44 + 41) = v38--;
            v44[19] = v44[19] * 10.0;
          }

          else if (v255 < 2 || v38 == v255)
          {
            unint64_t v45 =  -[NSString initWithData:encoding:]( objc_alloc(&OBJC_CLASS___NSString),  "initWithData:encoding:",  v252,  v28);
            if (v45)
            {
              if (v242) {
                *v242 = v45;
              }
              if (v241) {
                *v241 = 0;
              }
              return v28;
            }
          }

          else
          {
            [obj addObject:v41];
            v253 = 1;
          }
        }

        char v14 = v39;
        v36 = [v39 countByEnumeratingWithState:&v304 objects:v303 count:16];
      }

      while (v36);
    }

    else
    {
      v253 = 0;
    }

    unint64_t v46 = v253;
    usedLossyConversion = v241;
    string = v242;
    unsigned int v11 = (const __CFString *)v240;
    data = v252;
  }

  else
  {
    unint64_t v46 = 0;
  }

  if (v259)
  {
    if ([v257 count])
    {
      v239 = v46;
LABEL_90:
      unint64_t v49 = 0LL;
      goto LABEL_98;
    }

    return 0x7FFFFFFFFFFFFFFFLL;
  }

  v239 = v46;
  if ([v13 count])
  {
    unint64_t v48 = v14;
    unint64_t v49 = (void *)[MEMORY[0x189603FC8] dictionaryWithSharedKeySet:_MergedGlobals_117];
    v299 = 0u;
    v300 = 0u;
    v301 = 0u;
    v302 = 0u;
    unint64_t v50 = [v13 countByEnumeratingWithState:&v299 objects:v298 count:16];
    if (v50)
    {
      v51 = v50;
      id v52 = *(void *)v300;
      uint64_t v53 = MEMORY[0x189604A88];
      do
      {
        for (j = 0LL; j != v51; ++j)
        {
          if (*(void *)v300 != v52) {
            objc_enumerationMutation(v13);
          }
          objc_msgSend( v49,  "setObject:forKey:",  v53,  +[NSNumber numberWithUnsignedInt:]( NSNumber,  "numberWithUnsignedInt:",  CFStringConvertNSStringEncodingToEncoding(objc_msgSend(*(id *)(*((void *)&v299 + 1) + 8 * j), "integerValue"))));
        }

        v51 = [v13 countByEnumeratingWithState:&v299 objects:v298 count:16];
      }

      while (v51);
    }

    if (((!v245 | v247) & 1) != 0)
    {
      string = v242;
      unsigned int v11 = (const __CFString *)v240;
      data = v252;
      char v14 = v48;
      goto LABEL_98;
    }

    string = v242;
    char v14 = v48;
    if (v49) {
      goto LABEL_93;
    }
  }

  else if (((!v245 | v247) & 1) != 0)
  {
    goto LABEL_90;
  }

  unint64_t v49 = (void *)[MEMORY[0x189603FC8] dictionaryWithSharedKeySet:_MergedGlobals_117];
LABEL_93:
  v55 = v14;
  v56 = 0LL;
  v57 = MEMORY[0x189604A88];
  do
  {
    unint64_t v58 = +[NSNumber numberWithUnsignedInt:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInt:",  windowsEncodings[v56]);
    if (![v257 objectForKey:v58]) {
      [v49 setObject:v57 forKey:v58];
    }
    ++v56;
  }

  while (v56 != 14);
  unsigned int v11 = (const __CFString *)v240;
  data = v252;
  char v14 = v55;
LABEL_98:
  v267 = 0;
  int v59 = -[NSData bytes](data, "bytes");
  uint64_t v60 = -[NSData length](data, "length");
  v61 = (void *)objc_msgSend( v257,  "objectForKey:",  +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", 1536));
  if (v61)
  {
    v62 = v61;
    if ([v61 recognizeString:v59 withDataLength:v60 intoBuffer:0] && !v62[8])
    {
      [v62 softReset];
      if (string)
      {
        *string =  -[NSString initWithBytes:length:encoding:]( [NSString alloc],  "initWithBytes:length:encoding:",  v59,  v60,  [v62 nsEncoding]);
        if (usedLossyConversion) {
          *usedLossyConversion = v267;
        }
      }

      return 1LL;
    }

    [v62 softReset];
  }

  v63 = +[NSNumber numberWithUnsignedInt:](&OBJC_CLASS___NSNumber, "numberWithUnsignedInt:", 67109120LL);
  if (![v49 objectForKey:v63])
  {
    v64 = (void *)objc_msgSend( v257,  "objectForKey:",  +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", 67109120));
    if (v64) {
      v65 = 1;
    }
    else {
      v65 = v259;
    }
    if ((v65 & 1) == 0)
    {
      v64 = +[NSEncodingDetector detectorForCFStringEncoding:allowBackupDetectors:]( &OBJC_CLASS___NSEncodingDetector,  "detectorForCFStringEncoding:allowBackupDetectors:",  67109120LL,  0LL);
      [v257 setObject:v64 forKey:v63];
    }

    if (v64)
    {
      if ([v64 recognizeString:v59 withDataLength:v60 intoBuffer:0])
      {
        if (*((_BYTE *)v64 + 160))
        {
          if (!v64[8] || *((_DWORD *)v64 + 41) && ([v64 bytesRatio], v66 >= 0.99))
          {
            v67 = checkSuggestedEncodings((uint64_t)v59, v60, v257);
            v68 = v67 ? (void *)v67 : v64;
            if (generateStringWithEncoding(v68, (uint64_t)v59, v60, 1, 0, 0LL, 0LL))
            {
              if (string)
              {
                *string = (NSString *)generateStringWithEncoding(v68, (uint64_t)v59, v60, 1, v249, (uint64_t)v11, &v267);
                if (usedLossyConversion) {
                  *usedLossyConversion = v267;
                }
              }

              v69 = v68;
              return [v69 nsEncoding];
            }
          }
        }
      }

      [v257 removeObjectForKey:&off_189D0DCE8];
    }
  }

  v70 = +[NSNumber numberWithUnsignedInt:](&OBJC_CLASS___NSNumber, "numberWithUnsignedInt:", 134217984LL);
  v254 = v60;
  if ([v49 objectForKey:v70])
  {
    v71 = 0LL;
LABEL_125:
    v72 = v257;
    goto LABEL_126;
  }

  v71 = (_DWORD *)objc_msgSend( v257,  "objectForKey:",  +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", 134217984));
  if (v71) {
    v75 = 1;
  }
  else {
    v75 = v259;
  }
  if ((v75 & 1) == 0)
  {
    v71 = +[NSEncodingDetector detectorForCFStringEncoding:allowBackupDetectors:]( &OBJC_CLASS___NSEncodingDetector,  "detectorForCFStringEncoding:allowBackupDetectors:",  134217984LL,  0LL);
    [v257 setObject:v71 forKey:v70];
  }

  if (!v71) {
    goto LABEL_125;
  }
  if ([v71 recognizeString:v59 withDataLength:v60 intoBuffer:0]
    && ([v71 bytesRatio], v76 >= 0.85)
    && ([v71 multiBytesRatio], v77 > 0.0)
    && (*((_BYTE *)v71 + 162) || !*((void *)v71 + 8) || ([v71 multiBytesRatio], v78 >= 0.7))
    || v71[41]
    && (*((_BYTE *)v71 + 162)
     || ([v71 bytesRatio], v79 >= 0.99)
     || ([v71 multiBytesRatio], v80 > 0.7)))
  {
    if (v71[41]) {
      v81 = v255 != v71[41];
    }
    else {
      v81 = v250;
    }
    if (!v81)
    {
      if (string)
      {
        *string = (NSString *)generateStringWithEncoding(v71, (uint64_t)v59, v60, 1, v249, (uint64_t)v11, &v267);
        if (usedLossyConversion) {
          *usedLossyConversion = v267;
        }
      }

      return 4LL;
    }

    goto LABEL_125;
  }

  v72 = v257;
  [v257 removeObjectForKey:&off_189D0DD00];
  v71 = 0LL;
LABEL_126:
  v73 = +[NSNumber numberWithUnsignedInt:](&OBJC_CLASS___NSNumber, "numberWithUnsignedInt:", 256LL);
  if ([v49 objectForKey:v73])
  {
    v74 = 0LL;
  }

  else
  {
    v74 = (id)objc_msgSend( v72,  "objectForKey:",  +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", 256));
    if (v74) {
      v82 = 1;
    }
    else {
      v82 = v259;
    }
    if ((v82 & 1) == 0)
    {
      v74 = +[NSEncodingDetector detectorForCFStringEncoding:allowBackupDetectors:]( &OBJC_CLASS___NSEncodingDetector,  "detectorForCFStringEncoding:allowBackupDetectors:",  256LL,  0LL);
      [v72 setObject:v74 forKey:v73];
    }
  }

  v246 = v71;
  v83 = +[NSNumber numberWithUnsignedInt:](&OBJC_CLASS___NSNumber, "numberWithUnsignedInt:", 268435712LL);
  if ([v49 objectForKey:v83])
  {
    v84 = 0LL;
  }

  else
  {
    v84 = (id)objc_msgSend( v72,  "objectForKey:",  +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", 268435712));
    if (v84) {
      v85 = 1;
    }
    else {
      v85 = v259;
    }
    if ((v85 & 1) == 0)
    {
      v84 = +[NSEncodingDetector detectorForCFStringEncoding:allowBackupDetectors:]( &OBJC_CLASS___NSEncodingDetector,  "detectorForCFStringEncoding:allowBackupDetectors:",  268435712LL,  0LL);
      [v72 setObject:v84 forKey:v83];
    }
  }

  v86 = +[NSNumber numberWithUnsignedInt:](&OBJC_CLASS___NSNumber, "numberWithUnsignedInt:", 335544576LL);
  if ([v49 objectForKey:v86])
  {
    v87 = 0LL;
  }

  else
  {
    v87 = (id)objc_msgSend( v72,  "objectForKey:",  +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", 335544576));
    v88 = v259;
    if (v87) {
      v88 = 1;
    }
    if ((v88 & 1) == 0)
    {
      v87 = +[NSEncodingDetector detectorForCFStringEncoding:allowBackupDetectors:]( &OBJC_CLASS___NSEncodingDetector,  "detectorForCFStringEncoding:allowBackupDetectors:",  335544576LL,  0LL);
      [v72 setObject:v87 forKey:v86];
    }
  }

  v89 = (void *)[MEMORY[0x189603FA8] arrayWithCapacity:3];
  v90 = v89;
  if (v74) {
    [v89 addObject:v74];
  }
  if (v84) {
    [v90 addObject:v84];
  }
  v256 = v14;
  if (v87) {
    [v90 addObject:v87];
  }
  v296 = 0u;
  v297 = 0u;
  v294 = 0u;
  v295 = 0u;
  v91 = [v90 countByEnumeratingWithState:&v294 objects:v293 count:16];
  if (!v91)
  {
LABEL_189:
    v291 = 0u;
    v292 = 0u;
    v289 = 0u;
    v290 = 0u;
    v97 = [v90 countByEnumeratingWithState:&v289 objects:v288 count:16];
    if (v97)
    {
      v98 = v97;
      v99 = *(void *)v290;
      do
      {
        for (k = 0LL; k != v98; ++k)
        {
          if (*(void *)v290 != v99) {
            objc_enumerationMutation(v90);
          }
          objc_msgSend( v257,  "removeObjectForKey:",  +[NSNumber numberWithUnsignedInt:]( NSNumber,  "numberWithUnsignedInt:",  *(unsigned int *)(*(void *)(*((void *)&v289 + 1) + 8 * k) + 24)));
        }

        v98 = [v90 countByEnumeratingWithState:&v289 objects:v288 count:16];
      }

      while (v98);
    }

    v101 = +[NSNumber numberWithUnsignedInt:](&OBJC_CLASS___NSNumber, "numberWithUnsignedInt:", 201326848LL);
    if ([v49 objectForKey:v101])
    {
      v102 = 0LL;
    }

    else
    {
      v102 = (id)objc_msgSend( v257,  "objectForKey:",  +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", 201326848));
      if (v102) {
        v103 = 1;
      }
      else {
        v103 = v259;
      }
      if ((v103 & 1) == 0)
      {
        v102 = +[NSEncodingDetector detectorForCFStringEncoding:allowBackupDetectors:]( &OBJC_CLASS___NSEncodingDetector,  "detectorForCFStringEncoding:allowBackupDetectors:",  201326848LL,  0LL);
        [v257 setObject:v102 forKey:v101];
      }
    }

    v104 = +[NSNumber numberWithUnsignedInt:](&OBJC_CLASS___NSNumber, "numberWithUnsignedInt:", 402653440LL);
    if ([v49 objectForKey:v104])
    {
      v105 = 0LL;
    }

    else
    {
      v105 = (id)objc_msgSend( v257,  "objectForKey:",  +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", 402653440));
      if (v105) {
        v106 = 1;
      }
      else {
        v106 = v259;
      }
      if ((v106 & 1) == 0)
      {
        v105 = +[NSEncodingDetector detectorForCFStringEncoding:allowBackupDetectors:]( &OBJC_CLASS___NSEncodingDetector,  "detectorForCFStringEncoding:allowBackupDetectors:",  402653440LL,  0LL);
        [v257 setObject:v105 forKey:v104];
      }
    }

    v107 = +[NSNumber numberWithUnsignedInt:](&OBJC_CLASS___NSNumber, "numberWithUnsignedInt:", 469762304LL);
    if ([v49 objectForKey:v107])
    {
      v108 = 0LL;
    }

    else
    {
      v108 = (id)objc_msgSend( v257,  "objectForKey:",  +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", 469762304));
      if (v108) {
        v109 = 1;
      }
      else {
        v109 = v259;
      }
      if ((v109 & 1) == 0)
      {
        v108 = +[NSEncodingDetector detectorForCFStringEncoding:allowBackupDetectors:]( &OBJC_CLASS___NSEncodingDetector,  "detectorForCFStringEncoding:allowBackupDetectors:",  469762304LL,  0LL);
        [v257 setObject:v108 forKey:v107];
      }
    }

    [v90 removeAllObjects];
    if (v102) {
      [v90 addObject:v102];
    }
    if (v105) {
      [v90 addObject:v105];
    }
    if (v108) {
      [v90 addObject:v108];
    }
    v286 = 0u;
    v287 = 0u;
    v284 = 0u;
    v285 = 0u;
    v110 = [v90 countByEnumeratingWithState:&v284 objects:v283 count:16];
    if (v110)
    {
      v111 = v110;
      v112 = *(void *)v285;
LABEL_232:
      v113 = 0LL;
      while (1)
      {
        if (*(void *)v285 != v112) {
          objc_enumerationMutation(v90);
        }
        v95 = *(void *)(*((void *)&v284 + 1) + 8 * v113);
        if ([(id)v95 recognizeString:v59 withDataLength:v254 intoBuffer:0])
        {
          [(id)v95 bytesRatio];
          if (v114 >= 0.85)
          {
            if (*(_BYTE *)(v95 + 162)) {
              break;
            }
            [(id)v95 bytesRatio];
            if (v115 >= 0.99) {
              break;
            }
          }
        }

        if (v111 == ++v113)
        {
          v111 = [v90 countByEnumeratingWithState:&v284 objects:v283 count:16];
          if (!v111) {
            goto LABEL_241;
          }
          goto LABEL_232;
        }
      }

      if (v242)
      {
        *v242 = (NSString *)generateStringWithEncoding((void *)v95, (uint64_t)v59, v254, 1, v249, v240, &v267);
        if (v241) {
          *v241 = v267;
        }
      }

      goto LABEL_268;
    }

    if (!v22
      && ((v24 - 32) < 0x5Fu || *(unsigned __int8 *)(a1 + v19) <= 0xDu && ((1 << v24) & 0x3700) != 0))
    {
      ++v19;
      ++v51;
      objc_msgSend(a17, "appendByte:", v24, v39);
      uint64_t v21 = v55;
      goto LABEL_2;
    }

    if ((v57 & 1) != 0 && (v24 - 33) <= 0x5Du && v22 && v19 + 1 < a2)
    {
      __int16 v34 = *(unsigned __int8 *)(a1 + v19 + 1);
      if ((v34 - 33) <= 0x5D)
      {
        *(&bytes + v55) = v24;
        *(&bytes + v53) = v34;
        uint64_t v40 = (void *)qword_18C496AA0;
        unint64_t v35 = CFStringCreateWithBytesNoCopy(0LL, &bytes, v52, a13, 0, contentsDeallocator);
        if (v35)
        {
          v36 = v35;
          v64[0] = CFStringGetCharacterAtIndex(v35, 0LL);
          if ([v40 indexForKey:v64 length:1] != 0x7FFFFFFFFFFFFFFFLL) {
            ++*a14;
          }
          CFRelease(v36);
          unint64_t v37 = v64[0];
          if (v64[0])
          {
            if (v42)
            {
              v64[0] = v42;
              v64[1] = v37;
              if ([(id)qword_18C496AA8 indexForKey:v64 length:2] != 0x7FFFFFFFFFFFFFFFLL) {
                ++*v39;
              }
            }

            v19 += 2LL;
            ++v48;
            objc_msgSend(a17, "appendByte1:byte2:", v24, v34, v39);
            v57 = 1;
            unint64_t v49 = v20;
            int v42 = v37;
            goto LABEL_4;
          }
        }

        int v42 = 0;
      }
    }

    objc_msgSend(a17, "appendPlaceholder", v39);
    [a17 appendBytes:&v60 count:v56];
    ++*a16;
    ++v20;
    ++v19;
    if (v20 > a18) {
      goto LABEL_52;
    }
  }

  BOOL v20 = v49 + v23 - v50;
LABEL_52:
  CFMutableDictionaryRef result = v48 + v51;
  *a3 += v48 + v51;
  *a7 = v20;
  *a4 = v48;
  *a5 = v51;
  *a6 = v54;
  return result;
}

  if (a5 && v22) {
    *a5 = v22;
  }
  return (id)v25;
}

    -[NSCoder failWithError:]( aDecoder,  "failWithError:",  +[NSError _readCorruptErrorWithFormat:](&OBJC_CLASS___NSError, "_readCorruptErrorWithFormat:", v23));
  }

  else
  {
    uint64_t v21 = -[NSCoder versionForClassName:](aDecoder, "versionForClassName:", @"NSOrthography");
    if (v21 == 1)
    {
      char v6 = -[NSCoder decodeObject](aDecoder, "decodeObject");
      char v10 = -[NSCoder decodeObject](aDecoder, "decodeObject");
      return -[NSOrthography initWithDominantScript:languageMap:](self, "initWithDominantScript:languageMap:", v6, v10);
    }

    int v24 = v21;
    unint64_t v25 = _NSFullMethodName((objc_class *)self, a2);
    NSLog((NSString *)@"%@: class version %ld cannot read instances archived with version %ld", v25, 1LL, v24);
    -[NSOrthography dealloc](self, "dealloc");
  }

  return 0LL;
}

void *_NS_os_log_callback(void *result, _BYTE *a2, unint64_t a3, _BYTE *a4)
{
  v17[1] = *MEMORY[0x1895F89C0];
  if (result)
  {
    unsigned int v7 = result;
    char v8 = (void *)MEMORY[0x186E1FF60]();
    if (([v7 isProxy] & 1) != 0 || object_isClass(v7)) {
      unsigned int v7 = (void *)[v7 description];
    }
    if (_NSIsNSObject())
    {
      if (a4 && !*a4)
      {
        char v12 = (__CFString *)[v7 description];
      }

      else
      {
        int v9 = _NSIsNSNumber() ^ 1;
        if (!a4) {
          LOBYTE(v9) = 1;
        }
        if ((v9 & 1) == 0) {
          *a4 = 0;
        }
        int v10 = _NSIsNSCFConstantString() ^ 1;
        if (!a4) {
          LOBYTE(v10) = 1;
        }
        if ((v10 & 1) == 0) {
          *a4 = 0;
        }
        unsigned int v11 = (objc_class *)objc_opt_class();
        if (class_respondsToSelector(v11, sel_redactedDescription))
        {
          char v12 = (__CFString *)[v7 redactedDescription];
          if (a4) {
            *a4 = 0;
          }
        }

        else
        {
          char v12 = &stru_189CA6A28;
        }
      }

      uint64_t v15 = -[__CFString length](v12, "length");
      uint64_t v16 = v15;
      if (v15)
      {
        if (a3 >= 2
          && ((v17[0] = 0LL,
               (-[__CFString getBytes:maxLength:usedLength:encoding:options:range:remainingRange:]( v12,  "getBytes:maxLength:usedLength:encoding:options:range:remainingRange:",  a2,  a3 - 1,  v17,  4LL,  2LL,  0LL,  v15,  0LL) & 1) != 0)
           || -[__CFString getBytes:maxLength:usedLength:encoding:options:range:remainingRange:]( v12,  "getBytes:maxLength:usedLength:encoding:options:range:remainingRange:",  a2,  a3 - 1,  v17,  7LL,  2LL,  0LL,  v16,  0LL)))
        {
          a2[v17[0]] = 0;
          int v13 = 1;
        }

        else
        {
          int v13 = 0;
        }
      }

      else
      {
        int v13 = 1;
        if (a2)
        {
          int v14 = 1;
          if (a3) {
            *a2 = 0;
          }
          goto LABEL_32;
        }
      }

      int v14 = 1;
    }

    else
    {
      int v13 = 0;
      int v14 = 0;
    }

LABEL_32:
    objc_autoreleasePoolPop(v8);
    return (void *)(v13 & v14);
  }

  return result;
}

    __break(1u);
    goto LABEL_33;
  }

  return result;
}

    __break(1u);
LABEL_33:
    __break(1u);
    goto LABEL_34;
  }

  return result;
}

  swift_bridgeObjectRelease_n();
  *(void *)&v124 = v39;
  *((void *)&v124 + 1) = 1LL;
  *(void *)&v125 = MEMORY[0x18961AFE8];
  *((void *)&v125 + 1) = 1LL;
  v57 = swift_bridgeObjectRetain();
  unint64_t v58 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay10Foundation20PredicateExpressionsO10VariableIDVG_SSs5NeverOTg50118_s10Foundation17createDescription33_0E6808C72783E37C9BBD8DD29A9ABF15LL8variable10expression8typeName10outputTypeSSAA20ef2O8G70Vy_xGxQp_q0_SSq_mtRvzAA08StandardR10ExpressionR0_r1_lFSSAI0T2IDVXEfU0_AF26DebugStringConversionStateVTf1cn_n( v57,  (uint64_t *)&v124);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease_n();
  v117 = v58;
  int v59 = BidirectionalCollection<>.joined(separator:)();
  v61 = v60;
  swift_bridgeObjectRelease();
  v62 = v128;
  v63 = v129;
  __swift_project_boxed_opaque_existential_1(&v127, v128);
  v64 = (*(uint64_t (**)(__int128 *, uint64_t, uint64_t))(v63 + 16))(&v124, v62, v63);
  v66 = v65;
  v67 = v125;
  v117 = v125;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain_n();
  v68 = BidirectionalCollection<>.joined(separator:)();
  v70 = v69;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease();
  v71 = (void *)(HIBYTE(v70) & 0xF);
  if ((v70 & 0x2000000000000000LL) == 0) {
    v71 = (void *)(v68 & 0xFFFFFFFFFFFFLL);
  }
  if (v71)
  {
    v117 = v67;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain_n();
    v72 = BidirectionalCollection<>.joined(separator:)();
    v74 = v73;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    v117 = v72;
    v118 = v74;
    v75._countAndFlagsBits = 10LL;
    v75._object = (void *)0xE100000000000000LL;
    String.append(_:)(v75);
    v71 = (void *)v117;
    v76 = v118;
  }

  else
  {
    v76 = 0xE000000000000000LL;
  }

  v122 = v71;
  v123 = v76;
  if (v105[0] == MEMORY[0x18961AFC8] + 8LL)
  {
    v78 = 0LL;
    v79 = (void *)0xE000000000000000LL;
  }

  else
  {
    v117 = 8236LL;
    v118 = 0xE200000000000000LL;
    v77._countAndFlagsBits = _typeName(_:qualified:)();
    String.append(_:)(v77);
    swift_bridgeObjectRelease();
    v78 = v117;
    v79 = (void *)v118;
  }

  v117 = 0LL;
  v118 = 0xE000000000000000LL;
  _StringGuts.grow(_:)(25LL);
  v80 = v108;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v121._countAndFlagsBits = v107;
  v121._object = v80;
  v81._countAndFlagsBits = 60LL;
  v81._object = (void *)0xE100000000000000LL;
  String.append(_:)(v81);
  String.append(_:)(v106);
  swift_bridgeObjectRelease();
  v82._countAndFlagsBits = v78;
  v82._object = v79;
  String.append(_:)(v82);
  swift_bridgeObjectRelease();
  v83._countAndFlagsBits = 544940094LL;
  v83._object = (void *)0xE400000000000000LL;
  String.append(_:)(v83);
  v84._countAndFlagsBits = v59;
  v84._object = v61;
  String.append(_:)(v84);
  swift_bridgeObjectRelease();
  v85._countAndFlagsBits = 0x202020200A6E6920LL;
  v85._object = (void *)0xE800000000000000LL;
  String.append(_:)(v85);
  v86 = HIBYTE(v66) & 0xF;
  if ((v66 & 0x2000000000000000LL) == 0) {
    v86 = v64;
  }
  v87 = 7LL;
  if (((v66 >> 60) & ((v64 & 0x800000000000000LL) == 0)) != 0) {
    v87 = 11LL;
  }
  v88 = v87 | (v86 << 16);
  if ((specialized Sequence<>.starts<A>(with:)() & 1) != 0) {
    v89 = String.index(after:)();
  }
  else {
    v89 = 15LL;
  }
  v90._countAndFlagsBits = 41LL;
  v90._object = (void *)0xE100000000000000LL;
  if (String.hasSuffix(_:)(v90)) {
    v88 = String.index(before:)();
  }
  if (v88 >> 14 < v89 >> 14) {
    goto LABEL_54;
  }
  v113 = String.subscript.getter();
  v114 = v91;
  v115 = v92;
  v116 = v93;
  v111 = 10LL;
  v112 = 0xE100000000000000LL;
  v109 = 0x202020200ALL;
  v110 = 0xE500000000000000LL;
  lazy protocol witness table accessor for type Substring and conformance Substring();
  lazy protocol witness table accessor for type String and conformance String();
  RangeReplaceableCollection<>.replacing<A, B>(_:with:maxReplacements:)();
  swift_bridgeObjectRelease();
  v94 = MEMORY[0x186E1B610](v117, v118, v119, v120);
  v96 = v95;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v97._countAndFlagsBits = v94;
  v97._object = v96;
  String.append(_:)(v97);
  swift_bridgeObjectRelease();
  v98._countAndFlagsBits = 32010LL;
  v98._object = (void *)0xE200000000000000LL;
  String.append(_:)(v98);
  String.append(_:)(v121);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v99 = v122;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v127);
  return v99;
}

  Hasher._combine(_:)(0);
  uint64_t v22 = 0LL;
LABEL_33:

  uint64_t v27 = v48;
  if (v27)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    specialized Dictionary<>.hash(into:)((uint64_t)v55, v27);
    swift_bridgeObjectRelease();
    int v28 = v49;
    if (v49) {
      goto LABEL_35;
    }
LABEL_38:
    Hasher._combine(_:)(0);
    if (v50) {
      goto LABEL_36;
    }
LABEL_39:
    Hasher._combine(_:)(0);
    goto LABEL_40;
  }

  Hasher._combine(_:)(0);
  int v28 = v49;
  if (!v49) {
    goto LABEL_38;
  }
LABEL_35:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)((uint64_t)v55, v28);
  swift_bridgeObjectRelease();
  if (!v50) {
    goto LABEL_39;
  }
LABEL_36:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
LABEL_40:
  if (v51 == 2)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    uint64_t v29 = v51 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v29);
  }

  if (v52 == 2)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    uint64_t v30 = v52 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v30);
  }

  if (v53 == 2)
  {
    CFRange v31 = 0;
  }

  else
  {
    CFRange v31 = v53 & 1;
    Hasher._combine(_:)(1u);
  }

  Hasher._combine(_:)(v31);
  if (v54 == 2)
  {
    uint64_t v32 = 0;
  }

  else
  {
    unint64_t v33 = v54 & 1;
    Hasher._combine(_:)(1u);
    uint64_t v32 = v33;
  }

  Hasher._combine(_:)(v32);
  outlined retain of LocalePreferences?( (uint64_t)v56,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined consume of LocalePreferences?);
LABEL_53:
  __int16 v34 = Hasher._finalize()();
  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, v34);
}

  Hasher._combine(_:)(0);
  uint64_t v22 = 0LL;
LABEL_33:

  uint64_t v27 = v48;
  if (v27)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    specialized Dictionary<>.hash(into:)((uint64_t)v55, v27);
    swift_bridgeObjectRelease();
    int v28 = v49;
    if (v49) {
      goto LABEL_35;
    }
LABEL_38:
    Hasher._combine(_:)(0);
    if (v50) {
      goto LABEL_36;
    }
LABEL_39:
    Hasher._combine(_:)(0);
    goto LABEL_40;
  }

  Hasher._combine(_:)(0);
  int v28 = v49;
  if (!v49) {
    goto LABEL_38;
  }
LABEL_35:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)((uint64_t)v55, v28);
  swift_bridgeObjectRelease();
  if (!v50) {
    goto LABEL_39;
  }
LABEL_36:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
LABEL_40:
  if (v51 == 2)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    uint64_t v29 = v51 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v29);
  }

  if (v52 == 2)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    uint64_t v30 = v52 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v30);
  }

  if (v53 == 2)
  {
    CFRange v31 = 0;
  }

  else
  {
    CFRange v31 = v53 & 1;
    Hasher._combine(_:)(1u);
  }

  Hasher._combine(_:)(v31);
  if (v54 == 2)
  {
    uint64_t v32 = 0;
  }

  else
  {
    unint64_t v33 = v54 & 1;
    Hasher._combine(_:)(1u);
    uint64_t v32 = v33;
  }

  Hasher._combine(_:)(v32);
  outlined retain of LocalePreferences?( (uint64_t)v56,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined consume of LocalePreferences?);
  outlined retain of LocalePreferences?( (uint64_t)v56,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined consume of LocalePreferences?);
LABEL_53:
  __int16 v34 = Hasher._finalize()();
  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, v34);
}

        int v10 = (v22 - 1) & v22;
        BOOL v20 = __clz(__rbit64(v22)) + (v13 << 6);
      }

      int v28 = (uint64_t *)(*(void *)(v5 + 48) + 16 * v20);
      uint64_t v30 = *v28;
      uint64_t v29 = v28[1];
      CFRange v31 = *(void *)(*(void *)(v5 + 56) + 8 * v20);
      if ((v35 & 1) == 0) {
        swift_bridgeObjectRetain();
      }
      Hasher.init(_seed:)();
      String.hash(into:)();
      CFMutableDictionaryRef result = Hasher._finalize()();
      int v14 = -1LL << *(_BYTE *)(v7 + 32);
      uint64_t v15 = result & ~v14;
      uint64_t v16 = v15 >> 6;
      if (((-1LL << v15) & ~*(void *)(v11 + 8 * (v15 >> 6))) != 0)
      {
        unsigned int v17 = __clz(__rbit64((-1LL << v15) & ~*(void *)(v11 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0LL;
      }

      else
      {
        int v24 = 0;
        unint64_t v25 = (unint64_t)(63 - v14) >> 6;
        do
        {
          if (++v16 == v25 && (v24 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }

          uint64_t v26 = v16 == v25;
          if (v16 == v25) {
            uint64_t v16 = 0LL;
          }
          v24 |= v26;
          uint64_t v27 = *(void *)(v11 + 8 * v16);
        }

        while (v27 == -1);
        unsigned int v17 = __clz(__rbit64(~v27)) + (v16 << 6);
      }

      *(void *)(v11 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v17;
      char v18 = (void *)(*(void *)(v7 + 48) + 16 * v17);
      *char v18 = v30;
      v18[1] = v29;
      *(void *)(*(void *)(v7 + 56) + 8 * v17) = v31;
      ++*(void *)(v7 + 16);
    }
  }

  CFMutableDictionaryRef result = swift_release();
  CFMutableDictionaryRef *v3 = v7;
  return result;
}

        int v9 = (v21 - 1) & v21;
        CFStringRef v19 = __clz(__rbit64(v21)) + (v12 << 6);
      }

      uint64_t v27 = (uint64_t *)(*(void *)(v4 + 48) + 16 * v19);
      uint64_t v29 = *v27;
      int v28 = v27[1];
      uint64_t v30 = *(void *)(*(void *)(v4 + 56) + 8 * v19);
      if ((v34 & 1) == 0)
      {
        outlined copy of XMLPlistMap.Value(v30);
        swift_bridgeObjectRetain();
      }

      Hasher.init(_seed:)();
      String.hash(into:)();
      CFMutableDictionaryRef result = Hasher._finalize()();
      int v13 = -1LL << *(_BYTE *)(v6 + 32);
      int v14 = result & ~v13;
      uint64_t v15 = v14 >> 6;
      if (((-1LL << v14) & ~*(void *)(v10 + 8 * (v14 >> 6))) != 0)
      {
        uint64_t v16 = __clz(__rbit64((-1LL << v14) & ~*(void *)(v10 + 8 * (v14 >> 6)))) | v14 & 0x7FFFFFFFFFFFFFC0LL;
      }

      else
      {
        uint64_t v23 = 0;
        int v24 = (unint64_t)(63 - v13) >> 6;
        do
        {
          if (++v15 == v24 && (v23 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }

          unint64_t v25 = v15 == v24;
          if (v15 == v24) {
            uint64_t v15 = 0LL;
          }
          v23 |= v25;
          uint64_t v26 = *(void *)(v10 + 8 * v15);
        }

        while (v26 == -1);
        uint64_t v16 = __clz(__rbit64(~v26)) + (v15 << 6);
      }

      *(void *)(v10 + ((v16 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v16;
      unsigned int v17 = (void *)(*(void *)(v6 + 48) + 16 * v16);
      *unsigned int v17 = v29;
      v17[1] = v28;
      *(void *)(*(void *)(v6 + 56) + 8 * v16) = v30;
      ++*(void *)(v6 + 16);
    }
  }

  CFMutableDictionaryRef result = swift_release();
  *uint64_t v2 = v6;
  return result;
}

    if ((v5 & 1) == 0) {
      return 0LL;
    }
    outlined init with take of LocalePreferences?( v0,  (uint64_t)v29,  &demangling cache variable for type metadata for URLParseInfo?);
    outlined init with take of LocalePreferences?( (uint64_t)v29,  (uint64_t)&v51,  &demangling cache variable for type metadata for URLParseInfo?);
    if (!v51 || (*(_BYTE *)(v51 + 96) & 1) != 0)
    {
      outlined init with take of LocalePreferences?( (uint64_t)v29,  (uint64_t)&v50,  &demangling cache variable for type metadata for URLParseInfo?);
      if (!v50 || (*(_BYTE *)(v50 + 96) & 1) != 0) {
        return 0LL;
      }
    }

    goto LABEL_11;
  }

  return 1LL;
}

  CFMutableDictionaryRef result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

  CFMutableDictionaryRef result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

  CFMutableDictionaryRef result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

  CFMutableDictionaryRef result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

  CFMutableDictionaryRef result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

  CFMutableDictionaryRef result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

  CFMutableDictionaryRef result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

  CFMutableDictionaryRef result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

  CFMutableDictionaryRef result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

  CFMutableDictionaryRef result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

  CFMutableDictionaryRef result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

  CFMutableDictionaryRef result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

  CFMutableDictionaryRef result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

  CFMutableDictionaryRef result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

  CFMutableDictionaryRef result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

  CFMutableDictionaryRef result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

  CFMutableDictionaryRef result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

  CFMutableDictionaryRef result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

  CFMutableDictionaryRef result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

  CFMutableDictionaryRef result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

  CFMutableDictionaryRef result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

  Hasher._combine(_:)(0);
  if (v38) {
    goto LABEL_33;
  }
LABEL_21:
  Hasher._combine(_:)(1u);
  Hasher._combine(_:)(v25);
  if (!v39)
  {
LABEL_22:
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v26);
    goto LABEL_35;
  }

  objc_msgSend(v8, sel_setWeekday_, v27);
  if ((v43 & 1) != 0)
  {
LABEL_15:
    if ((v44 & 1) != 0) {
      goto LABEL_16;
    }
    goto LABEL_34;
  }

        if ((v21 & 0xC000) == 0x4000) {
          goto LABEL_61;
        }
LABEL_33:
        if ((v19 & 0xC) == v15)
        {
          unint64_t v38 = v19;
          v97 = a2;
          v105 = a4;
          v74 = a3;
          v81 = v17;
          v113 = a5;
          unint64_t v39 = a1;
          uint64_t v40 = v11;
          v89 = v12;
          unint64_t v41 = v16;
          int v42 = v18;
          unint64_t v43 = _StringGuts._slowEnsureMatchingEncoding(_:)(v38, a6, a7);
          char v18 = v42;
          a3 = v74;
          unsigned int v17 = v81;
          uint64_t v16 = v41;
          char v12 = v89;
          unsigned int v11 = v40;
          a2 = v97;
          a4 = v105;
          a1 = v39;
          a5 = v113;
          CFStringRef v19 = v43;
        }

        unint64_t v35 = v19 >> 16;
        if (v19 >> 16 >= v11) {
          goto LABEL_60;
        }
        if ((a7 & 0x1000000000000000LL) != 0)
        {
          int v44 = v19;
          v98 = a2;
          v106 = a4;
          v75 = a3;
          v82 = v17;
          v114 = a5;
          unint64_t v45 = a1;
          unint64_t v46 = v11;
          v90 = v12;
          unint64_t v47 = v16;
          unint64_t v48 = v18;
          unint64_t v49 = MEMORY[0x186E1B868](v44, a6, a7);
          char v18 = v48;
          a3 = v75;
          unsigned int v17 = v82;
          uint64_t v16 = v47;
          char v12 = v90;
          unsigned int v11 = v46;
          a2 = v98;
          a4 = v106;
          a1 = v45;
          a5 = v114;
          CFStringRef v19 = v49;
        }

        else
        {
          if (!v12)
          {
            if ((v19 & 0xC001) != 0)
            {
              if ((a7 & 0x2000000000000000LL) == 0) {
                goto LABEL_40;
              }
LABEL_49:
              v118 = a6;
              v119 = v17;
              LODWORD(v36) = *((unsigned __int8 *)&v118 + v35);
              if ((v36 & 0x80) == 0)
              {
LABEL_50:
                v36 = 1LL;
LABEL_51:
                v19 += v36 << 16;
                unint64_t v37 = 5;
                goto LABEL_52;
              }
            }

            else
            {
              v51 = v19;
              v100 = a2;
              v108 = a4;
              v77 = a3;
              v84 = v17;
              v116 = a5;
              id v52 = a1;
              uint64_t v53 = v11;
              v92 = v12;
              v54 = v16;
              v55 = v18;
              v56 = _StringGuts.scalarAlignSlow(_:)(v51, a6, a7);
              char v18 = v55;
              a3 = v77;
              unsigned int v17 = v84;
              uint64_t v16 = v54;
              char v12 = v92;
              unsigned int v11 = v53;
              a2 = v100;
              a4 = v108;
              a1 = v52;
              a5 = v116;
              CFStringRef v19 = v56 & 0xFFFFFFFFFFFFFFF2LL | 1;
              unint64_t v35 = v56 >> 16;
              if ((a7 & 0x2000000000000000LL) != 0) {
                goto LABEL_49;
              }
LABEL_40:
              if ((a6 & 0x1000000000000000LL) != 0)
              {
                LODWORD(v36) = *(unsigned __int8 *)(v18 + v35);
                if ((v36 & 0x80) == 0) {
                  goto LABEL_50;
                }
              }

              else
              {
                v101 = a2;
                v109 = a4;
                v117 = a5;
                v57 = a1;
                unint64_t v58 = a3;
                v62 = v11;
                v65 = v16;
                v93 = v12;
                v85 = v17;
                v70 = v18;
                int v59 = _StringObject.sharedUTF8.getter();
                uint64_t v16 = v65;
                char v18 = v70;
                unsigned int v17 = v85;
                char v12 = v93;
                unsigned int v11 = v62;
                a2 = v101;
                a4 = v109;
                a3 = v58;
                a1 = v57;
                a5 = v117;
                LODWORD(v36) = *(unsigned __int8 *)(v59 + v35);
                if ((v36 & 0x80) == 0) {
                  goto LABEL_50;
                }
              }
            }

            LODWORD(v36) = __clz(v36 ^ 0xFF) - 24;
            if ((_DWORD)v36 != 4)
            {
              v36 = v36;
              goto LABEL_51;
            }

            if ((v19 & 0xC000) != 0)
            {
              v36 = 4LL;
              goto LABEL_51;
            }

            unint64_t v37 = 16388;
LABEL_52:
            CFStringRef v19 = v19 & 0xFFFFFFFFFFFF0000LL | v37;
            goto LABEL_14;
          }

          CFStringRef v19 = (v19 & 0xFFFFFFFFFFFF0000LL) + 65549;
        }

  Hasher._combine(_:)(0);
  if (!v13) {
    goto LABEL_33;
  }
LABEL_28:
  Hasher._combine(_:)(1u);
  type metadata accessor for CFDictionaryRef(0LL);
  lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( (unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef,  (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef,  (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
  uint64_t v23 = v13;
  _CFObject.hash(into:)();

  if (v15)
  {
LABEL_29:
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0LL);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( (unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef,  (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef,  (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
    int v24 = v15;
    _CFObject.hash(into:)();

    goto LABEL_35;
  }

        unsigned int v11 = (unsigned __int8 *)static String._fromUTF8Repairing(_:)();
        uint64_t v29 = v28;
        uint64_t v30 = specialized static JSONError.SourceLocation.sourceLocation(at:fullSource:)(v8, v7, v6);
        uint64_t v32 = v31;
        __int16 v34 = v33;
        lazy protocol witness table accessor for type JSONError and conformance JSONError();
        swift_allocError();
        *(void *)CFStringRef v19 = v11;
        *(void *)(v19 + _Block_object_dispose(va, 8) = v29;
        *(void *)(v19 + 16) = v30;
        *(void *)(v19 + 24) = v32;
        *(void *)(v19 + 32) = v34;
        *(void *)(v19 + 40) = 0LL;
        BOOL v20 = 3;
        goto LABEL_33;
      }

      goto LABEL_44;
    }

    unint64_t v39 = result + 4;
    goto LABEL_38;
  }

  __break(1u);
LABEL_44:
  __break(1u);
  return result;
}

          Hasher._combine(_:)(0);
          if (v19)
          {
LABEL_28:
            Hasher._combine(_:)(1u);
            type metadata accessor for CFDictionaryRef(0LL);
            lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( (unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef,  (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef,  (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
            uint64_t v29 = v19;
            _CFObject.hash(into:)();

            if (v21)
            {
LABEL_29:
              Hasher._combine(_:)(1u);
              type metadata accessor for CFDictionaryRef(0LL);
              lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( (unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef,  (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef,  (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
              uint64_t v30 = v21;
              _CFObject.hash(into:)();

              goto LABEL_35;
            }

  swift_retain();
  BigString.init(_:)();
  AttributedString.init(_:attributes:)(v133, MEMORY[0x18961AFF0], MEMORY[0x18961AFF8], (uint64_t *)&v120);
  v64 = v120;
  v65 = *(_OWORD *)(v26 + 32);
  v150[0] = *(_OWORD *)(v26 + 16);
  v150[1] = v65;
  v150[2] = *(_OWORD *)(v26 + 48);
  v66 = BigString.endIndex.getter();
  v68 = v67;
  v70 = v69;
  v72 = v71;
  swift_retain();
  v73 = v26;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    v74 = *(_OWORD *)(v26 + 32);
    v149[0] = *(_OWORD *)(v26 + 16);
    v149[1] = v74;
    v149[2] = *(_OWORD *)(v26 + 48);
    v76 = *(void *)(v26 + 64);
    v75 = *(void *)(v26 + 72);
    v77 = *(void *)(v26 + 80);
    v118 = *(void *)(v26 + 88);
    v119 = v75;
    type metadata accessor for AttributedString.Guts();
    swift_allocObject();
    outlined retain of Locale((uint64_t)v149);
    swift_unknownObjectRetain();
    v73 = AttributedString.Guts.init(string:runs:)(v149, v76, v119, v77, v118);
    swift_release();
  }

  v78 = *(_OWORD *)(v73 + 32);
  v146 = *(_OWORD *)(v73 + 16);
  v147 = v78;
  v148 = *(_OWORD *)(v73 + 48);
  BigString.startIndex.getter();
  BigString.endIndex.getter();
  *(void *)&v139 = v66;
  *((void *)&v139 + 1) = v68;
  v140 = v70;
  v141 = v72;
  v142 = v66;
  v143 = v68;
  v144 = v70;
  v145 = v72;
  specialized AttributedString.Guts.replaceSubrange<A>(_:with:)(&v139, v64);
  swift_release();
  swift_release();
  v79 = objc_msgSend(v103, sel_symbol);
  static String._unconditionallyBridgeFromObjectiveC(_:)(v79);

  v136 = MEMORY[0x18961AFF0];
  v123 = &type metadata for AttributeScopes.FoundationAttributes.MeasurementAttribute.Component;
  v124 = lazy protocol witness table accessor for type AttributeScopes.FoundationAttributes.MeasurementAttribute.Component and conformance AttributeScopes.FoundationAttributes.MeasurementAttribute.Component();
  LOBYTE(v120) = 1;
  v125 = xmmword_183723F60;
  LOBYTE(v126) = 1;
  v127 = 0LL;
  specialized AttributedString._AttributeStorage.subscript.setter( (uint64_t)&v120,  0xD00000000000001FLL,  0x80000001839CC230LL);
  v80 = v136;
  BigString.init(_:)();
  AttributedString.init(_:attributes:)(v134, v80, *((uint64_t *)&v80 + 1), (uint64_t *)&v120);
  v81 = v120;
  v82 = *(_OWORD *)(v73 + 32);
  v136 = *(_OWORD *)(v73 + 16);
  v137 = v82;
  v138 = *(_OWORD *)(v73 + 48);
  v83 = BigString.endIndex.getter();
  v85 = v84;
  v87 = v86;
  v89 = v88;
  swift_retain();
  v90 = (_OWORD *)v73;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    v91 = *(_OWORD *)(v73 + 32);
    v135[0] = *(_OWORD *)(v73 + 16);
    v135[1] = v91;
    v135[2] = *(_OWORD *)(v73 + 48);
    v93 = *(void *)(v73 + 64);
    v92 = *(void *)(v73 + 72);
    v118 = *(void *)(v73 + 80);
    v119 = v92;
    v117 = *(void *)(v73 + 88);
    type metadata accessor for AttributedString.Guts();
    swift_allocObject();
    outlined retain of Locale((uint64_t)v135);
    swift_unknownObjectRetain();
    v90 = (_OWORD *)AttributedString.Guts.init(string:runs:)(v135, v93, v119, v118, v117);
    swift_release();
  }

  v94 = v90[2];
  v134[3] = v90[1];
  v134[4] = v94;
  v134[5] = v90[3];
  BigString.startIndex.getter();
  BigString.endIndex.getter();
  v120 = (_OWORD *)v83;
  v121 = v85;
  v122 = v87;
  v123 = v89;
  v124 = v83;
  *(void *)&v125 = v85;
  *((void *)&v125 + 1) = v87;
  v126 = v89;
  specialized AttributedString.Guts.replaceSubrange<A>(_:with:)(&v120, v81);
  swift_release();
  swift_release();
  CFMutableDictionaryRef result = swift_release();
  *v104 = v90;
  return result;
}

          Hasher._combine(_:)(0);
          if (v21) {
            goto LABEL_28;
          }
          goto LABEL_33;
        }

  Hasher._combine(_:)(0);
  if (!v18) {
    goto LABEL_33;
  }
LABEL_28:
  Hasher._combine(_:)(1u);
  type metadata accessor for CFDictionaryRef(0LL);
  lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef();
  int v28 = v18;
  _CFObject.hash(into:)();

  if (v20)
  {
LABEL_29:
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0LL);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef();
    uint64_t v29 = v20;
    _CFObject.hash(into:)();

    goto LABEL_35;
  }

  v102 = 0LL;
LABEL_33:
  v69 = objc_msgSend(a1, *(SEL *)(v18 + 760), String._bridgeToObjectiveCImpl()());
  swift_unknownObjectRelease();
  if (v69)
  {
    v70 = objc_msgSend(a1, (SEL)v2 + 2336, String._bridgeToObjectiveCImpl()());
    swift_unknownObjectRelease();
  }

  else
  {
    v70 = 0LL;
  }

  v71 = objc_msgSend(a1, sel_error);
  if (v71)
  {
    v72 = v71;
    swift_bridgeObjectRelease();

LABEL_49:
    goto LABEL_28;
  }

  v73 = (void *)String._bridgeToObjectiveCImpl()();
  static Calendar._fromNSCalendarIdentifier(_:)(v73, (char *)&v109);
  v74 = (id)swift_unknownObjectRelease();
  if (v109 != 16)
  {
    v90 = (void *)v107;
    v100[1] = v70;
    if ((void)v107)
    {
      LODWORD(v100[0]) = v69 ^ 1;
      LODWORD(v101) = v109;
      type metadata accessor for _NSSwiftTimeZone();
      v91 = swift_dynamicCastClass();
      if (v91)
      {
        v92 = *(void *)(v91 + OBJC_IVAR____NSSwiftTimeZone_timeZone);
        v74 = (id)swift_unknownObjectRetain();
      }

      else
      {
        type metadata accessor for _TimeZoneBridged();
        v92 = swift_allocObject();
        *(void *)(v92 + 16) = v107;
        lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( &lazy protocol witness table cache variable for type _TimeZoneBridged and conformance _TimeZoneBridged,  (uint64_t (*)(uint64_t))type metadata accessor for _TimeZoneBridged,  (uint64_t)&protocol conformance descriptor for _TimeZoneBridged);
        v74 = v90;
      }

      v94 = v92;
    }

    else
    {
      v94 = 0LL;
    }

    v101 = v94;
    v100[0] = v100;
    v95 = *(void *)&v5[v9];
    MEMORY[0x1895F8858](v74);
    v96 = v104;
    swift_retain();
    os_unfair_lock_lock((os_unfair_lock_t)(v95 + 32));
    partial apply for closure #1 in _NSSwiftCalendar.init(coder:)((uint64_t *)(v95 + 16));
    os_unfair_lock_unlock((os_unfair_lock_t)(v95 + 32));
    swift_release();

    v97 = String._bridgeToObjectiveCImpl()();
    swift_bridgeObjectRelease();
    v98 = (objc_class *)type metadata accessor for _NSSwiftCalendar();
    v108.receiver = v5;
    v108.super_class = v98;
    v99 = objc_msgSendSuper2(&v108, sel_initWithCheckedCalendarIdentifier_, v97);

    v68 = v99;
    swift_unknownObjectRelease();

    swift_unknownObjectRelease();
    if (v68) {

    }
    return (unint64_t)v68;
  }

  swift_bridgeObjectRelease();

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
  v75 = swift_initStackObject();
  *(_OWORD *)(v75 + 16) = xmmword_183720D90;
  *(void *)(v75 + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSDebugDescription");
  *(void *)(v75 + 72) = MEMORY[0x189617FA8];
  *(void *)(v75 + 40) = v76;
  *(void *)(v75 + 4_Block_object_dispose(va, 8) = 0xD00000000000001BLL;
  *(void *)(v75 + 56) = 0x80000001839CC7C0LL;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Any>);
  v77 = (void *)static _DictionaryStorage.allocate(capacity:)();
  outlined init with copy of (Hashable & Sendable)?( v75 + 32,  (uint64_t)&v109,  (uint64_t *)&demangling cache variable for type metadata for (String, Any));
  v78 = v109;
  swift_retain();
  CFMutableDictionaryRef result = specialized __RawDictionaryStorage.find<A>(_:)(v78, *((uint64_t *)&v78 + 1));
  if ((v79 & 1) != 0) {
    goto LABEL_61;
  }
  v77[(result >> 6) + 8] |= 1LL << result;
  *(_OWORD *)(v77[6] + 16 * result) = v78;
  CFMutableDictionaryRef result = (unint64_t)outlined init with take of Any(v110, (_OWORD *)(v77[7] + 32 * result));
  v80 = v77[2];
  uint64_t v27 = __OFADD__(v80, 1LL);
  v81 = v80 + 1;
  if (v27)
  {
LABEL_62:
    __break(1u);
    goto LABEL_63;
  }

  v77[2] = v81;
  swift_release();
  swift_bridgeObjectRelease();
  static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSCocoaErrorDomain");
  v82 = objc_allocWithZone((Class)&OBJC_CLASS___NSError);
  v83 = String._bridgeToObjectiveCImpl()();
  swift_bridgeObjectRelease();
  v84 = objc_msgSend(v82, sel_initWithDomain_code_userInfo_, v83, 4864, _NativeDictionary.bridged()());
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  v85 = objc_msgSend(v84, sel_domain);
  v86 = static String._unconditionallyBridgeFromObjectiveC(_:)(v85);
  v88 = v87;

  if (v86 == static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSCocoaErrorDomain") && v88 == v89)
  {
    swift_bridgeObjectRelease_n();
LABEL_48:
    objc_msgSend(a1, sel_failWithError_, _swift_stdlib_bridgeErrorToNSError());

    swift_unknownObjectRelease();
    goto LABEL_49;
  }

  v93 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  CFMutableDictionaryRef result = swift_bridgeObjectRelease();
  if ((v93 & 1) != 0) {
    goto LABEL_48;
  }
LABEL_63:
  __break(1u);
  return result;
}

  specialized Set._Variant.insert(_:)(&v3, 0xBuLL);
  if ((a1 & 0x4000) == 0)
  {
LABEL_14:
    if ((a1 & 0x10000) == 0) {
      goto LABEL_15;
    }
    goto LABEL_34;
  }

  if ((v14 & 0x8000000000000000LL) == 0)
  {
    _ArrayBuffer._copyContents(subRange:initializing:)();
    return (uint64_t)v18;
  }

  if (*(_BYTE *)(v1 + 80) != 1)
  {
LABEL_35:
    swift_bridgeObjectRelease();
    return 0LL;
  }

  v26._countAndFlagsBits = 24366LL;
  v26._object = (void *)0xE200000000000000LL;
  uint64_t v27 = String.hasPrefix(_:)(v26);
  swift_bridgeObjectRelease();
  return v27;
}

  Hasher._combine(_:)(0);
  uint64_t v23 = 0LL;
LABEL_33:

  int v28 = v47;
  if (v28)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    specialized Dictionary<>.hash(into:)(a1, v28);
    swift_bridgeObjectRelease();
    uint64_t v29 = v48;
    if (v48) {
      goto LABEL_35;
    }
LABEL_38:
    Hasher._combine(_:)(0);
    if (v49) {
      goto LABEL_36;
    }
LABEL_39:
    Hasher._combine(_:)(0);
    goto LABEL_40;
  }

  Hasher._combine(_:)(0);
  uint64_t v29 = v48;
  if (!v48) {
    goto LABEL_38;
  }
LABEL_35:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)(a1, v29);
  swift_bridgeObjectRelease();
  if (!v49) {
    goto LABEL_39;
  }
LABEL_36:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
LABEL_40:
  if (v50 == 2)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    uint64_t v30 = v50 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v30);
  }

  if (v51 == 2)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    CFRange v31 = v51 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v31);
  }

  if (v52 == 2)
  {
    uint64_t v32 = 0;
  }

  else
  {
    uint64_t v32 = v52 & 1;
    Hasher._combine(_:)(1u);
  }

  Hasher._combine(_:)(v32);
  if (v53 == 2)
  {
    unint64_t v33 = 0;
  }

  else
  {
    __int16 v34 = v53 & 1;
    Hasher._combine(_:)(1u);
    unint64_t v33 = v34;
  }

  Hasher._combine(_:)(v33);
  outlined retain of LocalePreferences?( (uint64_t)v54,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined consume of LocalePreferences?);
  outlined retain of LocalePreferences?( (uint64_t)v54,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined consume of LocalePreferences?);
}

  Hasher._combine(_:)(0);
  uint64_t v21 = 0LL;
LABEL_33:

  uint64_t v26 = v46;
  if (v26)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    specialized Dictionary<>.hash(into:)((uint64_t)v53, v26);
    swift_bridgeObjectRelease();
    uint64_t v27 = v47;
    if (v47) {
      goto LABEL_35;
    }
LABEL_38:
    Hasher._combine(_:)(0);
    if (v48) {
      goto LABEL_36;
    }
LABEL_39:
    Hasher._combine(_:)(0);
    goto LABEL_40;
  }

  Hasher._combine(_:)(0);
  uint64_t v27 = v47;
  if (!v47) {
    goto LABEL_38;
  }
LABEL_35:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)((uint64_t)v53, v27);
  swift_bridgeObjectRelease();
  if (!v48) {
    goto LABEL_39;
  }
LABEL_36:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
LABEL_40:
  if (v49 == 2)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    int v28 = v49 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v28);
  }

  if (v50 == 2)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    uint64_t v29 = v50 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v29);
  }

  if (v51 == 2)
  {
    uint64_t v30 = 0;
  }

  else
  {
    uint64_t v30 = v51 & 1;
    Hasher._combine(_:)(1u);
  }

  Hasher._combine(_:)(v30);
  if (v52 == 2)
  {
    CFRange v31 = 0;
  }

  else
  {
    uint64_t v32 = v52 & 1;
    Hasher._combine(_:)(1u);
    CFRange v31 = v32;
  }

  Hasher._combine(_:)(v31);
  outlined retain of LocalePreferences?( (uint64_t)v54,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined consume of LocalePreferences?);
  outlined retain of LocalePreferences?( (uint64_t)v54,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined consume of LocalePreferences?);
  return Hasher._finalize()();
}

  Hasher._combine(_:)(0);
  uint64_t v21 = 0LL;
LABEL_33:

  uint64_t v26 = v46;
  if (v26)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    specialized Dictionary<>.hash(into:)((uint64_t)v53, v26);
    swift_bridgeObjectRelease();
    uint64_t v27 = v47;
    if (v47) {
      goto LABEL_35;
    }
LABEL_38:
    Hasher._combine(_:)(0);
    if (v48) {
      goto LABEL_36;
    }
LABEL_39:
    Hasher._combine(_:)(0);
    goto LABEL_40;
  }

  Hasher._combine(_:)(0);
  uint64_t v27 = v47;
  if (!v47) {
    goto LABEL_38;
  }
LABEL_35:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)((uint64_t)v53, v27);
  swift_bridgeObjectRelease();
  if (!v48) {
    goto LABEL_39;
  }
LABEL_36:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
LABEL_40:
  if (v49 == 2)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    int v28 = v49 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v28);
  }

  if (v50 == 2)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    uint64_t v29 = v50 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v29);
  }

  if (v51 == 2)
  {
    uint64_t v30 = 0;
  }

  else
  {
    uint64_t v30 = v51 & 1;
    Hasher._combine(_:)(1u);
  }

  Hasher._combine(_:)(v30);
  if (v52 == 2)
  {
    CFRange v31 = 0;
  }

  else
  {
    uint64_t v32 = v52 & 1;
    Hasher._combine(_:)(1u);
    CFRange v31 = v32;
  }

  Hasher._combine(_:)(v31);
  outlined retain of LocalePreferences?( (uint64_t)v54,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined consume of LocalePreferences?);
  outlined retain of LocalePreferences?( (uint64_t)v54,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined consume of LocalePreferences?);
  return Hasher._finalize()();
}

        uint64_t v60 = (uint64_t *)v33;
        if ((POSIXErrorCode.init(rawValue:)() & 0x100000000LL) != 0)
        {
          _StringGuts.grow(_:)(22LL);
          swift_bridgeObjectRelease();
          v62 = 0xD000000000000014LL;
          v63 = 0x80000001839C9190LL;
          v61 = v32;
          goto LABEL_46;
        }

        static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSPOSIXErrorDomain");
        unint64_t v46 = (int)POSIXErrorCode.rawValue.getter();
        unint64_t v47 = objc_allocWithZone((Class)&OBJC_CLASS___NSError);
        unint64_t v48 = String._bridgeToObjectiveCImpl()();
        swift_bridgeObjectRelease();
        unint64_t v35 = objc_msgSend(v47, sel_initWithDomain_code_userInfo_, v48, v46, _NativeDictionary.bridged()());
        swift_unknownObjectRelease();
        swift_unknownObjectRelease();
        unint64_t v49 = objc_msgSend(v35, sel_domain);
        unint64_t v50 = static String._unconditionallyBridgeFromObjectiveC(_:)(v49);
        id v52 = v51;

        if (v50 == static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSPOSIXErrorDomain") && v52 == v53)
        {
          swift_bridgeObjectRelease_n();
        }

        else
        {
          v54 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if ((v54 & 1) == 0) {
            goto LABEL_42;
          }
        }

        v36 = (uint64_t)v60;
        goto LABEL_38;
    }
  }

  MEMORY[0x1895F8858](isStackAllocationSafe);
  int v10 = readlink(a1, v56, 0x402uLL);
  if (v10 < 0)
  {
    int v28 = MEMORY[0x186E1B0E8]();
    uint64_t v29 = v28;
    uint64_t v30 = 263LL;
    switch(v28)
    {
      case 1:
      case 13:
        uint64_t v30 = 257LL;
        goto LABEL_25;
      case 2:
        uint64_t v30 = 260LL;
        goto LABEL_25;
      case 3:
      case 4:
      case 5:
      case 6:
      case 7:
      case 8:
      case 9:
      case 10:
      case 11:
      case 12:
      case 14:
      case 15:
      case 16:
      case 17:
      case 18:
      case 19:
      case 20:
      case 21:
      case 22:
      case 23:
      case 24:
      case 25:
      case 26:
        goto LABEL_20;
      case 27:
        goto LABEL_25;
      default:
        if (v28 == 63)
        {
          uint64_t v30 = 258LL;
        }

        else
        {
          if (v28 == 102)
          {
            __int16 v34 = 0LL;
            uint64_t v30 = 256LL;
LABEL_30:
            swift_bridgeObjectRetain();
            specialized CocoaError.init<A>(_:path:underlying:variant:source:destination:)( (uint64_t (*)(void))v30,  a2,  a3,  v34,  0LL,  0LL,  0LL,  0LL,  (void *(*)(void *__return_ptr, void *, uint64_t))&v62,  0LL,  0LL);
            swift_willThrow();
            swift_willThrow();
            return outlined destroy of _FileManagerImpl((uint64_t)v64);
          }

          Hasher._combine(_:)(0);
          if (v20)
          {
LABEL_28:
            Hasher._combine(_:)(1u);
            type metadata accessor for CFDictionaryRef(0LL);
            lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( (unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef,  (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef,  (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
            uint64_t v30 = v20;
            _CFObject.hash(into:)();

            if (v22)
            {
LABEL_29:
              Hasher._combine(_:)(1u);
              type metadata accessor for CFDictionaryRef(0LL);
              lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( (unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef,  (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef,  (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
              CFRange v31 = v22;
              _CFObject.hash(into:)();

              goto LABEL_35;
            }

  Hasher._combine(_:)(0);
  if (!v18) {
    goto LABEL_33;
  }
LABEL_28:
  Hasher._combine(_:)(1u);
  type metadata accessor for CFDictionaryRef(0LL);
  lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( (unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef,  (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef,  (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
  int v28 = v18;
  _CFObject.hash(into:)();

  if (v20)
  {
LABEL_29:
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0LL);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( (unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef,  (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef,  (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
    uint64_t v29 = v20;
    _CFObject.hash(into:)();

    goto LABEL_35;
  }

  specialized Set._Variant.insert(_:)(&v3, 0xBuLL);
  if ((v1 & 0x1000) == 0)
  {
LABEL_14:
    if ((v1 & 0x2000) == 0) {
      goto LABEL_15;
    }
    goto LABEL_34;
  }

  Hasher._combine(_:)(0);
  uint64_t v30 = 0LL;
LABEL_33:

  if (v17)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    specialized Dictionary<>.hash(into:)((uint64_t)v49, v17);
    swift_bridgeObjectRelease();
    if (v16) {
      goto LABEL_35;
    }
LABEL_38:
    Hasher._combine(_:)(0);
    if (v45) {
      goto LABEL_36;
    }
    goto LABEL_39;
  }

  Hasher._combine(_:)(0);
  if (!v16) {
    goto LABEL_38;
  }
LABEL_35:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)((uint64_t)v49, v16);
  swift_bridgeObjectRelease();
  if (v45)
  {
LABEL_36:
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    goto LABEL_40;
  }

  Hasher._combine(_:)(0);
  uint64_t v32 = 0LL;
LABEL_33:

  if (v45)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    specialized Dictionary<>.hash(into:)((uint64_t)v50, v45);
    swift_bridgeObjectRelease();
    if (v13) {
      goto LABEL_35;
    }
LABEL_38:
    Hasher._combine(_:)(0);
    if (v46) {
      goto LABEL_36;
    }
    goto LABEL_39;
  }

  Hasher._combine(_:)(0);
  if (!v13) {
    goto LABEL_38;
  }
LABEL_35:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)((uint64_t)v50, v13);
  swift_bridgeObjectRelease();
  if (v46)
  {
LABEL_36:
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    goto LABEL_40;
  }

  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)((uint64_t)v75, v26);
  swift_bridgeObjectRelease();
LABEL_33:
  int v28 = v60;
  uint64_t v27 = v61;
  uint64_t v30 = v62;
  uint64_t v29 = v63;
  CFRange v31 = v64;
  if (v60)
  {
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0LL);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( (unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef,  (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef,  (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
    uint64_t v32 = v27;
    unint64_t v33 = v30;
    __int16 v34 = v29;
    unint64_t v35 = v31;
    v36 = v28;
    _CFObject.hash(into:)();
    if (v27) {
      goto LABEL_35;
    }
  }

  else
  {
    Hasher._combine(_:)(0);
    unint64_t v41 = v31;
    int v42 = v27;
    unint64_t v43 = v30;
    int v44 = v29;
    if (v27)
    {
LABEL_35:
      Hasher._combine(_:)(1u);
      type metadata accessor for CFDictionaryRef(0LL);
      lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( (unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef,  (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef,  (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
      unint64_t v37 = v27;
      _CFObject.hash(into:)();

      if (v30) {
        goto LABEL_36;
      }
      goto LABEL_41;
    }
  }

  Hasher._combine(_:)(0);
  if (v30)
  {
LABEL_36:
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0LL);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( (unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef,  (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef,  (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
    unint64_t v38 = v30;
    _CFObject.hash(into:)();

    if (v29) {
      goto LABEL_37;
    }
LABEL_42:
    Hasher._combine(_:)(0);
    if (v31) {
      goto LABEL_38;
    }
    goto LABEL_43;
  }

  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)(a1, v30);
  swift_bridgeObjectRelease();
LABEL_33:
  uint64_t v32 = v63;
  CFRange v31 = v64;
  __int16 v34 = v65;
  unint64_t v33 = v66;
  unint64_t v35 = v67;
  if (v63)
  {
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0LL);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( (unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef,  (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef,  (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
    v36 = v31;
    unint64_t v37 = v34;
    unint64_t v38 = v33;
    unint64_t v39 = v35;
    uint64_t v40 = v32;
    _CFObject.hash(into:)();
    if (v31) {
      goto LABEL_35;
    }
  }

  else
  {
    Hasher._combine(_:)(0);
    unint64_t v45 = v35;
    unint64_t v46 = v31;
    unint64_t v47 = v34;
    unint64_t v48 = v33;
    if (v31)
    {
LABEL_35:
      Hasher._combine(_:)(1u);
      type metadata accessor for CFDictionaryRef(0LL);
      lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( (unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef,  (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef,  (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
      unint64_t v41 = v31;
      _CFObject.hash(into:)();

      if (v34) {
        goto LABEL_36;
      }
      goto LABEL_41;
    }
  }

  Hasher._combine(_:)(0);
  if (v34)
  {
LABEL_36:
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0LL);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( (unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef,  (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef,  (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
    int v42 = v34;
    _CFObject.hash(into:)();

    if (v33) {
      goto LABEL_37;
    }
LABEL_42:
    Hasher._combine(_:)(0);
    if (v35) {
      goto LABEL_38;
    }
    goto LABEL_43;
  }

  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)((uint64_t)v76, v28);
  swift_bridgeObjectRelease();
LABEL_33:
  uint64_t v30 = v61;
  uint64_t v29 = v62;
  uint64_t v32 = v63;
  CFRange v31 = v64;
  unint64_t v33 = v65;
  if (v61)
  {
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0LL);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( (unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef,  (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef,  (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
    __int16 v34 = v29;
    unint64_t v35 = v32;
    v36 = v31;
    unint64_t v37 = v33;
    unint64_t v38 = v30;
    _CFObject.hash(into:)();
    if (v29) {
      goto LABEL_35;
    }
  }

  else
  {
    Hasher._combine(_:)(0);
    unint64_t v43 = v33;
    int v44 = v29;
    unint64_t v45 = v32;
    unint64_t v46 = v31;
    if (v29)
    {
LABEL_35:
      Hasher._combine(_:)(1u);
      type metadata accessor for CFDictionaryRef(0LL);
      lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( (unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef,  (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef,  (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
      unint64_t v39 = v29;
      _CFObject.hash(into:)();

      if (v32) {
        goto LABEL_36;
      }
      goto LABEL_41;
    }
  }

  Hasher._combine(_:)(0);
  if (v32)
  {
LABEL_36:
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0LL);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( (unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef,  (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef,  (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
    uint64_t v40 = v32;
    _CFObject.hash(into:)();

    if (v31) {
      goto LABEL_37;
    }
LABEL_42:
    Hasher._combine(_:)(0);
    if (v33) {
      goto LABEL_38;
    }
    goto LABEL_43;
  }

      uint64_t v16 = udat_patternCharToDateFormatField();
      unsigned int v7 = v26;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)( 0,  *(void *)(v7 + 16) + 1LL,  1);
        unsigned int v7 = v26;
      }

      char v18 = *(void *)(v7 + 16);
      unsigned int v17 = *(void *)(v7 + 24);
      if (v18 >= v17 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v17 > 1, v18 + 1, 1);
        unsigned int v7 = v26;
      }

      *(void *)(v7 + 16) = v18 + 1;
      *(_DWORD *)(v7 + 4 * v18 + 32) = v16;
      int v10 = v23;
      a1 = v22;
      if (v4 == v23) {
        int v13 = _StringGuts._slowEnsureMatchingEncoding(_:)(v13, v22, a2);
      }
      char v4 = v13 >> 16;
      if (v13 >> 16 >= v12) {
        goto LABEL_60;
      }
      if ((a2 & 0x1000000000000000LL) != 0)
      {
        int v13 = MEMORY[0x186E1B868](v13, v22, a2);
        goto LABEL_14;
      }

      if (v21)
      {
        int v13 = (v13 & 0xFFFFFFFFFFFF0000LL) + 65549;
        goto LABEL_14;
      }

      if ((v13 & 0xC001) != 0)
      {
        if ((a2 & 0x2000000000000000LL) == 0) {
          goto LABEL_44;
        }
      }

      else
      {
        BOOL v20 = _StringGuts.scalarAlignSlow(_:)(v13, v22, a2);
        int v13 = v20 & 0xFFFFFFFFFFFFFFF2LL | 1;
        char v4 = v20 >> 16;
        if ((a2 & 0x2000000000000000LL) == 0)
        {
LABEL_44:
          if ((v22 & 0x1000000000000000LL) != 0)
          {
            LODWORD(v19) = *(unsigned __int8 *)((a2 & 0xFFFFFFFFFFFFFFFLL) + 32 + v4);
            if ((v19 & 0x80) == 0) {
              goto LABEL_53;
            }
          }

          else
          {
            LODWORD(v19) = *(unsigned __int8 *)(_StringObject.sharedUTF8.getter() + v4);
            if ((v19 & 0x80) == 0)
            {
LABEL_53:
              CFStringRef v19 = 1LL;
              goto LABEL_54;
            }
          }

          goto LABEL_46;
        }
      }

      int v24 = v22;
      unint64_t v25 = a2 & 0xFFFFFFFFFFFFFFLL;
      LODWORD(v19) = *((unsigned __int8 *)&v24 + v4);
      if ((v19 & 0x80) == 0) {
        goto LABEL_53;
      }
LABEL_46:
      LODWORD(v19) = __clz(v19 ^ 0xFF) - 24;
      if ((_DWORD)v19 != 4)
      {
        CFStringRef v19 = v19;
        goto LABEL_54;
      }

      if ((v13 & 0xC000) != 0)
      {
        CFStringRef v19 = 4LL;
LABEL_54:
        int v13 = (v13 + (v19 << 16)) & 0xFFFFFFFFFFFF0000LL | 5;
        goto LABEL_14;
      }

      int v13 = v13 & 0xFFFFFFFFFFFF0000LL | 0x4004;
LABEL_14:
      if (!--v6) {
        return v7;
      }
    }
  }

  __break(1u);
  return result;
}

  __break(1u);
}

  __break(1u);
  return result;
}

  Hasher._combine(_:)(0);
  uint64_t v21 = 0LL;
LABEL_33:

  uint64_t v26 = v46;
  if (v26)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    specialized Dictionary<>.hash(into:)((uint64_t)v53, v26);
    swift_bridgeObjectRelease();
    uint64_t v27 = v47;
    if (v47) {
      goto LABEL_35;
    }
LABEL_38:
    Hasher._combine(_:)(0);
    if (v48) {
      goto LABEL_36;
    }
LABEL_39:
    Hasher._combine(_:)(0);
    goto LABEL_40;
  }

  Hasher._combine(_:)(0);
  uint64_t v27 = v47;
  if (!v47) {
    goto LABEL_38;
  }
LABEL_35:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)((uint64_t)v53, v27);
  swift_bridgeObjectRelease();
  if (!v48) {
    goto LABEL_39;
  }
LABEL_36:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
LABEL_40:
  if (v49 == 2)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    int v28 = v49 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v28);
  }

  if (v50 == 2)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    uint64_t v29 = v50 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v29);
  }

  if (v51 == 2)
  {
    uint64_t v30 = 0;
  }

  else
  {
    uint64_t v30 = v51 & 1;
    Hasher._combine(_:)(1u);
  }

  Hasher._combine(_:)(v30);
  if (v52 == 2)
  {
    CFRange v31 = 0;
  }

  else
  {
    uint64_t v32 = v52 & 1;
    Hasher._combine(_:)(1u);
    CFRange v31 = v32;
  }

  Hasher._combine(_:)(v31);
  outlined retain of LocalePreferences?( (uint64_t)v54,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined consume of LocalePreferences?);
  return Hasher._finalize()();
}

  Hasher._combine(_:)(0);
  if (!v15) {
    goto LABEL_33;
  }
LABEL_28:
  Hasher._combine(_:)(1u);
  type metadata accessor for CFDictionaryRef(0LL);
  lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( (unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef,  (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef,  (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
  unint64_t v25 = v15;
  _CFObject.hash(into:)();

  if (v17)
  {
LABEL_29:
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0LL);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( (unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef,  (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef,  (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
    uint64_t v26 = v17;
    _CFObject.hash(into:)();

    goto LABEL_35;
  }

            __break(1u);
            goto LABEL_33;
          }
        }

        __break(1u);
        goto LABEL_32;
      }
    }
  }

  return v19;
}

      __break(1u);
LABEL_33:
      __break(1u);
LABEL_34:
      __break(1u);
      goto LABEL_35;
    }

    return 0LL;
  }

      __break(1u);
    }
  }

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

      if ((unsigned __int16)result == 13)
      {
        uint64_t v15 = __OFADD__(v11++, 1LL);
        if (v15) {
          goto LABEL_129;
        }
        uint64_t v16 = v12;
        if (v13 == v8)
        {
          CFMutableDictionaryRef result = _StringGuts._slowEnsureMatchingEncoding(_:)(v12, v5, a2);
          uint64_t v16 = result;
        }

        unsigned int v17 = v16 >> 16;
        if (v16 >> 16 >= v3) {
          goto LABEL_130;
        }
        if ((a2 & 0x1000000000000000LL) != 0)
        {
          CFMutableDictionaryRef result = MEMORY[0x186E1B868](v16, v5, a2);
          char v18 = result;
        }

        else
        {
          if ((v30 & 1) != 0)
          {
            char v18 = (v16 & 0xFFFFFFFFFFFF0000LL) + 65549;
            goto LABEL_75;
          }

          if ((v16 & 0xC001) != 0)
          {
            if ((a2 & 0x2000000000000000LL) == 0) {
              goto LABEL_51;
            }
LABEL_71:
            CFRange v31 = v5;
            uint64_t v32 = v28;
            LODWORD(v20) = *((unsigned __int8 *)&v31 + v17);
            if ((v20 & 0x80) == 0)
            {
LABEL_72:
              BOOL v20 = 1LL;
LABEL_73:
              v16 += v20 << 16;
              uint64_t v21 = 5;
              goto LABEL_74;
            }
          }

          else
          {
            CFMutableDictionaryRef result = _StringGuts.scalarAlignSlow(_:)(v16, v5, a2);
            uint64_t v16 = result & 0xFFFFFFFFFFFFFFF2LL | 1;
            unsigned int v17 = result >> 16;
            if ((a2 & 0x2000000000000000LL) != 0) {
              goto LABEL_71;
            }
LABEL_51:
            CFMutableDictionaryRef result = v27;
            if ((v5 & 0x1000000000000000LL) != 0)
            {
              LODWORD(v20) = *(unsigned __int8 *)(v27 + v17);
              if ((v20 & 0x80) == 0) {
                goto LABEL_72;
              }
            }

            else
            {
              CFMutableDictionaryRef result = _StringObject.sharedUTF8.getter();
              LODWORD(v20) = *(unsigned __int8 *)(result + v17);
              if ((v20 & 0x80) == 0) {
                goto LABEL_72;
              }
            }
          }

          LODWORD(v20) = __clz(v20 ^ 0xFF) - 24;
          if ((_DWORD)v20 != 4)
          {
            BOOL v20 = v20;
            goto LABEL_73;
          }

          if ((v16 & 0xC000) != 0)
          {
            BOOL v20 = 4LL;
            goto LABEL_73;
          }

          uint64_t v21 = 16388;
LABEL_74:
          char v18 = v16 & 0xFFFFFFFFFFFF0000LL | v21;
        }

  __break(1u);
  return result;
}

    swift_bridgeObjectRelease();
LABEL_33:
    swift_bridgeObjectRelease();
    swift_release();
    goto LABEL_34;
  }

  swift_retain();
  LocaleCache.preferences()(v63);
  type metadata accessor for _LocaleICU();
  swift_allocObject();
  char v4 = _LocaleICU.init(name:prefs:disableBundleMatching:)(0LL, 0LL, (uint64_t *)v63, 1u);
LABEL_5:
  swift_release();
  unsigned int v5 = lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( &lazy protocol witness table cache variable for type _LocaleICU and conformance _LocaleICU,  (uint64_t (*)(uint64_t))type metadata accessor for _LocaleICU,  (uint64_t)&protocol conformance descriptor for _LocaleICU);
  char v6 = (objc_class *)type metadata accessor for _NSSwiftLocale();
  unsigned int v7 = objc_allocWithZone(v6);
  char v8 = OBJC_IVAR____NSSwiftLocale_doesNotRequireSpecialHandling;
  int v9 = (uint64_t *)&v7[OBJC_IVAR____NSSwiftLocale_locale];
  *int v9 = v4;
  v9[1] = v5;
  v7[v8] = 2;
  int v10 = String._bridgeToObjectiveCImpl()();
  v66.receiver = v7;
  v66.super_class = v6;
  swift_unknownObjectRetain();
  unsigned int v11 = objc_msgSendSuper2(&v66, sel_initWithLocaleIdentifier_, v10);
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  return v11;
}

        MEMORY[0x1895F8858](v37);
        lazy protocol witness table accessor for type Int8 and conformance Int8();
        dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
        int v59 = dispatch thunk of static Comparable.< infix(_:_:)();
        v51 = v32;
        v32((char *)v88 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL), v8);
        v32(v35, v8);
        id v52 = v96;
        if ((v59 & 1) == 0) {
          goto LABEL_25;
        }
        goto LABEL_54;
      }

      if (v37 < 8) {
        goto LABEL_47;
      }
      v51 = v32;
      v32(v35, v8);
    }

    else
    {
      v32((char *)v88 - v13, v8);
      v51 = v32;
    }

    id v52 = v96;
    goto LABEL_25;
  }

  v100 = 0LL;
  v98 = 0u;
  v99 = 0u;
  outlined destroy of Any?((uint64_t)&v98, &demangling cache variable for type metadata for FixedWidthInteger?);
  outlined init with copy of Any((uint64_t)a1, (uint64_t)v101);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for BinaryFloatingPoint);
  if ((swift_dynamicCast() & 1) != 0)
  {
    outlined init with take of any PredicateExpression<Self.Output == B1>(&v98, (uint64_t)v102);
    uint64_t v21 = __swift_project_boxed_opaque_existential_1(v102, v103);
    uint64_t v22 = MEMORY[0x1895F8858](v21);
    (*(void (**)(char *, __n128))(v24 + 16))((char *)v88 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0LL), v22);
    lazy protocol witness table accessor for type Int8 and conformance Int8();
    FixedWidthInteger.init<A>(exactly:)();
    if ((BYTE1(v98) & 1) == 0)
    {
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v102);
      return;
    }

    unint64_t v25 = type metadata accessor for DecodingError();
    swift_allocError();
    uint64_t v27 = v26;
    *(void *)&v98 = 0LL;
    *((void *)&v98 + 1) = 0xE000000000000000LL;
    swift_bridgeObjectRetain();
    _StringGuts.grow(_:)(52LL);
    v28._countAndFlagsBits = 0xD00000000000001DLL;
    v28._object = (void *)0x80000001839D13E0LL;
    String.append(_:)(v28);
    _print_unlocked<A, B>(_:_:)();
    v29._object = (void *)0x80000001839D1400LL;
    v29._countAndFlagsBits = 0xD000000000000012LL;
    String.append(_:)(v29);
    v30._countAndFlagsBits = 947154505LL;
    v30._object = (void *)0xE400000000000000LL;
    String.append(_:)(v30);
    v31._countAndFlagsBits = 46LL;
    v31._object = (void *)0xE100000000000000LL;
    String.append(_:)(v31);
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v25 - 8) + 104LL))( v27,  *MEMORY[0x189619360],  v25);
    goto LABEL_55;
  }

  v100 = 0LL;
  v98 = 0u;
  v99 = 0u;
  outlined destroy of Any?((uint64_t)&v98, &demangling cache variable for type metadata for BinaryFloatingPoint?);
  outlined init with copy of Any((uint64_t)a1, (uint64_t)v102);
  type metadata accessor for NSNumber();
  if ((swift_dynamicCast() & 1) != 0)
  {
    unint64_t v38 = (void *)v98;
    unint64_t v39 = type metadata accessor for DecodingError();
    swift_allocError();
    unint64_t v41 = v40;
    v102[0] = 0LL;
    v102[1] = 0xE000000000000000LL;
    swift_bridgeObjectRetain();
    _StringGuts.grow(_:)(52LL);
    v42._countAndFlagsBits = 0xD00000000000001DLL;
    v42._object = (void *)0x80000001839D13E0LL;
    String.append(_:)(v42);
    unint64_t v43 = objc_msgSend(v38, sel_description);
    int v44 = static String._unconditionallyBridgeFromObjectiveC(_:)(v43);
    unint64_t v46 = v45;

    v47._countAndFlagsBits = (uint64_t)v44;
    v47._object = v46;
    String.append(_:)(v47);
    swift_bridgeObjectRelease();
    v48._object = (void *)0x80000001839D1400LL;
    v48._countAndFlagsBits = 0xD000000000000012LL;
    String.append(_:)(v48);
    v49._countAndFlagsBits = 947154505LL;
    v49._object = (void *)0xE400000000000000LL;
    String.append(_:)(v49);
    v50._countAndFlagsBits = 46LL;
    v50._object = (void *)0xE100000000000000LL;
    String.append(_:)(v50);
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v39 - 8) + 104LL))( v41,  *MEMORY[0x189619360],  v39);
    swift_willThrow();
  }

  else
  {
    type metadata accessor for DecodingError();
    swift_allocError();
    v61 = v60;
    swift_bridgeObjectRetain();
    static DecodingError._typeMismatch(at:expectation:reality:)(MEMORY[0x18961A350], a1, v61);
    swift_bridgeObjectRelease();
    swift_willThrow();
  }

        MEMORY[0x1895F8858](v37);
        lazy protocol witness table accessor for type Int16 and conformance Int16();
        dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
        int v59 = dispatch thunk of static Comparable.< infix(_:_:)();
        v51 = v32;
        v32((char *)v88 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL), v8);
        v32(v35, v8);
        id v52 = v96;
        if ((v59 & 1) == 0) {
          goto LABEL_25;
        }
        goto LABEL_54;
      }

      if (v37 < 16) {
        goto LABEL_47;
      }
      v51 = v32;
      v32(v35, v8);
    }

    else
    {
      v32((char *)v88 - v13, v8);
      v51 = v32;
    }

    id v52 = v96;
    goto LABEL_25;
  }

  v100 = 0LL;
  v98 = 0u;
  v99 = 0u;
  outlined destroy of Any?((uint64_t)&v98, &demangling cache variable for type metadata for FixedWidthInteger?);
  outlined init with copy of Any((uint64_t)a1, (uint64_t)v101);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for BinaryFloatingPoint);
  if ((swift_dynamicCast() & 1) != 0)
  {
    outlined init with take of any PredicateExpression<Self.Output == B1>(&v98, (uint64_t)v102);
    uint64_t v21 = __swift_project_boxed_opaque_existential_1(v102, v103);
    uint64_t v22 = MEMORY[0x1895F8858](v21);
    (*(void (**)(char *, __n128))(v24 + 16))((char *)v88 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0LL), v22);
    lazy protocol witness table accessor for type Int16 and conformance Int16();
    FixedWidthInteger.init<A>(exactly:)();
    if ((BYTE2(v98) & 1) == 0)
    {
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v102);
      return;
    }

    unint64_t v25 = type metadata accessor for DecodingError();
    swift_allocError();
    uint64_t v27 = v26;
    *(void *)&v98 = 0LL;
    *((void *)&v98 + 1) = 0xE000000000000000LL;
    swift_bridgeObjectRetain();
    _StringGuts.grow(_:)(52LL);
    v28._countAndFlagsBits = 0xD00000000000001DLL;
    v28._object = (void *)0x80000001839D13E0LL;
    String.append(_:)(v28);
    _print_unlocked<A, B>(_:_:)();
    v29._object = (void *)0x80000001839D1400LL;
    v29._countAndFlagsBits = 0xD000000000000012LL;
    String.append(_:)(v29);
    v30._countAndFlagsBits = 0x3631746E49LL;
    v30._object = (void *)0xE500000000000000LL;
    String.append(_:)(v30);
    v31._countAndFlagsBits = 46LL;
    v31._object = (void *)0xE100000000000000LL;
    String.append(_:)(v31);
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v25 - 8) + 104LL))( v27,  *MEMORY[0x189619360],  v25);
    goto LABEL_55;
  }

  v100 = 0LL;
  v98 = 0u;
  v99 = 0u;
  outlined destroy of Any?((uint64_t)&v98, &demangling cache variable for type metadata for BinaryFloatingPoint?);
  outlined init with copy of Any((uint64_t)a1, (uint64_t)v102);
  type metadata accessor for NSNumber();
  if ((swift_dynamicCast() & 1) != 0)
  {
    unint64_t v38 = (void *)v98;
    unint64_t v39 = type metadata accessor for DecodingError();
    swift_allocError();
    unint64_t v41 = v40;
    v102[0] = 0LL;
    v102[1] = 0xE000000000000000LL;
    swift_bridgeObjectRetain();
    _StringGuts.grow(_:)(52LL);
    v42._countAndFlagsBits = 0xD00000000000001DLL;
    v42._object = (void *)0x80000001839D13E0LL;
    String.append(_:)(v42);
    unint64_t v43 = objc_msgSend(v38, sel_description);
    int v44 = static String._unconditionallyBridgeFromObjectiveC(_:)(v43);
    unint64_t v46 = v45;

    v47._countAndFlagsBits = (uint64_t)v44;
    v47._object = v46;
    String.append(_:)(v47);
    swift_bridgeObjectRelease();
    v48._object = (void *)0x80000001839D1400LL;
    v48._countAndFlagsBits = 0xD000000000000012LL;
    String.append(_:)(v48);
    v49._countAndFlagsBits = 0x3631746E49LL;
    v49._object = (void *)0xE500000000000000LL;
    String.append(_:)(v49);
    v50._countAndFlagsBits = 46LL;
    v50._object = (void *)0xE100000000000000LL;
    String.append(_:)(v50);
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v39 - 8) + 104LL))( v41,  *MEMORY[0x189619360],  v39);
    swift_willThrow();
  }

  else
  {
    type metadata accessor for DecodingError();
    swift_allocError();
    v61 = v60;
    swift_bridgeObjectRetain();
    static DecodingError._typeMismatch(at:expectation:reality:)(MEMORY[0x18961A408], a1, v61);
    swift_bridgeObjectRelease();
    swift_willThrow();
  }

    lazy protocol witness table accessor for type Int and conformance Int();
    v84 = v230;
    dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
    v85 = dispatch thunk of static Comparable.< infix(_:_:)();
    v86 = v233;
    (*(void (**)(_BYTE *, uint64_t))(v233 + 8))(v84, v57);
    if ((v85 & 1) == 0) {
      goto LABEL_37;
    }
    goto LABEL_60;
  }

  v82 = dispatch thunk of static BinaryInteger.isSigned.getter();
  v83 = dispatch thunk of BinaryInteger.bitWidth.getter();
  if ((v82 & 1) == 0)
  {
    if (v83 < 64) {
      goto LABEL_36;
    }
    v130 = v233;
    v131 = v212;
    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v233 + 16))(v212, v234, v57);
    v237 = v62;
    if (v62 <= 0)
    {
      (*(void (**)(_BYTE *, uint64_t))(v130 + 8))(v131, v57);
    }

    else
    {
      lazy protocol witness table accessor for type Int and conformance Int();
      v132 = v230;
      dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
      v133 = dispatch thunk of static Comparable.< infix(_:_:)();
      v134 = *(void (**)(_BYTE *, uint64_t))(v233 + 8);
      v135 = v132;
      v86 = v233;
      v134(v135, v57);
      v134(v212, v57);
      if ((v133 & 1) != 0) {
        goto LABEL_60;
      }
    }

    goto LABEL_37;
  }

  if (v83 > 64) {
    goto LABEL_32;
  }
  v124 = v211;
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  MEMORY[0x186E1CDF8](&unk_1837317E8, 256LL, v124, AssociatedConformanceWitness);
  v126 = v230;
  dispatch thunk of ExpressibleByFloatLiteral.init(floatLiteral:)();
  v127 = v234;
  v202 = dispatch thunk of static Comparable.< infix(_:_:)();
  v128 = v126;
  v86 = v233;
  v212 = *(_BYTE **)(v233 + 8);
  ((void (*)(_BYTE *, uint64_t))v212)(v128, v57);
  v129 = v209;
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v86 + 16))(v209, v127, v57);
  if ((v202 & 1) != 0)
  {
    ((void (*)(_BYTE *, uint64_t))v212)(v129, v57);
    goto LABEL_60;
  }

  v143 = v238;
  v144 = dispatch thunk of BinaryInteger._lowWord.getter();
  ((void (*)(_BYTE *, uint64_t))v212)(v129, v57);
  v161 = v144 < v143;
  v86 = v233;
  if (!v161)
  {
LABEL_37:
    v88 = Float.exponent.getter();
    v238 = v88;
    v89 = dispatch thunk of static BinaryInteger.isSigned.getter();
    v90 = dispatch thunk of BinaryInteger.bitWidth.getter();
    if ((v89 & 1) != 0)
    {
      if (v90 > 64)
      {
        lazy protocol witness table accessor for type Int and conformance Int();
        v91 = v230;
        dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
        v92 = v234;
LABEL_55:
        v139 = dispatch thunk of static Comparable.< infix(_:_:)();
        v140 = *(void (**)(_BYTE *, uint64_t))(v233 + 8);
        v140(v91, v57);
        v140(v92, v57);
        v95 = v236;
        if ((v139 & 1) == 0)
        {
LABEL_56:
          v141 = dispatch thunk of BinaryFloatingPoint.significandWidth.getter();
          v142 = Float.significandWidth.getter();
          unint64_t v47 = v203;
          if (v142 < v141) {
            goto LABEL_87;
          }
LABEL_15:
          v63 = dispatch thunk of static BinaryFloatingPoint.exponentBitCount.getter();
          v64 = dispatch thunk of static BinaryFloatingPoint.significandBitCount.getter();
          if (v63 == 11)
          {
            if (v64 == 52)
            {
              v70 = v236;
              v231(v47, (uint64_t)v236, a2);
              v71 = swift_dynamicCast();
              v72 = *(double *)&v238;
              v73 = *(void (**)(_BYTE *, uint64_t, uint64_t))(v56 + 32);
              v74 = v220;
              v73(v220, (uint64_t)v70, a2);
              if (v71)
              {
                v60(v74, a2);
                *(float *)&_S8 = v72;
              }

              else
              {
                v108 = dispatch thunk of FloatingPoint.sign.getter();
                v109 = v224;
                dispatch thunk of BinaryFloatingPoint.exponentBitPattern.getter();
                v110 = v60;
                v111 = v226;
                swift_getAssociatedConformanceWitness();
                v112 = dispatch thunk of BinaryInteger._lowWord.getter();
                (*(void (**)(_BYTE *, uint64_t))(v225 + 8))(v109, v111);
                v113 = v227;
                dispatch thunk of BinaryFloatingPoint.significandBitPattern.getter();
                v110(v74, a2);
                v114 = v229;
                swift_getAssociatedConformanceWitness();
                v115 = dispatch thunk of BinaryInteger._lowWord.getter();
                (*(void (**)(_BYTE *, uint64_t))(v228 + 8))(v113, v114);
                *(float *)&_S8 = COERCE_DOUBLE((v108 << 63) | ((unint64_t)(v112 & 0x7FF) << 52) | v115 & 0xFFFFFFFFFFFFFLL);
              }

              goto LABEL_28;
            }
          }

          else if (v63 == 8)
          {
            if (v64 == 23)
            {
              v76 = v236;
              v231(v218, (uint64_t)v236, a2);
              v77 = swift_dynamicCast();
              _S8 = v238;
              v78 = *(void (**)(_BYTE *, uint64_t, uint64_t))(v56 + 32);
              v79 = v221;
              v78(v221, (uint64_t)v76, a2);
              if (v77)
              {
                v60(v79, a2);
              }

              else
              {
                v116 = dispatch thunk of FloatingPoint.sign.getter();
                v117 = v224;
                dispatch thunk of BinaryFloatingPoint.exponentBitPattern.getter();
                v118 = v60;
                v119 = v226;
                swift_getAssociatedConformanceWitness();
                v120 = dispatch thunk of BinaryInteger._lowWord.getter();
                (*(void (**)(_BYTE *, uint64_t))(v225 + 8))(v117, v119);
                v121 = v227;
                dispatch thunk of BinaryFloatingPoint.significandBitPattern.getter();
                v118(v79, a2);
                v122 = v229;
                swift_getAssociatedConformanceWitness();
                v123 = dispatch thunk of BinaryInteger._lowWord.getter();
                (*(void (**)(_BYTE *, uint64_t))(v228 + 8))(v121, v122);
                _S8 = (v116 << 31) | (v120 << 23) | v123 & 0x7FFFFF;
              }

              goto LABEL_28;
            }
          }

          else if (v63 == 5 && v64 == 10)
          {
            v65 = v236;
            v231(v219, (uint64_t)v236, a2);
            v66 = swift_dynamicCast();
            _H8 = v238;
            v68 = *(void (**)(_BYTE *, uint64_t, uint64_t))(v56 + 32);
            v69 = v222;
            v68(v222, (uint64_t)v65, a2);
            if (v66)
            {
              v60(v69, a2);
            }

            else
            {
              v96 = dispatch thunk of FloatingPoint.sign.getter();
              v97 = v224;
              dispatch thunk of BinaryFloatingPoint.exponentBitPattern.getter();
              v98 = v60;
              v99 = v226;
              swift_getAssociatedConformanceWitness();
              v100 = dispatch thunk of BinaryInteger._lowWord.getter();
              (*(void (**)(_BYTE *, uint64_t))(v225 + 8))(v97, v99);
              v101 = v227;
              dispatch thunk of BinaryFloatingPoint.significandBitPattern.getter();
              v98(v69, a2);
              v102 = v229;
              swift_getAssociatedConformanceWitness();
              v103 = dispatch thunk of BinaryInteger._lowWord.getter();
              (*(void (**)(_BYTE *, uint64_t))(v228 + 8))(v101, v102);
              _H8 = (v96 << 15) | ((v100 & 0x1F) << 10) | v103 & 0x3FF;
            }

            __asm { FCVT            S8, H8 }

            goto LABEL_28;
          }

          lazy protocol witness table accessor for type Float and conformance Float();
          v80 = v236;
          static BinaryFloatingPoint._convert<A>(from:)();
          v60(v80, a2);
          _S8 = v238;
LABEL_28:
          v55 = 0;
          v54 = _S8;
          goto LABEL_29;
        }

  unint64_t v25 = ucal_get();
  uint64_t v26 = ucal_get();
  BOOL v20 = v25 + v26;
  if (__OFADD__(v25, v26))
  {
LABEL_65:
    __break(1u);
LABEL_66:
    __break(1u);
    goto LABEL_67;
  }

  CFStringRef v19 = ucal_get();
  uint64_t v21 = 1;
LABEL_35:
  ucal_getMillis();
  int v28 = v18 * 1000.0 + v27 + v5 * (double)(int)a2;
  ucal_setMillis();
  if (!v21) {
    return v28;
  }
  uint64_t v29 = ucal_get();
  uint64_t v30 = ucal_get();
  CFRange v31 = v29 + v30;
  if (__OFADD__(v29, v30)) {
    goto LABEL_63;
  }
  uint64_t v32 = v20 - v31;
  if (__OFSUB__(v20, v31))
  {
LABEL_64:
    __break(1u);
    goto LABEL_65;
  }

  if (v32)
  {
    ucal_getMillis();
    int v28 = v33 + (double)v32;
    ucal_setMillis();
    if (ucal_get() != v19)
    {
      int v28 = v28 - (double)v32;
LABEL_41:
      ucal_setMillis();
    }
  }

  return v28;
}

  __src[8] = (int)ucal_getFieldDifference();
  LOBYTE(__src[9]) = 0;
  if ((a2 & 0x800) == 0)
  {
LABEL_19:
    if ((a2 & 0x400) == 0) {
      goto LABEL_20;
    }
    goto LABEL_34;
  }
  }

  __break(1u);
LABEL_44:
  unint64_t v39 = 0LL;
  uint64_t v40 = 0xE000000000000000LL;
  _StringGuts.grow(_:)(38LL);
  swift_bridgeObjectRelease();
  unint64_t v39 = 0xD000000000000024LL;
  uint64_t v40 = 0x80000001839CA1C0LL;
  int v28 = v43;
  if ((unint64_t)v43 < v18)
  {
    uint64_t v29 = 1LL;
    while (1)
    {
      if (*v28 == 13)
      {
        uint64_t v27 = __OFADD__(v29++, 1LL);
        if (v27) {
          goto LABEL_68;
        }
      }

      else
      {
        if (v42 < 2) {
          goto LABEL_69;
        }
        if (*(_BYTE *)(v41 + 1) == 10)
        {
          uint64_t v27 = __OFADD__(v29++, 1LL);
          if (v27)
          {
            __break(1u);
            break;
          }
        }
      }
    }
  }

  uint64_t v29 = 1LL;
LABEL_59:
  unint64_t v46 = v29;
LABEL_62:
  v30._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v30);
  swift_bridgeObjectRelease();
  uint64_t v32 = v39;
  CFRange v31 = v40;
  type metadata accessor for DecodingError();
  swift_allocError();
  static DecodingError._dataCorrupted<A>(_:for:_:)(v32, v31, v35, v36, v37, v38, v33);
  swift_bridgeObjectRelease();
  return swift_willThrow();
}

  __break(1u);
  return result;
}

            if (v5-- < 1)
            {
              unsigned int v5 = 0LL;
            }

            else if ((v6 - 58) <= 0xFFFFFFF5)
            {
              CFMutableDictionaryRef result = 0LL;
              unsigned int v11 = v6 - 65;
              if (v11 > 0x25 || ((1LL << v11) & 0x3F0000003FLL) == 0) {
                return result;
              }
            }

    swift_release();
    swift_release();

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
LABEL_35:
    swift_release();
    swift_release();

    object = v68;
LABEL_36:
    CFMutableDictionaryRef result = swift_bridgeObjectRelease();
    int v42 = HIBYTE(v34) & 0xF;
    if ((v34 & 0x2000000000000000LL) == 0) {
      int v42 = v32 & 0xFFFFFFFFFFFFLL;
    }
    if (!v42)
    {
      *(void *)a1 = object;
      *(void *)(a1 + _Block_object_dispose(va, 8) = v4;
      *(void *)(a1 + 16) = v6;
      unint64_t v45 = (id)object;
      swift_retain();
      return swift_retain();
    }

    if (!v4)
    {
      __break(1u);
      goto LABEL_62;
    }

    unint64_t v43 = *(_BYTE *)(v4 + 218);
    v89 = 1;
    v101 = 1;
    v100 = 1;
    v99 = 1;
    v98 = 1;
    v97 = 1;
    v96 = 1;
    v95 = 1;
    v94 = 1;
    v93 = 1;
    v92 = 1;
    v91 = v43;
    v90 = 0;
    if ((*(_BYTE *)(v4 + 168) & 1) != 0)
    {
      swift_retain();
      int v44 = MEMORY[0x186E1BFF4](0LL, 0xE000000000000000LL);
    }

    else
    {
      swift_retain();
      int v44 = String.subscript.getter();
    }

    unint64_t v46 = MEMORY[0x186E1B610](v44);
    int v28 = v47;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    unint64_t v48 = String._removingDotSegments.getter(v46, (unint64_t)v28);
    unint64_t v50 = v49;
    swift_bridgeObjectRelease_n();
    v101 = 0;
    v95 = 0;
    if ((v50 & 0x1000000000000000LL) != 0) {
      break;
    }
    if ((v50 & 0x2000000000000000LL) != 0)
    {
      id v52 = HIBYTE(v50) & 0xF;
      *(void *)v81 = v48;
      *(void *)&v81[8] = v50 & 0xFFFFFFFFFFFFFFLL;
      v51 = v81;
    }

    else if ((v48 & 0x1000000000000000LL) != 0)
    {
      v51 = (char *)((v50 & 0xFFFFFFFFFFFFFFFLL) + 32);
      id v52 = v48 & 0xFFFFFFFFFFFFLL;
    }

    else
    {
      v51 = (char *)_StringObject.sharedUTF8.getter();
    }

    if (specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v51, v52, 0x10u, 1)) {
      goto LABEL_50;
    }
LABEL_59:
    swift_bridgeObjectRelease();
    v65 = 0;
    v64 = 897LL;
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
LABEL_60:
    CFRange v31 = _StringObject.sharedUTF8.getter();
    uint64_t v29 = v63;
  }

  v68 = object;
  *(void *)v81 = v48;
  *(void *)&v81[8] = v50;
  int v28 = (void *)lazy protocol witness table accessor for type String and conformance String();
  swift_bridgeObjectRetain_n();
  StringProtocol._ephemeralString.getter();
  v57 = (void *)String._bridgeToObjectiveCImpl()();
  swift_bridgeObjectRelease();
  unint64_t v58 = (unsigned __int16 *)objc_msgSend(v57, sel__fastCharacterContents);
  int v59 = v57;
  if (v58)
  {
    *(void *)v81 = v48;
    *(void *)&v81[8] = v50;
    StringProtocol._ephemeralString.getter();
    int v28 = (void *)String._bridgeToObjectiveCImpl()();
    swift_bridgeObjectRelease();
    uint64_t v60 = objc_msgSend(v28, sel_length);
    swift_unknownObjectRelease();
    v61 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)( v58,  (uint64_t)v60,  0x10u,  1);
  }

  else
  {
    v61 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v48, v50, 0x10u, 1);
  }

  v62 = v61;
  swift_bridgeObjectRelease_n();
  object = v68;
  if ((v62 & 1) == 0) {
    goto LABEL_59;
  }
LABEL_50:
  swift_bridgeObjectRelease();
  v76._countAndFlagsBits = v4;
  LOBYTE(v76._object) = v101;
  BYTE1(v76._object) = v100;
  BYTE2(v76._object) = v99;
  BYTE3(v76._object) = v98;
  BYTE4(v76._object) = v97;
  BYTE5(v76._object) = v96;
  BYTE6(v76._object) = v95;
  HIBYTE(v76._object) = v94;
  v77[0] = v93;
  memset(&v77[8], 0, 64);
  v78 = 0LL;
  LOBYTE(v79) = v92;
  *((void *)&v79 + 1) = v48;
  *(void *)v80 = v50;
  memset(&v80[8], 0, 32);
  v80[40] = v91;
  v80[41] = v90;
  *(Swift::String *)v81 = v76;
  *(_OWORD *)&v81[16] = *(_OWORD *)v77;
  v84 = *(_OWORD *)&v77[48];
  v85 = 0uLL;
  v82 = *(_OWORD *)&v77[16];
  v83 = *(_OWORD *)&v77[32];
  *(_OWORD *)((char *)v88 + 10) = *(_OWORD *)&v80[26];
  v88[0] = *(_OWORD *)&v80[16];
  v86 = v79;
  v87 = *(_OWORD *)v80;
  v71[7] = *(_OWORD *)v80;
  v72[0] = *(_OWORD *)&v80[16];
  *(_OWORD *)((char *)v72 + 10) = *(_OWORD *)&v80[26];
  v71[2] = *(_OWORD *)&v77[16];
  v71[3] = *(_OWORD *)&v77[32];
  v71[4] = *(_OWORD *)&v77[48];
  v71[5] = 0uLL;
  v71[6] = v79;
  v71[0] = v76;
  v71[1] = *(_OWORD *)v77;
  v73 = object;
  v74 = v4;
  v75 = v6;
  outlined retain of URLComponents((uint64_t)v81);
  URL.baseURL.getter(v70);
  uint64_t v53 = (void *)v70[0];
  v69[0] = v70[0];
  v69[1] = v70[1];
  v69[2] = v70[2];
  URLComponents.url(relativeTo:)((uint64_t)v69, (uint64_t *)&v73);
  outlined consume of URL?(v53);
  CFMutableDictionaryRef result = outlined release of URLComponents((uint64_t)&v76);
  v54 = v73;
  if (v73)
  {
    v56 = v74;
    v55 = v75;
    CFMutableDictionaryRef result = outlined release of URLComponents((uint64_t)&v76);
    *(void *)a1 = v54;
    *(void *)(a1 + _Block_object_dispose(va, 8) = v56;
    *(void *)(a1 + 16) = v55;
    return result;
  }

  Hasher._combine(_:)(0);
  if (!v29) {
    goto LABEL_33;
  }
LABEL_27:
  Hasher._combine(_:)(1u);
  ObjectType = swift_getObjectType();
  int v14 = *(void (**)(uint64_t, uint64_t, uint64_t))(v21 + 112);
  swift_unknownObjectRetain();
  v14(a1, ObjectType, v21);
  swift_unknownObjectRelease();
  if (v11)
  {
LABEL_28:
    Hasher._combine(_:)(1u);
    outlined copy of Locale.LanguageCode?(v22, v11);
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    outlined consume of Locale.LanguageCode?(v22, v11);
    return;
  }

              if (v72 == 7)
              {
                if (v71 != 7) {
                  return 0LL;
                }
              }

              else if (v71 == 7 || (specialized == infix<A>(_:_:)(v72, v71) & 1) == 0)
              {
                return 0LL;
              }

              if (v70 == 4)
              {
                if (v69 != 4) {
                  return 0LL;
                }
              }

              else if (v69 == 4 || (specialized == infix<A>(_:_:)(v70, v69) & 1) == 0)
              {
                return 0LL;
              }

              if (v68)
              {
                if (v67)
                {
                  if (v65 != v64 || v66 != v63)
                  {
                    uint64_t v29 = _stringCompareWithSmolCheck(_:_:expecting:)();
                    CFMutableDictionaryRef result = 0LL;
                    if ((v29 & 1) == 0) {
                      return result;
                    }
                  }

          Hasher._combine(_:)(0);
          if (v17)
          {
LABEL_28:
            Hasher._combine(_:)(1u);
            type metadata accessor for CFDictionaryRef(0LL);
            lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( (unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef,  (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef,  (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
            uint64_t v27 = v17;
            _CFObject.hash(into:)();

            if (v19)
            {
LABEL_29:
              Hasher._combine(_:)(1u);
              type metadata accessor for CFDictionaryRef(0LL);
              lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( (unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef,  (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef,  (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
              int v28 = v19;
              _CFObject.hash(into:)();

              goto LABEL_35;
            }

  Hasher._combine(_:)(0);
  if (!v15) {
    goto LABEL_33;
  }
LABEL_28:
  Hasher._combine(_:)(1u);
  type metadata accessor for CFDictionaryRef(0LL);
  lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( (unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef,  (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef,  (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
  unint64_t v25 = v15;
  _CFObject.hash(into:)();

  if (v17)
  {
LABEL_29:
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0LL);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( (unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef,  (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef,  (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
    uint64_t v26 = v17;
    _CFObject.hash(into:)();

    goto LABEL_35;
  }

          Hasher._combine(_:)(0);
          if (v20)
          {
LABEL_28:
            Hasher._combine(_:)(1u);
            type metadata accessor for CFDictionaryRef(0LL);
            lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( (unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef,  (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef,  (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
            uint64_t v30 = v20;
            _CFObject.hash(into:)();

            if (v22)
            {
LABEL_29:
              Hasher._combine(_:)(1u);
              type metadata accessor for CFDictionaryRef(0LL);
              lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( (unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef,  (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef,  (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
              CFRange v31 = v22;
              _CFObject.hash(into:)();

              goto LABEL_35;
            }

  Hasher._combine(_:)(0);
  if (!v18) {
    goto LABEL_33;
  }
LABEL_28:
  Hasher._combine(_:)(1u);
  type metadata accessor for CFDictionaryRef(0LL);
  lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( (unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef,  (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef,  (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
  int v28 = v18;
  _CFObject.hash(into:)();

  if (v20)
  {
LABEL_29:
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0LL);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( (unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef,  (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef,  (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
    uint64_t v29 = v20;
    _CFObject.hash(into:)();

    goto LABEL_35;
  }

  Hasher._combine(_:)(0);
  if (!v18) {
    goto LABEL_33;
  }
LABEL_28:
  Hasher._combine(_:)(1u);
  type metadata accessor for CFDictionaryRef(0LL);
  lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( (unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef,  (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef,  (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
  int v28 = v18;
  _CFObject.hash(into:)();

  if (v20)
  {
LABEL_29:
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0LL);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( (unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef,  (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef,  (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
    uint64_t v29 = v20;
    _CFObject.hash(into:)();

    goto LABEL_35;
  }

  objc_exception_throw((id)[MEMORY[0x189603F70] exceptionWithName:*MEMORY[0x189603A60] reason:v20 userInfo:0]);
  return -[NSComparisonPredicate generateMetadataDescription](v21, v22);
}

  uint64_t v22 = vcvtd_n_s64_f64(v19 * v18, 0x20uLL);
  uint64_t v23 = 0x100000000LL;
  int v24 = v22;
  do
  {
    unint64_t v25 = v24;
    int v24 = v23;
    uint64_t v23 = v25 % v23;
  }

  while (v23);
  *CFMutableDictionaryRef result = v22 / v24;
  unsigned int v7 = 0x100000000LL / v24;
LABEL_36:
  result[1] = v7;
  return result;
}

  a1[12] = a1[8];
  CFMutableDictionaryRef result = a1[18] + a1[17];
  a1[5] = result;
  return result;
}

            char v6 = 7LL;
            goto LABEL_9;
          }
        }
      }

      char v6 = 6LL;
LABEL_9:
      if (a3) {
        ++*(void *)(a3 + 8 * v6);
      }
      if (v4 == v6 || v4 == 0) {
        int v9 = v6;
      }
      else {
        int v9 = 1LL;
      }
      if (v6) {
        char v4 = v9;
      }
      if (++v3 >= a2) {
        goto LABEL_99;
      }
    }
  }

  char v4 = 0LL;
LABEL_99:
  if (v4 <= 1) {
    return 1LL;
  }
  else {
    return v4;
  }
}

void sub_182EBE6B8(_Unwind_Exception *exc_buf, int a2)
{
  if (a2)
  {
    objc_begin_catch(exc_buf);
    objc_end_catch();
    JUMPOUT(0x182EBE6CCLL);
  }

  _Unwind_Resume(exc_buf);
}

void sub_182EBE6D8(_Unwind_Exception *a1)
{
}

void _NSXPCSerializationDecodeInvocationObjectOnlyArgumentArray( uint64_t a1, unint64_t a2, void *a3, void *a4, void *a5, void *a6, void *a7)
{
  uint64_t v36 = *MEMORY[0x1895F89C0];
  unsigned int v14 = [a3 numberOfArguments];
  else {
    unint64_t v15 = 2LL;
  }
  if ((int)(v14 - v15) > a2) {
    objc_exception_throw((id)[MEMORY[0x189603F70] exceptionWithName:@"NSInvalidUnarchiveOperationException" reason:@"Too many objects in signature to decode as object-only" userInfo:0]);
  }
  if ((int)v14 > (int)v15)
  {
    uint64_t v16 = *a6;
    BOOL v17 = __CFADD__(*a6, 9LL);
    unint64_t v18 = *a6 + 9LL;
    uint64_t v19 = v17;
    uint64_t v20 = v19 << 63 >> 63;
    if (v20 != v19 || v20 < 0 || a5[1] <= v18)
    {
      objc_exception_throw((id)[MEMORY[0x189603F70] exceptionWithName:@"NSInvalidUnarchiveOperationException" reason:@"Expected to find array of NSInvocation arguments but there were no entries" userInfo:0]);
LABEL_32:
      __break(1u);
      return;
    }

    unint64_t v21 = *(void *)(v16 + *a5 + 1);
    unint64_t v34 = v18;
    unint64_t v35 = v21;
    uint64_t v22 = v14;
    if (v14 > v15)
    {
      unint64_t v23 = 0LL;
      uint64_t v24 = v15 - v22;
      while (1)
      {
        if (a7 && [a7 count] > v23) {
          uint64_t v25 = [a7 objectAtIndex:v23];
        }
        else {
          uint64_t v25 = 0LL;
        }
        uint64_t v26 = (_WORD *)[a3 _argInfo:v15 + v23];
        __int16 v27 = v26[17];
        if ((v27 & 0x80) != 0) {
          __int16 v27 = *(_WORD *)(*(void *)v26 + 34LL);
        }
        if ((v27 & 0x2000) == 0)
        {
          objc_exception_throw((id)[MEMORY[0x189603F70] exceptionWithName:@"NSInvalidUnarchiveOperationException" reason:@"Expected to find object in wire signature of object-only decode of NSInvocation arguments" userInfo:0]);
          goto LABEL_32;
        }

        if (v18 > v35 || v18 >= a5[1])
        {
          objc_exception_throw((id)[MEMORY[0x189603F70] exceptionWithName:@"NSInvalidUnarchiveOperationException" reason:@"Expected to find entry in array of NSInvocation arguments but there were no entries" userInfo:0]);
          goto LABEL_32;
        }

        int v33 = 255;
        unint64_t v32 = v18;
        int v33 = *(_BYTE *)(*a5 + v18) & 0xF0;
        int v28 = (void *)[a4 _decodeObjectOfClasses:v25 atObject:&v32];
        id v29 = v28;
        *(void *)(a1 + 8 * v23) = v28;
        _getLastByteOfValueIncludingMarker(a5, v18, &v34);
        unint64_t v18 = v34 + 1;
        uint64_t v30 = v34 == -1LL;
        uint64_t v31 = v30 << 63 >> 63;
        ++v34;
        if (v31 != v30 || v31 < 0) {
          break;
        }
        ++v23;
        if (!(v24 + v23)) {
          return;
        }
      }

      objc_exception_throw((id)[MEMORY[0x189603F70] exceptionWithName:@"NSInvalidUnarchiveOperationException" reason:@"Overflow of array data" userInfo:0]);
      goto LABEL_32;
    }
  }

void sub_182EBEC6C()
{
}

uint64_t hashProbe(void *a1, uint64_t a2, uint64_t *a3, _BYTE *a4, int a5)
{
  uint64_t v28 = *MEMORY[0x1895F89C0];
  uint64_t v9 = (*(uint64_t (**)(uint64_t, void))(a1[3] + 16LL))(a2, *(void *)(a1[3] + 8LL));
  unint64_t v10 = (0x8D6271D7234E6D5ALL - v9) ^ ((v9 - 0x24FCFFB6D7ECFEF6LL) << 9);
  unint64_t v11 = (0x24FCFFB6D7ECFEF7LL - v9 - v10) ^ (v10 >> 8);
  uint64_t v12 = (v9 - 0x24FCFFB6D7ECFEF6LL - v10 - v11) ^ (v11 >> 38);
  unint64_t v13 = (v10 - v11 - v12) ^ (v12 << 23);
  unint64_t v14 = (v11 - v12 - v13) ^ (v13 >> 5);
  uint64_t v15 = (v12 - v13 - v14) ^ (v14 >> 35);
  unint64_t v16 = (v13 - v14 - v15) ^ (v15 << 49);
  unint64_t v17 = (v14 - v15 - v16) ^ (v16 >> 11);
  uint64_t v18 = (v15 - v16 - v17) ^ (v17 >> 12);
  uint64_t v26 = ((v17 - v18 - ((v16 - v17 - v18) ^ (v18 << 18))) ^ (((v16 - v17 - v18) ^ (v18 << 18)) >> 22)) & (a1[6] - 1LL);
  if (a4) {
    *a4 = 0;
  }
LABEL_3:
  for (uint64_t i = v26; ; uint64_t i = (a1[6] - 1LL) & (i + 1))
  {
    char v27 = 1;
    uint64_t v20 = (*(uint64_t (**)(uint64_t, char *))(a1[4] + 24LL))(a1[1] + 8 * i, &v27);
    if (v20) {
      break;
    }
    if (v27) {
      return i;
    }
    if (a5)
    {
      (*(void (**)(uint64_t))(a1[4] + 48LL))(a1[1] + 8 * i);
      uint64_t v22 = a1[5];
      if (v22) {
        a1[5] = v22 - 1;
      }
      else {
        [a1 raiseCountUnderflowException];
      }
      [a1 rehashAround:i];
      goto LABEL_3;
    }

LABEL_9:
    ;
  }

  uint64_t v21 = v20;
  if (!(*(unsigned int (**)(uint64_t, uint64_t, void))(a1[3] + 24LL))(a2, v20, *(void *)(a1[3] + 8LL)))
  {
    (*(void (**)(uint64_t))(a1[4] + 32LL))(v21);
    goto LABEL_9;
  }

  uint64_t v23 = a1[4];
  if (a3)
  {
    (*(void (**)(uint64_t))(v23 + 40))(v21);
    *a3 = v21;
  }

  else
  {
    (*(void (**)(uint64_t))(v23 + 32))(v21);
  }

  if (a4) {
    *a4 = 1;
  }
  return i;
}

        CFMutableDictionaryRef result = 0LL;
        *a4 = 0LL;
        return result;
      }

      uint64_t v20 = 0LL;
LABEL_43:
      if (v20) {
        objc_msgSend( (id)a1,  "__failWithExceptionName:errorCode:format:",  @"NSArchiverArchiveInconsistency",  4864,  @"%@",  v20);
      }
      else {
        objc_msgSend( (id)a1,  "__failWithExceptionName:errorCode:format:",  @"NSInvalidUnarchiveOperationException",  4864,  @"%1$@: cannot decode object of class (%2$@) for key (%3$@) because no class named %2$@ was found; the class needs to be defined in source code or linked in from a library (ensure the class is part of the correct target). If the class was renamed, use setClassName:forClass: to add a class translation mapping to NSKeyedUnarchiver",
      }
          _NSMethodExceptionProem((objc_class *)a1, sel_decodeObjectForKey_),
          0LL,
          a3);
      goto LABEL_9;
    }

    uint64_t v19 = +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"%@: unexpected non-objectlike class (%@)",  _NSMethodExceptionProem((objc_class *)a1, sel_decodeObjectForKey_),  0LL);
LABEL_42:
    uint64_t v20 = v19;
    goto LABEL_43;
  }

  __CFBinaryPlistCreateObject();
  *a4 = 0LL;
  return 1LL;
}

  CFMutableDictionaryRef result = (NSNumber *)((v4 << 7) | 0x800000000000002BLL);
  unsigned int v5 = *MEMORY[0x189616658] ^ (unint64_t)result;
  if ((~v5 & 0xC000000000000007LL) != 0) {
    return (NSNumber *)(v5 & 0xFFFFFFFFFFFFFFF8LL | *(unsigned __int8 *)(MEMORY[0x189616648] + (v5 & 7)));
  }
  return result;
}

  CFMutableDictionaryRef result = (NSNumber *)((v7 << 7) | 0x8000000000000023LL);
  char v8 = *MEMORY[0x189616658] ^ (unint64_t)result;
  if ((~v8 & 0xC000000000000007LL) != 0) {
    return (NSNumber *)(v8 & 0xFFFFFFFFFFFFFFF8LL | *(unsigned __int8 *)(MEMORY[0x189616648] + (v8 & 7)));
  }
  return result;
}

  if (!a3 && a4) {
    [a1 _willBeginKeyValueObserving];
  }
  os_unfair_lock_lock(&NSKeyValueObservationInfoLock);
  os_unfair_lock_assert_owner(&NSKeyValueObservationInfoLock);
  unint64_t v10 = [a1 observationInfo];
  if (a2) {
    (*(void (**)(void *, char *, void *))(a2 + 24))(a1, sel_setObservationInfo_, a4);
  }
  else {
    [a1 setObservationInfo:a4];
  }
  os_unfair_lock_unlock(&NSKeyValueObservationInfoLock);
  unint64_t v11 = a3;
  if (a3 && !a4)
  {
    [a1 _didEndKeyValueObserving];
    unint64_t v11 = a3;
  }

        unint64_t v17 = *((_OWORD *)a2 + 5);
        *((_OWORD *)a1 + 4) = *((_OWORD *)a2 + 4);
        *((_OWORD *)a1 + 5) = v17;
        goto LABEL_10;
      }
    }

    unint64_t v16 = *((_OWORD *)a2 + 3);
    *((_OWORD *)a1 + 2) = *((_OWORD *)a2 + 2);
    *((_OWORD *)a1 + 3) = v16;
    uint64_t v12 = a2[9];
    if (v12) {
      goto LABEL_6;
    }
    goto LABEL_9;
  }

  unsigned int v5 = *((_OWORD *)a2 + 5);
  *((_OWORD *)a1 + 4) = *((_OWORD *)a2 + 4);
  *((_OWORD *)a1 + 5) = v5;
  a1[12] = a2[12];
  char v6 = *((_OWORD *)a2 + 1);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *((_OWORD *)a1 + 1) = v6;
  unsigned int v7 = *((_OWORD *)a2 + 3);
  *((_OWORD *)a1 + 2) = *((_OWORD *)a2 + 2);
  *((_OWORD *)a1 + 3) = v7;
  return a1;
}

        unint64_t v17 = *((_OWORD *)a2 + 5);
        *((_OWORD *)a1 + 4) = *((_OWORD *)a2 + 4);
        *((_OWORD *)a1 + 5) = v17;
        goto LABEL_10;
      }
    }

    unint64_t v16 = *((_OWORD *)a2 + 3);
    *((_OWORD *)a1 + 2) = *((_OWORD *)a2 + 2);
    *((_OWORD *)a1 + 3) = v16;
    uint64_t v9 = a2[9];
    if (v9) {
      goto LABEL_5;
    }
    goto LABEL_9;
  }

  uint64_t v12 = *((_OWORD *)a2 + 5);
  *((_OWORD *)a1 + 4) = *((_OWORD *)a2 + 4);
  *((_OWORD *)a1 + 5) = v12;
  a1[12] = a2[12];
  unint64_t v13 = *((_OWORD *)a2 + 1);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *((_OWORD *)a1 + 1) = v13;
  unint64_t v14 = *((_OWORD *)a2 + 3);
  *((_OWORD *)a1 + 2) = *((_OWORD *)a2 + 2);
  *((_OWORD *)a1 + 3) = v14;
  return a1;
}

  Hasher._combine(_:)(0);
LABEL_10:
  if (v28)
  {
    Hasher._combine(_:)(0);
    if (!v29) {
      goto LABEL_12;
    }
  }

  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v15);
    if (!v29)
    {
LABEL_12:
      Hasher._combine(_:)(1u);
      Hasher._combine(_:)(v16);
      if (!v30) {
        goto LABEL_13;
      }
      goto LABEL_25;
    }
  }

  Hasher._combine(_:)(0);
  if (!v30)
  {
LABEL_13:
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v17);
    if (!v31) {
      goto LABEL_14;
    }
    goto LABEL_26;
  }

    unint64_t v14 = 0;
    goto LABEL_12;
  }

  _StringGuts.grow(_:)(24LL);
  swift_bridgeObjectRelease();
  BufferReader.lineNumber.getter();
  v5._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v5);
  swift_bridgeObjectRelease();
  lazy protocol witness table accessor for type XMLPlistError and conformance XMLPlistError();
  swift_allocError();
  *(void *)char v6 = 0xD000000000000016LL;
  *(void *)(v6 + _Block_object_dispose(va, 8) = 0x80000001839C9CE0LL;
  *(void *)(v6 + 16) = 0LL;
  *(void *)(v6 + 24) = 0LL;
  unsigned int v7 = 5;
LABEL_10:
  *(_BYTE *)(v6 + 32) = v7;
LABEL_11:
  swift_willThrow();
}

    unsigned int v5 = 0;
    if ((_BYTE *)v2 == v3) {
      goto LABEL_7;
    }
    goto LABEL_10;
  }

  unint64_t v34 = 0LL;
  unint64_t v35 = 0LL;
  if (v7 >= v8 + 1)
  {
    CFMutableDictionaryRef result = (uint64_t *)v8;
    uint64_t v9 = (unsigned __int8 *)v8;
    while (1)
    {
      if (v7 < (unint64_t)v9)
      {
        __break(1u);
LABEL_74:
        __break(1u);
LABEL_75:
        __break(1u);
LABEL_76:
        __break(1u);
LABEL_77:
        __break(1u);
LABEL_78:
        __break(1u);
LABEL_79:
        __break(1u);
LABEL_80:
        __break(1u);
LABEL_81:
        __break(1u);
LABEL_82:
        __break(1u);
LABEL_83:
        __break(1u);
LABEL_84:
        __break(1u);
LABEL_85:
        __break(1u);
        goto LABEL_86;
      }

      uint64_t v19 = v10 + v11;
      uint64_t v20 = *v9;
      if (v20 == 38) {
        break;
      }
      if (v20 == 60)
      {
        if (v35)
        {
          uint64_t v21 = static String._tryFromUTF8(_:)();
          if (!v22) {
            goto LABEL_71;
          }
          String.append(_:)(*(Swift::String *)&v21);
          swift_bridgeObjectRelease();
        }

        else if ((a2 & 1) != 0)
        {
          uint64_t v28 = static String._tryFromUTF8(_:)();
          uint64_t v30 = v29;
          swift_bridgeObjectRelease();
          unint64_t v34 = v28;
          unint64_t v35 = v30;
          if (!v30) {
            goto LABEL_71;
          }
        }

        specialized static XMLPlistScanner.parseCDSect_pl(reader:string:)(v5, (uint64_t)&v34);
        if (v3) {
          return (uint64_t *)swift_bridgeObjectRelease();
        }
LABEL_60:
        CFMutableDictionaryRef result = (uint64_t *)v5[3];
        uint64_t v9 = (unsigned __int8 *)result;
        goto LABEL_22;
      }

      v5[3] = (uint64_t)++v9;
LABEL_22:
      unint64_t v10 = *v5;
      unint64_t v11 = v5[1];
      unsigned int v7 = v5[4];
    }

    if (v35)
    {
      uint64_t v23 = static String._tryFromUTF8(_:)();
      if (!v24) {
        goto LABEL_71;
      }
      String.append(_:)(*(Swift::String *)&v23);
      swift_bridgeObjectRelease();
    }

    else if ((a2 & 1) != 0)
    {
      uint64_t v25 = static String._tryFromUTF8(_:)();
      char v27 = v26;
      swift_bridgeObjectRelease();
      unint64_t v34 = v25;
      unint64_t v35 = v27;
      if (!v27) {
        goto LABEL_71;
      }
    }

    specialized static XMLPlistScanner.parseEntityReference(reader:string:)(v5, &v34);
    if (v3) {
      return (uint64_t *)swift_bridgeObjectRelease();
    }
    goto LABEL_60;
  }

  uint64_t v9 = (unsigned __int8 *)v8;
  CFMutableDictionaryRef result = (uint64_t *)v8;
LABEL_11:
  if ((a2 & 1) == 0)
  {
    unint64_t v17 = v8 == (void)result;
    CFMutableDictionaryRef result = (uint64_t *)swift_bridgeObjectRelease();
    uint64_t v18 = 0LL;
    unint64_t v16 = 0;
    unint64_t v13 = 0xE000000000000000LL;
    goto LABEL_70;
  }

  unint64_t v13 = v35;
  if (v35)
  {
    if (result >= (uint64_t *)v9)
    {
LABEL_19:
      unint64_t v16 = 0;
      unint64_t v17 = 0;
      uint64_t v18 = v34;
LABEL_70:
      *(void *)a3 = v8;
      *(void *)(a3 + _Block_object_dispose(va, 8) = v9;
      *(void *)(a3 + 16) = v18;
      *(void *)(a3 + 24) = v13;
      *(_BYTE *)(a3 + 32) = v16;
      *(_BYTE *)(a3 + 33) = v17;
      return result;
    }

    if ((uint64_t)result - v10 >= 0)
    {
      if (v9 - (unsigned __int8 *)result >= 0)
      {
        if (v10 + v11 - (uint64_t)v9 >= 0)
        {
          unint64_t v14 = static String._tryFromUTF8(_:)();
          if (v15)
          {
            String.append(_:)(*(Swift::String *)&v14);
            CFMutableDictionaryRef result = (uint64_t *)swift_bridgeObjectRelease();
            uint64_t v9 = (unsigned __int8 *)v5[3];
            unint64_t v13 = v35;
            goto LABEL_19;
          }

          goto LABEL_71;
        }

  unint64_t v14 = 8LL;
LABEL_10:
  if ((v24 & (v23 == 0)) != 0) {
    uint64_t v15 = 16LL;
  }
  else {
    uint64_t v15 = 0LL;
  }
  if (v8)
  {
    outlined copy of URL.ParseStrategy.ComponentParseStrategy<String>(v20, v8);
    outlined consume of URL.ParseStrategy.ComponentParseStrategy<String>(v20, v8);
    outlined consume of URL.ParseStrategy.ComponentParseStrategy<String>(0LL, 0LL);
    unint64_t v16 = 0LL;
    if (v9)
    {
LABEL_15:
      outlined copy of URL.ParseStrategy.ComponentParseStrategy<String>(v21, v9);
      outlined consume of URL.ParseStrategy.ComponentParseStrategy<String>(v21, v9);
      outlined consume of URL.ParseStrategy.ComponentParseStrategy<String>(0LL, 0LL);
      unint64_t v17 = 0LL;
      goto LABEL_18;
    }
  }

  else
  {
    unint64_t v16 = 32LL;
    if (v9) {
      goto LABEL_15;
    }
  }

  unint64_t v17 = 64LL;
LABEL_18:
  uint64_t v18 = v11 | v15 | v12 | v13 | v14 | v16 | v17;
  if (!v25) {
    return v18 | 0x80;
  }
  outlined copy of URL.ParseStrategy.ComponentParseStrategy<String>(v22, v25);
  outlined consume of URL.ParseStrategy.ComponentParseStrategy<String>(v22, v25);
  outlined consume of URL.ParseStrategy.ComponentParseStrategy<String>(0LL, 0LL);
  return v18;
}

        unint64_t v13 = (~(-1 << (8 * v11)) - v10 + 2) >> (8 * v11);
        if (v13 > 0xFFFE)
        {
          uint64_t v12 = 4LL;
        }

        else
        {
          unint64_t v14 = v13 != 0;
          uint64_t v15 = v13 >= 0xFF;
          uint64_t v12 = 2LL;
          if (!v15) {
            uint64_t v12 = v14;
          }
        }

        goto LABEL_16;
      }

      goto LABEL_17;
    }

    (*(void (**)(void *, void *, uint64_t))(v6 + 16))(a1, a2, v5);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v6 + 56))(a1, 0LL, 2LL, v5);
  }

  else
  {
    if (v9)
    {
      (*(void (**)(void *, uint64_t))(v6 + 8))(a1, v5);
      unint64_t v10 = *(_DWORD *)(v6 + 84);
      unint64_t v11 = *(void *)(v6 + 64);
      if (v10 <= 1)
      {
        goto LABEL_9;
      }

        unint64_t v13 = (~(-1 << (8 * v11)) - v10 + 2) >> (8 * v11);
        if (v13 > 0xFFFE)
        {
          uint64_t v12 = 4LL;
        }

        else
        {
          unint64_t v14 = v13 != 0;
          uint64_t v15 = v13 >= 0xFF;
          uint64_t v12 = 2LL;
          if (!v15) {
            uint64_t v12 = v14;
          }
        }

        goto LABEL_16;
      }

      goto LABEL_17;
    }

    (*(void (**)(void *, void *, uint64_t))(v6 + 32))(a1, a2, v5);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v6 + 56))(a1, 0LL, 2LL, v5);
  }

  else
  {
    if (v9)
    {
      (*(void (**)(void *, uint64_t))(v6 + 8))(a1, v5);
      unint64_t v10 = *(_DWORD *)(v6 + 84);
      unint64_t v11 = *(void *)(v6 + 64);
      if (v10 <= 1)
      {
        goto LABEL_9;
      }

  __break(1u);
}

                      uint64_t v18 = (uint64_t *)(*(void *)(v5 + 56) + 16 * v11);
                      *uint64_t v18 = v6;
                      v18[1] = v8;
                      swift_bridgeObjectRelease();
LABEL_10:
                      swift_bridgeObjectRelease();
                      uint64_t v1 = v155;
LABEL_11:
                      if (!v2)
                      {
                        uint64_t v26 = v5;
                        if (v4) {
                          goto LABEL_24;
                        }
                        goto LABEL_18;
                      }

                      swift_bridgeObjectRetain();
                      uint64_t v19 = swift_isUniquelyReferenced_nonNull_native();
                      uint64_t v21 = specialized __RawDictionaryStorage.find<A>(_:)(0x6F6974616C6C6F63LL, 0xE90000000000006ELL);
                      uint64_t v22 = *(void *)(v5 + 16);
                      uint64_t v23 = (v20 & 1) == 0;
                      uint64_t v24 = v22 + v23;
                      if (__OFADD__(v22, v23))
                      {
                        __break(1u);
                        goto LABEL_44;
                      }

                      uint64_t v25 = v20;
                      if (*(void *)(v5 + 24) < v24)
                      {
                        specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v24, v19);
                        uint64_t v26 = v5;
                        char v27 = specialized __RawDictionaryStorage.find<A>(_:)(0x6F6974616C6C6F63LL, 0xE90000000000006ELL);
                        if ((v25 & 1) != (v28 & 1)) {
                          goto LABEL_192;
                        }
                        uint64_t v21 = v27;
                        if ((v25 & 1) == 0) {
                          goto LABEL_22;
                        }
                        goto LABEL_16;
                      }

                      if ((v19 & 1) != 0)
                      {
                        uint64_t v26 = v5;
                        if ((v20 & 1) == 0) {
                          goto LABEL_22;
                        }
                        goto LABEL_16;
                      }

                      v156 = v1;
                      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<ICULegacyKey, String>);
                      v55 = static _DictionaryStorage.copy(original:)();
                      uint64_t v26 = v55;
                      if (!*(void *)(v5 + 16)) {
                        goto LABEL_143;
                      }
                      v56 = (void *)(v55 + 64);
                      v57 = (unint64_t)((1LL << *(_BYTE *)(v26 + 32)) + 63) >> 6;
                      v153 = v5 + 64;
                      unint64_t v58 = 0LL;
                      *(void *)(v26 + 16) = *(void *)(v5 + 16);
                      int v59 = 1LL << *(_BYTE *)(v5 + 32);
                      uint64_t v60 = -1LL;
                      if (v59 < 64) {
                        uint64_t v60 = ~(-1LL << v59);
                      }
                      v61 = v60 & *(void *)(v5 + 64);
                      v62 = (unint64_t)(v59 + 63) >> 6;
                      while (1)
                      {
                        if (v61)
                        {
                          v63 = __clz(__rbit64(v61));
                          v61 &= v61 - 1;
                          v64 = v63 | (v58 << 6);
                        }

                        else
                        {
                          v74 = v58 + 1;
                          if (__OFADD__(v58, 1LL))
                          {
                            __break(1u);
LABEL_185:
                            __break(1u);
LABEL_186:
                            __break(1u);
LABEL_187:
                            __break(1u);
                            JUMPOUT(0x18304318CLL);
                          }

                          if (v74 >= v62) {
                            goto LABEL_143;
                          }
                          v75 = *(void *)(v153 + 8 * v74);
                          ++v58;
                          if (!v75)
                          {
                            unint64_t v58 = v74 + 1;
                            if (v74 + 1 >= v62) {
                              goto LABEL_143;
                            }
                            v75 = *(void *)(v153 + 8 * v58);
                            if (!v75)
                            {
                              unint64_t v58 = v74 + 2;
                              if (v74 + 2 >= v62) {
                                goto LABEL_143;
                              }
                              v75 = *(void *)(v153 + 8 * v58);
                              if (!v75)
                              {
                                unint64_t v58 = v74 + 3;
                                if (v74 + 3 >= v62) {
                                  goto LABEL_143;
                                }
                                v75 = *(void *)(v153 + 8 * v58);
                                if (!v75)
                                {
                                  unint64_t v58 = v74 + 4;
                                  if (v74 + 4 >= v62) {
                                    goto LABEL_143;
                                  }
                                  v75 = *(void *)(v153 + 8 * v58);
                                  if (!v75)
                                  {
                                    unint64_t v58 = v74 + 5;
                                    if (v74 + 5 >= v62) {
                                      goto LABEL_143;
                                    }
                                    v75 = *(void *)(v153 + 8 * v58);
                                    if (!v75)
                                    {
                                      unint64_t v58 = v74 + 6;
                                      if (v74 + 6 >= v62) {
                                        goto LABEL_143;
                                      }
                                      v75 = *(void *)(v153 + 8 * v58);
                                      if (!v75)
                                      {
                                        v76 = v74 + 7;
                                        if (v76 >= v62) {
                                          goto LABEL_143;
                                        }
                                        v75 = *(void *)(v153 + 8 * v76);
                                        if (!v75)
                                        {
                                          while (1)
                                          {
                                            unint64_t v58 = v76 + 1;
                                            if (__OFADD__(v76, 1LL))
                                            {
                                              __break(1u);
                                              goto LABEL_189;
                                            }

                                            if (v58 >= v62) {
                                              break;
                                            }
                                            v75 = *(void *)(v153 + 8 * v58);
                                            ++v76;
                                            if (v75) {
                                              goto LABEL_78;
                                            }
                                          }

  if (a1 >= v7)
  {
LABEL_36:
    __break(1u);
    JUMPOUT(0x183051C6CLL);
  }

  unint64_t v11 = 0;
  uint64_t v12 = (uint64_t)&a1[-v5];
  unint64_t v13 = (_BYTE *)(a2 + v5);
  unint64_t v14 = -v5;
  uint64_t v15 = 1;
  unint64_t v16 = 1;
  while (2)
  {
    unint64_t v17 = v13 - a1;
    uint64_t v18 = (unint64_t)&a1[v14];
    while (1)
    {
      if ((v18 & 0x8000000000000000LL) != 0 || (unint64_t v10 = v17 < 1, --v17, v10))
      {
        __break(1u);
LABEL_31:
        __break(1u);
LABEL_32:
        __break(1u);
LABEL_33:
        __break(1u);
LABEL_34:
        __break(1u);
LABEL_35:
        __break(1u);
        goto LABEL_36;
      }

      uint64_t v19 = *a1;
      if (__OFADD__(v12, 1LL)) {
        goto LABEL_31;
      }
      ++a1;
      ++v12;
      ++v18;
      if (a1 >= v7) {
        goto LABEL_32;
      }
    }

    switch(*a1)
    {
      case '+':
      case '-':
        if (v12 != 0 || (v11 & 1) == 0) {
          goto LABEL_29;
        }
        uint64_t v12 = 0LL;
        unint64_t v11 = 0;
        uint64_t v15 = 0;
        unint64_t v16 = 0;
        if (++a1 >= v7) {
          goto LABEL_34;
        }
        continue;
      case ',':
      case '/':
      case '0':
      case '1':
      case '2':
      case '3':
      case '4':
      case '5':
      case '6':
      case '7':
      case '8':
      case '9':
      case ':':
      case ';':
      case '<':
      case '=':
      case '>':
      case '?':
      case '@':
      case 'A':
      case 'B':
      case 'C':
      case 'D':
        goto LABEL_29;
      case '.':
        if (v12 < 1 || (v16 & 1) == 0) {
          goto LABEL_29;
        }
        uint64_t v12 = 0LL;
        unint64_t v11 = 0;
        unint64_t v16 = 0;
        ++a1;
        uint64_t v15 = 1;
        if (a1 < v7) {
          continue;
        }
        __break(1u);
        goto LABEL_29;
      case 'E':
        goto LABEL_23;
      default:
        if ((_DWORD)v19 != 101) {
          goto LABEL_29;
        }
LABEL_23:
        if (v12 >= 1 && (v15 & 1) != 0)
        {
          uint64_t v12 = 0LL;
          uint64_t v15 = 0;
          unint64_t v16 = 0;
          ++a1;
          unint64_t v11 = 1;
          if (a1 >= v7) {
            goto LABEL_35;
          }
          continue;
        }

    unint64_t v11 = 0LL;
LABEL_10:
    CFMutableDictionaryRef result = UnsafeMutableRawBufferPointer.copyMemory(from:)();
    uint64_t v12 = v11 - v8;
    if (!v8) {
      uint64_t v12 = 0LL;
    }
    if (__OFADD__(*a5, v12))
    {
      __break(1u);
    }

    else
    {
      *a5 += v12;
      unint64_t v13 = __OFSUB__(*a6, v12);
      unint64_t v14 = *a6 - v12;
      if (!v13)
      {
        *a6 = v14;
        return result;
      }
    }

    __break(1u);
    goto LABEL_17;
  }

  Hasher._combine(_:)(0);
  if (!v0[7]) {
    goto LABEL_10;
  }
LABEL_5:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  if (v0[9])
  {
LABEL_6:
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    return;
  }

  Hasher._combine(_:)(0);
  if (!v4) {
    goto LABEL_10;
  }
LABEL_5:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  if (!v5) {
    goto LABEL_11;
  }
LABEL_6:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

  Hasher._combine(_:)(0);
  if (!v4) {
    goto LABEL_10;
  }
LABEL_5:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  if (!v5) {
    goto LABEL_11;
  }
LABEL_6:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

  Hasher._combine(_:)(0);
  if (!v0[7]) {
    goto LABEL_10;
  }
LABEL_5:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  if (!v0[9]) {
    goto LABEL_11;
  }
LABEL_6:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

    uint64_t v23 = objc_msgSend(objc_allocWithZone((Class)NSIndexSet), sel_init);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _MutablePairHandle<NSIndexSet, NSMutableIndexSet>);
    unint64_t v16 = swift_allocObject();
    *(void *)(v16 + 16) = v23;
    *(_BYTE *)(v16 + 24) = 0;
    uint64_t v18 = v32;
    if (v32) {
      goto LABEL_6;
    }
LABEL_10:

    CFMutableDictionaryRef result = swift_release();
    *a5 = v16;
    return result;
  }

  if ((v5 & 1) != 0)
  {
    outlined retain of Calendar.RecurrenceRule((uint64_t)v35);
    swift_bridgeObjectRetain();
    id v29 = swift_bridgeObjectRetain();
    uint64_t v28 = (void *)specialized _ArrayProtocol.filter(_:)(v29, (uint64_t)v35, v12);
    swift_bridgeObjectRelease();
    outlined release of Calendar.RecurrenceRule((uint64_t)v35);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_15;
  }

  uint64_t v21 = v35[0];
  __dst[0] = 65660LL;
  uint64_t v22 = 1.59271755e13;
  if (v7 <= 1.59271755e13) {
    uint64_t v22 = v7;
  }
  uint64_t v23 = fmax(v22, -2.11845067e11);
  ObjectType = swift_getObjectType();
  uint64_t v31 = v23;
  uint64_t v25 = *(void (**)(void *__return_ptr, void *, double *, uint64_t, void))(*((void *)&v21 + 1) + 192LL);
  swift_unknownObjectRetain();
  v25(__src, __dst, &v31, ObjectType, *((void *)&v21 + 1));
  swift_unknownObjectRelease();
  memcpy(__dst, __src, 0x11AuLL);
  uint64_t v30 = 1;
  uint64_t v31 = v23;
  uint64_t v26 = *(void (**)(void *__return_ptr, char *, double *, uint64_t, void))(*((void *)&v21 + 1) + 160LL);
  swift_unknownObjectRetain();
  v26(__src, &v30, &v31, ObjectType, *((void *)&v21 + 1));
  swift_unknownObjectRelease();
  if ((__src[2] & 1) == 0)
  {
    char v27 = *(double *)__src;
    outlined retain of Calendar.RecurrenceRule((uint64_t)v35);
    outlined retain of DateComponents((uint64_t)__dst);
    uint64_t v28 = specialized Sequence.compactMap<A>(_:)(v12, (uint64_t)__dst, v35, v27);
    outlined release of Calendar.RecurrenceRule((uint64_t)v35);
    outlined release of DateComponents((uint64_t)__dst);
    swift_bridgeObjectRelease();
    outlined release of DateComponents((uint64_t)__dst);
LABEL_15:
    swift_bridgeObjectRelease();
    dates->_rawValue = v28;
    return;
  }

  unumf_formatDecimal();
  swift_bridgeObjectRelease();
  return v3;
}

        unint64_t v11 = 512LL;
LABEL_13:
        if ((POSIXErrorCode.init(rawValue:)() & 0x100000000LL) != 0)
        {
          _StringGuts.grow(_:)(22LL);
          swift_bridgeObjectRelease();
          v26[0] = 0xD000000000000014LL;
          v26[1] = 0x80000001839C9190LL;
          char v27 = v10;
          v25._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
          String.append(_:)(v25);
          swift_bridgeObjectRelease();
          _assertionFailure(_:_:file:line:flags:)();
          __break(1u);
          JUMPOUT(0x183171E20LL);
        }

        static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSPOSIXErrorDomain");
        uint64_t v15 = (int)POSIXErrorCode.rawValue.getter();
        unint64_t v16 = objc_allocWithZone((Class)&OBJC_CLASS___NSError);
        unint64_t v17 = String._bridgeToObjectiveCImpl()();
        swift_bridgeObjectRelease();
        unint64_t v14 = objc_msgSend(v16, sel_initWithDomain_code_userInfo_, v17, v15, _NativeDictionary.bridged()());
        swift_unknownObjectRelease();
        swift_unknownObjectRelease();
        uint64_t v18 = objc_msgSend(v14, sel_domain);
        uint64_t v19 = static String._unconditionallyBridgeFromObjectiveC(_:)(v18);
        uint64_t v21 = v20;

        if (v19 == static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSPOSIXErrorDomain") && v21 == v22) {
          goto LABEL_20;
        }
        uint64_t v24 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if ((v24 & 1) == 0)
        {
          __break(1u);
LABEL_20:
          swift_bridgeObjectRelease_n();
        }

  Hasher._combine(_:)(0);
  unsigned int v7 = *(void **)(v0 + 24);
  if (!v7) {
    goto LABEL_10;
  }
LABEL_5:
  Hasher._combine(_:)(1u);
  type metadata accessor for CFDictionaryRef(0LL);
  lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef();
  char v8 = v7;
  _CFObject.hash(into:)();

  uint64_t v9 = *(void **)(v0 + 32);
  if (v9)
  {
LABEL_6:
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0LL);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef();
    unint64_t v10 = v9;
    _CFObject.hash(into:)();

    return;
  }

  Hasher._combine(_:)(0);
  unsigned int v7 = *(void **)(v0 + 24);
  if (!v7) {
    goto LABEL_10;
  }
LABEL_5:
  Hasher._combine(_:)(1u);
  type metadata accessor for CFDictionaryRef(0LL);
  lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef();
  char v8 = v7;
  _CFObject.hash(into:)();

  uint64_t v9 = *(void **)(v0 + 32);
  if (!v9) {
    goto LABEL_11;
  }
LABEL_6:
  Hasher._combine(_:)(1u);
  type metadata accessor for CFDictionaryRef(0LL);
  lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef();
  unint64_t v10 = v9;
  _CFObject.hash(into:)();

  return Hasher._finalize()();
}

  Hasher._combine(_:)(0);
  if (!v3) {
    goto LABEL_10;
  }
LABEL_5:
  Hasher._combine(_:)(1u);
  type metadata accessor for CFDictionaryRef(0LL);
  lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef();
  uint64_t v9 = v3;
  _CFObject.hash(into:)();

  if (!v5) {
    goto LABEL_11;
  }
LABEL_6:
  Hasher._combine(_:)(1u);
  type metadata accessor for CFDictionaryRef(0LL);
  lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef();
  unint64_t v10 = v5;
  _CFObject.hash(into:)();

  return Hasher._finalize()();
}

  outlined release of URLComponents((uint64_t)v25);
  uint64_t v19 = objc_msgSend(v1, sel_string);
  if (!v19) {
    return 0x7FFFFFFFFFFFFFFFLL;
  }
  uint64_t v20 = v19;
  static String._unconditionallyBridgeFromObjectiveC(_:)(v19);

  if ((v15 & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0x7FFFFFFFFFFFFFFFLL;
  }

  lazy protocol witness table accessor for type String and conformance String();
  uint64_t v21 = StringProtocol._toUTF16Offsets(_:)();
  uint64_t v23 = v22;
  CFMutableDictionaryRef result = swift_bridgeObjectRelease();
  if (!__OFSUB__(v23, v21)) {
    return v21;
  }
  __break(1u);
  return result;
}

  outlined release of URLComponents((uint64_t)v25);
  uint64_t v19 = objc_msgSend(v1, sel_string);
  if (!v19) {
    return 0x7FFFFFFFFFFFFFFFLL;
  }
  uint64_t v20 = v19;
  static String._unconditionallyBridgeFromObjectiveC(_:)(v19);

  if ((v15 & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0x7FFFFFFFFFFFFFFFLL;
  }

  lazy protocol witness table accessor for type String and conformance String();
  uint64_t v21 = StringProtocol._toUTF16Offsets(_:)();
  uint64_t v23 = v22;
  CFMutableDictionaryRef result = swift_bridgeObjectRelease();
  if (!__OFSUB__(v23, v21)) {
    return v21;
  }
  __break(1u);
  return result;
}

  outlined release of URLComponents((uint64_t)v25);
  uint64_t v19 = objc_msgSend(v1, sel_string);
  if (!v19) {
    return 0x7FFFFFFFFFFFFFFFLL;
  }
  uint64_t v20 = v19;
  static String._unconditionallyBridgeFromObjectiveC(_:)(v19);

  if ((v15 & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0x7FFFFFFFFFFFFFFFLL;
  }

  lazy protocol witness table accessor for type String and conformance String();
  uint64_t v21 = StringProtocol._toUTF16Offsets(_:)();
  uint64_t v23 = v22;
  CFMutableDictionaryRef result = swift_bridgeObjectRelease();
  if (!__OFSUB__(v23, v21)) {
    return v21;
  }
  __break(1u);
  return result;
}

  outlined release of URLComponents((uint64_t)v25);
  uint64_t v19 = objc_msgSend(v1, sel_string);
  if (!v19) {
    return 0x7FFFFFFFFFFFFFFFLL;
  }
  uint64_t v20 = v19;
  static String._unconditionallyBridgeFromObjectiveC(_:)(v19);

  if ((v15 & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0x7FFFFFFFFFFFFFFFLL;
  }

  lazy protocol witness table accessor for type String and conformance String();
  uint64_t v21 = StringProtocol._toUTF16Offsets(_:)();
  uint64_t v23 = v22;
  CFMutableDictionaryRef result = swift_bridgeObjectRelease();
  if (!__OFSUB__(v23, v21)) {
    return v21;
  }
  __break(1u);
  return result;
}

  outlined release of URLComponents((uint64_t)v25);
  uint64_t v19 = objc_msgSend(v1, sel_string);
  if (!v19) {
    return 0x7FFFFFFFFFFFFFFFLL;
  }
  uint64_t v20 = v19;
  static String._unconditionallyBridgeFromObjectiveC(_:)(v19);

  if ((v15 & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0x7FFFFFFFFFFFFFFFLL;
  }

  lazy protocol witness table accessor for type String and conformance String();
  uint64_t v21 = StringProtocol._toUTF16Offsets(_:)();
  uint64_t v23 = v22;
  CFMutableDictionaryRef result = swift_bridgeObjectRelease();
  if (!__OFSUB__(v23, v21)) {
    return v21;
  }
  __break(1u);
  return result;
}

  outlined release of URLComponents((uint64_t)v25);
  uint64_t v19 = objc_msgSend(v1, sel_string);
  if (!v19) {
    return 0x7FFFFFFFFFFFFFFFLL;
  }
  uint64_t v20 = v19;
  static String._unconditionallyBridgeFromObjectiveC(_:)(v19);

  if ((v15 & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0x7FFFFFFFFFFFFFFFLL;
  }

  lazy protocol witness table accessor for type String and conformance String();
  uint64_t v21 = StringProtocol._toUTF16Offsets(_:)();
  uint64_t v23 = v22;
  CFMutableDictionaryRef result = swift_bridgeObjectRelease();
  if (!__OFSUB__(v23, v21)) {
    return v21;
  }
  __break(1u);
  return result;
}

  outlined release of URLComponents((uint64_t)v25);
  uint64_t v19 = objc_msgSend(v1, sel_string);
  if (!v19) {
    return 0x7FFFFFFFFFFFFFFFLL;
  }
  uint64_t v20 = v19;
  static String._unconditionallyBridgeFromObjectiveC(_:)(v19);

  if ((v15 & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0x7FFFFFFFFFFFFFFFLL;
  }

  lazy protocol witness table accessor for type String and conformance String();
  uint64_t v21 = StringProtocol._toUTF16Offsets(_:)();
  uint64_t v23 = v22;
  CFMutableDictionaryRef result = swift_bridgeObjectRelease();
  if (!__OFSUB__(v23, v21)) {
    return v21;
  }
  __break(1u);
  return result;
}

  outlined release of URLComponents((uint64_t)v25);
  uint64_t v19 = objc_msgSend(v1, sel_string);
  if (!v19) {
    return 0x7FFFFFFFFFFFFFFFLL;
  }
  uint64_t v20 = v19;
  static String._unconditionallyBridgeFromObjectiveC(_:)(v19);

  if ((v15 & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0x7FFFFFFFFFFFFFFFLL;
  }

  lazy protocol witness table accessor for type String and conformance String();
  uint64_t v21 = StringProtocol._toUTF16Offsets(_:)();
  uint64_t v23 = v22;
  CFMutableDictionaryRef result = swift_bridgeObjectRelease();
  if (!__OFSUB__(v23, v21)) {
    return v21;
  }
  __break(1u);
  return result;
}

  unint64_t v10 = 0;
  return v10 & 1;
}

  CFMutableDictionaryRef result = swift_release();
  *(void *)uint64_t v2 = v4;
  return result;
}

  *(void *)uint64_t v19 = 0LL;
  *(void *)(v19 + _Block_object_dispose(va, 8) = 0LL;
  *(_BYTE *)(v19 + 16) = 1;
LABEL_10:
  if (one-time initialization token for cache != -1) {
    swift_once();
  }
  uint64_t v26 = static LocaleCache.cache + 16;
  char v27 = (os_unfair_lock_s *)(static LocaleCache.cache + 124);
  swift_retain_n();
  os_unfair_lock_lock(v27);
  closure #1 in LocaleCache.autoupdatingCurrent.getter(v26, &v32);
  os_unfair_lock_unlock(v27);
  swift_release_n();
  uint64_t v28 = v32;
  id v29 = lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( (unint64_t *)&lazy protocol witness table cache variable for type _LocaleAutoupdating and conformance _LocaleAutoupdating,  (uint64_t (*)(uint64_t))type metadata accessor for _LocaleAutoupdating,  (uint64_t)&protocol conformance descriptor for _LocaleAutoupdating);
  outlined destroy of ICUNumberFormatter.Signature( a7,  type metadata accessor for Duration.UnitsFormatStyle.FractionalPartDisplayStrategy);
  CFMutableDictionaryRef result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v21 - 8) + 8LL))(v20, v21);
  *(void *)a9 = v28;
  *(void *)(a9 + _Block_object_dispose(va, 8) = v29;
  return result;
}

    uint64_t v18 = 1;
    if (v17 == v13) {
      uint64_t v19 = 0LL;
    }
    else {
      uint64_t v19 = v17;
    }
    if (v19 + 1 == v13)
    {
      uint64_t v20 = 0LL;
      v126 = 0LL;
      goto LABEL_25;
    }

    unint64_t v16 = v12[v19];
    if ((_DWORD)v16 != 47 || v12[v19 + 1] != 47)
    {
      v126 = 0LL;
      uint64_t v20 = 0LL;
      goto LABEL_25;
    }

    uint64_t v31 = v19 + 2;
    unint64_t v16 = v13;
    if (v19 + 2 == v13) {
      goto LABEL_23;
    }
    unint64_t v32 = v12[v31];
    int v33 = v32 > 0x3F || ((1LL << v32) & 0x8000800800000000LL) == 0;
    unint64_t v16 = v19 + 2;
    if (!v33) {
      goto LABEL_23;
    }
    int v42 = v19 + 3;
    while (v13 != v42)
    {
      unint64_t v43 = v12[v42++];
      int v44 = v43 > 0x3F;
      unint64_t v45 = (1LL << v43) & 0x8000800800000000LL;
      if (!v44 && v45 != 0)
      {
        unint64_t v47 = v42 - 1;
        goto LABEL_73;
      }
    }

    unint64_t v47 = v13;
LABEL_73:
    if (v47 >= v31)
    {
      unint64_t v16 = v19 + 2;
      if (v31 == v47)
      {
LABEL_23:
        v126 = 0LL;
        uint64_t v20 = 0LL;
        *(void *)&v202 = v19 + 2;
        *((void *)&v202 + 1) = v16;
        uint64_t v19 = v16;
        v203 = 0;
        goto LABEL_25;
      }

      uint64_t v19 = v47;
      uint64_t v20 = v204;
      v126 = v205;
      if ((v206 & 1) != 0)
      {
        uint64_t v18 = 1;
        unint64_t v11 = &v195;
        goto LABEL_25;
      }

      if (v204 == v205)
      {
        uint64_t v18 = 0;
        v126 = v204;
        unint64_t v11 = &v195;
        goto LABEL_25;
      }

      unint64_t v16 = v196;
      if (v12[v204] - 58 < 0xFFFFFFF6)
      {
LABEL_188:
        if (v196 - v195 == 11) {
          v106 = v197;
        }
        else {
          v106 = 1;
        }
        if ((v106 & 1) == 0
          && (((0x3FFE000000000uLL >> ((*v12 - 1) >> 1)) & 0x20) + *v12) == 97
          && (((0x3FFE000000000uLL >> ((v12[1] - 1) >> 1)) & 0x20) + v12[1]) == 100
          && (((0x3FFE000000000uLL >> ((v12[2] - 1) >> 1)) & 0x20) + v12[2]) == 100
          && (((0x3FFE000000000uLL >> ((v12[3] - 1) >> 1)) & 0x20) + v12[3]) == 114
          && (((0x3FFE000000000uLL >> ((v12[4] - 1) >> 1)) & 0x20) + v12[4]) == 101
          && (((0x3FFE000000000uLL >> ((v12[5] - 1) >> 1)) & 0x20) + v12[5]) == 115
          && (((0x3FFE000000000uLL >> ((v12[6] - 1) >> 1)) & 0x20) + v12[6]) == 115
          && (((0x3FFE000000000uLL >> ((v12[7] - 1) >> 1)) & 0x20) + v12[7]) == 98
          && (((0x3FFE000000000uLL >> ((v12[8] - 1) >> 1)) & 0x20) + v12[8]) == 111
          && (((0x3FFE000000000uLL >> ((v12[9] - 1) >> 1)) & 0x20) + v12[9]) == 111)
        {
          unint64_t v16 = 0x3FFE000000000LL;
        }

        goto LABEL_141;
      }

      v109 = v204 + 1;
      if (v204 + 1 != v205)
      {
        while (v12[v109] - 58 >= 0xFFFFFFF6)
        {
          if (v205 == ++v109) {
            goto LABEL_212;
          }
        }

        goto LABEL_188;
      }

  __break(1u);
  return result;
}

    swift_willThrow();
    return swift_bridgeObjectRelease();
  }

  uint64_t v15 = a1;
  unint64_t v16 = a3;
  unint64_t v17 = 0LL;
  CFMutableDictionaryRef result = closure #1 in String.data(using:allowLossyConversion:)((uint64_t)&v15, a4, a5, a6);
  if (v7) {
    goto LABEL_9;
  }
  uint64_t v12 = a2 - a1;
  unint64_t v13 = v17;
  unint64_t v14 = v12 - v17;
  if (v12 >= v17)
  {
    if (v12 == v17)
    {
LABEL_7:
      CFMutableDictionaryRef result = swift_bridgeObjectRelease();
      *a7 = v13;
      return result;
    }

    if (v14 >= 1)
    {
      bzero((void *)(a1 + v17), v14);
      goto LABEL_7;
    }

    goto LABEL_14;
  }

  __break(1u);
LABEL_13:
  __break(1u);
LABEL_14:
  __break(1u);
  return result;
}

      --v22;
      goto LABEL_10;
    }

  if (v45)
  {
    unint64_t v16 = String.lowercased()();
    object = v16._object;
    countAndFlagsBits = v16._countAndFlagsBits;
    goto LABEL_60;
  }

  swift_bridgeObjectRetain();
LABEL_61:
  uint64_t v12 = v6;
  unint64_t v13 = (void *)v5;
LABEL_68:
  result._object = v13;
  result._countAndFlagsBits = v12;
  return result;
}

  LOBYTE(v190) = 12;
  *(double *)v193 = v9;
  *(double *)__dst = v13;
  *((void *)&__dst[0] + 1) = v187;
  _s10Foundation18_CalendarGregorianC3add_2to6amount10inTimeZoneAA4DateVAA0B0V9ComponentO_AISiAA0hI0VtAA0cB5ErrorOYKF( (unsigned __int8 *)&v190,  (double *)v193,  v11,  v194);
  if (v15) {
    goto LABEL_213;
  }
  uint64_t v15 = 0LL;
  uint64_t v9 = v194[0];
  if ((v8 & 1) == 0)
  {
LABEL_11:
    LOBYTE(v190) = 2;
    *(double *)v193 = v9;
    *(double *)__dst = v13;
    *((void *)&__dst[0] + 1) = v187;
    _s10Foundation18_CalendarGregorianC3add_2to6amount10inTimeZoneAA4DateVAA0B0V9ComponentO_AISiAA0hI0VtAA0cB5ErrorOYKF( (unsigned __int8 *)&v190,  (double *)v193,  v170,  v194);
    if (v15) {
      goto LABEL_213;
    }
    uint64_t v15 = 0LL;
    uint64_t v9 = v194[0];
  }

  *(void *)a2 = v6;
  *(void *)(a2 + _Block_object_dispose(va, 8) = v7;
  *(_BYTE *)(a2 + 16) = 0;
  return result;
}

    value = 0LL;
    goto LABEL_10;
  }

  unsigned int v7 = 0LL;
LABEL_4:
  value = v7;
LABEL_10:
  v30.value = value;
  return v30.value;
}

  CFMutableDictionaryRef result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

LABEL_10:
  type metadata accessor for _AsyncBytesBuffer.Storage();
  uint64_t v18 = swift_allocObject();
  *(void *)(v18 + 16) = 0LL;
  *(void *)(v18 + 24) = 0LL;
  *(_BYTE *)(v18 + 32) = 0;
  swift_retain_n();
  uint64_t v19 = swift_dynamicCastClassUnconditional();
  uint64_t v20 = *(void *)(v19 + 16);
  *(void *)(v19 + 16) = &async function pointer to partial apply for closure #1 in NSURLSession.AsyncBytes.Iterator.init(storage:);
  *(void *)(v19 + 24) = v2;
  outlined consume of (@escaping @callee_guaranteed (@in_guaranteed URL, @guaranteed Error) -> (@unowned Bool))?(v20);
  swift_release_n();

  swift_unknownObjectRelease();
  uint64_t v21 = *(uint64_t **)(v0 + 96);
  *uint64_t v21 = v18;
  v21[1] = v18 + 33;
  v21[2] = v18 + 33;
  CFMutableDictionaryRef result = swift_dynamicCastClassUnconditional();
  uint64_t v23 = *(int **)(result + 16);
  *(void *)(v0 + 184) = v23;
  *(void *)(v0 + 192) = *(void *)(result + 24);
  if (v23)
  {
    uint64_t v25 = (uint64_t (*)(void))((char *)v23 + *v23);
    swift_retain();
    uint64_t v24 = (void *)swift_task_alloc();
    *(void *)(v0 + 200) = v24;
    *uint64_t v24 = v0;
    v24[1] = closure #1 in URL.AsyncBytes.AsyncIterator.init(_:);
    return v25(*(void *)(v0 + 96));
  }

  else
  {
    __break(1u);
  }

  return result;
}

  __break(1u);
}

  __break(1u);
}

  __break(1u);
  return result;
}

  unsigned int v3 = (Swift::Int)v1;
  result.value = v3;
  result.is_nil = v2;
  return result;
}

  __break(1u);
  return result;
}

    LODWORD(v62) = v26;
    int v42 = *(void (**)(char *, uint64_t, uint64_t, __n128))(v25 + 16);
    unint64_t v43 = v25;
    v42(v19, v65, v14, v27);
    ((void (*)(char *, char *, uint64_t))v42)(v16, v19, v14);
    int v44 = v66;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v66 + 48))(v16, 1LL, a6) == 1)
    {
      unint64_t v45 = *(void (**)(char *, uint64_t))(v43 + 8);
      v45(v16, v14);
      _CodingPathNode.path.getter(v64);
      v45(v19, v14);
    }

    else
    {
      (*(void (**)(char *, char *, uint64_t))(v44 + 32))(v11, v16, a6);
      unint64_t v46 = _CodingPathNode.path.getter(v64);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CodingKey>);
      unint64_t v47 = swift_initStackObject();
      *(_OWORD *)(v47 + 16) = xmmword_183720D90;
      unint64_t v48 = v63;
      *(void *)(v47 + 56) = a6;
      *(void *)(v47 + 64) = v48;
      unint64_t v49 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)(v47 + 32));
      (*(void (**)(uint64_t *, char *, uint64_t))(v44 + 16))(v49, v11, a6);
      v69[0] = v46;
      specialized Array.append<A>(contentsOf:)(v47);
      (*(void (**)(char *, uint64_t))(v43 + 8))(v19, v14);
      (*(void (**)(char *, uint64_t))(v44 + 8))(v11, a6);
    }

    type metadata accessor for DecodingError();
    swift_allocError();
    JSONDecoderImpl.createTypeMismatchError(type:for:value:)(MEMORY[0x189617FA8], v62, v50);
    swift_bridgeObjectRelease();
    return swift_willThrow();
  }

  MEMORY[0x1895F8858](v24);
  *((_BYTE *)&v61 - 16) = v36;
  *((_BYTE *)&v61 - 15) = v37;
  unint64_t v39 = *(void *)(*(void *)(v38 + 32) + 24LL);
  swift_retain();
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v39 + 40));
  uint64_t v40 = v62;
  specialized closure #1 in XMLPlistMap.withBuffer<A>(for:perform:)( (void *)(v39 + 16),  (void *(*)(void *__return_ptr, uint64_t, uint64_t))closure #1 in JSONDecoderImpl.unwrapString<A>(from:for:_:)partial apply,  a1,  v68,  v69);
  os_unfair_lock_unlock((os_unfair_lock_t)(v39 + 40));
  swift_release();
  CFMutableDictionaryRef result = swift_release();
  if (!v40) {
    return v69[0];
  }
  return result;
}

  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

  __break(1u);
}

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

  __break(1u);
}

  __break(1u);
  return result;
}

    a2 = v12;
  }

  while (v12 != v11);
  if (!v8)
  {
    if (v10 < 0)
    {
      __break(1u);
      return result;
    }

    return (uint64_t)specialized String.init<A, B>(_validating:as:)(0LL, v10, v6);
  }

  return 0LL;
}

  outlined destroy of Any?( (uint64_t)&v10,  &demangling cache variable for type metadata for AttributedString._AttributeValue?);
  CFMutableDictionaryRef result = 0.0;
  *(_OWORD *)a2 = xmmword_183723F60;
  *(_BYTE *)(a2 + 20) = 0;
  *(_DWORD *)(a2 + 16) = 0;
  return result;
}

  outlined destroy of Any?( (uint64_t)&v10,  &demangling cache variable for type metadata for AttributedString._AttributeValue?);
  CFMutableDictionaryRef result = 0.0;
  *(_OWORD *)(a2 + 89) = 0u;
  *(_OWORD *)(a2 + 64) = 0u;
  *(_OWORD *)(a2 + 80) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)(a2 + 4_Block_object_dispose(va, 8) = 0u;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_BYTE *)(a2 + 105) = 1;
  return result;
}

  outlined destroy of Any?( (uint64_t)&v8,  &demangling cache variable for type metadata for AttributedString._AttributeValue?);
  return 0LL;
}

    *(_WORD *)(a2 + 2 * v13++) = v18;
    if (a3 == v13) {
      goto LABEL_29;
    }
  }

  uint64_t v15 = 1;
  a3 = v13;
LABEL_29:
  a1 = v30;
LABEL_30:
  swift_bridgeObjectRelease();
LABEL_31:
  *(void *)a1 = a4;
  *(void *)(a1 + _Block_object_dispose(va, 8) = a5;
  *(void *)(a1 + 16) = v11;
  *(void *)(a1 + 24) = v8;
  *(_WORD *)(a1 + 32) = v12;
  *(_BYTE *)(a1 + 34) = v15;
  return a3;
}

      [v5 appendString:@"n"];
      goto LABEL_10;
    }

  uint64_t v15 = 0LL;
  if (!a6) {
    return v15;
  }
LABEL_13:
  if (!v15)
  {
    unint64_t v16 = _NSErrorWithFilePath(256LL, (uint64_t)a3);
LABEL_17:
    *a6 = v16;
  }

  return v15;
}

  memmove(v4, (const void *)bytes, length);
}

    LOBYTE(v6) = 1;
  }

  return v6;
}

    unint64_t v10 = malloc_default_zone();
    unint64_t v11 = (unint64_t *)malloc_zone_malloc(v10, 8 * length);
    *(void *)(v7 + _Block_object_dispose(va, 8) = v11;
    memmove(v11, indexes, 8 * length);
    *(void *)(v7 + 16) = length;
    return (NSIndexPath *)v7;
  }

  unsigned int v7 = (8 * v9) | 0x8000000000000004LL;
  unint64_t v13 = *MEMORY[0x189616658] ^ v7;
  if ((~v13 & 0xC000000000000007LL) != 0) {
    return (NSIndexPath *)(v13 & 0xFFFFFFFFFFFFFFF8LL | *(unsigned __int8 *)(MEMORY[0x189616648] + (v13 & 7)));
  }
  return (NSIndexPath *)v7;
}

    unint64_t v11 = value[0];
LABEL_14:
    *a5 = v11;
    return 1LL;
  }

  uint64_t v12 = atomic_load((unint64_t *)(a1 + 16));
  if ((v12 & 0x20) == 0 && !_os_feature_enabled_impl())
  {
    if (_decodeObjectReference_onceToken != -1) {
      dispatch_once(&_decodeObjectReference_onceToken, &__block_literal_global_592);
    }
    goto LABEL_3;
  }

  objc_msgSend( (id)a1,  "__failWithExceptionName:errorCode:format:",  @"NSInvalidUnarchiveOperationException",  4864,  @"%@: object cycles are disallowed",  _NSMethodExceptionProem((objc_class *)a1, sel_decodeObjectForKey_));
  return 1LL;
}

        ++a1[18];
        goto LABEL_10;
      }

      [a4 appendPlaceholder];
      unint64_t v14 = a1[8] + 1LL;
      a1[8] = v14;
      if (v14 > v16) {
        goto LABEL_23;
      }
      char v8 = 0;
      LOBYTE(v12) = 0;
LABEL_19:
      uint64_t v9 = v8;
      char v8 = v12;
      if (!--v5) {
        goto LABEL_23;
      }
    }

    goto LABEL_9;
  }

      ++a1[17];
      if (v10 > 0x7Eu || v11 >= 0x7Fu) {
        goto LABEL_22;
      }
LABEL_24:
      [a4 appendByte:v14];
LABEL_25:
      unint64_t v11 = v10;
      unint64_t v10 = v14;
      --v5;
    }

    while (v5);
  }

  a1[12] = a1[8];
  CFMutableDictionaryRef result = a1[18] + a1[17];
  a1[5] = result;
  return result;
}

      ++a1[17];
      if (v10 > 0x7Eu || v11 >= 0x7Fu) {
        goto LABEL_22;
      }
LABEL_24:
      [a4 appendByte:v14];
LABEL_25:
      unint64_t v11 = v10;
      unint64_t v10 = v14;
      --v5;
    }

    while (v5);
  }

  a1[12] = a1[8];
  CFMutableDictionaryRef result = a1[18] + a1[17];
  a1[5] = result;
  return result;
}

  if (a3 < 0) {
    return (id)[@"-" stringByAppendingString:result];
  }
  return result;
}

    LOBYTE(v7) = 1;
  }

  return v7;
}

      char v6 = 0LL;
LABEL_10:
      unsigned int v7 = 0LL;
      goto LABEL_11;
    }

    char v6 = 0LL;
    unsigned int v7 = 2LL;
  }

  else
  {
    char v6 = 0LL;
    unsigned int v7 = 1LL;
  }

    fprintf((FILE *)*MEMORY[0x1895F89D0], "%s\n", "out of dynamic memory in _qfqp2ensure_buffer_stack()");
    exit(2);
  }

  if (yy_buffer_stack_max != 1) {
    return result;
  }
  CFMutableDictionaryRef result = (char *)realloc((void *)yy_buffer_stack, 0x48uLL);
  yy_buffer_stack = (uint64_t)result;
  if (!result) {
    goto LABEL_9;
  }
  *(_OWORD *)(result + 56) = 0u;
  *(_OWORD *)(result + 40) = 0u;
  *(_OWORD *)(result + 24) = 0u;
  *(_OWORD *)(result + _Block_object_dispose(va, 8) = 0u;
  uint64_t v1 = 9LL;
LABEL_7:
  yy_buffer_stack_max = v1;
  return result;
}

      -[NSFileAccessClaim givePriorityToClaim:]( self,  "givePriorityToClaim:",  a3,  *(_OWORD *)v20,  *(void *)&v20[16],  v21);
      return;
    }
  }

  unint64_t v13 = [a3 shouldCancelInsteadOfWaiting];
  unint64_t v14 = (os_log_s *)_NSFCClaimsLog();
  uint64_t v15 = os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT);
  if (v13)
  {
    if (v15)
    {
      unint64_t v16 = [a3 claimID];
      unint64_t v17 = self->_claimID;
      *(_DWORD *)uint64_t v20 = 138543618;
      *(void *)&v20[4] = v16;
      *(_WORD *)&v20[12] = 2114;
      *(void *)&v20[14] = v17;
      _os_log_impl( &dword_182EB1000,  v14,  OS_LOG_TYPE_DEFAULT,  "As requested, cancelling claim %{public}@ because it is blocked by claim %{public}@.",  v20,  0x16u);
    }

    objc_msgSend( a3,  "setClaimerError:",  +[NSError errorWithDomain:code:userInfo:]( NSError,  "errorWithDomain:code:userInfo:",  @"NSCocoaErrorDomain",  3072,  0));
  }

  else
  {
    if (v15)
    {
      uint64_t v18 = [a3 claimID];
      uint64_t v19 = self->_claimID;
      *(_DWORD *)uint64_t v20 = 138543618;
      *(void *)&v20[4] = v18;
      *(_WORD *)&v20[12] = 2114;
      *(void *)&v20[14] = v19;
      _os_log_impl( &dword_182EB1000,  v14,  OS_LOG_TYPE_DEFAULT,  "Claim %{public}@ is blocked waiting for claim %{public}@ to finish.",  v20,  0x16u);
    }

    -[NSFileAccessClaim addPendingClaim:](self, "addPendingClaim:", a3);
  }

  if ([*(id *)(a1 + 48) containsObject:a2])
  {
    [*(id *)(a1 + 56) removeObject:a2];
    ++*(void *)(*(void *)(*(void *)(a1 + 72) + 8LL) + 24LL);
  }

  return (*(uint64_t (**)(void))(*(void *)(a1 + 64) + 16LL))();
}

  -[NSLock unlock](self->_lock, "unlock");
  return v6;
}

id storeARCWeakAt(uint64_t a1, uint64_t a2, id obj)
{
  unsigned int v3 = (id *)(a1 + 8 * a2);
  if (*v3 == (id)1) {
    id *v3 = 0LL;
  }
  return objc_storeWeak(v3, obj);
}

Class NSClassFromString(Class aClassName)
{
  uint64_t v6 = *MEMORY[0x1895F89C0];
  if (aClassName)
  {
    Class v1 = aClassName;
    uint64_t v2 = -[objc_class length](aClassName, "length");
    if (-[objc_class getCString:maxLength:encoding:]( v1,  "getCString:maxLength:encoding:",  v5,  1000LL,  4LL)
      && strlen(v5) == v2)
    {
      unsigned int v3 = v5;
      return objc_lookUpClass(v3);
    }

    if (!v2)
    {
LABEL_9:
      unsigned int v3 = (const char *)-[objc_class UTF8String](v1, "UTF8String");
      return objc_lookUpClass(v3);
    }

    uint64_t v4 = 0LL;
    while (-[objc_class characterAtIndex:](v1, "characterAtIndex:", v4))
    {
      if (v2 == ++v4) {
        goto LABEL_9;
      }
    }

    return 0LL;
  }

  return aClassName;
}

BOOL _NSTransmutePathSlashes(_WORD *a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  if (*a2 >= 2 && *a1 == 92) {
    uint64_t v3 = 2LL * (a1[1] == 92);
  }
  else {
    uint64_t v3 = 0LL;
  }
  if (v3 < v2)
  {
    uint64_t v4 = v3;
    while (1)
    {
      int v5 = (unsigned __int16)a1[v4];
      if (v5 == 47) {
        break;
      }
      uint64_t v8 = v4 + 1;
      a1[v3] = v5;
LABEL_16:
      ++v3;
      uint64_t v4 = v8;
      if (v8 >= v2) {
        goto LABEL_19;
      }
    }

    a1[v3] = 47;
    if (v2 <= v4 + 1) {
      uint64_t v6 = v4 + 1;
    }
    else {
      uint64_t v6 = v2;
    }
    uint64_t v7 = v6 - 1;
    while (v7 != v4)
    {
      uint64_t v8 = v4 + 1;
      int v9 = (unsigned __int16)a1[++v4];
      if (v9 != 47) {
        goto LABEL_16;
      }
    }

    ++v3;
  }

LABEL_19:
  *a2 = v3;
  return v2 != v3;
}

  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  uint64_t v6 = v41;
  if (v41) {
    goto LABEL_20;
  }
LABEL_13:
  Hasher._combine(_:)(0);
  uint64_t v7 = v42;
  if (!v42)
  {
LABEL_14:
    Hasher._combine(_:)(0);
    goto LABEL_22;
  }

  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  uint64_t v6 = v41;
  if (v41) {
    goto LABEL_20;
  }
LABEL_13:
  Hasher._combine(_:)(0);
  uint64_t v7 = v42;
  if (!v42)
  {
LABEL_14:
    Hasher._combine(_:)(0);
    goto LABEL_22;
  }

        uint64_t v12 = (v20 - 1) & v20;
        uint64_t v18 = __clz(__rbit64(v20)) + (v8 << 6);
      }

      uint64_t v22 = 8 * v18;
      uint64_t v23 = *(void *)(*(void *)(v5 + 48) + v22);
      uint64_t v24 = *(void *)(*(void *)(v5 + 56) + v22);
      CFMutableDictionaryRef result = static Hasher._hash(seed:_:)();
      uint64_t v25 = -1LL << *(_BYTE *)(v7 + 32);
      uint64_t v26 = result & ~v25;
      char v27 = v26 >> 6;
      if (((-1LL << v26) & ~*(void *)(v14 + 8 * (v26 >> 6))) != 0)
      {
        uint64_t v15 = __clz(__rbit64((-1LL << v26) & ~*(void *)(v14 + 8 * (v26 >> 6)))) | v26 & 0x7FFFFFFFFFFFFFC0LL;
      }

      else
      {
        uint64_t v28 = 0;
        id v29 = (unint64_t)(63 - v25) >> 6;
        do
        {
          if (++v27 == v29 && (v28 & 1) != 0)
          {
            __break(1u);
            goto LABEL_37;
          }

          uint64_t v30 = v27 == v29;
          if (v27 == v29) {
            char v27 = 0LL;
          }
          v28 |= v30;
          uint64_t v31 = *(void *)(v14 + 8 * v27);
        }

        while (v31 == -1);
        uint64_t v15 = __clz(__rbit64(~v31)) + (v27 << 6);
      }

      *(void *)(v14 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v15;
      unint64_t v16 = 8 * v15;
      *(void *)(*(void *)(v7 + 48) + v16) = v23;
      *(void *)(*(void *)(v7 + 56) + v16) = v24;
      ++*(void *)(v7 + 16);
    }
  }

  CFMutableDictionaryRef result = swift_release();
LABEL_36:
  const char *v3 = v7;
  return result;
}

    uint64_t v22 = (v10 - 1) & v10;
    uint64_t v7 = v11;
    uint64_t v8 = __clz(__rbit64(v10)) + (v11 << 6);
LABEL_20:
    unint64_t v13 = (void *)(*(void *)(a2 + 56) + 80 * v8);
    unint64_t v14 = v13[1];
    uint64_t v15 = v13[3];
    unint64_t v16 = v13[5];
    unint64_t v17 = v13[7];
    uint64_t v18 = v13[9];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    if (v14)
    {
      Hasher._combine(_:)(1u);
      swift_bridgeObjectRetain();
      String.hash(into:)();
      swift_bridgeObjectRelease();
    }

    else
    {
      Hasher._combine(_:)(0);
    }

    uint64_t v6 = v7;
    if (v15)
    {
      Hasher._combine(_:)(1u);
      swift_bridgeObjectRetain();
      String.hash(into:)();
      swift_bridgeObjectRelease();
      if (v16) {
        goto LABEL_25;
      }
    }

    else
    {
      Hasher._combine(_:)(0);
      if (v16)
      {
LABEL_25:
        Hasher._combine(_:)(1u);
        swift_bridgeObjectRetain();
        String.hash(into:)();
        swift_bridgeObjectRelease();
        if (v17) {
          goto LABEL_26;
        }
        goto LABEL_30;
      }
    }

    Hasher._combine(_:)(0);
    if (v17)
    {
LABEL_26:
      Hasher._combine(_:)(1u);
      swift_bridgeObjectRetain();
      String.hash(into:)();
      swift_bridgeObjectRelease();
      if (v18) {
        goto LABEL_4;
      }
      goto LABEL_31;
    }

    uint64_t v6 = (v13 - 1) & v13;
    unint64_t v11 = __clz(__rbit64(v13)) + (v9 << 6);
LABEL_20:
    uint64_t v15 = *(void *)(*(void *)(a2 + 56) + 16 * v11 + 8);
    Hasher._combine(_:)(*(unsigned __int8 *)(*(void *)(a2 + 48) + v11));
    if (v15)
    {
      Hasher._combine(_:)(1u);
      swift_bridgeObjectRetain_n();
      String.hash(into:)();
      swift_bridgeObjectRelease_n();
    }

    else
    {
      Hasher._combine(_:)(0);
    }

    v8 ^= Hasher._finalize()();
  }

  unint64_t v14 = v12 + 2;
  if (v14 >= v7)
  {
LABEL_22:
    swift_release();
    Hasher._combine(_:)(v8);
    return;
  }

  unint64_t v13 = *(void *)(v3 + 8 * v14);
  if (v13)
  {
    int v9 = v14;
    goto LABEL_19;
  }

  while (1)
  {
    int v9 = v14 + 1;
    if (__OFADD__(v14, 1LL)) {
      break;
    }
    if (v9 >= v7) {
      goto LABEL_22;
    }
    unint64_t v13 = *(void *)(v3 + 8 * v9);
    ++v14;
    if (v13) {
      goto LABEL_19;
    }
  }

    int v5 = (v12 - 1) & v12;
    unint64_t v10 = __clz(__rbit64(v12)) + (v8 << 6);
LABEL_20:
    unint64_t v14 = *(void *)(*(void *)(a2 + 56) + 16 * v10 + 8);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    if (v14)
    {
      Hasher._combine(_:)(1u);
      swift_bridgeObjectRetain();
      String.hash(into:)();
      swift_bridgeObjectRelease_n();
    }

    else
    {
      Hasher._combine(_:)(0);
    }

    v7 ^= Hasher._finalize()();
  }

  unint64_t v13 = v11 + 2;
  if (v13 >= v6)
  {
LABEL_22:
    swift_release();
    Hasher._combine(_:)(v7);
    return;
  }

  uint64_t v12 = *(void *)(v15 + 8 * v13);
  if (v12)
  {
    uint64_t v8 = v13;
    goto LABEL_19;
  }

  while (1)
  {
    uint64_t v8 = v13 + 1;
    if (__OFADD__(v13, 1LL)) {
      break;
    }
    if (v8 >= v6) {
      goto LABEL_22;
    }
    uint64_t v12 = *(void *)(v15 + 8 * v8);
    ++v13;
    if (v12) {
      goto LABEL_19;
    }
  }

  if (WORD2(a2))
  {
LABEL_20:
    if (!(_DWORD)v5) {
      goto LABEL_21;
    }
    goto LABEL_25;
  }

          if (v17 < 0x10)
          {
            unint64_t v47 = 0x303030755CLL;
            uint64_t v20 = 0xE500000000000000LL;
            goto LABEL_34;
          }

          if (v17 > 0x1F)
          {
LABEL_23:
            if (++v13 >= v15) {
              goto LABEL_73;
            }
          }

          else
          {
            unint64_t v47 = 808482140LL;
            uint64_t v20 = 0xE400000000000000LL;
LABEL_34:
            unint64_t v48 = v20;
            lazy protocol witness table accessor for type UInt8 and conformance UInt8();
            v21._countAndFlagsBits = String.init<A>(_:radix:uppercase:)();
            String.append(_:)(v21);
            swift_bridgeObjectRelease();
            uint64_t v19 = v47;
            uint64_t v18 = v48;
LABEL_35:
            if (v16 >= v13) {
              goto LABEL_37;
            }
LABEL_36:
            specialized Array.append<A>(contentsOf:)(v16, (char *)(v13 - v16));
LABEL_37:
            specialized Array.append<A>(contentsOf:)(v19, v18);
            unint64_t v16 = ++v13;
            if (v13 >= v15)
            {
LABEL_73:
              if (v16 < v13)
              {
                uint64_t v31 = (char *)(v13 - v16);
                unint64_t v32 = v16;
LABEL_75:
                specialized Array.append<A>(contentsOf:)(v32, v31);
              }

              goto LABEL_76;
            }
          }

          break;
      }
    }
  }

  uint64_t v22 = HIBYTE(v6) & 0xF;
  unint64_t v47 = v7;
  unint64_t v48 = v6 & 0xFFFFFFFFFFFFFFLL;
  if (!v22) {
    goto LABEL_76;
  }
  uint64_t v23 = (uint64_t *)((char *)&v47 + v22);
  uint64_t v24 = &v47;
  uint64_t v25 = (char *)&v47;
  while (2)
  {
    uint64_t v26 = *(unsigned __int8 *)v24;
    char v27 = 0xE200000000000000LL;
    uint64_t v28 = 8796LL;
    switch(*(_BYTE *)v24)
    {
      case 8:
        uint64_t v28 = 25180LL;
        goto LABEL_67;
      case 9:
        uint64_t v28 = 29788LL;
        goto LABEL_66;
      case 0xA:
        uint64_t v28 = 28252LL;
        goto LABEL_66;
      case 0xB:
      case 0xE:
      case 0xF:
      case 0x10:
      case 0x11:
      case 0x12:
      case 0x13:
      case 0x14:
      case 0x15:
      case 0x16:
      case 0x17:
      case 0x18:
      case 0x19:
      case 0x1A:
      case 0x1B:
      case 0x1C:
      case 0x1D:
      case 0x1E:
      case 0x1F:
      case 0x20:
      case 0x21:
      case 0x23:
      case 0x24:
      case 0x25:
      case 0x26:
      case 0x27:
      case 0x28:
      case 0x29:
      case 0x2A:
      case 0x2B:
      case 0x2C:
      case 0x2D:
      case 0x2E:
        goto LABEL_49;
      case 0xC:
        uint64_t v28 = 26204LL;
        goto LABEL_66;
      case 0xD:
        uint64_t v28 = 29276LL;
        goto LABEL_66;
      case 0x22:
        goto LABEL_65;
      case 0x2F:
        if (withoutEscapingSlashes) {
          goto LABEL_53;
        }
        uint64_t v28 = 12124LL;
        goto LABEL_66;
      default:
        if (v26 == 92)
        {
          char v27 = 0xE200000000000000LL;
          uint64_t v28 = 23644LL;
          goto LABEL_67;
        }

      swift_retain();
LABEL_20:
      v21[19] = v52;
      v71[0] = v19;
      v72[3] = type metadata accessor for __JSONEncoder();
      v72[4] = lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( &lazy protocol witness table cache variable for type __JSONEncoder and conformance __JSONEncoder,  (uint64_t (*)(uint64_t))type metadata accessor for __JSONEncoder,  (uint64_t)&protocol conformance descriptor for __JSONEncoder);
      v72[0] = v21;
      swift_retain();
      v32(v71, v72);
      if (v24)
      {
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v72);
        v21[18] = v28;
        swift_retain();
        swift_release();
        v21[19] = v29;
        swift_release();
        swift_release();
        unint64_t v43 = v21[2];
        if (v43 >> 62)
        {
          swift_bridgeObjectRetain();
          v57 = _CocoaArrayWrapper.endIndex.getter();
          swift_bridgeObjectRelease();
          if (v33 >= v57) {
            goto LABEL_26;
          }
        }

        else if (v33 >= *(void *)((v43 & 0xFFFFFFFFFFFFF8LL) + 0x10))
        {
LABEL_26:
          swift_willThrow();
          outlined consume of JSONEncoder.DateEncodingStrategy(v32, v63, 1);
          return v43;
        }

        unint64_t v43 = *v62;
        if (*v62 >> 62)
        {
          swift_bridgeObjectRetain();
          int v59 = _CocoaArrayWrapper.endIndex.getter();
          swift_bridgeObjectRelease();
          if (v59) {
            goto LABEL_25;
          }
        }

        else if (*(void *)((v43 & 0xFFFFFFFFFFFFF8LL) + 0x10))
        {
LABEL_25:
          specialized RangeReplaceableCollection<>.popLast()();
          swift_release();
          goto LABEL_26;
        }

        __break(1u);
        JUMPOUT(0x18300AB38LL);
      }

      __swift_destroy_boxed_opaque_existential_1((uint64_t)v72);
      v21[18] = v28;
      swift_retain();
      swift_release();
      v21[19] = v29;
      swift_release();
      swift_release();
      v56 = v21[2];
      if (v56 >> 62)
      {
        swift_bridgeObjectRetain();
        unint64_t v58 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
        if (v33 < v58)
        {
LABEL_30:
          if (*v62 >> 62)
          {
            swift_bridgeObjectRetain();
            uint64_t v60 = _CocoaArrayWrapper.endIndex.getter();
            swift_bridgeObjectRelease();
            if (v60) {
              goto LABEL_32;
            }
          }

          else if (*(void *)((*v62 & 0xFFFFFFFFFFFFF8LL) + 0x10))
          {
LABEL_32:
            unint64_t v43 = specialized RangeReplaceableCollection<>.popLast()();
            outlined consume of JSONEncoder.DateEncodingStrategy(v32, v63, 1);
            return v43;
          }

          __break(1u);
          JUMPOUT(0x18300AB6CLL);
        }
      }

      else if (v33 < *(void *)((v56 & 0xFFFFFFFFFFFFF8LL) + 0x10))
      {
        goto LABEL_30;
      }

      outlined consume of JSONEncoder.DateEncodingStrategy(v32, v63, 1);
      type metadata accessor for JSONReference();
      unint64_t v43 = swift_allocObject();
      *(void *)(v43 + 16) = MEMORY[0x18961AFF0];
      *(void *)(v43 + 24) = 0LL;
      *(_BYTE *)(v43 + 32) = 4;
      return v43;
    }

    v67 = v23;
    int v44 = *(void (**)(char *, char *, uint64_t))(v26 + 32);
    unint64_t v45 = v64;
    v44(v64, v14, a4);
    unint64_t v46 = (uint64_t *)swift_allocObject();
    unint64_t v47 = v65;
    v46[5] = a4;
    v46[6] = v47;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v46 + 2);
    v44((char *)boxed_opaque_existential_1, v45, a4);
    (*(void (**)(char *, uint64_t))(v11 + 8))(v17, v10);
    unint64_t v49 = v68;
    v46[7] = v68;
    unint64_t v50 = v49 >> 62;
    if (v49 >> 62)
    {
      unint64_t v32 = (void (*)(double *, void *))v69;
      if ((_DWORD)v50 != 1)
      {
        id v52 = 1LL;
        if (!__OFSUB__((_DWORD)v50, 1)) {
          goto LABEL_18;
        }
        goto LABEL_35;
      }

      v51 = (uint64_t *)((v49 & 0x3FFFFFFFFFFFFFFFLL) + 32);
    }

    else
    {
      v51 = (uint64_t *)(v49 + 64);
      unint64_t v32 = (void (*)(double *, void *))v69;
    }

    uint64_t v53 = *v51;
    swift_retain();
    v54 = __OFADD__(v53, 1LL);
    id v52 = v53 + 1;
    if (!v54)
    {
LABEL_18:
      v46[8] = v52;
      uint64_t v28 = v21[18];
      id v29 = v21[19];
      v21[18] = v46;
      int v33 = v67;
      uint64_t v24 = v70;
      goto LABEL_19;
    }

  unint64_t v11 = (unint64_t *)(4 * v23);
  if (!(v16 >> 14))
  {
    if (String.count.getter() == 1)
    {
      swift_bridgeObjectRelease();
      uint64_t v25 = 0xE100000000000000LL;
      uint64_t v15 = 47LL;
      goto LABEL_46;
    }

    if ((unint64_t)v11 >= (unint64_t)String.index(after:)() >> 14)
    {
LABEL_40:
      uint64_t v40 = String.subscript.getter();
      unint64_t v16 = v41;
      uint64_t v15 = MEMORY[0x186E1B610](v40);
      uint64_t v25 = v42;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v25 & 0x1000000000000000LL) != 0) {
        goto LABEL_41;
      }
      goto LABEL_46;
    }

    __break(1u);
    goto LABEL_39;
  }

  if ((String.index(before:)() ^ v16) >= 0x4000)
  {
LABEL_39:
    __break(1u);
    goto LABEL_143;
  }

  v125 = v23;
  uint64_t v30 = String.subscript.getter();
  v126 = v32;
  v127 = v33;
  unint64_t v34 = v30 >> 14;
  if (v30 >> 14 == v31 >> 14) {
    goto LABEL_44;
  }
  unint64_t v16 = v31;
  unint64_t v35 = Substring.index(before:)();
  if (Substring.subscript.getter() == 47 && v36 == 0xE100000000000000LL)
  {
    swift_bridgeObjectRelease();
  }

  else
  {
    int v44 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v44 & 1) == 0) {
      goto LABEL_116;
    }
  }

  if (v34 == v35 >> 14)
  {
LABEL_44:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v25 = 0xE100000000000000LL;
    uint64_t v15 = 47LL;
    uint64_t v23 = v125;
    goto LABEL_45;
  }

  while (1)
  {
    id v52 = Substring.index(before:)();
    if (Substring.subscript.getter() != 47 || v53 != 0xE100000000000000LL) {
      break;
    }
    swift_bridgeObjectRelease();
LABEL_58:
    if (v34 == v52 >> 14) {
      goto LABEL_44;
    }
  }

  v55 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  if ((v55 & 1) != 0) {
    goto LABEL_58;
  }
  unint64_t v35 = v52;
LABEL_116:
  swift_bridgeObjectRelease();
  v124 = v35;
  v93 = String.subscript.getter();
  v126 = v94;
  v127 = v93;
  v123 = v93 >> 14;
  if (v93 >> 14 == v95 >> 14)
  {
LABEL_117:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    String.index(after:)();
    v96 = String.subscript.getter();
    v98 = v97;
    v100 = v99;
    unint64_t v16 = v101;
    swift_bridgeObjectRelease();
    uint64_t v15 = MEMORY[0x186E1B610](v96, v98, v100, v16);
    uint64_t v25 = v102;
    goto LABEL_134;
  }

  v103 = Substring.index(before:)();
  if (Substring.subscript.getter() == 47 && v104 == 0xE100000000000000LL)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }

  else
  {
    v105 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v105 & 1) == 0)
    {
      if (v123 == v103 >> 14) {
        goto LABEL_117;
      }
      while (1)
      {
        v106 = Substring.index(before:)();
        if (Substring.subscript.getter() == 47 && v107 == 0xE100000000000000LL) {
          break;
        }
        v109 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        if ((v109 & 1) != 0) {
          goto LABEL_131;
        }
        if (v123 == v106 >> 14) {
          goto LABEL_117;
        }
      }

      swift_bridgeObjectRelease();
    }

  unint64_t v11 = (unint64_t *)(4 * v23);
  if (!(v16 >> 14))
  {
    if (String.count.getter() == 1)
    {
      swift_bridgeObjectRelease();
      uint64_t v25 = 0xE100000000000000LL;
      uint64_t v15 = 47LL;
      goto LABEL_46;
    }

    if ((unint64_t)v11 >= (unint64_t)String.index(after:)() >> 14)
    {
LABEL_40:
      uint64_t v40 = String.subscript.getter();
      unint64_t v16 = v41;
      uint64_t v15 = MEMORY[0x186E1B610](v40);
      uint64_t v25 = v42;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v25 & 0x1000000000000000LL) != 0) {
        goto LABEL_41;
      }
      goto LABEL_46;
    }

    __break(1u);
    goto LABEL_39;
  }

  if ((String.index(before:)() ^ v16) >= 0x4000)
  {
LABEL_39:
    __break(1u);
    goto LABEL_143;
  }

  v125 = v23;
  uint64_t v30 = String.subscript.getter();
  v126 = v32;
  v127 = v33;
  unint64_t v34 = v30 >> 14;
  if (v30 >> 14 == v31 >> 14) {
    goto LABEL_44;
  }
  unint64_t v16 = v31;
  unint64_t v35 = Substring.index(before:)();
  if (Substring.subscript.getter() == 47 && v36 == 0xE100000000000000LL)
  {
    swift_bridgeObjectRelease();
  }

  else
  {
    int v44 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v44 & 1) == 0) {
      goto LABEL_116;
    }
  }

  if (v34 == v35 >> 14)
  {
LABEL_44:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v25 = 0xE100000000000000LL;
    uint64_t v15 = 47LL;
    uint64_t v23 = v125;
    goto LABEL_45;
  }

  while (1)
  {
    id v52 = Substring.index(before:)();
    if (Substring.subscript.getter() != 47 || v53 != 0xE100000000000000LL) {
      break;
    }
    swift_bridgeObjectRelease();
LABEL_58:
    if (v34 == v52 >> 14) {
      goto LABEL_44;
    }
  }

  v55 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  if ((v55 & 1) != 0) {
    goto LABEL_58;
  }
  unint64_t v35 = v52;
LABEL_116:
  swift_bridgeObjectRelease();
  v124 = v35;
  v93 = String.subscript.getter();
  v126 = v94;
  v127 = v93;
  v123 = v93 >> 14;
  if (v93 >> 14 == v95 >> 14)
  {
LABEL_117:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    String.index(after:)();
    v96 = String.subscript.getter();
    v98 = v97;
    v100 = v99;
    unint64_t v16 = v101;
    swift_bridgeObjectRelease();
    uint64_t v15 = MEMORY[0x186E1B610](v96, v98, v100, v16);
    uint64_t v25 = v102;
    goto LABEL_134;
  }

  v103 = Substring.index(before:)();
  if (Substring.subscript.getter() == 47 && v104 == 0xE100000000000000LL)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }

  else
  {
    v105 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v105 & 1) == 0)
    {
      if (v123 == v103 >> 14) {
        goto LABEL_117;
      }
      while (1)
      {
        v106 = Substring.index(before:)();
        if (Substring.subscript.getter() == 47 && v107 == 0xE100000000000000LL) {
          break;
        }
        v109 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        if ((v109 & 1) != 0) {
          goto LABEL_131;
        }
        if (v123 == v106 >> 14) {
          goto LABEL_117;
        }
      }

      swift_bridgeObjectRelease();
    }

                                                uint64_t v31 = v161;
                                                goto LABEL_42;
                                              }

        Hasher._combine(_:)(1u);
        swift_bridgeObjectRetain();
        String.hash(into:)();
        swift_bridgeObjectRelease();
        if (!v45)
        {
LABEL_14:
          Hasher._combine(_:)(0);
          uint64_t v15 = v46;
          if (!v46) {
            goto LABEL_15;
          }
          goto LABEL_21;
        }

  objc_msgSend(v10, sel_setDetermination_, (v7 & 1) + 1);
  if ((_DWORD)v6 != 3) {
LABEL_10:
  }
    objc_msgSend(v10, sel_setPronounType_, v6 + 1);
LABEL_11:
  swift_bridgeObjectRelease();
  if (v8 != 2)
  {
    if ((v8 & 1) != 0) {
      uint64_t v12 = 2LL;
    }
    else {
      uint64_t v12 = 1LL;
    }
    objc_msgSend(v10, sel_setDefiniteness_, v12);
  }
}

    swift_unknownObjectRetain();
    specialized Rope._Node.distanceFromStart<A>(to:in:)(v24, v27, v29, v20, v28);
    CFMutableDictionaryRef result = swift_unknownObjectRelease_n();
    goto LABEL_20;
  }

  unint64_t v47 = *(void *)(v15 + 72);
  unint64_t v48 = *(void *)(v15 + 88);
  unint64_t v49 = a1;
  unint64_t v32 = *(unsigned __int8 *)(v20 + 18);
  if (*(_BYTE *)(v20 + 18))
  {
    CFMutableDictionaryRef result = swift_unknownObjectRetain_n();
    id v29 = v20;
    while (1)
    {
      unint64_t v34 = *(unsigned __int16 *)(v29 + 16);
      if (*(_WORD *)(v29 + 16))
      {
        unint64_t v35 = *(void *)(v29 + 40);
        uint64_t v36 = __OFSUB__(v21, v35);
        unint64_t v37 = v21 - v35;
        if (v36) {
          goto LABEL_64;
        }
        if (__OFADD__(v37, 1LL)) {
          goto LABEL_65;
        }
        if (v37 + 1 < 1)
        {
          unint64_t v34 = 0LL;
          goto LABEL_30;
        }

        if ((_DWORD)v34 != 1)
        {
          unint64_t v38 = (uint64_t *)(v29 + 64);
          unint64_t v39 = 1LL;
          while (1)
          {
            uint64_t v40 = *v38;
            v38 += 3;
            uint64_t v21 = v37 - v40;
            if (__OFSUB__(v37, v40)) {
              break;
            }
            if (__OFADD__(v21, 1LL)) {
              goto LABEL_62;
            }
            if (v21 + 1 < 1)
            {
              unint64_t v34 = v39;
              uint64_t v21 = v37;
              goto LABEL_30;
            }

            ++v39;
            unint64_t v37 = v21;
            if (v34 == v39) {
              goto LABEL_29;
            }
          }

          __break(1u);
LABEL_62:
          __break(1u);
LABEL_63:
          __break(1u);
LABEL_64:
          __break(1u);
LABEL_65:
          __break(1u);
LABEL_66:
          __break(1u);
LABEL_67:
          __break(1u);
LABEL_68:
          __break(1u);
LABEL_69:
          __break(1u);
LABEL_70:
          __break(1u);
          goto LABEL_71;
        }

        uint64_t v21 = v37;
      }

  uint64_t v7 = *(void *)(v0 + 24);
  uint64_t v8 = *(void *)(v0 + 8);
  if (v7 == v8)
  {
    CFMutableDictionaryRef result = 0LL;
    unint64_t v11 = 0LL;
    goto LABEL_44;
  }

  unint64_t v13 = *(void *)(v0 + 16);
  unint64_t v14 = *(_BYTE *)(v13 + 24);
  CFMutableDictionaryRef result = (char *)objc_msgSend(*(id *)(v13 + 16), sel_rangeAtIndex_, *(void *)(v0 + 24));
  unint64_t v11 = &result[v15];
  unint64_t v16 = __OFADD__(result, v15);
  if ((v14 & 1) == 0) {
    goto LABEL_39;
  }
  if (v16)
  {
LABEL_74:
    __break(1u);
    goto LABEL_75;
  }

  if ((uint64_t)v11 < (uint64_t)result)
  {
    __break(1u);
    goto LABEL_31;
  }

          if (++v4 == v3) {
            goto LABEL_83;
          }
        }

        if ((v2 & 0x1000000000000000LL) != 0)
        {
          swift_bridgeObjectRetain();
          id v29 = specialized _parseInteger<A, B>(ascii:radix:)(v23, v2, 10LL);
          swift_bridgeObjectRelease();
          if ((v29 & 0x100000000LL) != 0) {
            goto LABEL_19;
          }
          goto LABEL_18;
        }

        if ((v2 & 0x2000000000000000LL) == 0)
        {
          if ((v23 & 0x1000000000000000LL) != 0) {
            char v27 = (unsigned __int8 *)((v2 & 0xFFFFFFFFFFFFFFFLL) + 32);
          }
          else {
            char v27 = (unsigned __int8 *)_StringObject.sharedUTF8.getter();
          }
          uint64_t v28 = specialized closure #1 in FixedWidthInteger.init<A>(_:radix:)(v27, v25, 10LL);
          LOBYTE(v95[0]) = BYTE4(v28) & 1;
          LODWORD(v29) = (_DWORD)v28;
LABEL_66:
          if ((v95[0] & 1) != 0) {
            goto LABEL_19;
          }
LABEL_18:
          uint64_t v21 = v29 | v21;
          goto LABEL_19;
        }

        unint64_t v58 = v23;
        int v59 = v2 & 0xFFFFFFFFFFFFFFLL;
        if (v23 == 43)
        {
          if (!v24) {
            goto LABEL_89;
          }
          if (v24 != 1)
          {
            LODWORD(v29) = (BYTE1(v23) - 48);
            if (v29 < 0xA)
            {
              if (v24 == 2) {
                goto LABEL_65;
              }
              if ((BYTE2(v23) - 48) <= 9u)
              {
                LODWORD(v29) = 10 * v29 + (BYTE2(v23) - 48);
                uint64_t v36 = v24 - 3;
                if (v36)
                {
                  unint64_t v37 = (unsigned __int8 *)v55;
                  while (1)
                  {
                    unint64_t v38 = *v37 - 48;
                    if (v38 > 9) {
                      goto LABEL_63;
                    }
                    unint64_t v39 = 10LL * v29;
                    if ((v39 & 0xFFFFFFFF00000000LL) != 0) {
                      goto LABEL_63;
                    }
                    LODWORD(v29) = v39 + v38;
                    ++v37;
                    if (!--v36) {
                      goto LABEL_65;
                    }
                  }
                }

                goto LABEL_65;
              }
            }

            goto LABEL_63;
          }
        }

        else if (v23 == 45)
        {
          if (!v24)
          {
            __break(1u);
LABEL_89:
            __break(1u);
LABEL_90:
            int v5 = (char *)_StringObject.sharedUTF8.getter();
            continue;
          }

          if (v24 != 1)
          {
            if ((BYTE1(v23) - 48) < 0xAu)
            {
              LODWORD(v29) = -(BYTE1(v23) - 48);
              if (BYTE1(v23) == 48)
              {
                if (v24 == 2) {
                  goto LABEL_65;
                }
                uint64_t v30 = BYTE2(v23) - 48;
                if ((BYTE2(v23) - 48) <= 9u)
                {
                  uint64_t v31 = 10LL * v29;
                  if ((v31 & 0xFFFFFFFF00000000LL) == 0)
                  {
                    LODWORD(v29) = v31 - v30;
                    if (v31 >= v30)
                    {
                      unint64_t v32 = v24 - 3;
                      if (v32)
                      {
                        int v33 = (unsigned __int8 *)v55;
                        do
                        {
                          unint64_t v34 = *v33 - 48;
                          if (v34 > 9) {
                            goto LABEL_63;
                          }
                          unint64_t v35 = 10LL * v29;
                          if ((v35 & 0xFFFFFFFF00000000LL) != 0) {
                            goto LABEL_63;
                          }
                          LODWORD(v29) = v35 - v34;
                          ++v33;
                        }

                        while (--v32);
                      }

    uint64_t v30 = 0LL;
    uint64_t v31 = 0LL;
    unint64_t v32 = 1LL << v25;
    if (1LL << v25 < 64) {
      int v33 = ~(-1LL << (1LL << v25));
    }
    else {
      int v33 = -1LL;
    }
    unint64_t v34 = v33 & *v16;
    unint64_t v35 = (unint64_t)(v32 + 63) >> 6;
    v87 = v89 + 1;
    while (1)
    {
      if (v34)
      {
        uint64_t v36 = __clz(__rbit64(v34));
        v34 &= v34 - 1;
        unint64_t v37 = v36 | (v30 << 6);
        goto LABEL_24;
      }

      uint64_t v28 = __OFADD__(v30++, 1LL);
      if (v28)
      {
        __break(1u);
        goto LABEL_119;
      }

      if (v30 >= v35) {
        goto LABEL_45;
      }
      unint64_t v38 = v16[v30];
      if (!v38) {
        break;
      }
LABEL_40:
      uint64_t v40 = __clz(__rbit64(v38));
      unint64_t v34 = (v38 - 1) & v38;
      unint64_t v37 = v40 + (v30 << 6);
LABEL_24:
      v31 |= qword_1837AA7B8[*(char *)(*(void *)(v15 + 48) + v37)];
    }

    unint64_t v39 = v30 + 1;
    if (v30 + 1 >= v35) {
      goto LABEL_45;
    }
    unint64_t v38 = v16[v39];
    if (v38) {
      goto LABEL_39;
    }
    unint64_t v39 = v30 + 2;
    if (v30 + 2 >= v35) {
      goto LABEL_45;
    }
    unint64_t v38 = v16[v39];
    if (v38) {
      goto LABEL_39;
    }
    unint64_t v39 = v30 + 3;
    if (v30 + 3 >= v35) {
      goto LABEL_45;
    }
    unint64_t v38 = v16[v39];
    if (v38) {
      goto LABEL_39;
    }
    unint64_t v39 = v30 + 4;
    if (v30 + 4 >= v35) {
      goto LABEL_45;
    }
    unint64_t v38 = v16[v39];
    if (v38)
    {
LABEL_39:
      uint64_t v30 = v39;
      goto LABEL_40;
    }

    unint64_t v39 = v30 + 5;
    if (v30 + 5 < v35)
    {
      unint64_t v38 = v16[v39];
      if (!v38)
      {
        while (1)
        {
          uint64_t v30 = v39 + 1;
          if (__OFADD__(v39, 1LL)) {
            break;
          }
          if (v30 >= v35) {
            goto LABEL_45;
          }
          unint64_t v38 = v16[v30];
          ++v39;
          if (v38) {
            goto LABEL_40;
          }
        }

  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  uint64_t v7 = v40;
  if (v40) {
    goto LABEL_20;
  }
LABEL_13:
  Hasher._combine(_:)(0);
  uint64_t v8 = v41;
  if (!v41)
  {
LABEL_14:
    Hasher._combine(_:)(0);
    goto LABEL_22;
  }

  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  int v5 = v39;
  if (v39) {
    goto LABEL_20;
  }
LABEL_13:
  Hasher._combine(_:)(0);
  uint64_t v6 = v40;
  if (!v40)
  {
LABEL_14:
    Hasher._combine(_:)(0);
    goto LABEL_22;
  }

  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  int v5 = v39;
  if (v39) {
    goto LABEL_20;
  }
LABEL_13:
  Hasher._combine(_:)(0);
  uint64_t v6 = v40;
  if (!v40)
  {
LABEL_14:
    Hasher._combine(_:)(0);
    goto LABEL_22;
  }

  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  if (v51) {
    goto LABEL_20;
  }
LABEL_15:
  Hasher._combine(_:)(0);
  unint64_t v13 = v52;
  if (!v52)
  {
LABEL_16:
    Hasher._combine(_:)(0);
    goto LABEL_22;
  }

  if (v4 != v7) {
    goto LABEL_21;
  }
  uint64_t v8 = 1;
LABEL_22:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8 & 1;
}

  if (v4 != v7) {
    goto LABEL_21;
  }
  uint64_t v8 = 1;
LABEL_22:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8 & 1;
}

  if (v4 != v7) {
    goto LABEL_21;
  }
  uint64_t v8 = 1;
LABEL_22:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8 & 1;
}

  if (v4 != v7) {
    goto LABEL_21;
  }
  uint64_t v8 = 1;
LABEL_22:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8 & 1;
}

  if (v4 != v7) {
    goto LABEL_21;
  }
  uint64_t v8 = 1;
LABEL_22:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8 & 1;
}

  if (v4 != v7) {
    goto LABEL_21;
  }
  uint64_t v8 = 1;
LABEL_22:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8 & 1;
}

  unint64_t v38 = (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 80))(ObjectType, v2);
  uint64_t v40 = v39;
  unint64_t v41 = *(uint64_t (**)(uint64_t, uint64_t))(v3 + 80);
  swift_unknownObjectRetain();
  int v42 = v41(v6, v3);
  int v44 = v43;
  swift_unknownObjectRelease();
  if ((v40 & 1) != 0) {
    unint64_t v11 = v44 & 1;
  }
  else {
    unint64_t v11 = (v44 & 1) == 0 && v38 == v42;
  }
  return v11 & 1;
}

  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  if (v50) {
    goto LABEL_20;
  }
LABEL_15:
  Hasher._combine(_:)(0);
  uint64_t v15 = v51;
  if (!v51)
  {
LABEL_16:
    Hasher._combine(_:)(0);
    goto LABEL_22;
  }

  uint64_t v19 = (void (*)(__int128 *__return_ptr, uint64_t, void *))v2[47];
  swift_unknownObjectRetain();
  v19(&v26, ObjectType, v2);
  swift_unknownObjectRelease();
  uint64_t v20 = v26;
  uint64_t v21 = v27;
  uint64_t v22 = String.uppercased()();
  if (*((void *)&v20 + 1))
  {
    if (v21 == v22)
    {
      outlined copy of Locale.LanguageCode?(v20, *((uint64_t *)&v20 + 1));
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_unknownObjectRelease();
      swift_bridgeObjectRelease();
      outlined consume of Locale.LanguageCode?(v20, *((uint64_t *)&v20 + 1));
      return byte_1837C1F98[v4];
    }

    uint64_t v23 = _stringCompareWithSmolCheck(_:_:expecting:)();
    outlined copy of Locale.LanguageCode?(v20, *((uint64_t *)&v20 + 1));
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_unknownObjectRelease();
    swift_bridgeObjectRelease();
    outlined consume of Locale.LanguageCode?(v20, *((uint64_t *)&v20 + 1));
    uint64_t v6 = v4;
    if ((v23 & 1) != 0) {
      return byte_1837C1F98[v4];
    }
  }

  else
  {
    swift_unknownObjectRelease();
    outlined consume of Locale.LanguageCode?(v20, 0LL);
    outlined consume of Locale.LanguageCode?(22356LL, 0xE200000000000000LL);
    return v4;
  }

  return v6;
}

  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  int v5 = v39;
  if (v39) {
    goto LABEL_20;
  }
LABEL_13:
  Hasher._combine(_:)(0);
  uint64_t v6 = v40;
  if (!v40)
  {
LABEL_14:
    Hasher._combine(_:)(0);
    goto LABEL_22;
  }

  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  if (v57) {
    goto LABEL_20;
  }
LABEL_15:
  Hasher._combine(_:)(0);
  unint64_t v14 = v58;
  if (!v58)
  {
LABEL_16:
    Hasher._combine(_:)(0);
    goto LABEL_22;
  }

  if ((a1[120] & 1) != 0) {
    goto LABEL_47;
  }
  unint64_t v34 = String.subscript.getter();
  uint64_t v36 = v34;
  unint64_t v37 = v35;
  unint64_t v39 = v38;
  unint64_t v41 = v40;
  if ((a1[217] & 1) != 0) {
    goto LABEL_21;
  }
  if ((v34 ^ v35) < 0x4000) {
    goto LABEL_77;
  }
  swift_bridgeObjectRetain();
  if (Substring.UTF8View.subscript.getter() != 91)
  {
    swift_bridgeObjectRelease();
    goto LABEL_77;
  }

  if (__OFSUB__(specialized Collection.count.getter(v36, v37, v39, v41), 1LL))
  {
LABEL_108:
    __break(1u);
    goto LABEL_109;
  }

  Substring.UTF8View.index(_:offsetBy:)();
  uint64_t v53 = Substring.UTF8View.subscript.getter();
  swift_bridgeObjectRelease();
  if (v53 != 93)
  {
LABEL_77:
    v112 = _ss5SliceV32withContiguousStorageIfAvailableyqd__Sgqd__SRy7ElementQzGKXEKlFSRyxGq_s5Error_pRi_zRi0_zRi__Ri0__r0_lys5UInt8Vqd__Isgyrzo_ABySS8UTF8ViewVGADsAI_pAMRszr__lIetMggrzo_Tpq5Sb_Tg50162_s10Foundation13RFC3986ParserV8validate33_A90579D1FA072CB135F95EF00BA46450LL6string9component22percentEncodingAllowedSbx_AA15URLComponentSetAELLVSbtSyRzlFZSbSRys5I7VGXEfU_10Foundation0nO0VXMtAP15URLComponentSet01_qrstuvW0LLVSbTf1cn_nTf4ndnn_n( v36,  v37,  v39,  v41,  4u,  1);
    if (v112 == 2)
    {
      lazy protocol witness table accessor for type Substring and conformance Substring();
      StringProtocol._ephemeralString.getter();
      v113 = (void *)String._bridgeToObjectiveCImpl()();
      swift_bridgeObjectRelease();
      v114 = (unsigned __int16 *)objc_msgSend(v113, sel__fastCharacterContents);
      v115 = v113;
      if (v114)
      {
        StringProtocol._ephemeralString.getter();
        v116 = (void *)String._bridgeToObjectiveCImpl()();
        swift_bridgeObjectRelease();
        v117 = objc_msgSend(v116, sel_length);
        swift_unknownObjectRelease();
        v118 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)( v114,  (uint64_t)v117,  4u,  1);
        swift_bridgeObjectRelease();
      }

      else
      {
        swift_bridgeObjectRetain();
        v118 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)( v36,  v37,  v39,  v41,  4u,  1);
        swift_bridgeObjectRelease_n();
      }

      if (!v118) {
        goto LABEL_46;
      }
    }

    else
    {
      v119 = v112;
      swift_bridgeObjectRelease();
      if ((v119 & 1) == 0) {
        goto LABEL_46;
      }
    }

  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  if (v53) {
    goto LABEL_20;
  }
LABEL_15:
  Hasher._combine(_:)(0);
  unint64_t v16 = v54;
  if (!v54)
  {
LABEL_16:
    Hasher._combine(_:)(0);
    goto LABEL_22;
  }

        __break(1u);
      }
    }

    __break(1u);
    goto LABEL_19;
  }

  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
LABEL_16:
  *(void *)a3 = 0LL;
  *(void *)(a3 + _Block_object_dispose(va, 8) = 0LL;
  *(_BYTE *)(a3 + 16) = 1;
}

    uint64_t v22 = v16 + 1;
    if ((char *)(v16 + 1) != v13)
    {
      uint64_t v23 = &v13[~v16];
      uint64_t v24 = &v12[v22];
      while (!*v24++)
      {
        if (!--v23) {
          goto LABEL_23;
        }
      }

  Hasher._combine(_:)(1u);
  Hasher._combine(_:)(*(void *)(v4 + 16));
  uint64_t v12 = *(void *)(v4 + 16);
  if (v12)
  {
    swift_bridgeObjectRetain();
    unint64_t v13 = v4 + 56;
    do
    {
      v13 += 32LL;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain_n();
      String.hash(into:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease_n();
      --v12;
    }

    while (v12);
    swift_bridgeObjectRelease();
    uint64_t v6 = v58;
    uint64_t v7 = v56;
    uint64_t v8 = v57;
  }

  Hasher._combine(_:)(1u);
  unint64_t v11 = *(void *)(v5 + 16);
  Hasher._combine(_:)(v11);
  if (v11)
  {
    swift_bridgeObjectRetain();
    uint64_t v12 = v5 + 56;
    do
    {
      v12 += 32LL;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain_n();
      String.hash(into:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease_n();
      --v11;
    }

    while (v11);
    swift_bridgeObjectRelease();
    uint64_t v8 = v54;
    uint64_t v7 = v55;
  }

    int v44 = v11;
    unint64_t v45 = result;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<Int, _TimeZoneProtocol>);
    uint64_t v25 = static _DictionaryStorage.copy(original:)();
    uint64_t v22 = v25;
    if (*(void *)(v4 + 16))
    {
      CFMutableDictionaryRef result = v25 + 64;
      __src = (void *)(v4 + 64);
      uint64_t v26 = (unint64_t)((1LL << *(_BYTE *)(v22 + 32)) + 63) >> 6;
      char v27 = 0LL;
      *(void *)(v22 + 16) = *(void *)(v4 + 16);
      uint64_t v28 = 1LL << *(_BYTE *)(v4 + 32);
      id v29 = -1LL;
      if (v28 < 64) {
        id v29 = ~(-1LL << v28);
      }
      uint64_t v30 = v29 & *(void *)(v4 + 64);
      uint64_t v31 = (unint64_t)(v28 + 63) >> 6;
      while (1)
      {
        if (v30)
        {
          unint64_t v32 = __clz(__rbit64(v30));
          v30 &= v30 - 1;
          int v33 = v32 | (v27 << 6);
        }

        else
        {
          unint64_t v38 = v27 + 1;
          if (__OFADD__(v27, 1LL)) {
            goto LABEL_60;
          }
          if (v38 >= v31) {
            break;
          }
          unint64_t v39 = *((void *)__src + v38);
          ++v27;
          if (!v39)
          {
            char v27 = v38 + 1;
            if (v38 + 1 >= v31) {
              break;
            }
            unint64_t v39 = *((void *)__src + v27);
            if (!v39)
            {
              char v27 = v38 + 2;
              if (v38 + 2 >= v31) {
                break;
              }
              unint64_t v39 = *((void *)__src + v27);
              if (!v39)
              {
                char v27 = v38 + 3;
                if (v38 + 3 >= v31) {
                  break;
                }
                unint64_t v39 = *((void *)__src + v27);
                if (!v39)
                {
                  char v27 = v38 + 4;
                  if (v38 + 4 >= v31) {
                    break;
                  }
                  unint64_t v39 = *((void *)__src + v27);
                  if (!v39)
                  {
                    char v27 = v38 + 5;
                    if (v38 + 5 >= v31) {
                      break;
                    }
                    unint64_t v39 = *((void *)__src + v27);
                    if (!v39)
                    {
                      char v27 = v38 + 6;
                      if (v38 + 6 >= v31) {
                        break;
                      }
                      unint64_t v39 = *((void *)__src + v27);
                      if (!v39)
                      {
                        char v27 = v38 + 7;
                        if (v38 + 7 >= v31) {
                          break;
                        }
                        unint64_t v39 = *((void *)__src + v27);
                        if (!v39)
                        {
                          uint64_t v40 = v38 + 8;
                          if (v40 >= v31) {
                            break;
                          }
                          unint64_t v39 = *((void *)__src + v40);
                          if (!v39)
                          {
                            while (1)
                            {
                              char v27 = v40 + 1;
                              if (__OFADD__(v40, 1LL)) {
                                goto LABEL_61;
                              }
                              if (v27 >= v31) {
                                goto LABEL_53;
                              }
                              unint64_t v39 = *((void *)__src + v27);
                              ++v40;
                              if (v39) {
                                goto LABEL_52;
                              }
                            }
                          }

                          char v27 = v40;
                        }
                      }
                    }
                  }
                }
              }
            }
          }

      ;
    }

    while (v17 != v58);
    swift_bridgeObjectRelease();
  }

  else
  {
    swift_bridgeObjectRelease();
  }

  return memcpy(a4, __src, 0x11AuLL);
}

  __break(1u);
  return result;
}

    __break(1u);
  }

  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v33);
LABEL_10:
  $defer #1 () in _PlistDictionaryUnkeyedDecodingContainer.decode(_:)(v2);
  return v5;
}

      __break(1u);
    }

    __break(1u);
    goto LABEL_19;
  }

  unint64_t v13 = type metadata accessor for DecodingError();
  swift_allocError();
  uint64_t v15 = v14;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
  *uint64_t v15 = MEMORY[0x1896184C8];
  unint64_t v16 = *(void *)(*v0 + 32);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CodingKey>);
  unint64_t v17 = swift_initStackObject();
  *(_OWORD *)(v17 + 16) = xmmword_183720D90;
  uint64_t v18 = v2[3];
  *(void *)(v17 + 56) = &type metadata for _CodingKey;
  *(void *)(v17 + 64) = lazy protocol witness table accessor for type _CodingKey and conformance _CodingKey();
  uint64_t v19 = swift_allocObject();
  *(void *)(v17 + 32) = v19;
  *(void *)(v19 + 16) = v18;
  *(void *)(v19 + 24) = 0LL;
  *(void *)(v19 + 32) = 0LL;
  *(_BYTE *)(v19 + 40) = 2;
  *(void *)&unint64_t v32 = v16;
  swift_bridgeObjectRetain();
  int v5 = &v32;
  specialized Array.append<A>(contentsOf:)(v17);
  DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
  (*(void (**)(void *, void, uint64_t))(*(void *)(v13 - 8) + 104LL))( v15,  *MEMORY[0x189619368],  v13);
  swift_willThrow();
  return v5 & 1;
}

      __break(1u);
    }

    __break(1u);
    goto LABEL_19;
  }

  unint64_t v16 = type metadata accessor for DecodingError();
  swift_allocError();
  uint64_t v18 = v17;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
  *uint64_t v18 = a2;
  uint64_t v19 = *(void *)(*v2 + 32);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CodingKey>);
  uint64_t v20 = swift_initStackObject();
  *(_OWORD *)(v20 + 16) = xmmword_183720D90;
  uint64_t v21 = v5[3];
  *(void *)(v20 + 56) = &type metadata for _CodingKey;
  *(void *)(v20 + 64) = lazy protocol witness table accessor for type _CodingKey and conformance _CodingKey();
  uint64_t v22 = swift_allocObject();
  *(void *)(v20 + 32) = v22;
  *(void *)(v22 + 16) = v21;
  *(void *)(v22 + 24) = 0LL;
  *(void *)(v22 + 32) = 0LL;
  *(_BYTE *)(v22 + 40) = 2;
  *(void *)&uint64_t v36 = v19;
  swift_bridgeObjectRetain();
  int v9 = &v36;
  specialized Array.append<A>(contentsOf:)(v20);
  DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
  (*(void (**)(void *, void, uint64_t))(*(void *)(v16 - 8) + 104LL))( v18,  *MEMORY[0x189619368],  v16);
  swift_willThrow();
  return v9;
}

      __break(1u);
    }

    __break(1u);
    goto LABEL_19;
  }

  unint64_t v16 = type metadata accessor for DecodingError();
  swift_allocError();
  uint64_t v18 = v17;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
  *uint64_t v18 = a2;
  uint64_t v19 = *(void *)(*v2 + 32);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CodingKey>);
  uint64_t v20 = swift_initStackObject();
  *(_OWORD *)(v20 + 16) = xmmword_183720D90;
  uint64_t v21 = v5[3];
  *(void *)(v20 + 56) = &type metadata for _CodingKey;
  *(void *)(v20 + 64) = lazy protocol witness table accessor for type _CodingKey and conformance _CodingKey();
  uint64_t v22 = swift_allocObject();
  *(void *)(v20 + 32) = v22;
  *(void *)(v22 + 16) = v21;
  *(void *)(v22 + 24) = 0LL;
  *(void *)(v22 + 32) = 0LL;
  *(_BYTE *)(v22 + 40) = 2;
  *(void *)&uint64_t v36 = v19;
  swift_bridgeObjectRetain();
  int v9 = &v36;
  specialized Array.append<A>(contentsOf:)(v20);
  DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
  (*(void (**)(void *, void, uint64_t))(*(void *)(v16 - 8) + 104LL))( v18,  *MEMORY[0x189619368],  v16);
  swift_willThrow();
  return v9;
}

      __break(1u);
    }

    __break(1u);
    goto LABEL_19;
  }

  unint64_t v16 = type metadata accessor for DecodingError();
  swift_allocError();
  uint64_t v18 = v17;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
  *uint64_t v18 = a2;
  uint64_t v19 = *(void *)(*v2 + 32);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CodingKey>);
  uint64_t v20 = swift_initStackObject();
  *(_OWORD *)(v20 + 16) = xmmword_183720D90;
  uint64_t v21 = v5[3];
  *(void *)(v20 + 56) = &type metadata for _CodingKey;
  *(void *)(v20 + 64) = lazy protocol witness table accessor for type _CodingKey and conformance _CodingKey();
  uint64_t v22 = swift_allocObject();
  *(void *)(v20 + 32) = v22;
  *(void *)(v22 + 16) = v21;
  *(void *)(v22 + 24) = 0LL;
  *(void *)(v22 + 32) = 0LL;
  *(_BYTE *)(v22 + 40) = 2;
  *(void *)&uint64_t v36 = v19;
  swift_bridgeObjectRetain();
  int v9 = (unint64_t)&v36;
  specialized Array.append<A>(contentsOf:)(v20);
  DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
  (*(void (**)(void *, void, uint64_t))(*(void *)(v16 - 8) + 104LL))( v18,  *MEMORY[0x189619368],  v16);
  swift_willThrow();
  return v9;
}

      __break(1u);
    }

    __break(1u);
    goto LABEL_19;
  }

  unint64_t v17 = type metadata accessor for DecodingError();
  swift_allocError();
  uint64_t v19 = v18;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
  *uint64_t v19 = a2;
  uint64_t v20 = *(void *)(*v2 + 32);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CodingKey>);
  uint64_t v21 = swift_initStackObject();
  *(_OWORD *)(v21 + 16) = xmmword_183720D90;
  uint64_t v22 = v5[3];
  *(void *)(v21 + 56) = &type metadata for _CodingKey;
  *(void *)(v21 + 64) = lazy protocol witness table accessor for type _CodingKey and conformance _CodingKey();
  uint64_t v23 = swift_allocObject();
  *(void *)(v21 + 32) = v23;
  *(void *)(v23 + 16) = v22;
  *(void *)(v23 + 24) = 0LL;
  *(void *)(v23 + 32) = 0LL;
  *(_BYTE *)(v23 + 40) = 2;
  *(void *)&unint64_t v38 = v20;
  swift_bridgeObjectRetain();
  int v9 = &v38;
  specialized Array.append<A>(contentsOf:)(v21);
  DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
  (*(void (**)(void *, void, uint64_t))(*(void *)(v17 - 8) + 104LL))( v19,  *MEMORY[0x189619368],  v17);
  swift_willThrow();
  return v9;
}

      __break(1u);
    }

    __break(1u);
    goto LABEL_19;
  }

  unint64_t v14 = type metadata accessor for DecodingError();
  swift_allocError();
  unint64_t v16 = v15;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
  *unint64_t v16 = MEMORY[0x189618620];
  unint64_t v17 = *(void *)(*v0 + 32);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CodingKey>);
  uint64_t v18 = swift_initStackObject();
  *(_OWORD *)(v18 + 16) = xmmword_183720D90;
  uint64_t v19 = v3[3];
  *(void *)(v18 + 56) = &type metadata for _CodingKey;
  *(void *)(v18 + 64) = lazy protocol witness table accessor for type _CodingKey and conformance _CodingKey();
  uint64_t v20 = swift_allocObject();
  *(void *)(v18 + 32) = v20;
  *(void *)(v20 + 16) = v19;
  *(void *)(v20 + 24) = 0LL;
  *(void *)(v20 + 32) = 0LL;
  *(_BYTE *)(v20 + 40) = 2;
  *(void *)&int v33 = v17;
  swift_bridgeObjectRetain();
  specialized Array.append<A>(contentsOf:)(v18);
  DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
  (*(void (**)(void *, void, uint64_t))(*(void *)(v14 - 8) + 104LL))( v16,  *MEMORY[0x189619368],  v14);
  swift_willThrow();
  return v2;
}

      __break(1u);
    }

    __break(1u);
    goto LABEL_19;
  }

  uint64_t v15 = type metadata accessor for DecodingError();
  swift_allocError();
  unint64_t v17 = v16;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
  *unint64_t v17 = MEMORY[0x189618560];
  uint64_t v18 = *(void *)(*v0 + 32);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CodingKey>);
  uint64_t v19 = swift_initStackObject();
  *(_OWORD *)(v19 + 16) = xmmword_183720D90;
  uint64_t v20 = v3[3];
  *(void *)(v19 + 56) = &type metadata for _CodingKey;
  *(void *)(v19 + 64) = lazy protocol witness table accessor for type _CodingKey and conformance _CodingKey();
  uint64_t v21 = swift_allocObject();
  *(void *)(v19 + 32) = v21;
  *(void *)(v21 + 16) = v20;
  *(void *)(v21 + 24) = 0LL;
  *(void *)(v21 + 32) = 0LL;
  *(_BYTE *)(v21 + 40) = 2;
  *(void *)&unint64_t v35 = v18;
  swift_bridgeObjectRetain();
  specialized Array.append<A>(contentsOf:)(v19);
  DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
  (*(void (**)(void *, void, uint64_t))(*(void *)(v15 - 8) + 104LL))( v17,  *MEMORY[0x189619368],  v15);
  swift_willThrow();
  return v2;
}

    __break(1u);
LABEL_20:
    __break(1u);
  }

  __break(1u);
  return result;
}

  __break(1u);
LABEL_20:
  __break(1u);
  return result;
}

    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<RegexPatternCache.Key, Regex<AnyRegexOutput>>);
    uint64_t v36 = static _DictionaryStorage.copy(original:)();
    uint64_t v22 = v36;
    if (*(void *)(a4 + 16))
    {
      v85 = a3;
      unint64_t v37 = (char *)(v36 + 64);
      unint64_t v38 = 1LL << *(_BYTE *)(v22 + 32);
      v79 = (char *)(a4 + 64);
      unint64_t v39 = (unint64_t)(v38 + 63) >> 6;
      if (v22 != a4 || v37 >= &v79[8 * v39]) {
        memmove(v37, v79, 8 * v39);
      }
      uint64_t v40 = 0LL;
      *(void *)(v22 + 16) = *(void *)(a4 + 16);
      unint64_t v41 = 1LL << *(_BYTE *)(a4 + 32);
      int v42 = -1LL;
      if (v41 < 64) {
        int v42 = ~(-1LL << v41);
      }
      unint64_t v43 = v42 & *(void *)(a4 + 64);
      v78 = (unint64_t)(v41 + 63) >> 6;
      while (1)
      {
        if (v43)
        {
          v83 = (v43 - 1) & v43;
          v84 = v40;
          int v44 = __clz(__rbit64(v43)) | ((void)v40 << 6);
        }

        else
        {
          v51 = (int64_t)v40 + 1;
          if (__OFADD__(v40, 1LL)) {
            goto LABEL_81;
          }
          if (v51 >= v78) {
            break;
          }
          id v52 = *(void *)&v79[8 * v51];
          uint64_t v53 = (int64_t)v40 + 1;
          if (!v52)
          {
            uint64_t v53 = (int64_t)v40 + 2;
            id v52 = *(void *)&v79[8 * v53];
            if (!v52)
            {
              uint64_t v53 = (int64_t)v40 + 3;
              id v52 = *(void *)&v79[8 * v53];
              if (!v52)
              {
                uint64_t v53 = (int64_t)v40 + 4;
                id v52 = *(void *)&v79[8 * v53];
                if (!v52)
                {
                  v54 = v22;
                  uint64_t v53 = (int64_t)v40 + 5;
                  id v52 = *(void *)&v79[8 * ((void)v40 + 5)];
                  if (!v52)
                  {
                    v55 = (char *)v40 + 6;
                    if ((uint64_t)v40 + 6 >= v78)
                    {
LABEL_79:
                      swift_bridgeObjectRelease();
                      uint64_t v22 = v54;
                      goto LABEL_5;
                    }

                    id v52 = *(void *)&v79[8 * (void)v55];
                    if (!v52)
                    {
                      while (1)
                      {
                        uint64_t v53 = (int64_t)(v55 + 1);
                        if (__OFADD__(v55, 1LL)) {
                          goto LABEL_82;
                        }
                        if (v53 >= v78) {
                          goto LABEL_79;
                        }
                        id v52 = *(void *)&v79[8 * v53];
                        ++v55;
                        uint64_t v22 = v54;
                        if (v52) {
                          goto LABEL_46;
                        }
                      }
                    }

                    uint64_t v53 = (int64_t)v40 + 6;
                  }
                }
              }
            }
          }

  __break(1u);
  return result;
}

  __break(1u);
}

  char v27 = 0LL;
  id v29 = (void *)0xE000000000000000LL;
  unint64_t v41 = v19;
  if ((a2 & 1) != 0)
  {
LABEL_12:
    swift_bridgeObjectRetain();
    uint64_t v30 = specialized _copyCollectionToContiguousArray<A>(_:)(v27, (unint64_t)v29);
    swift_bridgeObjectRelease();
    uint64_t v53 = v30;
    v51 = &outlined read-only object #0 of URL.appending<A>(path:directoryHint:encodingSlashes:);
    id v52 = &outlined read-only object #1 of URL.appending<A>(path:directoryHint:encodingSlashes:);
    uint64_t v31 = *(void *)(v30 + 16);
    if (v31 < v26)
    {
      __break(1u);
    }

    else
    {
      unint64_t v48 = v29;
      v54 = v30;
      v55 = v30 + 32;
      v56 = v26;
      v57 = (2 * v31) | 1;
      swift_bridgeObjectRetain();
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for ArraySlice<UInt8>);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [UInt8]);
      lazy protocol witness table accessor for type [String] and conformance [A]( (unint64_t *)&lazy protocol witness table cache variable for type ArraySlice<UInt8> and conformance ArraySlice<A>,  (uint64_t *)&demangling cache variable for type metadata for ArraySlice<UInt8>,  MEMORY[0x189618FA8]);
      lazy protocol witness table accessor for type [String] and conformance [A]( &lazy protocol witness table cache variable for type [UInt8] and conformance [A],  &demangling cache variable for type metadata for [UInt8],  MEMORY[0x189618488]);
      RangeReplaceableCollection<>.replace<A, B>(_:with:maxReplacements:)();
      unint64_t v32 = *(void *)(v30 + 16);
      if (v32 >= v26)
      {
        if (v30 + 32 + v26 != v55 + v56) {
          goto LABEL_15;
        }
        if ((uint64_t)(v57 >> 1) < v56)
        {
          __break(1u);
          JUMPOUT(0x18348D00CLL);
        }

        if (v26 == v56 && v32 == v57 >> 1)
        {
          swift_unknownObjectRelease();
        }

        else
        {
LABEL_15:
          specialized Array.replaceSubrange<A>(_:with:)(v26, v32, v54, v55, v56, v57);
          swift_unknownObjectRelease();
        }

        int v33 = v43;
        char v27 = static String._fromUTF8Repairing(_:)();
        id v29 = v34;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
LABEL_21:
        if ((specialized BidirectionalCollection.last.getter(v33, v24) & 0x1FF) == 0x2F
          || (specialized Collection.first.getter(v27, (unint64_t)v29) & 0x1FF) == 0x2F)
        {
          unint64_t v37 = specialized BidirectionalCollection.last.getter(v33, v24);
          swift_bridgeObjectRelease();
          if ((v37 & 0x1FF) == 0x2F
            && (specialized Collection.first.getter(v27, (unint64_t)v29) & 0x1FF) == 0x2F)
          {
            specialized RangeReplaceableCollection<>.popLast()();
            swift_bridgeObjectRelease();
          }
        }

        else
        {
          swift_bridgeObjectRelease();
          v38._countAndFlagsBits = 47LL;
          v38._object = (void *)0xE100000000000000LL;
          String.append(_:)(v38);
        }

        v39._countAndFlagsBits = v27;
        unint64_t v48 = v29;
        v39._object = v29;
        String.append(_:)(v39);
        specialized BidirectionalCollection.last.getter(v49, v50);
        __asm { BR              X9 }
      }
    }

    __break(1u);
    JUMPOUT(0x18348CF70LL);
  }

    if (v6 <= v11 >> 16) {
      goto LABEL_154;
    }
    unint64_t v11 = String.UTF8View._foreignIndex(after:)();
LABEL_24:
    if (v17 == 37)
    {
      if (v9) {
        goto LABEL_150;
      }
LABEL_26:
      if (v36 == v11 >> 14) {
        goto LABEL_150;
      }
      uint64_t v18 = v11 & 0xC;
      uint64_t v19 = v11;
      if (v18 == v8) {
        uint64_t v19 = _StringGuts._slowEnsureMatchingEncoding(_:)(v11, a2, a3);
      }
      uint64_t v20 = v19 >> 16;
      if (v19 >> 16 < v6)
      {
        if ((a3 & 0x1000000000000000LL) != 0)
        {
          unint64_t v17 = String.UTF8View._foreignSubscript(position:)();
          if (v18 == v8) {
            goto LABEL_35;
          }
        }

        else if ((a3 & 0x2000000000000000LL) != 0)
        {
          unint64_t v37 = a2;
          unint64_t v38 = v34;
          unint64_t v17 = *((_BYTE *)&v37 + v20);
          if (v18 == v8) {
            goto LABEL_35;
          }
        }

        else
        {
          uint64_t v21 = v33;
          if ((a2 & 0x1000000000000000LL) == 0) {
            uint64_t v21 = _StringObject.sharedUTF8.getter();
          }
          unint64_t v17 = *(_BYTE *)(v21 + v20);
          if (v18 == v8)
          {
LABEL_35:
            unint64_t v11 = _StringGuts._slowEnsureMatchingEncoding(_:)(v11, a2, a3);
            if ((a3 & 0x1000000000000000LL) != 0)
            {
LABEL_36:
              if (v6 <= v11 >> 16) {
                goto LABEL_154;
              }
              unint64_t v11 = String.UTF8View._foreignIndex(after:)();
LABEL_63:
              if (v17 != 37)
              {
                int v9 = 2LL;
                goto LABEL_65;
              }

  __break(1u);
LABEL_20:
  __break(1u);
LABEL_21:
  __break(1u);
}

  if (v27)
  {
    if (a4)
    {
      if ((*(_DWORD *)&self->_operatorFlags & 4) == 0)
      {
        if ([a4 isNSString])
        {
          if (+[_NSPredicateUtilities _predicateEnforceRestrictionsOnKeyPath:withOperand:forComponentName:]( (uint64_t)&OBJC_CLASS____NSPredicateUtilities,  a4,  (uint64_t)v13,  (uint64_t)@"NSCustomPredicateOperator"))
          {
            objc_opt_self();
            if ((_CFPredicatePolicyData_getFlags() & 8) != 0) {
              +[_NSPredicateUtilities _predicateSecurityAction]();
            }
          }
        }
      }
    }
  }

  Class = object_getClass(a3);
  if (isClass) {
    ClassMethod = class_getClassMethod(Class, v12);
  }
  else {
    ClassMethod = class_getInstanceMethod(Class, v12);
  }
  unint64_t v16 = ClassMethod;
  if (ClassMethod)
  {
    id v29 = 0;
    *(_DWORD *)dst = 0;
    method_getArgumentType(ClassMethod, 2u, dst, 4uLL);
    unint64_t v17 = strnlen(dst, 5uLL);
    if (v17 == 2)
    {
      if (dst[0] != 94 && (dst[0] != 64 || dst[1] != 63))
      {
LABEL_44:
        method_getReturnType(v16, dst, 4uLL);
        if (strnlen(dst, 5uLL) != 1
          || (uint64_t v20 = dst[0] - 66, v20 > 0x31)
          || ((1LL << v20) & 0x2008200020083LL) == 0)
        {
          objc_opt_self();
          if ((_CFPredicatePolicyData_getFlags() & 8) != 0)
          {
            objc_opt_self();
            uint64_t v21 = (os_log_s *)_NSOSLog();
            if (os_log_type_enabled(v21, OS_LOG_TYPE_FAULT))
            {
              if (v12) {
                uint64_t v25 = NSStringFromSelector(v12);
              }
              else {
                uint64_t v25 = (NSString *)@"<unknown>";
              }
              *(_DWORD *)buf = 138412546;
              uint64_t v31 = v25;
              unint64_t v32 = 2080;
              int v33 = dst;
              _os_log_fault_impl( &dword_182EB1000,  v21,  OS_LOG_TYPE_FAULT,  "NSPredicate: Using NSCustomPredicateOperator with selector '%@' and return type '%s' is forbidden",  buf,  0x16u);
            }

            +[_NSPredicateUtilities _predicateSecurityAction]();
          }
        }

        return objc_msgSend(a3, v12, a4);
      }
    }

    else if (v17 != 1 || dst[0] != 42)
    {
      goto LABEL_44;
    }

    objc_opt_self();
    if ((_CFPredicatePolicyData_getFlags() & 8) != 0)
    {
      objc_opt_self();
      uint64_t v18 = (os_log_s *)_NSOSLog();
      if (os_log_type_enabled(v18, OS_LOG_TYPE_FAULT))
      {
        if (v12) {
          uint64_t v24 = NSStringFromSelector(v12);
        }
        else {
          uint64_t v24 = (NSString *)@"<unknown>";
        }
        *(_DWORD *)buf = 138412546;
        uint64_t v31 = v24;
        unint64_t v32 = 2080;
        int v33 = dst;
        _os_log_fault_impl( &dword_182EB1000,  v18,  OS_LOG_TYPE_FAULT,  "NSPredicate: Using NSCustomPredicateOperator with selector '%@' and parameter encoding '%s' is forbidden",  buf,  0x16u);
      }

      +[_NSPredicateUtilities _predicateSecurityAction]();
    }

    if (([a4 isNSData] & 1) != 0 || objc_msgSend(a4, "isNSString"))
    {
      objc_opt_self();
      uint64_t v19 = (os_log_s *)_NSOSLog();
      if (os_log_type_enabled(v19, OS_LOG_TYPE_FAULT))
      {
        if (v12) {
          uint64_t v23 = NSStringFromSelector(v12);
        }
        else {
          uint64_t v23 = (NSString *)@"<unknown>";
        }
        *(_DWORD *)buf = 138412546;
        uint64_t v31 = v23;
        unint64_t v32 = 2080;
        int v33 = dst;
        _os_log_fault_impl( &dword_182EB1000,  v19,  OS_LOG_TYPE_FAULT,  "NSPredicate: Invalid argument passed to NSCustomPredicateOperator with selector '%@' and parameter encoding '% s' expecting pointer",  buf,  0x16u);
      }

      +[_NSPredicateUtilities _predicateSecurityAction]();
    }

    goto LABEL_44;
  }

  return objc_msgSend(a3, v12, a4);
}

    uint64_t v22 = (unint64_t)v4->_lengthAndRefCount >> 20;
    if (v22 >= v20) {
      uint64_t v23 = v20;
    }
    else {
      uint64_t v23 = (unint64_t)v4->_lengthAndRefCount >> 20;
    }
    if (v23)
    {
      uint64_t v24 = v17;
      while (1)
      {
        uint64_t v26 = *characters++;
        uint64_t v25 = v26;
        char v27 = *(unsigned __int16 *)v24;
        v24 += 2;
        uint64_t v28 = v25 >= v27;
        id v29 = v25 == v27;
        if (v25 > v27) {
          uint64_t v19 = 1LL;
        }
        if (!v28) {
          uint64_t v19 = -1LL;
        }
        if (!v29) {
          break;
        }
        if (!--v23) {
          goto LABEL_31;
        }
      }
    }

    else
    {
LABEL_31:
      uint64_t v19 = v20 < v22;
      if (v20 > v22)
      {
LABEL_33:
        uint64_t v4 = +[NSPathStore2 pathStoreWithCharacters:length:]( &OBJC_CLASS___NSPathStore2,  "pathStoreWithCharacters:length:",  v17);
        goto LABEL_34;
      }
    }

    if (v19) {
      goto LABEL_33;
    }
  }

  else
  {
    uint64_t v21 = _NSMethodExceptionProem((objc_class *)v4, a2);
    NSLog((NSString *)@"%@: cannot append extension '%@' to path '%@'", v21, a3, v4);
    uint64_t v4 = 0LL;
  }

    return 0LL;
  }

  uint64_t v6 = (void *)[MEMORY[0x189603FC8] dictionary];
  uint64_t v7 = (void *)[v14 objectForKey:@"NSBundleResourceRequestTags"];
  if (!v7)
  {
    if (a4)
    {
      unint64_t v10 = (void *)MEMORY[0x189603F68];
      unint64_t v11 = @"Manifest has no tags";
      goto LABEL_18;
    }

    goto LABEL_19;
  }

  v13[0] = MEMORY[0x1895F87A8];
  v13[1] = 3221225472LL;
  v13[2] = __53__NSBundleResourceRequest__manifestWithBundle_error___block_invoke;
  v13[3] = &unk_189CA0D38;
  void v13[4] = v6;
  [v7 enumerateKeysAndObjectsUsingBlock:v13];

  return v6;
}

    CFMutableDictionaryRef result = -[NSString _initWithBytesOfUnknownEncoding:length:copy:usedEncoding:]( self,  "_initWithBytesOfUnknownEncoding:length:copy:usedEncoding:");
    goto LABEL_20;
  }

  return result;
}

          unint64_t v13 = 0LL;
          if (a5)
          {
LABEL_14:
            unint64_t v14 = (void *)CFDictionaryGetValue(*(CFDictionaryRef *)(v9 + 64), a5);
            if (!v14) {
              unint64_t v14 = __SlowPathNSXMLParserNSStringFromBytes(*(__CFDictionary **)(v9 + 64), (char *)a5);
            }
            return [v10 parser:v9 foundUnparsedEntityDeclarationWithName:Value publicID:v12 systemID:v13 notationName:v14];
          }

    memmove(a3, &self->_value, v4);
    return;
  }

  if (v3 == 76 || v3 == 81) {
    goto LABEL_15;
  }
  if (v3 == 83)
  {
LABEL_14:
    uint64_t v4 = 2LL;
    goto LABEL_19;
  }

  if (v5 == a4)
  {
    memmove(a3, &self->_value, a4);
    return;
  }

  uint64_t v6 = +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"Cannot get value with size %zu. The type encoded as %s is expected to be %zu bytes",  a4,  "d",  v5);
  objc_exception_throw((id)[MEMORY[0x189603F70] exceptionWithName:*MEMORY[0x189603A60] reason:v6 userInfo:0]);
LABEL_22:
  qword_18C5D6210 = (uint64_t)"Should not be possible to have a non supported type encoding! Please file a radar!";
  __break(1u);
}

  uint64_t v21 = -[NSString rangeOfCharacterFromSet:options:range:]( self->_string,  "rangeOfCharacterFromSet:options:range:",  qword_18C496F10,  0LL,  v7,  v6);
  if (v22) {
    uint64_t v23 = v21 > v7;
  }
  else {
    uint64_t v23 = 0;
  }
  if (!v23 || v21 + v22 >= v7 + v6) {
    goto LABEL_27;
  }
  uint64_t v26 = v21 - v7;
  if (v21 - v7 == 4)
  {
    -[NSString rangeOfString:options:range:](self->_string, "rangeOfString:options:range:", @"entr", 9LL, v7, v6);
    if (!v42) {
      goto LABEL_27;
    }
    uint64_t v36 = 5LL;
  }

  else if (v26 == 2)
  {
    -[NSString rangeOfString:options:range:](self->_string, "rangeOfString:options:range:", @"qu", 9LL, v7, v6);
    if (!v43) {
      goto LABEL_27;
    }
    uint64_t v36 = 3LL;
  }

  else
  {
    if (v26 != 1) {
      goto LABEL_27;
    }
    -[NSString rangeOfString:options:range:](self->_string, "rangeOfString:options:range:", @"c", 9LL, v7, v6);
    if (!v27)
    {
      -[NSString rangeOfString:options:range:](self->_string, "rangeOfString:options:range:", @"d", 9LL, v7, v6);
      if (!v28)
      {
        -[NSString rangeOfString:options:range:](self->_string, "rangeOfString:options:range:", @"j", 9LL, v7, v6);
        if (!v29)
        {
          -[NSString rangeOfString:options:range:]( self->_string,  "rangeOfString:options:range:",  @"l",  9LL,  v7,  v6);
          if (!v30)
          {
            -[NSString rangeOfString:options:range:]( self->_string,  "rangeOfString:options:range:",  @"m",  9LL,  v7,  v6);
            if (!v31)
            {
              -[NSString rangeOfString:options:range:]( self->_string,  "rangeOfString:options:range:",  @"n",  9LL,  v7,  v6);
              if (!v32)
              {
                -[NSString rangeOfString:options:range:]( self->_string,  "rangeOfString:options:range:",  @"s",  9LL,  v7,  v6);
                if (!v33)
                {
                  -[NSString rangeOfString:options:range:]( self->_string,  "rangeOfString:options:range:",  @"t",  9LL,  v7,  v6);
                  if (!v34)
                  {
                    -[NSString rangeOfString:options:range:]( self->_string,  "rangeOfString:options:range:",  @"y",  9LL,  v7,  v6);
                    if (!v35) {
                      goto LABEL_27;
                    }
                  }
                }
              }
            }
          }
        }
      }
    }

    uint64_t v36 = 2LL;
  }

  if ((unint64_t)qword_18C496FA0 <= 0xFFF)
  {
    int v44 = qword_18C496FA8 + 16 * qword_18C496FA0;
    *(_WORD *)int v44 = v7 - location;
    *(_BYTE *)(v44 + 2) = v36;
    *(_BYTE *)(v44 + 3) = 88;
    *(_DWORD *)(v44 + 4) = 0;
    *(void *)(v44 + _Block_object_dispose(va, 8) = 0LL;
    ++qword_18C496FA0;
  }

  -[NSLinguisticTagger _analyzeTokensInWordRange:paragraphRange:]( self,  "_analyzeTokensInWordRange:paragraphRange:",  v36 + v7,  v6 - v36,  location,  length);
}

uint64_t probeGC(void *a1, unint64_t a2, _BYTE *a3, uint64_t *a4, int a5)
{
  uint64_t v35 = *MEMORY[0x1895F89C0];
  uint64_t v7 = a1[3];
  if (*(_BYTE *)(v7 + 1))
  {
    uint64_t v8 = a2;
  }

  else if (*(_BYTE *)v7)
  {
    uint64_t v8 = a2 >> 3;
  }

  else
  {
    uint64_t v8 = (*(uint64_t (**)(unint64_t, void))(v7 + 16))(a2, *(void *)(v7 + 8));
  }

  unint64_t v9 = (0x8D6271D7234E6D5ALL - v8) ^ ((v8 - 0x24FCFFB6D7ECFEF6LL) << 9);
  unint64_t v10 = (0x24FCFFB6D7ECFEF7LL - (v8 + v9)) ^ (v9 >> 8);
  uint64_t v11 = (v8 - 0x24FCFFB6D7ECFEF6LL - (v9 + v10)) ^ (v10 >> 38);
  unint64_t v12 = (v9 - (v10 + v11)) ^ (v11 << 23);
  unint64_t v13 = (v10 - (v11 + v12)) ^ (v12 >> 5);
  uint64_t v14 = (v11 - (v12 + v13)) ^ (v13 >> 35);
  unint64_t v15 = (v12 - (v13 + v14)) ^ (v14 << 49);
  unint64_t v16 = (v13 - (v14 + v15)) ^ (v15 >> 11);
  uint64_t v17 = (v14 - (v15 + v16)) ^ (v16 >> 12);
  uint64_t v18 = ((v16 - (v17 + ((v15 - (v16 + v17)) ^ (v17 << 18)))) ^ (((v15 - (v16 + v17)) ^ (v17 << 18)) >> 22)) & (a1[10] - 1LL);
  uint64_t v32 = v18;
  while (1)
  {
    char v34 = 1;
    uint64_t v19 = a1 + 1;
    uint64_t v20 = a1[4];
    int v21 = *(unsigned __int8 *)(v20 + 4);
    if (!*(_BYTE *)(v20 + 4)) {
      break;
    }
    uint64_t v22 = *(void *)(*v19 + 8 * v18);
    if (v22) {
      goto LABEL_9;
    }
LABEL_12:
    if (v34) {
      return v18;
    }
    if (a5)
    {
      (*(void (**)(uint64_t))(a1[4] + 48LL))(a1[1] + 8 * v18);
      uint64_t v23 = (*(uint64_t (**)(uint64_t, void))(a1[8] + 24LL))(a1[5] + 8 * v18, 0LL);
      uint64_t v24 = v23;
      uint64_t v25 = *(void (**)(uint64_t, void))(a1[6] + 16LL);
      if (v25) {
        BOOL v26 = v23 == 0;
      }
      else {
        BOOL v26 = 1;
      }
      if (!v26) {
        v25(v23, *(void *)(a1[7] + 8LL));
      }
      (*(void (**)(uint64_t))(a1[8] + 32LL))(v24);
      (*(void (**)(uint64_t))(a1[8] + 48LL))(a1[5] + 8 * v18);
      uint64_t v27 = a1[9];
      if (v27) {
        a1[9] = v27 - 1;
      }
      else {
        [a1 raiseCountUnderflowException];
      }
      [a1 rehashAround:v18];
      uint64_t v18 = v32;
    }

    else
    {
LABEL_21:
      if (!v21) {
        (*(void (**)(uint64_t))(a1[4] + 32LL))(v22);
      }
      uint64_t v18 = (a1[10] - 1LL) & (v18 + 1);
    }
  }

  uint64_t v22 = (*(uint64_t (**)(uint64_t, char *))(v20 + 24))(*v19 + 8 * v18, &v34);
  if (!v22) {
    goto LABEL_12;
  }
LABEL_9:
  if (!(*(unsigned int (**)(unint64_t, uint64_t, void))(a1[3] + 24LL))( a2,  v22,  *(void *)(a1[3] + 8LL))) {
    goto LABEL_21;
  }
  if (a3) {
    *a3 = 1;
  }
  if (a4)
  {
    *a4 = v22;
    if (!v21)
    {
      uint64_t v28 = (void (**)(uint64_t))(a1[4] + 40LL);
      goto LABEL_33;
    }
  }

  else if (!v21)
  {
    uint64_t v28 = (void (**)(uint64_t))(a1[4] + 32LL);
LABEL_33:
    (*v28)(v22);
  }

  return v18;
}

uint64_t objectEqual(void *a1, void *a2)
{
  if (a1 == a2) {
    return 1LL;
  }
  else {
    return [a1 isEqual:a2];
  }
}

void *allocateStorageWithSentinel(unint64_t a1)
{
  if (a1 >> 61) {
    return 0LL;
  }
  CFMutableDictionaryRef result = malloc(8 * a1);
  if (result && a1)
  {
    for (uint64_t i = 0LL; i != a1; ++i)
      result[i] = 1LL;
  }

  return result;
}

SEL NSSelectorFromString(SEL aSelectorName)
{
  uint64_t v6 = *MEMORY[0x1895F89C0];
  if (aSelectorName)
  {
    Class v1 = (char *)aSelectorName;
    uint64_t v2 = [(id)aSelectorName length];
    if ([v1 getCString:v5 maxLength:1000 encoding:4] && strlen(v5) == v2)
    {
      uint64_t v3 = v5;
      return sel_registerName(v3);
    }

    if (!v2)
    {
LABEL_9:
      uint64_t v3 = (const char *)[v1 UTF8String];
      return sel_registerName(v3);
    }

    uint64_t v4 = 0LL;
    while ([v1 characterAtIndex:v4])
    {
      if (v2 == ++v4) {
        goto LABEL_9;
      }
    }

    return 0LL;
  }

  return aSelectorName;
}

NSString *__cdecl NSStringFromClass(Class aClass)
{
  if (aClass && (Name = class_getName(aClass)) != 0LL) {
    return  -[NSString initWithBytesNoCopy:length:encoding:freeWhenDone:]( objc_alloc(&OBJC_CLASS___NSString),  "initWithBytesNoCopy:length:encoding:freeWhenDone:",  Name,  strlen(Name),  4LL,  0LL);
  }
  else {
    return 0LL;
  }
}

uint64_t bytesInEncoding(void *a1, uint64_t a2, int a3, int a4, unsigned int a5)
{
  uint64_t v25 = *MEMORY[0x1895F89C0];
  unint64_t v10 = [a1 length];
  unint64_t v11 = v10;
  uint64_t v12 = a5;
  uint64_t v13 = 4LL;
  if (a4) {
    uint64_t v13 = 6LL;
  }
  uint64_t v14 = v13 | a5;
  if (v10 <= 0xA5
    && (objc_msgSend( a1,  "getBytes:maxLength:usedLength:encoding:options:range:remainingRange:",  bytes,  1000,  &v23,  a2,  v13 | v12,  0,  v10,  0) & 1) != 0)
  {
    uint64_t v15 = v23;
    bytes[v23] = 0;
    unint64_t v16 = CFDataCreate(0LL, bytes, v15 + 1);
    BytePtr = CFDataGetBytePtr(v16);
    uint64_t v18 = v16;
    if (BytePtr) {
      return (uint64_t)BytePtr;
    }
  }

  if (objc_msgSend( a1,  "getBytes:maxLength:usedLength:encoding:options:range:remainingRange:",  0,  0x7FFFFFFFFFFFFFFELL,  &v23,  a2,  v14,  0,  v11,  0))
  {
    uint64_t v19 = objc_msgSend((id)objc_msgSend(MEMORY[0x189603FB8], "dataWithLength:", v23 + 1), "mutableBytes");
    if (v19)
    {
      BytePtr = (const UInt8 *)v19;
      if (objc_msgSend( a1,  "getBytes:maxLength:usedLength:encoding:options:range:remainingRange:",  v19,  v23,  bytes,  a2,  v14,  0,  v11,  0))
      {
        if (*(void *)bytes == v23)
        {
          BytePtr[*(void *)bytes] = 0;
          return (uint64_t)BytePtr;
        }
      }
    }
  }

  if (!a3) {
    return 0LL;
  }
  int v21 = (void *)MEMORY[0x189603F70];
  uint64_t v22 = +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"Conversion to encoding %ld failed",  a2);
  objc_exception_throw((id)objc_msgSend( v21,  "exceptionWithName:reason:userInfo:",  @"NSCharacterConversionException",  v22,  objc_msgSend( MEMORY[0x189603F68],  "dictionaryWithObjectsAndKeys:",  a1,  @"_NSString",  0)));
  return -[NSArray(NSArray) classForCoder]();
}

NSString *__cdecl NSStringFromSelector(SEL aSelector)
{
  if (aSelector && (Name = sel_getName(aSelector)) != 0LL) {
    return  -[NSString initWithBytesNoCopy:length:encoding:freeWhenDone:]( objc_alloc(&OBJC_CLASS___NSString),  "initWithBytesNoCopy:length:encoding:freeWhenDone:",  Name,  strlen(Name),  4LL,  0LL);
  }
  else {
    return 0LL;
  }
}

void *retainingAcquire(void *a1, const char *a2, int a3)
{
  if (a3) {
    return (void *)[a1 copy];
  }
  else {
    return a1;
  }
}

uint64_t storePointerAt(uint64_t result, uint64_t a2, uint64_t a3)
{
  *(void *)(result + 8 * a2) = a3;
  return result;
}

void *__cdecl NSMapGet(NSMapTable *table, const void *key)
{
  if (!table) {
    NSLog( (NSString *)@"%s: map table argument is NULL",  "void * _Nullable NSMapGet(NSMapTable * _Nonnull, const void * _Nullable)");
  }
  return -[NSMapTable objectForKey:](table, "objectForKey:", key);
}

uint64_t CFBasicHashFindBucket@<X0>(uint64_t result@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3 = *(void *)(result + 16);
  if ((v3 & 0x3F0000) != 0)
  {
    int v4 = v3 & 3;
    switch(v4)
    {
      case 3:
        return ___CFBasicHashFindBucket3(result, a2, 0, (unint64_t *)a3);
      case 2:
        return ___CFBasicHashFindBucket2(result, a2, 0, (unint64_t *)a3);
      case 1:
        return ___CFBasicHashFindBucket1(result, a2, 0, (unint64_t *)a3);
      default:
        __break(1u);
        break;
    }
  }

  else
  {
    uint64_t v5 = (*(__int128 *)(result + 16) >> 32) & 0xFFFFFF0000000000LL;
    *(void *)a3 = -1LL;
    *(void *)(a3 + _Block_object_dispose(va, 8) = v5;
    *(void *)(a3 + 16) = v5;
    *(_OWORD *)(a3 + 24) = 0u;
    *(_OWORD *)(a3 + 40) = 0u;
  }

  return result;
}

unint64_t ___CFBasicHashFindBucket1@<X0>( uint64_t a1@<X0>, unint64_t a2@<X1>, int a3@<W2>, unint64_t *a4@<X8>)
{
  unint64_t result = (**(uint64_t (***)(void))(a1 + 32))();
  unint64_t v8 = *(void *)(a1 + 16);
  if ((v8 & 0x18) != 0)
  {
    uint64_t v9 = (v8 >> 3) & 3;
    if (!v9) {
      goto LABEL_52;
    }
    unint64_t v10 = (uint64_t *)(a1 + 8 * v9 + 40);
  }

  else
  {
    unint64_t v10 = (uint64_t *)(a1 + 40);
  }

  uint64_t v11 = *v10;
  if ((v8 & 0xE000) != 0)
  {
    if ((unsigned __int16)v8 >> 13)
    {
      uint64_t v12 = *(void *)(a1 + 8LL * ((unsigned __int16)v8 >> 13) + 40);
      goto LABEL_9;
    }

LABEL_52:
    __break(1u);
    return result;
  }

  uint64_t v12 = 0LL;
LABEL_9:
  uint64_t v13 = (v8 >> 16) & 0x3F;
  unint64_t v14 = __CFBasicHashTableSizes[v13];
  unint64_t v15 = (*(__int128 *)(a1 + 16) >> 32) & 0xFFFFFF0000000000LL;
  *a4 = -1LL;
  a4[1] = ~v15;
  a4[2] = 0LL;
  a4[3] = ~v15;
  a4[5] = 0LL;
  a4[6] = 0LL;
  a4[4] = 0LL;
  if (!v13 || v13 == 63) {
    return result;
  }
  unint64_t v16 = result % v14;
  if (v14 <= 1) {
    uint64_t v17 = 1LL;
  }
  else {
    uint64_t v17 = v14;
  }
  uint64_t v18 = -1LL;
  while (1)
  {
    unint64_t v19 = *(void *)(v11 + 8 * v16);
    if (v19 == v15)
    {
      if (v18 == -1)
      {
        a4[3] = v15;
        *a4 = v16;
        a4[1] = v15;
      }

      return result;
    }

    if (a3) {
      goto LABEL_17;
    }
    if (v19 == ~v15)
    {
      if (v18 == -1)
      {
        *a4 = v16;
        uint64_t v18 = v16;
      }

      goto LABEL_17;
    }

    if (v19 == a2) {
      break;
    }
    if (!v12 || *(void *)(v12 + 8 * v16) == result)
    {
      uint64_t v32 = v12;
      unint64_t v33 = result;
      uint64_t v31 = v18;
      char v20 = (**(uint64_t (***)(uint64_t, uint64_t, unint64_t, uint64_t))(a1 + 32))(a1, 20LL, v19, a2);
      uint64_t v18 = v31;
      uint64_t v12 = v32;
      BOOL v21 = v20 == 0LL;
      unint64_t result = v33;
      if (!v21) {
        goto LABEL_34;
      }
    }

    char v34 = a1 + 16;
    goto LABEL_53;
  }

  uint64_t v13 = *(void *)(a1 + 16);
  return __NSIndexSetEnumerateBitfield(v13, a2, a3, a4, a5);
}

          v80 = (4 * *(_BYTE *)(v79 + 18) + 8) & 0x3C;
          v77 = ((-15LL << v80) - 1) & v77 | (v81 << v80);
          v70 = *(void *)(v79 + 24 + 24 * v81);
          swift_unknownObjectRetain();
          unint64_t result = swift_unknownObjectRelease();
          v79 = v70;
          if (!*(_BYTE *)(v70 + 18)) {
            goto LABEL_85;
          }
        }
      }

      swift_unknownObjectRetain_n();
      outlined retain of AttributedString.Runs((uint64_t)&v248);
      unint64_t result = swift_unknownObjectRetain();
      v78 = v35;
      v70 = v69;
LABEL_85:
      v92 = *(unsigned __int16 *)(v70 + 16);
      if (*(_WORD *)(v70 + 16))
      {
        v93 = v78 - 1;
        if (__OFSUB__(v78, 1LL)) {
          goto LABEL_171;
        }
        if (__OFADD__(v93, 1LL)) {
          goto LABEL_172;
        }
        if (v78 <= 0)
        {
          v92 = 0LL;
          goto LABEL_117;
        }

        if ((_DWORD)v92 != 1)
        {
          v83 = __OFSUB__(v93, 1LL);
          v93 = v78 - 2;
          if (v83) {
            goto LABEL_175;
          }
          if (__OFADD__(v93, 1LL)) {
            goto LABEL_176;
          }
          if (v78 - 1 < 1)
          {
            v92 = 1LL;
            goto LABEL_117;
          }

          if ((_DWORD)v92 != 2)
          {
            v83 = __OFSUB__(v93, 1LL);
            v93 = v78 - 3;
            if (v83) {
              goto LABEL_177;
            }
            if (__OFADD__(v93, 1LL)) {
              goto LABEL_178;
            }
            if (v78 - 2 >= 1)
            {
              if ((_DWORD)v92 != 3)
              {
                v94 = 0LL;
                v95 = 3LL;
                if (v92 > 3) {
                  v95 = *(unsigned __int16 *)(v70 + 16);
                }
                v96 = v95 - 3;
                if (v93 >= v92 - 4) {
                  v97 = v92 - 4;
                }
                else {
                  v97 = v78 - 3;
                }
                if (v97 >= v78 + 0x7FFFFFFFFFFFFFFDLL) {
                  v97 = v78 + 0x7FFFFFFFFFFFFFFDLL;
                }
                while (v96 > v97)
                {
                  if (v78 + 0x7FFFFFFFFFFFFFFDLL == v94) {
                    goto LABEL_174;
                  }
                  if (v93 == v94)
                  {
                    v92 = v78;
                    goto LABEL_117;
                  }

                  if (v92 - 3 == ++v94)
                  {
                    v93 -= v94;
                    goto LABEL_111;
                  }
                }

        uint64_t v28 = (v35 - 1) & v35;
        char v34 = __clz(__rbit64(v35)) + (v30 << 6);
      }

      unint64_t v37 = (uint64_t *)(*(void *)(v93 + 48) + 16 * v34);
      unint64_t v38 = *v37;
      unint64_t v39 = v37[1];
      Hasher.init(_seed:)();
      swift_bridgeObjectRetain();
      String.hash(into:)();
      uint64_t v40 = Hasher._finalize()();
      unint64_t v41 = -1LL << *(_BYTE *)(v27 + 32);
      int v42 = v40 & ~v41;
      unint64_t v43 = v42 >> 6;
      if (((-1LL << v42) & ~*(void *)(v29 + 8 * (v42 >> 6))) != 0)
      {
        uint64_t v31 = __clz(__rbit64((-1LL << v42) & ~*(void *)(v29 + 8 * (v42 >> 6)))) | v42 & 0x7FFFFFFFFFFFFFC0LL;
        goto LABEL_35;
      }

      int v44 = 0;
      unint64_t v45 = (unint64_t)(63 - v41) >> 6;
      do
      {
        if (++v43 == v45 && (v44 & 1) != 0)
        {
          __break(1u);
LABEL_139:
          __break(1u);
LABEL_140:
          __break(1u);
LABEL_141:
          __break(1u);
LABEL_142:
          __break(1u);
LABEL_143:
          __break(1u);
LABEL_144:
          __break(1u);
LABEL_145:
          __break(1u);
LABEL_146:
          __break(1u);
LABEL_147:
          __break(1u);
          goto LABEL_148;
        }

        unint64_t v46 = v43 == v45;
        if (v43 == v45) {
          unint64_t v43 = 0LL;
        }
        v44 |= v46;
        unint64_t v47 = *(void *)(v29 + 8 * v43);
      }

      while (v47 == -1);
      uint64_t v31 = __clz(__rbit64(~v47)) + (v43 << 6);
LABEL_35:
      *(void *)(v29 + ((v31 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v31;
      uint64_t v32 = (void *)(*(void *)(v27 + 48) + 16 * v31);
      *uint64_t v32 = v38;
      v32[1] = v39;
      ++*(void *)(v27 + 16);
      unint64_t v26 = (unint64_t *)((char *)v26 - 1);
      if (!v26) {
        goto LABEL_131;
      }
    }
  }

  return v9;
}

    swift_once();
    goto LABEL_23;
  }

  v140 = *(void *)(v30 + 8);
  unint64_t v33 = v149;
  char v34 = v147;
  uint64_t v35 = (_OWORD *)AttributedStringProtocol.__guts.getter(v149, v147);
  uint64_t v36 = v35[1];
  unint64_t v37 = v35[3];
  v155[1] = v35[2];
  v155[2] = v37;
  v155[0] = v36;
  unint64_t v38 = v35[1];
  v156[1] = v35[2];
  v156[2] = v37;
  v156[0] = v38;
  outlined init with take of any PredicateExpression<Self.Output == B1>(v156, (uint64_t)v157);
  outlined retain of Locale((uint64_t)v157);
  swift_release();
  (*(void (**)(void *__return_ptr, ValueMetadata *, uint64_t))(v34 + 32))(v152, v33, v34);
  unint64_t v39 = (ValueMetadata *)v152[0];
  uint64_t v40 = v152[1];
  unint64_t v41 = v152[2];
  int v42 = v152[3];
  (*(void (**)(_OWORD *__return_ptr, ValueMetadata *, uint64_t))(v34 + 40))(v154, v33, v34);
  v148 = v40;
  v149 = v39;
  *(void *)v150 = v39;
  *(void *)&v150[8] = v40;
  v147 = v41;
  *(void *)&v150[16] = v41;
  *(void *)&v150[24] = v42;
  v139 = v42;
  *(_OWORD *)&v150[32] = v154[0];
  *(_OWORD *)&v150[48] = v154[1];
  BigString.subscript.getter();
  unint64_t v43 = MEMORY[0x186E1B6C4](v152);
  unint64_t v45 = v44;
  *(void *)&v154[0] = v43;
  *((void *)&v154[0] + 1) = v44;
  StringProtocol._ephemeralString.getter();
  lazy protocol witness table accessor for type String and conformance String();
  StringProtocol._ephemeralString.getter();
  unint64_t v46 = (void *)String._bridgeToObjectiveCImpl()();
  swift_bridgeObjectRelease();
  unint64_t v47 = String._bridgeToObjectiveCImpl()();
  swift_bridgeObjectRelease();
  if ((v45 & 0x2000000000000000LL) != 0) {
    unint64_t v48 = HIBYTE(v45) & 0xF;
  }
  else {
    unint64_t v48 = v43 & 0xFFFFFFFFFFFFLL;
  }
  v145 = v48;
  v146 = v43;
  unint64_t v49 = (v45 & 0x1000000000000000LL) == 0 || (v43 & 0x800000000000000LL) != 0;
  unint64_t v50 = (unint64_t)v154;
  v51 = StringProtocol._toUTF16Offsets(_:)();
  v54 = (id)(v53 - v51);
  if (__OFSUB__(v53, v51))
  {
    __break(1u);
LABEL_42:
    __break(1u);
    goto LABEL_43;
  }

  v55 = v51;
  ObjectType = swift_getObjectType();
  v57 = (void *)(*(uint64_t (**)(uint64_t))(v140 + 488))(ObjectType);
  v54 = objc_msgSend(v46, sel_rangeOfString_options_range_locale_, v47, v143, v55, v54, v57);
  unint64_t v50 = v58;
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();

  id v52 = 0x7FFFFFFFFFFFFFFFLL;
  if (v54 == (id)0x7FFFFFFFFFFFFFFFLL)
  {
    outlined release of Locale((uint64_t)v155);
LABEL_15:
    unint64_t result = swift_bridgeObjectRelease();
    v74 = v142;
    *v142 = 0LL;
    v74[1] = 0LL;
    v74[2] = 0LL;
    v74[3] = 2LL;
    *((_OWORD *)v74 + 2) = 0u;
    *((_OWORD *)v74 + 3) = 0u;
    return result;
  }

  if (__OFADD__(v54, v50)) {
    goto LABEL_42;
  }
  unint64_t result = StringProtocol._toUTF16Indices(_:)();
  id v52 = result;
  unint64_t v50 = v75;
  v54 = (id)(4LL << v49);
  if ((result & 0xC) != 4LL << v49)
  {
    v76 = result >> 16;
    if ((v45 & 0x1000000000000000LL) == 0) {
      goto LABEL_19;
    }
    goto LABEL_44;
  }

  unint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

        uint64_t v5 = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  *(void *)(v5 + 16) + 1LL,  1,  (void *)v5);
        goto LABEL_45;
      }

      swift_bridgeObjectRelease();
      unint64_t v8 = v6;
      if (v36 >= v39) {
        goto LABEL_44;
      }
LABEL_49:
      __break(1u);
LABEL_50:
      __break(1u);
LABEL_51:
      __break(1u);
      goto LABEL_52;
    }

    break;
  }

  __break(1u);
LABEL_54:
  __break(1u);
LABEL_55:
  __break(1u);
  return result;
}

    outlined release of URLComponents((uint64_t)&v75);
  }

  else
  {
    outlined retain of URLComponents((uint64_t)&v75);
    unint64_t v37 = URLComponents._URLComponents.computedString.getter();
    unint64_t v39 = v38;
    outlined release of URLComponents((uint64_t)&v75);
    uint64_t v5 = v62;
    if (!v39) {
      goto LABEL_52;
    }
    swift_bridgeObjectRelease();
    outlined release of URLComponents((uint64_t)&v75);
    uint64_t v5 = v37;
    uint64_t v7 = v39;
  }

    unint64_t v38 = (v53 - 1) & v53;
    uint64_t v40 = __clz(__rbit64(v53)) + (v35 << 6);
LABEL_29:
    unint64_t v41 = (_OWORD *)(*(void *)(v12 + 48) + 176 * v40);
    int v42 = v41[3];
    unint64_t v43 = v41[4];
    int v44 = v41[6];
    v65[5] = v41[5];
    v65[6] = v44;
    v65[3] = v42;
    v65[4] = v43;
    unint64_t v45 = v41[7];
    unint64_t v46 = v41[8];
    unint64_t v47 = v41[9];
    *(_OWORD *)&v66[12] = *(_OWORD *)((char *)v41 + 156);
    v65[8] = v46;
    *(_OWORD *)v66 = v47;
    v65[7] = v45;
    unint64_t v49 = v41[1];
    unint64_t v48 = v41[2];
    v65[0] = *v41;
    v65[1] = v49;
    v65[2] = v48;
    unint64_t v50 = 8 * v40;
    v51 = *(void *)(*(void *)(v12 + 56) + 8 * v40);
    memmove((void *)(*(void *)(v28 + 48) + 176 * v40), v41, 0xACuLL);
    *(void *)(*(void *)(v28 + 56) + v50) = v51;
    outlined retain of ICUByteCountNumberFormatter.Signature((uint64_t)v65);
    unint64_t result = (char *)swift_retain();
  }

  v54 = v52 + 7;
  if (v54 >= v61) {
    goto LABEL_53;
  }
  v55 = v17;
  uint64_t v53 = *(void *)&__srca[8 * v54];
  if (v53)
  {
    uint64_t v35 = v54;
    goto LABEL_52;
  }

  while (1)
  {
    uint64_t v35 = v54 + 1;
    if (__OFADD__(v54, 1LL)) {
      break;
    }
    uint64_t v17 = v55;
    if (v35 >= v61) {
      goto LABEL_53;
    }
    uint64_t v53 = *(void *)&__srca[8 * v35];
    ++v54;
    if (v53) {
      goto LABEL_52;
    }
  }

    unint64_t v38 = (v53 - 1) & v53;
    uint64_t v40 = __clz(__rbit64(v53)) + (v35 << 6);
LABEL_29:
    unint64_t v41 = (_OWORD *)(*(void *)(v12 + 48) + 176 * v40);
    int v42 = v41[3];
    unint64_t v43 = v41[4];
    int v44 = v41[6];
    v65[5] = v41[5];
    v65[6] = v44;
    v65[3] = v42;
    v65[4] = v43;
    unint64_t v45 = v41[7];
    unint64_t v46 = v41[8];
    unint64_t v47 = v41[9];
    *(_OWORD *)&v66[12] = *(_OWORD *)((char *)v41 + 156);
    v65[8] = v46;
    *(_OWORD *)v66 = v47;
    v65[7] = v45;
    unint64_t v49 = v41[1];
    unint64_t v48 = v41[2];
    v65[0] = *v41;
    v65[1] = v49;
    v65[2] = v48;
    unint64_t v50 = 8 * v40;
    v51 = *(void *)(*(void *)(v12 + 56) + 8 * v40);
    memmove((void *)(*(void *)(v28 + 48) + 176 * v40), v41, 0xACuLL);
    *(void *)(*(void *)(v28 + 56) + v50) = v51;
    outlined retain of ICUByteCountNumberFormatter.Signature((uint64_t)v65);
    unint64_t result = (char *)swift_retain();
  }

  v54 = v52 + 7;
  if (v54 >= v61) {
    goto LABEL_53;
  }
  v55 = v17;
  uint64_t v53 = *(void *)&__srca[8 * v54];
  if (v53)
  {
    uint64_t v35 = v54;
    goto LABEL_52;
  }

  while (1)
  {
    uint64_t v35 = v54 + 1;
    if (__OFADD__(v54, 1LL)) {
      break;
    }
    uint64_t v17 = v55;
    if (v35 >= v61) {
      goto LABEL_53;
    }
    uint64_t v53 = *(void *)&__srca[8 * v35];
    ++v54;
    if (v53) {
      goto LABEL_52;
    }
  }

      if (v13)
      {
LABEL_82:
        __break(1u);
        return result;
      }

      goto LABEL_53;
    }
  }

  unint64_t v19 = swift_unknownObjectRetain_n();
  char v20 = specialized Rope._endPath.getter(v19);
  unint64_t result = (unint64_t *)swift_unknownObjectRelease();
  BOOL v21 = 0LL;
  uint64_t v13 = 0LL;
  if (v11)
  {
LABEL_19:
    swift_unknownObjectRetain();
    unint64_t v22 = v16;
    unint64_t v23 = v17;
    unint64_t v24 = specialized Rope._Node.distanceFromStart<A>(to:in:)(v17, v20, v21, v11, v22);
    unint64_t result = (unint64_t *)swift_unknownObjectRelease_n();
    goto LABEL_55;
  }

  unint64_t v23 = v17;
  unint64_t v24 = 0LL;
LABEL_55:
  if (__OFSUB__(v83, v13))
  {
LABEL_75:
    __break(1u);
    goto LABEL_76;
  }

  unint64_t v41 = *(_OWORD *)(v4 + 88);
  v92 = *(_OWORD *)(v4 + 72);
  v93 = v41;
  int v42 = *(_OWORD *)(v4 + 120);
  v94 = *(_OWORD *)(v4 + 104);
  v95 = v42;
  unint64_t v43 = *(_OWORD *)(v4 + 24);
  v88 = *(_OWORD *)(v4 + 8);
  v89 = v43;
  int v44 = *(_OWORD *)(v4 + 56);
  v90 = *(_OWORD *)(v4 + 40);
  v105[0] = v23;
  v105[1] = v20;
  v105[2] = v21;
  v105[3] = v24;
  v105[4] = v83 - v13;
  v87 = v10;
  v91 = v44;
  v96 = v82;
  v97 = v86;
  v98 = v15;
  v99 = v85;
  v100 = v79;
  v101 = v78;
  AttributedString.Runs._firstOfMatchingRuns(with:comparing:)(v105, a2, v102);
  unint64_t v45 = *(_OWORD *)(v10 + 32);
  v104[3] = *(_OWORD *)(v10 + 16);
  v104[4] = v45;
  v104[5] = *(_OWORD *)(v10 + 48);
  unint64_t result = (unint64_t *)BigString.utf8.getter();
  if (__OFSUB__(v102[4], v80))
  {
LABEL_76:
    __break(1u);
LABEL_77:
    __break(1u);
LABEL_78:
    __break(1u);
LABEL_79:
    __break(1u);
    goto LABEL_80;
  }

  unint64_t v46 = (__int128 *)(v10 + 16);
  unint64_t v47 = BigString.UTF8View.index(_:offsetBy:)();
  unint64_t v49 = v48;
  v51 = v50;
  uint64_t v53 = v52;
  unint64_t result = (unint64_t *)outlined release of Locale((uint64_t)v103);
  if (v77 >= v47 >> 10) {
    v54 = v82;
  }
  else {
    v54 = v47;
  }
  v55 = *v46;
  v56 = v46[2];
  v104[1] = v46[1];
  v104[2] = v56;
  v104[0] = v55;
  if (v76 < v54 >> 10) {
    goto LABEL_77;
  }
  v57 = v85;
  unint64_t v58 = v86;
  if (v77 < v47 >> 10)
  {
    v57 = v53;
    unint64_t v58 = v49;
  }

  v87 = v54;
  *(void *)&v88 = v58;
  int v59 = v84;
  if (v77 < v47 >> 10) {
    int v59 = v51;
  }
  *((void *)&v88 + 1) = v59;
  *(void *)&v89 = v57;
  *((void *)&v89 + 1) = v73;
  *(void *)&v90 = v75;
  *((void *)&v90 + 1) = v74;
  *(void *)&v91 = v14;
  uint64_t v60 = *v46;
  v61 = v46[2];
  v106[1] = v46[1];
  v106[2] = v61;
  v106[0] = v60;
  outlined init with take of any PredicateExpression<Self.Output == B1>(v106, (uint64_t)v107);
  outlined retain of Locale((uint64_t)v107);
  v62 = BigString._lastConstraintBreak(in:with:)(&v87, a3);
  v64 = v63;
  v66 = v65;
  v68 = v67;
  unint64_t result = (unint64_t *)outlined release of Locale((uint64_t)v104);
  *v72 = v62;
  v72[1] = v64;
  v72[2] = v66;
  v72[3] = v68;
  return result;
}

    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    v212 = v29 & 0xFFFFFFFFFFFFF0FFLL | (v40 << 8);
    unint64_t v16 = v194;
    unint64_t v22 = (uint64_t)v216;
    goto LABEL_18;
  }

          unint64_t v10 = v45;
          uint64_t v13 = countAndFlagsBits;
          if (v45 >= v9)
          {
LABEL_53:
            unint64_t v48 = 0;
            if (countAndFlagsBits == 39) {
              goto LABEL_54;
            }
            goto LABEL_55;
          }

  v106 = type metadata accessor for NSMorphologyPronoun(0LL, &lazy cache variable for type metadata for NSExpression);
  v133 = v106;
  *(void *)&v132 = v74;
  v107 = String._bridgeToObjectiveCImpl()();
  v108 = v74;
  v109 = objc_msgSend(v68, sel__newKeyPathExpressionForString_, v107);
  swift_unknownObjectRelease();
  if (v109)
  {
    *((void *)&v130 + 1) = v106;
    *(void *)&v129 = v109;
  }

  else
  {
    v129 = 0u;
    v130 = 0u;
  }

  v110 = objc_allocWithZone((Class)&OBJC_CLASS___NSKeyPathExpression);
  unint64_t result = (uint64_t)@nonobjc NSKeyPathExpression.init(operand:andKeyPath:)(&v132, &v129);
  if (result)
  {
    v75 = (id)result;
    goto LABEL_57;
  }

    __break(1u);
    goto LABEL_53;
  }

  swift_bridgeObjectRetain();
  v69 = String.subscript.getter();
  v71 = v70;
  v73 = v72;
  v75 = v74;
  swift_bridgeObjectRelease();
  v116[0] = 64LL;
  v116[1] = 0xE100000000000000LL;
  v76 = Substring.init<A>(_:)();
  if ((v69 ^ v71) < 0x4000 || !((v76 ^ v77) >> 14))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v53 = v112;
    goto LABEL_40;
  }

  specialized _StringCompareOptionsIterable._range<A>(of:toHalfWidth:diacriticsInsensitive:caseFold:anchored:backwards:)( v76,  v77,  v78,  v79,  0,  0,  0,  0,  0,  v69,  v71,  v73,  v75);
  v81 = v80;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v53 = v112;
  if ((v81 & 1) != 0)
  {
LABEL_41:
    v87 = [v62 v64[185]];
    v88 = static String._unconditionallyBridgeFromObjectiveC(_:)(v87);
    v90 = v89;

    *(void *)&v121 = v88;
    *((void *)&v121 + 1) = v90;
    v91._countAndFlagsBits = 46LL;
    v91._object = (void *)0xE100000000000000LL;
    String.append(_:)(v91);
    v92._countAndFlagsBits = 0x746E756F6340LL;
    v92._object = (void *)0xE600000000000000LL;
    String.append(_:)(v92);
    v93 = String._bridgeToObjectiveCImpl()();
    swift_bridgeObjectRelease();
    v63 = objc_msgSend(v53, sel_expressionForKeyPath_, v93);
    goto LABEL_42;
  }

  swift_bridgeObjectRelease();
  unint64_t v19 = v87;
  if ((v3 & 1) != 0)
  {
LABEL_16:
    uint64_t v27 = (void *)(*(void *)(v25 + 56) + 16 * v19);
    swift_unknownObjectRelease();
    *uint64_t v27 = v16;
    v27[1] = v15;
    goto LABEL_55;
  }

    v56 = (void *)static _DictionaryStorage.allocate(capacity:)();
    for (j = 0LL; j != 256; j += 16LL)
    {
      unint64_t v58 = outlined read-only object #1 of _CalendarBridged.range(of:in:for:)[j + 32];
      if (v58 == 18) {
        break;
      }
      int v59 = *(void *)&outlined read-only object #1 of _CalendarBridged.range(of:in:for:)[j + 40];
      uint64_t v60 = specialized __RawDictionaryStorage.find<A>(_:)(outlined read-only object #1 of _CalendarBridged.range(of:in:for:)[j + 32]);
      if ((v61 & 1) != 0) {
        goto LABEL_92;
      }
      *(void *)((char *)v56 + ((v60 >> 3) & 0x1FFFFFFFFFFFFFF8LL) + 64) |= 1LL << v60;
      *(_BYTE *)(v56[6] + v60) = v58;
      *(void *)(v56[7] + 8 * v60) = v59;
      v62 = v56[2];
      unint64_t v19 = __OFADD__(v62, 1LL);
      v63 = v62 + 1;
      if (v19) {
        goto LABEL_93;
      }
      v56[2] = v63;
    }

    v64 = 0LL;
    v65 = 0LL;
    v66 = 1LL << *(_BYTE *)(v44 + 32);
    v67 = *(void *)(v44 + 56);
    v68 = -1LL;
    if (v66 < 64) {
      v68 = ~(-1LL << v66);
    }
    v69 = v68 & v67;
    v70 = (unint64_t)(v66 + 63) >> 6;
    if ((v68 & v67) == 0) {
      goto LABEL_62;
    }
LABEL_60:
    v71 = __clz(__rbit64(v69));
    v69 &= v69 - 1;
    v72 = v71 | (v64 << 6);
    if (v56[2])
    {
      while (1)
      {
        v76 = specialized __RawDictionaryStorage.find<A>(_:)(*(unsigned __int8 *)(*(void *)(v44 + 48) + v72));
        if ((v77 & 1) == 0) {
          goto LABEL_87;
        }
        v78 = *(void *)(v56[7] + 8 * v76);
        if ((v78 & ~v65) == 0) {
          v78 = 0LL;
        }
        v65 |= v78;
        if (v69) {
          goto LABEL_60;
        }
LABEL_62:
        v73 = v64 + 1;
        if (__OFADD__(v64, 1LL)) {
          goto LABEL_91;
        }
        if (v73 >= v70)
        {
LABEL_81:
          swift_release();
          swift_release();
          v79 = objc_msgSend(objc_allocWithZone(MEMORY[0x189603F50]), sel_initWithTimeIntervalSinceReferenceDate_, v6);
          v80 = objc_msgSend(v83, sel_rangeOfUnit_inUnit_forDate_, v30, v65, v79);
          v82 = v81;

          if (v80 != (id)0x7FFFFFFFFFFFFFFFLL && __OFADD__(v80, v82)) {
            goto LABEL_98;
          }
          return;
        }

        v74 = *(void *)(v45 + 8 * v73);
        ++v64;
        if (!v74)
        {
          v64 = v73 + 1;
          if (v73 + 1 >= v70) {
            goto LABEL_81;
          }
          v74 = *(void *)(v45 + 8 * v64);
          if (!v74)
          {
            v64 = v73 + 2;
            if (v73 + 2 >= v70) {
              goto LABEL_81;
            }
            v74 = *(void *)(v45 + 8 * v64);
            if (!v74)
            {
              v75 = v73 + 3;
              if (v75 >= v70) {
                goto LABEL_81;
              }
              v74 = *(void *)(v45 + 8 * v75);
              if (!v74)
              {
                while (1)
                {
                  v64 = v75 + 1;
                  if (__OFADD__(v75, 1LL)) {
                    goto LABEL_95;
                  }
                  if (v64 >= v70) {
                    goto LABEL_81;
                  }
                  v74 = *(void *)(v45 + 8 * v64);
                  ++v75;
                  if (v74) {
                    goto LABEL_75;
                  }
                }
              }

              v64 = v75;
            }
          }
        }

            __break(1u);
LABEL_53:
            __break(1u);
LABEL_54:
            __break(1u);
          }

          uint64_t v32 = v43;
        }
      }
    }

              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease_n();
              return 0LL;
            }

  if (v53 != 1)
  {
    Hasher._combine(_:)(1u);
    if (v53)
    {
      Hasher._combine(_:)(1u);
      outlined copy of Locale.Subdivision??(v26, v53);
      swift_bridgeObjectRetain();
      String.hash(into:)();
      swift_bridgeObjectRelease();
      outlined consume of Locale.Subdivision??(v26, v53);
      if (v43) {
        goto LABEL_54;
      }
    }

    else
    {
      Hasher._combine(_:)(0);
      outlined consume of Locale.Subdivision??(v26, 0LL);
      if (v43) {
        goto LABEL_54;
      }
    }

            v62 = v93;
LABEL_53:
            if (v62) {
              goto LABEL_153;
            }
            goto LABEL_54;
          }

          v90 = 2LL;
        }
      }

          uint64_t v30 = (v39 - 1) & v39;
          unint64_t v33 = __clz(__rbit64(v39)) + (v27 << 6);
        }

        char v34 = 8 * v33;
        uint64_t v35 = *(void *)(*(void *)(v4 + 48) + 8 * v33);
        uint64_t v36 = 16 * v33;
        unint64_t v37 = *(_OWORD *)(*(void *)(v4 + 56) + v36);
        *(void *)(*(void *)(v22 + 48) + v34) = v35;
        *(_OWORD *)(*(void *)(v22 + 56) + v36) = v37;
        unint64_t result = swift_unknownObjectRetain();
      }
    }

  unint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

    __src[20] = v14;
    LOBYTE(__src[21]) = v15;
    return memcpy(a3, __src, 0x11AuLL);
  }

  if (!v44)
  {
LABEL_72:
    __break(1u);
    goto LABEL_73;
  }

  char v20 = *((void *)&v64 + 1);
  unint64_t result = specialized Rope._Node._prepareModify(at:)(*((unint64_t *)&v64 + 1), (uint64_t)&v67);
  v63[0] = v67;
  v63[1] = v68;
  v63[2] = v69;
  unint64_t v49 = v57 - *((void *)&v67 + 1);
  if (__OFSUB__(v57, *((void *)&v67 + 1))) {
    goto LABEL_66;
  }
  if (__OFADD__(*((void *)&v67 + 1), v51))
  {
LABEL_67:
    __break(1u);
LABEL_68:
    __break(1u);
    goto LABEL_69;
  }

  *((void *)&v63[0] + 1) = *((void *)&v67 + 1) + v51;
  BOOL v21 = v45 + 1;
  v61[3] = v45 + 1;
  if (*v61)
  {
    uint64_t v31 = specialized Rope._Node._finalizeModify(_:)(&v62, v63);
    swift_bridgeObjectRelease();
    unint64_t result = swift_bridgeObjectRelease();
    unint64_t v48 = v56 - 1;
    if (!__OFSUB__(v56, 1LL))
    {
      unint64_t v50 = a1;
      goto LABEL_42;
    }

    goto LABEL_68;
  }

    unint64_t v37 = (uint64_t *)(v15 + 64);
    goto LABEL_53;
  }

  v89 = v10;
  v91 = a5;
  if (a8 == -1)
  {
    int v42 = a7;
    unint64_t v43 = a4 & 0x3FFFFFFFFFFFFFFFLL;
    swift_retain();
    unint64_t v33 = v91;
    goto LABEL_29;
  }

  v88 = a6;
  unint64_t v19 = swift_allocObject();
  *(void *)(v19 + 40) = &type metadata for _CodingKey;
  *(void *)(v19 + 4_Block_object_dispose(va, 8) = lazy protocol witness table accessor for type _CodingKey and conformance _CodingKey();
  uint64_t v32 = swift_allocObject();
  *(void *)(v19 + 16) = v32;
  unint64_t v33 = v91;
  *(void *)(v32 + 16) = v91;
  *(void *)(v32 + 24) = v88;
  *(void *)(v32 + 32) = v13;
  *(_BYTE *)(v32 + 40) = a8;
  *(void *)(v19 + 56) = v15;
  if (!(v15 >> 62))
  {
    char v34 = (uint64_t *)(v15 + 64);
LABEL_27:
    int v44 = *v34;
    swift_retain();
    unint64_t v33 = v91;
    unint64_t v45 = v44 + 1;
    if (__OFADD__(v44, 1LL))
    {
      __break(1u);
      goto LABEL_52;
    }

    goto LABEL_28;
  }

  if (v15 >> 62 == 1)
  {
    char v34 = (uint64_t *)((v15 & 0x3FFFFFFFFFFFFFFFLL) + 32);
    goto LABEL_27;
  }

  unint64_t v45 = 1LL;
LABEL_28:
  int v42 = v13;
  *(void *)(v19 + 64) = v45;
  unint64_t v43 = v19 & 0x3FFFFFFFFFFFFFFFLL;
  unint64_t v15 = v19;
  unint64_t v14 = v88;
LABEL_29:
  v91 = *((void *)v11 + 20);
  *((void *)v11 + 20) = v15;
  unint64_t v19 = *((void *)v11 + 2);
  outlined copy of _CodingKey?(v33, v14, v42, a8);
  swift_retain();
  unint64_t v46 = swift_isUniquelyReferenced_nonNull_native();
  *((void *)v11 + 2) = v19;
  unint64_t v47 = v43;
  if ((v46 & 1) == 0) {
    goto LABEL_89;
  }
  while (1)
  {
    unint64_t v10 = v89;
    uint64_t v13 = *(void *)(v19 + 16);
    unint64_t v48 = *(void *)(v19 + 24);
    if (v13 >= v48 >> 1) {
      unint64_t v19 = (unint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (void *)(v48 > 1),  v13 + 1,  1,  (void *)v19);
    }
    *(void *)(v19 + 16) = v13 + 1;
    unint64_t v49 = v19 + 32 + 24 * v13;
    *(void *)unint64_t v49 = v17;
    *(void *)(v49 + _Block_object_dispose(va, 8) = v16;
    *(_BYTE *)(v49 + 16) = (_BYTE)v8;
    *((void *)v11 + 2) = v19;
    unint64_t v50 = *(void *)(v19 + 16);
    if (!v50)
    {
      __break(1u);
      goto LABEL_91;
    }

    v51 = v19 + 32 + 24 * v50;
    uint64_t v13 = *(void *)(v51 - 24);
    unint64_t v19 = *(void *)(v51 - 16);
    id v52 = *(unsigned __int8 *)(v51 - 8);
    if (v52 >> 5 != 4) {
      break;
    }
    unint64_t v16 = v47;
    unint64_t v58 = *((void *)v11 + 20);
    unint64_t v8 = (__int128 *)*((void *)v11 + 4);
    v96 = &unk_189C8F8C0;
    v97 = lazy protocol witness table accessor for type JSONDecoderImpl.UnkeyedContainer and conformance JSONDecoderImpl.UnkeyedContainer();
    int v59 = swift_allocObject();
    v95[0] = v59;
    *(void *)(v59 + 16) = v11;
    *(void *)(v59 + 24) = v13;
    *(void *)(v59 + 40) = 0LL;
    *(void *)(v59 + 4_Block_object_dispose(va, 8) = 0LL;
    *(void *)(v59 + 32) = v8;
    *(_BYTE *)(v59 + 56) = -2;
    *(void *)(v59 + 64) = v19;
    *(_BYTE *)(v59 + 72) = 0;
    *(void *)(v59 + 80) = 0LL;
    *(void *)(v59 + 8_Block_object_dispose(va, 8) = v58;
    uint64_t v60 = __swift_project_boxed_opaque_existential_1(v95, (uint64_t)&unk_189C8F8C0);
    swift_retain();
    swift_retain_n();
    swift_retain();
    LOBYTE(v_Block_object_dispose(va, 8) = v60;
    v61 = dispatch thunk of UnkeyedDecodingContainer.count.getter();
    if ((v62 & 1) != 0) {
      goto LABEL_69;
    }
    uint64_t v17 = v61;
    *(void *)&v94 = specialized Data._Representation.init(count:)(v61);
    *((void *)&v94 + 1) = v63;
    if (v17 < 0) {
      goto LABEL_105;
    }
    unint64_t v47 = v16;
    if (!v17) {
      goto LABEL_70;
    }
    v64 = 0LL;
    while (v17 != v64)
    {
      unint64_t v19 = (unint64_t)v96;
      uint64_t v13 = v97;
      __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v95, (uint64_t)v96);
      dispatch thunk of UnkeyedDecodingContainer.decode(_:)();
      if (v89) {
        goto LABEL_79;
      }
      unint64_t v8 = &v94;
      Data._Representation.subscript.setter();
      unint64_t v19 = ++v64;
      if (v17 == v64) {
        goto LABEL_70;
      }
    }

    __break(1u);
LABEL_89:
    unint64_t v19 = (unint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  *(void *)(v19 + 16) + 1LL,  1,  (void *)v19);
    *((void *)v11 + 2) = v19;
  }

  uint64_t v53 = v52 >> 5 == 5 && (v19 | v13) == 0;
  if (v53 && v52 == 160)
  {
    v65 = type metadata accessor for DecodingError();
    swift_allocError();
    v67 = v66;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
    *v67 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Any]);
    v68 = *((void *)v11 + 20);
    unint64_t v19 = v68 & 0x3FFFFFFFFFFFFFFFLL;
    swift_retain();
    swift_retain();
    uint64_t v13 = _CodingPathNode.path.getter(v68);
    swift_release();
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(uint64_t *, void, uint64_t))(*(void *)(v65 - 8) + 104LL))( v67,  *MEMORY[0x189619368],  v65);
    swift_willThrow();
    swift_release();
    goto LABEL_80;
  }

  type metadata accessor for DecodingError();
  swift_allocError();
  _BYTE *v54 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Any]);
  v55 = *((void *)v11 + 20);
  swift_retain();
  swift_retain();
  unint64_t v19 = _CodingPathNode.path.getter(v55);
  swift_release();
  v92 = 0LL;
  v93 = 0xE000000000000000LL;
  BOOL v21 = &v92;
  _StringGuts.grow(_:)(43LL);
  swift_bridgeObjectRelease();
  v92 = 0xD000000000000028LL;
  v93 = 0x80000001839D2CB0LL;
  v56 = *((void *)v11 + 2);
  if (*(void *)(v56 + 16)) {
    __asm { BR              X10 }
  }

          v57 = (v64 - 1) & v64;
          v62 = __clz(__rbit64(v64)) + (v60 << 6);
          if (v59[2])
          {
LABEL_53:
            v66 = v152;
            v67 = (uint64_t *)(*(void *)(v152 + 48) + 16 * v62);
            v68 = *v67;
            v69 = v67[1];
            swift_bridgeObjectRetain();
            v70 = specialized __RawDictionaryStorage.find<A>(_:)(v68, v69);
            if ((v71 & 1) != 0)
            {
              v72 = (uint64_t *)(v59[7] + 16 * v70);
              v73 = *v72;
              v74 = v72[1];
              v125 = v69;
              v123 = (void *)String._bridgeToObjectiveCImpl()();
              AssociatedTypeWitness = swift_getAssociatedTypeWitness();
              v124 = v105;
              v126 = *(void *)(AssociatedTypeWitness - 8);
              v127 = AssociatedTypeWitness;
              v76 = *(void *)(v126 + 64);
              v77 = MEMORY[0x1895F8858](AssociatedTypeWitness);
              v128 = (void *)((char *)v105 - v78);
              v79 = (*(uint64_t (**)(uint64_t, uint64_t, __n128))(v74 + 24))(v73, v74, v77);
              if (*(void *)(v66 + 16)
                && (v81 = specialized __RawDictionaryStorage.find<A>(_:)(v79, v80), (v82 & 1) != 0))
              {
                outlined init with copy of AttributedString._AttributeValue( *(void *)(v152 + 56) + 72 * v81,  (uint64_t)&v130);
              }

              else
              {
                v134 = 0LL;
                v132 = 0u;
                v133 = 0u;
                v130 = 0u;
                v131 = 0u;
              }

              v83 = v127;
              swift_bridgeObjectRelease();
              if (!*((void *)&v131 + 1)) {
                goto LABEL_95;
              }
              outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>( (uint64_t)&v130,  (uint64_t)&v129);
              __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Hashable & Sendable);
              v84 = v128;
              swift_dynamicCast();
              outlined destroy of AttributedString._AttributeValue((uint64_t)&v130);
              v85 = swift_conformsToProtocol2();
              if (v85) {
                v86 = v85;
              }
              else {
                v86 = 0LL;
              }
              if (v85) {
                v87 = v73;
              }
              else {
                v87 = 0LL;
              }
              if (v87)
              {
                v121 = v105;
                v88 = MEMORY[0x1895F8858](v85);
                (*(void (**)(char *, uint64_t *, uint64_t, __n128))(v126 + 16))( (char *)v105 - ((v76 + 15) & 0xFFFFFFFFFFFFFFF0LL),  v84,  v83,  v88);
                v89 = swift_getAssociatedTypeWitness();
                v120 = v105;
                v90 = *(void *)(v89 - 8);
                MEMORY[0x1895F8858](v89);
                v92 = (char *)v105 - v91;
                swift_dynamicCast();
                v93 = v122;
                v94 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v86 + 24))(v92, v87, v86);
                v122 = v93;
                if (v93)
                {
                  (*(void (**)(char *, uint64_t))(v90 + 8))(v92, v89);
                  swift_unknownObjectRelease();
                  (*(void (**)(uint64_t *, uint64_t))(v126 + 8))(v128, v127);
                  v102 = v119;
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  swift_willThrow();

                  swift_bridgeObjectRelease();
                  swift_release();
                  swift_release();
                  swift_unknownObjectRelease();
                  return (uint64_t)v102;
                }

                v95 = v94;
                (*(void (**)(char *, uint64_t))(v90 + 8))(v92, v89);
                unint64_t v58 = v118;
                v83 = v127;
                v96 = v128;
              }

              else
              {
                isClassOrObjCExistentialType = _swift_isClassOrObjCExistentialType();
                unint64_t v58 = v118;
                if ((isClassOrObjCExistentialType & 1) != 0)
                {
                  if (v76 != 8) {
                    goto LABEL_89;
                  }
                  v96 = v128;
                  v95 = *v128;
                  swift_unknownObjectRetain();
                }

                else
                {
                  v98 = MEMORY[0x1895F8858](isClassOrObjCExistentialType);
                  v96 = v128;
                  (*(void (**)(char *, uint64_t *, uint64_t, __n128))(v126 + 16))( (char *)v105 - ((v76 + 15) & 0xFFFFFFFFFFFFFFF0LL),  v128,  v83,  v98);
                  v95 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)();
                }
              }

              (*(void (**)(uint64_t *, uint64_t))(v126 + 8))(v96, v83);
              v135[3] = swift_getObjectType();
              v135[0] = v95;
              specialized Dictionary.subscript.setter((uint64_t)v135, v123);
              swift_bridgeObjectRelease();
              v54 = v117;
              int v59 = v119;
            }

            else
            {
              swift_bridgeObjectRelease();
            }
          }
        }
      }
    }

    unint64_t v37 = *(unsigned __int8 *)(v12 + 18);
    unint64_t v38 = (4 * v37 + 8) & 0x3C;
    *(void *)&v130 = (v20 >> v38) & 0xF;
    if (v37)
    {
      swift_unknownObjectRetain();
      unint64_t v39 = specialized closure #1 in Rope._Node.formSuccessor(of:)(v12 + 24, (uint64_t *)&v130, (uint64_t)v107, v12, v37);
      swift_unknownObjectRelease();
      if ((v39 & 1) != 0) {
        goto LABEL_25;
      }
      unint64_t v41 = *(unsigned __int8 *)(v12 + 18);
    }

    else
    {
      uint64_t v40 = ((v20 >> v38) & 0xF) + 1;
      if (v40 < *(unsigned __int16 *)(v12 + 16))
      {
        v142 = (v40 << v38) | ((-15LL << v38) - 1) & v20;
        swift_unknownObjectRelease_n();
        v143 = v12;
        goto LABEL_31;
      }

      unint64_t v41 = 0;
    }

    int v42 = *(unsigned __int16 *)(v12 + 16);
    unint64_t v43 = *(_BYTE *)(v12 + 18);
    swift_unknownObjectRelease_n();
    v141 = v123;
    v142 = ((-15LL << ((4 * v43 + 8) & 0x3C)) - 1) & v41 | (unint64_t)(v42 << ((4 * v43 + 8) & 0x3C));
    v143 = 0LL;
    goto LABEL_31;
  }

  __break(1u);
LABEL_53:
  unint64_t result = outlined destroy of AttributedString._AttributeValue?((uint64_t)&v71);
  __break(1u);
  return result;
}

  *(void *)a2 = 0LL;
  *(void *)(a2 + _Block_object_dispose(va, 8) = 0LL;
  *(_BYTE *)(a2 + 16) = 1;
}

        ++v8;
      }
    }

    char v20 = *v19;
    BOOL v21 = v20 ^ (unint64_t)self;
    if ((~(_BYTE)v21 & 7) != 0) {
      unint64_t v22 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v22 = 0xFFFFFFFFFFFFFLL;
    }
    location = v22 & (v21 >> 3);
    if (!location) {
      goto LABEL_33;
    }
LABEL_30:
    if ((*(_BYTE *)&self->super._indexSetFlags & 1) != 0) {
      location = 1LL;
    }
    else {
      location = *(void *)(v18->_singleRange._range.location + 8);
    }
    goto LABEL_33;
  }

  unint64_t result = *(void *)(a1 + 48) + *(void *)(a1 + 56);
  *(void *)(a1 + 40) = result;
  return result;
}

LABEL_17:
    if (v16 + 1 < v14) {
      ++v16;
    }
    else {
      unint64_t v16 = v16 + 1 - v14;
    }
    if (!--v17) {
      return result;
    }
  }

  unint64_t v19 = a2;
LABEL_34:
  *a4 = v16;
  unint64_t v22 = *(void *)(a1 + 16);
  unint64_t v23 = v19;
  if ((v22 & 0x18) != 0) {
    unint64_t v23 = *(void *)(*(void *)(a1 + 40) + 8 * v16);
  }
  a4[3] = v23;
  if ((v22 & 4) != 0) {
    unint64_t v24 = *(void *)(*(void *)(a1 + 48) + 8 * v16);
  }
  else {
    unint64_t v24 = 0LL;
  }
  a4[4] = v24;
  a4[1] = v19;
  if ((v22 & 0x60) != 0)
  {
    uint64_t v25 = (v22 >> 5) & 3;
    if (!v25) {
      goto LABEL_52;
    }
    unint64_t v26 = *(void *)(*(void *)(a1 + 8 * v25 + 40) + 8 * v16);
  }

  else
  {
    unint64_t v26 = 0LL;
  }

  a4[2] = v26;
  if ((v22 & 0x380) != 0)
  {
    uint64_t v27 = (v22 >> 7) & 7;
    if (!v27) {
      goto LABEL_52;
    }
    uint64_t v28 = *(void *)(*(void *)(a1 + 8 * v27 + 40) + 8 * v16);
  }

  else
  {
    uint64_t v28 = 1LL;
  }

  a4[5] = v28;
  if ((v22 & 0x1C00) != 0)
  {
    uint64_t v29 = (v22 >> 10) & 7;
    if (!v29) {
      goto LABEL_52;
    }
    uint64_t v30 = *(void *)(*(void *)(a1 + 8 * v29 + 40) + 8 * v16);
  }

  else
  {
    uint64_t v30 = 1LL;
  }

  a4[6] = v30;
  return result;
}

  uint64_t v6 = *a1;
  uint64_t v7 = v6 >= 3;
  unint64_t v8 = v6 - 3;
  if (!v7) {
    unint64_t v8 = -1;
  }
  return (v8 + 1);
}

  uint64_t v6 = *a1;
  uint64_t v7 = v6 >= 2;
  unint64_t v8 = v6 - 2;
  if (!v7) {
    unint64_t v8 = -1;
  }
  return (v8 + 1);
}

      Hasher._combine(_:)(1u);
      Hasher._combine(_:)(v12 + 1);
LABEL_21:
      if (v17 == 2)
      {
        Hasher._combine(_:)(0);
      }

      else
      {
        Hasher._combine(_:)(1u);
        Hasher._combine(_:)((v17 & 1) + 1LL);
      }

      if (v18 == 2)
      {
        Hasher._combine(_:)(0);
      }

      else
      {
        Hasher._combine(_:)(1u);
        Hasher._combine(_:)((v18 & 1) + 1LL);
      }

      swift_bridgeObjectRelease();
      swift_bridgeObjectRetain();
      specialized Optional<A>.hash(into:)(a1, v9, v10, (v19 | (v20 << 32)) & 0xFFFFFFFFFFLL);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease_n();
      v5 += 16;
      --v21;
    }

    while (v21);
  }

  uint64_t v6 = *a1;
  uint64_t v7 = v6 >= 4;
  unint64_t v8 = v6 - 4;
  if (!v7) {
    unint64_t v8 = -1;
  }
  return (v8 + 1);
}

    swift_bridgeObjectRelease();
    *((void *)&v123[1] + 1) = v14;
    *(void *)&v123[2] = v15;
    v121 = 2;
    uint64_t v27 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    uint64_t v30 = v27;
    uint64_t v31 = v28;
    BYTE8(v122) = 0;
    BYTE11(v122) = 0;
    if (!v28) {
      goto LABEL_33;
    }
    if ((v28 & 0x1000000000000000LL) != 0)
    {
      v115 = v7;
      v119 = v27;
      v120 = v28;
      lazy protocol witness table accessor for type String and conformance String();
      swift_bridgeObjectRetain();
      StringProtocol._ephemeralString.getter();
      v95 = (void *)String._bridgeToObjectiveCImpl()();
      swift_bridgeObjectRelease();
      v96 = (unsigned __int16 *)objc_msgSend(v95, sel__fastCharacterContents);
      v97 = v95;
      if (v96)
      {
        v98 = v96;
        v119 = v30;
        v120 = v31;
        StringProtocol._ephemeralString.getter();
        v99 = (void *)String._bridgeToObjectiveCImpl()();
        swift_bridgeObjectRelease();
        v100 = (uint64_t)objc_msgSend(v99, sel_length);
        swift_unknownObjectRelease();
        LOBYTE(v100) = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)( v98,  v100,  2u,  0);
      }

      else
      {
        v100 = specialized Sequence.allSatisfy(_:)(v30, v31, 2);
      }

      char v34 = swift_bridgeObjectRelease();
      uint64_t v7 = v115;
      if ((v100 & 1) != 0) {
        goto LABEL_33;
      }
    }

    else
    {
      if ((v28 & 0x2000000000000000LL) != 0)
      {
        unint64_t v33 = HIBYTE(v28) & 0xF;
        v119 = v27;
        v120 = v31 & 0xFFFFFFFFFFFFFFLL;
        uint64_t v32 = (char *)&v119;
      }

      else if ((v27 & 0x1000000000000000LL) != 0)
      {
        uint64_t v32 = (char *)((v28 & 0xFFFFFFFFFFFFFFFLL) + 32);
        unint64_t v33 = v30 & 0xFFFFFFFFFFFFLL;
      }

      else
      {
        uint64_t v32 = (char *)_StringObject.sharedUTF8.getter();
      }

      char v34 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v32, v33, 2u, 0);
      if ((v34 & 1) != 0) {
        goto LABEL_33;
      }
    }

    uint64_t v35 = HIBYTE(v31) & 0xF;
    if ((v31 & 0x2000000000000000LL) == 0) {
      uint64_t v35 = v30 & 0xFFFFFFFFFFFFLL;
    }
    if (v35)
    {
      v119 = v30;
      v120 = v31;
      MEMORY[0x1895F8858](v34);
      v113 = (uint64_t)&v119;
      LOBYTE(v114) = 2;
      swift_bridgeObjectRetain();
      uint64_t v36 = specialized String.UTF8View.withContiguousStorageIfAvailable<A>(_:)( (void *(*)(void *__return_ptr, void *, uint64_t))partial apply for specialized closure #1 in StringProtocol.addingPercentEncoding(forURLComponent:),  (uint64_t)(&v115 - 4),  v30,  v31);
      if (v37)
      {
        uint64_t v30 = (uint64_t)v36;
        unint64_t v38 = v37;
        swift_bridgeObjectRelease_n();
        uint64_t v31 = v38;
      }

      else
      {
        uint64_t v40 = v119;
        unint64_t v39 = v120;
        swift_bridgeObjectRetain();
        uint64_t v30 = specialized StringProtocol.addingPercentEncoding<A>(utf8Buffer:component:)(v40, v39, 2u);
        int v42 = v41;
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease();
        uint64_t v31 = v42;
      }
    }

    else
    {
      swift_bridgeObjectRelease();
      uint64_t v30 = 0LL;
      uint64_t v31 = 0xE000000000000000LL;
    }

  uint64_t v6 = *a1;
  uint64_t v7 = v6 >= 8;
  unint64_t v8 = v6 - 8;
  if (!v7) {
    unint64_t v8 = -1;
  }
  return (v8 + 1);
}

  uint64_t v6 = *a1;
  uint64_t v7 = v6 >= 9;
  unint64_t v8 = v6 - 9;
  if (!v7) {
    unint64_t v8 = -1;
  }
  return (v8 + 1);
}

        unint64_t result = specialized Rope._UnsafeHandle._seekForwardInLeaf<A>(from:by:in:preferEnd:)( (unint64_t *)(v7 + 8),  a2,  v8 & 1,  (unsigned __int16 *)(v9 + 16));
        if ((result & 1) != 0)
        {
LABEL_20:
          *(void *)(v7 + 16) = v9;
          return result;
        }

        goto LABEL_18;
      }

      return result;
    }
  }

  else
  {
    if (!v11) {
      return result;
    }
    __break(1u);
  }

  unint64_t v15 = __OFSUB__(0LL, v11);
  unint64_t v16 = -v11;
  if (v15)
  {
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }

  *a2 = v16;
  if (v16 > 0 || (v8 & 1) != 0)
  {
    if (*(_BYTE *)(a4 + 18))
    {
      uint64_t v12 = a4 + 16;
      swift_unknownObjectRetain();
      uint64_t v7 = specialized closure #2 in Rope._Node.seekBackward<A>(from:by:in:preferEnd:)( v9 + 16,  v9 + 24,  v7,  v9,  a2,  v8 & 1);
      unint64_t result = swift_unknownObjectRelease();
      if ((v7 & 1) != 0) {
        return result;
      }
      __break(1u);
      goto LABEL_17;
    }

    unint64_t result = specialized Rope._UnsafeHandle._seekBackwardInLeaf<A>(from:by:in:preferEnd:)( (unint64_t *)(v7 + 8),  a2,  v8 & 1);
    if ((result & 1) == 0)
    {
      __break(1u);
LABEL_24:
      __break(1u);
      goto LABEL_25;
    }
  }

  return result;
}

  uint64_t v6 = *a1;
  uint64_t v7 = v6 >= 0x12;
  unint64_t v8 = v6 - 18;
  if (!v7) {
    unint64_t v8 = -1;
  }
  return (v8 + 1);
}

  JUMPOUT(0x182F9A7FCLL);
}

  uint64_t v6 = *a1;
  uint64_t v7 = v6 >= 0xB;
  unint64_t v8 = v6 - 11;
  if (!v7) {
    unint64_t v8 = -1;
  }
  return (v8 + 1);
}

  uint64_t v6 = *a1;
  uint64_t v7 = v6 >= 5;
  unint64_t v8 = v6 - 5;
  if (!v7) {
    unint64_t v8 = -1;
  }
  return (v8 + 1);
}

  uint64_t v6 = *a1;
  uint64_t v7 = v6 >= 6;
  unint64_t v8 = v6 - 6;
  if (!v7) {
    unint64_t v8 = -1;
  }
  return (v8 + 1);
}

  uint64_t v6 = *(unsigned __int8 *)a1;
  uint64_t v7 = v6 >= 3;
  unint64_t v8 = v6 - 3;
  if (!v7) {
    unint64_t v8 = -1;
  }
  return (v8 + 1);
}

      __break(1u);
      return result;
    }
  }

          char v20 = type metadata accessor for EncodingError();
          swift_allocError();
          unint64_t v22 = v31;
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Any, EncodingError.Context));
          v22[3] = a2;
          uint64_t v32 = __swift_allocate_boxed_opaque_existential_1(v22);
          (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(a2 - 8) + 16LL))(v32, a1, a2);
          unint64_t v50 = 0LL;
          v51 = 0xE000000000000000LL;
          _StringGuts.grow(_:)(54LL);
          v33._countAndFlagsBits = 0x6576656C2D706F54LL;
          v33._object = (void *)0xEA0000000000206CLL;
          String.append(_:)(v33);
          v34._countAndFlagsBits = _typeName(_:qualified:)();
          String.append(_:)(v34);
          swift_bridgeObjectRelease();
          uint64_t v27 = 0x80000001839CAA30LL;
          uint64_t v3 = &v50;
          unint64_t v26 = 0xD00000000000002ALL;
LABEL_18:
          String.append(_:)(*(Swift::String *)&v26);
          DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
          uint64_t v35 = *MEMORY[0x1896193B8];
          uint64_t v36 = *(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v20 - 8) + 104LL);
          unint64_t v37 = v22;
        }

        v36(v37, v35, v20);
LABEL_22:
        swift_willThrow();
        swift_release();
        break;
      default:
        goto LABEL_19;
    }
  }

  return v3;
}

      memcpy(a1, a2, v11);
      return a1;
    }

    (*(void (**)(void *, void *, uint64_t))(v6 + 24))(a1, a2, v5);
  }

  return a1;
}

      memcpy(a1, a2, v11);
      return a1;
    }

    (*(void (**)(void *, void *, uint64_t))(v6 + 40))(a1, a2, v5);
  }

  return a1;
}

    __break(1u);
LABEL_18:
    __break(1u);
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }

  uint64_t v9 = *(void *)((a3 & 0xFFFFFFFFFFFFFF8LL) + 0x10);
  if (v9 > a2)
  {
    __break(1u);
    goto LABEL_17;
  }

  if (v8 + 32 >= a1 + 8 * v9 || v8 + 32 + 8 * v9 <= a1)
  {
    type metadata accessor for _BPlistEncodingFormat.Reference();
    swift_arrayInitWithCopy();
    return a3;
  }

  swift_bridgeObjectRelease();
  if (*((_BYTE *)v2 + 8) != 1) {
    goto LABEL_20;
  }
  uint64_t v7 = 10LL;
  unint64_t v8 = 0xE100000000000000LL;
  specialized String.withUTF8<A>(_:)(&v7);
  swift_bridgeObjectRelease();
  if (__OFSUB__(*v2, 1LL))
  {
LABEL_22:
    __break(1u);
    JUMPOUT(0x182FE8E88LL);
  }

  --*v2;
  JSONWriter.writeIndent()();
LABEL_20:
  uint64_t v7 = 93LL;
  unint64_t v8 = 0xE100000000000000LL;
  specialized String.withUTF8<A>(_:)(&v7);
  swift_bridgeObjectRelease();
}

  uint64_t v6 = *a1;
  uint64_t v7 = v6 >= 0xE;
  unint64_t v8 = v6 - 14;
  if (!v7) {
    unint64_t v8 = -1;
  }
  return (v8 + 1);
}

  uint64_t v13 = MEMORY[0x186E1C36C](v12, v10);
LABEL_12:
  swift_bridgeObjectRelease();
  if (*(_BYTE *)(v13 + 32) == 4)
  {
LABEL_13:
    unint64_t v14 = type metadata accessor for _JSONKeyedEncodingContainer(0LL, a2, a3, v9);
    swift_retain();
    swift_retain();
    MEMORY[0x186E20D4C](&protocol conformance descriptor for _JSONKeyedEncodingContainer<A>, v14);
    return KeyedEncodingContainer.init<A>(_:)();
  }

  uint64_t v5 = MEMORY[0x186E1C36C](v9, v7);
LABEL_12:
  swift_bridgeObjectRelease();
  if (*(_BYTE *)(v5 + 32) == 3)
  {
LABEL_13:
    unint64_t v10 = v2[18];
    a1[3] = &unk_189C763D8;
    a1[4] = lazy protocol witness table accessor for type _JSONUnkeyedEncodingContainer and conformance _JSONUnkeyedEncodingContainer();
    *a1 = v2;
    a1[1] = v5;
    a1[2] = v10;
    swift_retain();
    return swift_retain();
  }

      uint64_t v36 = *(void *)(v59 + 56);
      uint64_t v9 = 8 * v10;
      swift_release();
      *(void *)(v36 + 8 * v10) = v6;
LABEL_18:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      unint64_t v10 = v109;
      unint64_t v37 = *(void *)(v109 + 16);
      unint64_t v38 = *(void *)(v109 + 24);
      *(void *)(v109 + 16) = v59;
      *(void *)(v10 + 24) = 0LL;
      unint64_t v39 = *(_BYTE *)(v10 + 32);
      *(_BYTE *)(v10 + 32) = 4;
      outlined consume of JSONReference.Backing(v37, v38, v39);
      swift_release();
      swift_bridgeObjectRelease();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v113);
      uint64_t v35 = v111;
      uint64_t v6 = v112;
      continue;
    }

    break;
  }

  if ((isUniquelyReferenced_nonNull_native & 1) != 0)
  {
    int v59 = v7;
    uint64_t v7 = v52;
    if ((v55 & 1) == 0) {
      goto LABEL_43;
    }
    goto LABEL_17;
  }

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, JSONReference>);
  v67 = static _DictionaryStorage.copy(original:)();
  int v59 = v67;
  v68 = *(void *)(v7 + 16);
  if (!v68)
  {
LABEL_92:
    swift_bridgeObjectRelease();
    uint64_t v7 = v52;
    if ((v9 & 1) == 0) {
      goto LABEL_43;
    }
    goto LABEL_17;
  }

  v69 = (void *)(v67 + 64);
  v70 = (unint64_t)((1LL << *(_BYTE *)(v59 + 32)) + 63) >> 6;
  if (v59 != v7 || (unint64_t)v69 >= v7 + 64 + 8 * v70)
  {
    memmove(v69, (const void *)(v7 + 64), 8 * v70);
    v68 = *(void *)(v7 + 16);
  }

  v95 = v7 + 64;
  v71 = 0LL;
  *(void *)(v59 + 16) = v68;
  v72 = 1LL << *(_BYTE *)(v7 + 32);
  if (v72 < 64) {
    v73 = ~(-1LL << v72);
  }
  else {
    v73 = -1LL;
  }
  v74 = v73 & *(void *)(v7 + 64);
  v96 = (unint64_t)(v72 + 63) >> 6;
  while (2)
  {
    if (v74)
    {
      v75 = __clz(__rbit64(v74));
      v74 &= v74 - 1;
      v97 = v71;
      v76 = v75 | (v71 << 6);
LABEL_65:
      v77 = 16 * v76;
      v78 = (void *)(*(void *)(v7 + 48) + 16 * v76);
      v79 = v78[1];
      v80 = 8 * v76;
      v81 = *(void *)(*(void *)(v7 + 56) + v80);
      v82 = (void *)(*(void *)(v59 + 48) + v77);
      *v82 = *v78;
      v82[1] = v79;
      *(void *)(*(void *)(v59 + 56) + v80) = v81;
      swift_bridgeObjectRetain();
      swift_retain();
      v71 = v97;
      continue;
    }

    break;
  }

  v83 = v71 + 1;
  if (__OFADD__(v71, 1LL)) {
    goto LABEL_123;
  }
  if (v83 >= v96) {
    goto LABEL_92;
  }
  v84 = *(void *)(v95 + 8 * v83);
  v85 = v71 + 1;
  if (v84) {
    goto LABEL_90;
  }
  v85 = v71 + 2;
  if (v71 + 2 >= v96) {
    goto LABEL_92;
  }
  v84 = *(void *)(v95 + 8 * v85);
  if (v84) {
    goto LABEL_90;
  }
  v85 = v71 + 3;
  if (v71 + 3 >= v96) {
    goto LABEL_92;
  }
  v84 = *(void *)(v95 + 8 * v85);
  if (v84) {
    goto LABEL_90;
  }
  v85 = v71 + 4;
  if (v71 + 4 >= v96) {
    goto LABEL_92;
  }
  v84 = *(void *)(v95 + 8 * v85);
  if (v84) {
    goto LABEL_90;
  }
  v85 = v71 + 5;
  if (v71 + 5 >= v96) {
    goto LABEL_92;
  }
  v84 = *(void *)(v95 + 8 * v85);
  if (v84) {
    goto LABEL_90;
  }
  v85 = v71 + 6;
  if (v71 + 6 >= v96) {
    goto LABEL_92;
  }
  v84 = *(void *)(v95 + 8 * v85);
  if (v84) {
    goto LABEL_90;
  }
  v85 = v71 + 7;
  if (v71 + 7 >= v96) {
    goto LABEL_92;
  }
  v84 = *(void *)(v95 + 8 * v85);
  if (v84) {
    goto LABEL_90;
  }
  v85 = v71 + 8;
  if (v71 + 8 >= v96) {
    goto LABEL_92;
  }
  v84 = *(void *)(v95 + 8 * v85);
  if (v84)
  {
LABEL_90:
    v74 = (v84 - 1) & v84;
    v97 = v85;
    v76 = __clz(__rbit64(v84)) + (v85 << 6);
    goto LABEL_65;
  }

  v86 = v71 + 9;
  if (v71 + 9 >= v96) {
    goto LABEL_92;
  }
  v84 = *(void *)(v95 + 8 * v86);
  if (v84)
  {
    v85 = v71 + 9;
    goto LABEL_90;
  }

  while (1)
  {
    v85 = v86 + 1;
    if (__OFADD__(v86, 1LL)) {
      break;
    }
    if (v85 >= v96) {
      goto LABEL_92;
    }
    v84 = *(void *)(v95 + 8 * v85);
    ++v86;
    if (v84) {
      goto LABEL_90;
    }
  }

    swift_bridgeObjectRetain();
    return v2;
  }

  outlined init with copy of AttributedString._AttributeValue?((uint64_t)(a2 + 5), (uint64_t)&v43);
  if (*((void *)&v44 + 1))
  {
    unint64_t v50 = v45;
    v51 = v46;
    id v52 = v47;
    unint64_t v48 = v43;
    unint64_t v49 = v44;
    uint64_t v18 = *v37;
    unint64_t v19 = (uint64_t *)*((void *)a2 + 8);
    uint64_t v36 = *((void *)a2 + 9);
    unint64_t v37 = v19;
    char v20 = *((void *)a2 + 4);
    v34[6] = *((void *)a2 + 5);
    uint64_t v35 = v20;
    BOOL v21 = *(_OWORD *)(v18 + 16);
    unint64_t v22 = *(_OWORD *)(v18 + 48);
    int v44 = *(_OWORD *)(v18 + 32);
    unint64_t v45 = v22;
    unint64_t v43 = v21;
    BigString.unicodeScalars.getter();
    unint64_t v23 = BigString.UnicodeScalarView.index(roundingDown:)();
    outlined release of Locale((uint64_t)v64);
    unint64_t v24 = *(_OWORD *)(v18 + 32);
    unint64_t v38 = *(_OWORD *)(v18 + 16);
    unint64_t v39 = v24;
    uint64_t v40 = *(_OWORD *)(v18 + 48);
    BigString.unicodeScalars.getter();
    uint64_t v25 = BigString.UnicodeScalarView.index(roundingDown:)();
    unint64_t v26 = outlined release of Locale((uint64_t)v65);
    uint64_t v27 = v23 >> 11;
    uint64_t v28 = v25 >> 11;
    MEMORY[0x1895F8858](v26);
    v34[2] = v37;
    v34[3] = v36;
    v34[4] = &v48;
    swift_retain();
    AttributedString._InternalRunsSlice.updateEach(with:)( (uint64_t)partial apply for closure #1 in AttributedString.Guts.setAttributeValue(_:forKey:in:),  (uint64_t)v34,  (void *)v18,  v27,  v25 >> 11);
    swift_release();
    uint64_t v29 = v51;
    if ((void)v51 != 1LL)
    {
      uint64_t v30 = *((void *)&v50 + 1);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<AttributedString.AttributeRunBoundaries>);
      uint64_t v31 = swift_allocObject();
      *(_OWORD *)(v31 + 16) = xmmword_183720D90;
      *(void *)(v31 + 32) = v30;
      *(void *)(v31 + 40) = v29;
      swift_bridgeObjectRetain();
      AttributedString.Guts.enforceAttributeConstraintsAfterMutation(in:type:constraintsInvolved:)(v27, v28, 0, v31);
      swift_setDeallocating();
      swift_arrayDestroy();
      swift_deallocClassInstance();
    }

    return outlined destroy of AttributedString._AttributeValue((uint64_t)&v48);
  }

  else
  {
    outlined destroy of Any?( (uint64_t)&v43,  &demangling cache variable for type metadata for AttributedString._AttributeValue?);
    uint64_t v32 = a2[1];
    unint64_t v48 = *a2;
    unint64_t v49 = v32;
    unint64_t v33 = a2[3];
    unint64_t v50 = a2[2];
    v51 = v33;
    return AttributedString.Guts.removeAttributeValue<A>(forKey:in:)(v35, (uint64_t)&v48, v35, v36);
  }

        *(void *)(v11 + 24) = v17;
        *(void *)(v11 + 32) = v19;
        *(void *)(v11 + 40) = v21;
        uint64_t v12 = 1;
        goto LABEL_18;
      }

      __break(1u);
    }
  }

  unint64_t v43 = *(int *)(a3 + 20);
  int v44 = &a1[v43];
  unint64_t v45 = &a2[v43];
  *(void *)int v44 = *(void *)v45;
  *((void *)v44 + 1) = *((void *)v45 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[*(int *)(a3 + 24)] = a2[*(int *)(a3 + 24)];
  return a1;
}

  uint64_t v32 = *(int *)(a3 + 20);
  unint64_t v33 = &a1[v32];
  char v34 = &a2[v32];
  uint64_t v36 = *(void *)v34;
  uint64_t v35 = *((void *)v34 + 1);
  *(void *)unint64_t v33 = v36;
  *((void *)v33 + 1) = v35;
  swift_bridgeObjectRelease();
  a1[*(int *)(a3 + 24)] = a2[*(int *)(a3 + 24)];
  return a1;
}

    __break(1u);
    goto LABEL_18;
  }

  *uint64_t v2 = v3;
  return result;
}

  unint64_t result = (unsigned __int16 *)specialized Rope._UnsafeHandle.findSlot<A>(from:offsetBy:in:preferEnd:)( v10,  v13,  v15,  1,  result,  (uint64_t)a2);
  uint64_t v5 = v19;
  char v20 = &v8[3 * v10];
  if ((unsigned __int16 *)v10 == result)
  {
    BOOL v21 = v19 < v13 || v8[3 * v10 + 2] < v19;
    if (!v21 && (v13 & 0x8000000000000000LL) == 0)
    {
      if (v13 != v19)
      {
        unint64_t v22 = *v20;
        unint64_t v23 = *(unsigned __int8 *)(*v20 + 18LL);
        unint64_t v24 = *v20 + 24LL;
        swift_unknownObjectRetain();
        uint64_t v25 = v22 + 16;
        unint64_t v26 = (void *)v24;
        uint64_t v27 = v13;
        if (!v23)
        {
LABEL_25:
          specialized closure #1 in Rope._Node.extract<A>(from:to:in:into:)(v25, v26, v27, v5, a5);
          return (unsigned __int16 *)swift_unknownObjectRelease();
        }

  unint64_t result = specialized Rope._UnsafeHandle.findSlot<A>(from:offsetBy:in:preferEnd:)( v10,  v12,  v14,  1,  (unsigned __int16 *)result,  (uint64_t)a2);
  uint64_t v60 = v18;
  unint64_t v19 = &a2[3 * v10];
  char v20 = *v19;
  uint64_t v6 = v19[1];
  uint64_t v7 = v19[2];
  if (v10 == result)
  {
    if (!__OFSUB__(v20, v12))
    {
      BOOL v21 = v18 - v12;
      if (!__OFSUB__(v18, v12))
      {
        if (((v21 | v12) & 0x8000000000000000LL) == 0 && v20 >= v12 && v20 - v12 >= v21)
        {
          if (v21)
          {
            unint64_t v23 = a5[4];
            unint64_t v24 = a5[5];
            uint64_t v25 = a5[6];
            a5[5] = 0LL;
            a5[6] = 0LL;
            a5[4] = 0LL;
            if (v24)
            {
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              specialized Rope.Builder._appendNow(_:)(v23, v24, v25);
              unint64_t result = outlined consume of Rope<AttributedString._InternalRun>._Item?(a5[4], a5[5]);
              a5[4] = v21;
              a5[5] = v6;
              a5[6] = v7;
            }

            else
            {
              a5[4] = v21;
              a5[5] = v6;
              a5[6] = v7;
              swift_bridgeObjectRetain();
              return swift_bridgeObjectRetain();
            }
          }

          return result;
        }

        goto LABEL_78;
      }

  __break(1u);
}

      v16[v21] = v23 | v22;
      *(_BYTE *)(v24 + v20) = 2;
      uint64_t v27 = *(void *)(v15 + 16);
      uint64_t v28 = __OFADD__(v27, 1LL);
      uint64_t v29 = v27 + 1;
      if (v28) {
        goto LABEL_123;
      }
      *(void *)(v15 + 16) = v29;
      uint64_t v25 = *(_BYTE *)(v15 + 32) & 0x3F;
    }

  *(void *)(v23 + 8 * v27) = v29 | v28;
  *(_BYTE *)(v30 + v26) = v24;
  uint64_t v32 = *(void *)(v21 + 16);
  unint64_t v33 = __OFADD__(v32, 1LL);
  char v34 = v32 + 1;
  if (!v33)
  {
    *(void *)(v21 + 16) = v34;
    goto LABEL_10;
  }

  __break(1u);
LABEL_49:
  __break(1u);
LABEL_50:
  __break(1u);
LABEL_51:
  __break(1u);
  return result;
}

  uint64_t v6 = *a1;
  uint64_t v7 = v6 >= 0xF;
  unint64_t v8 = v6 - 15;
  if (!v7) {
    unint64_t v8 = -1;
  }
  return (v8 + 1);
}

          unint64_t v8 = v10;
          goto LABEL_18;
        }
      }
    }
  }

  uint64_t v6 = *a1;
  uint64_t v7 = v6 >= 0x10;
  unint64_t v8 = v6 - 16;
  if (!v7) {
    unint64_t v8 = -1;
  }
  return (v8 + 1);
}

  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  if (!v37)
  {
LABEL_12:
    Hasher._combine(_:)(0);
    uint64_t v7 = v38;
    if (!v38) {
      goto LABEL_13;
    }
LABEL_19:
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    specialized Dictionary<>.hash(into:)(a1, v7);
    swift_bridgeObjectRelease();
    unint64_t v8 = v39;
    if (!v39) {
      goto LABEL_14;
    }
    goto LABEL_20;
  }

  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  if (!v36)
  {
LABEL_12:
    Hasher._combine(_:)(0);
    uint64_t v5 = v37;
    if (!v37) {
      goto LABEL_13;
    }
LABEL_19:
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    specialized Dictionary<>.hash(into:)((uint64_t)v51, v5);
    swift_bridgeObjectRelease();
    uint64_t v6 = v38;
    if (!v38) {
      goto LABEL_14;
    }
    goto LABEL_20;
  }

        swift_bridgeObjectRelease();
        if (__OFADD__(v26, a4))
        {
LABEL_30:
          __break(1u);
        }

        else
        {
          if (v26 + a4 >= *(void *)(v19 + 16)) {
            a4 = *(void *)(v19 + 16);
          }
          else {
            a4 += v26;
          }
          if (a4 >= v26)
          {
            if ((v26 & 0x8000000000000000LL) == 0)
            {
              type metadata accessor for __ContiguousArrayStorageBase();
              swift_unknownObjectRetain_n();
              uint64_t v30 = swift_dynamicCastClass();
              if (!v30)
              {
                swift_bridgeObjectRelease();
                uint64_t v30 = MEMORY[0x18961AFE8];
              }

              uint64_t v35 = a1;
              uint64_t v31 = *(void *)(v30 + 16);
              swift_release();
              if (v31 == a4 - v26)
              {
                uint64_t v32 = swift_dynamicCastClass();
                unint64_t v33 = v36;
                char v34 = a6;
                if (!v32)
                {
                  swift_bridgeObjectRelease();
                  uint64_t v32 = MEMORY[0x18961AFE8];
                }

                goto LABEL_28;
              }

  uint64_t v6 = *a1;
  uint64_t v7 = v6 >= 7;
  unint64_t v8 = v6 - 7;
  if (!v7) {
    unint64_t v8 = -1;
  }
  return (v8 + 1);
}

    unint64_t result = swift_release();
    *a7 = v18;
    a7[1] = v19;
    return result;
  }

  unint64_t v24 = swift_slowAlloc();
  uint64_t v28 = 0;
  uint64_t v25 = a6(*(void *)(a3 + 16), a5, v24, v14, &v28, v12);
  unint64_t v26 = 0LL;
  uint64_t v27 = 0LL;
  if (v28 <= 0 && v25 > 0) {
    unint64_t v26 = specialized String.init(_utf16:)(v24, v25);
  }
  *a7 = v26;
  a7[1] = v27;
  MEMORY[0x186E20E60](v24, -1LL, -1LL);
  return swift_release();
}

      __break(1u);
      goto LABEL_18;
    }

    uint64_t v3 = 0LL;
    if (!v11) {
      goto LABEL_25;
    }
LABEL_20:
    char v20 = *((void *)v11 + v3);
    if (v20)
    {
      swift_unknownObjectRetain();
      *(void *)(a1 + 24) = swift_getObjectType();
      *(void *)a1 = v20;
    }

    else
    {
      *(_OWORD *)a1 = 0u;
      *(_OWORD *)(a1 + 16) = 0u;
    }

    *(void *)(v1 + 200) = v3 + 1;
    return;
  }

  if ((*(_BYTE *)(v1 + 216) & 1) != 0)
  {
    switch(v3)
    {
      case 0LL:
        unint64_t v19 = *(void *)(v1 + 8);
        if (!v19) {
          goto LABEL_17;
        }
        goto LABEL_13;
      case 1LL:
        goto LABEL_38;
      case 2LL:
        goto LABEL_32;
      case 3LL:
        goto LABEL_40;
      case 4LL:
        goto LABEL_28;
      case 5LL:
        goto LABEL_46;
      case 6LL:
        goto LABEL_48;
      case 7LL:
        goto LABEL_42;
      case 8LL:
        goto LABEL_50;
      case 9LL:
        goto LABEL_34;
      case 10LL:
        goto LABEL_52;
      case 11LL:
        goto LABEL_30;
      case 12LL:
        goto LABEL_36;
      case 13LL:
        goto LABEL_54;
      case 14LL:
        goto LABEL_26;
      case 15LL:
        goto LABEL_44;
      default:
        goto LABEL_59;
    }
  }

  uint64_t v11 = *(__int128 **)(v1 + 144);
  if (v11) {
    goto LABEL_20;
  }
LABEL_25:
  __break(1u);
LABEL_26:
  BOOL v21 = *(void *)(v1 + 120);
  if (!v21)
  {
    __break(1u);
LABEL_28:
    BOOL v21 = *(void *)(v1 + 40);
    if (!v21)
    {
      __break(1u);
LABEL_30:
      BOOL v21 = *(void *)(v1 + 96);
      if (!v21)
      {
        __break(1u);
LABEL_32:
        BOOL v21 = *(void *)(v1 + 24);
        if (!v21)
        {
          __break(1u);
LABEL_34:
          BOOL v21 = *(void *)(v1 + 80);
          if (!v21)
          {
            __break(1u);
LABEL_36:
            BOOL v21 = *(void *)(v1 + 104);
            if (!v21)
            {
              __break(1u);
LABEL_38:
              BOOL v21 = *(void *)(v1 + 16);
              if (!v21)
              {
                __break(1u);
LABEL_40:
                BOOL v21 = *(void *)(v1 + 32);
                if (!v21)
                {
                  __break(1u);
LABEL_42:
                  BOOL v21 = *(void *)(v1 + 64);
                  if (!v21)
                  {
                    __break(1u);
LABEL_44:
                    BOOL v21 = *(void *)(v1 + 128);
                    if (!v21)
                    {
                      __break(1u);
LABEL_46:
                      BOOL v21 = *(void *)(v1 + 48);
                      if (!v21)
                      {
                        __break(1u);
LABEL_48:
                        BOOL v21 = *(void *)(v1 + 56);
                        if (!v21)
                        {
                          __break(1u);
LABEL_50:
                          BOOL v21 = *(void *)(v1 + 72);
                          if (!v21)
                          {
                            __break(1u);
LABEL_52:
                            BOOL v21 = *(void *)(v1 + 88);
                            if (!v21)
                            {
                              __break(1u);
LABEL_54:
                              BOOL v21 = *(void *)(v1 + 112);
                              if (!v21)
                              {
                                __break(1u);
LABEL_59:
                                _assertionFailure(_:_:file:line:flags:)();
                                __break(1u);
                                JUMPOUT(0x183271C58LL);
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }

  swift_unknownObjectRetain();
  *(void *)(a1 + 24) = swift_getObjectType();
  *(void *)a1 = v21;
  *(void *)(v1 + 200) = v4;
}

    uint64_t v30 = (v11 - 1) & v11;
    uint64_t v31 = v10;
  }

  __break(1u);
LABEL_31:
  __break(1u);
  return result;
}

    uint64_t v27 = *(_DWORD *)(inited + 4);
    inited += 4LL;
    ++v23;
    if (v27 < 0) {
      goto LABEL_79;
    }
  }

  unint64_t v24 = *(_DWORD *)inited;
  if (v23 != 6)
  {
    uint64_t v25 = 0;
    goto LABEL_17;
  }

  inited = *v44;
  if ((_DWORD)inited == 1)
  {
    uint64_t v31 = 1;
LABEL_49:
    char v34 = ucal_getWeekendTransition();
    uint64_t v35 = 0;
    int v4 = (double)v34 / 1000.0;
    if ((v26 & 1) == 0)
    {
      unint64_t v33 = inited;
      BOOL v21 = 0;
      goto LABEL_53;
    }

    char v20 = 0.0;
    uint64_t v36 = 0;
    if ((_DWORD)inited != 1) {
      goto LABEL_100;
    }
LABEL_89:
    if (v5 >= 7)
    {
      if (*(_DWORD *)(v6 + 56) != 1) {
        goto LABEL_101;
      }
      if (*(_DWORD *)(v6 + 36) != 1) {
        goto LABEL_114;
      }
      if (*(_DWORD *)(v6 + 40) != 1) {
        goto LABEL_112;
      }
      if (*(_DWORD *)(v6 + 44) != 1) {
        goto LABEL_110;
      }
      if (*(_DWORD *)(v6 + 48) != 1) {
        goto LABEL_108;
      }
      if (*(_DWORD *)(v6 + 52) != 1) {
        goto LABEL_106;
      }
      goto LABEL_116;
    }

    goto LABEL_126;
  }

  if ((_DWORD)inited == 2 || (_DWORD)inited == 3)
  {
    uint64_t v31 = 0;
    goto LABEL_49;
  }

  if (v5 != 1)
  {
    uint64_t v25 = 0;
    goto LABEL_68;
  }

    uint64_t v12 = v10 & 0xFC00FC00;
    if ((v10 & 0xFC00FC00) == 0xDC00D800) {
      uint64_t v13 = 32;
    }
    else {
      uint64_t v13 = 16;
    }
    uint64_t i = v11 - v13;
    unint64_t v14 = v12 == -603924480;
    if (v12 == -603924480) {
      unint64_t v15 = 32;
    }
    else {
      unint64_t v15 = 16;
    }
    uint64_t v31 = (unint64_t)v10 >> v15;
    if (!v14) {
      goto LABEL_48;
    }
    unint64_t v16 = 0;
LABEL_29:
    if ((unsigned __int16)v10 >= 0x80u)
    {
      BOOL v21 = (v10 & 0x3F) << 8;
      if ((unsigned __int16)v10 >= 0x800u)
      {
        if ((v10 & 0xF800) == 0xD800)
        {
          if ((v16 & 1) != 0)
          {
            if ((unsigned __int16)v10 > 0x7Fu)
            {
              unint64_t v23 = (v10 & 0x3F) << 8;
              uint64_t v18 = (((unsigned __int16)v10 >> 12) | ((v23 | ((unsigned __int16)v10 >> 6) & 0x3F) << 8)) + 8487393;
            }

            else
            {
              uint64_t v18 = (unsigned __int16)v10 + 1;
            }
          }

          else
          {
            unint64_t v22 = ((v10 & 0x3FF) << 10) | HIWORD(v10) & 0x3FF;
            uint64_t v18 = (((v22 + 0x10000) >> 4) & 0x3F00 | ((v22 + 0x10000) >> 18) | (((v22 >> 6) & 0x3F | (((v22 + 0x10000) & 0x3F) << 8)) << 16))
                - 2122219023;
          }
        }

        else
        {
          uint64_t v18 = (((v21 | ((unsigned __int16)v10 >> 6) & 0x3F) << 8) | ((unsigned __int16)v10 >> 12)) + 8487393;
        }
      }

      else
      {
        uint64_t v18 = (v21 | ((unsigned __int16)v10 >> 6)) + 33217;
      }

      Unicode.Scalar.properties.getter();
      char v20 = Unicode.Scalar.Properties._caseFolded.getter();
      unint64_t v22 = v21;
      (*(void (**)(char *, uint64_t))(v42 + 8))(v11, v43);
      unint64_t v23 = v20;
      uint64_t v6 = v44;
      unint64_t v24 = v22;
LABEL_18:
      String.append(_:)(*(Swift::String *)&v23);
      swift_bridgeObjectRelease();
LABEL_19:
      v19 += v28;
      if (v19 >= v18)
      {
        swift_bridgeObjectRelease();
        uint64_t v36 = v48;
        uint64_t v17 = v49;
        goto LABEL_59;
      }
    }
  }

    unint64_t v16 = (a4 & 0x3F) << 8;
    if (a4 >= 0x800)
    {
      uint64_t v17 = (v16 | (a4 >> 6) & 0x3F) << 8;
      uint64_t v18 = (((v17 | (a4 >> 12) & 0x3F) << 8) | (a4 >> 18)) - 2122219023;
      unint64_t v14 = (v17 | (a4 >> 12)) + 8487393;
      if (WORD1(a4)) {
        unint64_t v14 = v18;
      }
    }

    else
    {
      unint64_t v14 = (v16 | (a4 >> 6)) + 33217;
    }

    goto LABEL_14;
  }

  uint64_t v12 = BuiltInUnicodeScalarSet._bitmapPtrForPlane(_:)(BYTE2(a4), 5);
  if (!BuiltInUnicodeScalarSet._isMemberOfBitmap(_:_:)(a4, v12, 0x700030005LL))
  {
    LODWORD(a4) = Unicode.Scalar._stripDiacritics()(a4);
    goto LABEL_10;
  }

  return 0LL;
}

      unint64_t v23 = v22;
      unint64_t v24 = static String._unconditionallyBridgeFromObjectiveC(_:)(v22);
      unint64_t v26 = v25;

      *(void *)(a2 + 24) = MEMORY[0x189617FA8];
      *(void *)a2 = v24;
      *(void *)(a2 + _Block_object_dispose(va, 8) = v26;
      return;
    }

    v112 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v112 & 1) != 0) {
      goto LABEL_105;
    }
    v113 = static String._unconditionallyBridgeFromObjectiveC(_:)((void *)*MEMORY[0x189603A90]);
    v115 = v114;
    if (v113 == static String._unconditionallyBridgeFromObjectiveC(_:)(a1) && v115 == v116) {
      goto LABEL_113;
    }
    v117 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v117 & 1) != 0)
    {
LABEL_114:
      BOOL v21 = objc_msgSend(v2, sel_collatorIdentifier);
      goto LABEL_16;
    }

    if (one-time initialization token for cfLocaleCollatorID != -1) {
      swift_once();
    }
    v118 = static String._unconditionallyBridgeFromObjectiveC(_:)((void *)static NSLocaleKey.cfLocaleCollatorID);
    v120 = v119;
    if (v118 == static String._unconditionallyBridgeFromObjectiveC(_:)(a1) && v120 == v121)
    {
LABEL_113:
      swift_bridgeObjectRelease_n();
      goto LABEL_114;
    }

    v122 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v122 & 1) != 0) {
      goto LABEL_114;
    }
    v123 = static String._unconditionallyBridgeFromObjectiveC(_:)((void *)*MEMORY[0x189603AF8]);
    v125 = v124;
    if (v123 == static String._unconditionallyBridgeFromObjectiveC(_:)(a1) && v125 == v126)
    {
      swift_bridgeObjectRelease_n();
LABEL_120:
      BOOL v21 = objc_msgSend(v2, sel_quotationBeginDelimiter);
      goto LABEL_16;
    }

    v127 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v127 & 1) != 0) {
      goto LABEL_120;
    }
    v128 = static String._unconditionallyBridgeFromObjectiveC(_:)((void *)*MEMORY[0x189603B00]);
    v130 = v129;
    if (v128 == static String._unconditionallyBridgeFromObjectiveC(_:)(a1) && v130 == v131)
    {
      swift_bridgeObjectRelease_n();
LABEL_125:
      BOOL v21 = objc_msgSend(v2, sel_quotationEndDelimiter);
      goto LABEL_16;
    }

    v132 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v132 & 1) != 0) {
      goto LABEL_125;
    }
    v133 = static String._unconditionallyBridgeFromObjectiveC(_:)((void *)*MEMORY[0x189603A68]);
    v135 = v134;
    if (v133 == static String._unconditionallyBridgeFromObjectiveC(_:)(a1) && v135 == v136)
    {
      swift_bridgeObjectRelease_n();
LABEL_130:
      BOOL v21 = objc_msgSend(v2, sel_alternateQuotationBeginDelimiter);
      goto LABEL_16;
    }

    v137 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v137 & 1) != 0) {
      goto LABEL_130;
    }
    v138 = static String._unconditionallyBridgeFromObjectiveC(_:)((void *)*MEMORY[0x189603A70]);
    v140 = v139;
    if (v138 == static String._unconditionallyBridgeFromObjectiveC(_:)(a1) && v140 == v141)
    {
      swift_bridgeObjectRelease_n();
    }

    else
    {
      v142 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v142 & 1) == 0)
      {
        if (one-time initialization token for languageIdentifier != -1) {
          swift_once();
        }
        v143 = static String._unconditionallyBridgeFromObjectiveC(_:)((void *)static NSLocaleKey.languageIdentifier);
        v145 = v144;
        if (v143 == static String._unconditionallyBridgeFromObjectiveC(_:)(a1) && v145 == v146)
        {
          swift_bridgeObjectRelease_n();
        }

        else
        {
          v147 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if ((v147 & 1) == 0) {
            goto LABEL_23;
          }
        }

        BOOL v21 = objc_msgSend(v2, sel_languageIdentifier);
        goto LABEL_16;
      }
    }

    BOOL v21 = objc_msgSend(v2, sel_alternateQuotationEndDelimiter);
LABEL_16:
    unint64_t v22 = v21;
    goto LABEL_17;
  }

  unint64_t v47 = 9;
  unint64_t v46 = v10;
  _s10Foundation18_CalendarGregorianC10addAndWrap_2to6amount10inTimeZoneAA4DateVAA0B0V9ComponentO_AISiAA0jK0VtAA0cB5ErrorOYKF( (uint64_t)&v47,  &v46,  v38,  v48);
  if (v5) {
    goto LABEL_51;
  }
  uint64_t v5 = 0LL;
  unint64_t v10 = v48[0];
  if ((v39 & 1) == 0) {
    goto LABEL_19;
  }
LABEL_7:
  if ((v37 & 1) == 0) {
    goto LABEL_21;
  }
LABEL_8:
  if ((v33 & 1) != 0) {
    goto LABEL_24;
  }
  unint64_t v47 = 11;
  unint64_t v46 = v10;
  uint64_t v12 = v29;
LABEL_22:
  _s10Foundation18_CalendarGregorianC10addAndWrap_2to6amount10inTimeZoneAA4DateVAA0B0V9ComponentO_AISiAA0jK0VtAA0cB5ErrorOYKF( (uint64_t)&v47,  &v46,  v12,  v48);
  if (v5) {
    goto LABEL_51;
  }
  uint64_t v5 = 0LL;
  unint64_t v10 = v48[0];
LABEL_24:
  if ((v35 & 1) == 0)
  {
    unint64_t v47 = 10;
    unint64_t v46 = v10;
    _s10Foundation18_CalendarGregorianC10addAndWrap_2to6amount10inTimeZoneAA4DateVAA0B0V9ComponentO_AISiAA0jK0VtAA0cB5ErrorOYKF( (uint64_t)&v47,  &v46,  v31,  v48);
    if (v5) {
      goto LABEL_51;
    }
    uint64_t v5 = 0LL;
    unint64_t v10 = v48[0];
  }

  if ((v32 & 1) == 0)
  {
    unint64_t v47 = 8;
    unint64_t v46 = v10;
    _s10Foundation18_CalendarGregorianC10addAndWrap_2to6amount10inTimeZoneAA4DateVAA0B0V9ComponentO_AISiAA0jK0VtAA0cB5ErrorOYKF( (uint64_t)&v47,  &v46,  v28,  v48);
    if (v5) {
      goto LABEL_51;
    }
    uint64_t v5 = 0LL;
    unint64_t v10 = v48[0];
  }

  if ((v30 & 1) == 0)
  {
    unint64_t v47 = 3;
    unint64_t v46 = v10;
    _s10Foundation18_CalendarGregorianC10addAndWrap_2to6amount10inTimeZoneAA4DateVAA0B0V9ComponentO_AISiAA0jK0VtAA0cB5ErrorOYKF( (uint64_t)&v47,  &v46,  v26,  v48);
    if (v5) {
      goto LABEL_51;
    }
    uint64_t v5 = 0LL;
    unint64_t v10 = v48[0];
  }

  if ((v27 & 1) == 0)
  {
    unint64_t v47 = 17;
    unint64_t v46 = v10;
    _s10Foundation18_CalendarGregorianC10addAndWrap_2to6amount10inTimeZoneAA4DateVAA0B0V9ComponentO_AISiAA0jK0VtAA0cB5ErrorOYKF( (uint64_t)&v47,  &v46,  v24,  v48);
    if (v5) {
      goto LABEL_51;
    }
    uint64_t v5 = 0LL;
    unint64_t v10 = v48[0];
  }

  if ((v25 & 1) == 0)
  {
    unint64_t v47 = 7;
    unint64_t v46 = v10;
    _s10Foundation18_CalendarGregorianC10addAndWrap_2to6amount10inTimeZoneAA4DateVAA0B0V9ComponentO_AISiAA0jK0VtAA0cB5ErrorOYKF( (uint64_t)&v47,  &v46,  v22,  v48);
    if (v5) {
      goto LABEL_51;
    }
    uint64_t v5 = 0LL;
    unint64_t v10 = v48[0];
  }

  if ((v23 & 1) == 0)
  {
    unint64_t v47 = 4;
    unint64_t v46 = v10;
    _s10Foundation18_CalendarGregorianC10addAndWrap_2to6amount10inTimeZoneAA4DateVAA0B0V9ComponentO_AISiAA0jK0VtAA0cB5ErrorOYKF( (uint64_t)&v47,  &v46,  v20,  v48);
    if (v5) {
      goto LABEL_51;
    }
    uint64_t v5 = 0LL;
    unint64_t v10 = v48[0];
  }

  if ((v21 & 1) == 0)
  {
    unint64_t v47 = 5;
    unint64_t v46 = v10;
    _s10Foundation18_CalendarGregorianC10addAndWrap_2to6amount10inTimeZoneAA4DateVAA0B0V9ComponentO_AISiAA0jK0VtAA0cB5ErrorOYKF( (uint64_t)&v47,  &v46,  v18,  v48);
    if (v5) {
      goto LABEL_51;
    }
    uint64_t v5 = 0LL;
    unint64_t v10 = v48[0];
  }

  if ((v19 & 1) != 0) {
    goto LABEL_48;
  }
  unint64_t v47 = 6;
  unint64_t v46 = v10;
  _s10Foundation18_CalendarGregorianC10addAndWrap_2to6amount10inTimeZoneAA4DateVAA0B0V9ComponentO_AISiAA0jK0VtAA0cB5ErrorOYKF( (uint64_t)&v47,  &v46,  v16,  v48);
  if (v5)
  {
LABEL_51:
    unint64_t result = swift_unknownObjectRelease();
    *(_OWORD *)a3 = v43;
    *(_OWORD *)(a3 + 16) = v44;
    *(_BYTE *)(a3 + 32) = v45;
    return result;
  }

  uint64_t v5 = 0LL;
  unint64_t v10 = v48[0];
LABEL_48:
  if (v17)
  {
    unint64_t result = swift_unknownObjectRelease();
    *a4 = v10;
    return result;
  }

  unint64_t v47 = 13;
  unint64_t v46 = v10;
  _s10Foundation18_CalendarGregorianC10addAndWrap_2to6amount10inTimeZoneAA4DateVAA0B0V9ComponentO_AISiAA0jK0VtAA0cB5ErrorOYKF( (uint64_t)&v47,  &v46,  v14,  v48);
  if (v5) {
    goto LABEL_51;
  }
  unint64_t result = swift_unknownObjectRelease();
  *a4 = v48[0];
  return result;
}

    if (!v16) {
      goto LABEL_18;
    }
LABEL_369:
    __break(1u);
LABEL_370:
    __break(1u);
LABEL_371:
    __break(1u);
LABEL_372:
    __break(1u);
LABEL_373:
    __break(1u);
LABEL_374:
    __break(1u);
LABEL_375:
    __break(1u);
LABEL_376:
    __break(1u);
LABEL_377:
    __break(1u);
LABEL_378:
    __break(1u);
LABEL_379:
    __break(1u);
LABEL_380:
    __break(1u);
LABEL_381:
    __break(1u);
LABEL_382:
    __break(1u);
LABEL_383:
    __break(1u);
LABEL_384:
    __break(1u);
LABEL_385:
    __break(1u);
LABEL_386:
    __break(1u);
LABEL_387:
    __break(1u);
LABEL_388:
    __break(1u);
LABEL_389:
    __break(1u);
    goto LABEL_390;
  }

  unint64_t result = (void *)swift_unknownObjectRetain_n();
  unint64_t v16 = v8;
  unint64_t v15 = v6;
LABEL_33:
  uint64_t v27 = *(unsigned __int16 *)(v15 + 16);
  if (!*(_WORD *)(v15 + 16))
  {
    uint64_t v9 = a3;
    unint64_t v8 = a2;
    goto LABEL_46;
  }

  uint64_t v28 = *(void *)(v15 + 24);
  unint64_t v22 = __OFSUB__(v16, v28);
  uint64_t v29 = v16 - v28;
  uint64_t v9 = a3;
  unint64_t v8 = a2;
  if (v22)
  {
LABEL_409:
    __break(1u);
    goto LABEL_410;
  }

  if (!__OFADD__(v29, 1LL))
  {
    if (v29 + 1 <= 0)
    {
      uint64_t v27 = 0LL;
      goto LABEL_47;
    }

    if ((_DWORD)v27 != 1)
    {
      uint64_t v30 = (uint64_t *)(v15 + 48);
      uint64_t v31 = 1LL;
      while (1)
      {
        uint64_t v32 = *v30;
        v30 += 3;
        unint64_t v16 = v29 - v32;
        if (__OFSUB__(v29, v32)) {
          goto LABEL_397;
        }
        if (__OFADD__(v16, 1LL)) {
          goto LABEL_399;
        }
        if (v16 + 1 < 1) {
          goto LABEL_333;
        }
        ++v31;
        uint64_t v29 = v16;
        if (v27 == v31) {
          goto LABEL_46;
        }
      }
    }

    unint64_t v16 = v29;
LABEL_46:
    if (v16)
    {
LABEL_408:
      __break(1u);
      goto LABEL_409;
    }

    if (!v16) {
      goto LABEL_18;
    }
LABEL_372:
    __break(1u);
LABEL_373:
    __break(1u);
LABEL_374:
    __break(1u);
LABEL_375:
    __break(1u);
LABEL_376:
    __break(1u);
LABEL_377:
    __break(1u);
LABEL_378:
    __break(1u);
LABEL_379:
    __break(1u);
LABEL_380:
    __break(1u);
LABEL_381:
    __break(1u);
LABEL_382:
    __break(1u);
LABEL_383:
    __break(1u);
LABEL_384:
    __break(1u);
LABEL_385:
    __break(1u);
LABEL_386:
    __break(1u);
LABEL_387:
    __break(1u);
LABEL_388:
    __break(1u);
LABEL_389:
    __break(1u);
    goto LABEL_390;
  }

  unint64_t result = swift_unknownObjectRetain_n();
  unint64_t v16 = a4;
  unint64_t v15 = (void *)v5;
LABEL_33:
  uint64_t v27 = *((unsigned __int16 *)v15 + 8);
  if (!*((_WORD *)v15 + 8))
  {
    uint64_t v9 = a3;
    goto LABEL_46;
  }

  uint64_t v28 = v15[3];
  unint64_t v22 = __OFSUB__(v16, v28);
  uint64_t v29 = v16 - v28;
  uint64_t v9 = a3;
  if (!v22)
  {
    if (__OFADD__(v29, 1LL)) {
      goto LABEL_414;
    }
    if (v29 + 1 < 1)
    {
      uint64_t v27 = 0LL;
      goto LABEL_47;
    }

    if ((_DWORD)v27 != 1)
    {
      uint64_t v30 = v15 + 6;
      uint64_t v31 = 1LL;
      while (1)
      {
        uint64_t v32 = *v30;
        v30 += 3;
        unint64_t v16 = v29 - v32;
        if (__OFSUB__(v29, v32)) {
          goto LABEL_392;
        }
        if (__OFADD__(v16, 1LL)) {
          goto LABEL_393;
        }
        if (v16 + 1 < 1) {
          goto LABEL_336;
        }
        ++v31;
        uint64_t v29 = v16;
        if (v27 == v31) {
          goto LABEL_46;
        }
      }
    }

    unint64_t v16 = v29;
LABEL_46:
    if (v16)
    {
LABEL_412:
      __break(1u);
      goto LABEL_413;
    }

          if (v14) {
            goto LABEL_54;
          }
LABEL_18:
          uint64_t v17 = (4 * *(_BYTE *)(v13 + 18) + 8) & 0x3C;
          unint64_t v16 = ((-15LL << v17) - 1) & v16 | (v18 << v17);
          uint64_t v13 = *(void *)(v13 + 24 + 24 * v18);
          swift_unknownObjectRetain();
          swift_unknownObjectRelease();
          if (!*(_BYTE *)(v13 + 18))
          {
            uint64_t v25 = v16 & 0xFFFFFFFFFFFFF0FFLL;
            goto LABEL_34;
          }
        }
      }

      swift_unknownObjectRetain_n();
      swift_retain();
      uint64_t v25 = 0LL;
      unint64_t v14 = v8;
      uint64_t v13 = v5;
LABEL_34:
      unint64_t v26 = *(unsigned __int16 *)(v13 + 16);
      uint64_t v9 = v33;
      if (*(_WORD *)(v13 + 16))
      {
        uint64_t v27 = *(void *)(v13 + 24);
        char v20 = __OFSUB__(v14, v27);
        uint64_t v28 = v14 - v27;
        if (v20) {
          goto LABEL_61;
        }
        if (__OFADD__(v28, 1LL))
        {
LABEL_62:
          __break(1u);
          goto LABEL_63;
        }

        if (v28 + 1 <= 0)
        {
          unint64_t v26 = 0LL;
LABEL_47:
          swift_unknownObjectRelease();
          swift_unknownObjectRelease();
          uint64_t v12 = v25 | (v26 << 8);
          unint64_t v10 = v32;
          goto LABEL_13;
        }

        if ((_DWORD)v26 != 1)
        {
          uint64_t v29 = (uint64_t *)(v13 + 48);
          uint64_t v30 = 1LL;
          while (1)
          {
            uint64_t v31 = *v29;
            v29 += 3;
            unint64_t v14 = v28 - v31;
            if (__OFSUB__(v28, v31)) {
              goto LABEL_59;
            }
            if (__OFADD__(v14, 1LL)) {
              goto LABEL_60;
            }
            if (v14 + 1 < 1)
            {
              unint64_t v26 = v30;
              unint64_t v14 = v28;
              goto LABEL_47;
            }

            ++v30;
            uint64_t v28 = v14;
            if (v26 == v30) {
              goto LABEL_46;
            }
          }
        }

        unint64_t v14 = v28;
      }

    if (!v16) {
      goto LABEL_18;
    }
LABEL_363:
    __break(1u);
LABEL_364:
    __break(1u);
LABEL_365:
    __break(1u);
LABEL_366:
    __break(1u);
LABEL_367:
    __break(1u);
LABEL_368:
    __break(1u);
LABEL_369:
    __break(1u);
LABEL_370:
    __break(1u);
LABEL_371:
    __break(1u);
LABEL_372:
    __break(1u);
LABEL_373:
    __break(1u);
LABEL_374:
    __break(1u);
LABEL_375:
    __break(1u);
LABEL_376:
    __break(1u);
LABEL_377:
    __break(1u);
LABEL_378:
    __break(1u);
LABEL_379:
    __break(1u);
LABEL_380:
    __break(1u);
LABEL_381:
    __break(1u);
LABEL_382:
    __break(1u);
LABEL_383:
    __break(1u);
    goto LABEL_384;
  }

  unint64_t result = (void *)swift_unknownObjectRetain_n();
  unint64_t v16 = a2;
  unint64_t v15 = v5;
LABEL_33:
  unint64_t v26 = *(unsigned __int16 *)(v15 + 16);
  if (!*(_WORD *)(v15 + 16))
  {
    uint64_t v9 = a3;
    LOBYTE(v_Block_object_dispose(va, 8) = a5;
    goto LABEL_46;
  }

  uint64_t v27 = *(void *)(v15 + 24);
  BOOL v21 = __OFSUB__(v16, v27);
  uint64_t v28 = v16 - v27;
  uint64_t v9 = a3;
  LOBYTE(v_Block_object_dispose(va, 8) = a5;
  if (v21)
  {
LABEL_403:
    __break(1u);
    goto LABEL_404;
  }

  if (!__OFADD__(v28, 1LL))
  {
    if (v28 + 1 <= 0)
    {
      unint64_t v26 = 0LL;
      goto LABEL_47;
    }

    if ((_DWORD)v26 != 1)
    {
      uint64_t v29 = (uint64_t *)(v15 + 48);
      uint64_t v30 = 1LL;
      while (1)
      {
        uint64_t v31 = *v29;
        v29 += 3;
        unint64_t v16 = v28 - v31;
        if (__OFSUB__(v28, v31)) {
          goto LABEL_391;
        }
        if (__OFADD__(v16, 1LL)) {
          goto LABEL_393;
        }
        if (v16 + 1 < 1) {
          goto LABEL_327;
        }
        ++v30;
        uint64_t v28 = v16;
        if (v26 == v30) {
          goto LABEL_46;
        }
      }
    }

    unint64_t v16 = v28;
LABEL_46:
    if (v16)
    {
LABEL_402:
      __break(1u);
      goto LABEL_403;
    }

    if (!v14) {
      goto LABEL_18;
    }
LABEL_374:
    __break(1u);
LABEL_375:
    __break(1u);
LABEL_376:
    __break(1u);
LABEL_377:
    __break(1u);
LABEL_378:
    __break(1u);
LABEL_379:
    __break(1u);
LABEL_380:
    __break(1u);
LABEL_381:
    __break(1u);
LABEL_382:
    __break(1u);
LABEL_383:
    __break(1u);
LABEL_384:
    __break(1u);
LABEL_385:
    __break(1u);
LABEL_386:
    __break(1u);
LABEL_387:
    __break(1u);
LABEL_388:
    __break(1u);
LABEL_389:
    __break(1u);
LABEL_390:
    __break(1u);
LABEL_391:
    __break(1u);
    goto LABEL_392;
  }

  unint64_t result = swift_unknownObjectRetain_n();
  unint64_t v14 = a2;
  uint64_t v13 = (void *)v4;
LABEL_33:
  uint64_t v25 = *((unsigned __int16 *)v13 + 8);
  if (!*((_WORD *)v13 + 8))
  {
    uint64_t v7 = a3;
    uint64_t v5 = v171;
    goto LABEL_46;
  }

  unint64_t v26 = v13[3];
  char v20 = __OFSUB__(v14, v26);
  uint64_t v27 = v14 - v26;
  uint64_t v7 = a3;
  uint64_t v5 = v171;
  if (!v20)
  {
    if (__OFADD__(v27, 1LL)) {
      goto LABEL_416;
    }
    if (v27 + 1 <= 0)
    {
      uint64_t v25 = 0LL;
      goto LABEL_47;
    }

    if ((_DWORD)v25 != 1)
    {
      uint64_t v28 = v13 + 6;
      uint64_t v29 = 1LL;
      while (1)
      {
        uint64_t v30 = *v28;
        v28 += 3;
        unint64_t v14 = v27 - v30;
        if (__OFSUB__(v27, v30)) {
          goto LABEL_394;
        }
        if (__OFADD__(v14, 1LL)) {
          goto LABEL_395;
        }
        if (v14 + 1 < 1) {
          goto LABEL_338;
        }
        ++v29;
        uint64_t v27 = v14;
        if (v25 == v29) {
          goto LABEL_46;
        }
      }
    }

    unint64_t v14 = v27;
LABEL_46:
    if (v14)
    {
LABEL_414:
      __break(1u);
      goto LABEL_415;
    }

  __break(1u);
  return result;
}

      swift_retain();
      v7(v8, v9);
      outlined consume of (@escaping @callee_guaranteed (@in_guaranteed URL, @guaranteed Error) -> (@unowned Bool))?((uint64_t)v7);
LABEL_18:
      outlined consume of (@escaping @callee_guaranteed (@in_guaranteed URL, @guaranteed Error) -> (@unowned Bool))?((uint64_t)v7);
      return v6;
    }

    outlined consume of (@escaping @callee_guaranteed (@in_guaranteed URL, @guaranteed Error) -> (@unowned Bool))?((uint64_t)v7);
    __break(1u);
    goto LABEL_23;
  }

  *(void *)(v6 + 24) = v9;
  *(void *)(v6 + 32) = v9;
  *(_BYTE *)(v6 + 64) = 1;
  unint64_t v15 = 0;
  _So30malloc_type_layout_semantics_ta_generic_data_setter((_WORD *)&v15 + 1);
  uint64_t v12 = malloc_type_malloc(v9, (unint64_t)v15 << 32);
  if (!v12)
  {
LABEL_23:
    unint64_t result = outlined consume of (@escaping @callee_guaranteed (@in_guaranteed URL, @guaranteed Error) -> (@unowned Bool))?((uint64_t)v7);
    __break(1u);
    goto LABEL_24;
  }

  *unint64_t v10 = v12;
  unint64_t result = specialized static __DataStorage.move(_:_:_:)((vm_address_t)v12, v8, v9);
  if (!v7) {
    return v6;
  }
  if (v8) {
    goto LABEL_17;
  }
LABEL_24:
  __break(1u);
  return result;
}

  unint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

      __break(1u);
      goto LABEL_18;
    }

  os_unfair_lock_unlock(v16);
  v27[1] = v15;
  unint64_t v22 = dispatch thunk of Subscriber.receive(_:)();
  unint64_t v23 = static Subscribers.Demand.none.getter();
  static Subscribers.Demand.unlimited.getter();
  if ((static Subscribers.Demand.== infix(_:_:)() & 1) != 0)
  {
    static Subscribers.Demand.unlimited.getter();
    if ((static Subscribers.Demand.== infix(_:_:)() & 1) != 0) {
      goto LABEL_32;
    }
  }

  static Subscribers.Demand.unlimited.getter();
  if ((static Subscribers.Demand.== infix(_:_:)() & 1) == 0)
  {
    static Subscribers.Demand.unlimited.getter();
    if ((static Subscribers.Demand.== infix(_:_:)() & 1) != 0 || v23 >= v22) {
      goto LABEL_32;
    }
  }

  os_unfair_lock_lock(v16);
  unint64_t v24 = *(uint64_t *)((char *)v3 + v17);
  static Subscribers.Demand.unlimited.getter();
  if ((static Subscribers.Demand.== infix(_:_:)() & 1) != 0)
  {
LABEL_31:
    os_unfair_lock_unlock(v16);
LABEL_32:
    (*(void (**)(char *, uint64_t))(v11 + 8))(v14, v6);
    return;
  }

  static Subscribers.Demand.unlimited.getter();
  uint64_t v25 = static Subscribers.Demand.== infix(_:_:)();
  unint64_t v26 = static Subscribers.Demand.unlimited.getter();
  if ((v25 & 1) != 0)
  {
LABEL_30:
    *(uint64_t *)((char *)v3 + v17) = v26;
    goto LABEL_31;
  }

  if ((static Subscribers.Demand.== infix(_:_:)() & 1) != 0)
  {
LABEL_28:
    unint64_t v26 = static Subscribers.Demand.unlimited.getter();
    goto LABEL_30;
  }

  if (((v24 | v22) & 0x8000000000000000LL) != 0)
  {
LABEL_35:
    __break(1u);
    goto LABEL_36;
  }

  unint64_t v26 = v24 + v22;
  if (__OFADD__(v24, v22)) {
    goto LABEL_28;
  }
  if ((v26 & 0x8000000000000000LL) == 0) {
    goto LABEL_30;
  }
LABEL_36:
  __break(1u);
}

  uint64_t v6 = *a1;
  uint64_t v7 = v6 >= 0x11;
  unint64_t v8 = v6 - 17;
  if (!v7) {
    unint64_t v8 = -1;
  }
  return (v8 + 1);
}

    uint64_t v18 = 0LL;
    char v20 = 0LL;
    goto LABEL_18;
  }

  BOOL v21 = objc_msgSend(v3, sel__cfurl);
  unint64_t v22 = (void *)_CFURLCopyPassword();
  if (!v22)
  {

    goto LABEL_17;
  }

  unint64_t v23 = v22;
  uint64_t v18 = static String._unconditionallyBridgeFromObjectiveC(_:)(v22);
  char v20 = v24;

LABEL_18:
  uint64_t v6 = (uint64_t)v18;
  uint64_t v7 = (void *)v20;
LABEL_26:
  result.value._object = v7;
  result.value._countAndFlagsBits = v6;
  return result;
}

  uint64_t v13 = v8[4];
  unint64_t v14 = v8[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v18 = 0;
  memset(v17, 0, sizeof(v17));
  URL.init(filePath:directoryHint:relativeTo:)(v13, v14, &v18, (uint64_t)v17, a1);
}

  uint64_t v13 = v8[4];
  unint64_t v14 = v8[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v18 = 0;
  memset(v17, 0, sizeof(v17));
  URL.init(filePath:directoryHint:relativeTo:)(v13, v14, &v18, (uint64_t)v17, a1);
}

  uint64_t v13 = v8[4];
  unint64_t v14 = v8[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v18 = 0;
  memset(v17, 0, sizeof(v17));
  URL.init(filePath:directoryHint:relativeTo:)(v13, v14, &v18, (uint64_t)v17, a1);
}

  uint64_t v13 = v8[4];
  unint64_t v14 = v8[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v18 = 0;
  memset(v17, 0, sizeof(v17));
  URL.init(filePath:directoryHint:relativeTo:)(v13, v14, &v18, (uint64_t)v17, a1);
}

  uint64_t v13 = v8[4];
  unint64_t v14 = v8[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v18 = 0;
  memset(v17, 0, sizeof(v17));
  URL.init(filePath:directoryHint:relativeTo:)(v13, v14, &v18, (uint64_t)v17, a1);
}

  uint64_t v13 = v8[4];
  unint64_t v14 = v8[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v18 = 0;
  memset(v17, 0, sizeof(v17));
  URL.init(filePath:directoryHint:relativeTo:)(v13, v14, &v18, (uint64_t)v17, a1);
}

  uint64_t v13 = v8[4];
  unint64_t v14 = v8[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v18 = 0;
  memset(v17, 0, sizeof(v17));
  URL.init(filePath:directoryHint:relativeTo:)(v13, v14, &v18, (uint64_t)v17, a1);
}

  uint64_t v13 = v8[4];
  unint64_t v14 = v8[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v18 = 0;
  memset(v17, 0, sizeof(v17));
  URL.init(filePath:directoryHint:relativeTo:)(v13, v14, &v18, (uint64_t)v17, a1);
}

  uint64_t v13 = v8[4];
  unint64_t v14 = v8[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v18 = 0;
  memset(v17, 0, sizeof(v17));
  URL.init(filePath:directoryHint:relativeTo:)(v13, v14, &v18, (uint64_t)v17, a1);
}

  uint64_t v13 = v8[4];
  unint64_t v14 = v8[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v18 = 0;
  memset(v17, 0, sizeof(v17));
  URL.init(filePath:directoryHint:relativeTo:)(v13, v14, &v18, (uint64_t)v17, a1);
}

  uint64_t v13 = v8[4];
  unint64_t v14 = v8[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v18 = 0;
  memset(v17, 0, sizeof(v17));
  URL.init(filePath:directoryHint:relativeTo:)(v13, v14, &v18, (uint64_t)v17, a1);
}

  uint64_t v13 = v8[4];
  unint64_t v14 = v8[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v18 = 0;
  memset(v17, 0, sizeof(v17));
  URL.init(filePath:directoryHint:relativeTo:)(v13, v14, &v18, (uint64_t)v17, a1);
}

  uint64_t v13 = v8[4];
  unint64_t v14 = v8[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v18 = 0;
  memset(v17, 0, sizeof(v17));
  URL.init(filePath:directoryHint:relativeTo:)(v13, v14, &v18, (uint64_t)v17, a1);
}

    dispatch thunk of BinaryInteger._lowWord.getter();
    v29(v32, a2);
LABEL_20:
    unint64_t v38 = dispatch thunk of BinaryInteger._lowWord.getter();
    v29(v26, a2);
    return v38;
  }

  if (v34 < 65) {
    goto LABEL_17;
  }
  lazy protocol witness table accessor for type Int and conformance Int();
LABEL_19:
  uint64_t v36 = v54;
  dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
  unint64_t v37 = dispatch thunk of static Comparable.< infix(_:_:)();
  v29(v36, a2);
  v29(v32, a2);
  if ((v37 & 1) == 0) {
    goto LABEL_20;
  }
  __break(1u);
LABEL_32:
  unint64_t result = ((uint64_t (*)(char *, uint64_t))v29)(v36, a2);
  __break(1u);
  return result;
}

  if (*a1 <= 5u) {
    uint64_t v6 = 5;
  }
  else {
    uint64_t v6 = *a1;
  }
  uint64_t v7 = v6 - 6;
  if (*a1 < 5u) {
    unint64_t v8 = -1;
  }
  else {
    unint64_t v8 = v7;
  }
  return (v8 + 1);
}

  if (*a1 <= 3u) {
    uint64_t v6 = 3;
  }
  else {
    uint64_t v6 = *a1;
  }
  uint64_t v7 = v6 - 4;
  if (*a1 < 3u) {
    unint64_t v8 = -1;
  }
  else {
    unint64_t v8 = v7;
  }
  return (v8 + 1);
}

  if (*a1 <= 6u) {
    uint64_t v6 = 6;
  }
  else {
    uint64_t v6 = *a1;
  }
  uint64_t v7 = v6 - 7;
  if (*a1 < 6u) {
    unint64_t v8 = -1;
  }
  else {
    unint64_t v8 = v7;
  }
  return (v8 + 1);
}

  if (*a1 <= 9u) {
    uint64_t v6 = 9;
  }
  else {
    uint64_t v6 = *a1;
  }
  uint64_t v7 = v6 - 10;
  if (*a1 < 9u) {
    unint64_t v8 = -1;
  }
  else {
    unint64_t v8 = v7;
  }
  return (v8 + 1);
}

  if (*a1 <= 0xEu) {
    uint64_t v6 = 14;
  }
  else {
    uint64_t v6 = *a1;
  }
  uint64_t v7 = v6 - 15;
  if (*a1 < 0xEu) {
    unint64_t v8 = -1;
  }
  else {
    unint64_t v8 = v7;
  }
  return (v8 + 1);
}

  if (*a1 <= 2u) {
    uint64_t v6 = 2;
  }
  else {
    uint64_t v6 = *a1;
  }
  uint64_t v7 = v6 - 3;
  if (*a1 < 2u) {
    unint64_t v8 = -1;
  }
  else {
    unint64_t v8 = v7;
  }
  return (v8 + 1);
}

  if (*a1 <= 0xCu) {
    uint64_t v6 = 12;
  }
  else {
    uint64_t v6 = *a1;
  }
  uint64_t v7 = v6 - 13;
  if (*a1 < 0xCu) {
    unint64_t v8 = -1;
  }
  else {
    unint64_t v8 = v7;
  }
  return (v8 + 1);
}

  uint64_t v6 = *a1;
  uint64_t v7 = v6 >= 0xC;
  unint64_t v8 = v6 - 12;
  if (!v7) {
    unint64_t v8 = -1;
  }
  return (v8 + 1);
}

    unint64_t v14 = 0LL;
    *(void *)&v128 = 0LL;
    v126 = 0u;
    v127 = 0u;
LABEL_18:
    outlined init with take of LocalePreferences?( (uint64_t)&v126,  (uint64_t)&v133,  &demangling cache variable for type metadata for (key: NSAttributedStringKey, value: Any)?);
    BOOL v21 = v133;
    if (!v133)
    {
      swift_bridgeObjectRelease();
      swift_release();
      *v102 = v135;
      return;
    }

    v136 = v14;
    outlined init with take of Any(v12, &v131);
    unint64_t v22 = static String._unconditionallyBridgeFromObjectiveC(_:)(v21);
    if (!v5[2])
    {
      swift_bridgeObjectRelease();
      goto LABEL_5;
    }

    v122 = v6;
    unint64_t v24 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v22, v23);
    if ((v25 & 1) != 0) {
      break;
    }
    swift_bridgeObjectRelease();
LABEL_41:
    uint64_t v6 = v122;
LABEL_5:
    unint64_t v10 = v136;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v131);
  }

  unint64_t v26 = (uint64_t *)(v5[7] + 16 * v24);
  uint64_t v28 = *v26;
  uint64_t v27 = v26[1];
  swift_bridgeObjectRelease();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v119 = type metadata accessor for Optional();
  uint64_t v30 = *(void *)(v119 - 8);
  v118 = *(uint64_t **)(v30 + 64);
  MEMORY[0x1895F8858](v119);
  v120 = (char *)&v100 - v31;
  uint64_t v32 = v132;
  unint64_t v33 = __swift_project_boxed_opaque_existential_1(&v131, v132);
  isClassOrObjCExistentialType = _swift_isClassOrObjCExistentialType();
  uint64_t v35 = *(void *)(*(void *)(v32 - 8) + 64LL);
  v117 = &v100;
  v121 = v30;
  if ((isClassOrObjCExistentialType & 1) != 0)
  {
    if (v35 != 8) {
      goto LABEL_70;
    }
    uint64_t v36 = *v33;
    swift_unknownObjectRetain();
  }

  else
  {
    v78 = MEMORY[0x1895F8858](isClassOrObjCExistentialType);
    (*(void (**)(char *, uint64_t *, uint64_t, __n128))(v80 + 16))( (char *)&v100 - ((v79 + 15) & 0xFFFFFFFFFFFFFFF0LL),  v33,  v32,  v78);
    uint64_t v36 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)();
  }

  unint64_t v37 = swift_conformsToProtocol2();
  unint64_t v38 = v28;
  if (v37) {
    unint64_t v39 = v37;
  }
  else {
    unint64_t v39 = 0LL;
  }
  v115 = v38;
  if (v37) {
    uint64_t v40 = v38;
  }
  else {
    uint64_t v40 = 0LL;
  }
  v116 = v21;
  if (v40)
  {
    swift_getAssociatedTypeWitness();
    v114 = v36;
    unint64_t v41 = swift_dynamicCastUnknownClass();
    if (v41)
    {
      int v42 = v41;
      unint64_t v43 = swift_getAssociatedTypeWitness();
      int v44 = MEMORY[0x1895F8858](v43);
      unint64_t v45 = v110;
      (*(void (**)(uint64_t, uint64_t, uint64_t, __n128))(v39 + 32))(v42, v40, v39, v44);
      v110 = v45;
      if (v45) {
        goto LABEL_68;
      }
      unint64_t v46 = v120;
      swift_dynamicCast();
      swift_unknownObjectRelease();
      unint64_t v47 = *(void *)(AssociatedTypeWitness - 8);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v47 + 56))(v46, 0LL, 1LL, AssociatedTypeWitness);
      goto LABEL_37;
    }

    static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSCocoaErrorDomain");
    v81 = objc_allocWithZone((Class)&OBJC_CLASS___NSError);
    v82 = String._bridgeToObjectiveCImpl()();
    swift_bridgeObjectRelease();
    v83 = objc_msgSend(v81, sel_initWithDomain_code_userInfo_, v82, 4866, _NativeDictionary.bridged()());
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    v84 = objc_msgSend(v83, sel_domain);
    v85 = static String._unconditionallyBridgeFromObjectiveC(_:)(v84);
    v87 = v86;

    if (v85 == static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSCocoaErrorDomain") && v87 == v88) {
      goto LABEL_63;
    }
    v98 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v98 & 1) != 0)
    {
LABEL_67:
      swift_willThrow();
LABEL_68:
      swift_unknownObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_willThrow();

      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v131);
      swift_release();
      return;
    }

      if (!v24) {
        goto LABEL_18;
      }
LABEL_194:
      __break(1u);
LABEL_195:
      __break(1u);
LABEL_196:
      __break(1u);
LABEL_197:
      __break(1u);
LABEL_198:
      __break(1u);
LABEL_199:
      __break(1u);
LABEL_200:
      __break(1u);
LABEL_201:
      __break(1u);
LABEL_202:
      __break(1u);
LABEL_203:
      __break(1u);
LABEL_204:
      __break(1u);
LABEL_205:
      __break(1u);
      goto LABEL_206;
    }

    swift_unknownObjectRetain_n();
    unint64_t result = outlined retain of AttributedString.Runs((uint64_t)v206);
    unint64_t v24 = v20;
    uint64_t v27 = v18;
LABEL_42:
    unint64_t v38 = *(unsigned __int16 *)(v27 + 16);
    if (*(_WORD *)(v27 + 16))
    {
      unint64_t v39 = *(void *)(v27 + 24);
      uint64_t v40 = v24 - v39;
      if (__OFSUB__(v24, v39))
      {
LABEL_220:
        __break(1u);
LABEL_221:
        __break(1u);
LABEL_222:
        __break(1u);
LABEL_223:
        __break(1u);
        goto LABEL_224;
      }

      if (__OFADD__(v40, 1LL)) {
        goto LABEL_221;
      }
      uint64_t v36 = v27;
      if (v40 + 1 <= 0)
      {
        unint64_t v38 = 0LL;
      }

      else
      {
        if ((_DWORD)v38 == 1)
        {
          v24 -= v39;
          goto LABEL_49;
        }

        unint64_t v41 = *(void *)(v27 + 48);
        uint64_t v17 = __OFSUB__(v40, v41);
        int v42 = v40 - v41;
        if (v17)
        {
LABEL_225:
          __break(1u);
          goto LABEL_226;
        }

        if (__OFADD__(v42, 1LL))
        {
LABEL_226:
          __break(1u);
          return result;
        }

        if (v42 + 1 < 1)
        {
          unint64_t v38 = 1LL;
          unint64_t v24 = v40;
        }

        else
        {
          if ((_DWORD)v38 == 2)
          {
            unint64_t v24 = v42;
LABEL_49:
            if (v24)
            {
LABEL_219:
              __break(1u);
              goto LABEL_220;
            }

            goto LABEL_66;
          }

          unint64_t v43 = (void *)(v27 + 72);
          int v44 = 2LL;
          while (1)
          {
            if (v38 == v44) {
              goto LABEL_216;
            }
            unint64_t v24 = v42 - *v43;
            if (__OFSUB__(v42, *v43)) {
              goto LABEL_217;
            }
            if (__OFADD__(v24, 1LL)) {
              goto LABEL_218;
            }
            if (v24 + 1 < 1) {
              break;
            }
            ++v44;
            v43 += 3;
            int v42 = v24;
            if (v38 == v44) {
              goto LABEL_49;
            }
          }

          unint64_t v38 = v44;
          unint64_t v24 = v42;
        }
      }

  __break(1u);
  return result;
}

    uint64_t v3 = (os_log_s *)_NSOSLog();
    if (!os_log_type_enabled(v3, OS_LOG_TYPE_DEBUG)) {
      return 0LL;
    }
    *(_DWORD *)unint64_t v22 = 138412290;
    *(void *)&v22[4] = [a1 bundleURL];
    BOOL v21 = "NSBundle %@ principal class is nil because all fallbacks have failed";
    goto LABEL_20;
  }

  if (!v7)
  {
    unint64_t v14 = objc_msgSend((id)objc_msgSend(a1, "bundlePath"), "_stringByResolvingSymlinksInPathUsingCache:", 0);
    unint64_t v15 = (id *)+[__NSBundleTables bundleTables]();
    unint64_t v16 = -[__NSBundleTables bundleForPath:](v15, v14);
    if (v16)
    {
      uint64_t v17 = v16;
      if (v16 != (id *)a1)
      {
        uint64_t v18 = (os_unfair_lock_s *)(v16 + 8);
        os_unfair_lock_lock((os_unfair_lock_t)v16 + 16);
        unint64_t v19 = (NSString *)v17[7];
        os_unfair_lock_unlock(v18);
        if (v19)
        {
          [v5 setObject:v19 forKey:@"NSPrincipalClass"];
          char v20 = NSClassFromString(v19);

          return v20;
        }
      }
    }

    goto LABEL_17;
  }

  uint64_t v13 = (os_log_s *)_NSOSLog();
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)unint64_t v22 = 138412546;
    *(void *)&v22[4] = [a1 bundleURL];
    *(_WORD *)&v22[12] = 2112;
    *(void *)&v22[14] = v7;
    unint64_t v10 = "NSBundle %@ principal class is using first class name %@ because the bundle has no principal class name";
    uint64_t v11 = v13;
    uint64_t v12 = 22;
    goto LABEL_22;
  }

    [v6 appendString:@"n"];
    flags = self->_flags;
    if ((flags & 0x10) == 0)
    {
LABEL_11:
      if (flags) {
LABEL_12:
      }
        [v6 appendString:@"]"];
      return v6;
    }

  unint64_t v15 = -[NSIndexSet initWithIndexSet:](self, "initWithIndexSet:", v5);

  return v15;
}

  uint64_t v11 = &p_internal[v9];
  if (v11->_singleRange._range.location > a3
    || v11->_singleRange._range.location + v11->_singleRange._range.length - 1 < a3)
  {
    return 0x7FFFFFFFFFFFFFFFLL;
  }

  return v9;
}

      uint64_t v12 = self->super._indexSetFlags;
      if ((*(_BYTE *)&v12 & 2) != 0)
      {
        location = p_internal->_singleRange._range.location;
        goto LABEL_34;
      }

      if ((*(_BYTE *)&v12 & 1) == 0)
      {
        char v20 = p_internal->_singleRange._range.location;
        uint64_t v27 = *(void *)(p_internal->_singleRange._range.location + 8);
        if (v27)
        {
          if (a3 >= v27 - 1) {
            return;
          }
LABEL_39:
          char v20 = p_internal->_singleRange._range.location;
        }

        else if (a3 == -1LL)
        {
          return;
        }

        uint64_t v18 = v20 + 16LL * *(void *)(v20 + 24) + 64;
        goto LABEL_41;
      }

      else {
        uint64_t v17 = -1LL;
      }
      uint64_t v18 = (uint64_t)p_internal;
      if (a3 >= v17) {
        return;
      }
LABEL_41:
      BOOL v21 = (uint64_t *)(v18 + 16 * a3);
      unint64_t v22 = *v21;
      unint64_t v23 = v21[1];
      unint64_t v24 = (unint64_t *)(v18 + 16 * (a3 + 1));
      uint64_t v25 = v23 + v22;
      if (v25 < *v24) {
        return;
      }
      unint64_t v26 = v24[1] + *v24;
      if (v25 < v26)
      {
        -[NSMutableIndexSet _replaceRangeInArrayAtIndex:withRange:]( self,  "_replaceRangeInArrayAtIndex:withRange:",  a3,  v22,  v26 - v22);
        -[NSMutableIndexSet _removeRangeInArrayAtIndex:](self, "_removeRangeInArrayAtIndex:", ++a3);
        goto LABEL_2;
      }

      -[NSMutableIndexSet _removeRangeInArrayAtIndex:](self, "_removeRangeInArrayAtIndex:", a3 + 1);
    }

    uint64_t v13 = *v7;
    if (v6 == 0xC000000000000007LL) {
      uint64_t v13 = 0LL;
    }
    unint64_t v14 = v13 ^ (unint64_t)self;
    if ((~(_BYTE)v14 & 7) != 0) {
      unint64_t v15 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v15 = 0xFFFFFFFFFFFFFLL;
    }
    location = v15 & (v14 >> 3);
LABEL_34:
    unint64_t v19 = location != 0;
    if ((*(_BYTE *)&v12 & 1) == 0)
    {
      if (location) {
        unint64_t v19 = *(void *)(p_internal->_singleRange._range.location + 8);
      }
    }

    if (a3 >= v19 - 1) {
      return;
    }
    uint64_t v18 = (uint64_t)p_internal;
    if ((*(_BYTE *)&v12 & 1) == 0) {
      goto LABEL_39;
    }
    goto LABEL_41;
  }

  v10->_xpcBoost = +[NSXPCConnection _currentBoost]();
  options = v10->_options;
  if ((options & 0x100000000000LL) == 0) {
    goto LABEL_22;
  }
LABEL_18:
  if (!a5)
  {
    unint64_t v26 = +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"%@: called with a nil expiration block",  _NSMethodExceptionProem((objc_class *)v10, a2));
    uint64_t v27 = (void *)MEMORY[0x189603F70];
    uint64_t v28 = (void *)MEMORY[0x189603A60];
    goto LABEL_54;
  }

  if (qword_18C496760 != -1) {
    dispatch_once(&qword_18C496760, &__block_literal_global_37);
  }
  v10->_expirationHandler = (id)[a5 copy];
  v10->_lock._os_unfair_lock_opaque = 0;
  uint64_t v17 = +[_NSActivityAssertion _expiringAssertionManagementQueue]( &OBJC_CLASS____NSActivityAssertion,  "_expiringAssertionManagementQueue");
  block[0] = MEMORY[0x1895F87A8];
  block[1] = 3221225472LL;
  block[2] = __74___NSActivityAssertion__initWithActivityOptions_reason_expirationHandler___block_invoke_3;
  block[3] = &unk_189C991F0;
  block[4] = v10;
  block[5] = a4;
  dispatch_async(v17, block);
  options = v10->_options;
LABEL_22:
  if ((options & 0x600000000000LL) == 0) {
    return v10;
  }
  if (qword_18C496768 != -1) {
    dispatch_once(&qword_18C496768, &__block_literal_global_96);
  }
  uint64_t v18 = os_signpost_id_make_with_pointer((os_log_t)qword_18C496770, v10);
  if (!v18) {
    return v10;
  }
  unint64_t v19 = v18;
  if (v18 != -1LL)
  {
    if ((v10->_options & 0x200000000000LL) != 0)
    {
      if (qword_18C496768 != -1) {
        dispatch_once(&qword_18C496768, &__block_literal_global_96);
      }
      char v20 = (os_log_s *)qword_18C496770;
      if (!os_signpost_enabled((os_log_t)qword_18C496770)) {
        goto LABEL_50;
      }
      reason = v10->_reason;
      if (qword_18C496758 != -1) {
        dispatch_once(&qword_18C496758, &__block_literal_global_11);
      }
      *(_DWORD *)buf = 138543618;
      unint64_t v33 = reason;
      char v34 = 2114;
      uint64_t v35 = qword_18C496750;
      unint64_t v22 = " reason=%{signpost.telemetry:string1,public}@ version=%{signpost.telemetry:string2,public}@  enableTelemetry"
            "=YES  isAnimation=YES";
    }

    else
    {
      if (qword_18C496778 != -1) {
        dispatch_once(&qword_18C496778, &__block_literal_global_99);
      }
      if (_MergedGlobals_104)
      {
        if (qword_18C496768 != -1) {
          dispatch_once(&qword_18C496768, &__block_literal_global_96);
        }
        char v20 = (os_log_s *)qword_18C496770;
        if (!os_signpost_enabled((os_log_t)qword_18C496770)) {
          goto LABEL_50;
        }
        BOOL v21 = v10->_reason;
        if (qword_18C496758 != -1) {
          dispatch_once(&qword_18C496758, &__block_literal_global_11);
        }
        *(_DWORD *)buf = 138543618;
        unint64_t v33 = v21;
        char v34 = 2114;
        uint64_t v35 = qword_18C496750;
        unint64_t v22 = " reason=%{signpost.telemetry:string1,public}@ version=%{signpost.telemetry:string2,public}@  enableTelemetry=YES ";
      }

      else
      {
        if (qword_18C496768 != -1) {
          dispatch_once(&qword_18C496768, &__block_literal_global_96);
        }
        char v20 = (os_log_s *)qword_18C496770;
        if (!os_signpost_enabled((os_log_t)qword_18C496770)) {
          goto LABEL_50;
        }
        unint64_t v24 = v10->_reason;
        if (qword_18C496758 != -1) {
          dispatch_once(&qword_18C496758, &__block_literal_global_11);
        }
        *(_DWORD *)buf = 138543618;
        unint64_t v33 = v24;
        char v34 = 2114;
        uint64_t v35 = qword_18C496750;
        unint64_t v22 = " reason=%{signpost.telemetry:string1,public}@ version=%{signpost.telemetry:string2,public}@ ";
      }
    }

    _os_signpost_emit_with_name_impl( &dword_182EB1000,  v20,  OS_SIGNPOST_INTERVAL_BEGIN,  v19,  "interaction_tracking",  v22,  buf,  0x16u);
LABEL_50:
    atomic_store(v19, &v10->_signpostID);
    return v10;
  }

  unint64_t v26 = +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"%@: unable to create a valid signpost ID",  _NSMethodExceptionProem((objc_class *)v10, sel__emitSignpostBegin));
  uint64_t v27 = (void *)MEMORY[0x189603F70];
  uint64_t v28 = (void *)MEMORY[0x189603A58];
LABEL_54:
  objc_exception_throw((id)[v27 exceptionWithName:*v28 reason:v26 userInfo:0]);
  return (id)__74___NSActivityAssertion__initWithActivityOptions_reason_expirationHandler___block_invoke();
}

      if (objc_msgSend( (id)-[NSMutableDictionary objectForKey:]( self->_attributes,  "objectForKey:",  @"formattingContext"),  "intValue") == -1)
      {
        uint64_t v11 = objc_alloc_init(&OBJC_CLASS____NSStringProxyForContext);
        -[_NSStringProxyForContext setString:](v11, "setString:", v9);
        -[_NSStringProxyForContext setItem:](v11, "setItem:", a3);
        uint64_t v12 = (id *)[objc_allocWithZone((Class)objc_opt_class()) init];
        [v12[1] setDictionary:self->_attributes];
        -[_NSStringProxyForContext _retainFormatter:](v11, "_retainFormatter:", v12);
        [v12 _clearFormatter];

        uint64_t v9 = v11;
      }

      -[NSRecursiveLock unlock](self->_lock, "unlock");
      break;
  }

  return (id)v9;
}

    uint64_t v12 = +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"couldn't encode string %@",  self);
    objc_exception_throw((id)[MEMORY[0x189603F70] exceptionWithName:*MEMORY[0x189603A58] reason:v12 userInfo:0]);
    -[NSString initWithCoder:](v13, v14, v15);
    return;
  }

  if (object_getClass(a3) == (Class)&OBJC_CLASS___NSKeyedArchiver)
  {
    [a3 _encodePropertyList:self forKey:@"NS.string"];
    return;
  }

  uint64_t v5 = -[NSString length](self, "length");
  uint64_t v6 = v5;
  unint64_t v16 = v5;
  uint64_t v7 = 6 * v5;
  if (6 * v5 < 0x65) {
    unint64_t v8 = v17;
  }
  else {
    unint64_t v8 = malloc(6 * v5);
  }
  if (!-[NSString getBytes:maxLength:filledLength:encoding:allowLossyConversion:range:remainingRange:]( self,  "getBytes:maxLength:filledLength:encoding:allowLossyConversion:range:remainingRange:",  v8,  v7,  &v16,  4LL,  0LL,  0LL,  v6,  0LL)) {
    goto LABEL_17;
  }
  [a3 encodeBytes:v8 length:v16 forKey:@"NS.bytes"];
LABEL_14:
  if (v8 != v17) {
    free(v8);
  }
}

    unint64_t result = 0.0;
    *(_OWORD *)uint64_t v3 = 0u;
    *(_OWORD *)(v3 + 16) = 0u;
    *(void *)(v3 + 32) = -1LL;
    *(void *)(v3 + 40) = 0LL;
    *(void *)(v3 + 4_Block_object_dispose(va, 8) = 0LL;
    *(void *)(v3 + 56) = 0LL;
    return result;
  }

  uint64_t v7 = v33;
  unint64_t v8 = v35;
  if (v37)
  {
    uint64_t v9 = (id)CFStringCreateByCombiningStrings(0LL, v37, @"/");
    if ([v6 scheme]
      && (-[__CFString _web_countOfString:](v9, "_web_countOfString:", @"/.") > 0
       || -[__CFString _web_countOfString:](v9, "_web_countOfString:", @"..") >= 1))
    {
      unint64_t v10 = -[__CFString length](v9, "length");
      uint64_t v11 = v10;
      if (v10 > 0x1000) {
        uint64_t v12 = (CFTypeRef *)malloc(2 * v10);
      }
      else {
        uint64_t v12 = cf;
      }
      -[__CFString getCharacters:](v9, "getCharacters:", v12);
      if (v11 < 1)
      {
        unint64_t v19 = 0LL;
      }

      else
      {
        unint64_t v19 = 0LL;
        char v20 = (char *)v12 - 2;
        BOOL v21 = v12;
        unint64_t v22 = v12;
        unint64_t v23 = (unint64_t)v12 + 2 * v11;
        do
        {
          unint64_t v24 = (_WORD *)v22 + 2;
          while (1)
          {
            uint64_t v25 = (unsigned __int16)*(v24 - 2);
            if (v25 != 46 || *(v21 - 1) != 47) {
              goto LABEL_34;
            }
            unint64_t v26 = v24 - 1;
            uint64_t v27 = (unsigned __int16)*(v24 - 1);
            if (v24 - 1 != (_WORD *)v23 && v27 != 47) {
              break;
            }
            v24 += 2;
          }

          if (v27 != 46 || v24 != (_WORD *)v23 && *v24 != 47)
          {
LABEL_34:
            *BOOL v21 = v25;
            unint64_t v22 = (CFTypeRef *)(v24 - 1);
            ++v19;
            goto LABEL_35;
          }

          unint64_t v22 = (CFTypeRef *)(v24 + 1);
          v19 -= v19 > 1;
          if (v19 < 2)
          {
            if (v19 == 1) {
              goto LABEL_43;
            }
          }

          else
          {
            do
            {
              if (*(_WORD *)&v20[2 * v19] != 47) {
                goto LABEL_43;
              }
              uint64_t v28 = v19-- <= 2;
            }

            while (!v28);
            unint64_t v19 = 1LL;
LABEL_43:
            while (*(_WORD *)&v20[2 * v19] != 47)
            {
              uint64_t v28 = v19-- <= 1;
              if (v28)
              {
                unint64_t v19 = 0LL;
                break;
              }
            }
          }

  uint64_t v9 = v6;
LABEL_24:
  unint64_t v10 = -[NSString initWithBytes:length:encoding:]( objc_alloc(&OBJC_CLASS___NSString),  "initWithBytes:length:encoding:",  &v9[location],  length,  1LL);
  if (v11 != v9) {
    free(v9);
  }
  return (const __CFString *)v10;
}

            LOBYTE(v12) = 1;
            return v12;
          }
        }
      }

      goto LABEL_16;
    }
  }

  return v12;
}

    unint64_t v10 = (void *)-[NSMutableDictionary objectForKey:]( values->_userInfo,  "objectForKey:",  @"NSProgressUseItemDescriptionKey");
    else {
      uint64_t v11 = 0;
    }
    unint64_t v16 = (void *)-[NSMutableDictionary objectForKey:]( values->_userInfo,  "objectForKey:",  @"NSProgressFileOperationKindKey");
    if ([v16 isEqualToString:@"NSProgressFileOperationKindDownloading"])
    {
      uint64_t v17 = (void *)_NSFoundationBundle();
      uint64_t v18 = @"Downloading";
    }

    else if ([v16 isEqualToString:@"NSProgressFileOperationKindUploading"])
    {
      uint64_t v17 = (void *)_NSFoundationBundle();
      uint64_t v18 = @"Uploading";
    }

    else if ([v16 isEqualToString:@"NSProgressFileOperationKindDecompressingAfterDownloading"])
    {
      uint64_t v17 = (void *)_NSFoundationBundle();
      uint64_t v18 = @"DecompressingAfterDownloading";
    }

    else if ([v16 isEqualToString:@"NSProgressFileOperationKindReceiving"])
    {
      uint64_t v17 = (void *)_NSFoundationBundle();
      uint64_t v18 = @"Receiving";
    }

    else if ([v16 isEqualToString:@"NSProgressFileOperationKindCopying"])
    {
      uint64_t v17 = (void *)_NSFoundationBundle();
      uint64_t v18 = @"Copying";
    }

    else if ([v16 isEqualToString:@"NSProgressFileOperationKindDuplicating"])
    {
      uint64_t v17 = (void *)_NSFoundationBundle();
      uint64_t v18 = @"Duplicating";
    }

    else if ([v16 isEqualToString:@"NSProgressFileOperationKindCompressing"])
    {
      uint64_t v17 = (void *)_NSFoundationBundle();
      uint64_t v18 = @"Compressing";
    }

    else if ([v16 isEqualToString:@"NSProgressFileOperationKindDecompressing"])
    {
      uint64_t v17 = (void *)_NSFoundationBundle();
      uint64_t v18 = @"Decompressing";
    }

    else if ([v16 isEqualToString:@"NSProgressFileOperationKindArchiving"])
    {
      uint64_t v17 = (void *)_NSFoundationBundle();
      uint64_t v18 = @"Archiving";
    }

    else
    {
      unint64_t v24 = [v16 isEqualToString:@"NSProgressFileOperationKindUnarchiving"];
      uint64_t v17 = (void *)_NSFoundationBundle();
      if (v24) {
        uint64_t v18 = @"Unarchiving";
      }
      else {
        uint64_t v18 = @"Processing";
      }
    }

    uint64_t v25 = [v17 localizedStringForKey:v18 value:&stru_189CA6A28 table:@"Progress"];
    if (v33[0])
    {
      unint64_t v26 = [(id)_NSFoundationBundle() localizedStringForKey:@"%@ \\U201C%@\\U201D\\U2026" value:&stru_189CA6A28 table:@"Progress"];
      uint64_t v32 = v33[0];
LABEL_59:
      unint64_t v23 = +[NSString stringWithFormat:](&OBJC_CLASS___NSString, "stringWithFormat:", v26, v25, v32);
      goto LABEL_60;
    }

    if (!v7)
    {
      uint64_t v30 = (void *)_NSFoundationBundle();
      if (v11) {
        uint64_t v31 = @"%@ items\\U2026";
      }
      else {
        uint64_t v31 = @"%@ files\\U2026";
      }
      unint64_t v26 = [v30 localizedStringForKey:v31 value:&stru_189CA6A28 table:@"Progress"];
      goto LABEL_59;
    }

    uint64_t v28 = (void *)_NSFoundationBundle();
    if (v11) {
      uint64_t v29 = @"%@ %lld items…";
    }
    else {
      uint64_t v29 = @"%@ %lld files…";
    }
    unint64_t v23 = +[NSString localizedStringWithValidatedFormat:validFormatSpecifiers:error:]( NSString,  "localizedStringWithValidatedFormat:validFormatSpecifiers:error:",  [v28 localizedStringForKey:v29 value:&stru_189CA6A28 table:@"Progress"],  @"%lld %@",  0,  objc_msgSend(v7, "longLongValue"),  v25);
LABEL_60:
    uint64_t v5 = v23;
    -[NSLock unlock](self->_lock, "unlock");
    if (v5) {
      return v5;
    }
    return (NSString *)&stru_189CA6A28;
  }

  uint64_t v5 = v4;
  -[NSLock unlock](self->_lock, "unlock");
  return v5;
}

__CFString *__NSMapTableCallback(int a1, int a2, uint64_t a3, uint64_t a4, void *a5)
{
  uint64_t v5 = 0LL;
  unint64_t v8 = (void *)a5[1];
  switch(a2)
  {
    case 8:
      unint64_t result = (__CFString *)malloc(0x10uLL);
      if (result)
      {
        uint64_t v5 = (void (*)(void))result;
        *(_OWORD *)&result->isa = *(_OWORD *)a5;
        return (__CFString *)v5;
      }

      qword_18C5D6210 = (uint64_t)"unable to allocate space for callbacks";
      __break(1u);
      return result;
    case 9:
      free(a5);
      return 0LL;
    case 10:
      unint64_t v10 = (void (*)(void))v8[7];
      if (!v10) {
        return (__CFString *)a3;
      }
      goto LABEL_10;
    case 12:
      unint64_t v10 = (void (*)(void))v8[3];
      if (v10) {
LABEL_10:
      }
        v10();
      return (__CFString *)a3;
    case 14:
      uint64_t v5 = (void (*)(void))v8[8];
      if (v5) {
        goto LABEL_12;
      }
      return (__CFString *)v5;
    case 16:
      uint64_t v5 = (void (*)(void))v8[4];
      if (!v5) {
        return (__CFString *)v5;
      }
LABEL_12:
      v5();
      return 0LL;
    case 20:
      uint64_t v11 = (unsigned int (*)(void))v8[2];
      if (v11) {
        return (__CFString *)v11();
      }
      else {
        return (__CFString *)(a3 == a4);
      }
    case 22:
      uint64_t v12 = (uint64_t (*)(void))v8[1];
      if (v12) {
        return (__CFString *)v12();
      }
      return (__CFString *)a3;
    case 24:
      uint64_t v13 = (uint64_t (*)(void))v8[9];
      if (v13) {
        goto LABEL_20;
      }
      return (__CFString *)CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x189604DD0], 0LL, @"<%p>", a3);
    case 26:
      uint64_t v13 = (uint64_t (*)(void))v8[5];
      if (!v13) {
        return (__CFString *)CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x189604DD0], 0LL, @"<%p>", a3);
      }
LABEL_20:
      unint64_t v14 = (const void *)v13();
      return (__CFString *)CFRetain(v14);
    default:
      return (__CFString *)v5;
  }

void NSMapInsert(NSMapTable *table, const void *key, const void *value)
{
  if (!table) {
    NSLog( (NSString *)@"%s: map table argument is NULL",  "void NSMapInsert(NSMapTable * _Nonnull, const void * _Nullable, const void * _Nullable)");
  }
  -[NSMapTable setObject:forKey:](table, "setObject:forKey:", value, key);
}

uint64_t CFBasicHashSetValue(uint64_t result, unint64_t a2)
{
  uint64_t v3 = result;
  uint64_t v13 = *MEMORY[0x1895F89C0];
  uint64_t v4 = *(void *)(result + 16);
  if ((v4 & 0x3F0000) != 0)
  {
    int v5 = v4 & 3;
    switch(v5)
    {
      case 3:
        ___CFBasicHashFindBucket3(result, a2, 0, (unint64_t *)&v11);
        break;
      case 2:
        ___CFBasicHashFindBucket2(result, a2, 0, (unint64_t *)&v11);
        break;
      case 1:
        ___CFBasicHashFindBucket1(result, a2, 0, (unint64_t *)&v11);
        break;
      default:
        __break(1u);
        return result;
    }
  }

  else
  {
    __int128 v6 = *(_OWORD *)(result + 16);
    *(void *)&__int128 v11 = -1LL;
    *((void *)&v11 + 1) = (v6 >> 32) & 0xFFFFFF0000000000LL;
    *(void *)uint64_t v12 = *((void *)&v11 + 1);
    memset(&v12[8], 0, 32);
  }

  if (*(void *)&v12[24])
  {
    __int128 v7 = v11;
    __int128 v8 = *(_OWORD *)v12;
    __int128 v9 = *(_OWORD *)&v12[16];
    uint64_t v10 = *(void *)&v12[32];
    return __CFBasicHashReplaceValue(v3, &v7, a2);
  }

  else
  {
    __int128 v7 = v11;
    __int128 v8 = *(_OWORD *)v12;
    __int128 v9 = *(unint64_t *)&v12[16];
    uint64_t v10 = *(void *)&v12[32];
    return __CFBasicHashAddValue(v3, (uint64_t)&v7, a2);
  }

uint64_t __CFBasicHashAddValue(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v28 = *MEMORY[0x1895F89C0];
  ++*(_WORD *)(a1 + 30);
  uint64_t result = (**(uint64_t (***)(void))(a1 + 32))();
  uint64_t v9 = result;
  unint64_t v10 = *(void *)(a1 + 16);
  if ((v10 & 0x18) != 0)
  {
    uint64_t result = (**(uint64_t (***)(uint64_t, uint64_t, uint64_t, void))(a1 + 32))(a1, 12LL, a3, 0LL);
    unint64_t v11 = result;
    unint64_t v10 = *(void *)(a1 + 16);
    uint64_t v12 = *(void *)(a1 + 24);
    if ((v10 & 4) == 0)
    {
LABEL_3:
      uint64_t v13 = 0LL;
      goto LABEL_6;
    }
  }

  else
  {
    uint64_t v12 = *(void *)(a1 + 24);
    unint64_t v11 = result;
    if ((v10 & 4) == 0) {
      goto LABEL_3;
    }
  }

  uint64_t result = (**(uint64_t (***)(uint64_t, uint64_t, void, void))(a1 + 32))(a1, 11LL, 0LL, 0LL);
  uint64_t v13 = result;
  unint64_t v10 = *(void *)(a1 + 16);
  uint64_t v12 = *(void *)(a1 + 24);
LABEL_6:
  if ((v10 & 0x60) != 0)
  {
    uint64_t result = (**(uint64_t (***)(uint64_t, uint64_t, void, void))(a1 + 32))(a1, 13LL, 0LL, 0LL);
    uint64_t v14 = result;
    unint64_t v10 = *(void *)(a1 + 16);
    uint64_t v12 = *(void *)(a1 + 24);
  }

  else
  {
    uint64_t v14 = 0LL;
  }

  if (__CFBasicHashTableCapacities[(v10 >> 16) & 0x3F] <= v10 >> 22)
  {
    __CFBasicHashRehash(a1, 1LL);
    int v15 = *(_DWORD *)(a1 + 16) & 3;
    switch(v15)
    {
      case 3:
        uint64_t result = ___CFBasicHashFindBucket3(a1, v11, 1, (unint64_t *)v26);
        break;
      case 2:
        uint64_t result = ___CFBasicHashFindBucket2(a1, v11, 1, (unint64_t *)v26);
        break;
      case 1:
        uint64_t result = ___CFBasicHashFindBucket1(a1, v11, 1, (unint64_t *)v26);
        break;
      default:
        goto LABEL_43;
    }

    __int128 v16 = v26[1];
    *(_OWORD *)a2 = v26[0];
    *(_OWORD *)(a2 + 16) = v16;
    *(_OWORD *)(a2 + 32) = v26[2];
    *(void *)(a2 + 4_Block_object_dispose(va, 8) = v27;
    unint64_t v10 = *(void *)(a1 + 16);
    uint64_t v12 = *(void *)(a1 + 24);
  }

  *((void *)&v17 + 1) = v12;
  *(void *)&__int128 v17 = v10;
  uint64_t v18 = (v17 >> 32) & 0xFFFFFF0000000000LL;
  if (*(void *)(a2 + 8) == ~v18)
  {
    *(void *)(a1 + 16) = v10;
    *(void *)(a1 + 24) = v12 & 0xFFFF0000FFFFFFFFLL | ((unint64_t)(unsigned __int16)(WORD2(v12) - 1) << 32);
  }

  if (v11 == v18 || v11 == ~v18) {
    uint64_t result = __CFBasicHashFindNewMarker(a1, v11, v7, v8);
  }
  *(void *)(*(void *)(a1 + 40) + 8LL * *(void *)a2) = v9;
  unint64_t v20 = *(void *)(a1 + 16);
  if ((v20 & 4) != 0)
  {
    *(void *)(*(void *)(a1 + 48) + 8LL * *(void *)a2) = v13;
    unint64_t v20 = *(void *)(a1 + 16);
  }

  uint64_t v21 = *(void *)(a1 + 24);
  if ((v20 & 0x18) != 0)
  {
    uint64_t v22 = (v20 >> 3) & 3;
    if (!v22) {
      goto LABEL_43;
    }
    *(void *)(*(void *)(a1 + 8 * v22 + 40) + 8LL * *(void *)a2) = v11;
    unint64_t v20 = *(void *)(a1 + 16);
    uint64_t v21 = *(void *)(a1 + 24);
  }

  if ((v20 & 0x60) != 0)
  {
    uint64_t v23 = (v20 >> 5) & 3;
    if (!v23) {
      goto LABEL_43;
    }
    *(void *)(*(void *)(a1 + 8 * v23 + 40) + 8LL * *(void *)a2) = v14;
    unint64_t v20 = *(void *)(a1 + 16);
    uint64_t v21 = *(void *)(a1 + 24);
  }

  if ((v20 & 0x380) != 0)
  {
    uint64_t v24 = (v20 >> 7) & 7;
    if (!v24) {
      goto LABEL_43;
    }
    *(void *)(*(void *)(a1 + 8 * v24 + 40) + 8LL * *(void *)a2) = 1LL;
    unint64_t v20 = *(void *)(a1 + 16);
    uint64_t v21 = *(void *)(a1 + 24);
  }

  if ((v20 & 0x1C00) != 0)
  {
    uint64_t v25 = (v20 >> 10) & 7;
    if (!v25) {
      goto LABEL_43;
    }
    *(void *)(*(void *)(a1 + 8 * v25 + 40) + 8LL * *(void *)a2) = 0LL;
    unint64_t v20 = *(void *)(a1 + 16);
    uint64_t v21 = *(void *)(a1 + 24);
  }

  if ((v20 & 0xE000) != 0)
  {
    uint64_t result = (**(uint64_t (***)(uint64_t, uint64_t, unint64_t, void))(a1 + 32))(a1, 22LL, v11, 0LL);
    if ((unsigned __int16)*(void *)(a1 + 16) >> 13)
    {
      *(void *)(*(void *)(a1 + 8LL * ((unsigned __int16)*(void *)(a1 + 16) >> 13) + 40) + 8LL * *(void *)a2) = result;
      unint64_t v20 = *(void *)(a1 + 16);
      uint64_t v21 = *(void *)(a1 + 24);
      goto LABEL_42;
    }

LABEL_43:
    __break(1u);
  }

          uint64_t v31 = (v42 - 1) & v42;
          v78 = v43;
          unint64_t v33 = __clz(__rbit64(v42)) + (v43 << 6);
        }

        char v34 = 8 * v33;
        uint64_t v35 = *(void *)(*(void *)(v13 + 48) + 8 * v33);
        uint64_t v36 = 16 * v33;
        unint64_t v37 = (uint64_t *)(*(void *)(v13 + 56) + v36);
        unint64_t v39 = *v37;
        unint64_t v38 = v37[1];
        *(void *)(*(void *)(v19 + 48) + v34) = v35;
        uint64_t v40 = (void *)(*(void *)(v19 + 56) + v36);
        *uint64_t v40 = v39;
        v40[1] = v38;
        swift_bridgeObjectRetain();
        uint64_t v28 = v78;
      }
    }

              LOBYTE(v24) = 0;
LABEL_44:
              int v5 = v70;
              uint64_t v12 = v71;
              goto LABEL_38;
            }

            if (v117)
            {
              swift_bridgeObjectRetain();
              int v59 = swift_bridgeObjectRetain();
              uint64_t v60 = specialized static Dictionary<>.== infix(_:_:)(v59, v24);
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              if ((v60 & 1) == 0) {
                goto LABEL_138;
              }
              goto LABEL_123;
            }

          if (v46)
          {
LABEL_153:
            __break(1u);
LABEL_154:
            __break(1u);
LABEL_155:
            __break(1u);
LABEL_156:
            __break(1u);
            goto LABEL_157;
          }

    uint64_t v23 = 0;
LABEL_132:
    swift_bridgeObjectRelease();
  }

  return v23 & 1;
}

          uint64_t v25 = a5;
LABEL_44:
          if (v25)
          {
LABEL_10:
            if (v10 >= a2) {
              goto LABEL_54;
            }
            int v15 = v10;
            __int128 v16 = 1LL;
          }

          else
          {
LABEL_45:
            if (v10 >= a2) {
              goto LABEL_56;
            }
            *(_BYTE *)(a1 + v10) = 37;
            unint64_t v26 = specialized StringProtocol.hexToAscii(_:)(v21 >> 4);
            if (v10 + 1 >= a2) {
              goto LABEL_57;
            }
            *(_BYTE *)(a1 + v10 + 1) = v26;
            int v15 = v10 + 2;
            uint64_t v27 = specialized StringProtocol.hexToAscii(_:)(v21 & 0xF);
            if (v10 + 2 >= a2) {
              goto LABEL_58;
            }
            uint64_t v21 = v27;
            __int128 v16 = 3LL;
            uint64_t v14 = a3;
          }

          *(_BYTE *)(a1 + v15) = v21;
          v10 += v16;
          if (v31 == v13 >> 14) {
            goto LABEL_51;
          }
          break;
      }
    }
  }

  uint64_t result = _StringGuts._slowEnsureMatchingEncoding(_:)(v52, v146, v45);
  v76 = result >> 16;
  if ((v45 & 0x1000000000000000LL) == 0) {
    goto LABEL_19;
  }
LABEL_44:
  if (v145 >= v76)
  {
    uint64_t result = String.UTF8View._foreignDistance(from:to:)();
LABEL_19:
    if ((id)(v50 & 0xC) == v54)
    {
      uint64_t result = _StringGuts._slowEnsureMatchingEncoding(_:)(v50, v146, v45);
      unint64_t v50 = result;
      if ((v45 & 0x1000000000000000LL) == 0) {
        goto LABEL_21;
      }
    }

    else if ((v45 & 0x1000000000000000LL) == 0)
    {
LABEL_21:
      swift_bridgeObjectRelease();
      v146 = v50 >> 16;
LABEL_49:
      BigString.utf8.getter();
      v118 = BigString.UTF8View.index(_:offsetBy:)();
      v70 = v119;
      v71 = v120;
      v122 = v121;
      outlined release of Locale((uint64_t)&v153);
      BigString.utf8.getter();
      v123 = BigString.UTF8View.index(_:offsetBy:)();
      uint64_t v32 = v124;
      v72 = v125;
      v127 = v126;
      outlined release of Locale((uint64_t)v155);
      uint64_t result = outlined release of Locale((uint64_t)v154);
      if (v123 >> 10 >= v118 >> 10)
      {
        v128 = v142;
        *v142 = v118;
        v128[1] = v70;
        v128[2] = v71;
        v128[3] = v122;
        v128[4] = v123;
        v128[5] = (unint64_t)v32;
        v128[6] = v72;
        v128[7] = v127;
        return result;
      }

      __break(1u);
      goto LABEL_52;
    }

    if (v145 < v50 >> 16)
    {
      __break(1u);
      goto LABEL_54;
    }

    v146 = String.UTF8View._foreignDistance(from:to:)();
    swift_bridgeObjectRelease();
    goto LABEL_49;
  }

      uint64_t v25 = v110;
      unint64_t v26 = v112;
      uint64_t v22 = v128;
      if (v110 > v6)
      {
        if ((v6 & 0x8000000000000000LL) == 0)
        {
          rawValue = *(void **)(v20 + 3056);
          if ((unint64_t)v6 >= rawValue[2])
          {
            __break(1u);
            goto LABEL_161;
          }

  MEMORY[0x1895F8858](v87);
  v94 = v115;
  *(&v100 - 10) = v6;
  *(&v100 - 9) = v94;
  *(&v100 - _Block_object_dispose(va, 8) = v110;
  v95 = v101;
  *(&v100 - 7) = *(void *)(v101 + 8);
  v78 = v118;
  *(&v100 - 6) = *(void *)(v95 + 24);
  *(&v100 - 5) = (uint64_t)v78;
  v96 = v112;
  *(&v100 - 4) = v120;
  *(&v100 - 3) = v96;
  v98 = v111;
  v99 = v116;
  specialized _withPredicateArchivingState<A>(_:_:)( v114,  v113,  (char)v121,  (void (*)(uint64_t))partial apply for closure #1 in KeyedEncodingContainer<>._encode<A, B>(_:variable:predicateConfiguration:));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v122);
  if (v59)
  {
    v86 = v106;
    goto LABEL_46;
  }

  (*(void (**)(char *, uint64_t))(v106 + 8))(v78, v117);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v130);
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v133);
}

  MEMORY[0x1895F8858](v87);
  v94 = v115;
  *(&v100 - 10) = v6;
  *(&v100 - 9) = v94;
  *(&v100 - _Block_object_dispose(va, 8) = v110;
  v95 = v101;
  *(&v100 - 7) = *(void *)(v101 + 8);
  v78 = v118;
  *(&v100 - 6) = *(void *)(v95 + 24);
  *(&v100 - 5) = (uint64_t)v78;
  v96 = v112;
  *(&v100 - 4) = v120;
  *(&v100 - 3) = v96;
  v98 = v111;
  v99 = v116;
  specialized _withPredicateArchivingState<A>(_:_:)( v114,  v113,  (char)v121,  (void (*)(uint64_t))partial apply for closure #1 in KeyedEncodingContainer<>._encode<A, B>(_:variable:predicateConfiguration:));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v122);
  if (v59)
  {
    v86 = v106;
    goto LABEL_46;
  }

  (*(void (**)(char *, uint64_t))(v106 + 8))(v78, v117);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v130);
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v133);
}

        unint64_t v45 = v152;
        unint64_t v47 = v144;
      }

      else
      {
        unint64_t v45 = v152;
        v65 = v48;
      }

      __break(1u);
      goto LABEL_44;
    }

    while (1)
    {
      unint64_t v20 = __OFSUB__(v17--, 1LL);
      if (v20) {
        break;
      }
      if (v17 < a5 || v22 - v16 - 2 >= v15) {
        goto LABEL_42;
      }
      if (v17 < v21) {
        return 0LL;
      }
      uint64_t result = specialized DataProtocol.matches<A>(_:from:)(a1, v17, a3, a4, a5, a6, a8);
      if ((result & 1) != 0) {
        goto LABEL_19;
      }
    }

    __break(1u);
LABEL_44:
    __break(1u);
    return result;
  }

  *(void *)(a7 + 32) = 0LL;
  *(_OWORD *)a7 = 0u;
  *(_OWORD *)(a7 + 16) = 0u;
  *(_BYTE *)(a7 + 40) = 1;
  return result;
}

  __break(1u);
  return result;
}

                Hasher._combine(_:)(0);
                goto LABEL_44;
              }
            }

            Hasher._combine(_:)(0);
            if (v54) {
              goto LABEL_40;
            }
            goto LABEL_43;
          }

      __break(1u);
      goto LABEL_44;
    }

    uint64_t result = unum_setAttribute();
    if (v7 < (uint64_t)0xFFFFFFFF80000000LL)
    {
      __break(1u);
    }

    else if (v7 <= 0x7FFFFFFF)
    {
      uint64_t result = unum_setAttribute();
      if ((v8 & 1) != 0) {
        return result;
      }
      if (v6 >= (uint64_t)0xFFFFFFFF80000000LL)
      {
        if (v6 <= 0x7FFFFFFF) {
          return unum_setAttribute();
        }
        goto LABEL_36;
      }

  uint64_t result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

                unint64_t v49 = v61;
                goto LABEL_44;
              }

              v49 -= v63;
            }

  if (v60 < 0 || (uint64_t v31 = &v59[3 * v30], *v31 < v60))
  {
LABEL_82:
    __break(1u);
LABEL_83:
    __break(1u);
    return result;
  }

  if (v60)
  {
    unint64_t v33 = v31[1];
    uint64_t v32 = v31[2];
    char v34 = a5[4];
    uint64_t v35 = a5[5];
    uint64_t v36 = a5[6];
    a5[5] = 0LL;
    a5[6] = 0LL;
    a5[4] = 0LL;
    if (v35)
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      specialized Rope.Builder._appendNow(_:)(v34, v35, v36);
      outlined consume of Rope<AttributedString._InternalRun>._Item?(a5[4], a5[5]);
      a5[4] = v60;
      a5[5] = v33;
      a5[6] = v32;
    }

    else
    {
      a5[4] = v60;
      a5[5] = v33;
      a5[6] = v32;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
  }

  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

  *a3 = v30;
  a3[1] = v83;
  a3[2] = v66;
  a3[3] = v64;
  a3[4] = v34;
  a3[5] = v35;
  a3[6] = v36;
  a3[7] = v38;
  a3[8] = v31;
  a3[9] = v32;
  a3[10] = v33;
  a3[11] = v37;
  return result;
}

  v230 = v8;
  v232 = v10;
  swift_retain();
  swift_retain();
  v234 = v5;
  v231 = v9;
  if (_foundation_swift_url_feature_enabled())
  {
    v239 = v6;
    v229 = v232;
    swift_retain();
    swift_retain();
    id v52 = URL.path(percentEncoded:)(1);
    uint64_t v53 = v52._countAndFlagsBits;
    v238 = v52;
    swift_bridgeObjectRetain();
    if (String.count.getter() <= 1)
    {
      v54 = (unint64_t)v52._object;
    }

    else
    {
      v54 = (unint64_t)v52._object;
      if ((specialized BidirectionalCollection.last.getter(v52._countAndFlagsBits, (unint64_t)v52._object) & 0x1FF) == 0x2F)
      {
        specialized RangeReplaceableCollection<>.popLast()();
        swift_bridgeObjectRelease();
        uint64_t v53 = v238._countAndFlagsBits;
        v54 = (unint64_t)v238._object;
      }
    }

    v236._countAndFlagsBits = Set.init(minimumCapacity:)();
    v75 = specialized Set._Variant.insert(_:)(&v237, 0x2FuLL);
    v76 = v236._countAndFlagsBits;
    v77 = HIBYTE(v54) & 0xF;
    if ((v54 & 0x2000000000000000LL) == 0) {
      v77 = v53 & 0xFFFFFFFFFFFFLL;
    }
    if (v77)
    {
      v236._countAndFlagsBits = v53;
      v236._object = (void *)v54;
      MEMORY[0x1895F8858](v75);
      v225 = (uint64_t)&v236;
      v226 = v76;
      swift_bridgeObjectRetain();
      v78 = v235;
      v79 = specialized String.UTF8View.withContiguousStorageIfAvailable<A>(_:)( (void *(*)(__int128 *__return_ptr, void *, uint64_t))closure #1 in StringProtocol.removingURLPercentEncoding(excluding:)specialized partial apply,  (uint64_t)v224,  v53,  v54);
      v235 = v78;
      if (v80 == 1)
      {
        v81 = (unint64_t)v236._object;
        v82 = v236._countAndFlagsBits;
        swift_bridgeObjectRetain();
        v83 = (uint64_t)specialized StringProtocol.removingURLPercentEncoding<A>(utf8Buffer:excluding:)(v82, v81, v76);
        v85 = v84;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v86 = v229;
        if (!v85) {
          goto LABEL_79;
        }
      }

      else
      {
        v103 = v79;
        v85 = v80;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v83 = (uint64_t)v103;
        v86 = v229;
        if (!v85)
        {
LABEL_79:
          swift_release();
          swift_release();

          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          v83 = 0LL;
          v85 = 0xE000000000000000LL;
          goto LABEL_80;
        }
      }
    }

    else
    {
      swift_bridgeObjectRelease();
      v83 = 0LL;
      v85 = 0xE000000000000000LL;
      v86 = v229;
    }

    swift_release();
    swift_release();

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
LABEL_80:
    swift_release();
    swift_release();

    uint64_t v9 = v231;
    goto LABEL_81;
  }

  v55 = objc_msgSend(v232, sel__parameterString);
  if (v55)
  {
    v56 = v55;
    v57 = static String._unconditionallyBridgeFromObjectiveC(_:)(v55);
    int v59 = v58;

    if (getEnumTag for _DarwinSearchPathsSequence.Iterator.State()
      && (uint64_t v60 = objc_msgSend(v232, sel_path)) != 0)
    {
      v61 = v60;
      v62 = static String._unconditionallyBridgeFromObjectiveC(_:)(v60);
      v63 = v9;
      v65 = v64;

      v238._countAndFlagsBits = (uint64_t)v62;
      v238._object = v65;
      swift_bridgeObjectRetain();
      v66._countAndFlagsBits = 59LL;
      v66._object = (void *)0xE100000000000000LL;
      String.append(_:)(v66);
      uint64_t v9 = v63;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRetain();
      v67._countAndFlagsBits = (uint64_t)v57;
      v67._object = v59;
      String.append(_:)(v67);
      swift_release();
      swift_release();

      swift_bridgeObjectRelease();
    }

    else
    {
      v238._countAndFlagsBits = 59LL;
      v238._object = (void *)0xE100000000000000LL;
      v99._countAndFlagsBits = (uint64_t)v57;
      v99._object = v59;
      String.append(_:)(v99);
      swift_release();
      swift_release();
    }

    swift_bridgeObjectRelease();
    v83 = v238._countAndFlagsBits;
    v85 = (unint64_t)v238._object;
  }

  else
  {
    v100 = objc_msgSend(v232, sel_path);
    if (v100)
    {
      v101 = v100;
      v83 = (uint64_t)static String._unconditionallyBridgeFromObjectiveC(_:)(v100);
      v85 = v102;
      swift_release();
      swift_release();
    }

    else
    {
      swift_release();
      swift_release();

      v83 = 0LL;
      v85 = 0xE000000000000000LL;
    }
  }

              uint64_t v24 = 0;
              goto LABEL_38;
            }
          }

          goto LABEL_36;
        }

  Hasher._combine(_:)(0);
  uint64_t v40 = 0LL;
LABEL_44:

  unint64_t v45 = v65;
  if (v45)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    specialized Dictionary<>.hash(into:)((uint64_t)v75, v45);
    swift_bridgeObjectRelease();
    unint64_t v46 = v66;
    if (v66) {
      goto LABEL_46;
    }
LABEL_49:
    Hasher._combine(_:)(0);
    if (v67) {
      goto LABEL_47;
    }
LABEL_50:
    Hasher._combine(_:)(0);
    goto LABEL_51;
  }

  Hasher._combine(_:)(0);
  unint64_t v46 = v66;
  if (!v66) {
    goto LABEL_49;
  }
LABEL_46:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)((uint64_t)v75, v46);
  swift_bridgeObjectRelease();
  if (!v67) {
    goto LABEL_50;
  }
LABEL_47:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
LABEL_51:
  if (v68 == 2)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    unint64_t v47 = v68 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v47);
  }

  if (v69 == 2)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    unint64_t v48 = v69 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v48);
  }

  if (v70 == 2)
  {
    unint64_t v49 = 0;
  }

  else
  {
    unint64_t v49 = v70 & 1;
    Hasher._combine(_:)(1u);
  }

  Hasher._combine(_:)(v49);
  if (v71 == 2)
  {
    unint64_t v50 = 0;
  }

  else
  {
    v51 = v71 & 1;
    Hasher._combine(_:)(1u);
    unint64_t v50 = v51;
  }

  Hasher._combine(_:)(v50);
  outlined retain of LocalePreferences?( (uint64_t)v73,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined consume of LocalePreferences?);
  outlined retain of LocalePreferences?( (uint64_t)v73,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined consume of LocalePreferences?);
  return Hasher._finalize()();
}

  Hasher._combine(_:)(0);
  int v44 = 0LL;
LABEL_44:

  unint64_t v49 = v68;
  if (v49)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    specialized Dictionary<>.hash(into:)(a1, v49);
    swift_bridgeObjectRelease();
    unint64_t v50 = v69;
    if (v69) {
      goto LABEL_46;
    }
LABEL_49:
    Hasher._combine(_:)(0);
    if (v70) {
      goto LABEL_47;
    }
LABEL_50:
    Hasher._combine(_:)(0);
    goto LABEL_51;
  }

  Hasher._combine(_:)(0);
  unint64_t v50 = v69;
  if (!v69) {
    goto LABEL_49;
  }
LABEL_46:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)(a1, v50);
  swift_bridgeObjectRelease();
  if (!v70) {
    goto LABEL_50;
  }
LABEL_47:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
LABEL_51:
  if (v71 == 2)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    v51 = v71 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v51);
  }

  if (v72 == 2)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    id v52 = v72 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v52);
  }

  if (v73 == 2)
  {
    uint64_t v53 = 0;
  }

  else
  {
    uint64_t v53 = v73 & 1;
    Hasher._combine(_:)(1u);
  }

  Hasher._combine(_:)(v53);
  if (v74 == 2)
  {
    v54 = 0;
  }

  else
  {
    v55 = v74 & 1;
    Hasher._combine(_:)(1u);
    v54 = v55;
  }

  Hasher._combine(_:)(v54);
  outlined retain of LocalePreferences?( (uint64_t)v76,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined consume of LocalePreferences?);
  outlined retain of LocalePreferences?( (uint64_t)v76,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined consume of LocalePreferences?);
}

  Hasher._combine(_:)(0);
  int v42 = 0LL;
LABEL_44:

  unint64_t v47 = v66;
  if (v47)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    specialized Dictionary<>.hash(into:)((uint64_t)v76, v47);
    swift_bridgeObjectRelease();
    unint64_t v48 = v67;
    if (v67) {
      goto LABEL_46;
    }
LABEL_49:
    Hasher._combine(_:)(0);
    if (v68) {
      goto LABEL_47;
    }
LABEL_50:
    Hasher._combine(_:)(0);
    goto LABEL_51;
  }

  Hasher._combine(_:)(0);
  unint64_t v48 = v67;
  if (!v67) {
    goto LABEL_49;
  }
LABEL_46:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)((uint64_t)v76, v48);
  swift_bridgeObjectRelease();
  if (!v68) {
    goto LABEL_50;
  }
LABEL_47:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
LABEL_51:
  if (v69 == 2)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    unint64_t v49 = v69 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v49);
  }

  if (v70 == 2)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    unint64_t v50 = v70 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v50);
  }

  if (v71 == 2)
  {
    v51 = 0;
  }

  else
  {
    v51 = v71 & 1;
    Hasher._combine(_:)(1u);
  }

  Hasher._combine(_:)(v51);
  if (v72 == 2)
  {
    id v52 = 0;
  }

  else
  {
    uint64_t v53 = v72 & 1;
    Hasher._combine(_:)(1u);
    id v52 = v53;
  }

  Hasher._combine(_:)(v52);
  outlined retain of LocalePreferences?( (uint64_t)v74,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined consume of LocalePreferences?);
  outlined retain of LocalePreferences?( (uint64_t)v74,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined consume of LocalePreferences?);
  return Hasher._finalize()();
}

    swift_release();
    swift_release();
    unint64_t v43 = static _SetStorage.allocate(capacity:)();
    int v44 = v43 + 56;
    Hasher.init(_seed:)();
    Hasher._combine(_:)(v77);
    unint64_t v11 = Hasher._finalize()();
    unint64_t v45 = -1LL << *(_BYTE *)(v43 + 32);
    unint64_t v46 = v11 & ~v45;
    unint64_t v47 = v46 >> 6;
    unint64_t v48 = *(void *)(v43 + 56 + 8 * (v46 >> 6));
    unint64_t v49 = 1LL << v46;
    unint64_t v50 = *(void *)(v43 + 48);
    if (((1LL << v46) & v48) == 0) {
      goto LABEL_52;
    }
    v51 = ~v45;
    unint64_t v46 = (v46 + 1) & v51;
    unint64_t v47 = v46 >> 6;
    unint64_t v48 = *(void *)(v44 + 8 * (v46 >> 6));
    unint64_t v49 = 1LL << v46;
    if ((v48 & (1LL << v46)) == 0) {
      goto LABEL_52;
    }
    unint64_t v46 = (v46 + 1) & v51;
    unint64_t v47 = v46 >> 6;
    unint64_t v48 = *(void *)(v44 + 8 * (v46 >> 6));
    unint64_t v49 = 1LL << v46;
    if ((v48 & (1LL << v46)) == 0) {
      goto LABEL_52;
    }
    unint64_t v46 = (v46 + 1) & v51;
    unint64_t v47 = v46 >> 6;
    unint64_t v48 = *(void *)(v44 + 8 * (v46 >> 6));
    unint64_t v49 = 1LL << v46;
    if ((v48 & (1LL << v46)) != 0)
    {
      while (*(unsigned __int8 *)(v50 + v46) != (_DWORD)v77)
      {
        unint64_t v46 = (v46 + 1) & v51;
        unint64_t v47 = v46 >> 6;
        unint64_t v48 = *(void *)(v44 + 8 * (v46 >> 6));
        unint64_t v49 = 1LL << v46;
        if ((v48 & (1LL << v46)) == 0) {
          goto LABEL_52;
        }
      }
    }

    else
    {
LABEL_52:
      *(void *)(v44 + 8 * v47) = v49 | v48;
      *(_BYTE *)(v50 + v46) = v77;
      id v52 = *(void *)(v43 + 16);
      uint64_t v21 = __OFADD__(v52, 1LL);
      uint64_t v53 = v52 + 1;
      if (v21) {
        goto LABEL_101;
      }
      *(void *)(v43 + 16) = v53;
    }

  __break(1u);
LABEL_44:
  __break(1u);
  return result;
}

        uint64_t v30 = result;
        uint64_t v31 = v22;
        specialized RangeReplaceableCollection.removeFirst(_:)(1LL);
        return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8))(v30, v31);
      }

    uint64_t v29 = (v44 - 1) & v44;
    unint64_t v49 = v45;
    uint64_t v31 = __clz(__rbit64(v44)) + (v45 << 6);
LABEL_20:
    uint64_t v32 = 16 * v31;
    unint64_t v33 = (uint64_t *)(*(void *)(v12 + 48) + 16 * v31);
    char v34 = *v33;
    uint64_t v35 = v33[1];
    uint64_t v36 = 32 * v31;
    unint64_t v37 = *(void *)(v12 + 56) + v36;
    unint64_t v38 = *(void *)v37;
    unint64_t v39 = *(_BYTE *)(v37 + 8);
    uint64_t v40 = *(void *)(v37 + 16);
    LOBYTE(v37) = *(_BYTE *)(v37 + 24);
    unint64_t v41 = (void *)(*(void *)(v18 + 48) + v32);
    *unint64_t v41 = v34;
    v41[1] = v35;
    int v42 = *(void *)(v18 + 56) + v36;
    *(void *)int v42 = v38;
    *(_BYTE *)(v42 + _Block_object_dispose(va, 8) = v39;
    *(void *)(v42 + 16) = v40;
    *(_BYTE *)(v42 + 24) = v37;
    swift_retain();
    swift_bridgeObjectRetain();
    unint64_t v26 = v49;
  }

  unint64_t v46 = v26 + 8;
  if (v26 + 8 >= v48) {
    goto LABEL_44;
  }
  int v44 = *(void *)(v47 + 8 * v46);
  if (v44)
  {
    unint64_t v45 = v26 + 8;
    goto LABEL_43;
  }

  while (1)
  {
    unint64_t v45 = v46 + 1;
    if (__OFADD__(v46, 1LL)) {
      break;
    }
    if (v45 >= v48) {
      goto LABEL_44;
    }
    int v44 = *(void *)(v47 + 8 * v45);
    ++v46;
    if (v44) {
      goto LABEL_43;
    }
  }

    uint64_t v30 = (v45 - 1) & v45;
    unint64_t v50 = v46;
    uint64_t v32 = __clz(__rbit64(v45)) + (v46 << 6);
LABEL_20:
    unint64_t v33 = 16 * v32;
    char v34 = (uint64_t *)(*(void *)(v13 + 48) + 16 * v32);
    uint64_t v35 = *v34;
    uint64_t v36 = v34[1];
    unint64_t v37 = 32 * v32;
    unint64_t v38 = *(void *)(v13 + 56) + v37;
    unint64_t v39 = *(void *)v38;
    uint64_t v40 = *(_BYTE *)(v38 + 8);
    unint64_t v41 = *(void *)(v38 + 16);
    LOBYTE(v3_Block_object_dispose(va, 8) = *(_BYTE *)(v38 + 24);
    int v42 = (void *)(*(void *)(v19 + 48) + v33);
    *int v42 = v35;
    v42[1] = v36;
    unint64_t v43 = *(void *)(v19 + 56) + v37;
    *(void *)unint64_t v43 = v39;
    *(_BYTE *)(v43 + _Block_object_dispose(va, 8) = v40;
    *(void *)(v43 + 16) = v41;
    *(_BYTE *)(v43 + 24) = v38;
    swift_retain();
    swift_bridgeObjectRetain();
    uint64_t v27 = v50;
  }

  unint64_t v47 = v27 + 8;
  if (v27 + 8 >= v49) {
    goto LABEL_44;
  }
  unint64_t v45 = *(void *)(v48 + 8 * v47);
  if (v45)
  {
    unint64_t v46 = v27 + 8;
    goto LABEL_43;
  }

  while (1)
  {
    unint64_t v46 = v47 + 1;
    if (__OFADD__(v47, 1LL)) {
      break;
    }
    if (v46 >= v49) {
      goto LABEL_44;
    }
    unint64_t v45 = *(void *)(v48 + 8 * v46);
    ++v47;
    if (v45) {
      goto LABEL_43;
    }
  }

  __break(1u);
  return result;
}

        __break(1u);
LABEL_44:
        __break(1u);
LABEL_45:
        __break(1u);
LABEL_46:
        __break(1u);
LABEL_47:
        __break(1u);
LABEL_48:
        __break(1u);
LABEL_49:
        __break(1u);
        return result;
      }

      goto LABEL_40;
    }

    if (v34 == v9) {
      uint64_t v13 = v8;
    }
    else {
      uint64_t v13 = 1;
    }
    uint64_t result = 1;
    if ((v13 & 1) == 0 && v7 < 86400.0)
    {
      uint64_t v32 = 112LL;
      uint64_t v29 = value;
      __dst[0] = *(_OWORD *)(v3 + 104);
      swift_unknownObjectRetain();
      _CalendarGregorian.dateComponents(_:from:in:)(&v32, &v29, (uint64_t *)__dst, __src);
      swift_unknownObjectRelease();
      uint64_t result = memcpy(__dst, __src, 0x11AuLL);
      if ((BYTE8(__dst[7]) & 1) != 0 || (BYTE8(__dst[8]) & 1) != 0 || (BYTE8(__dst[9]) & 1) != 0) {
        goto LABEL_49;
      }
      uint64_t v14 = *(void *)&__dst[7];
      int v15 = *(void *)&__dst[8];
      __int128 v16 = *(void *)&__dst[9];
      uint64_t result = outlined release of DateComponents((uint64_t)__dst);
      __int128 v17 = 3600 * v14;
      if ((unsigned __int128)(v14 * (__int128)3600LL) >> 64 == (3600 * v14) >> 63)
      {
        uint64_t v18 = 60 * v15;
        if ((unsigned __int128)(v15 * (__int128)60LL) >> 64 == (60 * v15) >> 63)
        {
          unint64_t v19 = __OFADD__(v17, v18);
          unint64_t v20 = v17 + v18;
          if (!v19)
          {
            unint64_t v19 = __OFADD__(v20, v16);
            uint64_t v21 = v20 + v16;
            if (!v19) {
              return v7 > (double)v21;
            }
            goto LABEL_45;
          }

          goto LABEL_42;
        }

  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

    *(void *)(v35 + 8 * (v30 >> 6) + 64) |= 1LL << v30;
    unint64_t v38 = (uint64_t *)(*(void *)(v35 + 48) + 16 * v30);
    *unint64_t v38 = v28;
    v38[1] = v27;
    *(_OWORD *)(*(void *)(v35 + 56) + 16 * v30) = v70;
    unint64_t v39 = *(void *)(v35 + 16);
    uint64_t v40 = __OFADD__(v39, 1LL);
    unint64_t v41 = v39 + 1;
    if (v40) {
      goto LABEL_80;
    }
    *(void *)(v35 + 16) = v41;
LABEL_18:
    isUniquelyReferenced_nonNull_native = 1;
    uint64_t v13 = v35;
  }

  if ((isUniquelyReferenced_nonNull_native & 1) != 0)
  {
    uint64_t v35 = v13;
    if ((v29 & 1) != 0) {
      goto LABEL_17;
    }
    goto LABEL_43;
  }

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, AttributedStringKey.Type>);
  int v42 = static _DictionaryStorage.copy(original:)();
  uint64_t v35 = v42;
  if (!*(void *)(v13 + 16))
  {
LABEL_74:
    swift_release();
    v71 = (void *)v35;
    if ((v34 & 1) != 0) {
      goto LABEL_17;
    }
    goto LABEL_43;
  }

  unint64_t v43 = (void *)(v42 + 64);
  int v44 = (unint64_t)((1LL << *(_BYTE *)(v35 + 32)) + 63) >> 6;
  v62 = v13 + 64;
  unint64_t v45 = 0LL;
  *(void *)(v35 + 16) = *(void *)(v13 + 16);
  unint64_t v46 = 1LL << *(_BYTE *)(v13 + 32);
  if (v46 < 64) {
    unint64_t v47 = ~(-1LL << v46);
  }
  else {
    unint64_t v47 = -1LL;
  }
  unint64_t v48 = v47 & *(void *)(v13 + 64);
  v63 = (unint64_t)(v46 + 63) >> 6;
  while (2)
  {
    if (v48)
    {
      unint64_t v49 = __clz(__rbit64(v48));
      v48 &= v48 - 1;
      v64 = v45;
      unint64_t v50 = v49 | (v45 << 6);
LABEL_54:
      v51 = 16 * v50;
      id v52 = (uint64_t *)(*(void *)(v13 + 48) + v51);
      v54 = *v52;
      uint64_t v53 = v52[1];
      v55 = *(_OWORD *)(*(void *)(v13 + 56) + v51);
      v56 = (void *)(*(void *)(v35 + 48) + v51);
      CFStringRef v56 = v54;
      v56[1] = v53;
      *(_OWORD *)(*(void *)(v35 + 56) + v51) = v55;
      swift_bridgeObjectRetain();
      unint64_t v45 = v64;
      continue;
    }

    break;
  }

  v57 = v45 + 1;
  if (__OFADD__(v45, 1LL)) {
    goto LABEL_83;
  }
  if (v57 >= v63) {
    goto LABEL_74;
  }
  unint64_t v58 = *(void *)(v62 + 8 * v57);
  int v59 = v45 + 1;
  if (v58) {
    goto LABEL_73;
  }
  int v59 = v45 + 2;
  if (v45 + 2 >= v63) {
    goto LABEL_74;
  }
  unint64_t v58 = *(void *)(v62 + 8 * v59);
  if (v58) {
    goto LABEL_73;
  }
  int v59 = v45 + 3;
  if (v45 + 3 >= v63) {
    goto LABEL_74;
  }
  unint64_t v58 = *(void *)(v62 + 8 * v59);
  if (v58) {
    goto LABEL_73;
  }
  int v59 = v45 + 4;
  if (v45 + 4 >= v63) {
    goto LABEL_74;
  }
  unint64_t v58 = *(void *)(v62 + 8 * v59);
  if (v58) {
    goto LABEL_73;
  }
  int v59 = v45 + 5;
  if (v45 + 5 >= v63) {
    goto LABEL_74;
  }
  unint64_t v58 = *(void *)(v62 + 8 * v59);
  if (v58)
  {
LABEL_73:
    unint64_t v48 = (v58 - 1) & v58;
    v64 = v59;
    unint64_t v50 = __clz(__rbit64(v58)) + (v59 << 6);
    goto LABEL_54;
  }

  uint64_t v60 = v45 + 6;
  if (v45 + 6 >= v63) {
    goto LABEL_74;
  }
  unint64_t v58 = *(void *)(v62 + 8 * v60);
  if (v58)
  {
    int v59 = v45 + 6;
    goto LABEL_73;
  }

  while (1)
  {
    int v59 = v60 + 1;
    if (__OFADD__(v60, 1LL)) {
      break;
    }
    if (v59 >= v63) {
      goto LABEL_74;
    }
    unint64_t v58 = *(void *)(v62 + 8 * v59);
    ++v60;
    if (v58) {
      goto LABEL_73;
    }
  }

  __break(1u);
LABEL_86:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

            uint64_t v36 = (v46 - 1) & v46;
            unint64_t v39 = __clz(__rbit64(v46)) + (v33 << 6);
          }

          uint64_t v40 = 16 * v39;
          unint64_t v41 = (uint64_t *)(*(void *)(v12 + 48) + v40);
          unint64_t v43 = *v41;
          int v42 = v41[1];
          v67 = *(_OWORD *)(*(void *)(v12 + 56) + v40);
          int v44 = (void *)(*(void *)(v13 + 48) + v40);
          *int v44 = v43;
          v44[1] = v42;
          *(_OWORD *)(*(void *)(v13 + 56) + v40) = v67;
          swift_bridgeObjectRetain();
          uint64_t result = (char *)outlined copy of Data._Representation(v67, *((unint64_t *)&v67 + 1));
        }
      }

  Hasher._combine(_:)(0);
  unint64_t v43 = 0LL;
LABEL_44:

  int v44 = v70;
  if (v44)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    specialized Dictionary<>.hash(into:)(a1, v44);
    swift_bridgeObjectRelease();
    unint64_t v45 = v71;
    if (v71) {
      goto LABEL_46;
    }
LABEL_49:
    Hasher._combine(_:)(0);
    if (v72) {
      goto LABEL_47;
    }
LABEL_50:
    Hasher._combine(_:)(0);
    goto LABEL_51;
  }

  Hasher._combine(_:)(0);
  unint64_t v45 = v71;
  if (!v71) {
    goto LABEL_49;
  }
LABEL_46:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)(a1, v45);
  swift_bridgeObjectRelease();
  if (!v72) {
    goto LABEL_50;
  }
LABEL_47:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
LABEL_51:
  unint64_t v11 = v56;
  if (v73 == 2)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    unint64_t v46 = v73 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v46);
  }

  if (v74 == 2)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    unint64_t v47 = v74 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v47);
  }

  if (v75 == 2)
  {
    unint64_t v48 = 0;
  }

  else
  {
    unint64_t v48 = v75 & 1;
    Hasher._combine(_:)(1u);
  }

  Hasher._combine(_:)(v48);
  if (v76 == 2)
  {
    unint64_t v49 = 0;
  }

  else
  {
    unint64_t v50 = v76 & 1;
    Hasher._combine(_:)(1u);
    unint64_t v49 = v50;
  }

  Hasher._combine(_:)(v49);
  outlined retain of LocalePreferences?( (uint64_t)v78,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined consume of LocalePreferences?);
  outlined retain of LocalePreferences?( (uint64_t)v78,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined consume of LocalePreferences?);
  swift_unknownObjectRelease_n();
LABEL_12:
  uint64_t v12 = swift_getObjectType();
  uint64_t v13 = *(void (**)(uint64_t, uint64_t, uint64_t))(v57 + 112);
  swift_unknownObjectRetain();
  v13(a1, v12, v57);
  swift_unknownObjectRelease();
  uint64_t v14 = swift_getObjectType();
  int v15 = *(void (**)(uint64_t, uint64_t, uint64_t))(v11 + 120);
  swift_unknownObjectRetain();
  v15(a1, v14, v11);
  swift_unknownObjectRelease();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  return swift_bridgeObjectRelease();
}

  __break(1u);
LABEL_44:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

        uint64_t v7 = specialized _ArrayBuffer._consumeAndCreateNew()(v7);
        unint64_t v58 = v7[2];
        if (v58) {
          goto LABEL_40;
        }
LABEL_44:
        __break(1u);
LABEL_45:
        __break(1u);
        goto LABEL_46;
      }

    __break(1u);
    goto LABEL_44;
  }

  uint64_t result = _StringObject.sharedUTF8.getter();
  uint64_t v21 = result;
  if (v35 == a2) {
    goto LABEL_15;
  }
LABEL_22:
  if ((a8 & 0x1000000000000000LL) == 0)
  {
    if ((a8 & 0x2000000000000000LL) == 0) {
      goto LABEL_24;
    }
LABEL_30:
    unint64_t v37 = a7;
    unint64_t v38 = a8 & 0xFFFFFFFFFFFFFFLL;
    if ((HIBYTE(a8) & 0xF) == a2)
    {
      uint64_t v30 = &v37;
      uint64_t v29 = a1;
      goto LABEL_32;
    }

    goto LABEL_38;
  }

  a7 = static String._copying(_:)();
  uint64_t v32 = v31;
  uint64_t result = swift_bridgeObjectRelease();
  a8 = v32;
  if ((v32 & 0x2000000000000000LL) != 0) {
    goto LABEL_30;
  }
LABEL_24:
  if ((a7 & 0x1000000000000000LL) != 0)
  {
    uint64_t v28 = (a8 & 0xFFFFFFFFFFFFFFFLL) + 32;
    if ((a7 & 0xFFFFFFFFFFFFLL) == a2) {
      goto LABEL_26;
    }
LABEL_38:
    unint64_t v33 = 0;
LABEL_39:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v24 = !v33;
    uint64_t v25 = 2143289344LL;
    if (!v33) {
      uint64_t v25 = 0LL;
    }
    goto LABEL_41;
  }

  uint64_t result = _StringObject.sharedUTF8.getter();
  uint64_t v28 = result;
  if (v36 != a2) {
    goto LABEL_38;
  }
LABEL_26:
  if (v28)
  {
    uint64_t v29 = a1;
    uint64_t v30 = (void *)v28;
LABEL_32:
    unint64_t v33 = memcmp(v29, v30, a2) == 0;
    goto LABEL_39;
  }

      LODWORD(v_Block_object_dispose(va, 8) = (_DWORD)v119;
      uint64_t v32 = (unint64_t)v119 >> 48;
      unint64_t v20 = (unsigned __int16)v120;
      a3 = (unint64_t)v119 >> 32;
      unint64_t v33 = WORD1(v120);
      char v34 = WORD2(v120);
      uint64_t v35 = HIWORD(v120);
      uint64_t v36 = v121;
      unint64_t v37 = v122;
      v115[0] = v119;
      v115[1] = v120;
      v116 = v121;
      v117 = v122;
      unint64_t v46 = v36;
      uint64_t v21 = v35;
      uint64_t v7 = v34;
      a5 = v33;
      uint64_t v14 = v20;
      LOWORD(v20) = v32;
      LODWORD(v115[0]) = (_DWORD)v8;
      WORD2(v115[0]) = a3;
      HIWORD(v115[0]) = v32;
      LOWORD(v115[1]) = v14;
      WORD1(v115[1]) = a5;
      WORD2(v115[1]) = v7;
      HIWORD(v115[1]) = v21;
      v113 = v37;
      v114 = v46;
      v116 = v46;
      v117 = v37;
      unint64_t v47 = _So9NSDecimala__length_getter(v115);
      if (!v47) {
        goto LABEL_260;
      }
      unint64_t v45 = 0LL;
      unint64_t v48 = v47 - 1;
      if (v47 != 1)
      {
        unint64_t v49 = v113;
        unint64_t v50 = v114;
        while (2)
        {
          v51 = v32;
          switch(v48)
          {
            case 1:
              goto LABEL_66;
            case 2:
              v51 = v14;
              goto LABEL_66;
            case 3:
              v51 = a5;
              goto LABEL_66;
            case 4:
              v51 = v7;
              goto LABEL_66;
            case 5:
              v51 = v21;
              goto LABEL_66;
            case 6:
              v51 = v114;
              goto LABEL_66;
            case 7:
              v51 = v113;
LABEL_66:
              if (HIWORD(v45)) {
                goto LABEL_44;
              }
              unint64_t v45 = v51 | (v45 << 16);
              if (!--v48) {
                goto LABEL_105;
              }
              continue;
            default:
              goto LABEL_282;
          }
        }
      }

      LODWORD(v_Block_object_dispose(va, 8) = (_DWORD)v119;
      uint64_t v32 = (unint64_t)v119 >> 48;
      unint64_t v20 = (unsigned __int16)v120;
      a3 = (unint64_t)v119 >> 32;
      unint64_t v33 = WORD1(v120);
      char v34 = WORD2(v120);
      uint64_t v35 = HIWORD(v120);
      uint64_t v36 = v121;
      unint64_t v37 = v122;
      v115[0] = v119;
      v115[1] = v120;
      v116 = v121;
      v117 = v122;
      unint64_t v46 = v36;
      uint64_t v21 = v35;
      uint64_t v7 = v34;
      a5 = v33;
      uint64_t v14 = v20;
      LOWORD(v20) = v32;
      LODWORD(v115[0]) = (_DWORD)v8;
      WORD2(v115[0]) = a3;
      HIWORD(v115[0]) = v32;
      LOWORD(v115[1]) = v14;
      WORD1(v115[1]) = a5;
      WORD2(v115[1]) = v7;
      HIWORD(v115[1]) = v21;
      v113 = v37;
      v114 = v46;
      v116 = v46;
      v117 = v37;
      unint64_t v47 = _So9NSDecimala__length_getter(v115);
      if (!v47) {
        goto LABEL_260;
      }
      unint64_t v45 = 0LL;
      unint64_t v48 = v47 - 1;
      if (v47 != 1)
      {
        unint64_t v49 = v113;
        unint64_t v50 = v114;
        while (2)
        {
          v51 = v32;
          switch(v48)
          {
            case 1:
              goto LABEL_66;
            case 2:
              v51 = v14;
              goto LABEL_66;
            case 3:
              v51 = a5;
              goto LABEL_66;
            case 4:
              v51 = v7;
              goto LABEL_66;
            case 5:
              v51 = v21;
              goto LABEL_66;
            case 6:
              v51 = v114;
              goto LABEL_66;
            case 7:
              v51 = v113;
LABEL_66:
              if (HIWORD(v45)) {
                goto LABEL_44;
              }
              unint64_t v45 = v51 | (v45 << 16);
              if (!--v48) {
                goto LABEL_105;
              }
              continue;
            default:
              goto LABEL_282;
          }
        }
      }

      LODWORD(v_Block_object_dispose(va, 8) = (_DWORD)v119;
      uint64_t v32 = (unint64_t)v119 >> 48;
      unint64_t v20 = (unsigned __int16)v120;
      a3 = (unint64_t)v119 >> 32;
      unint64_t v33 = WORD1(v120);
      char v34 = WORD2(v120);
      uint64_t v35 = HIWORD(v120);
      uint64_t v36 = v121;
      unint64_t v37 = v122;
      v115[0] = v119;
      v115[1] = v120;
      v116 = v121;
      v117 = v122;
      unint64_t v46 = v36;
      uint64_t v21 = v35;
      uint64_t v7 = v34;
      a5 = v33;
      uint64_t v14 = v20;
      LOWORD(v20) = v32;
      LODWORD(v115[0]) = (_DWORD)v8;
      WORD2(v115[0]) = a3;
      HIWORD(v115[0]) = v32;
      LOWORD(v115[1]) = v14;
      WORD1(v115[1]) = a5;
      WORD2(v115[1]) = v7;
      HIWORD(v115[1]) = v21;
      v113 = v37;
      v114 = v46;
      v116 = v46;
      v117 = v37;
      unint64_t v47 = _So9NSDecimala__length_getter(v115);
      if (!v47) {
        goto LABEL_260;
      }
      unint64_t v45 = 0LL;
      unint64_t v48 = v47 - 1;
      if (v47 != 1)
      {
        unint64_t v49 = v113;
        unint64_t v50 = v114;
        while (2)
        {
          v51 = v32;
          switch(v48)
          {
            case 1:
              goto LABEL_66;
            case 2:
              v51 = v14;
              goto LABEL_66;
            case 3:
              v51 = a5;
              goto LABEL_66;
            case 4:
              v51 = v7;
              goto LABEL_66;
            case 5:
              v51 = v21;
              goto LABEL_66;
            case 6:
              v51 = v114;
              goto LABEL_66;
            case 7:
              v51 = v113;
LABEL_66:
              if (HIWORD(v45)) {
                goto LABEL_44;
              }
              unint64_t v45 = v51 | (v45 << 16);
              if (!--v48) {
                goto LABEL_105;
              }
              continue;
            default:
              goto LABEL_282;
          }
        }
      }

      v115 = (int)v8;
      LODWORD(v_Block_object_dispose(va, 8) = (_DWORD)v120;
      uint64_t v32 = (unint64_t)v120 >> 48;
      unint64_t v20 = (unsigned __int16)v121;
      a3 = (unint64_t)v120 >> 32;
      unint64_t v33 = WORD1(v121);
      char v34 = WORD2(v121);
      uint64_t v35 = HIWORD(v121);
      uint64_t v36 = v122;
      unint64_t v37 = v123;
      v116[0] = v120;
      v116[1] = v121;
      v117 = v122;
      v118 = v123;
      unint64_t v46 = v36;
      uint64_t v21 = v35;
      uint64_t v7 = v34;
      a5 = v33;
      uint64_t v14 = v20;
      LOWORD(v20) = v32;
      LODWORD(v116[0]) = (_DWORD)v8;
      WORD2(v116[0]) = a3;
      HIWORD(v116[0]) = v32;
      LOWORD(v116[1]) = v14;
      WORD1(v116[1]) = a5;
      WORD2(v116[1]) = v7;
      HIWORD(v116[1]) = v21;
      v113 = v37;
      v114 = v46;
      v117 = v46;
      v118 = v37;
      unint64_t v47 = _So9NSDecimala__length_getter(v116);
      if (!v47) {
        goto LABEL_260;
      }
      unint64_t v45 = 0LL;
      unint64_t v48 = v47 - 1;
      if (v47 != 1)
      {
        unint64_t v49 = v113;
        unint64_t v50 = v114;
        while (2)
        {
          v51 = v32;
          switch(v48)
          {
            case 1:
              goto LABEL_66;
            case 2:
              v51 = v14;
              goto LABEL_66;
            case 3:
              v51 = a5;
              goto LABEL_66;
            case 4:
              v51 = v7;
              goto LABEL_66;
            case 5:
              v51 = v21;
              goto LABEL_66;
            case 6:
              v51 = v114;
              goto LABEL_66;
            case 7:
              v51 = v113;
LABEL_66:
              if (HIWORD(v45)) {
                goto LABEL_44;
              }
              unint64_t v45 = v51 | (v45 << 16);
              if (!--v48) {
                goto LABEL_105;
              }
              continue;
            default:
              goto LABEL_282;
          }
        }
      }

      v117 = (__int16)v9;
      LODWORD(v15) = (_DWORD)v122;
      char v34 = (unint64_t)v122 >> 48;
      a5 = (unsigned __int16)v123;
      a3 = (unint64_t)v122 >> 32;
      uint64_t v35 = WORD1(v123);
      uint64_t v36 = WORD2(v123);
      unint64_t v37 = HIWORD(v123);
      unint64_t v38 = v124;
      uint64_t v7 = v125;
      v118[0] = v122;
      v118[1] = v123;
      v119 = v124;
      v120 = v125;
      unint64_t v48 = v38;
      uint64_t v21 = v37;
      uint64_t v8 = v36;
      a4 = v35;
      uint64_t v9 = (const char *)a5;
      LOWORD(a5) = v34;
      LODWORD(v118[0]) = v15;
      WORD2(v118[0]) = a3;
      HIWORD(v118[0]) = v34;
      LOWORD(v118[1]) = (_WORD)v9;
      WORD1(v118[1]) = a4;
      WORD2(v118[1]) = v8;
      HIWORD(v118[1]) = v21;
      v115 = v7;
      v116 = v48;
      v119 = v48;
      v120 = v7;
      unint64_t v49 = _So9NSDecimala__length_getter(v118);
      if (!v49) {
        goto LABEL_258;
      }
      unint64_t v47 = 0LL;
      uint64_t v7 = (v49 - 1);
      if (v49 != 1)
      {
        unint64_t v50 = v115;
        v51 = v116;
        while (1)
        {
          id v52 = v34;
          switch((int)v7)
          {
            case 1:
              break;
            case 2:
              id v52 = (unint64_t)v9;
              break;
            case 3:
              id v52 = a4;
              break;
            case 4:
              id v52 = v8;
              break;
            case 5:
              id v52 = v21;
              break;
            case 6:
              id v52 = v116;
              break;
            case 7:
              id v52 = v115;
              break;
            default:
              v118[0] = 0LL;
              v118[1] = (char *)0xE000000000000000LL;
              _StringGuts.grow(_:)(30LL);
              swift_bridgeObjectRelease();
              strcpy((char *)v118, "Invalid index ");
              HIBYTE(v118[1]) = -18;
              v113._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
              String.append(_:)(v113);
              swift_bridgeObjectRelease();
              v114._countAndFlagsBits = 0x616D5F20726F6620LL;
              v114._object = (void *)0xEE0061737369746ELL;
              String.append(_:)(v114);
              _assertionFailure(_:_:file:line:flags:)();
              __break(1u);
              JUMPOUT(0x18343F100LL);
          }

          if (HIWORD(v47)) {
            goto LABEL_44;
          }
          unint64_t v47 = v52 | (v47 << 16);
          uint64_t v7 = (v7 - 1);
          if (!(_DWORD)v7) {
            goto LABEL_103;
          }
        }
      }

  __break(1u);
  return result;
}

                unint64_t v20 = _StringGuts._slowEnsureMatchingEncoding(_:)(v14, a1, a2);
                v67 = v4;
                if ((a2 & 0x1000000000000000LL) != 0) {
                  goto LABEL_44;
                }
                goto LABEL_28;
              }

              goto LABEL_41;
            }
          }

      char v34 = (4 * *(_BYTE *)(v33 + 18) + 8) & 0x3C;
      uint64_t v32 = ((-15LL << v34) - 1) & v32 | (v35 << v34);
      uint64_t v7 = *(void *)(v33 + 24 + 24 * v35);
      swift_unknownObjectRetain();
      uint64_t result = (uint64_t *)swift_unknownObjectRelease();
      unint64_t v33 = v7;
      if (!*(_BYTE *)(v7 + 18)) {
        goto LABEL_70;
      }
    }
  }

  uint64_t result = (uint64_t *)swift_unknownObjectRetain_n();
  uint64_t v32 = 0LL;
  uint64_t v9 = a5;
  uint64_t v7 = v28;
LABEL_70:
  int v42 = v31;
  unint64_t v43 = *(unsigned __int16 *)(v7 + 16);
  if (!*(_WORD *)(v7 + 16))
  {
LABEL_79:
    unint64_t v45 = v9;
    goto LABEL_80;
  }

  int v44 = *(void *)(v7 + 24);
  uint64_t v13 = __OFSUB__(v9, v44);
  unint64_t v45 = v9 - v44;
  if (v13) {
    goto LABEL_204;
  }
  if (__OFADD__(v45, 1LL)) {
    goto LABEL_205;
  }
  if (v45 + 1 <= 0)
  {
    unint64_t v43 = 0LL;
LABEL_92:
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    __int128 v6 = v32 & 0xFFFFFFFFFFFFF0FFLL | (v43 << 8);
    uint64_t v31 = v42;
    goto LABEL_93;
  }

  if ((_DWORD)v43 == 1)
  {
LABEL_80:
    if (v45) {
      goto LABEL_203;
    }
    uint64_t v9 = 0LL;
    goto LABEL_92;
  }

  unint64_t v46 = *(void *)(v7 + 48);
  uint64_t v9 = v45 - v46;
  if (__OFSUB__(v45, v46)) {
    goto LABEL_208;
  }
  if (__OFADD__(v9, 1LL)) {
    goto LABEL_209;
  }
  if (v9 + 1 < 1)
  {
    unint64_t v43 = 1LL;
    uint64_t v9 = v45;
    goto LABEL_92;
  }

  if ((_DWORD)v43 == 2) {
    goto LABEL_79;
  }
  unint64_t v47 = (void *)(v7 + 72);
  unint64_t v48 = 2LL;
  while (v43 != v48)
  {
    unint64_t v45 = v9 - *v47;
    if (__OFSUB__(v9, *v47)) {
      goto LABEL_201;
    }
    if (__OFADD__(v45, 1LL)) {
      goto LABEL_202;
    }
    if (v45 + 1 < 1)
    {
      unint64_t v43 = v48;
      goto LABEL_92;
    }

    ++v48;
    v47 += 3;
    uint64_t v9 = v45;
    if (v43 == v48) {
      goto LABEL_80;
    }
  }

    __break(1u);
LABEL_44:
    __break(1u);
LABEL_45:
    __break(1u);
LABEL_46:
    __break(1u);
    goto LABEL_47;
  }

  StringProtocol._ephemeralString.getter();
  unint64_t v49 = (void *)String._bridgeToObjectiveCImpl()();
  swift_bridgeObjectRelease();
  StringProtocol._ephemeralString.getter();
  unint64_t v50 = String._bridgeToObjectiveCImpl()();
  swift_bridgeObjectRelease();
  v51 = objc_msgSend(v49, sel_componentsSeparatedByString_, v50);
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  if (!v51) {
    return (void *)MEMORY[0x18961AFE8];
  }
  type metadata accessor for __SwiftDeferredNSArray();
  swift_unknownObjectRetain();
  if (swift_dynamicCastClass())
  {
    swift_retain();
  }

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
  id v52 = swift_dynamicCastClass();
  if (!v52)
  {
    swift_unknownObjectRelease();
    objc_msgSend(v51, sel_copy);
    uint64_t v53 = _bridgeCocoaArray<A>(_:)();
    swift_unknownObjectRelease();
    uint64_t v3 = (void *)specialized _arrayForceCast<A, B>(_:)(v53);

LABEL_40:
    swift_bridgeObjectRelease();
    return v3;
  }

  uint64_t v3 = (void *)v52;

  return v3;
}

    if (v18 > v13)
    {
LABEL_46:
      unint64_t v11 = v9;
LABEL_47:
      if (v11) {
        -[NSMutableRLEArray insertObject:range:](self, "insertObject:range:", v11, location, a5);
      }
      return;
    }

    uint64_t v24 = self->super.theList;
LABEL_45:
    memmove(&v24->var7[v18], &v24->var7[v13 + 1], 16 * (v24->var4 + ~v13));
    self->super.theList->var4 += v18 - (v13 + 1);
    -[NSMutableRLEArray _setBlockCapacity:](self, "_setBlockCapacity:");
    goto LABEL_46;
  }

  uint64_t v24 = _NSKeyValueMutableArrayGetterForIsaAndKey( *(const void *(__cdecl **)(CFAllocatorRef, const void *))a1,  (void (__cdecl *)(CFAllocatorRef, const void *))a2);
  if ((objc_opt_respondsToSelector() & 1) != 0)
  {
    uint64_t v25 = [v24 mutatingMethods];
    if (v25)
    {
      unint64_t v26 = (void *)v25;
      uint64_t v27 = *(objc_method **)(v25 + 8);
      if (v27)
      {
        uint64_t v28 = method_getName(v27);
        NSKVONotifyingSetMethodImplementation(a1, v28, (id (*)(id, SEL, ...))NSKVOInsertObjectAtIndexAndNotify, a2);
      }

      uint64_t v29 = (objc_method *)v26[4];
      if (v29)
      {
        uint64_t v30 = method_getName(v29);
        NSKVONotifyingSetMethodImplementation(a1, v30, (id (*)(id, SEL, ...))NSKVOInsertObjectsAtIndexesAndNotify, a2);
      }

      uint64_t v31 = (objc_method *)v26[2];
      if (v31)
      {
        uint64_t v32 = method_getName(v31);
        NSKVONotifyingSetMethodImplementation(a1, v32, (id (*)(id, SEL, ...))NSKVORemoveObjectAtIndexAndNotify, a2);
      }

      unint64_t v33 = (objc_method *)v26[5];
      if (v33)
      {
        char v34 = method_getName(v33);
        NSKVONotifyingSetMethodImplementation(a1, v34, (id (*)(id, SEL, ...))NSKVORemoveObjectsAtIndexesAndNotify, a2);
      }

      uint64_t v35 = (objc_method *)v26[3];
      if (v35)
      {
        uint64_t v36 = method_getName(v35);
        NSKVONotifyingSetMethodImplementation(a1, v36, (id (*)(id, SEL, ...))NSKVOReplaceObjectAtIndexAndNotify, a2);
      }

      unint64_t v37 = (objc_method *)v26[6];
      if (v37)
      {
        unint64_t v38 = method_getName(v37);
        NSKVONotifyingSetMethodImplementation(a1, v38, (id (*)(id, SEL, ...))NSKVOReplaceObjectsAtIndexesAndNotify, a2);
      }
    }
  }

  unint64_t v39 = _NSKeyValueMutableOrderedSetGetterForIsaAndKey( *(const void *(__cdecl **)(CFAllocatorRef, const void *))a1,  (void (__cdecl *)(CFAllocatorRef, const void *))a2);
  if ((objc_opt_respondsToSelector() & 1) != 0)
  {
    uint64_t v40 = [v39 mutatingMethods];
    if (v40)
    {
      unint64_t v41 = (void *)v40;
      int v42 = *(objc_method **)(v40 + 8);
      if (v42)
      {
        unint64_t v43 = method_getName(v42);
        NSKVONotifyingSetMethodImplementation(a1, v43, (id (*)(id, SEL, ...))NSKVOInsertObjectAtIndexAndNotify, a2);
      }

      int v44 = (objc_method *)v41[4];
      if (v44)
      {
        unint64_t v45 = method_getName(v44);
        NSKVONotifyingSetMethodImplementation(a1, v45, (id (*)(id, SEL, ...))NSKVOInsertObjectsAtIndexesAndNotify, a2);
      }

      unint64_t v46 = (objc_method *)v41[2];
      if (v46)
      {
        unint64_t v47 = method_getName(v46);
        NSKVONotifyingSetMethodImplementation(a1, v47, (id (*)(id, SEL, ...))NSKVORemoveObjectAtIndexAndNotify, a2);
      }

      unint64_t v48 = (objc_method *)v41[5];
      if (v48)
      {
        unint64_t v49 = method_getName(v48);
        NSKVONotifyingSetMethodImplementation(a1, v49, (id (*)(id, SEL, ...))NSKVORemoveObjectsAtIndexesAndNotify, a2);
      }

      unint64_t v50 = (objc_method *)v41[3];
      if (v50)
      {
        v51 = method_getName(v50);
        NSKVONotifyingSetMethodImplementation(a1, v51, (id (*)(id, SEL, ...))NSKVOReplaceObjectAtIndexAndNotify, a2);
      }

      id v52 = (objc_method *)v41[6];
      if (v52)
      {
        uint64_t v53 = method_getName(v52);
        NSKVONotifyingSetMethodImplementation(a1, v53, (id (*)(id, SEL, ...))NSKVOReplaceObjectsAtIndexesAndNotify, a2);
      }
    }
  }

  v54 = _NSKeyValueMutableSetGetterForClassAndKey( *(const void *(__cdecl **)(CFAllocatorRef, const void *))a1,  (void (__cdecl *)(CFAllocatorRef, const void *))a2,  *(void **)a1);
  if ((objc_opt_respondsToSelector() & 1) != 0)
  {
    v55 = [v54 mutatingMethods];
    if (v55)
    {
      v56 = (void *)v55;
      v57 = *(objc_method **)(v55 + 8);
      if (v57)
      {
        unint64_t v58 = method_getName(v57);
        NSKVONotifyingSetMethodImplementation(a1, v58, (id (*)(id, SEL, ...))NSKVOAddObjectAndNotify, a2);
      }

      int v59 = (objc_method *)v56[3];
      if (v59)
      {
        uint64_t v60 = method_getName(v59);
        NSKVONotifyingSetMethodImplementation(a1, v60, (id (*)(id, SEL, ...))NSKVOIntersectSetAndNotify, a2);
      }

      v61 = (objc_method *)v56[4];
      if (v61)
      {
        v62 = method_getName(v61);
        NSKVONotifyingSetMethodImplementation(a1, v62, (id (*)(id, SEL, ...))NSKVOMinusSetAndNotify, a2);
      }

      v63 = (objc_method *)v56[2];
      if (v63)
      {
        v64 = method_getName(v63);
        NSKVONotifyingSetMethodImplementation(a1, v64, (id (*)(id, SEL, ...))NSKVORemoveObjectAndNotify, a2);
      }

      v65 = (objc_method *)v56[5];
      if (v65)
      {
        v66 = method_getName(v65);
        NSKVONotifyingSetMethodImplementation(a1, v66, (id (*)(id, SEL, ...))NSKVOUnionSetAndNotify, a2);
      }
    }
  }

  _NSKeyValueInvalidateCachedMutatorsForIsaAndKey(*(void *)(a1 + 8), a2);
}

      uint64_t v32 = (void *)-[NSMutableDictionary objectForKey:]( values->_userInfo,  "objectForKey:",  @"NSProgressFileCompletedCountKey");
      unint64_t v33 = -[NSMutableDictionary objectForKey:]( values->_userInfo,  "objectForKey:",  @"NSProgressFileTotalCountKey");
      if (!v32)
      {
LABEL_48:
        uint64_t v31 = 0LL;
        goto LABEL_49;
      }

      char v34 = (void *)v33;
      uint64_t v35 = _NSIsNSNumber();
      uint64_t v31 = 0LL;
      if (v35 && v34)
      {
        uint64_t v36 = [v32 longLongValue];
        unint64_t v37 = [v34 longLongValue];
        if (v36 > v37) {
          goto LABEL_48;
        }
        unint64_t v47 = v37;
        unint64_t v48 = (void *)_NSFoundationBundle();
        if (v13) {
          unint64_t v49 = @"%lld of %lld items";
        }
        else {
          unint64_t v49 = @"%lld of %lld files";
        }
        uint64_t v31 = +[NSString localizedStringWithFormat:]( NSString,  "localizedStringWithFormat:",  [v48 localizedStringForKey:v49 value:&stru_189CA6A28 table:@"Progress"],  v47,  v36);
        if (!v31) {
          goto LABEL_49;
        }
LABEL_41:
        if (v11) {
          uint64_t v31 = +[NSString stringWithFormat:](&OBJC_CLASS___NSString, "stringWithFormat:", @"%@%@", v31, v11);
        }
      }

void sub_182EC10DC(_Unwind_Exception *a1)
{
}

void sub_182EC11B0(_Unwind_Exception *a1)
{
}

void sub_182EC11CC()
{
}

void sub_182EC1BBC(_Unwind_Exception *exc_buf, int a2)
{
  if (a2)
  {
    objc_begin_catch(exc_buf);
    JUMPOUT(0x182EC19A8LL);
  }

  _Unwind_Resume(exc_buf);
}

void sub_182EC2030()
{
}

uint64_t _decodeObject(uint64_t a1, const void *a2, void *a3)
{
  v13[1] = *(id *)MEMORY[0x1895F89C0];
  v13[0] = 0LL;
  unint64_t v6 = atomic_load((unint64_t *)(a1 + 16));
  atomic_store(v6 | 8, (unint64_t *)(a1 + 16));
  uint64_t v7 = (void *)MEMORY[0x186E1FF60]();
  if (*(void *)(a1 + 80))
  {
    uint64_t v8 = _decodeObjectXML(a1, a2, v13);
  }

  else
  {
    if (!_decodeOffsetAndRef((objc_class *)a1, (uint64_t)a2, &v12, &v11))
    {
      uint64_t v9 = 0LL;
      goto LABEL_6;
    }

    uint64_t v8 = _decodeObjectBinary(a1, v11, (uint64_t)a2, (CFTypeRef *)v13);
  }

  uint64_t v9 = v8;
LABEL_6:
  objc_autoreleasePoolPop(v7);
  *a3 = v13[0];
  return v9;
}

void _decodeObject_0(uint64_t a1, const __CFString *a2, uint64_t a3)
{
  v35[1] = *MEMORY[0x1895F89C0];
  if (a2) {
    uint64_t v3 = a2;
  }
  else {
    uint64_t v3 = @"<no key>";
  }
  uint64_t v4 = *(const void **)a3;
  if (!*(void *)a3) {
    return;
  }
  int v6 = *(_DWORD *)(a3 + 8);
  if (v6 == 255) {
    return;
  }
  HIDWORD(v_Block_object_dispose(va, 8) = *(_DWORD *)(a3 + 8);
  LODWORD(v_Block_object_dispose(va, 8) = v6 - 16;
  switch((v8 >> 4))
  {
    case 0u:
    case 1u:
    case 0xEu:
      [(id)a1 _validateAllowedClass:NSNumber forKey:v3 allowingInvocations:1];
      _NSXPCSerializationNumberForObject((uint64_t *)(a1 + 24), (unint64_t *)a3);
      return;
    case 3u:
      [(id)a1 _validateAllowedClass:MEMORY[0x189603F48] forKey:v3 allowingInvocations:1];
      _NSXPCSerializationDataForObject((void *)(a1 + 24), (unint64_t *)a3);
      return;
    case 5u:
      [(id)a1 _validateAllowedClass:NSString forKey:v3 allowingInvocations:1];
      _NSXPCSerializationStringForObject((uint64_t *)(a1 + 24), (char **)a3);
      return;
    case 6u:
      [(id)a1 _validateAllowedClass:NSString forKey:v3 allowingInvocations:1];
      uint64_t v10 = _NSXPCSerializationASCIIStringForObject((uint64_t *)(a1 + 24), (unint64_t *)a3);
      if (v10) {
        +[NSString stringWithUTF8String:](&OBJC_CLASS___NSString, "stringWithUTF8String:", v10);
      }
      return;
    case 7u:
      unint64_t v11 = (const void *)_NSXPCSerializationReferenceForObject((uint64_t *)(a1 + 24), (unint64_t *)a3);
      int v12 = _NSXPCSerializationTypeForReference((void *)(a1 + 24), (unint64_t)v11);
      if (v12 == 255)
      {
        unint64_t v26 = +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"decodeObjectForKey: Invalid reference marker for object with key %@",  v3);
        objc_exception_throw((id)[MEMORY[0x189603F70] exceptionWithName:@"NSInvalidUnarchiveOperationException" reason:v26 userInfo:0]);
        goto LABEL_39;
      }

      int v13 = v12;
      Value = CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 40), v11);
      if (Value)
      {
        [(id)a1 _validateReusedReference:Value forKey:v3];
      }

      else
      {
        unint64_t v33 = (unint64_t)v11;
        int v34 = v13;
        if (!_decodeObject_0(a1, v3, &v33))
        {
          uint64_t v31 = +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"decodeObjectForKey: Invalid reference object for reference with key %@",  v3);
          objc_exception_throw((id)[MEMORY[0x189603F70] exceptionWithName:@"NSInvalidUnarchiveOperationException" reason:v31 userInfo:0]);
          goto LABEL_47;
        }
      }

      return;
    case 9u:
    case 0xDu:
      return;
    case 0xAu:
      [(id)a1 _validateAllowedClass:NSNumber forKey:v3 allowingInvocations:1];
      uint64_t v9 = 1LL;
      goto LABEL_12;
    case 0xBu:
      [(id)a1 _validateAllowedClass:NSNumber forKey:v3 allowingInvocations:1];
      uint64_t v9 = 0LL;
LABEL_12:
      +[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", v9);
      return;
    default:
      uint64_t v15 = *(void *)(a1 + 16);
      *(void *)(a1 + 16) = 0LL;
      if (++*(_DWORD *)(a1 + 2260) >= 0x110u)
      {
LABEL_39:
        objc_exception_throw((id)[MEMORY[0x189603F70] exceptionWithName:@"NSInvalidUnarchiveOperationException" reason:@"decodeObjectForKey: too many nested collections" userInfo:0]);
LABEL_47:
        __break(1u);
        return;
      }

      __int128 v16 = *(void **)(a1 + 2248);
      *(void *)(a1 + 224_Block_object_dispose(va, 8) = 0LL;
      *(void *)(a1 + 56 + 8LL * *(unsigned int *)(a1 + 2260)) = a3;
      if (_NSXPCSerializationCreateObjectInDictionaryForASCIIKey( (uint64_t *)(a1 + 24),  (void *)a3,  "$xpc",  (uint64_t)&v33))
      {
        if (v33) {
          _getIntAtMarker((void *)(a1 + 24), v35, v33, v32);
        }
        __int128 v17 = (void *)objc_msgSend((id)a1, "_xpcObjectForIndex:");
        [(id)a1 _validateAllowedXPCType:object_getClass(v17) forKey:v3];
        goto LABEL_32;
      }

      if (!_NSXPCSerializationCreateObjectInDictionaryForASCIIKey( (uint64_t *)(a1 + 24),  (void *)a3,  "$class",  (uint64_t)v32))
      {
        objc_exception_throw((id)[MEMORY[0x189603F70] exceptionWithName:@"NSInvalidUnarchiveOperationException" reason:@"decodeObjectForKey: class name missing" userInfo:0]);
        goto LABEL_47;
      }

      uint64_t v18 = (const char *)_NSXPCSerializationASCIIStringForObject((uint64_t *)(a1 + 24), v32);
      if (!v18)
      {
        objc_exception_throw((id)[MEMORY[0x189603F70] exceptionWithName:@"NSInvalidUnarchiveOperationException" reason:@"decodeObjectForKey: class name missing (2)" userInfo:0]);
        goto LABEL_47;
      }

      unint64_t v19 = v18;
      Class v20 = objc_lookUpClass(v18);
      if (!v20)
      {
        uint64_t v27 = +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"decodeObjectForKey: class %s not loaded or does not exist",  v19);
        objc_exception_throw((id)[MEMORY[0x189603F70] exceptionWithName:@"NSInvalidUnarchiveOperationException" reason:v27 userInfo:0]);
        goto LABEL_47;
      }

      [(id)a1 _validateAllowedClass:v20 forKey:v3 allowingInvocations:1];
      if (v16) {
        _removeAllowedClass(a1, v16);
      }
      uint64_t v21 = -[objc_class allocWithZone:](v20, "allocWithZone:", [(id)a1 zone]);
      if (!v21)
      {
        uint64_t v28 = +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"decodeObjectForKey: Class %s returned nil from +alloc while being decoded for key %@",  v19,  v3);
        objc_exception_throw((id)[MEMORY[0x189603F70] exceptionWithName:@"NSInvalidUnarchiveOperationException" reason:v28 userInfo:0]);
        goto LABEL_47;
      }

      uint64_t v22 = -[objc_class initWithCoder:](v21, "initWithCoder:", a1);
      if (!v22)
      {
        uint64_t v29 = +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"decodeObjectForKey: Object of class %s returned nil from -initWithCoder: while being decoded for key %@",  v19,  v3);
        objc_exception_throw((id)[MEMORY[0x189603F70] exceptionWithName:@"NSInvalidUnarchiveOperationException" reason:v29 userInfo:0]);
        goto LABEL_47;
      }

      uint64_t v23 = (void *)-[objc_class awakeAfterUsingCoder:](v22, "awakeAfterUsingCoder:", a1);
      __int128 v17 = v23;
      if (!v23)
      {
        uint64_t v30 = +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"decodeObjectForKey: Object of class %s returned nil from -awakeAfterUsingCoder: while being decoded for key %@",  v19,  v3);
        objc_exception_throw((id)[MEMORY[0x189603F70] exceptionWithName:@"NSInvalidUnarchiveOperationException" reason:v30 userInfo:0]);
        goto LABEL_47;
      }

      id v24 = v23;
LABEL_32:
      *(void *)(a1 + 16) = v15;
      --*(_DWORD *)(a1 + 2260);
      *(void *)(a1 + 224_Block_object_dispose(va, 8) = 0LL;
      if (v17)
      {
        uint64_t v25 = *(__CFDictionary **)(a1 + 40);
        if (v25) {
          CFDictionaryAddValue(v25, v4, v17);
        }
      }

      return;
  }

void sub_182EC2C38(_Unwind_Exception *exc_buf, int a2)
{
  if (a2)
  {
    objc_begin_catch(exc_buf);
    JUMPOUT(0x182EC297CLL);
  }

  _Unwind_Resume(exc_buf);
}

BOOL _decodeOffsetAndRef(objc_class *a1, uint64_t a2, void *a3, unint64_t *a4)
{
  uint64_t v15 = *MEMORY[0x1895F89C0];
  int OffsetForValueFromDictionary3 = __CFBinaryPlistGetOffsetForValueFromDictionary3();
  BOOL result = 0LL;
  if (OffsetForValueFromDictionary3)
  {
    if ((_getUIDFromData( a1,  (_BYTE *)a1[13].isa + *a3,  (unint64_t)a1[13].isa + (unint64_t)a1[14].isa - 1,  a4) & 1) != 0)
    {
      return *a4 != 0;
    }

    else
    {
      uint64_t v10 = (os_log_s *)_NSRuntimeIssuesLog();
      BOOL result = os_log_type_enabled(v10, OS_LOG_TYPE_FAULT);
      if (result)
      {
        *(_DWORD *)buf = 138543618;
        int v12 = _NSMethodExceptionProem(a1, sel_decodeObjectForKey_);
        __int16 v13 = 2114;
        uint64_t v14 = a2;
        _os_log_fault_impl( &dword_182EB1000,  v10,  OS_LOG_TYPE_FAULT,  "%{public}@: value for key (%{public}@) is not an object. This will become an error in the future.",  buf,  0x16u);
        return 0LL;
      }
    }
  }

  return result;
}

uint64_t _getUIDFromData(void *a1, _BYTE *a2, unint64_t a3, unint64_t *a4)
{
  char v4 = *a2;
  if ((*a2 & 0xF0) != 0x80) {
    return 0LL;
  }
  int v5 = v4 & 0xF;
  uint64_t v6 = (v4 & 0xF) + 2LL;
  if (__CFADD__(a2, v6) || (unint64_t)&a2[v6] > a3)
  {
    objc_msgSend( a1,  "__failWithExceptionName:errorCode:format:",  @"NSArchiverArchiveInconsistency",  4864,  @"overflow while attempting to read %lu bytes (uid)",  v6);
    return 0LL;
  }

  uint64_t v7 = a2 + 1;
  switch(v5)
  {
    case 0:
      unint64_t v8 = *v7;
      break;
    case 1:
      unint64_t v8 = __rev16(*(unsigned __int16 *)(a2 + 1));
      break;
    case 3:
      unint64_t v8 = bswap32(*(_DWORD *)(a2 + 1));
      break;
    case 7:
      unint64_t v8 = bswap64(*(void *)(a2 + 1));
      break;
    default:
      unint64_t v8 = 0LL;
      uint64_t v10 = (v5 + 1);
      do
      {
        unsigned int v11 = *v7++;
        unint64_t v8 = v11 | (v8 << 8);
        --v10;
      }

      while (v10);
      break;
  }

  *a4 = v8;
  return 1LL;
}

BOOL _decodeObjectBinary(uint64_t a1, unsigned int a2, uint64_t a3, CFTypeRef *a4)
{
  uint64_t v47 = *MEMORY[0x1895F89C0];
  uint64_t v39 = 0LL;
  CFTypeRef cf = 0LL;
  if (!__CFBinaryPlistGetOffsetForValueFromArray2()
    || (uint64_t v9 = *(void *)(a1 + 104), v10 = (unsigned __int8 *)(v9 + v39), __CFADD__(v9, v39))
    || v9 + *(void *)(a1 + 112) - 1 <= (unint64_t)v10)
  {
    objc_msgSend( (id)a1,  "__failWithExceptionName:errorCode:format:",  @"NSArchiverArchiveInconsistency",  4864,  @"%@: object reference beyond limit or other data corruption",  _NSMethodExceptionProem((objc_class *)a1, sel_decodeObjectForKey_));
    goto LABEL_9;
  }

  unsigned int v11 = *v10 >> 4;
  BOOL v12 = v11 >= 5;
  unsigned int v13 = v11 - 5;
  if (v12 && v13 >= 2)
  {
    uint64_t v38 = 0LL;
    if (!__CFBinaryPlistGetOffsetForValueFromDictionary3()
      || (uint64_t v14 = *(void *)(a1 + 104), __CFADD__(v14, v38))
      || (unint64_t v15 = v14 + *(void *)(a1 + 112) - 1, v15 < v14 + v38))
    {
      objc_msgSend( (id)a1,  "__failWithExceptionName:errorCode:format:",  @"NSArchiverArchiveInconsistency",  4864,  @"%@: missing class information for object",  _NSMethodExceptionProem((objc_class *)a1, sel_decodeObjectForKey_));
      goto LABEL_9;
    }

    unint64_t v37 = 0LL;
    _getUIDFromData((void *)a1, (_BYTE *)(v14 + v38), v15, &v37);
    if (!v37)
    {
      objc_msgSend( (id)a1,  "__failWithExceptionName:errorCode:format:",  @"NSArchiverArchiveInconsistency",  4864,  @"%@: null class for object",  _NSMethodExceptionProem((objc_class *)a1, sel_decodeObjectForKey_));
      goto LABEL_9;
    }

    if (!__CFBinaryPlistGetOffsetForValueFromArray2()
      || (unint64_t)(*(void *)(a1 + 104) + *(void *)(a1 + 112) - 1LL) < *(void *)(a1 + 104))
    {
      objc_msgSend( (id)a1,  "__failWithExceptionName:errorCode:format:",  @"NSArchiverArchiveInconsistency",  4864,  @"%@: bogus class information for object",  _NSMethodExceptionProem((objc_class *)a1, sel_decodeObjectForKey_));
      goto LABEL_9;
    }

    if (!__CFBinaryPlistGetOffsetForValueFromDictionary3()
      || (unint64_t)(*(void *)(a1 + 104) + *(void *)(a1 + 112) - 1LL) < *(void *)(a1 + 104))
    {
      objc_msgSend( (id)a1,  "__failWithExceptionName:errorCode:format:",  @"NSArchiverArchiveInconsistency",  4864,  @"%@: missing class name for class",  _NSMethodExceptionProem((objc_class *)a1, sel_decodeObjectForKey_));
      goto LABEL_9;
    }

    if ((__CFBinaryPlistCreateObject() & 1) == 0)
    {
      objc_msgSend( (id)a1,  "__failWithExceptionName:errorCode:format:",  @"NSArchiverArchiveInconsistency",  4864,  @"%@: corrupt data or object is too large to decode",  _NSMethodExceptionProem((objc_class *)a1, sel_decodeObjectForKey_));
      goto LABEL_9;
    }

    if ((_NSIsNSString() & 1) == 0)
    {
      objc_msgSend( (id)a1,  "__failWithExceptionName:errorCode:format:",  @"NSInvalidUnarchiveOperationException",  4864,  @"%@: cannot decode object of class (%@) for key (%@); the archive appears to be corrupt (non-string class name)",
        _NSMethodExceptionProem((objc_class *)a1, sel_decodeObjectForKey_),
        0LL,
        a3);
      goto LABEL_9;
    }

    __CFBinaryPlistGetOffsetForValueFromDictionary3();
    uint64_t v34 = *(void *)(a1 + 128);
    __CFBinaryPlistGetOffsetForValueFromDictionary3();
    __int128 v16 = (objc_class *)objc_msgSend((id)a1, "classForClassName:", 0, v34);
    if (v16) {
      goto LABEL_33;
    }
    __int128 v16 = (objc_class *)[(id)objc_opt_class() classForClassName:0];
    if (v16) {
      goto LABEL_33;
    }
    __int128 v16 = NSClassFromString(0LL);
    if (v16) {
      goto LABEL_33;
    }
    CFTypeRef v41 = 0LL;
    __int128 v45 = 0u;
    __int128 v46 = 0u;
    __int128 v43 = 0u;
    __int128 v44 = 0u;
    uint64_t v36 = [0 countByEnumeratingWithState:&v43 objects:value count:16];
    if (v36)
    {
      uint64_t v35 = *(void *)v44;
      while (2)
      {
        for (uint64_t i = 0LL; i != v36; ++i)
        {
          if (*(void *)v44 != v35) {
            objc_enumerationMutation(0LL);
          }
          uint64_t v23 = *(NSString **)(*((void *)&v43 + 1) + 8 * i);
          if ((_NSIsNSString() & 1) == 0)
          {
            Class v20 = +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"%@: data is corrupt or object is too large to decode",  _NSMethodExceptionProem((objc_class *)a1, sel_decodeObjectForKey_));
            CFRelease(v41);
            goto LABEL_43;
          }

          __int128 v16 = NSClassFromString(v23);
          if (v16) {
            goto LABEL_63;
          }
        }

        uint64_t v36 = [0 countByEnumeratingWithState:&v43 objects:value count:16];
        if (v36) {
          continue;
        }
        break;
      }
    }

    __int128 v16 = 0LL;
LABEL_63:
    if (v41) {
      CFRelease(v41);
    }
    if (v16)
    {
LABEL_33:
      if (([*(id *)(a1 + 120) classNameAllowed:v16] & 1) == 0)
      {
        uint64_t v18 = _NSMethodExceptionProem((objc_class *)a1, sel_decodeObjectForKey_);
        unint64_t v19 = +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"%@: data to unarchive contains class (%@) which has not been allowed",  v18,  NSStringFromClass(v16));
        goto LABEL_42;
      }
    }

    else
    {
      if (!*(void *)(a1 + 8) || (objc_opt_respondsToSelector() & 1) == 0)
      {
        __int128 v16 = 0LL;
        goto LABEL_35;
      }

      CFTypeRef v41 = 0LL;
      __int128 v16 = (objc_class *)[*(id *)(a1 + 8) unarchiver:a1 cannotDecodeObjectOfClassName:0 originalClasses:0];
      if (v41) {
        CFRelease(v41);
      }
      if (!v16) {
        goto LABEL_35;
      }
    }

    if (_coderValidateClassValidToMessageForUnarchiving(v16))
    {
LABEL_35:
      __int128 v17 = (objc_class *)-[objc_class classForKeyedUnarchiver](v16, "classForKeyedUnarchiver");
      if (v17)
      {
        if ([(id)a1 requiresSecureCoding])
        {
          if (a3)
          {
            if (([(id)a1 validateAllowedClass:v17 forKey:a3] & 1) == 0) {
              goto LABEL_9;
            }
          }

          else
          {
            [(id)a1 validateClassSupportsSecureCoding:v17];
          }
        }

        _NSCoderCheckPotentiallyMangledClassNameAndWarn((uint64_t)v17, 0);
        uint64_t v21 = *(void *)(a1 + 120);
        if (-[NSCoder _isPossibleNestedCollectionClass:](a1, v17) && *(_BYTE *)(v21 + 40))
        {
          if (*(_BYTE *)(v21 + 41))
          {
            *(_WORD *)(v21 + 40) = 0;
            objc_msgSend( (id)a1,  "__failWithExceptionName:errorCode:format:",  @"NSInvalidUnarchiveOperationException",  4864,  @"%1$@: value for key (%2$@) contains too many nested (%3$@)s",  _NSMethodExceptionProem((objc_class *)a1, sel_decodeObjectForKey_),  a3,  0);
            goto LABEL_9;
          }

          *(_BYTE *)(v21 + 41) = 1;
        }

        LOBYTE(v43) = 1;
        id v24 = coderAllocateClassForUnarchival((objc_class *)a1, v17, &v43);
        CFTypeRef cf = v24;
        if ((_BYTE)v43)
        {
          int v25 = *(_DWORD *)(a1 + 64);
          *(_DWORD *)(a1 + 64) = 0;
          uint64_t v26 = *(void *)(a1 + 72);
          uint64_t v27 = *(void *)(v26 + 32);
          *(void *)(v26 + 32) = v39;
          CFDictionarySetValue(*(CFMutableDictionaryRef *)(a1 + 48), (const void *)a2, v24);
          uint64_t v28 = (void *)objc_msgSend((id)objc_msgSend((id)cf, "initWithCoder:", a1), "awakeAfterUsingCoder:", a1);
          uint64_t v29 = v28;
          *(_DWORD *)(*(void *)(a1 + 120) + 16LL) = a2;
          *(void *)(*(void *)(a1 + 72) + 32LL) = v27;
          *(_DWORD *)(a1 + 64) = v25;
          CFTypeRef cf = v28;
          if (v28)
          {
            value[0] = v28;
            uint64_t v30 = *(const __CFDictionary **)(a1 + 32);
            if (v30 && CFDictionaryGetValueIfPresent(v30, v29, (const void **)value))
            {
              if (value[0] != v29)
              {

                id v31 = value[0];
              }
            }

            else
            {
              id v32 = v29;
              if (*(void *)(a1 + 8) && (objc_opt_respondsToSelector() & 1) != 0)
              {
                unint64_t v33 = (void *)[*(id *)(a1 + 8) unarchiver:a1 didDecodeObject:v29];
                value[0] = v33;
              }

              else
              {
                unint64_t v33 = value[0];
              }

              if (v33) {
                objc_msgSend((id)a1, "_replaceObject:withObject:", v29);
              }
              else {
                value[0] = v29;
              }
            }

            CFTypeRef cf = value[0];
            CFDictionarySetValue(*(CFMutableDictionaryRef *)(a1 + 24), value[0], (const void *)a2);
            CFDictionarySetValue(*(CFMutableDictionaryRef *)(a1 + 56), (const void *)a2, cf);
          }

          CFDictionaryRemoveValue(*(CFMutableDictionaryRef *)(a1 + 48), (const void *)a2);
          *a4 = cf;
          return 1LL;
        }

void sub_182EC3AC8( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27)
{
  if (a2)
  {
    objc_begin_catch(exception_object);
    CFDictionaryRemoveValue(*(CFMutableDictionaryRef *)(v27 + 48), v28);
    objc_exception_rethrow();
    __break(1u);
    JUMPOUT(0x182EC3BB8LL);
  }

  _Unwind_Resume(exception_object);
}

BOOL _coderValidateClassValidToMessageForUnarchiving(objc_class *a1)
{
  return class_respondsToSelector(a1, sel_methodSignatureForSelector_)
      && class_respondsToSelector(a1, sel_doesNotRecognizeSelector_)
      && class_respondsToSelector(a1, sel_forwardInvocation_);
}

unint64_t _classOverridesSelector(objc_class *a1, const char *a2)
{
  unint64_t result = (unint64_t)class_getMethodImplementation(a1, a2);
  if (result)
  {
    int v5 = (id (*)(id, SEL, ...))result;
    Superclass = class_getSuperclass(a1);
    if (Superclass && (uint64_t v7 = Superclass, v5 == class_getMethodImplementation(Superclass, a2)))
    {
      Method InstanceMethod = class_getInstanceMethod(a1, a2);
      return InstanceMethod != class_getInstanceMethod(v7, a2);
    }

    else
    {
      return 1LL;
    }
  }

  return result;
}

uint64_t _NSCoderCheckPotentiallyMangledClassNameAndWarn(uint64_t result, int a2)
{
  if (result)
  {
    uint64_t v3 = result;
    unint64_t result = (uint64_t)class_getName((Class)result);
    if (*(_BYTE *)result == 95 && *(_BYTE *)(result + 1) == 84 && *(_BYTE *)(result + 2))
    {
      unsigned __int8 v4 = atomic_load(_NSCoderCheckPotentiallyMangledClassNameAndWarn_warningMethodIsAvailable);
      if ((v4 & 1) == 0)
      {
        unint64_t result = objc_opt_respondsToSelector();
        if ((result & 1) == 0) {
          return result;
        }
        atomic_store(1u, _NSCoderCheckPotentiallyMangledClassNameAndWarn_warningMethodIsAvailable);
      }

      return +[NSKeyedUnarchiver _swift_checkClassAndWarnForKeyedArchiving:operation:]( &OBJC_CLASS___NSKeyedUnarchiver,  "_swift_checkClassAndWarnForKeyedArchiving:operation:",  v3,  a2 ^ 1u);
    }
  }

  return result;
}

id coderAllocateClassForUnarchival(objc_class *a1, objc_class *a2, _BYTE *a3)
{
  uint64_t v13 = *MEMORY[0x1895F89C0];
  *a3 = 1;
  if (-[objc_class requiresSecureCoding](a1, "requiresSecureCoding"))
  {
    if (qword_18C4961A0 != -1) {
      dispatch_once(&qword_18C4961A0, &__block_literal_global_607);
    }
    *(void *)buf = sel_classForKeyedArchiver;
    *(void *)&buf[8] = sel_classForArchiver;
    *(void *)&buf[16] = sel_classForCoder;
    Superclass = class_getSuperclass(a2);
    uint64_t v7 = 0LL;
    while (1)
    {
      unint64_t v8 = *(const char **)&buf[v7];
      MethodImplementation = class_getMethodImplementation(a2, v8);
      v7 += 8LL;
      if (v7 == 24) {
        goto LABEL_11;
      }
    }

    if (Superclass != (objc_class *)MEMORY[0x189616338]
      && MethodImplementation == class_getMethodImplementation(Superclass, v8))
    {
      *a3 = 0;
    }
  }

LABEL_11:
  if (*a3) {
    return objc_allocWithZone(a2);
  }
  unsigned int v11 = (os_log_s *)_NSOSLog();
  if (os_log_type_enabled(v11, OS_LOG_TYPE_FAULT))
  {
    *(_DWORD *)buf = 138543618;
    *(void *)&uint8_t buf[4] = a2;
    *(_WORD *)&buf[12] = 2114;
    *(void *)&buf[14] = a2;
    _os_log_fault_impl( &dword_182EB1000,  v11,  OS_LOG_TYPE_FAULT,  "Class '%{public}@' unexpectedly found in possibly-altered archive. -[%{public}@ classForCoder] is inherited from a superclass and should likely have replaced this object at encode time. To be allowed in archives, it should overr ide -classForCoder itself.",  buf,  0x16u);
  }

  -[objc_class __failWithExceptionName:errorCode:format:]( a1,  "__failWithExceptionName:errorCode:format:",  @"NSArchiverArchiveInconsistency",  4864LL,  @"%@: class '%@' unexpectedly found in possibly-altered archive. -[%@ classForCoder] is inherited from a superclass and should likely have replaced this object at encode time. To be allowed in archives, it should override -classForCoder itself",  _NSMethodExceptionProem(a1, sel_decodeObjectForKey_),  a2,  a2);
  return 0LL;
}

    objc_msgSend( (id)a1,  "__failWithExceptionName:errorCode:format:",  @"NSInvalidUnarchiveOperationException",  4864,  @"%@: value for key (%@) is not an integer number",  _NSMethodExceptionProem((objc_class *)a1, sel_decodeInt64ForKey_),  a2);
    goto LABEL_12;
  }

  unint64_t result = __CFBinaryPlistGetOffsetForValueFromDictionary3();
  if (!(_DWORD)result)
  {
    uint64_t v13 = 0LL;
    goto LABEL_15;
  }

  if (!_readInt( (void *)a1,  (_BYTE *)(*(void *)(a1 + 104) + v15),  *(void *)(a1 + 104) + *(void *)(a1 + 112) - 1LL,  v17,  0LL)) {
    goto LABEL_11;
  }
  uint64_t v13 = v17[0];
  unint64_t result = 1LL;
LABEL_15:
  *a3 = v13;
  return result;
}

  v129 = a6;
  v123 = a8;
  Class v20 = String.UnicodeScalarView.index(_:offsetBy:)(a11, -1LL, a12, a13);
  v122 = 0;
  uint64_t v21 = a10;
LABEL_15:
  v125 = v21 >> 14;
  v139 = a2 >> 14;
  uint64_t v22 = a1 >> 14;
  v135 = (a13 & 0xFFFFFFFFFFFFFFFLL) + 32;
  v127 = a4 & 0xFFFFFFFFFFFFFFLL;
  v132 = a4;
  v126 = (a4 & 0xFFFFFFFFFFFFFFFLL) + 32;
  while (1)
  {
    v143 = 15LL;
    v144 = v20;
    if (v22 >= v139) {
      break;
    }
    v124 = v20;
    LOBYTE(v23) = 0;
    id v24 = 0LL;
    int v25 = 0LL;
    uint64_t v26 = 0xE000000000000000LL;
    uint64_t v27 = 15LL;
    uint64_t v28 = 0xE000000000000000LL;
    uint64_t v29 = a1;
    v137 = v22;
LABEL_18:
    v140 = 0;
    v134 = v29;
    v136 = v29 >> 14;
    while (1)
    {
      if ((v23 & 1) != 0)
      {
        _StringGuts.validateScalarIndex(_:)(v143, v25, v28);
        if ((v28 & 0x1000000000000000LL) != 0)
        {
          id v31 = _StringGuts.foreignErrorCorrectedScalar(startingAt:)();
          _StringGuts.validateScalarIndex(_:)(v143, v25, v28);
          v143 = String.UnicodeScalarView._foreignIndex(after:)();
          if (v140) {
            goto LABEL_41;
          }
        }

        else
        {
          if ((v28 & 0x2000000000000000LL) != 0)
          {
            v141 = v25;
            v142 = v28 & 0xFFFFFFFFFFFFFFLL;
            id v31 = _decodeScalar(_:startingAt:)();
            uint64_t v34 = _StringGuts.validateScalarIndex(_:)(v143, v25, v28) >> 16;
            v141 = v25;
            v142 = v28 & 0xFFFFFFFFFFFFFFLL;
            uint64_t v35 = *((unsigned __int8 *)&v141 + v34);
          }

          else
          {
            if ((v25 & 0x1000000000000000LL) == 0) {
              _StringObject.sharedUTF8.getter();
            }
            id v31 = _decodeScalar(_:startingAt:)();
            id v32 = _StringGuts.validateScalarIndex(_:)(v143, v25, v28);
            if ((v25 & 0x1000000000000000LL) != 0) {
              unint64_t v33 = (v28 & 0xFFFFFFFFFFFFFFFLL) + 32;
            }
            else {
              unint64_t v33 = _StringObject.sharedUTF8.getter();
            }
            uint64_t v34 = v32 >> 16;
            uint64_t v35 = *(unsigned __int8 *)(v33 + (v32 >> 16));
          }

          uint64_t v36 = (char)v35;
          unint64_t v37 = __clz(v35 ^ 0xFF) - 24;
          if (v36 >= 0) {
            LOBYTE(v37) = 1;
          }
          v143 = ((v34 + v37) << 16) | 5;
          if (v140) {
            goto LABEL_41;
          }
        }
      }

      else
      {
        if ((v144 ^ a11) < 0x4000)
        {
          v104 = v137 == v139;
          uint64_t v18 = a11;
LABEL_201:
          unint64_t v19 = a10;
          Class v20 = v124;
          if (v104) {
            goto LABEL_240;
          }
          goto LABEL_202;
        }

        _StringGuts.validateScalarIndex(_:in:)(v144, a10, a11, v17, v16);
        if ((v16 & 0x1000000000000000LL) != 0)
        {
          uint64_t v38 = _StringGuts.foreignErrorCorrectedScalar(startingAt:)();
        }

        else
        {
          if ((v16 & 0x2000000000000000LL) != 0)
          {
            v141 = v17;
            v142 = a13 & 0xFFFFFFFFFFFFFFLL;
          }

          else if ((v17 & 0x1000000000000000LL) == 0)
          {
            _StringObject.sharedUTF8.getter();
          }

          uint64_t v38 = _decodeScalar(_:startingAt:)();
        }

        id v31 = v38;
        if (v140)
        {
LABEL_41:
          _StringGuts.validateScalarIndex(_:)(v27, v24, v26);
          if ((v26 & 0x1000000000000000LL) != 0)
          {
            uint64_t v39 = _StringGuts.foreignErrorCorrectedScalar(startingAt:)();
            _StringGuts.validateScalarIndex(_:)(v27, v24, v26);
            uint64_t v27 = String.UnicodeScalarView._foreignIndex(after:)();
            if ((_DWORD)v31 == (_DWORD)v39) {
              goto LABEL_61;
            }
          }

          else
          {
            if ((v26 & 0x2000000000000000LL) != 0)
            {
              v141 = v24;
              v142 = v26 & 0xFFFFFFFFFFFFFFLL;
              uint64_t v39 = _decodeScalar(_:startingAt:)();
              int v42 = _StringGuts.validateScalarIndex(_:)(v27, v24, v26) >> 16;
              v141 = v24;
              v142 = v26 & 0xFFFFFFFFFFFFFFLL;
              __int128 v43 = *((unsigned __int8 *)&v141 + v42);
            }

            else
            {
              if ((v24 & 0x1000000000000000LL) == 0) {
                _StringObject.sharedUTF8.getter();
              }
              uint64_t v39 = _decodeScalar(_:startingAt:)();
              uint64_t v40 = _StringGuts.validateScalarIndex(_:)(v27, v24, v26);
              if ((v24 & 0x1000000000000000LL) != 0) {
                CFTypeRef v41 = (v26 & 0xFFFFFFFFFFFFFFFLL) + 32;
              }
              else {
                CFTypeRef v41 = _StringObject.sharedUTF8.getter();
              }
              int v42 = v40 >> 16;
              __int128 v43 = *(unsigned __int8 *)(v41 + (v40 >> 16));
            }

            __int128 v44 = (char)v43;
            __int128 v45 = __clz(v43 ^ 0xFF) - 24;
            if (v44 >= 0) {
              LOBYTE(v45) = 1;
            }
            uint64_t v27 = ((v42 + v45) << 16) | 5;
            if ((_DWORD)v31 == (_DWORD)v39) {
              goto LABEL_61;
            }
          }

          goto LABEL_63;
        }
      }

      _StringGuts.validateScalarIndex(_:in:)(v134, a1, a2, a3, v132);
      if ((v132 & 0x1000000000000000LL) != 0)
      {
        __int128 v46 = _StringGuts.foreignErrorCorrectedScalar(startingAt:)();
      }

      else
      {
        if ((v132 & 0x2000000000000000LL) != 0)
        {
          v141 = a3;
          v142 = v127;
        }

        else if ((a3 & 0x1000000000000000LL) == 0)
        {
          _StringObject.sharedUTF8.getter();
        }

        __int128 v46 = _decodeScalar(_:startingAt:)();
      }

      uint64_t v39 = v46;
      if ((_DWORD)v31 == (_DWORD)v46)
      {
LABEL_61:
        __int128 v17 = a12;
        __int128 v16 = a13;
        goto LABEL_98;
      }

    Class v20 = Substring.index(_:offsetBy:)();
    v152 = 0;
    uint64_t v21 = a10;
    goto LABEL_37;
  }

  if ((v153 & 1) != 0)
  {
LABEL_13:
    v152 = 1;
    uint64_t v21 = a10;
    Class v20 = a10;
    goto LABEL_37;
  }

  if ((a6 & 1) != 0)
  {
LABEL_22:
    uint64_t v21 = Substring.index(_:offsetBy:)();
    v152 = 1;
    Class v20 = a10;
    goto LABEL_37;
  }

  uint64_t v28 = v165 >> 14;
  if (v165 >> 14 >= v163 >> 14)
  {
    v152 = 1;
    uint64_t v21 = a11;
  }

  else
  {
    uint64_t v29 = a10 >> 14;
    if (a10 >> 14 >= a11 >> 14) {
      return 0LL;
    }
    uint64_t v30 = Substring.index(before:)();
    id v31 = Substring.index(before:)();
    uint64_t v21 = v31;
    if (v28 >= v30 >> 14)
    {
      v152 = 1;
      Class v20 = a10;
      unint64_t v15 = a10;
      goto LABEL_37;
    }

    if (v29 >= v31 >> 14) {
      return 0LL;
    }
    while (1)
    {
      id v32 = Substring.index(before:)();
      uint64_t v21 = Substring.index(before:)();
      if (v28 >= v32 >> 14) {
        break;
      }
      unint64_t result = 0LL;
      if (v29 >= v21 >> 14) {
        return result;
      }
    }

    v152 = 1;
    unint64_t v15 = v159;
  }

  Class v20 = v15;
LABEL_37:
  v156 = v21 >> 14;
  unint64_t v33 = -1LL;
  if (v21 >> 14 >= v20 >> 14) {
    unint64_t v33 = 1LL;
  }
  v155 = v33;
  v168 = v163 >> 14;
  v158 = v165 >> 14;
  v170 = a11;
  uint64_t v34 = v20;
  while (2)
  {
    v192 = 15LL;
    v193[0] = v34;
    unint64_t result = v34;
    if (v158 >= v168)
    {
      if (v158 == v168) {
        goto LABEL_281;
      }
      if (v156 == v34 >> 14) {
        return 0LL;
      }
      uint64_t v35 = 0;
      goto LABEL_250;
    }

    v154 = v34;
    uint64_t v35 = 0;
    uint64_t v36 = 0;
    v176 = 0LL;
    unint64_t v37 = 0LL;
    uint64_t v38 = 0xE000000000000000LL;
    v174 = 15LL;
    uint64_t v39 = 0xE000000000000000LL;
    uint64_t v40 = v165;
    CFTypeRef v41 = v158;
    int v42 = v181;
LABEL_42:
    v173 = 0;
    v164 = v40;
    v166 = v40 >> 14;
    v172 = v37;
    v177 = v39;
    __int128 v43 = v16;
    __int128 v44 = v170;
    while (1)
    {
      v167 = v41;
      v171 = v36;
      if ((v36 & 1) != 0)
      {
        uint64_t v47 = String.subscript.getter();
        __int128 v16 = v48;
        if ((v35 & 1) != 0) {
          swift_bridgeObjectRelease();
        }
        v192 = String.index(after:)();
        if (v173) {
          goto LABEL_48;
        }
      }

      else
      {
        if ((v193[0] ^ v44) < 0x4000)
        {
          if (v41 == v168) {
            goto LABEL_288;
          }
          if (v156 == v154 >> 14)
          {
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            if ((v35 & 1) != 0)
            {
LABEL_300:
              swift_bridgeObjectRelease();
              goto LABEL_301;
            }

            return 0LL;
          }

          goto LABEL_249;
        }

        uint64_t v47 = Substring.subscript.getter();
        __int128 v16 = v52;
        if ((v35 & 1) != 0) {
          swift_bridgeObjectRelease();
        }
        if (v173)
        {
LABEL_48:
          v180 = String.subscript.getter();
          unint64_t v50 = v49;
          if ((v35 & 1) != 0) {
            swift_bridgeObjectRelease();
          }
          v51 = String.index(after:)();
          goto LABEL_58;
        }
      }

      v180 = Substring.subscript.getter();
      unint64_t v50 = v53;
      if ((v35 & 1) != 0) {
        swift_bridgeObjectRelease();
      }
      v51 = v174;
LABEL_58:
      countAndFlagsBits = v180;
      v55 = v185;
      if (v47 == v180 && v16 == v50)
      {
        int v42 = v16;
        goto LABEL_63;
      }

      v174 = v51;
      v181 = v50;
      if ((_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
        break;
      }
LABEL_62:
      int v42 = v181;
      v51 = v174;
LABEL_63:
      v175 = v177;
      v56 = v172;
      if ((v171 & 1) != 0) {
        goto LABEL_64;
      }
LABEL_206:
      if (!v173)
      {
        v141 = v56;
        v174 = v51;
        v181 = v42;
        goto LABEL_221;
      }

    Hasher._combine(_:)(0);
    if ((v1 & 1) != 0) {
      goto LABEL_3;
    }
    goto LABEL_12;
  }

  uint64_t v2 = *((void *)&v11 + 1);
  uint64_t v3 = v11;
  unsigned __int8 v4 = v12;
  Hasher._combine(_:)(0LL);
  Hasher._combine(_:)(v3);
  if (v4 == 1)
  {
LABEL_3:
    Hasher._combine(_:)(0);
    return;
  }

    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v8);
    if ((v10 & 1) != 0) {
      goto LABEL_8;
    }
    goto LABEL_12;
  }

  Hasher._combine(_:)(0LL);
  Hasher._combine(_:)(v2);
  if ((v3 & 1) != 0)
  {
LABEL_8:
    Hasher._combine(_:)(0);
    return;
  }

  Hasher._combine(_:)(1u);
  int v5 = v1;
LABEL_13:
  Hasher._combine(_:)(v5);
}

    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v8);
    if ((v10 & 1) != 0) {
      goto LABEL_8;
    }
    goto LABEL_12;
  }

  Hasher._combine(_:)(0LL);
  Hasher._combine(_:)(v2);
  if ((v3 & 1) != 0)
  {
LABEL_8:
    Hasher._combine(_:)(0);
    return;
  }

  Hasher._combine(_:)(1u);
  int v5 = v1;
LABEL_13:
  Hasher._combine(_:)(v5);
}

      uint64_t v9 = 0;
      unint64_t v8 = v6 + v7;
LABEL_12:
      uint64_t v10 = 0;
      unsigned int v11 = v3;
      BOOL v12 = 1;
      if (v11 > 0xF || v9) {
        return v10 | (v12 << 8);
      }
      ++a1;
      uint64_t v3 = v8;
      if (a1 >= v4)
      {
        BOOL v12 = 0;
        uint64_t v10 = v8;
        return v10 | (v12 << 8);
      }
    }

    if ((v5 - 97) > 5)
    {
      uint64_t v10 = 0;
      BOOL v12 = 1;
      return v10 | (v12 << 8);
    }

    uint64_t v6 = v5 - 87;
LABEL_8:
    uint64_t v7 = 16 * v3;
    if ((a3 & 1) != 0) {
      goto LABEL_9;
    }
    goto LABEL_11;
  }

  uint64_t v10 = 0;
  BOOL v12 = 0;
  return v10 | (v12 << 8);
}
      }

      goto LABEL_39;
    }

    if (v4 == 160)
    {
LABEL_10:
      ++v3;
      goto LABEL_11;
    }

    v0[3] = v3;
    if (v4 == 123) {
      JSON5Scanner.scanObject()();
    }
    else {
LABEL_39:
    }
      JSON5Scanner.scanObject(withoutBraces:)(1);
  }

  else
  {
    JSON5Scanner.scanValue()();
  }

  if (!v14)
  {
    __int128 v17 = JSON5Scanner.DocumentReader.consumeWhitespace(allowingEOF:)(1);
    if (!v18)
    {
      value = v17.value;
      if ((*(_WORD *)&v17 & 0x100) != 0)
      {
        int v25 = v1[6];
        uint64_t v26 = v1[1];
        uint64_t v27 = v1[2];
        type metadata accessor for JSONMap();
        Class v1 = (void *)swift_allocObject();
        v1[2] = v25;
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LockedState<(buffer: BufferView<UInt8>, allocation: UnsafeRawPointer?)>._Buffer);
        uint64_t v28 = swift_allocObject();
        *(_DWORD *)(v28 + 40) = 0;
        *(void *)(v28 + 16) = v26;
        *(void *)(v28 + 24) = v27;
        *(void *)(v28 + 32) = 0LL;
        v1[3] = v28;
        swift_bridgeObjectRetain();
        return v1;
      }

      Class v1 = (void *)specialized static JSONError.SourceLocation.sourceLocation(at:fullSource:)(v1[3], v1[1], v1[2]);
      uint64_t v21 = v20;
      uint64_t v23 = v22;
      lazy protocol witness table accessor for type JSONError and conformance JSONError();
      swift_allocError();
      *(void *)unint64_t v15 = 0xD000000000000015LL;
      *(void *)(v15 + _Block_object_dispose(va, 8) = 0x80000001839CB510LL;
      *(void *)(v15 + 16) = value;
      *(void *)(v15 + 24) = v1;
      *(void *)(v15 + 32) = v21;
      *(void *)(v15 + 40) = v23;
      __int128 v16 = 1;
      goto LABEL_44;
    }
  }

  return v1;
}
    }

    goto LABEL_34;
  }

  if (v7 == 160)
  {
LABEL_10:
    ++v6;
    goto LABEL_11;
  }

  v1[3] = v6;
  if (v7 == 125)
  {
    if (withoutBraces)
    {
      Class v20 = specialized static JSONError.SourceLocation.sourceLocation(at:fullSource:)( (unint64_t)v6,  v1[1],  v1[2]);
      uint64_t v22 = v21;
      id v24 = v23;
      lazy protocol witness table accessor for type JSONError and conformance JSONError();
      swift_allocError();
      *(void *)int v25 = 0LL;
      *(void *)(v25 + _Block_object_dispose(va, 8) = 0LL;
      *(void *)(v25 + 16) = 125LL;
      *(void *)(v25 + 24) = v20;
      *(void *)(v25 + 32) = v22;
      *(void *)(v25 + 40) = v24;
      *(_BYTE *)(v25 + 4_Block_object_dispose(va, 8) = 1;
      goto LABEL_39;
    }

    int v5 = (unint64_t)(v6 + 1);
    v1[3] = v6 + 1;
    goto LABEL_35;
  }
    }

    goto LABEL_34;
  }

  if ((_DWORD)v11 == 160)
  {
LABEL_10:
    ++v9;
    goto LABEL_11;
  }

  v3[3] = v9;
  if ((_DWORD)v11 != 58) {
    goto LABEL_51;
  }
  v3[3] = v9 + 1;
  JSON5Scanner.scanValue()();
  if (!v24)
  {
    *count += 2LL;
    int v25 = JSON5Scanner.DocumentReader.consumeWhitespace(allowingEOF:)(withoutBraces);
    if (!v26)
    {
      value = v25.value;
      if ((*(_WORD *)&v25 & 0x100) != 0)
      {
        if (!withoutBraces)
        {
          __break(1u);
          return;
        }

        goto LABEL_55;
      }

      if (v25.value == 125) {
        goto LABEL_49;
      }
      if (v25.value != 44)
      {
        unint64_t v37 = specialized static JSONError.SourceLocation.sourceLocation(at:fullSource:)(v4[3], v4[1], v4[2]);
        uint64_t v39 = v38;
        CFTypeRef v41 = v40;
        lazy protocol witness table accessor for type JSONError and conformance JSONError();
        swift_allocError();
        *(_OWORD *)uint64_t v21 = xmmword_1837301B0;
        *(void *)(v21 + 16) = value;
        *(void *)(v21 + 24) = v37;
        *(void *)(v21 + 32) = v39;
        *(void *)(v21 + 40) = v41;
        goto LABEL_53;
      }

      ++v4[3];
      uint64_t v28 = JSON5Scanner.DocumentReader.consumeWhitespace(allowingEOF:)(withoutBraces);
      if (!v29)
      {
        if ((*(_WORD *)&v28 & 0x100) != 0) {
          goto LABEL_55;
        }
        if (v28.value == 125)
        {
LABEL_49:
          if (withoutBraces)
          {
            uint64_t v30 = specialized static JSONError.SourceLocation.sourceLocation(at:fullSource:)(v4[3], v4[1], v4[2]);
            id v32 = v31;
            uint64_t v34 = v33;
            lazy protocol witness table accessor for type JSONError and conformance JSONError();
            swift_allocError();
            *(void *)uint64_t v21 = 0LL;
            *(void *)(v21 + _Block_object_dispose(va, 8) = 0LL;
            *(void *)(v21 + 16) = 125LL;
LABEL_52:
            *(void *)(v21 + 24) = v30;
            *(void *)(v21 + 32) = v32;
            *(void *)(v21 + 40) = v34;
LABEL_53:
            uint64_t v23 = 1;
            goto LABEL_37;
          }

          ++v4[3];
LABEL_55:
          *done = 1;
        }
      }
    }
  }

    unint64_t v15 = v16;
    if (v16 >= v17) {
      goto LABEL_22;
    }
  }

  __break(1u);
LABEL_31:
  __break(1u);
LABEL_32:
  __break(1u);
  return result;
}

    specialized Array.replaceSubrange<A>(_:with:)(0LL, *(void *)(v8 + 16));
    return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8))(v4, v6);
  }

  uint64_t v27 = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v3 = *(char **)(v2 + 24);
  if ((v27 & 1) == 0)
  {
    if (*((void *)v3 + 3) >= 2uLL)
    {
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<UInt8>);
      id v31 = (void *)swift_allocObject();
      id v32 = _swift_stdlib_malloc_size(v31);
      v31[2] = 0LL;
      v31[3] = 2 * v32 - 64;
    }

    else
    {
      id v31 = (void *)MEMORY[0x18961AFE8];
    }

    *(void *)(*(void *)(v0 + 16) + 24LL) = v31;
    swift_bridgeObjectRelease();
    return swift_task_switch();
  }

  uint64_t v28 = *((void *)v3 + 2);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0LL, v28, 1, v3);
  }
  if (!v28)
  {
LABEL_28:
    uint64_t v26 = *(void *)(v0 + 16);
LABEL_20:
    *(void *)(v26 + 24) = v3;
    return swift_task_switch();
  }

  uint64_t v29 = *((void *)v3 + 2);
  uint64_t v30 = v29 - v28;
  if (v29 - v28 >= 0)
  {
    memmove(v3 + 32, &v3[v28 + 32], v29 - v28);
    *((void *)v3 + 2) = v30;
    goto LABEL_28;
  }

  return _fatalErrorMessage(_:_:file:line:flags:)();
}

    specialized Array.replaceSubrange<A>(_:with:)(0LL, *(void *)(v8 + 16));
    return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8))(v4, v6);
  }

  uint64_t v27 = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v3 = *(char **)(v2 + 24);
  if ((v27 & 1) == 0)
  {
    if (*((void *)v3 + 3) >= 2uLL)
    {
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<UInt8>);
      id v31 = (void *)swift_allocObject();
      id v32 = _swift_stdlib_malloc_size(v31);
      v31[2] = 0LL;
      v31[3] = 2 * v32 - 64;
    }

    else
    {
      id v31 = (void *)MEMORY[0x18961AFE8];
    }

    *(void *)(*(void *)(v0 + 16) + 24LL) = v31;
    swift_bridgeObjectRelease();
    return swift_task_switch();
  }

  uint64_t v28 = *((void *)v3 + 2);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0LL, v28, 1, v3);
  }
  if (!v28)
  {
LABEL_28:
    uint64_t v26 = *(void *)(v0 + 16);
LABEL_20:
    *(void *)(v26 + 24) = v3;
    return swift_task_switch();
  }

  uint64_t v29 = *((void *)v3 + 2);
  uint64_t v30 = v29 - v28;
  if (v29 - v28 >= 0)
  {
    memmove(v3 + 32, &v3[v28 + 32], v29 - v28);
    *((void *)v3 + 2) = v30;
    goto LABEL_28;
  }

  return _fatalErrorMessage(_:_:file:line:flags:)();
}

    specialized Array.replaceSubrange<A>(_:with:)(0LL, *(void *)(v8 + 16));
    return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8))(v4, v6);
  }

  uint64_t v27 = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v3 = *(char **)(v2 + 24);
  if ((v27 & 1) == 0)
  {
    if (*((void *)v3 + 3) >= 2uLL)
    {
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<UInt8>);
      id v31 = (void *)swift_allocObject();
      id v32 = _swift_stdlib_malloc_size(v31);
      v31[2] = 0LL;
      v31[3] = 2 * v32 - 64;
    }

    else
    {
      id v31 = (void *)MEMORY[0x18961AFE8];
    }

    *(void *)(*(void *)(v0 + 16) + 24LL) = v31;
    swift_bridgeObjectRelease();
    return swift_task_switch();
  }

  uint64_t v28 = *((void *)v3 + 2);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0LL, v28, 1, v3);
  }
  if (!v28)
  {
LABEL_28:
    uint64_t v26 = *(void *)(v0 + 16);
LABEL_20:
    *(void *)(v26 + 24) = v3;
    return swift_task_switch();
  }

  uint64_t v29 = *((void *)v3 + 2);
  uint64_t v30 = v29 - v28;
  if (v29 - v28 >= 0)
  {
    memmove(v3 + 32, &v3[v28 + 32], v29 - v28);
    *((void *)v3 + 2) = v30;
    goto LABEL_28;
  }

  return _fatalErrorMessage(_:_:file:line:flags:)();
}

    CFStringRef v3 = (char *)specialized _ContiguousArrayBuffer.init(_uninitializedCount:minimumCapacity:)( 0LL,  *((void *)v12 + 3) >> 1);
    swift_bridgeObjectRelease();
    return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8))(v8, v10);
  }

  id v24 = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v14 = *v3;
  if ((v24 & 1) == 0)
  {
    if (*((void *)v14 + 3) >= 2uLL)
    {
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<UInt8>);
      uint64_t v28 = (void *)swift_allocObject();
      uint64_t v29 = _swift_stdlib_malloc_size(v28);
      v28[2] = 0LL;
      v28[3] = 2 * v29 - 64;
    }

    else
    {
      uint64_t v28 = (void *)MEMORY[0x18961AFE8];
    }

    CFStringRef v3 = (char *)v28;
    swift_bridgeObjectRelease();
    return swift_task_switch();
  }

  int v25 = *((void *)v14 + 2);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v14 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0LL, v25, 1, v14);
  }
  if (!v25)
  {
LABEL_20:
    CFStringRef v3 = v14;
    return swift_task_switch();
  }

  uint64_t v26 = *((void *)v14 + 2);
  uint64_t v27 = v26 - v25;
  if (v26 - v25 >= 0)
  {
    memmove(v14 + 32, &v14[v25 + 32], v26 - v25);
    *((void *)v14 + 2) = v27;
    goto LABEL_20;
  }

  return _fatalErrorMessage(_:_:file:line:flags:)();
}

  Hasher._combine(_:)(0);
}

    swift_bridgeObjectRelease();
    return 0LL;
  }

  if (!v5)
  {
    swift_bridgeObjectRetain();
    goto LABEL_11;
  }

  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain();
  unint64_t v8 = specialized static Set.== infix(_:_:)(v2, v5);
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease();
  unint64_t result = 0LL;
  if ((v8 & 1) != 0 && ((v3 ^ v6) & 1) == 0)
  {
LABEL_15:
    if (v4)
    {
      if (v7)
      {
        swift_bridgeObjectRetain();
        uint64_t v10 = swift_bridgeObjectRetain();
        unsigned int v11 = specialized static Set.== infix(_:_:)(v10, v7);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if ((v11 & 1) != 0) {
          return 1LL;
        }
      }
    }

    else if (!v7)
    {
      return 1LL;
    }

    return 0LL;
  }

  return result;
}

  if ((a3 & 1) != 0)
  {
  }

  else if ((v15 + 29) < 0xDFu)
  {
    return 0LL;
  }

  uint64_t v40 = *(void *)(a1 + 16);
  if (!v40) {
    return 0LL;
  }
  CFTypeRef v41 = a1 + 32;
  unint64_t v19 = (a6 >> 59) & 1;
  if ((a7 & 0x1000000000000000LL) == 0) {
    LOBYTE(v19) = 1;
  }
  uint64_t v39 = a5 & 0xC;
  Class v20 = a4;
  uint64_t v21 = 4LL << v19;
  if ((a7 & 0x2000000000000000LL) != 0) {
    uint64_t v22 = HIBYTE(a7) & 0xF;
  }
  else {
    uint64_t v22 = a6 & 0xFFFFFFFFFFFFLL;
  }
  __int128 v45 = v20;
  __int128 v46 = a5;
  unint64_t v48 = v20 >> 14;
  unint64_t v49 = v22;
  uint64_t v47 = a5 >> 14;
  unint64_t result = swift_bridgeObjectRetain();
  uint64_t v23 = 0LL;
  __int128 v43 = a2;
  unint64_t v50 = a6;
  while (1)
  {
    id v24 = *(void *)(v41 + 8 * v23);
    if ((a3 & 1) != 0)
    {
      v51 = 0LL;
      int v25 = *(void *)(v24 + 16);
      uint64_t v26 = v25 - 1;
      uint64_t v27 = -1LL;
      int v42 = v45;
    }

    else
    {
      unint64_t result = v46;
      if (v39 == v21)
      {
        unint64_t result = _StringGuts._slowEnsureMatchingEncoding(_:)(v46, a6, a7);
        if (result < 0x4000) {
          goto LABEL_96;
        }
      }

      else if (v46 < 0x4000)
      {
        goto LABEL_96;
      }

      if ((a7 & 0x1000000000000000LL) != 0)
      {
        if (v49 < result >> 16) {
          goto LABEL_99;
        }
        unint64_t result = String.UTF8View._foreignIndex(before:)();
        int v42 = result;
      }

      else
      {
        int v42 = (result & 0xFFFFFFFFFFFF0000LL) - 65532;
      }

      uint64_t v26 = 0LL;
      int v25 = *(void *)(v24 + 16);
      v51 = v25 - 1;
      uint64_t v27 = 1LL;
    }

    if (v26 >= v25) {
      goto LABEL_95;
    }
    __int128 v44 = v23;
    uint64_t v28 = *(unsigned __int8 *)(v24 + 32 + v26);
    swift_bridgeObjectRetain();
    unint64_t result = Substring.UTF8View.subscript.getter();
LABEL_26:
    uint64_t v23 = v44 + 1;
    unint64_t result = swift_bridgeObjectRelease();
    a6 = v50;
    if (v44 + 1 == v40)
    {
      swift_bridgeObjectRelease();
      return 0LL;
    }
  }

  a1 = v43;
  uint64_t v29 = v42 >> 16;
  while (1)
  {
    uint64_t v30 = v51 - v26;
    if (__OFSUB__(v51, v26)) {
      break;
    }
    if ((a3 & 1) != 0)
    {
      if (v30 <= 0 && v27 < v30) {
        goto LABEL_78;
      }
    }

    else if (!v30)
    {
      goto LABEL_78;
    }

    id v31 = v26 + v27;
    if (__OFADD__(v26, v27)) {
      goto LABEL_89;
    }
    if ((a1 & 0xC) == v21)
    {
      unint64_t result = _StringGuts._slowEnsureMatchingEncoding(_:)(a1, v50, a7);
      a1 = result;
      if ((a7 & 0x1000000000000000LL) != 0)
      {
LABEL_69:
        unint64_t result = String.UTF8View._foreignIndex(_:offsetBy:limitedBy:)();
        if ((v37 & 1) != 0) {
          goto LABEL_26;
        }
        a1 = result;
        if ((v31 & 0x8000000000000000LL) != 0) {
          goto LABEL_92;
        }
        goto LABEL_57;
      }
    }

    else if ((a7 & 0x1000000000000000LL) != 0)
    {
      goto LABEL_69;
    }

    id v32 = a1 >> 16;
    unint64_t v33 = (a1 >> 16) + v27;
    if ((a3 & 1) != 0)
    {
    }

    else if (v29 >= v32 && (uint64_t)v29 < v33)
    {
      goto LABEL_26;
    }

    if (v33 < 0) {
      goto LABEL_90;
    }
    if (v49 < v33) {
      goto LABEL_91;
    }
    a1 = (v33 << 16) | 4;
    if ((v31 & 0x8000000000000000LL) != 0) {
      goto LABEL_92;
    }
LABEL_57:
    if (v31 >= *(void *)(v24 + 16)) {
      goto LABEL_93;
    }
    uint64_t v34 = *(unsigned __int8 *)(v24 + 32 + v31);
    unint64_t result = a1;
    if ((a1 & 0xC) == v21) {
      unint64_t result = _StringGuts._slowEnsureMatchingEncoding(_:)(a1, v50, a7);
    }
    if (result >> 14 < v48 || result >> 14 >= v47) {
      goto LABEL_94;
    }
    if ((a7 & 0x1000000000000000LL) != 0)
    {
      unint64_t result = String.UTF8View._foreignSubscript(position:)();
    }

    else
    {
      uint64_t v35 = result >> 16;
      if ((a7 & 0x2000000000000000LL) != 0)
      {
        v52[0] = v50;
        v52[1] = a7 & 0xFFFFFFFFFFFFFFLL;
        unint64_t result = *((unsigned __int8 *)v52 + v35);
      }

      else
      {
        uint64_t v36 = (a7 & 0xFFFFFFFFFFFFFFFLL) + 32;
        if ((v50 & 0x1000000000000000LL) == 0) {
          uint64_t v36 = _StringObject.sharedUTF8.getter();
        }
        unint64_t result = *(unsigned __int8 *)(v36 + v35);
      }
    }

    v26 += v27;
  }

  __break(1u);
LABEL_89:
  __break(1u);
LABEL_90:
  __break(1u);
LABEL_91:
  __break(1u);
LABEL_92:
  __break(1u);
LABEL_93:
  __break(1u);
LABEL_94:
  __break(1u);
LABEL_95:
  __break(1u);
LABEL_96:
  __break(1u);
LABEL_97:
  __break(1u);
LABEL_98:
  __break(1u);
LABEL_99:
  __break(1u);
  return result;
}

  Hasher._combine(_:)(0);
}

  __break(1u);
}

  if ((a1[120] & 1) != 0) {
    goto LABEL_12;
  }
  uint64_t v34 = String.subscript.getter();
  uint64_t v36 = v34;
  unint64_t v37 = v35;
  uint64_t v39 = v38;
  CFTypeRef v41 = v40;
  if ((a1[217] & 1) != 0) {
    goto LABEL_15;
  }
  if ((v34 ^ v35) < 0x4000) {
    goto LABEL_66;
  }
  swift_bridgeObjectRetain();
  if (Substring.UTF8View.subscript.getter() != 91)
  {
    swift_bridgeObjectRelease();
    goto LABEL_66;
  }

  if (__OFSUB__(specialized Collection.count.getter(v36, v37, v39, v41), 1LL))
  {
LABEL_98:
    __break(1u);
    goto LABEL_99;
  }

  Substring.UTF8View.index(_:offsetBy:)();
  v96 = Substring.UTF8View.subscript.getter();
  swift_bridgeObjectRelease();
  if (v96 != 93)
  {
LABEL_66:
    v123 = _ss5SliceV32withContiguousStorageIfAvailableyqd__Sgqd__SRy7ElementQzGKXEKlFSRyxGq_s5Error_pRi_zRi0_zRi__Ri0__r0_lys5UInt8Vqd__Isgyrzo_ABySS8UTF8ViewVGADsAI_pAMRszr__lIetMggrzo_Tpq5Sb_Tg50162_s10Foundation13RFC3986ParserV8validate33_A90579D1FA072CB135F95EF00BA46450LL6string9component22percentEncodingAllowedSbx_AA15URLComponentSetAELLVSbtSyRzlFZSbSRys5I7VGXEfU_10Foundation0nO0VXMtAP15URLComponentSet01_qrstuvW0LLVSbTf1cn_nTf4ndnn_n( v36,  v37,  v39,  v41,  4u,  1);
    if (v123 == 2)
    {
      lazy protocol witness table accessor for type Substring and conformance Substring();
      StringProtocol._ephemeralString.getter();
      v124 = v41;
      v125 = (void *)String._bridgeToObjectiveCImpl()();
      swift_bridgeObjectRelease();
      v126 = (unsigned __int16 *)objc_msgSend(v125, sel__fastCharacterContents);
      v127 = v125;
      if (!v126)
      {
        swift_bridgeObjectRetain();
        v131 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)( v36,  v37,  v39,  v124,  4u,  1);
        goto LABEL_74;
      }

      StringProtocol._ephemeralString.getter();
      v128 = (void *)String._bridgeToObjectiveCImpl()();
      swift_bridgeObjectRelease();
      v129 = objc_msgSend(v128, sel_length);
      swift_unknownObjectRelease();
      v121 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)( v126,  (uint64_t)v129,  4u,  1);
    }

    else
    {
      v121 = v123;
    }

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

  objc_msgSend(a1, sel_failWithError_, _swift_stdlib_bridgeErrorToNSError());
  swift_unknownObjectRelease();

  type metadata accessor for __NSConcreteUUID();
  swift_deallocPartialClassInstance();
  return 0LL;
}

    Hasher._combine(_:)(1u);
    outlined copy of Locale.LanguageCode?(v28, v31);
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    outlined consume of Locale.LanguageCode?(v28, v31);
    uint64_t v9 = v34;
    if (v50) {
      goto LABEL_12;
    }
LABEL_19:
    Hasher._combine(_:)(0);
    goto LABEL_20;
  }

  Hasher._combine(_:)(0);
  if (v31) {
    goto LABEL_11;
  }
LABEL_18:
  Hasher._combine(_:)(0);
  uint64_t v9 = v34;
  if (!v50) {
    goto LABEL_19;
  }
LABEL_12:
  Hasher._combine(_:)(1u);
  Hasher._combine(_:)(*(void *)(v50 + 16));
  uint64_t v10 = *(void *)(v50 + 16);
  if (v10)
  {
    swift_bridgeObjectRetain();
    unsigned int v11 = v50 + 56;
    do
    {
      v11 += 32LL;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain_n();
      String.hash(into:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease_n();
      --v10;
    }

    while (v10);
    swift_bridgeObjectRelease();
    unint64_t v8 = v51;
  }

    *(_OWORD *)a1 = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
    return result;
  }

  if (v11 == 2 || (v11 & 1) != 0) {
    goto LABEL_11;
  }
LABEL_13:
  outlined init with take of LocalePreferences?((uint64_t)v9, (uint64_t)v8);
  outlined retain of LocalePreferences(v8);
  if (one-time initialization token for metric != -1) {
    swift_once();
  }
  unsigned __int8 v4 = &static Locale.MeasurementSystem.metric;
LABEL_19:
  int v5 = v4[1];
  uint64_t v6 = v4[2];
  uint64_t v7 = v4[3];
  *(void *)a1 = *v4;
  *(void *)(a1 + _Block_object_dispose(va, 8) = v5;
  *(void *)(a1 + 16) = v6;
  *(void *)(a1 + 24) = v7;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return outlined retain of LocalePreferences?( (uint64_t)v9,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined consume of LocalePreferences?);
}

  uint64_t v23 = 0LL;
LABEL_17:
  int v25 =  objc_msgSend( (id)objc_opt_self(),  sel__cocoaErrorWithCode_path_url_underlying_variant_source_destination_,  v13,  v14,  v15,  v18,  v20,  v22,  v23);

  *a5 = v25;
}

  __break(1u);
LABEL_12:
  __break(1u);
LABEL_13:
  __break(1u);
  return result;
}

    uint64_t v10 = v3 % 7 + 8;
    unsigned int v11 = __OFSUB__(v10, v9);
    BOOL v12 = v10 - v9;
    if (!v11) {
      return v12 % 7;
    }
LABEL_14:
    __break(1u);
LABEL_15:
    swift_once();
  }

  __break(1u);
  return result;
}

  if ((v5 & 1) != 0) {
    return result;
  }
  if (v4 >= 13)
  {
    uint64_t v9 = (v4 - 1) / 0xCuLL;
    unint64_t v8 = __OFADD__(result, v9);
    result += v9;
    if (!v8) {
      return result;
    }
    goto LABEL_20;
  }

  if (v4 > 0) {
    return result;
  }
  uint64_t v10 = -v4 / 0xCuLL;
  unsigned int v11 = result - v10;
  unint64_t result = v11 - 1;
  if (__OFSUB__(v11, 1LL)) {
LABEL_22:
  }
    __break(1u);
  return result;
}

  __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

  __break(1u);
  return result;
}

    swift_bridgeObjectRelease();
    return 0LL;
  }

  (*(void (**)(char *, uint64_t, void))(v6 + 16))( (char *)v13 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL),  v4,  MEMORY[0x189617FA8]);
  swift_dynamicCast();
  if ((v13[1] & 0x1000000000000000LL) != 0) {
    goto LABEL_11;
  }
  uint64_t v10 = String.subscript.getter();
LABEL_9:
  unsigned int v11 = v10;
  swift_bridgeObjectRelease();
  return v11;
}

  __break(1u);
  return result;
}

    BOOL v12 = __OFADD__(__CFADD__(v10, v6), v9);
    unsigned __int8 v4 = (__PAIR128__(v9, v10) + v6) >> 64;
    uint64_t v3 = v10 + v6;
LABEL_18:
    __int128 v17 = v12;
    uint64_t v18 = 0LL;
    if ((v11 & 1) != 0 || (v17 & 1) != 0) {
      return v18;
    }
    if (++a1 >= v5) {
      return v3;
    }
  }

  if (v8 == 63) {
    goto LABEL_27;
  }
  uint64_t v13 = 0LL;
  uint64_t v14 = 0LL;
  if (v8 < 0) {
    goto LABEL_20;
  }
LABEL_19:
  uint64_t v13 = 1LL << v8;
LABEL_20:
  while (1)
  {
    BOOL v12 = v14 | v13;
    if (a2 >= 0.0) {
      break;
    }
    if ((v12 & 0x8000000000000000LL) == 0)
    {
      LOBYTE(v6) = 0;
      BOOL v12 = -v12;
      goto LABEL_25;
    }

    __break(1u);
LABEL_31:
    __break(1u);
LABEL_32:
    uint64_t v14 = v5 >> -(char)v12;
    if (v8 == 63) {
      goto LABEL_34;
    }
LABEL_17:
    if ((v8 & 0x8000000000000000LL) == 0) {
      goto LABEL_19;
    }
    uint64_t v13 = 0LL;
  }

  if (v12 < 0) {
    goto LABEL_31;
  }
  LOBYTE(v6) = 0;
LABEL_25:
  *(void *)a1 = v12;
  *(_BYTE *)(a1 + _Block_object_dispose(va, 8) = v6;
  return result;
}

  if ((a6 & 0x1000000000000000LL) == 0)
  {
    if ((a6 & 0x2000000000000000LL) == 0) {
      goto LABEL_13;
    }
LABEL_19:
    unint64_t v37 = a5;
    uint64_t v38 = a6 & 0xFFFFFFFFFFFFFFLL;
    if ((HIBYTE(a6) & 0xF) != a2) {
      goto LABEL_22;
    }
    uint64_t v23 = &v37;
    uint64_t v22 = a1;
    goto LABEL_21;
  }

  a5 = static String._copying(_:)();
  uint64_t v27 = v26;
  unint64_t result = swift_bridgeObjectRelease();
  a6 = v27;
  if ((v27 & 0x2000000000000000LL) != 0) {
    goto LABEL_19;
  }
LABEL_13:
  if ((a5 & 0x1000000000000000LL) != 0)
  {
    uint64_t v21 = (a6 & 0xFFFFFFFFFFFFFFFLL) + 32;
    if ((a5 & 0xFFFFFFFFFFFFLL) != a2) {
      goto LABEL_22;
    }
LABEL_15:
    if (v21)
    {
      uint64_t v22 = a1;
      uint64_t v23 = (void *)v21;
LABEL_21:
      unint64_t result = memcmp(v22, v23, a2);
      if ((_DWORD)result) {
        goto LABEL_22;
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      id v24 = 0;
      int v25 = 4286578688LL;
LABEL_41:
      LOBYTE(v37) = v24;
      return v25 | ((unint64_t)v24 << 32);
    }

  __swift_project_boxed_opaque_existential_1(v10, v11);
  while ((dispatch thunk of UnkeyedDecodingContainer.isAtEnd.getter() & 1) == 0)
  {
    __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v10, v11);
    dispatch thunk of UnkeyedDecodingContainer.decode(_:)();
    Data._Representation.append(contentsOf:)();
    __swift_project_boxed_opaque_existential_1(v10, v11);
  }

  __swift_destroy_boxed_opaque_existential_1((uint64_t)v10);
  uint64_t v3 = (void *)v12;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  return v3;
}

    countAndFlagsBits = 0LL;
    object = (void *)0xE000000000000000LL;
    goto LABEL_24;
  }

  URL.absoluteURL.getter(&v35);
  unint64_t v8 = v35;
  v34[4] = v35;
  v34[5] = v36;
  v34[6] = v37;
  uint64_t v9 = URL.path(percentEncoded:)(percentEncoded);
  countAndFlagsBits = v9._countAndFlagsBits;
  object = v9._object;

  swift_release();
  swift_release();
LABEL_24:
  uint64_t v6 = countAndFlagsBits;
  uint64_t v7 = object;
LABEL_27:
  result._object = v7;
  result._countAndFlagsBits = v6;
  return result;
}

        --v14;
        break;
      default:
        goto LABEL_110;
    }
  }

  while (v26 != v16 >> 14);
  swift_bridgeObjectRelease();
  if (v14) {
    return 0LL;
  }
  if (v6 < 0)
  {
    __break(1u);
LABEL_115:
    __break(1u);
LABEL_116:
    __break(1u);
LABEL_117:
    __break(1u);
LABEL_118:
    __break(1u);
LABEL_119:
    __break(1u);
LABEL_120:
    __break(1u);
LABEL_121:
    __break(1u);
  }

  return specialized String.init<A, B>(_validating:as:)(0LL, v6, a1);
}

  __break(1u);
}

  *(_BYTE *)(swift_allocObject() + 16) = 1;
  uint64_t v21 = specialized _copySequenceToContiguousArray<A>(_:)( a1,  v10 & 0xC0F,  (void (*)(uint64_t *__return_ptr, void *))partial apply for closure #1 in _SearchPathURLs(for:in:expandTilde:));
  swift_release();
  uint64_t v22 = v21[2];
  if (v10 == 1032)
  {
    if (v22)
    {
      uint64_t v23 = &v21[3 * v22];
      id v24 = (void **)(v23 + 1);
      int v25 = v23 + 2;
      uint64_t v26 = v23 + 3;
      goto LABEL_16;
    }

  v104 = v16;
  v105 = v24;
  if (v14 >= 4)
  {
    outlined copy of TermOfAddress._TermOfAddress(v107, v108, v5, v115, v116, v27, v110, v15, v111, v24, v21, v16, v14);
    id v31 = v27;
    int v25 = v16;
    outlined consume of Locale.LanguageCode?(v107, v108);
    outlined consume of Locale.LanguageCode?(v116, v27);
    outlined consume of Locale.LanguageCode?(v111, v24);
    uint64_t v30 = v14;
    id v32 = *(void *)(v14 + 16);
    if (!v32) {
      goto LABEL_18;
    }
  }

  else
  {
    uint64_t v30 = MEMORY[0x18961AFE8];
    id v31 = v27;
    id v32 = *(void *)(MEMORY[0x18961AFE8] + 16LL);
    if (!v32)
    {
LABEL_18:
      swift_bridgeObjectRelease();
      v106 = 0LL;
      v121 = 0LL;
      if (v14 < 4) {
        goto LABEL_19;
      }
LABEL_22:
      outlined copy of TermOfAddress._TermOfAddress( v107,  v108,  v5,  v115,  v116,  v31,  v110,  v15,  v111,  v24,  v21,  v25,  v14);
      int v25 = v16;
      outlined consume of Locale.LanguageCode?(v107, v108);
      outlined consume of Locale.LanguageCode?(v116, v31);
      outlined consume of Locale.LanguageCode?(v111, v24);
      uint64_t v34 = v14;
      uint64_t v35 = *(void *)(v14 + 16);
      if (!v35) {
        goto LABEL_33;
      }
      goto LABEL_23;
    }
  }

  unint64_t v33 = v30 + 40;
  while (*(_BYTE *)(v33 + 24) != 1)
  {
    v33 += 64LL;
    if (!--v32) {
      goto LABEL_18;
    }
  }

  v106 = *(void *)(v33 - 8);
  uint64_t v36 = v21;
  unint64_t v37 = *(void *)v33;
  swift_bridgeObjectRetain();
  v121 = v37;
  uint64_t v21 = v36;
  swift_bridgeObjectRetain();
  id v31 = v113;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v14 >= 4) {
    goto LABEL_22;
  }
LABEL_19:
  uint64_t v34 = MEMORY[0x18961AFE8];
  uint64_t v35 = *(void *)(MEMORY[0x18961AFE8] + 16LL);
  if (!v35)
  {
LABEL_33:
    swift_bridgeObjectRelease();
    v103 = 0LL;
    v120 = 0LL;
    if (v14 < 4) {
      goto LABEL_34;
    }
LABEL_37:
    outlined copy of TermOfAddress._TermOfAddress(v107, v108, v5, v115, v116, v31, v110, v15, v111, v24, v21, v25, v14);
    int v25 = v16;
    outlined consume of Locale.LanguageCode?(v107, v108);
    outlined consume of Locale.LanguageCode?(v116, v31);
    outlined consume of Locale.LanguageCode?(v111, v24);
    int v42 = v14;
    __int128 v43 = *(void *)(v14 + 16);
    if (!v43) {
      goto LABEL_47;
    }
    goto LABEL_38;
  }

      __break(1u);
    }
  }

  uint64_t v21 = *v14;
  if (*v14) {
    goto LABEL_15;
  }
}

    uint64_t v14 = v10 - length + v11;
    flags = self->flags;
    if ((*(_BYTE *)&flags & 1) != 0)
    {
      if ((*(_BYTE *)&flags & 2) != 0 || !v12)
      {
        if (v14 <= v11) {
          CFStorageDeleteValues();
        }
        else {
          CFStorageInsertValues();
        }
        goto LABEL_24;
      }

      uint64_t v22 = v10;
      __int128 v16 = (NSData *)CFStorageCreate();
      CFStorageInsertValues();
      copyFromStringToStorage((uint64_t)self, 0LL, location, (uint64_t)v16, 0LL, 1);
      copyFromStringToStorage((uint64_t)self, v9, v11 - v9, (uint64_t)v16, v22 + location, 1);
      *(_DWORD *)&self->flags |= 2u;
    }

    else
    {
      uint64_t v22 = v10;
      __int128 v16 = (NSData *)CFStorageCreate();
      CFStorageInsertValues();
      if (self->contents.d.data)
      {
        copyFromStringToStorage((uint64_t)self, 0LL, location, (uint64_t)v16, 0LL, v12);
        copyFromStringToStorage((uint64_t)self, v9, v11 - v9, (uint64_t)v16, v22 + location, v12);
      }

      if (v12) {
        __int128 v17 = 3;
      }
      else {
        __int128 v17 = 1;
      }
      self->flags = ($12A8D912EA621CF5C78D0B17F79410D4)(*(_DWORD *)&self->flags & 0xFFFFFFFC | v17);
    }

    self->contents.d.data = v16;
    uint64_t v10 = v22;
LABEL_24:
    copyFromStringToStorage((uint64_t)a4, 0LL, v10, (uint64_t)self->contents.d.data, location, v12);
    self->length = v14;
    return;
  }

  if (!-[NSBigMutableString _copyDataFrom:range:](self, "_copyDataFrom:range:", a4, 0LL, v10))
  {
    if ([a4 _copyStorage:&v23 encoding:v24])
    {
      -[NSBigMutableString _setStorage:encoding:](self, "_setStorage:encoding:", v23, v24[0]);

      return;
    }

    goto LABEL_11;
  }

  objc_msgSend(v5, "setObject:forKey:", v7, @"NSPrincipalClass", *(_OWORD *)v22, *(void *)&v22[16], v23);
  return NSClassFromString(v7);
}

  memmove(a3, (const void *)v10, length);
}

    if (a4) {
      return;
    }
    goto LABEL_14;
  }

  CFDateFormatterSetFormat(formatter, v8);
  if (!a4) {
    goto LABEL_14;
  }
}

        if (v5 <= 1) {
          BOOL v12 = 1LL;
        }
        else {
          BOOL v12 = v5;
        }
        MEMORY[0x1895F8858](v7);
        uint64_t v14 = (uint64_t *)((char *)&v31 - v13);
        if (v5 <= 0x100)
        {
          bzero((char *)&v31 - v13, 8 * v12);
LABEL_19:
          if (!v5)
          {
LABEL_27:
            if (objc_msgSend(a3, "error", v31))
            {

              uint64_t v18 = 0LL;
            }

            else
            {
              uint64_t v18 = -[NSIndexPath initWithIndexes:length:](self, "initWithIndexes:length:", v14, v5);
            }

            if (v5 >= 0x101) {
              free(v14);
            }
            return v18;
          }

          if (v5 == 1)
          {
            if ([a3 containsValueForKey:@"NSIndexPathValue"])
            {
              *uint64_t v14 = [a3 decodeIntegerForKey:@"NSIndexPathValue"];
              goto LABEL_27;
            }

            uint64_t v35 = @"NSLocalizedDescription";
            uint64_t v36 = @"-[NSIndexPath initWithCoder:] decoder did not provide indexPath data.";
            uint64_t v21 = (void *)MEMORY[0x189603F68];
            uint64_t v22 = &v36;
            uint64_t v23 = &v35;
          }

          else
          {
            if ([a3 containsValueForKey:@"NSIndexPathData"])
            {
              if (v8)
              {
                unint64_t v19 = v14;
                Class v20 = v5;
                do
                {
                  *v19++ = _NSGetUnsignedInt2(&v31);
                  --v20;
                }

                while (v20);
              }

              goto LABEL_27;
            }

            if (v5 >= 0x101) {
              free(v14);
            }
            unint64_t v33 = @"NSLocalizedDescription";
            uint64_t v34 = @"-[NSIndexPath initWithCoder:] decoder did not provide indexPath data.";
            uint64_t v21 = (void *)MEMORY[0x189603F68];
            uint64_t v22 = &v34;
            uint64_t v23 = &v33;
          }

          objc_msgSend( a3,  "failWithError:",  +[NSError errorWithDomain:code:userInfo:]( NSError,  "errorWithDomain:code:userInfo:",  @"NSCocoaErrorDomain",  4864,  objc_msgSend(v21, "dictionaryWithObjects:forKeys:count:", v22, v23, 1, v31)));
          return 0LL;
        }

        uint64_t v14 = malloc(8 * v12);
        if (v14) {
          goto LABEL_19;
        }
        uint64_t v28 = +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"*** attempt to create an NSUInteger buffer of length (%lu) failed",  v12);
        uint64_t v26 = (void *)MEMORY[0x189603F70];
        uint64_t v29 = (uint64_t *)MEMORY[0x189603B38];
        goto LABEL_43;
      }

      if (v8)
      {
        uint64_t v7 = [v6 length];
        uint64_t v9 = 0LL;
        if (v7)
        {
          uint64_t v10 = v8;
          do
          {
            unsigned int v11 = *v10++;
            v9 += (v11 >> 7) ^ 1;
            --v7;
          }

          while (v7);
        }

        if (v9 == v5) {
          goto LABEL_10;
        }

        unint64_t v37 = @"NSLocalizedDescription";
        uint64_t v38 = @"Range data did not match expected length.";
        unint64_t v15 = (void *)MEMORY[0x189603F68];
        __int128 v16 = &v38;
        __int128 v17 = &v37;
      }

      else
      {

        uint64_t v39 = @"NSLocalizedDescription";
        uint64_t v40 = @"Range data missing.";
        unint64_t v15 = (void *)MEMORY[0x189603F68];
        __int128 v16 = &v40;
        __int128 v17 = &v39;
      }
    }

    else
    {

      CFTypeRef v41 = @"NSLocalizedDescription";
      v42[0] = @"-[NSIndexPath initWithCoder:] decoder did not provide a length value for the indexPath.";
      unint64_t v15 = (void *)MEMORY[0x189603F68];
      __int128 v16 = (const __CFString **)v42;
      __int128 v17 = &v41;
    }

    objc_msgSend( a3,  "failWithError:",  +[NSError errorWithDomain:code:userInfo:]( NSError,  "errorWithDomain:code:userInfo:",  @"NSCocoaErrorDomain",  4864,  objc_msgSend(v15, "dictionaryWithObjects:forKeys:count:", v16, v17, 1)));
    return 0LL;
  }

  v32.receiver = self;
  v32.super_class = (Class)&OBJC_CLASS___NSIndexPath;
  int v25 = +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"%@ cannot be serialized with a coder that does not support keyed archives",  -[NSIndexPath description](&v32, sel_description));

  uint64_t v26 = (void *)MEMORY[0x189603F70];
  uint64_t v27 = *MEMORY[0x189603A60];
  uint64_t v28 = v25;
LABEL_44:
  objc_exception_throw((id)objc_msgSend(v26, "exceptionWithName:reason:userInfo:", v27, v28, 0, v31));
  return (NSIndexPath *)_NSGetUnsignedInt2(v30);
}

                      unint64_t result = 0LL;
                      goto LABEL_12;
                    }

  pthread_mutex_lock((pthread_mutex_t *)v6);
  if (pthread_mutex_trylock((pthread_mutex_t *)p_cd - 1) == 16)
  {
    do
    {
      BOOL v12 = v5 - CFAbsoluteTimeGetCurrent();
      uint64_t v13 = v12 >= 0.0;
      if (v12 < 0.0) {
        break;
      }
      v15.tv_sec = vcvtmd_s64_f64(v12);
      v15.tv_nsec = (int)((v12 - floor(v12)) * 1000000000.0);
      pthread_cond_timedwait_relative_np((pthread_cond_t *)(v6 + 64), (pthread_mutex_t *)v6, &v15);
    }

    while (pthread_mutex_trylock(v9) == 16);
  }

  else
  {
    uint64_t v13 = 1;
  }

  pthread_mutex_unlock((pthread_mutex_t *)v6);
  return v13;
}

  pthread_mutex_lock((pthread_mutex_t *)cd);
  if (pthread_mutex_trylock(&self->_priv.m) == 16)
  {
    while (1)
    {
      uint64_t v10 = v5 - CFAbsoluteTimeGetCurrent();
      if (v10 < 0.0) {
        break;
      }
      v14.tv_sec = vcvtmd_s64_f64(v10);
      v14.tv_nsec = (int)((v10 - floor(v10)) * 1000000000.0);
      pthread_cond_timedwait_relative_np((pthread_cond_t *)((char *)cd + 64), (pthread_mutex_t *)cd, &v14);
      if (pthread_mutex_trylock(&self->_priv.m) != 16) {
        goto LABEL_14;
      }
    }

    pthread_mutex_unlock((pthread_mutex_t *)cd);
    return 0;
  }

  else
  {
LABEL_14:
    pthread_mutex_unlock((pthread_mutex_t *)cd);
    unsigned int v11 = pthread_self();
    BOOL v12 = self->_priv.cnt + 1;
    self->_priv.t = v11;
    self->_priv.cnt = v12;
    return 1;
  }

  v9.receiver = self;
  v9.super_class = (Class)&OBJC_CLASS___NSMapObservationTransformer;
  -[NSMapObservationTransformer _receiveBox:](&v9, sel__receiveBox_, a3);
}

  atomic_store(v1, (unsigned __int8 *)(*(void *)(result + 32) + 241LL));
  return result;
}

  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 8));
  objc_autoreleasePoolPop(v4);
}

  unint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 16))(a2, 4096LL);
  if ((v3 & 0x10) == 0)
  {
LABEL_5:
    if ((v3 & 0x20) == 0) {
      goto LABEL_6;
    }
    goto LABEL_13;
  }

    uint64_t v9 = v2[1];
    ++v2;
    uint64_t v3 = v9;
    if (!v9) {
      return 0LL;
    }
  }

  unint64_t v8 = a1;
LABEL_9:
  if (a2 > v8 - a1 && *v8 != 47) {
    goto LABEL_11;
  }
  return 1LL;
}

      return 0LL;
    }

    if (qword_18C496C48 != -1) {
      dispatch_once(&qword_18C496C48, &__block_literal_global_51);
    }
    if ((objc_class *)qword_18C496C40 == v5) {
      return CFURLCreateWithFileSystemPath(0LL, v7, kCFURLPOSIXPathStyle, a4);
    }
    unsigned int v11 = +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"%@: object already initialized",  _NSMethodExceptionProem(v5, a2));

    BOOL v12 = (void *)MEMORY[0x189603F70];
    uint64_t v13 = (void *)MEMORY[0x189603A48];
  }

  else
  {
    unsigned int v11 = +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"%@: nil string parameter",  _NSMethodExceptionProem(a1, a2));

    BOOL v12 = (void *)MEMORY[0x189603F70];
    uint64_t v13 = (void *)MEMORY[0x189603A60];
  }

  objc_exception_throw((id)[v12 exceptionWithName:*v13 reason:v11 userInfo:0]);
  return (CFURLRef)-[NSURL(NSURL) initFileURLWithPath:isDirectory:relativeToURL:]();
}

      return 0LL;
    }

    if (qword_18C496C48 != -1) {
      dispatch_once(&qword_18C496C48, &__block_literal_global_51);
    }
    if ((objc_class *)qword_18C496C40 == v6) {
      JUMPOUT(0x186E1E340LL);
    }
    uint64_t v13 = +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"%@: object already initialized",  _NSMethodExceptionProem(v6, a2));

    uint64_t v14 = (void *)MEMORY[0x189603F70];
    unint64_t v15 = (void *)MEMORY[0x189603A48];
  }

  else
  {
    uint64_t v13 = +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"%@: nil string parameter",  _NSMethodExceptionProem(a1, a2));

    uint64_t v14 = (void *)MEMORY[0x189603F70];
    unint64_t v15 = (void *)MEMORY[0x189603A60];
  }

  objc_exception_throw((id)[v14 exceptionWithName:*v15 reason:v13 userInfo:0]);
  return +[NSURL setIOPolicy:type:scope:forBlock:]();
}

  LODWORD(result) = -[NSNumber charValue](self, "charValue");
  return (int)result;
}

  LODWORD(result) = -[NSNumber charValue](self, "charValue");
  return (int)result;
}

  LODWORD(result) = -[NSNumber charValue](self, "charValue");
  return (int)result;
}

  LODWORD(result) = -[NSNumber charValue](self, "charValue");
  return (int)result;
}

  if (_NSIsNSString())
  {
    unint64_t v8 = +[_NSPredicateUtilities _processAndTokenize:flags:locale:]( (uint64_t)&OBJC_CLASS____NSPredicateUtilities,  (__CFString *)a3,  v7,  v6);
LABEL_17:
    uint64_t v9 = v8;

    return v9;
  }

  if ((_NSIsNSArray() & 1) != 0 || (_NSIsNSSet() & 1) != 0 || _NSIsNSOrderedSet())
  {
    unint64_t v8 = +[_NSPredicateUtilities _collapseAndTokenize:flags:locale:]( (uint64_t)&OBJC_CLASS____NSPredicateUtilities,  a3,  v7,  v6);
    goto LABEL_17;
  }

  objc_exception_throw((id)[MEMORY[0x189603F70] exceptionWithName:*MEMORY[0x189603A60], +[NSString stringWithFormat:]( NSString, "stringWithFormat:", @"Unable to tokenize : %@", a3), 0 reason userInfo]);
  return +[_NSPredicateUtilities uppercase:](v11, v12, v13);
}

    free(v6);
    return 0LL;
  }

  free(v6);
LABEL_13:
  if (!containsMethod(a1, a2, a3))
  {
    outCount = 0;
    BOOL v12 = protocol_copyProtocolList(a1, &outCount);
    if (v12)
    {
      uint64_t v13 = v12;
      if (outCount)
      {
        for (uint64_t i = 0LL; i < outCount; ++i)
        {
          unint64_t v15 = isMethodFromNSObjectProtocol(v13[i], a2, a3);
          if ((_DWORD)v15) {
            break;
          }
        }
      }

      else
      {
        unint64_t v15 = 0LL;
      }

      free(v13);
      return v15;
    }
  }

  return 0LL;
}

uint64_t _decodeBool(uint64_t a1, const void *a2, BOOL *a3)
{
  unint64_t v6 = atomic_load((unint64_t *)(a1 + 16));
  atomic_store(v6 | 8, (unint64_t *)(a1 + 16));
  uint64_t v7 = *(const __CFArray **)(a1 + 80);
  if (!v7)
  {
    uint64_t result = __CFBinaryPlistGetOffsetForValueFromDictionary3();
    if (!(_DWORD)result)
    {
      BOOL v14 = 0;
      goto LABEL_17;
    }

    int v13 = *(unsigned __int8 *)(*(void *)(a1 + 104) + v16);
    if (v13 == 8)
    {
      BOOL v14 = 0;
      goto LABEL_16;
    }

    if (v13 == 9)
    {
      BOOL v14 = 1;
LABEL_16:
      uint64_t result = 1LL;
      goto LABEL_17;
    }

    goto LABEL_12;
  }

  CFIndex Count = CFArrayGetCount(v7);
  ValueAtIndex = (const __CFArray *)CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 80), Count - 1);
  if (CFGetTypeID(ValueAtIndex) == 19)
  {
    Value = (void *)CFArrayGetValueAtIndex(ValueAtIndex, 0LL);
    id v11 = Value;
    CFArrayRemoveValueAtIndex(ValueAtIndex, 0LL);
    if (!Value) {
      goto LABEL_13;
    }
LABEL_10:
    if (CFGetTypeID(Value) == 21)
    {
      BOOL v14 = CFBooleanGetValue((CFBooleanRef)Value) != 0;
      goto LABEL_16;
    }

uint64_t _decodeInt64(uint64_t a1, const void *a2, unint64_t *a3)
{
  v17[1] = *MEMORY[0x1895F89C0];
  unint64_t v6 = atomic_load((unint64_t *)(a1 + 16));
  atomic_store(v6 | 8, (unint64_t *)(a1 + 16));
  unint64_t valuePtr = 0LL;
  uint64_t v7 = *(const __CFArray **)(a1 + 80);
  if (v7)
  {
    CFIndex Count = CFArrayGetCount(v7);
    ValueAtIndex = (const __CFArray *)CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 80), Count - 1);
    if (CFGetTypeID(ValueAtIndex) == 19)
    {
      Value = (void *)CFArrayGetValueAtIndex(ValueAtIndex, 0LL);
      id v11 = Value;
      CFArrayRemoveValueAtIndex(ValueAtIndex, 0LL);
      if (!Value) {
        goto LABEL_12;
      }
    }

    else
    {
      Value = (void *)CFDictionaryGetValue(ValueAtIndex, a2);
      id v14 = Value;
      if (!Value)
      {
LABEL_12:
        unint64_t v13 = 0LL;
        uint64_t result = 0LL;
        goto LABEL_15;
      }
    }

    if (CFGetTypeID(Value) == 22 && !CFNumberIsFloatType((CFNumberRef)Value))
    {
      uint64_t result = CFNumberGetValue((CFNumberRef)Value, kCFNumberSInt64Type, &valuePtr) != 0;
      unint64_t v13 = valuePtr;
      goto LABEL_15;
    }

uint64_t _readInt(void *a1, _BYTE *a2, unint64_t a3, unint64_t *a4, void *a5)
{
  char v5 = *a2;
  if ((*a2 & 0xF0) != 0x10) {
    return 0LL;
  }
  unsigned int v6 = v5 & 0xF;
  uint64_t v7 = 1LL << (v5 & 0xF);
  unint64_t v8 = &a2[v7 + 1];
  if (__CFADD__(a2, v7 + 1) || (unint64_t)v8 > a3)
  {
    objc_msgSend( a1,  "__failWithExceptionName:errorCode:format:",  @"NSArchiverArchiveInconsistency",  4864,  @"overflow while attempting to read %lu bytes (int)",  v7 + 1);
    return 0LL;
  }

  uint64_t v9 = a2 + 1;
  uint64_t v7 = v7;
  switch((char)v7)
  {
    case 1:
      unint64_t v10 = *v9;
      break;
    case 2:
      unint64_t v10 = __rev16(*(unsigned __int16 *)(a2 + 1));
      break;
    case 4:
      unint64_t v10 = bswap32(*(_DWORD *)(a2 + 1));
      break;
    case 8:
      unint64_t v10 = bswap64(*(void *)(a2 + 1));
      break;
    default:
      if (v6 <= 7)
      {
        unint64_t v10 = 0LL;
        do
        {
          unsigned int v12 = *v9++;
          unint64_t v10 = v12 | (v10 << 8);
          --v7;
        }

        while (v7);
      }

      else
      {
        unint64_t v10 = 0LL;
      }

      break;
  }

  *a4 = v10;
  if (a5) {
    *a5 = v8;
  }
  return 1LL;
}

LABEL_44:
      CFTypeRef v41 = objc_allocWithZone(MEMORY[0x189603F18]);
      unint64_t v37 = (void *)[v41 _initByAdoptingBuffer:v54[3] count:v19 size:v47];
      goto LABEL_45;
    }

    -[NSCoder __failWithExceptionName:errorCode:format:]( self,  "__failWithExceptionName:errorCode:format:",  @"NSArchiverArchiveInconsistency",  4864LL,  @"%@: array is too large to decode",  _NSMethodExceptionProem((objc_class *)self, a2));
  }

          uint64_t v35 = WORD1(v28) & 0x3F;
          if (v35 < 6) {
            return v5;
          }
          uint64_t v34 = v35 - 5;
LABEL_46:
          if (__CFBasicHashTableCapacities[v34] <= v27 >> 22) {
            return v5;
          }
LABEL_47:
          __CFBasicHashRehash(a1, 0LL);
          return v5;
        }
      }

      else if (v29 >= v31 >> 2)
      {
        goto LABEL_34;
      }

      id v32 = v29 >= v31 >> 1;
      if ((v16 & 8) == 0)
      {
LABEL_35:
        if (v32) {
          goto LABEL_47;
        }
        goto LABEL_42;
      }

      goto LABEL_39;
    }

    swift_bridgeObjectRelease();
    uint64_t v22 = *((void *)&v81 + 1);
    uint64_t v23 = v81;
    if ((v5 & 1) == 0) {
      goto LABEL_45;
    }
    goto LABEL_8;
  }

  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v18, isUniquelyReferenced_nonNull_native);
  unint64_t v19 = v83;
  Class v20 = specialized __RawDictionaryStorage.find<A>(_:)(v10);
  if ((v5 & 1) == (v21 & 1))
  {
    uint64_t v15 = v20;
    uint64_t v22 = *((void *)&v81 + 1);
    uint64_t v23 = v81;
    if ((v5 & 1) == 0) {
      goto LABEL_45;
    }
    goto LABEL_8;
  }

          unint64_t v48 = (4 * *(_BYTE *)(v47 + 18) + 8) & 0x3C;
          __int128 v45 = ((-15LL << v48) - 1) & v45 | (v50 << v48);
          unint64_t v49 = *(void *)(v47 + 24 + 24 * v50);
          swift_unknownObjectRetain();
          uint64_t result = swift_unknownObjectRelease();
          uint64_t v47 = v49;
          if (!*(_BYTE *)(v49 + 18)) {
            goto LABEL_76;
          }
        }
      }

      swift_unknownObjectRetain_n();
      uint64_t result = swift_retain();
      __int128 v46 = v141;
      unint64_t v49 = v39;
LABEL_76:
      int v59 = *(unsigned __int16 *)(v49 + 16);
      if (*(_WORD *)(v49 + 16))
      {
        uint64_t v60 = v46 - 1;
        if (__OFSUB__(v46, 1LL))
        {
LABEL_175:
          __break(1u);
LABEL_176:
          __break(1u);
LABEL_177:
          __break(1u);
LABEL_178:
          __break(1u);
LABEL_179:
          __break(1u);
          goto LABEL_180;
        }

        if (__OFADD__(v60, 1LL)) {
          goto LABEL_176;
        }
        if (v46 <= 0)
        {
          int v59 = 0LL;
        }

        else
        {
          if ((_DWORD)v59 == 1) {
            goto LABEL_102;
          }
          id v52 = __OFSUB__(v60, 1LL);
          uint64_t v60 = v46 - 2;
          if (v52) {
            goto LABEL_179;
          }
          if (__OFADD__(v60, 1LL))
          {
LABEL_180:
            __break(1u);
LABEL_181:
            __break(1u);
            goto LABEL_182;
          }

          if (v46 - 1 < 1)
          {
            int v59 = 1LL;
          }

          else
          {
            if ((_DWORD)v59 == 2) {
              goto LABEL_102;
            }
            id v52 = __OFSUB__(v60, 1LL);
            uint64_t v60 = v46 - 3;
            if (v52) {
              goto LABEL_181;
            }
            if (__OFADD__(v60, 1LL))
            {
LABEL_182:
              __break(1u);
              return result;
            }

            if (v46 - 2 < 1)
            {
              int v59 = 2LL;
            }

            else
            {
              if ((_DWORD)v59 == 3) {
                goto LABEL_102;
              }
              v61 = 0LL;
              v62 = 3LL;
              if (v59 > 3) {
                v62 = *(unsigned __int16 *)(v49 + 16);
              }
              v63 = v62 - 3;
              if (v60 >= v59 - 4) {
                v64 = v59 - 4;
              }
              else {
                v64 = v46 - 3;
              }
              if (v64 >= v46 + 0x7FFFFFFFFFFFFFFDLL) {
                v64 = v46 + 0x7FFFFFFFFFFFFFFDLL;
              }
              while (1)
              {
                if (v63 <= v64) {
                  goto LABEL_177;
                }
                if (v46 + 0x7FFFFFFFFFFFFFFDLL == v61) {
                  goto LABEL_178;
                }
                if (v60 == v61) {
                  break;
                }
                if (v59 - 3 == ++v61)
                {
                  v60 -= v61;
                  goto LABEL_102;
                }
              }

              int v59 = v46;
            }
          }
        }
      }

      else
      {
        uint64_t v60 = v46;
LABEL_102:
        if (v60)
        {
LABEL_174:
          __break(1u);
          goto LABEL_175;
        }
      }

      swift_unknownObjectRelease();
      swift_unknownObjectRelease();
      v65 = v45 & 0xFFFFFFFFFFFFF0FFLL;
      CFTypeRef v41 = v49;
      int v42 = v65 | (v59 << 8);
      uint64_t v40 = v129;
      uint64_t v38 = v130;
LABEL_109:
      swift_unknownObjectRetain();
      __int128 v43 = specialized Rope._Node.distanceFromStart<A>(to:in:)(v38, v42, v41, v39, v128, v40);
      uint64_t result = swift_unknownObjectRelease_n();
      goto LABEL_111;
    }

    swift_unknownObjectRetain_n();
    swift_retain();
    uint64_t v38 = v130;
    int v42 = specialized Rope._endPath.getter(v39);
    uint64_t result = swift_unknownObjectRelease();
    CFTypeRef v41 = 0LL;
    if (v39) {
      goto LABEL_109;
    }
LABEL_110:
    __int128 v43 = 0LL;
LABEL_111:
    v152._countAndFlagsBits = v38;
    v152._object = (void *)v42;
    *(void *)&v153 = v41;
    if (__OFADD__(v141, 1LL))
    {
LABEL_161:
      __break(1u);
      goto LABEL_162;
    }

    if (v38 != v130)
    {
LABEL_162:
      __break(1u);
      goto LABEL_163;
    }

    v142 = v141 + 1;
    if (v41)
    {
      v66 = *(void *)(v41 + 24 * ((v42 >> ((4 * *(_BYTE *)(v41 + 18) + 8) & 0x3C)) & 0xF) + 24);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v67 = v128;
    }

    else
    {
      swift_unknownObjectRetain();
      v68 = v42;
      v67 = v128;
      v66 = specialized Rope._Node.subscript.getter(v68, v39);
      swift_unknownObjectRelease();
    }

    swift_bridgeObjectRelease();
    uint64_t result = swift_bridgeObjectRelease();
    id v52 = __OFADD__(v43, v66);
    v69 = v43 + v66;
    if (v52)
    {
LABEL_163:
      __break(1u);
LABEL_164:
      __break(1u);
LABEL_165:
      __break(1u);
LABEL_166:
      __break(1u);
LABEL_167:
      __break(1u);
LABEL_168:
      __break(1u);
LABEL_169:
      __break(1u);
      goto LABEL_170;
    }

    swift_unknownObjectRetain();
    specialized Rope.formIndex(after:)(&v152, v39, v67, v129, v130);
    swift_unknownObjectRelease_n();
    v135 = v153;
    v137 = v152._object;
    countAndFlagsBits = v152._countAndFlagsBits;
    if (v140 != 2)
    {
      v76 = v123[1];
      v184 = *v123;
      v185 = v76;
      v186 = v123[2];
      BigString.utf8.getter();
      uint64_t result = v138;
      if (!__OFSUB__(v69, v138 >> 11))
      {
        v71 = BigString.UTF8View.index(_:offsetBy:)();
        v131 = v78;
        v132 = v77;
        v140 = v79;
        v75 = &v169;
        goto LABEL_121;
      }

      goto LABEL_171;
    }

    v70 = v123[1];
    v187 = *v123;
    v188 = v70;
    v189 = v123[2];
    BigString.utf8.getter();
    BigString.startIndex.getter();
    v71 = BigString.UTF8View.index(_:offsetBy:)();
    v131 = v73;
    v132 = v72;
    v140 = v74;
    v75 = &v170;
LABEL_121:
    outlined release of Locale((uint64_t)v75);
    swift_release();
    v139 = v71;
    v80 = v108[1];
    v181 = *v108;
    v182 = v80;
    v183 = v108[2];
    BigString.unicodeScalars.getter();
    BigString.UnicodeScalarView.subscript.getter();
    outlined release of Locale((uint64_t)v171);
    v81 = MEMORY[0x186E1B6B8](v172);
    v83 = v82;
    v84 = v166 & 0xFFFFFFFFFFFFLL;
    if ((v167 & 0x2000000000000000LL) != 0) {
      v84 = HIBYTE(v167) & 0xF;
    }
    if (v84)
    {
      v85._countAndFlagsBits = 10LL;
      v85._object = (void *)0xE100000000000000LL;
      String.append(_:)(v85);
    }

    v150._countAndFlagsBits = v81;
    v150._object = v83;
    v86._countAndFlagsBits = 32LL;
    v86._object = (void *)0xE100000000000000LL;
    String.append(_:)(v86);
    v149._countAndFlagsBits = 0LL;
    v149._object = (void *)0xE000000000000000LL;
    v87 = v21 + 64;
    v88 = 1LL << *(_BYTE *)(v21 + 32);
    if (v88 < 64) {
      v89 = ~(-1LL << v88);
    }
    else {
      v89 = -1LL;
    }
    v90 = v89 & *(void *)(v21 + 64);
    v91 = (unint64_t)(v88 + 63) >> 6;
    swift_bridgeObjectRetain_n();
    uint64_t result = swift_bridgeObjectRetain();
    v92 = 0LL;
    while (1)
    {
      if (v90)
      {
        v93 = __clz(__rbit64(v90));
        v90 &= v90 - 1;
        v94 = v93 | (v92 << 6);
        goto LABEL_130;
      }

      v103 = v92 + 1;
      if (__OFADD__(v92, 1LL))
      {
        __break(1u);
        goto LABEL_153;
      }

      if (v103 >= v91) {
        break;
      }
      v104 = *(void *)(v87 + 8 * v103);
      ++v92;
      if (!v104)
      {
        v92 = v103 + 1;
        if (v103 + 1 >= v91) {
          break;
        }
        v104 = *(void *)(v87 + 8 * v92);
        if (!v104)
        {
          v92 = v103 + 2;
          if (v103 + 2 >= v91) {
            break;
          }
          v104 = *(void *)(v87 + 8 * v92);
          if (!v104)
          {
            v92 = v103 + 3;
            if (v103 + 3 >= v91) {
              break;
            }
            v104 = *(void *)(v87 + 8 * v92);
            if (!v104)
            {
              v92 = v103 + 4;
              if (v103 + 4 >= v91) {
                break;
              }
              v104 = *(void *)(v87 + 8 * v92);
              if (!v104)
              {
                v105 = v103 + 5;
                if (v105 >= v91) {
                  break;
                }
                v104 = *(void *)(v87 + 8 * v105);
                if (!v104)
                {
                  while (1)
                  {
                    v92 = v105 + 1;
                    if (__OFADD__(v105, 1LL)) {
                      goto LABEL_167;
                    }
                    if (v92 >= v91) {
                      goto LABEL_4;
                    }
                    v104 = *(void *)(v87 + 8 * v92);
                    ++v105;
                    if (v104) {
                      goto LABEL_149;
                    }
                  }
                }

                v92 = v105;
              }
            }
          }
        }
      }

                              swift_release();
                              swift_bridgeObjectRelease_n();
                              swift_bridgeObjectRelease_n();
                              specialized IndexingIterator.next()();
                              v64 = v65;
                              if (!v65) {
                                goto LABEL_175;
                              }
                              goto LABEL_45;
                            }

                            __int128 v43 = v78;
                          }
                        }
                      }
                    }
                  }

  uint64_t v26 = __dst[18] * a1;
  if ((unsigned __int128)(__dst[18] * (__int128)a1) >> 64 != (__dst[18] * a1) >> 63)
  {
LABEL_85:
    __break(1u);
    goto LABEL_86;
  }

  if (v26 == 0x7FFFFFFFFFFFFFFFLL) {
    unint64_t v8 = 0LL;
  }
  else {
    unint64_t v8 = __dst[18] * a1;
  }
  __int128 v44 = v26 == 0x7FFFFFFFFFFFFFFFLL;
  if ((__dst[21] & 1) != 0)
  {
LABEL_12:
    if ((__dst[27] & 1) != 0) {
      goto LABEL_13;
    }
    goto LABEL_54;
  }

  v116 = v26;
  *(void *)&v115 = *(void *)&v118[7];
  v117[0] = xmmword_183729400;
  outlined init with take of Any(&v115, &v117[1]);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    unsigned int v12 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  v12[2] + 1LL,  1,  v12);
  }
  unint64_t v48 = v12[2];
  uint64_t v47 = v12[3];
  if (v48 >= v47 >> 1) {
    unsigned int v12 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (void *)(v47 > 1),  v48 + 1,  1,  v12);
  }
  v12[2] = v48 + 1;
  unint64_t v49 = &v12[6 * v48];
  unint64_t v50 = v117[0];
  v51 = v117[2];
  v49[3] = v117[1];
  v49[4] = v51;
  v49[2] = v50;
  if ((BYTE8(v118[8]) & 1) != 0)
  {
LABEL_18:
    if ((BYTE8(v118[9]) & 1) != 0) {
      goto LABEL_19;
    }
    goto LABEL_54;
  }

  outlined consume of Set<A1>.Iterator._Variant<A><A1>();
LABEL_45:
  static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSCocoaErrorDomain");
  __int128 v44 = objc_allocWithZone((Class)&OBJC_CLASS___NSError);
  __int128 v45 = String._bridgeToObjectiveCImpl()();
  swift_bridgeObjectRelease();
  objc_msgSend(v44, sel_initWithDomain_code_userInfo_, v45, 512, _NativeDictionary.bridged()());
  swift_release();
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  return swift_willThrow();
}

    id v32 = (v42 - 1) & v42;
    v51 = v43;
    uint64_t v34 = __clz(__rbit64(v42)) + (v43 << 6);
LABEL_19:
    uint64_t v35 = 16 * v34;
    uint64_t v36 = (void *)(*(void *)(v15 + 48) + 16 * v34);
    unint64_t v37 = v36[1];
    uint64_t v38 = 8 * v34;
    uint64_t v39 = *(void *)(*(void *)(v15 + 56) + v38);
    uint64_t v40 = (void *)(*(void *)(v22 + 48) + v35);
    *uint64_t v40 = *v36;
    v40[1] = v37;
    *(void *)(*(void *)(v22 + 56) + v3_Block_object_dispose(va, 8) = v39;
    swift_bridgeObjectRetain();
    swift_retain();
    uint64_t v29 = v51;
  }

  __int128 v44 = v29 + 9;
  if (v29 + 9 >= v50) {
    goto LABEL_45;
  }
  int v42 = *(void *)(v49 + 8 * v44);
  if (v42)
  {
    __int128 v43 = v29 + 9;
    goto LABEL_44;
  }

  while (1)
  {
    __int128 v43 = v44 + 1;
    if (__OFADD__(v44, 1LL)) {
      break;
    }
    if (v43 >= v50) {
      goto LABEL_45;
    }
    int v42 = *(void *)(v49 + 8 * v43);
    ++v44;
    if (v42) {
      goto LABEL_44;
    }
  }

    unint64_t v33 = (v43 - 1) & v43;
    id v52 = v44;
    uint64_t v35 = __clz(__rbit64(v43)) + (v44 << 6);
LABEL_19:
    uint64_t v36 = 16 * v35;
    unint64_t v37 = (void *)(*(void *)(v16 + 48) + 16 * v35);
    uint64_t v38 = v37[1];
    uint64_t v39 = 8 * v35;
    uint64_t v40 = *(void *)(*(void *)(v16 + 56) + v39);
    CFTypeRef v41 = (void *)(*(void *)(v23 + 48) + v36);
    *CFTypeRef v41 = *v37;
    v41[1] = v38;
    *(void *)(*(void *)(v23 + 56) + v39) = v40;
    swift_bridgeObjectRetain();
    swift_retain();
    uint64_t v30 = v52;
  }

  __int128 v45 = v30 + 9;
  if (v30 + 9 >= v51) {
    goto LABEL_45;
  }
  __int128 v43 = *(void *)(v50 + 8 * v45);
  if (v43)
  {
    __int128 v44 = v30 + 9;
    goto LABEL_44;
  }

  while (1)
  {
    __int128 v44 = v45 + 1;
    if (__OFADD__(v45, 1LL)) {
      break;
    }
    if (v44 >= v51) {
      goto LABEL_45;
    }
    __int128 v43 = *(void *)(v50 + 8 * v44);
    ++v45;
    if (v43) {
      goto LABEL_44;
    }
  }

    unint64_t v37 = (v47 - 1) & v47;
    v56 = v48;
    uint64_t v39 = __clz(__rbit64(v47)) + (v48 << 6);
LABEL_19:
    uint64_t v40 = 16 * v39;
    CFTypeRef v41 = (void *)(*(void *)(v20 + 48) + 16 * v39);
    int v42 = v41[1];
    __int128 v43 = 8 * v39;
    __int128 v44 = *(void *)(*(void *)(v20 + 56) + v43);
    __int128 v45 = (void *)(*(void *)(v27 + 48) + v40);
    *__int128 v45 = *v41;
    v45[1] = v42;
    *(void *)(*(void *)(v27 + 56) + v43) = v44;
    swift_bridgeObjectRetain();
    swift_retain();
    uint64_t v34 = v56;
  }

  unint64_t v49 = v34 + 9;
  if (v34 + 9 >= v55) {
    goto LABEL_45;
  }
  uint64_t v47 = *(void *)(v54 + 8 * v49);
  if (v47)
  {
    unint64_t v48 = v34 + 9;
    goto LABEL_44;
  }

  while (1)
  {
    unint64_t v48 = v49 + 1;
    if (__OFADD__(v49, 1LL)) {
      break;
    }
    if (v48 >= v55) {
      goto LABEL_45;
    }
    uint64_t v47 = *(void *)(v54 + 8 * v48);
    ++v49;
    if (v47) {
      goto LABEL_44;
    }
  }

    unint64_t v37 = (v47 - 1) & v47;
    v56 = v48;
    uint64_t v39 = __clz(__rbit64(v47)) + (v48 << 6);
LABEL_19:
    uint64_t v40 = 16 * v39;
    CFTypeRef v41 = (void *)(*(void *)(v20 + 48) + 16 * v39);
    int v42 = v41[1];
    __int128 v43 = 8 * v39;
    __int128 v44 = *(void *)(*(void *)(v20 + 56) + v43);
    __int128 v45 = (void *)(*(void *)(v27 + 48) + v40);
    *__int128 v45 = *v41;
    v45[1] = v42;
    *(void *)(*(void *)(v27 + 56) + v43) = v44;
    swift_bridgeObjectRetain();
    swift_retain();
    uint64_t v34 = v56;
  }

  unint64_t v49 = v34 + 9;
  if (v34 + 9 >= v55) {
    goto LABEL_45;
  }
  uint64_t v47 = *(void *)(v54 + 8 * v49);
  if (v47)
  {
    unint64_t v48 = v34 + 9;
    goto LABEL_44;
  }

  while (1)
  {
    unint64_t v48 = v49 + 1;
    if (__OFADD__(v49, 1LL)) {
      break;
    }
    if (v48 >= v55) {
      goto LABEL_45;
    }
    uint64_t v47 = *(void *)(v54 + 8 * v48);
    ++v49;
    if (v47) {
      goto LABEL_44;
    }
  }

    unint64_t v37 = (v47 - 1) & v47;
    v56 = v48;
    uint64_t v39 = __clz(__rbit64(v47)) + (v48 << 6);
LABEL_19:
    uint64_t v40 = 16 * v39;
    CFTypeRef v41 = (void *)(*(void *)(v20 + 48) + 16 * v39);
    int v42 = v41[1];
    __int128 v43 = 8 * v39;
    __int128 v44 = *(void *)(*(void *)(v20 + 56) + v43);
    __int128 v45 = (void *)(*(void *)(v27 + 48) + v40);
    *__int128 v45 = *v41;
    v45[1] = v42;
    *(void *)(*(void *)(v27 + 56) + v43) = v44;
    swift_bridgeObjectRetain();
    swift_retain();
    uint64_t v34 = v56;
  }

  unint64_t v49 = v34 + 9;
  if (v34 + 9 >= v55) {
    goto LABEL_45;
  }
  uint64_t v47 = *(void *)(v54 + 8 * v49);
  if (v47)
  {
    unint64_t v48 = v34 + 9;
    goto LABEL_44;
  }

  while (1)
  {
    unint64_t v48 = v49 + 1;
    if (__OFADD__(v49, 1LL)) {
      break;
    }
    if (v48 >= v55) {
      goto LABEL_45;
    }
    uint64_t v47 = *(void *)(v54 + 8 * v48);
    ++v49;
    if (v47) {
      goto LABEL_44;
    }
  }

    unint64_t v37 = (v47 - 1) & v47;
    v56 = v48;
    uint64_t v39 = __clz(__rbit64(v47)) + (v48 << 6);
LABEL_19:
    uint64_t v40 = 16 * v39;
    CFTypeRef v41 = (void *)(*(void *)(v20 + 48) + 16 * v39);
    int v42 = v41[1];
    __int128 v43 = 8 * v39;
    __int128 v44 = *(void *)(*(void *)(v20 + 56) + v43);
    __int128 v45 = (void *)(*(void *)(v27 + 48) + v40);
    *__int128 v45 = *v41;
    v45[1] = v42;
    *(void *)(*(void *)(v27 + 56) + v43) = v44;
    swift_bridgeObjectRetain();
    swift_retain();
    uint64_t v34 = v56;
  }

  unint64_t v49 = v34 + 9;
  if (v34 + 9 >= v55) {
    goto LABEL_45;
  }
  uint64_t v47 = *(void *)(v54 + 8 * v49);
  if (v47)
  {
    unint64_t v48 = v34 + 9;
    goto LABEL_44;
  }

  while (1)
  {
    unint64_t v48 = v49 + 1;
    if (__OFADD__(v49, 1LL)) {
      break;
    }
    if (v48 >= v55) {
      goto LABEL_45;
    }
    uint64_t v47 = *(void *)(v54 + 8 * v48);
    ++v49;
    if (v47) {
      goto LABEL_44;
    }
  }

    uint64_t v38 = (v48 - 1) & v48;
    v57 = v49;
    uint64_t v40 = __clz(__rbit64(v48)) + (v49 << 6);
LABEL_19:
    CFTypeRef v41 = 16 * v40;
    int v42 = (void *)(*(void *)(v21 + 48) + 16 * v40);
    __int128 v43 = v42[1];
    __int128 v44 = 8 * v40;
    __int128 v45 = *(void *)(*(void *)(v21 + 56) + v44);
    __int128 v46 = (void *)(*(void *)(v28 + 48) + v41);
    *__int128 v46 = *v42;
    v46[1] = v43;
    *(void *)(*(void *)(v28 + 56) + v44) = v45;
    swift_bridgeObjectRetain();
    swift_retain();
    uint64_t v35 = v57;
  }

  unint64_t v50 = v35 + 9;
  if (v35 + 9 >= v56) {
    goto LABEL_45;
  }
  unint64_t v48 = *(void *)(v55 + 8 * v50);
  if (v48)
  {
    unint64_t v49 = v35 + 9;
    goto LABEL_44;
  }

  while (1)
  {
    unint64_t v49 = v50 + 1;
    if (__OFADD__(v50, 1LL)) {
      break;
    }
    if (v49 >= v56) {
      goto LABEL_45;
    }
    unint64_t v48 = *(void *)(v55 + 8 * v49);
    ++v50;
    if (v48) {
      goto LABEL_44;
    }
  }

    uint64_t v36 = (v46 - 1) & v46;
    v55 = v47;
    uint64_t v38 = __clz(__rbit64(v46)) + (v47 << 6);
LABEL_19:
    uint64_t v39 = 16 * v38;
    uint64_t v40 = (void *)(*(void *)(v19 + 48) + 16 * v38);
    CFTypeRef v41 = v40[1];
    int v42 = 8 * v38;
    __int128 v43 = *(void *)(*(void *)(v19 + 56) + v42);
    __int128 v44 = (void *)(*(void *)(v26 + 48) + v39);
    *__int128 v44 = *v40;
    v44[1] = v41;
    *(void *)(*(void *)(v26 + 56) + v42) = v43;
    swift_bridgeObjectRetain();
    swift_retain();
    unint64_t v33 = v55;
  }

  unint64_t v48 = v33 + 9;
  if (v33 + 9 >= v54) {
    goto LABEL_45;
  }
  __int128 v46 = *(void *)(v53 + 8 * v48);
  if (v46)
  {
    uint64_t v47 = v33 + 9;
    goto LABEL_44;
  }

  while (1)
  {
    uint64_t v47 = v48 + 1;
    if (__OFADD__(v48, 1LL)) {
      break;
    }
    if (v47 >= v54) {
      goto LABEL_45;
    }
    __int128 v46 = *(void *)(v53 + 8 * v47);
    ++v48;
    if (v46) {
      goto LABEL_44;
    }
  }

                                              __break(1u);
                                              goto LABEL_45;
                                            }

              swift_bridgeObjectRelease();
              goto LABEL_45;
            }

            if (v70 == 25715 && v69 == (void *)0xE200000000000000LL
              || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
            {
              swift_bridgeObjectRelease();
              v98 = v110;
              v99 = v111;
              v100 = String.lowercased()();
              outlined consume of Locale.LanguageCode?(v144, (uint64_t)v115);
              v115 = v98;
              v126 = v100;
              uint64_t v47 = v99;
              goto LABEL_46;
            }

            if (v70 == 0x656E6F7A656D6974LL && v69 == (void *)0xE800000000000000LL)
            {
              swift_bridgeObjectRelease();
            }

            else
            {
              v101 = _stringCompareWithSmolCheck(_:_:expecting:)();
              swift_bridgeObjectRelease();
              if ((v101 & 1) == 0) {
                goto LABEL_44;
              }
            }

            if (one-time initialization token for cache != -1) {
              swift_once();
            }
            v102 = (os_unfair_lock_s *)(static TimeZoneCache.cache + 144);
            swift_retain_n();
            os_unfair_lock_lock(v102);
            v103 = v109;
            closure #1 in TimeZoneCache.fixed(_:)(v111, (unint64_t)v110, &v161._countAndFlagsBits);
            v109 = v103;
            os_unfair_lock_unlock(v102);
            swift_release_n();
            v104 = v161._countAndFlagsBits;
            v105 = v161._object;
            swift_bridgeObjectRelease();
            if (v104) {
              v106 = v105;
            }
            else {
              v106 = 0LL;
            }
            v153 = v106;
            swift_unknownObjectRelease();
            v65 = v104;
            uint64_t v47 = v144;
            goto LABEL_47;
          }

          swift_bridgeObjectRelease();
          v78 = (uint64_t)v110;
          v79 = v111;
          v80 = String.lowercased()();
          outlined consume of Locale.LanguageCode?((uint64_t)v117, v137);
          v117 = (void *)v79;
          __int128 v46 = v147;
          v136 = (void *)v80._countAndFlagsBits;
          v137 = v78;
          v138 = v80._object;
        }

          outlined copy of Locale.LanguageCode?(v105, v23);
          uint64_t v53 = v104;
          v61 = v92;
          v62 = v100;
          outlined copy of Locale.LanguageCode?(v104, v92);
          v63 = v23;
          v64 = v95;
          v83 = v27;
          v55 = v93;
          unint64_t v58 = v94;
          v65 = v99;
          outlined copy of Locale.LanguageCode?(v95, v94);
          v66 = v63;
          uint64_t v60 = v102;
          outlined consume of Locale.LanguageCode?(v105, v66);
          outlined consume of Locale.LanguageCode?(v53, v61);
          outlined consume of Locale.LanguageCode?(v64, v58);
          v57 = v64;
          uint64_t v23 = v97;
          v54 = v61;
          int v59 = v103;
          v56 = v83;
          v51 = v65;
          unint64_t v50 = v62;
          id v52 = v105;
          uint64_t v36 = 1LL;
          __int128 v45 = v101;
          goto LABEL_45;
        }

      __break(1u);
LABEL_45:
      __break(1u);
LABEL_46:
      __break(1u);
      goto LABEL_47;
    }

    __break(1u);
    goto LABEL_44;
  }

  __break(1u);
}

        __break(1u);
LABEL_45:
        __break(1u);
        goto LABEL_46;
      }

    v117 = v106;
    v61 = v103;
    v71(v115, v103);
    v117(v114, v45);
    v117(v133, v45);
    v71(v136, v103);
    v57 = v143;
    v72 = v134;
LABEL_45:
    v71(v137, v61);
    ((void (*)(_BYTE *, uint64_t))v145)(v57, v45);
    v71(v72, v61);
    return 0LL;
  }

  if (v65 >= v64)
  {
    v129 = (_BYTE *)v52;
    MEMORY[0x186E1CDF8](&unk_1837317E8, 256LL, AssociatedTypeWitness, v138);
    v102 = v139;
    __int128 v45 = v54;
    dispatch thunk of ExpressibleByFloatLiteral.init(floatLiteral:)();
    v103 = v141;
    swift_getAssociatedConformanceWitness();
    v104 = v133;
    v105 = dispatch thunk of static Comparable.>= infix(_:_:)();
    v106 = (void (*)(_BYTE *, uint64_t))v145;
    ((void (*)(_BYTE *, uint64_t))v145)(v102, v54);
    v107 = v128;
    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v142 + 16))(v128, v104, v54);
    v108 = v127;
    v109 = v136;
    v130(v127, v136, v103);
    v71 = v132;
    if ((v105 & 1) != 0)
    {
      v110 = v131;
      dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
      LODWORD(v144) = dispatch thunk of static Equatable.== infix(_:_:)();
      v71(v110, v103);
      v71(v108, v103);
      v111 = v104;
      goto LABEL_41;
    }

    v115 = v108;
    v114 = v107;
    goto LABEL_44;
  }

  v66 = v136;
  v61 = v141;
  v130(v131, v136, v141);
  v67 = v139;
  __int128 v45 = v54;
  dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
  swift_getAssociatedConformanceWitness();
  v68 = v133;
  v69 = dispatch thunk of static Equatable.== infix(_:_:)();
  v70 = (void (*)(_BYTE *, uint64_t))v145;
  ((void (*)(_BYTE *, uint64_t))v145)(v67, v54);
  v70(v68, v54);
  v71 = v132;
  v132(v66, v61);
  v57 = v143;
  v72 = v134;
  if ((v69 & 1) == 0) {
    goto LABEL_45;
  }
LABEL_19:
  v73 = v57;
  v74 = dispatch thunk of BinaryInteger._lowWord.getter();
  v75 = (79 - __clz(v74)) >> 4;
  if (dispatch thunk of BinaryInteger.bitWidth.getter() < 65)
  {
    v82 = 0;
    LOWORD(v81) = 0;
    LOWORD(v80) = 0;
    v83 = 0;
    v84 = v137;
    v85 = v123;
    v86 = v146;
    v78 = (void (*)(_BYTE *, uint64_t))v145;
  }

  else
  {
    *(void *)v147 = 64LL;
    lazy protocol witness table accessor for type Int and conformance Int();
    v76 = v139;
    dispatch thunk of static BinaryInteger.>> infix<A>(_:_:)();
    v77 = dispatch thunk of BinaryInteger._lowWord.getter();
    v78 = (void (*)(_BYTE *, uint64_t))v145;
    ((void (*)(_BYTE *, uint64_t))v145)(v76, v45);
    v79 = ((79 - __clz(v77)) >> 4) + 4;
    v80 = v77 >> 16;
    v81 = HIDWORD(v77);
    if (v77)
    {
      v75 = v79;
      v82 = HIWORD(v77);
    }

    else
    {
      v82 = 0;
    }

    if (v77)
    {
      v83 = v77;
    }

    else
    {
      LOWORD(v81) = 0;
      LOWORD(v80) = 0;
      v83 = 0;
    }

    v84 = v137;
    v85 = v123;
    v86 = v146;
  }

  *(void *)&v147[4] = v74;
  v148 = v83;
  v149 = v80;
  v150 = v81;
  v151 = v82;
  _So9NSDecimala__exponent_setter(v86, v147);
  _So9NSDecimala__length_setter(v75, v147);
  _So9NSDecimala__isNegative_setter(v85, v147);
  _So9NSDecimala__isCompact_setter_0(1LL, v147);
  _So9NSDecimala__reserved_setter(v147);
  v87 = v132;
  v132(v84, v61);
  v78(v73, v45);
  v87(v134, v61);
  return *(void *)v147;
}

  if ((unint64_t)v44 >= rawValue[2])
  {
LABEL_332:
    __break(1u);
LABEL_333:
    __break(1u);
LABEL_334:
    __break(1u);
    goto LABEL_335;
  }

  unint64_t v48 = *(void *)(v41 + 16);
  if (!v48 || (v44 = rawValue[v44 + 4], (uint64_t v39 = *(void *)(v44 + 16)) == 0))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    unint64_t v49 = MEMORY[0x18961AFE8];
    goto LABEL_96;
  }

  __int128 v43 = v48 + v39;
  if (__OFADD__(v48, v39)) {
    goto LABEL_343;
  }
  if (v43 > 7)
  {
    __int128 v43 = 8LL;
LABEL_101:
    swift_bridgeObjectRetain();
    unint64_t v49 = static Array._allocateBufferUninitialized(minimumCapacity:)();
    *(void *)(v49 + 16) = v43;
    bzero((void *)(v49 + 32), 2 * v43);
    goto LABEL_102;
  }

  if (v43 < 0) {
    goto LABEL_373;
  }
  if (v43) {
    goto LABEL_101;
  }
  swift_bridgeObjectRetain();
  unint64_t v49 = MEMORY[0x18961AFE8];
LABEL_102:
  v67 = 0LL;
  v68 = v44 + 32;
  v69 = v49 + 32;
  while (1)
  {
    if (v67 == v39) {
      goto LABEL_336;
    }
    v70 = 0;
    v71 = 0LL;
    v72 = v67 + 1;
    do
    {
      if (v48 == v71) {
        goto LABEL_311;
      }
      v75 = v71 + v67;
      if (__OFADD__(v71, v67)) {
        goto LABEL_312;
      }
      if (v75 >= v43)
      {
        if (v70) {
          goto LABEL_129;
        }
        v70 = *(unsigned __int16 *)(v68 + 2 * v67);
        if (*(_WORD *)(v68 + 2 * v67))
        {
          v70 = *(unsigned __int16 *)(v41 + 2 * v71 + 32);
          if (*(_WORD *)(v41 + 2 * v71 + 32)) {
            goto LABEL_129;
          }
        }
      }

      else
      {
        if (v75 < 0)
        {
          __break(1u);
LABEL_316:
          __break(1u);
LABEL_317:
          __break(1u);
LABEL_318:
          __break(1u);
LABEL_319:
          __break(1u);
LABEL_320:
          __break(1u);
LABEL_321:
          __break(1u);
LABEL_322:
          __break(1u);
          goto LABEL_323;
        }

        v73 = 2 * v75;
        v74 = v70
        v70 = HIWORD(v74);
        *(_WORD *)(v69 + v73) = v74;
      }

      ++v71;
    }

    while (v48 != v71);
    if (!v70) {
      goto LABEL_123;
    }
    unint64_t v50 = __OFADD__(v48, v67);
    v76 = v48 + v67;
    if (v50) {
      goto LABEL_348;
    }
    if (v76 >= v43) {
      break;
    }
    if (v76 < 0) {
      goto LABEL_349;
    }
    *(_WORD *)(v69 + 2 * v76) = v70;
LABEL_123:
    v67 = v72;
    if (v72 == v39)
    {
      v77 = *(void *)(v49 + 16);
      if (v77 && !*(_WORD *)(v69 + 2 * v77 - 2))
      {
        do
        {
          *(void *)(v49 + 16) = v77 - 1;
          if (v77 == 1) {
            break;
          }
        }

        while (!*(unsigned __int16 *)(v49 + 28 + 2 * v77--));
      }

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
LABEL_96:
      NSDecimal.copyVariableLengthInteger(_:)((Swift::OpaquePointer)v49);
      if (!v29)
      {
        v65 = *(void *)(v49 + 16);
        swift_bridgeObjectRelease();
        if (HIDWORD(v65)) {
          goto LABEL_374;
        }
        _So9NSDecimala__length_setter(v65, (_DWORD *)v35);
        v188 = *(_DWORD *)v187;
        v189 = *(_OWORD *)((char *)v187 + 4);
        v66 = _So9NSDecimala__exponent_getter((char *)&v188);
        goto LABEL_99;
      }

      goto LABEL_191;
    }
  }

              Hasher._combine(_:)(0);
              goto LABEL_45;
            }
          }

          Hasher._combine(_:)(0);
          if (v93) {
            goto LABEL_41;
          }
          goto LABEL_44;
        }

                Hasher._combine(_:)(0);
                goto LABEL_45;
              }
            }

            Hasher._combine(_:)(0);
            if (v57) {
              goto LABEL_41;
            }
            goto LABEL_44;
          }

                Hasher._combine(_:)(0);
                goto LABEL_45;
              }
            }

            Hasher._combine(_:)(0);
            if (v56) {
              goto LABEL_41;
            }
            goto LABEL_44;
          }

  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

  LOBYTE(v42) = 8;
  *(double *)__int128 v43 = v11;
  v41(v44, (double *)&v42, v43, ObjectType, v9);
  if ((LOBYTE(v44[2]) & 1) != 0) {
    goto LABEL_54;
  }
  uint64_t v27 = v44[0];
  unsigned int v6 = v44[0];
  v43[0] = 384LL;
  if (v44[0] <= 1.59271755e13) {
    uint64_t v28 = v44[0];
  }
  else {
    uint64_t v28 = 1.59271755e13;
  }
  *(void *)&int v42 = fmax(v28, -2.11845067e11);
  v13(v44, v43, (double *)&v42, ObjectType, v9);
  memcpy(v43, v44, 0x11AuLL);
  if ((v43[23] & 1) == 0 && (v43[25] & 1) == 0)
  {
    id v24 = v43[22];
    uint64_t v30 = v43[24];
    uint64_t result = (double *)outlined release of DateComponents((uint64_t)v43);
    int v25 = v40;
LABEL_52:
    if (v25 != v24 || v7 != v30)
    {
LABEL_54:
      id v31 = v6;
      while (1)
      {
        LOBYTE(v42) = 3;
        if (v31 <= 1.59271755e13) {
          id v32 = v31;
        }
        else {
          id v32 = 1.59271755e13;
        }
        v43[0] = fmax(v32, -2.11845067e11);
        v41(v44, (double *)&v42, v43, ObjectType, v9);
        if ((LOBYTE(v44[2]) & 1) != 0)
        {
          lazy protocol witness table accessor for type CalendarEnumerationError and conformance CalendarEnumerationError();
          swift_allocError();
          *(void *)uint64_t v22 = 3LL;
          *(double *)(v22 + _Block_object_dispose(va, 8) = v31;
          uint64_t v23 = 2;
          goto LABEL_37;
        }

        unsigned int v6 = v44[1] + v44[0];
        v43[0] = 384LL;
        if (v44[1] + v44[0] <= 1.59271755e13) {
          unint64_t v33 = v44[1] + v44[0];
        }
        else {
          unint64_t v33 = 1.59271755e13;
        }
        *(void *)&int v42 = fmax(v33, -2.11845067e11);
        v13(v44, v43, (double *)&v42, ObjectType, v9);
        memcpy(v43, v44, 0x11AuLL);
        if ((v43[23] & 1) != 0 || (v43[25] & 1) != 0)
        {
          lazy protocol witness table accessor for type CalendarEnumerationError and conformance CalendarEnumerationError();
          swift_allocError();
          *(void *)uint64_t v29 = 7LL;
          *(double *)(v29 + _Block_object_dispose(va, 8) = v6;
          goto LABEL_71;
        }

        uint64_t v34 = v31 >= v6;
        if (v8) {
          uint64_t v34 = v6 >= v31;
        }
        if (v34) {
          break;
        }
        uint64_t v35 = v43[22];
        uint64_t v36 = v43[24];
        uint64_t result = (double *)outlined release of DateComponents((uint64_t)v43);
        id v31 = v6;
        if (v40 == v35)
        {
          id v31 = v6;
          if (v7 == v36) {
            goto LABEL_69;
          }
        }
      }

      lazy protocol witness table accessor for type CalendarEnumerationError and conformance CalendarEnumerationError();
      swift_allocError();
      *(double *)uint64_t v29 = v6;
      *(double *)(v29 + _Block_object_dispose(va, 8) = v31;
      unint64_t v37 = 1;
      goto LABEL_74;
    }

          CFTypeRef v41 = 32LL;
          v36[0] = v24;
          v18((double *)v37, &v41, v36, ObjectType, *(void *)&v14);
          uint64_t result = (double *)outlined release of DateComponents((uint64_t)v37);
          if ((v32 & 1) != 0) {
            goto LABEL_33;
          }
          uint64_t v27 = v38 ? 0LL : v37[16];
          if (v10 >= v27) {
            goto LABEL_33;
          }
          LOBYTE(v35) = 5;
          *(double *)uint64_t v34 = v24;
          v19(v36, &v35, v34, ObjectType, *(void *)&v14);
          if ((LOBYTE(v36[2]) & 1) == 0)
          {
            do
            {
              unint64_t v8 = v20;
              Class v20 = v36[0] - v36[1];
              uint64_t v35 = 32LL;
              if (v36[0] - v36[1] <= 1.59271755e13) {
                uint64_t v28 = v36[0] - v36[1];
              }
              else {
                uint64_t v28 = 1.59271755e13;
              }
              uint64_t v29 = fmax(v28, -2.11845067e11);
              unint64_t v33 = v29;
              v18(v36, &v35, &v33, ObjectType, *(void *)&v14);
              memcpy(v34, v36, 0x11AuLL);
              uint64_t result = (double *)outlined release of DateComponents((uint64_t)v34);
              if (LOBYTE(v34[17]) == 1)
              {
                if ((v31 & 1) != 0)
                {
                  if (v20 >= v8) {
                    goto LABEL_72;
                  }
                }

                else if (v8 >= v20)
                {
                  goto LABEL_72;
                }

                if ((v10 & 0x8000000000000000LL) == 0) {
                  goto LABEL_33;
                }
              }

              else
              {
                if ((v31 & 1) != 0)
                {
                  if (v20 >= v8) {
                    goto LABEL_72;
                  }
                }

                else if (v8 >= v20)
                {
                  goto LABEL_72;
                }

                if (v10 >= v34[16]) {
                  goto LABEL_33;
                }
              }

              LOBYTE(v35) = 5;
              *(double *)uint64_t v34 = v29;
              v19(v36, &v35, v34, ObjectType, *(void *)&v14);
            }

            while (LOBYTE(v36[2]) != 1);
          }

          lazy protocol witness table accessor for type CalendarEnumerationError and conformance CalendarEnumerationError();
          swift_allocError();
          uint64_t v22 = 5LL;
LABEL_12:
          *(void *)uint64_t v21 = v22;
          *(double *)(v21 + _Block_object_dispose(va, 8) = v20;
LABEL_16:
          *(_BYTE *)(v21 + 16) = 0;
          return (double *)swift_willThrow();
        }
      }

      else
      {
        if (v20 == v8)
        {
LABEL_72:
          lazy protocol witness table accessor for type CalendarEnumerationError and conformance CalendarEnumerationError();
          swift_allocError();
          *(double *)uint64_t v30 = v20;
          *(double *)(v30 + _Block_object_dispose(va, 8) = v8;
          *(_BYTE *)(v30 + 16) = 1;
          return (double *)swift_willThrow();
        }

        if (v11 == v42[18])
        {
          if (v9 >= v20) {
            goto LABEL_33;
          }
          if (!v31) {
            goto LABEL_44;
          }
LABEL_37:
          CFTypeRef v41 = 64LL;
          if (v9 <= 1.59271755e13) {
            int v25 = v9;
          }
          else {
            int v25 = 1.59271755e13;
          }
          v36[0] = fmax(v25, -2.11845067e11);
          v18((double *)v37, &v41, v36, ObjectType, *(void *)&v14);
          uint64_t result = (double *)outlined release of DateComponents((uint64_t)v37);
          if ((v40 & 1) != 0)
          {
            if (v11 <= 0) {
              goto LABEL_33;
            }
          }

          else if (v39 >= v11)
          {
            goto LABEL_33;
          }

          v36[0] = v13;
          v36[1] = v14;
          LOBYTE(v33) = 5;
          uint64_t v35 = *(void *)&v20;
          *(Foundation::Date_optional *)(&result - 1) = Calendar.date(byAdding:value:to:wrappingComponents:)( (Foundation::Calendar::Component)&v33,  -1LL,  v26,  (Swift::Bool)&v35);
          if ((v34[1] & 1) != 0)
          {
            *(void *)a5 = v34[0];
            goto LABEL_3;
          }

          Class v20 = *(double *)v34;
          goto LABEL_33;
        }
      }

      LOBYTE(v37[0]) = 6;
      *(double *)int v42 = v24;
      v19(v44, v37, v42, ObjectType, *(void *)&v14);
      unint64_t v8 = v20;
      if ((LOBYTE(v44[2]) & 1) != 0) {
        goto LABEL_11;
      }
    }
  }

  LOBYTE(v37[0]) = 6;
  *(double *)int v42 = v16;
  uint64_t result = (double *)(*(void *(**)(double *__return_ptr, void *, void *, uint64_t, double))(*(void *)&v14 + 160LL))( v44,  v37,  v42,  ObjectType,  COERCE_DOUBLE(*(void *)&v14));
  if ((LOBYTE(v44[2]) & 1) != 0)
  {
    lazy protocol witness table accessor for type CalendarEnumerationError and conformance CalendarEnumerationError();
    swift_allocError();
    *(void *)uint64_t v21 = 6LL;
    *(double *)(v21 + _Block_object_dispose(va, 8) = v8;
    goto LABEL_16;
  }

  Class v20 = v44[0];
LABEL_33:
  *(double *)a5 = v20;
  *(_BYTE *)(a5 + _Block_object_dispose(va, 8) = 0;
  return result;
}

            if (v49)
            {
LABEL_167:
              __break(1u);
LABEL_168:
              __break(1u);
LABEL_169:
              __break(1u);
LABEL_170:
              __break(1u);
              goto LABEL_171;
            }

              Hasher._combine(_:)(0);
              goto LABEL_45;
            }
          }

          Hasher._combine(_:)(0);
          if (v92) {
            goto LABEL_41;
          }
          goto LABEL_44;
        }

            if (v45)
            {
LABEL_153:
              __break(1u);
LABEL_154:
              __break(1u);
LABEL_155:
              __break(1u);
LABEL_156:
              __break(1u);
              goto LABEL_157;
            }

  Hasher._combine(_:)(0);
  __int128 v44 = 0LL;
LABEL_45:

  unint64_t v49 = v69;
  if (v49)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    specialized Dictionary<>.hash(into:)(a1, v49);
    swift_bridgeObjectRelease();
    unint64_t v50 = v70;
    if (v70) {
      goto LABEL_47;
    }
LABEL_50:
    Hasher._combine(_:)(0);
    if (v71) {
      goto LABEL_48;
    }
LABEL_51:
    Hasher._combine(_:)(0);
    goto LABEL_52;
  }

  Hasher._combine(_:)(0);
  unint64_t v50 = v70;
  if (!v70) {
    goto LABEL_50;
  }
LABEL_47:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)(a1, v50);
  swift_bridgeObjectRelease();
  if (!v71) {
    goto LABEL_51;
  }
LABEL_48:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
LABEL_52:
  if (v72 == 2)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    v51 = v72 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v51);
  }

  if (v73 == 2)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    id v52 = v73 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v52);
  }

  if (v74 == 2)
  {
    uint64_t v53 = 0;
  }

  else
  {
    uint64_t v53 = v74 & 1;
    Hasher._combine(_:)(1u);
  }

  Hasher._combine(_:)(v53);
  if (v75 == 2)
  {
    v54 = 0;
  }

  else
  {
    v55 = v75 & 1;
    Hasher._combine(_:)(1u);
    v54 = v55;
  }

  Hasher._combine(_:)(v54);
  outlined retain of LocalePreferences?( (uint64_t)v77,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined consume of LocalePreferences?);
  outlined retain of LocalePreferences?( (uint64_t)v77,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined consume of LocalePreferences?);
}

  Hasher._combine(_:)(0);
  CFTypeRef v41 = 0LL;
LABEL_45:

  __int128 v46 = v67;
  if (v46)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    specialized Dictionary<>.hash(into:)((uint64_t)v77, v46);
    swift_bridgeObjectRelease();
    uint64_t v47 = v68;
    if (v68) {
      goto LABEL_47;
    }
LABEL_50:
    Hasher._combine(_:)(0);
    if (v69) {
      goto LABEL_48;
    }
LABEL_51:
    Hasher._combine(_:)(0);
    goto LABEL_52;
  }

  Hasher._combine(_:)(0);
  uint64_t v47 = v68;
  if (!v68) {
    goto LABEL_50;
  }
LABEL_47:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)((uint64_t)v77, v47);
  swift_bridgeObjectRelease();
  if (!v69) {
    goto LABEL_51;
  }
LABEL_48:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
LABEL_52:
  if (v70 == 2)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    unint64_t v48 = v70 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v48);
  }

  if (v71 == 2)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    unint64_t v49 = v71 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v49);
  }

  if (v72 == 2)
  {
    unint64_t v50 = 0;
  }

  else
  {
    unint64_t v50 = v72 & 1;
    Hasher._combine(_:)(1u);
  }

  Hasher._combine(_:)(v50);
  if (v73 == 2)
  {
    v51 = 0;
  }

  else
  {
    id v52 = v73 & 1;
    Hasher._combine(_:)(1u);
    v51 = v52;
  }

  Hasher._combine(_:)(v51);
  outlined retain of LocalePreferences?( (uint64_t)v75,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined consume of LocalePreferences?);
  outlined retain of LocalePreferences?( (uint64_t)v75,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined consume of LocalePreferences?);
  return Hasher._finalize()();
}

  Hasher._combine(_:)(0);
  __int128 v45 = 0LL;
LABEL_45:

  unint64_t v50 = v71;
  if (v50)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    specialized Dictionary<>.hash(into:)(a1, v50);
    swift_bridgeObjectRelease();
    v51 = v72;
    if (v72) {
      goto LABEL_47;
    }
LABEL_50:
    Hasher._combine(_:)(0);
    if (v73) {
      goto LABEL_48;
    }
LABEL_51:
    Hasher._combine(_:)(0);
    goto LABEL_52;
  }

  Hasher._combine(_:)(0);
  v51 = v72;
  if (!v72) {
    goto LABEL_50;
  }
LABEL_47:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)(a1, v51);
  swift_bridgeObjectRelease();
  if (!v73) {
    goto LABEL_51;
  }
LABEL_48:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
LABEL_52:
  if (v74 == 2)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    id v52 = v74 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v52);
  }

  if (v75 == 2)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    uint64_t v53 = v75 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v53);
  }

  if (v76 == 2)
  {
    v54 = 0;
  }

  else
  {
    v54 = v76 & 1;
    Hasher._combine(_:)(1u);
  }

  Hasher._combine(_:)(v54);
  if (v77 == 2)
  {
    v55 = 0;
  }

  else
  {
    v56 = v77 & 1;
    Hasher._combine(_:)(1u);
    v55 = v56;
  }

  Hasher._combine(_:)(v55);
  outlined retain of LocalePreferences?( (uint64_t)v79,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined consume of LocalePreferences?);
  outlined retain of LocalePreferences?( (uint64_t)v79,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined consume of LocalePreferences?);
  return swift_unknownObjectRelease();
}

  Hasher._combine(_:)(0);
  CFTypeRef v41 = 0LL;
LABEL_45:

  __int128 v46 = v67;
  if (v46)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    specialized Dictionary<>.hash(into:)((uint64_t)v77, v46);
    swift_bridgeObjectRelease();
    uint64_t v47 = v68;
    if (v68) {
      goto LABEL_47;
    }
LABEL_50:
    Hasher._combine(_:)(0);
    if (v69) {
      goto LABEL_48;
    }
LABEL_51:
    Hasher._combine(_:)(0);
    goto LABEL_52;
  }

  Hasher._combine(_:)(0);
  uint64_t v47 = v68;
  if (!v68) {
    goto LABEL_50;
  }
LABEL_47:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)((uint64_t)v77, v47);
  swift_bridgeObjectRelease();
  if (!v69) {
    goto LABEL_51;
  }
LABEL_48:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
LABEL_52:
  if (v70 == 2)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    unint64_t v48 = v70 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v48);
  }

  if (v71 == 2)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    unint64_t v49 = v71 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v49);
  }

  if (v72 == 2)
  {
    unint64_t v50 = 0;
  }

  else
  {
    unint64_t v50 = v72 & 1;
    Hasher._combine(_:)(1u);
  }

  Hasher._combine(_:)(v50);
  if (v73 == 2)
  {
    v51 = 0;
  }

  else
  {
    id v52 = v73 & 1;
    Hasher._combine(_:)(1u);
    v51 = v52;
  }

  Hasher._combine(_:)(v51);
  outlined retain of LocalePreferences?( (uint64_t)v75,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined consume of LocalePreferences?);
  outlined retain of LocalePreferences?( (uint64_t)v75,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined consume of LocalePreferences?);
  return Hasher._finalize()();
}

    uint64_t v39 = 0LL;
    memset(v52, 0, sizeof(v52));
    v51 = 0u;
  }

  __break(1u);
LABEL_48:
  __break(1u);
LABEL_49:
  __break(1u);
LABEL_50:
  __break(1u);
}

  uint64_t v34 = HIBYTE(v14) & 0xF;
  if ((v14 & 0x2000000000000000LL) == 0) {
    uint64_t v34 = v13 & 0xFFFFFFFFFFFFLL;
  }
  if (!v34) {
LABEL_58:
  }
    __break(1u);
  uint64_t result = specialized Collection.first.getter(v13, v14);
  if (v31)
  {
LABEL_48:
    id v32 = result;
    unint64_t v33 = v31;
    specialized RangeReplaceableCollection.removeFirst(_:)(1LL);
    return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8))(v32, v33);
  }

  else
  {
    __break(1u);
  }

  return result;
}

    __break(1u);
LABEL_45:
    __break(1u);
    return result;
  }

  __break(1u);
}

    unint64_t v33 = (v38 - 1) & v38;
    uint64_t v35 = __clz(__rbit64(v38)) + (v30 << 6);
LABEL_21:
    uint64_t v36 = *(_OWORD *)(*(void *)(v43 + 56) + 16 * v35);
    *(_BYTE *)(*(void *)(v23 + 48) + v35) = *(_BYTE *)(*(void *)(v43 + 48) + v35);
    *(_OWORD *)(*(void *)(v23 + 56) + 16 * v35) = v36;
    swift_bridgeObjectRetain();
  }

  uint64_t v39 = v37 + 7;
  if (v39 >= v42) {
    goto LABEL_45;
  }
  uint64_t v38 = *((void *)__src + v39);
  if (v38)
  {
    uint64_t v30 = v39;
    goto LABEL_44;
  }

  while (1)
  {
    uint64_t v30 = v39 + 1;
    if (__OFADD__(v39, 1LL)) {
      break;
    }
    if (v30 >= v42) {
      goto LABEL_45;
    }
    uint64_t v38 = *((void *)__src + v30);
    ++v39;
    if (v38) {
      goto LABEL_44;
    }
  }

    __break(1u);
LABEL_45:
    __break(1u);
LABEL_46:
    __break(1u);
LABEL_47:
    __break(1u);
LABEL_48:
    __break(1u);
    goto LABEL_49;
  }

  if (v8 < v23)
  {
LABEL_43:
    __break(1u);
    goto LABEL_44;
  }

  unint64_t v33 = MEMORY[0x186E1B8D4](v4, v12, v5, v3);
  uint64_t v34 = MEMORY[0x186E1B928](v33);
  if (!v35) {
    goto LABEL_48;
  }
  id v11 = v34;
LABEL_39:
  _ParseInfo.advance()();

  *(void *)(a1 + 24) = 0LL;
  return v11;
}

  v66 = specialized __RawDictionaryStorage.find<A>(_:)(0x454C49465A54LL, 0xE600000000000000LL);
  if ((v67 & 1) == 0) {
    goto LABEL_47;
  }
  v68 = (uint64_t *)(v9[7] + 16 * v66);
  v69 = v8;
  v70 = *v68;
  v71 = v68[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v72 = TimeZoneCache.State.fixed(_:)(v70, v71);
  v74 = v73;
  unint64_t v8 = v69;
  uint64_t result = swift_bridgeObjectRelease();
  if (v72)
  {
LABEL_112:
    *(void *)a1 = v72;
    *(void *)(a1 + _Block_object_dispose(va, 8) = v74;
    return result;
  }

    id v52 = (v42 - 1) & v42;
    uint64_t v53 = v43;
    uint64_t v30 = __clz(__rbit64(v42)) + (v43 << 6);
LABEL_19:
    id v31 = 24 * v30;
    id v32 = *(void *)(v55 + 48) + v31;
    unint64_t v33 = *(void *)v32;
    uint64_t v34 = *(void *)(v32 + 8);
    uint64_t v35 = *(void *)(v55 + 56) + v31;
    unint64_t v50 = *(void *)v35;
    uint64_t v36 = *(void *)v35;
    v51 = *(void *)(v35 + 8);
    unint64_t v37 = *(void *)(v18 + 48) + v31;
    uint64_t v38 = *(_BYTE *)(v32 + 16);
    uint64_t v39 = *(_BYTE *)(v35 + 16);
    *(void *)unint64_t v37 = *(void *)v32;
    *(void *)(v37 + _Block_object_dispose(va, 8) = v34;
    *(_BYTE *)(v37 + 16) = v38;
    uint64_t v40 = *(void *)(v18 + 56) + v31;
    *(void *)uint64_t v40 = v36;
    *(void *)(v40 + _Block_object_dispose(va, 8) = v51;
    *(_BYTE *)(v40 + 16) = v39;
    outlined copy of _XMLPlistEncodingFormat.Reference(v33, v34, v38);
    outlined copy of _XMLPlistEncodingFormat.Reference(v50, v51, v39);
    uint64_t v29 = v52;
    uint64_t v26 = v53;
  }

  __int128 v44 = v26 + 9;
  if (v26 + 9 >= v49) {
    goto LABEL_45;
  }
  int v42 = *(void *)(v48 + 8 * v44);
  if (v42)
  {
    __int128 v43 = v26 + 9;
    goto LABEL_44;
  }

  while (1)
  {
    __int128 v43 = v44 + 1;
    if (__OFADD__(v44, 1LL)) {
      break;
    }
    if (v43 >= v49) {
      goto LABEL_45;
    }
    int v42 = *(void *)(v48 + 8 * v43);
    ++v44;
    if (v42) {
      goto LABEL_44;
    }
  }

    unint64_t v48 = (v40 - 1) & v40;
    unint64_t v49 = v41;
    uint64_t v28 = __clz(__rbit64(v40)) + (v41 << 6);
LABEL_19:
    uint64_t v29 = 24 * v28;
    uint64_t v30 = *(void *)(v51 + 48) + v29;
    id v31 = *(void *)v30;
    id v32 = *(void *)(v30 + 8);
    unint64_t v33 = *(void *)(v51 + 56) + v29;
    __int128 v46 = *(void *)v33;
    uint64_t v34 = *(void *)v33;
    uint64_t v47 = *(void *)(v33 + 8);
    uint64_t v35 = *(void *)(v16 + 48) + v29;
    uint64_t v36 = *(_BYTE *)(v30 + 16);
    unint64_t v37 = *(_BYTE *)(v33 + 16);
    *(void *)uint64_t v35 = *(void *)v30;
    *(void *)(v35 + _Block_object_dispose(va, 8) = v32;
    *(_BYTE *)(v35 + 16) = v36;
    uint64_t v38 = *(void *)(v16 + 56) + v29;
    *(void *)uint64_t v38 = v34;
    *(void *)(v38 + _Block_object_dispose(va, 8) = v47;
    *(_BYTE *)(v38 + 16) = v37;
    outlined copy of _XMLPlistEncodingFormat.Reference(v31, v32, v36);
    outlined copy of _XMLPlistEncodingFormat.Reference(v46, v47, v37);
    uint64_t v27 = v48;
    id v24 = v49;
  }

  int v42 = v24 + 9;
  if (v24 + 9 >= v45) {
    goto LABEL_45;
  }
  uint64_t v40 = *(void *)(v44 + 8 * v42);
  if (v40)
  {
    CFTypeRef v41 = v24 + 9;
    goto LABEL_44;
  }

  while (1)
  {
    CFTypeRef v41 = v42 + 1;
    if (__OFADD__(v42, 1LL)) {
      break;
    }
    if (v41 >= v45) {
      goto LABEL_45;
    }
    uint64_t v40 = *(void *)(v44 + 8 * v41);
    ++v42;
    if (v40) {
      goto LABEL_44;
    }
  }

    unint64_t v48 = (v40 - 1) & v40;
    unint64_t v49 = v41;
    uint64_t v28 = __clz(__rbit64(v40)) + (v41 << 6);
LABEL_19:
    uint64_t v29 = 24 * v28;
    uint64_t v30 = *(void *)(v51 + 48) + v29;
    id v31 = *(void *)v30;
    id v32 = *(void *)(v30 + 8);
    unint64_t v33 = *(void *)(v51 + 56) + v29;
    __int128 v46 = *(void *)v33;
    uint64_t v34 = *(void *)v33;
    uint64_t v47 = *(void *)(v33 + 8);
    uint64_t v35 = *(void *)(v16 + 48) + v29;
    uint64_t v36 = *(_BYTE *)(v30 + 16);
    unint64_t v37 = *(_BYTE *)(v33 + 16);
    *(void *)uint64_t v35 = *(void *)v30;
    *(void *)(v35 + _Block_object_dispose(va, 8) = v32;
    *(_BYTE *)(v35 + 16) = v36;
    uint64_t v38 = *(void *)(v16 + 56) + v29;
    *(void *)uint64_t v38 = v34;
    *(void *)(v38 + _Block_object_dispose(va, 8) = v47;
    *(_BYTE *)(v38 + 16) = v37;
    outlined copy of _XMLPlistEncodingFormat.Reference(v31, v32, v36);
    outlined copy of _XMLPlistEncodingFormat.Reference(v46, v47, v37);
    uint64_t v27 = v48;
    id v24 = v49;
  }

  int v42 = v24 + 9;
  if (v24 + 9 >= v45) {
    goto LABEL_45;
  }
  uint64_t v40 = *(void *)(v44 + 8 * v42);
  if (v40)
  {
    CFTypeRef v41 = v24 + 9;
    goto LABEL_44;
  }

  while (1)
  {
    CFTypeRef v41 = v42 + 1;
    if (__OFADD__(v42, 1LL)) {
      break;
    }
    if (v41 >= v45) {
      goto LABEL_45;
    }
    uint64_t v40 = *(void *)(v44 + 8 * v41);
    ++v42;
    if (v40) {
      goto LABEL_44;
    }
  }

    v51 = (v42 - 1) & v42;
    id v52 = v43;
    uint64_t v30 = __clz(__rbit64(v42)) + (v43 << 6);
LABEL_19:
    id v31 = 24 * v30;
    id v32 = *(void *)(v54 + 48) + v31;
    unint64_t v33 = *(void *)v32;
    uint64_t v34 = *(void *)(v32 + 8);
    uint64_t v35 = *(void *)(v54 + 56) + v31;
    unint64_t v49 = *(void *)v35;
    uint64_t v36 = *(void *)v35;
    unint64_t v50 = *(void *)(v35 + 8);
    unint64_t v37 = *(void *)(v18 + 48) + v31;
    uint64_t v38 = *(_BYTE *)(v32 + 16);
    uint64_t v39 = *(_BYTE *)(v35 + 16);
    *(void *)unint64_t v37 = *(void *)v32;
    *(void *)(v37 + _Block_object_dispose(va, 8) = v34;
    *(_BYTE *)(v37 + 16) = v38;
    uint64_t v40 = *(void *)(v18 + 56) + v31;
    *(void *)uint64_t v40 = v36;
    *(void *)(v40 + _Block_object_dispose(va, 8) = v50;
    *(_BYTE *)(v40 + 16) = v39;
    outlined copy of _XMLPlistEncodingFormat.Reference(v33, v34, v38);
    outlined copy of _XMLPlistEncodingFormat.Reference(v49, v50, v39);
    uint64_t v29 = v51;
    uint64_t v26 = v52;
  }

  __int128 v44 = v26 + 9;
  if (v26 + 9 >= v48) {
    goto LABEL_45;
  }
  int v42 = *(void *)(v47 + 8 * v44);
  if (v42)
  {
    __int128 v43 = v26 + 9;
    goto LABEL_44;
  }

  while (1)
  {
    __int128 v43 = v44 + 1;
    if (__OFADD__(v44, 1LL)) {
      break;
    }
    if (v43 >= v48) {
      goto LABEL_45;
    }
    int v42 = *(void *)(v47 + 8 * v43);
    ++v44;
    if (v42) {
      goto LABEL_44;
    }
  }

    unint64_t v49 = (v41 - 1) & v41;
    unint64_t v50 = v42;
    uint64_t v29 = __clz(__rbit64(v41)) + (v42 << 6);
LABEL_19:
    uint64_t v30 = 24 * v29;
    id v31 = *(void *)(v51 + 48) + v30;
    id v32 = *(void *)v31;
    unint64_t v33 = *(void *)(v31 + 8);
    uint64_t v34 = *(void *)(v51 + 56) + v30;
    uint64_t v47 = *(void *)v34;
    uint64_t v35 = *(void *)v34;
    unint64_t v48 = *(void *)(v34 + 8);
    uint64_t v36 = *(void *)(v16 + 48) + v30;
    unint64_t v37 = *(_BYTE *)(v31 + 16);
    uint64_t v38 = *(_BYTE *)(v34 + 16);
    *(void *)uint64_t v36 = *(void *)v31;
    *(void *)(v36 + _Block_object_dispose(va, 8) = v33;
    *(_BYTE *)(v36 + 16) = v37;
    uint64_t v39 = *(void *)(v16 + 56) + v30;
    *(void *)uint64_t v39 = v35;
    *(void *)(v39 + _Block_object_dispose(va, 8) = v48;
    *(_BYTE *)(v39 + 16) = v38;
    outlined copy of _XMLPlistEncodingFormat.Reference(v32, v33, v37);
    outlined copy of _XMLPlistEncodingFormat.Reference(v47, v48, v38);
    uint64_t v28 = v49;
    int v25 = v50;
  }

  __int128 v43 = v25 + 9;
  if (v25 + 9 >= v46) {
    goto LABEL_45;
  }
  CFTypeRef v41 = *(void *)(v45 + 8 * v43);
  if (v41)
  {
    int v42 = v25 + 9;
    goto LABEL_44;
  }

  while (1)
  {
    int v42 = v43 + 1;
    if (__OFADD__(v43, 1LL)) {
      break;
    }
    if (v42 >= v46) {
      goto LABEL_45;
    }
    CFTypeRef v41 = *(void *)(v45 + 8 * v42);
    ++v43;
    if (v41) {
      goto LABEL_44;
    }
  }

    unint64_t v48 = (v40 - 1) & v40;
    unint64_t v49 = v41;
    uint64_t v28 = __clz(__rbit64(v40)) + (v41 << 6);
LABEL_19:
    uint64_t v29 = 24 * v28;
    uint64_t v30 = *(void *)(v50 + 48) + v29;
    id v31 = *(void *)v30;
    id v32 = *(void *)(v30 + 8);
    unint64_t v33 = *(void *)(v50 + 56) + v29;
    __int128 v46 = *(void *)v33;
    uint64_t v34 = *(void *)v33;
    uint64_t v47 = *(void *)(v33 + 8);
    uint64_t v35 = *(void *)(v16 + 48) + v29;
    uint64_t v36 = *(_BYTE *)(v30 + 16);
    unint64_t v37 = *(_BYTE *)(v33 + 16);
    *(void *)uint64_t v35 = *(void *)v30;
    *(void *)(v35 + _Block_object_dispose(va, 8) = v32;
    *(_BYTE *)(v35 + 16) = v36;
    uint64_t v38 = *(void *)(v16 + 56) + v29;
    *(void *)uint64_t v38 = v34;
    *(void *)(v38 + _Block_object_dispose(va, 8) = v47;
    *(_BYTE *)(v38 + 16) = v37;
    outlined copy of _XMLPlistEncodingFormat.Reference(v31, v32, v36);
    outlined copy of _XMLPlistEncodingFormat.Reference(v46, v47, v37);
    uint64_t v27 = v48;
    id v24 = v49;
  }

  int v42 = v24 + 9;
  if (v24 + 9 >= v45) {
    goto LABEL_45;
  }
  uint64_t v40 = *(void *)(v44 + 8 * v42);
  if (v40)
  {
    CFTypeRef v41 = v24 + 9;
    goto LABEL_44;
  }

  while (1)
  {
    CFTypeRef v41 = v42 + 1;
    if (__OFADD__(v42, 1LL)) {
      break;
    }
    if (v41 >= v45) {
      goto LABEL_45;
    }
    uint64_t v40 = *(void *)(v44 + 8 * v41);
    ++v42;
    if (v40) {
      goto LABEL_44;
    }
  }

    id v32 = (v43 - 1) & v43;
    uint64_t v34 = __clz(__rbit64(v43)) + (v29 << 6);
LABEL_23:
    uint64_t v35 = 8 * v34;
    uint64_t v36 = *(void *)(*(void *)(v10 + 48) + 8 * v34);
    unint64_t v37 = 16 * v34;
    uint64_t v38 = (uint64_t *)(*(void *)(v10 + 56) + v37);
    uint64_t v40 = *v38;
    uint64_t v39 = v38[1];
    *(void *)(*(void *)(v16 + 48) + v35) = v36;
    CFTypeRef v41 = (void *)(*(void *)(v16 + 56) + v37);
    *CFTypeRef v41 = v40;
    v41[1] = v39;
    swift_bridgeObjectRetain();
  }

  __int128 v44 = v42 + 6;
  if (v44 >= v67) {
    goto LABEL_45;
  }
  __int128 v43 = *(void *)(v66 + 8 * v44);
  if (v43)
  {
    uint64_t v29 = v44;
    goto LABEL_44;
  }

  while (1)
  {
    uint64_t v29 = v44 + 1;
    if (__OFADD__(v44, 1LL)) {
      break;
    }
    if (v29 >= v67) {
      goto LABEL_45;
    }
    __int128 v43 = *(void *)(v66 + 8 * v29);
    ++v44;
    if (v43) {
      goto LABEL_44;
    }
  }

    id v31 = (v39 - 1) & v39;
    uint64_t v34 = __clz(__rbit64(v39)) + (v28 << 6);
LABEL_23:
    uint64_t v35 = 8 * v34;
    uint64_t v36 = *(void **)(*(void *)(v8 + 56) + v35);
    *(void *)(*(void *)(v14 + 48) + v35) = *(void *)(*(void *)(v8 + 48) + v35);
    *(void *)(*(void *)(v14 + 56) + v35) = v36;
    unint64_t v37 = v36;
  }

  uint64_t v40 = v38 + 6;
  if (v40 >= v32) {
    goto LABEL_45;
  }
  uint64_t v39 = *(void *)(v58 + 8 * v40);
  if (v39)
  {
    uint64_t v28 = v40;
    goto LABEL_44;
  }

  while (1)
  {
    uint64_t v28 = v40 + 1;
    if (__OFADD__(v40, 1LL)) {
      break;
    }
    if (v28 >= v32) {
      goto LABEL_45;
    }
    uint64_t v39 = *(void *)(v58 + 8 * v28);
    ++v40;
    if (v39) {
      goto LABEL_44;
    }
  }

    v75 = (v47 - 1) & v47;
    v76 = v48;
    uint64_t v36 = __clz(__rbit64(v47)) + (v48 << 6);
LABEL_23:
    unint64_t v37 = 16 * v36;
    uint64_t v38 = (uint64_t *)(*(void *)(v12 + 48) + v37);
    uint64_t v40 = *v38;
    uint64_t v39 = v38[1];
    CFTypeRef v41 = (uint64_t *)(*(void *)(v12 + 56) + v37);
    int v42 = *v41;
    __int128 v43 = v41[1];
    __int128 v44 = (void *)(*(void *)(v18 + 48) + v37);
    *__int128 v44 = v40;
    v44[1] = v39;
    __int128 v45 = (void *)(*(void *)(v18 + 56) + v37);
    *__int128 v45 = v42;
    v45[1] = v43;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v35 = v75;
    id v32 = v76;
  }

  unint64_t v49 = v32 + 7;
  if (v32 + 7 >= v74) {
    goto LABEL_45;
  }
  uint64_t v47 = *(void *)(v73 + 8 * v49);
  if (v47)
  {
    unint64_t v48 = v32 + 7;
    goto LABEL_44;
  }

  while (1)
  {
    unint64_t v48 = v49 + 1;
    if (__OFADD__(v49, 1LL)) {
      break;
    }
    if (v48 >= v74) {
      goto LABEL_45;
    }
    uint64_t v47 = *(void *)(v73 + 8 * v48);
    ++v49;
    if (v47) {
      goto LABEL_44;
    }
  }

        v67 = v34;
        __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _DictionaryStorage<String, String>);
        __int128 v43 = static _DictionaryStorage.copy(original:)();
        uint64_t v40 = v43;
        if (*(void *)(v68 + 16))
        {
          __int128 v44 = (void *)(v43 + 64);
          __int128 v45 = v68 + 64;
          __int128 v46 = (unint64_t)((1LL << *(_BYTE *)(v40 + 32)) + 63) >> 6;
          uint64_t v47 = 0LL;
          *(void *)(v40 + 16) = *(void *)(v68 + 16);
          unint64_t v48 = 1LL << *(_BYTE *)(v68 + 32);
          unint64_t v49 = -1LL;
          if (v48 < 64) {
            unint64_t v49 = ~(-1LL << v48);
          }
          unint64_t v50 = v49 & *(void *)(v68 + 64);
          v51 = (unint64_t)(v48 + 63) >> 6;
          while (1)
          {
            if (v50)
            {
              id v52 = __clz(__rbit64(v50));
              v50 &= v50 - 1;
              uint64_t v53 = v52 | (v47 << 6);
            }

            else
            {
              v63 = v47 + 1;
              if (__OFADD__(v47, 1LL))
              {
                __break(1u);
                goto LABEL_81;
              }

              if (v63 >= v51) {
                break;
              }
              v64 = *(void *)(v45 + 8 * v63);
              ++v47;
              if (!v64)
              {
                uint64_t v47 = v63 + 1;
                if (v63 + 1 >= v51) {
                  break;
                }
                v64 = *(void *)(v45 + 8 * v47);
                if (!v64)
                {
                  uint64_t v47 = v63 + 2;
                  if (v63 + 2 >= v51) {
                    break;
                  }
                  v64 = *(void *)(v45 + 8 * v47);
                  if (!v64)
                  {
                    uint64_t v47 = v63 + 3;
                    if (v63 + 3 >= v51) {
                      break;
                    }
                    v64 = *(void *)(v45 + 8 * v47);
                    if (!v64)
                    {
                      uint64_t v47 = v63 + 4;
                      if (v63 + 4 >= v51) {
                        break;
                      }
                      v64 = *(void *)(v45 + 8 * v47);
                      if (!v64)
                      {
                        uint64_t v47 = v63 + 5;
                        if (v63 + 5 >= v51) {
                          break;
                        }
                        v64 = *(void *)(v45 + 8 * v47);
                        if (!v64)
                        {
                          uint64_t v47 = v63 + 6;
                          if (v63 + 6 >= v51) {
                            break;
                          }
                          v64 = *(void *)(v45 + 8 * v47);
                          if (!v64)
                          {
                            v65 = v63 + 7;
                            if (v65 >= v51) {
                              break;
                            }
                            v64 = *(void *)(v45 + 8 * v65);
                            if (!v64)
                            {
                              while (1)
                              {
                                uint64_t v47 = v65 + 1;
                                if (__OFADD__(v65, 1LL)) {
                                  break;
                                }
                                if (v47 >= v51) {
                                  goto LABEL_76;
                                }
                                v64 = *(void *)(v45 + 8 * v47);
                                ++v65;
                                if (v64) {
                                  goto LABEL_75;
                                }
                              }

      v126 = 0LL;
      v127 = 0LL;
      v85 = AttributedString.Guts._constrainedAttributes(at:with:)(v34, (uint64_t *)&v126);
      v86 = v117[1];
      v148 = *v117;
      v149 = v86;
      v150 = v117[2];
      BigString.utf8.getter();
      specialized BidirectionalCollection<>._getBlock(for:in:)(3, v159, &v126);
      uint64_t result = outlined release of Locale((uint64_t)&v135);
      if (v128 == 2)
      {
LABEL_78:
        __break(1u);
        goto LABEL_79;
      }

      if (v130 == 2)
      {
LABEL_79:
        __break(1u);
        goto LABEL_80;
      }

      v87 = v126 >> 11;
      if ((uint64_t)(v126 >> 11) <= v34 && v129 >> 10 >= v126 >> 10)
      {
        v88 = v129 >> 11;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v89 = swift_retain();
        specialized AttributedString._InternalRunsSlice.updateEach(with:)(v89, v87, v34, v85);
        swift_release();
        swift_bridgeObjectRelease();
        uint64_t result = swift_bridgeObjectRelease();
        if (v88 >= v33)
        {
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          v90 = swift_retain();
          specialized AttributedString._InternalRunsSlice.updateEach(with:)(v90, v33, v88, v85);
          swift_release();
          swift_bridgeObjectRelease_n();
          return swift_bridgeObjectRelease_n();
        }

        goto LABEL_69;
      }
    }

    __break(1u);
LABEL_69:
    __break(1u);
    goto LABEL_70;
  }

  return result;
}

  __break(1u);
LABEL_45:
  id v14 = specialized _ArrayBuffer._consumeAndCreateNew()(v14);
LABEL_36:
  uint64_t v38 = v14[2];
  uint64_t v39 = v45;
  if (!v38)
  {
    __break(1u);
    goto LABEL_38;
  }

  __break(1u);
  return result;
}

    uint64_t v22 = 0;
    goto LABEL_45;
  }

  if ((v18 - 58) >= 0xF7u)
  {
    v170 = a7;
    v174 = (uint64_t (*)(unsigned __int8 *, uint64_t, uint64_t))a8;
    goto LABEL_44;
  }

  switch(v18)
  {
    case '+':
    case '-':
      if (v13 < 2)
      {
        if (v13 != 1) {
          goto LABEL_287;
        }
        v93 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0LL, v14);
        v94 = v14 - a3;
        if (v14 < a3) {
          goto LABEL_288;
        }
        v95 = v93;
        if (!specialized static Comparable.<= infix(_:_:)(v14, a3 + a4)) {
          goto LABEL_289;
        }
        v96 = specialized min<A>(_:_:)(v14 + 1, a3 + a4);
        if (v96 <= a3)
        {
          v106 = 0LL;
          v100 = 1LL;
          goto LABEL_229;
        }

        v97 = v96;
        v172 = v95;
        v178 = v14 - a3;
        v98 = a4 + a3;
        v99 = -(uint64_t)a3;
        v100 = 1LL;
        v182 = a4 + a3;
        v187 = -(uint64_t)a3;
LABEL_147:
        v101 = 0LL;
        v102 = 0LL;
        v103 = v98 - a3;
        v104 = v99 + a3;
        while (1)
        {
          v105 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0LL, a3 + v102);
          if (v105 == 10) {
            break;
          }
          if (v105 == 13)
          {
            v107 = a3 + v102;
            if (!specialized static Comparable.<= infix(_:_:)(a3 + v102 + 1, v14)) {
              goto LABEL_162;
            }
            if (((v187 + a3 + v102 + 1) & 0x8000000000000000LL) == 0 && (uint64_t)(~v102 + v103) >= 1)
            {
              if (specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)( 0LL,  a3 + v102 + 1) == 10) {
                v107 = a3 + v102 + 1;
              }
LABEL_162:
              uint64_t v53 = __OFADD__(v100++, 1LL);
              if (!v53)
              {
                a3 = v107 + 1;
LABEL_164:
                v98 = v182;
                v99 = v187;
                if (a3 >= v97)
                {
                  v106 = 0LL;
LABEL_166:
                  v95 = v172;
                  v94 = v178;
LABEL_229:
                  lazy protocol witness table accessor for type JSONError and conformance JSONError();
                  swift_allocError();
                  *(void *)v143 = 0xD000000000000010LL;
                  *(void *)(v143 + _Block_object_dispose(va, 8) = 0x80000001839CB4F0LL;
                  *(void *)(v143 + 16) = v95;
                  *(void *)(v143 + 24) = v100;
                  *(void *)(v143 + 32) = v106;
                  *(void *)(v143 + 40) = v94;
                  *(_BYTE *)(v143 + 4_Block_object_dispose(va, 8) = 1;
                  return (char *)swift_willThrow();
                }

                goto LABEL_147;
              }

    a4 = static String._fromUTF8Repairing(_:)();
    uint64_t v39 = v38;
    lazy protocol witness table accessor for type JSONError and conformance JSONError();
    swift_allocError();
    *(void *)uint64_t v40 = a4;
    *(void *)(v40 + _Block_object_dispose(va, 8) = v39;
    *(_OWORD *)(v40 + 16) = 0u;
    *(_OWORD *)(v40 + 32) = 0u;
    CFTypeRef v41 = 11;
LABEL_45:
    *(_BYTE *)(v40 + 4_Block_object_dispose(va, 8) = v41;
    swift_willThrow();
  }

  else
  {
LABEL_184:
    if (a4 > 0xFF) {
      goto LABEL_44;
    }
  }

  return a4;
}

    a4 = static String._fromUTF8Repairing(_:)();
    uint64_t v39 = v38;
    lazy protocol witness table accessor for type JSONError and conformance JSONError();
    swift_allocError();
    *(void *)uint64_t v40 = a4;
    *(void *)(v40 + _Block_object_dispose(va, 8) = v39;
    *(_OWORD *)(v40 + 16) = 0u;
    *(_OWORD *)(v40 + 32) = 0u;
    CFTypeRef v41 = 11;
LABEL_45:
    *(_BYTE *)(v40 + 4_Block_object_dispose(va, 8) = v41;
    swift_willThrow();
  }

  else
  {
LABEL_184:
    if (a4 >> 16) {
      goto LABEL_44;
    }
  }

  return a4;
}

    a4 = static String._fromUTF8Repairing(_:)();
    uint64_t v39 = v38;
    lazy protocol witness table accessor for type JSONError and conformance JSONError();
    swift_allocError();
    *(void *)uint64_t v40 = a4;
    *(void *)(v40 + _Block_object_dispose(va, 8) = v39;
    *(_OWORD *)(v40 + 16) = 0u;
    *(_OWORD *)(v40 + 32) = 0u;
    CFTypeRef v41 = 11;
LABEL_45:
    *(_BYTE *)(v40 + 4_Block_object_dispose(va, 8) = v41;
    swift_willThrow();
  }

  else
  {
LABEL_184:
    if (HIDWORD(a4)) {
      goto LABEL_44;
    }
  }

  return a4;
}

    uint64_t v23 = 0;
    goto LABEL_45;
  }

  if ((v19 - 58) >= 0xF7u)
  {
    v169 = a7;
    v173 = (uint64_t (*)(unsigned __int8 *, uint64_t, uint64_t))a8;
    goto LABEL_44;
  }

  switch(v19)
  {
    case '+':
    case '-':
      if (v14 < 2)
      {
        if (v14 != 1) {
          goto LABEL_287;
        }
        v93 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0LL, v15);
        v94 = v15 - a3;
        if (v15 < a3) {
          goto LABEL_288;
        }
        v95 = v93;
        if (!specialized static Comparable.<= infix(_:_:)(v15, a3 + a4)) {
          goto LABEL_289;
        }
        v96 = specialized min<A>(_:_:)(v15 + 1, a3 + a4);
        if (v96 <= a3)
        {
          v106 = 0LL;
          v100 = 1LL;
          goto LABEL_229;
        }

        v97 = v96;
        v171 = v95;
        v177 = v15 - a3;
        v98 = a4 + a3;
        v99 = -(uint64_t)a3;
        v100 = 1LL;
        v181 = a4 + a3;
        v186 = -(uint64_t)a3;
LABEL_147:
        v101 = 0LL;
        v102 = 0LL;
        v103 = v98 - a3;
        v104 = v99 + a3;
        while (1)
        {
          v105 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0LL, a3 + v102);
          if (v105 == 10) {
            break;
          }
          if (v105 == 13)
          {
            v107 = a3 + v102;
            if (!specialized static Comparable.<= infix(_:_:)(a3 + v102 + 1, v15)) {
              goto LABEL_162;
            }
            if (((v186 + a3 + v102 + 1) & 0x8000000000000000LL) == 0 && (uint64_t)(~v102 + v103) >= 1)
            {
              if (specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)( 0LL,  a3 + v102 + 1) == 10) {
                v107 = a3 + v102 + 1;
              }
LABEL_162:
              v54 = __OFADD__(v100++, 1LL);
              if (!v54)
              {
                a3 = v107 + 1;
LABEL_164:
                v98 = v181;
                v99 = v186;
                if (a3 >= v97)
                {
                  v106 = 0LL;
LABEL_166:
                  v95 = v171;
                  v94 = v177;
LABEL_229:
                  lazy protocol witness table accessor for type JSONError and conformance JSONError();
                  swift_allocError();
                  *(void *)v142 = 0xD000000000000010LL;
                  *(void *)(v142 + _Block_object_dispose(va, 8) = 0x80000001839CB4F0LL;
                  *(void *)(v142 + 16) = v95;
                  *(void *)(v142 + 24) = v100;
                  *(void *)(v142 + 32) = v106;
                  *(void *)(v142 + 40) = v94;
                  *(_BYTE *)(v142 + 4_Block_object_dispose(va, 8) = 1;
                  return swift_willThrow();
                }

                goto LABEL_147;
              }

    a4 = static String._fromUTF8Repairing(_:)();
    uint64_t v39 = v38;
    lazy protocol witness table accessor for type JSONError and conformance JSONError();
    swift_allocError();
    *(void *)uint64_t v40 = a4;
    *(void *)(v40 + _Block_object_dispose(va, 8) = v39;
    *(_OWORD *)(v40 + 16) = 0u;
    *(_OWORD *)(v40 + 32) = 0u;
    CFTypeRef v41 = 11;
LABEL_45:
    *(_BYTE *)(v40 + 4_Block_object_dispose(va, 8) = v41;
    swift_willThrow();
  }

  return (char *)a4;
}

    uint64_t v39 = static String._fromUTF8Repairing(_:)();
    CFTypeRef v41 = v40;
    lazy protocol witness table accessor for type JSONError and conformance JSONError();
    swift_allocError();
    *(void *)int v42 = v39;
    *(void *)(v42 + _Block_object_dispose(va, 8) = v41;
    *(_OWORD *)(v42 + 16) = 0u;
    *(_OWORD *)(v42 + 32) = 0u;
    __int128 v43 = 11;
LABEL_45:
    *(_BYTE *)(v42 + 4_Block_object_dispose(va, 8) = v43;
    swift_willThrow();
  }

  return v7;
}

    uint64_t v23 = 0;
    goto LABEL_45;
  }

  if ((v19 - 58) >= 0xF7u)
  {
    v171 = a7;
    v175 = (uint64_t (*)(unsigned __int8 *, uint64_t, uint64_t))a8;
    goto LABEL_44;
  }

  switch(v19)
  {
    case '+':
    case '-':
      if (v14 < 2)
      {
        if (v14 != 1) {
          goto LABEL_287;
        }
        v94 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0LL, v15);
        v95 = v15 - a3;
        if (v15 < a3) {
          goto LABEL_288;
        }
        v96 = v94;
        if (!specialized static Comparable.<= infix(_:_:)(v15, a3 + a4)) {
          goto LABEL_289;
        }
        v97 = specialized min<A>(_:_:)(v15 + 1, a3 + a4);
        if (v97 <= a3)
        {
          v107 = 0LL;
          v101 = 1LL;
          goto LABEL_229;
        }

        v98 = v97;
        v173 = v96;
        v179 = v15 - a3;
        v99 = a4 + a3;
        v100 = -(uint64_t)a3;
        v101 = 1LL;
        v183 = a4 + a3;
        v188 = -(uint64_t)a3;
LABEL_147:
        v102 = 0LL;
        v103 = 0LL;
        v104 = v99 - a3;
        v105 = v100 + a3;
        while (1)
        {
          v106 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0LL, a3 + v103);
          if (v106 == 10) {
            break;
          }
          if (v106 == 13)
          {
            v108 = a3 + v103;
            if (!specialized static Comparable.<= infix(_:_:)(a3 + v103 + 1, v15)) {
              goto LABEL_162;
            }
            if (((v188 + a3 + v103 + 1) & 0x8000000000000000LL) == 0 && (uint64_t)(~v103 + v104) >= 1)
            {
              if (specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)( 0LL,  a3 + v103 + 1) == 10) {
                v108 = a3 + v103 + 1;
              }
LABEL_162:
              v54 = __OFADD__(v101++, 1LL);
              if (!v54)
              {
                a3 = v108 + 1;
LABEL_164:
                v99 = v183;
                v100 = v188;
                if (a3 >= v98)
                {
                  v107 = 0LL;
LABEL_166:
                  v96 = v173;
                  v95 = v179;
LABEL_229:
                  lazy protocol witness table accessor for type JSONError and conformance JSONError();
                  swift_allocError();
                  *(void *)v144 = 0xD000000000000010LL;
                  *(void *)(v144 + _Block_object_dispose(va, 8) = 0x80000001839CB4F0LL;
                  *(void *)(v144 + 16) = v96;
                  *(void *)(v144 + 24) = v101;
                  *(void *)(v144 + 32) = v107;
                  *(void *)(v144 + 40) = v95;
                  *(_BYTE *)(v144 + 4_Block_object_dispose(va, 8) = 1;
                  return swift_willThrow();
                }

                goto LABEL_147;
              }

    v77 = *(void *)(v8 - 320);
    dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
    v78 = dispatch thunk of static Comparable.< infix(_:_:)();
    v79 = v77;
    Class v1 = (char *)v33;
    v33(v79, v0);
    v33(*(void *)(v8 - 336), v0);
    if ((v78 & 1) != 0) {
      goto LABEL_54;
    }
    goto LABEL_8;
  }

  if (dispatch thunk of BinaryInteger.bitWidth.getter() >= 64) {
    goto LABEL_44;
  }
LABEL_53:
  v84 = dispatch thunk of BinaryInteger._lowWord.getter();
  v33((uint64_t)v1, v0);
  if (v84 < *(void *)(v8 - 96))
  {
LABEL_54:
    __break(1u);
LABEL_55:
    v85 = *(void *)(v8 - 320);
    dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
    *(_DWORD *)(v8 - 136) = dispatch thunk of static Comparable.< infix(_:_:)();
    v86 = v85;
    v56 = *(char **)(v8 - 200);
    v87 = v37;
    unint64_t v37 = v33;
    v33(v86, v0);
    v33((uint64_t)v87, v0);
    if ((*(_DWORD *)(v8 - 136) & 1) == 0) {
      goto LABEL_27;
    }
    goto LABEL_67;
  }

              unint64_t v19 = v77;
              goto LABEL_12;
            }
          }
        }
      }
    }

                Hasher._combine(_:)(0);
                goto LABEL_45;
              }
            }

            Hasher._combine(_:)(0);
            if (v56) {
              goto LABEL_41;
            }
            goto LABEL_44;
          }

              uint64_t v30 = theString;
              goto LABEL_46;
            }
          }
        }

  uint64_t result = *(void *)(a1 + 48) + *(void *)(a1 + 56);
  *(void *)(a1 + 40) = result;
  return result;
}

  uint64_t result = *(void *)(a1 + 48) + *(void *)(a1 + 56);
  *(void *)(a1 + 40) = result;
  return result;
}

  uint64_t v22 = (unsigned __int16)c;
  uint64_t v23 = (NSCharacterSet *)isADigit_set;
  if (!isADigit_set)
  {
    uint64_t v23 = +[NSCharacterSet decimalDigitCharacterSet](&OBJC_CLASS___NSCharacterSet, "decimalDigitCharacterSet");
    isADigit_set = (uint64_t)v23;
  }

  id v24 = -[NSCharacterSet characterIsMember:](v23, "characterIsMember:", v22);
  if (v24)
  {
    uint64_t v38 = v24;
    int v25 = 0LL;
    while (1)
    {
      if (v25 > 0x1999999999999998LL)
      {
        if (v25 != 0x1999999999999999LL) {
          goto LABEL_53;
        }
        uint64_t v26 = (unsigned __int16)c - 48;
        if (v26 >= 5)
        {
LABEL_53:
          while (1)
          {
            uint64_t v27 = v41;
            if (v41 >= v40)
            {
              uint64_t v29 = v44 + v40;
              if (v43 > v44 + v40)
              {
                if (v43 - (v44 + v40) >= 0x20) {
                  uint64_t v30 = 32LL;
                }
                else {
                  uint64_t v30 = v43 - (v44 + v40);
                }
                v44 += v40;
                uint64_t v40 = v30;
                objc_msgSend(v42, sel_getUid("getCharacters:range:"), v45, v29, v30);
                uint64_t v28 = v45[0];
                LOWORD(c) = v45[0];
                CFTypeRef v41 = 1LL;
                goto LABEL_62;
              }

              CFTypeRef v41 = v40 + 1;
              uint64_t v28 = 0xFFFFLL;
            }

            else
            {
              ++v41;
              uint64_t v28 = (unsigned __int16)v45[v27];
            }

            LOWORD(c) = v28;
LABEL_62:
            id v31 = (NSCharacterSet *)isADigit_set;
            if (!isADigit_set)
            {
              id v31 = +[NSCharacterSet decimalDigitCharacterSet](&OBJC_CLASS___NSCharacterSet, "decimalDigitCharacterSet");
              isADigit_set = (uint64_t)v31;
            }

            if (!-[NSCharacterSet characterIsMember:](v31, "characterIsMember:", v28))
            {
              int v25 = -1LL;
              id v32 = (unsigned __int16)c;
              goto LABEL_77;
            }
          }
        }
      }

      unint64_t v33 = (unsigned __int16)c - 48;
      int v25 = v33 + 10 * v25;
      uint64_t v34 = v41;
      if (v41 >= v40)
      {
        uint64_t v35 = v44 + v40;
        if (v43 > v44 + v40)
        {
          if (v43 - (v44 + v40) >= 0x20) {
            uint64_t v36 = 32LL;
          }
          else {
            uint64_t v36 = v43 - (v44 + v40);
          }
          v44 += v40;
          uint64_t v40 = v36;
          objc_msgSend(v42, sel_getUid("getCharacters:range:"), v45, v35, v36);
          id v32 = v45[0];
          LOWORD(c) = v45[0];
          CFTypeRef v41 = 1LL;
          goto LABEL_77;
        }

        CFTypeRef v41 = v40 + 1;
        id v32 = 0xFFFFLL;
      }

      else
      {
        ++v41;
        id v32 = (unsigned __int16)v45[v34];
      }

      LOWORD(c) = v32;
LABEL_77:
      unint64_t v37 = (NSCharacterSet *)isADigit_set;
      if (!isADigit_set)
      {
        unint64_t v37 = +[NSCharacterSet decimalDigitCharacterSet](&OBJC_CLASS___NSCharacterSet, "decimalDigitCharacterSet");
        isADigit_set = (uint64_t)v37;
      }

      if (!-[NSCharacterSet characterIsMember:](v37, "characterIsMember:", v32))
      {
        if (result) {
          *uint64_t result = v25;
        }
        -[NSScanner setScanLocation:](self, "setScanLocation:", v44 + v41 - 1);
        return v38;
      }
    }
  }

  return v24;
}

void sub_182EC5D24( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  uint64_t v14 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  uint64_t v17 = va_arg(va1, void);
  uint64_t v18 = va_arg(va1, void);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

uint64_t protocol witness for CVarArg._cVarArgEncoding.getter in conformance String()
{
  return specialized CVarArg<>._cVarArgEncoding.getter();
}

uint64_t _NSScanLongLongFromString(void *a1, void *a2, uint64_t *a3, unint64_t *a4)
{
  uint64_t v50 = *MEMORY[0x1895F89C0];
  unint64_t v6 = *a4;
  unint64_t v7 = [a1 length];
  unint64_t v46 = v7;
  unint64_t v47 = v6;
  id v45 = a1;
  if (v7 <= v6)
  {
    unint64_t v43 = 0LL;
    int v9 = 0xFFFF;
  }

  else
  {
    if (v7 - v6 >= 0x20) {
      uint64_t v8 = 32LL;
    }
    else {
      uint64_t v8 = v7 - v6;
    }
    unint64_t v43 = v8;
    objc_msgSend(a1, sel_getUid("getCharacters:range:"), v48, v6, v8);
    int v9 = v48[0];
  }

  LOWORD(c) = v9;
  unint64_t v44 = 1LL;
  if (a2)
  {
    if (objc_msgSend(a2, "characterIsMember:"))
    {
      do
      {
        unint64_t v10 = v44;
        if (v44 - 1 >= v43) {
          break;
        }
        if (v44 >= v43)
        {
          uint64_t v12 = v47 + v43;
          if (v46 > v47 + v43)
          {
            if (v46 - (v47 + v43) >= 0x20) {
              uint64_t v13 = 32LL;
            }
            else {
              uint64_t v13 = v46 - (v47 + v43);
            }
            v47 += v43;
            unint64_t v43 = v13;
            objc_msgSend(v45, sel_getUid("getCharacters:range:"), v48, v12, v13);
            LOWORD(c) = v48[0];
            unint64_t v44 = 1LL;
            continue;
          }

          unint64_t v44 = v43 + 1;
          __int16 v11 = -1;
        }

        else
        {
          ++v44;
          __int16 v11 = v48[v10];
        }

        LOWORD(c) = v11;
      }

      while ((objc_msgSend(a2, "characterIsMember:") & 1) != 0);
    }

    int v9 = (unsigned __int16)c;
  }

  BOOL v42 = v9 == 45;
  if (v9 != 45 && v9 != 43) {
    goto LABEL_45;
  }
  unint64_t v14 = v44;
  if (v44 >= v43)
  {
    uint64_t v16 = v47 + v43;
    if (v46 > v47 + v43)
    {
      if (v46 - (v47 + v43) >= 0x20) {
        uint64_t v17 = 32LL;
      }
      else {
        uint64_t v17 = v46 - (v47 + v43);
      }
      v47 += v43;
      unint64_t v43 = v17;
      objc_msgSend(v45, sel_getUid("getCharacters:range:"), v48, v16, v17);
      LOWORD(c) = v48[0];
      unint64_t v44 = 1LL;
      if (!a2) {
        goto LABEL_45;
      }
      goto LABEL_33;
    }

    unint64_t v44 = v43 + 1;
    __int16 v15 = -1;
  }

  else
  {
    ++v44;
    __int16 v15 = v48[v14];
  }

  LOWORD(c) = v15;
  if (!a2) {
    goto LABEL_45;
  }
LABEL_33:
  if (objc_msgSend(a2, "characterIsMember:"))
  {
    do
    {
      unint64_t v18 = v44;
      if (v44 - 1 >= v43) {
        break;
      }
      if (v44 >= v43)
      {
        uint64_t v20 = v47 + v43;
        if (v46 > v47 + v43)
        {
          if (v46 - (v47 + v43) >= 0x20) {
            uint64_t v21 = 32LL;
          }
          else {
            uint64_t v21 = v46 - (v47 + v43);
          }
          v47 += v43;
          unint64_t v43 = v21;
          objc_msgSend(v45, sel_getUid("getCharacters:range:"), v48, v20, v21);
          LOWORD(c) = v48[0];
          unint64_t v44 = 1LL;
          continue;
        }

        unint64_t v44 = v43 + 1;
        __int16 v19 = -1;
      }

      else
      {
        ++v44;
        __int16 v19 = v48[v18];
      }

      LOWORD(c) = v19;
    }

    while ((objc_msgSend(a2, "characterIsMember:") & 1) != 0);
  }

LABEL_45:
  uint64_t v22 = (unsigned __int16)c;
  uint64_t v23 = (NSCharacterSet *)isADigit_set;
  if (!isADigit_set)
  {
    uint64_t v23 = +[NSCharacterSet decimalDigitCharacterSet](&OBJC_CLASS___NSCharacterSet, "decimalDigitCharacterSet");
    isADigit_set = (uint64_t)v23;
  }

  uint64_t result = -[NSCharacterSet characterIsMember:](v23, "characterIsMember:", v22);
  if ((_DWORD)result)
  {
    unsigned int v39 = result;
    uint64_t v25 = 0LL;
    while (1)
    {
      if (v25 > 0xCCCCCCCCCCCCCCBLL)
      {
        if (v25 != 0xCCCCCCCCCCCCCCCLL) {
          goto LABEL_54;
        }
        uint64_t v26 = (unsigned __int16)c - 48;
        if (v26 - v42 >= 7)
        {
LABEL_54:
          while (1)
          {
            unint64_t v27 = v44;
            if (v44 >= v43)
            {
              uint64_t v29 = v47 + v43;
              if (v46 > v47 + v43)
              {
                if (v46 - (v47 + v43) >= 0x20) {
                  uint64_t v30 = 32LL;
                }
                else {
                  uint64_t v30 = v46 - (v47 + v43);
                }
                v47 += v43;
                unint64_t v43 = v30;
                objc_msgSend(v45, sel_getUid("getCharacters:range:"), v48, v29, v30);
                uint64_t v28 = v48[0];
                LOWORD(c) = v48[0];
                unint64_t v44 = 1LL;
                goto LABEL_63;
              }

              unint64_t v44 = v43 + 1;
              uint64_t v28 = 0xFFFFLL;
            }

            else
            {
              ++v44;
              uint64_t v28 = (unsigned __int16)v48[v27];
            }

            LOWORD(c) = v28;
LABEL_63:
            id v31 = (NSCharacterSet *)isADigit_set;
            if (!isADigit_set)
            {
              id v31 = +[NSCharacterSet decimalDigitCharacterSet](&OBJC_CLASS___NSCharacterSet, "decimalDigitCharacterSet");
              isADigit_set = (uint64_t)v31;
            }

            if (!-[NSCharacterSet characterIsMember:](v31, "characterIsMember:", v28))
            {
              if (v42) {
                uint64_t v25 = 0x8000000000000000LL;
              }
              else {
                uint64_t v25 = 0x7FFFFFFFFFFFFFFFLL;
              }
              uint64_t v32 = (unsigned __int16)c;
              BOOL v42 = 0;
              goto LABEL_81;
            }
          }
        }
      }

      uint64_t v33 = (unsigned __int16)c - 48;
      uint64_t v25 = v33 + 10 * v25;
      unint64_t v34 = v44;
      if (v44 < v43) {
        break;
      }
      uint64_t v35 = v47 + v43;
      if (v46 <= v47 + v43)
      {
        unint64_t v44 = v43 + 1;
        uint64_t v32 = 0xFFFFLL;
        goto LABEL_80;
      }

      if (v46 - (v47 + v43) >= 0x20) {
        uint64_t v36 = 32LL;
      }
      else {
        uint64_t v36 = v46 - (v47 + v43);
      }
      v47 += v43;
      unint64_t v43 = v36;
      objc_msgSend(v45, sel_getUid("getCharacters:range:"), v48, v35, v36);
      uint64_t v32 = v48[0];
      LOWORD(c) = v48[0];
      unint64_t v44 = 1LL;
LABEL_81:
      unint64_t v37 = (NSCharacterSet *)isADigit_set;
      if (!isADigit_set)
      {
        unint64_t v37 = +[NSCharacterSet decimalDigitCharacterSet](&OBJC_CLASS___NSCharacterSet, "decimalDigitCharacterSet");
        isADigit_set = (uint64_t)v37;
      }

      if (!-[NSCharacterSet characterIsMember:](v37, "characterIsMember:", v32))
      {
        if (a3)
        {
          if (v42) {
            uint64_t v38 = -v25;
          }
          else {
            uint64_t v38 = v25;
          }
          *a3 = v38;
        }

        *a4 = v47 + v44 - 1;
        return v39;
      }
    }

    ++v44;
    uint64_t v32 = (unsigned __int16)v48[v34];
LABEL_80:
    LOWORD(c) = v32;
    goto LABEL_81;
  }

  return result;
}

        if (v12 > 0x3F) {
          return 0x7FFFFFFFFFFFFFFFLL;
        }
LABEL_48:
        ++v11;
        continue;
      }
    }

    if (a1)
    {
      uint64_t v23 = ~a1;
      id v24 = 1LL;
      uint64_t v25 = a1;
      while (1)
      {
        uint64_t v26 = (-1LL << __clz(__rbit64(v25))) & v23;
        if (!v26) {
          break;
        }
        ++v24;
        uint64_t v25 = (-1LL << __clz(__rbit64(v26))) & a1;
        if (!v25)
        {
          --v24;
          break;
        }
      }

      if (v24)
      {
        unint64_t v27 = v7 + v6;
        uint64_t v17 = 0x7FFFFFFFFFFFFFFFLL;
        unint64_t v43 = v7 + v6;
        while (1)
        {
          LOBYTE(v2_Block_object_dispose(va, 8) = 0;
          uint64_t v29 = v24--;
          uint64_t v30 = v44;
          while (1)
          {
            if (((-1LL << v28) & a1) == 0)
            {
              uint64_t v33 = 0LL;
              id v31 = 0x7FFFFFFFFFFFFFFFLL;
              goto LABEL_64;
            }

            id v31 = __clz(__rbit64((-1LL << v28) & a1));
            uint64_t v32 = (-1LL << v31) & v23;
            uint64_t v28 = __clz(__rbit64(v32));
            if (!--v29) {
              break;
            }
            uint64_t v33 = 0LL;
            id v31 = 0x7FFFFFFFFFFFFFFFLL;
            if (!v32 || v28 > 0x3F) {
              goto LABEL_64;
            }
          }

          uint64_t v33 = v28 - v31;
LABEL_64:
          if (v27 >= v33 + v31) {
            unint64_t v34 = v33 + v31;
          }
          else {
            unint64_t v34 = v27;
          }
          if (v31 > v44 || v44 >= v33 + v31)
          {
            uint64_t v36 = v34 - v31;
            if (v31 < v27) {
              unint64_t v37 = v31;
            }
            else {
              unint64_t v37 = 0LL;
            }
            if (v31 >= v27) {
              uint64_t v36 = 0LL;
            }
            if (v44 <= v31) {
              uint64_t v30 = v37;
            }
            else {
              uint64_t v30 = 0LL;
            }
            if (v44 <= v31) {
              uint64_t v35 = v36;
            }
            else {
              uint64_t v35 = 0LL;
            }
            if (!v35) {
              goto LABEL_96;
            }
          }

          else
          {
            uint64_t v35 = v34 - v44;
            if (v34 == v44) {
              goto LABEL_96;
            }
          }

          if ((a2 & 0x4000000000000000LL) != 0)
          {
            __NSINDEXSET_IS_CALLING_OUT_TO_A_RANGE_BLOCK__(a5);
            unsigned int v39 = v45;
            goto LABEL_95;
          }

          if ((uint64_t)(v35 + v30 - 1) >= v30)
          {
            uint64_t v38 = v35 + v30 - 2;
            do
            {
              if ((a2 & 0x2000000000000000LL) != 0)
              {
                if (__NSINDEXSET_IS_CALLING_OUT_TO_A_RANGE_BLOCK__(a5))
                {
                  id v45 = 1;
                  uint64_t v17 = v38 + 1;
                }
              }

              else
              {
                __NSINDEXSET_IS_CALLING_OUT_TO_A_RANGE_BLOCK__(a5);
              }

              unsigned int v39 = v45;
              if (v45) {
                break;
              }
            }

            while (v38-- >= v30);
LABEL_95:
            unint64_t v27 = v43;
            if (v39) {
              return v17;
            }
          }

          swift_bridgeObjectRetain();
          uint64_t v23 = swift_bridgeObjectRetain();
          goto LABEL_46;
        }

        unint64_t v10 = (char *)_StringObject.sharedUTF8.getter();
        if (v10) {
          goto LABEL_8;
        }
LABEL_77:
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
LABEL_78:
        v43._countAndFlagsBits = v6;
        v43._object = (void *)v7;
        String.append(_:)(v43);
        if (!v8) {
          goto LABEL_55;
        }
        goto LABEL_79;
      }

      uint64_t v17 = HIBYTE(v7) & 0xF;
      v99 = v6;
      v100 = v7 & 0xFFFFFFFFFFFFFFLL;
      if (!v17) {
        goto LABEL_77;
      }
      if ((v6 & 0x80) != 0) {
        goto LABEL_45;
      }
      unint64_t v18 = v6;
      __int16 v19 = v17 - 1;
      uint64_t v20 = v96;
      while (1)
      {
        if ((v18 - 39) >= 9 && v18 != 33 && v18 != 36)
        {
          if (v18 == 38) {
            goto LABEL_45;
          }
          uint64_t v22 = v18 - 58;
          if ((v18 - 58) <= 0xFFFFFFF5)
          {
            if (v22 > 6) {
              goto LABEL_41;
            }
            if (((1 << v22) & 0x63) == 0) {
              break;
            }
          }
        }

        (*(void (**)(char *, char *, uint64_t))(v95 + 16))(v92, v93, v94);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v95 + 56))(v92, 0LL, 1LL, v94);
        goto LABEL_46;
      }

      *(_OWORD *)v55 = *(_OWORD *)v56;
      unint64_t v58 = *((void *)v56 + 3);
      *((void *)v55 + 2) = *((void *)v56 + 2);
      *((void *)v55 + 3) = v58;
      int v59 = *(int *)(type metadata accessor for NSDecimal.FormatStyle.Currency(0LL) + 24);
      uint64_t v60 = &v55[v59];
      v61 = &v56[v59];
      *(void *)uint64_t v60 = *(void *)&v56[v59];
      v60[8] = v56[v59 + 8];
      v62 = *(_OWORD *)&v56[v59 + 32];
      *((_OWORD *)v60 + 1) = *(_OWORD *)&v56[v59 + 16];
      *((_OWORD *)v60 + 2) = v62;
      *((_OWORD *)v60 + 3) = *(_OWORD *)&v56[v59 + 48];
      *(_OWORD *)(v60 + 57) = *(_OWORD *)&v56[v59 + 57];
      v60[73] = v56[v59 + 73];
      *(_DWORD *)(v60 + 74) = *(_DWORD *)&v56[v59 + 74];
      v60[78] = v56[v59 + 78];
      v63 = (int *)type metadata accessor for CurrencyFormatStyleConfiguration.Collection(0LL);
      v64 = v63[9];
      __dst = &v60[v64];
      v65 = &v61[v64];
      v66 = type metadata accessor for FloatingPointRoundingRule();
      v67 = *(void *)(v66 - 8);
      v68 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v67 + 48);
      swift_unknownObjectRetain();
      swift_bridgeObjectRetain();
      if (v68(v65, 1LL, v66))
      {
        v69 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
        memcpy(__dst, v65, *(void *)(*(void *)(v69 - 8) + 64LL));
      }

      else
      {
        (*(void (**)(char *, char *, uint64_t))(v67 + 16))(__dst, v65, v66);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v67 + 56))(__dst, 0LL, 1LL, v66);
      }

      v112 = v63[10];
      v113 = &v60[v112];
      v114 = &v61[v112];
      *(void *)v113 = *(void *)v114;
      v113[8] = v114[8];
      v60[v63[11]] = v61[v63[11]];
      v115 = v63[12];
      v106 = &v60[v115];
      v107 = &v61[v115];
LABEL_41:
      *v106 = *v107;
      swift_storeEnumTagMultiPayload();
      swift_storeEnumTagMultiPayload();
      return a1;
    case 0x10u:
      *(void *)a1 = *(void *)a2;
      a1[8] = a2[8];
      a1[9] = a2[9];
      *((_OWORD *)a1 + 1) = *((_OWORD *)a2 + 1);
      swift_bridgeObjectRetain();
      swift_unknownObjectRetain();
      swift_storeEnumTagMultiPayload();
      return a1;
    default:
      memcpy(a1, a2, *(void *)(v5 + 64));
      return a1;
  }

    specialized _NativeDictionary._insert(at:key:value:)(v2, 8LL, v44, v18, (void *)v4);
LABEL_46:
    v242 = v4;
    swift_bridgeObjectRelease();
    if ((v5 & 1) != 0) {
      goto LABEL_15;
    }
LABEL_47:
    char v5 = v6;
    unint64_t v46 = v7;
    unint64_t v6 = v8;
    uint64_t v2 = dispatch thunk of CustomStringConvertible.description.getter();
    Class v1 = v47;
    uint64_t v3 = swift_isUniquelyReferenced_nonNull_native();
    unint64_t v49 = specialized __RawDictionaryStorage.find<A>(_:)(16LL);
    uint64_t v50 = *(void *)(v4 + 16);
    v51 = (v48 & 1) == 0;
    id v52 = v50 + v51;
    if (__OFADD__(v50, v51)) {
      goto LABEL_79;
    }
    uint64_t v53 = v48;
    if (*(void *)(v4 + 24) < v52)
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v52, v3);
      uint64_t v3 = v4;
      v54 = specialized __RawDictionaryStorage.find<A>(_:)(16LL);
      if ((v53 & 1) != (v55 & 1)) {
        goto LABEL_334;
      }
      unint64_t v49 = v54;
      if ((v53 & 1) == 0) {
        goto LABEL_54;
      }
      goto LABEL_51;
    }

    if ((v3 & 1) != 0)
    {
      uint64_t v3 = v4;
      if ((v48 & 1) == 0) {
        goto LABEL_54;
      }
      goto LABEL_51;
    }

    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<Int, String>);
    v164 = static _DictionaryStorage.copy(original:)();
    uint64_t v3 = v164;
    if (!*(void *)(v4 + 16)) {
      goto LABEL_314;
    }
    v165 = (char *)(v164 + 64);
    v240 = (char *)(v4 + 64);
    v166 = (unint64_t)((1LL << *(_BYTE *)(v3 + 32)) + 63) >> 6;
    if (v3 != v4 || v165 >= &v240[8 * v166]) {
      memmove(v165, v240, 8 * v166);
    }
    v167 = 0LL;
    *(void *)(v3 + 16) = *(void *)(v4 + 16);
    v168 = 1LL << *(_BYTE *)(v4 + 32);
    v169 = -1LL;
    if (v168 < 64) {
      v169 = ~(-1LL << v168);
    }
    v170 = v169 & *(void *)(v4 + 64);
    v239 = (unint64_t)(v168 + 63) >> 6;
    while (2)
    {
      if (v170)
      {
        v171 = __clz(__rbit64(v170));
        v170 &= v170 - 1;
        v241 = v167;
        v172 = v171 | (v167 << 6);
LABEL_219:
        v173 = 8 * v172;
        v174 = *(void *)(*(void *)(v4 + 48) + 8 * v172);
        v175 = 16 * v172;
        v176 = (uint64_t *)(*(void *)(v4 + 56) + v175);
        v178 = *v176;
        v177 = v176[1];
        *(void *)(*(void *)(v3 + 48) + v173) = v174;
        v179 = (void *)(*(void *)(v3 + 56) + v175);
        *v179 = v178;
        v179[1] = v177;
        swift_bridgeObjectRetain();
        v167 = v241;
        continue;
      }

      break;
    }

    v180 = v167 + 1;
    if (__OFADD__(v167, 1LL)) {
      goto LABEL_324;
    }
    if (v180 >= v239) {
      goto LABEL_314;
    }
    v181 = *(void *)&v240[8 * v180];
    v182 = v167 + 1;
    if (v181) {
      goto LABEL_242;
    }
    v182 = v167 + 2;
    v181 = *(void *)&v240[8 * v182];
    if (v181) {
      goto LABEL_242;
    }
    v182 = v167 + 3;
    v181 = *(void *)&v240[8 * v182];
    if (v181) {
      goto LABEL_242;
    }
    v182 = v167 + 4;
    v181 = *(void *)&v240[8 * v182];
    if (v181) {
      goto LABEL_242;
    }
    v182 = v167 + 5;
    v181 = *(void *)&v240[8 * v182];
    if (v181) {
      goto LABEL_242;
    }
    v182 = v167 + 6;
    v181 = *(void *)&v240[8 * v182];
    if (v181) {
      goto LABEL_242;
    }
    v182 = v167 + 7;
    v181 = *(void *)&v240[8 * v182];
    if (v181)
    {
LABEL_242:
      v170 = (v181 - 1) & v181;
      v241 = v182;
      v172 = __clz(__rbit64(v181)) + (v182 << 6);
      goto LABEL_219;
    }

    v183 = v167 + 8;
    v181 = *(void *)&v240[8 * v183];
    if (v181)
    {
      v182 = v167 + 8;
      goto LABEL_242;
    }

    while (1)
    {
      v182 = v183 + 1;
      if (__OFADD__(v183, 1LL)) {
        goto LABEL_331;
      }
      if (v182 >= v239) {
        break;
      }
      v181 = *(void *)&v240[8 * v182];
      ++v183;
      if (v181) {
        goto LABEL_242;
      }
    }

  swift_bridgeObjectRelease();
  return 0LL;
}

      int v9 = v20;
    }

  __break(1u);
LABEL_46:
  __break(1u);
  return result;
}

  __break(1u);
LABEL_46:
  __break(1u);
  return result;
}

      __break(1u);
LABEL_46:
      __break(1u);
    }
  }

      __break(1u);
LABEL_46:
      __break(1u);
    }
  }

  uint64_t v33 = v7;
LABEL_62:
  unint64_t v14 = String._standardizingPath.getter(v5, v33);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v14;
}

                                                  __break(1u);
LABEL_46:
                                                  __break(1u);
                                                  JUMPOUT(0x1830424F4LL);
                                                }

            v107 = v52;
            v108 = v23;
            v109 = v59;
            v110 = v60;
            v111 = v53;
            v112 = v54;
            v113 = v56;
            v114 = v50;
            v115 = v57;
            v116 = v58;
            v117 = v55;
            v118 = v51;
            v119 = v98;
            v120 = v36;
            v121 = v86;
            v122 = v90;
            v123 = v91;
            v124 = v45;
            v125 = v89;
            v126 = v88;
            v127 = v87;
            v128 = v96;
            v129 = v85;
            v130 = v84;
            outlined release of (Locale.Language?, Locale.Language?)((uint64_t)&v107);
            LOBYTE(v23) = 0;
            return v23 & 1;
          }

          if (v36 != 1)
          {
            v107 = v105;
            v108 = v23;
            v109 = v103;
            v110 = v102;
            v111 = v104;
            v112 = v92;
            v113 = v27;
            v67 = v27;
            v83 = v27;
            v114 = v100;
            v115 = v95;
            v116 = v94;
            v117 = v93;
            v118 = v99;
            v106[0] = v98;
            v106[1] = v36;
            v106[2] = v47;
            v106[3] = (uint64_t)v90;
            v106[4] = v91;
            v106[5] = v45;
            v106[6] = v89;
            v68 = v87;
            v106[7] = (uint64_t)v88;
            v106[8] = v87;
            v69 = v96;
            v70 = (uint64_t)v84;
            v71 = v85;
            v106[9] = v96;
            v106[10] = v85;
            v106[11] = (uint64_t)v84;
            v101 = v45;
            v72 = v92;
            outlined consume of Locale.Language?( v105,  v23,  v103,  v102,  v104,  v92,  v67,  (uint64_t)v100,  v95,  v94,  v93,  (uint64_t)v99,  (void (*)(void))outlined copy of Locale.LanguageCode?);
            v73 = v23;
            LOBYTE(v23) = specialized static Locale.Language.Components.== infix(_:_:)(&v107, v106);
            outlined consume of Locale.Language?( v98,  v36,  v86,  (uint64_t)v90,  v91,  v101,  v89,  (uint64_t)v88,  v68,  v69,  v71,  v70,  (void (*)(void))outlined consume of Locale.LanguageCode?);
            v74 = v105;
            outlined consume of Locale.LanguageCode?(v105, v73);
            v75 = v104;
            v76 = v83;
            outlined consume of Locale.LanguageCode?(v104, v72);
            v78 = v94;
            v77 = v95;
            v79 = v93;
            v80 = (uint64_t)v99;
            outlined consume of Locale.LanguageCode?(v95, v94);
            outlined consume of Locale.Language?( v74,  v97,  v103,  v102,  v75,  v72,  v76,  (uint64_t)v100,  v77,  v78,  v79,  v80,  (void (*)(void))outlined consume of Locale.LanguageCode?);
            return v23 & 1;
          }

          uint64_t v40 = static String._fromUTF8Repairing(_:)();
          BOOL v42 = v41;
          unint64_t v43 = specialized static JSONError.SourceLocation.sourceLocation(at:fullSource:)(v9, a1, a2);
          id v45 = v44;
          unint64_t v47 = v46;
          lazy protocol witness table accessor for type JSONError and conformance JSONError();
          swift_allocError();
          *(void *)uint64_t v21 = v40;
          *(void *)(v21 + _Block_object_dispose(va, 8) = v42;
          *(void *)(v21 + 16) = v43;
          *(void *)(v21 + 24) = v45;
          *(void *)(v21 + 32) = v47;
          *(void *)(v21 + 40) = 0LL;
          uint64_t v22 = 3;
          goto LABEL_46;
        }
      }

      __break(1u);
      goto LABEL_52;
    }

          if ((POSIXErrorCode.init(rawValue:)() & 0x100000000LL) != 0)
          {
            unint64_t v58 = 0LL;
            int v59 = 0xE000000000000000LL;
            _StringGuts.grow(_:)(22LL);
            swift_bridgeObjectRelease();
            unint64_t v58 = 0xD000000000000014LL;
            int v59 = 0x80000001839C9190LL;
            v57 = v38;
            v55._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
            String.append(_:)(v55);
            swift_bridgeObjectRelease();
            _assertionFailure(_:_:file:line:flags:)();
            __break(1u);
            JUMPOUT(0x1830E6A94LL);
          }

          static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSPOSIXErrorDomain");
          unint64_t v44 = (int)POSIXErrorCode.rawValue.getter();
          id v45 = objc_allocWithZone((Class)&OBJC_CLASS___NSError);
          unint64_t v46 = String._bridgeToObjectiveCImpl()();
          swift_bridgeObjectRelease();
          uint64_t v40 = objc_msgSend(v45, sel_initWithDomain_code_userInfo_, v46, v44, _NativeDictionary.bridged()());
          swift_unknownObjectRelease();
          swift_unknownObjectRelease();
          unint64_t v47 = objc_msgSend(v40, sel_domain);
          unint64_t v48 = static String._unconditionallyBridgeFromObjectiveC(_:)(v47);
          uint64_t v50 = v49;

          if (v48 == static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSPOSIXErrorDomain") && v50 == v51)
          {
            swift_bridgeObjectRelease_n();
            goto LABEL_50;
          }

          id v52 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if ((v52 & 1) != 0) {
            goto LABEL_50;
          }
          break;
      }

            v56 = (4 * *(_BYTE *)(v55 + 18) + 8) & 0x3C;
            v54 = ((-15LL << v56) - 1) & v54 | (v58 << v56);
            v57 = *(void *)(v55 + 24 + 24 * v58);
            swift_unknownObjectRetain();
            uint64_t result = swift_unknownObjectRelease();
            v55 = v57;
            if (!*(_BYTE *)(v57 + 18)) {
              goto LABEL_83;
            }
          }
        }

        swift_unknownObjectRetain_n();
        uint64_t result = swift_retain();
        v57 = v44;
LABEL_83:
        v69 = *(unsigned __int16 *)(v57 + 16);
        unint64_t v48 = v57;
        if (*(_WORD *)(v57 + 16))
        {
          v70 = v49 - 1;
          if (__OFSUB__(v49, 1LL))
          {
LABEL_189:
            __break(1u);
            goto LABEL_190;
          }

          if (__OFADD__(v70, 1LL))
          {
LABEL_190:
            __break(1u);
LABEL_191:
            __break(1u);
LABEL_192:
            __break(1u);
            goto LABEL_193;
          }

          id v45 = v53;
          if (v49 <= 0)
          {
            v69 = 0LL;
            unint64_t v46 = v144;
          }

          else
          {
            unint64_t v46 = v144;
            if ((_DWORD)v69 == 1) {
              goto LABEL_113;
            }
            uint64_t v60 = __OFSUB__(v70, 1LL);
            v70 = v49 - 2;
            if (v60)
            {
LABEL_193:
              __break(1u);
LABEL_194:
              __break(1u);
LABEL_195:
              __break(1u);
LABEL_196:
              __break(1u);
LABEL_197:
              __break(1u);
              goto LABEL_198;
            }

            if (__OFADD__(v70, 1LL)) {
              goto LABEL_194;
            }
            if (v49 - 1 < 1)
            {
              v69 = 1LL;
            }

            else
            {
              if ((_DWORD)v69 == 2) {
                goto LABEL_113;
              }
              uint64_t v60 = __OFSUB__(v70, 1LL);
              v70 = v49 - 3;
              if (v60) {
                goto LABEL_197;
              }
              if (__OFADD__(v70, 1LL))
              {
LABEL_198:
                __break(1u);
LABEL_199:
                __break(1u);
                goto LABEL_200;
              }

              if (v49 - 2 < 1)
              {
                v69 = 2LL;
              }

              else
              {
                if ((_DWORD)v69 == 3) {
                  goto LABEL_113;
                }
                uint64_t v60 = __OFSUB__(v70, 1LL);
                v70 = v49 - 4;
                if (v60) {
                  goto LABEL_199;
                }
                if (__OFADD__(v70, 1LL))
                {
LABEL_200:
                  __break(1u);
                  return result;
                }

                if (v49 - 3 < 1)
                {
                  v69 = 3LL;
                }

                else
                {
                  if ((_DWORD)v69 == 4) {
                    goto LABEL_113;
                  }
                  v71 = 0LL;
                  v72 = 4LL;
                  if (v69 > 4) {
                    v72 = v69;
                  }
                  v73 = v72 - 4;
                  if (v70 >= v69 - 5) {
                    v74 = v69 - 5;
                  }
                  else {
                    v74 = v49 - 4;
                  }
                  if (v74 >= v49 + 0x7FFFFFFFFFFFFFFCLL) {
                    v74 = v49 + 0x7FFFFFFFFFFFFFFCLL;
                  }
                  while (1)
                  {
                    if (v73 <= v74) {
                      goto LABEL_195;
                    }
                    if (v49 + 0x7FFFFFFFFFFFFFFCLL == v71) {
                      goto LABEL_196;
                    }
                    if (v70 == v71) {
                      break;
                    }
                    if (v69 - 4 == ++v71)
                    {
                      v70 -= v71;
                      goto LABEL_113;
                    }
                  }

                  v69 = v49;
                }
              }
            }
          }
        }

        else
        {
          v70 = v49;
          id v45 = v53;
          unint64_t v46 = v144;
LABEL_113:
          if (v70)
          {
LABEL_188:
            __break(1u);
            goto LABEL_189;
          }
        }

        swift_unknownObjectRelease();
        swift_unknownObjectRelease();
        uint64_t v50 = v54 & 0xFFFFFFFFFFFFF0FFLL | (v69 << 8);
        unint64_t v49 = v148;
      }

      else
      {
        swift_unknownObjectRetain_n();
        swift_retain();
        uint64_t v50 = specialized Rope._endPath.getter(v44);
        uint64_t result = swift_unknownObjectRelease();
        unint64_t v48 = 0LL;
        if (!v44)
        {
          unint64_t v47 = v46;
          goto LABEL_122;
        }
      }

      swift_unknownObjectRetain();
      unint64_t v47 = v46;
      v51 = specialized Rope._Node.distanceFromStart<A>(to:in:)(v46, v50, v48, v44, v138, v45);
      uint64_t result = swift_unknownObjectRelease_n();
      goto LABEL_123;
    }

    unint64_t v49 = v148;
    if (v147 != 2)
    {
      v51 = v145 >> 11;
      swift_unknownObjectRetain();
      uint64_t result = swift_retain();
      uint64_t v50 = (unint64_t)v141;
      goto LABEL_123;
    }

    uint64_t v50 = (unint64_t)v141;
    if (v44)
    {
      swift_retain();
      swift_unknownObjectRetain();
      uint64_t result = specialized Rope._Node.distanceFromStart<A>(to:in:)( countAndFlagsBits,  (unint64_t)v141,  v142,  v44,  v138,  v45);
      v51 = result;
      goto LABEL_123;
    }

    uint64_t result = swift_retain();
LABEL_122:
    v51 = 0LL;
LABEL_123:
    v160._countAndFlagsBits = v47;
    v160._object = (void *)v50;
    *(void *)&v161 = v48;
    uint64_t v60 = __OFADD__(v49, 1LL);
    v75 = v49 + 1;
    if (v60)
    {
LABEL_175:
      __break(1u);
      goto LABEL_176;
    }

    if (v47 != v46)
    {
LABEL_176:
      __break(1u);
LABEL_177:
      __break(1u);
LABEL_178:
      __break(1u);
LABEL_179:
      __break(1u);
      goto LABEL_180;
    }

    if (v48)
    {
      v76 = *(void *)(v48 + 24 * ((v50 >> ((4 * *(_BYTE *)(v48 + 18) + 8) & 0x3C)) & 0xF) + 24);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v77 = v138;
    }

    else
    {
      swift_unknownObjectRetain();
      v78 = v50;
      v77 = v138;
      v76 = specialized Rope._Node.subscript.getter(v78, v44);
      swift_unknownObjectRelease();
    }

    swift_bridgeObjectRelease();
    uint64_t result = swift_bridgeObjectRelease();
    uint64_t v60 = __OFADD__(v51, v76);
    v79 = v51 + v76;
    if (v60) {
      goto LABEL_177;
    }
    swift_unknownObjectRetain();
    specialized Rope.formIndex(after:)(&v160, v44, v77, v137, v46);
    swift_unknownObjectRelease_n();
    countAndFlagsBits = v160._countAndFlagsBits;
    v141 = v160._object;
    v80 = v161;
    if (v147 != 2)
    {
      v86 = v132[1];
      v192 = *v132;
      v193 = v86;
      v194 = v132[2];
      BigString.utf8.getter();
      uint64_t result = v145;
      if (!__OFSUB__(v79, v145 >> 11))
      {
        v82 = BigString.UTF8View.index(_:offsetBy:)();
        v139 = v88;
        v140 = v87;
        v147 = v89;
        outlined release of Locale((uint64_t)v177);
        swift_release();
        goto LABEL_133;
      }

      goto LABEL_181;
    }

    v81 = v132[1];
    v195 = *v132;
    v196 = v81;
    v197 = v132[2];
    BigString.utf8.getter();
    BigString.startIndex.getter();
    v82 = BigString.UTF8View.index(_:offsetBy:)();
    v139 = v84;
    v140 = v83;
    v147 = v85;
    outlined release of Locale((uint64_t)v178);
    swift_release();
LABEL_133:
    v142 = v80;
    v146 = v82;
    v149 = v75;
    v90 = a1[2];
    v189 = a1[1];
    v190 = v90;
    v191 = a1[3];
    BigString.unicodeScalars.getter();
    BigString.UnicodeScalarView.subscript.getter();
    outlined release of Locale((uint64_t)v179);
    v91 = MEMORY[0x186E1B6B8](v180);
    v93 = v92;
    v94 = v174 & 0xFFFFFFFFFFFFLL;
    if ((v175 & 0x2000000000000000LL) != 0) {
      v94 = HIBYTE(v175) & 0xF;
    }
    if (v94)
    {
      v95._countAndFlagsBits = 10LL;
      v95._object = (void *)0xE100000000000000LL;
      String.append(_:)(v95);
    }

    v158._countAndFlagsBits = v91;
    v158._object = v93;
    v96._countAndFlagsBits = 32LL;
    v96._object = (void *)0xE100000000000000LL;
    String.append(_:)(v96);
    v157._countAndFlagsBits = 0LL;
    v157._object = (void *)0xE000000000000000LL;
    v97 = v28 + 64;
    v98 = 1LL << *(_BYTE *)(v28 + 32);
    if (v98 < 64) {
      v99 = ~(-1LL << v98);
    }
    else {
      v99 = -1LL;
    }
    v100 = v99 & *(void *)(v28 + 64);
    v101 = (unint64_t)(v98 + 63) >> 6;
    swift_bridgeObjectRetain_n();
    uint64_t result = swift_bridgeObjectRetain();
    v102 = 0LL;
    while (1)
    {
      if (v100)
      {
        v103 = __clz(__rbit64(v100));
        v100 &= v100 - 1;
        v104 = v103 | (v102 << 6);
        goto LABEL_142;
      }

      v113 = v102 + 1;
      if (__OFADD__(v102, 1LL))
      {
        __break(1u);
        goto LABEL_167;
      }

      if (v113 >= v101) {
        break;
      }
      v114 = *(void *)(v97 + 8 * v113);
      ++v102;
      if (!v114)
      {
        v102 = v113 + 1;
        if (v113 + 1 >= v101) {
          break;
        }
        v114 = *(void *)(v97 + 8 * v102);
        if (!v114)
        {
          v102 = v113 + 2;
          if (v113 + 2 >= v101) {
            break;
          }
          v114 = *(void *)(v97 + 8 * v102);
          if (!v114)
          {
            v102 = v113 + 3;
            if (v113 + 3 >= v101) {
              break;
            }
            v114 = *(void *)(v97 + 8 * v102);
            if (!v114)
            {
              v102 = v113 + 4;
              if (v113 + 4 >= v101) {
                break;
              }
              v114 = *(void *)(v97 + 8 * v102);
              if (!v114)
              {
                v102 = v113 + 5;
                if (v113 + 5 >= v101) {
                  break;
                }
                v114 = *(void *)(v97 + 8 * v102);
                if (!v114)
                {
                  v115 = v113 + 6;
                  if (v115 >= v101) {
                    break;
                  }
                  v114 = *(void *)(v97 + 8 * v115);
                  if (!v114)
                  {
                    while (1)
                    {
                      v102 = v115 + 1;
                      if (__OFADD__(v115, 1LL)) {
                        goto LABEL_185;
                      }
                      if (v102 >= v101) {
                        goto LABEL_4;
                      }
                      v114 = *(void *)(v97 + 8 * v102);
                      ++v115;
                      if (v114) {
                        goto LABEL_163;
                      }
                    }
                  }

                  v102 = v115;
                }
              }
            }
          }
        }
      }

    swift_unknownObjectRetain();
    __dst[0] = v31;
    *(double *)v103 = v13;
    v86(__src, __dst, v103, ObjectType, v7);
    if ((v31 & 0x4000) != 0)
    {
      __src[0] = v5;
      __src[1] = v7;
      swift_unknownObjectRetain();
      swift_unknownObjectRelease();
      if (__src[2])
      {
        __dst[0] = __src[2];
        __dst[1] = __src[3];
        swift_unknownObjectRetain();
        Calendar.timeZone.setter(__dst);
      }
    }

    swift_release();
    memcpy(__dst, __src, 0x11AuLL);
    outlined release of DateComponents((uint64_t)__dst);
    if ((__dst[9] & 1) != 0) {
      goto LABEL_129;
    }
    if (__dst[8] == v89)
    {
      swift_unknownObjectRelease();
      CFTypeRef v41 = v8;
    }

    else
    {
      v102[0] = 0uLL;
      v101[0] = 0LL;
      v101[1] = 0LL;
      DateComponents.init(calendar:timeZone:era:year:month:day:hour:minute:second:nanosecond:weekday:weekdayOrdinal:quarter:weekOfMonth:weekOfYear:yearForWeekOfYear:)( v102,  v101,  0LL,  1,  0LL,  1,  0LL,  1,  (uint64_t)v103,  0LL,  1,  0LL,  1,  0LL,  1,  0LL,  1,  0LL,  1,  0LL,  1,  0LL,  1,  0LL,  1,  0LL,  1,  0LL,  1,  0LL,  1);
      *(void *)&v102[2] = *(void *)&v103[2];
      BYTE8(v102[2]) = BYTE8(v103[2]);
      *(void *)&v102[3] = *(void *)&v103[3];
      BYTE8(v102[3]) = BYTE8(v103[3]);
      *(void *)&v102[5] = *(void *)&v103[5];
      BYTE8(v102[5]) = BYTE8(v103[5]);
      *(void *)&v102[6] = *(void *)&v103[6];
      BYTE8(v102[6]) = BYTE8(v103[6]);
      *(void *)&v102[7] = *(void *)&v103[7];
      BYTE8(v102[7]) = BYTE8(v103[7]);
      *(void *)&v102[8] = *(void *)&v103[8];
      BYTE8(v102[8]) = BYTE8(v103[8]);
      *(void *)&v102[9] = *(void *)&v103[9];
      BYTE8(v102[9]) = BYTE8(v103[9]);
      *(void *)&v102[10] = *(void *)&v103[10];
      BYTE8(v102[10]) = BYTE8(v103[10]);
      *(void *)&v102[11] = *(void *)&v103[11];
      BYTE8(v102[11]) = BYTE8(v103[11]);
      *(void *)&v102[12] = *(void *)&v103[12];
      BYTE8(v102[12]) = BYTE8(v103[12]);
      *(void *)&v102[13] = *(void *)&v103[13];
      BYTE8(v102[13]) = BYTE8(v103[13]);
      *(void *)&v102[14] = *(void *)&v103[14];
      BYTE8(v102[14]) = BYTE8(v103[14]);
      *(void *)&v102[15] = *(void *)&v103[15];
      BYTE8(v102[15]) = BYTE8(v103[15]);
      BYTE8(v102[16]) = BYTE8(v103[16]);
      *(void *)&v102[16] = *(void *)&v103[16];
      *(void *)&v102[17] = *(void *)&v103[17];
      WORD4(v102[17]) = WORD4(v103[17]);
      *(void *)&v103[4] = v89;
      BYTE8(v103[4]) = 0;
      v102[0] = v103[0];
      v102[1] = v103[1];
      *(void *)&v102[4] = v89;
      BYTE8(v102[4]) = 0;
      memcpy(v101, v102, 0x11AuLL);
      *(void *)&v99 = v5;
      *((void *)&v99 + 1) = v7;
      outlined retain of DateComponents((uint64_t)v102);
      BOOL v42 = 101LL;
      unint64_t v43 = *(void *)&v8;
      while (1)
      {
        *(void *)&v93 = v5;
        *((void *)&v93 + 1) = v7;
        v98 = *(id *)&v8;
        memcpy(v101, v102, 0x11AuLL);
        v97 = 0;
        v96 = 0;
        v95 = *(double *)&v43;
        v91 = 0LL;
        LOBYTE(v92) = 1;
        Calendar._enumerateDatesStep(startingAfter:matching:matchingPolicy:repeatedTimePolicy:direction:inSearchingDate:previouslyReturnedMatchDate:)( (double *)&v98,  v101,  (unsigned __int8 *)&v97 + 1,  (unsigned __int8 *)&v97,  &v96,  &v95,  (uint64_t)&v91,  (uint64_t)&v99);
        if (BYTE8(v99) != 2) {
          break;
        }
        unint64_t v43 = v100;
        if (!--v42)
        {
          *(double *)&v93 = v8;
          *(void *)&v99 = v5;
          *((void *)&v99 + 1) = v7;
          memcpy(v101, v102, 0x11AuLL);
          LOBYTE(v91) = 0;
          LOBYTE(v9_Block_object_dispose(va, 8) = 0;
          LOBYTE(v95) = 0;
          _handleCalendarResultNotFound(date:calendar:comps:direction:matchingPolicy:repeatedTimePolicy:)( (uint64_t *)&v93,  (uint64_t *)&v99,  v101,  (unsigned __int8 *)&v91,  (unsigned __int8 *)&v98,  (unsigned __int8 *)&v95);
          goto LABEL_127;
        }
      }

      CFTypeRef v41 = *(double *)&v99;
      outlined release of DateComponents((uint64_t)v102);
      outlined release of DateComponents((uint64_t)v102);
      swift_unknownObjectRelease();
    }

    LOBYTE(v102[0]) = 3;
    LOBYTE(v101[0]) = 2;
    if (v41 <= 1.59271755e13) {
      unint64_t v44 = v41;
    }
    else {
      unint64_t v44 = 1.59271755e13;
    }
    *(void *)&v103[0] = fmax(v44, -2.11845067e11);
    id v45 = *(void (**)(void, void, void, void, void))(v7 + 144);
    swift_unknownObjectRetain();
    v45(v102, v101, v103, ObjectType, v7);
    unint64_t v47 = v46;
    unint64_t v49 = v48;
    swift_unknownObjectRelease();
    if ((v49 & 1) != 0)
    {
LABEL_130:
      __break(1u);
      goto LABEL_131;
    }

    uint64_t v50 = v47 - 1;
    if (__OFSUB__(v47, 1LL)) {
      goto LABEL_120;
    }
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *(void *)&v103[0] = v90;
    int v9 = v90;
    uint64_t v53 = specialized __RawDictionaryStorage.find<A>(_:)(v89);
    v54 = v90[2];
    v55 = (v52 & 1) == 0;
    v56 = v54 + v55;
    if (__OFADD__(v54, v55))
    {
LABEL_121:
      __break(1u);
      goto LABEL_122;
    }

    v57 = v52;
    if (v90[3] < v56)
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)( v56,  isUniquelyReferenced_nonNull_native);
      int v9 = *(void **)&v103[0];
      unint64_t v58 = specialized __RawDictionaryStorage.find<A>(_:)(v89);
      if ((v57 & 1) != (v59 & 1)) {
        goto LABEL_132;
      }
      uint64_t v53 = v58;
      if ((v57 & 1) == 0)
      {
LABEL_68:
        v9[(v53 >> 6) + 8] |= 1LL << v53;
        uint64_t v60 = 8 * v53;
        *(void *)(v9[6] + v60) = v89;
        *(void *)(v9[7] + v60) = v50;
        v61 = v9[2];
        uint64_t v28 = __OFADD__(v61, 1LL);
        v62 = v61 + 1;
        if (v28) {
          goto LABEL_124;
        }
        size_t v9[2] = v62;
LABEL_73:
        swift_bridgeObjectRelease();
        if (v87 != v85)
        {
          if (v87 < v84) {
            goto LABEL_119;
          }
          unint64_t v14 = v89 + 1;
          if (v87 >= v85) {
            goto LABEL_119;
          }
          continue;
        }

        a1 = v83;
LABEL_116:
        *a1 = v9;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        return (uint64_t)v9;
      }

        unsigned int v39 = (v53 - 1) & v53;
      }
    }

LABEL_94:
    uint64_t v2 = v235;
  }

  v91 = __CFLocalePrefsCopyAppleICUTimeFormatStrings(v2);
  if (v91)
  {
    v92 = v91;

    v1[10] = v92;
  }

  v93 = __CFLocalePrefsCopyAppleICUNumberFormatStrings(v2);
  if (v93)
  {
    v94 = v93;

    v1[11] = v94;
  }

  v95 = (void *)__CFLocalePrefsCopyAppleICUNumberSymbols(v2);
  if (!v95) {
    goto LABEL_172;
  }
  v96 = v95;
  v97 = (void *)v1[12];
  v98 = v95;

  v1[12] = v96;
  v238[0] = 0LL;
  v99 = v98;
  specialized static Dictionary._conditionallyBridgeFromObjectiveC(_:result:)(v99, v238);

  v100 = v238[0];
  if (!v238[0])
  {

    goto LABEL_171;
  }

  v229 = v99;
  v101 = 0LL;
  v102 = v238[0] + 64LL;
  v103 = 1LL << *(_BYTE *)(v238[0] + 32LL);
  if (v103 < 64) {
    v104 = ~(-1LL << v103);
  }
  else {
    v104 = -1LL;
  }
  v105 = v104 & *(void *)(v238[0] + 64LL);
  v106 = (unint64_t)(v103 + 63) >> 6;
  v232 = MEMORY[0x18961AFF0];
  if (!v105) {
    goto LABEL_108;
  }
LABEL_105:
  v107 = __clz(__rbit64(v105));
  v105 &= v105 - 1;
  for (j = v107 | (v101 << 6); ; j = __clz(__rbit64(v118)) + (v101 << 6))
  {
    v109 = 16 * j;
    v110 = (uint64_t *)(*(void *)(v100 + 48) + v109);
    v111 = *v110;
    v112 = v110[1];
    v113 = (uint64_t *)(*(void *)(v100 + 56) + v109);
    v115 = *v113;
    v114 = v113[1];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v116 = specialized FixedWidthInteger.init(_:)(v111, v112);
    if ((v116 & 0x100000000LL) != 0)
    {
      swift_bridgeObjectRelease();
      if (v105) {
        goto LABEL_105;
      }
      goto LABEL_108;
    }

    v120 = v116;
    v121 = swift_isUniquelyReferenced_nonNull_native();
    v238[0] = v232;
    v123 = specialized __RawDictionaryStorage.find<A>(_:)(v120);
    v124 = *(void *)(v232 + 16);
    v125 = (v122 & 1) == 0;
    v126 = v124 + v125;
    if (__OFADD__(v124, v125)) {
      goto LABEL_280;
    }
    if (*(void *)(v232 + 24) >= v126)
    {
      if ((v121 & 1) != 0)
      {
        v127 = v232;
        if ((v122 & 1) != 0) {
          goto LABEL_129;
        }
      }

      else
      {
        v218 = v123;
        v227 = v122;
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<UInt32, String>);
        v131 = static _DictionaryStorage.copy(original:)();
        v127 = v131;
        if (*(void *)(v232 + 16))
        {
          v132 = (char *)(v131 + 64);
          v222 = (char *)(v232 + 64);
          v133 = (unint64_t)((1LL << *(_BYTE *)(v127 + 32)) + 63) >> 6;
          if (v127 != v232 || v132 >= &v222[8 * v133]) {
            memmove(v132, v222, 8 * v133);
          }
          __srca = 0LL;
          *(void *)(v127 + 16) = *(void *)(v232 + 16);
          v134 = 1LL << *(_BYTE *)(v232 + 32);
          if (v134 < 64) {
            v135 = ~(-1LL << v134);
          }
          else {
            v135 = -1LL;
          }
          v136 = v135 & *(void *)(v232 + 64);
          v220 = (unint64_t)(v134 + 63) >> 6;
          while (1)
          {
            if (v136)
            {
              v137 = __clz(__rbit64(v136));
              v136 &= v136 - 1;
              v138 = v137 | (__srca << 6);
            }

            else
            {
              v146 = __srca + 1;
              if (__OFADD__(__srca, 1LL)) {
                goto LABEL_284;
              }
              if (v146 >= v220) {
                break;
              }
              v147 = *(void *)&v222[8 * v146];
              v148 = __srca + 1;
              if (!v147)
              {
                v148 = __srca + 2;
                if (__srca + 2 >= v220) {
                  break;
                }
                v147 = *(void *)&v222[8 * v148];
                if (!v147)
                {
                  v148 = __srca + 3;
                  if (__srca + 3 >= v220) {
                    break;
                  }
                  v147 = *(void *)&v222[8 * v148];
                  if (!v147)
                  {
                    v148 = __srca + 4;
                    if (__srca + 4 >= v220) {
                      break;
                    }
                    v147 = *(void *)&v222[8 * v148];
                    if (!v147)
                    {
                      v148 = __srca + 5;
                      if (__srca + 5 >= v220) {
                        break;
                      }
                      v147 = *(void *)&v222[8 * v148];
                      if (!v147)
                      {
                        v148 = __srca + 6;
                        if (__srca + 6 >= v220) {
                          break;
                        }
                        v147 = *(void *)&v222[8 * v148];
                        if (!v147)
                        {
                          v148 = __srca + 7;
                          if (__srca + 7 >= v220) {
                            break;
                          }
                          v147 = *(void *)&v222[8 * v148];
                          if (!v147)
                          {
                            v149 = (char *)(__srca + 8);
                            if (__srca + 8 >= v220) {
                              break;
                            }
                            v147 = *(void *)&v222[8 * (void)v149];
                            if (!v147)
                            {
                              while (1)
                              {
                                v148 = (int64_t)(v149 + 1);
                                if (__OFADD__(v149, 1LL)) {
                                  break;
                                }
                                if (v148 >= v220) {
                                  goto LABEL_163;
                                }
                                v147 = *(void *)&v222[8 * v148];
                                ++v149;
                                if (v147) {
                                  goto LABEL_162;
                                }
                              }

            unint64_t v48 = (4 * *(_BYTE *)(v47 + 18) + 8) & 0x3C;
            unint64_t v46 = ((-15LL << v48) - 1) & v46 | (v50 << v48);
            unint64_t v49 = *(void *)(v47 + 24 + 24 * v50);
            swift_unknownObjectRetain();
            uint64_t result = swift_unknownObjectRelease();
            unint64_t v47 = v49;
            if (!*(_BYTE *)(v49 + 18)) {
              goto LABEL_77;
            }
          }
        }

        swift_unknownObjectRetain_n();
        uint64_t result = swift_retain();
        unint64_t v49 = v40;
LABEL_77:
        int v59 = *(unsigned __int16 *)(v49 + 16);
        uint64_t v38 = v49;
        if (*(_WORD *)(v49 + 16))
        {
          uint64_t v60 = v45 - 1;
          if (__OFSUB__(v45, 1LL))
          {
LABEL_175:
            __break(1u);
LABEL_176:
            __break(1u);
LABEL_177:
            __break(1u);
LABEL_178:
            __break(1u);
LABEL_179:
            __break(1u);
            goto LABEL_180;
          }

          if (__OFADD__(v60, 1LL)) {
            goto LABEL_176;
          }
          if (v45 <= 0)
          {
            int v59 = 0LL;
          }

          else
          {
            if ((_DWORD)v59 == 1) {
              goto LABEL_103;
            }
            id v52 = __OFSUB__(v60, 1LL);
            uint64_t v60 = v45 - 2;
            if (v52) {
              goto LABEL_179;
            }
            if (__OFADD__(v60, 1LL))
            {
LABEL_180:
              __break(1u);
LABEL_181:
              __break(1u);
              goto LABEL_182;
            }

            if (v45 - 1 < 1)
            {
              int v59 = 1LL;
            }

            else
            {
              if ((_DWORD)v59 == 2) {
                goto LABEL_103;
              }
              id v52 = __OFSUB__(v60, 1LL);
              uint64_t v60 = v45 - 3;
              if (v52) {
                goto LABEL_181;
              }
              if (__OFADD__(v60, 1LL))
              {
LABEL_182:
                __break(1u);
                return result;
              }

              if (v45 - 2 < 1)
              {
                int v59 = 2LL;
              }

              else
              {
                if ((_DWORD)v59 == 3) {
                  goto LABEL_103;
                }
                v61 = 0LL;
                v62 = 3LL;
                if (v59 > 3) {
                  v62 = *(unsigned __int16 *)(v49 + 16);
                }
                v63 = v62 - 3;
                if (v60 >= v59 - 4) {
                  v64 = v59 - 4;
                }
                else {
                  v64 = v45 - 3;
                }
                if (v64 >= v45 + 0x7FFFFFFFFFFFFFFDLL) {
                  v64 = v45 + 0x7FFFFFFFFFFFFFFDLL;
                }
                while (1)
                {
                  if (v63 <= v64) {
                    goto LABEL_177;
                  }
                  if (v45 + 0x7FFFFFFFFFFFFFFDLL == v61) {
                    goto LABEL_178;
                  }
                  if (v60 == v61) {
                    break;
                  }
                  if (v59 - 3 == ++v61)
                  {
                    v60 -= v61;
                    goto LABEL_103;
                  }
                }

                int v59 = v45;
              }
            }
          }
        }

        else
        {
          uint64_t v60 = v45;
LABEL_103:
          if (v60)
          {
LABEL_174:
            __break(1u);
            goto LABEL_175;
          }
        }

        swift_unknownObjectRelease();
        swift_unknownObjectRelease();
        BOOL v42 = v46 & 0xFFFFFFFFFFFFF0FFLL | (v59 << 8);
        unsigned int v39 = v135;
      }

      else
      {
        swift_unknownObjectRetain_n();
        swift_retain();
        unsigned int v39 = v135;
        BOOL v42 = specialized Rope._endPath.getter(v40);
        uint64_t result = swift_unknownObjectRelease();
        uint64_t v38 = 0LL;
        if (!v40)
        {
          unint64_t v43 = 0LL;
          countAndFlagsBits = v136;
          goto LABEL_111;
        }
      }

      swift_unknownObjectRetain();
      countAndFlagsBits = v136;
      unint64_t v43 = specialized Rope._Node.distanceFromStart<A>(to:in:)(v136, v42, v38, v40, v39, v128);
      uint64_t result = swift_unknownObjectRelease_n();
      goto LABEL_111;
    }

    if (v137 == 2)
    {
      BOOL v42 = (unint64_t)v134._object;
      if (v40)
      {
        swift_retain();
        swift_unknownObjectRetain();
        uint64_t result = specialized Rope._Node.distanceFromStart<A>(to:in:)( v134._countAndFlagsBits,  (unint64_t)v134._object,  v133,  v40,  v39,  v128);
        unint64_t v43 = result;
      }

      else
      {
        uint64_t result = swift_retain();
        unint64_t v43 = 0LL;
      }
    }

    else
    {
      unint64_t v43 = v131 >> 11;
      swift_unknownObjectRetain();
      uint64_t result = swift_retain();
      BOOL v42 = (unint64_t)v134._object;
    }

  v95 = type metadata accessor for NSMorphologyPronoun(0LL, &lazy cache variable for type metadata for NSExpression);
  v122 = v95;
  *(void *)&v121 = v62;
  v96 = String._bridgeToObjectiveCImpl()();
  v97 = v62;
  v98 = objc_msgSend(v53, sel__newKeyPathExpressionForString_, v96);
  swift_unknownObjectRelease();
  if (v98)
  {
    *((void *)&v119 + 1) = v95;
    *(void *)&v118 = v98;
  }

  else
  {
    v118 = 0u;
    v119 = 0u;
  }

  v99 = objc_allocWithZone((Class)&OBJC_CLASS___NSKeyPathExpression);
  uint64_t result = (uint64_t)@nonobjc NSKeyPathExpression.init(operand:andKeyPath:)(&v121, &v118);
  if (result)
  {
    v94 = (id)result;
    goto LABEL_50;
  }

        Hasher._combine(_:)(1u);
        swift_bridgeObjectRetain();
        String.hash(into:)();
        swift_bridgeObjectRelease();
        if (!v105)
        {
LABEL_29:
          Hasher._combine(_:)(0);
          uint64_t v32 = v106;
          if (!v106) {
            goto LABEL_30;
          }
          goto LABEL_47;
        }

        Hasher._combine(_:)(1u);
        swift_bridgeObjectRetain();
        String.hash(into:)();
        swift_bridgeObjectRelease();
        if (!v112)
        {
LABEL_29:
          Hasher._combine(_:)(0);
          uint64_t v28 = v113;
          if (!v113) {
            goto LABEL_30;
          }
          goto LABEL_47;
        }

  __break(1u);
LABEL_46:
  swift_release();
  swift_bridgeObjectRelease();
LABEL_48:
  uint64_t result = swift_bridgeObjectRelease();
  __break(1u);
LABEL_49:
  __break(1u);
  __break(1u);
  __break(1u);
  __break(1u);
  __break(1u);
  return result;
}

          swift_bridgeObjectRelease_n();
          return 0LL;
        }

        swift_bridgeObjectRetain();
        v78 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)( v82,  v84,  v86,  (unint64_t)v104,  8u,  1);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease_n();
LABEL_44:
        swift_bridgeObjectRelease_n();
        if (v78) {
          goto LABEL_39;
        }
        goto LABEL_45;
      }

      v105 = v101;
      v106 = v102;
      v107 = v103;
      v108 = v98;
      v103 = v55;
      StringProtocol._ephemeralString.getter();
      v57 = (void *)String._bridgeToObjectiveCImpl()();
      swift_bridgeObjectRelease();
      unint64_t v58 = objc_msgSend(v57, sel_length);
      swift_unknownObjectRelease();
      uint64_t v53 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)( v103,  (uint64_t)v58,  2u,  0);
    }

    int v59 = v53;
    swift_bridgeObjectRelease();
    if ((v59 & 1) == 0)
    {
LABEL_33:
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      return 0LL;
    }

    goto LABEL_49;
  }

    swift_release();
    return v18;
  }

  return result;
}

    uint64_t v35 = (v45 - 1) & v45;
    id v52 = v46;
    unint64_t v37 = __clz(__rbit64(v45)) + (v46 << 6);
LABEL_22:
    uint64_t v38 = 16 * v37;
    unsigned int v39 = (uint64_t *)(*(void *)(v54 + 48) + v38);
    uint64_t v40 = *v39;
    CFTypeRef v41 = v39[1];
    BOOL v42 = (void *)(*(void *)(v25 + 48) + v38);
    unint64_t v43 = *(_OWORD *)(*(void *)(v54 + 56) + v38);
    *BOOL v42 = v40;
    v42[1] = v41;
    *(_OWORD *)(*(void *)(v25 + 56) + v3_Block_object_dispose(va, 8) = v43;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v32 = v52;
  }

  unint64_t v47 = v32 + 8;
  if (v32 + 8 >= v51) {
    goto LABEL_46;
  }
  id v45 = *(void *)(v50 + 8 * v47);
  if (v45)
  {
    unint64_t v46 = v32 + 8;
    goto LABEL_45;
  }

  while (1)
  {
    unint64_t v46 = v47 + 1;
    if (__OFADD__(v47, 1LL)) {
      break;
    }
    if (v46 >= v51) {
      goto LABEL_46;
    }
    id v45 = *(void *)(v50 + 8 * v46);
    ++v47;
    if (v45) {
      goto LABEL_45;
    }
  }

    uint64_t v35 = (v45 - 1) & v45;
    id v52 = v46;
    unint64_t v37 = __clz(__rbit64(v45)) + (v46 << 6);
LABEL_22:
    uint64_t v38 = 16 * v37;
    unsigned int v39 = (uint64_t *)(*(void *)(v54 + 48) + v38);
    uint64_t v40 = *v39;
    CFTypeRef v41 = v39[1];
    BOOL v42 = (void *)(*(void *)(v25 + 48) + v38);
    unint64_t v43 = *(_OWORD *)(*(void *)(v54 + 56) + v38);
    *BOOL v42 = v40;
    v42[1] = v41;
    *(_OWORD *)(*(void *)(v25 + 56) + v3_Block_object_dispose(va, 8) = v43;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v32 = v52;
  }

  unint64_t v47 = v32 + 8;
  if (v32 + 8 >= v51) {
    goto LABEL_46;
  }
  id v45 = *(void *)(v50 + 8 * v47);
  if (v45)
  {
    unint64_t v46 = v32 + 8;
    goto LABEL_45;
  }

  while (1)
  {
    unint64_t v46 = v47 + 1;
    if (__OFADD__(v47, 1LL)) {
      break;
    }
    if (v46 >= v51) {
      goto LABEL_46;
    }
    id v45 = *(void *)(v50 + 8 * v46);
    ++v47;
    if (v45) {
      goto LABEL_45;
    }
  }

    uint64_t v35 = (v45 - 1) & v45;
    id v52 = v46;
    unint64_t v37 = __clz(__rbit64(v45)) + (v46 << 6);
LABEL_22:
    uint64_t v38 = 16 * v37;
    unsigned int v39 = (uint64_t *)(*(void *)(v54 + 48) + v38);
    uint64_t v40 = *v39;
    CFTypeRef v41 = v39[1];
    BOOL v42 = (void *)(*(void *)(v25 + 48) + v38);
    unint64_t v43 = *(_OWORD *)(*(void *)(v54 + 56) + v38);
    *BOOL v42 = v40;
    v42[1] = v41;
    *(_OWORD *)(*(void *)(v25 + 56) + v3_Block_object_dispose(va, 8) = v43;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v32 = v52;
  }

  unint64_t v47 = v32 + 8;
  if (v32 + 8 >= v51) {
    goto LABEL_46;
  }
  id v45 = *(void *)(v50 + 8 * v47);
  if (v45)
  {
    unint64_t v46 = v32 + 8;
    goto LABEL_45;
  }

  while (1)
  {
    unint64_t v46 = v47 + 1;
    if (__OFADD__(v47, 1LL)) {
      break;
    }
    if (v46 >= v51) {
      goto LABEL_46;
    }
    id v45 = *(void *)(v50 + 8 * v46);
    ++v47;
    if (v45) {
      goto LABEL_45;
    }
  }

    unint64_t v34 = (v44 - 1) & v44;
    v51 = v45;
    uint64_t v36 = __clz(__rbit64(v44)) + (v45 << 6);
LABEL_22:
    unint64_t v37 = 16 * v36;
    uint64_t v38 = (uint64_t *)(*(void *)(v53 + 48) + v37);
    unsigned int v39 = *v38;
    uint64_t v40 = v38[1];
    CFTypeRef v41 = (void *)(*(void *)(v24 + 48) + v37);
    BOOL v42 = *(_OWORD *)(*(void *)(v53 + 56) + v37);
    *CFTypeRef v41 = v39;
    v41[1] = v40;
    *(_OWORD *)(*(void *)(v24 + 56) + v37) = v42;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    id v31 = v51;
  }

  unint64_t v46 = v31 + 8;
  if (v31 + 8 >= v50) {
    goto LABEL_46;
  }
  unint64_t v44 = *(void *)(v49 + 8 * v46);
  if (v44)
  {
    id v45 = v31 + 8;
    goto LABEL_45;
  }

  while (1)
  {
    id v45 = v46 + 1;
    if (__OFADD__(v46, 1LL)) {
      break;
    }
    if (v45 >= v50) {
      goto LABEL_46;
    }
    unint64_t v44 = *(void *)(v49 + 8 * v45);
    ++v46;
    if (v44) {
      goto LABEL_45;
    }
  }

    uint64_t v35 = (v45 - 1) & v45;
    id v52 = v46;
    unint64_t v37 = __clz(__rbit64(v45)) + (v46 << 6);
LABEL_22:
    uint64_t v38 = 16 * v37;
    unsigned int v39 = (uint64_t *)(*(void *)(v54 + 48) + v38);
    uint64_t v40 = *v39;
    CFTypeRef v41 = v39[1];
    BOOL v42 = (void *)(*(void *)(v25 + 48) + v38);
    unint64_t v43 = *(_OWORD *)(*(void *)(v54 + 56) + v38);
    *BOOL v42 = v40;
    v42[1] = v41;
    *(_OWORD *)(*(void *)(v25 + 56) + v3_Block_object_dispose(va, 8) = v43;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v32 = v52;
  }

  unint64_t v47 = v32 + 8;
  if (v32 + 8 >= v51) {
    goto LABEL_46;
  }
  id v45 = *(void *)(v50 + 8 * v47);
  if (v45)
  {
    unint64_t v46 = v32 + 8;
    goto LABEL_45;
  }

  while (1)
  {
    unint64_t v46 = v47 + 1;
    if (__OFADD__(v47, 1LL)) {
      break;
    }
    if (v46 >= v51) {
      goto LABEL_46;
    }
    id v45 = *(void *)(v50 + 8 * v46);
    ++v47;
    if (v45) {
      goto LABEL_45;
    }
  }

    unint64_t v34 = (v44 - 1) & v44;
    v51 = v45;
    uint64_t v36 = __clz(__rbit64(v44)) + (v45 << 6);
LABEL_22:
    unint64_t v37 = 16 * v36;
    uint64_t v38 = (uint64_t *)(*(void *)(v53 + 48) + v37);
    unsigned int v39 = *v38;
    uint64_t v40 = v38[1];
    CFTypeRef v41 = (void *)(*(void *)(v24 + 48) + v37);
    BOOL v42 = *(_OWORD *)(*(void *)(v53 + 56) + v37);
    *CFTypeRef v41 = v39;
    v41[1] = v40;
    *(_OWORD *)(*(void *)(v24 + 56) + v37) = v42;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    id v31 = v51;
  }

  unint64_t v46 = v31 + 8;
  if (v31 + 8 >= v50) {
    goto LABEL_46;
  }
  unint64_t v44 = *(void *)(v49 + 8 * v46);
  if (v44)
  {
    id v45 = v31 + 8;
    goto LABEL_45;
  }

  while (1)
  {
    id v45 = v46 + 1;
    if (__OFADD__(v46, 1LL)) {
      break;
    }
    if (v45 >= v50) {
      goto LABEL_46;
    }
    unint64_t v44 = *(void *)(v49 + 8 * v45);
    ++v46;
    if (v44) {
      goto LABEL_45;
    }
  }

    unint64_t v34 = (v44 - 1) & v44;
    v51 = v45;
    uint64_t v36 = __clz(__rbit64(v44)) + (v45 << 6);
LABEL_22:
    unint64_t v37 = 16 * v36;
    uint64_t v38 = (uint64_t *)(*(void *)(v53 + 48) + v37);
    unsigned int v39 = *v38;
    uint64_t v40 = v38[1];
    CFTypeRef v41 = (void *)(*(void *)(v24 + 48) + v37);
    BOOL v42 = *(_OWORD *)(*(void *)(v53 + 56) + v37);
    *CFTypeRef v41 = v39;
    v41[1] = v40;
    *(_OWORD *)(*(void *)(v24 + 56) + v37) = v42;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    id v31 = v51;
  }

  unint64_t v46 = v31 + 8;
  if (v31 + 8 >= v50) {
    goto LABEL_46;
  }
  unint64_t v44 = *(void *)(v49 + 8 * v46);
  if (v44)
  {
    id v45 = v31 + 8;
    goto LABEL_45;
  }

  while (1)
  {
    id v45 = v46 + 1;
    if (__OFADD__(v46, 1LL)) {
      break;
    }
    if (v45 >= v50) {
      goto LABEL_46;
    }
    unint64_t v44 = *(void *)(v49 + 8 * v45);
    ++v46;
    if (v44) {
      goto LABEL_45;
    }
  }

    unint64_t v34 = (v44 - 1) & v44;
    v51 = v45;
    uint64_t v36 = __clz(__rbit64(v44)) + (v45 << 6);
LABEL_22:
    unint64_t v37 = 16 * v36;
    uint64_t v38 = (uint64_t *)(*(void *)(v53 + 48) + v37);
    unsigned int v39 = *v38;
    uint64_t v40 = v38[1];
    CFTypeRef v41 = (void *)(*(void *)(v24 + 48) + v37);
    BOOL v42 = *(_OWORD *)(*(void *)(v53 + 56) + v37);
    *CFTypeRef v41 = v39;
    v41[1] = v40;
    *(_OWORD *)(*(void *)(v24 + 56) + v37) = v42;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    id v31 = v51;
  }

  unint64_t v46 = v31 + 8;
  if (v31 + 8 >= v50) {
    goto LABEL_46;
  }
  unint64_t v44 = *(void *)(v49 + 8 * v46);
  if (v44)
  {
    id v45 = v31 + 8;
    goto LABEL_45;
  }

  while (1)
  {
    id v45 = v46 + 1;
    if (__OFADD__(v46, 1LL)) {
      break;
    }
    if (v45 >= v50) {
      goto LABEL_46;
    }
    unint64_t v44 = *(void *)(v49 + 8 * v45);
    ++v46;
    if (v44) {
      goto LABEL_45;
    }
  }

  uint64_t v50 = specialized closure #2 in Rope._Node.removeSuffix<A>(from:in:into:)( (unsigned __int16 *)(v5 + 16),  (void *)(v5 + 24),  &v67);
  id v52 = v51;
  swift_unknownObjectRetain();
  uint64_t v53 = specialized Rope._Node._leafRemoveSuffix(returning:into:)(v50, a2, (void *)v5, a4, v6);
  if ((v52 & 0x8000000000000000LL) == 0 && v53 >= v52)
  {
    v56 = v54;
    v57 = v55;
    if (v52)
    {
      unint64_t v58 = v66[4];
      int v59 = v66[5];
      uint64_t v60 = v66[6];
      v66[5] = 0LL;
      v66[6] = 0LL;
      v66[4] = 0LL;
      if (v59)
      {
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        specialized Rope.Builder._appendNow(_:)(v58, v59, v60);
        outlined consume of Rope<AttributedString._InternalRun>._Item?(v66[4], v66[5]);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }

      swift_unknownObjectRelease();
      v66[4] = v52;
      v66[5] = v56;
      v66[6] = v57;
    }

    else
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_unknownObjectRelease();
    }

    return swift_unknownObjectRelease();
  }

    v75 = (v46 - 1) & v46;
    v76 = v47;
    uint64_t v35 = __clz(__rbit64(v46)) + (v47 << 6);
LABEL_24:
    uint64_t v36 = 16 * v35;
    unint64_t v37 = (uint64_t *)(*(void *)(v12 + 48) + v36);
    unsigned int v39 = *v37;
    uint64_t v38 = v37[1];
    uint64_t v40 = (uint64_t *)(*(void *)(v12 + 56) + v36);
    CFTypeRef v41 = *v40;
    BOOL v42 = v40[1];
    unint64_t v43 = (void *)(*(void *)(v18 + 48) + v36);
    *unint64_t v43 = v39;
    v43[1] = v38;
    unint64_t v44 = (void *)(*(void *)(v18 + 56) + v36);
    *unint64_t v44 = v41;
    v44[1] = v42;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    unint64_t v34 = v75;
    id v31 = v76;
  }

  unint64_t v48 = v31 + 7;
  if (v31 + 7 >= v74) {
    goto LABEL_46;
  }
  unint64_t v46 = *(void *)(v73 + 8 * v48);
  if (v46)
  {
    unint64_t v47 = v31 + 7;
    goto LABEL_45;
  }

  while (1)
  {
    unint64_t v47 = v48 + 1;
    if (__OFADD__(v48, 1LL)) {
      break;
    }
    if (v47 >= v74) {
      goto LABEL_46;
    }
    unint64_t v46 = *(void *)(v73 + 8 * v47);
    ++v48;
    if (v46) {
      goto LABEL_45;
    }
  }

    v84 = (v53 - 1) & v53;
    v86 = v54;
    unint64_t v43 = __clz(__rbit64(v53)) + (v54 << 6);
LABEL_24:
    unint64_t v44 = 16 * v43;
    id v45 = (uint64_t *)(*(void *)(v10 + 48) + 16 * v43);
    __srca = (void *)v45[1];
    v82 = *v45;
    unint64_t v46 = 72 * v43;
    outlined init with copy of AttributedString._AttributeValue(*(void *)(v10 + 56) + 72 * v43, (uint64_t)&v93);
    unint64_t v47 = (void *)(*(void *)(v16 + 48) + v44);
    *unint64_t v47 = v82;
    v47[1] = __srca;
    unint64_t v48 = *(void *)(v16 + 56) + v46;
    *(_OWORD *)unint64_t v48 = v93;
    unint64_t v49 = v94;
    uint64_t v50 = v95;
    v51 = v96;
    *(void *)(v48 + 64) = v97;
    *(_OWORD *)(v48 + 32) = v50;
    *(_OWORD *)(v48 + 4_Block_object_dispose(va, 8) = v51;
    *(_OWORD *)(v48 + 16) = v49;
    swift_bridgeObjectRetain();
    BOOL v42 = v84;
    unsigned int v39 = v86;
  }

  v55 = v39 + 7;
  if (v39 + 7 >= v78) {
    goto LABEL_46;
  }
  uint64_t v53 = *(void *)(v77 + 8 * v55);
  if (v53)
  {
    v54 = v39 + 7;
    goto LABEL_45;
  }

  while (1)
  {
    v54 = v55 + 1;
    if (__OFADD__(v55, 1LL)) {
      break;
    }
    if (v54 >= v78) {
      goto LABEL_46;
    }
    uint64_t v53 = *(void *)(v77 + 8 * v54);
    ++v55;
    if (v53) {
      goto LABEL_45;
    }
  }

    if (v30 + 1 < v12 + v11)
    {
      uint64_t v40 = v30 - v12 + 1;
      CFTypeRef v41 = v30;
      while (1)
      {
        BOOL v42 = v41 + 1;
        unint64_t v43 = v41 + 2;
        ++v40;
        ++v41;
        if (v43 >= v12 + v11) {
          goto LABEL_67;
        }
      }

      unint64_t v44 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0LL, v41);
      id v45 = _asciiNumbers.getter();
      if (v44 < v45 || HIBYTE(v45) < v44)
      {
        if (v40 < 0 || v11 - v40 < 1) {
          goto LABEL_315;
        }
        unint64_t v46 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0LL, v42);
        unint64_t v47 = v42;
        unint64_t v48 = v213;
        unint64_t v49 = v218;
        goto LABEL_247;
      }
    }

    goto LABEL_67;
  }

  if (!a2)
  {
LABEL_292:
    __break(1u);
    goto LABEL_293;
  }

  uint64_t v13 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0LL, a1);
  if (v13 == 48)
  {
    v218 = a4;
    if (v11 >= 1) {
      unint64_t v14 = 1LL;
    }
    else {
      unint64_t v14 = v11;
    }
    __int16 v15 = v12 + v14;
    uint64_t v16 = v11 - v14;
    if (!specialized Collection.isEmpty.getter(v12 + v14, v11 - v14))
    {
      uint64_t v17 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0LL, v15);
      unint64_t v18 = 0;
      if (v17 <= 0x57u)
      {
        id v31 = v12;
        if (v17 == 46 || v17 == 69) {
          goto LABEL_151;
        }
LABEL_58:
        v56 = _asciiNumbers.getter();
        v57 = specialized static JSONError.SourceLocation.sourceLocation(at:fullSource:)(v15, a3, v218);
        int v59 = v58;
        v61 = v60;
        if (v17 < v56 || HIBYTE(v56) < v17)
        {
          lazy protocol witness table accessor for type JSONError and conformance JSONError();
          swift_allocError();
          *(_OWORD *)v55 = xmmword_1837301C0;
          *(void *)(v55 + 16) = v17;
          *(void *)(v55 + 24) = v57;
          *(void *)(v55 + 32) = v59;
          *(void *)(v55 + 40) = v61;
          goto LABEL_260;
        }

        lazy protocol witness table accessor for type JSONError and conformance JSONError();
        swift_allocError();
        *(void *)v55 = v57;
        *(void *)(v55 + _Block_object_dispose(va, 8) = v59;
        *(void *)(v55 + 16) = v61;
        goto LABEL_64;
      }

      if (v17 == 120)
      {
LABEL_12:
        if (specialized static Comparable.<= infix(_:_:)(v15 + 1, v12 + v11))
        {
          __int16 v19 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0LL, v15 + 1);
          if (UInt8.isValidHexDigit.getter(v19)) {
            goto LABEL_14;
          }
          uint64_t v50 = specialized static JSONError.SourceLocation.sourceLocation(at:fullSource:)(v15 + 1, a3, v218);
          id v52 = v182;
          v54 = v183;
          __int16 v11 = v19;
          goto LABEL_248;
        }

        if (v16 < 1) {
          goto LABEL_318;
        }
        unint64_t v46 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0LL, v15);
        unint64_t v47 = v15;
        unint64_t v48 = a3;
        unint64_t v49 = v218;
LABEL_247:
        uint64_t v50 = specialized static JSONError.SourceLocation.sourceLocation(at:fullSource:)(v47, v48, v49);
        id v52 = v174;
        v54 = v175;
        __int16 v11 = v46;
LABEL_248:
        lazy protocol witness table accessor for type JSONError and conformance JSONError();
        swift_allocError();
        *(_OWORD *)v55 = xmmword_1837301C0;
LABEL_252:
        *(void *)(v55 + 16) = v11;
        goto LABEL_259;
      }

      if (v17 != 101)
      {
        if (v17 == 88) {
          goto LABEL_12;
        }
        goto LABEL_58;
      }

      uint64_t v23 = v14;
      goto LABEL_46;
    }

    uint64_t v20 = 0;
    goto LABEL_46;
  }

  if ((v16 - 58) >= 0xF7u)
  {
    v177 = a7;
    goto LABEL_45;
  }

  switch(v16)
  {
    case '+':
    case '-':
      if (v13 < 2)
      {
        if (v13 != 1) {
          goto LABEL_287;
        }
        v117 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0LL, v14);
        v118 = v14 - a3;
        if (v14 < a3) {
          goto LABEL_288;
        }
        v119 = v117;
        if (!specialized static Comparable.<= infix(_:_:)(v14, a3 + v11)) {
          goto LABEL_289;
        }
        v120 = specialized min<A>(_:_:)(v14 + 1, a3 + v11);
        if (v120 <= a3)
        {
          v130 = 0LL;
          v124 = 1LL;
          goto LABEL_238;
        }

        v121 = v120;
        v181 = v119;
        v186 = v14 - a3;
        v122 = v11 + a3;
        v123 = -(uint64_t)a3;
        v124 = 1LL;
        v190 = v122;
        v195 = -(uint64_t)a3;
LABEL_195:
        v125 = 0LL;
        v126 = 0LL;
        v127 = v122 - a3;
        v128 = v123 + a3;
        while (1)
        {
          v129 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0LL, a3 + v126);
          if (v129 == 10) {
            break;
          }
          if (v129 == 13)
          {
            v131 = a3 + v126;
            if (!specialized static Comparable.<= infix(_:_:)(a3 + v126 + 1, v14)) {
              goto LABEL_210;
            }
            if (((v195 + a3 + v126 + 1) & 0x8000000000000000LL) == 0 && (uint64_t)(~v126 + v127) >= 1)
            {
              if (specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)( 0LL,  a3 + v126 + 1) == 10) {
                v131 = a3 + v126 + 1;
              }
LABEL_210:
              unint64_t v58 = __OFADD__(v124++, 1LL);
              if (!v58)
              {
                a3 = v131 + 1;
LABEL_212:
                v122 = v190;
                v123 = v195;
                if (a3 >= v121)
                {
                  v130 = 0LL;
LABEL_214:
                  v119 = v181;
                  v118 = v186;
LABEL_238:
                  lazy protocol witness table accessor for type JSONError and conformance JSONError();
                  swift_allocError();
                  *(void *)v149 = 0xD000000000000010LL;
                  *(void *)(v149 + _Block_object_dispose(va, 8) = 0x80000001839CB4F0LL;
                  *(void *)(v149 + 16) = v119;
                  *(void *)(v149 + 24) = v124;
                  *(void *)(v149 + 32) = v130;
                  *(void *)(v149 + 40) = v118;
                  *(_BYTE *)(v149 + 4_Block_object_dispose(va, 8) = 1;
                  return swift_willThrow();
                }

                goto LABEL_195;
              }

    uint64_t v20 = 0;
    goto LABEL_46;
  }

  if ((v16 - 58) >= 0xF7u)
  {
    v177 = a7;
    goto LABEL_45;
  }

  switch(v16)
  {
    case '+':
    case '-':
      if (v13 < 2)
      {
        if (v13 != 1) {
          goto LABEL_287;
        }
        v117 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0LL, v14);
        v118 = v14 - a3;
        if (v14 < a3) {
          goto LABEL_288;
        }
        v119 = v117;
        if (!specialized static Comparable.<= infix(_:_:)(v14, a3 + v11)) {
          goto LABEL_289;
        }
        v120 = specialized min<A>(_:_:)(v14 + 1, a3 + v11);
        if (v120 <= a3)
        {
          v130 = 0LL;
          v124 = 1LL;
          goto LABEL_238;
        }

        v121 = v120;
        v181 = v119;
        v186 = v14 - a3;
        v122 = v11 + a3;
        v123 = -(uint64_t)a3;
        v124 = 1LL;
        v190 = v122;
        v195 = -(uint64_t)a3;
LABEL_195:
        v125 = 0LL;
        v126 = 0LL;
        v127 = v122 - a3;
        v128 = v123 + a3;
        while (1)
        {
          v129 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0LL, a3 + v126);
          if (v129 == 10) {
            break;
          }
          if (v129 == 13)
          {
            v131 = a3 + v126;
            if (!specialized static Comparable.<= infix(_:_:)(a3 + v126 + 1, v14)) {
              goto LABEL_210;
            }
            if (((v195 + a3 + v126 + 1) & 0x8000000000000000LL) == 0 && (uint64_t)(~v126 + v127) >= 1)
            {
              if (specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)( 0LL,  a3 + v126 + 1) == 10) {
                v131 = a3 + v126 + 1;
              }
LABEL_210:
              unint64_t v58 = __OFADD__(v124++, 1LL);
              if (!v58)
              {
                a3 = v131 + 1;
LABEL_212:
                v122 = v190;
                v123 = v195;
                if (a3 >= v121)
                {
                  v130 = 0LL;
LABEL_214:
                  v119 = v181;
                  v118 = v186;
LABEL_238:
                  lazy protocol witness table accessor for type JSONError and conformance JSONError();
                  swift_allocError();
                  *(void *)v149 = 0xD000000000000010LL;
                  *(void *)(v149 + _Block_object_dispose(va, 8) = 0x80000001839CB4F0LL;
                  *(void *)(v149 + 16) = v119;
                  *(void *)(v149 + 24) = v124;
                  *(void *)(v149 + 32) = v130;
                  *(void *)(v149 + 40) = v118;
                  *(_BYTE *)(v149 + 4_Block_object_dispose(va, 8) = 1;
                  return swift_willThrow();
                }

                goto LABEL_195;
              }

    uint64_t v20 = 0;
    goto LABEL_46;
  }

  if ((v16 - 58) >= 0xF7u)
  {
    v177 = a7;
    goto LABEL_45;
  }

  switch(v16)
  {
    case '+':
    case '-':
      if (v13 < 2)
      {
        if (v13 != 1) {
          goto LABEL_287;
        }
        v119 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0LL, v14);
        v120 = v14 - a3;
        if (v14 < a3) {
          goto LABEL_288;
        }
        v121 = v119;
        if (!specialized static Comparable.<= infix(_:_:)(v14, a3 + v11)) {
          goto LABEL_289;
        }
        v122 = specialized min<A>(_:_:)(v14 + 1, a3 + v11);
        if (v122 <= a3)
        {
          v132 = 0LL;
          v126 = 1LL;
          goto LABEL_238;
        }

        v123 = v122;
        v181 = v121;
        v186 = v14 - a3;
        v124 = v11 + a3;
        v125 = -(uint64_t)a3;
        v126 = 1LL;
        v190 = v124;
        v195 = -(uint64_t)a3;
LABEL_195:
        v127 = 0LL;
        v128 = 0LL;
        v129 = v124 - a3;
        v130 = v125 + a3;
        while (1)
        {
          v131 = specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)(0LL, a3 + v128);
          if (v131 == 10) {
            break;
          }
          if (v131 == 13)
          {
            v133 = a3 + v128;
            if (!specialized static Comparable.<= infix(_:_:)(a3 + v128 + 1, v14)) {
              goto LABEL_210;
            }
            if (((v195 + a3 + v128 + 1) & 0x8000000000000000LL) == 0 && (uint64_t)(~v128 + v129) >= 1)
            {
              if (specialized UnsafeRawPointer.loadUnaligned<A>(fromByteOffset:as:)( 0LL,  a3 + v128 + 1) == 10) {
                v133 = a3 + v128 + 1;
              }
LABEL_210:
              unint64_t v58 = __OFADD__(v126++, 1LL);
              if (!v58)
              {
                a3 = v133 + 1;
LABEL_212:
                v124 = v190;
                v125 = v195;
                if (a3 >= v123)
                {
                  v132 = 0LL;
LABEL_214:
                  v121 = v181;
                  v120 = v186;
LABEL_238:
                  lazy protocol witness table accessor for type JSONError and conformance JSONError();
                  swift_allocError();
                  *(void *)v151 = 0xD000000000000010LL;
                  *(void *)(v151 + _Block_object_dispose(va, 8) = 0x80000001839CB4F0LL;
                  *(void *)(v151 + 16) = v121;
                  *(void *)(v151 + 24) = v126;
                  *(void *)(v151 + 32) = v132;
                  *(void *)(v151 + 40) = v120;
                  *(_BYTE *)(v151 + 4_Block_object_dispose(va, 8) = 1;
                  return (char *)swift_willThrow();
                }

                goto LABEL_195;
              }

      id v24 = v15;
      goto LABEL_46;
    }

      id v24 = v15;
      goto LABEL_46;
    }

  __break(1u);
}

  v142 = v14 & 0xFFFFFFFFFFFFFF8LL;
  if (v14 < 0) {
    v142 = v14;
  }
  v177 = v142;
  swift_bridgeObjectRetain();
LABEL_27:
  v173 = v14;
  if ((MEMORY[0x18961AFE8] & 0xC000000000000000LL) != 0)
  {
    v176 = MEMORY[0x18961AFE8];
  }

  else
  {
    type metadata accessor for NSMorphologyPronoun( 0LL,  (unint64_t *)&lazy cache variable for type metadata for NSObject);
    v176 = _ContiguousArrayBuffer._asCocoaArray()();
  }

  v175 = objc_msgSend((id)objc_opt_self(), sel_currentUser);
  v183 = partial apply for closure #3 in AttributedString.inflected(locale:userTermOfAddress:replacements:concepts:preflight:);
  v184 = a1;
  v99 = (__int128 *)MEMORY[0x1895F87A8];
  v179 = (__int128 *)MEMORY[0x1895F87A8];
  v180 = 1107296256LL;
  v181 = thunk for @escaping @callee_guaranteed () -> (@unowned Int);
  v182 = &block_descriptor_22;
  v174 = _Block_copy(&v179);
  swift_retain();
  swift_release();
  v100 = swift_allocObject();
  *(void *)(v100 + 16) = partial apply for closure #4 in AttributedString.inflected(locale:userTermOfAddress:replacements:concepts:preflight:);
  *(void *)(v100 + 24) = a1;
  v183 = partial apply for closure #1 in NSRunLoop.schedule(options:_:);
  v184 = (void *)v100;
  v179 = v99;
  v180 = 1107296256LL;
  v181 = thunk for @escaping @callee_guaranteed (@guaranteed NSAttributedStringKey, @unowned _NSRange, @guaranteed @escaping @callee_guaranteed (@in_guaranteed Any?, @unowned _NSRange, @unowned UnsafeMutablePointer<ObjCBool>) -> ()) -> ();
  v182 = &block_descriptor_6_3;
  v171 = _Block_copy(&v179);
  swift_retain();
  v152 = v100;
  swift_retain();
  swift_release();
  v101 = swift_allocObject();
  *(void *)(v101 + 16) = partial apply for closure #5 in AttributedString.inflected(locale:userTermOfAddress:replacements:concepts:preflight:);
  *(void *)(v101 + 24) = a1;
  v183 = closure #1 in NSRunLoop.schedule(options:_:)partial apply;
  v184 = (void *)v101;
  v179 = v99;
  v180 = 1107296256LL;
  v181 = thunk for @escaping @callee_guaranteed (@unowned _NSRange, @guaranteed @escaping @callee_guaranteed (@in_guaranteed Any?, @unowned _NSRange, @unowned UnsafeMutablePointer<ObjCBool>) -> ()) -> ();
  v182 = &block_descriptor_12_1;
  v172 = _Block_copy(&v179);
  v151 = a1;
  swift_retain();
  v154 = v101;
  swift_retain();
  swift_release();
  v102 = swift_allocObject();
  *(void *)(v102 + 16) = v8;
  v103 = swift_allocObject();
  *(void *)(v103 + 16) = partial apply for closure #6 in AttributedString.inflected(locale:userTermOfAddress:replacements:concepts:preflight:);
  *(void *)(v103 + 24) = v102;
  v150 = (uint64_t *)v102;
  v183 = closure #1 in NSRunLoop.schedule(options:_:)partial apply;
  v184 = (void *)v103;
  v179 = v99;
  v180 = 1107296256LL;
  v181 = thunk for @escaping @callee_guaranteed (@unowned _NSRange, @guaranteed @escaping @callee_guaranteed (@guaranteed NSLocalizedNumberFormatRule, @unowned _NSRange, @unowned UnsafeMutablePointer<ObjCBool>) -> ()) -> ();
  v182 = &block_descriptor_21;
  v170 = _Block_copy(&v179);
  v155 = v103;
  swift_retain();
  swift_release();
  v104 = swift_allocObject();
  *(void *)(v104 + 16) = v8;
  v105 = swift_allocObject();
  *(void *)(v105 + 16) = partial apply for closure #7 in AttributedString.inflected(locale:userTermOfAddress:replacements:concepts:preflight:);
  *(void *)(v105 + 24) = v104;
  v148 = v104;
  v183 = partial apply for closure #1 in NSRunLoop.schedule(options:_:);
  v184 = (void *)v105;
  v179 = v99;
  v180 = 1107296256LL;
  v181 = thunk for @escaping @callee_guaranteed (@guaranteed NSAttributedStringKey, @unowned _NSRange) -> ();
  v182 = &block_descriptor_30;
  v169 = _Block_copy(&v179);
  v156 = (uint64_t *)v105;
  swift_retain();
  swift_release();
  v106 = swift_allocObject();
  *(void *)(v106 + 16) = v8;
  v107 = swift_allocObject();
  *(void *)(v107 + 16) = partial apply for closure #8 in AttributedString.inflected(locale:userTermOfAddress:replacements:concepts:preflight:);
  *(void *)(v107 + 24) = v106;
  v146[6] = v106;
  v183 = partial apply for thunk for @callee_guaranteed (@unowned Int, @unowned UnsafeMutablePointer<ObjCBool>) -> (@unowned Bool);
  v184 = (void *)v107;
  v179 = v99;
  v180 = 1107296256LL;
  v181 = thunk for @escaping @callee_guaranteed (@unowned Int, @unowned UnsafeMutablePointer<ObjCBool>) -> (@unowned Bool);
  v182 = &block_descriptor_39;
  v168 = (unint64_t)_Block_copy(&v179);
  v157 = (_OWORD *)v107;
  swift_retain();
  swift_release();
  v108 = swift_allocObject();
  *(void *)(v108 + 16) = v8;
  v109 = swift_allocObject();
  *(void *)(v109 + 16) = partial apply for closure #9 in AttributedString.inflected(locale:userTermOfAddress:replacements:concepts:preflight:);
  *(void *)(v109 + 24) = v108;
  v146[5] = v108;
  v183 = partial apply for thunk for @callee_guaranteed (@guaranteed NSAttributedStringKey, @unowned _NSRange) -> (@out Any?);
  v184 = (void *)v109;
  v179 = v99;
  v180 = 1107296256LL;
  v181 = thunk for @escaping @callee_guaranteed (@guaranteed NSAttributedStringKey, @unowned _NSRange) -> (@out Any?);
  v182 = &block_descriptor_48;
  v167 = _Block_copy(&v179);
  v158 = (void *)v109;
  swift_retain();
  swift_release();
  v110 = swift_allocObject();
  *(void *)(v110 + 16) = v8;
  v111 = swift_allocObject();
  *(void *)(v111 + 16) = partial apply for closure #10 in AttributedString.inflected(locale:userTermOfAddress:replacements:concepts:preflight:);
  *(void *)(v111 + 24) = v110;
  v146[4] = v110;
  v183 = partial apply for closure #1 in NSRunLoop.schedule(options:_:);
  v184 = (void *)v111;
  v179 = v99;
  v180 = 1107296256LL;
  v181 = thunk for @escaping @callee_guaranteed (@unowned _NSRange) -> (@owned String);
  v182 = &block_descriptor_57;
  v166 = _Block_copy(&v179);
  v159 = (__int128 *)v111;
  swift_retain();
  swift_release();
  v112 = swift_allocObject();
  *(void *)(v112 + 16) = v12;
  v113 = swift_allocObject();
  *(void *)(v113 + 16) = partial apply for closure #11 in AttributedString.inflected(locale:userTermOfAddress:replacements:concepts:preflight:);
  *(void *)(v113 + 24) = v112;
  v146[3] = v112;
  v183 = partial apply for closure #1 in NSRunLoop.schedule(options:_:);
  v184 = (void *)v113;
  v179 = v99;
  v180 = 1107296256LL;
  v181 = thunk for @escaping @callee_guaranteed (@unowned _NSRange, @guaranteed @escaping @callee_guaranteed (@guaranteed String?, @unowned _NSRange, @unowned UnsafeMutablePointer<ObjCBool>) -> ()) -> ();
  v182 = &block_descriptor_66;
  v114 = _Block_copy(&v179);
  v115 = v12;
  v160 = v113;
  swift_retain();
  swift_release();
  v116 = swift_allocObject();
  *(void *)(v116 + 16) = v8;
  *(void *)(v116 + 24) = v115;
  v117 = swift_allocObject();
  *(void *)(v117 + 16) = partial apply for closure #12 in AttributedString.inflected(locale:userTermOfAddress:replacements:concepts:preflight:);
  *(void *)(v117 + 24) = v116;
  v146[2] = v116;
  v183 = partial apply for closure #1 in NSRunLoop.schedule(options:_:);
  v184 = (void *)v117;
  v179 = v99;
  v180 = 1107296256LL;
  v181 = thunk for @escaping @callee_guaranteed (@unowned _NSRange, @in_guaranteed Any) -> ();
  v182 = &block_descriptor_75;
  v118 = _Block_copy(&v179);
  v163 = v118;
  v165 = (__int128 *)v115;
  v161 = (void *)v117;
  swift_retain();
  swift_release();
  v183 = (uint64_t (*)())destructiveProjectEnumData for PredicateCodableError;
  v184 = 0LL;
  v179 = v99;
  v180 = 1107296256LL;
  v181 = thunk for @escaping @callee_guaranteed (@unowned _NSRange, @guaranteed NSAttributedStringKey, @in_guaranteed Any) -> ();
  v182 = &block_descriptor_78;
  v119 = _Block_copy(&v179);
  v162 = v119;
  swift_release();
  v120 = swift_allocObject();
  v121 = v173;
  *(void *)(v120 + 16) = v153;
  *(void *)(v120 + 24) = v121;
  v122 = swift_allocObject();
  *(void *)(v122 + 16) = partial apply for closure #14 in AttributedString.inflected(locale:userTermOfAddress:replacements:concepts:preflight:);
  *(void *)(v122 + 24) = v120;
  v146[1] = v120;
  v183 = partial apply for thunk for @callee_guaranteed (@guaranteed NSAttributedStringKey, @unowned _NSRange) -> (@out Any?);
  v184 = (void *)v122;
  v179 = v99;
  v180 = 1107296256LL;
  v181 = thunk for @escaping @callee_guaranteed (@in_guaranteed Any) -> (@out Any?);
  v182 = &block_descriptor_87;
  v123 = _Block_copy(&v179);
  v164 = v123;
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_release();
  v144 = (uint64_t)v119;
  v145 = (uint64_t)v123;
  v143 = (uint64_t)v118;
  v124 = v166;
  v125 = v167;
  v126 = (const void *)v168;
  v127 = v169;
  v128 = v170;
  v130 = v171;
  v129 = v172;
  _NSInflect( (uint64_t)v178,  v177,  v176,  (uint64_t)v175,  (uint64_t)v174,  0,  (uint64_t)v171,  (uint64_t)v172,  (uint64_t)v170,  (uint64_t)v169,  v168,  (uint64_t)v167,  (uint64_t)v166,  (uint64_t)v114,  v143,  v144,  v145);

  _Block_release(v162);
  _Block_release(v163);
  _Block_release(v114);
  _Block_release(v124);
  _Block_release(v125);
  _Block_release(v126);
  _Block_release(v127);
  _Block_release(v128);
  _Block_release(v129);
  _Block_release(v130);
  _Block_release(v174);

  swift_unknownObjectRelease();
  swift_unknownObjectRelease();

  _Block_release(v164);
  LOBYTE(v125) = swift_isEscapingClosureAtFileLocation();
  swift_release();
  if ((v125 & 1) != 0)
  {
    __break(1u);
    goto LABEL_49;
  }

  if ((swift_isEscapingClosureAtFileLocation() & 1) != 0)
  {
LABEL_49:
    __break(1u);
    goto LABEL_50;
  }

  isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
  swift_release();
  if ((isEscapingClosureAtFileLocation & 1) != 0)
  {
LABEL_50:
    __break(1u);
    goto LABEL_51;
  }

  v132 = swift_isEscapingClosureAtFileLocation();
  swift_release();
  if ((v132 & 1) != 0)
  {
LABEL_51:
    __break(1u);
    goto LABEL_52;
  }

  v133 = swift_isEscapingClosureAtFileLocation();
  swift_release();
  if ((v133 & 1) != 0)
  {
LABEL_52:
    __break(1u);
    goto LABEL_53;
  }

  v134 = swift_isEscapingClosureAtFileLocation();
  swift_release();
  if ((v134 & 1) != 0)
  {
LABEL_53:
    __break(1u);
    goto LABEL_54;
  }

  v135 = swift_isEscapingClosureAtFileLocation();
  swift_release();
  if ((v135 & 1) != 0)
  {
LABEL_54:
    __break(1u);
    goto LABEL_55;
  }

  v136 = swift_isEscapingClosureAtFileLocation();
  swift_release();
  if ((v136 & 1) != 0)
  {
LABEL_55:
    __break(1u);
    goto LABEL_56;
  }

  v137 = swift_isEscapingClosureAtFileLocation();
  swift_release();
  if ((v137 & 1) != 0)
  {
LABEL_56:
    __break(1u);
    goto LABEL_57;
  }

  v138 = swift_isEscapingClosureAtFileLocation();
  swift_release();
  if ((v138 & 1) != 0)
  {
LABEL_57:
    __break(1u);
    goto LABEL_58;
  }

  v139 = swift_isEscapingClosureAtFileLocation();
  swift_release();
  if ((v139 & 1) != 0)
  {
LABEL_58:
    __break(1u);
    JUMPOUT(0x1834EA61CLL);
  }

  v140 = v151[2];
  swift_retain();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release_n();
  *v147 = v140;
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  return swift_release();
}

      if ((POSIXErrorCode.init(rawValue:)() & 0x100000000LL) != 0)
      {
        *(void *)&v93.st_dev = 0LL;
        v93.st_ino = 0xE000000000000000LL;
        _StringGuts.grow(_:)(22LL);
        swift_bridgeObjectRelease();
        *(void *)&v93.st_dev = 0xD000000000000014LL;
        v93.st_ino = 0x80000001839C9190LL;
        LODWORD(v91) = v43;
        v86._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
        String.append(_:)(v86);
        swift_bridgeObjectRelease();
        _assertionFailure(_:_:file:line:flags:)();
        __break(1u);
        JUMPOUT(0x1835035F0LL);
      }

      static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSPOSIXErrorDomain");
      unint64_t v49 = (int)POSIXErrorCode.rawValue.getter();
      uint64_t v50 = objc_allocWithZone((Class)&OBJC_CLASS___NSError);
      v51 = String._bridgeToObjectiveCImpl()();
      swift_bridgeObjectRelease();
      id v45 = objc_msgSend(v50, sel_initWithDomain_code_userInfo_, v51, v49, _NativeDictionary.bridged()());
      swift_unknownObjectRelease();
      swift_unknownObjectRelease();
      id v52 = objc_msgSend(v45, sel_domain);
      uint64_t v53 = static String._unconditionallyBridgeFromObjectiveC(_:)(v52);
      v55 = v54;

      if (v53 == static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSPOSIXErrorDomain") && v55 == v56)
      {
        swift_bridgeObjectRelease_n();
        a3 = v87;
      }

      else
      {
        v57 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        a3 = v87;
        if ((v57 & 1) == 0) {
          goto LABEL_90;
        }
      }

  uint64_t v22 = (unsigned __int16)c;
  uint64_t v23 = (NSCharacterSet *)isADigit_set;
  if (!isADigit_set)
  {
    uint64_t v23 = +[NSCharacterSet decimalDigitCharacterSet](&OBJC_CLASS___NSCharacterSet, "decimalDigitCharacterSet");
    isADigit_set = (uint64_t)v23;
  }

  uint64_t result = -[NSCharacterSet characterIsMember:](v23, "characterIsMember:", v22);
  if ((_DWORD)result)
  {
    unsigned int v39 = result;
    uint64_t v25 = 0;
    while (1)
    {
      if (v25 > 214748363)
      {
        if (v25 != 214748364) {
          goto LABEL_54;
        }
        uint64_t v26 = (unsigned __int16)c - 48;
        if (v26 - v42 >= 7)
        {
LABEL_54:
          while (1)
          {
            unint64_t v27 = v44;
            if (v44 >= v43)
            {
              uint64_t v29 = v47 + v43;
              if (v46 > v47 + v43)
              {
                if (v46 - (v47 + v43) >= 0x20) {
                  uint64_t v30 = 32LL;
                }
                else {
                  uint64_t v30 = v46 - (v47 + v43);
                }
                v47 += v43;
                unint64_t v43 = v30;
                objc_msgSend(v45, sel_getUid("getCharacters:range:"), v48, v29, v30);
                uint64_t v28 = v48[0];
                LOWORD(c) = v48[0];
                unint64_t v44 = 1LL;
                goto LABEL_63;
              }

              unint64_t v44 = v43 + 1;
              uint64_t v28 = 0xFFFFLL;
            }

            else
            {
              ++v44;
              uint64_t v28 = (unsigned __int16)v48[v27];
            }

            LOWORD(c) = v28;
LABEL_63:
            id v31 = (NSCharacterSet *)isADigit_set;
            if (!isADigit_set)
            {
              id v31 = +[NSCharacterSet decimalDigitCharacterSet](&OBJC_CLASS___NSCharacterSet, "decimalDigitCharacterSet");
              isADigit_set = (uint64_t)v31;
            }

            if (!-[NSCharacterSet characterIsMember:](v31, "characterIsMember:", v28))
            {
              if (v42) {
                uint64_t v25 = 0x80000000;
              }
              else {
                uint64_t v25 = 0x7FFFFFFF;
              }
              uint64_t v32 = (unsigned __int16)c;
              BOOL v42 = 0;
              goto LABEL_81;
            }
          }
        }
      }

      uint64_t v33 = (unsigned __int16)c - 48;
      if (v33 > 9) {
        uint64_t v33 = u_charDigitValue((unsigned __int16)c);
      }
      uint64_t v25 = v33 + 10 * v25;
      unint64_t v34 = v44;
      if (v44 < v43) {
        break;
      }
      uint64_t v35 = v47 + v43;
      if (v46 <= v47 + v43)
      {
        unint64_t v44 = v43 + 1;
        uint64_t v32 = 0xFFFFLL;
        goto LABEL_80;
      }

      if (v46 - (v47 + v43) >= 0x20) {
        uint64_t v36 = 32LL;
      }
      else {
        uint64_t v36 = v46 - (v47 + v43);
      }
      v47 += v43;
      unint64_t v43 = v36;
      objc_msgSend(v45, sel_getUid("getCharacters:range:"), v48, v35, v36);
      uint64_t v32 = v48[0];
      LOWORD(c) = v48[0];
      unint64_t v44 = 1LL;
LABEL_81:
      unint64_t v37 = (NSCharacterSet *)isADigit_set;
      if (!isADigit_set)
      {
        unint64_t v37 = +[NSCharacterSet decimalDigitCharacterSet](&OBJC_CLASS___NSCharacterSet, "decimalDigitCharacterSet");
        isADigit_set = (uint64_t)v37;
      }

      if (!-[NSCharacterSet characterIsMember:](v37, "characterIsMember:", v32))
      {
        if (a3)
        {
          if (v42) {
            uint64_t v38 = -v25;
          }
          else {
            uint64_t v38 = v25;
          }
          *a3 = v38;
        }

        *a4 = v47 + v44 - 1;
        return v39;
      }
    }

    ++v44;
    uint64_t v32 = (unsigned __int16)v48[v34];
LABEL_80:
    LOWORD(c) = v32;
    goto LABEL_81;
  }

  return result;
}

              *a4 = 0LL;
              *(float *)a4 = v26;
              goto LABEL_46;
            }

            *(float *)&unint64_t v27 = 3.4028e38;
          }

          else
          {
            *(float *)&unint64_t v27 = -3.4028e38;
          }

          uint64_t v26 = *(float *)&v27;
          goto LABEL_45;
        }

uint64_t _makeInlinePayload(unint64_t *a1, uint64_t a2)
{
  uint64_t result = 0LL;
  uint64_t v4 = a2;
  switch(a2)
  {
    case 0LL:
      return v4 | (8 * a2) | 6;
    case 1LL:
      goto LABEL_8;
    case 2LL:
      goto LABEL_6;
    case 3LL:
      goto LABEL_4;
    case 4LL:
      unint64_t v5 = a1[3];
      if (v5 >> 13) {
        return 0LL;
      }
      uint64_t result = v5 << 47;
LABEL_4:
      unint64_t v6 = a1[2];
      if (v6 >> 13) {
        return 0LL;
      }
      result |= v6 << 34;
LABEL_6:
      unint64_t v7 = a1[1];
      if (v7 >> 13) {
        return 0LL;
      }
      result |= v7 << 21;
LABEL_8:
      unint64_t v8 = *a1;
      if (v8 >> 13) {
        return 0LL;
      }
      uint64_t v4 = result | (v8 << 8);
      return v4 | (8 * a2) | 6;
    default:
      return result;
  }

id static String._unconditionallyBridgeFromObjectiveC(_:)(void *a1)
{
  if (!a1) {
    return 0LL;
  }
  int isTaggedPointer = _objc_isTaggedPointer((unint64_t)a1);
  id v3 = a1;
  uint64_t v4 = v3;
  if (!isTaggedPointer)
  {
LABEL_6:
    if (__CFStringIsCF())
    {
    }

    else
    {
      id v7 = v4;
      uint64_t v8 = String.init(_nativeStorage:)();
      if (v9)
      {
        uint64_t v6 = v8;

        return (id)v6;
      }

      if (objc_msgSend(v7, sel_length)) {
        return (id)String.init(_cocoaString:)();
      }
    }

    return 0LL;
  }

  uint64_t TaggedPointerTag = _objc_getTaggedPointerTag((uint64_t)v3);
  if ((_DWORD)TaggedPointerTag != 22)
  {
    if ((_DWORD)TaggedPointerTag == 2)
    {
      MEMORY[0x1895F8858](TaggedPointerTag);
      uint64_t v6 = String.init(unsafeUninitializedCapacity:initializingUTF8With:)();

      return (id)v6;
    }

    goto LABEL_6;
  }

  id v10 = v4;
  id result = objc_msgSend(v10, sel_UTF8String);
  if (result)
  {
    id v12 = result;
    uint64_t v13 = MEMORY[0x186E1B634]();
    if (v14)
    {
      uint64_t v6 = v13;

      return (id)v6;
    }

    id result = objc_msgSend(objc_allocWithZone((Class)NSString), sel_initWithUTF8String_, v12);
    if (result)
    {
      __int16 v15 = result;
      uint64_t v6 = static String._unconditionallyBridgeFromObjectiveC(_:)();

      return (id)v6;
    }
  }

  else
  {
    __break(1u);
  }

  __break(1u);
  return result;
}

unint64_t _objc_isTaggedPointer(unint64_t a1)
{
  return a1 >> 63;
}

uint64_t _objc_getTaggedPointerTag(uint64_t a1)
{
  uint64_t v1 = 0LL;
  uint64_t v2 = *MEMORY[0x189616658];
  if ((~a1 & 0xC000000000000007LL) == 0) {
    uint64_t v2 = 0LL;
  }
  uint64_t v3 = v2 ^ a1;
  do
  {
    if ((v3 & 7) == *(_BYTE *)(MEMORY[0x189616648] + v1)) {
      break;
    }
    ++v1;
  }

  while (v1 != 7);
  unint64_t v4 = v1 | v3;
  uint64_t v5 = v1 & 7;
  unsigned int v6 = (v4 >> 55) + 8;
  if (v5 == 7) {
    return v6;
  }
  else {
    return v5;
  }
}

uint64_t partial apply for closure #1 in static String._unconditionallyBridgeFromObjectiveC(_:)( uint64_t result)
{
  if (result) {
    return _NSTaggedPointerStringGetBytes();
  }
  __break(1u);
  return result;
}

id *clearARCWeakAtWithSentinel(id *location)
{
  uint64_t v1 = location;
  *uint64_t v1 = (id)1;
  return location;
}

id __NSConcreteUUID.init()()
{
  uint64_t v5 = *MEMORY[0x1895F89C0];
  memset(out, 0, 16);
  uint64_t v1 = v0;
  _foundation_uuid_generate_random(out);
  *(_OWORD *)&v1[OBJC_IVAR_____NSConcreteUUID__storage] = *(_OWORD *)out;

  v3.receiver = v1;
  v3.super_class = (Class)type metadata accessor for __NSConcreteUUID();
  return objc_msgSendSuper2(&v3, sel_init);
}

uint64_t type metadata accessor for __NSConcreteUUID()
{
  return objc_opt_self();
}

uint64_t UUID.uuidString.getter()
{
  uint64_t v4 = *MEMORY[0x1895F89C0];
  memset(out, 0, 37);
  __int128 v2 = *v0;
  _foundation_uuid_unparse_upper((const unsigned __int8 *)&v2, out);
  return String.init(cString:)();
}

void sub_182EC8A34(_Unwind_Exception *exception_object)
{
}

id NSAllocateObjectArray(unint64_t a1)
{
  if (a1 >> 61)
  {
    objc_super v3 = +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"*** attempt to allocate id buffer with too large of a count (%lu) -- possibly data is corrupt",  a1);
    objc_exception_throw((id)[MEMORY[0x189603F70] exceptionWithName:*MEMORY[0x189603A48] reason:v3 userInfo:0]);
    return -[NSObject valueForKey:](v4, v5, v6);
  }

  else
  {
    size_t v1 = malloc_good_size(8 * a1);
    return calloc(1uLL, v1);
  }

void sub_182EC8C78(_Unwind_Exception *exception_object)
{
}

uint64_t NSKeyValueAccessorHash(uint64_t a1)
{
  return *(void *)(a1 + 24);
}

uint64_t NSKeyValueAccessorIsEqual(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a1 + 8) != *(void *)(a2 + 8)) {
    return 0LL;
  }
  objc_super v3 = *(void **)(a1 + 16);
  else {
    return objc_msgSend(v3, "isEqual:");
  }
}

uint64_t _NSGetUsingKeyValueGetter(uint64_t a1, uint64_t a2)
{
  if (_NSKeyValueObserverRegistrationEnableLockingAssertions) {
    os_unfair_lock_assert_not_owner((os_unfair_lock_t)&_NSKeyValueObserverRegistrationLock);
  }
  uint64_t v4 = *(void *)(a2 + 48);
  if (v4 == 2) {
    return (*(uint64_t (**)(uint64_t, void, void, void))(a2 + 32))( a1,  *(void *)(a2 + 40),  *(void *)(a2 + 56),  *(void *)(a2 + 64));
  }
  if (v4 == 1) {
    return (*(uint64_t (**)(uint64_t, void, void))(a2 + 32))( a1,  *(void *)(a2 + 40),  *(void *)(a2 + 56));
  }
  if (v4) {
    return (*(uint64_t (**)(uint64_t, void, void, void, void))(a2 + 32))( a1,  *(void *)(a2 + 40),  *(void *)(a2 + 56),  *(void *)(a2 + 64),  *(void *)(a2 + 72));
  }
  return (*(uint64_t (**)(uint64_t, void))(a2 + 32))(a1, *(void *)(a2 + 40));
}

uint64_t normalizedPath(void *a1)
{
  __int128 v2 = @"/private/preboot/Cryptexes/OS/";
  if ([a1 hasPrefix:@"/private/preboot/Cryptexes/OS/"]) {
    return objc_msgSend(a1, "substringFromIndex:", -[__CFString length](v2, "length") - 1);
  }
  __int128 v2 = @"/System/Cryptexes/OS/";
  else {
    return (uint64_t)a1;
  }
}

LABEL_8:
      CFRelease(v5);
    }
  }

  return (__CFBundle *)atomic_load(p_cfBundle);
}

  swift_retain();
  uint64_t v13 = a1;
  swift_retain();
  id result = _foundation_swift_url_feature_enabled();
  if ((_DWORD)result)
  {
    if (!a2)
    {
LABEL_38:
      __break(1u);
      goto LABEL_39;
    }

    swift_bridgeObjectRetain();
    swift_release();
    swift_release();
  }

  else
  {
    __int16 v15 = objc_msgSend(v13, sel_relativeString);
    static String._unconditionallyBridgeFromObjectiveC(_:)(v15);
    swift_release();
    swift_release();
  }

  uint64_t v16 = String.count.getter();
  swift_bridgeObjectRelease();
  if (v16 < 129) {
    goto LABEL_16;
  }
  uint64_t v53 = 0LL;
  v54 = 0xE000000000000000LL;
  uint64_t v17 = v13;
  swift_retain();
  swift_retain();
  id result = _foundation_swift_url_feature_enabled();
  if ((_DWORD)result)
  {
    if (!a2)
    {
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }

    swift_bridgeObjectRetain();
    swift_release();
    swift_release();
  }

  else
  {
    uint64_t v21 = objc_msgSend(v17, sel_relativeString);
    static String._unconditionallyBridgeFromObjectiveC(_:)(v21);
    swift_release();
    swift_release();
  }

  String.index(_:offsetBy:limitedBy:)();
  uint64_t v22 = String.subscript.getter();
  id v24 = v23;
  uint64_t v26 = v25;
  uint64_t v28 = v27;
  swift_bridgeObjectRelease();
  v29._countAndFlagsBits = MEMORY[0x186E1B610](v22, v24, v26, v28);
  String.append(_:)(v29);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v30._countAndFlagsBits = 0x202E2E2E20LL;
  v30._object = (void *)0xE500000000000000LL;
  String.append(_:)(v30);
  id v31 = v17;
  swift_retain();
  swift_retain();
  id result = _foundation_swift_url_feature_enabled();
  if (!(_DWORD)result)
  {
    uint64_t v35 = objc_msgSend(v31, sel_relativeString);
    uint64_t v33 = (unint64_t)static String._unconditionallyBridgeFromObjectiveC(_:)(v35);
    uint64_t v32 = v36;
    swift_release();
    swift_release();

    if ((v32 & 0x2000000000000000LL) != 0) {
      goto LABEL_24;
    }
    goto LABEL_26;
  }

  if (a2)
  {
    uint64_t v33 = *(void *)(a2 + 16);
    uint64_t v32 = *(void *)(a2 + 24);
    swift_bridgeObjectRetain();
    swift_release();
    swift_release();

    if ((v32 & 0x2000000000000000LL) != 0)
    {
LABEL_24:
      unint64_t v34 = v33 & 0xFFFFFFFFFFFFLL;
LABEL_27:
      id result = String.index(_:offsetBy:limitedBy:)();
      if ((v37 & 1) != 0) {
        id result = 15LL;
      }
      uint64_t v38 = HIBYTE(v32) & 0xF;
      if ((v32 & 0x2000000000000000LL) == 0) {
        uint64_t v38 = v34;
      }
      if (4 * v38 >= result >> 14)
      {
        unsigned int v39 = String.subscript.getter();
        CFTypeRef v41 = v40;
        unint64_t v43 = v42;
        id v45 = v44;
        swift_bridgeObjectRelease();
        v46._countAndFlagsBits = MEMORY[0x186E1B610](v39, v41, v43, v45);
        String.append(_:)(v46);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v9 = v53;
        __int16 v11 = (void *)v54;
LABEL_33:
        URL.baseURL.getter((uint64_t *)&v53);
        unint64_t v47 = v53;
        if (v53)
        {
          unint64_t v49 = v54;
          unint64_t v48 = v55;
          uint64_t v53 = 0LL;
          v54 = 0xE000000000000000LL;
          v50._countAndFlagsBits = (uint64_t)v9;
          v50._object = v11;
          String.append(_:)(v50);
          swift_bridgeObjectRelease();
          v51._countAndFlagsBits = 539831584LL;
          v51._object = (void *)0xE400000000000000LL;
          String.append(_:)(v51);
          specialized DefaultStringInterpolation.appendInterpolation<A>(_:)(v47, v49, v48);
          outlined consume of URL?(v47);
          uint64_t v9 = v53;
          __int16 v11 = (void *)v54;
        }

        goto LABEL_35;
      }

      __break(1u);
LABEL_37:
      __break(1u);
      goto LABEL_38;
    }

      id v24 = (void *)(*(void *)(v19 + 56) + 16 * v15);
      *id v24 = v23;
      v24[1] = v22;
      swift_bridgeObjectRelease();
      goto LABEL_47;
    }

      *(_OWORD *)(*(void *)(v22 + 56) + 16 * v1_Block_object_dispose(va, 8) = v81;
      swift_bridgeObjectRelease();
      goto LABEL_45;
    }

  if ((URLComponents._URLComponents.hasAuthority.getter() & 1) != 0)
  {
    outlined init with take of LocalePreferences?( v1 + 104,  (uint64_t)v72,  &demangling cache variable for type metadata for String?);
    outlined init with take of LocalePreferences?( (uint64_t)v72,  (uint64_t)&v75,  &demangling cache variable for type metadata for String?);
    unsigned int v6 = v76;
    if (v76)
    {
      id v7 = v75;
    }

    else if ((*(_BYTE *)(v1 + 14) & 1) != 0 {
           && (outlined init with take of LocalePreferences?( v1,  (uint64_t)v71,  &demangling cache variable for type metadata for URLParseInfo?),  outlined init with take of LocalePreferences?( (uint64_t)v71,  (uint64_t)&v77,  &demangling cache variable for type metadata for URLParseInfo?),  v77))
    }
    {
      if ((*(_BYTE *)(v77 + 168) & 1) != 0) {
        __int16 v11 = MEMORY[0x186E1BFF4](0LL, 0xE000000000000000LL);
      }
      else {
        __int16 v11 = String.subscript.getter();
      }
      id v7 = MEMORY[0x186E1B610](v11);
      unsigned int v6 = v15;
      swift_bridgeObjectRelease();
    }

    else
    {
      id v7 = 0LL;
      unsigned int v6 = 0xE000000000000000LL;
    }

    uint64_t v16 = specialized Collection.first.getter(v7, v6);
    outlined retain of String?((uint64_t)v72);
    swift_bridgeObjectRelease();
    v17._countAndFlagsBits = 12079LL;
    v17._object = (void *)0xE200000000000000LL;
    String.append(_:)(v17);
    goto LABEL_55;
  }

  outlined init with take of LocalePreferences?( v1 + 104,  (uint64_t)v72,  &demangling cache variable for type metadata for String?);
  id result = outlined init with take of LocalePreferences?( (uint64_t)v72,  (uint64_t)&v75,  &demangling cache variable for type metadata for String?);
  uint64_t v9 = v76;
  if (v76)
  {
    id v10 = v75;
  }

  else if ((*(_BYTE *)(v1 + 14) & 1) != 0 {
         && (outlined init with take of LocalePreferences?( v1,  (uint64_t)v71,  &demangling cache variable for type metadata for URLParseInfo?),  id result = outlined init with take of LocalePreferences?( (uint64_t)v71,  (uint64_t)&v77,  &demangling cache variable for type metadata for URLParseInfo?),  v77))
  }
  {
    if ((*(_BYTE *)(v77 + 168) & 1) != 0) {
      id v12 = MEMORY[0x186E1BFF4](0LL, 0xE000000000000000LL);
    }
    else {
      id v12 = String.subscript.getter();
    }
    id v10 = MEMORY[0x186E1B610](v12);
    uint64_t v9 = v18;
    id result = swift_bridgeObjectRelease();
  }

  else
  {
    id v10 = 0LL;
    uint64_t v9 = 0xE000000000000000LL;
  }

  __int16 v19 = 65540LL;
  if ((v9 & 0x1000000000000000LL) != 0) {
    uint64_t v20 = (v10 >> 59) & 1;
  }
  else {
    uint64_t v20 = 1LL;
  }
  uint64_t v21 = HIBYTE(v9) & 0xF;
  uint64_t v22 = v10 & 0xFFFFFFFFFFFFLL;
  if ((v9 & 0x1000000000000000LL) == 0)
  {
    uint64_t v23 = 65540LL;
    goto LABEL_38;
  }

  if ((v9 & 0x2000000000000000LL) != 0) {
    uint64_t v22 = HIBYTE(v9) & 0xF;
  }
  if (v22)
  {
    uint64_t v23 = String.UTF8View._foreignIndex(after:)();
    uint64_t v22 = v10 & 0xFFFFFFFFFFFFLL;
LABEL_38:
    if ((v9 & 0x2000000000000000LL) == 0) {
      uint64_t v21 = v22;
    }
    if (v23 >> 14 == 4 * v21
      || (id v24 = specialized Collection.first.getter(v10, v9), (v24 & 0x100) != 0)
      || v24 != 47)
    {
      outlined retain of String?((uint64_t)v72);
      swift_bridgeObjectRelease();
      goto LABEL_55;
    }

    if ((v9 & 0x1000000000000000LL) != 0)
    {
      if (!v21) {
        goto LABEL_112;
      }
      __int16 v19 = String.UTF8View._foreignIndex(after:)();
    }

    if ((v19 & 0xC) == 4LL << v20) {
      __int16 v19 = _StringGuts._slowEnsureMatchingEncoding(_:)(v19, v10, v9);
    }
    uint64_t v20 = v19 >> 16;
    if (v19 >> 16 < v21)
    {
      if ((v9 & 0x1000000000000000LL) != 0)
      {
        uint64_t v26 = String.UTF8View._foreignSubscript(position:)();
      }

      else
      {
        if ((v9 & 0x2000000000000000LL) == 0)
        {
          if ((v10 & 0x1000000000000000LL) != 0)
          {
            uint64_t v25 = (v9 & 0xFFFFFFFFFFFFFFFLL) + 32;
LABEL_53:
            uint64_t v26 = *(_BYTE *)(v25 + v20);
            goto LABEL_105;
          }

    *a2 = 0LL;
    a2[1] = 0LL;
    a2[2] = 0LL;
    return;
  }

  outlined retain of URLComponents((uint64_t)&v34);
  uint64_t v16 = URLComponents._URLComponents.computedString.getter();
  __int16 v15 = v17;
  outlined release of URLComponents((uint64_t)&v34);
  if (!v15) {
    goto LABEL_8;
  }
LABEL_5:
  if (v13)
  {
    swift_retain();
    unint64_t v18 = v13;
    swift_retain();
    if (_foundation_swift_url_feature_enabled())
    {
      *(void *)uint64_t v25 = v13;
      *(void *)&v25[8] = v12;
      *(void *)&v25[16] = v14;
      __int16 v19 = v18;
      swift_retain();
      swift_retain();
      URL.init(string:relativeTo:)(v16, v15, (id *)v25, a2);
      swift_bridgeObjectRelease();
      outlined consume of URL?(v13);
      outlined consume of URL?(v13);
    }

    else
    {
      uint64_t v20 = (const __CFAllocator *)*MEMORY[0x189604DB0];
      uint64_t v21 = (const __CFString *)String._bridgeToObjectiveCImpl()();
      swift_bridgeObjectRelease();
      uint64_t v22 = CFURLCreateWithString(v20, v21, (CFURLRef)v18);
      swift_unknownObjectRelease();
      if (v22)
      {
        URL.init(reference:)(v22, v25);
        outlined consume of URL?(v13);

        uint64_t v23 = *(void *)v25;
        id v24 = *(_OWORD *)&v25[8];
      }

      else
      {
        outlined consume of URL?(v13);
        uint64_t v23 = 0LL;
        id v24 = 0uLL;
      }

      *a2 = v23;
      *(_OWORD *)(a2 + 1) = v24;
    }
  }

  else
  {
    swift_bridgeObjectRelease();
    uint64_t v30 = v40;
    id v31 = v41;
    v32[0] = v42[0];
    *(_OWORD *)((char *)v32 + 10) = *(_OWORD *)((char *)v42 + 10);
    uint64_t v26 = v36;
    unint64_t v27 = v37;
    uint64_t v28 = v38;
    uint64_t v29 = v39;
    *(_OWORD *)uint64_t v25 = v34;
    *(_OWORD *)&v25[16] = v35;
    URLComponents.url.getter(a2);
  }

    swift_release();
    v156._countAndFlagsBits = 2683LL;
    v156._object = (void *)0xE200000000000000LL;
    String.append(_:)(v153);
    swift_bridgeObjectRelease();
    v23._countAndFlagsBits = 125LL;
    v23._object = (void *)0xE100000000000000LL;
    String.append(_:)(v23);
    String.append(_:)(v156);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    String.append(_:)(v154);
    __int16 v11 = (uint64_t)v143;
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    id result = swift_bridgeObjectRelease();
    object = v113;
    uint64_t v9 = v114;
    uint64_t v22 = v145;
    __int16 v15 = (uint64_t)v139;
    uint64_t v17 = v141;
    if (v145 != v114) {
      continue;
    }
    break;
  }

  outlined release of AttributedString.Runs((uint64_t)&v165);
  uint64_t v13 = v163;
LABEL_156:
  swift_release();
  swift_release();
  return v13;
}

  AttributedStringProtocol.__guts.getter(a3, a5);
  (*(void (**)(__int128 *__return_ptr, ValueMetadata *, uint64_t))(a5 + 32))(&v101, a3, a5);
  int v59 = v101;
  __int16 v15 = v102;
  (*(void (**)(__int128 *__return_ptr, ValueMetadata *, uint64_t))(a5 + 40))(&v88, a3, a5);
  v124 = v59;
  v125 = v15;
  v126 = v88;
  v127 = v89;
  AttributedStringProtocol.__guts.getter(a4, a6);
  (*(void (**)(__int128 *__return_ptr, ValueMetadata *, uint64_t))(a6 + 32))(&v101, a4, a6);
  uint64_t v60 = v101;
  uint64_t v16 = v102;
  (*(void (**)(__int128 *__return_ptr, ValueMetadata *, uint64_t))(a6 + 40))(&v88, a4, a6);
  v120 = v60;
  v121 = v16;
  v122 = v88;
  v123 = v89;
  uint64_t v17 = swift_retain();
  AttributedString.Runs.init(_:in:)(v17, &v88);
  unint64_t v18 = swift_retain();
  AttributedString.Runs.init(_:in:)(v18, &v101);
  v85 = v98;
  v86 = v99;
  v87 = v100;
  v81 = v94;
  v82 = v95;
  v83 = v96;
  v84 = v97;
  v77 = v90;
  v78 = v91;
  v79 = v92;
  v80 = v93;
  v75 = v88;
  v76 = v89;
  v72 = v111;
  v73 = v112;
  v74 = v113;
  v68 = v107;
  v69 = v108;
  v70 = v109;
  v71 = v110;
  v64 = v103;
  v65 = v104;
  v66 = v105;
  v67 = v106;
  v62 = v101;
  v63 = v102;
  __int16 v19 = specialized static AttributedString.Guts._characterwiseIsEqual(_:to:)((uint64_t)&v75, &v62);
  outlined release of AttributedString.Runs((uint64_t)&v101);
  outlined release of AttributedString.Runs((uint64_t)&v88);
  swift_release();
LABEL_14:
  swift_release();
  return v19 & 1;
}

        *(void *)&uint64_t v40 = swift_slowAlloc();
        *((void *)&v40 + 1) = 0x2000LL;
        CFTypeRef v41 = 0LL;
        BOOL v42 = 0LL;
        unint64_t v43 = 0xC000000000000000LL;
        _XMLPlistEncodingFormat.Writer.append(_:)( (uint64_t)"<?xml version=1.0 encoding=UTF-8?>\n <!DOCTYPE plist PUBLIC -//Apple//DTD PLIST 1.0//EN http://www.apple.com/DTDs/PropertyList-1.0.d td>\n <plist version=1.0>\n",  164LL);
        uint64_t v38 = v7;
        unsigned int v39 = v8;
        _XMLPlistEncodingFormat.Writer.append(_:indentation:)((uint64_t)&v38, 0LL);
        *(void *)&uint64_t v38 = 0x3E7473696C702F3CLL;
        *((void *)&v38 + 1) = 0xE90000000000000ALL;
        specialized String.withUTF8<A>(_:)((uint64_t *)&v38);
        swift_bridgeObjectRelease();
        if (v41 >= 1) {
          Data._Representation.append(contentsOf:)();
        }
        objc_super v3 = v42;
        if ((void)v40) {
          MEMORY[0x186E20E60](v40, -1LL, -1LL);
        }
        outlined consume of _XMLPlistEncodingFormat.Reference(v7, *((unint64_t *)&v7 + 1), v8);
        break;
      default:
        goto LABEL_8;
    }
  }

  return v3;
}

  uint64_t v17 = 1;
LABEL_11:
  (*(void (**)(_BYTE *, uint64_t))(v7 + 8))(v12, v6);
  return v17 & 1;
}

  Data._Representation.append(contentsOf:)();
}

          specialized Array.replaceSubrange<A>(_:with:)(0LL, *(void *)(v14 + 16));
          return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8))(v11, v10);
        }

        v66 = swift_isUniquelyReferenced_nonNull_native();
        *(void *)(v23 + 24) = v24;
        if ((v66 & 1) == 0)
        {
          v96 = *(void *)(v0 + 16);
          id v24 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  *((void *)v24 + 2) + 1LL,  1,  v24);
          *(void *)(v96 + 24) = v24;
        }

        v68 = *((void *)v24 + 2);
        v67 = *((void *)v24 + 3);
        v69 = v68 + 1;
        if (v68 >= v67 >> 1) {
          id v24 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (char *)(v67 > 1),  v68 + 1,  1,  v24);
        }
        v70 = *(void *)(v0 + 16);
        *((void *)v24 + 2) = v69;
        v71 = &v24[v68];
        v72 = -62;
        goto LABEL_74;
      }

      v93 = (void *)swift_task_alloc();
      *(void *)(v0 + 72) = v93;
      v94 = specialized AsyncLineSequence.AsyncIterator.next();
    }

          specialized Array.replaceSubrange<A>(_:with:)(0LL, *(void *)(v14 + 16));
          return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8))(v11, v10);
        }

        v66 = swift_isUniquelyReferenced_nonNull_native();
        *(void *)(v23 + 24) = v24;
        if ((v66 & 1) == 0)
        {
          v96 = *(void *)(v0 + 16);
          id v24 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  *((void *)v24 + 2) + 1LL,  1,  v24);
          *(void *)(v96 + 24) = v24;
        }

        v68 = *((void *)v24 + 2);
        v67 = *((void *)v24 + 3);
        v69 = v68 + 1;
        if (v68 >= v67 >> 1) {
          id v24 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (char *)(v67 > 1),  v68 + 1,  1,  v24);
        }
        v70 = *(void *)(v0 + 16);
        *((void *)v24 + 2) = v69;
        v71 = &v24[v68];
        v72 = -62;
        goto LABEL_74;
      }

      v93 = (void *)swift_task_alloc();
      *(void *)(v0 + 72) = v93;
      v94 = specialized AsyncLineSequence.AsyncIterator.next();
    }

          specialized Array.replaceSubrange<A>(_:with:)(0LL, *(void *)(v14 + 16));
          return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8))(v11, v10);
        }

        v66 = swift_isUniquelyReferenced_nonNull_native();
        *(void *)(v23 + 24) = v24;
        if ((v66 & 1) == 0)
        {
          v96 = *(void *)(v0 + 16);
          id v24 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  *((void *)v24 + 2) + 1LL,  1,  v24);
          *(void *)(v96 + 24) = v24;
        }

        v68 = *((void *)v24 + 2);
        v67 = *((void *)v24 + 3);
        v69 = v68 + 1;
        if (v68 >= v67 >> 1) {
          id v24 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (char *)(v67 > 1),  v68 + 1,  1,  v24);
        }
        v70 = *(void *)(v0 + 16);
        *((void *)v24 + 2) = v69;
        v71 = &v24[v68];
        v72 = -62;
        goto LABEL_74;
      }

      v93 = (void *)swift_task_alloc();
      *(void *)(v0 + 72) = v93;
      v94 = specialized AsyncLineSequence.AsyncIterator.next();
    }

  uint64_t v16 = *v3;
  uint64_t v17 = v3[1];
  unint64_t v18 = (__int128 *)v3[2];
  __int16 v19 = v3[3];
  uint64_t v20 = v3[4];
  uint64_t v21 = v3[5];
  uint64_t v22 = v3[6];
  uint64_t v23 = v3[7];
  id v24 = v3[8];
  uint64_t v25 = *(_OWORD *)(*v3 + 32);
  v466 = *(_OWORD *)(*v3 + 16);
  v467 = v25;
  v468 = *(_OWORD *)(v16 + 48);
  v351 = v18;
  v352 = v17;
  v469 = v17;
  v470 = v18;
  v349 = v20;
  v350 = v19;
  v471 = v19;
  v472 = v20;
  v347 = v22;
  v348 = v21;
  v473 = v21;
  v474 = v22;
  v343 = v24;
  v345 = v23;
  v475 = v23;
  v476 = v24;
  outlined retain of Locale(a2);
  swift_unknownObjectRetain();
  BigSubstring.UnicodeScalarView.subscript.getter();
  swift_unknownObjectRelease();
  v341 = BigSubstring.UnicodeScalarView.isIdentical(to:)();
  v354 = (__int128 *)a2;
  outlined release of Locale(a2);
  outlined release of Locale((uint64_t)v397);
  uint64_t v26 = *v3;
  unint64_t v27 = *(_OWORD *)(*v3 + 32);
  v463 = *(_OWORD *)(*v3 + 16);
  v464 = v27;
  v465 = *(_OWORD *)(v26 + 48);
  id result = BigString.isEmpty.getter();
  v362 = v3;
  v355 = (unint64_t *)a1;
  if ((result & 1) != 0)
  {
    uint64_t v29 = 0LL;
    v338 = MEMORY[0x18961AFF0];
    goto LABEL_41;
  }

  uint64_t v30 = *(void *)a1;
  if (*(void *)a1 >= 0x800uLL && (*(void *)(a1 + 32) ^ v30) <= 0x3FF)
  {
    BigString.utf8.getter();
    uint64_t v30 = BigString.UTF8View.index(before:)();
    id result = outlined release of Locale((uint64_t)v398);
  }

  id v31 = *(void *)(v26 + 64);
  uint64_t v32 = *(void *)(v26 + 80);
  if (v31) {
    uint64_t v33 = *(void *)(v26 + 80);
  }
  else {
    uint64_t v33 = 0LL;
  }
  unint64_t v34 = v30 >> 11;
  uint64_t v35 = *(void *)(v26 + 72);
  uint64_t v36 = *(void *)(v26 + 88);
  if (v31 && v34 < v32 && *(_WORD *)(v31 + 16))
  {
    v370 = *(void *)(v26 + 72);
    unint64_t v37 = *(unsigned __int8 *)(v31 + 18);
    if (*(_BYTE *)(v31 + 18))
    {
      id result = swift_unknownObjectRetain_n();
      uint64_t v29 = -15LL;
      uint64_t v38 = v31;
      while (1)
      {
        uint64_t v40 = *(unsigned __int16 *)(v38 + 16);
        if (!*(_WORD *)(v38 + 16)) {
          goto LABEL_23;
        }
        CFTypeRef v41 = *(void *)(v38 + 40);
        BOOL v42 = __OFSUB__(v34, v41);
        unint64_t v43 = v34 - v41;
        if (v42) {
          goto LABEL_354;
        }
        if (__OFADD__(v43, 1LL))
        {
LABEL_355:
          __break(1u);
LABEL_356:
          __break(1u);
LABEL_357:
          __break(1u);
LABEL_358:
          __break(1u);
LABEL_359:
          __break(1u);
LABEL_360:
          __break(1u);
LABEL_361:
          __break(1u);
LABEL_362:
          __break(1u);
LABEL_363:
          __break(1u);
LABEL_364:
          __break(1u);
LABEL_365:
          __break(1u);
LABEL_366:
          __break(1u);
LABEL_367:
          __break(1u);
LABEL_368:
          __break(1u);
LABEL_369:
          __break(1u);
LABEL_370:
          __break(1u);
LABEL_371:
          __break(1u);
LABEL_372:
          __break(1u);
LABEL_373:
          __break(1u);
          goto LABEL_374;
        }

        if (v43 + 1 >= 1) {
          break;
        }
        uint64_t v40 = 0LL;
LABEL_24:
        unsigned int v39 = (4 * *(_BYTE *)(v38 + 18) + 8) & 0x3C;
        unint64_t v37 = ((-15LL << v39) - 1) & v37 | (v40 << v39);
        a1 = *(void *)(v38 + 24 + 24 * v40);
        swift_unknownObjectRetain();
        id result = swift_unknownObjectRelease();
        uint64_t v38 = a1;
        if (!*(_BYTE *)(a1 + 18)) {
          goto LABEL_295;
        }
      }

      if ((_DWORD)v40 != 1)
      {
        unint64_t v44 = (uint64_t *)(v38 + 64);
        id v45 = 1LL;
        while (1)
        {
          unint64_t v46 = *v44;
          v44 += 3;
          unint64_t v34 = v43 - v46;
          if (__OFSUB__(v43, v46)) {
            goto LABEL_336;
          }
          if (__OFADD__(v34, 1LL)) {
            goto LABEL_337;
          }
          if (v34 + 1 < 1) {
            break;
          }
          ++v45;
          unint64_t v43 = v34;
          if (v40 == v45) {
            goto LABEL_23;
          }
        }

        uint64_t v40 = v45;
        unint64_t v34 = v43;
        goto LABEL_24;
      }

      unint64_t v34 = v43;
LABEL_23:
      if (v34) {
        goto LABEL_353;
      }
      goto LABEL_24;
    }

    swift_unknownObjectRetain_n();
    a1 = v31;
LABEL_295:
    id result = specialized Rope._UnsafeHandle.findSlot<A>(at:in:preferEnd:)( v34,  0,  (_WORD *)(a1 + 16),  (uint64_t *)(a1 + 24));
    if (result < 0) {
      goto LABEL_382;
    }
    v314 = result;
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    unint64_t v48 = v37 & 0xFFFFFFFFFFFFF0FFLL | (v314 << 8);
    uint64_t v35 = v370;
    goto LABEL_39;
  }

  unint64_t v47 = swift_unknownObjectRetain_n();
  unint64_t v48 = specialized Rope._endPath.getter(v47);
  swift_unknownObjectRelease();
  a1 = 0LL;
  uint64_t v29 = 0LL;
  unint64_t v49 = 0LL;
  if (v31)
  {
LABEL_39:
    swift_unknownObjectRetain();
    specialized Rope._Node.distanceFromStart<A>(to:in:)(v36, v48, a1, v31, v35);
    swift_unknownObjectRelease_n();
    uint64_t v29 = 0LL;
    unint64_t v49 = a1;
  }

  uint64_t v50 = *(void *)(v26 + 64);
  v51 = *(void *)(v26 + 72);
  id v52 = *(void *)(v26 + 80);
  uint64_t v53 = *(void *)(v26 + 88);
  swift_unknownObjectRetain();
  specialized Rope.subscript.getter(v36, v48, v49, v50, v51, v52, v53);
  swift_unknownObjectRelease();
  v54 = swift_bridgeObjectRetain();
  v338 = specialized _NativeDictionary.filter(_:)(v54);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease_n();
  objc_super v3 = v362;
LABEL_41:
  a1 = *v3;
  v55 = v354;
  v56 = *v355 >> 11;
  v371 = v355[4] >> 11;
  v364 = v56;
  v339 = v371 - v56;
  if (v371 == v56)
  {
    v337 = *v355 >> 11;
    v358 = v337;
LABEL_162:
    v169 = *(_OWORD *)(a1 + 32);
    v455 = *(_OWORD *)(a1 + 16);
    v456 = v169;
    v457 = *(_OWORD *)(a1 + 48);
    BigString.utf8.getter();
    v368 = BigString.UTF8View.count.getter();
    outlined release of Locale((uint64_t)v407);
    v170 = (_OWORD *)*v3;
    v171 = *(_OWORD *)(*v3 + 32);
    v390 = *(_OWORD *)(*v3 + 16);
    v391 = v171;
    v392 = v170[3];
    *(void *)&v393 = v352;
    *((void *)&v393 + 1) = v351;
    *(void *)&v394 = v350;
    *((void *)&v394 + 1) = v349;
    *(void *)&v395 = v348;
    *((void *)&v395 + 1) = v347;
    *(void *)&v396 = v345;
    *((void *)&v396 + 1) = v343;
    swift_unknownObjectRetain();
    BigString.init()();
    v172 = v409;
    v170[1] = v408;
    v170[2] = v172;
    v170[3] = v410;
    swift_unknownObjectRelease();
    if ((v341 & 1) == 0)
    {
      v173 = v55[5];
      v452 = v55[4];
      v453 = v173;
      v454 = v55[6];
      v174 = v55[1];
      v448 = *v55;
      v449 = v174;
      v175 = v55[2];
      v451 = v55[3];
      v450 = v175;
      outlined retain of Locale((uint64_t)v55);
      lazy protocol witness table accessor for type BigSubstring.UnicodeScalarView and conformance BigSubstring.UnicodeScalarView();
      BigSubstring.UnicodeScalarView.replaceSubrange<A>(_:with:)();
    }

    v176 = (_OWORD *)*v3;
    v452 = v394;
    v453 = v395;
    v454 = v396;
    v448 = v390;
    v449 = v391;
    v451 = v393;
    v450 = v392;
    v177 = v393;
    v178 = v394;
    v179 = v395;
    v180 = v396;
    BigSubstring.UnicodeScalarView.base.getter();
    v181 = v421;
    v176[1] = v420;
    v176[2] = v181;
    v176[3] = v422;
    swift_unknownObjectRelease();
    specialized Range.init(uncheckedBounds:)( v177,  *((uint64_t *)&v177 + 1),  v178,  *((uint64_t *)&v178 + 1),  v179,  *((uint64_t *)&v179 + 1),  v180,  *((uint64_t *)&v180 + 1),  &v379);
    v182 = v380[0];
    *(_OWORD *)(v362 + 1) = v379;
    *(_OWORD *)(v362 + 3) = v182;
    v183 = v381;
    *(_OWORD *)(v362 + 5) = v380[1];
    *(_OWORD *)(v362 + 7) = v183;
    v184 = *v362;
    v185 = *(_OWORD *)(*v362 + 32);
    v447[9] = *(_OWORD *)(*v362 + 16);
    v447[10] = v185;
    v447[11] = *(_OWORD *)(v184 + 48);
    BigString.utf8.getter();
    id v31 = (uint64_t)v411;
    v186 = BigString.UTF8View.count.getter();
    id result = outlined release of Locale((uint64_t)v411);
    v187 = v186 - v368;
    if (__OFSUB__(v186, v368)) {
      goto LABEL_360;
    }
    v188 = v339 + v187;
    if (__OFADD__(v339, v187)) {
      goto LABEL_361;
    }
    swift_bridgeObjectRetain();
    v189 = MEMORY[0x18961AFF8];
    swift_bridgeObjectRetain();
    specialized AttributedString._InternalRuns.replaceUTF8Subrange<A>(_:with:)(v364, v371, v188, v338, v189);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v32 = *v362;
    v190 = *(_OWORD *)(*v362 + 32);
    v447[6] = *(_OWORD *)(*v362 + 16);
    v447[7] = v190;
    v447[8] = *(_OWORD *)(v32 + 48);
    BigString.utf8.getter();
    id v31 = (uint64_t)v412;
    v191 = BigString.UTF8View.count.getter();
    id result = outlined release of Locale((uint64_t)v412);
    v192 = v191 - v368;
    if (__OFSUB__(v191, v368)) {
      goto LABEL_362;
    }
    BOOL v42 = __OFADD__(v358, v192);
    v193 = v358 + v192;
    if (v42) {
      goto LABEL_363;
    }
    v194 = *(void *)(v32 + 80);
    if (!*(void *)(v32 + 64))
    {
      v233 = swift_unknownObjectRetain();
      specialized Rope._endPath.getter(v233);
      swift_unknownObjectRelease();
      goto LABEL_206;
    }

    *(void *)&v336 = v193;
    v195 = swift_unknownObjectRetain_n();
    specialized Rope._endPath.getter(v195);
    swift_unknownObjectRelease_n();
    if (!v194) {
      goto LABEL_206;
    }
    v196 = *(_OWORD *)(v32 + 32);
    v447[3] = *(_OWORD *)(v32 + 16);
    v447[4] = v196;
    v447[5] = *(_OWORD *)(v32 + 48);
    BigString.utf8.getter();
    BigString.startIndex.getter();
    v197 = BigString.UTF8View.index(_:offsetBy:)();
    v199 = v198;
    v201 = v200;
    v203 = v202;
    outlined release of Locale((uint64_t)v413);
    v204 = *(_OWORD *)(v32 + 32);
    v447[0] = *(_OWORD *)(v32 + 16);
    v447[1] = v204;
    v447[2] = *(_OWORD *)(v32 + 48);
    id v31 = (uint64_t)v447;
    id result = BigString.utf8.getter();
    if (__OFSUB__((void)v336, v337)) {
      goto LABEL_375;
    }
    v205 = BigString.UTF8View.index(_:offsetBy:)();
    v207 = v206;
    v209 = v208;
    v211 = v210;
    outlined release of Locale((uint64_t)v414);
    specialized Range.init(uncheckedBounds:)(v197, v199, v201, v203, v205, v207, v209, v211, v440);
    *(void *)&v439[0] = MEMORY[0x18961AFF0];
    v212 = *(_OWORD *)(v32 + 32);
    v444 = *(_OWORD *)(v32 + 16);
    v445 = v212;
    v446 = *(_OWORD *)(v32 + 48);
    BigString.unicodeScalars.getter();
    v334 = v440[0];
    v213 = BigString.UnicodeScalarView.index(roundingDown:)();
    v215 = v214;
    v217 = v216;
    v219 = v218;
    outlined release of Locale((uint64_t)v415);
    v220 = *(_OWORD *)(v32 + 32);
    v441 = *(_OWORD *)(v32 + 16);
    v442 = v220;
    v351 = (__int128 *)(v32 + 16);
    v443 = *(_OWORD *)(v32 + 48);
    BigString.unicodeScalars.getter();
    v333 = v440[4];
    id v31 = BigString.UnicodeScalarView.index(roundingUp:)();
    id result = outlined release of Locale((uint64_t)v416);
    *(void *)&v480 = v213;
    *((void *)&v480 + 1) = v215;
    *(void *)&v481 = v217;
    *((void *)&v481 + 1) = v219;
    uint64_t v38 = v213 >> 11;
    a1 = (unint64_t)v31 >> 11;
    id v31 = *(void *)(v32 + 64);
    if (v31) {
      v221 = *(void *)(v32 + 80);
    }
    else {
      v221 = 0LL;
    }
    if (v221 < v38) {
      goto LABEL_377;
    }
    v222 = *(void *)(v32 + 72);
    uint64_t v36 = *(void *)(v32 + 88);
    v348 = v32;
    if (!v31 || v38 >= *(void *)(v32 + 80) || !*(_WORD *)(v31 + 16))
    {
      swift_retain_n();
      v234 = swift_unknownObjectRetain_n();
      v235 = specialized Rope._endPath.getter(v234);
      swift_unknownObjectRelease();
      uint64_t v29 = 0LL;
      v223 = 0LL;
      if (!v31) {
        goto LABEL_341;
      }
      goto LABEL_208;
    }

    *(void *)&v366 = *(void *)(v32 + 72);
    unint64_t v37 = *(unsigned __int8 *)(v31 + 18);
    if (!*(_BYTE *)(v31 + 18))
    {
      swift_unknownObjectRetain_n();
      id result = swift_retain_n();
      v223 = v38;
      uint64_t v29 = v31;
LABEL_298:
      v105 = *(unsigned __int16 *)(v29 + 16);
      if (!*(_WORD *)(v29 + 16)) {
        goto LABEL_304;
      }
      v315 = *(void *)(v29 + 24);
      v106 = v223 - v315;
      if (__OFSUB__(v223, v315)) {
        goto LABEL_386;
      }
      if (__OFADD__(v106, 1LL)) {
        goto LABEL_387;
      }
      if (v106 + 1 <= 0)
      {
        v105 = 0LL;
      }

      else
      {
        if ((_DWORD)v105 != 1) {
          goto LABEL_322;
        }
        v223 -= v315;
LABEL_304:
        if (v223)
        {
          __break(1u);
LABEL_306:
LABEL_309:
          LOBYTE(v3_Block_object_dispose(va, 8) = 0;
          goto LABEL_310;
        }
      }

      goto LABEL_340;
    }

    swift_unknownObjectRetain_n();
    id result = swift_retain_n();
    v223 = v38;
    v224 = v31;
    while (1)
    {
      v226 = *(unsigned __int16 *)(v224 + 16);
      if (!*(_WORD *)(v224 + 16)) {
        goto LABEL_183;
      }
      v227 = *(void *)(v224 + 40);
      v228 = v223 - v227;
      if (__OFSUB__(v223, v227)) {
        goto LABEL_357;
      }
      if (__OFADD__(v228, 1LL)) {
        goto LABEL_358;
      }
      if (v228 + 1 <= 0)
      {
        v226 = 0LL;
      }

      else
      {
        if ((_DWORD)v226 == 1)
        {
          v223 -= v227;
          goto LABEL_183;
        }

        v229 = *(void *)(v224 + 64);
        BOOL v42 = __OFSUB__(v228, v229);
        v230 = v228 - v229;
        if (v42) {
          goto LABEL_372;
        }
        if (__OFADD__(v230, 1LL)) {
          goto LABEL_373;
        }
        if (v230 + 1 < 1)
        {
          v226 = 1LL;
          v223 = v228;
        }

        else
        {
          if ((_DWORD)v226 == 2)
          {
            v223 = v230;
LABEL_183:
            if (v223) {
              goto LABEL_356;
            }
            goto LABEL_184;
          }

          v231 = (void *)(v224 + 88);
          v232 = 2LL;
          while (1)
          {
            if (v226 == v232) {
              goto LABEL_350;
            }
            v223 = v230 - *v231;
            if (__OFSUB__(v230, *v231)) {
              goto LABEL_351;
            }
            if (__OFADD__(v223, 1LL)) {
              goto LABEL_352;
            }
            if (v223 + 1 < 1) {
              break;
            }
            ++v232;
            v231 += 3;
            v230 = v223;
            if (v226 == v232) {
              goto LABEL_183;
            }
          }

          v226 = v232;
          v223 = v230;
        }
      }

  uint64_t v4 = *(void *)v5;
  uint64_t v17 = *(_OWORD *)(*(void *)v5 + 32LL);
  v448 = *(_OWORD *)(*(void *)v5 + 16LL);
  v449 = v17;
  v450 = *(_OWORD *)(v4 + 48);
  id result = BigString.isEmpty.getter();
  v328 = v5;
  if ((result & 1) != 0)
  {
    __int16 v19 = 0LL;
    v317 = MEMORY[0x18961AFF0];
    goto LABEL_26;
  }

  uint64_t v20 = *v6;
  if (*v6 >= 0x800 && (v6[4] ^ v20) <= 0x3FF)
  {
    __int128 v2 = v6[2];
    BigString.utf8.getter();
    uint64_t v20 = BigString.UTF8View.index(before:)();
    id result = outlined release of Locale((uint64_t)v372);
  }

  __int16 v15 = *(void *)(v4 + 64);
  objc_super v3 = *(void *)(v4 + 80);
  if (v15) {
    uint64_t v21 = *(void *)(v4 + 80);
  }
  else {
    uint64_t v21 = 0LL;
  }
  uint64_t v13 = v20 >> 11;
  id v12 = *(void *)(v4 + 72);
  id v10 = *(void *)(v4 + 88);
  if (!v15 || (v13 < v3 ? (uint64_t v22 = *(unsigned __int16 *)(v15 + 16) == 0) : (uint64_t v22 = 1), v22))
  {
    uint64_t v23 = swift_unknownObjectRetain_n();
    id v24 = specialized Rope._endPath.getter(v23);
    swift_unknownObjectRelease();
    SEL v5 = 0LL;
    __int16 v19 = 0LL;
    uint64_t v25 = 0LL;
    if (!v15) {
      goto LABEL_25;
    }
LABEL_24:
    swift_unknownObjectRetain();
    specialized Rope._Node.distanceFromStart<A>(to:in:)(v10, v24, v5, v15, v12);
    swift_unknownObjectRelease_n();
    __int16 v19 = 0LL;
    uint64_t v25 = v5;
    goto LABEL_25;
  }

  v332 = a2;
  uint64_t v4 = *(void *)v5;
  unint64_t v18 = *(_OWORD *)(*(void *)v5 + 32LL);
  v452 = *(_OWORD *)(*(void *)v5 + 16LL);
  v453 = v18;
  v454 = *(_OWORD *)(v4 + 48);
  id result = BigString.isEmpty.getter();
  uint64_t v20 = MEMORY[0x18961AFF0];
  v331 = v5;
  if ((result & 1) != 0) {
    goto LABEL_25;
  }
  uint64_t v21 = *v7;
  if (*v7 >= 0x800 && (v7[4] ^ v21) <= 0x3FF)
  {
    objc_super v3 = v7[2];
    BigString.utf8.getter();
    uint64_t v21 = BigString.UTF8View.index(before:)();
    id result = outlined release of Locale((uint64_t)v376);
  }

  uint64_t v16 = *(void *)(v4 + 64);
  if (v16) {
    uint64_t v22 = *(void *)(v4 + 80);
  }
  else {
    uint64_t v22 = 0LL;
  }
  uint64_t v14 = v21 >> 11;
  if (v22 < (uint64_t)(v21 >> 11))
  {
LABEL_400:
    __break(1u);
    goto LABEL_401;
  }

  uint64_t v13 = *(void *)(v4 + 72);
  __int16 v11 = *(void *)(v4 + 88);
  if (v16)
  {
    if (v14 < *(void *)(v4 + 80) && *(_WORD *)(v16 + 16) != 0)
    {
LABEL_40:
      v349 = v13;
      BOOL v42 = *(unsigned __int8 *)(v16 + 18);
      if (*(_BYTE *)(v16 + 18))
      {
        id result = swift_unknownObjectRetain_n();
        unint64_t v43 = -15LL;
        objc_super v3 = 24LL;
        unint64_t v44 = v16;
        while (1)
        {
          unint64_t v46 = *(unsigned __int16 *)(v44 + 16);
          if (!*(_WORD *)(v44 + 16)) {
            goto LABEL_43;
          }
          unint64_t v47 = *(void *)(v44 + 40);
          unint64_t v48 = __OFSUB__(v14, v47);
          unint64_t v49 = v14 - v47;
          if (v48) {
            goto LABEL_385;
          }
          if (__OFADD__(v49, 1LL))
          {
LABEL_386:
            __break(1u);
LABEL_387:
            __break(1u);
LABEL_388:
            __break(1u);
LABEL_389:
            __break(1u);
LABEL_390:
            __break(1u);
LABEL_391:
            __break(1u);
LABEL_392:
            __break(1u);
            goto LABEL_393;
          }

          if (v49 + 1 >= 1) {
            break;
          }
          unint64_t v46 = 0LL;
LABEL_44:
          id v45 = (4 * *(_BYTE *)(v44 + 18) + 8) & 0x3C;
          BOOL v42 = ((-15LL << v45) - 1) & v42 | (v46 << v45);
          SEL v5 = *(void *)(v44 + 24 + 24 * v46);
          swift_unknownObjectRetain();
          id result = swift_unknownObjectRelease();
          unint64_t v44 = v5;
          if (!*(_BYTE *)(v5 + 18)) {
            goto LABEL_73;
          }
        }

        if ((_DWORD)v46 != 1)
        {
          uint64_t v50 = (uint64_t *)(v44 + 64);
          v51 = 1LL;
          while (1)
          {
            id v52 = *v50;
            v50 += 3;
            uint64_t v14 = v49 - v52;
            if (__OFSUB__(v49, v52)) {
              goto LABEL_367;
            }
            if (__OFADD__(v14, 1LL)) {
              goto LABEL_368;
            }
            if (v14 + 1 < 1) {
              break;
            }
            ++v51;
            unint64_t v49 = v14;
            if (v46 == v51) {
              goto LABEL_43;
            }
          }

          unint64_t v46 = v51;
          uint64_t v14 = v49;
          goto LABEL_44;
        }

        uint64_t v14 = v49;
LABEL_43:
        if (v14) {
          goto LABEL_384;
        }
        goto LABEL_44;
      }

      swift_unknownObjectRetain_n();
      SEL v5 = v16;
LABEL_73:
      id result = specialized Rope._UnsafeHandle.findSlot<A>(at:in:preferEnd:)( v14,  0,  (_WORD *)(v5 + 16),  (uint64_t *)(v5 + 24));
      if (result < 0) {
        goto LABEL_414;
      }
      uint64_t v60 = result;
      swift_unknownObjectRelease();
      swift_unknownObjectRelease();
      uint64_t v25 = v42 & 0xFFFFFFFFFFFFF0FFLL | (v60 << 8);
      uint64_t v26 = v5;
      uint64_t v13 = v349;
      if (!v16) {
        goto LABEL_24;
      }
      goto LABEL_23;
    }
  }

  id v24 = swift_unknownObjectRetain_n();
  uint64_t v25 = specialized Rope._endPath.getter(v24);
  swift_unknownObjectRelease();
  SEL v5 = 0LL;
  uint64_t v26 = 0LL;
  if (v16)
  {
LABEL_23:
    swift_unknownObjectRetain();
    specialized Rope._Node.distanceFromStart<A>(to:in:)(v11, v25, v5, v16, v13);
    swift_unknownObjectRelease_n();
    uint64_t v26 = v5;
  }

      __int16 v15 = String.UnicodeScalarView._foreignIndex(after:)();
LABEL_9:
      *a1 = v15;
      a2 = v24;
      if (v36 <= v15 >> 14) {
        return a2;
      }
    }

    if (v35 <= v25 >> 16) {
      goto LABEL_46;
    }
LABEL_31:
    if ((a6 & 0x1000000000000000LL) == 0) {
      goto LABEL_32;
    }
    goto LABEL_8;
  }

  return a2;
}

      id result = String.UnicodeScalarView._foreignIndex(after:)();
LABEL_9:
      *a1 = result;
      if (4 * v4 <= result >> 14) {
        return result;
      }
    }

    if (v4 <= v13 >> 16) {
      goto LABEL_54;
    }
LABEL_37:
    if ((a3 & 0x1000000000000000LL) == 0) {
      goto LABEL_38;
    }
    goto LABEL_8;
  }

  return result;
}

    if ((*v5 & 1) != 0) {
      goto LABEL_2;
    }
  }

  LOBYTE(v7) = swift_isUniquelyReferenced_nonNull_native();
  if ((v7 & 1) != 0)
  {
    uint64_t v8 = v6[2];
    if (!v8) {
      goto LABEL_23;
    }
  }

  else
  {
    id v7 = specialized _ArrayBuffer._consumeAndCreateNew()(v6);
    unsigned int v6 = v7;
    uint64_t v8 = v7[2];
    if (!v8)
    {
LABEL_23:
      __break(1u);
      goto LABEL_24;
    }
  }

  uint64_t v9 = v8 - 1;
  __int128 v2 = *(double *)&v6[v9 + 4];
  void v6[2] = v9;
  *(void *)(v1 + 600) = v6;
  id v10 = *(void *)(v1 + 168);
  __int16 v11 = __OFADD__(v10, 1LL);
  id v12 = v10 + 1;
  if (!v11)
  {
    *(void *)(v1 + 16_Block_object_dispose(va, 8) = v12;
    if ((*(_BYTE *)(v1 + 144) & 1) != 0) {
      goto LABEL_25;
    }
    if (v2 >= *(double *)(v1 + 128))
    {
LABEL_25:
      uint64_t v4 = 0;
      *(double *)objc_super v3 = v2;
      goto LABEL_26;
    }

    goto LABEL_8;
  }

  __break(1u);
LABEL_28:
  __break(1u);
LABEL_29:
  result.value = *(Foundation::Date *)&v2;
  result.is_nil = (char)v7;
  return result;
}

    if (v6 != v33) {
      continue;
    }
    break;
  }

  swift_bridgeObjectRelease_n();
  return 0LL;
}

  outlined init with copy of Any?(a2, (uint64_t)&v62);
  if (v64)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [AnyHashable : Any]);
    if ((swift_dynamicCast() & 1) == 0)
    {
      v54 = v7;
      goto LABEL_29;
    }

    __int16 v11 = *(void *)&v65[0];
    *(void *)&v65[0] = 0xD000000000000012LL;
    *((void *)&v65[0] + 1) = 0x80000001839CCE70LL;
    AnyHashable.init<A>(_:)();
    else {
      memset(v65, 0, sizeof(v65));
    }
    outlined destroy of AnyHashable((uint64_t)&v62);
    if (*((void *)&v65[1] + 1))
    {
      if ((swift_dynamicCast() & 1) != 0)
      {
        swift_bridgeObjectRelease();
        id v10 = (void *)*((void *)&v66 + 1);
        id v7 = v66;
      }
    }

    else
    {
      outlined destroy of Any?((uint64_t)v65);
    }

    *(void *)&v66 = static String._unconditionallyBridgeFromObjectiveC(_:)((void *)*MEMORY[0x189603AB0]);
    *((void *)&v66 + 1) = v15;
    AnyHashable.init<A>(_:)();
    v54 = v7;
    else {
      memset(v65, 0, sizeof(v65));
    }
    swift_bridgeObjectRelease();
    outlined destroy of AnyHashable((uint64_t)&v62);
    if (*((void *)&v65[1] + 1))
    {
      if ((swift_dynamicCast() & 1) != 0)
      {
        swift_bridgeObjectRelease();
        id v10 = (void *)*((void *)&v66 + 1);
        v54 = v66;
      }

      goto LABEL_29;
    }

    uint64_t v14 = (unsigned int *)v65;
  }

  else
  {
    v54 = v7;
    uint64_t v14 = &v62;
  }

  outlined destroy of Any?((uint64_t)v14);
LABEL_29:
  LODWORD(v1_Block_object_dispose(va, 8) = *(_DWORD *)a1;
  __int16 v19 = *(_WORD *)(a1 + 4);
  uint64_t v20 = *(_WORD *)(a1 + 6);
  LOWORD(v21) = *(_WORD *)(a1 + 8);
  uint64_t v22 = *(_WORD *)(a1 + 10);
  uint64_t v23 = *(_WORD *)(a1 + 12);
  LOWORD(v24) = *(_WORD *)(a1 + 14);
  LOWORD(v25) = *(_WORD *)(a1 + 16);
  LOWORD(a1) = *(_WORD *)(a1 + 18);
  v62 = v18;
  LOWORD(v63) = v19;
  WORD1(v63) = v20;
  WORD2(v63) = v21;
  WORD3(v63) = v22;
  WORD4(v63) = v23;
  WORD5(v63) = v24;
  WORD6(v63) = v25;
  HIWORD(v63) = a1;
  if (!_So9NSDecimala__length_getter(&v62))
  {
    v62 = v18;
    LOWORD(v63) = v19;
    WORD1(v63) = v20;
    WORD2(v63) = v21;
    WORD3(v63) = v22;
    WORD4(v63) = v23;
    WORD5(v63) = v24;
    WORD6(v63) = v25;
    HIWORD(v63) = a1;
    if (_So9NSDecimala__isNegative_getter(&v62))
    {
      swift_bridgeObjectRelease();
      return 5136718LL;
    }
  }

  v62 = v18;
  LOWORD(v63) = v19;
  WORD1(v63) = v20;
  WORD2(v63) = v21;
  WORD3(v63) = v22;
  WORD4(v63) = v23;
  WORD5(v63) = v24;
  WORD6(v63) = v25;
  HIWORD(v63) = a1;
  if (!_So9NSDecimala__length_getter(&v62))
  {
    swift_bridgeObjectRelease();
    return 48LL;
  }

  uint64_t v53 = v10;
  *(void *)&v66 = 0LL;
  *((void *)&v66 + 1) = 0xE000000000000000LL;
  v62 = v18;
  LOWORD(v63) = v19;
  WORD1(v63) = v20;
  WORD2(v63) = v21;
  WORD3(v63) = v22;
  WORD4(v63) = v23;
  WORD5(v63) = v24;
  WORD6(v63) = v25;
  HIWORD(v63) = a1;
  LODWORD(v65[0]) = v18;
  WORD2(v65[0]) = v19;
  WORD3(v65[0]) = v20;
  WORD4(v65[0]) = v21;
  WORD5(v65[0]) = v22;
  WORD6(v65[0]) = v23;
  HIWORD(v65[0]) = v24;
  LOWORD(v65[1]) = v25;
  WORD1(v65[1]) = a1;
  if ((int)_So9NSDecimala__exponent_getter((char *)v65) >= 1)
  {
    do
    {
      v26._countAndFlagsBits = 48LL;
      v26._object = (void *)0xE100000000000000LL;
      String.append(_:)(v26);
      LODWORD(v65[0]) = v18;
      WORD2(v65[0]) = v19;
      WORD3(v65[0]) = v20;
      WORD4(v65[0]) = v21;
      WORD5(v65[0]) = v22;
      WORD6(v65[0]) = v23;
      HIWORD(v65[0]) = v24;
      LOWORD(v65[1]) = v25;
      WORD1(v65[1]) = a1;
      unint64_t v27 = _So9NSDecimala__exponent_getter((char *)v65);
      _So9NSDecimala__exponent_setter((v27 - 1), &v62);
      LODWORD(v1_Block_object_dispose(va, 8) = v62;
      __int16 v19 = v63;
      uint64_t v20 = WORD1(v63);
      LOWORD(v21) = WORD2(v63);
      uint64_t v22 = WORD3(v63);
      uint64_t v23 = WORD4(v63);
      LOWORD(v24) = WORD5(v63);
      LOWORD(v25) = WORD6(v63);
      LOWORD(a1) = HIWORD(v63);
      *(void *)&v65[0] = __PAIR64__(v63, v62);
      *((void *)&v65[0] + 1) = *(void *)((char *)&v63 + 4);
      LODWORD(v65[1]) = HIDWORD(v63);
    }

    while ((int)_So9NSDecimala__exponent_getter((char *)v65) > 0);
  }

  LODWORD(v65[0]) = v18;
  WORD2(v65[0]) = v19;
  WORD3(v65[0]) = v20;
  WORD4(v65[0]) = v21;
  WORD5(v65[0]) = v22;
  WORD6(v65[0]) = v23;
  HIWORD(v65[0]) = v24;
  LOWORD(v65[1]) = v25;
  WORD1(v65[1]) = a1;
  if (!_So9NSDecimala__exponent_getter((char *)v65))
  {
    _So9NSDecimala__exponent_setter(1LL, &v62);
    LODWORD(v1_Block_object_dispose(va, 8) = v62;
    __int16 v19 = v63;
    uint64_t v20 = WORD1(v63);
    LOWORD(v21) = WORD2(v63);
    uint64_t v22 = WORD3(v63);
    uint64_t v23 = WORD4(v63);
    LOWORD(v24) = WORD5(v63);
    LOWORD(v25) = WORD6(v63);
    LOWORD(a1) = HIWORD(v63);
  }

  LODWORD(v65[0]) = v18;
  int v59 = v19;
  WORD2(v65[0]) = v19;
  WORD3(v65[0]) = v20;
  WORD4(v65[0]) = v21;
  WORD5(v65[0]) = v22;
  WORD6(v65[0]) = v23;
  HIWORD(v65[0]) = v24;
  LOWORD(v65[1]) = v25;
  WORD1(v65[1]) = a1;
  if (!_So9NSDecimala__length_getter(v65))
  {
LABEL_57:
    uint64_t v28 = v59;
LABEL_58:
    LODWORD(v65[0]) = v18;
    WORD2(v65[0]) = v28;
    WORD3(v65[0]) = v20;
    WORD4(v65[0]) = v21;
    WORD5(v65[0]) = v22;
    WORD6(v65[0]) = v23;
    HIWORD(v65[0]) = v24;
    LOWORD(v65[1]) = v25;
    WORD1(v65[1]) = a1;
    BOOL v42 = v28;
    unint64_t v43 = _So9NSDecimala__exponent_getter((char *)v65);
    unint64_t v44 = v42;
    if (v43 <= 0)
    {
      LODWORD(v65[0]) = v18;
      WORD2(v65[0]) = v42;
      WORD3(v65[0]) = v20;
      WORD4(v65[0]) = v21;
      WORD5(v65[0]) = v22;
      WORD6(v65[0]) = v23;
      HIWORD(v65[0]) = v24;
      LOWORD(v65[1]) = v25;
      WORD1(v65[1]) = a1;
      for (uint64_t i = v18; _So9NSDecimala__exponent_getter((char *)v65); LODWORD(v65[1]) = HIDWORD(v63))
      {
        v46._countAndFlagsBits = 48LL;
        v46._object = (void *)0xE100000000000000LL;
        String.append(_:)(v46);
        LODWORD(v65[0]) = i;
        WORD2(v65[0]) = v42;
        WORD3(v65[0]) = v20;
        WORD4(v65[0]) = v21;
        WORD5(v65[0]) = v22;
        WORD6(v65[0]) = v23;
        HIWORD(v65[0]) = v24;
        LOWORD(v65[1]) = v25;
        WORD1(v65[1]) = a1;
        unint64_t v47 = _So9NSDecimala__exponent_getter((char *)v65);
        _So9NSDecimala__exponent_setter((v47 + 1), &v62);
        uint64_t i = v62;
        BOOL v42 = v63;
        uint64_t v20 = WORD1(v63);
        LOWORD(v21) = WORD2(v63);
        uint64_t v22 = WORD3(v63);
        uint64_t v23 = WORD4(v63);
        LOWORD(v24) = WORD5(v63);
        LOWORD(v25) = WORD6(v63);
        LOWORD(a1) = HIWORD(v63);
        *(void *)&v65[0] = __PAIR64__(v63, v62);
        *((void *)&v65[0] + 1) = *(void *)((char *)&v63 + 4);
      }

      v48._object = v53;
      v48._countAndFlagsBits = v54;
      String.append(_:)(v48);
      v49._countAndFlagsBits = 48LL;
      v49._object = (void *)0xE100000000000000LL;
      String.append(_:)(v49);
      LODWORD(v1_Block_object_dispose(va, 8) = i;
      unint64_t v44 = v42;
    }

    LODWORD(v65[0]) = v18;
    WORD2(v65[0]) = v44;
    WORD3(v65[0]) = v20;
    WORD4(v65[0]) = v21;
    WORD5(v65[0]) = v22;
    WORD6(v65[0]) = v23;
    HIWORD(v65[0]) = v24;
    LOWORD(v65[1]) = v25;
    WORD1(v65[1]) = a1;
    if (_So9NSDecimala__isNegative_getter(v65))
    {
      v50._countAndFlagsBits = 45LL;
      v50._object = (void *)0xE100000000000000LL;
      String.append(_:)(v50);
    }

    v65[0] = v66;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ReversedCollection<String>);
    lazy protocol witness table accessor for type ReversedCollection<String> and conformance ReversedCollection<A>();
    CFTypeRef v41 = String.init<A>(_:)();
    swift_bridgeObjectRelease();
    return v41;
  }

  uint64_t v28 = v19;
  while (1)
  {
    uint64_t v60 = v28;
    LODWORD(v65[0]) = v18;
    WORD2(v65[0]) = v28;
    WORD3(v65[0]) = v20;
    WORD4(v65[0]) = v21;
    WORD5(v65[0]) = v22;
    WORD6(v65[0]) = v23;
    HIWORD(v65[0]) = v24;
    LOWORD(v65[1]) = v25;
    WORD1(v65[1]) = a1;
    if (!_So9NSDecimala__exponent_getter((char *)v65))
    {
      v29._object = v10;
      v29._countAndFlagsBits = v54;
      String.append(_:)(v29);
    }

    LODWORD(v65[0]) = v18;
    WORD2(v65[0]) = v60;
    WORD3(v65[0]) = v20;
    WORD4(v65[0]) = v21;
    WORD5(v65[0]) = v22;
    WORD6(v65[0]) = v23;
    HIWORD(v65[0]) = v24;
    LOWORD(v65[1]) = v25;
    WORD1(v65[1]) = a1;
    uint64_t v30 = _So9NSDecimala__exponent_getter((char *)v65);
    _So9NSDecimala__exponent_setter((v30 + 1), &v62);
    id v31 = v62;
    uint64_t v20 = WORD1(v63);
    uint64_t v23 = WORD5(v63);
    int v59 = v63;
    v57 = WORD3(v63);
    unint64_t v58 = WORD2(v63);
    v56 = WORD4(v63);
    uint64_t v22 = HIWORD(v63);
    v55 = WORD6(v63);
    NSDecimal.asVariableLengthInteger()( v62 | ((unint64_t)(unsigned __int16)v63 << 32) | ((unint64_t)WORD1(v63) << 48),  WORD2(v63) | ((unint64_t)WORD3(v63) << 16) | ((unint64_t)WORD4(v63) << 32) | ((unint64_t)WORD5(v63) << 48),  WORD6(v63) | (HIWORD(v63) << 16));
    unint64_t v18 = v32;
    uint64_t v21 = *(void *)(v32 + 16);
    if (!v21)
    {
      uint64_t v25 = 0;
      a1 = MEMORY[0x18961AFE8];
      uint64_t v36 = *(void *)(MEMORY[0x18961AFE8] + 16LL);
      if (!v36) {
        goto LABEL_50;
      }
LABEL_47:
      if (!*(_WORD *)(a1 + 2 * v36 + 30))
      {
        do
        {
          *(void *)(a1 + 16) = v36 - 1;
          if (v36 == 1) {
            break;
          }
        }

        while (!*(unsigned __int16 *)(a1 + 28 + 2 * v36--));
      }

      goto LABEL_50;
    }

    id v52 = v31;
    a1 = static Array._allocateBufferUninitialized(minimumCapacity:)();
    id v24 = a1 + 30;
    *(void *)(a1 + 16) = v21;
    bzero((void *)(a1 + 32), 2 * v21);
    uint64_t v33 = *(unsigned __int16 *)(2 * v21 + v18 + 30);
    unint64_t v34 = v33 / 0xA;
    while (1)
    {
      *(_WORD *)(v24 + 2 * v21) = v34;
      uint64_t v25 = v33 % 0xA;
      if (v21 == 1) {
        break;
      }
      uint64_t v33 = *(unsigned __int16 *)(v18 + 28 + 2 * v21) | (v25 << 16);
      unint64_t v34 = v33 / 0xA;
      uint64_t v35 = v21 - 2;
      --v21;
      if (v35 >= *(void *)(a1 + 16))
      {
        __break(1u);
        goto LABEL_57;
      }
    }

    id v31 = v52;
    uint64_t v36 = *(void *)(a1 + 16);
    if (v36) {
      goto LABEL_47;
    }
LABEL_50:
    swift_bridgeObjectRelease();
    LODWORD(v65[0]) = v31;
    WORD2(v65[0]) = v59;
    WORD3(v65[0]) = v20;
    WORD4(v65[0]) = v58;
    WORD5(v65[0]) = v57;
    WORD6(v65[0]) = v56;
    HIWORD(v65[0]) = v23;
    LOWORD(v65[1]) = v55;
    WORD1(v65[1]) = v22;
    NSDecimal.copyVariableLengthInteger(_:)((Swift::OpaquePointer)a1);
    if (v38) {
      break;
    }
    unint64_t v18 = *(void *)(a1 + 16);
    swift_bridgeObjectRelease();
    if (HIDWORD(v18)) {
      goto LABEL_67;
    }
    _So9NSDecimala__length_setter(v18, v65);
    v62 = v65[0];
    v63 = *(_OWORD *)((char *)v65 + 4);
    *(void *)&v65[0] = v25 | 0x30;
    v39._countAndFlagsBits = MEMORY[0x186E1B6AC](v65, 1LL);
    String.append(_:)(v39);
    swift_bridgeObjectRelease();
    LODWORD(v1_Block_object_dispose(va, 8) = v62;
    v61 = v63;
    uint64_t v20 = WORD1(v63);
    LOWORD(v21) = WORD2(v63);
    uint64_t v22 = WORD3(v63);
    uint64_t v23 = WORD4(v63);
    LOWORD(v24) = WORD5(v63);
    LOWORD(v25) = WORD6(v63);
    LOWORD(a1) = HIWORD(v63);
    *(void *)&v65[0] = __PAIR64__(v63, v62);
    *((void *)&v65[0] + 1) = *(void *)((char *)&v63 + 4);
    LODWORD(v65[1]) = HIDWORD(v63);
    uint64_t v40 = _So9NSDecimala__length_getter(v65);
    uint64_t v28 = v61;
    if (!v40) {
      goto LABEL_58;
    }
  }

  swift_bridgeObjectRelease();
  swift_unexpectedError();
  __break(1u);
LABEL_67:
  id result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

          if (v11 != ++v12) {
            continue;
          }
          swift_bridgeObjectRelease();
          break;
        default:
          goto LABEL_70;
      }

      break;
    }
  }

  else
  {
    uint64_t v13 = MEMORY[0x18961AFE8];
  }

  lazy protocol witness table accessor for type Calendar.Component and conformance Calendar.Component();
  unint64_t v18 = Set.init(minimumCapacity:)();
  v76 = v18;
  __int16 v19 = *(void *)(v13 + 16);
  if (v19)
  {
    for (uint64_t i = 0LL; i != v19; ++i)
    {
      uint64_t v21 = v13 + i;
      specialized Set._Variant.insert(_:)(__src, *(unsigned __int8 *)(v21 + 32));
    }

    swift_release();
    uint64_t v22 = v76;
  }

  else
  {
    uint64_t v22 = v18;
    swift_release();
  }

  uint64_t v23 = specialized Set.union<A>(_:)( (uint64_t)&outlined read-only object #0 of static Date.RelativeFormatStyle._roundedLargestComponentValue(refDate:for:calendar:allowedComponents:largestAllowedComponent:),  v22);
  v76 = v6;
  __src[0] = v7;
  Calendar.dateComponents(_:from:to:)(v23, (double *)&v76, __src, v44);
  swift_bridgeObjectRelease();
  if (v59)
  {
    uint64_t v40 = v58;
    BOOL v42 = 1;
    unsigned int v39 = v61;
  }

  else
  {
    if ((v61 & 1) != 0)
    {
LABEL_72:
      __break(1u);
      goto LABEL_73;
    }

    id v24 = v60;
    if (v60 < 0)
    {
      id v24 = -v60;
      if (__OFSUB__(0LL, v60))
      {
        __break(1u);
        JUMPOUT(0x18319E5A8LL);
      }
    }

    if (v24 >= 500000000)
    {
      uint64_t v25 = (v60 > 0) | (unint64_t)(v60 >> 63);
      uint64_t v26 = __OFADD__(*(void *)&v58, v25);
      *(void *)&unint64_t v27 = *(void *)&v58 + v25;
      if (v26)
      {
        __break(1u);
        JUMPOUT(0x18319E59CLL);
      }

      unsigned int v39 = 0;
      uint64_t v28 = *(void *)&v27 == 0x7FFFFFFFFFFFFFFFLL;
      if (v27 == NAN) {
        unint64_t v27 = 0.0;
      }
      uint64_t v40 = v27;
      unint64_t v58 = v27;
      BOOL v42 = v28;
      int v59 = v28;
    }

    else
    {
      uint64_t v40 = v58;
      unsigned int v39 = 0;
      BOOL v42 = 0;
    }
  }

  __src[0] = *(double *)v44;
  __src[1] = *(double *)&v44[1];
  __src[2] = *(double *)&v44[2];
  __src[3] = *(double *)&v44[3];
  __src[4] = *(double *)&v44[4];
  LOBYTE(__src[5]) = v45;
  __src[6] = v46;
  LOBYTE(__src[7]) = v47;
  __src[8] = v48;
  LOBYTE(__src[9]) = v49;
  __src[10] = v50;
  LOBYTE(__src[11]) = v51;
  __src[12] = v52;
  LOBYTE(__src[13]) = v53;
  __src[14] = v54;
  LOBYTE(__src[15]) = v55;
  __src[16] = v56;
  LOBYTE(__src[17]) = v57;
  __src[18] = v40;
  LOBYTE(__src[19]) = v42;
  *(void *)&__src[20] = v60;
  LOBYTE(__src[21]) = v39;
  __src[22] = v62;
  LOBYTE(__src[23]) = v63;
  __src[24] = v64;
  LOBYTE(__src[25]) = v65;
  __src[26] = v66;
  LOBYTE(__src[27]) = v67;
  __src[28] = v68;
  LOBYTE(__src[29]) = v69;
  __src[30] = v70;
  LOBYTE(__src[31]) = v71;
  LOBYTE(__src[33]) = v73;
  LOWORD(__src[35]) = v75;
  __src[32] = v72;
  __src[34] = v74;
  memcpy(__dst, __src, 0x11AuLL);
  outlined retain of DateComponents((uint64_t)__src);
  uint64_t v29 = swift_bridgeObjectRetain();
  uint64_t v30 = specialized Sequence.compactMap<A>(_:)(v29);
  swift_bridgeObjectRelease();
  outlined release of DateComponents((uint64_t)__src);
  if (*(void *)(v30 + 16)) {
    id v31 = *(_BYTE *)(v30 + 32);
  }
  else {
    id v31 = 18;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  uint64_t v32 = swift_bridgeObjectRetain();
  specialized BidirectionalCollection.last(where:)(v32, a4, v31, (char *)&v76);
  swift_bridgeObjectRelease();
  if (v76 != 18)
  {
    unint64_t v34 = *(void *)(static ICURelativeDateFormatter.sortedAllowedComponents + 16);
    if (!v34)
    {
LABEL_64:
      if ((v39 & 1) == 0) {
LABEL_65:
      }
        __asm { BR              X11 }

  swift_willThrow();
  return v5;
}

      lazy protocol witness table accessor for type NSPredicateConversionError and conformance NSPredicateConversionError();
      swift_allocError();
      *unint64_t v37 = 2;
      goto LABEL_9;
    }

    uint64_t v38 = v80;
    (*(void (**)(char *, void, uint64_t, uint64_t))(v80 + 56))(v35, 0LL, 1LL, v79);
    unsigned int v39 = v76;
    (*(void (**)(char *, char *, uint64_t))(v38 + 32))(v76, v35, v36);
    v84 = v36;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v83);
    (*(void (**)(uint64_t *, char *, uint64_t))(v38 + 16))(boxed_opaque_existential_1, v39, v36);
    _expressionCompatibleValue(for:)((uint64_t)v83, (uint64_t)&v85);
    objc_super v3 = 0LL;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v83);
    if (!*((void *)&v86 + 1))
    {
      (*(void (**)(char *, uint64_t))(v38 + 8))(v76, v36);
      outlined destroy of Any?((uint64_t)&v85, &demangling cache variable for type metadata for Any?);
      if (v33) {
        goto LABEL_9;
      }
      goto LABEL_8;
    }

    v82 = 0LL;
    outlined init with take of Any(&v85, &v88);
    __swift_project_boxed_opaque_existential_1(&v88, v89);
    v78 = (char *)objc_msgSend(v69, sel_expressionForConstantValue_, _bridgeAnythingToObjectiveC<A>(_:)());
    swift_unknownObjectRelease();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v88);
    (*(void (**)(char *, uint64_t))(v38 + 8))(v76, v36);

LABEL_18:
    unint64_t v49 = v73;
    uint64_t v50 = v72;
    (*(void (**)(char *, char *, uint64_t))(v70 + 16))(v71, &v26[*(int *)(v72 + 60)], v73);
    if (swift_dynamicCast())
    {
      outlined init with take of any PredicateExpression<Self.Output == B1>(&v85, (uint64_t)&v88);
      v51 = v89;
      id v52 = v90;
      __swift_project_boxed_opaque_existential_1(&v88, v89);
      uint64_t v53 = v82;
      v54 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(v52 + 16))(v29, v51, v52);
      v56 = v53;
      if (!v53)
      {
        int v59 = (id)v54;
        uint64_t v60 = v55;
        __swift_destroy_boxed_opaque_existential_1((uint64_t)&v88);
        v61 = v69;
        if ((v60 & 1) != 0) {
          goto LABEL_37;
        }
        goto LABEL_36;
      }

      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v88);
      v57 = 0LL;
      objc_super v3 = v56;
    }

    else
    {
      v87 = 0LL;
      v85 = 0u;
      v86 = 0u;
      outlined destroy of Any?((uint64_t)&v85, &demangling cache variable for type metadata for ConvertibleExpression?);
      objc_super v3 = 0LL;
      v57 = v82;
    }

    *(void *)&v88 = MEMORY[0x18961AFE8];
    (*(void (**)(uint64_t *__return_ptr, __int128 *, uint64_t))(*(void *)(v50 + 40) + 16LL))(&v91, &v88, v49);
    if (v57)
    {

LABEL_27:
      if (!v3)
      {
        lazy protocol witness table accessor for type NSPredicateConversionError and conformance NSPredicateConversionError();
        swift_allocError();
        *unint64_t v58 = 2;
      }

      swift_willThrow();

      goto LABEL_30;
    }

    v84 = MEMORY[0x1896184C8];
    LOBYTE(v83[0]) = v91 & 1;
    _expressionCompatibleValue(for:)((uint64_t)v83, (uint64_t)&v85);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v83);
    if (!*((void *)&v86 + 1))
    {
      outlined destroy of Any?((uint64_t)&v85, &demangling cache variable for type metadata for Any?);
      goto LABEL_27;
    }

    outlined init with take of Any(&v85, &v88);
    __swift_project_boxed_opaque_existential_1(&v88, v89);
    v62 = _bridgeAnythingToObjectiveC<A>(_:)();
    v61 = v69;
    int v59 = objc_msgSend(v69, sel_expressionForConstantValue_, v62);
    swift_unknownObjectRelease();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v88);

LABEL_36:
    LOBYTE(v8_Block_object_dispose(va, 8) = 1;
    v63 = v59;
    v64 = objc_msgSend(v61, sel_expressionForConstantValue_, _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)());
    swift_unknownObjectRelease();
    int v59 = objc_msgSend( objc_allocWithZone((Class)NSComparisonPredicate),  sel_initWithLeftExpression_rightExpression_modifier_type_options_,  v63,  v64,  0,  4,  0);

LABEL_37:
    v65 = String._bridgeToObjectiveCImpl()();
    swift_bridgeObjectRelease();
    v66 = v61;
    v67 = v78;
    objc_super v3 = (char *)objc_msgSend(v66, sel_expressionForSubquery_usingIteratorVariable_predicate_, v78, v65, v59);
    swift_unknownObjectRelease();

    return (uint64_t)v3;
  }

  __break(1u);
  return result;
}

  swift_willThrow();
LABEL_21:
  v34[2] = 0LL;
  swift_release();
  return v16;
}

    lazy protocol witness table accessor for type NSPredicateConversionError and conformance NSPredicateConversionError();
    swift_allocError();
    *unsigned int v39 = 2;
    goto LABEL_9;
  }

  unint64_t v37 = v124;
  (*(void (**)(char *, void, uint64_t, char *))(v123 + 56))(v36, 0LL, 1LL, v124);
  uint64_t v40 = v118;
  (*(void (**)(char *, char *, char *))(v38 + 32))(v118, v36, v37);
  v128 = v37;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v127);
  (*(void (**)(uint64_t *, char *, char *))(v38 + 16))(boxed_opaque_existential_1, v40, v37);
  _expressionCompatibleValue(for:)((uint64_t)v127, (uint64_t)&v129);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v127);
  if (!*((void *)&v130 + 1))
  {
    (*(void (**)(char *, char *))(v38 + 8))(v40, v37);
    outlined destroy of Any?((uint64_t)&v129, &demangling cache variable for type metadata for Any?);
    if (v35) {
      goto LABEL_9;
    }
    goto LABEL_8;
  }

  v126 = 0LL;
  unint64_t v44 = v3;
  outlined init with take of Any(&v129, &v132);
  __swift_project_boxed_opaque_existential_1(&v132, v133);
  uint64_t v53 = v38;
  BOOL v42 = objc_msgSend(v113, sel_expressionForConstantValue_, _bridgeAnythingToObjectiveC<A>(_:)());
  swift_unknownObjectRelease();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v132);
  (*(void (**)(char *, char *))(v53 + 8))(v118, v37);

  v51 = v117;
  id v52 = v116;
  id v31 = v33;
LABEL_18:
  v54 = &v44[*(int *)(v52 + 60)];
  (*(void (**)(char *, char *, uint64_t))(v114 + 16))(v115, v54, v51);
  if (!swift_dynamicCast())
  {
    v131 = 0LL;
    v129 = 0u;
    v130 = 0u;
    outlined destroy of Any?((uint64_t)&v129, &demangling cache variable for type metadata for ConvertibleExpression?);
    v64 = 0LL;
    v62 = MEMORY[0x18961AFE8];
    v63 = v126;
    goto LABEL_22;
  }

  v55 = v42;
  outlined init with take of any PredicateExpression<Self.Output == B1>(&v129, (uint64_t)&v132);
  v56 = v133;
  v57 = v134;
  __swift_project_boxed_opaque_existential_1(&v132, v133);
  unint64_t v58 = v126;
  int v59 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(v57 + 16))(v31, v56, v57);
  v61 = v58;
  v62 = MEMORY[0x18961AFE8];
  if (v58)
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v132);
    v63 = 0LL;
    v64 = v61;
    BOOL v42 = v55;
LABEL_22:
    *(void *)&v132 = v62;
    unint64_t v37 = v54;
    (*(void (**)(uint64_t *__return_ptr, __int128 *, uint64_t))(*(void *)(v52 + 40) + 16LL))( &v135,  &v132,  v51);
    if (v63)
    {

LABEL_27:
      if (!v64)
      {
        lazy protocol witness table accessor for type NSPredicateConversionError and conformance NSPredicateConversionError();
        swift_allocError();
        *v65 = 2;
      }

      swift_willThrow();

      goto LABEL_30;
    }

    v128 = (char *)MEMORY[0x1896184C8];
    LOBYTE(v127[0]) = v135 & 1;
    _expressionCompatibleValue(for:)((uint64_t)v127, (uint64_t)&v129);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v127);
    if (!*((void *)&v130 + 1))
    {
      outlined destroy of Any?((uint64_t)&v129, &demangling cache variable for type metadata for Any?);
      goto LABEL_27;
    }

    outlined init with take of Any(&v129, &v132);
    __swift_project_boxed_opaque_existential_1(&v132, v133);
    v69 = _bridgeAnythingToObjectiveC<A>(_:)();
    v68 = v113;
    v66 = objc_msgSend(v113, sel_expressionForConstantValue_, v69);
    swift_unknownObjectRelease();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v132);

    goto LABEL_36;
  }

  v66 = (id)v59;
  v67 = v60;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v132);
  v68 = v113;
  BOOL v42 = v55;
  if ((v67 & 1) == 0)
  {
LABEL_36:
    LOBYTE(v132) = 1;
    v70 = v66;
    v71 = objc_msgSend(v68, sel_expressionForConstantValue_, _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)());
    swift_unknownObjectRelease();
    v66 = objc_msgSend( objc_allocWithZone((Class)NSComparisonPredicate),  sel_initWithLeftExpression_rightExpression_modifier_type_options_,  v70,  v71,  0,  4,  0);
  }

  v72 = String._bridgeToObjectiveCImpl()();
  swift_bridgeObjectRelease();
  v73 = v42;
  v74 = objc_msgSend(v68, sel_expressionForSubquery_usingIteratorVariable_predicate_, v42, v72, v66);
  swift_unknownObjectRelease();

  if (objc_msgSend(v74, sel_expressionType) == (id)1)
  {
    v75 = objc_msgSend(v68, sel_expressionForKeyPath_, String._bridgeToObjectiveCImpl()());
    swift_unknownObjectRelease();
LABEL_57:
    *(void *)&v132 = 0LL;
    v111 = objc_msgSend(v68, sel_expressionForConstantValue_, _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)());
    swift_unknownObjectRelease();
    unint64_t v37 = (char *)objc_msgSend( objc_allocWithZone((Class)NSComparisonPredicate),  sel_initWithLeftExpression_rightExpression_modifier_type_options_,  v75,  v111,  0,  5,  0);

    return (uint64_t)v37;
  }

  if (objc_msgSend(v74, sel_expressionType) != (id)3) {
    goto LABEL_52;
  }
  v76 = &selRef_initWithTransform_;
  v77 = objc_msgSend(v74, sel_keyPath);
  v78 = static String._unconditionallyBridgeFromObjectiveC(_:)(v77);
  v80 = v79;

  *(void *)&v132 = 64LL;
  *((void *)&v132 + 1) = 0xE100000000000000LL;
  *(void *)&v129 = v78;
  *((void *)&v129 + 1) = v80;
  if ((v80 & 0x1000000000000000LL) != 0)
  {
    lazy protocol witness table accessor for type String and conformance String();
    StringProtocol._ephemeralString.getter();
    StringProtocol._ephemeralString.getter();
    v94 = (void *)String._bridgeToObjectiveCImpl()();
    swift_bridgeObjectRelease();
    v95 = String._bridgeToObjectiveCImpl()();
    swift_bridgeObjectRelease();
    v96 = objc_msgSend(v94, sel_rangeOfString_, v95);
    v98 = v97;
    swift_unknownObjectRelease();
    id result = swift_unknownObjectRelease();
    if (v96 == (id)0x7FFFFFFFFFFFFFFFLL)
    {
      v68 = v113;
      v76 = &selRef_initWithTransform_;
LABEL_48:
      swift_bridgeObjectRelease();
      goto LABEL_49;
    }

    v68 = v113;
    if (!__OFADD__(v96, v98))
    {
      StringProtocol._toUTF16Indices(_:)();
      swift_bridgeObjectRelease();
      goto LABEL_52;
    }

  swift_willThrow();
  return v2;
}

  swift_willThrow();
  return a1;
}

  swift_willThrow();
LABEL_28:
  *(void *)(v25 + 16) = 0LL;
  swift_release();
  return v36;
}

  swift_willThrow();
  return v36;
}

  swift_willThrow();
  return v15;
}

  swift_willThrow();
  return v30;
}

  swift_willThrow();
  return v15;
}

  id v31 = dispatch thunk of BinaryInteger.bitWidth.getter();
  ((void (*)(char *, char *, uint64_t))v27)(v14, v26, a2);
  if (v31 < 65)
  {
    uint64_t v35 = dispatch thunk of BinaryInteger.bitWidth.getter();
    v29(v14, a2);
    if (v35 != 64 || (dispatch thunk of static BinaryInteger.isSigned.getter() & 1) != 0) {
      goto LABEL_20;
    }
  }

  else
  {
    v29(v14, a2);
  }

  uint64_t v32 = v55;
  ((void (*)(char *, char *, uint64_t))v27)(v55, v26, a2);
  v57 = 0x7FFFFFFFFFFFFFFFLL;
  uint64_t v33 = dispatch thunk of static BinaryInteger.isSigned.getter();
  unint64_t v34 = dispatch thunk of BinaryInteger.bitWidth.getter();
  if ((v33 & 1) == 0)
  {
    if (v34 >= 64)
    {
      v56 = 0x7FFFFFFFFFFFFFFFLL;
      lazy protocol witness table accessor for type Int and conformance Int();
      goto LABEL_19;
    }

  if (v4 >= 1)
  {
    Data._Representation.append(contentsOf:)();
    *(void *)(v3 + 32) = 0LL;
  }

  Data._Representation.append(contentsOf:)();
}

  if (a1[14])
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }

  if (a1[18] >= 2uLL)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }

  if (a1[22])
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }

  swift_bridgeObjectRelease();
  if (a1[37])
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }

  if (a1[42] >= 2uLL)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }

  if (a1[46] >= 2uLL)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }

  if (a1[49] != 1LL) {
    swift_unknownObjectRelease();
  }
  if (a1[52] >= 2uLL)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

  id v24 = v15;
  uint64_t v25 = v16;
  unint64_t v58 = a7;
  v61 = v14;
  uint64_t v26 = extendedAttributeData(for:)((unint64_t *)&v61);
  if (v27 >> 60 == 15)
  {
    uint64_t v28 = (void *)MEMORY[0x18961AFF0];
LABEL_15:
    unint64_t v46 = v59 & 1;
    (*(void (**)(char *, uint64_t, id))(v10 + 16))(v12, v60, v9);
    unint64_t v47 = String.init<A>(_:)();
    unint64_t v49 = v48;
    MEMORY[0x1895F8858](v47);
    *(&v51 - _Block_object_dispose(va, 8) = v50;
    *(&v51 - 7) = v49;
    *(&v51 - 6) = 0LL;
    *((_BYTE *)&v51 - 40) = 0;
    *(&v51 - 4) = v46;
    *(&v51 - 3) = (uint64_t)v28;
    *((_BYTE *)&v51 - 16) = 0;
    specialized Data._Representation.withUnsafeBytes<A>(_:)( (uint64_t)_s10Foundation11writeToFile4path4data7options10attributes14reportProgressyAA9PathOrURLO_AA4DataVSo20NSDataWritingOptionsVSDySSAKGSbtKFySWKXEfU_TA_0,  (uint64_t)(&v51 - 10),  v24,  v25);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return outlined consume of Data?(v24, v25);
  }

  uint64_t v30 = v26;
  id v31 = v27;
  v54 = v7;
  v55 = v25;
  uint64_t v53 = v24;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Data)>);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_183720D90;
  *(void *)(inited + 32) = 0xD000000000000016LL;
  *(void *)(inited + 40) = 0x80000001839C8850LL;
  *(void *)(inited + 4_Block_object_dispose(va, 8) = v30;
  *(void *)(inited + 56) = v31;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Data>);
  uint64_t v28 = (void *)static _DictionaryStorage.allocate(capacity:)();
  v57 = *(void *)(inited + 32);
  uint64_t v33 = v30;
  unint64_t v34 = *(void *)(inited + 40);
  uint64_t v35 = *(void *)(inited + 48);
  uint64_t v36 = *(void *)(inited + 56);
  id v52 = v33;
  outlined copy of Data?(v33, v31);
  swift_retain();
  swift_bridgeObjectRetain();
  v56 = v35;
  unint64_t v37 = v35;
  uint64_t v38 = v36;
  unsigned int v39 = v57;
  outlined copy of Data._Representation(v37, v38);
  id result = specialized __RawDictionaryStorage.find<A>(_:)(v39, v34);
  if ((v40 & 1) != 0)
  {
    __break(1u);
  }

  else
  {
    v28[(result >> 6) + 8] |= 1LL << result;
    CFTypeRef v41 = (uint64_t *)(v28[6] + 16 * result);
    *CFTypeRef v41 = v39;
    v41[1] = v34;
    BOOL v42 = (uint64_t *)(v28[7] + 16 * result);
    uint64_t v25 = v55;
    *BOOL v42 = v56;
    v42[1] = v38;
    unint64_t v43 = v28[2];
    unint64_t v44 = __OFADD__(v43, 1LL);
    id v45 = v43 + 1;
    if (!v44)
    {
      v28[2] = v45;
      swift_release();
      swift_bridgeObjectRelease();
      outlined consume of Data?(v52, v31);
      id v24 = v53;
      goto LABEL_15;
    }
  }

  __break(1u);
  return result;
}

  __int16 v19 = v9;
  uint64_t v20 = v10;
  id v52 = a2;
  uint64_t v53 = v6;
  v54 = v3;
  v55 = v8;
  uint64_t v21 = extendedAttributeData(for:)((unint64_t *)&v55);
  if (v22 >> 60 == 15)
  {
    uint64_t v23 = (void *)MEMORY[0x18961AFF0];
LABEL_15:
    MEMORY[0x1895F8858](v21);
    v43[2] = v53;
    v43[3] = v5;
    v43[4] = v7;
    unint64_t v44 = 1;
    id v45 = v41;
    unint64_t v46 = v23;
    unint64_t v47 = 0;
    swift_retain();
    BOOL v42 = v53;
    swift_retain();
    specialized Data._Representation.withUnsafeBytes<A>(_:)( (uint64_t)_s10Foundation11writeToFile4path4data7options10attributes14reportProgressyAA9PathOrURLO_AA4DataVSo20NSDataWritingOptionsVSDySSAKGSbtKFySWKXEfU_TA_0,  (uint64_t)v43,  v19,  v20);
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();

    return outlined consume of Data?(v19, v20);
  }

  uint64_t v25 = v21;
  uint64_t v26 = v22;
  unint64_t v49 = v19;
  uint64_t v50 = v5;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Data)>);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_183720D90;
  *(void *)(inited + 32) = 0xD000000000000016LL;
  *(void *)(inited + 40) = 0x80000001839C8850LL;
  *(void *)(inited + 4_Block_object_dispose(va, 8) = v25;
  *(void *)(inited + 56) = v26;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Data>);
  uint64_t v23 = (void *)static _DictionaryStorage.allocate(capacity:)();
  uint64_t v28 = *(void *)(inited + 32);
  uint64_t v29 = *(void *)(inited + 40);
  uint64_t v30 = *(void *)(inited + 48);
  id v31 = *(void *)(inited + 56);
  unint64_t v48 = v25;
  uint64_t v32 = v25;
  uint64_t v33 = v30;
  outlined copy of Data?(v32, v26);
  swift_retain();
  swift_bridgeObjectRetain();
  v51 = v31;
  outlined copy of Data._Representation(v33, v31);
  id result = specialized __RawDictionaryStorage.find<A>(_:)(v28, v29);
  if ((v34 & 1) != 0)
  {
    __break(1u);
  }

  else
  {
    v23[(result >> 6) + 8] |= 1LL << result;
    uint64_t v35 = (uint64_t *)(v23[6] + 16 * result);
    void *v35 = v28;
    v35[1] = v29;
    uint64_t v36 = (uint64_t *)(v23[7] + 16 * result);
    SEL v5 = v50;
    unint64_t v37 = v51;
    void *v36 = v33;
    v36[1] = v37;
    uint64_t v38 = v23[2];
    unsigned int v39 = __OFADD__(v38, 1LL);
    uint64_t v40 = v38 + 1;
    if (!v39)
    {
      unint64_t v23[2] = v40;
      swift_release();
      swift_bridgeObjectRelease();
      uint64_t v21 = outlined consume of Data?(v48, v26);
      __int16 v19 = v49;
      goto LABEL_15;
    }
  }

  __break(1u);
  return result;
}

  if (((1LL << _) & 0x15AA) != 0) {
    return 31LL;
  }
  if (((1LL << _) & 0xA50) == 0)
  {
    if (_ == 2)
    {
      if (year >= *(void *)(v2 + 64))
      {
        if ((year & 3) != 0) {
          return 28LL;
        }
        if (__ROR8__(0x8F5C28F5C28F5C29LL * year + 0x51EB851EB851EB8LL, 2) >= 0x28F5C28F5C28F5DuLL) {
          return 29LL;
        }
        uint64_t v8 = 400LL;
      }

      else
      {
        uint64_t v8 = 4LL;
      }

      if (!(year % v8)) {
        return 29LL;
      }
      return 28LL;
    }

  lazy protocol witness table accessor for type GregorianCalendarError and conformance GregorianCalendarError();
  id result = swift_willThrowTypedImpl();
  *(_OWORD *)size_t v1 = xmmword_1837BEE50;
  *(_OWORD *)(v1 + 16) = xmmword_18372C2E0;
  *(_BYTE *)(v1 + 32) = 1;
  return result;
}

  if (v4 >= 1)
  {
    Data._Representation.append(contentsOf:)();
    v3[2] = 0LL;
  }

  Data._Representation.append(contentsOf:)();
}

  v15.value = value;
  return v15.value;
}

  uint64_t v16 = *v3;
  uint64_t v17 = v3[1];
  unint64_t v18 = v3[2];
  __int16 v19 = (__int128 *)v3[3];
  uint64_t v20 = v3[4];
  uint64_t v21 = v3[5];
  uint64_t v22 = v3[6];
  uint64_t v23 = v3[7];
  id v24 = v3[8];
  uint64_t v25 = *(_OWORD *)(*v3 + 32);
  v471 = *(_OWORD *)(*v3 + 16);
  v472 = v25;
  v473 = *(_OWORD *)(v16 + 48);
  v357 = v18;
  v358 = v17;
  v474 = v17;
  v475 = v18;
  v355 = v20;
  v356 = v19;
  v476 = v19;
  v477 = v20;
  v353 = v22;
  v354 = v21;
  v478 = v21;
  v479 = v22;
  v350 = v24;
  v352 = v23;
  v480 = v23;
  v481 = v24;
  outlined retain of Locale(a2);
  swift_unknownObjectRetain();
  BigSubstring.subscript.getter();
  swift_unknownObjectRelease();
  v348 = BigSubstring.isIdentical(to:)();
  v359 = (__int128 *)a2;
  outlined release of Locale(a2);
  outlined release of Locale((uint64_t)v402);
  uint64_t v26 = *v3;
  unint64_t v27 = *(_OWORD *)(*v3 + 32);
  v468 = *(_OWORD *)(*v3 + 16);
  v469 = v27;
  v470 = *(_OWORD *)(v26 + 48);
  id result = BigString.isEmpty.getter();
  v368 = v3;
  v360 = (unint64_t *)a1;
  if ((result & 1) != 0)
  {
    v345 = MEMORY[0x18961AFF0];
    goto LABEL_41;
  }

  uint64_t v29 = *(void *)a1;
  if (*(void *)a1 >= 0x800uLL && (*(void *)(a1 + 32) ^ v29) <= 0x3FF)
  {
    BigString.utf8.getter();
    uint64_t v29 = BigString.UTF8View.index(before:)();
    id result = outlined release of Locale((uint64_t)v403);
  }

  uint64_t v30 = *(void *)(v26 + 64);
  id v31 = *(void *)(v26 + 80);
  if (v30) {
    uint64_t v32 = *(void *)(v26 + 80);
  }
  else {
    uint64_t v32 = 0LL;
  }
  uint64_t v33 = v29 >> 11;
  unint64_t v34 = *(void *)(v26 + 72);
  uint64_t v35 = *(void *)(v26 + 88);
  if (v30 && v33 < v31 && *(_WORD *)(v30 + 16))
  {
    v375 = *(void *)(v26 + 72);
    uint64_t v36 = *(unsigned __int8 *)(v30 + 18);
    if (*(_BYTE *)(v30 + 18))
    {
      id result = swift_unknownObjectRetain_n();
      unint64_t v37 = 24LL;
      uint64_t v38 = v30;
      while (1)
      {
        uint64_t v40 = *(unsigned __int16 *)(v38 + 16);
        if (!*(_WORD *)(v38 + 16)) {
          goto LABEL_23;
        }
        CFTypeRef v41 = *(void *)(v38 + 40);
        BOOL v42 = __OFSUB__(v33, v41);
        unint64_t v43 = v33 - v41;
        if (v42) {
          goto LABEL_354;
        }
        if (__OFADD__(v43, 1LL))
        {
LABEL_355:
          __break(1u);
LABEL_356:
          __break(1u);
LABEL_357:
          __break(1u);
LABEL_358:
          __break(1u);
LABEL_359:
          __break(1u);
LABEL_360:
          __break(1u);
LABEL_361:
          __break(1u);
LABEL_362:
          __break(1u);
LABEL_363:
          __break(1u);
LABEL_364:
          __break(1u);
LABEL_365:
          __break(1u);
LABEL_366:
          __break(1u);
LABEL_367:
          __break(1u);
LABEL_368:
          __break(1u);
LABEL_369:
          __break(1u);
LABEL_370:
          __break(1u);
LABEL_371:
          __break(1u);
LABEL_372:
          __break(1u);
LABEL_373:
          __break(1u);
          goto LABEL_374;
        }

        if (v43 + 1 >= 1) {
          break;
        }
        uint64_t v40 = 0LL;
LABEL_24:
        unsigned int v39 = (4 * *(_BYTE *)(v38 + 18) + 8) & 0x3C;
        uint64_t v36 = ((-15LL << v39) - 1) & v36 | (v40 << v39);
        a1 = *(void *)(v38 + 24 + 24 * v40);
        swift_unknownObjectRetain();
        id result = swift_unknownObjectRelease();
        uint64_t v38 = a1;
        if (!*(_BYTE *)(a1 + 18)) {
          goto LABEL_295;
        }
      }

      if ((_DWORD)v40 != 1)
      {
        unint64_t v44 = (uint64_t *)(v38 + 64);
        id v45 = 1LL;
        while (1)
        {
          unint64_t v46 = *v44;
          v44 += 3;
          uint64_t v33 = v43 - v46;
          if (__OFSUB__(v43, v46)) {
            goto LABEL_336;
          }
          if (__OFADD__(v33, 1LL)) {
            goto LABEL_337;
          }
          if (v33 + 1 < 1) {
            break;
          }
          ++v45;
          unint64_t v43 = v33;
          if (v40 == v45) {
            goto LABEL_23;
          }
        }

        uint64_t v40 = v45;
        uint64_t v33 = v43;
        goto LABEL_24;
      }

      uint64_t v33 = v43;
LABEL_23:
      if (v33) {
        goto LABEL_353;
      }
      goto LABEL_24;
    }

    swift_unknownObjectRetain_n();
    a1 = v30;
LABEL_295:
    id result = specialized Rope._UnsafeHandle.findSlot<A>(at:in:preferEnd:)( v33,  0,  (_WORD *)(a1 + 16),  (uint64_t *)(a1 + 24));
    if (result < 0) {
      goto LABEL_382;
    }
    v321 = result;
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    unint64_t v48 = v36 & 0xFFFFFFFFFFFFF0FFLL | (v321 << 8);
    unint64_t v34 = v375;
    goto LABEL_39;
  }

  unint64_t v47 = swift_unknownObjectRetain_n();
  unint64_t v48 = specialized Rope._endPath.getter(v47);
  swift_unknownObjectRelease();
  a1 = 0LL;
  unint64_t v49 = 0LL;
  if (v30)
  {
LABEL_39:
    swift_unknownObjectRetain();
    specialized Rope._Node.distanceFromStart<A>(to:in:)(v35, v48, a1, v30, v34);
    swift_unknownObjectRelease_n();
    unint64_t v49 = a1;
  }

  uint64_t v50 = *(void *)(v26 + 64);
  v51 = *(void *)(v26 + 72);
  id v52 = *(void *)(v26 + 80);
  uint64_t v53 = *(void *)(v26 + 88);
  swift_unknownObjectRetain();
  specialized Rope.subscript.getter(v35, v48, v49, v50, v51, v52, v53);
  swift_unknownObjectRelease();
  v54 = swift_bridgeObjectRetain();
  v345 = specialized _NativeDictionary.filter(_:)(v54);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease_n();
  objc_super v3 = v368;
LABEL_41:
  a1 = *v3;
  v55 = v359;
  v56 = *v360 >> 11;
  v376 = v360[4] >> 11;
  v370 = v56;
  v346 = v376 - v56;
  if (v376 == v56)
  {
    v344 = *v360 >> 11;
    v364 = v344;
LABEL_162:
    v174 = *(_OWORD *)(a1 + 32);
    v460 = *(_OWORD *)(a1 + 16);
    v461 = v174;
    v462 = *(_OWORD *)(a1 + 48);
    BigString.utf8.getter();
    v374 = BigString.UTF8View.count.getter();
    outlined release of Locale((uint64_t)v412);
    v175 = (_OWORD *)*v3;
    v176 = *(_OWORD *)(*v3 + 32);
    v395 = *(_OWORD *)(*v3 + 16);
    v396 = v176;
    v397 = v175[3];
    *(void *)&v398 = v358;
    *((void *)&v398 + 1) = v357;
    *(void *)&v399 = v356;
    *((void *)&v399 + 1) = v355;
    *(void *)&v400 = v354;
    *((void *)&v400 + 1) = v353;
    *(void *)&v401 = v352;
    *((void *)&v401 + 1) = v350;
    swift_unknownObjectRetain();
    BigString.init()();
    v177 = v414;
    v175[1] = v413;
    v175[2] = v177;
    v175[3] = v415;
    swift_unknownObjectRelease();
    if ((v348 & 1) == 0)
    {
      v178 = v55[5];
      v457 = v55[4];
      v458 = v178;
      v459 = v55[6];
      v179 = v55[1];
      v453 = *v55;
      v454 = v179;
      v180 = v55[2];
      v456 = v55[3];
      v455 = v180;
      outlined retain of Locale((uint64_t)v55);
      lazy protocol witness table accessor for type BigSubstring and conformance BigSubstring();
      BigSubstring.replaceSubrange<A>(_:with:)();
    }

    v181 = (_OWORD *)*v3;
    v457 = v399;
    v458 = v400;
    v459 = v401;
    v453 = v395;
    v454 = v396;
    v456 = v398;
    v455 = v397;
    v182 = v398;
    v183 = v399;
    v184 = v400;
    v185 = v401;
    BigSubstring.base.getter();
    v186 = v417;
    v181[1] = v416;
    v181[2] = v186;
    v181[3] = v418;
    swift_unknownObjectRelease();
    specialized Range.init(uncheckedBounds:)( v182,  *((uint64_t *)&v182 + 1),  v183,  *((uint64_t *)&v183 + 1),  v184,  *((uint64_t *)&v184 + 1),  v185,  *((uint64_t *)&v185 + 1),  &v384);
    v187 = v385[0];
    *(_OWORD *)(v368 + 1) = v384;
    *(_OWORD *)(v368 + 3) = v187;
    v188 = v386;
    *(_OWORD *)(v368 + 5) = v385[1];
    *(_OWORD *)(v368 + 7) = v188;
    v189 = *v368;
    v190 = *(_OWORD *)(*v368 + 32);
    v452[9] = *(_OWORD *)(*v368 + 16);
    v452[10] = v190;
    v452[11] = *(_OWORD *)(v189 + 48);
    BigString.utf8.getter();
    uint64_t v30 = (uint64_t)v419;
    v191 = BigString.UTF8View.count.getter();
    id result = outlined release of Locale((uint64_t)v419);
    v192 = v191 - v374;
    if (__OFSUB__(v191, v374)) {
      goto LABEL_360;
    }
    v193 = v346 + v192;
    if (__OFADD__(v346, v192)) {
      goto LABEL_361;
    }
    swift_bridgeObjectRetain();
    v194 = MEMORY[0x18961AFF8];
    swift_bridgeObjectRetain();
    specialized AttributedString._InternalRuns.replaceUTF8Subrange<A>(_:with:)(v370, v376, v193, v345, v194);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v195 = *v368;
    v196 = *(_OWORD *)(*v368 + 32);
    v452[6] = *(_OWORD *)(*v368 + 16);
    v452[7] = v196;
    v452[8] = *(_OWORD *)(v195 + 48);
    BigString.utf8.getter();
    uint64_t v30 = (uint64_t)v420;
    v197 = BigString.UTF8View.count.getter();
    id result = outlined release of Locale((uint64_t)v420);
    v198 = v197 - v374;
    if (__OFSUB__(v197, v374)) {
      goto LABEL_362;
    }
    BOOL v42 = __OFADD__(v364, v198);
    v199 = v364 + v198;
    if (v42) {
      goto LABEL_363;
    }
    v200 = *(void *)(v195 + 80);
    if (!*(void *)(v195 + 64))
    {
      v240 = swift_unknownObjectRetain();
      specialized Rope._endPath.getter(v240);
      swift_unknownObjectRelease();
      goto LABEL_206;
    }

    *(void *)&v343 = v199;
    v201 = swift_unknownObjectRetain_n();
    specialized Rope._endPath.getter(v201);
    swift_unknownObjectRelease_n();
    if (!v200) {
      goto LABEL_206;
    }
    v202 = (__int128 *)(v195 + 16);
    v203 = *(_OWORD *)(v195 + 32);
    v452[3] = *(_OWORD *)(v195 + 16);
    v452[4] = v203;
    v452[5] = *(_OWORD *)(v195 + 48);
    BigString.utf8.getter();
    BigString.startIndex.getter();
    v204 = BigString.UTF8View.index(_:offsetBy:)();
    v206 = v205;
    v208 = v207;
    v210 = v209;
    outlined release of Locale((uint64_t)v421);
    v211 = *(_OWORD *)(v195 + 32);
    v452[0] = *(_OWORD *)(v195 + 16);
    v452[1] = v211;
    v452[2] = *(_OWORD *)(v195 + 48);
    uint64_t v30 = (uint64_t)v452;
    id result = BigString.utf8.getter();
    if (__OFSUB__((void)v343, v344)) {
      goto LABEL_375;
    }
    v212 = BigString.UTF8View.index(_:offsetBy:)();
    v214 = v213;
    v216 = v215;
    v218 = v217;
    outlined release of Locale((uint64_t)v422);
    specialized Range.init(uncheckedBounds:)(v204, v206, v208, v210, v212, v214, v216, v218, v445);
    *(void *)&v444[0] = MEMORY[0x18961AFF0];
    v219 = *(_OWORD *)(v195 + 32);
    v449 = *v202;
    v450 = v219;
    v451 = *(_OWORD *)(v195 + 48);
    BigString.unicodeScalars.getter();
    v341 = v445[0];
    v220 = BigString.UnicodeScalarView.index(roundingDown:)();
    v222 = v221;
    v224 = v223;
    v226 = v225;
    outlined release of Locale((uint64_t)v423);
    v227 = *(_OWORD *)(v195 + 32);
    v446 = *v202;
    v447 = v227;
    v356 = (__int128 *)(v195 + 16);
    v448 = *(_OWORD *)(v195 + 48);
    BigString.unicodeScalars.getter();
    v340 = v445[4];
    uint64_t v30 = BigString.UnicodeScalarView.index(roundingUp:)();
    id result = outlined release of Locale((uint64_t)v424);
    *(void *)&v485 = v220;
    *((void *)&v485 + 1) = v222;
    *(void *)&v486 = v224;
    *((void *)&v486 + 1) = v226;
    uint64_t v38 = v220 >> 11;
    a1 = (unint64_t)v30 >> 11;
    uint64_t v30 = *(void *)(v195 + 64);
    if (v30) {
      v228 = *(void *)(v195 + 80);
    }
    else {
      v228 = 0LL;
    }
    if (v228 < v38) {
      goto LABEL_377;
    }
    v229 = *(void *)(v195 + 72);
    uint64_t v35 = *(void *)(v195 + 88);
    v353 = v195;
    if (!v30 || v38 >= *(void *)(v195 + 80) || !*(_WORD *)(v30 + 16))
    {
      swift_retain_n();
      v241 = swift_unknownObjectRetain_n();
      v242 = specialized Rope._endPath.getter(v241);
      swift_unknownObjectRelease();
      unint64_t v37 = 0LL;
      v230 = 0LL;
      if (!v30) {
        goto LABEL_341;
      }
      goto LABEL_208;
    }

    *(void *)&v372 = *(void *)(v195 + 72);
    id v31 = *(unsigned __int8 *)(v30 + 18);
    if (!*(_BYTE *)(v30 + 18))
    {
      swift_unknownObjectRetain_n();
      id result = swift_retain_n();
      v230 = v38;
      unint64_t v37 = v30;
LABEL_298:
      v107 = *(unsigned __int16 *)(v37 + 16);
      if (!*(_WORD *)(v37 + 16)) {
        goto LABEL_304;
      }
      v322 = *(void *)(v37 + 24);
      v108 = v230 - v322;
      if (__OFSUB__(v230, v322)) {
        goto LABEL_386;
      }
      if (__OFADD__(v108, 1LL)) {
        goto LABEL_387;
      }
      if (v108 + 1 <= 0)
      {
        v107 = 0LL;
      }

      else
      {
        if ((_DWORD)v107 != 1) {
          goto LABEL_322;
        }
        v230 -= v322;
LABEL_304:
        if (v230)
        {
          __break(1u);
LABEL_306:
LABEL_309:
          LOBYTE(v3_Block_object_dispose(va, 8) = 0;
          goto LABEL_310;
        }
      }

      goto LABEL_340;
    }

    swift_unknownObjectRetain_n();
    id result = swift_retain_n();
    v230 = v38;
    v231 = v30;
    while (1)
    {
      v233 = *(unsigned __int16 *)(v231 + 16);
      if (!*(_WORD *)(v231 + 16)) {
        goto LABEL_183;
      }
      v234 = *(void *)(v231 + 40);
      v235 = v230 - v234;
      if (__OFSUB__(v230, v234)) {
        goto LABEL_357;
      }
      if (__OFADD__(v235, 1LL)) {
        goto LABEL_358;
      }
      if (v235 + 1 <= 0)
      {
        v233 = 0LL;
      }

      else
      {
        if ((_DWORD)v233 == 1)
        {
          v230 -= v234;
          goto LABEL_183;
        }

        v236 = *(void *)(v231 + 64);
        BOOL v42 = __OFSUB__(v235, v236);
        v237 = v235 - v236;
        if (v42) {
          goto LABEL_372;
        }
        if (__OFADD__(v237, 1LL)) {
          goto LABEL_373;
        }
        if (v237 + 1 < 1)
        {
          v233 = 1LL;
          v230 = v235;
        }

        else
        {
          if ((_DWORD)v233 == 2)
          {
            v230 = v237;
LABEL_183:
            if (v230) {
              goto LABEL_356;
            }
            goto LABEL_184;
          }

          v238 = (void *)(v231 + 88);
          v239 = 2LL;
          while (1)
          {
            if (v233 == v239) {
              goto LABEL_350;
            }
            v230 = v237 - *v238;
            if (__OFSUB__(v237, *v238)) {
              goto LABEL_351;
            }
            if (__OFADD__(v230, 1LL)) {
              goto LABEL_352;
            }
            if (v230 + 1 < 1) {
              break;
            }
            ++v239;
            v238 += 3;
            v237 = v230;
            if (v233 == v239) {
              goto LABEL_183;
            }
          }

          v233 = v239;
          v230 = v237;
        }
      }

  uint64_t v4 = *v5;
  uint64_t v17 = *(_OWORD *)(*v5 + 32);
  v454 = *(_OWORD *)(*v5 + 16);
  v455 = v17;
  v456 = *(_OWORD *)(v4 + 48);
  id result = BigString.isEmpty.getter();
  v340 = v5;
  if ((result & 1) != 0)
  {
    v330 = MEMORY[0x18961AFF0];
    goto LABEL_26;
  }

  __int16 v19 = *v6;
  if (*v6 >= 0x800 && (v6[4] ^ v19) <= 0x3FF)
  {
    __int128 v2 = v6[2];
    BigString.utf8.getter();
    __int16 v19 = BigString.UTF8View.index(before:)();
    id result = outlined release of Locale((uint64_t)v378);
  }

  __int16 v15 = *(void *)(v4 + 64);
  objc_super v3 = *(void *)(v4 + 80);
  if (v15) {
    uint64_t v20 = *(void *)(v4 + 80);
  }
  else {
    uint64_t v20 = 0LL;
  }
  uint64_t v13 = v19 >> 11;
  if (v20 < (uint64_t)(v19 >> 11))
  {
LABEL_395:
    __break(1u);
    goto LABEL_396;
  }

  id v12 = *(void *)(v4 + 72);
  id v10 = *(void *)(v4 + 88);
  if (!v15 || (v13 < v3 ? (uint64_t v21 = *(unsigned __int16 *)(v15 + 16) == 0) : (uint64_t v21 = 1), v21))
  {
    uint64_t v22 = swift_unknownObjectRetain_n();
    uint64_t v23 = specialized Rope._endPath.getter(v22);
    swift_unknownObjectRelease();
    id v24 = 0LL;
    uint64_t v25 = 0LL;
    if (!v15) {
      goto LABEL_25;
    }
LABEL_24:
    swift_unknownObjectRetain();
    specialized Rope._Node.distanceFromStart<A>(to:in:)(v10, v23, v24, v15, v12);
    swift_unknownObjectRelease_n();
    uint64_t v25 = v24;
    goto LABEL_25;
  }

  v342 = a3;
  v346 = v5;
  uint64_t v4 = *v5;
  unint64_t v18 = *(_OWORD *)(*v5 + 32);
  v447[0] = *(_OWORD *)(*v5 + 16);
  v447[1] = v18;
  v447[2] = *(_OWORD *)(v4 + 48);
  uint64_t v16 = (uint64_t)v447;
  id result = BigString.isEmpty.getter();
  a3 = MEMORY[0x18961AFF0];
  if ((result & 1) != 0) {
    goto LABEL_25;
  }
  uint64_t v20 = *v7;
  if (*v7 >= 0x800 && (v7[4] ^ v20) <= 0x3FF)
  {
    BigString.utf8.getter();
    uint64_t v20 = BigString.UTF8View.index(before:)();
    id result = outlined release of Locale((uint64_t)v382);
  }

  uint64_t v16 = *(void *)(v4 + 64);
  a3 = *(void *)(v4 + 80);
  if (v16) {
    uint64_t v21 = *(void *)(v4 + 80);
  }
  else {
    uint64_t v21 = 0LL;
  }
  uint64_t v14 = v20 >> 11;
  if (v21 < (uint64_t)(v20 >> 11))
  {
LABEL_396:
    __break(1u);
    goto LABEL_397;
  }

  uint64_t v13 = *(void *)(v4 + 72);
  __int16 v11 = *(void *)(v4 + 88);
  if (v16)
  {
    if (v14 < a3 && *(_WORD *)(v16 + 16) != 0)
    {
LABEL_40:
      v355 = v13;
      CFTypeRef v41 = *(unsigned __int8 *)(v16 + 18);
      if (*(_BYTE *)(v16 + 18))
      {
        id result = swift_unknownObjectRetain_n();
        BOOL v42 = 24LL;
        uint64_t v32 = v16;
        while (1)
        {
          unint64_t v44 = *(unsigned __int16 *)(v32 + 16);
          if (!*(_WORD *)(v32 + 16)) {
            goto LABEL_43;
          }
          id v45 = *(void *)(v32 + 40);
          unint64_t v46 = __OFSUB__(v14, v45);
          unint64_t v47 = v14 - v45;
          if (v46) {
            goto LABEL_381;
          }
          if (__OFADD__(v47, 1LL))
          {
LABEL_382:
            __break(1u);
LABEL_383:
            __break(1u);
LABEL_384:
            __break(1u);
LABEL_385:
            __break(1u);
LABEL_386:
            __break(1u);
            goto LABEL_387;
          }

          if (v47 + 1 >= 1) {
            break;
          }
          unint64_t v44 = 0LL;
LABEL_44:
          unint64_t v43 = (4 * *(_BYTE *)(v32 + 18) + 8) & 0x3C;
          CFTypeRef v41 = ((-15LL << v43) - 1) & v41 | (v44 << v43);
          uint64_t v25 = *(void *)(v32 + 24 + 24 * v44);
          swift_unknownObjectRetain();
          id result = swift_unknownObjectRelease();
          uint64_t v32 = v25;
          if (!*(_BYTE *)(v25 + 18)) {
            goto LABEL_73;
          }
        }

        if ((_DWORD)v44 != 1)
        {
          unint64_t v48 = (uint64_t *)(v32 + 64);
          unint64_t v49 = 1LL;
          while (1)
          {
            uint64_t v50 = *v48;
            v48 += 3;
            uint64_t v14 = v47 - v50;
            if (__OFSUB__(v47, v50)) {
              goto LABEL_367;
            }
            if (__OFADD__(v14, 1LL)) {
              goto LABEL_368;
            }
            if (v14 + 1 < 1) {
              break;
            }
            ++v49;
            unint64_t v47 = v14;
            if (v44 == v49) {
              goto LABEL_43;
            }
          }

          unint64_t v44 = v49;
          uint64_t v14 = v47;
          goto LABEL_44;
        }

        uint64_t v14 = v47;
LABEL_43:
        if (v14) {
          goto LABEL_380;
        }
        goto LABEL_44;
      }

      swift_unknownObjectRetain_n();
      uint64_t v25 = v16;
LABEL_73:
      id result = specialized Rope._UnsafeHandle.findSlot<A>(at:in:preferEnd:)( v14,  0,  (_WORD *)(v25 + 16),  (uint64_t *)(v25 + 24));
      if (result < 0) {
        goto LABEL_410;
      }
      uint64_t v60 = result;
      swift_unknownObjectRelease();
      swift_unknownObjectRelease();
      id v24 = v41 & 0xFFFFFFFFFFFFF0FFLL | (v60 << 8);
      uint64_t v26 = v25;
      uint64_t v13 = v355;
      if (!v16) {
        goto LABEL_24;
      }
      goto LABEL_23;
    }
  }

  uint64_t v23 = swift_unknownObjectRetain_n();
  id v24 = specialized Rope._endPath.getter(v23);
  swift_unknownObjectRelease();
  uint64_t v25 = 0LL;
  uint64_t v26 = 0LL;
  if (v16)
  {
LABEL_23:
    swift_unknownObjectRetain();
    specialized Rope._Node.distanceFromStart<A>(to:in:)(v11, v24, v25, v16, v13);
    swift_unknownObjectRelease_n();
    uint64_t v26 = v25;
  }

  if (*(_BYTE *)(v11 + 18)) {
    goto LABEL_9;
  }
  uint64_t v50 = 0LL;
  v51 = v6;
  id v52 = v4;
  unint64_t v27 = *(unsigned __int8 *)(v11 + 18);
  if (!*(_BYTE *)(v11 + 18)) {
    goto LABEL_52;
  }
LABEL_16:
  if (*(_WORD *)(v11 + 16) != 15 || *((_WORD *)v3 + 8) == 15)
  {
LABEL_44:
    __int16 v15 = v10[2];
    unint64_t v46 = v10[3];
    unint64_t v47 = v15 + 1;
    swift_unknownObjectRetain();
    uint64_t v30 = v46;
    if (v15 < v46 >> 1)
    {
LABEL_45:
      v10[2] = v47;
      id v45 = &v10[4 * v15];
      v45[4] = v3;
      v45[5] = v6;
      v45[6] = v4;
      v45[7] = v5;
      swift_unknownObjectRelease();
      goto LABEL_38;
    }

  swift_bridgeObjectRetain();
  closure #1 in Date.ISO8601FormatStyle.parse(_:in:)(v16, v14 - v13, a2, a3, a4, a5);
  swift_bridgeObjectRelease();
  outlined release of Date.ISO8601FormatStyle((uint64_t)a2);
  return swift_bridgeObjectRelease();
}

  if (v9 == 7) {
    goto LABEL_37;
  }
  LOBYTE(v14) = 0;
  LOBYTE(v13) = 0;
  if ((v9 & 0x8000000000000000LL) == 0) {
LABEL_23:
  }
    uint64_t v14 = 1 << v9;
LABEL_24:
  __int16 v15 = (char)(v13 | v14);
  if (a2 >= 0.0)
  {
    if ((v15 & 0x80000000) == 0)
    {
      LOBYTE(v7) = 0;
      goto LABEL_29;
    }

    goto LABEL_36;
  }

  if (v15 < 0)
  {
    __break(1u);
LABEL_36:
    __break(1u);
LABEL_37:
    if (a2 >= 0.0) {
      goto LABEL_38;
    }
LABEL_33:
    LOBYTE(v7) = 0;
    LOBYTE(v15) = 0x80;
    goto LABEL_29;
  }

  LOBYTE(v7) = 0;
  __int16 v15 = -v15;
LABEL_29:
  *a1 = v15;
  a1[1] = v7;
  return result;
}

  if (v9 == 15) {
    goto LABEL_37;
  }
  LOWORD(v14) = 0;
  LOWORD(v13) = 0;
  if ((v9 & 0x8000000000000000LL) == 0) {
LABEL_23:
  }
    uint64_t v14 = 1 << v9;
LABEL_24:
  __int16 v15 = (__int16)(v13 | v14);
  if (a2 >= 0.0)
  {
    if ((v15 & 0x80000000) == 0)
    {
      LOBYTE(v7) = 0;
      goto LABEL_29;
    }

    goto LABEL_36;
  }

  if (v15 < 0)
  {
    __break(1u);
LABEL_36:
    __break(1u);
LABEL_37:
    if (a2 >= 0.0) {
      goto LABEL_38;
    }
LABEL_33:
    LOBYTE(v7) = 0;
    LOWORD(v15) = 0x8000;
    goto LABEL_29;
  }

  LOBYTE(v7) = 0;
  __int16 v15 = -v15;
LABEL_29:
  *(_WORD *)a1 = v15;
  *(_BYTE *)(a1 + 2) = v7;
  return result;
}

  if (v9 == 31) {
    goto LABEL_37;
  }
  uint64_t v14 = 0;
  LODWORD(v13) = 0;
  if ((v9 & 0x8000000000000000LL) == 0) {
LABEL_23:
  }
    uint64_t v14 = 1 << v9;
LABEL_24:
  __int16 v15 = v13 | v14;
  if (a2 >= 0.0)
  {
    if ((v15 & 0x80000000) == 0)
    {
      LOBYTE(v7) = 0;
      goto LABEL_29;
    }

    goto LABEL_36;
  }

  if (v15 < 0)
  {
    __break(1u);
LABEL_36:
    __break(1u);
LABEL_37:
    if (a2 >= 0.0) {
      goto LABEL_38;
    }
LABEL_33:
    LOBYTE(v7) = 0;
    __int16 v15 = 0x80000000;
    goto LABEL_29;
  }

  LOBYTE(v7) = 0;
  __int16 v15 = -v15;
LABEL_29:
  *(_DWORD *)a1 = v15;
  *(_BYTE *)(a1 + 4) = v7;
  return result;
}

  __break(1u);
  return result;
}

  ;
}

  __break(1u);
  return result;
}

  uint64_t v38 = dispatch thunk of BinaryInteger.bitWidth.getter();
  v16((char *)v37, v36, v0);
  if (v38 < 65)
  {
    unsigned int v39 = dispatch thunk of BinaryInteger.bitWidth.getter();
    uint64_t v40 = v37;
    CFTypeRef v41 = (char *)v33;
    v33((uint64_t)v40, v0);
    if (v39 != 64 || (dispatch thunk of static BinaryInteger.isSigned.getter() & 1) != 0) {
      goto LABEL_20;
    }
  }

  else
  {
    v33((uint64_t)v37, v0);
  }

  CFTypeRef v41 = *(char **)(v8 - 328);
  v16(v41, v36, v0);
  *(void *)(v8 - 96) = 0x7FFFFFFFFFFFFFFFLL;
  BOOL v42 = dispatch thunk of static BinaryInteger.isSigned.getter();
  unint64_t v43 = dispatch thunk of BinaryInteger.bitWidth.getter();
  if ((v42 & 1) == 0)
  {
    if (v43 > 63) {
      goto LABEL_18;
    }
LABEL_16:
    unint64_t v49 = dispatch thunk of BinaryInteger._lowWord.getter();
    uint64_t v50 = v41;
    CFTypeRef v41 = (char *)v33;
    v33((uint64_t)v50, v0);
    if (*(void *)(v8 - 96) < v49) {
      goto LABEL_17;
    }
    goto LABEL_20;
  }

  if (v43 <= 64) {
    goto LABEL_16;
  }
  unint64_t v44 = *(void *)(v8 - 320);
  dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
  id v45 = dispatch thunk of static Comparable.< infix(_:_:)();
  unint64_t v46 = v44;
  unint64_t v47 = v41;
  CFTypeRef v41 = (char *)v33;
  v33(v46, v0);
  unint64_t v48 = v47;
  while (1)
  {
    v33((uint64_t)v48, v0);
    if ((v45 & 1) == 0) {
      break;
    }
LABEL_17:
    __break(1u);
LABEL_18:
    *(void *)(v8 - 120) = 0x7FFFFFFFFFFFFFFFLL;
    v51 = *(char **)(v8 - 320);
    (*(void (**)(char *, char *, uint64_t))(v8 - 272))(v51, v41, v0);
    id v52 = *(void *)(v8 - 344);
    dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
    id v45 = dispatch thunk of static Comparable.< infix(_:_:)();
    CFTypeRef v41 = (char *)v33;
    v33(v52, v0);
    unint64_t v48 = v51;
    uint64_t v36 = *(void *)(v8 - 136);
  }

  CFTypeRef v41 = dispatch thunk of BinaryInteger.bitWidth.getter();
  BOOL v42 = *(void *)(v7 - 296);
  v15(v42, v31, v1);
  if (v41 < 65)
  {
    unint64_t v43 = dispatch thunk of BinaryInteger.bitWidth.getter();
    v8(v42, v1);
    if (v43 != 64 || (dispatch thunk of static BinaryInteger.isSigned.getter() & 1) != 0) {
      goto LABEL_20;
    }
  }

  else
  {
    v8(v42, v1);
  }

  v15(*(void *)(v7 - 192), v31, v1);
  *(void *)(v7 - 96) = 0x7FFFFFFFFFFFFFFFLL;
  unint64_t v44 = dispatch thunk of static BinaryInteger.isSigned.getter();
  id v45 = dispatch thunk of BinaryInteger.bitWidth.getter();
  if ((v44 & 1) != 0)
  {
    if (v45 > 64)
    {
      unint64_t v46 = *(void *)(v7 - 336);
      dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
      unint64_t v47 = *(void *)(v7 - 192);
      unint64_t v48 = dispatch thunk of static Comparable.< infix(_:_:)();
      unint64_t v49 = v46;
      uint64_t v8 = *(void (**)(uint64_t, uint64_t))(v7 - 208);
      v8(v49, v1);
      uint64_t v50 = v47;
      goto LABEL_19;
    }
  }

  else if (v45 > 63)
  {
    goto LABEL_18;
  }

  v51 = *(void *)(v7 - 192);
  id v52 = dispatch thunk of BinaryInteger._lowWord.getter();
  v8(v51, v1);
  uint64_t v29 = *(void *)(v7 - 184);
  if (*(void *)(v7 - 96) < v52)
  {
    do
    {
      __break(1u);
LABEL_18:
      *(void *)(v7 - 12_Block_object_dispose(va, 8) = 0x7FFFFFFFFFFFFFFFLL;
      uint64_t v53 = *(void *)(v7 - 336);
      (*(void (**)(uint64_t, void, uint64_t))(v7 - 280))(v53, *(void *)(v7 - 192), v1);
      v54 = *(void *)(v7 - 352);
      dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
      unint64_t v48 = dispatch thunk of static Comparable.< infix(_:_:)();
      v55 = v54;
      uint64_t v8 = *(void (**)(uint64_t, uint64_t))(v7 - 208);
      v8(v55, v1);
      uint64_t v50 = v53;
      uint64_t v35 = *(void (**)(uint64_t, uint64_t))(v7 - 216);
LABEL_19:
      v8(v50, v1);
      uint64_t v29 = *(void *)(v7 - 184);
    }

    while ((v48 & 1) != 0);
  }

  if (v141 == v14)
  {
    v125 = v18;
    v126 = v11;
    v123 = v14;
    v124 = (void *)v7;
    v127 = v9;
    v115 = v19;
    uint64_t v20 = v142;
    uint64_t v21 = v143;
    if (v143)
    {
      uint64_t v22 = (void *)(v143 + 24 * ((v142 >> ((4 * *(_BYTE *)(v143 + 18) + 8) & 0x3C)) & 0xF));
      id v24 = v22[3];
      uint64_t v23 = v22[4];
      uint64_t v25 = v22[5];
      uint64_t v26 = v144 + 1;
      unint64_t v27 = __OFADD__(v144, 1LL);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (v27) {
        goto LABEL_91;
      }
      v144 = v26;
      swift_unknownObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      uint64_t v28 = v24;
      v152 = v23;
      v116 = v25;
    }

    else
    {
      swift_unknownObjectRetain();
      specialized Rope._Node.subscript.getter(v20, v12);
      uint64_t v30 = v29;
      uint64_t v32 = v31;
      swift_unknownObjectRelease();
      if (__OFADD__(v144, 1LL)) {
        goto LABEL_91;
      }
      v116 = v32;
      v152 = v30;
      ++v144;
      swift_unknownObjectRetain();
      uint64_t v28 = specialized Rope._Node.subscript.getter(v20, v12);
    }

    swift_bridgeObjectRelease();
    id result = swift_bridgeObjectRelease();
    if (__OFADD__(v125, v28)) {
      goto LABEL_92;
    }
    v145 = v125 + v28;
    if (!v12) {
      goto LABEL_96;
    }
    unint64_t v34 = ((-15LL << ((4 * *(_BYTE *)(v12 + 18) + 8) & 0x3C)) - 1) & (unint64_t)*(unsigned __int8 *)(v12 + 18) | ((unint64_t)*(unsigned __int16 *)(v12 + 16) << ((4 * *(_BYTE *)(v12 + 18) + 8) & 0x3C));
    id result = swift_unknownObjectRetain();
    if (v20 >= v34) {
      goto LABEL_96;
    }
    if (v21)
    {
      uint64_t v35 = (4 * *(_BYTE *)(v21 + 18) + 8) & 0x3C;
      uint64_t v36 = ((v20 >> v35) & 0xF) + 1;
      if (v36 < *(unsigned __int16 *)(v21 + 16))
      {
        v142 = (v36 << v35) | ((-15LL << v35) - 1) & v20;
LABEL_25:
        swift_unknownObjectRelease_n();
LABEL_31:
        unint64_t v44 = v109;
        id v45 = v109[1];
        v147[6] = *v109;
        v147[7] = v45;
        v147[8] = v109[2];
        BigString.utf8.getter();
        unint64_t v46 = BigString.UTF8View.index(_:offsetBy:)();
        unint64_t v48 = v47;
        uint64_t v50 = v49;
        id v52 = v51;
        outlined release of Locale((uint64_t)&v146);
        uint64_t v53 = v44[1];
        v147[3] = *v44;
        v147[4] = v53;
        v147[5] = v44[2];
        BigString.utf16.getter();
        v110 = v46;
        v111 = v48;
        v112 = v52;
        v113 = v50;
        v114 = BigString.UTF16View.distance(from:to:)();
        outlined release of Locale((uint64_t)v147);
        if (!*(void *)(v152 + 16))
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          v99 = v115;
          goto LABEL_81;
        }

        v136 = MEMORY[0x18961AFF0];
        v54 = v152 + 64;
        v55 = 1LL << *(_BYTE *)(v152 + 32);
        if (v55 < 64) {
          v56 = ~(-1LL << v55);
        }
        else {
          v56 = -1LL;
        }
        v57 = v56 & *(void *)(v152 + 64);
        unint64_t v58 = (unint64_t)(v55 + 63) >> 6;
        int v59 = v119;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        uint64_t v60 = 0LL;
        v117 = v54;
        v118 = v58;
        while (1)
        {
          while (v57)
          {
            v61 = __clz(__rbit64(v57));
            v57 &= v57 - 1;
            v62 = v61 | (v60 << 6);
            if (v59[2]) {
              goto LABEL_53;
            }
          }

          v63 = __OFADD__(v60++, 1LL);
          if (v63)
          {
            __break(1u);
LABEL_89:
            __break(1u);
            goto LABEL_90;
          }

          if (v60 >= v58) {
            goto LABEL_77;
          }
          v64 = *(void *)(v54 + 8 * v60);
          if (!v64)
          {
            v65 = v60 + 1;
            if (v60 + 1 >= v58) {
              goto LABEL_77;
            }
            v64 = *(void *)(v54 + 8 * v65);
            if (!v64)
            {
              v65 = v60 + 2;
              if (v60 + 2 >= v58) {
                goto LABEL_77;
              }
              v64 = *(void *)(v54 + 8 * v65);
              if (!v64)
              {
                v65 = v60 + 3;
                if (v60 + 3 >= v58) {
                  goto LABEL_77;
                }
                v64 = *(void *)(v54 + 8 * v65);
                if (!v64)
                {
                  v65 = v60 + 4;
                  if (v60 + 4 >= v58)
                  {
LABEL_77:
                    v99 = v115;
                    swift_bridgeObjectRelease();
                    swift_bridgeObjectRelease();
                    swift_release();
                    swift_bridgeObjectRelease();
                    if (*(void *)(v136 + 16))
                    {
                      type metadata accessor for NSAttributedStringKey(0LL);
                      lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( (unint64_t *)&lazy protocol witness table cache variable for type NSAttributedStringKey and conformance NSAttributedStringKey,  (uint64_t (*)(uint64_t))type metadata accessor for NSAttributedStringKey,  (uint64_t)&protocol conformance descriptor for NSAttributedStringKey);
                      v100 = _NativeDictionary.bridged()();
                      v101 = v114;
                      objc_msgSend(v108, sel_setAttributes_range_, v100, v99, v114);
                      swift_unknownObjectRelease();
                      goto LABEL_82;
                    }

                    swift_bridgeObjectRelease();
LABEL_81:
                    v101 = v114;
LABEL_82:
                    v63 = __OFADD__(v99, v101);
                    __int16 v19 = v99 + v101;
                    if (v63) {
                      goto LABEL_94;
                    }
                    unint64_t v18 = v145;
                    id v12 = v137;
                    id v7 = v110;
                    uint64_t v9 = v111;
                    __int16 v11 = v113;
                    v128 = v112;
                    __int16 v15 = v139;
                    uint64_t v14 = v140;
                    if (!v137) {
                      goto LABEL_7;
                    }
LABEL_5:
                    if (v18 == v15) {
                      goto LABEL_87;
                    }
                    goto LABEL_8;
                  }

                  v64 = *(void *)(v54 + 8 * v65);
                  if (!v64)
                  {
                    while (1)
                    {
                      uint64_t v60 = v65 + 1;
                      if (__OFADD__(v65, 1LL)) {
                        goto LABEL_93;
                      }
                      if (v60 >= v58) {
                        goto LABEL_77;
                      }
                      v64 = *(void *)(v54 + 8 * v60);
                      ++v65;
                      if (v64) {
                        goto LABEL_52;
                      }
                    }
                  }
                }
              }
            }

            uint64_t v60 = v65;
          }

        --v8;
        break;
      default:
        return result;
    }

  id v31 = dispatch thunk of BinaryInteger.bitWidth.getter();
  ((void (*)(char *, char *, uint64_t))v27)(v12, v26, a2);
  if (v31 <= 64)
  {
    uint64_t v35 = dispatch thunk of BinaryInteger.bitWidth.getter();
    v29(v12, a2);
    if (v35 != 64 || (dispatch thunk of static BinaryInteger.isSigned.getter() & 1) != 0) {
      goto LABEL_20;
    }
  }

  else
  {
    v29(v12, a2);
  }

  uint64_t v32 = v55;
  ((void (*)(char *, char *, uint64_t))v27)(v55, v26, a2);
  v57 = 0x7FFFFFFFFFFFFFFFLL;
  uint64_t v33 = dispatch thunk of static BinaryInteger.isSigned.getter();
  unint64_t v34 = dispatch thunk of BinaryInteger.bitWidth.getter();
  if ((v33 & 1) == 0)
  {
    if (v34 >= 64)
    {
      v56 = 0x7FFFFFFFFFFFFFFFLL;
      lazy protocol witness table accessor for type Int and conformance Int();
      goto LABEL_19;
    }

    objc_super v3 = 0LL;
    uint64_t v4 = 1;
    return v3 | ((unint64_t)v4 << 32);
  }

  LODWORD(v3) = v7;
LABEL_7:
  uint64_t v4 = 0;
  objc_super v3 = v3;
  return v3 | ((unint64_t)v4 << 32);
}

    uint64_t v26 = v59;
    uint64_t v25 = v60;
    uint64_t v16 = v61;
    if (v29 == v23) {
      goto LABEL_4;
    }
  }

  __break(1u);
LABEL_26:
  __break(1u);
LABEL_27:
  __break(1u);
LABEL_28:
  __break(1u);
  return result;
}

  memmove((void *)a3, (const void *)v6, v7);
}

    memmove((void *)var0, v12, v13);
    goto LABEL_9;
  }

  unint64_t v18 = (void *)[MEMORY[0x189603F70] exceptionWithName:*MEMORY[0x189603A60], +[NSString stringWithFormat:]( NSString, "stringWithFormat:", @"%@: absurd %s: %lu, maximum size: %llu bytes", _NSMethodExceptionProem((objc_class *)self, a2), "length", a4, 0x8000000000000000), 0 reason userInfo];
  objc_exception_throw(v18);
  -[NSPurgeableData dealloc](v19, v20);
  return result;
}

  memmove(a3, (const void *)v10, length);
}

    CFRelease(v11);
    return v10 != 0;
  }

  __int16 v11 = v15[0];
  if (!resultingURL) {
    goto LABEL_8;
  }
  *resultingURL = (NSURL *)v15[0];
  return v10 != 0;
}

  if (v8 == 1)
  {
LABEL_9:
    id v10 = *v6 == 47;
    goto LABEL_17;
  }

  if (v8 >= 2)
  {
LABEL_12:
    while (1)
    {
      __int16 v11 = v8 - 1;
      if (v8 == 1) {
        break;
      }
      id v12 = (unsigned __int16)v6[v8-- - 2];
      if (v12 == 47)
      {
        if (v11 == 1) {
          id v10 = 1LL;
        }
        else {
          id v10 = v11 - 1;
        }
        goto LABEL_17;
      }
    }
  }

  id v10 = 0LL;
LABEL_17:
  uint64_t v13 = +[NSPathStore2 pathStoreWithCharacters:length:]( &OBJC_CLASS___NSPathStore2,  "pathStoreWithCharacters:length:",  v6,  v10);
  if (v3 >= 0x101) {
    free(v6);
  }
  return v13;
}

  os_unfair_lock_unlock((os_unfair_lock_t)&_MergedGlobals_1_0);
  return v7;
}

    LOBYTE(v6) = 0;
  }

  return v6;
}

  if (-[NSRTFD isPackage](v5, "isPackage"))
  {
    id v12 = self;
    uint64_t v13 = v5;
    uint64_t v14 = v11;
    __int16 v15 = 0LL;
    uint64_t v16 = 0LL;
  }

  else
  {
    uint64_t v17 = -[NSRTFD objectForKey:](v5, "objectForKey:", 0x189CB8808LL);
    unint64_t v18 = -[NSRTFD _getDocInfoForKey:](v5, "_getDocInfoForKey:", 0x189CB8808LL);
    uint64_t v16 = -[NSRTFD objectForKey:]( v5,  "objectForKey:",  [@".." stringByAppendingPathExtension:@"tiff"]);
    id v12 = self;
    uint64_t v13 = (NSRTFD *)v17;
    uint64_t v14 = v11;
    __int16 v15 = v18;
  }

  __int16 v19 = -[NSFileWrapper _initWithImpl:preferredFileName:uniqueFileName:docInfo:iconData:]( v12,  "_initWithImpl:preferredFileName:uniqueFileName:docInfo:iconData:",  v13,  v14,  0LL,  v15,  v16);

  return v19;
}

  -[NSFileCoordinator _forgetAccessClaimForID:](self, "_forgetAccessClaimForID:", v7);
  _Block_object_dispose(&v13, 8);
}

  self->_superarbitrationServer = (NSXPCConnection *)a4;
  uint64_t v16 = 0u;
  uint64_t v17 = 0u;
  unint64_t v18 = 0u;
  __int16 v19 = 0u;
  id v10 = [a3 countByEnumeratingWithState:&v16 objects:v15 count:16];
  if (v10)
  {
    __int16 v11 = v10;
    id v12 = *(void *)v17;
    do
    {
      for (uint64_t i = 0LL; i != v11; ++i)
      {
        if (*(void *)v17 != v12) {
          objc_enumerationMutation(a3);
        }
        uint64_t v14 = -[NSFileAccessNode descendantForFileURL:]( self->_rootNode,  "descendantForFileURL:",  *(void *)(*((void *)&v16 + 1) + 8 * i));
        if (v14) {
          [v14 setArbitrationBoundary];
        }
      }

      __int16 v11 = [a3 countByEnumeratingWithState:&v16 objects:v15 count:16];
    }

    while (v11);
  }

NSString *_NSNewStringByAppendingStrings( malloc_zone_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, size_t a9, uint64_t a10)
{
  v39[80] = *MEMORY[0x1895F89C0];
  uint64_t v38 = (size_t *)&a10;
  size_t v11 = a9;
  if (a9)
  {
    uint64_t v12 = 0LL;
    LOBYTE(v13) = 1;
    do
    {
      if (v12 == 40) {
        objc_exception_throw((id)[MEMORY[0x189603F70] exceptionWithName:*MEMORY[0x189603A58] reason:@"Too many strings to append" userInfo:0]);
      }
      if (v13)
      {
        uint64_t v14 = [(id)v11 fastestEncoding];
        if (__NSDefaultStringEncodingFullyInited) {
          uint64_t v15 = _NSDefaultStringEncoding;
        }
        else {
          uint64_t v15 = _NSDefaultCStringEncoding();
        }
        BOOL v13 = v14 == v15;
      }

      else
      {
        BOOL v13 = 0;
      }

      v39[v12] = v11;
      uint64_t v16 = v12 + 1;
      uint64_t v17 = v38++;
      size_t v11 = *v17;
      ++v12;
    }

    while (*v17);
    uint64_t v18 = 0LL;
    uint64_t v19 = v16 - 1;
    while (1)
    {
      uint64_t v20 = (void *)v39[v18];
      if (v13)
      {
        uint64_t v21 = [v20 cStringLength];
        v39[v18 + 40] = v21;
        v11 += v21;
        if (v19 == v18)
        {
          unint64_t v37 = a1;
          if (v11)
          {
            id v24 = a1;
            if (!a1) {
              id v24 = malloc_default_zone();
            }
            uint64_t v25 = (char *)malloc_zone_malloc(v24, v11);
          }

          else
          {
            uint64_t v25 = 0LL;
          }

          uint64_t v28 = 0LL;
          uint64_t v36 = v25;
          do
          {
            uint64_t v29 = (void *)v39[v28];
            uint64_t v30 = v39[v28 + 40];
            if (__NSDefaultStringEncodingFullyInited) {
              uint64_t v31 = _NSDefaultStringEncoding;
            }
            else {
              uint64_t v31 = _NSDefaultCStringEncoding();
            }
            objc_msgSend( v29,  "getBytes:maxLength:usedLength:encoding:options:range:remainingRange:",  v25,  v30,  0,  v31,  0,  0,  v30,  0);
            v25 += v30;
            ++v28;
          }

          while (v16 != v28);
          uint64_t v23 = v36;
          a1 = v37;
          return -[NSString initWithCStringNoCopy:length:freeWhenDone:]( +[NSString allocWithZone:](&OBJC_CLASS___NSString, "allocWithZone:", a1),  "initWithCStringNoCopy:length:freeWhenDone:",  v23,  v11,  1LL);
        }
      }

      else
      {
        uint64_t v22 = [v20 length];
        v39[v18 + 40] = v22;
        v11 += v22;
        if (v19 == v18)
        {
          if ((v11 & 0x8000000000000000LL) != 0) {
            return 0LL;
          }
          if (v11)
          {
            uint64_t v26 = a1;
            if (!a1) {
              uint64_t v26 = malloc_default_zone();
            }
            unint64_t v27 = (char *)malloc_zone_malloc(v26, 2 * v11);
          }

          else
          {
            unint64_t v27 = 0LL;
          }

          uint64_t v33 = 0LL;
          unint64_t v34 = v27;
          do
          {
            uint64_t v35 = v39[v33 + 40];
            objc_msgSend((id)v39[v33], "getCharacters:range:", v34, 0, v35);
            v34 += 2 * v35;
            ++v33;
          }

          while (v16 != v33);
          return -[NSString initWithCharactersNoCopy:length:freeWhenDone:]( +[NSString allocWithZone:](&OBJC_CLASS___NSString, "allocWithZone:", a1),  "initWithCharactersNoCopy:length:freeWhenDone:",  v27,  v11,  1LL);
        }
      }

      ++v18;
    }
  }

  uint64_t v23 = 0LL;
  return -[NSString initWithCStringNoCopy:length:freeWhenDone:]( +[NSString allocWithZone:](&OBJC_CLASS___NSString, "allocWithZone:", a1),  "initWithCStringNoCopy:length:freeWhenDone:",  v23,  v11,  1LL);
}

LABEL_57:
  uint64_t v19 = v10[1];
LABEL_58:
  if (v19) {
    goto LABEL_59;
  }
  SEL v5 = 0LL;
  unint64_t v47 = v10[3];
  if (v10[2]) {
    uint64_t v17 = 2483028224LL;
  }
  else {
    uint64_t v17 = 2617245952LL;
  }
  if (!v47) {
    goto LABEL_49;
  }
LABEL_60:
  uint64_t v25 = (NSString *)calloc(1uLL, 0x2038uLL);
  v25->super.isa = (Class)[v8 bytes];
  uint64_t v26 = [v8 length];
  v25[5].super.isa = (Class)1;
  v25[2].super.isa = (Class)v26;
  v25[3].super.isa = (Class)v5;
  v25[1].super.isa = (Class)a4;
  if (!skipJSONWhitespace((uint64_t)v25, a5, (a4 & 0x10) != 0)
    || (unint64_t v27 = v25[3].super.isa, v25[2].super.isa <= v27))
  {
    if ((a4 & 0x10) != 0)
    {
      if ((a4 & 1) != 0) {
        uint64_t v29 = (objc_class *)MEMORY[0x189603FC8];
      }
      else {
        uint64_t v29 = (objc_class *)MEMORY[0x189603F68];
      }
      uint64_t v38 = objc_alloc_init(v29);
      goto LABEL_76;
    }

    if (!a5)
    {
LABEL_73:
      uint64_t v38 = 0LL;
      goto LABEL_76;
    }

    isa = v25[3].super.isa;
    uint64_t v31 = v25[6].super.isa;
    uint64_t v32 = isa >= v31;
    uint64_t v33 = (char *)isa - (char *)v31;
    if (v32) {
      unint64_t v34 = v33;
    }
    else {
      unint64_t v34 = 0LL;
    }
    uint64_t v35 = -[NSString initWithFormat:]( objc_alloc(&OBJC_CLASS___NSString),  "initWithFormat:",  @"%@ around line %lu, column %lu.",  @"JSON text did not have any content",  v25[5].super.isa,  v34);
LABEL_72:
    uint64_t v36 = v35;
    unint64_t v37 = -[NSNumber initWithUnsignedInteger:]( objc_alloc(&OBJC_CLASS___NSNumber),  "initWithUnsignedInteger:",  v25[3].super.isa);
    v55 = @"NSDebugDescription";
    v56 = @"NSJSONSerializationErrorIndex";
    v57 = v36;
    unint64_t v58 = v37;
    *a5 = +[NSError errorWithDomain:code:userInfo:]( NSError,  "errorWithDomain:code:userInfo:",  @"NSCocoaErrorDomain",  3840,  [MEMORY[0x189603F68] dictionaryWithObjects:&v57 forKeys:&v55 count:2]);

    goto LABEL_73;
  }

  if ((a4 & 0x10) == 0)
  {
    if ((a4 & 4) != 0 || (*((unsigned __int8 *)&v25->super.isa->isa + (unint64_t)v27) | 0x20) == 0x7B)
    {
      uint64_t v28 = newJSONValue(v25, a5);
      goto LABEL_84;
    }

    if (!a5) {
      goto LABEL_73;
    }
    unint64_t v48 = v25[6].super.isa;
    uint64_t v32 = v27 >= v48;
    unint64_t v49 = (char *)v27 - (char *)v48;
    if (v32) {
      uint64_t v50 = v49;
    }
    else {
      uint64_t v50 = 0LL;
    }
    uint64_t v35 = -[NSString initWithFormat:]( objc_alloc(&OBJC_CLASS___NSString),  "initWithFormat:",  @"%@ around line %lu, column %lu.",  @"JSON text did not start with array or object and option to allow fragments not set.",  v25[5].super.isa,  v50);
    goto LABEL_72;
  }

  uint64_t v28 = newJSONObject((uint64_t)v25, 1, a5);
LABEL_84:
  uint64_t v38 = v28;
  if (v28 && v25[3].super.isa < v25[2].super.isa)
  {
    if ((skipJSONWhitespace((uint64_t)v25, a5, 1) & 1) == 0)
    {
LABEL_93:

      goto LABEL_73;
    }

    CFTypeRef v41 = v25[3].super.isa;
    if (v41 != v25[2].super.isa)
    {
      if (a5)
      {
        BOOL v42 = v25[6].super.isa;
        uint64_t v32 = v41 >= v42;
        unint64_t v43 = (char *)v41 - (char *)v42;
        if (v32) {
          unint64_t v44 = v43;
        }
        else {
          unint64_t v44 = 0LL;
        }
        id v45 = -[NSString initWithFormat:]( objc_alloc(&OBJC_CLASS___NSString),  "initWithFormat:",  @"%@ around line %lu, column %lu.",  @"Garbage at end",  v25[5].super.isa,  v44);
        unint64_t v46 = -[NSNumber initWithUnsignedInteger:]( objc_alloc(&OBJC_CLASS___NSNumber),  "initWithUnsignedInteger:",  v25[3].super.isa);
        v55 = @"NSDebugDescription";
        v56 = @"NSJSONSerializationErrorIndex";
        v57 = v45;
        unint64_t v58 = v46;
        *a5 = +[NSError errorWithDomain:code:userInfo:]( NSError,  "errorWithDomain:code:userInfo:",  @"NSCocoaErrorDomain",  3840,  [MEMORY[0x189603F68] dictionaryWithObjects:&v57 forKeys:&v55 count:2]);
      }

      goto LABEL_93;
    }
  }

    if (v82)
    {
      uint64_t v12 = (uint64_t)v61;
      if (!v94 || (v80 != v93 || v82 != v94) && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
      {
LABEL_86:
        outlined retain of LocalePreferences?( (uint64_t)v122,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined copy of LocalePreferences?);
        CFTypeRef v41 = v122;
        BOOL v42 = outlined copy of LocalePreferences?;
        goto LABEL_87;
      }
    }

    else
    {
      uint64_t v12 = (uint64_t)v61;
      if (v94) {
        goto LABEL_86;
      }
    }

    if (v81)
    {
      if (!v96 || (v78 != v95 || v81 != v96) && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
        goto LABEL_86;
      }
    }

    else if (v96)
    {
      goto LABEL_86;
    }

    if (v79)
    {
      if (!v97 || (specialized static Dictionary<>.== infix(_:_:)(v79, v97) & 1) == 0) {
        goto LABEL_86;
      }
    }

    else if (v97)
    {
      goto LABEL_86;
    }

    if (v76)
    {
      if (!v98 || (specialized static Dictionary<>.== infix(_:_:)(v76, v98) & 1) == 0) {
        goto LABEL_86;
      }
    }

    else if (v98)
    {
      goto LABEL_86;
    }

    uint64_t v38 = v99;
    if (v75)
    {
      if (!v99) {
        goto LABEL_86;
      }
      uint64_t v60 = v101;
      v61 = v100;
      unint64_t v58 = v103;
      int v59 = v102;
      type metadata accessor for CFDictionaryRef(0LL);
      v57 = v39;
      outlined retain of LocalePreferences?( (uint64_t)v122,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined copy of LocalePreferences?);
      outlined retain of LocalePreferences?( (uint64_t)v122,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined copy of LocalePreferences?);
      outlined retain of LocalePreferences?( (uint64_t)v123,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined copy of LocalePreferences?);
      v56 = (id)lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( (unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef,  (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef,  (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
      v55 = v38;
      v54 = v75;
      uint64_t v40 = static _CFObject.== infix(_:_:)();

      if ((v40 & 1) == 0)
      {
LABEL_104:
        CFTypeRef v41 = v123;
        BOOL v42 = outlined consume of LocalePreferences?;
LABEL_87:
        outlined retain of LocalePreferences?( (uint64_t)v41,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))v42);
LABEL_41:
        LOBYTE(v35) = 0;
        goto LABEL_42;
      }
    }

    else
    {
      uint64_t v60 = v101;
      v61 = v100;
      unint64_t v58 = v103;
      int v59 = v102;
      outlined retain of LocalePreferences?( (uint64_t)v122,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined copy of LocalePreferences?);
      outlined retain of LocalePreferences?( (uint64_t)v122,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined copy of LocalePreferences?);
      if (v38) {
        goto LABEL_41;
      }
      outlined retain of LocalePreferences?( (uint64_t)v123,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined copy of LocalePreferences?);
    }

    if (v74)
    {
      if (!v61) {
        goto LABEL_104;
      }
      unint64_t v43 = v61;
      type metadata accessor for CFDictionaryRef(0LL);
      v57 = v44;
      v56 = (id)lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( (unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef,  (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef,  (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
      v61 = v43;
      v55 = v74;
      LOBYTE(v43) = static _CFObject.== infix(_:_:)();
    }

    else if (v61)
    {
      goto LABEL_104;
    }

    if (v73)
    {
      uint64_t v35 = (uint64_t)v60;
      if (!v60)
      {
        outlined retain of LocalePreferences?( (uint64_t)v123,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined consume of LocalePreferences?);
        goto LABEL_42;
      }

      type metadata accessor for CFDictionaryRef(0LL);
      v61 = v45;
      v57 = lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( (unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef,  (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef,  (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
      uint64_t v60 = (char *)(id)v35;
      v56 = v73;
      unint64_t v46 = static _CFObject.== infix(_:_:)();

      if ((v46 & 1) == 0) {
        goto LABEL_104;
      }
    }

    else if (v60)
    {
      goto LABEL_104;
    }

    v61 = (id)v12;
    if (v72)
    {
      if (!v59) {
        goto LABEL_138;
      }
      type metadata accessor for CFDictionaryRef(0LL);
      uint64_t v60 = (char *)lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( (unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef,  (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef,  (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
      unint64_t v47 = v59;
      int v59 = v72;
      unint64_t v48 = static _CFObject.== infix(_:_:)();

      if ((v48 & 1) == 0) {
        goto LABEL_138;
      }
    }

    else if (v59)
    {
      goto LABEL_138;
    }

    if (v71)
    {
      if (!v58) {
        goto LABEL_138;
      }
      type metadata accessor for CFDictionaryRef(0LL);
      uint64_t v60 = (char *)lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( (unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef,  (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef,  (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
      unint64_t v49 = v58;
      int v59 = v71;
      uint64_t v50 = static _CFObject.== infix(_:_:)();

      if ((v50 & 1) == 0) {
        goto LABEL_138;
      }
    }

    else if (v58)
    {
      goto LABEL_138;
    }

    uint64_t v35 = v104;
    if (v70)
    {
      if (!v104) {
        goto LABEL_121;
      }
      swift_bridgeObjectRetain();
      v51 = swift_bridgeObjectRetain();
      LODWORD(v60) = specialized static Dictionary<>.== infix(_:_:)(v51, v35);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }

    else if (v104)
    {
      goto LABEL_138;
    }

    uint64_t v35 = v105;
    if (v69)
    {
      if (!v105)
      {
LABEL_121:
        outlined retain of LocalePreferences?( (uint64_t)v123,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined consume of LocalePreferences?);
        uint64_t v12 = (uint64_t)v61;
        goto LABEL_42;
      }

      swift_bridgeObjectRetain();
      id v52 = swift_bridgeObjectRetain();
      LODWORD(v60) = specialized static Dictionary<>.== infix(_:_:)(v52, v35);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }

    else if (v105)
    {
      goto LABEL_138;
    }

    if (v68)
    {
      if (v107 && (v67 == v106 && v68 == v107 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)) {
        goto LABEL_130;
      }
LABEL_138:
      outlined retain of LocalePreferences?( (uint64_t)v123,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined consume of LocalePreferences?);
LABEL_47:
      LOBYTE(v35) = 0;
      uint64_t v12 = (uint64_t)v61;
      goto LABEL_42;
    }

    if (v107) {
      goto LABEL_138;
    }
LABEL_130:
    if (v66 == 2)
    {
      if (v108 != 2) {
        goto LABEL_138;
      }
    }

    else if (v108 == 2 || ((v108 ^ v66) & 1) != 0)
    {
      goto LABEL_138;
    }

    uint64_t v53 = v109;
    if (v65 == 2)
    {
      outlined retain of LocalePreferences?( (uint64_t)v123,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined consume of LocalePreferences?);
      if (v53 != 2) {
        goto LABEL_47;
      }
    }

    else
    {
      outlined retain of LocalePreferences?( (uint64_t)v123,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined consume of LocalePreferences?);
      if (v53 == 2 || ((v53 ^ v65) & 1) != 0) {
        goto LABEL_47;
      }
    }

    if (v63 == 2)
    {
      uint64_t v12 = (uint64_t)v61;
      if (v110 != 2) {
        goto LABEL_41;
      }
    }

    else
    {
      LOBYTE(v35) = 0;
      if (v110 == 2) {
        goto LABEL_152;
      }
      uint64_t v12 = (uint64_t)v61;
      if (((((v63 & 1) == 0) ^ v110) & 1) == 0) {
        goto LABEL_42;
      }
    }

    if (v62 == 2)
    {
      uint64_t v12 = (uint64_t)v61;
      if (v111 != 2) {
        goto LABEL_41;
      }
LABEL_151:
      LOBYTE(v35) = 1;
      goto LABEL_42;
    }

    LOBYTE(v35) = 0;
    if (v111 != 2)
    {
      uint64_t v12 = (uint64_t)v61;
      if (((((v62 & 1) == 0) ^ v111) & 1) == 0) {
        goto LABEL_42;
      }
      goto LABEL_151;
    }

  __break(1u);
  return result;
}

        swift_release();
        swift_release();
        goto LABEL_58;
      }

      v96 = swift_slowAlloc();
      LODWORD(v154[0]) = 0;
      v97 = unumf_resultToString();
      if (SLODWORD(v154[0]) > 0 || v97 <= 0)
      {
        MEMORY[0x186E20E60](v96, -1LL, -1LL);
        goto LABEL_57;
      }

      v85 = specialized String.init(_utf16:)(v96, v97);
      v87 = v98;
      MEMORY[0x186E20E60](v96, -1LL, -1LL);
    }

    else
    {
      v85 = specialized String.init(_utf16:)((uint64_t)(&v139 - 8), isStackAllocationSafe);
      v87 = v94;
    }

  __break(1u);
LABEL_58:
  __break(1u);
LABEL_59:
  __break(1u);
LABEL_60:
  __break(1u);
LABEL_61:
  __break(1u);
LABEL_62:
  id result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

    outlined retain of LocalePreferences?( (uint64_t)v105,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined copy of LocalePreferences?);
    goto LABEL_58;
  }

  outlined init with take of LocalePreferences?((uint64_t)v106, (uint64_t)v101);
  if (_s10Foundation17LocalePreferencesVSgWOg((uint64_t)v101) != 1)
  {
LABEL_17:
    outlined init with take of LocalePreferences?((uint64_t)v105, (uint64_t)v101);
    outlined init with take of LocalePreferences?((uint64_t)v106, (uint64_t)&v102);
    outlined release of (LocalePreferences?, LocalePreferences?)((uint64_t)v101);
    return 0LL;
  }

  return 1LL;
}

          __break(1u);
          goto LABEL_58;
        }

    __break(1u);
LABEL_58:
    __break(1u);
    goto LABEL_59;
  }

  v104 = v16;
  v105 = v14;
  v103 = v12;
  uint64_t v17 = specialized NSCoder.decodeObject<A>(of:forKey:)(0x7A656D69742E534ELL, 0xEB00000000656E6FLL);
  v106 = (id)specialized NSCoder.decodeObject<A>(of:forKey:)(0x72617473672E534ELL, 0xED00006574616474LL);
  uint64_t v18 = (uint64_t)&selRef_carats;
  uint64_t v19 = objc_msgSend(a1, sel_containsValueForKey_, String._bridgeToObjectiveCImpl()());
  swift_unknownObjectRelease();
  __int128 v2 = &selRef_carats;
  LODWORD(v101) = v19;
  *(void *)&v107 = v17;
  if (v19)
  {
    v102 = objc_msgSend(a1, sel_decodeIntegerForKey_, String._bridgeToObjectiveCImpl()());
    swift_unknownObjectRelease();
    goto LABEL_33;
  }

          Hasher._combine(_:)(0);
          if (v42)
          {
LABEL_53:
            Hasher._combine(_:)(1u);
            type metadata accessor for CFDictionaryRef(0LL);
            lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( (unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef,  (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef,  (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
            id v52 = v42;
            _CFObject.hash(into:)();

            if (v44)
            {
LABEL_54:
              Hasher._combine(_:)(1u);
              type metadata accessor for CFDictionaryRef(0LL);
              lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( (unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef,  (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef,  (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
              uint64_t v53 = v44;
              _CFObject.hash(into:)();

              goto LABEL_60;
            }

          Hasher._combine(_:)(0);
          uint64_t v50 = v105;
          if (v105)
          {
LABEL_53:
            Hasher._combine(_:)(1u);
            type metadata accessor for CFDictionaryRef(0LL);
            lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( (unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef,  (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef,  (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
            v51 = v50;
            _CFObject.hash(into:)();

            id v52 = v101;
            if (v101)
            {
LABEL_54:
              a1 = v30;
              Hasher._combine(_:)(1u);
              type metadata accessor for CFDictionaryRef(0LL);
              lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( (unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef,  (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef,  (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
              uint64_t v53 = v52;
              _CFObject.hash(into:)();

              goto LABEL_60;
            }

        if ((a10 & 0x1000000000000000LL) != 0) {
          goto LABEL_67;
        }
        goto LABEL_58;
      }
    }

    Hasher._combine(_:)(0);
    goto LABEL_58;
  }

  Hasher._combine(_:)(0);
  if (!v43) {
    goto LABEL_57;
  }
LABEL_54:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
LABEL_58:
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)(a1, v44);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)(a1, v45);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)(a1, v46);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)(a1, v47);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)(a1, v48);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)(a1, v49);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)(a1, v37);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)(a1, v35);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)(a1, v41);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)(a1, v7);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)(a1, v36);
  return swift_bridgeObjectRelease();
}

  swift_release();
  outlined consume of Set<A1>.Iterator._Variant<A><A1>();

  swift_bridgeObjectRelease();
  type metadata accessor for NSString();
  lazy protocol witness table accessor for type NSString and conformance NSObject();
  uint64_t v60 = @"NSErrorFailingURLKey";
  AnyHashable.init<A>(_:)();
  if (*(void *)(v36 + 16) && (v61 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)&v71), (v62 & 1) != 0))
  {
    outlined init with copy of Any(*(void *)(v36 + 56) + 32 * v61, (uint64_t)&v79);
  }

  else
  {
    v79 = 0u;
    v80 = 0u;
  }

  swift_release();
  outlined destroy of AnyHashable((uint64_t)&v71);
  if (*((void *)&v80 + 1))
  {
    id result = swift_dynamicCast();
    if ((result & 1) != 0) {
      return result;
    }
  }

  else
  {
    id result = outlined destroy of Any?((uint64_t)&v79);
  }

  *a1 = 0LL;
  a1[1] = 0LL;
  a1[2] = 0LL;
  return result;
}

  swift_release();
  outlined consume of Set<A1>.Iterator._Variant<A><A1>();

  swift_bridgeObjectRelease();
  *(void *)&v65 = @"NSErrorFailingURLStringKey";
  type metadata accessor for NSString();
  lazy protocol witness table accessor for type NSString and conformance NSObject();
  int v59 = @"NSErrorFailingURLStringKey";
  AnyHashable.init<A>(_:)();
  if (*(void *)(v35 + 16))
  {
    uint64_t v60 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)&v69);
    if ((v61 & 1) != 0)
    {
      outlined init with copy of Any(*(void *)(v35 + 56) + 32 * v60, (uint64_t)&v65);
    }

    else
    {
      v65 = 0u;
      v66 = 0u;
    }
  }

  else
  {
    v65 = 0u;
    v66 = 0u;
  }

  swift_release();
  outlined destroy of AnyHashable((uint64_t)&v69);
  if (*((void *)&v66 + 1))
  {
    else {
      return 0LL;
    }
  }

  else
  {
    outlined destroy of Any?((uint64_t)&v65);
    return 0LL;
  }

  swift_release();
  outlined consume of Set<A1>.Iterator._Variant<A><A1>();

  swift_bridgeObjectRelease();
  *(void *)&v65 = @"NSURLErrorFailingURLPeerTrustErrorKey";
  type metadata accessor for NSString();
  lazy protocol witness table accessor for type NSString and conformance NSObject();
  int v59 = @"NSURLErrorFailingURLPeerTrustErrorKey";
  AnyHashable.init<A>(_:)();
  if (*(void *)(v35 + 16))
  {
    uint64_t v60 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)&v69);
    if ((v61 & 1) != 0)
    {
      outlined init with copy of Any(*(void *)(v35 + 56) + 32 * v60, (uint64_t)&v75);
    }

    else
    {
      v75 = 0u;
      v76[0] = 0u;
    }
  }

  else
  {
    v75 = 0u;
    v76[0] = 0u;
  }

  swift_release();
  outlined destroy of AnyHashable((uint64_t)&v69);
  if (*((void *)&v76[0] + 1))
  {
    outlined init with take of Any(&v75, &v65);
    outlined init with take of Any(&v65, &v69);
    type metadata accessor for SecTrustRef(0LL);
    swift_dynamicCast();
    return v75;
  }

  else
  {
    outlined destroy of Any?((uint64_t)&v75);
    return 0LL;
  }

  swift_release();
  outlined consume of Set<A1>.Iterator._Variant<A><A1>();

  swift_bridgeObjectRelease();
  *(void *)&v67 = static String._unconditionallyBridgeFromObjectiveC(_:)(*a1);
  *((void *)&v67 + 1) = v60;
  AnyHashable.init<A>(_:)();
  if (*(void *)(v36 + 16) && (v61 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)&v71), (v62 & 1) != 0))
  {
    outlined init with copy of Any(*(void *)(v36 + 56) + 32 * v61, (uint64_t)&v67);
  }

  else
  {
    v67 = 0u;
    v68 = 0u;
  }

  swift_release();
  outlined destroy of AnyHashable((uint64_t)&v71);
  if (*((void *)&v68 + 1))
  {
    else {
      return 0LL;
    }
  }

  else
  {
    outlined destroy of Any?((uint64_t)&v67);
    return 0LL;
  }

  __break(1u);
LABEL_58:
  id result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

            __break(1u);
          }

            __break(1u);
LABEL_58:
            __break(1u);
            goto LABEL_59;
          }
        }

        __break(1u);
LABEL_50:
        uint64_t v28 = v25;
        BOOL v13 = v27;
      }
    }

    goto LABEL_62;
  }

  id result = swift_unknownObjectRetain_n();
  BOOL v13 = v8;
  uint64_t v14 = a2;
  while (2)
  {
    uint64_t v16 = *(unsigned __int16 *)(v14 + 16);
    if (!*(_WORD *)(v14 + 16)) {
      goto LABEL_12;
    }
    uint64_t v17 = *(void *)(v14 + 40);
    uint64_t v18 = __OFSUB__(v13, v17);
    uint64_t v19 = v13 - v17;
    if (v18) {
      goto LABEL_54;
    }
    if (__OFADD__(v19, 1LL)) {
      goto LABEL_55;
    }
    if (v19 + 1 < 1)
    {
      uint64_t v16 = 0LL;
      goto LABEL_13;
    }

    if ((_DWORD)v16 == 1)
    {
      BOOL v13 = v19;
LABEL_12:
      if (!v13) {
        goto LABEL_13;
      }
      goto LABEL_53;
    }

    uint64_t v20 = (uint64_t *)(v14 + 64);
    uint64_t v21 = 1LL;
    while (1)
    {
      uint64_t v22 = *v20;
      v20 += 3;
      BOOL v13 = v19 - v22;
      if (__OFSUB__(v19, v22))
      {
        __break(1u);
LABEL_52:
        __break(1u);
LABEL_53:
        __break(1u);
LABEL_54:
        __break(1u);
LABEL_55:
        __break(1u);
LABEL_56:
        __break(1u);
        goto LABEL_57;
      }

      if (__OFADD__(v13, 1LL)) {
        goto LABEL_52;
      }
      if (v13 + 1 < 1) {
        break;
      }
      ++v21;
      uint64_t v19 = v13;
      if (v16 == v21) {
        goto LABEL_12;
      }
    }

    uint64_t v16 = v21;
    BOOL v13 = v19;
LABEL_13:
    uint64_t v15 = (4 * *(_BYTE *)(v14 + 18) + 8) & 0x3C;
    uint64_t v12 = ((-15LL << v15) - 1) & v12 | (v16 << v15);
    uint64_t v14 = *(void *)(v14 + 24 + 24 * v16);
    swift_unknownObjectRetain();
    id result = swift_unknownObjectRelease();
    if (*(_BYTE *)(v14 + 18)) {
      continue;
    }
    break;
  }

  uint64_t v9 = v12 & 0xFFFFFFFFFFFFF0FFLL;
  uint64_t v28 = *(unsigned __int16 *)(v14 + 16);
  if (!*(_WORD *)(v14 + 16)) {
    goto LABEL_45;
  }
LABEL_34:
  uint64_t v29 = *(void *)(v14 + 24);
  uint64_t v18 = __OFSUB__(v13, v29);
  unint64_t v27 = v13 - v29;
  if (v18) {
    goto LABEL_60;
  }
  if (!__OFADD__(v27, 1LL))
  {
    if ((uint64_t)(v27 + 1) < 1)
    {
      uint64_t v28 = 0LL;
      goto LABEL_46;
    }

    if ((_DWORD)v28 == 1)
    {
      BOOL v13 = v27;
      goto LABEL_45;
    }

    uint64_t v30 = (uint64_t *)(v14 + 48);
    uint64_t v25 = 1LL;
    while (1)
    {
      uint64_t v31 = *v30;
      v30 += 3;
      BOOL v13 = v27 - v31;
      if (__OFSUB__(v27, v31)) {
        goto LABEL_58;
      }
      if (__OFADD__(v13, 1LL)) {
        break;
      }
      if (v13 + 1 < 1) {
        goto LABEL_50;
      }
      ++v25;
      unint64_t v27 = v13;
      if (v28 == v25) {
        goto LABEL_45;
      }
    }

  SEL v5 = 0LL;
  uint64_t v30 = v14 - v4;
  if (__OFSUB__(v14, v4)) {
    goto LABEL_67;
  }
LABEL_58:
  *a1 = v3;
  a1[1] = v26;
  a1[2] = v6;
  a1[3] = v5;
  a1[4] = v30;
  return result;
}

  if (!v26) {
    goto LABEL_58;
  }
LABEL_76:
  __break(1u);
  return result;
}

  swift_release();
  outlined consume of Set<A1>.Iterator._Variant<A><A1>();

  swift_bridgeObjectRelease();
  *(void *)&v65 = @"NSFilePath";
  type metadata accessor for NSMorphologyPronoun( 0LL,  (unint64_t *)&lazy cache variable for type metadata for NSString);
  lazy protocol witness table accessor for type NSString and conformance NSObject();
  int v59 = @"NSFilePath";
  AnyHashable.init<A>(_:)();
  if (*(void *)(v35 + 16))
  {
    uint64_t v60 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)&v69);
    if ((v61 & 1) != 0)
    {
      outlined init with copy of Any(*(void *)(v35 + 56) + 32 * v60, (uint64_t)&v65);
    }

    else
    {
      v65 = 0u;
      v66 = 0u;
    }
  }

  else
  {
    v65 = 0u;
    v66 = 0u;
  }

  swift_release();
  outlined destroy of AnyHashable((uint64_t)&v69);
  if (*((void *)&v66 + 1))
  {
    else {
      return 0LL;
    }
  }

  else
  {
    outlined destroy of Any?((uint64_t)&v65, &demangling cache variable for type metadata for Any?);
    return 0LL;
  }

  swift_release();
  outlined consume of Set<A1>.Iterator._Variant<A><A1>();

  swift_bridgeObjectRelease();
  type metadata accessor for NSMorphologyPronoun( 0LL,  (unint64_t *)&lazy cache variable for type metadata for NSString);
  lazy protocol witness table accessor for type NSString and conformance NSObject();
  v61 = @"NSStringEncoding";
  AnyHashable.init<A>(_:)();
  if (*(void *)(v36 + 16) && (v62 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)&v72), (v63 & 1) != 0))
  {
    outlined init with copy of Any(*(void *)(v36 + 56) + 32 * v62, (uint64_t)&v80);
  }

  else
  {
    v80 = 0u;
    v81 = 0u;
  }

  swift_release();
  outlined destroy of AnyHashable((uint64_t)&v72);
  if (*((void *)&v81 + 1))
  {
    type metadata accessor for NSMorphologyPronoun( 0LL,  (unint64_t *)&lazy cache variable for type metadata for NSNumber);
    if ((swift_dynamicCast() & 1) != 0)
    {
      *(void *)a1 = objc_msgSend(@"NSStringEncoding", sel_unsignedIntegerValue);
      *(_BYTE *)(a1 + _Block_object_dispose(va, 8) = 0;

      return;
    }
  }

  else
  {
    outlined destroy of Any?((uint64_t)&v80, &demangling cache variable for type metadata for Any?);
  }

  *(void *)a1 = 0LL;
  *(_BYTE *)(a1 + _Block_object_dispose(va, 8) = 1;
}

  swift_release();
  outlined consume of Set<A1>.Iterator._Variant<A><A1>();

  swift_bridgeObjectRelease();
  *(void *)&v65 = @"NSUnderlyingError";
  type metadata accessor for NSMorphologyPronoun( 0LL,  (unint64_t *)&lazy cache variable for type metadata for NSString);
  lazy protocol witness table accessor for type NSString and conformance NSObject();
  int v59 = @"NSUnderlyingError";
  AnyHashable.init<A>(_:)();
  if (*(void *)(v35 + 16))
  {
    uint64_t v60 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)&v69);
    if ((v61 & 1) != 0)
    {
      outlined init with copy of Any(*(void *)(v35 + 56) + 32 * v60, (uint64_t)&v65);
    }

    else
    {
      v65 = 0u;
      v66 = 0u;
    }
  }

  else
  {
    v65 = 0u;
    v66 = 0u;
  }

  swift_release();
  outlined destroy of AnyHashable((uint64_t)&v69);
  if (*((void *)&v66 + 1))
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
    else {
      return 0LL;
    }
  }

  else
  {
    outlined destroy of Any?((uint64_t)&v65, &demangling cache variable for type metadata for Any?);
    return 0LL;
  }

  swift_release();
  outlined consume of Set<A1>.Iterator._Variant<A><A1>();
  uint64_t v20 = (uint64_t)v175;

  swift_bridgeObjectRelease();
  v182[0] = @"NSUnderlyingError";
  type metadata accessor for NSMorphologyPronoun( 0LL,  (unint64_t *)&lazy cache variable for type metadata for NSString);
  lazy protocol witness table accessor for type NSString and conformance NSObject();
  uint64_t v60 = @"NSUnderlyingError";
  AnyHashable.init<A>(_:)();
  if (*(void *)(v36 + 16) && (v61 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)&v186), (v62 & 1) != 0))
  {
    outlined init with copy of Any(*(void *)(v36 + 56) + 32 * v61, (uint64_t)&v197);
  }

  else
  {
    v197 = 0u;
    v198 = 0u;
  }

  swift_release();
  outlined destroy of AnyHashable((uint64_t)&v186);
  if (*((void *)&v198 + 1))
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
    if ((swift_dynamicCast() & 1) != 0)
    {
      unsigned int v6 = v182[0];
      uint64_t v21 = v199;
      v63 = v182[0];
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        goto LABEL_208;
      }
      goto LABEL_64;
    }
  }

  else
  {
    outlined destroy of Any?((uint64_t)&v197, &demangling cache variable for type metadata for Any?);
  }

  while (2)
  {
    v66 = (id)v20;
    v67 = (id)v20;
    uint64_t v21 = _swift_stdlib_bridgeErrorToNSError();
    unsigned int v6 = objc_msgSend((id)v21, sel_userInfo);
    swift_unknownObjectRelease();
    v175 = v67;
    if (v6)
    {
      swift_unknownObjectRetain();
      v68 = static Dictionary._bridgeFromObjectiveCAdoptingNativeStorageOf(_:)();
      if (v68)
      {
        v69 = v68;
        goto LABEL_86;
      }

      v70 = objc_msgSend(v6, sel_count);
      if (v70)
      {
        v71 = (uint64_t)v70;
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Any>);
        v69 = static _DictionaryStorage.allocate(capacity:)();
        uint64_t v21 = *(void *)(v69 + 48);
        v72 = *(void *)(v69 + 56);
        swift_retain();
        id result = (uint64_t)specialized closure #2 in static Dictionary._forceBridgeFromObjectiveC(_:result:)( (void *)v21,  v72,  v6,  v71);
        if ((result & 0x8000000000000000LL) == 0 && v71 >= result)
        {
          *(void *)(v69 + 16) = result;
          if (!result)
          {
LABEL_85:
            swift_release();
LABEL_86:

            if (!*(void *)(v69 + 16)) {
              goto LABEL_90;
            }
            goto LABEL_87;
          }

          v73 = result - 1;
          v74 = v69 + 64;
          while (1)
          {
            v79 = (uint64_t *)(*(void *)(v69 + 48) + 16 * v73);
            v80 = *v79;
            uint64_t v20 = v79[1];
            swift_bridgeObjectRetain();
            uint64_t v21 = specialized __RawDictionaryStorage.find<A>(_:)(v80, v20);
            v82 = v81;
            swift_bridgeObjectRelease();
            if ((v82 & 1) != 0) {
              break;
            }
            *(void *)(v74 + ((v21 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v21;
            if (v73 < (uint64_t)v21)
            {
              *(_OWORD *)(*(void *)(v69 + 48) + 16 * v21) = *(_OWORD *)(*(void *)(v69 + 48) + 16 * v73);
              v75 = *(void *)(v69 + 56);
              v76 = (_OWORD *)(v75 + 32 * v21);
              v77 = (_OWORD *)(v75 + 32 * v73);
              v78 = v77[1];
              *v76 = *v77;
              v76[1] = v78;
LABEL_77:
              if (--v73 < 0) {
                goto LABEL_85;
              }
              continue;
            }

            if (v21 == v73) {
              goto LABEL_77;
            }
            v85 = *(void *)(v69 + 48);
            v86 = (uint64_t *)(v85 + 16 * v21);
            v87 = (uint64_t *)(v85 + 16 * v73);
            v88 = *v86;
            v89 = v86[1];
            v90 = v87[1];
            *v86 = *v87;
            v86[1] = v90;
            *v87 = v88;
            v87[1] = v89;
            v91 = *(void *)(v69 + 56);
            uint64_t v21 = v91 + 32 * v21;
            v92 = (_OWORD *)(v91 + 32 * v73);
            outlined init with take of Any((_OWORD *)v21, &v186);
            outlined init with take of Any(v92, (_OWORD *)v21);
            outlined init with take of Any(&v186, v92);
            if (v73 < 0) {
              goto LABEL_85;
            }
          }

          swift_arrayDestroy();
          swift_arrayDestroy();
          v83 = *(void *)(v69 + 16);
          uint64_t v25 = __OFSUB__(v83, 1LL);
          v84 = v83 - 1;
          if (v25) {
            goto LABEL_206;
          }
          *(void *)(v69 + 16) = v84;
          goto LABEL_77;
        }

  swift_release();
  outlined consume of Set<A1>.Iterator._Variant<A><A1>();

  swift_bridgeObjectRelease();
  type metadata accessor for NSMorphologyPronoun( 0LL,  (unint64_t *)&lazy cache variable for type metadata for NSString);
  lazy protocol witness table accessor for type NSString and conformance NSObject();
  uint64_t v60 = @"NSURL";
  AnyHashable.init<A>(_:)();
  if (*(void *)(v36 + 16) && (v61 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)&v71), (v62 & 1) != 0))
  {
    outlined init with copy of Any(*(void *)(v36 + 56) + 32 * v61, (uint64_t)&v79);
  }

  else
  {
    v79 = 0u;
    v80 = 0u;
  }

  swift_release();
  outlined destroy of AnyHashable((uint64_t)&v71);
  if (*((void *)&v80 + 1))
  {
    id result = swift_dynamicCast();
    if ((result & 1) != 0) {
      return result;
    }
  }

  else
  {
    id result = outlined destroy of Any?((uint64_t)&v79, &demangling cache variable for type metadata for Any?);
  }

  *a1 = 0LL;
  a1[1] = 0LL;
  a1[2] = 0LL;
  return result;
}

            v63 = 0LL;
            v64 = 0LL;
            v65 = 0;
            goto LABEL_58;
          }

  swift_bridgeObjectRelease();
  v57 = HIBYTE(v49) & 0xF;
  if ((v49 & 0x2000000000000000LL) == 0) {
    v57 = v47 & 0xFFFFFFFFFFFFLL;
  }
  if (v57
    && (unint64_t v58 = objc_msgSend((id)Path, sel_URLByDeletingLastPathComponent)) != 0)
  {
    int v59 = v58;
    URL.init(reference:)(v58, v87);

    uint64_t v60 = *(id *)v87;
    URL.init(reference:)(v60, v87);

    swift_release();
    id result = swift_release();
    v61 = *(_OWORD *)&v87[8];
    *(void *)countAndFlagsBits = *(void *)v87;
    *(_OWORD *)(countAndFlagsBits + _Block_object_dispose(va, 8) = v61;
  }

  else
  {
    *(void *)countAndFlagsBits = Path;
    *(void *)(countAndFlagsBits + _Block_object_dispose(va, 8) = v3;
    *(void *)(countAndFlagsBits + 16) = v5;
    v62 = (id)Path;
    swift_retain();
    return swift_retain();
  }

  return result;
}

  v77 = HIBYTE(v64) & 0xF;
  if ((v64 & 0x2000000000000000LL) == 0) {
    v77 = v62 & 0xFFFFFFFFFFFFLL;
  }
  if (!v77)
  {
    swift_bridgeObjectRelease();
    v82 = v15;
    swift_retain_n();
    swift_retain_n();
    uint64_t v20 = v82;
    if (_foundation_swift_url_feature_enabled())
    {
      v119 = v4;
      v124._countAndFlagsBits = (uint64_t)v20;
      v124._object = v7;
      v125 = v9;
      v83 = v20;
      swift_retain();
      swift_retain();
      v84 = URL.path(percentEncoded:)(1);
      v124 = v84;
      swift_bridgeObjectRetain();
      if (String.count.getter() > 1
        && (specialized BidirectionalCollection.last.getter(v84._countAndFlagsBits, (unint64_t)v84._object) & 0x1FF) == 0x2F)
      {
        specialized RangeReplaceableCollection<>.popLast()();
        swift_bridgeObjectRelease();
      }

      v122._countAndFlagsBits = Set.init(minimumCapacity:)();
      v85 = specialized Set._Variant.insert(_:)(&v123, 0x2FuLL);
      v86 = v122._countAndFlagsBits;
      v87 = v124._countAndFlagsBits;
      v88 = v124._object;
      v89 = ((unint64_t)v124._object >> 56) & 0xF;
      if (v89)
      {
        v121 = v83;
        v122 = v124;
        MEMORY[0x1895F8858](v85);
        v114 = (uint64_t)&v122;
        v115 = v86;
        swift_bridgeObjectRetain();
        specialized String.UTF8View.withContiguousStorageIfAvailable<A>(_:)( (void *(*)(__int128 *__return_ptr, void *, uint64_t))closure #1 in StringProtocol.removingURLPercentEncoding(excluding:)specialized partial apply,  (uint64_t)v113,  v87,  (unint64_t)v88);
        if (v90 == 1)
        {
          v92 = (unint64_t)v122._object;
          v91 = v122._countAndFlagsBits;
          swift_bridgeObjectRetain();
          specialized StringProtocol.removingURLPercentEncoding<A>(utf8Buffer:excluding:)(v91, v92, v86);
          swift_bridgeObjectRelease();
        }

        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v83 = v121;
      }

      else
      {
        swift_bridgeObjectRelease();
      }

      swift_release();
      swift_release();

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_release();
      swift_release();
    }

    else
    {
      v95 = objc_msgSend(v20, sel__parameterString);
      if (v95)
      {
        v96 = v95;
        v97 = static String._unconditionallyBridgeFromObjectiveC(_:)(v95);
        v99 = v98;

        if (getEnumTag for _DarwinSearchPathsSequence.Iterator.State()
          && (v100 = objc_msgSend(v20, sel_path)) != 0)
        {
          v101 = v100;
          v102 = static String._unconditionallyBridgeFromObjectiveC(_:)(v100);
          v104 = v103;

          v124._countAndFlagsBits = (uint64_t)v102;
          v124._object = v104;
          swift_bridgeObjectRetain();
          v105._countAndFlagsBits = 59LL;
          v105._object = (void *)0xE100000000000000LL;
          String.append(_:)(v105);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRetain();
          v106._countAndFlagsBits = (uint64_t)v97;
          v106._object = v99;
          String.append(_:)(v106);
          swift_release();
          swift_release();

          swift_bridgeObjectRelease();
        }

        else
        {
          v124._countAndFlagsBits = 59LL;
          v124._object = (void *)0xE100000000000000LL;
          v108._countAndFlagsBits = (uint64_t)v97;
          v108._object = v99;
          String.append(_:)(v108);
          swift_release();
          swift_release();
        }

        swift_bridgeObjectRelease();
      }

      else
      {
        v109 = objc_msgSend(v20, sel_path);
        if (v109)
        {
          v110 = v109;
          static String._unconditionallyBridgeFromObjectiveC(_:)(v109);
          swift_release();
          swift_release();
        }

        else
        {
          swift_release();
          swift_release();
        }
      }
    }

    v111 = (void *)objc_opt_self();
    v112 = String._bridgeToObjectiveCImpl()();
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
    v76 = objc_msgSend( v111,  sel__cocoaErrorWithCode_path_url_underlying_variant_source_destination_,  4,  v112,  v20,  0,  0,  0,  0);
LABEL_94:
    v76;
    swift_unknownObjectRelease();

    return (id)swift_willThrow();
  }

  v78 = MEMORY[0x186E20F44](v121);
  if (v78)
  {
    v79 = (void *)v78;
    v80 = String._bridgeToObjectiveCImpl()();
    swift_bridgeObjectRelease();
    if (v69)
    {
      type metadata accessor for NSFileAttributeKey(0LL);
      lazy protocol witness table accessor for type NSFileAttributeKey and conformance NSFileAttributeKey();
      swift_bridgeObjectRetain();
      v81 = (void *)_NativeDictionary.bridged()();
    }

    else
    {
      v81 = 0LL;
    }

    v124._countAndFlagsBits = 0LL;
    v93 = objc_msgSend( v79,  sel_createDirectoryAtPath_withIntermediateDirectories_attributes_error_,  v80,  v6 & 1,  v81,  &v124);

    swift_unknownObjectRelease();
    if (v93) {
      return (id)v124._countAndFlagsBits;
    }
    if (v124._countAndFlagsBits)
    {
      (id)v124._countAndFlagsBits;
    }

    else
    {
      if (one-time initialization token for _nilObjCError != -1) {
        swift_once();
      }
      v107 = (id)_nilObjCError;
    }

    return (id)swift_willThrow();
  }

  LODWORD(v115) = 0;
  v114 = 48LL;
  id result = (id)_assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

        uint64_t v19 = v21;
LABEL_58:
        _encodeInt(v19, v20);
        break;
      case 'i':
      case 'l':
LABEL_24:
        uint64_t v19 = *(void **)(a1 + 8);
        if (!v19) {
          return;
        }
        uint64_t v20 = *(_DWORD *)a3;
        goto LABEL_58;
      case 'q':
        goto LABEL_26;
      case 's':
        goto LABEL_29;
      default:
        if (v6 != 123) {
          goto LABEL_87;
        }
        uint64_t v25 = skipAggregateName(a2 + 1);
        if (*v25 != 125)
        {
          uint64_t v26 = 0LL;
          do
          {
            NSGetSizeAndAlignment(v25, sizep, &v46);
            unint64_t v27 = roundUp(v26, v46);
            uint64_t v25 = (char *)_encodeValueOfObjCType(a1, v25, (char *)a3 + v27);
            uint64_t v26 = sizep[0] + v27;
          }

          while (*v25 != 125);
        }

        return;
    }

    return;
  }

  if (v6 == 81)
  {
LABEL_26:
    uint64_t v21 = *(void **)(a1 + 8);
    if (!v21) {
      return;
    }
    uint64_t v22 = *a3;
    sizep[0] = (NSUInteger)v22;
    if ((unint64_t)&v22[13].isa + 6 <= 0xED)
    {
      LOBYTE(v46) = (_BYTE)v22;
      goto LABEL_32;
    }

    if ((unint64_t)&v22[4095].isa + 7 > 0xFFFE)
    {
      if ((unint64_t)&v22[0xFFFFFFF].isa + 7 > 0xFFFFFFFE)
      {
        uint64_t v30 = -121;
LABEL_84:
        LOBYTE(v46) = v30;
        [v21 appendBytes:&v46 length:1];
        id v10 = sizep;
        uint64_t v9 = v21;
        id v24 = 8LL;
      }

      else
      {
        unint64_t v47 = -126;
        objc_msgSend(v21, "appendBytes:length:", &v47, 1, v22);
        id v10 = &v46;
LABEL_82:
        uint64_t v9 = v21;
        id v24 = 4LL;
      }

      goto LABEL_85;
    }

    LOWORD(v46) = (_WORD)v22;
    unint64_t v47 = -127;
    objc_msgSend(v21, "appendBytes:length:", &v47, 1, v46);
    id v10 = &v46;
LABEL_71:
    uint64_t v9 = v21;
    id v24 = 2LL;
LABEL_85:
    objc_msgSend(v9, "appendBytes:length:", v10, v24, v46);
    return;
  }

  if (v6 == 83)
  {
LABEL_29:
    uint64_t v21 = *(void **)(a1 + 8);
    if (!v21) {
      return;
    }
    uint64_t v23 = *(_WORD *)a3;
    LOWORD(sizep[0]) = v23;
    if ((unsigned __int16)(v23 + 110) <= 0xEDu)
    {
      LOBYTE(v46) = v23;
LABEL_32:
      id v10 = &v46;
      uint64_t v9 = v21;
LABEL_33:
      id v24 = 1LL;
      goto LABEL_85;
    }

    LOBYTE(v46) = -127;
    [v21 appendBytes:&v46 length:1];
    id v10 = sizep;
    goto LABEL_71;
  }

  if (v6 != 91)
  {
LABEL_87:
    CFTypeRef v41 = (char)v6;
    BOOL v42 = "unknown type descriptor";
LABEL_89:
    typeDescriptorError(v41, (uint64_t)a2, (uint64_t)v42);
    typeDescriptorError(v43, v44, v45);
    return;
  }

  size_t v11 = *(unsigned __int8 *)v7;
  if ((v11 - 48) > 9)
  {
    uint64_t v16 = NSGetSizeAndAlignment(v7, sizep, 0LL);
  }

  else
  {
    uint64_t v12 = 0LL;
    do
    {
      BOOL v13 = v12;
      uint64_t v14 = (v11 - 48);
      uint64_t v15 = *(unsigned __int8 *)++v7;
      size_t v11 = v15;
      uint64_t v12 = v14 + 10 * v12;
    }

    while ((v15 - 48) < 0xA);
    uint64_t v16 = NSGetSizeAndAlignment(v7, sizep, 0LL);
    if (v12)
    {
      uint64_t v17 = 0LL;
      uint64_t v18 = v14 + 10 * v13;
      do
        _encodeValueOfObjCType(a1, v7, (char *)a3 + sizep[0] * v17++);
      while (v18 != v17);
    }
  }

  uint64_t v40 = *(unsigned __int8 *)v16;
  if (v40 != 93)
  {
    CFTypeRef v41 = (char)v40;
    BOOL v42 = "missing ']' in type descriptor";
    goto LABEL_89;
  }

LABEL_76:
  for (uint64_t i = 9LL; i != 1033; i += 4LL)
  {
    uint64_t v40 = v25[i].super.isa;
    if (v40) {
  }
    }

  free(v25);
  return v38;
}

    _StringGuts.grow(_:)(37LL);
    swift_bridgeObjectRelease();
    *(void *)&__src[0] = 0xD000000000000023LL;
    *((void *)&__src[0] + 1) = 0x80000001839CA260LL;
    uint64_t v53 = *((_OWORD *)v19 + 1);
    v80 = *(_OWORD *)v19;
    v81 = v53;
    v82 = v19[4];
    *(void *)&__dst[0] = BufferReader.lineNumber.getter();
    v54._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v54);
    swift_bridgeObjectRelease();
    goto LABEL_77;
  }

        uint64_t v33 = (uint64_t)v49;
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        {
          isUniquelyReferenced_nonNull_native = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  *(void *)(v33 + 16) + 1LL,  1,  (char *)v33);
          uint64_t v33 = isUniquelyReferenced_nonNull_native;
        }

        uint64_t v36 = *(void *)(v33 + 16);
        uint64_t v35 = *(void *)(v33 + 24);
        if (v36 >= v35 >> 1)
        {
          isUniquelyReferenced_nonNull_native = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (char *)(v35 > 1),  v36 + 1,  1,  (char *)v33);
          uint64_t v33 = isUniquelyReferenced_nonNull_native;
        }

        *(void *)(v33 + 16) = v36 + 1;
        *(_BYTE *)(v33 + v36 + 32) = 34;
        unint64_t v49 = (char *)v33;
        MEMORY[0x1895F8858](isUniquelyReferenced_nonNull_native);
        unint64_t v37 = String.init(unsafeUninitializedCapacity:initializingUTF8With:)();
        unsigned int v39 = v38;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v40 = v37;
        CFTypeRef v41 = v39;
        result._object = v41;
        result._countAndFlagsBits = v40;
        return result;
    }
  }

  Path = 4LL;
  v107 = (unint64_t)object;
  switch((int)v90)
  {
    case 1:
    case 13:
      Path = 513LL;
      goto LABEL_87;
    case 2:
      goto LABEL_88;
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 14:
    case 15:
    case 16:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 29:
    case 31:
    case 32:
    case 33:
    case 34:
    case 35:
    case 36:
    case 37:
    case 38:
    case 39:
    case 40:
    case 41:
    case 42:
    case 43:
    case 44:
    case 45:
    case 46:
    case 47:
    case 48:
    case 49:
    case 50:
    case 51:
    case 52:
    case 53:
    case 54:
    case 55:
    case 56:
    case 57:
    case 58:
    case 59:
    case 60:
    case 61:
    case 62:
    case 64:
    case 65:
    case 66:
    case 67:
    case 68:
      goto LABEL_81;
    case 17:
      Path = 516LL;
      goto LABEL_87;
    case 28:
    case 69:
      Path = 640LL;
      goto LABEL_87;
    case 30:
      Path = 642LL;
      goto LABEL_87;
    case 63:
      swift_bridgeObjectRetain();
      Path = String._lastPathComponent.getter(v86, v88);
      v107 = v109;
      swift_bridgeObjectRelease();
      if ((v107 & 0x1000000000000000LL) != 0) {
        goto LABEL_132;
      }
      if ((v107 & 0x2000000000000000LL) != 0) {
        isStackAllocationSafe = HIBYTE(v107) & 0xF;
      }
      else {
        isStackAllocationSafe = Path & 0xFFFFFFFFFFFFLL;
      }
      goto LABEL_96;
    default:
      if ((_DWORD)v90 == 102)
      {
        v108 = 0LL;
        Path = 512LL;
        v107 = (unint64_t)object;
        goto LABEL_93;
      }

    __break(1u);
    goto LABEL_77;
  }

  v61 = result;
  if (v12 < 0) {
    goto LABEL_79;
  }
  SEL v5 = v20 - v12;
  if (v20 < v12) {
    goto LABEL_79;
  }
  if (v20 == v12)
  {
    swift_bridgeObjectRetain();
    id result = swift_bridgeObjectRetain();
    goto LABEL_40;
  }

  uint64_t v26 = a5[4];
  unint64_t v27 = a5[5];
  uint64_t v28 = a5[6];
  a5[5] = 0LL;
  a5[6] = 0LL;
  a5[4] = 0LL;
  if (v27)
  {
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain_n();
    specialized Rope.Builder._appendNow(_:)(v26, v27, v28);
    id result = outlined consume of Rope<AttributedString._InternalRun>._Item?(a5[4], a5[5]);
    a5[4] = v5;
    a5[5] = v6;
    a5[6] = v7;
    goto LABEL_40;
  }

        __break(1u);
LABEL_77:
        __break(1u);
LABEL_78:
        __break(1u);
LABEL_79:
        __break(1u);
        goto LABEL_80;
      }

      __break(1u);
      goto LABEL_76;
    }

  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    __int128 v2 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  *((void *)v2 + 2) + 1LL,  1,  v2);
  }
  uint64_t v28 = *((void *)v2 + 2);
  unint64_t v27 = *((void *)v2 + 3);
  if (v28 >= v27 >> 1) {
    __int128 v2 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (char *)(v27 > 1),  v28 + 1,  1,  v2);
  }
  *((void *)v2 + 2) = v28 + 1;
  v2[v28 + 32] = 5;
  if ((v1 & 0x40) == 0)
  {
LABEL_24:
    if ((v1 & 0x2000) == 0) {
      return v2;
    }
    goto LABEL_86;
  }

        if (v40) {
          goto LABEL_195;
        }
        unsigned int v6 = 0LL;
        goto LABEL_88;
      }

      uint64_t v8 = ((-15LL << ((4 * v28 + 8) & 0x3C)) - 1) & v28 | ((unint64_t)*(unsigned __int16 *)(v25 + 16) << ((4 * v28 + 8) & 0x3C));
      swift_unknownObjectRetain();
      unsigned int v6 = 0LL;
      uint64_t v9 = 0LL;
      goto LABEL_89;
    }

    unsigned int v6 = 0LL;
    uint64_t v9 = 0LL;
    uint64_t v8 = 0LL;
    id v10 = 0LL;
LABEL_90:
    size_t v11 = a4 - v6;
    if (__OFSUB__(a4, v6)) {
      goto LABEL_187;
    }
    id v7 = v27;
LABEL_6:
    if (++v12 == a2) {
      goto LABEL_162;
    }
  }

    specialized _NativeDictionary._insert(at:key:value:)(v20, a3, a4, v12, v8, (void *)v27);
    swift_bridgeObjectRetain();
    goto LABEL_77;
  }

  if ((v18 & 1) != 0)
  {
    unint64_t v27 = v19;
    goto LABEL_13;
  }

  v64 = v20;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Data>);
  unint64_t v48 = static _DictionaryStorage.copy(original:)();
  unint64_t v27 = v48;
  if (!*(void *)(v19 + 16))
  {
LABEL_75:
    swift_bridgeObjectRelease();
    uint64_t v20 = v64;
    if ((v26 & 1) != 0) {
      goto LABEL_14;
    }
    goto LABEL_76;
  }

  id result = (char *)(v48 + 64);
  __srUChar32 c = (char *)(v19 + 64);
  unint64_t v49 = (unint64_t)((1LL << *(_BYTE *)(v27 + 32)) + 63) >> 6;
  if (v27 != v19 || result >= &__src[8 * v49]) {
    id result = (char *)memmove(result, __src, 8 * v49);
  }
  uint64_t v50 = 0LL;
  *(void *)(v27 + 16) = *(void *)(v19 + 16);
  v51 = 1LL << *(_BYTE *)(v19 + 32);
  id v52 = -1LL;
  if (v51 < 64) {
    id v52 = ~(-1LL << v51);
  }
  uint64_t v53 = v52 & *(void *)(v19 + 64);
  v65 = (unint64_t)(v51 + 63) >> 6;
  while (1)
  {
    if (v53)
    {
      v54 = __clz(__rbit64(v53));
      v53 &= v53 - 1;
      v55 = v54 | (v50 << 6);
      goto LABEL_52;
    }

    v61 = v50 + 1;
    if (__OFADD__(v50, 1LL))
    {
      __break(1u);
LABEL_80:
      __break(1u);
LABEL_81:
      __break(1u);
      goto LABEL_82;
    }

    if (v61 >= v65) {
      goto LABEL_75;
    }
    v62 = *(void *)&__src[8 * v61];
    ++v50;
    if (!v62)
    {
      uint64_t v50 = v61 + 1;
      if (v61 + 1 >= v65) {
        goto LABEL_75;
      }
      v62 = *(void *)&__src[8 * v50];
      if (!v62)
      {
        uint64_t v50 = v61 + 2;
        if (v61 + 2 >= v65) {
          goto LABEL_75;
        }
        v62 = *(void *)&__src[8 * v50];
        if (!v62)
        {
          uint64_t v50 = v61 + 3;
          if (v61 + 3 >= v65) {
            goto LABEL_75;
          }
          v62 = *(void *)&__src[8 * v50];
          if (!v62)
          {
            uint64_t v50 = v61 + 4;
            if (v61 + 4 >= v65) {
              goto LABEL_75;
            }
            v62 = *(void *)&__src[8 * v50];
            if (!v62)
            {
              uint64_t v50 = v61 + 5;
              if (v61 + 5 >= v65) {
                goto LABEL_75;
              }
              v62 = *(void *)&__src[8 * v50];
              if (!v62) {
                break;
              }
            }
          }
        }
      }
    }

            id v52 = (v64 - 1) & v64;
            v55 = __clz(__rbit64(v64)) + (v49 << 6);
          }

          v56 = 8 * v55;
          v57 = *(void *)(*(void *)(v23 + 48) + 8 * v55);
          unint64_t v58 = 16 * v55;
          int v59 = (uint64_t *)(*(void *)(v23 + 56) + v58);
          v61 = *v59;
          uint64_t v60 = v59[1];
          *(void *)(*(void *)(v24 + 48) + v56) = v57;
          v62 = (void *)(*(void *)(v24 + 56) + v58);
          *v62 = v61;
          v62[1] = v60;
          swift_bridgeObjectRetain();
        }
      }

            unint64_t v48 = (v56 - 1) & v56;
            v51 = __clz(__rbit64(v56)) + (v45 << 6);
          }

          id v52 = 8 * v51;
          uint64_t v53 = *(void **)(*(void *)(v21 + 56) + v52);
          *(void *)(*(void *)(v22 + 48) + v52) = *(void *)(*(void *)(v21 + 48) + v52);
          *(void *)(*(void *)(v22 + 56) + v52) = v53;
          v54 = v53;
        }
      }

    v82 = (v71 - 1) & v71;
    v83 = v72;
    v64 = __clz(__rbit64(v71)) + (v72 << 6);
LABEL_55:
    v65 = 24 * v64;
    v66 = *(void *)(a3 + 56);
    v67 = *(void *)(a3 + 48) + 24 * v64;
    v79 = *(char **)v67;
    v78 = *(void *)(v67 + 8);
    LODWORD(v81) = *(unsigned __int8 *)(v67 + 16);
    v80 = *(void *)(v14 + 72) * v64;
    (*(void (**)(char *, uint64_t, uint64_t))(v14 + 16))(v86, v66 + v80, v13);
    v68 = *(void *)(v32 + 48) + v65;
    v69 = v78;
    *(void *)v68 = v79;
    *(void *)(v68 + _Block_object_dispose(va, 8) = v69;
    *(_BYTE *)(v68 + 16) = v81;
    v84((char *)(*(void *)(v32 + 56) + v80), (uint64_t)v86, v13);
    swift_bridgeObjectRetain();
    v63 = v82;
    uint64_t v60 = v83;
  }

  v73 = v60 + 7;
  if (v60 + 7 >= v76) {
    goto LABEL_77;
  }
  v71 = *(void *)&v77[8 * v73];
  if (v71)
  {
    v72 = v60 + 7;
    goto LABEL_76;
  }

  while (1)
  {
    v72 = v73 + 1;
    if (__OFADD__(v73, 1LL)) {
      break;
    }
    if (v72 >= v76) {
      goto LABEL_77;
    }
    v71 = *(void *)&v77[8 * v72];
    ++v73;
    if (v71) {
      goto LABEL_76;
    }
  }

            v57 = (v71 - 1) & v71;
            uint64_t v60 = __clz(__rbit64(v71)) + (v54 << 6);
          }

          v61 = 16 * v60;
          v62 = (uint64_t *)(*(void *)(v26 + 48) + v61);
          v64 = *v62;
          v63 = v62[1];
          v65 = (uint64_t *)(*(void *)(v26 + 56) + v61);
          v66 = *v65;
          v67 = v65[1];
          v68 = (void *)(*(void *)(v27 + 48) + v61);
          *v68 = v64;
          v68[1] = v63;
          v69 = (void *)(*(void *)(v27 + 56) + v61);
          *v69 = v66;
          v69[1] = v67;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
        }
      }

        swift_bridgeObjectRelease();
        unint64_t v34 = v67;
        if ((v1 & 1) != 0) {
          goto LABEL_42;
        }
        goto LABEL_77;
      }

      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)( v39,  isUniquelyReferenced_nonNull_native);
      uint64_t v40 = v68;
      unint64_t v34 = specialized __RawDictionaryStorage.find<A>(_:)(0x76697463656A6461LL, 0xEA00000000006C61LL);
      if ((v1 & 1) == (v41 & 1)) {
        goto LABEL_41;
      }
      KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
      __break(1u);
      return v68;
  }

            __break(1u);
LABEL_77:
            __break(1u);
            goto LABEL_78;
          }

          goto LABEL_71;
        }

        v67 = v117[1];
        v158[0] = *v117;
        v158[1] = v67;
        v158[2] = v117[2];
        id result = v34 - 1;
        if (!__OFSUB__(v34, 1LL))
        {
          if ((AttributedString.Guts._needsParagraphFixing(from:to:)(result, v34) & 1) != 0)
          {
            v68 = v117[1];
            v156[0] = *v117;
            v156[1] = v68;
            v157 = v117[2];
            v166 = v156[0];
            v167 = v68;
            v168 = v157;
            outlined init with take of any PredicateExpression<Self.Output == B1>(&v166, (uint64_t)v169);
            outlined retain of Locale((uint64_t)v169);
            v124 = BigString.index(before:)();
            v70 = v69;
            v72 = v71;
            v74 = v73;
            outlined release of Locale((uint64_t)v156);
            v75 = v117[1];
            v153 = *v117;
            v154 = v75;
            v155 = v117[2];
            BigString.utf8.getter();
            v170 = v153;
            v171 = v154;
            v172 = v155;
            outlined init with take of any PredicateExpression<Self.Output == B1>(&v170, (uint64_t)v173);
            outlined retain of Locale((uint64_t)v173);
            v119 = v70;
            v76 = v72;
            v115 = v74;
            v77 = BigString.index(after:)();
            v79 = v78;
            v81 = v80;
            v112 = v82;
            id result = outlined release of Locale((uint64_t)&v153);
            if (v124 >> 10 > v77 >> 10)
            {
LABEL_72:
              __break(1u);
LABEL_73:
              __break(1u);
              goto LABEL_74;
            }

            *(void *)&v148 = v124;
            *((void *)&v148 + 1) = v119;
            *(void *)&v149 = v76;
            *((void *)&v149 + 1) = v115;
            *(void *)&v150 = v77;
            *((void *)&v150 + 1) = v79;
            v151 = v81;
            v152 = v112;
            specialized BidirectionalCollection<>._getBlock(for:in:)(2, &v148, &v126);
            id result = outlined release of Locale((uint64_t)v133);
            if (v130 == 2)
            {
LABEL_80:
              __break(1u);
              goto LABEL_81;
            }

            if (v124 >> 10 > v129 >> 10) {
              goto LABEL_73;
            }
            v62 = 0;
            v83 = v124 >> 11;
            v66 = v129 >> 11;
LABEL_39:
            v84 = v117[1];
            v145 = *v117;
            v146 = v84;
            v147 = v117[2];
            id result = BigString.endIndex.getter();
            v123 = v83;
            if (v113 >> 10 < result >> 10)
            {
              if (v62)
              {
                if (v33 <= 0) {
                  return result;
                }
              }

              else if (v66 >= v33)
              {
                LOBYTE(v62) = 0;
                goto LABEL_57;
              }

              id result = AttributedString.Guts._needsParagraphFixing(from:to:)(v33 - 1, v33);
              if ((result & 1) != 0)
              {
                v91 = v117[1];
                v143[0] = *v117;
                v143[1] = v91;
                v144 = v117[2];
                v174 = v143[0];
                v175 = v91;
                v176 = v144;
                outlined init with take of any PredicateExpression<Self.Output == B1>(&v174, (uint64_t)v177);
                outlined retain of Locale((uint64_t)v177);
                v92 = BigString.index(before:)();
                v94 = v93;
                v96 = v95;
                v98 = v97;
                outlined release of Locale((uint64_t)v143);
                v99 = v117[1];
                v140 = *v117;
                v141 = v99;
                v142 = v117[2];
                BigString.utf8.getter();
                v179 = v140;
                v180 = v141;
                v181 = v142;
                outlined init with take of any PredicateExpression<Self.Output == B1>(&v179, (uint64_t)v178);
                outlined retain of Locale((uint64_t)v178);
                v100 = v92;
                v101 = v94;
                v102 = v96;
                v120 = v98;
                v103 = BigString.index(after:)();
                v105 = v104;
                v118 = v106;
                v108 = v107;
                id result = outlined release of Locale((uint64_t)&v140);
                v109 = v100;
                v110 = v100 >> 10;
                if (v110 > v103 >> 10)
                {
LABEL_74:
                  __break(1u);
LABEL_75:
                  __break(1u);
                  goto LABEL_76;
                }

                v116 = v109;
                *(void *)&v135 = v109;
                *((void *)&v135 + 1) = v101;
                *(void *)&v136 = v102;
                *((void *)&v136 + 1) = v120;
                *(void *)&v137 = v103;
                *((void *)&v137 + 1) = v105;
                v138 = v118;
                v139 = v108;
                specialized BidirectionalCollection<>._getBlock(for:in:)(2, &v135, &v126);
                id result = outlined release of Locale((uint64_t)v134);
                if (v130 == 2)
                {
LABEL_81:
                  __break(1u);
                  goto LABEL_82;
                }

                if (v110 > v129 >> 10) {
                  goto LABEL_75;
                }
                v63 = v116 >> 11;
                v64 = v129 >> 11;
                v65 = 1;
LABEL_58:
                if ((v62 & 1) == 0 && v66 > v34)
                {
                  v126 = 0LL;
                  v127 = 0LL;
                  id result = AttributedString.Guts._applyStyle(type:from:to:)((uint64_t)&v126, v123, v34, v66);
                }

                if (v64 > v125) {
                  v111 = v65;
                }
                else {
                  v111 = 0;
                }
                if (v111 == 1)
                {
                  v126 = 0LL;
                  v127 = 0LL;
                  return AttributedString.Guts._applyStyle(type:from:to:)((uint64_t)&v126, v63, v125, v64);
                }

                return result;
              }
            }

  if (v9) {
    goto LABEL_102;
  }
LABEL_93:
  size_t v11 = 0LL;
  if ((v15 & 1) == 0 && !v7)
  {
    if (!v6 && v10)
    {
LABEL_97:
      size_t v11 = 0LL;
      uint64_t v16 = 2415919360LL;
      goto LABEL_43;
    }

    size_t v11 = 0LL;
    if (!v10 && v6) {
      goto LABEL_43;
    }
  }

  *(void *)(v19 + 16) = v80 - 1;
  *((void *)v11 + 2) = v19;
  swift_release();
  swift_release();
  return v21;
}

  unsigned int v39 = v16 + 1;
  unint64_t v44 = -1;
LABEL_77:
  -[NSScanner setScanLocation:](self, "setScanLocation:", v22);
  uint64_t v33 = result;
  if (result)
  {
    id v24 = 0LL;
    goto LABEL_60;
  }

  return 1;
}

            v107 = v45;
            goto LABEL_115;
          }

          if ((type - 49161) <= 1)
          {
            if (v26 != 2) {
              goto LABEL_115;
            }
            v88 = a6;
            v91 = (void *)objc_msgSend((id)objc_msgSend(v106, "lastObject"), "mutableCopy");
            url = (const char *)_NS_cmark_node_get_url(node);
            if (url)
            {
              uint64_t v50 = -[NSString initWithBytesNoCopy:length:encoding:freeWhenDone:]( objc_alloc(&OBJC_CLASS___NSString),  "initWithBytesNoCopy:length:encoding:freeWhenDone:",  url,  strlen(url),  4LL,  0LL);
              if (-[NSString length](v50, "length"))
              {
                v98 = v50;
                if (!-[NSString length](v50, "length")) {
                  goto LABEL_97;
                }
                v93 = 0LL;
                v51 = 0LL;
                id v52 = 0LL;
                do
                {
                  if (u_hasBinaryProperty( -[NSString characterAtIndex:](v50, "characterAtIndex:", v51),  UCHAR_BIDI_CONTROL))
                  {
                    uint64_t v53 = v93;
                    if (!v93) {
                      uint64_t v53 = (NSString *)-[NSString mutableCopy](v98, "mutableCopy");
                    }
                    v93 = v53;
                    -[NSString replaceCharactersInRange:withString:]( v53,  "replaceCharactersInRange:withString:",  v51 - v52++,  1LL,  &stru_189CA6A28);
                  }

                  ++v51;
                  uint64_t v50 = v98;
                }

                while (v51 < -[NSString length](v98, "length"));
                a1 = v104;
                v54 = v93;
                if (!v93) {
LABEL_97:
                }
                  v54 = v98;
                v55 = v54;
                v56 = [objc_alloc(MEMORY[0x189604030]) initWithString:v54 relativeToURL:a5];
                if (v56)
                {
                  v57 = (void *)v56;
                  if (v32 == 49162) {
                    unint64_t v58 = @"NSImageURL";
                  }
                  else {
                    unint64_t v58 = @"NSLink";
                  }
                  [v91 setObject:v56 forKey:v58];
                }

                uint64_t v50 = v98;
              }
            }

            title = (const char *)_NS_cmark_node_get_title(node);
            if (title)
            {
              uint64_t v60 = -[NSString initWithBytes:length:encoding:]( objc_alloc(&OBJC_CLASS___NSString),  "initWithBytes:length:encoding:",  title,  strlen(title),  4LL);
              if (-[NSString length](v60, "length")) {
                [v91 setObject:v60 forKey:@"NSAlternateDescription"];
              }
            }

            [v106 addObject:v91];

            v90 = objc_alloc_init(&OBJC_CLASS___NSMutableString);
            _NS_cmark_node_set_user_data(node, 1LL);
            v61 = _NS_cmark_iter_next(v20);
            if (v61 == 1)
            {
              end_line = -1;
              end_column = -1;
              start_line = -1;
              start_column = -1;
            }

            else
            {
              v77 = v61;
              end_column = -1;
              end_line = -1;
              start_column = -1;
              start_line = -1;
              do
              {
                v78 = _NS_cmark_iter_get_node(v20);
                v79 = v78;
                if (start_line == -1)
                {
                  start_line = _NS_cmark_node_get_start_line(v78);
                  start_column = _NS_cmark_node_get_start_column(v79);
                }

                if (_NS_cmark_node_get_user_data(v79) == 1) {
                  break;
                }
                end_line = _NS_cmark_node_get_end_line(v79);
                end_column = _NS_cmark_node_get_end_column(v79);
                if (v77 != 3)
                {
                  literal = (const char *)_NS_cmark_node_get_literal(v79);
                  if (literal)
                  {
                    v81 = -[NSString initWithBytesNoCopy:length:encoding:freeWhenDone:]( objc_alloc(&OBJC_CLASS___NSString),  "initWithBytesNoCopy:length:encoding:freeWhenDone:",  literal,  strlen(literal),  4LL,  0LL);
                    if (-[NSString length](v81, "length")) {
                      -[NSMutableString appendString:](v90, "appendString:", v81);
                    }
                  }
                }

                v77 = _NS_cmark_iter_next(v20);
              }

              while (v77 != 1);
            }

            v82 = v90;
            v83 = -[NSString length](v90, "length");
            if (v32 != 49162 || v83)
            {
              a6 = v88;
              if (-[NSAttributedStringMarkdownParsingOptions appliesSourcePositionAttributes]( a4,  "appliesSourcePositionAttributes")
                && start_line >= 1
                && start_column >= 1
                && end_line >= 1
                && end_column >= 1)
              {
                v86 = -[NSAttributedStringMarkdownSourcePosition initWithStartLine:startColumn:endLine:endColumn:]( objc_alloc(&OBJC_CLASS___NSAttributedStringMarkdownSourcePosition),  "initWithStartLine:startColumn:endLine:endColumn:",  start_line,  start_column,  end_line,  end_column);
                -[NSAttributedStringMarkdownSourcePosition setOffsetsFromUTF8:size:usingCache:]( v86,  "setOffsetsFromUTF8:size:usingCache:",  v102,  v103,  v109);
                appendStringWithSourcePosition( a1,  (uint64_t)v90,  v107,  (uint64_t)v27,  (void *)[v106 lastObject],  (uint64_t)v86);

                v84 = v106;
                v82 = v90;
              }

              else
              {
                v84 = v106;
                objc_msgSend( a1,  "appendString:with:",  v90,  attributesForIntents(v107, (uint64_t)v27, (void *)objc_msgSend(v106, "lastObject")));
              }
            }

            else
            {
              v84 = v106;
              objc_msgSend( a1,  "appendString:with:",  @"\uFFFC",  attributesForIntents(v107, (uint64_t)v27, (void *)objc_msgSend(v106, "lastObject")));
              a6 = v88;
            }

            v87 = v84;
LABEL_176:
            [v87 removeLastObject];
            goto LABEL_115;
          }

          if (type != 49164)
          {
            if (type == *(_DWORD *)_NS_CMARK_NODE_TABLE)
            {
              if (v26 == 3) {
                goto LABEL_114;
              }
              if (v26 != 2) {
                goto LABEL_115;
              }
              v89 = a6;
              table_columns = _NS_cmark_gfm_extensions_get_table_columns(node);
              table_alignments = _NS_cmark_gfm_extensions_get_table_alignments(node);
              if (table_alignments && table_columns)
              {
                v70 = (unsigned __int8 *)table_alignments;
                v71 = (void *)[MEMORY[0x189603FA8] array];
                v72 = table_columns;
                do
                {
                  v74 = *v70++;
                  v73 = v74;
                  if (v74 == 114) {
                    v75 = &off_189D0E270;
                  }
                  else {
                    v75 = &off_189D0E288;
                  }
                  if (v73 == 108) {
                    v75 = &off_189D0E288;
                  }
                  if (v73 == 99) {
                    v76 = &off_189D0E258;
                  }
                  else {
                    v76 = v75;
                  }
                  [v71 addObject:v76];
                  --v72;
                }

                while (v72);
                a6 = v89;
              }

              else
              {
                a6 = v89;
              }

              uint64_t v30 = v105 + 1;
              unint64_t v27 = +[NSPresentationIntent tableIntentWithIdentity:columnCount:alignments:nestedInsideIntent:]( &OBJC_CLASS___NSPresentationIntent,  "tableIntentWithIdentity:columnCount:alignments:nestedInsideIntent:");
              v96 = 0LL;
            }

            else
            {
              if (type == *(_DWORD *)_NS_CMARK_NODE_TABLE_ROW)
              {
                if (v26 != 3)
                {
                  if (v26 == 2)
                  {
                    if (_NS_cmark_gfm_extensions_get_table_row_is_header(node)) {
                      v85 = +[NSPresentationIntent tableHeaderRowIntentWithIdentity:nestedInsideIntent:]( &OBJC_CLASS___NSPresentationIntent,  "tableHeaderRowIntentWithIdentity:nestedInsideIntent:",  v105,  v27);
                    }
                    else {
                      v85 = +[NSPresentationIntent tableRowIntentWithIdentity:row:nestedInsideIntent:]( &OBJC_CLASS___NSPresentationIntent,  "tableRowIntentWithIdentity:row:nestedInsideIntent:",  v105,  v96,  v27);
                    }
                    unint64_t v27 = v85;
                    ++v105;
                    v95 = 0LL;
                    ++v96;
                  }

                  goto LABEL_115;
                }

              uint64_t v60 = string;
              v61 = v44;
              v62 = v45;
              if (v33)
              {
                unint64_t v48 = -[NSString characterAtIndex:](string, "characterAtIndex:", v33 - 1);
                if ((_DWORD)v48)
                {
                  int v59 = [(id)qword_18C496ED0 characterIsMember:v48];
                  goto LABEL_81;
                }
              }

              else
              {
                unint64_t v48 = 0LL;
              }

              int v59 = 1;
LABEL_81:
              unint64_t v58 = [(id)qword_18C496F40 characterIsMember:v48];
              unint64_t v49 = [(id)qword_18C496F38 characterIsMember:v48];
              if (v33 + 1 >= v61) {
                uint64_t v50 = 0LL;
              }
              else {
                uint64_t v50 = -[NSString characterAtIndex:](v60, "characterAtIndex:");
              }
              v51 = [(id)qword_18C496F38 characterIsMember:v50];
              if (v62)
              {
                if (v46 != 2)
                {
                  if ((v51 & (v49 ^ 1)) != 0) {
                    CFTypeRef v41 = 5;
                  }
                  else {
                    CFTypeRef v41 = 6;
                  }
                  if ((v49 & (v51 ^ 1)) != 0) {
                    id v52 = 6;
                  }
                  else {
                    id v52 = 5;
                  }
                  if (v46 == 3) {
                    CFTypeRef v41 = v52;
                  }
                  goto LABEL_97;
                }

                if ((v59 & 1) != 0) {
                  goto LABEL_74;
                }
                v55 = (_DWORD)v48 == 39;
LABEL_118:
                v57 = v58;
                if (v55) {
                  v57 = 1;
                }
                if (v57) {
                  CFTypeRef v41 = 5;
                }
                else {
                  CFTypeRef v41 = 6;
                }
                goto LABEL_97;
              }

              uint64_t v53 = v51 ^ 1;
              if (((v49 ^ 1) & 1) != 0 || v53)
              {
                if (v46 == 2)
                {
                  if ((v59 & 1) != 0) {
                    goto LABEL_74;
                  }
                  v55 = (_DWORD)v48 == 34;
                  goto LABEL_118;
                }

                if ((v51 & (v49 ^ 1)) != 0) {
                  v56 = 5;
                }
                else {
                  v56 = 6;
                }
                if ((v49 & v53) != 0) {
                  CFTypeRef v41 = 6;
                }
                else {
                  CFTypeRef v41 = 5;
                }
                if (v46 != 3) {
                  CFTypeRef v41 = v56;
                }
LABEL_97:
                if ((unint64_t)qword_18C496FA0 <= 0xFFF)
                {
                  v54 = qword_18C496FA8 + 16 * qword_18C496FA0;
                  *(_WORD *)v54 = v33 - location;
                  *(_BYTE *)(v54 + 2) = v34;
                  *(_BYTE *)(v54 + 3) = v41;
                  *(_DWORD *)(v54 + 4) = 0;
                  *(void *)(v54 + _Block_object_dispose(va, 8) = 0LL;
                  ++qword_18C496FA0;
                }

                id v24 = v34 + v33;
                uint64_t v30 = v6 - (v34 + v33);
                if (v6 <= v34 + v33) {
                  goto LABEL_101;
                }
LABEL_100:
                -[NSLinguisticTagger _analyzePunctuationTokensInRange:paragraphRange:]( self,  "_analyzePunctuationTokensInRange:paragraphRange:",  v24,  v30,  location,  length);
                goto LABEL_101;
              }
            }

            CFTypeRef v41 = 13;
            goto LABEL_97;
          }

          if ((unint64_t)qword_18C496FA0 <= 0xFFF)
          {
            unsigned int v39 = qword_18C496FA8 + 16 * qword_18C496FA0;
            *(_WORD *)unsigned int v39 = v9 - location;
            *(_BYTE *)(v39 + 2) = v6 - v9;
            uint64_t v40 = 13;
            goto LABEL_53;
          }
        }
      }

uint64_t skipJSONWhitespace(uint64_t a1, void *a2, char a3)
{
  v25[2] = *MEMORY[0x1895F89C0];
  unint64_t v6 = *(void *)(a1 + 16);
  unint64_t v7 = *(void *)(a1 + 24);
  if (v6 > v7)
  {
    if ((*(_BYTE *)(a1 + 8) & 8) != 0)
    {
      while (1)
      {
        uint64_t v18 = *(void *)a1;
        unint64_t v19 = v7 + 1;
        if (v6 <= v7 + 1) {
          int v20 = 0;
        }
        else {
          int v20 = *(unsigned __int8 *)(v18 + v19);
        }
        int v21 = *(unsigned __int8 *)(v18 + v7);
        switch(*(_BYTE *)(v18 + v7))
        {
          case 9:
          case 0xB:
          case 0xC:
            goto LABEL_31;
          case 0xA:
            goto LABEL_28;
          case 0xD:
            *(void *)(a1 + 24) = v19;
            if (v6 <= v19 || *(_BYTE *)(v18 + v19) != 10) {
              goto LABEL_35;
            }
            unint64_t v19 = v7 + 2;
LABEL_28:
            *(void *)(a1 + 24) = v19;
LABEL_35:
            ++*(void *)(a1 + 40);
            *(void *)(a1 + 4_Block_object_dispose(va, 8) = v19;
            goto LABEL_36;
          default:
            if (v21 == 160 || v21 == 32)
            {
LABEL_31:
              *(void *)(a1 + 24) = v19;
            }

            else
            {
              BOOL v22 = v6 > v19 && v21 == 47;
              int v23 = v22;
              if (v22 && v20 == 47)
              {
                *(void *)(a1 + 24) = v7 + 2;
              }

              else
              {
                if (v20 != 42) {
                  int v23 = 0;
                }
                if (v23 != 1) {
                  return 1LL;
                }
                *(void *)(a1 + 24) = v7 + 2;
                uint64_t result = skipJSON5Comment((uint64_t *)a1, 0, a2);
                if (!(_DWORD)result) {
                  return result;
                }
              }
            }

LABEL_16:
  *(void *)(a1 + 24) = v6;
  if ((a3 & 1) != 0) {
    return 1LL;
  }
  if (a2)
  {
    unint64_t v12 = *(void *)(a1 + 48);
    BOOL v13 = v6 >= v12;
    unint64_t v14 = v6 - v12;
    if (v13) {
      unint64_t v15 = v14;
    }
    else {
      unint64_t v15 = 0LL;
    }
    uint64_t v16 = -[NSString initWithFormat:]( objc_alloc(&OBJC_CLASS___NSString),  "initWithFormat:",  @"%@ around line %lu, column %lu.",  @"Unexpected end of file",  *(void *)(a1 + 40),  v15);
    uint64_t v17 = -[NSNumber initWithUnsignedInteger:]( objc_alloc(&OBJC_CLASS___NSNumber),  "initWithUnsignedInteger:",  *(void *)(a1 + 24));
    v24[0] = @"NSDebugDescription";
    v24[1] = @"NSJSONSerializationErrorIndex";
    v25[0] = v16;
    v25[1] = v17;
    *a2 = +[NSError errorWithDomain:code:userInfo:]( NSError,  "errorWithDomain:code:userInfo:",  @"NSCocoaErrorDomain",  3840,  [MEMORY[0x189603F68] dictionaryWithObjects:v25 forKeys:v24 count:2]);
  }

  return 0LL;
}

    if (v5) {
      goto LABEL_54;
    }
LABEL_17:
    uint64_t v17 = (4 * *(_BYTE *)(v12 + 18) + 8) & 0x3C;
    uint64_t v16 = ((-15LL << v17) - 1) & v16 | (v18 << v17);
    unint64_t v12 = *(void *)(v12 + 24 + 24 * v18);
    swift_unknownObjectRetain();
    uint64_t result = swift_unknownObjectRelease();
  }

  while (*(_BYTE *)(v12 + 18));
  v16 &= 0xFFFFFFFFFFFFF0FFLL;
  uint64_t v25 = *(unsigned __int16 *)(v12 + 16);
  if (*(_WORD *)(v12 + 16)) {
    goto LABEL_34;
  }
LABEL_45:
  if (!v5)
  {
LABEL_46:
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    size_t v11 = v16 | (v25 << 8);
    uint64_t v8 = v40;
LABEL_12:
    swift_unknownObjectRetain();
    BOOL v13 = v7;
    unint64_t v14 = v8;
    unint64_t v15 = specialized Rope._Node.distanceFromStart<A>(to:in:)(v8, v11, v12, v4, v13);
    uint64_t result = swift_unknownObjectRelease_n();
    goto LABEL_48;
  }

    if (v9) {
      goto LABEL_58;
    }
LABEL_17:
    unint64_t v15 = (4 * *(_BYTE *)(v14 + 18) + 8) & 0x3C;
    BOOL v13 = ((-15LL << v15) - 1) & v13 | (v16 << v15);
    unint64_t v14 = *(void *)(v14 + 24 + 24 * v16);
    swift_unknownObjectRetain();
    uint64_t result = swift_unknownObjectRelease();
  }

  while (*(_BYTE *)(v14 + 18));
  unint64_t v27 = v13 & 0xFFFFFFFFFFFFF0FFLL;
  uint64_t v28 = *(unsigned __int16 *)(v14 + 16);
  if (*(_WORD *)(v14 + 16)) {
    goto LABEL_42;
  }
LABEL_51:
  if (v9)
  {
    __break(1u);
LABEL_53:
    uint64_t v28 = 0LL;
  }

  _POSIXDirectoryContentsSequence.Iterator.next()((uint64_t)v55);
  outlined init with take of _POSIXDirectoryContentsSequence.Iterator.Element?((uint64_t)v55, (uint64_t)v56);
  if (*((void *)&v56[0] + 1))
  {
    a2 = MEMORY[0x18961AFE8];
    do
    {
      uint64_t v50 = v56[0];
      v51 = v56[1];
      id v52 = v57;
      uint64_t v53 = v56[0];
      swift_bridgeObjectRetain();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        a2 = (unint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  *(void *)(a2 + 16) + 1LL,  1,  (void *)a2);
      }
      int v23 = *(void *)(a2 + 16);
      BOOL v22 = *(void *)(a2 + 24);
      if (v23 >= v22 >> 1) {
        a2 = (unint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (void *)(v22 > 1),  v23 + 1,  1,  (void *)a2);
      }
      *(void *)(a2 + 16) = v23 + 1;
      *(_OWORD *)(a2 + 16 * v23 + 32) = v53;
      outlined release of String((uint64_t)&v53);
      v54[0] = v51;
      outlined release of String((uint64_t)v54);
      _POSIXDirectoryContentsSequence.Iterator.next()((uint64_t)v55);
      outlined init with take of _POSIXDirectoryContentsSequence.Iterator.Element?((uint64_t)v55, (uint64_t)v56);
    }

    while (*((void *)&v56[0] + 1));
  }

  else
  {
    a2 = MEMORY[0x18961AFE8];
  }

  swift_setDeallocating();
  id v24 = *(DIR **)(inited + 16);
  if (v24) {
    closedir(v24);
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return a2;
}

    unint64_t v14 = 0x706D652F7261762FLL;
    if (a2 || !getenv("HOME")) {
      return v14;
    }
    SEL v5 = String.init(cString:)();
    unint64_t v7 = v15;
    swift_bridgeObjectRetain();
    uint64_t v16 = specialized Collection.first.getter(v5, v7);
    if (!v17) {
      goto LABEL_45;
    }
    if (v16 == 126 && v17 == 0xE100000000000000LL)
    {
      swift_bridgeObjectRelease();
      goto LABEL_43;
    }

    swift_bridgeObjectRelease();
  }

    swift_bridgeObjectRelease();
  }

                                          uint64_t v29 = (uint64_t *)(*(void *)(v26 + 56) + 16 * v21);
                                          void *v29 = v159;
                                          v29[1] = v3;
                                          swift_bridgeObjectRelease();
                                          goto LABEL_23;
                                        }

                                        unint64_t v58 = v76;
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }

        lazy protocol witness table accessor for type JSONError and conformance JSONError();
        swift_allocError();
        *(void *)uint64_t v8 = 1LL;
        *(_OWORD *)(v8 + _Block_object_dispose(va, 8) = 0u;
        *(_OWORD *)(v8 + 24) = 0u;
        *(void *)(v8 + 40) = 0LL;
        unsigned int v9 = 12;
LABEL_40:
        *(_BYTE *)(v8 + 4_Block_object_dispose(va, 8) = v9;
        swift_willThrow();
        return;
      }

      __break(1u);
    }

    else if (v5 == 102)
    {
      if (v2 >= v4)
      {
        if (v2 - v4 >= 4)
        {
          if (*(_DWORD *)v4 == 1702063201)
          {
            v0[3] = v1 + 5;
            uint64_t v17 = (void *)v0[1];
            uint64_t v18 = v0[2];
            v0 += 6;
            JSON5Scanner.JSONPartialMapData.resizeIfNecessary(with:)(v17, v18, (uint64_t)(v1 + 5));
            objc_super v3 = (void *)v3[6];
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
              objc_super v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  v3[2] + 1LL,  1,  v3);
            }
            int v20 = v3[2];
            unint64_t v19 = v3[3];
            int v21 = v20 + 1;
            if (v20 >= v19 >> 1)
            {
              uint64_t v30 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (void *)(v19 > 1),  v20 + 1,  1,  v3);
              int v21 = v20 + 1;
              objc_super v3 = v30;
            }

            v3[2] = v21;
            unint64_t v15 = &v3[v20];
            uint64_t v16 = 4LL;
            goto LABEL_35;
          }

          if ((((v0[1] + v0[2] - (void)v2) | (unint64_t)&v4[-v0[1]]) & 0x8000000000000000LL) == 0)
          {
            if (*v4 == 97)
            {
              if (v1[2] == 108)
              {
                if (v1[3] == 115)
                {
                  if (v1[4] == 101) {
                    unint64_t v7 = 0LL;
                  }
                  else {
                    unint64_t v7 = 3LL;
                  }
                }

                else
                {
                  unint64_t v7 = 2LL;
                }

        lazy protocol witness table accessor for type JSONError and conformance JSONError();
        swift_allocError();
        *(void *)uint64_t v8 = 1LL;
        *(_OWORD *)(v8 + _Block_object_dispose(va, 8) = 0u;
        *(_OWORD *)(v8 + 24) = 0u;
        *(void *)(v8 + 40) = 0LL;
        unsigned int v9 = 12;
LABEL_44:
        *(_BYTE *)(v8 + 4_Block_object_dispose(va, 8) = v9;
        swift_willThrow();
        return;
      }

      __break(1u);
    }

    else if (v5 == 102)
    {
      if (v2 >= v4)
      {
        if (v2 - v4 >= 4)
        {
          if (*(_DWORD *)v4 == 1702063201)
          {
            v0[3] = (uint64_t)(v1 + 5);
            uint64_t v18 = (void *)v0[1];
            unint64_t v19 = v0[2];
            v0 += 6;
            JSON5Scanner.JSONPartialMapData.resizeIfNecessary(with:)(v18, v19, (uint64_t)(v1 + 5));
            objc_super v3 = (uint64_t *)v3[6];
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
              objc_super v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  v3[2] + 1,  1,  v3);
            }
            int v21 = v3[2];
            int v20 = v3[3];
            BOOL v22 = v21 + 1;
            if (v21 >= v20 >> 1)
            {
              uint64_t v31 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (void *)(v20 > 1),  v21 + 1,  1,  v3);
              BOOL v22 = v21 + 1;
              objc_super v3 = v31;
            }

            v3[2] = v22;
            uint64_t v16 = &v3[v21];
            uint64_t v17 = 4LL;
            goto LABEL_34;
          }

          if ((((v0[1] + v0[2] - (void)v2) | (unint64_t)&v4[-v0[1]]) & 0x8000000000000000LL) == 0)
          {
            if (*v4 != 97)
            {
              unint64_t v10 = 0LL;
              goto LABEL_42;
            }

            if (v1[2] == 108)
            {
              if (v1[3] == 115)
              {
                unint64_t v6 = v1[4] == 101;
                unint64_t v10 = 3LL;
                if (v6) {
                  unint64_t v10 = 0LL;
                }
              }

              else
              {
                unint64_t v10 = 2LL;
              }

    if ((v6 & 1) == 0) {
      goto LABEL_18;
    }
LABEL_17:
    unsigned int v9 = 9;
  }

  JSON5Scanner.JSONPartialMapData.record(tagType:count:dataOffset:with:)( v9,  v3 - v1,  (uint64_t)&v1[-v0[1]],  (void *)v0[1],  v0[2],  (uint64_t)v3);
}

  __break(1u);
  return result;
}

    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _DictionaryStorage<Calendar.Identifier, _CalendarProtocol>);
    uint64_t v29 = static _DictionaryStorage.copy(original:)();
    uint64_t v25 = v29;
    if (*(void *)(v19 + 16))
    {
      uint64_t v30 = (void *)(v29 + 64);
      uint64_t v31 = (unint64_t)((1LL << *(_BYTE *)(v25 + 32)) + 63) >> 6;
      __srUChar32 c = (void *)(v19 + 64);
      uint64_t v32 = 0LL;
      *(void *)(v25 + 16) = *(void *)(v19 + 16);
      uint64_t v33 = 1LL << *(_BYTE *)(v19 + 32);
      unint64_t v34 = -1LL;
      if (v33 < 64) {
        unint64_t v34 = ~(-1LL << v33);
      }
      uint64_t v35 = v34 & *(void *)(v19 + 64);
      unint64_t v47 = (unint64_t)(v33 + 63) >> 6;
      while (1)
      {
        if (v35)
        {
          uint64_t v36 = __clz(__rbit64(v35));
          v35 &= v35 - 1;
          unint64_t v37 = v36 | (v32 << 6);
        }

        else
        {
          unsigned int v39 = v32 + 1;
          if (__OFADD__(v32, 1LL)) {
            goto LABEL_56;
          }
          if (v39 >= v47) {
            break;
          }
          uint64_t v40 = *((void *)__src + v39);
          ++v32;
          if (!v40)
          {
            uint64_t v32 = v39 + 1;
            if (v39 + 1 >= v47) {
              break;
            }
            uint64_t v40 = *((void *)__src + v32);
            if (!v40)
            {
              uint64_t v32 = v39 + 2;
              if (v39 + 2 >= v47) {
                break;
              }
              uint64_t v40 = *((void *)__src + v32);
              if (!v40)
              {
                uint64_t v32 = v39 + 3;
                if (v39 + 3 >= v47) {
                  break;
                }
                uint64_t v40 = *((void *)__src + v32);
                if (!v40)
                {
                  uint64_t v32 = v39 + 4;
                  if (v39 + 4 >= v47) {
                    break;
                  }
                  uint64_t v40 = *((void *)__src + v32);
                  if (!v40)
                  {
                    uint64_t v32 = v39 + 5;
                    if (v39 + 5 >= v47) {
                      break;
                    }
                    uint64_t v40 = *((void *)__src + v32);
                    if (!v40)
                    {
                      uint64_t v32 = v39 + 6;
                      if (v39 + 6 >= v47) {
                        break;
                      }
                      uint64_t v40 = *((void *)__src + v32);
                      if (!v40)
                      {
                        uint64_t v32 = v39 + 7;
                        if (v39 + 7 >= v47) {
                          break;
                        }
                        uint64_t v40 = *((void *)__src + v32);
                        if (!v40)
                        {
                          CFTypeRef v41 = v39 + 8;
                          if (v41 >= v47) {
                            break;
                          }
                          uint64_t v40 = *((void *)__src + v41);
                          if (!v40)
                          {
                            while (1)
                            {
                              uint64_t v32 = v41 + 1;
                              if (__OFADD__(v41, 1LL)) {
                                goto LABEL_57;
                              }
                              if (v32 >= v47) {
                                goto LABEL_50;
                              }
                              uint64_t v40 = *((void *)__src + v32);
                              ++v41;
                              if (v40) {
                                goto LABEL_49;
                              }
                            }
                          }

                          uint64_t v32 = v41;
                        }
                      }
                    }
                  }
                }
              }
            }
          }

  static Duration.zero.getter();
  if ((static Duration.== infix(_:_:)() & 1) != 0)
  {
LABEL_62:
    uint64_t v29 = (void *)Duration.factor(intoUnits:)(a1);
    v116 = v29[2];
    v117 = Duration.components.getter();
    Duration.components.getter();
    v119 = v118;
    v120 = 3.0;
    unint64_t v7 = 604800.0;
    switch((int)v20)
    {
      case 0:
        goto LABEL_70;
      case 1:
        unint64_t v7 = 86400.0;
        goto LABEL_70;
      case 2:
        unint64_t v7 = 3600.0;
        goto LABEL_70;
      case 3:
        unint64_t v7 = 60.0;
        goto LABEL_70;
      case 4:
        unint64_t v7 = 1.0;
        goto LABEL_70;
      case 5:
        goto LABEL_69;
      case 6:
        v120 = 6.0;
        goto LABEL_69;
      case 7:
        v120 = 9.0;
LABEL_69:
        unint64_t v7 = pow(0.1, v120);
LABEL_70:
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          goto LABEL_85;
        }
        if (v116) {
          goto LABEL_72;
        }
        goto LABEL_86;
      default:
        goto LABEL_99;
    }
  }

  static Duration.zero.getter();
  unint64_t v34 = static Duration.< infix(_:_:)();
  v128 = a1;
  v129 = v20;
  if ((v34 & 1) != 0)
  {
    uint64_t v35 = static Duration.zero.getter();
    int v23 = MEMORY[0x186E1D11C](v35);
    uint64_t v25 = v36;
  }

  static Duration.zero.getter();
  unint64_t v37 = a6;
  uint64_t v38 = a7;
  if ((static Duration.< infix(_:_:)() & 1) != 0)
  {
    unsigned int v39 = static Duration.zero.getter();
    unint64_t v37 = MEMORY[0x186E1D11C](v39);
    uint64_t v38 = v40;
  }

  v132 = a6;
  CFTypeRef v41 = Duration.components.getter();
  static Duration.zero.getter();
  if ((static Duration.< infix(_:_:)() & 1) != 0)
  {
    BOOL v42 = static Duration.zero.getter();
    MEMORY[0x186E1D11C](v42);
  }

  unint64_t v43 = Duration.components.getter();
  id v45 = v44;
  if (v43)
  {
    if (v44)
    {
      if ((static Duration.< infix(_:_:)() & 1) != 0)
      {
        unint64_t v46 = static Duration.zero.getter();
        unint64_t v48 = v47;
        unint64_t v49 = static Duration.zero.getter();
      }

      else
      {
        static Duration./ infix(_:_:)();
        if ((~*(void *)&v55 & 0x7FF0000000000000LL) == 0)
        {
LABEL_90:
          __break(1u);
          goto LABEL_91;
        }

        if (v55 <= -1.0)
        {
LABEL_91:
          __break(1u);
          goto LABEL_92;
        }

        if (v55 >= 1.84467441e19)
        {
LABEL_92:
          __break(1u);
          goto LABEL_93;
        }

        v56 = (unint64_t)v55;
        v137 = (unint64_t)v55;
        lazy protocol witness table accessor for type UInt64 and conformance UInt64();
        v57 = static Duration.* infix<A>(_:_:)();
        MEMORY[0x186E1D11C](v37, v38, v57, v58);
        static Duration./ infix(_:_:)();
        if ((~*(void *)&v59 & 0x7FF0000000000000LL) == 0)
        {
LABEL_93:
          __break(1u);
          goto LABEL_94;
        }

        if (v59 <= -9.22337204e18)
        {
LABEL_94:
          __break(1u);
          goto LABEL_95;
        }

        if (v59 >= 9.22337204e18)
        {
LABEL_95:
          __break(1u);
LABEL_96:
          __break(1u);
          goto LABEL_97;
        }

        uint64_t v60 = (uint64_t)v59;
        v131 = (uint64_t)v59;
        Duration.init(secondsComponent:attosecondsComponent:)();
        v137 = v56;
        v61 = static Duration.* infix<A>(_:_:)();
        v130 = v56;
        v62 = v61;
        v127 = v63;
        Duration.init(secondsComponent:attosecondsComponent:)();
        v137 = v60;
        lazy protocol witness table accessor for type Int64 and conformance Int64();
        v64 = static Duration.* infix<A>(_:_:)();
        unint64_t v46 = MEMORY[0x186E1D110](v62, v127, v64, v65);
        v67 = v66;
        v137 = v130;
        v68 = static Duration.* infix<A>(_:_:)();
        v70 = v69;
        v137 = v131;
        unint64_t v48 = v67;
        v71 = static Duration.* infix<A>(_:_:)();
        unint64_t v49 = MEMORY[0x186E1D110](v68, v70, v71, v72);
      }
    }

    else
    {
      id v52 = v43;
      if (v41 == 0x8000000000000000LL && v43 == -1) {
        goto LABEL_96;
      }
      uint64_t v53 = v41 / v43;
      unint64_t v46 = Duration.init(secondsComponent:attosecondsComponent:)();
      unint64_t v48 = v54;
      unint64_t v49 = Duration.init(secondsComponent:attosecondsComponent:)();
    }
  }

  else
  {
    v137 = v44;
    lazy protocol witness table accessor for type Int64 and conformance Int64();
    unint64_t v46 = static Duration./ infix<A>(_:_:)();
    unint64_t v48 = v51;
    v137 = v45;
    unint64_t v49 = static Duration.* infix<A>(_:_:)();
  }

  v73 = v49;
  v74 = v50;
  v75 = v132;
  static Duration.zero.getter();
  v76 = static Duration.< infix(_:_:)() & 1;
  static Duration.zero.getter();
  if (v76 == (static Duration.< infix(_:_:)() & 1))
  {
    v130 = v48;
  }

  else
  {
    v77 = static Duration.zero.getter();
    v73 = MEMORY[0x186E1D11C](v77);
    v74 = v78;
    v79 = static Duration.zero.getter();
    unint64_t v46 = MEMORY[0x186E1D11C](v79);
    v130 = v80;
  }

  static Duration.zero.getter();
  v81 = v73;
  v82 = v74;
  if ((static Duration.< infix(_:_:)() & 1) != 0)
  {
    v83 = static Duration.zero.getter();
    v81 = MEMORY[0x186E1D11C](v83);
    v82 = v84;
  }

  v131 = v46;
  static Duration.zero.getter();
  v85 = static Duration.< infix(_:_:)();
  v86 = v75;
  v87 = a7;
  if ((v85 & 1) != 0)
  {
    v88 = static Duration.zero.getter();
    v86 = MEMORY[0x186E1D11C](v88);
    v87 = v89;
  }

  MEMORY[0x186E1D11C](v81, v82, v86, v87);
  static Duration.zero.getter();
  if ((static Duration.< infix(_:_:)() & 1) != 0)
  {
    v90 = static Duration.zero.getter();
    MEMORY[0x186E1D11C](v90);
  }

  static Duration.zero.getter();
  if ((static Duration.== infix(_:_:)() & 1) != 0)
  {
    v137 = 2LL;
    lazy protocol witness table accessor for type Int64 and conformance Int64();
    v92 = v130;
    v91 = v131;
    static Duration./ infix<A>(_:_:)();
    v137 = 2LL;
    v93 = static Duration.* infix<A>(_:_:)();
    MEMORY[0x186E1D11C](v91, v92, v93, v94);
    static Duration.zero.getter();
LABEL_61:
    static Duration.== infix(_:_:)();
    a1 = v128;
    LODWORD(v20) = v129;
    goto LABEL_62;
  }

  static Duration.zero.getter();
  if ((static Duration.< infix(_:_:)() & 1) != 0)
  {
    v95 = static Duration.zero.getter();
    int v23 = MEMORY[0x186E1D11C](v95);
    uint64_t v25 = v96;
  }

  v97 = MEMORY[0x186E1D110](v73, v74, v23, v25);
  v99 = v98;
  static Duration.zero.getter();
  v100 = v97;
  v101 = v99;
  if ((static Duration.< infix(_:_:)() & 1) != 0)
  {
    v102 = static Duration.zero.getter();
    v100 = MEMORY[0x186E1D11C](v102);
    v101 = v103;
  }

  static Duration.zero.getter();
  if ((static Duration.< infix(_:_:)() & 1) != 0)
  {
    v104 = static Duration.zero.getter();
    v75 = MEMORY[0x186E1D11C](v104);
    a7 = v105;
  }

  v132 = v97;
  MEMORY[0x186E1D11C](v100, v101, v75, a7);
  static Duration.zero.getter();
  v106 = v99;
  if ((static Duration.< infix(_:_:)() & 1) != 0)
  {
    v107 = static Duration.zero.getter();
    MEMORY[0x186E1D11C](v107);
  }

  v109 = v133;
  v108 = v134;
  v110 = v135;
  (*(void (**)(char *, uint64_t, uint64_t))(v134 + 16))(v133, v136, v135);
  v111 = (*(uint64_t (**)(char *, uint64_t))(v108 + 88))(v109, v110);
  if (v111 == *MEMORY[0x189619F78]) {
    goto LABEL_59;
  }
  uint64_t v29 = v106;
  if (v111 == *MEMORY[0x189619F70])
  {
    if ((static Duration.< infix(_:_:)() & 1) == 0 && (static Duration.== infix(_:_:)() & 1) != 0)
    {
      v137 = 2LL;
      lazy protocol witness table accessor for type Int64 and conformance Int64();
      v123 = v130;
      v122 = v131;
      static Duration./ infix<A>(_:_:)();
      v137 = 2LL;
      v124 = static Duration.* infix<A>(_:_:)();
      MEMORY[0x186E1D11C](v122, v123, v124, v125);
      static Duration.zero.getter();
      static Duration.== infix(_:_:)();
    }

    goto LABEL_60;
  }

  v116 = v132;
  if (v111 == *MEMORY[0x189619F88] || v111 == *MEMORY[0x189619F90])
  {
LABEL_59:
    static Duration.< infix(_:_:)();
LABEL_60:
    v137 = 2LL;
    lazy protocol witness table accessor for type Int64 and conformance Int64();
    v113 = v130;
    v112 = v131;
    static Duration./ infix<A>(_:_:)();
    v137 = 2LL;
    v114 = static Duration.* infix<A>(_:_:)();
    MEMORY[0x186E1D11C](v112, v113, v114, v115);
    static Duration.zero.getter();
    static Duration.== infix(_:_:)();
    goto LABEL_61;
  }

  if (v111 == *MEMORY[0x189619F60]) {
    goto LABEL_60;
  }
  v117 = v132;
  v119 = (uint64_t)v106;
  if (v111 == *MEMORY[0x189619F68]) {
    goto LABEL_60;
  }
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
LABEL_85:
  uint64_t v29 = specialized _ArrayBuffer._consumeAndCreateNew()(v29);
  if (!v116)
  {
LABEL_86:
    __break(1u);
    goto LABEL_87;
  }

  Hasher._combine(_:)(0);
  if (v11 == 2) {
    goto LABEL_17;
  }
LABEL_12:
  Hasher._combine(_:)(1u);
  Hasher._combine(_:)((v11 & 1) + 1LL);
  if (v12 != 2)
  {
LABEL_13:
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)((v12 & 1) + 1LL);
    return;
  }

  __break(1u);
  return result;
}

  result.value = *(Foundation::Date *)&v15;
  result.is_nil = v14;
  return result;
}

  unint64_t v15 = *(void *)(v2 + 568);
  uint64_t v8 = __OFADD__(v15, 1LL);
  uint64_t v16 = v15 + 1;
  if (!v8)
  {
    *(void *)(v2 + 56_Block_object_dispose(va, 8) = v16;
    *(double *)a2 = v5;
    *(_BYTE *)(a2 + _Block_object_dispose(va, 8) = v6;
    return result;
  }

  __break(1u);
LABEL_19:
  __break(1u);

  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

    uint64_t result = BigSubstring.UTF8View.index(after:)();
    if (v8 <= result >> 10) {
      goto LABEL_17;
    }
LABEL_57:
    __break(1u);
LABEL_58:
    __break(1u);
    goto LABEL_59;
  }

  if (result == 13)
  {
    if ((unint64_t)BigSubstring.UTF8View.index(after:)() >> 10 < *(void *)(v7 + 80) >> 10)
    {
      outlined retain of Locale(v7);
      uint64_t v8 = BigSubstring.UTF8View.subscript.getter();
      outlined release of Locale(v7);
      if ((_DWORD)v8 == 10)
      {
        uint64_t result = BigSubstring.UTF8View.index(after:)();
        if (result >> 10 >= a2 >> 10)
        {
          *a7 = a2;
LABEL_18:
          a7[1] = a3;
LABEL_19:
          a7[2] = a4;
          a7[3] = a5;
          goto LABEL_20;
        }

        goto LABEL_58;
      }
    }

    uint64_t result = BigSubstring.UTF8View.index(after:)();
    if (result >> 10 >= a2 >> 10)
    {
LABEL_17:
      *a7 = a2;
      goto LABEL_18;
    }

    __break(1u);
    goto LABEL_16;
  }

  if ((a6 & 1) != 0)
  {
  }

  else if ((result + 29) < 0xDFu)
  {
LABEL_51:
    *a7 = 0LL;
    a7[1] = 0LL;
    a7[2] = 0LL;
    a7[3] = 2LL;
    *((_OWORD *)a7 + 2) = 0u;
    *((_OWORD *)a7 + 3) = 0u;
    return result;
  }

  unint64_t v49 = *(void *)(a1 + 16);
  if (!v49) {
    goto LABEL_51;
  }
  v55 = a2;
  uint64_t v53 = a4;
  unint64_t v48 = a7;
  uint64_t v50 = a1 + 32;
  swift_bridgeObjectRetain();
  uint64_t v29 = 0LL;
  v51 = (unint64_t *)a5;
  v54 = a3;
  while (1)
  {
    a4 = *(void *)(v50 + 8 * v29);
    if ((a6 & 1) != 0)
    {
      uint64_t v30 = *(void *)(a4 + 16);
      uint64_t v31 = v30 - 1;
      uint64_t result = swift_bridgeObjectRetain();
      v56 = 0LL;
      uint64_t v32 = -1LL;
    }

    else
    {
      swift_bridgeObjectRetain();
      uint64_t result = BigSubstring.UTF8View.index(before:)();
      uint64_t v31 = 0LL;
      uint64_t v30 = *(void *)(a4 + 16);
      v56 = v30 - 1;
      uint64_t v32 = 1LL;
    }

    if (v31 >= v30)
    {
LABEL_56:
      __break(1u);
      goto LABEL_57;
    }

    id v52 = v29;
    uint64_t v33 = *(unsigned __int8 *)(a4 + 32 + v31);
    uint64_t result = BigSubstring.UTF8View.subscript.getter();
LABEL_24:
    uint64_t v29 = v52 + 1;
    swift_bridgeObjectRelease();
    if (v52 + 1 == v49)
    {
      uint64_t result = swift_bridgeObjectRelease();
      a7 = v48;
      goto LABEL_51;
    }
  }

  unint64_t v34 = v54;
  a5 = v55;
  uint64_t v35 = v53;
  uint64_t v8 = (unint64_t)v51;
  while (1)
  {
    uint64_t v36 = v56 - v31;
    if (__OFSUB__(v56, v31))
    {
      __break(1u);
LABEL_53:
      __break(1u);
LABEL_54:
      __break(1u);
LABEL_55:
      __break(1u);
      goto LABEL_56;
    }

    if ((a6 & 1) != 0) {
      break;
    }
    if (!v36) {
      goto LABEL_43;
    }
LABEL_37:
    unint64_t v37 = v31 + v32;
    if (__OFADD__(v31, v32)) {
      goto LABEL_53;
    }
    uint64_t result = BigSubstring.UTF8View.index(_:offsetBy:limitedBy:)();
    if (v40 == 2) {
      goto LABEL_24;
    }
    if ((v37 & 0x8000000000000000LL) != 0) {
      goto LABEL_54;
    }
    if (v37 >= *(void *)(a4 + 16)) {
      goto LABEL_55;
    }
    a5 = result;
    unint64_t v34 = v38;
    uint64_t v35 = v39;
    uint64_t v8 = v40;
    CFTypeRef v41 = *(unsigned __int8 *)(a4 + 32 + v37);
    uint64_t result = BigSubstring.UTF8View.subscript.getter();
    v31 += v32;
  }

  if (v36 > 0 || v32 >= v36) {
    goto LABEL_37;
  }
LABEL_43:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((a6 & 1) != 0)
  {
    uint64_t v16 = v54;
    uint64_t result = v55;
    uint64_t v28 = v55 >> 10;
    BOOL v42 = a5;
    unint64_t v43 = v34;
    unint64_t v44 = v35;
    a7 = (unint64_t *)v8;
    uint64_t v18 = v51;
    uint64_t v17 = v53;
    if (v55 >> 10 < a5 >> 10)
    {
      __break(1u);
      goto LABEL_46;
    }
  }

  else
  {
    unint64_t v43 = v54;
    BOOL v42 = v55;
    unint64_t v44 = v53;
    a7 = v51;
    uint64_t result = a5;
    if (a5 >> 10 < v55 >> 10) {
      goto LABEL_61;
    }
  }

  uint64_t result = BigSubstring.UTF8View.index(after:)();
  *unint64_t v48 = v42;
  v48[1] = v43;
  v48[2] = v44;
  v48[3] = (unint64_t)a7;
  v48[4] = result;
  v48[5] = v45;
  v48[6] = v46;
  v48[7] = v47;
  return result;
}

    uint64_t result = BigString.UTF8View.index(after:)();
    if (v8 <= result >> 10) {
      goto LABEL_17;
    }
LABEL_58:
    __break(1u);
LABEL_59:
    __break(1u);
    goto LABEL_60;
  }

  if (result == 13)
  {
    v57 = a2;
    uint64_t v16 = BigString.UTF8View.index(after:)();
    if (v16 >> 10 < (unint64_t)BigString.UTF8View.endIndex.getter() >> 10)
    {
      uint64_t v17 = v7[1];
      v62[0] = *v7;
      v62[1] = v17;
      v62[2] = v7[2];
      outlined init with take of any PredicateExpression<Self.Output == B1>(v62, (uint64_t)v63);
      outlined retain of Locale((uint64_t)v63);
      uint64_t v8 = BigString.UTF8View.subscript.getter();
      outlined release of Locale((uint64_t)v7);
      if ((_DWORD)v8 == 10)
      {
        uint64_t result = BigString.UTF8View.index(after:)();
        if (result >> 10 >= v57 >> 10)
        {
          *a7 = v57;
LABEL_18:
          a7[1] = a3;
LABEL_19:
          a7[2] = a4;
          a7[3] = a5;
          goto LABEL_20;
        }

        goto LABEL_59;
      }
    }

    a2 = v57;
    uint64_t result = BigString.UTF8View.index(after:)();
    if (result >> 10 >= v57 >> 10)
    {
LABEL_17:
      *a7 = a2;
      goto LABEL_18;
    }

    __break(1u);
    goto LABEL_16;
  }

  if ((a6 & 1) != 0)
  {
  }

  else if ((result + 29) < 0xDFu)
  {
LABEL_51:
    *a7 = 0LL;
    a7[1] = 0LL;
    a7[2] = 0LL;
    a7[3] = 2LL;
    *((_OWORD *)a7 + 2) = 0u;
    *((_OWORD *)a7 + 3) = 0u;
    return result;
  }

  v51 = *(void *)(a1 + 16);
  if (!v51) {
    goto LABEL_51;
  }
  unint64_t v58 = a2;
  v55 = a4;
  uint64_t v50 = a7;
  id v52 = a1 + 32;
  swift_bridgeObjectRetain();
  uint64_t v31 = 0LL;
  uint64_t v53 = (unint64_t *)a5;
  v56 = a3;
  while (1)
  {
    a4 = *(void *)(v52 + 8 * v31);
    if ((a6 & 1) != 0)
    {
      uint64_t v32 = *(void *)(a4 + 16);
      uint64_t v33 = v32 - 1;
      BigString.UTF8View.startIndex.getter();
      uint64_t result = swift_bridgeObjectRetain();
      int v59 = 0LL;
      unint64_t v34 = -1LL;
    }

    else
    {
      BigString.UTF8View.endIndex.getter();
      swift_bridgeObjectRetain();
      uint64_t result = BigString.UTF8View.index(before:)();
      uint64_t v33 = 0LL;
      uint64_t v32 = *(void *)(a4 + 16);
      int v59 = v32 - 1;
      unint64_t v34 = 1LL;
    }

    if (v33 >= v32)
    {
LABEL_57:
      __break(1u);
      goto LABEL_58;
    }

    v54 = v31;
    uint64_t v35 = *(unsigned __int8 *)(a4 + 32 + v33);
    uint64_t result = BigString.UTF8View.subscript.getter();
LABEL_24:
    uint64_t v31 = v54 + 1;
    swift_bridgeObjectRelease();
    if (v54 + 1 == v51)
    {
      uint64_t result = swift_bridgeObjectRelease();
      a7 = v50;
      goto LABEL_51;
    }
  }

  uint64_t v36 = v56;
  a5 = v58;
  unint64_t v37 = v55;
  uint64_t v8 = (unint64_t)v53;
  while (1)
  {
    uint64_t v38 = v59 - v33;
    if (__OFSUB__(v59, v33))
    {
      __break(1u);
LABEL_54:
      __break(1u);
LABEL_55:
      __break(1u);
LABEL_56:
      __break(1u);
      goto LABEL_57;
    }

    if ((a6 & 1) != 0) {
      break;
    }
    if (!v38) {
      goto LABEL_43;
    }
LABEL_37:
    unsigned int v39 = v33 + v34;
    if (__OFADD__(v33, v34)) {
      goto LABEL_54;
    }
    uint64_t result = BigString.UTF8View.index(_:offsetBy:limitedBy:)();
    if (v42 == 2) {
      goto LABEL_24;
    }
    if ((v39 & 0x8000000000000000LL) != 0) {
      goto LABEL_55;
    }
    if (v39 >= *(void *)(a4 + 16)) {
      goto LABEL_56;
    }
    a5 = result;
    uint64_t v36 = v40;
    unint64_t v37 = v41;
    uint64_t v8 = v42;
    unint64_t v43 = *(unsigned __int8 *)(a4 + 32 + v39);
    uint64_t result = BigString.UTF8View.subscript.getter();
    v33 += v34;
  }

  if (v38 > 0 || v34 >= v38) {
    goto LABEL_37;
  }
LABEL_43:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((a6 & 1) != 0)
  {
    uint64_t v18 = v56;
    uint64_t result = v58;
    uint64_t v30 = v58 >> 10;
    unint64_t v44 = a5;
    id v45 = v36;
    unint64_t v46 = v37;
    a7 = (unint64_t *)v8;
    int v20 = v53;
    unint64_t v19 = v55;
    if (v58 >> 10 < a5 >> 10)
    {
      __break(1u);
      goto LABEL_46;
    }
  }

  else
  {
    id v45 = v56;
    unint64_t v44 = v58;
    unint64_t v46 = v55;
    a7 = v53;
    uint64_t result = a5;
    if (a5 >> 10 < v58 >> 10) {
      goto LABEL_62;
    }
  }

  uint64_t result = BigString.UTF8View.index(after:)();
  *uint64_t v50 = v44;
  v50[1] = v45;
  v50[2] = v46;
  v50[3] = (unint64_t)a7;
  v50[4] = result;
  v50[5] = v47;
  v50[6] = v48;
  v50[7] = v49;
  return result;
}

    uint64_t result = Substring.UTF8View.index(after:)();
    if (v7 > result >> 14) {
      goto LABEL_97;
    }
    return a2;
  }

      LOBYTE(v107) = 1;
      uint64_t v38 = v35;
      unsigned int v39 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)();
      uint64_t v40 = objc_msgSend((id)objc_opt_self(), sel_expressionForConstantValue_, v39);
      swift_unknownObjectRelease();
      uint64_t v35 = objc_msgSend( objc_allocWithZone((Class)NSComparisonPredicate),  sel_initWithLeftExpression_rightExpression_modifier_type_options_,  v38,  v40,  0,  4,  0);

      goto LABEL_17;
    }

    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v107);
    uint64_t v4 = 0LL;
    uint64_t v33 = v3;
    uint64_t v28 = MEMORY[0x18961AFE8];
  }

  else
  {
    v106 = 0LL;
    v104 = 0u;
    v105 = 0u;
    outlined destroy of Any?((uint64_t)&v104, &demangling cache variable for type metadata for ConvertibleExpression?);
    uint64_t v33 = 0LL;
  }

  *(void *)&v107 = v28;
  (*(void (**)(uint64_t *__return_ptr, __int128 *, uint64_t))(*(void *)(a2 + 40) + 16LL))(&v110, &v107, v22);
  if (!v4)
  {
    v103 = MEMORY[0x1896184C8];
    LOBYTE(v102[0]) = v110 & 1;
    _expressionCompatibleValue(for:)((uint64_t)v102, (uint64_t)&v104);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v102);
    if (!*((void *)&v105 + 1))
    {
      outlined destroy of Any?((uint64_t)&v104, &demangling cache variable for type metadata for Any?);
      if (v33) {
        goto LABEL_8;
      }
      goto LABEL_7;
    }

    outlined init with take of Any(&v104, &v107);
    __swift_project_boxed_opaque_existential_1(&v107, v108);
    unint64_t v37 = _bridgeAnythingToObjectiveC<A>(_:)();
    uint64_t v35 = objc_msgSend((id)objc_opt_self(), sel_expressionForConstantValue_, v37);
    swift_unknownObjectRelease();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v107);

    goto LABEL_16;
  }

  if (!v33)
  {
LABEL_7:
    lazy protocol witness table accessor for type NSPredicateConversionError and conformance NSPredicateConversionError();
    swift_allocError();
    *unint64_t v34 = 2;
  }

  BOOL v13 = a3 != 1 && v10 == 254 && v6 == 255;
  unint64_t v14 = !v13;
  if (v13) {
    unint64_t v15 = v8;
  }
  else {
    unint64_t v15 = 1;
  }
  if (v7) {
    unint64_t v15 = 1;
  }
  if (((v9 | v15) & 1) == 0 && !v5)
  {
    size_t v11 = 2617245952LL;
    goto LABEL_33;
  }

  if ((v14 & 1) == 0)
  {
    uint64_t v17 = 2415919360LL;
    goto LABEL_40;
  }

  if (a3 != 1 && v10 == 255 && v6 == 254)
  {
    uint64_t v17 = 2483028224LL;
LABEL_40:
    *a1 = v17;
    return 2LL;
  }

  if (a3 != 1 && v10 == 239 && v6 == 187) {
    int v20 = v8;
  }
  else {
    int v20 = 1;
  }
  if ((v20 & 1) == 0 && v7 == 191)
  {
    *a1 = 4LL;
    return 3LL;
  }

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

    int v20 = 0LL;
    unint64_t v19 = 1;
    if (v15) {
      goto LABEL_17;
    }
    goto LABEL_14;
  }

  os_unfair_lock_unlock(v8);
  __break(1u);
}

          unint64_t v19 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          unint64_t v14 = swift_bridgeObjectRelease();
          if ((v19 & 1) != 0) {
            goto LABEL_17;
          }
          switch(v10)
          {
            case 0:
              int v20 = MEMORY[0x18961A4C0];
              int v23 = MEMORY[0x18961A510];
              goto LABEL_25;
            case 1:
              int v20 = MEMORY[0x18961A8C8];
              int v23 = MEMORY[0x18961A910];
              goto LABEL_25;
            case 2:
              int v20 = MEMORY[0x189618620];
              uint64_t v25 = MEMORY[0x189618620];
              uint64_t v26 = MEMORY[0x189618658];
              LODWORD(v24[0]) = 0;
              break;
            case 3:
              int v20 = MEMORY[0x189618560];
              int v23 = MEMORY[0x1896185C0];
LABEL_25:
              uint64_t v25 = v20;
              uint64_t v26 = v23;
              v24[0] = 0LL;
              break;
            case 4:
              int v20 = MEMORY[0x189617FA8];
              uint64_t v25 = MEMORY[0x189617FA8];
              uint64_t v26 = lazy protocol witness table accessor for type String and conformance String();
              v24[0] = 0x296C6C756E28LL;
              v24[1] = 0xE600000000000000LL;
              break;
            default:
              continue;
          }

          break;
        }

        int v21 = __swift_project_boxed_opaque_existential_1(v24, v20);
        uint64_t v30 = v20;
        boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v29);
        (*(void (**)(uint64_t *, void *, uint64_t))(*(void *)(v20 - 8) + 16LL))( boxed_opaque_existential_1,  v21,  v20);
        uint64_t v31 = 0;
        outlined init with take of String.LocalizationValue.FormatArgument.Storage(&v29, a5);
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v24);
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v27);
        uint64_t result = __swift_destroy_boxed_opaque_existential_1((uint64_t)&v28);
        break;
    }
  }

  else
  {
    outlined destroy of String.LocalizationValue.FormatArgument.Storage((uint64_t)&v29);
    return outlined init with copy of String.LocalizationValue.FormatArgument(a1, a5);
  }

  return result;
}

  __break(1u);
LABEL_17:
  __break(1u);
}

  __break(1u);
LABEL_17:
  __break(1u);
}

    unint64_t v7 = (v4 | (a1 >> 6) & 0x3F) << 8;
    uint64_t v8 = (((v7 | (a1 >> 12) & 0x3F) << 8) | (a1 >> 18)) - 2122219023;
    unsigned int v9 = (v7 | (a1 >> 12)) + 8487393;
    if ((_DWORD)a4) {
      SEL v5 = v8;
    }
    else {
      SEL v5 = v9;
    }
    goto LABEL_9;
  }

  LODWORD(a4) = a1 >> 11;
  if (a1 >> 11 == 27)
  {
    __break(1u);
    goto LABEL_16;
  }

  LODWORD(a4) = WORD1(a1);
  if (WORD1(a1) > 0x10u) {
    goto LABEL_12;
  }
  SEL v5 = a1 + 1;
LABEL_9:
  unint64_t v6 = __clz(v5);
  unint64_t v10 = (v5 + 0xFEFEFEFEFEFEFFLL) & ~(-1LL << (8 * (4 - (v6 >> 3))));
  _XMLPlistEncodingFormat.Writer.append(_:)((uint64_t)&v10, 4 - (v6 >> 3));
}

    size_t v1 = (void *)v10;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v51);
    return v1;
  }

  unint64_t v49 = 0LL;
  unint64_t v47 = 0u;
  unint64_t v48 = 0u;
  outlined destroy of Any?((uint64_t)&v47, &demangling cache variable for type metadata for FixedWidthInteger?);
  outlined init with copy of Any((uint64_t)v1, (uint64_t)v51);
  type metadata accessor for NSNumber();
  if ((swift_dynamicCast() & 1) != 0)
  {
    size_t v1 = (void *)v47;
    uint64_t v25 = type metadata accessor for DecodingError();
    swift_allocError();
    unint64_t v27 = v26;
    v51[0] = 0LL;
    v51[1] = 0xE000000000000000LL;
    swift_bridgeObjectRetain();
    _StringGuts.grow(_:)(52LL);
    v28._countAndFlagsBits = 0xD00000000000001DLL;
    v28._object = (void *)0x80000001839D13E0LL;
    String.append(_:)(v28);
    uint64_t v29 = objc_msgSend(v1, sel_description);
    uint64_t v30 = static String._unconditionallyBridgeFromObjectiveC(_:)(v29);
    uint64_t v32 = v31;

    v33._countAndFlagsBits = (uint64_t)v30;
    v33._object = v32;
    String.append(_:)(v33);
    swift_bridgeObjectRelease();
    v34._object = (void *)0x80000001839D1400LL;
    v34._countAndFlagsBits = 0xD000000000000012LL;
    String.append(_:)(v34);
    v35._countAndFlagsBits = 0x656C62756F44LL;
    v35._object = (void *)0xE600000000000000LL;
    String.append(_:)(v35);
    v36._countAndFlagsBits = 46LL;
    v36._object = (void *)0xE100000000000000LL;
    String.append(_:)(v36);
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v25 - 8) + 104LL))( v27,  *MEMORY[0x189619360],  v25);
    swift_willThrow();
  }

  else
  {
    type metadata accessor for DecodingError();
    swift_allocError();
    id v45 = v44;
    swift_bridgeObjectRetain();
    static DecodingError._typeMismatch(at:expectation:reality:)(MEMORY[0x189618560], v1, v45);
    swift_bridgeObjectRelease();
    swift_willThrow();
  }

  return v1;
}

    __break(1u);
    return result;
  }

  int v20 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))specialized Rope._UnsafeHandle._appendChildren(movingFromPrefixOf:count:);
  int v21 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))specialized Rope._UnsafeHandle._appendChildren(movingFromPrefixOf:count:);
  BOOL v22 = a2;
  return specialized Rope._Node.prependChildren(movingFromSuffixOf:count:)(v22, v19, v20, v21);
}

      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Data>);
      uint64_t v30 = static _DictionaryStorage.copy(original:)();
      BOOL v13 = v30;
      if (*(void *)(v12 + 16))
      {
        uint64_t result = (char *)(v30 + 64);
        uint64_t v31 = v12 + 64;
        uint64_t v32 = (unint64_t)((1LL << *(_BYTE *)(v13 + 32)) + 63) >> 6;
        uint64_t v33 = 0LL;
        *(void *)(v13 + 16) = *(void *)(v12 + 16);
        unint64_t v34 = 1LL << *(_BYTE *)(v12 + 32);
        uint64_t v35 = -1LL;
        if (v34 < 64) {
          uint64_t v35 = ~(-1LL << v34);
        }
        uint64_t v36 = v35 & *(void *)(v12 + 64);
        unint64_t v37 = (unint64_t)(v34 + 63) >> 6;
        while (1)
        {
          if (v36)
          {
            uint64_t v38 = __clz(__rbit64(v36));
            v36 &= v36 - 1;
            unsigned int v39 = v38 | (v33 << 6);
          }

          else
          {
            id v45 = v33 + 1;
            if (__OFADD__(v33, 1LL)) {
              goto LABEL_80;
            }
            if (v45 >= v37) {
              break;
            }
            unint64_t v46 = *(void *)(v31 + 8 * v45);
            ++v33;
            if (!v46)
            {
              uint64_t v33 = v45 + 1;
              if (v45 + 1 >= v37) {
                break;
              }
              unint64_t v46 = *(void *)(v31 + 8 * v33);
              if (!v46)
              {
                uint64_t v33 = v45 + 2;
                if (v45 + 2 >= v37) {
                  break;
                }
                unint64_t v46 = *(void *)(v31 + 8 * v33);
                if (!v46)
                {
                  uint64_t v33 = v45 + 3;
                  if (v45 + 3 >= v37) {
                    break;
                  }
                  unint64_t v46 = *(void *)(v31 + 8 * v33);
                  if (!v46)
                  {
                    uint64_t v33 = v45 + 4;
                    if (v45 + 4 >= v37) {
                      break;
                    }
                    unint64_t v46 = *(void *)(v31 + 8 * v33);
                    if (!v46)
                    {
                      unint64_t v47 = v45 + 5;
                      if (v47 >= v37) {
                        break;
                      }
                      unint64_t v46 = *(void *)(v31 + 8 * v47);
                      if (!v46)
                      {
                        while (1)
                        {
                          uint64_t v33 = v47 + 1;
                          if (__OFADD__(v47, 1LL)) {
                            goto LABEL_81;
                          }
                          if (v33 >= v37) {
                            goto LABEL_74;
                          }
                          unint64_t v46 = *(void *)(v31 + 8 * v33);
                          ++v47;
                          if (v46) {
                            goto LABEL_43;
                          }
                        }
                      }

                      uint64_t v33 = v47;
                    }
                  }
                }
              }
            }

    specialized _NativeDictionary._insert(at:key:value:)(v25, a2, v33, a4 & 1, (uint64_t)v18, (void *)v32);
    swift_bridgeObjectRetain();
    goto LABEL_17;
  }

  v57 = (char *)(v56 + 64);
  unint64_t v58 = 1LL << *(_BYTE *)(v32 + 32);
  v77 = (char *)(a3 + 64);
  int v59 = (unint64_t)(v58 + 63) >> 6;
  if (v32 != a3 || v57 >= &v77[8 * v59]) {
    memmove(v57, v77, 8 * v59);
  }
  uint64_t v60 = 0LL;
  *(void *)(v32 + 16) = *(void *)(a3 + 16);
  v61 = 1LL << *(_BYTE *)(a3 + 32);
  v62 = -1LL;
  if (v61 < 64) {
    v62 = ~(-1LL << v61);
  }
  v63 = v62 & *(void *)(a3 + 64);
  v76 = (unint64_t)(v61 + 63) >> 6;
  while (1)
  {
    if (v63)
    {
      v82 = (v63 - 1) & v63;
      v83 = v60;
      v64 = __clz(__rbit64(v63)) | (v60 << 6);
      goto LABEL_55;
    }

    v70 = v60 + 1;
    if (__OFADD__(v60, 1LL))
    {
      __break(1u);
LABEL_81:
      __break(1u);
LABEL_82:
      __break(1u);
      goto LABEL_83;
    }

    if (v70 >= v76) {
      goto LABEL_77;
    }
    v71 = *(void *)&v77[8 * v70];
    v72 = v60 + 1;
    if (!v71)
    {
      v72 = v60 + 2;
      if (v60 + 2 >= v76) {
        goto LABEL_77;
      }
      v71 = *(void *)&v77[8 * v72];
      if (!v71)
      {
        v72 = v60 + 3;
        if (v60 + 3 >= v76) {
          goto LABEL_77;
        }
        v71 = *(void *)&v77[8 * v72];
        if (!v71)
        {
          v72 = v60 + 4;
          if (v60 + 4 >= v76) {
            goto LABEL_77;
          }
          v71 = *(void *)&v77[8 * v72];
          if (!v71)
          {
            v72 = v60 + 5;
            if (v60 + 5 >= v76) {
              goto LABEL_77;
            }
            v71 = *(void *)&v77[8 * v72];
            if (!v71)
            {
              v72 = v60 + 6;
              if (v60 + 6 >= v76) {
                goto LABEL_77;
              }
              v71 = *(void *)&v77[8 * v72];
              if (!v71) {
                break;
              }
            }
          }
        }
      }
    }

      LOBYTE(v11) = 1;
      if ((a3 & 1) != 0) {
        goto LABEL_17;
      }
      goto LABEL_11;
    }

    uint64_t v8 = v3 == 0;
    BOOL v13 = -v3;
    unint64_t v14 = -(uint64_t)(v4 + !v8);
    unint64_t v15 = !is_mul_ok(v14, 0xAuLL);
    uint64_t v8 = __CFADD__(((unint64_t)v13 * (unsigned __int128)0xAuLL) >> 64, 10 * v14);
    uint64_t v16 = (__PAIR128__(v14, v13) * 0xA) >> 64;
    if (v8) {
      unint64_t v15 = 1;
    }
    uint64_t v8 = 10 * v13 == 0;
    unint64_t v10 = -10 * v13;
    unsigned int v9 = -(v16 + !v8);
    if (v15) {
      goto LABEL_16;
    }
    LOBYTE(v11) = v10 != 0;
    if ((a3 & 1) != 0)
    {
LABEL_17:
      unint64_t v12 = __OFSUB__(__PAIR128__(v9, v10), v6);
      uint64_t v4 = (__PAIR128__(v9, v10) - v6) >> 64;
      objc_super v3 = v10 - v6;
      goto LABEL_18;
    }

      uint64_t v8 = specialized _parseIntegerDigits<A>(_:isNegative:)(a1, a2, v5);
      goto LABEL_17;
    }

    SEL v5 = 1;
  }

  if (a2 >= 1) {
    unint64_t v6 = 1LL;
  }
  else {
    unint64_t v6 = a2;
  }
  a1 += v6;
  a2 -= v6;
  if ((a3 & 1) == 0) {
    goto LABEL_16;
  }
  if (a2 <= 2) {
    goto LABEL_14;
  }
LABEL_11:
  unint64_t v7 = 2LL;
LABEL_15:
  uint64_t v8 = specialized _parseHexIntegerDigits<A>(_:isNegative:)(&a1[v7], a2 - v7, v5);
LABEL_17:
  unsigned int v9 = (v8 >> 8) & 1;
  return v8 | (v9 << 8);
}

      uint64_t v8 = specialized _parseIntegerDigits<A>(_:isNegative:)(a1, a2, v5);
      goto LABEL_17;
    }

    SEL v5 = 1;
  }

  if (a2 >= 1) {
    unint64_t v6 = 1LL;
  }
  else {
    unint64_t v6 = a2;
  }
  a1 += v6;
  a2 -= v6;
  if ((a3 & 1) == 0) {
    goto LABEL_16;
  }
  if (a2 <= 2) {
    goto LABEL_14;
  }
LABEL_11:
  unint64_t v7 = 2LL;
LABEL_15:
  uint64_t v8 = specialized _parseHexIntegerDigits<A>(_:isNegative:)(&a1[v7], a2 - v7, v5);
LABEL_17:
  unsigned int v9 = HIWORD(v8) & 1;
  return (unsigned __int16)v8 | (v9 << 16);
}

      uint64_t v8 = specialized _parseIntegerDigits<A>(_:isNegative:)(a1, a2, v5);
      goto LABEL_17;
    }

    SEL v5 = 1;
  }

  if (a2 >= 1) {
    unint64_t v6 = 1LL;
  }
  else {
    unint64_t v6 = a2;
  }
  a1 += v6;
  a2 -= v6;
  if ((a3 & 1) == 0) {
    goto LABEL_16;
  }
  if (a2 < 3) {
    goto LABEL_14;
  }
LABEL_11:
  unint64_t v7 = 2LL;
LABEL_15:
  uint64_t v8 = specialized _parseHexIntegerDigits<A>(_:isNegative:)(&a1[v7], a2 - v7, v5);
LABEL_17:
  unsigned int v9 = (v8 >> 8) & 1;
  return v8 | (v9 << 8);
}

      uint64_t v8 = specialized _parseIntegerDigits<A>(_:isNegative:)(a1, a2, v5);
      goto LABEL_17;
    }

    SEL v5 = 1;
  }

  if (a2 >= 1) {
    unint64_t v6 = 1LL;
  }
  else {
    unint64_t v6 = a2;
  }
  a1 += v6;
  a2 -= v6;
  if ((a3 & 1) == 0) {
    goto LABEL_16;
  }
  if (a2 < 3) {
    goto LABEL_14;
  }
LABEL_11:
  unint64_t v7 = 2LL;
LABEL_15:
  uint64_t v8 = specialized _parseHexIntegerDigits<A>(_:isNegative:)(&a1[v7], a2 - v7, v5);
LABEL_17:
  unsigned int v9 = HIWORD(v8) & 1;
  return (unsigned __int16)v8 | (v9 << 16);
}

      unint64_t v10 = a5(a1, a2, v7);
      size_t v11 = HIDWORD(v10) & 1;
      return v10 | ((unint64_t)v11 << 32);
    }

    unint64_t v7 = 1LL;
  }

  if (a2 >= 1) {
    uint64_t v8 = 1LL;
  }
  else {
    uint64_t v8 = a2;
  }
  a1 += v8;
  a2 -= v8;
  if ((a3 & 1) == 0) {
    goto LABEL_16;
  }
  if (a2 < 3) {
    goto LABEL_14;
  }
LABEL_11:
  unsigned int v9 = 2LL;
LABEL_15:
  unint64_t v10 = a4(&a1[v9], a2 - v9, v7);
  size_t v11 = HIDWORD(v10) & 1;
  return v10 | ((unint64_t)v11 << 32);
}

      uint64_t v4 = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  *(void *)(v4 + 16) + 1LL,  1,  (void *)v4);
      goto LABEL_4;
    }

    objc_super v3 = v5;
    uint64_t v8 = v6;
    uint64_t v4 = v7;
    *(void *)(v0 + _Block_object_dispose(va, 8) = JSONMap.offset(after:)(v1);
    *(void *)(v0 + 24) = v3;
    *(void *)(v0 + 32) = v8;
    *(_BYTE *)(v0 + 40) = v4;
  }

  if ((v4 & 0xE0) != 0x40)
  {
    uint64_t v18 = *(void *)(v0 + 64);
    unint64_t v19 = _CodingPathNode.path.getter(*(void *)(v2 + 72));
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CodingKey>);
    inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_183720D90;
    *(void *)(inited + 56) = &type metadata for _CodingKey;
    *(void *)(inited + 64) = lazy protocol witness table accessor for type _CodingKey and conformance _CodingKey();
    int v21 = swift_allocObject();
    *(void *)(inited + 32) = v21;
    *(void *)(v21 + 16) = v18;
    *(void *)(v21 + 24) = 0LL;
    *(void *)(v21 + 32) = 0LL;
    *(_BYTE *)(v21 + 40) = 2;
    *(void *)&id v24 = v19;
    specialized Array.append<A>(contentsOf:)(inited);
    type metadata accessor for DecodingError();
    swift_allocError();
    JSONDecoderImpl.createTypeMismatchError(type:for:value:)(MEMORY[0x1896184C8], v4, v22);
    swift_bridgeObjectRelease();
LABEL_13:
    swift_willThrow();
    return v17 & 1;
  }

  unint64_t v15 = *(void *)(v0 + 64);
  uint64_t v16 = v15 + 1;
  if (__OFADD__(v15, 1LL))
  {
    __break(1u);
    goto LABEL_16;
  }

  uint64_t v17 = v3 & 1;
  *(void *)(v0 + 64) = v16;
  *(void *)(v0 + 24) = 0LL;
  *(void *)(v0 + 32) = 0LL;
  *(_BYTE *)(v0 + 40) = -2;
  return v17 & 1;
}

    __break(1u);
    goto LABEL_17;
  }

  unsigned int v9 = *(void *)(*((void *)v1 + 1) + 24LL);
  if (!__OFADD__(v9, v7))
  {
    __DataStorage.setLength(_:)(v9 + v7);
    goto LABEL_9;
  }

    uint64_t v18 = 0LL;
    *(void *)&v176 = 0LL;
    v175 = 0u;
    v174 = 0u;
LABEL_17:
    outlined init with take of LocalePreferences?( (uint64_t)&v174,  (uint64_t)&v183,  &demangling cache variable for type metadata for (key: NSAttributedStringKey, value: Any)?);
    uint64_t v29 = v183;
    if (!v183) {
      break;
    }
    outlined init with take of Any(v20, &v179);
    uint64_t v30 = static String._unconditionallyBridgeFromObjectiveC(_:)(v29);
    if (*(void *)(a5 + 16)
      && (uint64_t v32 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v30, v31), (v33 & 1) != 0))
    {
      unint64_t v34 = (uint64_t *)(*(void *)(a5 + 56) + 16 * v32);
      uint64_t v36 = *v34;
      uint64_t v35 = v34[1];
      swift_bridgeObjectRelease();
      v163 = v35;
      AssociatedTypeWitness = swift_getAssociatedTypeWitness();
      v167 = type metadata accessor for Optional();
      v168 = *(void *)(v167 - 8);
      uint64_t v38 = *(void *)(v168 + 64);
      MEMORY[0x1895F8858](v167);
      v166 = (char *)&v136 - v39;
      uint64_t v40 = v180;
      CFTypeRef v41 = __swift_project_boxed_opaque_existential_1(&v179, v180);
      isClassOrObjCExistentialType = _swift_isClassOrObjCExistentialType();
      unint64_t v43 = *(void *)(*(void *)(v40 - 8) + 64LL);
      v169 = v21;
      v170 = (unint64_t)&v136;
      if ((isClassOrObjCExistentialType & 1) != 0)
      {
        if (v43 != 8) {
          goto LABEL_84;
        }
        unint64_t v44 = *v41;
        swift_unknownObjectRetain();
      }

      else
      {
        v103 = MEMORY[0x1895F8858](isClassOrObjCExistentialType);
        (*(void (**)(char *, uint64_t *, uint64_t, __n128))(v105 + 16))( (char *)&v136 - ((v104 + 15) & 0xFFFFFFFFFFFFFFF0LL),  v41,  v40,  v103);
        unint64_t v44 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)();
      }

      id v45 = swift_conformsToProtocol2();
      if (v45) {
        unint64_t v46 = v45;
      }
      else {
        unint64_t v46 = 0LL;
      }
      if (v45) {
        unint64_t v47 = v36;
      }
      else {
        unint64_t v47 = 0LL;
      }
      if (!v47)
      {
        v55 = *(void **)(AssociatedTypeWitness - 8);
        MEMORY[0x1895F8858](v45);
        v57 = (char *)&v136 - ((v56 + 15) & 0xFFFFFFFFFFFFFFF0LL);
        v155 = &v136;
        *(void *)&v174 = v44;
        MEMORY[0x1895F8858](v58);
        swift_unknownObjectRetain();
        int v59 = swift_dynamicCast();
        v164 = v55;
        uint64_t v60 = (void (*)(char *, uint64_t, uint64_t, uint64_t))v55[7];
        if ((v59 & 1) != 0)
        {
          v60((char *)&v136 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0LL), 0LL, 1LL, AssociatedTypeWitness);
          v154 = &v136;
          v61 = (void (*)(char *, char *, uint64_t))v164[4];
          v61(v57, (char *)&v136 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0LL), AssociatedTypeWitness);
          v62 = v166;
          v61(v166, v57, AssociatedTypeWitness);
          swift_unknownObjectRelease();
          goto LABEL_43;
        }

        v164 = (void *)v44;
        v60((char *)&v136 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0LL), 1LL, 1LL, AssociatedTypeWitness);
        (*(void (**)(char *, uint64_t))(v168 + 8))((char *)&v136 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0LL), v167);
        v71 = v152;
        static String._unconditionallyBridgeFromObjectiveC(_:)(v152);
        v72 = objc_allocWithZone((Class)&OBJC_CLASS___NSError);
        v73 = String._bridgeToObjectiveCImpl()();
        swift_bridgeObjectRelease();
        v54 = objc_msgSend(v72, sel_initWithDomain_code_userInfo_, v73, 4866, _NativeDictionary.bridged()());
        swift_unknownObjectRelease();
        swift_unknownObjectRelease();
        v74 = objc_msgSend(v54, sel_domain);
        v75 = static String._unconditionallyBridgeFromObjectiveC(_:)(v74);
        v77 = v76;

        if (v75 != static String._unconditionallyBridgeFromObjectiveC(_:)(v71) || v77 != v78)
        {
          v101 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          unint64_t v14 = v157;
          a5 = v160;
          unint64_t v19 = v161;
          int v20 = v159;
          if ((v101 & 1) == 0) {
            goto LABEL_86;
          }
          goto LABEL_50;
        }

        swift_bridgeObjectRelease_n();
        unint64_t v14 = v157;
        goto LABEL_41;
      }

      swift_getAssociatedTypeWitness();
      v164 = (void *)v44;
      unint64_t v48 = swift_dynamicCastUnknownClass();
      if (v48)
      {
        unint64_t v49 = v48;
        uint64_t v50 = swift_getAssociatedTypeWitness();
        v155 = &v136;
        v51 = MEMORY[0x1895F8858](v50);
        id v52 = v49;
        uint64_t v53 = v162;
        (*(void (**)(uint64_t, uint64_t, uint64_t, __n128))(v46 + 32))(v52, v47, v46, v51);
        if (v53)
        {
          swift_unknownObjectRelease();
          v54 = v53;
          v162 = 0LL;
          unint64_t v14 = v157;
          a5 = v160;
          unint64_t v19 = v161;
          int v20 = v159;
          goto LABEL_51;
        }

        v162 = 0LL;
        v62 = v166;
        swift_dynamicCast();
        swift_unknownObjectRelease();
        v164 = *(void **)(AssociatedTypeWitness - 8);
        uint64_t v60 = (void (*)(char *, uint64_t, uint64_t, uint64_t))v164[7];
LABEL_43:
        v60(v62, 0LL, 1LL, AssociatedTypeWitness);
        v79 = v163;
        v154 = (uint64_t *)(*(uint64_t (**)(uint64_t, uint64_t))(v163 + 24))(v36, v163);
        v155 = (uint64_t *)v80;
        v153 = &v136;
        v81 = v164;
        v82 = v164[8];
        MEMORY[0x1895F8858](v154);
        v150 = (v82 + 15) & 0xFFFFFFFFFFFFFFF0LL;
        v151 = (char *)&v136 - v150;
        v84 = MEMORY[0x1895F8858](v83);
        v85 = (char *)&v136 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0LL);
        v86 = v168;
        (*(void (**)(char *, __n128))(v168 + 16))(v85, v84);
        if (((unsigned int (*)(char *, uint64_t, uint64_t))v81[6])(v85, 1LL, AssociatedTypeWitness) == 1)
        {
          v87 = v167;
          (*(void (**)(char *, uint64_t))(v86 + 8))(v85, v167);
          v178 = 0LL;
          v176 = 0u;
          v177 = 0u;
          v175 = 0u;
          v174 = 0u;
          unint64_t v14 = v157;
          a5 = v160;
          int v20 = v159;
          int v21 = v169;
          v88 = v87;
        }

        else
        {
          v89 = v164;
          v90 = (uint64_t (*)(void))v164[4];
          v148 = &v136;
          v91 = v151;
          v92 = v90();
          v148 = &v136;
          v93 = MEMORY[0x1895F8858](v92);
          v94 = (char *)&v136 - v150;
          v95 = (void (*)(char *, char *, uint64_t, __n128))v89[2];
          v96 = v91;
          v95((char *)&v136 - v150, v91, AssociatedTypeWitness, v93);
          *((void *)&v172 + 1) = AssociatedTypeWitness;
          *(void *)v173 = swift_getAssociatedConformanceWitness();
          boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v171);
          ((void (*)(uint64_t *, char *, uint64_t))v95)(boxed_opaque_existential_1, v94, AssociatedTypeWitness);
          (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(v79 + 32))(&v174, v36, v79);
          *(_OWORD *)&v173[8] = v174;
          v173[24] = (*(uint64_t (**)(uint64_t, uint64_t))(v79 + 40))(v36, v79) & 1;
          v98 = (*(uint64_t (**)(uint64_t, uint64_t))(v79 + 48))(v36, v79);
          v99 = (void (*)(char *, uint64_t))v89[1];
          v99(v94, AssociatedTypeWitness);
          v178 = v98;
          v176 = *(_OWORD *)v173;
          v177 = *(_OWORD *)&v173[16];
          v175 = v172;
          v174 = v171;
          v99(v96, AssociatedTypeWitness);
          unint64_t v14 = v157;
          a5 = v160;
          int v20 = v159;
          int v21 = v169;
          v88 = v167;
        }

        specialized AttributedString._AttributeStorage.subscript.setter( (uint64_t)&v174,  (unint64_t)v154,  (unint64_t)v155);
        swift_bridgeObjectRelease();
        (*(void (**)(char *, uint64_t))(v168 + 8))(v166, v88);
        __swift_destroy_boxed_opaque_existential_1((uint64_t)&v179);

        unint64_t v19 = v161;
      }

      else
      {
        v63 = v152;
        static String._unconditionallyBridgeFromObjectiveC(_:)(v152);
        v64 = objc_allocWithZone((Class)&OBJC_CLASS___NSError);
        v65 = String._bridgeToObjectiveCImpl()();
        swift_bridgeObjectRelease();
        v54 = objc_msgSend(v64, sel_initWithDomain_code_userInfo_, v65, 4866, _NativeDictionary.bridged()());
        swift_unknownObjectRelease();
        swift_unknownObjectRelease();
        v66 = objc_msgSend(v54, sel_domain);
        v67 = static String._unconditionallyBridgeFromObjectiveC(_:)(v66);
        v69 = v68;

        if (v67 != static String._unconditionallyBridgeFromObjectiveC(_:)(v63) || v69 != v70)
        {
          v100 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          a5 = v160;
          unint64_t v19 = v161;
          int v20 = v159;
          if ((v100 & 1) == 0) {
            goto LABEL_85;
          }
          goto LABEL_50;
        }

        swift_bridgeObjectRelease_n();
LABEL_41:
        a5 = v160;
        unint64_t v19 = v161;
        int v20 = v159;
LABEL_50:
        swift_willThrow();
        swift_unknownObjectRelease();
        v162 = 0LL;
LABEL_51:
        int v21 = v169;
        if ((v156 & 1) == 0)
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_willThrow();

          __swift_destroy_boxed_opaque_existential_1((uint64_t)&v179);
          swift_release();
          v128 = *v138;
          *v138 = v54;
          v129 = v54;

          *v139 = 1;
          return;
        }

        __swift_destroy_boxed_opaque_existential_1((uint64_t)&v179);
      }
    }

    else
    {
      swift_bridgeObjectRelease();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v179);
    }
  }

  swift_bridgeObjectRelease();
  swift_release();
  v106 = v181;
  v107 = v182;
  v108 = v145;
  v170 = *v145;
  BigString.utf16.getter();
  v109 = v142;
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  v110 = BigString.UTF16View.index(_:offsetBy:)();
  v112 = v111;
  v114 = v113;
  v116 = v115;
  outlined release of Locale((uint64_t)&v183);
  *v109 = v110;
  v109[1] = v112;
  v109[2] = v114;
  v109[3] = v116;
  BigString.unicodeScalars.getter();
  v117 = BigString.UnicodeScalarView.index(roundingUp:)();
  v119 = v118;
  v121 = v120;
  v123 = v122;
  outlined release of Locale((uint64_t)&v171);
  *v108 = v117;
  v108[1] = v119;
  v108[2] = v121;
  v108[3] = v123;
  BigString.utf8.getter();
  outlined release of Locale((uint64_t)&v174);
  v124 = (v117 >> 11) - (v170 >> 11);
  if (v124 <= 0)
  {
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    return;
  }

  if (*v146 < 1) {
    goto LABEL_76;
  }
  v125 = v146[1];
  v126 = v146[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if ((specialized static Dictionary<>.== infix(_:_:)(v125, v106) & 1) == 0)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
LABEL_76:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_77;
  }

  v127 = specialized static Set.== infix(_:_:)(v126, v107);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v127 & 1) != 0)
  {
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    if (!__OFADD__(*v146, v124))
    {
      *v146 += v124;
      return;
    }

  __break(1u);
  return result;
}

      int v23 = (4 * *(_BYTE *)(v22 + 18) + 8) & 0x3C;
      int v20 = ((-15LL << v23) - 1) & v20 | (v25 << v23);
      id v24 = *(void *)(v22 + 24 + 24 * v25);
      swift_unknownObjectRetain();
      uint64_t result = swift_unknownObjectRelease();
      BOOL v22 = v24;
      if (!*(_BYTE *)(v24 + 18)) {
        goto LABEL_40;
      }
    }
  }

  swift_unknownObjectRetain_n();
  uint64_t result = outlined retain of AttributedString.Runs((uint64_t)v217);
  int v21 = v18;
  id v24 = v14;
LABEL_40:
  uint64_t v33 = *(unsigned __int16 *)(v24 + 16);
  if (!*(_WORD *)(v24 + 16))
  {
    uint64_t v17 = v155;
    unint64_t v7 = v153;
    goto LABEL_47;
  }

  unint64_t v34 = *(void *)(v24 + 24);
  uint64_t v35 = v21 - v34;
  uint64_t v17 = v155;
  unint64_t v7 = v153;
  if (__OFSUB__(v21, v34))
  {
LABEL_213:
    __break(1u);
LABEL_214:
    __break(1u);
LABEL_215:
    __break(1u);
LABEL_216:
    __break(1u);
    goto LABEL_217;
  }

  if (__OFADD__(v35, 1LL)) {
    goto LABEL_214;
  }
  if (v35 + 1 <= 0) {
    goto LABEL_49;
  }
  if ((_DWORD)v33 == 1)
  {
    v21 -= v34;
LABEL_47:
    if (!v21)
    {
LABEL_64:
      swift_unknownObjectRelease();
      swift_unknownObjectRelease();
      v180 = v20 & 0xFFFFFFFFFFFFF0FFLL | (v33 << 8);
      BOOL v13 = v156;
      unint64_t v19 = v182;
      v178 = v24;
      goto LABEL_38;
    }

    __break(1u);
LABEL_49:
    uint64_t v33 = 0LL;
    goto LABEL_64;
  }

  uint64_t v36 = *(void *)(v24 + 48);
  uint64_t v29 = __OFSUB__(v35, v36);
  unint64_t v37 = v35 - v36;
  if (!v29)
  {
    if (__OFADD__(v37, 1LL)) {
      goto LABEL_218;
    }
    if (v37 + 1 < 1)
    {
      uint64_t v33 = 1LL;
      int v21 = v35;
      goto LABEL_64;
    }

    if ((_DWORD)v33 != 2)
    {
      uint64_t v38 = (void *)(v24 + 72);
      unsigned int v39 = 2LL;
      while (1)
      {
        if (v33 == v39) {
          goto LABEL_210;
        }
        int v21 = v37 - *v38;
        if (__OFSUB__(v37, *v38)) {
          goto LABEL_211;
        }
        if (__OFADD__(v21, 1LL)) {
          goto LABEL_212;
        }
        if (v21 + 1 < 1) {
          break;
        }
        ++v39;
        v38 += 3;
        unint64_t v37 = v21;
        if (v33 == v39) {
          goto LABEL_47;
        }
      }

      uint64_t v33 = v39;
      int v21 = v37;
      goto LABEL_64;
    }

    int v21 = v37;
    goto LABEL_47;
  }

  *(void *)a2 = v4;
  *(_BYTE *)(a2 + _Block_object_dispose(va, 8) = v6;
  return result;
}

  if (*((_BYTE *)v29 + 24)) {
    int v21 = v13;
  }
  else {
    int v21 = 1;
  }
  if (v21 != 1)
  {
    _Block_object_dispose(&v39, 8);
    goto LABEL_25;
  }

  BOOL v22 = -[NSFileAccessNode descendantForFileURL:](self->_rootFileAccessNode, "descendantForFileURL:", a4);
  int v23 = (void *)[v22 itemProvider];
  id v24 = v23;
  if (v23)
  {
    v32[1] = 3221225472LL;
    uint64_t v25 = *(_OWORD *)&a3->var0[4];
    uint64_t v33 = *(_OWORD *)a3->var0;
    v32[0] = MEMORY[0x1895F87A8];
    unint64_t v32[2] = __90__NSProgressRegistrar__getRemoteProcessWithAuditToken_canReadItemAtURL_completionHandler___block_invoke;
    v32[3] = &unk_189C99308;
    v32[5] = &v39;
    v32[6] = &v28;
    unint64_t v34 = v25;
    uint64_t v35 = v9;
    v32[4] = a5;
    uint64_t v36 = v13;
    [v23 providePhysicalURLForURL:a4 completionHandler:v32];
  }

  objc_msgSend(v22, "removeSelfIfUseless", v27);
  _Block_object_dispose(&v39, 8);
  if (!v24) {
    goto LABEL_25;
  }
LABEL_29:
  _Block_object_dispose(&v28, 8);
}

  if (!v10) {
    return v5;
  }

  objc_exception_throw(v10);
  return (NSComparisonPredicate *)-[NSComparisonPredicate copyWithZone:](v13, v14, v15);
}

  int v21 = -[objc_class mutableBytes](a1, "mutableBytes") + a3;
  if (v7 < 0x80000
    || (BOOL v22 = (void *)MEMORY[0x1895FD590], ((*MEMORY[0x1895FD590] - 1LL) & (v21 | a5)) != 0)
    || (malloc_default_zone(), malloc_zone_claimed_address()))
  {
    int v23 = (char *)a5;
LABEL_20:
    memmove((void *)v21, v23, v7);
    goto LABEL_21;
  }

  id v24 = v7 & -*v22;
  NSCopyMemoryPages((const void *)a5, (void *)v21, v24);
  v7 -= v24;
  if (v7)
  {
    int v23 = (char *)(a5 + v24);
    v21 += v24;
    goto LABEL_20;
  }

    [v5 appendString:@"n"];
    if ((self->_options & 0x10) == 0) {
      goto LABEL_11;
    }
    goto LABEL_10;
  }

  return v5;
}

    [v6 appendString:@"l"];
    flags = self->_flags;
    if ((flags & 4) == 0)
    {
LABEL_10:
      if ((flags & 0x10) == 0) {
        goto LABEL_11;
      }
      goto LABEL_18;
    }

  v10->_voucher = (OS_voucher *)voucher_copy();
  options = v10->_options;
  if ((options & 0x80000000000LL) == 0)
  {
LABEL_9:
    if ((options & 0x100000000000LL) == 0) {
      goto LABEL_22;
    }
    goto LABEL_18;
  }

  unint64_t v14 = (objc_class *)[v5 classForKeyedArchiver];
  if (v14 || (unint64_t v14 = (objc_class *)objc_opt_class()) != 0LL)
  {
  }

  unint64_t v15 = (uint64_t *)MEMORY[0x189604DB0];
  if (!v5)
  {
    uint64_t v17 = 0;
LABEL_29:
    int v20 = __NSKeyedArchiverUIDCreateCached(*v15, v17, a1);
    addValueToTopContainerE(a1, a2, v20);
    CFRelease(v20);
    return;
  }

  ValueIfPresent = CFDictionaryGetValueIfPresent(*(CFDictionaryRef *)(a1 + 48), v5, (const void **)valuea);
  uint64_t v17 = valuea[0];
  if (ValueIfPresent) {
    uint64_t v18 = LODWORD(valuea[0]) == -1;
  }
  else {
    uint64_t v18 = 1;
  }
  if (!v18) {
    goto LABEL_29;
  }
  if (CFDictionaryGetValueIfPresent(*(CFDictionaryRef *)(a1 + 72), v5, (const void **)valuea))
  {
    CFDictionaryRemoveValue(*(CFMutableDictionaryRef *)(a1 + 72), v5);
    unint64_t v19 = valuea[0];
  }

  else
  {
    [*(id *)(a1 + 40) addObject:@"$null"];
    unint64_t v19 = [*(id *)(a1 + 40) count] - 1;
  }

  int v21 = v19;
  if (a4) {
    CFDictionaryAddValue(*(CFMutableDictionaryRef *)(a1 + 72), v5, (const void *)v19);
  }
  else {
    CFDictionarySetValue(*(CFMutableDictionaryRef *)(a1 + 48), v5, (const void *)v19);
  }
  BOOL v22 = *v15;
  int v23 = __NSKeyedArchiverUIDCreateCached(v22, v21, a1);
  addValueToTopContainerE(a1, a2, v23);
  CFRelease(v23);
  if ((a4 & 1) == 0)
  {
    id v24 = (__objc2_class *)v14;
    if (*class_getName(v14) == 37)
    {
      Name = class_getName(v14);
      id v24 = (__objc2_class *)objc_lookUpClass(Name + 1);
    }

    if (v24)
    {
      uint64_t v26 = (NSString *)[(id)a1 classNameForClass:v24];
      if (v26 || (uint64_t v26 = (NSString *)[(id)objc_opt_class() classNameForClass:v24]) != 0) {
        id v24 = (__objc2_class *)NSClassFromString(v26);
      }
    }

    _NSCoderCheckPotentiallyMangledClassNameAndWarn((uint64_t)v24, 1);
    if (v24 == (__objc2_class *)__NSStringClass)
    {
      if ([v5 length] != 5 || objc_msgSend(v5, "compare:", @"$null")) {
        goto LABEL_48;
      }
    }

    else if (v24 == &OBJC_CLASS___NSNumber || v24 == (__objc2_class *)MEMORY[0x189603F48])
    {
LABEL_48:
      CFArraySetValueAtIndex(*(CFMutableArrayRef *)(a1 + 40), v21, v5);
LABEL_113:
      if (*(void *)(a1 + 24))
      {
        if ((objc_opt_respondsToSelector() & 1) != 0) {
          [*(id *)(a1 + 24) archiver:a1 didEncodeObject:v5];
        }
      }

      return;
    }

    unint64_t v27 = *(void *)(a1 + 88);
    *(void *)(a1 + 8_Block_object_dispose(va, 8) = 0LL;
    uint64_t v28 = (void *)objc_opt_new();
    _CFDictionarySetCapacity();
    [*(id *)(a1 + 32) addObject:v28];
    ++*(void *)(a1 + 112);

    uint64_t v29 = atomic_load((unint64_t *)(a1 + 16));
    atomic_store(v29 & 0xFFFFFFFFFFFFFFFELL, (unint64_t *)(a1 + 16));
    uint64_t v30 = [*(id *)(a1 + 32) count] - 1;
    if (v30 < 0) {
      uint64_t v31 = 0LL;
    }
    else {
      uint64_t v31 = [*(id *)(a1 + 32) objectAtIndexedSubscript:v30];
    }
    [v5 encodeWithCoder:a1];
    uint64_t v32 = [*(id *)(a1 + 32) count] - 1;
    if (v32 < 0) {
      uint64_t v33 = 0LL;
    }
    else {
      uint64_t v33 = (const void *)[*(id *)(a1 + 32) objectAtIndexedSubscript:v32];
    }
    if ((const void *)v31 != v33)
    {
LABEL_110:
      CFArraySetValueAtIndex(*(CFMutableArrayRef *)(a1 + 40), v21, v33);
      v64 = [*(id *)(a1 + 32) count];
      [*(id *)(a1 + 32) removeObjectAtIndex:v64 - 1];
      if (v64 - 1 >= 1)
      {
        v65 = CFGetTypeID((CFTypeRef)[*(id *)(a1 + 32) objectAtIndexedSubscript:v64 - 2]);
        v66 = atomic_load((unint64_t *)(a1 + 16));
        atomic_store(v66 & 0xFFFFFFFFFFFFFFFELL | (v65 == 19), (unint64_t *)(a1 + 16));
      }

      *(void *)(a1 + 8_Block_object_dispose(va, 8) = v27;
      goto LABEL_113;
    }

    if (*class_getName(v14) == 37)
    {
      unint64_t v34 = class_getName(v14);
      unint64_t v14 = objc_lookUpClass(v34 + 1);
    }

    v69 = v27;
    if (v14)
    {
      uint64_t v35 = (NSString *)[(id)a1 classNameForClass:v14];
      if (v35 || (uint64_t v35 = (NSString *)[(id)objc_opt_class() classNameForClass:v14]) != 0)
      {
        unint64_t v14 = NSClassFromString(v35);
        uint64_t v36 = v35;
        if (!v14) {
          goto LABEL_64;
        }
      }

      else
      {
        uint64_t v36 = 0LL;
      }

      v67 = 0;
      CFTypeRef v41 = v14;
LABEL_75:
      _NSCoderCheckPotentiallyMangledClassNameAndWarn((uint64_t)v14, 1);
      BOOL v42 = 0;
      goto LABEL_76;
    }

    uint64_t v36 = 0LL;
LABEL_64:
    unint64_t v37 = *(const __CFDictionary **)(a1 + 80);
    if (!v37) {
      goto LABEL_69;
    }
    uint64_t v38 = (objc_class *)CFDictionaryGetValue(v37, v36);
    if (v38)
    {
      unint64_t v14 = v38;
      Class = object_getClass(v38);
      isMetaClass = class_isMetaClass(Class);
      CFTypeRef v41 = 0LL;
      BOOL v42 = 1;
      v67 = 1;
      if (!isMetaClass) {
        goto LABEL_76;
      }
      goto LABEL_75;
    }

    if (!*(void *)(a1 + 80)) {
LABEL_69:
    }
      *(void *)(a1 + 80) = CFDictionaryCreateMutable( (CFAllocatorRef)*MEMORY[0x189604DD0],  0LL,  MEMORY[0x189604E40],  MEMORY[0x189605250]);
    unint64_t v14 = (objc_class *)objc_opt_new();
    CFDictionarySetValue(*(CFMutableDictionaryRef *)(a1 + 80), v36, v14);

    if (!v14)
    {
      unint64_t v43 = 0;
LABEL_78:
      unint64_t v44 = __NSKeyedArchiverUIDCreateCached(v22, v43, a1);
      addValueToTopContainerE(a1, @"$class", v44);
      CFRelease(v44);

      unint64_t v27 = v69;
      goto LABEL_110;
    }

    CFTypeRef v41 = 0LL;
    BOOL v42 = 1;
    v67 = 1;
LABEL_76:
    v68 = v42;
    if (!CFDictionaryGetValueIfPresent(*(CFDictionaryRef *)(a1 + 48), v14, (const void **)valuea)
      || (unint64_t v43 = valuea[0], LODWORD(valuea[0]) == -1))
    {
      if (CFDictionaryGetValueIfPresent(*(CFDictionaryRef *)(a1 + 72), v14, (const void **)valuea))
      {
        CFDictionaryRemoveValue(*(CFMutableDictionaryRef *)(a1 + 72), v14);
        id v45 = valuea[0];
      }

      else
      {
        [*(id *)(a1 + 40) addObject:@"$null"];
        id v45 = [*(id *)(a1 + 40) count] - 1;
      }

      CFDictionarySetValue(*(CFMutableDictionaryRef *)(a1 + 48), v14, (const void *)v45);
      unint64_t v46 = __NSKeyedArchiverUIDCreateCached(v22, v45, a1);
      addValueToTopContainerE(a1, @"$class", v46);
      CFRelease(v46);
      unint64_t v47 = (void *)objc_opt_new();
      _CFDictionarySetCapacity();
      [*(id *)(a1 + 32) addObject:v47];
      ++*(void *)(a1 + 112);

      unint64_t v48 = atomic_load((unint64_t *)(a1 + 16));
      atomic_store(v48 & 0xFFFFFFFFFFFFFFFELL, (unint64_t *)(a1 + 16));
      if (!v36) {
        uint64_t v36 = NSCopyStringFromClass(v14);
      }
      addValueToTopContainerE(a1, @"$classname", v36);

      if ((v67 & 1) == 0)
      {
        for (i = (__CFArray *)objc_opt_new(); v41; CFTypeRef v41 = (objc_class *)-[objc_class superclass](v41, "superclass"))
        {
          uint64_t v50 = NSCopyStringFromClass(v41);
          CFArrayAppendValue(i, v50);
        }

        addValueToTopContainerE(a1, @"$classes", i);
      }

      if ((v68 & 1) != 0) {
        v51 = 0LL;
      }
      else {
        v51 = (void *)-[objc_class classFallbacksForKeyedArchiver](v14, "classFallbacksForKeyedArchiver");
      }
      unint64_t v27 = v69;
      if ([v51 count])
      {
        v73 = 0u;
        v74 = 0u;
        v71 = 0u;
        v72 = 0u;
        id v52 = [v51 countByEnumeratingWithState:&v71 objects:valuea count:16];
        if (v52)
        {
          uint64_t v53 = v52;
          v54 = *(void *)v72;
          do
          {
            for (j = 0LL; j != v53; ++j)
            {
              if (*(void *)v72 != v54) {
                objc_enumerationMutation(v51);
              }
              v56 = NSClassFromString(*(NSString **)(*((void *)&v71 + 1) + 8 * j));
              if (v56) {
                _NSCoderCheckPotentiallyMangledClassNameAndWarn((uint64_t)v56, 1);
              }
            }

            uint64_t v53 = [v51 countByEnumeratingWithState:&v71 objects:valuea count:16];
          }

          while (v53);
        }

        addValueToTopContainerE(a1, @"$classhints", v51);
        unint64_t v27 = v69;
      }

      v57 = *(__CFArray **)(a1 + 40);
      unint64_t v58 = [*(id *)(a1 + 32) count] - 1;
      if (v58 < 0) {
        int v59 = 0LL;
      }
      else {
        int v59 = (const void *)[*(id *)(a1 + 32) objectAtIndexedSubscript:v58];
      }
      CFArraySetValueAtIndex(v57, v45, v59);
      uint64_t v60 = [*(id *)(a1 + 32) count];
      [*(id *)(a1 + 32) removeObjectAtIndex:v60 - 1];
      if (v60 - 1 >= 1)
      {
        v61 = CFGetTypeID((CFTypeRef)[*(id *)(a1 + 32) objectAtIndexedSubscript:v60 - 2]);
        v62 = atomic_load((unint64_t *)(a1 + 16));
        if (v61 == 19) {
          v63 = v62 | 1;
        }
        else {
          v63 = v62 & 0xFFFFFFFFFFFFFFFELL;
        }
        atomic_store(v63, (unint64_t *)(a1 + 16));
      }

      goto LABEL_110;
    }

    goto LABEL_78;
  }

      if (a11 && v19 + 3 < a2 && a12)
      {
        uint64_t v29 = *(unsigned __int8 *)(a1 + v19 + 3);
        uint64_t v31 = *(_BYTE *)(v19 + a1 + 1) == 36 && *(_BYTE *)(v19 + a1 + 2) == 40;
        uint64_t v32 = a11;
        uint64_t v33 = a12;
        while (!v31 || (_DWORD)v29 != *v32)
        {
          ++v32;
          if (!--v33) {
            goto LABEL_29;
          }
        }

        v62 = 10276;
        v63 = v29;
        v19 += 4LL;
        [a17 appendByte1:27 byte2:36 byte3:40 byte4:v29];
        LOWORD(v60) = 9243;
        BYTE2(v60) = 40;
        BOOL v22 = 1;
        int v21 = 4LL;
        HIBYTE(v60) = v29;
LABEL_49:
        ++v54;
        v57 = 1;
        v56 = v21;
        goto LABEL_3;
      }
    }

  if (!v12) {
    return v5;
  }

  objc_exception_throw(v12);
  return (NSSubqueryExpression *)-[NSSubqueryExpression copyWithZone:](v15, v16, v17);
}

      size_t v11 = 0LL;
      return [v8 parser:v7 foundNotationDeclarationWithName:Value publicID:v10 systemID:v11];
    }
  }

  return result;
}

    if ((_DWORD)v11) {
      goto LABEL_17;
    }
LABEL_24:
    unint64_t v7 = 0LL;
LABEL_25:

    return v7;
  }

  return 1LL;
}

  if ((unint64_t)(v5 - 1) <= 4)
  {
    unint64_t v14 = &unk_189D1EDC8;
    unint64_t v15 = v5;
LABEL_30:
    uint64_t v8 = (const __CFString *)[v14 objectAtIndex:v15];
    goto LABEL_31;
  }

  if ((unint64_t)(v5 - 6) <= 0x79)
  {
    unint64_t v14 = &unk_189D1EDE0;
    unint64_t v15 = 6LL;
    goto LABEL_30;
  }

  if ((unint64_t)(v5 - 128) <= 0x13)
  {
    unint64_t v14 = &unk_189D1EDF8;
    unint64_t v15 = 8LL;
    goto LABEL_30;
  }

  if ((unint64_t)(v5 - 160) <= 0x1B)
  {
    unint64_t v14 = &unk_189D1EE10;
    unint64_t v15 = 11LL;
    goto LABEL_30;
  }

  if ((unint64_t)(v5 - 192) <= 0xD)
  {
    unint64_t v14 = &unk_189D1EE28;
    unint64_t v15 = 12LL;
    goto LABEL_30;
  }

  if ((unint64_t)(v5 - 208) <= 2)
  {
    unint64_t v14 = &unk_189D1EE40;
    unint64_t v15 = 29LL;
    goto LABEL_30;
  }

  if ((unint64_t)(v5 - 224) <= 0x18)
  {
    unint64_t v15 = v5 - 217;
    unint64_t v14 = &unk_189D1EE58;
    goto LABEL_30;
  }

  uint64_t v8 = 0LL;
LABEL_31:
  if (!v8) {
    uint64_t v8 = @"Latn";
  }
  return (NSOrthography *)objc_msgSend( a1,  "_orthographyWithDominantScript:languageMap:",  v8,  objc_msgSend( MEMORY[0x189603F68],  "dictionaryWithObject:forKey:",  objc_msgSend(MEMORY[0x189603F18], "arrayWithObject:", language),  v8));
}

  if (!v10) {
    return v5;
  }

  objc_exception_throw(v10);
  return (NSTernaryExpression *)-[NSTernaryExpression copyWithZone:](v13, v14, v15);
}

  if ([a2 isDirectory])
  {
    bzero(__b, 0x3E9uLL);
    else {
      unint64_t v15 = 4 * a4;
    }
    if (v15) {
      memset(__b, 32, v15);
    }
    __b[v15] = 0;
    [a1 appendFormat:@"%@Directory %@%@ <%p>: %@ children.  %@ icon.\n", +[NSString stringWithCString:encoding:](NSString, "stringWithCString:encoding:", __b, 4), v11, v12, a2, +[NSString stringWithFormat:]( NSString, "stringWithFormat:", @"%lu", objc_msgSend((id)objc_msgSend(a2, "fileWrappers"), "count")), @"No"];
    if (v14) {
      [a1 appendFormat:@"%@\n", v14];
    }
    uint64_t v16 = (void *)[a2 fileWrappers];
    uint64_t v17 = (void *)[v16 keyEnumerator];
    uint64_t result = [v17 nextObject];
    if (result)
    {
      unint64_t v19 = result;
      do
      {
        _NSDescribeFileContentsInstance(a1, [v16 objectForKey:v19], v19, a4 + 1, a5);
        uint64_t result = [v17 nextObject];
        unint64_t v19 = result;
      }

      while (result);
    }

    return result;
  }

  if ([a2 isSymbolicLink])
  {
    bzero(__b, 0x3E9uLL);
    else {
      int v20 = 4 * a4;
    }
    if (v20) {
      memset(__b, 32, v20);
    }
    __b[v20] = 0;
    uint64_t result = [a1 appendFormat:@"%@Symbolic link %@%@ <%p>: destination '%@'.  %@ icon.\n", +[NSString stringWithCString:encoding:](NSString, "stringWithCString:encoding:", __b, 4), v11, v12, a2, objc_msgSend(a2, "symbolicLinkDestinationURL"), @"No"];
LABEL_42:
    if (v14) {
      return [a1 appendFormat:@"%@", v14, v23, v24, v25];
    }
    return result;
  }

  int v21 = [a2 isRegularFile];
  else {
    BOOL v22 = 4 * a4;
  }
  if (v21)
  {
    bzero(__b, 0x3E9uLL);
    if (v22) {
      memset(__b, 32, v22);
    }
    __b[v22] = 0;
    uint64_t result = [a1 appendFormat:@"%@Regular file %@%@ <%p>: length %lu.  %@ icon.\n", +[NSString stringWithCString:encoding:](NSString, "stringWithCString:encoding:", __b, 4), v11, v12, a2, objc_msgSend((id)objc_msgSend(a2, "regularFileContents"), "length"), @"No"];
    goto LABEL_42;
  }

  bzero(__b, 0x3E9uLL);
  if (v22) {
    memset(__b, 32, v22);
  }
  __b[v22] = 0;
  return [a1 appendFormat:@"%@!!! %@%@ <%p> is not a directory, symlink, or file! So what the hell is it?\n", +[NSString stringWithCString:encoding:](NSString, "stringWithCString:encoding:", __b, 4), v11, v12, a2];
}

  int v21 = (const char *)objc_msgSend( (id)objc_msgSend(v8, "stringByDeletingLastPathComponent"),  "fileSystemRepresentation");
  if ((v16 & 1) != 0)
  {
LABEL_61:
    if (v14)
    {
      if (*__error())
      {
        if (a5)
        {
          id v45 = __error();
          unint64_t v44 = 0;
          unint64_t v15 = 0;
          *a5 = _NSErrorWithFilePathErrnoVariantAndExtraUserInfo(*v45, (uint64_t)a3, 1, 0LL, 0LL);
          if (v11) {
            goto LABEL_75;
          }
        }

        else
        {
          unint64_t v44 = 0;
          unint64_t v15 = 0;
          if (v11) {
            goto LABEL_75;
          }
        }
      }

      else
      {
        unint64_t v44 = 0;
        if (v11) {
          goto LABEL_75;
        }
      }
    }

    else
    {
      unint64_t v44 = 1;
      if (v11) {
        goto LABEL_75;
      }
    }

  objc_exception_throw((id)[v17 exceptionWithName:v18 reason:v19 userInfo:0]);
  return (NSFileMultipleAccessClaim *)__43__NSFileMultipleAccessClaim_initWithCoder___block_invoke(v20, v21);
}

CFArrayRef newJSONValue(NSString *a1, id *a2)
{
  uint64_t v113 = *MEMORY[0x1895F89C0];
  if (a1[4].super.isa >= (Class)0x201)
  {
    if (a2)
    {
      Class isa = a1[3].super.isa;
      Class v5 = a1[6].super.isa;
      BOOL v6 = isa >= v5;
      int64_t v7 = (char *)isa - (char *)v5;
      if (v6) {
        int64_t v8 = v7;
      }
      else {
        int64_t v8 = 0LL;
      }
      unsigned int v9 = -[NSString initWithFormat:]( objc_alloc(&OBJC_CLASS___NSString),  "initWithFormat:",  @"%@ around line %lu, column %lu.",  @"Too many nested arrays or dictionaries",  a1[5].super.isa,  v8);
      unint64_t v10 = -[NSNumber initWithUnsignedInteger:]( objc_alloc(&OBJC_CLASS___NSNumber),  "initWithUnsignedInteger:",  a1[3].super.isa);
      v111 = @"NSDebugDescription";
      v112 = @"NSJSONSerializationErrorIndex";
      __srUChar32 c = v9;
      v108 = v10;
      *a2 = +[NSError errorWithDomain:code:userInfo:]( NSError,  "errorWithDomain:code:userInfo:",  @"NSCocoaErrorDomain",  3840,  [MEMORY[0x189603F68] dictionaryWithObjects:&__src forKeys:&v111 count:2]);
    }

    return 0LL;
  }

  Class v12 = a1->super.isa;
  unint64_t v14 = (unint64_t)a1[2].super.isa;
  Class v13 = a1[3].super.isa;
  else {
    int v15 = *((unsigned __int8 *)&v13->isa + (void)v12 + 1);
  }
  int v16 = *((unsigned __int8 *)&v13->isa + (void)v12);
  unint64_t v17 = (unint64_t)&v13->isa + 2;
  if (v14 <= v17) {
    int v18 = 0;
  }
  else {
    int v18 = *((unsigned __int8 *)&v12->isa + v17);
  }
  id v106 = 0LL;
  unint64_t v19 = (void *)MEMORY[0x186E1FF60]();
  if (v16 == 34) {
    goto LABEL_26;
  }
  if (v16 == 123)
  {
    ++a1[4].super.isa;
    int v23 = (const __CFArray *)newJSONObject((uint64_t)a1, 0, &v106);
LABEL_23:
    CFArrayRef v11 = v23;
    goto LABEL_33;
  }

  if (v16 != 91)
  {
    Class v24 = a1[1].super.isa;
    if ((v24 & 8) != 0 && v16 == 39)
    {
LABEL_26:
      newJSONString(a1, 0, &v106);
LABEL_27:
      CFArrayRef v11 = v25;
      goto LABEL_34;
    }

    if ((v16 - 102) <= 0xE && ((1 << (v16 - 102)) & 0x4101) != 0)
    {
      Class v36 = a1[3].super.isa;
      Class v37 = a1->super.isa;
      int v38 = *((unsigned __int8 *)&a1->super.isa->isa + (unint64_t)v36);
      switch(v38)
      {
        case 't':
          v55 = (objc_class *)((char *)&v36->isa + 3);
          if (a1[2].super.isa > (Class)((char *)&v36->isa + 3))
          {
            a1[3].super.Class isa = v55;
            if (*((_BYTE *)&v37->isa + (void)v36 + 1) == 114
              && *((_BYTE *)&v37->isa + (void)v36 + 2) == 117
              && *((_BYTE *)&v55->isa + (void)v37) == 101)
            {
              uint64_t v40 = (void *)*MEMORY[0x189604DE8];
              uint64_t v41 = (uint64_t)&v36->isa + 4;
              goto LABEL_89;
            }

            a1[3].super.Class isa = v36;
            Class v64 = a1[6].super.isa;
            BOOL v6 = v36 >= v64;
            int64_t v65 = (char *)v36 - (char *)v64;
            if (v6) {
              int64_t v66 = v65;
            }
            else {
              int64_t v66 = 0LL;
            }
            uint64_t v60 = -[NSString initWithFormat:]( objc_alloc(&OBJC_CLASS___NSString),  "initWithFormat:",  @"%@ around line %lu, column %lu.",  @"Something looked like a 'true' but wasn't",  a1[5].super.isa,  v66);
LABEL_118:
            v70 = v60;
            v71 = -[NSNumber initWithUnsignedInteger:]( objc_alloc(&OBJC_CLASS___NSNumber),  "initWithUnsignedInteger:",  a1[3].super.isa);
            v111 = @"NSDebugDescription";
            v112 = @"NSJSONSerializationErrorIndex";
            __srUChar32 c = v70;
            v108 = v71;
            id v106 = +[NSError errorWithDomain:code:userInfo:]( NSError,  "errorWithDomain:code:userInfo:",  @"NSCocoaErrorDomain",  3840,  [MEMORY[0x189603F68] dictionaryWithObjects:&__src forKeys:&v111 count:2]);

            CFArrayRef v11 = 0LL;
            goto LABEL_34;
          }

          break;
        case 'n':
          v56 = (objc_class *)((char *)&v36->isa + 3);
          if (a1[2].super.isa > (Class)((char *)&v36->isa + 3))
          {
            a1[3].super.Class isa = v56;
            if (*((_BYTE *)&v37->isa + (void)v36 + 1) == 117
              && *((_BYTE *)&v37->isa + (void)v36 + 2) == 108
              && *((_BYTE *)&v56->isa + (void)v37) == 108)
            {
              uint64_t v40 = (void *)[MEMORY[0x189603FE8] null];
              uint64_t v41 = (uint64_t)&a1[3].super.isa->isa + 1;
              goto LABEL_89;
            }

            a1[3].super.Class isa = v36;
            Class v67 = a1[6].super.isa;
            BOOL v6 = v36 >= v67;
            int64_t v68 = (char *)v36 - (char *)v67;
            if (v6) {
              int64_t v69 = v68;
            }
            else {
              int64_t v69 = 0LL;
            }
            uint64_t v60 = -[NSString initWithFormat:]( objc_alloc(&OBJC_CLASS___NSString),  "initWithFormat:",  @"%@ around line %lu, column %lu.",  @"Something looked like a 'null' but wasn't",  a1[5].super.isa,  v69);
            goto LABEL_118;
          }

          break;
        case 'f':
          unsigned int v39 = (objc_class *)((char *)&v36->isa + 4);
          if (a1[2].super.isa > (Class)((char *)&v36->isa + 4))
          {
            a1[3].super.Class isa = v39;
            if (*((_BYTE *)&v37->isa + (void)v36 + 1) == 97
              && *((_BYTE *)&v37->isa + (void)v36 + 2) == 108
              && *((_BYTE *)&v37->isa + (void)v36 + 3) == 115
              && *((_BYTE *)&v39->isa + (void)v37) == 101)
            {
              uint64_t v40 = (void *)*MEMORY[0x189604DE0];
              uint64_t v41 = (uint64_t)&v36->isa + 5;
LABEL_89:
              a1[3].super.Class isa = (Class)v41;
LABEL_95:
              uint64_t v25 = v40;
              goto LABEL_27;
            }

            a1[3].super.Class isa = v36;
            Class v61 = a1[6].super.isa;
            BOOL v6 = v36 >= v61;
            int64_t v62 = (char *)v36 - (char *)v61;
            if (v6) {
              int64_t v63 = v62;
            }
            else {
              int64_t v63 = 0LL;
            }
            uint64_t v60 = -[NSString initWithFormat:]( objc_alloc(&OBJC_CLASS___NSString),  "initWithFormat:",  @"%@ around line %lu, column %lu.",  @"Something looked like a 'false' but wasn't",  a1[5].super.isa,  v63);
            goto LABEL_118;
          }

          break;
        default:
          uint64_t v40 = 0LL;
          goto LABEL_95;
      }

      Class v57 = a1[6].super.isa;
      BOOL v6 = v36 >= v57;
      int64_t v58 = (char *)v36 - (char *)v57;
      if (v6) {
        int64_t v59 = v58;
      }
      else {
        int64_t v59 = 0LL;
      }
      uint64_t v60 = -[NSString initWithFormat:]( objc_alloc(&OBJC_CLASS___NSString),  "initWithFormat:",  @"%@ around line %lu, column %lu.",  @"Unexpected end of file during JSON parse.",  a1[5].super.isa,  v59);
      goto LABEL_118;
    }

    if ((v16 - 48) <= 9)
    {
LABEL_161:
      uint64_t v25 = (const __CFArray *)newJSON5HexNumber(a1, &v106);
      goto LABEL_27;
    }

    if (v16 == 45)
    {
    }

    else if ((v24 & 8) != 0 && v16 == 43)
    {
      Class v72 = a1[3].super.isa;
      if (a1[2].super.isa <= (Class)((char *)&v72->isa + 1))
      {
        Class v88 = a1[6].super.isa;
        BOOL v6 = v72 >= v88;
        int64_t v89 = (char *)v72 - (char *)v88;
        if (v6) {
          int64_t v90 = v89;
        }
        else {
          int64_t v90 = 0LL;
        }
        v91 = -[NSString initWithFormat:]( objc_alloc(&OBJC_CLASS___NSString),  "initWithFormat:",  @"%@ around line %lu, column %lu.",  @"Unexpected end of file during JSON parse.",  a1[5].super.isa,  v90);
        v92 = -[NSNumber initWithUnsignedInteger:]( objc_alloc(&OBJC_CLASS___NSNumber),  "initWithUnsignedInteger:",  a1[3].super.isa);
        v111 = @"NSDebugDescription";
        v112 = @"NSJSONSerializationErrorIndex";
        __srUChar32 c = v91;
        v108 = v92;
        id v106 = +[NSError errorWithDomain:code:userInfo:]( NSError,  "errorWithDomain:code:userInfo:",  @"NSCocoaErrorDomain",  3840,  [MEMORY[0x189603F68] dictionaryWithObjects:&__src forKeys:&v111 count:2]);
      }

      else
      {
        a1[3].super.Class isa = (Class)((char *)&v72->isa + 1);
      }

      if (v15 == 48 && (v18 & 0xFFFFFFDF) == 0x58) {
        goto LABEL_161;
      }
      if (v15 != 78 && v15 != 73) {
        goto LABEL_78;
      }
    }

    else if (((v24 & 8) == 0 || v16 != 73) && ((v24 & 8) == 0 || v16 != 78))
    {
      if ((v24 & 8) == 0 || v16 != 46)
      {
        Class v73 = a1[3].super.isa;
        Class v74 = a1[6].super.isa;
        BOOL v6 = v73 >= v74;
        int64_t v75 = (char *)v73 - (char *)v74;
        if (v6) {
          int64_t v76 = v75;
        }
        else {
          int64_t v76 = 0LL;
        }
        uint64_t v60 = -[NSString initWithFormat:]( objc_alloc(&OBJC_CLASS___NSString),  "initWithFormat:",  @"%@ around line %lu, column %lu.",  @"Invalid value",  a1[5].super.isa,  v76);
        goto LABEL_118;
      }

LABEL_78:
      uint64_t v25 = (const __CFArray *)newJSONNumber((uint64_t)a1, &v106);
      goto LABEL_27;
    }

    uint64_t v25 = (const __CFArray *)newJSON5InfinityOrNaN((uint64_t *)a1, &v106);
    goto LABEL_27;
  }

  ++a1[4].super.isa;
  Class v20 = a1[3].super.isa;
  if (a1[2].super.isa <= (Class)((char *)&v20->isa + 1))
  {
    Class v26 = a1[6].super.isa;
    BOOL v6 = v20 >= v26;
    int64_t v27 = (char *)v20 - (char *)v26;
    if (v6) {
      int64_t v28 = v27;
    }
    else {
      int64_t v28 = 0LL;
    }
    uint64_t v29 = -[NSString initWithFormat:]( objc_alloc(&OBJC_CLASS___NSString),  "initWithFormat:",  @"%@ around line %lu, column %lu.",  @"Unexpected end of file during JSON parse.",  a1[5].super.isa,  v28);
    uint64_t v30 = -[NSNumber initWithUnsignedInteger:]( objc_alloc(&OBJC_CLASS___NSNumber),  "initWithUnsignedInteger:",  a1[3].super.isa);
    v111 = @"NSDebugDescription";
    v112 = @"NSJSONSerializationErrorIndex";
    __srUChar32 c = v29;
    v108 = v30;
    id v106 = +[NSError errorWithDomain:code:userInfo:]( NSError,  "errorWithDomain:code:userInfo:",  @"NSCocoaErrorDomain",  3840,  [MEMORY[0x189603F68] dictionaryWithObjects:&__src forKeys:&v111 count:2]);

    goto LABEL_32;
  }

  a1[3].super.Class isa = (Class)((char *)&v20->isa + 1);
  if (!skipJSONWhitespace((uint64_t)a1, &v106, 0))
  {
LABEL_32:
    CFArrayRef v11 = 0LL;
    goto LABEL_33;
  }

  Class v21 = a1[3].super.isa;
  if (*((_BYTE *)&a1->super.isa->isa + (unint64_t)v21) == 93)
  {
    a1[3].super.Class isa = (Class)((char *)&v21->isa + 1);
    else {
      BOOL v22 = (objc_class *)MEMORY[0x189603F18];
    }
    int v23 = (const __CFArray *)objc_alloc_init(v22);
    goto LABEL_23;
  }

  v105 = v19;
  size_t v42 = 0LL;
  p_srUChar32 c = &__src;
  CFIndex v44 = 1LL;
  unint64_t v45 = 32LL;
  char v46 = 1;
  do
  {
    unint64_t v47 = v44 - 1;
    CFArrayRef v11 = (CFArrayRef)newJSONValue(a1, &v106);
    if (!v11)
    {
      char v53 = v46;
LABEL_147:
      CFIndex v44 = v47;
      goto LABEL_148;
    }

    if ((skipJSONWhitespace((uint64_t)a1, &v106, 0) & 1) == 0)
    {
      char v53 = v46;
LABEL_145:

LABEL_146:
      CFArrayRef v11 = 0LL;
      goto LABEL_147;
    }

    Class v48 = a1[3].super.isa;
    int v49 = *((unsigned __int8 *)&a1->super.isa->isa + (unint64_t)v48);
    if (v49 != 44)
    {
      if (v49 == 93)
      {
        int v50 = 1;
        goto LABEL_62;
      }

      char v53 = v46;
      Class v77 = a1[6].super.isa;
      BOOL v6 = v48 >= v77;
      int64_t v78 = (char *)v48 - (char *)v77;
      if (v6) {
        int64_t v79 = v78;
      }
      else {
        int64_t v79 = 0LL;
      }
      v80 = -[NSString initWithFormat:]( objc_alloc(&OBJC_CLASS___NSString),  "initWithFormat:",  @"%@ around line %lu, column %lu.",  @"Badly formed array",  a1[5].super.isa,  v79);
      goto LABEL_144;
    }

    if (a1[2].super.isa <= (Class)((char *)&v48->isa + 1))
    {
      char v53 = v46;
      Class v81 = a1[6].super.isa;
      BOOL v6 = v48 >= v81;
      int64_t v82 = (char *)v48 - (char *)v81;
      if (v6) {
        int64_t v83 = v82;
      }
      else {
        int64_t v83 = 0LL;
      }
      v80 = -[NSString initWithFormat:]( objc_alloc(&OBJC_CLASS___NSString),  "initWithFormat:",  @"%@ around line %lu, column %lu.",  @"Unexpected end of file during JSON parse.",  a1[5].super.isa,  v83);
LABEL_144:
      v84 = v80;
      v85 = -[NSNumber initWithUnsignedInteger:]( objc_alloc(&OBJC_CLASS___NSNumber),  "initWithUnsignedInteger:",  a1[3].super.isa);
      v109 = @"NSDebugDescription";
      v110 = @"NSJSONSerializationErrorIndex";
      v111 = (const __CFString *)v84;
      v112 = (const __CFString *)v85;
      id v106 = +[NSError errorWithDomain:code:userInfo:]( NSError,  "errorWithDomain:code:userInfo:",  @"NSCocoaErrorDomain",  3840,  [MEMORY[0x189603F68] dictionaryWithObjects:&v111 forKeys:&v109 count:2]);

      goto LABEL_145;
    }

    int v50 = 0;
    a1[3].super.Class isa = (Class)((char *)&v48->isa + 1);
LABEL_62:
    if (v47 < v45) {
      goto LABEL_68;
    }
    v45 *= 2LL;
    if ((v46 & 1) == 0)
    {
      NSReallocateObjectArray(p_src, v45);
      if (v52)
      {
        char v46 = 0;
        p_srUChar32 c = v52;
        goto LABEL_68;
      }

      free(p_src);

      Class v99 = a1[3].super.isa;
      Class v100 = a1[6].super.isa;
      BOOL v6 = v99 >= v100;
      int64_t v101 = (char *)v99 - (char *)v100;
      if (v6) {
        int64_t v102 = v101;
      }
      else {
        int64_t v102 = 0LL;
      }
      v103 = -[NSString initWithFormat:]( objc_alloc(&OBJC_CLASS___NSString),  "initWithFormat:",  @"%@ around line %lu, column %lu.",  @"Memory exhausted during parse of array.",  a1[5].super.isa,  v102);
      v104 = -[NSNumber initWithUnsignedInteger:]( objc_alloc(&OBJC_CLASS___NSNumber),  "initWithUnsignedInteger:",  a1[3].super.isa);
      v109 = @"NSDebugDescription";
      v110 = @"NSJSONSerializationErrorIndex";
      v111 = (const __CFString *)v103;
      v112 = (const __CFString *)v104;
      id v106 = +[NSError errorWithDomain:code:userInfo:]( NSError,  "errorWithDomain:code:userInfo:",  @"NSCocoaErrorDomain",  3840,  [MEMORY[0x189603F68] dictionaryWithObjects:&v111 forKeys:&v109 count:2]);

      char v53 = 0;
      goto LABEL_146;
    }

    v51 = (NSString **)NSAllocateObjectArray(v45);
    if (!v51)
    {

      Class v93 = a1[3].super.isa;
      Class v94 = a1[6].super.isa;
      BOOL v6 = v93 >= v94;
      int64_t v95 = (char *)v93 - (char *)v94;
      if (v6) {
        int64_t v96 = v95;
      }
      else {
        int64_t v96 = 0LL;
      }
      v97 = -[NSString initWithFormat:]( objc_alloc(&OBJC_CLASS___NSString),  "initWithFormat:",  @"%@ around line %lu, column %lu.",  @"Memory exhausted during parse of array.",  a1[5].super.isa,  v96);
      v98 = -[NSNumber initWithUnsignedInteger:]( objc_alloc(&OBJC_CLASS___NSNumber),  "initWithUnsignedInteger:",  a1[3].super.isa);
      v109 = @"NSDebugDescription";
      v110 = @"NSJSONSerializationErrorIndex";
      v111 = (const __CFString *)v97;
      v112 = (const __CFString *)v98;
      id v106 = +[NSError errorWithDomain:code:userInfo:]( NSError,  "errorWithDomain:code:userInfo:",  @"NSCocoaErrorDomain",  3840,  [MEMORY[0x189603F68] dictionaryWithObjects:&v111 forKeys:&v109 count:2]);

      CFArrayRef v11 = 0LL;
      char v53 = 1;
      CFIndex v44 = v47;
LABEL_148:
      unint64_t v19 = v105;
      if (!v44) {
        goto LABEL_151;
      }
      goto LABEL_149;
    }

    p_srUChar32 c = v51;
    memmove(v51, &__src, v42 * 8);
    char v46 = 0;
LABEL_68:
    p_src[v42] = (NSString *)v11;
    if (!skipJSONWhitespace((uint64_t)a1, &v106, 0))
    {
      char v53 = v46;
      CFArrayRef v11 = 0LL;
      goto LABEL_148;
    }

    ++v44;
    ++v42;
  }

  while (((*((_BYTE *)&a1->super.isa->isa + (unint64_t)a1[3].super.isa) != 93) & ~v50) != 0);
  char v53 = v46;
  --v44;
  if (((uint64_t)a1[1].super.isa & 1) != 0)
  {
    CFArrayRef v11 = (CFArrayRef)[objc_alloc(MEMORY[0x189603FA8]) initWithObjects:p_src count:v44];
    goto LABEL_148;
  }

  unint64_t v19 = v105;
  else {
    CFArrayRef v54 = CFArrayCreate((CFAllocatorRef)*MEMORY[0x189604DB0], (const void **)p_src, v44, MEMORY[0x189605228]);
  }
  CFArrayRef v11 = v54;
  if (v44)
  {
LABEL_149:
    v86 = (void **)p_src;
    do
    {
      v87 = *v86++;

      --v44;
    }

    while (v44);
  }

      swift_unknownObjectRelease();
      swift_unknownObjectRelease();
      unint64_t v19 = v17 & 0xFFFFFFFFFFFFF0FFLL | (v28 << 8);
      goto LABEL_79;
    }

    __int128 v2 = 0LL;
LABEL_80:
    Class v20 = v101 - v2;
    if (__OFSUB__(v101, v2)) {
      goto LABEL_281;
    }
    __int128 v2 = v101;
LABEL_82:
    if (v13 == v20) {
      break;
    }
    if (v107 != v1[11]) {
      goto LABEL_267;
    }
    if (v10)
    {
      unint64_t v34 = (void *)(v10 + 24 * ((v9 >> ((4 * *(_BYTE *)(v10 + 18) + 8) & 0x3C)) & 0xF));
      Class v5 = v34[4];
      uint64_t v35 = v34[5];
      Class v36 = v34[3];
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain_n();
    }

    else
    {
      Class v37 = v1[8];
      swift_unknownObjectRetain();
      specialized Rope._Node.subscript.getter(v9, v37);
      Class v5 = v38;
      uint64_t v35 = v39;
      uint64_t result = (void *)swift_unknownObjectRelease();
      if (v107 != v1[11]) {
        goto LABEL_288;
      }
      uint64_t v40 = v1[8];
      swift_unknownObjectRetain();
      Class v36 = specialized Rope._Node.subscript.getter(v9, v40);
      __int128 v2 = v101;
      swift_unknownObjectRelease();
    }

    swift_bridgeObjectRelease();
    uint64_t result = (void *)swift_bridgeObjectRelease();
    uint64_t v41 = v13 + v36;
    if (__OFADD__(v13, v36)) {
      goto LABEL_268;
    }
    if (v106 >= v13) {
      size_t v42 = v13;
    }
    else {
      size_t v42 = v106;
    }
    if (v13 < v2) {
      size_t v42 = v2;
    }
    if (v41 <= v2) {
      unint64_t v43 = v2;
    }
    else {
      unint64_t v43 = v13 + v36;
    }
    if (v106 >= v41) {
      CFIndex v44 = v43;
    }
    else {
      CFIndex v44 = v106;
    }
    if (v42 == v44) {
      goto LABEL_269;
    }
    unint64_t v45 = v44 - v42;
    if (__OFSUB__(v44, v42)) {
      goto LABEL_270;
    }
    char v46 = v1[8];
    unint64_t v47 = v1[11];
    v109 = v107;
    v110 = v9;
    v111 = v10;
    if (__OFADD__(v104, 1LL)) {
      goto LABEL_271;
    }
    if (v107 != v47) {
      goto LABEL_272;
    }
    Class v100 = v45;
    ++v104;
    if (v10)
    {
      Class v48 = *(void *)(v10 + 24 * ((v9 >> ((4 * *(_BYTE *)(v10 + 18) + 8) & 0x3C)) & 0xF) + 24);
      swift_unknownObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_retain();
    }

    else
    {
      swift_retain();
      swift_unknownObjectRetain();
      Class v48 = specialized Rope._Node.subscript.getter(v9, v46);
    }

    swift_bridgeObjectRelease();
    uint64_t result = (void *)swift_bridgeObjectRelease();
    Class v12 = __OFADD__(v13, v48);
    v13 += v48;
    if (v12) {
      goto LABEL_273;
    }
    if (v46)
    {
      int v49 = ((-15LL << ((4 * *(_BYTE *)(v46 + 18) + 8) & 0x3C)) - 1) & (unint64_t)*(unsigned __int8 *)(v46 + 18) | ((unint64_t)*(unsigned __int16 *)(v46 + 16) << ((4 * *(_BYTE *)(v46 + 18) + 8) & 0x3C));
      uint64_t result = (void *)swift_unknownObjectRetain();
    }

    else
    {
      int v49 = 0LL;
    }

    __int128 v2 = v101;
    if (v9 >= v49) {
      goto LABEL_274;
    }
    if (v10)
    {
      int v50 = (4 * *(_BYTE *)(v10 + 18) + 8) & 0x3C;
      v51 = ((v9 >> v50) & 0xF) + 1;
      if (v51 < *(unsigned __int16 *)(v10 + 16))
      {
        unsigned int v9 = (v51 << v50) | ((-15LL << v50) - 1) & v9;
        uint64_t result = (void *)swift_unknownObjectRelease_n();
        goto LABEL_124;
      }
    }

    id v52 = *(unsigned __int8 *)(v46 + 18);
    char v53 = (4 * v52 + 8) & 0x3C;
    CFArrayRef v54 = (v9 >> v53) & 0xF;
    v108 = v54;
    if (v52)
    {
      swift_unknownObjectRetain();
      v55 = specialized closure #1 in Rope._Node.formSuccessor(of:)(v46 + 24, &v108, (uint64_t)&v109, v46, v52);
      uint64_t result = (void *)swift_unknownObjectRelease();
      if ((v55 & 1) != 0)
      {
        uint64_t result = (void *)swift_unknownObjectRelease_n();
        unsigned int v9 = v110;
        v107 = v109;
        unint64_t v10 = v111;
        goto LABEL_124;
      }
    }

    else
    {
      v56 = v54 + 1;
      if (v54 + 1 < (unint64_t)*(unsigned __int16 *)(v46 + 16))
      {
        uint64_t result = (void *)swift_unknownObjectRelease_n();
        unsigned int v9 = (v56 << v53) | ((-15LL << v53) - 1) & v9;
        unint64_t v10 = v46;
        goto LABEL_124;
      }
    }

    if (v46)
    {
      Class v57 = *(unsigned __int8 *)(v46 + 18);
      int64_t v58 = *(unsigned __int16 *)(v46 + 16);
      uint64_t result = (void *)swift_unknownObjectRelease_n();
      unsigned int v9 = ((-15LL << ((4 * v57 + 8) & 0x3C)) - 1) & v57 | (unint64_t)(v58 << ((4 * v57 + 8) & 0x3C));
    }

    else
    {
      unsigned int v9 = 0LL;
    }

    unint64_t v10 = 0LL;
    v109 = v107;
LABEL_124:
    if (v13 >= v106)
    {
      int64_t v59 = v1[8];
      if (v101 != v106)
      {
        v107 = v1[11];
        if (v59)
        {
          Class v13 = v1[10];
          v104 = v1[9];
          Class v73 = *(unsigned __int8 *)(v59 + 18);
          Class v74 = *(unsigned __int16 *)(v59 + 16);
          swift_release();
          unint64_t v10 = 0LL;
          unsigned int v9 = ((-15LL << ((4 * v73 + 8) & 0x3C)) - 1) & v73 | (unint64_t)(v74 << ((4 * v73 + 8) & 0x3C));
        }

        else
        {
          swift_release();
          unsigned int v9 = 0LL;
          unint64_t v10 = 0LL;
          v104 = 0LL;
          Class v13 = 0LL;
        }

        goto LABEL_186;
      }

      if (v59) {
        uint64_t v60 = v1[10];
      }
      else {
        uint64_t v60 = 0LL;
      }
      if (v60 < v101) {
        goto LABEL_294;
      }
      v107 = v1[11];
      if (v59)
      {
        v105 = v1[9];
        Class v61 = *(unsigned __int8 *)(v59 + 18);
        if (v101 < v1[10] && *(_WORD *)(v59 + 16))
        {
          if (*(_BYTE *)(v59 + 18))
          {
            uint64_t result = (void *)swift_unknownObjectRetain_n();
            int64_t v62 = v101;
            int64_t v63 = v59;
            while (1)
            {
              int64_t v65 = *(unsigned __int16 *)(v63 + 16);
              if (!*(_WORD *)(v63 + 16)) {
                goto LABEL_137;
              }
              int64_t v66 = *(void *)(v63 + 40);
              Class v12 = __OFSUB__(v62, v66);
              Class v67 = v62 - v66;
              if (v12) {
                goto LABEL_276;
              }
              if (__OFADD__(v67, 1LL)) {
                goto LABEL_277;
              }
              if (v67 + 1 <= 0)
              {
                int64_t v65 = 0LL;
              }

              else
              {
                if ((_DWORD)v65 == 1) {
                  goto LABEL_136;
                }
                int64_t v68 = *(void *)(v63 + 64);
                int64_t v62 = v67 - v68;
                if (__OFSUB__(v67, v68)) {
                  goto LABEL_290;
                }
                if (__OFADD__(v62, 1LL)) {
                  goto LABEL_291;
                }
                if (v62 + 1 < 1)
                {
                  int64_t v65 = 1LL;
                  int64_t v62 = v67;
                }

                else
                {
                  if ((_DWORD)v65 == 2) {
                    goto LABEL_137;
                  }
                  int64_t v69 = *(void *)(v63 + 88);
                  Class v12 = __OFSUB__(v62, v69);
                  Class v67 = v62 - v69;
                  if (v12) {
                    goto LABEL_302;
                  }
                  if (__OFADD__(v67, 1LL)) {
                    goto LABEL_303;
                  }
                  if (v67 + 1 >= 1)
                  {
                    if ((_DWORD)v65 != 3)
                    {
                      v70 = 3LL;
                      if (v65 > 3) {
                        v70 = *(unsigned __int16 *)(v63 + 16);
                      }
                      v71 = (void *)(v63 + 112);
                      Class v72 = 3LL;
                      while (v70 != v72)
                      {
                        int64_t v62 = v67 - *v71;
                        if (__OFSUB__(v67, *v71)) {
                          goto LABEL_283;
                        }
                        if (__OFADD__(v62, 1LL)) {
                          goto LABEL_284;
                        }
                        if (v62 + 1 < 1)
                        {
                          int64_t v65 = v72;
                          int64_t v62 = v67;
                          goto LABEL_138;
                        }

                        ++v72;
                        v71 += 3;
                        Class v67 = v62;
                        if (v65 == v72) {
                          goto LABEL_137;
                        }
                      }

                          Class v61 = (v75 - 1) & v75;
                          Class v64 = __clz(__rbit64(v75)) + (v58 << 6);
                        }

                        int64_t v65 = 16 * v64;
                        int64_t v66 = (uint64_t *)(*(void *)(v5 + 48) + v65);
                        int64_t v68 = *v66;
                        Class v67 = v66[1];
                        int64_t v69 = (uint64_t *)(*(void *)(v5 + 56) + v65);
                        v70 = *v69;
                        v71 = v69[1];
                        Class v72 = (void *)(*(void *)(v26 + 48) + v65);
                        *Class v72 = v68;
                        v72[1] = v67;
                        Class v73 = (void *)(*(void *)(v26 + 56) + v65);
                        *Class v73 = v70;
                        v73[1] = v71;
                        swift_bridgeObjectRetain();
                        swift_bridgeObjectRetain();
                      }
                    }
                  }
                }
              }
            }
          }
        }

        v149 = v151;
      }

        if (v111 == 2)
        {
          v116 = v95;
          if (v113 != 2) {
            return 0LL;
          }
        }

        else
        {
          uint64_t result = 0LL;
          if (v113 == 2) {
            return result;
          }
          v116 = v95;
        }

        if (v116 == 2)
        {
          v117 = v96;
          if (v112 != 2) {
            return 0LL;
          }
        }

        else
        {
          uint64_t result = 0LL;
          if (v112 == 2) {
            return result;
          }
          v117 = v96;
          if (((v112 ^ v95) & 1) != 0) {
            return result;
          }
        }

        if (v117 == 2)
        {
          v118 = v97;
          if (v110 != 2) {
            return 0LL;
          }
        }

        else
        {
          uint64_t result = 0LL;
          if (v110 == 2) {
            return result;
          }
          v118 = v97;
          if (((((v96 & 1) == 0) ^ v110) & 1) == 0) {
            return result;
          }
        }

        if (v118 == 2)
        {
          if (v109 != 2) {
            return 0LL;
          }
        }

        else if (v109 == 2 || ((((v97 & 1) == 0) ^ v109) & 1) == 0)
        {
          return 0LL;
        }

        return 1LL;
      }
    }

    else
    {
      v109 = v208;
      v110 = v212;
      v111 = v199;
      v112 = v216;
      uint64_t v113 = v121;
      if (!v138) {
        goto LABEL_78;
      }
    }

    return 0LL;
  }

  if (!v213) {
    return 0LL;
  }
  if (v200 == v198 && v217 == v213) {
    goto LABEL_18;
  }
  v134 = v24;
  v201 = v11;
  v122 = v12;
  v218 = v7;
  uint64_t v41 = v29;
  v176 = v25;
  v183 = v8;
  size_t v42 = v28;
  v140 = v20;
  v146 = v23;
  unint64_t v43 = v13;
  CFIndex v44 = v27;
  v152 = v22;
  v158 = v9;
  v164 = v10;
  v170 = v6;
  unint64_t v45 = v16;
  char v46 = v21;
  unint64_t v47 = v26;
  Class v48 = _stringCompareWithSmolCheck(_:_:expecting:)();
  Class v12 = v122;
  CFArrayRef v11 = v201;
  Class v24 = v134;
  Class v26 = v47;
  Class v21 = v46;
  int v16 = v45;
  unint64_t v10 = v164;
  BOOL v6 = v170;
  BOOL v22 = v152;
  unsigned int v9 = v158;
  int64_t v27 = v44;
  Class v13 = v43;
  Class v20 = v140;
  int v23 = v146;
  int64_t v28 = v42;
  uint64_t v25 = v176;
  int64_t v8 = v183;
  uint64_t v29 = v41;
  int64_t v7 = v218;
  int v49 = v48;
  uint64_t result = 0LL;
  if ((v49 & 1) != 0) {
    goto LABEL_18;
  }
  return result;
}

        if ((v54 & 1) != 0) {
          goto LABEL_124;
        }
        int64_t v62 = &v29[16 * v31];
        Class v64 = *(void *)v62;
        int64_t v63 = *((void *)v62 + 1);
        size_t v42 = __OFSUB__(v63, v64);
        int64_t v65 = v63 - v64;
        if (v42) {
          goto LABEL_127;
        }
        if (v65 < v53) {
          goto LABEL_15;
        }
LABEL_86:
        v70 = v31 - 1;
        if (v31 - 1 >= v12)
        {
          __break(1u);
LABEL_117:
          __break(1u);
LABEL_118:
          __break(1u);
LABEL_119:
          __break(1u);
LABEL_120:
          __break(1u);
LABEL_121:
          __break(1u);
LABEL_122:
          __break(1u);
LABEL_123:
          __break(1u);
LABEL_124:
          __break(1u);
LABEL_125:
          __break(1u);
LABEL_126:
          __break(1u);
LABEL_127:
          __break(1u);
LABEL_128:
          __break(1u);
LABEL_129:
          __break(1u);
LABEL_130:
          __break(1u);
LABEL_131:
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
LABEL_135:
          __break(1u);
LABEL_136:
          __break(1u);
LABEL_137:
          __break(1u);
LABEL_138:
          __break(1u);
LABEL_139:
          __break(1u);
          goto LABEL_140;
        }

        if (!v10) {
          goto LABEL_143;
        }
        v71 = &v29[16 * v70];
        Class v72 = *(void *)v71;
        Class v73 = v29;
        Class v74 = &v29[16 * v31];
        int64_t v75 = *((void *)v74 + 1);
        specialized _merge<A>(low:mid:high:buffer:by:)( (unsigned __int8 *)(v10 + *(void *)v71),  (unsigned __int8 *)(v10 + *(void *)v74),  v10 + v75,  __dst);
        if (v1) {
          goto LABEL_114;
        }
        if (v75 < v72) {
          goto LABEL_117;
        }
        if (v31 > *((void *)v11 + 2)) {
          goto LABEL_118;
        }
        *(void *)v71 = v72;
        *(void *)&v73[16 * v70 + 8] = v75;
        int64_t v76 = *((void *)v11 + 2);
        if (v31 >= v76) {
          goto LABEL_119;
        }
        Class v12 = v76 - 1;
        memmove(v74, v74 + 16, 16 * (v76 - 1 - v31));
        uint64_t v29 = v73;
        *((void *)v11 + 2) = v76 - 1;
        unint64_t v10 = v96;
        if (v76 <= 2) {
          goto LABEL_15;
        }
      }
    }

    Class v12 = 1LL;
LABEL_15:
    objc_super v3 = v95;
    if (v9 >= v95)
    {
      __int128 v2 = v92;
      int64_t v8 = v93;
      goto LABEL_103;
    }
  }

        if ((v54 & 1) != 0) {
          goto LABEL_124;
        }
        int64_t v62 = &v29[16 * v31];
        Class v64 = *(void *)v62;
        int64_t v63 = *((void *)v62 + 1);
        size_t v42 = __OFSUB__(v63, v64);
        int64_t v65 = v63 - v64;
        if (v42) {
          goto LABEL_127;
        }
        if (v65 < v53) {
          goto LABEL_15;
        }
LABEL_86:
        v70 = v31 - 1;
        if (v31 - 1 >= v12)
        {
          __break(1u);
LABEL_117:
          __break(1u);
LABEL_118:
          __break(1u);
LABEL_119:
          __break(1u);
LABEL_120:
          __break(1u);
LABEL_121:
          __break(1u);
LABEL_122:
          __break(1u);
LABEL_123:
          __break(1u);
LABEL_124:
          __break(1u);
LABEL_125:
          __break(1u);
LABEL_126:
          __break(1u);
LABEL_127:
          __break(1u);
LABEL_128:
          __break(1u);
LABEL_129:
          __break(1u);
LABEL_130:
          __break(1u);
LABEL_131:
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
LABEL_135:
          __break(1u);
LABEL_136:
          __break(1u);
LABEL_137:
          __break(1u);
LABEL_138:
          __break(1u);
LABEL_139:
          __break(1u);
          goto LABEL_140;
        }

        if (!v10) {
          goto LABEL_143;
        }
        v71 = &v29[16 * v70];
        Class v72 = *(void *)v71;
        Class v73 = v29;
        Class v74 = &v29[16 * v31];
        int64_t v75 = *((void *)v74 + 1);
        specialized _merge<A>(low:mid:high:buffer:by:)( (unsigned __int8 *)(v10 + *(void *)v71),  (unsigned __int8 *)(v10 + *(void *)v74),  v10 + v75,  __dst);
        if (v1) {
          goto LABEL_114;
        }
        if (v75 < v72) {
          goto LABEL_117;
        }
        if (v31 > *((void *)v11 + 2)) {
          goto LABEL_118;
        }
        *(void *)v71 = v72;
        *(void *)&v73[16 * v70 + 8] = v75;
        int64_t v76 = *((void *)v11 + 2);
        if (v31 >= v76) {
          goto LABEL_119;
        }
        Class v12 = v76 - 1;
        memmove(v74, v74 + 16, 16 * (v76 - 1 - v31));
        uint64_t v29 = v73;
        *((void *)v11 + 2) = v76 - 1;
        unint64_t v10 = v96;
        if (v76 <= 2) {
          goto LABEL_15;
        }
      }
    }

    Class v12 = 1LL;
LABEL_15:
    objc_super v3 = v95;
    if (v9 >= v95)
    {
      __int128 v2 = v92;
      int64_t v8 = v93;
      goto LABEL_103;
    }
  }

            id v32 = 4LL;
            goto LABEL_87;
          }

      LOWORD(v27) = v26;
LABEL_79:
      _ParseInfo.advance()();
      int64_t v28 = (unsigned __int16)v27;
      Class v21 = *a1;
      BOOL v22 = a1[1];
      int v23 = a1[2];
      if (v28 == 42)
      {
        uint64_t v29 = HIBYTE(v22) & 0xF;
        if ((v22 & 0x2000000000000000LL) == 0) {
          uint64_t v29 = v21 & 0xFFFFFFFFFFFFLL;
        }
        if (v23 >> 14 < 4 * v29)
        {
          _ParseInfo.advance()();
          goto LABEL_6;
        }
      }
    }
  }

  int64_t v90 = *(void *)&v2[OBJC_IVAR____NSSwiftLocale_locale + 8];
  v91 = swift_getObjectType();
  v92 = *(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v90 + 408);
  swift_unknownObjectRetain();
  v92(v149, v91, v90);
  swift_unknownObjectRelease();
  if (LOBYTE(v149[0]) == 1) {
    int64_t v82 = (void **)MEMORY[0x189603B18];
  }
  else {
    int64_t v82 = (void **)MEMORY[0x189603B20];
  }
LABEL_68:
  int64_t v83 = static String._unconditionallyBridgeFromObjectiveC(_:)(*v82);
  *(void *)(a2 + 24) = MEMORY[0x189617FA8];
  *(void *)a2 = v83;
  *(void *)(a2 + _Block_object_dispose(va, 8) = v84;
}

                a2 = (v77 - 1) & v77;
                v70 = __clz(__rbit64(v77)) + (v66 << 6);
              }

              v71 = 16 * v70;
              Class v72 = (uint64_t *)(*(void *)(v7 + 48) + v71);
              Class v74 = *v72;
              Class v73 = v72[1];
              int64_t v75 = *(_OWORD *)(*(void *)(v7 + 56) + v71);
              int64_t v76 = (void *)(v215[6] + v71);
              *int64_t v76 = v74;
              v76[1] = v73;
              *(_OWORD *)(v215[7] + v71) = v75;
              swift_bridgeObjectRetain();
            }
          }

              Class v48 = (v58 - 1) & v58;
              int64_t v68 = v59;
              int v50 = __clz(__rbit64(v58)) + (v59 << 6);
            }

            v51 = 16 * v50;
            id v52 = (uint64_t *)(*(void *)(v22 + 48) + 16 * v50);
            CFArrayRef v54 = *v52;
            char v53 = v52[1];
            v55 = 32 * v50;
            outlined init with copy of Any(*(void *)(v22 + 56) + 32 * v50, (uint64_t)v71);
            v56 = (void *)(*(void *)(v23 + 48) + v51);
            objc_class *v56 = v54;
            v56[1] = v53;
            outlined init with take of Any(v71, (_OWORD *)(*(void *)(v23 + 56) + v55));
            swift_bridgeObjectRetain();
          }
        }

              Class v48 = (v56 - 1) & v56;
              int v50 = __clz(__rbit64(v56)) + (v45 << 6);
            }

            v51 = 8 * v50;
            id v52 = *(void **)(*(void *)(v20 + 48) + 8 * v50);
            char v53 = 32 * v50;
            outlined init with copy of Any(*(void *)(v20 + 56) + 32 * v50, (uint64_t)v65);
            *(void *)(*(void *)(v21 + 48) + v51) = v52;
            outlined init with take of Any(v65, (_OWORD *)(*(void *)(v21 + 56) + v53));
            CFArrayRef v54 = v52;
          }
        }

              Class v48 = (v56 - 1) & v56;
              int v50 = __clz(__rbit64(v56)) + (v45 << 6);
            }

            v51 = 8 * v50;
            id v52 = *(void **)(*(void *)(v20 + 48) + 8 * v50);
            char v53 = 32 * v50;
            outlined init with copy of Any(*(void *)(v20 + 56) + 32 * v50, (uint64_t)v65);
            *(void *)(*(void *)(v21 + 48) + v51) = v52;
            outlined init with take of Any(v65, (_OWORD *)(*(void *)(v21 + 56) + v53));
            CFArrayRef v54 = v52;
          }
        }

    swift_bridgeObjectRelease();
    goto LABEL_5;
  }

  int64_t v89 = v9;
  int64_t v90 = v12;
  Class v88 = v11;
  int v18 = swift_isUniquelyReferenced_nonNull_native();
  Class v99 = *v4;
  unint64_t v19 = *v4;
  *uint64_t v4 = 0x8000000000000000LL;
  Class v20 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
  BOOL v22 = *(void *)(v19 + 16);
  int v23 = (v21 & 1) == 0;
  Class v24 = __OFADD__(v22, v23);
  uint64_t v25 = v22 + v23;
  if (v24)
  {
    __break(1u);
    goto LABEL_20;
  }

  Class v26 = v21;
  if (*(void *)(v19 + 24) < v25)
  {
    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v25, v18);
    int64_t v27 = v99;
    Class v20 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
    if ((v26 & 1) != (v28 & 1))
    {
      KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
      __break(1u);
      return (char *)swift_bridgeObjectRelease();
    }

    goto LABEL_13;
  }

  if ((v18 & 1) != 0)
  {
    int64_t v27 = v19;
LABEL_13:
    uint64_t v30 = v88;
    uint64_t v29 = v89;
    id v31 = v90;
LABEL_14:
    *(void *)&v103 = v97;
    *((void *)&v103 + 1) = v8;
    v104 = v10;
    v105 = v29;
    id v106 = v30;
    v107 = v31;
    v108 = v13;
    v109 = v95;
    v110 = __src;
    v111 = v91;
    if ((v26 & 1) != 0)
    {
      outlined assign with take of Morphology._CustomPronoun((uint64_t)&v103, *(void *)(v27 + 56) + 80 * v20);
    }

    else
    {
      specialized _NativeDictionary._insert(at:key:value:)(v20, a2, a3, &v103, (void *)v27);
      swift_bridgeObjectRetain();
    }

    *uint64_t v4 = v27;
    swift_bridgeObjectRelease();
    return (char *)swift_bridgeObjectRelease();
  }

  int64_t v83 = v20;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Morphology._CustomPronoun>);
  int64_t v58 = static _DictionaryStorage.copy(original:)();
  int64_t v27 = v58;
  id v31 = v90;
  if (!*(void *)(v19 + 16))
  {
LABEL_79:
    swift_bridgeObjectRelease();
    Class v20 = v83;
    uint64_t v30 = v88;
    uint64_t v29 = v89;
    goto LABEL_14;
  }

  uint64_t result = (char *)(v58 + 64);
  v85 = (char *)(v19 + 64);
  int64_t v59 = (unint64_t)((1LL << *(_BYTE *)(v27 + 32)) + 63) >> 6;
  if (v27 != v19 || result >= &v85[8 * v59]) {
    uint64_t result = (char *)memmove(result, v85, 8 * v59);
  }
  uint64_t v60 = 0LL;
  *(void *)(v27 + 16) = *(void *)(v19 + 16);
  Class v61 = 1LL << *(_BYTE *)(v19 + 32);
  int64_t v62 = -1LL;
  if (v61 < 64) {
    int64_t v62 = ~(-1LL << v61);
  }
  int64_t v63 = v62 & *(void *)(v19 + 64);
  v84 = (unint64_t)(v61 + 63) >> 6;
  while (1)
  {
    id v31 = v90;
    if (v63)
    {
      v86 = (v63 - 1) & v63;
      v87 = v60;
      Class v64 = __clz(__rbit64(v63)) | (v60 << 6);
      goto LABEL_56;
    }

    int64_t v79 = v60 + 1;
    if (__OFADD__(v60, 1LL))
    {
      __break(1u);
LABEL_81:
      __break(1u);
LABEL_82:
      __break(1u);
      goto LABEL_83;
    }

    if (v79 >= v84) {
      goto LABEL_79;
    }
    v80 = *(void *)&v85[8 * v79];
    Class v81 = v60 + 1;
    if (!v80)
    {
      Class v81 = v60 + 2;
      if (v60 + 2 >= v84) {
        goto LABEL_79;
      }
      v80 = *(void *)&v85[8 * v81];
      if (!v80)
      {
        Class v81 = v60 + 3;
        if (v60 + 3 >= v84) {
          goto LABEL_79;
        }
        v80 = *(void *)&v85[8 * v81];
        if (!v80)
        {
          Class v81 = v60 + 4;
          if (v60 + 4 >= v84) {
            goto LABEL_79;
          }
          v80 = *(void *)&v85[8 * v81];
          if (!v80)
          {
            Class v81 = v60 + 5;
            if (v60 + 5 >= v84) {
              goto LABEL_79;
            }
            v80 = *(void *)&v85[8 * v81];
            if (!v80)
            {
              Class v81 = v60 + 6;
              if (v60 + 6 >= v84) {
                goto LABEL_79;
              }
              v80 = *(void *)&v85[8 * v81];
              if (!v80) {
                break;
              }
            }
          }
        }
      }
    }

            Class v57 = (v71 - 1) & v71;
            uint64_t v60 = __clz(__rbit64(v71)) + (v54 << 6);
          }

          Class v61 = 16 * v60;
          int64_t v62 = (uint64_t *)(*(void *)(v25 + 48) + v61);
          Class v64 = *v62;
          int64_t v63 = v62[1];
          int64_t v65 = (uint64_t *)(*(void *)(v25 + 56) + v61);
          int64_t v66 = *v65;
          Class v67 = v65[1];
          int64_t v68 = (void *)(*(void *)(v26 + 48) + v61);
          *int64_t v68 = v64;
          v68[1] = v63;
          int64_t v69 = (void *)(*(void *)(v26 + 56) + v61);
          *int64_t v69 = v66;
          v69[1] = v67;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
        }
      }

              Class v48 = (v56 - 1) & v56;
              int v50 = __clz(__rbit64(v56)) + (v45 << 6);
            }

            v51 = 8 * v50;
            id v52 = *(void **)(*(void *)(v20 + 48) + 8 * v50);
            char v53 = 32 * v50;
            outlined init with copy of Any(*(void *)(v20 + 56) + 32 * v50, (uint64_t)v65);
            *(void *)(*(void *)(v21 + 48) + v51) = v52;
            outlined init with take of Any(v65, (_OWORD *)(*(void *)(v21 + 56) + v53));
            CFArrayRef v54 = v52;
          }
        }

        swift_bridgeObjectRelease();
      }

      int64_t v27 = *(void (**)(unint64_t, uint64_t))(v8 + 8);
      v27(*(void *)(v26 + 48) + *(void *)(v8 + 72) * v21, v7);
      outlined init with take of Any((_OWORD *)(*(void *)(v26 + 56) + 32 * v21), v66);
      specialized _NativeDictionary._delete(at:)(v21, v26);
      *uint64_t v4 = v26;
      swift_bridgeObjectRelease();
    }

    else
    {
      memset(v66, 0, sizeof(v66));
      int64_t v27 = *(void (**)(unint64_t, uint64_t))(v8 + 8);
    }

    v27(a2, v7);
    return outlined destroy of Any?((uint64_t)v66, &demangling cache variable for type metadata for Any?);
  }

  outlined init with take of Any((_OWORD *)a1, v66);
  CFArrayRef v11 = swift_isUniquelyReferenced_nonNull_native();
  int64_t v65 = *v4;
  Class v12 = v65;
  *uint64_t v4 = 0x8000000000000000LL;
  unint64_t v14 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  int v15 = *(void *)(v12 + 16);
  int v16 = (v13 & 1) == 0;
  unint64_t v17 = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
  }

  else
  {
    objc_super v3 = v13;
    if (*(void *)(v12 + 24) < v17)
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v17, v11);
      int v18 = v65;
      unint64_t v19 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
      if ((v3 & 1) != (v20 & 1)) {
        goto LABEL_83;
      }
      unint64_t v14 = v19;
      if ((v3 & 1) == 0) {
        goto LABEL_48;
      }
LABEL_13:
      int64_t v28 = (_OWORD *)(*(void *)(v18 + 56) + 32 * v14);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v28);
      outlined init with take of Any(v66, v28);
LABEL_49:
      *uint64_t v4 = v18;
      swift_bridgeObjectRelease();
      return (*(uint64_t (**)(uint64_t, uint64_t))(v8 + 8))(a2, v7);
    }

    if ((v11 & 1) != 0)
    {
      int v18 = v12;
      if ((v13 & 1) != 0) {
        goto LABEL_13;
      }
LABEL_48:
      (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v10, a2, v7);
      specialized _NativeDictionary._insert(at:key:value:)(v14, (uint64_t)v10, v66, (void *)v18);
      int v18 = v65;
      goto LABEL_49;
    }
  }

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<CodingUserInfoKey, Any>);
  uint64_t v30 = static _DictionaryStorage.copy(original:)();
  int v18 = v30;
  if (!*(void *)(v12 + 16))
  {
LABEL_47:
    swift_bridgeObjectRelease();
    int64_t v65 = v18;
    if ((v3 & 1) != 0) {
      goto LABEL_13;
    }
    goto LABEL_48;
  }

  id v31 = (void *)(v30 + 64);
  id v32 = (unint64_t)((1LL << *(_BYTE *)(v18 + 32)) + 63) >> 6;
  id v33 = 0LL;
  *(void *)(v18 + 16) = *(void *)(v12 + 16);
  unint64_t v34 = 1LL << *(_BYTE *)(v12 + 32);
  uint64_t v35 = -1LL;
  if (v34 < 64) {
    uint64_t v35 = ~(-1LL << v34);
  }
  Class v36 = v35 & *(void *)(v12 + 64);
  int64_t v59 = v12 + 64;
  uint64_t v60 = (unint64_t)(v34 + 63) >> 6;
  while (1)
  {
    if (v36)
    {
      int64_t v62 = (v36 - 1) & v36;
      int64_t v63 = v33;
      Class v37 = __clz(__rbit64(v36)) | (v33 << 6);
      goto LABEL_25;
    }

    uint64_t v40 = v33 + 1;
    if (__OFADD__(v33, 1LL))
    {
      __break(1u);
      goto LABEL_80;
    }

    if (v40 >= v60) {
      goto LABEL_47;
    }
    uint64_t v41 = *(void *)(v59 + 8 * v40);
    size_t v42 = v33 + 1;
    if (!v41)
    {
      size_t v42 = v33 + 2;
      uint64_t v41 = *(void *)(v59 + 8 * v42);
      if (!v41)
      {
        size_t v42 = v33 + 3;
        uint64_t v41 = *(void *)(v59 + 8 * v42);
        if (!v41)
        {
          size_t v42 = v33 + 4;
          uint64_t v41 = *(void *)(v59 + 8 * v42);
          if (!v41)
          {
            size_t v42 = v33 + 5;
            uint64_t v41 = *(void *)(v59 + 8 * v42);
            if (!v41)
            {
              size_t v42 = v33 + 6;
              uint64_t v41 = *(void *)(v59 + 8 * v42);
              if (!v41) {
                break;
              }
            }
          }
        }
      }
    }

  v131 = 0LL;
  v192 = v74 + 64;
  v132 = 1LL << *(_BYTE *)(v74 + 32);
  if (v132 < 64) {
    v133 = ~(-1LL << v132);
  }
  else {
    v133 = -1LL;
  }
  v134 = v133 & *(void *)(v74 + 64);
  v193 = (unint64_t)(v132 + 63) >> 6;
  while (1)
  {
    if (v134)
    {
      v136 = v7;
      v137 = __clz(__rbit64(v134));
      v134 &= v134 - 1;
      v194 = v131;
      v138 = v137 | (v131 << 6);
    }

    else
    {
      v139 = v131 + 1;
      if (__OFADD__(v131, 1LL)) {
        goto LABEL_148;
      }
      if (v139 >= v193)
      {
LABEL_144:

        swift_release();
        return v7;
      }

      v140 = *(void *)(v192 + 8 * v139);
      v141 = v131 + 1;
      if (!v140)
      {
        v141 = v131 + 2;
        if (v131 + 2 >= v193) {
          goto LABEL_144;
        }
        v140 = *(void *)(v192 + 8 * v141);
        if (!v140)
        {
          v141 = v131 + 3;
          if (v131 + 3 >= v193) {
            goto LABEL_144;
          }
          v140 = *(void *)(v192 + 8 * v141);
          if (!v140)
          {
            v142 = v131 + 4;
            if (v131 + 4 >= v193) {
              goto LABEL_144;
            }
            v140 = *(void *)(v192 + 8 * v142);
            if (!v140)
            {
              while (1)
              {
                v141 = v142 + 1;
                if (__OFADD__(v142, 1LL)) {
                  goto LABEL_149;
                }
                if (v141 >= v193) {
                  goto LABEL_144;
                }
                v140 = *(void *)(v192 + 8 * v141);
                ++v142;
                if (v140) {
                  goto LABEL_99;
                }
              }
            }

            v141 = v131 + 4;
          }
        }
      }

      __break(1u);
LABEL_79:
      __break(1u);
LABEL_80:
      __break(1u);
LABEL_81:
      __break(1u);
      goto LABEL_82;
    }

    isStackAllocationSafe = swift_stdlib_isStackAllocationSafe();
    if ((_DWORD)isStackAllocationSafe)
    {
      MEMORY[0x1895F8858](isStackAllocationSafe);
      int v16 = (char *)&v62 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
      goto LABEL_19;
    }

    int v18 = (char *)swift_slowAlloc();
    memset(v18, 48, v13);
    unint64_t v19 = v13;
    Class v20 = v6 - 1;
    Class v64 = v6 - 2;
    Class v21 = v11 + i + 20;
    BOOL v22 = 1LL;
    int v23 = v19;
LABEL_21:
    int64_t v69 = v23;
    v70 = v21;
    Class v24 = v22;
LABEL_22:
    if (v22 >= v24) {
      break;
    }
    __break(1u);
LABEL_40:
    *BOOL v6 = -*v6;
  }

  Class v5 = v24 - 1;
  uint64_t v25 = v24;
  BOOL v6 = (void *)v20[v24];
  Class v26 = __udivti3();
  int64_t v27 = (unint64_t)&v6[0xEA71B9F6EC30000LL * v26];
  v20[v25] = v26;
  Class v24 = v5;
  if (v5) {
    goto LABEL_22;
  }
  if (v68[v22 - 1])
  {
    int64_t v28 = v22;
    uint64_t v30 = v69;
    uint64_t v29 = v70;
  }

  else
  {
    uint64_t v30 = v69;
    uint64_t v29 = v70;
    if (v22 == 1)
    {
LABEL_30:
      int64_t v28 = 0LL;
    }

    else
    {
      id v31 = v22;
      while (!v64[v31])
      {
        if (--v31 == 1) {
          goto LABEL_30;
        }
      }

      int64_t v28 = v31 - 1;
    }
  }

  id v32 = v29;
  id v33 = v30;
  if (v22 < v28) {
    goto LABEL_80;
  }
  while (2)
  {
    if (v32 - 19 < 1)
    {
      __break(1u);
      goto LABEL_67;
    }

    --v33;
    v18[v32-- - 20] = (v27 % 0xA) | 0x30;
    unint64_t v34 = v27 > 9;
    v27 /= 0xAuLL;
    if (v34) {
      continue;
    }
    break;
  }

  int v23 = v30 - 19;
  Class v21 = v29 - 19;
  BOOL v22 = v28;
  if (v28) {
    goto LABEL_21;
  }
  if (!v65)
  {
LABEL_67:
    uint64_t v35 = v66;
    goto LABEL_68;
  }

  uint64_t v35 = v66;
  if (!v33) {
    goto LABEL_85;
  }
  Class v36 = &v18[v33--];
  *(v36 - 1) = 45;
LABEL_68:
  if (v35 < v33) {
    goto LABEL_83;
  }
  Class v57 = MEMORY[0x1895F8858](v35 - v33);
  uint64_t v60 = v58;
  Class v61 = v57;
  v56 = String.init(unsafeUninitializedCapacity:initializingUTF8With:)();
  MEMORY[0x186E20E60](v18, -1LL, -1LL);
  return v56;
}

            swift_bridgeObjectRelease();
            uint64_t v113 = (void *)v74;
          }
        }

        else
        {
          specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)( v72,  isUniquelyReferenced_nonNull_native);
          Class v74 = v114;
          int64_t v75 = specialized __RawDictionaryStorage.find<A>(_:)(v59, v60);
          if ((v73 & 1) != (v76 & 1)) {
            goto LABEL_88;
          }
          int64_t v69 = v75;
        }

        if ((v73 & 1) != 0) {
          outlined init with take of Any((_OWORD *)(*(void *)(v74 + 56) + 32 * v69), v119);
        }
        else {
          memset(v119, 0, sizeof(v119));
        }
        outlined init with copy of (Hashable & Sendable)?( (uint64_t)v119,  (uint64_t)&v117,  &demangling cache variable for type metadata for Any?);
        Class v77 = v118;
        outlined destroy of Any?((uint64_t)&v117, &demangling cache variable for type metadata for Any?);
        if (!v77)
        {
          outlined destroy of Any?((uint64_t)v119, &demangling cache variable for type metadata for Any?);
          outlined init with copy of Any((uint64_t)v120, (uint64_t)v119);
        }

        outlined init with copy of (Hashable & Sendable)?( (uint64_t)v119,  (uint64_t)&v115,  &demangling cache variable for type metadata for Any?);
        if (v116)
        {
          outlined init with take of Any(&v115, &v117);
          if ((v73 & 1) != 0)
          {
            outlined init with take of Any(&v117, (_OWORD *)(v113[7] + 32 * v69));
          }

          else
          {
            v113[(v69 >> 6) + 8] |= 1LL << v69;
            int64_t v78 = (uint64_t *)(v113[6] + 16 * v69);
            *int64_t v78 = v59;
            v78[1] = v60;
            outlined init with take of Any(&v117, (_OWORD *)(v113[7] + 32 * v69));
            int64_t v79 = v113[2];
            v80 = __OFADD__(v79, 1LL);
            Class v81 = v79 + 1;
            if (v80) {
              goto LABEL_82;
            }
            v113[2] = v81;
            swift_bridgeObjectRetain();
          }

          uint64_t v41 = v108;
        }

        else
        {
          outlined destroy of Any?((uint64_t)&v115, &demangling cache variable for type metadata for Any?);
          uint64_t v41 = v108;
          if ((v73 & 1) != 0)
          {
            swift_arrayDestroy();
            specialized _NativeDictionary._delete(at:)(v69, (uint64_t)v113);
          }
        }

        outlined destroy of Any?((uint64_t)v119, &demangling cache variable for type metadata for Any?);
        swift_bridgeObjectRelease();
        v114 = (uint64_t)v113;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v120);
        __swift_destroy_boxed_opaque_existential_1((uint64_t)&v121);
        unint64_t v45 = JSONMap.loadValue(at:)(v41);
        char v46 = v48;
        unint64_t v47 = v49;
        if (v49 > 0xFDu) {
          goto LABEL_27;
        }
      }

                int64_t v58 = (v67 - 1) & v67;
                uint64_t v60 = __clz(__rbit64(v67)) + (v10 << 6);
              }

              Class v61 = 16 * v60;
              int64_t v62 = (uint64_t *)(*(void *)(v6 + 48) + v61);
              Class v64 = *v62;
              int64_t v63 = v62[1];
              int64_t v65 = *(_OWORD *)(*(void *)(v6 + 56) + v61);
              int64_t v66 = (void *)(v195[6] + v61);
              *int64_t v66 = v64;
              v66[1] = v63;
              *(_OWORD *)(v195[7] + v61) = v65;
              swift_bridgeObjectRetain();
            }
          }

      swift_unknownObjectRelease();
      swift_unknownObjectRelease();
      Class v5 = (uint64_t *)(v22 & 0xFFFFFFFFFFFFF0FFLL | (v33 << 8));
      goto LABEL_79;
    }

    uint64_t v4 = 0LL;
LABEL_80:
    int v16 = v134;
    uint64_t v25 = v134 - v4;
    unsigned int v9 = v136;
    if (__OFSUB__(v134, v4)) {
      goto LABEL_337;
    }
    uint64_t v4 = v134;
LABEL_82:
    if (v14 == v25)
    {
      swift_release();
      return (void *)outlined init with take of AttributedString._AttributeValue?((uint64_t)&v158, v127);
    }

    int v15 = v3[11];
    if (v9 != v15)
    {
      __break(1u);
LABEL_321:
      __break(1u);
LABEL_322:
      __break(1u);
LABEL_323:
      __break(1u);
LABEL_324:
      __break(1u);
LABEL_325:
      __break(1u);
LABEL_326:
      __break(1u);
LABEL_327:
      __break(1u);
LABEL_328:
      __break(1u);
LABEL_329:
      __break(1u);
LABEL_330:
      __break(1u);
LABEL_331:
      __break(1u);
LABEL_332:
      __break(1u);
LABEL_333:
      v119 = v16;
      unint64_t v14 = v15;
      goto LABEL_297;
    }

    if (v13)
    {
      Class v37 = (void *)(v13 + 24 * ((v138 >> ((4 * *(_BYTE *)(v13 + 18) + 8) & 0x3C)) & 0xF));
      Class v5 = (uint64_t *)v37[4];
      int v38 = v37[5];
      unsigned int v39 = v37[3];
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain_n();
      v133 = (uint64_t *)v38;
    }

    else
    {
      uint64_t v40 = v3[8];
      swift_unknownObjectRetain();
      uint64_t v41 = v138;
      specialized Rope._Node.subscript.getter(v138, v40);
      Class v5 = v42;
      v133 = (uint64_t *)v43;
      uint64_t result = (void *)swift_unknownObjectRelease();
      if (v9 != v3[11]) {
        goto LABEL_341;
      }
      CFIndex v44 = v3[8];
      swift_unknownObjectRetain();
      unsigned int v39 = specialized Rope._Node.subscript.getter(v41, v44);
      unsigned int v9 = v136;
      swift_unknownObjectRelease();
    }

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    int v15 = v14 + v39;
    if (__OFADD__(v14, v39)) {
      goto LABEL_321;
    }
    if (v137 >= v14) {
      int v16 = v14;
    }
    else {
      int v16 = v137;
    }
    if (v14 < v4) {
      int v16 = v4;
    }
    else {
      unint64_t v45 = v14 + v39;
    }
    else {
      int v15 = v137;
    }
    if (v16 == v15) {
      goto LABEL_322;
    }
    char v46 = v3[8];
    int v15 = v3[11];
    unint64_t v47 = v138;
    *(void *)&v144 = v9;
    *((void *)&v144 + 1) = v138;
    *(void *)&v145 = v13;
    int v16 = v135 + 1;
    if (__OFADD__(v135, 1LL)) {
      goto LABEL_323;
    }
    if (v9 != v15) {
      goto LABEL_324;
    }
    ++v135;
    if (v13)
    {
      unsigned int v9 = *(void *)(v13 + 24 * ((v138 >> ((4 * *(_BYTE *)(v13 + 18) + 8) & 0x3C)) & 0xF) + 24);
      swift_unknownObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_retain();
    }

    else
    {
      swift_retain();
      swift_unknownObjectRetain();
      unsigned int v9 = specialized Rope._Node.subscript.getter(v47, v46);
    }

    swift_bridgeObjectRelease();
    uint64_t result = (void *)swift_bridgeObjectRelease();
    unint64_t v17 = __OFADD__(v14, v9);
    v14 += v9;
    if (v17) {
      goto LABEL_325;
    }
    if (v46)
    {
      Class v48 = ((-15LL << ((4 * *(_BYTE *)(v46 + 18) + 8) & 0x3C)) - 1) & (unint64_t)*(unsigned __int8 *)(v46 + 18) | ((unint64_t)*(unsigned __int16 *)(v46 + 16) << ((4 * *(_BYTE *)(v46 + 18) + 8) & 0x3C));
      uint64_t result = (void *)swift_unknownObjectRetain();
    }

    else
    {
      Class v48 = 0LL;
    }

    unsigned int v9 = (uint64_t)&v144;
    if (v138 >= v48) {
      goto LABEL_326;
    }
    if (v13)
    {
      int v49 = (4 * *(_BYTE *)(v13 + 18) + 8) & 0x3C;
      int v50 = ((v138 >> v49) & 0xF) + 1;
      if (v50 < *(unsigned __int16 *)(v13 + 16))
      {
        v138 = (v50 << v49) | ((-15LL << v49) - 1) & v138;
        uint64_t result = (void *)swift_unknownObjectRelease_n();
        uint64_t v4 = v134;
        v51 = v137;
        if (v14 < v137) {
          goto LABEL_172;
        }
        goto LABEL_121;
      }
    }

    id v52 = *(unsigned __int8 *)(v46 + 18);
    char v53 = (4 * v52 + 8) & 0x3C;
    *(void *)&v153 = (v138 >> v53) & 0xF;
    if (v52)
    {
      swift_unknownObjectRetain();
      CFArrayRef v54 = specialized closure #1 in Rope._Node.formSuccessor(of:)( v46 + 24,  (uint64_t *)&v153,  (uint64_t)&v144,  v46,  v52);
      uint64_t result = (void *)swift_unknownObjectRelease();
      v51 = v137;
      if ((v54 & 1) != 0)
      {
        uint64_t result = (void *)swift_unknownObjectRelease_n();
        v138 = *((void *)&v144 + 1);
        goto LABEL_120;
      }
    }

    else
    {
      v55 = ((v138 >> v53) & 0xF) + 1;
      v51 = v137;
      if (v55 < *(unsigned __int16 *)(v46 + 16))
      {
        v138 = (v55 << v53) | ((-15LL << v53) - 1) & v138;
        *((void *)&v144 + 1) = v138;
        uint64_t result = (void *)swift_unknownObjectRelease_n();
        *(void *)&v145 = v46;
LABEL_120:
        uint64_t v4 = v134;
        if (v14 < v51) {
          goto LABEL_172;
        }
        goto LABEL_121;
      }
    }

    if (v46)
    {
      int64_t v62 = *(unsigned __int8 *)(v46 + 18);
      int64_t v63 = *(unsigned __int16 *)(v46 + 16);
      uint64_t result = (void *)swift_unknownObjectRelease_n();
      Class v64 = (4 * v62 + 8) & 0x3C;
      int64_t v65 = ((-15LL << v64) - 1) & v62;
      int64_t v66 = v63 << v64;
      objc_super v3 = v131;
      Class v67 = v65 | v66;
    }

    else
    {
      Class v67 = 0LL;
    }

    uint64_t v4 = v134;
    *(void *)&v144 = v136;
    *((void *)&v144 + 1) = v67;
    v138 = v67;
    *(void *)&v145 = 0LL;
    if (v14 < v51)
    {
LABEL_172:
      v136 = v144;
      Class v13 = v145;
      swift_release();
      goto LABEL_231;
    }

          if (v4 + 0x4000000000000000LL >= 0)
          {
            if (v5)
            {
              type metadata accessor for __DataStorage();
              swift_allocObject();
              int64_t v28 = (void *)__DataStorage.init(bytes:length:copy:deallocator:offset:)( v19,  2 * v4,  0,  (void (*)(unint64_t, uint64_t))closure #2 in Data.Deallocator._deallocator.getter,  0LL,  0LL);
              return specialized Data._Representation.init(_:count:)(v28, 2 * v4);
            }

            goto LABEL_81;
          }

          __break(1u);
          goto LABEL_126;
        }

        goto LABEL_137;
      }

      Class v81 = *(void *)(v78 + 56);

      unint64_t v14 = v70;
      *(void *)(v81 + 8 * v74) = v70;
      goto LABEL_124;
    }

    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
    {
      int64_t v78 = v72;
      unint64_t v17 = v69;
      if ((v73 & 1) == 0) {
        goto LABEL_123;
      }
      goto LABEL_78;
    }
  }

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<Date.ComponentsFormatStyle, NSDateComponentsFormatter>);
  int64_t v82 = static _DictionaryStorage.copy(original:)();
  int64_t v78 = v82;
  if (!*(void *)(v72 + 16))
  {
LABEL_122:
    swift_bridgeObjectRelease();
    unint64_t v17 = v69;
    if ((v7 & 1) == 0) {
      goto LABEL_123;
    }
    goto LABEL_78;
  }

  int64_t v83 = (char *)(v82 + 64);
  __srca = (char *)(v72 + 64);
  v84 = (unint64_t)((1LL << *(_BYTE *)(v78 + 32)) + 63) >> 6;
  v135 = v78;
  if (v78 != v72 || v83 >= &__srca[8 * v84]) {
    memmove(v83, __srca, 8 * v84);
  }
  v143 = 0LL;
  *(void *)(v78 + 16) = *(void *)(v72 + 16);
  v85 = 1LL << *(_BYTE *)(v72 + 32);
  v86 = -1LL;
  if (v85 < 64) {
    v86 = ~(-1LL << v85);
  }
  v87 = v86 & *(void *)(v72 + 64);
  v137 = (unint64_t)(v85 + 63) >> 6;
  while (2)
  {
    if (v87)
    {
      Class v88 = __clz(__rbit64(v87));
      v87 &= v87 - 1;
      int64_t v89 = v88 | (v143 << 6);
LABEL_98:
      int64_t v90 = v89 << 6;
      v91 = 8 * v89;
      v92 = v90 - v91;
      Class v93 = *(void *)(v72 + 48) + v92;
      Class v94 = *(void *)(v93 + 8);
      int64_t v95 = *(_BYTE *)(v93 + 48);
      int64_t v96 = *(void **)(*(void *)(v72 + 56) + v91);
      v97 = *(void *)(v78 + 48) + v92;
      v98 = *(_OWORD *)(v93 + 16);
      v148 = *(_OWORD *)(v93 + 32);
      *(_BYTE *)v97 = *(_BYTE *)v93;
      *(void *)(v97 + _Block_object_dispose(va, 8) = v94;
      *(_OWORD *)(v97 + 16) = v98;
      *(_OWORD *)(v97 + 32) = v148;
      *(_BYTE *)(v97 + 4_Block_object_dispose(va, 8) = v95;
      *(void *)(*(void *)(v78 + 56) + v91) = v96;
      swift_bridgeObjectRetain();
      swift_unknownObjectRetain();
      swift_unknownObjectRetain();
      Class v99 = v96;
      continue;
    }

    break;
  }

  Class v100 = v143 + 1;
  if (__OFADD__(v143, 1LL)) {
    goto LABEL_155;
  }
  if (v100 >= v137) {
    goto LABEL_122;
  }
  int64_t v101 = *(void *)&__srca[8 * v100];
  int64_t v102 = v143 + 1;
  if (v101) {
    goto LABEL_121;
  }
  int64_t v102 = v143 + 2;
  if (v143 + 2 >= v137) {
    goto LABEL_122;
  }
  int64_t v101 = *(void *)&__srca[8 * v102];
  if (v101) {
    goto LABEL_121;
  }
  int64_t v102 = v143 + 3;
  if (v143 + 3 >= v137) {
    goto LABEL_122;
  }
  int64_t v101 = *(void *)&__srca[8 * v102];
  if (v101) {
    goto LABEL_121;
  }
  int64_t v102 = v143 + 4;
  if (v143 + 4 >= v137) {
    goto LABEL_122;
  }
  int64_t v101 = *(void *)&__srca[8 * v102];
  if (v101) {
    goto LABEL_121;
  }
  int64_t v102 = v143 + 5;
  if (v143 + 5 >= v137) {
    goto LABEL_122;
  }
  int64_t v101 = *(void *)&__srca[8 * v102];
  if (v101) {
    goto LABEL_121;
  }
  int64_t v102 = v143 + 6;
  if (v143 + 6 >= v137) {
    goto LABEL_122;
  }
  int64_t v101 = *(void *)&__srca[8 * v102];
  if (v101) {
    goto LABEL_121;
  }
  int64_t v102 = v143 + 7;
  if (v143 + 7 >= v137) {
    goto LABEL_122;
  }
  int64_t v101 = *(void *)&__srca[8 * v102];
  if (v101)
  {
LABEL_121:
    v87 = (v101 - 1) & v101;
    v143 = v102;
    int64_t v89 = __clz(__rbit64(v101)) + (v102 << 6);
    goto LABEL_98;
  }

  v103 = v143 + 8;
  if (v143 + 8 >= v137) {
    goto LABEL_122;
  }
  int64_t v101 = *(void *)&__srca[8 * v103];
  if (v101)
  {
    int64_t v102 = v143 + 8;
    int64_t v78 = v135;
    goto LABEL_121;
  }

  while (1)
  {
    int64_t v102 = v103 + 1;
    if (__OFADD__(v103, 1LL)) {
      break;
    }
    int64_t v78 = v135;
    if (v102 >= v137) {
      goto LABEL_122;
    }
    int64_t v101 = *(void *)&__srca[8 * v102];
    ++v103;
    if (v101) {
      goto LABEL_121;
    }
  }

    objc_exception_throw((id)[MEMORY[0x189603F70] exceptionWithName:*MEMORY[0x189603A60] reason:v8 userInfo:0]);
    return +[NSMetadataQuery _stitchingClass](v29, v30);
  }

  Class v12 = "*";
  Class v13 = 4LL;
  unint64_t v14 = v4 - 7;
  int v15 = "*";
  int v16 = "";
  unint64_t v17 = "";
  switch(v14)
  {
    case 0uLL:
      goto LABEL_34;
    case 1uLL:
      int v15 = "";
      Class v13 = 4LL;
      goto LABEL_33;
    case 2uLL:
      int v15 = "*";
      Class v13 = 4LL;
      Class v12 = "";
      goto LABEL_33;
    case 3uLL:
      goto LABEL_33;
    default:
      int v15 = "*";
      if ("" != (char *)99)
      {
        Class v12 = "";
        int v15 = "";
        Class v13 = (uint64_t)"";
      }

    if (!disk_new) {
      goto LABEL_80;
    }
    goto LABEL_79;
  }

  v51 = a4;
  id v52 = disk_new;
  int v50 = (int)(strlen(v21) + 1);
  while (1)
  {
    while (1)
    {
      BOOL v22 = fts_read(v14);
      if (!v22)
      {
        a4 = v51;
        disk_new = v52;
        goto LABEL_61;
      }

      int v23 = v22;
      fts_info = v22->fts_info;
      if (fts_info > 0xE) {
        goto LABEL_24;
      }
      uint64_t v25 = 1 << fts_info;
      if ((v25 & 0x4266) == 0) {
        break;
      }
      if (!v15) {
        goto LABEL_58;
      }
    }

    if ((v25 & 0x490) != 0) {
      break;
    }
LABEL_24:
    fts_accpath = v22->fts_accpath;
    int64_t v27 = _NSOpenFileDescriptor(fts_accpath, 0, 0LL);
    if (v27)
    {
      if (v15)
      {
        int64_t v28 = archive_entry_new();
        archive_entry_set_pathname();
        if (archive_read_disk_entry_from_file())
        {
          if (a5)
          {
            uint64_t v29 = (int)archive_errno();
            int v15 = 0;
            *a5 = _NSErrorWithFilePathErrnoVariantAndExtraUserInfo( v29,  [MEMORY[0x189604030] fileURLWithFileSystemRepresentation:fts_accpath isDirectory:0 relativeToURL:0],  1,  0,  0);
          }

          else
          {
            int v15 = 0;
          }
        }

        else
        {
          v48[2] = v28;
          if (archive_write_header())
          {
            if (a5)
            {
              id v31 = archive_errno();
              int v15 = 0;
              *a5 = _NSErrorWithFilePathErrnoVariantAndExtraUserInfo(v31, (uint64_t)v51, 0, 0LL, 0LL);
            }

            else
            {
              int v15 = 0;
            }
          }

          else
          {
            id v32 = _NSPreferredChunkSizeForFileDescriptor(v27);
            if (v32 < v23->fts_statp->st_size) {
              id v32 = _NSPreferredChunkSizeForFileDescriptor(v27);
            }
            v48[1] = v48;
            MEMORY[0x1895F8858](v32);
            uint64_t v35 = (char *)v48 - v34;
            int v49 = v36;
            if (v36 > 0x100) {
              uint64_t v35 = (char *)malloc(v33);
            }
            else {
              bzero((char *)v48 - v34, v33);
            }
            Class v37 = v49;
            while (1)
            {
              int v38 = _NSReadFromFileDescriptorWithProgress(v27, v35, v37, 0LL, 0);
              if (v38 < 1) {
                break;
              }
              unsigned int v39 = archive_write_data();
              Class v37 = v49;
              if (v39 == -1)
              {
                if (a5)
                {
                  uint64_t v40 = (int)archive_errno();
                  uint64_t v41 = (uint64_t)v51;
                  size_t v42 = 0;
LABEL_52:
                  int v15 = 0;
                  *a5 = _NSErrorWithFilePathErrnoVariantAndExtraUserInfo(v40, v41, v42, 0LL, 0LL);
                  goto LABEL_54;
                }

                int v15 = 0;
                goto LABEL_54;
              }
            }

            if (v38) {
              int v15 = 0;
            }
            if (a5 && v38)
            {
              unint64_t v43 = *__error();
              uint64_t v41 = [MEMORY[0x189604030] fileURLWithFileSystemRepresentation:fts_accpath isDirectory:0 relativeToURL:0];
              uint64_t v40 = v43;
              size_t v42 = 1;
              goto LABEL_52;
            }

LABEL_151:
  if ((v53 & 1) == 0) {
    free(p_src);
  }
  ++a1[3].super.isa;
LABEL_33:
  --a1[4].super.isa;
LABEL_34:
  if (v106) {
    id v31 = v106;
  }
  objc_autoreleasePoolPop(v19);
  id v32 = v106;
  if (a2 && v106) {
    *a2 = v106;
  }
  id v33 = v32;
  return v11;
}

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v4;
}

                    if (v37)
                    {
LABEL_188:
                      __break(1u);
                      goto LABEL_189;
                    }

    v147 = (v152 - 1) & v152;
    v149 = __clz(__rbit64(v152)) + (v32 << 6);
LABEL_132:
    v150 = (unint64_t *)(*(void *)(v36 + 48) + 16 * v149);
    v151 = *v150;
    Class v37 = v150[1];
    swift_bridgeObjectRetain();
    id v31 = (uint64_t)&v373;
    specialized Set._Variant.insert(_:)((unint64_t *)&v448, v151, v37);
    uint64_t result = swift_bridgeObjectRelease();
  }

  v153 = v40 + 5;
  if (v153 >= v38) {
    goto LABEL_152;
  }
  v152 = *(void *)(v146 + 8 * v153);
  if (v152)
  {
    id v32 = v153;
    goto LABEL_151;
  }

  while (1)
  {
    id v32 = v153 + 1;
    if (__OFADD__(v153, 1LL)) {
      break;
    }
    if (v32 >= v38) {
      goto LABEL_152;
    }
    v152 = *(void *)(v146 + 8 * v32);
    ++v153;
    if (v152) {
      goto LABEL_151;
    }
  }

                                Class v12 = (void *)v68;
LABEL_152:
                                MEMORY[0x186E20E60](v94, -1LL, -1LL);
                                goto LABEL_153;
                              }

                              int64_t v69 = v79;
                            }
                          }
                        }
                      }

            __break(1u);
            goto LABEL_152;
          }

                                      objc_super v3 = v86;
LABEL_152:
                                      MEMORY[0x186E20E60](v118, -1LL, -1LL);
                                      return v3;
                                    }

                                    Class v99 = v87 + 6;
                                  }
                                }
                              }
                            }
                          }

    swift_unknownObjectRelease();
    outlined consume of TimeZone??(v216);
    return 0LL;
  }

  *(void *)&v368 = v216;
  *((void *)&v368 + 1) = v209;
  if (!v210)
  {
    outlined copy of TimeZone??(v216);
    outlined copy of TimeZone??(v216);
    outlined copy of TimeZone??(v216);
    outlined copy of TimeZone??(0LL);
    swift_unknownObjectRelease();
    goto LABEL_151;
  }

  v357 = v210;
  v358 = v208;
  outlined copy of TimeZone??(v216);
  outlined copy of TimeZone??(v216);
  swift_unknownObjectRetain();
  v356 = specialized static TimeZone.== infix(_:_:)((uint64_t)&v368, (uint64_t)&v357);
  swift_unknownObjectRelease();
  outlined consume of TimeZone??(v216);
  outlined consume of TimeZone??(v216);
  v155 = v228;
  if ((v356 & 1) == 0) {
    return 0LL;
  }
LABEL_100:
  if (v155 == 1)
  {
    v156 = v186;
    v157 = v228;
    if (v207 == 1) {
      goto LABEL_102;
    }
    goto LABEL_138;
  }

  v156 = v186;
  v157 = v228;
  if (v207 == 1)
  {
LABEL_138:
    Class v73 = v156;
    Class v74 = v157;
    outlined copy of Locale.Subdivision??(v156, v157);
    int64_t v75 = v203;
    int64_t v76 = v203;
    Class v77 = v207;
    int64_t v78 = v207;
    goto LABEL_34;
  }

  if (!v228)
  {
    if (!v207)
    {
      outlined copy of Locale.Subdivision??(v186, 0LL);
      outlined copy of Locale.Subdivision??(v203, 0LL);
      goto LABEL_102;
    }

    outlined copy of Locale.LanguageCode?(v186, 0LL);
LABEL_168:
    outlined copy of Locale.LanguageCode?(v203, v207);
    outlined consume of Locale.LanguageCode?(v186, v228);
    outlined consume of Locale.LanguageCode?(v203, v207);
    outlined consume of Locale.Subdivision??(v186, v228);
    return 0LL;
  }

  if (!v207)
  {
    outlined copy of Locale.Subdivision??(v186, v228);
    outlined copy of Locale.Subdivision??(v186, v228);
    outlined copy of Locale.Subdivision??(v186, v228);
    outlined copy of Locale.Subdivision??(v203, 0LL);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_168;
  }

  if ((v148 != v205 || v149 != v206) && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
    return 0LL;
  }
LABEL_102:
  if (!v204)
  {
    if (!v202) {
      goto LABEL_153;
    }
    return 0LL;
  }

  if (!v202 || (v201 != v200 || v204 != v202) && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
    return 0LL;
  }
LABEL_153:
  if ((specialized static Dictionary<>.== infix(_:_:)(v198, v196) & 1) == 0
    || (specialized static Dictionary<>.== infix(_:_:)(v199, v197) & 1) == 0
    || (specialized static Dictionary<>.== infix(_:_:)(v164, v191) & 1) == 0
    || (specialized static Dictionary<>.== infix(_:_:)(v147, v192) & 1) == 0
    || (specialized static Dictionary<>.== infix(_:_:)(v150, v193) & 1) == 0
    || (specialized static Dictionary<>.== infix(_:_:)(v151, v194) & 1) == 0
    || (specialized static Dictionary<>.== infix(_:_:)(v152, v195) & 1) == 0
    || (specialized static Dictionary<>.== infix(_:_:)(v153, v184) & 1) == 0
    || (specialized static Dictionary<>.== infix(_:_:)(v154, v185) & 1) == 0
    || (specialized static Dictionary<>.== infix(_:_:)(v167, v173) & 1) == 0)
  {
    return 0LL;
  }

  return specialized static Dictionary<>.== infix(_:_:)(v22, v183);
}

  __break(1u);
  return result;
}

    v152 = (v157 - 1) & v157;
    v154 = __clz(__rbit64(v157)) + (v31 << 6);
LABEL_132:
    v155 = (unint64_t *)(*(void *)(v35 + 48) + 16 * v154);
    Class v37 = *v155;
    v156 = v155[1];
    swift_bridgeObjectRetain();
    uint64_t v30 = (uint64_t)&v378;
    specialized Set._Variant.insert(_:)((unint64_t *)&v453, v37, v156);
    uint64_t result = swift_bridgeObjectRelease();
  }

  v158 = v40 + 5;
  if (v158 >= v38) {
    goto LABEL_152;
  }
  v157 = *(void *)(v151 + 8 * v158);
  if (v157)
  {
    id v31 = v158;
    goto LABEL_151;
  }

  while (1)
  {
    id v31 = v158 + 1;
    if (__OFADD__(v158, 1LL)) {
      break;
    }
    if (v31 >= v38) {
      goto LABEL_152;
    }
    v157 = *(void *)(v151 + 8 * v31);
    ++v158;
    if (v157) {
      goto LABEL_151;
    }
  }

                v84 = (4 * *((_BYTE *)v83 + 18) + 8) & 0x3C;
                int64_t v82 = ((-15LL << v84) - 1) & v82 | (v29 << v84);
                int v15 = (void *)v83[3 * v29 + 3];
                swift_unknownObjectRetain();
                uint64_t result = swift_unknownObjectRelease();
                int64_t v83 = v15;
                if (!*((_BYTE *)v15 + 18)) {
                  goto LABEL_212;
                }
              }
            }

            uint64_t result = swift_unknownObjectRetain_n();
            unint64_t v17 = v10;
            int v15 = (void *)v80;
LABEL_212:
            v125 = *((unsigned __int16 *)v15 + 8);
            if (*((_WORD *)v15 + 8))
            {
              v126 = v15[3];
              BOOL v22 = __OFSUB__(v17, v126);
              v127 = v17 - v126;
              if (v22) {
                goto LABEL_399;
              }
              if (__OFADD__(v127, 1LL)) {
                goto LABEL_400;
              }
              if (v127 + 1 < 1)
              {
                v125 = 0LL;
              }

              else
              {
                if ((_DWORD)v125 == 1)
                {
                  unint64_t v17 = v127;
                  goto LABEL_230;
                }

                v131 = v15 + 6;
                v132 = 1LL;
                while (1)
                {
                  v133 = *v131;
                  v131 += 3;
                  unint64_t v17 = v127 - v133;
                  if (__OFSUB__(v127, v133)) {
                    goto LABEL_373;
                  }
                  if (__OFADD__(v17, 1LL)) {
                    goto LABEL_374;
                  }
                  if (v17 + 1 < 1) {
                    break;
                  }
                  ++v132;
                  v127 = v17;
                  if (v125 == v132) {
                    goto LABEL_230;
                  }
                }

                v125 = v132;
                unint64_t v17 = v127;
              }
            }

            else
            {
LABEL_230:
              if (v17) {
                goto LABEL_395;
              }
            }

            swift_unknownObjectRelease();
            swift_unknownObjectRelease();
            v92 = v82 & 0xFFFFFFFFFFFFF0FFLL | (v125 << 8);
            unint64_t v34 = a4;
LABEL_171:
            swift_unknownObjectRetain();
            v181 = v92;
            v180 = specialized Rope._Node.distanceFromStart<A>(to:in:)(v175, v92, (uint64_t)v15, v80, a5);
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            uint64_t result = swift_unknownObjectRelease_n();
          }

          else
          {
            v91 = swift_unknownObjectRetain_n();
            v92 = specialized Rope._endPath.getter(v91);
            swift_unknownObjectRelease();
            unint64_t v17 = 0LL;
            int v15 = 0LL;
            if (v80) {
              goto LABEL_171;
            }
            v181 = v92;
            swift_bridgeObjectRelease();
            uint64_t result = swift_bridgeObjectRelease();
            v180 = 0LL;
          }

          unsigned int v9 = a3;
          BOOL v22 = __OFSUB__(v10, v17);
          v10 -= v17;
          if (v22) {
            goto LABEL_370;
          }
          int64_t v89 = v175;
          goto LABEL_235;
        }

        unsigned int v9 = a3;
        if (v35 != a3[11]) {
          goto LABEL_359;
        }
        if (!*v179) {
          goto LABEL_415;
        }
        specialized Rope._Node._prepareModify(at:)(v181, (uint64_t)&v191);
        v206[0] = v192;
        v186 = v191;
        v187 = v192;
        v188 = v193;
        outlined release of [String : AttributedString._AttributeValue]((uint64_t)v206);
        uint64_t result = outlined release of [String : AttributedString._AttributeValue]((uint64_t)v206 + 8);
        v187 = MEMORY[0x18961AFF0];
        Class v67 = v35 + 1;
        a3[11] = v35 + 1;
        if (!a3[8]) {
          goto LABEL_416;
        }
        specialized Rope._Node._finalizeModify(_:)(&v183, &v186);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v172(&v190, v10, v62, &v189);
        if ((v189 & 1) == 0)
        {
          uint64_t result = v181;
          if (v67 != a3[11]) {
            goto LABEL_369;
          }
          if (!*v179) {
            goto LABEL_419;
          }
          specialized Rope._Node._prepareModify(at:)(v181, (uint64_t)&v200);
          v205 = v201;
          v186 = v200;
          v187 = v201;
          v188 = v202;
          int64_t v90 = v190;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          outlined release of [String : AttributedString._AttributeValue]((uint64_t)&v205);
          uint64_t result = outlined release of [String : AttributedString._AttributeValue]((uint64_t)&v205 + 8);
          v187 = v90;
          int64_t v89 = v35 + 2;
          a3[11] = v35 + 2;
          if (!a3[8]) {
            goto LABEL_420;
          }
          int v15 = specialized Rope._Node._finalizeModify(_:)(&v183, &v186);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          goto LABEL_210;
        }

        uint64_t result = v181;
        if (v67 != a3[11]) {
          goto LABEL_367;
        }
        if (!*v179) {
          goto LABEL_417;
        }
        specialized Rope._Node._prepareModify(at:)(v181, (uint64_t)&v194);
        v203 = v195;
        v204 = v196;
        outlined release of [String : AttributedString._AttributeValue]((uint64_t)&v203);
        outlined release of [String : AttributedString._AttributeValue]((uint64_t)&v204);
        v186 = v194;
        v188 = v197;
        int64_t v68 = *((void *)&v190 + 1);
        uint64_t result = v190;
        v187 = v190;
        a3[11] = v35 + 2;
        if (!a3[8]) {
          goto LABEL_418;
        }
        v171 = result;
        swift_bridgeObjectRetain_n();
        v170 = v68;
        swift_bridgeObjectRetain_n();
        int v15 = specialized Rope._Node._finalizeModify(_:)(v182, &v186);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        int64_t v69 = a3[8];
        v70 = a3[9];
        v71 = a3[10];
        Class v72 = a3[11];
        v174 = v35 + 2;
        *(void *)&v186 = v35 + 2;
        *((void *)&v186 + 1) = v181;
        *(void *)&v187 = v15;
        swift_unknownObjectRetain();
        specialized Rope.formIndex(after:)(&v186, v69, v70, v71, v72);
        swift_unknownObjectRelease();
        Class v73 = v186;
        Class v74 = v187;
        int64_t v75 = swift_unknownObjectRetain();
        int64_t v76 = specialized Rope._endPath.getter(v75);
        uint64_t result = swift_unknownObjectRelease();
        if (*((void *)&v73 + 1) >= v76)
        {
          unint64_t v34 = a4;
        }

        else
        {
          unint64_t v34 = a4;
          if ((void)v73 != a3[11]) {
            goto LABEL_379;
          }
          if (v74)
          {
            Class v77 = v74 + 24 * ((*((void *)&v73 + 1) >> ((4 * *(_BYTE *)(v74 + 18) + 8) & 0x3C)) & 0xFLL);
            int64_t v79 = *(void *)(v77 + 32);
            int64_t v78 = *(void *)(v77 + 40);
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
          }

          else
          {
            Class v93 = a3[8];
            swift_unknownObjectRetain();
            unint64_t v34 = a4;
            specialized Rope._Node.subscript.getter(*((unint64_t *)&v73 + 1), v93);
            int64_t v79 = v94;
            int64_t v78 = v95;
            swift_unknownObjectRelease();
          }

          if ((specialized static Dictionary<>.== infix(_:_:)(v79, v171) & 1) != 0)
          {
            int64_t v96 = specialized static Set.== infix(_:_:)(v78, v170);
            swift_bridgeObjectRelease();
            uint64_t result = swift_bridgeObjectRelease();
            if ((v96 & 1) != 0)
            {
              v97 = v179;
              v98 = specialized Rope._remove(at:)((uint64_t)&v186, v174, v181);
              Class v99 = a3[8];
              Class v100 = a3[11];
              int64_t v101 = v98;
              if (v98 < specialized Rope._endPath.getter(v99) && *(_BYTE *)(v99 + 18))
              {
                int64_t v102 = (v98 >> ((4 * *(_BYTE *)(v99 + 18) + 8) & 0x3C)) & 0xF;
                swift_unknownObjectRetain();
                v97 = v179;
                specialized closure #1 in Rope._Node.unmanagedLeaf(at:)(v99 + 24, v102, v98);
                swift_unknownObjectRelease();
              }

              v103 = v186;
              swift_bridgeObjectRelease();
              uint64_t result = swift_bridgeObjectRelease();
              if (v100 != a3[11]) {
                goto LABEL_401;
              }
              if (!*v97) {
                goto LABEL_421;
              }
              uint64_t result = specialized Rope._Node._prepareModify(at:)(v98, (uint64_t)v198);
              v186 = v198[0];
              v187 = v198[1];
              v188 = v198[2];
              if (__OFADD__(*((void *)&v198[0] + 1), v103)) {
                goto LABEL_402;
              }
              *((void *)&v186 + 1) = *((void *)&v198[0] + 1) + v103;
              v174 = v100 + 1;
              a3[11] = v100 + 1;
              if (!a3[8]) {
                goto LABEL_422;
              }
              int v15 = specialized Rope._Node._finalizeModify(_:)(v182, &v186);
              swift_bridgeObjectRelease();
              uint64_t result = swift_bridgeObjectRelease();
              goto LABEL_186;
            }
          }

          else
          {
            swift_bridgeObjectRelease();
            uint64_t result = swift_bridgeObjectRelease();
          }
        }

        int64_t v101 = v181;
LABEL_186:
        v104 = *v179;
        if (*v179) {
          v104 = *(unsigned __int8 *)(v104 + 18);
        }
        int64_t v89 = v174;
        v181 = v101;
        if (v101 <= v104)
        {
          swift_bridgeObjectRelease_n();
          uint64_t result = swift_bridgeObjectRelease_n();
          goto LABEL_235;
        }

        v105 = a3[8];
        id v106 = a3[11];
        *(void *)&v186 = v174;
        *((void *)&v186 + 1) = v101;
        *(void *)&v187 = v15;
        if (v174 != v106) {
          goto LABEL_380;
        }
        if (v105)
        {
          v107 = *(unsigned __int8 *)(v105 + 18);
          uint64_t result = swift_unknownObjectRetain();
          if (v101 <= v107) {
            goto LABEL_381;
          }
        }

        else if (!v101)
        {
          goto LABEL_381;
        }

        v108 = (4 * *((_BYTE *)v15 + 18) + 8) & 0x3C;
        if (((v101 >> v108) & 0xF) != 0)
        {
          v109 = ((((v101 >> v108) & 0xF) - 1) << v108) | ((-15LL << v108) - 1) & v101;
          uint64_t result = swift_unknownObjectRelease();
          v110 = v15;
          v111 = v174;
        }

        else
        {
          swift_unknownObjectRetain();
          v112 = specialized Rope._Node.formPredecessor(of:)((uint64_t)&v186, v105);
          uint64_t result = swift_unknownObjectRelease_n();
          if ((v112 & 1) == 0) {
            goto LABEL_396;
          }
          v109 = *((void *)&v186 + 1);
          v111 = v186;
          v110 = (void *)v187;
        }

        if (v111 != a3[11]) {
          goto LABEL_382;
        }
        if (v110)
        {
          uint64_t v113 = &v110[3 * ((v109 >> ((4 * *((_BYTE *)v110 + 18) + 8) & 0x3C)) & 0xF)];
          v115 = v113[4];
          v114 = v113[5];
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
        }

        else
        {
          v116 = a3[8];
          swift_unknownObjectRetain();
          unint64_t v34 = a4;
          specialized Rope._Node.subscript.getter(v109, v116);
          v115 = v117;
          v114 = v118;
          swift_unknownObjectRelease();
        }

        if ((specialized static Dictionary<>.== infix(_:_:)(v115, v171) & 1) == 0)
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease_n();
LABEL_209:
          swift_bridgeObjectRelease();
LABEL_210:
          uint64_t result = swift_bridgeObjectRelease();
          goto LABEL_235;
        }

        v119 = specialized static Set.== infix(_:_:)(v114, v170);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if ((v119 & 1) == 0) {
          goto LABEL_209;
        }
        v120 = specialized Rope._remove(at:)((uint64_t)&v186, v174, v101);
        v121 = a3[8];
        v122 = a3[11];
        if (v120 >= specialized Rope._endPath.getter(v121))
        {
          v121 = 0LL;
        }

        else if (*(_BYTE *)(v121 + 18))
        {
          v123 = (v120 >> ((4 * *(_BYTE *)(v121 + 18) + 8) & 0x3C)) & 0xF;
          swift_unknownObjectRetain();
          v124 = specialized closure #1 in Rope._Node.unmanagedLeaf(at:)(v121 + 24, v123, v120);
          swift_unknownObjectRelease();
          v121 = v124;
        }

        v183 = v122;
        v184 = v120;
        v185 = v121;
        v128 = v186;
        swift_bridgeObjectRelease();
        uint64_t result = swift_bridgeObjectRelease();
        if (v122 != a3[11]) {
          goto LABEL_403;
        }
        v129 = a3[8];
        if (v129)
        {
          v130 = *(unsigned __int8 *)(v129 + 18);
          uint64_t result = swift_unknownObjectRetain();
          if (v120 <= v130) {
            goto LABEL_404;
          }
        }

        else if (!v120)
        {
          goto LABEL_404;
        }

        if (v121 && (v166 = (4 * *(_BYTE *)(v121 + 18) + 8) & 0x3C, ((v120 >> v166) & 0xF) != 0))
        {
          v184 = ((((v120 >> v166) & 0xF) - 1) << v166) | ((-15LL << v166) - 1) & v120;
          uint64_t result = swift_unknownObjectRelease();
        }

        else
        {
          swift_unknownObjectRetain();
          v167 = specialized Rope._Node.formPredecessor(of:)((uint64_t)&v183, v129);
          uint64_t result = swift_unknownObjectRelease_n();
          if ((v167 & 1) == 0) {
            goto LABEL_409;
          }
          v122 = v183;
        }

        unint64_t v34 = a4;
        if (v122 != a3[11]) {
          goto LABEL_405;
        }
        if (!*v179) {
          goto LABEL_423;
        }
        v181 = v184;
        uint64_t result = specialized Rope._Node._prepareModify(at:)(v184, (uint64_t)v199);
        v186 = v199[0];
        v187 = v199[1];
        v188 = v199[2];
        BOOL v22 = __OFSUB__(v10, *((void *)&v199[0] + 1));
        v10 -= *((void *)&v199[0] + 1);
        if (v22) {
          goto LABEL_406;
        }
        if (__OFADD__(*((void *)&v199[0] + 1), v128)) {
          goto LABEL_407;
        }
        *((void *)&v186 + 1) = *((void *)&v199[0] + 1) + v128;
        int64_t v89 = v122 + 1;
        unsigned int v9 = a3;
        a3[11] = v122 + 1;
        if (!a3[8]) {
          goto LABEL_424;
        }
        int v15 = specialized Rope._Node._finalizeModify(_:)(v182, &v186);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t result = swift_bridgeObjectRelease();
        if (__OFSUB__(v180, 1LL)) {
          goto LABEL_408;
        }
        --v180;
LABEL_235:
        v134 = v9[8];
        v135 = v9[11];
        *(void *)&v186 = v89;
        *((void *)&v186 + 1) = v181;
        *(void *)&v187 = v15;
        BOOL v22 = __OFADD__(v180++, 1LL);
        if (v22) {
          goto LABEL_348;
        }
        if (v89 != v135) {
          goto LABEL_349;
        }
        v136 = v89;
        if (v15)
        {
          v137 = &v15[3 * ((v181 >> ((4 * *((_BYTE *)v15 + 18) + 8) & 0x3C)) & 0xF)];
          v138 = v137[3];
          CFArrayRef v11 = v137[5];
          swift_unknownObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
        }

        else
        {
          swift_unknownObjectRetain();
          v138 = specialized Rope._Node.subscript.getter(v181, v134);
          CFArrayRef v11 = v139;
        }

        swift_bridgeObjectRelease();
        uint64_t result = swift_bridgeObjectRelease();
        BOOL v22 = __OFADD__(v10, v138);
        v10 += v138;
        if (v22) {
          goto LABEL_350;
        }
        if (v134)
        {
          v140 = ((-15LL << ((4 * *(_BYTE *)(v134 + 18) + 8) & 0x3C)) - 1) & (unint64_t)*(unsigned __int8 *)(v134 + 18) | ((unint64_t)*(unsigned __int16 *)(v134 + 16) << ((4 * *(_BYTE *)(v134 + 18) + 8) & 0x3C));
          uint64_t result = swift_unknownObjectRetain();
        }

        else
        {
          v140 = 0LL;
        }

        if (v181 >= v140) {
          goto LABEL_351;
        }
        if (v15
          && (v141 = (4 * *((_BYTE *)v15 + 18) + 8) & 0x3C,
              v142 = ((v181 >> v141) & 0xF) + 1,
              v142 < *((unsigned __int16 *)v15 + 8)))
        {
          Class v36 = (v142 << v141) | ((-15LL << v141) - 1) & v181;
          uint64_t result = swift_unknownObjectRelease_n();
        }

        else
        {
          v143 = *(unsigned __int8 *)(v134 + 18);
          v144 = (4 * v143 + 8) & 0x3C;
          v183 = (v181 >> v144) & 0xF;
          if (v143)
          {
            swift_unknownObjectRetain();
            v145 = specialized closure #1 in Rope._Node.formSuccessor(of:)(v134 + 24, &v183, (uint64_t)&v186, v134, v143);
            uint64_t result = swift_unknownObjectRelease();
            if ((v145 & 1) == 0) {
              goto LABEL_254;
            }
            uint64_t result = swift_unknownObjectRelease_n();
            Class v36 = *((void *)&v186 + 1);
          }

          else
          {
            v146 = ((v181 >> v144) & 0xF) + 1;
            if (v146 >= *(unsigned __int16 *)(v134 + 16))
            {
LABEL_254:
              if (v134)
              {
                v147 = *(unsigned __int8 *)(v134 + 18);
                v148 = *(unsigned __int16 *)(v134 + 16);
                uint64_t result = swift_unknownObjectRelease_n();
                Class v36 = ((-15LL << ((4 * v147 + 8) & 0x3C)) - 1) & v147 | (unint64_t)(v148 << ((4 * v147 + 8) & 0x3C));
              }

              else
              {
                Class v36 = 0LL;
              }

              id v33 = v178;
              *(void *)&v186 = v136;
              *((void *)&v186 + 1) = v36;
              *(void *)&v187 = 0LL;
              goto LABEL_258;
            }

            Class v36 = (v146 << v144) | ((-15LL << v144) - 1) & v181;
            *((void *)&v186 + 1) = v36;
            uint64_t result = swift_unknownObjectRelease_n();
            *(void *)&v187 = v134;
          }
        }

        id v33 = v178;
LABEL_258:
        uint64_t v35 = v186;
        int v15 = (void *)v187;
        if (v10 >= v33)
        {
          v149 = *v179;
          if (v34 == v33)
          {
            uint64_t v35 = v9[11];
            if (v149)
            {
              v150 = v9[10];
              if (v150 < v34) {
                goto LABEL_378;
              }
              v151 = v9[11];
              CFArrayRef v11 = v9[9];
              v152 = *(unsigned __int8 *)(v149 + 18);
              if (*(_WORD *)(v149 + 16) && v150 > v34)
              {
                if (*(_BYTE *)(v149 + 18))
                {
                  uint64_t result = swift_unknownObjectRetain_n();
                  v153 = (void *)v149;
                  while (1)
                  {
                    v155 = *((unsigned __int16 *)v153 + 8);
                    if (!*((_WORD *)v153 + 8)) {
                      goto LABEL_267;
                    }
                    v156 = v153[5];
                    v157 = v34 - v156;
                    if (__OFSUB__(v34, v156)) {
                      goto LABEL_354;
                    }
                    if (__OFADD__(v157, 1LL)) {
                      goto LABEL_355;
                    }
                    if (v157 + 1 <= 0)
                    {
                      v155 = 0LL;
                    }

                    else
                    {
                      if ((_DWORD)v155 == 1)
                      {
                        v34 -= v156;
LABEL_267:
                        if (v34) {
                          goto LABEL_352;
                        }
                        goto LABEL_268;
                      }

                      v158 = v153[8];
                      BOOL v22 = __OFSUB__(v157, v158);
                      v159 = v157 - v158;
                      if (v22) {
                        goto LABEL_364;
                      }
                      if (__OFADD__(v159, 1LL)) {
                        goto LABEL_365;
                      }
                      if (v159 + 1 >= 1)
                      {
                        if ((_DWORD)v155 != 2)
                        {
                          v160 = v153 + 11;
                          v161 = 2LL;
                          while (v155 != v161)
                          {
                            unint64_t v34 = v159 - *v160;
                            if (__OFSUB__(v159, *v160)) {
                              goto LABEL_341;
                            }
                            if (__OFADD__(v34, 1LL)) {
                              goto LABEL_342;
                            }
                            if (v34 + 1 < 1)
                            {
                              v155 = v161;
                              unint64_t v34 = v159;
                              goto LABEL_268;
                            }

                            ++v161;
                            v160 += 3;
                            v159 = v34;
                            if (v155 == v161) {
                              goto LABEL_267;
                            }
                          }

                  v87 = (4 * *((_BYTE *)v5 + 18) + 8) & 0x3C;
                  v86 = ((-15LL << v87) - 1) & v86 | (v27 << v87);
                  Class v13 = (void *)v5[3 * v27 + 3];
                  swift_unknownObjectRetain();
                  uint64_t result = swift_unknownObjectRelease();
                  Class v5 = v13;
                  if (!*((_BYTE *)v13 + 18)) {
                    goto LABEL_212;
                  }
                }
              }

              uint64_t result = swift_unknownObjectRetain_n();
              int v15 = v31;
              Class v13 = (void *)v83;
LABEL_212:
              v128 = *((unsigned __int16 *)v13 + 8);
              if (*((_WORD *)v13 + 8))
              {
                v129 = v13[3];
                Class v20 = __OFSUB__(v15, v129);
                v130 = v15 - v129;
                if (v20) {
                  goto LABEL_401;
                }
                if (__OFADD__(v130, 1LL)) {
                  goto LABEL_402;
                }
                if (v130 + 1 <= 0)
                {
                  Class v94 = v85;
                  v128 = 0LL;
                }

                else
                {
                  if ((_DWORD)v128 == 1)
                  {
                    int v15 = v130;
                    goto LABEL_230;
                  }

                  v134 = v13 + 6;
                  v135 = 1LL;
                  while (1)
                  {
                    v136 = *v134;
                    v134 += 3;
                    int v15 = v130 - v136;
                    if (__OFSUB__(v130, v136)) {
                      goto LABEL_375;
                    }
                    if (__OFADD__(v15, 1LL)) {
                      goto LABEL_376;
                    }
                    if (v15 + 1 < 1) {
                      break;
                    }
                    ++v135;
                    v130 = v15;
                    if (v128 == v135) {
                      goto LABEL_230;
                    }
                  }

                  Class v94 = v85;
                  v128 = v135;
                  int v15 = v130;
                }
              }

              else
              {
LABEL_230:
                if (v15) {
                  goto LABEL_397;
                }
                Class v94 = v85;
              }

              swift_unknownObjectRelease();
              swift_unknownObjectRelease();
              char v53 = v86 & 0xFFFFFFFFFFFFF0FFLL | (v128 << 8);
              Class v5 = v171;
LABEL_171:
              swift_unknownObjectRetain();
              v179 = specialized Rope._Node.distanceFromStart<A>(to:in:)(v181, v53, (uint64_t)v13, v83, v94);
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              uint64_t result = swift_unknownObjectRelease_n();
            }

            else
            {
              Class v93 = swift_unknownObjectRetain_n();
              Class v94 = v85;
              char v53 = specialized Rope._endPath.getter(v93);
              swift_unknownObjectRelease();
              Class v13 = 0LL;
              int v15 = 0LL;
              if (v83) {
                goto LABEL_171;
              }
              swift_bridgeObjectRelease();
              uint64_t result = swift_bridgeObjectRelease();
              v179 = 0LL;
            }

            int64_t v7 = a3;
            unsigned int v9 = a2;
            Class v20 = __OFSUB__(v31, v15);
            v31 -= v15;
            if (v20) {
              goto LABEL_372;
            }
          }

          else
          {
LABEL_210:
            swift_bridgeObjectRelease();
            uint64_t result = swift_bridgeObjectRelease();
          }

          Class v67 = v180;
          goto LABEL_236;
        }

        Class v67 = v180;
        if (v181 != v180[11]) {
          goto LABEL_361;
        }
        if (!*v5) {
          goto LABEL_417;
        }
        specialized Rope._Node._prepareModify(at:)(v53, (uint64_t)&v190);
        v205[0] = v191;
        v186 = v190;
        v187 = v191;
        v188 = v192;
        outlined release of [String : AttributedString._AttributeValue]((uint64_t)v205);
        uint64_t result = outlined release of [String : AttributedString._AttributeValue]((uint64_t)v205 + 8);
        v187 = MEMORY[0x18961AFF0];
        int64_t v68 = v181 + 1;
        v180[11] = v181 + 1;
        if (!v180[8]) {
          goto LABEL_418;
        }
        specialized Rope._Node._finalizeModify(_:)(&v183, &v186);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v186 = 0uLL;
        uint64_t result = specialized AttributedString._AttributeStorage.matchStyle(of:for:)(a4, (uint64_t *)&v186);
        if ((result & 1) == 0)
        {
          if (v68 != v180[11]) {
            goto LABEL_371;
          }
          if (!*v5) {
            goto LABEL_421;
          }
          specialized Rope._Node._prepareModify(at:)(v53, (uint64_t)&v199);
          v204 = v200;
          v186 = v199;
          v187 = v200;
          v188 = v201;
          v92 = v189;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          outlined release of [String : AttributedString._AttributeValue]((uint64_t)&v204);
          uint64_t result = outlined release of [String : AttributedString._AttributeValue]((uint64_t)&v204 + 8);
          v187 = v92;
          v181 += 2LL;
          v180[11] = v181;
          if (!v180[8]) {
            goto LABEL_422;
          }
          Class v13 = specialized Rope._Node._finalizeModify(_:)(&v183, &v186);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          uint64_t result = swift_bridgeObjectRelease();
          goto LABEL_236;
        }

        if (v68 != v180[11]) {
          goto LABEL_369;
        }
        if (!*v5) {
          goto LABEL_419;
        }
        specialized Rope._Node._prepareModify(at:)(v53, (uint64_t)&v193);
        v202 = v194;
        v203 = v195;
        outlined release of [String : AttributedString._AttributeValue]((uint64_t)&v202);
        outlined release of [String : AttributedString._AttributeValue]((uint64_t)&v203);
        v186 = v193;
        v188 = v196;
        int64_t v69 = *((void *)&v189 + 1);
        uint64_t result = v189;
        v187 = v189;
        v70 = v53;
        v71 = v181 + 2;
        v180[11] = v181 + 2;
        if (!v180[8]) {
          goto LABEL_420;
        }
        v174 = result;
        swift_bridgeObjectRetain_n();
        v172 = v69;
        swift_bridgeObjectRetain_n();
        Class v13 = specialized Rope._Node._finalizeModify(_:)(v182, &v186);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        Class v72 = v180[8];
        Class v73 = v180[9];
        Class v74 = v180[10];
        int64_t v75 = v180[11];
        v181 += 2LL;
        *(void *)&v186 = v71;
        *((void *)&v186 + 1) = v70;
        *(void *)&v187 = v13;
        swift_unknownObjectRetain();
        specialized Rope.formIndex(after:)(&v186, v72, v73, v74, v75);
        swift_unknownObjectRelease();
        int64_t v76 = v186;
        Class v77 = v187;
        int64_t v78 = swift_unknownObjectRetain();
        int64_t v79 = specialized Rope._endPath.getter(v78);
        uint64_t result = swift_unknownObjectRelease();
        if (*((void *)&v76 + 1) >= v79)
        {
          int64_t v7 = a3;
          unsigned int v9 = a2;
          Class v5 = v171;
          char v53 = v178;
        }

        else
        {
          int64_t v7 = a3;
          unsigned int v9 = a2;
          if ((void)v76 != v180[11]) {
            goto LABEL_381;
          }
          if (v77)
          {
            v80 = v77 + 24 * ((*((void *)&v76 + 1) >> ((4 * *(_BYTE *)(v77 + 18) + 8) & 0x3C)) & 0xFLL);
            Class v81 = *(void *)(v80 + 32);
            int64_t v82 = *(void *)(v80 + 40);
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
          }

          else
          {
            int64_t v95 = v180[8];
            swift_unknownObjectRetain();
            unsigned int v9 = a2;
            specialized Rope._Node.subscript.getter(*((unint64_t *)&v76 + 1), v95);
            Class v81 = v96;
            int64_t v82 = v97;
            swift_unknownObjectRelease();
          }

          Class v5 = v171;
          char v53 = v178;
          if ((specialized static Dictionary<>.== infix(_:_:)(v81, v174) & 1) == 0)
          {
            swift_bridgeObjectRelease();
LABEL_185:
            uint64_t result = swift_bridgeObjectRelease();
            goto LABEL_186;
          }

          v98 = specialized static Set.== infix(_:_:)(v82, v172);
          swift_bridgeObjectRelease();
          uint64_t result = swift_bridgeObjectRelease();
          if ((v98 & 1) != 0)
          {
            char v53 = specialized Rope._remove(at:)((uint64_t)&v186, v181, v178);
            Class v99 = v180;
            Class v100 = v180[8];
            int64_t v101 = v180[11];
            if (v53 < specialized Rope._endPath.getter(v100) && *(_BYTE *)(v100 + 18))
            {
              int64_t v102 = (v53 >> ((4 * *(_BYTE *)(v100 + 18) + 8) & 0x3C)) & 0xF;
              swift_unknownObjectRetain();
              unsigned int v9 = a2;
              v103 = v102;
              Class v99 = v180;
              specialized closure #1 in Rope._Node.unmanagedLeaf(at:)(v100 + 24, v103, v53);
              swift_unknownObjectRelease();
            }

            v104 = v186;
            swift_bridgeObjectRelease();
            uint64_t result = swift_bridgeObjectRelease();
            if (v101 != v99[11]) {
              goto LABEL_403;
            }
            if (!*v171) {
              goto LABEL_423;
            }
            uint64_t result = specialized Rope._Node._prepareModify(at:)(v53, (uint64_t)v197);
            v186 = v197[0];
            v187 = v197[1];
            v188 = v197[2];
            if (__OFADD__(*((void *)&v197[0] + 1), v104)) {
              goto LABEL_404;
            }
            *((void *)&v186 + 1) = *((void *)&v197[0] + 1) + v104;
            v181 = v101 + 1;
            v99[11] = v101 + 1;
            if (!v99[8]) {
              goto LABEL_424;
            }
            Class v13 = specialized Rope._Node._finalizeModify(_:)(v182, &v186);
            swift_bridgeObjectRelease();
            goto LABEL_185;
          }
        }

                                objc_super v3 = v75;
LABEL_152:
                                MEMORY[0x186E20E60](v103, -1LL, -1LL);
                                goto LABEL_153;
                              }

                              int64_t v76 = v87;
                            }
                          }
                        }
                      }

  _Block_object_dispose(v108, 8);
  if (-[NSString length](v34, "length"))
  {
    if (v100->_includesApproximationPhrase)
    {
      int64_t v82 = !v100->_includesTimeRemainingPhrase;
      int64_t v83 = objc_alloc(&OBJC_CLASS___NSString);
      v84 = (void *)_NSFoundationBundle();
      if (v82) {
        v85 = -[NSString initWithFormat:locale:]( v83,  "initWithFormat:locale:",  [v84 localizedStringForKey:@"About %@" value:&stru_189CA6A28 table:@"DurationFormatting"],  v98,  v34);
      }
      else {
        v85 = -[NSString initWithFormat:locale:]( v83,  "initWithFormat:locale:",  [v84 localizedStringForKey:@"About %@ remaining" value:&stru_189CA6A28 table:@"DurationFormatting"],  v98,  v34);
      }
      goto LABEL_159;
    }

    if (v100->_includesTimeRemainingPhrase)
    {
      v85 = -[NSString initWithFormat:locale:]( [NSString alloc],  "initWithFormat:locale:",  [(id)_NSFoundationBundle() localizedStringForKey:@"%@ remaining" value:&stru_189CA6A28 table:@"DurationFormatting"],  v98,  v34);
LABEL_159:
      unint64_t v34 = (NSMutableString *)v85;
      goto LABEL_160;
    }
  }

  v86 = v34;
LABEL_160:
  objc_autoreleasePoolPop(context);
  return v34;
}

id newJSONObject(uint64_t a1, char a2, void *a3)
{
  uint64_t v95 = *MEMORY[0x1895F89C0];
  if ((a2 & 1) == 0)
  {
    unint64_t v5 = *(void *)(a1 + 24);
LABEL_5:
    if (*(void *)(a1 + 16) <= v5 + 1)
    {
      if (a3)
      {
        unint64_t v7 = *(void *)(a1 + 48);
        BOOL v8 = v5 >= v7;
        uint64_t v9 = v5 - v7;
        if (v8) {
          uint64_t v10 = v9;
        }
        else {
          uint64_t v10 = 0LL;
        }
        CFArrayRef v11 = -[NSString initWithFormat:]( objc_alloc(&OBJC_CLASS___NSString),  "initWithFormat:",  @"%@ around line %lu, column %lu.",  @"Unexpected end of file during JSON parse.",  *(void *)(a1 + 40),  v10);
        Class v12 = -[NSNumber initWithUnsignedInteger:]( objc_alloc(&OBJC_CLASS___NSNumber),  "initWithUnsignedInteger:",  *(void *)(a1 + 24));
        v89[0] = @"NSDebugDescription";
        v89[1] = @"NSJSONSerializationErrorIndex";
        v90[0] = v11;
        v90[1] = v12;
        *a3 = +[NSError errorWithDomain:code:userInfo:]( NSError,  "errorWithDomain:code:userInfo:",  @"NSCocoaErrorDomain",  3840,  [MEMORY[0x189603F68] dictionaryWithObjects:v90 forKeys:v89 count:2]);
      }
    }

    else
    {
      *(void *)(a1 + 24) = v5 + 1;
      if (skipJSONWhitespace(a1, a3, 0))
      {
        unint64_t v5 = *(void *)(a1 + 24);
        if (*(_BYTE *)(*(void *)a1 + v5) == 125)
        {
          *(void *)(a1 + 24) = v5 + 1;
          if ((*(_BYTE *)(a1 + 8) & 1) != 0) {
            return objc_alloc_init(MEMORY[0x189603FC8]);
          }
          else {
            return objc_alloc_init(MEMORY[0x189603F68]);
          }
        }

        int v87 = 0;
        goto LABEL_17;
      }
    }

    return 0LL;
  }

  unint64_t v5 = *(void *)(a1 + 24);
  if (*(_BYTE *)(*(void *)a1 + v5) == 123) {
    goto LABEL_5;
  }
  int v87 = 1;
LABEL_17:
  size_t v14 = 0LL;
  CFIndex v15 = 1LL;
  int v16 = v90;
  unint64_t v17 = v89;
  unint64_t v18 = 32LL;
  char v88 = 1;
  while (1)
  {
    unint64_t v19 = v15 - 1;
    if ((*(_BYTE *)(a1 + 8) & 8) != 0)
    {
      int v20 = 1;
    }

    else
    {
      if (*(_BYTE *)(*(void *)a1 + v5) != 34)
      {
        if (a3)
        {
          unint64_t v49 = *(void *)(a1 + 48);
          BOOL v8 = v5 >= v49;
          uint64_t v50 = v5 - v49;
          CFIndex v51 = v15 - 1;
          if (v8) {
            uint64_t v52 = v50;
          }
          else {
            uint64_t v52 = 0LL;
          }
          char v53 = -[NSString initWithFormat:]( objc_alloc(&OBJC_CLASS___NSString),  "initWithFormat:",  @"%@ around line %lu, column %lu.",  @"No string key for value in object",  *(void *)(a1 + 40),  v52);
          CFArrayRef v54 = -[NSNumber initWithUnsignedInteger:]( objc_alloc(&OBJC_CLASS___NSNumber),  "initWithUnsignedInteger:",  *(void *)(a1 + 24));
          v91 = @"NSDebugDescription";
          v92 = @"NSJSONSerializationErrorIndex";
          Class v93 = v53;
          Class v94 = v54;
          *a3 = +[NSError errorWithDomain:code:userInfo:]( NSError,  "errorWithDomain:code:userInfo:",  @"NSCocoaErrorDomain",  3840,  [MEMORY[0x189603F68] dictionaryWithObjects:&v93 forKeys:&v91 count:2]);

          unint64_t v19 = v51;
        }

        goto LABEL_51;
      }

      int v20 = 0;
    }

    newJSONString((void *)a1, v20, a3);
    if (!v21) {
      goto LABEL_51;
    }
    BOOL v22 = v21;
    if ((skipJSONWhitespace(a1, a3, 0) & 1) == 0)
    {
LABEL_50:

LABEL_51:
      uint64_t v13 = 0LL;
      CFIndex v15 = v19;
      goto LABEL_88;
    }

    unint64_t v23 = *(void *)(a1 + 24);
    if (*(_BYTE *)(*(void *)a1 + v23) != 58)
    {
      char v37 = v88;
      if (a3)
      {
        unint64_t v38 = *(void *)(a1 + 48);
        BOOL v8 = v23 >= v38;
        uint64_t v39 = v23 - v38;
        CFIndex v40 = v15 - 1;
        if (v8) {
          uint64_t v41 = v39;
        }
        else {
          uint64_t v41 = 0LL;
        }
        size_t v42 = -[NSString initWithFormat:]( objc_alloc(&OBJC_CLASS___NSString),  "initWithFormat:",  @"%@ around line %lu, column %lu.",  @"No value for key in object",  *(void *)(a1 + 40),  v41);
        goto LABEL_63;
      }

LABEL_64:
      uint64_t v13 = 0LL;
      CFIndex v15 = v19;
      goto LABEL_89;
    }

    if (*(void *)(a1 + 16) <= v23 + 1)
    {
      char v37 = v88;
      if (a3)
      {
        unint64_t v43 = *(void *)(a1 + 48);
        BOOL v8 = v23 >= v43;
        uint64_t v44 = v23 - v43;
        CFIndex v40 = v15 - 1;
        if (v8) {
          uint64_t v45 = v44;
        }
        else {
          uint64_t v45 = 0LL;
        }
        size_t v42 = -[NSString initWithFormat:]( objc_alloc(&OBJC_CLASS___NSString),  "initWithFormat:",  @"%@ around line %lu, column %lu.",  @"Unexpected end of file during JSON parse.",  *(void *)(a1 + 40),  v45);
LABEL_63:
        char v46 = v42;
        unint64_t v47 = -[NSNumber initWithUnsignedInteger:]( objc_alloc(&OBJC_CLASS___NSNumber),  "initWithUnsignedInteger:",  *(void *)(a1 + 24));
        v91 = @"NSDebugDescription";
        v92 = @"NSJSONSerializationErrorIndex";
        Class v93 = v46;
        Class v94 = v47;
        *a3 = +[NSError errorWithDomain:code:userInfo:]( NSError,  "errorWithDomain:code:userInfo:",  @"NSCocoaErrorDomain",  3840,  [MEMORY[0x189603F68] dictionaryWithObjects:&v93 forKeys:&v91 count:2]);

        unint64_t v19 = v40;
        goto LABEL_64;
      }

      goto LABEL_64;
    }

    *(void *)(a1 + 24) = v23 + 1;
    if ((skipJSONWhitespace(a1, a3, 0) & 1) == 0) {
      goto LABEL_50;
    }
    Class v24 = v16;
    uint64_t v25 = newJSONValue(a1, a3);
    if (!v25)
    {

      uint64_t v13 = 0LL;
      --v15;
      goto LABEL_88;
    }

    Class v26 = (void *)v25;
    if (v19 >= v18)
    {
      CFIndex v85 = v15 - 1;
      __srUChar32 c = v17;
      v18 *= 2LL;
      if ((v88 & 1) != 0)
      {
        id v27 = NSAllocateObjectArray(v18);
        id v28 = NSAllocateObjectArray(v18);
        uint64_t v29 = v28;
        if (!v28 || !v27)
        {
          free(v28);
          free(v27);

          if (a3)
          {
            unint64_t v73 = *(void *)(a1 + 24);
            unint64_t v74 = *(void *)(a1 + 48);
            BOOL v8 = v73 >= v74;
            uint64_t v75 = v73 - v74;
            if (v8) {
              uint64_t v76 = v75;
            }
            else {
              uint64_t v76 = 0LL;
            }
            Class v77 = -[NSString initWithFormat:]( objc_alloc(&OBJC_CLASS___NSString),  "initWithFormat:",  @"%@ around line %lu, column %lu.",  @"Memory exhausted during parse of dictionary.",  *(void *)(a1 + 40),  v76);
            int64_t v78 = -[NSNumber initWithUnsignedInteger:]( objc_alloc(&OBJC_CLASS___NSNumber),  "initWithUnsignedInteger:",  *(void *)(a1 + 24));
            v91 = @"NSDebugDescription";
            v92 = @"NSJSONSerializationErrorIndex";
            Class v93 = v77;
            Class v94 = v78;
            *a3 = +[NSError errorWithDomain:code:userInfo:]( NSError,  "errorWithDomain:code:userInfo:",  @"NSCocoaErrorDomain",  3840,  [MEMORY[0x189603F68] dictionaryWithObjects:&v93 forKeys:&v91 count:2]);
          }

          uint64_t v13 = 0LL;
          char v37 = 1;
LABEL_115:
          CFIndex v15 = v85;
          unint64_t v17 = __src;
          int v16 = v24;
          goto LABEL_89;
        }

        memmove(v27, v24, v14 * 8);
        memmove(v29, __src, v14 * 8);
      }

      else
      {
        NSReallocateObjectArray(v17, v18);
        uint64_t v29 = v30;
        NSReallocateObjectArray(v24, v18);
        id v27 = v31;
        if (!v29 || !v31)
        {
          free(v29);
          free(v27);

          if (a3)
          {
            unint64_t v79 = *(void *)(a1 + 24);
            unint64_t v80 = *(void *)(a1 + 48);
            BOOL v8 = v79 >= v80;
            uint64_t v81 = v79 - v80;
            if (v8) {
              uint64_t v82 = v81;
            }
            else {
              uint64_t v82 = 0LL;
            }
            int64_t v83 = -[NSString initWithFormat:]( objc_alloc(&OBJC_CLASS___NSString),  "initWithFormat:",  @"%@ around line %lu, column %lu.",  @"Memory exhausted during parse of dictionary.",  *(void *)(a1 + 40),  v82);
            v84 = -[NSNumber initWithUnsignedInteger:]( objc_alloc(&OBJC_CLASS___NSNumber),  "initWithUnsignedInteger:",  *(void *)(a1 + 24));
            v91 = @"NSDebugDescription";
            v92 = @"NSJSONSerializationErrorIndex";
            Class v93 = v83;
            Class v94 = v84;
            *a3 = +[NSError errorWithDomain:code:userInfo:]( NSError,  "errorWithDomain:code:userInfo:",  @"NSCocoaErrorDomain",  3840,  [MEMORY[0x189603F68] dictionaryWithObjects:&v93 forKeys:&v91 count:2]);
          }

          char v37 = 0;
          uint64_t v13 = 0LL;
          goto LABEL_115;
        }
      }

      char v88 = 0;
      Class v24 = v27;
      unint64_t v17 = v29;
    }

    v17[v14] = v22;
    v24[v14] = v26;
    int v16 = v24;
    if (!v87) {
      break;
    }
    unint64_t v33 = *(void *)(a1 + 16);
    unint64_t v32 = *(void *)(a1 + 24);
    if (v33 <= v32) {
      goto LABEL_67;
    }
    if (*(_BYTE *)(*(void *)a1 + v32) != 44)
    {
      if (a3)
      {
        unint64_t v59 = *(void *)(a1 + 48);
        BOOL v8 = v32 >= v59;
        uint64_t v60 = v32 - v59;
        if (v8) {
          uint64_t v61 = v60;
        }
        else {
          uint64_t v61 = 0LL;
        }
        int64_t v62 = -[NSString initWithFormat:]( objc_alloc(&OBJC_CLASS___NSString),  "initWithFormat:",  @"%@ around line %lu, column %lu.",  @"Badly formed object",  *(void *)(a1 + 40),  v61);
        int64_t v63 = -[NSNumber initWithUnsignedInteger:]( objc_alloc(&OBJC_CLASS___NSNumber),  "initWithUnsignedInteger:",  *(void *)(a1 + 24));
        v91 = @"NSDebugDescription";
        v92 = @"NSJSONSerializationErrorIndex";
        Class v93 = v62;
        Class v94 = v63;
        *a3 = +[NSError errorWithDomain:code:userInfo:]( NSError,  "errorWithDomain:code:userInfo:",  @"NSCocoaErrorDomain",  3840,  [MEMORY[0x189603F68] dictionaryWithObjects:&v93 forKeys:&v91 count:2]);
      }

  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

        __break(1u);
        goto LABEL_65;
      }

  __break(1u);
  return result;
}

    size_t v14 = (char *)_StringObject.sharedUTF8.getter();
LABEL_28:
    int v16 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v14, v15, 4u, 1);
    Class v12 = swift_bridgeObjectRetain();
    if (!v16) {
      goto LABEL_22;
    }
    goto LABEL_29;
  }

  uint64_t v44 = countAndFlagsBits;
  uint64_t v45 = object;
  lazy protocol witness table accessor for type String and conformance String();
  swift_bridgeObjectRetain_n();
  StringProtocol._ephemeralString.getter();
  unint64_t v33 = (void *)String._bridgeToObjectiveCImpl()();
  swift_bridgeObjectRelease();
  unint64_t v34 = (unsigned __int16 *)objc_msgSend(v33, sel__fastCharacterContents);
  unint64_t v35 = v33;
  if (v34)
  {
    uint64_t v44 = countAndFlagsBits;
    uint64_t v45 = object;
    StringProtocol._ephemeralString.getter();
    int v36 = (void *)String._bridgeToObjectiveCImpl()();
    swift_bridgeObjectRelease();
    char v37 = objc_msgSend(v36, sel_length);
    swift_unknownObjectRelease();
    unint64_t v38 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)( v34,  (uint64_t)v37,  4u,  1);
  }

  else
  {
    unint64_t v38 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)( countAndFlagsBits,  object,  4u,  1);
  }

  CFIndex v40 = v38;
  Class v12 = swift_bridgeObjectRelease_n();
  if ((v40 & 1) == 0) {
    goto LABEL_22;
  }
LABEL_29:
  LOBYTE(v44) = 37;
  MEMORY[0x1895F8858](v12);
  size_t v42 = &v44;
  swift_bridgeObjectRetain();
  unint64_t v17 = specialized Sequence.contains(where:)( (uint64_t (*)(void *))closure #1 in Sequence<>.contains(_:)specialized partial apply,  (uint64_t)v41,  countAndFlagsBits,  object);
  swift_bridgeObjectRelease();
  *(_BYTE *)(v2 + 152) = v17 & 1;
  if (*(void *)(v2 + 32))
  {
    unint64_t v18 = *(void *)(v2 + 32);
  }

  else if (*(_BYTE *)(v2 + 9) == 1)
  {
    unint64_t v18 = 0LL;
    if (*(void *)v2)
    {
      if ((*(_BYTE *)(*(void *)v2 + 48LL) & 1) != 0)
      {
        unint64_t v18 = 0LL;
      }

      else
      {
        id v31 = String.subscript.getter();
        MEMORY[0x186E1B610](v31);
        unint64_t v18 = v32;
        swift_bridgeObjectRelease();
      }
    }
  }

  else
  {
    unint64_t v18 = 0LL;
  }

  if ((specialized static RFC3986Parser.looksLikeIPLiteral<A>(_:)(countAndFlagsBits, object) & 1) != 0)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
LABEL_48:
    swift_bridgeObjectRelease();
    *(void *)(v2 + 72) = countAndFlagsBits;
    *(void *)(v2 + 80) = object;
    return;
  }

  if (v18)
  {
    unint64_t v19 = one-time initialization token for schemesToPercentEncodeHost;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v19 != -1) {
      swift_once();
    }
    int v20 = static RFC3986Parser.schemesToPercentEncodeHost;
    Class v21 = String.lowercased()();
    LOBYTE(v20) = specialized Set.contains(_:)(v21._countAndFlagsBits, (uint64_t)v21._object, v20);
    swift_bridgeObjectRelease_n();
    BOOL v22 = swift_bridgeObjectRelease();
    if ((v20 & 1) != 0 || (v17 & 1) == 0) {
      goto LABEL_48;
    }
  }

  else
  {
    BOOL v22 = swift_bridgeObjectRetain();
    if ((v17 & 1) == 0) {
      goto LABEL_48;
    }
  }

  unint64_t v23 = HIBYTE(object) & 0xF;
  if ((object & 0x2000000000000000LL) == 0) {
    unint64_t v23 = countAndFlagsBits & 0xFFFFFFFFFFFFLL;
  }
  if (!v23)
  {
    swift_bridgeObjectRelease();
    id v28 = 0LL;
    uint64_t v30 = 0xE000000000000000LL;
LABEL_55:
    URLComponents._URLComponents.host.setter((unint64_t)v28, v30);
    return;
  }

  uint64_t v44 = countAndFlagsBits;
  uint64_t v45 = object;
  MEMORY[0x1895F8858](v22);
  size_t v42 = &v44;
  unint64_t v43 = MEMORY[0x18961AFF8];
  swift_bridgeObjectRetain();
  Class v24 = (uint64_t (*)())specialized String.UTF8View.withContiguousStorageIfAvailable<A>(_:)( (void *(*)(__int128 *__return_ptr, void *, uint64_t))closure #1 in StringProtocol.removingURLPercentEncoding(excluding:)specialized partial apply,  (uint64_t)v41,  countAndFlagsBits,  object);
  if (v25 == 1)
  {
    Class v26 = v44;
    id v27 = v45;
    swift_bridgeObjectRetain();
    id v28 = specialized StringProtocol.removingURLPercentEncoding<A>(utf8Buffer:excluding:)(v26, v27, MEMORY[0x18961AFF8]);
    uint64_t v30 = v29;
    swift_bridgeObjectRelease();
  }

  else
  {
    id v28 = v24;
    uint64_t v30 = v25;
  }

  swift_bridgeObjectRelease();
  if (v30)
  {
    swift_bridgeObjectRelease();
    goto LABEL_55;
  }

  swift_bridgeObjectRelease();
  *(void *)(v2 + 72) = countAndFlagsBits;
  *(void *)(v2 + 80) = object;
  *(_BYTE *)(v2 + 153) = 1;
}

  __break(1u);
LABEL_65:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

  uint64_t v30 = __dst[30] * a1;
  if ((unsigned __int128)(__dst[30] * (__int128)a1) >> 64 != (__dst[30] * a1) >> 63)
  {
LABEL_89:
    __break(1u);
    goto LABEL_90;
  }

  if (v30 == 0x7FFFFFFFFFFFFFFFLL) {
    CFArrayRef v11 = 0LL;
  }
  else {
    CFArrayRef v11 = __dst[30] * a1;
  }
  CFIndex v40 = v30 == 0x7FFFFFFFFFFFFFFFLL;
  if ((__dst[33] & 1) != 0)
  {
LABEL_16:
    if ((__dst[35] & 1) != 0)
    {
LABEL_78:
      *(_DWORD *)(a2 + 41) = *(_DWORD *)((char *)&__dst[5] + 1);
      *(_DWORD *)(a2 + 44) = v53;
      *(_DWORD *)(a2 + 57) = *(_DWORD *)v51;
      *(_DWORD *)(a2 + 60) = *(_DWORD *)&v51[3];
      *(_DWORD *)(a2 + 76) = *(_DWORD *)&v49[3];
      *(_DWORD *)(a2 + 73) = *(_DWORD *)v49;
      *(_DWORD *)(a2 + 121) = *(_DWORD *)((char *)&__dst[15] + 1);
      unint64_t v33 = HIDWORD(__dst[17]);
      *(_DWORD *)(a2 + 124) = HIDWORD(__dst[15]);
      *(_DWORD *)(a2 + 137) = *(_DWORD *)((char *)&__dst[17] + 1);
      *(_DWORD *)(a2 + 140) = v33;
      *(_DWORD *)(a2 + 156) = HIDWORD(__dst[19]);
      *(_DWORD *)(a2 + 153) = *(_DWORD *)((char *)&__dst[19] + 1);
      *(_DWORD *)(a2 + 26_Block_object_dispose(va, 8) = HIDWORD(__dst[33]);
      *(_DWORD *)(a2 + 265) = *(_DWORD *)((char *)&__dst[33] + 1);
      unint64_t v34 = HIDWORD(__dst[29]);
      *(_DWORD *)(a2 + 220) = HIDWORD(__dst[27]);
      *(_DWORD *)(a2 + 217) = *(_DWORD *)((char *)&__dst[27] + 1);
      *(_DWORD *)(a2 + 236) = v34;
      *(_DWORD *)(a2 + 233) = *(_DWORD *)((char *)&__dst[29] + 1);
      *(_DWORD *)(a2 + 249) = *(_DWORD *)((char *)&__dst[31] + 1);
      *(_DWORD *)(a2 + 252) = HIDWORD(__dst[31]);
      *(void *)(a2 + 32) = v37;
      *(_BYTE *)(a2 + 40) = v54;
      *(void *)(a2 + 4_Block_object_dispose(va, 8) = v17;
      *(_BYTE *)(a2 + 56) = v52;
      *(void *)(a2 + 64) = v18;
      *(_BYTE *)(a2 + 72) = v50;
      *(void *)(a2 + 80) = v19;
      *(_BYTE *)(a2 + 8_Block_object_dispose(va, 8) = v48;
      *(void *)(a2 + 104) = *(void *)&v47[15];
      *(void *)(a2 + 112) = v6;
      *(_BYTE *)(a2 + 120) = v46;
      *(void *)(a2 + 12_Block_object_dispose(va, 8) = v7;
      *(_BYTE *)(a2 + 136) = v45;
      *(void *)(a2 + 144) = v8;
      *(_BYTE *)(a2 + 152) = v44;
      *(void *)(a2 + 160) = v9;
      *(_BYTE *)(a2 + 16_Block_object_dispose(va, 8) = v43;
      unint64_t v35 = *(_OWORD *)((char *)&__dst[21] + 1);
      int v36 = *(_OWORD *)((char *)&__dst[23] + 1);
      *(void *)(a2 + 200) = __dst[25];
      *(void *)(a2 + 20_Block_object_dispose(va, 8) = v10;
      *(_BYTE *)(a2 + 216) = v42;
      *(void *)(a2 + 224) = v20;
      *(_BYTE *)(a2 + 232) = v41;
      *(void *)(a2 + 240) = v11;
      *(_BYTE *)(a2 + 24_Block_object_dispose(va, 8) = v40;
      *(void *)(a2 + 256) = result;
      *(_BYTE *)(a2 + 264) = v39;
      *(void *)(a2 + 272) = v13;
      *(_BYTE *)(a2 + 280) = v14;
      *(_BYTE *)(a2 + 281) = v38;
      *(_OWORD *)a2 = v55;
      *(_OWORD *)(a2 + 16) = v56;
      *(_OWORD *)(a2 + 89) = *(_OWORD *)v47;
      *(_OWORD *)(a2 + 185) = v36;
      *(_OWORD *)(a2 + 169) = v35;
      return outlined retain of DateComponents((uint64_t)__dst);
    }

    goto LABEL_74;
  }

  v116 = v26;
  *(void *)&v115 = *(void *)&v118[11];
  v117[0] = xmmword_183729440;
  outlined init with take of Any(&v115, &v117[1]);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    Class v12 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  v12[2] + 1LL,  1,  v12);
  }
  unint64_t v68 = v12[2];
  Class v67 = v12[3];
  if (v68 >= v67 >> 1) {
    Class v12 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (void *)(v67 > 1),  v68 + 1,  1,  v12);
  }
  v12[2] = v68 + 1;
  uint64_t v69 = &v12[6 * v68];
  uint64_t v70 = v117[0];
  v71 = v117[2];
  v69[3] = v117[1];
  v69[4] = v71;
  v69[2] = v70;
  if ((BYTE8(v118[12]) & 1) != 0)
  {
LABEL_22:
    if ((BYTE8(v118[13]) & 1) != 0) {
      goto LABEL_79;
    }
    goto LABEL_74;
  }

  Hasher._combine(_:)(0);
  CFIndex v51 = 0LL;
LABEL_65:

  uint64_t v56 = *(void *)(v0 + 336);
  if (v56)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    specialized Dictionary<>.hash(into:)(v1, v56);
    swift_bridgeObjectRelease();
    uint64_t v57 = *(void *)(v0 + 344);
    if (v57) {
      goto LABEL_67;
    }
LABEL_70:
    Hasher._combine(_:)(0);
    if (*(void *)(v0 + 360)) {
      goto LABEL_68;
    }
LABEL_71:
    Hasher._combine(_:)(0);
    goto LABEL_72;
  }

  Hasher._combine(_:)(0);
  uint64_t v57 = *(void *)(v0 + 344);
  if (!v57) {
    goto LABEL_70;
  }
LABEL_67:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)(v1, v57);
  swift_bridgeObjectRelease();
  if (!*(void *)(v0 + 360)) {
    goto LABEL_71;
  }
LABEL_68:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
LABEL_72:
  int64_t v58 = *(unsigned __int8 *)(v0 + 368);
  if (v58 == 2)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    unint64_t v59 = v58 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v59);
  }

  uint64_t v60 = *(unsigned __int8 *)(v0 + 369);
  if (v60 == 2)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    uint64_t v61 = v60 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v61);
  }

  int64_t v62 = *(unsigned __int8 *)(v0 + 370);
  if (v62 == 2)
  {
    int64_t v63 = 0;
  }

  else
  {
    int64_t v63 = v62 & 1;
    Hasher._combine(_:)(1u);
  }

  Hasher._combine(_:)(v63);
  Class v64 = *(unsigned __int8 *)(v0 + 371);
  if (v64 == 2)
  {
    int64_t v65 = 0;
  }

  else
  {
    int64_t v66 = v64 & 1;
    Hasher._combine(_:)(1u);
    int64_t v65 = v66;
  }

  Hasher._combine(_:)(v65);
  outlined retain of LocalePreferences?( v0 + 520,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined consume of LocalePreferences?);
  outlined retain of LocalePreferences?( v0 + 520,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined consume of LocalePreferences?);
  return swift_unknownObjectRelease();
}

    if (!v3)
    {
      BOOL v8 = MEMORY[0x18961AFE8];
      uint64_t v9 = *(void *)(MEMORY[0x18961AFE8] + 16LL);
      id v28 = 1LL;
      goto LABEL_71;
    }

                  CFIndex v40 = 256LL;
                }

      if (v64)
      {
        if (!v50) {
          goto LABEL_58;
        }
        type metadata accessor for CFDictionaryRef(0LL);
        lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( (unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef,  (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef,  (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
        CFIndex v51 = v50;
        CFIndex v40 = v64;
        unint64_t v33 = static _CFObject.== infix(_:_:)();

        if ((v33 & 1) == 0) {
          goto LABEL_58;
        }
      }

      else if (v50)
      {
        goto LABEL_58;
      }

      if (v63)
      {
        if (!v48) {
          goto LABEL_58;
        }
        type metadata accessor for CFDictionaryRef(0LL);
        lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( (unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef,  (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef,  (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
        unint64_t v49 = v48;
        uint64_t v41 = v63;
        unint64_t v34 = static _CFObject.== infix(_:_:)();

        if ((v34 & 1) == 0) {
          goto LABEL_58;
        }
      }

      else if (v48)
      {
        goto LABEL_58;
      }

      if (v62)
      {
        if (!v45) {
          goto LABEL_58;
        }
        type metadata accessor for CFDictionaryRef(0LL);
        lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( (unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef,  (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef,  (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
        char v46 = v45;
        size_t v42 = v62;
        unint64_t v35 = static _CFObject.== infix(_:_:)();

        if ((v35 & 1) == 0) {
          goto LABEL_58;
        }
      }

      else if (v45)
      {
        goto LABEL_58;
      }

      if (v61)
      {
        if (!v43) {
          goto LABEL_58;
        }
        type metadata accessor for CFDictionaryRef(0LL);
        lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( (unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef,  (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef,  (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
        unint64_t v47 = v43;
        uint64_t v44 = v61;
        int v36 = static _CFObject.== infix(_:_:)();

        if ((v36 & 1) == 0) {
          goto LABEL_58;
        }
      }

      else if (v43)
      {
        goto LABEL_58;
      }

      unint64_t v23 = v85;
      if (v60)
      {
        if (!v85) {
          goto LABEL_62;
        }
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        uint64_t v52 = specialized static Dictionary<>.== infix(_:_:)(v60, v23);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if ((v52 & 1) == 0) {
          goto LABEL_58;
        }
      }

      else if (v85)
      {
        goto LABEL_58;
      }

      unint64_t v23 = v86;
      if (!v59)
      {
        if (v86) {
          goto LABEL_58;
        }
        goto LABEL_94;
      }

      if (v86)
      {
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        char v53 = specialized static Dictionary<>.== infix(_:_:)(v59, v23);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if ((v53 & 1) == 0) {
          goto LABEL_58;
        }
LABEL_94:
        if (v31)
        {
          if (!v88 || (v58 != v87 || v31 != v88) && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
            goto LABEL_58;
          }
        }

        else if (v88)
        {
          goto LABEL_58;
        }

        if (v57 == 2)
        {
          if (v89 != 2) {
            goto LABEL_58;
          }
        }

        else if (v89 == 2 || ((v89 ^ v57) & 1) != 0)
        {
          goto LABEL_58;
        }

        char v37 = v90;
        if (v56 == 2)
        {
          outlined retain of LocalePreferences?( (uint64_t)v106,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined consume of LocalePreferences?);
          if (v37 != 2) {
            goto LABEL_59;
          }
        }

        else
        {
          outlined retain of LocalePreferences?( (uint64_t)v106,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined consume of LocalePreferences?);
          if (v37 == 2 || ((v37 ^ v56) & 1) != 0) {
            goto LABEL_59;
          }
        }

        if (v55 == 2)
        {
          if (v91 != 2) {
            goto LABEL_59;
          }
        }

        else
        {
          unint64_t v23 = 0LL;
          if (v91 == 2 || ((((v55 & 1) == 0) ^ v91) & 1) == 0) {
            goto LABEL_60;
          }
        }

        if (v54 == 2)
        {
          if (v92 != 2) {
            goto LABEL_59;
          }
        }

        else if (v92 == 2 || ((((v54 & 1) == 0) ^ v92) & 1) == 0)
        {
          goto LABEL_59;
        }

        unint64_t v23 = 1LL;
        goto LABEL_60;
      }

  __break(1u);
LABEL_65:
  __break(1u);
  return result;
}

  swift_bridgeObjectRelease();
LABEL_65:
  lazy protocol witness table accessor for type URLComponents.InvalidComponentError and conformance URLComponents.InvalidComponentError();
  int64_t v63 = (void *)swift_allocError();
  *Class v64 = 7;
  swift_willThrow();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();

  swift_bridgeObjectRelease();
  unint64_t v80 = 0;
  unint64_t v79 = 1048LL;
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
LABEL_66:
  *(void *)&v115[0] = v36;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
  lazy protocol witness table accessor for type [String] and conformance [A]();
  int64_t v65 = BidirectionalCollection<>.joined(separator:)();
  Class v67 = v66;
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v85._countAndFlagsBits = 0LL;
  LOBYTE(v85._object) = v114;
  BYTE1(v85._object) = v113;
  BYTE2(v85._object) = v112;
  BYTE3(v85._object) = v111;
  BYTE4(v85._object) = v110;
  BYTE5(v85._object) = v109;
  BYTE6(v85._object) = v108;
  HIBYTE(v85._object) = v107;
  v86[0] = v106;
  memset(&v86[8], 0, 64);
  int v87 = 0LL;
  LOBYTE(v8_Block_object_dispose(va, 8) = v105;
  int64_t v89 = 0LL;
  *(void *)&int64_t v90 = 0LL;
  *((void *)&v90 + 1) = v65;
  v91 = v67;
  v92[0] = 0LL;
  v92[1] = 0LL;
  LOBYTE(v92[2]) = v104;
  BYTE1(v92[2]) = v103;
  v115[1] = *(_OWORD *)v86;
  v115[0] = v85;
  v115[4] = *(_OWORD *)&v86[48];
  v115[5] = 0uLL;
  v115[2] = *(_OWORD *)&v86[16];
  v115[3] = *(_OWORD *)&v86[32];
  *(_OWORD *)((char *)v116 + 10) = *(_OWORD *)((char *)v92 + 2);
  v115[7] = v90;
  v116[0] = v67;
  v115[6] = v88;
  uint64_t v4 = (unint64_t)URLComponents._URLComponents.query.getter(v104);
  outlined release of URLComponents((uint64_t)&v85);
  return v4;
}

          swift_bridgeObjectRelease();
          if ((v42 & 1) == 0) {
            goto LABEL_65;
          }
        }
      }

      else
      {
        specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)( v41,  isUniquelyReferenced_nonNull_native);
        unint64_t v32 = v78;
        unint64_t v43 = specialized __RawDictionaryStorage.find<A>(_:)(v34, v20);
        if ((v42 & 1) != (v44 & 1)) {
          goto LABEL_81;
        }
        unint64_t v38 = v43;
        if ((v42 & 1) == 0)
        {
LABEL_65:
          specialized _NativeDictionary._insert(at:key:value:)(v38, v34, v20, v30, v77, (void *)v32);
          swift_bridgeObjectRetain();
          goto LABEL_66;
        }
      }

      uint64_t v45 = (uint64_t *)(*(void *)(v32 + 56) + 16 * v38);
      swift_bridgeObjectRelease();
      *uint64_t v45 = v30;
      v45[1] = v77;
LABEL_66:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v10 = v32;
      CFArrayRef v11 = v76;
      goto LABEL_16;
    }

    swift_bridgeObjectRelease();
LABEL_16:
    if (++v12 == v11)
    {
      swift_bridgeObjectRelease();
      goto LABEL_69;
    }
  }

  __break(1u);
LABEL_76:
  __break(1u);
LABEL_77:
  __break(1u);
LABEL_78:
  __break(1u);
LABEL_79:
  __break(1u);
LABEL_80:
  __break(1u);
LABEL_81:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

  __break(1u);
LABEL_65:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

  __break(1u);
LABEL_65:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

  __break(1u);
LABEL_65:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

    if (!v31)
    {
LABEL_65:
      swift_unknownObjectRelease();
      swift_unknownObjectRelease();
      unint64_t v59 = v29 | (v30 << 8);
      size_t v14 = v55;
LABEL_21:
      swift_unknownObjectRetain();
      uint64_t v13 = specialized Rope._Node.distanceFromStart<A>(to:in:)(v8, v59, v6, v15, v14, v56);
      swift_unknownObjectRelease_n();
      goto LABEL_67;
    }
  }

  __break(1u);
  return result;
}

    if (v8 < v12) {
      goto LABEL_143;
    }
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v9 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  *((void *)v9 + 2) + 1LL,  1,  v9);
    }
    uint64_t v44 = *((void *)v9 + 2);
    unint64_t v43 = *((void *)v9 + 3);
    CFArrayRef v11 = v44 + 1;
    if (v44 >= v43 >> 1) {
      uint64_t v9 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (char *)(v43 > 1),  v44 + 1,  1,  v9);
    }
    *((void *)v9 + 2) = v11;
    uint64_t v45 = v9 + 32;
    char v46 = &v9[16 * v44 + 32];
    *(void *)char v46 = v12;
    *((void *)v46 + 1) = v8;
    if (v44)
    {
      uint64_t v10 = a1;
      while (1)
      {
        unint64_t v47 = v11 - 1;
        if (v11 >= 4)
        {
          uint64_t v52 = &v45[16 * v11];
          char v53 = *((void *)v52 - 8);
          CFArrayRef v54 = *((void *)v52 - 7);
          int64_t v58 = __OFSUB__(v54, v53);
          unint64_t v55 = v54 - v53;
          if (v58) {
            goto LABEL_132;
          }
          uint64_t v57 = *((void *)v52 - 6);
          uint64_t v56 = *((void *)v52 - 5);
          int64_t v58 = __OFSUB__(v56, v57);
          uint64_t v50 = v56 - v57;
          CFIndex v51 = v58;
          if (v58) {
            goto LABEL_133;
          }
          unint64_t v59 = v11 - 2;
          uint64_t v60 = &v45[16 * v11 - 32];
          int64_t v62 = *(void *)v60;
          uint64_t v61 = *((void *)v60 + 1);
          int64_t v58 = __OFSUB__(v61, v62);
          int64_t v63 = v61 - v62;
          if (v58) {
            goto LABEL_135;
          }
          int64_t v58 = __OFADD__(v50, v63);
          Class v64 = v50 + v63;
          if (v58) {
            goto LABEL_138;
          }
          if (v64 >= v55)
          {
            uint64_t v82 = &v45[16 * v47];
            v84 = *(void *)v82;
            int64_t v83 = *((void *)v82 + 1);
            int64_t v58 = __OFSUB__(v83, v84);
            CFIndex v85 = v83 - v84;
            if (v58) {
              goto LABEL_142;
            }
            uint64_t v75 = v50 < v85;
            goto LABEL_102;
          }
        }

        else
        {
          if (v11 != 3)
          {
            uint64_t v76 = *((void *)v9 + 4);
            Class v77 = *((void *)v9 + 5);
            int64_t v58 = __OFSUB__(v77, v76);
            uint64_t v69 = v77 - v76;
            uint64_t v70 = v58;
            goto LABEL_96;
          }

          unint64_t v49 = *((void *)v9 + 4);
          CFDictionaryRef v48 = *((void *)v9 + 5);
          int64_t v58 = __OFSUB__(v48, v49);
          uint64_t v50 = v48 - v49;
          CFIndex v51 = v58;
        }

        if ((v51 & 1) != 0) {
          goto LABEL_134;
        }
        unint64_t v59 = v11 - 2;
        int64_t v65 = &v45[16 * v11 - 32];
        Class v67 = *(void *)v65;
        int64_t v66 = *((void *)v65 + 1);
        unint64_t v68 = __OFSUB__(v66, v67);
        uint64_t v69 = v66 - v67;
        uint64_t v70 = v68;
        if (v68) {
          goto LABEL_137;
        }
        v71 = &v45[16 * v47];
        unint64_t v73 = *(void *)v71;
        Class v72 = *((void *)v71 + 1);
        int64_t v58 = __OFSUB__(v72, v73);
        unint64_t v74 = v72 - v73;
        if (v58) {
          goto LABEL_140;
        }
        if (__OFADD__(v69, v74)) {
          goto LABEL_141;
        }
        if (v69 + v74 >= v50)
        {
          uint64_t v75 = v50 < v74;
LABEL_102:
          if (v75) {
            unint64_t v47 = v59;
          }
          goto LABEL_104;
        }

        swift_bridgeObjectRetain();
        v92 = specialized static RFC3986Parser.percentEncodeHost<A>(_:)(v63, v64, v65, v66);
        Class v93 = v94;
        swift_bridgeObjectRelease_n();
        if (!v93)
        {
LABEL_114:
          swift_release();
LABEL_141:
          swift_bridgeObjectRelease();
          return 0LL;
        }

    unint64_t v47 = (v55 - 1) & v55;
    unint64_t v49 = __clz(__rbit64(v55)) + (v44 << 6);
LABEL_41:
    uint64_t v50 = (uint64_t *)(*(void *)(isUniquelyReferenced_nonNull_native + 56) + 16 * v49);
    uint64_t v52 = *v50;
    CFIndex v51 = v50[1];
    *(_BYTE *)(*(void *)(v26 + 48) + v49) = *(_BYTE *)(*(void *)(isUniquelyReferenced_nonNull_native + 48) + v49);
    char v53 = (void *)(*(void *)(v26 + 56) + 16 * v49);
    *char v53 = v52;
    v53[1] = v51;
    swift_bridgeObjectRetain();
  }

  uint64_t v56 = v54 + 7;
  if (v56 >= v75) {
    goto LABEL_65;
  }
  unint64_t v55 = *(void *)&__src[8 * v56];
  if (v55)
  {
    uint64_t v44 = v56;
    goto LABEL_64;
  }

  while (1)
  {
    uint64_t v44 = v56 + 1;
    if (__OFADD__(v56, 1LL)) {
      break;
    }
    if (v44 >= v75) {
      goto LABEL_65;
    }
    unint64_t v55 = *(void *)&__src[8 * v44];
    ++v56;
    if (v55) {
      goto LABEL_64;
    }
  }

  swift_bridgeObjectRelease();
  int v36 = 0LL;
  unint64_t v35 = 0LL;
LABEL_65:
  int64_t v66 = *(void *)a2;
  Class v67 = *(void **)(a2 + 8);
  unint64_t v68 = *(_BYTE *)(a2 + 16);
  uint64_t v69 = *(_BYTE *)(a2 + 17);
  uint64_t v70 = *(void *)(a2 + 24);
  v71 = *(_BYTE *)(a2 + 32);
  Class v72 = *(_BYTE *)(a2 + 33);
  unint64_t v73 = *(void *)(a3 + 16);
  v108 = *(id *)(a3 + 24);
  v107 = *(void *)a3;
  id v106 = *(void *)(a3 + 8);
  v122._countAndFlagsBits = v66;
  v122._object = v67;
  LOBYTE(v123) = v68;
  BYTE1(v123) = v69;
  v124 = v70;
  v125 = v71;
  v126 = v72;
  v127 = v36;
  v128 = v35;
  v129 = 1;
  unint64_t v74 = *(void **)(a3 + 32);
  v105 = *(void *)(a3 + 40);
  uint64_t v75 = *(void *)(a3 + 56);
  v104 = *(void *)(a3 + 48);
  uint64_t v76 = *(void *)(a3 + 64);
  swift_bridgeObjectRetain();
  Class v77 = (uint64_t)v109;
  int64_t v78 = v109;
  swift_unknownObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  specialized String.LocalizationValue.resolve<A>(key:options:table:bundle:locale:scope:performLocalization:)( v107,  v106,  (uint64_t)&v122,  v105,  v104,  v77,  v75,  v76,  1u,  v73,  v108,  v74);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  a2 = v115;
  swift_unknownObjectRelease();

  a3 = v113;
  outlined release of URL((id *)&v117);
  unint64_t v34 = v131;
  a4 = v112;
  if ((v111 & 1) == 0) {
LABEL_66:
  }
    sandbox_extension_release();
LABEL_67:
  outlined release of AttributedString.LocalizationOptions(a2);
  *a4 = v34;
  return outlined release of LocalizedStringResource(a3);
}

  __break(1u);
LABEL_65:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

  Hasher._combine(_:)(0);
  CFIndex v51 = 0LL;
LABEL_65:

  uint64_t v56 = *(void *)(v0 + 336);
  if (v56)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    specialized Dictionary<>.hash(into:)(v1, v56);
    swift_bridgeObjectRelease();
    uint64_t v57 = *(void *)(v0 + 344);
    if (v57) {
      goto LABEL_67;
    }
LABEL_70:
    Hasher._combine(_:)(0);
    if (*(void *)(v0 + 360)) {
      goto LABEL_68;
    }
LABEL_71:
    Hasher._combine(_:)(0);
    goto LABEL_72;
  }

  Hasher._combine(_:)(0);
  uint64_t v57 = *(void *)(v0 + 344);
  if (!v57) {
    goto LABEL_70;
  }
LABEL_67:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)(v1, v57);
  swift_bridgeObjectRelease();
  if (!*(void *)(v0 + 360)) {
    goto LABEL_71;
  }
LABEL_68:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
LABEL_72:
  int64_t v58 = *(unsigned __int8 *)(v0 + 368);
  if (v58 == 2)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    unint64_t v59 = v58 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v59);
  }

  uint64_t v60 = *(unsigned __int8 *)(v0 + 369);
  if (v60 == 2)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    uint64_t v61 = v60 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v61);
  }

  int64_t v62 = *(unsigned __int8 *)(v0 + 370);
  if (v62 == 2)
  {
    int64_t v63 = 0;
  }

  else
  {
    int64_t v63 = v62 & 1;
    Hasher._combine(_:)(1u);
  }

  Hasher._combine(_:)(v63);
  Class v64 = *(unsigned __int8 *)(v0 + 371);
  if (v64 == 2)
  {
    int64_t v65 = 0;
  }

  else
  {
    int64_t v66 = v64 & 1;
    Hasher._combine(_:)(1u);
    int64_t v65 = v66;
  }

  Hasher._combine(_:)(v65);
  outlined retain of LocalePreferences?( v0 + 520,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined consume of LocalePreferences?);
  outlined retain of LocalePreferences?( v0 + 520,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined consume of LocalePreferences?);
  return swift_unknownObjectRelease();
}

      swift_unknownObjectRelease();
      swift_unknownObjectRelease();
      Class v21 = v7 & 0xFFFFFFFFFFFFF0FFLL | (v29 << 8);
      BOOL v6 = (void *)a2;
      goto LABEL_65;
    }

    BOOL v8 = 0LL;
LABEL_66:
    BOOL v22 = (char *)v6 - (char *)v8;
    uint64_t v4 = v119;
    if (__OFSUB__(v6, v8)) {
      goto LABEL_269;
    }
    BOOL v8 = v107;
LABEL_68:
    if (v14 == v22) {
      return swift_release_n();
    }
    Class v24 = v8[11];
    if (v4 != v24) {
      goto LABEL_252;
    }
    if (v13)
    {
      objc_super v3 = v12;
      unint64_t v35 = (void *)(v13 + 24 * ((v12 >> ((4 * *(_BYTE *)(v13 + 18) + 8) & 0x3C)) & 0xF));
      Class v12 = v35[4];
      int v36 = v35[5];
      uint64_t v9 = v35[3];
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain_n();
      uint64_t v113 = v36;
      v114 = v12;
    }

    else
    {
      char v37 = v8[8];
      swift_unknownObjectRetain();
      specialized Rope._Node.subscript.getter(v12, v37);
      uint64_t v113 = v39;
      v114 = v38;
      uint64_t result = swift_unknownObjectRelease();
      if (v4 != v8[11]) {
        goto LABEL_275;
      }
      CFIndex v40 = v8[8];
      swift_unknownObjectRetain();
      objc_super v3 = v12;
      uint64_t v9 = specialized Rope._Node.subscript.getter(v12, v40);
      Class v12 = v41;
      uint64_t v4 = v119;
      swift_unknownObjectRelease();
    }

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    Class v24 = v14 + v9;
    if (__OFADD__(v14, v9)) {
      goto LABEL_253;
    }
    if (v14 >= v7) {
      int v16 = v7;
    }
    else {
      int v16 = v14;
    }
    else {
      size_t v42 = v14 + v9;
    }
    if (v24 <= v7) {
      Class v24 = v42;
    }
    else {
      Class v24 = v7;
    }
    if (v16 == v24)
    {
LABEL_254:
      __break(1u);
LABEL_255:
      __break(1u);
LABEL_256:
      __break(1u);
LABEL_257:
      __break(1u);
LABEL_258:
      __break(1u);
LABEL_259:
      __break(1u);
LABEL_260:
      Class v100 = v16;
      size_t v14 = v24;
LABEL_261:
      swift_unknownObjectRelease();
      swift_unknownObjectRelease();
      Class v12 = v12 & 0xFFFFFFFFFFFFF0FFLL | (v100 << 8);
      BOOL v6 = (void *)a2;
      if (v4) {
        goto LABEL_13;
      }
LABEL_262:
      uint64_t result = swift_release();
      v115 = 0LL;
      CFIndex v15 = __OFSUB__(v6, v14);
      size_t v14 = (uint64_t)v6 - v14;
      if (v15) {
        goto LABEL_264;
      }
      goto LABEL_14;
    }

    CFIndex v15 = __OFSUB__(v24, v16);
    v24 -= v16;
    v117 = v24;
    if (v15) {
      goto LABEL_255;
    }
    unint64_t v43 = v8[8];
    uint64_t v9 = v8[9];
    Class v12 = v8[10];
    Class v24 = v8[11];
    v122 = v4;
    v123 = (uint64_t *)v3;
    v124 = v13;
    int v16 = v115 + 1;
    if (__OFADD__(v115, 1LL)) {
      goto LABEL_256;
    }
    if (v4 != v24) {
      goto LABEL_257;
    }
    ++v115;
    if (v13)
    {
      uint64_t v44 = (void *)(v13 + 24 * ((v3 >> ((4 * *(_BYTE *)(v13 + 18) + 8) & 0x3C)) & 0xF));
      uint64_t v9 = v44[3];
      Class v12 = v44[4];
      uint64_t v4 = v44[5];
      swift_unknownObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_retain();
    }

    else
    {
      swift_retain();
      swift_unknownObjectRetain();
      uint64_t v9 = specialized Rope._Node.subscript.getter(v3, v43);
      Class v12 = v45;
      uint64_t v4 = v46;
    }

    swift_bridgeObjectRelease();
    uint64_t result = swift_bridgeObjectRelease();
    CFIndex v15 = __OFADD__(v14, v9);
    v14 += v9;
    if (v15) {
      goto LABEL_258;
    }
    if (v43)
    {
      unint64_t v47 = ((-15LL << ((4 * *(_BYTE *)(v43 + 18) + 8) & 0x3C)) - 1) & (unint64_t)*(unsigned __int8 *)(v43 + 18) | ((unint64_t)*(unsigned __int16 *)(v43 + 16) << ((4 * *(_BYTE *)(v43 + 18) + 8) & 0x3C));
      uint64_t result = swift_unknownObjectRetain();
    }

    else
    {
      unint64_t v47 = 0LL;
    }

    uint64_t v4 = v119;
    Class v12 = v3;
    CFDictionaryRef v48 = v3 >= v47;
    objc_super v3 = (unint64_t)v111;
    if (v48) {
      goto LABEL_259;
    }
    if (v13)
    {
      unint64_t v49 = (4 * *(_BYTE *)(v13 + 18) + 8) & 0x3C;
      uint64_t v50 = ((v12 >> v49) & 0xF) + 1;
      if (v50 < *(unsigned __int16 *)(v13 + 16))
      {
        Class v12 = (v50 << v49) | ((-15LL << v49) - 1) & v12;
        uint64_t result = swift_unknownObjectRelease_n();
        goto LABEL_107;
      }
    }

    CFIndex v51 = *(unsigned __int8 *)(v43 + 18);
    uint64_t v52 = (4 * v51 + 8) & 0x3C;
    char v53 = (v12 >> v52) & 0xF;
    v121 = v53;
    if (!v51) {
      break;
    }
    swift_unknownObjectRetain();
    uint64_t v9 = specialized closure #1 in Rope._Node.formSuccessor(of:)(v43 + 24, &v121, (uint64_t)&v122, v43, v51);
    uint64_t result = swift_unknownObjectRelease();
    BOOL v6 = (void *)a2;
    if ((v9 & 1) == 0) {
      goto LABEL_110;
    }
    uint64_t result = swift_unknownObjectRelease_n();
    uint64_t v4 = v122;
    Class v12 = (unint64_t)v123;
    uint64_t v13 = v124;
    if (v14 >= v7) {
      goto LABEL_114;
    }
LABEL_108:
    uint64_t result = swift_release();
LABEL_180:
    if (v117)
    {
      uint64_t v75 = v111[4];
      uint64_t v9 = v111[5];
      uint64_t v76 = v111[6];
      *id v106 = 0LL;
      v106[1] = 0LL;
      v106[2] = 0LL;
      if (v9)
      {
        v110 = v12;
        v120 = v4;
        Class v77 = v111[1];
        int64_t v78 = v111[2];
        unint64_t v79 = v111[3];
        void *v105 = 0LL;
        v105[1] = 0LL;
        v105[2] = 0LL;
        if (!v77)
        {
          __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Rope<AttributedString._InternalRun>._Storage<Rope<AttributedString._InternalRun>._Item>);
          Class v77 = swift_allocObject();
          unint64_t v79 = 0LL;
          int64_t v78 = 0LL;
          *(_WORD *)(v77 + 16) = 0;
          *(_BYTE *)(v77 + 1_Block_object_dispose(va, 8) = 0;
        }

        swift_bridgeObjectRetain_n();
        swift_bridgeObjectRetain_n();
        swift_bridgeObjectRetain_n();
        swift_bridgeObjectRetain_n();
        uint64_t result = swift_isUniquelyReferenced_nonNull();
        if ((result & 1) == 0)
        {
          unint64_t v80 = specialized Rope._Node.copy()(v77);
          int64_t v78 = v81;
          unint64_t v79 = v82;
          uint64_t result = swift_unknownObjectRelease();
          Class v77 = v80;
        }

        CFIndex v15 = __OFADD__(v78, 1LL);
        int64_t v83 = v78 + 1;
        if (v15) {
          goto LABEL_272;
        }
        CFIndex v15 = __OFADD__(v79, v75);
        v84 = v79 + v75;
        if (v15) {
          goto LABEL_273;
        }
        CFIndex v85 = *(unsigned __int16 *)(v77 + 16);
        v86 = (void *)(v77 + 24LL * *(unsigned __int16 *)(v77 + 16));
        v86[3] = v75;
        v86[4] = v9;
        v86[5] = v76;
        if (v85 == 0xFFFF) {
          goto LABEL_274;
        }
        int v87 = v85 + 1;
        *(_WORD *)(v77 + 16) = v87;
        if (v87 == 15)
        {
          char v88 = swift_unknownObjectRetain();
          specialized Rope.Builder._appendNow(_:)(v88, v83, v84);
          objc_super v3 = (unint64_t)v111;
          int64_t v89 = v113;
          swift_bridgeObjectRelease();
          int64_t v90 = v114;
          swift_bridgeObjectRelease();
          swift_unknownObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease_n();
        }

        else
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          uint64_t v9 = v113;
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_unknownObjectRelease();
          v111[1] = v77;
          v111[2] = v83;
          int64_t v90 = v114;
          v111[3] = v84;
          int64_t v89 = v113;
        }

        unint64_t v7 = a3;
        BOOL v6 = (void *)a2;
        swift_bridgeObjectRelease();
        outlined consume of Rope<AttributedString._InternalRun>._Item?(*(void *)(v3 + 32), *(void *)(v3 + 40));
        swift_bridgeObjectRelease();
        uint64_t result = swift_bridgeObjectRelease();
        *(void *)(v3 + 32) = v117;
        *(void *)(v3 + 40) = v90;
        *(void *)(v3 + 4_Block_object_dispose(va, 8) = v89;
        BOOL v8 = v107;
        uint64_t v4 = v120;
        Class v12 = v110;
      }

      else
      {
        int v16 = v117;
        v111[4] = v117;
        v111[5] = v114;
        BOOL v6 = (void *)a2;
        v111[6] = v113;
      }
    }

    else
    {
      swift_bridgeObjectRelease();
      uint64_t result = swift_bridgeObjectRelease();
    }
  }

  uint64_t v9 = v53 + 1;
  if (v53 + 1 < (unint64_t)*(unsigned __int16 *)(v43 + 16))
  {
    uint64_t result = swift_unknownObjectRelease_n();
    Class v12 = (v9 << v52) | ((-15LL << v52) - 1) & v12;
    uint64_t v13 = v43;
LABEL_107:
    BOOL v6 = (void *)a2;
    if (v14 >= v7) {
      goto LABEL_114;
    }
    goto LABEL_108;
  }

  BOOL v6 = (void *)a2;
LABEL_110:
  if (v43)
  {
    CFArrayRef v54 = *(unsigned __int8 *)(v43 + 18);
    uint64_t v9 = *(unsigned __int16 *)(v43 + 16);
    uint64_t result = swift_unknownObjectRelease_n();
    unint64_t v55 = (4 * v54 + 8) & 0x3C;
    uint64_t v56 = ((-15LL << v55) - 1) & v54;
    BOOL v6 = (void *)a2;
    Class v12 = v56 | (v9 << v55);
  }

  else
  {
    Class v12 = 0LL;
  }

  uint64_t v13 = 0LL;
  v122 = v119;
  if (v14 < v7) {
    goto LABEL_108;
  }
LABEL_114:
  uint64_t v57 = v8[8];
  if (v6 != (void *)v7)
  {
    uint64_t v4 = v8[11];
    if (v57)
    {
      size_t v14 = v8[10];
      v115 = v8[9];
      int64_t v66 = *(unsigned __int8 *)(v57 + 18);
      uint64_t v9 = *(unsigned __int16 *)(v57 + 16);
      uint64_t result = swift_release();
      uint64_t v13 = 0LL;
      Class v67 = (4 * v66 + 8) & 0x3C;
      unint64_t v68 = ((-15LL << v67) - 1) & v66;
      BOOL v6 = (void *)a2;
      Class v12 = v68 | (v9 << v67);
    }

    else
    {
      uint64_t result = swift_release();
      Class v12 = 0LL;
      uint64_t v13 = 0LL;
      v115 = 0LL;
      size_t v14 = 0LL;
    }

    goto LABEL_180;
  }

  unint64_t v7 = v8[10];
  if (v57) {
    int64_t v58 = v8[10];
  }
  else {
    int64_t v58 = 0LL;
  }
  v119 = v8[11];
  if (!v57)
  {
    uint64_t result = swift_release();
    uint64_t v4 = 0LL;
    uint64_t v13 = 0LL;
    Class v12 = 0LL;
    v115 = 0LL;
LABEL_178:
    size_t v14 = (uint64_t)v6 - v4;
    unint64_t v7 = a3;
    if (__OFSUB__(v6, v4)) {
      goto LABEL_282;
    }
    uint64_t v4 = v119;
    goto LABEL_180;
  }

  unint64_t v59 = v8[9];
  Class v12 = *(unsigned __int8 *)(v57 + 18);
  if (v7 <= (uint64_t)v6 || !*(_WORD *)(v57 + 16))
  {
    Class v12 = ((-15LL << ((4 * v12 + 8) & 0x3C)) - 1) & v12 | ((unint64_t)*(unsigned __int16 *)(v57 + 16) << ((4 * v12 + 8) & 0x3C));
    swift_unknownObjectRetain();
    uint64_t v4 = 0LL;
    uint64_t v13 = 0LL;
LABEL_177:
    swift_unknownObjectRetain();
    v115 = specialized Rope._Node.distanceFromStart<A>(to:in:)(v119, v12, v13, v57, v59);
    swift_release();
    uint64_t result = swift_unknownObjectRelease_n();
    goto LABEL_178;
  }

  if (*(_BYTE *)(v57 + 18))
  {
    uint64_t result = swift_unknownObjectRetain_n();
    uint64_t v4 = (uint64_t)v6;
    uint64_t v9 = v57;
    while (1)
    {
      Class v24 = *(unsigned __int16 *)(v9 + 16);
      if (!*(_WORD *)(v9 + 16)) {
        goto LABEL_125;
      }
      uint64_t v61 = *(void *)(v9 + 40);
      int64_t v62 = v4 - v61;
      if (__OFSUB__(v4, v61)) {
        goto LABEL_266;
      }
      if (__OFADD__(v62, 1LL)) {
        goto LABEL_267;
      }
      if (v62 + 1 <= 0)
      {
        Class v24 = 0LL;
      }

      else
      {
        if ((_DWORD)v24 == 1)
        {
          v4 -= v61;
LABEL_125:
          if (v4) {
            goto LABEL_265;
          }
          goto LABEL_126;
        }

        int64_t v63 = *(void *)(v9 + 64);
        CFIndex v15 = __OFSUB__(v62, v63);
        int v16 = v62 - v63;
        if (v15) {
          goto LABEL_279;
        }
        if (__OFADD__(v16, 1LL)) {
          goto LABEL_280;
        }
        if (v16 + 1 >= 1)
        {
          if ((_DWORD)v24 != 2)
          {
            Class v64 = (void *)(v9 + 88);
            int64_t v65 = 2LL;
            while (v24 != v65)
            {
              uint64_t v4 = v16 - *v64;
              if (__OFSUB__(v16, *v64)) {
                goto LABEL_250;
              }
              if (__OFADD__(v4, 1LL)) {
                goto LABEL_251;
              }
              if (v4 + 1 < 1)
              {
                Class v24 = v65;
                uint64_t v4 = v16;
                goto LABEL_126;
              }

              ++v65;
              v64 += 3;
              int v16 = v4;
              if (v24 == v65) {
                goto LABEL_125;
              }
            }

    __break(1u);
LABEL_65:
    __break(1u);
  }

  else
  {
    Class v24 = swift_unknownObjectRetain_n();
    unint64_t v23 = specialized Rope._endPath.getter(v24);
    uint64_t result = (void *)swift_unknownObjectRelease();
    uint64_t v13 = 0LL;
    Class v12 = 0LL;
    if (v6) {
      goto LABEL_31;
    }
    unint64_t v5 = 0LL;
    BOOL v8 = a2;
LABEL_52:
    *a4 = v7;
    a4[1] = v23;
    a4[2] = v13;
    a4[3] = v5;
    a4[4] = v8;
  }

  return result;
}

    __break(1u);
LABEL_65:
    __break(1u);
LABEL_66:
    __break(1u);
LABEL_67:
    __break(1u);
  }

  __break(1u);
  while (2)
  {
    __break(1u);
    while (1)
    {
      if (!v4)
      {
        __break(1u);
        goto LABEL_72;
      }

  unint64_t v35 = (void *)v48[5];
  _Block_object_dispose(&v47, 8);
  return v35;
}

  unint64_t v19 = v31 - v9;
  if (v19 >= 0x101)
  {
    if (v12 < v9 + 256
      || (int v36 = (v12 - v9) & 0xFFFFFFFFFFFFFF00LL,
          v9 += v36,
          v19 -= v36,
          uint64_t result = a2 + *(unsigned __int16 *)(a4 + 16 * v9),
          v19 >= 0x101))
    {
      unint64_t v19 = 256LL;
    }
  }

LABEL_87:
      uint64_t v13 = 0LL;
LABEL_88:
      char v37 = v88;
      goto LABEL_89;
    }

    unint64_t v34 = v32 + 1;
    if (v33 <= v34) {
      goto LABEL_67;
    }
    *(void *)(a1 + 24) = v34;
    unint64_t v5 = *(void *)(a1 + 24);
    if (*(void *)(a1 + 16) <= v5) {
      goto LABEL_67;
    }
LABEL_49:
    ++v15;
    ++v14;
  }

  unint64_t v35 = *(void *)(a1 + 24);
  int v36 = *(unsigned __int8 *)(*(void *)a1 + v35);
  if (v36 == 44)
  {
    if (*(void *)(a1 + 16) > v35 + 1)
    {
      *(void *)(a1 + 24) = v35 + 1;
      unint64_t v5 = *(void *)(a1 + 24);
      if (*(_BYTE *)(*(void *)a1 + v5) == 125) {
        goto LABEL_67;
      }
      goto LABEL_49;
    }

    char v37 = v88;
    if (a3)
    {
      unint64_t v68 = *(void *)(a1 + 48);
      BOOL v8 = v35 >= v68;
      uint64_t v69 = v35 - v68;
      if (v8) {
        uint64_t v70 = v69;
      }
      else {
        uint64_t v70 = 0LL;
      }
      int64_t v58 = -[NSString initWithFormat:]( objc_alloc(&OBJC_CLASS___NSString),  "initWithFormat:",  @"%@ around line %lu, column %lu.",  @"Unexpected end of file during JSON parse.",  *(void *)(a1 + 40),  v70);
      goto LABEL_101;
    }

    goto LABEL_102;
  }

  if (v36 != 125)
  {
    char v37 = v88;
    if (a3)
    {
      unint64_t v55 = *(void *)(a1 + 48);
      BOOL v8 = v35 >= v55;
      uint64_t v56 = v35 - v55;
      if (v8) {
        uint64_t v57 = v56;
      }
      else {
        uint64_t v57 = 0LL;
      }
      int64_t v58 = -[NSString initWithFormat:]( objc_alloc(&OBJC_CLASS___NSString),  "initWithFormat:",  @"%@ around line %lu, column %lu.",  @"Badly formed object",  *(void *)(a1 + 40),  v57);
LABEL_101:
      v71 = v58;
      Class v72 = -[NSNumber initWithUnsignedInteger:]( objc_alloc(&OBJC_CLASS___NSNumber),  "initWithUnsignedInteger:",  *(void *)(a1 + 24));
      v91 = @"NSDebugDescription";
      v92 = @"NSJSONSerializationErrorIndex";
      Class v93 = v71;
      Class v94 = v72;
      *a3 = +[NSError errorWithDomain:code:userInfo:]( NSError,  "errorWithDomain:code:userInfo:",  @"NSCocoaErrorDomain",  3840,  [MEMORY[0x189603F68] dictionaryWithObjects:&v93 forKeys:&v91 count:2]);
    }

            if (!v48) {
              goto LABEL_142;
            }
            uint64_t v50 = *v49++;
            unint64_t v47 = v50;
            --v48;
            if (v50 < 0) {
              goto LABEL_143;
            }
          }

          if (v47 == 61) {
            goto LABEL_143;
          }
LABEL_97:
          goto LABEL_87;
        }

    if ((Measurement<>.FormatStyle.shouldConvertToBestUnit.getter(v12) & 1) != 0)
    {
      *(void *)&v255[0] = v227;
      *((void *)&v255[0] + 1) = v17;
      v169 = Measurement<>.FormatStyle.skeletonForBaseUnit(_:)((uint64_t)v255, v12);
      if (v170)
      {
        v172 = (void *)v169;
        v173 = v170;
        v174 = v171;
        v255[0] = *(_OWORD *)(v27 + 8);
        swift_unknownObjectRetain();
        v175 = specialized static ICUMeasurementNumberFormatter.create(for:locale:)( v172,  (unint64_t)v173,  (uint64_t)v255);
        swift_unknownObjectRelease();
        if (v175)
        {
          ICUNumberFormatterBase.attributedFormatPositions(_:)(v174, 0LL, 0x100000000LL);
          if (v177)
          {
            v179 = v176;
            v180 = v177;
            v181 = v178;
            swift_bridgeObjectRetain();
            BigString.init(_:)();
            AttributedString.init(_:attributes:)(v253, MEMORY[0x18961AFF0], MEMORY[0x18961AFF8], (uint64_t *)v255);
            unint64_t v38 = *(void *)&v255[0];
            v182 = *(void *)(v181 + 16);
            if (v182)
            {
              *(void *)&v233[8] = v179;
              *(void *)&v233[16] = v180;
              v221 = (unint64_t)v175;
              v222 = v173;
              v231 = (char *)&v243 + 8;
              v232 = v256;
              swift_bridgeObjectRetain();
              *(void *)v233 = lazy protocol witness table accessor for type String and conformance String();
              v220 = (char *)v181;
              v183 = v181 + 48;
              v229 = 0x80000001839CC230LL;
              v223 = 0x80000001839CC1F0LL;
              do
              {
                v239 = v182;
                v184 = *(unsigned int *)(v183 - 16);
                v186 = *(void *)&v233[8];
                v185 = *(void *)&v233[16];
                v243 = *(_OWORD *)&v233[8];
                swift_bridgeObjectRetain();
                v187 = String.Index.init<A>(utf16Offset:in:)();
                *(void *)&v243 = v186;
                *((void *)&v243 + 1) = v185;
                swift_bridgeObjectRetain();
                v188 = String.Index.init<A>(utf16Offset:in:)();
                if (v188 >> 14 < v187 >> 14) {
                  goto LABEL_131;
                }
                v189 = v188;
                swift_retain();
                specialized Range<>.init<A>(_range:in:)(v187, v189, (_OWORD *)v38, (unint64_t *)&v243);
                v190 = v245;
                if (v245 == 2) {
                  goto LABEL_137;
                }
                v235 = *((void *)&v243 + 1);
                v236 = v243;
                v234 = v244;
                v191 = v246;
                v192 = (_OWORD *)v247;
                v237 = v249;
                v238 = v248;
                v252 = MEMORY[0x18961AFF0];
                v193 = 0;
                v194 = 2;
                switch((int)v184)
                {
                  case 0:
                    goto LABEL_97;
                  case 1:
                    v193 = 1;
LABEL_97:
                    specialized AttributeContainer.subscript.setter( v193,  (uint64_t)&type metadata for AttributeScopes.FoundationAttributes.NumberFormatAttributes.NumberPartAttribute.NumberPart,  (uint64_t (*)(void))lazy protocol witness table accessor for type AttributeScopes.FoundationAttributes.NumberFormatAttributes.NumberPartAttribute.NumberPart and conformance AttributeScopes.FoundationAttributes.NumberFormatAttributes.NumberPartAttribute.NumberPart,  0xD00000000000001BLL,  v223);
                    break;
                  case 2:
                    goto LABEL_102;
                  case 6:
                    v194 = 0;
                    goto LABEL_102;
                  case 7:
                    v194 = 3;
                    goto LABEL_102;
                  case 8:
                    v194 = 4;
                    goto LABEL_102;
                  case 10:
                    v194 = 1;
LABEL_102:
                    specialized AttributeContainer.subscript.setter(v194);
                    break;
                  default:
                    break;
                }

                AttributeScopes.FoundationAttributes.MeasurementAttribute.Component.init(unumberFormatField:)( v184,  &v243);
                if (v243 != 2) {
                  specialized AttributeContainer.subscript.setter( v243,  (uint64_t)&type metadata for AttributeScopes.FoundationAttributes.MeasurementAttribute.Component,  (uint64_t (*)(void))lazy protocol witness table accessor for type AttributeScopes.FoundationAttributes.MeasurementAttribute.Component and conformance AttributeScopes.FoundationAttributes.MeasurementAttribute.Component,  0xD00000000000001FLL,  v229);
                }
                v251 = v252;
                if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
                {
                  v195 = *(_OWORD *)(v38 + 32);
                  v271 = *(_OWORD *)(v38 + 16);
                  v272 = v195;
                  v273 = *(_OWORD *)(v38 + 48);
                  v196 = *(void *)(v38 + 64);
                  v197 = *(void *)(v38 + 72);
                  v230 = v192;
                  v199 = *(void *)(v38 + 80);
                  v198 = *(void *)(v38 + 88);
                  type metadata accessor for AttributedString.Guts();
                  swift_allocObject();
                  outlined retain of Locale((uint64_t)&v271);
                  swift_unknownObjectRetain();
                  v200 = v198;
                  v192 = v230;
                  v201 = AttributedString.Guts.init(string:runs:)(&v271, v196, v197, v199, v200);
                  swift_release();
                  unint64_t v38 = v201;
                }

                id v27 = v240;
                v202 = v241;
                v203 = *(_OWORD *)(v38 + 32);
                v268 = *(_OWORD *)(v38 + 16);
                v269 = v203;
                v270 = *(_OWORD *)(v38 + 48);
                BigString.startIndex.getter();
                BigString.endIndex.getter();
                v260 = v236;
                v261 = v235;
                v262 = v234;
                v263 = v190;
                v264 = v191;
                v265 = (unint64_t)v192;
                v266 = v238;
                v267 = v237;
                BigString.unicodeScalars.getter();
                swift_retain_n();
                BigString.UnicodeScalarView.subscript.getter();
                swift_release();
                outlined release of Locale((uint64_t)v254);
                outlined release of Locale((uint64_t)v255);
                v205 = v231;
                v204 = v232;
                v206 = v232[1];
                *(_OWORD *)v231 = *v232;
                v205[1] = v206;
                v207 = v204[3];
                v205[2] = v204[2];
                v205[3] = v207;
                *(void *)&v243 = v38;
                if (one-time initialization token for currentIdentity != -1) {
                  swift_once();
                }
                v208 = (uint64_t *)(static AttributedString.currentIdentity + 16);
                v209 = (os_unfair_lock_s *)(static AttributedString.currentIdentity + 24);
                swift_retain();
                os_unfair_lock_lock(v209);
                closure #1 in static AttributedString._nextModifyIdentity.getter(v208, &v242);
                v241 = v202;
                os_unfair_lock_unlock(v209);
                swift_release();
                v210 = v242;
                v250 = v242;
                BigString.init()();
                v242 = 0LL;
                MEMORY[0x186E20E78](&v242, 8LL);
                v211 = v242;
                type metadata accessor for AttributedString.Guts();
                v212 = swift_allocObject();
                if ((BigString.isEmpty.getter() & 1) == 0) {
                  goto LABEL_132;
                }
                v213 = v258;
                *(_OWORD *)(v212 + 16) = v257;
                *(_OWORD *)(v212 + 32) = v213;
                *(_OWORD *)(v212 + 4_Block_object_dispose(va, 8) = v259;
                *(void *)(v212 + 64) = 0LL;
                *(void *)(v212 + 72) = 0LL;
                *(void *)(v212 + 80) = 0LL;
                *(void *)(v212 + 8_Block_object_dispose(va, 8) = v211;
                swift_release();
                LOBYTE(v242) = 0;
                AttributedSubstring.mergeAttributes(_:mergePolicy:)((uint64_t *)&v251, (char *)&v242);
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                if (v250 != v210) {
                  goto LABEL_139;
                }
                v183 += 24LL;
                unint64_t v38 = v243;
                swift_release();
                v182 = v239 - 1;
              }

              while (v239 != 1);
              swift_bridgeObjectRelease();
              CFIndex v40 = v228;
            }

            else
            {
              CFIndex v40 = v228;
            }

            swift_bridgeObjectRelease();
            goto LABEL_118;
          }

      if (v14) {
        goto LABEL_121;
      }
      goto LABEL_88;
    }
  }

  CFArrayRef v11 = swift_unknownObjectRetain_n();
  Class v12 = specialized Rope._endPath.getter(v11);
  uint64_t result = (uint64_t *)swift_unknownObjectRelease();
  uint64_t v13 = 0LL;
  size_t v14 = 0LL;
  if (!v3)
  {
    CFIndex v15 = 0LL;
    unint64_t v17 = a2;
    goto LABEL_14;
  }

      outlined destroy of Any?((uint64_t)v266, &demangling cache variable for type metadata for (Hashable & Sendable)?);
      outlined destroy of Any?((uint64_t)v267, &demangling cache variable for type metadata for (Hashable & Sendable)?);
      outlined destroy of AttributedString._AttributeValue((uint64_t)&v222);
      outlined destroy of AttributedString._AttributeValue((uint64_t)v227);
      outlined destroy of Any?( (uint64_t)&v243,  &demangling cache variable for type metadata for AttributedString._AttributeValue?);
      outlined destroy of Any?( (uint64_t)&v233,  &demangling cache variable for type metadata for AttributedString._AttributeValue?);
      uint64_t result = outlined destroy of Any?( (uint64_t)&v238,  &demangling cache variable for type metadata for AttributedString._AttributeValue?);
      if ((v104 & 1) == 0) {
        goto LABEL_119;
      }
LABEL_88:
      v103 += 2;
      ++v102;
      v97 = v221;
      if (v105 == v34)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t result = swift_bridgeObjectRelease();
        int64_t v63 = v209;
        unint64_t v74 = v210;
        uint64_t v69 = *(uint64_t **)(v209 + 64);
        uint64_t v75 = *(void *)(v209 + 88);
        v207 = v195;
        *(void *)&v243 = v210;
        CFArrayRef v54 = v203;
        *((void *)&v243 + 1) = v203;
        unint64_t v55 = (uint64_t)v194;
        *(void *)&v244 = v194;
        unint64_t v47 = __OFADD__(v204++, 1LL);
        if (!v47) {
          goto LABEL_56;
        }
        __break(1u);
LABEL_117:
        outlined destroy of AttributedString._AttributeValue((uint64_t)v227);
LABEL_118:
        outlined destroy of Any?( (uint64_t)&v243,  (uint64_t *)&demangling cache variable for type metadata for (AttributedString._AttributeValue?, AttributedString._AttributeValue?));
        outlined destroy of Any?((uint64_t)&v233, v69);
        outlined destroy of Any?((uint64_t)&v238, v69);
LABEL_119:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t result = swift_bridgeObjectRelease();
        int64_t v63 = v209;
        unint64_t v55 = v202;
        uint64_t v81 = v213;
        goto LABEL_120;
      }
    }
  }

  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
LABEL_120:
  if (v201 != *(void *)(v63 + 88)) {
    goto LABEL_209;
  }
  if (v55)
  {
    v124 = *(void *)(v55 + 24 * ((v81 >> ((4 * *(_BYTE *)(v55 + 18) + 8) & 0x3C)) & 0xF) + 24);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }

  else
  {
    v125 = *(void *)(v209 + 64);
    swift_unknownObjectRetain();
    v124 = specialized Rope._Node.subscript.getter(v81, v125);
    swift_unknownObjectRelease();
  }

  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  v126 = &v207[v124];
  v127 = v176;
  if (__OFADD__(v207, v124)) {
    goto LABEL_210;
  }
  v128 = v176[1];
  v267[0] = *v176;
  v267[1] = v128;
  v267[2] = v176[2];
  BigString.utf8.getter();
  uint64_t result = v180;
  if (__OFSUB__(v126, v180 >> 11))
  {
LABEL_211:
    __break(1u);
LABEL_212:
    __break(1u);
    goto LABEL_213;
  }

  v129 = BigString.UTF8View.index(_:offsetBy:)();
  v131 = v130;
  v133 = v132;
  v135 = v134;
  uint64_t result = outlined release of Locale((uint64_t)v256);
  if (v192 >= v129 >> 10) {
    v136 = v129;
  }
  else {
    v136 = v193;
  }
  if (v192 >= v129 >> 10) {
    v137 = v131;
  }
  else {
    v137 = v191;
  }
  if (v192 >= v129 >> 10) {
    v138 = v133;
  }
  else {
    v138 = v190;
  }
  if (v192 >= v129 >> 10) {
    v139 = v135;
  }
  else {
    v139 = v189;
  }
  v140 = *v127;
  v141 = v127[1];
  v266[2] = v127[2];
  v266[1] = v141;
  v266[0] = v140;
  if (v136 >> 10 < v196) {
    goto LABEL_212;
  }
  *(void *)&v233 = v200;
  *((void *)&v233 + 1) = v205;
  v234 = v206;
  *(void *)&v235 = v136;
  *((void *)&v235 + 1) = v137;
  *(void *)&v236 = v138;
  *((void *)&v236 + 1) = v139;
  v142 = v208;
  v143 = *(void *)(v208 + 16);
  if (!v143 || v196 == v136 >> 10) {
    goto LABEL_153;
  }
  outlined retain of Locale((uint64_t)v266);
  swift_bridgeObjectRetain();
  v144 = 40LL;
  v145 = v143;
  while (*(void *)(v142 + v144))
  {
    swift_bridgeObjectRelease();
    v144 += 16LL;
    if (!--v145)
    {
      swift_bridgeObjectRelease();
      goto LABEL_148;
    }
  }

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease_n();
  BigString.utf8.getter();
  BigString.UTF8View.subscript.getter();
  outlined release of Locale((uint64_t)v257);
  v227[0] = v200;
  v227[1] = v205;
  v228 = v206;
  v229 = v200;
  v230 = v205;
  v231 = v206;
  specialized BidirectionalCollection<>._getBlock(for:in:)(2LL, v227, (unint64_t *)&v243);
  uint64_t result = outlined release of Locale((uint64_t)&v258);
  if (*((void *)&v246 + 1) != 2LL)
  {
    v136 = v245;
    v137 = *((void *)&v245 + 1);
    v139 = *((void *)&v246 + 1);
    v138 = v246;
  }

      outlined destroy of Any?((uint64_t)v215, &demangling cache variable for type metadata for (Hashable & Sendable)?);
      outlined destroy of Any?((uint64_t)v216, &demangling cache variable for type metadata for (Hashable & Sendable)?);
      outlined destroy of AttributedString._AttributeValue((uint64_t)&v180);
      outlined destroy of AttributedString._AttributeValue((uint64_t)v185);
      outlined destroy of Any?( (uint64_t)&v186,  &demangling cache variable for type metadata for AttributedString._AttributeValue?);
      outlined destroy of Any?( (uint64_t)&v196,  &demangling cache variable for type metadata for AttributedString._AttributeValue?);
      uint64_t result = (unint64_t *)outlined destroy of Any?( (uint64_t)&v201,  &demangling cache variable for type metadata for AttributedString._AttributeValue?);
      if ((v77 & 1) == 0) {
        goto LABEL_119;
      }
LABEL_88:
      v76 += 2;
      ++v75;
      uint64_t v70 = v178;
      if (v78 == v65)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t result = (unint64_t *)swift_bridgeObjectRelease();
        size_t v14 = v156;
        char v46 = *(uint64_t **)(v156 + 64);
        CFIndex v51 = *(void *)(v156 + 88);
        v163 = v151;
        uint64_t v50 = v169;
        v186 = v169;
        v187 = v158;
        unint64_t v33 = (uint64_t)v150;
        v168 = v158;
        v188 = v150;
        id v28 = __OFADD__(v159++, 1LL);
        if (!v28) {
          goto LABEL_56;
        }
        __break(1u);
LABEL_117:
        outlined destroy of AttributedString._AttributeValue((uint64_t)v185);
LABEL_118:
        outlined destroy of Any?( (uint64_t)&v186,  (uint64_t *)&demangling cache variable for type metadata for (AttributedString._AttributeValue?, AttributedString._AttributeValue?));
        outlined destroy of Any?((uint64_t)&v196, v46);
        outlined destroy of Any?((uint64_t)&v201, v46);
LABEL_119:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t result = (unint64_t *)swift_bridgeObjectRelease();
        size_t v14 = v156;
        uint64_t v57 = v164;
        CFArrayRef v54 = v168;
        CFIndex v51 = v153;
        goto LABEL_120;
      }
    }
  }

  swift_bridgeObjectRelease();
  uint64_t result = (unint64_t *)swift_bridgeObjectRelease();
LABEL_120:
  if (v51 != *(void *)(v14 + 88)) {
    goto LABEL_194;
  }
  if (v57)
  {
    v97 = *(void *)(v57 + 24 * ((v54 >> ((4 * *(_BYTE *)(v57 + 18) + 8) & 0x3C)) & 0xF) + 24);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }

  else
  {
    v98 = *(void *)(v14 + 64);
    swift_unknownObjectRetain();
    v97 = specialized Rope._Node.subscript.getter(v54, v98);
    swift_unknownObjectRelease();
  }

  swift_bridgeObjectRelease();
  uint64_t result = (unint64_t *)swift_bridgeObjectRelease();
  Class v99 = v163 + v97;
  if (__OFADD__(v163, v97)) {
    goto LABEL_195;
  }
  Class v100 = v139;
  int64_t v101 = v139[1];
  v180 = *v139;
  v181 = v101;
  v182 = v139[2];
  BigString.utf8.getter();
  uint64_t result = (unint64_t *)v143;
  if (__OFSUB__(v99, v143 >> 11))
  {
LABEL_196:
    __break(1u);
    goto LABEL_197;
  }

  int64_t v102 = BigString.UTF8View.index(_:offsetBy:)();
  v104 = v103;
  v105 = v100;
  v107 = v106;
  v109 = v108;
  uint64_t result = (unint64_t *)outlined release of Locale((uint64_t)v207);
  if (v148 >= v102 >> 10) {
    v110 = v102;
  }
  else {
    v110 = v149;
  }
  if (v148 >= v102 >> 10)
  {
    v111 = v107;
  }

  else
  {
    v104 = v147;
    v111 = v146;
  }

  if (v148 >= v102 >> 10) {
    v112 = v109;
  }
  else {
    v112 = v145;
  }
  uint64_t v113 = *v105;
  v114 = v105[2];
  v216[1] = v105[1];
  v216[2] = v114;
  v216[0] = v113;
  if (v110 >> 10 < v152)
  {
LABEL_197:
    __break(1u);
LABEL_198:
    __break(1u);
LABEL_199:
    __break(1u);
    goto LABEL_200;
  }

  *(void *)&v201 = v165;
  *((void *)&v201 + 1) = v162;
  *(void *)&v202 = v161;
  *((void *)&v202 + 1) = v160;
  *(void *)&v203 = v110;
  *((void *)&v203 + 1) = v104;
  *(void *)&v204 = v111;
  *((void *)&v204 + 1) = v112;
  v115 = v167;
  v116 = *(void *)(v167 + 16);
  if (!v116 || v152 == v110 >> 10) {
    goto LABEL_150;
  }
  v117 = v104;
  outlined retain of Locale((uint64_t)v216);
  swift_bridgeObjectRetain();
  v118 = 40LL;
  v119 = v116;
  while (*(void *)(v115 + v118))
  {
    swift_bridgeObjectRelease();
    v118 += 16LL;
    if (!--v119)
    {
      swift_bridgeObjectRelease();
      v104 = v117;
      goto LABEL_145;
    }
  }

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease_n();
  BigString.utf8.getter();
  BigString.UTF8View.subscript.getter();
  outlined release of Locale((uint64_t)v208);
  *(void *)&v196 = v165;
  *((void *)&v196 + 1) = v162;
  *(void *)&v197 = v161;
  *((void *)&v197 + 1) = v160;
  *(void *)&v198 = v165;
  *((void *)&v198 + 1) = v162;
  *(void *)&v199 = v161;
  *((void *)&v199 + 1) = v160;
  specialized BidirectionalCollection<>._getBlock(for:in:)(2LL, &v196, (unint64_t *)&v186);
  uint64_t result = (unint64_t *)outlined release of Locale((uint64_t)&v211);
  v104 = v117;
  if (v193 != 2)
  {
    v110 = v190;
    if (v152 > v190 >> 10) {
      goto LABEL_203;
    }
    v104 = v191;
    v111 = v192;
    v112 = v193;
  }

      outlined destroy of Any?((uint64_t)v160, &demangling cache variable for type metadata for (Hashable & Sendable)?);
      outlined destroy of Any?((uint64_t)v161, &demangling cache variable for type metadata for (Hashable & Sendable)?);
      outlined destroy of AttributedString._AttributeValue((uint64_t)v162);
      outlined destroy of AttributedString._AttributeValue((uint64_t)v164);
      outlined destroy of Any?( (uint64_t)&v165,  &demangling cache variable for type metadata for AttributedString._AttributeValue?);
      outlined destroy of Any?( (uint64_t)&v170,  &demangling cache variable for type metadata for AttributedString._AttributeValue?);
      uint64_t result = outlined destroy of Any?( (uint64_t)&v175,  &demangling cache variable for type metadata for AttributedString._AttributeValue?);
      if ((v77 & 1) == 0) {
        goto LABEL_119;
      }
LABEL_88:
      v76 += 2;
      ++v75;
      uint64_t v70 = v150;
      if (v78 == v58)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t result = swift_bridgeObjectRelease();
        char v46 = v139;
        CFDictionaryRef v48 = *(uint64_t **)(v139 + 64);
        v147 = *(uint64_t **)(v139 + 72);
        uint64_t v52 = *(void *)(v139 + 88);
        uint64_t v30 = v129;
        v138 = v130;
        unint64_t v47 = v141;
        *(void *)&v165 = v141;
        *((void *)&v165 + 1) = v129;
        id v31 = (uint64_t)v128;
        *(void *)&v166 = v128;
        uint64_t v25 = __OFADD__(v136++, 1LL);
        if (!v25) {
          goto LABEL_56;
        }
        __break(1u);
LABEL_117:
        outlined destroy of AttributedString._AttributeValue((uint64_t)v164);
LABEL_118:
        outlined destroy of Any?( (uint64_t)&v165,  (uint64_t *)&demangling cache variable for type metadata for (AttributedString._AttributeValue?, AttributedString._AttributeValue?));
        outlined destroy of Any?((uint64_t)&v170, v48);
        outlined destroy of Any?((uint64_t)&v175, v48);
LABEL_119:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t result = swift_bridgeObjectRelease();
        char v46 = v139;
        uint64_t v52 = v131;
        uint64_t v30 = v132;
        goto LABEL_120;
      }
    }
  }

  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
LABEL_120:
  if (v52 != *(void *)(v46 + 88)) {
    goto LABEL_154;
  }
  if (v137)
  {
    v97 = *(void *)(v137 + 24 * ((v30 >> ((4 * *(_BYTE *)(v137 + 18) + 8) & 0x3C)) & 0xF) + 24);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }

  else
  {
    v98 = *(void *)(v46 + 64);
    swift_unknownObjectRetain();
    v97 = specialized Rope._Node.subscript.getter(v30, v98);
    swift_unknownObjectRelease();
  }

  Class v99 = v121;
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  Class v100 = &v138[v97];
  if (__OFADD__(v138, v97)) {
    goto LABEL_155;
  }
  int64_t v101 = v116[1];
  v165 = *v116;
  v166 = v101;
  v167 = v116[2];
  uint64_t result = BigString.utf8.getter();
  if (__OFSUB__(v100, v99 >> 11))
  {
LABEL_156:
    __break(1u);
    goto LABEL_157;
  }

  int64_t v102 = BigString.UTF8View.index(_:offsetBy:)();
  v104 = v103;
  id v106 = v105;
  v108 = v107;
  outlined release of Locale((uint64_t)&v156);
  uint64_t result = outlined release of AttributedString.Runs((uint64_t)v181);
  v109 = v125;
  if (v126 >= v102 >> 10) {
    v109 = v102;
  }
  if (v127 > v109 >> 10)
  {
LABEL_157:
    __break(1u);
LABEL_158:
    __break(1u);
LABEL_159:
    __break(1u);
    goto LABEL_160;
  }

  v110 = v126 >= v102 >> 10;
  v111 = v122;
  v112 = v123;
  if (v126 >= v102 >> 10)
  {
    v111 = v108;
    v112 = v104;
  }

  uint64_t v113 = v124;
  *v124 = v109;
  v113[1] = v112;
  v114 = *((void *)&v123 + 1);
  if (v110) {
    v114 = v106;
  }
  v113[2] = v114;
  v113[3] = v111;
  return result;
}

      outlined destroy of Any?((uint64_t)v163, &demangling cache variable for type metadata for (Hashable & Sendable)?);
      outlined destroy of Any?((uint64_t)v164, &demangling cache variable for type metadata for (Hashable & Sendable)?);
      outlined destroy of AttributedString._AttributeValue((uint64_t)v165);
      outlined destroy of AttributedString._AttributeValue((uint64_t)v167);
      outlined destroy of Any?( (uint64_t)&v168,  &demangling cache variable for type metadata for AttributedString._AttributeValue?);
      outlined destroy of Any?( (uint64_t)&v173,  &demangling cache variable for type metadata for AttributedString._AttributeValue?);
      uint64_t result = (unint64_t *)outlined destroy of Any?( (uint64_t)&v178,  &demangling cache variable for type metadata for AttributedString._AttributeValue?);
      if ((v82 & 1) == 0) {
        goto LABEL_119;
      }
LABEL_88:
      v81 += 2;
      ++v80;
      uint64_t v75 = v153;
      if (v83 == v60)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t result = (unint64_t *)swift_bridgeObjectRelease();
        Class v12 = v143;
        uint64_t v52 = v144;
        CFDictionaryRef v48 = *(uint64_t **)(v143 + 64);
        char v53 = *(void *)(v143 + 88);
        v142 = v132;
        *(void *)&v168 = v144;
        unint64_t v33 = v139;
        *((void *)&v168 + 1) = v139;
        unint64_t v34 = (uint64_t)v131;
        *(void *)&v169 = v131;
        id v28 = __OFADD__(v140++, 1LL);
        if (!v28) {
          goto LABEL_56;
        }
        __break(1u);
LABEL_117:
        outlined destroy of AttributedString._AttributeValue((uint64_t)v167);
LABEL_118:
        outlined destroy of Any?( (uint64_t)&v168,  (uint64_t *)&demangling cache variable for type metadata for (AttributedString._AttributeValue?, AttributedString._AttributeValue?));
        outlined destroy of Any?((uint64_t)&v173, v48);
        outlined destroy of Any?((uint64_t)&v178, v48);
LABEL_119:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t result = (unint64_t *)swift_bridgeObjectRelease();
        Class v12 = v143;
        unint64_t v33 = v133;
        goto LABEL_120;
      }
    }
  }

  swift_bridgeObjectRelease();
  uint64_t result = (unint64_t *)swift_bridgeObjectRelease();
LABEL_120:
  int64_t v102 = v124;
  if (v137 != *(void *)(v12 + 88)) {
    goto LABEL_154;
  }
  if (v141)
  {
    v103 = *(void *)(v141 + 24 * ((v33 >> ((4 * *(_BYTE *)(v141 + 18) + 8) & 0x3C)) & 0xF) + 24);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }

  else
  {
    v104 = *(void *)(v12 + 64);
    swift_unknownObjectRetain();
    v103 = specialized Rope._Node.subscript.getter(v33, v104);
    swift_unknownObjectRelease();
  }

  swift_bridgeObjectRelease();
  uint64_t result = (unint64_t *)swift_bridgeObjectRelease();
  v105 = &v142[v103];
  if (__OFADD__(v142, v103)) {
    goto LABEL_155;
  }
  id v106 = v121[1];
  v168 = *v121;
  v169 = v106;
  v170 = v121[2];
  uint64_t result = (unint64_t *)BigString.utf8.getter();
  if (__OFSUB__(v105, v102 >> 11))
  {
LABEL_156:
    __break(1u);
    goto LABEL_157;
  }

  v107 = BigString.UTF8View.index(_:offsetBy:)();
  v109 = v108;
  v111 = v110;
  uint64_t v113 = v112;
  outlined release of Locale((uint64_t)&v159);
  uint64_t result = (unint64_t *)outlined release of AttributedString.Runs((uint64_t)v184);
  v114 = v128;
  if (v129 >= v107 >> 10) {
    v114 = v107;
  }
  if (v130 > v114 >> 10)
  {
LABEL_157:
    __break(1u);
LABEL_158:
    __break(1u);
LABEL_159:
    __break(1u);
    goto LABEL_160;
  }

  v115 = v129 >= v107 >> 10;
  v116 = v125;
  v117 = v126;
  if (v129 >= v107 >> 10)
  {
    v116 = v113;
    v117 = v109;
  }

  v118 = v127;
  *v127 = v114;
  v118[1] = v117;
  v119 = *((void *)&v126 + 1);
  if (v115) {
    v119 = v111;
  }
  v118[2] = v119;
  v118[3] = v116;
  return result;
}

            swift_bridgeObjectRelease();
            CFIndex v40 = v228;
            int64_t v58 = v217;
            if ((v219 & 1) != 0)
            {
LABEL_53:
              int64_t v66 = (void *)(*(void *)(v63 + 56) + 16 * v58);
              swift_bridgeObjectRelease();
              *int64_t v66 = v48;
              v66[1] = v49;
              goto LABEL_90;
            }
          }
        }

        else
        {
          int64_t v62 = v57;
          specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)( v61,  isUniquelyReferenced_nonNull_native);
          int64_t v63 = v238[0];
          Class v64 = specialized __RawDictionaryStorage.find<A>(_:)(v55);
          if ((v62 & 1) != (v65 & 1)) {
            goto LABEL_289;
          }
          int64_t v58 = v64;
          CFIndex v40 = v228;
          if ((v62 & 1) != 0) {
            goto LABEL_53;
          }
        }

        *(void *)(v63 + 8 * (v58 >> 6) + 64) |= 1LL << v58;
        *(void *)(*(void *)(v63 + 48) + 8 * v5_Block_object_dispose(va, 8) = v55;
        int v87 = (void *)(*(void *)(v63 + 56) + 16 * v58);
        void *v87 = v48;
        v87[1] = v49;
        char v88 = *(void *)(v63 + 16);
        int64_t v89 = __OFADD__(v88, 1LL);
        int64_t v90 = v88 + 1;
        if (v89) {
          goto LABEL_282;
        }
        *(void *)(v63 + 16) = v90;
LABEL_90:
        swift_bridgeObjectRelease();
        v231 = v63;
        if (v39) {
          goto LABEL_29;
        }
LABEL_32:
        uint64_t v52 = v35 + 1;
        if (__OFADD__(v35, 1LL))
        {
          __break(1u);
LABEL_272:
          __break(1u);
LABEL_273:
          __break(1u);
LABEL_274:
          __break(1u);
          goto LABEL_275;
        }

        if (v52 >= v40) {
          goto LABEL_92;
        }
        char v53 = *(void *)(v36 + 8 * v52);
        ++v35;
        if (!v53)
        {
          unint64_t v35 = v52 + 1;
          if (v52 + 1 >= v40) {
            goto LABEL_92;
          }
          char v53 = *(void *)(v36 + 8 * v35);
          if (!v53)
          {
            unint64_t v35 = v52 + 2;
            if (v52 + 2 >= v40) {
              goto LABEL_92;
            }
            char v53 = *(void *)(v36 + 8 * v35);
            if (!v53)
            {
              CFArrayRef v54 = v52 + 3;
              if (v54 >= v40)
              {
LABEL_92:

                swift_release();
                size_t v1 = v234;
                swift_bridgeObjectRelease();
                v234[13] = v231;
                goto LABEL_94;
              }

              char v53 = *(void *)(v36 + 8 * v54);
              if (!v53)
              {
                while (1)
                {
                  unint64_t v35 = v54 + 1;
                  if (__OFADD__(v54, 1LL)) {
                    break;
                  }
                  if (v35 >= v40) {
                    goto LABEL_92;
                  }
                  char v53 = *(void *)(v36 + 8 * v35);
                  ++v54;
                  if (v53) {
                    goto LABEL_45;
                  }
                }

        Hasher._combine(_:)(1u);
        swift_bridgeObjectRetain();
        specialized Dictionary<>.hash(into:)(a1, v38);
        swift_bridgeObjectRelease();
        uint64_t v39 = v107;
        if (!v107) {
          goto LABEL_42;
        }
        goto LABEL_88;
      }

      outlined init with take of LocalePreferences?( (uint64_t)v121,  (uint64_t)v101,  (uint64_t *)&demangling cache variable for type metadata for LocalePreferences?);
      unint64_t v74 = v101;
    }

    else
    {
      Hasher._combine(_:)(0);
      unint64_t v74 = v102;
    }

    outlined retain of LocalePreferences(v74);
    if (!v104) {
      goto LABEL_39;
    }
    goto LABEL_85;
  }

  Hasher._combine(_:)(0);
LABEL_17:
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return outlined release of String.LocalizationValue.FormatArgument.DateArgumentFormatStyle( (uint64_t)v127,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, __int16))outlined consume of Date.AttributedStyle.InnerStyle);
}

        Hasher._combine(_:)(1u);
        swift_bridgeObjectRetain();
        specialized Dictionary<>.hash(into:)(a1, v35);
        swift_bridgeObjectRelease();
        int v36 = v114;
        if (!v114) {
          goto LABEL_42;
        }
        goto LABEL_88;
      }

      outlined init with take of LocalePreferences?( (uint64_t)v128,  (uint64_t)v108,  (uint64_t *)&demangling cache variable for type metadata for LocalePreferences?);
      unint64_t v74 = v108;
    }

    else
    {
      Hasher._combine(_:)(0);
      unint64_t v74 = v109;
    }

    outlined retain of LocalePreferences(v74);
    if (!v111) {
      goto LABEL_39;
    }
    goto LABEL_85;
  }

  Hasher._combine(_:)(0);
LABEL_17:
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
LABEL_81:
  outlined release of String.LocalizationValue.FormatArgument.DateArgumentFormatStyle( (uint64_t)v132,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, __int16))outlined consume of Date.AttributedStyle.InnerStyle);
  return outlined release of String.LocalizationValue.FormatArgument.DateArgumentFormatStyle( (uint64_t)v132,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, __int16))outlined consume of Date.AttributedStyle.InnerStyle);
}

        if ((POSIXErrorCode.init(rawValue:)() & 0x100000000LL) != 0)
        {
          *(void *)&v185 = 0LL;
          *((void *)&v185 + 1) = 0xE000000000000000LL;
          _StringGuts.grow(_:)(22LL);
          swift_bridgeObjectRelease();
          *(void *)&v185 = 0xD000000000000014LL;
          *((void *)&v185 + 1) = 0x80000001839C9190LL;
          LODWORD(v187[0]) = v10;
          v161._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
          String.append(_:)(v161);
          swift_bridgeObjectRelease();
          _assertionFailure(_:_:file:line:flags:)();
          __break(1u);
          JUMPOUT(0x183220A00LL);
        }

        static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSPOSIXErrorDomain");
        v151 = (int)POSIXErrorCode.rawValue.getter();
        v152 = objc_allocWithZone((Class)&OBJC_CLASS___NSError);
        v153 = String._bridgeToObjectiveCImpl()();
        swift_bridgeObjectRelease();
        int64_t v65 = objc_msgSend(v152, sel_initWithDomain_code_userInfo_, v153, v151, _NativeDictionary.bridged()());
        swift_unknownObjectRelease();
        swift_unknownObjectRelease();
        v154 = objc_msgSend(v65, sel_domain);
        v155 = static String._unconditionallyBridgeFromObjectiveC(_:)(v154);
        unint64_t v47 = v156;

        if (v155 == static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSPOSIXErrorDomain") && v47 == v157)
        {
          swift_bridgeObjectRelease_n();
        }

        else
        {
          uint64_t v45 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if ((v45 & 1) == 0) {
            goto LABEL_101;
          }
        }

            int64_t v58 = 256LL;
          }

      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, PredicateCodableConfiguration.AllowListKeyPath>);
      Class v77 = static _DictionaryStorage.copy(original:)();
      v71 = v77;
      if (!*(void *)(v10 + 16)) {
        goto LABEL_119;
      }
      int64_t v78 = (char *)(v77 + 64);
      __srca = (char *)(v10 + 64);
      unint64_t v79 = (unint64_t)((1LL << *(_BYTE *)(v71 + 32)) + 63) >> 6;
      v127 = v71;
      if (v71 != v10 || v78 >= &__srca[8 * v79]) {
        memmove(v78, __srca, 8 * v79);
      }
      v134 = 0LL;
      *(void *)(v71 + 16) = *(void *)(v10 + 16);
      unint64_t v80 = 1LL << *(_BYTE *)(v10 + 32);
      uint64_t v81 = -1LL;
      if (v80 < 64) {
        uint64_t v81 = ~(-1LL << v80);
      }
      v140 = v81 & *(void *)(v10 + 64);
      v129 = (unint64_t)(v80 + 63) >> 6;
      while (1)
      {
        if (v140)
        {
          uint64_t v82 = __clz(__rbit64(v140));
          v140 &= v140 - 1;
          int64_t v83 = v82 | (v134 << 6);
        }

        else
        {
          Class v94 = v134 + 1;
          if (__OFADD__(v134, 1LL))
          {
LABEL_121:
            __break(1u);
            goto LABEL_122;
          }

          if (v94 >= v129) {
            goto LABEL_119;
          }
          uint64_t v95 = *(void *)&__srca[8 * v94];
          int64_t v96 = v134 + 1;
          if (!v95)
          {
            int64_t v96 = v134 + 2;
            if (v134 + 2 >= v129) {
              goto LABEL_119;
            }
            uint64_t v95 = *(void *)&__srca[8 * v96];
            if (!v95)
            {
              int64_t v96 = v134 + 3;
              if (v134 + 3 >= v129) {
                goto LABEL_119;
              }
              uint64_t v95 = *(void *)&__srca[8 * v96];
              if (!v95)
              {
                int64_t v96 = v134 + 4;
                if (v134 + 4 >= v129) {
                  goto LABEL_119;
                }
                uint64_t v95 = *(void *)&__srca[8 * v96];
                if (!v95)
                {
                  int64_t v96 = v134 + 5;
                  if (v134 + 5 >= v129) {
                    goto LABEL_119;
                  }
                  uint64_t v95 = *(void *)&__srca[8 * v96];
                  if (!v95)
                  {
                    int64_t v96 = v134 + 6;
                    if (v134 + 6 >= v129) {
                      goto LABEL_119;
                    }
                    uint64_t v95 = *(void *)&__srca[8 * v96];
                    if (!v95)
                    {
                      int64_t v96 = v134 + 7;
                      if (v134 + 7 >= v129) {
                        goto LABEL_119;
                      }
                      uint64_t v95 = *(void *)&__srca[8 * v96];
                      if (!v95)
                      {
                        v97 = v134 + 8;
                        if (v134 + 8 >= v129) {
                          goto LABEL_119;
                        }
                        uint64_t v95 = *(void *)&__srca[8 * v97];
                        if (!v95)
                        {
                          while (1)
                          {
                            int64_t v96 = v97 + 1;
                            if (__OFADD__(v97, 1LL)) {
                              goto LABEL_123;
                            }
                            v71 = v127;
                            if (v96 >= v129) {
                              break;
                            }
                            uint64_t v95 = *(void *)&__srca[8 * v96];
                            ++v97;
                            if (v95) {
                              goto LABEL_118;
                            }
                          }

  v167 = v21;
  v147 = v14;
  v148 = v12;
  v149 = v13;
  v150 = v17;
  v151 = v16;
  v152 = v19;
  v153 = v18;
  v154 = v20;
  if (v232 == 2)
  {
    if (v231 != 2) {
      return 0LL;
    }
  }

  else if (v231 == 2 || ((((v232 & 1) == 0) ^ v231) & 1) == 0)
  {
    return 0LL;
  }

  if (v227 == 1)
  {
    if (v226 == 1) {
      goto LABEL_96;
    }
    goto LABEL_109;
  }

  if (v226 == 1)
  {
LABEL_109:
    unint64_t v73 = v221;
    unint64_t v74 = v227;
    outlined copy of Locale.Subdivision??(v221, v227);
    uint64_t v75 = v220;
    uint64_t v76 = v220;
    Class v77 = v226;
    int64_t v78 = v226;
    goto LABEL_34;
  }

  if (!v227)
  {
    if (!v226)
    {
      outlined copy of Locale.Subdivision??(v221, 0LL);
      outlined copy of Locale.Subdivision??(v220, 0LL);
      goto LABEL_96;
    }

    outlined copy of Locale.LanguageCode?(v221, 0LL);
    goto LABEL_129;
  }

  if (!v226)
  {
    outlined copy of Locale.Subdivision??(v221, v227);
    outlined copy of Locale.Subdivision??(v221, v227);
    outlined copy of Locale.Subdivision??(v221, v227);
    outlined copy of Locale.Subdivision??(v220, 0LL);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
LABEL_129:
    uint64_t v81 = v220;
    Class v100 = v226;
    outlined copy of Locale.LanguageCode?(v220, v226);
    unint64_t v80 = v221;
    int64_t v101 = v221;
    unint64_t v79 = v227;
    int64_t v102 = v227;
    goto LABEL_52;
  }

  if ((v225 != v223 || v224 != v222) && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
    return 0LL;
  }
LABEL_96:
  if (v219 == 1)
  {
    if (v218 == 1) {
      goto LABEL_98;
    }
    goto LABEL_117;
  }

  if (v218 == 1)
  {
LABEL_117:
    unint64_t v73 = v212;
    unint64_t v74 = v219;
    outlined copy of Locale.Subdivision??(v212, v219);
    uint64_t v75 = v211;
    uint64_t v76 = v211;
    Class v77 = v218;
    int64_t v78 = v218;
    goto LABEL_34;
  }

  if (!v219)
  {
    if (!v218)
    {
      outlined copy of Locale.Subdivision??(v212, 0LL);
      outlined copy of Locale.Subdivision??(v211, 0LL);
      goto LABEL_98;
    }

    outlined copy of Locale.LanguageCode?(v212, 0LL);
    goto LABEL_140;
  }

  if (!v218)
  {
    outlined copy of Locale.Subdivision??(v212, v219);
    outlined copy of Locale.Subdivision??(v212, v219);
    outlined copy of Locale.Subdivision??(v212, v219);
    outlined copy of Locale.Subdivision??(v211, 0LL);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
LABEL_140:
    uint64_t v81 = v211;
    Class v100 = v218;
    outlined copy of Locale.LanguageCode?(v211, v218);
    unint64_t v80 = v212;
    int64_t v101 = v212;
    unint64_t v79 = v219;
    int64_t v102 = v219;
    goto LABEL_52;
  }

  if ((v217 != v214 || v215 != v213) && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
    return 0LL;
  }
LABEL_98:
  if (v216 == 1)
  {
    v155 = v228;
    if (v210 == 1) {
      goto LABEL_100;
    }
LABEL_127:
    outlined copy of TimeZone??(v216);
    outlined copy of TimeZone??(v210);
    outlined consume of TimeZone??(v216);
    outlined consume of TimeZone??(v210);
    return 0LL;
  }

  if (v210 == 1) {
    goto LABEL_127;
  }
  if (!v216)
  {
    if (!v210)
    {
      outlined copy of TimeZone??(0LL);
      outlined copy of TimeZone??(0LL);
      v155 = v228;
      goto LABEL_100;
    }

  swift_willThrow();

  return objc_msgSend((id)v7, sel_resignCurrent);
}

              uint64_t v50 = dayOfPeriod;
              if (dayOfPeriod == 0x7FFFFFFFFFFFFFFFLL) {
                uint64_t v50 = 0LL;
              }
              *(void *)&__src[5] = v50;
              BYTE8(__src[5]) = dayOfPeriod == 0x7FFFFFFFFFFFFFFFLL;
              if ((v12 & 0x40000) == 0)
              {
LABEL_55:
                if ((v12 & 0x10) == 0) {
                  goto LABEL_56;
                }
                goto LABEL_94;
              }

        v173 = v95;
LABEL_121:
        v60(v173, a2);
        goto LABEL_3;
      }
    }

    else if (v90 >= 64)
    {
      v237 = v88;
      v136 = v233;
      v137 = v208;
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v233 + 32))(v208, v234, v57);
      if (v88 < 0)
      {
        (*(void (**)(_BYTE *, uint64_t))(v136 + 8))(v137, v57);
        uint64_t v95 = v236;
        goto LABEL_87;
      }

      lazy protocol witness table accessor for type Int and conformance Int();
      v138 = v137;
      v91 = v230;
      dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
      v92 = v138;
      goto LABEL_55;
    }

    Class v93 = v234;
    Class v94 = dispatch thunk of BinaryInteger._lowWord.getter();
    (*(void (**)(_BYTE *, uint64_t))(v233 + 8))(v93, v57);
    uint64_t v95 = v236;
    if (v238 >= v94) {
      goto LABEL_56;
    }
    goto LABEL_87;
  }

    Class v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<AnyHashable, Any>);
    int v20 = static _DictionaryStorage.allocate(capacity:)();
LABEL_91:
    v177 = v69 + 64;
    Class v93 = -1LL << *(_BYTE *)(v69 + 32);
    if (-v93 < 64) {
      Class v94 = ~(-1LL << -(char)v93);
    }
    else {
      Class v94 = -1LL;
    }
    uint64_t v95 = v94 & *(void *)(v69 + 64);
    v180 = (unint64_t)(63 - v93) >> 6;
    BOOL v6 = v185;
    int64_t v96 = v20 + 64;
    swift_bridgeObjectRetain();
    swift_retain();
    v97 = 0LL;
    while (v95)
    {
      Class v100 = __clz(__rbit64(v95));
      v95 &= v95 - 1;
      int64_t v101 = v100 | (v97 << 6);
LABEL_115:
      id v106 = (uint64_t *)(*(void *)(v69 + 48) + 16 * v101);
      v108 = *v106;
      v107 = v106[1];
      outlined init with copy of Any(*(void *)(v69 + 56) + 32 * v101, (uint64_t)&v195);
      *(void *)&v194 = v108;
      *((void *)&v194 + 1) = v107;
      v191 = v194;
      v192 = v195;
      v193 = v196;
      *(void *)&v190[0] = v108;
      *((void *)&v190[0] + 1) = v107;
      swift_bridgeObjectRetain();
      swift_dynamicCast();
      outlined init with take of Any(&v192, v185);
      v186 = *(_OWORD *)v182;
      v187 = v183;
      v188 = v184;
      outlined init with take of Any(v185, v189);
      *(_OWORD *)v182 = v186;
      v183 = v187;
      v184 = v188;
      outlined init with take of Any(v189, v190);
      outlined init with take of Any(v190, &v186);
      Class v21 = (unint64_t)v182;
      v109 = AnyHashable._rawHashValue(seed:)(*(void *)(v20 + 40));
      v110 = -1LL << *(_BYTE *)(v20 + 32);
      v111 = v109 & ~v110;
      v112 = v111 >> 6;
      if (((-1LL << v111) & ~*(void *)(v96 + 8 * (v111 >> 6))) != 0)
      {
        v98 = __clz(__rbit64((-1LL << v111) & ~*(void *)(v96 + 8 * (v111 >> 6)))) | v111 & 0x7FFFFFFFFFFFFFC0LL;
        goto LABEL_96;
      }

      uint64_t v113 = 0;
      v114 = (unint64_t)(63 - v110) >> 6;
      do
      {
        if (++v112 == v114 && (v113 & 1) != 0)
        {
          __break(1u);
          goto LABEL_153;
        }

        v115 = v112 == v114;
        if (v112 == v114) {
          v112 = 0LL;
        }
        v113 |= v115;
        v116 = *(void *)(v96 + 8 * v112);
      }

      while (v116 == -1);
      v98 = __clz(__rbit64(~v116)) + (v112 << 6);
LABEL_96:
      *(void *)(v96 + ((v98 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v98;
      Class v99 = *(void *)(v20 + 48) + 40 * v98;
      *(_OWORD *)Class v99 = *(_OWORD *)v182;
      *(_OWORD *)(v99 + 16) = v183;
      *(void *)(v99 + 32) = v184;
      outlined init with take of Any(&v186, (_OWORD *)(*(void *)(v20 + 56) + 32 * v98));
      ++*(void *)(v20 + 16);
    }

    int64_t v102 = v97 + 1;
    if (__OFADD__(v97, 1LL)) {
      goto LABEL_200;
    }
    if (v102 < v180)
    {
      v103 = *(void *)(v177 + 8 * v102);
      v104 = v97 + 1;
      if (!v103)
      {
        v104 = v97 + 2;
        if (v97 + 2 >= v180) {
          goto LABEL_124;
        }
        v103 = *(void *)(v177 + 8 * v104);
        if (!v103)
        {
          v104 = v97 + 3;
          if (v97 + 3 >= v180) {
            goto LABEL_124;
          }
          v103 = *(void *)(v177 + 8 * v104);
          if (!v103)
          {
            v104 = v97 + 4;
            if (v97 + 4 >= v180) {
              goto LABEL_124;
            }
            v103 = *(void *)(v177 + 8 * v104);
            if (!v103)
            {
              v105 = v97 + 5;
              if (v97 + 5 >= v180) {
                goto LABEL_124;
              }
              v103 = *(void *)(v177 + 8 * v105);
              if (!v103)
              {
                while (1)
                {
                  v104 = v105 + 1;
                  if (__OFADD__(v105, 1LL)) {
                    break;
                  }
                  if (v104 >= v180) {
                    goto LABEL_124;
                  }
                  v103 = *(void *)(v177 + 8 * v104);
                  ++v105;
                  if (v103) {
                    goto LABEL_114;
                  }
                }

        v92 = (unint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  *(void *)(v92 + 16) + 1LL,  1,  (void *)v92);
        v50[2] = v92;
        goto LABEL_53;
      }

      int64_t v90 = (uint64_t *)((v89 & 0x3FFFFFFFFFFFFFFFLL) + 32);
LABEL_50:
      v120 = *v90;
      swift_retain();
      v130 = v120 + 1;
      if (!__OFADD__(v120, 1LL)) {
        goto LABEL_51;
      }
      __break(1u);
LABEL_65:
      v165 = xmmword_18372EE30;
LABEL_66:
      __swift_project_boxed_opaque_existential_1(v166, (uint64_t)v167);
      if ((dispatch thunk of UnkeyedDecodingContainer.isAtEnd.getter() & 1) != 0)
      {
LABEL_69:
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v166);
        swift_release();
        int v20 = (char *)v165;
        v50[20] = v71;
        swift_retain();
        swift_release();
        v108 = v50[2];
        if (!*(void *)(v108 + 16)) {
          goto LABEL_98;
        }
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          goto LABEL_99;
        }
        v132 = *(void *)(v108 + 16);
        if (!v132) {
          goto LABEL_100;
        }
        goto LABEL_72;
      }

      while (1)
      {
        id v106 = v167;
        v108 = v168;
        __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v166, (uint64_t)v167);
        v131 = dispatch thunk of UnkeyedDecodingContainer.decode(_:)();
        if (v65) {
          break;
        }
        LOBYTE(v163) = v131;
        Data._Representation.append(contentsOf:)();
        __swift_project_boxed_opaque_existential_1(v166, (uint64_t)v167);
        if ((dispatch thunk of UnkeyedDecodingContainer.isAtEnd.getter() & 1) != 0) {
          goto LABEL_69;
        }
      }

    __break(1u);
LABEL_88:
    __break(1u);
    return;
  }

  outlined destroy of Any?((uint64_t)&v100);
LABEL_88:
  objc_super v3 = *(void *)(v99 + 16);
  type metadata accessor for NSURLResourceKey(0LL);
  lazy protocol witness table accessor for type NSURLResourceKey and conformance NSURLResourceKey();
  swift_bridgeObjectRetain();
  int64_t v78 = 0LL;
  *(void *)&int64_t v102 = Set.init(minimumCapacity:)();
  unint64_t v79 = 1LL << *(_BYTE *)(v99 + 32);
  unint64_t v80 = -1LL;
  if (v79 < 64) {
    unint64_t v80 = ~(-1LL << v79);
  }
  uint64_t v81 = v99 + 64;
  uint64_t v82 = v80 & *(void *)(v99 + 64);
  int64_t v83 = (unint64_t)(v79 + 63) >> 6;
  while (2)
  {
    if (v82)
    {
      v84 = __clz(__rbit64(v82));
      v82 &= v82 - 1;
      CFIndex v85 = v84 | (v78 << 6);
LABEL_92:
      objc_super v3 = (uint64_t)&v102;
      specialized Set._Variant.insert(_:)(&v100, *(id *)(*(void *)(v99 + 48) + 8 * v85));

      continue;
    }

    break;
  }

  if (__OFADD__(v78++, 1LL))
  {
    __break(1u);
    goto LABEL_124;
  }

  if (v78 < v83)
  {
    int v87 = *(void *)(v81 + 8 * v78);
    if (!v87)
    {
      char v88 = v78 + 1;
      if (v78 + 1 >= v83) {
        goto LABEL_115;
      }
      int v87 = *(void *)(v81 + 8 * v88);
      if (!v87)
      {
        char v88 = v78 + 2;
        if (v78 + 2 >= v83) {
          goto LABEL_115;
        }
        int v87 = *(void *)(v81 + 8 * v88);
        if (!v87)
        {
          char v88 = v78 + 3;
          if (v78 + 3 >= v83) {
            goto LABEL_115;
          }
          int v87 = *(void *)(v81 + 8 * v88);
          if (!v87)
          {
            char v88 = v78 + 4;
            if (v78 + 4 >= v83) {
              goto LABEL_115;
            }
            int v87 = *(void *)(v81 + 8 * v88);
            if (!v87)
            {
              char v88 = v78 + 5;
              if (v78 + 5 >= v83) {
                goto LABEL_115;
              }
              int v87 = *(void *)(v81 + 8 * v88);
              if (!v87)
              {
                char v88 = v78 + 6;
                if (v78 + 6 >= v83) {
                  goto LABEL_115;
                }
                int v87 = *(void *)(v81 + 8 * v88);
                if (!v87)
                {
                  while (1)
                  {
                    int64_t v78 = v88 + 1;
                    if (__OFADD__(v88, 1LL)) {
                      goto LABEL_126;
                    }
                    if (v78 >= v83) {
                      goto LABEL_115;
                    }
                    int v87 = *(void *)(v81 + 8 * v78);
                    ++v88;
                    if (v87) {
                      goto LABEL_110;
                    }
                  }
                }
              }
            }
          }
        }
      }

      int64_t v78 = v88;
    }

      outlined destroy of Any?((uint64_t)v162, &demangling cache variable for type metadata for (Hashable & Sendable)?);
      outlined destroy of Any?((uint64_t)v163, &demangling cache variable for type metadata for (Hashable & Sendable)?);
      outlined destroy of AttributedString._AttributeValue((uint64_t)v164);
      outlined destroy of AttributedString._AttributeValue((uint64_t)v166);
      outlined destroy of Any?( (uint64_t)&v167,  &demangling cache variable for type metadata for AttributedString._AttributeValue?);
      outlined destroy of Any?( (uint64_t)&v172,  &demangling cache variable for type metadata for AttributedString._AttributeValue?);
      uint64_t result = (unint64_t *)outlined destroy of Any?( (uint64_t)&v177,  &demangling cache variable for type metadata for AttributedString._AttributeValue?);
      if ((v81 & 1) == 0) {
        goto LABEL_119;
      }
LABEL_88:
      v80 += 2;
      ++v79;
      unint64_t v74 = v152;
      if (v82 == v59)
      {
        outlined release of [String : AttributedString._AttributeValue]((uint64_t)&v183);
        swift_bridgeObjectRelease();
        uint64_t result = (unint64_t *)swift_bridgeObjectRelease();
        size_t v14 = v142;
        CFIndex v51 = v143;
        unint64_t v47 = *(uint64_t **)(v142 + 64);
        uint64_t v52 = *(void *)(v142 + 88);
        v141 = v131;
        *(void *)&v167 = v143;
        unint64_t v32 = v138;
        *((void *)&v167 + 1) = v138;
        unint64_t v33 = (uint64_t)v130;
        *(void *)&v168 = v130;
        id v27 = __OFADD__(v139++, 1LL);
        if (!v27) {
          goto LABEL_56;
        }
        __break(1u);
LABEL_117:
        outlined destroy of AttributedString._AttributeValue((uint64_t)v166);
LABEL_118:
        outlined destroy of Any?( (uint64_t)&v167,  (uint64_t *)&demangling cache variable for type metadata for (AttributedString._AttributeValue?, AttributedString._AttributeValue?));
        outlined destroy of Any?((uint64_t)&v172, v47);
        outlined destroy of Any?((uint64_t)&v177, v47);
LABEL_119:
        outlined release of [String : AttributedString._AttributeValue]((uint64_t)&v183);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t result = (unint64_t *)swift_bridgeObjectRelease();
        size_t v14 = v142;
        unint64_t v32 = v132;
        goto LABEL_120;
      }
    }
  }

  swift_bridgeObjectRelease();
  uint64_t result = (unint64_t *)swift_bridgeObjectRelease();
LABEL_120:
  int64_t v101 = v123;
  if (v137 != *(void *)(v14 + 88)) {
    goto LABEL_154;
  }
  if (v140)
  {
    int64_t v102 = *(void *)(v140 + 24 * ((v32 >> ((4 * *(_BYTE *)(v140 + 18) + 8) & 0x3C)) & 0xF) + 24);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }

  else
  {
    v103 = *(void *)(v14 + 64);
    swift_unknownObjectRetain();
    int64_t v102 = specialized Rope._Node.subscript.getter(v32, v103);
    swift_unknownObjectRelease();
  }

  swift_bridgeObjectRelease();
  uint64_t result = (unint64_t *)swift_bridgeObjectRelease();
  v104 = &v141[v102];
  if (__OFADD__(v141, v102)) {
    goto LABEL_155;
  }
  v105 = v120[1];
  v167 = *v120;
  v168 = v105;
  v169 = v120[2];
  uint64_t result = (unint64_t *)BigString.utf8.getter();
  if (__OFSUB__(v104, v101 >> 11))
  {
LABEL_156:
    __break(1u);
    goto LABEL_157;
  }

  id v106 = BigString.UTF8View.index(_:offsetBy:)();
  v108 = v107;
  v110 = v109;
  v112 = v111;
  outlined release of Locale((uint64_t)&v158);
  uint64_t result = (unint64_t *)outlined release of AttributedString.Runs((uint64_t)v184);
  uint64_t v113 = v127;
  if (v128 >= v106 >> 10) {
    uint64_t v113 = v106;
  }
  if (v129 > v113 >> 10)
  {
LABEL_157:
    __break(1u);
LABEL_158:
    __break(1u);
LABEL_159:
    __break(1u);
    goto LABEL_160;
  }

  v114 = v128 >= v106 >> 10;
  v115 = v124;
  v116 = v125;
  if (v128 >= v106 >> 10)
  {
    v115 = v112;
    v116 = v108;
  }

  v117 = v126;
  *v126 = v113;
  v117[1] = v116;
  v118 = *((void *)&v125 + 1);
  if (v114) {
    v118 = v110;
  }
  v117[2] = v118;
  v117[3] = v115;
  return result;
}

LABEL_102:
    uint64_t v13 = 0LL;
    goto LABEL_89;
  }

    Hasher._combine(_:)(0);
    if (v76)
    {
LABEL_98:
      Hasher._combine(_:)(1u);
      type metadata accessor for CFDictionaryRef(0LL);
      lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( (unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef,  (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef,  (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
      CFIndex v85 = v76;
      _CFObject.hash(into:)();

      goto LABEL_104;
    }

          int64_t v66 = (v73 - 1) & v73;
          Class v72 = __clz(__rbit64(v73)) + (v65 << 6);
        }

        uint64_t v75 = (uint64_t *)(*(void *)(v124 + 48) + 16 * v72);
        Class v77 = *v75;
        uint64_t v76 = v75[1];
        outlined init with copy of AttributedString._AttributeValue(*(void *)(v124 + 56) + 72 * v72, (uint64_t)&v148);
        v140 = v150;
        v141 = v151;
        v142 = v152;
        v138 = v148;
        v139 = v149;
        Hasher.init(_seed:)();
        swift_bridgeObjectRetain();
        String.hash(into:)();
        int64_t v78 = Hasher._finalize()();
        unint64_t v79 = -1LL << *(_BYTE *)(v64 + 32);
        unint64_t v80 = v78 & ~v79;
        uint64_t v81 = v80 >> 6;
        if (((-1LL << v80) & ~*(void *)(v67 + 8 * (v80 >> 6))) != 0)
        {
          unint64_t v68 = __clz(__rbit64((-1LL << v80) & ~*(void *)(v67 + 8 * (v80 >> 6)))) | v80 & 0x7FFFFFFFFFFFFFC0LL;
          goto LABEL_87;
        }

        uint64_t v82 = 0;
        int64_t v83 = (unint64_t)(63 - v79) >> 6;
        do
        {
          if (++v81 == v83 && (v82 & 1) != 0)
          {
            __break(1u);
LABEL_152:
            __break(1u);
LABEL_153:
            __break(1u);
LABEL_154:
            __break(1u);
LABEL_155:
            __break(1u);
LABEL_156:
            __break(1u);
LABEL_157:
            __break(1u);
LABEL_158:
            __break(1u);
            goto LABEL_159;
          }

          v84 = v81 == v83;
          if (v81 == v83) {
            uint64_t v81 = 0LL;
          }
          v82 |= v84;
          CFIndex v85 = *(void *)(v67 + 8 * v81);
        }

        while (v85 == -1);
        unint64_t v68 = __clz(__rbit64(~v85)) + (v81 << 6);
LABEL_87:
        *(void *)(v67 + ((v68 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v68;
        uint64_t v69 = (void *)(*(void *)(v64 + 48) + 16 * v68);
        *uint64_t v69 = v77;
        v69[1] = v76;
        uint64_t v70 = *(void *)(v64 + 56) + 72 * v68;
        *(_OWORD *)(v70 + 16) = v139;
        *(_OWORD *)(v70 + 32) = v140;
        *(_OWORD *)(v70 + 4_Block_object_dispose(va, 8) = v141;
        *(void *)(v70 + 64) = v142;
        *(_OWORD *)uint64_t v70 = v138;
        ++*(void *)(v64 + 16);
        if (!--v120) {
          goto LABEL_116;
        }
      }
    }

    swift_retain();
  }

  else
  {
    uint64_t v4 = MEMORY[0x18961AFF0];
  }

        __break(1u);
        return result;
      }

    unint64_t v5 = (v72 - 1) & v72;
    uint64_t v70 = __clz(__rbit64(v72)) + (v44 << 6);
LABEL_83:
    v71 = (uint64_t *)(*(void *)(v11 + 48) + 16 * v70);
    unint64_t v43 = *v71;
    objc_super v3 = v71[1];
    swift_bridgeObjectRetain();
    int v16 = (uint64_t)&v369;
    specialized Set._Variant.insert(_:)((unint64_t *)&v437, v43, v3);
    uint64_t result = swift_bridgeObjectRelease();
  }

  unint64_t v73 = v46 + 5;
  if (v73 < v68)
  {
    Class v72 = *(void *)(v42 + 8 * v73);
    if (!v72)
    {
      while (1)
      {
        uint64_t v44 = v73 + 1;
        if (__OFADD__(v73, 1LL)) {
          break;
        }
        if (v44 >= v68) {
          goto LABEL_103;
        }
        Class v72 = *(void *)(v42 + 8 * v44);
        ++v73;
        if (v72) {
          goto LABEL_102;
        }
      }

  __break(1u);
LABEL_103:
  __break(1u);
LABEL_104:
  __break(1u);
  return result;
}

  if (!v54) {
    goto LABEL_103;
  }
LABEL_237:
  __break(1u);
}

            v112 = v114;
            goto LABEL_103;
          }
        }
      }

    int64_t v78 = (v88 - 1) & v88;
    v117 = v89;
    unint64_t v80 = __clz(__rbit64(v88)) + (v89 << 6);
LABEL_79:
    uint64_t v81 = 16 * v80;
    uint64_t v82 = (void *)(*(void *)(v21 + 48) + 16 * v80);
    int64_t v83 = v82[1];
    v84 = 8 * v80;
    CFIndex v85 = *(void **)(*(void *)(v21 + 56) + v84);
    v86 = (void *)(*(void *)(v70 + 48) + v81);
    *v86 = *v82;
    v86[1] = v83;
    *(void *)(*(void *)(v70 + 56) + v84) = v85;
    swift_bridgeObjectRetain();
    uint64_t result = v85;
  }

  int64_t v90 = v117 + 8;
  if (v117 + 8 >= v111) {
    goto LABEL_103;
  }
  char v88 = *(void *)&__srca[8 * v90];
  if (v88)
  {
    int64_t v89 = v117 + 8;
    goto LABEL_102;
  }

  while (1)
  {
    int64_t v89 = v90 + 1;
    if (__OFADD__(v90, 1LL)) {
      break;
    }
    if (v89 >= v111) {
      goto LABEL_103;
    }
    char v88 = *(void *)&__srca[8 * v89];
    ++v90;
    if (v88) {
      goto LABEL_102;
    }
  }

    a3 = (v77 - 1) & v77;
    unint64_t v74 = __clz(__rbit64(v77)) + (v70 << 6);
LABEL_83:
    uint64_t v75 = (uint64_t *)(*(void *)(v69 + 48) + 16 * v74);
    CFArrayRef v11 = *v75;
    uint64_t v76 = v75[1];
    swift_bridgeObjectRetain();
    int v16 = (uint64_t)&v375;
    specialized Set._Variant.insert(_:)((unint64_t *)&v432, v11, v76);
    uint64_t result = swift_bridgeObjectRelease();
  }

  __break(1u);
LABEL_103:
  __break(1u);
LABEL_104:
  __break(1u);
LABEL_105:
  __break(1u);
LABEL_106:
  __break(1u);
LABEL_107:
  __break(1u);
LABEL_108:
  __break(1u);
LABEL_109:
  __break(1u);
LABEL_110:
  __break(1u);
LABEL_111:
  __break(1u);
LABEL_112:
  __break(1u);
LABEL_113:
  __break(1u);
LABEL_114:
  __break(1u);
LABEL_115:
  __break(1u);
LABEL_116:
  __break(1u);
LABEL_117:
  __break(1u);
LABEL_118:
  __break(1u);
LABEL_119:
  __break(1u);
  return result;
}

  __break(1u);
LABEL_103:
  __break(1u);
  return result;
}

      CFArrayRef v11 = 0LL;
      if (v7) {
        goto LABEL_5;
      }
      if (v10) {
        goto LABEL_5;
      }
      if (!v15) {
        goto LABEL_5;
      }
      CFArrayRef v11 = 0LL;
      if (v8 || !v6 || !v14) {
        goto LABEL_5;
      }
LABEL_43:
      if (v11 >= a2) {
        Class v21 = a2;
      }
      else {
        Class v21 = v11;
      }
      BOOL v22 = specialized String.init<A>(bytes:encoding:)((char *)&a1[v21], a2 - v21, v16);
      if (v23)
      {
        MEMORY[0x1895F8858](v22);
        specialized String.withUTF8<A>(_:)((uint64_t (*)(void *, uint64_t))partial apply for closure #1 in closure #1 in static JSONDecoder.withUTF8Representation<A>(of:_:));
        return swift_bridgeObjectRelease();
      }

      else
      {
        lazy protocol witness table accessor for type JSONError and conformance JSONError();
        swift_allocError();
        *(_OWORD *)Class v24 = 0u;
        *(_OWORD *)(v24 + 16) = 0u;
        *(_OWORD *)(v24 + 32) = 0u;
        *(_BYTE *)(v24 + 4_Block_object_dispose(va, 8) = 12;
        return swift_willThrow();
      }
    }

    BOOL v6 = 0;
LABEL_92:
    LOBYTE(v7) = 0;
    goto LABEL_93;
  }

  if (a3 != 1 && !v10)
  {
    if (v9) {
      goto LABEL_70;
    }
    uint64_t v10 = 0;
    goto LABEL_92;
  }

      uint64_t v50 = v115;
      CFIndex v51 = v116;
LABEL_103:
      if (!HIWORD(v47))
      {
        unint64_t v7 = (unsigned __int16)a3 | (v47 << 16);
        goto LABEL_105;
      }

      goto LABEL_44;
    }

    if (__OFADD__(v31, 1LL)) {
      goto LABEL_174;
    }
  }

  __break(1u);
LABEL_174:
  __break(1u);
LABEL_175:
  __break(1u);
  do
  {
    LODWORD(v118[0]) = v15;
    WORD2(v118[0]) = a3;
    HIWORD(v118[0]) = a5;
    LOWORD(v118[1]) = (_WORD)v9;
    WORD1(v118[1]) = a4;
    WORD2(v118[1]) = v8;
    HIWORD(v118[1]) = v21;
    v119 = v116;
    v120 = (__int16)v20;
    v91 = _So9NSDecimala__exponent_getter((char *)v118);
    if (v91 > 0) {
      goto LABEL_267;
    }
    LOWORD(v9) = v117;
    if (!v91) {
      return v7;
    }
    v92 = -v91 & ~(-v91 >> 31);
    Class v93 = ~v91;
    while (v92 > v93)
    {
      v7 /= 0xAuLL;
      if (__CFADD__(v91++, 1)) {
        return v7;
      }
    }

                    uint64_t result = swift_release();
                    *uint64_t v4 = v10;
LABEL_112:
                    *(void *)(v10 + 8 * (a2 >> 6) + 56) |= 1LL << a2;
                    *(_BYTE *)(*(void *)(v10 + 48) + a2) = v6;
                    uint64_t v70 = *(void *)(v10 + 16);
                    v71 = __OFADD__(v70, 1LL);
                    Class v72 = v70 + 1;
                    if (!v71)
                    {
                      *(void *)(v10 + 16) = v72;
                      return result;
                    }

                    uint64_t result = swift_release();
                    *uint64_t v4 = v10;
LABEL_111:
                    *(void *)(v10 + 8 * (a2 >> 6) + 56) |= 1LL << a2;
                    *(_BYTE *)(*(void *)(v10 + 48) + a2) = v6;
                    uint64_t v70 = *(void *)(v10 + 16);
                    v71 = __OFADD__(v70, 1LL);
                    Class v72 = v70 + 1;
                    if (!v71)
                    {
                      *(void *)(v10 + 16) = v72;
                      return result;
                    }

                    uint64_t result = swift_release();
                    *uint64_t v4 = v10;
LABEL_111:
                    *(void *)(v10 + 8 * (a2 >> 6) + 56) |= 1LL << a2;
                    *(void *)(*(void *)(v10 + 48) + 8 * a2) = v6;
                    uint64_t v69 = *(void *)(v10 + 16);
                    uint64_t v70 = __OFADD__(v69, 1LL);
                    v71 = v69 + 1;
                    if (!v70)
                    {
                      *(void *)(v10 + 16) = v71;
                      return result;
                    }

                    uint64_t result = swift_release();
                    *uint64_t v4 = v10;
LABEL_112:
                    *(void *)(v10 + 8 * (a2 >> 6) + 56) |= 1LL << a2;
                    *(void *)(*(void *)(v10 + 48) + 8 * a2) = v6;
                    uint64_t v75 = *(void *)(v10 + 16);
                    uint64_t v76 = __OFADD__(v75, 1LL);
                    Class v77 = v75 + 1;
                    if (!v76)
                    {
                      *(void *)(v10 + 16) = v77;
                      return result;
                    }

                    uint64_t result = swift_release();
                    *uint64_t v4 = v10;
LABEL_112:
                    *(void *)(v10 + 8 * (a2 >> 6) + 56) |= 1LL << a2;
                    *(_DWORD *)(*(void *)(v10 + 48) + 4 * a2) = v6;
                    uint64_t v70 = *(void *)(v10 + 16);
                    v71 = __OFADD__(v70, 1LL);
                    Class v72 = v70 + 1;
                    if (!v71)
                    {
                      *(void *)(v10 + 16) = v72;
                      return result;
                    }

                    uint64_t result = swift_release();
                    *uint64_t v4 = v10;
LABEL_111:
                    *(void *)(v10 + 8 * (a2 >> 6) + 56) |= 1LL << a2;
                    *(void *)(*(void *)(v10 + 48) + 8 * a2) = v6;
                    uint64_t v69 = *(void *)(v10 + 16);
                    uint64_t v70 = __OFADD__(v69, 1LL);
                    v71 = v69 + 1;
                    if (!v70)
                    {
                      *(void *)(v10 + 16) = v71;
                      return result;
                    }

                    uint64_t result = swift_release();
                    *uint64_t v4 = v10;
LABEL_112:
                    *(void *)(v10 + 8 * (a2 >> 6) + 56) |= 1LL << a2;
                    *(_BYTE *)(*(void *)(v10 + 48) + a2) = v6;
                    uint64_t v70 = *(void *)(v10 + 16);
                    v71 = __OFADD__(v70, 1LL);
                    Class v72 = v70 + 1;
                    if (!v71)
                    {
                      *(void *)(v10 + 16) = v72;
                      return result;
                    }

                  uint64_t result = swift_release();
                  *unint64_t v32 = v10;
LABEL_120:
                  *(void *)(v10 + 8 * (a2 >> 6) + 56) |= 1LL << a2;
                  *(void *)(*(void *)(v10 + 48) + 8 * a2) = v6;
                  char v88 = *(void *)(v10 + 16);
                  int64_t v89 = __OFADD__(v88, 1LL);
                  int64_t v90 = v88 + 1;
                  if (!v89)
                  {
                    *(void *)(v10 + 16) = v90;
                    return result;
                  }

                    swift_release();
                    NSNumber *v98 = v13;
LABEL_120:
                    uint64_t result = v99;
                    a2 = v100;
LABEL_121:
                    *(void *)(v13 + 8 * (a5 >> 6) + 56) |= 1LL << a5;
                    Class v93 = (unint64_t *)(*(void *)(v13 + 48) + 32 * a5);
                    *Class v93 = result;
                    v93[1] = a2;
                    v93[2] = v9;
                    v93[3] = a4;
                    Class v94 = *(void *)(v13 + 16);
                    uint64_t v95 = __OFADD__(v94, 1LL);
                    int64_t v96 = v94 + 1;
                    if (!v95)
                    {
                      *(void *)(v13 + 16) = v96;
                      return result;
                    }

    if (v35 < v34) {
      goto LABEL_119;
    }
    uint64_t v52 = *(void *)(v11 + 32);
    if (v52 < v34)
    {
LABEL_120:
      __break(1u);
    }

    else
    {
      char v53 = *(void *)(v11 + 72);
      if (v35 >= v53)
      {
        *(void *)(a5 + 8_Block_object_dispose(va, 8) = v8;
        *(void *)(a5 + 96) = v9;
        CFArrayRef v54 = *(_OWORD *)(v11 + 16);
        *(_OWORD *)a5 = *(_OWORD *)v11;
        *(_OWORD *)(a5 + 16) = v54;
        *(void *)(a5 + 32) = v52;
        *(_OWORD *)(a5 + 40) = *(_OWORD *)(v11 + 40);
        *(_OWORD *)(a5 + 56) = *(_OWORD *)(v11 + 56);
        *(void *)(a5 + 72) = v53;
        *(void *)(a5 + 80) = a2;
        return swift_retain();
      }
    }

    __break(1u);
LABEL_122:
    __break(1u);
LABEL_123:
    __break(1u);
    goto LABEL_124;
  }

  if ((_DWORD)v45 != 1)
  {
    unint64_t v49 = (uint64_t *)(v34 + 48);
    uint64_t v50 = 1LL;
    while (1)
    {
      CFIndex v51 = *v49;
      v49 += 3;
      CFIndex v15 = v48 - v51;
      if (__OFSUB__(v48, v51)) {
        goto LABEL_125;
      }
      if (__OFADD__(v15, 1LL)) {
        goto LABEL_126;
      }
      if ((uint64_t)(v15 + 1) < 1)
      {
        uint64_t v45 = v50;
        CFIndex v15 = v48;
        goto LABEL_97;
      }

      ++v50;
      CFDictionaryRef v48 = v15;
      if (v45 == v50) {
        goto LABEL_96;
      }
    }
  }

  CFIndex v15 = v48;
LABEL_96:
  if (!v15) {
    goto LABEL_97;
  }
LABEL_134:
  __break(1u);
  return result;
}

                v71 = v53;
LABEL_103:
                if (v44 > v50) {
                  -[CFStringRef _analyzeTokensInInterwordRange:paragraphRange:]( v119,  "_analyzeTokensInInterwordRange:paragraphRange:",  v50,  v44 - v50,  v117,  v118);
                }
                if (v44 < v71)
                {
                  v111 = v44;
                  Class v72 = v44;
                  while (1)
                  {
                    if (v71 - v72 >= 0x40) {
                      unint64_t v73 = 64LL;
                    }
                    else {
                      unint64_t v73 = v71 - v72;
                    }
                    unint64_t v74 = NSOrthographyScriptIndexForCharacters((uint64_t)&v43[v72], v73, (uint64_t)v122);
                    ++*((void *)v121 + v74);
                    if (!qword_18C496FC8) {
                      qword_18C496FC8 =  +[NSCharacterSet characterSetWithCharactersInString:]( &OBJC_CLASS___NSCharacterSet,  "characterSetWithCharactersInString:",  @"~#@$%^\\|<.");
                    }
                    if (qword_18C496FD0)
                    {
                      if (!v72) {
                        goto LABEL_121;
                      }
                    }

                    else
                    {
                      qword_18C496FD0 =  +[NSCharacterSet characterSetWithCharactersInString:]( &OBJC_CLASS___NSCharacterSet,  "characterSetWithCharactersInString:",  @"~#@$%^\\|>:");
                      if (!v72) {
                        goto LABEL_121;
                      }
                    }

                    -[__CFString rangeOfCharacterFromSet:options:range:]( (id)v119[3],  "rangeOfCharacterFromSet:options:range:",  qword_18C496FC8,  12LL,  0LL,  v72,  v104);
                    if (v75) {
                      goto LABEL_117;
                    }
LABEL_121:
                    Class v77 = v73 + v72;
                    if (v115 <= v73 + v72)
                    {
                      if (v73) {
                        goto LABEL_127;
                      }
                    }

                    else
                    {
                      -[__CFString rangeOfCharacterFromSet:options:range:]( (id)v119[3],  "rangeOfCharacterFromSet:options:range:",  qword_18C496FD0,  8LL,  v73 + v72,  v115 - (v73 + v72));
                      if (v73 && !v78)
                      {
LABEL_127:
                        unint64_t v79 = &v43[v72];
                        unint64_t v80 = v73;
                        while (1)
                        {
                          uint64_t v82 = *v79++;
                          uint64_t v81 = v82;
                          if (v82 == 46 || v81 == 95) {
                            break;
                          }
                          if (!--v80) {
                            goto LABEL_131;
                          }
                        }

            CFRelease(v20);
            if (v78 || (v71[3] = v24, v65 <= v24))
            {
              unint64_t v18 = 0;
LABEL_113:
              LOBYTE(v9) = v60;
              goto LABEL_117;
            }

            unint64_t v18 = 0;
            LOBYTE(v9) = v60;
            if (v78) {
              goto LABEL_117;
            }
          }

          id v31 = (void *)off_18C4970D8(ValueAtIndex);
          if ((v63 & 0x20) != 0
            && (!*(&xmmword_18C4970F8 + 1)
              ? (CFTypeRef cf = (void *)xmmword_18C4970F8(ValueAtIndex))
              : (CFTypeRef cf = (void *)((uint64_t (*)(const void *, void))*(&xmmword_18C4970F8 + 1))( ValueAtIndex,  0LL)),  cf))
          {
            if (([@"PhoneNumber" isEqualToString:v31] & 1) == 0
              && ([@"QuotedShortPhoneNumber" isEqualToString:v31] & 1) == 0
              && ([@"UnquotedShortPhoneNumber" isEqualToString:v31] & 1) == 0)
            {
              char v46 = [MEMORY[0x189604030] URLWithString:cf];
              if (v46
                || (char v46 = objc_msgSend( MEMORY[0x189604030],  "URLWithString:",  (id)CFURLCreateStringByAddingPercentEscapes( 0,  (CFStringRef)objc_msgSend( cf,  "stringByReplacingPercentEscapesUsingEncoding:",  4),  @"#",  0,  0x8000100u))) != 0)
              {
                unint64_t v34 = -[NSLinkCheckingResult initWithRange:URL:]( objc_alloc(&OBJC_CLASS___NSLinkCheckingResult),  "initWithRange:URL:",  v26,  v28,  v46);
              }

              else
              {
                unint64_t v34 = 0LL;
              }

LABEL_67:
  if ((*(_BYTE *)(a1 + 8) & 1) != 0)
  {
    uint64_t v13 = [objc_alloc(MEMORY[0x189603FC8]) initWithObjects:v24 forKeys:v17 count:v15];
    goto LABEL_88;
  }

  char v37 = v88;
  if (dyld_program_sdk_at_least()) {
    CFDictionaryRef v48 = (CFDictionaryRef)[objc_alloc(MEMORY[0x189603F68]) initWithObjects:v24 forKeys:v17 count:v15];
  }
  else {
    CFDictionaryRef v48 = CFDictionaryCreate( (CFAllocatorRef)*MEMORY[0x189604DB0],  (const void **)v17,  (const void **)v24,  v15,  MEMORY[0x189605240],  MEMORY[0x189605250]);
  }
  uint64_t v13 = (uint64_t)v48;
LABEL_89:
  if (v15)
  {
    Class v64 = (void **)v16;
    int64_t v65 = (void **)v17;
    do
    {
      int64_t v66 = *v64++;

      Class v67 = *v65++;
      --v15;
    }

    while (v15);
  }

  if ((v37 & 1) == 0)
  {
    free(v16);
    free(v17);
  }

  ++*(void *)(a1 + 24);
  return (id)v13;
}

        swift_unknownObjectRetain();
        unint64_t v47 = specialized Rope._Node.distanceFromStart<A>(to:in:)(v44, v46, v9, v42, v43, v86);
        uint64_t result = swift_unknownObjectRelease_n();
LABEL_105:
        uint64_t v41 = v44;
        goto LABEL_106;
      }

      unint64_t v49 = *(unsigned __int8 *)(v42 + 18);
      if (*(_BYTE *)(v42 + 18))
      {
        swift_unknownObjectRetain_n();
        outlined retain of AttributedString.Runs((uint64_t)&v137);
        uint64_t result = swift_unknownObjectRetain();
        uint64_t v50 = v18;
        CFIndex v51 = v42;
        while (1)
        {
          char v53 = *(unsigned __int16 *)(v51 + 16);
          if (*(_WORD *)(v51 + 16))
          {
            CFArrayRef v54 = *(void *)(v51 + 32);
            unint64_t v55 = __OFSUB__(v50, v54);
            uint64_t v56 = v50 - v54;
            if (v55) {
              goto LABEL_118;
            }
            if (__OFADD__(v56, 1LL)) {
              goto LABEL_119;
            }
            if (v56 + 1 <= 0)
            {
              char v53 = 0LL;
              goto LABEL_39;
            }

            if ((_DWORD)v53 != 1)
            {
              uint64_t v57 = *(void *)(v51 + 56);
              uint64_t v50 = v56 - v57;
              if (__OFSUB__(v56, v57)) {
                goto LABEL_131;
              }
              if (__OFADD__(v50, 1LL)) {
                goto LABEL_132;
              }
              if (v50 + 1 < 1)
              {
                char v53 = 1LL;
                uint64_t v50 = v56;
                goto LABEL_39;
              }

              if ((_DWORD)v53 == 2) {
                goto LABEL_38;
              }
              int64_t v58 = *(void *)(v51 + 80);
              unint64_t v55 = __OFSUB__(v50, v58);
              uint64_t v56 = v50 - v58;
              if (v55) {
                goto LABEL_135;
              }
              if (__OFADD__(v56, 1LL)) {
                goto LABEL_136;
              }
              if (v56 + 1 < 1)
              {
                char v53 = 2LL;
                goto LABEL_39;
              }

              if ((_DWORD)v53 != 3)
              {
                unint64_t v59 = 3LL;
                if (v53 > 3) {
                  unint64_t v59 = *(unsigned __int16 *)(v51 + 16);
                }
                uint64_t v60 = (void *)(v51 + 104);
                uint64_t v61 = 3LL;
                while (v59 != v61)
                {
                  uint64_t v50 = v56 - *v60;
                  if (__OFSUB__(v56, *v60)) {
                    goto LABEL_129;
                  }
                  if (__OFADD__(v50, 1LL)) {
                    goto LABEL_130;
                  }
                  if (v50 + 1 < 1)
                  {
                    char v53 = v61;
                    uint64_t v50 = v56;
                    goto LABEL_39;
                  }

                  ++v61;
                  v60 += 3;
                  uint64_t v56 = v50;
                  if (v53 == v61) {
                    goto LABEL_38;
                  }
                }

                  __break(1u);
                }

                int64_t v65 = v59 + 7;
              }
            }
          }
        }
      }
    }

    if (v9 < v13) {
      goto LABEL_146;
    }
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      CFArrayRef v11 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  *((void *)v11 + 2) + 1LL,  1,  v11);
    }
    uint64_t v41 = *((void *)v11 + 2);
    CFIndex v40 = *((void *)v11 + 3);
    Class v12 = v41 + 1;
    if (v41 >= v40 >> 1) {
      CFArrayRef v11 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (char *)(v40 > 1),  v41 + 1,  1,  v11);
    }
    *((void *)v11 + 2) = v12;
    size_t v42 = v11 + 32;
    unint64_t v43 = &v11[16 * v41 + 32];
    *(void *)unint64_t v43 = v13;
    *((void *)v43 + 1) = v9;
    if (v41)
    {
      v107 = v9;
      while (1)
      {
        uint64_t v44 = v12 - 1;
        if (v12 >= 4)
        {
          unint64_t v49 = &v42[16 * v12];
          uint64_t v50 = *((void *)v49 - 8);
          CFIndex v51 = *((void *)v49 - 7);
          unint64_t v55 = __OFSUB__(v51, v50);
          uint64_t v52 = v51 - v50;
          if (v55) {
            goto LABEL_135;
          }
          CFArrayRef v54 = *((void *)v49 - 6);
          char v53 = *((void *)v49 - 5);
          unint64_t v55 = __OFSUB__(v53, v54);
          unint64_t v47 = v53 - v54;
          CFDictionaryRef v48 = v55;
          if (v55) {
            goto LABEL_136;
          }
          uint64_t v56 = v12 - 2;
          uint64_t v57 = &v42[16 * v12 - 32];
          unint64_t v59 = *(void *)v57;
          int64_t v58 = *((void *)v57 + 1);
          unint64_t v55 = __OFSUB__(v58, v59);
          uint64_t v60 = v58 - v59;
          if (v55) {
            goto LABEL_138;
          }
          unint64_t v55 = __OFADD__(v47, v60);
          uint64_t v61 = v47 + v60;
          if (v55) {
            goto LABEL_141;
          }
          if (v61 >= v52)
          {
            unint64_t v79 = &v42[16 * v44];
            uint64_t v81 = *(void *)v79;
            unint64_t v80 = *((void *)v79 + 1);
            unint64_t v55 = __OFSUB__(v80, v81);
            uint64_t v82 = v80 - v81;
            if (v55) {
              goto LABEL_145;
            }
            Class v72 = v47 < v82;
            goto LABEL_105;
          }
        }

        else
        {
          if (v12 != 3)
          {
            unint64_t v73 = *((void *)v11 + 4);
            unint64_t v74 = *((void *)v11 + 5);
            unint64_t v55 = __OFSUB__(v74, v73);
            int64_t v66 = v74 - v73;
            Class v67 = v55;
            goto LABEL_99;
          }

          char v46 = *((void *)v11 + 4);
          uint64_t v45 = *((void *)v11 + 5);
          unint64_t v55 = __OFSUB__(v45, v46);
          unint64_t v47 = v45 - v46;
          CFDictionaryRef v48 = v55;
        }

        if ((v48 & 1) != 0) {
          goto LABEL_137;
        }
        uint64_t v56 = v12 - 2;
        int64_t v62 = &v42[16 * v12 - 32];
        Class v64 = *(void *)v62;
        int64_t v63 = *((void *)v62 + 1);
        int64_t v65 = __OFSUB__(v63, v64);
        int64_t v66 = v63 - v64;
        Class v67 = v65;
        if (v65) {
          goto LABEL_140;
        }
        unint64_t v68 = &v42[16 * v44];
        uint64_t v70 = *(void *)v68;
        uint64_t v69 = *((void *)v68 + 1);
        unint64_t v55 = __OFSUB__(v69, v70);
        v71 = v69 - v70;
        if (v55) {
          goto LABEL_143;
        }
        if (__OFADD__(v66, v71)) {
          goto LABEL_144;
        }
        if (v66 + v71 >= v47)
        {
          Class v72 = v47 < v71;
LABEL_105:
          if (v72) {
            uint64_t v44 = v56;
          }
          goto LABEL_107;
        }

  v359 = v72;
  swift_release();
  uint64_t v81 = v390;
  *(void *)&v373 = v390;
  if (v337 > 0x7FF)
  {
    v86 = *(void *)(a1 + 64);
    int v87 = *(void *)(a1 + 72);
    char v88 = *(void *)(a1 + 80);
    int64_t v89 = *(void *)(a1 + 88);
    swift_unknownObjectRetain();
    swift_retain();
    AttributedString._InternalRuns.endIndex.getter(v86, v87, v88, v89, &v399);
    v366 = v399;
    v336 = v400;
    CFIndex v85 = v401;
    swift_unknownObjectRelease();
    v84 = v336;
    int64_t v83 = v366;
  }

  else
  {
    uint64_t v82 = (void *)swift_retain();
    AttributedString._InternalRunsSlice.startIndex.getter(v82, 0LL, (unint64_t *)&v399);
    int64_t v83 = v399;
    v84 = v400;
    CFIndex v85 = v401;
  }

  int64_t v90 = v371;
  v390 = v83;
  v391 = v84;
  *(void *)&v392 = v85;
  v91 = *(void *)(a1 + 64);
  v92 = *(void *)(a1 + 72);
  Class v93 = *(void *)(a1 + 80);
  Class v94 = *(void *)(a1 + 88);
  Enum = getEnumTag for _DarwinSearchPathsSequence.Iterator.State();
  swift_unknownObjectRetain();
  LODWORD(v366) = Enum;
  AttributedString._InternalRuns.index(atUTF8Offset:preferEnd:)(0LL, Enum & 1, v91, v92, v93, v94, (uint64_t *)&v448);
  int64_t v96 = v450;
  swift_unknownObjectRelease();
  if (v96 < v85 && *(void *)(v81 + 16))
  {
    while (1)
    {
      unint64_t v32 = *((void *)&v390 + 1);
      v97 = v390;
      v98 = v391;
      Class v99 = *(void *)(a1 + 64);
      Class v100 = *(void *)(a1 + 80);
      int64_t v101 = swift_unknownObjectRetain();
      uint64_t result = specialized Rope._endPath.getter(v101);
      if (v99)
      {
        uint64_t result = swift_unknownObjectRelease();
        if (v85 != v100) {
          goto LABEL_96;
        }
      }

      else if (v85)
      {
LABEL_96:
        v115 = *(void *)(a1 + 64);
        v114 = *(void *)(a1 + 72);
        v116 = *(void *)(a1 + 80);
        id v31 = *(void *)(a1 + 88);
        *(void *)&v448 = v97;
        *((void *)&v448 + 1) = v32;
        *(void *)&v449 = v98;
        v117 = *((void *)&v98 + 1) - 1LL;
        if (__OFSUB__(*((void *)&v98 + 1), 1LL)) {
          goto LABEL_365;
        }
        swift_unknownObjectRetain();
        specialized Rope.formIndex(before:)((uint64_t)&v448, v115, v114, v116, v31);
        v118 = *((void *)&v448 + 1);
        unint64_t v32 = v449;
        v104 = v448;
        v119 = specialized Rope.subscript.getter(v448, *((unint64_t *)&v448 + 1), v449, v115, v114, v116, v31);
        id v31 = v120;
        swift_unknownObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t result = swift_bridgeObjectRelease();
        v121 = v85 - v119;
        if (__OFSUB__(v85, v119)) {
          goto LABEL_366;
        }
        v105 = v364;
        char v37 = v359;
        goto LABEL_124;
      }

      int64_t v102 = *(void *)(a1 + 64);
      v103 = *(void *)(a1 + 72);
      id v31 = *(void *)(a1 + 80);
      v104 = *(void *)(a1 + 88);
      *(void *)&v336 = v31;
      if (v102)
      {
        v335 = *(void *)(a1 + 72);
        unint64_t v38 = *(void *)(a1 + 88);
        v105 = v364;
        char v37 = v359;
        if (v31 < v364) {
          goto LABEL_369;
        }
        if (*(_WORD *)(v102 + 16))
        {
          int v36 = *(unsigned __int8 *)(v102 + 18);
          if (*(_BYTE *)(v102 + 18))
          {
            uint64_t result = swift_unknownObjectRetain_n();
            id v31 = v364;
            uint64_t v29 = v102;
            while (1)
            {
              v108 = *(unsigned __int16 *)(v29 + 16);
              if (!*(_WORD *)(v29 + 16)) {
                goto LABEL_392;
              }
              v109 = *(void *)(v29 + 40);
              size_t v42 = __OFSUB__(v31, v109);
              v110 = v31 - v109;
              if (v42) {
                goto LABEL_345;
              }
              if (v110 <= 0)
              {
                id v106 = 0LL;
              }

              else
              {
                if ((_DWORD)v108 == 1) {
                  goto LABEL_394;
                }
                v111 = *(void *)(v29 + 64);
                id v31 = v110 - v111;
                if (__OFSUB__(v110, v111)) {
                  goto LABEL_349;
                }
                if (v31 >= 1)
                {
                  if ((_DWORD)v108 == 2) {
                    goto LABEL_394;
                  }
                  v112 = (void *)(v29 + 88);
                  id v106 = 2LL;
                  while (v108 != v106)
                  {
                    uint64_t v113 = v31 - *v112;
                    if (__OFSUB__(v31, *v112)) {
                      goto LABEL_321;
                    }
                    if (v113 < 1) {
                      goto LABEL_80;
                    }
                    ++v106;
                    v112 += 3;
                    id v31 = v113;
                    if (v108 == v106) {
                      goto LABEL_394;
                    }
                  }

                  __break(1u);
LABEL_321:
                  __break(1u);
LABEL_322:
                  v331 = *(void *)(v29 + 48);
                  size_t v42 = __OFSUB__(v106, v331);
                  CFIndex v40 = v106 - v331;
                  if (v42) {
                    goto LABEL_390;
                  }
                  if (__OFADD__(v40, 1LL)) {
                    goto LABEL_391;
                  }
                  if (v40 + 1 >= 1)
                  {
                    if ((_DWORD)v105 != 2)
                    {
                      v332 = (void *)(v29 + 72);
                      unint64_t v43 = 2LL;
                      while (v105 != v43)
                      {
                        v223 = v40 - *v332;
                        if (__OFSUB__(v40, *v332)) {
                          goto LABEL_384;
                        }
                        if (__OFADD__(v223, 1LL)) {
                          goto LABEL_385;
                        }
                        if (v223 + 1 < 1) {
                          goto LABEL_339;
                        }
                        ++v43;
                        v332 += 3;
                        CFIndex v40 = v223;
                        if (v105 == v43) {
                          goto LABEL_304;
                        }
                      }

                      goto LABEL_383;
                    }

                    v223 = v40;
                    goto LABEL_304;
                  }

                  v105 = 1LL;
                  v223 = v106;
LABEL_340:
                  swift_unknownObjectRelease();
                  swift_unknownObjectRelease();
                  v235 = v37 & 0xFFFFFFFFFFFFF0FFLL | (v105 << 8);
                  v222 = v366;
                  if (!v31)
                  {
LABEL_341:
                    uint64_t result = swift_release();
                    v236 = 0LL;
                    v237 = v38 - v223;
                    if (!__OFSUB__(v38, v223))
                    {
LABEL_209:
                      *(void *)&v385 = v32;
                      *((void *)&v385 + 1) = v38;
                      *(void *)&v386 = a1;
                      *((void *)&v386 + 1) = v36;
                      *(void *)&v387 = v235;
                      *((void *)&v387 + 1) = v29;
                      v388 = v236;
                      v389 = v237;
                      specialized IndexingIterator.next()();
                      if (v238)
                      {
                        v239 = v238;
                        v240 = v351;
                        while (1)
                        {
                          v242 = v240[1];
                          v429 = *v240;
                          v430 = v242;
                          v431 = v240[2];
                          BigString.utf8.getter();
                          v243 = v480;
                          v244 = BigString.UTF8View.index(_:offsetBy:)();
                          v246 = v245;
                          v248 = v247;
                          v250 = v249;
                          outlined release of Locale((uint64_t)v417);
                          swift_bridgeObjectRetain();
                          swift_bridgeObjectRetain();
                          v251 = specialized AttributedString._AttributeStorage.containsScalarConstraint.getter(v239);
                          swift_bridgeObjectRelease();
                          swift_bridgeObjectRelease();
                          v346 = v248;
                          v342 = v246;
                          v344 = v250;
                          v340 = v244;
                          if ((v251 & 1) != 0)
                          {
                            v353 = v244 >> 10;
                            if (v244 >> 10 > v243 >> 10) {
                              break;
                            }
                          }

        swift_unknownObjectRetain();
        CFIndex v51 = specialized Rope._Node.distanceFromStart<A>(to:in:)(v48, v50, v10, v46, v47, v92);
        uint64_t result = swift_unknownObjectRelease_n();
LABEL_105:
        uint64_t v45 = v48;
        goto LABEL_106;
      }

      char v53 = *(unsigned __int8 *)(v46 + 18);
      if (*(_BYTE *)(v46 + 18))
      {
        swift_unknownObjectRetain_n();
        outlined retain of AttributedString.Runs((uint64_t)&v137);
        uint64_t result = swift_unknownObjectRetain();
        CFArrayRef v54 = v22;
        unint64_t v55 = v46;
        while (1)
        {
          uint64_t v57 = *(unsigned __int16 *)(v55 + 16);
          if (*(_WORD *)(v55 + 16))
          {
            int64_t v58 = *(void *)(v55 + 32);
            unint64_t v59 = __OFSUB__(v54, v58);
            uint64_t v60 = v54 - v58;
            if (v59) {
              goto LABEL_118;
            }
            if (__OFADD__(v60, 1LL)) {
              goto LABEL_119;
            }
            if (v60 + 1 <= 0)
            {
              uint64_t v57 = 0LL;
              goto LABEL_39;
            }

            if ((_DWORD)v57 != 1)
            {
              uint64_t v61 = *(void *)(v55 + 56);
              CFArrayRef v54 = v60 - v61;
              if (__OFSUB__(v60, v61)) {
                goto LABEL_131;
              }
              if (__OFADD__(v54, 1LL)) {
                goto LABEL_132;
              }
              if (v54 + 1 < 1)
              {
                uint64_t v57 = 1LL;
                CFArrayRef v54 = v60;
                goto LABEL_39;
              }

              if ((_DWORD)v57 == 2) {
                goto LABEL_38;
              }
              int64_t v62 = *(void *)(v55 + 80);
              unint64_t v59 = __OFSUB__(v54, v62);
              uint64_t v60 = v54 - v62;
              if (v59) {
                goto LABEL_135;
              }
              if (__OFADD__(v60, 1LL)) {
                goto LABEL_136;
              }
              if (v60 + 1 < 1)
              {
                uint64_t v57 = 2LL;
                goto LABEL_39;
              }

              if ((_DWORD)v57 != 3)
              {
                int64_t v63 = 3LL;
                if (v57 > 3) {
                  int64_t v63 = *(unsigned __int16 *)(v55 + 16);
                }
                Class v64 = (void *)(v55 + 104);
                int64_t v65 = 3LL;
                while (v63 != v65)
                {
                  CFArrayRef v54 = v60 - *v64;
                  if (__OFSUB__(v60, *v64)) {
                    goto LABEL_129;
                  }
                  if (__OFADD__(v54, 1LL)) {
                    goto LABEL_130;
                  }
                  if (v54 + 1 < 1)
                  {
                    uint64_t v57 = v65;
                    CFArrayRef v54 = v60;
                    goto LABEL_39;
                  }

                  ++v65;
                  v64 += 3;
                  uint64_t v60 = v54;
                  if (v57 == v65) {
                    goto LABEL_38;
                  }
                }

      *(void *)&int64_t v66 = v10;
      *((void *)&v66 + 1) = v11;
      *(void *)&Class v67 = v5;
      BOOL v22 = __OFSUB__(v4, 1LL);
      char v37 = v4 - 1;
      if (!v22)
      {
        if (v10 == v9)
        {
          if (v7)
          {
            unint64_t v38 = *(unsigned __int8 *)(v7 + 18);
            swift_unknownObjectRetain();
            if (v38 < v11)
            {
LABEL_71:
              uint64_t v61 = v37;
              int64_t v62 = (uint64_t *)a2;
              if (v5)
              {
                uint64_t v39 = (4 * *(_BYTE *)(v5 + 18) + 8) & 0x3C;
                if (((v11 >> v39) & 0xF) != 0)
                {
                  a2 = v6;
                  CFIndex v40 = v63;
                  CFArrayRef v11 = ((((v11 >> v39) & 0xF) - 1) << v39) | ((-15LL << v39) - 1) & v11;
LABEL_78:
                  size_t v42 = *(void *)(v5 + 24 * ((v11 >> ((4 * *(_BYTE *)(v5 + 18) + 8) & 0x3C)) & 0xF) + 24);
                  swift_bridgeObjectRetain();
                  swift_bridgeObjectRetain();
                  swift_unknownObjectRelease();
                  goto LABEL_82;
                }
              }

              swift_unknownObjectRetain();
              uint64_t v41 = specialized Rope._Node.formPredecessor(of:)((uint64_t)&v66, v7);
              uint64_t result = (uint64_t *)swift_unknownObjectRelease();
              if ((v41 & 1) == 0)
              {
LABEL_100:
                __break(1u);
LABEL_101:
                __break(1u);
LABEL_102:
                __break(1u);
LABEL_103:
                __break(1u);
                goto LABEL_104;
              }

              if ((void)v66 == v9)
              {
                a2 = v6;
                CFArrayRef v11 = *((void *)&v66 + 1);
                unint64_t v5 = v67;
                if ((void)v67)
                {
                  CFIndex v40 = v63;
                  goto LABEL_78;
                }

            __break(1u);
            goto LABEL_68;
          }

        __break(1u);
        goto LABEL_68;
      }
    }

    unint64_t v17 = 0xE000000000000000LL;
    CFDictionaryRef v48 = 0LL;
    unint64_t v49 = 0xE000000000000000LL;
    CFIndex v40 = v6 & 0xFFFFFFFFFFFFLL;
    uint64_t v41 = HIBYTE(v5) & 0xF;
    if ((v5 & 0x2000000000000000LL) != 0) {
      unint64_t v18 = HIBYTE(v5) & 0xF;
    }
    else {
      unint64_t v18 = v6 & 0xFFFFFFFFFFFFLL;
    }
    if (!v18) {
      goto LABEL_64;
    }
    v38[1] = (v5 & 0xFFFFFFFFFFFFFFFLL) + 32;
    uint64_t v39 = v5 & 0xFFFFFFFFFFFFFFLL;
    swift_bridgeObjectRetain();
    unint64_t v19 = 0LL;
    uint64_t v44 = v6;
    while (1)
    {
      if ((v5 & 0x1000000000000000LL) != 0)
      {
        uint64_t v25 = _StringGuts.foreignErrorCorrectedScalar(startingAt:)();
      }

      else
      {
        if ((v5 & 0x2000000000000000LL) != 0)
        {
          char v46 = v6;
          unint64_t v47 = v39;
        }

        else if ((v6 & 0x1000000000000000LL) == 0)
        {
          _StringObject.sharedUTF8.getter();
        }

        uint64_t v25 = _decodeScalar(_:startingAt:)();
      }

      id v27 = v25;
      id v28 = v26;
      if (toHalfWidth)
      {
        if (v25 >> 8 < 0xFF || v25 > 0xFFEE)
        {
          uint64_t v29 = v25;
          if (!stripDiacritics) {
            goto LABEL_47;
          }
        }

        else
        {
          LODWORD(v46) = v25;
          uint64_t v25 = CFUniCharCompatibilityDecompose();
          uint64_t v29 = v46;
          unint64_t v17 = v46 >> 11;
          if ((_DWORD)v17 == 27) {
            goto LABEL_63;
          }
          unint64_t v17 = WORD1(v46);
          if (v17 > 0x10)
          {
            __break(1u);
LABEL_63:
            __break(1u);
LABEL_64:
            int v36 = 0LL;
LABEL_59:
            char v46 = v36;
            unint64_t v47 = v17;
            countAndFlagsBits = String.init<A>(_:)();
LABEL_60:
            BOOL v6 = countAndFlagsBits;
            unint64_t v5 = (unint64_t)object;
            goto LABEL_61;
          }

          if (!stripDiacritics) {
            goto LABEL_47;
          }
        }
      }

      else
      {
        uint64_t v29 = v25;
        if (!stripDiacritics) {
          goto LABEL_47;
        }
      }

      if (BYTE2(v27) <= 0xEu)
      {
        uint64_t v30 = (uint64_t)*(&__CFUniCharGraphemeExtendCharacterSetBitmap_1 + BYTE2(v27));
        if (v30)
        {
        }
      }

      if (BYTE2(v29) > 2u
        || (id v31 = (uint64_t)*(&__CFUniCharCanonicalDecomposableCharacterSetBitmap_1 + BYTE2(v29))) == 0
        || ((*(unsigned __int8 *)(v31 + ((unsigned __int16)v29 >> 3)) >> (v29 & 7)) & 1) == 0)
      {
LABEL_47:
        if (!v45) {
          goto LABEL_48;
        }
        goto LABEL_17;
      }

      MEMORY[0x1895F8858](v25);
      if (CFUniCharDecomposeCharacter() >= 1 && LODWORD(v38[-32]) < 0x510) {
        uint64_t v29 = v38[-32];
      }
      BOOL v6 = v44;
      if (!v45)
      {
LABEL_48:
        if (v29 > 0x7F)
        {
          unint64_t v33 = (v29 & 0x3F) << 8;
          if (v29 >= 0x800)
          {
            unint64_t v34 = (v33 | (v29 >> 6) & 0x3F) << 8;
            unint64_t v35 = (((v34 | (v29 >> 12) & 0x3F) << 8) | (v29 >> 18)) - 2122219023;
            unint64_t v32 = (v34 | (v29 >> 12)) + 8487393;
            if (HIWORD(v29)) {
              unint64_t v32 = v35;
            }
          }

          else
          {
            unint64_t v32 = (v33 | (v29 >> 6)) + 33217;
          }
        }

        else
        {
          unint64_t v32 = v29 + 1;
        }

        char v46 = (v32 + 0xFEFEFEFEFEFEFFLL) & ~(-1LL << (8 * (4 - (__clz(v32) >> 3))));
        unint64_t v23 = MEMORY[0x186E1B6AC](&v46);
        goto LABEL_18;
      }

  __break(1u);
LABEL_68:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

  __break(1u);
LABEL_68:
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
LABEL_69:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

  uint64_t result = a1;
  if (a1 < 1 || v50 <= a1) {
    return result;
  }
  Class v72 = *v96;
  unint64_t v73 = v96[3];
  AttributedString._InternalRuns._exactIndex(atUTF8Offset:)(a1, *v96, v96[1], v96[2], v73, (unint64_t *)&v97);
  uint64_t v113 = v97;
  v114 = v98;
  uint64_t result = outlined init with take of LocalePreferences?( (uint64_t)&v114,  (uint64_t)v115,  &demangling cache variable for type metadata for Rope<AttributedString._InternalRun>._UnmanagedLeaf?);
  unint64_t v74 = *((void *)&v113 + 1);
  int64_t v101 = v113;
  int64_t v102 = v114;
  if ((void)v113 != v73) {
    goto LABEL_95;
  }
  outlined init with take of LocalePreferences?( (uint64_t)v115,  (uint64_t)&v121,  &demangling cache variable for type metadata for Rope<AttributedString._InternalRun>._UnmanagedLeaf?);
  if (v121)
  {
    uint64_t v75 = (void *)(v121 + 24 * ((v74 >> ((4 * *(_BYTE *)(v121 + 18) + 8) & 0x3C)) & 0xF));
    Class v77 = v75[3];
    uint64_t v76 = v75[4];
    int64_t v78 = v75[5];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v72) {
      goto LABEL_72;
    }
LABEL_82:
    if (v74) {
      goto LABEL_73;
    }
LABEL_83:
    __break(1u);
    goto LABEL_84;
  }

  swift_unknownObjectRetain();
  Class v77 = specialized Rope._Node.subscript.getter(v74, v72);
  uint64_t v76 = v85;
  int64_t v78 = v86;
  swift_unknownObjectRelease();
  if (!v72) {
    goto LABEL_82;
  }
LABEL_72:
  unint64_t v79 = *(unsigned __int8 *)(v72 + 18);
  swift_unknownObjectRetain();
  if (v79 >= v74) {
    goto LABEL_83;
  }
LABEL_73:
  outlined init with take of LocalePreferences?( (uint64_t)v115,  (uint64_t)&v122,  &demangling cache variable for type metadata for Rope<AttributedString._InternalRun>._UnmanagedLeaf?);
  if (v122 && (unint64_t v80 = (4 * *(_BYTE *)(v122 + 18) + 8) & 0x3C, ((v74 >> v80) & 0xF) != 0))
  {
    unint64_t v74 = ((((v74 >> v80) & 0xF) - 1) << v80) | ((-15LL << v80) - 1) & v74;
    *((void *)&v101 + 1) = v74;
    uint64_t result = swift_unknownObjectRelease();
  }

  else
  {
    swift_unknownObjectRetain();
    uint64_t v81 = specialized Rope._Node.formPredecessor(of:)((uint64_t)&v101, v72);
    uint64_t result = swift_unknownObjectRelease_n();
    if ((v81 & 1) == 0)
    {
LABEL_99:
      __break(1u);
      goto LABEL_100;
    }

    unint64_t v74 = *((void *)&v101 + 1);
  }

  if ((void)v101 != v73) {
    goto LABEL_97;
  }
  if (v102)
  {
    uint64_t v82 = v102 + 24 * ((v74 >> ((4 * *(_BYTE *)(v102 + 18) + 8) & 0x3C)) & 0xF);
    int64_t v83 = *(void *)(v82 + 32);
    v84 = *(void *)(v82 + 40);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    goto LABEL_85;
  }

  v365 = v73;
  swift_release();
  uint64_t v82 = v395;
  *(void *)&v378 = v395;
  if (v344 > 0x7FF)
  {
    int v87 = *(void *)(a1 + 64);
    char v88 = *(void *)(a1 + 72);
    int64_t v89 = *(void *)(a1 + 80);
    int64_t v90 = *(void *)(a1 + 88);
    swift_unknownObjectRetain();
    swift_retain();
    AttributedString._InternalRuns.endIndex.getter(v87, v88, v89, v90, &v404);
    v372 = v404;
    v343 = v405;
    v86 = v406;
    swift_unknownObjectRelease();
    CFIndex v85 = v343;
    v84 = v372;
  }

  else
  {
    int64_t v83 = (void *)swift_retain();
    AttributedString._InternalRunsSlice.startIndex.getter(v83, 0LL, (unint64_t *)&v404);
    v84 = v404;
    CFIndex v85 = v405;
    v86 = v406;
  }

  v91 = v376;
  v395 = v84;
  v396 = v85;
  *(void *)&v397 = v86;
  v92 = *(void *)(a1 + 64);
  Class v93 = *(void *)(a1 + 72);
  Class v94 = *(void *)(a1 + 80);
  uint64_t v95 = *(void *)(a1 + 88);
  Enum = getEnumTag for _DarwinSearchPathsSequence.Iterator.State();
  swift_unknownObjectRetain();
  LODWORD(v372) = Enum;
  AttributedString._InternalRuns.index(atUTF8Offset:preferEnd:)(0LL, Enum & 1, v92, v93, v94, v95, (uint64_t *)&v453);
  v97 = v455;
  swift_unknownObjectRelease();
  if (v97 < v86 && *(void *)(v82 + 16))
  {
    while (1)
    {
      id v31 = *((void *)&v395 + 1);
      v98 = v395;
      Class v99 = v396;
      Class v100 = *(void *)(a1 + 64);
      int64_t v101 = *(void *)(a1 + 80);
      int64_t v102 = swift_unknownObjectRetain();
      uint64_t result = specialized Rope._endPath.getter(v102);
      if (v100)
      {
        uint64_t result = swift_unknownObjectRelease();
        if (v86 != v101) {
          goto LABEL_96;
        }
      }

      else if (v86)
      {
LABEL_96:
        v117 = *(void *)(a1 + 64);
        v116 = *(void *)(a1 + 72);
        v118 = *(void *)(a1 + 80);
        uint64_t v30 = *(void *)(a1 + 88);
        *(void *)&v453 = v98;
        *((void *)&v453 + 1) = v31;
        *(void *)&v454 = v99;
        v119 = *((void *)&v99 + 1) - 1LL;
        if (__OFSUB__(*((void *)&v99 + 1), 1LL)) {
          goto LABEL_365;
        }
        swift_unknownObjectRetain();
        specialized Rope.formIndex(before:)((uint64_t)&v453, v117, v116, v118, v30);
        v120 = *((void *)&v453 + 1);
        id v31 = v454;
        v105 = v453;
        v121 = specialized Rope.subscript.getter(v453, *((unint64_t *)&v453 + 1), v454, v117, v116, v118, v30);
        uint64_t v30 = v122;
        swift_unknownObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t result = swift_bridgeObjectRelease();
        v123 = v86 - v121;
        if (__OFSUB__(v86, v121)) {
          goto LABEL_366;
        }
        char v37 = v370;
        id v106 = v365;
        goto LABEL_124;
      }

      v103 = *(void *)(a1 + 64);
      v104 = *(void *)(a1 + 72);
      uint64_t v30 = *(void *)(a1 + 80);
      v105 = *(void *)(a1 + 88);
      *(void *)&v343 = v30;
      if (v103)
      {
        v342 = *(void *)(a1 + 72);
        unint64_t v38 = *(void *)(a1 + 88);
        char v37 = v370;
        id v106 = v365;
        if (v30 < v370) {
          goto LABEL_369;
        }
        if (*(_WORD *)(v103 + 16))
        {
          unint64_t v35 = *(unsigned __int8 *)(v103 + 18);
          if (*(_BYTE *)(v103 + 18))
          {
            uint64_t result = swift_unknownObjectRetain_n();
            uint64_t v30 = v370;
            v107 = v103;
            while (1)
            {
              v110 = *(unsigned __int16 *)(v107 + 16);
              if (!*(_WORD *)(v107 + 16)) {
                goto LABEL_392;
              }
              v111 = *(void *)(v107 + 40);
              size_t v42 = __OFSUB__(v30, v111);
              v112 = v30 - v111;
              if (v42) {
                goto LABEL_345;
              }
              if (v112 <= 0)
              {
                v108 = 0LL;
              }

              else
              {
                if ((_DWORD)v110 == 1) {
                  goto LABEL_394;
                }
                uint64_t v113 = *(void *)(v107 + 64);
                uint64_t v30 = v112 - v113;
                if (__OFSUB__(v112, v113)) {
                  goto LABEL_349;
                }
                if (v30 >= 1)
                {
                  if ((_DWORD)v110 == 2) {
                    goto LABEL_394;
                  }
                  v114 = (void *)(v107 + 88);
                  v108 = 2LL;
                  while (v110 != v108)
                  {
                    v115 = v30 - *v114;
                    if (__OFSUB__(v30, *v114)) {
                      goto LABEL_321;
                    }
                    if (v115 < 1) {
                      goto LABEL_80;
                    }
                    ++v108;
                    v114 += 3;
                    uint64_t v30 = v115;
                    if (v110 == v108) {
                      goto LABEL_394;
                    }
                  }

                  __break(1u);
LABEL_321:
                  __break(1u);
LABEL_322:
                  v338 = *(void *)(v37 + 48);
                  size_t v42 = __OFSUB__(v108, v338);
                  CFIndex v40 = v108 - v338;
                  if (v42) {
                    goto LABEL_390;
                  }
                  if (__OFADD__(v40, 1LL)) {
                    goto LABEL_391;
                  }
                  if (v40 + 1 >= 1)
                  {
                    if ((_DWORD)v107 != 2)
                    {
                      v339 = (void *)(v37 + 72);
                      unint64_t v43 = 2LL;
                      while (v107 != v43)
                      {
                        v230 = v40 - *v339;
                        if (__OFSUB__(v40, *v339)) {
                          goto LABEL_384;
                        }
                        if (__OFADD__(v230, 1LL)) {
                          goto LABEL_385;
                        }
                        if (v230 + 1 < 1) {
                          goto LABEL_339;
                        }
                        ++v43;
                        v339 += 3;
                        CFIndex v40 = v230;
                        if (v107 == v43) {
                          goto LABEL_304;
                        }
                      }

                      goto LABEL_383;
                    }

                    v230 = v40;
                    goto LABEL_304;
                  }

                  v107 = 1LL;
                  v230 = v108;
LABEL_340:
                  swift_unknownObjectRelease();
                  swift_unknownObjectRelease();
                  v242 = v31 & 0xFFFFFFFFFFFFF0FFLL | (v107 << 8);
                  v195 = v353;
                  v229 = v372;
                  if (!v30)
                  {
LABEL_341:
                    uint64_t result = swift_release();
                    v243 = 0LL;
                    v244 = v38 - v230;
                    if (!__OFSUB__(v38, v230))
                    {
LABEL_209:
                      *(void *)&v390 = v195;
                      *((void *)&v390 + 1) = v38;
                      *(void *)&v391 = a1;
                      *((void *)&v391 + 1) = v35;
                      *(void *)&v392 = v242;
                      *((void *)&v392 + 1) = v37;
                      v393 = v243;
                      v394 = v244;
                      specialized IndexingIterator.next()();
                      if (v245)
                      {
                        v246 = v245;
                        v247 = v356;
                        while (1)
                        {
                          v249 = v247[1];
                          v434 = *v247;
                          v435 = v249;
                          v436 = v247[2];
                          BigString.utf8.getter();
                          v250 = v485;
                          v251 = BigString.UTF8View.index(_:offsetBy:)();
                          v253 = v252;
                          v255 = v254;
                          v257 = v256;
                          outlined release of Locale((uint64_t)v425);
                          swift_bridgeObjectRetain();
                          swift_bridgeObjectRetain();
                          v258 = specialized AttributedString._AttributeStorage.containsScalarConstraint.getter(v246);
                          swift_bridgeObjectRelease();
                          swift_bridgeObjectRelease();
                          v351 = v255;
                          v347 = v253;
                          v349 = v257;
                          if ((v258 & 1) != 0 && v251 >> 10 > v250 >> 10) {
                            break;
                          }
LABEL_211:
                          swift_bridgeObjectRelease();
                          swift_bridgeObjectRelease();
                          $defer #1 () in AttributedString.Guts.fixScalarConstrainedAttributes(in:)( &v485,  v251,  v347,  v351,  v349);
                          specialized IndexingIterator.next()();
                          v246 = v248;
                          if (!v248) {
                            goto LABEL_253;
                          }
                        }

                        v259 = v250;
                        v363 = v246 + 64;
LABEL_216:
                        v260 = v247[1];
                        v431 = *v247;
                        v432 = v260;
                        v433 = v247[2];
                        BigString.unicodeScalars.getter();
                        v371 = BigString.UnicodeScalarView.subscript.getter();
                        outlined release of Locale((uint64_t)v426);
                        v261 = v247[1];
                        v428 = *v247;
                        v429 = v261;
                        v430 = v247[2];
                        BigString.unicodeScalars.getter();
                        v367 = v259;
                        v369 = BigString.UnicodeScalarView.index(after:)();
                        outlined release of Locale((uint64_t)v427);
                        v262 = 1LL << *(_BYTE *)(v246 + 32);
                        if (v262 < 64) {
                          v263 = ~(-1LL << v262);
                        }
                        else {
                          v263 = -1LL;
                        }
                        v264 = v263 & *(void *)(v246 + 64);
                        v265 = (unint64_t)(v262 + 63) >> 6;
                        swift_bridgeObjectRetain();
                        v266 = 0LL;
                        while (1)
                        {
                          if (v264)
                          {
                            v267 = __clz(__rbit64(v264));
                            v264 &= v264 - 1;
                            v268 = v267 | (v266 << 6);
                            goto LABEL_223;
                          }

                          v272 = v266 + 1;
                          if (__OFADD__(v266, 1LL)) {
                            break;
                          }
                          if (v272 >= v265) {
                            goto LABEL_232;
                          }
                          v273 = *(void *)(v363 + 8 * v272);
                          if (v273) {
                            goto LABEL_227;
                          }
                          if (v266 + 2 >= v265)
                          {
                            ++v266;
LABEL_232:
                            v264 = 0LL;
                            v383 = 0LL;
                            v381 = 0u;
                            v382 = 0u;
                            v379 = 0u;
                            v380 = 0u;
                            v378 = 0u;
                            goto LABEL_233;
                          }

                          v273 = *(void *)(v363 + 8 * (v266 + 2));
                          if (v273)
                          {
                            v272 = v266 + 2;
                            goto LABEL_227;
                          }

                          if (v266 + 3 >= v265)
                          {
                            v266 += 2LL;
                            goto LABEL_232;
                          }

                          v273 = *(void *)(v363 + 8 * (v266 + 3));
                          if (v273)
                          {
                            v272 = v266 + 3;
                            goto LABEL_227;
                          }

                          v272 = v266 + 4;
                          if (v266 + 4 >= v265)
                          {
                            v266 += 3LL;
                            goto LABEL_232;
                          }

                          v273 = *(void *)(v363 + 8 * v272);
                          if (v273) {
                            goto LABEL_227;
                          }
                          do
                          {
                            if (v265 - 5 == v266)
                            {
                              v266 = v265 - 1;
                              goto LABEL_232;
                            }

                            v273 = *(void *)(v246 + 104 + 8 * v266++);
                          }

                          while (!v273);
                          v272 = v266 + 4;
LABEL_227:
                          v264 = (v273 - 1) & v273;
                          v268 = __clz(__rbit64(v273)) + (v272 << 6);
                          v266 = v272;
LABEL_223:
                          v269 = *(void *)(v246 + 56);
                          v270 = (void *)(*(void *)(v246 + 48) + 16 * v268);
                          v271 = v270[1];
                          *(void *)&v378 = *v270;
                          *((void *)&v378 + 1) = v271;
                          outlined init with copy of AttributedString._AttributeValue(v269 + 72 * v268, (uint64_t)&v379);
                          swift_bridgeObjectRetain();
LABEL_233:
                          outlined init with take of LocalePreferences?( (uint64_t)&v378,  (uint64_t)&v384,  &demangling cache variable for type metadata for (key: String, value: AttributedString._AttributeValue)?);
                          v274 = *((void *)&v384 + 1);
                          if (!*((void *)&v384 + 1))
                          {
                            swift_release();
                            v247 = v356;
                            v259 = v369;
                            if (v251 >> 10 <= v369 >> 10) {
                              goto LABEL_211;
                            }
                            goto LABEL_216;
                          }

                          v275 = v384;
                          v276 = *((void *)&v386 + 1);
                          v277 = v387;
                          outlined copy of AttributedString.AttributeRunBoundaries?(*((uint64_t *)&v386 + 1), v387);
                          outlined destroy of AttributedString._AttributeValue((uint64_t)v385);
                          if (v277 != 1)
                          {
                            *(void *)&v378 = v276;
                            *((void *)&v378 + 1) = v277;
                            v278 = AttributedString.AttributeRunBoundaries._constrainedScalar.getter();
                            outlined consume of AttributedString.AttributeRunBoundaries?(v276, v277);
                            if ((v278 & 0x100000000LL) == 0 && v371 != (_DWORD)v278) {
                              specialized invalidate #1 (_:from:to:) in AttributedString.Guts.fixScalarConstrainedAttributes(in:)( v275,  v274,  v367,  v369,  (uint64_t *)v444);
                            }
                          }

                          swift_bridgeObjectRelease();
                        }

                        __break(1u);
LABEL_253:
                        v279 = *(void *)&v444[0];
LABEL_254:
                        uint64_t result = swift_release();
                        v280 = 0LL;
                        v281 = v279 + 64;
                        v282 = 1LL << *(_BYTE *)(v279 + 32);
                        v283 = -1LL;
                        if (v282 < 64) {
                          v283 = ~(-1LL << v282);
                        }
                        v284 = v283 & *(void *)(v279 + 64);
                        v377 = (unint64_t)(v282 + 63) >> 6;
                        uint64_t v30 = v353;
                        while (1)
                        {
                          if (v284)
                          {
                            v285 = __clz(__rbit64(v284));
                            v284 &= v284 - 1;
                            v286 = v285 | (v280 << 6);
                          }

                          else
                          {
                            size_t v42 = __OFADD__(v280++, 1LL);
                            if (v42) {
                              goto LABEL_346;
                            }
                            if (v280 >= v377)
                            {
LABEL_279:
                              swift_release();
                              a1 = v344;
                              v295 = v341 >> 10;
                              if (specialized Range.isEmpty.getter())
                              {
                                v296 = v356[1];
                                v390 = *v356;
                                v391 = v296;
                                v392 = v356[2];
                                if (v295 > (unint64_t)BigString.startIndex.getter() >> 10)
                                {
                                  uint64_t v30 = (uint64_t)&v390;
                                  if (v295 < (unint64_t)BigString.endIndex.getter() >> 10)
                                  {
                                    uint64_t result = v344 - 1;
                                    if (__OFSUB__(v344, 1LL)) {
                                      goto LABEL_389;
                                    }
                                    if ((AttributedString.Guts._needsParagraphFixing(from:to:)(result, v344) & 1) != 0)
                                    {
                                      v297 = *v356;
                                      v298 = v356[2];
                                      v486 = v356[1];
                                      v487 = v298;
                                      v485 = v297;
                                      v299 = *v356;
                                      v379 = v356[1];
                                      v380 = v298;
                                      v378 = v299;
                                      outlined init with take of any PredicateExpression<Self.Output == B1>( &v378,  (uint64_t)v444);
                                      outlined retain of Locale((uint64_t)v444);
                                      v300 = BigString.index(before:)();
                                      v302 = v301;
                                      v304 = v303;
                                      v306 = v305;
                                      outlined release of Locale((uint64_t)&v485);
                                      AttributedString.Guts._paragraphExtending(from:)( v300,  v302,  v304,  v306,  (uint64_t)&v384);
                                      unint64_t v35 = Range<>._utf8OffsetRange.getter();
                                      v107 = v307;
                                      goto LABEL_309;
                                    }
                                  }
                                }

                                goto LABEL_206;
                              }

                              v308 = v356[1];
                              v444[0] = *v356;
                              v444[1] = v308;
                              v444[2] = v356[2];
                              uint64_t v30 = (uint64_t)v444;
                              uint64_t result = v344 - 1;
                              if (__OFSUB__(v344, 1LL)) {
                                goto LABEL_388;
                              }
                              if ((AttributedString.Guts._needsParagraphFixing(from:to:)(result, v344) & 1) != 0)
                              {
                                v309 = *v356;
                                v310 = v356[1];
                                v443 = v356[2];
                                v442[1] = v310;
                                v442[0] = v309;
                                v311 = *v356;
                                v486 = v356[1];
                                v487 = v443;
                                v485 = v311;
                                outlined init with take of any PredicateExpression<Self.Output == B1>( &v485,  (uint64_t)v488);
                                outlined retain of Locale((uint64_t)v488);
                                v312 = BigString.index(before:)();
                                v314 = v313;
                                v316 = v315;
                                v318 = v317;
                                outlined release of Locale((uint64_t)v442);
                                AttributedString.Guts._paragraphExtending(from:)(v312, v314, v316, v318, (uint64_t)&v378);
                                unint64_t v35 = Range<>._utf8OffsetRange.getter();
                                v107 = v319;
                                LOBYTE(v3_Block_object_dispose(va, 8) = 0;
                              }

                              else
                              {
LABEL_289:
                                unint64_t v35 = 0LL;
                                v107 = 0LL;
                                LOBYTE(v3_Block_object_dispose(va, 8) = 1;
                              }

                              v320 = v356[1];
                              v439 = *v356;
                              v440 = v320;
                              v441 = v356[2];
                              if (v340 >> 10 < (unint64_t)BigString.endIndex.getter() >> 10)
                              {
                                if ((v38 & 1) == 0) {
                                  goto LABEL_306;
                                }
                                if ((uint64_t)v343 < 1)
                                {
LABEL_206:
                                  swift_bridgeObjectRelease();
                                  swift_bridgeObjectRelease();
                                  return swift_unknownObjectRelease();
                                }

  swift_release();
  uint64_t result = *(double *)&v65;
  *a2 = v65;
  return result;
}

  ;
}

          unint64_t v33 = (v40 - 1) & v40;
          char v37 = __clz(__rbit64(v40)) + (v29 << 6);
        }

        size_t v42 = *(void *)(v3 + 56);
        unint64_t v43 = (uint64_t *)(*(void *)(v3 + 48) + 16 * v37);
        uint64_t v44 = *v43;
        uint64_t v45 = v43[1];
        outlined init with copy of AttributedString._AttributeValue(v42 + 72 * v37, (uint64_t)v122);
        *(void *)&v117 = v44;
        *((void *)&v117 + 1) = v45;
        outlined init with copy of AttributedString._AttributeValue((uint64_t)v122, (uint64_t)v109);
        *(void *)&v112 = v44;
        *((void *)&v112 + 1) = v45;
        outlined init with copy of AttributedString._AttributeValue((uint64_t)v109, (uint64_t)v107);
        unint64_t v47 = *((void *)&v115 + 1);
        char v46 = v116;
        swift_bridgeObjectRetain_n();
        outlined copy of AttributedString.AttributeRunBoundaries?(v47, v46);
        outlined destroy of AttributedString._AttributeValue((uint64_t)v107);
        if (!v46) {
          break;
        }
        if (v46 == 1)
        {
          swift_bridgeObjectRetain();
          outlined destroy of Any?( (uint64_t)&v117,  &demangling cache variable for type metadata for (key: String, value: AttributedString._AttributeValue));
          outlined consume of AttributedString.AttributeRunBoundaries?(v47, 1LL);
          if (v38 == 1) {
            goto LABEL_82;
          }
          unint64_t v34 = v108;
          unint64_t v35 = v38;
LABEL_51:
          outlined consume of AttributedString.AttributeRunBoundaries?(v34, v35);
          outlined destroy of AttributedString._AttributeValue((uint64_t)v122);
          swift_bridgeObjectRelease();
          objc_super v3 = v110;
        }

        else
        {
          if (!v38)
          {
LABEL_50:
            outlined copy of AttributedString.AttributeRunBoundaries?(v47, v46);
            swift_bridgeObjectRetain();
            outlined copy of AttributedString.AttributeRunBoundaries?(v47, v46);
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            outlined destroy of Any?( (uint64_t)&v117,  &demangling cache variable for type metadata for (key: String, value: AttributedString._AttributeValue));
            outlined consume of AttributedString.AttributeRunBoundaries?(v47, v46);
            unint64_t v34 = v47;
            unint64_t v35 = v46;
            goto LABEL_51;
          }

          if (v47 == v108 && v46 == v38) {
            CFDictionaryRef v48 = 1;
          }
          else {
            CFDictionaryRef v48 = _stringCompareWithSmolCheck(_:_:expecting:)();
          }
          outlined copy of AttributedString.AttributeRunBoundaries?(v47, v46);
          swift_bridgeObjectRetain();
          outlined copy of AttributedString.AttributeRunBoundaries?(v47, v46);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          outlined destroy of Any?( (uint64_t)&v117,  &demangling cache variable for type metadata for (key: String, value: AttributedString._AttributeValue));
          outlined consume of AttributedString.AttributeRunBoundaries?(v47, v46);
          outlined consume of AttributedString.AttributeRunBoundaries?(v47, v46);
          outlined destroy of AttributedString._AttributeValue((uint64_t)v122);
          swift_bridgeObjectRelease();
          objc_super v3 = v110;
          if ((v48 & 1) != 0)
          {
LABEL_83:
            *(unint64_t *)((char *)v103 + ((v37 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v37;
            id v27 = __OFADD__(v102, 1LL);
            int64_t v102 = (uint64_t *)((char *)v102 + 1);
            if (v27)
            {
              __break(1u);
              goto LABEL_86;
            }
          }
        }
      }

      if (v38) {
        goto LABEL_50;
      }
      swift_bridgeObjectRelease_n();
      outlined destroy of Any?( (uint64_t)&v117,  &demangling cache variable for type metadata for (key: String, value: AttributedString._AttributeValue));
      outlined consume of AttributedString.AttributeRunBoundaries?(v47, 0LL);
      outlined consume of AttributedString.AttributeRunBoundaries?(v47, 0LL);
LABEL_82:
      outlined destroy of AttributedString._AttributeValue((uint64_t)v122);
      swift_bridgeObjectRelease();
      objc_super v3 = v110;
      goto LABEL_83;
    }
  }

  int64_t v102 = &v101;
  MEMORY[0x1895F8858](isStackAllocationSafe);
  v105 = (char *)&v101 - ((v5 + 15) & 0x3FFFFFFFFFFFFFF0LL);
  bzero(v105, v5);
  v103 = 0LL;
  BOOL v6 = 0LL;
  unint64_t v7 = *(void *)(v3 + 64);
  id v106 = v3 + 64;
  BOOL v8 = 1LL << *(_BYTE *)(v3 + 32);
  uint64_t v9 = -1LL;
  if (v8 < 64) {
    uint64_t v9 = ~(-1LL << v8);
  }
  uint64_t v10 = v9 & v7;
  v107 = (__int128 *)((unint64_t)(v8 + 63) >> 6);
  v109 = &v118;
  while (1)
  {
    if (v10)
    {
      uint64_t v13 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      size_t v14 = v13 | (v6 << 6);
      CFIndex v15 = v111;
      goto LABEL_24;
    }

    int v16 = v6 + 1;
    if (__OFADD__(v6, 1LL)) {
      goto LABEL_154;
    }
    CFIndex v15 = v111;
    unint64_t v17 = *(void *)(v106 + 8 * v16);
    ++v6;
    if (!v17)
    {
      BOOL v6 = v16 + 1;
      unint64_t v17 = *(void *)(v106 + 8 * v6);
      if (!v17)
      {
        BOOL v6 = v16 + 2;
        unint64_t v17 = *(void *)(v106 + 8 * v6);
        if (!v17) {
          break;
        }
      }
    }

              v177 = (v150 - 1) & v150;
              v171 = v151;
              v142 = __clz(__rbit64(v150)) + (v151 << 6);
            }

            v143 = 16 * v142;
            v144 = *(void *)(v119 + 56);
            v145 = (uint64_t *)(*(void *)(v119 + 48) + 16 * v142);
            v146 = v145[1];
            v170 = *v145;
            v147 = 32 * v142;
            outlined init with copy of Any(v144 + 32 * v142, (uint64_t)v187);
            v148 = (void *)(*(void *)(v129 + 48) + v143);
            *v148 = v170;
            v148[1] = v146;
            outlined init with take of Any(v187, (_OWORD *)(*(void *)(v129 + 56) + v147));
            swift_bridgeObjectRetain();
            v128 = v169;
            v138 = v171;
            v141 = v177;
          }
        }

    if (v55 == v59 >> 14)
    {
      swift_bridgeObjectRelease();
      uint64_t v56 = v275;
    }

    else
    {
      uint64_t v56 = v275;
      if (v55 < v58 >> 14) {
        goto LABEL_243;
      }
      uint64_t v70 = Substring.subscript.getter();
      Class v72 = v71;
      unint64_t v74 = v73;
      uint64_t v76 = v75;
      swift_bridgeObjectRelease();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v56 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  v275[2] + 1LL,  1,  v275);
      }
      int64_t v78 = v56[2];
      Class v77 = v56[3];
      if (v78 >= v77 >> 1) {
        uint64_t v56 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (void *)(v77 > 1),  v78 + 1,  1,  v56);
      }
      v56[2] = v78 + 1;
      unint64_t v79 = &v56[4 * v78];
      v79[4] = v70;
      v79[5] = v72;
      v79[6] = v74;
      v79[7] = v76;
    }

          id v28 = swift_release();
          unint64_t v7 = (uint64_t)v191;
          v202 = v191;
          if ((v38 & 1) != 0)
          {
LABEL_26:
            id v28 = swift_bridgeObjectRelease();
            uint64_t v29 = (void *)(*(void *)(v7 + 56) + 16 * v35);
            void *v29 = v26;
            v29[1] = v27;
            goto LABEL_27;
          }
        }
      }

      else
      {
        specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v28, v18 & 1);
        unint64_t v7 = (uint64_t)v202;
        uint64_t v39 = (int64_t)v202;
        id v28 = specialized __RawDictionaryStorage.find<A>(_:)(v24, v25);
        if ((v38 & 1) != (v40 & 1)) {
          goto LABEL_236;
        }
        unint64_t v35 = v28;
        if ((v38 & 1) != 0) {
          goto LABEL_26;
        }
      }

      *(void *)(v7 + 8 * (v35 >> 6) + 64) |= 1LL << v35;
      uint64_t v41 = (uint64_t *)(*(void *)(v7 + 48) + 16 * v35);
      *uint64_t v41 = v24;
      v41[1] = v25;
      size_t v42 = (void *)(*(void *)(v7 + 56) + 16 * v35);
      *size_t v42 = v26;
      v42[1] = v27;
      unint64_t v43 = *(void *)(v7 + 16);
      uint64_t v44 = __OFADD__(v43, 1LL);
      uint64_t v45 = v43 + 1;
      if (v44) {
        goto LABEL_223;
      }
      *(void *)(v7 + 16) = v45;
LABEL_27:
      Class v24 = specialized LazyMapSequence.Iterator.next()(v28);
      uint64_t v25 = v30;
      Class v26 = v31;
      id v27 = v32;
      unint64_t v18 = 1;
      unint64_t v33 = v7;
      if (!v30) {
        goto LABEL_86;
      }
    }
  }

  unint64_t v33 = v7;
LABEL_86:
  v192 = v33;
  swift_bridgeObjectRelease();
  outlined consume of Set<A1>.Iterator._Variant<A><A1>();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  int64_t v83 = (void *)v200;
  v84 = swift_isUniquelyReferenced_nonNull_native();
  v203 = v200;
  CFIndex v85 = swift_bridgeObjectRetain();
  v86 = specialized LazyMapSequence.Iterator.next()(v85);
  if (!v87)
  {
LABEL_130:
    swift_bridgeObjectRelease();
    outlined consume of Set<A1>.Iterator._Variant<A><A1>();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v4 = v188;
    v0 = &unk_18C5D1000;
    goto LABEL_131;
  }

  int64_t v90 = v86;
  v91 = v87;
  v92 = (void *)v200;
  while (1)
  {
    v201 = v89;
    int64_t v96 = v88;
    v97 = v8;
    v98 = v92;
    Class v100 = specialized __RawDictionaryStorage.find<A>(_:)(v90, v91);
    int64_t v101 = v92[2];
    int64_t v102 = (v99 & 1) == 0;
    Class v93 = v101 + v102;
    if (__OFADD__(v101, v102)) {
      goto LABEL_222;
    }
    int64_t v83 = v92;
    v103 = v99;
    if (v92[3] < v93)
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v93, v84 & 1);
      int64_t v83 = (void *)v203;
      uint64_t v39 = v203;
      Class v93 = specialized __RawDictionaryStorage.find<A>(_:)(v90, v91);
      if ((v103 & 1) != (v104 & 1)) {
        goto LABEL_236;
      }
      Class v100 = v93;
LABEL_95:
      BOOL v8 = v97;
      v105 = v201;
      if ((v103 & 1) != 0) {
        goto LABEL_88;
      }
      goto LABEL_96;
    }

    if ((v84 & 1) != 0) {
      goto LABEL_95;
    }
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, MarkdownDecodableAttributedStringKey.Type>);
    v110 = static _DictionaryStorage.copy(original:)();
    v111 = v92;
    int64_t v83 = (void *)v110;
    if (v92[2]) {
      break;
    }
LABEL_128:
    BOOL v8 = v97;
    Class v93 = swift_release();
    v203 = (int64_t)v83;
    v105 = v201;
    if ((v103 & 1) != 0)
    {
LABEL_88:
      Class v93 = swift_bridgeObjectRelease();
      Class v94 = (void *)(v83[7] + 16 * v100);
      *Class v94 = v96;
      v94[1] = v105;
      goto LABEL_89;
    }

          id v28 = swift_release();
          unint64_t v7 = (uint64_t)v191;
          v202 = v191;
          if ((v38 & 1) != 0)
          {
LABEL_26:
            id v28 = swift_bridgeObjectRelease();
            uint64_t v29 = (void *)(*(void *)(v7 + 56) + 16 * v35);
            void *v29 = v26;
            v29[1] = v27;
            goto LABEL_27;
          }
        }
      }

      else
      {
        specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v28, v18 & 1);
        unint64_t v7 = (uint64_t)v202;
        uint64_t v39 = (int64_t)v202;
        id v28 = specialized __RawDictionaryStorage.find<A>(_:)(v24, v25);
        if ((v38 & 1) != (v40 & 1)) {
          goto LABEL_236;
        }
        unint64_t v35 = v28;
        if ((v38 & 1) != 0) {
          goto LABEL_26;
        }
      }

      *(void *)(v7 + 8 * (v35 >> 6) + 64) |= 1LL << v35;
      uint64_t v41 = (uint64_t *)(*(void *)(v7 + 48) + 16 * v35);
      *uint64_t v41 = v24;
      v41[1] = v25;
      size_t v42 = (void *)(*(void *)(v7 + 56) + 16 * v35);
      *size_t v42 = v26;
      v42[1] = v27;
      unint64_t v43 = *(void *)(v7 + 16);
      uint64_t v44 = __OFADD__(v43, 1LL);
      uint64_t v45 = v43 + 1;
      if (v44) {
        goto LABEL_223;
      }
      *(void *)(v7 + 16) = v45;
LABEL_27:
      Class v24 = specialized LazyMapSequence.Iterator.next()(v28);
      uint64_t v25 = v30;
      Class v26 = v31;
      id v27 = v32;
      unint64_t v18 = 1;
      unint64_t v33 = v7;
      if (!v30) {
        goto LABEL_86;
      }
    }
  }

  unint64_t v33 = v7;
LABEL_86:
  v192 = v33;
  swift_bridgeObjectRelease();
  outlined consume of Set<A1>.Iterator._Variant<A><A1>();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  int64_t v83 = (void *)v200;
  v84 = swift_isUniquelyReferenced_nonNull_native();
  v203 = v200;
  CFIndex v85 = swift_bridgeObjectRetain();
  v86 = specialized LazyMapSequence.Iterator.next()(v85);
  if (!v87)
  {
LABEL_130:
    swift_bridgeObjectRelease();
    outlined consume of Set<A1>.Iterator._Variant<A><A1>();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v4 = v188;
    v0 = &unk_18C5D1000;
    goto LABEL_131;
  }

  int64_t v90 = v86;
  v91 = v87;
  v92 = (void *)v200;
  while (1)
  {
    v201 = v89;
    int64_t v96 = v88;
    v97 = v8;
    v98 = v92;
    Class v100 = specialized __RawDictionaryStorage.find<A>(_:)(v90, v91);
    int64_t v101 = v92[2];
    int64_t v102 = (v99 & 1) == 0;
    Class v93 = v101 + v102;
    if (__OFADD__(v101, v102)) {
      goto LABEL_222;
    }
    int64_t v83 = v92;
    v103 = v99;
    if (v92[3] < v93)
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v93, v84 & 1);
      int64_t v83 = (void *)v203;
      uint64_t v39 = v203;
      Class v93 = specialized __RawDictionaryStorage.find<A>(_:)(v90, v91);
      if ((v103 & 1) != (v104 & 1)) {
        goto LABEL_236;
      }
      Class v100 = v93;
LABEL_95:
      BOOL v8 = v97;
      v105 = v201;
      if ((v103 & 1) != 0) {
        goto LABEL_88;
      }
      goto LABEL_96;
    }

    if ((v84 & 1) != 0) {
      goto LABEL_95;
    }
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, MarkdownDecodableAttributedStringKey.Type>);
    v110 = static _DictionaryStorage.copy(original:)();
    v111 = v92;
    int64_t v83 = (void *)v110;
    if (v92[2]) {
      break;
    }
LABEL_128:
    BOOL v8 = v97;
    Class v93 = swift_release();
    v203 = (int64_t)v83;
    v105 = v201;
    if ((v103 & 1) != 0)
    {
LABEL_88:
      Class v93 = swift_bridgeObjectRelease();
      Class v94 = (void *)(v83[7] + 16 * v100);
      *Class v94 = v96;
      v94[1] = v105;
      goto LABEL_89;
    }

      uint64_t v13 = 0;
      LOBYTE(v14) = 1;
LABEL_6:
      swift_bridgeObjectRelease();
      LOBYTE(v46) = v14;
      return v13 | ((unint64_t)v14 << 32);
    }

    __break(1u);
  }

  __break(1u);
  return result;
}

void newJSONString(void *a1, int a2, void *a3)
{
  uint64_t v202 = *MEMORY[0x1895F89C0];
  unint64_t v5 = a1[3];
  BOOL v6 = (const uint8_t *)*a1;
  uint8_t v7 = v6[v5];
  if (v7 != 34)
  {
    uint64_t v10 = a1[1] & 8LL;
    BOOL v11 = v7 != 39 || v10 == 0;
    if (!v11)
    {
      char v8 = 0;
      ++v5;
      char v9 = 1;
      goto LABEL_16;
    }

    if (a2 != 1 || !v10)
    {
      if (a3)
      {
        unint64_t v64 = a1[6];
        BOOL v31 = v5 >= v64;
        unint64_t v65 = v5 - v64;
        if (v31) {
          uint64_t v66 = v65;
        }
        else {
          uint64_t v66 = 0LL;
        }
        Class v67 = -[NSString initWithFormat:]( objc_alloc(&OBJC_CLASS___NSString),  "initWithFormat:",  @"%@ around line %lu, column %lu.",  @"String without surrounding quotes",  a1[5],  v66);
        unint64_t v68 = -[NSNumber initWithUnsignedInteger:]( objc_alloc(&OBJC_CLASS___NSNumber),  "initWithUnsignedInteger:",  a1[3]);
        v200 = @"NSDebugDescription";
        v201 = @"NSJSONSerializationErrorIndex";
        v195 = v67;
        v196 = v68;
        *a3 = +[NSError errorWithDomain:code:userInfo:]( NSError,  "errorWithDomain:code:userInfo:",  @"NSCocoaErrorDomain",  3840,  [MEMORY[0x189603F68] dictionaryWithObjects:&v195 forKeys:&v200 count:2]);
      }

      return;
    }

    if (((v7 & 0xDF) - 65) < 0x1Au
      || (v6[v5] - 36 <= 0x3B ? (BOOL v12 = ((1LL << (v7 - 36)) & 0x900000000000001LL) == 0) : (BOOL v12 = 1), !v12))
    {
LABEL_15:
      char v9 = 0;
      uint64_t v13 = 1LL;
      char v8 = 1;
      goto LABEL_17;
    }

    if ((char)v6[(int)v5] > -65)
    {
      int32_t v98 = v5;
    }

    else
    {
      int32_t v98 = utf8_back1SafeBody(v6, 0, v5);
      BOOL v6 = (const uint8_t *)*a1;
    }

    int v101 = (char)v6[v98];
    uint64_t v102 = v6[v98];
    if ((v101 & 0x80000000) == 0)
    {
LABEL_213:
      if (_MergedGlobals_141 != -1) {
        dispatch_once(&_MergedGlobals_141, &__block_literal_global_66);
      }
      if (!MEMORY[0x186E2191C](qword_18C496E90, v102))
      {
        if (a3)
        {
          unint64_t v103 = a1[3];
          unint64_t v104 = a1[6];
          BOOL v31 = v103 >= v104;
          uint64_t v105 = v103 - v104;
          if (v31) {
            uint64_t v106 = v105;
          }
          else {
            uint64_t v106 = 0LL;
          }
          v107 = -[NSString initWithFormat:]( objc_alloc(&OBJC_CLASS___NSString),  "initWithFormat:",  @"%@ around line %lu, column %lu.",  @"Disallowed first character in JSON5 object key",  a1[5],  v106);
          v108 = -[NSNumber initWithUnsignedInteger:]( objc_alloc(&OBJC_CLASS___NSNumber),  "initWithUnsignedInteger:",  a1[3]);
          v200 = @"NSDebugDescription";
          v201 = @"NSJSONSerializationErrorIndex";
          v195 = v107;
          v196 = v108;
          *a3 = +[NSError errorWithDomain:code:userInfo:]( NSError,  "errorWithDomain:code:userInfo:",  @"NSCocoaErrorDomain",  3840,  [MEMORY[0x189603F68] dictionaryWithObjects:&v195 forKeys:&v200 count:2]);
        }

        return;
      }

      goto LABEL_15;
    }

    uint64_t v122 = v98;
    uint64_t v123 = v98 + 1LL;
    uint64_t v124 = a1[2];
    if (v124 != v123)
    {
      if (v102 < 0xE0)
      {
        int v133 = v102 & 0x1F;
      }

      else
      {
        if (v102 > 0xEF)
        {
          unint64_t v135 = v6[v123];
          uint64_t v123 = v122 + 2;
          if (v124 == v122 + 2) {
            goto LABEL_234;
          }
          unsigned int v132 = v6[v123] ^ 0x80;
          if (v132 > 0x3F) {
            goto LABEL_234;
          }
          LODWORD(v131) = v135 & 0x3F | (((_DWORD)v102 - 240) << 6);
        }

        else
        {
          uint64_t v131 = v101 & 0xF;
          unsigned int v132 = v6[v123] & 0x3F;
        }

        LODWORD(v123) = v123 + 1;
        uint64_t v123 = (int)v123;
        int v133 = v132 | ((_DWORD)v131 << 6);
      }

      unsigned int v134 = v6[v123] ^ 0x80;
      if (v134 <= 0x3F)
      {
        uint64_t v102 = v134 | (v133 << 6);
        goto LABEL_213;
      }
    }

LABEL_234:
    if (a3)
    {
      unint64_t v125 = a1[3];
      unint64_t v126 = a1[6];
      BOOL v31 = v125 >= v126;
      uint64_t v127 = v125 - v126;
      if (v31) {
        uint64_t v128 = v127;
      }
      else {
        uint64_t v128 = 0LL;
      }
      v129 = -[NSString initWithFormat:]( objc_alloc(&OBJC_CLASS___NSString),  "initWithFormat:",  @"%@ around line %lu, column %lu.",  @"Unparseable UTF8 character",  a1[5],  v128);
      v130 = -[NSNumber initWithUnsignedInteger:](objc_alloc(&OBJC_CLASS___NSNumber), "initWithUnsignedInteger:", a1[3]);
      v200 = @"NSDebugDescription";
      v201 = @"NSJSONSerializationErrorIndex";
      v195 = v129;
      v196 = v130;
      *a3 = +[NSError errorWithDomain:code:userInfo:]( NSError,  "errorWithDomain:code:userInfo:",  @"NSCocoaErrorDomain",  3840,  [MEMORY[0x189603F68] dictionaryWithObjects:&v195 forKeys:&v200 count:2]);
    }

    return;
  }

  char v8 = 0;
  char v9 = 0;
  ++v5;
LABEL_16:
  uint64_t v13 = 2LL;
LABEL_17:
  unint64_t v14 = a1[2];
  if (v14 <= v5)
  {
    if (a3)
    {
      unint64_t v29 = a1[3];
      unint64_t v30 = a1[6];
      BOOL v31 = v29 >= v30;
      uint64_t v32 = v29 - v30;
      if (v31) {
        uint64_t v33 = v32;
      }
      else {
        uint64_t v33 = 0LL;
      }
      unint64_t v34 = -[NSString initWithFormat:]( objc_alloc(&OBJC_CLASS___NSString),  "initWithFormat:",  @"%@ around line %lu, column %lu.",  @"Unexpected end of file during string parse",  a1[5],  v33);
      unint64_t v35 = -[NSNumber initWithUnsignedInteger:](objc_alloc(&OBJC_CLASS___NSNumber), "initWithUnsignedInteger:", a1[3]);
      v200 = @"NSDebugDescription";
      v201 = @"NSJSONSerializationErrorIndex";
      v195 = v34;
      v196 = v35;
      *a3 = +[NSError errorWithDomain:code:userInfo:]( NSError,  "errorWithDomain:code:userInfo:",  @"NSCocoaErrorDomain",  3840,  [MEMORY[0x189603F68] dictionaryWithObjects:&v195 forKeys:&v200 count:2]);
    }
  }

  else
  {
    char v15 = 0;
    int v16 = (const uint8_t *)*a1;
    int v17 = -2128831035;
    unint64_t v18 = v5;
    while (1)
    {
      unsigned int v19 = v16[v18];
      if (v19 < 0x20) {
        break;
      }
      int v17 = 16777619 * (v17 ^ v19);
      if (v19 == 92)
      {
        if (v14 <= v18 + 1) {
          goto LABEL_51;
        }
        int v20 = v16[v18 + 1];
        if (v20 == 117)
        {
          unint64_t v21 = v18 + 6;
LABEL_52:
          char v15 = 1;
          goto LABEL_53;
        }

        if ((a1[1] & 8) == 0)
        {
LABEL_51:
          unint64_t v21 = v18 + 2;
          goto LABEL_52;
        }

        switch(v20)
        {
          case 10:
            unint64_t v21 = v18 + 2;
            break;
          case 13:
            unint64_t v21 = v18 + 2;
            if (v14 > v18 + 2 && v16[v21] == 10) {
              unint64_t v21 = v18 + 3;
            }
            break;
          case 120:
            unint64_t v21 = v18 + 4;
            goto LABEL_52;
          default:
            goto LABEL_51;
        }

        ++a1[5];
        a1[6] = v21;
        goto LABEL_52;
      }

      if (v19 == 39) {
        char v22 = v9;
      }
      else {
        char v22 = 0;
      }
      BOOL v24 = v7 == 34 && v19 == 34;
      if (v19 == 58) {
        char v25 = v8;
      }
      else {
        char v25 = 0;
      }
      if ((v25 & 1) != 0 || (v22 & 1) != 0 || v24) {
        goto LABEL_74;
      }
      char v26 = (v19 & 0x7F) == 0x20 ? v8 : 0;
      if ((v26 & 1) != 0) {
        goto LABEL_74;
      }
      BOOL v11 = v19 == 47;
      char v27 = v8 ^ 1;
      unint64_t v21 = v18 + 1;
      if (!v11) {
        char v27 = 1;
      }
      if ((v27 & 1) == 0 && v14 > v21)
      {
        int v28 = v16[v21];
        if (v28 == 42 || v28 == 47) {
          goto LABEL_74;
        }
      }

                                      specialized RangeReplaceableCollection<>.removeLast(_:)(*(void *)(v277 + 16) - v275);
                                      swift_bridgeObjectRelease();
                                      swift_bridgeObjectRelease();
                                      if (*(void *)(v277 + 16) <= 8uLL)
                                      {
                                        v84 = v277;
                                        goto LABEL_242;
                                      }

                                      specialized static NSDecimal._fitMantissa(_:roundingMode:)(v277, 0LL);
                                      v84 = v209;
                                      v211 = v210;
                                      unint64_t v18 = v41;
                                      swift_bridgeObjectRelease();
                                      if (v41) {
                                        goto LABEL_31;
                                      }
                                      v212 = *(_DWORD *)v279;
                                      v213 = *(_WORD *)&v279[4];
                                      v214 = *(_WORD *)&v279[6];
                                      v215 = *(_WORD *)&v279[8];
                                      v216 = *(_WORD *)&v279[10];
                                      v217 = *(_WORD *)&v279[12];
                                      v218 = *(_WORD *)&v279[14];
                                      v219 = *(_WORD *)&v279[16];
                                      v277 = *(_OWORD *)v279;
                                      v278 = *(_DWORD *)&v279[16];
                                      v276 = *(_WORD *)&v279[18];
                                      v220 = _So9NSDecimala__exponent_getter((char *)&v277);
                                      if (v211 < (uint64_t)0xFFFFFFFF80000000LL)
                                      {
                                        __break(1u);
                                      }

                                      else if (v211 <= 0x7FFFFFFF)
                                      {
                                        if (!__OFADD__(v220, (_DWORD)v211))
                                        {
                                          if (v220 + (int)v211 > 127)
                                          {
                                            swift_bridgeObjectRelease();
LABEL_30:
                                            lazy protocol witness table accessor for type NSDecimal._CalculationError and conformance NSDecimal._CalculationError();
                                            unint64_t v18 = (void *)swift_allocError();
                                            NSString *v71 = 0;
                                            swift_willThrow();
                                            goto LABEL_31;
                                          }

                                          LODWORD(v277) = v212;
                                          WORD2(v277) = v213;
                                          WORD3(v277) = v214;
                                          WORD4(v277) = v215;
                                          WORD5(v277) = v216;
                                          WORD6(v277) = v217;
                                          HIWORD(v277) = v218;
                                          LOWORD(v27_Block_object_dispose(va, 8) = v219;
                                          HIWORD(v27_Block_object_dispose(va, 8) = v276;
                                          v222 = _So9NSDecimala__exponent_getter((char *)&v277);
                                          uint64_t v88 = __OFADD__(v222, (_DWORD)v211);
                                          v223 = (v222 + v211);
                                          if (v88) {
                                            goto LABEL_347;
                                          }
                                          _So9NSDecimala__exponent_setter(v223, v279);
LABEL_242:
                                          v221 = specialized Array._getCount()(v84);
                                          if ((v221 & 0x8000000000000000LL) != 0 || HIDWORD(v221)) {
                                            goto LABEL_354;
                                          }
                                          _So9NSDecimala__length_setter(v221, v279);
LABEL_303:
                                          NSDecimal.copyVariableLengthInteger(_:)((Swift::OpaquePointer)v84);
                                          unint64_t v18 = v131;
LABEL_304:
                                          swift_bridgeObjectRelease();
                                          if (!v131)
                                          {
                                            _So9NSDecimala__isCompact_setter_0(0LL, v279);
                                            NSDecimal.compact()();
                                            LODWORD(a2) = *(_DWORD *)v279;
                                            LOWORD(v14) = *(_WORD *)&v279[4];
                                            LOWORD(v26) = *(_WORD *)&v279[6];
                                            LOWORD(a3) = *(_WORD *)&v279[8];
                                            LOWORD(v27) = *(_WORD *)&v279[10];
                                            LOWORD(v2_Block_object_dispose(va, 8) = *(_WORD *)&v279[12];
                                            LOWORD(v29) = *(_WORD *)&v279[14];
                                            unint64_t v30 = *(_WORD *)&v279[16];
                                            LOWORD(v31) = *(_WORD *)&v279[18];
                                            goto LABEL_306;
                                          }

  __break(1u);
LABEL_235:
  __break(1u);
LABEL_236:
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
LABEL_237:
  __break(1u);
  os_unfair_lock_unlock((os_unfair_lock_t)v39);
  __break(1u);
LABEL_238:
  __break(1u);
}

  __break(1u);
LABEL_235:
  __break(1u);
LABEL_236:
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
LABEL_237:
  __break(1u);
  os_unfair_lock_unlock((os_unfair_lock_t)v39);
  __break(1u);
LABEL_238:
  __break(1u);
}

    swift_bridgeObjectRelease();
    v199 = 0;
    uint64_t i = 714LL;
    goto LABEL_235;
  }

  swift_retain();
  swift_retain();
LABEL_19:
  if (*(_BYTE *)(v6 + 72) != 1
    || *(_BYTE *)(v6 + 96) != 1
    || *(_BYTE *)(v6 + 120) != 1
    || (*(_BYTE *)(v6 + 144) & 1) == 0)
  {
    v205 = *(_OWORD *)v210;
    v206[0] = *(_OWORD *)&v210[16];
    v206[1] = *(_OWORD *)&v210[32];
    *(_OWORD *)((char *)&v206[1] + 10) = *(_OWORD *)&v210[42];
    v204[1] = *(_OWORD *)&v209[16];
    v204[2] = *(_OWORD *)&v209[32];
    v204[3] = *(_OWORD *)&v209[48];
    v204[4] = *(_OWORD *)&v209[64];
    v203 = v208;
    v204[0] = *(_OWORD *)v209;
    v217 = *(_OWORD *)v210;
    v218 = *(_OWORD *)&v210[16];
    v219[0] = *(_OWORD *)&v210[32];
    *(_OWORD *)((char *)v219 + 10) = *(_OWORD *)&v210[42];
    v213 = *(_OWORD *)&v209[16];
    v214 = *(_OWORD *)&v209[32];
    v215 = *(_OWORD *)&v209[48];
    v216 = *(_OWORD *)&v209[64];
    v211 = v208;
    v212 = *(_OWORD *)v209;
    if (BYTE8(v208) != 1)
    {
      outlined retain of URLComponents((uint64_t)&v203);
      BOOL v12 = URLComponents._URLComponents.computedString.getter();
      unint64_t v39 = v38;
      outlined release of URLComponents((uint64_t)&v203);
      if (v39) {
        goto LABEL_46;
      }
LABEL_47:
      unint64_t v37 = v7;
      swift_retain();
      swift_retain();
      if ((_foundation_swift_url_feature_enabled() & 1) != 0) {
        goto LABEL_48;
      }
      goto LABEL_49;
    }

    char v26 = v203;
    if (!(void)v203) {
      goto LABEL_47;
    }
LABEL_41:
    BOOL v12 = *(void *)(v26 + 16);
    swift_bridgeObjectRetain();
LABEL_46:
    swift_release();
    outlined release of URLComponents((uint64_t)&v203);
    return v12;
  }

  if ((v8[72] & 1) != 0) {
    goto LABEL_56;
  }
  int v20 = String.subscript.getter();
  unint64_t v21 = MEMORY[0x186E1B610](v20);
  unint64_t v23 = v22;
  swift_bridgeObjectRelease();
  BYTE8(v20_Block_object_dispose(va, 8) = 0;
  BYTE10(v20_Block_object_dispose(va, 8) = 0;
  if ((v23 & 0x1000000000000000LL) != 0)
  {
    *(void *)&v211 = v21;
    *((void *)&v211 + 1) = v23;
    v84 = lazy protocol witness table accessor for type String and conformance String();
    swift_bridgeObjectRetain();
    uint64_t v202 = (__int128 *)v84;
    StringProtocol._ephemeralString.getter();
    unint64_t v85 = (void *)String._bridgeToObjectiveCImpl()();
    swift_bridgeObjectRelease();
    unint64_t v86 = (unsigned __int16 *)objc_msgSend(v85, sel__fastCharacterContents);
    uint64_t v87 = v85;
    if (v86)
    {
      *(void *)&v211 = v21;
      *((void *)&v211 + 1) = v23;
      StringProtocol._ephemeralString.getter();
      uint64_t v88 = (void *)String._bridgeToObjectiveCImpl()();
      swift_bridgeObjectRelease();
      int64_t v89 = objc_msgSend(v88, sel_length);
      swift_unknownObjectRelease();
      int64_t v90 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)( v86,  (uint64_t)v89,  2u,  1);
      goto LABEL_201;
    }

    goto LABEL_200;
  }

  if ((v23 & 0x2000000000000000LL) != 0)
  {
    char v25 = HIBYTE(v23) & 0xF;
    *(void *)&v211 = v21;
    *((void *)&v211 + 1) = v23 & 0xFFFFFFFFFFFFFFLL;
    BOOL v24 = (char *)&v211;
  }

  else if ((v21 & 0x1000000000000000LL) != 0)
  {
    BOOL v24 = (char *)((v23 & 0xFFFFFFFFFFFFFFFLL) + 32);
    char v25 = v21 & 0xFFFFFFFFFFFFLL;
  }

  else
  {
    BOOL v24 = (char *)_StringObject.sharedUTF8.getter();
  }

  if (!specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v24, v25, 2u, 1))
  {
LABEL_202:
    swift_bridgeObjectRelease();
    v199 = 0;
    uint64_t i = 810LL;
    goto LABEL_235;
  }

  while (1)
  {
    swift_bridgeObjectRelease();
    *(void *)&v209[24] = v21;
    *(void *)&v209[32] = v23;
LABEL_56:
    if ((v8[96] & 1) == 0)
    {
      unint64_t v43 = String.subscript.getter();
      unint64_t v44 = MEMORY[0x186E1B610](v43);
      char v46 = v45;
      swift_bridgeObjectRelease();
      BYTE8(v20_Block_object_dispose(va, 8) = 0;
      BYTE11(v20_Block_object_dispose(va, 8) = 0;
      if ((v46 & 0x1000000000000000LL) != 0)
      {
        *(void *)&v211 = v44;
        *((void *)&v211 + 1) = v46;
        unint64_t v91 = lazy protocol witness table accessor for type String and conformance String();
        swift_bridgeObjectRetain();
        uint64_t v202 = (__int128 *)v91;
        StringProtocol._ephemeralString.getter();
        v92 = (void *)String._bridgeToObjectiveCImpl()();
        swift_bridgeObjectRelease();
        unint64_t v93 = (unsigned __int16 *)objc_msgSend(v92, sel__fastCharacterContents);
        uint64_t v94 = v92;
        if (v93)
        {
          *(void *)&v211 = v44;
          *((void *)&v211 + 1) = v46;
          StringProtocol._ephemeralString.getter();
          uint64_t v95 = (void *)String._bridgeToObjectiveCImpl()();
          swift_bridgeObjectRelease();
          int64_t v96 = objc_msgSend(v95, sel_length);
          swift_unknownObjectRelease();
          v97 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)( v93,  (uint64_t)v96,  2u,  1);
        }

        else
        {
          v97 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v44, v46, 2u, 1);
        }

        uint64_t v185 = v97;
        swift_bridgeObjectRelease();
        unint64_t v5 = &v211;
        uint64_t v4 = (unint64_t)&v208;
        if ((v185 & 1) == 0)
        {
LABEL_205:
          swift_bridgeObjectRelease();
          v199 = 0;
          uint64_t i = 831LL;
          goto LABEL_235;
        }
      }

      else
      {
        if ((v46 & 0x2000000000000000LL) != 0)
        {
          unsigned int v48 = HIBYTE(v46) & 0xF;
          *(void *)&v211 = v44;
          *((void *)&v211 + 1) = v46 & 0xFFFFFFFFFFFFFFLL;
          int v47 = (char *)&v211;
        }

        else if ((v44 & 0x1000000000000000LL) != 0)
        {
          int v47 = (char *)((v46 & 0xFFFFFFFFFFFFFFFLL) + 32);
          unsigned int v48 = v44 & 0xFFFFFFFFFFFFLL;
        }

        else
        {
          int v47 = (char *)_StringObject.sharedUTF8.getter();
        }

        if (!specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v47, v48, 2u, 1)) {
          goto LABEL_205;
        }
      }

      swift_bridgeObjectRelease();
      *(void *)&v209[40] = v44;
      *(void *)&v209[48] = v46;
    }

    if ((v8[120] & 1) != 0) {
      goto LABEL_92;
    }
    unint64_t v49 = String.subscript.getter();
    char v50 = MEMORY[0x186E1B610](v49);
    unint64_t v23 = v51;
    swift_bridgeObjectRelease();
    BYTE8(v20_Block_object_dispose(va, 8) = 0;
    BYTE12(v20_Block_object_dispose(va, 8) = 0;
    *(_WORD *)&v210[56] = 0;
    uint64_t v52 = specialized Collection.first.getter(v50, v23);
    if ((v52 & 0x1FF) != 0x5B) {
      goto LABEL_85;
    }
    if ((v23 & 0x1000000000000000LL) != 0)
    {
      unint64_t v183 = String.UTF8View._foreignCount()();
      if (__OFSUB__(v183, 1LL)) {
        goto LABEL_233;
      }
      CFArrayRef v54 = (v50 >> 59) & 1;
      uint64_t v52 = MEMORY[0x186E1B838](15LL, v183 - 1, v50, v23);
LABEL_71:
      if ((v52 & 0xC) != 4LL << v54) {
        goto LABEL_72;
      }
      goto LABEL_198;
    }

    char v53 = HIBYTE(v23) & 0xF;
    if ((v23 & 0x2000000000000000LL) == 0) {
      char v53 = v50 & 0xFFFFFFFFFFFFLL;
    }
    if (v53)
    {
      uint64_t v52 = (v53 << 16) - 65532;
      LOBYTE(v54) = 1;
      goto LABEL_71;
    }

    __break(1u);
LABEL_198:
    uint64_t v52 = _StringGuts._slowEnsureMatchingEncoding(_:)(v52, v50, v23);
LABEL_72:
    unint64_t v55 = HIBYTE(v23) & 0xF;
    if ((v23 & 0x2000000000000000LL) == 0) {
      unint64_t v55 = v50 & 0xFFFFFFFFFFFFLL;
    }
    unint64_t v21 = v52 >> 16;
    if (v52 >> 16 < v55) {
      break;
    }
    __break(1u);
LABEL_200:
    int64_t v90 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v21, v23, 2u, 1);
LABEL_201:
    unint64_t v184 = v90;
    swift_bridgeObjectRelease();
    unint64_t v5 = &v211;
    uint64_t v4 = (unint64_t)&v208;
    if ((v184 & 1) == 0) {
      goto LABEL_202;
    }
  }

  if ((v23 & 0x1000000000000000LL) != 0)
  {
    uint64_t v57 = String.UTF8View._foreignSubscript(position:)();
  }

  else if ((v23 & 0x2000000000000000LL) != 0)
  {
    *(void *)&v211 = v50;
    *((void *)&v211 + 1) = v23 & 0xFFFFFFFFFFFFFFLL;
    uint64_t v57 = *((_BYTE *)&v211 + v21);
  }

  else
  {
    if ((v50 & 0x1000000000000000LL) != 0) {
      BOOL v56 = (v23 & 0xFFFFFFFFFFFFFFFLL) + 32;
    }
    else {
      BOOL v56 = _StringObject.sharedUTF8.getter();
    }
    uint64_t v57 = *(_BYTE *)(v56 + v21);
  }

  if (v57 != 93)
  {
LABEL_85:
    if ((v23 & 0x1000000000000000LL) != 0)
    {
      uint64_t v202 = (__int128 *)v50;
      *(void *)&v211 = v50;
      *((void *)&v211 + 1) = v23;
      lazy protocol witness table accessor for type String and conformance String();
      swift_bridgeObjectRetain_n();
      StringProtocol._ephemeralString.getter();
      uint64_t v165 = (void *)String._bridgeToObjectiveCImpl()();
      swift_bridgeObjectRelease();
      v166 = (unsigned __int16 *)objc_msgSend(v165, sel__fastCharacterContents);
      v167 = v165;
      if (v166)
      {
        *(void *)&v211 = v202;
        *((void *)&v211 + 1) = v23;
        StringProtocol._ephemeralString.getter();
        char v50 = (unint64_t)v202;
        unint64_t v168 = (void *)String._bridgeToObjectiveCImpl()();
        swift_bridgeObjectRelease();
        unint64_t v169 = objc_msgSend(v168, sel_length);
        swift_unknownObjectRelease();
        uint64_t v170 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)( v166,  (uint64_t)v169,  4u,  1);
      }

      else
      {
        char v50 = (unint64_t)v202;
        uint64_t v170 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)( (unint64_t)v202,  v23,  4u,  1);
      }

      v187 = v170;
      swift_bridgeObjectRelease_n();
      unint64_t v5 = &v211;
      if ((v187 & 1) != 0) {
        goto LABEL_91;
      }
    }

    else
    {
      if ((v23 & 0x2000000000000000LL) != 0)
      {
        char v60 = HIBYTE(v23) & 0xF;
        *(void *)&v211 = v50;
        *((void *)&v211 + 1) = v23 & 0xFFFFFFFFFFFFFFLL;
        uint8_t v59 = (char *)&v211;
      }

      else if ((v50 & 0x1000000000000000LL) != 0)
      {
        uint8_t v59 = (char *)((v23 & 0xFFFFFFFFFFFFFFFLL) + 32);
        char v60 = v50 & 0xFFFFFFFFFFFFLL;
      }

      else
      {
        uint8_t v59 = (char *)_StringObject.sharedUTF8.getter();
      }

      if (specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v59, v60, 4u, 1)) {
        goto LABEL_91;
      }
    }

LABEL_53:
      unint64_t v18 = v21;
      if (v14 <= v21)
      {
        if (a3)
        {
          unint64_t v69 = a1[3];
          unint64_t v70 = a1[6];
          BOOL v31 = v69 >= v70;
          uint64_t v71 = v69 - v70;
          if (v31) {
            uint64_t v72 = v71;
          }
          else {
            uint64_t v72 = 0LL;
          }
          unint64_t v73 = -[NSString initWithFormat:]( objc_alloc(&OBJC_CLASS___NSString),  "initWithFormat:",  @"%@ around line %lu, column %lu.",  @"Unterminated string",  a1[5],  v72);
          unint64_t v74 = -[NSNumber initWithUnsignedInteger:]( objc_alloc(&OBJC_CLASS___NSNumber),  "initWithUnsignedInteger:",  a1[3]);
          v200 = @"NSDebugDescription";
          v201 = @"NSJSONSerializationErrorIndex";
          v195 = v73;
          v196 = v74;
          *a3 = +[NSError errorWithDomain:code:userInfo:]( NSError,  "errorWithDomain:code:userInfo:",  @"NSCocoaErrorDomain",  3840,  [MEMORY[0x189603F68] dictionaryWithObjects:&v195 forKeys:&v200 count:2]);
        }

        return;
      }
    }

    if (v19 == 10) {
      char v36 = v8;
    }
    else {
      char v36 = 0;
    }
    unint64_t v37 = v18;
    if ((v36 & 1) != 0)
    {
LABEL_73:
      ++a1[5];
      a1[6] = v37;
LABEL_74:
      if (v18 == v5)
      {
        a1[3] = v5 + 1;
        if ((a1[1] & 2) != 0) {
          unint64_t v38 = &OBJC_CLASS___NSMutableString;
        }
        else {
          unint64_t v38 = &OBJC_CLASS___NSString;
        }
        id v75 = objc_alloc_init(v38);
        return;
      }

      unint64_t v39 = v18 - 1;
      uint64_t v40 = v18 - v5;
      __s2 = &v16[v5];
      uint64_t v192 = (uint64_t)(a1 + 7);
      uint64_t v41 = (uint64_t)&a1[4 * v17 + 7];
      if (*(_DWORD *)(v41 + 24) == v17 && *(void *)(v41 + 8) == v40 && !memcmp(*(const void **)v41, __s2, v18 - v5))
      {
        Class v99 = *(void **)(v192 + 32LL * v17 + 16);
        if (v99)
        {
          a1[3] = v39 + v13;
          if ((a1[1] & 2) != 0) {
            [v99 mutableCopy];
          }
          else {
            id v100 = v99;
          }
          return;
        }
      }

      if ((v15 & 1) != 0)
      {
        v191 = a3;
        size_t v42 = malloc(v18 - v5);
        uint64_t v190 = v18 - v5;
        if (v5 < v18)
        {
          unint64_t v43 = v18 - v5;
          unint64_t v44 = 0LL;
          while (1)
          {
            if (v44 >= v43)
            {
              if (2 * v43 <= 6) {
                unint64_t v43 = 6LL;
              }
              else {
                v43 *= 2LL;
              }
              v195 = 0LL;
              v196 = (NSNumber *)&v195;
              uint64_t v197 = 0x2020000000LL;
              char v198 = 0;
              uint64_t v45 = __CFSafelyReallocate();
              if (LOBYTE(v196[3].super.super.isa))
              {
                if (v191)
                {
                  unint64_t v109 = a1[3];
                  unint64_t v110 = a1[6];
                  v111 = objc_alloc(&OBJC_CLASS___NSString);
                  uint64_t v112 = v109 - v110;
                  if (v109 < v110) {
                    uint64_t v112 = 0LL;
                  }
                  uint64_t v113 = -[NSString initWithFormat:]( v111,  "initWithFormat:",  @"%@ around line %lu, column %lu.",  @"Memory exhausted during parse of string.",  a1[5],  v112);
                  v114 = -[NSNumber initWithUnsignedInteger:]( objc_alloc(&OBJC_CLASS___NSNumber),  "initWithUnsignedInteger:",  a1[3]);
                  v199[0] = @"NSDebugDescription";
                  v199[1] = @"NSJSONSerializationErrorIndex";
                  v200 = (const __CFString *)v113;
                  v201 = (const __CFString *)v114;
                  void *v191 = +[NSError errorWithDomain:code:userInfo:]( NSError,  "errorWithDomain:code:userInfo:",  @"NSCocoaErrorDomain",  3840,  [MEMORY[0x189603F68] dictionaryWithObjects:&v200 forKeys:v199 count:2]);
                }

                _Block_object_dispose(&v195, 8);
                return;
              }

              size_t v42 = (_BYTE *)v45;
              _Block_object_dispose(&v195, 8);
            }

            char v46 = (const uint8_t *)*a1;
            int v47 = *(unsigned __int8 *)(*a1 + v5);
            if (v47 == 92) {
              break;
            }
            v42[v44] = v47;
LABEL_154:
            ++v44;
            if (++v5 >= v18) {
              goto LABEL_187;
            }
          }

          if (v5 >= v39)
          {
            if (v191)
            {
              v116 = a1 + 3;
              unint64_t v115 = a1[3];
              unint64_t v117 = a1[6];
              BOOL v31 = v115 >= v117;
              uint64_t v118 = v115 - v117;
              if (v31) {
                uint64_t v119 = v118;
              }
              else {
                uint64_t v119 = 0LL;
              }
              v120 = -[NSString initWithFormat:]( objc_alloc(&OBJC_CLASS___NSString),  "initWithFormat:",  @"%@ around line %lu, column %lu.",  @"Unfinished control character",  a1[5],  v119);
              v121 = -[NSNumber initWithUnsignedInteger:]( objc_alloc(&OBJC_CLASS___NSNumber),  "initWithUnsignedInteger:",  *v116);
              v200 = @"NSDebugDescription";
              v201 = @"NSJSONSerializationErrorIndex";
              v195 = v120;
              v196 = v121;
              void *v191 = +[NSError errorWithDomain:code:userInfo:]( NSError,  "errorWithDomain:code:userInfo:",  @"NSCocoaErrorDomain",  3840,  [MEMORY[0x189603F68] dictionaryWithObjects:&v195 forKeys:&v200 count:2]);
            }

            goto LABEL_231;
          }

          unsigned int v48 = v46[v5 + 1];
          unint64_t v49 = v5 + 2;
          if (v48 > 0x61)
          {
            switch(v46[v5 + 1])
            {
              case 'n':
                goto LABEL_98;
              case 'o':
              case 'p':
              case 'q':
              case 's':
                goto LABEL_104;
              case 'r':
                char v50 = 13;
                goto LABEL_152;
              case 't':
                char v50 = 9;
                goto LABEL_152;
              case 'u':
                int v194 = 0;
                if ((a1[1] & 8) != 0 && !v194)
                {
                  free(v42);
                  if (v191)
                  {
                    v137 = a1 + 3;
                    unint64_t v136 = a1[3];
                    unint64_t v138 = a1[6];
                    BOOL v31 = v136 >= v138;
                    uint64_t v139 = v136 - v138;
                    if (v31) {
                      uint64_t v140 = v139;
                    }
                    else {
                      uint64_t v140 = 0LL;
                    }
                    v141 = -[NSString initWithFormat:]( objc_alloc(&OBJC_CLASS___NSString),  "initWithFormat:",  @"%@ around line %lu, column %lu.",  @"Unsupported escaped (unicode) null",  a1[5],  v140);
                    v142 = -[NSNumber initWithUnsignedInteger:]( objc_alloc(&OBJC_CLASS___NSNumber),  "initWithUnsignedInteger:",  *v137);
                    v200 = @"NSDebugDescription";
                    v201 = @"NSJSONSerializationErrorIndex";
                    v195 = v141;
                    v196 = v142;
                    void *v191 = +[NSError errorWithDomain:code:userInfo:]( NSError,  "errorWithDomain:code:userInfo:",  @"NSCocoaErrorDomain",  3840,  [MEMORY[0x189603F68] dictionaryWithObjects:&v195 forKeys:&v200 count:2]);
                  }

                  return;
                }

                if ((v194 & 0xFC00) == 0xD800)
                {
                  if (v5 + 11 > v39)
                  {
                    a1[3] = v5;
                    if (v191)
                    {
                      unint64_t v153 = a1[6];
                      BOOL v31 = v5 >= v153;
                      unint64_t v154 = v5 - v153;
                      if (v31) {
                        uint64_t v155 = v154;
                      }
                      else {
                        uint64_t v155 = 0LL;
                      }
                      v156 = -[NSString initWithFormat:]( objc_alloc(&OBJC_CLASS___NSString),  "initWithFormat:",  @"%@ around line %lu, column %lu.",  @"Unexpected end of file during string parse (expected low-surrogate code point but did not find one).",  a1[5],  v155);
                      v157 = -[NSNumber initWithUnsignedInteger:]( objc_alloc(&OBJC_CLASS___NSNumber),  "initWithUnsignedInteger:",  a1[3]);
                      v200 = @"NSDebugDescription";
                      v201 = @"NSJSONSerializationErrorIndex";
                      v195 = v156;
                      v196 = v157;
                      void *v191 = +[NSError errorWithDomain:code:userInfo:]( NSError,  "errorWithDomain:code:userInfo:",  @"NSCocoaErrorDomain",  3840,  [MEMORY[0x189603F68] dictionaryWithObjects:&v195 forKeys:&v200 count:2]);
                    }

                    goto LABEL_231;
                  }

                  unint64_t v55 = v5 + *a1;
                  if (*(_BYTE *)(v55 + 6) != 92 || *(_BYTE *)(v55 + 7) != 117)
                  {
                    a1[3] = v5;
                    if (v191)
                    {
                      unint64_t v143 = a1[6];
                      BOOL v31 = v5 >= v143;
                      unint64_t v144 = v5 - v143;
                      if (v31) {
                        uint64_t v145 = v144;
                      }
                      else {
                        uint64_t v145 = 0LL;
                      }
                      v146 = -[NSString initWithFormat:]( objc_alloc(&OBJC_CLASS___NSString),  "initWithFormat:",  @"%@ around line %lu, column %lu.",  @"Missing low code point in surrogate pair",  a1[5],  v145);
                      v147 = -[NSNumber initWithUnsignedInteger:]( objc_alloc(&OBJC_CLASS___NSNumber),  "initWithUnsignedInteger:",  a1[3]);
                      v200 = @"NSDebugDescription";
                      v201 = @"NSJSONSerializationErrorIndex";
                      v195 = v146;
                      v196 = v147;
                      void *v191 = +[NSError errorWithDomain:code:userInfo:]( NSError,  "errorWithDomain:code:userInfo:",  @"NSCocoaErrorDomain",  3840,  [MEMORY[0x189603F68] dictionaryWithObjects:&v195 forKeys:&v200 count:2]);
                    }

  __break(1u);
LABEL_54:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)(v1, v36);
  swift_bridgeObjectRelease();
LABEL_54:
  unint64_t v38 = *(void **)(v0 + 296);
  unint64_t v39 = *(void **)(v0 + 304);
  uint64_t v41 = *(void **)(v0 + 312);
  uint64_t v40 = *(void **)(v0 + 320);
  size_t v42 = *(void **)(v0 + 328);
  if (v38)
  {
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0LL);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( (unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef,  (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef,  (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
    unint64_t v43 = v39;
    unint64_t v44 = v41;
    uint64_t v45 = v40;
    char v46 = v42;
    int v47 = v38;
    _CFObject.hash(into:)();
    *(void *)(v0 + 80) = v38;
    if (v39) {
      goto LABEL_56;
    }
  }

  else
  {
    Hasher._combine(_:)(0);
    uint64_t v52 = v42;
    char v53 = v39;
    CFArrayRef v54 = v41;
    unint64_t v55 = v40;
    *(void *)(v0 + 80) = 0LL;
    if (v39)
    {
LABEL_56:
      Hasher._combine(_:)(1u);
      type metadata accessor for CFDictionaryRef(0LL);
      lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( (unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef,  (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef,  (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
      unsigned int v48 = v39;
      _CFObject.hash(into:)();

      if (v41) {
        goto LABEL_57;
      }
      goto LABEL_62;
    }
  }

  Hasher._combine(_:)(0);
  if (v41)
  {
LABEL_57:
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0LL);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( (unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef,  (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef,  (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
    unint64_t v49 = v41;
    _CFObject.hash(into:)();

    if (v40) {
      goto LABEL_58;
    }
LABEL_63:
    Hasher._combine(_:)(0);
    if (v42) {
      goto LABEL_59;
    }
    goto LABEL_64;
  }

    lazy protocol witness table accessor for type NSDecimal._CalculationError and conformance NSDecimal._CalculationError();
    swift_allocError();
    *char v46 = 0;
    return swift_willThrow();
  }

  lazy protocol witness table accessor for type NSDecimal._CalculationError and conformance NSDecimal._CalculationError();
  swift_allocError();
  unsigned int v48 = 1;
LABEL_55:
  *int v47 = v48;
  return swift_willThrow();
}

    unint64_t v44 = (v48 - 1) & v48;
    uint64_t v45 = __clz(__rbit64(v48)) + (v46 << 6);
LABEL_54:
    outlined init with copy of AnyHashable(*(void *)(v5 + 48) + 40 * v45, (uint64_t)&v72);
    outlined init with copy of Any(*(void *)(v5 + 56) + 32 * v45, (uint64_t)v74 + 8);
    v70[0] = v74[0];
    v70[1] = v74[1];
    uint64_t v71 = v75;
    v69[0] = v72;
    v69[1] = v73;
    outlined init with copy of AnyHashable((uint64_t)v69, (uint64_t)v64);
    if (!swift_dynamicCast())
    {
      outlined destroy of (key: AnyHashable, value: Any)((uint64_t)v69);
      swift_bridgeObjectRelease();
      outlined consume of Set<A1>.Iterator._Variant<A><A1>();
      swift_release();
      goto LABEL_61;
    }

    outlined init with copy of Any((uint64_t)v70 + 8, (uint64_t)v64);
    outlined destroy of (key: AnyHashable, value: Any)((uint64_t)v69);
    outlined init with take of Any(v64, v65);
    uint64_t v66 = v63;
    outlined init with take of Any(v65, v67);
    char v50 = v66;
    outlined init with take of Any(v67, v68);
    outlined init with take of Any(v68, &v66);
    uint64_t v51 = specialized __RawDictionaryStorage.find<A>(_:)(v50, *((uint64_t *)&v50 + 1));
    uint64_t v52 = v51;
    if ((v53 & 1) != 0)
    {
      uint64_t v41 = v5;
      size_t v42 = (_OWORD *)(v14[6] + 16 * v51);
      swift_bridgeObjectRelease();
      *size_t v42 = v50;
      unint64_t v5 = v41;
      unint64_t v43 = (_OWORD *)(v14[7] + 32 * v52);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v43);
      outlined init with take of Any(&v66, v43);
      goto LABEL_31;
    }

    if (v14[2] >= v14[3])
    {
      __break(1u);
LABEL_74:
      __break(1u);
LABEL_75:
      __break(1u);
LABEL_76:
      __break(1u);
      goto LABEL_77;
    }

    *(void *)((char *)v14 + ((v51 >> 3) & 0x1FFFFFFFFFFFFFF8LL) + 64) |= 1LL << v51;
    *(_OWORD *)(v14[6] + 16 * v51) = v50;
    outlined init with take of Any(&v66, (_OWORD *)(v14[7] + 32 * v51));
    CFArrayRef v54 = v14[2];
    BOOL v12 = __OFADD__(v54, 1LL);
    unint64_t v55 = v54 + 1;
    if (v12) {
      goto LABEL_74;
    }
    v14[2] = v55;
LABEL_31:
    uint64_t v40 = v46;
    unint64_t v39 = v44;
  }

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

  __break(1u);
LABEL_54:
  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

    unint64_t v39 = (v50 - 1) & v50;
    uint64_t v41 = __clz(__rbit64(v50)) + (v36 << 6);
LABEL_28:
    size_t v42 = 32 * v41;
    unint64_t v43 = *(void *)(v17 + 48) + 32 * v41;
    unint64_t v44 = *(void *)(v43 + 8);
    uint64_t v45 = 8 * v41;
    char v46 = *(void *)(*(void *)(v17 + 56) + v45);
    int v47 = *(void *)(v26 + 48) + v42;
    unsigned int v48 = *(_OWORD *)(v43 + 16);
    *(void *)int v47 = *(void *)v43;
    *(void *)(v47 + _Block_object_dispose(va, 8) = v44;
    *(_OWORD *)(v47 + 16) = v48;
    *(void *)(*(void *)(v26 + 56) + v45) = v46;
    swift_bridgeObjectRetain();
    swift_retain();
  }

  uint64_t v51 = v49 + 8;
  if (v51 >= v55) {
    goto LABEL_54;
  }
  char v50 = *(void *)&__src[8 * v51];
  if (v50)
  {
    char v36 = v51;
    goto LABEL_53;
  }

  while (1)
  {
    char v36 = v51 + 1;
    if (__OFADD__(v51, 1LL)) {
      break;
    }
    if (v36 >= v55) {
      goto LABEL_54;
    }
    char v50 = *(void *)&__src[8 * v36];
    ++v51;
    if (v50) {
      goto LABEL_53;
    }
  }

    unint64_t v39 = (v50 - 1) & v50;
    uint64_t v41 = __clz(__rbit64(v50)) + (v36 << 6);
LABEL_28:
    size_t v42 = 32 * v41;
    unint64_t v43 = *(void *)(v17 + 48) + 32 * v41;
    unint64_t v44 = *(void *)(v43 + 8);
    uint64_t v45 = 8 * v41;
    char v46 = *(void *)(*(void *)(v17 + 56) + v45);
    int v47 = *(void *)(v26 + 48) + v42;
    unsigned int v48 = *(_OWORD *)(v43 + 16);
    *(void *)int v47 = *(void *)v43;
    *(void *)(v47 + _Block_object_dispose(va, 8) = v44;
    *(_OWORD *)(v47 + 16) = v48;
    *(void *)(*(void *)(v26 + 56) + v45) = v46;
    swift_bridgeObjectRetain();
    swift_retain();
  }

  uint64_t v51 = v49 + 8;
  if (v51 >= v55) {
    goto LABEL_54;
  }
  char v50 = *(void *)&__src[8 * v51];
  if (v50)
  {
    char v36 = v51;
    goto LABEL_53;
  }

  while (1)
  {
    char v36 = v51 + 1;
    if (__OFADD__(v51, 1LL)) {
      break;
    }
    if (v36 >= v55) {
      goto LABEL_54;
    }
    char v50 = *(void *)&__src[8 * v36];
    ++v51;
    if (v50) {
      goto LABEL_53;
    }
  }

  int v17 = v5;
  unint64_t v18 = (void *)v7;
LABEL_70:
  result._object = v18;
  result._countAndFlagsBits = v17;
  return result;
}

  __break(1u);
LABEL_54:
  __break(1u);
LABEL_55:
  __break(1u);
LABEL_56:
  __break(1u);
  return result;
}

  __break(1u);
LABEL_54:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

      outlined retain of LocalePreferences?( (uint64_t)v109,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined copy of LocalePreferences?);
      char v25 = v109;
      char v26 = outlined copy of LocalePreferences?;
LABEL_54:
      outlined retain of LocalePreferences?( (uint64_t)v25,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))v26);
LABEL_57:
      LOBYTE(v23) = 0;
      goto LABEL_58;
    }
  }

  return result;
}

        swift_unknownObjectRetain();
        BOOL v56 = specialized Rope._Node.subscript.getter(v51, v46);
        swift_unknownObjectRelease();
        uint64_t v57 = 1;
LABEL_54:
        swift_unknownObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t result = (unint64_t *)swift_bridgeObjectRelease();
        if (__OFSUB__(v161, v56)) {
          goto LABEL_189;
        }
        if (v178 == *(void *)(v18 + 88))
        {
          uint64_t v150 = v161 - v56;
          v151 = v38;
          uint64_t v175 = v51;
          if ((v57 & 1) != 0)
          {
            uint8_t v58 = *(void *)(v18 + 64);
            swift_unknownObjectRetain();
            specialized Rope._Node.subscript.getter(v51, v58);
            unint64_t v153 = v59;
            BOOL v61 = v60;
            swift_unknownObjectRelease();
          }

          else
          {
            unsigned __int8 v62 = v38 + 24 * ((v51 >> ((4 * *(_BYTE *)(v38 + 18) + 8) & 0x3C)) & 0xF);
            BOOL v61 = *(void *)(v62 + 32);
            BOOL v63 = *(void *)(v62 + 40);
            swift_bridgeObjectRetain();
            unint64_t v153 = v63;
            swift_bridgeObjectRetain();
          }

          unint64_t v64 = v171;
          --v174;
          uint64_t result = (unint64_t *)swift_bridgeObjectRetain();
          unint64_t v65 = 0LL;
          uint64_t v66 = v152;
          v181 = v61;
          while (1)
          {
            unint64_t v68 = v65 + 1;
            if (__OFADD__(v65, 1LL)) {
              goto LABEL_174;
            }
            unint64_t v70 = *(v66 - 1);
            unint64_t v69 = *v66;
            if (*(void *)(v64 + 16))
            {
              swift_bridgeObjectRetain_n();
              uint64_t v71 = specialized __RawDictionaryStorage.find<A>(_:)(v70, v69);
              if ((v72 & 1) != 0)
              {
                outlined init with copy of AttributedString._AttributeValue( *(void *)(v64 + 56) + 72 * v71,  (uint64_t)&v199);
              }

              else
              {
                v203 = 0LL;
                v201 = 0u;
                uint64_t v202 = 0u;
                v199 = 0u;
                v200 = 0u;
              }

              swift_bridgeObjectRelease();
              BOOL v61 = v181;
              if (!*(void *)(v181 + 16))
              {
LABEL_69:
                char v198 = 0LL;
                v196 = 0u;
                uint64_t v197 = 0u;
                int v194 = 0u;
                v195 = 0u;
                goto LABEL_76;
              }
            }

            else
            {
              v203 = 0LL;
              v201 = 0u;
              uint64_t v202 = 0u;
              v199 = 0u;
              v200 = 0u;
              swift_bridgeObjectRetain();
              if (!*(void *)(v61 + 16)) {
                goto LABEL_69;
              }
            }

            swift_bridgeObjectRetain();
            unint64_t v73 = specialized __RawDictionaryStorage.find<A>(_:)(v70, v69);
            if ((v74 & 1) != 0)
            {
              outlined init with copy of AttributedString._AttributeValue( *(void *)(v61 + 56) + 72 * v73,  (uint64_t)&v194);
            }

            else
            {
              char v198 = 0LL;
              v196 = 0u;
              uint64_t v197 = 0u;
              int v194 = 0u;
              v195 = 0u;
            }

            swift_bridgeObjectRelease();
LABEL_76:
            swift_bridgeObjectRelease();
            outlined init with copy of (Hashable & Sendable)?( (uint64_t)&v199,  (uint64_t)&v188,  &demangling cache variable for type metadata for AttributedString._AttributeValue?);
            outlined init with copy of (Hashable & Sendable)?( (uint64_t)&v194,  (uint64_t)v180,  &demangling cache variable for type metadata for AttributedString._AttributeValue?);
            if (!v191)
            {
              if (v193) {
                goto LABEL_93;
              }
              outlined destroy of Any?( (uint64_t)&v188,  &demangling cache variable for type metadata for AttributedString._AttributeValue?);
              outlined destroy of Any?( (uint64_t)&v194,  &demangling cache variable for type metadata for AttributedString._AttributeValue?);
              uint64_t result = (unint64_t *)outlined destroy of Any?( (uint64_t)&v199,  &demangling cache variable for type metadata for AttributedString._AttributeValue?);
              goto LABEL_63;
            }

            outlined init with copy of (Hashable & Sendable)?( (uint64_t)&v188,  (uint64_t)v187,  &demangling cache variable for type metadata for AttributedString._AttributeValue?);
            if (!v193)
            {
              outlined destroy of AttributedString._AttributeValue((uint64_t)v187);
LABEL_93:
              outlined destroy of Any?( (uint64_t)&v188,  (uint64_t *)&demangling cache variable for type metadata for (AttributedString._AttributeValue?, AttributedString._AttributeValue?));
              outlined destroy of Any?( (uint64_t)&v194,  &demangling cache variable for type metadata for AttributedString._AttributeValue?);
              outlined destroy of Any?( (uint64_t)&v199,  &demangling cache variable for type metadata for AttributedString._AttributeValue?);
LABEL_94:
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              uint64_t v45 = v167;
              unsigned int v19 = v161;
              goto LABEL_95;
            }

            id v75 = *((_OWORD *)v180 + 3);
            unint64_t v184 = *((_OWORD *)v180 + 2);
            uint64_t v185 = v75;
            v186 = v180[8];
            uint64_t v76 = *((_OWORD *)v180 + 1);
            v182 = *(_OWORD *)v180;
            unint64_t v183 = v76;
            outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>( (uint64_t)v187,  (uint64_t)v214);
            outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>( (uint64_t)&v182,  (uint64_t)v213);
            outlined init with copy of (Hashable & Sendable)?( (uint64_t)v214,  (uint64_t)&v209,  &demangling cache variable for type metadata for (Hashable & Sendable)?);
            outlined init with copy of (Hashable & Sendable)?( (uint64_t)v213,  (uint64_t)v179,  &demangling cache variable for type metadata for (Hashable & Sendable)?);
            if (v210)
            {
              if (!v212)
              {
                __swift_destroy_boxed_opaque_existential_1((uint64_t)&v209);
LABEL_61:
                Class v67 = 0;
                goto LABEL_62;
              }

              outlined init with take of any PredicateExpression<Self.Output == B1>(&v209, (uint64_t)v206);
              outlined init with take of any PredicateExpression<Self.Output == B1>(v179, (uint64_t)v205);
              char v77 = v207;
              unint64_t v169 = v208;
              unint64_t v168 = __swift_project_boxed_opaque_existential_1(v206, v207);
              v177 = v149;
              int64_t v78 = *(void *)(v77 - 8);
              MEMORY[0x1895F8858](v168);
              unint64_t v80 = (char *)v149 - ((v79 + 15) & 0xFFFFFFFFFFFFFFF0LL);
              outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>( (uint64_t)v205,  (uint64_t)v204);
              uint64_t v81 = type metadata accessor for Optional();
              v176 = v149;
              uint64_t v82 = *(void *)(v81 - 8);
              MEMORY[0x1895F8858](v81);
              v84 = (char *)v149 - v83;
              __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Hashable & Sendable);
              unint64_t v85 = swift_dynamicCast();
              unint64_t v86 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v78 + 56);
              if (v85)
              {
                v86(v84, 0LL, 1LL, v77);
                (*(void (**)(char *, char *, uint64_t))(v78 + 32))(v80, v84, v77);
                Class v67 = dispatch thunk of static Equatable.== infix(_:_:)();
                (*(void (**)(char *, uint64_t))(v78 + 8))(v80, v77);
              }

              else
              {
                v86(v84, 1LL, 1LL, v77);
                (*(void (**)(char *, uint64_t))(v82 + 8))(v84, v81);
                Class v67 = 0;
              }

              unint64_t v18 = v173;
              unint64_t v64 = v171;
              __swift_destroy_boxed_opaque_existential_1((uint64_t)v205);
              __swift_destroy_boxed_opaque_existential_1((uint64_t)v206);
              int v17 = v172;
            }

            else
            {
              if (v212)
              {
                outlined destroy of Any?( (uint64_t)v179,  &demangling cache variable for type metadata for (Hashable & Sendable)?);
                goto LABEL_61;
              }

              Class v67 = 1;
            }

  __break(1u);
  return result;
}

  uint64_t result = static PropertyListDecoder.scanForExplicitXMLEncoding(in:)((unint64_t)a2, a3, &v21);
  if (!v3)
  {
    uint64_t result = 0LL;
    *a1 = v21;
  }

  return result;
}

  *(void *)(v25 + 8 * (v19 >> 6) + 64) |= 1LL << v19;
  char v46 = (uint64_t *)(*(void *)(v25 + 48) + 16 * v19);
  *char v46 = a1;
  v46[1] = a2;
  int v47 = (void *)(*(void *)(v25 + 56) + 16 * v19);
  *int v47 = v16;
  v47[1] = v15;
  unsigned int v48 = *(void *)(v25 + 16);
  unint64_t v23 = __OFADD__(v48, 1LL);
  unint64_t v49 = v48 + 1;
  if (v23)
  {
    __break(1u);
LABEL_102:
    __break(1u);
LABEL_103:
    __break(1u);
    goto LABEL_104;
  }

  *(void *)(v25 + 16) = v49;
  swift_bridgeObjectRetain();
LABEL_55:
  objc_super v3 = *(void *)(v4 + 32);
  *(void *)(v4 + 32) = v25;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  *(void *)&char v50 = v16;
  *((void *)&v50 + 1) = v15;
  unint64_t v93 = v50;
LABEL_56:
  uint64_t v51 = (objc_class *)type metadata accessor for _NSSwiftLocale();
  uint64_t v52 = objc_allocWithZone(v51);
  char v53 = OBJC_IVAR____NSSwiftLocale_doesNotRequireSpecialHandling;
  *(_OWORD *)&v52[OBJC_IVAR____NSSwiftLocale_locale] = v93;
  v52[v53] = 2;
  CFArrayRef v54 = String._bridgeToObjectiveCImpl()();
  v95.receiver = v52;
  v95.super_class = v51;
  swift_unknownObjectRetain();
  unint64_t v55 = objc_msgSendSuper2(&v95, sel_initWithLocaleIdentifier_, v54);
  swift_unknownObjectRelease();
  swift_bridgeObjectRetain();
  BOOL v56 = v55;
  uint64_t v57 = swift_isUniquelyReferenced_nonNull_native();
  *(void *)&v97[0] = *(void *)(v4 + 72);
  uint8_t v58 = *(void *)&v97[0];
  *(void *)(v4 + 72) = 0x8000000000000000LL;
  char v60 = specialized __RawDictionaryStorage.find<A>(_:)(a1, a2);
  BOOL v61 = *(void *)(v58 + 16);
  unsigned __int8 v62 = (v59 & 1) == 0;
  BOOL v63 = v61 + v62;
  if (__OFADD__(v61, v62))
  {
    __break(1u);
  }

  else
  {
    LOBYTE(v3) = v59;
    if (*(void *)(v58 + 24) < v63)
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v63, v57);
      unint64_t v64 = *(void *)&v97[0];
      unint64_t v65 = specialized __RawDictionaryStorage.find<A>(_:)(a1, a2);
      if ((v3 & 1) != (v66 & 1)) {
        goto LABEL_106;
      }
      char v60 = v65;
      if ((v3 & 1) == 0)
      {
LABEL_98:
        specialized _NativeDictionary._insert(at:key:value:)(v60, a1, a2, v56, v64);
        swift_bridgeObjectRetain();
        goto LABEL_99;
      }

  __break(1u);
LABEL_54:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

          if ((POSIXErrorCode.init(rawValue:)() & 0x100000000LL) != 0)
          {
            *(void *)&unint64_t v86 = 0LL;
            *((void *)&v86 + 1) = 0xE000000000000000LL;
            _StringGuts.grow(_:)(22LL);
            swift_bridgeObjectRelease();
            *(void *)&unint64_t v86 = 0xD000000000000014LL;
            *((void *)&v86 + 1) = 0x80000001839C9190LL;
            v80._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
            String.append(_:)(v80);
            swift_bridgeObjectRelease();
            _assertionFailure(_:_:file:line:flags:)();
            __break(1u);
            JUMPOUT(0x183221374LL);
          }

          static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSPOSIXErrorDomain");
          unint64_t v70 = (int)POSIXErrorCode.rawValue.getter();
          uint64_t v71 = objc_allocWithZone((Class)&OBJC_CLASS___NSError);
          uint64_t v72 = String._bridgeToObjectiveCImpl()();
          swift_bridgeObjectRelease();
          Class v67 = objc_msgSend(v71, sel_initWithDomain_code_userInfo_, v72, v70, _NativeDictionary.bridged()());
          swift_unknownObjectRelease();
          swift_unknownObjectRelease();
          unint64_t v73 = objc_msgSend(v67, sel_domain);
          unint64_t v74 = static String._unconditionallyBridgeFromObjectiveC(_:)(v73);
          uint64_t v76 = v75;

          if (v74 == static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSPOSIXErrorDomain") && v76 == v77) {
            goto LABEL_60;
          }
          unint64_t v79 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if ((v79 & 1) == 0)
          {
            __break(1u);
LABEL_60:
            swift_bridgeObjectRelease_n();
          }

  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)(v1, v36);
  swift_bridgeObjectRelease();
LABEL_54:
  unint64_t v38 = *(void **)(v0 + 296);
  unint64_t v39 = *(void **)(v0 + 304);
  uint64_t v41 = *(void **)(v0 + 312);
  uint64_t v40 = *(void **)(v0 + 320);
  size_t v42 = *(void **)(v0 + 328);
  if (v38)
  {
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0LL);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( (unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef,  (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef,  (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
    unint64_t v43 = v39;
    unint64_t v44 = v41;
    uint64_t v45 = v40;
    char v46 = v42;
    int v47 = v38;
    _CFObject.hash(into:)();
    *(void *)(v0 + 80) = v38;
    if (v39) {
      goto LABEL_56;
    }
  }

  else
  {
    Hasher._combine(_:)(0);
    uint64_t v52 = v42;
    char v53 = v39;
    CFArrayRef v54 = v41;
    unint64_t v55 = v40;
    *(void *)(v0 + 80) = 0LL;
    if (v39)
    {
LABEL_56:
      Hasher._combine(_:)(1u);
      type metadata accessor for CFDictionaryRef(0LL);
      lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( (unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef,  (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef,  (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
      unsigned int v48 = v39;
      _CFObject.hash(into:)();

      if (v41) {
        goto LABEL_57;
      }
      goto LABEL_62;
    }
  }

  Hasher._combine(_:)(0);
  if (v41)
  {
LABEL_57:
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0LL);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( (unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef,  (uint64_t (*)(uint64_t))type metadata accessor for CFDictionaryRef,  (uint64_t)&protocol conformance descriptor for CFDictionaryRef);
    unint64_t v49 = v41;
    _CFObject.hash(into:)();

    if (v40) {
      goto LABEL_58;
    }
LABEL_63:
    Hasher._combine(_:)(0);
    if (v42) {
      goto LABEL_59;
    }
    goto LABEL_64;
  }

  swift_bridgeObjectRetain();
  char v26 = static String._tryFromUTF8(_:)();
  int v28 = v27;
  swift_bridgeObjectRelease_n();
  if (v28) {
    return (uint64_t (*)())v26;
  }
  else {
    return 0LL;
  }
}

    swift_bridgeObjectRelease();
    uint64_t result = v45;
    if ((v44 & 1) != 0) {
      goto LABEL_16;
    }
    goto LABEL_54;
  }

  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v21, isUniquelyReferenced_nonNull_native);
  char v22 = v49;
  uint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  if ((v11 & 1) != (v23 & 1))
  {
    KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    goto LABEL_12;
  }

  char v26 = 0LL;
LABEL_54:
  *a6 = v9;
  a6[1] = v25;
  a6[2] = v15;
  a6[3] = v8;
  a6[4] = v26;
  return result;
}

  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  BOOL v12 = v26 | (v27 << 8);
  char v8 = v32;
  BOOL v6 = v33;
LABEL_13:
  swift_unknownObjectRetain();
  specialized Rope._Node.distanceFromStart<A>(to:in:)(v9, v12, v13, v3, v8);
  uint64_t result = swift_unknownObjectRelease_n();
LABEL_14:
  if (v9 != v2[11]) {
    goto LABEL_60;
  }
  if (v13)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }

  else
  {
    unint64_t v14 = v2[8];
    swift_unknownObjectRetain();
    specialized Rope._Node.subscript.getter(v12, v14);
    swift_unknownObjectRelease();
  }

  swift_bridgeObjectRetain();
  char v15 = swift_bridgeObjectRetain();
  int v16 = specialized _NativeDictionary.filter(_:)(v15, v7, v6);
  swift_bridgeObjectRelease_n();
  return v16;
}

  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  char v9 = v23 | (v24 << 8);
  unint64_t v5 = v29;
LABEL_13:
  swift_unknownObjectRetain();
  specialized Rope._Node.distanceFromStart<A>(to:in:)(v6, v9, v10, v2, v5);
  uint64_t result = swift_unknownObjectRelease_n();
LABEL_14:
  if (v6 != v1[11]) {
    goto LABEL_60;
  }
  if (v10)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }

  else
  {
    BOOL v11 = v1[8];
    swift_unknownObjectRetain();
    specialized Rope._Node.subscript.getter(v9, v11);
    swift_unknownObjectRelease();
  }

  BOOL v12 = swift_bridgeObjectRetain();
  uint64_t v13 = specialized _NativeDictionary.filter(_:)(v12);
  swift_bridgeObjectRelease_n();
  return v13;
}

      __break(1u);
LABEL_54:
      __break(1u);
      goto LABEL_55;
    }
  }

  return result;
}

            if (v7-- < 1)
            {
              uint8_t v7 = 0LL;
            }

            else if ((v16 - 58) <= 0xF5u)
            {
              unint64_t v18 = 0;
            }

    __break(1u);
LABEL_54:
    __break(1u);
LABEL_55:
    __break(1u);
LABEL_56:
    __break(1u);
  }

  return result;
}

  v71.super.Class isa = v32;
  v71._delegate = v67;
  v71._weakDelegateValue = v69;
  _LogSpecialFolderRecreation(_:_:)(v71, *(Swift::String *)&v72);

  swift_bridgeObjectRelease();
  int v101 = MEMORY[0x18961AFF0];
  if (v10 == 1)
  {
    uint64_t v106 = MEMORY[0x189618740];
    v104._countAndFlagsBits = 448LL;
    unint64_t v79 = @"NSFilePosixPermissions";
  }

  else
  {
    if (v10 != 1032) {
      goto LABEL_58;
    }
    unint64_t v80 = MEMORY[0x189618740];
    uint64_t v106 = MEMORY[0x189618740];
    v104._countAndFlagsBits = 493LL;
    specialized Dictionary.subscript.setter((uint64_t)&v104, @"NSFilePosixPermissions");
    uint64_t v106 = v80;
    v104._countAndFlagsBits = 0LL;
    specialized Dictionary.subscript.setter((uint64_t)&v104, @"NSFileOwnerAccountID");
    uint64_t v106 = v80;
    v104._countAndFlagsBits = 80LL;
    unint64_t v79 = @"NSFileGroupOwnerAccountID";
  }

  specialized Dictionary.subscript.setter((uint64_t)&v104, v79);
LABEL_58:
  uint64_t v81 = MEMORY[0x186E20F44](v8);
  uint64_t v82 = v99;
  if (!v81) {
    goto LABEL_73;
  }
  int64_t v83 = (void *)v81;
  type metadata accessor for NSFileAttributeKey(0LL);
  lazy protocol witness table accessor for type NSFileAttributeKey and conformance NSFileAttributeKey();
  v84 = v82;
  unint64_t v85 = _NativeDictionary.bridged()();
  v104._countAndFlagsBits = 0LL;
  unint64_t v86 = objc_msgSend( v83,  sel_createDirectoryAtURL_withIntermediateDirectories_attributes_error_,  v84,  1,  v85,  &v104);

  swift_unknownObjectRelease();
  if ((v86 & 1) != 0)
  {
    uint64_t v87 = (id)v104._countAndFlagsBits;
    int v28 = v100._countAndFlagsBits;
    unint64_t v30 = v96;
    goto LABEL_61;
  }

  if (v104._countAndFlagsBits)
  {
    (id)v104._countAndFlagsBits;
  }

  else
  {
    if (one-time initialization token for _nilObjCError != -1) {
      swift_once();
    }
    uint64_t v88 = (id)_nilObjCError;
  }

  swift_willThrow();
  swift_release();
  swift_release();
}

      size_t v42 = v113;
      unint64_t v43 = v108;
      unint64_t v44 = v109;
      char v26 = v110;
      uint64_t v45 = v112;
      goto LABEL_49;
    }

    ++v25;
  }

  while (v23 < 100);
  if (v31 + 1 > 100) {
    unint64_t v23 = v31 + 1;
  }
  else {
    unint64_t v23 = 100LL;
  }
  v130[0] = v29;
  unint64_t v18 = v111;
  swift_unknownObjectRetain();
  outlined retain of DateComponents((uint64_t)v131);
  if (one-time initialization token for log != -1) {
    goto LABEL_56;
  }
LABEL_24:
  char v46 = (id)static Calendar.log;
  Logger.init(_:)();
  swift_unknownObjectRetain();
  outlined retain of DateComponents((uint64_t)v131);
  swift_unknownObjectRetain();
  outlined retain of DateComponents((uint64_t)v131);
  int v47 = (os_log_s *)Logger.logObject.getter();
  unsigned int v48 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v47, (os_log_type_t)v48))
  {
    v97 = v48;
    unint64_t v49 = swift_slowAlloc();
    uint64_t v95 = swift_slowAlloc();
    uint64_t v122 = v95;
    *(_DWORD *)unint64_t v49 = 134350338;
    *(void *)unint64_t v125 = v15;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    uint64_t v106 = v49;
    *(_WORD *)(v49 + 12) = 2082;
    *(void *)unint64_t v125 = 0LL;
    *(void *)&v125[8] = 0xE000000000000000LL;
    swift_unknownObjectRetain();
    _StringGuts.grow(_:)(72LL);
    ObjectType = swift_getObjectType();
    uint64_t v51 = v113;
    uint64_t v52 = *(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(v113 + 24);
    swift_unknownObjectRetain();
    v52(&v118, ObjectType, v51);
    swift_unknownObjectRelease();
    LOBYTE(v115) = v118;
    _print_unlocked<A, B>(_:_:)();
    v53._countAndFlagsBits = 10272LL;
    v53._object = (void *)0xE200000000000000LL;
    String.append(_:)(v53);
    *(void *)&uint64_t v118 = v18;
    *((void *)&v118 + 1) = v51;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _CalendarProtocol & Swift.AnyObject);
    _print_unlocked<A, B>(_:_:)();
    v54._countAndFlagsBits = 0x656C61636F6C2029LL;
    v54._object = (void *)0xEA0000000000203ALL;
    String.append(_:)(v54);
    unint64_t v55 = *(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(v51 + 32);
    swift_unknownObjectRetain();
    v55(&v118, ObjectType, v51);
    uint64_t v105 = v47;
    if ((void)v118)
    {
      BOOL v56 = *((void *)&v118 + 1);
      swift_unknownObjectRelease();
    }

    else
    {
      if (one-time initialization token for cache != -1) {
        swift_once();
      }
      uint64_t v57 = static LocaleCache.cache + 16;
      uint8_t v58 = (os_unfair_lock_s *)(static LocaleCache.cache + 124);
      swift_retain_n();
      os_unfair_lock_lock(v58);
      closure #1 in LocaleCache.fixed(_:)(v57, 0LL, 0xE000000000000000LL, &v115);
      if (v22)
      {
        outlined release of DateComponents((uint64_t)v131);
        swift_unknownObjectRelease();
        os_unfair_lock_unlock(v58);
        __break(1u);
        JUMPOUT(0x1835027D8LL);
      }

      os_unfair_lock_unlock(v58);
      swift_unknownObjectRelease();
      swift_release_n();
      BOOL v56 = *((void *)&v115 + 1);
    }

    uint8_t v59 = v106;
    v107 = (void *)(v106 + 14);
    char v60 = swift_getObjectType();
    BOOL v61 = (*(uint64_t (**)(uint64_t, uint64_t))(v56 + 64))(v60, v56);
    BOOL v63 = v62;
    swift_unknownObjectRelease();
    v64._countAndFlagsBits = v61;
    v64._object = v63;
    String.append(_:)(v64);
    swift_bridgeObjectRelease();
    v65._countAndFlagsBits = 0x6F7A20656D697420LL;
    v65._object = (void *)0xEC000000203A656ELL;
    String.append(_:)(v65);
    uint64_t v66 = v113;
    Class v67 = *(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(v113 + 48);
    swift_unknownObjectRetain();
    v67(&v118, ObjectType, v66);
    swift_unknownObjectRelease();
    unint64_t v68 = v118;
    swift_getObjectType();
    *(void *)&unint64_t v115 = v68;
    v69._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v69);
    swift_unknownObjectRelease();
    swift_bridgeObjectRelease();
    v70._countAndFlagsBits = 0x6557747372696620LL;
    v70._object = (void *)0xEF203A7961646B65LL;
    String.append(_:)(v70);
    uint64_t v71 = *(uint64_t (**)(uint64_t, uint64_t))(v66 + 56);
    swift_unknownObjectRetain();
    uint64_t v72 = v71(ObjectType, v66);
    swift_unknownObjectRelease();
    *(void *)&uint64_t v118 = v72;
    v73._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v73);
    swift_bridgeObjectRelease();
    v74._object = (void *)0x80000001839CCCC0LL;
    v74._countAndFlagsBits = 0xD000000000000015LL;
    String.append(_:)(v74);
    id v75 = *(uint64_t (**)(uint64_t, uint64_t))(v66 + 72);
    swift_unknownObjectRetain();
    uint64_t v76 = v75(ObjectType, v66);
    swift_unknownObjectRelease();
    *(void *)&uint64_t v118 = v76;
    v77._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v77);
    swift_unknownObjectRelease();
    swift_bridgeObjectRelease();
    *(void *)unint64_t v125 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)( *(uint64_t *)v125,  *(unint64_t *)&v125[8],  &v122);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_unknownObjectRelease_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v59 + 22) = 2082;
    memcpy(v125, v131, sizeof(v125));
    outlined retain of DateComponents((uint64_t)v131);
    int64_t v78 = v98;
    DateComponents.customMirror.getter(v98);
    unint64_t v79 = Mirror.children.getter();
    (*(void (**)(uint64_t, uint64_t))(v99 + 8))(v78, v100);
    unint64_t v80 = 0xE000000000000000LL;
    v120 = 0LL;
    v121 = 0xE000000000000000LL;
    swift_retain();
    uint64_t v81 = dispatch thunk of _AnySequenceBox._makeIterator()();
    swift_release();
    dispatch thunk of _AnyIteratorBoxBase.next()();
    if (*(void *)&v125[40])
    {
      id v100 = v79;
      v107 = (void *)(MEMORY[0x18961AFC0] + 8LL);
      do
      {
        uint64_t v118 = *(_OWORD *)v125;
        v119[0] = *(_OWORD *)&v125[16];
        v119[1] = *(_OWORD *)&v125[32];
        v117._countAndFlagsBits = 0LL;
        v117._object = (void *)0xE000000000000000LL;
        uint64_t v82 = *(void **)&v125[8];
        int64_t v83 = *(void *)v125;
        unint64_t v115 = *(_OWORD *)v125;
        outlined init with copy of Any((uint64_t)v119, (uint64_t)v116);
        if (!v82) {
          int64_t v83 = 0LL;
        }
        v84 = v81;
        if (v82) {
          unint64_t v85 = v82;
        }
        else {
          unint64_t v85 = (void *)0xE000000000000000LL;
        }
        swift_bridgeObjectRetain();
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v116);
        v86._countAndFlagsBits = v83;
        v86._object = v85;
        String.append(_:)(v86);
        uint64_t v81 = v84;
        swift_bridgeObjectRelease();
        v87._countAndFlagsBits = 8250LL;
        v87._object = (void *)0xE200000000000000LL;
        String.append(_:)(v87);
        _print_unlocked<A, B>(_:_:)();
        v88._countAndFlagsBits = 32LL;
        v88._object = (void *)0xE100000000000000LL;
        String.append(_:)(v88);
        String.append(_:)(v117);
        swift_bridgeObjectRelease();
        outlined destroy of Any?( (uint64_t)&v118,  &demangling cache variable for type metadata for (label: String?, value: Any));
        dispatch thunk of _AnyIteratorBoxBase.next()();
      }

      while (*(void *)&v125[40]);
      int64_t v89 = v120;
      unint64_t v80 = v121;
    }

    else
    {
      int64_t v89 = 0LL;
    }

    swift_release();
    swift_release();
    int64_t v90 = v106;
    outlined release of DateComponents((uint64_t)v131);
    *(void *)unint64_t v125 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v89, v80, &v122);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    outlined release of DateComponents((uint64_t)v131);
    outlined release of DateComponents((uint64_t)v131);
    *(_WORD *)(v90 + 32) = 2082;
    if (v112) {
      unint64_t v91 = 0x647261776B636162LL;
    }
    else {
      unint64_t v91 = 0x64726177726F66LL;
    }
    if (v112) {
      v92 = 0xE800000000000000LL;
    }
    else {
      v92 = 0xE700000000000000LL;
    }
    *(void *)unint64_t v125 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v91, v92, &v122);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v90 + 42) = 2082;
    __asm { BR              X9 }
  }

  swift_unknownObjectRelease_n();

  outlined release of DateComponents((uint64_t)v131);
  outlined release of DateComponents((uint64_t)v131);
  unint64_t v44 = v109;
  char v25 = v96;
  (*(void (**)(char *, uint64_t))(v101 + 8))(v103, v102);
  outlined release of DateComponents((uint64_t)v131);
  swift_unknownObjectRelease();
  unint64_t v29 = v130[0];
  LODWORD(v105) = v129;
  char v26 = v127;
  uint64_t v45 = v126;
  size_t v42 = v113;
  unint64_t v43 = v108;
LABEL_49:
  v125[0] = v29 & 1;
  unint64_t v93 = (char)v105;
  LOBYTE(v11_Block_object_dispose(va, 8) = (_BYTE)v105;
  *(void *)uint64_t v13 = v23;
  *(void *)(v13 + _Block_object_dispose(va, 8) = v5;
  *(_BYTE *)(v13 + 16) = v29 & 1;
  *(void *)(v13 + 24) = v4;
  *(double *)(v13 + 32) = v43;
  *(double *)(v13 + 40) = v44;
  *(_BYTE *)(v13 + 4_Block_object_dispose(va, 8) = v93;
  *(void *)(v13 + 56) = v15;
  *(void *)(v13 + 64) = v18;
  *(void *)(v13 + 72) = v42;
  memcpy((void *)(v13 + 80), v128, 0x11AuLL);
  *(_BYTE *)(v13 + 362) = v114;
  *(_BYTE *)(v13 + 363) = v26;
  *(_BYTE *)(v13 + 364) = v45;
  *(void *)(v13 + 36_Block_object_dispose(va, 8) = 100LL;
  *(_BYTE *)(v13 + 376) = 1;
  return v25;
}

          if (v69)
          {
            __break(1u);
LABEL_151:
            __break(1u);
LABEL_152:
            __break(1u);
            goto LABEL_153;
          }

  if ((v20 & 8) != 0) {
    objc_msgSend((id)a1, "_pushNamespaces:", v77, v24);
  }

  if (a7)
  {
    unint64_t v39 = 0LL;
    uint64_t v40 = 5 * a7;
    while (1)
    {
      uint64_t v41 = *(char **)(a9 + 8 * v39);
      if (v41) {
        break;
      }
LABEL_79:
      v39 += 5LL;
      if (v39 >= v40) {
        goto LABEL_80;
      }
    }

    size_t v42 = a9 + 8 * v39;
    unint64_t v43 = *(const void **)(v42 + 8);
    if (v43 && (unint64_t v44 = strlen(*(const char **)(v42 + 8))) != 0)
    {
      uint64_t v45 = v44;
      char v46 = strlen(v41);
      int v47 = _cachedColonSeparatedStringFromPrefixAndSuffix(v43, v45, v41, v46, a1);
    }

    else
    {
      unsigned int v48 = CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 64), v41);
      if (v48) {
        goto LABEL_64;
      }
      int v47 = __SlowPathNSXMLParserNSStringFromBytes(*(__CFDictionary **)(a1 + 64), v41);
    }

    unsigned int v48 = v47;
LABEL_64:
    unint64_t v49 = a9 + 8 * v39;
    char v50 = *(void *)(v49 + 24);
    if (v50 && (v51 = *(void *)(v49 + 32)) != 0 && (uint64_t v52 = v51 - v50, v51 != v50))
    {
      MEMORY[0x1895F8858](v52 + 1);
      unint64_t v55 = (char *)&v70 - v54;
      if (v52 >= 128) {
        unint64_t v55 = (char *)malloc(v53);
      }
      strncpy(v55, *(const char **)(v49 + 24), v52);
      v55[v52] = 0;
      BOOL v56 = (const __CFString *)CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 64), v55);
      if (!v56) {
        BOOL v56 = (const __CFString *)__SlowPathNSXMLParserNSStringFromBytes(*(__CFDictionary **)(a1 + 64), v55);
      }
      if (v56) {
        uint64_t v57 = v56;
      }
      else {
        uint64_t v57 = &stru_189CA6A28;
      }
      if (v52 >= 128) {
        free(v55);
      }
      int v20 = v76;
    }

    else
    {
      uint64_t v57 = &stru_189CA6A28;
    }

    *(void *)&v79[8 * v28] = v48;
    *(void *)&v78[8 * v28++] = v57;
    goto LABEL_79;
  }