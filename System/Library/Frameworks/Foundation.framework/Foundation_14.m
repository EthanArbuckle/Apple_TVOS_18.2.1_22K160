LABEL_257:
      __break(1u);
      return;
    }

uint64_t _FileManagerImpl.getRelationship(_:of:in:toItemAt:)(uint64_t a1, uint64_t a2, uint64_t a3, void **a4)
{
  uint64_t v5 = v4;
  v24[3] = *(id *)MEMORY[0x1895F89C0];
  v9 = *a4;
  uint64_t v10 = MEMORY[0x186E20F44](v4);
  if (!v10) {
    goto LABEL_22;
  }
  v11 = (void *)v10;
  if (a3) {
    id v12 = 0LL;
  }
  else {
    id v12 = v9;
  }
  v24[0] = 0LL;
  id v13 = objc_msgSend(v11, sel_URLForDirectory_inDomain_appropriateForURL_create_error_, a2, a3, v12, 0, v24);

  id v14 = v24[0];
  if (v13)
  {
    URL.init(reference:)(v13, v24);
    id v15 = v24[0];
    id v16 = v14;

    v17 = (void *)MEMORY[0x186E20F44](v5);
    if (v17)
    {
      v18 = v17;
      v24[0] = 0LL;
      unsigned __int8 v19 = objc_msgSend( v17,  sel_getRelationship_ofDirectoryAtURL_toItemAtURL_error_,  a1,  v15,  v9,  v24);

      if ((v19 & 1) != 0)
      {
        id v20 = v24[0];
      }

      else
      {
        if (v24[0])
        {
          v24[0];
        }

        else
        {
          if (one-time initialization token for _nilObjCError != -1) {
            swift_once();
          }
          id v23 = (id)_nilObjCError;
        }

        swift_willThrow();
      }

      swift_release();
      return swift_release();
    }

id _FileManagerImpl.createDirectory(at:withIntermediateDirectories:attributes:)( uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v4 = v3;
  LODWORD(v6) = a2;
  uint64_t v126 = *MEMORY[0x1895F89C0];
  v8 = *(void **)a1;
  v7 = *(void **)(a1 + 8);
  uint64_t v9 = *(void *)(a1 + 16);
  swift_retain();
  id v10 = v8;
  swift_retain();
  if (!_foundation_swift_url_feature_enabled())
  {
    uint64_t v120 = a3;
    unsigned __int8 v13 = objc_msgSend(v10, sel_isFileURL);
    swift_release();
    swift_release();

    if ((v13 & 1) != 0) {
      goto LABEL_10;
    }
    goto LABEL_14;
  }

  v124._uint64_t countAndFlagsBits = (uint64_t)v10;
  v124._unint64_t object = v7;
  uint64_t v125 = v9;
  URL.scheme.getter();
  if (!v11)
  {
    swift_release();
    swift_release();

    goto LABEL_14;
  }

  uint64_t v120 = a3;
  Swift::String v12 = String.lowercased()();
  swift_bridgeObjectRelease();
  if (v12._countAndFlagsBits == 1701603686 && v12._object == (void *)0xE400000000000000LL)
  {
    swift_release();
    swift_release();

    swift_bridgeObjectRelease();
    goto LABEL_10;
  }

  char v14 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_release();
  swift_release();

  swift_bridgeObjectRelease();
  if ((v14 & 1) == 0)
  {
LABEL_14:
    id v19 = v10;
    swift_retain_n();
    swift_retain_n();
    id v20 = v19;
    if (_foundation_swift_url_feature_enabled())
    {
      uint64_t v119 = v4;
      uint64_t v125 = v9;
      id v21 = v20;
      swift_retain();
      swift_retain();
      Swift::String v22 = URL.path(percentEncoded:)(1);
      uint64_t countAndFlagsBits = v22._countAndFlagsBits;
      Swift::String v124 = v22;
      swift_bridgeObjectRetain();
      if (String.count.getter() <= 1)
      {
        unint64_t object = (unint64_t)v22._object;
      }

      else
      {
        unint64_t object = (unint64_t)v22._object;
        if ((specialized BidirectionalCollection.last.getter(v22._countAndFlagsBits, (unint64_t)v22._object) & 0x1FF) == 0x2F)
        {
          specialized RangeReplaceableCollection<>.popLast()();
          swift_bridgeObjectRelease();
          uint64_t countAndFlagsBits = v124._countAndFlagsBits;
          unint64_t object = (unint64_t)v124._object;
        }
      }

      v122._uint64_t countAndFlagsBits = Set.init(minimumCapacity:)();
      uint64_t v49 = specialized Set._Variant.insert(_:)(&v123, 0x2FuLL);
      uint64_t v50 = v122._countAndFlagsBits;
      uint64_t v51 = HIBYTE(object) & 0xF;
      if ((object & 0x2000000000000000LL) == 0) {
        uint64_t v51 = countAndFlagsBits & 0xFFFFFFFFFFFFLL;
      }
      if (v51)
      {
        id v121 = v21;
        v122._uint64_t countAndFlagsBits = countAndFlagsBits;
        v122._unint64_t object = (void *)object;
        MEMORY[0x1895F8858](v49);
        uint64_t v114 = (uint64_t)&v122;
        uint64_t v115 = v50;
        swift_bridgeObjectRetain();
        specialized String.UTF8View.withContiguousStorageIfAvailable<A>(_:)( (void *(*)(__int128 *__return_ptr, void *, uint64_t))partial apply for specialized closure #1 in StringProtocol.removingURLPercentEncoding(excluding:),  (uint64_t)v113,  countAndFlagsBits,  object);
        if (v52 == 1)
        {
          unint64_t v54 = (unint64_t)v122._object;
          Swift::Int v53 = v122._countAndFlagsBits;
          swift_bridgeObjectRetain();
          specialized StringProtocol.removingURLPercentEncoding<A>(utf8Buffer:excluding:)(v53, v54, v50);
          swift_bridgeObjectRelease();
        }

        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        id v21 = v121;
      }

      else
      {
        swift_bridgeObjectRelease();
      }

      swift_release();
      swift_release();

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_release();
      swift_release();
    }

    else
    {
      id v25 = objc_msgSend(v20, sel__parameterString);
      if (v25)
      {
        v26 = v25;
        id v27 = static String._unconditionallyBridgeFromObjectiveC(_:)(v25);
        v29 = v28;

        if (getEnumTag for _DarwinSearchPathsSequence.Iterator.State()
          && (id v30 = objc_msgSend(v20, sel_path)) != 0)
        {
          v31 = v30;
          id v32 = static String._unconditionallyBridgeFromObjectiveC(_:)(v30);
          v34 = v33;

          v124._uint64_t countAndFlagsBits = (uint64_t)v32;
          v124._unint64_t object = v34;
          swift_bridgeObjectRetain();
          v35._uint64_t countAndFlagsBits = 59LL;
          v35._unint64_t object = (void *)0xE100000000000000LL;
          String.append(_:)(v35);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRetain();
          v36._uint64_t countAndFlagsBits = (uint64_t)v27;
          v36._unint64_t object = v29;
          String.append(_:)(v36);
          swift_release();
          swift_release();

          swift_bridgeObjectRelease();
        }

        else
        {
          v124._uint64_t countAndFlagsBits = 59LL;
          v124._unint64_t object = (void *)0xE100000000000000LL;
          v65._uint64_t countAndFlagsBits = (uint64_t)v27;
          v65._unint64_t object = v29;
          String.append(_:)(v65);
          swift_release();
          swift_release();
        }

        swift_bridgeObjectRelease();
      }

      else
      {
        id v66 = objc_msgSend(v20, sel_path);
        if (v66)
        {
          v67 = v66;
          static String._unconditionallyBridgeFromObjectiveC(_:)(v66);
          swift_release();
          swift_release();
        }

        else
        {
          swift_release();
          swift_release();
        }
      }
    }

    v74 = (void *)objc_opt_self();
    uint64_t v75 = String._bridgeToObjectiveCImpl()();
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
    id v76 = objc_msgSend( v74,  sel__cocoaErrorWithCode_path_url_underlying_variant_source_destination_,  518,  v75,  v20,  0,  0,  0,  0);
    goto LABEL_94;
  }

uint64_t _FileManagerImpl.currentDirectoryPath.getter()
{
  uint64_t v13 = *MEMORY[0x1895F89C0];
  outlined init with copy of _FileManagerImpl(v0, (uint64_t)v12);
  uint64_t isStackAllocationSafe = swift_stdlib_isStackAllocationSafe();
  if ((isStackAllocationSafe & 1) == 0)
  {
    uint64_t v6 = (char *)swift_slowAlloc();
    if (getcwd(v6, 0x402uLL))
    {
      v7 = (void *)MEMORY[0x186E20F44](v12);
      if (!v7) {
        goto LABEL_12;
      }
      v8 = v7;
      id v9 = objc_msgSend(v7, sel_stringWithFileSystemRepresentation_length_, v6, strlen(v6));

      id v5 = static String._unconditionallyBridgeFromObjectiveC(_:)(v9);
    }

    else
    {
      id v5 = 0LL;
    }

    MEMORY[0x186E20E60](v6, -1LL, -1LL);
    goto LABEL_11;
  }

  MEMORY[0x1895F8858](isStackAllocationSafe);
  if (!getcwd(v11, 0x402uLL))
  {
    id v5 = 0LL;
    goto LABEL_11;
  }

  v2 = (void *)MEMORY[0x186E20F44](v12);
  if (v2)
  {
    uint64_t v3 = v2;
    id v4 = objc_msgSend(v2, sel_stringWithFileSystemRepresentation_length_, v11, strlen(v11));

    id v5 = static String._unconditionallyBridgeFromObjectiveC(_:)(v4);
LABEL_11:
    outlined destroy of _FileManagerImpl((uint64_t)v12);
    return (uint64_t)v5;
  }

Swift::Void __swiftcall _LogSpecialFolderRecreation(_:_:)(NSFileManager a1, Swift::String a2)
{
  weakDelegateValue = a1._weakDelegateValue;
  delegate = a1._delegate;
  Class isa = a1.super.isa;
  uint64_t v5 = type metadata accessor for Logger();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1895F8858](v5);
  v8 = (char *)&v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  id v9 = objc_msgSend((id)objc_opt_self(), sel_standardUserDefaults);
  unsigned int v10 = objc_msgSend(v9, sel_BOOLForKey_, String._bridgeToObjectiveCImpl()());

  swift_unknownObjectRelease();
  if (v10)
  {
    unsigned __int8 v11 = -[objc_class fileExistsAtPath:]( isa,  sel_fileExistsAtPath_,  String._bridgeToObjectiveCImpl()());
    swift_unknownObjectRelease();
    if ((v11 & 1) == 0)
    {
      Logger.init()();
      swift_bridgeObjectRetain_n();
      Swift::String v12 = (os_log_s *)Logger.logObject.getter();
      os_log_type_t v13 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v12, v13))
      {
        uint64_t v14 = swift_slowAlloc();
        uint64_t v21 = swift_slowAlloc();
        uint64_t v24 = v21;
        *(_DWORD *)uint64_t v14 = 136315394;
        id v15 = objc_msgSend((id)objc_opt_self(), sel_mainBundle);
        id v16 = objc_msgSend(v15, sel_bundleIdentifier);

        Swift::String v22 = delegate;
        if (v16)
        {
          uint64_t v17 = (uint64_t)static String._unconditionallyBridgeFromObjectiveC(_:)(v16);
          unint64_t v19 = v18;
        }

        else
        {
          unint64_t v19 = 0xE600000000000000LL;
          uint64_t v17 = 0x296C6C756E28LL;
        }

        uint64_t v23 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v17, v19, &v24);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        *(_WORD *)(v14 + 12) = 2080;
        swift_bridgeObjectRetain();
        uint64_t v23 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)( (uint64_t)v22,  (unint64_t)weakDelegateValue,  &v24);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        _os_log_impl( &dword_182EB1000,  v12,  v13,  "*** Application: %s just recreated special folder: %s",  (uint8_t *)v14,  0x16u);
        uint64_t v20 = v21;
        swift_arrayDestroy();
        MEMORY[0x186E20E60](v20, -1LL, -1LL);
        MEMORY[0x186E20E60](v14, -1LL, -1LL);
      }

      else
      {

        swift_bridgeObjectRelease_n();
      }

      (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    }
  }

void closure #1 in _FileManagerImpl.createDirectory(atPath:withIntermediateDirectories:attributes:)( char *a1, uint64_t a2, unint64_t a3, char a4, uint64_t a5, uint64_t a6)
{
  uint64_t v230 = *MEMORY[0x1895F89C0];
  if (!a1)
  {
    swift_bridgeObjectRetain();
    specialized CocoaError.init<A>(_:path:underlying:variant:source:destination:)( (uint64_t (*)(void))0x200,  a2,  a3,  0LL,  0LL,  0LL,  0LL,  0LL,  (void *(*)(void *__return_ptr, void *, uint64_t))&v227,  0LL,  0LL);
    goto LABEL_40;
  }

  if ((a4 & 1) == 0)
  {
    if (mkdir(a1, 0x1FFu))
    {
      int v13 = MEMORY[0x186E1B0E8]();
      int v14 = v13;
      uint64_t v15 = 4LL;
      switch(v13)
      {
        case 1:
        case 13:
          uint64_t v15 = 513LL;
          goto LABEL_31;
        case 2:
          goto LABEL_31;
        case 3:
        case 4:
        case 5:
        case 6:
        case 7:
        case 8:
        case 9:
        case 10:
        case 11:
        case 12:
        case 14:
        case 15:
        case 16:
        case 18:
        case 19:
        case 20:
        case 21:
        case 22:
        case 23:
        case 24:
        case 25:
        case 26:
        case 27:
        case 29:
        case 31:
        case 32:
        case 33:
        case 34:
        case 35:
        case 36:
        case 37:
        case 38:
        case 39:
        case 40:
        case 41:
        case 42:
        case 43:
        case 44:
        case 45:
        case 46:
        case 47:
        case 48:
        case 49:
        case 50:
        case 51:
        case 52:
        case 53:
        case 54:
        case 55:
        case 56:
        case 57:
        case 58:
        case 59:
        case 60:
        case 61:
        case 62:
        case 64:
        case 65:
        case 66:
        case 67:
        case 68:
          goto LABEL_27;
        case 17:
          uint64_t v15 = 516LL;
          goto LABEL_31;
        case 28:
        case 69:
          uint64_t v15 = 640LL;
          goto LABEL_31;
        case 30:
          uint64_t v15 = 642LL;
          goto LABEL_31;
        case 63:
          uint64_t v15 = 514LL;
          goto LABEL_31;
        default:
          if (v13 == 102)
          {
            id v26 = 0LL;
            uint64_t v15 = 512LL;
LABEL_39:
            swift_bridgeObjectRetain();
            specialized CocoaError.init<A>(_:path:underlying:variant:source:destination:)( (uint64_t (*)(void))v15,  a2,  a3,  v26,  0LL,  0LL,  0LL,  0LL,  (void *(*)(void *__return_ptr, void *, uint64_t))&v227,  0LL,  0LL);
            goto LABEL_40;
          }

const char *closure #1 in _FileManagerImpl.changeCurrentDirectoryPath(_:)@<X0>( const char *result@<X0>, BOOL *a2@<X8>)
{
  if (result)
  {
    uint64_t result = (const char *)chdir(result);
    BOOL v3 = (_DWORD)result == 0;
  }

  else
  {
    BOOL v3 = 0;
  }

  *a2 = v3;
  return result;
}

uint64_t sub_1834DCCBC()
{
  return swift_deallocObject();
}

void *specialized AttributedString.Guts.getUniformValue<A>(in:key:)@<X0>( void *result@<X0>, uint64_t a2@<X8>)
{
  BOOL v3 = (void *)v2;
  uint64_t v162 = 0LL;
  __int128 v160 = 0u;
  __int128 v161 = 0u;
  __int128 v158 = 0u;
  __int128 v159 = 0u;
  uint64_t v4 = *result >> 11;
  uint64_t v5 = *(uint64_t **)(v2 + 64);
  uint64_t v6 = v3[10];
  if (v5) {
    uint64_t v7 = v3[10];
  }
  else {
    uint64_t v7 = 0LL;
  }
  if (v7 < v4)
  {
LABEL_356:
    __break(1u);
LABEL_357:
    __break(1u);
LABEL_358:
    __break(1u);
LABEL_359:
    __break(1u);
LABEL_360:
    __break(1u);
LABEL_361:
    __break(1u);
LABEL_362:
    __break(1u);
LABEL_363:
    __break(1u);
LABEL_364:
    __break(1u);
LABEL_365:
    __break(1u);
LABEL_366:
    __break(1u);
LABEL_367:
    __break(1u);
LABEL_368:
    __break(1u);
LABEL_369:
    __break(1u);
LABEL_370:
    __break(1u);
LABEL_371:
    __break(1u);
LABEL_372:
    __break(1u);
LABEL_373:
    __break(1u);
    goto LABEL_374;
  }

  unint64_t v8 = result[4];
  uint64_t v9 = v3[9];
  uint64_t v10 = v3[11];
  uint64_t v134 = *result >> 11;
  uint64_t v127 = a2;
  uint64_t v136 = v10;
  if (v5)
  {
    if (v4 < v6 && *((_WORD *)v5 + 8) != 0)
    {
      uint64_t v135 = v9;
      int64_t v137 = v8;
      uint64_t v9 = *((unsigned __int8 *)v5 + 18);
      if (*((_BYTE *)v5 + 18))
      {
        swift_unknownObjectRetain_n();
        uint64_t result = (void *)swift_retain_n();
        int64_t v14 = v4;
        uint64_t v109 = (uint64_t)v5;
        while (1)
        {
          unint64_t v111 = *(unsigned __int16 *)(v109 + 16);
          if (!*(_WORD *)(v109 + 16)) {
            goto LABEL_249;
          }
          uint64_t v112 = *(void *)(v109 + 40);
          BOOL v17 = __OFSUB__(v14, v112);
          int64_t v113 = v14 - v112;
          if (v17) {
            goto LABEL_339;
          }
          if (__OFADD__(v113, 1LL))
          {
LABEL_340:
            __break(1u);
LABEL_341:
            __break(1u);
LABEL_342:
            __break(1u);
LABEL_343:
            __break(1u);
LABEL_344:
            __break(1u);
LABEL_345:
            __break(1u);
LABEL_346:
            __break(1u);
LABEL_347:
            __break(1u);
LABEL_348:
            __break(1u);
LABEL_349:
            __break(1u);
LABEL_350:
            __break(1u);
            goto LABEL_351;
          }

          if (v113 + 1 <= 0)
          {
            unint64_t v111 = 0LL;
          }

          else
          {
            if ((_DWORD)v111 == 1) {
              goto LABEL_248;
            }
            uint64_t v114 = *(void *)(v109 + 64);
            int64_t v14 = v113 - v114;
            if (__OFSUB__(v113, v114)) {
              goto LABEL_354;
            }
            if (__OFADD__(v14, 1LL))
            {
LABEL_355:
              __break(1u);
              goto LABEL_356;
            }

            if (v14 + 1 < 1)
            {
              unint64_t v111 = 1LL;
              int64_t v14 = v113;
            }

            else
            {
              if ((_DWORD)v111 == 2) {
                goto LABEL_249;
              }
              uint64_t v115 = *(void *)(v109 + 88);
              BOOL v17 = __OFSUB__(v14, v115);
              int64_t v113 = v14 - v115;
              if (v17) {
                goto LABEL_368;
              }
              if (__OFADD__(v113, 1LL)) {
                goto LABEL_369;
              }
              if (v113 + 1 >= 1)
              {
                if ((_DWORD)v111 != 3)
                {
                  uint64_t v116 = 3LL;
                  if (v111 > 3) {
                    uint64_t v116 = *(unsigned __int16 *)(v109 + 16);
                  }
                  uint64_t v117 = (void *)(v109 + 112);
                  uint64_t v118 = 3LL;
                  while (1)
                  {
                    if (v116 == v118) {
                      goto LABEL_346;
                    }
                    int64_t v14 = v113 - *v117;
                    if (__OFSUB__(v113, *v117)) {
                      goto LABEL_347;
                    }
                    if (__OFADD__(v14, 1LL)) {
                      goto LABEL_348;
                    }
                    if (v14 + 1 < 1) {
                      break;
                    }
                    ++v118;
                    v117 += 3;
                    int64_t v113 = v14;
                    if (v111 == v118) {
                      goto LABEL_249;
                    }
                  }

                  unint64_t v111 = v118;
                  int64_t v14 = v113;
                  goto LABEL_250;
                }

LABEL_384:
                __break(1u);
LABEL_385:
                __break(1u);
LABEL_386:
                __break(1u);
                goto LABEL_387;
              }

              goto LABEL_186;
            }

            unint64_t v83 = 3LL;
            uint64_t v60 = v85;
          }
        }
      }

uint64_t specialized AttributedString.Guts.setAttributeValue<A>(_:forKey:in:)(char a1)
{
  uint64_t v2 = v1;
  uint64_t v16 = &type metadata for AttributeScopes.FoundationAttributes.ByteCountAttribute.Component;
  unint64_t v17 = lazy protocol witness table accessor for type AttributeScopes.FoundationAttributes.ByteCountAttribute.Component and conformance AttributeScopes.FoundationAttributes.ByteCountAttribute.Component();
  v15[0] = a1;
  __int128 v18 = xmmword_183723F60;
  char v19 = 1;
  uint64_t v20 = 0LL;
  __int128 v4 = *(_OWORD *)(v2 + 32);
  __int128 v26 = *(_OWORD *)(v2 + 16);
  __int128 v27 = v4;
  __int128 v28 = *(_OWORD *)(v2 + 48);
  BigString.unicodeScalars.getter();
  unint64_t v5 = BigString.UnicodeScalarView.index(roundingDown:)();
  outlined release of Locale((uint64_t)v21);
  __int128 v6 = *(_OWORD *)(v2 + 32);
  __int128 v23 = *(_OWORD *)(v2 + 16);
  __int128 v24 = v6;
  __int128 v25 = *(_OWORD *)(v2 + 48);
  BigString.unicodeScalars.getter();
  unint64_t v7 = BigString.UnicodeScalarView.index(roundingDown:)();
  outlined release of Locale((uint64_t)v22);
  uint64_t v8 = v5 >> 11;
  uint64_t v9 = v7 >> 11;
  v14[2] = 0xD00000000000001DLL;
  v14[3] = 0x80000001839C8100LL;
  v14[4] = v15;
  swift_retain();
  AttributedString._InternalRunsSlice.updateEach(with:)( (uint64_t)closure #1 in AttributedString.Guts.setAttributeValue(_:forKey:in:)partial apply,  (uint64_t)v14,  (void *)v2,  v5 >> 11,  v9);
  swift_release();
  uint64_t v10 = *((void *)&v18 + 1);
  if (*((void *)&v18 + 1) != 1LL)
  {
    uint64_t v11 = v18;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<AttributedString.AttributeRunBoundaries>);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_183720D90;
    *(void *)(inited + 32) = v11;
    *(void *)(inited + 40) = v10;
    swift_bridgeObjectRetain();
    AttributedString.Guts.enforceAttributeConstraintsAfterMutation(in:type:constraintsInvolved:)(v8, v9, 0, inited);
    swift_setDeallocating();
    swift_arrayDestroy();
  }

  return outlined destroy of AttributedString._AttributeValue((uint64_t)v15);
}

{
  uint64_t v1;
  uint64_t v2;
  char v3;
  __int128 v4;
  unint64_t v5;
  __int128 v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t inited;
  void v14[5];
  _BYTE v15[24];
  ValueMetadata *v16;
  unint64_t v17;
  __int128 v18;
  char v19;
  uint64_t v20;
  _BYTE v21[48];
  _BYTE v22[48];
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  uint64_t v2 = v1;
  BOOL v3 = a1 & 1;
  uint64_t v16 = &type metadata for AttributeScopes.FoundationAttributes.MeasurementAttribute.Component;
  unint64_t v17 = lazy protocol witness table accessor for type AttributeScopes.FoundationAttributes.MeasurementAttribute.Component and conformance AttributeScopes.FoundationAttributes.MeasurementAttribute.Component();
  v15[0] = v3;
  __int128 v18 = xmmword_183723F60;
  char v19 = 1;
  uint64_t v20 = 0LL;
  __int128 v4 = *(_OWORD *)(v2 + 32);
  __int128 v26 = *(_OWORD *)(v2 + 16);
  __int128 v27 = v4;
  __int128 v28 = *(_OWORD *)(v2 + 48);
  BigString.unicodeScalars.getter();
  unint64_t v5 = BigString.UnicodeScalarView.index(roundingDown:)();
  outlined release of Locale((uint64_t)v21);
  __int128 v6 = *(_OWORD *)(v2 + 32);
  __int128 v23 = *(_OWORD *)(v2 + 16);
  __int128 v24 = v6;
  __int128 v25 = *(_OWORD *)(v2 + 48);
  BigString.unicodeScalars.getter();
  unint64_t v7 = BigString.UnicodeScalarView.index(roundingDown:)();
  outlined release of Locale((uint64_t)v22);
  uint64_t v8 = v5 >> 11;
  uint64_t v9 = v7 >> 11;
  v14[2] = 0xD00000000000001FLL;
  v14[3] = 0x80000001839CC230LL;
  v14[4] = v15;
  swift_retain();
  AttributedString._InternalRunsSlice.updateEach(with:)( (uint64_t)closure #1 in AttributedString.Guts.setAttributeValue(_:forKey:in:)partial apply,  (uint64_t)v14,  (void *)v2,  v5 >> 11,  v9);
  swift_release();
  uint64_t v10 = *((void *)&v18 + 1);
  if (*((void *)&v18 + 1) != 1LL)
  {
    uint64_t v11 = v18;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<AttributedString.AttributeRunBoundaries>);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_183720D90;
    *(void *)(inited + 32) = v11;
    *(void *)(inited + 40) = v10;
    swift_bridgeObjectRetain();
    AttributedString.Guts.enforceAttributeConstraintsAfterMutation(in:type:constraintsInvolved:)(v8, v9, 0, inited);
    swift_setDeallocating();
    swift_arrayDestroy();
  }

  return outlined destroy of AttributedString._AttributeValue((uint64_t)v15);
}

{
  uint64_t v1;
  uint64_t v2;
  __int128 v4;
  unint64_t v5;
  __int128 v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t inited;
  void v14[5];
  _BYTE v15[24];
  ValueMetadata *v16;
  unint64_t v17;
  __int128 v18;
  char v19;
  uint64_t v20;
  _BYTE v21[48];
  _BYTE v22[48];
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  uint64_t v2 = v1;
  uint64_t v16 = &type metadata for AttributeScopes.FoundationAttributes.DurationFieldAttribute.Field;
  unint64_t v17 = lazy protocol witness table accessor for type AttributeScopes.FoundationAttributes.DurationFieldAttribute.Field and conformance AttributeScopes.FoundationAttributes.DurationFieldAttribute.Field();
  v15[0] = a1;
  __int128 v18 = xmmword_183723F60;
  char v19 = 1;
  uint64_t v20 = 0LL;
  __int128 v4 = *(_OWORD *)(v2 + 32);
  __int128 v26 = *(_OWORD *)(v2 + 16);
  __int128 v27 = v4;
  __int128 v28 = *(_OWORD *)(v2 + 48);
  BigString.unicodeScalars.getter();
  unint64_t v5 = BigString.UnicodeScalarView.index(roundingDown:)();
  outlined release of Locale((uint64_t)v21);
  __int128 v6 = *(_OWORD *)(v2 + 32);
  __int128 v23 = *(_OWORD *)(v2 + 16);
  __int128 v24 = v6;
  __int128 v25 = *(_OWORD *)(v2 + 48);
  BigString.unicodeScalars.getter();
  unint64_t v7 = BigString.UnicodeScalarView.index(roundingDown:)();
  outlined release of Locale((uint64_t)v22);
  uint64_t v8 = v5 >> 11;
  uint64_t v9 = v7 >> 11;
  v14[2] = 0xD000000000000021LL;
  v14[3] = 0x80000001839CDE70LL;
  v14[4] = v15;
  swift_retain();
  AttributedString._InternalRunsSlice.updateEach(with:)( (uint64_t)closure #1 in AttributedString.Guts.setAttributeValue(_:forKey:in:)partial apply,  (uint64_t)v14,  (void *)v2,  v5 >> 11,  v9);
  swift_release();
  uint64_t v10 = *((void *)&v18 + 1);
  if (*((void *)&v18 + 1) != 1LL)
  {
    uint64_t v11 = v18;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<AttributedString.AttributeRunBoundaries>);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_183720D90;
    *(void *)(inited + 32) = v11;
    *(void *)(inited + 40) = v10;
    swift_bridgeObjectRetain();
    AttributedString.Guts.enforceAttributeConstraintsAfterMutation(in:type:constraintsInvolved:)(v8, v9, 0, inited);
    swift_setDeallocating();
    swift_arrayDestroy();
  }

  return outlined destroy of AttributedString._AttributeValue((uint64_t)v15);
}

uint64_t specialized AttributedString.Guts.setAttributeValue<A>(_:forKey:in:)(uint64_t a1)
{
  uint64_t v2 = v1;
  v19[3] = &type metadata for AttributedString;
  v19[4] = lazy protocol witness table accessor for type AttributedString and conformance AttributedString();
  v19[0] = a1;
  __int128 v20 = xmmword_183723F60;
  char v21 = 1;
  uint64_t v22 = 0LL;
  uint64_t v4 = one-time initialization token for name;
  swift_retain();
  if (v4 != -1) {
    swift_once();
  }
  uint64_t v5 = qword_18C5D2C08;
  uint64_t v18 = static AttributeScopes.FoundationAttributes.InflectionAlternativeAttribute.name;
  __int128 v6 = *(_OWORD *)(v2 + 32);
  v24[6] = *(_OWORD *)(v2 + 16);
  v24[7] = v6;
  v24[8] = *(_OWORD *)(v2 + 48);
  BigString.unicodeScalars.getter();
  swift_bridgeObjectRetain();
  unint64_t v7 = BigString.UnicodeScalarView.index(roundingDown:)();
  outlined release of Locale((uint64_t)&v23);
  __int128 v8 = *(_OWORD *)(v2 + 32);
  v24[3] = *(_OWORD *)(v2 + 16);
  id v24[4] = v8;
  v24[5] = *(_OWORD *)(v2 + 48);
  BigString.unicodeScalars.getter();
  unint64_t v9 = BigString.UnicodeScalarView.index(roundingDown:)();
  uint64_t v10 = outlined release of Locale((uint64_t)v24);
  uint64_t v11 = v7 >> 11;
  uint64_t v12 = v9 >> 11;
  MEMORY[0x1895F8858](v10);
  v17[2] = v18;
  v17[3] = v5;
  v17[4] = v19;
  swift_retain();
  AttributedString._InternalRunsSlice.updateEach(with:)( (uint64_t)closure #1 in AttributedString.Guts.setAttributeValue(_:forKey:in:)partial apply,  (uint64_t)v17,  (void *)v2,  v7 >> 11,  v12);
  swift_release();
  uint64_t v13 = *((void *)&v20 + 1);
  if (*((void *)&v20 + 1) != 1LL)
  {
    uint64_t v14 = v20;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<AttributedString.AttributeRunBoundaries>);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_183720D90;
    *(void *)(inited + 32) = v14;
    *(void *)(inited + 40) = v13;
    swift_bridgeObjectRetain();
    AttributedString.Guts.enforceAttributeConstraintsAfterMutation(in:type:constraintsInvolved:)(v11, v12, 0, inited);
    swift_setDeallocating();
    swift_arrayDestroy();
  }

  swift_bridgeObjectRelease();
  return outlined destroy of AttributedString._AttributeValue((uint64_t)v19);
}

{
  _OWORD *v1;
  void *v2;
  __int128 v3;
  unint64_t v4;
  __int128 v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t inited;
  void v13[5];
  void v14[5];
  __int128 v15;
  char v16;
  uint64_t v17;
  _BYTE v18[48];
  _BYTE v19[48];
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  uint64_t v2 = v1;
  v14[4] = MEMORY[0x189618750];
  v14[3] = MEMORY[0x189618740];
  v14[0] = a1;
  unint64_t v15 = xmmword_183723F60;
  uint64_t v16 = 1;
  unint64_t v17 = 0LL;
  BOOL v3 = v1[2];
  uint64_t v23 = v1[1];
  __int128 v24 = v3;
  __int128 v25 = v1[3];
  BigString.unicodeScalars.getter();
  uint64_t v4 = BigString.UnicodeScalarView.index(roundingDown:)();
  outlined release of Locale((uint64_t)v18);
  uint64_t v5 = v1[2];
  __int128 v20 = v1[1];
  char v21 = v5;
  uint64_t v22 = v1[3];
  BigString.unicodeScalars.getter();
  __int128 v6 = BigString.UnicodeScalarView.index(roundingDown:)();
  outlined release of Locale((uint64_t)v19);
  unint64_t v7 = v4 >> 11;
  __int128 v8 = v6 >> 11;
  v13[2] = 0xD000000000000012LL;
  v13[3] = 0x80000001839C8020LL;
  v13[4] = v14;
  swift_retain();
  AttributedString._InternalRunsSlice.updateEach(with:)( (uint64_t)closure #1 in AttributedString.Guts.setAttributeValue(_:forKey:in:)partial apply,  (uint64_t)v13,  v2,  v4 >> 11,  v8);
  swift_release();
  unint64_t v9 = *((void *)&v15 + 1);
  if (*((void *)&v15 + 1) != 1LL)
  {
    uint64_t v10 = v15;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<AttributedString.AttributeRunBoundaries>);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_183720D90;
    *(void *)(inited + 32) = v10;
    *(void *)(inited + 40) = v9;
    swift_bridgeObjectRetain();
    AttributedString.Guts.enforceAttributeConstraintsAfterMutation(in:type:constraintsInvolved:)(v7, v8, 0, inited);
    swift_setDeallocating();
    swift_arrayDestroy();
  }

  return outlined destroy of AttributedString._AttributeValue((uint64_t)v14);
}

{
  _OWORD *v1;
  void *v2;
  uint64_t v3;
  __int128 v4;
  unint64_t v5;
  __int128 v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t inited;
  void v15[6];
  uint64_t v16;
  void v17[5];
  __int128 v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  _OWORD v22[10];
  uint64_t v2 = v1;
  v17[3] = MEMORY[0x189618740];
  v17[4] = MEMORY[0x189618750];
  v17[0] = a1;
  uint64_t v18 = xmmword_183723F60;
  char v19 = 1;
  __int128 v20 = 0LL;
  if (one-time initialization token for name != -1) {
    swift_once();
  }
  BOOL v3 = qword_18C5D2B98;
  uint64_t v16 = static AttributeScopes.FoundationAttributes.ReferentConceptAttribute.name;
  uint64_t v4 = v1[2];
  v22[6] = v1[1];
  v22[7] = v4;
  v22[8] = v1[3];
  BigString.unicodeScalars.getter();
  swift_bridgeObjectRetain();
  uint64_t v5 = BigString.UnicodeScalarView.index(roundingDown:)();
  outlined release of Locale((uint64_t)&v21);
  __int128 v6 = v1[2];
  v22[3] = v1[1];
  v22[4] = v6;
  v22[5] = v1[3];
  BigString.unicodeScalars.getter();
  unint64_t v7 = BigString.UnicodeScalarView.index(roundingDown:)();
  __int128 v8 = outlined release of Locale((uint64_t)v22);
  unint64_t v9 = v5 >> 11;
  uint64_t v10 = v7 >> 11;
  MEMORY[0x1895F8858](v8);
  v15[2] = v16;
  v15[3] = v3;
  v15[4] = v17;
  swift_retain();
  AttributedString._InternalRunsSlice.updateEach(with:)( (uint64_t)closure #1 in AttributedString.Guts.setAttributeValue(_:forKey:in:)partial apply,  (uint64_t)v15,  v2,  v5 >> 11,  v10);
  swift_release();
  uint64_t v11 = *((void *)&v18 + 1);
  if (*((void *)&v18 + 1) != 1LL)
  {
    uint64_t v12 = v18;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<AttributedString.AttributeRunBoundaries>);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_183720D90;
    *(void *)(inited + 32) = v12;
    *(void *)(inited + 40) = v11;
    swift_bridgeObjectRetain();
    AttributedString.Guts.enforceAttributeConstraintsAfterMutation(in:type:constraintsInvolved:)(v9, v10, 0, inited);
    swift_setDeallocating();
    swift_arrayDestroy();
  }

  swift_bridgeObjectRelease();
  return outlined destroy of AttributedString._AttributeValue((uint64_t)v17);
}

{
  _OWORD *v1;
  void *v2;
  uint64_t v3;
  __int128 v4;
  unint64_t v5;
  __int128 v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t inited;
  void v15[6];
  uint64_t v16;
  void v17[5];
  __int128 v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  _OWORD v22[10];
  uint64_t v2 = v1;
  v17[3] = MEMORY[0x189618740];
  v17[4] = MEMORY[0x189618750];
  v17[0] = a1;
  uint64_t v18 = xmmword_183723F60;
  char v19 = 1;
  __int128 v20 = 0LL;
  if (one-time initialization token for name != -1) {
    swift_once();
  }
  BOOL v3 = qword_18C5D2BB8;
  uint64_t v16 = static AttributeScopes.FoundationAttributes.AgreementArgumentAttribute.name;
  uint64_t v4 = v1[2];
  v22[6] = v1[1];
  v22[7] = v4;
  v22[8] = v1[3];
  BigString.unicodeScalars.getter();
  swift_bridgeObjectRetain();
  uint64_t v5 = BigString.UnicodeScalarView.index(roundingDown:)();
  outlined release of Locale((uint64_t)&v21);
  __int128 v6 = v1[2];
  v22[3] = v1[1];
  v22[4] = v6;
  v22[5] = v1[3];
  BigString.unicodeScalars.getter();
  unint64_t v7 = BigString.UnicodeScalarView.index(roundingDown:)();
  __int128 v8 = outlined release of Locale((uint64_t)v22);
  unint64_t v9 = v5 >> 11;
  uint64_t v10 = v7 >> 11;
  MEMORY[0x1895F8858](v8);
  v15[2] = v16;
  v15[3] = v3;
  v15[4] = v17;
  swift_retain();
  AttributedString._InternalRunsSlice.updateEach(with:)( (uint64_t)closure #1 in AttributedString.Guts.setAttributeValue(_:forKey:in:)partial apply,  (uint64_t)v15,  v2,  v5 >> 11,  v10);
  swift_release();
  uint64_t v11 = *((void *)&v18 + 1);
  if (*((void *)&v18 + 1) != 1LL)
  {
    uint64_t v12 = v18;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<AttributedString.AttributeRunBoundaries>);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_183720D90;
    *(void *)(inited + 32) = v12;
    *(void *)(inited + 40) = v11;
    swift_bridgeObjectRetain();
    AttributedString.Guts.enforceAttributeConstraintsAfterMutation(in:type:constraintsInvolved:)(v9, v10, 0, inited);
    swift_setDeallocating();
    swift_arrayDestroy();
  }

  swift_bridgeObjectRelease();
  return outlined destroy of AttributedString._AttributeValue((uint64_t)v17);
}

{
  _OWORD *v1;
  void *v2;
  uint64_t v3;
  __int128 v4;
  unint64_t v5;
  __int128 v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t inited;
  void v15[6];
  uint64_t v16;
  void v17[5];
  __int128 v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  _OWORD v22[10];
  uint64_t v2 = v1;
  v17[3] = MEMORY[0x189618740];
  v17[4] = MEMORY[0x189618750];
  v17[0] = a1;
  uint64_t v18 = xmmword_183723F60;
  char v19 = 1;
  __int128 v20 = 0LL;
  if (one-time initialization token for name != -1) {
    swift_once();
  }
  BOOL v3 = qword_18C5D2BA8;
  uint64_t v16 = static AttributeScopes.FoundationAttributes.AgreementConceptAttribute.name;
  uint64_t v4 = v1[2];
  v22[6] = v1[1];
  v22[7] = v4;
  v22[8] = v1[3];
  BigString.unicodeScalars.getter();
  swift_bridgeObjectRetain();
  uint64_t v5 = BigString.UnicodeScalarView.index(roundingDown:)();
  outlined release of Locale((uint64_t)&v21);
  __int128 v6 = v1[2];
  v22[3] = v1[1];
  v22[4] = v6;
  v22[5] = v1[3];
  BigString.unicodeScalars.getter();
  unint64_t v7 = BigString.UnicodeScalarView.index(roundingDown:)();
  __int128 v8 = outlined release of Locale((uint64_t)v22);
  unint64_t v9 = v5 >> 11;
  uint64_t v10 = v7 >> 11;
  MEMORY[0x1895F8858](v8);
  v15[2] = v16;
  v15[3] = v3;
  v15[4] = v17;
  swift_retain();
  AttributedString._InternalRunsSlice.updateEach(with:)( (uint64_t)closure #1 in AttributedString.Guts.setAttributeValue(_:forKey:in:)partial apply,  (uint64_t)v15,  v2,  v5 >> 11,  v10);
  swift_release();
  uint64_t v11 = *((void *)&v18 + 1);
  if (*((void *)&v18 + 1) != 1LL)
  {
    uint64_t v12 = v18;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<AttributedString.AttributeRunBoundaries>);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_183720D90;
    *(void *)(inited + 32) = v12;
    *(void *)(inited + 40) = v11;
    swift_bridgeObjectRetain();
    AttributedString.Guts.enforceAttributeConstraintsAfterMutation(in:type:constraintsInvolved:)(v9, v10, 0, inited);
    swift_setDeallocating();
    swift_arrayDestroy();
  }

  swift_bridgeObjectRelease();
  return outlined destroy of AttributedString._AttributeValue((uint64_t)v17);
}

uint64_t specialized AttributedString.Guts.setAttributeValue<A>(_:forKey:in:)(_OWORD *a1)
{
  uint64_t v2 = v1;
  v22[3] = &type metadata for AttributedString.MarkdownSourcePosition;
  v22[4] = lazy protocol witness table accessor for type AttributedString.MarkdownSourcePosition and conformance AttributedString.MarkdownSourcePosition();
  uint64_t v4 = (_OWORD *)swift_allocObject();
  v22[0] = v4;
  __int128 v5 = a1[5];
  v4[5] = a1[4];
  v4[6] = v5;
  *(_OWORD *)((char *)v4 + 105) = *(_OWORD *)((char *)a1 + 89);
  __int128 v6 = a1[1];
  v4[1] = *a1;
  v4[2] = v6;
  __int128 v7 = a1[3];
  v4[3] = a1[2];
  v4[4] = v7;
  __int128 v23 = xmmword_183723F60;
  char v24 = 1;
  uint64_t v25 = 0LL;
  if (one-time initialization token for name != -1) {
    swift_once();
  }
  uint64_t v8 = qword_18C5D2C38;
  uint64_t v21 = static AttributeScopes.FoundationAttributes.MarkdownSourcePositionAttribute.name;
  __int128 v9 = *(_OWORD *)(v2 + 32);
  v27[6] = *(_OWORD *)(v2 + 16);
  v27[7] = v9;
  v27[8] = *(_OWORD *)(v2 + 48);
  BigString.unicodeScalars.getter();
  swift_bridgeObjectRetain();
  unint64_t v10 = BigString.UnicodeScalarView.index(roundingDown:)();
  outlined release of Locale((uint64_t)&v26);
  __int128 v11 = *(_OWORD *)(v2 + 32);
  v27[3] = *(_OWORD *)(v2 + 16);
  v27[4] = v11;
  v27[5] = *(_OWORD *)(v2 + 48);
  BigString.unicodeScalars.getter();
  unint64_t v12 = BigString.UnicodeScalarView.index(roundingDown:)();
  uint64_t v13 = outlined release of Locale((uint64_t)v27);
  uint64_t v14 = v10 >> 11;
  uint64_t v15 = v12 >> 11;
  MEMORY[0x1895F8858](v13);
  v20[2] = v21;
  v20[3] = v8;
  v20[4] = v22;
  swift_retain();
  AttributedString._InternalRunsSlice.updateEach(with:)( (uint64_t)closure #1 in AttributedString.Guts.setAttributeValue(_:forKey:in:)partial apply,  (uint64_t)v20,  (void *)v2,  v10 >> 11,  v15);
  swift_release();
  uint64_t v16 = *((void *)&v23 + 1);
  if (*((void *)&v23 + 1) != 1LL)
  {
    uint64_t v17 = v23;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<AttributedString.AttributeRunBoundaries>);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_183720D90;
    *(void *)(inited + 32) = v17;
    *(void *)(inited + 40) = v16;
    swift_bridgeObjectRetain();
    AttributedString.Guts.enforceAttributeConstraintsAfterMutation(in:type:constraintsInvolved:)(v14, v15, 0, inited);
    swift_setDeallocating();
    swift_arrayDestroy();
  }

  swift_bridgeObjectRelease();
  return outlined destroy of AttributedString._AttributeValue((uint64_t)v22);
}

uint64_t specialized AttributedString.Guts.setAttributeValue<A>(_:forKey:in:)()
{
  uint64_t v1 = v0;
  v16[3] = &type metadata for AttributeScopes.FoundationAttributes.LocalizedNumberFormatAttribute.Value;
  v16[4] = lazy protocol witness table accessor for type AttributeScopes.FoundationAttributes.LocalizedNumberFormatAttribute.Value and conformance AttributeScopes.FoundationAttributes.LocalizedNumberFormatAttribute.Value();
  __int128 v17 = xmmword_183723F60;
  char v18 = 1;
  uint64_t v19 = 0LL;
  if (one-time initialization token for name != -1) {
    swift_once();
  }
  uint64_t v2 = qword_18C5D2BF8;
  uint64_t v15 = static AttributeScopes.FoundationAttributes.LocalizedNumberFormatAttribute.name;
  __int128 v3 = v0[2];
  v21[6] = v0[1];
  v21[7] = v3;
  v21[8] = v0[3];
  BigString.unicodeScalars.getter();
  swift_bridgeObjectRetain();
  unint64_t v4 = BigString.UnicodeScalarView.index(roundingDown:)();
  outlined release of Locale((uint64_t)&v20);
  __int128 v5 = v0[2];
  v21[3] = v0[1];
  v21[4] = v5;
  v21[5] = v0[3];
  BigString.unicodeScalars.getter();
  unint64_t v6 = BigString.UnicodeScalarView.index(roundingDown:)();
  uint64_t v7 = outlined release of Locale((uint64_t)v21);
  uint64_t v8 = v4 >> 11;
  uint64_t v9 = v6 >> 11;
  MEMORY[0x1895F8858](v7);
  v14[2] = v15;
  v14[3] = v2;
  v14[4] = v16;
  swift_retain();
  AttributedString._InternalRunsSlice.updateEach(with:)( (uint64_t)closure #1 in AttributedString.Guts.setAttributeValue(_:forKey:in:)partial apply,  (uint64_t)v14,  v1,  v4 >> 11,  v9);
  swift_release();
  uint64_t v10 = *((void *)&v17 + 1);
  if (*((void *)&v17 + 1) != 1LL)
  {
    uint64_t v11 = v17;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<AttributedString.AttributeRunBoundaries>);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_183720D90;
    *(void *)(inited + 32) = v11;
    *(void *)(inited + 40) = v10;
    swift_bridgeObjectRetain();
    AttributedString.Guts.enforceAttributeConstraintsAfterMutation(in:type:constraintsInvolved:)(v8, v9, 0, inited);
    swift_setDeallocating();
    swift_arrayDestroy();
  }

  swift_bridgeObjectRelease();
  return outlined destroy of AttributedString._AttributeValue((uint64_t)v16);
}

uint64_t specialized AttributedString.Guts.setAttributeValue<A>(_:forKey:in:)( uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v26 = &type metadata for InflectionRule;
  unint64_t v27 = lazy protocol witness table accessor for type InflectionRule and conformance InflectionRule();
  v23[0] = a1;
  v23[1] = a2;
  char v25 = BYTE4(a3);
  int v24 = a3;
  __int128 v28 = xmmword_183723F60;
  char v29 = 1;
  uint64_t v30 = 0LL;
  uint64_t v8 = one-time initialization token for name;
  swift_bridgeObjectRetain();
  if (v8 != -1) {
    swift_once();
  }
  uint64_t v9 = qword_18C5D2BD8;
  uint64_t v22 = static AttributeScopes.FoundationAttributes.InflectionRuleAttribute.name;
  __int128 v10 = *(_OWORD *)(v4 + 32);
  v32[6] = *(_OWORD *)(v4 + 16);
  v32[7] = v10;
  v32[8] = *(_OWORD *)(v4 + 48);
  BigString.unicodeScalars.getter();
  swift_bridgeObjectRetain();
  unint64_t v11 = BigString.UnicodeScalarView.index(roundingDown:)();
  outlined release of Locale((uint64_t)&v31);
  __int128 v12 = *(_OWORD *)(v4 + 32);
  v32[3] = *(_OWORD *)(v4 + 16);
  v32[4] = v12;
  v32[5] = *(_OWORD *)(v4 + 48);
  BigString.unicodeScalars.getter();
  unint64_t v13 = BigString.UnicodeScalarView.index(roundingDown:)();
  uint64_t v14 = outlined release of Locale((uint64_t)v32);
  uint64_t v15 = v11 >> 11;
  uint64_t v16 = v13 >> 11;
  MEMORY[0x1895F8858](v14);
  v21[2] = v22;
  v21[3] = v9;
  v21[4] = v23;
  swift_retain();
  AttributedString._InternalRunsSlice.updateEach(with:)( (uint64_t)partial apply for closure #1 in AttributedString.Guts.setAttributeValue(_:forKey:in:),  (uint64_t)v21,  (void *)v4,  v11 >> 11,  v16);
  swift_release();
  uint64_t v17 = *((void *)&v28 + 1);
  if (*((void *)&v28 + 1) != 1LL)
  {
    uint64_t v18 = v28;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<AttributedString.AttributeRunBoundaries>);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_183720D90;
    *(void *)(inited + 32) = v18;
    *(void *)(inited + 40) = v17;
    swift_bridgeObjectRetain();
    AttributedString.Guts.enforceAttributeConstraintsAfterMutation(in:type:constraintsInvolved:)(v15, v16, 0, inited);
    swift_setDeallocating();
    swift_arrayDestroy();
  }

  swift_bridgeObjectRelease();
  return outlined destroy of AttributedString._AttributeValue((uint64_t)v23);
}

double specialized AttributedString._AttributeStorage.subscript.getter@<D0>( uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  if (one-time initialization token for name == -1)
  {
    if (*(void *)(a1 + 16)) {
      goto LABEL_3;
    }
LABEL_8:
    uint64_t v14 = 0LL;
    __int128 v12 = 0u;
    __int128 v13 = 0u;
    __int128 v10 = 0u;
    __int128 v11 = 0u;
    goto LABEL_9;
  }

  swift_once();
  if (!*(void *)(a1 + 16)) {
    goto LABEL_8;
  }
LABEL_3:
  uint64_t v4 = qword_18C5D2BD8;
  uint64_t v5 = static AttributeScopes.FoundationAttributes.InflectionRuleAttribute.name;
  swift_bridgeObjectRetain();
  unint64_t v6 = specialized __RawDictionaryStorage.find<A>(_:)(v5, v4);
  if ((v7 & 1) != 0)
  {
    outlined init with copy of AttributedString._AttributeValue(*(void *)(a1 + 56) + 72 * v6, (uint64_t)&v10);
    swift_bridgeObjectRelease();
    if (*((void *)&v11 + 1))
    {
      outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>( (uint64_t)&v10,  (uint64_t)v9);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Hashable & Sendable);
      swift_dynamicCast();
      outlined destroy of AttributedString._AttributeValue((uint64_t)&v10);
      return result;
    }
  }

  else
  {
    uint64_t v14 = 0LL;
    __int128 v12 = 0u;
    __int128 v13 = 0u;
    __int128 v10 = 0u;
    __int128 v11 = 0u;
    swift_bridgeObjectRelease();
  }

{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char v7;
  double result;
  _BYTE v9[40];
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  if (one-time initialization token for name == -1)
  {
    if (*(void *)(a1 + 16)) {
      goto LABEL_3;
    }
LABEL_8:
    uint64_t v14 = 0LL;
    __int128 v12 = 0u;
    __int128 v13 = 0u;
    __int128 v10 = 0u;
    __int128 v11 = 0u;
    goto LABEL_9;
  }

  swift_once();
  if (!*(void *)(a1 + 16)) {
    goto LABEL_8;
  }
LABEL_3:
  uint64_t v4 = qword_18C5D2C38;
  uint64_t v5 = static AttributeScopes.FoundationAttributes.MarkdownSourcePositionAttribute.name;
  swift_bridgeObjectRetain();
  unint64_t v6 = specialized __RawDictionaryStorage.find<A>(_:)(v5, v4);
  if ((v7 & 1) != 0)
  {
    outlined init with copy of AttributedString._AttributeValue(*(void *)(a1 + 56) + 72 * v6, (uint64_t)&v10);
    swift_bridgeObjectRelease();
    if (*((void *)&v11 + 1))
    {
      outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>( (uint64_t)&v10,  (uint64_t)v9);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Hashable & Sendable);
      swift_dynamicCast();
      outlined destroy of AttributedString._AttributeValue((uint64_t)&v10);
      *(_BYTE *)(a2 + 105) = 0;
      return result;
    }
  }

  else
  {
    uint64_t v14 = 0LL;
    __int128 v12 = 0u;
    __int128 v13 = 0u;
    __int128 v10 = 0u;
    __int128 v11 = 0u;
    swift_bridgeObjectRelease();
  }

uint64_t specialized AttributedString.Runs.AttributesSlice1.subscript.getter( void *a1, _OWORD *a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  unint64_t v9 = a3;
  unint64_t v166 = a1;
  __int128 v11 = v6[9];
  __int128 v12 = v6[11];
  __int128 v253 = v6[10];
  __int128 v254 = v12;
  __int128 v13 = v6[5];
  __int128 v14 = v6[7];
  __int128 v249 = v6[6];
  __int128 v250 = v14;
  __int128 v16 = v6[7];
  __int128 v15 = v6[8];
  __int128 v17 = v15;
  __int128 v252 = v6[9];
  __int128 v251 = v15;
  __int128 v18 = v6[1];
  __int128 v19 = v6[3];
  __int128 v245 = v6[2];
  __int128 v246 = v19;
  __int128 v21 = v6[3];
  __int128 v20 = v6[4];
  __int128 v22 = v20;
  __int128 v248 = v6[5];
  __int128 v247 = v20;
  __int128 v23 = *v6;
  __int128 v24 = *v6;
  v244[1] = v6[1];
  v244[0] = v23;
  __int128 v25 = v6[11];
  __int128 v230 = v253;
  __int128 v231 = v25;
  __int128 v226 = v249;
  __int128 v227 = v16;
  __int128 v228 = v17;
  __int128 v229 = v11;
  __int128 v223 = v245;
  __int128 v224 = v21;
  v225[0] = v22;
  v225[1] = v13;
  uint64_t v26 = *((void *)v6 + 25);
  uint64_t v255 = *((void *)v6 + 24);
  uint64_t v27 = *((void *)v6 + 26);
  uint64_t v232 = *((void *)v6 + 24);
  __int128 v221 = v24;
  __int128 v222 = v18;
  *(void *)&__int128 v211 = a3;
  uint64_t v184 = a4;
  *(void *)&__int128 v185 = a5;
  *((void *)&v211 + 1) = a4;
  *(void *)&__int128 v212 = a5;
  *((void *)&v185 + 1) = a6;
  *((void *)&v212 + 1) = a6;
  outlined retain of AttributedString.Runs((uint64_t)v244);
  uint64_t v190 = v26;
  AttributedString.Runs._slicedRunBoundary(roundingDown:attributeNames:constraints:)( (unint64_t)&v216,  (unint64_t *)&v211,  v26,  v27,  (uint64_t *)&v236);
  __int128 v28 = v236;
  unint64_t v29 = v237;
  outlined release of AttributedString.Runs((uint64_t)v244);
  if (v9 >> 10 < *((void *)&v251 + 1) >> 10 || v9 >> 10 >= *((void *)&v253 + 1) >> 10)
  {
LABEL_221:
    __break(1u);
    goto LABEL_222;
  }

  uint64_t v7 = *(void *)(v190 + 16);
  if (!v7)
  {
LABEL_222:
    __break(1u);
LABEL_223:
    __break(1u);
    goto LABEL_224;
  }

  unint64_t v164 = v29;
  uint64_t v165 = v28;
  unint64_t v163 = a2;
  unint64_t v29 = *(void *)(*(void *)&v244[0] + 64LL);
  int64_t v30 = *(void *)(*(void *)&v244[0] + 80LL);
  int64_t v31 = v9 >> 11;
  if (v29) {
    int64_t v32 = *(void *)(*(void *)&v244[0] + 80LL);
  }
  else {
    int64_t v32 = 0LL;
  }
  if (v32 < v31) {
    goto LABEL_223;
  }
  unint64_t v161 = *((void *)&v28 + 1);
  uint64_t v33 = *(void *)(*(void *)&v244[0] + 72LL);
  uint64_t v188 = *(void *)&v244[0];
  uint64_t v189 = v7;
  uint64_t v34 = *(void *)(*(void *)&v244[0] + 88LL);
  uint64_t v186 = v27;
  unint64_t v180 = v9;
  __int128 v162 = v216;
  __int128 v160 = v217;
  unint64_t v174 = v9 >> 10;
  unint64_t v170 = *((void *)&v253 + 1) >> 10;
  unint64_t v171 = *((void *)&v253 + 1);
  uint64_t v168 = *((void *)&v254 + 1);
  uint64_t v169 = v254;
  uint64_t v167 = v255;
  unint64_t v199 = v33;
  if (!v29 || v31 >= v30 || !*(_WORD *)(v29 + 16))
  {
    swift_unknownObjectRetain();
    outlined retain of AttributedString.Runs((uint64_t)v244);
    unint64_t v48 = swift_unknownObjectRetain();
    unint64_t v191 = specialized Rope._endPath.getter(v48);
    swift_unknownObjectRelease();
    uint64_t v8 = 0LL;
    int64_t v35 = 0LL;
    if (!v29)
    {
      uint64_t v49 = 0LL;
LABEL_65:
      int64_t v187 = v31 - v35;
      if (__OFSUB__(v31, v35))
      {
LABEL_224:
        __break(1u);
        goto LABEL_225;
      }

      uint64_t v57 = (void *)v188;
      __int128 v58 = *(_OWORD *)(v188 + 32);
      v258[0] = *(_OWORD *)(v188 + 16);
      v258[1] = v58;
      v258[2] = *(_OWORD *)(v188 + 48);
      unint64_t v29 = (unint64_t)v258;
      BigString.utf8.getter();
      if (__OFSUB__(0LL, v35))
      {
LABEL_225:
        __break(1u);
        goto LABEL_226;
      }

      unint64_t v159 = BigString.UTF8View.index(_:offsetBy:)();
      unint64_t v29 = v59;
      uint64_t v61 = v60;
      unint64_t v9 = v62;
      outlined release of Locale((uint64_t)&v233);
      uint64_t v177 = *((void *)&v247 + 1);
      if (v49 >= *((uint64_t *)&v247 + 1))
      {
LABEL_226:
        __break(1u);
        goto LABEL_227;
      }

      if (v34 != *(void *)(v188 + 88))
      {
LABEL_227:
        __break(1u);
LABEL_228:
        __break(1u);
LABEL_229:
        __break(1u);
        goto LABEL_230;
      }

      unint64_t v199 = v49;
      v156[0] = v9;
      v156[1] = v61;
      v156[2] = v29;
      unint64_t v29 = *(void *)(v188 + 64);
      unint64_t v9 = *(void *)(v188 + 80);
      if (v8)
      {
        unint64_t v63 = v191;
        unint64_t v64 = v8 + 24 * ((v191 >> ((4 * *(_BYTE *)(v8 + 18) + 8) & 0x3C)) & 0xF);
        uint64_t v65 = *(void *)(v64 + 40);
        uint64_t v194 = *(void *)(v64 + 32);
        swift_bridgeObjectRetain();
        uint64_t v158 = v65;
        swift_bridgeObjectRetain();
        uint64_t v66 = v34;
      }

      else
      {
        swift_unknownObjectRetain();
        unint64_t v63 = v191;
        specialized Rope._Node.subscript.getter(v191, v29);
        uint64_t v194 = v67;
        uint64_t v158 = v68;
        swift_unknownObjectRelease();
        unint64_t v29 = *(void *)(v188 + 64);
        unint64_t v9 = *(void *)(v188 + 80);
        uint64_t v66 = *(void *)(v188 + 88);
      }

      uint64_t v157 = (__int128 *)(v188 + 16);
      unint64_t v183 = v199 + 1;
      unint64_t v195 = (char *)v225 + 8;
      *(void *)&__int128 v221 = v34;
      *((void *)&v221 + 1) = v63;
      v198 = (__int128 *)&v239;
      *(void *)&__int128 v222 = v8;
      uint64_t v176 = (unint64_t *)(v190 + 40);
LABEL_73:
      if (v34 != v66)
      {
LABEL_215:
        __break(1u);
LABEL_216:
        __break(1u);
LABEL_217:
        __break(1u);
LABEL_218:
        __break(1u);
LABEL_219:
        __break(1u);
LABEL_220:
        __break(1u);
        goto LABEL_221;
      }

      if (v8)
      {
        unint64_t v69 = v191;
        unint64_t v70 = v8 + 24 * ((v191 >> ((4 * *(_BYTE *)(v8 + 18) + 8) & 0x3C)) & 0xF);
        unint64_t v71 = *(void *)(v70 + 24);
        unint64_t v9 = *(void *)(v70 + 32);
        swift_unknownObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
      }

      else
      {
        swift_unknownObjectRetain();
        unint64_t v69 = v191;
        unint64_t v71 = specialized Rope._Node.subscript.getter(v191, v29);
        unint64_t v9 = v72;
      }

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (__OFADD__(v187, v71)) {
        goto LABEL_216;
      }
      uint64_t v173 = v187 + v71;
      uint64_t v181 = v66;
      if (v29)
      {
        unint64_t v73 = ((-15LL << ((4 * *(_BYTE *)(v29 + 18) + 8) & 0x3C)) - 1) & (unint64_t)*(unsigned __int8 *)(v29 + 18) | ((unint64_t)*(unsigned __int16 *)(v29 + 16) << ((4 * *(_BYTE *)(v29 + 18) + 8) & 0x3C));
        swift_unknownObjectRetain();
      }

      else
      {
        unint64_t v73 = 0LL;
      }

      uint64_t v74 = v186;
      uint64_t v75 = (uint64_t)v195;
      if (v69 >= v73) {
        goto LABEL_217;
      }
      if (v8)
      {
        char v76 = (4 * *(_BYTE *)(v8 + 18) + 8) & 0x3C;
        unint64_t v77 = ((v69 >> v76) & 0xF) + 1;
        if (v77 < *(unsigned __int16 *)(v8 + 16))
        {
          unint64_t v182 = (v77 << v76) | ((-15LL << v76) - 1) & v69;
          swift_unknownObjectRelease_n();
          uint64_t v78 = v194;
LABEL_88:
          unint64_t v29 = v222;
LABEL_96:
          if (v183 != v177)
          {
            if ((void)v221 == v57[11])
            {
              uint64_t v175 = v8;
              uint64_t v178 = v221;
              unint64_t v172 = v29;
              if (v29)
              {
                unint64_t v90 = v29 + 24 * ((v182 >> ((4 * *(_BYTE *)(v29 + 18) + 8) & 0x3C)) & 0xF);
                unint64_t v29 = *(void *)(v90 + 32);
                uint64_t v91 = *(void *)(v90 + 40);
                swift_bridgeObjectRetain();
                uint64_t v179 = v91;
                swift_bridgeObjectRetain();
              }

              else
              {
                uint64_t v92 = v57[8];
                unint64_t v9 = v57[10];
                swift_unknownObjectRetain();
                uint64_t v75 = (uint64_t)v195;
                specialized Rope._Node.subscript.getter(v182, v92);
                uint64_t v179 = v93;
                unint64_t v29 = v94;
                swift_unknownObjectRelease();
              }

              swift_bridgeObjectRetain();
              uint64_t v95 = 0LL;
              unint64_t v96 = v176;
              unint64_t v199 = v29;
              while (1)
              {
                uint64_t v97 = v95 + 1;
                if (__OFADD__(v95, 1LL))
                {
                  __break(1u);
                  goto LABEL_208;
                }

                uint64_t v8 = *(v96 - 1);
                unint64_t v9 = *v96;
                if (*(void *)(v78 + 16))
                {
                  swift_bridgeObjectRetain_n();
                  unint64_t v98 = specialized __RawDictionaryStorage.find<A>(_:)(v8, v9);
                  if ((v99 & 1) != 0)
                  {
                    outlined init with copy of AttributedString._AttributeValue( *(void *)(v78 + 56) + 72 * v98,  (uint64_t)&v216);
                  }

                  else
                  {
                    uint64_t v220 = 0LL;
                    __int128 v218 = 0u;
                    __int128 v219 = 0u;
                    __int128 v216 = 0u;
                    __int128 v217 = 0u;
                  }

                  swift_bridgeObjectRelease();
                  unint64_t v29 = v199;
                  if (!*(void *)(v199 + 16))
                  {
LABEL_111:
                    uint64_t v215 = 0LL;
                    __int128 v213 = 0u;
                    __int128 v214 = 0u;
                    __int128 v211 = 0u;
                    __int128 v212 = 0u;
                    goto LABEL_118;
                  }
                }

                else
                {
                  uint64_t v220 = 0LL;
                  __int128 v218 = 0u;
                  __int128 v219 = 0u;
                  __int128 v216 = 0u;
                  __int128 v217 = 0u;
                  swift_bridgeObjectRetain();
                  if (!*(void *)(v29 + 16)) {
                    goto LABEL_111;
                  }
                }

                swift_bridgeObjectRetain();
                unint64_t v100 = specialized __RawDictionaryStorage.find<A>(_:)(v8, v9);
                if ((v101 & 1) != 0)
                {
                  outlined init with copy of AttributedString._AttributeValue( *(void *)(v29 + 56) + 72 * v100,  (uint64_t)&v211);
                }

                else
                {
                  uint64_t v215 = 0LL;
                  __int128 v213 = 0u;
                  __int128 v214 = 0u;
                  __int128 v211 = 0u;
                  __int128 v212 = 0u;
                }

                swift_bridgeObjectRelease();
LABEL_118:
                swift_bridgeObjectRelease();
                unint64_t v29 = (unint64_t)&demangling cache variable for type metadata for AttributedString._AttributeValue?;
                outlined init with copy of (Hashable & Sendable)?( (uint64_t)&v216,  (uint64_t)&v221,  &demangling cache variable for type metadata for AttributedString._AttributeValue?);
                outlined init with copy of (Hashable & Sendable)?( (uint64_t)&v211,  v75,  &demangling cache variable for type metadata for AttributedString._AttributeValue?);
                if (!*((void *)&v222 + 1))
                {
                  if ((void)v226) {
                    goto LABEL_135;
                  }
                  outlined destroy of Any?( (uint64_t)&v221,  &demangling cache variable for type metadata for AttributedString._AttributeValue?);
                  outlined destroy of Any?( (uint64_t)&v211,  &demangling cache variable for type metadata for AttributedString._AttributeValue?);
                  outlined destroy of Any?( (uint64_t)&v216,  &demangling cache variable for type metadata for AttributedString._AttributeValue?);
                  goto LABEL_105;
                }

                outlined init with copy of (Hashable & Sendable)?( (uint64_t)&v221,  (uint64_t)v205,  &demangling cache variable for type metadata for AttributedString._AttributeValue?);
                if (!(void)v226) {
                  goto LABEL_134;
                }
                __int128 v102 = *(_OWORD *)(v75 + 48);
                __int128 v202 = *(_OWORD *)(v75 + 32);
                __int128 v203 = v102;
                uint64_t v204 = *(void *)(v75 + 64);
                __int128 v103 = *(_OWORD *)(v75 + 16);
                __int128 v200 = *(_OWORD *)v75;
                __int128 v201 = v103;
                outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>( (uint64_t)v205,  (uint64_t)v257);
                outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>( (uint64_t)&v200,  (uint64_t)v256);
                outlined init with copy of (Hashable & Sendable)?( (uint64_t)v257,  (uint64_t)&v236,  &demangling cache variable for type metadata for (Hashable & Sendable)?);
                outlined init with copy of (Hashable & Sendable)?( (uint64_t)v256,  (uint64_t)v198,  &demangling cache variable for type metadata for (Hashable & Sendable)?);
                if (v238)
                {
                  if (!v240)
                  {
                    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v236);
LABEL_103:
                    uint64_t v8 = 0LL;
                    goto LABEL_104;
                  }

                  outlined init with take of any PredicateExpression<Self.Output == B1>(&v236, (uint64_t)v241);
                  outlined init with take of any PredicateExpression<Self.Output == B1>(v198, (uint64_t)v235);
                  uint64_t v104 = v242;
                  uint64_t v193 = v243;
                  uint64_t v192 = __swift_project_boxed_opaque_existential_1(v241, v242);
                  uint64_t v197 = v156;
                  uint64_t v105 = *(void *)(v104 - 8);
                  MEMORY[0x1895F8858](v192);
                  unint64_t v107 = (char *)v156 - ((v106 + 15) & 0xFFFFFFFFFFFFFFF0LL);
                  outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>( (uint64_t)v235,  (uint64_t)v234);
                  uint64_t v108 = type metadata accessor for Optional();
                  unint64_t v196 = v156;
                  uint64_t v109 = *(void *)(v108 - 8);
                  MEMORY[0x1895F8858](v108);
                  unint64_t v111 = (char *)v156 - v110;
                  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Hashable & Sendable);
                  int v112 = swift_dynamicCast();
                  int64_t v113 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v105 + 56);
                  if (v112)
                  {
                    v113(v111, 0LL, 1LL, v104);
                    (*(void (**)(char *, char *, uint64_t))(v105 + 32))(v107, v111, v104);
                    uint64_t v8 = dispatch thunk of static Equatable.== infix(_:_:)();
                    (*(void (**)(char *, uint64_t))(v105 + 8))(v107, v104);
                  }

                  else
                  {
                    v113(v111, 1LL, 1LL, v104);
                    (*(void (**)(char *, uint64_t))(v109 + 8))(v111, v108);
                    uint64_t v8 = 0LL;
                  }

                  uint64_t v7 = v189;
                  uint64_t v78 = v194;
                  unint64_t v29 = (unint64_t)&demangling cache variable for type metadata for AttributedString._AttributeValue?;
                  __swift_destroy_boxed_opaque_existential_1((uint64_t)v235);
                  __swift_destroy_boxed_opaque_existential_1((uint64_t)v241);
                  uint64_t v75 = (uint64_t)v195;
                }

                else
                {
                  if (v240)
                  {
                    outlined destroy of Any?( (uint64_t)v198,  &demangling cache variable for type metadata for (Hashable & Sendable)?);
                    goto LABEL_103;
                  }

                  uint64_t v8 = 1LL;
                }

uint64_t specialized AttributedString.Runs.AttributesSlice1.subscript.getter( _OWORD *a1, _OWORD *a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  unint64_t v9 = a3;
  uint64_t v168 = a1;
  __int128 v11 = v6[9];
  __int128 v12 = v6[11];
  __int128 v255 = v6[10];
  __int128 v256 = v12;
  __int128 v13 = v6[5];
  __int128 v14 = v6[7];
  __int128 v251 = v6[6];
  __int128 v252 = v14;
  __int128 v16 = v6[7];
  __int128 v15 = v6[8];
  __int128 v17 = v15;
  __int128 v254 = v6[9];
  __int128 v253 = v15;
  __int128 v18 = v6[1];
  __int128 v19 = v6[3];
  __int128 v247 = v6[2];
  __int128 v248 = v19;
  __int128 v21 = v6[3];
  __int128 v20 = v6[4];
  __int128 v22 = v20;
  __int128 v250 = v6[5];
  __int128 v249 = v20;
  __int128 v23 = *v6;
  __int128 v24 = *v6;
  v246[1] = v6[1];
  v246[0] = v23;
  __int128 v25 = v6[11];
  __int128 v232 = v255;
  __int128 v233 = v25;
  __int128 v228 = v251;
  __int128 v229 = v16;
  __int128 v230 = v17;
  __int128 v231 = v11;
  __int128 v225 = v247;
  __int128 v226 = v21;
  v227[0] = v22;
  v227[1] = v13;
  uint64_t v26 = *((void *)v6 + 25);
  uint64_t v257 = *((void *)v6 + 24);
  uint64_t v27 = *((void *)v6 + 26);
  uint64_t v234 = *((void *)v6 + 24);
  __int128 v223 = v24;
  __int128 v224 = v18;
  *(void *)&__int128 v213 = a3;
  uint64_t v185 = a4;
  *(void *)&__int128 v186 = a5;
  *((void *)&v213 + 1) = a4;
  *(void *)&__int128 v214 = a5;
  *((void *)&v186 + 1) = a6;
  *((void *)&v214 + 1) = a6;
  outlined retain of AttributedString.Runs((uint64_t)v246);
  uint64_t v192 = v26;
  AttributedString.Runs._slicedRunBoundary(roundingDown:attributeNames:constraints:)( (unint64_t)&v218,  (unint64_t *)&v213,  v26,  v27,  (uint64_t *)&v238);
  __int128 v28 = v238;
  unint64_t v29 = v239;
  outlined release of AttributedString.Runs((uint64_t)v246);
  if (v9 >> 10 < *((void *)&v253 + 1) >> 10 || v9 >> 10 >= *((void *)&v255 + 1) >> 10)
  {
LABEL_221:
    __break(1u);
    goto LABEL_222;
  }

  uint64_t v7 = *(void *)(v192 + 16);
  if (!v7)
  {
LABEL_222:
    __break(1u);
LABEL_223:
    __break(1u);
    goto LABEL_224;
  }

  unint64_t v166 = v29;
  uint64_t v167 = v28;
  uint64_t v165 = a2;
  unint64_t v29 = *(void *)(*(void *)&v246[0] + 64LL);
  int64_t v30 = *(void *)(*(void *)&v246[0] + 80LL);
  int64_t v31 = v9 >> 11;
  if (v29) {
    int64_t v32 = *(void *)(*(void *)&v246[0] + 80LL);
  }
  else {
    int64_t v32 = 0LL;
  }
  if (v32 < v31) {
    goto LABEL_223;
  }
  unint64_t v163 = *((void *)&v28 + 1);
  uint64_t v33 = *(void *)(*(void *)&v246[0] + 72LL);
  uint64_t v189 = *(void *)(*(void *)&v246[0] + 88LL);
  uint64_t v190 = *(void *)&v246[0];
  uint64_t v187 = v27;
  unint64_t v181 = v9;
  uint64_t v191 = v7;
  __int128 v164 = v218;
  __int128 v162 = v219;
  unint64_t v176 = v9 >> 10;
  unint64_t v172 = *((void *)&v255 + 1) >> 10;
  unint64_t v173 = *((void *)&v255 + 1);
  uint64_t v170 = *((void *)&v256 + 1);
  unint64_t v171 = v256;
  uint64_t v169 = v257;
  if (!v29 || v31 >= v30 || !*(_WORD *)(v29 + 16))
  {
    swift_unknownObjectRetain();
    outlined retain of AttributedString.Runs((uint64_t)v246);
    unint64_t v47 = swift_unknownObjectRetain();
    unint64_t v193 = specialized Rope._endPath.getter(v47);
    swift_unknownObjectRelease();
    uint64_t v8 = 0LL;
    int64_t v34 = 0LL;
    if (!v29)
    {
      uint64_t v48 = 0LL;
LABEL_65:
      uint64_t v56 = (void *)v190;
      int64_t v188 = v31 - v34;
      if (__OFSUB__(v31, v34))
      {
LABEL_224:
        __break(1u);
        goto LABEL_225;
      }

      __int128 v57 = *(_OWORD *)(v190 + 32);
      v260[0] = *(_OWORD *)(v190 + 16);
      v260[1] = v57;
      v260[2] = *(_OWORD *)(v190 + 48);
      unint64_t v29 = (unint64_t)v260;
      BigString.utf8.getter();
      if (__OFSUB__(0LL, v34))
      {
LABEL_225:
        __break(1u);
        goto LABEL_226;
      }

      unint64_t v29 = BigString.UTF8View.index(_:offsetBy:)();
      uint64_t v59 = v58;
      unint64_t v9 = v60;
      uint64_t v62 = v61;
      outlined release of Locale((uint64_t)&v235);
      uint64_t v179 = *((void *)&v249 + 1);
      if (v48 >= *((uint64_t *)&v249 + 1))
      {
LABEL_226:
        __break(1u);
        goto LABEL_227;
      }

      unint64_t v160 = v29;
      uint64_t v63 = v189;
      if (v189 != *(void *)(v190 + 88))
      {
LABEL_227:
        __break(1u);
LABEL_228:
        __break(1u);
LABEL_229:
        __break(1u);
        goto LABEL_230;
      }

      unint64_t v201 = v48;
      v158[0] = v62;
      v158[1] = v9;
      v158[2] = v59;
      unint64_t v29 = *(void *)(v190 + 64);
      unint64_t v9 = *(void *)(v190 + 80);
      if (v8)
      {
        unint64_t v64 = v193;
        unint64_t v65 = v8 + 24 * ((v193 >> ((4 * *(_BYTE *)(v8 + 18) + 8) & 0x3C)) & 0xF);
        uint64_t v66 = *(void *)(v65 + 40);
        uint64_t v196 = *(void *)(v65 + 32);
        swift_bridgeObjectRetain();
        uint64_t v161 = v66;
        swift_bridgeObjectRetain();
        uint64_t v67 = v189;
      }

      else
      {
        swift_unknownObjectRetain();
        unint64_t v64 = v193;
        specialized Rope._Node.subscript.getter(v193, v29);
        uint64_t v196 = v68;
        uint64_t v161 = v69;
        swift_unknownObjectRelease();
        unint64_t v29 = *(void *)(v190 + 64);
        unint64_t v9 = *(void *)(v190 + 80);
        uint64_t v67 = *(void *)(v190 + 88);
      }

      unint64_t v159 = (__int128 *)(v190 + 16);
      unint64_t v184 = v201 + 1;
      uint64_t v197 = (char *)v227 + 8;
      *(void *)&__int128 v223 = v189;
      *((void *)&v223 + 1) = v64;
      __int128 v200 = (__int128 *)&v241;
      *(void *)&__int128 v224 = v8;
      uint64_t v178 = (unint64_t *)(v192 + 40);
LABEL_73:
      if (v63 != v67)
      {
LABEL_215:
        __break(1u);
LABEL_216:
        __break(1u);
LABEL_217:
        __break(1u);
LABEL_218:
        __break(1u);
LABEL_219:
        __break(1u);
LABEL_220:
        __break(1u);
        goto LABEL_221;
      }

      if (v8)
      {
        unint64_t v70 = v193;
        unint64_t v71 = v8 + 24 * ((v193 >> ((4 * *(_BYTE *)(v8 + 18) + 8) & 0x3C)) & 0xF);
        unint64_t v72 = *(void *)(v71 + 24);
        unint64_t v9 = *(void *)(v71 + 32);
        swift_unknownObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
      }

      else
      {
        swift_unknownObjectRetain();
        unint64_t v70 = v193;
        unint64_t v72 = specialized Rope._Node.subscript.getter(v193, v29);
        unint64_t v9 = v73;
      }

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (__OFADD__(v188, v72)) {
        goto LABEL_216;
      }
      uint64_t v175 = v188 + v72;
      uint64_t v182 = v67;
      if (v29)
      {
        unint64_t v74 = ((-15LL << ((4 * *(_BYTE *)(v29 + 18) + 8) & 0x3C)) - 1) & (unint64_t)*(unsigned __int8 *)(v29 + 18) | ((unint64_t)*(unsigned __int16 *)(v29 + 16) << ((4 * *(_BYTE *)(v29 + 18) + 8) & 0x3C));
        swift_unknownObjectRetain();
      }

      else
      {
        unint64_t v74 = 0LL;
      }

      uint64_t v75 = v187;
      uint64_t v76 = (uint64_t)v197;
      if (v70 >= v74) {
        goto LABEL_217;
      }
      if (v8)
      {
        char v77 = (4 * *(_BYTE *)(v8 + 18) + 8) & 0x3C;
        unint64_t v78 = ((v70 >> v77) & 0xF) + 1;
        if (v78 < *(unsigned __int16 *)(v8 + 16))
        {
          unint64_t v183 = (v78 << v77) | ((-15LL << v77) - 1) & v70;
          swift_unknownObjectRelease_n();
          uint64_t v79 = v196;
LABEL_88:
          unint64_t v29 = v224;
LABEL_96:
          if (v184 != v179)
          {
            if ((void)v223 == v56[11])
            {
              uint64_t v177 = v8;
              uint64_t v189 = v223;
              unint64_t v174 = v29;
              if (v29)
              {
                unint64_t v91 = v29 + 24 * ((v183 >> ((4 * *(_BYTE *)(v29 + 18) + 8) & 0x3C)) & 0xF);
                unint64_t v29 = *(void *)(v91 + 32);
                uint64_t v92 = *(void *)(v91 + 40);
                swift_bridgeObjectRetain();
                uint64_t v180 = v92;
                swift_bridgeObjectRetain();
              }

              else
              {
                uint64_t v93 = v56[8];
                unint64_t v9 = v56[10];
                swift_unknownObjectRetain();
                uint64_t v76 = (uint64_t)v197;
                specialized Rope._Node.subscript.getter(v183, v93);
                uint64_t v180 = v94;
                unint64_t v29 = v95;
                swift_unknownObjectRelease();
              }

              swift_bridgeObjectRetain();
              uint64_t v96 = 0LL;
              uint64_t v97 = v178;
              unint64_t v201 = v29;
              while (1)
              {
                uint64_t v98 = v96 + 1;
                if (__OFADD__(v96, 1LL))
                {
                  __break(1u);
                  goto LABEL_208;
                }

                uint64_t v8 = *(v97 - 1);
                unint64_t v9 = *v97;
                if (*(void *)(v79 + 16))
                {
                  swift_bridgeObjectRetain_n();
                  unint64_t v99 = specialized __RawDictionaryStorage.find<A>(_:)(v8, v9);
                  if ((v100 & 1) != 0)
                  {
                    outlined init with copy of AttributedString._AttributeValue( *(void *)(v79 + 56) + 72 * v99,  (uint64_t)&v218);
                  }

                  else
                  {
                    uint64_t v222 = 0LL;
                    __int128 v220 = 0u;
                    __int128 v221 = 0u;
                    __int128 v218 = 0u;
                    __int128 v219 = 0u;
                  }

                  swift_bridgeObjectRelease();
                  unint64_t v29 = v201;
                  if (!*(void *)(v201 + 16))
                  {
LABEL_111:
                    uint64_t v217 = 0LL;
                    __int128 v215 = 0u;
                    __int128 v216 = 0u;
                    __int128 v213 = 0u;
                    __int128 v214 = 0u;
                    goto LABEL_118;
                  }
                }

                else
                {
                  uint64_t v222 = 0LL;
                  __int128 v220 = 0u;
                  __int128 v221 = 0u;
                  __int128 v218 = 0u;
                  __int128 v219 = 0u;
                  swift_bridgeObjectRetain();
                  if (!*(void *)(v29 + 16)) {
                    goto LABEL_111;
                  }
                }

                swift_bridgeObjectRetain();
                unint64_t v101 = specialized __RawDictionaryStorage.find<A>(_:)(v8, v9);
                if ((v102 & 1) != 0)
                {
                  outlined init with copy of AttributedString._AttributeValue( *(void *)(v29 + 56) + 72 * v101,  (uint64_t)&v213);
                }

                else
                {
                  uint64_t v217 = 0LL;
                  __int128 v215 = 0u;
                  __int128 v216 = 0u;
                  __int128 v213 = 0u;
                  __int128 v214 = 0u;
                }

                swift_bridgeObjectRelease();
LABEL_118:
                swift_bridgeObjectRelease();
                unint64_t v29 = (unint64_t)&demangling cache variable for type metadata for AttributedString._AttributeValue?;
                outlined init with copy of (Hashable & Sendable)?( (uint64_t)&v218,  (uint64_t)&v223,  &demangling cache variable for type metadata for AttributedString._AttributeValue?);
                outlined init with copy of (Hashable & Sendable)?( (uint64_t)&v213,  v76,  &demangling cache variable for type metadata for AttributedString._AttributeValue?);
                if (!*((void *)&v224 + 1))
                {
                  if ((void)v228) {
                    goto LABEL_135;
                  }
                  outlined destroy of Any?( (uint64_t)&v223,  &demangling cache variable for type metadata for AttributedString._AttributeValue?);
                  outlined destroy of Any?( (uint64_t)&v213,  &demangling cache variable for type metadata for AttributedString._AttributeValue?);
                  outlined destroy of Any?( (uint64_t)&v218,  &demangling cache variable for type metadata for AttributedString._AttributeValue?);
                  goto LABEL_105;
                }

                outlined init with copy of (Hashable & Sendable)?( (uint64_t)&v223,  (uint64_t)v207,  &demangling cache variable for type metadata for AttributedString._AttributeValue?);
                if (!(void)v228) {
                  goto LABEL_134;
                }
                __int128 v103 = *(_OWORD *)(v76 + 48);
                __int128 v204 = *(_OWORD *)(v76 + 32);
                __int128 v205 = v103;
                uint64_t v206 = *(void *)(v76 + 64);
                __int128 v104 = *(_OWORD *)(v76 + 16);
                __int128 v202 = *(_OWORD *)v76;
                __int128 v203 = v104;
                outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>( (uint64_t)v207,  (uint64_t)v259);
                outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>( (uint64_t)&v202,  (uint64_t)v258);
                outlined init with copy of (Hashable & Sendable)?( (uint64_t)v259,  (uint64_t)&v238,  &demangling cache variable for type metadata for (Hashable & Sendable)?);
                outlined init with copy of (Hashable & Sendable)?( (uint64_t)v258,  (uint64_t)v200,  &demangling cache variable for type metadata for (Hashable & Sendable)?);
                if (v240)
                {
                  if (!v242)
                  {
                    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v238);
LABEL_103:
                    uint64_t v8 = 0LL;
                    goto LABEL_104;
                  }

                  outlined init with take of any PredicateExpression<Self.Output == B1>(&v238, (uint64_t)v243);
                  outlined init with take of any PredicateExpression<Self.Output == B1>(v200, (uint64_t)v237);
                  uint64_t v105 = v244;
                  uint64_t v195 = v245;
                  uint64_t v194 = __swift_project_boxed_opaque_existential_1(v243, v244);
                  unint64_t v199 = v158;
                  uint64_t v106 = *(void *)(v105 - 8);
                  MEMORY[0x1895F8858](v194);
                  uint64_t v108 = (char *)v158 - ((v107 + 15) & 0xFFFFFFFFFFFFFFF0LL);
                  outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>( (uint64_t)v237,  (uint64_t)v236);
                  uint64_t v109 = type metadata accessor for Optional();
                  v198 = v158;
                  uint64_t v110 = *(void *)(v109 - 8);
                  MEMORY[0x1895F8858](v109);
                  int v112 = (char *)v158 - v111;
                  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Hashable & Sendable);
                  int v113 = swift_dynamicCast();
                  uint64_t v114 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v106 + 56);
                  if (v113)
                  {
                    v114(v112, 0LL, 1LL, v105);
                    (*(void (**)(char *, char *, uint64_t))(v106 + 32))(v108, v112, v105);
                    uint64_t v8 = dispatch thunk of static Equatable.== infix(_:_:)();
                    (*(void (**)(char *, uint64_t))(v106 + 8))(v108, v105);
                  }

                  else
                  {
                    v114(v112, 1LL, 1LL, v105);
                    (*(void (**)(char *, uint64_t))(v110 + 8))(v112, v109);
                    uint64_t v8 = 0LL;
                  }

                  uint64_t v7 = v191;
                  uint64_t v79 = v196;
                  unint64_t v29 = (unint64_t)&demangling cache variable for type metadata for AttributedString._AttributeValue?;
                  __swift_destroy_boxed_opaque_existential_1((uint64_t)v237);
                  __swift_destroy_boxed_opaque_existential_1((uint64_t)v243);
                  uint64_t v76 = (uint64_t)v197;
                }

                else
                {
                  if (v242)
                  {
                    outlined destroy of Any?( (uint64_t)v200,  &demangling cache variable for type metadata for (Hashable & Sendable)?);
                    goto LABEL_103;
                  }

                  uint64_t v8 = 1LL;
                }

uint64_t specialized AttributedString.Runs.AttributesSlice1.subscript.getter( uint64_t a1, _OWORD *a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  unint64_t v9 = a3;
  __int128 v12 = v6[9];
  __int128 v13 = v6[11];
  __int128 v250 = v6[10];
  __int128 v251 = v13;
  __int128 v14 = v6[5];
  __int128 v15 = v6[7];
  __int128 v246 = v6[6];
  __int128 v247 = v15;
  __int128 v17 = v6[7];
  __int128 v16 = v6[8];
  __int128 v18 = v16;
  __int128 v249 = v6[9];
  __int128 v248 = v16;
  __int128 v19 = v6[1];
  __int128 v20 = v6[3];
  __int128 v242 = v6[2];
  __int128 v243 = v20;
  __int128 v22 = v6[3];
  __int128 v21 = v6[4];
  __int128 v23 = v21;
  __int128 v245 = v6[5];
  __int128 v244 = v21;
  __int128 v24 = *v6;
  __int128 v25 = *v6;
  v241[1] = v6[1];
  v241[0] = v24;
  __int128 v26 = v6[11];
  __int128 v227 = v250;
  __int128 v228 = v26;
  __int128 v223 = v246;
  __int128 v224 = v17;
  __int128 v225 = v18;
  __int128 v226 = v12;
  __int128 v220 = v242;
  __int128 v221 = v22;
  v222[0] = v23;
  v222[1] = v14;
  uint64_t v27 = *((void *)v6 + 25);
  uint64_t v252 = *((void *)v6 + 24);
  uint64_t v28 = *((void *)v6 + 26);
  uint64_t v229 = *((void *)v6 + 24);
  __int128 v218 = v25;
  __int128 v219 = v19;
  *(void *)&__int128 v208 = a3;
  uint64_t v180 = a4;
  *(void *)&__int128 v181 = a5;
  *((void *)&v208 + 1) = a4;
  *(void *)&__int128 v209 = a5;
  *((void *)&v181 + 1) = a6;
  *((void *)&v209 + 1) = a6;
  outlined retain of AttributedString.Runs((uint64_t)v241);
  uint64_t v187 = v27;
  AttributedString.Runs._slicedRunBoundary(roundingDown:attributeNames:constraints:)( (unint64_t)&v213,  (unint64_t *)&v208,  v27,  v28,  (uint64_t *)&v233);
  unint64_t v29 = *((void *)&v233 + 1);
  uint64_t v162 = v233;
  uint64_t v30 = v234;
  outlined release of AttributedString.Runs((uint64_t)v241);
  if (v9 >> 10 < *((void *)&v248 + 1) >> 10 || v9 >> 10 >= *((void *)&v250 + 1) >> 10)
  {
LABEL_221:
    __break(1u);
    goto LABEL_222;
  }

  uint64_t v7 = *(void *)(v187 + 16);
  if (!v7)
  {
LABEL_222:
    __break(1u);
LABEL_223:
    __break(1u);
    goto LABEL_224;
  }

  unint64_t v160 = v29;
  uint64_t v161 = v30;
  unint64_t v159 = a2;
  unint64_t v29 = *(void *)(*(void *)&v241[0] + 64LL);
  int64_t v31 = *(void *)(*(void *)&v241[0] + 80LL);
  int64_t v32 = v9 >> 11;
  if (v29) {
    int64_t v33 = *(void *)(*(void *)&v241[0] + 80LL);
  }
  else {
    int64_t v33 = 0LL;
  }
  if (v33 < v32) {
    goto LABEL_223;
  }
  uint64_t v174 = a1;
  uint64_t v34 = *(void *)(*(void *)&v241[0] + 72LL);
  uint64_t v184 = *(void *)(*(void *)&v241[0] + 88LL);
  uint64_t v185 = *(void *)&v241[0];
  uint64_t v182 = v28;
  unint64_t v176 = v9;
  uint64_t v186 = v7;
  __int128 v157 = v214;
  __int128 v158 = v213;
  unint64_t v170 = v9 >> 10;
  unint64_t v166 = *((void *)&v250 + 1) >> 10;
  unint64_t v167 = *((void *)&v250 + 1);
  uint64_t v164 = *((void *)&v251 + 1);
  unint64_t v165 = v251;
  uint64_t v163 = v252;
  if (!v29 || v32 >= v31 || !*(_WORD *)(v29 + 16))
  {
    swift_unknownObjectRetain();
    outlined retain of AttributedString.Runs((uint64_t)v241);
    unint64_t v47 = swift_unknownObjectRetain();
    unint64_t v188 = specialized Rope._endPath.getter(v47);
    swift_unknownObjectRelease();
    uint64_t v8 = 0LL;
    int64_t v35 = 0LL;
    if (!v29)
    {
      uint64_t v48 = 0LL;
LABEL_65:
      a1 = v185;
      int64_t v183 = v32 - v35;
      if (__OFSUB__(v32, v35))
      {
LABEL_224:
        __break(1u);
        goto LABEL_225;
      }

      __int128 v56 = *(_OWORD *)(v185 + 32);
      v255[0] = *(_OWORD *)(v185 + 16);
      v255[1] = v56;
      v255[2] = *(_OWORD *)(v185 + 48);
      unint64_t v29 = (unint64_t)v255;
      BigString.utf8.getter();
      if (__OFSUB__(0LL, v35))
      {
LABEL_225:
        __break(1u);
        goto LABEL_226;
      }

      unint64_t v29 = BigString.UTF8View.index(_:offsetBy:)();
      uint64_t v58 = v57;
      unint64_t v9 = v59;
      uint64_t v61 = v60;
      outlined release of Locale((uint64_t)&v230);
      uint64_t v173 = *((void *)&v244 + 1);
      if (v48 >= *((uint64_t *)&v244 + 1))
      {
LABEL_226:
        __break(1u);
        goto LABEL_227;
      }

      unint64_t v155 = v29;
      uint64_t v62 = v184;
      if (v184 != *(void *)(v185 + 88))
      {
LABEL_227:
        __break(1u);
LABEL_228:
        __break(1u);
LABEL_229:
        __break(1u);
        goto LABEL_230;
      }

      unint64_t v196 = v48;
      v153[0] = v61;
      v153[1] = v9;
      v153[2] = v58;
      unint64_t v29 = *(void *)(v185 + 64);
      unint64_t v9 = *(void *)(v185 + 80);
      if (v8)
      {
        unint64_t v63 = v188;
        unint64_t v64 = v8 + 24 * ((v188 >> ((4 * *(_BYTE *)(v8 + 18) + 8) & 0x3C)) & 0xF);
        uint64_t v65 = *(void *)(v64 + 40);
        uint64_t v191 = *(void *)(v64 + 32);
        swift_bridgeObjectRetain();
        uint64_t v156 = v65;
        swift_bridgeObjectRetain();
        uint64_t v66 = v184;
      }

      else
      {
        swift_unknownObjectRetain();
        unint64_t v63 = v188;
        specialized Rope._Node.subscript.getter(v188, v29);
        uint64_t v191 = v67;
        uint64_t v156 = v68;
        swift_unknownObjectRelease();
        unint64_t v29 = *(void *)(v185 + 64);
        unint64_t v9 = *(void *)(v185 + 80);
        uint64_t v66 = *(void *)(v185 + 88);
      }

      unint64_t v154 = (__int128 *)(v185 + 16);
      unint64_t v179 = v196 + 1;
      uint64_t v192 = (char *)v222 + 8;
      *(void *)&__int128 v218 = v184;
      *((void *)&v218 + 1) = v63;
      uint64_t v195 = (__int128 *)&v236;
      *(void *)&__int128 v219 = v8;
      uint64_t v172 = v187 + 40;
LABEL_73:
      if (v62 != v66)
      {
LABEL_215:
        __break(1u);
LABEL_216:
        __break(1u);
LABEL_217:
        __break(1u);
LABEL_218:
        __break(1u);
LABEL_219:
        __break(1u);
LABEL_220:
        __break(1u);
        goto LABEL_221;
      }

      if (v8)
      {
        unint64_t v69 = v188;
        unint64_t v70 = v8 + 24 * ((v188 >> ((4 * *(_BYTE *)(v8 + 18) + 8) & 0x3C)) & 0xF);
        unint64_t v71 = *(void *)(v70 + 24);
        unint64_t v9 = *(void *)(v70 + 32);
        swift_unknownObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
      }

      else
      {
        swift_unknownObjectRetain();
        unint64_t v69 = v188;
        unint64_t v71 = specialized Rope._Node.subscript.getter(v188, v29);
        unint64_t v9 = v72;
      }

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (__OFADD__(v183, v71)) {
        goto LABEL_216;
      }
      uint64_t v169 = v183 + v71;
      uint64_t v177 = v66;
      if (v29)
      {
        unint64_t v73 = ((-15LL << ((4 * *(_BYTE *)(v29 + 18) + 8) & 0x3C)) - 1) & (unint64_t)*(unsigned __int8 *)(v29 + 18) | ((unint64_t)*(unsigned __int16 *)(v29 + 16) << ((4 * *(_BYTE *)(v29 + 18) + 8) & 0x3C));
        swift_unknownObjectRetain();
      }

      else
      {
        unint64_t v73 = 0LL;
      }

      uint64_t v74 = v182;
      uint64_t v75 = (uint64_t)v192;
      if (v69 >= v73) {
        goto LABEL_217;
      }
      if (v8)
      {
        char v76 = (4 * *(_BYTE *)(v8 + 18) + 8) & 0x3C;
        unint64_t v77 = ((v69 >> v76) & 0xF) + 1;
        if (v77 < *(unsigned __int16 *)(v8 + 16))
        {
          unint64_t v178 = (v77 << v76) | ((-15LL << v76) - 1) & v69;
          swift_unknownObjectRelease_n();
          uint64_t v78 = v191;
LABEL_88:
          unint64_t v29 = v219;
LABEL_96:
          if (v179 != v173)
          {
            if ((void)v218 == *(void *)(a1 + 88))
            {
              uint64_t v171 = v8;
              uint64_t v184 = v218;
              unint64_t v168 = v29;
              if (v29)
              {
                unint64_t v90 = v29 + 24 * ((v178 >> ((4 * *(_BYTE *)(v29 + 18) + 8) & 0x3C)) & 0xF);
                unint64_t v29 = *(void *)(v90 + 32);
                uint64_t v91 = *(void *)(v90 + 40);
                swift_bridgeObjectRetain();
                uint64_t v175 = v91;
                swift_bridgeObjectRetain();
              }

              else
              {
                uint64_t v92 = *(void *)(a1 + 64);
                unint64_t v9 = *(void *)(a1 + 80);
                swift_unknownObjectRetain();
                uint64_t v75 = (uint64_t)v192;
                specialized Rope._Node.subscript.getter(v178, v92);
                uint64_t v175 = v93;
                unint64_t v29 = v94;
                swift_unknownObjectRelease();
              }

              swift_bridgeObjectRetain();
              uint64_t v95 = 0LL;
              a1 = v172;
              unint64_t v196 = v29;
              while (1)
              {
                uint64_t v96 = v95 + 1;
                if (__OFADD__(v95, 1LL))
                {
                  __break(1u);
                  goto LABEL_208;
                }

                uint64_t v8 = *(void *)(a1 - 8);
                unint64_t v9 = *(void *)a1;
                if (*(void *)(v78 + 16))
                {
                  swift_bridgeObjectRetain_n();
                  unint64_t v97 = specialized __RawDictionaryStorage.find<A>(_:)(v8, v9);
                  if ((v98 & 1) != 0)
                  {
                    outlined init with copy of AttributedString._AttributeValue( *(void *)(v78 + 56) + 72 * v97,  (uint64_t)&v213);
                  }

                  else
                  {
                    uint64_t v217 = 0LL;
                    __int128 v215 = 0u;
                    __int128 v216 = 0u;
                    __int128 v213 = 0u;
                    __int128 v214 = 0u;
                  }

                  swift_bridgeObjectRelease();
                  unint64_t v29 = v196;
                  if (!*(void *)(v196 + 16))
                  {
LABEL_111:
                    uint64_t v212 = 0LL;
                    __int128 v210 = 0u;
                    __int128 v211 = 0u;
                    __int128 v208 = 0u;
                    __int128 v209 = 0u;
                    goto LABEL_118;
                  }
                }

                else
                {
                  uint64_t v217 = 0LL;
                  __int128 v215 = 0u;
                  __int128 v216 = 0u;
                  __int128 v213 = 0u;
                  __int128 v214 = 0u;
                  swift_bridgeObjectRetain();
                  if (!*(void *)(v29 + 16)) {
                    goto LABEL_111;
                  }
                }

                swift_bridgeObjectRetain();
                unint64_t v99 = specialized __RawDictionaryStorage.find<A>(_:)(v8, v9);
                if ((v100 & 1) != 0)
                {
                  outlined init with copy of AttributedString._AttributeValue( *(void *)(v29 + 56) + 72 * v99,  (uint64_t)&v208);
                }

                else
                {
                  uint64_t v212 = 0LL;
                  __int128 v210 = 0u;
                  __int128 v211 = 0u;
                  __int128 v208 = 0u;
                  __int128 v209 = 0u;
                }

                swift_bridgeObjectRelease();
LABEL_118:
                swift_bridgeObjectRelease();
                unint64_t v29 = (unint64_t)&demangling cache variable for type metadata for AttributedString._AttributeValue?;
                outlined init with copy of (Hashable & Sendable)?( (uint64_t)&v213,  (uint64_t)&v218,  &demangling cache variable for type metadata for AttributedString._AttributeValue?);
                outlined init with copy of (Hashable & Sendable)?( (uint64_t)&v208,  v75,  &demangling cache variable for type metadata for AttributedString._AttributeValue?);
                if (!*((void *)&v219 + 1))
                {
                  if ((void)v223) {
                    goto LABEL_135;
                  }
                  outlined destroy of Any?( (uint64_t)&v218,  &demangling cache variable for type metadata for AttributedString._AttributeValue?);
                  outlined destroy of Any?( (uint64_t)&v208,  &demangling cache variable for type metadata for AttributedString._AttributeValue?);
                  outlined destroy of Any?( (uint64_t)&v213,  &demangling cache variable for type metadata for AttributedString._AttributeValue?);
                  goto LABEL_105;
                }

                outlined init with copy of (Hashable & Sendable)?( (uint64_t)&v218,  (uint64_t)v202,  &demangling cache variable for type metadata for AttributedString._AttributeValue?);
                if (!(void)v223) {
                  goto LABEL_134;
                }
                __int128 v101 = *(_OWORD *)(v75 + 48);
                __int128 v199 = *(_OWORD *)(v75 + 32);
                __int128 v200 = v101;
                uint64_t v201 = *(void *)(v75 + 64);
                __int128 v102 = *(_OWORD *)(v75 + 16);
                __int128 v197 = *(_OWORD *)v75;
                __int128 v198 = v102;
                outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>( (uint64_t)v202,  (uint64_t)v254);
                outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>( (uint64_t)&v197,  (uint64_t)v253);
                outlined init with copy of (Hashable & Sendable)?( (uint64_t)v254,  (uint64_t)&v233,  &demangling cache variable for type metadata for (Hashable & Sendable)?);
                outlined init with copy of (Hashable & Sendable)?( (uint64_t)v253,  (uint64_t)v195,  &demangling cache variable for type metadata for (Hashable & Sendable)?);
                if (v235)
                {
                  if (!v237)
                  {
                    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v233);
LABEL_103:
                    uint64_t v8 = 0LL;
                    goto LABEL_104;
                  }

                  outlined init with take of any PredicateExpression<Self.Output == B1>(&v233, (uint64_t)v238);
                  outlined init with take of any PredicateExpression<Self.Output == B1>(v195, (uint64_t)v232);
                  uint64_t v103 = v239;
                  uint64_t v190 = v240;
                  uint64_t v189 = __swift_project_boxed_opaque_existential_1(v238, v239);
                  uint64_t v194 = v153;
                  uint64_t v104 = *(void *)(v103 - 8);
                  MEMORY[0x1895F8858](v189);
                  uint64_t v106 = (char *)v153 - ((v105 + 15) & 0xFFFFFFFFFFFFFFF0LL);
                  outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>( (uint64_t)v232,  (uint64_t)v231);
                  uint64_t v107 = type metadata accessor for Optional();
                  unint64_t v193 = v153;
                  uint64_t v108 = *(void *)(v107 - 8);
                  MEMORY[0x1895F8858](v107);
                  uint64_t v110 = (char *)v153 - v109;
                  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Hashable & Sendable);
                  int v111 = swift_dynamicCast();
                  int v112 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v104 + 56);
                  if (v111)
                  {
                    v112(v110, 0LL, 1LL, v103);
                    (*(void (**)(char *, char *, uint64_t))(v104 + 32))(v106, v110, v103);
                    uint64_t v8 = dispatch thunk of static Equatable.== infix(_:_:)();
                    (*(void (**)(char *, uint64_t))(v104 + 8))(v106, v103);
                  }

                  else
                  {
                    v112(v110, 1LL, 1LL, v103);
                    (*(void (**)(char *, uint64_t))(v108 + 8))(v110, v107);
                    uint64_t v8 = 0LL;
                  }

                  uint64_t v7 = v186;
                  uint64_t v78 = v191;
                  unint64_t v29 = (unint64_t)&demangling cache variable for type metadata for AttributedString._AttributeValue?;
                  __swift_destroy_boxed_opaque_existential_1((uint64_t)v232);
                  __swift_destroy_boxed_opaque_existential_1((uint64_t)v238);
                  uint64_t v75 = (uint64_t)v192;
                }

                else
                {
                  if (v237)
                  {
                    outlined destroy of Any?( (uint64_t)v195,  &demangling cache variable for type metadata for (Hashable & Sendable)?);
                    goto LABEL_103;
                  }

                  uint64_t v8 = 1LL;
                }

unint64_t specialized AttributedString.Runs.AttributesSlice4.index(before:)@<X0>( unint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, __int128 **a5@<X8>)
{
  __int128 v6 = v5[11];
  __int128 v220 = v5[10];
  __int128 v221 = v6;
  uint64_t v7 = *((void *)v5 + 25);
  uint64_t v222 = *((void *)v5 + 24);
  __int128 v8 = v5[7];
  v217[6] = v5[6];
  v217[7] = v8;
  __int128 v9 = v5[8];
  __int128 v219 = v5[9];
  __int128 v218 = v9;
  __int128 v10 = v5[3];
  v217[2] = v5[2];
  v217[3] = v10;
  __int128 v11 = v5[4];
  v217[5] = v5[5];
  v217[4] = v11;
  __int128 v12 = *v5;
  v217[1] = v5[1];
  v217[0] = v12;
  uint64_t v215 = *((void *)v5 + 26);
  uint64_t v216 = v7;
  if (*((void *)&v218 + 1) >> 10 >= result >> 10 || *((void *)&v220 + 1) >> 10 < result >> 10)
  {
LABEL_197:
    __break(1u);
    goto LABEL_198;
  }

  if (!*(void *)(v7 + 16))
  {
LABEL_198:
    __break(1u);
LABEL_199:
    __break(1u);
    goto LABEL_200;
  }

  uint64_t v177 = *(void *)(v7 + 16);
  uint64_t v13 = *(void *)&v217[0];
  unint64_t v14 = *(void *)(*(void *)&v217[0] + 64LL);
  int64_t v15 = *(void *)(*(void *)&v217[0] + 80LL);
  if (v14) {
    uint64_t v16 = *(void *)(*(void *)&v217[0] + 80LL);
  }
  else {
    uint64_t v16 = 0LL;
  }
  if (result < 0x800) {
    goto LABEL_199;
  }
  int64_t v17 = result >> 11;
  uint64_t v18 = (result >> 11) - 1;
  if (v16 < v18) {
    goto LABEL_199;
  }
  uint64_t v19 = *(void *)(*(void *)&v217[0] + 72LL);
  unint64_t v179 = *(void *)(*(void *)&v217[0] + 88LL);
  __int128 v158 = a5;
  uint64_t v159 = v220;
  uint64_t v167 = a4;
  unint64_t v168 = result >> 10;
  uint64_t v165 = a2;
  uint64_t v166 = a3;
  uint64_t v163 = (__int128 *)*((void *)&v218 + 1);
  unint64_t v164 = result;
  unint64_t v161 = v219;
  unint64_t v162 = *((void *)&v218 + 1) >> 10;
  uint64_t v160 = *((void *)&v219 + 1);
  if (!v14 || v17 > v15 || !*(_WORD *)(v14 + 16))
  {
    swift_unknownObjectRetain_n();
    outlined retain of AttributedString.Runs((uint64_t)v217);
    unint64_t v180 = specialized Rope._endPath.getter(v14);
    uint64_t result = swift_unknownObjectRelease();
    uint64_t v21 = 0LL;
    uint64_t v178 = 0LL;
    if (!v14)
    {
      uint64_t v174 = 0LL;
      goto LABEL_66;
    }

uint64_t specialized AttributedString.Runs.AttributesSlice4.subscript.getter( _OWORD *a1, void *a2, void *a3, unint64_t *a4, unint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  *(void *)&__int128 v340 = a7;
  *((void *)&v340 + 1) = a8;
  uint64_t v339 = a6;
  __int128 v11 = *(_OWORD *)v8;
  __int128 v12 = *(_OWORD *)(v8 + 16);
  __int128 v13 = *(_OWORD *)(v8 + 32);
  v413[3] = *(_OWORD *)(v8 + 48);
  v413[2] = v13;
  v413[0] = v11;
  v413[1] = v12;
  __int128 v14 = *(_OWORD *)(v8 + 64);
  __int128 v15 = *(_OWORD *)(v8 + 80);
  __int128 v16 = *(_OWORD *)(v8 + 96);
  __int128 v417 = *(_OWORD *)(v8 + 112);
  __int128 v416 = v16;
  __int128 v414 = v14;
  __int128 v415 = v15;
  __int128 v17 = *(_OWORD *)(v8 + 128);
  __int128 v18 = *(_OWORD *)(v8 + 144);
  __int128 v19 = *(_OWORD *)(v8 + 160);
  __int128 v20 = *(_OWORD *)(v8 + 176);
  unint64_t v422 = *(void *)(v8 + 192);
  __int128 v421 = v20;
  __int128 v420 = v19;
  __int128 v418 = v17;
  unint64_t v21 = *((void *)&v17 + 1);
  unint64_t v345 = a5;
  unint64_t v22 = *((void *)&v17 + 1) >> 10;
  __int128 v419 = v18;
  if (a5 >> 10 < *((void *)&v17 + 1) >> 10
    || (unint64_t v326 = *((void *)&v420 + 1) >> 10, *((void *)&v420 + 1) >> 10 < a5 >> 10))
  {
LABEL_382:
    __break(1u);
    goto LABEL_383;
  }

  unint64_t v334 = a5 >> 10;
  v313 = a2;
  v314 = a3;
  uint64_t v25 = *(void *)(v8 + 200);
  uint64_t v26 = *(void *)(v8 + 208);
  unint64_t v333 = *((void *)&v419 + 1);
  v335 = (char *)v419;
  unint64_t v327 = v420;
  unint64_t v9 = *((void *)&v421 + 1);
  uint64_t v8 = v421;
  unint64_t v10 = v422;
  uint64_t v342 = v25;
  uint64_t v27 = specialized Array._getCount()(v25);
  if (!v27)
  {
LABEL_383:
    __break(1u);
LABEL_384:
    __break(1u);
    goto LABEL_385;
  }

  unint64_t v325 = v22;
  unint64_t v318 = *((void *)&v420 + 1);
  unint64_t v22 = *(void *)&v413[0];
  unint64_t v28 = *(void *)(*(void *)&v413[0] + 64LL);
  uint64_t v29 = *(void *)(*(void *)&v413[0] + 80LL);
  uint64_t v353 = v29;
  if (v28) {
    uint64_t v30 = v29;
  }
  else {
    uint64_t v30 = 0LL;
  }
  v351 = (void *)(v345 >> 11);
  v311 = a4;
  v312 = a1;
  uint64_t v31 = *(void *)(*(void *)&v413[0] + 72LL);
  unint64_t v338 = *(void *)(*(void *)&v413[0] + 88LL);
  uint64_t v348 = v26;
  unint64_t v349 = v27;
  unint64_t v316 = *((void *)&v421 + 1);
  unint64_t v317 = v421;
  unint64_t v315 = v422;
  unint64_t v323 = v21;
  if (v28 && (uint64_t)v351 < v353 && *(_WORD *)(v28 + 16))
  {
    uint64_t v32 = *(unsigned __int8 *)(v28 + 18);
    if (*(_BYTE *)(v28 + 18))
    {
      swift_unknownObjectRetain_n();
      outlined retain of AttributedString.Runs((uint64_t)v413);
      unint64_t v10 = -15LL;
      unint64_t v21 = 24LL;
      unint64_t v9 = (unint64_t)v351;
      uint64_t v8 = v28;
      while (1)
      {
        uint64_t v36 = *(unsigned __int16 *)(v8 + 16);
        if (!*(_WORD *)(v8 + 16)) {
          goto LABEL_14;
        }
        uint64_t v37 = *(void *)(v8 + 40);
        unint64_t v38 = v9 - v37;
        if (__OFSUB__(v9, v37)) {
          goto LABEL_370;
        }
        if (__OFADD__(v38, 1LL)) {
          goto LABEL_371;
        }
        if ((uint64_t)(v38 + 1) <= 0)
        {
          uint64_t v36 = 0LL;
          goto LABEL_15;
        }

        if ((_DWORD)v36 == 1) {
          break;
        }
        uint64_t v39 = *(void *)(v8 + 64);
        BOOL v40 = __OFSUB__(v38, v39);
        unint64_t v41 = v38 - v39;
        if (v40) {
          goto LABEL_378;
        }
        if (__OFADD__(v41, 1LL)) {
          goto LABEL_379;
        }
        if ((uint64_t)(v41 + 1) < 1)
        {
          uint64_t v36 = 1LL;
          unint64_t v9 = v38;
          goto LABEL_15;
        }

        if ((_DWORD)v36 == 2)
        {
          unint64_t v9 = v41;
          goto LABEL_14;
        }

        uint64_t v42 = (void *)(v8 + 88);
        uint64_t v43 = 2LL;
        while (1)
        {
          if (v36 == v43) {
            goto LABEL_360;
          }
          unint64_t v9 = v41 - *v42;
          if (__OFSUB__(v41, *v42))
          {
LABEL_361:
            __break(1u);
LABEL_362:
            __break(1u);
LABEL_363:
            __break(1u);
LABEL_364:
            __break(1u);
LABEL_365:
            __break(1u);
LABEL_366:
            __break(1u);
LABEL_367:
            __break(1u);
            goto LABEL_368;
          }

          if (__OFADD__(v9, 1LL)) {
            goto LABEL_362;
          }
          ++v43;
          v42 += 3;
          unint64_t v41 = v9;
          if (v36 == v43) {
            goto LABEL_14;
          }
        }

        uint64_t v36 = v43;
        unint64_t v9 = v41;
LABEL_15:
        char v33 = (4 * *(_BYTE *)(v8 + 18) + 8) & 0x3C;
        uint64_t v32 = ((-15LL << v33) - 1) & v32 | (v36 << v33);
        unint64_t v34 = *(void *)(v8 + 24 + 24 * v36);
        swift_unknownObjectRetain();
        uint64_t result = swift_unknownObjectRelease();
        uint64_t v8 = v34;
        if (!*(_BYTE *)(v34 + 18)) {
          goto LABEL_39;
        }
      }

      v9 -= v37;
LABEL_14:
      if (!v9) {
        goto LABEL_15;
      }
LABEL_368:
      __break(1u);
LABEL_369:
      __break(1u);
LABEL_370:
      __break(1u);
LABEL_371:
      __break(1u);
LABEL_372:
      __break(1u);
LABEL_373:
      __break(1u);
LABEL_374:
      __break(1u);
LABEL_375:
      __break(1u);
LABEL_376:
      __break(1u);
LABEL_377:
      __break(1u);
LABEL_378:
      __break(1u);
LABEL_379:
      __break(1u);
LABEL_380:
      __break(1u);
LABEL_381:
      __break(1u);
      goto LABEL_382;
    }

    swift_unknownObjectRetain_n();
    uint64_t result = outlined retain of AttributedString.Runs((uint64_t)v413);
    unint64_t v9 = (unint64_t)v351;
    unint64_t v34 = v28;
LABEL_39:
    uint64_t v8 = *(unsigned __int16 *)(v34 + 16);
    unint64_t v10 = v34;
    if (!*(_WORD *)(v34 + 16)) {
      goto LABEL_58;
    }
    uint64_t v45 = *(void *)(v34 + 24);
    unint64_t v46 = v9 - v45;
    if (__OFSUB__(v9, v45))
    {
LABEL_449:
      __break(1u);
      goto LABEL_450;
    }

    if (__OFADD__(v46, 1LL))
    {
LABEL_450:
      __break(1u);
      goto LABEL_451;
    }

    if ((uint64_t)(v46 + 1) <= 0)
    {
      uint64_t v8 = 0LL;
    }

    else
    {
      if ((_DWORD)v8 == 1)
      {
        v9 -= v45;
        goto LABEL_58;
      }

      uint64_t v47 = *(void *)(v34 + 48);
      BOOL v40 = __OFSUB__(v46, v47);
      unint64_t v48 = v46 - v47;
      if (v40)
      {
LABEL_457:
        __break(1u);
        goto LABEL_458;
      }

      if (__OFADD__(v48, 1LL))
      {
LABEL_458:
        __break(1u);
        goto LABEL_459;
      }

      if ((uint64_t)(v48 + 1) < 1)
      {
        uint64_t v8 = 1LL;
        unint64_t v9 = v46;
      }

      else
      {
        if ((_DWORD)v8 == 2)
        {
          unint64_t v9 = v48;
LABEL_58:
          if (v9)
          {
LABEL_447:
            __break(1u);
            goto LABEL_448;
          }

          goto LABEL_59;
        }

        unint64_t v49 = (void *)(v34 + 72);
        uint64_t v50 = 2LL;
        while (1)
        {
          if (v8 == v50) {
            goto LABEL_439;
          }
          unint64_t v9 = v48 - *v49;
          if (__OFSUB__(v48, *v49)) {
            goto LABEL_440;
          }
          if (__OFADD__(v9, 1LL)) {
            goto LABEL_441;
          }
          ++v50;
          v49 += 3;
          unint64_t v48 = v9;
          if (v8 == v50) {
            goto LABEL_58;
          }
        }

        uint64_t v8 = v50;
        unint64_t v9 = v48;
      }
    }

LABEL_349:
                      uint64_t v272 = qword_18C5D2BD8;
                      uint64_t v273 = static AttributeScopes.FoundationAttributes.InflectionRuleAttribute.name;
                      swift_bridgeObjectRetain();
                      unint64_t v274 = specialized __RawDictionaryStorage.find<A>(_:)(v273, v272);
                      if ((v275 & 1) != 0)
                      {
                        outlined init with copy of AttributedString._AttributeValue( *(void *)(v8 + 56) + 72 * v274,  (uint64_t)&v380);
                      }

                      else
                      {
                        uint64_t v384 = 0LL;
                        __int128 v382 = 0u;
                        __int128 v383 = 0u;
                        __int128 v380 = 0u;
                        __int128 v381 = 0u;
                      }

                      swift_bridgeObjectRelease();
                      if (*((void *)&v381 + 1))
                      {
                        outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>( (uint64_t)&v380,  (uint64_t)v364);
                        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Hashable & Sendable);
                        swift_dynamicCast();
                        outlined destroy of AttributedString._AttributeValue((uint64_t)&v380);
                        goto LABEL_397;
                      }

LABEL_426:
                                  outlined destroy of Any?( (uint64_t)&v380,  &demangling cache variable for type metadata for AttributedString._AttributeValue?);
                                  v300 = v314;
                                  void *v314 = 0LL;
                                  char v301 = 1;
                                  goto LABEL_427;
                                }
                              }

                              uint64_t v384 = 0LL;
                              __int128 v382 = 0u;
                              __int128 v383 = 0u;
                              __int128 v380 = 0u;
                              __int128 v381 = 0u;
                              goto LABEL_426;
                            }
                          }

                          uint64_t v384 = 0LL;
                          __int128 v382 = 0u;
                          __int128 v383 = 0u;
                          __int128 v380 = 0u;
                          __int128 v381 = 0u;
                          goto LABEL_416;
                        }
                      }

                      uint64_t v384 = 0LL;
                      __int128 v382 = 0u;
                      __int128 v383 = 0u;
                      __int128 v380 = 0u;
                      __int128 v381 = 0u;
                      goto LABEL_406;
                    }

LABEL_393:
                  __break(1u);
                  goto LABEL_394;
                }

uint64_t AttributedString.inflected(locale:userTermOfAddress:replacements:concepts:preflight:)@<X0>( uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, char a5@<W4>, void *a6@<X8>)
{
  unint64_t v101 = *(uint64_t (***)(uint64_t))(a1 + 8);
  uint64_t v86 = a2[1];
  uint64_t v87 = *a2;
  uint64_t v88 = a2[4];
  uint64_t v118 = (void *)a2[3];
  int v120 = (const void *)a2[5];
  uint64_t v113 = a2[6];
  uint64_t v116 = a2[7];
  char v109 = (void *)a2[2];
  __int128 v111 = (void *)a2[8];
  unint64_t v9 = (void *)a2[10];
  id v107 = (id)a2[9];
  uint64_t v10 = a2[11];
  unint64_t v11 = a2[12];
  __int128 v12 = (_OWORD *)*v6;
  __int128 v13 = (void *)swift_allocObject();
  v13[2] = v12;
  char v90 = v13 + 2;
  uint64_t v91 = v12;
  __int128 v14 = v12[2];
  v134[0] = v12[1];
  v134[1] = v14;
  v134[2] = v12[3];
  swift_retain();
  outlined retain of Locale((uint64_t)v134);
  MEMORY[0x186E1B6D0](v134);
  id v15 = objc_allocWithZone((Class)&OBJC_CLASS___NSMutableString);
  uint64_t v16 = String._bridgeToObjectiveCImpl()();
  swift_bridgeObjectRelease();
  id v89 = objc_msgSend(v15, sel_initWithString_, v16);
  swift_unknownObjectRelease();
  uint64_t v93 = a3;
  unint64_t v94 = v13;
  if (a4)
  {
    unint64_t v97 = v9;
    uint64_t v17 = *(void *)(a4 + 16);
    uint64_t v18 = MEMORY[0x18961AFE8];
    if (v17)
    {
      uint64_t v84 = v10;
      *(void *)&__int128 v128 = MEMORY[0x18961AFE8];
      swift_bridgeObjectRetain();
      specialized ContiguousArray.reserveCapacity(_:)();
      __int128 v19 = (_BYTE *)(a4 + 48);
      do
      {
        if (*v19 == 1)
        {
          id v20 = objc_allocWithZone((Class)&OBJC_CLASS___NSString);
          uint64_t v21 = String._bridgeToObjectiveCImpl()();
          swift_bridgeObjectRetain();
          objc_msgSend(v20, sel_initWithString_, v21);
          swift_unknownObjectRelease();
          outlined consume of InflectionConcept();
        }

        else
        {
          swift_bridgeObjectRetain();
          _ContiguousArrayBuffer._asCocoaArray()();
        }

        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
        specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized ContiguousArray._endMutation()();
        v19 += 24;
        --v17;
      }

      while (v17);
      uint64_t v18 = v128;
      swift_bridgeObjectRelease();
      a3 = v93;
      uint64_t v10 = v84;
    }

    unint64_t v9 = v97;
  }

  else
  {
    uint64_t v18 = 0LL;
  }

  uint64_t v22 = v116;
  uint64_t v23 = (uint64_t)v120;
  uint64_t ObjectType = swift_getObjectType();
  char v96 = (void *)v101[61](ObjectType);
  if ((unint64_t)a3 >> 62)
  {
    uint64_t v28 = a3 & 0xFFFFFFFFFFFFFF8LL;
    if (a3 < 0) {
      uint64_t v28 = a3;
    }
    uint64_t v95 = v28;
    swift_bridgeObjectRetain();
    uint64_t v26 = v111;
    uint64_t isEscapingClosureAtFileLocation = v113;
    if (v18) {
      goto LABEL_13;
    }
LABEL_18:
    uint64_t v98 = 0LL;
    goto LABEL_19;
  }

  type metadata accessor for NSMorphologyPronoun( 0LL,  &lazy cache variable for type metadata for _NSAttributedStringReplacement);
  swift_bridgeObjectRetain();
  uint64_t v95 = _ContiguousArrayBuffer._asCocoaArray()();
  uint64_t v26 = v111;
  uint64_t isEscapingClosureAtFileLocation = v113;
  if (!v18) {
    goto LABEL_18;
  }
LABEL_13:
  uint64_t v27 = (const void *)(v18 & 0xFFFFFFFFFFFFFF8LL);
  type metadata accessor for NSMorphologyPronoun( 0LL,  (unint64_t *)&lazy cache variable for type metadata for NSObject);
  uint64_t v98 = (void *)_ContiguousArrayBuffer._asCocoaArray()();
LABEL_19:
  while (2)
  {
    id v29 = 0LL;
    switch(v11)
    {
      case 0uLL:
        id v30 = objc_msgSend((id)objc_opt_self(), sel_neutral);
        goto LABEL_26;
      case 1uLL:
        id v30 = objc_msgSend((id)objc_opt_self(), sel_feminine);
        goto LABEL_26;
      case 2uLL:
        id v30 = objc_msgSend((id)objc_opt_self(), sel_masculine);
        goto LABEL_26;
      case 3uLL:
        id v30 = objc_msgSend((id)objc_opt_self(), sel_currentUser);
LABEL_26:
        id v29 = v30;
        goto LABEL_75;
      case 4uLL:
        goto LABEL_75;
      default:
        *(void *)&__int128 v128 = v87;
        *((void *)&v128 + 1) = v86;
        *(void *)&__int128 v129 = v109;
        *((void *)&v129 + 1) = v118;
        *(void *)&__int128 v130 = v88;
        *((void *)&v130 + 1) = v23;
        *(void *)&__int128 v131 = isEscapingClosureAtFileLocation;
        *((void *)&v131 + 1) = v22;
        *(void *)&__int128 v132 = v26;
        *((void *)&v132 + 1) = v107;
        *(void *)&__int128 v133 = v9;
        *((void *)&v133 + 1) = v10;
        if (v86)
        {
          outlined copy of TermOfAddress._TermOfAddress( v87,  v86,  (uint64_t)v109,  (uint64_t)v118,  v88,  v23,  isEscapingClosureAtFileLocation,  v22,  (uint64_t)v26,  (uint64_t)v107,  (uint64_t)v9,  v10,  v11);
          uint64_t v31 = v87;
          uint64_t v26 = v111;
          uint64_t v32 = v86;
LABEL_29:
          uint64_t v34 = v31;
          outlined copy of Locale.LanguageCode?(v31, v32);
          swift_bridgeObjectRelease();
          outlined consume of Locale.LanguageCode?(v34, v32);
          outlined consume of Locale.LanguageCode?(v88, (uint64_t)v120);
          outlined consume of Locale.LanguageCode?((uint64_t)v26, (uint64_t)v107);
          goto LABEL_30;
        }

        outlined copy of TermOfAddress?( v87,  0LL,  (uint64_t)v109,  (uint64_t)v118,  v88,  v23,  isEscapingClosureAtFileLocation,  v22,  (uint64_t)v26,  (uint64_t)v107,  (uint64_t)v9,  v10,  v11);
        outlined copy of Locale.LanguageCode?(v87, 0LL);
        outlined copy of Locale.LanguageCode?(v88, (uint64_t)v120);
        outlined copy of Locale.LanguageCode?((uint64_t)v26, (uint64_t)v107);
        specialized _withFixedCharBuffer(size:_:)(257LL, (uint64_t *)&v128);
        uint64_t v102 = v33;
        outlined consume of Locale.LanguageCode?(v87, 0LL);
        outlined consume of Locale.LanguageCode?(v88, (uint64_t)v120);
        outlined consume of Locale.LanguageCode?((uint64_t)v26, (uint64_t)v107);
        if (v102)
        {
          String.lowercased()();
          uint64_t v32 = 0LL;
          uint64_t v31 = v87;
          goto LABEL_29;
        }

        __int128 v124 = v130;
        __int128 v125 = v131;
        __int128 v126 = v132;
        __int128 v127 = v133;
        __int128 aBlock = v128;
        __int128 v123 = v129;
        Locale.Language.maximalIdentifier.getter();
        outlined consume of Locale.LanguageCode?(v87, 0LL);
        outlined consume of Locale.LanguageCode?(v88, (uint64_t)v120);
        outlined consume of Locale.LanguageCode?((uint64_t)v26, (uint64_t)v107);
LABEL_30:
        uint64_t v35 = String._bridgeToObjectiveCImpl()();
        swift_bridgeObjectRelease();
        uint64_t v36 = *(char **)(v11 + 16);
        if (v36)
        {
          *(void *)&__int128 aBlock = MEMORY[0x18961AFE8];
          specialized ContiguousArray.reserveCapacity(_:)();
          uint64_t v37 = 0LL;
          uint64_t v99 = (void *)v11;
          while (1)
          {
            uint64_t v121 = v36;
            uint64_t v114 = v37;
            uint64_t v39 = v11 + v37;
            uint64_t v40 = *(unsigned __int8 *)(v39 + 48);
            uint64_t v41 = *(unsigned __int8 *)(v39 + 49);
            uint64_t v42 = *(unsigned __int8 *)(v39 + 50);
            uint64_t v43 = *(unsigned __int8 *)(v39 + 64);
            uint64_t v108 = *(unsigned __int8 *)(v39 + 66);
            int v44 = *(unsigned __int8 *)(v39 + 67);
            int v110 = *(unsigned __int8 *)(v39 + 68);
            uint64_t v45 = *(void *)(v39 + 80);
            uint64_t v112 = *(void *)(v39 + 72);
            unint64_t v103 = *(unsigned int *)(v39 + 88);
            uint64_t v105 = *(unsigned __int8 *)(v39 + 92);
            uint64_t v119 = String._bridgeToObjectiveCImpl()();
            id v46 = objc_allocWithZone((Class)&OBJC_CLASS___NSMorphology);
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            id v47 = objc_msgSend(v46, sel_init);
            unint64_t v48 = v47;
            if (v40 == 3)
            {
              if ((_DWORD)v42 == 6) {
                goto LABEL_36;
              }
            }

            else
            {
              objc_msgSend(v47, sel_setGrammaticalGender_, v40 + 1);
              if ((_DWORD)v42 == 6)
              {
LABEL_36:
                if ((_DWORD)v41 != 14) {
                  goto LABEL_53;
                }
                goto LABEL_37;
              }
            }

            objc_msgSend(v48, sel_setNumber_, v42 + 1);
            if ((_DWORD)v41 != 14)
            {
LABEL_53:
              objc_msgSend(v48, sel_setPartOfSpeech_, v41 + 1);
              if ((_DWORD)v43 == 14) {
                goto LABEL_39;
              }
LABEL_38:
              objc_msgSend(v48, sel_setGrammaticalCase_, v43 + 1);
              goto LABEL_39;
            }

uint64_t Range<>.init(_:in:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, void *a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v5 = (_OWORD *)*a3;
  if (result != 0x7FFFFFFFFFFFFFFFLL && (result & 0x8000000000000000LL) == 0 && (a2 & 0x8000000000000000LL) == 0)
  {
    uint64_t v6 = result + a2;
    if (__OFADD__(result, a2))
    {
      __break(1u);
      return result;
    }

    __int128 v7 = v5[2];
    v29[3] = v5[1];
    v29[4] = v7;
    v29[5] = v5[3];
    BigString.utf16.getter();
    uint64_t v8 = BigString.UTF16View.count.getter();
    outlined release of Locale((uint64_t)&v26);
    if (v8 >= v6)
    {
      __int128 v9 = v5[1];
      __int128 v10 = v5[3];
      v29[1] = v5[2];
      v29[2] = v10;
      v29[0] = v9;
      __int128 v11 = v5[1];
      v30[1] = v5[2];
      v30[2] = v10;
      v30[0] = v11;
      outlined init with take of any PredicateExpression<Self.Output == B1>(v30, (uint64_t)v31);
      outlined retain of Locale((uint64_t)v31);
      swift_release();
      BigString.utf16.getter();
      BigString.startIndex.getter();
      uint64_t v12 = BigString.UTF16View.index(_:offsetBy:)();
      uint64_t v14 = v13;
      uint64_t v16 = v15;
      uint64_t v18 = v17;
      outlined release of Locale((uint64_t)v27);
      BigString.utf16.getter();
      uint64_t v19 = BigString.UTF16View.index(_:offsetBy:)();
      uint64_t v21 = v20;
      uint64_t v23 = v22;
      uint64_t v25 = v24;
      outlined release of Locale((uint64_t)v29);
      uint64_t result = outlined release of Locale((uint64_t)v28);
      *a4 = v12;
      a4[1] = v14;
      a4[2] = v16;
      a4[3] = v18;
      a4[4] = v19;
      a4[5] = v21;
      a4[6] = v23;
      a4[7] = v25;
      return result;
    }
  }

  uint64_t result = swift_release();
  *a4 = 0LL;
  a4[1] = 0LL;
  a4[2] = 0LL;
  a4[3] = 2LL;
  *((_OWORD *)a4 + 2) = 0u;
  *((_OWORD *)a4 + 3) = 0u;
  return result;
}

uint64_t one-time initialization function for inflectionAlternative()
{
  uint64_t result = String._bridgeToObjectiveCImpl()();
  static NSAttributedStringKey.inflectionAlternative = result;
  return result;
}

uint64_t one-time initialization function for language()
{
  uint64_t result = String._bridgeToObjectiveCImpl()();
  static NSAttributedStringKey.language = result;
  return result;
}

uint64_t AttributedString.inflected()@<X0>(void *a1@<X8>)
{
  uint64_t v3 = &v229;
  uint64_t v4 = *v1;
  if (one-time initialization token for cache != -1) {
    goto LABEL_43;
  }
  while (1)
  {
    uint64_t v200 = static LocaleCache.cache;
    uint64_t v149 = LocaleCache.current.getter();
    uint64_t v6 = v5;
    __int128 v7 = v4[2];
    v3[84] = v4[1];
    v3[85] = v7;
    v3[86] = v4[3];
    unint64_t v8 = BigString.startIndex.getter();
    uint64_t v10 = v9;
    id v12 = v11;
    uint64_t v14 = v13;
    unint64_t v15 = BigString.endIndex.getter();
    if (v15 >> 10 < v8 >> 10)
    {
      __break(1u);
      goto LABEL_45;
    }

    __int128 v147 = a1;
    uint64_t v148 = v6;
    uint64_t v237 = MEMORY[0x18961AFE8];
    uint64_t v19 = v4 + 1;
    unint64_t v268 = v8;
    uint64_t v269 = v10;
    id v270 = v12;
    uint64_t v271 = v14;
    unint64_t v272 = v15;
    uint64_t v273 = v16;
    uint64_t v274 = v17;
    uint64_t v275 = v18;
    BigString.unicodeScalars.getter();
    swift_retain_n();
    BigString.UnicodeScalarView.subscript.getter();
    outlined release of Locale((uint64_t)&v238);
    outlined release of Locale((uint64_t)v239);
    swift_release();
    v249[4] = v239[3];
    v249[5] = v239[4];
    v249[6] = v239[5];
    v249[7] = v239[6];
    AttributedString.Runs.init(_:in:)((uint64_t)v4, &v212);
    uint64_t v20 = MEMORY[0x18961AFE8];
    __int128 v233 = v217;
    __int128 v234 = v218;
    __int128 v235 = v219;
    __int128 v236 = v220;
    __int128 v229 = v213;
    __int128 v230 = v214;
    __int128 v231 = v215;
    __int128 v232 = v216;
    uint64_t v21 = (uint64_t)v212;
    uint64_t v22 = (void *)v221;
    uint64_t v23 = v222;
    uint64_t v24 = v223;
    id v25 = v224;
    uint64_t v26 = (const void *)v225;
    uint64_t v27 = (void *)(v221 >> 10);
    uint64_t v28 = v226;
    id v29 = v227;
    uint64_t v14 = MEMORY[0x18961AFE8];
    uint64_t v30 = v228;
    unint64_t v167 = (void *)(v225 >> 10);
    uint64_t v153 = v4;
    if (v221 >> 10 == v225 >> 10) {
      break;
    }
    uint64_t v173 = v228;
    unint64_t v174 = v227;
    int v159 = v4 + 1;
    uint64_t v160 = v226;
    uint64_t v164 = (const void *)v225;
    uint64_t v165 = v212;
    unint64_t v157 = v201;
    __int128 v158 = &v194[1];
    unint64_t v156 = &v180;
    uint64_t v150 = &v247;
    uint64_t v151 = &v244;
    uint64_t v152 = 0x80000001839C8020LL;
    uint64_t v162 = v223;
    unint64_t v163 = v222;
    uint64_t v161 = v224;
    uint64_t v166 = (void *)v221;
    unint64_t v31 = v221;
    while (1)
    {
      unint64_t v171 = v23;
      uint64_t v172 = v24;
      uint64_t v176 = (uint64_t)v25;
      unint64_t v177 = v31;
      id v178 = v27;
      __int128 v44 = v233;
      __int128 v43 = v234;
      __int128 v45 = v232;
      id v46 = v156;
      *((_OWORD *)v156 + 4) = v233;
      *((_OWORD *)v46 + 5) = v43;
      __int128 v47 = v234;
      __int128 v49 = v235;
      __int128 v48 = v236;
      *((_OWORD *)v46 + 6) = v235;
      *((_OWORD *)v46 + 7) = v48;
      __int128 v50 = v230;
      *(_OWORD *)id v46 = v229;
      *((_OWORD *)v46 + 1) = v50;
      __int128 v51 = v232;
      __int128 v53 = v229;
      __int128 v52 = v230;
      __int128 v54 = v231;
      *((_OWORD *)v46 + 2) = v231;
      *((_OWORD *)v46 + 3) = v51;
      uint64_t v55 = v158;
      *((_OWORD *)v158 + 4) = v44;
      v55[5] = v47;
      __int128 v56 = v236;
      v55[6] = v49;
      v55[7] = v56;
      *uint64_t v55 = v53;
      v55[1] = v52;
      v55[2] = v54;
      v55[3] = v45;
      uint64_t v3 = v165;
      uint64_t v57 = v166;
      v194[0] = v165;
      v194[17] = v166;
      uint64_t v59 = v162;
      uint64_t v58 = v163;
      v194[18] = v163;
      v194[19] = v162;
      uint64_t v60 = v160;
      uint64_t v61 = v161;
      v194[20] = v161;
      uint64_t v62 = v164;
      v194[21] = v164;
      v194[22] = v160;
      v194[23] = v174;
      v194[24] = v173;
      v193[0] = v31;
      v193[1] = (unint64_t)v23;
      v193[2] = (unint64_t)v24;
      v193[3] = (unint64_t)v25;
      AttributedString.Runs.subscript.getter(v193, &v195);
      unint64_t v170 = v196;
      unint64_t v168 = (unint64_t)v195;
      uint64_t v169 = v199;
      __int128 v63 = v234;
      uint64_t v64 = v157;
      v157[4] = v233;
      v64[5] = v63;
      __int128 v65 = v236;
      v64[6] = v235;
      v64[7] = v65;
      __int128 v66 = v230;
      *uint64_t v64 = v229;
      v64[1] = v66;
      __int128 v67 = v232;
      v64[2] = v231;
      v64[3] = v67;
      uint64_t v200 = (uint64_t)v3;
      unint64_t v202 = v57;
      unint64_t v203 = v58;
      int v204 = v59;
      id v205 = v61;
      uint64_t v206 = v62;
      uint64_t v207 = v60;
      uint64_t v208 = v174;
      uint64_t v209 = v173;
      uint64_t v210 = &outlined read-only object #0 of AttributedString.inflected();
      uint64_t v68 = MEMORY[0x18961AFE8];
      uint64_t v211 = MEMORY[0x18961AFE8];
      __int128 v179 = v3;
      uint64_t v185 = v57;
      uint64_t v186 = v58;
      uint64_t v187 = v59;
      uint64_t v188 = v61;
      unint64_t v189 = v62;
      uint64_t v190 = v60;
      unint64_t v191 = v174;
      uint64_t v192 = v173;
      int64_t v195 = (void *)v177;
      a1 = v171;
      unint64_t v196 = v171;
      uint64_t v4 = v172;
      unint64_t v197 = v172;
      uint64_t v198 = v176;
      swift_retain();
      outlined retain of ReversedCollection<AttributedString.Runs.AttributesSlice1<AttributeScopes.FoundationAttributes.InflectionRuleAttribute>>((uint64_t)&v200);
      AttributedString.Runs._slicedRunBoundary(after:attributeNames:constraints:)( (unint64_t *)&v195,  (uint64_t)&outlined read-only object #0 of AttributedString.inflected(),  v68,  v194);
      swift_release();
      outlined release of ReversedCollection<AttributedString.Runs.AttributesSlice1<AttributeScopes.FoundationAttributes.InflectionRuleAttribute>>.Iterator((uint64_t)&v200);
      id v175 = (id)v194[0];
      unint64_t v38 = (void *)(v194[0] >> 10);
      unint64_t v41 = v194[1];
      uint64_t v42 = (void *)v194[2];
      id v178 = (id)v194[3];
      unint64_t v69 = v168;
      if (*(void *)(v168 + 16)
        && (unint64_t v70 = specialized __RawDictionaryStorage.find<A>(_:)(0xD000000000000012LL, v152), (v71 & 1) != 0))
      {
        outlined init with copy of AttributedString._AttributeValue(*(void *)(v69 + 56) + 72 * v70, (uint64_t)v194);
        outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>( (uint64_t)v194,  (uint64_t)&v179);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Hashable & Sendable);
        swift_dynamicCast();
        outlined destroy of AttributedString._AttributeValue((uint64_t)v194);
        char v72 = 0;
        LOBYTE(v196) = 0;
        uint64_t v73 = v195;
      }

      else
      {
        uint64_t v73 = 0LL;
        int64_t v195 = 0LL;
        char v72 = 1;
        LOBYTE(v196) = 1;
      }

      swift_release();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v72 & 1) == 0)
      {
        uint64_t v169 = v73;
        unint64_t v170 = v42;
        uint64_t v154 = (uint64_t)v38;
        uint64_t v74 = v159;
        __int128 v75 = v159[1];
        __int128 v265 = *v159;
        __int128 v266 = v75;
        __int128 v267 = v159[2];
        BigString.startIndex.getter();
        unint64_t v168 = v76;
        uint64_t v155 = v77;
        BigString.endIndex.getter();
        BigString.utf16.getter();
        v276[0] = v265;
        v276[1] = v266;
        v276[2] = v267;
        outlined init with take of any PredicateExpression<Self.Output == B1>(v276, (uint64_t)v277);
        outlined retain of Locale((uint64_t)v277);
        unint64_t v78 = v177;
        uint64_t v79 = a1;
        unint64_t v168 = BigString.UTF16View.distance(from:to:)();
        outlined release of Locale((uint64_t)&v240);
        BigString.utf16.getter();
        id v80 = v175;
        unint64_t v81 = v41;
        uint64_t v82 = v170;
        uint64_t v155 = BigString.UTF16View.distance(from:to:)();
        outlined release of Locale((uint64_t)&v265);
        outlined release of Locale((uint64_t)&v241);
        __int128 v83 = v74[1];
        __int128 v262 = *v74;
        __int128 v263 = v83;
        __int128 v264 = v74[2];
        BigString.startIndex.getter();
        BigString.endIndex.getter();
        unint64_t v251 = v78;
        __int128 v252 = v79;
        __int128 v253 = v4;
        uint64_t v254 = v176;
        id v255 = v80;
        unint64_t v177 = v81;
        unint64_t v256 = v81;
        uint64_t v257 = v82;
        id v258 = v178;
        BigString.unicodeScalars.getter();
        uint64_t v84 = v153;
        swift_retain_n();
        BigString.UnicodeScalarView.subscript.getter();
        outlined release of Locale((uint64_t)&v242);
        outlined release of Locale((uint64_t)&v243);
        swift_release();
        __int128 v85 = *((_OWORD *)v151 + 1);
        v249[0] = *(_OWORD *)v151;
        v249[1] = v85;
        __int128 v86 = *((_OWORD *)v151 + 3);
        v249[2] = *((_OWORD *)v151 + 2);
        v249[3] = v86;
        swift_retain();
        specialized AttributedString.Guts.getUniformValue<A>(in:key:)(v249, (uint64_t)v194);
        if (v194[3])
        {
          outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>( (uint64_t)v194,  (uint64_t)&v179);
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Hashable & Sendable);
          swift_dynamicCast();
          outlined destroy of AttributedString._AttributeValue((uint64_t)v194);
        }

        else
        {
          outlined destroy of Any?( (uint64_t)v194,  &demangling cache variable for type metadata for AttributedString._AttributeValue?);
          unint64_t v196 = 0LL;
          int64_t v195 = 0LL;
          LODWORD(v197) = 0;
          BYTE4(v197) = -1;
        }

        swift_release_n();
        uint64_t v87 = v159;
        if (BYTE4(v197) != 255LL) {
          __asm { BR              X9 }
        }

        __int128 v88 = v159[1];
        __int128 v259 = *v159;
        __int128 v260 = v88;
        __int128 v261 = v159[2];
        BigString.startIndex.getter();
        BigString.endIndex.getter();
        BigString.unicodeScalars.getter();
        swift_retain_n();
        BigString.UnicodeScalarView.subscript.getter();
        outlined release of Locale((uint64_t)&v245);
        outlined release of Locale((uint64_t)&v246);
        swift_release();
        __int128 v89 = *((_OWORD *)v150 + 1);
        v248[7] = *(_OWORD *)v150;
        v248[8] = v89;
        __int128 v90 = *((_OWORD *)v150 + 3);
        v248[9] = *((_OWORD *)v150 + 2);
        v248[10] = v90;
        __int128 v91 = *v87;
        __int128 v92 = v87[1];
        v250[2] = v87[2];
        v250[1] = v92;
        v250[0] = v91;
        swift_retain();
        outlined retain of Locale((uint64_t)v250);
        BigString.subscript.getter();
        outlined release of Locale((uint64_t)v250);
        outlined release of Locale((uint64_t)v248);
        swift_release();
        *(_OWORD *)&v194[1] = v248[3];
        *(_OWORD *)&v194[3] = v248[4];
        *(_OWORD *)&v194[5] = v248[5];
        *(_OWORD *)&v194[7] = v248[6];
        v194[0] = v84;
        v194[9] = 0LL;
        lazy protocol witness table accessor for type AttributedString.CharacterView and conformance AttributedString.CharacterView();
        String.init<A>(_:)();
        uint64_t v93 = String._bridgeToObjectiveCImpl()();
        swift_bridgeObjectRelease();
        v194[3] = type metadata accessor for NSMorphologyPronoun( 0LL,  (unint64_t *)&lazy cache variable for type metadata for NSString);
        v194[0] = v93;
        outlined init with copy of (Hashable & Sendable)?( (uint64_t)v194,  (uint64_t)&v179,  &demangling cache variable for type metadata for Any?);
        unint64_t v94 = v182;
        if (v182)
        {
          uint64_t v32 = __swift_project_boxed_opaque_existential_1(&v179, (uint64_t)v182);
          uint64_t v33 = *(v94 - 1);
          __n128 v34 = MEMORY[0x1895F8858](v32);
          uint64_t v36 = (char *)v146 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0LL);
          (*(void (**)(char *, __n128))(v33 + 16))(v36, v34);
          uint64_t v37 = _bridgeAnythingToObjectiveC<A>(_:)();
          (*(void (**)(char *, void *))(v33 + 8))(v36, v94);
          __swift_destroy_boxed_opaque_existential_1((uint64_t)&v179);
        }

        else
        {
          uint64_t v37 = 0LL;
        }

        unint64_t v38 = (void *)v154;
        id v39 = objc_allocWithZone((Class)&OBJC_CLASS____NSAttributedStringReplacement);
        objc_msgSend( v39,  sel_initWithIndex_specifierRangeInFormatString_replacementRangeInResult_replacementKind_argument_,  v169,  0x7FFFFFFFFFFFFFFFLL,  0x7FFFFFFFFFFFFFFFLL,  v168,  v155,  0,  v37);
        uint64_t v40 = swift_unknownObjectRelease();
        MEMORY[0x186E1BAC0](v40);
        if (*(void *)((v237 & 0xFFFFFFFFFFFFFF8LL) + 0x10) >= *(void *)((v237 & 0xFFFFFFFFFFFFFF8LL) + 0x18) >> 1) {
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        }
        specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized Array._endMutation()();
        outlined destroy of Any?((uint64_t)v194, &demangling cache variable for type metadata for Any?);
        unint64_t v41 = v177;
        uint64_t v42 = v170;
      }

      uint64_t v23 = (void *)v41;
      uint64_t v24 = v42;
      id v25 = v178;
      unint64_t v31 = (unint64_t)v175;
      uint64_t v27 = v38;
      if (v38 == v167)
      {
        uint64_t v14 = v237;
        uint64_t v20 = MEMORY[0x18961AFE8];
        uint64_t v4 = v153;
        uint64_t v19 = v159;
        uint64_t v28 = v160;
        uint64_t v21 = (uint64_t)v165;
        uint64_t v22 = v166;
        uint64_t v23 = v163;
        uint64_t v26 = v164;
        id v25 = v161;
        uint64_t v24 = v162;
        uint64_t v30 = v173;
        id v29 = v174;
        goto LABEL_25;
      }
    }

    __break(1u);
LABEL_43:
    swift_once();
  }

uint64_t AttributedString.inflected(locale:userTermOfAddress:inflectionConcepts:)@<X0>( __int128 *a1@<X0>, unint64_t *a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  __int128 v124 = *a1;
  unint64_t v7 = a2[1];
  unint64_t v125 = *a2;
  unint64_t v8 = a2[2];
  unint64_t v122 = a2[3];
  unint64_t v123 = v8;
  unint64_t v9 = a2[4];
  unint64_t v120 = a2[5];
  unint64_t v121 = v9;
  unint64_t v10 = a2[6];
  unint64_t v118 = a2[7];
  unint64_t v119 = v10;
  unint64_t v11 = a2[8];
  unint64_t v116 = a2[9];
  unint64_t v117 = v11;
  unint64_t v12 = a2[10];
  unint64_t v114 = a2[11];
  unint64_t v115 = v12;
  unint64_t v113 = a2[12];
  uint64_t v13 = *v4;
  __int128 v14 = *(_OWORD *)(*v4 + 16);
  __int128 v15 = *(_OWORD *)(*v4 + 48);
  __int128 v266 = *(_OWORD *)(*v4 + 32);
  __int128 v267 = v15;
  __int128 v265 = v14;
  unint64_t v16 = BigString.startIndex.getter();
  uint64_t v18 = v17;
  uint64_t v20 = v19;
  uint64_t v22 = v21;
  unint64_t v23 = BigString.endIndex.getter();
  if (v23 >> 10 < v16 >> 10) {
    goto LABEL_26;
  }
  unint64_t v112 = v7;
  uint64_t v226 = MEMORY[0x18961AFE8];
  unint64_t v257 = v16;
  uint64_t v258 = v18;
  uint64_t v259 = v20;
  uint64_t v260 = v22;
  unint64_t v261 = v23;
  uint64_t v262 = v24;
  uint64_t v263 = v25;
  uint64_t v264 = v26;
  BigString.unicodeScalars.getter();
  swift_retain_n();
  BigString.UnicodeScalarView.subscript.getter();
  outlined release of Locale((uint64_t)&v227);
  outlined release of Locale((uint64_t)v228);
  swift_release();
  v238[4] = v228[3];
  v238[5] = v228[4];
  v238[6] = v228[5];
  v238[7] = v228[6];
  AttributedString.Runs.init(_:in:)(v13, &v201);
  uint64_t v27 = MEMORY[0x18961AFE8];
  __int128 v222 = v206;
  __int128 v223 = v207;
  __int128 v224 = v208;
  __int128 v225 = v209;
  __int128 v218 = v202;
  __int128 v219 = v203;
  __int128 v220 = v204;
  __int128 v221 = v205;
  unint64_t v28 = v201;
  unint64_t v29 = v210;
  unint64_t v30 = v211;
  unint64_t v31 = v212;
  unint64_t v32 = v213;
  unint64_t v33 = v214;
  unint64_t v34 = v210 >> 10;
  uint64_t v35 = v215;
  uint64_t v36 = v216;
  uint64_t v37 = MEMORY[0x18961AFE8];
  uint64_t v38 = v217;
  unint64_t v143 = v214 >> 10;
  unint64_t v39 = v125;
  if (v210 >> 10 != v214 >> 10)
  {
    uint64_t v153 = v217;
    uint64_t v135 = v215;
    uint64_t v136 = v216;
    unint64_t v140 = v214;
    unint64_t v141 = v201;
    uint64_t v110 = a4;
    uint64_t v111 = a3;
    char v134 = &v168;
    char v133 = v190;
    char v132 = (char *)&v156 + 8;
    __int128 v127 = &v233;
    uint64_t v128 = v13;
    __int128 v126 = &v236;
    uint64_t v129 = 0x80000001839C8020LL;
    __int128 v130 = (__int128 *)(v13 + 16);
    unint64_t v138 = v212;
    unint64_t v139 = v211;
    unint64_t v137 = v213;
    unint64_t v142 = v210;
    while (1)
    {
      unint64_t v149 = v30;
      unint64_t v150 = v31;
      unint64_t v151 = v29;
      unint64_t v152 = v32;
      unint64_t v154 = v34;
      __int128 v50 = v222;
      __int128 v51 = v223;
      __int128 v52 = v223;
      __int128 v53 = v132;
      *((_OWORD *)v132 + 4) = v222;
      v53[5] = v51;
      __int128 v54 = v224;
      __int128 v55 = v225;
      __int128 v56 = v225;
      v53[6] = v224;
      v53[7] = v55;
      __int128 v57 = v218;
      __int128 v58 = v219;
      __int128 v59 = v219;
      *__int128 v53 = v218;
      v53[1] = v58;
      __int128 v60 = v220;
      __int128 v61 = v221;
      __int128 v62 = v221;
      v53[2] = v220;
      v53[3] = v61;
      __int128 v63 = v134;
      _OWORD v134[4] = v50;
      v63[5] = v52;
      v63[6] = v54;
      v63[7] = v56;
      *__int128 v63 = v57;
      v63[1] = v59;
      v63[2] = v60;
      v63[3] = v62;
      unint64_t v65 = v141;
      unint64_t v64 = v142;
      unint64_t v167 = v141;
      unint64_t v176 = v142;
      unint64_t v66 = v138;
      unint64_t v67 = v139;
      unint64_t v177 = v139;
      unint64_t v178 = v138;
      unint64_t v68 = v137;
      unint64_t v179 = v137;
      unint64_t v69 = v140;
      unint64_t v180 = v140;
      uint64_t v70 = v135;
      uint64_t v181 = v135;
      uint64_t v182 = v136;
      uint64_t v71 = v136;
      uint64_t v183 = v153;
      v166[0] = v29;
      v166[1] = v30;
      v166[2] = v31;
      v166[3] = v32;
      AttributedString.Runs.subscript.getter(v166, &v184);
      unint64_t v147 = v185;
      uint64_t v145 = v184;
      unint64_t v146 = v188;
      __int128 v72 = v223;
      uint64_t v73 = v133;
      v133[4] = v222;
      v73[5] = v72;
      __int128 v74 = v225;
      v73[6] = v224;
      v73[7] = v74;
      __int128 v75 = v219;
      *uint64_t v73 = v218;
      v73[1] = v75;
      __int128 v76 = v221;
      v73[2] = v220;
      v73[3] = v76;
      unint64_t v189 = v65;
      unint64_t v191 = v64;
      unint64_t v192 = v67;
      unint64_t v193 = v66;
      unint64_t v194 = v68;
      unint64_t v195 = v69;
      uint64_t v196 = v70;
      uint64_t v77 = v71;
      uint64_t v197 = v71;
      uint64_t v198 = v153;
      unint64_t v199 = &outlined read-only object #0 of AttributedString.inflected(locale:userTermOfAddress:inflectionConcepts:);
      uint64_t v78 = MEMORY[0x18961AFE8];
      uint64_t v200 = MEMORY[0x18961AFE8];
      *(void *)&__int128 v156 = v65;
      unint64_t v158 = v64;
      unint64_t v159 = v67;
      unint64_t v160 = v66;
      unint64_t v161 = v68;
      unint64_t v162 = v69;
      uint64_t v163 = v70;
      uint64_t v164 = v77;
      uint64_t v165 = v153;
      unint64_t v79 = v151;
      unint64_t v184 = v151;
      unint64_t v80 = v149;
      unint64_t v185 = v149;
      unint64_t v81 = v150;
      unint64_t v186 = v150;
      unint64_t v82 = v152;
      unint64_t v187 = v152;
      swift_retain();
      outlined retain of ReversedCollection<AttributedString.Runs.AttributesSlice1<AttributeScopes.FoundationAttributes.InflectionRuleAttribute>>((uint64_t)&v189);
      AttributedString.Runs._slicedRunBoundary(after:attributeNames:constraints:)( &v184,  (uint64_t)&outlined read-only object #0 of AttributedString.inflected(locale:userTermOfAddress:inflectionConcepts:),  v78,  (uint64_t *)&v167);
      swift_release();
      outlined release of ReversedCollection<AttributedString.Runs.AttributesSlice1<AttributeScopes.FoundationAttributes.InflectionRuleAttribute>>.Iterator((uint64_t)&v189);
      unint64_t v155 = v167;
      unint64_t v148 = v167 >> 10;
      if (v167 >> 10 < v154) {
        break;
      }
      unint64_t v154 = *((void *)&v168 + 1);
      unint64_t v49 = v168;
      unint64_t v46 = v169;
      uint64_t v83 = v145;
      if (*(void *)(v145 + 16)
        && (unint64_t v84 = specialized __RawDictionaryStorage.find<A>(_:)(0xD000000000000012LL, v129), (v85 & 1) != 0))
      {
        outlined init with copy of AttributedString._AttributeValue(*(void *)(v83 + 56) + 72 * v84, (uint64_t)&v167);
        outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>( (uint64_t)&v167,  (uint64_t)&v156);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Hashable & Sendable);
        swift_dynamicCast();
        outlined destroy of AttributedString._AttributeValue((uint64_t)&v167);
        char v86 = 0;
        LOBYTE(v185) = 0;
        unint64_t v87 = v184;
      }

      else
      {
        unint64_t v87 = 0LL;
        unint64_t v184 = 0LL;
        char v86 = 1;
        LOBYTE(v185) = 1;
      }

      swift_release();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v86 & 1) == 0)
      {
        unint64_t v146 = v87;
        __int128 v88 = v130;
        __int128 v89 = v130[1];
        __int128 v254 = *v130;
        __int128 v255 = v89;
        __int128 v256 = v130[2];
        BigString.startIndex.getter();
        unint64_t v147 = v46;
        uint64_t v145 = v90;
        uint64_t v131 = v91;
        BigString.endIndex.getter();
        BigString.utf16.getter();
        v268[0] = v254;
        v268[1] = v255;
        v268[2] = v256;
        outlined init with take of any PredicateExpression<Self.Output == B1>(v268, (uint64_t)v269);
        outlined retain of Locale((uint64_t)v269);
        unint64_t v144 = v49;
        unint64_t v92 = v147;
        unint64_t v93 = v81;
        uint64_t v145 = BigString.UTF16View.distance(from:to:)();
        outlined release of Locale((uint64_t)&v229);
        BigString.utf16.getter();
        unint64_t v94 = v155;
        unint64_t v95 = v154;
        uint64_t v131 = BigString.UTF16View.distance(from:to:)();
        outlined release of Locale((uint64_t)&v254);
        outlined release of Locale((uint64_t)&v230);
        __int128 v96 = v88[1];
        __int128 v251 = *v88;
        __int128 v252 = v96;
        __int128 v253 = v88[2];
        BigString.startIndex.getter();
        BigString.endIndex.getter();
        unint64_t v240 = v79;
        unint64_t v241 = v80;
        unint64_t v242 = v93;
        unint64_t v243 = v82;
        unint64_t v244 = v94;
        unint64_t v245 = v144;
        unint64_t v246 = v95;
        unint64_t v46 = v92;
        unint64_t v247 = v92;
        BigString.unicodeScalars.getter();
        unint64_t v97 = v128;
        swift_retain_n();
        BigString.UnicodeScalarView.subscript.getter();
        outlined release of Locale((uint64_t)&v231);
        outlined release of Locale((uint64_t)&v232);
        swift_release();
        __int128 v98 = *((_OWORD *)v127 + 1);
        v238[0] = *(_OWORD *)v127;
        v238[1] = v98;
        __int128 v99 = *((_OWORD *)v127 + 3);
        v238[2] = *((_OWORD *)v127 + 2);
        void v238[3] = v99;
        swift_retain();
        specialized AttributedString.Guts.getUniformValue<A>(in:key:)(v238, (uint64_t)&v167);
        if ((void)v169)
        {
          outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>( (uint64_t)&v167,  (uint64_t)&v156);
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Hashable & Sendable);
          swift_dynamicCast();
          outlined destroy of AttributedString._AttributeValue((uint64_t)&v167);
        }

        else
        {
          outlined destroy of Any?( (uint64_t)&v167,  &demangling cache variable for type metadata for AttributedString._AttributeValue?);
          unint64_t v185 = 0LL;
          unint64_t v184 = 0LL;
          LODWORD(v186) = 0;
          BYTE4(v186) = -1;
        }

        swift_release_n();
        if (BYTE4(v186) != 255LL) {
          __asm { BR              X9 }
        }

        uint64_t v100 = v130;
        __int128 v101 = v130[1];
        __int128 v248 = *v130;
        __int128 v249 = v101;
        __int128 v250 = v130[2];
        BigString.startIndex.getter();
        BigString.endIndex.getter();
        BigString.unicodeScalars.getter();
        swift_retain_n();
        BigString.UnicodeScalarView.subscript.getter();
        outlined release of Locale((uint64_t)&v234);
        outlined release of Locale((uint64_t)&v235);
        swift_release();
        __int128 v102 = *((_OWORD *)v126 + 1);
        v237[7] = *(_OWORD *)v126;
        v237[8] = v102;
        __int128 v103 = *((_OWORD *)v126 + 3);
        v237[9] = *((_OWORD *)v126 + 2);
        v237[10] = v103;
        __int128 v104 = *v100;
        __int128 v105 = v100[1];
        v239[2] = v100[2];
        v239[1] = v105;
        v239[0] = v104;
        swift_retain();
        outlined retain of Locale((uint64_t)v239);
        BigString.subscript.getter();
        outlined release of Locale((uint64_t)v239);
        outlined release of Locale((uint64_t)v237);
        swift_release();
        __int128 v168 = v237[3];
        __int128 v169 = v237[4];
        __int128 v170 = v237[5];
        __int128 v171 = v237[6];
        unint64_t v167 = v97;
        unint64_t v172 = 0LL;
        lazy protocol witness table accessor for type AttributedString.CharacterView and conformance AttributedString.CharacterView();
        String.init<A>(_:)();
        uint64_t v106 = String._bridgeToObjectiveCImpl()();
        swift_bridgeObjectRelease();
        uint64_t v107 = type metadata accessor for NSMorphologyPronoun( 0LL,  (unint64_t *)&lazy cache variable for type metadata for NSString);
        unint64_t v152 = 0LL;
        *(void *)&__int128 v169 = v107;
        unint64_t v167 = v106;
        outlined init with copy of (Hashable & Sendable)?( (uint64_t)&v167,  (uint64_t)&v156,  &demangling cache variable for type metadata for Any?);
        uint64_t v108 = v157;
        if (v157)
        {
          uint64_t v40 = __swift_project_boxed_opaque_existential_1(&v156, v157);
          uint64_t v41 = *(void *)(v108 - 8);
          __n128 v42 = MEMORY[0x1895F8858](v40);
          __int128 v44 = (char *)&v110 - ((v43 + 15) & 0xFFFFFFFFFFFFFFF0LL);
          (*(void (**)(char *, __n128))(v41 + 16))(v44, v42);
          uint64_t v45 = _bridgeAnythingToObjectiveC<A>(_:)();
          (*(void (**)(char *, uint64_t))(v41 + 8))(v44, v108);
          unint64_t v46 = v147;
          __swift_destroy_boxed_opaque_existential_1((uint64_t)&v156);
        }

        else
        {
          uint64_t v45 = 0LL;
        }

        id v47 = objc_allocWithZone((Class)&OBJC_CLASS____NSAttributedStringReplacement);
        objc_msgSend( v47,  sel_initWithIndex_specifierRangeInFormatString_replacementRangeInResult_replacementKind_argument_,  v146,  0x7FFFFFFFFFFFFFFFLL,  0x7FFFFFFFFFFFFFFFLL,  v145,  v131,  v152,  v45);
        uint64_t v48 = swift_unknownObjectRelease();
        MEMORY[0x186E1BAC0](v48);
        if (*(void *)((v226 & 0xFFFFFFFFFFFFFF8LL) + 0x10) >= *(void *)((v226 & 0xFFFFFFFFFFFFFF8LL) + 0x18) >> 1) {
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        }
        specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized Array._endMutation()();
        outlined destroy of Any?((uint64_t)&v167, &demangling cache variable for type metadata for Any?);
        unint64_t v49 = v144;
      }

      unint64_t v30 = v49;
      unint64_t v31 = v154;
      unint64_t v29 = v155;
      unint64_t v32 = v46;
      unint64_t v34 = v148;
      if (v148 == v143)
      {
        uint64_t v37 = v226;
        a4 = v110;
        a3 = v111;
        unint64_t v39 = v125;
        uint64_t v13 = v128;
        uint64_t v27 = MEMORY[0x18961AFE8];
        unint64_t v28 = v141;
        unint64_t v29 = v142;
        unint64_t v30 = v139;
        unint64_t v33 = v140;
        unint64_t v32 = v137;
        unint64_t v31 = v138;
        uint64_t v35 = v135;
        uint64_t v36 = v136;
        uint64_t v38 = v153;
        goto LABEL_24;
      }
    }

    __break(1u);
LABEL_26:
    __break(1u);
    JUMPOUT(0x1834EB2A0LL);
  }

uint64_t closure #3 in AttributedString.inflected(locale:userTermOfAddress:replacements:concepts:preflight:)( uint64_t a1)
{
  uint64_t v1 = *(_OWORD **)(a1 + 16);
  __int128 v2 = v1[2];
  v5[3] = v1[1];
  v5[4] = v2;
  v5[5] = v1[3];
  BigString.utf16.getter();
  uint64_t v3 = BigString.UTF16View.count.getter();
  outlined release of Locale((uint64_t)v5);
  return v3;
}

uint64_t thunk for @escaping @callee_guaranteed () -> (@unowned Int)(uint64_t a1)
{
  uint64_t v1 = *(uint64_t (**)(uint64_t))(a1 + 32);
  uint64_t v2 = swift_retain();
  uint64_t v3 = v1(v2);
  swift_release();
  return v3;
}

uint64_t closure #4 in AttributedString.inflected(locale:userTermOfAddress:replacements:concepts:preflight:)( void *a1, uint64_t a2, uint64_t a3, void (*a4)(void *, uint64_t, uint64_t, char *), uint64_t a5, uint64_t a6)
{
  *(void *)&__int128 v31 = *(void *)(a6 + 16);
  swift_retain();
  uint64_t result = Range<>.init(_:in:)(a2, a3, &v31, (uint64_t *)&v26);
  if (v28 != 2)
  {
    __int128 v31 = v26;
    uint64_t v32 = v27;
    uint64_t v33 = v28;
    __int128 v34 = v29;
    __int128 v35 = v30;
    id v13 = static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSInflect");
    uint64_t v15 = v14;
    if (v13 == static String._unconditionallyBridgeFromObjectiveC(_:)(a1) && v15 == v16)
    {
      swift_bridgeObjectRelease_n();
    }

    else
    {
      char v18 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v18 & 1) == 0)
      {
        if (one-time initialization token for inflectionAlternative != -1) {
          swift_once();
        }
        id v19 = static String._unconditionallyBridgeFromObjectiveC(_:)((void *)static NSAttributedStringKey.inflectionAlternative);
        uint64_t v21 = v20;
        if (v19 == static String._unconditionallyBridgeFromObjectiveC(_:)(a1) && v21 == v22)
        {
          swift_bridgeObjectRelease_n();
        }

        else
        {
          char v24 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          uint64_t result = swift_bridgeObjectRelease();
          if ((v24 & 1) == 0) {
            return result;
          }
        }

        uint64_t v25 = *(_OWORD **)(a6 + 16);
        swift_retain();
        swift_retain();
        swift_retain();
        specialized AttributedString.enumerate<A>(_:in:editor:)(&v31, v25, a4, a5, a6);
LABEL_17:
        swift_release();
        swift_release();
        return swift_release();
      }
    }

    unint64_t v23 = *(_OWORD **)(a6 + 16);
    swift_retain();
    swift_retain();
    swift_retain();
    specialized AttributedString.enumerate<A>(_:in:editor:)(&v31, v23, a4, a5, a6);
    goto LABEL_17;
  }

  return result;
}

uint64_t thunk for @callee_guaranteed (@guaranteed NSAttributedStringKey, @unowned _NSRange, @guaranteed @escaping @callee_guaranteed (@in_guaranteed Any?, @unowned _NSRange, @unowned UnsafeMutablePointer<ObjCBool>) -> ()) -> ()( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t (*a6)(void))
{
  return a6();
}

void thunk for @escaping @callee_guaranteed (@guaranteed NSAttributedStringKey, @unowned _NSRange, @guaranteed @escaping @callee_guaranteed (@in_guaranteed Any?, @unowned _NSRange, @unowned UnsafeMutablePointer<ObjCBool>) -> ()) -> ()( uint64_t a1, void *a2, int a3, int a4, void *aBlock)
{
  uint64_t v6 = *(void (**)(void))(a1 + 32);
  unint64_t v7 = _Block_copy(aBlock);
  *(void *)(swift_allocObject() + 16) = v7;
  id v8 = a2;
  v6();
  swift_release();
}

uint64_t thunk for @escaping @callee_unowned @convention(block) (@unowned Swift.AnyObject?, @unowned _NSRange, @unowned UnsafeMutablePointer<ObjCBool>) -> ()( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9 = v18;
  if (v18)
  {
    unint64_t v10 = __swift_project_boxed_opaque_existential_1(v17, v18);
    uint64_t v11 = *(void *)(v9 - 8);
    __n128 v12 = MEMORY[0x1895F8858](v10);
    uint64_t v14 = (char *)v17 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
    (*(void (**)(char *, __n128))(v11 + 16))(v14, v12);
    uint64_t v15 = _bridgeAnythingToObjectiveC<A>(_:)();
    (*(void (**)(char *, uint64_t))(v11 + 8))(v14, v9);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v17);
  }

  else
  {
    uint64_t v15 = 0LL;
  }

  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(a5 + 16))(a5, v15, a2, a3, a4);
  return swift_unknownObjectRelease();
}

uint64_t closure #5 in AttributedString.inflected(locale:userTermOfAddress:replacements:concepts:preflight:)( uint64_t a1, uint64_t a2, void (*a3)(_BYTE *, uint64_t, uint64_t, char *), uint64_t a4, uint64_t a5)
{
  uint64_t v88 = *MEMORY[0x1895F89C0];
  *(void *)&v77[0] = *(void *)(a5 + 16);
  swift_retain();
  uint64_t result = Range<>.init(_:in:)(a1, a2, v77, (uint64_t *)&v58);
  uint64_t v9 = v60;
  if (v60 != 2)
  {
    uint64_t v11 = v62;
    uint64_t v10 = v63;
    uint64_t v12 = v59;
    __int128 v36 = v58;
    __int128 v37 = v61;
    uint64_t v13 = *(_OWORD **)(a5 + 16);
    __int128 v14 = v13[2];
    __int128 v85 = v13[1];
    __int128 v86 = v14;
    __int128 v87 = v13[3];
    BigString.startIndex.getter();
    BigString.endIndex.getter();
    __int128 v79 = v36;
    uint64_t v80 = v12;
    uint64_t v81 = v9;
    __int128 v82 = v37;
    uint64_t v83 = v11;
    uint64_t v84 = v10;
    BigString.unicodeScalars.getter();
    swift_retain_n();
    swift_retain();
    swift_retain();
    BigString.UnicodeScalarView.subscript.getter();
    outlined release of Locale((uint64_t)v64);
    outlined release of Locale((uint64_t)v65);
    swift_release();
    __int128 v72 = v66;
    __int128 v73 = v67;
    __int128 v74 = v68;
    __int128 v75 = v69;
    AttributedString.Runs.init(_:in:)((uint64_t)v13, &v42);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
    uint64_t v15 = swift_allocObject();
    *(_OWORD *)(v15 + 16) = xmmword_183729E20;
    if (one-time initialization token for name != -1) {
      swift_once();
    }
    uint64_t v16 = qword_18C5D2BD8;
    *(void *)(v15 + 32) = static AttributeScopes.FoundationAttributes.InflectionRuleAttribute.name;
    *(void *)(v15 + 40) = v16;
    uint64_t v17 = one-time initialization token for name;
    swift_bridgeObjectRetain();
    if (v17 != -1) {
      swift_once();
    }
    uint64_t v18 = qword_18C5D2BB8;
    *(void *)(v15 + 48) = static AttributeScopes.FoundationAttributes.AgreementArgumentAttribute.name;
    *(void *)(v15 + 56) = v18;
    uint64_t v19 = one-time initialization token for name;
    swift_bridgeObjectRetain();
    if (v19 != -1) {
      swift_once();
    }
    uint64_t v20 = qword_18C5D2BA8;
    *(void *)(v15 + 64) = static AttributeScopes.FoundationAttributes.AgreementConceptAttribute.name;
    *(void *)(v15 + 72) = v20;
    uint64_t v21 = one-time initialization token for name;
    swift_bridgeObjectRetain();
    if (v21 != -1) {
      swift_once();
    }
    uint64_t v22 = qword_18C5D2B98;
    *(void *)(v15 + 80) = static AttributeScopes.FoundationAttributes.ReferentConceptAttribute.name;
    *(void *)(v15 + 88) = v22;
    v55[10] = v52;
    v55[11] = v53;
    v55[6] = v48;
    v55[7] = v49;
    v55[8] = v50;
    v55[9] = v51;
    v55[2] = v44;
    v55[3] = v45;
    v55[4] = v46;
    v55[5] = v47;
    v55[0] = v42;
    v55[1] = v43;
    *(void *)&__int128 v56 = v54;
    *((void *)&v56 + 1) = v15;
    uint64_t v57 = MEMORY[0x18961AFE8];
    uint64_t v78 = MEMORY[0x18961AFE8];
    v77[10] = v52;
    v77[11] = v53;
    v77[6] = v48;
    v77[7] = v49;
    v77[8] = v50;
    v77[9] = v51;
    v77[2] = v44;
    v77[3] = v45;
    v77[4] = v46;
    v77[5] = v47;
    v77[0] = v42;
    v77[1] = v43;
    v77[12] = v56;
    swift_bridgeObjectRetain();
    unint64_t v23 = specialized Sequence.compactMap<A>(_:)((uint64_t)v77);
    outlined release of ReversedCollection<AttributedString.Runs.AttributesSlice1<AttributeScopes.FoundationAttributes.InflectionRuleAttribute>>.Iterator((uint64_t)v55);
    uint64_t v24 = v23[2];
    if (v24)
    {
      char v25 = 0;
      uint64_t v26 = v24 - 1;
      for (i = v23 + 6; ; i += 9)
      {
        if ((v25 & 1) != 0)
        {
          if (!v26)
          {
            swift_release();
            goto LABEL_20;
          }

          char v25 = 1;
        }

        else
        {
          uint64_t v28 = (void *)i[6];
          v41[3] = type metadata accessor for NSMorphologyPronoun( 0LL,  &lazy cache variable for type metadata for NSInflectionRule);
          v41[0] = v28;
          v40[3] = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
          v40[0] = swift_allocObject();
          outlined init with copy of (Hashable & Sendable)?( (uint64_t)v41,  v40[0] + 16LL,  &demangling cache variable for type metadata for Any?);
          v38[0] = 0;
          outlined init with copy of Any((uint64_t)v40, (uint64_t)v39);
          __int128 v29 = *(_OWORD **)(a5 + 16);
          __int128 v30 = v29[1];
          __int128 v31 = v29[3];
          v76[1] = v29[2];
          v76[2] = v31;
          v76[0] = v30;
          BigString.startIndex.getter();
          BigString.endIndex.getter();
          BigString.utf16.getter();
          id v35 = v28;
          outlined retain of Locale((uint64_t)v76);
          uint64_t v32 = BigString.UTF16View.distance(from:to:)();
          outlined release of Locale((uint64_t)v70);
          BigString.utf16.getter();
          uint64_t v33 = BigString.UTF16View.distance(from:to:)();
          outlined release of Locale((uint64_t)v76);
          outlined release of Locale((uint64_t)v71);
          a3(v39, v32, v33, v38);
          outlined destroy of Any?((uint64_t)v39, &demangling cache variable for type metadata for Any?);
          char v25 = v38[0];
          __swift_destroy_boxed_opaque_existential_1((uint64_t)v40);

          outlined destroy of Any?((uint64_t)v41, &demangling cache variable for type metadata for Any?);
          if (!v26)
          {
            swift_release();
            swift_bridgeObjectRelease();
            goto LABEL_22;
          }
        }

        --v26;
      }
    }

    swift_release();
LABEL_20:
    swift_bridgeObjectRelease();
LABEL_22:
    swift_release();
    return swift_release();
  }

  return result;
}

uint64_t thunk for @escaping @callee_guaranteed (@unowned _NSRange, @guaranteed @escaping @callee_guaranteed (@in_guaranteed Any?, @unowned _NSRange, @unowned UnsafeMutablePointer<ObjCBool>) -> ()) -> ()( uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  return thunk for @escaping @callee_guaranteed (@unowned _NSRange, @guaranteed @escaping @callee_guaranteed (@in_guaranteed Any?, @unowned _NSRange, @unowned UnsafeMutablePointer<ObjCBool>) -> ()) -> ()( a1,  a2,  a3,  a4,  (uint64_t)&unk_189C96878,  (uint64_t)partial apply for thunk for @escaping @callee_unowned @convention(block) (@unowned Swift.AnyObject?, @unowned _NSRange, @unowned UnsafeMutablePointer<ObjCBool>) -> ());
}

uint64_t closure #6 in AttributedString.inflected(locale:userTermOfAddress:replacements:concepts:preflight:)( uint64_t a1, uint64_t a2, void (*a3)(id, uint64_t, uint64_t, char *), uint64_t a4, uint64_t *a5)
{
  uint64_t v11 = *a5;
  swift_retain();
  uint64_t result = Range<>.init(_:in:)(a1, a2, &v11, (uint64_t *)&v12);
  if (v13 != 2)
  {
    uint64_t v11 = *a5;
    swift_retain();
    swift_retain();
    specialized AttributedString.enumerateFormattableRanges(in:editor:)(&v12, &v11, a3, a4, (uint64_t)a5);
    swift_release();
    return swift_release();
  }

  return result;
}

uint64_t thunk for @escaping @callee_guaranteed (@unowned _NSRange, @guaranteed @escaping @callee_guaranteed (@guaranteed NSLocalizedNumberFormatRule, @unowned _NSRange, @unowned UnsafeMutablePointer<ObjCBool>) -> ()) -> ()( uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  return thunk for @escaping @callee_guaranteed (@unowned _NSRange, @guaranteed @escaping @callee_guaranteed (@in_guaranteed Any?, @unowned _NSRange, @unowned UnsafeMutablePointer<ObjCBool>) -> ()) -> ()( a1,  a2,  a3,  a4,  (uint64_t)&unk_189C96850,  (uint64_t)partial apply for thunk for @escaping @callee_unowned @convention(block) (@unowned NSLocalizedNumberFormatRule, @unowned _NSRange, @unowned UnsafeMutablePointer<ObjCBool>) -> ());
}

uint64_t closure #7 in AttributedString.inflected(locale:userTermOfAddress:replacements:concepts:preflight:)( void *a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  unint64_t v117 = (void *)*a4;
  swift_retain();
  uint64_t result = Range<>.init(_:in:)(a2, a3, &v117, v124);
  uint64_t v9 = v125;
  if (v125 == 2) {
    return result;
  }
  uint64_t v113 = v124[0];
  uint64_t v114 = v124[1];
  uint64_t v115 = v124[2];
  uint64_t v10 = v126;
  uint64_t v11 = v127;
  __int128 v12 = v128;
  id v13 = static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSInflect");
  uint64_t v15 = v14;
  if (v13 == static String._unconditionallyBridgeFromObjectiveC(_:)(a1) && v15 == v16)
  {
    swift_bridgeObjectRelease_n();
    goto LABEL_16;
  }

  char v18 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v18 & 1) != 0)
  {
LABEL_16:
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      __int128 v29 = (void *)*a4;
      __int128 v30 = *(_OWORD *)(*a4 + 16);
      __int128 v31 = *(_OWORD *)(*a4 + 48);
      __int128 v146 = *(_OWORD *)(*a4 + 32);
      __int128 v147 = v31;
      __int128 v145 = v30;
      uint64_t v32 = v29[8];
      uint64_t v108 = v29[9];
      uint64_t v33 = v29[10];
      uint64_t v34 = v29[11];
      type metadata accessor for AttributedString.Guts();
      swift_allocObject();
      outlined retain of Locale((uint64_t)&v145);
      swift_unknownObjectRetain();
      *a4 = AttributedString.Guts.init(string:runs:)(&v145, v32, v108, v33, v34);
      swift_release();
    }

    uint64_t v35 = *a4;
    __int128 v36 = *(_OWORD *)(*a4 + 32);
    __int128 v142 = *(_OWORD *)(*a4 + 16);
    __int128 v143 = v36;
    __int128 v144 = *(_OWORD *)(v35 + 48);
    BigString.startIndex.getter();
    BigString.endIndex.getter();
    uint64_t v135 = v113;
    uint64_t v136 = v114;
    uint64_t v137 = v115;
    uint64_t v138 = v9;
    uint64_t v139 = v10;
    uint64_t v140 = v11;
    __int128 v141 = v12;
    BigString.unicodeScalars.getter();
    swift_retain_n();
    BigString.UnicodeScalarView.subscript.getter();
    swift_release();
    outlined release of Locale((uint64_t)v123);
    outlined release of Locale((uint64_t)v124);
    __int128 v118 = v128;
    __int128 v119 = v129;
    __int128 v120 = v130;
    __int128 v121 = v131;
    unint64_t v117 = (void *)v35;
    if (one-time initialization token for currentIdentity != -1) {
      swift_once();
    }
    __int128 v37 = (uint64_t *)(static AttributedString.currentIdentity + 16);
    uint64_t v38 = (os_unfair_lock_s *)(static AttributedString.currentIdentity + 24);
    swift_retain();
    os_unfair_lock_lock(v38);
    closure #1 in static AttributedString._nextModifyIdentity.getter(v37, (uint64_t *)&v132);
    os_unfair_lock_unlock(v38);
    swift_release();
    uint64_t v39 = v132;
    uint64_t v122 = v132;
    BigString.init()();
    v116[0] = 0LL;
    MEMORY[0x186E20E78](v116, 8LL);
    uint64_t v40 = v116[0];
    type metadata accessor for AttributedString.Guts();
    uint64_t v41 = swift_allocObject();
    if ((BigString.isEmpty.getter() & 1) != 0)
    {
      __int128 v42 = v133;
      *(_OWORD *)(v41 + 16) = v132;
      *(_OWORD *)(v41 + 32) = v42;
      *(_OWORD *)(v41 + 48) = v134;
      *(void *)(v41 + 64) = 0LL;
      *(void *)(v41 + 72) = 0LL;
      *(void *)(v41 + 80) = 0LL;
      *(void *)(v41 + 88) = v40;
      *a4 = v41;
      swift_release();
      specialized AttributedSubstring.subscript.setter(0LL, 1LL, 0LL);
      goto LABEL_29;
    }

    __break(1u);
LABEL_57:
    swift_once();
LABEL_26:
    __int128 v51 = (uint64_t *)(static AttributedString.currentIdentity + 16);
    __int128 v52 = (os_unfair_lock_s *)(static AttributedString.currentIdentity + 24);
    swift_retain();
    os_unfair_lock_lock(v52);
    closure #1 in static AttributedString._nextModifyIdentity.getter(v51, (uint64_t *)&v132);
    os_unfair_lock_unlock(v52);
    swift_release();
    uint64_t v39 = v132;
    uint64_t v122 = v132;
    BigString.init()();
    v116[0] = 0LL;
    MEMORY[0x186E20E78](v116, 8LL);
    uint64_t v53 = v116[0];
    type metadata accessor for AttributedString.Guts();
    uint64_t v54 = swift_allocObject();
    if ((BigString.isEmpty.getter() & 1) != 0)
    {
      __int128 v55 = v133;
      *(_OWORD *)(v54 + 16) = v132;
      *(_OWORD *)(v54 + 32) = v55;
      *(_OWORD *)(v54 + 48) = v134;
      *(void *)(v54 + 64) = 0LL;
      *(void *)(v54 + 72) = 0LL;
      *(void *)(v54 + 80) = 0LL;
      *(void *)(v54 + 88) = v53;
      *a4 = v54;
      swift_release();
      __int128 v56 = specialized AttributedString.Guts.setAttributeValue<A>(_:forKey:in:);
      uint64_t v57 = (void (*)(uint64_t, unint64_t, unint64_t))specialized AttributedString._InternalRunsSlice.updateEach(with:);
LABEL_28:
      specialized AttributedSubstring.subscript.setter(0LL, 1, (uint64_t (*)(uint64_t, __int128 *))v56, v57);
      goto LABEL_29;
    }

    __break(1u);
LABEL_59:
    swift_once();
LABEL_36:
    __int128 v67 = (uint64_t *)(static AttributedString.currentIdentity + 16);
    __int128 v68 = (os_unfair_lock_s *)(static AttributedString.currentIdentity + 24);
    swift_retain();
    os_unfair_lock_lock(v68);
    closure #1 in static AttributedString._nextModifyIdentity.getter(v67, (uint64_t *)&v132);
    os_unfair_lock_unlock(v68);
    swift_release();
    uint64_t v39 = v132;
    uint64_t v122 = v132;
    BigString.init()();
    v116[0] = 0LL;
    MEMORY[0x186E20E78](v116, 8LL);
    uint64_t v69 = v116[0];
    type metadata accessor for AttributedString.Guts();
    uint64_t v70 = swift_allocObject();
    if ((BigString.isEmpty.getter() & 1) != 0)
    {
      __int128 v71 = v133;
      *(_OWORD *)(v70 + 16) = v132;
      *(_OWORD *)(v70 + 32) = v71;
      *(_OWORD *)(v70 + 48) = v134;
      *(void *)(v70 + 64) = 0LL;
      *(void *)(v70 + 72) = 0LL;
      *(void *)(v70 + 80) = 0LL;
      *(void *)(v70 + 88) = v69;
      *a4 = v70;
      swift_release();
      __int128 v56 = specialized AttributedString.Guts.setAttributeValue<A>(_:forKey:in:);
      uint64_t v57 = (void (*)(uint64_t, unint64_t, unint64_t))specialized AttributedString._InternalRunsSlice.updateEach(with:);
      goto LABEL_28;
    }

    __break(1u);
LABEL_61:
    swift_once();
LABEL_45:
    __int128 v85 = (uint64_t *)(static AttributedString.currentIdentity + 16);
    __int128 v86 = (os_unfair_lock_s *)(static AttributedString.currentIdentity + 24);
    swift_retain();
    os_unfair_lock_lock(v86);
    closure #1 in static AttributedString._nextModifyIdentity.getter(v85, (uint64_t *)&v132);
    os_unfair_lock_unlock(v86);
    swift_release();
    uint64_t v39 = v132;
    uint64_t v122 = v132;
    BigString.init()();
    v116[0] = 0LL;
    MEMORY[0x186E20E78](v116, 8LL);
    uint64_t v87 = v116[0];
    type metadata accessor for AttributedString.Guts();
    uint64_t v88 = swift_allocObject();
    if ((BigString.isEmpty.getter() & 1) != 0)
    {
      __int128 v89 = v133;
      *(_OWORD *)(v88 + 16) = v132;
      *(_OWORD *)(v88 + 32) = v89;
      *(_OWORD *)(v88 + 48) = v134;
      *(void *)(v88 + 64) = 0LL;
      *(void *)(v88 + 72) = 0LL;
      *(void *)(v88 + 80) = 0LL;
      *(void *)(v88 + 88) = v87;
      *a4 = v88;
      swift_release();
      __int128 v56 = specialized AttributedString.Guts.setAttributeValue<A>(_:forKey:in:);
      uint64_t v57 = (void (*)(uint64_t, unint64_t, unint64_t))specialized AttributedString._InternalRunsSlice.updateEach(with:);
      goto LABEL_28;
    }

    __break(1u);
LABEL_63:
    swift_once();
LABEL_54:
    __int128 v103 = (uint64_t *)(static AttributedString.currentIdentity + 16);
    __int128 v104 = (os_unfair_lock_s *)(static AttributedString.currentIdentity + 24);
    swift_retain();
    os_unfair_lock_lock(v104);
    closure #1 in static AttributedString._nextModifyIdentity.getter(v103, (uint64_t *)&v132);
    os_unfair_lock_unlock(v104);
    swift_release();
    uint64_t v39 = v132;
    uint64_t v122 = v132;
    BigString.init()();
    v116[0] = 0LL;
    MEMORY[0x186E20E78](v116, 8LL);
    uint64_t v105 = v116[0];
    type metadata accessor for AttributedString.Guts();
    uint64_t v106 = swift_allocObject();
    if ((BigString.isEmpty.getter() & 1) == 0)
    {
      __break(1u);
      goto LABEL_65;
    }

    __int128 v107 = v133;
    *(_OWORD *)(v106 + 16) = v132;
    *(_OWORD *)(v106 + 32) = v107;
    *(_OWORD *)(v106 + 48) = v134;
    *(void *)(v106 + 64) = 0LL;
    *(void *)(v106 + 72) = 0LL;
    *(void *)(v106 + 80) = 0LL;
    *(void *)(v106 + 88) = v105;
    *a4 = v106;
    swift_release();
    specialized AttributedSubstring.subscript.setter(1);
LABEL_29:
    if (v122 == v39)
    {
      *a4 = (uint64_t)v117;
      return swift_release();
    }

uint64_t specialized AttributedSubstring.subscript.setter(char a1)
{
  uint64_t v2 = v1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    uint64_t v4 = *(void **)v1;
    __int128 v5 = *(_OWORD *)(*(void *)v1 + 16LL);
    __int128 v6 = *(_OWORD *)(*(void *)v1 + 48LL);
    v26[1] = *(_OWORD *)(*(void *)v1 + 32LL);
    v26[2] = v6;
    v26[0] = v5;
    uint64_t v7 = v4[8];
    uint64_t v8 = v4[9];
    uint64_t v9 = v4[10];
    uint64_t v10 = v4[11];
    type metadata accessor for AttributedString.Guts();
    swift_allocObject();
    outlined retain of Locale((uint64_t)v26);
    swift_unknownObjectRetain();
    *(void *)uint64_t v2 = AttributedString.Guts.init(string:runs:)(v26, v7, v8, v9, v10);
    swift_release();
  }

  if (a1 != 2) {
    return specialized AttributedString.Guts.setAttributeValue<A>(_:forKey:in:)(a1 & 1);
  }
  uint64_t v11 = *(_OWORD **)v2;
  __int128 v12 = *(_OWORD *)(*(void *)v2 + 32LL);
  __int128 v20 = *(_OWORD *)(*(void *)v2 + 16LL);
  __int128 v21 = v12;
  __int128 v22 = v11[3];
  BigString.unicodeScalars.getter();
  unint64_t v13 = BigString.UnicodeScalarView.index(roundingDown:)();
  outlined release of Locale((uint64_t)&v18);
  __int128 v14 = v11[2];
  __int128 v23 = v11[1];
  __int128 v24 = v14;
  __int128 v25 = v11[3];
  BigString.unicodeScalars.getter();
  unint64_t v15 = BigString.UnicodeScalarView.index(roundingDown:)();
  outlined release of Locale((uint64_t)v19);
  uint64_t v16 = (void *)swift_retain();
  specialized AttributedString._InternalRunsSlice.updateEach(with:)(v16, v13 >> 11, v15 >> 11);
  return swift_release();
}

{
  uint64_t v1;
  uint64_t v2;
  void *v4;
  __int128 v5;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _OWORD *v11;
  __int128 v12;
  __int128 v13;
  __int128 v15;
  unint64_t v16;
  __int128 v17;
  unint64_t v18;
  void *v19;
  uint64_t v20;
  _BYTE v21[48];
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  _OWORD v29[4];
  uint64_t v2 = v1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    uint64_t v4 = *(void **)v1;
    __int128 v5 = *(_OWORD *)(*(void *)v1 + 16LL);
    __int128 v6 = *(_OWORD *)(*(void *)v1 + 48LL);
    v29[1] = *(_OWORD *)(*(void *)v1 + 32LL);
    v29[2] = v6;
    v29[0] = v5;
    uint64_t v7 = v4[8];
    uint64_t v8 = v4[9];
    uint64_t v9 = v4[10];
    uint64_t v10 = v4[11];
    type metadata accessor for AttributedString.Guts();
    swift_allocObject();
    outlined retain of Locale((uint64_t)v29);
    swift_unknownObjectRetain();
    *(void *)uint64_t v2 = AttributedString.Guts.init(string:runs:)(v29, v7, v8, v9, v10);
    swift_release();
  }

  uint64_t v11 = *(_OWORD **)v2;
  if ((a1 & 1) != 0)
  {
    unint64_t v15 = v11[2];
    __int128 v22 = v11[1];
    __int128 v23 = v15;
    __int128 v24 = v11[3];
    BigString.unicodeScalars.getter();
    uint64_t v16 = BigString.UnicodeScalarView.index(roundingDown:)();
    outlined release of Locale((uint64_t)&v20);
    uint64_t v17 = v11[2];
    uint64_t v26 = v11[1];
    uint64_t v27 = v17;
    uint64_t v28 = v11[3];
    BigString.unicodeScalars.getter();
    uint64_t v18 = BigString.UnicodeScalarView.index(roundingDown:)();
    outlined release of Locale((uint64_t)v21);
    id v19 = (void *)swift_retain();
    specialized AttributedString._InternalRunsSlice.updateEach(with:)(v19, v16 >> 11, (void *)(v18 >> 11));
    return swift_release();
  }

  else
  {
    __int128 v12 = *(_OWORD *)(v2 + 24);
    __int128 v22 = *(_OWORD *)(v2 + 8);
    __int128 v23 = v12;
    unint64_t v13 = *(_OWORD *)(v2 + 56);
    __int128 v24 = *(_OWORD *)(v2 + 40);
    __int128 v25 = v13;
    return specialized AttributedString.Guts.setAttributeValue<A>(_:forKey:in:)();
  }

uint64_t specialized AttributedSubstring.subscript.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    uint64_t v8 = (void *)*v3;
    __int128 v9 = *(_OWORD *)(*v3 + 16);
    __int128 v10 = *(_OWORD *)(*v3 + 48);
    v30[1] = *(_OWORD *)(*v3 + 32);
    v30[2] = v10;
    v30[0] = v9;
    uint64_t v11 = v8[8];
    uint64_t v12 = v8[9];
    uint64_t v13 = v8[10];
    uint64_t v14 = v8[11];
    type metadata accessor for AttributedString.Guts();
    swift_allocObject();
    outlined retain of Locale((uint64_t)v30);
    swift_unknownObjectRetain();
    *uint64_t v4 = AttributedString.Guts.init(string:runs:)(v30, v11, v12, v13, v14);
    swift_release();
  }

  unint64_t v15 = (_OWORD *)*v4;
  if (a2 == 1)
  {
    __int128 v16 = v15[2];
    __int128 v24 = v15[1];
    __int128 v25 = v16;
    __int128 v26 = v15[3];
    BigString.unicodeScalars.getter();
    unint64_t v17 = BigString.UnicodeScalarView.index(roundingDown:)();
    outlined release of Locale((uint64_t)&v22);
    __int128 v18 = v15[2];
    __int128 v27 = v15[1];
    __int128 v28 = v18;
    __int128 v29 = v15[3];
    BigString.unicodeScalars.getter();
    unint64_t v19 = BigString.UnicodeScalarView.index(roundingDown:)();
    outlined release of Locale((uint64_t)v23);
    __int128 v20 = (void *)swift_retain();
    specialized AttributedString._InternalRunsSlice.updateEach(with:)(v20, v17 >> 11, (void *)(v19 >> 11));
    return swift_release();
  }

  else
  {
    swift_bridgeObjectRetain();
    specialized AttributedString.Guts.setAttributeValue<A>(_:forKey:in:)(a1, a2, a3 & 0xFFFFFFFFFFLL);
    outlined consume of AttributedString.AttributeRunBoundaries?(a1, a2);
    return outlined consume of AttributedString.AttributeRunBoundaries?(a1, a2);
  }

{
  uint64_t v6;
  __n128 v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  swift_getAssociatedTypeWitness();
  __int128 v6 = type metadata accessor for Optional();
  uint64_t v7 = MEMORY[0x1895F8858](v6);
  __int128 v9 = (char *)&v13 - v8;
  (*(void (**)(char *, uint64_t, __n128))(v10 + 16))((char *)&v13 - v8, a1, v7);
  return AttributedSubstring.subscript.setter((uint64_t)v9, v11, a2, a3);
}

uint64_t specialized AttributedSubstring.subscript.setter( uint64_t a1, char a2, uint64_t (*a3)(uint64_t, __int128 *), void (*a4)(uint64_t, unint64_t, unint64_t))
{
  uint64_t v7 = v4;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    __int128 v10 = *(void **)v4;
    __int128 v11 = *(_OWORD *)(*(void *)v4 + 16LL);
    __int128 v12 = *(_OWORD *)(*(void *)v4 + 48LL);
    v36[1] = *(_OWORD *)(*(void *)v4 + 32LL);
    v36[2] = v12;
    v36[0] = v11;
    uint64_t v13 = v10[8];
    uint64_t v14 = v10[9];
    uint64_t v15 = v10[10];
    uint64_t v16 = v10[11];
    type metadata accessor for AttributedString.Guts();
    swift_allocObject();
    outlined retain of Locale((uint64_t)v36);
    swift_unknownObjectRetain();
    *(void *)uint64_t v7 = AttributedString.Guts.init(string:runs:)(v36, v13, v14, v15, v16);
    swift_release();
  }

  unint64_t v17 = *(_OWORD **)v7;
  if ((a2 & 1) != 0)
  {
    __int128 v26 = a4;
    __int128 v21 = v17[2];
    __int128 v29 = v17[1];
    __int128 v30 = v21;
    __int128 v31 = v17[3];
    BigString.unicodeScalars.getter();
    unint64_t v22 = BigString.UnicodeScalarView.index(roundingDown:)();
    outlined release of Locale((uint64_t)v27);
    __int128 v23 = v17[2];
    __int128 v33 = v17[1];
    __int128 v34 = v23;
    __int128 v35 = v17[3];
    BigString.unicodeScalars.getter();
    unint64_t v24 = BigString.UnicodeScalarView.index(roundingDown:)();
    outlined release of Locale((uint64_t)v28);
    uint64_t v25 = swift_retain();
    v26(v25, v22 >> 11, v24 >> 11);
    return swift_release();
  }

  else
  {
    __int128 v18 = *(_OWORD *)(v7 + 24);
    __int128 v29 = *(_OWORD *)(v7 + 8);
    __int128 v30 = v18;
    __int128 v19 = *(_OWORD *)(v7 + 56);
    __int128 v31 = *(_OWORD *)(v7 + 40);
    __int128 v32 = v19;
    return a3(a1, &v29);
  }

uint64_t thunk for @callee_guaranteed (@guaranteed NSAttributedStringKey, @unowned _NSRange) -> ()( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void))
{
  return a4();
}

void thunk for @escaping @callee_guaranteed (@guaranteed NSAttributedStringKey, @unowned _NSRange) -> ()( uint64_t a1, void *a2)
{
  uint64_t v2 = *(void (**)(void))(a1 + 32);
  id v3 = a2;
  v2();
}

uint64_t closure #8 in AttributedString.inflected(locale:userTermOfAddress:replacements:concepts:preflight:)( uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v65 = (_OWORD *)*a3;
  swift_retain();
  Range<>.init(_:in:)(a1, a2, &v65, (uint64_t *)&v89);
  uint64_t v6 = v91;
  if (v91 == 2) {
    return 0LL;
  }
  uint64_t v8 = v93;
  uint64_t v7 = v94;
  uint64_t v9 = v90;
  __int128 v62 = v89;
  __int128 v63 = v92;
  __int128 v10 = (_OWORD *)*a3;
  __int128 v11 = v10[2];
  __int128 v124 = v10[1];
  __int128 v125 = v11;
  __int128 v126 = v10[3];
  BigString.startIndex.getter();
  BigString.endIndex.getter();
  v118[3] = v62;
  uint64_t v119 = v9;
  uint64_t v120 = v6;
  __int128 v121 = v63;
  uint64_t v122 = v8;
  uint64_t v123 = v7;
  BigString.unicodeScalars.getter();
  swift_retain();
  BigString.UnicodeScalarView.subscript.getter();
  outlined release of Locale((uint64_t)v95);
  outlined release of Locale((uint64_t)v96);
  __int128 v110 = v97;
  __int128 v111 = v98;
  __int128 v112 = v99;
  __int128 v113 = v100;
  __int128 v12 = v10[1];
  __int128 v13 = v10[3];
  v118[1] = v10[2];
  v118[2] = v13;
  v118[0] = v12;
  swift_retain_n();
  outlined retain of Locale((uint64_t)v118);
  BigString.subscript.getter();
  outlined release of Locale((uint64_t)v118);
  outlined release of Locale((uint64_t)v101);
  swift_release();
  unint64_t v14 = v102;
  uint64_t v15 = v103;
  uint64_t v16 = v104;
  uint64_t v17 = v105;
  unint64_t v18 = v106;
  uint64_t v19 = v107;
  uint64_t v20 = v108;
  uint64_t v21 = v109;
  unint64_t v22 = (void *)swift_allocObject();
  v22[2] = v10;
  v22[3] = v14;
  v22[4] = v15;
  void v22[5] = v16;
  v22[6] = v17;
  v22[7] = v18;
  uint64_t v51 = v19;
  v22[8] = v19;
  v22[9] = v20;
  unint64_t v52 = v18;
  uint64_t v53 = v22;
  unint64_t v23 = v18 >> 10;
  uint64_t v50 = v21;
  v22[10] = v21;
  v22[11] = 0LL;
  uint64_t v64 = v10;
  uint64_t result = swift_retain_n();
  uint64_t v56 = v15;
  unint64_t v57 = v14;
  uint64_t v25 = v15;
  uint64_t v54 = v17;
  uint64_t v55 = v16;
  uint64_t v26 = v17;
  unint64_t v58 = v14 >> 10;
  unint64_t v27 = v14;
  if (v14 >> 10 == v23)
  {
LABEL_4:
    swift_release();
    uint64_t v65 = v64;
    unint64_t v66 = v57;
    uint64_t v67 = v56;
    uint64_t v68 = v55;
    uint64_t v69 = v54;
    unint64_t v70 = v52;
    uint64_t v71 = v51;
    uint64_t v72 = v20;
    uint64_t v73 = v50;
    uint64_t v74 = 0LL;
    unint64_t v75 = v57;
    uint64_t v76 = v56;
    uint64_t v77 = v55;
    uint64_t v78 = v54;
    unint64_t v79 = v52;
    uint64_t v80 = v51;
    uint64_t v81 = v20;
    uint64_t v82 = v50;
    unint64_t v83 = v27;
    uint64_t v84 = v25;
    uint64_t v85 = v16;
    uint64_t v86 = v26;
    uint64_t v87 = partial apply for closure #1 in closure #8 in AttributedString.inflected(locale:userTermOfAddress:replacements:concepts:preflight:);
    uint64_t v88 = v53;
    outlined release of LazyFilterSequence<DefaultIndices<AttributedString.CharacterView>>.Iterator((uint64_t)&v65);
    swift_release_n();
    return 0LL;
  }

  __int128 v28 = v10 + 1;
  unint64_t v29 = v14 >> 10;
  while (v29 >= v58 && v23 >= v29)
  {
    __int128 v31 = v28[1];
    v117[0] = *v28;
    v117[1] = v31;
    v117[2] = v28[2];
    swift_retain();
    outlined retain of Locale((uint64_t)v117);
    unint64_t v27 = BigString.index(after:)();
    uint64_t v60 = v32;
    uint64_t v61 = v33;
    uint64_t v35 = v34;
    outlined release of Locale((uint64_t)v117);
    uint64_t result = swift_release();
    if (v29 >= v23) {
      goto LABEL_26;
    }
    unint64_t v29 = v27 >> 10;
    if (v23 < v27 >> 10) {
      goto LABEL_26;
    }
    uint64_t v59 = v35;
    __int128 v36 = v28[1];
    v116[0] = *v28;
    v116[1] = v36;
    void v116[2] = v28[2];
    swift_retain();
    outlined retain of Locale((uint64_t)v116);
    uint64_t v37 = BigString.subscript.getter();
    uint64_t v39 = v38;
    outlined release of Locale((uint64_t)v116);
    swift_release();
    if (v37 == 37 && v39 == 0xE100000000000000LL)
    {
      swift_bridgeObjectRelease();
    }

    else
    {
      char v40 = _stringCompareWithSmolCheck(_:_:expecting:)();
      uint64_t result = swift_bridgeObjectRelease();
      if ((v40 & 1) == 0) {
        goto LABEL_8;
      }
    }

    __int128 v41 = *v28;
    __int128 v42 = v28[2];
    v115[1] = v28[1];
    v115[2] = v42;
    v115[0] = v41;
    __int128 v43 = *v28;
    v127[1] = v28[1];
    v127[2] = v42;
    v127[0] = v43;
    outlined init with take of any PredicateExpression<Self.Output == B1>(v127, (uint64_t)v128);
    outlined retain of Locale((uint64_t)v128);
    unint64_t v44 = BigString.index(after:)();
    uint64_t result = outlined release of Locale((uint64_t)v115);
    unint64_t v45 = v44 >> 10;
    if (v23 < v44 >> 10) {
      goto LABEL_27;
    }
    if (v45 != v23)
    {
      if (v45 < v58 || v45 >= v23) {
        goto LABEL_28;
      }
      __int128 v46 = v28[1];
      v114[0] = *v28;
      v114[1] = v46;
      v114[2] = v28[2];
      swift_retain();
      outlined retain of Locale((uint64_t)v114);
      uint64_t v47 = BigString.subscript.getter();
      uint64_t v49 = v48;
      outlined release of Locale((uint64_t)v114);
      swift_release();
      if (v47 == 37 && v49 == 0xE100000000000000LL)
      {
        uint64_t result = swift_bridgeObjectRelease();
      }

      else
      {
        char v30 = _stringCompareWithSmolCheck(_:_:expecting:)();
        uint64_t result = swift_bridgeObjectRelease();
        if ((v30 & 1) == 0)
        {
          swift_release();
          uint64_t v65 = v64;
          unint64_t v66 = v57;
          uint64_t v67 = v56;
          uint64_t v68 = v55;
          uint64_t v69 = v54;
          unint64_t v70 = v52;
          uint64_t v71 = v51;
          uint64_t v72 = v20;
          uint64_t v73 = v50;
          uint64_t v74 = 0LL;
          unint64_t v75 = v57;
          uint64_t v76 = v56;
          uint64_t v77 = v55;
          uint64_t v78 = v54;
          unint64_t v79 = v52;
          uint64_t v80 = v51;
          uint64_t v81 = v20;
          uint64_t v82 = v50;
          unint64_t v83 = v27;
          uint64_t v84 = v60;
          uint64_t v85 = v61;
          uint64_t v86 = v59;
          uint64_t v87 = partial apply for closure #1 in closure #8 in AttributedString.inflected(locale:userTermOfAddress:replacements:concepts:preflight:);
          uint64_t v88 = v53;
          outlined release of LazyFilterSequence<DefaultIndices<AttributedString.CharacterView>>.Iterator((uint64_t)&v65);
          swift_release_n();
          return 1LL;
        }
      }
    }

void *closure #1 in closure #8 in AttributedString.inflected(locale:userTermOfAddress:replacements:concepts:preflight:)( void *result, void *a2)
{
  unint64_t v2 = *result >> 10;
  if (v2 < a2[1] >> 10 || v2 >= a2[5] >> 10)
  {
    __break(1u);
  }

  else
  {
    __int128 v5 = *(_OWORD *)(*a2 + 16LL);
    __int128 v6 = *(_OWORD *)(*a2 + 48LL);
    v11[1] = *(_OWORD *)(*a2 + 32LL);
    v11[2] = v6;
    v11[0] = v5;
    outlined retain of AttributedString.Runs((uint64_t)a2);
    outlined retain of Locale((uint64_t)v11);
    uint64_t v7 = BigString.subscript.getter();
    uint64_t v9 = v8;
    outlined release of Locale((uint64_t)v11);
    outlined release of AttributedString.Runs((uint64_t)a2);
    if (v7 == 37 && v9 == 0xE100000000000000LL)
    {
      swift_bridgeObjectRelease();
      char v10 = 1;
    }

    else
    {
      char v10 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
    }

    return (void *)(v10 & 1);
  }

  return result;
}

uint64_t thunk for @callee_guaranteed (@unowned _NSRange) -> (@unowned Bool)( uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  return a3() & 1;
}

double closure #9 in AttributedString.inflected(locale:userTermOfAddress:replacements:concepts:preflight:)@<D0>( void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X3>, uint64_t a5@<X8>)
{
  *(void *)&__int128 v46 = *a4;
  swift_retain();
  Range<>.init(_:in:)(a2, a3, &v46, (uint64_t *)&v41);
  if (v43 == 2)
  {
    *(void *)(a5 + 24) = MEMORY[0x1896184C8];
    *(_BYTE *)a5 = 0;
    return result;
  }

  __int128 v46 = v41;
  unint64_t v47 = v42;
  uint64_t v48 = v43;
  __int128 v49 = v44;
  __int128 v50 = v45;
  if (one-time initialization token for language != -1) {
    swift_once();
  }
  id v11 = static String._unconditionallyBridgeFromObjectiveC(_:)((void *)static NSAttributedStringKey.language);
  uint64_t v13 = v12;
  if (v11 == static String._unconditionallyBridgeFromObjectiveC(_:)(a1) && v13 == v14)
  {
    swift_bridgeObjectRelease_n();
LABEL_19:
    unint64_t v27 = (_OWORD *)*a4;
    swift_retain();
    specialized AttributedString.firstValue<A>(of:in:)(&v46, v27, (unint64_t *)&v41);
    swift_release();
    uint64_t v28 = *((void *)&v41 + 1);
    if (*((void *)&v41 + 1))
    {
      uint64_t v29 = v41;
      *(void *)(a5 + 24) = MEMORY[0x189617FA8];
      *(void *)a5 = v29;
      *(void *)(a5 + 8) = v28;
      return result;
    }

    goto LABEL_27;
  }

  char v16 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v16 & 1) != 0) {
    goto LABEL_19;
  }
  id v17 = static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSMorphology");
  uint64_t v19 = v18;
  if (v17 == static String._unconditionallyBridgeFromObjectiveC(_:)(a1) && v19 == v20)
  {
    swift_bridgeObjectRelease_n();
    goto LABEL_22;
  }

  char v22 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v22 & 1) != 0)
  {
LABEL_22:
    char v30 = (_OWORD *)*a4;
    swift_retain();
    __int128 v31 = &static AttributeScopes.FoundationAttributes.MorphologyAttribute.name;
    uint64_t v32 = (uint64_t *)algn_18C5D2BC8;
    uint64_t v33 = &one-time initialization token for name;
    goto LABEL_23;
  }

  id v23 = static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSAssumedFallbackInflection");
  uint64_t v25 = v24;
  if (v23 == static String._unconditionallyBridgeFromObjectiveC(_:)(a1) && v25 == v26)
  {
    swift_bridgeObjectRelease_n();
  }

  else
  {
    char v40 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v40 & 1) == 0) {
      goto LABEL_27;
    }
  }

  char v30 = (_OWORD *)*a4;
  swift_retain();
  __int128 v31 = &static AttributeScopes.FoundationAttributes.AssumedFallbackInflectionAttribute.name;
  uint64_t v32 = (uint64_t *)algn_18C5D2BE8;
  uint64_t v33 = &one-time initialization token for name;
LABEL_23:
  specialized AttributedString.firstValue<A>(of:in:)(&v46, v30, v33, v31, v32, (uint64_t)&v41);
  swift_release();
  uint64_t v34 = *((void *)&v41 + 1);
  if (*((void *)&v41 + 1))
  {
    unint64_t v35 = v42;
    char v36 = v41;
    unint64_t v37 = (unint64_t)v41 >> 8;
    unint64_t v38 = (unint64_t)v41 >> 16;
    unint64_t v39 = v42 >> 8;
    *(void *)(a5 + 24) = &type metadata for Morphology;
    *(_BYTE *)a5 = v36;
    *(_BYTE *)(a5 + 1) = v37;
    *(_BYTE *)(a5 + 2) = v38;
    *(void *)(a5 + 8) = v34;
    *(_BYTE *)(a5 + 16) = v35;
    *(_BYTE *)(a5 + 17) = v39;
    *(_BYTE *)(a5 + 18) = BYTE2(v35);
    *(_BYTE *)(a5 + 19) = BYTE3(v35);
    *(_BYTE *)(a5 + 20) = BYTE4(v35);
    return result;
  }

uint64_t specialized AttributedString.firstValue<A>(of:in:)@<X0>( __int128 *a1@<X0>, _OWORD *a2@<X1>, unint64_t *a3@<X8>)
{
  __int128 v6 = a2[2];
  __int128 v63 = a2[1];
  __int128 v64 = v6;
  __int128 v65 = a2[3];
  BigString.startIndex.getter();
  BigString.endIndex.getter();
  __int128 v7 = a1[1];
  __int128 v59 = *a1;
  __int128 v60 = v7;
  __int128 v8 = a1[3];
  __int128 v61 = a1[2];
  __int128 v62 = v8;
  BigString.unicodeScalars.getter();
  swift_retain_n();
  BigString.UnicodeScalarView.subscript.getter();
  outlined release of Locale((uint64_t)v49);
  outlined release of Locale((uint64_t)v50);
  swift_release();
  __int128 v55 = v51;
  __int128 v56 = v52;
  __int128 v57 = v53;
  __int128 v58 = v54;
  AttributedString.Runs.init(_:in:)((uint64_t)a2, &v66);
  v79[10] = v76;
  v79[11] = v77;
  v79[7] = v73;
  v79[9] = v75;
  v79[8] = v74;
  v79[2] = v68;
  v79[3] = v69;
  v79[5] = v71;
  v79[6] = v72;
  v79[4] = v70;
  uint64_t v80 = v78;
  uint64_t v81 = &outlined read-only object #0 of specialized AttributedString.firstValue<A>(of:in:);
  uint64_t v82 = MEMORY[0x18961AFE8];
  uint64_t v9 = *((void *)&v74 + 1);
  unint64_t v10 = *((void *)&v74 + 1) >> 10;
  v79[0] = v66;
  v79[1] = v67;
  uint64_t v27 = *((void *)&v76 + 1) >> 10;
  if (*((void *)&v74 + 1) >> 10 == *((void *)&v76 + 1) >> 10)
  {
LABEL_11:
    uint64_t result = outlined release of ReversedCollection<AttributedString.Runs.AttributesSlice1<AttributeScopes.FoundationAttributes.InflectionRuleAttribute>>.Iterator((uint64_t)v79);
LABEL_12:
    *((_OWORD *)a3 + 3) = 0u;
    *((_OWORD *)a3 + 4) = 0u;
    *((_OWORD *)a3 + 1) = 0u;
    *((_OWORD *)a3 + 2) = 0u;
    *(_OWORD *)a3 = 0u;
  }

  else
  {
    uint64_t v24 = a3;
    uint64_t v11 = v76;
    uint64_t v12 = *((void *)&v75 + 1);
    uint64_t v13 = v75;
    outlined retain of ReversedCollection<AttributedString.Runs.AttributesSlice1<AttributeScopes.FoundationAttributes.InflectionRuleAttribute>>((uint64_t)v79);
    while (1)
    {
      __int128 v45 = v76;
      __int128 v46 = v77;
      uint64_t v47 = v78;
      __int128 v41 = v72;
      __int128 v42 = v73;
      __int128 v43 = v74;
      __int128 v44 = v75;
      __int128 v37 = v68;
      __int128 v38 = v69;
      __int128 v39 = v70;
      __int128 v40 = v71;
      __int128 v35 = v66;
      __int128 v36 = v67;
      unint64_t v31 = v9;
      uint64_t v32 = v13;
      uint64_t v33 = v12;
      uint64_t v34 = v11;
      AttributedString.Runs.subscript.getter(&v31, v48);
      uint64_t v14 = v48[0];
      __int128 v45 = v76;
      __int128 v46 = v77;
      uint64_t v47 = v78;
      __int128 v41 = v72;
      __int128 v42 = v73;
      __int128 v43 = v74;
      __int128 v44 = v75;
      __int128 v37 = v68;
      __int128 v38 = v69;
      __int128 v39 = v70;
      __int128 v40 = v71;
      __int128 v35 = v66;
      __int128 v36 = v67;
      uint64_t v15 = v11;
      uint64_t v16 = v9;
      unint64_t v31 = v9;
      uint64_t v32 = v13;
      uint64_t v25 = v13;
      uint64_t v26 = v12;
      uint64_t v33 = v12;
      uint64_t v34 = v15;
      unint64_t v17 = v15;
      outlined retain of ReversedCollection<AttributedString.Runs.AttributesSlice1<AttributeScopes.FoundationAttributes.InflectionRuleAttribute>>((uint64_t)v79);
      outlined retain of AttributedString.Runs((uint64_t)&v66);
      AttributedString.Runs._slicedRunBoundary(after:attributeNames:constraints:)( &v31,  (uint64_t)&outlined read-only object #0 of specialized AttributedString.firstValue<A>(of:in:),  MEMORY[0x18961AFE8],  v48);
      outlined release of AttributedString.Runs((uint64_t)&v66);
      uint64_t result = outlined release of ReversedCollection<AttributedString.Runs.AttributesSlice1<AttributeScopes.FoundationAttributes.InflectionRuleAttribute>>.Iterator((uint64_t)v79);
      uint64_t v9 = v48[0];
      unint64_t v19 = (unint64_t)v48[0] >> 10;
      if ((unint64_t)v48[0] >> 10 < v10)
      {
        __break(1u);
        return result;
      }

      uint64_t v28 = v48[1];
      uint64_t v29 = v48[2];
      uint64_t v30 = v48[3];
      if (*(void *)(v14 + 16)
        && (unint64_t v20 = specialized __RawDictionaryStorage.find<A>(_:)(0x6175676E614C534ELL, 0xEA00000000006567LL),
            (v21 & 1) != 0))
      {
        outlined init with copy of AttributedString._AttributeValue(*(void *)(v14 + 56) + 72 * v20, (uint64_t)&v35);
        outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>( (uint64_t)&v35,  (uint64_t)v48);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Hashable & Sendable);
        swift_dynamicCast();
        outlined destroy of AttributedString._AttributeValue((uint64_t)&v35);
        unint64_t v22 = v31;
        unint64_t v23 = v32;
      }

      else
      {
        unint64_t v23 = 0LL;
        unint64_t v22 = 0LL;
        unint64_t v31 = 0LL;
        uint64_t v32 = 0LL;
      }

      swift_release();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (v23) {
        break;
      }
      unint64_t v10 = v19;
      uint64_t v13 = v28;
      uint64_t v12 = v29;
      uint64_t v11 = v30;
      if (v19 == v27)
      {
        outlined release of ReversedCollection<AttributedString.Runs.AttributesSlice1<AttributeScopes.FoundationAttributes.InflectionRuleAttribute>>.Iterator((uint64_t)v79);
        a3 = v24;
        goto LABEL_11;
      }
    }

    outlined release of ReversedCollection<AttributedString.Runs.AttributesSlice1<AttributeScopes.FoundationAttributes.InflectionRuleAttribute>>.Iterator((uint64_t)v79);
    uint64_t result = outlined release of ReversedCollection<AttributedString.Runs.AttributesSlice1<AttributeScopes.FoundationAttributes.InflectionRuleAttribute>>.Iterator((uint64_t)v79);
    a3 = v24;
    if (v23 == 1) {
      goto LABEL_12;
    }
    *uint64_t v24 = v22;
    v24[1] = v23;
    v24[2] = v16;
    v24[3] = v25;
    id v24[4] = v26;
    v24[5] = v17;
    v24[6] = v9;
    v24[7] = v28;
    v24[8] = v29;
    v24[9] = v30;
  }

  return result;
}

uint64_t specialized AttributedString.firstValue<A>(of:in:)@<X0>( __int128 *a1@<X0>, _OWORD *a2@<X1>, void *a3@<X2>, uint64_t *a4@<X3>, uint64_t *a5@<X4>, uint64_t a6@<X8>)
{
  __int128 v8 = v155;
  uint64_t v9 = v137;
  __int128 v10 = a2[2];
  __int128 v152 = a2[1];
  __int128 v153 = v10;
  __int128 v154 = a2[3];
  BigString.startIndex.getter();
  BigString.endIndex.getter();
  __int128 v11 = a1[1];
  __int128 v148 = *a1;
  __int128 v149 = v11;
  __int128 v12 = a1[3];
  __int128 v150 = a1[2];
  __int128 v151 = v12;
  BigString.unicodeScalars.getter();
  swift_retain_n();
  BigString.UnicodeScalarView.subscript.getter();
  outlined release of Locale((uint64_t)v138);
  outlined release of Locale((uint64_t)v139);
  swift_release();
  __int128 v144 = v140;
  __int128 v145 = v141;
  __int128 v146 = v142;
  __int128 v147 = v143;
  AttributedString.Runs.init(_:in:)((uint64_t)a2, v137);
  unint64_t v13 = v137[17];
  unint64_t v14 = v137[18];
  uint64_t v15 = v137[19];
  unint64_t v16 = v137[20];
  unint64_t v17 = v137[21];
  uint64_t v18 = (_BYTE *)v137[22];
  unint64_t v19 = (_BYTE *)v137[23];
  uint64_t v20 = v137[24];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
  uint64_t v21 = swift_allocObject();
  *(_OWORD *)(v21 + 16) = xmmword_183720D90;
  uint64_t v67 = v21;
  if (*a3 != -1LL)
  {
LABEL_22:
    swift_once();
    uint64_t v21 = v67;
  }

  uint64_t v22 = *a5;
  *(void *)(v21 + 32) = *a4;
  *(void *)(v21 + 40) = v22;
  __int128 v23 = v9[7];
  v155[6] = v9[6];
  v155[7] = v23;
  __int128 v24 = v9[3];
  v155[2] = v9[2];
  v155[3] = v24;
  __int128 v25 = v9[4];
  v155[5] = v9[5];
  v155[4] = v25;
  __int128 v26 = *v9;
  v155[1] = v9[1];
  v155[0] = v26;
  uint64_t v156 = v137[16];
  unint64_t v157 = v13;
  unint64_t v158 = v14;
  uint64_t v159 = v15;
  unint64_t v160 = v16;
  unint64_t v161 = v17;
  unint64_t v162 = v18;
  __int128 v72 = v19;
  uint64_t v163 = v19;
  uint64_t v66 = v20;
  uint64_t v164 = v20;
  uint64_t v165 = v21;
  uint64_t v166 = MEMORY[0x18961AFE8];
  unint64_t v27 = v26;
  __int128 v28 = *(_OWORD *)((char *)v8 + 88);
  __int128 v133 = *(_OWORD *)((char *)v8 + 72);
  __int128 v134 = v28;
  __int128 v29 = *(_OWORD *)((char *)v8 + 120);
  __int128 v135 = *(_OWORD *)((char *)v8 + 104);
  __int128 v136 = v29;
  __int128 v30 = *(_OWORD *)((char *)v8 + 24);
  __int128 v129 = *(_OWORD *)((char *)v8 + 8);
  __int128 v130 = v30;
  __int128 v31 = *(_OWORD *)((char *)v8 + 56);
  unint64_t v71 = v17;
  __int128 v131 = *(_OWORD *)((char *)v8 + 40);
  __int128 v132 = v31;
  __int128 v64 = (_OWORD *)(v17 >> 10);
  unint64_t v65 = v27;
  unint64_t v32 = v16;
  uint64_t v33 = v15;
  __int128 v8 = v18;
  if (v13 >> 10 == v17 >> 10)
  {
    swift_bridgeObjectRetain();
    outlined retain of ReversedCollection<AttributedString.Runs.AttributesSlice1<AttributeScopes.FoundationAttributes.InflectionRuleAttribute>>((uint64_t)v155);
LABEL_17:
    __int128 v113 = v133;
    __int128 v114 = v134;
    __int128 v115 = v135;
    __int128 v116 = v136;
    __int128 v109 = v129;
    __int128 v110 = v130;
    __int128 v111 = v131;
    __int128 v112 = v132;
    unint64_t v108 = v65;
    unint64_t v117 = v13;
    unint64_t v118 = v14;
    uint64_t v119 = v33;
    unint64_t v120 = v32;
    unint64_t v121 = v71;
    uint64_t v122 = v8;
    uint64_t v123 = v72;
    uint64_t v124 = v66;
    uint64_t v125 = v67;
    uint64_t v126 = MEMORY[0x18961AFE8];
    outlined release of ReversedCollection<AttributedString.Runs.AttributesSlice1<AttributeScopes.FoundationAttributes.InflectionRuleAttribute>>.Iterator((uint64_t)&v108);
    uint64_t result = outlined release of ReversedCollection<AttributedString.Runs.AttributesSlice1<AttributeScopes.FoundationAttributes.InflectionRuleAttribute>>.Iterator((uint64_t)v155);
LABEL_18:
    *(void *)(a6 + 80) = 0LL;
    *(_OWORD *)(a6 + 48) = 0u;
    *(_OWORD *)(a6 + 64) = 0u;
    *(_OWORD *)(a6 + 16) = 0u;
    *(_OWORD *)(a6 + 32) = 0u;
    *(_OWORD *)a6 = 0u;
    return result;
  }

  uint64_t v34 = (_OWORD *)(v13 >> 10);
  swift_bridgeObjectRetain();
  outlined retain of ReversedCollection<AttributedString.Runs.AttributesSlice1<AttributeScopes.FoundationAttributes.InflectionRuleAttribute>>((uint64_t)v155);
  uint64_t v18 = &v77[8];
  __int128 v63 = v8;
  unint64_t v35 = v14;
  uint64_t v36 = v33;
  unint64_t v37 = v16;
  unint64_t v38 = v13;
  unint64_t v61 = v13;
  unint64_t v62 = v16;
  uint64_t v60 = v33;
  while (1)
  {
    unint64_t v73 = v38;
    unint64_t v74 = v37;
    uint64_t v76 = v36;
    unint64_t v69 = (unint64_t)v34;
    __int128 v104 = v133;
    __int128 v105 = v134;
    __int128 v106 = v135;
    __int128 v107 = v136;
    __int128 v100 = v129;
    __int128 v101 = v130;
    __int128 v102 = v131;
    __int128 v103 = v132;
    __int128 v78 = v133;
    __int128 v79 = v134;
    __int128 v80 = v135;
    __int128 v81 = v136;
    *(_OWORD *)&v77[8] = v129;
    *(_OWORD *)&v77[24] = v130;
    *(_OWORD *)&v77[40] = v131;
    *(_OWORD *)&v77[56] = v132;
    unint64_t v17 = v65;
    *(void *)__int128 v77 = v65;
    unint64_t v82 = v13;
    unint64_t v83 = v14;
    uint64_t v84 = v33;
    unint64_t v85 = v32;
    unint64_t v86 = v71;
    uint64_t v87 = v8;
    unint64_t v39 = v14;
    uint64_t v40 = v33;
    uint64_t v88 = v72;
    uint64_t v89 = v66;
    unint64_t v92 = v38;
    unint64_t v93 = v35;
    uint64_t v94 = v36;
    unint64_t v95 = v37;
    AttributedString.Runs.subscript.getter(&v92, &v96);
    __int128 v113 = v133;
    __int128 v114 = v134;
    __int128 v115 = v135;
    __int128 v116 = v136;
    __int128 v109 = v129;
    __int128 v110 = v130;
    __int128 v111 = v131;
    __int128 v112 = v132;
    __int128 v78 = v133;
    __int128 v79 = v134;
    __int128 v80 = v135;
    __int128 v81 = v136;
    *(_OWORD *)&v77[8] = v129;
    *(_OWORD *)&v77[24] = v130;
    uint64_t v20 = v96;
    unint64_t v108 = v65;
    unint64_t v117 = v13;
    unint64_t v118 = v39;
    uint64_t v119 = v40;
    unint64_t v120 = v32;
    unint64_t v121 = v71;
    uint64_t v122 = v63;
    uint64_t v123 = v72;
    uint64_t v124 = v66;
    unint64_t v41 = v35;
    uint64_t v15 = v67;
    uint64_t v125 = v67;
    uint64_t v126 = MEMORY[0x18961AFE8];
    *(_OWORD *)&v77[40] = v131;
    *(_OWORD *)&v77[56] = v132;
    *(void *)__int128 v77 = v65;
    unint64_t v82 = v13;
    unint64_t v83 = v39;
    unint64_t v13 = v39;
    uint64_t v84 = v40;
    unint64_t v85 = v32;
    unint64_t v86 = v71;
    uint64_t v87 = v63;
    __int128 v8 = v63;
    uint64_t v88 = v72;
    uint64_t v89 = v66;
    unint64_t v92 = v73;
    unint64_t v93 = v41;
    unint64_t v14 = v41;
    uint64_t v94 = v76;
    unint64_t v95 = v74;
    outlined retain of ReversedCollection<AttributedString.Runs.AttributesSlice1<AttributeScopes.FoundationAttributes.InflectionRuleAttribute>>((uint64_t)&v108);
    swift_retain();
    unint64_t v19 = v77;
    AttributedString.Runs._slicedRunBoundary(after:attributeNames:constraints:)( &v92,  v67,  MEMORY[0x18961AFE8],  (uint64_t *)&v96);
    swift_release();
    outlined release of ReversedCollection<AttributedString.Runs.AttributesSlice1<AttributeScopes.FoundationAttributes.InflectionRuleAttribute>>.Iterator((uint64_t)&v108);
    unint64_t v16 = v96;
    uint64_t v9 = (_OWORD *)(v96 >> 10);
    if (v96 >> 10 < v69)
    {
      __break(1u);
      goto LABEL_22;
    }

    unint64_t v35 = v97;
    uint64_t v70 = v98;
    unint64_t v42 = v99;
    if (*(void *)(v20 + 16))
    {
      unint64_t v68 = v97;
      unint64_t v43 = v99;
      uint64_t v44 = v20;
      uint64_t v45 = *a5;
      uint64_t v46 = *a4;
      swift_bridgeObjectRetain();
      unint64_t v47 = specialized __RawDictionaryStorage.find<A>(_:)(v46, v45);
      if ((v48 & 1) != 0) {
        outlined init with copy of AttributedString._AttributeValue(*(void *)(v44 + 56) + 72 * v47, (uint64_t)v77);
      }
      else {
        memset(v77, 0, sizeof(v77));
      }
      swift_bridgeObjectRelease();
      unint64_t v42 = v43;
      unint64_t v35 = v68;
      if (*(void *)&v77[24])
      {
        outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>( (uint64_t)v77,  (uint64_t)&v96);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Hashable & Sendable);
        swift_dynamicCast();
        outlined destroy of AttributedString._AttributeValue((uint64_t)v77);
        goto LABEL_14;
      }
    }

    else
    {
      memset(v77, 0, sizeof(v77));
    }

    outlined destroy of Any?( (uint64_t)v77,  &demangling cache variable for type metadata for AttributedString._AttributeValue?);
    memset(v128, 0, 13);
    uint64_t v127 = 0LL;
LABEL_14:
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v128[2] = v73;
    v128[3] = v14;
    v128[4] = v76;
    v128[5] = v74;
    v128[6] = v16;
    v128[7] = v35;
    uint64_t v36 = v70;
    v128[8] = v70;
    v128[9] = v42;
    uint64_t v49 = v128[0];
    unint64_t v50 = v14;
    unint64_t v14 = v13;
    if (v128[0]) {
      break;
    }
    unint64_t v37 = v42;
    unint64_t v38 = v16;
    uint64_t v34 = v9;
    BOOL v51 = v9 == v64;
    unint64_t v13 = v61;
    unint64_t v32 = v62;
    uint64_t v33 = v60;
    if (v51) {
      goto LABEL_17;
    }
  }

  unint64_t v53 = v42;
  __int128 v78 = v104;
  __int128 v79 = v105;
  __int128 v80 = v106;
  __int128 v81 = v107;
  *(_OWORD *)&v77[8] = v100;
  *(_OWORD *)&v77[24] = v101;
  *(_OWORD *)&v77[40] = v102;
  uint64_t v54 = BYTE4(v128[1]);
  uint64_t v55 = LODWORD(v128[1]);
  int v56 = v127;
  *(void *)__int128 v77 = v65;
  *(_OWORD *)&v77[56] = v103;
  unint64_t v82 = v61;
  unint64_t v83 = v14;
  uint64_t v84 = v60;
  unint64_t v85 = v62;
  unint64_t v86 = v71;
  uint64_t v87 = v63;
  uint64_t v88 = v72;
  uint64_t v89 = v66;
  uint64_t v90 = v67;
  uint64_t v91 = MEMORY[0x18961AFE8];
  outlined release of ReversedCollection<AttributedString.Runs.AttributesSlice1<AttributeScopes.FoundationAttributes.InflectionRuleAttribute>>.Iterator((uint64_t)v77);
  uint64_t result = outlined release of ReversedCollection<AttributedString.Runs.AttributesSlice1<AttributeScopes.FoundationAttributes.InflectionRuleAttribute>>.Iterator((uint64_t)v155);
  if (v49 == 1) {
    goto LABEL_18;
  }
  *(_WORD *)a6 = v56;
  *(_BYTE *)(a6 + 2) = BYTE2(v56);
  *(void *)(a6 + 8) = v49;
  *(_WORD *)(a6 + 16) = v55;
  *(_BYTE *)(a6 + 18) = BYTE2(v55);
  *(_BYTE *)(a6 + 19) = BYTE3(v55);
  *(_BYTE *)(a6 + 20) = (v55 | (unint64_t)(v54 << 32)) >> 32;
  *(void *)(a6 + 24) = v73;
  *(void *)(a6 + 32) = v50;
  *(void *)(a6 + 40) = v76;
  *(void *)(a6 + 48) = v74;
  *(void *)(a6 + 56) = v16;
  *(void *)(a6 + 64) = v35;
  *(void *)(a6 + 72) = v70;
  *(void *)(a6 + 80) = v53;
  return result;
}

id thunk for @escaping @callee_guaranteed (@guaranteed NSAttributedStringKey, @unowned _NSRange) -> (@out Any?)( uint64_t a1, void *a2)
{
  void (*v2)(void *__return_ptr);
  id v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  __n128 v7;
  uint64_t v8;
  char *v9;
  void *v10;
  void v12[3];
  uint64_t v13;
  unint64_t v2 = *(void (**)(void *__return_ptr))(a1 + 32);
  id v3 = a2;
  v2(v12);

  uint64_t v4 = v13;
  if (!v13) {
    return 0LL;
  }
  __int128 v5 = __swift_project_boxed_opaque_existential_1(v12, v13);
  __int128 v6 = *(void *)(v4 - 8);
  __int128 v7 = MEMORY[0x1895F8858](v5);
  uint64_t v9 = (char *)v12 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  (*(void (**)(char *, __n128))(v6 + 16))(v9, v7);
  __int128 v10 = (void *)_bridgeAnythingToObjectiveC<A>(_:)();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v4);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v12);
  return v10;
}

uint64_t closure #10 in AttributedString.inflected(locale:userTermOfAddress:replacements:concepts:preflight:)( uint64_t a1, uint64_t a2, uint64_t *a3)
{
  *(void *)&__int128 v22 = *a3;
  swift_retain();
  Range<>.init(_:in:)(a1, a2, &v22, (uint64_t *)&v16);
  uint64_t v6 = v18;
  if (v18 == 2) {
    return 0LL;
  }
  uint64_t v9 = v20;
  uint64_t v8 = v21;
  uint64_t v10 = v17;
  __int128 v13 = v16;
  __int128 v14 = v19;
  uint64_t v11 = *a3;
  __int128 v12 = *(_OWORD *)(*a3 + 32);
  __int128 v28 = *(_OWORD *)(*a3 + 16);
  __int128 v29 = v12;
  __int128 v30 = *(_OWORD *)(v11 + 48);
  BigString.unicodeScalars.getter();
  __int128 v22 = v13;
  uint64_t v23 = v10;
  uint64_t v24 = v6;
  __int128 v25 = v14;
  uint64_t v26 = v9;
  uint64_t v27 = v8;
  BigString.UnicodeScalarView.subscript.getter();
  outlined release of Locale((uint64_t)v15);
  return MEMORY[0x186E1B6B8](&v16);
}

id thunk for @escaping @callee_guaranteed (@unowned _NSRange) -> (@owned String)( uint64_t a1, uint64_t a2, uint64_t a3)
{
  id v3 = (void *)String._bridgeToObjectiveCImpl()();
  swift_bridgeObjectRelease();
  return v3;
}

void closure #11 in AttributedString.inflected(locale:userTermOfAddress:replacements:concepts:preflight:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  uint64_t v10 = swift_allocObject();
  *(void *)(v10 + 16) = a3;
  *(void *)(v10 + 24) = a4;
  v12[4] = partial apply for closure #1 in closure #11 in AttributedString.inflected(locale:userTermOfAddress:replacements:concepts:preflight:);
  v12[5] = v10;
  v12[0] = MEMORY[0x1895F87A8];
  v12[1] = 1107296256LL;
  v12[2] = thunk for @escaping @callee_guaranteed (@guaranteed String?, @unowned _NSRange, @unowned _NSRange, @unowned UnsafeMutablePointer<ObjCBool>) -> ();
  v12[3] = &block_descriptor_98;
  uint64_t v11 = _Block_copy(v12);
  swift_retain();
  swift_release();
  objc_msgSend(a5, sel_enumerateSubstringsInRange_options_usingBlock_, a1, a2, 3, v11);
  _Block_release(v11);
}

uint64_t thunk for @escaping @callee_guaranteed (@unowned _NSRange, @guaranteed @escaping @callee_guaranteed (@guaranteed String?, @unowned _NSRange, @unowned UnsafeMutablePointer<ObjCBool>) -> ()) -> ()( uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  return thunk for @escaping @callee_guaranteed (@unowned _NSRange, @guaranteed @escaping @callee_guaranteed (@in_guaranteed Any?, @unowned _NSRange, @unowned UnsafeMutablePointer<ObjCBool>) -> ()) -> ()( a1,  a2,  a3,  a4,  (uint64_t)&unk_189C967B0,  (uint64_t)partial apply for thunk for @escaping @callee_unowned @convention(block) (@unowned NSString?, @unowned _NSRange, @unowned UnsafeMutablePointer<ObjCBool>) -> ());
}

uint64_t thunk for @escaping @callee_guaranteed (@unowned _NSRange, @guaranteed @escaping @callee_guaranteed (@in_guaranteed Any?, @unowned _NSRange, @unowned UnsafeMutablePointer<ObjCBool>) -> ()) -> ()( uint64_t a1, uint64_t a2, uint64_t a3, void *aBlock, uint64_t a5, uint64_t a6)
{
  uint64_t v9 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(a1 + 32);
  uint64_t v10 = _Block_copy(aBlock);
  uint64_t v11 = swift_allocObject();
  *(void *)(v11 + 16) = v10;
  v9(a2, a3, a6, v11);
  return swift_release();
}

void thunk for @escaping @callee_unowned @convention(block) (@unowned NSString?, @unowned _NSRange, @unowned UnsafeMutablePointer<ObjCBool>) -> ()( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  if (a2) {
    a2 = String._bridgeToObjectiveCImpl()();
  }
  id v7 = (id)a2;
  (*(void (**)(uint64_t))(a6 + 16))(a6);
}

uint64_t closure #12 in AttributedString.inflected(locale:userTermOfAddress:replacements:concepts:preflight:)( uint64_t a1, uint64_t a2, __int128 *a3, uint64_t *a4, void *a5)
{
  unint64_t v6 = (unint64_t)a4;
  uint64_t v147 = *a4;
  swift_retain();
  uint64_t result = Range<>.init(_:in:)(a1, a2, &v147, (uint64_t *)&v136);
  uint64_t v11 = *((void *)&v137 + 1);
  if (*((void *)&v137 + 1) == 2LL) {
    return result;
  }
  uint64_t v12 = v136;
  v146[0] = v136;
  *((void *)&v117 + 1) = *((void *)&v136 + 1);
  uint64_t v119 = v137;
  v146[1] = v137;
  unint64_t v113 = v138;
  v146[2] = v138;
  uint64_t v109 = *((void *)&v138 + 1);
  __int128 v110 = v139;
  v146[3] = v139;
  outlined init with copy of Any((uint64_t)a3, (uint64_t)&v136);
  uint64_t v106 = a2;
  __int128 v107 = a5;
  uint64_t v108 = a1;
  uint64_t v115 = v11;
  __int128 v116 = (void *)v6;
  *(void *)&__int128 v117 = v12;
  if ((swift_dynamicCast() & 1) != 0)
  {
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      __int128 v13 = *(void **)v6;
      __int128 v14 = *(_OWORD *)(*(void *)v6 + 16LL);
      __int128 v15 = *(_OWORD *)(*(void *)v6 + 48LL);
      __int128 v134 = *(_OWORD *)(*(void *)v6 + 32LL);
      __int128 v135 = v15;
      __int128 v133 = v14;
      uint64_t v16 = v13[8];
      uint64_t v17 = v13[9];
      uint64_t v18 = v13[10];
      uint64_t v19 = v13[11];
      type metadata accessor for AttributedString.Guts();
      swift_allocObject();
      outlined retain of Locale((uint64_t)&v133);
      swift_unknownObjectRetain();
      *(void *)unint64_t v6 = AttributedString.Guts.init(string:runs:)(&v133, v16, v17, v18, v19);
      swift_release();
    }

    uint64_t v20 = *(void *)v6;
    __int128 v21 = *(_OWORD *)(*(void *)v6 + 32LL);
    __int128 v130 = *(_OWORD *)(*(void *)v6 + 16LL);
    __int128 v131 = v21;
    __int128 v132 = *(_OWORD *)(v20 + 48);
    unint64_t v22 = BigString.startIndex.getter();
    uint64_t v24 = v23;
    uint64_t v26 = v25;
    uint64_t v28 = v27;
    unint64_t v6 = BigString.endIndex.getter();
    *(void *)&__int128 v136 = v20;
    *((void *)&v136 + 1) = v22;
    *(void *)&__int128 v137 = v24;
    *((void *)&v137 + 1) = v26;
    *(void *)&__int128 v138 = v28;
    *((void *)&v138 + 1) = v6;
    *(void *)&__int128 v139 = v29;
    *((void *)&v139 + 1) = v30;
    uint64_t v140 = v31;
    uint64_t v32 = one-time initialization token for currentIdentity;
    swift_retain();
    if (v32 != -1) {
      swift_once();
    }
    uint64_t v33 = (uint64_t *)(static AttributedString.currentIdentity + 16);
    uint64_t v34 = (os_unfair_lock_s *)(static AttributedString.currentIdentity + 24);
    swift_retain();
    os_unfair_lock_lock(v34);
    closure #1 in static AttributedString._nextModifyIdentity.getter(v33, &v147);
    os_unfair_lock_unlock(v34);
    swift_release();
    uint64_t v35 = v147;
    uint64_t v141 = v147;
    BigString.init()();
    uint64_t v147 = 0LL;
    MEMORY[0x186E20E78](&v147, 8LL);
    uint64_t v36 = v147;
    uint64_t v100 = type metadata accessor for AttributedString.Guts();
    uint64_t v37 = swift_allocObject();
    a3 = v126;
    if ((BigString.isEmpty.getter() & 1) != 0)
    {
      uint64_t v102 = v35;
      __int128 v38 = v126[1];
      *(_OWORD *)(v37 + 16) = v126[0];
      *(_OWORD *)(v37 + 32) = v38;
      *(_OWORD *)(v37 + 48) = v126[2];
      *(void *)(v37 + 64) = 0LL;
      *(void *)(v37 + 72) = 0LL;
      *(void *)(v37 + 80) = 0LL;
      *(void *)(v37 + 88) = v36;
      *__int128 v116 = v37;
      swift_release();
      if ((unint64_t)v117 >> 10 >= v22 >> 10 && v6 >> 10 >= v113 >> 10)
      {
        __int128 v39 = *(_OWORD *)(v20 + 16);
        __int128 v40 = *(_OWORD *)(v20 + 48);
        v129[1] = *(_OWORD *)(v20 + 32);
        v129[2] = v40;
        v129[0] = v39;
        __int128 v41 = *(_OWORD *)(v20 + 16);
        __int128 v155 = *(_OWORD *)(v20 + 32);
        __int128 v156 = v40;
        __int128 v154 = v41;
        outlined init with take of any PredicateExpression<Self.Output == B1>(&v154, (uint64_t)v157);
        outlined retain of Locale((uint64_t)v157);
        uint64_t v42 = MEMORY[0x186E1AE90](v117, *((void *)&v117 + 1), v119, v115);
        uint64_t v118 = v43;
        uint64_t v120 = v42;
        unint64_t v45 = v44;
        uint64_t v47 = v46;
        outlined release of Locale((uint64_t)v129);
        __int128 v48 = *(_OWORD *)(v20 + 16);
        __int128 v49 = *(_OWORD *)(v20 + 48);
        v128[1] = *(_OWORD *)(v20 + 32);
        v128[2] = v49;
        v128[0] = v48;
        __int128 v50 = *(_OWORD *)(v20 + 16);
        __int128 v122 = *(_OWORD *)(v20 + 32);
        __int128 v123 = v49;
        __int128 v121 = v50;
        outlined init with take of any PredicateExpression<Self.Output == B1>(&v121, (uint64_t)v158);
        outlined retain of Locale((uint64_t)v158);
        uint64_t v51 = MEMORY[0x186E1AE90](v113, v109, v110, *((void *)&v110 + 1));
        uint64_t v53 = v52;
        uint64_t v55 = v54;
        uint64_t v57 = v56;
        outlined release of Locale((uint64_t)v128);
        uint64_t v147 = v120;
        unint64_t v148 = v45;
        uint64_t v149 = v118;
        uint64_t v150 = v47;
        uint64_t v151 = v51;
        uint64_t v152 = v53;
        *(void *)&__int128 v153 = v55;
        *((void *)&v153 + 1) = v57;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          __int128 v58 = *(_OWORD *)(v20 + 32);
          v127[0] = *(_OWORD *)(v20 + 16);
          v127[1] = v58;
          v127[2] = *(_OWORD *)(v20 + 48);
          uint64_t v59 = *(void *)(v20 + 64);
          uint64_t v60 = *(void *)(v20 + 72);
          uint64_t v61 = *(void *)(v20 + 80);
          uint64_t v62 = *(void *)(v20 + 88);
          swift_allocObject();
          outlined retain of Locale((uint64_t)v127);
          swift_unknownObjectRetain();
          *(void *)&__int128 v136 = AttributedString.Guts.init(string:runs:)(v127, v59, v60, v61, v62);
          swift_release();
        }

        uint64_t v63 = AttributedString.Guts.attributesToUseForTextReplacement(in:)((unint64_t *)&v147);
        uint64_t v65 = v64;
        MEMORY[0x1895F8858](v63);
        AttributedString.CharacterView._mutateStringContents(in:attributes:with:)( &v147,  v63,  v65,  (void (*)(__int128 *, void *))closure #1 in AttributedString.CharacterView._replaceSubrange<A>(_:with:)specialized partial apply);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if (v141 == v102)
        {
          *__int128 v116 = v136;
          swift_release();
          uint64_t v66 = String._bridgeToObjectiveCImpl()();
          swift_bridgeObjectRelease();
          objc_msgSend(v107, sel_replaceCharactersInRange_withString_, v108, v106, v66, v100);
          return swift_unknownObjectRelease();
        }

        goto LABEL_30;
      }

      goto LABEL_26;
    }

    __break(1u);
  }

  else
  {
    outlined init with copy of Any((uint64_t)a3, (uint64_t)&v136);
    if ((swift_dynamicCast() & 1) == 0)
    {
LABEL_29:
      outlined init with copy of Any((uint64_t)a3, (uint64_t)&v136);
      uint64_t v147 = 0LL;
      unint64_t v148 = 0xE000000000000000LL;
      _StringGuts.grow(_:)(31LL);
      swift_bridgeObjectRelease();
      uint64_t v147 = 0xD00000000000001DLL;
      unint64_t v148 = 0x80000001839D3860LL;
      __swift_project_boxed_opaque_existential_1(&v136, *((uint64_t *)&v137 + 1));
      swift_getDynamicType();
      v99._uint64_t countAndFlagsBits = _typeName(_:qualified:)();
      String.append(_:)(v99);
      swift_bridgeObjectRelease();
LABEL_30:
      uint64_t result = _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
      return result;
    }

    uint64_t v37 = v147;
    uint64_t v147 = v12;
    unint64_t v148 = *((void *)&v117 + 1);
    uint64_t v149 = v119;
    uint64_t v150 = v11;
    uint64_t v151 = v113;
    uint64_t v152 = v109;
    __int128 v153 = v110;
    swift_retain();
    uint64_t v67 = AttributedString.Guts.getUniformValues(in:)(&v147);
    uint64_t v69 = v68;
    swift_release();
    *(void *)&v128[0] = v67;
    *((void *)&v128[0] + 1) = v69;
    if (one-time initialization token for name == -1) {
      goto LABEL_16;
    }
  }

  swift_once();
LABEL_16:
  unint64_t v70 = static AttributeScopes.FoundationAttributes.InflectionAlternativeAttribute.name;
  unint64_t v71 = qword_18C5D2C08;
  uint64_t v140 = 0LL;
  __int128 v138 = 0u;
  __int128 v139 = 0u;
  __int128 v136 = 0u;
  __int128 v137 = 0u;
  swift_bridgeObjectRetain();
  specialized AttributedString._AttributeStorage.subscript.setter((uint64_t)&v136, v70, v71);
  swift_bridgeObjectRelease();
  specialized AttributedString.replaceSubrange<A, B>(_:with:)(v146, v37);
  __int128 v114 = *(_OWORD **)v6;
  __int128 v72 = *(_OWORD *)(v37 + 16);
  __int128 v73 = *(_OWORD *)(v37 + 48);
  __int128 v155 = *(_OWORD *)(v37 + 32);
  __int128 v156 = v73;
  __int128 v154 = v72;
  __int128 v104 = *(_OWORD *)(v37 + 32);
  __int128 v105 = *(_OWORD *)(v37 + 16);
  uint64_t v101 = *(void *)(v37 + 56);
  uint64_t v103 = *(void *)(v37 + 48);
  uint64_t v74 = BigString.startIndex.getter();
  uint64_t v76 = v75;
  uint64_t v78 = v77;
  uint64_t v80 = v79;
  uint64_t v81 = BigString.endIndex.getter();
  __int128 v136 = v105;
  __int128 v137 = v104;
  *(void *)&__int128 v138 = v103;
  *((void *)&v138 + 1) = v101;
  *(void *)&__int128 v139 = v74;
  *((void *)&v139 + 1) = v76;
  uint64_t v140 = v78;
  uint64_t v141 = v80;
  uint64_t v142 = v81;
  uint64_t v143 = v82;
  uint64_t v144 = v83;
  uint64_t v145 = v84;
  swift_retain();
  swift_retain();
  outlined retain of Locale((uint64_t)&v154);
  BigSubstring.distance(from:to:)();
  outlined release of Locale((uint64_t)&v154);
  __int128 v112 = (_OWORD *)v37;
  swift_release();
  __int128 v85 = v114[2];
  __int128 v133 = v114[1];
  __int128 v134 = v85;
  __int128 v135 = v114[3];
  unint64_t v86 = BigString.startIndex.getter();
  a3 = &v133;
  unint64_t v87 = BigString.endIndex.getter();
  unint64_t v88 = (unint64_t)v117 >> 10;
  unint64_t v89 = v86 >> 10;
  if ((unint64_t)v117 >> 10 < v89 || (unint64_t v90 = v87 >> 10, v87 >> 10 < v88))
  {
    __break(1u);
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }

  swift_retain();
  outlined retain of Locale((uint64_t)&v133);
  unint64_t v91 = BigString.index(_:offsetBy:)();
  uint64_t v93 = v92;
  a3 = v94;
  uint64_t v111 = v95;
  outlined release of Locale((uint64_t)&v133);
  swift_release_n();
  unint64_t v96 = v91 >> 10;
  if (v91 >> 10 < v89 || v90 < v96) {
    goto LABEL_27;
  }
  if (v96 < v88)
  {
LABEL_28:
    __break(1u);
    goto LABEL_29;
  }

  __int128 v121 = v117;
  *(void *)&__int128 v122 = v119;
  *((void *)&v122 + 1) = v115;
  *(void *)&__int128 v123 = v91;
  *((void *)&v123 + 1) = v93;
  uint64_t v124 = a3;
  uint64_t v125 = v111;
  specialized AttributedString._addAttributesNotPresentMergingInlinePresentationIntents(_:to:)( *(uint64_t *)&v128[0],  &v121);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  __int128 v97 = v112[2];
  __int128 v130 = v112[1];
  __int128 v131 = v97;
  __int128 v132 = v112[3];
  __int128 v122 = v97;
  __int128 v123 = v132;
  __int128 v121 = v130;
  outlined init with take of any PredicateExpression<Self.Output == B1>(&v121, (uint64_t)v129);
  outlined retain of Locale((uint64_t)v129);
  MEMORY[0x186E1B6D0](&v130);
  uint64_t v98 = String._bridgeToObjectiveCImpl()();
  swift_bridgeObjectRelease();
  objc_msgSend(v107, sel_replaceCharactersInRange_withString_, v108, v106, v98);
  swift_unknownObjectRelease();
  return swift_release();
}

uint64_t thunk for @escaping @callee_guaranteed (@unowned _NSRange, @in_guaranteed Any) -> ()( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  id v7 = *(void (**)(uint64_t, uint64_t, void *))(a1 + 32);
  v9[3] = swift_getObjectType();
  v9[0] = a4;
  swift_unknownObjectRetain();
  v7(a2, a3, v9);
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v9);
}

uint64_t thunk for @escaping @callee_guaranteed (@unowned _NSRange, @guaranteed NSAttributedStringKey, @in_guaranteed Any) -> ()( uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5)
{
  uint64_t v9 = *(void (**)(uint64_t, uint64_t, id, void *))(a1 + 32);
  v12[3] = swift_getObjectType();
  v12[0] = a5;
  id v10 = a4;
  swift_unknownObjectRetain();
  v9(a2, a3, v10, v12);

  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v12);
}

double closure #14 in AttributedString.inflected(locale:userTermOfAddress:replacements:concepts:preflight:)@<D0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  if (swift_dynamicCast())
  {
    uint64_t v6 = v7;
    uint64_t v7 = a2;
    *(void *)(a3 + 24) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttributedString?);
    swift_retain();
    AttributedString.formatInflectionAlternative(_:replacements:)((uint64_t)&v6);
    swift_release();
    swift_release();
  }

  else
  {
    double result = 0.0;
    *(_OWORD *)a3 = 0u;
    *(_OWORD *)(a3 + 16) = 0u;
  }

  return result;
}

uint64_t AttributedString.formatInflectionAlternative(_:replacements:)(uint64_t a1)
{
  v483 = v3;
  unint64_t v484 = v2;
  __int128 v5 = *(_OWORD **)v4;
  v485 = (_OWORD *)*v1;
  __int128 v6 = *(_OWORD *)(*(void *)v4 + 16LL);
  __int128 v7 = *(_OWORD *)(*(void *)v4 + 48LL);
  __int128 v806 = *(_OWORD *)(*(void *)v4 + 32LL);
  __int128 v807 = v7;
  __int128 v805 = v6;
  unint64_t v8 = BigString.startIndex.getter();
  uint64_t v10 = v9;
  uint64_t v12 = v11;
  uint64_t v14 = v13;
  __int128 v15 = v5[2];
  __int128 v802 = v5[1];
  __int128 v803 = v15;
  __int128 v804 = v5[3];
  swift_retain();
  BigString.startIndex.getter();
  unint64_t v16 = BigString.endIndex.getter();
  if (v16 >> 10 < v8 >> 10) {
    goto LABEL_157;
  }
  uint64_t v20 = v5 + 1;
  v482 = v485 + 1;
  unint64_t v479 = v484 + 32;
  unint64_t v481 = v484 & 0xC000000000000001LL;
  while (1)
  {
    unint64_t v794 = v8;
    uint64_t v795 = v10;
    uint64_t v796 = v12;
    uint64_t v797 = v14;
    unint64_t v798 = v16;
    uint64_t v799 = v17;
    uint64_t v800 = v18;
    uint64_t v801 = v19;
    BigString.unicodeScalars.getter();
    swift_retain();
    BigString.UnicodeScalarView.subscript.getter();
    outlined release of Locale((uint64_t)&v552);
    outlined release of Locale((uint64_t)v553);
    __int128 v626 = v553[3];
    __int128 v627 = v553[4];
    __int128 v628 = v553[5];
    __int128 v629 = v553[6];
    __int128 v21 = *v20;
    v530 = v20;
    __int128 v22 = v20[2];
    v793[1] = v20[1];
    v793[2] = v22;
    v793[0] = v21;
    swift_retain();
    outlined retain of Locale((uint64_t)v793);
    BigString.subscript.getter();
    outlined release of Locale((uint64_t)v793);
    outlined release of Locale((uint64_t)v554);
    *(_OWORD *)&v545[8] = v554[3];
    *(_OWORD *)&v545[24] = v554[4];
    *(_OWORD *)&v545[40] = v554[5];
    *(_OWORD *)&v545[56] = v554[6];
    *(void *)v545 = v5;
    *(void *)&__int128 v546 = 0LL;
    lazy protocol witness table accessor for type AttributedString.CharacterView and conformance AttributedString.CharacterView();
    unint64_t v23 = Substring.init<A>(_:)();
    unint64_t v25 = v24;
    uint64_t v27 = v26;
    uint64_t v29 = v28;
    *(void *)v545 = 123LL;
    *(void *)&v545[8] = 0xE100000000000000LL;
    unint64_t v30 = Substring.init<A>(_:)();
    if ((v23 ^ v25) < 0x4000 || !((v30 ^ v31) >> 14))
    {
      swift_release();
      swift_bridgeObjectRelease();
LABEL_108:
      swift_bridgeObjectRelease();
      __int128 v313 = v530[1];
      __int128 v677 = *v530;
      __int128 v678 = v313;
      __int128 v679 = v530[2];
      unint64_t v314 = BigString.startIndex.getter();
      uint64_t v316 = v315;
      uint64_t v318 = v317;
      uint64_t v320 = v319;
      while (1)
      {
        __int128 v321 = v5[2];
        __int128 v674 = v5[1];
        __int128 v675 = v321;
        __int128 v676 = v5[3];
        BigString.startIndex.getter();
        unint64_t v322 = BigString.endIndex.getter();
        if (v314 >> 10 > v322 >> 10) {
          goto LABEL_158;
        }
        unint64_t v326 = v5 + 1;
        unint64_t v666 = v314;
        uint64_t v667 = v316;
        uint64_t v668 = v318;
        uint64_t v534 = v320;
        uint64_t v669 = v320;
        unint64_t v670 = v322;
        uint64_t v671 = v323;
        uint64_t v672 = v324;
        uint64_t v673 = v325;
        BigString.unicodeScalars.getter();
        swift_retain();
        BigString.UnicodeScalarView.subscript.getter();
        outlined release of Locale((uint64_t)&v577);
        outlined release of Locale((uint64_t)v578);
        __int128 v611 = v580;
        __int128 v613 = v582;
        __int128 v612 = v581;
        __int128 v610 = v579;
        __int128 v327 = v5[1];
        __int128 v328 = v5[2];
        v665[2] = v5[3];
        v665[1] = v328;
        v665[0] = v327;
        swift_retain();
        outlined retain of Locale((uint64_t)v665);
        BigString.subscript.getter();
        outlined release of Locale((uint64_t)v665);
        outlined release of Locale((uint64_t)&v583);
        v540 = v5;
        *(void *)v542 = v5;
        *(_OWORD *)&v542[8] = v587;
        *(_OWORD *)&v542[24] = v588;
        *(_OWORD *)&v542[40] = v589;
        *(_OWORD *)&v542[56] = v590;
        *(void *)&v542[72] = 0LL;
        unint64_t v329 = Substring.init<A>(_:)();
        unint64_t v331 = v330;
        uint64_t v333 = v332;
        uint64_t v335 = v334;
        *(void *)v542 = 32125LL;
        *(void *)&v542[8] = 0xE200000000000000LL;
        unint64_t v336 = Substring.init<A>(_:)();
        uint64_t v520 = v316;
        if (!((v329 ^ v331) >> 14) || !((v336 ^ v337) >> 14))
        {
          __int128 v437 = v540;
          swift_release();
          swift_bridgeObjectRelease();
          goto LABEL_137;
        }

        v508 = v326;
        specialized _StringCompareOptionsIterable._range<A>(of:toHalfWidth:diacriticsInsensitive:caseFold:anchored:backwards:)( v336,  v337,  v338,  v339,  0,  0,  0,  0,  0,  v329,  v331,  v333,  v335);
        char v341 = v340;
        swift_bridgeObjectRelease();
        if ((v341 & 1) != 0) {
          break;
        }
        swift_bridgeObjectRetain();
        uint64_t v342 = Substring.UTF8View.distance(from:to:)();
        swift_bridgeObjectRelease();
        uint64_t v343 = Substring.UTF8View.distance(from:to:)();
        swift_bridgeObjectRelease();
        unint64_t v344 = (unint64_t)v610 >> 11;
        __int128 v345 = v326[1];
        __int128 v662 = *v326;
        __int128 v663 = v345;
        __int128 v664 = v326[2];
        BigString.utf8.getter();
        BigString.startIndex.getter();
        swift_retain();
        uint64_t v346 = BigString.UTF8View.index(_:offsetBy:)();
        uint64_t v528 = v347;
        uint64_t v513 = v349;
        uint64_t v521 = v348;
        outlined release of Locale((uint64_t)&v591);
        swift_release();
        if (__OFADD__(v344, v343)) {
          goto LABEL_164;
        }
        __int128 v350 = v326[1];
        __int128 v659 = *v326;
        __int128 v660 = v350;
        __int128 v661 = v326[2];
        BigString.utf8.getter();
        BigString.startIndex.getter();
        unint64_t v535 = v346;
        swift_retain();
        unint64_t v351 = BigString.UTF8View.index(_:offsetBy:)();
        uint64_t v353 = v352;
        uint64_t v355 = v354;
        uint64_t v357 = v356;
        outlined release of Locale((uint64_t)v592);
        swift_release_n();
        if (v351 >> 10 < v535 >> 10) {
          goto LABEL_165;
        }
        unint64_t v493 = v351;
        unint64_t v496 = v351 >> 10;
        uint64_t v486 = v357;
        uint64_t v489 = v355;
        uint64_t v491 = v353;
        __int128 v358 = *v326;
        __int128 v657 = v326[1];
        __int128 v658 = v326[2];
        __int128 v656 = v358;
        uint64_t v360 = v540[2];
        uint64_t v359 = v540[3];
        uint64_t v361 = v540[4];
        uint64_t v362 = v540[7];
        uint64_t v503 = v540[6];
        uint64_t v505 = v540[5];
        unint64_t v510 = v535 >> 10;
        unint64_t v363 = BigString.startIndex.getter();
        uint64_t v365 = v364;
        uint64_t v367 = v366;
        uint64_t v369 = v368;
        unint64_t v370 = BigString.endIndex.getter();
        if (v370 >> 10 < v535 >> 10 || v510 < v363 >> 10 || v370 >> 10 < v363 >> 10) {
          goto LABEL_166;
        }
        *(void *)v545 = v360;
        *(void *)&v545[8] = v359;
        *(void *)&v545[16] = v361;
        *(void *)&v545[24] = v505;
        *(void *)&v545[32] = v503;
        *(void *)&v545[40] = v362;
        *(void *)&v545[48] = v363;
        *(void *)&v545[56] = v365;
        *(void *)&v545[64] = v367;
        *(void *)&__int128 v546 = v369;
        *((void *)&v546 + 1) = v370;
        *(void *)&__int128 v547 = v371;
        *((void *)&v547 + 1) = v372;
        *(void *)&__int128 v548 = v373;
        v826[0] = v656;
        v826[1] = v657;
        v826[2] = v658;
        outlined init with take of any PredicateExpression<Self.Output == B1>(v826, (uint64_t)v827);
        outlined retain of Locale((uint64_t)v827);
        uint64_t v374 = BigSubstring.distance(from:to:)();
        outlined release of Locale((uint64_t)&v656);
        __int128 v375 = v540;
        uint64_t v506 = v374;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          __int128 v376 = v508[1];
          v655[0] = *v508;
          v655[1] = v376;
          v655[2] = v508[2];
          uint64_t v377 = v540[8];
          uint64_t v378 = v540[9];
          uint64_t v379 = v540[10];
          uint64_t v380 = v540[11];
          type metadata accessor for AttributedString.Guts();
          swift_allocObject();
          outlined retain of Locale((uint64_t)v655);
          swift_unknownObjectRetain();
          uint64_t v381 = AttributedString.Guts.init(string:runs:)(v655, v377, v378, v379, v380);
          swift_release();
          __int128 v375 = (_OWORD *)v381;
        }

        __int128 v382 = v375[2];
        __int128 v652 = v375[1];
        __int128 v653 = v382;
        __int128 v654 = v375[3];
        unint64_t v383 = BigString.startIndex.getter();
        uint64_t v385 = v384;
        uint64_t v387 = v386;
        uint64_t v389 = v388;
        unint64_t v390 = BigString.endIndex.getter();
        *(void *)v542 = v375;
        *(void *)&v542[8] = v383;
        *(void *)&v542[16] = v385;
        *(void *)&v542[24] = v387;
        *(void *)&v542[32] = v389;
        *(void *)&v542[40] = v390;
        *(void *)&v542[48] = v391;
        *(void *)&v542[56] = v392;
        *(void *)&v542[64] = v393;
        uint64_t v394 = one-time initialization token for currentIdentity;
        swift_retain();
        if (v394 != -1) {
          swift_once();
        }
        uint64_t v395 = (uint64_t *)(static AttributedString.currentIdentity + 16);
        v396 = (os_unfair_lock_s *)(static AttributedString.currentIdentity + 24);
        swift_retain();
        os_unfair_lock_lock(v396);
        closure #1 in static AttributedString._nextModifyIdentity.getter(v395, &v594);
        os_unfair_lock_unlock(v396);
        swift_release();
        uint64_t v397 = v594;
        *(void *)&v542[72] = v594;
        BigString.init()();
        uint64_t v594 = 0LL;
        MEMORY[0x186E20E78](&v594, 8LL);
        uint64_t v398 = v594;
        type metadata accessor for AttributedString.Guts();
        uint64_t v399 = swift_allocObject();
        if ((BigString.isEmpty.getter() & 1) == 0) {
          goto LABEL_167;
        }
        __int128 v400 = v592[4];
        *(_OWORD *)(v399 + 16) = v592[3];
        *(_OWORD *)(v399 + 32) = v400;
        *(_OWORD *)(v399 + 48) = v592[5];
        *(void *)(v399 + 64) = 0LL;
        *(void *)(v399 + 72) = 0LL;
        *(void *)(v399 + 80) = 0LL;
        *(void *)(v399 + 88) = v398;
        swift_release();
        if (v510 < v383 >> 10 || v390 >> 10 < v496) {
          goto LABEL_168;
        }
        uint64_t v541 = v397;
        uint64_t v401 = *(void *)v542;
        __int128 v402 = *(_OWORD *)(*(void *)v542 + 16LL);
        __int128 v403 = *(_OWORD *)(*(void *)v542 + 32LL);
        __int128 v651 = *(_OWORD *)(*(void *)v542 + 48LL);
        v650[1] = v403;
        v650[0] = v402;
        __int128 v404 = *(_OWORD *)(*(void *)v542 + 16LL);
        __int128 v405 = *(_OWORD *)(*(void *)v542 + 32LL);
        v828[2] = v651;
        v828[1] = v405;
        v828[0] = v404;
        outlined init with take of any PredicateExpression<Self.Output == B1>(v828, (uint64_t)v829);
        outlined retain of Locale((uint64_t)v829);
        uint64_t v536 = MEMORY[0x186E1AE90](v535, v528, v521, v513);
        unint64_t v529 = v406;
        unint64_t v408 = v407;
        unint64_t v410 = v409;
        outlined release of Locale((uint64_t)v650);
        __int128 v411 = *(_OWORD *)(v401 + 16);
        v648[1] = *(_OWORD *)(v401 + 32);
        __int128 v649 = *(_OWORD *)(v401 + 48);
        v648[0] = v411;
        __int128 v412 = *(_OWORD *)(v401 + 16);
        __int128 v413 = *(_OWORD *)(v401 + 32);
        v830[2] = v649;
        v830[1] = v413;
        v830[0] = v412;
        outlined init with take of any PredicateExpression<Self.Output == B1>(v830, (uint64_t)v831);
        outlined retain of Locale((uint64_t)v831);
        uint64_t v414 = MEMORY[0x186E1AE90](v493, v491, v489, v486);
        unint64_t v416 = v415;
        unint64_t v418 = v417;
        unint64_t v420 = v419;
        outlined release of Locale((uint64_t)v648);
        v646[0] = v536;
        v646[1] = v529;
        v646[2] = v408;
        v646[3] = v410;
        v646[4] = v414;
        v646[5] = v416;
        v646[6] = v418;
        v646[7] = v420;
        uint64_t v594 = 125LL;
        unint64_t v595 = 0xE100000000000000LL;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          __int128 v421 = *(_OWORD *)(v401 + 32);
          v647[0] = *(_OWORD *)(v401 + 16);
          v647[1] = v421;
          v647[2] = *(_OWORD *)(v401 + 48);
          uint64_t v422 = *(void *)(v401 + 64);
          uint64_t v423 = *(void *)(v401 + 72);
          uint64_t v424 = *(void *)(v401 + 80);
          uint64_t v425 = *(void *)(v401 + 88);
          swift_allocObject();
          outlined retain of Locale((uint64_t)v647);
          swift_unknownObjectRetain();
          *(void *)v542 = AttributedString.Guts.init(string:runs:)(v647, v422, v423, v424, v425);
          swift_release();
        }

        LOBYTE(v551[0]) = 1;
        uint64_t v426 = AttributedString.Guts.attributesToUseForTextReplacement(in:)(v646);
        uint64_t v428 = v427;
        MEMORY[0x1895F8858](v426);
        AttributedString.CharacterView._mutateStringContents(in:attributes:with:)( v646,  v426,  v428,  (void (*)(__int128 *, void *))partial apply for specialized closure #1 in AttributedString.CharacterView._replaceSubrange<A>(_:with:));
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if (*(void *)&v542[72] != v541) {
          goto LABEL_198;
        }
        __int128 v5 = *(_OWORD **)v542;
        swift_release();
        __int128 v429 = v5[2];
        v645[0] = v5[1];
        v645[1] = v429;
        v645[2] = v5[3];
        unint64_t v430 = BigString.startIndex.getter();
        unint64_t v431 = BigString.endIndex.getter();
        if (__OFADD__(v506, 1LL)) {
          goto LABEL_169;
        }
        unint64_t v432 = v430 >> 10;
        unint64_t v433 = v431 >> 10;
        if (v431 >> 10 < v430 >> 10) {
          goto LABEL_170;
        }
        swift_retain();
        outlined retain of Locale((uint64_t)v645);
        unint64_t v314 = BigString.index(_:offsetBy:)();
        uint64_t v316 = v434;
        uint64_t v318 = v435;
        uint64_t v320 = v436;
        outlined release of Locale((uint64_t)v645);
        swift_release();
        if (v314 >> 10 < v432 || v433 < v314 >> 10) {
          goto LABEL_171;
        }
      }

      __int128 v437 = v540;
      swift_release();
LABEL_137:
      swift_bridgeObjectRelease();
      __int128 v439 = v326[1];
      __int128 v642 = *v326;
      __int128 v643 = v439;
      __int128 v644 = v326[2];
      BigString.startIndex.getter();
      unint64_t v440 = BigString.endIndex.getter();
      if (v314 >> 10 > v440 >> 10) {
        goto LABEL_185;
      }
      unint64_t v634 = v314;
      uint64_t v635 = v520;
      uint64_t v636 = v318;
      uint64_t v637 = v534;
      unint64_t v638 = v440;
      uint64_t v639 = v441;
      uint64_t v640 = v442;
      uint64_t v641 = v443;
      BigString.unicodeScalars.getter();
      swift_retain();
      BigString.UnicodeScalarView.subscript.getter();
      outlined release of Locale((uint64_t)&v593);
      outlined release of Locale((uint64_t)&v594);
      __int128 v607 = v601;
      __int128 v609 = v603;
      __int128 v608 = v602;
      __int128 v606 = v600;
      __int128 v444 = *v326;
      __int128 v445 = v326[1];
      v633[2] = v326[2];
      v633[1] = v445;
      v633[0] = v444;
      swift_retain();
      outlined retain of Locale((uint64_t)v633);
      BigString.subscript.getter();
      outlined release of Locale((uint64_t)v633);
      outlined release of Locale((uint64_t)v542);
      *(_OWORD *)&v551[1] = *(_OWORD *)&v542[48];
      *(_OWORD *)&v551[3] = *(_OWORD *)&v542[64];
      *(_OWORD *)&v551[5] = *(_OWORD *)&v542[80];
      *(_OWORD *)&v551[7] = *(_OWORD *)&v542[96];
      v551[0] = v437;
      v551[9] = 0LL;
      unint64_t v446 = Substring.init<A>(_:)();
      unint64_t v448 = v447;
      uint64_t v450 = v449;
      uint64_t v452 = v451;
      v551[0] = 125LL;
      v551[1] = 0xE100000000000000LL;
      unint64_t v453 = Substring.init<A>(_:)();
      if ((v446 ^ v448) >= 0x4000 && (v453 ^ v454) >> 14)
      {
        specialized _StringCompareOptionsIterable._range<A>(of:toHalfWidth:diacriticsInsensitive:caseFold:anchored:backwards:)( v453,  v454,  v455,  v456,  0,  0,  0,  0,  0,  v446,  v448,  v450,  v452);
        char v458 = v457;
        swift_bridgeObjectRelease();
        if ((v458 & 1) == 0)
        {
          swift_bridgeObjectRetain();
          uint64_t v459 = Substring.UTF8View.distance(from:to:)();
          swift_bridgeObjectRelease();
          uint64_t v537 = Substring.UTF8View.distance(from:to:)();
          swift_bridgeObjectRelease();
          unint64_t v460 = (unint64_t)v606 >> 11;
          __int128 v461 = v326[1];
          *(_OWORD *)v551 = *v326;
          *(_OWORD *)&v551[2] = v461;
          *(_OWORD *)&v551[4] = v326[2];
          BigString.utf8.getter();
          BigString.startIndex.getter();
          swift_retain();
          unint64_t v462 = BigString.UTF8View.index(_:offsetBy:)();
          outlined release of Locale((uint64_t)&v604);
          swift_release();
          if (__OFADD__(v460, v537))
          {
LABEL_196:
            __break(1u);
          }

          else
          {
            __int128 v463 = v326[1];
            __int128 v630 = *v326;
            __int128 v631 = v463;
            __int128 v632 = v326[2];
            BigString.utf8.getter();
            BigString.startIndex.getter();
            swift_retain();
            unint64_t v464 = BigString.UTF8View.index(_:offsetBy:)();
            outlined release of Locale((uint64_t)&v605);
            swift_release_n();
            if (v464 >> 10 >= v462 >> 10)
            {
              void *v483 = 0LL;
              return swift_release();
            }
          }

          __break(1u);
LABEL_198:
          uint64_t result = _assertionFailure(_:_:file:line:flags:)();
          __break(1u);
          return result;
        }

        __int128 v437 = v540;
        swift_release();
      }

      else
      {
        swift_release();
        swift_bridgeObjectRelease();
      }

      uint64_t result = swift_bridgeObjectRelease();
      void *v483 = v437;
      return result;
    }

    v538 = v5;
    specialized _StringCompareOptionsIterable._range<A>(of:toHalfWidth:diacriticsInsensitive:caseFold:anchored:backwards:)( v30,  v31,  v32,  v33,  0,  0,  0,  0,  0,  v23,  v25,  v27,  v29);
    char v35 = v34;
    swift_bridgeObjectRelease();
    if ((v35 & 1) != 0)
    {
      __int128 v5 = v538;
      swift_release();
      goto LABEL_108;
    }

    swift_bridgeObjectRetain();
    uint64_t v36 = Substring.UTF8View.distance(from:to:)();
    swift_bridgeObjectRelease();
    uint64_t v37 = Substring.UTF8View.distance(from:to:)();
    swift_bridgeObjectRelease();
    unint64_t v38 = (unint64_t)v626 >> 11;
    __int128 v39 = v530[1];
    v792[6] = *v530;
    v792[7] = v39;
    v792[8] = v530[2];
    BigString.utf8.getter();
    BigString.startIndex.getter();
    swift_retain();
    unint64_t v40 = BigString.UTF8View.index(_:offsetBy:)();
    uint64_t v507 = v41;
    uint64_t v509 = v42;
    uint64_t v511 = v43;
    outlined release of Locale((uint64_t)&v555);
    swift_release();
    if (__OFADD__(v38, v37)) {
      goto LABEL_160;
    }
    __int128 v44 = v530[1];
    v792[3] = *v530;
    v792[4] = v44;
    v792[5] = v530[2];
    BigString.utf8.getter();
    BigString.startIndex.getter();
    swift_retain();
    unint64_t v45 = BigString.UTF8View.index(_:offsetBy:)();
    uint64_t v47 = v46;
    uint64_t v49 = v48;
    uint64_t v51 = v50;
    outlined release of Locale((uint64_t)v556);
    swift_release_n();
    unint64_t v514 = v45;
    if (v45 >> 10 < v40 >> 10) {
      goto LABEL_161;
    }
    unint64_t v504 = v40 >> 10;
    __int128 v52 = v530[1];
    v792[0] = *v530;
    v792[1] = v52;
    v792[2] = v530[2];
    unint64_t v522 = v45 >> 10;
    unint64_t v53 = (unint64_t)BigString.endIndex.getter() >> 10;
    if (v45 >> 10 == v53)
    {
      uint64_t result = swift_release();
      void *v483 = 0LL;
      return result;
    }

    unint64_t v54 = BigString.startIndex.getter();
    if (v522 >= v53 || v522 < v54 >> 10) {
      goto LABEL_162;
    }
    swift_retain();
    outlined retain of Locale((uint64_t)v792);
    uint64_t v55 = BigString.subscript.getter();
    uint64_t v57 = v56;
    outlined release of Locale((uint64_t)v792);
    swift_release();
    unint64_t v502 = v40;
    uint64_t v492 = v49;
    uint64_t v494 = v51;
    uint64_t v490 = v47;
    if (v55 == 123 && v57 == 0xE100000000000000LL)
    {
      swift_bridgeObjectRelease();
LABEL_16:
      __int128 v59 = *v530;
      __int128 v708 = v530[1];
      __int128 v709 = v530[2];
      __int128 v707 = v59;
      uint64_t v487 = *(void *)v530;
      uint64_t v60 = v538[3];
      uint64_t v61 = v538[4];
      uint64_t v62 = v538[5];
      uint64_t v63 = v538[7];
      uint64_t v497 = v538[6];
      unint64_t v64 = BigString.startIndex.getter();
      uint64_t v66 = v65;
      uint64_t v68 = v67;
      uint64_t v70 = v69;
      unint64_t v71 = BigString.endIndex.getter();
      if (v71 >> 10 < v504 || v504 < v64 >> 10 || v71 >> 10 < v64 >> 10) {
        goto LABEL_172;
      }
      uint64_t v693 = v487;
      uint64_t v694 = v60;
      uint64_t v695 = v61;
      uint64_t v696 = v62;
      uint64_t v697 = v497;
      uint64_t v698 = v63;
      unint64_t v699 = v64;
      uint64_t v700 = v66;
      uint64_t v701 = v68;
      uint64_t v702 = v70;
      unint64_t v703 = v71;
      uint64_t v704 = v72;
      uint64_t v705 = v73;
      uint64_t v706 = v74;
      v818[0] = v707;
      v818[1] = v708;
      v818[2] = v709;
      outlined init with take of any PredicateExpression<Self.Output == B1>(v818, (uint64_t)v819);
      outlined retain of Locale((uint64_t)v819);
      uint64_t v75 = BigSubstring.distance(from:to:)();
      outlined release of Locale((uint64_t)&v707);
      uint64_t v76 = v538;
      uint64_t v498 = v75;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        __int128 v77 = v530[1];
        v692[0] = *v530;
        v692[1] = v77;
        v692[2] = v530[2];
        uint64_t v78 = v538[8];
        uint64_t v79 = v538[9];
        uint64_t v80 = v538[10];
        uint64_t v81 = v538[11];
        type metadata accessor for AttributedString.Guts();
        swift_allocObject();
        outlined retain of Locale((uint64_t)v692);
        swift_unknownObjectRetain();
        uint64_t v82 = AttributedString.Guts.init(string:runs:)(v692, v78, v79, v80, v81);
        swift_release();
        uint64_t v76 = (_OWORD *)v82;
      }

      __int128 v83 = v76[2];
      __int128 v689 = v76[1];
      __int128 v690 = v83;
      __int128 v691 = v76[3];
      unint64_t v84 = BigString.startIndex.getter();
      uint64_t v86 = v85;
      uint64_t v88 = v87;
      uint64_t v90 = v89;
      unint64_t v91 = BigString.endIndex.getter();
      *(void *)v545 = v76;
      *(void *)&v545[8] = v84;
      *(void *)&v545[16] = v86;
      *(void *)&v545[24] = v88;
      *(void *)&v545[32] = v90;
      *(void *)&v545[40] = v91;
      *(void *)&v545[48] = v92;
      *(void *)&v545[56] = v93;
      *(void *)&v545[64] = v94;
      uint64_t v95 = one-time initialization token for currentIdentity;
      swift_retain();
      if (v95 != -1) {
        swift_once();
      }
      unint64_t v96 = (uint64_t *)(static AttributedString.currentIdentity + 16);
      __int128 v97 = (os_unfair_lock_s *)(static AttributedString.currentIdentity + 24);
      swift_retain();
      os_unfair_lock_lock(v97);
      closure #1 in static AttributedString._nextModifyIdentity.getter(v96, (uint64_t *)v542);
      os_unfair_lock_unlock(v97);
      swift_release();
      uint64_t v98 = *(void *)v542;
      *(void *)&__int128 v546 = *(void *)v542;
      BigString.init()();
      *(void *)v542 = 0LL;
      MEMORY[0x186E20E78](v542, 8LL);
      uint64_t v99 = *(void *)v542;
      type metadata accessor for AttributedString.Guts();
      uint64_t v100 = swift_allocObject();
      if ((BigString.isEmpty.getter() & 1) == 0) {
        goto LABEL_173;
      }
      uint64_t v539 = v98;
      __int128 v101 = v556[4];
      *(_OWORD *)(v100 + 16) = v556[3];
      *(_OWORD *)(v100 + 32) = v101;
      *(_OWORD *)(v100 + 48) = v556[5];
      *(void *)(v100 + 64) = 0LL;
      *(void *)(v100 + 72) = 0LL;
      *(void *)(v100 + 80) = 0LL;
      *(void *)(v100 + 88) = v99;
      swift_release();
      unint64_t v102 = v84 >> 10;
      if (v522 < v84 >> 10) {
        goto LABEL_174;
      }
      unint64_t v103 = v91 >> 10;
      if (v103 < v522) {
        goto LABEL_174;
      }
      __int128 v104 = v76[1];
      v687[1] = v76[2];
      __int128 v688 = v76[3];
      v687[0] = v104;
      __int128 v105 = v76[1];
      __int128 v106 = v76[2];
      v820[2] = v688;
      v820[1] = v106;
      v820[0] = v105;
      outlined init with take of any PredicateExpression<Self.Output == B1>(v820, (uint64_t)v821);
      outlined retain of Locale((uint64_t)v821);
      unint64_t v107 = BigString.index(after:)();
      uint64_t v109 = v108;
      uint64_t v111 = v110;
      uint64_t v113 = v112;
      outlined release of Locale((uint64_t)v687);
      if (v504 < v102 || v103 < v107 >> 10) {
        goto LABEL_175;
      }
      uint64_t v114 = *(void *)v545;
      __int128 v115 = *(_OWORD *)(*(void *)v545 + 16LL);
      __int128 v116 = *(_OWORD *)(*(void *)v545 + 32LL);
      __int128 v686 = *(_OWORD *)(*(void *)v545 + 48LL);
      v685[1] = v116;
      v685[0] = v115;
      __int128 v117 = *(_OWORD *)(*(void *)v545 + 16LL);
      __int128 v118 = *(_OWORD *)(*(void *)v545 + 32LL);
      v822[2] = v686;
      v822[1] = v118;
      v822[0] = v117;
      outlined init with take of any PredicateExpression<Self.Output == B1>(v822, (uint64_t)v823);
      outlined retain of Locale((uint64_t)v823);
      uint64_t v531 = MEMORY[0x186E1AE90](v502, v507, v511, v509);
      unint64_t v523 = v119;
      unint64_t v512 = v121;
      unint64_t v515 = v120;
      outlined release of Locale((uint64_t)v685);
      __int128 v122 = *(_OWORD *)(v114 + 16);
      v683[1] = *(_OWORD *)(v114 + 32);
      __int128 v684 = *(_OWORD *)(v114 + 48);
      v683[0] = v122;
      __int128 v123 = *(_OWORD *)(v114 + 16);
      __int128 v124 = *(_OWORD *)(v114 + 32);
      v824[2] = v684;
      v824[1] = v124;
      v824[0] = v123;
      outlined init with take of any PredicateExpression<Self.Output == B1>(v824, (uint64_t)v825);
      outlined retain of Locale((uint64_t)v825);
      uint64_t v125 = MEMORY[0x186E1AE90](v107, v109, v111, v113);
      unint64_t v127 = v126;
      unint64_t v129 = v128;
      unint64_t v131 = v130;
      outlined release of Locale((uint64_t)v683);
      v681[0] = v531;
      v681[1] = v523;
      v681[2] = v515;
      v681[3] = v512;
      v681[4] = v125;
      v681[5] = v127;
      v681[6] = v129;
      v681[7] = v131;
      *(void *)v542 = 123LL;
      *(void *)&v542[8] = 0xE100000000000000LL;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        __int128 v132 = *(_OWORD *)(v114 + 32);
        v682[0] = *(_OWORD *)(v114 + 16);
        v682[1] = v132;
        v682[2] = *(_OWORD *)(v114 + 48);
        uint64_t v133 = *(void *)(v114 + 64);
        uint64_t v134 = *(void *)(v114 + 72);
        uint64_t v135 = *(void *)(v114 + 80);
        uint64_t v136 = *(void *)(v114 + 88);
        swift_allocObject();
        outlined retain of Locale((uint64_t)v682);
        swift_unknownObjectRetain();
        *(void *)v545 = AttributedString.Guts.init(string:runs:)(v682, v133, v134, v135, v136);
        swift_release();
      }

      LOBYTE(v594) = 1;
      uint64_t v137 = AttributedString.Guts.attributesToUseForTextReplacement(in:)(v681);
      uint64_t v139 = v138;
      MEMORY[0x1895F8858](v137);
      AttributedString.CharacterView._mutateStringContents(in:attributes:with:)( v681,  v137,  v139,  (void (*)(__int128 *, void *))closure #1 in AttributedString.CharacterView._replaceSubrange<A>(_:with:)specialized partial apply);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((void)v546 != v539) {
        goto LABEL_198;
      }
      __int128 v5 = *(_OWORD **)v545;
      swift_release();
      __int128 v140 = v5[2];
      v680[0] = v5[1];
      v680[1] = v140;
      v680[2] = v5[3];
      unint64_t v141 = BigString.startIndex.getter();
      unint64_t v142 = BigString.endIndex.getter();
      if (__OFADD__(v498, 1LL)) {
        goto LABEL_176;
      }
      unint64_t v143 = v141 >> 10;
      unint64_t v144 = v142 >> 10;
      if (v142 >> 10 < v141 >> 10) {
        goto LABEL_177;
      }
      swift_retain();
      outlined retain of Locale((uint64_t)v680);
      unint64_t v145 = BigString.index(_:offsetBy:)();
      uint64_t v532 = v146;
      uint64_t v12 = v147;
      uint64_t v14 = v148;
      outlined release of Locale((uint64_t)v680);
      swift_release();
      unint64_t v149 = v145 >> 10;
      if (v145 >> 10 < v143 || v144 < v149) {
        goto LABEL_178;
      }
      unint64_t v8 = v145;
      goto LABEL_36;
    }

    char v58 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v58 & 1) != 0) {
      goto LABEL_16;
    }
    __int128 v152 = v530[1];
    __int128 v789 = *v530;
    __int128 v790 = v152;
    __int128 v791 = v530[2];
    BigString.startIndex.getter();
    unint64_t v153 = BigString.endIndex.getter();
    if (v522 > v153 >> 10) {
      goto LABEL_179;
    }
    unint64_t v781 = v514;
    uint64_t v782 = v47;
    uint64_t v783 = v49;
    uint64_t v784 = v51;
    unint64_t v785 = v153;
    uint64_t v786 = v154;
    uint64_t v787 = v155;
    uint64_t v788 = v156;
    BigString.unicodeScalars.getter();
    swift_retain();
    BigString.UnicodeScalarView.subscript.getter();
    outlined release of Locale((uint64_t)&v557);
    outlined release of Locale((uint64_t)v558);
    __int128 v622 = v558[3];
    __int128 v623 = v558[4];
    __int128 v624 = v558[5];
    __int128 v625 = v558[6];
    __int128 v157 = *v530;
    __int128 v158 = v530[2];
    v780[1] = v530[1];
    v780[2] = v158;
    v780[0] = v157;
    swift_retain();
    outlined retain of Locale((uint64_t)v780);
    BigString.subscript.getter();
    outlined release of Locale((uint64_t)v780);
    outlined release of Locale((uint64_t)v559);
    *(_OWORD *)&v545[8] = v559[3];
    *(_OWORD *)&v545[24] = v559[4];
    *(_OWORD *)&v545[40] = v559[5];
    *(_OWORD *)&v545[56] = v559[6];
    *(void *)v545 = v538;
    *(void *)&__int128 v546 = 0LL;
    unint64_t v159 = Substring.init<A>(_:)();
    unint64_t v161 = v160;
    uint64_t v163 = v162;
    uint64_t v165 = v164;
    *(void *)v545 = 125LL;
    *(void *)&v545[8] = 0xE100000000000000LL;
    unint64_t v166 = Substring.init<A>(_:)();
    if ((v159 ^ v161) < 0x4000 || !((v166 ^ v167) >> 14))
    {
      swift_release();
      swift_bridgeObjectRelease();
LABEL_150:
      swift_bridgeObjectRelease();
      goto LABEL_151;
    }

    specialized _StringCompareOptionsIterable._range<A>(of:toHalfWidth:diacriticsInsensitive:caseFold:anchored:backwards:)( v166,  v167,  v168,  v169,  0,  0,  0,  0,  0,  v159,  v161,  v163,  v165);
    char v171 = v170;
    swift_bridgeObjectRelease();
    if ((v171 & 1) != 0)
    {
LABEL_149:
      swift_release();
      goto LABEL_150;
    }

    swift_bridgeObjectRetain();
    uint64_t v172 = Substring.UTF8View.distance(from:to:)();
    swift_bridgeObjectRelease();
    uint64_t v173 = Substring.UTF8View.distance(from:to:)();
    swift_bridgeObjectRelease();
    unint64_t v174 = (unint64_t)v622 >> 11;
    __int128 v175 = v530[1];
    v779[6] = *v530;
    v779[7] = v175;
    v779[8] = v530[2];
    BigString.utf8.getter();
    BigString.startIndex.getter();
    swift_retain();
    unint64_t v176 = BigString.UTF8View.index(_:offsetBy:)();
    uint64_t v178 = v177;
    uint64_t v180 = v179;
    uint64_t v182 = v181;
    outlined release of Locale((uint64_t)&v560);
    swift_release();
    if (__OFADD__(v174, v173)) {
      goto LABEL_181;
    }
    uint64_t v480 = v178;
    uint64_t v488 = v182;
    uint64_t v499 = v180;
    __int128 v183 = v530[1];
    v779[3] = *v530;
    v779[4] = v183;
    v779[5] = v530[2];
    BigString.utf8.getter();
    BigString.startIndex.getter();
    swift_retain();
    unint64_t v184 = BigString.UTF8View.index(_:offsetBy:)();
    uint64_t v186 = v185;
    uint64_t v188 = v187;
    uint64_t v190 = v189;
    outlined release of Locale((uint64_t)&v561);
    swift_release_n();
    unint64_t v191 = v176 >> 10;
    if (v176 >> 10 < v522 || v184 >> 10 < v191) {
      goto LABEL_182;
    }
    uint64_t v478 = v190;
    __int128 v192 = v530[1];
    v779[0] = *v530;
    v779[1] = v192;
    v779[2] = v530[2];
    unint64_t v193 = BigString.startIndex.getter();
    unint64_t v194 = BigString.endIndex.getter();
    if (v522 < v193 >> 10 || v194 >> 10 < v191) {
      goto LABEL_183;
    }
    unint64_t v476 = v184;
    unint64_t v477 = v184 >> 10;
    uint64_t v474 = v188;
    uint64_t v475 = v186;
    unint64_t v771 = v514;
    uint64_t v772 = v490;
    uint64_t v773 = v492;
    uint64_t v774 = v494;
    unint64_t v775 = v176;
    uint64_t v776 = v480;
    uint64_t v777 = v499;
    uint64_t v778 = v488;
    swift_retain_n();
    outlined retain of Locale((uint64_t)v779);
    BigString.subscript.getter();
    outlined release of Locale((uint64_t)v779);
    outlined release of Locale((uint64_t)&v562);
    swift_release();
    __int128 v618 = v563;
    __int128 v619 = v564;
    __int128 v620 = v565;
    __int128 v621 = v566;
    *(_OWORD *)&v545[32] = v565;
    *(_OWORD *)&v545[48] = v566;
    __int128 v546 = v563;
    __int128 v547 = v564;
    __int128 v548 = v565;
    unint64_t v195 = v563;
    *(_OWORD *)v545 = v563;
    *(_OWORD *)&v545[16] = v564;
    __int128 v549 = v566;
    unint64_t v196 = (unint64_t)v565 >> 10;
    unint64_t v197 = (unint64_t)v563 >> 10;
    *(void *)&v545[64] = v538;
    uint64_t v550 = 0LL;
    if ((unint64_t)v563 >> 10 != (unint64_t)v565 >> 10)
    {
      swift_retain();
      unint64_t v199 = v195 >> 10;
      unint64_t v524 = v196;
      unint64_t v516 = v195 >> 10;
      while (v199 >= v197 && v199 < v196)
      {
        __int128 v200 = *v530;
        __int128 v201 = v530[2];
        v770[1] = v530[1];
        v770[2] = v201;
        v770[0] = v200;
        __int128 v202 = *v530;
        v808[1] = v530[1];
        v808[2] = v201;
        v808[0] = v202;
        outlined init with take of any PredicateExpression<Self.Output == B1>(v808, (uint64_t)v809);
        outlined retain of Locale((uint64_t)v809);
        BigString.subscript.getter();
        outlined release of Locale((uint64_t)v770);
        __int128 v203 = *v530;
        __int128 v204 = v530[2];
        unint64_t v196 = v524;
        v769[1] = v530[1];
        v769[2] = v204;
        v769[0] = v203;
        swift_retain();
        outlined retain of Locale((uint64_t)v769);
        unint64_t v205 = BigString.index(after:)();
        outlined release of Locale((uint64_t)v769);
        swift_release();
        unint64_t v199 = v205 >> 10;
        if (v524 < v205 >> 10) {
          goto LABEL_156;
        }
        char v206 = Character.isNumber.getter();
        swift_bridgeObjectRelease();
        if ((v206 & 1) == 0)
        {
          swift_release();
          goto LABEL_106;
        }

        unint64_t v197 = v516;
        if (v199 == v524)
        {
          uint64_t v198 = v538;
          swift_release();
          goto LABEL_58;
        }
      }

      goto LABEL_155;
    }

    uint64_t v198 = v538;
LABEL_58:
    __int128 v207 = v530[1];
    v768[0] = *v530;
    v768[1] = v207;
    v768[2] = v530[2];
    swift_retain();
    outlined retain of Slice<AttributedString.UnicodeScalarView>((uint64_t)v545);
    swift_retain();
    outlined retain of Locale((uint64_t)v768);
    BigString.subscript.getter();
    outlined release of Locale((uint64_t)v768);
    outlined release of Locale((uint64_t)v567);
    swift_release_n();
    uint64_t v208 = *(void *)v530;
    uint64_t v209 = v198[7];
    __int128 v761 = *(_OWORD *)(v198 + 3);
    __int128 v762 = *(_OWORD *)(v198 + 5);
    uint64_t v760 = v208;
    uint64_t v763 = v209;
    __int128 v764 = v567[3];
    __int128 v765 = v567[4];
    __int128 v766 = v567[5];
    __int128 v767 = v567[6];
    swift_unknownObjectRetain();
    swift_release();
    uint64_t v210 = MEMORY[0x186E1B6C4](&v760);
    uint64_t v212 = specialized FixedWidthInteger.init(_:)(v210, v211);
    if ((v213 & 1) != 0) {
      goto LABEL_106;
    }
    id v214 = (id)v212;
    unint64_t v215 = v212 - 1;
    if (v212 < 1) {
      goto LABEL_106;
    }
    if (v484 >> 62)
    {
      swift_bridgeObjectRetain();
      unint64_t v216 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if ((v216 & 0x8000000000000000LL) != 0) {
        goto LABEL_184;
      }
    }

    else
    {
      unint64_t v216 = *(void *)((v484 & 0xFFFFFFFFFFFFFF8LL) + 0x10);
    }

    if (v215 >= v216)
    {
      if (!v216)
      {
LABEL_106:
        swift_release();
        goto LABEL_151;
      }

uint64_t thunk for @callee_guaranteed (@in_guaranteed Any) -> (@out Any?)(uint64_t a1, uint64_t (*a2)(void))
{
  return a2();
}

id thunk for @escaping @callee_guaranteed (@in_guaranteed Any) -> (@out Any?)(uint64_t a1, uint64_t a2)
{
  void (*v3)(void *__return_ptr, void *);
  uint64_t v4;
  void *v5;
  uint64_t v6;
  __n128 v7;
  uint64_t v8;
  char *v9;
  void *v10;
  void v12[3];
  uint64_t v13;
  void v14[4];
  id v3 = *(void (**)(void *__return_ptr, void *))(a1 + 32);
  v14[3] = swift_getObjectType();
  v14[0] = a2;
  swift_unknownObjectRetain();
  v3(v12, v14);
  uint64_t v4 = v13;
  if (v13)
  {
    __int128 v5 = __swift_project_boxed_opaque_existential_1(v12, v13);
    __int128 v6 = *(void *)(v4 - 8);
    __int128 v7 = MEMORY[0x1895F8858](v5);
    uint64_t v9 = (char *)v12 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
    (*(void (**)(char *, __n128))(v6 + 16))(v9, v7);
    uint64_t v10 = (void *)_bridgeAnythingToObjectiveC<A>(_:)();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v4);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v12);
  }

  else
  {
    uint64_t v10 = 0LL;
  }

  __swift_destroy_boxed_opaque_existential_1((uint64_t)v14);
  return v10;
}

void closure #1 in AttributedString.enumerateInflectableRanges(in:editor:)( uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, char a5@<W4>, uint64_t a6@<X5>, char a7@<W6>, __int128 *a8@<X7>, uint64_t a9@<X8>)
{
  uint64_t v11 = *(void *)a1;
  uint64_t v10 = *(void *)(a1 + 8);
  unint64_t v12 = *(unsigned int *)(a1 + 16) | ((unint64_t)*(unsigned __int8 *)(a1 + 20) << 32);
  __int128 v34 = a8[1];
  __int128 v35 = *a8;
  __int128 v32 = a8[3];
  __int128 v33 = a8[2];
  if (v10)
  {
    if (v10 == 1)
    {
      outlined consume of AttributedString.AttributeRunBoundaries?(v11, 1LL);
      outlined consume of AttributedString.AttributeRunBoundaries?(0LL, 0LL);
      uint64_t v18 = 0LL;
    }

    else
    {
      v20.i64[0] = 0xFFFFFFFFFFLL;
      v20.i64[1] = 0xFFFFFFFFFFLL;
      uint64x2_t v21 = (uint64x2_t)vandq_s8((int8x16_t)vdupq_n_s64(v12), v20);
      int64x2_t v30 = (int64x2_t)vshlq_u64(v21, (uint64x2_t)xmmword_183728FF0);
      int64x2_t v29 = (int64x2_t)vshlq_u64(v21, (uint64x2_t)xmmword_183728FE0);
      outlined copy of AttributedString.AttributeRunBoundaries?(v11, v10);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      type metadata accessor for NSMorphologyPronoun(0LL, &lazy cache variable for type metadata for NSMorphology);
      __int16 v36 = v11;
      char v37 = BYTE2(v11);
      uint64_t v38 = v10;
      char v39 = v12;
      int32x2_t v22 = vmovn_s64(v29);
      v23.i64[1] = v30.i64[1];
      *(int32x2_t *)v23.i8 = vmovn_s64(v30);
      v23.i16[1] = v23.i16[2];
      v23.i16[2] = v22.i16[0];
      v23.i16[3] = v22.i16[2];
      unsigned __int32 v40 = vmovn_s16(v23).u32[0];
      swift_bridgeObjectRetain();
      *(void *)&v41.grammaticalGender.value = &v36;
      NSMorphology.init(_:)(v24, v41);
      uint64_t v18 = v25;
    }

    if ((a3 & 1) != 0) {
      uint64_t v26 = 0LL;
    }
    else {
      uint64_t v26 = a2;
    }
    if ((a5 & 1) != 0) {
      a4 = 0LL;
    }
    if ((a7 & 1) != 0) {
      uint64_t v27 = 0LL;
    }
    else {
      uint64_t v27 = a6;
    }
    id v19 = objc_msgSend( objc_allocWithZone((Class)_NSInflectionRuleExplicit),  sel_initWithMorphology_agreeWithArgument_agreeWithConcept_referentConcept_,  v18,  v26,  a4,  v27);

    if (v19) {
      goto LABEL_16;
    }
LABEL_5:
    *(void *)(a9 + 64) = 0LL;
    *(_OWORD *)(a9 + 32) = 0u;
    *(_OWORD *)(a9 + 48) = 0u;
    *(_OWORD *)a9 = 0u;
    *(_OWORD *)(a9 + 16) = 0u;
    return;
  }

  swift_bridgeObjectRelease_n();
  outlined consume of AttributedString.AttributeRunBoundaries?(v11, 0LL);
  outlined consume of AttributedString.AttributeRunBoundaries?(v11, 0LL);
  id v19 = objc_msgSend((id)objc_opt_self(), sel_automaticRule);
  if (!v19) {
    goto LABEL_5;
  }
LABEL_16:
  id v28 = v19;
  *(_OWORD *)a9 = v35;
  *(_OWORD *)(a9 + 16) = v34;
  *(_OWORD *)(a9 + 32) = v33;
  *(_OWORD *)(a9 + 48) = v32;
  *(void *)(a9 + 64) = v28;
}

uint64_t sub_1834F284C()
{
  return swift_deallocObject();
}

uint64_t block_copy_helper_22(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_22()
{
  return swift_release();
}

uint64_t sub_1834F2888()
{
  return swift_deallocObject();
}

uint64_t sub_1834F2898()
{
  return swift_deallocObject();
}

uint64_t sub_1834F28A8()
{
  return swift_deallocObject();
}

uint64_t sub_1834F28B8()
{
  return swift_deallocObject();
}

uint64_t sub_1834F28C8()
{
  return swift_deallocObject();
}

uint64_t sub_1834F28D8()
{
  return swift_deallocObject();
}

uint64_t sub_1834F28E8()
{
  return swift_deallocObject();
}

uint64_t sub_1834F28F8()
{
  return swift_deallocObject();
}

uint64_t sub_1834F2908()
{
  return swift_deallocObject();
}

uint64_t sub_1834F2918()
{
  return swift_deallocObject();
}

uint64_t partial apply for thunk for @callee_guaranteed (@guaranteed NSAttributedStringKey, @unowned _NSRange) -> (@out Any?)()
{
  return (*(uint64_t (**)(void))(v0 + 16))();
}

uint64_t sub_1834F2948()
{
  return swift_deallocObject();
}

uint64_t sub_1834F2958()
{
  return swift_deallocObject();
}

uint64_t sub_1834F2968()
{
  return swift_deallocObject();
}

uint64_t sub_1834F2978()
{
  return swift_deallocObject();
}

uint64_t sub_1834F298C()
{
  return swift_deallocObject();
}

uint64_t specialized closure #1 in AttributedString.CharacterView._replaceSubrange<A>(_:with:)( uint64_t a1, uint64_t a2, _BYTE *a3)
{
  if (*a3 == 1)
  {
    swift_bridgeObjectRetain();
    return BigSubstring.replaceSubrange<A>(_:with:)();
  }

  return result;
}

uint64_t specialized AttributedString.Runs.Run.subscript.getter()
{
  uint64_t v1 = (uint64_t)v0;
  uint64_t v2 = *v0;
  outlined retain of AttributedString.Runs.Run(v1);
  if (one-time initialization token for name == -1)
  {
    if (*(void *)(v2 + 16)) {
      goto LABEL_3;
    }
LABEL_8:
    uint64_t v14 = 0LL;
    __int128 v12 = 0u;
    __int128 v13 = 0u;
    __int128 v10 = 0u;
    __int128 v11 = 0u;
    goto LABEL_9;
  }

  swift_once();
  if (!*(void *)(v2 + 16)) {
    goto LABEL_8;
  }
LABEL_3:
  uint64_t v3 = qword_18C5D2C18;
  uint64_t v4 = static AttributeScopes.FoundationAttributes.InlinePresentationIntentAttribute.name;
  swift_bridgeObjectRetain();
  unint64_t v5 = specialized __RawDictionaryStorage.find<A>(_:)(v4, v3);
  if ((v6 & 1) == 0)
  {
    uint64_t v14 = 0LL;
    __int128 v12 = 0u;
    __int128 v13 = 0u;
    __int128 v10 = 0u;
    __int128 v11 = 0u;
    swift_bridgeObjectRelease();
    goto LABEL_9;
  }

  outlined init with copy of AttributedString._AttributeValue(*(void *)(v2 + 56) + 72 * v5, (uint64_t)&v10);
  swift_bridgeObjectRelease();
  if (!*((void *)&v11 + 1))
  {
LABEL_9:
    outlined destroy of Any?( (uint64_t)&v10,  &demangling cache variable for type metadata for AttributedString._AttributeValue?);
    uint64_t v7 = 0LL;
    uint64_t v15 = 0LL;
    char v16 = 1;
    goto LABEL_10;
  }

  outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>( (uint64_t)&v10,  (uint64_t)v9);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Hashable & Sendable);
  type metadata accessor for NSInlinePresentationIntent(0LL);
  swift_dynamicCast();
  outlined destroy of AttributedString._AttributeValue((uint64_t)&v10);
  char v16 = 0;
  uint64_t v7 = v15;
LABEL_10:
  outlined release of AttributedString.Runs.Run(v1);
  return v7;
}

uint64_t specialized AttributedString._AttributeStorage.subscript.getter(uint64_t a1)
{
  if (one-time initialization token for name == -1)
  {
    if (*(void *)(a1 + 16)) {
      goto LABEL_3;
    }
LABEL_8:
    uint64_t v12 = 0LL;
    __int128 v10 = 0u;
    __int128 v11 = 0u;
    __int128 v8 = 0u;
    __int128 v9 = 0u;
    goto LABEL_9;
  }

  swift_once();
  if (!*(void *)(a1 + 16)) {
    goto LABEL_8;
  }
LABEL_3:
  uint64_t v2 = qword_18C5D2C18;
  uint64_t v3 = static AttributeScopes.FoundationAttributes.InlinePresentationIntentAttribute.name;
  swift_bridgeObjectRetain();
  unint64_t v4 = specialized __RawDictionaryStorage.find<A>(_:)(v3, v2);
  if ((v5 & 1) != 0)
  {
    outlined init with copy of AttributedString._AttributeValue(*(void *)(a1 + 56) + 72 * v4, (uint64_t)&v8);
    swift_bridgeObjectRelease();
    if (*((void *)&v9 + 1))
    {
      outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>( (uint64_t)&v8,  (uint64_t)v7);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Hashable & Sendable);
      type metadata accessor for NSInlinePresentationIntent(0LL);
      swift_dynamicCast();
      outlined destroy of AttributedString._AttributeValue((uint64_t)&v8);
      return v13;
    }
  }

  else
  {
    uint64_t v12 = 0LL;
    __int128 v10 = 0u;
    __int128 v11 = 0u;
    __int128 v8 = 0u;
    __int128 v9 = 0u;
    swift_bridgeObjectRelease();
  }

uint64_t specialized AttributedString.enumerate<A>(_:in:editor:)( __int128 *a1, _OWORD *a2, void (*a3)(void *, uint64_t, uint64_t, char *), uint64_t a4, uint64_t a5)
{
  uint64_t v71 = *MEMORY[0x1895F89C0];
  __int128 v7 = a2[2];
  __int128 v52 = a2[1];
  __int128 v53 = v7;
  __int128 v54 = a2[3];
  BigString.startIndex.getter();
  BigString.endIndex.getter();
  __int128 v8 = a1[1];
  __int128 v48 = *a1;
  __int128 v49 = v8;
  __int128 v9 = a1[3];
  __int128 v50 = a1[2];
  __int128 v51 = v9;
  BigString.unicodeScalars.getter();
  swift_retain_n();
  BigString.UnicodeScalarView.subscript.getter();
  outlined release of Locale((uint64_t)v33);
  outlined release of Locale((uint64_t)v34);
  swift_release();
  __int128 v41 = v35;
  __int128 v42 = v36;
  __int128 v43 = v37;
  __int128 v44 = v38;
  AttributedString.Runs.init(_:in:)((uint64_t)a2, &v55);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
  uint64_t v10 = swift_allocObject();
  *(_OWORD *)(v10 + 16) = xmmword_183720D90;
  if (one-time initialization token for name != -1) {
    swift_once();
  }
  uint64_t v11 = qword_18C5D2BD8;
  *(void *)(v10 + 32) = static AttributeScopes.FoundationAttributes.InflectionRuleAttribute.name;
  *(void *)(v10 + 40) = v11;
  v68[10] = v65;
  v68[11] = v66;
  v68[6] = v61;
  v68[7] = v62;
  v68[8] = v63;
  v68[9] = v64;
  v68[2] = v57;
  v68[3] = v58;
  v68[4] = v59;
  v68[5] = v60;
  v68[0] = v55;
  v68[1] = v56;
  *(void *)&__int128 v69 = v67;
  *((void *)&v69 + 1) = v10;
  uint64_t v70 = MEMORY[0x18961AFE8];
  uint64_t v47 = MEMORY[0x18961AFE8];
  v46[10] = v65;
  v46[11] = v66;
  v46[6] = v61;
  v46[7] = v62;
  v46[8] = v63;
  v46[9] = v64;
  v46[2] = v57;
  v46[3] = v58;
  v46[4] = v59;
  v46[5] = v60;
  v46[0] = v55;
  v46[1] = v56;
  v46[12] = v69;
  swift_bridgeObjectRetain();
  uint64_t v12 = specialized _copyCollectionToContiguousArray<A>(_:)((uint64_t)v46);
  outlined release of ReversedCollection<AttributedString.Runs.AttributesSlice1<AttributeScopes.FoundationAttributes.InflectionRuleAttribute>>.Iterator((uint64_t)v68);
  uint64_t v13 = *(void *)(v12 + 16);
  if (v13)
  {
    char v14 = 0;
    uint64_t v15 = v13 - 1;
    for (uint64_t i = v12 + 56; ; i += 88LL)
    {
      if ((v14 & 1) != 0)
      {
        if (!v15) {
          return swift_release();
        }
        char v14 = 1;
      }

      else
      {
        uint64_t v17 = *(void *)(i - 24);
        uint64_t v18 = *(void *)(i - 16);
        unint64_t v19 = *(unsigned int *)(i - 8) | ((unint64_t)*(unsigned __int8 *)(i - 4) << 32);
        if (v18 == 1)
        {
          outlined copy of AttributedString.AttributeRunBoundaries?(*(void *)(i - 24), 1LL);
          if (!v15) {
            return swift_release();
          }
          char v14 = 0;
        }

        else
        {
          __int128 v32 = &type metadata for InflectionRule;
          char v31 = BYTE4(v19);
          int v30 = v19;
          int8x16_t v20 = *(_OWORD **)(a5 + 16);
          __int128 v21 = v20[1];
          __int128 v22 = v20[3];
          v45[1] = v20[2];
          v45[2] = v22;
          char v28 = 0;
          v29[0] = v17;
          v29[1] = v18;
          v45[0] = v21;
          BigString.startIndex.getter();
          BigString.endIndex.getter();
          BigString.utf16.getter();
          outlined copy of AttributedString.AttributeRunBoundaries?(v17, v18);
          outlined copy of AttributedString.AttributeRunBoundaries?(v17, v18);
          outlined copy of AttributedString.AttributeRunBoundaries?(v17, v18);
          outlined retain of Locale((uint64_t)v45);
          uint64_t v27 = BigString.UTF16View.distance(from:to:)();
          outlined release of Locale((uint64_t)v39);
          BigString.utf16.getter();
          uint64_t v23 = BigString.UTF16View.distance(from:to:)();
          outlined release of Locale((uint64_t)v45);
          outlined release of Locale((uint64_t)v40);
          a3(v29, v27, v23, &v28);
          outlined destroy of Any?((uint64_t)v29, &demangling cache variable for type metadata for Any?);
          outlined consume of AttributedString.AttributeRunBoundaries?(v17, v18);
          outlined consume of AttributedString.AttributeRunBoundaries?(v17, v18);
          if (!v15) {
            return swift_release();
          }
          char v14 = v28;
        }
      }

      --v15;
    }
  }

  return swift_release();
}

{
  __int128 v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t i;
  uint64_t v17;
  _OWORD *v18;
  __int128 v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;
  char v26;
  void v27[4];
  _BYTE v28[48];
  _BYTE v29[48];
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  _BYTE v34[48];
  _BYTE v35[48];
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  _OWORD v40[3];
  _OWORD v41[13];
  uint64_t v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  uint64_t v62;
  _OWORD v63[12];
  __int128 v64;
  uint64_t v65;
  uint64_t v66;
  __int128 v66 = *MEMORY[0x1895F89C0];
  __int128 v7 = a2[2];
  uint64_t v47 = a2[1];
  __int128 v48 = v7;
  __int128 v49 = a2[3];
  BigString.startIndex.getter();
  BigString.endIndex.getter();
  __int128 v8 = a1[1];
  __int128 v43 = *a1;
  __int128 v44 = v8;
  __int128 v9 = a1[3];
  unint64_t v45 = a1[2];
  uint64_t v46 = v9;
  BigString.unicodeScalars.getter();
  swift_retain_n();
  BigString.UnicodeScalarView.subscript.getter();
  outlined release of Locale((uint64_t)v28);
  outlined release of Locale((uint64_t)v29);
  swift_release();
  __int128 v36 = v30;
  __int128 v37 = v31;
  __int128 v38 = v32;
  char v39 = v33;
  AttributedString.Runs.init(_:in:)((uint64_t)a2, &v50);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
  uint64_t v10 = swift_allocObject();
  *(_OWORD *)(v10 + 16) = xmmword_183720D90;
  if (one-time initialization token for name != -1) {
    swift_once();
  }
  uint64_t v11 = qword_18C5D2C08;
  *(void *)(v10 + 32) = static AttributeScopes.FoundationAttributes.InflectionAlternativeAttribute.name;
  *(void *)(v10 + 40) = v11;
  v63[10] = v60;
  v63[11] = v61;
  v63[6] = v56;
  v63[7] = v57;
  v63[8] = v58;
  v63[9] = v59;
  v63[2] = v52;
  v63[3] = v53;
  v63[4] = v54;
  v63[5] = v55;
  v63[0] = v50;
  v63[1] = v51;
  *(void *)&__int128 v64 = v62;
  *((void *)&v64 + 1) = v10;
  __int128 v65 = MEMORY[0x18961AFE8];
  __int128 v42 = MEMORY[0x18961AFE8];
  v41[10] = v60;
  v41[11] = v61;
  v41[6] = v56;
  v41[7] = v57;
  v41[8] = v58;
  v41[9] = v59;
  v41[2] = v52;
  v41[3] = v53;
  void v41[4] = v54;
  v41[5] = v55;
  v41[0] = v50;
  v41[1] = v51;
  v41[12] = v64;
  swift_bridgeObjectRetain();
  uint64_t v12 = specialized _copyCollectionToContiguousArray<A>(_:)((uint64_t)v41);
  outlined release of ReversedCollection<AttributedString.Runs.AttributesSlice1<AttributeScopes.FoundationAttributes.InflectionRuleAttribute>>.Iterator((uint64_t)v63);
  uint64_t v13 = *(void *)(v12 + 16);
  if (v13)
  {
    char v14 = 0;
    uint64_t v15 = v13 - 1;
    for (uint64_t i = v12 + 48; ; i += 72LL)
    {
      if ((v14 & 1) != 0)
      {
        if (!v15) {
          return swift_release();
        }
        char v14 = 1;
      }

      else
      {
        uint64_t v17 = *(void *)(i - 16);
        if (v17)
        {
          uint64_t v26 = 0;
          v27[3] = &type metadata for AttributedString;
          v27[0] = v17;
          uint64_t v18 = *(_OWORD **)(a5 + 16);
          unint64_t v19 = v18[1];
          int8x16_t v20 = v18[3];
          v40[1] = v18[2];
          v40[2] = v20;
          v40[0] = v19;
          BigString.startIndex.getter();
          BigString.endIndex.getter();
          BigString.utf16.getter();
          swift_retain_n();
          outlined retain of Locale((uint64_t)v40);
          __int128 v21 = BigString.UTF16View.distance(from:to:)();
          outlined release of Locale((uint64_t)v34);
          BigString.utf16.getter();
          __int128 v22 = BigString.UTF16View.distance(from:to:)();
          outlined release of Locale((uint64_t)v40);
          outlined release of Locale((uint64_t)v35);
          a3(v27, v21, v22, &v26);
          outlined destroy of Any?((uint64_t)v27, &demangling cache variable for type metadata for Any?);
          swift_release_n();
          if (!v15) {
            return swift_release();
          }
          char v14 = v26;
        }

        else
        {
          if (!v15) {
            return swift_release();
          }
          char v14 = 0;
        }
      }

      --v15;
    }
  }

  return swift_release();
}

uint64_t specialized AttributedString.enumerateFormattableRanges(in:editor:)( __int128 *a1, uint64_t *a2, void (*a3)(id, uint64_t, uint64_t, char *), uint64_t a4, uint64_t a5)
{
  uint64_t v68 = *MEMORY[0x1895F89C0];
  __int128 v26 = a1[1];
  __int128 v27 = *a1;
  __int128 v25 = a1[2];
  uint64_t v5 = *((void *)a1 + 6);
  uint64_t v6 = *((void *)a1 + 7);
  uint64_t v7 = *a2;
  __int128 v8 = *(_OWORD *)(*a2 + 32);
  __int128 v49 = *(_OWORD *)(*a2 + 16);
  __int128 v50 = v8;
  __int128 v51 = *(_OWORD *)(v7 + 48);
  BigString.startIndex.getter();
  BigString.endIndex.getter();
  __int128 v44 = v27;
  __int128 v45 = v26;
  __int128 v46 = v25;
  uint64_t v47 = v5;
  uint64_t v48 = v6;
  BigString.unicodeScalars.getter();
  swift_retain_n();
  BigString.UnicodeScalarView.subscript.getter();
  outlined release of Locale((uint64_t)v29);
  outlined release of Locale((uint64_t)v30);
  swift_release();
  __int128 v37 = v31;
  __int128 v38 = v32;
  __int128 v39 = v33;
  __int128 v40 = v34;
  AttributedString.Runs.init(_:in:)(v7, &v52);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
  uint64_t v9 = swift_allocObject();
  *(_OWORD *)(v9 + 16) = xmmword_183720D90;
  outlined retain of AttributedString.Runs((uint64_t)&v52);
  if (one-time initialization token for name != -1) {
    swift_once();
  }
  uint64_t v10 = qword_18C5D2BF8;
  *(void *)(v9 + 32) = static AttributeScopes.FoundationAttributes.LocalizedNumberFormatAttribute.name;
  *(void *)(v9 + 40) = v10;
  swift_bridgeObjectRetain();
  outlined release of AttributedString.Runs((uint64_t)&v52);
  v65[10] = v62;
  v65[11] = v63;
  v65[6] = v58;
  v65[7] = v59;
  v65[8] = v60;
  v65[9] = v61;
  v65[2] = v54;
  v65[3] = v55;
  v65[4] = v56;
  v65[5] = v57;
  v65[0] = v52;
  v65[1] = v53;
  *(void *)&__int128 v66 = v64;
  *((void *)&v66 + 1) = v9;
  uint64_t v67 = MEMORY[0x18961AFE8];
  uint64_t v43 = MEMORY[0x18961AFE8];
  v42[10] = v62;
  v42[11] = v63;
  v42[6] = v58;
  v42[7] = v59;
  v42[8] = v60;
  v42[9] = v61;
  v42[2] = v54;
  v42[3] = v55;
  v42[4] = v56;
  v42[5] = v57;
  v42[0] = v52;
  v42[1] = v53;
  v42[12] = v66;
  uint64_t v11 = specialized Sequence.compactMap<A>(_:)((uint64_t)v42);
  outlined release of ReversedCollection<AttributedString.Runs.AttributesSlice1<AttributeScopes.FoundationAttributes.InflectionRuleAttribute>>.Iterator((uint64_t)v65);
  uint64_t v12 = v11[2];
  if (v12)
  {
    char v13 = 0;
    uint64_t v14 = v12 - 1;
    for (uint64_t i = v11 + 6; ; i += 9)
    {
      if ((v13 & 1) != 0)
      {
        if (!v14) {
          return swift_bridgeObjectRelease();
        }
        char v13 = 1;
      }

      else
      {
        char v16 = (void *)i[6];
        v28[0] = 0;
        __int128 v17 = *(_OWORD *)(*(void *)a5 + 16LL);
        __int128 v18 = *(_OWORD *)(*(void *)a5 + 48LL);
        v41[1] = *(_OWORD *)(*(void *)a5 + 32LL);
        v41[2] = v18;
        v41[0] = v17;
        BigString.startIndex.getter();
        BigString.endIndex.getter();
        BigString.utf16.getter();
        id v19 = v16;
        outlined retain of Locale((uint64_t)v41);
        uint64_t v20 = BigString.UTF16View.distance(from:to:)();
        outlined release of Locale((uint64_t)v35);
        BigString.utf16.getter();
        uint64_t v21 = BigString.UTF16View.distance(from:to:)();
        outlined release of Locale((uint64_t)v41);
        outlined release of Locale((uint64_t)v36);
        a3(v19, v20, v21, v28);

        if (!v14) {
          return swift_bridgeObjectRelease();
        }
        char v13 = v28[0];
      }

      --v14;
    }
  }

  return swift_bridgeObjectRelease();
}

uint64_t specialized AttributedString._addAttributesNotPresentMergingInlinePresentationIntents(_:to:)( uint64_t result, __int128 *a2)
{
  if (!*(void *)(result + 16)) {
    return result;
  }
  uint64_t v4 = *((void *)a2 + 6);
  uint64_t v3 = *((void *)a2 + 7);
  __int128 v163 = a2[1];
  __int128 v165 = a2[2];
  __int128 v160 = *a2;
  uint64_t v129 = result;
  uint64_t v132 = specialized AttributedString._AttributeStorage.subscript.getter(result);
  char v131 = v5;
  uint64_t v6 = *v2;
  __int128 v7 = *(_OWORD *)(*v2 + 32);
  __int128 v254 = *(_OWORD *)(*v2 + 16);
  __int128 v255 = v7;
  __int128 v256 = *(_OWORD *)(v6 + 48);
  BigString.startIndex.getter();
  BigString.endIndex.getter();
  __int128 v249 = v160;
  __int128 v250 = v163;
  __int128 v251 = v165;
  uint64_t v252 = v4;
  uint64_t v253 = v3;
  BigString.unicodeScalars.getter();
  swift_retain();
  BigString.UnicodeScalarView.subscript.getter();
  outlined release of Locale((uint64_t)v190);
  outlined release of Locale((uint64_t)v191);
  __int128 v208 = v192;
  __int128 v209 = v193;
  __int128 v210 = v194;
  __int128 v211 = v195;
  uint64_t result = AttributedString.Runs.init(_:in:)(v6, &v176);
  uint64_t v164 = (void *)v176;
  __int128 v130 = v180;
  uint64_t v8 = v180;
  uint64_t v133 = *((void *)&v176 + 1);
  if (*((void *)&v176 + 1) == (void)v180) {
    return swift_release();
  }
  unint64_t v151 = v184;
  __int128 v127 = v188;
  int64_t v115 = (unint64_t)v188 >> 11;
  unint64_t v116 = v184 >> 10;
  uint64_t v147 = (__int128 *)(v176 + 16);
  uint64_t v9 = v177;
  uint64_t v10 = *(void *)&v178[0];
  uint64_t v11 = v132;
  if ((v131 & 1) != 0) {
    uint64_t v11 = 0LL;
  }
  uint64_t v114 = v11;
  __int128 v119 = v182;
  __int128 v120 = v181;
  __int128 v117 = v189;
  __int128 v118 = v183;
  uint64_t v125 = *((void *)&v177 + 1);
  unint64_t v156 = *((void *)&v177 + 1);
  uint64_t v126 = v177;
  uint64_t v123 = *((void *)&v178[0] + 1);
  uint64_t v12 = *((void *)&v178[0] + 1);
  uint64_t v124 = *(void *)&v178[0];
  uint64_t v149 = v186;
  uint64_t v150 = v185;
  uint64_t v121 = *((void *)&v178[1] + 1);
  uint64_t v152 = *((void *)&v178[1] + 1);
  uint64_t v122 = *(void *)&v178[1];
  uint64_t v153 = *(void *)&v178[1];
  uint64_t v148 = v187;
  uint64_t v128 = v179;
  uint64_t v159 = v179;
  uint64_t v13 = *((void *)&v176 + 1);
  uint64_t v134 = v2;
  uint64_t v113 = v180;
  while (1)
  {
    if (v13 >= v8)
    {
LABEL_139:
      __break(1u);
LABEL_140:
      __break(1u);
LABEL_141:
      __break(1u);
LABEL_142:
      __break(1u);
LABEL_143:
      __break(1u);
LABEL_144:
      __break(1u);
LABEL_145:
      __break(1u);
LABEL_146:
      __break(1u);
LABEL_147:
      __break(1u);
      goto LABEL_148;
    }

    *(void *)&__int128 v176 = v164;
    *((void *)&v176 + 1) = v133;
    *(void *)&__int128 v177 = v126;
    *((void *)&v177 + 1) = v125;
    *(void *)&v178[0] = v124;
    *((void *)&v178[0] + 1) = v123;
    *(void *)&v178[1] = v122;
    *((void *)&v178[1] + 1) = v121;
    __int128 v180 = v130;
    __int128 v181 = v120;
    __int128 v182 = v119;
    __int128 v183 = v118;
    uint64_t v179 = v128;
    unint64_t v184 = v151;
    uint64_t v185 = v150;
    uint64_t v186 = v149;
    uint64_t v187 = v148;
    __int128 v188 = v127;
    __int128 v189 = v117;
    v175[0] = v13;
    uint64_t v166 = v9;
    v175[1] = v9;
    v175[2] = v156;
    v175[3] = v10;
    v175[4] = v12;
    v175[5] = v153;
    v175[6] = v152;
    v175[7] = v159;
    uint64_t result = (uint64_t)AttributedString.Runs._resolve(_:)(v175, &v168);
    if (v168 != v164[11]) {
      goto LABEL_140;
    }
    unint64_t v157 = v12;
    uint64_t v161 = v13;
    unint64_t v14 = v169;
    unint64_t v15 = v171;
    uint64_t v16 = v172;
    uint64_t v17 = v173;
    uint64_t v18 = v174;
    if (v170)
    {
      id v19 = (void *)(v170 + 24 * ((v169 >> ((4 * *(_BYTE *)(v170 + 18) + 8) & 0x3C)) & 0xF));
      unint64_t v21 = v19[3];
      uint64_t v20 = v19[4];
      unint64_t v22 = v19[5];
      swift_retain();
      uint64_t v155 = v20;
      swift_bridgeObjectRetain();
      unint64_t v154 = v22;
      uint64_t result = swift_bridgeObjectRetain();
    }

    else
    {
      uint64_t v23 = v164[8];
      swift_retain();
      swift_unknownObjectRetain();
      unint64_t v21 = specialized Rope._Node.subscript.getter(v14, v23);
      unint64_t v154 = v25;
      uint64_t v155 = v24;
      uint64_t result = swift_unknownObjectRelease();
    }

    if (v116 >= v15 >> 10) {
      unint64_t v26 = v151;
    }
    else {
      unint64_t v26 = v15;
    }
    if (v116 >= v15 >> 10)
    {
      uint64_t v16 = v150;
      uint64_t v17 = v149;
      uint64_t v18 = v148;
    }

    unint64_t v27 = v156;
    if (__OFADD__(v21, v15 >> 11)) {
      goto LABEL_141;
    }
    else {
      int64_t v28 = v115;
    }
    __int128 v29 = v147[1];
    __int128 v246 = *v147;
    __int128 v247 = v29;
    __int128 v248 = v147[2];
    uint64_t result = BigString.utf8.getter();
    if (__OFSUB__(v28, v26 >> 11)) {
      goto LABEL_142;
    }
    uint64_t v30 = v18;
    unint64_t v31 = BigString.UTF8View.index(_:offsetBy:)();
    uint64_t v33 = v32;
    uint64_t v35 = v34;
    uint64_t v37 = v36;
    uint64_t result = outlined release of Locale((uint64_t)v196);
    if (v31 >> 10 < v26 >> 10) {
      goto LABEL_143;
    }
    unint64_t v136 = v26;
    uint64_t v137 = v37;
    unint64_t v217 = v26;
    uint64_t v143 = v16;
    uint64_t v218 = v16;
    uint64_t v219 = v17;
    uint64_t v138 = v35;
    uint64_t v139 = v30;
    uint64_t v220 = v30;
    unint64_t v221 = v31;
    uint64_t v222 = v33;
    uint64_t v223 = v35;
    uint64_t v224 = v37;
    __int128 v38 = v164;
    unint64_t v39 = v164[8];
    uint64_t v40 = v164[9];
    uint64_t v41 = v164[11];
    uint64_t v145 = v164[10];
    uint64_t v141 = v17;
    unint64_t v135 = v31;
    if (v10 == 1 || v166 != v41) {
      break;
    }
    uint64_t v42 = v161;
    if (v159 == 2)
    {
      if (v39)
      {
        swift_retain();
        swift_unknownObjectRetain();
        uint64_t v43 = v40;
        uint64_t v44 = v40;
        uint64_t v45 = v145;
        uint64_t result = specialized Rope._Node.distanceFromStart<A>(to:in:)(v166, v156, v10, v39, v44, v145);
        uint64_t v46 = result;
        uint64_t v47 = v166;
        __int128 v38 = v164;
        goto LABEL_111;
      }

      uint64_t result = swift_retain();
      uint64_t v46 = 0LL;
    }

    else
    {
      uint64_t v46 = v157 >> 11;
      swift_unknownObjectRetain();
      uint64_t result = swift_retain();
    }

    uint64_t v47 = v166;
    uint64_t v43 = v40;
    uint64_t v45 = v145;
LABEL_111:
    *(void *)&__int128 v176 = v47;
    *((void *)&v176 + 1) = v27;
    *(void *)&__int128 v177 = v10;
    BOOL v55 = __OFADD__(v42, 1LL);
    uint64_t v68 = v42 + 1;
    if (v55) {
      goto LABEL_144;
    }
    if (v47 != v41) {
      goto LABEL_145;
    }
    uint64_t v162 = v68;
    if (v10)
    {
      unint64_t v69 = *(void *)(v10 + 24 * ((v27 >> ((4 * *(_BYTE *)(v10 + 18) + 8) & 0x3C)) & 0xF) + 24);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }

    else
    {
      swift_unknownObjectRetain();
      unint64_t v69 = specialized Rope._Node.subscript.getter(v27, v39);
      swift_unknownObjectRelease();
    }

    swift_bridgeObjectRelease();
    uint64_t result = swift_bridgeObjectRelease();
    BOOL v55 = __OFADD__(v46, v69);
    unint64_t v70 = v46 + v69;
    if (v55) {
      goto LABEL_146;
    }
    swift_unknownObjectRetain();
    specialized Rope.formIndex(after:)(&v176, v39, v43, v45, v41);
    swift_unknownObjectRelease_n();
    uint64_t v167 = v176;
    uint64_t v10 = v177;
    unint64_t v156 = *((void *)&v176 + 1);
    if (v159 == 2)
    {
      __int128 v71 = v147[1];
      __int128 v243 = *v147;
      __int128 v244 = v71;
      __int128 v245 = v147[2];
      BigString.utf8.getter();
      BigString.startIndex.getter();
      uint64_t v72 = BigString.UTF8View.index(_:offsetBy:)();
      uint64_t v152 = v74;
      uint64_t v153 = v73;
      uint64_t v159 = v75;
      uint64_t v76 = &v198;
    }

    else
    {
      __int128 v77 = v147[1];
      __int128 v240 = *v147;
      __int128 v241 = v77;
      __int128 v242 = v147[2];
      BigString.utf8.getter();
      uint64_t result = v157;
      if (__OFSUB__(v70, v157 >> 11)) {
        goto LABEL_154;
      }
      uint64_t v72 = BigString.UTF8View.index(_:offsetBy:)();
      uint64_t v152 = v79;
      uint64_t v153 = v78;
      uint64_t v159 = v80;
      uint64_t v76 = &v197;
    }

    outlined release of Locale((uint64_t)v76);
    swift_release();
    uint64_t v229 = v155;
    unint64_t v230 = v154;
    unint64_t v231 = v136;
    uint64_t v232 = v143;
    uint64_t v233 = v141;
    uint64_t v234 = v139;
    unint64_t v235 = v135;
    uint64_t v236 = v33;
    uint64_t v237 = v138;
    uint64_t v238 = v137;
    uint64_t v239 = v38;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_retain();
    uint64_t v81 = specialized AttributedString.Runs.Run.subscript.getter();
    char v83 = v82;
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v83 & 1) != 0) {
      uint64_t v84 = v132;
    }
    else {
      uint64_t v84 = v81 | v114;
    }
    uint64_t v168 = v155;
    unint64_t v169 = v154;
    LOBYTE(v176) = 1;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    specialized AttributedString._AttributeStorage.mergeIn(_:mergePolicy:)(v129, (char *)&v176);
    uint64_t v85 = v134;
    if (one-time initialization token for name != -1) {
      swift_once();
    }
    char v86 = v83 & v131;
    unint64_t v88 = static AttributeScopes.FoundationAttributes.InlinePresentationIntentAttribute.name;
    unint64_t v87 = qword_18C5D2C18;
    if ((v86 & 1) != 0)
    {
      memset(v178, 0, sizeof(v178));
      __int128 v176 = 0u;
      __int128 v177 = 0u;
    }

    else
    {
      type metadata accessor for NSInlinePresentationIntent(0LL);
      *((void *)&v177 + 1) = v89;
      *(void *)&v178[0] = lazy protocol witness table accessor for type NSInlinePresentationIntent and conformance NSInlinePresentationIntent();
      *(void *)&__int128 v176 = v84;
      *(_OWORD *)((char *)v178 + 8) = xmmword_183723F60;
      BYTE8(v178[1]) = 1;
    }

    uint64_t v158 = v72;
    uint64_t v179 = 0LL;
    swift_bridgeObjectRetain();
    specialized AttributedString._AttributeStorage.subscript.setter((uint64_t)&v176, v88, v87);
    swift_bridgeObjectRelease();
    uint64_t v90 = v168;
    uint64_t v91 = v169;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      uint64_t v92 = (void *)*v134;
      __int128 v93 = *(_OWORD *)(*v134 + 16);
      __int128 v94 = *(_OWORD *)(*v134 + 32);
      v228[2] = *(_OWORD *)(*v134 + 48);
      v228[1] = v94;
      v228[0] = v93;
      uint64_t v95 = v92[8];
      uint64_t v96 = v92[9];
      uint64_t v97 = v92[10];
      uint64_t v98 = v92[11];
      type metadata accessor for AttributedString.Guts();
      swift_allocObject();
      outlined retain of Locale((uint64_t)v228);
      swift_unknownObjectRetain();
      *uint64_t v134 = AttributedString.Guts.init(string:runs:)(v228, v95, v96, v97, v98);
      swift_release();
    }

    uint64_t v99 = *v134;
    __int128 v100 = *(_OWORD *)(*v134 + 32);
    __int128 v225 = *(_OWORD *)(*v134 + 16);
    __int128 v226 = v100;
    __int128 v227 = *(_OWORD *)(v99 + 48);
    BigString.startIndex.getter();
    BigString.endIndex.getter();
    BigString.unicodeScalars.getter();
    swift_retain_n();
    BigString.UnicodeScalarView.subscript.getter();
    swift_release();
    outlined release of Locale((uint64_t)v199);
    outlined release of Locale((uint64_t)v200);
    __int128 v144 = v202;
    __int128 v146 = v201;
    __int128 v140 = v204;
    __int128 v142 = v203;
    if (one-time initialization token for currentIdentity != -1) {
      swift_once();
    }
    __int128 v101 = (uint64_t *)(static AttributedString.currentIdentity + 16);
    unint64_t v102 = (os_unfair_lock_s *)(static AttributedString.currentIdentity + 24);
    swift_retain();
    os_unfair_lock_lock(v102);
    closure #1 in static AttributedString._nextModifyIdentity.getter(v101, (uint64_t *)&v176);
    os_unfair_lock_unlock(v102);
    swift_release();
    BigString.init()();
    *(void *)&__int128 v176 = 0LL;
    MEMORY[0x186E20E78](&v176, 8LL);
    uint64_t v103 = v176;
    type metadata accessor for AttributedString.Guts();
    uint64_t v104 = swift_allocObject();
    uint64_t result = BigString.isEmpty.getter();
    if ((result & 1) == 0) {
      goto LABEL_147;
    }
    __int128 v105 = v206;
    *(_OWORD *)(v104 + 16) = v205;
    *(_OWORD *)(v104 + 32) = v105;
    *(_OWORD *)(v104 + 48) = v207;
    *(void *)(v104 + 64) = 0LL;
    *(void *)(v104 + 72) = 0LL;
    *(void *)(v104 + 80) = 0LL;
    *(void *)(v104 + 88) = v103;
    *uint64_t v134 = v104;
    swift_release();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      __int128 v106 = *(_OWORD *)(v99 + 32);
      v216[0] = *(_OWORD *)(v99 + 16);
      v216[1] = v106;
      v216[2] = *(_OWORD *)(v99 + 48);
      uint64_t v107 = *(void *)(v99 + 64);
      uint64_t v108 = *(void *)(v99 + 72);
      uint64_t v109 = *(void *)(v99 + 80);
      uint64_t v110 = *(void *)(v99 + 88);
      swift_allocObject();
      outlined retain of Locale((uint64_t)v216);
      swift_unknownObjectRetain();
      uint64_t v111 = v110;
      uint64_t v85 = v134;
      uint64_t v112 = AttributedString.Guts.init(string:runs:)(v216, v107, v108, v109, v111);
      swift_release();
      uint64_t v99 = v112;
    }

    uint64_t v8 = v113;
    uint64_t v12 = v158;
    __int128 v212 = v146;
    __int128 v213 = v144;
    __int128 v214 = v142;
    __int128 v215 = v140;
    AttributedString.Guts.setAttributes(_:in:)(v90, v91);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    *uint64_t v85 = v99;
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t result = swift_release();
    uint64_t v13 = v162;
    uint64_t v9 = v167;
    if (v162 == v113) {
      return swift_release();
    }
  }

  if (v39) {
    uint64_t v48 = v164[9];
  }
  else {
    uint64_t v48 = 0LL;
  }
  uint64_t v42 = v161;
  if (v161 < 0 || v48 < v161) {
    goto LABEL_153;
  }
  if (!v39 || v161 >= v40 || !*(_WORD *)(v39 + 16))
  {
    swift_unknownObjectRetain_n();
    swift_retain();
    uint64_t v43 = v40;
    uint64_t v45 = v145;
    unint64_t v27 = specialized Rope._endPath.getter(v39);
    uint64_t result = swift_unknownObjectRelease();
    uint64_t v10 = 0LL;
    if (!v39)
    {
      uint64_t v46 = 0LL;
      goto LABEL_110;
    }

unint64_t lazy protocol witness table accessor for type NSInlinePresentationIntent and conformance NSInlinePresentationIntent()
{
  unint64_t result = lazy protocol witness table cache variable for type NSInlinePresentationIntent and conformance NSInlinePresentationIntent;
  if (!lazy protocol witness table cache variable for type NSInlinePresentationIntent and conformance NSInlinePresentationIntent)
  {
    type metadata accessor for NSInlinePresentationIntent(255LL);
    unint64_t result = MEMORY[0x186E20D4C](&protocol conformance descriptor for NSInlinePresentationIntent, v1);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type NSInlinePresentationIntent and conformance NSInlinePresentationIntent);
  }

  return result;
}

uint64_t outlined retain of AttributedString.Runs.Run(uint64_t a1)
{
  return a1;
}

uint64_t outlined release of AttributedString.Runs.Run(uint64_t a1)
{
  return a1;
}

void partial apply for thunk for @escaping @callee_unowned @convention(block) (@unowned NSString?, @unowned _NSRange, @unowned UnsafeMutablePointer<ObjCBool>) -> ()( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
}

uint64_t sub_1834F47F8()
{
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in closure #11 in AttributedString.inflected(locale:userTermOfAddress:replacements:concepts:preflight:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v7 + 16))(a1, a2, a3, a4, a7);
}

uint64_t sub_1834F4840()
{
  return swift_deallocObject();
}

void *partial apply for closure #1 in closure #8 in AttributedString.inflected(locale:userTermOfAddress:replacements:concepts:preflight:)( void *a1)
{
  return closure #1 in closure #8 in AttributedString.inflected(locale:userTermOfAddress:replacements:concepts:preflight:)( a1,  (void *)(v1 + 16));
}

uint64_t outlined release of LazyFilterSequence<DefaultIndices<AttributedString.CharacterView>>.Iterator( uint64_t a1)
{
  return a1;
}

uint64_t sub_1834F48A0()
{
  return swift_deallocObject();
}

uint64_t partial apply for thunk for @escaping @callee_unowned @convention(block) (@unowned NSLocalizedNumberFormatRule, @unowned _NSRange, @unowned UnsafeMutablePointer<ObjCBool>) -> ()()
{
  return (*(uint64_t (**)(void))(*(void *)(v0 + 16) + 16LL))();
}

uint64_t partial apply for thunk for @escaping @callee_unowned @convention(block) (@unowned Swift.AnyObject?, @unowned _NSRange, @unowned UnsafeMutablePointer<ObjCBool>) -> ()( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return thunk for @escaping @callee_unowned @convention(block) (@unowned Swift.AnyObject?, @unowned _NSRange, @unowned UnsafeMutablePointer<ObjCBool>) -> ()( a1,  a2,  a3,  a4,  *(void *)(v4 + 16));
}

uint64_t sub_1834F48E8()
{
  if (*(void *)(v0 + 40)) {
    __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  }
  return swift_deallocObject();
}

uint64_t outlined retain of [AttributedString.AttributeRunBoundaries](uint64_t a1)
{
  return a1;
}

uint64_t sub_1834F493C()
{
  return swift_deallocObject();
}

uint64_t sub_1834F494C()
{
  return swift_deallocObject();
}

uint64_t sub_1834F495C()
{
  return swift_deallocObject();
}

uint64_t sub_1834F496C()
{
  return swift_deallocObject();
}

uint64_t sub_1834F497C()
{
  return swift_deallocObject();
}

uint64_t sub_1834F498C()
{
  return swift_deallocObject();
}

uint64_t sub_1834F499C()
{
  return swift_deallocObject();
}

uint64_t sub_1834F49AC()
{
  return swift_deallocObject();
}

uint64_t sub_1834F49BC()
{
  return swift_deallocObject();
}

uint64_t sub_1834F49CC()
{
  return swift_deallocObject();
}

uint64_t sub_1834F49DC()
{
  return swift_deallocObject();
}

uint64_t sub_1834F49EC()
{
  return swift_deallocObject();
}

uint64_t sub_1834F49FC()
{
  return swift_deallocObject();
}

uint64_t sub_1834F4A20()
{
  return swift_deallocObject();
}

uint64_t sub_1834F4A30()
{
  return swift_deallocObject();
}

uint64_t sub_1834F4A54()
{
  return swift_deallocObject();
}

uint64_t sub_1834F4A68()
{
  return swift_deallocObject();
}

uint64_t outlined copy of TermOfAddress?( uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, unint64_t a13)
{
  if (a13 != 4) {
    return outlined copy of TermOfAddress._TermOfAddress(result, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13);
  }
  return result;
}

uint64_t sub_1834F4AA0()
{
  return swift_deallocObject();
}

uint64_t String.Encoding.init(rawValue:)@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  *a2 = result;
  return result;
}

BOOL static String.Encoding.== infix(_:_:)(void *a1, void *a2)
{
  return *a1 == *a2;
}

void static String.Encoding.utf8.getter(void *a1@<X8>)
{
  *a1 = 4LL;
}

uint64_t String.Encoding.rawValue.getter()
{
  return *(void *)v0;
}

void static String.Encoding.ascii.getter(void *a1@<X8>)
{
  *a1 = 1LL;
}

uint64_t kCFStringEncodingASCII.getter()
{
  return 1536LL;
}

uint64_t String.Encoding.rawValue.setter(uint64_t result)
{
  *uint64_t v1 = result;
  return result;
}

uint64_t (*String.Encoding.rawValue.modify())(void, void)
{
  return destructiveProjectEnumData for PredicateCodableError;
}

void static String.Encoding.nextstep.getter(void *a1@<X8>)
{
  *a1 = 2LL;
}

void static String.Encoding.japaneseEUC.getter(void *a1@<X8>)
{
  *a1 = 3LL;
}

void static String.Encoding.isoLatin1.getter(void *a1@<X8>)
{
  *a1 = 5LL;
}

void static String.Encoding.symbol.getter(void *a1@<X8>)
{
  *a1 = 6LL;
}

void static String.Encoding.nonLossyASCII.getter(void *a1@<X8>)
{
  *a1 = 7LL;
}

void static String.Encoding.shiftJIS.getter(void *a1@<X8>)
{
  *a1 = 8LL;
}

void static String.Encoding.isoLatin2.getter(void *a1@<X8>)
{
  *a1 = 9LL;
}

void static String.Encoding.windowsCP1251.getter(void *a1@<X8>)
{
  *a1 = 11LL;
}

void static String.Encoding.windowsCP1252.getter(void *a1@<X8>)
{
  *a1 = 12LL;
}

void static String.Encoding.windowsCP1253.getter(void *a1@<X8>)
{
  *a1 = 13LL;
}

void static String.Encoding.windowsCP1254.getter(void *a1@<X8>)
{
  *a1 = 14LL;
}

void static String.Encoding.windowsCP1250.getter(void *a1@<X8>)
{
  *a1 = 15LL;
}

void static String.Encoding.iso2022JP.getter(void *a1@<X8>)
{
  *a1 = 21LL;
}

void static String.Encoding.macOSRoman.getter(void *a1@<X8>)
{
  *a1 = 30LL;
}

void static String.Encoding.utf16.getter(void *a1@<X8>)
{
  *a1 = 10LL;
}

void static String.Encoding.utf16BigEndian.getter(void *a1@<X8>)
{
  *a1 = 2415919360LL;
}

void static String.Encoding.utf16LittleEndian.getter(void *a1@<X8>)
{
  *a1 = 2483028224LL;
}

void static String.Encoding.utf32.getter(void *a1@<X8>)
{
  *a1 = 2348810496LL;
}

void static String.Encoding.utf32BigEndian.getter(void *a1@<X8>)
{
  *a1 = 2550137088LL;
}

void static String.Encoding.utf32LittleEndian.getter(void *a1@<X8>)
{
  *a1 = 2617245952LL;
}

void String.Encoding.hashValue.getter()
{
}

void protocol witness for Hashable.hashValue.getter in conformance String.Encoding()
{
}

id String.Encoding.description.getter()
{
  id v1 = objc_msgSend((id)objc_opt_self(), sel_localizedNameOfStringEncoding_, *v0);
  id v2 = static String._unconditionallyBridgeFromObjectiveC(_:)(v1);

  return v2;
}

unint64_t lazy protocol witness table accessor for type String.Encoding and conformance String.Encoding()
{
  unint64_t result = lazy protocol witness table cache variable for type String.Encoding and conformance String.Encoding;
  if (!lazy protocol witness table cache variable for type String.Encoding and conformance String.Encoding)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for String.Encoding,  &type metadata for String.Encoding);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type String.Encoding and conformance String.Encoding);
  }

  return result;
}

id protocol witness for CustomStringConvertible.description.getter in conformance String.Encoding()
{
  id v1 = objc_msgSend((id)objc_opt_self(), sel_localizedNameOfStringEncoding_, *v0);
  id v2 = static String._unconditionallyBridgeFromObjectiveC(_:)(v1);

  return v2;
}

uint64_t Unicode.Scalar._stripDiacritics()(uint64_t a1)
{
  uint64_t v1 = a1;
  uint64_t v2 = BuiltInUnicodeScalarSet._bitmapPtrForPlane(_:)(BYTE2(a1), 2);
  BOOL v3 = BuiltInUnicodeScalarSet._isMemberOfBitmap(_:_:)(v1, v2, 0x700030002LL);
  if (v3)
  {
    MEMORY[0x1895F8858](v3);
    if (CFUniCharDecomposeCharacter() >= 1)
    {
      if (v5 >= 0x510) {
        return v1;
      }
      else {
        return v5;
      }
    }
  }

  return v1;
}

void PersonNameComponents.FormatStyle.style.getter(_BYTE *a1@<X8>)
{
  *a1 = *v1;
}

_BYTE *PersonNameComponents.FormatStyle.style.setter(_BYTE *result)
{
  *uint64_t v1 = *result;
  return result;
}

uint64_t (*PersonNameComponents.FormatStyle.style.modify())(void, void)
{
  return destructiveProjectEnumData for PredicateCodableError;
}

uint64_t PersonNameComponents.FormatStyle.locale.getter@<X0>(_OWORD *a1@<X8>)
{
  *a1 = *(_OWORD *)(v1 + 8);
  return swift_unknownObjectRetain();
}

__n128 PersonNameComponents.FormatStyle.locale.setter(__n128 *a1)
{
  __n128 result = *a1;
  *(__n128 *)(v1 + 8) = *a1;
  return result;
}

uint64_t (*PersonNameComponents.FormatStyle.locale.modify())(void, void)
{
  return destructiveProjectEnumData for PredicateCodableError;
}

uint64_t PersonNameComponents.FormatStyle.attributed.getter@<X0>(uint64_t a1@<X8>)
{
  *(_BYTE *)a1 = *(_BYTE *)v1;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(v1 + 8);
  return swift_unknownObjectRetain();
}

__n128 PersonNameComponents.FormatStyle.init(style:locale:)@<Q0>( _BYTE *a1@<X0>, __n128 *a2@<X1>, uint64_t a3@<X8>)
{
  *(_BYTE *)a3 = *a1;
  __n128 result = *a2;
  *(__n128 *)(a3 + 8) = *a2;
  return result;
}

uint64_t PersonNameComponents.FormatStyle.locale(_:)@<X0>(_OWORD *a1@<X0>, uint64_t a2@<X8>)
{
  *(_BYTE *)a2 = *v2;
  *(_OWORD *)(a2 + 8) = *a1;
  return swift_unknownObjectRetain();
}

id PersonNameComponents.FormatStyle.format(_:)(uint64_t *a1)
{
  uint64_t v2 = *a1;
  uint64_t v3 = *v1;
  uint64_t v4 = *((void *)v1 + 2);
  id v5 = objc_msgSend(objc_allocWithZone((Class)NSPersonNameComponentsFormatter), sel_init);
  objc_msgSend(v5, sel_setStyle_, v3 + 1);
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v7 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v4 + 488))(ObjectType, v4);
  objc_msgSend(v5, sel_setLocale_, v7);

  objc_msgSend(*(id *)(v2 + 16), sel_copy);
  _bridgeAnyObjectToAny(_:)();
  swift_unknownObjectRelease();
  type metadata accessor for NSPersonNameComponents();
  swift_dynamicCast();
  id v8 = objc_msgSend(v5, sel_stringFromPersonNameComponents_, v11);

  id v9 = static String._unconditionallyBridgeFromObjectiveC(_:)(v8);
  return v9;
}

uint64_t PersonNameComponents.FormatStyle.Style.rawValue.getter()
{
  return *v0 + 1LL;
}

unint64_t PersonNameComponents.FormatStyle.Style.init(rawValue:)@<X0>( unint64_t result@<X0>, _BYTE *a2@<X8>)
{
  unint64_t v2 = 0x302010004uLL >> (8 * result);
  if (result >= 5) {
    LOBYTE(v2) = 4;
  }
  *a2 = v2;
  return result;
}

unint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance PersonNameComponents.FormatStyle.Style@<X0>( unint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  return PersonNameComponents.FormatStyle.Style.init(rawValue:)(*a1, a2);
}

uint64_t protocol witness for Decodable.init(from:) in conformance PersonNameComponents.FormatStyle.Style()
{
  return RawRepresentable<>.init(from:)();
}

uint64_t protocol witness for Encodable.encode(to:) in conformance PersonNameComponents.FormatStyle.Style()
{
  return RawRepresentable<>.encode(to:)();
}

uint64_t static PersonNameComponents.FormatStyle.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return specialized static PersonNameComponents.FormatStyle.== infix(_:_:)(a1, a2) & 1;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance PersonNameComponents.FormatStyle.CodingKeys()
{
  if (*v0) {
    return 0x656C61636F6CLL;
  }
  else {
    return 0x656C797473LL;
  }
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance PersonNameComponents.FormatStyle.CodingKeys@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result = specialized PersonNameComponents.FormatStyle.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance PersonNameComponents.FormatStyle.CodingKeys()
{
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PersonNameComponents.FormatStyle.CodingKeys()
{
  return CodingKey.debugDescription.getter();
}

uint64_t PersonNameComponents.FormatStyle.encode(to:)(void *a1)
{
  return PersonNameComponents.FormatStyle.encode(to:)( a1,  &demangling cache variable for type metadata for KeyedEncodingContainer<PersonNameComponents.FormatStyle.CodingKeys>,  (void (*)(void))lazy protocol witness table accessor for type PersonNameComponents.FormatStyle.CodingKeys and conformance PersonNameComponents.FormatStyle.CodingKeys);
}

uint64_t PersonNameComponents.FormatStyle.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return PersonNameComponents.FormatStyle.init(from:)( a1,  &demangling cache variable for type metadata for KeyedDecodingContainer<PersonNameComponents.FormatStyle.CodingKeys>,  (void (*)(void))lazy protocol witness table accessor for type PersonNameComponents.FormatStyle.CodingKeys and conformance PersonNameComponents.FormatStyle.CodingKeys,  a2);
}

id protocol witness for FormatStyle.format(_:) in conformance PersonNameComponents.FormatStyle@<X0>( uint64_t *a1@<X0>, void *a2@<X8>)
{
  id result = PersonNameComponents.FormatStyle.format(_:)(a1);
  *a2 = result;
  a2[1] = v4;
  return result;
}

uint64_t protocol witness for FormatStyle.locale(_:) in conformance PersonNameComponents.FormatStyle@<X0>( _OWORD *a1@<X0>, uint64_t a2@<X8>)
{
  *(_BYTE *)a2 = *v2;
  *(_OWORD *)(a2 + 8) = *a1;
  return swift_unknownObjectRetain();
}

uint64_t protocol witness for Decodable.init(from:) in conformance PersonNameComponents.FormatStyle@<X0>( void *a1@<X0>, uint64_t a2@<X8>)
{
  return PersonNameComponents.FormatStyle.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance PersonNameComponents.FormatStyle( void *a1)
{
  return PersonNameComponents.FormatStyle.encode(to:)(a1);
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance PersonNameComponents.FormatStyle( unsigned __int8 *a1, unsigned __int8 *a2)
{
  return specialized static PersonNameComponents.FormatStyle.== infix(_:_:)(a1, a2) & 1;
}

uint64_t (*PersonNameComponents.AttributedStyle.style.modify())(void, void)
{
  return destructiveProjectEnumData for PredicateCodableError;
}

uint64_t (*PersonNameComponents.AttributedStyle.locale.modify())(void, void)
{
  return destructiveProjectEnumData for PredicateCodableError;
}

void PersonNameComponents.AttributedStyle.format(_:)(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v4 = *a1;
  uint64_t v5 = *v2;
  uint64_t v6 = *((void *)v2 + 2);
  id v7 = objc_msgSend(objc_allocWithZone((Class)NSPersonNameComponentsFormatter), sel_init);
  objc_msgSend(v7, sel_setStyle_, v5 + 1);
  uint64_t ObjectType = swift_getObjectType();
  id v9 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v6 + 488))(ObjectType, v6);
  objc_msgSend(v7, sel_setLocale_, v9);

  objc_msgSend(*(id *)(v4 + 16), sel_copy);
  _bridgeAnyObjectToAny(_:)();
  swift_unknownObjectRelease();
  type metadata accessor for NSPersonNameComponents();
  swift_dynamicCast();
  id v10 = objc_msgSend(v7, sel_annotatedStringFromPersonNameComponents_, v13);

  specialized static AttributeScope.scopeDescription.getter();
  uint64_t v12 = v11;
  swift_bridgeObjectRelease();
  AttributedString.init(_:attributeTable:options:)(v10, v12, 0LL, v14);

  *a2 = v14[0];
}

uint64_t PersonNameComponents.FormatStyle.hash(into:)(uint64_t a1)
{
  void (*v7)(void *__return_ptr, uint64_t, uint64_t);
  Swift::UInt8 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  id v20;
  id v21;
  id v22;
  id v23;
  id v24;
  id v25;
  id v26;
  id v27;
  id v28;
  id v29;
  id v30;
  id v31;
  id v32;
  uint64_t v33;
  uint64_t v34;
  Swift::UInt v35;
  Swift::UInt v36;
  Swift::UInt8 v37;
  Swift::UInt8 v38;
  Swift::UInt8 v39;
  _BYTE v40[144];
  _BYTE v41[8];
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  void *v47;
  void *v48;
  void *v49;
  void *v50;
  void *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char v55;
  char v56;
  char v57;
  char v58;
  void v59[18];
  _BYTE v60[144];
  _BYTE v61[152];
  uint64_t v3 = *((void *)v1 + 2);
  Hasher._combine(_:)(*v1 + 1LL);
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t))(v3 + 48);
  swift_unknownObjectRetain();
  if ((v5(ObjectType, v3) & 1) != 0)
  {
    Hasher._combine(_:)(1u);
    return swift_unknownObjectRelease();
  }

  Hasher._combine(_:)(0);
  (*(void (**)(uint64_t, uint64_t))(v3 + 64))(ObjectType, v3);
  String.hash(into:)();
  swift_bridgeObjectRelease();
  id v7 = *(void (**)(void *__return_ptr, uint64_t, uint64_t))(v3 + 464);
  swift_unknownObjectRetain();
  v7(v59, ObjectType, v3);
  swift_unknownObjectRelease();
  outlined init with take of LocalePreferences?((uint64_t)v59, (uint64_t)v60);
  outlined init with take of LocalePreferences?((uint64_t)v60, (uint64_t)v61);
  if (_s10Foundation17LocalePreferencesVSgWOg((uint64_t)v61) != 1)
  {
    outlined init with take of LocalePreferences?((uint64_t)v60, (uint64_t)v41);
    Hasher._combine(_:)(1u);
    if (v41[0] == 2)
    {
      id v8 = 0;
    }

    else
    {
      id v8 = v41[0] & 1;
      Hasher._combine(_:)(1u);
    }

    Hasher._combine(_:)(v8);
    id v9 = v42;
    if (v42)
    {
      Hasher._combine(_:)(1u);
      Hasher._combine(_:)(*(void *)(v9 + 16));
      id v10 = *(void *)(v9 + 16);
      if (v10)
      {
        outlined retain of LocalePreferences?( (uint64_t)v60,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined copy of LocalePreferences?);
        swift_bridgeObjectRetain();
        uint64_t v11 = v9 + 40;
        do
        {
          swift_bridgeObjectRetain();
          String.hash(into:)();
          swift_bridgeObjectRelease();
          v11 += 16LL;
          --v10;
        }

        while (v10);
        swift_bridgeObjectRelease();
        if (!v43)
        {
LABEL_13:
          Hasher._combine(_:)(0);
          if (!v44) {
            goto LABEL_14;
          }
          goto LABEL_21;
        }

uint64_t static PersonNameComponents.AttributedStyle.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return specialized static PersonNameComponents.FormatStyle.== infix(_:_:)(a1, a2) & 1;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance PersonNameComponents.AttributedStyle.CodingKeys()
{
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PersonNameComponents.AttributedStyle.CodingKeys()
{
  return CodingKey.debugDescription.getter();
}

uint64_t PersonNameComponents.AttributedStyle.encode(to:)(void *a1)
{
  return PersonNameComponents.FormatStyle.encode(to:)( a1,  &demangling cache variable for type metadata for KeyedEncodingContainer<PersonNameComponents.AttributedStyle.CodingKeys>,  (void (*)(void))lazy protocol witness table accessor for type PersonNameComponents.AttributedStyle.CodingKeys and conformance PersonNameComponents.AttributedStyle.CodingKeys);
}

uint64_t PersonNameComponents.FormatStyle.encode(to:)(void *a1, uint64_t *a2, void (*a3)(void))
{
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(a2);
  uint64_t v14 = *(void *)(v6 - 8);
  MEMORY[0x1895F8858](v6);
  id v8 = (char *)&v12 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  char v9 = *v3;
  __int128 v12 = *(_OWORD *)(v3 + 8);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  a3();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  LOBYTE(v15) = v9;
  char v16 = 0;
  lazy protocol witness table accessor for type PersonNameComponents.FormatStyle.Style and conformance PersonNameComponents.FormatStyle.Style();
  uint64_t v10 = v13;
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v10)
  {
    __int128 v15 = v12;
    char v16 = 1;
    lazy protocol witness table accessor for type Locale and conformance Locale();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
  }

  return (*(uint64_t (**)(char *, uint64_t))(v14 + 8))(v8, v6);
}

Swift::Int PersonNameComponents.FormatStyle.hashValue.getter()
{
  void (*v6)(void *__return_ptr, uint64_t, uint64_t);
  Swift::UInt8 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  id v19;
  id v20;
  id v21;
  id v22;
  id v23;
  id v24;
  id v25;
  id v26;
  id v27;
  id v28;
  id v29;
  id v30;
  id v31;
  uint64_t v32;
  uint64_t v33;
  Swift::UInt v34;
  Swift::UInt v35;
  Swift::UInt8 v36;
  Swift::UInt8 v37;
  Swift::UInt8 v38;
  _BYTE v40[144];
  _BYTE v41[8];
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  void *v47;
  void *v48;
  void *v49;
  void *v50;
  void *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char v55;
  char v56;
  char v57;
  char v58;
  void v59[18];
  _BYTE v60[144];
  _BYTE v61[144];
  _BYTE v62[72];
  uint64_t v1 = *v0;
  uint64_t v2 = *((void *)v0 + 2);
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1 + 1);
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t))(v2 + 48);
  swift_unknownObjectRetain();
  if ((v4(ObjectType, v2) & 1) != 0)
  {
    Swift::UInt8 v5 = 1;
LABEL_5:
    Hasher._combine(_:)(v5);
    goto LABEL_56;
  }

  Hasher._combine(_:)(0);
  (*(void (**)(uint64_t, uint64_t))(v2 + 64))(ObjectType, v2);
  String.hash(into:)();
  swift_bridgeObjectRelease();
  uint64_t v6 = *(void (**)(void *__return_ptr, uint64_t, uint64_t))(v2 + 464);
  swift_unknownObjectRetain();
  v6(v59, ObjectType, v2);
  swift_unknownObjectRelease();
  outlined init with take of LocalePreferences?((uint64_t)v59, (uint64_t)v60);
  outlined init with take of LocalePreferences?((uint64_t)v60, (uint64_t)v61);
  if (_s10Foundation17LocalePreferencesVSgWOg((uint64_t)v61) == 1)
  {
    Swift::UInt8 v5 = 0;
    goto LABEL_5;
  }

  outlined init with take of LocalePreferences?((uint64_t)v60, (uint64_t)v41);
  Hasher._combine(_:)(1u);
  if (v41[0] == 2)
  {
    uint64_t v7 = 0;
  }

  else
  {
    uint64_t v7 = v41[0] & 1;
    Hasher._combine(_:)(1u);
  }

  Hasher._combine(_:)(v7);
  id v8 = v42;
  if (!v42)
  {
    Hasher._combine(_:)(0);
    uint64_t v13 = v41;
    goto LABEL_20;
  }

  Hasher._combine(_:)(1u);
  Hasher._combine(_:)(*(void *)(v8 + 16));
  char v9 = *(void *)(v8 + 16);
  if (!v9)
  {
    outlined init with take of LocalePreferences?((uint64_t)v60, (uint64_t)v40);
    uint64_t v13 = v40;
LABEL_20:
    outlined retain of LocalePreferences(v13);
    if (!v43) {
      goto LABEL_14;
    }
    goto LABEL_21;
  }

  outlined retain of LocalePreferences?( (uint64_t)v60,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined copy of LocalePreferences?);
  swift_bridgeObjectRetain();
  uint64_t v10 = v8 + 40;
  do
  {
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    v10 += 16LL;
    --v9;
  }

  while (v9);
  swift_bridgeObjectRelease();
  if (!v43)
  {
LABEL_14:
    Hasher._combine(_:)(0);
    if (!v44) {
      goto LABEL_15;
    }
    goto LABEL_22;
  }

uint64_t PersonNameComponents.AttributedStyle.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return PersonNameComponents.FormatStyle.init(from:)( a1,  &demangling cache variable for type metadata for KeyedDecodingContainer<PersonNameComponents.AttributedStyle.CodingKeys>,  (void (*)(void))lazy protocol witness table accessor for type PersonNameComponents.AttributedStyle.CodingKeys and conformance PersonNameComponents.AttributedStyle.CodingKeys,  a2);
}

uint64_t PersonNameComponents.FormatStyle.init(from:)@<X0>( void *a1@<X0>, uint64_t *a2@<X1>, void (*a3)(void)@<X2>, uint64_t a4@<X8>)
{
  uint64_t v16 = a4;
  uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(a2);
  uint64_t v7 = *(void *)(v17 - 8);
  MEMORY[0x1895F8858](v17);
  char v9 = (char *)&v16 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  a3();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v4)
  {
    uint64_t v10 = v7;
    uint64_t v11 = v16;
    char v19 = 0;
    lazy protocol witness table accessor for type PersonNameComponents.FormatStyle.Style and conformance PersonNameComponents.FormatStyle.Style();
    uint64_t v12 = v17;
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    char v13 = v18;
    char v19 = 1;
    lazy protocol witness table accessor for type Locale and conformance Locale();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v10 + 8))(v9, v12);
    __int128 v14 = v18;
    *(_BYTE *)uint64_t v11 = v13;
    *(_OWORD *)(v11 + 8) = v14;
  }

  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t protocol witness for Decodable.init(from:) in conformance PersonNameComponents.AttributedStyle@<X0>( void *a1@<X0>, uint64_t a2@<X8>)
{
  return PersonNameComponents.AttributedStyle.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance PersonNameComponents.AttributedStyle( void *a1)
{
  return PersonNameComponents.AttributedStyle.encode(to:)(a1);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance PersonNameComponents.FormatStyle()
{
  void (*v6)(void *__return_ptr, uint64_t, uint64_t);
  Swift::UInt8 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  id v18;
  id v19;
  id v20;
  id v21;
  id v22;
  id v23;
  id v24;
  id v25;
  id v26;
  id v27;
  id v28;
  id v29;
  id v30;
  uint64_t v31;
  uint64_t v32;
  Swift::UInt v33;
  Swift::UInt v34;
  Swift::UInt8 v35;
  Swift::UInt8 v36;
  Swift::UInt8 v37;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  void *v45;
  void *v46;
  void *v47;
  void *v48;
  void *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char v53;
  char v54;
  char v55;
  char v56;
  void v57[18];
  _BYTE v58[144];
  _BYTE v59[144];
  _BYTE v60[72];
  uint64_t v1 = *v0;
  uint64_t v2 = *((void *)v0 + 2);
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1 + 1);
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t))(v2 + 48);
  swift_unknownObjectRetain();
  if ((v4(ObjectType, v2) & 1) != 0)
  {
    Swift::UInt8 v5 = 1;
LABEL_5:
    Hasher._combine(_:)(v5);
    goto LABEL_55;
  }

  Hasher._combine(_:)(0);
  (*(void (**)(uint64_t, uint64_t))(v2 + 64))(ObjectType, v2);
  String.hash(into:)();
  swift_bridgeObjectRelease();
  uint64_t v6 = *(void (**)(void *__return_ptr, uint64_t, uint64_t))(v2 + 464);
  swift_unknownObjectRetain();
  v6(v57, ObjectType, v2);
  swift_unknownObjectRelease();
  outlined init with take of LocalePreferences?((uint64_t)v57, (uint64_t)v58);
  outlined init with take of LocalePreferences?((uint64_t)v58, (uint64_t)v59);
  if (_s10Foundation17LocalePreferencesVSgWOg((uint64_t)v59) == 1)
  {
    Swift::UInt8 v5 = 0;
    goto LABEL_5;
  }

  outlined init with take of LocalePreferences?((uint64_t)v58, (uint64_t)&v39);
  Hasher._combine(_:)(1u);
  if (v39 == 2)
  {
    uint64_t v7 = 0;
  }

  else
  {
    uint64_t v7 = v39 & 1;
    Hasher._combine(_:)(1u);
  }

  Hasher._combine(_:)(v7);
  uint64_t v8 = v40;
  if (!v40)
  {
    Hasher._combine(_:)(0);
LABEL_19:
    outlined retain of LocalePreferences(&v39);
    if (!v41) {
      goto LABEL_14;
    }
    goto LABEL_20;
  }

  Hasher._combine(_:)(1u);
  Hasher._combine(_:)(*(void *)(v8 + 16));
  char v9 = *(void *)(v8 + 16);
  if (!v9) {
    goto LABEL_19;
  }
  outlined retain of LocalePreferences?( (uint64_t)v58,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined copy of LocalePreferences?);
  swift_bridgeObjectRetain();
  uint64_t v10 = v8 + 40;
  do
  {
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    v10 += 16LL;
    --v9;
  }

  while (v9);
  swift_bridgeObjectRelease();
  if (!v41)
  {
LABEL_14:
    Hasher._combine(_:)(0);
    if (!v42) {
      goto LABEL_15;
    }
    goto LABEL_21;
  }

void PersonNameComponents.ParseStrategy.parse(_:)(uint64_t *a1@<X8>)
{
  id v2 = objc_msgSend(objc_allocWithZone((Class)NSPersonNameComponentsFormatter), sel_init);
  id v3 = objc_msgSend(v2, sel_personNameComponentsFromString_, String._bridgeToObjectiveCImpl()());
  swift_unknownObjectRelease();
  if (v3)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _MutableHandle<NSPersonNameComponents>);
    uint64_t v4 = swift_allocObject();
    objc_msgSend(v3, sel_copy);
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
    type metadata accessor for NSPersonNameComponents();
    swift_dynamicCast();
    *(void *)(v4 + 16) = v5;

    *a1 = v4;
  }

  else
  {
    lazy protocol witness table accessor for type PersonNameComponents.ParseStrategy.ParseError and conformance PersonNameComponents.ParseStrategy.ParseError();
    swift_allocError();
    swift_willThrow();
  }

uint64_t static PersonNameComponents.ParseStrategy.== infix(_:_:)()
{
  return 1LL;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance PersonNameComponents.ParseStrategy.CodingKeys()
{
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PersonNameComponents.ParseStrategy.CodingKeys()
{
  return CodingKey.debugDescription.getter();
}

uint64_t PersonNameComponents.ParseStrategy.encode(to:)(void *a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<PersonNameComponents.ParseStrategy.CodingKeys>);
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1895F8858](v2);
  uint64_t v5 = (char *)&v7 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type PersonNameComponents.ParseStrategy.CodingKeys and conformance PersonNameComponents.ParseStrategy.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
}

Swift::Int PersonNameComponents.ParseStrategy.hashValue.getter()
{
  return Hasher._finalize()();
}

uint64_t PersonNameComponents.ParseStrategy.init(from:)(uint64_t a1)
{
  return __swift_destroy_boxed_opaque_existential_1(a1);
}

void protocol witness for ParseStrategy.parse(_:) in conformance PersonNameComponents.ParseStrategy( uint64_t *a1@<X8>)
{
}

uint64_t protocol witness for Encodable.encode(to:) in conformance PersonNameComponents.ParseStrategy( void *a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<PersonNameComponents.ParseStrategy.CodingKeys>);
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1895F8858](v2);
  uint64_t v5 = (char *)&v7 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type PersonNameComponents.ParseStrategy.CodingKeys and conformance PersonNameComponents.ParseStrategy.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
}

uint64_t PersonNameComponents.formatted<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *v3;
  return (*(uint64_t (**)(uint64_t *))(a3 + 48))(&v5);
}

Swift::String __swiftcall PersonNameComponents.formatted()()
{
  uint64_t v1 = *v0;
  if (one-time initialization token for cache != -1) {
    swift_once();
  }
  uint64_t v2 = static LocaleCache.cache + 16;
  uint64_t v3 = (os_unfair_lock_s *)(static LocaleCache.cache + 124);
  swift_retain_n();
  os_unfair_lock_lock(v3);
  closure #1 in LocaleCache.autoupdatingCurrent.getter(v2, v13);
  os_unfair_lock_unlock(v3);
  swift_release_n();
  uint64_t v4 = v13[0];
  uint64_t v5 = lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( (unint64_t *)&lazy protocol witness table cache variable for type _LocaleAutoupdating and conformance _LocaleAutoupdating,  (uint64_t (*)(uint64_t))type metadata accessor for _LocaleAutoupdating,  (uint64_t)&protocol conformance descriptor for _LocaleAutoupdating);
  LOBYTE(v13[0]) = 1;
  v13[1] = v4;
  v13[2] = v5;
  uint64_t v12 = v1;
  id v6 = PersonNameComponents.FormatStyle.format(_:)(&v12);
  uint64_t v8 = v7;
  swift_release();
  uint64_t v9 = (uint64_t)v6;
  uint64_t v10 = v8;
  result._unint64_t object = v10;
  result._uint64_t countAndFlagsBits = v9;
  return result;
}

uint64_t PersonNameComponents.init<A>(_:strategy:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, void *a5@<X8>)
{
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t, uint64_t))(a4 + 48))(&v12, a1, a3, a4);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(a3 - 8) + 8LL))(a2, a3);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 8LL))( a1,  AssociatedTypeWitness);
  if (!v5) {
    *a5 = v12;
  }
  return result;
}

void PersonNameComponents.init(_:)(uint64_t *a1@<X8>)
{
  id v2 = objc_msgSend(objc_allocWithZone((Class)NSPersonNameComponentsFormatter), sel_init);
  id v3 = objc_msgSend(v2, sel_personNameComponentsFromString_, String._bridgeToObjectiveCImpl()());
  swift_unknownObjectRelease();
  if (v3)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _MutableHandle<NSPersonNameComponents>);
    uint64_t v4 = swift_allocObject();
    objc_msgSend(v3, sel_copy);
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
    type metadata accessor for NSPersonNameComponents();
    swift_dynamicCast();
    *(void *)(v4 + 16) = v5;
    swift_bridgeObjectRelease();

    *a1 = v4;
  }

  else
  {
    lazy protocol witness table accessor for type PersonNameComponents.ParseStrategy.ParseError and conformance PersonNameComponents.ParseStrategy.ParseError();
    swift_allocError();
    swift_willThrow();
    swift_bridgeObjectRelease();
  }

uint64_t static FormatStyle<>.name(style:)@<X0>(char *a1@<X0>, uint64_t a2@<X8>)
{
  char v3 = *a1;
  if (one-time initialization token for cache != -1) {
    swift_once();
  }
  uint64_t v4 = static LocaleCache.cache + 16;
  uint64_t v5 = (os_unfair_lock_s *)(static LocaleCache.cache + 124);
  swift_retain_n();
  os_unfair_lock_lock(v5);
  closure #1 in LocaleCache.autoupdatingCurrent.getter(v4, &v8);
  os_unfair_lock_unlock(v5);
  swift_release_n();
  uint64_t v6 = v8;
  uint64_t result = lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( (unint64_t *)&lazy protocol witness table cache variable for type _LocaleAutoupdating and conformance _LocaleAutoupdating,  (uint64_t (*)(uint64_t))type metadata accessor for _LocaleAutoupdating,  (uint64_t)&protocol conformance descriptor for _LocaleAutoupdating);
  *(_BYTE *)a2 = v3;
  *(void *)(a2 + 8) = v6;
  *(void *)(a2 + 16) = result;
  return result;
}

unint64_t lazy protocol witness table accessor for type PersonNameComponents.FormatStyle.CodingKeys and conformance PersonNameComponents.FormatStyle.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type PersonNameComponents.FormatStyle.CodingKeys and conformance PersonNameComponents.FormatStyle.CodingKeys;
  if (!lazy protocol witness table cache variable for type PersonNameComponents.FormatStyle.CodingKeys and conformance PersonNameComponents.FormatStyle.CodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for PersonNameComponents.FormatStyle.CodingKeys,  &unk_189C97148);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type PersonNameComponents.FormatStyle.CodingKeys and conformance PersonNameComponents.FormatStyle.CodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type PersonNameComponents.FormatStyle.CodingKeys and conformance PersonNameComponents.FormatStyle.CodingKeys;
  if (!lazy protocol witness table cache variable for type PersonNameComponents.FormatStyle.CodingKeys and conformance PersonNameComponents.FormatStyle.CodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for PersonNameComponents.FormatStyle.CodingKeys,  &unk_189C97148);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type PersonNameComponents.FormatStyle.CodingKeys and conformance PersonNameComponents.FormatStyle.CodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type PersonNameComponents.FormatStyle.CodingKeys and conformance PersonNameComponents.FormatStyle.CodingKeys;
  if (!lazy protocol witness table cache variable for type PersonNameComponents.FormatStyle.CodingKeys and conformance PersonNameComponents.FormatStyle.CodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for PersonNameComponents.FormatStyle.CodingKeys,  &unk_189C97148);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type PersonNameComponents.FormatStyle.CodingKeys and conformance PersonNameComponents.FormatStyle.CodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type PersonNameComponents.FormatStyle.CodingKeys and conformance PersonNameComponents.FormatStyle.CodingKeys;
  if (!lazy protocol witness table cache variable for type PersonNameComponents.FormatStyle.CodingKeys and conformance PersonNameComponents.FormatStyle.CodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for PersonNameComponents.FormatStyle.CodingKeys,  &unk_189C97148);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type PersonNameComponents.FormatStyle.CodingKeys and conformance PersonNameComponents.FormatStyle.CodingKeys);
  }

  return result;
}

unint64_t lazy protocol witness table accessor for type PersonNameComponents.FormatStyle.Style and conformance PersonNameComponents.FormatStyle.Style()
{
  unint64_t result = lazy protocol witness table cache variable for type PersonNameComponents.FormatStyle.Style and conformance PersonNameComponents.FormatStyle.Style;
  if (!lazy protocol witness table cache variable for type PersonNameComponents.FormatStyle.Style and conformance PersonNameComponents.FormatStyle.Style)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for PersonNameComponents.FormatStyle.Style,  &type metadata for PersonNameComponents.FormatStyle.Style);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type PersonNameComponents.FormatStyle.Style and conformance PersonNameComponents.FormatStyle.Style);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type PersonNameComponents.FormatStyle.Style and conformance PersonNameComponents.FormatStyle.Style;
  if (!lazy protocol witness table cache variable for type PersonNameComponents.FormatStyle.Style and conformance PersonNameComponents.FormatStyle.Style)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for PersonNameComponents.FormatStyle.Style,  &type metadata for PersonNameComponents.FormatStyle.Style);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type PersonNameComponents.FormatStyle.Style and conformance PersonNameComponents.FormatStyle.Style);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type PersonNameComponents.FormatStyle.Style and conformance PersonNameComponents.FormatStyle.Style;
  if (!lazy protocol witness table cache variable for type PersonNameComponents.FormatStyle.Style and conformance PersonNameComponents.FormatStyle.Style)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for PersonNameComponents.FormatStyle.Style,  &type metadata for PersonNameComponents.FormatStyle.Style);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type PersonNameComponents.FormatStyle.Style and conformance PersonNameComponents.FormatStyle.Style);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type PersonNameComponents.FormatStyle.Style and conformance PersonNameComponents.FormatStyle.Style;
  if (!lazy protocol witness table cache variable for type PersonNameComponents.FormatStyle.Style and conformance PersonNameComponents.FormatStyle.Style)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for PersonNameComponents.FormatStyle.Style,  &type metadata for PersonNameComponents.FormatStyle.Style);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type PersonNameComponents.FormatStyle.Style and conformance PersonNameComponents.FormatStyle.Style);
  }

  return result;
}

uint64_t specialized static PersonNameComponents.FormatStyle.== infix(_:_:)( unsigned __int8 *a1, unsigned __int8 *a2)
{
  if (*a1 == *a2)
  {
    __int128 v2 = *(_OWORD *)(a1 + 8);
    __int128 v5 = *(_OWORD *)(a2 + 8);
    __int128 v6 = v2;
    char v3 = specialized static Locale.== infix(_:_:)((uint64_t)&v6, (uint64_t)&v5);
  }

  else
  {
    char v3 = 0;
  }

  return v3 & 1;
}

unint64_t lazy protocol witness table accessor for type PersonNameComponents.AttributedStyle.CodingKeys and conformance PersonNameComponents.AttributedStyle.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type PersonNameComponents.AttributedStyle.CodingKeys and conformance PersonNameComponents.AttributedStyle.CodingKeys;
  if (!lazy protocol witness table cache variable for type PersonNameComponents.AttributedStyle.CodingKeys and conformance PersonNameComponents.AttributedStyle.CodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for PersonNameComponents.AttributedStyle.CodingKeys,  &unk_189C970B8);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type PersonNameComponents.AttributedStyle.CodingKeys and conformance PersonNameComponents.AttributedStyle.CodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type PersonNameComponents.AttributedStyle.CodingKeys and conformance PersonNameComponents.AttributedStyle.CodingKeys;
  if (!lazy protocol witness table cache variable for type PersonNameComponents.AttributedStyle.CodingKeys and conformance PersonNameComponents.AttributedStyle.CodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for PersonNameComponents.AttributedStyle.CodingKeys,  &unk_189C970B8);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type PersonNameComponents.AttributedStyle.CodingKeys and conformance PersonNameComponents.AttributedStyle.CodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type PersonNameComponents.AttributedStyle.CodingKeys and conformance PersonNameComponents.AttributedStyle.CodingKeys;
  if (!lazy protocol witness table cache variable for type PersonNameComponents.AttributedStyle.CodingKeys and conformance PersonNameComponents.AttributedStyle.CodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for PersonNameComponents.AttributedStyle.CodingKeys,  &unk_189C970B8);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type PersonNameComponents.AttributedStyle.CodingKeys and conformance PersonNameComponents.AttributedStyle.CodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type PersonNameComponents.AttributedStyle.CodingKeys and conformance PersonNameComponents.AttributedStyle.CodingKeys;
  if (!lazy protocol witness table cache variable for type PersonNameComponents.AttributedStyle.CodingKeys and conformance PersonNameComponents.AttributedStyle.CodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for PersonNameComponents.AttributedStyle.CodingKeys,  &unk_189C970B8);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type PersonNameComponents.AttributedStyle.CodingKeys and conformance PersonNameComponents.AttributedStyle.CodingKeys);
  }

  return result;
}

unint64_t lazy protocol witness table accessor for type PersonNameComponents.ParseStrategy.ParseError and conformance PersonNameComponents.ParseStrategy.ParseError()
{
  unint64_t result = lazy protocol witness table cache variable for type PersonNameComponents.ParseStrategy.ParseError and conformance PersonNameComponents.ParseStrategy.ParseError;
  if (!lazy protocol witness table cache variable for type PersonNameComponents.ParseStrategy.ParseError and conformance PersonNameComponents.ParseStrategy.ParseError)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for PersonNameComponents.ParseStrategy.ParseError,  &type metadata for PersonNameComponents.ParseStrategy.ParseError);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type PersonNameComponents.ParseStrategy.ParseError and conformance PersonNameComponents.ParseStrategy.ParseError);
  }

  return result;
}

unint64_t lazy protocol witness table accessor for type PersonNameComponents.ParseStrategy.CodingKeys and conformance PersonNameComponents.ParseStrategy.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type PersonNameComponents.ParseStrategy.CodingKeys and conformance PersonNameComponents.ParseStrategy.CodingKeys;
  if (!lazy protocol witness table cache variable for type PersonNameComponents.ParseStrategy.CodingKeys and conformance PersonNameComponents.ParseStrategy.CodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for PersonNameComponents.ParseStrategy.CodingKeys,  &unk_189C97008);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type PersonNameComponents.ParseStrategy.CodingKeys and conformance PersonNameComponents.ParseStrategy.CodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type PersonNameComponents.ParseStrategy.CodingKeys and conformance PersonNameComponents.ParseStrategy.CodingKeys;
  if (!lazy protocol witness table cache variable for type PersonNameComponents.ParseStrategy.CodingKeys and conformance PersonNameComponents.ParseStrategy.CodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for PersonNameComponents.ParseStrategy.CodingKeys,  &unk_189C97008);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type PersonNameComponents.ParseStrategy.CodingKeys and conformance PersonNameComponents.ParseStrategy.CodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type PersonNameComponents.ParseStrategy.CodingKeys and conformance PersonNameComponents.ParseStrategy.CodingKeys;
  if (!lazy protocol witness table cache variable for type PersonNameComponents.ParseStrategy.CodingKeys and conformance PersonNameComponents.ParseStrategy.CodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for PersonNameComponents.ParseStrategy.CodingKeys,  &unk_189C97008);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type PersonNameComponents.ParseStrategy.CodingKeys and conformance PersonNameComponents.ParseStrategy.CodingKeys);
  }

  return result;
}

uint64_t instantiation function for generic protocol witness table for PersonNameComponents.FormatStyle( void *a1, uint64_t a2, uint64_t a3)
{
  return instantiation function for generic protocol witness table for Date.AttributedStyle( a1,  a2,  a3,  (uint64_t (*)(void))lazy protocol witness table accessor for type PersonNameComponents.FormatStyle and conformance PersonNameComponents.FormatStyle,  (uint64_t (*)(void))lazy protocol witness table accessor for type PersonNameComponents.FormatStyle and conformance PersonNameComponents.FormatStyle,  (uint64_t (*)(void))lazy protocol witness table accessor for type PersonNameComponents.FormatStyle and conformance PersonNameComponents.FormatStyle);
}

unint64_t lazy protocol witness table accessor for type PersonNameComponents.FormatStyle and conformance PersonNameComponents.FormatStyle()
{
  unint64_t result = lazy protocol witness table cache variable for type PersonNameComponents.FormatStyle and conformance PersonNameComponents.FormatStyle;
  if (!lazy protocol witness table cache variable for type PersonNameComponents.FormatStyle and conformance PersonNameComponents.FormatStyle)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for PersonNameComponents.FormatStyle,  &type metadata for PersonNameComponents.FormatStyle);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type PersonNameComponents.FormatStyle and conformance PersonNameComponents.FormatStyle);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type PersonNameComponents.FormatStyle and conformance PersonNameComponents.FormatStyle;
  if (!lazy protocol witness table cache variable for type PersonNameComponents.FormatStyle and conformance PersonNameComponents.FormatStyle)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for PersonNameComponents.FormatStyle,  &type metadata for PersonNameComponents.FormatStyle);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type PersonNameComponents.FormatStyle and conformance PersonNameComponents.FormatStyle);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type PersonNameComponents.FormatStyle and conformance PersonNameComponents.FormatStyle;
  if (!lazy protocol witness table cache variable for type PersonNameComponents.FormatStyle and conformance PersonNameComponents.FormatStyle)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for PersonNameComponents.FormatStyle,  &type metadata for PersonNameComponents.FormatStyle);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type PersonNameComponents.FormatStyle and conformance PersonNameComponents.FormatStyle);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type PersonNameComponents.FormatStyle and conformance PersonNameComponents.FormatStyle;
  if (!lazy protocol witness table cache variable for type PersonNameComponents.FormatStyle and conformance PersonNameComponents.FormatStyle)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for PersonNameComponents.FormatStyle,  &type metadata for PersonNameComponents.FormatStyle);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type PersonNameComponents.FormatStyle and conformance PersonNameComponents.FormatStyle);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type PersonNameComponents.FormatStyle and conformance PersonNameComponents.FormatStyle;
  if (!lazy protocol witness table cache variable for type PersonNameComponents.FormatStyle and conformance PersonNameComponents.FormatStyle)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for PersonNameComponents.FormatStyle,  &type metadata for PersonNameComponents.FormatStyle);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type PersonNameComponents.FormatStyle and conformance PersonNameComponents.FormatStyle);
  }

  return result;
}

uint64_t instantiation function for generic protocol witness table for PersonNameComponents.AttributedStyle( void *a1, uint64_t a2, uint64_t a3)
{
  return instantiation function for generic protocol witness table for Date.AttributedStyle( a1,  a2,  a3,  (uint64_t (*)(void))lazy protocol witness table accessor for type PersonNameComponents.AttributedStyle and conformance PersonNameComponents.AttributedStyle,  (uint64_t (*)(void))lazy protocol witness table accessor for type PersonNameComponents.AttributedStyle and conformance PersonNameComponents.AttributedStyle,  (uint64_t (*)(void))lazy protocol witness table accessor for type PersonNameComponents.AttributedStyle and conformance PersonNameComponents.AttributedStyle);
}

unint64_t lazy protocol witness table accessor for type PersonNameComponents.AttributedStyle and conformance PersonNameComponents.AttributedStyle()
{
  unint64_t result = lazy protocol witness table cache variable for type PersonNameComponents.AttributedStyle and conformance PersonNameComponents.AttributedStyle;
  if (!lazy protocol witness table cache variable for type PersonNameComponents.AttributedStyle and conformance PersonNameComponents.AttributedStyle)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for PersonNameComponents.AttributedStyle,  &type metadata for PersonNameComponents.AttributedStyle);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type PersonNameComponents.AttributedStyle and conformance PersonNameComponents.AttributedStyle);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type PersonNameComponents.AttributedStyle and conformance PersonNameComponents.AttributedStyle;
  if (!lazy protocol witness table cache variable for type PersonNameComponents.AttributedStyle and conformance PersonNameComponents.AttributedStyle)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for PersonNameComponents.AttributedStyle,  &type metadata for PersonNameComponents.AttributedStyle);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type PersonNameComponents.AttributedStyle and conformance PersonNameComponents.AttributedStyle);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type PersonNameComponents.AttributedStyle and conformance PersonNameComponents.AttributedStyle;
  if (!lazy protocol witness table cache variable for type PersonNameComponents.AttributedStyle and conformance PersonNameComponents.AttributedStyle)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for PersonNameComponents.AttributedStyle,  &type metadata for PersonNameComponents.AttributedStyle);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type PersonNameComponents.AttributedStyle and conformance PersonNameComponents.AttributedStyle);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type PersonNameComponents.AttributedStyle and conformance PersonNameComponents.AttributedStyle;
  if (!lazy protocol witness table cache variable for type PersonNameComponents.AttributedStyle and conformance PersonNameComponents.AttributedStyle)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for PersonNameComponents.AttributedStyle,  &type metadata for PersonNameComponents.AttributedStyle);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type PersonNameComponents.AttributedStyle and conformance PersonNameComponents.AttributedStyle);
  }

  return result;
}

uint64_t instantiation function for generic protocol witness table for PersonNameComponents.ParseStrategy( void *a1, uint64_t a2, uint64_t a3)
{
  return instantiation function for generic protocol witness table for Date.AttributedStyle( a1,  a2,  a3,  (uint64_t (*)(void))lazy protocol witness table accessor for type PersonNameComponents.ParseStrategy and conformance PersonNameComponents.ParseStrategy,  (uint64_t (*)(void))lazy protocol witness table accessor for type PersonNameComponents.ParseStrategy and conformance PersonNameComponents.ParseStrategy,  (uint64_t (*)(void))lazy protocol witness table accessor for type PersonNameComponents.ParseStrategy and conformance PersonNameComponents.ParseStrategy);
}

unint64_t lazy protocol witness table accessor for type PersonNameComponents.ParseStrategy and conformance PersonNameComponents.ParseStrategy()
{
  unint64_t result = lazy protocol witness table cache variable for type PersonNameComponents.ParseStrategy and conformance PersonNameComponents.ParseStrategy;
  if (!lazy protocol witness table cache variable for type PersonNameComponents.ParseStrategy and conformance PersonNameComponents.ParseStrategy)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for PersonNameComponents.ParseStrategy,  &type metadata for PersonNameComponents.ParseStrategy);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type PersonNameComponents.ParseStrategy and conformance PersonNameComponents.ParseStrategy);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type PersonNameComponents.ParseStrategy and conformance PersonNameComponents.ParseStrategy;
  if (!lazy protocol witness table cache variable for type PersonNameComponents.ParseStrategy and conformance PersonNameComponents.ParseStrategy)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for PersonNameComponents.ParseStrategy,  &type metadata for PersonNameComponents.ParseStrategy);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type PersonNameComponents.ParseStrategy and conformance PersonNameComponents.ParseStrategy);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type PersonNameComponents.ParseStrategy and conformance PersonNameComponents.ParseStrategy;
  if (!lazy protocol witness table cache variable for type PersonNameComponents.ParseStrategy and conformance PersonNameComponents.ParseStrategy)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for PersonNameComponents.ParseStrategy,  &type metadata for PersonNameComponents.ParseStrategy);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type PersonNameComponents.ParseStrategy and conformance PersonNameComponents.ParseStrategy);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type PersonNameComponents.ParseStrategy and conformance PersonNameComponents.ParseStrategy;
  if (!lazy protocol witness table cache variable for type PersonNameComponents.ParseStrategy and conformance PersonNameComponents.ParseStrategy)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for PersonNameComponents.ParseStrategy,  &type metadata for PersonNameComponents.ParseStrategy);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type PersonNameComponents.ParseStrategy and conformance PersonNameComponents.ParseStrategy);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type PersonNameComponents.ParseStrategy and conformance PersonNameComponents.ParseStrategy;
  if (!lazy protocol witness table cache variable for type PersonNameComponents.ParseStrategy and conformance PersonNameComponents.ParseStrategy)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for PersonNameComponents.ParseStrategy,  &type metadata for PersonNameComponents.ParseStrategy);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type PersonNameComponents.ParseStrategy and conformance PersonNameComponents.ParseStrategy);
  }

  return result;
}

unint64_t instantiation function for generic protocol witness table for PersonNameComponents.FormatStyle( uint64_t a1)
{
  unint64_t result = lazy protocol witness table accessor for type PersonNameComponents.FormatStyle and conformance PersonNameComponents.FormatStyle();
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for PersonNameComponents.FormatStyle(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  swift_unknownObjectRetain();
  return a1;
}

uint64_t assignWithTake for PersonNameComponents.FormatStyle(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  swift_unknownObjectRelease();
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  return a1;
}

ValueMetadata *type metadata accessor for PersonNameComponents.FormatStyle()
{
  return &type metadata for PersonNameComponents.FormatStyle;
}

uint64_t storeEnumTagSinglePayload for PersonNameComponents.FormatStyle.Style( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFC) {
    return ((uint64_t (*)(void))((char *)&loc_1834F7D90 + 4 * byte_1838338CD[v4]))();
  }
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_1834F7DC4 + 4 * asc_1838338C8[v4]))();
}

uint64_t sub_1834F7DC4(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1834F7DCC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x1834F7DD4LL);
  }
  return result;
}

uint64_t sub_1834F7DE0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x1834F7DE8LL);
  }
  *(_BYTE *)unint64_t result = a2 + 3;
  return result;
}

uint64_t sub_1834F7DEC(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1834F7DF4(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for PersonNameComponents.FormatStyle.Style()
{
  return &type metadata for PersonNameComponents.FormatStyle.Style;
}

uint64_t assignWithCopy for PersonNameComponents.FormatStyle(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  uint64_t v3 = *(void *)(a2 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  *(void *)(a1 + 16) = v3;
  return a1;
}

ValueMetadata *type metadata accessor for PersonNameComponents.AttributedStyle()
{
  return &type metadata for PersonNameComponents.AttributedStyle;
}

ValueMetadata *type metadata accessor for PersonNameComponents.ParseStrategy()
{
  return &type metadata for PersonNameComponents.ParseStrategy;
}

void *type metadata accessor for PersonNameComponents.ParseStrategy.CodingKeys()
{
  return &unk_189C97008;
}

ValueMetadata *type metadata accessor for PersonNameComponents.ParseStrategy.ParseError()
{
  return &type metadata for PersonNameComponents.ParseStrategy.ParseError;
}

void *type metadata accessor for PersonNameComponents.AttributedStyle.CodingKeys()
{
  return &unk_189C970B8;
}

uint64_t storeEnumTagSinglePayload for PersonNameComponents.AttributedStyle.CodingKeys( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFE) {
    return ((uint64_t (*)(void))((char *)&loc_1834F7EFC + 4 * byte_1838338D7[v4]))();
  }
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1834F7F30 + 4 * byte_1838338D2[v4]))();
}

uint64_t sub_1834F7F30(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1834F7F38(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x1834F7F40LL);
  }
  return result;
}

uint64_t sub_1834F7F4C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x1834F7F54LL);
  }
  *(_BYTE *)unint64_t result = a2 + 1;
  return result;
}

uint64_t sub_1834F7F58(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1834F7F60(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

void *type metadata accessor for PersonNameComponents.FormatStyle.CodingKeys()
{
  return &unk_189C97148;
}

uint64_t specialized PersonNameComponents.FormatStyle.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x656C797473LL && a2 == 0xE500000000000000LL;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0LL;
  }

  else if (a1 == 0x656C61636F6CLL && a2 == 0xE600000000000000LL)
  {
    swift_bridgeObjectRelease();
    return 1LL;
  }

  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0) {
      return 1LL;
    }
    else {
      return 2LL;
    }
  }

uint64_t _KeyValueCodingAndObservingSequence<>.changes<A>(for:options:)(void *a1, uint64_t a2)
{
  uint64_t v4 = (uint64_t *)(*a1 + *MEMORY[0x18961A9A8]);
  uint64_t v5 = *v4;
  uint64_t v6 = v4[1];
  type metadata accessor for KeyPath();
  id v7 = v2;
  swift_retain();
  swift_dynamicCast();
  type metadata accessor for NSObject.KeyValueObservedChanges(0LL, v5, v6, v8);
  uint64_t v9 = swift_allocObject();
  NSObject.KeyValueObservedChanges.init(object:keyPath:options:)(v7, v12, a2, v10);
  return v9;
}

uint64_t type metadata accessor for NSObject.KeyValueObservedChanges( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata( a1,  a2,  a3,  a4,  (uint64_t)&nominal type descriptor for NSObject.KeyValueObservedChanges);
}

uint64_t NSObject.KeyValueObservedChanges.Iterator.next()(uint64_t a1, uint64_t a2)
{
  v3[2] = a1;
  v3[3] = a2;
  v3[4] = *v2;
  return swift_task_switch();
}

uint64_t NSObject.KeyValueObservedChanges.Iterator.next()()
{
  uint64_t v1 = v0[3];
  uint64_t v2 = v0[4];
  int v3 = (void *)swift_task_alloc();
  v0[5] = v3;
  uint64_t v4 = *(void *)(v1 + 16);
  v3[2] = v4;
  uint64_t v5 = *(void *)(v1 + 24);
  v3[3] = v5;
  v3[4] = v2;
  uint64_t v6 = (void *)swift_task_alloc();
  v0[6] = v6;
  v6[2] = v4;
  v6[3] = v5;
  v6[4] = v2;
  id v7 = (void *)swift_task_alloc();
  v0[7] = v7;
  type metadata accessor for NSKeyValueObservedChange(255LL, v5, v8, v9);
  type metadata accessor for Optional();
  void *v7 = v0;
  v7[1] = NSObject.KeyValueObservedChanges.Iterator.next();
  return withTaskCancellationHandler<A>(operation:onCancel:isolation:)();
}

{
  uint64_t *v0;
  uint64_t v2;
  uint64_t v2 = *v0;
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t closure #1 in NSObject.KeyValueObservedChanges.Iterator.next()( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[12] = a3;
  v4[13] = a4;
  v4[10] = a1;
  v4[11] = a2;
  return swift_task_switch();
}

uint64_t closure #1 in NSObject.KeyValueObservedChanges.Iterator.next()()
{
  uint64_t v1 = *(void *)(v0 + 88);
  *(void *)(v0 + 56) = *(void *)(v0 + 80);
  *(void *)(v0 + 16) = v0;
  *(void *)(v0 + 24) = closure #1 in NSObject.KeyValueObservedChanges.Iterator.next();
  __int128 v6 = *(_OWORD *)(v0 + 96);
  uint64_t v2 = swift_continuation_init();
  uint64_t v3 = *(void *)(v1 + 16);
  uint64_t v4 = (uint64_t *)swift_task_alloc();
  *((_OWORD *)v4 + 1) = v6;
  v4[4] = v2;
  os_unfair_lock_lock((os_unfair_lock_t)(v3 + 40));
  closure #1 in closure #1 in NSObject.KeyValueObservedChanges.next()((void *)(v3 + 16), v4[4], v4[2], v4[3]);
  os_unfair_lock_unlock((os_unfair_lock_t)(v3 + 40));
  swift_task_dealloc();
  return swift_continuation_await();
}

{
  uint64_t v0;
  return (*(uint64_t (**)(void))(*(void *)v0 + 8LL))();
}

uint64_t closure #2 in NSObject.KeyValueObservedChanges.Iterator.next()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x1895F8858](v6);
  uint64_t v8 = (char *)&v12 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56LL))(v8, 1LL, 1LL, v9);
  uint64_t v10 = (void *)swift_allocObject();
  v10[2] = 0LL;
  v10[3] = 0LL;
  v10[4] = a2;
  v10[5] = a3;
  v10[6] = a1;
  swift_retain();
  _sScTss5NeverORs_rlE8detached8priority9operationScTyxABGScPSg_xyYaYAcntFZyt_Tgm5( (uint64_t)v8,  (uint64_t)&async function pointer to partial apply for closure #1 in closure #2 in NSObject.KeyValueObservedChanges.Iterator.next(),  (uint64_t)v10);
  swift_release();
  return outlined destroy of TaskPriority?((uint64_t)v8);
}

uint64_t closure #1 in closure #2 in NSObject.KeyValueObservedChanges.Iterator.next()( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)(v4 + 16) = a4;
  return swift_task_switch();
}

uint64_t closure #1 in closure #2 in NSObject.KeyValueObservedChanges.Iterator.next()()
{
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t _sScTss5NeverORs_rlE8detached8priority9operationScTyxABGScPSg_xyYaYAcntFZyt_Tgm5( uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x1895F8858](v6);
  uint64_t v8 = (char *)v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  outlined init with copy of TaskPriority?(a1, (uint64_t)v8);
  uint64_t v9 = type metadata accessor for TaskPriority();
  uint64_t v10 = *(void *)(v9 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1LL, v9) == 1)
  {
    outlined destroy of TaskPriority?((uint64_t)v8);
    if (*(void *)(a3 + 16))
    {
LABEL_3:
      swift_getObjectType();
      swift_unknownObjectRetain();
      uint64_t v11 = dispatch thunk of Actor.unownedExecutor.getter();
      uint64_t v13 = v12;
      swift_unknownObjectRelease();
      goto LABEL_6;
    }
  }

  else
  {
    TaskPriority.rawValue.getter();
    (*(void (**)(char *, uint64_t))(v10 + 8))(v8, v9);
    if (*(void *)(a3 + 16)) {
      goto LABEL_3;
    }
  }

  uint64_t v11 = 0LL;
  uint64_t v13 = 0LL;
LABEL_6:
  uint64_t v14 = swift_allocObject();
  *(void *)(v14 + 16) = a2;
  *(void *)(v14 + 24) = a3;
  if (v13 | v11)
  {
    v16[0] = 0LL;
    v16[1] = 0LL;
    v16[2] = v11;
    v16[3] = v13;
  }

  return swift_task_create();
}

uint64_t protocol witness for AsyncIteratorProtocol.next() in conformance NSObject.KeyValueObservedChanges<A, B>.Iterator( uint64_t a1, uint64_t a2)
{
  uint64_t v6 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v6;
  *uint64_t v6 = v3;
  v6[1] = closure #1 in NSNotificationCenter.Notifications.Iterator.next();
  v6[2] = a1;
  v6[3] = a2;
  v6[4] = *v2;
  return swift_task_switch();
}

uint64_t _sSo8NSObjectC10FoundationE23KeyValueObservedChangesC8IteratorVy_xq__GScIACScI4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTW()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  *uint64_t v1 = v0;
  v1[1] = _sSo8NSObjectC10FoundationE23KeyValueObservedChangesC8IteratorVy_xq__GScIACScI4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTWTQ0_;
  return _sScIsE4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKF();
}

uint64_t _sSo8NSObjectC10FoundationE23KeyValueObservedChangesC8IteratorVy_xq__GScIACScI4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTWTQ0_()
{
  uint64_t v2 = *v0;
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t *NSObject.KeyValueObservedChanges.init(object:keyPath:options:)( void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = swift_allocObject();
  *(_DWORD *)(v8 + 40) = 0;
  uint64_t v9 = (os_unfair_lock_s *)(v8 + 40);
  uint64_t v10 = MEMORY[0x18961AFE8];
  *(void *)(v8 + 16) = MEMORY[0x18961AFE8];
  uint64_t v11 = v8 + 16;
  *(void *)(v8 + 24) = 0LL;
  *(void *)(v8 + 32) = v10;
  v4[2] = v8;
  swift_retain();
  os_unfair_lock_lock(v9);
  closure #1 in NSObject.KeyValueObservedChanges.init(object:keyPath:options:)(v11, a1, a2, a3, v4);
  os_unfair_lock_unlock(v9);
  swift_release();

  swift_release();
  return v4;
}

uint64_t partial apply for closure #1 in NSObject.KeyValueObservedChanges.Iterator.next()(uint64_t a1)
{
  uint64_t v4 = *(void *)(v1 + 32);
  uint64_t v5 = swift_task_alloc();
  __int128 v6 = *(_OWORD *)(v1 + 16);
  *(void *)(v2 + 16) = v5;
  *(void *)uint64_t v5 = v2;
  *(void *)(v5 + 8) = partial apply for closure #1 in closure #1 in NSURLSession.AsyncBytes.Iterator.init(storage:);
  *(_OWORD *)(v5 + 96) = v6;
  *(void *)(v5 + 80) = a1;
  *(void *)(v5 + 88) = v4;
  return swift_task_switch();
}

uint64_t partial apply for closure #2 in NSObject.KeyValueObservedChanges.Iterator.next()()
{
  return closure #2 in NSObject.KeyValueObservedChanges.Iterator.next()(v0[4], v0[2], v0[3]);
}

void closure #1 in NSObject.KeyValueObservedChanges.init(object:keyPath:options:)( uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v8 = *a5;
  uint64_t v9 = swift_allocObject();
  swift_weakInit();
  uint64_t v10 = (void *)swift_allocObject();
  uint64_t v11 = *(void *)(v8 + 80);
  v10[2] = v11;
  uint64_t v12 = *(void *)(v8 + 88);
  v10[3] = v12;
  v10[4] = v9;
  unint64_t v25 = a2;
  type metadata accessor for NSObject();
  id v13 = a2;
  swift_dynamicCast();
  uint64_t v14 = v24;
  __int128 v15 = (void *)swift_allocObject();
  v15[2] = v11;
  v15[3] = v12;
  v15[4] = &protocol witness table for NSObject;
  v15[5] = partial apply for closure #1 in closure #1 in NSObject.KeyValueObservedChanges.init(object:keyPath:options:);
  v15[6] = v10;
  uint64_t v16 = (objc_class *)type metadata accessor for NSKeyValueObservation();
  id v17 = objc_allocWithZone(v16);
  swift_unknownObjectWeakInit();
  v23.receiver = v17;
  v23.super_class = v16;
  swift_retain();
  id v18 = objc_msgSendSuper2(&v23, sel_init);
  char v19 = (void *)MEMORY[0x186E1F27C]();
  objc_allocWithZone((Class)type metadata accessor for NSKeyValueObservation.Helper());
  swift_retain();
  id v20 = v14;
  swift_retain();
  id v21 = NSKeyValueObservation.Helper.init(object:keyPath:options:callback:)( v20,  a3,  a4,  (uint64_t)partial apply for closure #1 in _KeyValueCodingAndObserving.observe<A>(_:options:changeHandler:),  (uint64_t)v15);
  swift_unknownObjectWeakAssign();

  objc_autoreleasePoolPop(v19);
  swift_release();
  swift_release();

  *(void *)(a1 + 8) = v18;
}

uint64_t closure #1 in closure #1 in NSObject.KeyValueObservedChanges.init(object:keyPath:options:)( uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    NSObject.KeyValueObservedChanges.send(_:)(a2, v4, v5, v6);
    return swift_release();
  }

  return result;
}

uint64_t NSObject.KeyValueObservedChanges.send(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = *v4;
  uint64_t v41 = *(void *)(*v4 + 88LL);
  uint64_t v42 = a1;
  uint64_t v6 = type metadata accessor for NSKeyValueObservedChange(255LL, v41, a3, a4);
  uint64_t v7 = type metadata accessor for Optional();
  uint64_t v40 = *(void *)(v7 - 8);
  MEMORY[0x1895F8858](v7);
  unint64_t v39 = (char *)&v37 - v8;
  uint64_t v38 = v9;
  type metadata accessor for UnsafeContinuation();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v11 = *(void *)(TupleTypeMetadata2 - 8);
  MEMORY[0x1895F8858](TupleTypeMetadata2);
  uint64_t v37 = (void **)((char *)&v37 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  MEMORY[0x1895F8858](v13);
  uint64_t v43 = (char *)&v37 - v14;
  uint64_t v15 = type metadata accessor for Optional();
  uint64_t v16 = *(void *)(v15 - 8);
  MEMORY[0x1895F8858](v15);
  id v18 = (uint64_t *)((char *)&v37 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  MEMORY[0x1895F8858](v19);
  id v21 = (void **)((char *)&v37 - v20);
  unint64_t v22 = (os_unfair_lock_s *)v4[2];
  uint64_t v23 = *(void *)(v5 + 80);
  uint64_t v24 = v22 + 4;
  unint64_t v25 = v22 + 10;
  os_unfair_lock_lock(v22 + 10);
  closure #1 in NSObject.KeyValueObservedChanges.send(_:)(v24, v42, v23, v41, v21);
  os_unfair_lock_unlock(v25);
  (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v16 + 16))(v18, v21, v15);
  uint64_t v42 = v11;
  if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v11 + 48))(v18, 1LL, TupleTypeMetadata2) == 1)
  {
    unint64_t v26 = *(uint64_t (**)(uint64_t *, uint64_t))(v16 + 8);
    v26(v21, v15);
    return v26(v18, v15);
  }

  else
  {
    uint64_t v28 = *(int *)(TupleTypeMetadata2 + 48);
    __int128 v29 = v43;
    uint64_t v30 = &v43[v28];
    unint64_t v31 = (char *)v18 + v28;
    uint64_t v32 = *v18;
    *(void *)uint64_t v43 = v32;
    uint64_t v33 = *(void *)(v6 - 8);
    uint64_t v34 = *(void (**)(char *, char *, uint64_t))(v33 + 32);
    v34(&v29[v28], v31, v6);
    uint64_t v35 = (char *)v37 + *(int *)(TupleTypeMetadata2 + 48);
    *uint64_t v37 = v32;
    (*(void (**)(char *, char *, uint64_t))(v33 + 16))(v35, v30, v6);
    uint64_t v36 = v39;
    v34(v39, v35, v6);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v33 + 56))(v36, 0LL, 1LL, v6);
    (*(void (**)(void, char *, uint64_t))(v40 + 32))(*(void *)(*(void *)(v32 + 64) + 40LL), v36, v38);
    swift_continuation_resume();
    (*(void (**)(char *, uint64_t))(v42 + 8))(v43, TupleTypeMetadata2);
    return (*(uint64_t (**)(uint64_t *, uint64_t))(v16 + 8))(v21, v15);
  }

uint64_t NSObject.KeyValueObservedChanges.deinit()
{
  return v0;
}

Swift::Void __swiftcall NSObject.KeyValueObservedChanges.teardown()()
{
  uint64_t v3 = type metadata accessor for NSKeyValueObservedChange(255LL, *(void *)(*v2 + 88LL), v0, v1);
  uint64_t v4 = type metadata accessor for Optional();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1895F8858](v4);
  uint64_t v7 = (char *)&v21 - v6;
  uint64_t v8 = v2[2];
  os_unfair_lock_lock((os_unfair_lock_t)(v8 + 40));
  uint64_t v10 = *(char **)(v8 + 24);
  uint64_t v9 = *(void *)(v8 + 32);
  uint64_t v11 = MEMORY[0x18961AFE8];
  *(void *)(v8 + 24) = 0LL;
  *(void *)(v8 + 32) = v11;
  os_unfair_lock_unlock((os_unfair_lock_t)(v8 + 40));
  if (v10)
  {
    uint64_t v12 = (void *)MEMORY[0x186E20F44](&v10[OBJC_IVAR____NSKeyValueObservation_helper]);
    uint64_t v13 = v10;
    if (v12)
    {
      NSKeyValueObservation.Helper.invalidate()();
    }

    swift_unknownObjectWeakAssign();
  }

  uint64_t v14 = type metadata accessor for UnsafeContinuation();
  uint64_t v15 = swift_bridgeObjectRetain();
  uint64_t v16 = MEMORY[0x186E1BB2C](v15, v14);
  if (!v16) {
    goto LABEL_9;
  }
  uint64_t v17 = v16;
  if (v16 >= 1)
  {
    uint64_t v18 = 0LL;
    uint64_t v19 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 56LL);
    do
    {
      uint64_t v20 = *(void *)(v9 + 8 * v18++ + 32);
      v19(v7, 1LL, 1LL, v3);
      (*(void (**)(void, char *, uint64_t))(v5 + 32))(*(void *)(*(void *)(v20 + 64) + 40LL), v7, v4);
      swift_continuation_resume();
    }

    while (v17 != v18);
LABEL_9:
    swift_bridgeObjectRelease();

    swift_bridgeObjectRelease();
    return;
  }

  __break(1u);
}

uint64_t NSObject.KeyValueObservedChanges.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

uint64_t closure #1 in NSObject.KeyValueObservedChanges.send(_:)@<X0>( void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, void *a5@<X8>)
{
  uint64_t v44 = a2;
  uint64_t v8 = type metadata accessor for NSKeyValueObservedChange(0LL, a4, a3, a4);
  uint64_t v45 = *(void *)(v8 - 8);
  MEMORY[0x1895F8858](v8);
  uint64_t v10 = (char *)&v42 - v9;
  uint64_t v11 = type metadata accessor for Optional();
  uint64_t v12 = *(void *)(v11 - 8);
  MEMORY[0x1895F8858](v11);
  uint64_t v14 = (char *)&v42 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __n128 v16 = MEMORY[0x1895F8858](v15);
  uint64_t v18 = (char *)&v42 - v17;
  if (!a1[1])
  {
    type metadata accessor for UnsafeContinuation();
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    return (*(uint64_t (**)(void *, uint64_t, uint64_t, uint64_t))(*(void *)(TupleTypeMetadata2 - 8) + 56LL))( a5,  1LL,  1LL,  TupleTypeMetadata2);
  }

  uint64_t v43 = a5;
  uint64_t v19 = *a1;
  if (MEMORY[0x186E1BB20](*a1, v8, v16) < 1)
  {
    uint64_t v32 = a1[2];
    uint64_t v33 = type metadata accessor for UnsafeContinuation();
    if (!MEMORY[0x186E1BB20](v32, v33))
    {
      (*(void (**)(char *, uint64_t, uint64_t))(v45 + 16))(v10, v44, v8);
      type metadata accessor for Array();
      Array._makeUniqueAndReserveCapacityIfNotUnique()();
      Array._reserveCapacityAssumingUniqueBuffer(oldCount:)(*(void *)(*a1 + 16LL));
      Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      uint64_t v41 = swift_getTupleTypeMetadata2();
      return (*(uint64_t (**)(void *, uint64_t, uint64_t, uint64_t))(*(void *)(v41 - 8) + 56LL))( v43,  1LL,  1LL,  v41);
    }

    uint64_t result = MEMORY[0x186E1BB2C](v32, v33);
    if (result)
    {
      uint64_t v34 = type metadata accessor for Array();
      MEMORY[0x186E20D4C](MEMORY[0x189618488], v34);
      uint64_t result = Collection.first.getter();
      uint64_t v35 = v46;
      if (v46)
      {
        MEMORY[0x186E20D4C](MEMORY[0x189618490], v34);
        RangeReplaceableCollection.removeFirst(_:)(1LL);
        uint64_t v36 = swift_getTupleTypeMetadata2();
        uint64_t v38 = v43;
        uint64_t v37 = v44;
        unint64_t v39 = (char *)v43 + *(int *)(v36 + 48);
        void *v43 = v35;
        (*(void (**)(char *, uint64_t, uint64_t))(v45 + 16))(v39, v37, v8);
        return (*(uint64_t (**)(void *, void, uint64_t, uint64_t))(*(void *)(v36 - 8) + 56LL))( v38,  0LL,  1LL,  v36);
      }

      goto LABEL_29;
    }

    goto LABEL_25;
  }

  uint64_t result = MEMORY[0x186E1BB20](v19, v8);
  if (__OFADD__(result, 1LL))
  {
    __break(1u);
    goto LABEL_22;
  }

  uint64_t v42 = v5;
  if (result + 1 < 8)
  {
LABEL_8:
    (*(void (**)(char *, uint64_t, uint64_t))(v45 + 16))(v10, v44, v8);
    uint64_t v22 = type metadata accessor for Array();
    Array._makeUniqueAndReserveCapacityIfNotUnique()();
    Array._reserveCapacityAssumingUniqueBuffer(oldCount:)(*(void *)(*a1 + 16LL));
    Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    uint64_t v23 = *a1;
    uint64_t v24 = a1[2];
    uint64_t v25 = type metadata accessor for UnsafeContinuation();
    if (MEMORY[0x186E1BB20](v24, v25) < 1)
    {
      uint64_t v40 = swift_getTupleTypeMetadata2();
      return (*(uint64_t (**)(void *, uint64_t, uint64_t, uint64_t))(*(void *)(v40 - 8) + 56LL))( v43,  1LL,  1LL,  v40);
    }

    uint64_t result = MEMORY[0x186E1BB2C](v24, v25);
    if (result)
    {
      uint64_t v26 = type metadata accessor for Array();
      MEMORY[0x186E20D4C](MEMORY[0x189618488], v26);
      uint64_t result = Collection.first.getter();
      uint64_t v27 = v46;
      if (!v46)
      {
LABEL_26:
        __break(1u);
LABEL_27:
        __break(1u);
        goto LABEL_28;
      }

      MEMORY[0x186E20D4C](MEMORY[0x189618490], v26);
      RangeReplaceableCollection.removeFirst(_:)(1LL);
      void *v43 = v27;
      uint64_t result = MEMORY[0x186E1BB2C](v23, v8);
      if (result)
      {
        MEMORY[0x186E20D4C](MEMORY[0x189618488], v22);
        Collection.first.getter();
        uint64_t v28 = v45;
        uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v45 + 48))(v14, 1LL, v8);
        if ((_DWORD)result != 1)
        {
          uint64_t v29 = swift_getTupleTypeMetadata2();
          uint64_t v30 = v43;
          (*(void (**)(char *, char *, uint64_t))(v28 + 32))((char *)v43 + *(int *)(v29 + 48), v14, v8);
          MEMORY[0x186E20D4C](MEMORY[0x189618490], v22);
          RangeReplaceableCollection.removeFirst(_:)(1LL);
          return (*(uint64_t (**)(void *, void, uint64_t, uint64_t))(*(void *)(v29 - 8) + 56LL))( v30,  0LL,  1LL,  v29);
        }

        goto LABEL_27;
      }

      goto LABEL_23;
    }

uint64_t closure #1 in closure #1 in NSObject.KeyValueObservedChanges.next()( void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = type metadata accessor for NSKeyValueObservedChange(255LL, a4, a3, a4);
  uint64_t v8 = type metadata accessor for Optional();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x1895F8858](v8);
  uint64_t v11 = (char *)v20 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __n128 v13 = MEMORY[0x1895F8858](v12);
  uint64_t v15 = (char *)v20 - v14;
  uint64_t v16 = *a1;
  if (MEMORY[0x186E1BB20](*a1, v7, v13) < 1)
  {
    v20[3] = a2;
    type metadata accessor for UnsafeContinuation();
    type metadata accessor for Array();
    Array._makeUniqueAndReserveCapacityIfNotUnique()();
    Array._reserveCapacityAssumingUniqueBuffer(oldCount:)(*(void *)(a1[2] + 16LL));
    return Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  }

  else
  {
    uint64_t result = MEMORY[0x186E1BB2C](v16, v7);
    if (result)
    {
      v20[0] = a2;
      v20[1] = v4;
      uint64_t v18 = type metadata accessor for Array();
      MEMORY[0x186E20D4C](MEMORY[0x189618488], v18);
      Collection.first.getter();
      uint64_t v19 = *(void *)(v7 - 8);
      uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v19 + 48))(v11, 1LL, v7);
      if ((_DWORD)result != 1)
      {
        (*(void (**)(char *, char *, uint64_t))(v19 + 32))(v15, v11, v7);
        MEMORY[0x186E20D4C](MEMORY[0x189618490], v18);
        RangeReplaceableCollection.removeFirst(_:)(1LL);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v19 + 56))(v15, 0LL, 1LL, v7);
        (*(void (**)(void, char *, uint64_t))(v9 + 32))( *(void *)(*(void *)(v20[0] + 64LL) + 40LL),  v15,  v8);
        return swift_continuation_resume();
      }
    }

    else
    {
      __break(1u);
    }

    __break(1u);
  }

  return result;
}

uint64_t NSObject.KeyValueObservedChanges.makeAsyncIterator()@<X0>(void *a1@<X8>)
{
  *a1 = v1;
  return swift_retain();
}

void associated type witness table accessor for AsyncSequence.AsyncIterator : AsyncIteratorProtocol in NSObject.KeyValueObservedChanges<A, B>()
{
}

uint64_t protocol witness for AsyncSequence.makeAsyncIterator() in conformance NSObject.KeyValueObservedChanges<A, B>@<X0>( void *a1@<X8>)
{
  return swift_release();
}

uint64_t type metadata completion function for NSObject.KeyValueObservedChanges()
{
  return swift_initClassMetadata2();
}

uint64_t method lookup function for NSObject.KeyValueObservedChanges()
{
  return swift_lookUpClassMethod();
}

uint64_t type metadata accessor for NSObject.KeyValueObservedChanges.Iterator( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata( a1,  a2,  a3,  a4,  (uint64_t)&nominal type descriptor for NSObject.KeyValueObservedChanges.Iterator);
}

uint64_t destroy for NSObject.KeyValueObservedChanges.State(uint64_t a1)
{
  return swift_bridgeObjectRelease();
}

void *initializeBufferWithCopyOfBuffer for NSObject.KeyValueObservedChanges.State(void *a1, void *a2)
{
  uint64_t v3 = (void *)a2[1];
  *a1 = *a2;
  a1[1] = v3;
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  id v4 = v3;
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for NSObject.KeyValueObservedChanges.State(void *a1, void *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  id v4 = (void *)a1[1];
  uint64_t v5 = (void *)a2[1];
  a1[1] = v5;
  id v6 = v5;

  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for NSObject.KeyValueObservedChanges.State(uint64_t a1, uint64_t a2)
{
  id v4 = *(void **)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;

  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t type metadata accessor for NSObject.KeyValueObservedChanges.State( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata( a1,  a2,  a3,  a4,  (uint64_t)&nominal type descriptor for NSObject.KeyValueObservedChanges.State);
}

uint64_t sub_1834F9C74()
{
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in closure #2 in NSObject.KeyValueObservedChanges.Iterator.next()()
{
  uint64_t v2 = *(void *)(v0 + 48);
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v3;
  *uint64_t v3 = v1;
  v3[1] = partial apply for closure #1 in closure #1 in NSURLSession.AsyncBytes.Iterator.init(storage:);
  v3[2] = v2;
  return swift_task_switch();
}

uint64_t outlined destroy of TaskPriority?(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

uint64_t outlined init with copy of TaskPriority?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
  return a2;
}

uint64_t _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5(uint64_t a1, int *a2)
{
  id v6 = (uint64_t (*)(uint64_t))((char *)a2 + *a2);
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v4;
  *uint64_t v4 = v2;
  v4[1] = _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5TQ0_;
  return v6(a1);
}

uint64_t sub_1834F9DEC()
{
  return swift_deallocObject();
}

uint64_t _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5TA(uint64_t a1)
{
  uint64_t v4 = *(int **)(v1 + 16);
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  *uint64_t v5 = v2;
  v5[1] = partial apply for closure #1 in NSURLSession.data(from:delegate:);
  return ((uint64_t (*)(uint64_t, int *))((char *)&_sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5Tu
                                                 + _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5Tu))( a1,  v4);
}

uint64_t sub_1834F9E80()
{
  return swift_deallocObject();
}

uint64_t sub_1834F9EA4()
{
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in closure #1 in NSObject.KeyValueObservedChanges.init(object:keyPath:options:)( uint64_t a1, uint64_t a2)
{
  return closure #1 in closure #1 in NSObject.KeyValueObservedChanges.init(object:keyPath:options:)(a1, a2);
}

uint64_t sub_1834F9ED4()
{
  return swift_deallocObject();
}

ValueMetadata *type metadata accessor for AttributedString._InternalRun()
{
  return &type metadata for AttributedString._InternalRun;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance AttributedString._InternalRun( void *a1, void *a2)
{
  if (*a1 == *a2 && (v2 = a2[2], uint64_t v3 = a1[2], (specialized static Dictionary<>.== infix(_:_:)(a1[1], a2[1]) & 1) != 0)) {
    return specialized static Set.== infix(_:_:)(v3, v2);
  }
  else {
    return 0LL;
  }
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance AttributedString._InternalRun()
{
  Swift::UInt v1 = *v0;
  uint64_t v2 = v0[1];
  uint64_t v3 = v0[2];
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  specialized Dictionary<>.hash(into:)((uint64_t)v5, v2);
  specialized Set.hash(into:)((uint64_t)v5, v3);
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance AttributedString._InternalRun(uint64_t a1)
{
  uint64_t v3 = v1[1];
  uint64_t v4 = v1[2];
  Hasher._combine(_:)(*v1);
  specialized Dictionary<>.hash(into:)(a1, v3);
  specialized Set.hash(into:)(a1, v4);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance AttributedString._InternalRun()
{
  Swift::UInt v1 = *v0;
  uint64_t v2 = v0[1];
  uint64_t v3 = v0[2];
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  specialized Dictionary<>.hash(into:)((uint64_t)v5, v2);
  specialized Set.hash(into:)((uint64_t)v5, v3);
  return Hasher._finalize()();
}

void protocol witness for RopeElement.summary.getter in conformance AttributedString._InternalRun( void *a1@<X8>)
{
  uint64_t v2 = *v1;
  *a1 = 1LL;
  a1[1] = v2;
}

void protocol witness for RopeElement.rebalance(nextNeighbor:) in conformance AttributedString._InternalRun()
{
}

void protocol witness for RopeElement.rebalance(prevNeighbor:) in conformance AttributedString._InternalRun()
{
}

uint64_t *protocol witness for RopeElement.split(at:) in conformance AttributedString._InternalRun@<X0>( uint64_t *result@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *result;
  if (*result < 0)
  {
    __break(1u);
  }

  else
  {
    uint64_t v4 = *v2 - v3;
    if (*v2 >= v3)
    {
      uint64_t v5 = v2[1];
      uint64_t v6 = v2[2];
      void *v2 = v3;
      *a2 = v4;
      a2[1] = v5;
      a2[2] = v6;
      swift_bridgeObjectRetain();
      return (uint64_t *)swift_bridgeObjectRetain();
    }
  }

  __break(1u);
  return result;
}

uint64_t protocol witness for static RopeSummary.maxNodeSize.getter in conformance AttributedString._InternalRun.Summary()
{
  return 15LL;
}

BOOL protocol witness for RopeSummary.isZero.getter in conformance AttributedString._InternalRun.Summary()
{
  return *v0 == 0LL;
}

void *protocol witness for RopeSummary.add(_:) in conformance AttributedString._InternalRun.Summary( void *result)
{
  if (__OFADD__(*v1, *result))
  {
    __break(1u);
  }

  else
  {
    uint64_t v2 = result[1];
    *v1 += *result;
    uint64_t v3 = v1[1];
    BOOL v4 = __OFADD__(v3, v2);
    uint64_t v5 = v3 + v2;
    if (!v4)
    {
      v1[1] = v5;
      return result;
    }
  }

  __break(1u);
  return result;
}

void *protocol witness for RopeSummary.subtract(_:) in conformance AttributedString._InternalRun.Summary( void *result)
{
  if (__OFSUB__(*v1, *result))
  {
    __break(1u);
  }

  else
  {
    uint64_t v2 = result[1];
    *v1 -= *result;
    uint64_t v3 = v1[1];
    BOOL v4 = __OFSUB__(v3, v2);
    uint64_t v5 = v3 - v2;
    if (!v4)
    {
      v1[1] = v5;
      return result;
    }
  }

  __break(1u);
  return result;
}

unint64_t instantiation function for generic protocol witness table for AttributedString._InternalRun.Summary( uint64_t a1)
{
  unint64_t result = lazy protocol witness table accessor for type AttributedString._InternalRun.Summary and conformance AttributedString._InternalRun.Summary();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t lazy protocol witness table accessor for type AttributedString._InternalRun.Summary and conformance AttributedString._InternalRun.Summary()
{
  unint64_t result = lazy protocol witness table cache variable for type AttributedString._InternalRun.Summary and conformance AttributedString._InternalRun.Summary;
  if (!lazy protocol witness table cache variable for type AttributedString._InternalRun.Summary and conformance AttributedString._InternalRun.Summary)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for AttributedString._InternalRun.Summary,  &type metadata for AttributedString._InternalRun.Summary);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type AttributedString._InternalRun.Summary and conformance AttributedString._InternalRun.Summary);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type AttributedString._InternalRun.Summary and conformance AttributedString._InternalRun.Summary;
  if (!lazy protocol witness table cache variable for type AttributedString._InternalRun.Summary and conformance AttributedString._InternalRun.Summary)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for AttributedString._InternalRun.Summary,  &type metadata for AttributedString._InternalRun.Summary);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type AttributedString._InternalRun.Summary and conformance AttributedString._InternalRun.Summary);
  }

  return result;
}

unint64_t lazy protocol witness table accessor for type AttributedString._InternalRun and conformance AttributedString._InternalRun()
{
  unint64_t result = lazy protocol witness table cache variable for type AttributedString._InternalRun and conformance AttributedString._InternalRun;
  if (!lazy protocol witness table cache variable for type AttributedString._InternalRun and conformance AttributedString._InternalRun)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for AttributedString._InternalRun,  &type metadata for AttributedString._InternalRun);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type AttributedString._InternalRun and conformance AttributedString._InternalRun);
  }

  return result;
}

ValueMetadata *type metadata accessor for AttributedString._InternalRun.Summary()
{
  return &type metadata for AttributedString._InternalRun.Summary;
}

void one-time initialization function for recognizedEnglishPronouns()
{
  recognizedEnglishPronouns._rawValue = &outlined read-only object #0 of one-time initialization function for recognizedEnglishPronouns;
}

double one-time initialization function for recognizedNominativePronouns()
{
  uint64_t v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_1837C2F30;
  Swift::String v1 = String.lowercased()();
  *(void *)(v0 + 32) = 29541LL;
  *(void *)(v0 + 40) = 0xE200000000000000LL;
  *(Swift::String *)(v0 + 48) = v1;
  *(void *)(v0 + 64) = 1634495589LL;
  *(void *)(v0 + 72) = 0xE400000000000000LL;
  *(_OWORD *)(v0 + 80) = 0u;
  *(_OWORD *)(v0 + 96) = 0u;
  *(_OWORD *)(v0 + 112) = 0u;
  *(_OWORD *)(v0 + 128) = 0u;
  *(_OWORD *)(v0 + 144) = 0u;
  *(_OWORD *)(v0 + 160) = 0u;
  *(void *)(v0 + 176) = 1LL;
  Swift::String v2 = String.lowercased()();
  *(void *)(v0 + 184) = 29541LL;
  *(void *)(v0 + 192) = 0xE200000000000000LL;
  *(Swift::String *)(v0 + 200) = v2;
  *(void *)(v0 + 216) = 7121347LL;
  *(void *)(v0 + 224) = 0xA300000000000000LL;
  *(_OWORD *)(v0 + 248) = 0u;
  *(_OWORD *)(v0 + 232) = 0u;
  *(_OWORD *)(v0 + 264) = 0u;
  *(_OWORD *)(v0 + 280) = 0u;
  *(_OWORD *)(v0 + 296) = 0u;
  *(_OWORD *)(v0 + 312) = 0u;
  *(void *)(v0 + 328) = 2LL;
  Swift::String v3 = String.lowercased()();
  *(void *)(v0 + 336) = 29286LL;
  *(void *)(v0 + 344) = 0xE200000000000000LL;
  *(Swift::String *)(v0 + 352) = v3;
  *(void *)(v0 + 368) = 1701604453LL;
  *(void *)(v0 + 376) = 0xE400000000000000LL;
  *(_OWORD *)(v0 + 384) = 0u;
  *(_OWORD *)(v0 + 400) = 0u;
  *(_OWORD *)(v0 + 416) = 0u;
  *(_OWORD *)(v0 + 432) = 0u;
  *(_OWORD *)(v0 + 448) = 0u;
  *(_OWORD *)(v0 + 464) = 0u;
  *(void *)(v0 + 480) = 1LL;
  Swift::String v4 = String.lowercased()();
  *(void *)(v0 + 488) = 29286LL;
  *(void *)(v0 + 496) = 0xE200000000000000LL;
  *(Swift::String *)(v0 + 504) = v4;
  *(void *)(v0 + 520) = 27753LL;
  *(void *)(v0 + 528) = 0xE200000000000000LL;
  *(_OWORD *)(v0 + 536) = 0u;
  *(_OWORD *)(v0 + 552) = 0u;
  *(_OWORD *)(v0 + 568) = 0u;
  *(_OWORD *)(v0 + 584) = 0u;
  *(_OWORD *)(v0 + 600) = 0u;
  *(_OWORD *)(v0 + 616) = 0u;
  *(void *)(v0 + 632) = 2LL;
  Swift::String v5 = String.lowercased()();
  *(void *)(v0 + 640) = 29801LL;
  *(void *)(v0 + 648) = 0xE200000000000000LL;
  *(Swift::String *)(v0 + 656) = v5;
  *(void *)(v0 + 672) = 6907244LL;
  *(void *)(v0 + 680) = 0xE300000000000000LL;
  *(_OWORD *)(v0 + 688) = 0u;
  *(_OWORD *)(v0 + 704) = 0u;
  *(_OWORD *)(v0 + 720) = 0u;
  *(_OWORD *)(v0 + 736) = 0u;
  *(_OWORD *)(v0 + 752) = 0u;
  *(_OWORD *)(v0 + 768) = 0u;
  *(void *)(v0 + 784) = 1LL;
  Swift::String v6 = String.lowercased()();
  *(void *)(v0 + 792) = 29801LL;
  *(void *)(v0 + 800) = 0xE200000000000000LL;
  *(Swift::String *)(v0 + 808) = v6;
  *(void *)(v0 + 824) = 6911340LL;
  *(void *)(v0 + 832) = 0xE300000000000000LL;
  *(_OWORD *)(v0 + 840) = 0u;
  *(_OWORD *)(v0 + 856) = 0u;
  *(_OWORD *)(v0 + 872) = 0u;
  *(_OWORD *)(v0 + 888) = 0u;
  *(_OWORD *)(v0 + 904) = 0u;
  *(_OWORD *)(v0 + 920) = 0u;
  *(void *)(v0 + 936) = 2LL;
  Swift::String v7 = String.lowercased()();
  *(void *)(v0 + 944) = 29808LL;
  *(void *)(v0 + 952) = 0xE200000000000000LL;
  *(Swift::String *)(v0 + 960) = v7;
  *(void *)(v0 + 976) = 6384741LL;
  *(void *)(v0 + 984) = 0xE300000000000000LL;
  *(_OWORD *)(v0 + 992) = 0u;
  *(_OWORD *)(v0 + 1008) = 0u;
  *(_OWORD *)(v0 + 1024) = 0u;
  *(_OWORD *)(v0 + 1040) = 0u;
  *(_OWORD *)(v0 + 1056) = 0u;
  *(_OWORD *)(v0 + 1072) = 0u;
  *(void *)(v0 + 1088) = 1LL;
  Swift::String v8 = String.lowercased()();
  *(void *)(v0 + 1096) = 29808LL;
  *(void *)(v0 + 1104) = 0xE200000000000000LL;
  *(Swift::String *)(v0 + 1112) = v8;
  *(void *)(v0 + 1128) = 6646885LL;
  *(void *)(v0 + 1136) = 0xE300000000000000LL;
  *(_OWORD *)(v0 + 1144) = 0u;
  *(_OWORD *)(v0 + 1160) = 0u;
  *(_OWORD *)(v0 + 1176) = 0u;
  *(_OWORD *)(v0 + 1192) = 0u;
  *(_OWORD *)(v0 + 1208) = 0u;
  *(_OWORD *)(v0 + 1224) = 0u;
  *(void *)(v0 + 1240) = 2LL;
  Swift::String v9 = String.lowercased()();
  *(void *)(v0 + 1248) = 29281LL;
  *(void *)(v0 + 1256) = 0xE200000000000000LL;
  *(Swift::String *)(v0 + 1264) = v9;
  *(void *)(v0 + 1280) = 2329511897LL;
  *(void *)(v0 + 1288) = 0xA400000000000000LL;
  *(_OWORD *)(v0 + 1296) = 0u;
  *(_OWORD *)(v0 + 1312) = 0u;
  *(_OWORD *)(v0 + 1328) = 0u;
  *(_OWORD *)(v0 + 1344) = 0u;
  *(_OWORD *)(v0 + 1360) = 0u;
  *(_OWORD *)(v0 + 1376) = 0u;
  *(void *)(v0 + 1392) = 1LL;
  Swift::String v10 = String.lowercased()();
  *(void *)(v0 + 1400) = 29281LL;
  *(void *)(v0 + 1408) = 0xE200000000000000LL;
  *(Swift::String *)(v0 + 1416) = v10;
  *(void *)(v0 + 1432) = 2295957465LL;
  *(void *)(v0 + 1440) = 0xA400000000000000LL;
  double result = 0.0;
  *(_OWORD *)(v0 + 1448) = 0u;
  *(_OWORD *)(v0 + 1464) = 0u;
  *(_OWORD *)(v0 + 1480) = 0u;
  *(_OWORD *)(v0 + 1496) = 0u;
  *(_OWORD *)(v0 + 1512) = 0u;
  *(_OWORD *)(v0 + 1528) = 0u;
  *(void *)(v0 + 1544) = 2LL;
  recognizedNominativePronouns._rawValue = (void *)v0;
  return result;
}

uint64_t TermOfAddress.extrapolatingEnglishPronouns()@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v3 = *v1;
  uint64_t v2 = v1[1];
  uint64_t v5 = v1[2];
  uint64_t v4 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = v1[5];
  uint64_t v9 = v1[6];
  uint64_t v8 = v1[7];
  uint64_t v10 = v1[8];
  uint64_t v11 = v1[9];
  uint64_t v12 = v1[10];
  uint64_t v13 = v1[11];
  unint64_t v14 = v1[12];
  uint64_t v109 = v5;
  uint64_t v110 = v9;
  uint64_t v113 = v7;
  uint64_t v115 = v4;
  uint64_t v116 = v6;
  uint64_t v108 = v2;
  if (v14 >= 4)
  {
    uint64_t v22 = v1[1];
    uint64_t v98 = v12;
    outlined copy of TermOfAddress._TermOfAddress(v3, v2, v5, v4, v6, v7, v9, v8, v10, v11, v12, v13, v14);
    outlined consume of Locale.LanguageCode?(v3, v22);
    uint64_t v15 = v8;
    outlined consume of Locale.LanguageCode?(v116, v7);
    uint64_t v18 = v10;
    uint64_t v17 = v11;
    uint64_t v16 = v13;
    outlined consume of Locale.LanguageCode?(v10, v11);
    unint64_t v19 = v14;
    uint64_t v20 = v3;
    uint64_t v21 = v98;
  }

  else
  {
    uint64_t v15 = v1[7];
    uint64_t v16 = v13;
    uint64_t v17 = v11;
    uint64_t v18 = v10;
    unint64_t v19 = MEMORY[0x18961AFE8];
    uint64_t v20 = v3;
    uint64_t v21 = v12;
  }

  uint64_t v111 = v18;
  uint64_t v112 = v15;
  uint64_t v23 = *(void *)(v19 + 16);
  uint64_t v107 = v20;
  uint64_t v24 = v17;
  uint64_t v25 = v16;
  if (v23)
  {
    unint64_t v26 = v19 + 40;
    uint64_t v27 = v113;
    while (*(_BYTE *)(v26 + 24))
    {
      v26 += 64LL;
      if (!--v23)
      {
        swift_bridgeObjectRelease();
        uint64_t v119 = 0LL;
        uint64_t v130 = 0LL;
        goto LABEL_11;
      }
    }

    uint64_t v119 = *(void *)(v26 - 8);
    uint64_t v28 = v21;
    uint64_t v29 = *(void *)v26;
    swift_bridgeObjectRetain();
    uint64_t v130 = v29;
    uint64_t v21 = v28;
    swift_bridgeObjectRetain();
    uint64_t v27 = v113;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }

  else
  {
    swift_bridgeObjectRelease();
    uint64_t v119 = 0LL;
    uint64_t v130 = 0LL;
    uint64_t v27 = v113;
  }

uint64_t TermOfAddress.extrapolatingFromNominativePronouns()@<X0>(void *a1@<X8>)
{
  uint64_t v136 = *MEMORY[0x1895F89C0];
  uint64_t v4 = *v1;
  uint64_t v3 = v1[1];
  uint64_t v5 = v1[2];
  uint64_t v6 = v1[3];
  uint64_t v7 = v1[4];
  uint64_t v96 = v1[5];
  uint64_t v8 = v1[6];
  uint64_t v9 = v1[7];
  uint64_t v10 = v1[8];
  uint64_t v11 = v1[9];
  uint64_t v13 = v1[10];
  uint64_t v12 = (void *)v1[11];
  unint64_t v14 = v1[12];
  uint64_t v89 = v6;
  uint64_t v99 = v10;
  uint64_t v97 = v11;
  uint64_t v98 = v12;
  uint64_t v90 = v4;
  uint64_t v87 = v3;
  uint64_t v91 = v5;
  uint64_t v94 = v7;
  uint64_t v95 = v8;
  uint64_t v93 = (void *)v9;
  if (v14 >= 4)
  {
    uint64_t v19 = v3;
    outlined copy of TermOfAddress._TermOfAddress(v4, v3, v5, v6, v7, v96, v8, v9, v10, v11, v13, (uint64_t)v12, v14);
    outlined consume of Locale.LanguageCode?(v4, v19);
    uint64_t v18 = v94;
    outlined consume of Locale.LanguageCode?(v94, v96);
    outlined consume of Locale.LanguageCode?(v10, v11);
    unint64_t v15 = v14;
    uint64_t v16 = v87;
    uint64_t v17 = v91;
  }

  else
  {
    unint64_t v15 = MEMORY[0x18961AFE8];
    uint64_t v16 = v3;
    uint64_t v17 = v5;
    uint64_t v18 = v7;
  }

  uint64_t v20 = *(void *)(v15 + 16);
  unint64_t v92 = v14;
  uint64_t v88 = v13;
  if (v20)
  {
    unint64_t v21 = v15 + 40;
    while (*(_BYTE *)(v21 + 24))
    {
      v21 += 64LL;
      if (!--v20) {
        goto LABEL_8;
      }
    }

    uint64_t v22 = *(void *)v21;
    uint64_t v100 = *(void *)(v21 - 8);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v16 = v87;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }

  else
  {
LABEL_8:
    swift_bridgeObjectRelease();
    uint64_t v100 = 0LL;
    uint64_t v22 = 0LL;
  }

  if (one-time initialization token for recognizedNominativePronouns != -1) {
    swift_once();
  }
  rawValue = recognizedNominativePronouns._rawValue;
  uint64_t v24 = *((void *)recognizedNominativePronouns._rawValue + 2);
  if (!v24)
  {
    swift_bridgeObjectRelease();
    uint64_t v68 = v97;
    uint64_t v67 = (uint64_t)v93;
LABEL_43:
    uint64_t v69 = v90;
    *a1 = v90;
    a1[1] = v16;
    uint64_t v70 = v89;
    a1[2] = v17;
    a1[3] = v70;
    uint64_t v71 = v96;
    a1[4] = v18;
    a1[5] = v71;
    uint64_t v72 = v95;
    a1[6] = v95;
    a1[7] = v67;
    uint64_t v73 = v99;
    a1[8] = v99;
    a1[9] = v68;
    uint64_t v74 = v88;
    uint64_t v75 = (uint64_t)v98;
    a1[10] = v88;
    a1[11] = v75;
    unint64_t v76 = v92;
    a1[12] = v92;
    return outlined copy of TermOfAddress._TermOfAddress( v69,  v16,  v17,  v70,  v18,  v71,  v72,  v67,  v73,  v68,  v74,  v75,  v76);
  }

  uint64_t v103 = v22;
  __int128 v86 = a1;
  swift_bridgeObjectRetain_n();
  __int128 v25 = rawValue[9];
  __int128 v132 = rawValue[8];
  __int128 v26 = rawValue[10];
  __int128 v133 = v25;
  __int128 v134 = v26;
  unint64_t v135 = *((void *)rawValue + 22);
  __int128 v27 = rawValue[5];
  __int128 v128 = rawValue[4];
  __int128 v129 = v27;
  __int128 v28 = rawValue[7];
  __int128 v130 = rawValue[6];
  __int128 v131 = v28;
  __int128 v29 = rawValue[3];
  __int128 v126 = rawValue[2];
  __int128 v127 = v29;
  uint64_t v116 = v24 - 1;
  uint64_t v115 = 184LL;
  uint64_t v101 = rawValue;
  while (1)
  {
    uint64_t v122 = *((void *)&v126 + 1);
    uint64_t v102 = v126;
    uint64_t v121 = (void *)*((void *)&v127 + 1);
    uint64_t v104 = v127;
    uint64_t v114 = v128;
    uint64_t v30 = v129;
    uint64_t v117 = *((void *)&v128 + 1);
    uint64_t v118 = *((void *)&v129 + 1);
    uint64_t v31 = *((void *)&v130 + 1);
    uint64_t v119 = v130;
    uint64_t v32 = *((void *)&v131 + 1);
    uint64_t v120 = v131;
    __int128 v33 = v132;
    __int128 v34 = v133;
    __int128 v35 = v134;
    unint64_t v36 = v135;
    outlined retain of (language: Locale.LanguageCode, nominative: String, predefinedTermOfAddress: TermOfAddress)((uint64_t)&v126);
    outlined retain of (language: Locale.LanguageCode, nominative: String, predefinedTermOfAddress: TermOfAddress)((uint64_t)&v126);
    unint64_t v105 = v36;
    uint64_t v106 = *((void *)&v35 + 1);
    uint64_t v107 = v35;
    uint64_t v108 = *((void *)&v34 + 1);
    uint64_t v109 = v34;
    uint64_t v110 = v30;
    uint64_t v111 = v31;
    uint64_t v112 = v32;
    __int128 v113 = v33;
    outlined consume of TermOfAddress._TermOfAddress( v30,  v118,  v119,  v31,  v120,  v32,  v33,  *((uint64_t *)&v33 + 1),  v34,  *((uint64_t *)&v34 + 1),  v35,  *((uint64_t *)&v35 + 1),  v36);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (!v103)
    {
      swift_bridgeObjectRelease();
      goto LABEL_39;
    }

    if (v100 == v114 && v103 == v117)
    {
      swift_bridgeObjectRelease();
    }

    else
    {
      char v37 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if ((v37 & 1) == 0) {
        goto LABEL_39;
      }
    }

    if (v92 < 4)
    {
      outlined retain of (language: Locale.LanguageCode, nominative: String, predefinedTermOfAddress: TermOfAddress)((uint64_t)&v126);
LABEL_38:
      uint64_t v59 = v122;
      outlined consume of TermOfAddress._TermOfAddress( v110,  v118,  v119,  v111,  v120,  v112,  v113,  *((uint64_t *)&v113 + 1),  v109,  v108,  v107,  v106,  v105);
      swift_bridgeObjectRelease();
      outlined consume of Locale.LanguageCode?(0LL, 0LL);
      outlined consume of Locale.LanguageCode?(v102, v59);
      goto LABEL_39;
    }

    uint64_t v38 = v90;
    uint64_t v39 = v87;
    uint64_t countAndFlagsBits = v91;
    uint64_t v41 = v89;
    uint64_t v42 = v96;
    uint64_t v43 = v94;
    outlined copy of TermOfAddress._TermOfAddress( v90,  v87,  v91,  v89,  v94,  v96,  v95,  (uint64_t)v93,  v99,  v97,  v88,  (uint64_t)v98,  v92);
    outlined retain of (language: Locale.LanguageCode, nominative: String, predefinedTermOfAddress: TermOfAddress)((uint64_t)&v126);
    uint64_t v44 = swift_bridgeObjectRelease();
    if (v39)
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      outlined consume of Locale.LanguageCode?(v38, v39);
      outlined consume of Locale.LanguageCode?(v43, v42);
      outlined consume of Locale.LanguageCode?(v99, v97);
      outlined consume of TermOfAddress._TermOfAddress( v110,  v118,  v119,  v111,  v120,  v112,  v113,  *((uint64_t *)&v113 + 1),  v109,  v108,  v107,  v106,  v105);
      unint64_t object = (void *)v41;
      uint64_t v46 = v38;
    }

    else
    {
      MEMORY[0x1895F8858](v44);
      int v125 = 0;
      uint64_t v123 = 0LL;
      unint64_t v124 = 0xE000000000000000LL;
      outlined copy of Locale.LanguageCode?(v38, 0LL);
      if (v42)
      {
        uint64_t v48 = v95;
        uint64_t v49 = v93;
        outlined copy of Locale.LanguageCode?(v94, v96);
        uint64_t v50 = v97;
        outlined copy of Locale.LanguageCode?(v99, v97);
        v51._uint64_t countAndFlagsBits = 45LL;
        v51._unint64_t object = (void *)0xE100000000000000LL;
        String.append(_:)(v51);
        v52._uint64_t countAndFlagsBits = v48;
        v52._unint64_t object = v49;
        String.append(_:)(v52);
      }

      else
      {
        outlined copy of Locale.LanguageCode?(v94, 0LL);
        uint64_t v50 = v97;
        outlined copy of Locale.LanguageCode?(v99, v97);
      }

      if (v50)
      {
        v53._uint64_t countAndFlagsBits = 95LL;
        v53._unint64_t object = (void *)0xE100000000000000LL;
        String.append(_:)(v53);
        v54._uint64_t countAndFlagsBits = v88;
        v54._unint64_t object = v98;
        String.append(_:)(v54);
      }

      outlined consume of Locale.LanguageCode?(v90, 0LL);
      outlined consume of Locale.LanguageCode?(v94, v96);
      outlined consume of Locale.LanguageCode?(v99, v50);
      String.utf8CString.getter();
      swift_bridgeObjectRelease();
      int Language = uloc_getLanguage();
      swift_release();
      if (v125 > 0 || Language <= 0 || (v85[Language] = 0, uint64_t v56 = MEMORY[0x186E1B634](v85), !v57))
      {
        outlined consume of Locale.LanguageCode?(v90, 0LL);
        outlined consume of Locale.LanguageCode?(v94, v96);
        outlined consume of Locale.LanguageCode?(v99, v97);
        goto LABEL_38;
      }

      uint64_t v46 = v56;
      uint64_t v39 = v57;
      Swift::String v58 = String.lowercased()();
      uint64_t countAndFlagsBits = v58._countAndFlagsBits;
      unint64_t object = v58._object;
      outlined consume of Locale.LanguageCode?(v90, 0LL);
      outlined consume of Locale.LanguageCode?(v94, v96);
      outlined consume of Locale.LanguageCode?(v99, v97);
      outlined consume of TermOfAddress._TermOfAddress( v110,  v118,  v119,  v111,  v120,  v112,  v113,  *((uint64_t *)&v113 + 1),  v109,  v108,  v107,  v106,  v105);
    }

    swift_bridgeObjectRelease();
    if (countAndFlagsBits == v104 && object == v121) {
      break;
    }
    char v47 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    outlined consume of Locale.LanguageCode?(v46, v39);
    if ((v47 & 1) != 0) {
      goto LABEL_45;
    }
LABEL_39:
    outlined release of (language: Locale.LanguageCode, nominative: String, predefinedTermOfAddress: TermOfAddress)((uint64_t)&v126);
    if (!v116)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease_n();
      a1 = v86;
      uint64_t v16 = v87;
      uint64_t v17 = v91;
      uint64_t v18 = v94;
      uint64_t v67 = (uint64_t)v93;
      uint64_t v68 = v97;
      goto LABEL_43;
    }

    __int128 v60 = *(_OWORD *)((char *)v101 + v115 + 16);
    __int128 v126 = *(_OWORD *)((char *)v101 + v115);
    __int128 v127 = v60;
    __int128 v61 = *(_OWORD *)((char *)v101 + v115 + 32);
    __int128 v62 = *(_OWORD *)((char *)v101 + v115 + 48);
    __int128 v63 = *(_OWORD *)((char *)v101 + v115 + 80);
    __int128 v130 = *(_OWORD *)((char *)v101 + v115 + 64);
    __int128 v131 = v63;
    __int128 v128 = v61;
    __int128 v129 = v62;
    __int128 v64 = *(_OWORD *)((char *)v101 + v115 + 96);
    __int128 v65 = *(_OWORD *)((char *)v101 + v115 + 112);
    __int128 v66 = *(_OWORD *)((char *)v101 + v115 + 128);
    unint64_t v135 = *(void *)((char *)v101 + v115 + 144);
    __int128 v133 = v65;
    __int128 v134 = v66;
    __int128 v132 = v64;
    v115 += 152LL;
    --v116;
  }

  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined consume of Locale.LanguageCode?(v46, v39);
LABEL_45:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease_n();
  char v78 = v86;
  uint64_t v79 = v118;
  *__int128 v86 = v110;
  v78[1] = v79;
  uint64_t v80 = v111;
  v78[2] = v119;
  v78[3] = v80;
  uint64_t v81 = v112;
  v78[4] = v120;
  v78[5] = v81;
  uint64_t v82 = *((void *)&v113 + 1);
  v78[6] = v113;
  v78[7] = v82;
  uint64_t v83 = v108;
  v78[8] = v109;
  v78[9] = v83;
  uint64_t v84 = v106;
  v78[10] = v107;
  v78[11] = v84;
  v78[12] = v105;
  return result;
}

uint64_t TermOfAddress.withExtrapolatedPronouns()@<X0>(uint64_t a1@<X8>)
{
  __int128 v3 = *v1;
  __int128 v4 = v1[1];
  __int128 v5 = v1[2];
  __int128 v6 = v1[3];
  __int128 v7 = v1[4];
  __int128 v8 = v1[5];
  unint64_t v9 = *((void *)v1 + 12);
  __int128 v27 = v4;
  __int128 v28 = v3;
  __int128 v31 = v6;
  __int128 v32 = v5;
  __int128 v29 = v8;
  __int128 v30 = v7;
  if (v9 >= 4)
  {
    v35[0] = v3;
    v35[1] = v4;
    v35[2] = v5;
    v35[3] = v6;
    v35[4] = v7;
    v35[5] = v8;
    uint64_t v18 = *((void *)&v3 + 1);
    uint64_t v17 = v3;
    __int128 v19 = v4;
    outlined copy of Locale.LanguageCode?(v3, *((uint64_t *)&v3 + 1));
    outlined copy of Locale.LanguageCode?(v32, *((uint64_t *)&v32 + 1));
    outlined copy of Locale.LanguageCode?(v30, *((uint64_t *)&v30 + 1));
    unsigned __int128 v26 = __PAIR128__(v18, v17);
    unint64_t object = (void *)*((void *)&v19 + 1);
    uint64_t countAndFlagsBits = v19;
    if (!v18)
    {
      outlined copy of Locale.LanguageCode?(v17, 0LL);
      outlined copy of Locale.LanguageCode?(v32, *((uint64_t *)&v32 + 1));
      outlined copy of Locale.LanguageCode?(v30, *((uint64_t *)&v30 + 1));
      *(void *)&unsigned __int128 v26 = specialized _withFixedCharBuffer(size:_:)(257LL, (uint64_t *)v35);
      *((void *)&v26 + 1) = v20;
      outlined consume of Locale.LanguageCode?(v17, 0LL);
      outlined consume of Locale.LanguageCode?(v32, *((uint64_t *)&v32 + 1));
      outlined consume of Locale.LanguageCode?(v30, *((uint64_t *)&v30 + 1));
      if (*((void *)&v26 + 1))
      {
        Swift::String v21 = String.lowercased()();
        unint64_t object = v21._object;
        uint64_t countAndFlagsBits = v21._countAndFlagsBits;
      }

      else
      {
        unsigned __int128 v26 = 0uLL;
        unint64_t object = 0LL;
        uint64_t countAndFlagsBits = 0LL;
      }

      uint64_t v18 = 0LL;
    }

    outlined copy of Locale.LanguageCode?(v17, v18);
    outlined consume of Locale.LanguageCode?(v17, v18);
    outlined consume of Locale.LanguageCode?(v32, *((uint64_t *)&v32 + 1));
    outlined consume of Locale.LanguageCode?(v30, *((uint64_t *)&v30 + 1));
    Swift::String v22 = String.lowercased()();
    if (*((void *)&v26 + 1))
    {
      if (v22._countAndFlagsBits == countAndFlagsBits && object == v22._object)
      {
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        outlined consume of Locale.LanguageCode?(v26, *((uint64_t *)&v26 + 1));
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease_n();
LABEL_14:
        uint64_t result = TermOfAddress.extrapolatingEnglishPronouns()((uint64_t *)v33);
LABEL_16:
        __int128 v15 = v33[0];
        __int128 v16 = v33[1];
        __int128 v13 = v33[2];
        __int128 v14 = v33[3];
        __int128 v11 = v33[4];
        __int128 v12 = v33[5];
        unint64_t v9 = v34;
        goto LABEL_17;
      }

      char v23 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      outlined consume of Locale.LanguageCode?(v26, *((uint64_t *)&v26 + 1));
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease_n();
      if ((v23 & 1) != 0) {
        goto LABEL_14;
      }
    }

    else
    {
      outlined consume of Locale.LanguageCode?(28261LL, 0xE200000000000000LL);
      outlined consume of Locale.LanguageCode?(v26, 0LL);
    }

    uint64_t result = TermOfAddress.extrapolatingFromNominativePronouns()(v33);
    goto LABEL_16;
  }

  uint64_t result = outlined copy of TermOfAddress._TermOfAddress( v3,  *((uint64_t *)&v3 + 1),  v4,  *((uint64_t *)&v4 + 1),  v5,  *((uint64_t *)&v5 + 1),  v6,  *((uint64_t *)&v6 + 1),  v7,  *((uint64_t *)&v7 + 1),  v8,  *((uint64_t *)&v8 + 1),  v9);
  __int128 v12 = v29;
  __int128 v11 = v30;
  __int128 v14 = v31;
  __int128 v13 = v32;
  __int128 v16 = v27;
  __int128 v15 = v28;
LABEL_17:
  *(_OWORD *)a1 = v15;
  *(_OWORD *)(a1 + 16) = v16;
  *(_OWORD *)(a1 + 32) = v13;
  *(_OWORD *)(a1 + 48) = v14;
  *(_OWORD *)(a1 + 64) = v11;
  *(_OWORD *)(a1 + 80) = v12;
  *(void *)(a1 + 96) = v9;
  return result;
}

Swift::Bool __swiftcall NSTermOfAddress.containsPronoun(_:grammemes:)(Swift::String _, Swift::OpaquePointer grammemes)
{
  uint64_t object = (uint64_t)_._object;
  uint64_t countAndFlagsBits = _._countAndFlagsBits;
  id v5 = objc_msgSend(v2, sel_pronouns);
  if (v5)
  {
    __int128 v6 = v5;
    type metadata accessor for __SwiftDeferredNSArray();
    swift_unknownObjectRetain();
    if (swift_dynamicCastClass())
    {
      swift_retain();
    }

    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<NSMorphologyPronoun>);
    uint64_t v78 = swift_dynamicCastClass();
    if (v78)
    {
    }

    else
    {
      swift_unknownObjectRelease();
      objc_msgSend(v6, sel_copy);
      type metadata accessor for NSMorphologyPronoun();
      unint64_t v7 = _bridgeCocoaArray<A>(_:)();

      swift_unknownObjectRelease();
      uint64_t v78 = v7;
      if (v7 >> 62) {
        goto LABEL_65;
      }
    }

    uint64_t v8 = *(void *)((v78 & 0xFFFFFFFFFFFFF8LL) + 0x10);
    while (v8)
    {
      uint64_t v9 = 0LL;
      unint64_t v76 = (char *)object;
      uint64_t v77 = MEMORY[0x18961AFC0] + 8LL;
      rawValue = grammemes._rawValue;
      uint64_t v79 = v8;
      while (1)
      {
        if ((v78 & 0xC000000000000001LL) != 0) {
          id v10 = (id)MEMORY[0x186E1C36C](v9, v78);
        }
        else {
          id v10 = *(id *)(v78 + 32 + 8 * v9);
        }
        __int128 v11 = v10;
        BOOL v12 = __OFADD__(v9++, 1LL);
        if (v12)
        {
          __break(1u);
LABEL_61:
          __break(1u);
LABEL_62:
          __break(1u);
          goto LABEL_63;
        }

        id v13 = objc_msgSend(v10, sel_pronoun);
        id v14 = static String._unconditionallyBridgeFromObjectiveC(_:)(v13);
        uint64_t v16 = v15;

        if (v14 == (id)countAndFlagsBits && v16 == object)
        {
          swift_bridgeObjectRelease();
        }

        else
        {
          char v18 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          if ((v18 & 1) == 0)
          {

            goto LABEL_10;
          }
        }

        id v19 = objc_msgSend(v11, sel__morphunConstraints);
        if (v77 == MEMORY[0x189617FA8]) {
          break;
        }
        swift_unknownObjectRetain();
        if (static Dictionary._bridgeFromObjectiveCAdoptingNativeStorageOf(_:)()) {
          goto LABEL_57;
        }
        id v46 = objc_msgSend(v19, sel_count);
        if (!v46) {
          goto LABEL_57;
        }
        uint64_t v47 = (uint64_t)v46;
        __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _DictionaryStorage<String, String>);
        uint64_t v48 = (void *)static _DictionaryStorage.allocate(capacity:)();
        uint64_t v49 = (char *)v48[6];
        uint64_t v50 = v48[7];
        swift_retain();
        uint64_t v51 = (uint64_t)specialized closure #2 in static Dictionary._forceBridgeFromObjectiveC(_:result:)( v49,  v50,  v19,  v47);
        if (v51 < 0 || v47 < v51) {
          goto LABEL_64;
        }
        v48[2] = v51;
        if (!v51) {
          goto LABEL_56;
        }
        uint64_t object = v51 - 1;
        grammemes._rawValue = v48 + 8;
        do
        {
          while (1)
          {
            Swift::String v53 = (uint64_t *)(v48[6] + 16 * object);
            uint64_t v54 = *v53;
            uint64_t v55 = v53[1];
            swift_bridgeObjectRetain();
            unint64_t v56 = specialized __RawDictionaryStorage.find<A>(_:)(v54, v55);
            LOBYTE(v54) = v57;
            swift_bridgeObjectRelease();
            if ((v54 & 1) == 0) {
              break;
            }
            swift_arrayDestroy();
            swift_arrayDestroy();
            uint64_t v58 = v48[2];
            BOOL v12 = __OFSUB__(v58, 1LL);
            uint64_t v59 = v58 - 1;
            if (v12) {
              goto LABEL_62;
            }
            v48[2] = v59;
LABEL_47:
            if (--object < 0) {
              goto LABEL_55;
            }
          }

          *(void *)((char *)grammemes._rawValue + ((v56 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v56;
          if (object < (uint64_t)v56)
          {
            uint64_t v52 = 16 * v56;
            *(_OWORD *)(v48[6] + v52) = *(_OWORD *)(v48[6] + 16 * object);
            *(_OWORD *)(v48[7] + v52) = *(_OWORD *)(v48[7] + 16 * object);
            goto LABEL_47;
          }

          if (v56 == object) {
            goto LABEL_47;
          }
          uint64_t v60 = v48[6];
          __int128 v61 = (uint64_t *)(v60 + 16 * v56);
          __int128 v62 = (uint64_t *)(v60 + 16 * object);
          uint64_t v63 = *v61;
          uint64_t v64 = v61[1];
          uint64_t v65 = v62[1];
          *__int128 v61 = *v62;
          v61[1] = v65;
          *__int128 v62 = v63;
          v62[1] = v64;
          uint64_t v66 = v48[7];
          uint64_t v67 = (uint64_t *)(v66 + 16 * v56);
          uint64_t v68 = (uint64_t *)(v66 + 16 * object);
          uint64_t v69 = *v67;
          uint64_t v70 = v67[1];
          uint64_t v71 = v68[1];
          uint64_t *v67 = *v68;
          v67[1] = v71;
          *uint64_t v68 = v69;
          v68[1] = v70;
        }

        while ((object & 0x8000000000000000LL) == 0);
LABEL_55:
        grammemes._rawValue = rawValue;
LABEL_56:
        swift_release();
LABEL_57:

        MEMORY[0x1895F8858](v72);
        char v73 = specialized Sequence.allSatisfy(_:)( (uint64_t)grammemes._rawValue,  partial apply for closure #1 in NSTermOfAddress.containsPronoun(_:grammemes:));
        swift_bridgeObjectRelease();

        if ((v73 & 1) != 0)
        {
          swift_bridgeObjectRelease();
          LOBYTE(v5) = 1;
          return (char)v5;
        }

        uint64_t object = (uint64_t)v76;
LABEL_10:
        if (v9 == v79) {
          goto LABEL_66;
        }
      }

      swift_bridgeObjectRelease();
      swift_unknownObjectRetain();
      if (static Dictionary._bridgeFromObjectiveCAdoptingNativeStorageOf(_:)()) {
        goto LABEL_57;
      }
      id v20 = objc_msgSend(v19, sel_count);
      if (!v20) {
        goto LABEL_57;
      }
      uint64_t v21 = (uint64_t)v20;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Any>);
      Swift::String v22 = (void *)static _DictionaryStorage.allocate(capacity:)();
      uint64_t v24 = (void *)v22[6];
      uint64_t v23 = v22[7];
      swift_retain();
      uint64_t v25 = (uint64_t)specialized closure #2 in static Dictionary._forceBridgeFromObjectiveC(_:result:)( v24,  v23,  v19,  v21);
      if ((v25 & 0x8000000000000000LL) == 0 && v21 >= v25)
      {
        v22[2] = v25;
        if (!v25) {
          goto LABEL_56;
        }
        grammemes._rawValue = (void *)(v25 - 1);
        uint64_t object = (uint64_t)(v22 + 8);
        while (1)
        {
          __int128 v30 = (uint64_t *)(v22[6] + 16 * (uint64_t)grammemes._rawValue);
          uint64_t v31 = *v30;
          uint64_t v32 = v30[1];
          swift_bridgeObjectRetain();
          unint64_t v33 = specialized __RawDictionaryStorage.find<A>(_:)(v31, v32);
          LOBYTE(v31) = v34;
          swift_bridgeObjectRelease();
          if ((v31 & 1) != 0) {
            break;
          }
          *(void *)(object + ((v33 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v33;
          if ((uint64_t)grammemes._rawValue < (uint64_t)v33)
          {
            *(_OWORD *)(v22[6] + 16 * v33) = *(_OWORD *)(v22[6] + 16 * (uint64_t)grammemes._rawValue);
            uint64_t v26 = v22[7];
            __int128 v27 = (_OWORD *)(v26 + 32 * (uint64_t)grammemes._rawValue);
            __int128 v28 = v27[1];
            __int128 v29 = (_OWORD *)(v26 + 32 * v33);
            _OWORD *v29 = *v27;
            v29[1] = v28;
LABEL_32:
            continue;
          }

          uint64_t v37 = v22[6];
          uint64_t v38 = (uint64_t *)(v37 + 16 * v33);
          uint64_t v39 = (uint64_t *)(v37 + 16 * (uint64_t)grammemes._rawValue);
          uint64_t v40 = *v38;
          uint64_t v41 = v38[1];
          uint64_t v42 = v39[1];
          uint64_t *v38 = *v39;
          v38[1] = v42;
          *uint64_t v39 = v40;
          v39[1] = v41;
          uint64_t v43 = v22[7];
          uint64_t v44 = (_OWORD *)(v43 + 32 * v33);
          uint64_t v45 = (_OWORD *)(v43 + 32 * (uint64_t)grammemes._rawValue);
          outlined init with take of Any(v44, v81);
          outlined init with take of Any(v45, v44);
          outlined init with take of Any(v81, v45);
        }

        swift_arrayDestroy();
        swift_arrayDestroy();
        uint64_t v35 = v22[2];
        BOOL v12 = __OFSUB__(v35, 1LL);
        uint64_t v36 = v35 - 1;
        if (v12) {
          goto LABEL_61;
        }
        v22[2] = v36;
        goto LABEL_32;
      }

uint64_t closure #1 in NSTermOfAddress.containsPronoun(_:grammemes:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (*(void *)(a5 + 16))
  {
    swift_bridgeObjectRetain();
    unint64_t v10 = specialized __RawDictionaryStorage.find<A>(_:)(a1, a2);
    if ((v11 & 1) != 0)
    {
      BOOL v12 = (uint64_t *)(*(void *)(a5 + 56) + 16 * v10);
      uint64_t v13 = *v12;
      uint64_t v14 = v12[1];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      if (v13 == a3 && v14 == a4) {
        char v16 = 1;
      }
      else {
        char v16 = _stringCompareWithSmolCheck(_:_:expecting:)();
      }
    }

    else
    {
      char v16 = 1;
    }

    swift_bridgeObjectRelease();
  }

  else
  {
    char v16 = 1;
  }

  return v16 & 1;
}

uint64_t outlined retain of (nominative: String, accusative: String, genitiveDependent: String, genitiveIndependent: String, reflexive: String, predefinedTermOfAddress: TermOfAddress?)( uint64_t a1)
{
  uint64_t v13 = *(void *)(a1 + 80);
  uint64_t v2 = *(void *)(a1 + 88);
  uint64_t v3 = *(void *)(a1 + 96);
  uint64_t v4 = *(void *)(a1 + 104);
  uint64_t v5 = *(void *)(a1 + 112);
  uint64_t v11 = *(void *)(a1 + 128);
  uint64_t v12 = *(void *)(a1 + 120);
  uint64_t v10 = *(void *)(a1 + 136);
  __int128 v8 = *(_OWORD *)(a1 + 160);
  __int128 v9 = *(_OWORD *)(a1 + 144);
  unint64_t v6 = *(void *)(a1 + 176);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  outlined copy of TermOfAddress?( v13,  v2,  v3,  v4,  v5,  v12,  v11,  v10,  v9,  *((uint64_t *)&v9 + 1),  v8,  *((uint64_t *)&v8 + 1),  v6);
  return a1;
}

uint64_t outlined release of (nominative: String, accusative: String, genitiveDependent: String, genitiveIndependent: String, reflexive: String, predefinedTermOfAddress: TermOfAddress?)( uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 88);
  uint64_t v13 = *(void *)(a1 + 80);
  uint64_t v3 = *(void *)(a1 + 96);
  uint64_t v4 = *(void *)(a1 + 104);
  uint64_t v5 = *(void *)(a1 + 112);
  uint64_t v11 = *(void *)(a1 + 128);
  uint64_t v12 = *(void *)(a1 + 120);
  uint64_t v10 = *(void *)(a1 + 136);
  __int128 v8 = *(_OWORD *)(a1 + 160);
  __int128 v9 = *(_OWORD *)(a1 + 144);
  unint64_t v6 = *(void *)(a1 + 176);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined consume of TermOfAddress?( v13,  v2,  v3,  v4,  v5,  v12,  v11,  v10,  v9,  *((uint64_t *)&v9 + 1),  v8,  *((uint64_t *)&v8 + 1),  v6);
  return a1;
}

uint64_t outlined retain of (language: Locale.LanguageCode, nominative: String, predefinedTermOfAddress: TermOfAddress)( uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 56);
  uint64_t v3 = *(void *)(a1 + 64);
  uint64_t v4 = *(void *)(a1 + 72);
  uint64_t v5 = *(void *)(a1 + 80);
  uint64_t v6 = *(void *)(a1 + 88);
  uint64_t v7 = *(void *)(a1 + 96);
  uint64_t v12 = *(void *)(a1 + 104);
  uint64_t v13 = *(void *)(a1 + 48);
  __int128 v10 = *(_OWORD *)(a1 + 128);
  __int128 v11 = *(_OWORD *)(a1 + 112);
  unint64_t v8 = *(void *)(a1 + 144);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  outlined copy of TermOfAddress._TermOfAddress( v13,  v2,  v3,  v4,  v5,  v6,  v7,  v12,  v11,  *((uint64_t *)&v11 + 1),  v10,  *((uint64_t *)&v10 + 1),  v8);
  return a1;
}

uint64_t outlined release of (language: Locale.LanguageCode, nominative: String, predefinedTermOfAddress: TermOfAddress)( uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 56);
  uint64_t v3 = *(void *)(a1 + 64);
  uint64_t v4 = *(void *)(a1 + 72);
  uint64_t v5 = *(void *)(a1 + 80);
  uint64_t v6 = *(void *)(a1 + 88);
  uint64_t v7 = *(void *)(a1 + 96);
  uint64_t v12 = *(void *)(a1 + 104);
  uint64_t v13 = *(void *)(a1 + 48);
  __int128 v10 = *(_OWORD *)(a1 + 128);
  __int128 v11 = *(_OWORD *)(a1 + 112);
  unint64_t v8 = *(void *)(a1 + 144);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined consume of TermOfAddress._TermOfAddress( v13,  v2,  v3,  v4,  v5,  v6,  v7,  v12,  v11,  *((uint64_t *)&v11 + 1),  v10,  *((uint64_t *)&v10 + 1),  v8);
  return a1;
}

unint64_t type metadata accessor for NSMorphologyPronoun()
{
  unint64_t result = lazy cache variable for type metadata for NSMorphologyPronoun;
  if (!lazy cache variable for type metadata for NSMorphologyPronoun)
  {
    objc_opt_self();
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for NSMorphologyPronoun);
  }

  return result;
}

uint64_t partial apply for closure #1 in NSTermOfAddress.containsPronoun(_:grammemes:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return closure #1 in NSTermOfAddress.containsPronoun(_:grammemes:)(a1, a2, a3, a4, *(void *)(v4 + 16));
}

uint64_t specialized Sequence.allSatisfy(_:)( uint64_t a1, uint64_t (*a2)(uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v4 = a1 + 64;
  uint64_t v5 = 1LL << *(_BYTE *)(a1 + 32);
  uint64_t v6 = -1LL;
  if (v5 < 64) {
    uint64_t v6 = ~(-1LL << v5);
  }
  unint64_t v7 = v6 & *(void *)(a1 + 64);
  int64_t v23 = (unint64_t)(v5 + 63) >> 6;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v9 = 0LL;
  while (1)
  {
    if (v7)
    {
      unint64_t v10 = __clz(__rbit64(v7));
      v7 &= v7 - 1;
      unint64_t v11 = v10 | (v9 << 6);
      goto LABEL_5;
    }

    int64_t v19 = v9 + 1;
    if (__OFADD__(v9, 1LL)) {
      break;
    }
    if (v19 >= v23) {
      goto LABEL_24;
    }
    unint64_t v20 = *(void *)(v4 + 8 * v19);
    ++v9;
    if (!v20)
    {
      int64_t v9 = v19 + 1;
      if (v19 + 1 >= v23) {
        goto LABEL_24;
      }
      unint64_t v20 = *(void *)(v4 + 8 * v9);
      if (!v20)
      {
        int64_t v9 = v19 + 2;
        if (v19 + 2 >= v23) {
          goto LABEL_24;
        }
        unint64_t v20 = *(void *)(v4 + 8 * v9);
        if (!v20)
        {
          int64_t v9 = v19 + 3;
          if (v19 + 3 >= v23) {
            goto LABEL_24;
          }
          unint64_t v20 = *(void *)(v4 + 8 * v9);
          if (!v20)
          {
            int64_t v21 = v19 + 4;
            if (v21 >= v23)
            {
LABEL_24:
              uint64_t v22 = 1LL;
              goto LABEL_25;
            }

            unint64_t v20 = *(void *)(v4 + 8 * v21);
            if (!v20)
            {
              while (1)
              {
                int64_t v9 = v21 + 1;
                if (__OFADD__(v21, 1LL)) {
                  goto LABEL_27;
                }
                if (v9 >= v23) {
                  goto LABEL_24;
                }
                unint64_t v20 = *(void *)(v4 + 8 * v9);
                ++v21;
                if (v20) {
                  goto LABEL_22;
                }
              }
            }

            int64_t v9 = v21;
          }
        }
      }
    }

unint64_t specialized BidirectionalCollection<>._alignIndex(roundingUp:)( unint64_t a1, uint64_t a2, unint64_t a3, unint64_t a4, unint64_t a5)
{
  unint64_t result = _StringGuts.validateInclusiveScalarIndex(_:)(a1, a4, a5);
  if (result >> 14 < a1 >> 14 && result >> 14 < a3 >> 14)
  {
    unint64_t v11 = _StringGuts.validateScalarIndex(_:)(result, a4, a5);
    if ((a5 & 0x1000000000000000LL) != 0)
    {
      return String.UnicodeScalarView._foreignIndex(after:)();
    }

    else
    {
      unint64_t v12 = v11 >> 16;
      if ((a5 & 0x2000000000000000LL) != 0)
      {
        v17[0] = a4;
        v17[1] = a5 & 0xFFFFFFFFFFFFFFLL;
        int v14 = *((unsigned __int8 *)v17 + v12);
      }

      else
      {
        if ((a4 & 0x1000000000000000LL) != 0) {
          uint64_t v13 = (a5 & 0xFFFFFFFFFFFFFFFLL) + 32;
        }
        else {
          uint64_t v13 = _StringObject.sharedUTF8.getter();
        }
        int v14 = *(unsigned __int8 *)(v13 + v12);
      }

      int v15 = (char)v14;
      unsigned int v16 = __clz(v14 ^ 0xFF) - 24;
      if (v15 >= 0) {
        LOBYTE(v16) = 1;
      }
      return ((v12 + v16) << 16) | 5;
    }
  }

  return result;
}

unint64_t specialized BidirectionalCollection<>._alignIndex(roundingUp:)( unint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t result = _StringGuts.validateInclusiveScalarIndex(_:)(a1, a2, a3);
  if (result >> 14 < a1 >> 14)
  {
    uint64_t v7 = HIBYTE(a3) & 0xF;
    if ((a3 & 0x2000000000000000LL) == 0) {
      uint64_t v7 = a2 & 0xFFFFFFFFFFFFLL;
    }
    if (result >> 14 < 4 * v7)
    {
      unint64_t v8 = _StringGuts.validateScalarIndex(_:)(result, a2, a3);
      if ((a3 & 0x1000000000000000LL) != 0)
      {
        return String.UnicodeScalarView._foreignIndex(after:)();
      }

      else
      {
        unint64_t v9 = v8 >> 16;
        if ((a3 & 0x2000000000000000LL) != 0)
        {
          v14[0] = a2;
          v14[1] = a3 & 0xFFFFFFFFFFFFFFLL;
          int v11 = *((unsigned __int8 *)v14 + v9);
        }

        else
        {
          if ((a2 & 0x1000000000000000LL) != 0) {
            uint64_t v10 = (a3 & 0xFFFFFFFFFFFFFFFLL) + 32;
          }
          else {
            uint64_t v10 = _StringObject.sharedUTF8.getter();
          }
          int v11 = *(unsigned __int8 *)(v10 + v9);
        }

        int v12 = (char)v11;
        unsigned int v13 = __clz(v11 ^ 0xFF) - 24;
        if (v12 >= 0) {
          LOBYTE(v13) = 1;
        }
        return ((v9 + v13) << 16) | 5;
      }
    }
  }

  return result;
}

uint64_t specialized static Array._unconditionallyBridgeFromObjectiveC(_:)(void *a1)
{
  return specialized static Array._unconditionallyBridgeFromObjectiveC(_:)( a1,  &demangling cache variable for type metadata for _ContiguousArrayStorage<String>,  (uint64_t (*)(uint64_t))specialized _arrayForceCast<A, B>(_:));
}

{
  return specialized static Array._unconditionallyBridgeFromObjectiveC(_:)( a1,  &demangling cache variable for type metadata for _ContiguousArrayStorage<URLQueryItem>,  (uint64_t (*)(uint64_t))specialized _arrayForceCast<A, B>(_:));
}

uint64_t specialized static Array._unconditionallyBridgeFromObjectiveC(_:)( void *a1, uint64_t *a2, uint64_t (*a3)(uint64_t))
{
  if (!a1) {
    return MEMORY[0x18961AFE8];
  }
  type metadata accessor for __SwiftDeferredNSArray();
  swift_unknownObjectRetain();
  if (swift_dynamicCastClass())
  {
    swift_retain();
  }

  __swift_instantiateConcreteTypeFromMangledName(a2);
  uint64_t result = swift_dynamicCastClass();
  if (!result)
  {
    swift_unknownObjectRelease();
    objc_msgSend(a1, sel_copy);
    uint64_t v7 = _bridgeCocoaArray<A>(_:)();
    swift_unknownObjectRelease();
    uint64_t v8 = a3(v7);
    swift_bridgeObjectRelease();
    return v8;
  }

  return result;
}

unint64_t specialized Data.init<A>(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UnsafeMutableBufferPointer<UInt8>);
  uint64_t v10 = &protocol witness table for <A> UnsafeMutableBufferPointer<A>;
  v8[0] = a1;
  v8[1] = a2;
  uint64_t v4 = __swift_project_boxed_opaque_existential_1(v8, v9);
  unint64_t v5 = *v4;
  if (*v4)
  {
    uint64_t v6 = v4[1];
    if (v6)
    {
      if (v6 <= 14)
      {
        unint64_t v5 = specialized Data.InlineData.init(_:)((_BYTE *)*v4, (_BYTE *)(v5 + v6));
      }

      else
      {
        type metadata accessor for __DataStorage();
        swift_allocObject();
        __DataStorage.init(bytes:length:)(v5, v6);
        if ((unint64_t)v6 >= 0x7FFFFFFF)
        {
          type metadata accessor for Data.RangeReference();
          unint64_t v5 = swift_allocObject();
          *(void *)(v5 + 16) = 0LL;
          *(void *)(v5 + 24) = v6;
        }

        else
        {
          unint64_t v5 = v6 << 32;
        }
      }
    }

    else
    {
      unint64_t v5 = 0LL;
    }
  }

  __swift_destroy_boxed_opaque_existential_1((uint64_t)v8);
  return v5;
}

uint64_t specialized Data.init<A>(_:)(uint64_t a1, unint64_t a2)
{
  uint64_t v22 = *MEMORY[0x1895F89C0];
  *(void *)&__int128 v18 = a1;
  *((void *)&v18 + 1) = a2;
  swift_bridgeObjectRetain();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ContiguousBytes);
  if (!swift_dynamicCast())
  {
    uint64_t v17 = 0LL;
    memset(v16, 0, sizeof(v16));
    outlined destroy of Any?((uint64_t)v16, &demangling cache variable for type metadata for ContiguousBytes?);
    if ((a2 & 0x1000000000000000LL) != 0) {
      goto LABEL_20;
    }
    if ((a2 & 0x2000000000000000LL) != 0)
    {
      v19[0] = a1;
      v19[1] = a2 & 0xFFFFFFFFFFFFFFLL;
      uint64_t v6 = (char *)v19 + (HIBYTE(a2) & 0xF);
      uint64_t v7 = v19;
    }

    else
    {
      if ((a1 & 0x1000000000000000LL) != 0)
      {
        uint64_t v4 = (a2 & 0xFFFFFFFFFFFFFFFLL) + 32;
        uint64_t v5 = a1 & 0xFFFFFFFFFFFFLL;
      }

      else
      {
        uint64_t v4 = _StringObject.sharedUTF8.getter();
      }

      if (v4) {
        uint64_t v6 = (_BYTE *)(v4 + v5);
      }
      else {
        uint64_t v6 = 0LL;
      }
      uint64_t v7 = (_BYTE *)v4;
    }

    uint64_t v8 = specialized Data._Representation.init(_:)(v7, v6);
    unint64_t v10 = v9;
    if (v9 >> 60 != 15)
    {
      swift_bridgeObjectRelease();
      *(void *)&v16[0] = v8;
      *((void *)&v16[0] + 1) = v10;
      return *(void *)&v16[0];
    }

    if ((a2 & 0x1000000000000000LL) != 0)
    {
LABEL_20:
      Swift::Int v11 = String.UTF8View._foreignCount()();
    }

    else if ((a2 & 0x2000000000000000LL) != 0)
    {
      Swift::Int v11 = HIBYTE(a2) & 0xF;
    }

    else
    {
      Swift::Int v11 = a1 & 0xFFFFFFFFFFFFLL;
    }

    *(void *)&v16[0] = specialized Data._Representation.init(count:)(v11);
    *((void *)&v16[0] + 1) = v12;
    MEMORY[0x1895F8858](*(void *)&v16[0]);
    specialized Data._Representation.withUnsafeMutableBytes<A>(_:)();
    __asm { BR              X12 }
  }

  outlined init with take of any PredicateExpression<Self.Output == B1>(v16, (uint64_t)v19);
  uint64_t v2 = v20;
  uint64_t v3 = v21;
  __swift_project_boxed_opaque_existential_1(v19, v20);
  (*(void (**)(__int128 *__return_ptr, _BYTE *(*)@<X0>(_BYTE *@<X0>, _BYTE *@<X1>, void *@<X8>), void, ValueMetadata *, uint64_t, uint64_t))(v3 + 8))( &v18,  closure #1 in Data.init<A>(_:),  0LL,  &type metadata for Data._Representation,  v2,  v3);
  swift_bridgeObjectRelease();
  v16[0] = v18;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v19);
  return *(void *)&v16[0];
}

void specialized Data.init<A>(_:)(uint64_t a1, uint64_t a2)
{
  v3[5] = *MEMORY[0x1895F89C0];
  v3[3] = &type metadata for Data;
  v3[4] = &protocol witness table for Data;
  v3[0] = a1;
  v3[1] = a2;
  uint64_t v2 = (char *)&loc_1834FE0B8
     + *((int *)qword_1834FE288
       + (__swift_project_boxed_opaque_existential_1(v3, (uint64_t)&type metadata for Data)[1] >> 62));
  __asm { BR              X12 }

uint64_t sub_1834FE0C8@<X0>(uint64_t a1@<X8>)
{
  uint64_t v7 = v1;
  __int16 v8 = a1;
  char v9 = BYTE2(a1);
  char v10 = BYTE3(a1);
  char v11 = BYTE4(a1);
  char v12 = BYTE5(a1);
  uint64_t v4 = (char *)&v7 + BYTE6(a1);
  outlined copy of Data._Representation(v3, v2);
  closure #1 in Data.init<A>(_:)(&v7, v4, &v13);
  outlined consume of Data._Representation(v3, v2);
  uint64_t v5 = v13;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v14);
  return v5;
}

void *StringProtocol.components<A>(separatedBy:)(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v7 = *(void *)(a3 - 8);
  MEMORY[0x1895F8858](a1);
  char v9 = (char *)&v60 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  unint64_t v11 = *(void *)(*(void *)(v10 + 8) + 8LL);
  dispatch thunk of Collection.startIndex.getter();
  unint64_t v12 = v71;
  dispatch thunk of Collection.endIndex.getter();
  if (v70 >> 14 < v12 >> 14) {
    goto LABEL_46;
  }
  uint64_t v67 = a1;
  uint64_t v13 = StringProtocol._asContiguousUTF8Substring(from:)(v12, v70, a2);
  uint64_t v68 = v15;
  uint64_t v69 = v16;
  if (v16)
  {
    unint64_t v17 = v13;
    unint64_t v11 = v14;
    uint64_t v18 = v67;
    int v66 = specialized static StringProtocol.== infix<A>(_:_:)(v67, 10LL, 0xE100000000000000LL, a3);
    (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, v18, a3);
    uint64_t v19 = Substring.init<A>(_:)();
    unint64_t v65 = v21;
    uint64_t v67 = v22;
    unint64_t v23 = v11 >> 14;
    a2 = v17;
    unint64_t v24 = v11;
    if (v17 >> 14 >= v11 >> 14)
    {
      uint64_t v3 = (void *)MEMORY[0x18961AFE8];
      if (v23 >= v17 >> 14)
      {
LABEL_36:
        uint64_t v54 = Substring.subscript.getter();
        unint64_t v11 = MEMORY[0x186E1B610](v54);
        a2 = v55;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
        {
LABEL_37:
          unint64_t v57 = v3[2];
          unint64_t v56 = v3[3];
          if (v57 >= v56 >> 1) {
            uint64_t v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (void *)(v56 > 1),  v57 + 1,  1,  v3);
          }
          v3[2] = v57 + 1;
          uint64_t v58 = &v3[2 * v57];
          v58[4] = v11;
          v58[5] = a2;
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          goto LABEL_40;
        }

unint64_t String.UnicodeScalarView.index(_:offsetBy:)( unint64_t a1, uint64_t a2, unint64_t a3, unint64_t a4)
{
  unint64_t result = _StringGuts.validateInclusiveScalarIndex(_:)(a1, a3, a4);
  if (a2 < 0)
  {
    uint64_t v14 = 0LL;
    while (1)
    {
      if (result < 0x10000) {
        goto LABEL_38;
      }
      if ((a4 & 0x1000000000000000LL) == 0) {
        break;
      }
      unint64_t result = String.UnicodeScalarView._foreignIndex(before:)();
LABEL_20:
      if (--v14 <= a2) {
        return result;
      }
    }

    unint64_t v15 = result >> 16;
    if ((a4 & 0x2000000000000000LL) != 0)
    {
      unint64_t v21 = a3;
      uint64_t v22 = a4 & 0xFFFFFFFFFFFFFFLL;
      if ((*((_BYTE *)&v21 + v15 - 1) & 0xC0) == 0x80)
      {
        uint64_t v17 = 0LL;
        do
          int v19 = *((_BYTE *)&v21 + v15 + v17-- - 2) & 0xC0;
        while (v19 == 128);
        goto LABEL_33;
      }
    }

    else
    {
      uint64_t v16 = (a4 & 0xFFFFFFFFFFFFFFFLL) + 32;
      if ((a3 & 0x1000000000000000LL) == 0) {
        uint64_t v16 = _StringObject.sharedUTF8.getter();
      }
      if ((*(_BYTE *)(v15 + v16 - 1) & 0xC0) == 0x80)
      {
        uint64_t v17 = 0LL;
        do
          int v18 = *(_BYTE *)(v16 + v15 - 2 + v17--) & 0xC0;
        while (v18 == 128);
LABEL_33:
        uint64_t v20 = 1 - v17;
LABEL_35:
        unint64_t result = ((v15 - v20) << 16) | 5;
        goto LABEL_20;
      }
    }

    uint64_t v20 = 1LL;
    goto LABEL_35;
  }

  if (a2)
  {
    if ((a4 & 0x2000000000000000LL) != 0) {
      unint64_t v8 = HIBYTE(a4) & 0xF;
    }
    else {
      unint64_t v8 = a3 & 0xFFFFFFFFFFFFLL;
    }
    while (1)
    {
      unint64_t v9 = result >> 16;
      if (result >> 16 >= v8) {
        break;
      }
      if ((a4 & 0x1000000000000000LL) != 0)
      {
        unint64_t result = String.UnicodeScalarView._foreignIndex(after:)();
        if (!--a2) {
          return result;
        }
      }

      else
      {
        if ((a4 & 0x2000000000000000LL) != 0)
        {
          unint64_t v21 = a3;
          uint64_t v22 = a4 & 0xFFFFFFFFFFFFFFLL;
          int v11 = *((unsigned __int8 *)&v21 + v9);
        }

        else
        {
          uint64_t v10 = (a4 & 0xFFFFFFFFFFFFFFFLL) + 32;
          if ((a3 & 0x1000000000000000LL) == 0) {
            uint64_t v10 = _StringObject.sharedUTF8.getter();
          }
          int v11 = *(unsigned __int8 *)(v10 + v9);
        }

        int v12 = (char)v11;
        unsigned int v13 = __clz(v11 ^ 0xFF) - 24;
        if (v12 >= 0) {
          LOBYTE(v13) = 1;
        }
        unint64_t result = ((v9 + v13) << 16) | 5;
        if (!--a2) {
          return result;
        }
      }
    }

    __break(1u);
LABEL_38:
    __break(1u);
  }

  return result;
}

uint64_t StringProtocol.capitalized.getter(uint64_t a1)
{
  __n128 v3 = MEMORY[0x1895F8858](a1);
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v5 + 16))( (char *)&v8 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL),  v1,  a1,  v3);
  String.init<A>(_:)();
  uint64_t countAndFlagsBits = String._capitalized()()._countAndFlagsBits;
  swift_bridgeObjectRelease();
  return countAndFlagsBits;
}

unint64_t String.data(using:allowLossyConversion:)( uint64_t *a1, char a2, unint64_t a3, unint64_t a4)
{
  unint64_t v5 = a4;
  uint64_t v6 = a3;
  uint64_t v68 = *MEMORY[0x1895F89C0];
  uint64_t v7 = *a1;
  if (*a1 == 4)
  {
    swift_bridgeObjectRetain();
    return specialized Data.init<A>(_:)(v6, v5);
  }

  if (v7 == 7 || v7 == 1)
  {
    if ((a2 & 1) != 0)
    {
      if ((a4 & 0x1000000000000000LL) == 0)
      {
        if ((a4 & 0x2000000000000000LL) != 0) {
          uint64_t v12 = HIBYTE(a4) & 0xF;
        }
        else {
          uint64_t v12 = a3 & 0xFFFFFFFFFFFFLL;
        }
        goto LABEL_14;
      }

uint64_t StringProtocol.data(using:allowLossyConversion:)(uint64_t *a1, char a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  MEMORY[0x1895F8858](AssociatedTypeWitness);
  uint64_t v6 = (char *)&v13 - v5;
  uint64_t v7 = *a1;
  if (v7 == 4)
  {
    dispatch thunk of BinaryFloatingPoint.significandBitPattern.getter();
    uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
    return Data.init<A>(_:)((uint64_t)v6, AssociatedTypeWitness, *(void *)(AssociatedConformanceWitness + 8));
  }

  else
  {
    StringProtocol._ephemeralString.getter();
    uint64_t v10 = (void *)String._bridgeToObjectiveCImpl()();
    swift_bridgeObjectRelease();
    id v9 = objc_msgSend(v10, sel_dataUsingEncoding_allowLossyConversion_, v7, a2 & 1);
    swift_unknownObjectRelease();
    if (v9)
    {
      id v11 = v9;
      id v9 = specialized Data.init(referencing:)(v11);
    }
  }

  return (uint64_t)v9;
}

unint64_t StringProtocol._lineBounds<A>(around:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  return StringProtocol._lineBounds<A>(around:)(a1, a2, a3, a4, a5, 0xFuLL);
}

unint64_t StringProtocol._paragraphBounds<A>(around:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  return StringProtocol._lineBounds<A>(around:)(a1, a2, a3, a4, a5, 7uLL);
}

unint64_t StringProtocol._lineBounds<A>(around:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, unint64_t a6)
{
  unint64_t v65 = a5;
  uint64_t v62 = *(void *)(a2 - 8);
  MEMORY[0x1895F8858](a1);
  unint64_t v63 = (char *)v58 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v61 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1895F8858](AssociatedTypeWitness);
  uint64_t v60 = (char *)v58 - v11;
  uint64_t v12 = swift_getAssociatedTypeWitness();
  uint64_t v13 = *(void *)(v12 - 8);
  __n128 v14 = MEMORY[0x1895F8858](v12);
  uint64_t v16 = (char *)v58 - v15;
  if (a2 == MEMORY[0x189617FA8])
  {
    unint64_t v39 = a6;
    unint64_t v40 = v6[1];
    unint64_t v73 = *v6;
    unint64_t v41 = v73;
    unint64_t v74 = v40;
    lazy protocol witness table accessor for type String.UnicodeScalarView and conformance String.UnicodeScalarView();
    swift_bridgeObjectRetain();
    dispatch thunk of RangeExpression.relative<A>(to:)();
    unint64_t v42 = v67;
    unint64_t v43 = _StringGuts.validateInclusiveScalarIndex(_:)(v66, v41, v40);
    unint64_t result = specialized BidirectionalCollection<>._alignIndex(roundingUp:)(v42, v41, v40);
    if (result >> 14 < v43 >> 14)
    {
LABEL_22:
      __break(1u);
      goto LABEL_23;
    }

    unint64_t v44 = result;
    unint64_t v45 = String.subscript.getter();
    unint64_t v47 = v46;
    unint64_t v49 = v48;
    unint64_t v51 = v50;
    swift_bridgeObjectRelease();
    specialized BidirectionalCollection<>._getBlock(for:in:)(v39, v43, v44, v45, v47, v49, v51, (uint64_t)&v73);
    uint64_t v6 = (unint64_t *)&demangling cache variable for type metadata for String.Index?;
    outlined init with take of LocalePreferences?( (uint64_t)&v73,  (uint64_t)v79,  &demangling cache variable for type metadata for String.Index?);
    unint64_t result = outlined init with take of LocalePreferences?( (uint64_t)v79,  (uint64_t)&v80,  &demangling cache variable for type metadata for String.Index?);
    if ((v81 & 1) != 0)
    {
LABEL_27:
      __break(1u);
      goto LABEL_28;
    }

    unint64_t v38 = (unint64_t)v80;
    outlined init with take of LocalePreferences?( (uint64_t)v75,  (uint64_t)v78,  &demangling cache variable for type metadata for String.Index?);
    unint64_t result = outlined init with take of LocalePreferences?( (uint64_t)v78,  (uint64_t)&v82,  &demangling cache variable for type metadata for String.Index?);
    if ((v83 & 1) != 0)
    {
LABEL_28:
      __break(1u);
      goto LABEL_29;
    }

    outlined init with take of LocalePreferences?( (uint64_t)v76,  (uint64_t)v77,  &demangling cache variable for type metadata for String.Index?);
    outlined init with take of LocalePreferences?( (uint64_t)v77,  (uint64_t)&v66,  &demangling cache variable for type metadata for String.Index?);
    if ((v67 & 1) == 0)
    {
LABEL_18:
      swift_bridgeObjectRelease();
      return v38;
    }

    __break(1u);
  }

  else
  {
    unint64_t v59 = a6;
    if (a2 != MEMORY[0x189618C50])
    {
      MEMORY[0x186E1C06C](a2, a4, v14);
      swift_getAssociatedConformanceWitness();
      dispatch thunk of RangeExpression.relative<A>(to:)();
      unint64_t v17 = v74;
      unint64_t v66 = v73;
      dispatch thunk of BidirectionalCollection.index(_:offsetBy:)();
      unint64_t v18 = v73;
      unint64_t result = BidirectionalCollection<>._alignIndex(roundingUp:)(v17, v12);
      if (result >> 14 < v18 >> 14)
      {
        __break(1u);
      }

      else
      {
        uint64_t v20 = *(void (**)(char *, uint64_t))(v13 + 8);
        unint64_t v65 = result;
        v20(v16, v12);
        unint64_t v21 = v18;
        unint64_t v22 = v60;
        dispatch thunk of BinaryFloatingPoint.significandBitPattern.getter();
        unint64_t v23 = *(void *)(*(void *)(a4 + 8) + 8LL);
        dispatch thunk of Collection.startIndex.getter();
        unint64_t v66 = v73;
        unint64_t v82 = v21;
        uint64_t v24 = AssociatedTypeWitness;
        uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
        v58[2] = dispatch thunk of Collection.distance(from:to:)();
        uint64_t v26 = *(void (**)(char *, uint64_t))(v61 + 8);
        v26(v22, v24);
        uint64_t v61 = a4;
        dispatch thunk of BinaryFloatingPoint.significandBitPattern.getter();
        unint64_t v73 = v21;
        unint64_t v66 = v65;
        v58[1] = AssociatedConformanceWitness;
        dispatch thunk of Collection.distance(from:to:)();
        v58[0] = v26;
        v26(v22, v24);
        (*(void (**)(char *, unint64_t *, uint64_t))(v62 + 16))(v63, v6, a2);
        unint64_t v65 = v23;
        unint64_t v27 = Substring.init<A>(_:)();
        unint64_t v29 = v28;
        unint64_t v31 = v30;
        unint64_t v33 = v32;
        unint64_t v34 = Substring.UTF8View.index(_:offsetBy:)();
        swift_bridgeObjectRetain();
        unint64_t v35 = Substring.UTF8View.index(_:offsetBy:)();
        unint64_t result = swift_bridgeObjectRelease();
        if (v35 >> 14 >= v34 >> 14)
        {
          swift_bridgeObjectRetain();
          specialized BidirectionalCollection<>._getBlock(for:in:)(v59, v34, v35, v27, v29, v31, v33, (uint64_t)&v73);
          outlined init with take of LocalePreferences?( (uint64_t)&v73,  (uint64_t)v79,  &demangling cache variable for type metadata for String.Index?);
          unint64_t result = outlined init with take of LocalePreferences?( (uint64_t)v79,  (uint64_t)&v80,  &demangling cache variable for type metadata for String.Index?);
          if ((v81 & 1) == 0)
          {
            unint64_t v63 = v80;
            outlined init with take of LocalePreferences?( (uint64_t)v75,  (uint64_t)v78,  &demangling cache variable for type metadata for String.Index?);
            unint64_t result = outlined init with take of LocalePreferences?( (uint64_t)v78,  (uint64_t)&v82,  &demangling cache variable for type metadata for String.Index?);
            if ((v83 & 1) == 0)
            {
              outlined init with take of LocalePreferences?( (uint64_t)v76,  (uint64_t)v77,  &demangling cache variable for type metadata for String.Index?);
              unint64_t result = outlined init with take of LocalePreferences?( (uint64_t)v77,  (uint64_t)&v66,  &demangling cache variable for type metadata for String.Index?);
              if ((v67 & 1) == 0)
              {
                swift_bridgeObjectRelease();
                swift_bridgeObjectRetain();
                unint64_t v59 = Substring.UTF8View.distance(from:to:)();
                uint64_t v62 = Substring.UTF8View.distance(from:to:)();
                swift_bridgeObjectRelease();
                unint64_t v63 = (char *)Substring.UTF8View.distance(from:to:)();
                swift_bridgeObjectRelease();
                dispatch thunk of BinaryFloatingPoint.significandBitPattern.getter();
                dispatch thunk of Collection.startIndex.getter();
                uint64_t v70 = v71;
                uint64_t v36 = AssociatedTypeWitness;
                dispatch thunk of Collection.index(_:offsetBy:)();
                char v37 = (void (*)(char *, uint64_t))v58[0];
                ((void (*)(char *, uint64_t))v58[0])(v22, v36);
                unint64_t v59 = v72;
                dispatch thunk of BinaryFloatingPoint.significandBitPattern.getter();
                dispatch thunk of Collection.startIndex.getter();
                uint64_t v69 = v70;
                dispatch thunk of Collection.index(_:offsetBy:)();
                v37(v22, v36);
                dispatch thunk of BinaryFloatingPoint.significandBitPattern.getter();
                unint64_t v38 = v59;
                dispatch thunk of Collection.startIndex.getter();
                uint64_t v68 = v69;
                dispatch thunk of Collection.index(_:offsetBy:)();
                v37(v22, v36);
                return v38;
              }

              goto LABEL_26;
            }

uint64_t specialized Data.InlineSlice.withUnsafeMutableBytes<A>(_:)( void *(*a1)(uint64_t *__return_ptr, uint64_t, uint64_t))
{
  __n128 v3 = v1;
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  if ((result & 1) == 0)
  {
    uint64_t v7 = *v1;
    uint64_t v6 = v3[1];
    if ((int)v6 < (int)v7)
    {
LABEL_18:
      __break(1u);
      goto LABEL_19;
    }

    uint64_t v8 = *((void *)v3 + 1);
    uint64_t v9 = *(void *)(v8 + 16);
    if (v9)
    {
      uint64_t v10 = *(void *)(v8 + 40);
      BOOL v11 = __OFSUB__(v7, v10);
      uint64_t v12 = v7 - v10;
      if (v11)
      {
LABEL_19:
        __break(1u);
        goto LABEL_20;
      }

      unint64_t v13 = v9 + v12;
    }

    else
    {
      unint64_t v13 = 0LL;
    }

    uint64_t v14 = v6 - v7;
    type metadata accessor for __DataStorage();
    swift_allocObject();
    *((void *)v3 + 1) = __DataStorage.init(bytes:length:copy:deallocator:offset:)(v13, v14, 1, 0LL, 0LL, v7);
    uint64_t result = swift_release();
  }

  uint64_t v15 = *v3;
  uint64_t v16 = v3[1];
  if ((int)v16 < (int)v15)
  {
    __break(1u);
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }

  unint64_t v17 = (void *)*((void *)v3 + 1);
  uint64_t v18 = v17[2];
  if (!v18)
  {
LABEL_20:
    __break(1u);
    return result;
  }

  uint64_t v19 = v17[5];
  BOOL v11 = __OFSUB__(v15, v19);
  uint64_t v20 = v15 - v19;
  if (v11) {
    goto LABEL_17;
  }
  uint64_t v21 = v16 - v15;
  if (v17[3] < v21) {
    uint64_t v21 = v17[3];
  }
  uint64_t result = (uint64_t)a1(&v22, v18 + v20, v18 + v20 + v21);
  if (!v2) {
    return v22;
  }
  return result;
}

uint64_t specialized Data.LargeSlice.withUnsafeMutableBytes<A>(_:)( void *(*a1)(uint64_t *__return_ptr, uint64_t, uint64_t))
{
  __n128 v3 = v1;
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  if ((result & 1) == 0)
  {
    uint64_t v6 = v1[1];
    uint64_t v8 = *(void *)(*v1 + 16);
    uint64_t v7 = *(void *)(*v3 + 24);
    uint64_t v9 = *(void *)(v6 + 16);
    if (v9)
    {
      uint64_t v10 = *(void *)(v6 + 40);
      BOOL v11 = __OFSUB__(v8, v10);
      uint64_t v12 = v8 - v10;
      if (v11)
      {
LABEL_21:
        __break(1u);
LABEL_22:
        __break(1u);
        return result;
      }

      unint64_t v13 = v9 + v12;
      uint64_t v14 = v7 - v8;
      if (!__OFSUB__(v7, v8)) {
        goto LABEL_5;
      }
    }

    else
    {
      unint64_t v13 = 0LL;
      uint64_t v14 = v7 - v8;
      if (!__OFSUB__(v7, v8))
      {
LABEL_5:
        type metadata accessor for __DataStorage();
        swift_allocObject();
        v3[1] = __DataStorage.init(bytes:length:copy:deallocator:offset:)(v13, v14, 1, 0LL, 0LL, v8);
        swift_release();
        goto LABEL_6;
      }
    }

    __break(1u);
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }

void specialized Data._Representation.withUnsafeMutableBytes<A>(_:)()
{
  __asm { BR              X14 }

void *sub_1835003B8@<X0>(uint64_t a1@<X8>)
{
  void *(*v1)(uint64_t *__return_ptr, uint64_t *, char *);
  uint64_t v2;
  void *v3;
  uint64_t v4;
  void *result;
  unint64_t v6;
  uint64_t v7;
  unsigned int v8;
  unsigned __int8 v9;
  unsigned __int8 v10;
  unsigned __int8 v11;
  uint64_t v12;
  uint64_t v7 = v2;
  LOWORD(v8) = a1;
  BYTE2(v8) = BYTE2(a1);
  HIBYTE(v8) = BYTE3(a1);
  uint64_t v9 = BYTE4(a1);
  uint64_t v10 = BYTE5(a1);
  BOOL v11 = BYTE6(a1);
  uint64_t result = v1(&v12, &v7, (char *)&v7 + BYTE6(a1));
  uint64_t v6 = v8 | ((unint64_t)v9 << 32) | ((unint64_t)v10 << 40) | ((unint64_t)v11 << 48);
  *__n128 v3 = v7;
  v3[1] = v6;
  if (!v4) {
    return (void *)v12;
  }
  return result;
}

uint64_t closure #1 in String.data(using:allowLossyConversion:)( uint64_t result, uint64_t a2, unint64_t a3, char a4)
{
  uint64_t v22 = HIBYTE(a3) & 0xF;
  if ((a3 & 0x2000000000000000LL) != 0) {
    uint64_t v5 = HIBYTE(a3) & 0xF;
  }
  else {
    uint64_t v5 = a2 & 0xFFFFFFFFFFFFLL;
  }
  if (!v5) {
    return result;
  }
  uint64_t v9 = (void *)result;
  uint64_t v19 = a3 & 0xFFFFFFFFFFFFFFLL;
  swift_bridgeObjectRetain();
  uint64_t v10 = 0LL;
  while (1)
  {
    if ((a3 & 0x1000000000000000LL) != 0)
    {
      unsigned int v12 = _StringGuts.foreignErrorCorrectedScalar(startingAt:)();
    }

    else
    {
      if ((a3 & 0x2000000000000000LL) != 0)
      {
        uint64_t v20 = a2;
        uint64_t v21 = v19;
      }

      else if ((a2 & 0x1000000000000000LL) == 0)
      {
        _StringObject.sharedUTF8.getter();
      }

      unsigned int v12 = _decodeScalar(_:startingAt:)();
    }

    uint64_t v14 = v13;
    if (v12 > 0x7F) {
      break;
    }
    uint64_t v16 = v9[2];
    uint64_t v17 = specialized Sequence._copySequenceContents(initializing:)( (uint64_t)&v20,  (_BYTE *)(*v9 + v16),  v9[1] - v16,  v12);
    unint64_t v4 = v21;
    if (v20 <= 0x7F)
    {
      if (v21 != 1) {
        goto LABEL_31;
      }
    }

    else if (v20 >= 0x800)
    {
      if (WORD1(v20))
      {
        if (v21 != 4)
        {
          unint64_t v18 = 4LL;
          goto LABEL_32;
        }
      }

      else if (v21 != 3)
      {
        unint64_t v18 = 3LL;
        goto LABEL_32;
      }
    }

    else if (v21 != 2)
    {
      unint64_t v18 = 2LL;
      goto LABEL_32;
    }

    uint64_t v11 = v17 + v16;
LABEL_8:
    v9[2] = v11;
    v10 += v14;
    if (v10 >= v5) {
      return swift_bridgeObjectRelease();
    }
  }

  uint64_t v15 = v9[2];
  if (v15 < v9[1])
  {
    *(_BYTE *)(*v9 + v15) = a4;
    uint64_t v11 = v15 + 1;
    goto LABEL_8;
  }

  __break(1u);
LABEL_31:
  unint64_t v18 = 1LL;
LABEL_32:
  uint64_t result = Unicode.Scalar.UTF8View.subscript.getter();
  if (v4 < v18) {
    __break(1u);
  }
  __break(1u);
  return result;
}

unint64_t StringProtocol.rangeOfCharacter(from:options:range:)( uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  __n128 v7 = MEMORY[0x1895F8858](a1);
  uint64_t v10 = *v9;
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v11 + 16))( (char *)&v27 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL),  v13,  v12,  v7);
  unint64_t v14 = Substring.init<A>(_:)();
  unint64_t v16 = v15;
  unint64_t v18 = v17;
  unint64_t v20 = v19;
  if ((a5 & 1) == 0)
  {
    unint64_t v14 = Substring.subscript.getter();
    unint64_t v16 = v21;
    unint64_t v18 = v22;
    unint64_t v24 = v23;
    swift_bridgeObjectRelease();
    unint64_t v20 = v24;
  }

  if ((v16 ^ v14) >> 14)
  {
    swift_retain();
    swift_bridgeObjectRetain();
    unint64_t v25 = specialized Substring.UnicodeScalarView._rangeOfCharacter(anchored:backwards:matchingPredicate:)( (a2 >> 3) & 1,  (a2 & 4) != 0,  v14,  v16,  v18,  v20,  v10);
    swift_bridgeObjectRelease_n();
    swift_release();
  }

  else
  {
    swift_bridgeObjectRelease();
    return 0LL;
  }

  return v25;
}

uint64_t specialized static StringProtocol.== infix<A>(_:_:)( uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v9 = (char *)v26 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v10);
  uint64_t v12 = (char *)v26 - v11;
  __n128 v16 = MEMORY[0x1895F8858](v13);
  if (v17 == MEMORY[0x189617FA8]) {
    return specialized static StringProtocol.== infix<A>(_:_:)(*(void *)a1, *(void *)(a1 + 8), a2, a3);
  }
  if (a4 == MEMORY[0x189618C50]) {
    return specialized static StringProtocol.== infix<A>(_:_:)( *(void *)a1,  *(void *)(a1 + 8),  *(void *)(a1 + 16),  *(void *)(a1 + 24),  a2,  a3);
  }
  unint64_t v18 = *(void (**)(char *, uint64_t, uint64_t, __n128))(v14 + 16);
  v18((char *)v26 - v15, a1, a4, v16);
  if (swift_dynamicCast())
  {
    uint64_t v20 = v26[0];
    uint64_t v19 = v26[1];
  }

  else
  {
    ((void (*)(char *, uint64_t, uint64_t))v18)(v12, a1, a4);
    if ((swift_dynamicCast() & 1) != 0)
    {
      uint64_t v20 = v26[2];
      uint64_t v19 = v26[3];
    }

    else
    {
      ((void (*)(char *, uint64_t, uint64_t))v18)(v9, a1, a4);
      uint64_t v20 = String.init<A>(_:)();
      uint64_t v19 = v22;
    }
  }

  dispatch thunk of Collection.startIndex.getter();
  unint64_t v23 = v26[0];
  dispatch thunk of Collection.endIndex.getter();
  if ((a3 & 0x2000000000000000LL) != 0) {
    uint64_t v24 = HIBYTE(a3) & 0xF;
  }
  else {
    uint64_t v24 = a2 & 0xFFFFFFFFFFFFLL;
  }
  if (v20 == a2 && v19 == a3 && !(v23 >> 16) && v26[0] >> 16 == v24)
  {
    swift_bridgeObjectRelease();
    char v25 = 1;
  }

  else
  {
    char v25 = _stringCompareInternal(_:_:_:_:expecting:)();
    swift_bridgeObjectRelease();
  }

  return v25 & 1;
}

unint64_t StringProtocol.lineRange<A>(for:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  return StringProtocol.lineRange<A>(for:)(a1, a2, a3, a4, a5, 0xFuLL);
}

unint64_t StringProtocol.paragraphRange<A>(for:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  return StringProtocol.lineRange<A>(for:)(a1, a2, a3, a4, a5, 7uLL);
}

unint64_t StringProtocol.lineRange<A>(for:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, unint64_t a6)
{
  unint64_t result = StringProtocol._lineBounds<A>(around:)(a1, a2, a3, a4, a5, a6);
  if (v7 >> 14 < result >> 14) {
    __break(1u);
  }
  return result;
}

void *specialized Sequence._copySequenceContents(initializing:)(void *result, uint64_t a2, uint64_t a3)
{
  unint64_t v4 = result;
  if (!a2)
  {
    uint64_t v7 = 0LL;
    goto LABEL_14;
  }

  if (!a3)
  {
    uint64_t v7 = 0LL;
    goto LABEL_14;
  }

  if ((a3 & 0x8000000000000000LL) == 0)
  {
    uint64_t v7 = 0LL;
    if (objc_msgSend(v3, sel_length))
    {
      uint64_t v13 = a3;
      uint64_t v8 = a3 - 1;
      while (1)
      {
        char v16 = 0;
        uint64_t v15 = v7;
        uint64_t v9 = (void *)swift_allocObject();
        v9[2] = &v15;
        v9[3] = v7;
        void v9[4] = &v16;
        uint64_t v10 = swift_allocObject();
        *(void *)(v10 + 16) = _sSo6NSDataC10FoundationEys5UInt8VSicigySV_So8_NSRangeVSpy10ObjectiveC8ObjCBoolVGtXEfU_TA_0;
        *(void *)(v10 + 24) = v9;
        aBlock[4] = partial apply for thunk for @callee_guaranteed (@unowned _NSRange, @guaranteed @escaping @callee_guaranteed (@in_guaranteed Any?, @unowned _NSRange, @unowned UnsafeMutablePointer<ObjCBool>) -> ()) -> ();
        aBlock[5] = v10;
        aBlock[0] = MEMORY[0x1895F87A8];
        aBlock[1] = 1107296256LL;
        aBlock[2] = thunk for @escaping @callee_guaranteed (@unowned UnsafeRawPointer, @unowned _NSRange, @unowned UnsafeMutablePointer<ObjCBool>) -> ();
        aBlock[3] = &block_descriptor_23;
        uint64_t v11 = _Block_copy(aBlock);
        swift_retain();
        swift_release();
        objc_msgSend(v3, sel_enumerateByteRangesUsingBlock_, v11);
        _Block_release(v11);
        LOBYTE(v11) = swift_isEscapingClosureAtFileLocation();
        unint64_t result = (void *)swift_release();
        char v12 = v16;
        swift_release();
        unint64_t result = objc_msgSend(v3, sel_length);
        *(_BYTE *)(a2 + v7) = v12;
        if (v8 == v7)
        {
          uint64_t v7 = v13;
          goto LABEL_14;
        }

        if ((id)++v7 == objc_msgSend(v3, sel_length)) {
          goto LABEL_14;
        }
      }

      __break(1u);
LABEL_16:
      __break(1u);
      goto LABEL_17;
    }

void specialized Sequence._copySequenceContents(initializing:)(void *a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v7 = (_OWORD *)swift_allocObject();
  uint64_t v8 = swift_unknownObjectRetain();
  NSFastEnumerationIterator.init(_:)(v8, (uint64_t)v44);
  __int128 v9 = v44[11];
  v7[11] = v44[10];
  v7[12] = v9;
  v7[13] = v45[0];
  *(_OWORD *)((char *)v7 + 217) = *(_OWORD *)((char *)v45 + 9);
  __int128 v10 = v44[7];
  v7[7] = v44[6];
  v7[8] = v10;
  __int128 v11 = v44[9];
  v7[9] = v44[8];
  v7[10] = v11;
  __int128 v12 = v44[3];
  v7[3] = v44[2];
  v7[4] = v12;
  __int128 v13 = v44[5];
  v7[5] = v44[4];
  v7[6] = v13;
  __int128 v14 = v44[1];
  v7[1] = v44[0];
  v7[2] = v14;

  if (!a2 || !a3) {
    goto LABEL_17;
  }
  if ((a3 & 0x8000000000000000LL) == 0)
  {
    unint64_t v30 = a1;
    NSFastEnumerationIterator.next()((uint64_t)&v32);
    if (v33)
    {
      uint64_t v15 = 0LL;
      unint64_t v31 = &v38;
      v29[3] = a3;
      uint64_t v16 = a3 - 1;
      do
      {
        outlined init with take of Any(&v32, &v34);
        outlined init with copy of Any((uint64_t)&v34, (uint64_t)&v36);
        if (!*((void *)v7 + 2)) {
          goto LABEL_20;
        }
        objc_opt_self();
        uint64_t v17 = (void *)swift_dynamicCastObjCClassUnconditional();
        uint64_t v18 = v35;
        uint64_t v19 = __swift_project_boxed_opaque_existential_1(&v34, v35);
        swift_unknownObjectRetain();
        uint64_t isClassOrObjCExistentialType = _swift_isClassOrObjCExistentialType();
        if ((isClassOrObjCExistentialType & 1) != 0)
        {
          if (*(void *)(*(void *)(v18 - 8) + 64LL) != 8LL)
          {
            __break(1u);
            goto LABEL_19;
          }

          uint64_t v21 = *v19;
          swift_unknownObjectRetain();
        }

        else
        {
          void v29[2] = v29;
          __n128 v26 = MEMORY[0x1895F8858](isClassOrObjCExistentialType);
          v29[1] = (char *)v29 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0LL);
          (*(void (**)(__n128))(v28 + 16))(v26);
          uint64_t v21 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)();
        }

        id v22 = objc_msgSend(v17, sel_objectForKey_, v21);
        swift_unknownObjectRelease();
        swift_unknownObjectRelease();
        if (!v22) {
          goto LABEL_21;
        }
        _bridgeAnyObjectToAny(_:)();
        swift_unknownObjectRelease();
        __swift_destroy_boxed_opaque_existential_1((uint64_t)&v34);
        outlined init with take of Any(&v32, v31);
        __int128 v24 = v38;
        __int128 v23 = v39;
        __int128 v42 = v38;
        __int128 v43 = v39;
        __int128 v25 = v37;
        __int128 v40 = v36;
        __int128 v41 = v37;
        *a2 = v36;
        a2[1] = v25;
        a2[2] = v24;
        a2[3] = v23;
        if (v16 == v15) {
          goto LABEL_16;
        }
        a2 += 4;
        NSFastEnumerationIterator.next()((uint64_t)&v32);
        ++v15;
      }

      while (v33);
    }

    outlined destroy of Any?((uint64_t)&v32, &demangling cache variable for type metadata for Any?);
    __int128 v36 = 0u;
    __int128 v37 = 0u;
    __int128 v38 = 0u;
    __int128 v39 = 0u;
    outlined destroy of Any?((uint64_t)&v36, &demangling cache variable for type metadata for (key: Any, value: Any)?);
LABEL_16:
    a1 = v30;
LABEL_17:
    *a1 = v7;
    return;
  }

void *specialized Sequence._copySequenceContents(initializing:)( void *result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  if (!a2) {
    goto LABEL_9;
  }
  if (!a3)
  {
LABEL_10:
    uint64_t v6 = a6;
LABEL_11:
    *unint64_t result = a4;
    result[1] = a5;
    result[2] = a6;
    result[3] = v6;
    return (void *)a3;
  }

  uint64_t v6 = a6 + a5;
  uint64_t v7 = __OFADD__(a6, a5);
  if (a3 < 0)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }

  if ((v7 & 1) == 0)
  {
    if (v6 == a6)
    {
LABEL_9:
      a3 = 0LL;
      goto LABEL_10;
    }

    if (v6 < a6)
    {
LABEL_18:
      __break(1u);
LABEL_19:
      uint64_t v6 = a6 + v7 + 1;
      goto LABEL_11;
    }

    uint64_t v7 = 0LL;
    while (a5 != v7)
    {
      *(_BYTE *)(a2 + v7) = *(_BYTE *)(a4 + v7);
      if (a3 - 1 == v7) {
        goto LABEL_19;
      }
      if (a5 - 1 == v7)
      {
        a3 = a5;
        goto LABEL_11;
      }

      ++v7;
      if (a6 + v7 < a6) {
        goto LABEL_18;
      }
    }

    __break(1u);
    goto LABEL_22;
  }

uint64_t specialized Sequence._copySequenceContents(initializing:)( uint64_t result, void *a2, uint64_t a3, void *a4, uint64_t a5, unsigned __int8 a6)
{
  if (!a2) {
    goto LABEL_6;
  }
  if (!a3)
  {
    unint64_t v8 = 0LL;
    goto LABEL_29;
  }

  if (a3 < 0)
  {
    __break(1u);
    goto LABEL_38;
  }

  uint64_t v7 = a4;
  if (a6 >= 2u)
  {
    if (a6 == 3)
    {
LABEL_6:
      unint64_t v8 = 0LL;
      a3 = 0LL;
LABEL_29:
      *(void *)unint64_t result = a4;
      *(void *)(result + 8) = a5;
      *(_BYTE *)(result + 16) = a6;
      *(void *)(result + 24) = v8;
      return a3;
    }

    unint64_t v8 = a4[2];
    if (!v8)
    {
      a3 = 0LL;
      goto LABEL_29;
    }

    uint64_t v7 = (void *)a4[4];
  }

  *a2 = v7;
  if (a3 == 1)
  {
    unint64_t v8 = 1LL;
    goto LABEL_29;
  }

  if (!a6)
  {
    unint64_t v8 = 1LL;
    a3 = 1LL;
    goto LABEL_29;
  }

  uint64_t v9 = a5;
  if (a6 != 1)
  {
    unint64_t v8 = a4[2];
    if (v8 == 1)
    {
LABEL_15:
      a3 = v8;
      goto LABEL_29;
    }

    if (!v8) {
      goto LABEL_38;
    }
    uint64_t v9 = a4[5];
  }

  a2[1] = v9;
  if (a3 == 2)
  {
    unint64_t v8 = 2LL;
    goto LABEL_29;
  }

  if (a6 != 2)
  {
    unint64_t v8 = 2LL;
    goto LABEL_28;
  }

  unint64_t v8 = a4[2];
  if (v8 == 2)
  {
LABEL_28:
    a3 = 2LL;
    goto LABEL_29;
  }

  if (v8 < 3)
  {
LABEL_38:
    __break(1u);
    goto LABEL_39;
  }

  a2[2] = a4[6];
  if (a3 == 3)
  {
    unint64_t v8 = 3LL;
    goto LABEL_29;
  }

  uint64_t v10 = 0LL;
  while (1)
  {
    int v6 = a6;
    if (a6 != 2) {
      break;
    }
    int v6 = v10 + 3;
    unint64_t v11 = a4[2];
    if (v10 + 3 == v11)
    {
      unint64_t v8 = v10 + 3;
      goto LABEL_15;
    }

    if (v10 + 3 >= v11) {
      goto LABEL_38;
    }
    a2[v10 + 3] = a4[v10 + 7];
    if (a3 - 3 == ++v10)
    {
      unint64_t v8 = a3;
      goto LABEL_29;
    }
  }

uint64_t specialized Sequence._copySequenceContents(initializing:)( uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v24[5] = a4;
  uint64_t result = IndexSet.startIndex.getter(v24);
  uint64_t v9 = v24[0];
  uint64_t v10 = v24[1];
  uint64_t v11 = v24[2];
  uint64_t v12 = v24[3];
  uint64_t v23 = v24[4];
  if (!a2)
  {
    uint64_t v13 = 0LL;
    goto LABEL_36;
  }

  if (!a3)
  {
LABEL_33:
    uint64_t v13 = a3;
LABEL_36:
    *a1 = a4;
    a1[1] = v9;
    a1[2] = v10;
    a1[3] = v11;
    a1[4] = v12;
    a1[5] = v23;
    return v13;
  }

  if ((a3 & 0x8000000000000000LL) == 0)
  {
    uint64_t v13 = 0LL;
    while (1)
    {
      uint64_t v14 = v9;
      uint64_t result = (uint64_t)objc_msgSend(*(id *)(a4 + 16), sel_rangeCount);
      if (result < 1)
      {
        if (!v14)
        {
          uint64_t v9 = 0LL;
          goto LABEL_36;
        }
      }

      else
      {
        char v15 = *(_BYTE *)(a4 + 24);
        uint64_t result = (uint64_t)objc_msgSend(*(id *)(a4 + 16), sel_rangeAtIndex_, result - 1);
        uint64_t v17 = result + v16;
        BOOL v18 = __OFADD__(result, v16);
        if ((v15 & 1) != 0)
        {
          if (v18) {
            goto LABEL_39;
          }
          if (v17 < result) {
            goto LABEL_40;
          }
        }

        else
        {
          if (v18) {
            goto LABEL_41;
          }
          if (v17 < result) {
            goto LABEL_42;
          }
        }

        if (v14 == v17)
        {
          uint64_t v9 = v14;
          goto LABEL_36;
        }
      }

      uint64_t v9 = v14 + 1;
      if (__OFADD__(v14, 1LL)) {
        break;
      }
      if (v9 == v11)
      {
        uint64_t v19 = v12 + 1;
        if (__OFADD__(v12, 1LL)) {
          goto LABEL_38;
        }
        uint64_t v9 = v11;
        if (v19 != v23)
        {
          char v20 = *(_BYTE *)(a4 + 24);
          uint64_t result = (uint64_t)objc_msgSend(*(id *)(a4 + 16), sel_rangeAtIndex_, v19);
          uint64_t v10 = result;
          uint64_t v11 = result + v21;
          BOOL v22 = __OFADD__(result, v21);
          if ((v20 & 1) != 0)
          {
            if (v22) {
              goto LABEL_43;
            }
            uint64_t v12 = v19;
            uint64_t v9 = result;
            if (v11 < result) {
              goto LABEL_44;
            }
          }

          else
          {
            if (v22) {
              goto LABEL_45;
            }
            uint64_t v12 = v19;
            uint64_t v9 = result;
            if (v11 < result)
            {
              __break(1u);
              goto LABEL_33;
            }
          }
        }
      }

      *(void *)(a2 + 8 * v13++) = v14;
      if (a3 == v13) {
        goto LABEL_33;
      }
    }

    __break(1u);
LABEL_38:
    __break(1u);
LABEL_39:
    __break(1u);
LABEL_40:
    __break(1u);
LABEL_41:
    __break(1u);
LABEL_42:
    __break(1u);
LABEL_43:
    __break(1u);
LABEL_44:
    __break(1u);
LABEL_45:
    __break(1u);
  }

  __break(1u);
  return result;
}

void *specialized Sequence._copySequenceContents(initializing:)( void *result, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v9 = result;
  if (!a2) {
    goto LABEL_5;
  }
  uint64_t v10 = a3;
  if (!a3) {
    goto LABEL_6;
  }
  if (a3 < 0)
  {
LABEL_30:
    __break(1u);
    return result;
  }

  if (a5 != a4)
  {
    uint64_t v12 = a2;
    uint64_t v19 = a5 - a4;
    uint64_t v13 = 1LL;
    uint64_t v14 = a4;
    while (1)
    {
      char v15 = *(_BYTE *)(a6 + 24);
      uint64_t result = objc_msgSend(*(id *)(a6 + 16), sel_rangeAtIndex_, v14);
      uint64_t v17 = (char *)result + v16;
      BOOL v18 = __OFADD__(result, v16);
      if ((v15 & 1) != 0)
      {
        if (v18) {
          goto LABEL_26;
        }
      }

      else
      {
        if (v18) {
          goto LABEL_28;
        }
      }

      if (v14 == 0x7FFFFFFFFFFFFFFFLL) {
        goto LABEL_25;
      }
      *uint64_t v12 = result;
      v12[1] = v17;
      if (v10 == v13)
      {
        uint64_t v11 = v14 + 1;
        goto LABEL_7;
      }

      ++v14;
      ++v13;
      v12 += 2;
      if (a5 == v14)
      {
        uint64_t v11 = a5;
        uint64_t v10 = v19;
        goto LABEL_7;
      }
    }

    __break(1u);
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
LABEL_28:
    __break(1u);
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }

void specialized Sequence._copySequenceContents(initializing:)(char *a1, double *a2, uint64_t a3)
{
  uint64_t v7 = *v3;
  __int128 v8 = *(_OWORD *)(v3 + 11);
  v28[4] = *(_OWORD *)(v3 + 9);
  v28[5] = v8;
  v28[6] = *(_OWORD *)(v3 + 13);
  uint64_t v29 = v3[15];
  __int128 v9 = *(_OWORD *)(v3 + 3);
  v28[0] = *(_OWORD *)(v3 + 1);
  v28[1] = v9;
  __int128 v10 = *(_OWORD *)(v3 + 7);
  v28[2] = *(_OWORD *)(v3 + 5);
  v28[3] = v10;
  outlined init with take of LocalePreferences?( (uint64_t)(v3 + 16),  (uint64_t)v32,  &demangling cache variable for type metadata for Range<Date>?);
  uint64_t v30 = v7;
  outlined init with take of LocalePreferences?( (uint64_t)v32,  (uint64_t)v27,  &demangling cache variable for type metadata for Range<Date>?);
  Calendar.DatesByRecurring.Iterator.init(start:matching:range:)((uint64_t)&v30, (uint64_t)v28, (uint64_t)v27);
  if (a2 && a3)
  {
    if ((a3 & 0x8000000000000000LL) == 0)
    {
      if ((__src[36] & 1) != 0)
      {
LABEL_5:
        char v11 = BYTE8(__src[1]);
        char v12 = BYTE9(__src[1]);
        char v13 = BYTE10(__src[1]);
        char v14 = __src[3];
        uint64_t v15 = *((void *)&__src[7] + 1);
        uint64_t v16 = *((void *)&__src[9] + 1);
        uint64_t v17 = *((void *)&__src[10] + 1);
        uint64_t v18 = *((void *)&__src[35] + 1);
        __int128 v26 = *(_OWORD *)((char *)&__src[36] + 8);
        uint64_t v19 = *((void *)&__src[37] + 1);
        LOBYTE(v28[0]) = __src[9];
        v27[0] = __src[10];
        *(void *)a1 = *(void *)&__src[0];
        *(_OWORD *)(a1 + 8) = *(_OWORD *)((char *)__src + 8);
        a1[24] = v11;
        a1[25] = v12;
        a1[26] = v13;
        *((_OWORD *)a1 + 2) = __src[2];
        a1[48] = v14;
        *(_OWORD *)(a1 + 56) = *(_OWORD *)((char *)&__src[3] + 8);
        *(_OWORD *)(a1 + 72) = *(_OWORD *)((char *)&__src[4] + 8);
        *(_OWORD *)(a1 + 88) = *(_OWORD *)((char *)&__src[5] + 8);
        *(_OWORD *)(a1 + 104) = *(_OWORD *)((char *)&__src[6] + 8);
        *((void *)a1 + 15) = v15;
        *((_OWORD *)a1 + 8) = __src[8];
        a1[144] = v28[0];
        *((void *)a1 + 19) = v16;
        a1[160] = v27[0];
        *((void *)a1 + 21) = v17;
        *((void *)a1 + 22) = *(void *)&__src[11];
        memcpy(a1 + 184, (char *)&__src[11] + 8, 0x179uLL);
        *((void *)a1 + 71) = v18;
        a1[576] = 1;
        *(_OWORD *)(a1 + 584) = v26;
        *((void *)a1 + 75) = v19;
        return;
      }

      uint64_t v20 = 1LL;
LABEL_8:
      uint64_t v21 = (void *)*((void *)&__src[37] + 1);
      while (1)
      {
        if (v21[2])
        {
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
          {
            uint64_t v22 = v21[2];
            if (!v22) {
              goto LABEL_33;
            }
          }

          else
          {
            uint64_t v21 = specialized _ArrayBuffer._consumeAndCreateNew()(v21);
            uint64_t v22 = v21[2];
            if (!v22) {
              goto LABEL_33;
            }
          }

          uint64_t v23 = v22 - 1;
          double v24 = *(double *)&v21[v23 + 4];
          v21[2] = v23;
          *((void *)&__src[37] + 1) = v21;
          if (__OFADD__(*((void *)&__src[10] + 1), 1LL))
          {
            __break(1u);
LABEL_33:
            __break(1u);
            break;
          }

          ++*((void *)&__src[10] + 1);
          if ((__src[9] & 1) != 0) {
            goto LABEL_29;
          }
          if (v24 >= *(double *)&__src[8])
          {
LABEL_29:
            *a2 = v24;
            if (v20 == a3) {
              goto LABEL_6;
            }
            ++a2;
            ++v20;
            goto LABEL_8;
          }
        }

        else
        {
          Calendar.DatesByRecurring.Iterator.nextGroup()();
          uint64_t v21 = (void *)*((void *)&__src[37] + 1);
          if (*(void *)(*((void *)&__src[37] + 1) + 16LL))
          {
            *(void *)&__src[37] = 0LL;
          }

          else
          {
            uint64_t v25 = *(void *)&__src[37] + 1LL;
            if (__OFADD__(*(void *)&__src[37], 1LL)) {
              goto LABEL_35;
            }
            ++*(void *)&__src[37];
          }
        }

        if ((__src[36] & 1) != 0) {
          goto LABEL_5;
        }
      }
    }

    __break(1u);
LABEL_35:
    __break(1u);
  }

  else
  {
LABEL_6:
    memcpy(a1, __src, 0x260uLL);
  }

uint64_t specialized Sequence._copySequenceContents(initializing:)(uint64_t a1, void *a2, uint64_t a3)
{
  void (*v52)(__int128 *__return_ptr, uint64_t, uint64_t);
  Swift::String v53;
  Swift::String v54;
  void (*v55)(__int128 *__return_ptr, uint64_t, uint64_t);
  uint64_t v56;
  uint64_t v57;
  os_unfair_lock_s *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  void *v62;
  void *v63;
  Swift::String v64;
  Swift::String v65;
  uint64_t v66;
  void (*v67)(__int128 *__return_ptr, uint64_t, uint64_t);
  uint64_t v68;
  Swift::String v69;
  Swift::String v70;
  uint64_t (*v71)(uint64_t, uint64_t);
  uint64_t v72;
  Swift::String v73;
  Swift::String v74;
  uint64_t (*v75)(uint64_t, uint64_t);
  uint64_t v76;
  Swift::String v77;
  uint64_t v78;
  uint64_t v79;
  unint64_t v80;
  uint64_t v81;
  void *v82;
  uint64_t v83;
  uint64_t v84;
  void *v85;
  Swift::String v86;
  Swift::String v87;
  Swift::String v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  unint64_t v92;
  char v93;
  uint64_t v95;
  uint64_t v96;
  BOOL v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  char *v103;
  uint64_t v104;
  os_log_s *v105;
  uint64_t v106;
  void *v107;
  double v108;
  double v109;
  int v110;
  uint64_t v111;
  int v112;
  uint64_t v113;
  uint64_t v114;
  __int128 v115;
  _BYTE v116[32];
  Swift::String v117;
  __int128 v118;
  _OWORD v119[2];
  uint64_t v120;
  unint64_t v121;
  uint64_t v122;
  unsigned __int8 v123;
  unsigned __int8 v124;
  _BYTE v125[282];
  char v126;
  char v127;
  _BYTE v128[282];
  unsigned __int8 v129;
  unsigned __int8 v130[8];
  _BYTE v131[320];
  int v6 = v3;
  uint64_t v106 = a3;
  uint64_t v107 = a2;
  __int128 v8 = (char *)(v3 + 331);
  uint64_t v9 = type metadata accessor for Mirror();
  uint64_t v99 = *(void *)(v9 - 8);
  uint64_t v100 = v9;
  MEMORY[0x1895F8858](v9);
  uint64_t v98 = (uint64_t)&v95 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = type metadata accessor for Logger();
  uint64_t v101 = *(void *)(v11 - 8);
  uint64_t v102 = v11;
  MEMORY[0x1895F8858](v11);
  uint64_t v103 = (char *)&v95 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = *(void *)v3;
  uint64_t v14 = *((void *)v3 + 1);
  uint64_t v15 = *((void *)v3 + 2);
  double v16 = *((double *)v3 + 4);
  uint64_t v108 = *((double *)v3 + 3);
  uint64_t v109 = v16;
  uint64_t v17 = v3 + 48;
  uint64_t v18 = v6[40];
  memcpy(v131, v17, 0x11AuLL);
  uint64_t v114 = v6[330];
  int v19 = v6[331];
  int v20 = v8[1];
  memcpy(v128, v17, sizeof(v128));
  *(void *)int v125 = v13;
  *(void *)&v125[8] = v14;
  swift_unknownObjectRetain();
  outlined retain of DateComponents((uint64_t)v131);
  BOOL v21 = DateComponents._validate(for:)((uint64_t *)v125);
  outlined release of Calendar.DatesByAdding((uint64_t)v6);
  uint64_t v22 = 1LL;
  v131[296] = 1;
  v131[288] = v18;
  uint64_t v23 = !v21;
  __int128 v129 = v18;
  memcpy(v128, v131, sizeof(v128));
  int v24 = v20;
  __int128 v127 = v19;
  __int128 v126 = v20;
  if (!v107)
  {
    char v35 = v20;
    *(_OWORD *)a1 = xmmword_1837A9530;
    *(_BYTE *)(a1 + 16) = 1;
    *(void *)(a1 + 24) = v15;
    double v36 = v109;
    *(double *)(a1 + 32) = v108;
    *(double *)(a1 + 40) = v36;
    *(_BYTE *)(a1 + 48) = v18;
    *(void *)(a1 + 56) = v15;
    *(void *)(a1 + 64) = v13;
    *(void *)(a1 + 72) = v14;
    memcpy((void *)(a1 + 80), v131, 0x11AuLL);
    uint64_t v25 = 0LL;
    *(_BYTE *)(a1 + 362) = v114;
    *(_BYTE *)(a1 + 363) = v19;
    *(_BYTE *)(a1 + 364) = v35;
    *(void *)(a1 + 368) = 100LL;
    *(_BYTE *)(a1 + 376) = v23;
    return v25;
  }

  uint64_t v97 = !v21;
  LODWORD(v105) = v18;
  uint64_t v104 = a1;
  __int128 v113 = v14;
  uint64_t v25 = v106;
  uint64_t v112 = v24;
  if (!v106)
  {
    uint64_t v23 = -1LL;
    uint64_t v32 = 0LL;
    uint64_t v4 = v15;
    double v37 = v108;
    uint64_t v18 = v13;
    uint64_t v13 = v104;
LABEL_18:
    BOOL v38 = v97;
    v125[0] = v25 == 0;
    char v39 = (char)v105;
    LOBYTE(v118) = (_BYTE)v105;
    *(void *)uint64_t v13 = v23;
    *(void *)(v13 + 8) = v32;
    *(_BYTE *)(v13 + 16) = v25 == 0;
    *(void *)(v13 + 24) = v4;
    double v40 = v109;
    *(double *)(v13 + 32) = v37;
    *(double *)(v13 + 40) = v40;
    *(_BYTE *)(v13 + 48) = v39;
    *(void *)(v13 + 56) = v15;
    uint64_t v41 = v113;
    *(void *)(v13 + 64) = v18;
    *(void *)(v13 + 72) = v41;
    memcpy((void *)(v13 + 80), v131, 0x11AuLL);
    *(_BYTE *)(v13 + 362) = v114;
    *(_BYTE *)(v13 + 363) = v19;
    *(_BYTE *)(v13 + 364) = v112;
    *(void *)(v13 + 368) = 100LL;
    *(_BYTE *)(v13 + 376) = v38;
    return v25;
  }

  if (v106 < 0)
  {
    __break(1u);
LABEL_56:
    swift_once();
    goto LABEL_24;
  }

  uint64_t v18 = v13;
  char v26 = v19;
  if (!v21)
  {
    uint64_t v25 = 0LL;
    uint64_t v5 = 0LL;
    uint64_t v23 = -1LL;
    uint64_t v4 = v15;
    uint64_t v42 = v113;
    double v43 = v108;
    double v44 = v109;
    char v45 = v112;
    uint64_t v13 = v104;
    unsigned __int8 v29 = 1;
    goto LABEL_49;
  }

  uint64_t v110 = v19;
  uint64_t v111 = v13;
  uint64_t v22 = 0LL;
  double v27 = v108;
  double v28 = v109;
  uint64_t v25 = -1LL;
  uint64_t v95 = 1LL;
  uint64_t v96 = 0LL;
  uint64_t v5 = 0LL;
  uint64_t v4 = v15;
  uint64_t v18 = 1LL;
  uint64_t v13 = v104;
  unsigned __int8 v29 = 1;
  uint64_t v30 = v111;
LABEL_6:
  uint64_t v31 = v25;
  do
  {
    uint64_t v23 = v25 + 1;
    if (__OFADD__(v25, 1LL))
    {
      __break(1u);
      goto LABEL_53;
    }

    *(void *)&uint64_t v115 = v30;
    *((void *)&v115 + 1) = v113;
    v117._uint64_t countAndFlagsBits = v15;
    memcpy(v125, v131, sizeof(v125));
    v130[0] = v114;
    unint64_t v124 = v110;
    uint64_t v123 = v112;
    uint64_t v122 = v4;
    uint64_t v120 = v5;
    LOBYTE(v121) = v18 & 1;
    swift_unknownObjectRetain();
    outlined retain of DateComponents((uint64_t)v131);
    Calendar._enumerateDatesStep(startingAfter:matching:matchingPolicy:repeatedTimePolicy:direction:inSearchingDate:previouslyReturnedMatchDate:)( (double *)&v117._countAndFlagsBits,  v125,  v130,  &v124,  &v123,  (double *)&v122,  (uint64_t)&v120,  (uint64_t)&v118);
    outlined release of DateComponents((uint64_t)v131);
    swift_unknownObjectRelease();
    uint64_t v4 = *(void *)&v119[0];
    if (BYTE8(v118) != 2)
    {
      uint64_t v32 = v118;
      uint64_t v18 = v111;
      if ((v105 & 1) != 0)
      {
LABEL_14:
        uint64_t v25 = v106;
        uint64_t v33 = v107;
        *uint64_t v107 = v118;
        uint64_t v34 = v95;
        if (v95 != v25)
        {
          unsigned __int8 v29 = 0;
          uint64_t v18 = 0LL;
          uint64_t v107 = v33 + 1;
          ++v95;
          uint64_t v96 = v34;
          uint64_t v5 = v32;
          uint64_t v25 = v23;
          goto LABEL_6;
        }

        double v37 = v108;
        LOBYTE(v19) = v110;
        goto LABEL_18;
      }

      uint64_t v25 = v96;
      if (*(double *)&v118 >= v27)
      {
        if (*(double *)&v118 >= v28)
        {
          uint64_t v42 = v113;
          double v43 = v108;
          double v44 = v109;
          char v26 = v110;
          uint64_t v25 = v96;
          char v45 = v112;
          goto LABEL_49;
        }

        goto LABEL_14;
      }

uint64_t specialized Sequence._copySequenceContents(initializing:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void (*v19)(double *__return_ptr, _BYTE *, double *, void, uint64_t, uint64_t);
  double v20;
  double v21;
  double v22;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;
  uint64_t v26;
  double v27;
  double v28;
  unsigned int v29;
  uint64_t v30;
  _BYTE __src[296];
  double v32;
  double v33[36];
  _BYTE v34[288];
  _BYTE __dst[288];
  _BYTE v36[289];
  char v37;
  uint64_t v7 = *(void *)v3;
  uint64_t v30 = *(void *)(v3 + 8);
  double v8 = *(double *)(v3 + 16);
  double v10 = *(double *)(v3 + 24);
  double v9 = *(double *)(v3 + 32);
  char v11 = *(_BYTE *)(v3 + 40);
  memcpy(__dst, (const void *)(v3 + 48), 0x11AuLL);
  unsigned __int8 v29 = *(unsigned __int8 *)(v3 + 330);
  double v37 = v11;
  memcpy(&v36[7], (const void *)(v3 + 48), 0x11AuLL);
  swift_unknownObjectRetain();
  outlined retain of DateComponents((uint64_t)__dst);
  uint64_t result = outlined release of Calendar.DatesByAdding(v3);
  if (!a2)
  {
    *(void *)a1 = v7;
    *(void *)(a1 + 8) = v30;
    *(double *)(a1 + 16) = v8;
    *(double *)(a1 + 24) = v10;
    *(double *)(a1 + 32) = v9;
    *(_BYTE *)(a1 + 40) = v37;
    memcpy((void *)(a1 + 41), v36, 0x121uLL);
    a3 = 0LL;
    *(_BYTE *)(a1 + 330) = v29;
    *(_BYTE *)(a1 + 331) = 0;
    *(void *)(a1 + 336) = 1LL;
    return a3;
  }

  uint64_t v13 = a2;
  double v14 = v10;
  double v28 = v9;
  char v15 = v29;
  if (!a3)
  {
    uint64_t v25 = 1LL;
LABEL_21:
    v34[0] = v11;
    memcpy(&__src[7], __dst, 0x11AuLL);
    *(void *)a1 = v7;
    *(void *)(a1 + 8) = v30;
    *(double *)(a1 + 16) = v8;
    *(double *)(a1 + 24) = v14;
    *(double *)(a1 + 32) = v28;
    *(_BYTE *)(a1 + 40) = v34[0];
    memcpy((void *)(a1 + 41), __src, 0x121uLL);
    *(_BYTE *)(a1 + 330) = v15;
    *(_BYTE *)(a1 + 331) = 0;
    *(void *)(a1 + 336) = v25;
    return a3;
  }

  if ((a3 & 0x8000000000000000LL) == 0)
  {
    uint64_t ObjectType = swift_getObjectType();
    double v17 = v14;
    uint64_t v18 = 0LL;
    int v19 = *(void (**)(double *__return_ptr, _BYTE *, double *, void, uint64_t, uint64_t))(v30 + 200);
    int v20 = 1.59271755e13;
    if (v8 <= 1.59271755e13) {
      int v20 = v8;
    }
    BOOL v21 = fmax(v20, -2.11845067e11);
    char v26 = a3;
    double v27 = v17;
    uint64_t v22 = v17;
    uint64_t v23 = a3 - 1;
    while (1)
    {
      memcpy(v33, __dst, 0x11AuLL);
      DateComponents.scaled(by:)(v18 + 1, (uint64_t)__src);
      memcpy(v34, __src, 0x11AuLL);
      memcpy(__src, v34, 0x11AuLL);
      uint64_t v32 = v21;
      swift_unknownObjectRetain();
      v19(v33, __src, &v32, v29, ObjectType, v30);
      swift_unknownObjectRelease();
      uint64_t result = outlined release of DateComponents((uint64_t)v34);
      if ((LOBYTE(v33[1]) & 1) != 0 || (v11 & 1) == 0 && (v33[0] >= v22 ? (int v24 = v33[0] < v28) : (int v24 = 0), !v24))
      {
        LOBYTE(v33[0]) = v11;
        memcpy(&__src[7], __dst, 0x11AuLL);
        *(void *)a1 = v7;
        *(void *)(a1 + 8) = v30;
        *(double *)(a1 + 16) = v8;
        *(double *)(a1 + 24) = v27;
        *(double *)(a1 + 32) = v28;
        *(_BYTE *)(a1 + 40) = LOBYTE(v33[0]);
        memcpy((void *)(a1 + 41), __src, 0x121uLL);
        *(_BYTE *)(a1 + 330) = v29;
        *(_BYTE *)(a1 + 331) = 1;
        *(void *)(a1 + 336) = v18 + 1;
        return v18;
      }

      if (v18 == 0x7FFFFFFFFFFFFFFELL) {
        break;
      }
      *(double *)(v13 + 8 * v18) = v33[0];
      if (v23 == v18)
      {
        uint64_t v25 = v18 + 2;
        char v15 = v29;
        a3 = v26;
        double v14 = v27;
        goto LABEL_21;
      }

      ++v18;
    }

    __break(1u);
  }

  __break(1u);
  return result;
}

uint64_t specialized Sequence._copySequenceContents(initializing:)( void *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  if (a2)
  {
    uint64_t v6 = a3;
    if (a3)
    {
      if (a3 < 0) {
        __break(1u);
      }
      uint64_t v7 = a2;
      uint64_t v8 = 0LL;
      if (uenum_next())
      {
        uint64_t v8 = 0LL;
        while (1)
        {
          uint64_t *v7 = String.init(cString:)();
          v7[1] = v9;
          if (v6 - 1 == v8) {
            break;
          }
          v7 += 2;
          ++v8;
          if (!uenum_next()) {
            goto LABEL_8;
          }
        }
      }

      else
      {
LABEL_8:
        uint64_t v6 = v8;
      }
    }
  }

  else
  {
    uint64_t v6 = 0LL;
  }

  *a1 = 0LL;
  a1[1] = a4;
  return v6;
}

uint64_t specialized Sequence._copySequenceContents(initializing:)( uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4, unint64_t a5, char a6, timespec *a7)
{
  uint64_t v89 = a2;
  uint64_t v94 = *MEMORY[0x1895F89C0];
  type metadata accessor for _POSIXDirectoryContentsSequence.Iterator();
  uint64_t v13 = swift_allocObject();
  *(void *)(v13 + 16) = 0LL;
  *(void *)(v13 + 64) = 0LL;
  if ((a5 & 0x1000000000000000LL) != 0)
  {
    Swift::Int v14 = String.UTF8View._foreignCount()();
  }

  else if ((a5 & 0x2000000000000000LL) != 0)
  {
    Swift::Int v14 = HIBYTE(a5) & 0xF;
  }

  else
  {
    Swift::Int v14 = a4 & 0xFFFFFFFFFFFFLL;
  }

  uint64_t v15 = 3 * v14;
  if ((unsigned __int128)(v14 * (__int128)3LL) >> 64 != (3 * v14) >> 63)
  {
    __break(1u);
    goto LABEL_88;
  }

  if (v15 < -1)
  {
LABEL_88:
    __break(1u);
    goto LABEL_89;
  }

  uint64_t v16 = v15 + 1;
  swift_bridgeObjectRetain();
  uint64_t isStackAllocationSafe = swift_bridgeObjectRetain();
  p_st_atimespec = a7;
  uint64_t v88 = a1;
  uint64_t v87 = a3;
  if (v15 >= 1024)
  {
    uint64_t isStackAllocationSafe = swift_stdlib_isStackAllocationSafe();
    if ((isStackAllocationSafe & 1) == 0)
    {
      uint64_t v23 = (const char *)swift_slowAlloc();
      swift_bridgeObjectRetain();
      String._decomposed(_:into:nullTerminated:)(1, (uint64_t)v23, v16, 1, a4, a5);
      char v25 = v24;
      swift_bridgeObjectRelease();
      if ((v25 & 1) != 0)
      {
        MEMORY[0x186E20E60](v23, -1LL, -1LL);
        goto LABEL_35;
      }

      uint64_t v22 = opendir(v23);
      MEMORY[0x186E20E60](v23, -1LL, -1LL);
      if (!v22) {
        goto LABEL_35;
      }
LABEL_15:
      *(void *)(v13 + 24) = a4;
      *(void *)(v13 + 32) = a5;
      *(void *)(v13 + 16) = v22;
      *(_BYTE *)(v13 + 56) = a6 & 1;
      __darwin_time_t tv_sec = a7[1].tv_sec;
      if (tv_sec)
      {
        double v27 = (__darwin_ino64_t *)(swift_bridgeObjectRetain() + 40);
        double v28 = (void *)MEMORY[0x18961AFE8];
        do
        {
          uint64_t v30 = *(v27 - 1);
          __darwin_ino64_t st_ino = *v27;
          uint64_t v32 = HIBYTE(*v27) & 0xF;
          if ((*v27 & 0x2000000000000000LL) == 0) {
            uint64_t v32 = v30 & 0xFFFFFFFFFFFFLL;
          }
          if (v32)
          {
            swift_bridgeObjectRetain_n();
            String.index(before:)();
            uint64_t v33 = String.subscript.getter();
            uint64_t v35 = v34;
            swift_bridgeObjectRelease();
            if (v33 == 47 && v35 == 0xE100000000000000LL)
            {
              swift_bridgeObjectRelease();
            }

            else
            {
              char v37 = _stringCompareWithSmolCheck(_:_:expecting:)();
              swift_bridgeObjectRelease();
              if ((v37 & 1) == 0)
              {
                *(void *)&v93.st_dev = v30;
                v93.__darwin_ino64_t st_ino = st_ino;
                swift_bridgeObjectRetain();
                v38._uint64_t countAndFlagsBits = 47LL;
                v38._uint64_t object = (void *)0xE100000000000000LL;
                String.append(_:)(v38);
                swift_bridgeObjectRelease();
                uint64_t v30 = *(void *)&v93.st_dev;
                __darwin_ino64_t st_ino = v93.st_ino;
              }
            }

            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
              double v28 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  v28[2] + 1LL,  1,  v28);
            }
            unint64_t v40 = v28[2];
            unint64_t v39 = v28[3];
            if (v40 >= v39 >> 1) {
              double v28 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (void *)(v39 > 1),  v40 + 1,  1,  v28);
            }
            v28[2] = v40 + 1;
            unsigned __int8 v29 = &v28[2 * v40];
            void v29[4] = v30;
            v29[5] = st_ino;
          }

          v27 += 2;
          --tv_sec;
        }

        while (tv_sec);
        swift_bridgeObjectRelease();
        a3 = v87;
      }

      else
      {
        double v28 = (void *)MEMORY[0x18961AFE8];
      }

      swift_bridgeObjectRelease();
      *(void *)&v93.st_dev = v28;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
      lazy protocol witness table accessor for type [String] and conformance [A]();
      uint64_t v46 = BidirectionalCollection<>.joined(separator:)();
      uint64_t v48 = v47;
      swift_bridgeObjectRelease();
      *(void *)(v13 + 40) = v46;
      *(void *)(v13 + 48) = v48;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_51;
    }
  }

  MEMORY[0x1895F8858](isStackAllocationSafe);
  int v19 = (char *)&v87 - v18;
  swift_bridgeObjectRetain();
  String._decomposed(_:into:nullTerminated:)(1, (uint64_t)v19, v16, 1, a4, a5);
  char v21 = v20;
  swift_bridgeObjectRelease();
  if ((v21 & 1) == 0)
  {
    uint64_t v22 = opendir(v19);
    a7 = p_st_atimespec;
    if (v22) {
      goto LABEL_15;
    }
  }

uint64_t specialized Sequence._copySequenceContents(initializing:)( uint64_t *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v29 = *MEMORY[0x1895F89C0];
  type metadata accessor for _DarwinSearchPathsSequence.Iterator();
  uint64_t v10 = swift_allocObject();
  *(void *)(v10 + 16) = a4;
  *(void *)(v10 + 24) = a5;
  uint64_t started = sysdir_start_search_path_enumeration_private();
  uint64_t v12 = 0LL;
  *(_DWORD *)(v10 + 32) = started;
  if (!a2 || !a3) {
    goto LABEL_15;
  }
  if (a3 < 0) {
    __break(1u);
  }
  uint64_t v13 = started;
  double v28 = a1;
  uint64_t v12 = 0LL;
  while (1)
  {
    uint64_t isStackAllocationSafe = swift_stdlib_isStackAllocationSafe();
    if ((isStackAllocationSafe & 1) != 0)
    {
      MEMORY[0x1895F8858](isStackAllocationSafe);
      uint64_t v15 = MEMORY[0x186E20FE0](v13, v27);
      *(_DWORD *)(v10 + 32) = v15;
      if (!(_DWORD)v15) {
        goto LABEL_14;
      }
      uint64_t v13 = v15;
      id v16 = objc_msgSend((id)objc_opt_self(), sel_defaultManager);
      id v17 = objc_msgSend(v16, sel_stringWithFileSystemRepresentation_length_, v27, strlen(v27));

      id v18 = static String._unconditionallyBridgeFromObjectiveC(_:)(v17);
      uint64_t v20 = v19;

      goto LABEL_5;
    }

    char v21 = (const char *)swift_slowAlloc();
    uint64_t v22 = MEMORY[0x186E20FE0](v13, v21);
    *(_DWORD *)(v10 + 32) = v22;
    if (!(_DWORD)v22) {
      break;
    }
    uint64_t v13 = v22;
    id v23 = objc_msgSend((id)objc_opt_self(), sel_defaultManager);
    id v24 = objc_msgSend(v23, sel_stringWithFileSystemRepresentation_length_, v21, strlen(v21));

    id v18 = static String._unconditionallyBridgeFromObjectiveC(_:)(v24);
    uint64_t v20 = v25;

    MEMORY[0x186E20E60](v21, -1LL, -1LL);
LABEL_5:
    ++v12;
    *a2 = v18;
    a2[1] = v20;
    a2 += 2;
    if (a3 == v12)
    {
      uint64_t v12 = a3;
      goto LABEL_14;
    }
  }

  MEMORY[0x186E20E60](v21, -1LL, -1LL);
LABEL_14:
  a1 = v28;
LABEL_15:
  *a1 = v10;
  return v12;
}

uint64_t specialized Sequence._copySequenceContents(initializing:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, char a6)
{
  uint64_t v31 = *MEMORY[0x1895F89C0];
  v23[0] = 0;
  int v9 = a6 & 1;
  uint64_t v24 = 0LL;
  uint64_t v25 = a4;
  unint64_t v26 = a5;
  uint64_t v27 = 0LL;
  if ((a5 & 0x2000000000000000LL) != 0) {
    uint64_t v10 = HIBYTE(a5) & 0xF;
  }
  else {
    uint64_t v10 = a4 & 0xFFFFFFFFFFFFLL;
  }
  uint64_t v28 = v10;
  char v29 = a6 & 1;
  char v30 = 0;
  if (a2)
  {
    if (a3)
    {
      if (a3 < 0) {
        __break(1u);
      }
      uint64_t v12 = 0LL;
      uint64_t v13 = 0LL;
      uint64_t v14 = 0LL;
      unsigned int v15 = 0;
      uint64_t v22 = a3;
      uint64_t v16 = a3 - 1;
LABEL_12:
      if (v13 >= v10)
      {
LABEL_36:
        char v20 = 1;
        a3 = v12;
        goto LABEL_33;
      }

      if ((a5 & 0x1000000000000000LL) != 0)
      {
        unsigned int v18 = _StringGuts.foreignErrorCorrectedScalar(startingAt:)();
      }

      else
      {
        if ((a5 & 0x2000000000000000LL) == 0 && (a4 & 0x1000000000000000LL) == 0) {
          _StringObject.sharedUTF8.getter();
        }
        unsigned int v18 = _decodeScalar(_:startingAt:)();
      }

      unsigned int v15 = bswap32(v18);
      if (!v9) {
        unsigned int v15 = v18;
      }
      v23[0] = v15;
      v13 += v19;
      uint64_t v27 = v13;
      uint64_t v24 = 1LL;
      *(_BYTE *)(a2 + v12) = v15;
      if (v16 != v12)
      {
        uint64_t v14 = 1LL;
        while (v16 != v12)
        {
          ++v12;
          if (v14 < 1) {
            goto LABEL_12;
          }
          if (__OFADD__(v14, 1LL)) {
            goto LABEL_35;
          }
          char v17 = *((_BYTE *)v23 + v14);
          uint64_t v24 = v14 + 1;
          if (v14 == 3)
          {
            uint64_t v14 = 0LL;
            uint64_t v24 = 0LL;
            *(_BYTE *)(a2 + v12) = v17;
            if (v16 == v12)
            {
              char v20 = 0;
              goto LABEL_32;
            }
          }

          else
          {
            *(_BYTE *)(a2 + v12) = v17;
            if (v16 == v12)
            {
              char v20 = 0;
              ++v14;
              goto LABEL_32;
            }

            ++v14;
          }
        }

        __break(1u);
LABEL_35:
        __break(1u);
        goto LABEL_36;
      }

      char v20 = 0;
      uint64_t v14 = 1LL;
LABEL_32:
      a3 = v22;
    }

    else
    {
      unsigned int v15 = 0;
      uint64_t v14 = 0LL;
      uint64_t v13 = 0LL;
      char v20 = 0;
    }
  }

  else
  {
    unsigned int v15 = 0;
    uint64_t v14 = 0LL;
    uint64_t v13 = 0LL;
    char v20 = 0;
    a3 = 0LL;
  }

uint64_t specialized Sequence._copySequenceContents(initializing:)(uint64_t result, void *a2, uint64_t a3)
{
  uint64_t v4 = (_OWORD *)v3;
  uint64_t v139 = result;
  __int128 v5 = *(_OWORD *)(v3 + 144);
  __int128 v6 = *(_OWORD *)(v3 + 176);
  v199[10] = *(_OWORD *)(v3 + 160);
  v199[11] = v6;
  uint64_t v200 = *(void *)(v3 + 192);
  __int128 v7 = *(_OWORD *)(v3 + 80);
  __int128 v8 = *(_OWORD *)(v3 + 112);
  __int128 v9 = *(_OWORD *)(v3 + 128);
  v199[6] = *(_OWORD *)(v3 + 96);
  v199[7] = v8;
  v199[8] = v9;
  v199[9] = v5;
  __int128 v10 = *(_OWORD *)(v3 + 16);
  __int128 v11 = *(_OWORD *)(v3 + 48);
  v199[2] = *(_OWORD *)(v3 + 32);
  v199[3] = v11;
  v199[4] = *(_OWORD *)(v3 + 64);
  v199[5] = v7;
  v199[0] = *(_OWORD *)v3;
  v199[1] = v10;
  uint64_t v12 = *(void *)(v3 + 8);
  uint64_t v13 = *(void *)(v3 + 16);
  uint64_t v14 = *(void *)(v3 + 24);
  uint64_t v15 = *(void *)(v3 + 32);
  unint64_t v17 = *(void *)(v3 + 40);
  uint64_t v16 = *(void *)(v3 + 48);
  uint64_t v18 = *(void *)(v3 + 56);
  uint64_t v19 = *(void *)(v3 + 64);
  uint64_t v171 = v18;
  if (!a2)
  {
    a3 = 0LL;
    goto LABEL_196;
  }

  if (!a3)
  {
    uint64_t v4 = v199;
    goto LABEL_196;
  }

  if (a3 < 0) {
    goto LABEL_220;
  }
  uint64_t v20 = *((void *)v4 + 9);
  if (v20 == v12)
  {
    a3 = 0LL;
    uint64_t v4 = v199;
    goto LABEL_196;
  }

  uint64_t v137 = v20 - v12;
  if (v20 <= v12)
  {
LABEL_193:
    __break(1u);
LABEL_194:
    uint64_t v4 = v199;
    uint64_t v12 = v138;
LABEL_196:
    __int128 v130 = v4[11];
    *(_OWORD *)(v139 + 160) = v4[10];
    *(_OWORD *)(v139 + 176) = v130;
    uint64_t v131 = *((void *)v4 + 24);
    __int128 v132 = v4[7];
    *(_OWORD *)(v139 + 96) = v4[6];
    *(_OWORD *)(v139 + 112) = v132;
    __int128 v133 = v4[9];
    *(_OWORD *)(v139 + 128) = v4[8];
    *(_OWORD *)(v139 + 144) = v133;
    __int128 v134 = v4[3];
    *(_OWORD *)(v139 + 32) = v4[2];
    *(_OWORD *)(v139 + 48) = v134;
    __int128 v135 = v4[5];
    *(_OWORD *)(v139 + 64) = v4[4];
    *(_OWORD *)(v139 + 80) = v135;
    __int128 v136 = v4[1];
    *(_OWORD *)uint64_t v139 = *v4;
    *(_OWORD *)(v139 + 16) = v136;
    *(void *)(v139 + 192) = v131;
    *(void *)(v139 + 200) = v12;
    *(void *)(v139 + 208) = v13;
    *(void *)(v139 + 216) = v14;
    *(void *)(v139 + 224) = v15;
    *(void *)(v139 + 232) = v17;
    *(void *)(v139 + 240) = v16;
    *(void *)(v139 + 248) = v171;
    *(void *)(v139 + 256) = v19;
    return a3;
  }

  char v21 = a2;
  uint64_t v22 = *(void **)v4;
  uint64_t v147 = *((void *)v4 + 18);
  unint64_t v148 = *((void *)v4 + 17);
  uint64_t v142 = a3;
  int64_t v143 = *((void *)v4 + 21) >> 11;
  uint64_t v174 = (__int128 *)(*(void *)v4 + 16LL);
  uint64_t v138 = v12 + a3;
  uint64_t v145 = *((void *)v4 + 19);
  unint64_t v146 = v148 >> 10;
  uint64_t v144 = *((void *)v4 + 20);
  uint64_t v23 = 1LL;
  uint64_t v24 = v12;
  uint64_t v140 = v12;
  uint64_t v141 = *((void *)v4 + 9);
  __int128 v163 = *(void **)v4;
  while (1)
  {
    uint64_t v164 = v13;
    unint64_t v166 = v17;
    uint64_t v169 = v19;
    uint64_t v170 = v24;
    unint64_t v150 = v14;
    uint64_t v162 = v23;
    if (v15 == 1 || v13 != v22[11])
    {
      uint64_t v30 = v22[8];
      uint64_t v31 = v22[9];
      if (v30) {
        uint64_t v32 = v22[9];
      }
      else {
        uint64_t v32 = 0LL;
      }
      if (v24 < 0 || v32 < v24) {
        goto LABEL_216;
      }
      uint64_t v167 = v22[11];
      if (!v30)
      {
        unint64_t v160 = 0LL;
        uint64_t v38 = 0LL;
        uint64_t v46 = 0LL;
LABEL_71:
        uint64_t v19 = v169;
        goto LABEL_72;
      }

      uint64_t v33 = v22[10];
      uint64_t v34 = *(unsigned __int8 *)(v30 + 18);
      if (v24 >= v31 || !*(_WORD *)(v30 + 16))
      {
        unint64_t v47 = ((-15LL << ((4 * v34 + 8) & 0x3C)) - 1) & v34 | ((unint64_t)*(unsigned __int16 *)(v30 + 16) << ((4 * v34 + 8) & 0x3C));
        swift_unknownObjectRetain();
        uint64_t v38 = 0LL;
LABEL_70:
        swift_unknownObjectRetain();
        unint64_t v160 = v47;
        uint64_t v46 = specialized Rope._Node.distanceFromStart<A>(to:in:)(v167, v47, v38, v30, v31, v33);
        swift_unknownObjectRelease_n();
        unint64_t v17 = v166;
        goto LABEL_71;
      }

      if (*(_BYTE *)(v30 + 18))
      {
        uint64_t result = swift_unknownObjectRetain_n();
        uint64_t v35 = v24;
        uint64_t v36 = v30;
        while (1)
        {
          uint64_t v39 = *(unsigned __int16 *)(v36 + 16);
          if (!*(_WORD *)(v36 + 16)) {
            break;
          }
          uint64_t v40 = *(void *)(v36 + 32);
          BOOL v41 = __OFSUB__(v35, v40);
          uint64_t v42 = v35 - v40;
          if (v41) {
            goto LABEL_206;
          }
          if (__OFADD__(v42, 1LL)) {
            goto LABEL_207;
          }
          if (v42 + 1 < 1)
          {
            uint64_t v39 = 0LL;
            goto LABEL_27;
          }

          if ((_DWORD)v39 == 1)
          {
            uint64_t v35 = v42;
            break;
          }

          int v43 = (uint64_t *)(v36 + 56);
          uint64_t v44 = 1LL;
          while (1)
          {
            uint64_t v45 = *v43;
            v43 += 3;
            uint64_t v35 = v42 - v45;
            if (__OFSUB__(v42, v45))
            {
              __break(1u);
LABEL_198:
              __break(1u);
LABEL_199:
              __break(1u);
LABEL_200:
              __break(1u);
LABEL_201:
              __break(1u);
LABEL_202:
              __break(1u);
              goto LABEL_203;
            }

            if (__OFADD__(v35, 1LL)) {
              goto LABEL_198;
            }
            if (v35 + 1 < 1) {
              break;
            }
            ++v44;
            uint64_t v42 = v35;
            if (v39 == v44) {
              goto LABEL_26;
            }
          }

          uint64_t v39 = v44;
          uint64_t v35 = v42;
LABEL_27:
          char v37 = (4 * *(_BYTE *)(v36 + 18) + 8) & 0x3C;
          uint64_t v34 = ((-15LL << v37) - 1) & v34 | (v39 << v37);
          uint64_t v38 = *(void *)(v36 + 24 + 24 * v39);
          swift_unknownObjectRetain();
          uint64_t result = swift_unknownObjectRelease();
          uint64_t v36 = v38;
          if (!*(_BYTE *)(v38 + 18)) {
            goto LABEL_47;
          }
        }

uint64_t specialized Sequence._copySequenceContents(initializing:)( uint64_t result, void *a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6)
{
  unint64_t v6 = a4[8];
  if (v6) {
    uint64_t v7 = a4[10];
  }
  else {
    uint64_t v7 = 0LL;
  }
  if (a5 < 0 || v7 < a5) {
    goto LABEL_266;
  }
  uint64_t v8 = a6;
  uint64_t v10 = a4[9];
  uint64_t v114 = a4[11];
  uint64_t v103 = (void *)result;
  if (!v6 || (a4[10] > a5 ? (BOOL v11 = *(unsigned __int16 *)(v6 + 16) == 0) : (BOOL v11 = 1), v11))
  {
    swift_unknownObjectRetain_n();
    swift_retain();
    unint64_t v12 = specialized Rope._endPath.getter(v6);
    swift_unknownObjectRelease();
    uint64_t v13 = 0LL;
    uint64_t v14 = 0LL;
    if (!v6) {
      goto LABEL_61;
    }
    goto LABEL_13;
  }

  uint64_t v16 = *(unsigned __int8 *)(v6 + 18);
  if (*(_BYTE *)(v6 + 18))
  {
    swift_unknownObjectRetain_n();
    uint64_t result = swift_retain();
    uint64_t v14 = a5;
    unint64_t v17 = v6;
    while (1)
    {
      uint64_t v19 = *(unsigned __int16 *)(v17 + 16);
      if (!*(_WORD *)(v17 + 16)) {
        goto LABEL_17;
      }
      uint64_t v20 = *(void *)(v17 + 40);
      uint64_t v21 = v14 - v20;
      if (__OFSUB__(v14, v20)) {
        goto LABEL_255;
      }
      if (__OFADD__(v21, 1LL)) {
        goto LABEL_256;
      }
      if (v21 + 1 <= 0)
      {
        uint64_t v19 = 0LL;
        goto LABEL_18;
      }

      if ((_DWORD)v19 == 1) {
        break;
      }
      uint64_t v22 = *(void *)(v17 + 64);
      BOOL v23 = __OFSUB__(v21, v22);
      uint64_t v24 = v21 - v22;
      if (v23) {
        goto LABEL_264;
      }
      if (__OFADD__(v24, 1LL)) {
        goto LABEL_265;
      }
      if (v24 + 1 < 1)
      {
        uint64_t v19 = 1LL;
        uint64_t v14 = v21;
        goto LABEL_18;
      }

      if ((_DWORD)v19 == 2)
      {
        uint64_t v14 = v24;
        goto LABEL_17;
      }

      unint64_t v25 = (void *)(v17 + 88);
      uint64_t v26 = 2LL;
      while (1)
      {
        if (v19 == v26) {
          goto LABEL_240;
        }
        uint64_t v14 = v24 - *v25;
        if (__OFSUB__(v24, *v25))
        {
LABEL_241:
          __break(1u);
LABEL_242:
          __break(1u);
LABEL_243:
          __break(1u);
LABEL_244:
          __break(1u);
LABEL_245:
          __break(1u);
LABEL_246:
          __break(1u);
LABEL_247:
          __break(1u);
LABEL_248:
          __break(1u);
LABEL_249:
          __break(1u);
LABEL_250:
          __break(1u);
LABEL_251:
          __break(1u);
LABEL_252:
          __break(1u);
LABEL_253:
          __break(1u);
          goto LABEL_254;
        }

        if (__OFADD__(v14, 1LL)) {
          goto LABEL_242;
        }
        if (v14 + 1 < 1) {
          break;
        }
        ++v26;
        v25 += 3;
        uint64_t v24 = v14;
        if (v19 == v26) {
          goto LABEL_17;
        }
      }

      uint64_t v19 = v26;
      uint64_t v14 = v24;
LABEL_18:
      char v18 = (4 * *(_BYTE *)(v17 + 18) + 8) & 0x3C;
      uint64_t v16 = ((-15LL << v18) - 1) & v16 | (v19 << v18);
      uint64_t v13 = *(void *)(v17 + 24 + 24 * v19);
      swift_unknownObjectRetain();
      uint64_t result = swift_unknownObjectRelease();
      unint64_t v17 = v13;
      if (!*(_BYTE *)(v13 + 18)) {
        goto LABEL_40;
      }
    }

    v14 -= v20;
LABEL_17:
    if (!v14) {
      goto LABEL_18;
    }
LABEL_254:
    __break(1u);
LABEL_255:
    __break(1u);
LABEL_256:
    __break(1u);
LABEL_257:
    __break(1u);
LABEL_258:
    __break(1u);
LABEL_259:
    __break(1u);
LABEL_260:
    __break(1u);
LABEL_261:
    __break(1u);
LABEL_262:
    __break(1u);
LABEL_263:
    __break(1u);
LABEL_264:
    __break(1u);
LABEL_265:
    __break(1u);
LABEL_266:
    __break(1u);
LABEL_267:
    __break(1u);
LABEL_268:
    __break(1u);
LABEL_269:
    __break(1u);
LABEL_270:
    __break(1u);
LABEL_271:
    __break(1u);
LABEL_272:
    __break(1u);
LABEL_273:
    __break(1u);
LABEL_274:
    __break(1u);
    goto LABEL_275;
  }

  swift_unknownObjectRetain_n();
  uint64_t result = swift_retain();
  uint64_t v14 = a5;
  uint64_t v13 = v6;
LABEL_40:
  uint64_t v27 = *(unsigned __int16 *)(v13 + 16);
  if (!*(_WORD *)(v13 + 16)) {
    goto LABEL_59;
  }
  uint64_t v28 = *(void *)(v13 + 24);
  uint64_t v29 = v14 - v28;
  if (__OFSUB__(v14, v28))
  {
LABEL_285:
    __break(1u);
    goto LABEL_286;
  }

  if (__OFADD__(v29, 1LL))
  {
LABEL_286:
    __break(1u);
LABEL_287:
    __break(1u);
LABEL_288:
    __break(1u);
    goto LABEL_289;
  }

  if (v29 + 1 <= 0)
  {
    uint64_t v27 = 0LL;
    goto LABEL_60;
  }

  if ((_DWORD)v27 == 1)
  {
    v14 -= v28;
    goto LABEL_59;
  }

  uint64_t v30 = *(void *)(v13 + 48);
  BOOL v23 = __OFSUB__(v29, v30);
  uint64_t v31 = v29 - v30;
  if (v23)
  {
LABEL_289:
    __break(1u);
    goto LABEL_290;
  }

  if (!__OFADD__(v31, 1LL))
  {
    if (v31 + 1 < 1)
    {
      uint64_t v27 = 1LL;
      uint64_t v14 = v29;
      goto LABEL_60;
    }

    if ((_DWORD)v27 != 2)
    {
      uint64_t v32 = (void *)(v13 + 72);
      uint64_t v33 = 2LL;
      while (1)
      {
        if (v27 == v33) {
          goto LABEL_278;
        }
        uint64_t v14 = v31 - *v32;
        if (__OFSUB__(v31, *v32)) {
          break;
        }
        if (__OFADD__(v14, 1LL)) {
          goto LABEL_280;
        }
        if (v14 + 1 < 1) {
          goto LABEL_233;
        }
        ++v33;
        v32 += 3;
        uint64_t v31 = v14;
        if (v27 == v33) {
          goto LABEL_59;
        }
      }

uint64_t specialized Sequence._copySequenceContents(initializing:)(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v8 = *(void *)v3;
  unint64_t v9 = *(void *)(v3 + 8);
  uint64_t v10 = *(void *)(v3 + 16);
  uint64_t v11 = *(void *)(v3 + 24);
  uint64_t v12 = *(void *)(v3 + 32);
  uint64_t v13 = *(void *)(v3 + 72);
  __int128 v32 = *(_OWORD *)(v3 + 56);
  __int128 v33 = *(_OWORD *)(v3 + 40);
  if (!a2) {
    goto LABEL_5;
  }
  if (!a3)
  {
LABEL_6:
    unint64_t v4 = *(void *)(v3 + 8);
    uint64_t v5 = *(void *)(v3 + 16);
    uint64_t v6 = *(void *)(v3 + 24);
    uint64_t v7 = *(void *)(v3 + 32);
LABEL_7:
    *(void *)uint64_t result = v8;
    *(void *)(result + 8) = v9;
    *(void *)(result + 16) = v10;
    *(void *)(result + 24) = v11;
    *(void *)(result + 32) = v12;
    *(_OWORD *)(result + 40) = v33;
    *(_OWORD *)(result + 56) = v32;
    *(void *)(result + 72) = v13;
    *(void *)(result + 80) = v4;
    *(void *)(result + 88) = v5;
    *(void *)(result + 96) = v6;
    *(void *)(result + 104) = v7;
    return a3;
  }

  if ((a3 & 0x8000000000000000LL) == 0)
  {
    unint64_t v14 = (unint64_t)v33 >> 10;
    unint64_t v34 = v9 >> 10;
    if (v9 >> 10 == (unint64_t)v33 >> 10)
    {
LABEL_5:
      a3 = 0LL;
      goto LABEL_6;
    }

    uint64_t v24 = result;
    uint64_t v25 = *(void *)(v3 + 72);
    uint64_t v27 = *(void *)(v3 + 32);
    uint64_t v28 = *(void *)(v3 + 24);
    uint64_t v29 = *(void *)(v3 + 16);
    unint64_t v30 = *(void *)(v3 + 8);
    uint64_t v31 = *(void *)v3;
    uint64_t v26 = a3;
    if (v9 >> 10 >= (unint64_t)v33 >> 10)
    {
LABEL_14:
      __break(1u);
LABEL_15:
      a3 = v26;
LABEL_17:
      unint64_t v9 = v30;
      uint64_t v8 = v31;
      uint64_t v11 = v28;
      uint64_t v10 = v29;
      uint64_t v12 = v27;
      uint64_t result = v24;
      uint64_t v13 = v25;
      goto LABEL_7;
    }

    uint64_t v15 = 0LL;
    uint64_t v16 = (__int128 *)(v8 + 16);
    while (1)
    {
      __int128 v17 = *(_OWORD *)(v31 + 32);
      __int128 v41 = *v16;
      __int128 v42 = v17;
      __int128 v43 = *(_OWORD *)(v31 + 48);
      BigString.unicodeScalars.getter();
      int v18 = BigString.UnicodeScalarView.subscript.getter();
      outlined release of Locale((uint64_t)v36);
      __int128 v19 = *(_OWORD *)(v31 + 32);
      __int128 v38 = *v16;
      __int128 v39 = v19;
      __int128 v40 = *(_OWORD *)(v31 + 48);
      BigString.unicodeScalars.getter();
      outlined retain of AttributedString.Runs(v3);
      unint64_t v4 = BigString.UnicodeScalarView.index(after:)();
      uint64_t v5 = v20;
      uint64_t v6 = v21;
      uint64_t v7 = v22;
      outlined release of Locale((uint64_t)v37);
      uint64_t result = outlined release of AttributedString.Runs(v3);
      unint64_t v23 = v4 >> 10;
      if (v14 < v4 >> 10) {
        break;
      }
      *(_DWORD *)(a2 + 4 * v15) = v18;
      if (v26 - 1 == v15) {
        goto LABEL_15;
      }
      if (v23 == v14)
      {
        a3 = v15 + 1;
        goto LABEL_17;
      }

      ++v15;
      if (v23 < v34) {
        goto LABEL_14;
      }
    }

    __break(1u);
  }

  __break(1u);
  return result;
}

{
  _OWORD *v3;
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v4 = result;
  uint64_t v5 = *v3;
  uint64_t v6 = v3[1];
  uint64_t v7 = v3[2];
  uint64_t v8 = v3[3];
  unint64_t v9 = v3[4];
  uint64_t v10 = v3[5];
  uint64_t v11 = v3[6];
  uint64_t v12 = *((void *)v3 + 6);
  uint64_t v13 = (v12 >> 11 << 16) | 4;
  if (!a2)
  {
LABEL_5:
    a3 = 0LL;
    goto LABEL_15;
  }

  if (!a3)
  {
LABEL_15:
    *(_OWORD *)unint64_t v4 = v5;
    *(_OWORD *)(v4 + 16) = v6;
    *(_OWORD *)(v4 + 32) = v7;
    *(_OWORD *)(v4 + 48) = v8;
    *(_OWORD *)(v4 + 64) = v9;
    *(_OWORD *)(v4 + 80) = v10;
    *(_OWORD *)(v4 + 96) = v11;
    *(void *)(v4 + 112) = v13;
    return a3;
  }

  if ((a3 & 0x8000000000000000LL) == 0)
  {
    uint64_t v28 = ((unint64_t)v10 >> 9) & 0x3FFFFFFFFFFFCLL;
    if (v28 != ((32 * v12) & 0xFFFFFFFFFFFF0000LL) >> 14)
    {
      unint64_t v14 = (uint64_t)v3;
      uint64_t v20 = v3[6];
      uint64_t v21 = v3[5];
      uint64_t v22 = v3[4];
      unint64_t v23 = v3[3];
      uint64_t v24 = v3[2];
      uint64_t v25 = v3[1];
      uint64_t v26 = *v3;
      uint64_t v27 = a3;
      uint64_t v15 = BigString.Index.init(_utf8Offset:utf16TrailingSurrogate:)();
      if ((unint64_t)BigString.endIndex.getter() >> 10 < v15 >> 10)
      {
LABEL_11:
        __break(1u);
      }

      else
      {
        uint64_t v16 = 0LL;
        while (1)
        {
          __int128 v17 = v13;
          outlined retain of Locale(v14);
          int v18 = BigString.index(after:)();
          outlined release of Locale(v14);
          uint64_t v13 = (v18 >> 11 << 16) | 4;
          *(void *)(a2 + 8 * v16) = v17;
          if (v27 - 1 == v16) {
            break;
          }
          if (v28 == ((32 * v18) & 0xFFFFFFFFFFFF0000LL) >> 14)
          {
            a3 = v16 + 1;
            goto LABEL_14;
          }

          __int128 v19 = BigString.Index.init(_utf8Offset:utf16TrailingSurrogate:)();
          ++v16;
        }
      }

      a3 = v27;
LABEL_14:
      uint64_t v6 = v25;
      uint64_t v5 = v26;
      uint64_t v8 = v23;
      uint64_t v7 = v24;
      uint64_t v10 = v21;
      unint64_t v9 = v22;
      uint64_t v11 = v20;
      goto LABEL_15;
    }

    goto LABEL_5;
  }

  __break(1u);
  return result;
}

void *specialized Sequence._copySequenceContents(initializing:)( void *result, unint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, unint64_t a7)
{
  uint64_t v7 = a6;
  uint64_t v8 = a4;
  unint64_t v9 = a2;
  if (a4) {
    unint64_t v10 = *(unsigned __int8 *)(a4 + 18);
  }
  else {
    unint64_t v10 = 0LL;
  }
  uint64_t v47 = a4;
  uint64_t v48 = a5;
  uint64_t v49 = a6;
  v50.i64[0] = a7;
  v50.i64[1] = a7;
  __int128 v51 = v10;
  __int128 v52 = 0uLL;
  if (!a2)
  {
    a3 = 0LL;
    *uint64_t result = a4;
    result[1] = a5;
    result[2] = a6;
    result[3] = a7;
    result[4] = a7;
    result[5] = v10;
    result[7] = 0LL;
    result[8] = 0LL;
    result[6] = 0LL;
    return (void *)a3;
  }

  if (!a3)
  {
    int64x2_t v34 = vdupq_n_s64(a7);
    __int128 v35 = 0uLL;
    __int128 v36 = v10;
LABEL_35:
    *uint64_t result = v8;
    result[1] = a5;
    result[2] = v7;
    *(int64x2_t *)(result + 3) = v34;
    *(_OWORD *)(result + 5) = v36;
    *(_OWORD *)(result + 7) = v35;
    return (void *)a3;
  }

  if (a3 < 0) {
    goto LABEL_41;
  }
  __int128 v38 = result;
  uint64_t v39 = a5;
  uint64_t v11 = 0LL;
  uint64_t v12 = 0LL;
  uint64_t v40 = a4 + 24;
  uint64_t v43 = a3;
  unint64_t v41 = a7;
  while (1)
  {
    uint64_t v13 = v50.i64[1];
    __int128 v14 = v51;
    if (v8)
    {
      if (v12 == v7)
      {
        uint64_t v37 = v7;
LABEL_37:
        uint64_t *v38 = v8;
        v38[1] = v39;
        v38[2] = v7;
        v38[3] = a7;
        v38[4] = v13;
        *(_OWORD *)(v38 + 5) = v14;
        v38[7] = v11;
        a3 = v11;
        v38[8] = v37;
        return (void *)a3;
      }
    }

    else if (!v12)
    {
      uint64_t v37 = 0LL;
      goto LABEL_37;
    }

    if (v50.i64[1] != a7) {
      break;
    }
    ++v11;
    if (*((void *)&v51 + 1))
    {
      uint64_t v15 = (void *)(*((void *)&v51 + 1)
                     + 24
                     * (((unint64_t)v51 >> ((4 * *(_BYTE *)(*((void *)&v51 + 1) + 18LL) + 8) & 0x3C)) & 0xF));
      unint64_t v17 = v15[3];
      unint64_t v16 = v15[4];
      unint64_t v18 = v15[5];
      *(void *)&__int128 v52 = v11;
      swift_unknownObjectRetain();
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain_n();
      unint64_t v19 = v17;
      unint64_t v44 = v18;
      unint64_t v45 = v16;
    }

    else
    {
      swift_unknownObjectRetain();
      unint64_t v19 = specialized Rope._Node.subscript.getter(v14, v8);
      unint64_t v44 = v21;
      unint64_t v45 = v20;
      swift_unknownObjectRelease();
      *(void *)&__int128 v52 = v11;
      swift_unknownObjectRetain();
      unint64_t v17 = specialized Rope._Node.subscript.getter(v14, v8);
    }

    swift_bridgeObjectRelease();
    uint64_t result = (void *)swift_bridgeObjectRelease();
    BOOL v22 = __OFADD__(v12, v17);
    v12 += v17;
    if (v22) {
      goto LABEL_40;
    }
    *((void *)&v52 + 1) = v12;
    if (!v8) {
      goto LABEL_42;
    }
    unint64_t v23 = ((-15LL << ((4 * *(_BYTE *)(v8 + 18) + 8) & 0x3C)) - 1) & (unint64_t)*(unsigned __int8 *)(v8 + 18) | ((unint64_t)*(unsigned __int16 *)(v8 + 16) << ((4 * *(_BYTE *)(v8 + 18) + 8) & 0x3C));
    uint64_t result = (void *)swift_unknownObjectRetain();
    if (*((void *)&v14 + 1))
    {
      char v24 = (4 * *(_BYTE *)(*((void *)&v14 + 1) + 18LL) + 8) & 0x3C;
      unint64_t v25 = (((unint64_t)v14 >> v24) & 0xF) + 1;
      if (v25 < *(unsigned __int16 *)(*((void *)&v14 + 1) + 16LL))
      {
        *(void *)&__int128 v51 = (v25 << v24) | ((-15LL << v24) - 1) & v14;
LABEL_9:
        uint64_t result = (void *)swift_unknownObjectRelease_n();
        goto LABEL_10;
      }
    }

    int v26 = *(unsigned __int8 *)(v8 + 18);
    char v27 = (4 * v26 + 8) & 0x3C;
    unint64_t v46 = ((unint64_t)v14 >> v27) & 0xF;
    if (v26)
    {
      swift_unknownObjectRetain();
      char v28 = specialized closure #1 in Rope._Node.formSuccessor(of:)(v40, (uint64_t *)&v46, (uint64_t)&v50.i64[1], v8, v26);
      swift_unknownObjectRelease();
      if ((v28 & 1) == 0)
      {
        int v29 = *(unsigned __int8 *)(v8 + 18);
LABEL_31:
        uint64_t v31 = *(unsigned __int16 *)(v8 + 16);
        char v32 = *(_BYTE *)(v8 + 18);
        uint64_t result = (void *)swift_unknownObjectRelease_n();
        unint64_t v33 = ((-15LL << ((4 * v32 + 8) & 0x3C)) - 1) & v29 | (unint64_t)(v31 << ((4 * v32 + 8) & 0x3C));
        a7 = v41;
        uint64_t v7 = a6;
        v50.i64[1] = v41;
        __int128 v51 = v33;
        a3 = v43;
        goto LABEL_11;
      }

      goto LABEL_9;
    }

    unint64_t v30 = (((unint64_t)v14 >> v27) & 0xF) + 1;
    if (v30 >= *(unsigned __int16 *)(v8 + 16))
    {
      int v29 = 0;
      goto LABEL_31;
    }

    *(void *)&__int128 v51 = (v30 << v27) | ((-15LL << v27) - 1) & v14;
    uint64_t result = (void *)swift_unknownObjectRelease_n();
    *((void *)&v51 + 1) = v8;
LABEL_10:
    uint64_t v7 = a6;
    a3 = v43;
    a7 = v41;
LABEL_11:
    unint64_t *v9 = v19;
    v9[1] = v45;
    v9[2] = v44;
    v9 += 3;
    if (a3 == v11)
    {
      uint64_t v8 = v47;
      a5 = v48;
      uint64_t v7 = v49;
      int64x2_t v34 = v50;
      __int128 v36 = v51;
      __int128 v35 = v52;
      uint64_t result = v38;
      goto LABEL_35;
    }
  }

  __break(1u);
LABEL_40:
  __break(1u);
LABEL_41:
  __break(1u);
LABEL_42:
  __break(1u);
  return result;
}

uint64_t specialized Sequence._copySequenceContents(initializing:)( uint64_t result, uint64_t *a2, unint64_t a3)
{
  uint64_t v7 = *v4;
  unint64_t v8 = v4[1];
  uint64_t v9 = v4[2];
  uint64_t v10 = v4[3];
  uint64_t v11 = v4[4];
  uint64_t v12 = v4[9];
  __int128 v34 = *(_OWORD *)(v4 + 7);
  __int128 v35 = *(_OWORD *)(v4 + 5);
  if (!a2) {
    goto LABEL_5;
  }
  if (!a3)
  {
LABEL_6:
    unint64_t v5 = v4[1];
    unint64_t v4 = (uint64_t *)v4[2];
    uint64_t v6 = v10;
    uint64_t v3 = v11;
LABEL_7:
    *(void *)uint64_t result = v7;
    *(void *)(result + 8) = v8;
    *(void *)(result + 16) = v9;
    *(void *)(result + 24) = v10;
    *(void *)(result + 32) = v11;
    *(_OWORD *)(result + 40) = v35;
    *(_OWORD *)(result + 56) = v34;
    *(void *)(result + 72) = v12;
    *(void *)(result + 80) = v5;
    *(void *)(result + 88) = v4;
    *(void *)(result + 96) = v6;
    *(void *)(result + 104) = v3;
    return a3;
  }

  if ((a3 & 0x8000000000000000LL) == 0)
  {
    unint64_t v37 = v8 >> 10;
    if (v8 >> 10 == (unint64_t)v35 >> 10)
    {
LABEL_5:
      a3 = 0LL;
      goto LABEL_6;
    }

    uint64_t v27 = v4[9];
    uint64_t v28 = result;
    uint64_t v29 = v4[4];
    uint64_t v30 = v4[3];
    uint64_t v31 = v4[2];
    unint64_t v32 = v4[1];
    uint64_t v33 = *v4;
    if (v8 >> 10 >= (unint64_t)v35 >> 10)
    {
LABEL_14:
      __break(1u);
LABEL_15:
      a3 = v8;
LABEL_16:
      uint64_t result = v28;
      uint64_t v11 = v29;
      unint64_t v8 = v32;
      uint64_t v7 = v33;
      uint64_t v10 = v30;
      uint64_t v9 = v31;
      uint64_t v12 = v27;
      goto LABEL_7;
    }

    uint64_t v13 = a2;
    __int128 v14 = (__int128 *)(v7 + 16);
    unint64_t v8 = 1LL;
    unint64_t v36 = a3;
    while (1)
    {
      unint64_t v39 = v8;
      __int128 v15 = *v14;
      __int128 v16 = *(_OWORD *)(v33 + 48);
      v41[1] = *(_OWORD *)(v33 + 32);
      v41[2] = v16;
      v41[0] = v15;
      __int128 v17 = *v14;
      v42[1] = *(_OWORD *)(v33 + 32);
      v42[2] = v16;
      v42[0] = v17;
      outlined init with take of any PredicateExpression<Self.Output == B1>(v42, (uint64_t)v43);
      outlined retain of Locale((uint64_t)v43);
      uint64_t v18 = BigString.subscript.getter();
      uint64_t v20 = v19;
      outlined release of Locale((uint64_t)v41);
      __int128 v21 = *v14;
      __int128 v22 = *(_OWORD *)(v33 + 48);
      v40[1] = *(_OWORD *)(v33 + 32);
      v40[2] = v22;
      v40[0] = v21;
      outlined retain of AttributedString.Runs(v38);
      outlined retain of Locale((uint64_t)v40);
      unint64_t v5 = BigString.index(after:)();
      unint64_t v4 = v23;
      uint64_t v6 = v24;
      uint64_t v3 = v25;
      outlined release of Locale((uint64_t)v40);
      uint64_t result = outlined release of AttributedString.Runs(v38);
      unint64_t v26 = v5 >> 10;
      *uint64_t v13 = v18;
      v13[1] = v20;
      a3 = v36;
      unint64_t v8 = v39;
      if (v36 == v39) {
        goto LABEL_16;
      }
      unint64_t v8 = v39 + 1;
      v13 += 2;
      if (v26 < v37) {
        goto LABEL_14;
      }
    }

    __break(1u);
  }

  __break(1u);
  return result;
}

uint64_t specialized Sequence._copySequenceContents(initializing:)( void *a1, unint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t result = BigString.Index.init(_utf8Offset:)();
  unint64_t v11 = result;
  unint64_t v13 = v12;
  unint64_t v15 = v14;
  unint64_t v17 = v16;
  unint64_t v26 = a1;
  if (!a2)
  {
LABEL_5:
    uint64_t v18 = 0LL;
LABEL_12:
    void *v26 = a4;
    v26[1] = a5;
    v26[2] = a6;
    v26[3] = a7;
    void v26[4] = v11;
    v26[5] = v13;
    v26[6] = v15;
    v26[7] = v17;
    return v18;
  }

  if (!a3)
  {
    uint64_t v18 = 0LL;
    goto LABEL_12;
  }

  if ((a3 & 0x8000000000000000LL) == 0)
  {
    unint64_t v28 = (unint64_t)BigString.Index.init(_utf8Offset:)() >> 10;
    if (v28 != v11 >> 10)
    {
      uint64_t v18 = 0LL;
      uint64_t v25 = a3;
      uint64_t v27 = a3 - 1;
      while (1)
      {
        unint64_t v33 = v17;
        unint64_t v19 = v15;
        unint64_t v20 = v13;
        unint64_t v21 = v11;
        swift_bridgeObjectRetain();
        Substring.index(after:)();
        unint64_t v11 = BigString.Index.init(_utf8Offset:)();
        unint64_t v13 = v22;
        unint64_t v15 = v23;
        unint64_t v17 = v24;
        swift_bridgeObjectRelease();
        *a2 = v21;
        a2[1] = v20;
        a2[2] = v19;
        a2[3] = v33;
        if (v27 == v18) {
          break;
        }
        ++v18;
        a2 += 4;
        if (v28 == v11 >> 10) {
          goto LABEL_12;
        }
      }

      uint64_t v18 = v25;
      goto LABEL_12;
    }

    goto LABEL_5;
  }

  __break(1u);
  return result;
}

uint64_t specialized Sequence._copySequenceContents(initializing:)( uint64_t *a1, uint64_t a2, uint64_t a3, const char *a4, int a5)
{
  v24[2] = *(char **)MEMORY[0x1895F89C0];
  type metadata accessor for _FTSSequence.Iterator();
  uint64_t v10 = swift_allocObject();
  *(_DWORD *)(v10 + 56) = 0;
  uint64_t v11 = MEMORY[0x18961AFE8];
  *(void *)(v10 + 64) = MEMORY[0x18961AFE8];
  *(void *)(v10 + 72) = v11;
  *(_BYTE *)(v10 + 80) = 0;
  *(void *)(v10 + 48) = a4;
  memset(&v23, 0, 28);
  memset(&v23.st_atimespec, 0, 112);
  if (lstat(a4, &v23) || (v24[0] = (char *)a4, v24[1] = 0LL, (unint64_t v16 = fts_open(v24, a5, 0LL)) == 0LL))
  {
    unsigned int v12 = MEMORY[0x186E1B0E8]();
    uint64_t v14 = String.init(cString:)();
    char v15 = 1;
    unint64_t v16 = (FTS *)v12;
  }

  else
  {
    uint64_t v14 = 0LL;
    uint64_t v13 = 0LL;
    char v15 = 0;
  }

  uint64_t v17 = 0LL;
  *(void *)(v10 + 16) = v16;
  *(void *)(v10 + 24) = v14;
  *(void *)(v10 + 32) = v13;
  *(_BYTE *)(v10 + 40) = v15;
  if (a2 && a3)
  {
    if (a3 < 0) {
      __break(1u);
    }
    uint64_t v18 = _FTSSequence.Iterator.next()();
    if (v21 == -1)
    {
      uint64_t v17 = 0LL;
    }

    else
    {
      uint64_t v17 = 0LL;
      while (1)
      {
        *(void *)a2 = v18;
        *(void *)(a2 + 8) = v19;
        *(void *)(a2 + 16) = v20;
        *(_BYTE *)(a2 + 24) = v21 & 1;
        if (a3 - 1 == v17) {
          break;
        }
        a2 += 32LL;
        uint64_t v18 = _FTSSequence.Iterator.next()();
        ++v17;
        if (v21 == -1) {
          goto LABEL_15;
        }
      }

      uint64_t v17 = a3;
    }
  }

unint64_t String.UnicodeScalarView.distance(from:to:)( unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  unint64_t v7 = _StringGuts.validateInclusiveScalarIndex(_:)(a1, a3, a4);
  unint64_t result = _StringGuts.validateInclusiveScalarIndex(_:)(a2, a3, a4);
  unint64_t v9 = result >> 14;
  if (v7 >> 14 < result >> 14)
  {
    for (uint64_t i = 0LL; ; ++i)
    {
      uint64_t v11 = i + 1;
      if (__OFADD__(i, 1LL)) {
        break;
      }
      if ((a4 & 0x1000000000000000LL) != 0)
      {
        unint64_t result = String.UnicodeScalarView._foreignIndex(after:)();
        unint64_t v7 = result;
      }

      else
      {
        unint64_t v12 = v7 >> 16;
        if ((a4 & 0x2000000000000000LL) != 0)
        {
          unint64_t v22 = a3;
          uint64_t v23 = a4 & 0xFFFFFFFFFFFFFFLL;
          int v13 = *((unsigned __int8 *)&v22 + v12);
        }

        else
        {
          unint64_t result = (a4 & 0xFFFFFFFFFFFFFFFLL) + 32;
          if ((a3 & 0x1000000000000000LL) == 0) {
            unint64_t result = _StringObject.sharedUTF8.getter();
          }
          int v13 = *(unsigned __int8 *)(result + v12);
        }

        int v14 = (char)v13;
        unsigned int v15 = __clz(v13 ^ 0xFF) - 24;
        if (v14 >= 0) {
          LOBYTE(v15) = 1;
        }
        unint64_t v7 = ((v12 + v15) << 16) | 5;
      }

      if (v9 <= v7 >> 14) {
        return v11;
      }
    }

    __break(1u);
LABEL_36:
    __break(1u);
    return result;
  }

  if (v9 < v7 >> 14)
  {
    uint64_t v11 = 0LL;
    while (!__OFSUB__(v11--, 1LL))
    {
      if ((a4 & 0x1000000000000000LL) != 0)
      {
        unint64_t result = String.UnicodeScalarView._foreignIndex(before:)();
        unint64_t v7 = result;
      }

      else
      {
        if ((a4 & 0x2000000000000000LL) != 0)
        {
          unint64_t v22 = a3;
          uint64_t v23 = a4 & 0xFFFFFFFFFFFFFFLL;
          if ((*((_BYTE *)&v22 + (v7 >> 16) - 1) & 0xC0) == 0x80)
          {
            uint64_t v20 = 0LL;
            do
              int v21 = *((_BYTE *)&v22 + (v7 >> 16) + v20-- - 2) & 0xC0;
            while (v21 == 128);
            uint64_t v19 = 1 - v20;
          }

          else
          {
            uint64_t v19 = 1LL;
          }
        }

        else
        {
          unint64_t result = (a4 & 0xFFFFFFFFFFFFFFFLL) + 32;
          if ((a3 & 0x1000000000000000LL) == 0) {
            unint64_t result = _StringObject.sharedUTF8.getter();
          }
          uint64_t v17 = 0LL;
          do
            int v18 = *(_BYTE *)(result + (v7 >> 16) - 1 + v17--) & 0xC0;
          while (v18 == 128);
          uint64_t v19 = -v17;
        }

        unint64_t v7 = (v7 - (v19 << 16)) & 0xFFFFFFFFFFFF0000LL | 5;
      }

      if (v9 >= v7 >> 14) {
        return v11;
      }
    }

    goto LABEL_36;
  }

  return 0LL;
}

uint64_t specialized Sequence._copySequenceContents(initializing:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  if ((a5 & 0x2000000000000000LL) != 0) {
    uint64_t v8 = HIBYTE(a5) & 0xF;
  }
  else {
    uint64_t v8 = a4 & 0xFFFFFFFFFFFFLL;
  }
  if (!a2)
  {
    uint64_t v11 = 0LL;
    __int16 v12 = 0;
    a3 = 0LL;
    char v15 = 1;
    goto LABEL_31;
  }

  swift_bridgeObjectRetain();
  if (!a3)
  {
    uint64_t v11 = 0LL;
    __int16 v12 = 0;
    char v15 = 1;
    goto LABEL_30;
  }

  if (a3 < 0)
  {
    __break(1u);
    JUMPOUT(0x183506A04LL);
  }

  uint64_t v11 = 0LL;
  __int16 v12 = 0;
  uint64_t v13 = 0LL;
  uint64_t v14 = a5 & 0xFFFFFFFFFFFFFFLL;
  uint64_t v30 = a1;
  char v15 = 1;
  unint64_t v16 = &dword_183506A14;
  uint64_t v17 = &dword_183506A04;
  while (1)
  {
    if ((v15 & 1) == 0)
    {
      char v15 = 1;
      LOWORD(v18) = v12;
      __int16 v12 = 0;
      goto LABEL_9;
    }

    if (v11 >= v8) {
      break;
    }
    if ((a5 & 0x1000000000000000LL) != 0)
    {
      uint64_t v21 = v14;
      unint64_t v22 = v16;
      unsigned int v23 = _StringGuts.foreignErrorCorrectedScalar(startingAt:)();
      uint64_t v17 = &dword_183506A04;
      unint64_t v16 = v22;
      uint64_t v14 = v21;
      unsigned int v18 = v23;
    }

    else
    {
      if ((a5 & 0x2000000000000000LL) == 0)
      {
        uint64_t v19 = (a5 & 0xFFFFFFFFFFFFFFFLL) + 32;
        if ((a4 & 0x1000000000000000LL) == 0)
        {
          uint64_t v26 = v14;
          uint64_t v27 = v16;
          uint64_t v19 = _StringObject.sharedUTF8.getter();
          uint64_t v17 = &dword_183506A04;
          unint64_t v16 = v27;
          uint64_t v14 = v26;
        }

        unsigned int v18 = *(unsigned __int8 *)(v19 + v11);
        if (*(char *)(v19 + v11) < 0) {
          __asm { BR              X9 }
        }

        ++v11;
        char v15 = 1;
        goto LABEL_9;
      }

      v31[0] = a4;
      v31[1] = v14;
      unsigned int v18 = *((unsigned __int8 *)v31 + v11);
      if (*((char *)v31 + v11) < 0) {
        __asm { BR              X9 }
      }

      uint64_t v20 = 1LL;
    }

    v11 += v20;
    if (HIWORD(v18))
    {
      uint64_t v29 = v14;
      unint64_t v24 = v17;
      __int16 v12 = Unicode.Scalar.UTF16View.subscript.getter();
      __int16 v25 = Unicode.Scalar.UTF16View.subscript.getter();
      uint64_t v17 = v24;
      unint64_t v16 = &dword_183506A14;
      uint64_t v14 = v29;
      LOWORD(v18) = v25;
      char v15 = 0;
    }

    else
    {
      char v15 = 1;
    }

uint64_t specialized closure #1 in closure #3 in Data.init<A>(_:)@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  if (result)
  {
    swift_bridgeObjectRetain();
    unint64_t result = _StringGuts.copyUTF8(into:)();
    if ((v3 & 1) == 0)
    {
      uint64_t v4 = result;
      unint64_t result = swift_bridgeObjectRelease();
      *a2 = 0LL;
      a2[1] = 0xE000000000000000LL;
      a2[2] = 15LL;
      a2[3] = v4;
      return result;
    }
  }

  else
  {
    __break(1u);
  }

  __break(1u);
  return result;
}

uint64_t specialized Sequence._copySequenceContents(initializing:)( uint64_t result, _BYTE *a2, uint64_t a3, unsigned int a4)
{
  if (!a2)
  {
    uint64_t v11 = 0LL;
    uint64_t v12 = 0LL;
LABEL_24:
    *(_DWORD *)unint64_t result = a4;
    *(void *)(result + 8) = v11;
    return v12;
  }

  if (!a3)
  {
    uint64_t v11 = 0LL;
LABEL_23:
    uint64_t v12 = a3;
    goto LABEL_24;
  }

  if ((a3 & 0x8000000000000000LL) == 0)
  {
    int v4 = (a4 & 0x3F) << 8;
    int v5 = (v4 | (a4 >> 6)) + 33217;
    int v6 = (v4 | (a4 >> 6) & 0x3F) << 8;
    unsigned int v7 = (v6 | (a4 >> 12)) + 8487393;
    unsigned int v8 = (((v6 & 0xFFFFFFC0 | (a4 >> 12) & 0x3F) << 8) | (a4 >> 18)) - 2122219023;
    if (a4 < 0x80) {
      unsigned int v9 = a4 + 1;
    }
    else {
      unsigned int v9 = v5;
    }
    if (HIWORD(a4)) {
      unsigned int v7 = v8;
    }
    if (a4 >= 0x800) {
      unsigned int v10 = v7;
    }
    else {
      unsigned int v10 = v9;
    }
    *a2 = (v10 - 1) & ~(-1LL << (32 - (__clz(v10) & 0x18)));
    uint64_t v11 = 1LL;
    uint64_t v12 = 1LL;
    if (a3 == 1 || a4 < 0x80) {
      goto LABEL_24;
    }
    unsigned int v13 = a4 >= 0x800 ? v7 : v5;
    a2[1] = (unsigned __int16)((v13 - 257) & ~(unsigned __int16)(-1LL << (32 - (__clz(v13) & 0x18)))) >> 8;
    uint64_t v11 = 2LL;
    uint64_t v12 = 2LL;
    if (a3 == 2 || a4 < 0x800) {
      goto LABEL_24;
    }
    uint64_t v14 = ~(-1LL << (32 - (__clz(v7) & 0x18)));
    a2[2] = ((v7 + 16711423) & v14) >> 16;
    if (a3 != 3)
    {
      if (a4 < 0x10000)
      {
        uint64_t v11 = 3LL;
        uint64_t v12 = 3LL;
      }

      else
      {
        a2[3] = ((v7 - 16843009) & v14) >> 24;
        uint64_t v11 = 4LL;
        uint64_t v12 = 4LL;
      }

      goto LABEL_24;
    }

    uint64_t v11 = 3LL;
    goto LABEL_23;
  }

  __break(1u);
  return result;
}

void *specialized Data.init<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for ArraySlice<UInt8>);
  void v19[3] = v8;
  v19[4] = &protocol witness table for <A> ArraySlice<A>;
  unsigned int v9 = (void *)swift_allocObject();
  v19[0] = v9;
  v9[2] = a1;
  v9[3] = a2;
  void v9[4] = a3;
  v9[5] = a4;
  unint64_t result = __swift_project_boxed_opaque_existential_1(v19, v8);
  uint64_t v11 = result[2];
  uint64_t v12 = result[3] >> 1;
  BOOL v13 = __OFSUB__(v12, v11);
  uint64_t v14 = v12 - v11;
  if (v13)
  {
    __break(1u);
  }

  else
  {
    char v15 = (_BYTE *)(result[1] + v11);
    unint64_t v16 = &v15[v14];
    swift_unknownObjectRetain();
    closure #1 in Data.init<A>(_:)(v15, v16, &v18);
    uint64_t v17 = v18;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v19);
    return (void *)v17;
  }

  return result;
}

uint64_t specialized static StringProtocol.== infix<A>(_:_:)( unint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6)
{
  if ((a6 & 0x2000000000000000LL) != 0) {
    uint64_t v6 = HIBYTE(a6) & 0xF;
  }
  else {
    uint64_t v6 = a5 & 0xFFFFFFFFFFFFLL;
  }
  if (a3 == a5 && a4 == a6 && !(a1 >> 16) && a2 >> 16 == v6) {
    return 1LL;
  }
  else {
    return _stringCompareInternal(_:_:_:_:expecting:)() & 1;
  }
}

uint64_t sub_183506D94()
{
  return swift_deallocObject();
}

uint64_t _sSo6NSDataC10FoundationEys5UInt8VSicigySV_So8_NSRangeVSpy10ObjectiveC8ObjCBoolVGtXEfU_TA_0( uint64_t a1, uint64_t a2, uint64_t a3, _BYTE *a4)
{
  return closure #1 in NSData.subscript.getter( a1,  a2,  a3,  a4,  *(void **)(v4 + 16),  *(void *)(v4 + 24),  *(_BYTE **)(v4 + 32));
}

uint64_t sub_183506DB0()
{
  return swift_deallocObject();
}

uint64_t block_copy_helper_23(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_23()
{
  return swift_release();
}

uint64_t sub_183506DD8()
{
  return swift_deallocObject();
}

void *partial apply for specialized closure #3 in Data.init<A>(_:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  int v5 = *(uint64_t **)(v3 + 16);
  uint64_t v7 = *v5;
  uint64_t v6 = v5[1];
  v13[0] = v7;
  v13[1] = v6;
  v12[2] = v13;
  unint64_t result = _sSw17withMemoryRebound2to_q0_xm_q0_SryxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lFs5UInt8V_s5NeverOs16IndexingIteratorVySS8UTF8ViewVG_SitTgm5( (void *(*)(uint64_t *__return_ptr, uint64_t, uint64_t))partial apply for specialized closure #1 in closure #3 in Data.init<A>(_:),  (uint64_t)v12,  a1,  a2);
  *a3 = result;
  a3[1] = v9;
  a3[2] = v10;
  a3[3] = v11;
  return result;
}

uint64_t partial apply for specialized closure #1 in closure #3 in Data.init<A>(_:)@<X0>( uint64_t a1@<X0>, void *a2@<X8>)
{
  return specialized closure #1 in closure #3 in Data.init<A>(_:)(a1, a2);
}

uint64_t specialized OptionSet<>.remove(_:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *v2;
  if (*v2)
  {
    uint64_t v4 = v3 & result;
    if ((v3 & result) != 0 && v4 != 0xFFFF)
    {
      uint64_t v7 = v3 ^ result;
      if (v3 == result)
      {
        uint64_t v8 = (unsigned __int16)*v2;
        goto LABEL_14;
      }

uint64_t specialized OptionSet<>.update(with:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *v2;
  if (*v2)
  {
    uint64_t v4 = v3 & result;
    if ((v3 & result) != 0)
    {
LABEL_3:
      uint64_t v5 = v3 | result;
      if (!v5) {
        uint64_t v5 = 0xFFFFLL;
      }
      uint64_t *v2 = v5;
      BOOL v6 = v4 == 0xFFFF;
      if (v4 == 0xFFFF) {
        uint64_t v4 = 0LL;
      }
      goto LABEL_12;
    }
  }

  else
  {
    uint64_t v4 = (unsigned __int16)result;
    if ((_WORD)result) {
      goto LABEL_3;
    }
  }

  uint64_t v4 = 0LL;
  uint64_t v7 = v3 | result;
  if (!v7) {
    uint64_t v7 = 0xFFFFLL;
  }
  uint64_t *v2 = v7;
  BOOL v6 = 1;
LABEL_12:
  *(void *)a2 = v4;
  *(_BYTE *)(a2 + 8) = v6;
  return result;
}

uint64_t specialized SetAlgebra.subtracting(_:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  if (a2)
  {
    if (a2 != result)
    {
      uint64_t v3 = (a2 ^ result) & a2;
      if (v3)
      {
LABEL_4:
        *a3 = v3;
        return result;
      }
    }

    else
    {
      uint64_t v3 = (unsigned __int16)a2;
      if ((_WORD)a2) {
        goto LABEL_4;
      }
    }
  }

  else if (result != 0xFFFF)
  {
    uint64_t v3 = (unsigned __int16)~(_WORD)result;
    if ((_WORD)result != 0xFFFF) {
      goto LABEL_4;
    }
  }

  *a3 = 0xFFFFLL;
  return result;
}

uint64_t specialized SetAlgebra.subtract(_:)(uint64_t a1)
{
  uint64_t v2 = *v1;
  uint64_t v5 = a1;
  uint64_t v6 = v2;
  IndexSet.symmetricDifference(_:)(&v5, &v7);
  uint64_t v4 = v7;
  uint64_t v5 = v2;
  IndexSet.intersection(_:)(&v4, (uint64_t)&v6);
  swift_release();
  uint64_t result = swift_release();
  *uint64_t v1 = v6;
  return result;
}

uint64_t specialized SetAlgebra.subtract(_:)(uint64_t result)
{
  uint64_t v2 = *v1;
  if (!*v1)
  {
    uint64_t v3 = result ^ 0xFFFF;
    if (result == 0xFFFF) {
      goto LABEL_7;
    }
    goto LABEL_6;
  }

  uint64_t v3 = v2 ^ result;
  if (v2 != result)
  {
LABEL_6:
    uint64_t v4 = v3 & v2;
    if (v4) {
      goto LABEL_4;
    }
    goto LABEL_7;
  }

  uint64_t v4 = (unsigned __int16)*v1;
  if ((unsigned __int16)*v1)
  {
LABEL_4:
    *uint64_t v1 = v4;
    return result;
  }

uint64_t ByteCountFormatStyle.Attributed._format(_:doubleValue:)@<X0>(uint64_t *a1@<X8>, double a2@<D0>)
{
  unint64_t v5 = 0LL;
  uint64_t v350 = *MEMORY[0x1895F89C0];
  uint64_t v6 = type metadata accessor for Logger();
  uint64_t v228 = *(char **)(v6 - 8);
  MEMORY[0x1895F8858](v6);
  uint64_t v229 = &v216[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v223 = type metadata accessor for ICULegacyNumberFormatter.Signature(0LL);
  __int128 v226 = *(char **)(v223 - 8);
  uint64_t v8 = MEMORY[0x1895F8858](v223);
  uint64_t v224 = &v216[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v222 = v9;
  MEMORY[0x1895F8858](v8);
  uint64_t v11 = &v216[-v10];
  uint64_t v12 = type metadata accessor for ICULegacyNumberFormatter.NumberFormatType(0LL);
  uint64_t v13 = MEMORY[0x1895F8858](v12);
  char v15 = &v216[-((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  __int128 v16 = v2[1];
  __int128 v244 = *v2;
  v245[0] = v16;
  *(void *)&v245[1] = *((void *)v2 + 4);
  if ((v16 & 1) == 0 || (*(void *)&a2 & 0x7FFFFFFFFFFFFFFFLL) != 0)
  {
    uint64_t v17 = (char *)&loc_183507230 + *((int *)qword_18350A178 + v244);
    __int128 v227 = (_BYTE *)v6;
    __asm { BR              X10 }
  }

  uint64_t v229 = (_BYTE *)v13;
  unint64_t v18 = (BYTE8(v244) >> 1) & 1;
  unint64_t v19 = 0xD000000000000015LL;
  *(void *)__int128 v246 = 0LL;
  *(void *)&v246[8] = 0xE000000000000000LL;
  _StringGuts.grow(_:)(25LL);
  swift_bridgeObjectRelease();
  *(void *)__int128 v246 = 0xD000000000000015LL;
  *(void *)&v246[8] = 0x80000001839D39D0LL;
  if (one-time initialization token for unitNames != -1) {
    swift_once();
  }
  uint64_t v20 = v226;
  if (*(void *)(static ByteCountFormatStyle.Unit.unitNames + 16) <= v18)
  {
    __break(1u);
LABEL_88:
    swift_once();
    goto LABEL_44;
  }

  uint64_t v21 = static ByteCountFormatStyle.Unit.unitNames + 16 * v18;
  uint64_t v22 = *(void *)(v21 + 32);
  unsigned int v23 = *(void **)(v21 + 40);
  swift_bridgeObjectRetain();
  v24._uint64_t countAndFlagsBits = v22;
  v24._uint64_t object = v23;
  String.append(_:)(v24);
  swift_bridgeObjectRelease();
  if ((_DWORD)v18) {
    unint64_t v25 = 0LL;
  }
  else {
    unint64_t v25 = 0xD000000000000015LL;
  }
  if ((_DWORD)v18) {
    unint64_t v26 = 0xE000000000000000LL;
  }
  else {
    unint64_t v26 = 0x80000001839D39F0LL;
  }
  unint64_t v27 = v26;
  String.append(_:)(*(Swift::String *)&v25);
  swift_bridgeObjectRelease();
  unint64_t v28 = *(void **)v246;
  unint64_t v29 = *(void *)&v246[8];
  __int128 v315 = *(_OWORD *)((char *)v245 + 8);
  *(_OWORD *)__int128 v246 = *(_OWORD *)((char *)v245 + 8);
  outlined retain of Locale((uint64_t)&v315);
  uint64_t v30 = specialized static ICUByteCountNumberFormatter.create(for:locale:)(v28, v29, (uint64_t)v246);
  swift_bridgeObjectRelease();
  outlined release of ByteCountFormatStyle.Attributed((uint64_t)&v244);
  if (!v30)
  {
    BigString.init(_:)();
    uint64_t result = AttributedString.init(_:attributes:)((__int128 *)v246, MEMORY[0x18961AFF0], MEMORY[0x18961AFF8], v290);
    *a1 = v290[0];
    return result;
  }

  uint64_t v236 = (char *)v18;
  swift_retain();
  ICUNumberFormatterBase.attributedFormatPositions(_:)(0LL, 0LL, 0LL);
  uint64_t v219 = a1;
  if (v32)
  {
    unint64_t v34 = v31;
    unint64_t v35 = v32;
    uint64_t v36 = v33;
    swift_bridgeObjectRetain();
    unint64_t v233 = v34;
    unint64_t v235 = v35;
    BigString.init(_:)();
    AttributedString.init(_:attributes:)(v317, MEMORY[0x18961AFF0], MEMORY[0x18961AFF8], (uint64_t *)v246);
    uint64_t v37 = *(void *)v246;
    uint64_t v38 = *(void *)(v36 + 16);
    if (v38)
    {
      __int128 v227 = v11;
      uint64_t v228 = v15;
      unint64_t v221 = v30;
      unint64_t v230 = &v246[8];
      unint64_t v231 = v313;
      swift_bridgeObjectRetain();
      unint64_t v232 = lazy protocol witness table accessor for type String and conformance String();
      __int128 v225 = (_BYTE *)v36;
      int64_t v39 = v36 + 48;
      while (2)
      {
        unint64_t v40 = v5;
        unint64_t v41 = *(unsigned int *)(v39 - 16);
        int64_t v242 = v39;
        unint64_t v243 = v41;
        unint64_t v42 = v233;
        unint64_t v43 = v235;
        *(void *)__int128 v246 = v233;
        *(void *)&v246[8] = v235;
        swift_bridgeObjectRetain();
        unint64_t v44 = String.Index.init<A>(utf16Offset:in:)();
        *(void *)__int128 v246 = v42;
        *(void *)&v246[8] = v43;
        swift_bridgeObjectRetain();
        unint64_t v45 = String.Index.init<A>(utf16Offset:in:)();
        if (v45 >> 14 < v44 >> 14)
        {
          __break(1u);
LABEL_85:
          __break(1u);
          JUMPOUT(0x183509C54LL);
        }

        unint64_t v46 = v45;
        swift_retain();
        specialized Range<>.init<A>(_range:in:)(v44, v46, (_OWORD *)v37, (unint64_t *)v246);
        uint64_t v47 = v247;
        if ((void)v247 == 2LL) {
          __break(1u);
        }
        uint64_t v239 = *(char **)v246;
        unint64_t v237 = *(void *)&v246[16];
        int64_t v238 = *(void *)&v246[8];
        uint64_t v48 = *((void *)&v247 + 1);
        unint64_t v241 = *((void *)&v248 + 1);
        unint64_t v49 = v248;
        unint64_t v240 = v249;
        v290[0] = MEMORY[0x18961AFF0];
        v290[1] = MEMORY[0x18961AFF8];
        char v50 = 0;
        char v51 = 2;
        char v52 = (char)v236;
        switch((int)v243)
        {
          case 0:
            goto LABEL_21;
          case 1:
            char v50 = 1;
LABEL_21:
            specialized AttributeContainer.subscript.setter(v50);
            goto LABEL_27;
          case 2:
            goto LABEL_26;
          case 6:
            char v51 = 0;
            goto LABEL_26;
          case 7:
            char v51 = 3;
            goto LABEL_26;
          case 8:
            char v51 = 4;
            goto LABEL_26;
          case 10:
            char v51 = 1;
LABEL_26:
            specialized AttributeContainer.subscript.setter(v51);
LABEL_27:
            char v52 = 9;
LABEL_30:
            specialized AttributeContainer.subscript.setter(v52);
LABEL_31:
            __int128 v270 = *(_OWORD *)v290;
            char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
            unint64_t v234 = v40;
            if ((isUniquelyReferenced_nonNull_native & 1) == 0)
            {
              __int128 v54 = *(_OWORD *)(v37 + 32);
              v314[0] = *(_OWORD *)(v37 + 16);
              v314[1] = v54;
              v314[2] = *(_OWORD *)(v37 + 48);
              uint64_t v55 = *(void *)(v37 + 64);
              uint64_t v56 = *(void *)(v37 + 72);
              unint64_t v243 = v49;
              uint64_t v57 = v48;
              uint64_t v59 = *(void *)(v37 + 80);
              uint64_t v58 = *(void *)(v37 + 88);
              type metadata accessor for AttributedString.Guts();
              swift_allocObject();
              outlined retain of Locale((uint64_t)v314);
              swift_unknownObjectRetain();
              uint64_t v60 = v59;
              unint64_t v49 = v243;
              uint64_t v61 = v58;
              uint64_t v48 = v57;
              uint64_t v62 = AttributedString.Guts.init(string:runs:)(v314, v55, v56, v60, v61);
              swift_release();
              uint64_t v37 = v62;
            }

            unint64_t v63 = v241;
            unint64_t v64 = v240;
            uint64_t v65 = v239;
            __int128 v66 = *(_OWORD *)(v37 + 32);
            v313[10] = *(_OWORD *)(v37 + 16);
            v313[11] = v66;
            v313[12] = *(_OWORD *)(v37 + 48);
            BigString.startIndex.getter();
            BigString.endIndex.getter();
            uint64_t v282 = v65;
            int64_t v283 = v238;
            unint64_t v284 = v237;
            uint64_t v285 = v47;
            uint64_t v286 = v48;
            unint64_t v287 = v49;
            unint64_t v288 = v63;
            unint64_t v289 = v64;
            __int128 v67 = *(_OWORD *)(v37 + 16);
            __int128 v68 = *(_OWORD *)(v37 + 48);
            v349[4] = *(_OWORD *)(v37 + 32);
            v349[5] = v68;
            v349[3] = v67;
            BigString.unicodeScalars.getter();
            swift_retain_n();
            BigString.UnicodeScalarView.subscript.getter();
            swift_release();
            outlined release of Locale((uint64_t)v318);
            outlined release of Locale((uint64_t)v312);
            unint64_t v70 = v230;
            uint64_t v69 = v231;
            __int128 v71 = v231[1];
            *unint64_t v230 = *v231;
            v70[1] = v71;
            __int128 v72 = v69[3];
            v70[2] = v69[2];
            v70[3] = v72;
            *(void *)__int128 v246 = v37;
            if (one-time initialization token for currentIdentity != -1) {
              swift_once();
            }
            unint64_t v73 = (uint64_t *)(static AttributedString.currentIdentity + 16);
            int v74 = (os_unfair_lock_s *)(static AttributedString.currentIdentity + 24);
            swift_retain();
            os_unfair_lock_lock(v74);
            unint64_t v75 = v234;
            closure #1 in static AttributedString._nextModifyIdentity.getter(v73, &v268);
            os_unfair_lock_unlock(v74);
            swift_release();
            uint64_t v76 = v268;
            *(void *)&__int128 v250 = v268;
            BigString.init()();
            uint64_t v268 = 0LL;
            MEMORY[0x186E20E78](&v268, 8LL);
            uint64_t v77 = v268;
            type metadata accessor for AttributedString.Guts();
            uint64_t v78 = swift_allocObject();
            if ((BigString.isEmpty.getter() & 1) == 0) {
              goto LABEL_85;
            }
            __int128 v79 = v318[4];
            *(_OWORD *)(v78 + 16) = v318[3];
            *(_OWORD *)(v78 + 32) = v79;
            *(_OWORD *)(v78 + 48) = v318[5];
            *(void *)(v78 + 64) = 0LL;
            *(void *)(v78 + 72) = 0LL;
            *(void *)(v78 + 80) = 0LL;
            *(void *)(v78 + 88) = v77;
            swift_release();
            LOBYTE(v268) = 0;
            AttributedSubstring.mergeAttributes(_:mergePolicy:)((uint64_t *)&v270, (char *)&v268);
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            if ((void)v250 != v76) {
              goto LABEL_131;
            }
            int64_t v39 = v242 + 24;
            uint64_t v37 = *(void *)v246;
            swift_release();
            --v38;
            unint64_t v5 = v75;
            if (v38) {
              continue;
            }
            swift_bridgeObjectRelease();
            uint64_t v30 = v221;
            uint64_t v11 = v227;
            char v15 = v228;
            uint64_t v20 = v226;
            break;
          case 11:
            goto LABEL_30;
          default:
            goto LABEL_31;
        }

        break;
      }
    }

    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    a1 = v219;
  }

  else
  {
    *(void *)__int128 v246 = 0LL;
    dispatch thunk of CustomStringConvertible.description.getter();
    BigString.init(_:)();
    AttributedString.init(_:attributes:)(v312, MEMORY[0x18961AFF0], MEMORY[0x18961AFF8], (uint64_t *)v246);
    swift_release();
    uint64_t v37 = *(void *)v246;
  }

  *(_OWORD *)__int128 v246 = v315;
  swift_retain();
  if ((ByteCountFormatStyle.Attributed.useSpelloutZero(forLocale:unit:)((uint64_t)v246, v236) & 1) == 0)
  {
    swift_release();
    uint64_t result = swift_release();
    *a1 = v37;
    return result;
  }

  uint64_t v220 = (_OWORD *)v37;
  unint64_t v221 = v30;
  unint64_t v19 = v5;
  *(_WORD *)char v15 = 770;
  swift_storeEnumTagMultiPayload();
  uint64_t v228 = v15;
  outlined init with copy of ICUNumberFormatter.Signature( (uint64_t)v15,  (uint64_t)v11,  type metadata accessor for ICULegacyNumberFormatter.NumberFormatType);
  uint64_t v80 = *((void *)&v315 + 1);
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v82 = *(uint64_t (**)(void, void))(v80 + 64);
  outlined retain of ByteCountFormatStyle.Attributed((uint64_t)&v244);
  uint64_t v83 = v82(ObjectType, v80);
  uint64_t v84 = v223;
  uint64_t v85 = (uint64_t *)&v11[*(int *)(v223 + 20)];
  *uint64_t v85 = v83;
  v85[1] = v86;
  v11[*(int *)(v84 + 24)] = 0;
  if (one-time initialization token for cache != -1) {
    goto LABEL_88;
  }
LABEL_44:
  uint64_t v87 = static ICULegacyNumberFormatter.cache;
  uint64_t v88 = (char *)unk_18C5CB2B0;
  uint64_t v89 = (uint64_t)v224;
  outlined init with copy of ICUNumberFormatter.Signature( (uint64_t)v11,  (uint64_t)v224,  type metadata accessor for ICULegacyNumberFormatter.Signature);
  unint64_t v90 = (v20[80] + 16LL) & ~(unint64_t)v20[80];
  uint64_t v91 = swift_allocObject();
  outlined init with take of ICULegacyNumberFormatter.Signature(v89, v91 + v90);
  uint64_t v92 = v88 + 16;
  uint64_t v93 = (os_unfair_lock_s *)(v88 + 24);
  swift_retain_n();
  os_unfair_lock_lock((os_unfair_lock_t)v88 + 6);
  __int128 v227 = v11;
  specialized closure #1 in FormatterCache.formatter(for:creator:)((uint64_t)(v88 + 16), (uint64_t)v11, (uint64_t *)v246);
  os_unfair_lock_unlock((os_unfair_lock_t)v88 + 6);
  swift_release();
  if (*(void *)v246)
  {
    unint64_t v217 = v19;
    uint64_t v222 = *(void *)v246;
    swift_release();
    uint64_t v95 = (uint64_t)v227;
    uint64_t v94 = (uint64_t)v228;
    goto LABEL_46;
  }

  implicit closure #2 in implicit closure #1 in static ICULegacyNumberFormatter.formatter(for:locale:lenient:)();
  uint64_t v183 = v182;
  __int128 v184 = (void *)v19;
  uint64_t v185 = (uint64_t)v228;
  if (v184)
  {

    swift_release();
    outlined destroy of ICUNumberFormatter.Signature( (uint64_t)v227,  type metadata accessor for ICULegacyNumberFormatter.Signature);
    swift_release();
    outlined release of ByteCountFormatStyle.Attributed((uint64_t)&v244);
    outlined destroy of ICUNumberFormatter.Signature( v185,  type metadata accessor for ICULegacyNumberFormatter.NumberFormatType);
    __int128 v186 = v220;
    swift_release();
    uint64_t result = swift_release();
    *uint64_t v219 = (uint64_t)v186;
    return result;
  }

  unint64_t v217 = 0LL;
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)v88 + 6);
  uint64_t v187 = *((void *)v88 + 2);
  if (v87 >= *(void *)(v187 + 16))
  {
    swift_bridgeObjectRetain();
    LOBYTE(v168) = v187;
  }

  else
  {
    LOBYTE(v168) = MEMORY[0x18961AFF0];
    *uint64_t v92 = MEMORY[0x18961AFF0];
  }

  swift_retain();
  int v188 = swift_isUniquelyReferenced_nonNull_native();
  v290[0] = *v92;
  int64_t v167 = v290[0];
  *uint64_t v92 = 0x8000000000000000LL;
  unint64_t v177 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v227);
  uint64_t v190 = *(void *)(v167 + 16);
  BOOL v191 = (v189 & 1) == 0;
  uint64_t v192 = v190 + v191;
  if (__OFADD__(v190, v191))
  {
    __break(1u);
LABEL_91:
    __break(1u);
    goto LABEL_92;
  }

  LOBYTE(v168) = v189;
  uint64_t v193 = *(void *)(v167 + 24);
  uint64_t v222 = v183;
  if (v193 < v192)
  {
    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v192, v188);
    uint64_t v194 = v290[0];
    uint64_t v95 = (uint64_t)v227;
    unint64_t v195 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v227);
    if ((v168 & 1) != (v196 & 1)) {
      goto LABEL_133;
    }
    unint64_t v177 = v195;
    uint64_t v94 = (uint64_t)v228;
    uint64_t v197 = (uint64_t)v224;
    if ((v168 & 1) == 0) {
      goto LABEL_127;
    }
    goto LABEL_83;
  }

  if ((v188 & 1) == 0)
  {
LABEL_92:
    unint64_t v237 = v177;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<ICULegacyNumberFormatter.Signature, ICULegacyNumberFormatter>);
    uint64_t v200 = static _DictionaryStorage.copy(original:)();
    uint64_t v194 = v200;
    if (*(void *)(v167 + 16))
    {
      __int128 v201 = (char *)(v200 + 64);
      uint64_t v202 = 1LL << *(_BYTE *)(v194 + 32);
      uint64_t v239 = (char *)(v167 + 64);
      unint64_t v203 = (unint64_t)(v202 + 63) >> 6;
      if (v194 != v167 || v201 >= &v239[8 * v203]) {
        memmove(v201, v239, 8 * v203);
      }
      *(void *)(v194 + 16) = *(void *)(v167 + 16);
      uint64_t v204 = 1LL << *(_BYTE *)(v167 + 32);
      uint64_t v205 = -1LL;
      if (v204 < 64) {
        uint64_t v205 = ~(-1LL << v204);
      }
      unint64_t v206 = v205 & *(void *)(v167 + 64);
      int64_t v242 = 0LL;
      unint64_t v243 = v206;
      int64_t v238 = (unint64_t)(v204 + 63) >> 6;
      uint64_t v207 = (uint64_t)v224;
      while (1)
      {
        if (v243)
        {
          unint64_t v208 = __clz(__rbit64(v243));
          v243 &= v243 - 1;
          unint64_t v209 = v208 | (v242 << 6);
        }

        else
        {
          int64_t v212 = v242 + 1;
          if (__OFADD__(v242, 1LL))
          {
            __break(1u);
LABEL_131:
            _assertionFailure(_:_:file:line:flags:)();
            __break(1u);
            goto LABEL_132;
          }

          if (v212 >= v238) {
            break;
          }
          unint64_t v213 = *(void *)&v239[8 * v212];
          ++v242;
          if (!v213)
          {
            int64_t v242 = v212 + 1;
            if (v212 + 1 >= v238) {
              break;
            }
            unint64_t v213 = *(void *)&v239[8 * v242];
            if (!v213)
            {
              int64_t v242 = v212 + 2;
              if (v212 + 2 >= v238) {
                break;
              }
              unint64_t v213 = *(void *)&v239[8 * v242];
              if (!v213)
              {
                int64_t v242 = v212 + 3;
                if (v212 + 3 >= v238) {
                  break;
                }
                unint64_t v213 = *(void *)&v239[8 * v242];
                if (!v213)
                {
                  int64_t v242 = v212 + 4;
                  if (v212 + 4 >= v238) {
                    break;
                  }
                  unint64_t v213 = *(void *)&v239[8 * v242];
                  if (!v213)
                  {
                    int64_t v242 = v212 + 5;
                    if (v212 + 5 >= v238) {
                      break;
                    }
                    unint64_t v213 = *(void *)&v239[8 * v242];
                    if (!v213)
                    {
                      int64_t v242 = v212 + 6;
                      if (v212 + 6 >= v238) {
                        break;
                      }
                      unint64_t v213 = *(void *)&v239[8 * v242];
                      if (!v213)
                      {
                        int64_t v242 = v212 + 7;
                        if (v212 + 7 >= v238) {
                          break;
                        }
                        unint64_t v213 = *(void *)&v239[8 * v242];
                        if (!v213)
                        {
                          int64_t v214 = v212 + 8;
                          if (v214 >= v238) {
                            break;
                          }
                          unint64_t v213 = *(void *)&v239[8 * v214];
                          if (!v213)
                          {
                            while (1)
                            {
                              int64_t v242 = v214 + 1;
                              if (__OFADD__(v214, 1LL)) {
                                break;
                              }
                              if (v242 >= v238) {
                                goto LABEL_126;
                              }
                              unint64_t v213 = *(void *)&v239[8 * v242];
                              ++v214;
                              if (v213) {
                                goto LABEL_125;
                              }
                            }

uint64_t AttributeScopes.FoundationAttributes.ByteCountAttribute.Component.init(unumberFormatField:unit:)@<X0>( uint64_t result@<X0>, char a2@<W1>, _BYTE *a3@<X8>)
{
  if (((1 << result) & 0x447) != 0)
  {
    *a3 = 9;
    return result;
  }

  if ((_DWORD)result == 11) {
    *a3 = a2;
  }
  else {
LABEL_6:
  }
    *a3 = 12;
  return result;
}

void static ByteCountFormatStyle.Units.all.getter(void *a1@<X8>)
{
  *a1 = 0xFFFFLL;
}

uint64_t (*ByteCountFormatStyle.style.modify(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  *(_BYTE *)(a1 + 8) = *v1;
  return Measurement<>.AttributedStyle<>.ByteCount.style.modify;
}

void *(*ByteCountFormatStyle.allowedUnits.modify(void *a1))(void *result)
{
  *a1 = *(void *)(v1 + 8);
  a1[1] = v1;
  return Measurement<>.AttributedStyle<>.ByteCount.allowedUnits.modify;
}

_BYTE *(*ByteCountFormatStyle.spellsOutZero.modify(uint64_t a1))(_BYTE *result)
{
  *(void *)a1 = v1;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(v1 + 16);
  return Measurement<>.AttributedStyle<>.ByteCount.spellsOutZero.modify;
}

uint64_t ByteCountFormatStyle.includesActualByteCount.getter()
{
  return *(unsigned __int8 *)(v0 + 17);
}

uint64_t ByteCountFormatStyle.includesActualByteCount.setter(uint64_t result)
{
  *(_BYTE *)(v1 + 17) = result;
  return result;
}

_BYTE *(*ByteCountFormatStyle.includesActualByteCount.modify(uint64_t a1))(_BYTE *result)
{
  *(void *)a1 = v1;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(v1 + 17);
  return Measurement<>.AttributedStyle<>.ByteCount.includesActualByteCount.modify;
}

uint64_t (*ByteCountFormatStyle.locale.modify(uint64_t a1))(uint64_t *a1, char a2)
{
  *(void *)(a1 + 16) = v1;
  *(_OWORD *)a1 = *(_OWORD *)(v1 + 24);
  swift_unknownObjectRetain();
  return Measurement<>.AttributedStyle<>.ByteCount.locale.modify;
}

uint64_t ByteCountFormatStyle.attributed.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = *(void *)(v1 + 8);
  char v3 = *(_BYTE *)(v1 + 16);
  char v4 = *(_BYTE *)(v1 + 17);
  *(_BYTE *)a1 = *(_BYTE *)v1;
  *(void *)(a1 + 8) = v2;
  *(_BYTE *)(a1 + 16) = v3;
  *(_BYTE *)(a1 + 17) = v4;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(v1 + 24);
  return swift_unknownObjectRetain();
}

__n128 ByteCountFormatStyle.attributed.setter(char *a1)
{
  char v3 = *a1;
  uint64_t v4 = *((void *)a1 + 1);
  char v5 = a1[16];
  char v6 = a1[17];
  swift_unknownObjectRelease();
  *(_BYTE *)uint64_t v1 = v3;
  *(void *)(v1 + 8) = v4;
  *(_BYTE *)(v1 + 16) = v5;
  *(_BYTE *)(v1 + 17) = v6;
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v1 + 24) = result;
  return result;
}

uint64_t (*ByteCountFormatStyle.attributed.modify())(void, void)
{
  return destructiveProjectEnumData for PredicateCodableError;
}

void one-time initialization function for unitNames()
{
  static ByteCountFormatStyle.Unit.unitNames = (uint64_t)&outlined read-only object #0 of one-time initialization function for unitNames;
}

void one-time initialization function for decimalByteSizes()
{
  static ByteCountFormatStyle.Unit.decimalByteSizes = (uint64_t)&outlined read-only object #0 of one-time initialization function for decimalByteSizes;
}

void one-time initialization function for binaryByteSizes()
{
  static ByteCountFormatStyle.Unit.binaryByteSizes = (uint64_t)&outlined read-only object #0 of one-time initialization function for binaryByteSizes;
}

Swift::String __swiftcall ByteCountFormatStyle.format(_:)(Swift::Int64 a1)
{
  __int128 v1 = v5[2];
  __int128 v6 = v5[1];
  __int128 v7 = v1;
  __int128 v8 = v5[3];
  BigString.startIndex.getter();
  BigString.endIndex.getter();
  lazy protocol witness table accessor for type AttributedString.CharacterView and conformance AttributedString.CharacterView();
  uint64_t v2 = String.init<A>(_:)();
  result._uint64_t object = v3;
  result._uint64_t countAndFlagsBits = v2;
  return result;
}

uint64_t ByteCountFormatStyle.Attributed.format(_:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  return ByteCountFormatStyle.Attributed._format(_:doubleValue:)(a2, (double)a1);
}

uint64_t ByteCountFormatStyle.locale(_:)@<X0>(_OWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *(void *)(v2 + 8);
  char v4 = *(_BYTE *)(v2 + 16);
  char v5 = *(_BYTE *)(v2 + 17);
  *(_BYTE *)a2 = *(_BYTE *)v2;
  *(void *)(a2 + 8) = v3;
  *(_BYTE *)(a2 + 16) = v4;
  *(_BYTE *)(a2 + 17) = v5;
  *(_OWORD *)(a2 + 24) = *a1;
  return swift_unknownObjectRetain();
}

__n128 ByteCountFormatStyle.init(style:allowedUnits:spellsOutZero:includesActualByteCount:locale:)@<Q0>( _BYTE *a1@<X0>, uint64_t *a2@<X1>, char a3@<W2>, char a4@<W3>, __n128 *a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v6 = *a2;
  *(_BYTE *)a6 = *a1;
  *(void *)(a6 + 8) = v6;
  *(_BYTE *)(a6 + 16) = a3;
  *(_BYTE *)(a6 + 17) = a4;
  __n128 result = *a5;
  *(__n128 *)(a6 + 24) = *a5;
  return result;
}

Foundation::ByteCountFormatStyle::Style_optional __swiftcall ByteCountFormatStyle.Style.init(rawValue:)( Swift::Int rawValue)
{
  char v2 = 4;
  *__int128 v1 = v2;
  return (Foundation::ByteCountFormatStyle::Style_optional)rawValue;
}

uint64_t ByteCountFormatStyle.Style.rawValue.getter()
{
  return *v0;
}

Foundation::ByteCountFormatStyle::Style_optional protocol witness for RawRepresentable.init(rawValue:) in conformance ByteCountFormatStyle.Style( Swift::Int *a1)
{
  return ByteCountFormatStyle.Style.init(rawValue:)(*a1);
}

uint64_t protocol witness for Decodable.init(from:) in conformance ByteCountFormatStyle.Style()
{
  return RawRepresentable<>.init(from:)();
}

uint64_t protocol witness for Encodable.encode(to:) in conformance ByteCountFormatStyle.Style()
{
  return RawRepresentable<>.encode(to:)();
}

uint64_t ByteCountFormatStyle.Units.rawValue.getter()
{
  return *(void *)v0;
}

uint64_t ByteCountFormatStyle.Units.rawValue.setter(uint64_t result)
{
  *__int128 v1 = result;
  return result;
}

uint64_t (*ByteCountFormatStyle.Units.rawValue.modify())(void, void)
{
  return destructiveProjectEnumData for PredicateCodableError;
}

Foundation::ByteCountFormatStyle::Units __swiftcall ByteCountFormatStyle.Units.init(rawValue:)( Foundation::ByteCountFormatStyle::Units rawValue)
{
  Swift::UInt v2 = 0xFFFFLL;
  if (rawValue.rawValue) {
    Swift::UInt v2 = rawValue.rawValue;
  }
  *__int128 v1 = v2;
  return rawValue;
}

void static ByteCountFormatStyle.Units.bytes.getter(void *a1@<X8>)
{
  *a1 = 1LL;
}

void static ByteCountFormatStyle.Units.kb.getter(void *a1@<X8>)
{
  *a1 = 2LL;
}

void static ByteCountFormatStyle.Units.mb.getter(void *a1@<X8>)
{
  *a1 = 4LL;
}

void static ByteCountFormatStyle.Units.gb.getter(void *a1@<X8>)
{
  *a1 = 8LL;
}

void static ByteCountFormatStyle.Units.tb.getter(void *a1@<X8>)
{
  *a1 = 16LL;
}

void static ByteCountFormatStyle.Units.pb.getter(void *a1@<X8>)
{
  *a1 = 32LL;
}

void static ByteCountFormatStyle.Units.eb.getter(void *a1@<X8>)
{
  *a1 = 64LL;
}

void static ByteCountFormatStyle.Units.zb.getter(void *a1@<X8>)
{
  *a1 = 128LL;
}

void static ByteCountFormatStyle.Units.ybOrHigher.getter(void *a1@<X8>)
{
  *a1 = 65280LL;
}

uint64_t ByteCountFormatStyle.Units.smallestUnit.getter()
{
  uint64_t v1 = *v0;
  else {
    BOOL v2 = 1;
  }
  if (v2) {
    return 0LL;
  }
  if ((v1 & 1) != 0) {
    return 1LL;
  }
  if ((v1 & 4) != 0) {
    int v4 = 4;
  }
  else {
    int v4 = 5;
  }
  if ((~(_BYTE)v1 & 3) != 0) {
    unsigned int v5 = v4;
  }
  else {
    unsigned int v5 = 3;
  }
  if ((v1 & 2) != 0) {
    return 2LL;
  }
  else {
    return v5;
  }
}

uint64_t *protocol witness for OptionSet.init(rawValue:) in conformance ByteCountFormatStyle.Units@<X0>( uint64_t *result@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2 = *result;
  if (!*result) {
    uint64_t v2 = 0xFFFFLL;
  }
  *a2 = v2;
  return result;
}

uint64_t protocol witness for Decodable.init(from:) in conformance ByteCountFormatStyle.Units()
{
  return RawRepresentable<>.init(from:)();
}

uint64_t protocol witness for Encodable.encode(to:) in conformance ByteCountFormatStyle.Units()
{
  return RawRepresentable<>.encode(to:)();
}

void protocol witness for SetAlgebra.init() in conformance ByteCountFormatStyle.Units(void *a1@<X8>)
{
  *a1 = 0xFFFFLL;
}

void *protocol witness for SetAlgebra.union(_:) in conformance ByteCountFormatStyle.Units@<X0>( void *result@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3 = *v2;
  if (!*v2) {
    uint64_t v3 = 0xFFFFLL;
  }
  *a2 = v3 | *result;
  return result;
}

void *protocol witness for SetAlgebra.intersection(_:) in conformance ByteCountFormatStyle.Units@<X0>( void *result@<X0>, void *a2@<X8>)
{
  if (*v2)
  {
    uint64_t v3 = *v2 & *result;
    if (v3)
    {
LABEL_3:
      *a2 = v3;
      return result;
    }
  }

  else
  {
    uint64_t v3 = (unsigned __int16)*result;
  }

  *a2 = 0xFFFFLL;
  return result;
}

uint64_t *protocol witness for SetAlgebra.symmetricDifference(_:) in conformance ByteCountFormatStyle.Units@<X0>( uint64_t *result@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3 = *result;
  if (*v2)
  {
    uint64_t v4 = *v2 ^ v3;
    if (v4)
    {
LABEL_3:
      *a2 = v4;
      return result;
    }
  }

  else
  {
    uint64_t v4 = v3 ^ 0xFFFF;
    if (v4) {
      goto LABEL_3;
    }
  }

  *a2 = 0xFFFFLL;
  return result;
}

BOOL protocol witness for SetAlgebra.insert(_:) in conformance ByteCountFormatStyle.Units( void *a1, uint64_t *a2)
{
  return specialized OptionSet<>.insert(_:)(a1, *a2);
}

uint64_t protocol witness for SetAlgebra.remove(_:) in conformance ByteCountFormatStyle.Units@<X0>( uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  return specialized OptionSet<>.remove(_:)(*a1, a2);
}

uint64_t protocol witness for SetAlgebra.update(with:) in conformance ByteCountFormatStyle.Units@<X0>( uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  return specialized OptionSet<>.update(with:)(*a1, a2);
}

void *protocol witness for SetAlgebra.formUnion(_:) in conformance ByteCountFormatStyle.Units( void *result)
{
  uint64_t v2 = *v1 | *result;
  if (!v2) {
    uint64_t v2 = 0xFFFFLL;
  }
  *uint64_t v1 = v2;
  return result;
}

void *protocol witness for SetAlgebra.formIntersection(_:) in conformance ByteCountFormatStyle.Units( void *result)
{
  uint64_t v2 = *v1 & *result;
  if (!v2) {
    uint64_t v2 = 0xFFFFLL;
  }
  *uint64_t v1 = v2;
  return result;
}

void *protocol witness for SetAlgebra.formSymmetricDifference(_:) in conformance ByteCountFormatStyle.Units( void *result)
{
  uint64_t v2 = *v1 ^ *result;
  if (!v2) {
    uint64_t v2 = 0xFFFFLL;
  }
  *uint64_t v1 = v2;
  return result;
}

uint64_t protocol witness for SetAlgebra.subtracting(_:) in conformance ByteCountFormatStyle.Units@<X0>( uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  return specialized SetAlgebra.subtracting(_:)(*a1, *v2, a2);
}

BOOL protocol witness for SetAlgebra.isSubset(of:) in conformance ByteCountFormatStyle.Units(void *a1)
{
  uint64_t v2 = *v1;
  if (!*v1)
  {
    uint64_t v3 = (unsigned __int16)*a1;
    goto LABEL_3;
  }

  uint64_t v3 = v2 & *a1;
  if (!v3) {
LABEL_3:
  }
    uint64_t v3 = 0xFFFFLL;
  return v3 == v2;
}

BOOL protocol witness for SetAlgebra.isDisjoint(with:) in conformance ByteCountFormatStyle.Units(void *a1)
{
  if (!*v1)
  {
    uint64_t v2 = (unsigned __int16)*a1;
    goto LABEL_3;
  }

  uint64_t v2 = *v1 & *a1;
  if (!v2) {
LABEL_3:
  }
    uint64_t v2 = 0xFFFFLL;
  return v2 == 0xFFFF;
}

BOOL protocol witness for SetAlgebra.contains(_:) in conformance ByteCountFormatStyle.Units(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (!*a1)
  {
    uint64_t v3 = (unsigned __int16)*v1;
    goto LABEL_3;
  }

  uint64_t v3 = *v1 & v2;
  if (!v3) {
LABEL_3:
  }
    uint64_t v3 = 0xFFFFLL;
  return v3 == v2;
}

BOOL protocol witness for SetAlgebra.isEmpty.getter in conformance ByteCountFormatStyle.Units()
{
  return *v0 == 0xFFFFLL;
}

uint64_t protocol witness for SetAlgebra.subtract(_:) in conformance ByteCountFormatStyle.Units(uint64_t *a1)
{
  return specialized SetAlgebra.subtract(_:)(*a1);
}

uint64_t *protocol witness for RawRepresentable.init(rawValue:) in conformance ByteCountFormatStyle.Units@<X0>( uint64_t *result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2 = *result;
  if (!*result) {
    uint64_t v2 = 0xFFFFLL;
  }
  *(void *)a2 = v2;
  *(_BYTE *)(a2 + 8) = 0;
  return result;
}

void ByteCountFormatStyle.Attributed.style.getter(_BYTE *a1@<X8>)
{
  *a1 = *v1;
}

_BYTE *ByteCountFormatStyle.Attributed.style.setter(_BYTE *result)
{
  *uint64_t v1 = *result;
  return result;
}

uint64_t (*ByteCountFormatStyle.Attributed.style.modify())(void, void)
{
  return destructiveProjectEnumData for PredicateCodableError;
}

void ByteCountFormatStyle.Attributed.allowedUnits.getter(void *a1@<X8>)
{
  *a1 = *(void *)(v1 + 8);
}

void *ByteCountFormatStyle.Attributed.allowedUnits.setter(void *result)
{
  *(void *)(v1 + 8) = *result;
  return result;
}

uint64_t (*ByteCountFormatStyle.Attributed.allowedUnits.modify())(void, void)
{
  return destructiveProjectEnumData for PredicateCodableError;
}

uint64_t ByteCountFormatStyle.Attributed.spellsOutZero.getter()
{
  return *(unsigned __int8 *)(v0 + 16);
}

uint64_t ByteCountFormatStyle.Attributed.spellsOutZero.setter(uint64_t result)
{
  *(_BYTE *)(v1 + 16) = result;
  return result;
}

uint64_t (*ByteCountFormatStyle.Attributed.spellsOutZero.modify())(void, void)
{
  return destructiveProjectEnumData for PredicateCodableError;
}

uint64_t (*ByteCountFormatStyle.Attributed.includesActualByteCount.modify())(void, void)
{
  return destructiveProjectEnumData for PredicateCodableError;
}

uint64_t ByteCountFormatStyle.Attributed.locale.getter@<X0>(_OWORD *a1@<X8>)
{
  *a1 = *(_OWORD *)(v1 + 24);
  return swift_unknownObjectRetain();
}

__n128 ByteCountFormatStyle.Attributed.locale.setter(__n128 *a1)
{
  __n128 result = *a1;
  *(__n128 *)(v1 + 24) = *a1;
  return result;
}

uint64_t (*ByteCountFormatStyle.Attributed.locale.modify())(void, void)
{
  return destructiveProjectEnumData for PredicateCodableError;
}

uint64_t ByteCountFormatStyle.Attributed.locale(_:)@<X0>(_OWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *(void *)(v2 + 8);
  char v4 = *(_BYTE *)(v2 + 16);
  char v5 = *(_BYTE *)(v2 + 17);
  *(_BYTE *)a2 = *(_BYTE *)v2;
  *(void *)(a2 + 8) = v3;
  *(_BYTE *)(a2 + 16) = v4;
  *(_BYTE *)(a2 + 17) = v5;
  *(_OWORD *)(a2 + 24) = *a1;
  return swift_unknownObjectRetain();
}

void one-time initialization function for maxDecimalSizes()
{
  static ByteCountFormatStyle.Attributed.maxDecimalSizes = (uint64_t)&outlined read-only object #0 of one-time initialization function for maxDecimalSizes;
}

void one-time initialization function for maxBinarySizes()
{
  static ByteCountFormatStyle.Attributed.maxBinarySizes = (uint64_t)&outlined read-only object #0 of one-time initialization function for maxBinarySizes;
}

uint64_t ByteCountFormatStyle.Attributed.useSpelloutZero(forLocale:unit:)(uint64_t a1, unsigned __int8 a2)
{
  void (*v5)(_OWORD *__return_ptr, uint64_t, uint64_t);
  void *object;
  uint64_t countAndFlagsBits;
  uint64_t v8;
  uint64_t v9;
  Swift::String v10;
  char v11;
  _OWORD v13[6];
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  if (a2 > 1u) {
    goto LABEL_50;
  }
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t ObjectType = swift_getObjectType();
  char v5 = *(void (**)(_OWORD *__return_ptr, uint64_t, uint64_t))(v3 + 352);
  swift_unknownObjectRetain();
  v5(v13, ObjectType, v3);
  swift_unknownObjectRelease();
  __int128 v16 = v13[2];
  uint64_t v17 = v13[3];
  unint64_t v18 = v13[4];
  unint64_t v19 = v13[5];
  uint64_t v14 = v13[0];
  char v15 = v13[1];
  if (*((void *)&v13[0] + 1))
  {
    uint64_t object = (void *)*((void *)&v15 + 1);
    uint64_t countAndFlagsBits = v15;
    outlined copy of Locale.LanguageCode?(v14, *((uint64_t *)&v13[0] + 1));
  }

  else
  {
    outlined retain of Locale.Language( (uint64_t *)&v14,  (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))outlined copy of Locale.LanguageCode?);
    specialized _withFixedCharBuffer(size:_:)(257LL, (uint64_t *)&v14);
    uint64_t v9 = v8;
    outlined retain of Locale.Language( (uint64_t *)&v14,  (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))outlined consume of Locale.LanguageCode?);
    if (!v9)
    {
      outlined retain of Locale.Language( (uint64_t *)&v14,  (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))outlined consume of Locale.LanguageCode?);
      goto LABEL_50;
    }

    uint64_t v10 = String.lowercased()();
    uint64_t countAndFlagsBits = v10._countAndFlagsBits;
    uint64_t object = v10._object;
  }

  outlined retain of Locale.Language( (uint64_t *)&v14,  (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))outlined consume of Locale.LanguageCode?);
  swift_bridgeObjectRelease();
  if ((countAndFlagsBits != 29281 || object != (void *)0xE200000000000000LL)
    && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0
    && (countAndFlagsBits != 24932 || object != (void *)0xE200000000000000LL)
    && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0
    && (countAndFlagsBits != 27749 || object != (void *)0xE200000000000000LL)
    && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0
    && (countAndFlagsBits != 28261 || object != (void *)0xE200000000000000LL)
    && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0
    && (countAndFlagsBits != 29286 || object != (void *)0xE200000000000000LL)
    && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0
    && (countAndFlagsBits != 26984 || object != (void *)0xE200000000000000LL)
    && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0
    && (countAndFlagsBits != 29288 || object != (void *)0xE200000000000000LL)
    && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0
    && (countAndFlagsBits != 25705 || object != (void *)0xE200000000000000LL)
    && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0
    && (countAndFlagsBits != 29801 || object != (void *)0xE200000000000000LL)
    && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0
    && (countAndFlagsBits != 29549 || object != (void *)0xE200000000000000LL)
    && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0
    && (countAndFlagsBits != 29808 || object != (void *)0xE200000000000000LL)
    && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0
    && (countAndFlagsBits != 28530 || object != (void *)0xE200000000000000LL)
    && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0
    && (countAndFlagsBits != 26740 || object != (void *)0xE200000000000000LL)
    && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
  {
    if (a2)
    {
      swift_bridgeObjectRelease();
LABEL_50:
      uint64_t v11 = 0;
      return v11 & 1;
    }

    if ((countAndFlagsBits != 24931 || object != (void *)0xE200000000000000LL)
      && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0
      && (countAndFlagsBits != 28526 || object != (void *)0xE200000000000000LL))
    {
      uint64_t v11 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      return v11 & 1;
    }
  }

  swift_bridgeObjectRelease();
  uint64_t v11 = 1;
  return v11 & 1;
}

uint64_t closure #1 in ByteCountFormatStyle.Attributed._format(_:doubleValue:)( uint64_t a1, uint64_t a2, double a3)
{
  unint64_t v5 = *(void *)(a1 + 8);
  uint64_t result = ByteCountFormatStyle.Units.smallestUnit.getter();
  uint64_t v7 = *(void *)(a2 + 16);
  if (v7)
  {
    for (unint64_t i = 0LL; v7 != i; ++i)
    {
      if (i < 0x40)
      {
        if (((v5 >> i) & 1) == 0) {
          continue;
        }
      }

      else if ((_WORD)v5 && (unsigned __int16)v5 != 0xFFFF)
      {
        continue;
      }

      if (i > 8)
      {
        __break(1u);
        return result;
      }

      uint64_t result = i;
    }
  }

  return result;
}

uint64_t ByteCountFormatStyle.Attributed.hash(into:)(uint64_t a1)
{
  void (*v10)(void *__return_ptr, uint64_t, uint64_t);
  Swift::UInt8 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  id v23;
  id v24;
  id v25;
  id v26;
  id v27;
  id v28;
  id v29;
  id v30;
  id v31;
  id v32;
  id v33;
  id v34;
  id v35;
  uint64_t v36;
  uint64_t v37;
  Swift::UInt v38;
  Swift::UInt v39;
  Swift::UInt8 v40;
  Swift::UInt8 v41;
  Swift::UInt8 v42;
  _BYTE v43[144];
  _BYTE v44[8];
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  void *v50;
  void *v51;
  void *v52;
  void *v53;
  void *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char v58;
  char v59;
  char v60;
  char v61;
  void v62[18];
  _BYTE v63[144];
  _BYTE v64[152];
  Swift::UInt v3 = *((void *)v1 + 1);
  Swift::UInt8 v4 = v1[16];
  Swift::UInt8 v5 = v1[17];
  uint64_t v6 = *((void *)v1 + 4);
  Hasher._combine(_:)(*v1);
  Hasher._combine(_:)(v3);
  Hasher._combine(_:)(v4);
  Hasher._combine(_:)(v5);
  uint64_t ObjectType = swift_getObjectType();
  __int128 v8 = *(uint64_t (**)(uint64_t, uint64_t))(v6 + 48);
  swift_unknownObjectRetain();
  if ((v8(ObjectType, v6) & 1) != 0)
  {
    Hasher._combine(_:)(1u);
    return swift_unknownObjectRelease();
  }

  Hasher._combine(_:)(0);
  (*(void (**)(uint64_t, uint64_t))(v6 + 64))(ObjectType, v6);
  String.hash(into:)();
  swift_bridgeObjectRelease();
  uint64_t v10 = *(void (**)(void *__return_ptr, uint64_t, uint64_t))(v6 + 464);
  swift_unknownObjectRetain();
  v10(v62, ObjectType, v6);
  swift_unknownObjectRelease();
  outlined init with take of LocalePreferences?((uint64_t)v62, (uint64_t)v63);
  outlined init with take of LocalePreferences?((uint64_t)v63, (uint64_t)v64);
  if (_s10Foundation17LocalePreferencesVSgWOg((uint64_t)v64) != 1)
  {
    outlined init with take of LocalePreferences?((uint64_t)v63, (uint64_t)v44);
    Hasher._combine(_:)(1u);
    if (v44[0] == 2)
    {
      uint64_t v11 = 0;
    }

    else
    {
      uint64_t v11 = v44[0] & 1;
      Hasher._combine(_:)(1u);
    }

    Hasher._combine(_:)(v11);
    uint64_t v12 = v45;
    if (v45)
    {
      Hasher._combine(_:)(1u);
      Hasher._combine(_:)(*(void *)(v12 + 16));
      uint64_t v13 = *(void *)(v12 + 16);
      if (v13)
      {
        outlined retain of LocalePreferences?( (uint64_t)v63,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined copy of LocalePreferences?);
        swift_bridgeObjectRetain();
        uint64_t v14 = v12 + 40;
        do
        {
          swift_bridgeObjectRetain();
          String.hash(into:)();
          swift_bridgeObjectRelease();
          v14 += 16LL;
          --v13;
        }

        while (v13);
        swift_bridgeObjectRelease();
        if (!v46)
        {
LABEL_13:
          Hasher._combine(_:)(0);
          if (!v47) {
            goto LABEL_14;
          }
          goto LABEL_21;
        }

uint64_t protocol witness for CodingKey.stringValue.getter in conformance ByteCountFormatStyle.Attributed.CodingKeys()
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_18350B790 + 4 * byte_183834240[*v0]))( 0x656C797473LL,  0xE500000000000000LL);
}

uint64_t sub_18350B790()
{
  return 0x556465776F6C6C61LL;
}

uint64_t sub_18350B7B0()
{
  return 0x754F736C6C657073LL;
}

unint64_t sub_18350B7D4()
{
  return 0xD000000000000017LL;
}

uint64_t sub_18350B7F0()
{
  return 0x656C61636F6CLL;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance ByteCountFormatStyle.Attributed.CodingKeys()
{
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance ByteCountFormatStyle.Attributed.CodingKeys()
{
  return CodingKey.debugDescription.getter();
}

uint64_t ByteCountFormatStyle.Attributed.encode(to:)(void *a1)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<ByteCountFormatStyle.Attributed.CodingKeys>);
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1895F8858](v4);
  uint64_t v7 = (char *)&v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  char v8 = *v1;
  uint64_t v12 = *((void *)v1 + 1);
  int v14 = v1[16];
  int v11 = v1[17];
  __int128 v10 = *(_OWORD *)(v1 + 24);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type ByteCountFormatStyle.Attributed.CodingKeys and conformance ByteCountFormatStyle.Attributed.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  LOBYTE(v13) = v8;
  char v15 = 0;
  lazy protocol witness table accessor for type ByteCountFormatStyle.Style and conformance ByteCountFormatStyle.Style();
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v2)
  {
    *(void *)&__int128 v13 = v12;
    char v15 = 1;
    lazy protocol witness table accessor for type ByteCountFormatStyle.Units and conformance ByteCountFormatStyle.Units();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    LOBYTE(v13) = 2;
    KeyedEncodingContainer.encode(_:forKey:)();
    LOBYTE(v13) = 3;
    KeyedEncodingContainer.encode(_:forKey:)();
    __int128 v13 = v10;
    char v15 = 4;
    lazy protocol witness table accessor for type Locale and conformance Locale();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
  }

  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

Swift::Int ByteCountFormatStyle.Attributed.hashValue.getter()
{
  void (*v9)(void *__return_ptr, uint64_t, uint64_t);
  Swift::UInt8 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _BYTE *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  id v22;
  id v23;
  id v24;
  id v25;
  id v26;
  id v27;
  id v28;
  id v29;
  id v30;
  id v31;
  id v32;
  id v33;
  id v34;
  uint64_t v35;
  uint64_t v36;
  Swift::UInt v37;
  Swift::UInt v38;
  Swift::UInt8 v39;
  Swift::UInt8 v40;
  Swift::UInt8 v41;
  _BYTE v43[144];
  _BYTE v44[8];
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  void *v50;
  void *v51;
  void *v52;
  void *v53;
  void *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char v58;
  char v59;
  char v60;
  char v61;
  void v62[18];
  _BYTE v63[144];
  _BYTE v64[144];
  _BYTE v65[72];
  Swift::UInt v1 = *v0;
  Swift::UInt v2 = *((void *)v0 + 1);
  Swift::UInt8 v3 = v0[16];
  Swift::UInt8 v4 = v0[17];
  uint64_t v5 = *((void *)v0 + 4);
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
  Hasher._combine(_:)(v3);
  Hasher._combine(_:)(v4);
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 48);
  swift_unknownObjectRetain();
  if ((v7(ObjectType, v5) & 1) != 0)
  {
    Swift::UInt8 v8 = 1;
LABEL_5:
    Hasher._combine(_:)(v8);
    goto LABEL_56;
  }

  Hasher._combine(_:)(0);
  (*(void (**)(uint64_t, uint64_t))(v5 + 64))(ObjectType, v5);
  String.hash(into:)();
  swift_bridgeObjectRelease();
  uint64_t v9 = *(void (**)(void *__return_ptr, uint64_t, uint64_t))(v5 + 464);
  swift_unknownObjectRetain();
  v9(v62, ObjectType, v5);
  swift_unknownObjectRelease();
  outlined init with take of LocalePreferences?((uint64_t)v62, (uint64_t)v63);
  outlined init with take of LocalePreferences?((uint64_t)v63, (uint64_t)v64);
  if (_s10Foundation17LocalePreferencesVSgWOg((uint64_t)v64) == 1)
  {
    Swift::UInt8 v8 = 0;
    goto LABEL_5;
  }

  outlined init with take of LocalePreferences?((uint64_t)v63, (uint64_t)v44);
  Hasher._combine(_:)(1u);
  if (v44[0] == 2)
  {
    __int128 v10 = 0;
  }

  else
  {
    __int128 v10 = v44[0] & 1;
    Hasher._combine(_:)(1u);
  }

  Hasher._combine(_:)(v10);
  int v11 = v45;
  if (!v45)
  {
    Hasher._combine(_:)(0);
    __int128 v16 = v44;
    goto LABEL_20;
  }

  Hasher._combine(_:)(1u);
  Hasher._combine(_:)(*(void *)(v11 + 16));
  uint64_t v12 = *(void *)(v11 + 16);
  if (!v12)
  {
    outlined init with take of LocalePreferences?((uint64_t)v63, (uint64_t)v43);
    __int128 v16 = v43;
LABEL_20:
    outlined retain of LocalePreferences(v16);
    if (!v46) {
      goto LABEL_14;
    }
    goto LABEL_21;
  }

  outlined retain of LocalePreferences?( (uint64_t)v63,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined copy of LocalePreferences?);
  swift_bridgeObjectRetain();
  __int128 v13 = v11 + 40;
  do
  {
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    v13 += 16LL;
    --v12;
  }

  while (v12);
  swift_bridgeObjectRelease();
  if (!v46)
  {
LABEL_14:
    Hasher._combine(_:)(0);
    if (!v47) {
      goto LABEL_15;
    }
    goto LABEL_22;
  }

uint64_t ByteCountFormatStyle.Attributed.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<ByteCountFormatStyle.Attributed.CodingKeys>);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1895F8858](v5);
  Swift::UInt8 v8 = (char *)&v14 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type ByteCountFormatStyle.Attributed.CodingKeys and conformance ByteCountFormatStyle.Attributed.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v2)
  {
    char v18 = 0;
    lazy protocol witness table accessor for type ByteCountFormatStyle.Style and conformance ByteCountFormatStyle.Style();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    char v9 = v16;
    char v18 = 1;
    lazy protocol witness table accessor for type ByteCountFormatStyle.Units and conformance ByteCountFormatStyle.Units();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    uint64_t v10 = v16;
    LOBYTE(v16) = 2;
    int v17 = KeyedDecodingContainer.decode(_:forKey:)();
    uint64_t v15 = v10;
    LOBYTE(v16) = 3;
    LOBYTE(v10) = KeyedDecodingContainer.decode(_:forKey:)();
    char v18 = 4;
    lazy protocol witness table accessor for type Locale and conformance Locale();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    char v12 = v17 & 1;
    __int128 v13 = v16;
    *(_BYTE *)a2 = v9;
    *(void *)(a2 + 8) = v15;
    *(_BYTE *)(a2 + 16) = v12;
    *(_BYTE *)(a2 + 17) = v10 & 1;
    *(_OWORD *)(a2 + 24) = v13;
  }

  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t protocol witness for FormatStyle.format(_:) in conformance ByteCountFormatStyle.Attributed@<X0>( uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  return ByteCountFormatStyle.Attributed._format(_:doubleValue:)(a2, (double)*a1);
}

uint64_t protocol witness for Decodable.init(from:) in conformance ByteCountFormatStyle.Attributed@<X0>( void *a1@<X0>, uint64_t a2@<X8>)
{
  return ByteCountFormatStyle.Attributed.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance ByteCountFormatStyle.Attributed( void *a1)
{
  return ByteCountFormatStyle.Attributed.encode(to:)(a1);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance ByteCountFormatStyle.Attributed()
{
  void (*v9)(void *__return_ptr, uint64_t, uint64_t);
  Swift::UInt8 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  id v21;
  id v22;
  id v23;
  id v24;
  id v25;
  id v26;
  id v27;
  id v28;
  id v29;
  id v30;
  id v31;
  id v32;
  id v33;
  uint64_t v34;
  uint64_t v35;
  Swift::UInt v36;
  Swift::UInt v37;
  Swift::UInt8 v38;
  Swift::UInt8 v39;
  Swift::UInt8 v40;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  void *v48;
  void *v49;
  void *v50;
  void *v51;
  void *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char v56;
  char v57;
  char v58;
  char v59;
  void v60[18];
  _BYTE v61[144];
  _BYTE v62[144];
  _BYTE v63[72];
  Swift::UInt v1 = *v0;
  Swift::UInt v2 = *((void *)v0 + 1);
  Swift::UInt8 v3 = v0[16];
  Swift::UInt8 v4 = v0[17];
  uint64_t v5 = *((void *)v0 + 4);
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
  Hasher._combine(_:)(v3);
  Hasher._combine(_:)(v4);
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 48);
  swift_unknownObjectRetain();
  if ((v7(ObjectType, v5) & 1) != 0)
  {
    Swift::UInt8 v8 = 1;
LABEL_5:
    Hasher._combine(_:)(v8);
    goto LABEL_55;
  }

  Hasher._combine(_:)(0);
  (*(void (**)(uint64_t, uint64_t))(v5 + 64))(ObjectType, v5);
  String.hash(into:)();
  swift_bridgeObjectRelease();
  char v9 = *(void (**)(void *__return_ptr, uint64_t, uint64_t))(v5 + 464);
  swift_unknownObjectRetain();
  v9(v60, ObjectType, v5);
  swift_unknownObjectRelease();
  outlined init with take of LocalePreferences?((uint64_t)v60, (uint64_t)v61);
  outlined init with take of LocalePreferences?((uint64_t)v61, (uint64_t)v62);
  if (_s10Foundation17LocalePreferencesVSgWOg((uint64_t)v62) == 1)
  {
    Swift::UInt8 v8 = 0;
    goto LABEL_5;
  }

  outlined init with take of LocalePreferences?((uint64_t)v61, (uint64_t)&v42);
  Hasher._combine(_:)(1u);
  if (v42 == 2)
  {
    uint64_t v10 = 0;
  }

  else
  {
    uint64_t v10 = v42 & 1;
    Hasher._combine(_:)(1u);
  }

  Hasher._combine(_:)(v10);
  int v11 = v43;
  if (!v43)
  {
    Hasher._combine(_:)(0);
LABEL_19:
    outlined retain of LocalePreferences(&v42);
    if (!v44) {
      goto LABEL_14;
    }
    goto LABEL_20;
  }

  Hasher._combine(_:)(1u);
  Hasher._combine(_:)(*(void *)(v11 + 16));
  char v12 = *(void *)(v11 + 16);
  if (!v12) {
    goto LABEL_19;
  }
  outlined retain of LocalePreferences?( (uint64_t)v61,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined copy of LocalePreferences?);
  swift_bridgeObjectRetain();
  __int128 v13 = v11 + 40;
  do
  {
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    v13 += 16LL;
    --v12;
  }

  while (v12);
  swift_bridgeObjectRelease();
  if (!v44)
  {
LABEL_14:
    Hasher._combine(_:)(0);
    if (!v45) {
      goto LABEL_15;
    }
    goto LABEL_21;
  }

uint64_t ByteCountFormatStyle.hash(into:)(uint64_t a1)
{
  void (*v10)(void *__return_ptr, uint64_t, uint64_t);
  Swift::UInt8 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  id v23;
  id v24;
  id v25;
  id v26;
  id v27;
  id v28;
  id v29;
  id v30;
  id v31;
  id v32;
  id v33;
  id v34;
  id v35;
  uint64_t v36;
  uint64_t v37;
  Swift::UInt v38;
  Swift::UInt v39;
  Swift::UInt8 v40;
  Swift::UInt8 v41;
  Swift::UInt8 v42;
  _BYTE v44[144];
  _BYTE v45[8];
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  void *v51;
  void *v52;
  void *v53;
  void *v54;
  void *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char v59;
  char v60;
  char v61;
  char v62;
  void v63[18];
  _BYTE v64[144];
  _BYTE v65[152];
  Swift::UInt v3 = *((void *)v1 + 1);
  Swift::UInt8 v4 = v1[16];
  Swift::UInt8 v5 = v1[17];
  uint64_t v6 = *((void *)v1 + 4);
  Hasher._combine(_:)(*v1);
  Hasher._combine(_:)(v3);
  Hasher._combine(_:)(v4);
  Hasher._combine(_:)(v5);
  uint64_t ObjectType = swift_getObjectType();
  Swift::UInt8 v8 = *(uint64_t (**)(uint64_t, uint64_t))(v6 + 48);
  swift_unknownObjectRetain_n();
  if ((v8(ObjectType, v6) & 1) != 0)
  {
    Swift::UInt8 v9 = 1;
LABEL_5:
    Hasher._combine(_:)(v9);
    return swift_unknownObjectRelease_n();
  }

  Hasher._combine(_:)(0);
  (*(void (**)(uint64_t, uint64_t))(v6 + 64))(ObjectType, v6);
  String.hash(into:)();
  swift_bridgeObjectRelease();
  uint64_t v10 = *(void (**)(void *__return_ptr, uint64_t, uint64_t))(v6 + 464);
  swift_unknownObjectRetain();
  v10(v63, ObjectType, v6);
  swift_unknownObjectRelease();
  outlined init with take of LocalePreferences?((uint64_t)v63, (uint64_t)v64);
  outlined init with take of LocalePreferences?((uint64_t)v64, (uint64_t)v65);
  if (_s10Foundation17LocalePreferencesVSgWOg((uint64_t)v65) == 1)
  {
    Swift::UInt8 v9 = 0;
    goto LABEL_5;
  }

  outlined init with take of LocalePreferences?((uint64_t)v64, (uint64_t)v45);
  Hasher._combine(_:)(1u);
  if (v45[0] == 2)
  {
    int v11 = 0;
  }

  else
  {
    int v11 = v45[0] & 1;
    Hasher._combine(_:)(1u);
  }

  Hasher._combine(_:)(v11);
  char v12 = v46;
  if (!v46)
  {
    Hasher._combine(_:)(0);
    int v17 = v45;
    goto LABEL_20;
  }

  Hasher._combine(_:)(1u);
  Hasher._combine(_:)(*(void *)(v12 + 16));
  __int128 v13 = *(void *)(v12 + 16);
  if (!v13)
  {
    outlined init with take of LocalePreferences?((uint64_t)v64, (uint64_t)v44);
    int v17 = v44;
LABEL_20:
    outlined retain of LocalePreferences(v17);
    if (!v47) {
      goto LABEL_14;
    }
    goto LABEL_21;
  }

  outlined retain of LocalePreferences?( (uint64_t)v64,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined copy of LocalePreferences?);
  swift_bridgeObjectRetain();
  uint64_t v14 = v12 + 40;
  do
  {
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    v14 += 16LL;
    --v13;
  }

  while (v13);
  swift_bridgeObjectRelease();
  if (!v47)
  {
LABEL_14:
    Hasher._combine(_:)(0);
    if (!v48) {
      goto LABEL_15;
    }
    goto LABEL_22;
  }

uint64_t protocol witness for CodingKey.stringValue.getter in conformance ByteCountFormatStyle.CodingKeys()
{
  return 0x7475626972747461LL;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance ByteCountFormatStyle.CodingKeys@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  if (a1 == 0x7475626972747461LL && a2 == 0xEA00000000006465LL)
  {
    uint64_t result = swift_bridgeObjectRelease();
    char v7 = 0;
  }

  else
  {
    char v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
    uint64_t result = swift_bridgeObjectRelease();
    char v7 = v5 ^ 1;
  }

  *a3 = v7 & 1;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance ByteCountFormatStyle.CodingKeys()
{
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance ByteCountFormatStyle.CodingKeys()
{
  return CodingKey.debugDescription.getter();
}

uint64_t ByteCountFormatStyle.encode(to:)(void *a1)
{
  Swift::UInt v2 = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<ByteCountFormatStyle.CodingKeys>);
  uint64_t v13 = *(void *)(v4 - 8);
  MEMORY[0x1895F8858](v4);
  uint64_t v6 = (char *)&v11 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  char v7 = *v2;
  uint64_t v8 = *((void *)v2 + 1);
  char v9 = v2[16];
  int v12 = v2[17];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type ByteCountFormatStyle.CodingKeys and conformance ByteCountFormatStyle.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  char v14 = v7;
  uint64_t v15 = v8;
  char v16 = v9;
  char v17 = v12;
  __int128 v18 = *(_OWORD *)(v2 + 24);
  lazy protocol witness table accessor for type ByteCountFormatStyle.Attributed and conformance ByteCountFormatStyle.Attributed();
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  return (*(uint64_t (**)(char *, uint64_t))(v13 + 8))(v6, v4);
}

Swift::Int ByteCountFormatStyle.hashValue.getter()
{
  void (*v9)(void *__return_ptr, uint64_t, uint64_t);
  Swift::UInt8 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _BYTE *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  id v22;
  id v23;
  id v24;
  id v25;
  id v26;
  id v27;
  id v28;
  id v29;
  id v30;
  id v31;
  id v32;
  id v33;
  id v34;
  uint64_t v35;
  uint64_t v36;
  Swift::UInt v37;
  Swift::UInt v38;
  Swift::UInt8 v39;
  Swift::UInt8 v40;
  Swift::UInt8 v41;
  _BYTE v43[144];
  _BYTE v44[8];
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  void *v50;
  void *v51;
  void *v52;
  void *v53;
  void *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char v58;
  char v59;
  char v60;
  char v61;
  void v62[18];
  _BYTE v63[144];
  _BYTE v64[144];
  _BYTE v65[72];
  Swift::UInt v1 = *v0;
  Swift::UInt v2 = *((void *)v0 + 1);
  Swift::UInt8 v3 = v0[16];
  Swift::UInt8 v4 = v0[17];
  uint64_t v5 = *((void *)v0 + 4);
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
  Hasher._combine(_:)(v3);
  Hasher._combine(_:)(v4);
  uint64_t ObjectType = swift_getObjectType();
  char v7 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 48);
  swift_unknownObjectRetain_n();
  if ((v7(ObjectType, v5) & 1) != 0)
  {
    Swift::UInt8 v8 = 1;
LABEL_5:
    Hasher._combine(_:)(v8);
    goto LABEL_56;
  }

  Hasher._combine(_:)(0);
  (*(void (**)(uint64_t, uint64_t))(v5 + 64))(ObjectType, v5);
  String.hash(into:)();
  swift_bridgeObjectRelease();
  char v9 = *(void (**)(void *__return_ptr, uint64_t, uint64_t))(v5 + 464);
  swift_unknownObjectRetain();
  v9(v62, ObjectType, v5);
  swift_unknownObjectRelease();
  outlined init with take of LocalePreferences?((uint64_t)v62, (uint64_t)v63);
  outlined init with take of LocalePreferences?((uint64_t)v63, (uint64_t)v64);
  if (_s10Foundation17LocalePreferencesVSgWOg((uint64_t)v64) == 1)
  {
    Swift::UInt8 v8 = 0;
    goto LABEL_5;
  }

  outlined init with take of LocalePreferences?((uint64_t)v63, (uint64_t)v44);
  Hasher._combine(_:)(1u);
  if (v44[0] == 2)
  {
    uint64_t v10 = 0;
  }

  else
  {
    uint64_t v10 = v44[0] & 1;
    Hasher._combine(_:)(1u);
  }

  Hasher._combine(_:)(v10);
  uint64_t v11 = v45;
  if (!v45)
  {
    Hasher._combine(_:)(0);
    char v16 = v44;
    goto LABEL_20;
  }

  Hasher._combine(_:)(1u);
  Hasher._combine(_:)(*(void *)(v11 + 16));
  int v12 = *(void *)(v11 + 16);
  if (!v12)
  {
    outlined init with take of LocalePreferences?((uint64_t)v63, (uint64_t)v43);
    char v16 = v43;
LABEL_20:
    outlined retain of LocalePreferences(v16);
    if (!v46) {
      goto LABEL_14;
    }
    goto LABEL_21;
  }

  outlined retain of LocalePreferences?( (uint64_t)v63,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined copy of LocalePreferences?);
  swift_bridgeObjectRetain();
  uint64_t v13 = v11 + 40;
  do
  {
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    v13 += 16LL;
    --v12;
  }

  while (v12);
  swift_bridgeObjectRelease();
  if (!v46)
  {
LABEL_14:
    Hasher._combine(_:)(0);
    if (!v47) {
      goto LABEL_15;
    }
    goto LABEL_22;
  }

uint64_t ByteCountFormatStyle.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<ByteCountFormatStyle.CodingKeys>);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1895F8858](v5);
  Swift::UInt8 v8 = &v14[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type ByteCountFormatStyle.CodingKeys and conformance ByteCountFormatStyle.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v2)
  {
    lazy protocol witness table accessor for type ByteCountFormatStyle.Attributed and conformance ByteCountFormatStyle.Attributed();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(_BYTE *, uint64_t))(v6 + 8))(v8, v5);
    uint64_t v9 = v15;
    char v10 = v16;
    char v11 = v17;
    __int128 v12 = v18;
    *(_BYTE *)a2 = v14[8];
    *(void *)(a2 + 8) = v9;
    *(_BYTE *)(a2 + 16) = v10;
    *(_BYTE *)(a2 + 17) = v11;
    *(_OWORD *)(a2 + 24) = v12;
  }

  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t protocol witness for FormatStyle.format(_:) in conformance ByteCountFormatStyle@<X0>( uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  __int128 v3 = v6[2];
  __int128 v7 = v6[1];
  __int128 v8 = v3;
  __int128 v9 = v6[3];
  BigString.startIndex.getter();
  BigString.endIndex.getter();
  lazy protocol witness table accessor for type AttributedString.CharacterView and conformance AttributedString.CharacterView();
  uint64_t result = String.init<A>(_:)();
  *a2 = result;
  a2[1] = v5;
  return result;
}

uint64_t protocol witness for Decodable.init(from:) in conformance ByteCountFormatStyle@<X0>( void *a1@<X0>, uint64_t a2@<X8>)
{
  return ByteCountFormatStyle.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance ByteCountFormatStyle(void *a1)
{
  return ByteCountFormatStyle.encode(to:)(a1);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance ByteCountFormatStyle()
{
  void (*v9)(void *__return_ptr, uint64_t, uint64_t);
  Swift::UInt8 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  id v21;
  id v22;
  id v23;
  id v24;
  id v25;
  id v26;
  id v27;
  id v28;
  id v29;
  id v30;
  id v31;
  id v32;
  id v33;
  uint64_t v34;
  uint64_t v35;
  Swift::UInt v36;
  Swift::UInt v37;
  Swift::UInt8 v38;
  Swift::UInt8 v39;
  Swift::UInt8 v40;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  void *v48;
  void *v49;
  void *v50;
  void *v51;
  void *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char v56;
  char v57;
  char v58;
  char v59;
  void v60[18];
  _BYTE v61[144];
  _BYTE v62[144];
  _BYTE v63[72];
  Swift::UInt v1 = *v0;
  Swift::UInt v2 = *((void *)v0 + 1);
  Swift::UInt8 v3 = v0[16];
  Swift::UInt8 v4 = v0[17];
  uint64_t v5 = *((void *)v0 + 4);
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
  Hasher._combine(_:)(v3);
  Hasher._combine(_:)(v4);
  uint64_t ObjectType = swift_getObjectType();
  __int128 v7 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 48);
  swift_unknownObjectRetain_n();
  if ((v7(ObjectType, v5) & 1) != 0)
  {
    Swift::UInt8 v8 = 1;
LABEL_5:
    Hasher._combine(_:)(v8);
    goto LABEL_55;
  }

  Hasher._combine(_:)(0);
  (*(void (**)(uint64_t, uint64_t))(v5 + 64))(ObjectType, v5);
  String.hash(into:)();
  swift_bridgeObjectRelease();
  __int128 v9 = *(void (**)(void *__return_ptr, uint64_t, uint64_t))(v5 + 464);
  swift_unknownObjectRetain();
  v9(v60, ObjectType, v5);
  swift_unknownObjectRelease();
  outlined init with take of LocalePreferences?((uint64_t)v60, (uint64_t)v61);
  outlined init with take of LocalePreferences?((uint64_t)v61, (uint64_t)v62);
  if (_s10Foundation17LocalePreferencesVSgWOg((uint64_t)v62) == 1)
  {
    Swift::UInt8 v8 = 0;
    goto LABEL_5;
  }

  outlined init with take of LocalePreferences?((uint64_t)v61, (uint64_t)&v42);
  Hasher._combine(_:)(1u);
  if (v42 == 2)
  {
    char v10 = 0;
  }

  else
  {
    char v10 = v42 & 1;
    Hasher._combine(_:)(1u);
  }

  Hasher._combine(_:)(v10);
  char v11 = v43;
  if (!v43)
  {
    Hasher._combine(_:)(0);
LABEL_19:
    outlined retain of LocalePreferences(&v42);
    if (!v44) {
      goto LABEL_14;
    }
    goto LABEL_20;
  }

  Hasher._combine(_:)(1u);
  Hasher._combine(_:)(*(void *)(v11 + 16));
  __int128 v12 = *(void *)(v11 + 16);
  if (!v12) {
    goto LABEL_19;
  }
  outlined retain of LocalePreferences?( (uint64_t)v61,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined copy of LocalePreferences?);
  swift_bridgeObjectRetain();
  uint64_t v13 = v11 + 40;
  do
  {
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    v13 += 16LL;
    --v12;
  }

  while (v12);
  swift_bridgeObjectRelease();
  if (!v44)
  {
LABEL_14:
    Hasher._combine(_:)(0);
    if (!v45) {
      goto LABEL_15;
    }
    goto LABEL_21;
  }

unint64_t lazy protocol witness table accessor for type ByteCountFormatStyle.Attributed.CodingKeys and conformance ByteCountFormatStyle.Attributed.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type ByteCountFormatStyle.Attributed.CodingKeys and conformance ByteCountFormatStyle.Attributed.CodingKeys;
  if (!lazy protocol witness table cache variable for type ByteCountFormatStyle.Attributed.CodingKeys and conformance ByteCountFormatStyle.Attributed.CodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for ByteCountFormatStyle.Attributed.CodingKeys,  &unk_189C97A38);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type ByteCountFormatStyle.Attributed.CodingKeys and conformance ByteCountFormatStyle.Attributed.CodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type ByteCountFormatStyle.Attributed.CodingKeys and conformance ByteCountFormatStyle.Attributed.CodingKeys;
  if (!lazy protocol witness table cache variable for type ByteCountFormatStyle.Attributed.CodingKeys and conformance ByteCountFormatStyle.Attributed.CodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for ByteCountFormatStyle.Attributed.CodingKeys,  &unk_189C97A38);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type ByteCountFormatStyle.Attributed.CodingKeys and conformance ByteCountFormatStyle.Attributed.CodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type ByteCountFormatStyle.Attributed.CodingKeys and conformance ByteCountFormatStyle.Attributed.CodingKeys;
  if (!lazy protocol witness table cache variable for type ByteCountFormatStyle.Attributed.CodingKeys and conformance ByteCountFormatStyle.Attributed.CodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for ByteCountFormatStyle.Attributed.CodingKeys,  &unk_189C97A38);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type ByteCountFormatStyle.Attributed.CodingKeys and conformance ByteCountFormatStyle.Attributed.CodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type ByteCountFormatStyle.Attributed.CodingKeys and conformance ByteCountFormatStyle.Attributed.CodingKeys;
  if (!lazy protocol witness table cache variable for type ByteCountFormatStyle.Attributed.CodingKeys and conformance ByteCountFormatStyle.Attributed.CodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for ByteCountFormatStyle.Attributed.CodingKeys,  &unk_189C97A38);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type ByteCountFormatStyle.Attributed.CodingKeys and conformance ByteCountFormatStyle.Attributed.CodingKeys);
  }

  return result;
}

BOOL specialized static ByteCountFormatStyle.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  BOOL v2 = *a1 == *a2 && *((void *)a1 + 1) == *((void *)a2 + 1);
  BOOL result = 0;
  if (v2 && ((a1[16] ^ a2[16]) & 1) == 0 && ((a1[17] ^ a2[17]) & 1) == 0)
  {
    __int128 v3 = *(_OWORD *)(a1 + 24);
    __int128 v5 = *(_OWORD *)(a2 + 24);
    __int128 v6 = v3;
  }

  return result;
}

unint64_t lazy protocol witness table accessor for type ByteCountFormatStyle.CodingKeys and conformance ByteCountFormatStyle.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type ByteCountFormatStyle.CodingKeys and conformance ByteCountFormatStyle.CodingKeys;
  if (!lazy protocol witness table cache variable for type ByteCountFormatStyle.CodingKeys and conformance ByteCountFormatStyle.CodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C](&protocol conformance descriptor for ByteCountFormatStyle.CodingKeys, &unk_189C979A8);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type ByteCountFormatStyle.CodingKeys and conformance ByteCountFormatStyle.CodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type ByteCountFormatStyle.CodingKeys and conformance ByteCountFormatStyle.CodingKeys;
  if (!lazy protocol witness table cache variable for type ByteCountFormatStyle.CodingKeys and conformance ByteCountFormatStyle.CodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C](&protocol conformance descriptor for ByteCountFormatStyle.CodingKeys, &unk_189C979A8);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type ByteCountFormatStyle.CodingKeys and conformance ByteCountFormatStyle.CodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type ByteCountFormatStyle.CodingKeys and conformance ByteCountFormatStyle.CodingKeys;
  if (!lazy protocol witness table cache variable for type ByteCountFormatStyle.CodingKeys and conformance ByteCountFormatStyle.CodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C](&protocol conformance descriptor for ByteCountFormatStyle.CodingKeys, &unk_189C979A8);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type ByteCountFormatStyle.CodingKeys and conformance ByteCountFormatStyle.CodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type ByteCountFormatStyle.CodingKeys and conformance ByteCountFormatStyle.CodingKeys;
  if (!lazy protocol witness table cache variable for type ByteCountFormatStyle.CodingKeys and conformance ByteCountFormatStyle.CodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C](&protocol conformance descriptor for ByteCountFormatStyle.CodingKeys, &unk_189C979A8);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type ByteCountFormatStyle.CodingKeys and conformance ByteCountFormatStyle.CodingKeys);
  }

  return result;
}

uint64_t instantiation function for generic protocol witness table for ByteCountFormatStyle.Attributed( void *a1, uint64_t a2, uint64_t a3)
{
  return instantiation function for generic protocol witness table for Date.AttributedStyle( a1,  a2,  a3,  (uint64_t (*)(void))lazy protocol witness table accessor for type ByteCountFormatStyle.Attributed and conformance ByteCountFormatStyle.Attributed,  (uint64_t (*)(void))lazy protocol witness table accessor for type ByteCountFormatStyle.Attributed and conformance ByteCountFormatStyle.Attributed,  (uint64_t (*)(void))lazy protocol witness table accessor for type ByteCountFormatStyle.Attributed and conformance ByteCountFormatStyle.Attributed);
}

uint64_t instantiation function for generic protocol witness table for ByteCountFormatStyle( void *a1, uint64_t a2, uint64_t a3)
{
  return instantiation function for generic protocol witness table for Date.AttributedStyle( a1,  a2,  a3,  (uint64_t (*)(void))lazy protocol witness table accessor for type ByteCountFormatStyle and conformance ByteCountFormatStyle,  (uint64_t (*)(void))lazy protocol witness table accessor for type ByteCountFormatStyle and conformance ByteCountFormatStyle,  (uint64_t (*)(void))lazy protocol witness table accessor for type ByteCountFormatStyle and conformance ByteCountFormatStyle);
}

unint64_t lazy protocol witness table accessor for type ByteCountFormatStyle and conformance ByteCountFormatStyle()
{
  unint64_t result = lazy protocol witness table cache variable for type ByteCountFormatStyle and conformance ByteCountFormatStyle;
  if (!lazy protocol witness table cache variable for type ByteCountFormatStyle and conformance ByteCountFormatStyle)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for ByteCountFormatStyle,  &type metadata for ByteCountFormatStyle);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type ByteCountFormatStyle and conformance ByteCountFormatStyle);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type ByteCountFormatStyle and conformance ByteCountFormatStyle;
  if (!lazy protocol witness table cache variable for type ByteCountFormatStyle and conformance ByteCountFormatStyle)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for ByteCountFormatStyle,  &type metadata for ByteCountFormatStyle);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type ByteCountFormatStyle and conformance ByteCountFormatStyle);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type ByteCountFormatStyle and conformance ByteCountFormatStyle;
  if (!lazy protocol witness table cache variable for type ByteCountFormatStyle and conformance ByteCountFormatStyle)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for ByteCountFormatStyle,  &type metadata for ByteCountFormatStyle);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type ByteCountFormatStyle and conformance ByteCountFormatStyle);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type ByteCountFormatStyle and conformance ByteCountFormatStyle;
  if (!lazy protocol witness table cache variable for type ByteCountFormatStyle and conformance ByteCountFormatStyle)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for ByteCountFormatStyle,  &type metadata for ByteCountFormatStyle);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type ByteCountFormatStyle and conformance ByteCountFormatStyle);
  }

  return result;
}

_BYTE *sub_18350EAD0@<X0>(_BYTE *result@<X0>, _BYTE *a2@<X8>)
{
  *a2 = *result;
  return result;
}

_BYTE *sub_18350EADC(_BYTE *result, _BYTE *a2)
{
  *a2 = *result;
  return result;
}

uint64_t sub_18350EAE8@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  *a2 = *(void *)(result + 8);
  return result;
}

void *sub_18350EAF4(void *result, uint64_t a2)
{
  *(void *)(a2 + 8) = *result;
  return result;
}

uint64_t sub_18350EB00@<X0>(uint64_t result@<X0>, _BYTE *a2@<X8>)
{
  *a2 = *(_BYTE *)(result + 16);
  return result;
}

_BYTE *sub_18350EB0C(_BYTE *result, uint64_t a2)
{
  *(_BYTE *)(a2 + 16) = *result;
  return result;
}

uint64_t sub_18350EB18@<X0>(uint64_t result@<X0>, _BYTE *a2@<X8>)
{
  *a2 = *(_BYTE *)(result + 17);
  return result;
}

_BYTE *sub_18350EB24(_BYTE *result, uint64_t a2)
{
  *(_BYTE *)(a2 + 17) = *result;
  return result;
}

uint64_t sub_18350EB30@<X0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  *a2 = *(_OWORD *)(a1 + 24);
  return swift_unknownObjectRetain();
}

__n128 sub_18350EB40(__n128 *a1, uint64_t a2)
{
  __n128 v4 = *a1;
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  __n128 result = v4;
  *(__n128 *)(a2 + 24) = v4;
  return result;
}

ValueMetadata *type metadata accessor for ByteCountFormatStyle()
{
  return &type metadata for ByteCountFormatStyle;
}

uint64_t storeEnumTagSinglePayload for ByteCountFormatStyle.Style( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFC) {
    return ((uint64_t (*)(void))((char *)&loc_18350EBF8 + 4 * byte_18383424A[v4]))();
  }
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_18350EC2C + 4 * byte_183834245[v4]))();
}

uint64_t sub_18350EC2C(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_18350EC34(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x18350EC3CLL);
  }
  return result;
}

uint64_t sub_18350EC48(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x18350EC50LL);
  }
  *(_BYTE *)__n128 result = a2 + 3;
  return result;
}

uint64_t sub_18350EC54(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_18350EC5C(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ByteCountFormatStyle.Style()
{
  return &type metadata for ByteCountFormatStyle.Style;
}

ValueMetadata *type metadata accessor for ByteCountFormatStyle.Units()
{
  return &type metadata for ByteCountFormatStyle.Units;
}

ValueMetadata *type metadata accessor for ByteCountFormatStyle.Attributed()
{
  return &type metadata for ByteCountFormatStyle.Attributed;
}

uint64_t storeEnumTagSinglePayload for ByteCountFormatStyle.CodingKeys(uint64_t a1, int a2, int a3)
{
  else {
    int v3 = 2;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2) {
    return ((uint64_t (*)(void))((char *)sub_18350ECD8 + 4 * byte_18383424F[v4]))();
  }
  else {
    return ((uint64_t (*)(void))((char *)sub_18350ECF8 + 4 * byte_183834254[v4]))();
  }
}

_BYTE *sub_18350ECD8(_BYTE *result, char a2)
{
  *__n128 result = a2;
  return result;
}

_BYTE *sub_18350ECF8(_BYTE *result)
{
  *__n128 result = 0;
  return result;
}

_DWORD *sub_18350ED00(_DWORD *result, int a2)
{
  *__n128 result = a2;
  return result;
}

_WORD *sub_18350ED08(_WORD *result, __int16 a2)
{
  *__n128 result = a2;
  return result;
}

_WORD *sub_18350ED10(_WORD *result)
{
  *__n128 result = 0;
  return result;
}

_DWORD *sub_18350ED18(_DWORD *result)
{
  *__n128 result = 0;
  return result;
}

void *type metadata accessor for ByteCountFormatStyle.CodingKeys()
{
  return &unk_189C979A8;
}

uint64_t storeEnumTagSinglePayload for ByteCountFormatStyle.Attributed.CodingKeys( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 4 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 4) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFC) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFB) {
    return ((uint64_t (*)(void))((char *)&loc_18350ED80 + 4 * byte_18383425E[v4]))();
  }
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_18350EDB4 + 4 * byte_183834259[v4]))();
}

uint64_t sub_18350EDB4(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_18350EDBC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x18350EDC4LL);
  }
  return result;
}

uint64_t sub_18350EDD0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x18350EDD8LL);
  }
  *(_BYTE *)__n128 result = a2 + 4;
  return result;
}

uint64_t sub_18350EDDC(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_18350EDE4(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

void *type metadata accessor for ByteCountFormatStyle.Attributed.CodingKeys()
{
  return &unk_189C97A38;
}

uint64_t outlined release of ByteCountFormatStyle.Attributed(uint64_t a1)
{
  return a1;
}

uint64_t outlined retain of ByteCountFormatStyle.Attributed(uint64_t a1)
{
  return a1;
}

uint64_t partial apply for closure #1 in localizedParens(locale:)@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = ulocdata_open();
  *a1 = result;
  return result;
}

uint64_t sub_18350F074()
{
  uint64_t v1 = *(unsigned __int8 *)(*(void *)(type metadata accessor for ICULegacyNumberFormatter.Signature(0LL) - 8) + 80LL);
  type metadata accessor for ICULegacyNumberFormatter.NumberFormatType(0LL);
  unsigned int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 2)
  {
    uint64_t v3 = type metadata accessor for CurrencyFormatStyleConfiguration.Collection(0LL);
  }

  else
  {
    if (EnumCaseMultiPayload > 1) {
      goto LABEL_7;
    }
    uint64_t v3 = type metadata accessor for NumberFormatStyleConfiguration.Collection(0LL);
  }

  uint64_t v4 = v0 + ((v1 + 16) & ~v1) + *(int *)(v3 + 36);
  uint64_t v5 = type metadata accessor for FloatingPointRoundingRule();
  uint64_t v6 = *(void *)(v5 - 8);
LABEL_7:
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t outlined init with take of ICULegacyNumberFormatter.Signature(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for ICULegacyNumberFormatter.Signature(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32LL))(a2, a1, v4);
  return a2;
}

uint64_t RangeExpression.clampedLowerAndUpperBounds(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a3 - 8);
  MEMORY[0x1895F8858](a1);
  Swift::UInt8 v8 = &v17[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  (*(void (**)(_BYTE *, uint64_t))(v6 + 16))(v8, v9);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Range<Int>);
  if (swift_dynamicCast())
  {
    char v10 = 0;
    if (v18 >= a2) {
      uint64_t v11 = a2;
    }
    else {
      uint64_t v11 = v18;
    }
    if (v18 >= a1) {
      uint64_t v12 = v11;
    }
    else {
      uint64_t v12 = a1;
    }
    goto LABEL_22;
  }

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ClosedRange<Int>);
  uint64_t result = swift_dynamicCast();
  if (!(_DWORD)result)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PartialRangeFrom<Int>);
    if (!swift_dynamicCast())
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PartialRangeThrough<Int>);
      if (!swift_dynamicCast())
      {
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PartialRangeUpTo<Int>);
        if (!swift_dynamicCast())
        {
          (*(void (**)(_BYTE *, uint64_t))(v6 + 8))(v8, a3);
          uint64_t result = 0LL;
          char v16 = 1;
          char v15 = 1;
          goto LABEL_31;
        }
      }

      (*(void (**)(_BYTE *, uint64_t))(v6 + 8))(v8, a3);
      uint64_t result = 0LL;
      char v15 = 1;
      goto LABEL_30;
    }

    if (v18 <= a1) {
      uint64_t v12 = a1;
    }
    else {
      uint64_t v12 = v18;
    }
    char v10 = 1;
LABEL_22:
    (*(void (**)(_BYTE *, uint64_t))(v6 + 8))(v8, a3);
    char v15 = 0;
    if (v12 >= a2) {
      uint64_t result = a2;
    }
    else {
      uint64_t result = v12;
    }
    if ((v10 & 1) != 0)
    {
      char v16 = 1;
LABEL_31:
      LOBYTE(v18) = v15;
      v17[8] = v16;
      return result;
    }

uint64_t PredicateExpressions.SequenceContains.sequence.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a1 + 16) - 8LL) + 16LL))(a2, v2);
}

uint64_t PredicateExpressions.SequenceContains.element.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a1 + 24) - 8LL) + 16LL))( a2,  v2 + *(int *)(a1 + 68));
}

void PredicateExpressions.SequenceContains.init(sequence:element:)( uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
}

uint64_t sub_18350F4E8(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v1 - 8) + 32LL))( v3 + *(int *)(a1 + 68),  v2,  v1);
}

void type metadata accessor for PredicateExpressions.SequenceContains()
{
}

uint64_t PredicateExpressions.SequenceContains.evaluate(_:)(uint64_t *a1, void *a2)
{
  p_uint64_t AssociatedTypeWitness = a1;
  uint64_t v4 = a2[5];
  uint64_t v24 = a2[3];
  uint64_t v25 = v4;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1895F8858](AssociatedTypeWitness);
  unsigned int v23 = (char *)&AssociatedTypeWitness - v6;
  uint64_t v7 = a2[4];
  uint64_t v8 = a2[2];
  uint64_t v9 = swift_getAssociatedTypeWitness();
  uint64_t v10 = *(void *)(v9 - 8);
  __n128 v11 = MEMORY[0x1895F8858](v9);
  uint64_t v13 = (char *)&AssociatedTypeWitness - v12;
  uint64_t v14 = v27;
  uint64_t v15 = *p_AssociatedTypeWitness;
  uint64_t v28 = *p_AssociatedTypeWitness;
  char v16 = *(void (**)(uint64_t *, uint64_t, uint64_t, __n128))(v7 + 16);
  p_uint64_t AssociatedTypeWitness = v2;
  v16(&v28, v8, v7, v11);
  if (!v14)
  {
    uint64_t v27 = v10;
    uint64_t v28 = v15;
    uint64_t v18 = AssociatedTypeWitness;
    char v17 = v23;
    (*(void (**)(uint64_t *, uint64_t))(v25 + 16))(&v28, v24);
    uint64_t v20 = a2[6];
    uint64_t v21 = dispatch thunk of Sequence._customContainsEquatableElement(_:)();
    if (v21 == 2)
    {
      p_uint64_t AssociatedTypeWitness = &AssociatedTypeWitness;
      MEMORY[0x1895F8858](v21);
      *(&AssociatedTypeWitness - 4) = v9;
      *(&AssociatedTypeWitness - 3) = v20;
      *(&AssociatedTypeWitness - 2) = a2[7];
      *(&AssociatedTypeWitness - 1) = (uint64_t)v17;
      LOBYTE(v2) = Sequence.contains(where:)();
    }

    else
    {
      LOBYTE(v2) = v21 & 1;
    }

    (*(void (**)(char *, uint64_t))(v5 + 8))(v17, v18);
    (*(void (**)(char *, uint64_t))(v27 + 8))(v13, v9);
  }

  return v2 & 1;
}

uint64_t protocol witness for PredicateExpression.evaluate(_:) in conformance PredicateExpressions.SequenceContains<A, B>@<X0>( uint64_t *a1@<X0>, void *a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result = PredicateExpressions.SequenceContains.evaluate(_:)(a1, a2);
  if (!v3) {
    *a3 = result & 1;
  }
  return result;
}

uint64_t PredicateExpressions.SequenceContainsWhere.init(_:builder:)@<X0>( uint64_t a1@<X0>, void (*a2)(void *)@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  return PredicateExpressions.SequenceContainsWhere.init(_:builder:)( a1,  a2,  a3,  a4,  a5,  a6,  a7,  a8,  a9,  (uint64_t (*)(void, void *))type metadata accessor for PredicateExpressions.SequenceContainsWhere);
}

uint64_t PredicateExpressions.SequenceContainsWhere.evaluate(_:)(uint64_t *a1, void *a2)
{
  return PredicateExpressions.SequenceContainsWhere.evaluate(_:)( a1,  a2,  (uint64_t)partial apply for closure #1 in PredicateExpressions.SequenceContainsWhere.evaluate(_:),  (uint64_t (*)(uint64_t, __n128))MEMORY[0x189618160]) & 1;
}

uint64_t protocol witness for PredicateExpression.evaluate(_:) in conformance PredicateExpressions.SequenceContainsWhere<A, B>@<X0>( uint64_t *a1@<X0>, void *a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result = PredicateExpressions.SequenceContainsWhere.evaluate(_:)(a1, a2);
  if (!v3) {
    *a3 = result & 1;
  }
  return result;
}

uint64_t PredicateExpressions.SequenceAllSatisfy.variable.getter@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  *a2 = *(void *)(v2 + *(int *)(result + 64));
  return result;
}

uint64_t PredicateExpressions.SequenceAllSatisfy.init(_:builder:)@<X0>( uint64_t a1@<X0>, void (*a2)(void *)@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  return PredicateExpressions.SequenceContainsWhere.init(_:builder:)( a1,  a2,  a3,  a4,  a5,  a6,  a7,  a8,  a9,  (uint64_t (*)(void, void *))type metadata accessor for PredicateExpressions.SequenceAllSatisfy);
}

uint64_t PredicateExpressions.SequenceContainsWhere.init(_:builder:)@<X0>( uint64_t a1@<X0>, void (*a2)(void *)@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t (*a10)(void, void *))
{
  v24[1] = a3;
  uint64_t v25 = a2;
  uint64_t v17 = *(void *)(a5 - 8);
  MEMORY[0x1895F8858](a1);
  unint64_t v19 = (char *)v24 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (one-time initialization token for nextID != -1) {
    swift_once();
  }
  do
    unint64_t v20 = __ldxr((unint64_t *)&static PredicateExpressions.VariableID.nextID);
  while (__stxr(v20 + 1, (unint64_t *)&static PredicateExpressions.VariableID.nextID));
  v26[0] = a4;
  v26[1] = a5;
  v26[2] = a6;
  v26[3] = a7;
  void v26[4] = a8;
  uint64_t v21 = a10(0LL, v26);
  *(void *)(a9 + *(int *)(v21 + 64)) = v20;
  uint64_t v22 = *(void *)(a4 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v22 + 16))(a9, a1, a4);
  v26[0] = v20;
  v25(v26);
  (*(void (**)(uint64_t, uint64_t))(v22 + 8))(a1, a4);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v17 + 32))(a9 + *(int *)(v21 + 60), v19, a5);
}

uint64_t PredicateExpressions.SequenceAllSatisfy.evaluate(_:)(uint64_t *a1, void *a2)
{
  return PredicateExpressions.SequenceContainsWhere.evaluate(_:)( a1,  a2,  (uint64_t)partial apply for closure #1 in PredicateExpressions.SequenceAllSatisfy.evaluate(_:),  MEMORY[0x1896180C8]) & 1;
}

uint64_t PredicateExpressions.SequenceContainsWhere.evaluate(_:)( uint64_t *a1, void *a2, uint64_t a3, uint64_t (*a4)(uint64_t, __n128))
{
  uint64_t v23 = a3;
  uint64_t v24 = a4;
  uint64_t v8 = a2[4];
  uint64_t v9 = a2[2];
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v10 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1895F8858](AssociatedTypeWitness);
  uint64_t v12 = (char *)&AssociatedTypeWitness - v11;
  uint64_t v26 = *a1;
  uint64_t v25 = v26;
  uint64_t v13 = *(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(v8 + 16);
  swift_bridgeObjectRetain();
  uint64_t v14 = v13(&v25, v9, v8);
  if (!v5)
  {
    uint64_t v15 = v10;
    __n128 v16 = MEMORY[0x1895F8858](v14);
    uint64_t v17 = a2[3];
    *(&AssociatedTypeWitness - 8) = v9;
    *(&AssociatedTypeWitness - 7) = v17;
    uint64_t v19 = a2[5];
    uint64_t v18 = a2[6];
    *(&AssociatedTypeWitness - 6) = v8;
    *(&AssociatedTypeWitness - 5) = v19;
    *(&AssociatedTypeWitness - 4) = v18;
    *(&AssociatedTypeWitness - 3) = (uint64_t)&v26;
    *(&AssociatedTypeWitness - 2) = v4;
    uint64_t v20 = AssociatedTypeWitness;
    LOBYTE(v4) = v24(v23, v16);
    (*(void (**)(char *, uint64_t))(v15 + 8))(v12, v20);
  }

  swift_bridgeObjectRelease();
  return v4 & 1;
}

uint64_t closure #1 in PredicateExpressions.SequenceContainsWhere.evaluate(_:)( uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t (*a9)(void, void, __n128))
{
  uint64_t v28 = a1;
  uint64_t v27 = a9;
  swift_getAssociatedTypeWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v17 = type metadata accessor for Optional();
  __n128 v18 = MEMORY[0x1895F8858](v17);
  uint64_t v20 = (char *)&v27 - v19;
  v30[0] = a4;
  v30[1] = a5;
  uint64_t v21 = a5;
  v30[2] = a6;
  __int128 v30[3] = a7;
  _OWORD v30[4] = a8;
  uint64_t v22 = *(void *)(a3 + *(int *)(a9(0LL, v30, v18) + 64));
  uint64_t v23 = *(void *)(AssociatedTypeWitness - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v23 + 16))(v20, v28, AssociatedTypeWitness);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v23 + 56))(v20, 0LL, 1LL, AssociatedTypeWitness);
  v30[0] = v22;
  PredicateBindings.subscript.setter((uint64_t)v20, v30, AssociatedTypeWitness);
  v30[0] = *a2;
  uint64_t v24 = v29;
  (*(void (**)(uint64_t *__return_ptr, uint64_t *, uint64_t, uint64_t))(a7 + 16))(&v31, v30, v21, a7);
  if (!v24) {
    char v25 = v31;
  }
  return v25 & 1;
}

uint64_t protocol witness for PredicateExpression.evaluate(_:) in conformance PredicateExpressions.SequenceAllSatisfy<A, B>@<X0>( uint64_t *a1@<X0>, void *a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result = PredicateExpressions.SequenceAllSatisfy.evaluate(_:)(a1, a2);
  if (!v3) {
    *a3 = result & 1;
  }
  return result;
}

uint64_t PredicateExpressions.SequenceStartsWith.prefix.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a1 + 24) - 8LL) + 16LL))( a2,  v2 + *(int *)(a1 + 76));
}

void PredicateExpressions.SequenceStartsWith.init(base:prefix:)( uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
}

uint64_t sub_18350FD7C(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v1 - 8) + 32LL))( v3 + *(int *)(a1 + 76),  v2,  v1);
}

uint64_t PredicateExpressions.SequenceStartsWith.evaluate(_:)(uint64_t *a1, void *a2)
{
  uint64_t v5 = a2[5];
  uint64_t v24 = a2[3];
  uint64_t v25 = v5;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v22 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v23 = AssociatedTypeWitness;
  MEMORY[0x1895F8858](AssociatedTypeWitness);
  uint64_t v26 = (char *)&v22 - v7;
  uint64_t v8 = a2[4];
  uint64_t v9 = a2[2];
  uint64_t v10 = swift_getAssociatedTypeWitness();
  uint64_t v11 = *(void *)(v10 - 8);
  __n128 v12 = MEMORY[0x1895F8858](v10);
  uint64_t v14 = (char *)&v22 - v13;
  uint64_t v15 = *a1;
  uint64_t v28 = v15;
  uint64_t v16 = v27;
  (*(void (**)(uint64_t *, uint64_t, uint64_t, __n128))(v8 + 16))(&v28, v9, v8, v12);
  if (!v16)
  {
    uint64_t v27 = v11;
    uint64_t v17 = v10;
    uint64_t v19 = v22;
    uint64_t v18 = v23;
    uint64_t v28 = v15;
    uint64_t v20 = v26;
    (*(void (**)(uint64_t *, uint64_t))(v25 + 16))(&v28, v24);
    char v2 = Sequence<>.starts<A>(with:)();
    (*(void (**)(char *, uint64_t))(v19 + 8))(v20, v18);
    (*(void (**)(char *, uint64_t))(v27 + 8))(v14, v17);
  }

  return v2 & 1;
}

uint64_t protocol witness for PredicateExpression.evaluate(_:) in conformance PredicateExpressions.SequenceStartsWith<A, B>@<X0>( uint64_t *a1@<X0>, void *a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result = PredicateExpressions.SequenceStartsWith.evaluate(_:)(a1, a2);
  if (!v3) {
    *a3 = result & 1;
  }
  return result;
}

uint64_t sub_183510010(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v1 - 8) + 16LL))( v3 + *(int *)(a1 + 68),  v2,  v1);
}

uint64_t static PredicateExpressions.build_contains<A, B>(_:where:)@<X0>( uint64_t a1@<X0>, void (*a2)(void *)@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  return static PredicateExpressions.build_contains<A, B>(_:where:)( a1,  a2,  a3,  a4,  a5,  a6,  a7,  a8,  a9,  (uint64_t (*)(void, void *))type metadata accessor for PredicateExpressions.SequenceContainsWhere);
}

uint64_t static PredicateExpressions.build_allSatisfy<A, B>(_:_:)@<X0>( uint64_t a1@<X0>, void (*a2)(void *)@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  return static PredicateExpressions.build_contains<A, B>(_:where:)( a1,  a2,  a3,  a4,  a5,  a6,  a7,  a8,  a9,  (uint64_t (*)(void, void *))type metadata accessor for PredicateExpressions.SequenceAllSatisfy);
}

uint64_t static PredicateExpressions.build_contains<A, B>(_:where:)@<X0>( uint64_t a1@<X0>, void (*a2)(void *)@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t (*a10)(void, void *))
{
  uint64_t v28 = a7;
  uint64_t v29 = a8;
  uint64_t v30 = a3;
  uint64_t v31 = a2;
  uint64_t v14 = *(void *)(a5 - 8);
  MEMORY[0x1895F8858](a1);
  uint64_t v16 = (char *)&v27 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v18 = *(void *)(v17 - 8);
  __n128 v20 = MEMORY[0x1895F8858](v19);
  uint64_t v22 = (char *)&v27 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v23 = *(void (**)(char *, __n128))(v18 + 16);
  v23(v22, v20);
  if (one-time initialization token for nextID != -1) {
    swift_once();
  }
  do
    unint64_t v24 = __ldxr((unint64_t *)&static PredicateExpressions.VariableID.nextID);
  while (__stxr(v24 + 1, (unint64_t *)&static PredicateExpressions.VariableID.nextID));
  v32[0] = a4;
  v32[1] = a5;
  v32[2] = a6;
  v32[3] = v28;
  v32[4] = v29;
  uint64_t v25 = a10(0LL, v32);
  *(void *)(a9 + *(int *)(v25 + 64)) = v24;
  ((void (*)(uint64_t, char *, uint64_t))v23)(a9, v22, a4);
  v32[0] = v24;
  v31(v32);
  (*(void (**)(char *, uint64_t))(v18 + 8))(v22, a4);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v14 + 32))(a9 + *(int *)(v25 + 60), v16, a5);
}

void static PredicateExpressions.build_starts<A, B>(_:with:)( uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
}

uint64_t sub_18351028C(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v1 - 8) + 16LL))( v3 + *(int *)(a1 + 76),  v2,  v1);
}

uint64_t PredicateExpressions.SequenceContains.description.getter()
{
  v0._uint64_t object = (void *)0x80000001839D3A10LL;
  v0._uint64_t countAndFlagsBits = 0xD00000000000001BLL;
  String.append(_:)(v0);
  _print_unlocked<A, B>(_:_:)();
  v1._uint64_t countAndFlagsBits = 0x6E656D656C65202CLL;
  v1._uint64_t object = (void *)0xEB00000000203A74LL;
  String.append(_:)(v1);
  _print_unlocked<A, B>(_:_:)();
  v2._uint64_t countAndFlagsBits = 41LL;
  v2._uint64_t object = (void *)0xE100000000000000LL;
  String.append(_:)(v2);
  return 0LL;
}

uint64_t PredicateExpressions.SequenceContainsWhere.description.getter(int a1)
{
  return PredicateExpressions.SequenceContainsWhere.description.getter( a1,  59LL,  0xD000000000000020LL,  (void *)0x80000001839D3A30LL);
}

uint64_t PredicateExpressions.SequenceAllSatisfy.description.getter(int a1)
{
  return PredicateExpressions.SequenceContainsWhere.description.getter( a1,  56LL,  0xD00000000000001DLL,  (void *)0x80000001839D3A60LL);
}

uint64_t PredicateExpressions.SequenceContainsWhere.description.getter( int a1, Swift::Int a2, uint64_t a3, void *a4)
{
  v6._uint64_t countAndFlagsBits = a3;
  v6._uint64_t object = a4;
  String.append(_:)(v6);
  _print_unlocked<A, B>(_:_:)();
  v7._uint64_t countAndFlagsBits = 0x626169726176202CLL;
  v7._uint64_t object = (void *)0xEC000000203A656CLL;
  String.append(_:)(v7);
  v8._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v8);
  swift_bridgeObjectRelease();
  v9._uint64_t countAndFlagsBits = 41LL;
  v9._uint64_t object = (void *)0xE100000000000000LL;
  String.append(_:)(v9);
  v10._uint64_t countAndFlagsBits = 0x656C626169726156LL;
  v10._uint64_t object = (void *)0xE900000000000028LL;
  String.append(_:)(v10);
  swift_bridgeObjectRelease();
  v11._uint64_t countAndFlagsBits = 0x203A74736574202CLL;
  v11._uint64_t object = (void *)0xE800000000000000LL;
  String.append(_:)(v11);
  _print_unlocked<A, B>(_:_:)();
  v12._uint64_t countAndFlagsBits = 41LL;
  v12._uint64_t object = (void *)0xE100000000000000LL;
  String.append(_:)(v12);
  return 0LL;
}

uint64_t PredicateExpressions.SequenceContains<>.encode(to:)(void *a1)
{
  if (!v1)
  {
    __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v3, v4);
    dispatch thunk of UnkeyedEncodingContainer.encode<A>(_:)();
  }

  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v3);
}

void PredicateExpressions.SequenceContains<>.init(from:)( uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X4>, uint64_t a4@<X7>, uint64_t a5@<X8>)
{
  void v14[4] = a5;
  void v14[5] = a4;
  v14[8] = a3;
  v14[3] = *(void *)(a2 - 8);
  MEMORY[0x1895F8858](a1);
  void v14[6] = (char *)v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v6);
  v14[7] = (char *)v14 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  v14[9] = v8;
  v14[10] = v8;
  v14[11] = v9;
  v14[12] = v10;
  v14[13] = v11;
  v14[14] = v12;
  v14[15] = v13;
  type metadata accessor for PredicateExpressions.SequenceContains();
}

uint64_t sub_18351072C(uint64_t a1)
{
  uint64_t v6 = *(void *)(a1 - 8);
  MEMORY[0x1895F8858](a1);
  uint64_t v8 = (char *)&v17 - v7;
  __swift_project_boxed_opaque_existential_1(v3, v3[3]);
  uint64_t v9 = *(void *)(v4 - 72);
  dispatch thunk of Decoder.unkeyedContainer()();
  if (v9) {
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v3);
  }
  *(void *)(v4 - 208) = v6;
  *(void *)(v4 - 200) = a1;
  *(void *)(v4 - 72) = v3;
  *(void *)(v4 - 192) = v8;
  uint64_t v10 = v2;
  uint64_t v11 = *(void *)(v4 - 160);
  __swift_mutable_project_boxed_opaque_existential_1(v4 - 128, *(void *)(v4 - 104));
  uint64_t v12 = *(void *)(v4 - 152);
  dispatch thunk of UnkeyedDecodingContainer.decode<A>(_:)();
  uint64_t v13 = *(void *)(v4 - 192);
  (*(void (**)(uint64_t, uint64_t, void))(v1 + 32))(v13, v12, *(void *)(v4 - 136));
  __swift_mutable_project_boxed_opaque_existential_1(v4 - 128, *(void *)(v4 - 104));
  dispatch thunk of UnkeyedDecodingContainer.decode<A>(_:)();
  uint64_t v14 = *(void *)(v4 - 200);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 184) + 32LL))(v13 + *(int *)(v14 + 68), v11, v10);
  __swift_destroy_boxed_opaque_existential_1(v4 - 128);
  uint64_t v15 = *(void *)(v4 - 208);
  (*(void (**)(void, uint64_t, uint64_t))(v15 + 16))(*(void *)(v4 - 176), v13, v14);
  __swift_destroy_boxed_opaque_existential_1(*(void *)(v4 - 72));
  return (*(uint64_t (**)(uint64_t, uint64_t))(v15 + 8))(v13, v14);
}

void protocol witness for Decodable.init(from:) in conformance <> PredicateExpressions.SequenceContains<A, B>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
}

  ;
}

uint64_t protocol witness for Encodable.encode(to:) in conformance <> PredicateExpressions.SequenceContains<A, B>( void *a1)
{
  return PredicateExpressions.SequenceContains<>.encode(to:)(a1);
}

uint64_t PredicateExpressions.SequenceContainsWhere<>.encode(to:)(void *a1, uint64_t a2)
{
  return PredicateExpressions.SequenceContainsWhere<>.encode(to:)(a1, a2);
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t AssociatedTypeWitness;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE v10[24];
  uint64_t v11;
  uint64_t v12;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  dispatch thunk of Encoder.unkeyedContainer()();
  __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v10, v11);
  dispatch thunk of UnkeyedEncodingContainer.encode<A>(_:)();
  if (!v3)
  {
    __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v10, v11);
    dispatch thunk of UnkeyedEncodingContainer.encode<A>(_:)();
    uint64_t v12 = *(void *)(v2 + *(int *)(a2 + 64));
    __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v10, v11);
    swift_getAssociatedTypeWitness();
    uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
    uint64_t v8 = type metadata accessor for PredicateExpressions.Variable(0LL, AssociatedTypeWitness, v6, v7);
    MEMORY[0x186E20D4C](&protocol conformance descriptor for PredicateExpressions.Variable<A>, v8);
    dispatch thunk of UnkeyedEncodingContainer.encode<A>(_:)();
  }

  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v10);
}

uint64_t PredicateExpressions.SequenceContainsWhere<>.init(from:)@<X0>( void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X4>, uint64_t a5@<X7>, uint64_t a6@<X8>)
{
  return PredicateExpressions.SequenceContainsWhere<>.init(from:)(a1, a2, a3, a4, a5, a6);
}

{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __n128 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t (*v19)(void, void *, __n128);
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  char *v25;
  char *v26;
  char *v27;
  uint64_t AssociatedTypeWitness;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  void *v46;
  void v47[3];
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v45 = a4;
  unint64_t v40 = a5;
  uint64_t v37 = a6;
  unint64_t v42 = *(void *)(a3 - 8);
  MEMORY[0x1895F8858](a1);
  unint64_t v41 = (char *)&v34 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  unint64_t v43 = *(void *)(v10 - 8);
  uint64_t v12 = MEMORY[0x1895F8858](v11);
  unint64_t v44 = (char *)&v34 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  v47[0] = v14;
  v47[1] = v15;
  uint64_t v38 = v16;
  int64_t v39 = v17;
  v47[2] = v16;
  uint64_t v48 = v18;
  unint64_t v49 = v17;
  __n128 v20 = v19(0LL, v47, v12);
  uint64_t v21 = *(void *)(v20 - 8);
  MEMORY[0x1895F8858](v20);
  uint64_t v23 = (char *)&v34 - v22;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  unint64_t v24 = (uint64_t)v46;
  dispatch thunk of Decoder.unkeyedContainer()();
  if (v24) {
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  }
  unint64_t v35 = v21;
  uint64_t v36 = v23;
  unint64_t v46 = a1;
  __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v47, v48);
  uint64_t v25 = v44;
  dispatch thunk of UnkeyedDecodingContainer.decode<A>(_:)();
  uint64_t v26 = v36;
  (*(void (**)(char *, char *, uint64_t))(v43 + 32))(v36, v25, a2);
  __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v47, v48);
  uint64_t v27 = v41;
  dispatch thunk of UnkeyedDecodingContainer.decode<A>(_:)();
  (*(void (**)(char *, char *, uint64_t))(v42 + 32))(&v26[*(int *)(v20 + 60)], v27, a3);
  swift_getAssociatedTypeWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v31 = type metadata accessor for PredicateExpressions.Variable(0LL, AssociatedTypeWitness, v29, v30);
  __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v47, v48);
  MEMORY[0x186E20D4C](&protocol conformance descriptor for PredicateExpressions.Variable<A>, v31);
  dispatch thunk of UnkeyedDecodingContainer.decode<A>(_:)();
  *(void *)&v26[*(int *)(v20 + 64)] = v50;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v47);
  unint64_t v32 = v35;
  (*(void (**)(uint64_t, char *, uint64_t))(v35 + 16))(v37, v26, v20);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v46);
  return (*(uint64_t (**)(char *, uint64_t))(v32 + 8))(v26, v20);
}

uint64_t protocol witness for Decodable.init(from:) in conformance <> PredicateExpressions.SequenceContainsWhere<A, B>( uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return protocol witness for Decodable.init(from:) in conformance <> PredicateExpressions.CollectionIndexSubscript<A, B>( a1,  a2,  a3,  (uint64_t (*)(uint64_t, void, void, void, void, uint64_t, void, void))PredicateExpressions.SequenceContainsWhere<>.init(from:),  a5,  a6);
}

uint64_t PredicateExpressions.SequenceAllSatisfy<>.encode(to:)(void *a1, uint64_t a2)
{
  return PredicateExpressions.SequenceContainsWhere<>.encode(to:)(a1, a2);
}

uint64_t PredicateExpressions.SequenceAllSatisfy<>.init(from:)@<X0>( void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X4>, uint64_t a5@<X7>, uint64_t a6@<X8>)
{
  return PredicateExpressions.SequenceContainsWhere<>.init(from:)(a1, a2, a3, a4, a5, a6);
}

uint64_t protocol witness for Decodable.init(from:) in conformance <> PredicateExpressions.SequenceAllSatisfy<A, B>( uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return protocol witness for Decodable.init(from:) in conformance <> PredicateExpressions.CollectionIndexSubscript<A, B>( a1,  a2,  a3,  (uint64_t (*)(uint64_t, void, void, void, void, uint64_t, void, void))PredicateExpressions.SequenceAllSatisfy<>.init(from:),  a5,  a6);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance <> PredicateExpressions.SequenceAllSatisfy<A, B>( void *a1, uint64_t a2)
{
  return PredicateExpressions.SequenceAllSatisfy<>.encode(to:)(a1, a2);
}

uint64_t PredicateExpressions.SequenceStartsWith<>.encode(to:)(void *a1)
{
  if (!v1)
  {
    __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v3, v4);
    dispatch thunk of UnkeyedEncodingContainer.encode<A>(_:)();
  }

  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v3);
}

void PredicateExpressions.SequenceStartsWith<>.init(from:)( uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X4>, uint64_t a4@<X7>, uint64_t a5@<X8>)
{
  void v14[5] = a5;
  void v14[6] = a4;
  v14[9] = a3;
  void v14[4] = *(void *)(a2 - 8);
  MEMORY[0x1895F8858](a1);
  v14[7] = (char *)v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __n128 v7 = MEMORY[0x1895F8858](v6);
  v14[8] = (char *)v14 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  v14[10] = v9;
  v14[11] = v9;
  v14[12] = v10;
  v14[13] = v11;
  v14[14] = v12;
  __n128 v15 = v7;
  uint64_t v16 = v13;
  type metadata accessor for PredicateExpressions.SequenceStartsWith();
}

uint64_t sub_1835110C0(uint64_t a1)
{
  uint64_t v6 = *(void *)(a1 - 8);
  MEMORY[0x1895F8858](a1);
  uint64_t v8 = (char *)&v17 - v7;
  __swift_project_boxed_opaque_existential_1(v3, v3[3]);
  uint64_t v9 = *(void *)(v4 - 72);
  dispatch thunk of Decoder.unkeyedContainer()();
  if (v9) {
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v3);
  }
  *(void *)(v4 - 216) = v6;
  *(void *)(v4 - 208) = a1;
  *(void *)(v4 - 72) = v3;
  *(void *)(v4 - 200) = v8;
  uint64_t v10 = v2;
  uint64_t v11 = *(void *)(v4 - 168);
  __swift_mutable_project_boxed_opaque_existential_1(v4 - 136, *(void *)(v4 - 112));
  uint64_t v12 = *(void *)(v4 - 160);
  dispatch thunk of UnkeyedDecodingContainer.decode<A>(_:)();
  uint64_t v13 = *(void *)(v4 - 200);
  (*(void (**)(uint64_t, uint64_t, void))(v1 + 32))(v13, v12, *(void *)(v4 - 144));
  __swift_mutable_project_boxed_opaque_existential_1(v4 - 136, *(void *)(v4 - 112));
  dispatch thunk of UnkeyedDecodingContainer.decode<A>(_:)();
  uint64_t v14 = *(void *)(v4 - 208);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 192) + 32LL))(v13 + *(int *)(v14 + 76), v11, v10);
  __swift_destroy_boxed_opaque_existential_1(v4 - 136);
  uint64_t v15 = *(void *)(v4 - 216);
  (*(void (**)(void, uint64_t, uint64_t))(v15 + 16))(*(void *)(v4 - 184), v13, v14);
  __swift_destroy_boxed_opaque_existential_1(*(void *)(v4 - 72));
  return (*(uint64_t (**)(uint64_t, uint64_t))(v15 + 8))(v13, v14);
}

void protocol witness for Decodable.init(from:) in conformance <> PredicateExpressions.SequenceStartsWith<A, B>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
}

  ;
}

uint64_t protocol witness for Encodable.encode(to:) in conformance <> PredicateExpressions.SequenceStartsWith<A, B>( void *a1)
{
  return PredicateExpressions.SequenceStartsWith<>.encode(to:)(a1);
}

uint64_t partial apply for closure #1 in Sequence<>.contains(_:)()
{
  return dispatch thunk of static Equatable.== infix(_:_:)() & 1;
}

void type metadata accessor for PredicateExpressions.SequenceContainsWhere()
{
}

uint64_t partial apply for closure #1 in PredicateExpressions.SequenceContainsWhere.evaluate(_:)(uint64_t a1)
{
  return partial apply for closure #1 in PredicateExpressions.SequenceContainsWhere.evaluate(_:)( a1,  (uint64_t (*)(void, void, __n128))type metadata accessor for PredicateExpressions.SequenceContainsWhere) & 1;
}

void type metadata accessor for PredicateExpressions.SequenceAllSatisfy()
{
}

uint64_t partial apply for closure #1 in PredicateExpressions.SequenceAllSatisfy.evaluate(_:)(uint64_t a1)
{
  return partial apply for closure #1 in PredicateExpressions.SequenceContainsWhere.evaluate(_:)( a1,  (uint64_t (*)(void, void, __n128))type metadata accessor for PredicateExpressions.SequenceAllSatisfy) & 1;
}

uint64_t partial apply for closure #1 in PredicateExpressions.SequenceContainsWhere.evaluate(_:)( uint64_t a1, uint64_t (*a2)(void, void, __n128))
{
  return closure #1 in PredicateExpressions.SequenceContainsWhere.evaluate(_:)( a1,  *(uint64_t **)(v2 + 56),  *(void *)(v2 + 64),  *(void *)(v2 + 16),  *(void *)(v2 + 24),  *(void *)(v2 + 32),  *(void *)(v2 + 40),  *(void *)(v2 + 48),  a2) & 1;
}

void type metadata accessor for PredicateExpressions.SequenceStartsWith()
{
}

uint64_t getEnumTagSinglePayload for PredicateExpressions.SequenceContainsWhere( uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8LL);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(void *)(*(void *)(a3 + 24) - 8LL);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= v5) {
    unsigned int v8 = *(_DWORD *)(v4 + 84);
  }
  else {
    unsigned int v8 = *(_DWORD *)(v6 + 84);
  }
  if (!a2) {
    return 0LL;
  }
  uint64_t v9 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v10 = *(void *)(v4 + 64) + v9;
  if (v8 >= a2)
  {
    if (v8)
    {
      if (v5 >= v7) {
        return (*(uint64_t (**)(uint64_t, void))(v4 + 48))(a1, *(unsigned int *)(v4 + 84));
      }
      else {
        return (*(uint64_t (**)(uint64_t))(v6 + 48))((v10 + a1) & ~v9);
      }
    }

    return 0LL;
  }

  if (((((*(void *)(v6 + 64) + (v10 & ~v9) + 7) & 0xFFFFFFFFFFFFFFF8LL) + 8) & 0xFFFFFFF8) != 0) {
    unsigned int v11 = 2;
  }
  else {
    unsigned int v11 = a2 - v8 + 1;
  }
  if (v11 >= 0x10000) {
    unsigned int v12 = 4;
  }
  else {
    unsigned int v12 = 2;
  }
  if (v11 < 0x100) {
    unsigned int v12 = 1;
  }
  if (v11 >= 2) {
    uint64_t v13 = v12;
  }
  else {
    uint64_t v13 = 0LL;
  }
  return ((uint64_t (*)(void))((char *)&loc_1835114EC + 4 * byte_1838349A0[v13]))();
}

void storeEnumTagSinglePayload for PredicateExpressions.SequenceContainsWhere( unsigned int *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5 = *(void *)(*(void *)(a4 + 16) - 8LL);
  uint64_t v6 = *(void *)(*(void *)(a4 + 24) - 8LL);
  if (*(_DWORD *)(v6 + 84) <= *(_DWORD *)(v5 + 84)) {
    unsigned int v7 = *(_DWORD *)(v5 + 84);
  }
  else {
    unsigned int v7 = *(_DWORD *)(v6 + 84);
  }
  uint64_t v8 = *(unsigned __int8 *)(v6 + 80);
  if (v7 >= a3)
  {
    int v11 = 0u;
    if (a2 <= v7) {
      goto LABEL_17;
    }
  }

  else
  {
    if (((*(_DWORD *)(v6 + 64) + ((*(_DWORD *)(v5 + 64) + (_DWORD)v8) & ~(_DWORD)v8) + 7) & 0xFFFFFFF8) == 0xFFFFFFF8) {
      unsigned int v9 = a3 - v7 + 1;
    }
    else {
      unsigned int v9 = 2;
    }
    if (v9 >= 0x10000) {
      int v10 = 4;
    }
    else {
      int v10 = 2;
    }
    if (v9 < 0x100) {
      int v10 = 1;
    }
    if (v9 >= 2) {
      int v11 = v10;
    }
    else {
      int v11 = 0;
    }
    if (a2 <= v7) {
LABEL_17:
    }
      __asm { BR              X16 }
  }

  if (((*(_DWORD *)(v6 + 64) + ((*(_DWORD *)(v5 + 64) + (_DWORD)v8) & ~(_DWORD)v8) + 7) & 0xFFFFFFF8) != 0xFFFFFFF8)
  {
    unsigned int v12 = ~v7 + a2;
    bzero(a1, ((*(void *)(v6 + 64) + ((*(void *)(v5 + 64) + v8) & ~v8) + 7) & 0xFFFFFFFFFFFFFFF8LL) + 8);
    *a1 = v12;
  }

  __asm { BR              X10 }

void sub_183511688()
{
  *(_BYTE *)(v0 + v1) = v2;
}

void sub_183511690(uint64_t a1, int a2)
{
  *(_DWORD *)(v2 + v3) = 0;
  if (a2) {
    JUMPOUT(0x183511698LL);
  }
}

void sub_1835116D4()
{
  *(_WORD *)(v0 + v1) = v2;
}

void sub_1835116DC()
{
  *(_DWORD *)(v0 + v1) = v2;
}

uint64_t sub_1835116E4(uint64_t a1, int a2, unsigned int a3)
{
  *(_WORD *)(v9 + v10) = 0;
  if (!a2) {
    JUMPOUT(0x1835116ECLL);
  }
  if (v4 >= a3) {
    return (*(uint64_t (**)(uint64_t))(v7 + 56))(v9);
  }
  else {
    return (*(uint64_t (**)(uint64_t))(v6 + 56))((v8 + v9) & v5);
  }
}

uint64_t getEnumTagSinglePayload for PredicateExpressions.SequenceContains( uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8LL);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(void *)(*(void *)(a3 + 24) - 8LL);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= v5) {
    unsigned int v8 = *(_DWORD *)(v4 + 84);
  }
  else {
    unsigned int v8 = *(_DWORD *)(v6 + 84);
  }
  if (!a2) {
    return 0LL;
  }
  uint64_t v9 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v10 = *(void *)(v4 + 64) + v9;
  unsigned int v11 = a2 - v8;
  if (a2 <= v8) {
    goto LABEL_23;
  }
  uint64_t v12 = (v10 & ~v9) + *(void *)(v6 + 64);
  char v13 = 8 * v12;
  if (v12 <= 3)
  {
    unsigned int v15 = ((v11 + ~(-1 << v13)) >> v13) + 1;
    if (HIWORD(v15))
    {
      int v14 = *(_DWORD *)(a1 + v12);
      if (!v14) {
        goto LABEL_23;
      }
      goto LABEL_14;
    }

    if (v15 > 0xFF)
    {
      int v14 = *(unsigned __int16 *)(a1 + v12);
      if (!*(_WORD *)(a1 + v12)) {
        goto LABEL_23;
      }
      goto LABEL_14;
    }

    if (v15 < 2)
    {
LABEL_23:
      if (v8)
      {
        if (v5 >= v7) {
          return (*(uint64_t (**)(void))(v4 + 48))();
        }
        else {
          return (*(uint64_t (**)(uint64_t))(v6 + 48))((v10 + a1) & ~v9);
        }
      }

      return 0LL;
    }
  }

  int v14 = *(unsigned __int8 *)(a1 + v12);
  if (!*(_BYTE *)(a1 + v12)) {
    goto LABEL_23;
  }
LABEL_14:
  int v16 = (v14 - 1) << v13;
  if (!(_DWORD)v12) {
    return v8 + v16 + 1;
  }
  else {
    int v17 = 4;
  }
  return ((uint64_t (*)(void))((char *)&loc_1835117E0 + 4 * byte_1838349AF[v17 - 1]))();
}

void storeEnumTagSinglePayload for PredicateExpressions.SequenceContains( _WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5 = *(void *)(*(void *)(a4 + 16) - 8LL);
  uint64_t v6 = *(void *)(*(void *)(a4 + 24) - 8LL);
  if (*(_DWORD *)(v6 + 84) <= *(_DWORD *)(v5 + 84)) {
    unsigned int v7 = *(_DWORD *)(v5 + 84);
  }
  else {
    unsigned int v7 = *(_DWORD *)(v6 + 84);
  }
  if (a3 > v7)
  {
    if (v8 <= 3)
    {
      unsigned int v11 = ((a3 - v7 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v11))
      {
        unsigned int v9 = 4u;
      }

      else if (v11 >= 0x100)
      {
        unsigned int v9 = 2;
      }

      else
      {
        unsigned int v9 = v11 > 1;
      }
    }

    else
    {
      unsigned int v9 = 1u;
    }
  }

  else
  {
    unsigned int v9 = 0u;
  }

  if (v7 < a2)
  {
    unsigned int v10 = ~v7 + a2;
    if (v8 < 4)
    {
      if ((_DWORD)v8)
      {
        int v12 = v10 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if ((_DWORD)v8 == 3)
        {
          *a1 = v12;
          *((_BYTE *)a1 + 2) = BYTE2(v12);
        }

        else if ((_DWORD)v8 == 2)
        {
          *a1 = v12;
        }

        else
        {
          *(_BYTE *)a1 = v12;
        }
      }
    }

    else
    {
      bzero(a1, v8);
      *(_DWORD *)a1 = v10;
    }

    __asm { BR              X10 }
  }

  __asm { BR              X16 }

uint64_t protocol witness for Encodable.encode(to:) in conformance <> PredicateExpressions.SequenceContainsWhere<A, B>( void *a1, uint64_t a2)
{
  return protocol witness for Encodable.encode(to:) in conformance <> PredicateExpressions.SequenceAllSatisfy<A, B>( a1,  a2);
}

uint64_t PredicateExpressions.StringCaseInsensitiveCompare.root.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a1 + 16) - 8LL) + 16LL))(a2, v2);
}

uint64_t PredicateExpressions.StringCaseInsensitiveCompare.other.getter@<X0>( uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a1 + 24) - 8LL) + 16LL))( a2,  v2 + *(int *)(a1 + 68));
}

void PredicateExpressions.StringCaseInsensitiveCompare.init(root:other:)( uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
}

uint64_t sub_183511B1C(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v1 - 8) + 32LL))( v3 + *(int *)(a1 + 68),  v2,  v1);
}

void type metadata accessor for PredicateExpressions.StringCaseInsensitiveCompare()
{
}

id PredicateExpressions.StringCaseInsensitiveCompare.evaluate(_:)(uint64_t *a1, void *a2)
{
  uint64_t v5 = a2[5];
  uint64_t v28 = a2[3];
  uint64_t v29 = v5;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v6 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1895F8858](AssociatedTypeWitness);
  uint64_t v30 = (char *)&v24 - v7;
  uint64_t v8 = a2[4];
  uint64_t v9 = a2[2];
  uint64_t v10 = swift_getAssociatedTypeWitness();
  uint64_t v11 = *(void *)(v10 - 8);
  __n128 v12 = MEMORY[0x1895F8858](v10);
  int v14 = (char *)&v24 - v13;
  uint64_t v15 = *a1;
  uint64_t v32 = v15;
  uint64_t v16 = v31;
  (*(void (**)(uint64_t *, uint64_t, uint64_t, __n128))(v8 + 16))(&v32, v9, v8, v12);
  if (!v16)
  {
    uint64_t v25 = v6;
    uint64_t v26 = v14;
    uint64_t v31 = v11;
    uint64_t v17 = AssociatedTypeWitness;
    uint64_t v32 = v15;
    (*(void (**)(uint64_t *, uint64_t))(v29 + 16))(&v32, v28);
    uint64_t v19 = v10;
    __n128 v20 = v26;
    StringProtocol._ephemeralString.getter();
    uint64_t v21 = (void *)String._bridgeToObjectiveCImpl()();
    swift_bridgeObjectRelease();
    uint64_t v22 = v30;
    StringProtocol._ephemeralString.getter();
    uint64_t v23 = String._bridgeToObjectiveCImpl()();
    swift_bridgeObjectRelease();
    id v2 = objc_msgSend(v21, sel_caseInsensitiveCompare_, v23);
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    (*(void (**)(char *, uint64_t))(v25 + 8))(v22, v17);
    (*(void (**)(char *, uint64_t))(v31 + 8))(v20, v19);
  }

  return v2;
}

id protocol witness for PredicateExpression.evaluate(_:) in conformance PredicateExpressions.StringCaseInsensitiveCompare<A, B>@<X0>( uint64_t *a1@<X0>, void *a2@<X1>, void *a3@<X8>)
{
  id result = PredicateExpressions.StringCaseInsensitiveCompare.evaluate(_:)(a1, a2);
  if (!v3) {
    *a3 = result;
  }
  return result;
}

void static PredicateExpressions.build_caseInsensitiveCompare<A, B>(_:_:)( uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
}

uint64_t sub_183511E08(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v1 - 8) + 16LL))( v3 + *(int *)(a1 + 68),  v2,  v1);
}

uint64_t PredicateExpressions.StringCaseInsensitiveCompare.description.getter()
{
  v0._uint64_t object = (void *)0x80000001839D3A80LL;
  v0._uint64_t countAndFlagsBits = 0xD000000000000023LL;
  String.append(_:)(v0);
  _print_unlocked<A, B>(_:_:)();
  v1._uint64_t countAndFlagsBits = 0x3A726568746F202CLL;
  v1._uint64_t object = (void *)0xE900000000000020LL;
  String.append(_:)(v1);
  _print_unlocked<A, B>(_:_:)();
  v2._uint64_t countAndFlagsBits = 41LL;
  v2._uint64_t object = (void *)0xE100000000000000LL;
  String.append(_:)(v2);
  return 0LL;
}

uint64_t PredicateExpressions.StringCaseInsensitiveCompare<>.encode(to:)(void *a1)
{
  if (!v1)
  {
    __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v3, v4);
    dispatch thunk of UnkeyedEncodingContainer.encode<A>(_:)();
  }

  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v3);
}

void PredicateExpressions.StringCaseInsensitiveCompare<>.init(from:)( uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X4>, uint64_t a4@<X7>, uint64_t a5@<X8>)
{
  void v14[4] = a5;
  void v14[5] = a4;
  v14[8] = a3;
  v14[3] = *(void *)(a2 - 8);
  MEMORY[0x1895F8858](a1);
  void v14[6] = (char *)v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v6);
  v14[7] = (char *)v14 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  v14[9] = v8;
  v14[10] = v8;
  v14[11] = v9;
  v14[12] = v10;
  v14[13] = v11;
  v14[14] = v12;
  void v14[15] = v13;
  type metadata accessor for PredicateExpressions.StringCaseInsensitiveCompare();
}

uint64_t sub_1835120D8(uint64_t a1)
{
  uint64_t v6 = *(void *)(a1 - 8);
  MEMORY[0x1895F8858](a1);
  uint64_t v8 = (char *)&v17 - v7;
  __swift_project_boxed_opaque_existential_1(v3, v3[3]);
  uint64_t v9 = *(void *)(v4 - 72);
  dispatch thunk of Decoder.unkeyedContainer()();
  if (v9) {
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v3);
  }
  *(void *)(v4 - 208) = v6;
  *(void *)(v4 - 200) = a1;
  *(void *)(v4 - 72) = v3;
  *(void *)(v4 - 192) = v8;
  uint64_t v10 = v2;
  uint64_t v11 = *(void *)(v4 - 160);
  __swift_mutable_project_boxed_opaque_existential_1(v4 - 128, *(void *)(v4 - 104));
  uint64_t v12 = *(void *)(v4 - 152);
  dispatch thunk of UnkeyedDecodingContainer.decode<A>(_:)();
  uint64_t v13 = *(void *)(v4 - 192);
  (*(void (**)(uint64_t, uint64_t, void))(v1 + 32))(v13, v12, *(void *)(v4 - 136));
  __swift_mutable_project_boxed_opaque_existential_1(v4 - 128, *(void *)(v4 - 104));
  dispatch thunk of UnkeyedDecodingContainer.decode<A>(_:)();
  uint64_t v14 = *(void *)(v4 - 200);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 184) + 32LL))(v13 + *(int *)(v14 + 68), v11, v10);
  __swift_destroy_boxed_opaque_existential_1(v4 - 128);
  uint64_t v15 = *(void *)(v4 - 208);
  (*(void (**)(void, uint64_t, uint64_t))(v15 + 16))(*(void *)(v4 - 176), v13, v14);
  __swift_destroy_boxed_opaque_existential_1(*(void *)(v4 - 72));
  return (*(uint64_t (**)(uint64_t, uint64_t))(v15 + 8))(v13, v14);
}

void protocol witness for Decodable.init(from:) in conformance <> PredicateExpressions.StringCaseInsensitiveCompare<A, B>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
}

  ;
}

uint64_t protocol witness for Encodable.encode(to:) in conformance <> PredicateExpressions.StringCaseInsensitiveCompare<A, B>( void *a1)
{
  return PredicateExpressions.StringCaseInsensitiveCompare<>.encode(to:)(a1);
}

uint64_t getEnumTagSinglePayload for PredicateExpressions.StringCaseInsensitiveCompare( uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8LL);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(void *)(*(void *)(a3 + 24) - 8LL);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= v5) {
    unsigned int v8 = *(_DWORD *)(v4 + 84);
  }
  else {
    unsigned int v8 = *(_DWORD *)(v6 + 84);
  }
  if (!a2) {
    return 0LL;
  }
  uint64_t v9 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v10 = *(void *)(v4 + 64) + v9;
  unsigned int v11 = a2 - v8;
  if (a2 <= v8) {
    goto LABEL_23;
  }
  uint64_t v12 = (v10 & ~v9) + *(void *)(v6 + 64);
  char v13 = 8 * v12;
  if (v12 <= 3)
  {
    unsigned int v15 = ((v11 + ~(-1 << v13)) >> v13) + 1;
    if (HIWORD(v15))
    {
      int v14 = *(_DWORD *)(a1 + v12);
      if (!v14) {
        goto LABEL_23;
      }
      goto LABEL_14;
    }

    if (v15 > 0xFF)
    {
      int v14 = *(unsigned __int16 *)(a1 + v12);
      if (!*(_WORD *)(a1 + v12)) {
        goto LABEL_23;
      }
      goto LABEL_14;
    }

    if (v15 < 2)
    {
LABEL_23:
      if (v8)
      {
        if (v5 >= v7) {
          return (*(uint64_t (**)(void))(v4 + 48))();
        }
        else {
          return (*(uint64_t (**)(uint64_t))(v6 + 48))((v10 + a1) & ~v9);
        }
      }

      return 0LL;
    }
  }

  int v14 = *(unsigned __int8 *)(a1 + v12);
  if (!*(_BYTE *)(a1 + v12)) {
    goto LABEL_23;
  }
LABEL_14:
  int v16 = (v14 - 1) << v13;
  if (!(_DWORD)v12) {
    return v8 + v16 + 1;
  }
  else {
    int v17 = 4;
  }
  return ((uint64_t (*)(void))((char *)&loc_183512440 + 4 * byte_183834F20[v17 - 1]))();
}

void storeEnumTagSinglePayload for PredicateExpressions.StringCaseInsensitiveCompare( _WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5 = *(void *)(*(void *)(a4 + 16) - 8LL);
  uint64_t v6 = *(void *)(*(void *)(a4 + 24) - 8LL);
  if (*(_DWORD *)(v6 + 84) <= *(_DWORD *)(v5 + 84)) {
    unsigned int v7 = *(_DWORD *)(v5 + 84);
  }
  else {
    unsigned int v7 = *(_DWORD *)(v6 + 84);
  }
  if (a3 > v7)
  {
    if (v8 <= 3)
    {
      unsigned int v11 = ((a3 - v7 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v11))
      {
        unsigned int v9 = 4u;
      }

      else if (v11 >= 0x100)
      {
        unsigned int v9 = 2;
      }

      else
      {
        unsigned int v9 = v11 > 1;
      }
    }

    else
    {
      unsigned int v9 = 1u;
    }
  }

  else
  {
    unsigned int v9 = 0u;
  }

  if (v7 < a2)
  {
    unsigned int v10 = ~v7 + a2;
    if (v8 < 4)
    {
      if ((_DWORD)v8)
      {
        int v12 = v10 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if ((_DWORD)v8 == 3)
        {
          *a1 = v12;
          *((_BYTE *)a1 + 2) = BYTE2(v12);
        }

        else if ((_DWORD)v8 == 2)
        {
          *a1 = v12;
        }

        else
        {
          *(_BYTE *)a1 = v12;
        }
      }
    }

    else
    {
      bzero(a1, v8);
      *(_DWORD *)a1 = v10;
    }

    __asm { BR              X10 }
  }

  __asm { BR              X16 }

uint64_t AttributedSubstring.description.getter()
{
  return AttributedString.Guts.description(in:)();
}

uint64_t AttributedSubstring.mergeAttributes(_:mergePolicy:)(uint64_t *a1, char *a2)
{
  uint64_t v3 = v2;
  uint64_t v4 = *a1;
  char v22 = *a2;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    uint64_t v5 = *(void **)v2;
    __int128 v6 = *(_OWORD *)(*(void *)v2 + 16LL);
    __int128 v7 = *(_OWORD *)(*(void *)v2 + 48LL);
    v31[1] = *(_OWORD *)(*(void *)v2 + 32LL);
    void v31[2] = v7;
    v31[0] = v6;
    uint64_t v8 = v5[8];
    uint64_t v9 = v5[9];
    uint64_t v10 = v5[10];
    uint64_t v11 = v5[11];
    type metadata accessor for AttributedString.Guts();
    swift_allocObject();
    outlined retain of Locale((uint64_t)v31);
    swift_unknownObjectRetain();
    *(void *)uint64_t v3 = AttributedString.Guts.init(string:runs:)(v31, v8, v9, v10, v11);
    swift_release();
  }

  int v12 = *(_OWORD **)v3;
  __int128 v13 = *(_OWORD *)(*(void *)v3 + 32LL);
  __int128 v28 = *(_OWORD *)(*(void *)v3 + 16LL);
  __int128 v29 = v13;
  __int128 v30 = v12[3];
  BigString.unicodeScalars.getter();
  unint64_t v14 = BigString.UnicodeScalarView.index(roundingDown:)();
  outlined release of Locale((uint64_t)v23);
  __int128 v15 = v12[2];
  __int128 v25 = v12[1];
  __int128 v26 = v15;
  __int128 v27 = v12[3];
  BigString.unicodeScalars.getter();
  unint64_t v16 = BigString.UnicodeScalarView.index(roundingDown:)();
  outlined release of Locale((uint64_t)v24);
  uint64_t v17 = v16 >> 11;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v18 = (void *)swift_retain();
  specialized AttributedString._InternalRunsSlice.updateEach(with:)(v18, v14 >> 11, v16 >> 11, v4, v22);
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t result = specialized AttributedString._AttributeStorage.hasConstrainedAttributes.getter(v4);
  if ((result & 1) != 0)
  {
    uint64_t v20 = swift_bridgeObjectRetain();
    uint64_t v21 = specialized Sequence.compactMap<A>(_:)(v20);
    swift_bridgeObjectRelease();
    AttributedString.Guts.enforceAttributeConstraintsAfterMutation(in:type:constraintsInvolved:)(v14 >> 11, v17, 0, v21);
    return swift_bridgeObjectRelease();
  }

  return result;
}

uint64_t AttributedSubstring.subscript.setter(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v4 = type metadata accessor for Optional();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8LL))(a1, v4);
}

unint64_t AttributedSubstring.runs.getter@<X0>(void *a1@<X8>)
{
  uint64_t v2 = swift_retain();
  return AttributedString.Runs.init(_:in:)(v2, a1);
}

uint64_t AttributedSubstring.subscript.getter@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = *a1;
  __int128 v7 = *(_OWORD *)(v3 + 24);
  v16[0] = *(_OWORD *)(v3 + 8);
  v16[1] = v7;
  __int128 v8 = *(_OWORD *)(v3 + 56);
  __int128 v16[2] = *(_OWORD *)(v3 + 40);
  v16[3] = v8;
  uint64_t v9 = *(void *)(*MEMORY[0x18961A9A8] + v6 + 8);
  swift_retain();
  AttributedString.Guts.getUniformValue<A>(in:key:)(v16, v9, a2, (uint64_t)v14);
  if (v15)
  {
    outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>( (uint64_t)v14,  (uint64_t)&v13);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Hashable & Sendable);
    uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
    swift_dynamicCast();
    outlined destroy of AttributedString._AttributeValue((uint64_t)v14);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 56LL))( a3,  0LL,  1LL,  AssociatedTypeWitness);
  }

  else
  {
    outlined destroy of AttributedString._AttributeValue?((uint64_t)v14);
    uint64_t v11 = swift_getAssociatedTypeWitness();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 56LL))(a3, 1LL, 1LL, v11);
  }

  return swift_release();
}

double AttributedSubstring.characters.getter@<D0>(uint64_t a1@<X8>)
{
  uint64_t v3 = *(_OWORD **)v1;
  __int128 v4 = *(_OWORD *)(v1 + 24);
  __int128 v14 = *(_OWORD *)(v1 + 8);
  __int128 v15 = v4;
  __int128 v5 = *(_OWORD *)(v1 + 56);
  __int128 v16 = *(_OWORD *)(v1 + 40);
  __int128 v17 = v5;
  __int128 v6 = v3[1];
  __int128 v7 = v3[3];
  v18[1] = v3[2];
  v18[2] = v7;
  v18[0] = v6;
  swift_retain_n();
  outlined retain of Locale((uint64_t)v18);
  BigString.subscript.getter();
  swift_release();
  outlined release of Locale((uint64_t)v18);
  outlined release of Locale((uint64_t)v11);
  *(void *)a1 = v3;
  __int128 v8 = v11[4];
  *(_OWORD *)(a1 + 8) = v11[3];
  *(_OWORD *)(a1 + 24) = v8;
  double result = *(double *)&v12;
  __int128 v10 = v13;
  *(_OWORD *)(a1 + 40) = v12;
  *(_OWORD *)(a1 + 56) = v10;
  *(void *)(a1 + 72) = 0LL;
  return result;
}

uint64_t AttributedSubstring.setAttributes(_:)(uint64_t *a1)
{
  uint64_t v2 = v1;
  uint64_t v3 = *a1;
  uint64_t v4 = a1[1];
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    __int128 v5 = (void *)*v1;
    __int128 v6 = *(_OWORD *)(*v1 + 16);
    __int128 v7 = *(_OWORD *)(*v1 + 48);
    v13[1] = *(_OWORD *)(*v1 + 32);
    void v13[2] = v7;
    v13[0] = v6;
    uint64_t v8 = v5[8];
    uint64_t v9 = v5[9];
    uint64_t v10 = v5[10];
    uint64_t v11 = v5[11];
    type metadata accessor for AttributedString.Guts();
    swift_allocObject();
    outlined retain of Locale((uint64_t)v13);
    swift_unknownObjectRetain();
    uint64_t *v2 = AttributedString.Guts.init(string:runs:)(v13, v8, v9, v10, v11);
    swift_release();
  }

  return AttributedString.Guts.setAttributes(_:in:)(v3, v4);
}

double AttributedSubstring.unicodeScalars.getter@<D0>(uint64_t a1@<X8>)
{
  uint64_t v3 = *(_OWORD **)v1;
  __int128 v4 = *(_OWORD *)(v1 + 24);
  __int128 v16 = *(_OWORD *)(v1 + 8);
  __int128 v17 = v4;
  __int128 v5 = *(_OWORD *)(v1 + 56);
  __int128 v18 = *(_OWORD *)(v1 + 40);
  __int128 v19 = v5;
  __int128 v6 = v3[2];
  __int128 v20 = v3[1];
  __int128 v21 = v6;
  __int128 v22 = v3[3];
  BigString.unicodeScalars.getter();
  swift_retain_n();
  BigString.UnicodeScalarView.subscript.getter();
  swift_release();
  outlined release of Locale((uint64_t)&v10);
  outlined release of Locale((uint64_t)v11);
  *(void *)a1 = v3;
  __int128 v7 = v13;
  *(_OWORD *)(a1 + 8) = v12;
  *(_OWORD *)(a1 + 24) = v7;
  double result = *(double *)&v14;
  __int128 v9 = v15;
  *(_OWORD *)(a1 + 40) = v14;
  *(_OWORD *)(a1 + 56) = v9;
  *(void *)(a1 + 72) = 0LL;
  return result;
}

uint64_t AttributedSubstring.subscript.setter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = v4;
  uint64_t v34 = a3;
  uint64_t v35 = a4;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v8 = type metadata accessor for Optional();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x1895F8858](v8);
  uint64_t v11 = (char *)&v30 - v10;
  uint64_t v12 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1895F8858](v13);
  __int128 v15 = (char *)&v30 - v14;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    __int128 v16 = *(void **)v4;
    __int128 v17 = *(_OWORD *)(*(void *)v4 + 16LL);
    __int128 v18 = *(_OWORD *)(*(void *)v4 + 48LL);
    v40[1] = *(_OWORD *)(*(void *)v4 + 32LL);
    v40[2] = v18;
    v40[0] = v17;
    uint64_t v20 = v16[8];
    uint64_t v19 = v16[9];
    uint64_t v22 = v16[10];
    uint64_t v21 = v16[11];
    uint64_t v32 = v22;
    uint64_t v33 = v19;
    uint64_t v31 = v21;
    type metadata accessor for AttributedString.Guts();
    swift_allocObject();
    outlined retain of Locale((uint64_t)v40);
    swift_unknownObjectRetain();
    *(void *)uint64_t v5 = AttributedString.Guts.init(string:runs:)(v40, v20, v33, v32, v31);
    swift_release();
  }

  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, a1, v8);
  uint64_t v23 = (__int128 *)(v5 + 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v11, 1LL, AssociatedTypeWitness) == 1)
  {
    uint64_t v24 = *(void (**)(char *, uint64_t))(v9 + 8);
    v24(v11, v8);
    __int128 v25 = *(_OWORD *)(v5 + 24);
    __int128 v36 = *v23;
    __int128 v37 = v25;
    __int128 v26 = *(_OWORD *)(v5 + 56);
    __int128 v38 = *(_OWORD *)(v5 + 40);
    __int128 v39 = v26;
    AttributedString.Guts.removeAttributeValue<A>(forKey:in:)(v34, (uint64_t)&v36, v34, v35);
    return ((uint64_t (*)(uint64_t, uint64_t))v24)(a1, v8);
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v12 + 32))(v15, v11, AssociatedTypeWitness);
    __int128 v28 = *(_OWORD *)(v5 + 24);
    __int128 v36 = *v23;
    __int128 v37 = v28;
    __int128 v29 = *(_OWORD *)(v5 + 56);
    __int128 v38 = *(_OWORD *)(v5 + 40);
    __int128 v39 = v29;
    AttributedString.Guts.setAttributeValue<A>(_:forKey:in:)((uint64_t)v15, v34, (uint64_t)&v36, v34, v35);
    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(a1, v8);
    return (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v15, AssociatedTypeWitness);
  }

uint64_t AttributedSubstring.init()@<X0>(uint64_t a1@<X8>)
{
  v22[0] = 0LL;
  MEMORY[0x186E20E78](v22, 8LL);
  uint64_t v2 = v22[0];
  type metadata accessor for AttributedString.Guts();
  uint64_t v3 = swift_allocObject();
  uint64_t result = BigString.isEmpty.getter();
  if ((result & 1) != 0)
  {
    *(_OWORD *)(v3 + 16) = v18;
    *(_OWORD *)(v3 + 32) = v19;
    *(_OWORD *)(v3 + 48) = v20;
    *(void *)(v3 + 64) = 0LL;
    *(void *)(v3 + 72) = 0LL;
    *(void *)(v3 + 80) = 0LL;
    *(void *)(v3 + 88) = v2;
    uint64_t v5 = BigString.startIndex.getter();
    uint64_t v7 = v6;
    uint64_t v9 = v8;
    uint64_t v11 = v10;
    uint64_t v12 = BigString.endIndex.getter();
    uint64_t v27 = v5;
    uint64_t v28 = v7;
    uint64_t v29 = v9;
    uint64_t v30 = v11;
    uint64_t v31 = v12;
    uint64_t v32 = v13;
    uint64_t v33 = v14;
    uint64_t v34 = v15;
    BigString.unicodeScalars.getter();
    swift_retain();
    BigString.UnicodeScalarView.subscript.getter();
    outlined release of Locale((uint64_t)v21);
    outlined release of Locale((uint64_t)v22);
    uint64_t result = swift_release();
    *(void *)a1 = v3;
    __int128 v16 = v24;
    *(_OWORD *)(a1 + 8) = v23;
    *(_OWORD *)(a1 + 24) = v16;
    __int128 v17 = v26;
    *(_OWORD *)(a1 + 40) = v25;
    *(_OWORD *)(a1 + 56) = v17;
    *(void *)(a1 + 72) = 0LL;
  }

  else
  {
    __break(1u);
  }

  return result;
}

uint64_t AttributedSubstring.base.getter@<X0>(void *a1@<X8>)
{
  *a1 = *v1;
  return swift_retain();
}

__n128 AttributedSubstring.startIndex.getter@<Q0>(uint64_t a1@<X8>)
{
  __n128 result = *(__n128 *)(v1 + 8);
  __int128 v3 = *(_OWORD *)(v1 + 24);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

__n128 AttributedSubstring.endIndex.getter@<Q0>(uint64_t a1@<X8>)
{
  __n128 result = *(__n128 *)(v1 + 40);
  __int128 v3 = *(_OWORD *)(v1 + 56);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t AttributedSubstring.replaceAttributes(_:with:)(uint64_t *a1, uint64_t *a2)
{
  __int128 v3 = v2;
  uint64_t v4 = *a1;
  uint64_t v5 = a1[1];
  uint64_t v6 = *a2;
  uint64_t v7 = a2[1];
  if ((specialized static Dictionary<>.== infix(_:_:)(*a1, *a2) & 1) == 0
    || (uint64_t result = specialized static Set.== infix(_:_:)(v5, v7), (result & 1) == 0))
  {
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      uint64_t v9 = (void *)*v2;
      __int128 v10 = *(_OWORD *)(*v2 + 16);
      __int128 v11 = *(_OWORD *)(*v2 + 48);
      v31[1] = *(_OWORD *)(*v2 + 32);
      void v31[2] = v11;
      v31[0] = v10;
      uint64_t v12 = v9[8];
      uint64_t v13 = v9[9];
      uint64_t v14 = v9[10];
      uint64_t v15 = v9[11];
      type metadata accessor for AttributedString.Guts();
      swift_allocObject();
      outlined retain of Locale((uint64_t)v31);
      swift_unknownObjectRetain();
      *__int128 v3 = AttributedString.Guts.init(string:runs:)(v31, v12, v13, v14, v15);
      swift_release();
    }

    if ((specialized AttributedString._AttributeStorage.hasConstrainedAttributes.getter(v4) & 1) != 0) {
      uint64_t v16 = 1LL;
    }
    else {
      uint64_t v16 = specialized AttributedString._AttributeStorage.hasConstrainedAttributes.getter(v6);
    }
    uint64_t v29 = (uint64_t)&v29;
    uint64_t v30 = MEMORY[0x18961AFE8];
    __int128 v17 = (void *)*v3;
    uint64_t v18 = (unint64_t)v3[1] >> 11;
    uint64_t v19 = (unint64_t)v3[5] >> 11;
    MEMORY[0x1895F8858](v16);
    v28[2] = v4;
    v28[3] = v5;
    MEMORY[0x1895F8858](v20);
    v25[2] = v4;
    v25[3] = v5;
    v25[4] = v6;
    v25[5] = v7;
    char v26 = v21 & 1;
    uint64_t v27 = &v30;
    swift_retain();
    AttributedString._InternalRunsSlice.updateEach(when:with:)( (uint64_t (*)(uint64_t, uint64_t))partial apply for closure #1 in AttributedString.replaceAttributes(_:with:),  (uint64_t)v28,  (void (*)(uint64_t *, uint64_t, uint64_t))partial apply for closure #2 in AttributedSubstring.replaceAttributes(_:with:),  (uint64_t)v25,  v17,  v18,  v19);
    swift_release();
    uint64_t v22 = v30;
    uint64_t v23 = *(void *)(v30 + 16);
    if (v23)
    {
      swift_bridgeObjectRetain();
      __int128 v24 = (uint64_t *)(v22 + 40);
      do
      {
        AttributedString.Guts.enforceAttributeConstraintsAfterMutation(in:type:constraintsInvolved:)( *(v24 - 1),  *v24,  0,  0LL);
        v24 += 2;
        --v23;
      }

      while (v23);
      swift_bridgeObjectRelease();
    }

    return swift_bridgeObjectRelease();
  }

  return result;
}

uint64_t closure #2 in AttributedSubstring.replaceAttributes(_:with:)( void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, char a8, void **a9)
{
  uint64_t v13 = a4 + 64;
  uint64_t v14 = 1LL << *(_BYTE *)(a4 + 32);
  uint64_t v15 = -1LL;
  if (v14 < 64) {
    uint64_t v15 = ~(-1LL << v14);
  }
  unint64_t v16 = v15 & *(void *)(a4 + 64);
  int64_t v17 = (unint64_t)(v14 + 63) >> 6;
  swift_bridgeObjectRetain();
  int64_t v18 = 0LL;
  while (1)
  {
    if (v16)
    {
      unint64_t v19 = __clz(__rbit64(v16));
      v16 &= v16 - 1;
      unint64_t v20 = v19 | (v18 << 6);
      goto LABEL_5;
    }

    int64_t v24 = v18 + 1;
    if (__OFADD__(v18, 1LL))
    {
      __break(1u);
      goto LABEL_30;
    }

    if (v24 >= v17) {
      goto LABEL_23;
    }
    unint64_t v25 = *(void *)(v13 + 8 * v24);
    ++v18;
    if (!v25)
    {
      int64_t v18 = v24 + 1;
      if (v24 + 1 >= v17) {
        goto LABEL_23;
      }
      unint64_t v25 = *(void *)(v13 + 8 * v18);
      if (!v25)
      {
        int64_t v18 = v24 + 2;
        if (v24 + 2 >= v17) {
          goto LABEL_23;
        }
        unint64_t v25 = *(void *)(v13 + 8 * v18);
        if (!v25)
        {
          int64_t v18 = v24 + 3;
          if (v24 + 3 >= v17) {
            goto LABEL_23;
          }
          unint64_t v25 = *(void *)(v13 + 8 * v18);
          if (!v25) {
            break;
          }
        }
      }
    }

double AttributedSubstring.subscript.getter@<D0>(uint64_t a1@<X8>)
{
  __int128 v3 = *(_OWORD **)v1;
  __int128 v4 = *(_OWORD *)(v1 + 24);
  __int128 v23 = *(_OWORD *)(v1 + 8);
  __int128 v24 = v4;
  __int128 v5 = *(_OWORD *)(v1 + 56);
  __int128 v25 = *(_OWORD *)(v1 + 40);
  __int128 v26 = v5;
  __int128 v6 = v3[1];
  __int128 v7 = v3[3];
  v27[1] = v3[2];
  v27[2] = v7;
  v27[0] = v6;
  swift_retain_n();
  outlined retain of Locale((uint64_t)v27);
  BigString.subscript.getter();
  outlined release of Locale((uint64_t)v27);
  outlined release of Locale((uint64_t)v12);
  swift_release();
  __int128 v15 = v12[3];
  __int128 v16 = v12[4];
  *(_OWORD *)int64_t v17 = v12[5];
  *(_OWORD *)&_BYTE v17[16] = v12[6];
  uint64_t v14 = v3;
  *(void *)&v17[32] = 0LL;
  lazy protocol witness table accessor for type AttributedString.CharacterView and conformance AttributedString.CharacterView();
  dispatch thunk of RangeExpression.relative<A>(to:)();
  swift_release();
  __int128 v8 = v3[2];
  __int128 v20 = v3[1];
  __int128 v21 = v8;
  __int128 v22 = v3[3];
  BigString.unicodeScalars.getter();
  swift_retain();
  BigString.UnicodeScalarView.subscript.getter();
  outlined release of Locale((uint64_t)v13);
  outlined release of Locale((uint64_t)&v14);
  *(void *)a1 = v3;
  __int128 v9 = *(_OWORD *)&v17[24];
  *(_OWORD *)(a1 + 8) = *(_OWORD *)&v17[8];
  *(_OWORD *)(a1 + 24) = v9;
  double result = *(double *)&v18;
  __int128 v11 = v19;
  *(_OWORD *)(a1 + 40) = v18;
  *(_OWORD *)(a1 + 56) = v11;
  *(void *)(a1 + 72) = 0LL;
  return result;
}

Swift::Int AttributedSubstring.hashValue.getter()
{
  __int128 v1 = v0[3];
  __int128 v7 = v0[2];
  __int128 v8 = v1;
  __int128 v9 = v0[4];
  __int128 v2 = v0[1];
  __int128 v5 = *v0;
  __int128 v6 = v2;
  Hasher.init(_seed:)();
  specialized AttributedStringProtocol.hash(into:)((uint64_t)v4);
  return Hasher._finalize()();
}

unint64_t protocol witness for AttributedStringProtocol.runs.getter in conformance AttributedSubstring@<X0>( void *a1@<X8>)
{
  uint64_t v2 = swift_retain();
  return AttributedString.Runs.init(_:in:)(v2, a1);
}

double protocol witness for AttributedStringProtocol.characters.getter in conformance AttributedSubstring@<D0>( uint64_t a1@<X8>)
{
  __int128 v3 = *(_OWORD **)v1;
  __int128 v4 = *(_OWORD *)(v1 + 24);
  __int128 v14 = *(_OWORD *)(v1 + 8);
  __int128 v15 = v4;
  __int128 v5 = *(_OWORD *)(v1 + 56);
  __int128 v16 = *(_OWORD *)(v1 + 40);
  __int128 v17 = v5;
  __int128 v6 = v3[1];
  __int128 v7 = v3[3];
  v18[1] = v3[2];
  v18[2] = v7;
  v18[0] = v6;
  swift_retain_n();
  outlined retain of Locale((uint64_t)v18);
  BigString.subscript.getter();
  swift_release();
  outlined release of Locale((uint64_t)v18);
  outlined release of Locale((uint64_t)v11);
  *(void *)a1 = v3;
  __int128 v8 = v11[4];
  *(_OWORD *)(a1 + 8) = v11[3];
  *(_OWORD *)(a1 + 24) = v8;
  double result = *(double *)&v12;
  __int128 v10 = v13;
  *(_OWORD *)(a1 + 40) = v12;
  *(_OWORD *)(a1 + 56) = v10;
  *(void *)(a1 + 72) = 0LL;
  return result;
}

double protocol witness for AttributedStringProtocol.unicodeScalars.getter in conformance AttributedSubstring@<D0>( uint64_t a1@<X8>)
{
  __int128 v3 = *(_OWORD **)v1;
  __int128 v4 = *(_OWORD *)(v1 + 24);
  __int128 v16 = *(_OWORD *)(v1 + 8);
  __int128 v17 = v4;
  __int128 v5 = *(_OWORD *)(v1 + 56);
  __int128 v18 = *(_OWORD *)(v1 + 40);
  __int128 v19 = v5;
  __int128 v6 = v3[2];
  __int128 v20 = v3[1];
  __int128 v21 = v6;
  __int128 v22 = v3[3];
  BigString.unicodeScalars.getter();
  swift_retain_n();
  BigString.UnicodeScalarView.subscript.getter();
  swift_release();
  outlined release of Locale((uint64_t)&v10);
  outlined release of Locale((uint64_t)v11);
  *(void *)a1 = v3;
  __int128 v7 = v13;
  *(_OWORD *)(a1 + 8) = v12;
  *(_OWORD *)(a1 + 24) = v7;
  double result = *(double *)&v14;
  __int128 v9 = v15;
  *(_OWORD *)(a1 + 40) = v14;
  *(_OWORD *)(a1 + 56) = v9;
  *(void *)(a1 + 72) = 0LL;
  return result;
}

uint64_t AttributedSubstring.subscript.getter@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  __int128 v5 = *(_OWORD *)(v3 + 24);
  v13[0] = *(_OWORD *)(v3 + 8);
  v13[1] = v5;
  __int128 v6 = *(_OWORD *)(v3 + 56);
  void v13[2] = *(_OWORD *)(v3 + 40);
  _OWORD v13[3] = v6;
  AttributedString.Guts.getUniformValue<A>(in:key:)(v13, a1, a2, (uint64_t)v11);
  if (v12)
  {
    outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>( (uint64_t)v11,  (uint64_t)&v10);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Hashable & Sendable);
    uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
    swift_dynamicCast();
    outlined destroy of AttributedString._AttributeValue((uint64_t)v11);
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 56LL))( a3,  0LL,  1LL,  AssociatedTypeWitness);
  }

  else
  {
    outlined destroy of AttributedString._AttributeValue?((uint64_t)v11);
    uint64_t v9 = swift_getAssociatedTypeWitness();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56LL))( a3,  1LL,  1LL,  v9);
  }

uint64_t (*protocol witness for AttributedStringProtocol.subscript.modify in conformance AttributedSubstring( void *a1, uint64_t a2, uint64_t a3, uint64_t a4))()
{
  __int128 v8 = malloc(0x28uLL);
  *a1 = v8;
  v8[4] = AttributedSubstring.subscript.modify(v8, a2, a3, a4);
  return protocol witness for AttributedStringProtocol.subscript.modify in conformance AttributedString;
}

{
  void *v7;
  uint64_t v8;
  __int128 v7 = malloc(0x28uLL);
  *a1 = v7;
  v7[4] = AttributedSubstring.subscript.modify(v7, v8, a3, a4);
  return protocol witness for AttributedStringProtocol.subscript.modify in conformance AttributedString;
}

void (*AttributedSubstring.subscript.modify( void *a1, uint64_t a2, uint64_t a3, uint64_t a4))(uint64_t **a1, uint64_t a2)
{
  uint64_t v9 = (char *)malloc(0xF0uLL);
  *a1 = v9;
  *((void *)v9 + 24) = a4;
  *((void *)v9 + 25) = v4;
  *((void *)v9 + 22) = a2;
  *((void *)v9 + 23) = a3;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v11 = type metadata accessor for Optional();
  *((void *)v9 + 26) = v11;
  uint64_t v12 = *(void *)(v11 - 8);
  *((void *)v9 + 27) = v12;
  size_t v13 = *(void *)(v12 + 64);
  *((void *)v9 + 28) = malloc(v13);
  __int128 v14 = malloc(v13);
  *((void *)v9 + 29) = v14;
  *(_OWORD *)(v9 + 72) = *(_OWORD *)(v4 + 8);
  *(_OWORD *)(v9 + 88) = *(_OWORD *)(v4 + 24);
  *(_OWORD *)(v9 + 104) = *(_OWORD *)(v4 + 40);
  *(_OWORD *)(v9 + 120) = *(_OWORD *)(v4 + 56);
  AttributedString.Guts.getUniformValue<A>(in:key:)((void *)v9 + 9, a3, a4, (uint64_t)v9);
  if (*((void *)v9 + 3))
  {
    outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>( (uint64_t)v9,  (uint64_t)(v9 + 136));
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Hashable & Sendable);
    swift_dynamicCast();
    outlined destroy of AttributedString._AttributeValue((uint64_t)v9);
    uint64_t v15 = 0LL;
  }

  else
  {
    outlined destroy of AttributedString._AttributeValue?((uint64_t)v9);
    uint64_t v15 = 1LL;
  }

  (*(void (**)(void *, uint64_t, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 56LL))( v14,  v15,  1LL,  AssociatedTypeWitness);
  return AttributedSubstring.subscript.modify;
}

void AttributedSubstring.subscript.modify(uint64_t **a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = (void *)(*a1)[28];
  uint64_t v4 = (void *)(*a1)[29];
  if ((a2 & 1) != 0)
  {
    uint64_t v5 = v2[26];
    uint64_t v6 = v2[27];
    uint64_t v7 = v2[24];
    uint64_t v8 = v2[23];
    (*(void (**)(uint64_t, void *, uint64_t))(v6 + 16))((*a1)[28], v4, v5);
    AttributedSubstring.subscript.setter((uint64_t)v3, v9, v8, v7);
    (*(void (**)(void *, uint64_t))(v6 + 8))(v4, v5);
  }

  else
  {
    AttributedSubstring.subscript.setter((*a1)[29], a2, v2[23], v2[24]);
  }

  free(v4);
  free(v3);
  free(v2);
}

uint64_t protocol witness for AttributedStringProtocol.subscript.getter in conformance AttributedSubstring@<X0>( uint64_t *a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  return AttributedSubstring.subscript.getter(a1, a2, a3);
}

uint64_t protocol witness for AttributedStringProtocol.subscript.setter in conformance AttributedSubstring( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = type metadata accessor for Optional();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8LL))(a1, v5);
}

uint64_t (*protocol witness for AttributedStringProtocol.subscript.modify in conformance AttributedSubstring( void *a1, void *a2, uint64_t a3, uint64_t a4))()
{
  uint64_t v7 = malloc(0x28uLL);
  *a1 = v7;
  v7[4] = AttributedSubstring.subscript.modify(v7, a2, a4);
  return protocol witness for AttributedStringProtocol.subscript.modify in conformance AttributedString;
}

void (*AttributedSubstring.subscript.modify( void *a1, void *a2, uint64_t a3))(uint64_t **a1, char a2)
{
  uint64_t v7 = (char *)malloc(0xF0uLL);
  *a1 = v7;
  *((void *)v7 + 22) = a3;
  *((void *)v7 + 23) = v3;
  uint64_t v8 = *(void *)(*MEMORY[0x18961A9A8] + *a2 + 8LL);
  *((void *)v7 + 24) = v8;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v10 = type metadata accessor for Optional();
  *((void *)v7 + 25) = v10;
  uint64_t v11 = *(void *)(v10 - 8);
  *((void *)v7 + 26) = v11;
  size_t v12 = *(void *)(v11 + 64);
  *((void *)v7 + 27) = malloc(v12);
  *((void *)v7 + 28) = malloc(v12);
  size_t v13 = malloc(v12);
  *((void *)v7 + 29) = v13;
  *(_OWORD *)(v7 + 72) = *(_OWORD *)(v3 + 8);
  *(_OWORD *)(v7 + 88) = *(_OWORD *)(v3 + 24);
  *(_OWORD *)(v7 + 104) = *(_OWORD *)(v3 + 40);
  *(_OWORD *)(v7 + 120) = *(_OWORD *)(v3 + 56);
  swift_retain();
  AttributedString.Guts.getUniformValue<A>(in:key:)((void *)v7 + 9, v8, a3, (uint64_t)v7);
  if (*((void *)v7 + 3))
  {
    outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>( (uint64_t)v7,  (uint64_t)(v7 + 136));
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Hashable & Sendable);
    swift_dynamicCast();
    outlined destroy of AttributedString._AttributeValue((uint64_t)v7);
    uint64_t v14 = 0LL;
  }

  else
  {
    outlined destroy of AttributedString._AttributeValue?((uint64_t)v7);
    uint64_t v14 = 1LL;
  }

  (*(void (**)(void *, uint64_t, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 56LL))( v13,  v14,  1LL,  AssociatedTypeWitness);
  swift_release();
  return AttributedSubstring.subscript.modify;
}

void AttributedSubstring.subscript.modify(uint64_t **a1, char a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = *(void (**)(uint64_t, uint64_t, uint64_t))((*a1)[26] + 16);
  v4((*a1)[28], v3[29], v3[25]);
  uint64_t v6 = (void *)v3[28];
  uint64_t v7 = (void *)v3[29];
  uint64_t v8 = (void *)v3[27];
  uint64_t v14 = v3[26];
  uint64_t v10 = v3[24];
  uint64_t v9 = v3[25];
  uint64_t v11 = v3[22];
  if ((a2 & 1) != 0)
  {
    v4((uint64_t)v8, (uint64_t)v6, v3[25]);
    AttributedSubstring.subscript.setter((uint64_t)v8, v12, v10, v11);
    size_t v13 = *(void (**)(void *, uint64_t))(v14 + 8);
    v13(v6, v9);
  }

  else
  {
    AttributedSubstring.subscript.setter((uint64_t)v6, v5, v3[24], v3[22]);
    size_t v13 = *(void (**)(void *, uint64_t))(v14 + 8);
  }

  v13(v7, v9);
  free(v7);
  free(v6);
  free(v8);
  free(v3);
}

void *AttributedSubstring.subscript.getter@<X0>(void *a1@<X8>)
{
  __int128 v3 = *(_OWORD *)(v1 + 24);
  v7[0] = *(_OWORD *)(v1 + 8);
  v7[1] = v3;
  __int128 v4 = *(_OWORD *)(v1 + 56);
  v7[2] = *(_OWORD *)(v1 + 40);
  v7[3] = v4;
  double result = AttributedString.Guts.getUniformValues(in:)(v7);
  *a1 = result;
  a1[1] = v6;
  a1[2] = 0LL;
  a1[3] = 0LL;
  return result;
}

uint64_t protocol witness for AttributedStringProtocol.subscript.setter in conformance AttributedSubstring( uint64_t *a1)
{
  return swift_release();
}

uint64_t AttributedSubstring.subscript.setter(uint64_t *a1)
{
  return swift_release();
}

void (*AttributedSubstring.subscript.modify( void *a1, uint64_t a2, uint64_t a3, uint64_t a4))(uint64_t a1)
{
  uint64_t v5 = v4;
  uint64_t v9 = malloc(0x68uLL);
  *a1 = v9;
  v9[11] = a4;
  v9[12] = v5;
  v9[10] = a3;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    uint64_t v10 = *(void **)v5;
    __int128 v12 = *(_OWORD *)(*(void *)v5 + 32LL);
    __int128 v11 = *(_OWORD *)(*(void *)v5 + 48LL);
    *(_OWORD *)uint64_t v9 = *(_OWORD *)(*(void *)v5 + 16LL);
    *((_OWORD *)v9 + 1) = v12;
    *((_OWORD *)v9 + 2) = v11;
    uint64_t v13 = v10[8];
    uint64_t v14 = v10[9];
    uint64_t v15 = v10[10];
    uint64_t v16 = v10[11];
    type metadata accessor for AttributedString.Guts();
    swift_allocObject();
    outlined retain of Locale((uint64_t)v9);
    swift_unknownObjectRetain();
    *(void *)uint64_t v5 = AttributedString.Guts.init(string:runs:)(v9, v13, v14, v15, v16);
    swift_release();
  }

  v9[6] = MEMORY[0x18961AFF0];
  __int128 v17 = v9 + 6;
  uint64_t v18 = MEMORY[0x18961AFF8];
  void v17[2] = 0LL;
  void v17[3] = 0LL;
  v17[1] = v18;
  return AttributedSubstring.subscript.modify;
}

void AttributedSubstring.subscript.modify(uint64_t a1)
{
  uint64_t v1 = *(void **)a1;
  $defer #1 <A>() in AttributedSubstring.subscript.modify( (uint64_t *)(*(void *)a1 + 48LL),  *(uint64_t **)(*(void *)a1 + 96LL));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  free(v1);
}

uint64_t $defer #1 <A>() in AttributedSubstring.subscript.modify(uint64_t *a1, uint64_t *a2)
{
  unint64_t v2 = a1[3];
  if (v2)
  {
    unint64_t v19 = a1[2];
    __int128 v3 = (_OWORD *)*a2;
    __int128 v4 = *(_OWORD *)(*a2 + 32);
    __int128 v25 = *(_OWORD *)(*a2 + 16);
    __int128 v26 = v4;
    __int128 v27 = v3[3];
    BigString.unicodeScalars.getter();
    swift_bridgeObjectRetain();
    swift_retain();
    unint64_t v5 = BigString.UnicodeScalarView.index(roundingDown:)();
    outlined release of Locale((uint64_t)v20);
    __int128 v6 = v3[2];
    __int128 v22 = v3[1];
    __int128 v23 = v6;
    __int128 v24 = v3[3];
    BigString.unicodeScalars.getter();
    unint64_t v7 = BigString.UnicodeScalarView.index(roundingDown:)();
    outlined release of Locale((uint64_t)v21);
    AttributedString.Guts.removeAttributeValue(forKey:in:adjustConstrainedAttributes:)(v19, v2, v5 >> 11, v7 >> 11, 1);
    swift_bridgeObjectRelease();
    return swift_release();
  }

  else
  {
    uint64_t v9 = *a2;
    uint64_t v10 = *a1;
    __int128 v11 = *(_OWORD *)(*a2 + 32);
    __int128 v25 = *(_OWORD *)(*a2 + 16);
    __int128 v26 = v11;
    __int128 v27 = *(_OWORD *)(v9 + 48);
    BigString.unicodeScalars.getter();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    unint64_t v12 = BigString.UnicodeScalarView.index(roundingDown:)();
    outlined release of Locale((uint64_t)v20);
    __int128 v13 = *(_OWORD *)(v9 + 32);
    __int128 v22 = *(_OWORD *)(v9 + 16);
    __int128 v23 = v13;
    __int128 v24 = *(_OWORD *)(v9 + 48);
    BigString.unicodeScalars.getter();
    unint64_t v14 = BigString.UnicodeScalarView.index(roundingDown:)();
    outlined release of Locale((uint64_t)v21);
    uint64_t v15 = v12 >> 11;
    uint64_t v16 = v14 >> 11;
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    specialized AttributedString._InternalRunsSlice.updateEach(with:)((void *)v9, v12 >> 11, v16, v10, 0);
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((specialized AttributedString._AttributeStorage.hasConstrainedAttributes.getter(v10) & 1) != 0)
    {
      uint64_t v17 = swift_bridgeObjectRetain();
      uint64_t v18 = specialized Sequence.compactMap<A>(_:)(v17);
      swift_bridgeObjectRelease();
      AttributedString.Guts.enforceAttributeConstraintsAfterMutation(in:type:constraintsInvolved:)(v15, v16, 0, v18);
      swift_bridgeObjectRelease();
      swift_release();
      swift_bridgeObjectRelease();
    }

    else
    {
      swift_bridgeObjectRelease();
      swift_release();
    }

    return swift_bridgeObjectRelease();
  }

Swift::Int protocol witness for Hashable.hashValue.getter in conformance AttributedSubstring()
{
  __int128 v1 = v0[3];
  __int128 v7 = v0[2];
  __int128 v8 = v1;
  __int128 v9 = v0[4];
  __int128 v2 = v0[1];
  __int128 v5 = *v0;
  __int128 v6 = v2;
  Hasher.init(_seed:)();
  specialized AttributedStringProtocol.hash(into:)((uint64_t)v4);
  return Hasher._finalize()();
}

Swift::UInt protocol witness for Hashable.hash(into:) in conformance AttributedSubstring(uint64_t a1)
{
  return specialized AttributedStringProtocol.hash(into:)(a1);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance AttributedSubstring()
{
  __int128 v1 = v0[3];
  __int128 v7 = v0[2];
  __int128 v8 = v1;
  __int128 v9 = v0[4];
  __int128 v2 = v0[1];
  __int128 v5 = *v0;
  __int128 v6 = v2;
  Hasher.init(_seed:)();
  specialized AttributedStringProtocol.hash(into:)((uint64_t)v4);
  return Hasher._finalize()();
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance AttributedSubstring()
{
  return AttributedString.Guts.description(in:)();
}

uint64_t key path getter for AttributedSubstring.subscript<A>(dynamicMember:) : <A>AttributedSubstringA@<X0>( uint64_t **a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v4 = *(uint64_t *)((char *)a1 + a2 - 8);
  __int128 v5 = *a1;
  swift_retain();
  AttributedSubstring.subscript.getter(v5, v4, a3);
  return swift_release();
}

double key path getter for AttributedSubstring.subscript<A>(dynamicMember:) : <A>AttributedSubstringA@<D0>( _OWORD *a1@<X8>)
{
  double result = *(double *)v4;
  __int128 v3 = v4[1];
  *a1 = v4[0];
  a1[1] = v3;
  return result;
}

uint64_t key path setter for AttributedSubstring.subscript<A>(dynamicMember:) : <A>AttributedSubstringA( uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = *(void *)(a4 + a3 - 16);
  uint64_t v5 = *(void *)(a4 + a3 - 8);
  uint64_t v6 = *a1;
  uint64_t v7 = a1[1];
  uint64_t v9 = a1[2];
  uint64_t v8 = a1[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  __int128 v11 = AttributedSubstring.subscript.modify(v14, v10, v4, v5);
  *unint64_t v12 = v6;
  v12[1] = v7;
  v12[2] = v9;
  v12[3] = v8;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return ((uint64_t (*)(void *, void))v11)(v14, 0LL);
}

uint64_t specialized static AttributedSubstring.== infix(_:_:)(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a1;
  __int128 v4 = *(_OWORD *)(a1 + 1);
  __int128 v5 = *(_OWORD *)(a1 + 3);
  __int128 v6 = *(_OWORD *)(a1 + 5);
  __int128 v263 = *(_OWORD *)(a1 + 7);
  __int128 v262 = v6;
  __int128 v261 = v5;
  __int128 v260 = v4;
  uint64_t v7 = *a2;
  __int128 v8 = *(_OWORD *)(a2 + 1);
  __int128 v9 = *(_OWORD *)(a2 + 3);
  __int128 v10 = *(_OWORD *)(a2 + 5);
  __int128 v259 = *(_OWORD *)(a2 + 7);
  __int128 v258 = v10;
  __int128 v257 = v9;
  __int128 v256 = v8;
  if (v3 == v7
    && ((unint64_t)v256 ^ (unint64_t)v260) <= 0x3FF
    && ((unint64_t)v258 ^ (unint64_t)v262) < 0x400)
  {
    return 1LL;
  }

  uint64_t v11 = swift_retain();
  AttributedString.Runs.init(_:in:)(v11, __src);
  __int128 v219 = __src[10];
  __int128 v220 = __src[11];
  uint64_t v221 = *(void *)&__src[12];
  __int128 v215 = __src[6];
  __int128 v216 = __src[7];
  __int128 v218 = __src[9];
  __int128 v217 = __src[8];
  __int128 v211 = __src[2];
  __int128 v212 = __src[3];
  __int128 v214 = __src[5];
  __int128 v213 = __src[4];
  __int128 v210 = __src[1];
  __int128 v209 = __src[0];
  uint64_t v12 = swift_retain();
  uint64_t result = AttributedString.Runs.init(_:in:)(v12, __src);
  __int128 v228 = __src[10];
  __int128 v229 = __src[11];
  uint64_t v230 = *(void *)&__src[12];
  __int128 v224 = __src[6];
  __int128 v225 = __src[7];
  __int128 v227 = __src[9];
  __int128 v226 = __src[8];
  *(_OWORD *)&v222[32] = __src[2];
  *(_OWORD *)&v222[48] = __src[3];
  __int128 v223 = __src[5];
  *(_OWORD *)&v222[64] = __src[4];
  *(_OWORD *)&v222[16] = __src[1];
  *(_OWORD *)uint64_t v222 = __src[0];
  unint64_t v14 = (void *)v209;
  uint64_t v15 = *(void *)&__src[0];
  if ((void)v209 == *(void *)&__src[0]
    && (*((void *)&v226 + 1) ^ *((void *)&v217 + 1)) <= 1023LL
    && (*((void *)&v219 + 1) ^ *((void *)&v228 + 1)) <= 1023LL)
  {
LABEL_142:
    outlined release of AttributedString.Runs((uint64_t)v222);
    outlined release of AttributedString.Runs((uint64_t)&v209);
    return 1LL;
  }

  uint64_t v16 = *((void *)&v213 + 1);
  uint64_t v134 = *((void *)&v209 + 1);
  if (__OFSUB__(*((void *)&v213 + 1), *((void *)&v209 + 1))) {
    goto LABEL_166;
  }
  if (__OFSUB__(*(void *)&v222[72], *(void *)&v222[8]))
  {
LABEL_167:
    __break(1u);
LABEL_168:
    __break(1u);
LABEL_169:
    __break(1u);
LABEL_170:
    __break(1u);
LABEL_171:
    __break(1u);
LABEL_172:
    __break(1u);
LABEL_173:
    __break(1u);
LABEL_174:
    __break(1u);
LABEL_175:
    __break(1u);
LABEL_176:
    __break(1u);
    goto LABEL_177;
  }

  if (*((void *)&v213 + 1) - *((void *)&v209 + 1) != *(void *)&v222[72] - *(void *)&v222[8]) {
    goto LABEL_148;
  }
  unint64_t v137 = *((void *)&v210 + 1);
  uint64_t v140 = v210;
  unint64_t v17 = *((void *)&v211 + 1);
  uint64_t v141 = v211;
  uint64_t v138 = *((void *)&v212 + 1);
  uint64_t v139 = v212;
  uint64_t v155 = v213;
  unint64_t v18 = *((void *)&v217 + 1);
  uint64_t v20 = *((void *)&v218 + 1);
  unint64_t v19 = v218;
  unint64_t v21 = *((void *)&v219 + 1);
  unint64_t v22 = v219;
  unint64_t v153 = *((void *)&v226 + 1);
  uint64_t v159 = *((void *)&v227 + 1);
  uint64_t v160 = v227;
  uint64_t v158 = v228;
  __src[10] = v228;
  __src[11] = v229;
  *(void *)&__src[12] = v230;
  __src[6] = v224;
  __src[7] = v225;
  __src[9] = v227;
  __src[8] = v226;
  __src[3] = *(_OWORD *)&v222[48];
  __src[5] = v223;
  __src[4] = *(_OWORD *)&v222[64];
  __src[1] = *(_OWORD *)&v222[16];
  __src[2] = *(_OWORD *)&v222[32];
  __src[0] = *(_OWORD *)v222;
  *(_OWORD *)((char *)&__src[12] + 8) = *(_OWORD *)&v222[8];
  *(_OWORD *)((char *)&__src[13] + 8) = *(_OWORD *)&v222[24];
  *(_OWORD *)((char *)&__src[14] + 8) = *(_OWORD *)&v222[40];
  unint64_t v154 = (__int128 *)(v209 + 16);
  __int128 v136 = (__int128 *)(v15 + 16);
  *(_OWORD *)((char *)&__src[15] + 8) = *(_OWORD *)&v222[56];
  outlined retain of AttributedString.Runs((uint64_t)&v209);
  uint64_t result = outlined retain of AttributedString.Runs((uint64_t)v222);
  int64_t v128 = v21 >> 11;
  unint64_t v129 = v18 >> 10;
  unint64_t v132 = v19;
  unint64_t v133 = v18;
  unint64_t v23 = v18;
  unint64_t v24 = v19;
  __int128 v25 = v14;
  unint64_t v130 = v22;
  uint64_t v131 = v20;
  uint64_t v26 = v134;
  uint64_t v135 = v16;
  __int128 v148 = v25;
  while (1)
  {
    unint64_t v162 = v17;
    uint64_t v151 = v20;
    unint64_t v152 = v23;
    unint64_t v149 = v24;
    unint64_t v150 = v22;
    if (v26 == v16)
    {
      uint64_t v27 = 0LL;
      uint64_t v28 = 0LL;
      unint64_t v29 = 0LL;
      unint64_t v170 = 0LL;
      uint64_t v30 = 0LL;
      unint64_t v31 = 0LL;
      unint64_t v172 = 0LL;
      uint64_t v32 = 0LL;
      unint64_t v33 = 0LL;
      uint64_t v34 = 0LL;
      uint64_t v35 = 0LL;
      uint64_t v147 = v16;
      goto LABEL_132;
    }

    unint64_t v36 = v137;
    if (v26 < v134 || v26 >= v16) {
      goto LABEL_155;
    }
    *(_OWORD *)&__dst[160] = v219;
    *(_OWORD *)&__dst[176] = v220;
    *(void *)&__dst[192] = v221;
    *(_OWORD *)&__dst[96] = v215;
    *(_OWORD *)&__dst[112] = v216;
    *(_OWORD *)&__dst[128] = v217;
    *(_OWORD *)&__dst[144] = v218;
    *(_OWORD *)&__dst[32] = v211;
    *(_OWORD *)&__dst[48] = v212;
    *(_OWORD *)&__dst[64] = v213;
    *(_OWORD *)&__dst[80] = v214;
    *(_OWORD *)__dst = v209;
    *(_OWORD *)&__dst[16] = v210;
    uint64_t v175 = v26;
    uint64_t v176 = v140;
    unint64_t v177 = v137;
    uint64_t v178 = v141;
    unint64_t v179 = v17;
    uint64_t v180 = v139;
    uint64_t v181 = v138;
    uint64_t v182 = v155;
    uint64_t result = (uint64_t)AttributedString.Runs._resolve(_:)(&v175, &v186);
    if (v186 != v25[11]) {
      goto LABEL_156;
    }
    unint64_t v37 = v187;
    unint64_t v38 = v191;
    unint64_t v39 = v192;
    uint64_t v40 = v193;
    unint64_t v41 = v194;
    if (v188)
    {
      unint64_t v42 = (void *)(v188 + 24 * ((v187 >> ((4 * *(_BYTE *)(v188 + 18) + 8) & 0x3C)) & 0xF));
      unint64_t v43 = v42[3];
      uint64_t v44 = v42[4];
      uint64_t v45 = v42[5];
      outlined retain of AttributedString.Runs((uint64_t)&v209);
      uint64_t v157 = v44;
      swift_bridgeObjectRetain();
      uint64_t v166 = v45;
      uint64_t result = swift_bridgeObjectRetain();
    }

    else
    {
      uint64_t v46 = v25[8];
      outlined retain of AttributedString.Runs((uint64_t)&v209);
      swift_unknownObjectRetain();
      unint64_t v36 = v137;
      __int128 v25 = v148;
      unint64_t v43 = specialized Rope._Node.subscript.getter(v37, v46);
      uint64_t v157 = v47;
      uint64_t v166 = v48;
      uint64_t result = swift_unknownObjectRelease();
    }

    if (v129 >= v38 >> 10) {
      unint64_t v49 = v133;
    }
    else {
      unint64_t v49 = v38;
    }
    if (v129 >= v38 >> 10) {
      unint64_t v50 = v132;
    }
    else {
      unint64_t v50 = v39;
    }
    if (v129 >= v38 >> 10) {
      uint64_t v51 = v131;
    }
    else {
      uint64_t v51 = v40;
    }
    if (v129 >= v38 >> 10) {
      unint64_t v52 = v130;
    }
    else {
      unint64_t v52 = v41;
    }
    if (__OFADD__(v43, v38 >> 11)) {
      goto LABEL_157;
    }
    unint64_t v168 = v52;
    uint64_t v169 = v51;
    unint64_t v170 = v50;
    else {
      unint64_t v53 = v128;
    }
    __int128 v54 = v154[1];
    v255[15] = *v154;
    v255[16] = v54;
    v255[17] = v154[2];
    unint64_t v173 = v49;
    BigString.utf8.getter();
    uint64_t result = v173;
    if (__OFSUB__(v53, v173 >> 11)) {
      goto LABEL_158;
    }
    unint64_t v55 = BigString.UTF8View.index(_:offsetBy:)();
    unint64_t v164 = v57;
    uint64_t v165 = v56;
    uint64_t v163 = v58;
    uint64_t result = outlined release of Locale((uint64_t)&v231);
    unint64_t v172 = v55;
    if (v55 >> 10 < v173 >> 10) {
      goto LABEL_159;
    }
    uint64_t v60 = v25[8];
    uint64_t v59 = v25[9];
    uint64_t v171 = v25[10];
    uint64_t v62 = v140;
    uint64_t v61 = v141;
    uint64_t v167 = v25[11];
    if (v141 != 1 && v140 == v25[11])
    {
      unint64_t v63 = v162;
      if (v155 == 2)
      {
        if (v60)
        {
          outlined retain of AttributedString.Runs((uint64_t)&v209);
          swift_unknownObjectRetain();
          uint64_t v64 = v59;
          uint64_t result = specialized Rope._Node.distanceFromStart<A>(to:in:)(v140, v36, v141, v60, v59, v171);
          uint64_t v65 = result;
        }

        else
        {
          uint64_t v64 = v25[9];
          uint64_t result = swift_retain();
          uint64_t v65 = 0LL;
        }
      }

      else
      {
        uint64_t v64 = v25[9];
        uint64_t v65 = v162 >> 11;
        outlined retain of AttributedString.Runs((uint64_t)&v209);
        uint64_t result = swift_unknownObjectRetain();
      }

      uint64_t v82 = v157;
      goto LABEL_121;
    }

    if (v60) {
      uint64_t v66 = v25[9];
    }
    else {
      uint64_t v66 = 0LL;
    }
    unint64_t v63 = v162;
    if (v26 < 0 || v66 < v26) {
      goto LABEL_170;
    }
    if (v60 && v26 < v59 && *(_WORD *)(v60 + 16))
    {
      uint64_t v67 = v25[9];
      uint64_t v68 = *(unsigned __int8 *)(v60 + 18);
      if (*(_BYTE *)(v60 + 18))
      {
        swift_unknownObjectRetain_n();
        outlined retain of AttributedString.Runs((uint64_t)&v209);
        uint64_t result = swift_unknownObjectRetain();
        uint64_t v69 = v26;
        uint64_t v70 = v60;
        while (1)
        {
          unint64_t v72 = *(unsigned __int16 *)(v70 + 16);
          if (*(_WORD *)(v70 + 16))
          {
            uint64_t v73 = *(void *)(v70 + 32);
            BOOL v74 = __OFSUB__(v69, v73);
            uint64_t v75 = v69 - v73;
            if (v74) {
              goto LABEL_151;
            }
            if (__OFADD__(v75, 1LL)) {
              goto LABEL_152;
            }
            if (v75 + 1 <= 0)
            {
              unint64_t v72 = 0LL;
              goto LABEL_54;
            }

            if ((_DWORD)v72 != 1)
            {
              uint64_t v76 = *(void *)(v70 + 56);
              uint64_t v69 = v75 - v76;
              if (__OFSUB__(v75, v76)) {
                goto LABEL_168;
              }
              if (__OFADD__(v69, 1LL)) {
                goto LABEL_169;
              }
              if (v69 + 1 < 1)
              {
                unint64_t v72 = 1LL;
                uint64_t v69 = v75;
                goto LABEL_54;
              }

              if ((_DWORD)v72 == 2) {
                goto LABEL_53;
              }
              uint64_t v77 = *(void *)(v70 + 80);
              BOOL v74 = __OFSUB__(v69, v77);
              uint64_t v75 = v69 - v77;
              if (v74) {
                goto LABEL_172;
              }
              if (__OFADD__(v75, 1LL)) {
                goto LABEL_173;
              }
              if (v75 + 1 < 1)
              {
                unint64_t v72 = 2LL;
                goto LABEL_54;
              }

              if ((_DWORD)v72 != 3)
              {
                uint64_t v78 = 3LL;
                if (v72 > 3) {
                  uint64_t v78 = *(unsigned __int16 *)(v70 + 16);
                }
                __int128 v79 = (void *)(v70 + 104);
                uint64_t v80 = 3LL;
                while (v78 != v80)
                {
                  uint64_t v69 = v75 - *v79;
                  if (__OFSUB__(v75, *v79)) {
                    goto LABEL_164;
                  }
                  if (__OFADD__(v69, 1LL)) {
                    goto LABEL_165;
                  }
                  if (v69 + 1 < 1)
                  {
                    unint64_t v72 = v80;
                    uint64_t v69 = v75;
                    goto LABEL_54;
                  }

                  ++v80;
                  v79 += 3;
                  uint64_t v75 = v69;
                  if (v72 == v80) {
                    goto LABEL_53;
                  }
                }

uint64_t partial apply for closure #2 in AttributedSubstring.replaceAttributes(_:with:)( void *a1, uint64_t a2, uint64_t a3)
{
  return closure #2 in AttributedSubstring.replaceAttributes(_:with:)( a1,  a2,  a3,  *(void *)(v3 + 16),  *(void *)(v3 + 24),  *(void *)(v3 + 32),  *(void *)(v3 + 40),  *(_BYTE *)(v3 + 48),  *(void ***)(v3 + 56));
}

uint64_t specialized AttributedSubstring.subscript.setter(uint64_t *a1)
{
  __int128 v2 = v1;
  uint64_t v3 = *a1;
  uint64_t v4 = a1[1];
  uint64_t v6 = a1[2];
  uint64_t v5 = a1[3];
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    uint64_t v7 = (void *)*v1;
    __int128 v8 = *(_OWORD *)(*v1 + 16);
    __int128 v9 = *(_OWORD *)(*v1 + 48);
    v16[1] = *(_OWORD *)(*v1 + 32);
    __int128 v16[2] = v9;
    v16[0] = v8;
    uint64_t v10 = v7[8];
    uint64_t v14 = v7[9];
    uint64_t v11 = v7[10];
    uint64_t v12 = v7[11];
    type metadata accessor for AttributedString.Guts();
    swift_allocObject();
    outlined retain of Locale((uint64_t)v16);
    swift_unknownObjectRetain();
    uint64_t *v2 = AttributedString.Guts.init(string:runs:)(v16, v10, v14, v11, v12);
    swift_release();
  }

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v15[0] = v3;
  v15[1] = v4;
  v15[2] = v6;
  v15[3] = v5;
  $defer #1 <A>() in AttributedSubstring.subscript.modify(v15, v2);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

unint64_t instantiation function for generic protocol witness table for AttributedSubstring( uint64_t a1)
{
  *(void *)(a1 + 16) = lazy protocol witness table accessor for type AttributedSubstring and conformance AttributedSubstring();
  unint64_t result = lazy protocol witness table accessor for type AttributedSubstring and conformance AttributedSubstring();
  *(void *)(a1 + 24) = result;
  return result;
}

unint64_t lazy protocol witness table accessor for type AttributedSubstring and conformance AttributedSubstring()
{
  unint64_t result = lazy protocol witness table cache variable for type AttributedSubstring and conformance AttributedSubstring;
  if (!lazy protocol witness table cache variable for type AttributedSubstring and conformance AttributedSubstring)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for AttributedSubstring,  &type metadata for AttributedSubstring);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type AttributedSubstring and conformance AttributedSubstring);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type AttributedSubstring and conformance AttributedSubstring;
  if (!lazy protocol witness table cache variable for type AttributedSubstring and conformance AttributedSubstring)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for AttributedSubstring,  &type metadata for AttributedSubstring);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type AttributedSubstring and conformance AttributedSubstring);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type AttributedSubstring and conformance AttributedSubstring;
  if (!lazy protocol witness table cache variable for type AttributedSubstring and conformance AttributedSubstring)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for AttributedSubstring,  &type metadata for AttributedSubstring);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type AttributedSubstring and conformance AttributedSubstring);
  }

  return result;
}

uint64_t sub_183515C80(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return specialized AttributedSubstring.subscript.setter(a1, *(void *)(a4 + a3 - 16), *(void *)(a4 + a3 - 8));
}

uint64_t sub_183515CA8()
{
  return 16LL;
}

__n128 sub_183515CB4(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_183515CC8()
{
  return 16LL;
}

__n128 sub_183515CD4(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

ValueMetadata *type metadata accessor for AttributedSubstring()
{
  return &type metadata for AttributedSubstring;
}

uint64_t protocol witness for DataProtocol.regions.getter in conformance <A> [A]@<X0>(void *a1@<X8>)
{
  *a1 = *v1;
  return swift_bridgeObjectRetain();
}

uint64_t ArraySlice<A>.regions.getter()
{
  return swift_unknownObjectRetain();
}

uint64_t protocol witness for DataProtocol.regions.getter in conformance <A> ArraySlice<A>@<X0>( _OWORD *a1@<X8>)
{
  __int128 v2 = v1[1];
  *a1 = *v1;
  a1[1] = v2;
  return swift_unknownObjectRetain();
}

uint64_t protocol witness for DataProtocol.regions.getter in conformance <A> ContiguousArray<A>@<X0>( void *a1@<X8>)
{
  *a1 = *v1;
  return swift_retain();
}

uint64_t Repeated<A>.regions.getter(uint64_t a1, char a2)
{
  uint64_t v9 = *MEMORY[0x1895F89C0];
  if (a1)
  {
    if (a1 < 1) {
      __break(1u);
    }
    uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CollectionOfOne<UInt8>);
    __int128 v8 = &protocol witness table for <A> CollectionOfOne<A>;
    LOBYTE(v6[0]) = a2;
    char __src = *(_BYTE *)__swift_project_boxed_opaque_existential_1(v6, v7);
    specialized Data.InlineData.init(_:)(&__src, v6);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v6);
  }

  return a1;
}

uint64_t protocol witness for DataProtocol.regions.getter in conformance <A> Repeated<A>@<X0>( uint64_t *a1@<X8>)
{
  uint64_t result = Repeated<A>.regions.getter(*(void *)v1, *(_BYTE *)(v1 + 8));
  *a1 = result;
  a1[1] = v4;
  a1[2] = v5;
  return result;
}

uint64_t associated type witness table accessor for DataProtocol.Regions : BidirectionalCollection in <A> [A]()
{
  return lazy protocol witness table accessor for type [String] and conformance [A]( &lazy protocol witness table cache variable for type CollectionOfOne<[UInt8]> and conformance CollectionOfOne<A>,  &demangling cache variable for type metadata for CollectionOfOne<[UInt8]>,  MEMORY[0x189619490]);
}

uint64_t associated type witness table accessor for Collection.SubSequence : DataProtocol in <A> [A]()
{
  return lazy protocol witness table accessor for type [String] and conformance [A]( &lazy protocol witness table cache variable for type ArraySlice<UInt8> and conformance <A> ArraySlice<A>,  (uint64_t *)&demangling cache variable for type metadata for ArraySlice<UInt8>,  (uint64_t)&protocol conformance descriptor for <A> ArraySlice<A>);
}

_UNKNOWN **associated type witness table accessor for DataProtocol.Regions.Sequence.Element : ContiguousBytes in <A> [A]()
{
  return &protocol witness table for <A> [A];
}

uint64_t associated type witness table accessor for DataProtocol.Regions.Sequence.Element : DataProtocol in <A> [A]()
{
  return lazy protocol witness table accessor for type [String] and conformance [A]( &lazy protocol witness table cache variable for type [UInt8] and conformance <A> [A],  &demangling cache variable for type metadata for [UInt8],  (uint64_t)&protocol conformance descriptor for <A> [A]);
}

_UNKNOWN **associated type witness table accessor for DataProtocol.Regions.Sequence.Element.Collection.SubSequence : ContiguousBytes in <A> [A]()
{
  return &protocol witness table for <A> ArraySlice<A>;
}

uint64_t instantiation function for generic protocol witness table for <A> [A](uint64_t a1)
{
  uint64_t result = lazy protocol witness table accessor for type [String] and conformance [A]( &lazy protocol witness table cache variable for type [UInt8] and conformance [A],  &demangling cache variable for type metadata for [UInt8],  MEMORY[0x189618480]);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t associated type witness table accessor for DataProtocol.Regions : BidirectionalCollection in <A> ArraySlice<A>()
{
  return lazy protocol witness table accessor for type [String] and conformance [A]( &lazy protocol witness table cache variable for type CollectionOfOne<ArraySlice<UInt8>> and conformance CollectionOfOne<A>,  &demangling cache variable for type metadata for CollectionOfOne<ArraySlice<UInt8>>,  MEMORY[0x189619490]);
}

uint64_t instantiation function for generic protocol witness table for <A> ArraySlice<A>(uint64_t a1)
{
  uint64_t result = lazy protocol witness table accessor for type [String] and conformance [A]( &lazy protocol witness table cache variable for type ArraySlice<UInt8> and conformance ArraySlice<A>,  (uint64_t *)&demangling cache variable for type metadata for ArraySlice<UInt8>,  MEMORY[0x189618F98]);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t associated type witness table accessor for DataProtocol.Regions : BidirectionalCollection in <A> ContiguousArray<A>()
{
  return lazy protocol witness table accessor for type [String] and conformance [A]( &lazy protocol witness table cache variable for type CollectionOfOne<ContiguousArray<UInt8>> and conformance CollectionOfOne<A>,  &demangling cache variable for type metadata for CollectionOfOne<ContiguousArray<UInt8>>,  MEMORY[0x189619490]);
}

_UNKNOWN **associated type witness table accessor for DataProtocol.Regions.Sequence.Element : ContiguousBytes in <A> ContiguousArray<A>()
{
  return &protocol witness table for <A> ContiguousArray<A>;
}

uint64_t associated type witness table accessor for DataProtocol.Regions.Sequence.Element : DataProtocol in <A> ContiguousArray<A>()
{
  return lazy protocol witness table accessor for type [String] and conformance [A]( &lazy protocol witness table cache variable for type ContiguousArray<UInt8> and conformance <A> ContiguousArray<A>,  &demangling cache variable for type metadata for ContiguousArray<UInt8>,  (uint64_t)&protocol conformance descriptor for <A> ContiguousArray<A>);
}

uint64_t instantiation function for generic protocol witness table for <A> ContiguousArray<A>(uint64_t a1)
{
  uint64_t result = lazy protocol witness table accessor for type [String] and conformance [A]( &lazy protocol witness table cache variable for type ContiguousArray<UInt8> and conformance ContiguousArray<A>,  &demangling cache variable for type metadata for ContiguousArray<UInt8>,  MEMORY[0x189619588]);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t associated type witness table accessor for DataProtocol.Regions : BidirectionalCollection in <A> EmptyCollection<A>()
{
  return lazy protocol witness table accessor for type [String] and conformance [A]( &lazy protocol witness table cache variable for type EmptyCollection<Data> and conformance EmptyCollection<A>,  &demangling cache variable for type metadata for EmptyCollection<Data>,  MEMORY[0x1896195B8]);
}

uint64_t associated type witness table accessor for Collection.SubSequence : DataProtocol in <A> EmptyCollection<A>()
{
  return lazy protocol witness table accessor for type [String] and conformance [A]( &lazy protocol witness table cache variable for type EmptyCollection<UInt8> and conformance <A> EmptyCollection<A>,  &demangling cache variable for type metadata for EmptyCollection<UInt8>,  (uint64_t)&protocol conformance descriptor for <A> EmptyCollection<A>);
}

uint64_t instantiation function for generic protocol witness table for <A> EmptyCollection<A>(uint64_t a1)
{
  uint64_t result = lazy protocol witness table accessor for type [String] and conformance [A]( &lazy protocol witness table cache variable for type EmptyCollection<UInt8> and conformance EmptyCollection<A>,  &demangling cache variable for type metadata for EmptyCollection<UInt8>,  MEMORY[0x1896195C8]);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t associated type witness table accessor for DataProtocol.Regions : BidirectionalCollection in <A> Repeated<A>()
{
  return lazy protocol witness table accessor for type [String] and conformance [A]( &lazy protocol witness table cache variable for type Repeated<Data> and conformance Repeated<A>,  &demangling cache variable for type metadata for Repeated<Data>,  MEMORY[0x18961AF20]);
}

unint64_t lazy protocol witness table accessor for type Slice<Repeated<UInt8>> and conformance <> Slice<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type Slice<Repeated<UInt8>> and conformance <> Slice<A>;
  if (!lazy protocol witness table cache variable for type Slice<Repeated<UInt8>> and conformance <> Slice<A>)
  {
    uint64_t v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Slice<Repeated<UInt8>>);
    uint64_t v2 = lazy protocol witness table accessor for type [String] and conformance [A]( &lazy protocol witness table cache variable for type Repeated<UInt8> and conformance <A> Repeated<A>,  &demangling cache variable for type metadata for Repeated<UInt8>,  (uint64_t)&protocol conformance descriptor for <A> Repeated<A>);
    unint64_t result = MEMORY[0x186E20D4C](&protocol conformance descriptor for <> Slice<A>, v1, &v2);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Slice<Repeated<UInt8>> and conformance <> Slice<A>);
  }

  return result;
}

uint64_t instantiation function for generic protocol witness table for <A> Repeated<A>(uint64_t a1)
{
  uint64_t result = lazy protocol witness table accessor for type [String] and conformance [A]( &lazy protocol witness table cache variable for type Repeated<UInt8> and conformance Repeated<A>,  &demangling cache variable for type metadata for Repeated<UInt8>,  MEMORY[0x18961AF28]);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t instantiation function for generic protocol witness table for <A> [A](void *a1)
{
  a1[1] = lazy protocol witness table accessor for type [String] and conformance [A]( &lazy protocol witness table cache variable for type [UInt8] and conformance <A> [A],  &demangling cache variable for type metadata for [UInt8],  (uint64_t)&protocol conformance descriptor for <A> [A]);
  a1[2] = lazy protocol witness table accessor for type [String] and conformance [A]( &lazy protocol witness table cache variable for type [UInt8] and conformance [A],  &demangling cache variable for type metadata for [UInt8],  MEMORY[0x189618460]);
  uint64_t result = lazy protocol witness table accessor for type [String] and conformance [A]( &lazy protocol witness table cache variable for type [UInt8] and conformance [A],  &demangling cache variable for type metadata for [UInt8],  MEMORY[0x189618490]);
  a1[3] = result;
  return result;
}

uint64_t instantiation function for generic protocol witness table for <A> ContiguousArray<A>(void *a1)
{
  a1[1] = lazy protocol witness table accessor for type [String] and conformance [A]( &lazy protocol witness table cache variable for type ContiguousArray<UInt8> and conformance <A> ContiguousArray<A>,  &demangling cache variable for type metadata for ContiguousArray<UInt8>,  (uint64_t)&protocol conformance descriptor for <A> ContiguousArray<A>);
  a1[2] = lazy protocol witness table accessor for type [String] and conformance [A]( &lazy protocol witness table cache variable for type ContiguousArray<UInt8> and conformance ContiguousArray<A>,  &demangling cache variable for type metadata for ContiguousArray<UInt8>,  MEMORY[0x189619570]);
  uint64_t result = lazy protocol witness table accessor for type [String] and conformance [A]( &lazy protocol witness table cache variable for type ContiguousArray<UInt8> and conformance ContiguousArray<A>,  &demangling cache variable for type metadata for ContiguousArray<UInt8>,  MEMORY[0x189619598]);
  a1[3] = result;
  return result;
}

uint64_t static __PlistDictionaryEncoder.encodeToTopLevelContainer<A>(_:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v9 = swift_allocObject();
  uint64_t v10 = MEMORY[0x18961AFF0];
  uint64_t v11 = MEMORY[0x18961AFE8];
  *(void *)(v9 + 24) = 200LL;
  *(void *)(v9 + 32) = v10;
  *(void *)(v9 + 16) = v11;
  *(_OWORD *)(v9 + 40) = xmmword_18372C9E0;
  uint64_t v12 = specialized __PlistDictionaryEncoder.boxGeneric<A, B>(_:for:_:)( a1,  0x8000000000000000LL,  0LL,  0LL,  0LL,  255,  a2,  a3);
  if (v4) {
    return swift_release();
  }
  uint64_t v14 = v12;
  if (!v12)
  {
    uint64_t v15 = type metadata accessor for EncodingError();
    swift_allocError();
    unint64_t v17 = v16;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Any, EncodingError.Context));
    void v17[3] = a2;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v17);
    (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(a2 - 8) + 16LL))( boxed_opaque_existential_1,  a1,  a2);
    _StringGuts.grow(_:)(39LL);
    swift_bridgeObjectRelease();
    v19._uint64_t countAndFlagsBits = _typeName(_:qualified:)();
    String.append(_:)(v19);
    swift_bridgeObjectRelease();
    v20._uint64_t object = (void *)0x80000001839CA930LL;
    v20._uint64_t countAndFlagsBits = 0xD00000000000001BLL;
    String.append(_:)(v20);
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(uint64_t *, void, uint64_t))(*(void *)(v15 - 8) + 104LL))( v17,  *MEMORY[0x1896193B8],  v15);
    swift_willThrow();
    return swift_release();
  }

  a4[3] = type metadata accessor for NSMorphologyPronoun( 0LL,  (unint64_t *)&lazy cache variable for type metadata for NSObject);
  uint64_t result = swift_release();
  *a4 = v14;
  return result;
}

uint64_t specialized __PlistDictionaryEncoder.boxGeneric<A, B>(_:for:_:)( uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, uint64_t a7, uint64_t a8)
{
  uint64_t v28 = a8;
  uint64_t v15 = *(void *)(a7 - 8);
  MEMORY[0x1895F8858](a1);
  unint64_t v17 = (char *)&v21 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (swift_dynamicCastMetatype())
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v15 + 16))(v17, a1, a7);
    unint64_t v18 = (unint64_t *)&lazy cache variable for type metadata for NSDate;
  }

  else
  {
    uint64_t v27 = a1;
    uint64_t v19 = v28;
    unint64_t v22 = a2;
    uint64_t v23 = a3;
    uint64_t v24 = a4;
    uint64_t v25 = a5;
    int v26 = a6;
    if (!swift_dynamicCastMetatype())
    {
      MEMORY[0x1895F8858](0LL);
      *(&v21 - 4) = a7;
      *(&v21 - 3) = v19;
      *(&v21 - 2) = v27;
      return specialized __PlistDictionaryEncoder._boxGeneric<A>(_:for:_:)( (void (*)(void *))closure #1 in __PlistDictionaryEncoder.boxGeneric<A, B>(_:for:_:)specialized partial apply,  (uint64_t)(&v21 - 6),  v22,  v23,  v24,  v25,  v26);
    }

    (*(void (**)(char *, uint64_t, uint64_t))(v15 + 16))(v17, v27, a7);
    unint64_t v18 = (unint64_t *)&lazy cache variable for type metadata for NSData;
  }

  type metadata accessor for NSMorphologyPronoun(0LL, v18);
  swift_dynamicCast();
  return v29;
}

void __PlistDictionaryEncoder.container<A>(keyedBy:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (((*(uint64_t (**)(void))(*v3 + 208))() & 1) != 0)
  {
    objc_msgSend(objc_allocWithZone(MEMORY[0x189603FC8]), sel_init);
    specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
    specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
    specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized ContiguousArray._endMutation()();
LABEL_5:
    uint64_t v9 = type metadata accessor for _PlistDictionaryKeyedEncodingContainer(0LL, a2, a3, v6);
    swift_retain();
    swift_retain();
    MEMORY[0x186E20D4C](&protocol conformance descriptor for _PlistDictionaryKeyedEncodingContainer<A>, v9);
    KeyedEncodingContainer.init<A>(_:)();
    return;
  }

  uint64_t v7 = specialized BidirectionalCollection.last.getter(v3[2]);
  if (v7)
  {
    __int128 v8 = v7;
    objc_opt_self();
    if (swift_dynamicCastObjCClass()) {
      goto LABEL_5;
    }
  }

  __break(1u);
}

void __PlistDictionaryEncoder.unkeyedContainer()(uint64_t **a1@<X8>)
{
  uint64_t v2 = v1;
  if (((*(uint64_t (**)(void))(*v1 + 208))() & 1) != 0)
  {
    uint64_t v4 = (uint64_t *)objc_msgSend(objc_allocWithZone(MEMORY[0x189603FA8]), sel_init);
    specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
    specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
    specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized ContiguousArray._endMutation()();
LABEL_5:
    uint64_t v7 = v2[5];
    a1[3] = (uint64_t *)&type metadata for _PlistDictionaryUnkeyedEncodingContainer;
    a1[4] = (uint64_t *)lazy protocol witness table accessor for type _PlistDictionaryUnkeyedEncodingContainer and conformance _PlistDictionaryUnkeyedEncodingContainer();
    *a1 = v2;
    a1[1] = v4;
    a1[2] = (uint64_t *)v7;
    swift_retain();
    swift_retain();
    return;
  }

  uint64_t v5 = specialized BidirectionalCollection.last.getter(v1[2]);
  if (v5)
  {
    uint64_t v6 = v5;
    objc_opt_self();
    uint64_t v4 = (uint64_t *)swift_dynamicCastObjCClass();
    if (v4) {
      goto LABEL_5;
    }
  }

  __break(1u);
}

uint64_t __PlistDictionaryEncoder.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for __PlistDictionaryEncoder()
{
  return objc_opt_self();
}

void protocol witness for Encoder.container<A>(keyedBy:) in conformance __PlistDictionaryEncoder( uint64_t a1, uint64_t a2, uint64_t a3)
{
}

void protocol witness for Encoder.unkeyedContainer() in conformance __PlistDictionaryEncoder( uint64_t **a1@<X8>)
{
}

uint64_t protocol witness for Encoder.singleValueContainer() in conformance __PlistDictionaryEncoder@<X0>( void *a1@<X8>)
{
  uint64_t v3 = *v1;
  a1[3] = type metadata accessor for __PlistDictionaryEncoder();
  a1[4] = lazy protocol witness table accessor for type _FTSSequence.Iterator and conformance _FTSSequence.Iterator( &lazy protocol witness table cache variable for type __PlistDictionaryEncoder and conformance __PlistDictionaryEncoder,  type metadata accessor for __PlistDictionaryEncoder,  (uint64_t)&protocol conformance descriptor for __PlistDictionaryEncoder);
  *a1 = v3;
  return swift_retain();
}

uint64_t _PlistDictionaryKeyedEncodingContainer.encodeNil(forKey:)()
{
  uint64_t v1 = *(void **)(v0 + 8);
  uint64_t v2 = dispatch thunk of CodingKey.stringValue.getter();
  uint64_t v4 = v3;
  if (one-time initialization token for _plistNullNSString != -1) {
    swift_once();
  }
  Class isa = _plistNullNSString.super.isa;
  swift_bridgeObjectRetain();
  objc_msgSend( v1,  sel___swift_setObject_forKeyedSubscript_,  isa,  _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)(),  v2,  v4);
  swift_bridgeObjectRelease();
  return swift_unknownObjectRelease();
}

uint64_t _PlistDictionaryKeyedEncodingContainer.encode(_:forKey:)(char a1)
{
  uint64_t v3 = *(void **)(v1 + 8);
  uint64_t v4 = dispatch thunk of CodingKey.stringValue.getter();
  uint64_t v6 = v5;
  id v7 = objc_msgSend(objc_allocWithZone((Class)NSNumber), sel_initWithBool_, a1 & 1);
  swift_bridgeObjectRetain();
  objc_msgSend( v3,  sel___swift_setObject_forKeyedSubscript_,  v7,  _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)(),  v4,  v6);
  swift_bridgeObjectRelease();

  return swift_unknownObjectRelease();
}

{
  uint64_t v1;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  id v7;
  uint64_t v3 = *(void **)(v1 + 8);
  uint64_t v4 = dispatch thunk of CodingKey.stringValue.getter();
  uint64_t v6 = v5;
  id v7 = objc_msgSend(objc_allocWithZone((Class)NSNumber), sel_initWithChar_, a1);
  swift_bridgeObjectRetain();
  objc_msgSend( v3,  sel___swift_setObject_forKeyedSubscript_,  v7,  _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)(),  v4,  v6);
  swift_bridgeObjectRelease();

  return swift_unknownObjectRelease();
}

uint64_t _PlistDictionaryKeyedEncodingContainer.encode(_:forKey:)(__int16 a1)
{
  uint64_t v3 = *(void **)(v1 + 8);
  uint64_t v4 = dispatch thunk of CodingKey.stringValue.getter();
  uint64_t v6 = v5;
  id v7 = objc_msgSend(objc_allocWithZone((Class)NSNumber), sel_initWithShort_, a1);
  swift_bridgeObjectRetain();
  objc_msgSend( v3,  sel___swift_setObject_forKeyedSubscript_,  v7,  _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)(),  v4,  v6);
  swift_bridgeObjectRelease();

  return swift_unknownObjectRelease();
}

uint64_t _PlistDictionaryKeyedEncodingContainer.encode(_:forKey:)(unsigned __int8 a1)
{
  uint64_t v3 = *(void **)(v1 + 8);
  uint64_t v4 = dispatch thunk of CodingKey.stringValue.getter();
  uint64_t v6 = v5;
  id v7 = objc_msgSend(objc_allocWithZone((Class)NSNumber), sel_initWithUnsignedChar_, a1);
  swift_bridgeObjectRetain();
  objc_msgSend( v3,  sel___swift_setObject_forKeyedSubscript_,  v7,  _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)(),  v4,  v6);
  swift_bridgeObjectRelease();

  return swift_unknownObjectRelease();
}

uint64_t _PlistDictionaryKeyedEncodingContainer.encode(_:forKey:)(unsigned __int16 a1)
{
  uint64_t v3 = *(void **)(v1 + 8);
  uint64_t v4 = dispatch thunk of CodingKey.stringValue.getter();
  uint64_t v6 = v5;
  id v7 = objc_msgSend(objc_allocWithZone((Class)NSNumber), sel_initWithUnsignedShort_, a1);
  swift_bridgeObjectRetain();
  objc_msgSend( v3,  sel___swift_setObject_forKeyedSubscript_,  v7,  _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)(),  v4,  v6);
  swift_bridgeObjectRelease();

  return swift_unknownObjectRelease();
}

uint64_t _PlistDictionaryKeyedEncodingContainer.encode(_:forKey:)( uint64_t a1, uint64_t a2, uint64_t a3, SEL *a4)
{
  id v7 = *(void **)(v4 + 8);
  uint64_t v8 = dispatch thunk of CodingKey.stringValue.getter();
  uint64_t v10 = v9;
  id v11 = objc_msgSend(objc_allocWithZone((Class)NSNumber), *a4, a1);
  swift_bridgeObjectRetain();
  objc_msgSend( v7,  sel___swift_setObject_forKeyedSubscript_,  v11,  _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)(),  v8,  v10);
  swift_bridgeObjectRelease();

  return swift_unknownObjectRelease();
}

uint64_t _PlistDictionaryKeyedEncodingContainer.encode(_:forKey:)()
{
  uint64_t v1 = *(void **)(v0 + 8);
  uint64_t v2 = dispatch thunk of CodingKey.stringValue.getter();
  uint64_t v4 = v3;
  id v5 = objc_msgSend( objc_allocWithZone((Class)NSString),  sel_initWithString_,  String._bridgeToObjectiveCImpl()());
  swift_unknownObjectRelease();
  swift_bridgeObjectRetain();
  objc_msgSend( v1,  sel___swift_setObject_forKeyedSubscript_,  v5,  _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)(),  v2,  v4);
  swift_bridgeObjectRelease();

  return swift_unknownObjectRelease();
}

uint64_t _PlistDictionaryKeyedEncodingContainer.encode(_:forKey:)(float a1)
{
  uint64_t v3 = *(void **)(v1 + 8);
  uint64_t v4 = dispatch thunk of CodingKey.stringValue.getter();
  uint64_t v6 = v5;
  id v7 = objc_allocWithZone((Class)&OBJC_CLASS___NSNumber);
  *(float *)&double v8 = a1;
  id v9 = objc_msgSend(v7, sel_initWithFloat_, v8);
  swift_bridgeObjectRetain();
  objc_msgSend( v3,  sel___swift_setObject_forKeyedSubscript_,  v9,  _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)(),  v4,  v6);
  swift_bridgeObjectRelease();

  return swift_unknownObjectRelease();
}

uint64_t _PlistDictionaryKeyedEncodingContainer.encode(_:forKey:)(double a1)
{
  uint64_t v3 = *(void **)(v1 + 8);
  uint64_t v4 = dispatch thunk of CodingKey.stringValue.getter();
  uint64_t v6 = v5;
  id v7 = objc_msgSend(objc_allocWithZone((Class)NSNumber), sel_initWithDouble_, a1);
  swift_bridgeObjectRetain();
  objc_msgSend( v3,  sel___swift_setObject_forKeyedSubscript_,  v7,  _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)(),  v4,  v6);
  swift_bridgeObjectRelease();

  return swift_unknownObjectRelease();
}

void _PlistDictionaryKeyedEncodingContainer.encode<A>(_:forKey:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v11 = *(void *)(a3 + 16);
  uint64_t v31 = type metadata accessor for Optional();
  uint64_t v12 = *(void *)(v31 - 8);
  MEMORY[0x1895F8858](v31);
  uint64_t v14 = (char *)&v27 - v13;
  uint64_t v28 = v5;
  uint64_t v15 = *v5;
  __int128 v30[3] = a4;
  _OWORD v30[4] = a5;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v30);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(a4 - 8) + 16LL))(boxed_opaque_existential_1, a1, a4);
  unint64_t v17 = *(void *)(v15 + 40);
  uint64_t v18 = *(void *)(v11 - 8);
  uint64_t v19 = *(void (**)(char *, uint64_t, uint64_t))(v18 + 16);
  uint64_t v27 = a2;
  v19(v14, a2, v11);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v18 + 56))(v14, 0LL, 1LL, v11);
  uint64_t v20 = *(void *)(a3 + 24);
  swift_retain();
  uint64_t v21 = v29;
  id v22 = __PlistDictionaryEncoder.box<A>(_:for:_:)(v30, v17, (uint64_t)v14, v11, v20);
  if (v21)
  {
    (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v31);
    swift_release();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v30);
  }

  else
  {
    uint64_t v23 = v22;
    (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v31);
    swift_release();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v30);
    uint64_t v24 = (void *)v28[1];
    v30[0] = dispatch thunk of CodingKey.stringValue.getter();
    v30[1] = v25;
    id v26 = v23;
    swift_bridgeObjectRetain();
    objc_msgSend(v24, sel___swift_setObject_forKeyedSubscript_, v26, _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)());
    swift_bridgeObjectRelease();
    swift_unknownObjectRelease();
  }

id specialized __PlistDictionaryEncoder.box<A>(_:for:_:)( uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6)
{
  __int128 v25 = *(_OWORD *)(a1 + 24);
  uint64_t v12 = __swift_project_boxed_opaque_existential_1((void *)a1, v25);
  uint64_t v13 = swift_dynamicCastMetatype();
  if (v13)
  {
    __n128 v14 = MEMORY[0x1895F8858](v13);
    (*(void (**)(char *, void *, void, __n128))(v16 + 16))( (char *)&v25 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL),  v12,  v25,  v14);
    unint64_t v17 = &lazy cache variable for type metadata for NSDate;
LABEL_5:
    type metadata accessor for NSMorphologyPronoun(0LL, v17);
    swift_dynamicCast();
    return (id)v26;
  }

  uint64_t v18 = swift_dynamicCastMetatype();
  if (v18)
  {
    __n128 v19 = MEMORY[0x1895F8858](v18);
    (*(void (**)(char *, void *, void, __n128))(v21 + 16))( (char *)&v25 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0LL),  v12,  v25,  v19);
    unint64_t v17 = (unint64_t *)&lazy cache variable for type metadata for NSData;
    goto LABEL_5;
  }

  MEMORY[0x1895F8858](0LL);
  v23[1] = v25;
  uint64_t v24 = v12;
  id result = (id)specialized __PlistDictionaryEncoder._boxGeneric<A>(_:for:_:)( (void (*)(void *))partial apply for specialized closure #1 in __PlistDictionaryEncoder.boxGeneric<A, B>(_:for:_:),  (uint64_t)v23,  a2,  a3,  a4,  a5,  a6);
  if (!v6 && !result) {
    return objc_msgSend(objc_allocWithZone(MEMORY[0x189603F68]), sel_init);
  }
  return result;
}

id __PlistDictionaryEncoder.box<A>(_:for:_:)( void *a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10 = a1[3];
  uint64_t v11 = a1[4];
  uint64_t v12 = __swift_project_boxed_opaque_existential_1(a1, v10);
  uint64_t v13 = swift_dynamicCastMetatype();
  if (v13)
  {
    __n128 v14 = MEMORY[0x1895F8858](v13);
    (*(void (**)(char *, void *, uint64_t, __n128))(v16 + 16))( (char *)v24 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL),  v12,  v10,  v14);
    unint64_t v17 = &lazy cache variable for type metadata for NSDate;
LABEL_5:
    type metadata accessor for NSMorphologyPronoun(0LL, v17);
    swift_dynamicCast();
    return (id)v24[3];
  }

  uint64_t v18 = swift_dynamicCastMetatype();
  if (v18)
  {
    __n128 v19 = MEMORY[0x1895F8858](v18);
    (*(void (**)(char *, void *, uint64_t, __n128))(v21 + 16))( (char *)v24 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0LL),  v12,  v10,  v19);
    unint64_t v17 = (unint64_t *)&lazy cache variable for type metadata for NSData;
    goto LABEL_5;
  }

  v24[1] = v24;
  MEMORY[0x1895F8858](0LL);
  _OWORD v23[2] = v10;
  v23[3] = a4;
  v23[4] = v11;
  v23[5] = a5;
  v23[6] = v12;
  id result = (id)__PlistDictionaryEncoder._boxGeneric<A>(_:for:_:)( (void (*)(void *))partial apply for closure #1 in __PlistDictionaryEncoder.boxGeneric<A, B>(_:for:_:),  (uint64_t)v23,  a2,  a3,  a4,  a5);
  if (!v5 && !result) {
    return objc_msgSend(objc_allocWithZone(MEMORY[0x189603F68]), sel_init);
  }
  return result;
}

uint64_t _PlistDictionaryKeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  id v7 = v6;
  uint64_t v48 = a5;
  uint64_t v49 = a6;
  uint64_t v50 = a4;
  uint64_t v10 = *(void *)(a3 + 16);
  uint64_t v11 = *(void *)(v10 - 8);
  MEMORY[0x1895F8858](a1);
  uint64_t v47 = (char *)&v45 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = type metadata accessor for Optional();
  uint64_t v52 = *(void *)(v13 - 8);
  uint64_t v53 = v13;
  MEMORY[0x1895F8858](v13);
  uint64_t v15 = (char *)&v45 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v16);
  uint64_t v18 = (char *)&v45 - v17;
  uint64_t v19 = *(void *)(a3 + 24);
  uint64_t v51 = a2;
  uint64_t v46 = v19;
  uint64_t v20 = dispatch thunk of CodingKey.stringValue.getter();
  uint64_t v22 = v21;
  uint64_t v23 = (void *)v7[1];
  *(void *)&v55[0] = v20;
  *((void *)&v55[0] + 1) = v21;
  swift_bridgeObjectRetain_n();
  id v24 = objc_msgSend(v23, sel___swift_objectForKeyedSubscript_, _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)());
  swift_unknownObjectRelease();
  if (v24)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_bridgeObjectRelease();
    swift_unknownObjectRelease();
    outlined init with take of Any(v55, &v56);
    swift_bridgeObjectRelease();
    outlined init with copy of Any((uint64_t)&v56, (uint64_t)v55);
    type metadata accessor for NSMorphologyPronoun(0LL, &lazy cache variable for type metadata for NSMutableDictionary);
    uint64_t result = swift_dynamicCast();
    if (!(_DWORD)result) {
      goto LABEL_16;
    }

    outlined init with take of Any(&v56, v55);
    swift_dynamicCast();
    id v26 = v54;
  }

  else
  {
    swift_bridgeObjectRelease();
    id v27 = objc_msgSend(objc_allocWithZone(MEMORY[0x189603FC8]), sel_init);
    *(void *)&__int128 v56 = v20;
    *((void *)&v56 + 1) = v22;
    swift_bridgeObjectRetain();
    id v26 = v27;
    objc_msgSend(v23, sel___swift_setObject_forKeyedSubscript_, v26, _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)());
    swift_bridgeObjectRelease();

    swift_unknownObjectRelease();
  }

  uint64_t v28 = v52;
  uint64_t v29 = v53;
  uint64_t v30 = *v7;
  unint64_t v31 = v7[2];
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v18, v51, v10);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v18, 0LL, 1LL, v10);
  (*(void (**)(char *, char *, uint64_t))(v28 + 16))(v15, v18, v29);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v15, 1LL, v10) == 1)
  {
    uint64_t v32 = *(void (**)(char *, uint64_t))(v28 + 8);
    swift_retain();
    v32(v18, v29);
    v32(v15, v29);
    swift_retain();
LABEL_13:
    *(void *)&__int128 v56 = v30;
    *((void *)&v56 + 1) = v26;
    unint64_t v57 = v31;
    uint64_t v44 = type metadata accessor for _PlistDictionaryKeyedEncodingContainer(0LL, v50, v48, v33);
    MEMORY[0x186E20D4C](&protocol conformance descriptor for _PlistDictionaryKeyedEncodingContainer<A>, v44);
    return KeyedEncodingContainer.init<A>(_:)();
  }

  uint64_t v34 = *(void (**)(char *, char *, uint64_t))(v11 + 32);
  uint64_t v35 = v47;
  v34(v47, v15, v10);
  uint64_t v36 = v28;
  unint64_t v37 = (uint64_t *)swift_allocObject();
  uint64_t v38 = v46;
  v37[5] = v10;
  v37[6] = v38;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v37 + 2);
  v34((char *)boxed_opaque_existential_1, v35, v10);
  uint64_t v40 = *(void (**)(char *, uint64_t))(v36 + 8);
  swift_retain();
  v40(v18, v29);
  v37[7] = v31;
  if (v31 >> 62)
  {
    if (v31 >> 62 != 1)
    {
      uint64_t v43 = 1LL;
      goto LABEL_12;
    }

    unint64_t v41 = (uint64_t *)((v31 & 0x3FFFFFFFFFFFFFFFLL) + 32);
  }

  else
  {
    unint64_t v41 = (uint64_t *)(v31 + 64);
  }

  uint64_t v42 = *v41;
  uint64_t result = swift_retain();
  uint64_t v43 = v42 + 1;
  if (!__OFADD__(v42, 1LL))
  {
LABEL_12:
    v37[8] = v43;
    unint64_t v31 = (unint64_t)v37;
    goto LABEL_13;
  }

  __break(1u);
LABEL_16:
  __break(1u);
  return result;
}

unint64_t _PlistDictionaryKeyedEncodingContainer.nestedUnkeyedContainer(forKey:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v4 = v3;
  uint64_t v44 = a3;
  uint64_t v7 = *(void *)(a2 + 16);
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x1895F8858](a1);
  uint64_t v43 = (char *)&v41 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = type metadata accessor for Optional();
  uint64_t v46 = *(void *)(v10 - 8);
  uint64_t v47 = v10;
  MEMORY[0x1895F8858](v10);
  uint64_t v12 = (char *)&v41 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MEMORY[0x1895F8858](v13);
  uint64_t v15 = (char *)&v41 - v14;
  uint64_t v16 = *(void *)(a2 + 24);
  uint64_t v45 = a1;
  uint64_t v42 = v16;
  uint64_t v17 = dispatch thunk of CodingKey.stringValue.getter();
  uint64_t v19 = v18;
  uint64_t v20 = (void *)v4[1];
  *(void *)&v49[0] = v17;
  *((void *)&v49[0] + 1) = v18;
  swift_bridgeObjectRetain_n();
  id v21 = objc_msgSend(v20, sel___swift_objectForKeyedSubscript_, _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)());
  swift_unknownObjectRelease();
  if (v21)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_bridgeObjectRelease();
    swift_unknownObjectRelease();
    outlined init with take of Any(v49, v50);
    swift_bridgeObjectRelease();
    outlined init with copy of Any((uint64_t)v50, (uint64_t)v49);
    type metadata accessor for NSMorphologyPronoun(0LL, &lazy cache variable for type metadata for NSMutableArray);
    unint64_t result = swift_dynamicCast();
    if (!(_DWORD)result) {
      goto LABEL_16;
    }

    outlined init with take of Any(v50, v49);
    swift_dynamicCast();
    id v23 = v48;
  }

  else
  {
    swift_bridgeObjectRelease();
    id v24 = objc_msgSend(objc_allocWithZone(MEMORY[0x189603FA8]), sel_init);
    *(void *)&v50[0] = v17;
    *((void *)&v50[0] + 1) = v19;
    swift_bridgeObjectRetain();
    id v23 = v24;
    objc_msgSend(v20, sel___swift_setObject_forKeyedSubscript_, v23, _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)());
    swift_bridgeObjectRelease();

    swift_unknownObjectRelease();
  }

  uint64_t v25 = v46;
  uint64_t v26 = *v4;
  unint64_t v27 = v4[2];
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v15, v45, v7);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v8 + 56))(v15, 0LL, 1LL, v7);
  uint64_t v28 = v47;
  (*(void (**)(char *, char *, uint64_t))(v25 + 16))(v12, v15, v47);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v12, 1LL, v7) == 1)
  {
    uint64_t v29 = *(void (**)(char *, uint64_t))(v25 + 8);
    swift_retain();
    v29(v15, v28);
    v29(v12, v28);
    swift_retain();
LABEL_13:
    uint64_t v40 = v44;
    v44[3] = &type metadata for _PlistDictionaryUnkeyedEncodingContainer;
    unint64_t result = lazy protocol witness table accessor for type _PlistDictionaryUnkeyedEncodingContainer and conformance _PlistDictionaryUnkeyedEncodingContainer();
    _OWORD v40[4] = result;
    void *v40 = v26;
    v40[1] = v23;
    v40[2] = v27;
    return result;
  }

  uint64_t v30 = *(void (**)(char *, char *, uint64_t))(v8 + 32);
  unint64_t v31 = v43;
  v30(v43, v12, v7);
  uint64_t v32 = v25;
  uint64_t v33 = (uint64_t *)swift_allocObject();
  uint64_t v34 = v42;
  v33[5] = v7;
  _OWORD v33[6] = v34;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v33 + 2);
  v30((char *)boxed_opaque_existential_1, v31, v7);
  uint64_t v36 = *(void (**)(char *, uint64_t))(v32 + 8);
  swift_retain();
  v36(v15, v28);
  v33[7] = v27;
  if (v27 >> 62)
  {
    if (v27 >> 62 != 1)
    {
      uint64_t v39 = 1LL;
      goto LABEL_12;
    }

    unint64_t v37 = (uint64_t *)((v27 & 0x3FFFFFFFFFFFFFFFLL) + 32);
  }

  else
  {
    unint64_t v37 = (uint64_t *)(v27 + 64);
  }

  uint64_t v38 = *v37;
  unint64_t result = swift_retain();
  uint64_t v39 = v38 + 1;
  if (!__OFADD__(v38, 1LL))
  {
LABEL_12:
    v33[8] = v39;
    unint64_t v27 = (unint64_t)v33;
    goto LABEL_13;
  }

  __break(1u);
LABEL_16:
  __break(1u);
  return result;
}

uint64_t _PlistDictionaryKeyedEncodingContainer.superEncoder()@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v3 = (void *)v1[1];
  uint64_t v4 = *(void *)(*v1 + 40LL);
  uint64_t v5 = type metadata accessor for __PlistDictionaryReferencingEncoder();
  uint64_t v6 = swift_allocObject();
  swift_retain();
  id v7 = v3;
  uint64_t v8 = swift_retain();
  uint64_t v9 = specialized __PlistDictionaryReferencingEncoder.init(referencing:at:codingPathNode:wrapping:)( v8,  0x7265707573LL,  0xE500000000000000LL,  0LL,  0,  v4,  v7,  v6);
  a1[3] = v5;
  uint64_t result = lazy protocol witness table accessor for type _FTSSequence.Iterator and conformance _FTSSequence.Iterator( &lazy protocol witness table cache variable for type __PlistDictionaryReferencingEncoder and conformance __PlistDictionaryEncoder,  type metadata accessor for __PlistDictionaryReferencingEncoder,  (uint64_t)&protocol conformance descriptor for __PlistDictionaryEncoder);
  a1[4] = result;
  *a1 = v9;
  return result;
}

uint64_t _PlistDictionaryKeyedEncodingContainer.superEncoder(forKey:)@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v7 = *(void *)(a2 + 16);
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x1895F8858](a1);
  uint64_t v10 = (char *)&v18 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = *v3;
  id v19 = (id)v3[1];
  unint64_t v12 = *(void *)(v11 + 40);
  uint64_t v13 = type metadata accessor for __PlistDictionaryReferencingEncoder();
  uint64_t v14 = swift_allocObject();
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v10, a1, v7);
  uint64_t v15 = *(void *)(a2 + 24);
  swift_retain();
  swift_retain();
  uint64_t v16 = specialized __PlistDictionaryReferencingEncoder.init(referencing:at:codingPathNode:wrapping:)( v11,  (uint64_t)v10,  v12,  v19,  v14,  v7,  v15);
  a3[3] = v13;
  uint64_t result = lazy protocol witness table accessor for type _FTSSequence.Iterator and conformance _FTSSequence.Iterator( &lazy protocol witness table cache variable for type __PlistDictionaryReferencingEncoder and conformance __PlistDictionaryEncoder,  type metadata accessor for __PlistDictionaryReferencingEncoder,  (uint64_t)&protocol conformance descriptor for __PlistDictionaryEncoder);
  a3[4] = result;
  *a3 = v16;
  return result;
}

uint64_t protocol witness for KeyedEncodingContainerProtocol.encodeNil(forKey:) in conformance _PlistDictionaryKeyedEncodingContainer<A>()
{
  return _PlistDictionaryKeyedEncodingContainer.encodeNil(forKey:)();
}

uint64_t protocol witness for KeyedEncodingContainerProtocol.encode(_:forKey:) in conformance _PlistDictionaryKeyedEncodingContainer<A>( char a1)
{
  return _PlistDictionaryKeyedEncodingContainer.encode(_:forKey:)(a1);
}

{
  return _PlistDictionaryKeyedEncodingContainer.encode(_:forKey:)(a1);
}

uint64_t protocol witness for KeyedEncodingContainerProtocol.encode(_:forKey:) in conformance _PlistDictionaryKeyedEncodingContainer<A>()
{
  return _PlistDictionaryKeyedEncodingContainer.encode(_:forKey:)();
}

uint64_t protocol witness for KeyedEncodingContainerProtocol.encode(_:forKey:) in conformance _PlistDictionaryKeyedEncodingContainer<A>( double a1)
{
  return _PlistDictionaryKeyedEncodingContainer.encode(_:forKey:)(a1);
}

uint64_t protocol witness for KeyedEncodingContainerProtocol.encode(_:forKey:) in conformance _PlistDictionaryKeyedEncodingContainer<A>( float a1)
{
  return _PlistDictionaryKeyedEncodingContainer.encode(_:forKey:)(a1);
}

uint64_t protocol witness for KeyedEncodingContainerProtocol.encode(_:forKey:) in conformance _PlistDictionaryKeyedEncodingContainer<A>( uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _PlistDictionaryKeyedEncodingContainer.encode(_:forKey:)(a1, a2, a3, (SEL *)&selRef_initWithInteger_);
}

{
  return _PlistDictionaryKeyedEncodingContainer.encode(_:forKey:)(a1, a2, a3, (SEL *)&selRef_initWithInt_);
}

{
  return _PlistDictionaryKeyedEncodingContainer.encode(_:forKey:)(a1, a2, a3, (SEL *)&selRef_initWithLongLong_);
}

{
  return _PlistDictionaryKeyedEncodingContainer.encode(_:forKey:)(a1, a2, a3, (SEL *)&selRef_initWithUnsignedInteger_);
}

{
  return _PlistDictionaryKeyedEncodingContainer.encode(_:forKey:)(a1, a2, a3, (SEL *)&selRef_initWithUnsignedInt_);
}

{
  return _PlistDictionaryKeyedEncodingContainer.encode(_:forKey:)(a1, a2, a3, (SEL *)&selRef_initWithUnsignedLongLong_);
}

uint64_t protocol witness for KeyedEncodingContainerProtocol.encode(_:forKey:) in conformance _PlistDictionaryKeyedEncodingContainer<A>( __int16 a1)
{
  return _PlistDictionaryKeyedEncodingContainer.encode(_:forKey:)(a1);
}

uint64_t protocol witness for KeyedEncodingContainerProtocol.encode(_:forKey:) in conformance _PlistDictionaryKeyedEncodingContainer<A>( unsigned __int8 a1)
{
  return _PlistDictionaryKeyedEncodingContainer.encode(_:forKey:)(a1);
}

uint64_t protocol witness for KeyedEncodingContainerProtocol.encode(_:forKey:) in conformance _PlistDictionaryKeyedEncodingContainer<A>( unsigned __int16 a1)
{
  return _PlistDictionaryKeyedEncodingContainer.encode(_:forKey:)(a1);
}

void protocol witness for KeyedEncodingContainerProtocol.encode<A>(_:forKey:) in conformance _PlistDictionaryKeyedEncodingContainer<A>( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
}

uint64_t protocol witness for KeyedEncodingContainerProtocol.nestedContainer<A>(keyedBy:forKey:) in conformance _PlistDictionaryKeyedEncodingContainer<A>@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  return _PlistDictionaryKeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)(a1, a2, a5, a3, a4, a6);
}

void _PlistDictionaryUnkeyedEncodingContainer.encode<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _OWORD v16[4] = a3;
  uint64_t v5 = v4;
  uint64_t v6 = v3;
  uint64_t v9 = *v3;
  _OWORD v16[3] = a2;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v16);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(a2 - 8) + 16LL))(boxed_opaque_existential_1, a1, a2);
  unint64_t v11 = *(void *)(v9 + 40);
  unint64_t v12 = (void *)v6[1];
  swift_retain();
  id v13 = objc_msgSend(v12, sel_count);
  uint64_t v14 = v5;
  id v15 = specialized __PlistDictionaryEncoder.box<A>(_:for:_:)((uint64_t)v16, v11, (uint64_t)v13, 0LL, 0LL, 2);
  swift_release();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v16);
  if (!v14)
  {
    objc_msgSend((id)v6[1], sel_addObject_, v15);
  }

uint64_t _PlistDictionaryUnkeyedEncodingContainer.nestedContainer<A>(keyedBy:)( uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void **)(v3 + 8);
  id v7 = objc_msgSend(v6, sel_count);
  objc_msgSend(v6, sel_addObject_, objc_msgSend(objc_allocWithZone(MEMORY[0x189603FC8]), sel_init));
  unint64_t v8 = *(void *)(v3 + 16);
  uint64_t v9 = (void *)swift_allocObject();
  v9[5] = &type metadata for _CodingKey;
  v9[6] = lazy protocol witness table accessor for type _CodingKey and conformance _CodingKey();
  uint64_t result = swift_allocObject();
  v9[2] = result;
  *(void *)(result + 24) = 0LL;
  *(void *)(result + 32) = 0LL;
  *(void *)(result + 16) = v7;
  *(_BYTE *)(result + 40) = 2;
  v9[7] = v8;
  if (v8 >> 62)
  {
    uint64_t v12 = 0LL;
    if (v8 >> 62 != 1) {
      goto LABEL_6;
    }
    id v13 = (uint64_t *)((v8 & 0x3FFFFFFFFFFFFFFFLL) + 32);
  }

  else
  {
    id v13 = (uint64_t *)(v8 + 64);
  }

  uint64_t v12 = *v13;
  uint64_t result = swift_retain();
LABEL_6:
  if (__OFADD__(v12, 1LL))
  {
    __break(1u);
  }

  else
  {
    v9[8] = v12 + 1;
    uint64_t v14 = type metadata accessor for _PlistDictionaryKeyedEncodingContainer(0LL, a2, a3, v11);
    swift_retain();
    MEMORY[0x186E20D4C](&protocol conformance descriptor for _PlistDictionaryKeyedEncodingContainer<A>, v14);
    return KeyedEncodingContainer.init<A>(_:)();
  }

  return result;
}

uint64_t _PlistDictionaryUnkeyedEncodingContainer.nestedUnkeyedContainer()@<X0>(void *a1@<X8>)
{
  uint64_t v3 = (void *)v1[1];
  id v4 = objc_msgSend(v3, sel_count);
  id v5 = objc_msgSend(objc_allocWithZone(MEMORY[0x189603FA8]), sel_init);
  objc_msgSend(v3, sel_addObject_, v5);
  uint64_t v6 = *v1;
  unint64_t v7 = v1[2];
  unint64_t v8 = (void *)swift_allocObject();
  v8[5] = &type metadata for _CodingKey;
  v8[6] = lazy protocol witness table accessor for type _CodingKey and conformance _CodingKey();
  uint64_t result = swift_allocObject();
  v8[2] = result;
  *(void *)(result + 24) = 0LL;
  *(void *)(result + 32) = 0LL;
  *(void *)(result + 16) = v4;
  *(_BYTE *)(result + 40) = 2;
  v8[7] = v7;
  if (v7 >> 62)
  {
    uint64_t v10 = 0LL;
    if (v7 >> 62 != 1) {
      goto LABEL_6;
    }
    uint64_t v11 = (uint64_t *)((v7 & 0x3FFFFFFFFFFFFFFFLL) + 32);
  }

  else
  {
    uint64_t v11 = (uint64_t *)(v7 + 64);
  }

  uint64_t v10 = *v11;
  uint64_t result = swift_retain();
LABEL_6:
  if (__OFADD__(v10, 1LL))
  {
    __break(1u);
  }

  else
  {
    v8[8] = v10 + 1;
    a1[3] = &type metadata for _PlistDictionaryUnkeyedEncodingContainer;
    a1[4] = lazy protocol witness table accessor for type _PlistDictionaryUnkeyedEncodingContainer and conformance _PlistDictionaryUnkeyedEncodingContainer();
    *a1 = v6;
    a1[1] = v5;
    a1[2] = v8;
    return swift_retain();
  }

  return result;
}

id protocol witness for UnkeyedEncodingContainer.count.getter in conformance _PlistDictionaryUnkeyedEncodingContainer()
{
  return objc_msgSend(*(id *)(v0 + 8), sel_count);
}

id protocol witness for UnkeyedEncodingContainer.encodeNil() in conformance _PlistDictionaryUnkeyedEncodingContainer()
{
  uint64_t v1 = *(void **)(v0 + 8);
  if (one-time initialization token for _plistNullNSString != -1) {
    swift_once();
  }
  return objc_msgSend(v1, sel_addObject_, _plistNullNSString.super.isa);
}

void protocol witness for UnkeyedEncodingContainer.encode(_:) in conformance _PlistDictionaryUnkeyedEncodingContainer( char a1)
{
  uint64_t v2 = *(void **)(v1 + 8);
  id v3 = objc_msgSend(objc_allocWithZone((Class)NSNumber), sel_initWithBool_, a1 & 1);
  objc_msgSend(v2, sel_addObject_, v3);
}

{
  uint64_t v1;
  void *v2;
  id v3;
  uint64_t v2 = *(void **)(v1 + 8);
  id v3 = objc_msgSend(objc_allocWithZone((Class)NSNumber), sel_initWithChar_, a1);
  objc_msgSend(v2, sel_addObject_, v3);
}

void protocol witness for UnkeyedEncodingContainer.encode(_:) in conformance _PlistDictionaryUnkeyedEncodingContainer()
{
  uint64_t v1 = *(void **)(v0 + 8);
  id v2 = objc_msgSend( objc_allocWithZone((Class)NSString),  sel_initWithString_,  String._bridgeToObjectiveCImpl()());
  swift_unknownObjectRelease();
  objc_msgSend(v1, sel_addObject_, v2);
}

void protocol witness for UnkeyedEncodingContainer.encode(_:) in conformance _PlistDictionaryUnkeyedEncodingContainer( double a1)
{
  id v2 = *(void **)(v1 + 8);
  id v3 = objc_msgSend(objc_allocWithZone((Class)NSNumber), sel_initWithDouble_, a1);
  objc_msgSend(v2, sel_addObject_, v3);
}

void protocol witness for UnkeyedEncodingContainer.encode(_:) in conformance _PlistDictionaryUnkeyedEncodingContainer( float a1)
{
  id v3 = *(void **)(v1 + 8);
  id v4 = objc_allocWithZone((Class)&OBJC_CLASS___NSNumber);
  *(float *)&double v5 = a1;
  id v6 = objc_msgSend(v4, sel_initWithFloat_, v5);
  objc_msgSend(v3, sel_addObject_, v6);
}

void protocol witness for UnkeyedEncodingContainer.encode(_:) in conformance _PlistDictionaryUnkeyedEncodingContainer( uint64_t a1, uint64_t a2, uint64_t a3)
{
}

{
  protocol witness for UnkeyedEncodingContainer.encode(_:) in conformance _PlistDictionaryUnkeyedEncodingContainer( a1,  a2,  a3,  (SEL *)&selRef_initWithInt_);
}

{
  protocol witness for UnkeyedEncodingContainer.encode(_:) in conformance _PlistDictionaryUnkeyedEncodingContainer( a1,  a2,  a3,  (SEL *)&selRef_initWithLongLong_);
}

{
  protocol witness for UnkeyedEncodingContainer.encode(_:) in conformance _PlistDictionaryUnkeyedEncodingContainer( a1,  a2,  a3,  (SEL *)&selRef_initWithUnsignedInteger_);
}

{
  protocol witness for UnkeyedEncodingContainer.encode(_:) in conformance _PlistDictionaryUnkeyedEncodingContainer( a1,  a2,  a3,  (SEL *)&selRef_initWithUnsignedInt_);
}

{
  protocol witness for UnkeyedEncodingContainer.encode(_:) in conformance _PlistDictionaryUnkeyedEncodingContainer( a1,  a2,  a3,  (SEL *)&selRef_initWithUnsignedLongLong_);
}

void protocol witness for UnkeyedEncodingContainer.encode(_:) in conformance _PlistDictionaryUnkeyedEncodingContainer( __int16 a1)
{
  id v2 = *(void **)(v1 + 8);
  id v3 = objc_msgSend(objc_allocWithZone((Class)NSNumber), sel_initWithShort_, a1);
  objc_msgSend(v2, sel_addObject_, v3);
}

void protocol witness for UnkeyedEncodingContainer.encode(_:) in conformance _PlistDictionaryUnkeyedEncodingContainer( unsigned __int8 a1)
{
  id v2 = *(void **)(v1 + 8);
  id v3 = objc_msgSend(objc_allocWithZone((Class)NSNumber), sel_initWithUnsignedChar_, a1);
  objc_msgSend(v2, sel_addObject_, v3);
}

void protocol witness for UnkeyedEncodingContainer.encode(_:) in conformance _PlistDictionaryUnkeyedEncodingContainer( unsigned __int16 a1)
{
  id v2 = *(void **)(v1 + 8);
  id v3 = objc_msgSend(objc_allocWithZone((Class)NSNumber), sel_initWithUnsignedShort_, a1);
  objc_msgSend(v2, sel_addObject_, v3);
}

void protocol witness for UnkeyedEncodingContainer.encode(_:) in conformance _PlistDictionaryUnkeyedEncodingContainer( uint64_t a1, uint64_t a2, uint64_t a3, SEL *a4)
{
  double v5 = *(void **)(v4 + 8);
  id v6 = objc_msgSend(objc_allocWithZone((Class)NSNumber), *a4, a1);
  objc_msgSend(v5, sel_addObject_, v6);
}

void protocol witness for UnkeyedEncodingContainer.encode<A>(_:) in conformance _PlistDictionaryUnkeyedEncodingContainer( uint64_t a1, uint64_t a2, uint64_t a3)
{
}

uint64_t protocol witness for UnkeyedEncodingContainer.superEncoder() in conformance _PlistDictionaryUnkeyedEncodingContainer@<X0>( uint64_t *a1@<X8>)
{
  uint64_t v4 = *v1;
  id v3 = (void *)v1[1];
  swift_retain();
  id v5 = objc_msgSend(v3, sel_count);
  unint64_t v6 = *(void *)(v4 + 40);
  uint64_t v7 = type metadata accessor for __PlistDictionaryReferencingEncoder();
  uint64_t v8 = swift_allocObject();
  swift_retain();
  __PlistDictionaryReferencingEncoder.init(referencing:at:codingPathNode:wrapping:)( v4,  (uint64_t)v5,  v6,  (uint64_t)v3);
  a1[3] = v7;
  uint64_t result = lazy protocol witness table accessor for type _FTSSequence.Iterator and conformance _FTSSequence.Iterator( &lazy protocol witness table cache variable for type __PlistDictionaryReferencingEncoder and conformance __PlistDictionaryEncoder,  type metadata accessor for __PlistDictionaryReferencingEncoder,  (uint64_t)&protocol conformance descriptor for __PlistDictionaryEncoder);
  a1[4] = result;
  *a1 = v8;
  return result;
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> __PlistDictionaryEncoder.encode(_:)( Swift::String a1)
{
  if (((*(uint64_t (**)(void))(*(void *)v1 + 208LL))() & 1) != 0)
  {
    id v2 = objc_msgSend( objc_allocWithZone((Class)NSString),  sel_initWithString_,  String._bridgeToObjectiveCImpl()());
    swift_unknownObjectRelease();
    id v3 = v2;
    specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
    specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
    specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized ContiguousArray._endMutation()();
  }

  else
  {
    __break(1u);
  }

void __PlistDictionaryEncoder.encode<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = v4;
  if (((*(uint64_t (**)(void))(*v3 + 208LL))() & 1) != 0)
  {
    _OWORD v13[3] = a2;
    _OWORD v13[4] = a3;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v13);
    (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(a2 - 8) + 16LL))( boxed_opaque_existential_1,  a1,  a2);
    unint64_t v10 = v3[5];
    swift_retain();
    id v11 = specialized __PlistDictionaryEncoder.box<A>(_:for:_:)((uint64_t)v13, v10, 0LL, 0LL, 0LL, 255);
    swift_release();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v13);
    if (!v5)
    {
      id v12 = v11;
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
    }
  }

  else
  {
    __break(1u);
  }

void protocol witness for SingleValueEncodingContainer.encodeNil() in conformance __PlistDictionaryEncoder()
{
  if (((*(uint64_t (**)(void))(**(void **)v0 + 208LL))() & 1) == 0)
  {
    __break(1u);
    goto LABEL_5;
  }

  if (one-time initialization token for _plistNullNSString != -1) {
LABEL_5:
  }
    swift_once();
  uint64_t v1 = _plistNullNSString.super.isa;
  specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
  specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
  specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized ContiguousArray._endMutation()();
}

void protocol witness for SingleValueEncodingContainer.encode(_:) in conformance __PlistDictionaryEncoder( char a1)
{
  if (((*(uint64_t (**)(void))(**(void **)v1 + 208LL))() & 1) != 0)
  {
    id v3 = objc_msgSend(objc_allocWithZone((Class)NSNumber), sel_initWithBool_, a1 & 1);
    specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
    specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
    specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized ContiguousArray._endMutation()();
  }

  else
  {
    __break(1u);
  }

{
  uint64_t v1;
  id v3;
  if (((*(uint64_t (**)(void))(**(void **)v1 + 208LL))() & 1) != 0)
  {
    id v3 = objc_msgSend(objc_allocWithZone((Class)NSNumber), sel_initWithChar_, a1);
    specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
    specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
    specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized ContiguousArray._endMutation()();
  }

  else
  {
    __break(1u);
  }

void protocol witness for SingleValueEncodingContainer.encode(_:) in conformance __PlistDictionaryEncoder( uint64_t a1, uint64_t a2)
{
}

void protocol witness for SingleValueEncodingContainer.encode(_:) in conformance __PlistDictionaryEncoder( double a1)
{
  if (((*(uint64_t (**)(void))(**(void **)v1 + 208LL))() & 1) != 0)
  {
    id v3 = objc_msgSend(objc_allocWithZone((Class)NSNumber), sel_initWithDouble_, a1);
    specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
    specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
    specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized ContiguousArray._endMutation()();
  }

  else
  {
    __break(1u);
  }

void protocol witness for SingleValueEncodingContainer.encode(_:) in conformance __PlistDictionaryEncoder( float a1)
{
  if (((*(uint64_t (**)(void))(**(void **)v1 + 208LL))() & 1) != 0)
  {
    id v3 = objc_allocWithZone((Class)&OBJC_CLASS___NSNumber);
    *(float *)&double v4 = a1;
    id v5 = objc_msgSend(v3, sel_initWithFloat_, v4);
    specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
    specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
    specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized ContiguousArray._endMutation()();
  }

  else
  {
    __break(1u);
  }

void protocol witness for SingleValueEncodingContainer.encode(_:) in conformance __PlistDictionaryEncoder( uint64_t a1, uint64_t a2, uint64_t a3)
{
}

{
  protocol witness for SingleValueEncodingContainer.encode(_:) in conformance __PlistDictionaryEncoder( a1,  a2,  a3,  (SEL *)&selRef_initWithInt_);
}

{
  protocol witness for SingleValueEncodingContainer.encode(_:) in conformance __PlistDictionaryEncoder( a1,  a2,  a3,  (SEL *)&selRef_initWithLongLong_);
}

{
  protocol witness for SingleValueEncodingContainer.encode(_:) in conformance __PlistDictionaryEncoder( a1,  a2,  a3,  (SEL *)&selRef_initWithUnsignedInteger_);
}

{
  protocol witness for SingleValueEncodingContainer.encode(_:) in conformance __PlistDictionaryEncoder( a1,  a2,  a3,  (SEL *)&selRef_initWithUnsignedInt_);
}

{
  protocol witness for SingleValueEncodingContainer.encode(_:) in conformance __PlistDictionaryEncoder( a1,  a2,  a3,  (SEL *)&selRef_initWithUnsignedLongLong_);
}

void protocol witness for SingleValueEncodingContainer.encode(_:) in conformance __PlistDictionaryEncoder( __int16 a1)
{
  if (((*(uint64_t (**)(void))(**(void **)v1 + 208LL))() & 1) != 0)
  {
    id v3 = objc_msgSend(objc_allocWithZone((Class)NSNumber), sel_initWithShort_, a1);
    specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
    specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
    specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized ContiguousArray._endMutation()();
  }

  else
  {
    __break(1u);
  }

void protocol witness for SingleValueEncodingContainer.encode(_:) in conformance __PlistDictionaryEncoder( unsigned __int8 a1)
{
  if (((*(uint64_t (**)(void))(**(void **)v1 + 208LL))() & 1) != 0)
  {
    id v3 = objc_msgSend(objc_allocWithZone((Class)NSNumber), sel_initWithUnsignedChar_, a1);
    specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
    specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
    specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized ContiguousArray._endMutation()();
  }

  else
  {
    __break(1u);
  }

void protocol witness for SingleValueEncodingContainer.encode(_:) in conformance __PlistDictionaryEncoder( unsigned __int16 a1)
{
  if (((*(uint64_t (**)(void))(**(void **)v1 + 208LL))() & 1) != 0)
  {
    id v3 = objc_msgSend(objc_allocWithZone((Class)NSNumber), sel_initWithUnsignedShort_, a1);
    specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
    specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
    specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized ContiguousArray._endMutation()();
  }

  else
  {
    __break(1u);
  }

void protocol witness for SingleValueEncodingContainer.encode(_:) in conformance __PlistDictionaryEncoder( uint64_t a1, uint64_t a2, uint64_t a3, SEL *a4)
{
  if (((*(uint64_t (**)(void))(**(void **)v4 + 208LL))() & 1) != 0)
  {
    id v7 = objc_msgSend(objc_allocWithZone((Class)NSNumber), *a4, a1);
    specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
    specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
    specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized ContiguousArray._endMutation()();
  }

  else
  {
    __break(1u);
  }

void protocol witness for SingleValueEncodingContainer.encode<A>(_:) in conformance __PlistDictionaryEncoder( uint64_t a1, uint64_t a2, uint64_t a3)
{
}

uint64_t specialized closure #1 in __PlistDictionaryEncoder.boxGeneric<A, B>(_:for:_:)(uint64_t a1)
{
  v3[3] = type metadata accessor for __PlistDictionaryEncoder();
  v3[4] = lazy protocol witness table accessor for type _FTSSequence.Iterator and conformance _FTSSequence.Iterator( &lazy protocol witness table cache variable for type __PlistDictionaryEncoder and conformance __PlistDictionaryEncoder,  type metadata accessor for __PlistDictionaryEncoder,  (uint64_t)&protocol conformance descriptor for __PlistDictionaryEncoder);
  v3[0] = a1;
  swift_retain();
  dispatch thunk of Encodable.encode(to:)();
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v3);
}

uint64_t closure #1 in __PlistDictionaryEncoder.boxGeneric<A, B>(_:for:_:)(uint64_t a1)
{
  v3[3] = type metadata accessor for __PlistDictionaryEncoder();
  v3[4] = lazy protocol witness table accessor for type _FTSSequence.Iterator and conformance _FTSSequence.Iterator( &lazy protocol witness table cache variable for type __PlistDictionaryEncoder and conformance __PlistDictionaryEncoder,  type metadata accessor for __PlistDictionaryEncoder,  (uint64_t)&protocol conformance descriptor for __PlistDictionaryEncoder);
  v3[0] = a1;
  swift_retain();
  dispatch thunk of Encodable.encode(to:)();
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v3);
}

uint64_t specialized __PlistDictionaryEncoder._boxGeneric<A>(_:for:_:)( void (*a1)(void *), uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, char a7)
{
  uint64_t v9 = v7;
  id v15 = a1;
  uint64_t v16 = v9 + 2;
  unint64_t v31 = *(void *)(v9[2] + 16LL);
  if (a7 != -1)
  {
    uint64_t v30 = a1;
    uint64_t v29 = v8;
    uint64_t v17 = (void *)swift_allocObject();
    v17[5] = &type metadata for _CodingKey;
    void v17[6] = lazy protocol witness table accessor for type _CodingKey and conformance _CodingKey();
    uint64_t v18 = swift_allocObject();
    void v17[2] = v18;
    *(void *)(v18 + 16) = a4;
    *(void *)(v18 + 24) = a5;
    *(void *)(v18 + 32) = a6;
    *(_BYTE *)(v18 + 40) = a7;
    v17[7] = a3;
    uint64_t v28 = a4;
    uint64_t v19 = a5;
    if (a3 >> 62)
    {
      if (a3 >> 62 != 1)
      {
        uint64_t v24 = a6;
        uint64_t v23 = 1LL;
LABEL_10:
        v17[8] = v23;
        uint64_t v21 = v9[5];
        uint64_t v22 = v9[6];
        v9[5] = v17;
        uint64_t v16 = v9 + 2;
LABEL_11:
        outlined copy of _CodingKey?(v28, v19, v24, a7);
        uint64_t v8 = v29;
        goto LABEL_12;
      }

      uint64_t v20 = (uint64_t *)((a3 & 0x3FFFFFFFFFFFFFFFLL) + 32);
    }

    else
    {
      uint64_t v20 = (uint64_t *)(a3 + 64);
    }

    uint64_t v24 = a6;
    uint64_t v25 = *v20;
    swift_retain();
    uint64_t v23 = v25 + 1;
    if (__OFADD__(v25, 1LL))
    {
      __break(1u);
      return 0LL;
    }

    goto LABEL_10;
  }

  uint64_t v21 = v9[5];
  uint64_t v22 = v9[6];
  v9[5] = a3;
  if (!(a3 >> 62))
  {
    uint64_t v28 = a4;
    uint64_t v29 = v8;
    uint64_t v19 = a5;
    uint64_t v24 = a6;
    uint64_t v30 = a1;
    uint64_t v23 = *(void *)(a3 + 64);
    swift_retain();
    goto LABEL_11;
  }

  if (a3 >> 62 == 1)
  {
    uint64_t v30 = a1;
    uint64_t v23 = *(void *)(a3 + 32);
    swift_retain();
LABEL_12:
    swift_retain();
    id v15 = v30;
    goto LABEL_13;
  }

  uint64_t v23 = 0LL;
LABEL_13:
  v9[6] = v23;
  v15(v9);
  if (v8)
  {
    v9[5] = v21;
    swift_retain();
    swift_release();
    v9[6] = v22;
    swift_release();
    swift_release();
    if (v31 < *(void *)(v9[2] + 16LL))
    {
      uint64_t v26 = (void *)specialized ContiguousArray._customRemoveLast()();
      if (!v26) {
        uint64_t v26 = (void *)specialized ContiguousArray.remove(at:)(*(void *)(*v16 + 16LL) - 1LL);
      }
    }

    return swift_willThrow();
  }

  v9[5] = v21;
  swift_retain();
  swift_release();
  v9[6] = v22;
  swift_release();
  swift_release();
  if (v31 >= *(void *)(v9[2] + 16LL)) {
    return 0LL;
  }
  uint64_t result = specialized ContiguousArray._customRemoveLast()();
  if (!result) {
    return specialized ContiguousArray.remove(at:)(*(void *)(*v16 + 16LL) - 1LL);
  }
  return result;
}

uint64_t __PlistDictionaryEncoder._boxGeneric<A>(_:for:_:)( void (*a1)(void *), uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  id v48 = a1;
  id v7 = v6;
  uint64_t v46 = a6;
  uint64_t v47 = a2;
  unint64_t v51 = a3;
  uint64_t v10 = *(void *)(a5 - 8);
  MEMORY[0x1895F8858](a1);
  uint64_t v45 = (char *)&v43 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = type metadata accessor for Optional();
  uint64_t v13 = *(void *)(v12 - 8);
  MEMORY[0x1895F8858](v12);
  id v15 = (char *)&v43 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __n128 v17 = MEMORY[0x1895F8858](v16);
  uint64_t v19 = (char *)&v43 - v18;
  uint64_t v20 = v7[2];
  uint64_t v44 = v7 + 2;
  unint64_t v50 = *(void *)(v20 + 16);
  uint64_t v21 = *(void (**)(char *, uint64_t, uint64_t, __n128))(v13 + 16);
  v21((char *)&v43 - v18, a4, v12, v17);
  ((void (*)(char *, char *, uint64_t))v21)(v15, v19, v12);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v15, 1LL, a5) != 1)
  {
    uint64_t v28 = *(void (**)(char *, char *, uint64_t))(v10 + 32);
    uint64_t v29 = v45;
    v28(v45, v15, a5);
    uint64_t v30 = (uint64_t *)swift_allocObject();
    uint64_t v31 = v46;
    uint64_t v30[5] = a5;
    v30[6] = v31;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v30 + 2);
    v28((char *)boxed_opaque_existential_1, v29, a5);
    uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v13 + 8))(v19, v12);
    unint64_t v34 = v51;
    v30[7] = v51;
    unint64_t v35 = v34 >> 62;
    if (v34 >> 62)
    {
      if ((_DWORD)v35 != 1)
      {
        uint64_t v27 = 1LL;
        if (!__OFSUB__((_DWORD)v35, 1)) {
          goto LABEL_12;
        }
        goto LABEL_27;
      }

      uint64_t v36 = (uint64_t *)((v34 & 0x3FFFFFFFFFFFFFFFLL) + 32);
    }

    else
    {
      uint64_t v36 = (uint64_t *)(v34 + 64);
    }

    uint64_t v37 = *v36;
    uint64_t result = swift_retain();
    BOOL v38 = __OFADD__(v37, 1LL);
    uint64_t v27 = v37 + 1;
    if (!v38)
    {
LABEL_12:
      v30[8] = v27;
      uint64_t v24 = v7[5];
      uint64_t v23 = v7[6];
      v7[5] = v30;
      goto LABEL_13;
    }

uint64_t __PlistDictionaryReferencingEncoder.init(referencing:at:codingPathNode:wrapping:)( uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  *(void *)(v4 + 56) = a1;
  *(void *)(v4 + 64) = a4;
  *(void *)(v4 + 72) = a2;
  *(void *)(v4 + 80) = 0LL;
  *(_BYTE *)(v4 + 88) = 0;
  uint64_t v8 = *(void *)(a1 + 24);
  uint64_t v7 = *(void *)(a1 + 32);
  uint64_t v9 = (void *)swift_allocObject();
  v9[5] = &type metadata for _CodingKey;
  v9[6] = lazy protocol witness table accessor for type _CodingKey and conformance _CodingKey();
  uint64_t result = swift_allocObject();
  v9[2] = result;
  *(void *)(result + 24) = 0LL;
  *(void *)(result + 32) = 0LL;
  *(void *)(result + 16) = a2;
  *(_BYTE *)(result + 40) = 2;
  unint64_t v11 = a3 >> 62;
  v9[7] = a3;
  if (a3 >> 62)
  {
    uint64_t v12 = 0LL;
    if ((_DWORD)v11 != 1) {
      goto LABEL_6;
    }
    uint64_t v13 = (uint64_t *)((a3 & 0x3FFFFFFFFFFFFFFFLL) + 32);
  }

  else
  {
    uint64_t v13 = (uint64_t *)(a3 + 64);
  }

  uint64_t v12 = *v13;
  uint64_t result = swift_retain();
LABEL_6:
  if (__OFADD__(v12, 1LL))
  {
    __break(1u);
  }

  else
  {
    v9[8] = v12 + 1;
    if ((_DWORD)v11)
    {
      if ((_DWORD)v11 == 1)
      {
        uint64_t v14 = *(void *)(a3 + 32);
        swift_bridgeObjectRetain();
        swift_release();
      }

      else
      {
        swift_bridgeObjectRetain();
        uint64_t v14 = 0LL;
      }
    }

    else
    {
      uint64_t v14 = *(void *)(a3 + 64);
      swift_bridgeObjectRetain();
      swift_release();
    }

    *(void *)(v4 + 16) = MEMORY[0x18961AFE8];
    *(void *)(v4 + 24) = v8;
    *(void *)(v4 + 32) = v7;
    *(void *)(v4 + 40) = v9;
    *(void *)(v4 + 48) = v14;
    return v4;
  }

  return result;
}

BOOL __PlistDictionaryReferencingEncoder.canEncodeNewValue.getter()
{
  uint64_t v1 = *(void *)(v0[2] + 16LL);
  unint64_t v2 = v0[5];
  swift_retain();
  uint64_t v3 = _CodingPathNode.path.getter(v2);
  swift_release();
  uint64_t v4 = *(void *)(v3 + 16);
  swift_bridgeObjectRelease();
  unint64_t v5 = *(void *)(v0[7] + 40LL);
  swift_retain();
  uint64_t v6 = _CodingPathNode.path.getter(v5);
  swift_release();
  uint64_t v7 = *(void *)(v6 + 16);
  swift_bridgeObjectRelease();
  return v1 == v4 + ~v7;
}

void __PlistDictionaryReferencingEncoder.__ivar_destroyer()
{
}

uint64_t __PlistDictionaryReferencingEncoder.deinit()
{
  uint64_t v1 = v0;
  uint64_t v3 = *(void *)(v0 + 16);
  uint64_t v2 = v0 + 16;
  uint64_t v4 = *(void *)(v3 + 16);
  if (v4 == 1)
  {
    uint64_t v5 = specialized ContiguousArray._customRemoveLast()();
    if (!v5) {
      uint64_t v5 = specialized ContiguousArray.remove(at:)(*(void *)(*(void *)v2 + 16LL) - 1LL);
    }
    id v6 = (id)v5;
    uint64_t v7 = (unint64_t *)&lazy cache variable for type metadata for NSObject;
  }

  else
  {
    if (v4)
    {
      uint64_t result = _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
      return result;
    }

    id v6 = objc_msgSend(objc_allocWithZone(MEMORY[0x189603F68]), sel_init);
    uint64_t v7 = &lazy cache variable for type metadata for NSDictionary;
  }

  uint64_t v8 = type metadata accessor for NSMorphologyPronoun(0LL, v7);
  void v17[3] = v8;
  v17[0] = v6;
  uint64_t v9 = *(void **)(v1 + 64);
  uint64_t v10 = *(void *)(v1 + 72);
  uint64_t v11 = *(void *)(v1 + 80);
  if ((*(_BYTE *)(v1 + 88) & 1) != 0)
  {
    id v12 = objc_allocWithZone((Class)&OBJC_CLASS___NSString);
    uint64_t v13 = String._bridgeToObjectiveCImpl()();
    id v14 = v9;
    id v15 = objc_msgSend(v12, sel_initWithString_, v13);
    swift_unknownObjectRelease();
    __swift_project_boxed_opaque_existential_1(v17, v8);
    objc_msgSend(v14, sel_setObject_forKeyedSubscript_, _bridgeAnythingToObjectiveC<A>(_:)(), v15);

    swift_unknownObjectRelease();
  }

  else
  {
    __swift_project_boxed_opaque_existential_1(v17, v8);
    objc_msgSend(v9, sel_insertObject_atIndex_, _bridgeAnythingToObjectiveC<A>(_:)(), v10);
    swift_unknownObjectRelease();
    outlined consume of __PlistDictionaryReferencingEncoder.Reference(v9, v10, v11, 0);
  }

  __swift_destroy_boxed_opaque_existential_1((uint64_t)v17);
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  outlined consume of __PlistDictionaryReferencingEncoder.Reference( *(void **)(v1 + 64),  *(void *)(v1 + 72),  *(void *)(v1 + 80),  *(_BYTE *)(v1 + 88));
  return v1;
}

uint64_t __PlistDictionaryReferencingEncoder.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for __PlistDictionaryReferencingEncoder()
{
  return objc_opt_self();
}

id outlined copy of __PlistDictionaryReferencingEncoder.Reference(void *a1, uint64_t a2, uint64_t a3, char a4)
{
  if ((a4 & 1) == 0) {
    return a1;
  }
  id v4 = a1;
  return (id)swift_bridgeObjectRetain();
}

void destroy for __PlistDictionaryReferencingEncoder.Reference(uint64_t a1)
{
}

void outlined consume of __PlistDictionaryReferencingEncoder.Reference( void *a1, uint64_t a2, uint64_t a3, char a4)
{
  if ((a4 & 1) != 0) {
    swift_bridgeObjectRelease();
  }
}

uint64_t initializeWithCopy for __PlistDictionaryReferencingEncoder.Reference(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void **)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 16);
  char v6 = *(_BYTE *)(a2 + 24);
  outlined copy of __PlistDictionaryReferencingEncoder.Reference(*(void **)a2, v4, v5, v6);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v5;
  *(_BYTE *)(a1 + 24) = v6;
  return a1;
}

uint64_t assignWithCopy for __PlistDictionaryReferencingEncoder.Reference(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void **)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 16);
  char v6 = *(_BYTE *)(a2 + 24);
  outlined copy of __PlistDictionaryReferencingEncoder.Reference(*(void **)a2, v4, v5, v6);
  uint64_t v7 = *(void **)a1;
  uint64_t v8 = *(void *)(a1 + 8);
  uint64_t v9 = *(void *)(a1 + 16);
  char v10 = *(_BYTE *)(a1 + 24);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v5;
  *(_BYTE *)(a1 + 24) = v6;
  outlined consume of __PlistDictionaryReferencingEncoder.Reference(v7, v8, v9, v10);
  return a1;
}

uint64_t assignWithTake for __PlistDictionaryReferencingEncoder.Reference(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 16);
  char v4 = *(_BYTE *)(a2 + 24);
  uint64_t v5 = *(void **)a1;
  uint64_t v7 = *(void *)(a1 + 8);
  uint64_t v6 = *(void *)(a1 + 16);
  char v8 = *(_BYTE *)(a1 + 24);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = v3;
  *(_BYTE *)(a1 + 24) = v4;
  outlined consume of __PlistDictionaryReferencingEncoder.Reference(v5, v7, v6, v8);
  return a1;
}

void *type metadata accessor for __PlistDictionaryReferencingEncoder.Reference()
{
  return &unk_189C981E0;
}

void *type metadata accessor for _PlistDictionaryEncodingStorage()
{
  return &unk_189C98200;
}

uint64_t partial apply for specialized closure #1 in __PlistDictionaryEncoder.boxGeneric<A, B>(_:for:_:)( uint64_t a1)
{
  return specialized closure #1 in __PlistDictionaryEncoder.boxGeneric<A, B>(_:for:_:)(a1);
}

uint64_t one-time initialization function for _plistNullNSString()
{
  uint64_t v0 = (objc_class *)objc_msgSend( objc_allocWithZone((Class)NSString),  sel_initWithString_,  String._bridgeToObjectiveCImpl()());
  uint64_t result = swift_unknownObjectRelease();
  _plistNullNSString.super.Class isa = v0;
  return result;
}

uint64_t sub_18351A24C()
{
  return swift_deallocObject();
}

uint64_t sub_18351A27C()
{
  return swift_deallocObject();
}

unint64_t lazy protocol witness table accessor for type _PlistDictionaryUnkeyedEncodingContainer and conformance _PlistDictionaryUnkeyedEncodingContainer()
{
  unint64_t result = lazy protocol witness table cache variable for type _PlistDictionaryUnkeyedEncodingContainer and conformance _PlistDictionaryUnkeyedEncodingContainer;
  if (!lazy protocol witness table cache variable for type _PlistDictionaryUnkeyedEncodingContainer and conformance _PlistDictionaryUnkeyedEncodingContainer)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for _PlistDictionaryUnkeyedEncodingContainer,  &type metadata for _PlistDictionaryUnkeyedEncodingContainer);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type _PlistDictionaryUnkeyedEncodingContainer and conformance _PlistDictionaryUnkeyedEncodingContainer);
  }

  return result;
}

uint64_t type metadata accessor for _PlistDictionaryKeyedEncodingContainer( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata( a1,  a2,  a3,  a4,  (uint64_t)&nominal type descriptor for _PlistDictionaryKeyedEncodingContainer);
}

uint64_t destroy for _PlistDictionaryKeyedEncodingContainer(uint64_t a1)
{
  return swift_release();
}

void *initializeBufferWithCopyOfBuffer for _PlistDictionaryKeyedEncodingContainer(void *a1, void *a2)
{
  uint64_t v3 = (void *)a2[1];
  *a1 = *a2;
  a1[1] = v3;
  a1[2] = a2[2];
  swift_retain();
  id v4 = v3;
  swift_retain();
  return a1;
}

void *assignWithCopy for _PlistDictionaryKeyedEncodingContainer(void *a1, void *a2)
{
  *a1 = *a2;
  swift_retain();
  swift_release();
  id v4 = (void *)a2[1];
  uint64_t v5 = (void *)a1[1];
  a1[1] = v4;
  id v6 = v4;

  a1[2] = a2[2];
  swift_retain();
  swift_release();
  return a1;
}

uint64_t assignWithTake for _PlistDictionaryKeyedEncodingContainer(uint64_t a1, uint64_t a2)
{
  id v4 = *(void **)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;

  *(void *)(a1 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = *(void *)(a2 + 16);
  swift_release();
  return a1;
}

ValueMetadata *type metadata accessor for _PlistDictionaryUnkeyedEncodingContainer()
{
  return &type metadata for _PlistDictionaryUnkeyedEncodingContainer;
}

uint64_t specialized __PlistDictionaryReferencingEncoder.init(referencing:at:codingPathNode:wrapping:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, uint64_t a6, void *a7, uint64_t a8)
{
  uint64_t v49 = a6;
  v51[3] = &type metadata for _CodingKey;
  unint64_t v46 = lazy protocol witness table accessor for type _CodingKey and conformance _CodingKey();
  v51[4] = v46;
  uint64_t v15 = swift_allocObject();
  v51[0] = v15;
  *(void *)(v15 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = a2;
  *(void *)(v15 + 24) = a3;
  *(void *)(v15 + 32) = a4;
  *(_BYTE *)(v15 + 40) = a5;
  *(void *)(a8 + 56) = a1;
  swift_retain();
  swift_retain();
  id v16 = a7;
  _CodingKey.stringValue.getter(a2, a3, a4, a5);
  id v50 = v16;
  *(void *)(a8 + 64) = v16;
  *(void *)(a8 + 72) = v17;
  *(void *)(a8 + 80) = v18;
  *(_BYTE *)(a8 + 88) = 1;
  swift_release();
  uint64_t v19 = *(void *)(a1 + 32);
  uint64_t v47 = *(void *)(a1 + 24);
  uint64_t v48 = v19;
  uint64_t v20 = __swift_project_boxed_opaque_existential_1(v51, (uint64_t)&type metadata for _CodingKey);
  uint64_t v21 = type metadata accessor for Optional();
  uint64_t v22 = *(void *)(v21 - 8);
  uint64_t v23 = *(void *)(v22 + 64);
  MEMORY[0x1895F8858](v21);
  uint64_t v24 = (char *)&v46 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  initializeWithCopy for _CodingKey((uint64_t)v24, (uint64_t)v20);
  uint64_t v25 = storeEnumTagSinglePayload for _CodingKey((uint64_t)v24, 0, 1u);
  MEMORY[0x1895F8858](v25);
  uint64_t v27 = (char *)&v46 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __n128 v29 = MEMORY[0x1895F8858](v28);
  (*(void (**)(char *, char *, uint64_t, __n128))(v22 + 16))(v24, v24, v21, v29);
  if (getEnumTagSinglePayload for _CodingKey((uint64_t)v24, 1u) == 1)
  {
    uint64_t v30 = *(void (**)(char *, uint64_t))(v22 + 8);
    uint64_t v31 = v48;
    swift_bridgeObjectRetain();
    v30(v24, v21);
    v30(v24, v21);
    unint64_t v32 = v49;
    swift_retain();
    swift_release();

    unint64_t v33 = v32 >> 62;
    unint64_t v34 = (uint64_t *)v32;
    if (v32 >> 62)
    {
LABEL_3:
      if ((_DWORD)v33 != 1)
      {
        uint64_t v41 = 0LL;
LABEL_14:
        uint64_t v45 = v47;
        *(void *)(a8 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = MEMORY[0x18961AFE8];
        *(void *)(a8 + 24) = v45;
        *(void *)(a8 + 32) = v31;
        *(void *)(a8 + 40) = v34;
        *(void *)(a8 + 48) = v41;
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v51);
        return a8;
      }

      unint64_t v35 = (uint64_t *)((v32 & 0x3FFFFFFFFFFFFFFFLL) + 32);
LABEL_13:
      uint64_t v41 = *v35;
      swift_release();
      goto LABEL_14;
    }

uint64_t specialized __PlistDictionaryReferencingEncoder.init(referencing:at:codingPathNode:wrapping:)( uint64_t a1, uint64_t a2, unint64_t a3, void *a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  unint64_t v49 = a3;
  *(void *)&__int128 v53 = a6;
  *((void *)&v53 + 1) = a7;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v52);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(a6 - 8) + 32LL))(boxed_opaque_existential_1, a2, a6);
  *(void *)(a5 + 56) = a1;
  swift_retain();
  swift_retain();
  id v13 = a4;
  uint64_t v14 = dispatch thunk of CodingKey.stringValue.getter();
  id v50 = v13;
  *(void *)(a5 + 64) = v13;
  *(void *)(a5 + 72) = v14;
  *(void *)(a5 + 80) = v15;
  *(_BYTE *)(a5 + 88) = 1;
  swift_release();
  uint64_t v16 = *(void *)(a1 + 24);
  uint64_t v51 = a1;
  uint64_t v17 = *(void *)(a1 + 32);
  uint64_t v47 = v16;
  uint64_t v48 = v17;
  __int128 v46 = v53;
  uint64_t v18 = v53;
  uint64_t v19 = __swift_project_boxed_opaque_existential_1(v52, v53);
  uint64_t v20 = type metadata accessor for Optional();
  uint64_t v21 = *(void *)(v20 - 8);
  uint64_t v22 = *(void *)(v21 + 64);
  __n128 v23 = MEMORY[0x1895F8858](v20);
  unint64_t v24 = (v22 + 15) & 0xFFFFFFFFFFFFFFF0LL;
  uint64_t v25 = *(void *)(v18 - 8);
  (*(void (**)(char *, void *, uint64_t, __n128))(v25 + 16))((char *)&v46 - v24, v19, v18, v23);
  uint64_t v26 = (*(uint64_t (**)(char *, void, uint64_t, uint64_t))(v25 + 56))((char *)&v46 - v24, 0LL, 1LL, v18);
  MEMORY[0x1895F8858](v26);
  uint64_t v28 = (char *)&v46 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __n128 v30 = MEMORY[0x1895F8858](v29);
  (*(void (**)(char *, char *, uint64_t, __n128))(v21 + 16))((char *)&v46 - v24, (char *)&v46 - v24, v20, v30);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v25 + 48))((char *)&v46 - v24, 1LL, v18) == 1)
  {
    uint64_t v31 = *(void (**)(char *, uint64_t))(v21 + 8);
    uint64_t v32 = v48;
    swift_bridgeObjectRetain();
    v31((char *)&v46 - v24, v20);
    v31((char *)&v46 - v24, v20);
    unint64_t v33 = v49;
    swift_retain();
    swift_release();

    unint64_t v34 = v33 >> 62;
    uint64_t v35 = v33;
    if (v33 >> 62)
    {
LABEL_3:
      if ((_DWORD)v34 != 1)
      {
        uint64_t v42 = 0LL;
LABEL_16:
        uint64_t v45 = v47;
        *(void *)(a5 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = MEMORY[0x18961AFE8];
        *(void *)(a5 + 24) = v45;
        *(void *)(a5 + 32) = v32;
        *(void *)(a5 + 40) = v35;
        *(void *)(a5 + 48) = v42;
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v52);
        return a5;
      }

      unint64_t v36 = (uint64_t *)((v33 & 0x3FFFFFFFFFFFFFFFLL) + 32);
LABEL_15:
      uint64_t v42 = *v36;
      swift_release();
      goto LABEL_16;
    }

uint64_t partial apply for closure #1 in __PlistDictionaryEncoder.boxGeneric<A, B>(_:for:_:)(uint64_t a1)
{
  return closure #1 in __PlistDictionaryEncoder.boxGeneric<A, B>(_:for:_:)(a1);
}

uint64_t closure #1 in __PlistDictionaryEncoder.boxGeneric<A, B>(_:for:_:)specialized partial apply( uint64_t a1)
{
  return partial apply for specialized closure #1 in __PlistDictionaryEncoder.boxGeneric<A, B>(_:for:_:)(a1);
}

NSNumber __swiftcall Int._bridgeToObjectiveC()()
{
  return (NSNumber)objc_msgSend(objc_allocWithZone((Class)NSNumber), sel_initWithInteger_, v0);
}

NSNumber __swiftcall NSNumber.init(integerLiteral:)(Swift::Int integerLiteral)
{
  return (NSNumber)objc_msgSend( objc_allocWithZone((Class)swift_getObjCClassFromMetadata()),  sel_initWithInteger_,  integerLiteral);
}

id Int8.init(truncating:)(void *a1)
{
  return objc_msgSend(a1, sel_charValue);
}

uint64_t Int8.init(exactly:)(void *a1)
{
  id v1 = objc_msgSend(a1, sel_charValue);
  type metadata accessor for NSMorphologyPronoun( 0LL,  (unint64_t *)&lazy cache variable for type metadata for NSObject);
  id v2 = objc_msgSend(objc_allocWithZone((Class)NSNumber), sel_initWithChar_, v1);
  char v3 = static NSObject.== infix(_:_:)();

  if ((v3 & 1) != 0) {
    int v4 = v1;
  }
  else {
    int v4 = 0;
  }
  return v4 & 0xFFFFFEFF | (((v3 & 1) == 0) << 8);
}

NSNumber __swiftcall Int8._bridgeToObjectiveC()()
{
  return (NSNumber)objc_msgSend(objc_allocWithZone((Class)NSNumber), sel_initWithChar_, v0);
}

uint64_t static Int8._conditionallyBridgeFromObjectiveC(_:result:)(void *a1, _BYTE *a2)
{
  id v3 = objc_msgSend(a1, sel_charValue);
  type metadata accessor for NSMorphologyPronoun( 0LL,  (unint64_t *)&lazy cache variable for type metadata for NSObject);
  id v4 = objc_msgSend(objc_allocWithZone((Class)NSNumber), sel_initWithChar_, v3);
  char v5 = static NSObject.== infix(_:_:)();

  if ((v5 & 1) != 0)
  {
    *a2 = (_BYTE)v3;
    a2[1] = 0;
  }

  return v5 & 1;
}

void *static Int8._unconditionallyBridgeFromObjectiveC(_:)(void *result)
{
  if (result)
  {
    id v1 = result;
    id v2 = objc_msgSend(v1, sel_charValue);
    type metadata accessor for NSMorphologyPronoun( 0LL,  (unint64_t *)&lazy cache variable for type metadata for NSObject);
    id v3 = objc_msgSend(objc_allocWithZone((Class)NSNumber), sel_initWithChar_, v2);
    char v4 = static NSObject.== infix(_:_:)();

    if ((v4 & 1) != 0) {
      return (void *)v2;
    }
    else {
      return 0LL;
    }
  }

  return result;
}

id protocol witness for _ObjectiveCBridgeable._bridgeToObjectiveC() in conformance Int8()
{
  return objc_msgSend(objc_allocWithZone((Class)NSNumber), sel_initWithChar_, *v0);
}

uint64_t protocol witness for static _ObjectiveCBridgeable._conditionallyBridgeFromObjectiveC(_:result:) in conformance Int8( void *a1, _BYTE *a2)
{
  id v3 = objc_msgSend(a1, sel_charValue);
  type metadata accessor for NSMorphologyPronoun( 0LL,  (unint64_t *)&lazy cache variable for type metadata for NSObject);
  id v4 = objc_msgSend(objc_allocWithZone((Class)NSNumber), sel_initWithChar_, v3);
  char v5 = static NSObject.== infix(_:_:)();

  if ((v5 & 1) != 0)
  {
    *a2 = (_BYTE)v3;
    a2[1] = 0;
  }

  return v5 & 1;
}

void protocol witness for static _ObjectiveCBridgeable._unconditionallyBridgeFromObjectiveC(_:) in conformance Int8( void *a1@<X0>, _BYTE *a2@<X8>)
{
  if (a1)
  {
    id v3 = a1;
    id v4 = objc_msgSend(v3, sel_charValue);
    type metadata accessor for NSMorphologyPronoun( 0LL,  (unint64_t *)&lazy cache variable for type metadata for NSObject);
    id v5 = objc_msgSend(objc_allocWithZone((Class)NSNumber), sel_initWithChar_, v4);
    char v6 = static NSObject.== infix(_:_:)();

    if ((v6 & 1) != 0) {
      char v7 = (char)v4;
    }
    else {
      char v7 = 0;
    }
  }

  else
  {
    char v7 = 0;
  }

  *a2 = v7;
}

id UInt8.init(truncating:)(void *a1)
{
  return objc_msgSend(a1, sel_unsignedCharValue);
}

uint64_t UInt8.init(exactly:)(void *a1)
{
  id v1 = objc_msgSend(a1, sel_unsignedCharValue);
  type metadata accessor for NSMorphologyPronoun( 0LL,  (unint64_t *)&lazy cache variable for type metadata for NSObject);
  id v2 = objc_msgSend(objc_allocWithZone((Class)NSNumber), sel_initWithUnsignedChar_, v1);
  char v3 = static NSObject.== infix(_:_:)();

  if ((v3 & 1) != 0) {
    int v4 = (int)v1;
  }
  else {
    int v4 = 0;
  }
  return v4 & 0xFFFFFEFF | (((v3 & 1) == 0) << 8);
}

NSNumber __swiftcall UInt8._bridgeToObjectiveC()()
{
  return (NSNumber)objc_msgSend(objc_allocWithZone((Class)NSNumber), sel_initWithUnsignedChar_, v0);
}

uint64_t static UInt8._conditionallyBridgeFromObjectiveC(_:result:)(void *a1, _BYTE *a2)
{
  id v3 = objc_msgSend(a1, sel_unsignedCharValue);
  type metadata accessor for NSMorphologyPronoun( 0LL,  (unint64_t *)&lazy cache variable for type metadata for NSObject);
  id v4 = objc_msgSend(objc_allocWithZone((Class)NSNumber), sel_initWithUnsignedChar_, v3);
  char v5 = static NSObject.== infix(_:_:)();

  if ((v5 & 1) != 0)
  {
    *a2 = (_BYTE)v3;
    a2[1] = 0;
  }

  return v5 & 1;
}

void *static UInt8._unconditionallyBridgeFromObjectiveC(_:)(void *result)
{
  if (result)
  {
    id v1 = result;
    id v2 = objc_msgSend(v1, sel_unsignedCharValue);
    type metadata accessor for NSMorphologyPronoun( 0LL,  (unint64_t *)&lazy cache variable for type metadata for NSObject);
    id v3 = objc_msgSend(objc_allocWithZone((Class)NSNumber), sel_initWithUnsignedChar_, v2);
    char v4 = static NSObject.== infix(_:_:)();

    if ((v4 & 1) != 0) {
      return (void *)v2;
    }
    else {
      return 0LL;
    }
  }

  return result;
}

id protocol witness for _ObjectiveCBridgeable._bridgeToObjectiveC() in conformance UInt8()
{
  return objc_msgSend(objc_allocWithZone((Class)NSNumber), sel_initWithUnsignedChar_, *v0);
}

uint64_t protocol witness for static _ObjectiveCBridgeable._conditionallyBridgeFromObjectiveC(_:result:) in conformance UInt8( void *a1, _BYTE *a2)
{
  id v3 = objc_msgSend(a1, sel_unsignedCharValue);
  type metadata accessor for NSMorphologyPronoun( 0LL,  (unint64_t *)&lazy cache variable for type metadata for NSObject);
  id v4 = objc_msgSend(objc_allocWithZone((Class)NSNumber), sel_initWithUnsignedChar_, v3);
  char v5 = static NSObject.== infix(_:_:)();

  if ((v5 & 1) != 0)
  {
    *a2 = (_BYTE)v3;
    a2[1] = 0;
  }

  return v5 & 1;
}

void protocol witness for static _ObjectiveCBridgeable._unconditionallyBridgeFromObjectiveC(_:) in conformance UInt8( void *a1@<X0>, _BYTE *a2@<X8>)
{
  if (a1)
  {
    id v3 = a1;
    id v4 = objc_msgSend(v3, sel_unsignedCharValue);
    type metadata accessor for NSMorphologyPronoun( 0LL,  (unint64_t *)&lazy cache variable for type metadata for NSObject);
    id v5 = objc_msgSend(objc_allocWithZone((Class)NSNumber), sel_initWithUnsignedChar_, v4);
    char v6 = static NSObject.== infix(_:_:)();

    if ((v6 & 1) != 0) {
      char v7 = (char)v4;
    }
    else {
      char v7 = 0;
    }
  }

  else
  {
    char v7 = 0;
  }

  *a2 = v7;
}

id Int16.init(truncating:)(void *a1)
{
  return objc_msgSend(a1, sel_shortValue);
}

uint64_t Int16.init(exactly:)(void *a1)
{
  id v1 = objc_msgSend(a1, sel_shortValue);
  type metadata accessor for NSMorphologyPronoun( 0LL,  (unint64_t *)&lazy cache variable for type metadata for NSObject);
  id v2 = objc_msgSend(objc_allocWithZone((Class)NSNumber), sel_initWithShort_, v1);
  char v3 = static NSObject.== infix(_:_:)();

  if ((v3 & 1) != 0) {
    int v4 = (unsigned __int16)v1;
  }
  else {
    int v4 = 0;
  }
  return v4 & 0xFFFEFFFF | (((v3 & 1) == 0) << 16);
}

NSNumber __swiftcall Int16._bridgeToObjectiveC()()
{
  return (NSNumber)objc_msgSend(objc_allocWithZone((Class)NSNumber), sel_initWithShort_, v0);
}

uint64_t static Int16._conditionallyBridgeFromObjectiveC(_:result:)(void *a1, uint64_t a2)
{
  id v3 = objc_msgSend(a1, sel_shortValue);
  type metadata accessor for NSMorphologyPronoun( 0LL,  (unint64_t *)&lazy cache variable for type metadata for NSObject);
  id v4 = objc_msgSend(objc_allocWithZone((Class)NSNumber), sel_initWithShort_, v3);
  char v5 = static NSObject.== infix(_:_:)();

  if ((v5 & 1) != 0)
  {
    *(_WORD *)a2 = (_WORD)v3;
    *(_BYTE *)(a2 + 2) = 0;
  }

  return v5 & 1;
}

void *static Int16._unconditionallyBridgeFromObjectiveC(_:)(void *result)
{
  if (result)
  {
    id v1 = result;
    id v2 = objc_msgSend(v1, sel_shortValue);
    type metadata accessor for NSMorphologyPronoun( 0LL,  (unint64_t *)&lazy cache variable for type metadata for NSObject);
    id v3 = objc_msgSend(objc_allocWithZone((Class)NSNumber), sel_initWithShort_, v2);
    char v4 = static NSObject.== infix(_:_:)();

    if ((v4 & 1) != 0) {
      return (void *)v2;
    }
    else {
      return 0LL;
    }
  }

  return result;
}

id protocol witness for _ObjectiveCBridgeable._bridgeToObjectiveC() in conformance Int16()
{
  return objc_msgSend(objc_allocWithZone((Class)NSNumber), sel_initWithShort_, *v0);
}

uint64_t protocol witness for static _ObjectiveCBridgeable._conditionallyBridgeFromObjectiveC(_:result:) in conformance Int16( void *a1, uint64_t a2)
{
  id v3 = objc_msgSend(a1, sel_shortValue);
  type metadata accessor for NSMorphologyPronoun( 0LL,  (unint64_t *)&lazy cache variable for type metadata for NSObject);
  id v4 = objc_msgSend(objc_allocWithZone((Class)NSNumber), sel_initWithShort_, v3);
  char v5 = static NSObject.== infix(_:_:)();

  if ((v5 & 1) != 0)
  {
    *(_WORD *)a2 = (_WORD)v3;
    *(_BYTE *)(a2 + 2) = 0;
  }

  return v5 & 1;
}

void protocol witness for static _ObjectiveCBridgeable._unconditionallyBridgeFromObjectiveC(_:) in conformance Int16( void *a1@<X0>, _WORD *a2@<X8>)
{
  if (a1)
  {
    id v3 = a1;
    id v4 = objc_msgSend(v3, sel_shortValue);
    type metadata accessor for NSMorphologyPronoun( 0LL,  (unint64_t *)&lazy cache variable for type metadata for NSObject);
    id v5 = objc_msgSend(objc_allocWithZone((Class)NSNumber), sel_initWithShort_, v4);
    char v6 = static NSObject.== infix(_:_:)();

    if ((v6 & 1) != 0) {
      __int16 v7 = (__int16)v4;
    }
    else {
      __int16 v7 = 0;
    }
  }

  else
  {
    __int16 v7 = 0;
  }

  *a2 = v7;
}

id UInt16.init(truncating:)(void *a1)
{
  return objc_msgSend(a1, sel_unsignedShortValue);
}

uint64_t UInt16.init(exactly:)(void *a1)
{
  id v1 = objc_msgSend(a1, sel_unsignedShortValue);
  type metadata accessor for NSMorphologyPronoun( 0LL,  (unint64_t *)&lazy cache variable for type metadata for NSObject);
  id v2 = objc_msgSend(objc_allocWithZone((Class)NSNumber), sel_initWithUnsignedShort_, v1);
  char v3 = static NSObject.== infix(_:_:)();

  if ((v3 & 1) != 0) {
    int v4 = (int)v1;
  }
  else {
    int v4 = 0;
  }
  return v4 & 0xFFFEFFFF | (((v3 & 1) == 0) << 16);
}

NSNumber __swiftcall UInt16._bridgeToObjectiveC()()
{
  return (NSNumber)objc_msgSend(objc_allocWithZone((Class)NSNumber), sel_initWithUnsignedShort_, v0);
}

uint64_t static UInt16._conditionallyBridgeFromObjectiveC(_:result:)(void *a1, uint64_t a2)
{
  id v3 = objc_msgSend(a1, sel_unsignedShortValue);
  type metadata accessor for NSMorphologyPronoun( 0LL,  (unint64_t *)&lazy cache variable for type metadata for NSObject);
  id v4 = objc_msgSend(objc_allocWithZone((Class)NSNumber), sel_initWithUnsignedShort_, v3);
  char v5 = static NSObject.== infix(_:_:)();

  if ((v5 & 1) != 0)
  {
    *(_WORD *)a2 = (_WORD)v3;
    *(_BYTE *)(a2 + 2) = 0;
  }

  return v5 & 1;
}

void *static UInt16._unconditionallyBridgeFromObjectiveC(_:)(void *result)
{
  if (result)
  {
    id v1 = result;
    id v2 = objc_msgSend(v1, sel_unsignedShortValue);
    type metadata accessor for NSMorphologyPronoun( 0LL,  (unint64_t *)&lazy cache variable for type metadata for NSObject);
    id v3 = objc_msgSend(objc_allocWithZone((Class)NSNumber), sel_initWithUnsignedShort_, v2);
    char v4 = static NSObject.== infix(_:_:)();

    if ((v4 & 1) != 0) {
      return (void *)v2;
    }
    else {
      return 0LL;
    }
  }

  return result;
}

id protocol witness for _ObjectiveCBridgeable._bridgeToObjectiveC() in conformance UInt16()
{
  return objc_msgSend(objc_allocWithZone((Class)NSNumber), sel_initWithUnsignedShort_, *v0);
}

uint64_t protocol witness for static _ObjectiveCBridgeable._conditionallyBridgeFromObjectiveC(_:result:) in conformance UInt16( void *a1, uint64_t a2)
{
  id v3 = objc_msgSend(a1, sel_unsignedShortValue);
  type metadata accessor for NSMorphologyPronoun( 0LL,  (unint64_t *)&lazy cache variable for type metadata for NSObject);
  id v4 = objc_msgSend(objc_allocWithZone((Class)NSNumber), sel_initWithUnsignedShort_, v3);
  char v5 = static NSObject.== infix(_:_:)();

  if ((v5 & 1) != 0)
  {
    *(_WORD *)a2 = (_WORD)v3;
    *(_BYTE *)(a2 + 2) = 0;
  }

  return v5 & 1;
}

void protocol witness for static _ObjectiveCBridgeable._unconditionallyBridgeFromObjectiveC(_:) in conformance UInt16( void *a1@<X0>, _WORD *a2@<X8>)
{
  if (a1)
  {
    id v3 = a1;
    id v4 = objc_msgSend(v3, sel_unsignedShortValue);
    type metadata accessor for NSMorphologyPronoun( 0LL,  (unint64_t *)&lazy cache variable for type metadata for NSObject);
    id v5 = objc_msgSend(objc_allocWithZone((Class)NSNumber), sel_initWithUnsignedShort_, v4);
    char v6 = static NSObject.== infix(_:_:)();

    if ((v6 & 1) != 0) {
      __int16 v7 = (__int16)v4;
    }
    else {
      __int16 v7 = 0;
    }
  }

  else
  {
    __int16 v7 = 0;
  }

  *a2 = v7;
}

id Int32.init(truncating:)(void *a1)
{
  return objc_msgSend(a1, sel_intValue);
}

unint64_t Int32.init(exactly:)(void *a1)
{
  return Int32.init(exactly:)(a1, (SEL *)&selRef_intValue, (SEL *)&selRef_initWithInt_);
}

NSNumber __swiftcall Int32._bridgeToObjectiveC()()
{
  return (NSNumber)objc_msgSend(objc_allocWithZone((Class)NSNumber), sel_initWithInt_, v0);
}

uint64_t static Int32._conditionallyBridgeFromObjectiveC(_:result:)(void *a1, uint64_t a2)
{
  return static Int32._conditionallyBridgeFromObjectiveC(_:result:)( a1,  a2,  (SEL *)&selRef_intValue,  (SEL *)&selRef_initWithInt_);
}

void *static Int32._unconditionallyBridgeFromObjectiveC(_:)(void *a1)
{
  return static Int32._unconditionallyBridgeFromObjectiveC(_:)(a1, (SEL *)&selRef_intValue, (SEL *)&selRef_initWithInt_);
}

id protocol witness for _ObjectiveCBridgeable._bridgeToObjectiveC() in conformance Int32( uint64_t a1, uint64_t a2)
{
  return protocol witness for _ObjectiveCBridgeable._bridgeToObjectiveC() in conformance Int32( a1,  a2,  (SEL *)&selRef_initWithInt_);
}

uint64_t protocol witness for static _ObjectiveCBridgeable._conditionallyBridgeFromObjectiveC(_:result:) in conformance Int32( void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return protocol witness for static _ObjectiveCBridgeable._conditionallyBridgeFromObjectiveC(_:result:) in conformance Int32( a1,  a2,  a3,  a4,  (SEL *)&selRef_intValue,  (SEL *)&selRef_initWithInt_);
}

void protocol witness for static _ObjectiveCBridgeable._unconditionallyBridgeFromObjectiveC(_:) in conformance Int32( void *a1@<X0>, _DWORD *a2@<X8>)
{
}

id UInt32.init(truncating:)(void *a1)
{
  return objc_msgSend(a1, sel_unsignedIntValue);
}

unint64_t UInt32.init(exactly:)(void *a1)
{
  return Int32.init(exactly:)(a1, (SEL *)&selRef_unsignedIntValue, (SEL *)&selRef_initWithUnsignedInt_);
}

unint64_t Int32.init(exactly:)(void *a1, SEL *a2, SEL *a3)
{
  id v4 = [a1 *a2];
  type metadata accessor for NSMorphologyPronoun( 0LL,  (unint64_t *)&lazy cache variable for type metadata for NSObject);
  id v5 = objc_msgSend(objc_allocWithZone((Class)NSNumber), *a3, v4);
  char v6 = static NSObject.== infix(_:_:)();

  uint64_t v7 = v4;
  if ((v6 & 1) == 0) {
    uint64_t v7 = 0LL;
  }
  return v7 | ((unint64_t)((v6 & 1) == 0) << 32);
}

NSNumber __swiftcall UInt32._bridgeToObjectiveC()()
{
  return (NSNumber)objc_msgSend(objc_allocWithZone((Class)NSNumber), sel_initWithUnsignedInt_, v0);
}

uint64_t static UInt32._conditionallyBridgeFromObjectiveC(_:result:)(void *a1, uint64_t a2)
{
  return static Int32._conditionallyBridgeFromObjectiveC(_:result:)( a1,  a2,  (SEL *)&selRef_unsignedIntValue,  (SEL *)&selRef_initWithUnsignedInt_);
}

uint64_t static Int32._conditionallyBridgeFromObjectiveC(_:result:)(void *a1, uint64_t a2, SEL *a3, SEL *a4)
{
  id v6 = [a1 *a3];
  type metadata accessor for NSMorphologyPronoun( 0LL,  (unint64_t *)&lazy cache variable for type metadata for NSObject);
  id v7 = objc_msgSend(objc_allocWithZone((Class)NSNumber), *a4, v6);
  char v8 = static NSObject.== infix(_:_:)();

  if ((v8 & 1) != 0)
  {
    *(_DWORD *)a2 = (_DWORD)v6;
    *(_BYTE *)(a2 + 4) = 0;
  }

  return v8 & 1;
}

void *static UInt32._unconditionallyBridgeFromObjectiveC(_:)(void *a1)
{
  return static Int32._unconditionallyBridgeFromObjectiveC(_:)( a1,  (SEL *)&selRef_unsignedIntValue,  (SEL *)&selRef_initWithUnsignedInt_);
}

void *static Int32._unconditionallyBridgeFromObjectiveC(_:)(void *result, SEL *a2, SEL *a3)
{
  if (result)
  {
    id v5 = result;
    id v6 = [v5 *a2];
    type metadata accessor for NSMorphologyPronoun( 0LL,  (unint64_t *)&lazy cache variable for type metadata for NSObject);
    id v7 = objc_msgSend(objc_allocWithZone((Class)NSNumber), *a3, v6);
    LOBYTE(a2) = static NSObject.== infix(_:_:)();

    else {
      return 0LL;
    }
  }

  return result;
}

id protocol witness for _ObjectiveCBridgeable._bridgeToObjectiveC() in conformance UInt32( uint64_t a1, uint64_t a2)
{
  return protocol witness for _ObjectiveCBridgeable._bridgeToObjectiveC() in conformance Int32( a1,  a2,  (SEL *)&selRef_initWithUnsignedInt_);
}

id protocol witness for _ObjectiveCBridgeable._bridgeToObjectiveC() in conformance Int32( uint64_t a1, uint64_t a2, SEL *a3)
{
  return objc_msgSend(objc_allocWithZone((Class)NSNumber), *a3, *v3);
}

uint64_t protocol witness for static _ObjectiveCBridgeable._conditionallyBridgeFromObjectiveC(_:result:) in conformance UInt32( void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return protocol witness for static _ObjectiveCBridgeable._conditionallyBridgeFromObjectiveC(_:result:) in conformance Int32( a1,  a2,  a3,  a4,  (SEL *)&selRef_unsignedIntValue,  (SEL *)&selRef_initWithUnsignedInt_);
}

uint64_t protocol witness for static _ObjectiveCBridgeable._conditionallyBridgeFromObjectiveC(_:result:) in conformance Int32( void *a1, uint64_t a2, uint64_t a3, uint64_t a4, SEL *a5, SEL *a6)
{
  id v8 = [a1 *a5];
  type metadata accessor for NSMorphologyPronoun( 0LL,  (unint64_t *)&lazy cache variable for type metadata for NSObject);
  id v9 = objc_msgSend(objc_allocWithZone((Class)NSNumber), *a6, v8);
  char v10 = static NSObject.== infix(_:_:)();

  if ((v10 & 1) != 0)
  {
    *(_DWORD *)a2 = (_DWORD)v8;
    *(_BYTE *)(a2 + 4) = 0;
  }

  return v10 & 1;
}

void protocol witness for static _ObjectiveCBridgeable._unconditionallyBridgeFromObjectiveC(_:) in conformance UInt32( void *a1@<X0>, _DWORD *a2@<X8>)
{
}

void protocol witness for static _ObjectiveCBridgeable._unconditionallyBridgeFromObjectiveC(_:) in conformance Int32( void *a1@<X0>, SEL *a2@<X3>, SEL *a3@<X4>, _DWORD *a4@<X8>)
{
  if (a1)
  {
    id v7 = a1;
    id v8 = [v7 *a2];
    type metadata accessor for NSMorphologyPronoun( 0LL,  (unint64_t *)&lazy cache variable for type metadata for NSObject);
    id v9 = objc_msgSend(objc_allocWithZone((Class)NSNumber), *a3, v8);
    LOBYTE(a3) = static NSObject.== infix(_:_:)();

    else {
      int v10 = 0;
    }
  }

  else
  {
    int v10 = 0;
  }

  *a4 = v10;
}

id Int64.init(truncating:)(void *a1)
{
  return objc_msgSend(a1, sel_longLongValue);
}

id Int64.init(exactly:)(void *a1)
{
  return Int64.init(exactly:)(a1, (SEL *)&selRef_longLongValue, (SEL *)&selRef_initWithLongLong_);
}

NSNumber __swiftcall Int64._bridgeToObjectiveC()()
{
  return (NSNumber)objc_msgSend(objc_allocWithZone((Class)NSNumber), sel_initWithLongLong_, v0);
}

uint64_t static Int64._conditionallyBridgeFromObjectiveC(_:result:)(void *a1, uint64_t a2)
{
  return static Int64._conditionallyBridgeFromObjectiveC(_:result:)( a1,  a2,  (SEL *)&selRef_longLongValue,  (SEL *)&selRef_initWithLongLong_);
}

id static Int64._unconditionallyBridgeFromObjectiveC(_:)(void *a1)
{
  return static Int64._unconditionallyBridgeFromObjectiveC(_:)( a1,  (SEL *)&selRef_longLongValue,  (SEL *)&selRef_initWithLongLong_);
}

id protocol witness for _ObjectiveCBridgeable._bridgeToObjectiveC() in conformance Int64( uint64_t a1, uint64_t a2)
{
  return protocol witness for _ObjectiveCBridgeable._bridgeToObjectiveC() in conformance Int64( a1,  a2,  (SEL *)&selRef_initWithLongLong_);
}

uint64_t protocol witness for static _ObjectiveCBridgeable._conditionallyBridgeFromObjectiveC(_:result:) in conformance Int64( void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return protocol witness for static _ObjectiveCBridgeable._conditionallyBridgeFromObjectiveC(_:result:) in conformance Int64( a1,  a2,  a3,  a4,  (SEL *)&selRef_longLongValue,  (SEL *)&selRef_initWithLongLong_);
}

void protocol witness for static _ObjectiveCBridgeable._unconditionallyBridgeFromObjectiveC(_:) in conformance Int64( void *a1@<X0>, void *a2@<X8>)
{
}

id UInt64.init(truncating:)(void *a1)
{
  return objc_msgSend(a1, sel_unsignedLongLongValue);
}

id UInt64.init(exactly:)(void *a1)
{
  return Int64.init(exactly:)(a1, (SEL *)&selRef_unsignedLongLongValue, (SEL *)&selRef_initWithUnsignedLongLong_);
}

id Int64.init(exactly:)(void *a1, SEL *a2, SEL *a3)
{
  id v4 = [a1 *a2];
  type metadata accessor for NSMorphologyPronoun( 0LL,  (unint64_t *)&lazy cache variable for type metadata for NSObject);
  id v5 = objc_msgSend(objc_allocWithZone((Class)NSNumber), *a3, v4);
  char v6 = static NSObject.== infix(_:_:)();

  if ((v6 & 1) != 0) {
    return v4;
  }
  else {
    return 0LL;
  }
}

NSNumber __swiftcall UInt64._bridgeToObjectiveC()()
{
  return (NSNumber)objc_msgSend(objc_allocWithZone((Class)NSNumber), sel_initWithUnsignedLongLong_, v0);
}

uint64_t static UInt64._conditionallyBridgeFromObjectiveC(_:result:)(void *a1, uint64_t a2)
{
  return static Int64._conditionallyBridgeFromObjectiveC(_:result:)( a1,  a2,  (SEL *)&selRef_unsignedLongLongValue,  (SEL *)&selRef_initWithUnsignedLongLong_);
}

uint64_t static Int64._conditionallyBridgeFromObjectiveC(_:result:)(void *a1, uint64_t a2, SEL *a3, SEL *a4)
{
  id v6 = [a1 *a3];
  type metadata accessor for NSMorphologyPronoun( 0LL,  (unint64_t *)&lazy cache variable for type metadata for NSObject);
  id v7 = objc_msgSend(objc_allocWithZone((Class)NSNumber), *a4, v6);
  char v8 = static NSObject.== infix(_:_:)();

  if ((v8 & 1) != 0)
  {
    *(void *)a2 = v6;
    *(_BYTE *)(a2 + 8) = 0;
  }

  return v8 & 1;
}

id static UInt64._unconditionallyBridgeFromObjectiveC(_:)(void *a1)
{
  return static Int64._unconditionallyBridgeFromObjectiveC(_:)( a1,  (SEL *)&selRef_unsignedLongLongValue,  (SEL *)&selRef_initWithUnsignedLongLong_);
}

id static Int64._unconditionallyBridgeFromObjectiveC(_:)(id result, SEL *a2, SEL *a3)
{
  if (result)
  {
    id v5 = result;
    id v6 = [v5 *a2];
    type metadata accessor for NSMorphologyPronoun( 0LL,  (unint64_t *)&lazy cache variable for type metadata for NSObject);
    id v7 = objc_msgSend(objc_allocWithZone((Class)NSNumber), *a3, v6);
    LOBYTE(a2) = static NSObject.== infix(_:_:)();

    else {
      return 0LL;
    }
  }

  return result;
}

id protocol witness for _ObjectiveCBridgeable._bridgeToObjectiveC() in conformance UInt64( uint64_t a1, uint64_t a2)
{
  return protocol witness for _ObjectiveCBridgeable._bridgeToObjectiveC() in conformance Int64( a1,  a2,  (SEL *)&selRef_initWithUnsignedLongLong_);
}

uint64_t protocol witness for static _ObjectiveCBridgeable._conditionallyBridgeFromObjectiveC(_:result:) in conformance UInt64( void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return protocol witness for static _ObjectiveCBridgeable._conditionallyBridgeFromObjectiveC(_:result:) in conformance Int64( a1,  a2,  a3,  a4,  (SEL *)&selRef_unsignedLongLongValue,  (SEL *)&selRef_initWithUnsignedLongLong_);
}

uint64_t protocol witness for static _ObjectiveCBridgeable._conditionallyBridgeFromObjectiveC(_:result:) in conformance Int64( void *a1, uint64_t a2, uint64_t a3, uint64_t a4, SEL *a5, SEL *a6)
{
  id v8 = [a1 *a5];
  type metadata accessor for NSMorphologyPronoun( 0LL,  (unint64_t *)&lazy cache variable for type metadata for NSObject);
  id v9 = objc_msgSend(objc_allocWithZone((Class)NSNumber), *a6, v8);
  char v10 = static NSObject.== infix(_:_:)();

  if ((v10 & 1) != 0)
  {
    *(void *)a2 = v8;
    *(_BYTE *)(a2 + 8) = 0;
  }

  return v10 & 1;
}

void protocol witness for static _ObjectiveCBridgeable._unconditionallyBridgeFromObjectiveC(_:) in conformance UInt64( void *a1@<X0>, void *a2@<X8>)
{
}

void protocol witness for static _ObjectiveCBridgeable._unconditionallyBridgeFromObjectiveC(_:) in conformance Int64( void *a1@<X0>, SEL *a2@<X3>, SEL *a3@<X4>, void *a4@<X8>)
{
  if (a1)
  {
    id v7 = a1;
    id v8 = [v7 *a2];
    type metadata accessor for NSMorphologyPronoun( 0LL,  (unint64_t *)&lazy cache variable for type metadata for NSObject);
    id v9 = objc_msgSend(objc_allocWithZone((Class)NSNumber), *a3, v8);
    LOBYTE(a3) = static NSObject.== infix(_:_:)();

    else {
      id v10 = 0LL;
    }
  }

  else
  {
    id v10 = 0LL;
  }

  *a4 = v10;
}

id Int.init(truncating:)(void *a1)
{
  return objc_msgSend(a1, sel_integerValue);
}

id Int.init(exactly:)(void *a1)
{
  return Int64.init(exactly:)(a1, (SEL *)&selRef_integerValue, (SEL *)&selRef_initWithInteger_);
}

uint64_t static Int._conditionallyBridgeFromObjectiveC(_:result:)(void *a1, uint64_t a2)
{
  return static Int64._conditionallyBridgeFromObjectiveC(_:result:)( a1,  a2,  (SEL *)&selRef_integerValue,  (SEL *)&selRef_initWithInteger_);
}

id static Int._unconditionallyBridgeFromObjectiveC(_:)(void *a1)
{
  return static Int64._unconditionallyBridgeFromObjectiveC(_:)( a1,  (SEL *)&selRef_integerValue,  (SEL *)&selRef_initWithInteger_);
}

id protocol witness for _ObjectiveCBridgeable._bridgeToObjectiveC() in conformance Int( uint64_t a1, uint64_t a2)
{
  return protocol witness for _ObjectiveCBridgeable._bridgeToObjectiveC() in conformance Int64( a1,  a2,  (SEL *)&selRef_initWithInteger_);
}

uint64_t protocol witness for static _ObjectiveCBridgeable._conditionallyBridgeFromObjectiveC(_:result:) in conformance Int( void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return protocol witness for static _ObjectiveCBridgeable._conditionallyBridgeFromObjectiveC(_:result:) in conformance Int64( a1,  a2,  a3,  a4,  (SEL *)&selRef_integerValue,  (SEL *)&selRef_initWithInteger_);
}

void protocol witness for static _ObjectiveCBridgeable._unconditionallyBridgeFromObjectiveC(_:) in conformance Int( void *a1@<X0>, void *a2@<X8>)
{
}

id UInt.init(truncating:)(void *a1)
{
  return objc_msgSend(a1, sel_unsignedIntegerValue);
}

id UInt.init(exactly:)(void *a1)
{
  return Int64.init(exactly:)(a1, (SEL *)&selRef_unsignedIntegerValue, (SEL *)&selRef_initWithUnsignedInteger_);
}

NSNumber __swiftcall UInt._bridgeToObjectiveC()()
{
  return (NSNumber)objc_msgSend(objc_allocWithZone((Class)NSNumber), sel_initWithUnsignedInteger_, v0);
}

uint64_t static UInt._conditionallyBridgeFromObjectiveC(_:result:)(void *a1, uint64_t a2)
{
  return static Int64._conditionallyBridgeFromObjectiveC(_:result:)( a1,  a2,  (SEL *)&selRef_unsignedIntegerValue,  (SEL *)&selRef_initWithUnsignedInteger_);
}

id static UInt._unconditionallyBridgeFromObjectiveC(_:)(void *a1)
{
  return static Int64._unconditionallyBridgeFromObjectiveC(_:)( a1,  (SEL *)&selRef_unsignedIntegerValue,  (SEL *)&selRef_initWithUnsignedInteger_);
}

id protocol witness for _ObjectiveCBridgeable._bridgeToObjectiveC() in conformance UInt( uint64_t a1, uint64_t a2)
{
  return protocol witness for _ObjectiveCBridgeable._bridgeToObjectiveC() in conformance Int64( a1,  a2,  (SEL *)&selRef_initWithUnsignedInteger_);
}

id protocol witness for _ObjectiveCBridgeable._bridgeToObjectiveC() in conformance Int64( uint64_t a1, uint64_t a2, SEL *a3)
{
  return objc_msgSend(objc_allocWithZone((Class)NSNumber), *a3, *v3);
}

uint64_t protocol witness for static _ObjectiveCBridgeable._conditionallyBridgeFromObjectiveC(_:result:) in conformance UInt( void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return protocol witness for static _ObjectiveCBridgeable._conditionallyBridgeFromObjectiveC(_:result:) in conformance Int64( a1,  a2,  a3,  a4,  (SEL *)&selRef_unsignedIntegerValue,  (SEL *)&selRef_initWithUnsignedInteger_);
}

void protocol witness for static _ObjectiveCBridgeable._unconditionallyBridgeFromObjectiveC(_:) in conformance UInt( void *a1@<X0>, void *a2@<X8>)
{
}

id Float.init(truncating:)(void *a1)
{
  return objc_msgSend(a1, sel_floatValue);
}

uint64_t Float.init(exactly:)(void *a1)
{
  unint64_t v1 = specialized Float.init(exactly:)(a1);
  return v1 | ((HIDWORD(v1) & 1) << 32);
}

NSNumber __swiftcall Float._bridgeToObjectiveC()()
{
  int v1 = v0;
  id v2 = objc_allocWithZone((Class)&OBJC_CLASS___NSNumber);
  LODWORD(v3) = v1;
  return (NSNumber)objc_msgSend(v2, sel_initWithFloat_, v3);
}

id protocol witness for _ObjectiveCBridgeable._bridgeToObjectiveC() in conformance Float()
{
  int v1 = *v0;
  id v2 = objc_allocWithZone((Class)&OBJC_CLASS___NSNumber);
  LODWORD(v3) = v1;
  return objc_msgSend(v2, sel_initWithFloat_, v3);
}

void protocol witness for static _ObjectiveCBridgeable._unconditionallyBridgeFromObjectiveC(_:) in conformance Float( void *a1@<X0>, _DWORD *a2@<X8>)
{
  *a2 = v3;
}

id Double.init(truncating:)(void *a1)
{
  return objc_msgSend(a1, sel_doubleValue);
}

uint64_t Double.init(exactly:)(void *a1)
{
  return specialized Double.init(exactly:)(a1);
}

id protocol witness for _ObjectiveCBridgeable._bridgeToObjectiveC() in conformance Double()
{
  return objc_msgSend(objc_allocWithZone((Class)NSNumber), sel_initWithDouble_, *v0);
}

void protocol witness for static _ObjectiveCBridgeable._unconditionallyBridgeFromObjectiveC(_:) in conformance Double( void *a1@<X0>, void *a2@<X8>)
{
  *a2 = v3;
}

id Bool.init(truncating:)(void *a1)
{
  return objc_msgSend(a1, sel_BOOLValue);
}

void Bool.init(exactly:)(uint64_t a1)
{
  if (!*MEMORY[0x189604DE8])
  {
    __break(1u);
    goto LABEL_11;
  }

  if (*MEMORY[0x189604DE8] != a1)
  {
    type metadata accessor for NSMorphologyPronoun( 0LL,  (unint64_t *)&lazy cache variable for type metadata for NSObject);
    id v2 = objc_msgSend(objc_allocWithZone((Class)NSNumber), sel_initWithInteger_, 1);
    char v3 = static NSObject.== infix(_:_:)();

    if ((v3 & 1) == 0)
    {
      if (*MEMORY[0x189604DE0])
      {
        if (*MEMORY[0x189604DE0] != a1)
        {
          id v4 = objc_msgSend(objc_allocWithZone((Class)NSNumber), sel_initWithInteger_, 0);
          static NSObject.== infix(_:_:)();
        }

        return;
      }

NSNumber __swiftcall Bool._bridgeToObjectiveC()()
{
  return (NSNumber)objc_msgSend(objc_allocWithZone((Class)NSNumber), sel_initWithBool_, v0 & 1);
}

id protocol witness for _ObjectiveCBridgeable._bridgeToObjectiveC() in conformance Bool()
{
  return objc_msgSend(objc_allocWithZone((Class)NSNumber), sel_initWithBool_, *v0);
}

void protocol witness for static _ObjectiveCBridgeable._unconditionallyBridgeFromObjectiveC(_:) in conformance Bool( void *a1@<X0>, _BYTE *a2@<X8>)
{
  *a2 = v3 & 1;
}

id CGFloat.init(truncating:)(void *a1)
{
  return objc_msgSend(a1, sel_doubleValue);
}

double CGFloat.init(exactly:)(void *a1)
{
  if ((~v2 & 0x7FF0000000000000LL) != 0 || (v2 & 0xFFFFFFFFFFFFFLL) == 0) {
    specialized Double.init(exactly:)(a1);
  }
  else {
    objc_msgSend(a1, sel_doubleValue);
  }
  return result;
}

NSNumber __swiftcall CGFloat._bridgeToObjectiveC()()
{
  return (NSNumber)objc_msgSend(objc_allocWithZone((Class)NSNumber), sel_initWithDouble_, v0);
}

void protocol witness for static _ObjectiveCBridgeable._unconditionallyBridgeFromObjectiveC(_:) in conformance CGFloat( void *a1@<X0>, void *a2@<X8>)
{
  *a2 = v3;
}

NSNumber __swiftcall NSNumber.init(floatLiteral:)(Swift::Double floatLiteral)
{
  return (NSNumber)objc_msgSend( objc_allocWithZone((Class)swift_getObjCClassFromMetadata()),  sel_initWithDouble_,  floatLiteral);
}

NSNumber __swiftcall NSNumber.init(BOOLeanLiteral:)(Swift::Bool BOOLeanLiteral)
{
  return (NSNumber)objc_msgSend( objc_allocWithZone((Class)swift_getObjCClassFromMetadata()),  sel_initWithBool_,  BOOLeanLiteral);
}

id protocol witness for ExpressibleByFloatLiteral.init(floatLiteral:) in conformance NSNumber@<X0>( double *a1@<X0>, void *a2@<X8>)
{
  id result = objc_msgSend(objc_allocWithZone((Class)swift_getObjCClassFromMetadata()), sel_initWithDouble_, *a1);
  *a2 = result;
  return result;
}

id protocol witness for ExpressibleByIntegerLiteral.init(integerLiteral:) in conformance NSNumber@<X0>( void *a1@<X0>, void *a2@<X8>)
{
  id result = objc_msgSend(objc_allocWithZone((Class)swift_getObjCClassFromMetadata()), sel_initWithInteger_, *a1);
  *a2 = result;
  return result;
}

id protocol witness for ExpressibleByBooleanLiteral.init(BOOLeanLiteral:) in conformance NSNumber@<X0>( unsigned __int8 *a1@<X0>, void *a2@<X8>)
{
  id result = objc_msgSend(objc_allocWithZone((Class)swift_getObjCClassFromMetadata()), sel_initWithBool_, *a1);
  *a2 = result;
  return result;
}

void NSNumber._toCustomAnyHashable()(uint64_t a1@<X8>)
{
  uint64_t v2 = v1;
  objc_opt_self();
  uint64_t v4 = swift_dynamicCastObjCClass();
  if (v4)
  {
    id v5 = (void *)v4;
    id v6 = v2;
    objc_msgSend(v5, sel_decimalValue);
    type metadata accessor for NSDecimal(0LL);
    lazy protocol witness table accessor for type NSDecimal and conformance NSDecimal();
    AnyHashable.init<A>(_:)();

    return;
  }

  if (!*MEMORY[0x189604DE8])
  {
    __break(1u);
    goto LABEL_16;
  }

  if ((void *)*MEMORY[0x189604DE8] == v1)
  {
LABEL_9:
    AnyHashable.init<A>(_:)();
    return;
  }

  if (!*MEMORY[0x189604DE0])
  {
LABEL_16:
    __break(1u);
    return;
  }

  type metadata accessor for NSMorphologyPronoun( 0LL,  (unint64_t *)&lazy cache variable for type metadata for NSObject);
  id v7 = objc_msgSend( objc_allocWithZone((Class)NSNumber),  sel_initWithLongLong_,  objc_msgSend(v1, sel_longLongValue));
  char v8 = static NSObject.== infix(_:_:)();

  if ((v8 & 1) != 0)
  {
    objc_msgSend(v1, sel_longLongValue);
    goto LABEL_9;
  }

  id v9 = objc_msgSend( objc_allocWithZone((Class)NSNumber),  sel_initWithUnsignedLongLong_,  objc_msgSend(v1, sel_unsignedLongLongValue));
  char v10 = static NSObject.== infix(_:_:)();

  if ((v10 & 1) != 0)
  {
    objc_msgSend(v1, sel_unsignedLongLongValue);
    goto LABEL_9;
  }

  objc_msgSend(v1, sel_doubleValue);
  id v12 = objc_msgSend(objc_allocWithZone((Class)NSNumber), sel_initWithDouble_, v11);
  char v13 = static NSObject.== infix(_:_:)();

  if ((v13 & 1) != 0)
  {
    objc_msgSend(v2, sel_doubleValue);
    goto LABEL_9;
  }

  *(void *)(a1 + 32) = 0LL;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = 0u;
}

void protocol witness for _HasCustomAnyHashableRepresentation._toCustomAnyHashable() in conformance NSNumber( uint64_t a1@<X8>)
{
  id v2 = *v1;
  NSNumber._toCustomAnyHashable()(a1);
}

void specialized static Int8._forceBridgeFromObjectiveC(_:result:)(void *a1, _BYTE *a2)
{
  id v3 = objc_msgSend(a1, sel_charValue);
  type metadata accessor for NSMorphologyPronoun( 0LL,  (unint64_t *)&lazy cache variable for type metadata for NSObject);
  id v4 = objc_msgSend(objc_allocWithZone((Class)NSNumber), sel_initWithChar_, v3);
  char v5 = static NSObject.== infix(_:_:)();

  if ((v5 & 1) != 0)
  {
    *a2 = (_BYTE)v3;
    a2[1] = 0;
  }

  else
  {
    _StringGuts.grow(_:)(25LL);
    swift_bridgeObjectRelease();
    type metadata accessor for NSMorphologyPronoun( 0LL,  (unint64_t *)&lazy cache variable for type metadata for NSNumber);
    v6._uint64_t countAndFlagsBits = _typeName(_:qualified:)();
    String.append(_:)(v6);
    swift_bridgeObjectRelease();
    v7._uint64_t countAndFlagsBits = 544175136LL;
    v7._uint64_t object = (void *)0xE400000000000000LL;
    String.append(_:)(v7);
    v8._uint64_t countAndFlagsBits = 947154505LL;
    v8._uint64_t object = (void *)0xE400000000000000LL;
    String.append(_:)(v8);
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }

void specialized static UInt8._forceBridgeFromObjectiveC(_:result:)(void *a1, _BYTE *a2)
{
  id v3 = objc_msgSend(a1, sel_unsignedCharValue);
  type metadata accessor for NSMorphologyPronoun( 0LL,  (unint64_t *)&lazy cache variable for type metadata for NSObject);
  id v4 = objc_msgSend(objc_allocWithZone((Class)NSNumber), sel_initWithUnsignedChar_, v3);
  char v5 = static NSObject.== infix(_:_:)();

  if ((v5 & 1) != 0)
  {
    *a2 = (_BYTE)v3;
    a2[1] = 0;
  }

  else
  {
    _StringGuts.grow(_:)(25LL);
    swift_bridgeObjectRelease();
    type metadata accessor for NSMorphologyPronoun( 0LL,  (unint64_t *)&lazy cache variable for type metadata for NSNumber);
    v6._uint64_t countAndFlagsBits = _typeName(_:qualified:)();
    String.append(_:)(v6);
    swift_bridgeObjectRelease();
    v7._uint64_t countAndFlagsBits = 544175136LL;
    v7._uint64_t object = (void *)0xE400000000000000LL;
    String.append(_:)(v7);
    v8._uint64_t countAndFlagsBits = 0x38746E4955LL;
    v8._uint64_t object = (void *)0xE500000000000000LL;
    String.append(_:)(v8);
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }

void specialized static Int16._forceBridgeFromObjectiveC(_:result:)(void *a1, uint64_t a2)
{
  id v3 = objc_msgSend(a1, sel_shortValue);
  type metadata accessor for NSMorphologyPronoun( 0LL,  (unint64_t *)&lazy cache variable for type metadata for NSObject);
  id v4 = objc_msgSend(objc_allocWithZone((Class)NSNumber), sel_initWithShort_, v3);
  char v5 = static NSObject.== infix(_:_:)();

  if ((v5 & 1) != 0)
  {
    *(_WORD *)a2 = (_WORD)v3;
    *(_BYTE *)(a2 + 2) = 0;
  }

  else
  {
    _StringGuts.grow(_:)(25LL);
    swift_bridgeObjectRelease();
    type metadata accessor for NSMorphologyPronoun( 0LL,  (unint64_t *)&lazy cache variable for type metadata for NSNumber);
    v6._uint64_t countAndFlagsBits = _typeName(_:qualified:)();
    String.append(_:)(v6);
    swift_bridgeObjectRelease();
    v7._uint64_t countAndFlagsBits = 544175136LL;
    v7._uint64_t object = (void *)0xE400000000000000LL;
    String.append(_:)(v7);
    v8._uint64_t countAndFlagsBits = 0x3631746E49LL;
    v8._uint64_t object = (void *)0xE500000000000000LL;
    String.append(_:)(v8);
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }

void specialized static UInt16._forceBridgeFromObjectiveC(_:result:)(void *a1, uint64_t a2)
{
  id v3 = objc_msgSend(a1, sel_unsignedShortValue);
  type metadata accessor for NSMorphologyPronoun( 0LL,  (unint64_t *)&lazy cache variable for type metadata for NSObject);
  id v4 = objc_msgSend(objc_allocWithZone((Class)NSNumber), sel_initWithUnsignedShort_, v3);
  char v5 = static NSObject.== infix(_:_:)();

  if ((v5 & 1) != 0)
  {
    *(_WORD *)a2 = (_WORD)v3;
    *(_BYTE *)(a2 + 2) = 0;
  }

  else
  {
    _StringGuts.grow(_:)(25LL);
    swift_bridgeObjectRelease();
    type metadata accessor for NSMorphologyPronoun( 0LL,  (unint64_t *)&lazy cache variable for type metadata for NSNumber);
    v6._uint64_t countAndFlagsBits = _typeName(_:qualified:)();
    String.append(_:)(v6);
    swift_bridgeObjectRelease();
    v7._uint64_t countAndFlagsBits = 544175136LL;
    v7._uint64_t object = (void *)0xE400000000000000LL;
    String.append(_:)(v7);
    v8._uint64_t countAndFlagsBits = 0x3631746E4955LL;
    v8._uint64_t object = (void *)0xE600000000000000LL;
    String.append(_:)(v8);
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }

void specialized static Int32._forceBridgeFromObjectiveC(_:result:)(void *a1, uint64_t a2)
{
  id v3 = objc_msgSend(a1, sel_intValue);
  type metadata accessor for NSMorphologyPronoun( 0LL,  (unint64_t *)&lazy cache variable for type metadata for NSObject);
  id v4 = objc_msgSend(objc_allocWithZone((Class)NSNumber), sel_initWithInt_, v3);
  char v5 = static NSObject.== infix(_:_:)();

  if ((v5 & 1) != 0)
  {
    *(_DWORD *)a2 = (_DWORD)v3;
    *(_BYTE *)(a2 + 4) = 0;
  }

  else
  {
    _StringGuts.grow(_:)(25LL);
    swift_bridgeObjectRelease();
    type metadata accessor for NSMorphologyPronoun( 0LL,  (unint64_t *)&lazy cache variable for type metadata for NSNumber);
    v6._uint64_t countAndFlagsBits = _typeName(_:qualified:)();
    String.append(_:)(v6);
    swift_bridgeObjectRelease();
    v7._uint64_t countAndFlagsBits = 544175136LL;
    v7._uint64_t object = (void *)0xE400000000000000LL;
    String.append(_:)(v7);
    v8._uint64_t countAndFlagsBits = 0x3233746E49LL;
    v8._uint64_t object = (void *)0xE500000000000000LL;
    String.append(_:)(v8);
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }

void specialized static UInt32._forceBridgeFromObjectiveC(_:result:)(void *a1, uint64_t a2)
{
  id v3 = objc_msgSend(a1, sel_unsignedIntValue);
  type metadata accessor for NSMorphologyPronoun( 0LL,  (unint64_t *)&lazy cache variable for type metadata for NSObject);
  id v4 = objc_msgSend(objc_allocWithZone((Class)NSNumber), sel_initWithUnsignedInt_, v3);
  char v5 = static NSObject.== infix(_:_:)();

  if ((v5 & 1) != 0)
  {
    *(_DWORD *)a2 = (_DWORD)v3;
    *(_BYTE *)(a2 + 4) = 0;
  }

  else
  {
    _StringGuts.grow(_:)(25LL);
    swift_bridgeObjectRelease();
    type metadata accessor for NSMorphologyPronoun( 0LL,  (unint64_t *)&lazy cache variable for type metadata for NSNumber);
    v6._uint64_t countAndFlagsBits = _typeName(_:qualified:)();
    String.append(_:)(v6);
    swift_bridgeObjectRelease();
    v7._uint64_t countAndFlagsBits = 544175136LL;
    v7._uint64_t object = (void *)0xE400000000000000LL;
    String.append(_:)(v7);
    v8._uint64_t countAndFlagsBits = 0x3233746E4955LL;
    v8._uint64_t object = (void *)0xE600000000000000LL;
    String.append(_:)(v8);
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }

void specialized static Int64._forceBridgeFromObjectiveC(_:result:)(void *a1, uint64_t a2)
{
  id v3 = objc_msgSend(a1, sel_longLongValue);
  type metadata accessor for NSMorphologyPronoun( 0LL,  (unint64_t *)&lazy cache variable for type metadata for NSObject);
  id v4 = objc_msgSend(objc_allocWithZone((Class)NSNumber), sel_initWithLongLong_, v3);
  char v5 = static NSObject.== infix(_:_:)();

  if ((v5 & 1) != 0)
  {
    *(void *)a2 = v3;
    *(_BYTE *)(a2 + 8) = 0;
  }

  else
  {
    _StringGuts.grow(_:)(25LL);
    swift_bridgeObjectRelease();
    type metadata accessor for NSMorphologyPronoun( 0LL,  (unint64_t *)&lazy cache variable for type metadata for NSNumber);
    v6._uint64_t countAndFlagsBits = _typeName(_:qualified:)();
    String.append(_:)(v6);
    swift_bridgeObjectRelease();
    v7._uint64_t countAndFlagsBits = 544175136LL;
    v7._uint64_t object = (void *)0xE400000000000000LL;
    String.append(_:)(v7);
    v8._uint64_t countAndFlagsBits = 0x3436746E49LL;
    v8._uint64_t object = (void *)0xE500000000000000LL;
    String.append(_:)(v8);
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }

void specialized static UInt64._forceBridgeFromObjectiveC(_:result:)(void *a1, uint64_t a2)
{
  id v3 = objc_msgSend(a1, sel_unsignedLongLongValue);
  type metadata accessor for NSMorphologyPronoun( 0LL,  (unint64_t *)&lazy cache variable for type metadata for NSObject);
  id v4 = objc_msgSend(objc_allocWithZone((Class)NSNumber), sel_initWithUnsignedLongLong_, v3);
  char v5 = static NSObject.== infix(_:_:)();

  if ((v5 & 1) != 0)
  {
    *(void *)a2 = v3;
    *(_BYTE *)(a2 + 8) = 0;
  }

  else
  {
    _StringGuts.grow(_:)(25LL);
    swift_bridgeObjectRelease();
    type metadata accessor for NSMorphologyPronoun( 0LL,  (unint64_t *)&lazy cache variable for type metadata for NSNumber);
    v6._uint64_t countAndFlagsBits = _typeName(_:qualified:)();
    String.append(_:)(v6);
    swift_bridgeObjectRelease();
    v7._uint64_t countAndFlagsBits = 544175136LL;
    v7._uint64_t object = (void *)0xE400000000000000LL;
    String.append(_:)(v7);
    v8._uint64_t countAndFlagsBits = 0x3436746E4955LL;
    v8._uint64_t object = (void *)0xE600000000000000LL;
    String.append(_:)(v8);
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }

void specialized static Int._forceBridgeFromObjectiveC(_:result:)(void *a1, uint64_t a2)
{
  id v3 = objc_msgSend(a1, sel_integerValue);
  type metadata accessor for NSMorphologyPronoun( 0LL,  (unint64_t *)&lazy cache variable for type metadata for NSObject);
  id v4 = objc_msgSend(objc_allocWithZone((Class)NSNumber), sel_initWithInteger_, v3);
  char v5 = static NSObject.== infix(_:_:)();

  if ((v5 & 1) != 0)
  {
    *(void *)a2 = v3;
    *(_BYTE *)(a2 + 8) = 0;
  }

  else
  {
    _StringGuts.grow(_:)(25LL);
    swift_bridgeObjectRelease();
    type metadata accessor for NSMorphologyPronoun( 0LL,  (unint64_t *)&lazy cache variable for type metadata for NSNumber);
    v6._uint64_t countAndFlagsBits = _typeName(_:qualified:)();
    String.append(_:)(v6);
    swift_bridgeObjectRelease();
    v7._uint64_t countAndFlagsBits = 544175136LL;
    v7._uint64_t object = (void *)0xE400000000000000LL;
    String.append(_:)(v7);
    v8._uint64_t countAndFlagsBits = 7630409LL;
    v8._uint64_t object = (void *)0xE300000000000000LL;
    String.append(_:)(v8);
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }

unint64_t specialized Float.init(exactly:)(void *a1)
{
  id v1 = a1;
  unsigned int v2 = *(unsigned __int8 *)objc_msgSend(v1, sel_objCType) - 73;
  if (v2 > 0x28)
  {
LABEL_9:
    objc_msgSend(v1, sel_doubleValue);
    float v4 = v7;
    if (v7 == v4) {
      goto LABEL_8;
    }
LABEL_10:
    uint64_t v6 = 0LL;
    unsigned __int8 v5 = 1;
    return v6 | ((unint64_t)v5 << 32);
  }

  if (((1LL << v2) & 0x109) == 0)
  {
    if (((1LL << v2) & 0x10900000000LL) != 0)
    {
      unint64_t v3 = specialized Float.init<A>(exactly:)((uint64_t)objc_msgSend(v1, sel_longLongValue));
      if ((v3 & 0x100000000LL) != 0) {
        goto LABEL_10;
      }
      goto LABEL_7;
    }

    goto LABEL_9;
  }

  unint64_t v3 = specialized Float.init<A>(exactly:)((unint64_t)objc_msgSend(v1, sel_unsignedLongLongValue));
  if ((v3 & 0x100000000LL) != 0) {
    goto LABEL_10;
  }
LABEL_7:
  float v4 = *(float *)&v3;
LABEL_8:
  unsigned __int8 v5 = 0;
  uint64_t v6 = LODWORD(v4);
  return v6 | ((unint64_t)v5 << 32);
}

unint64_t specialized static Float._forceBridgeFromObjectiveC(_:result:)( unint64_t *a1, _BYTE *object)
{
  unint64_t v3 = a1;
  objc_msgSend(a1, sel_floatValue);
  if ((~v4 & 0x7F800000) != 0 || (v4 & 0x7FFFFF) == 0)
  {
    unint64_t result = specialized Float.init(exactly:)(v3);
    *(_DWORD *)uint64_t object = result;
    object[4] = BYTE4(result) & 1;
    if ((result & 0x100000000LL) == 0) {
      return result;
    }
    _StringGuts.grow(_:)(25LL);
    swift_bridgeObjectRelease();
    unint64_t v13 = 0xD000000000000011LL;
    unint64_t v14 = 0x80000001839CCA20LL;
    type metadata accessor for NSMorphologyPronoun( 0LL,  (unint64_t *)&lazy cache variable for type metadata for NSNumber);
    v7._uint64_t countAndFlagsBits = _typeName(_:qualified:)();
    uint64_t object = v7._object;
    String.append(_:)(v7);
    swift_bridgeObjectRelease();
    v8._uint64_t countAndFlagsBits = 544175136LL;
    v8._uint64_t object = (void *)0xE400000000000000LL;
    String.append(_:)(v8);
    unint64_t v3 = &v13;
    v9._uint64_t countAndFlagsBits = 0x74616F6C46LL;
    v9._uint64_t object = (void *)0xE500000000000000LL;
    String.append(_:)(v9);
    LODWORD(v12) = 0;
    uint64_t v11 = 478LL;
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }

  unint64_t result = (unint64_t)objc_msgSend(v3, sel_floatValue, v11, v12, v13, v14);
  *(_DWORD *)uint64_t object = v10;
  object[4] = 0;
  return result;
}

BOOL specialized static Float._conditionallyBridgeFromObjectiveC(_:result:)(void *a1, uint64_t a2)
{
  if ((~v4 & 0x7F800000) != 0 || (v4 & 0x7FFFFF) == 0)
  {
    unint64_t v6 = specialized Float.init(exactly:)(a1);
    int v7 = v6;
    unint64_t v9 = (v6 & 0x100000000LL) >> 32;
    BOOL result = (v6 & 0x100000000LL) == 0;
    int v8 = v7;
  }

  else
  {
    objc_msgSend(a1, sel_floatValue);
    LOBYTE(v9) = 0;
    BOOL result = 1LL;
  }

  *(_DWORD *)a2 = v8;
  *(_BYTE *)(a2 + 4) = v9 & 1;
  return result;
}

void specialized static Float._unconditionallyBridgeFromObjectiveC(_:)(void *a1)
{
  if (a1)
  {
    id v1 = a1;
    objc_msgSend(v1, sel_floatValue);
    if ((~v2 & 0x7F800000) != 0 || (v2 & 0x7FFFFF) == 0) {
      specialized Float.init(exactly:)(v1);
    }
    else {
      objc_msgSend(v1, sel_floatValue);
    }
  }

uint64_t specialized Double.init(exactly:)(void *a1)
{
  id v1 = a1;
  int v2 = *(unsigned __int8 *)objc_msgSend(v1, sel_objCType);
  if (v2 != 113)
  {
    if (v2 != 81)
    {
      objc_msgSend(v1, sel_doubleValue);
      return v6;
    }

    uint64_t v3 = specialized Double.init<A>(exactly:)(objc_msgSend(v1, sel_unsignedLongLongValue));
    if ((v4 & 1) != 0) {
      return 0LL;
    }
    return v3;
  }

  uint64_t v3 = specialized Double.init<A>(exactly:)((uint64_t)objc_msgSend(v1, sel_longLongValue));
  if ((v5 & 1) == 0) {
    return v3;
  }
  return 0LL;
}

id specialized static Double._forceBridgeFromObjectiveC(_:result:)(unint64_t *a1, _BYTE *object)
{
  uint64_t v3 = a1;
  objc_msgSend(a1, sel_doubleValue);
  if ((~v4 & 0x7FF0000000000000LL) != 0 || (v4 & 0xFFFFFFFFFFFFFLL) == 0)
  {
    id result = (id)specialized Double.init(exactly:)(v3);
    *(void *)uint64_t object = result;
    object[8] = v7 & 1;
    if ((v7 & 1) == 0) {
      return result;
    }
    _StringGuts.grow(_:)(25LL);
    swift_bridgeObjectRelease();
    unint64_t v14 = 0xD000000000000011LL;
    unint64_t v15 = 0x80000001839CCA20LL;
    type metadata accessor for NSMorphologyPronoun( 0LL,  (unint64_t *)&lazy cache variable for type metadata for NSNumber);
    v8._uint64_t countAndFlagsBits = _typeName(_:qualified:)();
    uint64_t object = v8._object;
    String.append(_:)(v8);
    swift_bridgeObjectRelease();
    v9._uint64_t countAndFlagsBits = 544175136LL;
    v9._uint64_t object = (void *)0xE400000000000000LL;
    String.append(_:)(v9);
    uint64_t v3 = &v14;
    v10._uint64_t countAndFlagsBits = 0x656C62756F44LL;
    v10._uint64_t object = (void *)0xE600000000000000LL;
    String.append(_:)(v10);
    LODWORD(v13) = 0;
    uint64_t v12 = 534LL;
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }

  id result = objc_msgSend(v3, sel_doubleValue, v12, v13, v14, v15);
  *(void *)uint64_t object = v11;
  object[8] = 0;
  return result;
}

BOOL specialized static Double._conditionallyBridgeFromObjectiveC(_:result:)(void *a1, uint64_t a2)
{
  if ((~v4 & 0x7FF0000000000000LL) != 0 || (v4 & 0xFFFFFFFFFFFFFLL) == 0)
  {
    uint64_t v6 = specialized Double.init(exactly:)(a1);
    char v9 = v7 & 1;
    BOOL result = (v7 & 1) == 0;
    uint64_t v8 = v6;
  }

  else
  {
    objc_msgSend(a1, sel_doubleValue);
    char v9 = 0;
    BOOL result = 1LL;
  }

  *(void *)a2 = v8;
  *(_BYTE *)(a2 + 8) = v9 & 1;
  return result;
}

void specialized static Double._unconditionallyBridgeFromObjectiveC(_:)(void *a1)
{
  if (a1)
  {
    id v1 = a1;
    objc_msgSend(v1, sel_doubleValue);
    if ((~v2 & 0x7FF0000000000000LL) != 0 || (v2 & 0xFFFFFFFFFFFFFLL) == 0) {
      specialized Double.init(exactly:)(v1);
    }
    else {
      objc_msgSend(v1, sel_doubleValue);
    }
  }

void specialized static Bool._forceBridgeFromObjectiveC(_:result:)(uint64_t a1, char *a2)
{
  if (!*MEMORY[0x189604DE8])
  {
    __break(1u);
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }

  if (*MEMORY[0x189604DE8] == a1)
  {
    char v4 = 1;
    goto LABEL_9;
  }

  type metadata accessor for NSMorphologyPronoun( 0LL,  (unint64_t *)&lazy cache variable for type metadata for NSObject);
  char v4 = 1;
  id v5 = objc_msgSend(objc_allocWithZone((Class)NSNumber), sel_initWithInteger_, 1);
  char v6 = static NSObject.== infix(_:_:)();

  if ((v6 & 1) != 0)
  {
LABEL_9:
    *a2 = v4;
    return;
  }

  if (!*MEMORY[0x189604DE0]) {
    goto LABEL_11;
  }
  if (*MEMORY[0x189604DE0] == a1
    || (id v7 = objc_msgSend(objc_allocWithZone((Class)NSNumber), sel_initWithInteger_, 0),
        char v8 = static NSObject.== infix(_:_:)(),
        v7,
        (v8 & 1) != 0))
  {
    char v4 = 0;
    goto LABEL_9;
  }

void specialized static Bool._unconditionallyBridgeFromObjectiveC(_:)(void *a1)
{
  if (a1)
  {
    if (!*MEMORY[0x189604DE8])
    {
      __break(1u);
LABEL_12:
      __break(1u);
      return;
    }

    if (a1 != (void *)*MEMORY[0x189604DE8])
    {
      type metadata accessor for NSMorphologyPronoun( 0LL,  (unint64_t *)&lazy cache variable for type metadata for NSObject);
      id v2 = objc_allocWithZone((Class)&OBJC_CLASS___NSNumber);
      id v3 = a1;
      id v4 = objc_msgSend(v2, sel_initWithInteger_, 1);
      char v5 = static NSObject.== infix(_:_:)();

      if ((v5 & 1) != 0)
      {
LABEL_10:

        return;
      }

      if (*MEMORY[0x189604DE0])
      {
        if (v3 != (id)*MEMORY[0x189604DE0])
        {
          id v6 = objc_msgSend(objc_allocWithZone((Class)NSNumber), sel_initWithInteger_, 0);
          static NSObject.== infix(_:_:)();

          id v3 = v6;
        }

        goto LABEL_10;
      }

      goto LABEL_12;
    }
  }

uint64_t specialized static CGFloat._conditionallyBridgeFromObjectiveC(_:result:)(void *a1, uint64_t a2)
{
  if ((~v4 & 0x7FF0000000000000LL) != 0 || (v4 & 0xFFFFFFFFFFFFFLL) == 0)
  {
    uint64_t v9 = specialized Double.init(exactly:)(a1);
    if ((v6 & 1) != 0) {
      return 0LL;
    }
  }

  else
  {
    objc_msgSend(a1, sel_doubleValue);
    uint64_t v9 = v8;
  }

  *(void *)a2 = v9;
  *(_BYTE *)(a2 + 8) = 0;
  return 1LL;
}

uint64_t specialized static CGFloat._forceBridgeFromObjectiveC(_:result:)(void *a1, uint64_t a2)
{
  uint64_t result = specialized static CGFloat._conditionallyBridgeFromObjectiveC(_:result:)(a1, a2);
  if ((result & 1) == 0)
  {
    _StringGuts.grow(_:)(25LL);
    swift_bridgeObjectRelease();
    type metadata accessor for NSMorphologyPronoun( 0LL,  (unint64_t *)&lazy cache variable for type metadata for NSNumber);
    v3._uint64_t countAndFlagsBits = _typeName(_:qualified:)();
    String.append(_:)(v3);
    swift_bridgeObjectRelease();
    v4._uint64_t countAndFlagsBits = 544175136LL;
    v4._uint64_t object = (void *)0xE400000000000000LL;
    String.append(_:)(v4);
    v5._uint64_t countAndFlagsBits = 0x74616F6C464743LL;
    v5._uint64_t object = (void *)0xE700000000000000LL;
    String.append(_:)(v5);
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }

  return result;
}

void specialized static CGFloat._unconditionallyBridgeFromObjectiveC(_:)(void *a1)
{
  if (a1)
  {
    id v1 = a1;
    objc_msgSend(v1, sel_doubleValue);
    if ((~v2 & 0x7FF0000000000000LL) != 0 || (v2 & 0xFFFFFFFFFFFFFLL) == 0) {
      specialized Double.init(exactly:)(v1);
    }
    else {
      objc_msgSend(v1, sel_doubleValue);
    }
  }

unint64_t lazy protocol witness table accessor for type NSDecimal and conformance NSDecimal()
{
  unint64_t result = lazy protocol witness table cache variable for type NSDecimal and conformance NSDecimal;
  if (!lazy protocol witness table cache variable for type NSDecimal and conformance NSDecimal)
  {
    type metadata accessor for NSDecimal(255LL);
    unint64_t result = MEMORY[0x186E20D4C](&protocol conformance descriptor for NSDecimal, v1);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type NSDecimal and conformance NSDecimal);
  }

  return result;
}

uint64_t associated type witness table accessor for ExpressibleByBooleanLiteral.BooleanLiteralType : _ExpressibleByBuiltinBooleanLiteral in NSNumber()
{
  return MEMORY[0x1896184F0];
}

uint64_t SortDescriptor.AllowedComparison.CodingKeys.init(rawValue:)(Swift::String string)
{
  uint64_t object = string._object;
  v2._uint64_t countAndFlagsBits = string._countAndFlagsBits;
  v2._uint64_t object = object;
  Swift::Int v3 = _findStringSwitchCase(cases:string:)( (Swift::OpaquePointer)&outlined read-only object #0 of SortDescriptor.AllowedComparison.CodingKeys.init(rawValue:),  v2);
  swift_bridgeObjectRelease();
  if (v3 == 1) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = 2;
  }
  if (v3) {
    return v4;
  }
  else {
    return 0LL;
  }
}

uint64_t SortDescriptor.AllowedComparison.CodingKeys.rawValue.getter(char a1)
{
  if ((a1 & 1) != 0) {
    return 0xD000000000000010LL;
  }
  else {
    return 0x65756C6156776172LL;
  }
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance SortDescriptor<A>.AllowedComparison.CodingKeys( uint64_t a1, uint64_t a2, uint64_t a3)
{
  return == infix<A>(_:_:)();
}

uint64_t protocol witness for Hashable.hashValue.getter in conformance SortDescriptor<A>.AllowedComparison.CodingKeys( uint64_t a1)
{
  return RawRepresentable<>.hashValue.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance SortDescriptor<A>.AllowedComparison.CodingKeys()
{
  return RawRepresentable<>.hash(into:)();
}

uint64_t protocol witness for Hashable._rawHashValue(seed:) in conformance SortDescriptor<A>.AllowedComparison.CodingKeys()
{
  return RawRepresentable<>._rawHashValue(seed:)();
}

uint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance SortDescriptor<A>.AllowedComparison.CodingKeys@<X0>( Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result = SortDescriptor.AllowedComparison.CodingKeys.init(rawValue:)(*a1);
  *a2 = result;
  return result;
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance SortDescriptor<A>.AllowedComparison.CodingKeys@<X0>( uint64_t *a1@<X8>)
{
  uint64_t result = SortDescriptor.AllowedComparison.CodingKeys.rawValue.getter(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance SortDescriptor<A>.AllowedComparison.CodingKeys()
{
  return SortDescriptor.AllowedComparison.CodingKeys.rawValue.getter(*v0);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance SortDescriptor<A>.AllowedComparison.CodingKeys@<X0>( Swift::String a1@<X1:X0>, _BYTE *a2@<X8>)
{
  uint64_t result = SortDescriptor.AllowedComparison.CodingKeys.init(rawValue:)(a1);
  *a2 = result;
  return result;
}

uint64_t protocol witness for CodingKey.init(intValue:) in conformance SortDescriptor<A>.AllowedComparison.CodingKeys@<X0>( _BYTE *a1@<X8>)
{
  uint64_t result = protocol witness for Sequence._customContainsEquatableElement(_:) in conformance _DarwinSearchPathsSequence();
  *a1 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance SortDescriptor<A>.AllowedComparison.CodingKeys( uint64_t a1)
{
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance SortDescriptor<A>.AllowedComparison.CodingKeys( uint64_t a1)
{
  return CodingKey.debugDescription.getter();
}

void SortDescriptor.AllowedComparison.selector.getter(uint64_t a1)
{
  __asm { BR              X11 }

uint64_t sub_18351E944()
{
  if (one-time initialization token for validAlgorithms != -1) {
    swift_once();
  }
  double v0 = static String.StandardComparator.validAlgorithms;
  if (*((void *)static String.StandardComparator.validAlgorithms + 2))
  {
    int v1 = v7 ? 256 : 0;
    unint64_t v2 = specialized __RawDictionaryStorage.find<A>(_:)(v5, v1 | v6);
    if ((v3 & 1) != 0) {
      return *(void *)(v0[7] + 8 * v2);
    }
  }

  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t SortDescriptor.AllowedComparison.init(from:)@<X0>( void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v27 = a5;
  uint64_t v7 = type metadata accessor for SortDescriptor.AllowedComparison.CodingKeys(255LL, a2, a3, a4);
  MEMORY[0x186E20D4C](&protocol conformance descriptor for SortDescriptor<A>.AllowedComparison.CodingKeys, v7);
  uint64_t v8 = type metadata accessor for KeyedDecodingContainer();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x1895F8858](v8);
  Swift::String v11 = (char *)&v27 - v10;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  uint64_t v12 = v28;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v12)
  {
    uint64_t v13 = a1;
    uint64_t v14 = v27;
    uint64_t v15 = v9;
    LOBYTE(v29) = 0;
    uint64_t v16 = KeyedDecodingContainer.decode(_:forKey:)();
    uint64_t v17 = v8;
    if (v16 == 1)
    {
      char v34 = 1;
      lazy protocol witness table accessor for type String.StandardComparator and conformance String.StandardComparator();
      KeyedDecodingContainer.decode<A>(_:forKey:)();
      uint64_t v28 = v11;
      uint64_t v24 = v29;
      char v25 = v30;
      char v26 = v31;
      if (v29 || (v30 & 1) != 0)
      {
        (*(void (**)(char *, uint64_t))(v15 + 8))(v28, v17);
        *(void *)&v32[0] = v24;
        BYTE8(v32[0]) = v25;
        BYTE9(v32[0]) = v26;
        char v33 = 3;
        uint64_t v20 = v14;
        goto LABEL_9;
      }

      LOBYTE(v29) = 0;
      type metadata accessor for DecodingError();
      swift_allocError();
      MEMORY[0x186E20D4C](MEMORY[0x189619B88], v17);
      Swift::String v11 = v28;
    }

    else
    {
      if (!v16)
      {
        uint64_t v20 = v14;
        (*(void (**)(char *, uint64_t))(v15 + 8))(v11, v8);
        memset(v32, 0, sizeof(v32));
        char v33 = 4;
LABEL_9:
        uint64_t v23 = type metadata accessor for SortDescriptor.AllowedComparison(0LL, a2, v21, v22);
        (*(void (**)(uint64_t, _OWORD *, uint64_t))(*(void *)(v23 - 8) + 32LL))(v20, v32, v23);
        uint64_t v18 = (uint64_t)v13;
        return __swift_destroy_boxed_opaque_existential_1(v18);
      }

      LOBYTE(v29) = 0;
      type metadata accessor for DecodingError();
      swift_allocError();
      MEMORY[0x186E20D4C](MEMORY[0x189619B88], v8);
    }

    static DecodingError.dataCorruptedError<A>(forKey:in:debugDescription:)();
    swift_willThrow();
    (*(void (**)(char *, uint64_t))(v15 + 8))(v11, v17);
    a1 = v13;
  }

  uint64_t v18 = (uint64_t)a1;
  return __swift_destroy_boxed_opaque_existential_1(v18);
}

double SortDescriptor.AllowedComparison.init(fromSelector:)@<D0>( const char *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  Swift::UInt v5 = NSStringFromSelector(a1);
  id v6 = static String._unconditionallyBridgeFromObjectiveC(_:)(v5);
  uint64_t v8 = v7;

  BOOL v9 = v6 == (id)0x3A657261706D6F63LL && v8 == 0xE800000000000000LL;
  if (v9 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    memset(v16, 0, sizeof(v16));
    char v12 = 4;
  }

  else
  {
    if (v6 == (id)0xD000000000000019LL && v8 == 0x80000001839D3DD0LL
      || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      *(void *)&v16[0] = 833LL;
    }

    else
    {
      if (v6 == (id)0xD000000000000011LL && v8 == 0x80000001839D3DF0LL)
      {
        swift_bridgeObjectRelease();
      }

      else
      {
        char v15 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        if ((v15 & 1) == 0)
        {
          double result = 0.0;
          *(_OWORD *)(a3 + 64) = 0u;
          *(_OWORD *)(a3 + 80) = 0u;
          *(_OWORD *)(a3 + 32) = 0u;
          *(_OWORD *)(a3 + 48) = 0u;
          *(_OWORD *)a3 = 0u;
          *(_OWORD *)(a3 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = 0u;
          *(_BYTE *)(a3 + 96) = -1;
          return result;
        }
      }

      *(void *)&v16[0] = 0LL;
    }

    WORD4(v16[0]) = 1;
    char v12 = 3;
  }

  char v17 = v12;
  uint64_t v13 = type metadata accessor for SortDescriptor.AllowedComparison(0LL, a2, v10, v11);
  (*(void (**)(uint64_t, _OWORD *, uint64_t))(*(void *)(v13 - 8) + 32LL))(a3, v16, v13);
  return result;
}

void SortDescriptor.AllowedComparison.encode(to:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = v4;
  uint64_t v8 = type metadata accessor for SortDescriptor.AllowedComparison.CodingKeys(255LL, *(void *)(a2 + 16), a3, a4);
  MEMORY[0x186E20D4C](&protocol conformance descriptor for SortDescriptor<A>.AllowedComparison.CodingKeys, v8);
  uint64_t v9 = type metadata accessor for KeyedEncodingContainer();
  MEMORY[0x1895F8858](v9);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(*(void *)(a2 - 8) + 16LL))(v10, v5, a2);
  __asm { BR              X10 }

uint64_t sub_18351F02C()
{
  uint64_t v6 = type metadata accessor for EncodingError();
  swift_allocError();
  uint64_t v8 = v7;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Any, EncodingError.Context));
  void v8[3] = v2;
  uint64_t v9 = swift_allocObject();
  uint64_t *v8 = v9;
  v4(v9 + 16, v3, v2);
  DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
  (*(void (**)(uint64_t *, void, uint64_t))(*(void *)(v6 - 8) + 104LL))( v8,  *MEMORY[0x1896193B8],  v6);
  swift_willThrow();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v5 - 208) + 8LL))(v1, v0);
}

void SortDescriptor.AllowedComparison.hash(into:)(uint64_t a1, uint64_t a2)
{
  __asm { BR              X10 }

uint64_t sub_18351F22C()
{
  return swift_release();
}

void static SortDescriptor.AllowedComparison.== infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = type metadata accessor for SortDescriptor.AllowedComparison(0LL, a3, a3, a4);
  uint64_t v7 = *(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16LL);
  v7((uint64_t *)v8, a1, v6);
  v7(&v9, a2, v6);
  __asm { BR              X10 }

uint64_t sub_18351F460()
{
  uint64_t v3 = v11;
  if (v16)
  {
    swift_release();
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    (*(void (**)(void *, uint64_t))(*(void *)(TupleTypeMetadata2 - 8) + 8LL))(v12, TupleTypeMetadata2);
LABEL_7:
    char v5 = 0;
    return v5 & 1;
  }

  uint64_t v4 = v15;
  if (v8 != v12[13] || ((v9 ^ v13) & 1) != 0 || ((v10 ^ v14) & 1) != 0)
  {
    swift_release();
    swift_release();
    (*(void (**)(void *, uint64_t))(v1 + 8))(v12, v0);
    goto LABEL_7;
  }

  type metadata accessor for AnyKeyPath();
  swift_retain();
  swift_retain();
  char v5 = MEMORY[0x186E1C1A4](v3, v4);
  swift_release_n();
  swift_release_n();
  (*(void (**)(void *, uint64_t))(v1 + 8))(v12, v0);
  return v5 & 1;
}

Swift::Int SortDescriptor.AllowedComparison.hashValue.getter(uint64_t a1)
{
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance SortDescriptor<A>.AllowedComparison( uint64_t a1, uint64_t a2)
{
  return Hasher._finalize()();
}

uint64_t protocol witness for Decodable.init(from:) in conformance SortDescriptor<A>.AllowedComparison@<X0>( void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  return SortDescriptor.AllowedComparison.init(from:)(a1, *(void *)(a2 + 16), a3, a4, a5);
}

void protocol witness for Encodable.encode(to:) in conformance SortDescriptor<A>.AllowedComparison( void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
}

void protocol witness for static Equatable.== infix(_:_:) in conformance SortDescriptor<A>.AllowedComparison( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  static SortDescriptor.AllowedComparison.== infix(_:_:)(a1, a2, *(void *)(a3 + 16), a4);
}

void SortDescriptor.keyPath.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = type metadata accessor for SortDescriptor.AllowedComparison(0LL, *(void *)(a1 + 16), a3, a4);
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16LL))(v6, v4 + 24, v5);
  __asm { BR              X10 }

uint64_t sub_18351F858()
{
  return v1;
}

uint64_t type metadata accessor for SortDescriptor.AllowedComparison( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata( a1,  a2,  a3,  a4,  (uint64_t)&nominal type descriptor for SortDescriptor.AllowedComparison);
}

uint64_t outlined destroy of AnySortComparator(uint64_t a1)
{
  return a1;
}

uint64_t SortDescriptor.stringComparator.getter@<X0>( uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v6 = v4 + 24;
  uint64_t v7 = type metadata accessor for SortDescriptor.AllowedComparison(0LL, *(void *)(a1 + 16), a2, a3);
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t result = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(v8 + 16))(&v16, v6, v7);
  if (v19 == 3)
  {
    uint64_t v10 = v16;
    if (v18) {
      __int16 v15 = 256;
    }
    else {
      __int16 v15 = 0;
    }
    __int16 v14 = v15 | v17;
  }

  else if (v19 > 1u)
  {
    uint64_t result = (*(uint64_t (**)(uint64_t *, uint64_t))(v8 + 8))(&v16, v7);
    uint64_t v10 = 0LL;
    __int16 v14 = 2;
  }

  else
  {
    uint64_t v10 = v16;
    __int16 v11 = v17;
    int v12 = v18;
    uint64_t result = swift_release();
    if (v12) {
      __int16 v13 = 256;
    }
    else {
      __int16 v13 = 0;
    }
    __int16 v14 = v13 | v11;
  }

  *(void *)a4 = v10;
  *(_WORD *)(a4 + 8) = v14;
  return result;
}

uint64_t SortDescriptor.order.getter()
{
  return *v0;
}

uint64_t SortDescriptor.order.setter(uint64_t result)
{
  *uint64_t v1 = result & 1;
  return result;
}

uint64_t (*SortDescriptor.order.modify())(void, void)
{
  return destructiveProjectEnumData for PredicateCodableError;
}

uint64_t SortDescriptor.init<A>(_:order:)@<X0>( uint64_t *a1@<X0>, char a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  char v6 = a2 & 1;
  uint64_t v7 = *a1;
  *(_BYTE *)a5 = a2 & 1;
  *(void *)(a5 + 8) = 0LL;
  *(void *)(a5 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = 0LL;
  uint64_t v8 = type metadata accessor for ComparableComparator(0LL, *(void *)(v7 + *MEMORY[0x18961A9A8] + 8), a3, a4);
  uint64_t v15 = MEMORY[0x186E20D4C](&protocol conformance descriptor for ComparableComparator<A>, v8);
  uint64_t v9 = swift_allocObject();
  *(void *)(v9 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = v8;
  uint64_t v10 = MEMORY[0x186E20D4C](&protocol conformance descriptor for ComparableComparator<A>, v8);
  *(void *)(v9 + 24) = v10;
  uint64_t v11 = swift_allocObject();
  *(void *)(v11 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = v8;
  *(void *)(v11 + 24) = v10;
  uint64_t v12 = swift_allocObject();
  *(void *)(v12 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = partial apply for closure #2 in AnySortComparator.init<A>(_:);
  *(void *)(v12 + 24) = v11;
  uint64_t v13 = swift_allocObject();
  *(void *)(v13 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = v8;
  *(void *)(v13 + 24) = v10;
  *(_BYTE *)(a5 + 24) = v6;
  *(void *)(a5 + 48) = v8;
  *(void *)(a5 + 56) = v15;
  *(void *)(a5 + 64) = partial apply for closure #1 in AnySortComparator.init<A>(_:);
  *(void *)(a5 + 72) = v9;
  *(void *)(a5 + 80) = _sSH_s8Sendablep10Foundation9SortOrderOs11AnyHashableVIeghlyr_SH_sAApADSH_sAApIeghlyr_TRTA_0;
  *(void *)(a5 + 88) = v12;
  *(void *)(a5 + 96) = partial apply for closure #3 in AnySortComparator.init<A>(_:);
  *(void *)(a5 + 104) = v13;
  type metadata accessor for KeyPath();
  swift_retain();
  swift_dynamicCast();
  uint64_t result = swift_release();
  *(void *)(a5 + 112) = v16;
  *(_BYTE *)(a5 + 120) = 2;
  return result;
}

{
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t result;
  uint64_t v19;
  char v6 = a2 & 1;
  uint64_t v7 = *a1;
  *(_BYTE *)a5 = a2 & 1;
  *(void *)(a5 + 8) = 0LL;
  *(void *)(a5 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = 0LL;
  uint64_t v8 = type metadata accessor for ComparableComparator( 255LL,  *(void *)(*(void *)(v7 + *MEMORY[0x18961A9A8] + 8) + 16LL),  a3,  a4);
  uint64_t v9 = MEMORY[0x186E20D4C](&protocol conformance descriptor for ComparableComparator<A>, v8);
  uint64_t v11 = type metadata accessor for OptionalComparator(0LL, v8, v9, v10);
  uint64_t v12 = MEMORY[0x186E20D4C](&protocol conformance descriptor for OptionalComparator<A>, v11);
  uint64_t v13 = swift_allocObject();
  *(void *)(v13 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = v11;
  __int16 v14 = MEMORY[0x186E20D4C](&protocol conformance descriptor for OptionalComparator<A>, v11);
  *(void *)(v13 + 24) = v14;
  uint64_t v15 = swift_allocObject();
  *(void *)(v15 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = v11;
  *(void *)(v15 + 24) = v14;
  uint64_t v16 = swift_allocObject();
  *(void *)(v16 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = closure #2 in AnySortComparator.init<A>(_:)partial apply;
  *(void *)(v16 + 24) = v15;
  unsigned __int8 v17 = swift_allocObject();
  *(void *)(v17 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = v11;
  *(void *)(v17 + 24) = v14;
  *(_BYTE *)(a5 + 24) = v6;
  *(void *)(a5 + 48) = v11;
  *(void *)(a5 + 56) = v12;
  *(void *)(a5 + 64) = closure #1 in AnySortComparator.init<A>(_:)partial apply;
  *(void *)(a5 + 72) = v13;
  *(void *)(a5 + 80) = thunk for @escaping @callee_guaranteed @Sendable (@inout Hashable & Sendable, @unowned SortOrder) -> (@out AnyHashable)partial apply;
  *(void *)(a5 + 88) = v16;
  *(void *)(a5 + 96) = closure #3 in AnySortComparator.init<A>(_:)partial apply;
  *(void *)(a5 + 104) = v17;
  type metadata accessor for KeyPath();
  swift_retain();
  swift_dynamicCast();
  uint64_t result = swift_release();
  *(void *)(a5 + 112) = v19;
  *(_BYTE *)(a5 + 120) = 2;
  return result;
}

uint64_t sub_18351FB64()
{
  return swift_deallocObject();
}

uint64_t sub_18351FB74()
{
  return swift_deallocObject();
}

uint64_t sub_18351FB84()
{
  return swift_deallocObject();
}

uint64_t sub_18351FD54()
{
  return swift_deallocObject();
}

uint64_t sub_18351FD64()
{
  return swift_deallocObject();
}

uint64_t sub_18351FD74()
{
  return swift_deallocObject();
}

uint64_t sub_18351FD98()
{
  return swift_deallocObject();
}

uint64_t SortDescriptor.init(_:comparator:)@<X0>(uint64_t *a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v3 = *a1;
  char v4 = *((_BYTE *)a1 + 8);
  char v5 = *((_BYTE *)a1 + 9);
  *(_BYTE *)a2 = v5;
  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = 0LL;
  type metadata accessor for KeyPath();
  swift_retain();
  swift_dynamicCast();
  uint64_t result = swift_release();
  *(void *)(a2 + 24) = v3;
  *(_BYTE *)(a2 + 32) = v4;
  *(_BYTE *)(a2 + 33) = v5;
  *(void *)(a2 + 40) = v7;
  *(_BYTE *)(a2 + 120) = 0;
  return result;
}

{
  uint64_t v3;
  char v4;
  char v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v3 = *a1;
  char v4 = *((_BYTE *)a1 + 8);
  char v5 = *((_BYTE *)a1 + 9);
  *(_BYTE *)a2 = v5;
  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = 0LL;
  type metadata accessor for KeyPath();
  swift_retain();
  swift_dynamicCast();
  uint64_t result = swift_release();
  *(void *)(a2 + 24) = v3;
  *(_BYTE *)(a2 + 32) = v4;
  *(_BYTE *)(a2 + 33) = v5;
  *(void *)(a2 + 40) = v7;
  *(_BYTE *)(a2 + 120) = 1;
  return result;
}

uint64_t SortDescriptor.init(_:comparator:order:)@<X0>(uint64_t *a1@<X1>, char a2@<W2>, uint64_t a3@<X8>)
{
  char v4 = a2 & 1;
  uint64_t v5 = *a1;
  char v6 = *((_BYTE *)a1 + 8);
  *(_BYTE *)a3 = a2 & 1;
  *(void *)(a3 + 8) = 0LL;
  *(void *)(a3 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = 0LL;
  type metadata accessor for KeyPath();
  swift_retain();
  swift_dynamicCast();
  uint64_t result = swift_release();
  *(void *)(a3 + 24) = v5;
  *(_BYTE *)(a3 + 32) = v6;
  *(_BYTE *)(a3 + 33) = v4;
  *(void *)(a3 + 40) = v8;
  *(_BYTE *)(a3 + 120) = 0;
  return result;
}

{
  char v4;
  uint64_t v5;
  char v6;
  uint64_t result;
  uint64_t v8;
  char v4 = a2 & 1;
  uint64_t v5 = *a1;
  char v6 = *((_BYTE *)a1 + 8);
  *(_BYTE *)a3 = a2 & 1;
  *(void *)(a3 + 8) = 0LL;
  *(void *)(a3 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = 0LL;
  type metadata accessor for KeyPath();
  swift_retain();
  swift_dynamicCast();
  uint64_t result = swift_release();
  *(void *)(a3 + 24) = v5;
  *(_BYTE *)(a3 + 32) = v6;
  *(_BYTE *)(a3 + 33) = v4;
  *(void *)(a3 + 40) = v8;
  *(_BYTE *)(a3 + 120) = 1;
  return result;
}

uint64_t SortDescriptor.init<A>(_:order:)@<X0>(char a1@<W1>, uint64_t a2@<X8>)
{
  uint64_t v4 = dispatch thunk of AnyKeyPath._kvcKeyPathString.getter();
  if (v5)
  {
    uint64_t v6 = v4;
    uint64_t v7 = v5;
    uint64_t result = swift_release();
    *(void *)(a2 + 8) = v6;
    *(void *)(a2 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = v7;
    *(_BYTE *)a2 = a1 & 1;
    *(_OWORD *)(a2 + 24) = 0u;
    *(_OWORD *)(a2 + 40) = 0u;
    *(_OWORD *)(a2 + 56) = 0u;
    *(_OWORD *)(a2 + 72) = 0u;
    *(_OWORD *)(a2 + 88) = 0u;
    *(_OWORD *)(a2 + 104) = 0u;
    *(_BYTE *)(a2 + 120) = 4;
  }

  else
  {
    _StringGuts.grow(_:)(111LL);
    swift_getMetatypeMetadata();
    v9._uint64_t countAndFlagsBits = String.init<A>(describing:)();
    String.append(_:)(v9);
    swift_bridgeObjectRelease();
    v10._uint64_t object = (void *)0x80000001839D3B90LL;
    v10._uint64_t countAndFlagsBits = 0xD00000000000006DLL;
    String.append(_:)(v10);
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }

  return result;
}

uint64_t SortDescriptor.init<A>(_:comparator:)(uint64_t a1, uint64_t *a2)
{
  return SortDescriptor.init<A>(_:comparator:)( a1,  a2,  (uint64_t (*)(uint64_t, uint64_t *))SortDescriptor.init<A>(_:comparator:order:));
}

{
  return SortDescriptor.init<A>(_:comparator:)( a1,  a2,  (uint64_t (*)(uint64_t, uint64_t *))SortDescriptor.init<A>(_:comparator:order:));
}

uint64_t SortDescriptor.init<A>(_:comparator:)( uint64_t a1, uint64_t *a2, uint64_t (*a3)(uint64_t, uint64_t *))
{
  char v4 = *((_BYTE *)a2 + 8);
  char v5 = *((_BYTE *)a2 + 9);
  uint64_t v7 = *a2;
  char v8 = v4;
  char v9 = v5;
  return a3(a1, &v7);
}

uint64_t SortDescriptor.init<A>(_:comparator:order:)@<X0>(uint64_t *a1@<X1>, char a2@<W2>, uint64_t a3@<X8>)
{
  return SortDescriptor.init<A>(_:comparator:order:)(a1, a2, a3);
}

{
  return SortDescriptor.init<A>(_:comparator:order:)(a1, a2, a3);
}

{
  uint64_t v5;
  int v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  int v12;
  char v13;
  Swift::String v14;
  Swift::String v15;
  char v5 = *a1;
  uint64_t v6 = *((unsigned __int8 *)a1 + 8);
  uint64_t v7 = *((unsigned __int8 *)a1 + 9);
  swift_retain();
  char v8 = dispatch thunk of AnyKeyPath._kvcKeyPathString.getter();
  Swift::String v10 = v9;
  swift_release();
  if (v10)
  {
    uint64_t result = swift_release();
    *(void *)(a3 + 8) = v8;
    *(void *)(a3 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = v10;
    *(_BYTE *)a3 = a2 & 1;
    if (v5) {
      uint64_t v12 = 1;
    }
    else {
      uint64_t v12 = v6;
    }
    if (((v12 | v7) & 1) != 0)
    {
      *(_BYTE *)(a3 + 32) = v6;
      *(_BYTE *)(a3 + 33) = 0;
      uint64_t v13 = 3;
    }

    else
    {
      char v5 = 0LL;
      *(void *)(a3 + 112) = 0LL;
      *(_OWORD *)(a3 + 80) = 0u;
      *(_OWORD *)(a3 + 96) = 0u;
      *(_OWORD *)(a3 + 48) = 0u;
      *(_OWORD *)(a3 + 64) = 0u;
      *(_OWORD *)(a3 + 32) = 0u;
      uint64_t v13 = 4;
    }

    *(void *)(a3 + 24) = v5;
    *(_BYTE *)(a3 + 120) = v13;
  }

  else
  {
    _StringGuts.grow(_:)(111LL);
    swift_getMetatypeMetadata();
    v14._uint64_t countAndFlagsBits = String.init<A>(describing:)();
    String.append(_:)(v14);
    swift_bridgeObjectRelease();
    v15._uint64_t object = (void *)0x80000001839D3B90LL;
    v15._uint64_t countAndFlagsBits = 0xD00000000000006DLL;
    String.append(_:)(v15);
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }

  return result;
}

double SortDescriptor.init<A>(_:comparing:)@<D0>(void *a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  id v6 = [a1 key];
  if (!v6) {
    goto LABEL_6;
  }
  uint64_t v7 = v6;
  id v8 = static String._unconditionallyBridgeFromObjectiveC(_:)(v6);
  uint64_t v10 = v9;

  uint64_t v11 = (const char *)objc_msgSend(a1, sel_selector);
  if (!v11)
  {
    swift_bridgeObjectRelease();
LABEL_6:

    goto LABEL_8;
  }

  SortDescriptor.AllowedComparison.init(fromSelector:)(v11, a2, (uint64_t)v24);
  if (v24[96] != 255)
  {
    uint64_t v14 = type metadata accessor for SortDescriptor.AllowedComparison(0LL, a2, v12, v13);
    uint64_t v15 = *(void (**)(_BYTE *, _BYTE *, uint64_t))(*(void *)(v14 - 8) + 32LL);
    v15(v25, v24, v14);
    *((void *)&v26 + 1) = v8;
    *(void *)&__int128 v27 = v10;
    unsigned __int8 v16 = objc_msgSend(a1, sel_ascending);

    LOBYTE(v26) = v16 ^ 1;
    v15((_BYTE *)&v27 + 8, v25, v14);
    __int128 v17 = v31;
    *(_OWORD *)(a3 + 64) = v30;
    *(_OWORD *)(a3 + 80) = v17;
    *(_OWORD *)(a3 + 96) = v32[0];
    *(_OWORD *)(a3 + 105) = *(_OWORD *)((char *)v32 + 9);
    __int128 v18 = v27;
    *(_OWORD *)a3 = v26;
    *(_OWORD *)(a3 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = v18;
    double result = *(double *)&v28;
    __int128 v20 = v29;
    *(_OWORD *)(a3 + 32) = v28;
    *(_OWORD *)(a3 + 48) = v20;
    return result;
  }

  swift_bridgeObjectRelease();

  type metadata accessor for SortDescriptor.AllowedComparison(255LL, a2, v21, v22);
  uint64_t v23 = type metadata accessor for Optional();
  (*(void (**)(_BYTE *, uint64_t))(*(void *)(v23 - 8) + 8LL))(v24, v23);
LABEL_8:
  *(void *)a3 = 0LL;
  *(void *)(a3 + 8) = 0LL;
  *(void *)(a3 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = 1LL;
  double result = 0.0;
  *(_OWORD *)(a3 + 24) = 0u;
  *(_OWORD *)(a3 + 40) = 0u;
  *(_OWORD *)(a3 + 56) = 0u;
  *(_OWORD *)(a3 + 72) = 0u;
  *(_OWORD *)(a3 + 88) = 0u;
  *(_OWORD *)(a3 + 104) = 0u;
  *(_BYTE *)(a3 + 120) = 0;
  return result;
}

void SortDescriptor.compare(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = type metadata accessor for SortDescriptor.AllowedComparison(0LL, *(void *)(a3 + 16), a3, a4);
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16LL))(v6, v4 + 24, v5);
  __asm { BR              X10 }

id sub_18352062C()
{
  uint64_t v4 = *(void *)(v1 - 8);
  uint64_t v5 = *(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16);
  v5(v3 - 216, v0, v1);
  v5((uint64_t)v15, v3 - 216, v1);
  if (!v16)
  {
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    JUMPOUT(0x183521918LL);
  }

  id v6 = objc_allocWithZone((Class)&OBJC_CLASS___NSSortDescriptor);
  uint64_t v7 = String._bridgeToObjectiveCImpl()();
  char v8 = v15[0];
  SortDescriptor.AllowedComparison.selector.getter(v2);
  id v10 = objc_msgSend(v6, sel_initWithKey_ascending_selector_, v7, (v8 & 1) == 0, v9);
  swift_unknownObjectRelease();
  uint64_t v11 = *(void (**)(_BYTE *, uint64_t))(v4 + 8);
  v11(v15, v1);
  v11((_BYTE *)(v3 - 216), v1);
  uint64_t v12 = _bridgeAnythingToObjectiveC<A>(_:)();
  id v13 = objc_msgSend(v10, sel_compareObject_toObject_, v12, _bridgeAnythingToObjectiveC<A>(_:)());

  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  return v13;
}

void SortDescriptor.hash(into:)(uint64_t a1, uint64_t a2)
{
  if (*((void *)v2 + 2))
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
  }

  else
  {
    Hasher._combine(_:)(0);
  }

  Hasher._combine(_:)(*v2);
  uint64_t v6 = type metadata accessor for SortDescriptor.AllowedComparison(0LL, *(void *)(a2 + 16), v4, v5);
  (*(void (**)(_BYTE *, unsigned __int8 *, uint64_t))(*(void *)(v6 - 8) + 16LL))(v7, v2 + 24, v6);
  __asm { BR              X10 }

uint64_t sub_1835219F0()
{
  return swift_release();
}

void static SortDescriptor.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2, uint64_t a3)
{
  if (*a1 != *a2) {
    return;
  }
  uint64_t v6 = *((void *)a1 + 2);
  uint64_t v7 = *((void *)a2 + 2);
  if (!v6)
  {
    if (v7) {
      return;
    }
LABEL_12:
    static SortDescriptor.AllowedComparison.== infix(_:_:)((uint64_t)(a1 + 24), (uint64_t)(a2 + 24), a3, v7);
    return;
  }

  if (v7)
  {
    BOOL v8 = *((void *)a1 + 1) == *((void *)a2 + 1) && v6 == v7;
    if (v8 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
      goto LABEL_12;
    }
  }

uint64_t SortDescriptor.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x726564726FLL && a2 == 0xE500000000000000LL;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0LL;
  }

  else if (a1 == 0x6E6972745379656BLL && a2 == 0xE900000000000067LL {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1LL;
  }

  else if (a1 == 0x73697261706D6F63LL && a2 == 0xEA00000000006E6FLL)
  {
    swift_bridgeObjectRelease();
    return 2LL;
  }

  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0) {
      return 2LL;
    }
    else {
      return 3LL;
    }
  }

uint64_t SortDescriptor.CodingKeys.stringValue.getter(char a1)
{
  if (!a1) {
    return 0x726564726FLL;
  }
  if (a1 == 1) {
    return 0x6E6972745379656BLL;
  }
  return 0x73697261706D6F63LL;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance SortDescriptor<A>.CodingKeys()
{
  return SortDescriptor.CodingKeys.stringValue.getter(*v0);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance SortDescriptor<A>.CodingKeys@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result = SortDescriptor.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CodingKey.init(intValue:) in conformance SortDescriptor<A>.CodingKeys@<X0>( _BYTE *a1@<X8>)
{
  uint64_t result = specialized URL.ParseStrategy.ComponentParseStrategy.CodingKeys.init(intValue:)();
  *a1 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance SortDescriptor<A>.CodingKeys( uint64_t a1)
{
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance SortDescriptor<A>.CodingKeys( uint64_t a1)
{
  return CodingKey.debugDescription.getter();
}

uint64_t SortDescriptor.encode(to:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = v4;
  v18[0] = *(void *)(a2 + 16);
  uint64_t v7 = type metadata accessor for SortDescriptor.CodingKeys(255LL, v18[0], a3, a4);
  MEMORY[0x186E20D4C](&protocol conformance descriptor for SortDescriptor<A>.CodingKeys, v7);
  uint64_t v8 = type metadata accessor for KeyedEncodingContainer();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x1895F8858](v8);
  uint64_t v11 = (char *)v18 - v10;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  char v22 = *v5;
  char v21 = 0;
  lazy protocol witness table accessor for type SortOrder and conformance SortOrder();
  uint64_t v12 = v18[1];
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v12)
  {
    uint64_t v13 = v18[0];
    char v20 = 1;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    char v19 = 2;
    uint64_t v16 = type metadata accessor for SortDescriptor.AllowedComparison(0LL, v13, v14, v15);
    MEMORY[0x186E20D4C](&protocol conformance descriptor for SortDescriptor<A>.AllowedComparison, v16);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
  }

  return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v11, v8);
}

Swift::Int SortDescriptor.hashValue.getter(uint64_t a1)
{
  return Hasher._finalize()();
}

uint64_t SortDescriptor.init(from:)@<X0>( void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v24 = a5;
  uint64_t v8 = type metadata accessor for SortDescriptor.CodingKeys(255LL, a2, a3, a4);
  MEMORY[0x186E20D4C](&protocol conformance descriptor for SortDescriptor<A>.CodingKeys, v8);
  uint64_t v25 = type metadata accessor for KeyedDecodingContainer();
  uint64_t v9 = *(void *)(v25 - 8);
  MEMORY[0x1895F8858](v25);
  uint64_t v11 = (char *)&v24 - v10;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v5) {
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  }
  uint64_t v12 = v9;
  uint64_t v13 = v24;
  char v31 = 0;
  lazy protocol witness table accessor for type SortOrder and conformance SortOrder();
  uint64_t v14 = v25;
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  v27[0] = v26[0];
  v26[0] = 1;
  uint64_t v28 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  uint64_t v29 = v15;
  uint64_t v18 = type metadata accessor for SortDescriptor.AllowedComparison(0LL, a2, v16, v17);
  char v31 = 2;
  MEMORY[0x186E20D4C](&protocol conformance descriptor for SortDescriptor<A>.AllowedComparison, v18);
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  (*(void (**)(char *, uint64_t))(v12 + 8))(v11, v14);
  (*(void (**)(uint64_t *, char *, uint64_t))(*(void *)(v18 - 8) + 32LL))(&v30, v26, v18);
  uint64_t v21 = type metadata accessor for SortDescriptor(0LL, a2, v19, v20);
  uint64_t v22 = *(void *)(v21 - 8);
  (*(void (**)(uint64_t, char *, uint64_t))(v22 + 16))(v13, v27, v21);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  return (*(uint64_t (**)(char *, uint64_t))(v22 + 8))(v27, v21);
}

uint64_t protocol witness for SortComparator.order.setter in conformance SortDescriptor<A>(char a1)
{
  return SortDescriptor.order.setter(a1 & 1);
}

void (*protocol witness for SortComparator.order.modify in conformance SortDescriptor<A>( void *a1))(void *a1)
{
  BOOL v2 = malloc(0x28uLL);
  *a1 = v2;
  v2[4] = SortDescriptor.order.modify();
  return protocol witness for SortComparator.order.modify in conformance KeyPathComparator<A>;
}

uint64_t protocol witness for Decodable.init(from:) in conformance SortDescriptor<A>@<X0>( void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  return SortDescriptor.init(from:)(a1, *(void *)(a2 + 16), a3, a4, a5);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance SortDescriptor<A>( void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return SortDescriptor.encode(to:)(a1, a2, a3, a4);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance SortDescriptor<A>( uint64_t a1, uint64_t a2)
{
  return Hasher._finalize()();
}

void protocol witness for static Equatable.== infix(_:_:) in conformance SortDescriptor<A>( unsigned __int8 *a1, unsigned __int8 *a2, uint64_t a3)
{
  static SortDescriptor.== infix(_:_:)(a1, a2, *(void *)(a3 + 16));
}

uint64_t NSSortDescriptor.init<A>(_:)(_BYTE *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = type metadata accessor for SortDescriptor(0LL, a2, a3, a4);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(void (**)(_BYTE *, _BYTE *, uint64_t))(v7 + 16);
  v8(v21, a1, v6);
  v8(v19, v21, v6);
  if (v20)
  {
    id v9 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
    uint64_t v10 = String._bridgeToObjectiveCImpl()();
    char v11 = v19[0];
    uint64_t v14 = type metadata accessor for SortDescriptor.AllowedComparison(0LL, a2, v12, v13);
    SortDescriptor.AllowedComparison.selector.getter(v14);
    id v16 = objc_msgSend(v9, sel_initWithKey_ascending_selector_, v10, (v11 & 1) == 0, v15);
    swift_unknownObjectRelease();
    uint64_t v17 = *(void (**)(_BYTE *, uint64_t))(v7 + 8);
    v17(v19, v6);
    v17(v21, v6);
    v17(a1, v6);
    return (uint64_t)v16;
  }

  else
  {
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }

  return result;
}

uint64_t NSSortDescriptor.init<A>(_:)(char *a1, uint64_t a2)
{
  if (*((void *)a1 + 2))
  {
    id v4 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
    uint64_t v5 = String._bridgeToObjectiveCImpl()();
    char v6 = *a1;
    uint64_t v9 = type metadata accessor for SortDescriptor.AllowedComparison(0LL, a2, v7, v8);
    SortDescriptor.AllowedComparison.selector.getter(v9);
    id v11 = objc_msgSend(v4, sel_initWithKey_ascending_selector_, v5, (v6 & 1) == 0, v10);
    swift_unknownObjectRelease();
    uint64_t v14 = type metadata accessor for SortDescriptor(0LL, a2, v12, v13);
    (*(void (**)(char *, uint64_t))(*(void *)(v14 - 8) + 8LL))(a1, v14);
    return (uint64_t)v11;
  }

  else
  {
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }

  return result;
}

uint64_t type metadata accessor for SortDescriptor.CodingKeys(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata( a1,  a2,  a3,  a4,  (uint64_t)&nominal type descriptor for SortDescriptor.CodingKeys);
}

uint64_t type metadata accessor for SortDescriptor(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for SortDescriptor);
}

uint64_t instantiation function for generic protocol witness table for SortDescriptor<A>(uint64_t a1)
{
  uint64_t result = MEMORY[0x186E20D4C](&protocol conformance descriptor for SortDescriptor<A>);
  *(void *)(a1 + 8) = result;
  return result;
}

void base witness table accessor for Equatable in SortDescriptor<A>()
{
}

uint64_t destroy for SortDescriptor(uint64_t a1)
{
  uint64_t result = swift_bridgeObjectRelease();
  unsigned int v3 = *(unsigned __int8 *)(a1 + 120);
  if (v3 == 2)
  {
    __swift_destroy_boxed_opaque_existential_1(a1 + 24);
    swift_release();
    swift_release();
    swift_release();
  }

  else if (v3 > 1)
  {
    return result;
  }

  return swift_release();
}

uint64_t initializeWithCopy for SortDescriptor(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  uint64_t v4 = *(void *)(a2 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = v4;
  uint64_t v5 = (void *)(a1 + 24);
  uint64_t v6 = a2 + 24;
  int v7 = *(unsigned __int8 *)(a2 + 120);
  swift_bridgeObjectRetain();
  if (v7 == 2)
  {
    __int128 v8 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)(a1 + 48) = v8;
    (**(void (***)(uint64_t, uint64_t))(v8 - 8))(a1 + 24, v6);
    *(void *)(a1 + 64) = *(void *)(a2 + 64);
    *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
    *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
    uint64_t v10 = *(void *)(a2 + 104);
    uint64_t v9 = *(void *)(a2 + 112);
    *(void *)(a1 + 104) = v10;
    *(void *)(a1 + 112) = v9;
    *(_BYTE *)(a1 + 120) = 2;
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
  }

  else if (v7 == 1)
  {
    *uint64_t v5 = *(void *)v6;
    *(_WORD *)(a1 + 32) = *(_WORD *)(v6 + 8);
    *(void *)(a1 + 40) = *(void *)(a2 + 40);
    *(_BYTE *)(a1 + 120) = 1;
    swift_retain();
  }

  else if (v7)
  {
    __int128 v11 = *(_OWORD *)(v6 + 80);
    *(_OWORD *)(a1 + 88) = *(_OWORD *)(v6 + 64);
    *(_OWORD *)(a1 + 104) = v11;
    *(_BYTE *)(a1 + 120) = *(_BYTE *)(v6 + 96);
    __int128 v12 = *(_OWORD *)(v6 + 16);
    *(_OWORD *)uint64_t v5 = *(_OWORD *)v6;
    *(_OWORD *)(a1 + 40) = v12;
    __int128 v13 = *(_OWORD *)(v6 + 48);
    *(_OWORD *)(a1 + 56) = *(_OWORD *)(v6 + 32);
    *(_OWORD *)(a1 + 72) = v13;
  }

  else
  {
    *uint64_t v5 = *(void *)v6;
    *(_WORD *)(a1 + 32) = *(_WORD *)(v6 + 8);
    *(void *)(a1 + 40) = *(void *)(a2 + 40);
    *(_BYTE *)(a1 + 120) = 0;
    swift_retain();
  }

  return a1;
}

uint64_t assignWithCopy for SortDescriptor(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  if (a1 != a2)
  {
    __int128 v8 = (void *)(a1 + 24);
    uint64_t v9 = (uint64_t *)(a2 + 24);
    uint64_t v10 = type metadata accessor for SortDescriptor.AllowedComparison(0LL, *(void *)(a3 + 16), v6, v7);
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v10 - 8) + 8LL))(a1 + 24, v10);
    int v11 = *(unsigned __int8 *)(a2 + 120);
    if (v11 == 2)
    {
      uint64_t v13 = *(void *)(a2 + 48);
      *(void *)(a1 + 48) = v13;
      *(void *)(a1 + 56) = *(void *)(a2 + 56);
      (**(void (***)(uint64_t, uint64_t))(v13 - 8))(a1 + 24, a2 + 24);
      uint64_t v14 = *(void *)(a2 + 72);
      *(void *)(a1 + 64) = *(void *)(a2 + 64);
      *(void *)(a1 + 72) = v14;
      uint64_t v15 = *(void *)(a2 + 88);
      *(void *)(a1 + 80) = *(void *)(a2 + 80);
      *(void *)(a1 + 88) = v15;
      uint64_t v16 = *(void *)(a2 + 104);
      *(void *)(a1 + 96) = *(void *)(a2 + 96);
      *(void *)(a1 + 104) = v16;
      *(void *)(a1 + 112) = *(void *)(a2 + 112);
      *(_BYTE *)(a1 + 120) = 2;
      swift_retain();
      swift_retain();
      swift_retain();
      swift_retain();
    }

    else if (v11 == 1)
    {
      uint64_t v17 = *v9;
      *(_WORD *)(a1 + 32) = *(_WORD *)(a2 + 32);
      void *v8 = v17;
      *(void *)(a1 + 40) = *(void *)(a2 + 40);
      *(_BYTE *)(a1 + 120) = 1;
      swift_retain();
    }

    else if (*(_BYTE *)(a2 + 120))
    {
      __int128 v18 = *(_OWORD *)v9;
      __int128 v19 = *(_OWORD *)(a2 + 56);
      *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
      *(_OWORD *)(a1 + 56) = v19;
      *(_OWORD *)__int128 v8 = v18;
      __int128 v20 = *(_OWORD *)(a2 + 72);
      __int128 v21 = *(_OWORD *)(a2 + 88);
      __int128 v22 = *(_OWORD *)(a2 + 104);
      *(_BYTE *)(a1 + 120) = *(_BYTE *)(a2 + 120);
      *(_OWORD *)(a1 + 88) = v21;
      *(_OWORD *)(a1 + 104) = v22;
      *(_OWORD *)(a1 + 72) = v20;
    }

    else
    {
      uint64_t v12 = *v9;
      *(_WORD *)(a1 + 32) = *(_WORD *)(a2 + 32);
      void *v8 = v12;
      *(void *)(a1 + 40) = *(void *)(a2 + 40);
      *(_BYTE *)(a1 + 120) = 0;
      swift_retain();
    }
  }

  return a1;
}

__n128 __swift_memcpy121_8(uint64_t a1, __int128 *a2)
{
  __int128 v2 = *a2;
  __int128 v3 = a2[1];
  __int128 v4 = a2[3];
  *(_OWORD *)(a1 + 32) = a2[2];
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)a1 = v2;
  *(_OWORD *)(a1 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = v3;
  __n128 result = (__n128)a2[4];
  __int128 v6 = a2[5];
  __int128 v7 = a2[6];
  *(_OWORD *)(a1 + 105) = *(__int128 *)((char *)a2 + 105);
  *(_OWORD *)(a1 + 80) = v6;
  *(_OWORD *)(a1 + 96) = v7;
  *(__n128 *)(a1 + 64) = result;
  return result;
}

uint64_t assignWithTake for SortDescriptor(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  uint64_t v6 = *(void *)(a2 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = v6;
  swift_bridgeObjectRelease();
  if (a1 != a2)
  {
    uint64_t v9 = type metadata accessor for SortDescriptor.AllowedComparison(0LL, *(void *)(a3 + 16), v7, v8);
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v9 - 8) + 8LL))(a1 + 24, v9);
    *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
    *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
    *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
    *(_BYTE *)(a1 + 120) = *(_BYTE *)(a2 + 120);
    *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
    *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
    *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  }

  return a1;
}

uint64_t getEnumTagSinglePayload for SortDescriptor(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 121)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  unint64_t v3 = *(void *)(a1 + 16);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for SortDescriptor(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 120) = 0;
    *(void *)__n128 result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(_BYTE *)(result + 121) = 1;
    }
  }

  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(_BYTE *)(result + 121) = 0;
    }
    if (a2) {
      *(void *)(result + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = a2;
    }
  }

  return result;
}

uint64_t storeEnumTagSinglePayload for SortDescriptor.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    LODWORD(__swift_mutable_project_boxed_opaque_existential_1((uint64_t)v3, v4) = 1;
  }
  else {
    LODWORD(__swift_mutable_project_boxed_opaque_existential_1((uint64_t)v3, v4) = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFD) {
    return ((uint64_t (*)(void))((char *)&loc_183522C0C + 4 * byte_183835CA3[v4]))();
  }
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_183522C40 + 4 * byte_183835C9E[v4]))();
}

uint64_t sub_183522C40(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_183522C48(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x183522C50LL);
  }
  return result;
}

uint64_t sub_183522C5C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x183522C64LL);
  }
  *(_BYTE *)__n128 result = a2 + 2;
  return result;
}

uint64_t sub_183522C68(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_183522C70(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t destroy for SortDescriptor.AllowedComparison(uint64_t result)
{
  unsigned int v1 = *(unsigned __int8 *)(result + 96);
  if (v1 >= 4) {
    unsigned int v1 = *(_DWORD *)result + 4;
  }
  if (v1 == 2)
  {
    __swift_destroy_boxed_opaque_existential_1(result);
    swift_release();
    swift_release();
    swift_release();
  }

  else if (v1 > 1)
  {
    return result;
  }

  return swift_release();
}

uint64_t initializeWithCopy for SortDescriptor.AllowedComparison(uint64_t a1, uint64_t a2)
{
  unsigned int v4 = *(unsigned __int8 *)(a2 + 96);
  if (v4 >= 4) {
    unsigned int v4 = *(_DWORD *)a2 + 4;
  }
  switch(v4)
  {
    case 0u:
      *(void *)a1 = *(void *)a2;
      *(_WORD *)(a1 + 8) = *(_WORD *)(a2 + 8);
      *(void *)(a1 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = *(void *)(a2 + 16);
      *(_BYTE *)(a1 + 96) = 0;
      swift_retain();
      break;
    case 1u:
      *(void *)a1 = *(void *)a2;
      *(_WORD *)(a1 + 8) = *(_WORD *)(a2 + 8);
      *(void *)(a1 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = *(void *)(a2 + 16);
      *(_BYTE *)(a1 + 96) = 1;
      swift_retain();
      break;
    case 2u:
      __int128 v8 = *(_OWORD *)(a2 + 24);
      *(_OWORD *)(a1 + 24) = v8;
      (**(void (***)(uint64_t, uint64_t))(v8 - 8))(a1, a2);
      *(void *)(a1 + 40) = *(void *)(a2 + 40);
      __int128 v9 = *(_OWORD *)(a2 + 64);
      *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
      *(_OWORD *)(a1 + 64) = v9;
      uint64_t v11 = *(void *)(a2 + 80);
      uint64_t v10 = *(void *)(a2 + 88);
      *(void *)(a1 + 80) = v11;
      *(void *)(a1 + 88) = v10;
      *(_BYTE *)(a1 + 96) = 2;
      swift_retain();
      swift_retain();
      swift_retain();
      swift_retain();
      break;
    case 3u:
      *(void *)a1 = *(void *)a2;
      *(_WORD *)(a1 + 8) = *(_WORD *)(a2 + 8);
      *(_BYTE *)(a1 + 96) = 3;
      break;
    default:
      __int128 v5 = *(_OWORD *)(a2 + 80);
      *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
      *(_OWORD *)(a1 + 80) = v5;
      *(_BYTE *)(a1 + 96) = *(_BYTE *)(a2 + 96);
      __int128 v6 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = v6;
      __int128 v7 = *(_OWORD *)(a2 + 48);
      *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
      *(_OWORD *)(a1 + 48) = v7;
      break;
  }

  return a1;
}

uint64_t assignWithCopy for SortDescriptor.AllowedComparison(uint64_t a1, uint64_t *a2)
{
  unsigned int v4 = *(unsigned __int8 *)(a1 + 96);
  if (v4 >= 4) {
    unsigned int v4 = *(_DWORD *)a1 + 4;
  }
  if (v4 == 2)
  {
    __swift_destroy_boxed_opaque_existential_1(a1);
    swift_release();
    swift_release();
    swift_release();
LABEL_8:
    swift_release();
    goto LABEL_9;
  }

  if (v4 <= 1) {
    goto LABEL_8;
  }
LABEL_9:
  unsigned int v5 = *((unsigned __int8 *)a2 + 96);
  if (v5 >= 4) {
    unsigned int v5 = *(_DWORD *)a2 + 4;
  }
  switch(v5)
  {
    case 0u:
      uint64_t v6 = *a2;
      *(_WORD *)(a1 + 8) = *((_WORD *)a2 + 4);
      *(void *)a1 = v6;
      *(void *)(a1 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = a2[2];
      *(_BYTE *)(a1 + 96) = 0;
      swift_retain();
      break;
    case 1u:
      uint64_t v12 = *a2;
      *(_WORD *)(a1 + 8) = *((_WORD *)a2 + 4);
      *(void *)a1 = v12;
      *(void *)(a1 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = a2[2];
      *(_BYTE *)(a1 + 96) = 1;
      swift_retain();
      break;
    case 2u:
      uint64_t v13 = a2[3];
      *(void *)(a1 + 24) = v13;
      *(void *)(a1 + 32) = a2[4];
      (**(void (***)(uint64_t, uint64_t *))(v13 - 8))(a1, a2);
      uint64_t v14 = a2[6];
      *(void *)(a1 + 40) = a2[5];
      *(void *)(a1 + 48) = v14;
      uint64_t v15 = a2[8];
      *(void *)(a1 + 56) = a2[7];
      *(void *)(a1 + 64) = v15;
      uint64_t v16 = a2[10];
      *(void *)(a1 + 72) = a2[9];
      *(void *)(a1 + 80) = v16;
      *(void *)(a1 + 88) = a2[11];
      *(_BYTE *)(a1 + 96) = 2;
      swift_retain();
      swift_retain();
      swift_retain();
      swift_retain();
      break;
    case 3u:
      uint64_t v17 = *a2;
      *(_WORD *)(a1 + 8) = *((_WORD *)a2 + 4);
      *(void *)a1 = v17;
      *(_BYTE *)(a1 + 96) = 3;
      break;
    default:
      __int128 v7 = *(_OWORD *)a2;
      __int128 v8 = *((_OWORD *)a2 + 2);
      *(_OWORD *)(a1 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = *((_OWORD *)a2 + 1);
      *(_OWORD *)(a1 + 32) = v8;
      *(_OWORD *)a1 = v7;
      __int128 v9 = *((_OWORD *)a2 + 3);
      __int128 v10 = *((_OWORD *)a2 + 4);
      __int128 v11 = *((_OWORD *)a2 + 5);
      *(_BYTE *)(a1 + 96) = *((_BYTE *)a2 + 96);
      *(_OWORD *)(a1 + 64) = v10;
      *(_OWORD *)(a1 + 80) = v11;
      *(_OWORD *)(a1 + 48) = v9;
      break;
  }

  return a1;
}

__n128 __swift_memcpy97_8(uint64_t a1, __int128 *a2)
{
  __int128 v2 = *a2;
  __int128 v3 = a2[2];
  *(_OWORD *)(a1 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = a2[1];
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)a1 = v2;
  __n128 result = (__n128)a2[3];
  __int128 v5 = a2[4];
  __int128 v6 = a2[5];
  *(_BYTE *)(a1 + 96) = *((_BYTE *)a2 + 96);
  *(_OWORD *)(a1 + 64) = v5;
  *(_OWORD *)(a1 + 80) = v6;
  *(__n128 *)(a1 + 48) = result;
  return result;
}

uint64_t assignWithTake for SortDescriptor.AllowedComparison(uint64_t a1, uint64_t a2)
{
  if (a1 == a2) {
    return a1;
  }
  unsigned int v4 = *(unsigned __int8 *)(a1 + 96);
  if (v4 >= 4) {
    unsigned int v4 = *(_DWORD *)a1 + 4;
  }
  if (v4 == 2)
  {
    __swift_destroy_boxed_opaque_existential_1(a1);
    swift_release();
    swift_release();
    swift_release();
LABEL_8:
    swift_release();
    goto LABEL_9;
  }

  if (v4 <= 1) {
    goto LABEL_8;
  }
LABEL_9:
  unsigned int v5 = *(unsigned __int8 *)(a2 + 96);
  if (v5 >= 4) {
    unsigned int v5 = *(_DWORD *)a2 + 4;
  }
  switch(v5)
  {
    case 0u:
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(void *)(a1 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = *(void *)(a2 + 16);
      *(_BYTE *)(a1 + 96) = 0;
      return a1;
    case 1u:
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(void *)(a1 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = *(void *)(a2 + 16);
      char v9 = 1;
      goto LABEL_17;
    case 2u:
      __int128 v10 = *(_OWORD *)(a2 + 48);
      *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
      *(_OWORD *)(a1 + 48) = v10;
      __int128 v11 = *(_OWORD *)(a2 + 80);
      *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
      *(_OWORD *)(a1 + 80) = v11;
      __int128 v12 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = v12;
      char v9 = 2;
      goto LABEL_17;
    case 3u:
      *(void *)a1 = *(void *)a2;
      *(_WORD *)(a1 + 8) = *(_WORD *)(a2 + 8);
      char v9 = 3;
LABEL_17:
      *(_BYTE *)(a1 + 96) = v9;
      break;
    default:
      __int128 v6 = *(_OWORD *)(a2 + 80);
      *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
      *(_OWORD *)(a1 + 80) = v6;
      *(_BYTE *)(a1 + 96) = *(_BYTE *)(a2 + 96);
      __int128 v7 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = v7;
      __int128 v8 = *(_OWORD *)(a2 + 48);
      *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
      *(_OWORD *)(a1 + 48) = v8;
      break;
  }

  return a1;
}

uint64_t getEnumTagSinglePayload for SortDescriptor.AllowedComparison(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 >= 0xFC && *(_BYTE *)(a1 + 97)) {
    return (*(_DWORD *)a1 + 252);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 96);
  if (v3 >= 5) {
    return (v3 ^ 0xFF) + 1;
  }
  else {
    return 0LL;
  }
}

uint64_t storeEnumTagSinglePayload for SortDescriptor.AllowedComparison( uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFB)
  {
    *(_BYTE *)(result + 96) = 0;
    *(_OWORD *)(result + 64) = 0u;
    *(_OWORD *)(result + 80) = 0u;
    *(_OWORD *)(result + 32) = 0u;
    *(_OWORD *)(result + 48) = 0u;
    *(_OWORD *)__n128 result = 0u;
    *(_OWORD *)(result + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = 0u;
    *(_DWORD *)__n128 result = a2 - 252;
    if (a3 >= 0xFC) {
      *(_BYTE *)(result + 97) = 1;
    }
  }

  else
  {
    if (a3 >= 0xFC) {
      *(_BYTE *)(result + 97) = 0;
    }
    if (a2) {
      *(_BYTE *)(result + 96) = -(char)a2;
    }
  }

  return result;
}

uint64_t getEnumTag for SortDescriptor.AllowedComparison(uint64_t a1)
{
  uint64_t result = *(unsigned __int8 *)(a1 + 96);
  return result;
}

uint64_t destructiveInjectEnumTag for SortDescriptor.AllowedComparison(uint64_t result, unsigned int a2)
{
  if (a2 > 3)
  {
    unsigned int v2 = a2 - 4;
    *(_OWORD *)(result + 64) = 0u;
    *(_OWORD *)(result + 80) = 0u;
    *(_OWORD *)(result + 32) = 0u;
    *(_OWORD *)(result + 48) = 0u;
    *(_OWORD *)uint64_t result = 0u;
    *(_OWORD *)(result + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = 0u;
    LOBYTE(a2) = 4;
    *(_DWORD *)uint64_t result = v2;
  }

  *(_BYTE *)(result + 96) = a2;
  return result;
}

void base witness table accessor for Equatable in SortDescriptor<A>.AllowedComparison()
{
}

void base witness table accessor for Equatable in SortDescriptor<A>.CodingKeys()
{
}

void base witness table accessor for CustomDebugStringConvertible in SortDescriptor<A>.CodingKeys()
{
}

void base witness table accessor for CustomStringConvertible in SortDescriptor<A>.CodingKeys()
{
}

uint64_t type metadata accessor for SortDescriptor.AllowedComparison.CodingKeys( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata( a1,  a2,  a3,  a4,  (uint64_t)&nominal type descriptor for SortDescriptor.AllowedComparison.CodingKeys);
}

uint64_t sub_1835232BC()
{
  unsigned int v1 = *(unsigned __int8 *)(v0 + 112);
  if (v1 == 2)
  {
    __swift_destroy_boxed_opaque_existential_1(v0 + 16);
    swift_release();
    swift_release();
    swift_release();
LABEL_5:
    swift_release();
    return swift_deallocObject();
  }

  if (v1 <= 1) {
    goto LABEL_5;
  }
  return swift_deallocObject();
}

uint64_t storeEnumTagSinglePayload for SortDescriptor.AllowedComparison.CodingKeys( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    LODWORD(__swift_mutable_project_boxed_opaque_existential_1((uint64_t)v3, v4) = 1;
  }
  else {
    LODWORD(__swift_mutable_project_boxed_opaque_existential_1((uint64_t)v3, v4) = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFE) {
    return ((uint64_t (*)(void))((char *)&loc_1835233F8 + 4 * byte_183835CB9[v4]))();
  }
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_18352342C + 4 * byte_183835CB4[v4]))();
}

uint64_t sub_18352342C(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_183523434(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x18352343CLL);
  }
  return result;
}

uint64_t sub_183523448(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x183523450LL);
  }
  *(_BYTE *)uint64_t result = a2 + 1;
  return result;
}

uint64_t sub_183523454(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_18352345C(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

void base witness table accessor for Equatable in SortDescriptor<A>.AllowedComparison.CodingKeys()
{
}

void base witness table accessor for CustomDebugStringConvertible in SortDescriptor<A>.AllowedComparison.CodingKeys()
{
}

void base witness table accessor for CustomStringConvertible in SortDescriptor<A>.AllowedComparison.CodingKeys()
{
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay10Foundation4DateV21ComponentsFormatStyleV5FieldV6OptionOG_AF8CalendarV9ComponentOs5NeverOTg5015_s10Foundation4e3V21fgh138V5bound33_A95AAD4BE9B9AA48B183E68E3F6B3AACLL3for10relativeTo10movingDown18countingTowardZeroAcF_Sb22includedInRangeOfInputtSgAC_ACS2btFAA8k2V9l4OAE5i2V6J53Ocfu_33_29c7146c9c40ed4ad401dd5090de8340AuQTf3nnnpk_nTf1cn_nTm( uint64_t a1)
{
  int64_t v2 = *(void *)(a1 + 16);
  uint64_t result = MEMORY[0x18961AFE8];
  if (v2)
  {
    uint64_t v9 = MEMORY[0x18961AFE8];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v2, 0);
    uint64_t result = v9;
    uint64_t v4 = (char *)(a1 + 32);
    do
    {
      char v6 = *v4++;
      char v5 = v6;
      uint64_t v10 = result;
      unint64_t v8 = *(void *)(result + 16);
      unint64_t v7 = *(void *)(result + 24);
      if (v8 >= v7 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v7 > 1, v8 + 1, 1);
        uint64_t result = v10;
      }

      *(void *)(result + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = v8 + 1;
      *(_BYTE *)(result + v8 + 32) = 0x60504030A0201uLL >> (8 * v5);
      --v2;
    }

    while (v2);
  }

  return result;
}

unint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance Date.ComponentsFormatStyle.Field.Option@<X0>( unint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result = specialized Date.ComponentsFormatStyle.Field.Option.init(rawValue:)(*a1);
  *a2 = result;
  return result;
}

uint64_t protocol witness for Decodable.init(from:) in conformance Date.ComponentsFormatStyle.Field.Option()
{
  return RawRepresentable<>.init(from:)();
}

uint64_t protocol witness for Encodable.encode(to:) in conformance Date.ComponentsFormatStyle.Field.Option()
{
  return RawRepresentable<>.encode(to:)();
}

void protocol witness for static CaseIterable.allCases.getter in conformance Date.ComponentsFormatStyle.Field.Option( void *a1@<X8>)
{
  *a1 = &outlined read-only object #0 of static Date.ComponentsFormatStyle.Field.Option.allCases.getter;
}

void static Date.ComponentsFormatStyle.Field.minute.getter(_BYTE *a1@<X8>)
{
  *a1 = 5;
}

void static Date.ComponentsFormatStyle.Field.second.getter(_BYTE *a1@<X8>)
{
  *a1 = 6;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance Date.ComponentsFormatStyle.Field.CodingKeys()
{
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance Date.ComponentsFormatStyle.Field.CodingKeys()
{
  return CodingKey.debugDescription.getter();
}

uint64_t Date.ComponentsFormatStyle.Field.encode(to:)(void *a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<Date.ComponentsFormatStyle.Field.CodingKeys>);
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x1895F8858](v3);
  char v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  char v7 = *v1;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type Date.ComponentsFormatStyle.Field.CodingKeys and conformance Date.ComponentsFormatStyle.Field.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  char v10 = v7;
  lazy protocol witness table accessor for type Date.ComponentsFormatStyle.Field.Option and conformance Date.ComponentsFormatStyle.Field.Option();
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

unint64_t lazy protocol witness table accessor for type Date.ComponentsFormatStyle.Field.CodingKeys and conformance Date.ComponentsFormatStyle.Field.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type Date.ComponentsFormatStyle.Field.CodingKeys and conformance Date.ComponentsFormatStyle.Field.CodingKeys;
  if (!lazy protocol witness table cache variable for type Date.ComponentsFormatStyle.Field.CodingKeys and conformance Date.ComponentsFormatStyle.Field.CodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for Date.ComponentsFormatStyle.Field.CodingKeys,  &unk_189C99028);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Date.ComponentsFormatStyle.Field.CodingKeys and conformance Date.ComponentsFormatStyle.Field.CodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type Date.ComponentsFormatStyle.Field.CodingKeys and conformance Date.ComponentsFormatStyle.Field.CodingKeys;
  if (!lazy protocol witness table cache variable for type Date.ComponentsFormatStyle.Field.CodingKeys and conformance Date.ComponentsFormatStyle.Field.CodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for Date.ComponentsFormatStyle.Field.CodingKeys,  &unk_189C99028);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Date.ComponentsFormatStyle.Field.CodingKeys and conformance Date.ComponentsFormatStyle.Field.CodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type Date.ComponentsFormatStyle.Field.CodingKeys and conformance Date.ComponentsFormatStyle.Field.CodingKeys;
  if (!lazy protocol witness table cache variable for type Date.ComponentsFormatStyle.Field.CodingKeys and conformance Date.ComponentsFormatStyle.Field.CodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for Date.ComponentsFormatStyle.Field.CodingKeys,  &unk_189C99028);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Date.ComponentsFormatStyle.Field.CodingKeys and conformance Date.ComponentsFormatStyle.Field.CodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type Date.ComponentsFormatStyle.Field.CodingKeys and conformance Date.ComponentsFormatStyle.Field.CodingKeys;
  if (!lazy protocol witness table cache variable for type Date.ComponentsFormatStyle.Field.CodingKeys and conformance Date.ComponentsFormatStyle.Field.CodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for Date.ComponentsFormatStyle.Field.CodingKeys,  &unk_189C99028);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Date.ComponentsFormatStyle.Field.CodingKeys and conformance Date.ComponentsFormatStyle.Field.CodingKeys);
  }

  return result;
}

unint64_t lazy protocol witness table accessor for type Date.ComponentsFormatStyle.Field.Option and conformance Date.ComponentsFormatStyle.Field.Option()
{
  unint64_t result = lazy protocol witness table cache variable for type Date.ComponentsFormatStyle.Field.Option and conformance Date.ComponentsFormatStyle.Field.Option;
  if (!lazy protocol witness table cache variable for type Date.ComponentsFormatStyle.Field.Option and conformance Date.ComponentsFormatStyle.Field.Option)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for Date.ComponentsFormatStyle.Field.Option,  &type metadata for Date.ComponentsFormatStyle.Field.Option);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Date.ComponentsFormatStyle.Field.Option and conformance Date.ComponentsFormatStyle.Field.Option);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type Date.ComponentsFormatStyle.Field.Option and conformance Date.ComponentsFormatStyle.Field.Option;
  if (!lazy protocol witness table cache variable for type Date.ComponentsFormatStyle.Field.Option and conformance Date.ComponentsFormatStyle.Field.Option)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for Date.ComponentsFormatStyle.Field.Option,  &type metadata for Date.ComponentsFormatStyle.Field.Option);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Date.ComponentsFormatStyle.Field.Option and conformance Date.ComponentsFormatStyle.Field.Option);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type Date.ComponentsFormatStyle.Field.Option and conformance Date.ComponentsFormatStyle.Field.Option;
  if (!lazy protocol witness table cache variable for type Date.ComponentsFormatStyle.Field.Option and conformance Date.ComponentsFormatStyle.Field.Option)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for Date.ComponentsFormatStyle.Field.Option,  &type metadata for Date.ComponentsFormatStyle.Field.Option);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Date.ComponentsFormatStyle.Field.Option and conformance Date.ComponentsFormatStyle.Field.Option);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type Date.ComponentsFormatStyle.Field.Option and conformance Date.ComponentsFormatStyle.Field.Option;
  if (!lazy protocol witness table cache variable for type Date.ComponentsFormatStyle.Field.Option and conformance Date.ComponentsFormatStyle.Field.Option)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for Date.ComponentsFormatStyle.Field.Option,  &type metadata for Date.ComponentsFormatStyle.Field.Option);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Date.ComponentsFormatStyle.Field.Option and conformance Date.ComponentsFormatStyle.Field.Option);
  }

  return result;
}

uint64_t Date.ComponentsFormatStyle.Field.init(from:)@<X0>(void *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<Date.ComponentsFormatStyle.Field.CodingKeys>);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1895F8858](v5);
  unint64_t v8 = (char *)&v10 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type Date.ComponentsFormatStyle.Field.CodingKeys and conformance Date.ComponentsFormatStyle.Field.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v2)
  {
    lazy protocol witness table accessor for type Date.ComponentsFormatStyle.Field.Option and conformance Date.ComponentsFormatStyle.Field.Option();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    *a2 = v11;
  }

  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t protocol witness for Decodable.init(from:) in conformance Date.ComponentsFormatStyle.Field@<X0>( void *a1@<X0>, _BYTE *a2@<X8>)
{
  return Date.ComponentsFormatStyle.Field.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance Date.ComponentsFormatStyle.Field( void *a1)
{
  return Date.ComponentsFormatStyle.Field.encode(to:)(a1);
}

uint64_t protocol witness for Decodable.init(from:) in conformance Date.ComponentsFormatStyle.Style.Option()
{
  return RawRepresentable<>.init(from:)();
}

uint64_t protocol witness for Encodable.encode(to:) in conformance Date.ComponentsFormatStyle.Style.Option()
{
  return RawRepresentable<>.encode(to:)();
}

void static Date.ComponentsFormatStyle.Style.wide.getter(_BYTE *a1@<X8>)
{
  *a1 = 0;
}

void static Date.ComponentsFormatStyle.Style.abbreviated.getter(_BYTE *a1@<X8>)
{
  *a1 = 2;
}

void static Date.ComponentsFormatStyle.Style.condensedAbbreviated.getter(_BYTE *a1@<X8>)
{
  *a1 = 3;
}

void static Date.ComponentsFormatStyle.Style.narrow.getter(_BYTE *a1@<X8>)
{
  *a1 = 1;
}

void static Date.ComponentsFormatStyle.Style.spellOut.getter(_BYTE *a1@<X8>)
{
  *a1 = 4;
}

void Date.ComponentsFormatStyle.Style.hash(into:)()
{
}

BOOL static Date.ComponentsFormatStyle.Style.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance Date.ComponentsFormatStyle.Style.CodingKeys()
{
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance Date.ComponentsFormatStyle.Style.CodingKeys()
{
  return CodingKey.debugDescription.getter();
}

uint64_t Date.ComponentsFormatStyle.Style.encode(to:)(void *a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<Date.ComponentsFormatStyle.Style.CodingKeys>);
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x1895F8858](v3);
  uint64_t v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  char v7 = *v1;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type Date.ComponentsFormatStyle.Style.CodingKeys and conformance Date.ComponentsFormatStyle.Style.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  char v10 = v7;
  lazy protocol witness table accessor for type Date.ComponentsFormatStyle.Style.Option and conformance Date.ComponentsFormatStyle.Style.Option();
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

unint64_t lazy protocol witness table accessor for type Date.ComponentsFormatStyle.Style.CodingKeys and conformance Date.ComponentsFormatStyle.Style.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type Date.ComponentsFormatStyle.Style.CodingKeys and conformance Date.ComponentsFormatStyle.Style.CodingKeys;
  if (!lazy protocol witness table cache variable for type Date.ComponentsFormatStyle.Style.CodingKeys and conformance Date.ComponentsFormatStyle.Style.CodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for Date.ComponentsFormatStyle.Style.CodingKeys,  &unk_189C98F08);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Date.ComponentsFormatStyle.Style.CodingKeys and conformance Date.ComponentsFormatStyle.Style.CodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type Date.ComponentsFormatStyle.Style.CodingKeys and conformance Date.ComponentsFormatStyle.Style.CodingKeys;
  if (!lazy protocol witness table cache variable for type Date.ComponentsFormatStyle.Style.CodingKeys and conformance Date.ComponentsFormatStyle.Style.CodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for Date.ComponentsFormatStyle.Style.CodingKeys,  &unk_189C98F08);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Date.ComponentsFormatStyle.Style.CodingKeys and conformance Date.ComponentsFormatStyle.Style.CodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type Date.ComponentsFormatStyle.Style.CodingKeys and conformance Date.ComponentsFormatStyle.Style.CodingKeys;
  if (!lazy protocol witness table cache variable for type Date.ComponentsFormatStyle.Style.CodingKeys and conformance Date.ComponentsFormatStyle.Style.CodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for Date.ComponentsFormatStyle.Style.CodingKeys,  &unk_189C98F08);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Date.ComponentsFormatStyle.Style.CodingKeys and conformance Date.ComponentsFormatStyle.Style.CodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type Date.ComponentsFormatStyle.Style.CodingKeys and conformance Date.ComponentsFormatStyle.Style.CodingKeys;
  if (!lazy protocol witness table cache variable for type Date.ComponentsFormatStyle.Style.CodingKeys and conformance Date.ComponentsFormatStyle.Style.CodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for Date.ComponentsFormatStyle.Style.CodingKeys,  &unk_189C98F08);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Date.ComponentsFormatStyle.Style.CodingKeys and conformance Date.ComponentsFormatStyle.Style.CodingKeys);
  }

  return result;
}

unint64_t lazy protocol witness table accessor for type Date.ComponentsFormatStyle.Style.Option and conformance Date.ComponentsFormatStyle.Style.Option()
{
  unint64_t result = lazy protocol witness table cache variable for type Date.ComponentsFormatStyle.Style.Option and conformance Date.ComponentsFormatStyle.Style.Option;
  if (!lazy protocol witness table cache variable for type Date.ComponentsFormatStyle.Style.Option and conformance Date.ComponentsFormatStyle.Style.Option)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for Date.ComponentsFormatStyle.Style.Option,  &unk_189C98E78);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Date.ComponentsFormatStyle.Style.Option and conformance Date.ComponentsFormatStyle.Style.Option);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type Date.ComponentsFormatStyle.Style.Option and conformance Date.ComponentsFormatStyle.Style.Option;
  if (!lazy protocol witness table cache variable for type Date.ComponentsFormatStyle.Style.Option and conformance Date.ComponentsFormatStyle.Style.Option)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for Date.ComponentsFormatStyle.Style.Option,  &unk_189C98E78);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Date.ComponentsFormatStyle.Style.Option and conformance Date.ComponentsFormatStyle.Style.Option);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type Date.ComponentsFormatStyle.Style.Option and conformance Date.ComponentsFormatStyle.Style.Option;
  if (!lazy protocol witness table cache variable for type Date.ComponentsFormatStyle.Style.Option and conformance Date.ComponentsFormatStyle.Style.Option)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for Date.ComponentsFormatStyle.Style.Option,  &unk_189C98E78);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Date.ComponentsFormatStyle.Style.Option and conformance Date.ComponentsFormatStyle.Style.Option);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type Date.ComponentsFormatStyle.Style.Option and conformance Date.ComponentsFormatStyle.Style.Option;
  if (!lazy protocol witness table cache variable for type Date.ComponentsFormatStyle.Style.Option and conformance Date.ComponentsFormatStyle.Style.Option)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for Date.ComponentsFormatStyle.Style.Option,  &unk_189C98E78);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Date.ComponentsFormatStyle.Style.Option and conformance Date.ComponentsFormatStyle.Style.Option);
  }

  return result;
}

uint64_t Date.ComponentsFormatStyle.Style.init(from:)@<X0>(void *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<Date.ComponentsFormatStyle.Style.CodingKeys>);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1895F8858](v5);
  unint64_t v8 = (char *)&v10 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type Date.ComponentsFormatStyle.Style.CodingKeys and conformance Date.ComponentsFormatStyle.Style.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v2)
  {
    lazy protocol witness table accessor for type Date.ComponentsFormatStyle.Style.Option and conformance Date.ComponentsFormatStyle.Style.Option();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    *a2 = v11;
  }

  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t protocol witness for Decodable.init(from:) in conformance Date.ComponentsFormatStyle.Style@<X0>( void *a1@<X0>, _BYTE *a2@<X8>)
{
  return Date.ComponentsFormatStyle.Style.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance Date.ComponentsFormatStyle.Style( void *a1)
{
  return Date.ComponentsFormatStyle.Style.encode(to:)(a1);
}

void Date.ComponentsFormatStyle.style.getter(_BYTE *a1@<X8>)
{
  *a1 = *v1;
}

_BYTE *Date.ComponentsFormatStyle.style.setter(_BYTE *result)
{
  *__int16 v1 = *result;
  return result;
}

uint64_t (*Date.ComponentsFormatStyle.style.modify())(void, void)
{
  return destructiveProjectEnumData for PredicateCodableError;
}

uint64_t Date.ComponentsFormatStyle.fields.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t Date.ComponentsFormatStyle.fields.setter(uint64_t a1)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v1 + 8) = a1;
  return result;
}

uint64_t (*Date.ComponentsFormatStyle.fields.modify())(void, void)
{
  return destructiveProjectEnumData for PredicateCodableError;
}

uint64_t Date.ComponentsFormatStyle.calendar.getter@<X0>(_OWORD *a1@<X8>)
{
  *a1 = *(_OWORD *)(v1 + 16);
  return swift_unknownObjectRetain();
}

__n128 Date.ComponentsFormatStyle.calendar.setter(__n128 *a1)
{
  __n128 result = *a1;
  v1[1] = *a1;
  return result;
}

uint64_t (*Date.ComponentsFormatStyle.calendar.modify())(void, void)
{
  return destructiveProjectEnumData for PredicateCodableError;
}

uint64_t Date.ComponentsFormatStyle.locale.getter@<X0>(_OWORD *a1@<X8>)
{
  *a1 = *(_OWORD *)(v1 + 32);
  return swift_unknownObjectRetain();
}

__n128 Date.ComponentsFormatStyle.locale.setter(__n128 *a1)
{
  __n128 result = *a1;
  v1[2] = *a1;
  return result;
}

uint64_t (*Date.ComponentsFormatStyle.locale.modify())(void, void)
{
  return destructiveProjectEnumData for PredicateCodableError;
}

uint64_t Date.ComponentsFormatStyle.isPositive.getter()
{
  return *(unsigned __int8 *)(v0 + 48);
}

uint64_t Date.ComponentsFormatStyle.isPositive.setter(uint64_t result)
{
  *(_BYTE *)(v1 + 48) = result;
  return result;
}

uint64_t (*Date.ComponentsFormatStyle.isPositive.modify())(void, void)
{
  return destructiveProjectEnumData for PredicateCodableError;
}

__n128 Date.ComponentsFormatStyle.init(style:locale:calendar:fields:)@<Q0>( _BYTE *a1@<X0>, __int128 *a2@<X1>, __n128 *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  *(_BYTE *)a5 = *a1;
  *(void *)(a5 + 8) = a4;
  __n128 result = *a3;
  __int128 v6 = *a2;
  *(__n128 *)(a5 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = *a3;
  *(_OWORD *)(a5 + 32) = v6;
  *(_BYTE *)(a5 + 48) = 1;
  return result;
}

uint64_t Date.ComponentsFormatStyle.format(_:)(double *a1)
{
  double v2 = *a1;
  double v3 = a1[1];
  uint64_t v142 = *(char *)v1;
  LODWORD(__swift_mutable_project_boxed_opaque_existential_1((uint64_t)v3, v4) = *(unsigned __int8 *)v1;
  uint64_t v6 = v1[1];
  uint64_t v5 = v1[2];
  uint64_t v7 = v1[4];
  uint64_t v147 = v1[3];
  uint64_t v8 = v1[5];
  LODWORD(v1) = *((unsigned __int8 *)v1 + 48);
  if (one-time initialization token for cache != -1) {
    goto LABEL_88;
  }
  while (1)
  {
    uint64_t v9 = *(void *)algn_18C5D6428;
    uint64_t v144 = static Date.ComponentsFormatStyle.cache;
    uint64_t v10 = (uint64_t *)(*(void *)algn_18C5D6428 + 16LL);
    char v11 = (os_unfair_lock_s *)(*(void *)algn_18C5D6428 + 24LL);
    swift_retain_n();
    os_unfair_lock_lock(v11);
    LOBYTE(v156[0]) = (_BYTE)v4;
    v156[1] = v6;
    v156[2] = v5;
    void v156[3] = v147;
    v156[4] = v7;
    v156[5] = v8;
    int v146 = (int)v1;
    LOBYTE(v156[6]) = (_BYTE)v1;
    int v12 = (int)v4;
    uint64_t v13 = (char *)specialized closure #1 in FormatterCache.formatter(for:creator:)(v10, (unsigned __int8 *)v156);
    os_unfair_lock_unlock(v11);
    swift_release();
    uint64_t v150 = v6;
    if (v13)
    {
      swift_release();
      uint64_t v14 = v13;
      uint64_t v15 = v5;
      int v16 = v146;
      uint64_t v17 = v147;
      goto LABEL_125;
    }

    lock = v11;
    __int128 v136 = v10;
    int __src = v12;
    uint64_t v4 = (char *)objc_msgSend(objc_allocWithZone((Class)NSDateComponentsFormatter), sel_init);
    *(void *)&__dst[0] = v5;
    *(void *)&__dst[1] = v147;
    v156[0] = v7;
    v156[1] = v8;
    uint64_t v145 = v5;
    swift_unknownObjectRetain();
    swift_unknownObjectRetain();
    Calendar.locale.setter(v156);
    uint64_t ObjectType = swift_getObjectType();
    __int128 v19 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v147 + 216))(ObjectType, v147);
    objc_msgSend(v4, sel_setCalendar_, v19);

    objc_msgSend(v4, sel_setUnitsStyle_, qword_1838369B0[v142]);
    uint64_t v140 = v9;
    if (!v6) {
      break;
    }
    uint64_t v20 = v6;
    uint64_t v6 = *(void *)(v6 + 16);
    uint64_t v1 = (uint64_t *)MEMORY[0x18961AFE8];
    if (!v6)
    {
      uint64_t v30 = v144;
      uint64_t v31 = v147;
      uint64_t v46 = *(void *)(MEMORY[0x18961AFE8] + 16LL);
      if (!v46) {
        goto LABEL_33;
      }
LABEL_27:
      uint64_t v6 = 0LL;
      uint64_t v47 = v1 + 4;
      do
      {
        uint64_t v49 = *v47++;
        uint64_t v48 = v49;
        if ((v49 & ~v6) == 0) {
          uint64_t v48 = 0LL;
        }
        v6 |= v48;
        --v46;
      }

      while (v46);
LABEL_34:
      swift_bridgeObjectRelease();
      goto LABEL_67;
    }

    uint64_t v130 = v5;
    uint64_t v131 = v4;
    uint64_t v133 = v8;
    uint64_t v142 = v7;
    v156[0] = MEMORY[0x18961AFE8];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v6, 0);
    uint64_t v1 = (uint64_t *)v156[0];
    int64_t v21 = specialized Set.startIndex.getter(v20);
    LODWORD(__swift_mutable_project_boxed_opaque_existential_1((uint64_t)v3, v4) = v22;
    uint64_t v5 = v23 & 1;
    uint64_t v7 = v20 + 56;
    uint64_t v24 = v20;
    while ((v21 & 0x8000000000000000LL) == 0 && v21 < 1LL << *(_BYTE *)(v24 + 32))
    {
      if (*(_DWORD *)(v24 + 36) != (_DWORD)v4) {
        goto LABEL_81;
      }
      uint64_t v8 = qword_1838369E0[*(char *)(*(void *)(v24 + 48) + v21)];
      v156[0] = (uint64_t)v1;
      unint64_t v26 = v1[2];
      unint64_t v25 = v1[3];
      if (v26 >= v25 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v25 > 1, v26 + 1, 1);
        uint64_t v24 = v150;
        uint64_t v1 = (uint64_t *)v156[0];
      }

      v1[2] = v26 + 1;
      v1[v26 + 4] = v8;
      int64_t v27 = specialized _NativeSet.index(after:)(v21, (int)v4, v5 & 1, v24);
      uint64_t v24 = v150;
      int64_t v21 = v27;
      LODWORD(__swift_mutable_project_boxed_opaque_existential_1((uint64_t)v3, v4) = v28;
      uint64_t v5 = v29 & 1;
      if (!--v6)
      {
        outlined consume of Set<Calendar.Component>.Index._Variant(v27, v28, v29 & 1);
        uint64_t v5 = v145;
        uint64_t v31 = v147;
        uint64_t v7 = v142;
        uint64_t v30 = v144;
        uint64_t v4 = v131;
        uint64_t v8 = v133;
        uint64_t v46 = v1[2];
        if (v46) {
          goto LABEL_27;
        }
LABEL_33:
        uint64_t v6 = 0LL;
        goto LABEL_34;
      }
    }

    __break(1u);
LABEL_80:
    __break(1u);
LABEL_81:
    __break(1u);
LABEL_82:
    __break(1u);
LABEL_83:
    __break(1u);
LABEL_84:
    __break(1u);
LABEL_85:
    __break(1u);
LABEL_86:
    __break(1u);
LABEL_87:
    __break(1u);
LABEL_88:
    swift_once();
  }

  uint64_t v30 = v144;
  uint64_t v31 = v147;
  uint64_t v32 = lock;
  if (__src != 5) {
    goto LABEL_68;
  }
  uint64_t v130 = v5;
  unint64_t v132 = v4;
  uint64_t v134 = v8;
  uint64_t v142 = v7;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<Calendar.Component>);
  uint64_t v33 = static _SetStorage.allocate(capacity:)();
  uint64_t v4 = 0LL;
  uint64_t v34 = v33 + 56;
  uint64_t v5 = (uint64_t)outlined read-only object #1 of Date.ComponentsFormatStyle.format(_:);
  uint64_t v7 = -1LL;
  do
  {
    uint64_t v6 = outlined read-only object #1 of Date.ComponentsFormatStyle.format(_:)[(void)v4 + 32];
    Hasher.init(_seed:)();
    Hasher._combine(_:)(v6);
    uint64_t v1 = v156;
    Swift::Int v35 = Hasher._finalize()();
    uint64_t v36 = -1LL << *(_BYTE *)(v33 + 32);
    unint64_t v37 = v35 & ~v36;
    unint64_t v38 = v37 >> 6;
    uint64_t v39 = *(void *)(v34 + 8 * (v37 >> 6));
    uint64_t v40 = 1LL << v37;
    uint64_t v41 = *(void *)(v33 + 48);
    if (((1LL << v37) & v39) != 0)
    {
      uint64_t v42 = ~v36;
      while (1)
      {
        unint64_t v37 = (v37 + 1) & v42;
        unint64_t v38 = v37 >> 6;
        uint64_t v39 = *(void *)(v34 + 8 * (v37 >> 6));
        uint64_t v40 = 1LL << v37;
        if ((v39 & (1LL << v37)) == 0) {
          break;
        }
      }
    }

    *(void *)(v34 + 8 * v38) = v40 | v39;
    *(_BYTE *)(v41 + v37) = v6;
    uint64_t v43 = *(void *)(v33 + 16);
    BOOL v44 = __OFADD__(v43, 1LL);
    uint64_t v45 = v43 + 1;
    if (v44) {
      goto LABEL_85;
    }
    *(void *)(v33 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = v45;
LABEL_17:
    ++v4;
  }

  while (v4 != (char *)3);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<Calendar.Component, NSCalendarUnit>);
  uint64_t v1 = (uint64_t *)static _DictionaryStorage.allocate(capacity:)();
  uint64_t v50 = 0LL;
  uint64_t v5 = (uint64_t)(v1 + 8);
  uint64_t v7 = (uint64_t)outlined read-only object #0 of Date.ComponentsFormatStyle.format(_:);
  do
  {
    LODWORD(__swift_mutable_project_boxed_opaque_existential_1((uint64_t)v3, v4) = outlined read-only object #0 of Date.ComponentsFormatStyle.format(_:)[v50 + 32];
    if ((_DWORD)v4 == 18) {
      break;
    }
    uint64_t v8 = *(void *)&outlined read-only object #0 of Date.ComponentsFormatStyle.format(_:)[v50 + 40];
    unint64_t v51 = specialized __RawDictionaryStorage.find<A>(_:)(outlined read-only object #0 of Date.ComponentsFormatStyle.format(_:)[v50 + 32]);
    if ((v52 & 1) != 0) {
      goto LABEL_86;
    }
    *(void *)(v5 + ((v51 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v51;
    *(_BYTE *)(v1[6] + v51) = (_BYTE)v4;
    *(void *)(v1[7] + 8 * v51) = v8;
    uint64_t v53 = v1[2];
    BOOL v44 = __OFADD__(v53, 1LL);
    uint64_t v54 = v53 + 1;
    if (v44) {
      goto LABEL_87;
    }
    v1[2] = v54;
    v50 += 16LL;
  }

  while (v50 != 256);
  uint64_t v5 = 0LL;
  uint64_t v6 = 0LL;
  uint64_t v55 = 1LL << *(_BYTE *)(v33 + 32);
  uint64_t v56 = *(void *)(v33 + 56);
  uint64_t v57 = -1LL;
  if (v55 < 64) {
    uint64_t v57 = ~(-1LL << v55);
  }
  unint64_t v58 = v57 & v56;
  uint64_t v4 = (char *)((unint64_t)(v55 + 63) >> 6);
  if ((v57 & v56) != 0)
  {
LABEL_43:
    unint64_t v59 = __clz(__rbit64(v58));
    v58 &= v58 - 1;
    unint64_t v60 = v59 | (v5 << 6);
    if (!v1[2]) {
      goto LABEL_82;
    }
    goto LABEL_61;
  }

  while (1)
  {
    uint64_t v61 = v5 + 1;
    if (__OFADD__(v5, 1LL)) {
      goto LABEL_84;
    }
    unint64_t v62 = *(void *)(v34 + 8 * v61);
    ++v5;
    if (!v62)
    {
      uint64_t v5 = v61 + 1;
      unint64_t v62 = *(void *)(v34 + 8 * v5);
      if (!v62)
      {
        uint64_t v5 = v61 + 2;
        unint64_t v62 = *(void *)(v34 + 8 * v5);
        if (!v62)
        {
          uint64_t v5 = v61 + 3;
          unint64_t v62 = *(void *)(v34 + 8 * v5);
          if (!v62) {
            break;
          }
        }
      }
    }

uint64_t Date.ComponentsFormatStyle.calendar(_:)@<X0>(_OWORD *a1@<X0>, uint64_t a2@<X8>)
{
  char v5 = *v2;
  char v6 = v2[48];
  uint64_t v7 = swift_bridgeObjectRetain();
  *(_BYTE *)a2 = v5;
  *(void *)(a2 + 8) = v7;
  __int128 v8 = *((_OWORD *)v2 + 2);
  *(_OWORD *)(a2 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = *a1;
  *(_OWORD *)(a2 + 32) = v8;
  *(_BYTE *)(a2 + 48) = v6;
  swift_unknownObjectRetain();
  return swift_unknownObjectRetain();
}

uint64_t Date.ComponentsFormatStyle.locale(_:)@<X0>(__int128 *a1@<X0>, uint64_t a2@<X8>)
{
  char v5 = *v2;
  uint64_t v6 = *((void *)v2 + 1);
  char v7 = v2[48];
  swift_bridgeObjectRetain();
  __int128 v10 = *((_OWORD *)v2 + 1);
  swift_unknownObjectRetain();
  *(_BYTE *)a2 = v5;
  *(void *)(a2 + 8) = v6;
  __int128 v8 = *a1;
  *(_OWORD *)(a2 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = v10;
  *(_OWORD *)(a2 + 32) = v8;
  *(_BYTE *)(a2 + 48) = v7;
  return swift_unknownObjectRetain();
}

void Date.ComponentsFormatStyle.hash(into:)(uint64_t a1)
{
  void (*v12)(void *__return_ptr, uint64_t, uint64_t);
  Swift::UInt8 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _BYTE *v18;
  uint64_t v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  id v25;
  id v26;
  id v27;
  id v28;
  id v29;
  id v30;
  id v31;
  id v32;
  id v33;
  id v34;
  id v35;
  id v36;
  id v37;
  uint64_t v38;
  uint64_t v39;
  Swift::UInt v40;
  Swift::UInt v41;
  Swift::UInt8 v42;
  Swift::UInt8 v43;
  Swift::UInt8 v44;
  Swift::UInt8 v45;
  _BYTE v46[144];
  _BYTE v47[8];
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  void *v53;
  void *v54;
  void *v55;
  void *v56;
  void *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char v61;
  char v62;
  char v63;
  char v64;
  void v65[18];
  _BYTE v66[144];
  _BYTE v67[152];
  uint64_t v3 = *((void *)v1 + 1);
  uint64_t v4 = *((void *)v1 + 3);
  uint64_t v5 = *((void *)v1 + 5);
  Swift::UInt8 v6 = v1[48];
  Hasher._combine(_:)(*v1);
  if (v3)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    specialized Set.hash(into:)(a1, v3);
    swift_bridgeObjectRelease();
  }

  else
  {
    Hasher._combine(_:)(0);
  }

  uint64_t ObjectType = swift_getObjectType();
  __int128 v8 = *(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 120);
  swift_unknownObjectRetain();
  v8(a1, ObjectType, v4);
  swift_unknownObjectRelease();
  uint64_t v9 = swift_getObjectType();
  __int128 v10 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 48);
  swift_unknownObjectRetain();
  if ((v10(v9, v5) & 1) != 0)
  {
    Swift::UInt8 v11 = 1;
LABEL_8:
    Hasher._combine(_:)(v11);
    goto LABEL_61;
  }

  Hasher._combine(_:)(0);
  (*(void (**)(uint64_t, uint64_t))(v5 + 64))(v9, v5);
  String.hash(into:)();
  swift_bridgeObjectRelease();
  int v12 = *(void (**)(void *__return_ptr, uint64_t, uint64_t))(v5 + 464);
  swift_unknownObjectRetain();
  v12(v65, v9, v5);
  swift_unknownObjectRelease();
  outlined init with take of LocalePreferences?( (uint64_t)v65,  (uint64_t)v66,  (uint64_t *)&demangling cache variable for type metadata for LocalePreferences?);
  outlined init with take of LocalePreferences?( (uint64_t)v66,  (uint64_t)v67,  (uint64_t *)&demangling cache variable for type metadata for LocalePreferences?);
  if (_s10Foundation17LocalePreferencesVSgWOg((uint64_t)v67) == 1)
  {
    Swift::UInt8 v11 = 0;
    goto LABEL_8;
  }

  outlined init with take of LocalePreferences?( (uint64_t)v66,  (uint64_t)v47,  (uint64_t *)&demangling cache variable for type metadata for LocalePreferences?);
  Hasher._combine(_:)(1u);
  if (v47[0] == 2)
  {
    uint64_t v13 = 0;
  }

  else
  {
    uint64_t v13 = v47[0] & 1;
    Hasher._combine(_:)(1u);
  }

  Hasher._combine(_:)(v13);
  uint64_t v14 = v48;
  if (!v48)
  {
    Hasher._combine(_:)(0);
    __int128 v18 = v47;
    goto LABEL_22;
  }

  Hasher._combine(_:)(1u);
  Hasher._combine(_:)(*(void *)(v14 + 16));
  uint64_t v15 = *(void *)(v14 + 16);
  if (!v15)
  {
    outlined init with take of LocalePreferences?( (uint64_t)v66,  (uint64_t)v46,  (uint64_t *)&demangling cache variable for type metadata for LocalePreferences?);
    __int128 v18 = v46;
LABEL_22:
    outlined retain of LocalePreferences(v18);
    if (!v49) {
      goto LABEL_17;
    }
    goto LABEL_23;
  }

  outlined retain of LocalePreferences?( (uint64_t)v66,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined copy of LocalePreferences?);
  swift_bridgeObjectRetain();
  int v16 = v14 + 40;
  do
  {
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    v16 += 16LL;
    --v15;
  }

  while (v15);
  swift_bridgeObjectRelease();
  if (!v49)
  {
LABEL_17:
    Hasher._combine(_:)(0);
    if (!v50) {
      goto LABEL_18;
    }
LABEL_24:
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    uint64_t v17 = v51;
    if (!v51) {
      goto LABEL_19;
    }
    goto LABEL_25;
  }

uint64_t protocol witness for CodingKey.stringValue.getter in conformance Date.ComponentsFormatStyle.CodingKeys()
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1835256E4 + 4 * byte_183836150[*v0]))( 0x656C797473LL,  0xE500000000000000LL);
}

uint64_t sub_1835256E4()
{
  return 0x73646C656966LL;
}

uint64_t sub_1835256F8()
{
  return 0x7261646E656C6163LL;
}

uint64_t sub_183525710()
{
  return 0x656C61636F6CLL;
}

uint64_t sub_183525724()
{
  return 0x697469736F507369LL;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance Date.ComponentsFormatStyle.CodingKeys@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result = specialized Date.ComponentsFormatStyle.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance Date.ComponentsFormatStyle.CodingKeys()
{
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance Date.ComponentsFormatStyle.CodingKeys()
{
  return CodingKey.debugDescription.getter();
}

uint64_t Date.ComponentsFormatStyle.encode(to:)(void *a1)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<Date.ComponentsFormatStyle.CodingKeys>);
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1895F8858](v4);
  char v7 = (char *)&v11 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  char v8 = *v1;
  uint64_t v13 = *((void *)v1 + 1);
  __int128 v9 = *((_OWORD *)v1 + 1);
  __int128 v11 = *((_OWORD *)v1 + 2);
  __int128 v12 = v9;
  int v15 = v1[48];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type Date.ComponentsFormatStyle.CodingKeys and conformance Date.ComponentsFormatStyle.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  LOBYTE(v14) = v8;
  char v16 = 0;
  lazy protocol witness table accessor for type Date.ComponentsFormatStyle.Style and conformance Date.ComponentsFormatStyle.Style();
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v2)
  {
    *(void *)&__int128 v14 = v13;
    char v16 = 1;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Set<Date.ComponentsFormatStyle.Field>);
    lazy protocol witness table accessor for type Set<Date.ComponentsFormatStyle.Field> and conformance <> Set<A>( &lazy protocol witness table cache variable for type Set<Date.ComponentsFormatStyle.Field> and conformance <> Set<A>,  (uint64_t (*)(void))lazy protocol witness table accessor for type Date.ComponentsFormatStyle.Field and conformance Date.ComponentsFormatStyle.Field,  MEMORY[0x1896186F8]);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    __int128 v14 = v12;
    char v16 = 2;
    lazy protocol witness table accessor for type Calendar and conformance Calendar();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    __int128 v14 = v11;
    char v16 = 3;
    lazy protocol witness table accessor for type Locale and conformance Locale();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    LOBYTE(v14) = 4;
    KeyedEncodingContainer.encode(_:forKey:)();
  }

  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

Swift::Int Date.ComponentsFormatStyle.hashValue.getter()
{
  void (*v11)(void *__return_ptr, uint64_t, uint64_t);
  Swift::UInt8 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _BYTE *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  id v24;
  id v25;
  id v26;
  id v27;
  id v28;
  id v29;
  id v30;
  id v31;
  id v32;
  id v33;
  id v34;
  id v35;
  id v36;
  uint64_t v37;
  uint64_t v38;
  Swift::UInt v39;
  Swift::UInt v40;
  Swift::UInt8 v41;
  Swift::UInt8 v42;
  Swift::UInt8 v43;
  _BYTE v45[144];
  _BYTE v46[8];
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  void *v52;
  void *v53;
  void *v54;
  void *v55;
  void *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char v60;
  char v61;
  char v62;
  char v63;
  void v64[18];
  _BYTE v65[144];
  _BYTE v66[144];
  _BYTE v67[80];
  Swift::UInt v1 = *v0;
  uint64_t v2 = *((void *)v0 + 1);
  uint64_t v3 = *((void *)v0 + 3);
  uint64_t v4 = *((void *)v0 + 5);
  Swift::UInt8 v5 = v0[48];
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  if (v2)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    specialized Set.hash(into:)(v67, v2);
    swift_bridgeObjectRelease();
  }

  else
  {
    Hasher._combine(_:)(0);
  }

  uint64_t ObjectType = swift_getObjectType();
  char v7 = *(void (**)(_BYTE *, uint64_t, uint64_t))(v3 + 120);
  swift_unknownObjectRetain();
  v7(v67, ObjectType, v3);
  swift_unknownObjectRelease();
  uint64_t v8 = swift_getObjectType();
  __int128 v9 = *(uint64_t (**)(uint64_t, uint64_t))(v4 + 48);
  swift_unknownObjectRetain();
  if ((v9(v8, v4) & 1) != 0)
  {
    Swift::UInt8 v10 = 1;
LABEL_8:
    Hasher._combine(_:)(v10);
    goto LABEL_59;
  }

  Hasher._combine(_:)(0);
  (*(void (**)(uint64_t, uint64_t))(v4 + 64))(v8, v4);
  String.hash(into:)();
  swift_bridgeObjectRelease();
  __int128 v11 = *(void (**)(void *__return_ptr, uint64_t, uint64_t))(v4 + 464);
  swift_unknownObjectRetain();
  v11(v64, v8, v4);
  swift_unknownObjectRelease();
  outlined init with take of LocalePreferences?( (uint64_t)v64,  (uint64_t)v65,  (uint64_t *)&demangling cache variable for type metadata for LocalePreferences?);
  outlined init with take of LocalePreferences?( (uint64_t)v65,  (uint64_t)v66,  (uint64_t *)&demangling cache variable for type metadata for LocalePreferences?);
  if (_s10Foundation17LocalePreferencesVSgWOg((uint64_t)v66) == 1)
  {
    Swift::UInt8 v10 = 0;
    goto LABEL_8;
  }

  outlined init with take of LocalePreferences?( (uint64_t)v65,  (uint64_t)v46,  (uint64_t *)&demangling cache variable for type metadata for LocalePreferences?);
  Hasher._combine(_:)(1u);
  if (v46[0] == 2)
  {
    __int128 v12 = 0;
  }

  else
  {
    __int128 v12 = v46[0] & 1;
    Hasher._combine(_:)(1u);
  }

  Hasher._combine(_:)(v12);
  uint64_t v13 = v47;
  if (!v47)
  {
    Hasher._combine(_:)(0);
    __int128 v18 = v46;
    goto LABEL_23;
  }

  Hasher._combine(_:)(1u);
  Hasher._combine(_:)(*(void *)(v13 + 16));
  __int128 v14 = *(void *)(v13 + 16);
  if (!v14)
  {
    outlined init with take of LocalePreferences?( (uint64_t)v65,  (uint64_t)v45,  (uint64_t *)&demangling cache variable for type metadata for LocalePreferences?);
    __int128 v18 = v45;
LABEL_23:
    outlined retain of LocalePreferences(v18);
    if (!v48) {
      goto LABEL_17;
    }
    goto LABEL_24;
  }

  outlined retain of LocalePreferences?( (uint64_t)v65,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined copy of LocalePreferences?);
  swift_bridgeObjectRetain();
  int v15 = v13 + 40;
  do
  {
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    v15 += 16LL;
    --v14;
  }

  while (v14);
  swift_bridgeObjectRelease();
  if (!v48)
  {
LABEL_17:
    Hasher._combine(_:)(0);
    if (!v49) {
      goto LABEL_18;
    }
    goto LABEL_25;
  }

uint64_t Date.ComponentsFormatStyle.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<Date.ComponentsFormatStyle.CodingKeys>);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1895F8858](v5);
  uint64_t v8 = (char *)&v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type Date.ComponentsFormatStyle.CodingKeys and conformance Date.ComponentsFormatStyle.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2)
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  }

  else
  {
    char v20 = 0;
    lazy protocol witness table accessor for type Date.ComponentsFormatStyle.Style and conformance Date.ComponentsFormatStyle.Style();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    int v9 = v18;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Set<Date.ComponentsFormatStyle.Field>);
    char v20 = 1;
    lazy protocol witness table accessor for type Set<Date.ComponentsFormatStyle.Field> and conformance <> Set<A>( &lazy protocol witness table cache variable for type Set<Date.ComponentsFormatStyle.Field> and conformance <> Set<A>,  (uint64_t (*)(void))lazy protocol witness table accessor for type Date.ComponentsFormatStyle.Field and conformance Date.ComponentsFormatStyle.Field,  MEMORY[0x189618710]);
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    uint64_t v10 = v18;
    char v20 = 2;
    lazy protocol witness table accessor for type Calendar and conformance Calendar();
    swift_bridgeObjectRetain();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    __int128 v17 = v18;
    char v20 = 3;
    lazy protocol witness table accessor for type Locale and conformance Locale();
    uint64_t v16 = v17;
    swift_unknownObjectRetain();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    int v19 = v9;
    __int128 v11 = v18;
    LOBYTE(v18) = 4;
    __int128 v15 = v11;
    swift_unknownObjectRetain();
    char v12 = KeyedDecodingContainer.decode(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    *(_BYTE *)a2 = v19;
    *(void *)(a2 + 8) = v10;
    __int128 v13 = v15;
    *(_OWORD *)(a2 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = v17;
    *(_OWORD *)(a2 + 32) = v13;
    *(_BYTE *)(a2 + 48) = v12 & 1;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
  }

  return swift_bridgeObjectRelease();
}

uint64_t protocol witness for FormatStyle.format(_:) in conformance Date.ComponentsFormatStyle@<X0>( double *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = Date.ComponentsFormatStyle.format(_:)(a1);
  *a2 = result;
  a2[1] = v4;
  return result;
}

uint64_t protocol witness for FormatStyle.locale(_:) in conformance Date.ComponentsFormatStyle@<X0>( __int128 *a1@<X0>, uint64_t a2@<X8>)
{
  char v5 = *v2;
  uint64_t v6 = *((void *)v2 + 1);
  char v7 = v2[48];
  swift_bridgeObjectRetain();
  __int128 v10 = *((_OWORD *)v2 + 1);
  swift_unknownObjectRetain();
  *(_BYTE *)a2 = v5;
  *(void *)(a2 + 8) = v6;
  __int128 v8 = *a1;
  *(_OWORD *)(a2 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = v10;
  *(_OWORD *)(a2 + 32) = v8;
  *(_BYTE *)(a2 + 48) = v7;
  return swift_unknownObjectRetain();
}

uint64_t protocol witness for Decodable.init(from:) in conformance Date.ComponentsFormatStyle@<X0>( void *a1@<X0>, uint64_t a2@<X8>)
{
  return Date.ComponentsFormatStyle.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance Date.ComponentsFormatStyle(void *a1)
{
  return Date.ComponentsFormatStyle.encode(to:)(a1);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance Date.ComponentsFormatStyle()
{
  void (*v11)(void *__return_ptr, uint64_t, uint64_t);
  Swift::UInt8 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  id v23;
  id v24;
  id v25;
  id v26;
  id v27;
  id v28;
  id v29;
  id v30;
  id v31;
  id v32;
  id v33;
  id v34;
  id v35;
  uint64_t v36;
  uint64_t v37;
  Swift::UInt v38;
  Swift::UInt v39;
  Swift::UInt8 v40;
  Swift::UInt8 v41;
  Swift::UInt8 v42;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  void *v50;
  void *v51;
  void *v52;
  void *v53;
  void *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char v58;
  char v59;
  char v60;
  char v61;
  void v62[18];
  _BYTE v63[144];
  _BYTE v64[144];
  _BYTE v65[80];
  Swift::UInt v1 = *v0;
  uint64_t v2 = *((void *)v0 + 1);
  uint64_t v3 = *((void *)v0 + 3);
  uint64_t v4 = *((void *)v0 + 5);
  Swift::UInt8 v5 = v0[48];
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  if (v2)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    specialized Set.hash(into:)(v65, v2);
    swift_bridgeObjectRelease();
  }

  else
  {
    Hasher._combine(_:)(0);
  }

  uint64_t ObjectType = swift_getObjectType();
  char v7 = *(void (**)(_BYTE *, uint64_t, uint64_t))(v3 + 120);
  swift_unknownObjectRetain();
  v7(v65, ObjectType, v3);
  swift_unknownObjectRelease();
  uint64_t v8 = swift_getObjectType();
  int v9 = *(uint64_t (**)(uint64_t, uint64_t))(v4 + 48);
  swift_unknownObjectRetain();
  if ((v9(v8, v4) & 1) != 0)
  {
    Swift::UInt8 v10 = 1;
LABEL_8:
    Hasher._combine(_:)(v10);
    goto LABEL_58;
  }

  Hasher._combine(_:)(0);
  (*(void (**)(uint64_t, uint64_t))(v4 + 64))(v8, v4);
  String.hash(into:)();
  swift_bridgeObjectRelease();
  __int128 v11 = *(void (**)(void *__return_ptr, uint64_t, uint64_t))(v4 + 464);
  swift_unknownObjectRetain();
  v11(v62, v8, v4);
  swift_unknownObjectRelease();
  outlined init with take of LocalePreferences?( (uint64_t)v62,  (uint64_t)v63,  (uint64_t *)&demangling cache variable for type metadata for LocalePreferences?);
  outlined init with take of LocalePreferences?( (uint64_t)v63,  (uint64_t)v64,  (uint64_t *)&demangling cache variable for type metadata for LocalePreferences?);
  if (_s10Foundation17LocalePreferencesVSgWOg((uint64_t)v64) == 1)
  {
    Swift::UInt8 v10 = 0;
    goto LABEL_8;
  }

  outlined init with take of LocalePreferences?( (uint64_t)v63,  (uint64_t)&v44,  (uint64_t *)&demangling cache variable for type metadata for LocalePreferences?);
  Hasher._combine(_:)(1u);
  if (v44 == 2)
  {
    char v12 = 0;
  }

  else
  {
    char v12 = v44 & 1;
    Hasher._combine(_:)(1u);
  }

  Hasher._combine(_:)(v12);
  __int128 v13 = v45;
  if (!v45)
  {
    Hasher._combine(_:)(0);
LABEL_22:
    outlined retain of LocalePreferences(&v44);
    if (!v46) {
      goto LABEL_17;
    }
    goto LABEL_23;
  }

  Hasher._combine(_:)(1u);
  Hasher._combine(_:)(*(void *)(v13 + 16));
  __int128 v14 = *(void *)(v13 + 16);
  if (!v14) {
    goto LABEL_22;
  }
  outlined retain of LocalePreferences?( (uint64_t)v63,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined copy of LocalePreferences?);
  swift_bridgeObjectRetain();
  __int128 v15 = v13 + 40;
  do
  {
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    v15 += 16LL;
    --v14;
  }

  while (v14);
  swift_bridgeObjectRelease();
  if (!v46)
  {
LABEL_17:
    Hasher._combine(_:)(0);
    if (!v47) {
      goto LABEL_18;
    }
    goto LABEL_24;
  }

__n128 static FormatStyle<>.components(style:fields:)@<Q0>( unsigned __int8 *a1@<X0>, unint64_t a2@<X1>, __n128 *a3@<X8>)
{
  unsigned __int8 v5 = *a1;
  uint64_t v6 = one-time initialization token for cache;
  swift_bridgeObjectRetain();
  if (v6 != -1) {
    swift_once();
  }
  uint64_t v7 = static LocaleCache.cache + 16;
  uint64_t v8 = (os_unfair_lock_s *)(static LocaleCache.cache + 124);
  swift_retain_n();
  os_unfair_lock_lock(v8);
  closure #1 in LocaleCache.autoupdatingCurrent.getter(v7, (uint64_t *)v14);
  os_unfair_lock_unlock(v8);
  swift_release_n();
  unint64_t v9 = *(void *)&v14[0];
  uint64_t v10 = lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( (unint64_t *)&lazy protocol witness table cache variable for type _LocaleAutoupdating and conformance _LocaleAutoupdating,  (uint64_t (*)(uint64_t))type metadata accessor for _LocaleAutoupdating,  (uint64_t)&protocol conformance descriptor for _LocaleAutoupdating);
  if (one-time initialization token for cache != -1) {
    swift_once();
  }
  uint64_t v11 = static CalendarCache.cache + 16;
  char v12 = (os_unfair_lock_s *)(static CalendarCache.cache + 60);
  swift_retain_n();
  os_unfair_lock_lock(v12);
  closure #1 in CalendarCache.autoupdatingCurrent.getter(v11, (uint64_t *)v14);
  os_unfair_lock_unlock(v12);
  swift_release_n();
  __n128 result = (__n128)v14[0];
  a3->n128_u8[0] = v5;
  a3->n128_u64[1] = a2;
  a3[1] = result;
  a3[2].n128_u64[0] = v9;
  a3[2].n128_u64[1] = v10;
  a3[3].n128_u8[0] = 1;
  return result;
}

__n128 static FormatStyle<>.timeDuration.getter@<Q0>(__n128 *a1@<X8>)
{
  if (one-time initialization token for cache != -1) {
    swift_once();
  }
  uint64_t v2 = static LocaleCache.cache + 16;
  uint64_t v3 = (os_unfair_lock_s *)(static LocaleCache.cache + 124);
  swift_retain_n();
  os_unfair_lock_lock(v3);
  closure #1 in LocaleCache.autoupdatingCurrent.getter(v2, (uint64_t *)v9);
  os_unfair_lock_unlock(v3);
  swift_release_n();
  unint64_t v4 = *(void *)&v9[0];
  uint64_t v5 = lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef( (unint64_t *)&lazy protocol witness table cache variable for type _LocaleAutoupdating and conformance _LocaleAutoupdating,  (uint64_t (*)(uint64_t))type metadata accessor for _LocaleAutoupdating,  (uint64_t)&protocol conformance descriptor for _LocaleAutoupdating);
  if (one-time initialization token for cache != -1) {
    swift_once();
  }
  uint64_t v6 = static CalendarCache.cache + 16;
  uint64_t v7 = (os_unfair_lock_s *)(static CalendarCache.cache + 60);
  swift_retain_n();
  os_unfair_lock_lock(v7);
  closure #1 in CalendarCache.autoupdatingCurrent.getter(v6, (uint64_t *)v9);
  os_unfair_lock_unlock(v7);
  swift_release_n();
  __n128 result = (__n128)v9[0];
  a1->n128_u8[0] = 5;
  a1->n128_u64[1] = 0LL;
  a1[1] = result;
  a1[2].n128_u64[0] = v4;
  a1[2].n128_u64[1] = v5;
  a1[3].n128_u8[0] = 1;
  return result;
}

void Date.ComponentsFormatStyle.discreteInput(before:)(double *a1@<X0>, uint64_t a2@<X8>)
{
  void (*v42)(double *__return_ptr, double *, double *, void, uint64_t, uint64_t);
  unsigned __int8 v43;
  char v44;
  uint64_t v45;
  char v46;
  double v47;
  double v48[36];
  double v49;
  char v50;
  _OWORD __dst[18];
  __int128 v52;
  __int128 v53;
  __int128 v54;
  char v55;
  _OWORD v56[2];
  Swift::Int_optional v57;
  double v4 = *a1;
  double v5 = a1[1];
  __int128 v6 = v2[1];
  char v52 = *v2;
  uint64_t v53 = v6;
  uint64_t v54 = v2[2];
  uint64_t v55 = *((_BYTE *)v2 + 48);
  uint64_t v46 = v55;
  if ((v55 & 1) != 0) {
    double v7 = v4;
  }
  else {
    double v7 = v5;
  }
  if ((v55 & 1) != 0) {
    double v8 = v5;
  }
  else {
    double v8 = v4;
  }
  outlined retain of Date.ComponentsFormatStyle((uint64_t)&v52);
  uint64_t v9 = specialized _ArrayProtocol.filter(_:)( (uint64_t)&outlined read-only object #0 of static Date.ComponentsFormatStyle.Field.Option.allCases.getter,  &v52);
  outlined release of Date.ComponentsFormatStyle((uint64_t)&v52);
  uint64_t v10 = *(void *)(v9 + 16);
  if (!v10)
  {
    swift_bridgeObjectRelease();
    goto LABEL_54;
  }

  uint64_t v45 = a2;
  uint64_t v11 = *(unsigned __int8 *)(v10 + v9 + 31);
  uint64_t v12 = 7LL;
  uint64_t v13 = MEMORY[0x18961AFE8];
  __int128 v14 = &byte_189C6B530;
  do
  {
    unsigned int v18 = *v14++;
    char v17 = v18;
    if (v11 < v18)
    {
      *(void *)&__dst[0] = v13;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)( 0,  *(void *)(v13 + 16) + 1LL,  1);
        uint64_t v13 = *(void *)&__dst[0];
      }

      unint64_t v16 = *(void *)(v13 + 16);
      unint64_t v15 = *(void *)(v13 + 24);
      if (v16 >= v15 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v15 > 1, v16 + 1, 1);
        uint64_t v13 = *(void *)&__dst[0];
      }

      *(void *)(v13 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = v16 + 1;
      *(_BYTE *)(v13 + v16 + 32) = v17;
    }

    --v12;
  }

  while (v12);
  uint64_t v19 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay10Foundation4DateV21ComponentsFormatStyleV5FieldV6OptionOG_AF8CalendarV9ComponentOs5NeverOTg5015_s10Foundation4e3V21fgh138V5bound33_A95AAD4BE9B9AA48B183E68E3F6B3AACLL3for10relativeTo10movingDown18countingTowardZeroAcF_Sb22includedInRangeOfInputtSgAC_ACS2btFAA8k2V9l4OAE5i2V6J53Ocfu_33_29c7146c9c40ed4ad401dd5090de8340AuQTf3nnnpk_nTf1cn_nTm(v13);
  swift_release();
  swift_bridgeObjectRetain();
  char v20 = (char *)v19;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    char v20 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  *(void *)(v19 + 16) + 1LL,  1,  (char *)v19);
  }
  unint64_t v22 = *((void *)v20 + 2);
  unint64_t v21 = *((void *)v20 + 3);
  if (v22 >= v21 >> 1) {
    char v20 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (char *)(v21 > 1),  v22 + 1,  1,  v20);
  }
  *((void *)v20 + 2) = v22 + 1;
  char v23 = v20 + 32;
  v20[v22 + 32] = 13;
  swift_bridgeObjectRelease();
  v56[0] = v53;
  __dst[0] = v53;
  outlined retain of Locale((uint64_t)v56);
  uint64_t v24 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay10Foundation4DateV21ComponentsFormatStyleV5FieldV6OptionOG_AF8CalendarV9ComponentOs5NeverOTg5015_s10Foundation4e3V21fgh138V5bound33_A95AAD4BE9B9AA48B183E68E3F6B3AACLL3for10relativeTo10movingDown18countingTowardZeroAcF_Sb22includedInRangeOfInputtSgAC_ACS2btFAA8k2V9l4OAE5i2V6J53Ocfu_33_29c7146c9c40ed4ad401dd5090de8340AuQTf3nnnpk_nTf1cn_nTm(v9);
  lazy protocol witness table accessor for type Calendar.Component and conformance Calendar.Component();
  uint64_t v25 = Set.init(minimumCapacity:)();
  *(void *)&v48[0] = v25;
  uint64_t v26 = *(void *)(v24 + 16);
  if (v26)
  {
    for (uint64_t i = 0LL; i != v26; ++i)
    {
      uint64_t v28 = v24 + i;
      specialized Set._Variant.insert(_:)(&v49, *(unsigned __int8 *)(v28 + 32));
    }

    swift_bridgeObjectRelease();
    uint64_t v29 = *(void *)&v48[0];
  }

  else
  {
    uint64_t v29 = v25;
    swift_bridgeObjectRelease();
  }

  uint64_t v30 = (void *)(swift_allocObject() + 16);
  uint64_t v31 = swift_bridgeObjectRetain();
  uint64_t v32 = specialized Set.union<A>(_:)(v31, v29);
  swift_bridgeObjectRelease();
  v48[0] = v7;
  uint64_t v49 = v8;
  Calendar.dateComponents(_:from:to:)(v32, v48, &v49, v30);
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();
  uint64_t v33 = *((void *)v20 + 2);
  if ((v46 & 1) != 0)
  {
    if (v33) {
      __asm { BR              X26 }
    }

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    double v37 = v8;
  }

  else
  {
    for (; v33; --v33)
    {
      char v34 = *v23++;
      LOBYTE(__dst[0]) = v34;
      v57.value = 0LL;
      v57.is_nil = 0;
      DateComponents.setValue(_:for:)(v57, (Foundation::Calendar::Component)__dst);
    }

    swift_bridgeObjectRelease();
    uint64_t v35 = swift_allocObject();
    uint64_t v36 = v35;
    *(_BYTE *)(v35 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = 2;
    if ((v46 & 1) == 0
      || (getter of countingPastZero #1 in Date.ComponentsFormatStyle.bound(for:relativeTo:movingDown:countingTowardZero:)( v35,  v9) & 1) != 0)
    {
      __asm { BR              X11 }
    }

    memcpy(__dst, v30, 0x11AuLL);
    memcpy(v48, v30, 0x11AuLL);
    double v38 = 1.59271755e13;
    if (v7 <= 1.59271755e13) {
      double v38 = v7;
    }
    double v39 = fmax(v38, -2.11845067e11);
    uint64_t v40 = *((void *)&v56[0] + 1);
    uint64_t ObjectType = swift_getObjectType();
    uint64_t v47 = v39;
    uint64_t v42 = *(void (**)(double *__return_ptr, double *, double *, void, uint64_t, uint64_t))(v40 + 200);
    outlined retain of Locale((uint64_t)v56);
    outlined retain of DateComponents((uint64_t)__dst);
    v42(&v49, v48, &v47, 0LL, ObjectType, v40);
    outlined release of DateComponents((uint64_t)__dst);
    outlined release of Locale((uint64_t)v56);
    if ((v50 & 1) == 0)
    {
      double v37 = v49;
      a2 = v45;
      if ((v46 & 1) != 0)
      {
        BOOL v44 = getter of countingPastZero #1 in Date.ComponentsFormatStyle.bound(for:relativeTo:movingDown:countingTowardZero:)( v36,  v9);
        swift_release();
        swift_bridgeObjectRelease();
        uint64_t v43 = v44 ^ 1;
      }

      else
      {
        swift_release();
        swift_bridgeObjectRelease();
        uint64_t v43 = 0;
      }

      swift_release();
      if ((v43 & (v37 == v8)) == 0 && v37 >= v8) {
        goto LABEL_54;
      }
      if ((v43 & 1) == 0) {
        goto LABEL_41;
      }
      goto LABEL_40;
    }

    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
    double v37 = -6.31140768e10;
  }

  a2 = v45;
LABEL_40:
  v48[0] = v37;
  Date.nextUdateDown.getter((double *)__dst);
  double v37 = *(double *)__dst;
LABEL_41:
  if ((v46 & 1) == 0)
  {
    if (v5 < v37)
    {
      __break(1u);
      JUMPOUT(0x1835277D4LL);
    }

    *(double *)a2 = v37;
    *(double *)(a2 + 8) = v5;
    goto LABEL_46;
  }

  if (v37 >= v4)
  {
    *(double *)a2 = v4;
    *(double *)(a2 + 8) = v37;
LABEL_46:
    *(_BYTE *)(a2 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = 0;
    return;
  }

void Date.nextUdateDown.getter(double *a1@<X8>)
{
  double v2 = (*v1 + 978307200.0) * -1000.0 + 0.0;
  if (v2 < INFINITY) {
    *(void *)&v2 += (*(uint64_t *)&v2 >> 63) | 1;
  }
  double v3 = -v2;
  double v4 = v2 / -1000.0;
  if (v4 * 1000.0 > v3)
  {
    double v5 = 0.0 - v4;
    if (v5 < INFINITY) {
      *(void *)&v5 += (*(uint64_t *)&v5 >> 63) | 1;
    }
    double v4 = -v5;
  }

  double v6 = v4 + -978307200.0;
  if (v4 < v4 + -978307200.0 + 978307200.0)
  {
    double v7 = 0.0 - v6;
    if (0.0 - v6 < INFINITY) {
      *(void *)&v7 += (*(uint64_t *)&v7 >> 63) | 1;
    }
    double v6 = -v7;
  }

  *a1 = v6;
}

void Date.ComponentsFormatStyle.discreteInput(after:)(double *a1@<X0>, uint64_t a2@<X8>)
{
  void (*v42)(double *__return_ptr, double *, double *, void, uint64_t, uint64_t);
  char v43;
  unsigned __int8 v44;
  uint64_t v45;
  char v46;
  double v47;
  double v48[36];
  double v49;
  char v50;
  _OWORD __dst[18];
  __int128 v52;
  __int128 v53;
  __int128 v54;
  char v55;
  _OWORD v56[2];
  Swift::Int_optional v57;
  double v4 = *a1;
  double v5 = a1[1];
  __int128 v6 = v2[1];
  char v52 = *v2;
  uint64_t v53 = v6;
  uint64_t v54 = v2[2];
  uint64_t v55 = *((_BYTE *)v2 + 48);
  uint64_t v46 = v55;
  if ((v55 & 1) != 0) {
    double v7 = v4;
  }
  else {
    double v7 = v5;
  }
  if ((v55 & 1) != 0) {
    double v8 = v5;
  }
  else {
    double v8 = v4;
  }
  outlined retain of Date.ComponentsFormatStyle((uint64_t)&v52);
  uint64_t v9 = specialized _ArrayProtocol.filter(_:)( (uint64_t)&outlined read-only object #0 of static Date.ComponentsFormatStyle.Field.Option.allCases.getter,  &v52);
  outlined release of Date.ComponentsFormatStyle((uint64_t)&v52);
  uint64_t v10 = *(void *)(v9 + 16);
  if (!v10)
  {
    swift_bridgeObjectRelease();
    goto LABEL_52;
  }

  uint64_t v45 = a2;
  uint64_t v11 = *(unsigned __int8 *)(v10 + v9 + 31);
  uint64_t v12 = 7LL;
  uint64_t v13 = MEMORY[0x18961AFE8];
  __int128 v14 = &byte_189C6B530;
  do
  {
    unsigned int v18 = *v14++;
    char v17 = v18;
    if (v11 < v18)
    {
      *(void *)&__dst[0] = v13;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)( 0,  *(void *)(v13 + 16) + 1LL,  1);
        uint64_t v13 = *(void *)&__dst[0];
      }

      unint64_t v16 = *(void *)(v13 + 16);
      unint64_t v15 = *(void *)(v13 + 24);
      if (v16 >= v15 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v15 > 1, v16 + 1, 1);
        uint64_t v13 = *(void *)&__dst[0];
      }

      *(void *)(v13 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = v16 + 1;
      *(_BYTE *)(v13 + v16 + 32) = v17;
    }

    --v12;
  }

  while (v12);
  uint64_t v19 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay10Foundation4DateV21ComponentsFormatStyleV5FieldV6OptionOG_AF8CalendarV9ComponentOs5NeverOTg5015_s10Foundation4e3V21fgh138V5bound33_A95AAD4BE9B9AA48B183E68E3F6B3AACLL3for10relativeTo10movingDown18countingTowardZeroAcF_Sb22includedInRangeOfInputtSgAC_ACS2btFAA8k2V9l4OAE5i2V6J53Ocfu_33_29c7146c9c40ed4ad401dd5090de8340AuQTf3nnnpk_nTf1cn_nTm(v13);
  swift_release();
  swift_bridgeObjectRetain();
  char v20 = (char *)v19;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    char v20 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  *(void *)(v19 + 16) + 1LL,  1,  (char *)v19);
  }
  unint64_t v22 = *((void *)v20 + 2);
  unint64_t v21 = *((void *)v20 + 3);
  if (v22 >= v21 >> 1) {
    char v20 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( (char *)(v21 > 1),  v22 + 1,  1,  v20);
  }
  *((void *)v20 + 2) = v22 + 1;
  char v23 = v20 + 32;
  v20[v22 + 32] = 13;
  swift_bridgeObjectRelease();
  v56[0] = v53;
  __dst[0] = v53;
  outlined retain of Locale((uint64_t)v56);
  uint64_t v24 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay10Foundation4DateV21ComponentsFormatStyleV5FieldV6OptionOG_AF8CalendarV9ComponentOs5NeverOTg5015_s10Foundation4e3V21fgh138V5bound33_A95AAD4BE9B9AA48B183E68E3F6B3AACLL3for10relativeTo10movingDown18countingTowardZeroAcF_Sb22includedInRangeOfInputtSgAC_ACS2btFAA8k2V9l4OAE5i2V6J53Ocfu_33_29c7146c9c40ed4ad401dd5090de8340AuQTf3nnnpk_nTf1cn_nTm(v9);
  lazy protocol witness table accessor for type Calendar.Component and conformance Calendar.Component();
  uint64_t v25 = Set.init(minimumCapacity:)();
  *(void *)&v48[0] = v25;
  uint64_t v26 = *(void *)(v24 + 16);
  if (v26)
  {
    for (uint64_t i = 0LL; i != v26; ++i)
    {
      uint64_t v28 = v24 + i;
      specialized Set._Variant.insert(_:)(&v49, *(unsigned __int8 *)(v28 + 32));
    }

    swift_bridgeObjectRelease();
    uint64_t v29 = *(void *)&v48[0];
  }

  else
  {
    uint64_t v29 = v25;
    swift_bridgeObjectRelease();
  }

  uint64_t v30 = (void *)(swift_allocObject() + 16);
  uint64_t v31 = swift_bridgeObjectRetain();
  uint64_t v32 = specialized Set.union<A>(_:)(v31, v29);
  swift_bridgeObjectRelease();
  v48[0] = v7;
  uint64_t v49 = v8;
  Calendar.dateComponents(_:from:to:)(v32, v48, &v49, v30);
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();
  uint64_t v33 = *((void *)v20 + 2);
  if ((v46 & 1) != 0)
  {
    for (; v33; --v33)
    {
      char v34 = *v23++;
      LOBYTE(__dst[0]) = v34;
      v57.value = 0LL;
      v57.is_nil = 0;
      DateComponents.setValue(_:for:)(v57, (Foundation::Calendar::Component)__dst);
    }

    swift_bridgeObjectRelease();
    uint64_t v35 = swift_allocObject();
    uint64_t v36 = v35;
    *(_BYTE *)(v35 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = 2;
    if ((v46 & 1) != 0
      || (getter of countingPastZero #1 in Date.ComponentsFormatStyle.bound(for:relativeTo:movingDown:countingTowardZero:)( v35,  v9) & 1) != 0)
    {
      __asm { BR              X11 }
    }

    memcpy(__dst, v30, 0x11AuLL);
    memcpy(v48, v30, 0x11AuLL);
    double v38 = 1.59271755e13;
    if (v7 <= 1.59271755e13) {
      double v38 = v7;
    }
    double v39 = fmax(v38, -2.11845067e11);
    uint64_t v40 = *((void *)&v56[0] + 1);
    uint64_t ObjectType = swift_getObjectType();
    uint64_t v47 = v39;
    uint64_t v42 = *(void (**)(double *__return_ptr, double *, double *, void, uint64_t, uint64_t))(v40 + 200);
    outlined retain of Locale((uint64_t)v56);
    outlined retain of DateComponents((uint64_t)__dst);
    v42(&v49, v48, &v47, 0LL, ObjectType, v40);
    outlined release of DateComponents((uint64_t)__dst);
    outlined release of Locale((uint64_t)v56);
    if ((v50 & 1) != 0)
    {
      swift_release();
      swift_release();
      swift_bridgeObjectRelease();
      double v37 = 6.3113904e10;
      a2 = v45;
    }

    else
    {
      double v37 = v49;
      a2 = v45;
      if ((v46 & 1) != 0)
      {
        swift_release();
        swift_bridgeObjectRelease();
        BOOL v44 = 0;
      }

      else
      {
        uint64_t v43 = getter of countingPastZero #1 in Date.ComponentsFormatStyle.bound(for:relativeTo:movingDown:countingTowardZero:)( v36,  v9);
        swift_release();
        swift_bridgeObjectRelease();
        BOOL v44 = v43 ^ 1;
      }

      swift_release();
      if ((v44 & (v37 == v8)) == 0 && v8 >= v37) {
        goto LABEL_52;
      }
      if ((v44 & 1) == 0) {
        goto LABEL_46;
      }
    }
  }

  else
  {
    if (v33) {
      __asm { BR              X26 }
    }

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    double v37 = v8;
    a2 = v45;
  }

  v48[0] = v37;
  Date.nextUdateUp.getter((double *)__dst);
  double v37 = *(double *)__dst;
LABEL_46:
  if ((v46 & 1) != 0)
  {
    if (v37 < v4)
    {
      __break(1u);
      JUMPOUT(0x18352810CLL);
    }

    *(double *)a2 = v4;
    *(double *)(a2 + 8) = v37;
    goto LABEL_51;
  }

  if (v5 >= v37)
  {
    *(double *)a2 = v37;
    *(double *)(a2 + 8) = v5;
LABEL_51:
    *(_BYTE *)(a2 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = 0;
    return;
  }

void Date.nextUdateUp.getter(double *a1@<X8>)
{
  double v2 = (*v1 + 978307200.0) * 1000.0 + 0.0;
  if (v2 < INFINITY) {
    *(void *)&v2 += (*(uint64_t *)&v2 >> 63) | 1;
  }
  double v3 = v2 / 1000.0;
  if (v2 / 1000.0 * 1000.0 < v2)
  {
    double v3 = v3 + 0.0;
    if (v3 < INFINITY) {
      *(void *)&v3 += (*(uint64_t *)&v3 >> 63) | 1;
    }
  }

  double v4 = v3 + -978307200.0;
  if (v3 + -978307200.0 < INFINITY && v3 + -978307200.0 + 978307200.0 < v3) {
    *(void *)a1 = ((*(uint64_t *)&v4 >> 63) | 1) + *(void *)&v4;
  }
  else {
    *a1 = v4;
  }
}

double *Date.ComponentsFormatStyle.input(before:)@<X0>(double *result@<X0>, uint64_t a2@<X8>)
{
  double v3 = *result;
  double v4 = result[1];
  double v5 = 0.0 - *result;
  if (v5 < INFINITY) {
    *(void *)&double v5 = ((COERCE__INT64(0.0 - *result) >> 63) | 1) + COERCE__INT64(0.0 - *result);
  }
  double v6 = fabs(v3 + v5);
  double v7 = (v3 + 978307200.0) * -1000.0 + 0.0;
  if (v7 < INFINITY) {
    *(void *)&v7 += (*(uint64_t *)&v7 >> 63) | 1;
  }
  double v8 = vabdd_f64(v3, v7 / -1000.0 + -978307200.0);
  double v9 = 0.0 - v4;
  if (0.0 - v4 < INFINITY) {
    *(void *)&double v9 = ((COERCE__INT64(0.0 - v4) >> 63) | 1) + COERCE__INT64(0.0 - v4);
  }
  double v10 = fabs(v4 + v9);
  double v11 = (v4 + 978307200.0) * -1000.0 + 0.0;
  if (v11 < INFINITY) {
    *(void *)&v11 += (*(uint64_t *)&v11 >> 63) | 1;
  }
  double v12 = (v6 + v8 + v10 + vabdd_f64(v4, v11 / -1000.0 + -978307200.0)) * 4.0;
  if (*(_BYTE *)(v2 + 48))
  {
    double v4 = v4 - v12;
    if (v4 < v3)
    {
      *(void *)a2 = 0LL;
      *(void *)(a2 + 8) = 0LL;
      *(_BYTE *)(a2 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = 1;
      return result;
    }

    goto LABEL_13;
  }

  double v3 = v3 - v12;
  if (v4 >= v3)
  {
LABEL_13:
    *(double *)a2 = v3;
    *(double *)(a2 + 8) = v4;
    *(_BYTE *)(a2 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = 0;
    return result;
  }

  __break(1u);
  return result;
}

double *Date.ComponentsFormatStyle.input(after:)@<X0>(double *result@<X0>, uint64_t a2@<X8>)
{
  double v3 = *result;
  double v4 = result[1];
  double v5 = 0.0 - *result;
  if (v5 < INFINITY) {
    *(void *)&double v5 = ((COERCE__INT64(0.0 - *result) >> 63) | 1) + COERCE__INT64(0.0 - *result);
  }
  double v6 = fabs(v3 + v5);
  double v7 = (v3 + 978307200.0) * -1000.0 + 0.0;
  if (v7 < INFINITY) {
    *(void *)&v7 += (*(uint64_t *)&v7 >> 63) | 1;
  }
  double v8 = vabdd_f64(v3, v7 / -1000.0 + -978307200.0);
  double v9 = 0.0 - v4;
  if (0.0 - v4 < INFINITY) {
    *(void *)&double v9 = ((COERCE__INT64(0.0 - v4) >> 63) | 1) + COERCE__INT64(0.0 - v4);
  }
  double v10 = fabs(v4 + v9);
  double v11 = (v4 + 978307200.0) * -1000.0 + 0.0;
  if (v11 < INFINITY) {
    *(void *)&v11 += (*(uint64_t *)&v11 >> 63) | 1;
  }
  double v12 = (v6 + v8 + v10 + vabdd_f64(v4, v11 / -1000.0 + -978307200.0)) * 4.0;
  if (*(_BYTE *)(v2 + 48))
  {
    double v4 = v4 + v12;
    if (v4 >= v3) {
      goto LABEL_14;
    }
    __break(1u);
  }

  double v3 = v3 + v12;
  if (v4 < v3)
  {
    *(void *)a2 = 0LL;
    *(void *)(a2 + 8) = 0LL;
    *(_BYTE *)(a2 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = 1;
    return result;
  }

uint64_t getter of countingPastZero #1 in Date.ComponentsFormatStyle.bound(for:relativeTo:movingDown:countingTowardZero:)( uint64_t a1, uint64_t a2)
{
  int v2 = *(unsigned __int8 *)(a1 + 16);
  if (v2 != 2) {
    return v2 & 1;
  }
  if (*(void *)(a2 + 16)) {
    __asm { BR              X21 }
  }

  uint64_t v3 = 1LL;
  *(_BYTE *)(a1 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = 1;
  return v3;
}

uint64_t specialized Set.startIndex.getter(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 56);
  if (v1)
  {
    uint64_t v2 = 0LL;
    return __clz(__rbit64(v1)) + v2;
  }

  char v5 = *(_BYTE *)(a1 + 32);
  unsigned int v6 = v5 & 0x3F;
  uint64_t v3 = 1LL << v5;
  if (v6 < 7) {
    return v3;
  }
  unint64_t v1 = *(void *)(a1 + 64);
  if (v1)
  {
    uint64_t v2 = 64LL;
    return __clz(__rbit64(v1)) + v2;
  }

  if (v6 < 8) {
    return v3;
  }
  unint64_t v1 = *(void *)(a1 + 72);
  if (v1)
  {
    uint64_t v2 = 128LL;
    return __clz(__rbit64(v1)) + v2;
  }

  unint64_t v7 = (unint64_t)(v3 + 63) >> 6;
  if (v7 <= 3) {
    unint64_t v7 = 3LL;
  }
  unint64_t v8 = v7 - 3;
  double v9 = (unint64_t *)(a1 + 80);
  uint64_t v2 = 128LL;
  while (v8)
  {
    unint64_t v10 = *v9++;
    unint64_t v1 = v10;
    --v8;
    v2 += 64LL;
    if (v10) {
      return __clz(__rbit64(v1)) + v2;
    }
  }

  return v3;
}

int64_t specialized _NativeSet.index(after:)(int64_t result, int a2, char a3, uint64_t a4)
{
  if ((a3 & 1) != 0) {
    goto LABEL_20;
  }
  unint64_t v4 = result;
  if (result < 0 || (__n128 result = 1LL << *(_BYTE *)(a4 + 32), result <= (uint64_t)v4))
  {
    __break(1u);
    goto LABEL_18;
  }

  unint64_t v5 = v4 >> 6;
  uint64_t v6 = a4 + 56;
  unint64_t v7 = *(void *)(a4 + 56 + 8 * (v4 >> 6));
  if (((v7 >> v4) & 1) == 0)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }

  if (*(_DWORD *)(a4 + 36) != a2)
  {
LABEL_19:
    __break(1u);
LABEL_20:
    __break(1u);
    return result;
  }

  unint64_t v8 = v7 & (-2LL << (v4 & 0x3F));
  if (v8) {
    return __clz(__rbit64(v8)) | v4 & 0xFFFFFFFFFFFFFFC0LL;
  }
  unint64_t v9 = v5 + 1;
  unint64_t v10 = (unint64_t)(result + 63) >> 6;
  if (v5 + 1 < v10)
  {
    unint64_t v11 = *(void *)(v6 + 8 * v9);
    if (v11) {
      return __clz(__rbit64(v11)) + (v9 << 6);
    }
    unint64_t v9 = v5 + 2;
    if (v5 + 2 < v10)
    {
      unint64_t v11 = *(void *)(v6 + 8 * v9);
      if (v11) {
        return __clz(__rbit64(v11)) + (v9 << 6);
      }
      while (v10 - 3 != v5)
      {
        unint64_t v11 = *(void *)(a4 + 80 + 8 * v5++);
        if (v11)
        {
          unint64_t v9 = v5 + 2;
          return __clz(__rbit64(v11)) + (v9 << 6);
        }
      }
    }
  }

  return result;
}

uint64_t outlined retain of Date.ComponentsFormatStyle(uint64_t a1)
{
  return a1;
}

uint64_t specialized static Date.ComponentsFormatStyle.== infix(_:_:)( unsigned __int8 *a1, unsigned __int8 *a2)
{
  if (*a1 != *a2) {
    return 0LL;
  }
  uint64_t v3 = *((void *)a1 + 1);
  __int128 v5 = *((_OWORD *)a1 + 1);
  __int128 v4 = *((_OWORD *)a1 + 2);
  int v6 = a1[48];
  uint64_t v7 = *((void *)a2 + 1);
  __int128 v8 = *((_OWORD *)a2 + 1);
  int v9 = a2[48];
  if (v3)
  {
    if (!v7) {
      return 0LL;
    }
    __int128 v14 = *((_OWORD *)a2 + 2);
    __int128 v15 = v4;
    __int128 v12 = *((_OWORD *)a2 + 1);
    __int128 v13 = v5;
    char v10 = specialized static Set.== infix(_:_:)(v3, v7);
    __int128 v8 = v12;
    __int128 v5 = v13;
    if ((v10 & 1) == 0) {
      return 0LL;
    }
  }

  else
  {
    __int128 v14 = *((_OWORD *)a2 + 2);
    __int128 v15 = v4;
    if (v7) {
      return 0LL;
    }
  }

  __int128 v16 = v8;
  __int128 v17 = v5;
  __int128 v16 = v14;
  __int128 v17 = v15;
  else {
    return 0LL;
  }
}

unint64_t lazy protocol witness table accessor for type Date.ComponentsFormatStyle.CodingKeys and conformance Date.ComponentsFormatStyle.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type Date.ComponentsFormatStyle.CodingKeys and conformance Date.ComponentsFormatStyle.CodingKeys;
  if (!lazy protocol witness table cache variable for type Date.ComponentsFormatStyle.CodingKeys and conformance Date.ComponentsFormatStyle.CodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for Date.ComponentsFormatStyle.CodingKeys,  &unk_189C98DE8);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Date.ComponentsFormatStyle.CodingKeys and conformance Date.ComponentsFormatStyle.CodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type Date.ComponentsFormatStyle.CodingKeys and conformance Date.ComponentsFormatStyle.CodingKeys;
  if (!lazy protocol witness table cache variable for type Date.ComponentsFormatStyle.CodingKeys and conformance Date.ComponentsFormatStyle.CodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for Date.ComponentsFormatStyle.CodingKeys,  &unk_189C98DE8);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Date.ComponentsFormatStyle.CodingKeys and conformance Date.ComponentsFormatStyle.CodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type Date.ComponentsFormatStyle.CodingKeys and conformance Date.ComponentsFormatStyle.CodingKeys;
  if (!lazy protocol witness table cache variable for type Date.ComponentsFormatStyle.CodingKeys and conformance Date.ComponentsFormatStyle.CodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for Date.ComponentsFormatStyle.CodingKeys,  &unk_189C98DE8);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Date.ComponentsFormatStyle.CodingKeys and conformance Date.ComponentsFormatStyle.CodingKeys);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type Date.ComponentsFormatStyle.CodingKeys and conformance Date.ComponentsFormatStyle.CodingKeys;
  if (!lazy protocol witness table cache variable for type Date.ComponentsFormatStyle.CodingKeys and conformance Date.ComponentsFormatStyle.CodingKeys)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for Date.ComponentsFormatStyle.CodingKeys,  &unk_189C98DE8);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Date.ComponentsFormatStyle.CodingKeys and conformance Date.ComponentsFormatStyle.CodingKeys);
  }

  return result;
}

unint64_t lazy protocol witness table accessor for type Date.ComponentsFormatStyle.Style and conformance Date.ComponentsFormatStyle.Style()
{
  unint64_t result = lazy protocol witness table cache variable for type Date.ComponentsFormatStyle.Style and conformance Date.ComponentsFormatStyle.Style;
  if (!lazy protocol witness table cache variable for type Date.ComponentsFormatStyle.Style and conformance Date.ComponentsFormatStyle.Style)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for Date.ComponentsFormatStyle.Style,  &type metadata for Date.ComponentsFormatStyle.Style);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Date.ComponentsFormatStyle.Style and conformance Date.ComponentsFormatStyle.Style);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type Date.ComponentsFormatStyle.Style and conformance Date.ComponentsFormatStyle.Style;
  if (!lazy protocol witness table cache variable for type Date.ComponentsFormatStyle.Style and conformance Date.ComponentsFormatStyle.Style)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for Date.ComponentsFormatStyle.Style,  &type metadata for Date.ComponentsFormatStyle.Style);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Date.ComponentsFormatStyle.Style and conformance Date.ComponentsFormatStyle.Style);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type Date.ComponentsFormatStyle.Style and conformance Date.ComponentsFormatStyle.Style;
  if (!lazy protocol witness table cache variable for type Date.ComponentsFormatStyle.Style and conformance Date.ComponentsFormatStyle.Style)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for Date.ComponentsFormatStyle.Style,  &type metadata for Date.ComponentsFormatStyle.Style);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Date.ComponentsFormatStyle.Style and conformance Date.ComponentsFormatStyle.Style);
  }

  return result;
}

uint64_t specialized Set.union<A>(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = a2;
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2)
  {
    uint64_t v3 = (unsigned __int8 *)(a1 + 32);
    do
    {
      unsigned int v4 = *v3++;
      specialized Set._Variant.insert(_:)(&v6, v4);
      --v2;
    }

    while (v2);
    return v7;
  }

  return a2;
}

uint64_t specialized _ArrayProtocol.filter(_:)(uint64_t result, _BYTE *a2)
{
  unint64_t v2 = *(void *)(result + 16);
  if (v2)
  {
    unint64_t v3 = 0LL;
    uint64_t v4 = result + 32;
    uint64_t v5 = (uint64_t)(a2 + 8);
    uint64_t v6 = MEMORY[0x18961AFE8];
    while (1)
    {
      if (v3 <= v2) {
        unint64_t v7 = v2;
      }
      else {
        unint64_t v7 = v3;
      }
      while (1)
      {
        if (v3 == v7)
        {
          __break(1u);
          return result;
        }

        Swift::UInt v8 = *(unsigned __int8 *)(v4 + v3++);
        outlined init with take of LocalePreferences?( v5,  (uint64_t)v17,  &demangling cache variable for type metadata for Set<Date.ComponentsFormatStyle.Field>?);
        unint64_t result = outlined init with take of LocalePreferences?( (uint64_t)v17,  (uint64_t)&v18,  &demangling cache variable for type metadata for Set<Date.ComponentsFormatStyle.Field>?);
        uint64_t v9 = v18;
        if (!v18) {
          break;
        }
        if (*(void *)(v18 + 16))
        {
          Hasher.init(_seed:)();
          Hasher._combine(_:)(v8);
          unint64_t result = Hasher._finalize()();
          uint64_t v10 = -1LL << *(_BYTE *)(v9 + 32);
          unint64_t v11 = result & ~v10;
          if (((*(void *)(v9 + 56 + ((v11 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v11) & 1) != 0)
          {
            uint64_t v12 = *(void *)(v9 + 48);
            uint64_t v13 = ~v10;
            while (1)
            {
              unint64_t v11 = (v11 + 1) & v13;
              if (((*(void *)(v9 + 56 + ((v11 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v11) & 1) == 0) {
                break;
              }
            }
          }
        }

uint64_t outlined release of Date.ComponentsFormatStyle(uint64_t a1)
{
  return a1;
}

uint64_t sub_183528C3C()
{
  return swift_deallocObject();
}

uint64_t sub_183528C68()
{
  return swift_deallocObject();
}

unint64_t instantiation function for generic protocol witness table for Date.ComponentsFormatStyle( void *a1)
{
  a1[1] = lazy protocol witness table accessor for type Date.ComponentsFormatStyle and conformance Date.ComponentsFormatStyle();
  a1[2] = lazy protocol witness table accessor for type Date.ComponentsFormatStyle and conformance Date.ComponentsFormatStyle();
  unint64_t result = lazy protocol witness table accessor for type Date.ComponentsFormatStyle and conformance Date.ComponentsFormatStyle();
  a1[3] = result;
  return result;
}

unint64_t lazy protocol witness table accessor for type Date.ComponentsFormatStyle and conformance Date.ComponentsFormatStyle()
{
  unint64_t result = lazy protocol witness table cache variable for type Date.ComponentsFormatStyle and conformance Date.ComponentsFormatStyle;
  if (!lazy protocol witness table cache variable for type Date.ComponentsFormatStyle and conformance Date.ComponentsFormatStyle)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for Date.ComponentsFormatStyle,  &type metadata for Date.ComponentsFormatStyle);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Date.ComponentsFormatStyle and conformance Date.ComponentsFormatStyle);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type Date.ComponentsFormatStyle and conformance Date.ComponentsFormatStyle;
  if (!lazy protocol witness table cache variable for type Date.ComponentsFormatStyle and conformance Date.ComponentsFormatStyle)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for Date.ComponentsFormatStyle,  &type metadata for Date.ComponentsFormatStyle);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Date.ComponentsFormatStyle and conformance Date.ComponentsFormatStyle);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type Date.ComponentsFormatStyle and conformance Date.ComponentsFormatStyle;
  if (!lazy protocol witness table cache variable for type Date.ComponentsFormatStyle and conformance Date.ComponentsFormatStyle)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for Date.ComponentsFormatStyle,  &type metadata for Date.ComponentsFormatStyle);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Date.ComponentsFormatStyle and conformance Date.ComponentsFormatStyle);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type Date.ComponentsFormatStyle and conformance Date.ComponentsFormatStyle;
  if (!lazy protocol witness table cache variable for type Date.ComponentsFormatStyle and conformance Date.ComponentsFormatStyle)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for Date.ComponentsFormatStyle,  &type metadata for Date.ComponentsFormatStyle);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Date.ComponentsFormatStyle and conformance Date.ComponentsFormatStyle);
  }

  return result;
}

{
  unint64_t result;
  unint64_t result = lazy protocol witness table cache variable for type Date.ComponentsFormatStyle and conformance Date.ComponentsFormatStyle;
  if (!lazy protocol witness table cache variable for type Date.ComponentsFormatStyle and conformance Date.ComponentsFormatStyle)
  {
    unint64_t result = MEMORY[0x186E20D4C]( &protocol conformance descriptor for Date.ComponentsFormatStyle,  &type metadata for Date.ComponentsFormatStyle);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type Date.ComponentsFormatStyle and conformance Date.ComponentsFormatStyle);
  }

  return result;
}

unint64_t instantiation function for generic protocol witness table for Date.ComponentsFormatStyle( uint64_t a1)
{
  unint64_t result = lazy protocol witness table accessor for type Date.ComponentsFormatStyle and conformance Date.ComponentsFormatStyle();
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t destroy for Date.ComponentsFormatStyle()
{
  return swift_unknownObjectRelease();
}

uint64_t initializeWithCopy for Date.ComponentsFormatStyle(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  __int128 v4 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v4;
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  swift_bridgeObjectRetain();
  swift_unknownObjectRetain();
  swift_unknownObjectRetain();
  return a1;
}

uint64_t assignWithCopy for Date.ComponentsFormatStyle(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v4 = *(void *)(a2 + 24);
  *(void *)(a1 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = *(void *)(a2 + 16);
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  *(void *)(a1 + 24) = v4;
  uint64_t v5 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  *(void *)(a1 + 40) = v5;
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  return a1;
}

uint64_t assignWithTake for Date.ComponentsFormatStyle(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  swift_unknownObjectRelease();
  uint64_t v4 = *(void *)(a2 + 40);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  swift_unknownObjectRelease();
  *(void *)(a1 + 40) = v4;
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  return a1;
}

uint64_t getEnumTagSinglePayload for Date.ComponentsFormatStyle(uint64_t a1, int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0 && *(_BYTE *)(a1 + 49)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 16);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for Date.ComponentsFormatStyle(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 40) = 0LL;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 48) = 0;
    *(void *)unint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(_BYTE *)(result + 49) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 49) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for Date.ComponentsFormatStyle()
{
  return &type metadata for Date.ComponentsFormatStyle;
}

ValueMetadata *type metadata accessor for Date.ComponentsFormatStyle.Field()
{
  return &type metadata for Date.ComponentsFormatStyle.Field;
}

ValueMetadata *type metadata accessor for Date.ComponentsFormatStyle.Style()
{
  return &type metadata for Date.ComponentsFormatStyle.Style;
}

uint64_t storeEnumTagSinglePayload for Date.ComponentsFormatStyle.CodingKeys( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 4 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 4) >> 8 < 0xFF) {
    LODWORD(__swift_mutable_project_boxed_opaque_existential_1((uint64_t)v3, v4) = 1;
  }
  else {
    LODWORD(__swift_mutable_project_boxed_opaque_existential_1((uint64_t)v3, v4) = v3;
  }
  if (a3 >= 0xFC) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFB) {
    return ((uint64_t (*)(void))((char *)&loc_183529168 + 4 * byte_183836161[v4]))();
  }
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_18352919C + 4 * byte_18383615C[v4]))();
}

uint64_t sub_18352919C(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1835291A4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x1835291ACLL);
  }
  return result;
}

uint64_t sub_1835291B8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x1835291C0LL);
  }
  *(_BYTE *)unint64_t result = a2 + 4;
  return result;
}

uint64_t sub_1835291C4(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1835291CC(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

void *type metadata accessor for Date.ComponentsFormatStyle.CodingKeys()
{
  return &unk_189C98DE8;
}

uint64_t storeEnumTagSinglePayload for Date.ComponentsFormatStyle.Style( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 5 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 5) >> 8 < 0xFF) {
    LODWORD(__swift_mutable_project_boxed_opaque_existential_1((uint64_t)v3, v4) = 1;
  }
  else {
    LODWORD(__swift_mutable_project_boxed_opaque_existential_1((uint64_t)v3, v4) = v3;
  }
  if (a3 >= 0xFB) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFA) {
    return ((uint64_t (*)(void))((char *)&loc_183529234 + 4 * byte_18383616B[v4]))();
  }
  *a1 = a2 + 5;
  return ((uint64_t (*)(void))((char *)sub_183529268 + 4 * byte_183836166[v4]))();
}

uint64_t sub_183529268(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_183529270(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x183529278LL);
  }
  return result;
}

uint64_t sub_183529284(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x18352928CLL);
  }
  *(_BYTE *)unint64_t result = a2 + 5;
  return result;
}

uint64_t sub_183529290(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_183529298(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

void *type metadata accessor for Date.ComponentsFormatStyle.Style.Option()
{
  return &unk_189C98E78;
}

void *type metadata accessor for Date.ComponentsFormatStyle.Style.CodingKeys()
{
  return &unk_189C98F08;
}

uint64_t storeEnumTagSinglePayload for Date.ComponentsFormatStyle.Field( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 6 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 6) >> 8 < 0xFF) {
    LODWORD(__swift_mutable_project_boxed_opaque_existential_1((uint64_t)v3, v4) = 1;
  }
  else {
    LODWORD(__swift_mutable_project_boxed_opaque_existential_1((uint64_t)v3, v4) = v3;
  }
  if (a3 >= 0xFA) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xF9) {
    return ((uint64_t (*)(void))((char *)&loc_183529314 + 4 * byte_183836175[v4]))();
  }
  *a1 = a2 + 6;
  return ((uint64_t (*)(void))((char *)sub_183529348 + 4 * byte_183836170[v4]))();
}

uint64_t sub_183529348(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_183529350(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x183529358LL);
  }
  return result;
}

uint64_t sub_183529364(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x18352936CLL);
  }
  *(_BYTE *)unint64_t result = a2 + 6;
  return result;
}

uint64_t sub_183529370(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_183529378(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for Date.ComponentsFormatStyle.Field.Option()
{
  return &type metadata for Date.ComponentsFormatStyle.Field.Option;
}

uint64_t storeEnumTagSinglePayload for Date.ComponentsFormatStyle.Style.CodingKeys( uint64_t a1, int a2, int a3)
{
  else {
    int v3 = 2;
  }
  else {
    LODWORD(__swift_mutable_project_boxed_opaque_existential_1((uint64_t)v3, v4) = v3;
  }
  if (a3) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2) {
    return ((uint64_t (*)(void))((char *)sub_1835293D4 + 4 * byte_18383617A[v4]))();
  }
  else {
    return ((uint64_t (*)(void))((char *)sub_1835293F4 + 4 * byte_18383617F[v4]))();
  }
}

_BYTE *sub_1835293D4(_BYTE *result, char a2)
{
  *unint64_t result = a2;
  return result;
}

_BYTE *sub_1835293F4(_BYTE *result)
{
  *unint64_t result = 0;
  return result;
}

_DWORD *sub_1835293FC(_DWORD *result, int a2)
{
  *unint64_t result = a2;
  return result;
}

_WORD *sub_183529404(_WORD *result, __int16 a2)
{
  *unint64_t result = a2;
  return result;
}

_WORD *sub_18352940C(_WORD *result)
{
  *unint64_t result = 0;
  return result;
}

_DWORD *sub_183529414(_DWORD *result)
{
  *unint64_t result = 0;
  return result;
}

void *type metadata accessor for Date.ComponentsFormatStyle.Field.CodingKeys()
{
  return &unk_189C99028;
}

unint64_t lazy protocol witness table accessor for type [Date.ComponentsFormatStyle.Field.Option] and conformance [A]()
{
  unint64_t result = lazy protocol witness table cache variable for type [Date.ComponentsFormatStyle.Field.Option] and conformance [A];
  if (!lazy protocol witness table cache variable for type [Date.ComponentsFormatStyle.Field.Option] and conformance [A])
  {
    uint64_t v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [Date.ComponentsFormatStyle.Field.Option]);
    unint64_t result = MEMORY[0x186E20D4C](MEMORY[0x189618488], v1);
    atomic_store( result,  (unint64_t *)&lazy protocol witness table cache variable for type [Date.ComponentsFormatStyle.Field.Option] and conformance [A]);
  }

  return result;
}

unint64_t specialized Date.ComponentsFormatStyle.Field.Option.init(rawValue:)( unint64_t result)
{
  if (result >= 7) {
    return 7LL;
  }
  return result;
}

uint64_t specialized Date.ComponentsFormatStyle.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x656C797473LL && a2 == 0xE500000000000000LL;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0LL;
  }

  else if (a1 == 0x73646C656966LL && a2 == 0xE600000000000000LL {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1LL;
  }

  else if (a1 == 0x7261646E656C6163LL && a2 == 0xE800000000000000LL {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 2LL;
  }

  else if (a1 == 0x656C61636F6CLL && a2 == 0xE600000000000000LL {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 3LL;
  }

  else if (a1 == 0x697469736F507369LL && a2 == 0xEA00000000006576LL)
  {
    swift_bridgeObjectRelease();
    return 4LL;
  }

  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0) {
      return 4LL;
    }
    else {
      return 5LL;
    }
  }

uint64_t amfi_launch_constraint_set_spawnattr(uint64_t a1, uint64_t a2, uint64_t a3)
{
  else {
    return 22LL;
  }
}

void sub_18352B4D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
}

void sub_18352BAFC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
}

void __Block_byref_object_copy_(uint64_t a1, uint64_t a2)
{
}

void __Block_byref_object_dispose_(uint64_t a1)
{
}

char *retainCString(int a1, char *__s1)
{
  return strdup(__s1);
}

void releaseCString(int a1, void *a2)
{
}

BOOL equalCString(_BYTE *a1, _BYTE *a2)
{
  int v2 = *a1;
  if (!*a1) {
    return *a2 == 0;
  }
  uint64_t v3 = a1 + 1;
  while (v2 == *a2)
  {
    ++a2;
    int v4 = *v3++;
    int v2 = v4;
    if (!v4) {
      return *a2 == 0;
    }
  }

  return 0LL;
}

uint64_t hashCString_old(const char *a1)
{
  return CFStringHashISOLatin1CString();
}

uint64_t _encodeCString(void *a1, char *__s)
{
  uint64_t v7 = *MEMORY[0x1895F89C0];
  if (__s)
  {
    int v4 = strlen(__s);
    _encodeInt(a1, v4);
    return [a1 appendBytes:__s length:v4];
  }

  else
  {
    char v6 = -123;
    return [a1 appendBytes:&v6 length:1];
  }

uint64_t _encodeInt(void *a1, int a2)
{
  int v2 = a1;
  uint64_t v9 = *MEMORY[0x1895F89C0];
  int v7 = a2;
  if ((a2 + 110) > 0xED)
  {
    if ((a2 + 0x7FFF) > 0xFFFE)
    {
      LOBYTE(v6) = -126;
      [a1 appendBytes:&v6 length:1];
      uint64_t v3 = (__int16 *)&v7;
      a1 = v2;
      uint64_t v4 = 4LL;
    }

    else
    {
      __int16 v6 = a2;
      char v8 = -127;
      [a1 appendBytes:&v8 length:1];
      uint64_t v3 = &v6;
      a1 = v2;
      uint64_t v4 = 2LL;
    }
  }

  else
  {
    LOBYTE(v6) = a2;
    uint64_t v3 = &v6;
    uint64_t v4 = 1LL;
  }

  return [a1 appendBytes:v3 length:v4];
}

void _encodeOrReuseCString(void *a1, char *a2, CFDictionaryRef theDict)
{
  uint64_t v8 = *MEMORY[0x1895F89C0];
  if (a2)
  {
    if (CFDictionaryGetValueIfPresent(theDict, a2, (const void **)&value))
    {
      _encodeInt(a1, (int)value);
    }

    else
    {
      value = (void *)(CFDictionaryGetCount(theDict) - 110);
      char v7 = -124;
      [a1 appendBytes:&v7 length:1];
      _encodeCString(a1, a2);
      CFDictionarySetValue(theDict, a2, value);
    }
  }

  else
  {
    LOBYTE(value) = -123;
    [a1 appendBytes:&value length:1];
  }

void _encodeValueOfObjCType(uint64_t a1, char *a2, objc_class **a3)
{
  sizep[1] = *MEMORY[0x1895F89C0];
  char v7 = a2 + 1;
  int v6 = *a2;
  if (v6 <= 80)
  {
    if (v6 <= 57)
    {
      switch(*a2)
      {
        case '!':
          return;
        case '#':
          _encodeClass_old(a1, *a3);
          return;
        case '%':
          char v34 = *(void **)(a1 + 8);
          if (!v34) {
            return;
          }
          Name = (char *)*a3;
LABEL_77:
          double v39 = *(const __CFDictionary **)(a1 + 24);
          break;
        case '(':
          uint64_t v35 = skipAggregateName(a2 + 1);
          NSGetSizeAndAlignment(v35 - 1, sizep, 0LL);
          if (sizep[0])
          {
            NSUInteger v36 = 0LL;
            do
              _encodeValueOfObjCType(a1, "C", (char *)a3 + v36++);
            while (v36 < sizep[0]);
          }

          return;
        case '*':
          double v37 = *(void **)(a1 + 8);
          if (!v37) {
            return;
          }
          double v38 = *a3;
          char v34 = *(void **)(a1 + 8);
          double v39 = *(const __CFDictionary **)(a1 + 24);
          Name = (char *)v38;
          break;
        default:
          goto LABEL_87;
      }

      _encodeOrReuseCString(v34, Name, v39);
    }

    else
    {
      switch(*a2)
      {
        case ':':
          if (*a3) {
            Name = (char *)sel_getName((SEL)*a3);
          }
          else {
            Name = 0LL;
          }
          char v34 = *(void **)(a1 + 8);
          if (v34) {
            goto LABEL_77;
          }
          break;
        case ';':
        case '<':
        case '=':
        case '>':
        case '?':
        case 'A':
          goto LABEL_87;
        case '@':
          _encodeObject_old(a1, *a3);
          break;
        case 'B':
        case 'C':
          goto LABEL_8;
        default:
          if (v6 == 73 || v6 == 76) {
            goto LABEL_24;
          }
          goto LABEL_87;
      }
    }

    return;
  }

  if (v6 > 98)
  {
    switch(*a2)
    {
      case 'c':
LABEL_8:
        uint64_t v9 = *(void **)(a1 + 8);
        if (!v9) {
          return;
        }
        LOBYTE(sizep[0]) = *(_BYTE *)a3;
        uint64_t v10 = sizep;
        goto LABEL_33;
      case 'd':
        unint64_t v21 = *(void **)(a1 + 8);
        if (!v21) {
          return;
        }
        double v28 = *(double *)a3;
        else {
          int v20 = 0;
        }
        sizep[0] = (NSUInteger)*a3;
        char v30 = -125;
        goto LABEL_84;
      case 'e':
      case 'g':
      case 'h':
      case 'j':
      case 'k':
      case 'm':
      case 'n':
      case 'o':
      case 'p':
      case 'r':
        goto LABEL_87;
      case 'f':
        unint64_t v21 = *(void **)(a1 + 8);
        if (!v21) {
          return;
        }
        float v31 = *(float *)a3;
        double v32 = *(float *)a3;
        if (v32 >= -2147483650.0 && v32 < 2147483650.0) {
          int v20 = (int)v31;
        }
        else {
          int v20 = 0;
        }
        if (v31 != (float)v20)
        {
          LODWORD(sizep[0]) = *(_DWORD *)a3;
          LOBYTE(v46) = -125;
          [v21 appendBytes:&v46 length:1];
          uint64_t v10 = sizep;
          goto LABEL_82;
        }

void typeDescriptorError(int a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"*** type descriptor error for '%c' in '%s': %s",  a1,  a2,  a3);
  objc_exception_throw((id)[MEMORY[0x189603F70] exceptionWithName:@"NSArchiverArchiveInconsistency" reason:v3 userInfo:0]);
  -[NSArchiver encodeValuesOfObjCTypes:](v4, v5, v6);
}

uint64_t _encodeObject_old(uint64_t a1, void *a2)
{
  uint64_t v11 = *MEMORY[0x1895F89C0];
  id v4 = a2;
  SEL v5 = *(void **)(a1 + 8);
  if (v5)
  {
    uint64_t result = _encodePointerIfNew(v5, a2, *(CFDictionaryRef *)(a1 + 16));
    if ((_DWORD)result)
    {
      char v7 = (void *)_replacementObjectForObject(a1, a2);
      _encodeClass_old(a1, (objc_class *)[v7 classForArchiver]);
      [v7 encodeWithCoder:a1];
      uint64_t v8 = *(void **)(a1 + 8);
      char v10 = -122;
      return [v8 appendBytes:&v10 length:1];
    }
  }

  else
  {
    uint64_t result = (uint64_t)_replacementObjectForObject(a1, a2);
    if (result)
    {
      uint64_t v9 = (void *)result;
      uint64_t result = CFSetContainsValue(*(CFSetRef *)(a1 + 32), (const void *)result);
      if (!(_DWORD)result)
      {
        CFSetAddValue(*(CFMutableSetRef *)(a1 + 32), v9);
        return [v9 encodeWithCoder:a1];
      }
    }
  }

  return result;
}

const void *_replacementObjectForObject(uint64_t a1, void *key)
{
  v6[1] = *(const void **)MEMORY[0x1895F89C0];
  id v4 = *(const __CFDictionary **)(a1 + 48);
  if (!v4) {
    goto LABEL_4;
  }
  if (!CFDictionaryGetValueIfPresent(v4, key, v6))
  {
    if (*(void *)(a1 + 48))
    {
LABEL_5:
      v6[0] = (const void *)[key replacementObjectForArchiver:a1];
      CFDictionarySetValue(*(CFMutableDictionaryRef *)(a1 + 48), key, v6[0]);
      return v6[0];
    }

uint64_t _decodeCharAtCursor(unint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v3 = *a3;
  BOOL v5 = __CFADD__(*a3, a1) && v3 > 0;
  if (v3 == 0x8000000000000000LL
    || v5
    || v3 < 0 && a1 < -v3
    || !a2
    || -a2 < a1 && a2 != 1
    || (int v6 = (char *)(v3 + a1), v3 + a1 < a1)
    || a2 - 1 + a1 < (unint64_t)v6)
  {
    uint64_t v8 = +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"*** End of archive encountered prematurely at %ld",  *a3);
    objc_exception_throw((id)[MEMORY[0x189603F70] exceptionWithName:@"NSArchiverArchiveInconsistency" reason:v8 userInfo:0]);
    return _decodeCStringAtCursor();
  }

  else
  {
    uint64_t result = *v6;
    *a3 = v3 + 1;
  }

  return result;
}

void _decodeCStringAtCursor(uint64_t a1, void *a2, int a3)
{
  uint64_t v6 = _decodeCharAtCursor(*(void *)(a1 + 8), *(void *)(a1 + 16), a2);
  if ((_DWORD)v6 != -123)
  {
    unsigned int v7 = _decodeIntStartingWithChar(a1, v6, a2, a3);
    if ((v7 & 0x80000000) != 0)
    {
      uint64_t v11 = (void *)MEMORY[0x189603F70];
      uint64_t v12 = @"NSArchiverArchiveInconsistency";
      uint64_t v13 = @"*** Incorrect archive: invalid length";
    }

    else
    {
      unsigned int v8 = v7;
      uint64_t v9 = malloc(v7 + 1);
      if (v9)
      {
        char v10 = v9;
        _deserializeBytes(v9, *(void *)(a1 + 8), *(void *)(a1 + 16), a2, v8);
        v10[v8] = 0;
        return;
      }

      uint64_t v11 = (void *)MEMORY[0x189603F70];
      uint64_t v12 = (const __CFString *)*MEMORY[0x189603B38];
      uint64_t v13 = @"*** memory allocation failed";
    }

    objc_exception_throw((id)[v11 exceptionWithName:v12 reason:v13 userInfo:0]);
    -[NSUnarchiver dealloc](v14, v15);
  }

uint64_t _decodeReusedCStringUsingTable(uint64_t a1, unint64_t *a2, void *a3, int a4)
{
  uint64_t v8 = _decodeCharAtCursor(*(void *)(a1 + 8), *(void *)(a1 + 16), a3);
  if ((_DWORD)v8 == -123) {
    return 0LL;
  }
  if (v8 == 132)
  {
    _decodeCStringAtCursor(a1, a3, a4);
    uint64_t v10 = v9;
    unint64_t v11 = *a2;
    if (*a2 != a2[2])
    {
      uint64_t v13 = a2[3];
      goto LABEL_12;
    }

    unint64_t v12 = a2[1] + v11;
    a2[1] = v11;
    a2[2] = v12;
    if (!(v12 >> 60))
    {
      uint64_t v13 = __CFSafelyReallocate();
      a2[3] = v13;
      unint64_t v11 = *a2;
LABEL_12:
      *a2 = v11 + 1;
      *(void *)(v13 + 8 * v11) = v10;
      return v10;
    }

    uint64_t v18 = +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"*** value %lu too large (may have wrapped)",  v12);
    __int128 v16 = (void *)MEMORY[0x189603F70];
    uint64_t v17 = (const __CFString *)*MEMORY[0x189603A48];
  }

  else
  {
    int v14 = _decodeIntStartingWithChar(a1, v8, a3, a4);
    if (v14 <= -111)
    {
      __int128 v16 = (void *)MEMORY[0x189603F70];
      uint64_t v17 = @"NSArchiverArchiveInconsistency";
      uint64_t v18 = (NSString *)@"*** Incorrect archive: invalid length";
    }

    else
    {
      unint64_t v15 = (v14 + 110);
      if (*a2 > v15)
      {
        uint64_t v10 = *(void *)(a2[3] + 8 * v15);
        if (v10) {
          return v10;
        }
      }

      __int128 v16 = (void *)MEMORY[0x189603F70];
      uint64_t v17 = @"NSArchiverArchiveInconsistency";
      uint64_t v18 = (NSString *)@"*** Incorrect archive: unexpected byte";
    }
  }

  objc_exception_throw((id)[v16 exceptionWithName:v17 reason:v18 userInfo:0]);
  return checkExpected(v20, v21);
}

uint64_t checkExpected(uint64_t __s, char *__s2)
{
  if ((char *)__s != __s2)
  {
    uint64_t v3 = (const char *)__s;
    if (!__s) {
      goto LABEL_32;
    }
    int v4 = *(unsigned __int8 *)__s;
    int v5 = *__s2;
    if (v4 != v5 || strlen((const char *)__s) != 1 || (__s = strlen(__s2), __s != 1))
    {
      __s = strcmp(v3, __s2);
      if ((_DWORD)__s)
      {
        if (v4)
        {
          if (v4 == 108 && v5 == 105) {
            return __s;
          }
          uint64_t v6 = __s2;
          unsigned int v7 = v3;
          do
          {
            int v8 = *v6;
            if (!*v6) {
              goto LABEL_30;
            }
            if (v4 == v8 || v4 == 108 && v8 == 105)
            {
              ++v7;
              ++v6;
            }

            else if (v4 == 63)
            {
              ++v7;
              if (*v6)
              {
                do
                {
                  if (v8 == 61) {
                    break;
                  }
                  int v9 = *++v6;
                  int v8 = v9;
                }

                while (v9);
              }
            }

            else
            {
              if (v8 != 63) {
                goto LABEL_30;
              }
              ++v6;
              if (v4)
              {
                do
                {
                  if (v4 == 61) {
                    break;
                  }
                  int v10 = *(unsigned __int8 *)++v7;
                  int v4 = v10;
                }

                while (v10);
              }
            }

            int v4 = *(unsigned __int8 *)v7;
          }

          while (*v7);
          int v5 = *v6;
        }

        if (v5)
        {
LABEL_30:
          for (uint64_t i = +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"*** file inconsistency: read '%s', expecting '%s'",  v3,  __s2);
                ;
                uint64_t i = +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"*** file inconsistency: read type is null, expecting '%s'",  __s2,  v12))
          {
            objc_exception_throw((id)[MEMORY[0x189603F70] exceptionWithName:@"NSArchiverArchiveInconsistency" reason:i userInfo:0]);
LABEL_32:
            ;
          }
        }
      }
    }
  }

  return __s;
}

const char *_decodeValueOfObjCType(uint64_t a1, char *a2, void *a3)
{
  sizep[1] = *MEMORY[0x1895F89C0];
  unsigned int v7 = a2 + 1;
  int v6 = *a2;
  char v8 = *a2;
  if (v6 <= 80)
  {
    if (v6 > 57)
    {
      switch(*a2)
      {
        case ':':
          int v9 = (const char *)_decodeReusedCStringUsingTable( *(void *)(a1 + 8),  *(unint64_t **)(a1 + 56),  (void *)(a1 + 16),  *(_BYTE *)(a1 + 41) != 0);
          uint64_t Name = (uint64_t)sel_registerName(v9);
          goto LABEL_83;
        case ';':
        case '<':
        case '=':
        case '>':
        case '?':
        case 'A':
          goto LABEL_90;
        case '@':
          double v37 = (void *)_decodeObject_old(a1);
          double v38 = v37;
          if (v37) {
            id v39 = v37;
          }
          *a3 = v38;
          return v7;
        case 'B':
          *(_BYTE *)a3 = _decodeCharAtCursor( *(void *)(*(void *)(a1 + 8) + 8LL),  *(void *)(*(void *)(a1 + 8) + 16LL),  (void *)(a1 + 16)) != 0;
          return v7;
        case 'C':
          goto LABEL_7;
        default:
          if (v6 == 73 || v6 == 76) {
            goto LABEL_24;
          }
          goto LABEL_90;
      }
    }

    switch(*a2)
    {
      case '!':
        return v7;
      case '#':
        uint64_t Name = _decodeClass(a1);
        goto LABEL_83;
      case '%':
        char v52 = (const char *)_decodeReusedCStringUsingTable( *(void *)(a1 + 8),  *(unint64_t **)(a1 + 56),  (void *)(a1 + 16),  *(_BYTE *)(a1 + 41) != 0);
        uint64_t v53 = sel_registerName(v52);
        uint64_t Name = (uint64_t)sel_getName(v53);
        goto LABEL_83;
      case '(':
        uint64_t v54 = skipAggregateName(a2 + 1);
        unsigned int v7 = NSGetSizeAndAlignment(v54 - 1, sizep, 0LL);
        if (sizep[0])
        {
          NSUInteger v55 = 0LL;
          do
            _decodeValueOfObjCType(a1, "C", (char *)a3 + v55++);
          while (v55 < sizep[0]);
        }

        return v7;
      case '*':
        uint64_t v56 = *(void *)(a1 + 8);
        NSUInteger alignp = 0LL;
        if (_decodeNewPtr( v56,  &alignp,  (uint64_t *)sizep,  *(const __CFDictionary **)(a1 + 48),  (uint64_t *)(a1 + 72),  (void *)(a1 + 16),  *(_BYTE *)(a1 + 41) != 0))
        {
          uint64_t v57 = _decodeReusedCStringUsingTable( *(void *)(a1 + 8),  *(unint64_t **)(a1 + 56),  (void *)(a1 + 16),  *(_BYTE *)(a1 + 41) != 0);
          unint64_t v58 = calloc(1uLL, 0x10uLL);
          if (!v58) {
            goto LABEL_93;
          }
          *(void *)unint64_t v58 = v57;
          v58[8] = 0;
          CFDictionarySetValue(*(CFMutableDictionaryRef *)(a1 + 48), (const void *)(sizep[0] + 110), v58);
        }

        else
        {
          if (!alignp) {
            goto LABEL_82;
          }
          if (*(_BYTE *)(alignp + 8))
          {
            char v65 = (void *)MEMORY[0x189603F70];
            uint64_t v66 = @"NSArchiverArchiveInconsistency";
            uint64_t v64 = @"*** reuse label points to invalid type";
            goto LABEL_88;
          }

          uint64_t v57 = *(void *)alignp;
        }

        if ((v57 & 0x8000000000000000LL) == 0)
        {
          if (v57)
          {
            uint64_t Name = (uint64_t)strdup((const char *)v57);
LABEL_83:
            *a3 = Name;
            return v7;
          }

void *_deserializeBytes(void *a1, size_t a2, uint64_t a3, void *a4, int64_t __len)
{
  uint64_t v5 = *a4;
  BOOL v7 = __CFADD__(*a4, a2) && v5 > 0;
  if (v5 == 0x8000000000000000LL
    || v7
    || v5 < 0 && a2 < -v5
    || !a3
    || -a3 < a2 && a3 != 1
    || (unint64_t v10 = v5 + a2, v5 + a2 < a2)
    || (unint64_t v11 = a3 - 1 + a2, v11 < v10)
    || __len && (__len != 1 && v10 > -__len || (size_t v12 = __len + v10 - 1, v12 < a2) || v11 < v12))
  {
    unsigned int v14 = +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"*** End of archive encountered prematurely at %ld",  *a4);
    objc_exception_throw((id)[MEMORY[0x189603F70] exceptionWithName:@"NSArchiverArchiveInconsistency" reason:v14 userInfo:0]);
    return -[NSUnarchiver decodeBytesWithReturnedLength:](v15, v16, v17);
  }

  else
  {
    uint64_t result = memmove(a1, (const void *)(v5 + a2), __len);
    *a4 += __len;
  }

  return result;
}

uint64_t _decodeObject_old(uint64_t a1)
{
  v24[1] = *MEMORY[0x1895F89C0];
  uint64_t v3 = *(void *)(a1 + 8);
  v24[0] = 0LL;
  if (!_decodeNewPtr( v3,  v24,  &v23,  *(const __CFDictionary **)(a1 + 48),  (uint64_t *)(a1 + 72),  (void *)(a1 + 16),  *(_BYTE *)(a1 + 41) != 0))
  {
    if (!v24[0]) {
      return 0LL;
    }
    if (*(_BYTE *)(v24[0] + 8LL) != 2)
    {
      uint64_t v18 = (void *)MEMORY[0x189603F70];
      uint64_t v19 = @"NSArchiverArchiveInconsistency";
      int v20 = (NSString *)@"*** reuse label points to invalid type";
      goto LABEL_25;
    }

    return *(void *)v24[0];
  }

  int v4 = (void *)_decodeClass(a1);
  if (*(_BYTE *)(a1 + 40) == 3)
  {
    uint64_t v1 = *(void *)(a1 + 8);
    BOOL v5 = *(_BYTE *)(a1 + 41) != 0;
    uint64_t v6 = _decodeCharAtCursor(*(void *)(v1 + 8), *(void *)(v1 + 16), (void *)(a1 + 16));
    _decodeIntStartingWithChar(v1, v6, (void *)(a1 + 16), v5);
  }

  if (!v4)
  {
    SEL v16 = +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"*** class error for '%@': %@",  @"NULL",  @"found null class");
    goto LABEL_22;
  }

  BOOL v7 = (void *)[v4 allocWithZone:*(void *)(a1 + 24)];
  char v8 = calloc(1uLL, 0x10uLL);
  if (!v8) {
    goto LABEL_20;
  }
  *(void *)char v8 = v7;
  v8[8] = 2;
  uint64_t v1 = v23 + 110;
  CFDictionarySetValue(*(CFMutableDictionaryRef *)(a1 + 48), (const void *)(v23 + 110), v8);
  uint64_t v9 = objc_msgSend((id)objc_msgSend(v7, "initWithCoder:", a1), "awakeAfterUsingCoder:", a1);
  unint64_t v10 = calloc(1uLL, 0x10uLL);
  if (!v10) {
    goto LABEL_20;
  }
  *(void *)unint64_t v10 = v9;
  v10[8] = 2;
  CFDictionarySetValue(*(CFMutableDictionaryRef *)(a1 + 48), (const void *)v1, v10);
  if (!v9) {
    goto LABEL_13;
  }
  unint64_t v11 = *(unint64_t **)(a1 + 88);
  unint64_t v13 = *v11;
  unint64_t v12 = v11[1];
  unsigned int v14 = (void *)v11[2];
  if (v12 <= *v11)
  {
    uint64_t v1 = v12 + 512;
    if ((v12 + 512) >> 60) {
      goto LABEL_26;
    }
    NSReallocateObjectArray(v14, v12 + 512);
    if (v14)
    {
      uint64_t v15 = *(void *)(a1 + 88);
      *(void *)(v15 + _Block_object_dispose(va, 8) = v1;
      *(void *)(v15 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = v14;
      goto LABEL_12;
    }

uint64_t _encodePointerIfNew(void *a1, const void *a2, CFDictionaryRef theDict)
{
  uint64_t v10 = *MEMORY[0x1895F89C0];
  if (a2)
  {
    if (!CFDictionaryGetValueIfPresent(theDict, a2, (const void **)&value))
    {
      value = (void *)(CFDictionaryGetCount(theDict) - 110);
      char v9 = -124;
      uint64_t v6 = 1LL;
      [a1 appendBytes:&v9 length:1];
      CFDictionarySetValue(theDict, a2, value);
      return v6;
    }

    _encodeInt(a1, (int)value);
  }

  else
  {
    LOBYTE(value) = -123;
    [a1 appendBytes:&value length:1];
  }

  return 0LL;
}

uint64_t _encodeClass_old(uint64_t a1, objc_class *a2)
{
  uint64_t v18 = *MEMORY[0x1895F89C0];
  uint64_t result = *(void *)(a1 + 8);
  if (result)
  {
    int v4 = a2;
    uint64_t result = _encodePointerIfNew((void *)result, a2, *(CFDictionaryRef *)(a1 + 16));
    if ((_DWORD)result)
    {
      do
      {
        BOOL v5 = NSStringFromClass(v4);
        if (-[NSString hasPrefix:](v5, "hasPrefix:", @"%")) {
          BOOL v5 = -[NSString substringFromIndex:](v5, "substringFromIndex:", 1LL);
        }
        uint64_t v6 = *(const __CFDictionary **)(a1 + 40);
        if (!v6 || (Value = (NSString *)CFDictionaryGetValue(v6, v5)) == 0LL)
        {
          Value = (NSString *)encodingMap;
          if (encodingMap) {
            Value = (NSString *)CFDictionaryGetValue((CFDictionaryRef)encodingMap, v5);
          }
        }

        if (Value) {
          char v8 = Value;
        }
        else {
          char v8 = v5;
        }
        if (v8 != v5)
        {
          Class v9 = NSClassFromString(v8);
          if (v9) {
            _NSCoderCheckPotentiallyMangledClassNameAndWarn((uint64_t)v9, 1);
          }
        }

        CStringPtr = CFStringGetCStringPtr((CFStringRef)v8, 0x600u);
        if (!CStringPtr)
        {
          CStringPtr = buffer;
          CFStringGetCString((CFStringRef)v8, buffer, 512LL, 0x600u);
        }

        unint64_t v11 = *(void **)(a1 + 8);
        unint64_t v12 = sel_registerName(CStringPtr);
        uint64_t Name = (char *)sel_getName(v12);
        _encodeOrReuseCString(v11, Name, *(CFDictionaryRef *)(a1 + 24));
        unsigned int v14 = *(void **)(a1 + 8);
        int Version = class_getVersion(v4);
        _encodeInt(v14, Version);
        do
        {
          Superclass = class_getSuperclass(v4);
          int v4 = Superclass;
        }

        while (Superclass && *class_getName(Superclass) == 37);
        uint64_t result = _encodePointerIfNew(*(void **)(a1 + 8), v4, *(CFDictionaryRef *)(a1 + 16));
      }

      while ((result & 1) != 0);
    }
  }

  return result;
}

char *skipAggregateName(char *result)
{
  uint64_t v1 = result;
  do
  {
    while (1)
    {
      int v3 = *result++;
      int v2 = v3;
      if (v3 > 60) {
        break;
      }
    }

    if (v2 == 61) {
      return result;
    }
  }

  while (v2 != 125 && v2 != 123);
  return v1;
}

unint64_t roundUp(unint64_t a1, unint64_t a2)
{
  if ((a2 ^ 0x7FFFFFFFFFFFFFFFLL) < a1)
  {
    int v3 = +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"*** value %lu too large (may have wrapped)",  a2 + a1);
    objc_exception_throw((id)[MEMORY[0x189603F70] exceptionWithName:*MEMORY[0x189603A48] reason:v3 userInfo:0]);
    return _decodeIntStartingWithChar(v4, v5, v6);
  }

  else if (a2)
  {
    return (a2 + a1 - 1) / a2 * a2;
  }

  else
  {
    return 0LL;
  }

uint64_t _decodeIntStartingWithChar(uint64_t a1, uint64_t a2, void *a3, int a4)
{
  int v5 = a3;
  uint64_t v12 = *MEMORY[0x1895F89C0];
  if ((_DWORD)a2 != -127)
  {
    if ((_DWORD)a2 == -126)
    {
      _deserializeBytes(&v10, *(void *)(a1 + 8), *(void *)(a1 + 16), a3, 4LL);
      unsigned int v8 = bswap32(v10);
      if (a4) {
        return v8;
      }
      else {
        return v10;
      }
    }

    if ((_DWORD)a2 != -121) {
      return a2;
    }
    objc_exception_throw((id)[MEMORY[0x189603F70] exceptionWithName:*MEMORY[0x189603B40] reason:@"more data than room" userInfo:0]);
  }

  _deserializeBytes(&v11, *(void *)(a1 + 8), *(void *)(a1 + 16), v5, 2LL);
  unsigned __int16 v6 = v11;
  unsigned int v7 = bswap32(v11) >> 16;
  if (a4) {
    unsigned __int16 v6 = v7;
  }
  return (__int16)v6;
}

uint64_t _NSUnarchiverPointerTableEntryRetain(uint64_t a1, uint64_t a2)
{
  __int16 v2 = (*(_BYTE *)(a2 + 9))++ + 1;
  if ((v2 & 0x100) == 0) {
    return a2;
  }
  __break(1u);
  return result;
}

void _NSUnarchiverPointerTableEntryFree(int a1, _BYTE *a2)
{
  int v2 = a2[9];
  a2[9] = v2 - 1;
  if ((_BYTE)v2 == 1)
  {
    free(a2);
  }

  else if (!v2)
  {
    __break(1u);
  }

uint64_t ___addStringToStringTable_block_invoke()
{
  return _decodeNewPtr(v0, v1, v2, v3, v4, v5, v6);
}

uint64_t _decodeNewPtr( uint64_t a1, void *a2, uint64_t *a3, const __CFDictionary *a4, uint64_t *a5, void *a6, int a7)
{
  uint64_t v14 = _decodeCharAtCursor(*(void *)(a1 + 8), *(void *)(a1 + 16), a6);
  if ((_DWORD)v14 == -124)
  {
    uint64_t v16 = *a5 + 1;
    *a5 = v16;
    *a3 = v16;
    return 1LL;
  }

  else if (v14 == 133)
  {
    uint64_t result = 0LL;
    *a2 = 0LL;
  }

  else
  {
    int v17 = _decodeIntStartingWithChar(a1, v14, a6, a7);
    *a3 = v17;
    Value = CFDictionaryGetValue(a4, (const void *)(v17 + 110LL));
    uint64_t result = 0LL;
    *a2 = Value;
  }

  return result;
}

uint64_t _decodeClass(uint64_t a1)
{
  v24[1] = *MEMORY[0x1895F89C0];
  uint64_t v2 = *(void *)(a1 + 8);
  v24[0] = 0LL;
  if (_decodeNewPtr( v2,  v24,  &v23,  *(const __CFDictionary **)(a1 + 48),  (uint64_t *)(a1 + 72),  (void *)(a1 + 16),  *(_BYTE *)(a1 + 41) != 0))
  {
    int v3 = (_BYTE *)_decodeReusedCStringUsingTable( *(void *)(a1 + 8),  *(unint64_t **)(a1 + 56),  (void *)(a1 + 16),  *(_BYTE *)(a1 + 41) != 0);
    if (!v3)
    {
      uint64_t v19 = (void *)MEMORY[0x189603F70];
      int v20 = @"NSArchiverArchiveInconsistency";
      BOOL v21 = (NSString *)@"*** class name is null";
      goto LABEL_30;
    }

    if (*v3 == 37) {
      int v4 = v3 + 1;
    }
    else {
      int v4 = v3;
    }
    int v5 = -[NSString initWithCString:encoding:]( objc_alloc(&OBJC_CLASS___NSString),  "initWithCString:encoding:",  v4,  CFStringConvertEncodingToNSStringEncoding(0x600u));
    if (!v5) {
      goto LABEL_24;
    }
    int v6 = v5;
    uint64_t v7 = *(void *)(a1 + 8);
    BOOL v8 = *(_BYTE *)(a1 + 41) != 0;
    uint64_t v9 = _decodeCharAtCursor(*(void *)(v7 + 8), *(void *)(v7 + 16), (void *)(a1 + 16));
    int v10 = _decodeIntStartingWithChar(v7, v9, (void *)(a1 + 16), v8);
    unsigned __int16 v11 = *(const __CFDictionary **)(a1 + 80);
    if (!v11 || (Value = (NSString *)CFDictionaryGetValue(v11, v6)) == 0LL)
    {
      Value = (NSString *)decodingMap;
      if (decodingMap) {
        Value = (NSString *)CFDictionaryGetValue((CFDictionaryRef)decodingMap, v6);
      }
    }

    if (Value) {
      unint64_t v13 = Value;
    }
    else {
      unint64_t v13 = v6;
    }
    uint64_t v14 = *(void **)(a1 + 96);
    if (v14 && ([v14 containsObject:v13] & 1) == 0)
    {
      BOOL v21 = +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"*** data to unarchive contains class (%@) which has not been allowed",  v13);
      uint64_t v19 = (void *)MEMORY[0x189603F70];
      uint64_t v22 = (const NSExceptionName *)MEMORY[0x189603A60];
    }

    else
    {
      Class v15 = NSClassFromString(v13);
      if (v15)
      {
        Class v16 = v15;
        _NSCoderCheckPotentiallyMangledClassNameAndWarn((uint64_t)v15, 0);
        objc_opt_self();
        CFDictionarySetValue(*(CFMutableDictionaryRef *)(a1 + 64), v13, (const void *)v10);
        int v17 = calloc(1uLL, 0x10uLL);
        if (v17)
        {
          *(void *)int v17 = v16;
          _BYTE v17[8] = 1;
          CFDictionarySetValue(*(CFMutableDictionaryRef *)(a1 + 48), (const void *)(v23 + 110), v17);
          _decodeClass(a1);

          return (uint64_t)v16;
        }

uint64_t __NSComparatorTranslator(void *a1, void *a2, uint64_t a3)
{
  return (*(uint64_t (**)(void, void, void))a3)(*a1, *a2, *(void *)(a3 + 8));
}

id _NSUseParamAsSortSelector(void *a1, uint64_t a2, SEL a3)
{
  return objc_msgSend(a1, a3, a2);
}

uint64_t sub_183533810()
{
  return 0LL;
}

uint64_t sub_183533850()
{
  return 0LL;
}

void sub_1835342D0(_Unwind_Exception *a1)
{
}

void sub_1835342EC(uint64_t a1, int a2)
{
  if (a2) {
    objc_terminate();
  }
  JUMPOUT(0x1835342F8LL);
}

void sub_1835344C4(_Unwind_Exception *a1)
{
}

void sub_1835344E0(uint64_t a1, int a2)
{
  if (a2) {
    objc_terminate();
  }
  JUMPOUT(0x1835344ECLL);
}

uint64_t _NSReadMutableAttributedStringWithCoder(void *a1, void *a2)
{
  uint64_t v47 = *MEMORY[0x1895F89C0];
  int v4 = [a1 allowsKeyedCoding];
  char v5 = v4;
  if (v4) {
    uint64_t v6 = [a1 decodeObjectOfClass:objc_opt_class() forKey:@"NSString"];
  }
  else {
    uint64_t v6 = [a1 decodeObject];
  }
  if (v6) {
    uint64_t v7 = (__CFString *)v6;
  }
  else {
    uint64_t v7 = &stru_189CA6A28;
  }
  unint64_t v8 = -[__CFString length](v7, "length");
  objc_msgSend(a2, "replaceCharactersInRange:withString:", 0, 0, v7);
  if (!v8) {
    return 1LL;
  }
  if ((v5 & 1) == 0)
  {
    unint64_t v10 = 0LL;
    uint64_t v11 = 20LL;
    uint64_t v12 = __src;
    memset(__src, 0, sizeof(__src));
    while (1)
    {
      objc_msgSend(a1, "decodeValuesOfObjCTypes:", "iI", &v45, &v44);
      if (v45 < 1)
      {
LABEL_30:
        BOOL v17 = v10 >= v8;
        if (v12 && v12 != __src) {
          free(v12);
        }
        return v17;
      }

      uint64_t v13 = *((void *)v12 + v45);
      if (!v13) {
        goto LABEL_28;
      }
LABEL_29:
      objc_msgSend(a2, "setAttributes:range:", v13, v10, v44);
      v10 += v44;
      if (v10 >= v8) {
        goto LABEL_30;
      }
    }

    else {
      unint64_t v14 = 2 * v11;
    }
    if (v12 == __src)
    {
      Class v16 = NSAllocateObjectArray(v14);
      uint64_t v12 = v16;
      if (!v16) {
        goto LABEL_30;
      }
      memmove(v16, __src, 8 * v11);
    }

    else
    {
      NSReallocateObjectArray(v12, v14);
      uint64_t v12 = v15;
      if (!v15) {
        goto LABEL_30;
      }
      bzero((char *)v15 + 8 * v11, 8 * (v14 - v11));
    }

    uint64_t v11 = v14;
LABEL_28:
    uint64_t v13 = [a1 decodeObject];
    *((void *)v12 + v45) = v13;
    goto LABEL_29;
  }

  if (qword_18C494A60 != -1) {
    dispatch_once(&qword_18C494A60, &__block_literal_global_194);
  }
  if (objc_opt_isKindOfClass() & 1) != 0 && ([a1 _strictSecureDecodingEnabled]) {
    uint64_t v9 = &qword_18C494A50;
  }
  else {
    uint64_t v9 = &qword_18C494A58;
  }
  uint64_t v18 = (void *)objc_msgSend( a1,  "decodeObjectOfClasses:forKey:",  objc_msgSend((id)objc_msgSend(a1, "allowedClasses"), "setByAddingObjectsFromSet:", *v9),  @"NSAttributes");
  uint64_t v19 = [a1 decodeObjectOfClass:objc_opt_class() forKey:@"NSAttributeInfo"];
  if (!v18) {
    return 1LL;
  }
  int v20 = (void *)v19;
  if (!v19 && _NSIsNSDictionary())
  {
    objc_msgSend(a2, "setAttributes:range:", v18, 0, v8);
    return 1LL;
  }

  uint64_t v21 = [v20 bytes];
  uint64_t v22 = [v20 length];
  unint64_t v23 = 0LL;
  uint64_t v24 = (unsigned __int8 *)(v21 + v22);
LABEL_40:
  if ((unsigned __int8 *)v21 != v24)
  {
    uint64_t v25 = 0LL;
    uint64_t v26 = 1LL;
    NSUInteger v27 = (unsigned __int8 *)v21;
    do
    {
      int v29 = *v27++;
      int v28 = v29;
      int v30 = (char)v29;
      int v31 = v29 - 128;
      if ((v29 & 0x80u) != 0) {
        int v28 = v31;
      }
      uint64_t v32 = v26 * v28;
      BOOL v33 = __CFADD__(v32, v25);
      v25 += v32;
      if (v33) {
        break;
      }
      if ((v30 & 0x80000000) == 0)
      {
        char v34 = (unsigned __int8 *)(v21 + 1);
        if (v34 != v24)
        {
          uint64_t v35 = 0LL;
          uint64_t v36 = 1LL;
          double v37 = v34;
          while (1)
          {
            int v39 = *v37++;
            int v38 = v39;
            int v40 = (char)v39;
            int v41 = v39 - 128;
            if ((v39 & 0x80u) != 0) {
              int v38 = v41;
            }
            uint64_t v42 = v36 * v38;
            BOOL v33 = __CFADD__(v42, v35);
            v35 += v42;
            if (v33) {
              break;
            }
            if ((v40 & 0x80000000) == 0)
            {
              objc_msgSend(a2, "setAttributes:range:", objc_msgSend(v18, "objectAtIndex:", v35), v23, v25);
              v23 += v25;
              uint64_t v21 = (uint64_t)(v34 + 1);
              BOOL v17 = 1LL;
              if (v23 < v8) {
                goto LABEL_40;
              }
              return v17;
            }

            BOOL v17 = 0LL;
            v36 <<= 7;
            char v34 = v37;
            if (v37 == v24) {
              return v17;
            }
          }
        }

        return 0LL;
      }

      v26 <<= 7;
      uint64_t v21 = (uint64_t)v27;
    }

    while (v27 != v24);
  }

  return 0LL;
}

uint64_t _NSAttributeDictionaryClass()
{
  uint64_t result = attributeDictionaryClass;
  if (!attributeDictionaryClass)
  {
    uint64_t result = (uint64_t)objc_lookUpClass("NSAttributeDictionary");
    attributeDictionaryClass = result;
    if (!result)
    {
      uint64_t result = objc_opt_self();
      attributeDictionaryClass = result;
    }
  }

  return result;
}

uint64_t blockForLocation(uint64_t a1, unint64_t a2, unint64_t *a3)
{
  unint64_t v6 = *(void *)(a1 + 16);
  if (a2 <= v6 >> 1)
  {
    os_unfair_lock_unlock(&__NSRLEArrayLock);
    unint64_t v6 = 0LL;
    uint64_t v7 = 0LL;
  }

  else
  {
    uint64_t v7 = *(unsigned int *)(a1 + 36);
    os_unfair_lock_unlock(&__NSRLEArrayLock);
    if (v6 > a2)
    {
      unint64_t v8 = (uint64_t *)(a1 + 16 * v7 + 24);
      do
      {
        uint64_t v9 = *v8;
        v8 -= 2;
        v6 -= v9;
        --v7;
      }

      while (v7 && v6 > a2);
      goto LABEL_10;
    }
  }

  uint64_t v10 = a1 + 16 * v7--;
  uint64_t v11 = (uint64_t *)(v10 + 40);
  unint64_t v12 = v6;
  do
  {
    unint64_t v6 = v12;
    uint64_t v13 = *v11;
    v11 += 2;
    v12 += v13;
    ++v7;
  }

  while (v12 <= a2);
LABEL_10:
  os_unfair_lock_lock(&__NSRLEArrayLock);
  *(void *)(a1 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = v6;
  *(_DWORD *)(a1 + 36) = v7;
  os_unfair_lock_unlock(&__NSRLEArrayLock);
  if (a3)
  {
    unint64_t v14 = *(void *)(a1 + 16 * v7 + 40);
    *a3 = v6;
    a3[1] = v14;
  }

  return v7;
}

uint64_t _NSGrammaticalGenderGetFromExternalRepresentation(void *a1, uint64_t *a2)
{
  if (a1)
  {
    if ([a1 isEqual:@"feminine"])
    {
      uint64_t v4 = 1LL;
    }

    else if ([a1 isEqual:@"masculine"])
    {
      uint64_t v4 = 2LL;
    }

    else
    {
      uint64_t result = [a1 isEqual:@"neuter"];
      if (!(_DWORD)result) {
        return result;
      }
      uint64_t v4 = 3LL;
    }
  }

  else
  {
    uint64_t v4 = 0LL;
  }

  *a2 = v4;
  return 1LL;
}

uint64_t _NSGrammaticalNumberGetFromExternalRepresentation(void *a1, uint64_t *a2)
{
  if (a1)
  {
    if ([a1 isEqual:@"one"])
    {
      uint64_t v4 = 1LL;
    }

    else if ([a1 isEqual:@"zero"])
    {
      uint64_t v4 = 2LL;
    }

    else if ([a1 isEqual:@"other"])
    {
      uint64_t v4 = 3LL;
    }

    else if ([a1 isEqual:@"two"])
    {
      uint64_t v4 = 4LL;
    }

    else if ([a1 isEqual:@"few"])
    {
      uint64_t v4 = 5LL;
    }

    else
    {
      uint64_t result = [a1 isEqual:@"many"];
      if (!(_DWORD)result) {
        return result;
      }
      uint64_t v4 = 6LL;
    }
  }

  else
  {
    uint64_t v4 = 0LL;
  }

  *a2 = v4;
  return 1LL;
}

uint64_t _NSGrammaticalPartOfSpeechGetFromExternalRepresentation(void *a1, uint64_t *a2)
{
  if (a1)
  {
    if ([a1 isEqual:@"determiner"])
    {
      uint64_t v4 = 1LL;
    }

    else if ([a1 isEqual:@"pronoun"])
    {
      uint64_t v4 = 2LL;
    }

    else if ([a1 isEqual:@"letter"])
    {
      uint64_t v4 = 3LL;
    }

    else if ([a1 isEqual:@"adverb"])
    {
      uint64_t v4 = 4LL;
    }

    else if ([a1 isEqual:@"particle"])
    {
      uint64_t v4 = 5LL;
    }

    else if ([a1 isEqual:@"adjective"])
    {
      uint64_t v4 = 6LL;
    }

    else if ([a1 isEqual:@"adposition"])
    {
      uint64_t v4 = 7LL;
    }

    else if ([a1 isEqual:@"verb"])
    {
      uint64_t v4 = 8LL;
    }

    else if ([a1 isEqual:@"noun"])
    {
      uint64_t v4 = 9LL;
    }

    else if ([a1 isEqual:@"conjunction"])
    {
      uint64_t v4 = 10LL;
    }

    else if ([a1 isEqual:@"numeral"])
    {
      uint64_t v4 = 11LL;
    }

    else if ([a1 isEqual:@"interjection"])
    {
      uint64_t v4 = 12LL;
    }

    else if ([a1 isEqual:@"preposition"])
    {
      uint64_t v4 = 13LL;
    }

    else
    {
      uint64_t result = [a1 isEqual:@"abbreviation"];
      if (!(_DWORD)result) {
        return result;
      }
      uint64_t v4 = 14LL;
    }
  }

  else
  {
    uint64_t v4 = 0LL;
  }

  *a2 = v4;
  return 1LL;
}

uint64_t _NSGrammaticalCaseGetFromExternalRepresentation(void *a1, uint64_t *a2)
{
  if (a1)
  {
    if ([a1 isEqual:@"nominative"])
    {
      uint64_t v4 = 1LL;
    }

    else if ([a1 isEqual:@"accusative"])
    {
      uint64_t v4 = 2LL;
    }

    else if ([a1 isEqual:@"dative"])
    {
      uint64_t v4 = 3LL;
    }

    else if ([a1 isEqual:@"genitive"])
    {
      uint64_t v4 = 4LL;
    }

    else if ([a1 isEqual:@"prepositional"])
    {
      uint64_t v4 = 5LL;
    }

    else if ([a1 isEqual:@"ablative"])
    {
      uint64_t v4 = 6LL;
    }

    else if ([a1 isEqual:@"adessive"])
    {
      uint64_t v4 = 7LL;
    }

    else if ([a1 isEqual:@"allative"])
    {
      uint64_t v4 = 8LL;
    }

    else if ([a1 isEqual:@"elative"])
    {
      uint64_t v4 = 9LL;
    }

    else if ([a1 isEqual:@"illative"])
    {
      uint64_t v4 = 10LL;
    }

    else if ([a1 isEqual:@"essive"])
    {
      uint64_t v4 = 11LL;
    }

    else if ([a1 isEqual:@"inessive"])
    {
      uint64_t v4 = 12LL;
    }

    else if ([a1 isEqual:@"locative"])
    {
      uint64_t v4 = 13LL;
    }

    else
    {
      uint64_t result = [a1 isEqual:@"translative"];
      if (!(_DWORD)result) {
        return result;
      }
      uint64_t v4 = 14LL;
    }
  }

  else
  {
    uint64_t v4 = 0LL;
  }

  *a2 = v4;
  return 1LL;
}

uint64_t _NSGrammaticalPronounTypeGetFromExternalRepresentation(void *a1, uint64_t *a2)
{
  if (a1)
  {
    if ([a1 isEqual:@"personal"])
    {
      uint64_t v4 = 1LL;
    }

    else if ([a1 isEqual:@"reflexive"])
    {
      uint64_t v4 = 2LL;
    }

    else
    {
      uint64_t result = [a1 isEqual:@"possessive"];
      if (!(_DWORD)result) {
        return result;
      }
      uint64_t v4 = 3LL;
    }
  }

  else
  {
    uint64_t v4 = 0LL;
  }

  *a2 = v4;
  return 1LL;
}

BOOL __NSMorphologyCustomPronounValidate(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return +[NSMorphologyCustomPronoun _validateCustomPronounWithAccessor:forLanguage:error:]( &OBJC_CLASS___NSMorphologyCustomPronoun,  "_validateCustomPronounWithAccessor:forLanguage:error:",  a1,  a2,  a3);
}

uint64_t _NSAutoreleasePoolGetRubyToken()
{
  return _CFGetTSD();
}

uint64_t _NSAutoreleasePoolSetRubyToken(uint64_t result)
{
  if (result) {
    return _CFSetTSD();
  }
  return result;
}

uint64_t NSAutoreleaseObject()
{
  return _CFAutoreleasePoolAddObject();
}

uint64_t NSAutoreleasePoolCount()
{
  return 0LL;
}

uint64_t copyFromStringToStorage( uint64_t result, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  uint64_t v20 = *MEMORY[0x1895F89C0];
  if (a3)
  {
    unint64_t v8 = a3;
    uint64_t v10 = (void *)result;
    do
    {
      uint64_t ValueAtIndex = CFStorageGetValueAtIndex();
      unint64_t v12 = v18[1] - a5 + v19;
      if (v12 >= v8) {
        unint64_t v12 = v8;
      }
      unint64_t v19 = v12;
      if (a6)
      {
        uint64_t result = objc_msgSend(v10, "getCharacters:range:", ValueAtIndex, a2, v12);
        unint64_t v13 = v19;
        unint64_t v14 = v19;
      }

      else
      {
        uint64_t result = objc_msgSend( v10,  "getBytes:maxLength:usedLength:encoding:options:range:remainingRange:",  ValueAtIndex,  v12,  v18,  _NSCStringEncoding,  0,  a2,  v12,  v16);
        if ((result & 1) == 0)
        {
          Class v15 = +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"Unable to convert bytes in string %p to _NSCStringEncoding",  v10);
          objc_exception_throw((id)[MEMORY[0x189603F70] exceptionWithName:*MEMORY[0x189603A58] reason:v15 userInfo:0]);
        }

        unint64_t v13 = v18[0];
        unint64_t v14 = v19 - v17;
      }

      a2 += v14;
      a5 += v13;
      v8 -= v14;
    }

    while (v8);
  }

  return result;
}

BOOL _NSIsLocalizedString(void *a1)
{
  return object_getClass(a1) == (Class)&OBJC_CLASS___NSDebugString;
}

void NSBundleDisableCodeLoading()
{
  _MergedGlobals_91 = 1;
}

void sub_18353EAB0( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, CFTypeRef cf, uint64_t a12, uint64_t a13, uint64_t *a14)
{
  if (a2 == 1)
  {
    id v17 = objc_begin_catch(exception_object);
    if (a14)
    {
      CFGetAllocator(v15);
      *a14 = _CFBundleCreateError();
    }

    uint64_t v18 = (os_log_s *)_NSOSLog();
    if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
    {
      uint64_t v19 = [v14 bundleURL];
      *(_DWORD *)(v16 - 12_Block_object_dispose(va, 8) = 138412546;
      uint64_t v20 = v16 - 128;
      *(void *)(v20 + 4) = v19;
      *(_WORD *)(v16 - 1__swift_destroy_boxed_opaque_existential_1(v0 + 16) = 2112;
      *(void *)(v20 + 14) = v17;
      _os_log_error_impl( &dword_182EB1000,  v18,  OS_LOG_TYPE_ERROR,  "NSBundle %@ loading failed because an exception was raised during loading %@",  (uint8_t *)(v16 - 128),  0x16u);
    }

    objc_end_catch();
    JUMPOUT(0x18353E83CLL);
  }

  _Unwind_Resume(exception_object);
}

Class _NSBundleGetPrincipalClassFromInfoDict(unint64_t *a1)
{
  uint64_t v24 = *MEMORY[0x1895F89C0];
  int v2 = atomic_load(a1 + 1);
  if ((v2 & 0x4000000) == 0)
  {
    int v3 = (os_log_s *)_NSOSLog();
    if (!os_log_type_enabled(v3, OS_LOG_TYPE_DEBUG)) {
      return 0LL;
    }
    *(_DWORD *)uint64_t v22 = 138412290;
    *(void *)&v22[4] = [a1 bundleURL];
    uint64_t v21 = "NSBundle %@ principal class is nil because the bundle is not loaded";
LABEL_20:
    _os_log_debug_impl(&dword_182EB1000, v3, OS_LOG_TYPE_DEBUG, v21, v22, 0xCu);
    return 0LL;
  }

  char v5 = (void *)[a1 infoDictionary];
  unint64_t v6 = (NSString *)[v5 objectForKey:@"NSPrincipalClass"];
  uint64_t v7 = (NSString *)a1[7];
  if (v6)
  {
    unint64_t v8 = v6;
    Class result = NSClassFromString(v6);
    if (result) {
      return result;
    }
    if (v7)
    {
      uint64_t v9 = (os_log_s *)_NSOSLog();
      if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)uint64_t v22 = 138412802;
        *(void *)&v22[4] = [a1 bundleURL];
        *(_WORD *)&v22[12] = 2112;
        *(void *)&v22[14] = v7;
        *(_WORD *)&v22[22] = 2112;
        unint64_t v23 = v8;
        uint64_t v10 = "NSBundle %@ principal class is using first class name %@ because the bundle's principal class name %@ is not present";
        uint64_t v11 = v9;
        uint32_t v12 = 32;
LABEL_22:
        _os_log_debug_impl(&dword_182EB1000, v11, OS_LOG_TYPE_DEBUG, v10, v22, v12);
        goto LABEL_11;
      }

      goto LABEL_11;
    }

uint64_t _NSBundleInitializePrincipalClass(uint64_t result)
{
  if (result)
  {
    Class = object_getClass((id)result);
    Class result = class_respondsToSelector(Class, sel_self);
    if ((_DWORD)result) {
      return objc_opt_self();
    }
  }

  return result;
}

void *_NSFrameworkPathFromLibraryPath(void *result)
{
  uint64_t v10 = *MEMORY[0x1895F89C0];
  if (result)
  {
    uint64_t v1 = (void *)objc_msgSend( (id)objc_msgSend(result, "_stringByResolvingSymlinksInPathUsingCache:", 1),  "stringByDeletingLastPathComponent");
    int v2 = (void *)[v1 pathExtension];
    if (!objc_msgSend(v2, "compare:options:range:", @"framework", 0, 0, objc_msgSend(v2, "length"))) {
      goto LABEL_15;
    }
    int v3 = (void *)[v1 stringByDeletingLastPathComponent];
    uint64_t v4 = (void *)[v3 lastPathComponent];
    uint64_t v5 = objc_msgSend(v4, "compare:options:range:", @"Versions", 0, 0, objc_msgSend(v4, "length"));
    Class result = 0LL;
    if (!v5)
    {
      uint64_t v1 = (void *)[v3 stringByDeletingLastPathComponent];
      unint64_t v6 = (void *)[v1 pathExtension];
      if (!objc_msgSend(v6, "compare:options:range:", @"framework", 0, 0, objc_msgSend(v6, "length"))
        || (uint64_t v7 = objc_msgSend(v6, "compare:options:range:", @"axbundle", 0, 0, objc_msgSend(v6, "length")),
            Class result = 0LL,
            !v7))
      {
LABEL_15:
        if ([v1 getFileSystemRepresentation:v9 maxLength:1024] && !stat(v9, &v8))
        {
          if (access(v9, 4))
          {
            getpid();
            sandbox_check();
          }

          else if ((v8.st_mode & 0xF000) == 0x4000)
          {
            return v1;
          }
        }

        return 0LL;
      }
    }
  }

  return result;
}

void *_NSBundlePathFromExecutablePath(void *a1)
{
  uint64_t v9 = *MEMORY[0x1895F89C0];
  uint64_t v1 = (void *)objc_msgSend( (id)objc_msgSend(a1, "_stringByResolvingSymlinksInPathUsingCache:", 1),  "stringByDeletingLastPathComponent");
  int v2 = (void *)[v1 stringByDeletingLastPathComponent];
  int v3 = (void *)[v2 lastPathComponent];
  if (!objc_msgSend(v3, "compare:options:range:", @"Contents", 0, 0, objc_msgSend(v3, "length"))
    || !objc_msgSend(v3, "compare:options:range:", @"Executables", 0, 0, objc_msgSend(v3, "length"))
    && (int v2 = (void *)[v2 stringByDeletingLastPathComponent],
        uint64_t v4 = (void *)[v2 lastPathComponent],
        !objc_msgSend(v4, "compare:options:range:", @"Support Files", 0, 0, objc_msgSend(v4, "length"))))
  {
    uint64_t v5 = (void *)[v2 stringByDeletingLastPathComponent];
    if ([v5 getFileSystemRepresentation:v8 maxLength:1024])
    {
      if (!stat(v8, &v7))
      {
        if (access(v8, 4))
        {
          getpid();
          sandbox_check();
        }

        else if ((v7.st_mode & 0xF000) == 0x4000)
        {
          return v5;
        }
      }
    }
  }

  return v1;
}

uint64_t _NSAttributedStringMarkdownParsingLocalizedStringOptions()
{
  if (qword_18C496578 != -1) {
    dispatch_once(&qword_18C496578, &__block_literal_global_46);
  }
  return qword_18C496570;
}

uint64_t _NSBundleImagesLoadedCallback(unsigned int a1, const void *a2)
{
  uint64_t result = _CFGetTSD();
  if (result == 1)
  {
    uint64_t v5 = calloc(a1 + 1, 8uLL);
    memcpy(v5, a2, 8LL * a1);
    *((void *)v5 + a1) = 0LL;
    return _CFSetTSD();
  }

  return result;
}

void *___iOSStyleReceipt_block_invoke()
{
  return dlopen("/System/Library/Frameworks/MobileCoreServices.framework/MobileCoreServices", 256);
}

NSMutableAttributedString *_NSStringCreateByParsingMarkdownAndOptionallyInflecting( void *a1, __CFBundle *MainBundle, void *a3, void *a4, int a5)
{
  uint64_t v35 = *MEMORY[0x1895F89C0];
  uint64_t v10 = (NSMutableAttributedString *)objc_msgSend((id)objc_msgSend(a1, "__baseAttributedString"), "mutableCopy");
  if (v10) {
    return v10;
  }
  id v11 = (id)_NSAttributedStringMarkdownParsingLocalizedStringOptions();
  if (!a3) {
    goto LABEL_14;
  }
  __int128 v33 = 0u;
  __int128 v34 = 0u;
  __int128 v31 = 0u;
  __int128 v32 = 0u;
  uint32_t v12 = (void *)objc_msgSend((id)objc_msgSend(a3, "pathComponents"), "reverseObjectEnumerator");
  uint64_t v13 = [v12 countByEnumeratingWithState:&v31 objects:v30 count:16];
  if (!v13) {
    goto LABEL_14;
  }
  uint64_t v14 = v13;
  id v28 = v11;
  int v29 = a5;
  id v15 = 0LL;
  uint64_t v16 = *(void *)v32;
  do
  {
    for (uint64_t i = 0LL; i != v14; ++i)
    {
      if (*(void *)v32 != v16) {
        objc_enumerationMutation(v12);
      }
      uint64_t v18 = *(void **)(*((void *)&v31 + 1) + 8 * i);
      if (objc_msgSend(v18, "hasSuffix:", @".lproj", v28)
        && (unint64_t)[v18 length] >= 7)
      {
        id v15 = (id)objc_msgSend(v18, "substringToIndex:", objc_msgSend(v18, "length") - 6);
      }
    }

    uint64_t v14 = [v12 countByEnumeratingWithState:&v31 objects:v30 count:16];
  }

  while (v14);
  a5 = v29;
  id v11 = v28;
  if (!v15)
  {
LABEL_14:
    if (!MainBundle) {
      MainBundle = CFBundleGetMainBundle();
    }
    uint64_t v19 = CFBundleCopyBundleLocalizations(MainBundle);
    CFArrayRef v20 = CFBundleCopyPreferredLocalizationsFromArray(v19);
    CFRelease(v19);
    id v15 = (id)objc_msgSend((id)-[__CFArray firstObject](v20, "firstObject"), "copy");
    CFRelease(v20);
  }

  uint64_t v21 = (void *)[v11 copy];
  [v21 setLanguageCode:v15];

  if (a4) {
    uint64_t v22 = [a4 objectForKeyedSubscript:@"NSStringInflectableLocalizationKey"];
  }
  else {
    uint64_t v22 = 0LL;
  }
  int v23 = _NSIsNSString();
  uint64_t v24 = objc_alloc(&OBJC_CLASS___NSMutableAttributedString);
  if (v23)
  {
    uint64_t v10 = -[NSAttributedString initWithMarkdownString:options:baseURL:error:]( v24,  "initWithMarkdownString:options:baseURL:error:",  v22,  v21,  0LL,  0LL);
    uint64_t v25 = objc_alloc_init(&OBJC_CLASS___NSAttributedStringMarkdownParsingOptions);
    -[NSAttributedStringMarkdownParsingOptions setInterpretedSyntax:](v25, "setInterpretedSyntax:", 2LL);
    uint64_t v26 = -[NSAttributedString initWithMarkdownString:options:baseURL:error:]( objc_alloc(&OBJC_CLASS___NSAttributedString),  "initWithMarkdownString:options:baseURL:error:",  a1,  v25,  0LL,  0LL);

    if (v26)
    {
      -[NSMutableAttributedString addAttribute:value:range:]( v10,  "addAttribute:value:range:",  @"NSInflectionAlternative",  v26,  0LL,  -[NSAttributedString length](v10, "length"));
    }

    if (!a5) {
      goto LABEL_25;
    }
  }

  else
  {
    uint64_t v10 = -[NSAttributedString initWithMarkdownString:options:baseURL:error:]( v24,  "initWithMarkdownString:options:baseURL:error:",  a1,  v21,  0LL,  0LL);
    if (!a5) {
      goto LABEL_25;
    }
  }

  -[NSMutableAttributedString _inflectWithLocale:replacements:concepts:preflight:]( v10,  "_inflectWithLocale:replacements:concepts:preflight:",  0LL,  MEMORY[0x189604A58],  MEMORY[0x189604A58],  1LL);
LABEL_25:
  if (a4) {
    -[NSMutableAttributedString addAttribute:value:range:]( v10,  "addAttribute:value:range:",  0x189CB2328LL,  a4,  0LL,  -[NSAttributedString length](v10, "length"));
  }

  return v10;
}

void mutateError2(SEL sel, uint64_t a2, objc_class *a3)
{
  if (a2 != 3)
  {
    if (a2 == 2)
    {
      uint64_t Name = _NSMethodExceptionProem(a3, sel);
      stat v8 = @"%@: nil argument";
    }

    else
    {
      if (a2 == 1)
      {
        uint64_t v4 = +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"Attempt to mutate immutable object with %s",  sel_getName(sel),  Class);
LABEL_9:
        uint64_t v5 = v4;
        unint64_t v6 = (void *)MEMORY[0x189603F70];
        stat v7 = (void *)MEMORY[0x189603A60];
        goto LABEL_10;
      }

      uint64_t Name = (void *)sel_getName(sel);
      Class Class = object_getClass(a3);
      stat v8 = @"Can't call %s in %@";
    }

    uint64_t v4 = +[NSString stringWithFormat:](&OBJC_CLASS___NSString, "stringWithFormat:", v8, Name, Class);
    goto LABEL_9;
  }

  uint64_t v5 = +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"%@: Range or index out of bounds",  _NSMethodExceptionProem(a3, sel));
  unint64_t v6 = (void *)MEMORY[0x189603F70];
  stat v7 = (void *)MEMORY[0x189603B40];
LABEL_10:
  objc_exception_throw((id)[v6 exceptionWithName:*v7 reason:v5 userInfo:0]);
  -[NSCFAttributedString setAttributes:range:](v9, v10, v11, v14);
}

uint64_t __NSDateComponentsSetWeek(void *a1, const char *a2)
{
  return [a1 setWeek:a2];
}

uint64_t sub_1835435F4()
{
  return 0LL;
}

uint64_t sub_18354363C()
{
  return 0LL;
}

uint64_t sub_183543684()
{
  return 0LL;
}

__CFDictionary *buildTokenMapWithDictionary(void *a1)
{
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x189604DD0], 0LL, MEMORY[0x189605240], 0LL);
  int v3 = (void *)[a1 objectForKey:@"NSPriorDayDesignations"];
  if (!v3) {
    int v3 = (void *)objc_msgSend(MEMORY[0x189603F18], "arrayWithObjects:", @"yesterday", 0);
  }
  uint64_t v4 = [v3 count];
  if (v4)
  {
    uint64_t v5 = v4 - 1;
    do
      CFDictionarySetValue( Mutable,  (const void *)objc_msgSend((id)objc_msgSend(v3, "objectAtIndex:", v5--), "lowercaseString"),  (const void *)0x4F);
    while (v5 != -1);
  }

  unint64_t v6 = (void *)[a1 objectForKey:@"NSNextDayDesignations"];
  if (!v6) {
    unint64_t v6 = (void *)objc_msgSend(MEMORY[0x189603F18], "arrayWithObjects:", @"tomorrow", 0);
  }
  uint64_t v7 = [v6 count];
  if (v7)
  {
    uint64_t v8 = v7 - 1;
    do
      CFDictionarySetValue( Mutable,  (const void *)objc_msgSend((id)objc_msgSend(v6, "objectAtIndex:", v8--), "lowercaseString"),  (const void *)0x50);
    while (v8 != -1);
  }

  uint64_t v9 = (void *)[a1 objectForKey:@"NSNextNextDayDesignations"];
  if (!v9) {
    uint64_t v9 = (void *)objc_msgSend(MEMORY[0x189603F18], "arrayWithObjects:", @"nextday", 0);
  }
  uint64_t v10 = [v9 count];
  if (v10)
  {
    uint64_t v11 = v10 - 1;
    do
      CFDictionarySetValue( Mutable,  (const void *)objc_msgSend((id)objc_msgSend(v9, "objectAtIndex:", v11--), "lowercaseString"),  (const void *)0x51);
    while (v11 != -1);
  }

  uint32_t v12 = (void *)[a1 objectForKey:@"NSThisDayDesignations"];
  if (!v12) {
    uint32_t v12 = (void *)objc_msgSend(MEMORY[0x189603F18], "arrayWithObjects:", @"today", @"now", 0);
  }
  uint64_t v13 = [v12 count];
  if (v13)
  {
    uint64_t v14 = v13 - 1;
    do
      CFDictionarySetValue( Mutable,  (const void *)objc_msgSend((id)objc_msgSend(v12, "objectAtIndex:", v14--), "lowercaseString"),  (const void *)0x4E);
    while (v14 != -1);
  }

  id v15 = (void *)[a1 objectForKey:@"NSEarlierTimeDesignations"];
  if (!v15) {
    id v15 = (void *)objc_msgSend( MEMORY[0x189603F18],  "arrayWithObjects:",  @"prior",  @"last",  @"past",  @"ago",  0);
  }
  uint64_t v16 = [v15 count];
  if (v16)
  {
    uint64_t v17 = v16 - 1;
    do
      CFDictionarySetValue( Mutable,  (const void *)objc_msgSend((id)objc_msgSend(v15, "objectAtIndex:", v17--), "lowercaseString"),  (const void *)0x5A);
    while (v17 != -1);
  }

  uint64_t v18 = (void *)[a1 objectForKey:@"NSLaterTimeDesignations"];
  if (!v18) {
    uint64_t v18 = (void *)objc_msgSend(MEMORY[0x189603F18], "arrayWithObjects:", @"next", 0);
  }
  uint64_t v19 = [v18 count];
  if (v19)
  {
    uint64_t v20 = v19 - 1;
    do
      CFDictionarySetValue( Mutable,  (const void *)objc_msgSend((id)objc_msgSend(v18, "objectAtIndex:", v20--), "lowercaseString"),  (const void *)0x59);
    while (v20 != -1);
  }

  uint64_t v21 = (void *)[a1 objectForKey:@"NSYearMonthWeekDesignations"];
  if (!v21) {
    uint64_t v21 = (void *)objc_msgSend( MEMORY[0x189603F18],  "arrayWithObjects:",  @"year",  @"month",  @"week",  0);
  }
  uint64_t v22 = [v21 count];
  if (v22)
  {
    uint64_t v23 = v22 - 1;
    do
    {
      CFDictionarySetValue( Mutable,  (const void *)objc_msgSend((id)objc_msgSend(v21, "objectAtIndex:", v23), "lowercaseString"),  (const void *)(v23 + 91));
      --v23;
    }

    while (v23 != -1);
  }

  uint64_t v24 = (void *)[a1 objectForKey:@"NSHourNameDesignations"];
  if (!v24) {
    uint64_t v24 = (void *)objc_msgSend( @"((0, midnight), (10, morning), (12, noon, lunch), (14, afternoon), (19, dinner))",  "propertyList");
  }
  uint64_t v25 = [v24 count];
  if (v25)
  {
    uint64_t v26 = v25;
    do
    {
      NSUInteger v27 = (void *)[v24 objectAtIndex:--v26];
      int v28 = objc_msgSend((id)objc_msgSend(v27, "objectAtIndex:", 0), "intValue");
      uint64_t v29 = [v27 count];
      if (v29 >= 1)
      {
        int v30 = (const void *)(v28 + 94LL);
        unint64_t v31 = v29 + 1;
        do
        {
          CFDictionarySetValue( Mutable,  (const void *)objc_msgSend((id)objc_msgSend(v27, "objectAtIndex:", v31 - 2), "lowercaseString"),  v30);
          --v31;
        }

        while (v31 > 1);
      }
    }

    while (v26);
  }

  __int128 v32 = (void *)[a1 objectForKey:@"NSMonthNameArray"];
  if (!v32) {
    __int128 v32 = (void *)objc_msgSend( MEMORY[0x189603F18],  "arrayWithObjects:",  @"January",  @"February",  @"March",  @"April",  @"May",  @"June",  @"July",  @"August",  @"September",  @"October",  @"November",  @"December",  0);
  }
  uint64_t v33 = [v32 count];
  if (v33)
  {
    uint64_t v34 = v33 - 1;
    do
    {
      CFDictionarySetValue( Mutable,  (const void *)objc_msgSend((id)objc_msgSend(v32, "objectAtIndex:", v34), "lowercaseString"),  (const void *)(v34 + 66));
      --v34;
    }

    while (v34 != -1);
  }

  uint64_t v35 = (void *)[a1 objectForKey:@"NSShortMonthNameArray"];
  if (!v35) {
    uint64_t v35 = (void *)objc_msgSend( MEMORY[0x189603F18],  "arrayWithObjects:",  @"Jan",  @"Feb",  @"Mar",  @"Apr",  @"May",  @"Jun",  @"Jul",  @"Aug",  @"Sep",  @"Oct",  @"Nov",  @"Dec",  0);
  }
  uint64_t v36 = [v35 count];
  if (v36)
  {
    uint64_t v37 = v36 - 1;
    do
    {
      CFDictionarySetValue( Mutable,  (const void *)objc_msgSend((id)objc_msgSend(v35, "objectAtIndex:", v37), "lowercaseString"),  (const void *)(v37 + 66));
      --v37;
    }

    while (v37 != -1);
  }

  int v38 = (void *)[a1 objectForKey:@"NSWeekDayNameArray"];
  if (!v38) {
    int v38 = (void *)objc_msgSend( MEMORY[0x189603F18],  "arrayWithObjects:",  @"Sunday",  @"Monday",  @"Tuesday",  @"Wednesday",  @"Thursday",  @"Friday",  @"Saturday",  0);
  }
  uint64_t v39 = [v38 count];
  if (v39)
  {
    uint64_t v40 = v39 - 1;
    do
    {
      CFDictionarySetValue( Mutable,  (const void *)objc_msgSend((id)objc_msgSend(v38, "objectAtIndex:", v40), "lowercaseString"),  (const void *)(v40 + 82));
      --v40;
    }

    while (v40 != -1);
  }

  int v41 = (void *)[a1 objectForKey:@"NSShortWeekDayNameArray"];
  if (!v41) {
    int v41 = (void *)objc_msgSend( MEMORY[0x189603F18],  "arrayWithObjects:",  @"Sun",  @"Mon",  @"Tue",  @"Wed",  @"Thu",  @"Fri",  @"Sat",  0);
  }
  uint64_t v42 = [v41 count];
  if (v42)
  {
    uint64_t v43 = v42 - 1;
    do
    {
      CFDictionarySetValue( Mutable,  (const void *)objc_msgSend((id)objc_msgSend(v41, "objectAtIndex:", v43), "lowercaseString"),  (const void *)(v43 + 82));
      --v43;
    }

    while (v43 != -1);
  }

  unsigned int v44 = (void *)[a1 objectForKey:@"NSAMPMDesignation"];
  if (!v44) {
    unsigned int v44 = (void *)objc_msgSend(MEMORY[0x189603F18], "arrayWithObjects:", @"AM", @"PM", 0);
  }
  uint64_t v45 = [v44 count];
  if (v45)
  {
    uint64_t v46 = v45 - 1;
    do
    {
      CFDictionarySetValue( Mutable,  (const void *)objc_msgSend((id)objc_msgSend(v44, "objectAtIndex:", v46), "lowercaseString"),  (const void *)(v46 + 118));
      --v46;
    }

    while (v46 != -1);
  }

  return Mutable;
}

uint64_t appendNumber(void *a1, uint64_t a2, const char *a3, const char *a4)
{
  uint64_t v13 = *MEMORY[0x1895F89C0];
  uint64_t v8 = [a1 length];
  if (*a3) {
    uint64_t v9 = a3;
  }
  else {
    uint64_t v9 = a4;
  }
  uint64_t v10 = fmtcheck(v9, "%ld");
  snprintf(__str, 0x410uLL, v10, a2);
  return objc_msgSend(a1, "replaceCharactersInRange:withCString:length:", v8, 0, __str, strlen(__str));
}

uint64_t skipWhitespace(void *a1)
{
  int v2 = (void *)[a1 string];
  unint64_t v3 = [a1 scanLocation];
  unint64_t v4 = [v2 length];
  uint64_t v5 = (void *)[a1 charactersToBeSkipped];
  if (v4 <= v3) {
    unint64_t v4 = v3;
  }
  while (v4 != v3)
  {
    char v6 = objc_msgSend(v5, "characterIsMember:", objc_msgSend(v2, "characterAtIndex:", v3++));
    if ((v6 & 1) == 0)
    {
      unint64_t v4 = v3 - 1;
      return [a1 setScanLocation:v4];
    }
  }

  return [a1 setScanLocation:v4];
}

uint64_t absolute_from_gregorian(int a1)
{
  uint64_t v1 = (uint64_t)a1 >> 16;
  if (a1 < 2uLL)
  {
    uint64_t v3 = 0LL;
  }

  else
  {
    uint64_t v2 = 0LL;
    uint64_t v3 = 0LL;
    uint64_t v4 = SHIWORD(a1) % 400;
    do
    {
      if ((*(void *)&a1 & 0x30000LL) != 0 || v2 != 1 || v4 == 100 || v4 == 300 || v4 == 200) {
        uint64_t v5 = days_per_month[v2];
      }
      else {
        uint64_t v5 = 29LL;
      }
      v3 += v5;
      ++v2;
    }

    while (a1 - 1LL != v2);
  }

  uint64_t v6 = v1 - 1;
  uint64_t v7 = 365LL * ((int)v1 - 1);
  uint64_t v8 = v1 + 2;
  if (v1 >= 1) {
    uint64_t v8 = v1 - 1;
  }
  uint64_t v9 = ((unsigned __int128)(v6 * (__int128)0x5C28F5C28F5C28F5LL) >> 64) - v1 + 1;
  return v7 + BYTE1(a1) + (v8 >> 2) + v6 / 400 + (v9 >> 6) + ((unint64_t)v9 >> 63) + v3;
}

uint64_t sub_18354A9EC()
{
  return 0LL;
}

uint64_t sub_18354AA2C()
{
  return 0LL;
}

uint64_t sub_18354B040()
{
  return 0LL;
}

uint64_t sub_18354B2E0()
{
  return 0LL;
}

uint64_t sub_18354B320()
{
  return 0LL;
}

uint64_t sub_18354B360()
{
  return 0LL;
}

uint64_t sub_18354B3A0()
{
  return 0LL;
}

uint64_t sub_18354B3E0()
{
  return 0LL;
}

float sub_18354B424()
{
  return 0.0;
}

double sub_18354B464()
{
  return 0.0;
}

uint64_t sub_18354B4A4()
{
  return 0LL;
}

void sub_18354B828( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
}

void __Block_byref_object_copy__0(uint64_t a1, uint64_t a2)
{
}

void __Block_byref_object_dispose__0(uint64_t a1)
{
}

uint64_t _NSCoderIsAppleSigningIdentifier(void *a1)
{
  uint64_t v7 = *MEMORY[0x1895F89C0];
  memset(v6, 0, 76);
  uint64_t result = objc_msgSend( a1,  "getBytes:maxLength:usedLength:encoding:options:range:remainingRange:",  v6,  76,  0,  1,  0,  0,  objc_msgSend(a1, "length"),  0);
  if ((_DWORD)result)
  {
    uint64_t v2 = 0LL;
    BYTE11(v6[4]) = 0;
    do
      int v3 = *((unsigned __int8 *)v6 + v2++);
    while ((v3 - 65) < 0x1A || (v3 - 48) < 0xA);
    uint64_t v5 = (const char *)v6;
    if (v2 == 1) {
      return strncmp(v5, "com.apple.", 0xAuLL) == 0;
    }
    if (v3 == 46)
    {
      uint64_t v5 = (char *)v6 + v2;
      return strncmp(v5, "com.apple.", 0xAuLL) == 0;
    }

    return 0LL;
  }

  return result;
}

uint64_t _NSCoderGetTrustRestrictions()
{
  if (qword_18C496590 != -1) {
    dispatch_once(&qword_18C496590, &__block_literal_global_5);
  }
  return dword_18C49658C;
}

id __NSCoderInvalidState( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v14 = *MEMORY[0x1895F89C0];
  if (a1)
  {
    uint64_t v13 = &a9;
    uint64_t v9 =  -[NSString initWithFormat:arguments:]( objc_alloc(&OBJC_CLASS___NSString),  "initWithFormat:arguments:",  a1,  &a9);
  }

  else
  {
    uint64_t v9 = (NSString *)&stru_189CA6A28;
  }

  objc_exception_throw((id)objc_msgSend( MEMORY[0x189603F70],  "exceptionWithName:reason:userInfo:",  *MEMORY[0x189603A58],  v9,  0,  v13,  v14));
  return -[NSCoder __decoderInfoForAllowedClassesWarning](v10, v11);
}

uint64_t __NSCoderDecodeObject(void *a1, const char *a2)
{
  if (a2) {
    return [a1 decodeTopLevelObjectAndReturnError:a2];
  }
  else {
    return [a1 decodeObject];
  }
}

uint64_t __NSCoderDecodeObjectForKey(void *a1, const char *a2, uint64_t a3)
{
  if (a3) {
    return [a1 decodeTopLevelObjectForKey:a2 error:a3];
  }
  else {
    return [a1 decodeObjectForKey:a2];
  }
}

uint64_t __NSCoderDecodeObjectOfClassForKey(void *a1, const char *a2, uint64_t a3, uint64_t a4)
{
  if (a4) {
    return objc_msgSend(a1, "decodeTopLevelObjectOfClass:forKey:error:", a2, a3);
  }
  else {
    return [a1 decodeObjectOfClass:a2 forKey:a3];
  }
}

uint64_t __NSCoderDecodeObjectOfClassesForKey(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = [MEMORY[0x189604010] setWithArray:a2];
  if (a4) {
    return [a1 decodeTopLevelObjectOfClasses:v7 forKey:a3 error:a4];
  }
  else {
    return [a1 decodeObjectOfClasses:v7 forKey:a3];
  }
}

uint64_t __NSCoderDecodeArrayOfObjectsOfClassesForKey(void *a1, uint64_t a2, uint64_t a3)
{
  return objc_msgSend( a1,  "decodeArrayOfObjectsOfClasses:forKey:",  objc_msgSend(MEMORY[0x189604010], "setWithArray:", a2),  a3);
}

uint64_t __NSCoderDecodeDictionaryWithKeysOfClassesObjectsOfClassesForKey( void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = [MEMORY[0x189604010] setWithArray:a2];
  return objc_msgSend( a1,  "decodeDictionaryWithKeysOfClasses:objectsOfClasses:forKey:",  v7,  objc_msgSend(MEMORY[0x189604010], "setWithArray:", a3),  a4);
}

uint64_t ___collectionClasses_block_invoke()
{
  v2[11] = *MEMORY[0x1895F89C0];
  id v0 = objc_alloc(MEMORY[0x189604010]);
  v2[0] = MEMORY[0x189603F18];
  v2[1] = MEMORY[0x189603FA8];
  v2[2] = MEMORY[0x189603F68];
  v2[3] = MEMORY[0x189603FC8];
  v2[4] = MEMORY[0x189603FE0];
  v2[5] = MEMORY[0x189604010];
  v2[6] = MEMORY[0x189603FD0];
  v2[7] = MEMORY[0x189603FF0];
  v2[8] = MEMORY[0x189603FE0];
  v2[9] = &OBJC_CLASS___NSHashTable;
  v2[10] = &OBJC_CLASS___NSPointerArray;
  uint64_t result = objc_msgSend(v0, "initWithArray:", objc_msgSend(MEMORY[0x189603F18], "arrayWithObjects:count:", v2, 11));
  qword_18C4965A0 = result;
  return result;
}

void ___explicitSubclassExceptions_block_invoke()
{
  id v0 = (const __CFAllocator *)*MEMORY[0x189604DB0];
  uint64_t v1 = CFDictionaryCreate( (CFAllocatorRef)*MEMORY[0x189604DB0],  (const void **)_explicitSubclassExceptionKeys,  (const void **)_explicitSubclassExceptionObjects,  20LL,  0LL,  0LL);
  qword_18C4965B0 = (uint64_t)CFDictionaryCreateMutableCopy(v0, 21LL, v1);
  CFRelease(v1);
  uint64_t v2 = (__CFDictionary *)qword_18C4965B0;
  Class v3 = NSClassFromString((NSString *)@"NSSharedKeyDictionary");
  CFDictionaryAddValue(v2, v3, MEMORY[0x189603FC8]);
  uint64_t v4 = (__CFDictionary *)qword_18C4965B0;
  Class v5 = NSClassFromString((NSString *)@"__NSCFString");
  CFDictionaryAddValue(v4, v5, &OBJC_CLASS___NSMutableString);
  uint64_t v6 = (__CFDictionary *)qword_18C4965B0;
  Class v7 = NSClassFromString((NSString *)@"__NSCFConstantString");
  CFDictionaryAddValue(v6, v7, &OBJC_CLASS___NSMutableString);
}

void sub_18354EACC(_Unwind_Exception *exception_object, int a2)
{
  if (a2)
  {
    if (a2 == 2)
    {
      id v3 = objc_begin_catch(exception_object);
      objc_exception_throw(v3);
    }

    else
    {
      objc_begin_catch(exception_object);
      free(v2);
      objc_exception_rethrow();
    }

    __break(1u);
    JUMPOUT(0x18354EB28LL);
  }

  _Unwind_Resume(exception_object);
}

void *_bestReadOnlySandboxExtensionTypeForURL(void *result)
{
  if (result)
  {
    uint64_t v1 = result;
    getpid();
    objc_msgSend((id)objc_msgSend(v1, "path"), "fileSystemRepresentation");
    else {
      return (void *)*MEMORY[0x1895F8000];
    }
  }

  return result;
}

void *_bestReadWriteSandboxExtensionTypeForURL(void *result)
{
  if (result)
  {
    uint64_t v1 = result;
    getpid();
    objc_msgSend((id)objc_msgSend(v1, "path"), "fileSystemRepresentation");
    else {
      return (void *)*MEMORY[0x1895F8008];
    }
  }

  return result;
}

uint64_t _issueSandboxExtension(void *a1, uint64_t a2, NSError **a3)
{
  v14[1] = *MEMORY[0x1895F89C0];
  if (a2)
  {
    objc_msgSend((id)objc_msgSend(a1, "path"), "fileSystemRepresentation");
    uint64_t v6 = (const char *)sandbox_extension_issue_file();
    if (v6) {
      return [MEMORY[0x189603F48] dataWithBytesNoCopy:v6 length:strlen(v6) + 1 freeWhenDone:1];
    }
    uint64_t v8 = *__error();
    uint64_t v13 = @"NSLocalizedDescription";
    uint64_t v9 = [(id)_NSFoundationBundle() localizedStringForKey:@"Could not create sandbox extension of type %s for URL %@. Error: %s" value:&stru_189CA6A28 table:@"Extension"];
    uint64_t v10 = [a1 path];
    SEL v11 = __error();
    v14[0] = +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  v9,  a2,  v10,  strerror(*v11),  @"NSLocalizedDescription");
    uint32_t v12 = +[NSError errorWithDomain:code:userInfo:]( NSError,  "errorWithDomain:code:userInfo:",  @"NSPOSIXErrorDomain",  v8,  [MEMORY[0x189603F68] dictionaryWithObjects:v14 forKeys:&v13 count:1]);
    if (a3)
    {
      if (v12) {
        *a3 = v12;
      }
    }
  }

  return 0LL;
}

char **_platform_shims_get_environ()
{
  return *_NSGetEnviron();
}

uint64_t _platform_shims_kOSThermalNotificationPressureLevelName()
{
  return *MEMORY[0x1895FB8A0];
}

uint64_t _platform_shims_vm_size()
{
  return *MEMORY[0x1895FD590];
}

uint64_t _platform_mach_task_self()
{
  return *MEMORY[0x1895FBBE0];
}

void NSDataDeallocatorFree_block_invoke(int a1, void *a2)
{
}

void NSDataDeallocatorVM_block_invoke_2(int a1, void *ptr, NSUInteger bytes)
{
  if (ptr) {
    NSDeallocateMemoryPages(ptr, bytes);
  }
}

uint64_t NSDataDeallocatorUnmap_block_invoke_3(int a1, void *a2, size_t a3)
{
  if (a2) {
    return munmap(a2, a3);
  }
  return result;
}

void sub_183553590( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
}

void sub_18355380C(_Unwind_Exception *a1)
{
}

uint64_t sub_183554314()
{
  return v0;
}

uint64_t pathifiedNSURL(void *a1, NSError **a2)
{
  uint64_t result = [a1 path];
  if (!result)
  {
    if (a2)
    {
      Class v5 = _NSErrorWithFilePath(258LL, (uint64_t)a1);
      uint64_t result = 0LL;
      *a2 = v5;
    }

    else
    {
      return 0LL;
    }
  }

  return result;
}

uint64_t _NSDataCreateDispatchDataFromData(void *a1, char a2)
{
  uint64_t v12 = *MEMORY[0x1895F89C0];
  uint64_t v6 = 0LL;
  Class v7 = &v6;
  uint64_t v8 = 0x3052000000LL;
  uint64_t v9 = __Block_byref_object_copy__1;
  uint64_t v10 = __Block_byref_object_dispose__1;
  uint64_t v11 = 0LL;
  v4[0] = MEMORY[0x1895F87A8];
  v4[1] = 3221225472LL;
  _OWORD v4[2] = ___NSDataCreateDispatchDataFromData_block_invoke;
  v4[3] = &unk_189C9A058;
  char v5 = a2;
  v4[4] = a1;
  v4[5] = &v6;
  [a1 enumerateByteRangesUsingBlock:v4];
  uint64_t v2 = v7[5];
  if (!v2)
  {
    uint64_t v2 = MEMORY[0x1895F8AA8];
    v7[5] = MEMORY[0x1895F8AA8];
  }

  _Block_object_dispose(&v6, 8);
  return v2;
}

void sub_183554EE4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
}

void _NSDataReinitializationBreak()
{
  if (_NSDataReinitializationBreak_onceToken != -1) {
    dispatch_once(&_NSDataReinitializationBreak_onceToken, &__block_literal_global_206);
  }
}

uint64_t sub_18355750C()
{
  return 0LL;
}

void _NSMutableDataGrowBytes(uint64_t a1, const char *a2, size_t a3, int a4)
{
  char v8 = 1;
  if (a3 >> 19) {
    char v8 = 2;
  }
  size_t v9 = a3 >> v8;
  if (__CFADD__(v9, a3)) {
    size_t v9 = 0LL;
  }
  size_t v10 = v9 + a3;
  if (*(void *)(a1 + 24) <= v10) {
    size_t v11 = v10;
  }
  else {
    size_t v11 = *(void *)(a1 + 24);
  }
  unint64_t v12 = [(id)a1 length];
  if (v11 > 0x20000) {
    int v13 = a4;
  }
  else {
    int v13 = 0;
  }
  if (*(void *)(a1 + 32))
  {
    int v41 = a2;
    int v42 = a4;
    int v14 = [(id)a1 _canUseRealloc];
    int v15 = v14;
    if (v12) {
      BOOL v16 = a3 / v12 > 3;
    }
    else {
      BOOL v16 = 1;
    }
    int v17 = v14 ^ 1;
    if ((v13 & v16 & 1) != 0 || v17)
    {
      uint64_t v18 = malloc_default_zone();
      unint64_t v19 = (unint64_t)malloc_zone_calloc(v18, 1uLL, v11);
      if (v19)
      {
        uint64_t v20 = (char *)v19;
        unint64_t v21 = *(void *)(a1 + 32);
        if (v12 < 0x80000)
        {
          size_t v23 = v12;
          if (!v12)
          {
LABEL_43:
            a4 = v42;
LABEL_55:
            objc_msgSend((id)a1, "_freeBytes", v23);
            goto LABEL_58;
          }
        }

        else
        {
          uint64_t v22 = (void *)MEMORY[0x1895FD590];
          if (((*MEMORY[0x1895FD590] - 1LL) & (v21 | v19)) != 0
            || (malloc_default_zone(), malloc_zone_claimed_address()))
          {
            unint64_t v19 = (unint64_t)v20;
            size_t v23 = v12;
          }

          else
          {
            NSUInteger v34 = v12 & -*v22;
            NSCopyMemoryPages((const void *)v21, v20, v34);
            v21 += v34;
            unint64_t v19 = (unint64_t)&v20[v34];
            size_t v23 = v12 - v34;
            if (v12 == v34) {
              goto LABEL_43;
            }
          }
        }

        memmove((void *)v19, (const void *)v21, v23);
        goto LABEL_43;
      }
    }

    if ((v15 & 1) != 0)
    {
      uint64_t v24 = __CFSafelyReallocate();
      if (v24)
      {
        uint64_t v20 = (char *)v24;
        int v13 = 0;
        a4 = v42;
        goto LABEL_58;
      }

      if (a3 > 0x20000) {
        int v13 = v42;
      }
      else {
        int v13 = 0;
      }
      int v32 = v13 & v16;
      a4 = v42;
      if ((v32 | v17) != 1)
      {
LABEL_50:
        uint64_t v20 = (char *)__CFSafelyReallocate();
        int v13 = 0;
        size_t v11 = a3;
        if (v20) {
          goto LABEL_58;
        }
LABEL_70:
        uint64_t v36 = (void *)[MEMORY[0x189603F70] exceptionWithName:*MEMORY[0x189603B38], +[NSString stringWithFormat:]( NSString, "stringWithFormat:", @"%@: unable to allocate memory for length (%lu)", _NSMethodExceptionProem((objc_class *)a1, v41), a3), 0 reason userInfo];
        objc_exception_throw(v36);
        -[NSConcreteMutableData appendBytes:length:](v37, v38, v39, v40);
        return;
      }
    }

    else
    {
      a4 = v42;
      if (a3 > 0x20000) {
        int v13 = v42;
      }
      else {
        int v13 = 0;
      }
    }

    NSUInteger v27 = malloc_default_zone();
    unint64_t v28 = (unint64_t)malloc_zone_calloc(v27, 1uLL, a3);
    if (!v28)
    {
      if (!v15) {
        goto LABEL_70;
      }
      goto LABEL_50;
    }

    uint64_t v20 = (char *)v28;
    unint64_t v29 = *(void *)(a1 + 32);
    if (v12 < 0x80000)
    {
      size_t v23 = v12;
      if (!v12)
      {
LABEL_54:
        size_t v11 = a3;
        goto LABEL_55;
      }
    }

    else
    {
      int v30 = (void *)MEMORY[0x1895FD590];
      if (((*MEMORY[0x1895FD590] - 1LL) & (v29 | v28)) != 0
        || (malloc_default_zone(), malloc_zone_claimed_address()))
      {
        unint64_t v28 = (unint64_t)v20;
        size_t v23 = v12;
      }

      else
      {
        NSUInteger v35 = v12 & -*v30;
        NSCopyMemoryPages((const void *)v29, v20, v35);
        v29 += v35;
        unint64_t v28 = (unint64_t)&v20[v35];
        size_t v23 = v12 - v35;
        a4 = v42;
        if (!v23) {
          goto LABEL_54;
        }
      }
    }

    memmove((void *)v28, (const void *)v29, v23);
    goto LABEL_54;
  }

  uint64_t v25 = malloc_default_zone();
  if (v13) {
    uint64_t v26 = (char *)malloc_zone_calloc(v25, 1uLL, v11);
  }
  else {
    uint64_t v26 = (char *)malloc_zone_malloc(v25, v11);
  }
  uint64_t v20 = v26;
  if (v26) {
    goto LABEL_58;
  }
  int v41 = a2;
  if ((a4 & 1) != 0)
  {
    unint64_t v31 = malloc_default_zone();
    if (a3 > 0x20000)
    {
      int v13 = 1;
      uint64_t v20 = (char *)malloc_zone_calloc(v31, 1uLL, a3);
      if (v20) {
        goto LABEL_58;
      }
      goto LABEL_70;
    }
  }

  else
  {
    unint64_t v31 = malloc_default_zone();
  }

  uint64_t v20 = (char *)malloc_zone_malloc(v31, a3);
  int v13 = 0;
  if (!v20) {
    goto LABEL_70;
  }
LABEL_58:
  if (a3 > v12 && a4 && (v13 & 1) == 0) {
    bzero(&v20[v12], a3 - v12);
  }
  *(void *)(a1 + 32) = v20;
  *(void *)(a1 + 24) = v11;
  *(_BYTE *)(a1 + 8) &= ~4u;
  if (v13) {
    char v33 = 0;
  }
  else {
    char v33 = 2;
  }
  *(_BYTE *)(a1 + _Block_object_dispose(va, 8) = *(_BYTE *)(a1 + 8) & 0xFD | v33;
}

void sub_183558C44(_Unwind_Exception *a1)
{
}

void sub_183558CD4(_Unwind_Exception *a1)
{
}

void sub_183558DA8(_Unwind_Exception *a1)
{
}

void sub_183558E40(_Unwind_Exception *a1)
{
}

void sub_183558EC0(_Unwind_Exception *a1)
{
}

void sub_183559C94( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
}

uint64_t _NSAlgToCompAlg(unint64_t a1)
{
  if (a1 < 5) {
    return dword_18386C720[a1];
  }
  objc_exception_throw((id)[MEMORY[0x189603F70] exceptionWithName:*MEMORY[0x189603A60], +[NSString stringWithFormat:]( NSString, "stringWithFormat:", @"Unrecognized compression algorithm value: %ld", a1), 0 reason userInfo]);
  return -[NSData(NSDataCompression) compressedDataUsingAlgorithm:error:]();
}

void sub_183559F10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
}

void __Block_byref_object_copy__1(uint64_t a1, uint64_t a2)
{
}

void __Block_byref_object_dispose__1(uint64_t a1)
{
}

void sub_18355A12C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
}

void sub_18355A344( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16)
{
}

void sub_18355A4B0( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16)
{
}

uint64_t getObjectValue(uint64_t a1, void *a2, __CFString *a3, CFIndex *a4, int a5, NSError **a6)
{
  uint64_t v25 = *MEMORY[0x1895F89C0];
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 40));
  uint64_t NoteCount = _CFLocaleGetNoteCount();
  uint64_t v13 = _CFTimeZoneGetNoteCount() + NoteCount;
  if (v13 + _CFCalendarGetMidnightNoteCount() != *(void *)(a1 + 24)) {
    [(id)a1 _clearFormatter];
  }
  [(id)a1 _regenerateFormatterIfAbsent];
  if (a5)
  {
    BOOL v14 = _CFExecutableLinkedOnOrAfter() != 0;
    if (a4)
    {
LABEL_5:
      CFIndex v16 = *a4;
      CFIndex v15 = a4[1];
      goto LABEL_8;
    }
  }

  else
  {
    BOOL v14 = 0;
    if (a4) {
      goto LABEL_5;
    }
  }

  CFIndex v15 = -[__CFString length](a3, "length");
  CFIndex v16 = 0LL;
LABEL_8:
  rangep.location = v16;
  rangep.length = v15;
  int v17 = *(__CFDateFormatter **)(a1 + 16);
  if (v17) {
    CFDateRef v18 = CFDateFormatterCreateDateFromString((CFAllocatorRef)*MEMORY[0x189604DD0], v17, a3, &rangep);
  }
  else {
    CFDateRef v18 = 0LL;
  }
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 40));
  unint64_t v19 = v18;
  uint64_t v20 = -[__CFString substringFromIndex:](a3, "substringFromIndex:", rangep.length + rangep.location);
  if (v18
    && (!v14
     || -[NSCharacterSet isSupersetOfSet:]( +[NSCharacterSet whitespaceCharacterSet](&OBJC_CLASS___NSCharacterSet, "whitespaceCharacterSet"),  "isSupersetOfSet:",  +[NSCharacterSet characterSetWithCharactersInString:]( &OBJC_CLASS___NSCharacterSet,  "characterSetWithCharactersInString:",  v20))))
  {
    if (a4) {
      *(CFRange *)a4 = rangep;
    }
    if (a2)
    {
      if ([(id)a1 generatesCalendarDates])
      {
        -[__CFDate timeIntervalSinceReferenceDate](v18, "timeIntervalSinceReferenceDate");
        unint64_t v21 = +[NSCalendarDate dateWithTimeIntervalSinceReferenceDate:]( &OBJC_CLASS___NSCalendarDate,  "dateWithTimeIntervalSinceReferenceDate:");
        -[NSCalendarDate setTimeZone:](v21, "setTimeZone:", [(id)a1 timeZone]);
        -[NSCalendarDate setCalendarFormat:](v21, "setCalendarFormat:", &stru_189CA6A28);
        *a2 = v21;
      }

      else
      {
        *a2 = v18;
      }
    }

    return 1LL;
  }

  else if (a6)
  {
    uint64_t v22 = +[NSError errorWithDomain:code:userInfo:]( NSError,  "errorWithDomain:code:userInfo:",  @"NSCocoaErrorDomain",  2048,  objc_msgSend(MEMORY[0x189603F68], "dictionaryWithObjectsAndKeys:", a3, @"NSInvalidValue", 0));
    uint64_t result = 0LL;
    *a6 = v22;
  }

  else
  {
    return 0LL;
  }

  return result;
}

CFStringRef _dateFormatFromTemplate( const __CFString *tmplate, CFOptionFlags options, CFLocaleRef locale)
{
  if (tmplate) {
    return (id)CFDateFormatterCreateDateFormatFromTemplate( (CFAllocatorRef)*MEMORY[0x189604DD0],  tmplate,  options,  locale);
  }
  return tmplate;
}

void _NSDateFormatterNoInit()
{
}

uint64_t _CreateComponent(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v9[3] = *MEMORY[0x1895F89C0];
  v9[0] = a1;
  uint64_t v6 = *MEMORY[0x189603A28];
  v8[0] = *MEMORY[0x189603A38];
  v8[1] = v6;
  v9[1] = +[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", a4);
  v8[2] = *MEMORY[0x189603A30];
  _OWORD v9[2] = +[NSValue valueWithRange:](&OBJC_CLASS___NSValue, "valueWithRange:", a2, a3);
  return [MEMORY[0x189603F68] dictionaryWithObjects:v9 forKeys:v8 count:3];
}

CFStringRef _NSNewStringFromCString(const char *a1)
{
  size_t v2 = strlen(a1);
  return CFStringCreateWithBytes(0LL, (const UInt8 *)a1, v2, 0x8000100u, 0);
}

uint64_t NSIsFreedObject(uint64_t result)
{
  if (result)
  {
    uint64_t v1 = (void *)result;
    if (!NSIsFreedObject_freedClass) {
      NSIsFreedObject_freedClass Class = _objc_getFreedObjectClass();
    }
    Class Class = object_getClass(v1);
    if (Class == (Class)NSIsFreedObject_freedClass) {
      return 1LL;
    }
    id v3 = Class;
    uint64_t result = (uint64_t)object_getClass(Class);
    if (!result) {
      return result;
    }
    uint64_t Name = class_getName(v3);
    return Name && !strncmp(Name, "_NSZombie_", 0xAuLL);
  }

  return result;
}

uint64_t NSFrameAddress()
{
  return 0LL;
}

uint64_t NSReturnAddress()
{
  return 0LL;
}

uint64_t NSCountFrames()
{
  return 0LL;
}

const char *_NSPrintForDebugger(void *a1)
{
  if (!a1) {
    return "<nil>";
  }
  if ((objc_opt_respondsToSelector() & 1) == 0 && (objc_opt_respondsToSelector() & 1) == 0) {
    return "<not an object or object does not respond to description method>";
  }
  _CFAutoreleasePoolPush();
  if (_NSPrintForDebugger_result)
  {
    free((void *)_NSPrintForDebugger_result);
    _NSPrintForDebugger_uint64_t result = 0LL;
  }

  if ((objc_opt_respondsToSelector() & 1) != 0) {
    size_t v2 = (void *)[a1 debugDescription];
  }
  else {
    size_t v2 = (void *)[a1 description];
  }
  uint64_t v4 = v2;
  if (v2 && ![v2 isEqual:&stru_189CA6A28])
  {
    char v5 = (void *)[v4 dataUsingEncoding:4 allowLossyConversion:1];
    _NSPrintForDebugger_uint64_t result = (uint64_t)malloc([v5 length] + 1);
    memmove((void *)_NSPrintForDebugger_result, (const void *)[v5 bytes], objc_msgSend(v5, "length"));
    uint64_t v6 = _NSPrintForDebugger_result;
    *(_BYTE *)(v6 + [v5 length]) = 0;
    _CFAutoreleasePoolPop();
    return (const char *)_NSPrintForDebugger_result;
  }

  else
  {
    _CFAutoreleasePoolPop();
    return "<object returned empty description>";
  }

uint64_t NSRecordAllocationEvent(uint64_t result)
{
  switch((int)result)
  {
    case 3:
      uint64_t result = 3LL;
      goto LABEL_7;
    case 4:
    case 6:
      uint64_t result = 12LL;
      goto LABEL_7;
    case 5:
    case 7:
      uint64_t result = 13LL;
      goto LABEL_7;
    default:
      if ((_DWORD)result != 22) {
        return result;
      }
LABEL_7:
      if (*MEMORY[0x1896049A0]) {
        return __CFRecordAllocationEvent();
      }
      return result;
  }

void NSDecimalCopy(NSDecimal *destination, const NSDecimal *source)
{
  int v2 = *(_DWORD *)destination;
  *(_DWORD *)destination &= 0x3FFFu;
  int v3 = *(_DWORD *)source & 0x1000 | v2 & 0x2FFF;
  *(_DWORD *)destination = v3;
  unsigned int v4 = v3 & 0xFFFFF0FF;
  unsigned int v5 = *(_DWORD *)source & 0xF00;
  *(_DWORD *)destination = v4 | v5;
  int v6 = (v4 | v5) & 0x3F00 | *(_BYTE *)source;
  *(_DWORD *)destination = v6;
  *(_DWORD *)destination = *(_DWORD *)source & 0x2000 | v6 & 0x1FFF;
  if (v5)
  {
    LODWORD(v7) = v5 >> 8;
    else {
      uint64_t v7 = v7;
    }
    mantissa = destination->_mantissa;
    size_t v9 = source->_mantissa;
    do
    {
      unsigned __int16 v10 = *v9++;
      *mantissa++ = v10;
      --v7;
    }

    while (v7);
  }

void _NSCStringToDecimal(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  v7[1] = *MEMORY[0x1895F89C0];
  int v6 = -[NSString initWithCString:encoding:](objc_alloc(&OBJC_CLASS___NSString), "initWithCString:encoding:", a1, 4LL);
  v7[0] = 0LL;
  *(void *)a3 = 0LL;
  *(void *)(a3 + _Block_object_dispose(va, 8) = 0LL;
  *(_DWORD *)(a3 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = 0;
  _NSStringToDecimal(v6, v7, a3);
  *a2 = a1 + v7[0];
}

void *_checkErrorAndRound( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, NSDecimal *retstr, uint64_t a7, void *a8)
{
  uint64_t v18 = *MEMORY[0x1895F89C0];
  if (a1
    && (uint64_t result = (void *)[a8 exceptionDuringOperation:a2 error:a1 leftOperand:a3 rightOperand:a4]) != 0)
  {
    if (a5 == 0x7FFF) {
      return result;
    }
    [result decimalValue];
    _NSDecimalRound(a7, (int)&v16, a5, retstr);
    unint64_t v12 = (void *)objc_opt_self();
    __int128 v14 = *(_OWORD *)a7;
    LODWORD(v15) = *(_DWORD *)(a7 + 16);
    uint64_t v13 = &v14;
  }

  else
  {
    if (a5 != 0x7FFF) {
      _NSDecimalRound(a7, a7, a5, retstr);
    }
    unint64_t v12 = (void *)objc_opt_self();
    __int128 v16 = *(_OWORD *)a7;
    int v17 = *(_DWORD *)(a7 + 16);
    uint64_t v13 = &v16;
  }

  return (void *)objc_msgSend(v12, "decimalNumberWithDecimal:", v13, v14, v15);
}

uint64_t equalBoundPath(id *a1, id *a2)
{
  if (a1 == a2) {
    return 1LL;
  }
  uint64_t v4 = objc_opt_class();
  if (v4 == objc_opt_class() && (uint64_t v5 = [a1 rootObject], v5 == objc_msgSend(a2, "rootObject"))) {
    return [a1[2] isEqualToString:a2[2]];
  }
  else {
    return 0LL;
  }
}

uint64_t hashBoundPath(uint64_t a1)
{
  return [*(id *)(a1 + 16) hash];
}

void _NSKVO1AdaptorSlowDeliver(uint64_t a1, void *a2, int a3, uint64_t a4, uint64_t a5, void *a6)
{
  uint64_t v12 = [a6 objectForKey:@"new"];
  if (a3)
  {
    uint64_t v13 = [a6 objectForKey:@"old"];
    __int128 v14 = (void *)[a6 objectForKey:@"indexes"];
    uint64_t v15 = objc_msgSend((id)objc_msgSend(a6, "objectForKey:", @"kind"), "unsignedIntegerValue");
  }

  else
  {
    __int128 v14 = 0LL;
    uint64_t v13 = 0LL;
    uint64_t v15 = 1LL;
  }

  if (v12 == *MEMORY[0x189605018]) {
    uint64_t v16 = 0LL;
  }
  else {
    uint64_t v16 = v12;
  }
  if (v13 == *MEMORY[0x189605018]) {
    uint64_t v17 = 0LL;
  }
  else {
    uint64_t v17 = v13;
  }
  _NSKVO1AdaptorDeliver(a1, a2, a3, v16, v17, v14, v15, a4, a5);
}

void _NSKVO1AdaptorDeliver( uint64_t a1, void *a2, int a3, uint64_t a4, uint64_t a5, void *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  v30[1] = *MEMORY[0x1895F89C0];
  if (a3)
  {
    if ((_NSIsNSArray() & 1) != 0
      || (_NSIsNSOrderedSet() & 1) != 0
      || (_NSIsNSArray() & 1) != 0
      || _NSIsNSOrderedSet())
    {
      else {
        uint64_t v16 = -[NSOrderedSetChanges initWithOrderedSet:]( objc_alloc(&OBJC_CLASS___NSOrderedSetChanges),  "initWithOrderedSet:",  a5);
      }
      unint64_t v21 = (NSSetChanges *)v16;
      v29[0] = MEMORY[0x1895F87A8];
      v29[1] = 3221225472LL;
      void v29[2] = ___NSKVO1AdaptorDeliver_block_invoke;
      v29[3] = &unk_189C9A5D0;
      void v29[4] = a9;
      v29[5] = a8;
      _OWORD v29[6] = v16;
      v29[7] = a7;
      [a6 enumerateIndexesUsingBlock:v29];
    }

    else if ((_NSIsNSSet() & 1) != 0 || _NSIsNSSet())
    {
      switch(a7)
      {
        case 1LL:
        case 4LL:
          uint64_t v26 = objc_alloc(&OBJC_CLASS___NSSetChanges);
          if (!a5) {
            a5 = [MEMORY[0x189604010] set];
          }
          unint64_t v21 = -[NSSetChanges initWithSet:](v26, "initWithSet:", a5);
          -[NSSetChanges setSet:](v21, "setSet:", a4);
          break;
        case 2LL:
          NSUInteger v27 = objc_alloc(&OBJC_CLASS___NSSetChanges);
          if (!a5) {
            a5 = [MEMORY[0x189604010] set];
          }
          unint64_t v21 = -[NSSetChanges initWithSet:](v27, "initWithSet:", a5);
          -[NSSetChanges unionSet:](v21, "unionSet:", a4);
          break;
        case 3LL:
          unint64_t v28 = objc_alloc(&OBJC_CLASS___NSSetChanges);
          if (!a4) {
            a4 = [MEMORY[0x189604010] set];
          }
          unint64_t v21 = -[NSSetChanges initWithSet:](v28, "initWithSet:", a4);
          -[NSSetChanges minusSet:](v21, "minusSet:", a5);
          break;
        default:
          goto LABEL_19;
      }
    }

    else
    {
LABEL_19:
      unint64_t v21 = 0LL;
    }

    uint64_t StackObservedValueClassAndBoxSize = getStackObservedValueClassAndBoxSize(v30);
    MEMORY[0x1895F8858](StackObservedValueClassAndBoxSize);
    uint64_t v25 = objc_constructInstance(v24, (char *)v29 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0LL));
    void v25[6] = 1;
    *((void *)v25 + 1) = v21;
    *((void *)v25 + 2) = a1;
    [a2 _receiveBox:v25];
  }

  else
  {
    uint64_t v17 = getStackObservedValueClassAndBoxSize(v30);
    MEMORY[0x1895F8858](v17);
    uint64_t v20 = objc_constructInstance(v19, (char *)v29 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL));
    void v20[6] = 1;
    *((void *)v20 + 1) = a4;
    *((void *)v20 + 2) = a1;
    [a2 _receiveBox:v20];
  }

void *_variantPermutations(void *a1)
{
  uint64_t v1 = a1;
  uint64_t v19 = *MEMORY[0x1895F89C0];
  unint64_t v2 = [a1 count];
  if (v2 >= 2)
  {
    unint64_t v3 = v2;
    if (v2 < 5)
    {
      uint64_t v5 = (void *)[v1 firstObject];
      int v6 = (void *)_variantPermutations(objc_msgSend(v1, "subarrayWithRange:", 1, v3 - 1));
      uint64_t v1 = (void *)objc_msgSend(MEMORY[0x189603FA8], "arrayWithCapacity:", (2 * objc_msgSend(v6, "count")) | 1);
      __int128 v13 = 0u;
      __int128 v14 = 0u;
      __int128 v15 = 0u;
      __int128 v16 = 0u;
      uint64_t v7 = [v6 countByEnumeratingWithState:&v13 objects:v12 count:16];
      if (v7)
      {
        uint64_t v8 = v7;
        uint64_t v9 = *(void *)v14;
        do
        {
          uint64_t v10 = 0LL;
          do
          {
            if (*(void *)v14 != v9) {
              objc_enumerationMutation(v6);
            }
            objc_msgSend( v1,  "addObject:",  objc_msgSend(v5, "stringByAppendingString:", *(void *)(*((void *)&v13 + 1) + 8 * v10++)));
          }

          while (v8 != v10);
          uint64_t v8 = [v6 countByEnumeratingWithState:&v13 objects:v12 count:16];
        }

        while (v8);
      }

      [v1 addObject:v5];
      [v1 addObjectsFromArray:v6];
    }

    else
    {
      uint64_t v4 = (os_log_s *)_NSOSLog();
      if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 138412290;
        uint64_t v18 = v1;
        _os_log_impl( &dword_182EB1000,  v4,  OS_LOG_TYPE_DEFAULT,  "Too many variant permutations to compute: %@",  buf,  0xCu);
      }

      return (void *)MEMORY[0x189604A58];
    }
  }

  return v1;
}

CFStringRef _validateKnownUserInfoKeyTypes(void *a1)
{
  uint64_t v59 = *MEMORY[0x1895F89C0];
  if ([a1 objectForKey:@"NSUnderlyingError"])
  {
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) == 0) {
      return @"NSUnderlyingError";
    }
  }

  uint64_t v2 = [a1 objectForKey:@"NSLocalizedRecoveryOptions"];
  if (!v2) {
    goto LABEL_19;
  }
  unint64_t v3 = (void *)v2;
  __int128 v57 = 0u;
  __int128 v58 = 0u;
  __int128 v55 = 0u;
  __int128 v56 = 0u;
  uint64_t v4 = [v3 countByEnumeratingWithState:&v55 objects:v54 count:16];
  if (v4)
  {
    uint64_t v5 = v4;
    uint64_t v6 = *(void *)v56;
    uint64_t v7 = @"NSLocalizedRecoveryOptions";
LABEL_13:
    uint64_t v8 = 0LL;
    while (1)
    {
      if (*(void *)v56 != v6) {
        objc_enumerationMutation(v3);
      }
      if (v5 == ++v8)
      {
        uint64_t v5 = [v3 countByEnumeratingWithState:&v55 objects:v54 count:16];
        if (v5) {
          goto LABEL_13;
        }
        goto LABEL_19;
      }
    }
  }

  else
  {
LABEL_19:
    if ([a1 objectForKey:@"NSURL"])
    {
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) == 0) {
        return @"NSURL";
      }
    }

    uint64_t v9 = [a1 objectForKey:@"NSMultipleUnderlyingErrorsKey"];
    if (!v9) {
      goto LABEL_43;
    }
    uint64_t v10 = (void *)v9;
    __int128 v52 = 0u;
    __int128 v53 = 0u;
    __int128 v50 = 0u;
    __int128 v51 = 0u;
    uint64_t v11 = [v10 countByEnumeratingWithState:&v50 objects:v49 count:16];
    if (v11)
    {
      uint64_t v12 = v11;
      uint64_t v13 = *(void *)v51;
      uint64_t v7 = @"NSMultipleUnderlyingErrorsKey";
LABEL_37:
      uint64_t v14 = 0LL;
      while (1)
      {
        if (*(void *)v51 != v13) {
          objc_enumerationMutation(v10);
        }
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) == 0) {
          break;
        }
        if (v12 == ++v14)
        {
          uint64_t v12 = [v10 countByEnumeratingWithState:&v50 objects:v49 count:16];
          if (v12) {
            goto LABEL_37;
          }
          goto LABEL_43;
        }
      }
    }

    else
    {
LABEL_43:
      uint64_t v15 = [a1 objectForKey:@"NSDetailedErrors"];
      if (!v15) {
        goto LABEL_53;
      }
      __int128 v16 = (void *)v15;
      __int128 v47 = 0u;
      __int128 v48 = 0u;
      __int128 v45 = 0u;
      __int128 v46 = 0u;
      uint64_t v17 = [v16 countByEnumeratingWithState:&v45 objects:v44 count:16];
      if (v17)
      {
        uint64_t v18 = v17;
        uint64_t v19 = *(void *)v46;
        uint64_t v7 = @"NSDetailedErrors";
LABEL_47:
        uint64_t v20 = 0LL;
        while (1)
        {
          if (*(void *)v46 != v19) {
            objc_enumerationMutation(v16);
          }
          objc_opt_class();
          if ((objc_opt_isKindOfClass() & 1) == 0) {
            break;
          }
          if (v18 == ++v20)
          {
            uint64_t v18 = [v16 countByEnumeratingWithState:&v45 objects:v44 count:16];
            if (v18) {
              goto LABEL_47;
            }
            goto LABEL_53;
          }
        }
      }

      else
      {
LABEL_53:
        uint64_t v21 = [a1 objectForKey:@"NSCallStackReturnAddresses"];
        if (!v21) {
          goto LABEL_63;
        }
        uint64_t v22 = (void *)v21;
        __int128 v42 = 0u;
        __int128 v43 = 0u;
        __int128 v40 = 0u;
        __int128 v41 = 0u;
        uint64_t v23 = [v22 countByEnumeratingWithState:&v40 objects:v39 count:16];
        if (!v23)
        {
LABEL_63:
          uint64_t v27 = [a1 objectForKey:@"NSUserStringVariant"];
          if (v27)
          {
            unint64_t v28 = (void *)v27;
            if (_NSIsNSArray())
            {
              __int128 v37 = 0u;
              __int128 v38 = 0u;
              __int128 v35 = 0u;
              __int128 v36 = 0u;
              uint64_t v29 = [v28 countByEnumeratingWithState:&v35 objects:v34 count:16];
              if (v29)
              {
                uint64_t v30 = v29;
                uint64_t v31 = *(void *)v36;
                uint64_t v7 = @"NSUserStringVariant";
LABEL_67:
                uint64_t v32 = 0LL;
                while (1)
                {
                  if (*(void *)v36 != v31) {
                    objc_enumerationMutation(v28);
                  }
                  if (v30 == ++v32)
                  {
                    uint64_t v30 = [v28 countByEnumeratingWithState:&v35 objects:v34 count:16];
                    if (v30) {
                      goto LABEL_67;
                    }
                    return 0LL;
                  }
                }
              }
            }

            else if (!_NSIsNSString())
            {
              return @"NSUserStringVariant";
            }
          }

          return 0LL;
        }

        uint64_t v24 = v23;
        uint64_t v25 = *(void *)v41;
        uint64_t v7 = @"NSCallStackReturnAddresses";
LABEL_57:
        uint64_t v26 = 0LL;
        while (1)
        {
          if (*(void *)v41 != v25) {
            objc_enumerationMutation(v22);
          }
          if (v24 == ++v26)
          {
            uint64_t v24 = [v22 countByEnumeratingWithState:&v40 objects:v39 count:16];
            if (v24) {
              goto LABEL_57;
            }
            goto LABEL_63;
          }
        }
      }
    }
  }

  return v7;
}

void WebNSErrorExtrasInit()
{
  if (!descriptions)
  {
    _CFAutoreleasePoolPush();
    descriptions = (uint64_t)objc_alloc_init(MEMORY[0x189603FC8]);
    _CFAutoreleasePoolPop();
  }

id localizedDescriptionForError(void *a1, uint64_t a2)
{
  id result = (id)[(id)descriptions objectForKey:a1];
  if (result) {
    return (id)objc_msgSend( result,  "objectForKey:",  +[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", a2));
  }
  return result;
}

uint64_t __dictionaryThatCanCode_block_invoke(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t result = [a3 conformsToProtocol:&unk_18C650CC8];
  if ((result & 1) == 0) {
    return [*(id *)(a1 + 32) removeObjectForKey:a2];
  }
  return result;
}

NSError *_NSErrorWithFilePath(uint64_t a1, uint64_t a2)
{
  isKindOfClass Class = objc_opt_isKindOfClass();
  uint64_t v5 = &NSURLErrorKey;
  if ((isKindOfClass & 1) == 0) {
    uint64_t v5 = &NSFilePathErrorKey;
  }
  return +[NSError errorWithDomain:code:userInfo:]( NSError,  "errorWithDomain:code:userInfo:",  @"NSCocoaErrorDomain",  a1,  objc_msgSend(MEMORY[0x189603F68], "dictionaryWithObjectsAndKeys:", a2, *v5, 0));
}

NSError *_NSErrorWithFilePathAndEncoding(uint64_t a1, uint64_t a2, uint64_t a3)
{
  isKindOfClass Class = objc_opt_isKindOfClass();
  uint64_t v7 = &NSURLErrorKey;
  if ((isKindOfClass & 1) == 0) {
    uint64_t v7 = &NSFilePathErrorKey;
  }
  return +[NSError errorWithDomain:code:userInfo:]( NSError,  "errorWithDomain:code:userInfo:",  @"NSCocoaErrorDomain",  a1,  objc_msgSend( MEMORY[0x189603F68],  "dictionaryWithObjectsAndKeys:",  a2,  *v7,  +[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", a3),  @"NSStringEncoding",  0));
}

NSError *_NSErrorWithFilePathErrnoVariantAndExtraUserInfo( uint64_t a1, uint64_t a2, int a3, uint64_t a4, void *a5)
{
  uint64_t v29 = *MEMORY[0x1895F89C0];
  if (a3)
  {
    if (a1 <= 12)
    {
      if (a1 != 1)
      {
        if (a1 == 2)
        {
          uint64_t v9 = 260LL;
          goto LABEL_31;
        }

NSError *_NSErrorWithFilePathErrnoAndVariant(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  return _NSErrorWithFilePathErrnoVariantAndExtraUserInfo(a1, a2, a3, a4, 0LL);
}

NSError *_NSErrorWithFilePathAndErrno(uint64_t a1, uint64_t a2, int a3)
{
  return _NSErrorWithFilePathErrnoVariantAndExtraUserInfo(a1, a2, a3, 0LL, 0LL);
}

NSString *pathComponentFromPath(NSString *a1, uint64_t a2, int a3)
{
  uint64_t result = 0LL;
  v11[1] = *MEMORY[0x1895F89C0];
  HIDWORD(v5) = a3;
  LODWORD(v5) = a3 - 100;
  switch((v5 >> 1))
  {
    case 0u:
    case 6u:
      uint64_t result = -[NSString stringByDeletingLastPathComponent](a1, "stringByDeletingLastPathComponent");
      if (result)
      {
        a1 = result;
        uint64_t result = -[NSString length](result, "length");
        if (result) {
          goto LABEL_4;
        }
      }

      break;
    case 1u:
LABEL_4:
      if (fileNameLocalizationDisabled) {
        uint64_t result = -[NSString lastPathComponent](a1, "lastPathComponent");
      }
      else {
        uint64_t result = -[NSFileManager displayNameAtPath:]( +[NSFileManager defaultManager](&OBJC_CLASS___NSFileManager, "defaultManager"),  "displayNameAtPath:",  a1);
      }
      break;
    case 9u:
      if (fileNameLocalizationDisabled)
      {
        uint64_t v6 = (void *)[MEMORY[0x189604030] fileURLWithPath:a1];
        if (!v6
          || ((int v7 = [v6 getResourceValue:v11 forKey:*MEMORY[0x189603E38] error:0],
               uint64_t result = (NSString *)v11[0],
               v7)
            ? (BOOL v8 = v11[0] == 0LL)
            : (BOOL v8 = 1),
              v8))
        {
          uint64_t result = 0LL;
        }
      }

      else
      {
        uint64_t v9 = -[NSFileManager componentsToDisplayForPath:]( +[NSFileManager defaultManager](&OBJC_CLASS___NSFileManager, "defaultManager"),  "componentsToDisplayForPath:",  a1);
        if (v9
          || (uint64_t result = -[NSString stringByDeletingLastPathComponent](a1, "stringByDeletingLastPathComponent")) != 0LL
          && (id v10 = result, (result = -[NSString length](result, "length")) != 0)
          && (uint64_t result = -[NSFileManager componentsToDisplayForPath:]( +[NSFileManager defaultManager](&OBJC_CLASS___NSFileManager, "defaultManager"),  "componentsToDisplayForPath:",  v10),  (v9 = (NSArray *)result) != 0LL))
        {
          uint64_t result = -[NSArray count](v9, "count");
          if (result) {
            uint64_t result = -[NSArray objectAtIndex:](v9, "objectAtIndex:", 0LL);
          }
        }
      }

      break;
    default:
      return result;
  }

  return result;
}

NSString *pathComponentFromURL(void *a1, uint64_t a2, int a3)
{
  int v3 = a3;
  uint64_t result = 0LL;
  v14[1] = *(id *)MEMORY[0x1895F89C0];
  if (a3 > 116)
  {
    if (a3 != 118)
    {
      if (a3 == 117)
      {
        uint64_t result = (NSString *)[a1 scheme];
        if (result)
        {
          uint64_t v6 = result;
          if (-[NSString length](result, "length")) {
            return v6;
          }
          else {
            return 0LL;
          }
        }
      }

      return result;
    }

    if (fileNameLocalizationDisabled) {
      uint64_t v11 = (void *)MEMORY[0x189603E38];
    }
    else {
      uint64_t v11 = (void *)MEMORY[0x189603E20];
    }
    int v12 = [a1 getResourceValue:v14 forKey:*v11 error:0];
    uint64_t result = (NSString *)v14[0];
    if (v12) {
      BOOL v13 = v14[0] == 0LL;
    }
    else {
      BOOL v13 = 1;
    }
    if (!v13) {
      return result;
    }
    uint64_t result = (NSString *)[a1 path];
    if (!result) {
      return result;
    }
    return pathComponentFromPath(result, v10, v3);
  }

  if (a3 == 100)
  {
    a1 = (void *)[a1 URLByDeletingLastPathComponent];
    int v3 = 102;
  }

  else if (a3 != 102)
  {
    return result;
  }

  if (fileNameLocalizationDisabled) {
    int v7 = (void *)MEMORY[0x189603D00];
  }
  else {
    int v7 = (void *)MEMORY[0x189603CE0];
  }
  int v8 = [a1 getResourceValue:v14 forKey:*v7 error:0];
  uint64_t result = (NSString *)v14[0];
  if (v8) {
    BOOL v9 = v14[0] == 0LL;
  }
  else {
    BOOL v9 = 1;
  }
  if (v9)
  {
    if (![a1 isFileURL] || (uint64_t result = (NSString *)objc_msgSend(a1, "path")) == 0)
    {
      uint64_t result = (NSString *)objc_msgSend((id)objc_msgSend(a1, "path"), "lastPathComponent");
      v14[0] = result;
      if (result)
      {
        uint64_t result = -[NSString length](result, "length");
        if (result)
        {
          else {
            return (NSString *)v14[0];
          }
        }
      }

      return result;
    }

    return pathComponentFromPath(result, v10, v3);
  }

  return result;
}

NSString *encodingName(void *a1)
{
  uint64_t result = +[NSString localizedNameOfStringEncoding:]( NSString,  "localizedNameOfStringEncoding:",  [a1 unsignedIntegerValue]);
  if (result)
  {
    uint64_t v2 = result;
    if (-[NSString length](result, "length")) {
      return v2;
    }
    else {
      return 0LL;
    }
  }

  return result;
}

NSString *validationValue(uint64_t a1)
{
  else {
    return +[NSString stringWithFormat:]( NSString,  "stringWithFormat:",  [(id)_NSFoundationBundle() localizedStringForKey:@"\\U201c%@\\U201d" value:&stru_189CA6A28 table:@"FoundationErrors"],  a1);
  }
}

uint64_t initUTTypeConformsTo(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (void *)MobileCoreServicesLibrary_frameworkLibrary_0;
  if (!MobileCoreServicesLibrary_frameworkLibrary_0)
  {
    uint64_t v4 = dlopen("/System/Library/Frameworks/MobileCoreServices.framework/MobileCoreServices", 2);
    MobileCoreServicesLibrary_frameworkLibrary_0 = (uint64_t)v4;
    if (!v4) {
      __assert_rtn("MobileCoreServicesLibrary", "NSError_Private.m", 32, "frameworkLibrary");
    }
  }

  unint64_t v5 = (uint64_t (*)())dlsym(v4, "UTTypeConformsTo");
  softLinkUTTypeConformsTo = v5;
  if (!v5) {
    __assert_rtn("initUTTypeConformsTo", "NSError_Private.m", 33, "softLinkUTTypeConformsTo");
  }
  return ((uint64_t (*)(uint64_t, uint64_t))v5)(a1, a2);
}

NSUncaughtExceptionHandler *NSGetUncaughtExceptionHandler(void)
{
  return (NSUncaughtExceptionHandler *)_CFDoExceptionOperation();
}

void NSSetUncaughtExceptionHandler(NSUncaughtExceptionHandler *a1)
{
}

uint64_t _NSRaiseError()
{
  return _CFDoExceptionOperation();
}

uint64_t _NSExceptionRaiser()
{
  return _CFDoExceptionOperation();
}

uint64_t _NSSetExceptionRaiser()
{
  return _CFDoExceptionOperation();
}

void *_userInfoForFileAndLine(uint64_t a1, uint64_t a2)
{
  if (!a1 && !a2) {
    return 0LL;
  }
  unint64_t v5 = (void *)[MEMORY[0x189603FC8] dictionary];
  uint64_t v4 = v5;
  if (a1) {
    [v5 setObject:a1 forKey:@"NSAssertFile"];
  }
  if (a2) {
    objc_msgSend( v4,  "setObject:forKey:",  +[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", a2),  @"NSAssertLine");
  }
  return v4;
}

uint64_t sub_18356BE68()
{
  return 0LL;
}

uint64_t sub_18356BEA8()
{
  return 0LL;
}

uint64_t sub_18356BEEC()
{
  return 0LL;
}

uint64_t sub_18356BF34()
{
  return 0LL;
}

uint64_t sub_18356BF74()
{
  return 0LL;
}

uint64_t sub_18356BFB4()
{
  return 0LL;
}

uint64_t sub_18356BFF4()
{
  return 0LL;
}

uint64_t sub_18356C034()
{
  return 0LL;
}

uint64_t sub_18356C074()
{
  return v0;
}

uint64_t sub_18356C0B4()
{
  return 0LL;
}

uint64_t sub_18356C0F4()
{
  return 0LL;
}

uint64_t sub_18356C134()
{
  return 0LL;
}

uint64_t sub_18356C174()
{
  return 0LL;
}

uint64_t sub_18356C1B4()
{
  return 0LL;
}

uint64_t sub_18356C1F4()
{
  return 0LL;
}

uint64_t sub_18356C234()
{
  return 0LL;
}

uint64_t sub_18356C274()
{
  return 0LL;
}

uint64_t sub_18356C2B4()
{
  return 0LL;
}

BOOL _NSFileHandleCanPerformWritingInSwiftOverlay(void *a1)
{
  uint64_t v2 = [a1 methodForSelector:sel_writeData_error_];
  if (v2 == +[NSConcreteFileHandle instanceMethodForSelector:]( &OBJC_CLASS___NSConcreteFileHandle,  "instanceMethodForSelector:",  sel_writeData_error_)) {
    return 1LL;
  }
  uint64_t v3 = [a1 methodForSelector:sel_writeData_];
  return v3 == +[NSConcreteFileHandle instanceMethodForSelector:]( &OBJC_CLASS___NSConcreteFileHandle,  "instanceMethodForSelector:",  sel_writeData_);
}

uint64_t _NSFileHandleIsClosed(uint64_t a1)
{
  unsigned int v1 = atomic_load((unsigned __int16 *)(a1 + 100));
  return (v1 >> 2) & 1;
}

uint64_t sub_18356CB74()
{
  return 0LL;
}

uint64_t sub_18356CBB4()
{
  return 0LL;
}

uint64_t sub_18356CBF4()
{
  return 0LL;
}

uint64_t sub_18356CCA4()
{
  return 0LL;
}

uint64_t sub_18356CEE8()
{
  return 0LL;
}

uint64_t sub_18356CF28()
{
  return 0LL;
}

void sub_18356CFC4()
{
  if (v0) {
    *uint64_t v0 = +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  @"NSCocoaErrorDomain",  3072LL,  0LL);
  }
  JUMPOUT(0x18356CF94LL);
}

void sub_18356D0AC()
{
}

uint64_t sub_18356D0F0()
{
  return 0LL;
}

void sub_18356D194()
{
  if (v0) {
    *uint64_t v0 = +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  @"NSCocoaErrorDomain",  3072LL,  0LL);
  }
  JUMPOUT(0x18356D164LL);
}

void sub_18356D27C()
{
}

void sub_18356D360()
{
  if (v0) {
    *uint64_t v0 = +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  @"NSCocoaErrorDomain",  3072LL,  0LL);
  }
  JUMPOUT(0x18356D330LL);
}

void sub_18356D448()
{
}

uint64_t sub_18356D48C()
{
  return 0LL;
}

void sub_18356D538()
{
  if (v0) {
    *uint64_t v0 = +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  @"NSCocoaErrorDomain",  3072LL,  0LL);
  }
  JUMPOUT(0x18356D508LL);
}

void sub_18356D620()
{
}

uint64_t sub_18356D664()
{
  return 0LL;
}

void sub_18356D710()
{
  if (v0) {
    *uint64_t v0 = +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  @"NSCocoaErrorDomain",  3072LL,  0LL);
  }
  JUMPOUT(0x18356D6E0LL);
}

void sub_18356D7F8()
{
}

void sub_18356D8DC()
{
  if (v0) {
    *uint64_t v0 = +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  @"NSCocoaErrorDomain",  3072LL,  0LL);
  }
  JUMPOUT(0x18356D8ACLL);
}

void sub_18356D9C4()
{
}

void sub_18356DAA8()
{
  if (v0) {
    *uint64_t v0 = +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  @"NSCocoaErrorDomain",  3072LL,  0LL);
  }
  JUMPOUT(0x18356DA78LL);
}

void sub_18356DB90()
{
}

void sub_18356DC6C()
{
  if (v0) {
    *uint64_t v0 = +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  @"NSCocoaErrorDomain",  3072LL,  0LL);
  }
  JUMPOUT(0x18356DC3CLL);
}

void sub_18356DD54()
{
}

void sub_18356DE30()
{
  if (v0) {
    *uint64_t v0 = +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  @"NSCocoaErrorDomain",  3072LL,  0LL);
  }
  JUMPOUT(0x18356DE00LL);
}

void sub_18356DF18()
{
}

uint64_t sub_18356DF5C()
{
  return 0xFFFFFFFFLL;
}

uint64_t sub_18356DF9C()
{
  return 0LL;
}

uint64_t sub_18356E014()
{
  return 0LL;
}

uint64_t unsetFlag(uint64_t result, __int16 a2)
{
  uint64_t v2 = (unsigned __int16 *)(result + 100);
  do
    unsigned __int16 v3 = __ldaxr(v2);
  while (__stlxr(v3 & ~a2, v2));
  return result;
}

id _NSFileHandleRaiseOperationExceptionWhileReading(objc_class *a1, const char *a2, int a3)
{
  v16[1] = *MEMORY[0x1895F89C0];
  if (*__error() < 1 || *__error() >= *MEMORY[0x1895FD290]) {
    uint64_t v6 = "unknown error";
  }
  else {
    uint64_t v6 = *(const char **)(MEMORY[0x1895FD288] + 8LL * *__error());
  }
  int v7 = __error();
  int v8 = _NSErrorWithFilePathAndErrno(*v7, 0LL, a3);
  uint64_t v15 = @"NSFileHandleOperationExceptionUnderlyingError";
  v16[0] = v8;
  BOOL v9 = (void *)[MEMORY[0x189603F70] exceptionWithName:@"NSFileHandleOperationException", +[NSString stringWithFormat:]( NSString, "stringWithFormat:", @"%@: %s", _NSMethodExceptionProem(a1, a2), v6), objc_msgSend(MEMORY[0x189603F68], "dictionaryWithObjects:forKeys:count:", v16, &v15, 1) reason userInfo];
  objc_exception_throw(v9);
  return -[NSConcreteFileHandle readDataUpToLength:error:](v10, v11, v12, v13);
}

void sub_18356EE74( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
}

void sub_18356FEBC(_Unwind_Exception *a1)
{
}

unsigned int *_NSFileHandlePerformSourceContextRetain(unsigned int *result)
{
  do
    unsigned int v1 = __ldaxr(result);
  while (__stlxr(v1 + 1, result));
  return result;
}

void _NSFileHandlePerformSourceContextRelease(void *a1)
{
  do
  {
    unsigned int v1 = __ldaxr((unsigned int *)a1);
    unsigned int v2 = v1 - 1;
  }

  while (__stlxr(v2, (unsigned int *)a1));
  if (!v2) {
    free(a1);
  }
}

void _performFileHandleSource(uint64_t a1)
{
  uint64_t v25 = *MEMORY[0x1895F89C0];
  uint64_t v1 = *(void *)(a1 + 8);
  int v2 = *(unsigned __int16 *)(a1 + 16);
  unsigned __int16 v3 = *(__CFRunLoopSource **)(a1 + 24);
  _CFAutoreleasePoolPush();
  uint64_t v4 = 0LL;
  char v5 = 1;
  int v6 = v2 - 12;
  int v7 = 0LL;
  switch(v6)
  {
    case 0:
      uint64_t v8 = atomic_load((unsigned int *)(v1 + 16));
      if ((_DWORD)v8 == -1)
      {
        signed int v16 = atomic_load((unsigned int *)(v1 + 12));
        uint64_t v23 = +[NSNumber numberWithInteger:](&OBJC_CLASS___NSNumber, "numberWithInteger:", v16);
        *(void *)&__int128 v22 = @"NSFileHandleError";
        int v7 = (void *)[MEMORY[0x189603F68] dictionaryWithObjects:&v23 forKeys:&v22 count:1];
      }

      else
      {
        uint64_t v23 = (NSNumber *)[objc_allocWithZone((Class)NSFileHandle) initWithFileDescriptor:v8 closeOnDealloc:1];
        *(void *)&__int128 v22 = @"NSFileHandleNotificationFileHandleItem";
        int v7 = (void *)[MEMORY[0x189603F68] dictionaryWithObjects:&v23 forKeys:&v22 count:1];
      }

      char v5 = 0;
      uint64_t v4 = @"NSFileHandleConnectionAcceptedNotification";
      break;
    case 1:
    case 3:
    case 5:
    case 6:
    case 7:
      break;
    case 2:
      if (atomic_load((unsigned int *)(v1 + 12)))
      {
        signed int v10 = atomic_load((unsigned int *)(v1 + 12));
        uint64_t v23 = +[NSNumber numberWithInteger:](&OBJC_CLASS___NSNumber, "numberWithInteger:", v10);
        uint64_t v24 = [MEMORY[0x189603F48] data];
        __int128 v22 = xmmword_189C9AA78;
        int v7 = (void *)[MEMORY[0x189603F68] dictionaryWithObjects:&v23 forKeys:&v22 count:2];
        char v5 = 0;
      }

      else
      {
        uint64_t v17 = *(NSNumber **)(v1 + 32);
        if (!v17) {
          uint64_t v17 = (NSNumber *)[MEMORY[0x189603F48] data];
        }
        uint64_t v23 = v17;
        *(void *)&__int128 v22 = @"NSFileHandleNotificationDataItem";
        int v7 = (void *)[MEMORY[0x189603F68] dictionaryWithObjects:&v23 forKeys:&v22 count:1];
        uint64_t v18 = *(dispatch_object_s **)(v1 + 32);
        if (v18) {
          dispatch_release(v18);
        }
        char v5 = 0;
        *(void *)(v1 + 32) = 0LL;
      }

      uint64_t v4 = @"NSFileHandleReadCompletionNotification";
      break;
    case 4:
      if (atomic_load((unsigned int *)(v1 + 12)))
      {
        signed int v12 = atomic_load((unsigned int *)(v1 + 12));
        uint64_t v23 = +[NSNumber numberWithInteger:](&OBJC_CLASS___NSNumber, "numberWithInteger:", v12);
        uint64_t v24 = [MEMORY[0x189603F48] data];
        __int128 v22 = xmmword_189C9AA78;
        int v7 = (void *)[MEMORY[0x189603F68] dictionaryWithObjects:&v23 forKeys:&v22 count:2];
        char v5 = 0;
      }

      else
      {
        os_unfair_lock_lock((os_unfair_lock_t)(v1 + 8));
        uint64_t v19 = *(NSNumber **)(v1 + 32);
        if (!v19) {
          uint64_t v19 = (NSNumber *)[MEMORY[0x189603F48] data];
        }
        uint64_t v23 = v19;
        *(void *)&__int128 v22 = @"NSFileHandleNotificationDataItem";
        int v7 = (void *)[MEMORY[0x189603F68] dictionaryWithObjects:&v23 forKeys:&v22 count:1];
        os_unfair_lock_unlock((os_unfair_lock_t)(v1 + 8));
        uint64_t v20 = *(dispatch_object_s **)(v1 + 32);
        if (v20) {
          dispatch_release(v20);
        }
        char v5 = 0;
        *(void *)(v1 + 32) = 0LL;
      }

      uint64_t v4 = @"NSFileHandleReadToEndOfFileCompletionNotification";
      break;
    case 8:
      if (atomic_load((unsigned int *)(v1 + 12)))
      {
        signed int v14 = atomic_load((unsigned int *)(v1 + 12));
        uint64_t v23 = +[NSNumber numberWithInteger:](&OBJC_CLASS___NSNumber, "numberWithInteger:", v14);
        *(void *)&__int128 v22 = @"NSFileHandleError";
        uint64_t v15 = [MEMORY[0x189603F68] dictionaryWithObjects:&v23 forKeys:&v22 count:1];
      }

      else
      {
        uint64_t v15 = [MEMORY[0x189603F68] dictionary];
      }

      int v7 = (void *)v15;
      char v5 = 0;
      uint64_t v4 = @"NSFileHandleDataAvailableNotification";
      break;
    default:
      int v7 = 0LL;
      break;
  }

  CFRunLoopSourceInvalidate(v3);
  CFRelease(v3);
  id v21 = v7;
  _CFAutoreleasePoolPop();
  if ((v5 & 1) == 0) {
    -[NSNotificationCenter postNotificationName:object:userInfo:]( +[NSNotificationCenter defaultCenter](&OBJC_CLASS___NSNotificationCenter, "defaultCenter"),  "postNotificationName:object:userInfo:",  v4,  v1,  v7);
  }

  CFRelease((CFTypeRef)v1);
}

void __Block_byref_object_copy__2(uint64_t a1, uint64_t a2)
{
}

void __Block_byref_object_dispose__2(uint64_t a1)
{
}

uint64_t sub_183570BB4()
{
  return 0LL;
}

uint64_t sub_183570BF4()
{
  return 0LL;
}

uint64_t _NSDefaultFileSystemEncoding()
{
  return 4LL;
}

uint64_t __NSFileManagerEnumeratorAtURL(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _OWORD v6[5] = *MEMORY[0x1895F89C0];
  v6[0] = MEMORY[0x1895F87A8];
  v6[1] = 3221225472LL;
  v6[2] = ____NSFileManagerEnumeratorAtURL_block_invoke;
  void v6[3] = &unk_189C9ABD0;
  v6[4] = a5;
  return [a1 enumeratorAtURL:a2 includingPropertiesForKeys:a3 options:a4 errorHandler:v6];
}

uint64_t _NSFileProtectionValueForPath(const char *a1)
{
  v4[3] = *MEMORY[0x1895F89C0];
  v4[1] = 0LL;
  _OWORD v4[2] = 0LL;
  v4[0] = 0x4000000000000005LL;
  if (getattrlist(a1, v4, v2, 8uLL, 1u)) {
    return 0xFFFFFFFFLL;
  }
  else {
    return v3;
  }
}

void *_attributesAtPath(const char *a1, char a2, NSError **a3)
{
  ssize_t v6 = listxattr(a1, 0LL, 0LL, 1);
  if (v6 < 1)
  {
    uint64_t v8 = 0LL;
LABEL_21:
    SEL v11 = 0LL;
    goto LABEL_22;
  }

  size_t v7 = v6;
  uint64_t v8 = (char *)malloc(v6);
  if (!v8) {
    goto LABEL_21;
  }
  ssize_t v9 = listxattr(a1, v8, v7, 1);
  if (v9 < 1) {
    goto LABEL_21;
  }
  ssize_t v10 = v9;
  uint64_t v32 = a3;
  SEL v11 = (void *)[MEMORY[0x189603FC8] dictionaryWithCapacity:3];
  signed int v12 = (void *)[objc_alloc(MEMORY[0x189603FA8]) initWithCapacity:4];
  if (v10 << 32 >= 1)
  {
    BOOL v13 = v8;
    do
    {
      if (!strcmp(v13, "com.apple.ResourceFork") && (a2 & 1) != 0
        || !strcmp(v13, "com.apple.FinderInfo")
        || !strcmp(v13, "system.Security"))
      {
        signed int v16 = v13 - 1;
      }

      else
      {
        signed int v14 = -[NSString initWithUTF8String:](objc_alloc(&OBJC_CLASS___NSString), "initWithUTF8String:", v13);
        if (v14)
        {
          uint64_t v15 = v14;
          [v12 addObject:v14];
        }

        signed int v16 = v13 - 1;
      }

      BOOL v13 = v16 + 1;
    }

    while (v16 + 1 < &v8[(int)v10]);
  }

  if ([v12 count])
  {
    id v19 = v12;
  }

  else
  {

    signed int v12 = 0LL;
  }

  int v21 = [v12 count];
  if (v21 >= 1)
  {
    uint64_t v22 = 0LL;
    uint64_t v23 = v21;
    do
    {
      uint64_t v24 = (void *)[v12 objectAtIndex:v22];
      uint64_t v25 = (const char *)[v24 UTF8String];
      ssize_t v26 = getxattr(a1, v25, 0LL, 0LL, 0, 1);
      if (v26 >= 1)
      {
        size_t v27 = v26;
        __int128 v28 = malloc(v26);
        ssize_t v29 = getxattr(a1, v25, v28, v27, 0, 1);
        if (v29 == -1)
        {
          if (v32)
          {
            uint64_t v31 = *__error();
            *uint64_t v32 = _NSErrorWithFilePathErrnoVariantAndExtraUserInfo( v31,  (uint64_t)+[NSString stringWithUTF8String:](&OBJC_CLASS___NSString, "stringWithUTF8String:", a1),  1,  0LL,  0LL);
          }

          free(v28);
        }

        else
        {
          uint64_t v30 = [MEMORY[0x189603F48] dataWithBytesNoCopy:v28 length:v29 freeWhenDone:1];
          if (v30) {
            [v11 setObject:v30 forKey:v24];
          }
        }
      }

      ++v22;
    }

    while (v23 != v22);
  }

CFMutableDictionaryRef _fillDictionary(int *a1, unsigned __int8 *a2, uint64_t a3, int a4)
{
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(0LL, 0LL, MEMORY[0x189605240], MEMORY[0x189605250]);
  ssize_t v9 = +[NSNumber numberWithUnsignedLongLong:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedLongLong:",  *((void *)a1 + 12));
  if (v9) {
    -[__CFDictionary setObject:forKey:](Mutable, "setObject:forKey:", v9, @"NSFileSize");
  }
  uint64_t v10 = [MEMORY[0x189603F50] dateWithTimeIntervalSinceReferenceDate:(double)*((uint64_t *)a1 + 6) - *MEMORY[0x189604DA8] + (double)*((uint64_t *)a1 + 7) * 0.000000001];
  if (v10) {
    -[__CFDictionary setObject:forKey:](Mutable, "setObject:forKey:", v10, @"NSFileModificationDate");
  }
  SEL v11 = +[NSNumber numberWithUnsignedLong:](&OBJC_CLASS___NSNumber, "numberWithUnsignedLong:", a1[1] & 0xFFF);
  if (v11) {
    -[__CFDictionary setObject:forKey:](Mutable, "setObject:forKey:", v11, @"NSFilePosixPermissions");
  }
  signed int v12 = +[NSNumber numberWithUnsignedLong:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedLong:",  *((unsigned __int16 *)a1 + 3));
  if (v12) {
    -[__CFDictionary setObject:forKey:](Mutable, "setObject:forKey:", v12, @"NSFileReferenceCount");
  }
  BOOL v13 = +[NSNumber numberWithUnsignedLong:](&OBJC_CLASS___NSNumber, "numberWithUnsignedLong:", *a1);
  if (v13) {
    -[__CFDictionary setObject:forKey:](Mutable, "setObject:forKey:", v13, @"NSFileSystemNumber");
  }
  signed int v14 = +[NSNumber numberWithUnsignedLong:](&OBJC_CLASS___NSNumber, "numberWithUnsignedLong:", *((void *)a1 + 1));
  if (v14) {
    -[__CFDictionary setObject:forKey:](Mutable, "setObject:forKey:", v14, @"NSFileSystemFileNumber");
  }
  uint64_t v15 = __NSUserAccountNumberToName(a1[4]);
  if (v15) {
    -[__CFDictionary setObject:forKey:](Mutable, "setObject:forKey:", v15, @"NSFileOwnerAccountName");
  }
  signed int v16 = __NSGroupAccountNumberToName(a1[5]);
  if (v16) {
    -[__CFDictionary setObject:forKey:](Mutable, "setObject:forKey:", v16, @"NSFileGroupOwnerAccountName");
  }
  unsigned int v17 = *((unsigned __int16 *)a1 + 2);
  else {
    id v19 = off_189C9AD30[v18];
  }
  -[__CFDictionary setObject:forKey:](Mutable, "setObject:forKey:", v19, @"NSFileType");
  if ((a1[1] & 0xB000 | 0x4000) == 0x6000) {
    -[__CFDictionary setObject:forKey:]( Mutable,  "setObject:forKey:",  +[NSNumber numberWithUnsignedLong:](&OBJC_CLASS___NSNumber, "numberWithUnsignedLong:", a1[6]),  @"NSFileDeviceIdentifier");
  }
  if ((a2[16] & 1) != 0)
  {
    uint64_t v20 = +[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", *a2);
    if (v20) {
      -[__CFDictionary setObject:forKey:](Mutable, "setObject:forKey:", v20, @"NSFileExtensionHidden");
    }
  }

  if ((a2[16] & 2) != 0)
  {
    uint64_t v21 = *((void *)a2 + 1);
    if (v21) {
      -[__CFDictionary setObject:forKey:](Mutable, "setObject:forKey:", v21, @"NSFileCreationDate");
    }
  }

  int v22 = a1[29];
  if ((v22 & 0x20002) != 0)
  {
    -[__CFDictionary setObject:forKey:]( Mutable,  "setObject:forKey:",  +[NSNumber numberWithInteger:](&OBJC_CLASS___NSNumber, "numberWithInteger:", 1LL),  @"NSFileImmutable");
    int v22 = a1[29];
  }

  if ((v22 & 0x40004) != 0) {
    -[__CFDictionary setObject:forKey:]( Mutable,  "setObject:forKey:",  +[NSNumber numberWithInteger:](&OBJC_CLASS___NSNumber, "numberWithInteger:", 1LL),  @"NSFileAppendOnly");
  }
  -[__CFDictionary setObject:forKey:]( Mutable,  "setObject:forKey:",  +[NSNumber numberWithUnsignedLong:](&OBJC_CLASS___NSNumber, "numberWithUnsignedLong:", a1[4]),  @"NSFileOwnerAccountID");
  -[__CFDictionary setObject:forKey:]( Mutable,  "setObject:forKey:",  +[NSNumber numberWithUnsignedLong:](&OBJC_CLASS___NSNumber, "numberWithUnsignedLong:", a1[5]),  @"NSFileGroupOwnerAccountID");
  if (a3) {
    -[__CFDictionary setObject:forKey:](Mutable, "setObject:forKey:", a3, @"NSFileExtendedAttributes");
  }
  int v23 = a4 - 1;
  return Mutable;
}

NSString *__NSUserAccountNumberToName(uid_t a1)
{
  uint64_t v1 = getpwuid(a1);
  if (v1 && v1->pw_name) {
    return +[NSString stringWithUTF8String:](&OBJC_CLASS___NSString, "stringWithUTF8String:");
  }
  else {
    return 0LL;
  }
}

NSString *__NSGroupAccountNumberToName(gid_t a1)
{
  uint64_t v1 = getgrgid(a1);
  if (v1 && v1->gr_name) {
    return +[NSString stringWithUTF8String:](&OBJC_CLASS___NSString, "stringWithUTF8String:");
  }
  else {
    return 0LL;
  }
}

uint64_t sub_183572648()
{
  return 0LL;
}

uint64_t sub_183572688()
{
  return 0LL;
}

uint64_t sub_1835726C8()
{
  return 0LL;
}

uint64_t sub_183572708()
{
  return 0LL;
}

BOOL _NSFileExistsAtPath(void *a1, uint64_t a2, uint64_t a3, stat *a4)
{
  uint64_t v11 = *MEMORY[0x1895F89C0];
  uint64_t v8 = (void *)[objc_allocWithZone((Class)NSCheapMutableString) init];
  [v8 setContentsNoCopy:a2 length:a3 freeWhenDone:0 isUnicode:1];
  LODWORD(a3) = [a1 getFileSystemRepresentation:v10 maxLength:1026 withPath:v8];

  BOOL result = 0LL;
  if ((_DWORD)a3) {
    return stat(v10, a4) == 0;
  }
  return result;
}

void sub_183573C50( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
}

void __Block_byref_object_copy__3(uint64_t a1, uint64_t a2)
{
}

void __Block_byref_object_dispose__3(uint64_t a1)
{
}

void sub_183573E28( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
}

NSError *_librarianMissingError(int a1)
{
  if (a1) {
    uint64_t v1 = 256LL;
  }
  else {
    uint64_t v1 = 512LL;
  }
  return +[NSError errorWithDomain:code:userInfo:]( NSError,  "errorWithDomain:code:userInfo:",  @"NSCocoaErrorDomain",  v1,  objc_msgSend( MEMORY[0x189603F68],  "dictionaryWithObject:forKey:",  objc_msgSend( (id)_NSFoundationBundle(),  "localizedStringForKey:value:table:",  @"This feature is not enabled on this machine.",  &stru_189CA6A28,  @"Document"),  @"NSLocalizedDescription"));
}

uint64_t int_sort(void *a1, void *a2)
{
  if (*a1 < *a2) {
    return 0xFFFFFFFFLL;
  }
  else {
    return *a2 < *a1;
  }
}

uint64_t foundation_sandbox_check_path()
{
  return sandbox_check();
}

uint64_t sub_1835768E4()
{
  return 0LL;
}

uint64_t sub_183576930()
{
  return 0LL;
}

void sub_183578598(_Unwind_Exception *a1)
{
}

void sub_18357A180( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, char a23, uint64_t a24, uint64_t a25, uint64_t a26, char a27)
{
}

void __Block_byref_object_copy__4(uint64_t a1, uint64_t a2)
{
}

void __Block_byref_object_dispose__4(uint64_t a1)
{
}

void sub_18357A414( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

uint64_t NSExtensionIsPredicateSafeToExecuteWithObject()
{
  return 0LL;
}

uint64_t NSExtensionIsSafeKeyPathForObject()
{
  return 0LL;
}

uint64_t initNSDocumentTypeDocumentAttribute()
{
  uint64_t v0 = UIFoundationLibrary();
  uint64_t v1 = (uint64_t *)dlsym(v0, "NSDocumentTypeDocumentAttribute");
  if (!v1) {
    __assert_rtn("initNSDocumentTypeDocumentAttribute", "NSExtensionItem.m", 34, "constant");
  }
  uint64_t result = *v1;
  constantNSDocumentTypeDocumentAttribute = result;
  _MergedGlobals_83[0] = NSDocumentTypeDocumentAttributeFunction;
  return result;
}

uint64_t NSDocumentTypeDocumentAttributeFunction()
{
  return constantNSDocumentTypeDocumentAttribute;
}

uint64_t initNSRTFTextDocumentType()
{
  uint64_t v0 = UIFoundationLibrary();
  uint64_t v1 = (uint64_t *)dlsym(v0, "NSRTFTextDocumentType");
  if (!v1) {
    __assert_rtn("initNSRTFTextDocumentType", "NSExtensionItem.m", 35, "constant");
  }
  uint64_t result = *v1;
  constantNSRTFTextDocumentType = result;
  off_18C491788[0] = NSRTFTextDocumentTypeFunction;
  return result;
}

uint64_t NSRTFTextDocumentTypeFunction()
{
  return constantNSRTFTextDocumentType;
}

uint64_t initNSRTFDTextDocumentType()
{
  uint64_t v0 = UIFoundationLibrary();
  uint64_t v1 = (uint64_t *)dlsym(v0, "NSRTFDTextDocumentType");
  if (!v1) {
    __assert_rtn("initNSRTFDTextDocumentType", "NSExtensionItem.m", 36, "constant");
  }
  uint64_t result = *v1;
  constantNSRTFDTextDocumentType = result;
  off_18C491790[0] = NSRTFDTextDocumentTypeFunction;
  return result;
}

uint64_t NSRTFDTextDocumentTypeFunction()
{
  return constantNSRTFDTextDocumentType;
}

void *UIFoundationLibrary()
{
  uint64_t result = (void *)UIFoundationLibrary_frameworkLibrary;
  if (!UIFoundationLibrary_frameworkLibrary)
  {
    uint64_t result = dlopen("/System/Library/PrivateFrameworks/UIFoundation.framework/UIFoundation", 2);
    UIFoundationLibrary_frameworkLibrary = (uint64_t)result;
    if (!result) {
      __assert_rtn("UIFoundationLibrary", "NSExtensionItem.m", 33, "frameworkLibrary");
    }
  }

  return result;
}

uint64_t initkUTTypeURL()
{
  uint64_t v0 = CoreServicesLibrary();
  uint64_t v1 = (uint64_t *)dlsym(v0, "kUTTypeURL");
  if (!v1) {
    __assert_rtn("initkUTTypeURL", "NSExtensionItem.m", 39, "constant");
  }
  uint64_t result = *v1;
  constantkUTTypeURL = result;
  off_18C491798[0] = kUTTypeURLFunction;
  return result;
}

void *CoreServicesLibrary()
{
  uint64_t result = (void *)CoreServicesLibrary_frameworkLibrary;
  if (!CoreServicesLibrary_frameworkLibrary)
  {
    uint64_t result = dlopen("/System/Library/Frameworks/CoreServices.framework/CoreServices", 2);
    CoreServicesLibrary_frameworkLibrary = (uint64_t)result;
    if (!result) {
      __assert_rtn("CoreServicesLibrary", "NSExtensionItem.m", 38, "frameworkLibrary");
    }
  }

  return result;
}

uint64_t kUTTypeURLFunction()
{
  return constantkUTTypeURL;
}

uint64_t initkUTTypeData()
{
  uint64_t v0 = CoreServicesLibrary();
  uint64_t v1 = (uint64_t *)dlsym(v0, "kUTTypeData");
  if (!v1) {
    __assert_rtn("initkUTTypeData", "NSExtensionItem.m", 40, "constant");
  }
  uint64_t result = *v1;
  constantkUTTypeData = result;
  off_18C4917A0[0] = kUTTypeDataFunction;
  return result;
}

uint64_t kUTTypeDataFunction()
{
  return constantkUTTypeData;
}

BOOL NSEqualPoints(NSPoint aPoint, NSPoint bPoint)
{
  return aPoint.y == bPoint.y && aPoint.x == bPoint.x;
}

BOOL NSEqualSizes(NSSize aSize, NSSize bSize)
{
  return aSize.height == bSize.height && aSize.width == bSize.width;
}

NSRect NSOffsetRect(NSRect aRect, CGFloat dX, CGFloat dY)
{
  double v3 = aRect.origin.x + dX;
  double v4 = aRect.origin.y + dY;
  aRect.origin.y = v4;
  aRect.origin.x = v3;
  return aRect;
}

BOOL NSIsEmptyRect(NSRect aRect)
{
  return aRect.size.height <= 0.0 || aRect.size.width <= 0.0;
}

BOOL NSEqualRects(NSRect aRect, NSRect bRect)
{
  return aRect.origin.x == bRect.origin.x
      && aRect.origin.y == bRect.origin.y
      && aRect.size.width == bRect.size.width
      && aRect.size.height == bRect.size.height;
}

NSRect NSInsetRect(NSRect aRect, CGFloat dX, CGFloat dY)
{
  double v3 = aRect.origin.x + dX;
  double v4 = aRect.origin.y + dY;
  double v5 = aRect.size.width - dX - dX;
  double v6 = aRect.size.height - dY - dY;
  result.size.height = v6;
  result.size.width = v5;
  result.origin.y = v4;
  result.origin.x = v3;
  return result;
}

NSRect NSIntegralRect(NSRect aRect)
{
  double x = aRect.origin.x;
  double v2 = 0.0;
  if (aRect.size.width <= 0.0)
  {
    double v5 = 0.0;
    double v6 = 0.0;
    double v7 = 0.0;
  }

  else
  {
    double width = aRect.size.width;
    double y = aRect.origin.y;
    double v5 = 0.0;
    double v6 = 0.0;
    double v7 = 0.0;
    if (aRect.size.height > 0.0)
    {
      double v2 = floor(x);
      double v5 = floor(y);
      double v6 = ceil(x + width) - v2;
      double v7 = ceil(y + aRect.size.height) - v5;
    }
  }

  double v8 = v7;
  result.size.height = v8;
  result.size.double width = v6;
  result.origin.double y = v5;
  result.origin.double x = v2;
  return result;
}

unint64_t NSIntegralRectFlipOptions(unint64_t a1)
{
  return (a1 >> 2) & 0x20202 | a1 & 0xFFFFFFFFFFF5F5F5LL | (4 * (int)a1) & 0x80808LL;
}

NSRect NSIntegralRectWithOptions(NSRect aRect, NSAlignmentOptions opts)
{
  if (opts & (BYTE1(opts) | BYTE2(opts)) | (BYTE2(opts) & BYTE1(opts)))
  {
    unint64_t v74 = (void *)MEMORY[0x189603F70];
    uint64_t v75 = *MEMORY[0x189603A60];
    BOOL v76 = @"The options parameter is invalid. Only one of {in, out, nearest} may be set for a given rect attribute.";
LABEL_97:
    objc_exception_throw((id)objc_msgSend( v74,  "exceptionWithName:reason:userInfo:",  v75,  v76,  0,  aRect.origin.x,  aRect.origin.y,  aRect.size.width,  aRect.size.height));
    double v72 = roundTowardsPlusInfinity(v77);
    goto LABEL_98;
  }

  double y = aRect.origin.y;
  *(int8x8_t *)&aRect.origin.double y = vcnt_s8((int8x8_t)(opts & 0x151515));
  LOWORD(aRect.origin.y) = vaddlv_u8(*(uint8x8_t *)&aRect.origin.y);
  if (LODWORD(aRect.origin.y) != 2LL)
  {
    unint64_t v74 = (void *)MEMORY[0x189603F70];
    uint64_t v75 = *MEMORY[0x189603A60];
    BOOL v76 = @"The options parameter is invalid. There should be specifiers for exactly two out of {minX, maxX, width}.";
    goto LABEL_97;
  }

  *(int8x8_t *)&aRect.origin.double y = vcnt_s8((int8x8_t)(opts & 0x2A2A2A));
  LOWORD(aRect.origin.y) = vaddlv_u8(*(uint8x8_t *)&aRect.origin.y);
  if (LODWORD(aRect.origin.y) != 2LL)
  {
    unint64_t v74 = (void *)MEMORY[0x189603F70];
    uint64_t v75 = *MEMORY[0x189603A60];
    BOOL v76 = @"The options parameter is invalid. There should be specifiers for exactly two out of {minY, maxY, height}.";
    goto LABEL_97;
  }

  double height = aRect.size.height;
  if ((opts & 0x8000000000000000LL) != 0LL) {
    double v5 = (uint64_t (*)(__n128))roundTowardsMinusInfinity;
  }
  else {
    double v5 = (uint64_t (*)(__n128))roundTowardsPlusInfinity;
  }
  if ((opts & 0x10101) == 0)
  {
    double v29 = 0.00390625;
    if ((opts & 0x4000000000000000LL) != 0) {
      double v29 = 0.0;
    }
    if ((opts & 0x100000) != 0)
    {
      double v30 = floor(aRect.size.width + aRect.size.width + 0.5);
      double v31 = vabdd_f64(aRect.size.width + aRect.size.width, v30);
      double v32 = v30 * 0.5;
      if (v31 >= v29 + v29) {
        double width = aRect.size.width;
      }
      else {
        double width = v32;
      }
      double v28 = floor(width + 0.5);
    }

    else
    {
      double v28 = floor(aRect.size.width + 0.5);
      if (vabdd_f64(aRect.size.width, v28) >= v29)
      {
        if ((opts & 0x10) != 0) {
          double v28 = floor(aRect.size.width);
        }
        else {
          double v28 = ceil(aRect.size.width);
        }
      }
    }

    double v34 = aRect.origin.x + aRect.size.width;
    double v35 = floor(v34 + 0.5);
    double v36 = vabdd_f64(v34, v35);
    double v37 = ceil(v34);
    double v38 = floor(v34);
    if ((opts & 4) != 0) {
      double v37 = v38;
    }
    if (v36 >= v29) {
      double v35 = v37;
    }
    double v39 = floor(v34 + v34 + 0.5);
    double v40 = vabdd_f64(v34 + v34, v39);
    double v41 = v39 * 0.5;
    if (v40 < v29 + v29) {
      double v34 = v41;
    }
    double v42 = floor(v34 + 0.5);
    if ((opts & 0x40000) == 0) {
      double v42 = v35;
    }
    double v17 = v42 - v28;
    goto LABEL_68;
  }

  double v6 = 0.00390625;
  if ((opts & 0x4000000000000000LL) != 0) {
    double v6 = 0.0;
  }
  if ((opts & 0x40404) == 0)
  {
    if ((opts & 0x10000) != 0)
    {
      double v43 = floor(aRect.origin.x + aRect.origin.x + 0.5);
      double v44 = vabdd_f64(aRect.origin.x + aRect.origin.x, v43);
      double v45 = v43 * 0.5;
      if (v44 < v6 + v6) {
        aRect.origin.double x = v45;
      }
      aRect.origin.double x = aRect.origin.x + 0.5;
    }

    else
    {
      double v17 = floor(aRect.origin.x + 0.5);
      if (vabdd_f64(aRect.origin.x, v17) < v6)
      {
LABEL_58:
        double v46 = floor(aRect.size.width + 0.5);
        double v47 = vabdd_f64(aRect.size.width, v46);
        double v48 = ceil(aRect.size.width);
        double v49 = floor(aRect.size.width);
        if ((opts & 0x10) != 0) {
          double v48 = v49;
        }
        if (v47 >= v6) {
          double v46 = v48;
        }
        double v50 = floor(aRect.size.width + aRect.size.width + 0.5);
        double v51 = vabdd_f64(aRect.size.width + aRect.size.width, v50);
        double v52 = v50 * 0.5;
        if (v51 >= v6 + v6) {
          double v53 = aRect.size.width;
        }
        else {
          double v53 = v52;
        }
        double v54 = floor(v53 + 0.5);
        if ((opts & 0x100000) != 0) {
          double v28 = v54;
        }
        else {
          double v28 = v46;
        }
        goto LABEL_68;
      }

      if ((opts & 1) != 0)
      {
        double v17 = ceil(aRect.origin.x);
        goto LABEL_58;
      }
    }

    double v17 = floor(aRect.origin.x);
    goto LABEL_58;
  }

  double v7 = floor(aRect.origin.x + 0.5);
  double v8 = vabdd_f64(aRect.origin.x, v7);
  double v9 = floor(aRect.origin.x);
  double v10 = ceil(aRect.origin.x);
  if ((opts & 1) != 0) {
    double v9 = v10;
  }
  if (v8 >= v6) {
    double v7 = v9;
  }
  double v11 = floor(aRect.origin.x + aRect.origin.x + 0.5);
  double v12 = vabdd_f64(aRect.origin.x + aRect.origin.x, v11);
  double v13 = v6 + v6;
  double v14 = v11 * 0.5;
  if (v12 >= v6 + v6) {
    double x = aRect.origin.x;
  }
  else {
    double x = v14;
  }
  double v16 = floor(x + 0.5);
  if ((opts & 0x10000) != 0) {
    double v17 = v16;
  }
  else {
    double v17 = v7;
  }
  double v18 = aRect.origin.x + aRect.size.width;
  double v19 = floor(v18 + 0.5);
  double v20 = vabdd_f64(v18, v19);
  double v21 = ceil(v18);
  double v22 = floor(v18);
  if ((opts & 4) != 0) {
    double v21 = v22;
  }
  if (v20 >= v6) {
    double v23 = v21;
  }
  else {
    double v23 = v19;
  }
  double v24 = floor(v18 + v18 + 0.5);
  double v25 = vabdd_f64(v18 + v18, v24);
  double v26 = v24 * 0.5;
  if (v25 < v13) {
    double v18 = v26;
  }
  double v27 = floor(v18 + 0.5);
  if ((opts & 0x40000) == 0) {
    double v27 = v23;
  }
  double v28 = v27 - v17;
LABEL_68:
  if ((opts & 0x20202) != 0)
  {
    aRect.origin.double x = y;
    integralizeRectAttribute( opts & 0x20202,  (opts & 0x4000000000000000LL) != 0,  MEMORY[0x1895FA4E8],  MEMORY[0x1895FB300],  v5,  (__n128)aRect.origin);
    double v56 = v55.n128_f64[0];
    if ((opts & 0x80808) != 0)
    {
      v55.n128_f64[0] = y + height;
      integralizeRectAttribute( opts & 0x80808,  (opts & 0x4000000000000000LL) != 0,  MEMORY[0x1895FB300],  MEMORY[0x1895FA4E8],  v5,  v55);
      double v58 = v57 - v56;
    }

    else
    {
      double v60 = 0.00390625;
      if ((opts & 0x4000000000000000LL) != 0) {
        double v60 = 0.0;
      }
      if ((opts & 0x200000) != 0)
      {
        double v66 = floor(height + height + 0.5);
        double v67 = vabdd_f64(height + height, v66);
        double v68 = v66 * 0.5;
        if (v67 >= v60 + v60) {
          double v69 = height;
        }
        else {
          double v69 = v68;
        }
        double v58 = floor(v69 + 0.5);
      }

      else
      {
        double v58 = floor(height + 0.5);
        if (vabdd_f64(height, v58) >= v60)
        {
          if ((opts & 0x20) != 0) {
            double v58 = floor(height);
          }
          else {
            double v58 = ceil(height);
          }
        }
      }
    }
  }

  else
  {
    double v59 = 0.00390625;
    if ((opts & 0x4000000000000000LL) != 0) {
      double v59 = 0.0;
    }
    if ((opts & 0x200000) != 0)
    {
      double v61 = floor(height + height + 0.5);
      double v62 = vabdd_f64(height + height, v61);
      double v63 = v61 * 0.5;
      if (v62 >= v59 + v59) {
        double v64 = height;
      }
      else {
        double v64 = v63;
      }
      double v58 = floor(v64 + 0.5);
    }

    else
    {
      double v58 = floor(height + 0.5);
      if (vabdd_f64(height, v58) >= v59) {
        double v58 = ceil(height);
      }
    }

    aRect.origin.double x = y + height;
    integralizeRectAttribute( opts & 0x80808,  (opts & 0x4000000000000000LL) != 0,  MEMORY[0x1895FB300],  MEMORY[0x1895FA4E8],  v5,  (__n128)aRect.origin);
    double v56 = v65 - v58;
  }

  double v70 = fmax(v28, 0.0);
  double v71 = fmax(v58, 0.0);
  double v72 = v17;
  double v73 = v56;
LABEL_98:
  result.size.double height = v71;
  result.size.double width = v70;
  result.origin.double y = v73;
  result.origin.double x = v72;
  return result;
}

double roundTowardsPlusInfinity(double a1)
{
  return floor(a1 + 0.5);
}

double roundTowardsMinusInfinity(double a1)
{
  return ceil(a1 + -0.5);
}

uint64_t integralizeRectAttribute( uint64_t result, int a2, uint64_t (*a3)(void), uint64_t (*a4)(void), uint64_t (*a5)(__n128), __n128 a6)
{
  double v6 = 0.0;
  if (!a2) {
    double v6 = 0.00390625;
  }
  if ((result & 0xFF0000) != 0)
  {
    double v7 = floor(a6.n128_f64[0] + a6.n128_f64[0] + 0.5);
    if (vabdd_f64(a6.n128_f64[0] + a6.n128_f64[0], v7) < v6 + v6) {
      a6.n128_f64[0] = v7 * 0.5;
    }
    return a5(a6);
  }

  else if (vabdd_f64(a6.n128_f64[0], floor(a6.n128_f64[0] + 0.5)) >= v6)
  {
    if ((_BYTE)result) {
      return a3();
    }
    else {
      return a4();
    }
  }

  return result;
}

NSRect NSUnionRect(NSRect aRect, NSRect bRect)
{
  BOOL v2 = bRect.size.width <= 0.0;
  if (bRect.size.height <= 0.0) {
    BOOL v2 = 1;
  }
  if (aRect.size.width <= 0.0 || aRect.size.height <= 0.0)
  {
    aRect.size.double height = 0.0;
    aRect.size.double width = 0.0;
    aRect.origin.double y = 0.0;
    aRect.origin.double x = 0.0;
    if (!v2) {
      return bRect;
    }
  }

  else if (!v2)
  {
    double v3 = aRect.origin.x + aRect.size.width;
    if (aRect.origin.x >= bRect.origin.x) {
      aRect.origin.double x = bRect.origin.x;
    }
    double v4 = aRect.origin.y + aRect.size.height;
    if (aRect.origin.y >= bRect.origin.y) {
      aRect.origin.double y = bRect.origin.y;
    }
    double v5 = bRect.origin.x + bRect.size.width;
    if (v3 <= v5) {
      double v3 = v5;
    }
    aRect.size.double width = v3 - aRect.origin.x;
    if (v4 <= bRect.origin.y + bRect.size.height) {
      double v4 = bRect.origin.y + bRect.size.height;
    }
    aRect.size.double height = v4 - aRect.origin.y;
  }

  return aRect;
}

NSRect NSIntersectionRect(NSRect aRect, NSRect bRect)
{
  double x = aRect.origin.x;
  double v3 = 0.0;
  if (aRect.size.width <= 0.0 || bRect.size.width <= 0.0 || aRect.size.height <= 0.0 || bRect.size.height <= 0.0) {
    goto LABEL_20;
  }
  if (x <= bRect.origin.x) {
    double v4 = bRect.origin.x;
  }
  else {
    double v4 = x;
  }
  double v5 = x + aRect.size.width;
  double v6 = bRect.origin.x + bRect.size.width;
  if (v5 < v6) {
    double v6 = v5;
  }
  if (v6 <= v4)
  {
LABEL_20:
    double v10 = 0.0;
    double v11 = 0.0;
    double v12 = 0.0;
  }

  else
  {
    if (aRect.origin.y <= bRect.origin.y) {
      double y = bRect.origin.y;
    }
    else {
      double y = aRect.origin.y;
    }
    double v8 = aRect.origin.y + aRect.size.height;
    if (v8 >= bRect.origin.y + bRect.size.height) {
      double v9 = bRect.origin.y + bRect.size.height;
    }
    else {
      double v9 = v8;
    }
    double v10 = 0.0;
    double v11 = 0.0;
    double v12 = 0.0;
    if (v9 > y)
    {
      double v11 = v6 - v4;
      double v12 = v9 - y;
      double v3 = v4;
      double v10 = y;
    }
  }

  result.size.double height = v12;
  result.size.double width = v11;
  result.origin.double y = v10;
  result.origin.double x = v3;
  return result;
}

void NSDivideRect(NSRect inRect, NSRect *slice, NSRect *rem, CGFloat amount, NSRectEdge edge)
{
  *slice = inRect;
  *rem = inRect;
  if ((edge | 2) == 2)
  {
    if (inRect.size.width >= amount) {
      double width = amount;
    }
    else {
      double width = inRect.size.width;
    }
    slice->size.double width = width;
    double x = rem->size.width - width;
    rem->size.double width = x;
    if (edge)
    {
      inRect.origin.double y = slice->origin.x;
      rem = slice;
    }

    else
    {
      inRect.origin.double y = slice->size.width;
      double x = inRect.origin.x;
    }
  }

  else
  {
    if (inRect.size.height >= amount) {
      double height = amount;
    }
    else {
      double height = inRect.size.height;
    }
    slice->size.double height = height;
    double x = rem->size.height - height;
    rem->size.double height = x;
    if (edge == NSRectEdgeMinY)
    {
      double x = slice->size.height;
      rem = (NSRect *)((char *)rem + 8);
    }

    else
    {
      inRect.origin.double y = slice->origin.y;
      rem = (NSRect *)&slice->origin.y;
    }
  }

  rem->origin.double x = inRect.origin.y + x;
}

BOOL NSPointInRect(NSPoint aPoint, NSRect aRect)
{
  double v2 = aRect.origin.x + aRect.size.width;
  return aPoint.x >= aRect.origin.x
      && aPoint.x < v2
      && aPoint.y >= aRect.origin.y
      && aPoint.y < aRect.origin.y + aRect.size.height;
}

BOOL NSMouseInRect(NSPoint aPoint, NSRect aRect, BOOL flipped)
{
  double v3 = aRect.origin.x + aRect.size.width;
  double v6 = aRect.origin.y + aRect.size.height;
  if (flipped) {
    return aPoint.y < v6 && aPoint.y >= aRect.origin.y;
  }
  else {
    return aPoint.y <= v6 && aPoint.y > aRect.origin.y;
  }
}

BOOL NSIntersectsRect(NSRect aRect, NSRect bRect)
{
  BOOL result = 0;
  if (aRect.size.width > 0.0 && bRect.size.width > 0.0 && aRect.size.height > 0.0 && bRect.size.height > 0.0)
  {
    if (aRect.origin.x >= bRect.origin.x)
    {
      if (bRect.origin.x + bRect.size.width <= aRect.origin.x) {
        return 0;
      }
    }

    else if (aRect.origin.x + aRect.size.width <= bRect.origin.x)
    {
      return 0;
    }

    if (aRect.origin.y >= bRect.origin.y)
    {
      if (bRect.origin.y + bRect.size.height <= aRect.origin.y) {
        return 0;
      }
    }

    else if (aRect.origin.y + aRect.size.height <= bRect.origin.y)
    {
      return 0;
    }

    return 1;
  }

  return result;
}

BOOL NSContainsRect(NSRect aRect, NSRect bRect)
{
  BOOL result = 0;
  if (aRect.size.width > 0.0
    && aRect.size.height > 0.0
    && bRect.size.width > 0.0
    && bRect.size.height > 0.0
    && aRect.origin.x <= bRect.origin.x
    && aRect.origin.y <= bRect.origin.y)
  {
    return aRect.origin.x + aRect.size.width >= bRect.origin.x + bRect.size.width
        && aRect.origin.y + aRect.size.height >= bRect.origin.y + bRect.size.height;
  }

  return result;
}

BOOL NSEdgeInsetsEqual(NSEdgeInsets aInsets, NSEdgeInsets bInsets)
{
  return aInsets.top == bInsets.top
      && aInsets.left == bInsets.left
      && aInsets.bottom == bInsets.bottom
      && aInsets.right == bInsets.right;
}

NSString *__cdecl NSStringFromPoint(NSPoint aPoint)
{
  return +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"{%.*g, %.*g}",  17LL,  *(void *)&aPoint.x,  17LL,  *(void *)&aPoint.y);
}

NSPoint NSPointFromString(NSString *aString)
{
  uint64_t v5 = *MEMORY[0x1895F89C0];
  double v3 = 0.0;
  double v4 = 0.0;
  parseFloats(aString, 2LL, (uint64_t)&v3);
  double v1 = v3;
  double v2 = v4;
  result.double y = v2;
  result.double x = v1;
  return result;
}

void parseFloats(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v15 = *MEMORY[0x1895F89C0];
  if (a1)
  {
    uint64_t v6 = (uint64_t)v14;
    if (([a1 getCString:v14 maxLength:100 encoding:4] & 1) == 0) {
      uint64_t v6 = [a1 UTF8String];
    }
    if (a2 && v6)
    {
      uint64_t v7 = 0LL;
      double v8 = 0LL;
      do
      {
        unsigned int v9 = v8[v6];
        if (v8[v6]) {
          BOOL v10 = v9 - 48 >= 0xA;
        }
        else {
          BOOL v10 = 0;
        }
        if (v10)
        {
          while (v9 > 0x2E || ((1LL << v9) & 0x680000000000LL) == 0)
          {
            double v11 = v8 + 1;
            unsigned int v9 = v8[v6 + 1];
            if (v8[v6 + 1]) {
              BOOL v12 = v9 - 48 >= 0xA;
            }
            else {
              BOOL v12 = 0;
            }
            ++v8;
            if (!v12) {
              goto LABEL_12;
            }
          }
        }

        double v11 = v8;
LABEL_12:
        *(double *)(a3 + 8 * v7) = strtod_l(&v11[v6], &v13, 0LL);
        double v8 = &v13[-v6];
        ++v7;
      }

      while (v7 != a2);
    }
  }

NSString *__cdecl NSStringFromSize(NSSize aSize)
{
  return +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"{%.*g, %.*g}",  17LL,  *(void *)&aSize.width,  17LL,  *(void *)&aSize.height);
}

NSSize NSSizeFromString(NSString *aString)
{
  uint64_t v5 = *MEMORY[0x1895F89C0];
  double v3 = 0.0;
  double v4 = 0.0;
  parseFloats(aString, 2LL, (uint64_t)&v3);
  double v1 = v3;
  double v2 = v4;
  result.double height = v2;
  result.double width = v1;
  return result;
}

NSString *__cdecl NSStringFromRect(NSRect aRect)
{
  return +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"{{%.*g, %.*g}, {%.*g, %.*g}}",  17LL,  *(void *)&aRect.origin.x,  17LL,  *(void *)&aRect.origin.y,  17LL,  *(void *)&aRect.size.width,  17LL,  *(void *)&aRect.size.height);
}

NSRect NSRectFromString(NSString *aString)
{
  uint64_t v7 = *MEMORY[0x1895F89C0];
  __int128 v5 = 0u;
  *(_OWORD *)uint64_t v6 = 0u;
  parseFloats(aString, 4LL, (uint64_t)&v5);
  double v2 = *((double *)&v5 + 1);
  double v1 = *(double *)&v5;
  double v4 = v6[1];
  double v3 = v6[0];
  result.size.double height = v4;
  result.size.double width = v3;
  result.origin.double y = v2;
  result.origin.double x = v1;
  return result;
}

uint64_t _foundation_swift_url_feature_enabled()
{
  if (qword_18C4965F0 != -1) {
    dispatch_once(&qword_18C4965F0, &__block_literal_global_11);
  }
  return _MergedGlobals_95;
}

uint64_t ___foundation_swift_url_feature_enabled_block_invoke()
{
  uint64_t result = _os_feature_enabled_impl();
  if ((result & 1) != 0)
  {
    BOOL v1 = 1;
  }

  else
  {
    uint64_t result = (uint64_t)getenv("NSSwiftURL");
    BOOL v1 = result != 0;
  }

  _MergedGlobals_95 = v1;
  return result;
}

_NSBPlistMappedData *__NSCreateBPlistMappedDataFromURL(uint64_t a1, uint64_t a2, void *a3)
{
  v10[1] = *(id *)MEMORY[0x1895F89C0];
  uint64_t v6 = (void *)MEMORY[0x186E1FF60]();
  v10[0] = 0LL;
  uint64_t v7 = -[_NSBPlistMappedData initWithFileURL:error:]( objc_alloc(&OBJC_CLASS____NSBPlistMappedData),  "initWithFileURL:error:",  a1,  v10);
  if (v7)
  {
    uint64_t v8 = (*(uint64_t (**)(uint64_t, _NSBPlistMappedData *))(a2 + 16))(a2, v7);
    -[_NSBPlistMappedData setMappingIndex:](v7, "setMappingIndex:", v8, v10[0]);
  }

  else if (a3)
  {
    *a3 = v10[0];
  }

  objc_autoreleasePoolPop(v6);
  return v7;
}

id __NSCreateBPlistMappedString(uint64_t a1, uint64_t a2)
{
  return +[_NSBPlistMappedString createStringWithOffset:intoMappingData:]( &OBJC_CLASS____NSBPlistMappedString,  "createStringWithOffset:intoMappingData:",  a1,  a2);
}

void sub_18357BF10( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
}

void sub_18357C274(_Unwind_Exception *exception_object)
{
}

void sub_18357C590(_Unwind_Exception *a1)
{
}

uint64_t ___getStringLength_block_invoke(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = a3;
  return 1LL;
}

uint64_t ___getStringLength_block_invoke_2(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = a3;
  return 1LL;
}

void sub_18357D660(_Unwind_Exception *a1)
{
}

void sub_18357D67C()
{
}

void sub_18357D98C(_Unwind_Exception *a1)
{
}

void sub_18357D9A8()
{
}

void _NSSetRaiseInsertNilException(objc_class *a1, const char *a2)
{
  double v2 = (void *)[MEMORY[0x189603F70] exceptionWithName:*MEMORY[0x189603A60], +[NSString stringWithFormat:]( NSString, "stringWithFormat:", @"%@: attempt to insert nil", _NSMethodExceptionProem(a1, a2)), 0 reason userInfo];
  objc_exception_throw(v2);
  -[NSCountedSet removeAllObjects](v3, v4);
}

void sub_18357E140(_Unwind_Exception *a1)
{
}

objc_class *_NSSetCheckSize(objc_class *result, const char *a2, unint64_t a3, uint64_t a4)
{
  if (a3 >> 60)
  {
    SEL v4 = (void *)[MEMORY[0x189603F70] exceptionWithName:*MEMORY[0x189603A60], +[NSString stringWithFormat:]( NSString, "stringWithFormat:", @"%@: absurd %s: %ld", _NSMethodExceptionProem(result, a2), a4, a3), 0 reason userInfo];
    objc_exception_throw(v4);
    return (objc_class *)-[NSCountedSet descriptionWithLocale:](v5, v6, v7);
  }

  return result;
}

NSHashTable *raiseError(uint64_t a1, const char *a2)
{
  id v3 = objc_alloc(MEMORY[0x189603F70]);
  uint64_t Name = sel_getName(a2);
  __int128 v5 = (void *)[v3 initWithName:@"NSHashTableAbstractImplementationError", +[NSString stringWithFormat:]( NSString, "stringWithFormat:", @"abstract method %s called directly on class %@", Name, objc_opt_class()), 0 reason userInfo];
  objc_exception_throw(v5);
  return -[NSHashTable init](v6, v7);
}

void sub_18357F3C8(_Unwind_Exception *exception_object)
{
}

NSHashTable *__cdecl NSCreateHashTableWithZone(NSHashTableCallBacks *callBacks, NSUInteger capacity, NSZone *zone)
{
  SEL v4 = (objc_class *)objc_opt_self();
  __int128 v5 = (NSZone *)malloc_default_zone();
  SEL v6 = (char *)NSAllocateObject(v4, 0LL, v5);
  describe = callBacks->describe;
  __int128 v8 = *(_OWORD *)&callBacks->retain;
  *(_OWORD *)(v6 + _Block_object_dispose((const void *)(v1 - 56), 8) = *(_OWORD *)&callBacks->hash;
  *(_OWORD *)(v6 + 24) = v8;
  *((void *)v6 + 5) = describe;
  uint64_t result = (NSHashTable *)malloc(0x10uLL);
  if (result)
  {
    result->super.Class isa = (Class)__NSHashTableCallback;
    result[1].super.Class isa = (Class)v6;
    if (*(_OWORD *)&callBacks->retain == 0LL) {
      unint64_t v10 = 0x2000LL;
    }
    else {
      unint64_t v10 = 8704LL;
    }
    *((void *)v6 + 6) = CFBasicHashCreate(*MEMORY[0x189604DD0], v10, (uint64_t)result);
    return (NSHashTable *)v6;
  }

  else
  {
    qword_18C5D6210 = (uint64_t)"unable to allocate space for callbacks";
    __break(1u);
  }

  return result;
}

_OWORD *__NSHashTableCallback(int a1, int a2, _OWORD *a3, _OWORD *a4, void *a5)
{
  uint64_t result = 0LL;
  __int128 v8 = (void *)a5[1];
  switch(a2)
  {
    case 8:
      uint64_t result = malloc(0x10uLL);
      if (result)
      {
        *uint64_t result = *(_OWORD *)a5;
      }

      else
      {
        qword_18C5D6210 = (uint64_t)"unable to allocate space for callbacks";
        __break(1u);
      }

      return result;
    case 9:
      free(a5);
      return 0LL;
    case 10:
    case 12:
      unsigned int v9 = (void (*)(void, _OWORD *))v8[3];
      if (v9) {
        v9(a5[1], a3);
      }
      goto LABEL_12;
    case 14:
    case 16:
      unint64_t v10 = (void (*)(void, _OWORD *))v8[4];
      if (v10) {
        v10(a5[1], a3);
      }
      return 0LL;
    case 18:
    case 20:
      double v11 = (unsigned int (*)(void, _OWORD *, _OWORD *))v8[2];
      if (v11) {
        return (_OWORD *)v11(a5[1], a3, a4);
      }
      else {
        return (_OWORD *)(a3 == a4);
      }
    case 22:
      double v14 = (uint64_t (*)(void, _OWORD *))v8[1];
      if (v14) {
        uint64_t result = (_OWORD *)v14(a5[1], a3);
      }
      else {
LABEL_12:
      }
        uint64_t result = a3;
      break;
    case 24:
    case 26:
      BOOL v12 = (uint64_t (*)(void, _OWORD *))v8[5];
      if (v12)
      {
        double v13 = (const void *)v12(a5[1], a3);
        uint64_t result = CFRetain(v13);
      }

      else
      {
        uint64_t result = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x189604DD0], 0LL, @"<%p>", a3);
      }

      break;
    default:
      return result;
  }

  return result;
}

NSHashTable *__cdecl NSCreateHashTable(NSHashTableCallBacks *callBacks, NSUInteger capacity)
{
  uint64_t v6 = *MEMORY[0x1895F89C0];
  __int128 v3 = *(_OWORD *)&callBacks->retain;
  *(_OWORD *)&v5.hash = *(_OWORD *)&callBacks->hash;
  *(_OWORD *)&v5.retain = v3;
  v5.describe = callBacks->describe;
  return NSCreateHashTableWithZone(&v5, capacity, v2);
}

void sub_183581120( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
}

void sub_183581250(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
}

void NSFreeHashTable(NSHashTable *table)
{
  if (table)
  {
  }

  else
  {
    NSLog((NSString *)@"%s: hash table argument is NULL", "void NSFreeHashTable(NSHashTable * _Nonnull)");
  }

void NSResetHashTable(NSHashTable *table)
{
  if (!table) {
    NSLog((NSString *)@"%s: hash table argument is NULL", "void NSResetHashTable(NSHashTable * _Nonnull)");
  }
  -[NSHashTable removeAllItems](table, "removeAllItems");
}

BOOL NSCompareHashTables(NSHashTable *table1, NSHashTable *table2)
{
  if (!table1)
  {
    NSLog( (NSString *)@"%s: first hash table argument is NULL",  "BOOL NSCompareHashTables(NSHashTable * _Nonnull, NSHashTable * _Nonnull)");
    if (table2) {
      return -[NSHashTable isEqual:](table1, "isEqual:", table2);
    }
LABEL_5:
    NSLog( (NSString *)@"%s: second hash table argument is NULL",  "BOOL NSCompareHashTables(NSHashTable * _Nonnull, NSHashTable * _Nonnull)");
    return -[NSHashTable isEqual:](table1, "isEqual:", table2);
  }

  if (!table2) {
    goto LABEL_5;
  }
  return -[NSHashTable isEqual:](table1, "isEqual:", table2);
}

NSHashTable *__cdecl NSCopyHashTableWithZone(NSHashTable *table, NSZone *zone)
{
  if (!table) {
    NSLog( (NSString *)@"%s: hash table argument is NULL",  zone,  "NSHashTable * _Nonnull NSCopyHashTableWithZone(NSHashTable * _Nonnull, NSZone * _Nullable)");
  }
  return (NSHashTable *)-[NSHashTable copy](table, "copy");
}

void *__cdecl NSHashGet(NSHashTable *table, const void *pointer)
{
  if (!table) {
    NSLog( (NSString *)@"%s: hash table argument is NULL",  "void * _Nonnull NSHashGet(NSHashTable * _Nonnull, const void * _Nullable)");
  }
  return -[NSHashTable getItem:](table, "getItem:", pointer);
}

void NSHashInsert(NSHashTable *table, const void *pointer)
{
  if (!table) {
    NSLog( (NSString *)@"%s: hash table argument is NULL",  "void NSHashInsert(NSHashTable * _Nonnull, const void * _Nullable)");
  }
  -[NSHashTable insertItem:](table, "insertItem:", pointer);
}

void NSHashInsertKnownAbsent(NSHashTable *table, const void *pointer)
{
  if (!table) {
    NSLog( (NSString *)@"%s: hash table argument is NULL",  "void NSHashInsertKnownAbsent(NSHashTable * _Nonnull, const void * _Nullable)");
  }
  -[NSHashTable insertKnownAbsentItem:](table, "insertKnownAbsentItem:", pointer);
}

void *__cdecl NSHashInsertIfAbsent(NSHashTable *table, const void *pointer)
{
  if (!table) {
    NSLog( (NSString *)@"%s: hash table argument is NULL",  "void * _Nullable NSHashInsertIfAbsent(NSHashTable * _Nonnull, const void * _Nullable)");
  }
  if (pointer)
  {
    SEL v4 = -[NSHashTable getItem:](table, "getItem:", pointer);
    if (!v4) {
      -[NSHashTable addObject:](table, "addObject:", pointer);
    }
    return v4;
  }

  else
  {
    objc_exception_throw((id)[MEMORY[0x189603F70] exceptionWithName:*MEMORY[0x189603A60] reason:@"*** NSHashInsertIfAbsent(): attempt to insert NULL pointer" userInfo:0]);
    NSHashRemove(v6, v7);
  }

  return result;
}

void NSHashRemove(NSHashTable *table, const void *pointer)
{
  if (!table) {
    NSLog( (NSString *)@"%s: hash table argument is NULL",  "void NSHashRemove(NSHashTable * _Nonnull, const void * _Nullable)");
  }
  -[NSHashTable removeItem:](table, "removeItem:", pointer);
}

NSHashEnumerator *__cdecl NSEnumerateHashTable(NSHashEnumerator *__return_ptr retstr, NSHashTable *table)
{
  v7[1] = *MEMORY[0x1895F89C0];
  if (!table) {
    NSLog( (NSString *)@"%s: hash table argument is NULL",  "NSHashEnumerator NSEnumerateHashTable(NSHashTable * _Nonnull)");
  }
  NSUInteger v4 = -[NSHashTable count](table, "count");
  retstr->_puint64_t i = v4;
  retstr->_suint64_t i = 0LL;
  NSHashTableCallBacks v5 = calloc(v4, 8uLL);
  retstr->_bs = v5;
  v7[0] = 0LL;
  uint64_t result = (NSHashEnumerator *)-[NSHashTable getKeys:count:](table, "getKeys:count:", v5, v7);
  retstr->_puint64_t i = v7[0];
  return result;
}

void *__cdecl NSNextHashEnumeratorItem(NSHashEnumerator *enumerator)
{
  if (!enumerator) {
    NSLog( (NSString *)@"%s: state argument is NULL",  "void * _Nullable NSNextHashEnumeratorItem(NSHashEnumerator * _Nonnull)");
  }
  suint64_t i = enumerator->_si;
  uint64_t result = enumerator->_bs;
  if (enumerator->_pi <= si)
  {
    if (result)
    {
      free(result);
      uint64_t result = 0LL;
      enumerator->_bs = 0LL;
    }
  }

  else
  {
    uint64_t result = (void *)*((void *)result + si);
    enumerator->_suint64_t i = si + 1;
  }

  return result;
}

void NSEndHashTableEnumeration(NSHashEnumerator *enumerator)
{
  if (!enumerator) {
    NSLog( (NSString *)@"%s: state argument is NULL",  "void NSEndHashTableEnumeration(NSHashEnumerator * _Nonnull)");
  }
  enumerator->_suint64_t i = enumerator->_pi;
  free(enumerator->_bs);
  enumerator->_bs = 0LL;
}

NSUInteger NSCountHashTable(NSHashTable *table)
{
  if (!table) {
    NSLog((NSString *)@"%s: hash table argument is NULL", "NSUInteger NSCountHashTable(NSHashTable * _Nonnull)");
  }
  return -[NSHashTable count](table, "count");
}

NSString *__cdecl NSStringFromHashTable(NSHashTable *table)
{
  if (!table) {
    NSLog( (NSString *)@"%s: hash table argument is NULL",  "NSString * _Nonnull NSStringFromHashTable(NSHashTable * _Nonnull)");
  }
  return (NSString *)-[NSHashTable description](table, "description");
}

NSArray *__cdecl NSAllHashTableObjects(NSHashTable *table)
{
  if (!table) {
    NSLog( (NSString *)@"%s: hash table argument is NULL",  "NSArray * _Nonnull NSAllHashTableObjects(NSHashTable * _Nonnull)");
  }
  return -[NSHashTable allObjects](table, "allObjects");
}

void freePointerHT(int a1, void *a2)
{
}

uint64_t hashPointerStructHT(uint64_t a1, uint64_t a2)
{
  return *(void *)a2;
}

BOOL isEqualPointerStructHT(uint64_t a1, void *a2, void *a3)
{
  return *a2 == *a3;
}

uint64_t hashObjectHT(uint64_t a1, void *a2)
{
  return [a2 hash];
}

uint64_t isEqualObjectHT(uint64_t a1, void *a2, void *a3)
{
  if (a2 == a3) {
    return 1LL;
  }
  else {
    return objc_msgSend(a2, "isEqual:");
  }
}

uint64_t describeObjectHT(uint64_t a1, void *a2)
{
  return [a2 description];
}

void _NSLexiconIterateFormsOfWord(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v39 = *MEMORY[0x1895F89C0];
  char v38 = 0;
  (*(void (**)(uint64_t, void *, void *, char *))(a3 + 16))(a3, a1, &__block_literal_global_4, &v38);
  if (!v38)
  {
    uint64_t v32 = 0LL;
    char v33 = &v32;
    uint64_t v34 = 0x3052000000LL;
    double v35 = __Block_byref_object_copy__5;
    double v36 = __Block_byref_object_dispose__5;
    uint64_t v37 = 0LL;
    uint64_t v26 = 0LL;
    double v27 = &v26;
    uint64_t v28 = 0x3052000000LL;
    double v29 = __Block_byref_object_copy__5;
    double v30 = __Block_byref_object_dispose__5;
    uint64_t v31 = 0LL;
    v25[0] = 0LL;
    v25[1] = v25;
    v25[2] = 0x3052000000LL;
    v25[3] = __Block_byref_object_copy__5;
    v25[4] = __Block_byref_object_dispose__5;
    v25[5] = 0LL;
    uint64_t v6 = MEMORY[0x1895F87A8];
    v19[0] = MEMORY[0x1895F87A8];
    v19[1] = 3221225472LL;
    double v20 = ___NSLexiconIterateFormsOfWord_block_invoke_3;
    double v21 = &unk_189C9B238;
    uint64_t v23 = a2;
    double v24 = v25;
    double v22 = a1;
    uint64_t v7 = [a1 lowercaseStringWithLocale:a2];
    v33[5] = v7;
    if ([a1 isEqual:v7])
    {
      uint64_t v18 = v6;
      __int128 v8 = ___NSLexiconIterateFormsOfWord_block_invoke_4;
      unsigned int v9 = &v18;
    }

    else
    {
      uint64_t v10 = v27[5];
      if (!v10)
      {
        uint64_t v10 = [a1 uppercaseStringWithLocale:a2];
        v27[5] = v10;
      }

      if ([a1 isEqual:v10])
      {
        uint64_t v17 = v6;
        __int128 v8 = ___NSLexiconIterateFormsOfWord_block_invoke_5;
        unsigned int v9 = &v17;
      }

      else
      {
        if (![a1 isEqual:v20((uint64_t)v19)])
        {
LABEL_24:
          _Block_object_dispose(v25, 8);
          _Block_object_dispose(&v26, 8);
          _Block_object_dispose(&v32, 8);
          return;
        }

        uint64_t v16 = v6;
        __int128 v8 = ___NSLexiconIterateFormsOfWord_block_invoke_6;
        unsigned int v9 = &v16;
      }
    }

    v9[1] = 3221225472LL;
    _OWORD v9[2] = (uint64_t)v8;
    v9[3] = (uint64_t)&unk_189C9B260;
    void v9[4] = a2;
    uint64_t v11 = v33[5];
    if (!v11)
    {
      uint64_t v11 = [a1 lowercaseStringWithLocale:a2];
      v33[5] = v11;
    }

    if (objc_msgSend(a1, "isEqual:", v11, v16)) {
      goto LABEL_27;
    }
    if (!v33[5])
    {
      uint64_t v12 = [a1 lowercaseStringWithLocale:a2];
      v33[5] = v12;
    }

    (*(void (**)(uint64_t))(a3 + 16))(a3);
    if (!v38)
    {
LABEL_27:
      if (([a1 isEqual:v20((uint64_t)v19)] & 1) != 0
        || (uint64_t v13 = v20((uint64_t)v19),
            (*(void (**)(uint64_t, uint64_t, uint64_t *, char *))(a3 + 16))(a3, v13, v9, &v38),
            !v38))
      {
        uint64_t v14 = v27[5];
        if (!v14)
        {
          uint64_t v14 = [a1 uppercaseStringWithLocale:a2];
          v27[5] = v14;
        }

        if (([a1 isEqual:v14] & 1) == 0)
        {
          if (!v27[5])
          {
            uint64_t v15 = [a1 uppercaseStringWithLocale:a2];
            v27[5] = v15;
          }

          (*(void (**)(uint64_t))(a3 + 16))(a3);
        }
      }
    }

    goto LABEL_24;
  }

void sub_183581B58( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, char a31)
{
}

void __Block_byref_object_copy__5(uint64_t a1, uint64_t a2)
{
}

void __Block_byref_object_dispose__5(uint64_t a1)
{
}

void sub_183582D7C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
}

void sub_183582EDC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
}

NSIndexPath *_NSIndexPathCreateFromIndexes(uint64_t a1, uint64_t a2)
{
  v3[2] = *MEMORY[0x1895F89C0];
  v3[0] = a1;
  v3[1] = a2;
  return -[NSIndexPath initWithIndexes:length:]( objc_alloc(&OBJC_CLASS___NSIndexPath),  "initWithIndexes:length:",  v3,  2LL);
}

uint64_t _NSGetUnsignedInt2(void *a1)
{
  uint64_t v1 = (unsigned __int8 *)(*a1)++;
  int v2 = (char)*v1;
  uint64_t v3 = *v1;
  if (v2 < 0) {
    return (v3 - 128) + (_NSGetUnsignedInt2() << 7);
  }
  return v3;
}

BOOL _isEmpty(uint64_t a1)
{
  if (a1 < 0)
  {
    uint64_t v1 = *MEMORY[0x189616658];
    if ((~a1 & 0xC000000000000007LL) == 0) {
      uint64_t v1 = 0LL;
    }
    unint64_t v2 = v1 ^ a1;
    uint64_t v3 = 0xFFFFFFFFFFFFFFFLL;
    if ((~(_BYTE)v2 & 7) == 0) {
      uint64_t v3 = 0xFFFFFFFFFFFFFLL;
    }
    uint64_t v4 = v3 & (v2 >> 3);
  }

  else
  {
    int v5 = *(_DWORD *)(a1 + 8);
    if ((v5 & 2) != 0)
    {
      uint64_t v4 = *(void *)(a1 + 16);
    }

    else if ((v5 & 1) != 0)
    {
      uint64_t v4 = *(void *)(a1 + 24);
    }

    else
    {
      uint64_t v4 = *(void *)(*(void *)(a1 + 16) + 8LL);
    }
  }

  return v4 == 0;
}

id _NSGroupIndexesIntoSimpleRanges(uint64_t *a1, uint64_t a2)
{
  id v4 = objc_alloc_init(MEMORY[0x189603FA8]);
  if (a2)
  {
    uint64_t v5 = 0LL;
    uint64_t v6 = 0LL;
    do
    {
      uint64_t v8 = *a1++;
      uint64_t v7 = v8;
      if (v6 + v5 == v8)
      {
        ++v6;
      }

      else
      {
        if (v6) {
          objc_msgSend(v4, "addObject:", +[NSValue valueWithRange:](NSValue, "valueWithRange:"));
        }
        uint64_t v6 = 1LL;
        uint64_t v5 = v7;
      }

      --a2;
    }

    while (a2);
    if (v6) {
      objc_msgSend(v4, "addObject:", +[NSValue valueWithRange:](NSValue, "valueWithRange:", v5));
    }
  }

  return v4;
}

void sub_183589194( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
}

void sub_183589458( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
}

uint64_t _bitfieldSetRangesCount(uint64_t result)
{
  if (result)
  {
    unint64_t v1 = result;
    uint64_t v2 = ~result;
    uint64_t result = 1LL;
    unint64_t v3 = v1;
    while (1)
    {
      unint64_t v4 = (-1LL << __clz(__rbit64(v3))) & v2;
      if (!v4) {
        break;
      }
      ++result;
      unint64_t v3 = (-1LL << __clz(__rbit64(v4))) & v1;
      if (!v3) {
        return --result;
      }
    }
  }

  return result;
}

uint64_t __NSINDEXSET_IS_CALLING_OUT_TO_A_RANGE_BLOCK__(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 16))();
}

void sub_18358B1C4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
}

void __Block_byref_object_copy__6(uint64_t a1, uint64_t a2)
{
}

void __Block_byref_object_dispose__6(uint64_t a1)
{
}

void sub_18358B450( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  uint64_t v11 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

uint64_t __NSIndexSetChunkIterate( void *a1, uint64_t a2, unint64_t a3, unint64_t a4, unint64_t a5, uint64_t a6, uint64_t a7, unint64_t *a8)
{
  unint64_t v13 = a3;
  uint64_t v43 = *MEMORY[0x1895F89C0];
  if ((a2 & 0x2000000000000000LL) != 0)
  {
    unint64_t v16 = atomic_load(a8);
    if (v16 != 0x7FFFFFFFFFFFFFFFLL)
    {
      BOOL v17 = v16 >= a3;
      BOOL v18 = v16 <= a4;
      if ((a2 & 2) == 0) {
        BOOL v18 = v17;
      }
      if (!v18) {
        return 0LL;
      }
    }
  }

  if ((a2 & 0x4000000000000000LL) != 0)
  {
    _CFAutoreleasePoolPush();
    char v42 = 0;
    if (a4 >= v13)
    {
      unint64_t v28 = a5 + a6;
      do
      {
        unint64_t v29 = [a1 rangeAtIndex:v13];
        if (v29 + v30 >= v28) {
          uint64_t v31 = a5 + a6;
        }
        else {
          uint64_t v31 = v29 + v30;
        }
        if (a5 > v29 || v29 >= v28)
        {
          uint64_t v32 = v31 - a5;
          if (a5 >= v29 + v30) {
            uint64_t v32 = 0LL;
          }
          if (v29 <= a5) {
            uint64_t v33 = v32;
          }
          else {
            uint64_t v33 = 0LL;
          }
          if (!v33) {
            goto LABEL_43;
          }
        }

        else if (v31 == v29)
        {
          goto LABEL_43;
        }

        __NSINDEXSET_IS_CALLING_OUT_TO_A_RANGE_BLOCK__(a7);
LABEL_43:
        ++v13;
      }

      while (v13 <= a4);
    }

    return 0LL;
  }

  MEMORY[0x1895F8858](a1);
  double v20 = (char *)v39 - v19;
  v39[2] = v39;
  uint64_t v40 = a7;
  v39[1] = _CFAutoreleasePoolPush();
  if (a4 - v13 == -1LL) {
    return 0LL;
  }
  unint64_t v21 = 0LL;
  unint64_t v22 = a4;
  while (1)
  {
    unint64_t v23 = v22 - v13;
    if ((a2 & 2) == 0) {
      unint64_t v23 = v21;
    }
    if (!v20[v23]) {
      goto LABEL_25;
    }
    if ((a2 & 2) != 0) {
      unint64_t v24 = v22;
    }
    else {
      unint64_t v24 = v13 + v21;
    }
    char v41 = 0;
    if ((a2 & 0x2000000000000000LL) == 0)
    {
      __NSINDEXSET_IS_CALLING_OUT_TO_A_RANGE_BLOCK__(v40);
      if (v41) {
        goto LABEL_46;
      }
      goto LABEL_25;
    }

    if (v41)
    {
LABEL_46:
      uint64_t v34 = 1LL;
      goto LABEL_56;
    }

    unint64_t v25 = atomic_load(a8);
    if (v25 != 0x7FFFFFFFFFFFFFFFLL)
    {
      BOOL v26 = v25 >= v13;
      BOOL v27 = v25 <= a4;
      if ((a2 & 2) == 0) {
        BOOL v27 = v26;
      }
      if (!v27)
      {
        uint64_t v34 = 0LL;
        goto LABEL_56;
      }
    }

void sub_18358DFB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
}

void __Block_byref_object_copy__7(uint64_t a1, uint64_t a2)
{
}

void __Block_byref_object_dispose__7(uint64_t a1)
{
}

void sub_18358E160(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
}

void _NSPerformInflectionsWithObserverAndInflectionRule(void *a1, NSInflectionRule *a2, uint64_t a3)
{
  v9[5] = *MEMORY[0x1895F89C0];
  uint64_t v5 = _NSInflectionObserver;
  id v6 = a1;
  _NSInflectionObserver = (uint64_t)a1;
  if (!a2 || +[NSInflectionRule automaticRule](&OBJC_CLASS___NSInflectionRule, "automaticRule") == a2)
  {
    (*(void (**)(uint64_t))(a3 + 16))(a3);
  }

  else
  {
    uint64_t v7 = -[_NSAttributedStringGrammarInflection initWithInflectionRule:]( objc_alloc(&OBJC_CLASS____NSAttributedStringGrammarInflection),  "initWithInflectionRule:",  a2);
    v9[0] = MEMORY[0x1895F87A8];
    v9[1] = 3221225472LL;
    _OWORD v9[2] = ___NSPerformInflectionsWithObserverAndInflectionRule_block_invoke;
    v9[3] = &unk_189C9DCE8;
    void v9[4] = a3;
    -[_NSAttributedStringGrammarInflection _useInsteadOfUserInflectionInBlock:]( v7,  "_useInsteadOfUserInflectionInBlock:",  v9);
  }

  _NSInflectionObserver = v5;
}

void _NSInflect( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  uint64_t v41 = *MEMORY[0x1895F89C0];
  if (+[NSThread isMainThread](&OBJC_CLASS___NSThread, "isMainThread")) {
    uint64_t v22 = _NSInflectionObserver;
  }
  else {
    uint64_t v22 = 0LL;
  }
  uint64_t v35 = 0LL;
  BOOL v36 = &v35;
  uint64_t v37 = 0x3052000000LL;
  char v38 = __Block_byref_object_copy__7;
  uint64_t v39 = __Block_byref_object_dispose__7;
  uint64_t v40 = 0LL;
  v34[0] = MEMORY[0x1895F87A8];
  v34[1] = 3221225472LL;
  v34[2] = ___NSInflect_block_invoke;
  v34[3] = &unk_189C9DD10;
  v34[4] = &v35;
  id v23 = objc_alloc_init(MEMORY[0x189603FA8]);
  uint64_t v24 = (*(uint64_t (**)(uint64_t))(a5 + 16))(a5);
  v32[0] = MEMORY[0x1895F87A8];
  v32[1] = 3221225472LL;
  _OWORD v32[2] = ___NSInflect_block_invoke_2;
  v32[3] = &unk_189C9DDD8;
  char v33 = a6;
  v32[15] = a15;
  v32[16] = v24;
  v32[4] = a2;
  void v32[5] = v22;
  _OWORD v32[10] = a13;
  v32[11] = a12;
  _OWORD v32[6] = v23;
  v32[7] = a4;
  v32[8] = a3;
  v32[9] = a11;
  v32[12] = a10;
  v32[13] = v34;
  v32[14] = a14;
  (*(void (**)(uint64_t, void, uint64_t, void *))(a8 + 16))(a8, 0LL, v24, v32);
  uint64_t v25 = (*(uint64_t (**)(uint64_t))(a5 + 16))(a5);
  v31[0] = MEMORY[0x1895F87A8];
  v31[1] = 3221225472LL;
  void v31[2] = ___NSInflect_block_invoke_37;
  _OWORD v31[3] = &unk_189C9DE00;
  _OWORD v31[4] = v23;
  v31[5] = a2;
  v31[6] = a10;
  v31[7] = a17;
  v31[8] = a15;
  (*(void (**)(uint64_t, const __CFString *, void, uint64_t, void *))(a7 + 16))( a7,  @"NSInflectionAlternative",  0LL,  v25,  v31);
  uint64_t v26 = (*(uint64_t (**)(uint64_t))(a5 + 16))(a5);
  v30[0] = MEMORY[0x1895F87A8];
  v30[1] = 3221225472LL;
  void v30[2] = ___NSInflect_block_invoke_2_39;
  __int128 v30[3] = &unk_189C9DE28;
  _OWORD v30[4] = a1;
  uint64_t v30[5] = a12;
  v30[6] = a13;
  v30[7] = a16;
  v30[8] = a15;
  (*(void (**)(uint64_t, void, uint64_t, void *))(a9 + 16))(a9, 0LL, v26, v30);

  _Block_object_dispose(&v35, 8);
}

void sub_18358E678(_Unwind_Exception *a1)
{
}

void sub_1835907D4(_Unwind_Exception *a1)
{
}

NSString *_NSInflectionLanguageWithLensAndRange(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v3 = (NSString *)(*(uint64_t (**)(uint64_t, const __CFString *, uint64_t, uint64_t))(a1 + 16))( a1,  @"NSLanguage",  a2,  a3);
  char v4 = _NSIsNSString();
  if (!v3 || (v4 & 1) == 0)
  {
    unint64_t v3 = -[NSArray firstObject]( -[NSBundle preferredLocalizations]( +[NSBundle mainBundle](&OBJC_CLASS___NSBundle, "mainBundle"),  "preferredLocalizations"),  "firstObject");
    if (!v3)
    {
      unint64_t v3 = -[NSBundle developmentLocalization]( +[NSBundle mainBundle](&OBJC_CLASS___NSBundle, "mainBundle"),  "developmentLocalization");
      if (!v3) {
        __assert_rtn("_NSInflectionLanguageWithLensAndRange", "NSAttributedString_Inflection.m", 135, "language");
      }
    }
  }

  return v3;
}

uint64_t _NSInflectionGrammarWithLensAndRange(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = (*(uint64_t (**)(uint64_t, const __CFString *, uint64_t, uint64_t))(a1 + 16))( a1,  @"NSMorphology",  a2,  a3);
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {
    uint64_t v7 = (*(uint64_t (**)(uint64_t, const __CFString *, uint64_t, uint64_t))(a1 + 16))( a1,  @"NSGrammar",  a2,  a3);
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0) {
      return v7;
    }
    else {
      return 0LL;
    }
  }

  return v6;
}

void sub_183592224( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
}

void sub_183592498( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
}

void sub_183592C48( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
}

void __Block_byref_object_copy__8(uint64_t a1, uint64_t a2)
{
}

void __Block_byref_object_dispose__8(uint64_t a1)
{
}

void sub_183592F98( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  uint64_t v12 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Block_object_dispose((const void *)(v10 - 72), 8);
  _Unwind_Resume(a1);
}

void sub_1835932DC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
}

void sub_183593838( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, uint64_t a44, uint64_t a45, uint64_t a46, uint64_t a47, uint64_t a48, uint64_t a49, uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
}

uint64_t ___virtualizeURLKeysForAccessingFault_block_invoke(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t result = [a2 isEqualToString:*MEMORY[0x189603C60]];
  uint64_t v7 = (void *)*MEMORY[0x189604BF8];
  if ((_DWORD)result) {
    BOOL v8 = v7 == a2;
  }
  else {
    BOOL v8 = 1;
  }
  if (!v8)
  {
    unsigned int v9 = *(void **)(*(void *)(*(void *)(a1 + 40) + 8LL) + 40LL);
    if (!v9)
    {
      *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 40) = [*(id *)(a1 + 32) mutableCopy];
      unsigned int v9 = *(void **)(*(void *)(*(void *)(a1 + 40) + 8LL) + 40LL);
    }

    return [v9 replaceObjectAtIndex:a3 withObject:v7];
  }

  return result;
}

uint64_t _NSGetVoidValueWithMethod(void *a1, int a2, Method m)
{
  IMP Implementation = method_getImplementation(m);
  SEL Name = method_getName(m);
  Implementation(a1, Name);
  return 0LL;
}

id _NSGetBoolValueWithMethod(void *a1, uint64_t a2, objc_method *a3)
{
  id v5 = objc_allocWithZone((Class)&OBJC_CLASS___NSNumber);
  IMP Implementation = method_getImplementation(a3);
  SEL Name = method_getName(a3);
  return (id)objc_msgSend(v5, "initWithBool:", Implementation(a1, Name));
}

id _NSGetCharValueWithMethod(void *a1, uint64_t a2, objc_method *a3)
{
  id v5 = objc_allocWithZone((Class)&OBJC_CLASS___NSNumber);
  IMP Implementation = method_getImplementation(a3);
  SEL Name = method_getName(a3);
  return (id)objc_msgSend(v5, "initWithChar:", Implementation(a1, Name));
}

id _NSGetUnsignedCharValueWithMethod(void *a1, uint64_t a2, objc_method *a3)
{
  id v5 = objc_allocWithZone((Class)&OBJC_CLASS___NSNumber);
  IMP Implementation = method_getImplementation(a3);
  SEL Name = method_getName(a3);
  return (id)objc_msgSend(v5, "initWithUnsignedChar:", Implementation(a1, Name));
}

id _NSGetDoubleValueWithMethod(void *a1, uint64_t a2, objc_method *a3)
{
  id v5 = objc_allocWithZone((Class)&OBJC_CLASS___NSNumber);
  IMP Implementation = method_getImplementation(a3);
  SEL Name = method_getName(a3);
  Implementation(a1, Name);
  return (id)objc_msgSend(v5, "initWithDouble:");
}

id _NSGetFloatValueWithMethod(void *a1, uint64_t a2, objc_method *a3)
{
  id v5 = objc_allocWithZone((Class)&OBJC_CLASS___NSNumber);
  IMP Implementation = method_getImplementation(a3);
  SEL Name = method_getName(a3);
  Implementation(a1, Name);
  return (id)objc_msgSend(v5, "initWithFloat:");
}

id _NSGetIntValueWithMethod(void *a1, uint64_t a2, objc_method *a3)
{
  id v5 = objc_allocWithZone((Class)&OBJC_CLASS___NSNumber);
  IMP Implementation = method_getImplementation(a3);
  SEL Name = method_getName(a3);
  return (id)objc_msgSend(v5, "initWithInt:", Implementation(a1, Name));
}

id _NSGetUnsignedIntValueWithMethod(void *a1, uint64_t a2, objc_method *a3)
{
  id v5 = objc_allocWithZone((Class)&OBJC_CLASS___NSNumber);
  IMP Implementation = method_getImplementation(a3);
  SEL Name = method_getName(a3);
  return (id)objc_msgSend(v5, "initWithUnsignedInt:", Implementation(a1, Name));
}

id _NSGetLongValueWithMethod(void *a1, uint64_t a2, objc_method *a3)
{
  id v5 = objc_allocWithZone((Class)&OBJC_CLASS___NSNumber);
  IMP Implementation = method_getImplementation(a3);
  SEL Name = method_getName(a3);
  return (id)objc_msgSend(v5, "initWithLong:", Implementation(a1, Name));
}

id _NSGetUnsignedLongValueWithMethod(void *a1, uint64_t a2, objc_method *a3)
{
  id v5 = objc_allocWithZone((Class)&OBJC_CLASS___NSNumber);
  IMP Implementation = method_getImplementation(a3);
  SEL Name = method_getName(a3);
  return (id)objc_msgSend(v5, "initWithUnsignedLong:", Implementation(a1, Name));
}

id _NSGetLongLongValueWithMethod(void *a1, uint64_t a2, objc_method *a3)
{
  id v5 = objc_allocWithZone((Class)&OBJC_CLASS___NSNumber);
  IMP Implementation = method_getImplementation(a3);
  SEL Name = method_getName(a3);
  return (id)objc_msgSend(v5, "initWithLongLong:", Implementation(a1, Name));
}

id _NSGetUnsignedLongLongValueWithMethod(void *a1, uint64_t a2, objc_method *a3)
{
  id v5 = objc_allocWithZone((Class)&OBJC_CLASS___NSNumber);
  IMP Implementation = method_getImplementation(a3);
  SEL Name = method_getName(a3);
  return (id)objc_msgSend(v5, "initWithUnsignedLongLong:", Implementation(a1, Name));
}

id _NSGetShortValueWithMethod(void *a1, uint64_t a2, objc_method *a3)
{
  id v5 = objc_allocWithZone((Class)&OBJC_CLASS___NSNumber);
  IMP Implementation = method_getImplementation(a3);
  SEL Name = method_getName(a3);
  return (id)objc_msgSend(v5, "initWithShort:", Implementation(a1, Name));
}

id _NSGetUnsignedShortValueWithMethod(void *a1, uint64_t a2, objc_method *a3)
{
  id v5 = objc_allocWithZone((Class)&OBJC_CLASS___NSNumber);
  IMP Implementation = method_getImplementation(a3);
  SEL Name = method_getName(a3);
  return (id)objc_msgSend(v5, "initWithUnsignedShort:", Implementation(a1, Name));
}

NSValue *_NSGetPointValueWithMethod(void *a1, int a2, Method m)
{
  IMP Implementation = method_getImplementation(m);
  SEL Name = method_getName(m);
  Implementation(a1, Name);
  return +[NSValue valueWithPoint:](&OBJC_CLASS___NSValue, "valueWithPoint:");
}

NSValue *_NSGetRangeValueWithMethod(void *a1, int a2, Method m)
{
  IMP Implementation = method_getImplementation(m);
  SEL Name = method_getName(m);
  uint64_t v7 = (uint64_t)Implementation(a1, Name);
  return +[NSValue valueWithRange:](&OBJC_CLASS___NSValue, "valueWithRange:", v7, v8);
}

NSValue *_NSGetRectValueWithMethod(void *a1, int a2, Method m)
{
  IMP Implementation = method_getImplementation(m);
  SEL Name = method_getName(m);
  Implementation(a1, Name);
  return +[NSValue valueWithRect:](&OBJC_CLASS___NSValue, "valueWithRect:");
}

NSValue *_NSGetSizeValueWithMethod(void *a1, int a2, Method m)
{
  IMP Implementation = method_getImplementation(m);
  SEL Name = method_getName(m);
  Implementation(a1, Name);
  return +[NSValue valueWithSize:](&OBJC_CLASS___NSValue, "valueWithSize:");
}

NSValue *_NSGetValueWithMethod(void *a1, uint64_t a2)
{
  v11[1] = *MEMORY[0x1895F89C0];
  char v4 = (void *)[a1 methodSignatureForSelector:a2];
  id v5 = (void *)[MEMORY[0x189603F88] invocationWithMethodSignature:v4];
  [v5 setTarget:a1];
  [v5 setSelector:a2];
  [v5 invoke];
  uint64_t v6 = [v4 methodReturnLength];
  *(void *)&double v7 = MEMORY[0x1895F8858](v6).n128_u64[0];
  unsigned int v9 = (char *)v11 - v8;
  objc_msgSend(v5, "getReturnValue:", (char *)v11 - v8, v7);
  return +[NSValue valueWithBytes:objCType:]( NSValue,  "valueWithBytes:objCType:",  v9,  [v4 methodReturnType]);
}

id _NSGetObjectGetWeakValueInIvar(uint64_t a1, int a2, Ivar v)
{
  unint64_t v3 = (id *)(a1 + ivar_getOffset(v));
  return objc_loadWeak(v3);
}

uint64_t _NSGetObjectGetAssignValueInIvar(uint64_t a1, int a2, Ivar v)
{
  return *(void *)(a1 + ivar_getOffset(v));
}

id _NSGetObjectGetIvarValueInIvar(void *a1, int a2, Ivar a3)
{
  return object_getIvar(a1, a3);
}

id _NSGetBoolValueInIvar(uint64_t a1, uint64_t a2, objc_ivar *a3)
{
  return (id)[objc_allocWithZone((Class)NSNumber) initWithBool:*(unsigned __int8 *)(a1 + ivar_getOffset(a3))];
}

id _NSGetCharValueInIvar(uint64_t a1, uint64_t a2, objc_ivar *a3)
{
  return (id)[objc_allocWithZone((Class)NSNumber) initWithChar:*(char *)(a1 + ivar_getOffset(a3))];
}

id _NSGetUnsignedCharValueInIvar(uint64_t a1, uint64_t a2, objc_ivar *a3)
{
  return (id)[objc_allocWithZone((Class)NSNumber) initWithUnsignedChar:*(unsigned __int8 *)(a1 + ivar_getOffset(a3))];
}

id _NSGetDoubleValueInIvar(uint64_t a1, uint64_t a2, objc_ivar *a3)
{
  return (id)[objc_allocWithZone((Class)NSNumber) initWithDouble:*(double *)(a1 + ivar_getOffset(a3))];
}

id _NSGetFloatValueInIvar(uint64_t a1, uint64_t a2, objc_ivar *a3)
{
  id v5 = objc_allocWithZone((Class)&OBJC_CLASS___NSNumber);
  LODWORD(v6) = *(_DWORD *)(a1 + ivar_getOffset(a3));
  return (id)[v5 initWithFloat:v6];
}

id _NSGetIntValueInIvar(uint64_t a1, uint64_t a2, objc_ivar *a3)
{
  return (id)[objc_allocWithZone((Class)NSNumber) initWithInt:*(unsigned int *)(a1 + ivar_getOffset(a3))];
}

id _NSGetUnsignedIntValueInIvar(uint64_t a1, uint64_t a2, objc_ivar *a3)
{
  return (id)[objc_allocWithZone((Class)NSNumber) initWithUnsignedInt:*(unsigned int *)(a1 + ivar_getOffset(a3))];
}

id _NSGetLongValueInIvar(uint64_t a1, uint64_t a2, objc_ivar *a3)
{
  return (id)[objc_allocWithZone((Class)NSNumber) initWithLong:*(void *)(a1 + ivar_getOffset(a3))];
}

id _NSGetUnsignedLongValueInIvar(uint64_t a1, uint64_t a2, objc_ivar *a3)
{
  return (id)[objc_allocWithZone((Class)NSNumber) initWithUnsignedLong:*(void *)(a1 + ivar_getOffset(a3))];
}

id _NSGetLongLongValueInIvar(uint64_t a1, uint64_t a2, objc_ivar *a3)
{
  return (id)[objc_allocWithZone((Class)NSNumber) initWithLongLong:*(void *)(a1 + ivar_getOffset(a3))];
}

id _NSGetUnsignedLongLongValueInIvar(uint64_t a1, uint64_t a2, objc_ivar *a3)
{
  return (id)[objc_allocWithZone((Class)NSNumber) initWithUnsignedLongLong:*(void *)(a1 + ivar_getOffset(a3))];
}

id _NSGetShortValueInIvar(uint64_t a1, uint64_t a2, objc_ivar *a3)
{
  return (id)[objc_allocWithZone((Class)NSNumber) initWithShort:*(__int16 *)(a1 + ivar_getOffset(a3))];
}

id _NSGetUnsignedShortValueInIvar(uint64_t a1, uint64_t a2, objc_ivar *a3)
{
  return (id)[objc_allocWithZone((Class)NSNumber) initWithUnsignedShort:*(unsigned __int16 *)(a1 + ivar_getOffset(a3))];
}

NSValue *_NSGetPointValueInIvar(uint64_t a1, int a2, Ivar v)
{
  ptrdiff_t Offset = ivar_getOffset(v);
  return +[NSValue valueWithPoint:]( &OBJC_CLASS___NSValue,  "valueWithPoint:",  *(double *)(a1 + Offset),  *(double *)(a1 + Offset + 8));
}

NSValue *_NSGetRangeValueInIvar(uint64_t a1, int a2, Ivar v)
{
  ptrdiff_t Offset = ivar_getOffset(v);
  return +[NSValue valueWithRange:]( &OBJC_CLASS___NSValue,  "valueWithRange:",  *(void *)(a1 + Offset),  *(void *)(a1 + Offset + 8));
}

NSValue *_NSGetRectValueInIvar(uint64_t a1, int a2, Ivar v)
{
  ptrdiff_t Offset = ivar_getOffset(v);
  return +[NSValue valueWithRect:]( &OBJC_CLASS___NSValue,  "valueWithRect:",  *(double *)(a1 + Offset),  *(double *)(a1 + Offset + 8),  *(double *)(a1 + Offset + 16),  *(double *)(a1 + Offset + 24));
}

NSValue *_NSGetSizeValueInIvar(uint64_t a1, int a2, Ivar v)
{
  ptrdiff_t Offset = ivar_getOffset(v);
  return +[NSValue valueWithSize:]( &OBJC_CLASS___NSValue,  "valueWithSize:",  *(double *)(a1 + Offset),  *(double *)(a1 + Offset + 8));
}

NSValue *_NSGetValueInIvar(uint64_t a1, int a2, Ivar v)
{
  v14[1] = *MEMORY[0x1895F89C0];
  TypeEncoding = ivar_getTypeEncoding(v);
  size_t v6 = strlen(TypeEncoding);
  MEMORY[0x1895F8858](v6);
  uint64_t v8 = (char *)v14 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = 0LL;
  if (v7)
  {
    char v10 = 0;
    do
    {
      int v12 = *(unsigned __int8 *)TypeEncoding++;
      char v11 = v12;
      if (v12 == 34)
      {
        v10 ^= 1u;
      }

      else if ((v10 & 1) != 0)
      {
        char v10 = 1;
      }

      else
      {
        char v10 = 0;
        v8[v9++] = v11;
      }

      --v7;
    }

    while (v7);
  }

  v8[v9] = 0;
  return +[NSValue valueWithBytes:objCType:]( &OBJC_CLASS___NSValue,  "valueWithBytes:objCType:",  a1 + ivar_getOffset(v),  v8);
}

uint64_t _NSSetBoolValueForKeyWithMethod(void *a1, int a2, void *a3, uint64_t a4, Method m)
{
  if (!a3) {
    return [a1 setNilValueForKey:a4];
  }
  IMP Implementation = method_getImplementation(m);
  SEL Name = method_getName(m);
  return (uint64_t)Implementation(a1, Name, [a3 BOOLValue]);
}

uint64_t _NSSetCharValueForKeyWithMethod(void *a1, int a2, void *a3, uint64_t a4, Method m)
{
  if (!a3) {
    return [a1 setNilValueForKey:a4];
  }
  IMP Implementation = method_getImplementation(m);
  SEL Name = method_getName(m);
  return (uint64_t)Implementation(a1, Name, [a3 charValue]);
}

uint64_t _NSSetUnsignedCharValueForKeyWithMethod(void *a1, int a2, void *a3, uint64_t a4, Method m)
{
  if (!a3) {
    return [a1 setNilValueForKey:a4];
  }
  IMP Implementation = method_getImplementation(m);
  SEL Name = method_getName(m);
  return (uint64_t)Implementation(a1, Name, [a3 unsignedCharValue]);
}

uint64_t _NSSetDoubleValueForKeyWithMethod(void *a1, int a2, void *a3, uint64_t a4, Method m)
{
  if (!a3) {
    return [a1 setNilValueForKey:a4];
  }
  IMP Implementation = method_getImplementation(m);
  SEL Name = method_getName(m);
  [a3 doubleValue];
  return (uint64_t)Implementation(a1, Name);
}

uint64_t _NSSetFloatValueForKeyWithMethod(void *a1, int a2, void *a3, uint64_t a4, Method m)
{
  if (!a3) {
    return [a1 setNilValueForKey:a4];
  }
  IMP Implementation = method_getImplementation(m);
  SEL Name = method_getName(m);
  [a3 floatValue];
  return (uint64_t)Implementation(a1, Name);
}

uint64_t _NSSetIntValueForKeyWithMethod(void *a1, int a2, void *a3, uint64_t a4, Method m)
{
  if (!a3) {
    return [a1 setNilValueForKey:a4];
  }
  IMP Implementation = method_getImplementation(m);
  SEL Name = method_getName(m);
  return (uint64_t)Implementation(a1, Name, [a3 intValue]);
}

uint64_t _NSSetUnsignedIntValueForKeyWithMethod(void *a1, int a2, void *a3, uint64_t a4, Method m)
{
  if (!a3) {
    return [a1 setNilValueForKey:a4];
  }
  IMP Implementation = method_getImplementation(m);
  SEL Name = method_getName(m);
  return (uint64_t)Implementation(a1, Name, [a3 unsignedIntValue]);
}

uint64_t _NSSetLongValueForKeyWithMethod(void *a1, int a2, void *a3, uint64_t a4, Method m)
{
  if (!a3) {
    return [a1 setNilValueForKey:a4];
  }
  IMP Implementation = method_getImplementation(m);
  SEL Name = method_getName(m);
  return (uint64_t)Implementation(a1, Name, [a3 longValue]);
}

uint64_t _NSSetUnsignedLongValueForKeyWithMethod(void *a1, int a2, void *a3, uint64_t a4, Method m)
{
  if (!a3) {
    return [a1 setNilValueForKey:a4];
  }
  IMP Implementation = method_getImplementation(m);
  SEL Name = method_getName(m);
  return (uint64_t)Implementation(a1, Name, [a3 unsignedLongValue]);
}

uint64_t _NSSetLongLongValueForKeyWithMethod(void *a1, int a2, void *a3, uint64_t a4, Method m)
{
  if (!a3) {
    return [a1 setNilValueForKey:a4];
  }
  IMP Implementation = method_getImplementation(m);
  SEL Name = method_getName(m);
  return (uint64_t)Implementation(a1, Name, [a3 longLongValue]);
}

uint64_t _NSSetUnsignedLongLongValueForKeyWithMethod(void *a1, int a2, void *a3, uint64_t a4, Method m)
{
  if (!a3) {
    return [a1 setNilValueForKey:a4];
  }
  IMP Implementation = method_getImplementation(m);
  SEL Name = method_getName(m);
  return (uint64_t)Implementation(a1, Name, [a3 unsignedLongLongValue]);
}

uint64_t _NSSetShortValueForKeyWithMethod(void *a1, int a2, void *a3, uint64_t a4, Method m)
{
  if (!a3) {
    return [a1 setNilValueForKey:a4];
  }
  IMP Implementation = method_getImplementation(m);
  SEL Name = method_getName(m);
  return (uint64_t)Implementation(a1, Name, [a3 shortValue]);
}

uint64_t _NSSetUnsignedShortValueForKeyWithMethod(void *a1, int a2, void *a3, uint64_t a4, Method m)
{
  if (!a3) {
    return [a1 setNilValueForKey:a4];
  }
  IMP Implementation = method_getImplementation(m);
  SEL Name = method_getName(m);
  return (uint64_t)Implementation(a1, Name, [a3 unsignedShortValue]);
}

uint64_t _NSSetPointValueForKeyWithMethod(void *a1, int a2, void *a3, uint64_t a4, Method m)
{
  if (!a3) {
    return [a1 setNilValueForKey:a4];
  }
  IMP Implementation = method_getImplementation(m);
  SEL Name = method_getName(m);
  [a3 pointValue];
  return (uint64_t)Implementation(a1, Name);
}

uint64_t _NSSetRangeValueForKeyWithMethod(void *a1, int a2, void *a3, uint64_t a4, Method m)
{
  if (!a3) {
    return [a1 setNilValueForKey:a4];
  }
  IMP Implementation = method_getImplementation(m);
  SEL Name = method_getName(m);
  uint64_t v9 = [a3 rangeValue];
  return (uint64_t)Implementation(a1, Name, v9, v10);
}

uint64_t _NSSetRectValueForKeyWithMethod(void *a1, int a2, void *a3, uint64_t a4, Method m)
{
  if (!a3) {
    return [a1 setNilValueForKey:a4];
  }
  IMP Implementation = method_getImplementation(m);
  SEL Name = method_getName(m);
  [a3 rectValue];
  return (uint64_t)Implementation(a1, Name);
}

uint64_t _NSSetSizeValueForKeyWithMethod(void *a1, int a2, void *a3, uint64_t a4, Method m)
{
  if (!a3) {
    return [a1 setNilValueForKey:a4];
  }
  IMP Implementation = method_getImplementation(m);
  SEL Name = method_getName(m);
  [a3 sizeValue];
  return (uint64_t)Implementation(a1, Name);
}

uint64_t _NSSetValueWithMethod(void *a1, uint64_t a2, void *a3, uint64_t a4)
{
  v14[1] = *MEMORY[0x1895F89C0];
  if (!a3) {
    return [a1 setNilValueForKey:a4];
  }
  uint64_t v7 = (void *)[a1 methodSignatureForSelector:a2];
  uint64_t v8 = [v7 frameLength];
  *(void *)&double v9 = MEMORY[0x1895F8858](v8).n128_u64[0];
  char v11 = (char *)v14 - v10;
  objc_msgSend(a3, "getValue:", (char *)v14 - v10, v9);
  int v12 = (void *)[MEMORY[0x189603F88] invocationWithMethodSignature:v7];
  [v12 setTarget:a1];
  [v12 setSelector:a2];
  [v12 setArgument:v11 atIndex:2];
  return [v12 invoke];
}

id _NSSetObjectSetManualValueForKeyInIvar(uint64_t a1, int a2, void *a3, int a4, Ivar v)
{
  ptrdiff_t Offset = ivar_getOffset(v);
  id v8 = *(id *)(a1 + Offset);
  id result = a3;
  *(void *)(a1 + Offset) = result;
  return result;
}

id _NSSetObjectSetWeakValueForKeyInIvar(uint64_t a1, int a2, void *a3, int a4, Ivar v)
{
  size_t v6 = (id *)(a1 + ivar_getOffset(v));
  return objc_storeWeak(v6, a3);
}

void _NSSetObjectSetStrongValueForKeyInIvar(uint64_t a1, int a2, void *a3, int a4, Ivar v)
{
  size_t v6 = (id *)(a1 + ivar_getOffset(v));
  objc_storeStrong(v6, a3);
}

ptrdiff_t _NSSetObjectSetAssignValueForKeyInIvar(uint64_t a1, int a2, uint64_t a3, int a4, Ivar v)
{
  ptrdiff_t result = ivar_getOffset(v);
  *(void *)(a1 + result) = a3;
  return result;
}

void _NSSetObjectSetIvarValueForKeyInIvar(void *a1, int a2, void *a3, int a4, Ivar ivar)
{
}

ptrdiff_t _NSSetBoolValueForKeyInIvar(void *a1, uint64_t a2, void *a3, uint64_t a4, objc_ivar *a5)
{
  if (!a3) {
    return [a1 setNilValueForKey:a4];
  }
  char v7 = [a3 BOOLValue];
  ptrdiff_t result = ivar_getOffset(a5);
  *((_BYTE *)a1 + result) = v7;
  return result;
}

ptrdiff_t _NSSetCharValueForKeyInIvar(void *a1, uint64_t a2, void *a3, uint64_t a4, objc_ivar *a5)
{
  if (!a3) {
    return [a1 setNilValueForKey:a4];
  }
  char v7 = [a3 charValue];
  ptrdiff_t result = ivar_getOffset(a5);
  *((_BYTE *)a1 + result) = v7;
  return result;
}

ptrdiff_t _NSSetUnsignedCharValueForKeyInIvar(void *a1, uint64_t a2, void *a3, uint64_t a4, objc_ivar *a5)
{
  if (!a3) {
    return [a1 setNilValueForKey:a4];
  }
  char v7 = [a3 unsignedCharValue];
  ptrdiff_t result = ivar_getOffset(a5);
  *((_BYTE *)a1 + result) = v7;
  return result;
}

ptrdiff_t _NSSetDoubleValueForKeyInIvar(char *a1, uint64_t a2, void *a3, uint64_t a4, objc_ivar *a5)
{
  if (!a3) {
    return [a1 setNilValueForKey:a4];
  }
  [a3 doubleValue];
  uint64_t v8 = v7;
  ptrdiff_t result = ivar_getOffset(a5);
  *(void *)&a1[result] = v8;
  return result;
}

ptrdiff_t _NSSetFloatValueForKeyInIvar(char *a1, uint64_t a2, void *a3, uint64_t a4, objc_ivar *a5)
{
  if (!a3) {
    return [a1 setNilValueForKey:a4];
  }
  [a3 floatValue];
  int v8 = v7;
  ptrdiff_t result = ivar_getOffset(a5);
  *(_DWORD *)&a1[result] = v8;
  return result;
}

ptrdiff_t _NSSetIntValueForKeyInIvar(char *a1, uint64_t a2, void *a3, uint64_t a4, objc_ivar *a5)
{
  if (!a3) {
    return [a1 setNilValueForKey:a4];
  }
  int v7 = [a3 intValue];
  ptrdiff_t result = ivar_getOffset(a5);
  *(_DWORD *)&a1[result] = v7;
  return result;
}

ptrdiff_t _NSSetUnsignedIntValueForKeyInIvar(char *a1, uint64_t a2, void *a3, uint64_t a4, objc_ivar *a5)
{
  if (!a3) {
    return [a1 setNilValueForKey:a4];
  }
  int v7 = [a3 unsignedIntValue];
  ptrdiff_t result = ivar_getOffset(a5);
  *(_DWORD *)&a1[result] = v7;
  return result;
}

ptrdiff_t _NSSetLongValueForKeyInIvar(char *a1, uint64_t a2, void *a3, uint64_t a4, objc_ivar *a5)
{
  if (!a3) {
    return [a1 setNilValueForKey:a4];
  }
  uint64_t v7 = [a3 longValue];
  ptrdiff_t result = ivar_getOffset(a5);
  *(void *)&a1[result] = v7;
  return result;
}

ptrdiff_t _NSSetUnsignedLongValueForKeyInIvar(char *a1, uint64_t a2, void *a3, uint64_t a4, objc_ivar *a5)
{
  if (!a3) {
    return [a1 setNilValueForKey:a4];
  }
  uint64_t v7 = [a3 unsignedLongValue];
  ptrdiff_t result = ivar_getOffset(a5);
  *(void *)&a1[result] = v7;
  return result;
}

ptrdiff_t _NSSetLongLongValueForKeyInIvar(char *a1, uint64_t a2, void *a3, uint64_t a4, objc_ivar *a5)
{
  if (!a3) {
    return [a1 setNilValueForKey:a4];
  }
  uint64_t v7 = [a3 longLongValue];
  ptrdiff_t result = ivar_getOffset(a5);
  *(void *)&a1[result] = v7;
  return result;
}

ptrdiff_t _NSSetUnsignedLongLongValueForKeyInIvar(char *a1, uint64_t a2, void *a3, uint64_t a4, objc_ivar *a5)
{
  if (!a3) {
    return [a1 setNilValueForKey:a4];
  }
  uint64_t v7 = [a3 unsignedLongLongValue];
  ptrdiff_t result = ivar_getOffset(a5);
  *(void *)&a1[result] = v7;
  return result;
}

ptrdiff_t _NSSetShortValueForKeyInIvar(char *a1, uint64_t a2, void *a3, uint64_t a4, objc_ivar *a5)
{
  if (!a3) {
    return [a1 setNilValueForKey:a4];
  }
  __int16 v7 = [a3 shortValue];
  ptrdiff_t result = ivar_getOffset(a5);
  *(_WORD *)&a1[result] = v7;
  return result;
}

ptrdiff_t _NSSetUnsignedShortValueForKeyInIvar(char *a1, uint64_t a2, void *a3, uint64_t a4, objc_ivar *a5)
{
  if (!a3) {
    return [a1 setNilValueForKey:a4];
  }
  __int16 v7 = [a3 unsignedShortValue];
  ptrdiff_t result = ivar_getOffset(a5);
  *(_WORD *)&a1[result] = v7;
  return result;
}

uint64_t _NSSetPointValueForKeyInIvar(char *a1, int a2, void *a3, uint64_t a4, Ivar v)
{
  if (!a3) {
    return [a1 setNilValueForKey:a4];
  }
  size_t v6 = &a1[ivar_getOffset(v)];
  uint64_t result = [a3 pointValue];
  *(void *)size_t v6 = v8;
  *((void *)v6 + 1) = v9;
  return result;
}

uint64_t _NSSetRangeValueForKeyInIvar(char *a1, int a2, void *a3, uint64_t a4, Ivar v)
{
  if (!a3) {
    return [a1 setNilValueForKey:a4];
  }
  size_t v6 = &a1[ivar_getOffset(v)];
  uint64_t result = [a3 rangeValue];
  *(void *)size_t v6 = result;
  *((void *)v6 + 1) = v8;
  return result;
}

uint64_t _NSSetRectValueForKeyInIvar(char *a1, int a2, void *a3, uint64_t a4, Ivar v)
{
  if (!a3) {
    return [a1 setNilValueForKey:a4];
  }
  size_t v6 = &a1[ivar_getOffset(v)];
  uint64_t result = [a3 rectValue];
  *(void *)size_t v6 = v8;
  *((void *)v6 + 1) = v9;
  *((void *)v6 + 2) = v10;
  *((void *)v6 + 3) = v11;
  return result;
}

uint64_t _NSSetSizeValueForKeyInIvar(char *a1, int a2, void *a3, uint64_t a4, Ivar v)
{
  if (!a3) {
    return [a1 setNilValueForKey:a4];
  }
  size_t v6 = &a1[ivar_getOffset(v)];
  uint64_t result = [a3 sizeValue];
  *(void *)size_t v6 = v8;
  *((void *)v6 + 1) = v9;
  return result;
}

uint64_t _NSSetValueInIvar(char *a1, int a2, void *a3, uint64_t a4, Ivar v)
{
  if (a3) {
    return [a3 getValue:&a1[ivar_getOffset(v)]];
  }
  else {
    return [a1 setNilValueForKey:a4];
  }
}

void *_NSXPCSerializationAddInvocationWithOnlyObjectArgumentsArray( SEL *a1, uint64_t a2, void *a3, void *a4)
{
  {
    if ((objc_opt_isKindOfClass() & 1) != 0) {
      _NSXPCSerializationAddNull((uint64_t)a4);
    }
    else {
      _NSXPCSerializationAddTypedObjCValuesToArray(a3, (uint64_t)a4, "@", a1);
    }
    ++a1;
  }

  return _NSXPCSerializationEndArrayWrite(a4);
}

void _xpc_walkDataStructure( void *a1, uint64_t a2, void *a3, char *typePtr, uint64_t a5, uint64_t a6, uint64_t a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, unint64_t *a12)
{
  sizep[1] = *MEMORY[0x1895F89C0];
  int v16 = *typePtr;
  if (v16 == 123)
  {
    unint64_t v28 = typePtr + 1;
    for (uint64_t i = typePtr + 2; ; ++i)
    {
      int v30 = *(i - 1);
      if (v30 > 60)
      {
        if (v30 == 125) {
          goto LABEL_28;
        }
        if (v30 == 61)
        {
          unint64_t v28 = i;
LABEL_28:
          int v31 = *v28;
          if (!*v28)
          {
LABEL_41:
            char v38 = @"decodeDataAt:ofObjCType:";
            if (a8) {
              char v38 = @"encodeDataAt:ofObjCType:";
            }
            uint64_t v39 = +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"%@ badly formed structure description (%s)",  v38,  a5);
            goto LABEL_44;
          }

          NSUInteger v32 = 0LL;
          int v33 = 1;
          while (2)
          {
            if (v31 == 125) {
              return;
            }
            if (!v31) {
              goto LABEL_41;
            }
            uint64_t v34 = NSGetSizeAndAlignment(v28, sizep, &alignp);
            if (alignp)
            {
              NSUInteger v35 = (v32 + alignp - 1) / alignp * alignp;
              if (a8) {
                goto LABEL_34;
              }
LABEL_36:
              if (!v33)
              {
                _getLastByteOfValueIncludingMarker(a3, *a12, a12);
                uint64_t v36 = *a12 == -1LL;
                uint64_t v37 = v36 << 63 >> 63;
                ++*a12;
                if (v37 != v36 || v37 < 0)
                {
                  uint64_t v41 = (void *)MEMORY[0x189603F70];
                  char v42 = @"NSInvalidUnarchiveOperationException";
                  uint64_t v40 = @"Unexpected EoF while decoding struct";
                  goto LABEL_47;
                }
              }

              _NSXPCSerializationDecodeTypedObjCValuesFromArray(a1, a3, v28, a6 + v35, a7 - v35, 0LL, a11, a12, a9, a10);
              int v33 = 0;
            }

            else
            {
              NSUInteger v35 = 0LL;
              if (!a8) {
                goto LABEL_36;
              }
LABEL_34:
              _NSXPCSerializationAddTypedObjCValuesToArray(a1, a2, v28, (SEL *)(a6 + v35));
            }

            NSUInteger v32 = sizep[0] + v35;
            int v31 = *(unsigned __int8 *)v34;
            unint64_t v28 = (char *)v34;
            continue;
          }
        }
      }

      else if (!*(i - 1) || v30 == 41)
      {
        goto LABEL_28;
      }
    }
  }

  if (v16 == 91)
  {
    BOOL v18 = typePtr + 1;
    unsigned int v17 = typePtr[1];
    if (v17 - 48 > 9)
    {
      id v23 = NSGetSizeAndAlignment(typePtr + 1, sizep, &alignp);
    }

    else
    {
      uint64_t v19 = 0LL;
      do
      {
        uint64_t v20 = v19;
        unsigned int v21 = v17;
        uint64_t v19 = 10 * v19 + v17 - 48;
        unsigned int v22 = *++v18;
        unsigned int v17 = v22;
      }

      while (v22 - 48 < 0xA);
      id v23 = NSGetSizeAndAlignment(v18, sizep, &alignp);
      if (v19)
      {
        double v44 = v23;
        uint64_t v24 = 0LL;
        uint64_t v25 = 10 * v20 + v21 - 48;
        do
        {
          if (a8)
          {
            _NSXPCSerializationAddTypedObjCValuesToArray(a1, a2, v18, (SEL *)(a6 + sizep[0] * v24));
          }

          else
          {
            if (v24)
            {
              _getLastByteOfValueIncludingMarker(a3, *a12, a12);
              uint64_t v26 = *a12 == -1LL;
              uint64_t v27 = v26 << 63 >> 63;
              ++*a12;
              if (v27 != v26 || v27 < 0)
              {
                uint64_t v41 = (void *)MEMORY[0x189603F70];
                char v42 = @"NSInvalidUnarchiveOperationException";
                uint64_t v40 = @"Unexpected EoF while decoding array";
LABEL_47:
                objc_exception_throw((id)[v41 exceptionWithName:v42 reason:v40 userInfo:0]);
              }
            }

            _NSXPCSerializationDecodeTypedObjCValuesFromArray( a1,  a3,  v18,  a6 + sizep[0] * v24,  a7 - sizep[0] * v24,  0LL,  a11,  a12,  a9,  a10);
          }

          ++v24;
        }

        while (v25 != v24);
        id v23 = v44;
      }
    }

    if (*v23 != 93)
    {
      uint64_t v43 = @"decodeDataAt:ofObjCType:";
      if (a8) {
        uint64_t v43 = @"encodeDataAt:ofObjCType:";
      }
      uint64_t v39 = +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"%@ badly formed array description (%s)",  v43,  a5);
LABEL_44:
      uint64_t v40 = (const __CFString *)v39;
      uint64_t v41 = (void *)MEMORY[0x189603F70];
      char v42 = (const __CFString *)*MEMORY[0x189603A48];
      goto LABEL_47;
    }
  }

Method NSKeyValueMethodForPattern(objc_class *a1, char *__format, ...)
{
  v10[1] = *MEMORY[0x1895F89C0];
  va_copy((va_list)v10, va);
  uint64_t v4 = vsnprintf(0LL, 0LL, __format, va);
  size_t v5 = (int)v4 + 1;
  if ((v4 + 1) < 0x81)
  {
    if ((_DWORD)v4 == -1)
    {
      size_t v6 = 0LL;
    }

    else
    {
      MEMORY[0x1895F8858](v4);
      size_t v6 = (char *)v10 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
    }
  }

  else
  {
    size_t v6 = (char *)malloc((int)v4 + 1);
  }

  va_copy((va_list)v10, va);
  vsnprintf(v6, v5, __format, va);
  __int16 v7 = NSResolvedSelectorForName(a1, v6);
  if (v7) {
    Method InstanceMethod = class_getInstanceMethod(a1, v7);
  }
  else {
    Method InstanceMethod = 0LL;
  }
  return InstanceMethod;
}

void sub_183598CF8(_Unwind_Exception *exception_object)
{
}

uint64_t _NSSetUsingKeyValueSetter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(a2 + 48);
  if (v3 == 2) {
    return (*(uint64_t (**)(uint64_t, void, uint64_t, void, void))(a2 + 32))( a1,  *(void *)(a2 + 40),  a3,  *(void *)(a2 + 56),  *(void *)(a2 + 64));
  }
  if (v3 == 1) {
    return (*(uint64_t (**)(uint64_t, void, uint64_t, void))(a2 + 32))( a1,  *(void *)(a2 + 40),  a3,  *(void *)(a2 + 56));
  }
  if (v3) {
    return (*(uint64_t (**)(uint64_t, void, uint64_t, void, void, void))(a2 + 32))( a1,  *(void *)(a2 + 40),  a3,  *(void *)(a2 + 56),  *(void *)(a2 + 64),  *(void *)(a2 + 72));
  }
  return (*(uint64_t (**)(uint64_t, void))(a2 + 32))(a1, *(void *)(a2 + 40));
}

void sub_183599044(_Unwind_Exception *exception_object)
{
}

void sub_1835991C4(_Unwind_Exception *exception_object)
{
}

void sub_183599344(_Unwind_Exception *exception_object)
{
}

void sub_18359A7BC(_Unwind_Exception *exception_object)
{
}

void sub_18359B488(_Unwind_Exception *exception_object)
{
}

Ivar NSKeyValueIvarForPattern(objc_class *a1, char *__format, ...)
{
  v9[1] = *MEMORY[0x1895F89C0];
  uint64_t v4 = vsnprintf(0LL, 0LL, __format, va);
  MEMORY[0x1895F8858](v4);
  size_t v6 = (char *)v9 - v5;
  va_copy((va_list)v9, va);
  vsnprintf((char *)v9 - v5, v7, __format, va);
  return class_getInstanceVariable(a1, v6);
}

id _NSKeyValueGetterForClassAndKey( const void *(__cdecl *a1)(CFAllocatorRef, const void *), void (__cdecl *a2)(CFAllocatorRef, const void *), void *a3)
{
  uint64_t v12 = *MEMORY[0x1895F89C0];
  os_unfair_lock_lock((os_unfair_lock_t)&NSKeyValueCachedAccessorLock);
  size_t v6 = (const __CFSet *)_MergedGlobals_98;
  if (!_MergedGlobals_98)
  {
    __int128 v7 = *(_OWORD *)(MEMORY[0x189605258] + 16LL);
    *(_OWORD *)&v11.version = *MEMORY[0x189605258];
    *(_OWORD *)&v11.release = v7;
    v11.equal = (CFSetEqualCallBack)NSKeyValueAccessorIsEqual;
    v11.hash = (CFSetHashCallBack)NSKeyValueAccessorHash;
    size_t v6 = CFSetCreateMutable(0LL, 0LL, &v11);
    _MergedGlobals_98 = (uint64_t)v6;
  }

  v11.version = 0LL;
  v11.retain = a1;
  v11.release = a2;
  if (a2)
  {
    CFHashCode v8 = CFHash(a2);
    size_t v6 = (const __CFSet *)_MergedGlobals_98;
  }

  else
  {
    CFHashCode v8 = 0LL;
  }

  v11.copyDescription = (CFSetCopyDescriptionCallBack)(v8 ^ (unint64_t)a1);
  id Value = (id)CFSetGetValue(v6, &v11);
  if (!Value)
  {
    id Value = objc_msgSend( a3,  sel__createValueGetterWithContainerClassID_key_,  a1,  a2,  *(_OWORD *)&v11.version,  v11.release);
    CFSetAddValue((CFMutableSetRef)_MergedGlobals_98, Value);
  }

  os_unfair_lock_unlock((os_unfair_lock_t)&NSKeyValueCachedAccessorLock);
  return Value;
}

void sub_18359D77C(_Unwind_Exception *exception_object, int a2)
{
  if (a2)
  {
    objc_begin_catch(exception_object);
    os_unfair_lock_unlock((os_unfair_lock_t)&NSKeyValueCachedAccessorLock);
    objc_exception_rethrow();
    __break(1u);
    JUMPOUT(0x18359D7A0LL);
  }

  _Unwind_Resume(exception_object);
}

id _NSKeyValueSetterForClassAndKey( const void *(__cdecl *a1)(CFAllocatorRef, const void *), void (__cdecl *a2)(CFAllocatorRef, const void *), void *a3)
{
  uint64_t v12 = *MEMORY[0x1895F89C0];
  os_unfair_lock_lock((os_unfair_lock_t)&NSKeyValueCachedAccessorLock);
  size_t v6 = (const __CFSet *)NSKeyValueCachedSetters;
  if (!NSKeyValueCachedSetters)
  {
    __int128 v7 = *(_OWORD *)(MEMORY[0x189605258] + 16LL);
    *(_OWORD *)&v11.version = *MEMORY[0x189605258];
    *(_OWORD *)&v11.release = v7;
    v11.equal = (CFSetEqualCallBack)NSKeyValueAccessorIsEqual;
    v11.hash = (CFSetHashCallBack)NSKeyValueAccessorHash;
    size_t v6 = CFSetCreateMutable(0LL, 0LL, &v11);
    NSKeyValueCachedSetters = (uint64_t)v6;
  }

  v11.version = 0LL;
  v11.retain = a1;
  v11.release = a2;
  if (a2)
  {
    CFHashCode v8 = CFHash(a2);
    size_t v6 = (const __CFSet *)NSKeyValueCachedSetters;
  }

  else
  {
    CFHashCode v8 = 0LL;
  }

  v11.copyDescription = (CFSetCopyDescriptionCallBack)(v8 ^ (unint64_t)a1);
  id Value = (id)CFSetGetValue(v6, &v11);
  if (!Value)
  {
    id Value = objc_msgSend( a3,  sel__createValueSetterWithContainerClassID_key_,  a1,  a2,  *(_OWORD *)&v11.version,  v11.release);
    CFSetAddValue((CFMutableSetRef)NSKeyValueCachedSetters, Value);
  }

  os_unfair_lock_unlock((os_unfair_lock_t)&NSKeyValueCachedAccessorLock);
  return Value;
}

void sub_18359D8EC(_Unwind_Exception *exception_object, int a2)
{
  if (a2)
  {
    objc_begin_catch(exception_object);
    os_unfair_lock_unlock((os_unfair_lock_t)&NSKeyValueCachedAccessorLock);
    objc_exception_rethrow();
    __break(1u);
    JUMPOUT(0x18359D910LL);
  }

  _Unwind_Resume(exception_object);
}

id _NSKeyValueMutableSetGetterForClassAndKey( const void *(__cdecl *a1)(CFAllocatorRef, const void *), void (__cdecl *a2)(CFAllocatorRef, const void *), void *a3)
{
  uint64_t v12 = *MEMORY[0x1895F89C0];
  os_unfair_lock_lock((os_unfair_lock_t)&NSKeyValueCachedAccessorLock);
  size_t v6 = (const __CFSet *)NSKeyValueCachedMutableSetGetters;
  if (!NSKeyValueCachedMutableSetGetters)
  {
    __int128 v7 = *(_OWORD *)(MEMORY[0x189605258] + 16LL);
    *(_OWORD *)&v11.version = *MEMORY[0x189605258];
    *(_OWORD *)&v11.release = v7;
    v11.equal = (CFSetEqualCallBack)NSKeyValueAccessorIsEqual;
    v11.hash = (CFSetHashCallBack)NSKeyValueAccessorHash;
    size_t v6 = CFSetCreateMutable(0LL, 0LL, &v11);
    NSKeyValueCachedMutableSetGetters = (uint64_t)v6;
  }

  v11.version = 0LL;
  v11.retain = a1;
  v11.release = a2;
  if (a2)
  {
    CFHashCode v8 = CFHash(a2);
    size_t v6 = (const __CFSet *)NSKeyValueCachedMutableSetGetters;
  }

  else
  {
    CFHashCode v8 = 0LL;
  }

  v11.copyDescription = (CFSetCopyDescriptionCallBack)(v8 ^ (unint64_t)a1);
  id Value = (id)CFSetGetValue(v6, &v11);
  if (!Value)
  {
    id Value = objc_msgSend( a3,  sel__createMutableSetValueGetterWithContainerClassID_key_,  a1,  a2,  *(_OWORD *)&v11.version,  v11.release);
    CFSetAddValue((CFMutableSetRef)NSKeyValueCachedMutableSetGetters, Value);
  }

  os_unfair_lock_unlock((os_unfair_lock_t)&NSKeyValueCachedAccessorLock);
  return Value;
}

void sub_18359DA5C(_Unwind_Exception *exception_object, int a2)
{
  if (a2)
  {
    objc_begin_catch(exception_object);
    os_unfair_lock_unlock((os_unfair_lock_t)&NSKeyValueCachedAccessorLock);
    objc_exception_rethrow();
    __break(1u);
    JUMPOUT(0x18359DA80LL);
  }

  _Unwind_Resume(exception_object);
}

id _NSKeyValuePrimitiveGetterForClassAndKey( const void *(__cdecl *a1)(CFAllocatorRef, const void *), void (__cdecl *a2)(CFAllocatorRef, const void *), void *a3)
{
  uint64_t v12 = *MEMORY[0x1895F89C0];
  os_unfair_lock_lock((os_unfair_lock_t)&NSKeyValueCachedAccessorLock);
  size_t v6 = (const __CFSet *)qword_18C496630;
  if (!qword_18C496630)
  {
    __int128 v7 = *(_OWORD *)(MEMORY[0x189605258] + 16LL);
    *(_OWORD *)&v11.version = *MEMORY[0x189605258];
    *(_OWORD *)&v11.release = v7;
    v11.equal = (CFSetEqualCallBack)NSKeyValueAccessorIsEqual;
    v11.hash = (CFSetHashCallBack)NSKeyValueAccessorHash;
    size_t v6 = CFSetCreateMutable(0LL, 0LL, &v11);
    qword_18C496630 = (uint64_t)v6;
  }

  v11.version = 0LL;
  v11.retain = a1;
  v11.release = a2;
  if (a2)
  {
    CFHashCode v8 = CFHash(a2);
    size_t v6 = (const __CFSet *)qword_18C496630;
  }

  else
  {
    CFHashCode v8 = 0LL;
  }

  v11.copyDescription = (CFSetCopyDescriptionCallBack)(v8 ^ (unint64_t)a1);
  id Value = (id)CFSetGetValue(v6, &v11);
  if (!Value)
  {
    id Value = objc_msgSend( a3,  sel__createValuePrimitiveGetterWithContainerClassID_key_,  a1,  a2,  *(_OWORD *)&v11.version,  v11.release);
    CFSetAddValue((CFMutableSetRef)qword_18C496630, Value);
  }

  os_unfair_lock_unlock((os_unfair_lock_t)&NSKeyValueCachedAccessorLock);
  return Value;
}

void sub_18359DBCC(_Unwind_Exception *exception_object, int a2)
{
  if (a2)
  {
    objc_begin_catch(exception_object);
    os_unfair_lock_unlock((os_unfair_lock_t)&NSKeyValueCachedAccessorLock);
    objc_exception_rethrow();
    __break(1u);
    JUMPOUT(0x18359DBF0LL);
  }

  _Unwind_Resume(exception_object);
}

id _NSKeyValuePrimitiveSetterForClassAndKey( const void *(__cdecl *a1)(CFAllocatorRef, const void *), void (__cdecl *a2)(CFAllocatorRef, const void *), void *a3)
{
  uint64_t v12 = *MEMORY[0x1895F89C0];
  os_unfair_lock_lock((os_unfair_lock_t)&NSKeyValueCachedAccessorLock);
  size_t v6 = (const __CFSet *)qword_18C496638;
  if (!qword_18C496638)
  {
    __int128 v7 = *(_OWORD *)(MEMORY[0x189605258] + 16LL);
    *(_OWORD *)&v11.version = *MEMORY[0x189605258];
    *(_OWORD *)&v11.release = v7;
    v11.equal = (CFSetEqualCallBack)NSKeyValueAccessorIsEqual;
    v11.hash = (CFSetHashCallBack)NSKeyValueAccessorHash;
    size_t v6 = CFSetCreateMutable(0LL, 0LL, &v11);
    qword_18C496638 = (uint64_t)v6;
  }

  v11.version = 0LL;
  v11.retain = a1;
  v11.release = a2;
  if (a2)
  {
    CFHashCode v8 = CFHash(a2);
    size_t v6 = (const __CFSet *)qword_18C496638;
  }

  else
  {
    CFHashCode v8 = 0LL;
  }

  v11.copyDescription = (CFSetCopyDescriptionCallBack)(v8 ^ (unint64_t)a1);
  id Value = (id)CFSetGetValue(v6, &v11);
  if (!Value)
  {
    id Value = objc_msgSend( a3,  sel__createValuePrimitiveSetterWithContainerClassID_key_,  a1,  a2,  *(_OWORD *)&v11.version,  v11.release);
    CFSetAddValue((CFMutableSetRef)qword_18C496638, Value);
  }

  os_unfair_lock_unlock((os_unfair_lock_t)&NSKeyValueCachedAccessorLock);
  return Value;
}

void sub_18359DD3C(_Unwind_Exception *exception_object, int a2)
{
  if (a2)
  {
    objc_begin_catch(exception_object);
    os_unfair_lock_unlock((os_unfair_lock_t)&NSKeyValueCachedAccessorLock);
    objc_exception_rethrow();
    __break(1u);
    JUMPOUT(0x18359DD60LL);
  }

  _Unwind_Resume(exception_object);
}

id _NSKeyValueMutableArrayGetterForIsaAndKey( const void *(__cdecl *a1)(CFAllocatorRef, const void *), void (__cdecl *a2)(CFAllocatorRef, const void *))
{
  uint64_t v10 = *MEMORY[0x1895F89C0];
  os_unfair_lock_lock((os_unfair_lock_t)&NSKeyValueCachedAccessorLock);
  uint64_t v4 = (const __CFSet *)NSKeyValueCachedMutableArrayGetters;
  if (!NSKeyValueCachedMutableArrayGetters)
  {
    __int128 v5 = *(_OWORD *)(MEMORY[0x189605258] + 16LL);
    *(_OWORD *)&v9.version = *MEMORY[0x189605258];
    *(_OWORD *)&v9.release = v5;
    v9.equal = (CFSetEqualCallBack)NSKeyValueAccessorIsEqual;
    v9.hash = (CFSetHashCallBack)NSKeyValueAccessorHash;
    uint64_t v4 = CFSetCreateMutable(0LL, 0LL, &v9);
    NSKeyValueCachedMutableArrayGetters = (uint64_t)v4;
  }

  v9.version = 0LL;
  v9.retain = a1;
  v9.release = a2;
  if (a2)
  {
    CFHashCode v6 = CFHash(a2);
    uint64_t v4 = (const __CFSet *)NSKeyValueCachedMutableArrayGetters;
  }

  else
  {
    CFHashCode v6 = 0LL;
  }

  v9.copyDescription = (CFSetCopyDescriptionCallBack)(v6 ^ (unint64_t)a1);
  id Value = (id)CFSetGetValue(v4, &v9);
  if (!Value)
  {
    id Value = objc_msgSend( a1,  sel__createMutableArrayValueGetterWithContainerClassID_key_,  a1,  a2,  *(_OWORD *)&v9.version,  v9.release);
    CFSetAddValue((CFMutableSetRef)NSKeyValueCachedMutableArrayGetters, Value);
  }

  os_unfair_lock_unlock((os_unfair_lock_t)&NSKeyValueCachedAccessorLock);
  return Value;
}

void sub_18359DEA0(_Unwind_Exception *exception_object, int a2)
{
  if (a2)
  {
    objc_begin_catch(exception_object);
    os_unfair_lock_unlock((os_unfair_lock_t)&NSKeyValueCachedAccessorLock);
    objc_exception_rethrow();
    __break(1u);
    JUMPOUT(0x18359DEC4LL);
  }

  _Unwind_Resume(exception_object);
}

id _NSKeyValueMutableOrderedSetGetterForIsaAndKey( const void *(__cdecl *a1)(CFAllocatorRef, const void *), void (__cdecl *a2)(CFAllocatorRef, const void *))
{
  uint64_t v10 = *MEMORY[0x1895F89C0];
  os_unfair_lock_lock((os_unfair_lock_t)&NSKeyValueCachedAccessorLock);
  uint64_t v4 = (const __CFSet *)NSKeyValueCachedMutableOrderedSetGetters;
  if (!NSKeyValueCachedMutableOrderedSetGetters)
  {
    __int128 v5 = *(_OWORD *)(MEMORY[0x189605258] + 16LL);
    *(_OWORD *)&v9.version = *MEMORY[0x189605258];
    *(_OWORD *)&v9.release = v5;
    v9.equal = (CFSetEqualCallBack)NSKeyValueAccessorIsEqual;
    v9.hash = (CFSetHashCallBack)NSKeyValueAccessorHash;
    uint64_t v4 = CFSetCreateMutable(0LL, 0LL, &v9);
    NSKeyValueCachedMutableOrderedSetGetters = (uint64_t)v4;
  }

  v9.version = 0LL;
  v9.retain = a1;
  v9.release = a2;
  if (a2)
  {
    CFHashCode v6 = CFHash(a2);
    uint64_t v4 = (const __CFSet *)NSKeyValueCachedMutableOrderedSetGetters;
  }

  else
  {
    CFHashCode v6 = 0LL;
  }

  v9.copyDescription = (CFSetCopyDescriptionCallBack)(v6 ^ (unint64_t)a1);
  id Value = (id)CFSetGetValue(v4, &v9);
  if (!Value)
  {
    id Value = objc_msgSend( a1,  sel__createMutableOrderedSetValueGetterWithContainerClassID_key_,  a1,  a2,  *(_OWORD *)&v9.version,  v9.release);
    CFSetAddValue((CFMutableSetRef)NSKeyValueCachedMutableOrderedSetGetters, Value);
  }

  os_unfair_lock_unlock((os_unfair_lock_t)&NSKeyValueCachedAccessorLock);
  return Value;
}

void sub_18359E004(_Unwind_Exception *exception_object, int a2)
{
  if (a2)
  {
    objc_begin_catch(exception_object);
    os_unfair_lock_unlock((os_unfair_lock_t)&NSKeyValueCachedAccessorLock);
    objc_exception_rethrow();
    __break(1u);
    JUMPOUT(0x18359E028LL);
  }

  _Unwind_Resume(exception_object);
}

void _NSKeyValueInvalidateCachedMutatorsForIsaAndKey(uint64_t a1, const void *a2)
{
  value[4] = *MEMORY[0x1895F89C0];
  os_unfair_lock_lock((os_unfair_lock_t)&NSKeyValueCachedAccessorLock);
  value[0] = 0LL;
  value[1] = a1;
  value[2] = a2;
  if (a2) {
    CFHashCode v4 = CFHash(a2);
  }
  else {
    CFHashCode v4 = 0LL;
  }
  value[3] = v4 ^ a1;
  if (NSKeyValueCachedSetters)
  {
    __int128 v5 = CFSetGetValue((CFSetRef)NSKeyValueCachedSetters, value);
    if (v5) {
      CFSetRemoveValue((CFMutableSetRef)NSKeyValueCachedSetters, v5);
    }
  }

  if (NSKeyValueCachedMutableArrayGetters)
  {
    CFHashCode v6 = CFSetGetValue((CFSetRef)NSKeyValueCachedMutableArrayGetters, value);
    if (v6) {
      CFSetRemoveValue((CFMutableSetRef)NSKeyValueCachedMutableArrayGetters, v6);
    }
  }

  if (NSKeyValueCachedMutableOrderedSetGetters)
  {
    __int128 v7 = CFSetGetValue((CFSetRef)NSKeyValueCachedMutableOrderedSetGetters, value);
    if (v7) {
      CFSetRemoveValue((CFMutableSetRef)NSKeyValueCachedMutableOrderedSetGetters, v7);
    }
  }

  if (NSKeyValueCachedMutableSetGetters)
  {
    CFHashCode v8 = CFSetGetValue((CFSetRef)NSKeyValueCachedMutableSetGetters, value);
    if (v8) {
      CFSetRemoveValue((CFMutableSetRef)NSKeyValueCachedMutableSetGetters, v8);
    }
  }

  os_unfair_lock_unlock((os_unfair_lock_t)&NSKeyValueCachedAccessorLock);
}

void _NSKeyValueInvalidateAllCachesForContainerAndKey(uint64_t a1, const void *a2)
{
  v8[7] = *MEMORY[0x1895F89C0];
  os_unfair_lock_lock((os_unfair_lock_t)&NSKeyValueCachedAccessorLock);
  v7[0] = 0LL;
  v7[1] = a1;
  void v7[2] = a2;
  if (a2) {
    CFHashCode v4 = CFHash(a2);
  }
  else {
    CFHashCode v4 = 0LL;
  }
  uint64_t v5 = 0LL;
  v7[3] = v4 ^ a1;
  v8[0] = _MergedGlobals_98;
  v8[1] = NSKeyValueCachedSetters;
  v8[2] = NSKeyValueCachedMutableArrayGetters;
  void v8[3] = NSKeyValueCachedMutableOrderedSetGetters;
  v8[4] = NSKeyValueCachedMutableSetGetters;
  v8[5] = qword_18C496630;
  v8[6] = qword_18C496638;
  do
  {
    CFHashCode v6 = (__CFSet *)v8[v5];
    if (v6) {
      CFSetRemoveValue(v6, v7);
    }
    ++v5;
  }

  while (v5 != 7);
  os_unfair_lock_unlock((os_unfair_lock_t)&NSKeyValueCachedAccessorLock);
}

void *_NSKeyValueContainerClassGetNotifyingInfo(uint64_t a1)
{
  uint64_t result = *(void **)(a1 + 40);
  if (!result)
  {
    if (class_isMetaClass(*(Class *)(a1 + 8)))
    {
      return *(void **)(a1 + 40);
    }

    else
    {
      uint64_t result = _NSKVONotifyingCreateInfoWithOriginalClass(*(Class *)(a1 + 8));
      *(void *)(a1 + 40) = result;
    }
  }

  return result;
}

void sub_1835A2FAC(_Unwind_Exception *a1)
{
}

id *_NSKeyValueObservationInfoCreateByAdding( NSKeyValueObservationInfo *a1, NSObject *a2, NSKeyValueProperty *a3, uint64_t a4, void *a5, NSObject *a6, _BYTE *a7, void *a8)
{
  v32[1] = *MEMORY[0x1895F89C0];
  os_unfair_lock_lock_with_options();
  if (!qword_18C496660)
  {
    uint64_t v15 = -[NSPointerFunctions initWithOptions:](objc_alloc(&OBJC_CLASS___NSPointerFunctions), "initWithOptions:", 5LL);
    -[NSPointerFunctions setHashFunction:](v15, "setHashFunction:", NSKeyValueShareableObservationInfoNSHTHash);
    -[NSPointerFunctions setIsEqualFunction:](v15, "setIsEqualFunction:", NSKeyValueShareableObservationInfoNSHTIsEqual);
    qword_18C496660 = -[NSHashTable initWithPointerFunctions:capacity:]( objc_alloc(&OBJC_CLASS___NSHashTable),  "initWithPointerFunctions:capacity:",  v15,  0LL);
  }

  if (!qword_18C496668) {
    qword_18C496668 = objc_opt_self();
  }
  int v16 = (NSKeyValueShareableObservationInfoKey *)qword_18C496670;
  if (!qword_18C496670)
  {
    int v16 = objc_alloc_init(&OBJC_CLASS___NSKeyValueShareableObservationInfoKey);
    qword_18C496670 = (uint64_t)v16;
  }

  v16->_addingNotRemoving = 1;
  v16->_baseObservationInfo = a1;
  v16->_additionObserver = a2;
  v16->_additionPropertdouble y = a3;
  v16->_additionOptions = a4 & 0xFFFFFFFFFFFFFFFBLL;
  v16->_additionContext = a5;
  v16->_additionOriginalObservable = a6;
  unsigned int v17 = (id *)objc_msgSend((id)qword_18C496660, "member:");
  uint64_t v18 = qword_18C496670;
  *(void *)(qword_18C496670 + 56) = 0LL;
  *(void *)(v18 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = 0LL;
  *(void *)(v18 + 24) = 0LL;
  if (v17)
  {
    uint64_t v19 = v17;
    uint64_t v20 = v17;
    *a7 = 1;
    *a8 = [v19[1] lastObject];
  }

  else
  {
    unsigned int v21 = (NSHashTable *)qword_18C496678;
    if (!qword_18C496678)
    {
      unsigned int v21 = +[NSHashTable weakObjectsHashTable](&OBJC_CLASS___NSHashTable, "weakObjectsHashTable");
      qword_18C496678 = (uint64_t)v21;
    }

    unsigned int v22 = (NSKeyValueShareableObservanceKey *)qword_18C496680;
    if (!qword_18C496680)
    {
      unsigned int v22 = objc_alloc_init(&OBJC_CLASS___NSKeyValueShareableObservanceKey);
      qword_18C496680 = (uint64_t)v22;
      unsigned int v21 = (NSHashTable *)qword_18C496678;
    }

    v22->super._observer = a2;
    v22->super._propertdouble y = a3;
    char v23 = *((_BYTE *)&v22->super + 40) & 0xF0 | a4 & 0xB | 0x20;
    if (!a6) {
      char v23 = *((_BYTE *)&v22->super + 40) & 0xD0 | a4 & 0xB;
    }
    *((_BYTE *)&v22->super + 40) = v23;
    if (a6) {
      uint64_t v24 = a6;
    }
    else {
      uint64_t v24 = a2;
    }
    v22->super._context = a5;
    v22->super._originalObservableOrUnownedObserver.originalObservable = v24;
    uint64_t v25 = -[NSHashTable member:](v21, "member:");
    v32[0] = v25;
    uint64_t v26 = qword_18C496680;
    *(void *)(qword_18C496680 + 32) = 0LL;
    *(void *)(v26 + _Block_object_dispose((const void *)(v10 - 72), 8) = 0LL;
    if (v25)
    {
      uint64_t v27 = v25;
      unint64_t v28 = v25;
    }

    else
    {
      uint64_t v27 = -[NSKeyValueObservance _initWithObserver:property:options:context:originalObservable:]( objc_alloc(&OBJC_CLASS___NSKeyValueObservance),  "_initWithObserver:property:options:context:originalObservable:",  a2,  a3,  a4,  a5,  a6);
      v32[0] = v27;
      if ((v27[40] & 0x40) != 0) {
        [(id)qword_18C496678 addObject:v27];
      }
    }

    if (a1)
    {
      uint64_t v19 = -[NSKeyValueObservationInfo _copyByAddingObservance:](a1, "_copyByAddingObservance:", v27);
    }

    else
    {
      uint64_t v19 = -[NSKeyValueObservationInfo _initWithObservances:count:hashValue:]( objc_alloc(&OBJC_CLASS___NSKeyValueObservationInfo),  "_initWithObservances:count:hashValue:",  v32,  1LL,  0LL);
      uint64_t v27 = (_BYTE *)v32[0];
    }

    if (*((_BYTE *)v19 + 24))
    {
      unint64_t v29 = (void *)MEMORY[0x186E1FF60]();
      [(id)qword_18C496660 addObject:v19];
      objc_autoreleasePoolPop(v29);
    }

    *a7 = 0;
    *a8 = v32[0];
  }

  os_unfair_lock_unlock((os_unfair_lock_t)&_MergedGlobals_100);
  return v19;
}

void sub_1835A40F0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, uint64_t a44, uint64_t a45, uint64_t a46, uint64_t a47, char a48)
{
}

CFTypeRef _NSAttributedStringDescriptionWithLocaleFunc(void *a1, uint64_t a2)
{
  if ((objc_opt_isKindOfClass() & 1) != 0) {
    a1 = (void *)[a1 string];
  }
  return _NSDescriptionWithLocaleFunc(a1, a2);
}

uint64_t _NSSetValueAndNotifyForKeyInIvar( void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void (*a6)(void *, void, uint64_t, uint64_t, uint64_t))
{
  return [a1 didChangeValueForKey:a4];
}

uint64_t _NSSetValueAndNotifyForUndefinedKey( void *a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(void *, uint64_t, uint64_t, uint64_t))
{
  return [a1 didChangeValueForKey:a4];
}

void NSKVODeallocateBreak(uint64_t a1)
{
  if (!a1) {
    NSLog((NSString *)@" ", v1, v2);
  }
}

BOOL _NSKVOUsesBaseClassObservationInfoImplementationForClass(Class cls)
{
  if (qword_18C4966A0 != -1) {
    dispatch_once(&qword_18C4966A0, &__block_literal_global_17);
  }
  return class_getMethodImplementation(cls, sel_observationInfo) == (IMP)_MergedGlobals_101
      && class_getMethodImplementation(cls, sel_setObservationInfo_) == (IMP)qword_18C496698;
}

void *_NSKVONotifyingCreateInfoWithOriginalClass(Class cls)
{
  uint64_t v13 = *MEMORY[0x1895F89C0];
  if (_NSKeyValueObserverRegistrationEnableLockingAssertions) {
    os_unfair_lock_assert_owner((os_unfair_lock_t)&_NSKeyValueObserverRegistrationLock);
  }
  SEL Name = class_getName(cls);
  if (strchr(Name, 46)) {
    uint64_t v3 = @"..NSKVONotifying_%s";
  }
  else {
    uint64_t v3 = @"NSKVONotifying_%s";
  }
  CFHashCode v4 = +[NSString stringWithFormat:](&OBJC_CLASS___NSString, "stringWithFormat:", v3, Name);
  ClassPair = objc_allocateClassPair(cls, -[NSString UTF8String](v4, "UTF8String"), 0x30uLL);
  if (ClassPair)
  {
    CFHashCode v6 = ClassPair;
    objc_registerClassPair(ClassPair);
    IndexedIvars = object_getIndexedIvars(v6);
    void *IndexedIvars = cls;
    IndexedIvars[1] = v6;
    IndexedIvars[2] = CFSetCreateMutable(0LL, 0LL, MEMORY[0x189604E48]);
    IndexedIvars[3] = CFDictionaryCreateMutable(0LL, 0LL, 0LL, MEMORY[0x189605250]);
    IndexedIvars[4] = 0LL;
    if (qword_18C4966B8 != -1) {
      dispatch_once(&qword_18C4966B8, &__block_literal_global_14);
    }
    BOOL v8 = class_getMethodImplementation((Class)*IndexedIvars, sel_willChangeValueForKey_) != (IMP)qword_18C4966C0
      || class_getMethodImplementation((Class)*IndexedIvars, sel_didChangeValueForKey_) != (IMP)qword_18C4966C8;
    *((_BYTE *)IndexedIvars + 40) = v8;
    NSKVONotifyingSetMethodImplementation( (uint64_t)IndexedIvars,  sel__isKVOA,  (id (*)(id, SEL, ...))NSKVOIsAutonotifying,  0LL);
    NSKVONotifyingSetMethodImplementation( (uint64_t)IndexedIvars,  sel_dealloc,  (id (*)(id, SEL, ...))NSKVODeallocate,  0LL);
    NSKVONotifyingSetMethodImplementation((uint64_t)IndexedIvars, sel_class, (id (*)(id, SEL, ...))NSKVOClass, 0LL);
  }

  else
  {
    if (qword_18C4966B0 != -1) {
      dispatch_once(&qword_18C4966B0, &__block_literal_global_10);
    }
    CFSetCallBacks v9 = (os_log_s *)qword_18C4966A8;
    if (os_log_type_enabled((os_log_t)qword_18C4966A8, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138543362;
      uint64_t v12 = v4;
      _os_log_error_impl( &dword_182EB1000,  v9,  OS_LOG_TYPE_ERROR,  "KVO failed to allocate class pair for name %{public}@, automatic key-value observing will not work for this class",  buf,  0xCu);
    }

    return 0LL;
  }

  return IndexedIvars;
}

objc_method *NSKVONotifyingSetMethodImplementation( uint64_t a1, const char *a2, id (*a3)(id, SEL, ...), const void *a4)
{
  uint64_t result = class_getInstanceMethod(*(Class *)a1, a2);
  if (result)
  {
    TypeEncoding = method_getTypeEncoding(result);
    if (a4)
    {
      os_unfair_recursive_lock_lock_with_options();
      CFDictionarySetValue(*(CFMutableDictionaryRef *)(a1 + 24), a2, a4);
      os_unfair_recursive_lock_unlock();
    }

    return (objc_method *)class_addMethod(*(Class *)(a1 + 8), a2, a3, TypeEncoding);
  }

  return result;
}

uint64_t NSKVOIsAutonotifying()
{
  return 1LL;
}

void NSKVODeallocate(void *a1, const char *a2)
{
  v23[6] = *MEMORY[0x1895F89C0];
  Class Class = object_getClass(a1);
  BOOL v5 = _NSKVOUsesBaseClassObservationInfoImplementationForClass(Class);
  IndexedIvars = (Class *)object_getIndexedIvars(Class);
  Method InstanceMethod = class_getInstanceMethod(*IndexedIvars, a2);
  Method v8 = InstanceMethod;
  if (v5)
  {
    v23[0] = MEMORY[0x1895F87A8];
    v23[1] = 3221225472LL;
    _OWORD v23[2] = __NSKVODeallocate_block_invoke;
    v23[3] = &unk_189C9E2F8;
    v23[4] = a1;
    v23[5] = InstanceMethod;
    _NSKVOPerformWithDeallocatingObservable(a1, (uint64_t)v23);
    return;
  }

  uint64_t v20 = (uint64_t)a1;
  id v21 = _NSKeyValueRetainedObservationInfoForObject(a1, 0LL);
  uint64_t v22 = 0LL;
  _NSKeyValueAddObservationInfoWatcher((uint64_t)&v20);
  int v9 = objc_msgSend( objc_getAssociatedObject(a1, &_NSKeyValueObservingObservationInfoOverriderMayThrowOnDealloc),  "isEqual:",  MEMORY[0x189604A88]);
  v19[0] = MEMORY[0x1895F87A8];
  v19[1] = 3221225472LL;
  void v19[2] = __NSKVODeallocate_block_invoke_2;
  void v19[3] = &unk_189C9E2F8;
  v19[4] = a1;
  void v19[5] = v8;
  _NSKVOPerformWithDeallocatingObservable(a1, (uint64_t)v19);
  if (!v21) {
    goto LABEL_22;
  }
  unsigned int program_sdk_version = dyld_get_program_sdk_version();
  if (v9) {
    int v9 = [v21 containsOnlyInternalObservationHelpers] ^ 1;
  }
  Boolean keyExistsAndHasValidFormat = 0;
  if (CFPreferencesGetAppBooleanValue( @"NSKVODeallocateCleansUpBeforeThrowing",  (CFStringRef)*MEMORY[0x189605188],  &keyExistsAndHasValidFormat))
  {
    BOOL v11 = keyExistsAndHasValidFormat == 0;
  }

  else
  {
    BOOL v11 = 1;
  }

  char v12 = v11;
  if (program_sdk_version < 0x80000) {
    char v13 = v12;
  }
  else {
    char v13 = 0;
  }
  if ((v13 & 1) != 0 || ((v9 ^ 1) & 1) != 0)
  {
    if (program_sdk_version < 0x80000) {
      int v14 = 1;
    }
    else {
      int v14 = v9;
    }
    if (v14 == 1)
    {
      NSLog( (NSString *)@"An instance %p of class %@ was deallocated while key value observers were still registered with it. Observation info was leaked, and may even become mistakenly attached to some other object. Set a breakpoint on NSKVODeallocateBreak to stop here in the debugger. Here's the current observation info:\n%@",  a1,  *IndexedIvars,  v21);
      NSKVODeallocateBreak((uint64_t)a1);
    }

void sub_1835A56E8(_Unwind_Exception *exception_object, int a2)
{
  if (a2)
  {
    objc_begin_catch(exception_object);
    JUMPOUT(0x1835A5638LL);
  }

  _Unwind_Resume(exception_object);
}

void _NSKVONotifyingEnableForInfoAndKey(uint64_t a1, void *a2)
{
  uint64_t v71 = *MEMORY[0x1895F89C0];
  os_unfair_recursive_lock_lock_with_options();
  CFSetAddValue(*(CFMutableSetRef *)(a1 + 16), a2);
  os_unfair_recursive_lock_unlock();
  id v4 = _NSKeyValueSetterForClassAndKey( *(const void *(__cdecl **)(CFAllocatorRef, const void *))a1,  (void (__cdecl *)(CFAllocatorRef, const void *))a2,  *(void **)a1);
  if ((objc_opt_isKindOfClass() & 1) == 0) {
    goto LABEL_43;
  }
  BOOL v5 = (objc_method *)[v4 method];
  if (*method_getTypeEncoding(v5) == 118)
  {
    CFHashCode v6 = method_copyArgumentType(v5, 2u);
    __int128 v7 = v6;
    int v8 = *v6;
    if (v8 > 82)
    {
      switch(*v6)
      {
        case 'c':
          int v9 = (id (*)(id, SEL, ...))_NSSetCharValueAndNotify;
          break;
        case 'd':
          int v9 = (id (*)(id, SEL, ...))_NSSetDoubleValueAndNotify;
          break;
        case 'e':
        case 'g':
        case 'h':
        case 'j':
        case 'k':
        case 'm':
        case 'n':
        case 'o':
        case 'p':
        case 'r':
          goto LABEL_28;
        case 'f':
          int v9 = (id (*)(id, SEL, ...))_NSSetFloatValueAndNotify;
          break;
        case 'i':
          int v9 = (id (*)(id, SEL, ...))_NSSetIntValueAndNotify;
          break;
        case 'l':
          int v9 = (id (*)(id, SEL, ...))_NSSetLongValueAndNotify;
          break;
        case 'q':
          int v9 = (id (*)(id, SEL, ...))_NSSetLongLongValueAndNotify;
          break;
        case 's':
          int v9 = (id (*)(id, SEL, ...))_NSSetShortValueAndNotify;
          break;
        default:
          if (v8 == 83)
          {
            int v9 = (id (*)(id, SEL, ...))_NSSetUnsignedShortValueAndNotify;
          }

          else
          {
            if (v8 != 123) {
              goto LABEL_28;
            }
            if (!strcmp(v6, "{CGPoint=dd}") || !strcmp(v7, "{_NSPoint=ff}"))
            {
              int v9 = (id (*)(id, SEL, ...))_NSSetPointValueAndNotify;
            }

            else if (!strcmp(v7, "{_NSRange=QQ}"))
            {
              int v9 = (id (*)(id, SEL, ...))_NSSetRangeValueAndNotify;
            }

            else if (!strcmp(v7, "{CGRect={CGPoint=dd}{CGSize=dd}}") {
                   || !strcmp(v7, "{_NSRect={_NSPoint=ff}{_NSSize=ff}}"))
            }
            {
              int v9 = (id (*)(id, SEL, ...))_NSSetRectValueAndNotify;
            }

            else
            {
              int v9 = (id (*)(id, SEL, ...))_NSSetSizeValueAndNotify;
              if (strcmp(v7, "{CGSize=dd}") && strcmp(v7, "{_NSSize=ff}")) {
                int v9 = (id (*)(id, SEL, ...))MEMORY[0x189604878];
              }
            }
          }

          break;
      }
    }

    else
    {
      if (v8 <= 75)
      {
        int v9 = (id (*)(id, SEL, ...))_NSSetObjectValueAndNotify;
        switch(*v6)
        {
          case '@':
            goto LABEL_41;
          case 'A':
          case 'D':
          case 'E':
          case 'F':
          case 'G':
          case 'H':
            goto LABEL_28;
          case 'B':
            int v9 = (id (*)(id, SEL, ...))_NSSetBoolValueAndNotify;
            goto LABEL_41;
          case 'C':
            int v9 = (id (*)(id, SEL, ...))_NSSetUnsignedCharValueAndNotify;
            goto LABEL_41;
          case 'I':
            int v9 = (id (*)(id, SEL, ...))_NSSetUnsignedIntValueAndNotify;
            goto LABEL_41;
          default:
            if (v8 != 35) {
              goto LABEL_28;
            }
            goto LABEL_41;
        }
      }

      if (v8 == 76)
      {
        int v9 = (id (*)(id, SEL, ...))_NSSetUnsignedLongValueAndNotify;
      }

      else
      {
        if (v8 != 81)
        {
LABEL_28:
          if (*(void *)a1) {
            SEL Name = class_getName(*(Class *)a1);
          }
          else {
            SEL Name = "nil";
          }
          double v67 = method_getName(v5);
          double v68 = sel_getName(v67);
          NSLog( (NSString *)@"KVO autonotifying only supports -set<Key>: methods that take id, NSNumber-supported scalar types, and some NSValue-supported structure types. Autonotifying will not be done for invocations of -[%s %s].",  Name,  v68);
          free(v7);
          goto LABEL_43;
        }

        int v9 = (id (*)(id, SEL, ...))_NSSetUnsignedLongLongValueAndNotify;
      }
    }

void NSKVOForwardInvocation(void *a1, const char *a2, void *a3)
{
  uint64_t v17 = *MEMORY[0x1895F89C0];
  Class Class = object_getClass(a1);
  IndexedIvars = (CFDictionaryRef *)object_getIndexedIvars(Class);
  int v8 = (const void *)[a3 selector];
  os_unfair_recursive_lock_lock_with_options();
  int v9 = (void *)objc_msgSend((id)CFDictionaryGetValue(IndexedIvars[3], v8), "copyWithZone:", 0);
  os_unfair_recursive_lock_unlock();
  if (v9)
  {
    [a1 willChangeValueForKey:v9];
    strcpy((char *)&__source, "_original_");
    SEL Name = sel_getName((SEL)v8);
    size_t v11 = strlen(Name);
    size_t v12 = v11 + 11;
    MEMORY[0x1895F8858](v11);
    int v14 = (char *)&v15 - ((v13 + 26) & 0xFFFFFFFFFFFFFFF0LL);
    strlcpy(v14, (const char *)&__source, v12);
    strlcat(v14, Name, v12);
    [a3 setSelector:sel_registerName(v14)];
    [a3 invoke];
    [a1 didChangeValueForKey:v9];
  }

  else
  {
    __source.receiver = a1;
    __source.super_class = (Class)*IndexedIvars;
    objc_msgSendSuper(&__source, a2, a3);
  }

void NSKVOInsertObjectAtIndexAndNotify(void *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  Class Class = object_getClass(a1);
  IndexedIvars = (CFDictionaryRef *)object_getIndexedIvars(Class);
  os_unfair_recursive_lock_lock_with_options();
  id v12 = (id)objc_msgSend((id)CFDictionaryGetValue(IndexedIvars[3], a2), "copyWithZone:", 0);
  os_unfair_recursive_lock_unlock();
  uint64_t v10 = -[NSIndexSet initWithIndex:](objc_alloc(&OBJC_CLASS___NSIndexSet), "initWithIndex:", a4);
  [a1 willChange:2 valuesAtIndexes:v10 forKey:v12];
  Method InstanceMethod = class_getInstanceMethod((Class)*IndexedIvars, (SEL)a2);
  method_invoke(a1, InstanceMethod, a3, a4);
  [a1 didChange:2 valuesAtIndexes:v10 forKey:v12];
}

void NSKVOInsertObjectsAtIndexesAndNotify(void *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  Class Class = object_getClass(a1);
  IndexedIvars = (CFDictionaryRef *)object_getIndexedIvars(Class);
  os_unfair_recursive_lock_lock_with_options();
  id v11 = (id)objc_msgSend((id)CFDictionaryGetValue(IndexedIvars[3], a2), "copyWithZone:", 0);
  os_unfair_recursive_lock_unlock();
  [a1 willChange:2 valuesAtIndexes:a4 forKey:v11];
  MethodIMP Implementation = class_getMethodImplementation((Class)*IndexedIvars, (SEL)a2);
  MethodImplementation(a1, (SEL)a2, a3, a4);
  [a1 didChange:2 valuesAtIndexes:a4 forKey:v11];
}

void NSKVORemoveObjectAtIndexAndNotify(void *a1, const void *a2, uint64_t a3)
{
  Class Class = object_getClass(a1);
  IndexedIvars = (CFDictionaryRef *)object_getIndexedIvars(Class);
  os_unfair_recursive_lock_lock_with_options();
  id v10 = (id)objc_msgSend((id)CFDictionaryGetValue(IndexedIvars[3], a2), "copyWithZone:", 0);
  os_unfair_recursive_lock_unlock();
  int v8 = -[NSIndexSet initWithIndex:](objc_alloc(&OBJC_CLASS___NSIndexSet), "initWithIndex:", a3);
  [a1 willChange:3 valuesAtIndexes:v8 forKey:v10];
  Method InstanceMethod = class_getInstanceMethod((Class)*IndexedIvars, (SEL)a2);
  method_invoke(a1, InstanceMethod, a3);
  [a1 didChange:3 valuesAtIndexes:v8 forKey:v10];
}

void NSKVORemoveObjectsAtIndexesAndNotify(void *a1, const void *a2, uint64_t a3)
{
  Class Class = object_getClass(a1);
  IndexedIvars = (CFDictionaryRef *)object_getIndexedIvars(Class);
  os_unfair_recursive_lock_lock_with_options();
  id v9 = (id)objc_msgSend((id)CFDictionaryGetValue(IndexedIvars[3], a2), "copyWithZone:", 0);
  os_unfair_recursive_lock_unlock();
  [a1 willChange:3 valuesAtIndexes:a3 forKey:v9];
  MethodIMP Implementation = class_getMethodImplementation((Class)*IndexedIvars, (SEL)a2);
  MethodImplementation(a1, (SEL)a2, a3);
  [a1 didChange:3 valuesAtIndexes:a3 forKey:v9];
}

void NSKVOReplaceObjectAtIndexAndNotify(void *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  Class Class = object_getClass(a1);
  IndexedIvars = (CFDictionaryRef *)object_getIndexedIvars(Class);
  os_unfair_recursive_lock_lock_with_options();
  id v12 = (id)objc_msgSend((id)CFDictionaryGetValue(IndexedIvars[3], a2), "copyWithZone:", 0);
  os_unfair_recursive_lock_unlock();
  id v10 = -[NSIndexSet initWithIndex:](objc_alloc(&OBJC_CLASS___NSIndexSet), "initWithIndex:", a3);
  [a1 willChange:4 valuesAtIndexes:v10 forKey:v12];
  Method InstanceMethod = class_getInstanceMethod((Class)*IndexedIvars, (SEL)a2);
  method_invoke(a1, InstanceMethod, a3, a4);
  [a1 didChange:4 valuesAtIndexes:v10 forKey:v12];
}

void NSKVOReplaceObjectsAtIndexesAndNotify(void *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  Class Class = object_getClass(a1);
  IndexedIvars = (CFDictionaryRef *)object_getIndexedIvars(Class);
  os_unfair_recursive_lock_lock_with_options();
  id v11 = (id)objc_msgSend((id)CFDictionaryGetValue(IndexedIvars[3], a2), "copyWithZone:", 0);
  os_unfair_recursive_lock_unlock();
  [a1 willChange:4 valuesAtIndexes:a3 forKey:v11];
  Method InstanceMethod = class_getInstanceMethod((Class)*IndexedIvars, (SEL)a2);
  method_invoke(a1, InstanceMethod, a3, a4);
  [a1 didChange:4 valuesAtIndexes:a3 forKey:v11];
}

void NSKVOAddObjectAndNotify(void *a1, const void *a2, uint64_t a3)
{
  v10[1] = *MEMORY[0x1895F89C0];
  v10[0] = a3;
  Class Class = object_getClass(a1);
  IndexedIvars = (CFDictionaryRef *)object_getIndexedIvars(Class);
  os_unfair_recursive_lock_lock_with_options();
  __int128 v7 = (void *)objc_msgSend((id)CFDictionaryGetValue(IndexedIvars[3], a2), "copyWithZone:", 0);
  os_unfair_recursive_lock_unlock();
  int v8 = (void *)[objc_alloc(MEMORY[0x189604010]) initWithObjects:v10 count:1];
  [a1 willChangeValueForKey:v7 withSetMutation:1 usingObjects:v8];
  Method InstanceMethod = class_getInstanceMethod((Class)*IndexedIvars, (SEL)a2);
  method_invoke(a1, InstanceMethod, v10[0]);
  [a1 didChangeValueForKey:v7 withSetMutation:1 usingObjects:v8];
}

void NSKVOIntersectSetAndNotify(void *a1, const void *a2, uint64_t a3)
{
  Class Class = object_getClass(a1);
  IndexedIvars = (CFDictionaryRef *)object_getIndexedIvars(Class);
  os_unfair_recursive_lock_lock_with_options();
  id v9 = (id)objc_msgSend((id)CFDictionaryGetValue(IndexedIvars[3], a2), "copyWithZone:", 0);
  os_unfair_recursive_lock_unlock();
  [a1 willChangeValueForKey:v9 withSetMutation:3 usingObjects:a3];
  Method InstanceMethod = class_getInstanceMethod((Class)*IndexedIvars, (SEL)a2);
  method_invoke(a1, InstanceMethod, a3);
  [a1 didChangeValueForKey:v9 withSetMutation:3 usingObjects:a3];
}

void NSKVOMinusSetAndNotify(void *a1, const void *a2, uint64_t a3)
{
  Class Class = object_getClass(a1);
  IndexedIvars = (CFDictionaryRef *)object_getIndexedIvars(Class);
  os_unfair_recursive_lock_lock_with_options();
  id v9 = (id)objc_msgSend((id)CFDictionaryGetValue(IndexedIvars[3], a2), "copyWithZone:", 0);
  os_unfair_recursive_lock_unlock();
  [a1 willChangeValueForKey:v9 withSetMutation:2 usingObjects:a3];
  Method InstanceMethod = class_getInstanceMethod((Class)*IndexedIvars, (SEL)a2);
  method_invoke(a1, InstanceMethod, a3);
  [a1 didChangeValueForKey:v9 withSetMutation:2 usingObjects:a3];
}

void NSKVORemoveObjectAndNotify(void *a1, const void *a2, uint64_t a3)
{
  v10[1] = *MEMORY[0x1895F89C0];
  v10[0] = a3;
  Class Class = object_getClass(a1);
  IndexedIvars = (CFDictionaryRef *)object_getIndexedIvars(Class);
  os_unfair_recursive_lock_lock_with_options();
  __int128 v7 = (void *)objc_msgSend((id)CFDictionaryGetValue(IndexedIvars[3], a2), "copyWithZone:", 0);
  os_unfair_recursive_lock_unlock();
  int v8 = (void *)[objc_alloc(MEMORY[0x189604010]) initWithObjects:v10 count:1];
  [a1 willChangeValueForKey:v7 withSetMutation:2 usingObjects:v8];
  Method InstanceMethod = class_getInstanceMethod((Class)*IndexedIvars, (SEL)a2);
  method_invoke(a1, InstanceMethod, v10[0]);
  [a1 didChangeValueForKey:v7 withSetMutation:2 usingObjects:v8];
}

void NSKVOUnionSetAndNotify(void *a1, const void *a2, uint64_t a3)
{
  Class Class = object_getClass(a1);
  IndexedIvars = (CFDictionaryRef *)object_getIndexedIvars(Class);
  os_unfair_recursive_lock_lock_with_options();
  id v9 = (id)objc_msgSend((id)CFDictionaryGetValue(IndexedIvars[3], a2), "copyWithZone:", 0);
  os_unfair_recursive_lock_unlock();
  [a1 willChangeValueForKey:v9 withSetMutation:1 usingObjects:a3];
  Method InstanceMethod = class_getInstanceMethod((Class)*IndexedIvars, (SEL)a2);
  method_invoke(a1, InstanceMethod, a3);
  [a1 didChangeValueForKey:v9 withSetMutation:1 usingObjects:a3];
}

BOOL _NSKVONotifyingMutatorsShouldNotifyForIsaAndKey(objc_class *a1, const void *a2)
{
  IndexedIvars = (CFSetRef *)object_getIndexedIvars(a1);
  os_unfair_recursive_lock_lock_with_options();
  BOOL v4 = CFSetContainsValue(IndexedIvars[2], a2) != 0;
  os_unfair_recursive_lock_unlock();
  return v4;
}

id __NSKVODeallocate_block_invoke(uint64_t a1)
{
  return method_invoke(*(id *)(a1 + 32), *(Method *)(a1 + 40));
}

id __NSKVODeallocate_block_invoke_2(uint64_t a1)
{
  return method_invoke(*(id *)(a1 + 32), *(Method *)(a1 + 40));
}

void _NSSetObjectValueAndNotify(void *a1, const void *a2, uint64_t a3)
{
  v11[8] = *MEMORY[0x1895F89C0];
  Class Class = object_getClass(a1);
  if ((char *)class_getMethodImplementation(Class, sel__isKVOA) == (char *)NSKVOIsAutonotifying
    && (IndexedIvars = (CFDictionaryRef *)object_getIndexedIvars(Class)) != 0LL)
  {
    int v8 = IndexedIvars;
    os_unfair_recursive_lock_lock_with_options();
    id v9 = (void *)objc_msgSend((id)CFDictionaryGetValue(v8[3], a2), "copyWithZone:", 0);
    os_unfair_recursive_lock_unlock();
    if (*((_BYTE *)v8 + 40))
    {
      [a1 willChangeValueForKey:v9];
      MethodIMP Implementation = class_getMethodImplementation((Class)*v8, (SEL)a2);
      MethodImplementation(a1, (SEL)a2, a3);
      [a1 didChangeValueForKey:v9];
    }

    else
    {
      v11[0] = MEMORY[0x1895F87A8];
      v11[1] = 3221225472LL;
      void v11[2] = ___NSSetObjectValueAndNotify_block_invoke;
      _OWORD v11[3] = &unk_189C9E320;
      v11[6] = v8;
      v11[7] = a2;
      v11[4] = a1;
      _OWORD v11[5] = a3;
      [a1 _changeValueForKey:v9 key:0 key:0 usingBlock:v11];
    }
  }

  else
  {
    objc_msgSend(a1, (SEL)a2, a3);
  }

void _NSSetBoolValueAndNotify(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v13 = *MEMORY[0x1895F89C0];
  Class Class = object_getClass(a1);
  if ((char *)class_getMethodImplementation(Class, sel__isKVOA) == (char *)NSKVOIsAutonotifying
    && (IndexedIvars = (CFDictionaryRef *)object_getIndexedIvars(Class)) != 0LL)
  {
    int v8 = IndexedIvars;
    os_unfair_recursive_lock_lock_with_options();
    id v9 = (void *)objc_msgSend((id)CFDictionaryGetValue(v8[3], a2), "copyWithZone:", 0);
    os_unfair_recursive_lock_unlock();
    if (*((_BYTE *)v8 + 40))
    {
      [a1 willChangeValueForKey:v9];
      MethodIMP Implementation = class_getMethodImplementation((Class)*v8, (SEL)a2);
      MethodImplementation(a1, (SEL)a2, a3);
      [a1 didChangeValueForKey:v9];
    }

    else
    {
      v11[0] = MEMORY[0x1895F87A8];
      v11[1] = 3221225472LL;
      void v11[2] = ___NSSetBoolValueAndNotify_block_invoke;
      _OWORD v11[3] = &unk_189C9E348;
      _OWORD v11[5] = v8;
      v11[6] = a2;
      v11[4] = a1;
      char v12 = a3;
      [a1 _changeValueForKey:v9 key:0 key:0 usingBlock:v11];
    }
  }

  else
  {
    objc_msgSend(a1, (SEL)a2, a3);
  }

void _NSSetCharValueAndNotify(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v13 = *MEMORY[0x1895F89C0];
  Class Class = object_getClass(a1);
  if ((char *)class_getMethodImplementation(Class, sel__isKVOA) == (char *)NSKVOIsAutonotifying
    && (IndexedIvars = (CFDictionaryRef *)object_getIndexedIvars(Class)) != 0LL)
  {
    int v8 = IndexedIvars;
    os_unfair_recursive_lock_lock_with_options();
    id v9 = (void *)objc_msgSend((id)CFDictionaryGetValue(v8[3], a2), "copyWithZone:", 0);
    os_unfair_recursive_lock_unlock();
    if (*((_BYTE *)v8 + 40))
    {
      [a1 willChangeValueForKey:v9];
      MethodIMP Implementation = class_getMethodImplementation((Class)*v8, (SEL)a2);
      MethodImplementation(a1, (SEL)a2, a3);
      [a1 didChangeValueForKey:v9];
    }

    else
    {
      v11[0] = MEMORY[0x1895F87A8];
      v11[1] = 3221225472LL;
      void v11[2] = ___NSSetCharValueAndNotify_block_invoke;
      _OWORD v11[3] = &unk_189C9E348;
      _OWORD v11[5] = v8;
      v11[6] = a2;
      v11[4] = a1;
      char v12 = a3;
      [a1 _changeValueForKey:v9 key:0 key:0 usingBlock:v11];
    }
  }

  else
  {
    objc_msgSend(a1, (SEL)a2, a3);
  }

void _NSSetUnsignedCharValueAndNotify(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v13 = *MEMORY[0x1895F89C0];
  Class Class = object_getClass(a1);
  if ((char *)class_getMethodImplementation(Class, sel__isKVOA) == (char *)NSKVOIsAutonotifying
    && (IndexedIvars = (CFDictionaryRef *)object_getIndexedIvars(Class)) != 0LL)
  {
    int v8 = IndexedIvars;
    os_unfair_recursive_lock_lock_with_options();
    id v9 = (void *)objc_msgSend((id)CFDictionaryGetValue(v8[3], a2), "copyWithZone:", 0);
    os_unfair_recursive_lock_unlock();
    if (*((_BYTE *)v8 + 40))
    {
      [a1 willChangeValueForKey:v9];
      MethodIMP Implementation = class_getMethodImplementation((Class)*v8, (SEL)a2);
      MethodImplementation(a1, (SEL)a2, a3);
      [a1 didChangeValueForKey:v9];
    }

    else
    {
      v11[0] = MEMORY[0x1895F87A8];
      v11[1] = 3221225472LL;
      void v11[2] = ___NSSetUnsignedCharValueAndNotify_block_invoke;
      _OWORD v11[3] = &unk_189C9E348;
      _OWORD v11[5] = v8;
      v11[6] = a2;
      v11[4] = a1;
      char v12 = a3;
      [a1 _changeValueForKey:v9 key:0 key:0 usingBlock:v11];
    }
  }

  else
  {
    objc_msgSend(a1, (SEL)a2, a3);
  }

void _NSSetDoubleValueAndNotify(void *a1, const void *a2, double a3)
{
  v11[8] = *MEMORY[0x1895F89C0];
  Class Class = object_getClass(a1);
  if ((char *)class_getMethodImplementation(Class, sel__isKVOA) == (char *)NSKVOIsAutonotifying
    && (IndexedIvars = (CFDictionaryRef *)object_getIndexedIvars(Class)) != 0LL)
  {
    int v8 = IndexedIvars;
    os_unfair_recursive_lock_lock_with_options();
    id v9 = (void *)objc_msgSend((id)CFDictionaryGetValue(v8[3], a2), "copyWithZone:", 0);
    os_unfair_recursive_lock_unlock();
    if (*((_BYTE *)v8 + 40))
    {
      [a1 willChangeValueForKey:v9];
      MethodIMP Implementation = class_getMethodImplementation((Class)*v8, (SEL)a2);
      MethodImplementation(a1, (SEL)a2, a3);
      [a1 didChangeValueForKey:v9];
    }

    else
    {
      v11[0] = MEMORY[0x1895F87A8];
      v11[1] = 3221225472LL;
      void v11[2] = ___NSSetDoubleValueAndNotify_block_invoke;
      _OWORD v11[3] = &unk_189C9E370;
      _OWORD v11[5] = v8;
      v11[6] = a2;
      v11[4] = a1;
      *(double *)&void v11[7] = a3;
      [a1 _changeValueForKey:v9 key:0 key:0 usingBlock:v11];
    }
  }

  else
  {
    objc_msgSend(a1, (SEL)a2, a3);
  }

void _NSSetFloatValueAndNotify(void *a1, const void *a2, float a3)
{
  uint64_t v14 = *MEMORY[0x1895F89C0];
  Class Class = object_getClass(a1);
  if ((char *)class_getMethodImplementation(Class, sel__isKVOA) == (char *)NSKVOIsAutonotifying
    && (IndexedIvars = (CFDictionaryRef *)object_getIndexedIvars(Class)) != 0LL)
  {
    id v9 = IndexedIvars;
    os_unfair_recursive_lock_lock_with_options();
    id v10 = (void *)objc_msgSend((id)CFDictionaryGetValue(v9[3], a2), "copyWithZone:", 0);
    os_unfair_recursive_lock_unlock();
    if (*((_BYTE *)v9 + 40))
    {
      [a1 willChangeValueForKey:v10];
      MethodIMP Implementation = class_getMethodImplementation((Class)*v9, (SEL)a2);
      MethodImplementation(a1, (SEL)a2, a3);
      [a1 didChangeValueForKey:v10];
    }

    else
    {
      v12[0] = MEMORY[0x1895F87A8];
      v12[1] = 3221225472LL;
      v12[2] = ___NSSetFloatValueAndNotify_block_invoke;
      v12[3] = &unk_189C9A9E0;
      v12[5] = v9;
      void v12[6] = a2;
      void v12[4] = a1;
      float v13 = a3;
      [a1 _changeValueForKey:v10 key:0 key:0 usingBlock:v12];
    }
  }

  else
  {
    *(float *)&double v7 = a3;
    objc_msgSend(a1, (SEL)a2, v7);
  }

void _NSSetIntValueAndNotify(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v13 = *MEMORY[0x1895F89C0];
  Class Class = object_getClass(a1);
  if ((char *)class_getMethodImplementation(Class, sel__isKVOA) == (char *)NSKVOIsAutonotifying
    && (IndexedIvars = (CFDictionaryRef *)object_getIndexedIvars(Class)) != 0LL)
  {
    int v8 = IndexedIvars;
    os_unfair_recursive_lock_lock_with_options();
    id v9 = (void *)objc_msgSend((id)CFDictionaryGetValue(v8[3], a2), "copyWithZone:", 0);
    os_unfair_recursive_lock_unlock();
    if (*((_BYTE *)v8 + 40))
    {
      [a1 willChangeValueForKey:v9];
      MethodIMP Implementation = class_getMethodImplementation((Class)*v8, (SEL)a2);
      MethodImplementation(a1, (SEL)a2, a3);
      [a1 didChangeValueForKey:v9];
    }

    else
    {
      v11[0] = MEMORY[0x1895F87A8];
      v11[1] = 3221225472LL;
      void v11[2] = ___NSSetIntValueAndNotify_block_invoke;
      _OWORD v11[3] = &unk_189C9A9E0;
      _OWORD v11[5] = v8;
      v11[6] = a2;
      v11[4] = a1;
      int v12 = a3;
      [a1 _changeValueForKey:v9 key:0 key:0 usingBlock:v11];
    }
  }

  else
  {
    objc_msgSend(a1, (SEL)a2, a3);
  }

void _NSSetUnsignedIntValueAndNotify(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v13 = *MEMORY[0x1895F89C0];
  Class Class = object_getClass(a1);
  if ((char *)class_getMethodImplementation(Class, sel__isKVOA) == (char *)NSKVOIsAutonotifying
    && (IndexedIvars = (CFDictionaryRef *)object_getIndexedIvars(Class)) != 0LL)
  {
    int v8 = IndexedIvars;
    os_unfair_recursive_lock_lock_with_options();
    id v9 = (void *)objc_msgSend((id)CFDictionaryGetValue(v8[3], a2), "copyWithZone:", 0);
    os_unfair_recursive_lock_unlock();
    if (*((_BYTE *)v8 + 40))
    {
      [a1 willChangeValueForKey:v9];
      MethodIMP Implementation = class_getMethodImplementation((Class)*v8, (SEL)a2);
      MethodImplementation(a1, (SEL)a2, a3);
      [a1 didChangeValueForKey:v9];
    }

    else
    {
      v11[0] = MEMORY[0x1895F87A8];
      v11[1] = 3221225472LL;
      void v11[2] = ___NSSetUnsignedIntValueAndNotify_block_invoke;
      _OWORD v11[3] = &unk_189C9A9E0;
      _OWORD v11[5] = v8;
      v11[6] = a2;
      v11[4] = a1;
      int v12 = a3;
      [a1 _changeValueForKey:v9 key:0 key:0 usingBlock:v11];
    }
  }

  else
  {
    objc_msgSend(a1, (SEL)a2, a3);
  }

void _NSSetLongValueAndNotify(void *a1, const void *a2, uint64_t a3)
{
  v11[8] = *MEMORY[0x1895F89C0];
  Class Class = object_getClass(a1);
  if ((char *)class_getMethodImplementation(Class, sel__isKVOA) == (char *)NSKVOIsAutonotifying
    && (IndexedIvars = (CFDictionaryRef *)object_getIndexedIvars(Class)) != 0LL)
  {
    int v8 = IndexedIvars;
    os_unfair_recursive_lock_lock_with_options();
    id v9 = (void *)objc_msgSend((id)CFDictionaryGetValue(v8[3], a2), "copyWithZone:", 0);
    os_unfair_recursive_lock_unlock();
    if (*((_BYTE *)v8 + 40))
    {
      [a1 willChangeValueForKey:v9];
      MethodIMP Implementation = class_getMethodImplementation((Class)*v8, (SEL)a2);
      MethodImplementation(a1, (SEL)a2, a3);
      [a1 didChangeValueForKey:v9];
    }

    else
    {
      v11[0] = MEMORY[0x1895F87A8];
      v11[1] = 3221225472LL;
      void v11[2] = ___NSSetLongValueAndNotify_block_invoke;
      _OWORD v11[3] = &unk_189C9E370;
      v11[4] = a1;
      _OWORD v11[5] = v8;
      v11[6] = a2;
      void v11[7] = a3;
      [a1 _changeValueForKey:v9 key:0 key:0 usingBlock:v11];
    }
  }

  else
  {
    objc_msgSend(a1, (SEL)a2, a3);
  }

void _NSSetUnsignedLongValueAndNotify(void *a1, const void *a2, uint64_t a3)
{
  v11[8] = *MEMORY[0x1895F89C0];
  Class Class = object_getClass(a1);
  if ((char *)class_getMethodImplementation(Class, sel__isKVOA) == (char *)NSKVOIsAutonotifying
    && (IndexedIvars = (CFDictionaryRef *)object_getIndexedIvars(Class)) != 0LL)
  {
    int v8 = IndexedIvars;
    os_unfair_recursive_lock_lock_with_options();
    id v9 = (void *)objc_msgSend((id)CFDictionaryGetValue(v8[3], a2), "copyWithZone:", 0);
    os_unfair_recursive_lock_unlock();
    if (*((_BYTE *)v8 + 40))
    {
      [a1 willChangeValueForKey:v9];
      MethodIMP Implementation = class_getMethodImplementation((Class)*v8, (SEL)a2);
      MethodImplementation(a1, (SEL)a2, a3);
      [a1 didChangeValueForKey:v9];
    }

    else
    {
      v11[0] = MEMORY[0x1895F87A8];
      v11[1] = 3221225472LL;
      void v11[2] = ___NSSetUnsignedLongValueAndNotify_block_invoke;
      _OWORD v11[3] = &unk_189C9E370;
      v11[4] = a1;
      _OWORD v11[5] = v8;
      v11[6] = a2;
      void v11[7] = a3;
      [a1 _changeValueForKey:v9 key:0 key:0 usingBlock:v11];
    }
  }

  else
  {
    objc_msgSend(a1, (SEL)a2, a3);
  }

void _NSSetLongLongValueAndNotify(void *a1, const void *a2, uint64_t a3)
{
  v11[8] = *MEMORY[0x1895F89C0];
  Class Class = object_getClass(a1);
  if ((char *)class_getMethodImplementation(Class, sel__isKVOA) == (char *)NSKVOIsAutonotifying
    && (IndexedIvars = (CFDictionaryRef *)object_getIndexedIvars(Class)) != 0LL)
  {
    int v8 = IndexedIvars;
    os_unfair_recursive_lock_lock_with_options();
    id v9 = (void *)objc_msgSend((id)CFDictionaryGetValue(v8[3], a2), "copyWithZone:", 0);
    os_unfair_recursive_lock_unlock();
    if (*((_BYTE *)v8 + 40))
    {
      [a1 willChangeValueForKey:v9];
      MethodIMP Implementation = class_getMethodImplementation((Class)*v8, (SEL)a2);
      MethodImplementation(a1, (SEL)a2, a3);
      [a1 didChangeValueForKey:v9];
    }

    else
    {
      v11[0] = MEMORY[0x1895F87A8];
      v11[1] = 3221225472LL;
      void v11[2] = ___NSSetLongLongValueAndNotify_block_invoke;
      _OWORD v11[3] = &unk_189C9E370;
      v11[4] = a1;
      _OWORD v11[5] = v8;
      v11[6] = a2;
      void v11[7] = a3;
      [a1 _changeValueForKey:v9 key:0 key:0 usingBlock:v11];
    }
  }

  else
  {
    objc_msgSend(a1, (SEL)a2, a3);
  }

void _NSSetUnsignedLongLongValueAndNotify(void *a1, const void *a2, uint64_t a3)
{
  v11[8] = *MEMORY[0x1895F89C0];
  Class Class = object_getClass(a1);
  if ((char *)class_getMethodImplementation(Class, sel__isKVOA) == (char *)NSKVOIsAutonotifying
    && (IndexedIvars = (CFDictionaryRef *)object_getIndexedIvars(Class)) != 0LL)
  {
    int v8 = IndexedIvars;
    os_unfair_recursive_lock_lock_with_options();
    id v9 = (void *)objc_msgSend((id)CFDictionaryGetValue(v8[3], a2), "copyWithZone:", 0);
    os_unfair_recursive_lock_unlock();
    if (*((_BYTE *)v8 + 40))
    {
      [a1 willChangeValueForKey:v9];
      MethodIMP Implementation = class_getMethodImplementation((Class)*v8, (SEL)a2);
      MethodImplementation(a1, (SEL)a2, a3);
      [a1 didChangeValueForKey:v9];
    }

    else
    {
      v11[0] = MEMORY[0x1895F87A8];
      v11[1] = 3221225472LL;
      void v11[2] = ___NSSetUnsignedLongLongValueAndNotify_block_invoke;
      _OWORD v11[3] = &unk_189C9E370;
      v11[4] = a1;
      _OWORD v11[5] = v8;
      v11[6] = a2;
      void v11[7] = a3;
      [a1 _changeValueForKey:v9 key:0 key:0 usingBlock:v11];
    }
  }

  else
  {
    objc_msgSend(a1, (SEL)a2, a3);
  }

void _NSSetShortValueAndNotify(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v13 = *MEMORY[0x1895F89C0];
  Class Class = object_getClass(a1);
  if ((char *)class_getMethodImplementation(Class, sel__isKVOA) == (char *)NSKVOIsAutonotifying
    && (IndexedIvars = (CFDictionaryRef *)object_getIndexedIvars(Class)) != 0LL)
  {
    int v8 = IndexedIvars;
    os_unfair_recursive_lock_lock_with_options();
    id v9 = (void *)objc_msgSend((id)CFDictionaryGetValue(v8[3], a2), "copyWithZone:", 0);
    os_unfair_recursive_lock_unlock();
    if (*((_BYTE *)v8 + 40))
    {
      [a1 willChangeValueForKey:v9];
      MethodIMP Implementation = class_getMethodImplementation((Class)*v8, (SEL)a2);
      MethodImplementation(a1, (SEL)a2, a3);
      [a1 didChangeValueForKey:v9];
    }

    else
    {
      v11[0] = MEMORY[0x1895F87A8];
      v11[1] = 3221225472LL;
      void v11[2] = ___NSSetShortValueAndNotify_block_invoke;
      _OWORD v11[3] = &unk_189C9E398;
      _OWORD v11[5] = v8;
      v11[6] = a2;
      v11[4] = a1;
      __int16 v12 = a3;
      [a1 _changeValueForKey:v9 key:0 key:0 usingBlock:v11];
    }
  }

  else
  {
    objc_msgSend(a1, (SEL)a2, a3);
  }

void _NSSetUnsignedShortValueAndNotify(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v13 = *MEMORY[0x1895F89C0];
  Class Class = object_getClass(a1);
  if ((char *)class_getMethodImplementation(Class, sel__isKVOA) == (char *)NSKVOIsAutonotifying
    && (IndexedIvars = (CFDictionaryRef *)object_getIndexedIvars(Class)) != 0LL)
  {
    int v8 = IndexedIvars;
    os_unfair_recursive_lock_lock_with_options();
    id v9 = (void *)objc_msgSend((id)CFDictionaryGetValue(v8[3], a2), "copyWithZone:", 0);
    os_unfair_recursive_lock_unlock();
    if (*((_BYTE *)v8 + 40))
    {
      [a1 willChangeValueForKey:v9];
      MethodIMP Implementation = class_getMethodImplementation((Class)*v8, (SEL)a2);
      MethodImplementation(a1, (SEL)a2, a3);
      [a1 didChangeValueForKey:v9];
    }

    else
    {
      v11[0] = MEMORY[0x1895F87A8];
      v11[1] = 3221225472LL;
      void v11[2] = ___NSSetUnsignedShortValueAndNotify_block_invoke;
      _OWORD v11[3] = &unk_189C9E398;
      _OWORD v11[5] = v8;
      v11[6] = a2;
      v11[4] = a1;
      __int16 v12 = a3;
      [a1 _changeValueForKey:v9 key:0 key:0 usingBlock:v11];
    }
  }

  else
  {
    objc_msgSend(a1, (SEL)a2, a3);
  }

void _NSSetPointValueAndNotify(void *a1, const void *a2, double a3, double a4)
{
  v13[9] = *MEMORY[0x1895F89C0];
  Class Class = object_getClass(a1);
  if ((char *)class_getMethodImplementation(Class, sel__isKVOA) == (char *)NSKVOIsAutonotifying
    && (IndexedIvars = (CFDictionaryRef *)object_getIndexedIvars(Class)) != 0LL)
  {
    id v10 = IndexedIvars;
    os_unfair_recursive_lock_lock_with_options();
    id v11 = (void *)objc_msgSend((id)CFDictionaryGetValue(v10[3], a2), "copyWithZone:", 0);
    os_unfair_recursive_lock_unlock();
    if (*((_BYTE *)v10 + 40))
    {
      [a1 willChangeValueForKey:v11];
      MethodIMP Implementation = class_getMethodImplementation((Class)*v10, (SEL)a2);
      MethodImplementation(a1, (SEL)a2, a3, a4);
      [a1 didChangeValueForKey:v11];
    }

    else
    {
      v13[0] = MEMORY[0x1895F87A8];
      v13[1] = 3221225472LL;
      void v13[2] = ___NSSetPointValueAndNotify_block_invoke;
      _OWORD v13[3] = &unk_189C9E3C0;
      uint64_t v13[5] = v10;
      v13[6] = a2;
      _OWORD v13[4] = a1;
      *(double *)&v13[7] = a3;
      *(double *)&v13[8] = a4;
      [a1 _changeValueForKey:v11 key:0 key:0 usingBlock:v13];
    }
  }

  else
  {
    objc_msgSend(a1, (SEL)a2, a3, a4);
  }

void _NSSetRangeValueAndNotify(void *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  v13[9] = *MEMORY[0x1895F89C0];
  Class Class = object_getClass(a1);
  if ((char *)class_getMethodImplementation(Class, sel__isKVOA) == (char *)NSKVOIsAutonotifying
    && (IndexedIvars = (CFDictionaryRef *)object_getIndexedIvars(Class)) != 0LL)
  {
    id v10 = IndexedIvars;
    os_unfair_recursive_lock_lock_with_options();
    id v11 = (void *)objc_msgSend((id)CFDictionaryGetValue(v10[3], a2), "copyWithZone:", 0);
    os_unfair_recursive_lock_unlock();
    if (*((_BYTE *)v10 + 40))
    {
      [a1 willChangeValueForKey:v11];
      MethodIMP Implementation = class_getMethodImplementation((Class)*v10, (SEL)a2);
      MethodImplementation(a1, (SEL)a2, a3, a4);
      [a1 didChangeValueForKey:v11];
    }

    else
    {
      v13[0] = MEMORY[0x1895F87A8];
      v13[1] = 3221225472LL;
      void v13[2] = ___NSSetRangeValueAndNotify_block_invoke;
      _OWORD v13[3] = &unk_189C9E3C0;
      _OWORD v13[4] = a1;
      uint64_t v13[5] = v10;
      v13[6] = a2;
      v13[7] = a3;
      v13[8] = a4;
      [a1 _changeValueForKey:v11 key:0 key:0 usingBlock:v13];
    }
  }

  else
  {
    objc_msgSend(a1, (SEL)a2, a3, a4);
  }

void _NSSetRectValueAndNotify(void *a1, const void *a2, double a3, double a4, double a5, double a6)
{
  v17[11] = *MEMORY[0x1895F89C0];
  Class Class = object_getClass(a1);
  if ((char *)class_getMethodImplementation(Class, sel__isKVOA) == (char *)NSKVOIsAutonotifying
    && (IndexedIvars = (CFDictionaryRef *)object_getIndexedIvars(Class)) != 0LL)
  {
    uint64_t v14 = IndexedIvars;
    os_unfair_recursive_lock_lock_with_options();
    uint64_t v15 = (void *)objc_msgSend((id)CFDictionaryGetValue(v14[3], a2), "copyWithZone:", 0);
    os_unfair_recursive_lock_unlock();
    if (*((_BYTE *)v14 + 40))
    {
      [a1 willChangeValueForKey:v15];
      MethodIMP Implementation = class_getMethodImplementation((Class)*v14, (SEL)a2);
      MethodImplementation(a1, (SEL)a2, a3, a4, a5, a6);
      [a1 didChangeValueForKey:v15];
    }

    else
    {
      v17[0] = MEMORY[0x1895F87A8];
      v17[1] = 3221225472LL;
      void v17[2] = ___NSSetRectValueAndNotify_block_invoke;
      void v17[3] = &unk_189C9E3E8;
      v17[5] = v14;
      void v17[6] = a2;
      void v17[4] = a1;
      *(double *)&v17[7] = a3;
      *(double *)&_BYTE v17[8] = a4;
      *(double *)&v17[9] = a5;
      *(double *)&v17[10] = a6;
      [a1 _changeValueForKey:v15 key:0 key:0 usingBlock:v17];
    }
  }

  else
  {
    objc_msgSend(a1, (SEL)a2, a3, a4, a5, a6);
  }

void _NSSetSizeValueAndNotify(void *a1, const void *a2, double a3, double a4)
{
  v13[9] = *MEMORY[0x1895F89C0];
  Class Class = object_getClass(a1);
  if ((char *)class_getMethodImplementation(Class, sel__isKVOA) == (char *)NSKVOIsAutonotifying
    && (IndexedIvars = (CFDictionaryRef *)object_getIndexedIvars(Class)) != 0LL)
  {
    id v10 = IndexedIvars;
    os_unfair_recursive_lock_lock_with_options();
    id v11 = (void *)objc_msgSend((id)CFDictionaryGetValue(v10[3], a2), "copyWithZone:", 0);
    os_unfair_recursive_lock_unlock();
    if (*((_BYTE *)v10 + 40))
    {
      [a1 willChangeValueForKey:v11];
      MethodIMP Implementation = class_getMethodImplementation((Class)*v10, (SEL)a2);
      MethodImplementation(a1, (SEL)a2, a3, a4);
      [a1 didChangeValueForKey:v11];
    }

    else
    {
      v13[0] = MEMORY[0x1895F87A8];
      v13[1] = 3221225472LL;
      void v13[2] = ___NSSetSizeValueAndNotify_block_invoke;
      _OWORD v13[3] = &unk_189C9E3C0;
      uint64_t v13[5] = v10;
      v13[6] = a2;
      _OWORD v13[4] = a1;
      *(double *)&v13[7] = a3;
      *(double *)&v13[8] = a4;
      [a1 _changeValueForKey:v11 key:0 key:0 usingBlock:v13];
    }
  }

  else
  {
    objc_msgSend(a1, (SEL)a2, a3, a4);
  }

uint64_t getStackObservedValueClassAndBoxSize(void *a1)
{
  if (qword_18C4966E0 != -1) {
    dispatch_once(&qword_18C4966E0, &__block_literal_global_19);
  }
  *a1 = _MergedGlobals_102;
  return qword_18C4966D8;
}

size_t __getStackObservedValueClassAndBoxSize_block_invoke()
{
  qword_18C4966D8 = objc_opt_class();
  size_t result = class_getInstanceSize((Class)qword_18C4966D8);
  _MergedGlobals_102 = result;
  return result;
}

uint64_t _NSKeyValueAddObservationInfoWatcher(uint64_t a1)
{
  uint64_t result = _CFGetTSD();
  uint64_t v3 = (void *)result;
  if (!result)
  {
    BOOL v4 = malloc_default_zone();
    uint64_t v3 = malloc_zone_calloc(v4, 1uLL, 0x58uLL);
    uint64_t result = _CFSetTSD();
  }

  *(void *)(a1 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = v3[1];
  v3[1] = a1;
  return result;
}

void _NSKeyValueRemoveObservationInfoWatcher(uint64_t a1)
{
  uint64_t v2 = _CFGetTSD();
  if (!v2)
  {
    uint64_t v3 = malloc_default_zone();
    uint64_t v2 = (uint64_t)malloc_zone_calloc(v3, 1uLL, 0x58uLL);
    _CFSetTSD();
  }

  uint64_t v4 = *(void *)(v2 + 8);
  if (v4 != a1) {
    NSLog((NSString *)@"_NSKeyValueRemoveObservationInfoWatcher() was called in a surprising way.");
  }
  if (v4) {
    *(void *)(v2 + _Block_object_dispose((const void *)(v10 - 72), 8) = *(void *)(v4 + 16);
  }
}

void _NSKeyValueRemoveObservationInfoForObject(uint64_t a1)
{
  uint64_t v2 = ~a1;
  if (NSKeyValueObservationInfoPerObject)
  {
    id Value = (id)CFDictionaryGetValue((CFDictionaryRef)NSKeyValueObservationInfoPerObject, (const void *)v2);
    CFMutableDictionaryRef Mutable = (__CFDictionary *)NSKeyValueObservationInfoPerObject;
    if (NSKeyValueObservationInfoPerObject) {
      goto LABEL_6;
    }
  }

  else
  {
    id Value = 0LL;
  }

  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(0LL, 0LL, 0LL, 0LL);
  NSKeyValueObservationInfoPerObject = (uint64_t)Mutable;
LABEL_6:
  CFDictionaryRemoveValue(Mutable, (const void *)v2);
  if (NSKeyValueSharedObservationInfoPerObject) {
    CFDictionaryRemoveValue((CFMutableDictionaryRef)NSKeyValueSharedObservationInfoPerObject, (const void *)v2);
  }
  os_unfair_lock_unlock(&NSKeyValueObservationInfoLock);
}

void sub_1835AA2D8(_Unwind_Exception *a1, int a2)
{
  if (a2)
  {
    objc_end_catch();
    objc_begin_catch(a1);
    JUMPOUT(0x1835AA1D0LL);
  }

  _Unwind_Resume(a1);
}

void sub_1835AA2F4(_Unwind_Exception *a1)
{
  if ((v1 & 1) != 0) {
    JUMPOUT(0x1835AA2FCLL);
  }
  _Unwind_Resume(a1);
}

void sub_1835AA304(uint64_t a1, int a2)
{
  if (a2) {
    objc_terminate();
  }
  JUMPOUT(0x1835AA310LL);
}

void sub_1835AA5BC( void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, char a11)
{
  *(void *)(v11 + 32) = v12;
  *(void *)(v11 + 40) = v16;
  *(void *)(v11 + 4_Block_object_dispose((const void *)(v10 - 72), 8) = v15;
  *(void *)(v11 + 56) = v14;
  *(void *)(v11 + 64) = v13;
  *(_BYTE *)(v11 + 72) = a11;
  objc_exception_rethrow();
  __break(1u);
}

void sub_1835AA5DC(_Unwind_Exception *a1)
{
}

void sub_1835AA6DC(void *a1)
{
}

void sub_1835AA700(_Unwind_Exception *a1)
{
}

void sub_1835AA88C( void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, char a15)
{
  *(void *)(v15 + 32) = a9;
  *(void *)(v15 + 40) = a10;
  *(void *)(v15 + 4_Block_object_dispose((const void *)(v10 - 72), 8) = a11;
  *(void *)(v15 + 56) = a12;
  *(void *)(v15 + 64) = a13;
  *(_BYTE *)(v15 + 72) = a15;
  objc_exception_rethrow();
  __break(1u);
}

void sub_1835AA8D0(_Unwind_Exception *a1)
{
}

void sub_1835AA9BC(void *a1)
{
}

void sub_1835AA9E0(_Unwind_Exception *a1)
{
}

uint64_t NSKeyValueWillChangeByOrderedToManyMutation@<X0>( void *a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X3>, uint64_t *a5@<X4>, _BYTE *a6@<X5>, void *a7@<X8>)
{
  if (a3)
  {
    uint64_t v13 = a5[1];
    uint64_t v14 = _CFGetTSD();
    if (v14 && (uint64_t v15 = v14, v16 = _CFGetTSD(), v15 == a2) && (void *)v16 == a1)
    {
      uint64_t v17 = 0LL;
      char v18 = 0;
      uint64_t v19 = 0LL;
    }

    else
    {
      _CFSetTSD();
      _CFSetTSD();
      uint64_t v17 = [a1 valueForKey:a2];
      _CFSetTSD();
      _CFSetTSD();
      if (v17 && _NSIsNSOrderedSet())
      {
        uint64_t v21 = *a5;
        if (*a5 != 4 && v21 != 2)
        {
          uint64_t v19 = 0LL;
          char v18 = 1;
          if ((a4 & 2) == 0) {
            goto LABEL_20;
          }
LABEL_19:
          if (v21 != 2)
          {
            char v23 = (void *)v17;
            if ((v18 & 1) == 0) {
              char v23 = (void *)[a1 valueForKey:a2];
            }
            uint64_t result = [v23 objectsAtIndexes:v13];
            uint64_t v21 = *a5;
            goto LABEL_24;
          }

__n128 NSKeyValueDidChangeByOrderedToManyMutation@<Q0>( void *a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, int a4@<W3>, char a5@<W4>, __int128 *a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v36 = *MEMORY[0x1895F89C0];
  if (!a4)
  {
    __int128 v18 = a6[1];
    __int128 v32 = *a6;
    __int128 v33 = v18;
    uint64_t v34 = (void (*)(uint64_t))*((void *)a6 + 4);
    NSKeyValueDidChangeBySetting(a1, a2, a3, a5, (uint64_t)&v32, a7);
    return result;
  }

  id v12 = (id)*((void *)a6 + 3);
  uint64_t v13 = _CFGetTSD();
  if (v13 && (uint64_t v14 = v13, v15 = _CFGetTSD(), v14 == a2) && (void *)v15 == a1)
  {
    char v16 = 0;
    uint64_t v17 = 0LL;
    if ((a5 & 1) == 0) {
      goto LABEL_20;
    }
  }

  else
  {
    _CFSetTSD();
    _CFSetTSD();
    uint64_t v17 = (void *)[a1 valueForKey:a2];
    _CFSetTSD();
    _CFSetTSD();
    if (v17 && _NSIsNSOrderedSet())
    {
      uint64_t v20 = *(void *)a6;
      if (*(void *)a6 == 4LL)
      {
        *(void *)&__int128 v32 = 0LL;
        *((void *)&v32 + 1) = &v32;
        *(void *)&__int128 v33 = 0x3052000000LL;
        *((void *)&v33 + 1) = __Block_byref_object_copy__9;
        uint64_t v34 = __Block_byref_object_dispose__9;
        uint64_t v35 = 0LL;
        uint64_t v21 = [*((id *)a6 + 4) bytes];
        v31[0] = MEMORY[0x1895F87A8];
        v31[1] = 3221225472LL;
        void v31[2] = __NSKeyValueDidChangeByOrderedToManyMutation_block_invoke;
        _OWORD v31[3] = &unk_189C9E638;
        v31[6] = &v32;
        v31[7] = v21;
        _OWORD v31[4] = v17;
        v31[5] = v12;
        [v12 enumerateIndexesUsingBlock:v31];
        uint64_t v22 = *(void **)(*((void *)&v32 + 1) + 40LL);
        if (v22) {
          id v12 = v22;
        }

        *((void *)a6 + 4) = 0LL;
        _Block_object_dispose(&v32, 8);
        uint64_t v20 = *(void *)a6;
      }

      if (v20 == 2)
      {
        *(void *)&__int128 v32 = 0LL;
        *((void *)&v32 + 1) = &v32;
        *(void *)&__int128 v33 = 0x3052000000LL;
        *((void *)&v33 + 1) = __Block_byref_object_copy__9;
        uint64_t v34 = __Block_byref_object_dispose__9;
        uint64_t v35 = 0LL;
        uint64_t v23 = [*((id *)a6 + 4) bytes];
        unint64_t v24 = [*((id *)a6 + 4) length];
        uint64_t v25 = [v17 count];
        v30[0] = 0LL;
        v30[1] = v30;
        void v30[2] = 0x2020000000LL;
        __int128 v30[3] = 0LL;
        v29[0] = MEMORY[0x1895F87A8];
        v29[1] = 3221225472LL;
        void v29[2] = __NSKeyValueDidChangeByOrderedToManyMutation_block_invoke_2;
        v29[3] = &unk_189C9E660;
        void v29[8] = v24 >> 3;
        v29[9] = v23;
        v29[10] = v25;
        _OWORD v29[6] = v30;
        v29[7] = &v32;
        void v29[4] = v17;
        v29[5] = v12;
        [v12 enumerateIndexesUsingBlock:v29];
        uint64_t v26 = *(void **)(*((void *)&v32 + 1) + 40LL);
        if (v26) {
          id v12 = v26;
        }

        *((void *)a6 + 4) = 0LL;
        _Block_object_dispose(v30, 8);
        _Block_object_dispose(&v32, 8);
      }
    }

    char v16 = 1;
    if ((a5 & 1) == 0) {
      goto LABEL_20;
    }
  }

  if (*(void *)a6 != 3LL)
  {
    if ((v16 & 1) == 0) {
      uint64_t v17 = (void *)[a1 valueForKey:a2];
    }
    uint64_t v27 = [v17 objectsAtIndexes:v12];
    goto LABEL_24;
  }

void sub_1835AB328(_Unwind_Exception *a1)
{
}

void *NSKeyValueWillChangeBySetMutation@<X0>( void *result@<X0>, uint64_t a2@<X1>, int a3@<W2>, char a4@<W3>, uint64_t a5@<X4>, char *a6@<X5>, uint64_t *a7@<X8>)
{
  id v10 = result;
  if (a3)
  {
    switch(*(void *)a5)
    {
      case 1LL:
        if ((a4 & 1) != 0)
        {
          uint64_t v15 = [result valueForKey:a2];
          char v19 = [*(id *)(a5 + 8) intersectsSet:v15];
          uint64_t v20 = *(void **)(a5 + 8);
          if ((v19 & 1) != 0)
          {
            __n128 result = (void *)[v20 mutableCopy];
            uint64_t v13 = result;
            if (!v15) {
              goto LABEL_35;
            }
            __n128 result = (void *)[result minusSet:v15];
          }

          else
          {
            __n128 result = (void *)[v20 copy];
            uint64_t v13 = result;
          }
        }

        else
        {
          uint64_t v13 = 0LL;
        }

        uint64_t v15 = 0LL;
LABEL_35:
        uint64_t v16 = 2LL;
        goto LABEL_41;
      case 2LL:
        if ((a4 & 2) == 0) {
          goto LABEL_15;
        }
        uint64_t v13 = (void *)[result valueForKey:a2];
        int v17 = [*(id *)(a5 + 8) isSubsetOfSet:v13];
        __int128 v18 = *(void **)(a5 + 8);
        if (v17)
        {
          __n128 result = (void *)[v18 copy];
          uint64_t v15 = (uint64_t)result;
          goto LABEL_30;
        }

        __n128 result = (void *)[v18 mutableCopy];
        uint64_t v15 = (uint64_t)result;
        if (!v13) {
          goto LABEL_31;
        }
        __n128 result = (void *)[result intersectSet:v13];
        goto LABEL_30;
      case 3LL:
        if ((a4 & 2) != 0)
        {
          __n128 result = (void *)objc_msgSend((id)objc_msgSend(result, "valueForKey:", a2), "mutableCopy");
          uint64_t v15 = (uint64_t)result;
          if (*(void *)(a5 + 8)) {
            __n128 result = (void *)objc_msgSend(result, "minusSet:");
          }
LABEL_30:
          uint64_t v13 = 0LL;
        }

        else
        {
LABEL_15:
          uint64_t v13 = 0LL;
          uint64_t v15 = 0LL;
        }

void *NSKeyValueDidChangeBySetMutation@<X0>( void *result@<X0>, uint64_t a2@<X1>, void *a3@<X2>, int a4@<W3>, char a5@<W4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v10 = *MEMORY[0x1895F89C0];
  __int128 v7 = *(_OWORD *)(a6 + 16);
  if (a4)
  {
    *(_OWORD *)a7 = *(_OWORD *)a6;
    *(_OWORD *)(a7 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = v7;
    *(void *)(a7 + 32) = *(void *)(a6 + 32);
  }

  else
  {
    v8[0] = *(_OWORD *)a6;
    v8[1] = v7;
    uint64_t v9 = *(void *)(a6 + 32);
    return NSKeyValueDidChangeBySetting(result, a2, a3, a5, (uint64_t)v8, a7);
  }

  return result;
}

void sub_1835AC4D0(_Unwind_Exception *exception_object)
{
}

uint64_t NSKeyValuePushPendingNotificationLocal( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t result = [*(id *)(a7 + 48) containsObject:*(void *)(a3 + 8)];
  if ((result & 1) == 0)
  {
    uint64_t v14 = *(void *)(a7 + 24);
    if (v14 == *(void *)a7)
    {
      uint64_t v15 = 2 * v14;
      if (*(_BYTE *)(a7 + 8))
      {
        size_t v16 = 160 * v14;
        int v17 = malloc_default_zone();
        __int128 v18 = (char *)malloc_zone_calloc(v17, 1uLL, v16);
        memmove(v18, *(const void **)(a7 + 16), 80LL * *(void *)a7);
        *(void *)(a7 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = v18;
        *(_BYTE *)(a7 + _Block_object_dispose((const void *)(v1 - 144), 8) = 0;
      }

      else
      {
        __int128 v18 = (char *)NSReallocateScannedUncollectable(*(void **)(a7 + 16), 160 * v14);
        *(void *)(a7 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = v18;
      }

      *(void *)a7 = v15;
      uint64_t v14 = *(void *)(a7 + 24);
    }

    else
    {
      __int128 v18 = *(char **)(a7 + 16);
    }

    *(void *)(a7 + 24) = v14 + 1;
    char v19 = &v18[80 * v14];
    *(void *)char v19 = a3;
    uint64_t v20 = *(void *)(a4 + 32);
    __int128 v21 = *(_OWORD *)(a4 + 16);
    *(_OWORD *)(v19 + _Block_object_dispose((const void *)(v1 - 144), 8) = *(_OWORD *)a4;
    *((void *)v19 + 5) = v20;
    *(_OWORD *)(v19 + 24) = v21;
    id v22 = *((id *)v19 + 2);
    *((void *)v19 + 6) = a5;
    *((void *)v19 + 7) = a6;
    id v23 = a5;
    *((void *)v19 + _Block_object_dispose((const void *)(v1 - 144), 8) = *(unsigned __int8 *)(a7 + 32);
    *((void *)v19 + 9) = a2;
    return (uint64_t)*(id *)(*(void *)v19 + 8LL);
  }

  return result;
}

uint64_t NSKeyValuePopPendingNotificationLocal( void *a1, uint64_t a2, uint64_t *a3, uint64_t a4, _OWORD *a5, void *a6, uint64_t *a7)
{
  uint64_t v13 = a7[1];
  if (v13 < 1) {
    return 0LL;
  }
  while (1)
  {
    uint64_t v14 = *a7;
    uint64_t v15 = v13 - 1;
    a7[1] = v13 - 1;
    size_t v16 = (uint64_t *)(v14 + 80 * (v13 - 1));

    uint64_t v17 = v14 + 80 * v15;
    uint64_t v13 = a7[1];
    if (v13 <= 0) {
      return 0LL;
    }
  }

  *a3 = *v16;
  uint64_t v19 = v14 + 80 * v15;
  __int128 v20 = *(_OWORD *)(v19 + 8);
  __int128 v21 = *(_OWORD *)(v19 + 24);
  *(void *)(a4 + 32) = *(void *)(v19 + 40);
  *(_OWORD *)a4 = v20;
  *(_OWORD *)(a4 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = v21;
  *a5 = *(_OWORD *)(v19 + 48);
  *a6 = *(void *)(v19 + 72);
  uint64_t v22 = *(void *)(v19 + 16);
  a7[2] = *(void *)(*v16 + 8);
  a7[3] = v22;
  a7[4] = *(void *)(v19 + 48);
  return 1LL;
}

id *_NSKeyValueCreateImplicitObservationInfo( NSObject *a1, void *a2, uint64_t a3, void *a4, objc_class *a5, objc_class **a6)
{
  uint64_t v29 = *MEMORY[0x1895F89C0];
  os_unfair_recursive_lock_lock_with_options();
  __int128 v27 = 0u;
  __int128 v28 = 0u;
  __int128 v25 = 0u;
  __int128 v26 = 0u;
  id obj = a2;
  uint64_t v10 = [a2 countByEnumeratingWithState:&v25 objects:v24 count:16];
  if (v10)
  {
    uint64_t v11 = v10;
    id v12 = 0LL;
    uint64_t v13 = *(void *)v26;
    do
    {
      uint64_t v14 = 0LL;
      uint64_t v15 = (NSKeyValueObservationInfo *)v12;
      do
      {
        if (*(void *)v26 != v13) {
          objc_enumerationMutation(obj);
        }
        size_t v16 = (NSKeyValueProperty *)NSKeyValuePropertyForIsaAndKeyPath(a5, *(void **)(*((void *)&v25 + 1) + 8 * v14));
        id v12 = _NSKeyValueObservationInfoCreateByAdding(v15, a1, v16, a3, a4, 0LL, &v22, &v23);

        if (a6)
        {
          uint64_t v17 = -[NSKeyValueProperty isaForAutonotifying](v16, "isaForAutonotifying");
          if (v17) {
            a5 = (objc_class *)v17;
          }
        }

        ++v14;
        uint64_t v15 = (NSKeyValueObservationInfo *)v12;
      }

      while (v11 != v14);
      uint64_t v11 = [obj countByEnumeratingWithState:&v25 objects:v24 count:16];
    }

    while (v11);
  }

  else
  {
    id v12 = 0LL;
  }

  if (a6) {
    *a6 = a5;
  }
  os_unfair_recursive_lock_unlock();
  return v12;
}

CFMutableDictionaryRef _NSKeyValueCreatePendingChangeNotificationArray()
{
  return CFDictionaryCreateMutable( (CFAllocatorRef)*MEMORY[0x189604DD0],  0LL,  &NSKVOPendingNotificationStackIdentifierCallbacks,  MEMORY[0x189605250]);
}

void _NSKVOPerformWithDeallocatingObservable(const void *a1, uint64_t a2)
{
  uint64_t v4 = _CFGetTSD();
  if (!v4)
  {
    BOOL v5 = malloc_default_zone();
    uint64_t v4 = (uint64_t)malloc_zone_calloc(v5, 1uLL, 0x58uLL);
    _CFSetTSD();
  }

  CFHashCode v6 = *(__CFArray **)(v4 + 80);
  CFMutableDictionaryRef Mutable = v6;
  if (!v6)
  {
    CFMutableDictionaryRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x189604DD0], 1LL, 0LL);
    *(void *)(v4 + 80) = Mutable;
  }

  CFArrayInsertValueAtIndex(Mutable, 0LL, a1);
  (*(void (**)(uint64_t))(a2 + 16))(a2);
  CFArrayRemoveValueAtIndex(Mutable, 0LL);
  if (!v6)
  {
    if (CFArrayGetCount(Mutable)) {
      __assert_rtn( "_NSKVOPerformWithDeallocatingObservable",  "NSKeyValueObserving.m",  2832,  "CFArrayGetCount(stack) == 0");
    }
    CFRelease(Mutable);
    *(void *)(v4 + 80) = 0LL;
  }

void sub_1835AD138(_Unwind_Exception *a1)
{
}

uint64_t _NSKVOIsObservableBeingDeallocated(const void *a1)
{
  uint64_t result = _CFGetTSD();
  if (result)
  {
    uint64_t v3 = *(const __CFArray **)(result + 80);
    if (v3)
    {
      v4.length = CFArrayGetCount(*(CFArrayRef *)(result + 80));
      v4.location = 0LL;
      return CFArrayContainsValue(v3, v4, a1) != 0;
    }

    else
    {
      return 0LL;
    }
  }

  return result;
}

void NSKeyValueObservingTSDDestroy(const void **a1)
{
  uint64_t v2 = *a1;
  if (v2) {
    CFRelease(v2);
  }
  free(a1);
}

void __Block_byref_object_copy__9(uint64_t a1, uint64_t a2)
{
}

void __Block_byref_object_dispose__9(uint64_t a1)
{
}

uint64_t __NSKeyValueDidChangeByOrderedToManyMutation_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(*(void *)(a1 + 56) + 8 * a2);
  uint64_t result = [*(id *)(a1 + 32) objectAtIndex:a2];
  if (v4 == result)
  {
    CFHashCode v6 = *(void **)(*(void *)(*(void *)(a1 + 48) + 8LL) + 40LL);
    if (!v6)
    {
      *(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 40) = [*(id *)(a1 + 40) mutableCopy];
      CFHashCode v6 = *(void **)(*(void *)(*(void *)(a1 + 48) + 8LL) + 40LL);
    }

    return [v6 removeIndex:a2];
  }

  return result;
}

uint64_t __NSKeyValueDidChangeByOrderedToManyMutation_block_invoke_2(uint64_t a1, unint64_t a2)
{
  unint64_t v4 = a2 - *(void *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 24LL);
  if (v4 >= *(void *)(a1 + 64)) {
    uint64_t v5 = 0LL;
  }
  else {
    uint64_t v5 = *(void *)(*(void *)(a1 + 72) + 8 * v4);
  }
  if (*(void *)(a1 + 80) <= a2) {
    uint64_t result = 0LL;
  }
  else {
    uint64_t result = [*(id *)(a1 + 32) objectAtIndex:a2];
  }
  if (v5 == result)
  {
    __int128 v7 = *(void **)(*(void *)(*(void *)(a1 + 56) + 8LL) + 40LL);
    if (!v7)
    {
      *(void *)(*(void *)(*(void *)(a1 + 56) + 8) + 40) = [*(id *)(a1 + 40) mutableCopy];
      __int128 v7 = *(void **)(*(void *)(*(void *)(a1 + 56) + 8LL) + 40LL);
    }

    return [v7 removeIndex:a2];
  }

  else
  {
    ++*(void *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 24LL);
  }

  return result;
}

void sub_1835AD8A8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
}

void sub_1835ADD4C(_Unwind_Exception *exception_object, int a2)
{
  if (a2)
  {
    objc_begin_catch(exception_object);

    objc_exception_rethrow();
    __break(1u);
    JUMPOUT(0x1835ADD6CLL);
  }

  _Unwind_Resume(exception_object);
}

void *NSKeyValuePropertyForIsaAndKeyPathInner(objc_class *a1, void *a2, const __CFSet *a3)
{
  value[3] = *MEMORY[0x1895F89C0];
  uint64_t v5 = _NSKeyValueContainerClassForIsa(a1);
  value[0] = 0LL;
  value[1] = v5;
  value[2] = a2;
  CFHashCode v6 = (void *)CFSetGetValue(a3, value);
  if (!v6 && (!NSKeyValueProperties || (CFHashCode v6 = (void *)CFSetGetValue((CFSetRef)NSKeyValueProperties, value)) == 0LL))
  {
    if ([a2 characterAtIndex:0] == 64)
    {
      id v7 = -[NSKeyValueComputedProperty _initWithContainerClass:keyPath:propertiesBeingInitialized:]( objc_alloc(&OBJC_CLASS___NSKeyValueComputedProperty),  "_initWithContainerClass:keyPath:propertiesBeingInitialized:",  v5,  a2,  a3);
    }

    else
    {
      uint64_t v8 = [a2 rangeOfString:@"."];
      if (v9) {
        id v7 = -[NSKeyValueNestedProperty _initWithContainerClass:keyPath:firstDotIndex:propertiesBeingInitialized:]( objc_alloc(&OBJC_CLASS___NSKeyValueNestedProperty),  "_initWithContainerClass:keyPath:firstDotIndex:propertiesBeingInitialized:",  v5,  a2,  v8,  a3);
      }
      else {
        id v7 = -[NSKeyValueUnnestedProperty _initWithContainerClass:key:propertiesBeingInitialized:]( objc_alloc(&OBJC_CLASS___NSKeyValueUnnestedProperty),  "_initWithContainerClass:key:propertiesBeingInitialized:",  v5,  a2,  a3);
      }
    }

    CFHashCode v6 = v7;
    uint64_t v10 = (__CFSet *)NSKeyValueProperties;
    if (!NSKeyValueProperties)
    {
      __int128 v11 = *(_OWORD *)(MEMORY[0x189605258] + 16LL);
      *(_OWORD *)&v13.version = *MEMORY[0x189605258];
      *(_OWORD *)&v13.release = v11;
      v13.equal = (CFSetEqualCallBack)NSKeyValuePropertyIsEqual;
      v13.hash = (CFSetHashCallBack)NSKeyValuePropertyHash;
      uint64_t v10 = CFSetCreateMutable(0LL, 0LL, &v13);
      NSKeyValueProperties = (uint64_t)v10;
    }

    CFSetAddValue(v10, v6);
    CFSetRemoveValue(a3, v6);
  }

  return v6;
}

void sub_1835AEC40(_Unwind_Exception *a1)
{
}

void sub_1835AEC5C()
{
}

void sub_1835AED90( void *exc_buf, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, int a20, int a21, uint64_t a22)
{
  if (a2 == 2)
  {
    if (objc_msgSend( (id)objc_msgSend(objc_begin_catch(exc_buf), "name"),  "isEqualToString:",  *MEMORY[0x189603B40]))
    {
      objc_opt_class();
      [v24 keyPath];
      objc_opt_class();
      objc_opt_class();
      int v30 = +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"Cannot remove an observer <%@ %p> for the key path %@ from <%@ %p>, most likely because the value for the key %@ has changed without an appropriate KVO notification being sent. Check the KVO-compliance of the %@ class.");
      objc_exception_throw((id)[MEMORY[0x189603F70] exceptionWithName:*MEMORY[0x189603A58] reason:v30 userInfo:0]);
    }

    else
    {
      objc_exception_rethrow();
    }
  }

  else
  {
    objc_begin_catch(exc_buf);
    *(void *)uint64_t v22 = v23;
    *(void *)(v22 + _Block_object_dispose((const void *)(v9 - 80), 8) = v26;
    *(void *)(v22 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = v25;
    *(void *)(v22 + 24) = v29;
    *(void *)(v22 + 32) = v27;
    *(_BYTE *)(v22 + 40) = v28;
    os_unfair_recursive_lock_lock_with_options();
    objc_exception_rethrow();
  }

  __break(1u);
}

void sub_1835AEEB4(_Unwind_Exception *a1)
{
}

id _NSGetProxyValueWithGetterNoLock(NSObject *a1, void *a2)
{
  unint64_t v4 = (objc_class *)[a2 proxyClass];
  uint64_t v5 = (void *)-[objc_class _proxyShare](v4, "_proxyShare");
  CFHashCode v6 = (NSKeyValueProxyShareKey *)_NSGetProxyValueWithGetterNoLock_proxyShareKey;
  if (!_NSGetProxyValueWithGetterNoLock_proxyShareKey)
  {
    CFHashCode v6 = objc_alloc_init(&OBJC_CLASS___NSKeyValueProxyShareKey);
    _NSGetProxyValueWithGetterNoLock_proxyShareKedouble y = (uint64_t)v6;
  }

  v6->_container = a1;
  uint64_t v7 = [a2 key];
  *(void *)(_NSGetProxyValueWithGetterNoLock_proxyShareKey + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = v7;
  uint64_t v8 = (void *)objc_msgSend(v5, "member:");
  uint64_t v9 = _NSGetProxyValueWithGetterNoLock_proxyShareKey;
  *(void *)(_NSGetProxyValueWithGetterNoLock_proxyShareKey + _Block_object_dispose((const void *)(v9 - 80), 8) = 0LL;
  *(void *)(v9 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = 0LL;
  if (v8)
  {
    id v10 = v8;
    id v11 = v8;
  }

  else
  {
    id v10 = objc_alloc(v4);
    [v10 _proxyInitWithContainer:a1 getter:a2];
    [v5 addObject:v10];
  }

  return v10;
}

id _NSGetProxyValueWithGetter(NSObject *a1, uint64_t a2, void *a3)
{
  id v5 = _NSGetProxyValueWithGetterNoLock(a1, a3);
  os_unfair_lock_unlock((os_unfair_lock_t)&NSKeyValueProxyLock);
  return v5;
}

NSHashTable *_NSKeyValueProxyShareCreate()
{
  uint64_t v0 = -[NSPointerFunctions initWithOptions:](objc_alloc(&OBJC_CLASS___NSPointerFunctions), "initWithOptions:", 5LL);
  -[NSPointerFunctions setHashFunction:](v0, "setHashFunction:", NSKeyValueProxyHash);
  -[NSPointerFunctions setIsEqualFunction:](v0, "setIsEqualFunction:", NSKeyValueProxyIsEqual);
  uint64_t v1 = -[NSHashTable initWithPointerFunctions:capacity:]( objc_alloc(&OBJC_CLASS___NSHashTable),  "initWithPointerFunctions:capacity:",  v0,  0LL);

  return v1;
}

uint64_t NSKeyValueProxyHash(void *a1)
{
  uint64_t v1 = [a1 _proxyLocator];
  return v1 ^ [v2 hash];
}

uint64_t NSKeyValueProxyIsEqual(void *a1, void *a2)
{
  uint64_t v3 = [a1 _proxyLocator];
  id v5 = v4;
  if (v3 != [a2 _proxyLocator]) {
    return 0LL;
  }
  if (v5 == v6) {
    return 1LL;
  }
  return [v5 isEqual:v6];
}

uint64_t _NSKeyValueProxyDeallocate(void *a1)
{
  if (a1 && (unint64_t)_objc_rootRetainCount() > 1)
  {
    uint64_t v2 = 0LL;
  }

  else
  {
    objc_msgSend((id)objc_msgSend((id)objc_opt_class(), "_proxyShare"), "removeObject:", a1);
    os_unfair_lock_unlock((os_unfair_lock_t)&NSKeyValueProxyLock);
    [a1 _proxyNonGCFinalize];
    os_unfair_lock_lock((os_unfair_lock_t)&NSKeyValueProxyLock);
    uint64_t v2 = 1LL;
  }

  os_unfair_lock_unlock((os_unfair_lock_t)&NSKeyValueProxyLock);
  return v2;
}

os_log_t ___userInteractionLog_block_invoke()
{
  os_log_t result = os_log_create("com.apple.Foundation", "NSProcessInfoInteractionTracking");
  qword_18C496770 = (uint64_t)result;
  return result;
}

uint64_t ___isInternal_block_invoke()
{
  uint64_t result = os_variant_has_internal_diagnostics();
  _MergedGlobals_104 = result;
  return result;
}

uint64_t initBKSProcessAssertionSetExpirationHandler(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = AssertionServicesLibrary();
  id v5 = (uint64_t (*)())dlsym(v4, "BKSProcessAssertionSetExpirationHandler");
  softLinkBKSProcessAssertionSetExpirationHandler = v5;
  if (!v5) {
    __assert_rtn( "initBKSProcessAssertionSetExpirationHandler",  "NSProcessInfo_Helpers.m",  79,  "softLinkBKSProcessAssertionSetExpirationHandler");
  }
  return ((uint64_t (*)(uint64_t, uint64_t))v5)(a1, a2);
}

void *AssertionServicesLibrary()
{
  uint64_t result = (void *)AssertionServicesLibrary_frameworkLibrary;
  if (!AssertionServicesLibrary_frameworkLibrary)
  {
    uint64_t result = dlopen("/System/Library/PrivateFrameworks/AssertionServices.framework/AssertionServices", 2);
    AssertionServicesLibrary_frameworkLibrardouble y = (uint64_t)result;
    if (!result) {
      __assert_rtn("AssertionServicesLibrary", "NSProcessInfo_Helpers.m", 77, "frameworkLibrary");
    }
  }

  return result;
}

Class initBKSProcessAssertion()
{
  Class result = objc_getClass("BKSProcessAssertion");
  classBKSProcessAssertion = (uint64_t)result;
  if (!result) {
    __assert_rtn("initBKSProcessAssertion", "NSProcessInfo_Helpers.m", 78, "classBKSProcessAssertion");
  }
  getBKSProcessAssertionClass Class = BKSProcessAssertionFunction;
  return result;
}

uint64_t BKSProcessAssertionFunction()
{
  return classBKSProcessAssertion;
}

void sub_1835B121C(_Unwind_Exception *a1)
{
}

void sub_1835B1334(uint64_t a1, int a2)
{
  if (a2)
  {
    objc_end_catch();
    JUMPOUT(0x1835B1344LL);
  }

  JUMPOUT(0x1835B123CLL);
}

CFTypeRef __karetain(int a1, CFTypeRef cf)
{
  return CFRetain(cf);
}

void __karelease(int a1, CFTypeRef cf)
{
}

void _encodeObject(uint64_t a1, const void *a2, void *value, int a4)
{
  id v5 = value;
  uint64_t v75 = *MEMORY[0x1895F89C0];
  valuea[0] = value;
  uint64_t v8 = *(const __CFSet **)(a1 + 120);
  if (v8)
  {
    int v9 = CFSetContainsValue(v8, value);
    BOOL v10 = v9 != 0;
    id v11 = *(const __CFDictionary **)(a1 + 56);
    if (!v11)
    {
      if (v9) {
        goto LABEL_16;
      }
      goto LABEL_9;
    }
  }

  else
  {
    id v11 = *(const __CFDictionary **)(a1 + 56);
    if (!v11)
    {
LABEL_9:
      uint64_t v13 = [v5 replacementObjectForKeyedArchiver:a1];
      if (v13 && *(void *)(a1 + 24) && (objc_opt_respondsToSelector() & 1) != 0) {
        uint64_t v13 = [*(id *)(a1 + 24) archiver:a1 willEncodeObject:v13];
      }
      [(id)a1 replaceObject:v5 withObject:v13];
      id v5 = (void *)v13;
      goto LABEL_16;
    }

    BOOL v10 = 0;
  }

  int v12 = CFDictionaryContainsKey(v11, v5);
  if (!v10 && !v12) {
    goto LABEL_9;
  }
  if (v12)
  {
    CFDictionaryGetValueIfPresent(*(CFDictionaryRef *)(a1 + 56), v5, (const void **)valuea);
    id v5 = valuea[0];
  }

void addValueToTopContainerE(uint64_t a1, const void *a2, const void *a3)
{
  uint64_t v13 = *MEMORY[0x1895F89C0];
  uint64_t v6 = [*(id *)(a1 + 32) count] - 1;
  if (v6 < 0) {
    uint64_t v7 = 0LL;
  }
  else {
    uint64_t v7 = (__CFArray *)[*(id *)(a1 + 32) objectAtIndexedSubscript:v6];
  }
  char v8 = atomic_load((unint64_t *)(a1 + 16));
  if ((v8 & 1) != 0)
  {
    CFArrayAppendValue(v7, a3);
    ++*(void *)(a1 + 112);
  }

  else
  {
    CFIndex Count = CFDictionaryGetCount(v7);
    CFDictionarySetValue(v7, a2, a3);
    *(void *)(a1 + 112) += 2LL;
    if (Count == CFDictionaryGetCount(v7))
    {
      BOOL v10 = (os_log_s *)_NSOSLog();
      if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
      {
        int v11 = 138412290;
        int v12 = a2;
        _os_log_error_impl( &dword_182EB1000,  v10,  OS_LOG_TYPE_ERROR,  "*** NSKeyedArchiver warning: replacing existing value for key '%@'; probable duplication of encoding keys in class hierarchy",
          (uint8_t *)&v11,
          0xCu);
      }
    }
  }

void _encodeInt32(uint64_t a1, const void *a2, int a3)
{
  uint64_t v7 = *MEMORY[0x1895F89C0];
  int valuePtr = a3;
  CFNumberRef v5 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x189604DB0], kCFNumberSInt32Type, &valuePtr);
  addValueToTopContainerE(a1, a2, v5);
  CFRelease(v5);
}

void _encodeInt64(uint64_t a1, const void *a2, uint64_t a3)
{
  v6[1] = *MEMORY[0x1895F89C0];
  v6[0] = a3;
  CFNumberRef v5 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x189604DB0], kCFNumberSInt64Type, v6);
  addValueToTopContainerE(a1, a2, v5);
  CFRelease(v5);
}

void _encodeFloat(uint64_t a1, const void *a2, float a3)
{
  uint64_t v7 = *MEMORY[0x1895F89C0];
  float valuePtr = a3;
  CFNumberRef v5 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x189604DB0], kCFNumberFloat32Type, &valuePtr);
  addValueToTopContainerE(a1, a2, v5);
  CFRelease(v5);
}

void _encodeDouble(uint64_t a1, const void *a2, double a3)
{
  v6[1] = *MEMORY[0x1895F89C0];
  *(double *)uint64_t v6 = a3;
  CFNumberRef v5 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x189604DB0], kCFNumberFloat64Type, v6);
  addValueToTopContainerE(a1, a2, v5);
  CFRelease(v5);
}

void _encodeBytes(uint64_t a1, const UInt8 *a2, CFIndex a3, const void *a4)
{
  if (a2)
  {
    CFDataRef v6 = CFDataCreate((CFAllocatorRef)*MEMORY[0x189604DB0], a2, a3);
    addValueToTopContainerE(a1, a4, v6);
    CFRelease(v6);
  }

  else
  {
    addValueToTopContainerE(a1, a4, @"$null");
  }

void _compatEncodeValueOfObjCType(objc_class *a1, uint64_t a2, double *a3, const char *a4)
{
  if ((int)a2 > 80)
  {
    switch((int)a2)
    {
      case 'c':
LABEL_7:
        unint64_t isa = (unint64_t)a1[11].isa;
        a1[11].unint64_t isa = (Class)(isa + 1);
        if (isa > 0x27) {
          int v11 = +[NSString stringWithFormat:](&OBJC_CLASS___NSString, "stringWithFormat:", @"$%ld", isa);
        }
        else {
          int v11 = (NSString *)generic_keys[isa];
        }
        int v16 = *(char *)a3;
        goto LABEL_42;
      case 'd':
        unint64_t v21 = (unint64_t)a1[11].isa;
        a1[11].unint64_t isa = (Class)(v21 + 1);
        if (v21 > 0x27) {
          uint64_t v22 = +[NSString stringWithFormat:](&OBJC_CLASS___NSString, "stringWithFormat:", @"$%ld", v21);
        }
        else {
          uint64_t v22 = (NSString *)generic_keys[v21];
        }
        _encodeDouble((uint64_t)a1, v22, *a3);
        return;
      case 'e':
      case 'g':
      case 'h':
      case 'j':
      case 'k':
      case 'm':
      case 'n':
      case 'o':
      case 'p':
      case 'r':
        goto LABEL_64;
      case 'f':
        unint64_t v23 = (unint64_t)a1[11].isa;
        a1[11].unint64_t isa = (Class)(v23 + 1);
        if (v23 > 0x27) {
          unint64_t v24 = +[NSString stringWithFormat:](&OBJC_CLASS___NSString, "stringWithFormat:", @"$%ld", v23);
        }
        else {
          unint64_t v24 = (NSString *)generic_keys[v23];
        }
        _encodeFloat((uint64_t)a1, v24, *(float *)a3);
        return;
      case 'i':
      case 'l':
LABEL_19:
        unint64_t v13 = (unint64_t)a1[11].isa;
        a1[11].unint64_t isa = (Class)(v13 + 1);
        if (v13 > 0x27) {
          int v11 = +[NSString stringWithFormat:](&OBJC_CLASS___NSString, "stringWithFormat:", @"$%ld", v13);
        }
        else {
          int v11 = (NSString *)generic_keys[v13];
        }
        int v16 = *(_DWORD *)a3;
        goto LABEL_42;
      case 'q':
        goto LABEL_21;
      case 's':
        goto LABEL_15;
      default:
        if ((_DWORD)a2 == 81)
        {
LABEL_21:
          unint64_t v14 = (unint64_t)a1[11].isa;
          a1[11].unint64_t isa = (Class)(v14 + 1);
          if (v14 > 0x27) {
            uint64_t v15 = +[NSString stringWithFormat:](&OBJC_CLASS___NSString, "stringWithFormat:", @"$%ld", v14);
          }
          else {
            uint64_t v15 = (NSString *)generic_keys[v14];
          }
          _encodeInt64((uint64_t)a1, v15, *(void *)a3);
        }

        else
        {
          if ((_DWORD)a2 != 83) {
            goto LABEL_64;
          }
LABEL_15:
          unint64_t v12 = (unint64_t)a1[11].isa;
          a1[11].unint64_t isa = (Class)(v12 + 1);
          if (v12 > 0x27) {
            int v11 = +[NSString stringWithFormat:](&OBJC_CLASS___NSString, "stringWithFormat:", @"$%ld", v12);
          }
          else {
            int v11 = (NSString *)generic_keys[v12];
          }
          int v16 = *(__int16 *)a3;
LABEL_42:
          _encodeInt32((uint64_t)a1, v11, v16);
        }

        break;
    }
  }

  else if ((int)a2 <= 57)
  {
    if ((_DWORD)a2 == 35)
    {
      _NSCoderCheckPotentiallyMangledClassNameAndWarn(*(void *)a3, 1);
      unint64_t v25 = (unint64_t)a1[11].isa;
      a1[11].unint64_t isa = (Class)(v25 + 1);
      if (v25 > 0x27) {
        uint64_t v26 = +[NSString stringWithFormat:](&OBJC_CLASS___NSString, "stringWithFormat:", @"$%ld", v25);
      }
      else {
        uint64_t v26 = (NSString *)generic_keys[v25];
      }
      unint64_t v29 = NSStringFromClass(*(Class *)a3);
    }

    else
    {
      if ((_DWORD)a2 == 37)
      {
        uint64_t v27 = _NSMethodExceptionProem(a1, a4);
        NSLog((NSString *)@"%@: warning: NXAtom being encoded -- will not be decoded uniqued", v27);
      }

      else if ((_DWORD)a2 != 42)
      {
LABEL_64:
        uint64_t v34 = (void *)[MEMORY[0x189603F70] exceptionWithName:*MEMORY[0x189603A60], +[NSString stringWithFormat:]( NSString, "stringWithFormat:", @"%@: unknown type encoding ('%c')", _NSMethodExceptionProem(a1, a4), a2), 0 reason userInfo];
        objc_exception_throw(v34);
        -[NSKeyedArchiver encodeArrayOfObjCType:count:at:](v35, v36, v37, v38, v39);
        return;
      }

      unint64_t v28 = (unint64_t)a1[11].isa;
      a1[11].unint64_t isa = (Class)(v28 + 1);
      if (v28 > 0x27) {
        uint64_t v26 = +[NSString stringWithFormat:](&OBJC_CLASS___NSString, "stringWithFormat:", @"$%ld", v28);
      }
      else {
        uint64_t v26 = (NSString *)generic_keys[v28];
      }
      unint64_t v29 = +[NSString stringWithUTF8String:](&OBJC_CLASS___NSString, "stringWithUTF8String:", *(void *)a3);
    }

    uint64_t v31 = v29;
    uint64_t v32 = (uint64_t)a1;
    BOOL v18 = v26;
LABEL_63:
    _encodeObject(v32, v18, v31, 0);
  }

  else
  {
    switch((int)a2)
    {
      case ':':
        CFDataRef v6 = NSCopyStringFromSelector(*(const char **)a3);
        unint64_t v7 = (unint64_t)a1[11].isa;
        a1[11].unint64_t isa = (Class)(v7 + 1);
        value = v6;
        if (v7 > 0x27)
        {
          uint64_t v30 = +[NSString stringWithFormat:](&OBJC_CLASS___NSString, "stringWithFormat:", @"$%ld", v7);
          char v8 = value;
          int v9 = (__CFString *)v30;
        }

        else
        {
          char v8 = v6;
          int v9 = generic_keys[v7];
        }

        _encodeObject((uint64_t)a1, v9, v8, 0);

        break;
      case ';':
      case '<':
      case '=':
      case '>':
      case '?':
      case 'A':
        goto LABEL_64;
      case '@':
        unint64_t v17 = (unint64_t)a1[11].isa;
        a1[11].unint64_t isa = (Class)(v17 + 1);
        if (v17 > 0x27) {
          BOOL v18 = +[NSString stringWithFormat:](&OBJC_CLASS___NSString, "stringWithFormat:", @"$%ld", v17);
        }
        else {
          BOOL v18 = (NSString *)generic_keys[v17];
        }
        uint64_t v31 = *(NSString **)a3;
        uint64_t v32 = (uint64_t)a1;
        goto LABEL_63;
      case 'B':
        unint64_t v19 = (unint64_t)a1[11].isa;
        a1[11].unint64_t isa = (Class)(v19 + 1);
        if (v19 > 0x27) {
          CFTypeRef v20 = +[NSString stringWithFormat:](&OBJC_CLASS___NSString, "stringWithFormat:", @"$%ld", v19);
        }
        else {
          CFTypeRef v20 = (NSString *)generic_keys[v19];
        }
        if (*(_BYTE *)a3) {
          __int128 v33 = (const void **)MEMORY[0x189604DE8];
        }
        else {
          __int128 v33 = (const void **)MEMORY[0x189604DE0];
        }
        addValueToTopContainerE((uint64_t)a1, v20, *v33);
        break;
      case 'C':
        goto LABEL_7;
      default:
        if ((_DWORD)a2 == 73 || (_DWORD)a2 == 76) {
          goto LABEL_19;
        }
        goto LABEL_64;
    }
  }

void sub_1835B4968(_Unwind_Exception *a1)
{
}

void sub_1835B4984()
{
}

void sub_1835B4D7C(_Unwind_Exception *a1)
{
}

void sub_1835B4E98(_Unwind_Exception *a1)
{
}

void sub_1835B4FD0(_Unwind_Exception *a1)
{
}

void sub_1835B50D4(_Unwind_Exception *a1)
{
}

void sub_1835B50F0()
{
}

void sub_1835B5200(_Unwind_Exception *a1)
{
}

void sub_1835B530C(_Unwind_Exception *a1)
{
}

void sub_1835B5328()
{
}

void sub_1835B57F4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
}

void sub_1835B58E4(_Unwind_Exception *a1)
{
}

void sub_1835B5994(_Unwind_Exception *a1)
{
}

void sub_1835B59B0()
{
}

void sub_1835B6518(_Unwind_Exception *exc_buf, int a2)
{
  if (a2)
  {
    objc_begin_catch(exc_buf);
    JUMPOUT(0x1835B6478LL);
  }

  _Unwind_Resume(exc_buf);
}

uint64_t _decodeObjectXML(uint64_t a1, const void *a2, void *a3)
{
  uint64_t v60 = *MEMORY[0x1895F89C0];
  CFIndex Count = CFArrayGetCount(*(CFArrayRef *)(a1 + 80));
  uint64_t ValueAtIndex = (const __CFArray *)CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 80), Count - 1);
  if (CFGetTypeID(ValueAtIndex) == 19)
  {
    char v8 = (void *)CFArrayGetValueAtIndex(ValueAtIndex, 0LL);
    id v9 = v8;
    CFArrayRemoveValueAtIndex(ValueAtIndex, 0LL);
    if (!v8) {
      goto LABEL_11;
    }
  }

  else
  {
    char v8 = (void *)CFDictionaryGetValue(ValueAtIndex, a2);
    id v10 = v8;
    if (!v8) {
      goto LABEL_11;
    }
  }

  CFTypeID v11 = CFGetTypeID(v8);
  if (v11 != _CFKeyedArchiverUIDGetTypeID())
  {
    unint64_t v48 = _NSMethodExceptionProem((objc_class *)a1, sel_decodeObjectForKey_);
    unint64_t v14 = @"%@: value is not a reference as expected";
    goto LABEL_10;
  }

  uint64_t result = _CFKeyedArchiverUIDGetValue();
  if (!(_DWORD)result)
  {
LABEL_12:
    *a3 = 0LL;
    return result;
  }

  unsigned int v13 = result;
  if (CFArrayGetCount(*(CFArrayRef *)(a1 + 88)) <= v13)
  {
LABEL_50:
    unint64_t v48 = _NSMethodExceptionProem((objc_class *)a1, sel_decodeObjectForKey_);
    unint64_t v14 = @"%@: invalid object reference";
    goto LABEL_10;
  }

  unint64_t v15 = v13;
  int v16 = (void *)CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 88), v13);
  if (!v16)
  {
    unint64_t v48 = _NSMethodExceptionProem((objc_class *)a1, sel_decodeObjectForKey_);
    unint64_t v14 = @"%@: wrong object format";
    goto LABEL_10;
  }

  unint64_t v17 = v16;
  if (CFGetTypeID(v16) == 7 && CFEqual(@"$null", v17))
  {
    *a3 = 0LL;
    return 1LL;
  }

  if (CFGetTypeID(v17) != 7 && CFGetTypeID(v17) != 21 && CFGetTypeID(v17) != 22 && CFGetTypeID(v17) != 20)
  {
    if (CFGetTypeID(v17) != 18)
    {
      unint64_t v48 = _NSMethodExceptionProem((objc_class *)a1, sel_decodeObjectForKey_);
      unint64_t v14 = @"%@: wrong object format format";
      goto LABEL_10;
    }

    unint64_t v19 = CFDictionaryGetValue((CFDictionaryRef)v17, @"$class");
    if (!v19 || (CFTypeID v20 = CFGetTypeID(v19), v20 != _CFKeyedArchiverUIDGetTypeID()))
    {
      unint64_t v48 = _NSMethodExceptionProem((objc_class *)a1, sel_decodeObjectForKey_);
      unint64_t v14 = @"%@: missing class information for object or wrong format";
      goto LABEL_10;
    }

    unsigned int v21 = _CFKeyedArchiverUIDGetValue();
    if (!v21)
    {
      unint64_t v48 = _NSMethodExceptionProem((objc_class *)a1, sel_decodeObjectForKey_);
      unint64_t v14 = @"%@: null class for object";
      goto LABEL_10;
    }

    unsigned int v22 = v21;
    if (CFArrayGetCount(*(CFArrayRef *)(a1 + 88)) > v21)
    {
      unint64_t v23 = (const __CFDictionary *)CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 88), v22);
      if (v23 && (unint64_t v24 = v23, CFGetTypeID(v23) == 18))
      {
        unint64_t v25 = (NSString *)CFDictionaryGetValue(v24, @"$classname");
        if (v25)
        {
          uint64_t v26 = v25;
          if ((_NSIsNSString() & 1) == 0)
          {
            objc_msgSend( (id)a1,  "__failWithExceptionName:errorCode:format:",  @"NSInvalidUnarchiveOperationException",  4864,  @"%@: cannot decode object of class (%@) for key (%@); the archive appears to be corrupt (non-string class name)",
              _NSMethodExceptionProem((objc_class *)a1, sel_decodeObjectForKey_),
              v26,
              a2);
            goto LABEL_11;
          }

          id obj = (id)CFDictionaryGetValue(v24, @"$classhints");
          uint64_t v54 = CFDictionaryGetValue(v24, @"$classes");
          if ((!obj || _NSIsNSArray()) && (!v54 || (_NSIsNSArray() & 1) != 0))
          {
            uint64_t v27 = (objc_class *)[(id)a1 classForClassName:v26];
            if (!v27)
            {
              uint64_t v27 = (objc_class *)[(id)objc_opt_class() classForClassName:v26];
              if (!v27)
              {
                uint64_t v27 = NSClassFromString(v26);
                if (!v27)
                {
                  __int128 v58 = 0u;
                  __int128 v59 = 0u;
                  __int128 v56 = 0u;
                  __int128 v57 = 0u;
                  uint64_t v52 = [obj countByEnumeratingWithState:&v56 objects:value count:16];
                  if (!v52)
                  {
LABEL_69:
                    if (*(void *)(a1 + 8) && (objc_opt_respondsToSelector() & 1) != 0)
                    {
                      uint64_t v27 = (objc_class *)[*(id *)(a1 + 8) unarchiver:a1 cannotDecodeObjectOfClassName:v26 originalClasses:v54];
                      if (v27)
                      {
LABEL_44:
                        if (!_coderValidateClassValidToMessageForUnarchiving(v27))
                        {
                          uint64_t v30 = _NSMethodExceptionProem((objc_class *)a1, sel_decodeObjectForKey_);
                          objc_msgSend( (id)a1,  "__failWithExceptionName:errorCode:format:",  *MEMORY[0x189603A60],  4864,  @"%@: unexpected non-objectlike class (%@)",  v30,  NSStringFromClass(v27));
                          goto LABEL_60;
                        }
                      }
                    }

                    else
                    {
                      uint64_t v27 = 0LL;
                    }

                    unint64_t v28 = (objc_class *)-[objc_class classForKeyedUnarchiver](v27, "classForKeyedUnarchiver");
                    if (v28)
                    {
                      if ([(id)a1 requiresSecureCoding])
                      {
                        if (a2)
                        {
                          if (([(id)a1 validateAllowedClass:v28 forKey:a2] & 1) == 0) {
                            goto LABEL_11;
                          }
                        }

                        else
                        {
                          [(id)a1 validateClassSupportsSecureCoding:v28];
                        }
                      }

                      _NSCoderCheckPotentiallyMangledClassNameAndWarn((uint64_t)v28, 0);
                      uint64_t v32 = *(void *)(a1 + 120);
                      if (-[NSCoder _isPossibleNestedCollectionClass:](a1, v28) && *(_BYTE *)(v32 + 40))
                      {
                        if (*(_BYTE *)(v32 + 41))
                        {
                          *(_WORD *)(v32 + 40) = 0;
                          objc_msgSend( (id)a1,  "__failWithExceptionName:errorCode:format:",  @"NSInvalidUnarchiveOperationException",  4864,  @"%1$@: value for key (%2$@) contains too many nested (%3$@)s",  _NSMethodExceptionProem((objc_class *)a1, sel_decodeObjectForKey_),  a2,  v26);
                          goto LABEL_11;
                        }

                        *(_BYTE *)(v32 + 41) = 1;
                      }

                      LOBYTE(v56) = 1;
                      id v33 = coderAllocateClassForUnarchival((objc_class *)a1, v28, &v56);
                      if ((_BYTE)v56)
                      {
                        uint64_t v34 = v33;
                        int v35 = *(_DWORD *)(a1 + 64);
                        *(_DWORD *)(a1 + 64) = 0;
                        CFRetain(v17);
                        CFArrayAppendValue(*(CFMutableArrayRef *)(a1 + 80), v17);
                        CFTypeID v36 = CFGetTypeID(v17);
                        unint64_t v37 = atomic_load((unint64_t *)(a1 + 16));
                        atomic_store(v37 & 0xFFFFFFFFFFFFFFFELL | (v36 == 19), (unint64_t *)(a1 + 16));
                        CFDictionarySetValue(*(CFMutableDictionaryRef *)(a1 + 48), (const void *)v13, v34);
                        unint64_t v38 = (void *)objc_msgSend( (id)objc_msgSend(v34, "initWithCoder:", a1),  "awakeAfterUsingCoder:",  a1);
                        *(_DWORD *)(*(void *)(a1 + 120) + 16LL) = v13;
                        CFIndex v39 = CFArrayGetCount(*(CFArrayRef *)(a1 + 80));
                        uint64_t v40 = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 80), v39 - 1);
                        CFArrayRemoveValueAtIndex(*(CFMutableArrayRef *)(a1 + 80), v39 - 1);
                        CFRelease(v40);
                        if (v39 >= 2)
                        {
                          uint64_t v41 = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 80), v39 - 2);
                          CFTypeID v42 = CFGetTypeID(v41);
                          unint64_t v43 = atomic_load((unint64_t *)(a1 + 16));
                          atomic_store(v43 & 0xFFFFFFFFFFFFFFFELL | (v42 == 19), (unint64_t *)(a1 + 16));
                        }

                        *(_DWORD *)(a1 + 64) = v35;
                        if (v38)
                        {
                          value[0] = v38;
                          CFTypeRef v44 = *(const __CFDictionary **)(a1 + 32);
                          if (v44 && CFDictionaryGetValueIfPresent(v44, v38, (const void **)value))
                          {
                            if (value[0] != v38)
                            {

                              id v45 = value[0];
                            }
                          }

                          else
                          {
                            id v46 = v38;
                            if (*(void *)(a1 + 8) && (objc_opt_respondsToSelector() & 1) != 0)
                            {
                              double v47 = (void *)[*(id *)(a1 + 8) unarchiver:a1 didDecodeObject:v38];
                              value[0] = v47;
                            }

                            else
                            {
                              double v47 = value[0];
                            }

                            if (v47) {
                              objc_msgSend((id)a1, "_replaceObject:withObject:", v38);
                            }
                            else {
                              value[0] = v38;
                            }
                          }

                          unint64_t v38 = value[0];
                          CFDictionarySetValue(*(CFMutableDictionaryRef *)(a1 + 24), value[0], (const void *)v15);
                          CFDictionarySetValue(*(CFMutableDictionaryRef *)(a1 + 56), (const void *)v15, v38);
                        }

                        CFDictionaryRemoveValue(*(CFMutableDictionaryRef *)(a1 + 48), (const void *)v15);
                        *a3 = v38;
                        return 1LL;
                      }

void sub_1835B6F68( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  if (a2)
  {
    objc_begin_catch(exception_object);
    CFDictionaryRemoveValue(*(CFMutableDictionaryRef *)(v17 + 48), v18);
    objc_exception_rethrow();
    __break(1u);
    JUMPOUT(0x1835B7054LL);
  }

  _Unwind_Resume(exception_object);
}

BOOL decodingCyclesIsAllowedForCoder(uint64_t a1)
{
  unint64_t v1 = atomic_load((unint64_t *)(a1 + 16));
  char v2 = atomic_load((unint64_t *)(a1 + 16));
  int v3 = atomic_load((unint64_t *)(a1 + 16));
  int TrustRestrictions = _NSCoderGetTrustRestrictions();
  if ((v2 & 0x20) != 0) {
    return 0LL;
  }
  return ((v3 << 16) & 0x1000000 | (v1 >> 2) & 1) != 1 || TrustRestrictions != 0;
}

uint64_t _decodeInt32(objc_class *a1, const void *a2, _DWORD *a3)
{
  v8[1] = *MEMORY[0x1895F89C0];
  v8[0] = 0LL;
  uint64_t result = _decodeInt64((uint64_t)a1, a2, v8);
  int v7 = v8[0];
  if ((_DWORD)result)
  {
    if (v8[0] == SLODWORD(v8[0]))
    {
      uint64_t result = 1LL;
    }

    else
    {
      -[objc_class __failWithExceptionName:errorCode:format:]( a1,  "__failWithExceptionName:errorCode:format:",  *MEMORY[0x189603B40],  4864LL,  @"%@: value (%lld) for key (%@) too large to fit in a 32-bit integer",  _NSMethodExceptionProem(a1, sel_decodeInt32ForKey_),  v8[0],  a2);
      uint64_t result = 0LL;
    }
  }

  *a3 = v7;
  return result;
}

uint64_t _decodeFloat(objc_class *a1, const void *a2, float *a3)
{
  v9[1] = *(double *)MEMORY[0x1895F89C0];
  v9[0] = 0.0;
  uint64_t result = _decodeDouble((uint64_t)a1, a2, v9);
  double v7 = v9[0];
  if ((_DWORD)result)
  {
    uint64_t result = 1LL;
    if (fabs(v9[0]) != INFINITY && (v9[0] < -3.40282347e38 || v9[0] > 3.40282347e38))
    {
      -[objc_class __failWithExceptionName:errorCode:format:]( a1,  "__failWithExceptionName:errorCode:format:",  *MEMORY[0x189603B40],  4864LL,  @"%@: value (%f) for key (%@) too large to fit in 32-bit float",  _NSMethodExceptionProem(a1, sel_decodeFloatForKey_),  *(void *)&v9[0],  a2);
      uint64_t result = 0LL;
    }
  }

  float v8 = v7;
  *a3 = v8;
  return result;
}

uint64_t _decodeDouble(uint64_t a1, const void *a2, double *a3)
{
  valuePtr[1] = *MEMORY[0x1895F89C0];
  unint64_t v6 = atomic_load((unint64_t *)(a1 + 16));
  atomic_store(v6 | 8, (unint64_t *)(a1 + 16));
  valuePtr[0] = 0LL;
  double v7 = *(const __CFArray **)(a1 + 80);
  if (!v7)
  {
    double v12 = 0.0;
    if (!__CFBinaryPlistGetOffsetForValueFromDictionary3())
    {
LABEL_21:
      uint64_t result = 0LL;
      goto LABEL_22;
    }

    uint64_t v13 = *(void *)(a1 + 104);
    unint64_t v14 = (unsigned __int8 *)(v13 + v20);
    unint64_t v15 = v13 + *(void *)(a1 + 112) - 1;
    int v16 = *v14;
    if (v16 == 35)
    {
      uint64_t v17 = 9LL;
      if ((unint64_t)v14 < 0xFFFFFFFFFFFFFFF7LL && v15 >= (unint64_t)(v14 + 9))
      {
        double v12 = COERCE_DOUBLE(bswap64(*(void *)(v14 + 1)));
        goto LABEL_18;
      }
    }

    else
    {
      if (v16 != 34)
      {
LABEL_20:
        objc_msgSend( (id)a1,  "__failWithExceptionName:errorCode:format:",  @"NSInvalidUnarchiveOperationException",  4864,  @"%@: value for key (%@) is not a 64-bit float",  _NSMethodExceptionProem((objc_class *)a1, sel_decodeDoubleForKey_),  a2);
        goto LABEL_21;
      }

      uint64_t v17 = 5LL;
      if ((unint64_t)v14 < 0xFFFFFFFFFFFFFFFBLL && v15 >= (unint64_t)(v14 + 5))
      {
        double v12 = COERCE_FLOAT(bswap32(*(_DWORD *)(v14 + 1)));
LABEL_18:
        uint64_t result = 1LL;
        goto LABEL_22;
      }
    }

    objc_msgSend( (id)a1,  "__failWithExceptionName:errorCode:format:",  @"NSArchiverArchiveInconsistency",  4864,  @"overflow while attempting to read %lu bytes (float)",  v17);
    goto LABEL_20;
  }

  CFIndex Count = CFArrayGetCount(v7);
  uint64_t ValueAtIndex = (const __CFArray *)CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 80), Count - 1);
  if (CFGetTypeID(ValueAtIndex) == 19)
  {
    id Value = (void *)CFArrayGetValueAtIndex(ValueAtIndex, 0LL);
    id v11 = Value;
    CFArrayRemoveValueAtIndex(ValueAtIndex, 0LL);
  }

  else
  {
    id Value = (void *)CFDictionaryGetValue(ValueAtIndex, a2);
    id v18 = Value;
  }

  double v12 = 0.0;
  if (!Value) {
    goto LABEL_21;
  }
  if (CFGetTypeID(Value) != 22 || !CFNumberIsFloatType((CFNumberRef)Value)) {
    goto LABEL_20;
  }
  CFNumberGetValue((CFNumberRef)Value, kCFNumberFloat64Type, valuePtr);
  uint64_t result = 1LL;
  double v12 = *(double *)valuePtr;
LABEL_22:
  *a3 = v12;
  return result;
}

const UInt8 *_decodeBytes(uint64_t a1, const void *a2, void *a3)
{
  uint64_t v33 = *MEMORY[0x1895F89C0];
  unint64_t v6 = atomic_load((unint64_t *)(a1 + 16));
  atomic_store(v6 | 8, (unint64_t *)(a1 + 16));
  double v7 = *(const __CFArray **)(a1 + 80);
  if (!v7)
  {
    if (a3) {
      *a3 = 0LL;
    }
    int OffsetForValueFromDictionary3 = __CFBinaryPlistGetOffsetForValueFromDictionary3();
    uint64_t v13 = 0LL;
    if (!OffsetForValueFromDictionary3) {
      return v13;
    }
    unint64_t v14 = *(void *)(a1 + 104);
    unint64_t v15 = (_BYTE *)(v14 + v32);
    char v16 = *(_BYTE *)(v14 + v32);
    if ((v16 & 0xF0) != 0x40)
    {
      BOOL v17 = (v16 & 0xF0) == 0x50 && (v16 & 0xF) == 5;
      if (v17 && v15[1] == 36 && v15[2] == 110 && v15[3] == 117 && v15[4] == 108 && v15[5] == 108) {
        return 0LL;
      }
LABEL_29:
      unint64_t v28 = _NSMethodExceptionProem((objc_class *)a1, sel_decodeBytesForKey_returnedLength_);
      unint64_t v29 = a2;
      uint64_t v20 = @"NSInvalidUnarchiveOperationException";
      unsigned int v21 = @"%@: value for key (%@) is not a blob of bytes";
      unsigned int v22 = (void *)a1;
LABEL_30:
      objc_msgSend(v22, "__failWithExceptionName:errorCode:format:", v20, 4864, v21, v28, v29);
      return 0LL;
    }

    unint64_t v23 = v16 & 0xF;
    uint64_t v13 = v15 + 1;
    uint64_t v31 = v15 + 1;
    if ((v16 & 0xF) == 0xF)
    {
      if ((_readInt((void *)a1, v13, v14 + *(void *)(a1 + 112) - 1, &v30, &v31) & 1) == 0)
      {
LABEL_43:
        unint64_t v28 = _NSMethodExceptionProem((objc_class *)a1, sel_decodeBytesForKey_returnedLength_);
        unsigned int v21 = @"%@: data is corrupt";
LABEL_44:
        unsigned int v22 = (void *)a1;
        uint64_t v20 = @"NSArchiverArchiveInconsistency";
        goto LABEL_30;
      }

      unint64_t v23 = v30;
      if ((v30 & 0x8000000000000000LL) != 0)
      {
        unint64_t v28 = _NSMethodExceptionProem((objc_class *)a1, sel_decodeBytesForKey_returnedLength_);
        unint64_t v29 = (const void *)v23;
        unsigned int v21 = @"%@: data bytes is too long to decode (%qd)";
        goto LABEL_44;
      }

      uint64_t v13 = v31;
      unint64_t v14 = *(void *)(a1 + 104);
    }

    unint64_t v24 = &v13[-v14];
    if ((unint64_t)v13 >= v14)
    {
      unint64_t v25 = *(void *)(a1 + 112);
      BOOL v26 = v25 >= (unint64_t)v24;
      unint64_t v27 = v25 - (void)v24;
      if (v26 && v23 <= v27)
      {
        if (a3) {
          *a3 = v23;
        }
        return v13;
      }
    }

    goto LABEL_43;
  }

  CFIndex Count = CFArrayGetCount(v7);
  uint64_t ValueAtIndex = (const __CFArray *)CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 80), Count - 1);
  if (CFGetTypeID(ValueAtIndex) == 19)
  {
    id Value = (void *)CFArrayGetValueAtIndex(ValueAtIndex, 0LL);
    id v11 = Value;
    CFArrayRemoveValueAtIndex(ValueAtIndex, 0LL);
    if (!a3) {
      goto LABEL_22;
    }
    goto LABEL_21;
  }

  id Value = (void *)CFDictionaryGetValue(ValueAtIndex, a2);
  id v18 = Value;
  if (a3) {
LABEL_21:
  }
    *a3 = 0LL;
LABEL_22:
  if (!Value || CFGetTypeID(Value) == 7 && CFEqual(@"$null", Value)) {
    return 0LL;
  }
  if (CFGetTypeID(Value) != 20) {
    goto LABEL_29;
  }
  if (a3) {
    *a3 = CFDataGetLength((CFDataRef)Value);
  }
  return CFDataGetBytePtr((CFDataRef)Value);
}

uint64_t _compatDecodeValueOfObjCType(uint64_t a1, NSString *a2, BOOL *a3, const char *a4)
{
  uint64_t v52 = *MEMORY[0x1895F89C0];
  if ((int)a2 <= 80)
  {
    if ((int)a2 > 57)
    {
      switch((int)a2)
      {
        case ':':
          double v7 = (void *)[@"$" mutableCopy];
          uint64_t v8 = *(int *)(a1 + 64);
          *(_DWORD *)(a1 + 64) = v8 + 1;
          else {
            id v9 = (NSString *)generic_keys[v8];
          }
          [v7 appendString:v9];
          CFTypeRef v44 = (NSString *)[(id)a1 decodeObjectOfClass:objc_opt_class() forKey:v7];

          if (_NSIsNSString())
          {
            uint64_t v41 = (void *)NSSelectorFromString(v44);
            goto LABEL_58;
          }

          *(void *)a3 = 0LL;
          if (!v44) {
            return 0LL;
          }
          uint64_t v49 = _NSMethodExceptionProem((objc_class *)a1, sel_decodeObject);
          uint64_t v50 = v44;
          unsigned int v22 = @"NSInvalidUnarchiveOperationException";
          uint64_t v20 = @"%@: Found non-string object (%@) where expecting SEL name";
          break;
        case ';':
        case '<':
        case '=':
        case '>':
        case '?':
        case 'A':
          goto LABEL_25;
        case '@':
          uint64_t v23 = *(int *)(a1 + 64);
          *(_DWORD *)(a1 + 64) = v23 + 1;
          else {
            unint64_t v24 = (NSString *)generic_keys[v23];
          }
          uint64_t result = _decodeObject(a1, v24, a3);
          if (!(_DWORD)result) {
            return result;
          }
          id v45 = *(id *)a3;
          return 1LL;
        case 'B':
          uint64_t v25 = *(int *)(a1 + 64);
          *(_DWORD *)(a1 + 64) = v25 + 1;
          else {
            BOOL v26 = (NSString *)generic_keys[v25];
          }
          return _decodeBool(a1, v26, a3);
        case 'C':
          goto LABEL_7;
        default:
          if ((_DWORD)a2 == 73 || (_DWORD)a2 == 76) {
            goto LABEL_19;
          }
          goto LABEL_25;
      }

      goto LABEL_79;
    }

    if ((_DWORD)a2 == 35)
    {
      uint64_t v33 = (void *)[@"$" mutableCopy];
      uint64_t v34 = *(int *)(a1 + 64);
      *(_DWORD *)(a1 + 64) = v34 + 1;
      else {
        int v35 = (NSString *)generic_keys[v34];
      }
      [v33 appendString:v35];
      id v46 = (NSString *)[(id)a1 decodeObjectOfClass:objc_opt_class() forKey:v33];

      if (_NSIsNSString())
      {
        double v47 = *(void **)(a1 + 120);
        Class v48 = NSClassFromString(v46);
        if (![v47 classNameAllowed:v48])
        {
          unint64_t v19 = (const __CFString *)*MEMORY[0x189603A60];
          uint64_t v49 = _NSMethodExceptionProem((objc_class *)a1, sel_decodeObject);
          uint64_t v50 = v46;
          uint64_t v20 = @"%@: data to unarchive contains class (%@) which has not been allowed";
          goto LABEL_26;
        }

        _NSCoderCheckPotentiallyMangledClassNameAndWarn((uint64_t)v48, 0);
        *(void *)a3 = v48;
        return 1LL;
      }

      *(void *)a3 = 0LL;
      if (v46)
      {
        uint64_t v49 = _NSMethodExceptionProem((objc_class *)a1, sel_decodeObject);
        uint64_t v50 = v46;
        unsigned int v22 = @"NSInvalidUnarchiveOperationException";
        uint64_t v20 = @"%@: Found non-string object (%@) where expecting class name";
        goto LABEL_79;
      }
    }

    else
    {
      if ((_DWORD)a2 == 37)
      {
        CFTypeID v36 = _NSMethodExceptionProem((objc_class *)a1, a4);
        NSLog((NSString *)@"%@: warning: NXAtom being decoded -- will not be uniqued", v36);
      }

      else if ((_DWORD)a2 != 42)
      {
LABEL_25:
        unint64_t v19 = (const __CFString *)*MEMORY[0x189603A60];
        uint64_t v49 = _NSMethodExceptionProem((objc_class *)a1, a4);
        uint64_t v50 = a2;
        uint64_t v20 = @"%@: unknown type encoding ('%c')";
LABEL_26:
        unsigned int v21 = (void *)a1;
        unsigned int v22 = v19;
LABEL_80:
        objc_msgSend(v21, "__failWithExceptionName:errorCode:format:", v22, 4864, v20, v49, v50);
        return 0LL;
      }

      unint64_t v37 = (void *)[@"$" mutableCopy];
      uint64_t v38 = *(int *)(a1 + 64);
      *(_DWORD *)(a1 + 64) = v38 + 1;
      else {
        CFIndex v39 = (NSString *)generic_keys[v38];
      }
      [v37 appendString:v39];
      uint64_t v40 = (NSString *)[(id)a1 decodeObjectOfClass:objc_opt_class() forKey:v37];

      if (_NSIsNSString())
      {
        uint64_t v41 = strdup(-[NSString cString](v40, "cString"));
LABEL_58:
        *(void *)a3 = v41;
        return 1LL;
      }

      *(void *)a3 = 0LL;
      if (v40)
      {
        uint64_t v49 = _NSMethodExceptionProem((objc_class *)a1, sel_decodeObject);
        uint64_t v50 = v40;
        unsigned int v22 = @"NSInvalidUnarchiveOperationException";
        uint64_t v20 = @"%@: Found non-string object (%@) where expecting C string";
LABEL_79:
        unsigned int v21 = (void *)a1;
        goto LABEL_80;
      }
    }

    return 0LL;
  }

  switch((int)a2)
  {
    case 'c':
LABEL_7:
      uint64_t v10 = *(int *)(a1 + 64);
      *(_DWORD *)(a1 + 64) = v10 + 1;
      else {
        id v11 = (NSString *)generic_keys[v10];
      }
      unsigned int v51 = 0;
      int v27 = _decodeInt32((objc_class *)a1, v11, &v51);
      uint64_t result = 0LL;
      BOOL v28 = v51;
      if (v27)
      {
        if (v51 == (char)v51)
        {
          uint64_t result = 1LL;
        }

        else
        {
          objc_msgSend( (id)a1,  "__failWithExceptionName:errorCode:format:",  *MEMORY[0x189603B40],  4864,  @"%@: value (%d) for key (%@) too large to fit in a char",  _NSMethodExceptionProem((objc_class *)a1, sel_decodeInt32ForKey_),  v51,  v11);
          uint64_t result = 0LL;
        }
      }

      *a3 = v28;
      return result;
    case 'd':
      uint64_t v29 = *(int *)(a1 + 64);
      *(_DWORD *)(a1 + 64) = v29 + 1;
      else {
        unint64_t v30 = (NSString *)generic_keys[v29];
      }
      return _decodeDouble(a1, v30, (double *)a3);
    case 'e':
    case 'g':
    case 'h':
    case 'j':
    case 'k':
    case 'm':
    case 'n':
    case 'o':
    case 'p':
    case 'r':
      goto LABEL_25;
    case 'f':
      uint64_t v31 = *(int *)(a1 + 64);
      *(_DWORD *)(a1 + 64) = v31 + 1;
      else {
        uint64_t v32 = (NSString *)generic_keys[v31];
      }
      return _decodeFloat((objc_class *)a1, v32, (float *)a3);
    case 'i':
    case 'l':
LABEL_19:
      uint64_t v14 = *(int *)(a1 + 64);
      *(_DWORD *)(a1 + 64) = v14 + 1;
      else {
        unint64_t v15 = (NSString *)generic_keys[v14];
      }
      return _decodeInt32((objc_class *)a1, v15, a3);
    case 'q':
      goto LABEL_23;
    case 's':
      goto LABEL_15;
    default:
      if ((_DWORD)a2 == 81)
      {
LABEL_23:
        uint64_t v17 = *(int *)(a1 + 64);
        *(_DWORD *)(a1 + 64) = v17 + 1;
        else {
          id v18 = (NSString *)generic_keys[v17];
        }
        uint64_t result = _decodeInt64(a1, v18, (unint64_t *)a3);
      }

      else
      {
        if ((_DWORD)a2 != 83) {
          goto LABEL_25;
        }
LABEL_15:
        uint64_t v12 = *(int *)(a1 + 64);
        *(_DWORD *)(a1 + 64) = v12 + 1;
        else {
          uint64_t v13 = (NSString *)generic_keys[v12];
        }
        unsigned int v51 = 0;
        int v42 = _decodeInt32((objc_class *)a1, v13, &v51);
        uint64_t result = 0LL;
        __int16 v43 = v51;
        if (v42)
        {
          if (v51 == (__int16)v51)
          {
            uint64_t result = 1LL;
          }

          else
          {
            objc_msgSend( (id)a1,  "__failWithExceptionName:errorCode:format:",  *MEMORY[0x189603B40],  4864,  @"%@: value (%d) for key (%@) too large to fit in a short",  _NSMethodExceptionProem((objc_class *)a1, sel_decodeInt32ForKey_),  v51,  v13);
            uint64_t result = 0LL;
          }
        }

        *(_WORD *)a3 = v43;
      }

      break;
  }

  return result;
}

uint64_t __NSKeyedUnarchiverUnarchiveObject(void *a1, const char *a2, uint64_t a3)
{
  if (a3) {
    return [a1 unarchiveTopLevelObjectWithData:a2 error:a3];
  }
  else {
    return [a1 unarchiveObjectWithData:a2];
  }
}

id __NSKeyedUnarchiverSecureUnarchiveObjectOfClass(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return +[NSKeyedUnarchiver unarchivedObjectOfClass:fromData:error:]( &OBJC_CLASS___NSKeyedUnarchiver,  "unarchivedObjectOfClass:fromData:error:",  a1,  a2,  a3);
}

id __NSKeyedUnarchiverSecureUnarchiveObjectOfClasses(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return +[NSKeyedUnarchiver unarchivedObjectOfClasses:fromData:error:]( NSKeyedUnarchiver,  "unarchivedObjectOfClasses:fromData:error:",  [MEMORY[0x189604010] setWithArray:a1],  a2,  a3);
}

NSArray *__NSKeyedUnarchiverSecureUnarchivedArrayOfObjectsOfClasses(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return +[NSKeyedUnarchiver unarchivedArrayOfObjectsOfClasses:fromData:error:]( NSKeyedUnarchiver,  "unarchivedArrayOfObjectsOfClasses:fromData:error:",  [MEMORY[0x189604010] setWithArray:a1],  a2,  a3);
}

NSDictionary *__NSKeyedUnarchiverSecureUnarchivedDictionaryOfKeysOfClassesObjectsOfClasses( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = [MEMORY[0x189604010] setWithArray:a1];
  return +[NSKeyedUnarchiver unarchivedDictionaryWithKeysOfClasses:objectsOfClasses:fromData:error:]( NSKeyedUnarchiver,  "unarchivedDictionaryWithKeysOfClasses:objectsOfClasses:fromData:error:",  v7,  [MEMORY[0x189604010] setWithArray:a2],  a3,  a4);
}

CFTypeRef __NSKeyedArchiverUIDCreateCached(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 96);
  unint64_t v6 = *(void *)(a3 + 104);
  if (v5) {
    BOOL v7 = v6 > a2;
  }
  else {
    BOOL v7 = 0;
  }
  if (!v7)
  {
    LODWORD(v_Block_object_dispose(va, 8) = 2 * v6;
    if (!v6) {
      LODWORD(v_Block_object_dispose(va, 8) = 256;
    }
    else {
      uint64_t v8 = v8;
    }
    *(void *)(a3 + 104) = v8;
    uint64_t v9 = __CFSafelyReallocateWithAllocator();
    *(void *)(a3 + 96) = v9;
    bzero((void *)(v9 + 8LL * v6), 8 * (*(void *)(a3 + 104) - v6));
    uint64_t v5 = *(void *)(a3 + 96);
  }

  uint64_t v10 = *(const void **)(v5 + 8LL * a2);
  if (!v10)
  {
    uint64_t v10 = (const void *)_CFKeyedArchiverUIDCreate();
    *(void *)(*(void *)(a3 + 96) + 8LL * a2) = v10;
  }

  return CFRetain(v10);
}

uint64_t _decodeObjectReference(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4, void *a5)
{
  value[1] = *(void **)MEMORY[0x1895F89C0];
  *a5 = 0LL;
  int v9 = [(id)a1 requiresSecureCoding];
  value[0] = 0LL;
  if (!CFDictionaryGetValueIfPresent(*(CFDictionaryRef *)(a1 + 48), (const void *)a4, (const void **)value))
  {
    uint64_t result = CFDictionaryGetValueIfPresent(*(CFDictionaryRef *)(a1 + 56), (const void *)a4, (const void **)value);
    if (!(_DWORD)result) {
      return result;
    }
    if (v9
      && ![(id)a1 _validateAllowedClassesContainsClassOfReference:value[0] forKey:a3])
    {
      goto LABEL_13;
    }

    goto LABEL_9;
  }

  if (decodingCyclesIsAllowedForCoder(a1))
  {
LABEL_3:
    if (v9
      && (objc_msgSend( (id)a1,  "_validateAllowedClassesContainsClass:forKey:",  objc_msgSend(value[0], "classForCoder"),  a3) & 1) == 0)
    {
LABEL_13:
      id v11 = 0LL;
      goto LABEL_14;
    }

void YOU_HAVE_A_CYCLE_IN_YOUR_OBJECT_GRAPH__THIS_ISNT_A_FOUNDATION_BUG__SEE_ERROR_MESSAGE_()
{
  uint64_t v2 = *MEMORY[0x1895F89C0];
  uint64_t v0 = (os_log_s *)_NSOSLog();
  if (os_log_type_enabled(v0, OS_LOG_TYPE_FAULT))
  {
    *(_WORD *)unint64_t v1 = 0;
    _os_log_fault_impl( &dword_182EB1000,  v0,  OS_LOG_TYPE_FAULT,  "Decoder with secure coding enabled is decoding a cycle. See rdar://105473537 for help\n",  v1,  2u);
  }

IMP __coderAllocateClassForUnarchival_block_invoke()
{
  qword_18C4961A8 = (uint64_t)class_getMethodImplementation(MEMORY[0x189616338], sel_classForKeyedArchiver);
  qword_18C4961B0 = (uint64_t)class_getMethodImplementation(MEMORY[0x189616338], sel_classForArchiver);
  IMP result = class_getMethodImplementation(MEMORY[0x189616338], sel_classForCoder);
  qword_18C4961B8 = (uint64_t)result;
  return result;
}

uint64_t sub_1835BA9A0()
{
  return 0LL;
}

uint64_t initEXGetExtensionContextVendorClass()
{
  uint64_t v0 = (void *)ExtensionFoundationLibrary_frameworkLibrary;
  if ((ExtensionFoundationLibrary_frameworkLibrary
     || (uint64_t v0 = dlopen("/System/Library/Frameworks/ExtensionFoundation.framework/ExtensionFoundation", 2),
         (ExtensionFoundationLibrary_frameworkLibrardouble y = (uint64_t)v0) != 0))
    && (unint64_t v1 = (uint64_t (*)(void))dlsym(v0, "EXGetExtensionContextVendorClass"),
        (softLinkEXGetExtensionContextVendorClass Class = v1) != 0LL))
  {
    return v1();
  }

  else
  {
    return 0LL;
  }

uint64_t initEXGetExtensionContextInternalClass()
{
  uint64_t v0 = (void *)ExtensionFoundationLibrary_frameworkLibrary;
  if ((ExtensionFoundationLibrary_frameworkLibrary
     || (uint64_t v0 = dlopen("/System/Library/Frameworks/ExtensionFoundation.framework/ExtensionFoundation", 2),
         (ExtensionFoundationLibrary_frameworkLibrardouble y = (uint64_t)v0) != 0))
    && (unint64_t v1 = (uint64_t (*)(void))dlsym(v0, "EXGetExtensionContextInternalClass"),
        (softLinkEXGetExtensionContextInternalClass Class = v1) != 0LL))
  {
    return v1();
  }

  else
  {
    return 0LL;
  }

void _SetPreferredLanguages(void *a1)
{
  uint64_t v24 = *MEMORY[0x1895F89C0];
  uint64_t v2 = (void *)[MEMORY[0x189603FA8] array];
  __int128 v20 = 0u;
  __int128 v21 = 0u;
  __int128 v22 = 0u;
  __int128 v23 = 0u;
  uint64_t v3 = [a1 countByEnumeratingWithState:&v20 objects:v19 count:16];
  if (v3)
  {
    uint64_t v4 = v3;
    uint64_t v5 = *(void *)v21;
    do
    {
      uint64_t v6 = 0LL;
      do
      {
        if (*(void *)v21 != v5) {
          objc_enumerationMutation(a1);
        }
        BOOL v7 = *(void **)(*((void *)&v20 + 1) + 8 * v6);
        if ((_NSIsNSString() & 1) == 0) {
          -[NSAssertionHandler handleFailureInFunction:file:lineNumber:description:]( +[NSAssertionHandler currentHandler](&OBJC_CLASS___NSAssertionHandler, "currentHandler"),  "handleFailureInFunction:file:lineNumber:description:",  +[NSString stringWithUTF8String:]( &OBJC_CLASS___NSString,  "stringWithUTF8String:",  "void _SetPreferredLanguages(NSArray *)"),  @"NSLocale.m",  254LL,  @"Unexpected language identifier object type: %@",  v7);
        }
        uint64_t v8 = _NormalizedLanguageIDFromString((uint64_t)v7);
        [v2 addObject:v8];
        if (([v7 isEqualToString:v8] & 1) == 0)
        {
          int v9 = (os_log_s *)_NSOSLog();
          if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 138412290;
            id v18 = v7;
            _os_log_error_impl( &dword_182EB1000,  v9,  OS_LOG_TYPE_ERROR,  "Warning: Language identifier is not in canonical form: %@",  buf,  0xCu);
          }
        }

        ++v6;
      }

      while (v4 != v6);
      uint64_t v4 = [a1 countByEnumeratingWithState:&v20 objects:v19 count:16];
    }

    while (v4);
  }

  uint64_t v10 = (void *)_CFLocaleCopyPreferredLanguagesForCurrentUser();
  if (!v10 || (v11 = v10, char v12 = [v10 isEqualToArray:v2], CFRelease(v11), (v12 & 1) == 0))
  {
    uint64_t v13 = (const __CFString *)*MEMORY[0x189605170];
    uint64_t v14 = (const __CFString *)*MEMORY[0x189605198];
    unint64_t v15 = (const __CFString *)*MEMORY[0x189605178];
    CFPreferencesSetValue( @"AppleLanguages",  v2,  (CFStringRef)*MEMORY[0x189605170],  (CFStringRef)*MEMORY[0x189605198],  (CFStringRef)*MEMORY[0x189605178]);
    CFPreferencesSynchronize(v13, v14, v15);
    DarwinNotifyCenter = CFNotificationCenterGetDarwinNotifyCenter();
    CFNotificationCenterPostNotification( DarwinNotifyCenter,  @"AppleLanguagePreferencesChangedNotification",  0LL,  0LL,  1u);
  }

uint64_t _NormalizedLanguageIDFromString(uint64_t a1)
{
  if (qword_18C4967C0 != -1) {
    dispatch_once(&qword_18C4967C0, &__block_literal_global_23);
  }
  uint64_t result = [(id)_MergedGlobals_106 objectForKey:a1];
  if (!result)
  {
    uint64_t v3 = [MEMORY[0x189603F90] canonicalLanguageIdentifierFromString:a1];
    uint64_t result = a1;
    if (v3)
    {
      uint64_t result = [(id)qword_18C4967B8 objectForKey:v3];
      if (!result) {
        return v3;
      }
    }
  }

  return result;
}

uint64_t GetBaseLanguageIdentifierFromIdentifier(void *a1)
{
  uint64_t v6 = *MEMORY[0x1895F89C0];
  if (![a1 length]) {
    return 0LL;
  }
  [a1 UTF8String];
  uint64_t v2 = (void *)objc_msgSend( (id)objc_msgSend( MEMORY[0x189603F90],  "componentsFromLocaleIdentifier:",   -[NSString initWithBytes:length:encoding:]( [NSString alloc],  "initWithBytes:length:encoding:",  v5,  (int)uloc_addLikelySubtags(),  4)),  "mutableCopy");
  [v2 removeObjectForKey:*MEMORY[0x189603A98]];
  uint64_t v3 = objc_msgSend( MEMORY[0x189603F90],  "canonicalLanguageIdentifierFromString:",  objc_msgSend(MEMORY[0x189603F90], "localeIdentifierFromComponents:", v2));

  return v3;
}

uint64_t MatchesBaseLanguageInLanguageIDs(void *a1, void *a2)
{
  uint64_t v13 = *MEMORY[0x1895F89C0];
  BaseLanguageIdentifierFromIdentifier = (void *)GetBaseLanguageIdentifierFromIdentifier(a1);
  __int128 v9 = 0u;
  __int128 v10 = 0u;
  __int128 v11 = 0u;
  __int128 v12 = 0u;
  uint64_t result = [a2 countByEnumeratingWithState:&v9 objects:v8 count:16];
  if (result)
  {
    uint64_t v5 = result;
    uint64_t v6 = *(void *)v10;
    while (2)
    {
      uint64_t v7 = 0LL;
      do
      {
        if (*(void *)v10 != v6) {
          objc_enumerationMutation(a2);
        }
        if ([BaseLanguageIdentifierFromIdentifier isEqualToString:GetBaseLanguageIdentifierFromIdentifier(*(void **)(*((void *)&v9 + 1) + 8 * v7))]) {
          return 1LL;
        }
        ++v7;
      }

      while (v5 != v7);
      uint64_t result = [a2 countByEnumeratingWithState:&v9 objects:v8 count:16];
      uint64_t v5 = result;
      if (result) {
        continue;
      }
      break;
    }
  }

  return result;
}

__CFArray *__CFLocalePrefsCopyAppleLanguages(const __CFDictionary *a1)
{
  id Value = (const __CFArray *)CFDictionaryGetValue(a1, @"AppleLanguages");
  if (!Value) {
    return 0LL;
  }
  uint64_t v2 = Value;
  CFTypeID v3 = CFGetTypeID(Value);
  if (v3 != CFArrayGetTypeID()) {
    return 0LL;
  }
  uint64_t Count = CFArrayGetCount(v2);
  CFMutableDictionaryRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x189604DD0], Count, MEMORY[0x189605228]);
  if (Count >= 1)
  {
    for (CFIndex i = 0LL; i != Count; ++i)
    {
      uint64_t ValueAtIndex = CFArrayGetValueAtIndex(v2, i);
      CFTypeID v8 = CFGetTypeID(ValueAtIndex);
      if (v8 == CFStringGetTypeID()) {
        CFArrayAppendValue(Mutable, ValueAtIndex);
      }
    }
  }

  return Mutable;
}

CFTypeRef __CFLocalePrefsCopyAppleLocale(const __CFDictionary *a1)
{
  id Value = CFDictionaryGetValue(a1, @"AppleLocale");
  if (Value && (v2 = Value, CFTypeID v3 = CFGetTypeID(Value), v3 == CFStringGetTypeID())) {
    return CFRetain(v2);
  }
  else {
    return 0LL;
  }
}

BOOL __CFLocalePrefsAppleMetricUnitsIsMetric(const __CFDictionary *a1, BOOL *a2)
{
  id Value = CFDictionaryGetValue(a1, @"AppleMetricUnits");
  BOOL v4 = Value == (const void *)*MEMORY[0x189604DE8];
  BOOL v5 = Value == (const void *)*MEMORY[0x189604DE0] || Value == (const void *)*MEMORY[0x189604DE8];
  *a2 = v5;
  return v4;
}

uint64_t __CFLocalePrefsAppleMeasurementUnitsIsCm(const __CFDictionary *a1, char *a2)
{
  id Value = CFDictionaryGetValue(a1, @"AppleMeasurementUnits");
  if (!Value) {
    goto LABEL_6;
  }
  BOOL v4 = Value;
  if (!CFEqual(Value, @"Inches"))
  {
    if (CFEqual(v4, @"Centimeters"))
    {
      char v6 = 1;
      uint64_t result = 1LL;
      goto LABEL_7;
    }

uint64_t __CFLocalePrefsAppleTemperatureUnitIsC(const __CFDictionary *a1, char *a2)
{
  id Value = CFDictionaryGetValue(a1, @"AppleTemperatureUnit");
  if (!Value) {
    goto LABEL_6;
  }
  BOOL v4 = Value;
  if (!CFEqual(Value, (CFTypeRef)*MEMORY[0x189605000]))
  {
    if (CFEqual(v4, (CFTypeRef)*MEMORY[0x189604FF8]))
    {
      char v6 = 1;
      uint64_t result = 1LL;
      goto LABEL_7;
    }

BOOL __CFLocalePrefsAppleForce24HourTime(const __CFDictionary *a1, BOOL *a2)
{
  id Value = CFDictionaryGetValue(a1, @"AppleICUForce24HourTime");
  BOOL v4 = Value == (const void *)*MEMORY[0x189604DE8];
  BOOL v5 = Value == (const void *)*MEMORY[0x189604DE0] || Value == (const void *)*MEMORY[0x189604DE8];
  *a2 = v5;
  return v4;
}

BOOL __CFLocalePrefsAppleForce12HourTime(const __CFDictionary *a1, BOOL *a2)
{
  id Value = CFDictionaryGetValue(a1, @"AppleICUForce12HourTime");
  BOOL v4 = Value == (const void *)*MEMORY[0x189604DE8];
  BOOL v5 = Value == (const void *)*MEMORY[0x189604DE0] || Value == (const void *)*MEMORY[0x189604DE8];
  *a2 = v5;
  return v4;
}

CFTypeRef __CFLocalePrefsCopyAppleCollationOrder(const __CFDictionary *a1)
{
  id Value = CFDictionaryGetValue(a1, @"AppleCollationOrder");
  if (Value && (v2 = Value, CFTypeID v3 = CFGetTypeID(Value), v3 == CFStringGetTypeID())) {
    return CFRetain(v2);
  }
  else {
    return 0LL;
  }
}

CFTypeRef __CFLocalePrefsCopyCountry(const __CFDictionary *a1)
{
  id Value = CFDictionaryGetValue(a1, @"Country");
  if (Value && (v2 = Value, CFTypeID v3 = CFGetTypeID(Value), v3 == CFStringGetTypeID())) {
    return CFRetain(v2);
  }
  else {
    return 0LL;
  }
}

CFTypeRef __CFLocalePrefsCopyAppleICUDateTimeSymbols(const __CFDictionary *a1)
{
  id Value = CFDictionaryGetValue(a1, @"AppleICUDateTimeSymbols");
  if (Value && (v2 = Value, CFTypeID v3 = CFGetTypeID(Value), v3 == CFDictionaryGetTypeID())) {
    return CFRetain(v2);
  }
  else {
    return 0LL;
  }
}

CFTypeRef __CFLocalePrefsCopyAppleICUDateFormatStrings(const __CFDictionary *a1)
{
  id Value = CFDictionaryGetValue(a1, @"AppleICUDateFormatStrings");
  if (Value && (v2 = Value, CFTypeID v3 = CFGetTypeID(Value), v3 == CFDictionaryGetTypeID())) {
    return CFRetain(v2);
  }
  else {
    return 0LL;
  }
}

CFTypeRef __CFLocalePrefsCopyAppleICUTimeFormatStrings(const __CFDictionary *a1)
{
  id Value = CFDictionaryGetValue(a1, @"AppleICUTimeFormatStrings");
  if (Value && (v2 = Value, CFTypeID v3 = CFGetTypeID(Value), v3 == CFDictionaryGetTypeID())) {
    return CFRetain(v2);
  }
  else {
    return 0LL;
  }
}

CFTypeRef __CFLocalePrefsCopyAppleICUNumberFormatStrings(const __CFDictionary *a1)
{
  id Value = CFDictionaryGetValue(a1, @"AppleICUNumberFormatStrings");
  if (Value && (v2 = Value, CFTypeID v3 = CFGetTypeID(Value), v3 == CFDictionaryGetTypeID())) {
    return CFRetain(v2);
  }
  else {
    return 0LL;
  }
}

CFTypeRef __CFLocalePrefsCopyAppleICUNumberSymbols(const __CFDictionary *a1)
{
  id Value = CFDictionaryGetValue(a1, @"AppleICUNumberSymbols");
  if (Value && (v2 = Value, CFTypeID v3 = CFGetTypeID(Value), v3 == CFDictionaryGetTypeID())) {
    return CFRetain(v2);
  }
  else {
    return 0LL;
  }
}

CFTypeRef __CFLocalePrefsCopyAppleFirstWeekday(const __CFDictionary *a1)
{
  id Value = CFDictionaryGetValue(a1, @"AppleFirstWeekday");
  if (Value && (v2 = Value, CFTypeID v3 = CFGetTypeID(Value), v3 == CFDictionaryGetTypeID())) {
    return CFRetain(v2);
  }
  else {
    return 0LL;
  }
}

CFTypeRef __CFLocalePrefsCopyAppleMinDaysInFirstWeek(const __CFDictionary *a1)
{
  id Value = CFDictionaryGetValue(a1, @"AppleMinDaysInFirstWeek");
  if (Value && (v2 = Value, CFTypeID v3 = CFGetTypeID(Value), v3 == CFDictionaryGetTypeID())) {
    return CFRetain(v2);
  }
  else {
    return 0LL;
  }
}

NSMapTable *raiseError_0(uint64_t a1, const char *a2)
{
  id v3 = objc_alloc(MEMORY[0x189603F70]);
  SEL Name = sel_getName(a2);
  BOOL v5 = (void *)[v3 initWithName:@"NSMapTableAbstractImplementationError", +[NSString stringWithFormat:]( NSString, "stringWithFormat:", @"abstract method %s called directly on class %@", Name, objc_opt_class()), 0 reason userInfo];
  objc_exception_throw(v5);
  return -[NSMapTable initWithKeyPointerFunctions:valuePointerFunctions:capacity:](v6, v7, v8, v9, v10);
}

uint64_t NSConcreteMapTable_reclaim(uint64_t a1)
{
  if (!*(void *)(a1 + 80)) {
    return 0LL;
  }
  uint64_t v2 = 0LL;
  uint64_t v3 = 0LL;
  unint64_t v4 = 0LL;
  uint64_t v5 = a1 + 24;
  uint64_t v15 = a1 + 16;
  uint64_t v16 = a1 + 8;
  do
  {
    char v6 = (void *)MEMORY[0x186E1FF60]();
    uint64_t v7 = (*(uint64_t (**)(uint64_t, void))(*(void *)(a1 + 32) + 24LL))(*(void *)(a1 + 8) + v2, 0LL);
    uint64_t v8 = (*(uint64_t (**)(uint64_t, void))(*(void *)(a1 + 64) + 24LL))(*(void *)(a1 + 40) + v2, 0LL);
    if (v7 | v8)
    {
      uint64_t v9 = v8;
      if (v7) {
        BOOL v10 = v8 == 0;
      }
      else {
        BOOL v10 = 0;
      }
      if (v10)
      {
        __int128 v12 = *(void (**)(uint64_t, void))(*(void *)(a1 + 16) + 16LL);
        if (v12) {
          v12(v7, *(void *)(*(void *)(a1 + 24) + 8LL));
        }
        (*(void (**)(uint64_t))(*(void *)(a1 + 32) + 48LL))(*(void *)(a1 + 8) + v2);
        *(_BYTE *)(a1 + 1__swift_destroy_boxed_opaque_existential_1(v0 + 16) = 1;
        (*(void (**)(uint64_t))(*(void *)(v5 + 8) + 32LL))(v7);
      }

      else
      {
        if (v7) {
          BOOL v11 = 1;
        }
        else {
          BOOL v11 = v8 == 0;
        }
        if (v11)
        {
          (*(void (**)(uint64_t))(*(void *)(v5 + 8) + 32LL))(v7);
          (*(void (**)(uint64_t))(*(void *)(v5 + 40) + 32LL))(v9);
          ++v3;
        }

        else
        {
          uint64_t v13 = *(void (**)(uint64_t, void))(*(void *)(v16 + 40) + 16LL);
          if (v13) {
            v13(v8, *(void *)(*(void *)(v15 + 8) + 8LL));
          }
          (*(void (**)(uint64_t))(*(void *)(a1 + 64) + 48LL))(*(void *)(a1 + 40) + v2);
          *(_BYTE *)(a1 + 1__swift_destroy_boxed_opaque_existential_1(v0 + 16) = 1;
          (*(void (**)(uint64_t))(*(void *)(v5 + 40) + 32LL))(v9);
        }
      }
    }

    objc_autoreleasePoolPop(v6);
    ++v4;
    v2 += 8LL;
  }

  while (v4 < *(void *)(a1 + 80));
  return v3;
}

uint64_t dealloc(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void **)(result + 24);
  if (v2)
  {
    unint64_t v4 = (void *)result;
    if (v2[3] && v2[6])
    {
      uint64_t result = empty_0(result, a2);
      uint64_t v2 = (void *)v4[3];
    }

    uint64_t v5 = (uint64_t (*)(void, uint64_t))v2[2];
    if (v5) {
      return v5(*v4, a2);
    }
  }

  return result;
}

NSMapTable *__cdecl NSCreateMapTableWithZone( NSMapTableKeyCallBacks *keyCallBacks, NSMapTableValueCallBacks *valueCallBacks, NSUInteger capacity, NSZone *zone)
{
  char v6 = (objc_class *)objc_opt_self();
  uint64_t v7 = (NSZone *)malloc_default_zone();
  uint64_t v8 = (char *)NSAllocateObject(v6, 0LL, v7);
  __int128 v9 = *(_OWORD *)&keyCallBacks->hash;
  __int128 v10 = *(_OWORD *)&keyCallBacks->describe;
  *(_OWORD *)(v8 + 24) = *(_OWORD *)&keyCallBacks->retain;
  *(_OWORD *)(v8 + 40) = v10;
  *(_OWORD *)(v8 + _Block_object_dispose(va, 8) = v9;
  describe = valueCallBacks->describe;
  *(_OWORD *)(v8 + 56) = *(_OWORD *)&valueCallBacks->retain;
  *((void *)v8 + 9) = describe;
  uint64_t result = (NSMapTable *)malloc(0x10uLL);
  if (result)
  {
    result->super.unint64_t isa = (Class)__NSMapTableCallback;
    result[1].super.unint64_t isa = (Class)v8;
    uint64_t v13 = 10248LL;
    if (!keyCallBacks->retain) {
      uint64_t v13 = 8200LL;
    }
    if (valueCallBacks->retain) {
      v13 |= 0x200uLL;
    }
    if (keyCallBacks->release) {
      v13 |= 0x800uLL;
    }
    if (valueCallBacks->release) {
      unint64_t v14 = v13 | 0x200;
    }
    else {
      unint64_t v14 = v13;
    }
    *((void *)v8 + 10) = CFBasicHashCreate(*MEMORY[0x189604DD0], v14, (uint64_t)result);
    return (NSMapTable *)v8;
  }

  else
  {
    qword_18C5D6210 = (uint64_t)"unable to allocate space for callbacks";
    __break(1u);
  }

  return result;
}

NSMapTable *__cdecl NSCreateMapTable( NSMapTableKeyCallBacks *keyCallBacks, NSMapTableValueCallBacks *valueCallBacks, NSUInteger capacity)
{
  uint64_t v8 = *MEMORY[0x1895F89C0];
  __int128 v4 = *(_OWORD *)&keyCallBacks->retain;
  *(_OWORD *)&keyCallBacksa.hash = *(_OWORD *)&keyCallBacks->hash;
  *(_OWORD *)&keyCallBacksa.retain = v4;
  *(_OWORD *)&keyCallBacksa.describe = *(_OWORD *)&keyCallBacks->describe;
  NSMapTableValueCallBacks v6 = *valueCallBacks;
  return NSCreateMapTableWithZone(&keyCallBacksa, &v6, capacity, v3);
}

void sub_1835C0E60( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
}

void sub_1835C1064( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
}

void sub_1835C11A4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
}

NSMapEnumerator *__cdecl NSEnumerateMapTable(NSMapEnumerator *__return_ptr retstr, NSMapTable *table)
{
  if (!table) {
    NSLog( (NSString *)@"%s: map table argument is NULL",  "NSMapEnumerator NSEnumerateMapTable(NSMapTable * _Nonnull)");
  }
  NSUInteger v4 = -[NSMapTable count](table, "count");
  NSUInteger v5 = v4;
  retstr->_pCFIndex i = v4;
  retstr->_sCFIndex i = 0LL;
  if (v4) {
    NSMapTableValueCallBacks v6 = (char *)calloc(v4, 0x10uLL);
  }
  else {
    NSMapTableValueCallBacks v6 = 0LL;
  }
  retstr->_bs = v6;
  uint64_t result = -[NSMapTable getKeys:values:](table, "getKeys:values:", v6, &v6[8 * v5]);
  retstr->_pCFIndex i = (NSUInteger)result;
  return result;
}

BOOL NSNextMapEnumeratorPair(NSMapEnumerator *enumerator, void **key, void **value)
{
  if (!enumerator)
  {
    NSLog( (NSString *)@"%s: state argument is NULL",  key,  value,  "BOOL NSNextMapEnumeratorPair(NSMapEnumerator * _Nonnull, void ** _Nullable, void ** _Nullable)");
LABEL_9:
    LOBYTE(bs) = 1;
    return (char)bs;
  }

  pCFIndex i = enumerator->_pi;
  sCFIndex i = enumerator->_si;
  if (enumerator->_pi > si)
  {
    if (key) {
      *kedouble y = (void *)*((void *)enumerator->_bs + si);
    }
    if (value) {
      NSString *value = (void *)*((void *)enumerator->_bs + si + pi);
    }
    enumerator->_sCFIndex i = si + 1;
    goto LABEL_9;
  }

  bs = enumerator->_bs;
  if (bs)
  {
    free(bs);
    LOBYTE(bs) = 0;
    enumerator->_bs = 0LL;
  }

  return (char)bs;
}

void NSEndMapTableEnumeration(NSMapEnumerator *enumerator)
{
  if (enumerator)
  {
    enumerator->_sCFIndex i = enumerator->_pi;
    free(enumerator->_bs);
    enumerator->_bs = 0LL;
  }

  else
  {
    NSLog((NSString *)@"%s: state argument is NULL", "void NSEndMapTableEnumeration(NSMapEnumerator * _Nonnull)");
  }

BOOL NSCompareMapTables(NSMapTable *table1, NSMapTable *table2)
{
  if (!table1)
  {
    NSLog( (NSString *)@"%s: first map table argument is NULL",  "BOOL NSCompareMapTables(NSMapTable * _Nonnull, NSMapTable * _Nonnull)");
    if (table2) {
      return -[NSMapTable isEqual:](table1, "isEqual:", table2);
    }
LABEL_5:
    NSLog( (NSString *)@"%s: second map table argument is NULL",  "BOOL NSCompareMapTables(NSMapTable * _Nonnull, NSMapTable * _Nonnull)");
    return -[NSMapTable isEqual:](table1, "isEqual:", table2);
  }

  if (!table2) {
    goto LABEL_5;
  }
  return -[NSMapTable isEqual:](table1, "isEqual:", table2);
}

void NSFreeMapTable(NSMapTable *table)
{
  if (table)
  {
  }

  else
  {
    NSLog((NSString *)@"%s: map table argument is NULL", "void NSFreeMapTable(NSMapTable * _Nonnull)");
  }

void NSResetMapTable(NSMapTable *table)
{
  if (!table) {
    NSLog((NSString *)@"%s: map table argument is NULL", "void NSResetMapTable(NSMapTable * _Nonnull)");
  }
  -[NSMapTable removeAllItems](table, "removeAllItems");
}

NSMapTable *__cdecl NSCopyMapTableWithZone(NSMapTable *table, NSZone *zone)
{
  if (!table) {
    NSLog( (NSString *)@"%s: map table argument is NULL",  zone,  "NSMapTable * _Nonnull NSCopyMapTableWithZone(NSMapTable * _Nonnull, NSZone * _Nullable)");
  }
  return (NSMapTable *)-[NSMapTable copy](table, "copy");
}

BOOL NSMapMember(NSMapTable *table, const void *key, void **originalKey, void **value)
{
  if (!table) {
    NSLog( (NSString *)@"%s: map table argument is NULL",  "BOOL NSMapMember(NSMapTable * _Nonnull, const void * _Nonnull, void ** _Nullable, void ** _Nullable)");
  }
  return -[NSMapTable mapMember:originalKey:value:](table, "mapMember:originalKey:value:", key, originalKey, value);
}

void NSMapInsertKnownAbsent(NSMapTable *table, const void *key, const void *value)
{
  if (!table) {
    NSLog( (NSString *)@"%s: map table argument is NULL",  "void NSMapInsertKnownAbsent(NSMapTable * _Nonnull, const void * _Nullable, const void * _Nullable)");
  }
  -[NSMapTable setItem:forKnownAbsentKey:](table, "setItem:forKnownAbsentKey:", value, key);
}

void *__cdecl NSMapInsertIfAbsent(NSMapTable *table, const void *key, const void *value)
{
  if (!table) {
    NSLog( (NSString *)@"%s: map table argument is NULL",  "void * _Nullable NSMapInsertIfAbsent(NSMapTable * _Nonnull, const void * _Nullable, const void * _Nullable)");
  }
  return -[NSMapTable existingItemForSetItem:forAbsentKey:](table, "existingItemForSetItem:forAbsentKey:", value, key);
}

NSUInteger NSCountMapTable(NSMapTable *table)
{
  if (!table) {
    NSLog((NSString *)@"%s: map table argument is NULL", "NSUInteger NSCountMapTable(NSMapTable * _Nonnull)");
  }
  return -[NSMapTable count](table, "count");
}

NSString *__cdecl NSStringFromMapTable(NSMapTable *table)
{
  if (!table) {
    NSLog( (NSString *)@"%s: map table argument is NULL",  "NSString * _Nonnull NSStringFromMapTable(NSMapTable * _Nonnull)");
  }
  return (NSString *)-[NSMapTable description](table, "description");
}

NSArray *__cdecl NSAllMapTableKeys(NSMapTable *table)
{
  if (!table) {
    NSLog( (NSString *)@"%s: map table argument is NULL",  "NSArray * _Nonnull NSAllMapTableKeys(NSMapTable * _Nonnull)");
  }
  return (NSArray *)-[NSMapTable allKeys](table, "allKeys");
}

void freePointerMT(int a1, void *a2)
{
}

uint64_t hashObjectMT(uint64_t a1, void *a2)
{
  return [a2 hash];
}

uint64_t isEqualObjectMT(uint64_t a1, void *a2, void *a3)
{
  if (a2 == a3) {
    return 1LL;
  }
  else {
    return objc_msgSend(a2, "isEqual:");
  }
}

uint64_t describeObjectMT(uint64_t a1, void *a2)
{
  return [a2 description];
}

void sub_1835C1A5C()
{
}

void sub_1835C2D58(_Unwind_Exception *a1)
{
}

void sub_1835C3218(_Unwind_Exception *a1)
{
}

void sub_1835C34E0(_Unwind_Exception *a1)
{
}

void sub_1835C3CD4(_Unwind_Exception *a1)
{
}

uint64_t sub_1835C59BC()
{
  return v0;
}

uint64_t sub_1835C66D0()
{
  return 0LL;
}

uint64_t sub_1835C6714()
{
  return 0LL;
}

uint64_t sub_1835C6790()
{
  return 0LL;
}

uint64_t sub_1835C67D0()
{
  return 0LL;
}

uint64_t sub_1835C6810()
{
  return 0LL;
}

uint64_t sub_1835C6BEC()
{
  return 0LL;
}

__CFNotificationCenter *__standardDefaultCenter_block_invoke()
{
  uint64_t v0 = objc_alloc(&OBJC_CLASS___NSNotificationCenter);
  TaskCenter = (const void *)_CFXNotificationGetTaskCenter();
  uint64_t result = (__CFNotificationCenter *)CFRetain(TaskCenter);
  v0->_impl = result;
  atomic_store((unint64_t)v0, &qword_18C496500);
  return result;
}

uint64_t sub_1835C80B4()
{
  return 0LL;
}

uint64_t _block_invoke(uint64_t a1, void *a2, void *a3)
{
  if (a2 == a3) {
    return 1LL;
  }
  else {
    return objc_msgSend(a2, "isEqual:");
  }
}

NSPointerArray *_myersDescent(void *a1, void *a2, uint64_t a3)
{
  uint64_t v58 = *MEMORY[0x1895F89C0];
  unint64_t v7 = [a2 count];
  uint64_t v8 = [a1 count];
  if (v7 >> 60)
  {
LABEL_66:
    CFStringRef v45 = CFStringCreateWithFormat( 0LL,  0LL,  @"*** attempt to create a temporary id buffer which is too large or with a negative count (%lu) -- possibly data is corrupt",  v7);
    id v46 = (void *)[MEMORY[0x189603F70] exceptionWithName:*MEMORY[0x189603A48] reason:v45 userInfo:0];
    CFRelease(v45);
    objc_exception_throw(v46);
    goto LABEL_67;
  }

  unint64_t v3 = v8;
  if (v7 <= 1) {
    uint64_t v9 = 1LL;
  }
  else {
    uint64_t v9 = v7;
  }
  *(void *)&double v10 = MEMORY[0x1895F8858](v9).n128_u64[0];
  __int128 v12 = (char *)&v49 - v11;
  if (v7 >= 0x101)
  {
    __int128 v12 = (char *)_CFCreateArrayStorage();
    uint64_t v13 = v12;
  }

  else
  {
    uint64_t v13 = 0LL;
  }

  objc_msgSend(a2, "getObjects:range:", v12, 0, v7, v10);
  if (v3 >> 60)
  {
LABEL_67:
    CFStringRef v47 = CFStringCreateWithFormat( 0LL,  0LL,  @"*** attempt to create a temporary id buffer which is too large or with a negative count (%lu) -- possibly data is corrupt",  v3);
    Class v48 = (void *)[MEMORY[0x189603F70] exceptionWithName:*MEMORY[0x189603A48] reason:v47 userInfo:0];
    CFRelease(v47);
    objc_exception_throw(v48);
    __break(1u);
  }

  if (v3 <= 1) {
    uint64_t v14 = 1LL;
  }
  else {
    uint64_t v14 = v3;
  }
  *(void *)&double v15 = MEMORY[0x1895F8858](v14).n128_u64[0];
  uint64_t v17 = (char *)&v49 - v16;
  if (v3 >= 0x101) {
    id v18 = (char *)_CFCreateArrayStorage();
  }
  else {
    id v18 = 0LL;
  }
  if (v3 >= 0x101) {
    unint64_t v19 = v18;
  }
  else {
    unint64_t v19 = v17;
  }
  __int128 v20 = v19;
  objc_msgSend(a1, "getObjects:range:", v15);
  __int128 v21 = -[NSPointerArray initWithOptions:](objc_alloc(&OBJC_CLASS___NSPointerArray), "initWithOptions:", 2LL);
  uint64_t v49 = v13;
  __int128 v57 = malloc(8uLL);
  *__int128 v57 = 0LL;
  unint64_t v52 = v3 + v7;
  if (((v3 + v7) & 0x8000000000000000LL) == 0)
  {
    uint64_t v22 = 0LL;
    __int128 v23 = v20;
    uint64_t v50 = v21;
    unsigned int v51 = v18;
    while (1)
    {
      if (!v57) {
        __assert_rtn("_myersDescent", "NSArray+NSArrayDiffing.m", 48, "prev_v");
      }
      -[NSPointerArray addPointer:](v21, "addPointer:");
      uint64_t v24 = malloc(8 * v22 + 8);
      if (!v24) {
        break;
      }
      uint64_t v25 = -v22;
      uint64_t v55 = v22;
      uint64_t v56 = -v22 ^ (-v22 >> 63);
      uint64_t v53 = v23;
      uint64_t v54 = -v22;
      uint64_t v26 = v22;
      uint64_t v27 = -v22;
      do
      {
        if (v27 == v25)
        {
          unint64_t v28 = v57[v56];
        }

        else
        {
          uint64_t v29 = 1 - v27;
          if (v27 >= 2) {
            uint64_t v29 = v27 - 2;
          }
          unint64_t v30 = v57[v29];
          if (v27 == v22 || (unint64_t v28 = v57[v27 ^ (v27 >> 63)], v30 >= v28)) {
            unint64_t v28 = v30 + 1;
          }
        }

        unint64_t v31 = v28 - v27;
        BOOL v32 = v28 - v27 < v3;
        BOOL v33 = v28 < v7;
        if (v28 >= v7 || v31 >= v3)
        {
LABEL_39:
          uint64_t v36 = v27 - 1;
          if (v27 < 1) {
            uint64_t v36 = -v27;
          }
          v24[v36] = v28;
          if (!v33 && !v32)
          {
            free(v24);
            __int128 v57 = 0LL;
            goto LABEL_49;
          }
        }

        else
        {
          int v35 = v24;
          while (((*(uint64_t (**)(uint64_t, void, void))(a3 + 16))( a3,  *(void *)&v12[8 * v28],  *(void *)&v23[8 * v28]) & 1) != 0)
          {
            BOOL v32 = ++v28 + v26 < v3;
            BOOL v33 = v28 < v7;
            if (v28 >= v7 || v28 + v26 >= v3)
            {
              unint64_t v31 = v26 + v28;
              uint64_t v24 = v35;
              uint64_t v25 = v54;
              uint64_t v22 = v55;
              goto LABEL_39;
            }
          }

          uint64_t v37 = v27 - 1;
          if (v27 < 1) {
            uint64_t v37 = -v27;
          }
          uint64_t v24 = v35;
          v35[v37] = v28;
          unint64_t v31 = v26 + v28;
          uint64_t v25 = v54;
          uint64_t v22 = v55;
        }

        v27 += 2LL;
        v26 -= 2LL;
        v23 -= 16;
      }

      while (v27 <= v22);
      __int128 v57 = v24;
LABEL_49:
      BOOL v38 = v31 >= v3 && v28 >= v7;
      __int128 v21 = v50;
      id v18 = v51;
      if (!v38)
      {
        __int128 v23 = v53 + 8;
        if (v22++ != v52) {
          continue;
        }
      }

      goto LABEL_57;
    }

    qword_18C5D6210 = (uint64_t)"Out of memory";
    __break(1u);
    goto LABEL_66;
  }

  unint64_t v28 = 0LL;
  unint64_t v31 = 0LL;
LABEL_57:
  uint64_t v40 = "x >= n && y >= m";
  int v41 = 91;
  if (v28 < v7 || (int v42 = v49, v31 < v3)) {
LABEL_64:
  }
    __assert_rtn("_myersDescent", "NSArray+NSArrayDiffing.m", v41, v40);
  __int16 v43 = v57;
  if (v57
    && v43 != -[NSPointerArray pointerAtIndex:]( v21,  "pointerAtIndex:",  -[NSPointerArray count](v21, "count", 91LL, "x >= n && y >= m") - 1))
  {
    uint64_t v40 = "v == NULL || v == [result pointerAtIndex:result.count - 1]";
    int v41 = 92;
    goto LABEL_64;
  }

  free(v18);
  free(v42);
  return v21;
}

void sub_1835C9364(_Unwind_Exception *a1)
{
}

uint64_t ___generateElements_block_invoke(uint64_t a1, uint64_t a2, void *a3)
{
  return objc_msgSend(a3, "isEqual:", objc_msgSend(MEMORY[0x189603FE8], "null")) ^ 1;
}

uint64_t ___generateElements_block_invoke_2(uint64_t a1, uint64_t a2, void *a3)
{
  return objc_msgSend(a3, "isEqual:", objc_msgSend(MEMORY[0x189603FE8], "null"));
}

uint64_t removeNotificationsFromQueue(void *a1, void *a2, int a3, uint64_t a4)
{
  uint64_t v4 = 0LL;
  if (!a1) {
    return v4;
  }
  char v5 = a4;
  if (!a4) {
    return v4;
  }
  if (![a1 count]) {
    return 0LL;
  }
  if ((v5 & 1) != 0)
  {
    uint64_t v9 = (void *)[a2 name];
    if ((v5 & 2) == 0) {
      goto LABEL_6;
    }
  }

  else
  {
    uint64_t v9 = 0LL;
    if ((v5 & 2) == 0)
    {
LABEL_6:
      uint64_t v10 = 0LL;
      goto LABEL_9;
    }
  }

  uint64_t v10 = [a2 object];
LABEL_9:
  uint64_t v11 = [a1 count];
  if (v11 < 1) {
    return 0LL;
  }
  uint64_t v12 = v11;
  uint64_t v4 = 0LL;
  uint64_t v13 = 0LL;
  int v14 = 0;
  int v15 = a3 ^ 1;
  do
  {
    uint64_t v16 = (void *)[a1 objectAtIndex:v13];
    uint64_t v17 = v16;
    if (((v5 & 2) == 0 || v10 == [v16 object])
      && ((v5 & 1) == 0 || objc_msgSend(v9, "isEqual:", objc_msgSend(v17, "name"))))
    {
      if (((v15 | v14) & 1) != 0)
      {
        [a1 removeObjectAtIndex:v13 + 1];
        [a1 removeObjectAtIndex:v13];
        v13 -= 2LL;
        v12 -= 2LL;
      }

      else
      {
        int v14 = 1;
      }

      ++v4;
    }

    v13 += 2LL;
  }

  while (v13 < v12);
  return v4;
}

void addNotificationToQueue(void *a1, uint64_t a2, void *a3, int a4)
{
  uint64_t v17 = *MEMORY[0x1895F89C0];
  if (a4)
  {
    NSMapTableValueCallBacks v6 = (void *)a1[2];
    if (!v6) {
      return;
    }
    v16.version = 0LL;
    v16.info = a1;
    v16.retain = (const void *(__cdecl *)(const void *))MEMORY[0x1896030F0];
    v16.release = (void (__cdecl *)(const void *))MEMORY[0x1896030E0];
    v16.copyDescription = (CFStringRef (__cdecl *)(const void *))MEMORY[0x189602A10];
    unint64_t v7 = (void (__cdecl *)(CFRunLoopObserverRef, CFRunLoopActivity, void *))__NSPostASAPQueueNotes;
    CFOptionFlags v8 = 130LL;
  }

  else
  {
    NSMapTableValueCallBacks v6 = (void *)a1[3];
    if (!v6) {
      return;
    }
    v16.version = 0LL;
    v16.info = a1;
    v16.retain = (const void *(__cdecl *)(const void *))MEMORY[0x1896030F0];
    v16.release = (void (__cdecl *)(const void *))MEMORY[0x1896030E0];
    v16.copyDescription = (CFStringRef (__cdecl *)(const void *))MEMORY[0x189602A10];
    unint64_t v7 = (void (__cdecl *)(CFRunLoopObserverRef, CFRunLoopActivity, void *))__NSPostIdleQueueNotes;
    CFOptionFlags v8 = 32LL;
  }

  uint64_t v9 = CFRunLoopObserverCreate(0LL, v8, 0, 0LL, v7, &v16);
  objc_msgSend(v6, "addObject:", a2, v16.version, v16.info, v16.retain, v16.release, v16.copyDescription, v17);
  if (a3 && [a3 count]) {
    id v10 = (id)[a3 copy];
  }
  else {
    id v10 = (id)[MEMORY[0x189603F18] arrayWithObject:*MEMORY[0x189603A40]];
  }
  uint64_t v11 = v10;
  [v6 addObject:v10];
  uint64_t v12 = [v11 count];
  if (v12 >= 1)
  {
    uint64_t v13 = v12;
    for (uint64_t i = 0LL; i != v13; ++i)
    {
      Current = CFRunLoopGetCurrent();
      CFRunLoopAddObserver(Current, v9, (CFRunLoopMode)[v11 objectAtIndex:i]);
    }
  }

  CFRelease(v9);
}

void __NSPostASAPQueueNotes(uint64_t a1, uint64_t a2, char *a3)
{
}

uint64_t __NSPostIdleQueueNotes(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return postQueueNotifications(a3, 0LL);
}

void postQueueNotifications(char *a1, int a2)
{
  uint64_t v43 = *MEMORY[0x1895F89C0];
  int v35 = (void *)*((void *)a1 + 1);
  uint64_t v3 = 24LL;
  if (a2) {
    uint64_t v3 = 16LL;
  }
  uint64_t v4 = *(void **)&a1[v3];
  if (a2) {
    char v5 = (id *)(a1 + 16);
  }
  else {
    char v5 = (id *)(a1 + 24);
  }
  if (![*v5 count]) {
    return;
  }
  *char v5 = objc_alloc_init(MEMORY[0x189603FA8]);
  if (!v4) {
    return;
  }
  BOOL v33 = a1;
  Current = CFRunLoopGetCurrent();
  CFRunLoopMode v7 = CFRunLoopCopyCurrentMode(Current);
  _CFAutoreleasePoolPush();
  uint64_t v8 = [v4 count];
  if (v8 < 1)
  {
LABEL_31:
    id v18 = v33;
    if ((a2 & 1) == 0) {
      postQueueNotifications(v33, 1LL);
    }
    goto LABEL_33;
  }

  uint64_t v9 = v8;
  char v10 = 0;
  uint64_t v11 = 0LL;
  uint64_t v34 = *MEMORY[0x1896051A8];
LABEL_10:
  char v32 = v10;
  do
  {
    uint64_t v37 = [v4 objectAtIndex:v11];
    uint64_t v12 = v4;
    uint64_t v13 = (void *)[v4 objectAtIndex:v11 + 1];
    if (([v13 containsObject:v7] & 1) == 0
      && (![v13 containsObject:v34] || !_CFRunLoop01()))
    {
      __int128 v41 = 0u;
      __int128 v42 = 0u;
      __int128 v39 = 0u;
      __int128 v40 = 0u;
      uint64_t v14 = [v13 countByEnumeratingWithState:&v39 objects:&context count:16];
      if (!v14)
      {
LABEL_26:
        uint64_t v4 = v12;
        goto LABEL_16;
      }

      uint64_t v15 = v14;
      uint64_t v16 = *(void *)v40;
LABEL_20:
      uint64_t v17 = 0LL;
      while (1)
      {
        if (*(void *)v40 != v16) {
          objc_enumerationMutation(v13);
        }
        if (v15 == ++v17)
        {
          uint64_t v15 = [v13 countByEnumeratingWithState:&v39 objects:&context count:16];
          if (v15) {
            goto LABEL_20;
          }
          goto LABEL_26;
        }
      }
    }

    [v35 postNotification:v37];
    uint64_t v4 = v12;
    [v12 removeObjectAtIndex:v11 + 1];
    [v12 removeObjectAtIndex:v11];
    v9 -= 2LL;
    if (!a2)
    {
      char v10 = 1;
      postQueueNotifications(v33, 1LL);
      if (v11 < v9) {
        goto LABEL_10;
      }
      goto LABEL_30;
    }

    v11 -= 2LL;
LABEL_16:
    v11 += 2LL;
  }

  while (v11 < v9);
  if ((v32 & 1) == 0) {
    goto LABEL_31;
  }
LABEL_30:
  CFRunLoopWakeUp(Current);
  id v18 = v33;
LABEL_33:
  _CFAutoreleasePoolPop();
  CFRelease(v7);
  if ([v4 count])
  {
    context.version = 0LL;
    context.info = v18;
    context.retain = (const void *(__cdecl *)(const void *))MEMORY[0x1896030F0];
    context.release = (void (__cdecl *)(const void *))MEMORY[0x1896030E0];
    context.copyDescription = (CFStringRef (__cdecl *)(const void *))MEMORY[0x189602A10];
    if (a2) {
      uint64_t v19 = 16LL;
    }
    else {
      uint64_t v19 = 24LL;
    }
    if (a2) {
      CFOptionFlags v20 = 130LL;
    }
    else {
      CFOptionFlags v20 = 32LL;
    }
    if (a2) {
      __int128 v21 = (void (__cdecl *)(CFRunLoopObserverRef, CFRunLoopActivity, void *))__NSPostASAPQueueNotes;
    }
    else {
      __int128 v21 = (void (__cdecl *)(CFRunLoopObserverRef, CFRunLoopActivity, void *))__NSPostIdleQueueNotes;
    }
    uint64_t v22 = CFRunLoopObserverCreate(0LL, v20, 0, 0LL, v21, &context);
    uint64_t v23 = [v4 count];
    if (v23 >= 1)
    {
      uint64_t v24 = v23;
      for (uint64_t i = 0LL; i < v24; i += 2LL)
      {
        uint64_t v26 = (void *)[v4 objectAtIndex:i | 1];
        uint64_t v27 = [v26 count];
        if (v27 >= 1)
        {
          uint64_t v28 = v27;
          for (uint64_t j = 0LL; j != v28; ++j)
            CFRunLoopAddObserver(Current, v22, (CFRunLoopMode)[v26 objectAtIndex:j]);
        }
      }
    }

    CFRelease(v22);
    if (*(void *)&v33[v19])
    {
      uint64_t v30 = [v4 count];
      if (v30)
      {
        uint64_t v31 = v30 - 1;
        do
          objc_msgSend(*(id *)&v33[v19], "insertObject:atIndex:", objc_msgSend(v4, "objectAtIndex:", v31--), 0);
        while (v31 != -1);
      }

      goto LABEL_53;
    }

    *(void *)&v33[v19] = v4;
  }

  else
  {
LABEL_53:
  }

uint64_t getObjectValue_0(uint64_t a1, void *a2, __CFString *a3, CFIndex *a4, int a5, void *a6)
{
  uint64_t v73 = *MEMORY[0x1895F89C0];
  unint64_t v12 = 0x18C488000uLL;
  [*(id *)(a1 + 40) lock];
  if (-[__CFString isEqualToString:](a3, "isEqualToString:", [(id)a1 nilSymbol]))
  {
    if (a2) {
      *a2 = 0LL;
    }
    goto LABEL_69;
  }

  if (-[__CFString isEqualToString:]( a3,  "isEqualToString:",  [(id)a1 negativeInfinitySymbol]))
  {
    if (a2)
    {
      if ([(id)a1 generatesDecimalNumbers])
      {
        uint64_t v13 = +[NSDecimalNumber minimumDecimalNumber](&OBJC_CLASS___NSDecimalNumber, "minimumDecimalNumber");
LABEL_68:
        *a2 = v13;
        goto LABEL_69;
      }

      CFOptionFlags v20 = (NSDecimalNumber **)MEMORY[0x189605158];
      goto LABEL_67;
    }

    goto LABEL_69;
  }

  if (!-[__CFString isEqualToString:]( a3,  "isEqualToString:",  [(id)a1 positiveInfinitySymbol]))
  {
    uint64_t v14 = (void *)[(id)a1 decimalSeparator];
    uint64_t v15 = (void *)[(id)a1 groupingSeparator];
    if ([v15 length] && objc_msgSend(v15, "characterAtIndex:", 0) == 160
      || [v14 length] && objc_msgSend(v14, "characterAtIndex:", 0) == 160)
    {
      uint64_t v16 = +[NSCharacterSet characterSetWithCharactersInString:]( &OBJC_CLASS___NSCharacterSet,  "characterSetWithCharactersInString:",  @"0123456789");
      uint64_t v17 = -[__CFString rangeOfCharacterFromSet:options:](a3, "rangeOfCharacterFromSet:options:", v16, 2LL);
      uint64_t v18 = -[__CFString rangeOfCharacterFromSet:options:](a3, "rangeOfCharacterFromSet:options:", v16, 6LL);
      if (v17 != 0x7FFFFFFFFFFFFFFFLL && v18 != 0x7FFFFFFFFFFFFFFFLL)
      {
        chars[0] = 160;
        a3 = (__CFString *)-[__CFString stringByReplacingOccurrencesOfString:withString:options:range:]( a3,  "stringByReplacingOccurrencesOfString:withString:options:range:",  @" ",  +[NSString stringWithCharacters:length:]( &OBJC_CLASS___NSString,  "stringWithCharacters:length:",  chars,  1LL),  2LL,  v17,  v18 - v17 + 1);
      }
    }

    if (_CFLocaleGetNoteCount() != *(void *)(a1 + 24)) {
      [(id)a1 _clearFormatter];
    }
    if (a5) {
      BOOL v19 = _CFExecutableLinkedOnOrAfter() != 0;
    }
    else {
      BOOL v19 = 0;
    }
    uint64_t v21 = -[__CFString length](a3, "length");
    CFIndex v64 = v21;
    if (a4)
    {
      CFIndex v22 = *a4;
      CFIndex v23 = a4[1];
    }

    else
    {
      CFIndex v22 = 0LL;
      CFIndex v23 = v21;
    }

    rangep.location = v22;
    rangep.length = v23;
    uint64_t v24 = *(__CFNumberFormatter **)(a1 + 16);
    uint64_t v25 = (CFAllocatorRef *)MEMORY[0x189604DD0];
    if (v24 || ([(id)a1 _regenerateFormatter], (uint64_t v24 = *(__CFNumberFormatter **)(a1 + 16)) != 0)) {
      uint64_t v24 = CFNumberFormatterCreateNumberFromString( *v25,  v24,  a3,  &rangep,  [(id)a1 allowsFloats] ^ 1);
    }
    char v67 = a6;
    uint64_t v26 = v24;
    uint64_t v27 = -[__CFString substringFromIndex:](a3, "substringFromIndex:", rangep.length + rangep.location);
    if (v24) {
      BOOL v28 = v19;
    }
    else {
      BOOL v28 = 0;
    }
    BOOL v65 = v19;
    if (v28)
    {
      uint64_t v29 = v27;
      uint64_t v30 = +[NSCharacterSet whitespaceCharacterSet](&OBJC_CLASS___NSCharacterSet, "whitespaceCharacterSet");
      uint64_t v31 = +[NSCharacterSet characterSetWithCharactersInString:]( &OBJC_CLASS___NSCharacterSet,  "characterSetWithCharactersInString:",  v29);
      char v32 = v30;
      unint64_t v12 = 0x18C488000uLL;
      if (-[NSCharacterSet isSupersetOfSet:](v32, "isSupersetOfSet:", v31)) {
        goto LABEL_38;
      }
    }

    else if (v24)
    {
      goto LABEL_38;
    }

    __int128 v39 = *(__CFNumberFormatter **)(a1 + 16);
    if (!v39) {
      goto LABEL_89;
    }
    CFStringRef Format = CFNumberFormatterGetFormat(v39);
    if (!Format) {
      goto LABEL_89;
    }
    __int128 v41 = Format;
    allocator = (const __CFAllocator *)*MEMORY[0x189604DD0];
    theString = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x189604DD0], 0LL);
    CFIndex Length = CFStringGetLength(v41);
    if (Length >= 1)
    {
      CFIndex v43 = Length;
      BOOL v44 = 0;
      CFIndex v45 = 0LL;
      while (1)
      {
        CharacterAtIndedouble x = CFStringGetCharacterAtIndex(v41, v45);
        chars[0] = CharacterAtIndex;
        if (((1 << (CharacterAtIndex - 35)) & 0x207FED05) != 0) {
          goto LABEL_52;
        }
        if (CharacterAtIndex != 39) {
          break;
        }
        BOOL v44 = !v44;
LABEL_55:
        if (v43 == ++v45) {
          goto LABEL_71;
        }
      }

      if (CharacterAtIndex != 164 && CharacterAtIndex != 8240) {
        goto LABEL_55;
      }
LABEL_52:
      if (v44)
      {
        BOOL v44 = 1;
      }

      else
      {
        CFStringAppendCharacters(theString, chars, 1LL);
        BOOL v44 = 0;
      }

      goto LABEL_55;
    }

NSString *NSCopyStringFromSelector(const char *a1)
{
  if (a1 && (SEL Name = sel_getName(a1)) != 0LL) {
    return -[NSString initWithBytesNoCopy:length:encoding:freeWhenDone:]( objc_alloc(&OBJC_CLASS___NSString),  "initWithBytesNoCopy:length:encoding:freeWhenDone:",  Name,  strlen(Name),  4LL,  0LL);
  }
  else {
    return 0LL;
  }
}

SEL NSResolvedSelectorForName(objc_class *a1, char *str)
{
  if (!a1 || !object_isClass(a1) || class_isMetaClass(a1) || sel_lookUpByName()) {
    return sel_registerName(str);
  }
  if ((objc_opt_respondsToSelector() & 1) != 0)
  {
    if ((-[objc_class _classShouldAlwaysRegisterSelectorNamed:](a1, "_classShouldAlwaysRegisterSelectorNamed:", str) & 1) != 0) {
      return sel_registerName(str);
    }
  }

  else
  {
    if ((-[objc_class isProxy](a1, "isProxy") & 1) != 0) {
      return sel_registerName(str);
    }
    if (_MergedGlobals_108 != -1) {
      dispatch_once(&_MergedGlobals_108, &__block_literal_global_29);
    }
    if (class_getMethodImplementation(a1, sel_forwardInvocation_) != (IMP)qword_18C4967F0) {
      return sel_registerName(str);
    }
    if (class_getMethodImplementation(a1, sel_forwardingTargetForSelector_) != (IMP)qword_18C4967F8) {
      return sel_registerName(str);
    }
    ClassMethod = class_getClassMethod(a1, sel_resolveInstanceMethod_);
    if (method_getImplementation(ClassMethod) != (IMP)qword_18C4967E8) {
      return sel_registerName(str);
    }
  }

  return 0LL;
}

IMP __NSResolvedSelectorForName_block_invoke()
{
  uint64_t v0 = (objc_class *)objc_opt_class();
  ClassMethod = class_getClassMethod(v0, sel_resolveInstanceMethod_);
  qword_18C4967E8 = (uint64_t)method_getImplementation(ClassMethod);
  uint64_t v2 = (objc_class *)objc_opt_class();
  qword_18C4967F8 = (uint64_t)class_getMethodImplementation(v2, sel_forwardingTargetForSelector_);
  uint64_t v3 = (objc_class *)objc_opt_class();
  IMP result = class_getMethodImplementation(v3, sel_forwardInvocation_);
  qword_18C4967F0 = (uint64_t)result;
  return result;
}

NSString *NSCopyStringFromClass(objc_class *a1)
{
  if (a1 && (SEL Name = class_getName(a1)) != 0LL) {
    return -[NSString initWithBytesNoCopy:length:encoding:freeWhenDone:]( objc_alloc(&OBJC_CLASS___NSString),  "initWithBytesNoCopy:length:encoding:freeWhenDone:",  Name,  strlen(Name),  4LL,  0LL);
  }
  else {
    return 0LL;
  }
}

NSString *__cdecl NSStringFromProtocol(Protocol *proto)
{
  IMP result = (NSString *)protocol_getName(proto);
  if (result) {
    return +[NSString stringWithUTF8String:](&OBJC_CLASS___NSString, "stringWithUTF8String:", result);
  }
  return result;
}

Protocol *__cdecl NSProtocolFromString(Protocol *namestr)
{
  uint64_t v6 = *MEMORY[0x1895F89C0];
  if (namestr)
  {
    unint64_t v1 = namestr;
    uint64_t v2 = -[Protocol length](namestr, "length");
    if (-[Protocol getCString:maxLength:encoding:](v1, "getCString:maxLength:encoding:", v5, 1000LL, 4LL)
      && strlen(v5) == v2)
    {
      uint64_t v3 = v5;
      return objc_getProtocol(v3);
    }

    if (!v2)
    {
LABEL_9:
      uint64_t v3 = (const char *)-[Protocol UTF8String](v1, "UTF8String");
      return objc_getProtocol(v3);
    }

    uint64_t v4 = 0LL;
    while (-[Protocol characterAtIndex:](v1, "characterAtIndex:", v4))
    {
      if (v2 == ++v4) {
        goto LABEL_9;
      }
    }

    return 0LL;
  }

  return namestr;
}

BOOL _NSRequiresMorphunInflectionForLanguageIdentifier(void *a1)
{
  return _NSLanguageIdentifierBeginsWithLanguageCode(a1, @"en")
      || _NSLanguageIdentifierBeginsWithLanguageCode(a1, @"es")
      || _NSLanguageIdentifierBeginsWithLanguageCode(a1, @"it")
      || _NSLanguageIdentifierBeginsWithLanguageCode(a1, @"fr")
      || _NSLanguageIdentifierBeginsWithLanguageCode(a1, @"pt")
      || _NSLanguageIdentifierBeginsWithLanguageCode(a1, @"de")
      || _NSLanguageIdentifierBeginsWithLanguageCode(a1, @"ko")
      || _NSLanguageIdentifierBeginsWithLanguageCode(a1, @"hi");
}

BOOL _NSLanguageIdentifierBeginsWithLanguageCode(void *a1, void *a2)
{
  unint64_t v4 = [a1 length];
  if (v4 < [a2 length]
    || objc_msgSend(a1, "compare:options:range:", a2, 1, 0, objc_msgSend(a2, "length")))
  {
    return 0LL;
  }

  uint64_t v6 = [a1 length];
  return v6 == [a2 length]
      || objc_msgSend(a1, "characterAtIndex:", objc_msgSend(a2, "length")) == 45
      || objc_msgSend(a1, "characterAtIndex:", objc_msgSend(a2, "length")) == 95;
}

uint64_t _NSLexiconInflectedStringUsingMorphun( void *a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, uint64_t a6, void *a7)
{
  uint64_t v66 = *MEMORY[0x1895F89C0];
  if (qword_18C496938 != -1) {
    dispatch_once(&qword_18C496938, &__block_literal_global_30);
  }
  if (!off_18C496808) {
    return 0LL;
  }
  uint64_t v13 = [MEMORY[0x189603F90] localeWithLocaleIdentifier:a4];
  if (!v13) {
    return 0LL;
  }
  uint64_t v14 = v13;
  if (![a7 count])
  {
    uint64_t v54 = a5;
    uint64_t v55 = v14;
    uint64_t v53 = a6;
LABEL_29:
    CFIndex v22 = 0LL;
    goto LABEL_30;
  }

  uint64_t v15 = -[NSCharacterSet invertedSet]( +[NSCharacterSet whitespaceAndNewlineCharacterSet]( &OBJC_CLASS___NSCharacterSet,  "whitespaceAndNewlineCharacterSet"),  "invertedSet");
  uint64_t v16 = [a1 rangeOfCharacterFromSet:v15];
  if (v16 == 0x7FFFFFFFFFFFFFFFLL) {
    return 0LL;
  }
  uint64_t v19 = v16;
  uint64_t v54 = a5;
  uint64_t v55 = v14;
  uint64_t v53 = a6;
  __int128 v64 = 0u;
  __int128 v65 = 0u;
  __int128 v62 = 0u;
  __int128 v63 = 0u;
  uint64_t v20 = [a7 countByEnumeratingWithState:&v62 objects:v61 count:16];
  if (!v20) {
    goto LABEL_29;
  }
  uint64_t v21 = v20;
  CFIndex v22 = 0LL;
  uint64_t v23 = v19 + a2;
  uint64_t v24 = *(void *)v63;
  do
  {
    for (uint64_t i = 0LL; i != v21; ++i)
    {
      if (*(void *)v63 != v24) {
        objc_enumerationMutation(a7);
      }
      uint64_t v26 = *(void **)(*((void *)&v62 + 1) + 8 * i);
      if ([v26 replacementKind] != 1)
      {
        [v26 argument];
      }

      if ([v26 replacementRangeInResult] == v23)
      {
        unint64_t v28 = v27;
        if (v27 >= [a1 length]) {
          return 0LL;
        }
        unint64_t v29 = objc_msgSend( a1,  "rangeOfCharacterFromSet:options:range:",  v15,  0,  v28 + v19,  objc_msgSend(a1, "length") - (v28 + v19));
        if (v29 <= v28 + v19 || v29 == 0x7FFFFFFFFFFFFFFFLL) {
          unint64_t v31 = v28 + v19;
        }
        else {
          unint64_t v31 = v29;
        }
        CFIndex v22 = (void *)objc_msgSend(a1, "substringWithRange:", 0, v31);
        a1 = (void *)[a1 substringFromIndex:v31];
      }
    }

    uint64_t v21 = [a7 countByEnumeratingWithState:&v62 objects:v61 count:16];
  }

  while (v21);
LABEL_30:
  CFTypeRef cf = 0LL;
  uint64_t v32 = off_18C496808(&cf);
  if (cf)
  {
    if (_NSInflectionLog_onceToken != -1) {
      dispatch_once(&_NSInflectionLog_onceToken, &__block_literal_global_13);
    }
    uint64_t v33 = (os_log_s *)_NSInflectionLog_log;
    if (os_log_type_enabled((os_log_t)_NSInflectionLog_log, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      uint64_t v58 = "mlccfp_getDefaultCommonConceptFactoryProvider(&error)";
      __int16 v59 = 2112;
      CFTypeRef v60 = cf;
      _os_log_error_impl( &dword_182EB1000,  v33,  OS_LOG_TYPE_ERROR,  "Inflection engine reported an error for '%s' while attempting to inflect: %@",  buf,  0x16u);
    }

    CFTypeRef v34 = cf;
  }

  else
  {
    CFTypeRef v34 = 0LL;
  }

  uint64_t v17 = 0LL;
  if (!v32 || v34) {
    goto LABEL_123;
  }
  CFTypeRef cf = 0LL;
  uint64_t v35 = off_18C496810(v32, v55, &cf);
  if (cf)
  {
    if (_NSInflectionLog_onceToken != -1) {
      dispatch_once(&_NSInflectionLog_onceToken, &__block_literal_global_13);
    }
    uint64_t v36 = (os_log_s *)_NSInflectionLog_log;
    if (os_log_type_enabled((os_log_t)_NSInflectionLog_log, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      uint64_t v58 = "mlccfp_getCommonConceptFactory(provider, (CFLocaleRef)locale, &error)";
      __int16 v59 = 2112;
      CFTypeRef v60 = cf;
      _os_log_error_impl( &dword_182EB1000,  v36,  OS_LOG_TYPE_ERROR,  "Inflection engine reported an error for '%s' while attempting to inflect: %@",  buf,  0x16u);
    }

    CFTypeRef v34 = cf;
  }

  else
  {
    CFTypeRef v34 = 0LL;
  }

  uint64_t v17 = 0LL;
  if (!v35 || v34) {
    goto LABEL_123;
  }
  CFTypeRef cf = 0LL;
  uint64_t v37 = off_18C496818(v35, &cf);
  if (cf)
  {
    if (_NSInflectionLog_onceToken != -1) {
      dispatch_once(&_NSInflectionLog_onceToken, &__block_literal_global_13);
    }
    BOOL v38 = (os_log_s *)_NSInflectionLog_log;
    if (os_log_type_enabled((os_log_t)_NSInflectionLog_log, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      uint64_t v58 = "mccf_getSemanticFeatureModel(factory, &error)";
      __int16 v59 = 2112;
      CFTypeRef v60 = cf;
      _os_log_error_impl( &dword_182EB1000,  v38,  OS_LOG_TYPE_ERROR,  "Inflection engine reported an error for '%s' while attempting to inflect: %@",  buf,  0x16u);
    }

    CFTypeRef v34 = cf;
  }

  else
  {
    CFTypeRef v34 = 0LL;
  }

  uint64_t v17 = 0LL;
  if (!v37 || v34) {
    goto LABEL_123;
  }
  CFTypeRef cf = 0LL;
  uint64_t v39 = off_18C496820(a1, &cf);
  if (cf)
  {
    if (_NSInflectionLog_onceToken != -1) {
      dispatch_once(&_NSInflectionLog_onceToken, &__block_literal_global_13);
    }
    __int128 v40 = (os_log_s *)_NSInflectionLog_log;
    if (os_log_type_enabled((os_log_t)_NSInflectionLog_log, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      uint64_t v58 = "mss_create((CFStringRef)stringToInflect, &error)";
      __int16 v59 = 2112;
      CFTypeRef v60 = cf;
      _os_log_error_impl( &dword_182EB1000,  v40,  OS_LOG_TYPE_ERROR,  "Inflection engine reported an error for '%s' while attempting to inflect: %@",  buf,  0x16u);
    }

    CFTypeRef v34 = cf;
  }

  else
  {
    CFTypeRef v34 = 0LL;
  }

  if (v39 && !v34)
  {
    CFTypeRef cf = 0LL;
    uint64_t v41 = off_18C496828(v37, v39, &cf);
    if (cf)
    {
      if (_NSInflectionLog_onceToken != -1) {
        dispatch_once(&_NSInflectionLog_onceToken, &__block_literal_global_13);
      }
      __int128 v42 = (os_log_s *)_NSInflectionLog_log;
      if (os_log_type_enabled((os_log_t)_NSInflectionLog_log, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315394;
        uint64_t v58 = "minf_create(model, speakableSource, &error)";
        __int16 v59 = 2112;
        CFTypeRef v60 = cf;
        _os_log_error_impl( &dword_182EB1000,  v42,  OS_LOG_TYPE_ERROR,  "Inflection engine reported an error for '%s' while attempting to inflect: %@",  buf,  0x16u);
      }

      CFTypeRef v34 = cf;
    }

    else
    {
      CFTypeRef v34 = 0LL;
    }

    if (!v41 || v34)
    {
      uint64_t v43 = 0LL;
      if (!v41) {
        goto LABEL_122;
      }
      goto LABEL_121;
    }

    if ([v54 addConstraintsTo:v41])
    {
      CFTypeRef cf = 0LL;
      char v44 = off_18C496830(v41, &cf);
      if (cf)
      {
        if (_NSInflectionLog_onceToken != -1) {
          dispatch_once(&_NSInflectionLog_onceToken, &__block_literal_global_13);
        }
        CFIndex v45 = (os_log_s *)_NSInflectionLog_log;
        if (os_log_type_enabled((os_log_t)_NSInflectionLog_log, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136315394;
          uint64_t v58 = "minf_isExists(inflectable, &error)";
          __int16 v59 = 2112;
          CFTypeRef v60 = cf;
          _os_log_error_impl( &dword_182EB1000,  v45,  OS_LOG_TYPE_ERROR,  "Inflection engine reported an error for '%s' while attempting to inflect: %@",  buf,  0x16u);
        }

        CFTypeRef v34 = cf;
      }

      else
      {
        CFTypeRef v34 = 0LL;
      }

      if (v34) {
        char v47 = 0;
      }
      else {
        char v47 = v44;
      }
      if ((v47 & 1) == 0)
      {
        uint64_t v43 = 0LL;
        goto LABEL_121;
      }

      uint64_t v46 = v53;
      if (!v53)
      {
        CFTypeRef cf = 0LL;
        uint64_t v48 = off_18C496840(v41, &cf);
        if (cf)
        {
          if (_NSInflectionLog_onceToken != -1) {
            dispatch_once(&_NSInflectionLog_onceToken, &__block_literal_global_13);
          }
          uint64_t v49 = (os_log_s *)_NSInflectionLog_log;
          if (!os_log_type_enabled((os_log_t)_NSInflectionLog_log, OS_LOG_TYPE_ERROR)) {
            goto LABEL_98;
          }
          *(_DWORD *)buf = 136315394;
          uint64_t v58 = "minf_toSpeakableString(inflectable, &error)";
          __int16 v59 = 2112;
          CFTypeRef v60 = cf;
          goto LABEL_126;
        }

void sub_1835D4308( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
}

void __Block_byref_object_copy__10(uint64_t a1, uint64_t a2)
{
}

void __Block_byref_object_dispose__10(uint64_t a1)
{
}

uint64_t _DisplayValueRelease(uint64_t a1, uint64_t a2)
{
  return off_18C4968D0(a2);
}

void _NSObjectRaiseNullSelectorException(objc_class *a1, const char *a2)
{
  uint64_t v2 = (void *)[MEMORY[0x189603F70] exceptionWithName:*MEMORY[0x189603A60], +[NSString stringWithFormat:]( NSString, "stringWithFormat:", @"%@: null selector", _NSMethodExceptionProem(a1, a2)), 0 reason userInfo];
  objc_exception_throw(v2);
  +[NSObject load](v3, v4);
}

void NSDeallocateObject(id object)
{
  name[1] = *(char **)MEMORY[0x1895F89C0];
  if (object)
  {
    if (NSZombieEnabled)
    {
      Class Class = object_getClass(object);
      name[0] = 0LL;
      id v3 = class_getName(Class);
      asprintf(name, "_NSZombie_%s", v3);
      SEL v4 = objc_lookUpClass(name[0]);
      if (!v4)
      {
        char v5 = objc_lookUpClass("_NSZombie_");
        SEL v4 = objc_duplicateClass(v5, name[0], 0LL);
      }

      free(name[0]);
      if (NSDeallocateZombies)
      {
        object_setClass(object, v4);
        object_dispose(object);
      }

      else
      {
        objc_destructInstance(object);
        object_setClass(object, v4);
      }
    }

    else
    {
      object_dispose(object);
    }
  }

id NSCopyObject(id object, NSUInteger extraBytes, NSZone *zone)
{
  if (!object) {
    return 0LL;
  }
  id v3 = object_copy(object, extraBytes);
  SEL v4 = (objc_class *)objc_opt_class();
  object_setClass(v3, v4);
  if (*MEMORY[0x1896049A0])
  {
    object_getClassName(v3);
    __CFSetLastAllocationEventName();
  }

  return v3;
}

void NSIncrementExtraRefCount(id object)
{
  if (object)
  {
    _objc_rootRetain();
    if (*MEMORY[0x1896049A0]) {
      __CFRecordAllocationEvent();
    }
  }

BOOL NSDecrementExtraRefCountWasZero(id object)
{
  if (object)
  {
    if (*MEMORY[0x1896049A0]) {
      __CFRecordAllocationEvent();
    }
    LOBYTE(object) = _objc_rootReleaseWasZero();
  }

  return (char)object;
}

NSUInteger NSExtraRefCount(NSUInteger object)
{
  if (object)
  {
    uint64_t v1 = _objc_rootRetainCount();
    if (v1) {
      return v1 - 1;
    }
    else {
      return 0LL;
    }
  }

  return object;
}

void iop_unlock(os_unfair_lock_s *a1)
{
}

void __NSOQSchedule(uint64_t a1)
{
  uint64_t v32 = *MEMORY[0x1895F89C0];
  if (a1)
  {
    uint64_t v2 = (os_unfair_lock_s *)(a1 + 8);
    memset(__src, 0, sizeof(__src));
    os_unfair_lock_lock((os_unfair_lock_t)(a1 + 8));
    int v3 = *(_DWORD *)(a1 + 168);
    int v4 = *(_DWORD *)(a1 + 172);
    uint64_t v5 = (v3 - v4);
    if (v3 <= v4)
    {
      os_unfair_lock_unlock(v2);
    }

    else
    {
      uint64_t v6 = 0LL;
      unint64_t v7 = 0LL;
      uint64_t v26 = v2;
      unint64_t v27 = 32LL;
      __ptr = __src;
      do
      {
        unsigned __int8 v8 = atomic_load((unsigned __int8 *)(a1 + 500));
        if ((v8 & 1) != 0 || v7 >= 6) {
          break;
        }
        char v10 = *(os_unfair_lock_s **)&v9[6]._os_unfair_lock_opaque;
        uint64_t v30 = v9 + 6;
        if (v10)
        {
          uint64_t v11 = 0LL;
          unint64_t v28 = v9 + 18;
          while (1)
          {
            unsigned __int8 v12 = atomic_load((unsigned __int8 *)(a1 + 500));
            if ((v12 & 1) != 0) {
              goto LABEL_36;
            }
            uint64_t v13 = v10;
            char v10 = *(os_unfair_lock_s **)&v10[6]._os_unfair_lock_opaque;
            int v14 = atomic_load((unsigned __int8 *)&v13[59]._os_unfair_lock_opaque + 1);
            if (v14 == 80) {
              break;
            }
LABEL_31:
            if (v10) {
              BOOL v23 = v5 == 0;
            }
            else {
              BOOL v23 = 1;
            }
            uint64_t v11 = v13;
            if (v23) {
              goto LABEL_36;
            }
          }

          unsigned __int8 v15 = atomic_load((unsigned __int8 *)&v13[59]._os_unfair_lock_opaque + 3);
          if ((v15 & 1) == 0)
          {
            os_unfair_lock_lock(v13 + 58);
            uint64_t v16 = *(void *)&v13[14]._os_unfair_lock_opaque;
            os_unfair_lock_unlock(v13 + 58);
            if (!v16)
            {
              if (v6 + 1 <= v27)
              {
                uint64_t v19 = __ptr;
              }

              else
              {
                size_t v17 = malloc_good_size(8 * v27 + 8);
                unint64_t v27 = v17 >> 3;
                size_t v18 = v17 & 0xFFFFFFFFFFFFFFF8LL;
                if (__ptr == __src)
                {
                  uint64_t v19 = malloc(v18);
                  memmove(v19, __src, 8 * v6);
                }

                else
                {
                  uint64_t v19 = realloc(__ptr, v18);
                }
              }

              __ptr = v19;
              *((void *)v19 + v6++) = v13;
            }

            goto LABEL_31;
          }

          uint64_t v20 = v11 + 6;
          if (!v11) {
            uint64_t v20 = v30;
          }
          *(void *)&v20->_os_unfair_lock_opaque = v10;
          if (!v10) {
            *(void *)&v28->_os_unfair_lock_opaque = v11;
          }
          *(void *)&v13[6]._os_unfair_lock_opaque = 0LL;
          atomic_store(0x88u, (unsigned __int8 *)&v13[59]._os_unfair_lock_opaque + 1);
          ++*(_DWORD *)(a1 + 172);
          if (*(_BYTE *)(a1 + 506))
          {
            dispatch_queue_t v21 = (dispatch_queue_t)MEMORY[0x1895F8AE0];
            goto LABEL_22;
          }

          dispatch_queue_t v21 = *(dispatch_queue_t *)(a1 + 176);
          if (v21) {
LABEL_22:
          }
            dispatch_retain(v21);
          else {
            dispatch_queue_t v21 = oq_synthesize_backing_queue(a1);
          }
          os_unfair_lock_lock(v13 + 58);
          CFIndex v22 = _Block_copy(*(const void **)&v13[28]._os_unfair_lock_opaque);
          os_unfair_lock_unlock(v13 + 58);
          if (object_getClass(v13) == (Class)&OBJC_CLASS____NSBarrierOperation) {
            dispatch_barrier_async(v21, v22);
          }
          else {
            dispatch_async(v21, v22);
          }
          --v5;
          dispatch_release(v21);
          _Block_release(v22);
          uint64_t v13 = v11;
          goto LABEL_31;
        }

uint64_t op_get_property_qos(uint64_t a1)
{
  int v1 = atomic_load((unsigned __int8 *)(a1 + 241));
  uint64_t v2 = 5LL;
  if (v1 > 20)
  {
    if (v1 == 21) {
      return -1LL;
    }
    uint64_t v3 = 25LL;
    if (v1 == 33) {
      uint64_t v2 = 33LL;
    }
    BOOL v4 = v1 == 25;
  }

  else
  {
    if (!v1) {
      return 0LL;
    }
    uint64_t v3 = 9LL;
    if (v1 == 17) {
      uint64_t v2 = 17LL;
    }
    BOOL v4 = v1 == 9;
  }

  if (v4) {
    return v3;
  }
  else {
    return v2;
  }
}

void iop_addDependency(unsigned __int8 *a1, void *a2, void *a3)
{
  uint64_t v27 = *MEMORY[0x1895F89C0];
  id v6 = a2;
  id v7 = a3;
  char v8 = 0;
  uint64_t v9 = 0LL;
  v21[0] = MEMORY[0x1895F87A8];
  v21[1] = 3221225472LL;
  CFIndex v22 = __iop_addDependency_block_invoke;
  BOOL v23 = &unk_189C9F5B8;
  id v25 = a3;
  uint64_t v26 = a1;
  uint64_t v24 = a2;
  LOBYTE(v10) = 1;
  uint64_t v11 = 1LL;
  do
  {
    while (1)
    {
      while (1)
      {
        char v12 = v8;
        uint64_t v13 = v11;
        char v14 = v10;
        unsigned __int8 v15 = _NSOperationDependenciesAndReadyKeys[v9];
        if (v15 != @"isReady") {
          break;
        }
        uint64_t v11 = 0LL;
        int v16 = atomic_load(a1 + 236);
        char v17 = v8 | (v16 != 0);
        char v8 = 1;
        uint64_t v10 = v13;
        uint64_t v9 = 1LL;
        if ((v17 & 1) != 0) {
          goto LABEL_14;
        }
      }

      if (v15 != @"isFinished") {
        break;
      }
      uint64_t v11 = 0LL;
      size_t v18 = a1 + 235;
LABEL_13:
      int v16 = atomic_load(v18);
      char v19 = v8 | (v16 != 0);
      uint64_t v9 = 1LL;
      uint64_t v10 = v13;
      char v8 = 1;
      if ((v19 & 1) != 0)
      {
LABEL_14:
        if (v16) {
          char v20 = v14;
        }
        else {
          char v20 = v13;
        }
        if ((v20 & 1) != 0) {
          goto LABEL_18;
        }
        goto LABEL_20;
      }
    }

    if (v15 == @"isExecuting")
    {
      uint64_t v11 = 0LL;
      size_t v18 = a1 + 234;
      goto LABEL_13;
    }

    if (v15 == @"isCancelled")
    {
      uint64_t v11 = 0LL;
      size_t v18 = a1 + 237;
      goto LABEL_13;
    }

    uint64_t v11 = 0LL;
    uint64_t v9 = 1LL;
    uint64_t v10 = v13;
    char v8 = 1;
  }

  while ((v12 & 1) == 0);
  if ((v13 & 1) != 0)
  {
LABEL_18:
    [a3 _changeValueForKeys:_NSOperationDependenciesAndReadyKeys count:2 maybeOldValuesDict:0 maybeNewValuesDict:0 usingBlock:v21];
    goto LABEL_21;
  }

void oq_set_property_qos(uint64_t a1, uint64_t a2)
{
  if (a2 > 16)
  {
    switch(a2)
    {
      case 17LL:
        int v2 = 17;
        goto LABEL_15;
      case 33LL:
        int v2 = 33;
        goto LABEL_15;
      case 25LL:
        int v2 = 25;
        goto LABEL_15;
    }

void __addOperations(objc_class *a1, const char *a2, uint64_t a3, unint64_t a4, char a5)
{
  uint64_t v72 = *MEMORY[0x1895F89C0];
  if (!(a3 | a4) || a4 && ![(id)a4 count]) {
    return;
  }
  uint64_t v61 = 0LL;
  __int128 v62 = &v61;
  uint64_t v63 = 0x3052000000LL;
  __int128 v64 = __Block_byref_object_copy__11;
  __int128 v65 = __Block_byref_object_dispose__11;
  uint64_t v66 = 0LL;
  v60[0] = 0LL;
  v60[1] = v60;
  v60[2] = 0x3052000000LL;
  v60[3] = __Block_byref_object_copy__11;
  v60[4] = __Block_byref_object_dispose__11;
  v60[5] = 0LL;
  uint64_t v56 = 0LL;
  uint64_t v57 = &v56;
  uint64_t v58 = 0x2020000000LL;
  uint64_t v59 = 0LL;
  uint64_t v52 = 0LL;
  uint64_t v53 = &v52;
  uint64_t v54 = 0x2020000000LL;
  uint64_t v55 = 0LL;
  uint64_t v10 = MEMORY[0x1895F87A8];
  v44[0] = MEMORY[0x1895F87A8];
  v44[1] = 3221225472LL;
  CFIndex v45 = ____addOperations_block_invoke;
  uint64_t v46 = &unk_189C9F638;
  char v47 = a1;
  uint64_t v48 = &v52;
  uint64_t v49 = &v56;
  uint64_t v50 = v60;
  CFIndex v51 = &v61;
  if (a3)
  {
    ____addOperations_block_invoke(v44, a3);
  }

  else
  {
    __int128 v70 = 0u;
    __int128 v71 = 0u;
    __int128 v68 = 0u;
    __int128 v69 = 0u;
    uint64_t v11 = [(id)a4 countByEnumeratingWithState:&v68 objects:v67 count:16];
    if (v11)
    {
      uint64_t v12 = *(void *)v69;
      do
      {
        for (uint64_t i = 0LL; i != v11; ++i)
        {
          if (*(void *)v69 != v12) {
            objc_enumerationMutation((id)a4);
          }
          v45(v44, *(void *)(*((void *)&v68 + 1) + 8 * i));
        }

        uint64_t v11 = [(id)a4 countByEnumeratingWithState:&v68 objects:v67 count:16];
      }

      while (v11);
    }
  }

  if (v57[3])
  {
    for (uint64_t j = v62[5]; j; v62[5] = j)
    {
      uint64_t v22 = j;
      uint64_t j = *(void *)(j + 16);
      op_invalidate_queue_and_schedule_locked(v22);
      *(void *)(v62[5] + _Block_object_dispose(va, 8) = 0LL;
      BOOL v23 = v62;
      *(void *)(v62[5] + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = 0LL;
      uint64_t v24 = (unsigned __int8 *)(v23[5] + 237);
      while (1)
      {
        int v25 = __ldaxr(v24);
        if (v25 != 72) {
          break;
        }
        if (!__stlxr(0, v24)) {
          goto LABEL_36;
        }
      }

      __clrex();
LABEL_36:
    }

    if (a4)
    {
      uint64_t v26 = _NSMethodExceptionProem(a1, a2);
      uint64_t v27 = v57[3];
      unint64_t v28 = "s are";
      if (v27 == 1) {
        unint64_t v28 = " is";
      }
      unint64_t v29 = +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"%@: %lu (of %lu) operation%s finished, executing, or already in a queue, and cannot be enqueued",  v26,  v27,  v53[3] + v27,  v28);
      objc_exception_throw((id)[MEMORY[0x189603F70] exceptionWithName:*MEMORY[0x189603A60] reason:v29 userInfo:0]);
    }

    else
    {
      int v30 = atomic_load((unsigned __int8 *)(a3 + 237));
      HIDWORD(v32) = v30;
      LODWORD(v32) = v30 - 216;
      int v31 = v32 >> 2;
      if ((v31 - 6) < 2)
      {
        CFTypeRef v34 = (void *)[MEMORY[0x189603F70] exceptionWithName:*MEMORY[0x189603A60], +[NSString stringWithFormat:]( NSString, "stringWithFormat:", @"%@: operation is finished and cannot be enqueued", _NSMethodExceptionProem(a1, a2)), 0 reason userInfo];
        objc_exception_throw(v34);
      }

      else
      {
        if (v31) {
          BOOL v33 = v31 == 2;
        }
        else {
          BOOL v33 = 1;
        }
        if (v33) {
          uint64_t v35 = (void *)[MEMORY[0x189603F70] exceptionWithName:*MEMORY[0x189603A60], +[NSString stringWithFormat:]( NSString, "stringWithFormat:", @"%@: operation is executing and cannot be enqueued", _NSMethodExceptionProem(a1, a2)), 0 reason userInfo];
        }
        else {
          uint64_t v35 = (void *)[MEMORY[0x189603F70] exceptionWithName:*MEMORY[0x189603A60], +[NSString stringWithFormat:]( NSString, "stringWithFormat:", @"%@: operation is already enqueued on a queue", _NSMethodExceptionProem(a1, a2)), 0 reason userInfo];
        }
        objc_exception_throw(v35);
      }
    }

    __break(1u);
    return;
  }

  uint64_t v14 = 0LL;
  v36[0] = v10;
  v36[1] = 3221225472LL;
  uint64_t v37 = ____addOperations_block_invoke_5;
  BOOL v38 = &unk_189C9F660;
  uint64_t v39 = a1;
  __int128 v40 = &v52;
  int v15 = 1;
  uint64_t v41 = &v61;
  __int128 v42 = v60;
  char v43 = a5;
  do
  {
    while (1)
    {
      int v16 = v15;
      char v17 = _NSOperationQueueOperationsAndOperationCountKeys[v14];
      if (v17 == @"operations") {
        break;
      }
      if (v17 == @"operationCount")
      {
        size_t v18 = (unsigned __int8 *)&a1[63];
        goto LABEL_21;
      }

      int v15 = 0;
      uint64_t v14 = 1LL;
      if ((v16 & 1) == 0) {
        goto LABEL_25;
      }
    }

    size_t v18 = (unsigned __int8 *)&a1[62].isa + 7;
LABEL_21:
    int v19 = atomic_load(v18);
    BOOL v20 = v19 != 0;
    if (v19) {
      break;
    }
    int v15 = 0;
    uint64_t v14 = 1LL;
  }

  while (((v16 ^ 1) & 1) == 0);
  if (v20)
  {
    -[objc_class _changeValueForKeys:count:maybeOldValuesDict:maybeNewValuesDict:usingBlock:]( a1,  "_changeValueForKeys:count:maybeOldValuesDict:maybeNewValuesDict:usingBlock:",  _NSOperationQueueOperationsAndOperationCountKeys,  2LL,  0LL,  0LL,  v36);
    goto LABEL_26;
  }

void sub_1835DC030( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, char a31, uint64_t a32, uint64_t a33, uint64_t a34, char a35, uint64_t a36, uint64_t a37, uint64_t a38, char a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, uint64_t a44, char a45)
{
}

uint64_t __NSOPERATIONQUEUE_IS_WAITING_ON_AN_OPERATION__(void *a1)
{
  return [a1 waitUntilFinished];
}

uint64_t oq_get_property_qos(uint64_t a1)
{
  int v1 = atomic_load((unsigned __int8 *)(a1 + 502));
  uint64_t v2 = 5LL;
  if (v1 > 20)
  {
    if (v1 == 21) {
      return -1LL;
    }
    uint64_t v3 = 25LL;
    if (v1 == 33) {
      uint64_t v2 = 33LL;
    }
    BOOL v4 = v1 == 25;
  }

  else
  {
    if (!v1) {
      return 0LL;
    }
    uint64_t v3 = 9LL;
    if (v1 == 17) {
      uint64_t v2 = 17LL;
    }
    BOOL v4 = v1 == 9;
  }

  if (v4) {
    return v3;
  }
  else {
    return v2;
  }
}

dispatch_queue_t oq_synthesize_backing_queue(uint64_t a1)
{
  v8[1] = *MEMORY[0x1895F89C0];
  dispatch_queue_t v1 = *(dispatch_queue_t *)(a1 + 184);
  if (!v1)
  {
    dispatch_qos_class_t v3 = atomic_load((unsigned __int8 *)(a1 + 502));
    if (v3) {
      BOOL v4 = dispatch_queue_attr_make_with_qos_class(MEMORY[0x1895F8AF8], v3, 0);
    }
    else {
      BOOL v4 = (dispatch_queue_attr_s *)MEMORY[0x1895F8AF8];
    }
    unsigned __int8 v5 = atomic_load((unsigned __int8 *)(a1 + 501));
    if ((v5 & 1) != 0) {
      BOOL v4 = (dispatch_queue_attr_s *)dispatch_queue_attr_make_with_overcommit();
    }
    dispatch_queue_t v1 = dispatch_queue_create(0LL, v4);
    if (*(_BYTE *)(a1 + 200)) {
      goto LABEL_21;
    }
    v8[0] = 0LL;
    objc_msgSend( *(id *)(a1 + 192),  "getBytes:maxLength:usedLength:encoding:options:range:remainingRange:",  a1 + 200,  299,  v8,  4,  0,  0,  objc_msgSend(*(id *)(a1 + 192), "length"),  0);
    *(_BYTE *)(a1 + 8 + v8[0] + 192) = 0;
    __strlcat_chk();
    int v6 = atomic_load((unsigned __int8 *)(a1 + 502));
    if (v6 <= 16)
    {
      if (v6 && v6 != 5 && v6 != 9) {
        goto LABEL_20;
      }
    }

    else if (v6 > 24)
    {
      if (v6 != 33 && v6 != 25) {
        goto LABEL_20;
      }
    }

    else if (v6 != 17 && v6 != 21)
    {
      goto LABEL_20;
    }

    __strlcat_chk();
LABEL_20:
    __strlcat_chk();
LABEL_21:
    dispatch_queue_set_label_nocopy();
    *(void *)(a1 + 184) = v1;
  }

  dispatch_retain(v1);
  return v1;
}

uint64_t __NSOperationQueueGetOperations(uint64_t a1, void *a2, char a3)
{
  int v6 = (os_unfair_lock_s *)(a1 + 8);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 8));
  id v7 = *(void **)(a1 + 16);
  if (v7)
  {
    uint64_t v8 = 0LL;
    do
    {
      if ((a3 & 1) != 0 || object_getClass(v7) != (Class)&OBJC_CLASS____NSBarrierOperation)
      {
        ++v8;
        [a2 addObject:v7];
      }

      id v7 = (void *)v7[2];
    }

    while (v7);
  }

  else
  {
    uint64_t v8 = 0LL;
  }

  os_unfair_lock_unlock(v6);
  return v8;
}

uint64_t __NSOPERATIONQUEUE_IS_CANCELLING_AN_OPERATION__(void *a1)
{
  return [a1 cancel];
}

uint64_t __iop_copyCompletionBlock_block_invoke()
{
  else {
    uint64_t result = dyld_program_sdk_at_least();
  }
  _MergedGlobals_13 = result;
  return result;
}

void __iop_removeAllDependencies_block_invoke(uint64_t a1)
{
  uint64_t v18 = *MEMORY[0x1895F89C0];
  os_unfair_lock_lock((os_unfair_lock_t)(*(void *)(a1 + 40) + 224LL));
  uint64_t v2 = *(void *)(a1 + 40);
  dispatch_qos_class_t v3 = *(void **)(v2 + 32);
  *(void *)(v2 + 32) = 0LL;
  os_unfair_lock_unlock((os_unfair_lock_t)(v2 + 224));
  __int128 v16 = 0u;
  __int128 v17 = 0u;
  __int128 v14 = 0u;
  __int128 v15 = 0u;
  uint64_t v4 = [v3 countByEnumeratingWithState:&v14 objects:v13 count:16];
  if (v4)
  {
    uint64_t v5 = v4;
    uint64_t v6 = *(void *)v15;
    do
    {
      for (uint64_t i = 0LL; i != v5; ++i)
      {
        if (*(void *)v15 != v6) {
          objc_enumerationMutation(v3);
        }
        uint64_t v8 = *(void *)(*((void *)&v14 + 1) + 8 * i);
        os_unfair_lock_lock((os_unfair_lock_t)(v8 + 232));
        os_unfair_lock_lock((os_unfair_lock_t)(*(void *)(a1 + 40) + 224LL));
        int v9 = atomic_load((unsigned __int8 *)(v8 + 237));
        if (v9 != 244)
        {
          unsigned __int8 v10 = atomic_load((unsigned __int8 *)(*(void *)(a1 + 40) + 232LL));
          if ((v10 & 1) == 0)
          {
            uint64_t v11 = *(void *)(a1 + 40);
            uint64_t v12 = *(void *)(v11 + 48);
            *(void *)(v11 + 4_Block_object_dispose(va, 8) = v12 - 1;
            if (v12 <= 0) {
              __assert_rtn( "iop_removeAllDependencies_block_invoke",  "NSOperation.m",  552,  "iop->__unfinished_deps >= 0");
            }
          }
        }

        [*(id *)(v8 + 48) removeObject:*(void *)(a1 + 32)];
        os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(a1 + 40) + 224LL));
        os_unfair_lock_unlock((os_unfair_lock_t)(v8 + 232));
      }

      uint64_t v5 = [v3 countByEnumeratingWithState:&v14 objects:v13 count:16];
    }

    while (v5);
  }
}

BOOL __NSOperationImplicitObservationArrayEqualCallback(uint64_t a1, uint64_t a2)
{
  return a1 == a2;
}

uint64_t __iop_cancel_block_invoke(uint64_t result)
{
  return result;
}

void __iop_cancel_block_invoke_2(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  *(void *)(v2 + 4_Block_object_dispose(va, 8) = 0LL;
  os_unfair_lock_unlock((os_unfair_lock_t)(v2 + 224));
}

void __iop_setQueuePriority_block_invoke(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  int v2 = *(unsigned __int8 *)(a1 + 40);
  dispatch_qos_class_t v3 = (os_unfair_lock_s *)(v1 + 232);
  os_unfair_lock_lock((os_unfair_lock_t)(v1 + 232));
  uint64_t v4 = *(os_unfair_lock_s **)(v1 + 32);
  if (!v4)
  {
    *(_BYTE *)(v1 + 23_Block_object_dispose(va, 8) = v2;
LABEL_18:
    os_unfair_lock_unlock(v3);
    return;
  }

  os_unfair_lock_unlock((os_unfair_lock_t)(v1 + 232));
  dispatch_qos_class_t v3 = v4 + 2;
  os_unfair_lock_lock(v4 + 2);
  int v5 = *(unsigned __int8 *)(v1 + 238);
  if (v5 != 255) {
    goto LABEL_5;
  }
  if (v4[42]._os_unfair_lock_opaque == 1)
  {
    int v5 = 0;
    goto LABEL_5;
  }

  int property_qos = op_get_property_qos(v1);
  int v5 = 0;
  if (property_qos > 16)
  {
    if (property_qos > 24)
    {
      if (property_qos == 25)
      {
        int v5 = 4;
      }

      else
      {
        if (property_qos != 33) {
          goto LABEL_33;
        }
        int v5 = 8;
      }
    }

    else if (property_qos == 17)
    {
      int v5 = 252;
    }

    else if (property_qos != 21)
    {
      goto LABEL_33;
    }

double __iop_setThreadPriority_block_invoke(uint64_t a1)
{
  double result = *(double *)(a1 + 40);
  *(double *)(*(void *)(a1 + 32) + 80LL) = result;
  return result;
}

void __iop_setCompletionBlock_block_invoke(uint64_t a1)
{
  int v2 = (void *)[*(id *)(a1 + 32) copy];
  os_unfair_lock_lock((os_unfair_lock_t)(*(void *)(a1 + 40) + 224LL));
  uint64_t v3 = *(void *)(a1 + 40);
  uint64_t v4 = *(void **)(v3 + 56);
  if (*(void **)(a1 + 32) == v4)
  {

    id v5 = 0LL;
    uint64_t v3 = *(void *)(a1 + 40);
  }

  else
  {
    *(void *)(v3 + 56) = v2;
    id v5 = v4;
  }

  os_unfair_lock_unlock((os_unfair_lock_t)(v3 + 224));
}

char *__iop_setName_block_invoke(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 32);
  uint64_t v2 = *(void *)(a1 + 40);
  free(*(void **)(v2 + 88));
  if (v1) {
    double result = strdup((const char *)[v1 UTF8String]);
  }
  else {
    double result = 0LL;
  }
  *(void *)(v2 + 8_Block_object_dispose(va, 8) = result;
  return result;
}

NSMapTable *oq_begin_waiting(uint64_t a1, qos_class_t a2)
{
  uint64_t v4 = (os_unfair_lock_s *)(a1 + 8);
  id v5 = -[NSMapTable initWithKeyOptions:valueOptions:capacity:]( objc_alloc(&OBJC_CLASS___NSMapTable),  "initWithKeyOptions:valueOptions:capacity:",  258LL,  258LL,  0LL);
  os_unfair_lock_lock(v4);
  uint64_t v6 = [*(id *)(a1 + 152) count];
  if (v6)
  {
    uint64_t v7 = v6;
    for (uint64_t i = 0LL; i != v7; ++i)
    {
      int v9 = (_opaque_pthread_t *)[*(id *)(a1 + 152) pointerAtIndex:i];
      pthread_override_t started = pthread_override_qos_class_start_np(v9, a2, 0);
      NSMapInsertKnownAbsent(v5, v9, started);
    }
  }

  os_unfair_lock_unlock(v4);
  return v5;
}

void oq_end_waiting(NSMapTable *a1)
{
  uint64_t v5 = *MEMORY[0x1895F89C0];
  NSEnumerateMapTable(&enumerator, a1);
  while (NSNextMapEnumeratorPair(&enumerator, &key, (void **)&__override))
  {
    if (__override) {
      pthread_override_qos_class_end_np(__override);
    }
  }
}

void __iop_addDependency_block_invoke(void *a1)
{
  uint64_t v2 = *(void **)(a1[6] + 32LL);
  if (v2)
  {
    uint64_t v3 = [v2 indexOfObjectIdenticalTo:a1[4]];
    uint64_t v4 = a1[6];
    if (v3 != 0x7FFFFFFFFFFFFFFFLL)
    {
      uint64_t v7 = (os_unfair_lock_s *)(v4 + 224);
      goto LABEL_13;
    }

    uint64_t v5 = *(void **)(v4 + 32);
  }

  else
  {
    uint64_t v5 = (void *)objc_opt_new();
    *(void *)(a1[6] + 32LL) = v5;
  }

  [v5 addObject:a1[4]];
  uint64_t v6 = a1[4];
  os_unfair_lock_unlock((os_unfair_lock_t)(a1[6] + 224LL));
  uint64_t v7 = (os_unfair_lock_s *)(v6 + 232);
  os_unfair_lock_lock((os_unfair_lock_t)(v6 + 232));
  os_unfair_lock_lock((os_unfair_lock_t)(a1[6] + 224LL));
  int v8 = atomic_load((unsigned __int8 *)(v6 + 237));
  if (v8 != 244)
  {
    unsigned __int8 v9 = atomic_load((unsigned __int8 *)(a1[6] + 232LL));
    if ((v9 & 1) == 0)
    {
      uint64_t v10 = a1[6];
      uint64_t v11 = *(void *)(v10 + 48);
      if (v11 < 0) {
        __assert_rtn("iop_addDependency_block_invoke", "NSOperation.m", 795, "iop->__unfinished_deps >= 0");
      }
      *(void *)(v10 + 4_Block_object_dispose(va, 8) = v11 + 1;
      uint64_t v12 = a1[5];
      uint64_t v13 = *(NSHashTable **)(v6 + 48);
      if (!v13)
      {
        uint64_t v13 = +[NSHashTable hashTableWithOptions:](&OBJC_CLASS___NSHashTable, "hashTableWithOptions:", 5LL);
        *(void *)(v6 + 4_Block_object_dispose(va, 8) = v13;
      }

      -[NSHashTable addObject:](v13, "addObject:", v12);
    }
  }

  os_unfair_lock_unlock((os_unfair_lock_t)(a1[6] + 224LL));
LABEL_13:
  os_unfair_lock_unlock(v7);
}

void __iop_removeDependency_block_invoke(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 48);
  uint64_t v3 = *(void **)(v2 + 32);
  if (!v3) {
    goto LABEL_4;
  }
  if ([v3 indexOfObjectIdenticalTo:*(void *)(a1 + 32)] == 0x7FFFFFFFFFFFFFFFLL)
  {
    uint64_t v2 = *(void *)(a1 + 48);
LABEL_4:
    os_unfair_lock_unlock((os_unfair_lock_t)(v2 + 224));
    return;
  }

  id v11 = *(id *)(a1 + 32);
  os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(a1 + 48) + 224LL));
  if (v11)
  {
    os_unfair_lock_lock((os_unfair_lock_t)v11 + 58);
    os_unfair_lock_lock((os_unfair_lock_t)(*(void *)(a1 + 48) + 224LL));
    uint64_t v4 = *(void **)(*(void *)(a1 + 48) + 32LL);
    if (v4)
    {
      uint64_t v5 = [v4 indexOfObjectIdenticalTo:*(void *)(a1 + 32)];
      if (v5 != 0x7FFFFFFFFFFFFFFFLL)
      {
        uint64_t v6 = v5;
        int v7 = atomic_load((unsigned __int8 *)v11 + 237);
        if (v7 != 244)
        {
          unsigned __int8 v8 = atomic_load((unsigned __int8 *)(*(void *)(a1 + 48) + 232LL));
          if ((v8 & 1) == 0)
          {
            uint64_t v9 = *(void *)(a1 + 48);
            uint64_t v10 = *(void *)(v9 + 48);
            *(void *)(v9 + 4_Block_object_dispose(va, 8) = v10 - 1;
            if (v10 <= 0) {
              __assert_rtn("iop_removeDependency_block_invoke", "NSOperation.m", 847, "iop->__unfinished_deps >= 0");
            }
          }
        }

        [*((id *)v11 + 6) removeObject:*(void *)(a1 + 40)];
        [*(id *)(*(void *)(a1 + 48) + 32) removeObjectAtIndex:v6];
      }
    }

    os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(a1 + 48) + 224LL));
    os_unfair_lock_unlock((os_unfair_lock_t)v11 + 58);
  }

uint64_t __iop_start_block_invoke(uint64_t result)
{
  return result;
}

uint64_t __iop_start_block_invoke_2(uint64_t result)
{
  return result;
}

uint64_t __iop_start_block_invoke_3(uint64_t result)
{
  return result;
}

uint64_t __NSOPERATION_IS_INVOKING_MAIN__(void *a1)
{
  return [a1 main];
}

void op_invalidate_queue_and_schedule_locked(uint64_t a1)
{
  uint64_t v2 = (os_unfair_lock_s *)(a1 + 232);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 232));
  uint64_t v3 = *(void **)(a1 + 32);
  *(void *)(a1 + 32) = 0LL;
  uint64_t v4 = *(const void **)(a1 + 112);
  id v5 = *(id *)(a1 + 104);
  *(void *)(a1 + 104) = 0LL;
  *(void *)(a1 + 112) = 0LL;
  os_unfair_lock_unlock(v2);

  if (v4) {
    _Block_release(v4);
  }
}

void __Block_byref_object_copy__11(uint64_t a1, uint64_t a2)
{
}

{
  _Block_object_assign((void *)(a1 + 40), *(const void **)(a2 + 40), 135);
}

void __Block_byref_object_dispose__11(uint64_t a1)
{
}

void ____addOperations_block_invoke(void *a1, uint64_t a2)
{
  block[6] = *MEMORY[0x1895F89C0];
  uint64_t v4 = (unsigned __int8 *)(a2 + 237);
  do
  {
    if (__ldaxr(v4))
    {
      __clrex();
      ++*(void *)(*(void *)(a1[6] + 8LL) + 24LL);
      return;
    }
  }

  while (__stlxr(0x48u, v4));
  ++*(void *)(*(void *)(a1[5] + 8LL) + 24LL);
  if (*(void *)(*(void *)(a1[6] + 8LL) + 24LL))
  {
    while (1)
    {
      int v6 = __ldaxr(v4);
      if (v6 != 72) {
        break;
      }
      if (!__stlxr(0, v4)) {
        return;
      }
    }

    __clrex();
  }

  else
  {
    id v7 = (id)a2;
    atomic_store([(id)a2 isReady], (unsigned __int8 *)(a2 + 239));
    dispatch_qos_class_t v8 = atomic_load((unsigned __int8 *)(a2 + 241));
    if (v8)
    {
      block[0] = MEMORY[0x1895F87A8];
      block[1] = 3221225472LL;
      block[2] = ____addOperations_block_invoke_2;
      block[3] = &unk_189C991F0;
      block[4] = a1[4];
      block[5] = a2;
      dispatch_block_t v9 = dispatch_block_create_with_qos_class(DISPATCH_BLOCK_ENFORCE_QOS_CLASS, v8, 0, block);
    }

    else
    {
      uint64_t v10 = a1[4];
      if (oq_get_property_qos(v10))
      {
        aBlock[0] = MEMORY[0x1895F87A8];
        aBlock[1] = 3221225472LL;
        aBlock[2] = ____addOperations_block_invoke_4;
        aBlock[3] = &unk_189C991F0;
        aBlock[4] = v10;
        aBlock[5] = a2;
        dispatch_block_t v9 = _Block_copy(aBlock);
      }

      else
      {
        v16[0] = MEMORY[0x1895F87A8];
        v16[1] = 3221225472LL;
        void v16[2] = ____addOperations_block_invoke_3;
        _OWORD v16[3] = &unk_189C991F0;
        _OWORD v16[4] = v10;
        uint64_t v16[5] = a2;
        dispatch_block_t v9 = dispatch_block_create(DISPATCH_BLOCK_ASSIGN_CURRENT, v16);
      }
    }

    dispatch_block_t v11 = v9;
    uint64_t v12 = (void *)a1[4];
    os_unfair_lock_lock((os_unfair_lock_t)(a2 + 232));
    if (*(void *)(a2 + 32)) {
      __assert_rtn("iop_set_queue_and_adopt_schedule_locked", "NSOperation.m", 316, "iop->__queue == nil");
    }
    *(void *)(a2 + 32) = v12;
    if (*(void *)(a2 + 112)) {
      __assert_rtn("iop_set_queue_and_adopt_schedule_locked", "NSOperation.m", 318, "iop->__schedule == nil");
    }
    *(void *)(a2 + 112) = v11;
    *(void *)(a2 + 104) = voucher_copy();
    os_unfair_lock_unlock((os_unfair_lock_t)(a2 + 232));
    *(void *)(a2 + _Block_object_dispose(va, 8) = *(void *)(*(void *)(a1[7] + 8LL) + 40LL);
    *(void *)(a2 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = 0LL;
    uint64_t v13 = *(void *)(*(void *)(a1[7] + 8LL) + 40LL);
    if (v13) {
      __int128 v14 = (void *)(v13 + 16);
    }
    else {
      __int128 v14 = (void *)(*(void *)(a1[8] + 8LL) + 40LL);
    }
    *__int128 v14 = a2;
    *(void *)(*(void *)(a1[7] + 8LL) + 40LL) = a2;
  }

void ____addOperations_block_invoke_2(uint64_t a1)
{
}

void __NSOQSchedule_f(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (void *)MEMORY[0x186E1FF60]();
  pthread_t v5 = pthread_self();
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 8));
  [*(id *)(a1 + 152) addPointer:v5];
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 8));
  os_unfair_lock_lock((os_unfair_lock_t)(a2 + 232));
  int v6 = (void *)voucher_adopt();
  *(void *)(a2 + 104) = 0LL;
  os_unfair_lock_unlock((os_unfair_lock_t)(a2 + 232));
  _CFSetTSD();
  _CFSetTSD();
  atomic_store(0xD8u, (unsigned __int8 *)(a2 + 237));
  __NSOPERATIONQUEUE_IS_STARTING_AN_OPERATION__((void *)a2);
  _CFSetTSD();
  _CFSetTSD();
  if ([(id)a2 isFinished])
  {
    unsigned int v7 = atomic_load((unsigned __int8 *)(a2 + 237));
    if (v7 <= 0xEF) {
      +[__NSOperationInternalObserver _observeValueForKeyPath:ofObject:changeKind:oldValue:newValue:indexes:context:]( &OBJC_CLASS_____NSOperationInternalObserver,  "_observeValueForKeyPath:ofObject:changeKind:oldValue:newValue:indexes:context:",  @"isFinished",  a2,  0LL,  0LL,  0LL,  0LL,  0LL);
    }
  }

  pthread_t v8 = pthread_self();
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 8));
  uint64_t v9 = [*(id *)(a1 + 152) count];
  if (v9)
  {
    uint64_t v10 = v9;
    uint64_t v11 = 0LL;
    while ((pthread_t)[*(id *)(a1 + 152) pointerAtIndex:v11] != v8)
    {
      if (v10 == ++v11) {
        goto LABEL_11;
      }
    }

    if (v11 != 0x7FFFFFFFFFFFFFFFLL) {
      [*(id *)(a1 + 152) removePointerAtIndex:v11];
    }
  }

void ____addOperations_block_invoke_3(uint64_t a1)
{
}

void ____addOperations_block_invoke_4(uint64_t a1)
{
}

void ____addOperations_block_invoke_5(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 64))
  {
    os_unfair_lock_lock((os_unfair_lock_t)(*(void *)(a1 + 32) + 8LL));
    uint64_t v2 = *(void *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL);
    uint64_t v3 = (unint64_t *)(*(void *)(a1 + 32) + 144LL);
    do
      unint64_t v4 = __ldxr(v3);
    while (__stxr(v4 + v2, v3));
  }

  uint64_t v5 = *(void *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 40LL);
  if (v5)
  {
    uint64_t v6 = *(void *)(*(void *)(a1 + 32) + 24LL);
    *(void *)(v5 + _Block_object_dispose(va, 8) = v6;
    if (!v6) {
      uint64_t v6 = *(void *)(a1 + 32);
    }
    *(void *)(v6 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = v5;
    *(void *)(*(void *)(a1 + 32) + 24LL) = *(void *)(*(void *)(*(void *)(a1 + 56) + 8LL) + 40LL);
    do
    {
      if (!*(_BYTE *)(a1 + 64))
      {
        for (uint64_t i = *(void **)(*(void *)(a1 + 32) + 72LL); i; uint64_t i = (void *)i[3])
          iop_addDependency((unsigned __int8 *)(v5 + 8), i, (void *)v5);
      }

      pthread_t v8 = (unsigned __int8 *)(v5 + 237);
      while (1)
      {
        int v9 = __ldaxr(v8);
        if (v9 != 72) {
          break;
        }
        if (!__stlxr(0x50u, v8)) {
          goto LABEL_16;
        }
      }

      __clrex();
LABEL_16:
      int v10 = *(unsigned __int8 *)(v5 + 238);
      if (v10 == 255)
      {
        if (*(_DWORD *)(*(void *)(a1 + 32) + 168LL) == 1)
        {
          int v10 = 0;
        }

        else
        {
          int property_qos = op_get_property_qos(v5);
          int v10 = 0;
          if (property_qos > 16)
          {
            if (property_qos > 24)
            {
              if (property_qos == 25)
              {
                int v10 = 4;
              }

              else
              {
                if (property_qos != 33) {
                  goto LABEL_39;
                }
                int v10 = 8;
              }
            }

            else if (property_qos == 17)
            {
              int v10 = 252;
            }

            else if (property_qos != 21)
            {
              goto LABEL_39;
            }
          }

          else if ((property_qos + 1) >= 2)
          {
            if (property_qos != 5 && property_qos != 9)
            {
LABEL_39:
              __break(1u);
              return;
            }

            int v10 = 248;
          }
        }
      }

      *(void *)(v5 + 24) = 0LL;
      uint64_t v11 = 8LL * ((int)((v10 + (((char)v10 >> 13) & 3)) << 24) >> 26) + 16;
      uint64_t v12 = *(void *)(a1 + 32) + v11;
      uint64_t v13 = *(void *)(v12 + 80);
      __int128 v14 = (uint64_t *)(v12 + 32);
      if (v13) {
        __int128 v14 = (uint64_t *)(v13 + 24);
      }
      *__int128 v14 = v5;
      *(void *)(*(void *)(a1 + 32) + v11 + 80) = v5;
      uint64_t v5 = *(void *)(v5 + 16);
    }

    while (v5);
  }

  if (!*(_BYTE *)(a1 + 64)) {
    os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(a1 + 32) + 8LL));
  }
}

uint64_t __NSOPERATIONQUEUE_IS_STARTING_AN_OPERATION__(void *a1)
{
  return [a1 start];
}

uint64_t icuStyleFromNSStyle(uint64_t a1)
{
  return dword_1839428F0[a1 - 1];
}

void sub_1835DEEA0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
}

uint64_t forEachUnit(uint64_t result, uint64_t a2)
{
  __int16 v3 = result;
  if ((result & 4) != 0)
  {
    double result = (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 16))(a2, 4LL);
    if ((v3 & 8) == 0)
    {
LABEL_3:
      if ((v3 & 0x1000) == 0) {
        goto LABEL_4;
      }
      goto LABEL_11;
    }
  }

  else if ((result & 8) == 0)
  {
    goto LABEL_3;
  }

  double result = (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 16))(a2, 8LL);
  if ((v3 & 0x1000) == 0)
  {
LABEL_4:
    if ((v3 & 0x10) == 0) {
      goto LABEL_5;
    }
    goto LABEL_12;
  }

void sub_1835E05C0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, char a36)
{
}

uint64_t icuUnitFromNSUnit(uint64_t a1)
{
  if (a1 <= 31)
  {
    switch(a1)
    {
      case 4LL:
        return 0LL;
      case 8LL:
        return 1LL;
      case 16LL:
        return 2LL;
      default:
        goto LABEL_17;
    }
  }

  else if (a1 > 127)
  {
    if (a1 == 128)
    {
      return 6LL;
    }

    else
    {
      if (a1 != 4096) {
        goto LABEL_17;
      }
      return 3LL;
    }
  }

  else
  {
    if (a1 != 32)
    {
      if (a1 == 64) {
        return 5LL;
      }
LABEL_17:
      abort();
    }

    return 4LL;
  }

void *_NSPathComponents(_WORD *a1, uint64_t a2)
{
  unint64_t v4 = (void *)[MEMORY[0x189603FA8] array];
  if (a2)
  {
    if (a2 >= 1 && *a1 == 47)
    {
      uint64_t v5 = 1LL;
      objc_msgSend( v4,  "addObject:",  +[NSString stringWithCharacters:length:](NSString, "stringWithCharacters:length:", a1, 1));
    }

    else
    {
      uint64_t v5 = 0LL;
    }

    while (v5 < a2)
    {
      if (a1[v5] == 47)
      {
        ++v5;
      }

      else
      {
        if (v5 >= a2)
        {
LABEL_17:
          objc_msgSend( v4,  "addObject:",  +[NSString stringWithCharacters:length:](NSString, "stringWithCharacters:length:"));
          break;
        }

        uint64_t v6 = 0LL;
        while (a1[v5 + v6] != 47)
        {
          ++v6;
          if (v5 + v6 >= a2) {
            goto LABEL_17;
          }
        }

        objc_msgSend( v4,  "addObject:",  +[NSString stringWithCharacters:length:](NSString, "stringWithCharacters:length:"));
        v5 += v6;
      }
    }

    if (a2 >= 2 && a1[a2 - 1] == 47) {
      objc_msgSend( v4,  "addObject:",  +[NSString stringWithCharacters:length:]( NSString,  "stringWithCharacters:length:",  &a1[a2 - 1],  1));
    }
  }

  return v4;
}

void _convertToUnichars(unsigned __int16 *a1, size_t a2, void *a3, uint64_t *a4)
{
  uint64_t v10 = *MEMORY[0x1895F89C0];
  if (_NSConvertToASCIIorUnicode2(a1, a2, 4uLL, 1, (uint64_t)v7, 0LL) && (uint64_t v6 = v9) != 0)
  {
    if (*a4 < v9) {
      uint64_t v6 = *a4;
    }
    *a4 = v6;
    if (v7[0])
    {
      objc_exception_throw((id)[MEMORY[0x189603F70] exceptionWithName:*MEMORY[0x189603A58] reason:@"_convertToUnichars: Didn't get Unicode" userInfo:0]);
      _NSResolveSymlinksInPathUsingCache();
    }

    else
    {
      memmove(a3, __src, 2 * v6);
      if (v7[1]) {
        free(__src);
      }
    }
  }

  else
  {
    *a4 = 0LL;
  }

void _NSResolveSymlinksInPathUsingCache(unsigned __int16 *a1, uint64_t *a2, int a3)
{
  uint64_t v36 = *MEMORY[0x1895F89C0];
  uint64_t v3 = *a2;
  if (*a2)
  {
    uint64_t v5 = (void *)[objc_allocWithZone((Class)NSCheapMutableString) init];
    [v5 setContentsNoCopy:a1 length:v3 freeWhenDone:0 isUnicode:1];
    if (-[NSFileManager getFileSystemRepresentation:maxLength:withPath:]( +[NSFileManager defaultManager](&OBJC_CLASS___NSFileManager, "defaultManager"),  "getFileSystemRepresentation:maxLength:withPath:",  __s,  1025LL,  v5))
    {
      size_t v27 = strlen(__s);

      if ((a3 & 1) != 0
        || *a2 < 1
        || (int v6 = *a1, v6 != 126) && v6 != 47
        || (*(void *)&v32.st_uid = 0LL,
            v32.__darwin_ino64_t st_ino = 0LL,
            v32.st_dev = 5,
            *(_DWORD *)&v32.int st_mode = 0x8000000,
            getattrlist(__s, &v32, __src, 0x40CuLL, 0))
        || !v35
        || (size_t v7 = (v35 - 1), v7 >= 0x401))
      {
        unint64_t v26 = 0LL;
        pthread_t v8 = __s;
        while (1)
        {
          uint64_t v9 = v8;
          uint64_t v10 = v8 - 1;
          int64_t v11 = v8 - __s;
          uint64_t v12 = 2LL * (void)__s - (void)v8;
          uint64_t v13 = 1LL;
          do
          {
            uint64_t v14 = v13;
            int64_t v15 = v11;
            uint64_t v16 = v12;
            int v18 = *++v10;
            int v17 = v18;
            ++v13;
            ++v11;
            --v12;
          }

          while (v18 == 47);
          while (v17 && v17 != 47)
          {
            int v17 = v8[v14++];
            ++v15;
            --v16;
          }

          v8[v14 - 1] = 0;
          pthread_t v8 = &v8[v14 - 1];
          if (!a3) {
            goto LABEL_27;
          }
          os_unfair_lock_lock((os_unfair_lock_t)&_MergedGlobals_13_0);
          if (!qword_18C4963C0)
          {
            os_unfair_lock_unlock((os_unfair_lock_t)&_MergedGlobals_13_0);
            goto LABEL_27;
          }

          int ValueIfPresent = CFDictionaryGetValueIfPresent((CFDictionaryRef)qword_18C4963C0, __s, (const void **)&value);
          os_unfair_lock_unlock((os_unfair_lock_t)&_MergedGlobals_13_0);
          if (ValueIfPresent) {
            BOOL v20 = value == 0LL;
          }
          else {
            BOOL v20 = 1;
          }
          if (!v20)
          {
            if (v26 > 0x20) {
              return;
            }
            __strlcpy_chk();
            size_t v22 = strlen(__src);
            goto LABEL_39;
          }

          if (ValueIfPresent)
          {
LABEL_31:
            char *v8 = v17;
            if (!v17)
            {
              size_t v7 = v27;
              uint64_t v24 = a2;
              *a2 = 1024LL;
              int v25 = (unsigned __int16 *)__s;
              goto LABEL_50;
            }
          }

          else
          {
LABEL_27:
            if (lstat(__s, &v32) < 0) {
              return;
            }
            if ((v32.st_mode & 0xF000) != 0xA000)
            {
              if (a3) {
                _addToStatCache(__s, 0LL);
              }
              goto LABEL_31;
            }

            if (v26 > 0x20) {
              return;
            }
            ssize_t v21 = readlink(__s, __src, 0x401uLL);
            if (v21 < 0) {
              return;
            }
            size_t v22 = v21;
            __src[v21] = 0;
            if (a3) {
              _addToStatCache(__s, __src);
            }
LABEL_39:
            v9[v14 - 1] = v17;
            if (__src[0] == 47) {
              uint64_t v23 = 0LL;
            }
            else {
              uint64_t v23 = v9 - __s + 1;
            }
            ++v26;
            memmove(&__s[v23], __src, v22);
            *(_BYTE *)(v16 + v27 + v23 + v22) = 0;
            if (__src[0] == 47) {
              pthread_t v8 = __s;
            }
            else {
              pthread_t v8 = v9;
            }
            size_t v27 = v27 + v22 + v23 - v15;
          }
        }
      }

      int v25 = (unsigned __int16 *)((char *)&v34 + v34);
      uint64_t v24 = a2;
      *a2 = 1024LL;
LABEL_50:
      _convertToUnichars(v25, v7, a1, v24);
    }

    else
    {
    }
  }

void _addToStatCache(const char *a1, const char *a2)
{
  uint64_t v8 = *MEMORY[0x1895F89C0];
  memset(&v7, 0, 32);
  *(_OWORD *)&v7.equal = xmmword_189C9F730;
  unint64_t v4 = strdup(a1);
  uint64_t v5 = v4;
  if (a1 != a2)
  {
    if (a2) {
      uint64_t v5 = strdup(a2);
    }
    else {
      uint64_t v5 = 0LL;
    }
  }

  os_unfair_lock_lock((os_unfair_lock_t)&_MergedGlobals_13_0);
  int v6 = (const __CFDictionary *)qword_18C4963C0;
  if (!qword_18C4963C0)
  {
    int v6 = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x189604DD0], 0LL, &v7, 0LL);
    qword_18C4963C0 = (uint64_t)v6;
  }

  if (CFDictionaryContainsKey(v6, v4))
  {
    free(v4);
    if (v4 != v5) {
      free(v5);
    }
  }

  else
  {
    CFDictionaryAddValue((CFMutableDictionaryRef)qword_18C4963C0, v4, v5);
  }

  os_unfair_lock_unlock((os_unfair_lock_t)&_MergedGlobals_13_0);
}

void _NSStandardizePathUsingCache(unsigned __int16 *a1, uint64_t *a2, int a3)
{
  uint64_t v51 = *MEMORY[0x1895F89C0];
  _NSTransmutePathSlashes(a1, a2);
  uint64_t v6 = *a2;
  uint64_t v48 = a2;
  if (*a2 < 2) {
    goto LABEL_9;
  }
  uint64_t v7 = v6 - 1;
  while (a1[v7] == 47)
  {
    *a2 = v7;
    uint64_t v8 = v7 - 1;
    unint64_t v9 = v7-- + 1;
    if (v9 <= 2)
    {
      BOOL v10 = 0;
      uint64_t v6 = v8 + 1;
      goto LABEL_10;
    }
  }

  uint64_t v6 = v7 + 1;
  if (v7 + 1 >= 2 && *a1 == 92) {
    BOOL v10 = a1[1] == 92;
  }
  else {
LABEL_9:
  }
    BOOL v10 = 0;
LABEL_10:
  int HasDotDot = _pathHasDotDot(a1, v6, v10);
  if (HasDotDot)
  {
    uint64_t v49 = v6;
    __memmove_chk();
    _NSResolveSymlinksInPathUsingCache((unsigned __int16 *)__src, &v49, a3);
    uint64_t v6 = v49;
    if (v49 > 1024) {
      return;
    }
    memmove(a1, __src, 2 * v49);
    uint64_t v12 = a2;
    *a2 = v6;
  }

  else
  {
    uint64_t v12 = a2;
  }

  uint64_t v13 = -2 * v6;
  uint64_t v14 = 3LL;
  if (!v10) {
    goto LABEL_17;
  }
LABEL_15:
  if (v6 > 4)
  {
    do
    {
      int64_t v15 = &a1[v6];
      if (*(v15 - 2) != 47 || *(v15 - 1) != 46)
      {
        if (v10)
        {
          uint64_t v14 = 3LL;
          goto LABEL_33;
        }

        goto LABEL_25;
      }

      v6 -= 2LL;
      *uint64_t v12 = v6;
      v13 += 4LL;
      if (v10) {
        goto LABEL_15;
      }
LABEL_17:
      ;
    }

    while (v6 >= 3);
    if (v6 != 2)
    {
      BOOL v20 = a1 + 1;
      uint64_t v46 = a1 + 4;
      goto LABEL_103;
    }

uint64_t _pathHasDotDot(unsigned __int16 *a1, uint64_t a2, int a3)
{
  if (a2 < 1) {
    return 0LL;
  }
  uint64_t v3 = 0LL;
  int v4 = *a1;
  BOOL v6 = v4 != 126 && v4 != 47;
  if (a2 != 1 && !v6)
  {
    if (a3)
    {
      uint64_t v7 = 3LL;
      if ((unint64_t)a2 >= 4)
      {
        while (a1[v7] != 47)
        {
          if (a2 == ++v7)
          {
            uint64_t v7 = a2;
            break;
          }
        }
      }

      uint64_t v8 = v7 + 1;
      if (a2 <= v7 + 1) {
        uint64_t v9 = v7 + 1;
      }
      else {
        uint64_t v9 = a2;
      }
      uint64_t v10 = v9 - 1;
      while (v8 < a2)
      {
        int v11 = a1[v8++];
        if (v11 == 47)
        {
          uint64_t v10 = v8 - 2;
          break;
        }
      }

      uint64_t v12 = v10 + 2;
    }

    else
    {
      uint64_t v12 = 0LL;
    }

    if (v12 < a2 - 1)
    {
      uint64_t v13 = v12 + 2;
      for (uint64_t i = &a1[v12 + 1]; ; ++i)
      {
        if (*(i - 1) != 46 || *i != 46) {
          goto LABEL_38;
        }
        if (a2 >= 3 && v13 == 2) {
          break;
        }
        if (v13 - 2 < 1 || *(i - 2) != 47) {
          goto LABEL_38;
        }
        if (v13 < a2)
        {
          int v15 = i[1];
LABEL_31:
          if (v15 == 47) {
            return 1LL;
          }
          goto LABEL_38;
        }

        if (v13 == a2) {
          return 1LL;
        }
LABEL_38:
        if (++v13 - a2 == 1) {
          return 0LL;
        }
      }

      int v15 = a1[2];
      goto LABEL_31;
    }

    return 0LL;
  }

  return v3;
}

uint64_t _NSStandardizePathRewriteAutomountIsPathExcluded(_WORD *a1, uint64_t a2)
{
  uint64_t v2 = _NSStandardizePathRewriteAutomountIsPathExcluded_exclusionList;
  uint64_t v3 = "/Applications";
  while (1)
  {
    char v4 = *v3;
    if (!*v3) {
      break;
    }
    uint64_t v5 = 0LL;
    BOOL v6 = (unsigned __int8 *)(v3 + 1);
    while (a2 > (v5 * 2) >> 1 && (unsigned __int16)a1[v5] == (unsigned __int16)v4)
    {
      int v7 = *v6++;
      char v4 = v7;
      ++v5;
      if (!v7)
      {
        uint64_t v8 = &a1[v5];
        goto LABEL_9;
      }
    }

uint64_t _NSAppendPathComponent( unsigned __int16 *a1, uint64_t *a2, int64_t a3, void *__src, int64_t a5)
{
  if (!a5) {
    return 1LL;
  }
  uint64_t v7 = *a2;
  if (*a2)
  {
    if (v7 == 1)
    {
      int v8 = 47;
      uint64_t v9 = a1;
    }

    else
    {
      if (v7 != 2 || (int v8 = *a1, v8 != 92))
      {
        BOOL v11 = 1;
LABEL_13:
        if (v7 + a5 + v11 > a3) {
          return 0LL;
        }
        if (v11)
        {
          a1[v7++] = 47;
          *a2 = v7;
        }

        goto LABEL_17;
      }

      uint64_t v9 = a1 + 1;
    }

    BOOL v11 = *v9 != v8;
    goto LABEL_13;
  }

  if (a5 > a3) {
    return 0LL;
  }
  uint64_t v7 = 0LL;
LABEL_17:
  memmove(&a1[v7], __src, 2 * a5);
  *a2 += a5;
  return 1LL;
}

uint64_t _NSStartOfPathExtension(uint64_t a1, uint64_t a2)
{
  if (a2 >= 2)
  {
    uint64_t v3 = a2;
    do
    {
      uint64_t v2 = v3 - 1;
      if (v3 == 1) {
        break;
      }
      int v4 = *(unsigned __int16 *)(a1 - 4 + 2 * v3--);
    }

    while (v4 != 47);
  }

  else
  {
    uint64_t v2 = 0LL;
  }

  _CFGetPathExtensionRangesFromPathComponentUniChars();
  if (v6 == -1) {
    return 0LL;
  }
  else {
    return v2 + v6 - 1;
  }
}

uint64_t _NSAppendPathExtension(unsigned __int16 *a1, uint64_t *a2, uint64_t a3, _WORD *a4, uint64_t a5)
{
  if (*a2 >= 2)
  {
    uint64_t v9 = *a2 - 1;
    do
    {
      if (a1[v9] != 47) {
        break;
      }
      *a2 = v9;
      unint64_t v10 = v9-- + 1;
    }

    while (v10 > 2);
  }

  int v11 = _CFExecutableLinkedOnOrAfter();
  uint64_t v12 = *a2;
  if (!*a2) {
    return 0LL;
  }
  if (v12 == 2)
  {
    if (*a1 == 92 && a1[1] == 92) {
      return 0LL;
    }
    goto LABEL_23;
  }

  if (v12 != 1
    || ((uint64_t v13 = 0LL, v14 = *a1, !v11) ? (v15 = v14 == 126) : (v15 = 0),
        !v15 ? (char v16 = 0) : (char v16 = 1),
        v14 != 47 && (v16 & 1) == 0))
  {
LABEL_23:
    if (v11 || (uint64_t v17 = v12 - 1, v12 < 1) || *a1 != 126)
    {
LABEL_33:
      *a2 = v12 + 1;
      a1[v12] = 46;
      memmove(&a1[v12 + 1], a4, 2 * a5);
      *a2 += a5;
      return 1LL;
    }

    if ((unint64_t)v12 >= 2)
    {
      int v18 = a1 + 1;
      while (1)
      {
        int v19 = *v18++;
        if (v19 == 47) {
          break;
        }
        uint64_t v13 = 0LL;
        if (!--v17) {
          return v13;
        }
      }

      goto LABEL_33;
    }

    return 0LL;
  }

  return v13;
}

void _NSAbbreviatePathWithTilde(unsigned __int16 *a1, uint64_t *a2)
{
  v19[1] = *MEMORY[0x1895F89C0];
  if (*a2 >= 1 && (*a2 != 1 || *a1 != 47))
  {
    int v4 = NSHomeDirectoryForUser(0LL);
    uint64_t v5 = -[NSString length](v4, "length");
    if (*a2 >= v5)
    {
      uint64_t v6 = v5;
      MEMORY[0x1895F8858](v5);
      uint64_t v9 = (unsigned __int16 *)((char *)v19 - v8);
      if (v10 > 0x100) {
        uint64_t v9 = (unsigned __int16 *)malloc(2 * v7);
      }
      else {
        bzero((char *)v19 - v8, 2 * v7);
      }
      -[NSString getCharacters:range:](v4, "getCharacters:range:", v9, 0LL, v6);
      if (v6 < 1)
      {
        uint64_t v15 = 0LL;
        BOOL v16 = 0;
      }

      else if (*a1 == *v9)
      {
        uint64_t v11 = 1LL;
        while (1)
        {
          uint64_t v12 = v11;
          if (v6 == v11) {
            break;
          }
          int v13 = a1[v11];
          int v14 = v9[v11++];
          if (v13 != v14)
          {
            uint64_t v15 = v12;
            goto LABEL_17;
          }
        }

        uint64_t v15 = v6;
LABEL_17:
        BOOL v16 = v12 < v6;
      }

      else
      {
        uint64_t v15 = 0LL;
        BOOL v16 = 1;
      }

      if (!v16)
      {
        if (*a2 == v15)
        {
          *a1 = 126;
          uint64_t v17 = 1LL;
        }

        else
        {
          int v18 = &a1[v15];
          if (*v18 != 47) {
            return;
          }
          memmove(a1 + 1, v18, 2 * (*a2 - v15));
          *a1 = 126;
          uint64_t v17 = *a2 - v15 + 1;
        }

        *a2 = v17;
      }
    }
  }

uint64_t _NSExpandTildeInPath(uint64_t result, unint64_t *a2)
{
  unint64_t v2 = *a2;
  if ((uint64_t)*a2 >= 1)
  {
    uint64_t v3 = result;
    if (*(_WORD *)result == 126)
    {
      if (v2 < 2)
      {
        uint64_t v6 = 0LL;
        uint64_t v5 = 1LL;
      }

      else
      {
        uint64_t v5 = 1LL;
        while (*(_WORD *)(result + 2 * v5) != 47)
        {
          if (v2 == ++v5)
          {
            uint64_t v5 = *a2;
            break;
          }
        }

        if (v5 == 1) {
          uint64_t v6 = 0LL;
        }
        else {
          uint64_t v6 = +[NSString stringWithCharacters:length:]( &OBJC_CLASS___NSString,  "stringWithCharacters:length:",  result + 2,  v5 - 1);
        }
      }

      double result = (uint64_t)NSHomeDirectoryForUser(v6);
      if (result)
      {
        uint64_t v7 = (void *)result;
        double result = [(id)result length];
        uint64_t v8 = *a2 - v5;
        if (v8 + result <= 1024)
        {
          uint64_t v9 = result;
          double result = objc_msgSend(v7, "getCharacters:range:", v3, 0, v9);
          *a2 += v9 - v5;
        }
      }
    }
  }

  return result;
}

CFStringRef _NSFindCommonPrefixInStringArray(void *a1, int a2)
{
  uint64_t v20 = *MEMORY[0x1895F89C0];
  int64_t v4 = [a1 count];
  if (!v4) {
    return &stru_189CA6A28;
  }
  uint64_t v5 = v4;
  int64_t v6 = v4 - 1;
  if (v4 == 1) {
    return (const __CFString *)[a1 objectAtIndex:0];
  }
  if (v4 >= 257) {
    uint64_t v9 = (id *)NSAllocateObjectArray(v4);
  }
  else {
    uint64_t v9 = (id *)v19;
  }
  objc_msgSend(a1, "getObjects:range:", v9, 0, v5);
  id v10 = *v9;
  uint64_t v17 = [*v9 length];
  if (v17 < 1)
  {
    uint64_t v8 = &stru_189CA6A28;
  }

  else
  {
    uint64_t v11 = 0LL;
    if (a2) {
      uint64_t v12 = 8LL;
    }
    else {
      uint64_t v12 = 9LL;
    }
    uint64_t v8 = &stru_189CA6A28;
    while (1)
    {
      int v18 = v8;
      [v10 rangeOfComposedCharacterSequenceAtIndex:v11];
      v11 += v13;
      uint64_t v8 = (const __CFString *)objc_msgSend(v10, "substringWithRange:", 0, v11);
      int64_t v14 = v6;
      uint64_t v15 = v9 + 1;
      if (v5 >= 2) {
        break;
      }
LABEL_16:
      int64_t v6 = v14;
      if (v11 >= v17) {
        goto LABEL_20;
      }
    }

    while (1)
    {
      objc_msgSend(*v15, "rangeOfString:options:range:", v8, v12, 0, objc_msgSend(*v15, "length"));
      if (!v16) {
        break;
      }
      ++v15;
      if (!--v6) {
        goto LABEL_16;
      }
    }

    uint64_t v8 = v18;
  }

NSString *__cdecl NSHomeDirectoryForUser(NSString *userName)
{
  uint64_t v1 = (void *)CFCopyHomeDirectoryURLForUser();
  if (v1)
  {
    unint64_t v2 = v1;
    uint64_t v3 = (void *)[v1 path];
    CFRelease(v2);
  }

  else
  {
    uint64_t v3 = 0LL;
  }

  return (NSString *)[v3 stringByStandardizingPath];
}

NSString *NSHomeDirectory(void)
{
  return NSHomeDirectoryForUser(0LL);
}

NSString *NSUserName(void)
{
  return (NSString *)(id)CFCopyUserName();
}

NSString *NSFullUserName(void)
{
  if (geteuid()) {
    uid_t v0 = geteuid();
  }
  else {
    uid_t v0 = getuid();
  }
  double result = (NSString *)getpwuid(v0);
  if (result)
  {
    if (result[5].super.isa) {
      double result = (NSString *)(id)[objc_allocWithZone((Class)NSString) initWithBytes:result[5].super.isa length:strlen((const char *)result[5].super.isa) encoding:4];
    }
    else {
      double result = 0LL;
    }
  }

  if (!result) {
    return (NSString *)&stru_189CA6A28;
  }
  return result;
}

NSString *NSTemporaryDirectory(void)
{
  uint64_t v3 = *MEMORY[0x1895F89C0];
  if (!confstr(65537, __s, 0x402uLL))
  {
    if (issetugid() || !getenv("TMPDIR"))
    {
      __strlcpy_chk();
      return -[NSString stringByStandardizingPath]( -[NSFileManager stringWithFileSystemRepresentation:length:]( +[NSFileManager defaultManager](&OBJC_CLASS___NSFileManager, "defaultManager"),  "stringWithFileSystemRepresentation:length:",  __s,  strlen(__s)),  "stringByStandardizingPath");
    }

    __strlcpy_chk();
  }

  size_t v0 = strlen(__s);
  if (!v0 || __s[v0 - 1] != 47) {
    *(_WORD *)&__s[v0] = 47;
  }
  return -[NSString initWithUTF8String:](objc_alloc(&OBJC_CLASS___NSString), "initWithUTF8String:", __s);
}

NSString *NSOpenStepRootDirectory(void)
{
  if (!issetugid() && (uint64_t v1 = getenv("NEXT_ROOT")) != 0LL && *v1) {
    return -[NSString stringByStandardizingPath]( -[NSFileManager stringWithFileSystemRepresentation:length:]( +[NSFileManager defaultManager](&OBJC_CLASS___NSFileManager, "defaultManager"),  "stringWithFileSystemRepresentation:length:",  v1,  strlen(v1)),  "stringByStandardizingPath");
  }
  else {
    return (NSString *)@"/";
  }
}

NSArray *__cdecl NSSearchPathForDirectoriesInDomains( NSSearchPathDirectory directory, NSSearchPathDomainMask domainMask, BOOL expandTilde)
{
  BOOL v3 = expandTilde;
  __int16 v4 = domainMask;
  uint64_t v19 = *MEMORY[0x1895F89C0];
  int64_t v6 = (void *)[MEMORY[0x189603FA8] array];
  uint64_t v7 = -[NSSearchPathEnumerator initWithDirectory:domains:]( objc_alloc(&OBJC_CLASS___NSSearchPathEnumerator),  "initWithDirectory:domains:",  directory,  v4 & 0xC0F);
  __int128 v15 = 0u;
  __int128 v16 = 0u;
  __int128 v17 = 0u;
  __int128 v18 = 0u;
  uint64_t v8 = -[NSEnumerator countByEnumeratingWithState:objects:count:]( v7,  "countByEnumeratingWithState:objects:count:",  &v15,  v14,  16LL);
  if (v8)
  {
    uint64_t v9 = v8;
    uint64_t v10 = *(void *)v16;
    do
    {
      for (uint64_t i = 0LL; i != v9; ++i)
      {
        if (*(void *)v16 != v10) {
          objc_enumerationMutation(v7);
        }
        uint64_t v12 = *(void **)(*((void *)&v15 + 1) + 8 * i);
        [v6 addObject:v12];
      }

      uint64_t v9 = -[NSEnumerator countByEnumeratingWithState:objects:count:]( v7,  "countByEnumeratingWithState:objects:count:",  &v15,  v14,  16LL);
    }

    while (v9);
  }

  if ([v6 count]) {
    return (NSArray *)[MEMORY[0x189603F18] arrayWithArray:v6];
  }
  else {
    return (NSArray *)[MEMORY[0x189603F18] array];
  }
}

BOOL _isEqualCString(char *__s1, char *a2)
{
  if (__s1 == a2) {
    return 1LL;
  }
  BOOL result = 0LL;
  if (__s1)
  {
    if (a2) {
      return strcmp(__s1, a2) == 0;
    }
  }

  return result;
}

uint64_t _hashCString2(char *a1)
{
  uint64_t v8 = *MEMORY[0x1895F89C0];
  size_t v2 = strlen(a1);
  if (_NSConvertToASCIIorUnicode2((unsigned __int16 *)a1, v2, 4uLL, 1, (uint64_t)v5, 0LL) && v7 && !v5[0])
  {
    uint64_t v3 = CFStringHashCharacters();
    if (v5[1]) {
      free(v6);
    }
  }

  else
  {
    strlen(a1);
    return CFStringHashCString();
  }

  return v3;
}

void _NSInitializePlatform()
{
  if ((_NSInitializePlatform_inited & 1) == 0)
  {
    _NSInitializePlatform_uint64_t inited = 1;
    __CFInitialize();
    size_t v0 = getenv("NSDebugEnabled");
    uint64_t v1 = getenv("NSZombieEnabled");
    size_t v2 = getenv("NSDeallocateZombies");
    uint64_t v3 = getenv("NSDisableAutoreleasePoolCache");
    __NSSetCStringCharToUnichar(0LL);
    _NSToDoAtProcessStart();
    _os_log_set_nscf_formatter();
    __int16 v4 = getenv("NSUnbufferedIO");
    if (v4)
    {
      if ((*v4 | 0x20) == 0x79)
      {
        setvbuf((FILE *)*MEMORY[0x1895F89E0], 0LL, 2, 0LL);
        setvbuf((FILE *)*MEMORY[0x1895F89D0], 0LL, 2, 0LL);
      }
    }

    +[NSThread currentThread](&OBJC_CLASS___NSThread, "currentThread");
    _NSSetupDispatchDataBridge();
    -[NSProcessInfo arguments](+[NSProcessInfo processInfo](&OBJC_CLASS___NSProcessInfo, "processInfo"), "arguments");
  }

uint64_t _NSErrnoMessage()
{
  return *(void *)(MEMORY[0x1895FD288] + 8LL * *__error());
}

uint64_t _NSOpenFileDescriptor(const char *a1, int a2, uint64_t a3)
{
  uint64_t v7 = *MEMORY[0x1895F89C0];
  uint64_t v3 = open(a1, a2, a3);
  if ((v3 & 0x80000000) != 0) {
    return 0xFFFFFFFFLL;
  }
  uint64_t v4 = v3;
  if (fstat(v3, &v6) < 0 || (v6.st_mode & 0xF000) == 0x4000)
  {
    close(v4);
    return 0xFFFFFFFFLL;
  }

  return v4;
}

uint64_t _NSOpenFileDescriptor_Protected(char *a1, int a2, int a3, uint64_t a4)
{
  uint64_t v19 = *MEMORY[0x1895F89C0];
  unint64_t v7 = (a3 & 0xF0000000) - 0x10000000LL;
  if (v7 >> 28 >= 5)
  {
    uint64_t v11 = -[NSString stringByDeletingLastPathComponent]( +[NSString stringWithUTF8String:](&OBJC_CLASS___NSString, "stringWithUTF8String:", a1),  "stringByDeletingLastPathComponent");
    if (!-[NSString length](v11, "length")) {
      uint64_t v11 = -[NSFileManager currentDirectoryPath]( +[NSFileManager defaultManager](&OBJC_CLASS___NSFileManager, "defaultManager"),  "currentDirectoryPath");
    }
    uint64_t v12 = -[NSString fileSystemRepresentation](v11, "fileSystemRepresentation");
    if (!v12) {
      return open(a1, a2, a4);
    }
    v18.f_blocks = 0LL;
    v18.f_bfree = 0LL;
    v18.f_bsize = 5;
    v18.f_iosize = 0x40000000;
    int v13 = getattrlist(v12, &v18, v16, 8uLL, 1u);
    int v8 = v17;
    int v14 = v13 ? -1 : v17;
  }

  else
  {
    int v8 = *(_DWORD *)((char *)&unk_183942948 + (v7 >> 26));
  }

  uint64_t v9 = open_dprotected_np(a1, a2, v8, 0, a4);
  int v10 = *__error();
  if ((_DWORD)v9 != -1 || v10 != 45)
  {
    *__error() = v10;
    return v9;
  }

  if (!statfs(a1, &v18) && (v18.f_flags & 0x80) != 0)
  {
    *__error() = 45;
    return 0xFFFFFFFFLL;
  }

  *__error() = 45;
  return open(a1, a2, a4);
}

uint64_t _NSPreferredChunkSizeForFileDescriptor(int a1)
{
  uint64_t v13 = *MEMORY[0x1895F89C0];
  if (fstatfs(a1, &v12) == -1)
  {
    if (fstat(a1, &v11) == -1)
    {
      if (qword_18C4969C0 != -1) {
        dispatch_once(&qword_18C4969C0, &__block_literal_global_34);
      }
      uint64_t v4 = (os_log_s *)_MergedGlobals_111;
      if (os_log_type_enabled((os_log_t)_MergedGlobals_111, OS_LOG_TYPE_ERROR))
      {
        int v5 = *__error();
        stat v6 = __error();
        unint64_t v7 = strerror(*v6);
        v8[0] = 67109378;
        v8[1] = v5;
        __int16 v9 = 2080;
        int v10 = v7;
        _os_log_error_impl( &dword_182EB1000,  v4,  OS_LOG_TYPE_ERROR,  "Encountered fstat failure %d %s",  (uint8_t *)v8,  0x12u);
      }

      return -1LL;
    }

    blksize_t st_blksize = v11.st_blksize;
  }

  else
  {
    blksize_t st_blksize = v12.f_iosize;
  }

  if (st_blksize > 0) {
    return st_blksize;
  }
  return -1LL;
}

uint64_t _NSOSLog()
{
  if (qword_18C4969C0 != -1) {
    dispatch_once(&qword_18C4969C0, &__block_literal_global_34);
  }
  return _MergedGlobals_111;
}

uint64_t _NSReadFromFileDescriptorWithProgress(int a1, char *a2, unint64_t a3, uint64_t a4, int a5)
{
  uint64_t v25 = *MEMORY[0x1895F89C0];
  if (a5 && +[NSProgress currentProgress](&OBJC_CLASS___NSProgress, "currentProgress"))
  {
    __int16 v9 = +[NSProgress progressWithTotalUnitCount:](&OBJC_CLASS___NSProgress, "progressWithTotalUnitCount:", a3);
    if (v9)
    {
      if (a4)
      {
        unint64_t v10 = *(unsigned int *)(a4 + 8);
      }

      else
      {
        uint64_t v18 = _NSPreferredChunkSizeForFileDescriptor(a1);
        if (v18 == -1) {
          unint64_t v10 = a3;
        }
        else {
          unint64_t v10 = v18;
        }
      }

      goto LABEL_8;
    }
  }

  else
  {
    __int16 v9 = 0LL;
  }

  unint64_t v10 = a3;
LABEL_8:
  unint64_t v11 = a3;
LABEL_9:
  if (!v11) {
    return a3 - v11;
  }
  if (!-[NSProgress isCancelled](v9, "isCancelled"))
  {
    if (v10 >= v11) {
      unint64_t v12 = v11;
    }
    else {
      unint64_t v12 = v10;
    }
    if (v12 >= 0x7FFFFFFF) {
      size_t v13 = 0x7FFFFFFFLL;
    }
    else {
      size_t v13 = v12;
    }
    while (!-[NSProgress isCancelled](v9, "isCancelled"))
    {
      ssize_t v14 = read(a1, a2, v13);
      if ((v14 & 0x8000000000000000LL) == 0)
      {
        unint64_t v15 = v14;
        if (v14)
        {
          v11 -= v14;
          -[NSProgress setCompletedUnitCount:](v9, "setCompletedUnitCount:", a3 - v11);
          a2 += v15;
          if (v15 >= v13) {
            goto LABEL_9;
          }
        }

        return a3 - v11;
      }

      if (*__error() != 4)
      {
        if (qword_18C4969C0 != -1) {
          dispatch_once(&qword_18C4969C0, &__block_literal_global_34);
        }
        int v17 = (os_log_s *)_MergedGlobals_111;
        if (os_log_type_enabled((os_log_t)_MergedGlobals_111, OS_LOG_TYPE_ERROR))
        {
          int v19 = *__error();
          uint64_t v20 = __error();
          char v21 = strerror(*v20);
          v22[0] = 67109378;
          v22[1] = v19;
          __int16 v23 = 2080;
          uint64_t v24 = v21;
          _os_log_error_impl( &dword_182EB1000,  v17,  OS_LOG_TYPE_ERROR,  "Encountered read failure %d %s",  (uint8_t *)v22,  0x12u);
        }

        return -1LL;
      }
    }
  }

  return -1LL;
}

uint64_t _NSWriteToFileDescriptorWithProgress(int a1, char *a2, unint64_t a3, int a4)
{
  uint64_t v24 = *MEMORY[0x1895F89C0];
  if (a4 && +[NSProgress currentProgress](&OBJC_CLASS___NSProgress, "currentProgress"))
  {
    unint64_t v7 = +[NSProgress progressWithTotalUnitCount:](&OBJC_CLASS___NSProgress, "progressWithTotalUnitCount:", a3);
    if (v7)
    {
      uint64_t v8 = _NSPreferredChunkSizeForFileDescriptor(a1);
      if (v8 == -1) {
        unint64_t v9 = a3;
      }
      else {
        unint64_t v9 = v8;
      }
      goto LABEL_9;
    }
  }

  else
  {
    unint64_t v7 = 0LL;
  }

  unint64_t v9 = a3;
LABEL_9:
  unint64_t v10 = a3;
LABEL_10:
  if (!v10) {
    return a3 - v10;
  }
  if (!-[NSProgress isCancelled](v7, "isCancelled"))
  {
    if (v9 >= v10) {
      unint64_t v11 = v10;
    }
    else {
      unint64_t v11 = v9;
    }
    if (v11 >= 0x7FFFFFFF) {
      size_t v12 = 0x7FFFFFFFLL;
    }
    else {
      size_t v12 = v11;
    }
    while (!-[NSProgress isCancelled](v7, "isCancelled"))
    {
      ssize_t v13 = write(a1, a2, v12);
      if ((v13 & 0x8000000000000000LL) == 0)
      {
        unint64_t v14 = v13;
        if (v13)
        {
          v10 -= v13;
          -[NSProgress setCompletedUnitCount:](v7, "setCompletedUnitCount:", a3 - v10);
          a2 += v14;
          if (v14 >= v12) {
            goto LABEL_10;
          }
        }

        return a3 - v10;
      }

      if (*__error() != 4)
      {
        int v16 = *__error();
        if (qword_18C4969C0 != -1) {
          dispatch_once(&qword_18C4969C0, &__block_literal_global_34);
        }
        int v17 = (os_log_s *)_MergedGlobals_111;
        if (os_log_type_enabled((os_log_t)_MergedGlobals_111, OS_LOG_TYPE_ERROR))
        {
          int v18 = *__error();
          int v19 = __error();
          uint64_t v20 = strerror(*v19);
          v21[0] = 67109378;
          v21[1] = v18;
          __int16 v22 = 2080;
          __int16 v23 = v20;
          _os_log_error_impl( &dword_182EB1000,  v17,  OS_LOG_TYPE_ERROR,  "Encountered write failure %d %s",  (uint8_t *)v21,  0x12u);
        }

        *__error() = v16;
        return -1LL;
      }
    }
  }

  *__error() = 89;
  return -1LL;
}

uint64_t _NSReadExtendedAttributesFromFileDescriptor(int a1, void *a2, int a3, int *a4)
{
  int v5 = a2;
  uint64_t v33 = *MEMORY[0x1895F89C0];
  __int128 v29 = 0u;
  __int128 v30 = 0u;
  __int128 v31 = 0u;
  __int128 v32 = 0u;
  uint64_t v7 = [a2 countByEnumeratingWithState:&v29 objects:v28 count:16];
  if (!v7) {
    return [MEMORY[0x189603F68] dictionary];
  }
  uint64_t v8 = v7;
  __int16 v23 = a4;
  unint64_t v9 = 0LL;
  uint64_t v10 = *(void *)v30;
  unint64_t v11 = 0x189603000uLL;
  uint64_t v25 = *(void *)v30;
  while (2)
  {
    for (uint64_t i = 0LL; i != v8; ++i)
    {
      if (*(void *)v30 != v10) {
        objc_enumerationMutation(v5);
      }
      ssize_t v13 = *(void **)(*((void *)&v29 + 1) + 8 * i);
      unint64_t v14 = v27;
      if (([v13 getCString:v27 maxLength:200 encoding:4] & 1) == 0) {
        unint64_t v14 = (const char *)[v13 UTF8String];
      }
      ssize_t v15 = fgetxattr(a1, v14, value, 0x3E8uLL, 0, 0);
      if (v15 != -1)
      {
        int v16 = (void *)[objc_alloc(*(Class *)(v11 + 3912)) initWithBytes:value length:v15];
        if (!v16) {
          continue;
        }
LABEL_10:
        if (!v9) {
          unint64_t v9 = (void *)[MEMORY[0x189603FC8] dictionary];
        }
        [v9 setObject:v16 forKey:v13];

        continue;
      }

      if (*__error() != 34) {
        continue;
      }
      int v17 = v9;
      int v18 = v5;
      unint64_t v19 = v11;
      ssize_t v20 = fgetxattr(a1, v14, 0LL, 0LL, 0, 0);
      if (v20 == -1)
      {
        int v5 = v18;
        unint64_t v9 = v17;
        uint64_t v10 = v25;
        continue;
      }

      size_t v21 = v20;
      int v16 = (void *)[objc_alloc(MEMORY[0x189603FB8]) initWithLength:v20];
      if (fgetxattr(a1, v14, (void *)[v16 mutableBytes], v21, 0, 0) == v21)
      {
        unint64_t v11 = v19;
        int v5 = v18;
        unint64_t v9 = v17;
        uint64_t v10 = v25;
        if (!v16) {
          continue;
        }
        goto LABEL_10;
      }

      unint64_t v11 = v19;
      int v5 = v18;
      unint64_t v9 = v17;
      uint64_t v10 = v25;
      if (a3)
      {
        if (v23) {
          *__int16 v23 = *__error();
        }
        return 0LL;
      }
    }

    uint64_t v8 = [v5 countByEnumeratingWithState:&v29 objects:v28 count:16];
    if (v8) {
      continue;
    }
    break;
  }

  if (!v9) {
    return [MEMORY[0x189603F68] dictionary];
  }
  return (uint64_t)v9;
}

void *_NSCleanupTemporaryDirectory(void *result)
{
  if (result)
  {
    uint64_t v1 = result;
    BOOL result = (void *)rmdir((const char *)[result fileSystemRepresentation]);
    if ((_DWORD)result) {
      return (void *)-[NSFileManager removeItemAtPath:error:]( +[NSFileManager defaultManager](&OBJC_CLASS___NSFileManager, "defaultManager"),  "removeItemAtPath:error:",  v1,  0LL);
    }
  }

  return result;
}

uint64_t _NSCreateTemporaryFile(void *a1, NSString **a2, int *a3, void **a4, NSError **a5)
{
  uint64_t v34 = *MEMORY[0x1895F89C0];
  getpid();
  if (!sandbox_check())
  {
    *a4 = 0LL;
    ssize_t v15 = (void *)[a1 stringByDeletingLastPathComponent];
    if ([v15 isEqual:&stru_189CA6A28])
    {
      __s[0] = 0;
    }

    else if (([v15 getFileSystemRepresentation:__s maxLength:1024] & 1) == 0)
    {
      if (a5)
      {
        size_t v27 = _NSErrorWithFilePath(514LL, (uint64_t)a1);
        goto LABEL_33;
      }

      return 0LL;
    }

    int v16 = strlen(__s);
    int v17 = v16;
    if (v16 >= 1 && __s[v16 - 1] != 47)
    {
      if (v16 == 1048LL) {
        goto LABEL_18;
      }
      int v17 = v16 + 1;
      __s[v16] = 47;
    }

    unsigned __int16 v18 = getpid();
    snprintf(__str, 6uLL, "%04x", v18);
    if ((unint64_t)(v17 - 1027LL) >= 0xFFFFFFFFFFFFFBE7LL)
    {
      __int128 v29 = &__s[v17];
      do
      {
        char *v29 = 0;
        _NSFastMultiCStringConcat((uint64_t)v29, v19, v20, v21, v22, v23, v24, v25, ".dat.nosync", (uint64_t)__str);
        if (!mktemp(__s)) {
          break;
        }
        int v30 = _NSOpenFileDescriptor_Protected(__s, 2562, 0, 438LL);
        if ((v30 & 0x80000000) == 0)
        {
          int v14 = v30;
          size_t v12 = +[NSString stringWithUTF8String:](&OBJC_CLASS___NSString, "stringWithUTF8String:", __s);
          if (a2) {
            goto LABEL_5;
          }
          goto LABEL_6;
        }
      }

      while (*__error() == 17);
LABEL_19:
      if (a5)
      {
        uint64_t v26 = __error();
        size_t v27 = _NSErrorWithFilePathErrnoVariantAndExtraUserInfo(*v26, (uint64_t)a1, 0, 0LL, 0LL);
LABEL_33:
        *a5 = v27;
        return 0LL;
      }

      return 0LL;
    }

uint64_t _NSMoveTemporaryFileToDestination(void *a1, void *a2)
{
  uint64_t v8 = *MEMORY[0x1895F89C0];
  uint64_t result = [a2 getFileSystemRepresentation:__new maxLength:1024];
  if ((_DWORD)result)
  {
    uint64_t result = [a1 getFileSystemRepresentation:__old maxLength:1024];
    if ((_DWORD)result)
    {
      if (lstat(__new, &v5))
      {
        if (*__error() != 2) {
          return 0LL;
        }
        if (!rename(__old, __new)) {
          return 1LL;
        }
      }

      else
      {
        mode_t st_mode = v5.st_mode;
        if (!rename(__old, __new))
        {
          chmod(__new, st_mode);
          return 1LL;
        }
      }

      unlink(__old);
      return 0LL;
    }
  }

  return result;
}

uint64_t _NSWriteExtendedAttributesToFileDescriptor(int a1, void *a2, int a3, int *a4)
{
  uint64_t v23 = *MEMORY[0x1895F89C0];
  __int128 v19 = 0u;
  __int128 v20 = 0u;
  __int128 v21 = 0u;
  __int128 v22 = 0u;
  uint64_t v8 = [a2 countByEnumeratingWithState:&v19 objects:v18 count:16];
  if (v8)
  {
    uint64_t v9 = v8;
    uint64_t v10 = *(void *)v20;
    while (2)
    {
      for (uint64_t i = 0LL; i != v9; ++i)
      {
        if (*(void *)v20 != v10) {
          objc_enumerationMutation(a2);
        }
        size_t v12 = *(void **)(*((void *)&v19 + 1) + 8 * i);
        int v13 = v17;
        if (([v12 getCString:v17 maxLength:200 encoding:4] & 1) == 0) {
          int v13 = (const char *)[v12 UTF8String];
        }
        int v14 = (void *)[a2 objectForKey:v12];
        else {
          BOOL v15 = 1;
        }
        if (!v15)
        {
          if (a4) {
            *a4 = *__error();
          }
          return 0LL;
        }
      }

      uint64_t v9 = [a2 countByEnumeratingWithState:&v19 objects:v18 count:16];
      if (v9) {
        continue;
      }
      break;
    }
  }

  return 1LL;
}

uint64_t _NSGetFileSystemRepresentation(_BYTE *a1, uint64_t a2, void *a3)
{
  if (a3)
  {
    if (([a3 isEqual:&stru_189CA6A28] & 1) == 0) {
      return objc_msgSend(a3, "__swiftFillFileSystemRepresentationWithPointer:maxLength:", a1, a2);
    }
  }

  else
  {
    *a1 = 0;
  }

  return 0LL;
}

id _NSFileSystemRepresentationWithPath(__CFString *a1)
{
  if (!a1 || -[__CFString isEqual:](a1, "isEqual:", &stru_189CA6A28))
  {
    uint64_t v7 = @"*** -[NSFileManager fileSystemRepresentationWithPath:]: nil or empty path argument";
LABEL_11:
    uint64_t v8 = +[NSString stringWithFormat:](&OBJC_CLASS___NSString, "stringWithFormat:", v7);
    uint64_t v9 = (void *)MEMORY[0x189603F70];
    uint64_t v10 = (void *)MEMORY[0x189603A60];
    goto LABEL_12;
  }

  size_t MaximumSizeOfFileSystemRepresentation = CFStringGetMaximumSizeOfFileSystemRepresentation(a1);
  if (MaximumSizeOfFileSystemRepresentation == -1LL) {
    return 0LL;
  }
  size_t v3 = MaximumSizeOfFileSystemRepresentation;
  uint64_t v4 = (char *)malloc(MaximumSizeOfFileSystemRepresentation);
  if (v4)
  {
    stat v5 = v4;
    if ((-[__CFString __swiftFillFileSystemRepresentationWithPointer:maxLength:]( a1,  "__swiftFillFileSystemRepresentationWithPointer:maxLength:",  v4,  v3) & 1) != 0) {
      return (id)objc_msgSend( (id)objc_msgSend(MEMORY[0x189603F48], "dataWithBytesNoCopy:length:", v5, strlen(v5) + 1),  "bytes");
    }
    free(v5);
    uint64_t v7 = @"*** -[NSFileManager fileSystemRepresentationWithPath:]: Unable to form file system representation for string";
    goto LABEL_11;
  }

  uint64_t v8 = +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"*** -[NSFileManager fileSystemRepresentationWithPath:]: unable to allocate memory for length (%ld)",  v3);
  uint64_t v9 = (void *)MEMORY[0x189603F70];
  uint64_t v10 = (void *)MEMORY[0x189603B38];
LABEL_12:
  objc_exception_throw((id)[v9 exceptionWithName:*v10 reason:v8 userInfo:0]);
  return _NSFileSystemRepresentationString(v11, v12);
}

id _NSFileSystemRepresentationString(uint64_t a1, uint64_t a2)
{
  return (id)[objc_allocWithZone((Class)NSString) initWithBytes:a1 length:a2 encoding:4];
}

uint64_t _NSFileExists(uint64_t result, BOOL *a2)
{
  uint64_t v7 = *MEMORY[0x1895F89C0];
  if (result)
  {
    size_t v3 = (void *)result;
    if ([(id)result isEqual:&stru_189CA6A28])
    {
      return 0LL;
    }

    else
    {
      uint64_t result = objc_msgSend(v3, "__swiftFillFileSystemRepresentationWithPointer:maxLength:", v6, 1024);
      if ((_DWORD)result)
      {
        int v4 = stat(v6, &v5);
        uint64_t result = v4 == 0;
        if (a2)
        {
          if (!v4) {
            *a2 = (v5.st_mode & 0xF000) == 0x4000;
          }
        }
      }
    }
  }

  return result;
}

void *_NSLogCStringFunction()
{
  return __NSLogCString;
}

void *_NSSetLogCStringFunction(void *result)
{
  __NSLogCString = result;
  return result;
}

void NSLogv(NSString *format, va_list args)
{
}

uint64_t _NSLogv()
{
  return _CFAutoreleasePoolPop();
}

void NSLog(NSString *format, ...)
{
}

uint64_t _NSXPCLog()
{
  if (qword_18C4969D0 != -1) {
    dispatch_once(&qword_18C4969D0, &__block_literal_global_35);
  }
  return qword_18C4969C8;
}

uint64_t _NSRuntimeIssuesLog()
{
  if (qword_18C4969E0 != -1) {
    dispatch_once(&qword_18C4969E0, &__block_literal_global_37_1);
  }
  return qword_18C4969D8;
}

uint64_t _NSXPCLongMessageLog()
{
  if (qword_18C4969F0 != -1) {
    dispatch_once(&qword_18C4969F0, &__block_literal_global_40_0);
  }
  return qword_18C4969E8;
}

void *__cdecl NSAllocateCollectable(NSUInteger size, NSUInteger options)
{
  char v2 = options;
  int v4 = malloc_default_zone();
  if ((v2 & 1) != 0) {
    return malloc_zone_calloc(v4, 1uLL, size);
  }
  else {
    return malloc_zone_malloc(v4, size);
  }
}

void *__cdecl NSReallocateCollectable(void *ptr, NSUInteger size, NSUInteger options)
{
  if (!ptr) {
    return NSAllocateCollectable(size, options);
  }
  stat v5 = malloc_zone_from_ptr(ptr);
  return malloc_zone_realloc(v5, ptr, size);
}

void *NSAllocateScannedUncollectable(size_t a1)
{
  char v2 = malloc_default_zone();
  return malloc_zone_calloc(v2, 1uLL, a1);
}

void *NSReallocateScannedUncollectable(void *a1, size_t a2)
{
  if (a1)
  {
    int v4 = malloc_zone_from_ptr(a1);
    return malloc_zone_realloc(v4, a1, a2);
  }

  else
  {
    stat v6 = malloc_default_zone();
    return malloc_zone_calloc(v6, 1uLL, a2);
  }

void NSReallocateObjectArray(void *ptr, unint64_t a2)
{
  if (a2 >> 61)
  {
    uint64_t v10 = +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"*** attempt to allocate id buffer with too large of a count (%lu) -- possibly data is corrupt",  a2);
    objc_exception_throw((id)[MEMORY[0x189603F70] exceptionWithName:*MEMORY[0x189603A48] reason:v10 userInfo:0]);
    NSFreeObjectArray(v11);
  }

  else if (ptr)
  {
    size_t v4 = malloc_size(ptr);
    unint64_t v5 = 8 * a2;
    size_t v6 = malloc_good_size(8 * a2);
    uint64_t v7 = malloc_default_zone();
    uint64_t v8 = (char *)malloc_zone_calloc(v7, 1uLL, v6);
    uint64_t v9 = v8;
    if (v8)
    {
      if (v4 >= v5) {
        size_t v4 = v5;
      }
      memmove(v8, ptr, v4);
      if (v6 > v4) {
        bzero(&v9[v4], v6 - v4);
      }
      free(ptr);
    }
  }

  else
  {
    NSAllocateObjectArray(a2);
  }

uint64_t NSScannedZone(uint64_t a1)
{
  return a1;
}

uint64_t NSUnscannedZone(uint64_t a1)
{
  return a1;
}

uint64_t NSCollectedScannedZone(uint64_t a1)
{
  return a1;
}

uint64_t NSCollectedUnscannedZone(uint64_t a1)
{
  return a1;
}

NSZone *__cdecl NSCreateZone(NSUInteger startSize, NSUInteger granularity, BOOL canFree)
{
  return (NSZone *)malloc_create_zone(startSize, 0);
}

void NSSetZoneName(NSZone *zone, NSString *name)
{
  size_t v3 = (malloc_zone_t *)zone;
  if (!zone) {
    size_t v3 = malloc_default_zone();
  }
  malloc_set_zone_name(v3, -[NSString UTF8String](name, "UTF8String"));
}

NSString *__cdecl NSZoneName(NSZone *zone)
{
  if (!zone) {
    zone = (NSZone *)malloc_default_zone();
  }
  zone_name = malloc_get_zone_name((malloc_zone_t *)zone);
  if (zone_name) {
    char v2 = zone_name;
  }
  else {
    char v2 = "";
  }
  return +[NSString stringWithUTF8String:](&OBJC_CLASS___NSString, "stringWithUTF8String:", v2);
}

void *__cdecl NSZoneMalloc(NSZone *zone, NSUInteger size)
{
  if (!zone) {
    zone = (NSZone *)malloc_default_zone();
  }
  return malloc_zone_malloc((malloc_zone_t *)zone, size);
}

void *__cdecl NSZoneCalloc(NSZone *zone, NSUInteger numElems, NSUInteger byteSize)
{
  if (!zone) {
    zone = (NSZone *)malloc_default_zone();
  }
  return malloc_zone_calloc((malloc_zone_t *)zone, numElems, byteSize);
}

void *__cdecl NSZoneRealloc(NSZone *zone, void *ptr, NSUInteger size)
{
  if (ptr)
  {
    if (zone) {
      return malloc_zone_realloc((malloc_zone_t *)zone, ptr, size);
    }
    else {
      return realloc(ptr, size);
    }
  }

  else
  {
    if (!zone) {
      zone = (NSZone *)malloc_default_zone();
    }
    return malloc_zone_malloc((malloc_zone_t *)zone, size);
  }

void NSZoneFree(NSZone *zone, void *ptr)
{
  if (zone) {
    malloc_zone_free((malloc_zone_t *)zone, ptr);
  }
  else {
    free(ptr);
  }
}

void NSZoneReallyFree(malloc_zone_t *a1, void *a2)
{
  if (a1) {
    malloc_zone_free(a1, a2);
  }
  else {
    free(a2);
  }
}

BOOL NSShouldRetainWithZone(id anObject, NSZone *requestedZone)
{
  size_t v3 = (NSZone *)malloc_zone_from_ptr(anObject);
  size_t v4 = v3;
  if (requestedZone) {
    return v3 == requestedZone;
  }
  size_t v6 = malloc_default_zone();
  BOOL result = 1;
  if (v4 && v4 != (NSZone *)v6) {
    return 0;
  }
  return result;
}

NSUInteger NSPageSize(void)
{
  return *MEMORY[0x1895FD590];
}

NSUInteger NSLogPageSize(void)
{
  int v0 = flsl(*MEMORY[0x1895FD590]) - 1;
  return v0;
}

NSUInteger NSRoundUpToMultipleOfPageSize(NSUInteger bytes)
{
  return (bytes + *MEMORY[0x1895FD590] - 1) & -*MEMORY[0x1895FD590];
}

NSUInteger NSRoundDownToMultipleOfPageSize(NSUInteger bytes)
{
  return -*MEMORY[0x1895FD590] & bytes;
}

void *__cdecl NSAllocateMemoryPages(NSUInteger bytes)
{
  address[1] = *MEMORY[0x1895F89C0];
  if (vm_allocate(*MEMORY[0x1895FBBE0], address, bytes, 687865857))
  {
    size_t v3 = +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"*** NSAllocateMemoryPages(%lu) failed",  bytes);
    objc_exception_throw((id)[MEMORY[0x189603F70] exceptionWithName:*MEMORY[0x189603A60] reason:v3 userInfo:0]);
  }

  return (void *)address[0];
}

void NSDeallocateMemoryPages(void *ptr, NSUInteger bytes)
{
  if (mach_vm_deallocate(*MEMORY[0x1895FBBE0], (mach_vm_address_t)ptr, bytes))
  {
    size_t v4 = +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"*** NSDeallocateMemoryPages(%p, %lu) failed",  ptr,  bytes);
    objc_exception_throw((id)[MEMORY[0x189603F70] exceptionWithName:*MEMORY[0x189603A60] reason:v4 userInfo:0]);
    NSCopyMemoryPages(v5, v6, v7);
  }

void NSCopyMemoryPages(const void *source, void *dest, NSUInteger bytes)
{
  if (vm_copy(*MEMORY[0x1895FBBE0], (vm_address_t)source, bytes, (vm_address_t)dest)) {
    memmove(dest, source, bytes);
  }
}

NSUInteger NSRealMemoryAvailable(void)
{
  uint64_t v4 = *MEMORY[0x1895F89C0];
  NSUInteger result = _NSRealMemory;
  if (!_NSRealMemory)
  {
    NSUInteger v2 = 0LL;
    *(void *)size_t v3 = 0x500000006LL;
    size_t v1 = 8LL;
    if (sysctl(v3, 2u, &v2, &v1, 0LL, 0LL) == -1)
    {
      return _NSRealMemory;
    }

    else
    {
      NSUInteger result = v2;
      _NSRealMemordouble y = v2;
    }
  }

  return result;
}

BOOL _NSDefaultMallocZoneClaimedAddress()
{
  return malloc_zone_claimed_address() != 0;
}

void *_NSFaultInObject(unint64_t *a1, void *a2, uint64_t a3)
{
  NSUInteger result = (void *)*a1;
  if (result == a2)
  {
    NSUInteger result = (void *)(*(uint64_t (**)(uint64_t))(a3 + 16))(a3);
    while (1)
    {
      unint64_t v6 = __ldaxr(a1);
    }

    __clrex();
    if (result != (void *)*a1)
    {

      return (void *)*a1;
    }
  }

  return result;
}

void *_NSFaultInObjectWithCleanup(unint64_t *a1, uint64_t a2, uint64_t a3)
{
  NSUInteger result = (void *)*a1;
  if (!result)
  {
    NSUInteger result = (void *)(*(uint64_t (**)(uint64_t))(a2 + 16))(a2);
    while (!__ldaxr(a1))
    {
    }

    __clrex();
    [result performSelector:a3];
    return (void *)*a1;
  }

  return result;
}

uint64_t __NSLogAdaptor(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  return __NSLogCString(a2, a3, a4 != 0);
}

uint64_t sub_1835E86B4()
{
  return 0LL;
}

uint64_t sub_1835E86F4()
{
  return 0x7FFFFFFFFFFFFFFFLL;
}

uint64_t sub_1835E8734()
{
  return 0x7FFFFFFFFFFFFFFFLL;
}

uint64_t sub_1835E8774()
{
  return 0LL;
}

uint64_t sub_1835E90DC()
{
  return 0LL;
}

NSPointerArray *raiseError_1(uint64_t a1, const char *a2)
{
  id v3 = objc_alloc(MEMORY[0x189603F70]);
  SEL Name = sel_getName(a2);
  unint64_t v5 = (void *)[v3 initWithName:@"NSPointerFunctionsAbstractImplementationError", +[NSString stringWithFormat:]( NSString, "stringWithFormat:", @"abstract method %s called directly on class %@", Name, objc_opt_class()), 0 reason userInfo];
  objc_exception_throw(v5);
  return -[NSPointerArray initWithOptions:](v6, v7, v8);
}

void _NSXPCConnectionInitRemoteXPC()
{
  if (_MergedGlobals_112 != -1) {
    dispatch_once(&_MergedGlobals_112, &__block_literal_global_36);
  }
}

void message_handler(uint64_t a1, id a2)
{
  if (object_getClass(a2) == (Class)MEMORY[0x1895F9268])
  {
    uint64_t v5 = *(void *)(a1 + 16);
    if (v5) {
      (*(void (**)(uint64_t, id))(v5 + 16))(v5, a2);
    }
  }

  else if (object_getClass(a2) == (Class)MEMORY[0x1895F9250])
  {
    if (*(void *)(a1 + 24))
    {
      repldouble y = xpc_dictionary_create_reply(a2);
      (*(void (**)(void))(*(void *)(a1 + 24) + 16LL))();
      if (reply) {
        xpc_release(reply);
      }
    }
  }

  else
  {
    __break(1u);
  }

uint64_t __NSXPCCONNECTION_IS_WAITING_FOR_A_SYNCHRONOUS_REMOTE_REPLY__()
{
  return off_18C496A28();
}

_OWORD *NSSliceInitWithSlice(void *a1, void *a2)
{
  uint64_t v4 = malloc(0x18uLL);
  a1[1] = v4;
  uint64_t v5 = a2[1];
  uint64_t v6 = *(void *)(v5 + 16);
  *(_OWORD *)uint64_t v4 = *(_OWORD *)v5;
  _OWORD v4[2] = v6;
  NSUInteger result = malloc(0x28uLL);
  a1[2] = result;
  uint64_t v8 = a2[2];
  uint64_t v9 = a2[3];
  uint64_t v10 = *(void *)(v8 + 32);
  __int128 v11 = *(_OWORD *)(v8 + 16);
  *NSUInteger result = *(_OWORD *)v8;
  result[1] = v11;
  *((void *)result + 4) = v10;
  if (v9)
  {
    NSUInteger result = malloc(0x40uLL);
    a1[3] = result;
    uint64_t v12 = (_OWORD *)a2[3];
    __int128 v14 = v12[2];
    __int128 v13 = v12[3];
    __int128 v15 = v12[1];
    *NSUInteger result = *v12;
    result[1] = v15;
    result[2] = v14;
    result[3] = v13;
  }

  *a1 = 0LL;
  return result;
}

void NSSliceDealloc(void **a1)
{
}

void *mallocAcquire(const void *a1, uint64_t (*a2)(const void *), int a3)
{
  id v3 = a1;
  if (a3)
  {
    size_t v4 = a2(a1);
    uint64_t v5 = calloc(1uLL, v4);
    memmove(v5, v3, v4);
    return v5;
  }

  return (void *)v3;
}

vm_address_t machAcquire(vm_address_t a1, uint64_t (*a2)(vm_address_t), int a3)
{
  kern_return_t v9;
  uint64_t v10;
  vm_address_t dest_address[2];
  vm_address_t v3 = a1;
  dest_address[1] = *MEMORY[0x1895F89C0];
  if (a3)
  {
    unint64_t v4 = a2(a1);
    unint64_t v5 = v4 % *MEMORY[0x1895FD590];
    unint64_t v6 = *MEMORY[0x1895FD590] - v5;
    if (!v5) {
      unint64_t v6 = 0LL;
    }
    mach_vm_size_t v7 = v6 + v4;
    uint64_t v8 = (vm_map_t *)MEMORY[0x1895FBBE0];
    uint64_t v9 = vm_allocate(*MEMORY[0x1895FBBE0], dest_address, v6 + v4, 1);
    uint64_t v10 = 0LL;
    if (!v9)
    {
      if (vm_copy(*v8, v3, v7, dest_address[0]))
      {
        mach_vm_deallocate(*v8, dest_address[0], v7);
        return 0LL;
      }

      else
      {
        return dest_address[0];
      }
    }

    return v10;
  }

  return v3;
}

uint64_t machRelinquish(mach_vm_address_t a1, uint64_t (*a2)(void))
{
  unint64_t v3 = a2();
  unint64_t v4 = v3 % *MEMORY[0x1895FD590];
  unint64_t v5 = *MEMORY[0x1895FD590] - v4;
  if (!v4) {
    unint64_t v5 = 0LL;
  }
  return mach_vm_deallocate(*MEMORY[0x1895FBBE0], a1, v5 + v3);
}

NSString *pointerDescription(uint64_t a1)
{
  return +[NSString stringWithFormat:](&OBJC_CLASS___NSString, "stringWithFormat:", @"%p", a1);
}

size_t cStringSize(const char *a1)
{
  return strlen(a1) + 1;
}

uint64_t cStringHash(uint64_t a1, void (*a2)(void))
{
  return CFStringHashISOLatin1CString();
}

BOOL valueEqual(const void *a1, const void *a2, uint64_t (*a3)(void))
{
  size_t v6 = a3();
  return v6 == ((uint64_t (*)(const void *))a3)(a2) && memcmp(a1, a2, v6) == 0;
}

NSString *cStringDescription(uint64_t a1)
{
  return +[NSString stringWithUTF8String:](&OBJC_CLASS___NSString, "stringWithUTF8String:", a1);
}

uint64_t valueHash(char *a1, uint64_t (*a2)(void))
{
  uint64_t result = a2();
  if (result >= 1)
  {
    unint64_t v4 = &a1[result];
    do
    {
      uint64_t v5 = *a1++;
      result += 17 * v5;
    }

    while (a1 < v4);
  }

  return result;
}

NSString *integerDescription(uint64_t a1)
{
  return +[NSString stringWithFormat:](&OBJC_CLASS___NSString, "stringWithFormat:", @"%ld", a1);
}

uint64_t _NSPointerFunctionCoding_isValidOptions(__int16 a1)
{
  unint64_t v1 = a1 & 7;
  BOOL v3 = v1 == 5 || v1 == 0;
  BOOL v4 = v1 <= 5 && v3;
  unint64_t v5 = a1 & 0x700;
  if (v5 > 0x500) {
    goto LABEL_19;
  }
  int64x2_t v6 = vdupq_n_s64(v5);
  int32x4_t v7 = (int32x4_t)vandq_s8( (int8x16_t)vuzp1q_s32( (int32x4_t)vceqq_s64(v6, (int64x2_t)xmmword_183951260),  (int32x4_t)vceqq_s64(v6, (int64x2_t)xmmword_183951250)),  (int8x16_t)xmmword_183951270);
  v7.i32[0] = vaddvq_s32(v7);
  uint8x8_t v8 = (uint8x8_t)vcnt_s8(*(int8x8_t *)v7.i8);
  v8.i16[0] = vaddlv_u8(v8);
  __int32 v9 = v8.i32[0];
  if (v5 == 1024) {
    __int32 v9 = v8.i32[0] + 1;
  }
  if (v5 == 1280) {
    ++v9;
  }
  if (v9 == 1)
  {
    unint64_t v10 = v5 - 256;
    BOOL v11 = v10 > 0x4FF || (v10 & 0x1F00) == 256;
  }

  else
  {
LABEL_19:
    BOOL v11 = 0;
  }

  return v4 & v11;
}

void *_NSPointerFunctionCoding_bufferForCount(unint64_t a1)
{
  if (a1 >> 61) {
    return 0LL;
  }
  uint64_t result = malloc(8 * a1);
  if (result)
  {
    if (__CFADD__(result, a1))
    {
      free(result);
      return 0LL;
    }
  }

  return result;
}

id startReadARCWeakAutoreleasingWithSentinelAt(id *a1, BOOL *a2)
{
  id v2 = *a1;
  if (a2) {
    *a2 = v2 == (id)1;
  }
  else {
    return 0LL;
  }
}

id startReadARCWeakWithSentinelAt(id *a1, BOOL *a2)
{
  id v2 = *a1;
  if (a2) {
    *a2 = v2 == (id)1;
  }
  else {
    return 0LL;
  }
}

void finishReadARCWeakAt(id a1)
{
  if (a1) {
}
  }

id continueReadARCWeakAt(id result)
{
  if (result) {
    return result;
  }
  return result;
}

id startReadARCWeakAutoreleasingAt(id *a1, BOOL *a2)
{
  if (*a1)
  {
    id result = objc_loadWeak(a1);
    if (!a2) {
      return result;
    }
  }

  else
  {
    id result = 0LL;
    if (!a2) {
      return result;
    }
  }

  *a2 = result == 0LL;
  return result;
}

id *clearARCWeakAt(id *location)
{
  unint64_t v1 = location;
  if (*location) {
    location = (id *)objc_storeWeak(location, 0LL);
  }
  *unint64_t v1 = 0LL;
  return location;
}

id startReadARCWeakAt(id *a1, BOOL *a2)
{
  if (*a1)
  {
    id result = objc_loadWeakRetained(a1);
    if (!a2) {
      return result;
    }
  }

  else
  {
    id result = 0LL;
    if (!a2) {
      return result;
    }
  }

  *a2 = result == 0LL;
  return result;
}

uint64_t startReadPointerAt(uint64_t *a1, BOOL *a2)
{
  uint64_t result = *a1;
  if (a2) {
    *a2 = result == 0;
  }
  return result;
}

uint64_t sub_1835ECE88()
{
  return 0LL;
}

uint64_t sub_1835ECF08()
{
  return 0LL;
}

uint64_t sub_1835ED038()
{
  return 0LL;
}

uint64_t __NSFireMachPort(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v5 = *(void **)(a4 + 8);
  _CFAutoreleasePoolPush();
  if ((objc_opt_respondsToSelector() & 1) != 0) {
    [v5 handleMachMessage:a2];
  }
  return _CFAutoreleasePoolPop();
}

uint64_t __NSDescribeNSMachPortCallout(uint64_t a1, uint64_t a2, char *a3, size_t a4, char *a5, size_t a6)
{
  uint64_t v17 = *MEMORY[0x1895F89C0];
  ClassSEL Name = object_getClassName(*(id *)(a2 + 8));
  Class Class = object_getClass(*(id *)(a2 + 8));
  __int128 v13 = "<unknown name>";
  if (ClassName) {
    __int128 v13 = ClassName;
  }
  snprintf(a5, a6, "(NSMachPort) %s", v13);
  uint64_t result = dladdr(Class, &v16);
  if ((_DWORD)result)
  {
    dli_fname = v16.dli_fname;
    if (!v16.dli_fname) {
      dli_fname = "<unknown library>";
    }
    return snprintf(a3, a4, "%s", dli_fname);
  }

  return result;
}

void __destroyPortContext(void *ptr)
{
  if (ptr[3] == ~ptr[4])
  {
    ptr[1] = 0LL;
    _cfmp_record_nsmachport_deallocation();
    *(void *)&__int128 v2 = 0xFAFAFAFAFAFAFAFALL;
    *((void *)&v2 + 1) = 0xFAFAFAFAFAFAFAFALL;
    *((_OWORD *)ptr + 1) = v2;
    *((_OWORD *)ptr + 2) = v2;
    *(_OWORD *)ptr = v2;
    free(ptr);
  }

  else if (malloc_size(ptr))
  {
    NSLog( (NSString *)@"*** __destroyPortContext() called with invalid context %p:{%p, %p, %p, %p, %p, %p}}:\n%@",  ptr,  *ptr,  ptr[1],  ptr[2],  ptr[3],  ptr[4],  ptr[5],  +[NSThread callStackSymbols](&OBJC_CLASS___NSThread, "callStackSymbols"));
  }

  else
  {
    NSLog( (NSString *)@"*** __destroyPortContext() called with invalid context %p:\n%@",  ptr,  +[NSThread callStackSymbols](&OBJC_CLASS___NSThread, "callStackSymbols"));
  }

uint64_t _NSPortDeathNotify(uint64_t a1)
{
  return _CFAutoreleasePoolPop();
}

uint64_t __NSFireMessagePort(uint64_t a1, unsigned int a2, const __CFData *a3, uint64_t a4)
{
  if ((objc_opt_respondsToSelector() & 1) != 0)
  {
    int32x4_t v7 = (const __CFDictionary *)CFPropertyListCreateWithData(0LL, a3, 0LL, 0LL, 0LL);
    if (v7)
    {
      uint8x8_t v8 = v7;
      id Value = CFDictionaryGetValue(v7, @"NSMessagePortReplyName");
      if (Value) {
        unint64_t v10 = (void *)[objc_allocWithZone((Class)NSMessagePort) initWithRemoteName:Value];
      }
      else {
        unint64_t v10 = 0LL;
      }
      BOOL v11 = (void *)CFDictionaryGetValue(v8, @"NSMessagePortComponents");
      _CFAutoreleasePoolPush();
      uint64_t v12 = (void *)[MEMORY[0x189603FA8] array];
      uint64_t v13 = [v11 count];
      if (v13)
      {
        uint64_t v14 = v13;
        for (uint64_t i = 0LL; i != v14; ++i)
        {
          uint64_t v16 = [v11 objectAtIndex:i];
          if (_NSIsNSString())
          {
            uint64_t v17 = [objc_allocWithZone((Class)NSMessagePort) initWithRemoteName:v16];
            if (v17)
            {
              unsigned __int16 v18 = (void *)v17;
              [v12 addObject:v17];
            }

            else
            {
              NSLog((NSString *)@"-[NSMessagePort parseMessage:]: could not create port component; this is very bad");
            }
          }

          else
          {
            [v12 addObject:v16];
          }
        }
      }

      __int128 v19 = (void *)[objc_allocWithZone((Class)NSPortMessage) initWithSendPort:v10 receivePort:a4 components:v12];

      CFRelease(v8);
      [v19 setMsgid:a2];
      [*(id *)(a4 + 32) handlePortMessage:v19];

      _CFAutoreleasePoolPop();
    }
  }

  return 0LL;
}

uint64_t _NSProgressFractionIsEqual(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = a1[1];
  if (!v2) {
    return 0LL;
  }
  uint64_t v3 = a2[1];
  if (!v3) {
    return 0LL;
  }
  uint64_t v4 = *a1;
  uint64_t v5 = *a2;
  uint64_t result = *a1 == *a2;
  if (v2 == v3) {
    return result;
  }
  if (!(v5 | v4) || v4 == v2 && v5 == v3) {
    return 1LL;
  }
  if (v4)
  {
    if (v5) {
      goto LABEL_10;
    }
    return 0LL;
  }

  if (v5) {
    return 0LL;
  }
LABEL_10:
  if ((unsigned __int128)(v5 * (__int128)v2) >> 64 != (v5 * v2) >> 63)
  {
    uint64_t v7 = a2[1];
    uint64_t v8 = *a2;
    goto LABEL_15;
  }

  uint64_t v7 = a2[1];
  uint64_t v8 = *a2;
  if ((unsigned __int128)(v3 * (__int128)v4) >> 64 != (v3 * v4) >> 63)
  {
    do
    {
LABEL_15:
      uint64_t v9 = v8;
      uint64_t v8 = v7;
      uint64_t v7 = v9 % v7;
    }

    while (v7);
    uint64_t v10 = v2;
    uint64_t v11 = v4;
    do
    {
      uint64_t v12 = v11;
      uint64_t v11 = v10;
      uint64_t v10 = v12 % v10;
    }

    while (v10);
    uint64_t v13 = v5 / v8 * (v2 / v11);
    if ((unsigned __int128)(v5 / v8 * (__int128)(v2 / v11)) >> 64 == v13 >> 63
      && (uint64_t v14 = v3 / v8, v15 = v4 / v11,
                         uint64_t v16 = v3 / v8 * v15,
                         (unsigned __int128)(v14 * (__int128)v15) >> 64 == v16 >> 63))
    {
      return v13 == v16;
    }

    else
    {
      double v17 = 0.0;
      double v18 = 0.0;
      if (((v4 | v2) & 0x8000000000000000LL) == 0) {
        double v18 = (double)v4 / (double)v2;
      }
      if (((v5 | v3) & 0x8000000000000000LL) == 0) {
        double v17 = (double)v5 / (double)v3;
      }
      return v18 == v17;
    }
  }

  return v5 * v2 == v3 * v4;
}

uint64_t _NSProgressFractionIsFractionCompletedEqual(uint64_t *a1, uint64_t *a2)
{
  if ((_NSProgressFractionIsEqual(a1, a2) & 1) != 0) {
    return 1LL;
  }
  uint64_t v5 = *a1;
  if (*a1) {
    LODWORD(v5) = v5 >= 0 && a1[1] > 0;
  }
  uint64_t v7 = *a2;
  if (*a2) {
    LODWORD(v7) = v7 >= 0 && a2[1] > 0;
  }
  return (v5 | v7) ^ 1;
}

NSString *_NSProgressFractionDescription(uint64_t *a1)
{
  uint64_t v2 = *a1;
  uint64_t v1 = a1[1];
  double v3 = 0.0;
  if ((*a1 & 0x8000000000000000LL) == 0 && (v1 & 0x8000000000000000LL) == 0 && v1 | v2)
  {
    if (v1) {
      double v3 = (double)v2 / (double)v1;
    }
    else {
      double v3 = 1.0;
    }
  }

  return +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"%lld / %lld (%0.6f)",  v2,  v1,  *(void *)&v3);
}

uint64_t _NSProgressFractionAddFraction(uint64_t result, uint64_t *a2)
{
  uint64_t v2 = a2[1];
  if (v2)
  {
    uint64_t v3 = *(void *)(result + 8);
    if (v3)
    {
      uint64_t v4 = a2[1];
      uint64_t v5 = *(void *)(result + 8);
      do
      {
        uint64_t v6 = v5;
        uint64_t v5 = v4;
        uint64_t v4 = v6 % v4;
      }

      while (v4);
      uint64_t v7 = v3 / v5;
      uint64_t v8 = v7 * v2;
      if ((unsigned __int128)(v7 * (__int128)v2) >> 64 == (v7 * v2) >> 63)
      {
        uint64_t v13 = *(void *)result;
        uint64_t v20 = v8 / v3 * *(void *)result;
        uint64_t v14 = *a2;
        uint64_t v21 = v8 / v2 * *a2;
        BOOL v22 = __OFADD__(v20, v21);
        uint64_t v23 = v20 + v21;
      }

      else
      {
        uint64_t v9 = *(void *)result;
        uint64_t v10 = *(void *)(result + 8);
        uint64_t v11 = *(void *)result;
        do
        {
          uint64_t v12 = v11;
          uint64_t v11 = v10;
          uint64_t v10 = v12 % v10;
        }

        while (v10);
        uint64_t v13 = v9 / v11;
        v3 /= v11;
        *(void *)uint64_t result = v9 / v11;
        *(void *)(result + _Block_object_dispose(va, 8) = v3;
        uint64_t v14 = *a2;
        uint64_t v2 = a2[1];
        if (v2)
        {
          uint64_t v15 = a2[1];
          uint64_t v16 = *a2;
          do
          {
            uint64_t v17 = v16;
            uint64_t v16 = v15;
            uint64_t v15 = v17 % v15;
          }

          while (v15);
          uint64_t v18 = v14 / v16;
          uint64_t v19 = v2 / v16;
        }

        else
        {
          uint64_t v19 = 0LL;
          uint64_t v18 = *a2;
        }

        uint64_t v24 = v19;
        uint64_t v25 = v3;
        do
        {
          uint64_t v26 = v25;
          uint64_t v25 = v24;
          uint64_t v24 = v26 % v24;
        }

        while (v24);
        uint64_t v27 = v3 / v25;
        uint64_t v8 = v3 / v25 * v19;
        uint64_t v28 = v8 / v3 * v13;
        uint64_t v29 = v8 / v19 * v18;
        BOOL v22 = __OFADD__(v28, v29);
        uint64_t v23 = v28 + v29;
      }

      char v30 = v22;
      if ((v30 & 1) == 0)
      {
        *(void *)uint64_t result = v23;
LABEL_39:
        *(void *)(result + _Block_object_dispose(va, 8) = v8;
        return result;
      }

uint64_t _NSProgressFractionSubtractFraction(uint64_t result, uint64_t *a2)
{
  uint64_t v2 = a2[1];
  if (v2)
  {
    uint64_t v3 = *(void *)(result + 8);
    if (v3)
    {
      uint64_t v4 = a2[1];
      uint64_t v5 = *(void *)(result + 8);
      do
      {
        uint64_t v6 = v5;
        uint64_t v5 = v4;
        uint64_t v4 = v6 % v4;
      }

      while (v4);
      uint64_t v7 = v3 / v5;
      uint64_t v8 = v7 * v2;
      if ((unsigned __int128)(v7 * (__int128)v2) >> 64 == (v7 * v2) >> 63)
      {
        uint64_t v13 = *(void *)result;
        uint64_t v20 = v8 / v3 * *(void *)result;
        uint64_t v14 = *a2;
        uint64_t v21 = v8 / v2 * *a2;
        BOOL v22 = __OFSUB__(v20, v21);
        uint64_t v23 = v20 - v21;
      }

      else
      {
        uint64_t v9 = *(void *)result;
        uint64_t v10 = *(void *)(result + 8);
        uint64_t v11 = *(void *)result;
        do
        {
          uint64_t v12 = v11;
          uint64_t v11 = v10;
          uint64_t v10 = v12 % v10;
        }

        while (v10);
        uint64_t v13 = v9 / v11;
        v3 /= v11;
        *(void *)uint64_t result = v9 / v11;
        *(void *)(result + _Block_object_dispose(va, 8) = v3;
        uint64_t v14 = *a2;
        uint64_t v2 = a2[1];
        if (v2)
        {
          uint64_t v15 = a2[1];
          uint64_t v16 = *a2;
          do
          {
            uint64_t v17 = v16;
            uint64_t v16 = v15;
            uint64_t v15 = v17 % v15;
          }

          while (v15);
          uint64_t v18 = v14 / v16;
          uint64_t v19 = v2 / v16;
        }

        else
        {
          uint64_t v19 = 0LL;
          uint64_t v18 = *a2;
        }

        uint64_t v24 = v19;
        uint64_t v25 = v3;
        do
        {
          uint64_t v26 = v25;
          uint64_t v25 = v24;
          uint64_t v24 = v26 % v24;
        }

        while (v24);
        uint64_t v27 = v3 / v25;
        uint64_t v8 = v3 / v25 * v19;
        uint64_t v28 = v8 / v3 * v13;
        uint64_t v29 = v8 / v19 * v18;
        BOOL v22 = __OFSUB__(v28, v29);
        uint64_t v23 = v28 - v29;
      }

      char v30 = v22;
      if ((v30 & 1) == 0)
      {
        *(void *)uint64_t result = v23;
LABEL_39:
        *(void *)(result + _Block_object_dispose(va, 8) = v8;
        return result;
      }

uint64_t *_NSProgressFractionMultiplyByFraction(uint64_t *result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  uint64_t v3 = *result;
  uint64_t v4 = result[1];
  uint64_t v5 = *result * *a2;
  if ((unsigned __int128)(*result * (__int128)*a2) >> 64 == v5 >> 63)
  {
    uint64_t v6 = a2[1];
    uint64_t v7 = v4 * v6;
  }

  if (v4)
  {
    uint64_t v8 = result[1];
    uint64_t v9 = *result;
    do
    {
      uint64_t v10 = v9;
      uint64_t v9 = v8;
      uint64_t v8 = v10 % v8;
    }

    while (v8);
    v3 /= v9;
    uint64_t v11 = v4 / v9;
    *uint64_t result = v3;
    result[1] = v4 / v9;
    uint64_t v2 = *a2;
  }

  else
  {
    uint64_t v11 = 0LL;
  }

  uint64_t v12 = a2[1];
  if (v12)
  {
    uint64_t v13 = a2[1];
    uint64_t v14 = v2;
    do
    {
      uint64_t v15 = v14;
      uint64_t v14 = v13;
      uint64_t v13 = v15 % v13;
    }

    while (v13);
    uint64_t v16 = v2 / v14;
    uint64_t v17 = v12 / v14;
  }

  else
  {
    uint64_t v17 = 0LL;
    uint64_t v16 = v2;
  }

  uint64_t v5 = v3 * v16;
  if ((unsigned __int128)(v3 * (__int128)v16) >> 64 == (v3 * v16) >> 63)
  {
    uint64_t v7 = v11 * v17;
    if ((unsigned __int128)(v11 * (__int128)v17) >> 64 == (v11 * v17) >> 63)
    {
LABEL_35:
      *uint64_t result = v5;
      goto LABEL_36;
    }
  }

  *((_BYTE *)result + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = 1;
  double v18 = 0.0;
  double v19 = 0.0;
  if ((v3 & 0x8000000000000000LL) == 0 && (v11 & 0x8000000000000000LL) == 0 && v3 | v11)
  {
    if (!v11)
    {
      double v19 = 1.0;
      if ((v2 & 0x8000000000000000LL) == 0) {
        goto LABEL_21;
      }
      goto LABEL_32;
    }

    double v19 = (double)v3 / (double)v11;
  }

  if ((v2 & 0x8000000000000000LL) == 0)
  {
LABEL_21:
    BOOL v20 = v12 < 0 || (v12 | v2) == 0;
    char v21 = v20;
    double v18 = 1.0;
    if (v20) {
      double v18 = 0.0;
    }
    if (v12 && (v21 & 1) == 0) {
      double v18 = (double)v2 / (double)v12;
    }
  }

uint64_t sub_1835EF778()
{
  return 0LL;
}

uint64_t sub_1835EF7B8()
{
  return 0LL;
}

uint64_t sub_1835EF7F8()
{
  return 0LL;
}

uint64_t sub_1835EF838()
{
  return 0LL;
}

void sub_1835EFEB4(_Unwind_Exception *a1)
{
}

uint64_t sub_1835F007C()
{
  return 0LL;
}

uint64_t sub_1835F00C4()
{
  return 0LL;
}

uint64_t sub_1835F0178()
{
  return 0LL;
}

void sub_1835F0B88(_Unwind_Exception *exception_object)
{
}

void _filterObjectsUsingPredicate(void *a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v22 = *MEMORY[0x1895F89C0];
  unint64_t v8 = [a1 count];
  uint64_t v9 = (objc_class *)objc_opt_class();
  MethodIMP Implementation = class_getMethodImplementation(v9, sel_evaluateWithObject_);
  if (v8 >> 60)
  {
    CFStringRef v19 = CFStringCreateWithFormat( 0LL,  0LL,  @"*** attempt to create a temporary id buffer which is too large or with a negative count (%lu) -- possibly data is corrupt",  v8);
    BOOL v20 = (void *)[MEMORY[0x189603F70] exceptionWithName:*MEMORY[0x189603A48] reason:v19 userInfo:0];
    CFRelease(v19);
    objc_exception_throw(v20);
  }

  uint64_t v11 = (unsigned int (*)(void, void, void))MethodImplementation;
  if (v8 <= 1) {
    uint64_t v12 = 1LL;
  }
  else {
    uint64_t v12 = v8;
  }
  *(void *)&double v13 = MEMORY[0x1895F8858](v12).n128_u64[0];
  uint64_t v15 = &v21[-v14];
  if (v8 >= 0x101)
  {
    uint64_t v15 = (void *)_CFCreateArrayStorage();
    uint64_t v16 = v15;
  }

  else
  {
    uint64_t v16 = 0LL;
  }

  objc_msgSend(a1, "getObjects:range:", v15, 0, v8, v13);
  for (uint64_t i = 0LL; v8; --v8)
  {
    uint64_t v18 = *v15;
    if (v11(a2, sel_evaluateWithObject_, *v15)) {
      *(void *)(a3 + 8 * i++) = v18;
    }
    ++v15;
  }

  *a4 = i;
  free(v16);
}

void sub_1835F0D5C(_Unwind_Exception *exception_object)
{
}

void sub_1835F0F60(_Unwind_Exception *exception_object)
{
}

void sub_1835F1124(_Unwind_Exception *exception_object)
{
}

void sub_1835F12E8(_Unwind_Exception *exception_object)
{
}

void sub_1835F149C(_Unwind_Exception *exception_object)
{
}

void sub_1835F1660(_Unwind_Exception *exception_object)
{
}

uint64_t sub_1835F1CC8()
{
  return 0LL;
}

uint64_t sub_1835F1E00()
{
  return 0LL;
}

__CFString *_NSIndentSpace(uint64_t a1)
{
  if (!a1) {
    return &stru_189CA6A28;
  }
  uint64_t v1 = a1;
  uint64_t result = &stru_189CA6A28;
  do
  {
    uint64_t result = (__CFString *)-[__CFString stringByAppendingString:](result, "stringByAppendingString:", @"    ");
    --v1;
  }

  while (v1);
  return result;
}

uint64_t _NSFastMultiCStringConcat( uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned __int8 *a9, uint64_t a10)
{
  uint64_t v10 = (_BYTE *)(result - 1);
  while (*++v10)
    ;
  uint64_t v17 = (unsigned __int8 **)&a10;
  for (uint64_t i = a9; i; uint64_t i = *v16)
  {
    int v13 = *i;
    *uint64_t v10 = v13;
    if (v13)
    {
      uint64_t v14 = i + 1;
      do
      {
        int v15 = *v14++;
        *++uint64_t v10 = v15;
      }

      while (v15);
    }

    uint64_t v16 = v17++;
  }

  return result;
}

const char *_NSNameOfClass(objc_class *a1)
{
  if (a1) {
    return class_getName(a1);
  }
  else {
    return "nil";
  }
}

NSString *_NSFullMethodName(objc_class *a1, const char *a2)
{
  v10[1] = *(char **)MEMORY[0x1895F89C0];
  uint64_t v4 = (objc_class *)objc_opt_class();
  v10[0] = 0LL;
  if (v4 == a1) {
    uint64_t v5 = 43LL;
  }
  else {
    uint64_t v5 = 45LL;
  }
  if (v4) {
    SEL Name = class_getName(v4);
  }
  else {
    SEL Name = "nil";
  }
  uint64_t v7 = sel_getName(a2);
  asprintf(v10, "%c[%s %s]", v5, Name, v7);
  if (!v10[0]) {
    return 0LL;
  }
  unint64_t v8 = +[NSString stringWithUTF8String:](&OBJC_CLASS___NSString, "stringWithUTF8String:");
  free(v10[0]);
  return v8;
}

NSString *_NSMethodExceptionProem(objc_class *a1, const char *a2)
{
  v10[1] = *(char **)MEMORY[0x1895F89C0];
  uint64_t v4 = (objc_class *)objc_opt_class();
  v10[0] = 0LL;
  if (v4 == a1) {
    uint64_t v5 = 43LL;
  }
  else {
    uint64_t v5 = 45LL;
  }
  if (v4) {
    SEL Name = class_getName(v4);
  }
  else {
    SEL Name = "nil";
  }
  uint64_t v7 = sel_getName(a2);
  asprintf(v10, "*** %c[%s %s]", v5, Name, v7);
  if (!v10[0]) {
    return 0LL;
  }
  unint64_t v8 = +[NSString stringWithUTF8String:](&OBJC_CLASS___NSString, "stringWithUTF8String:");
  free(v10[0]);
  return v8;
}

BOOL NSBOOLFromString(void *a1)
{
  if ([a1 isEqual:@"YES"]) {
    return 1LL;
  }
  uint64_t v3 = [a1 length];
  uint64_t v2 = 1LL;
  if (objc_msgSend(a1, "compare:options:range:", @"YES", 1, 0, v3))
  {
    uint64_t v2 = 1LL;
    if (objc_msgSend(a1, "compare:options:range:", @"Y", 1, 0, v3)) {
      return [a1 integerValue] != 0;
    }
  }

  return v2;
}

uint64_t _NSCStringToUnsignedLong(char *a1, char **a2)
{
  uint64_t v4 = MEMORY[0x1895F8770];
  do
  {
    while (1)
    {
      unsigned int v6 = *a1++;
      unsigned int v5 = v6;
      if ((v6 & 0x80000000) != 0) {
        break;
      }
      if ((*(_DWORD *)(v4 + 4LL * v5 + 60) & 0x4000) == 0) {
        goto LABEL_6;
      }
    }
  }

  while (__maskrune(v5, 0x4000uLL));
LABEL_6:
  if (v5 == 43 || v5 == 45)
  {
    char v8 = *a1++;
    char v7 = v8;
  }

  else
  {
    char v7 = v5;
  }

  if (v7 == 48)
  {
    if ((*a1 | 0x20) == 0x78)
    {
      char v7 = a1[1];
      a1 += 2;
      unint64_t v9 = 16LL;
    }

    else
    {
      char v7 = 48;
      unint64_t v9 = 8LL;
    }
  }

  else
  {
    unint64_t v9 = 10LL;
  }

  unint64_t v10 = 0LL;
  char v11 = 0;
  unint64_t v12 = 0xFFFFFFFFFFFFFFFFLL / v9;
  for (uint64_t i = a1 - 1; ; ++i)
  {
    unsigned int v14 = v7;
    LODWORD(v15) = v7 - 48;
    if (v15 > 9)
    {
      if ((v14 & 0x80000000) != 0)
      {
        if (!__maskrune(v14, 0x100uLL)) {
          break;
        }
        int v16 = __maskrune(v14, 0x8000uLL);
      }

      else
      {
        if ((*(_DWORD *)(v4 + 4LL * v14 + 60) & 0x100) == 0) {
          break;
        }
        int v16 = *(_DWORD *)(v4 + 4LL * v14 + 60) & 0x8000;
      }

      if (v16) {
        char v17 = -55;
      }
      else {
        char v17 = -87;
      }
      LOBYTE(v15) = v17 + v14;
    }

    if (v11 & 1 | (v10 > v12))
    {
      char v11 = 1;
    }

    else
    {
      unint64_t v15 = (char)v15;
      if (v10 == v12 && v15 > ~(0xFFFFFFFFFFFFFFFFLL / v9 * v9))
      {
        char v11 = 1;
        unint64_t v10 = 0xFFFFFFFFFFFFFFFFLL / v9;
      }

      else
      {
        char v11 = 0;
        unint64_t v10 = v15 + v10 * v9;
      }
    }

    char v18 = i[1];
    char v7 = v18;
  }

  if ((v11 & 1) != 0)
  {
    *__error() = 34;
    uint64_t result = -1LL;
  }

  else if (v5 == 45)
  {
    uint64_t result = -(uint64_t)v10;
  }

  else
  {
    uint64_t result = v10;
  }

  if (a2) {
    *a2 = i;
  }
  return result;
}

uint64_t _NSFoundationBundle()
{
  if (_MergedGlobals_114 != -1) {
    dispatch_once(&_MergedGlobals_114, &__block_literal_global_38);
  }
  return qword_18C496A48;
}

CFStringRef _NSFoundationResourceDirectory()
{
  return @"/";
}

uint64_t _NSIsPList(uint64_t result, int a2, void *a3)
{
  uint64_t v19 = *MEMORY[0x1895F89C0];
  if (result)
  {
    unsigned int v5 = (void *)result;
    if ((_NSIsNSString() & 1) != 0) {
      return 1LL;
    }
    if ((_NSIsNSData() & 1) != 0) {
      return 2LL;
    }
    if ((_NSIsNSNumber() & 1) != 0) {
      return 5LL;
    }
    if ((_NSIsNSDate() & 1) != 0) {
      return 6LL;
    }
    if (a3 && ([a3 containsObject:v5] & 1) != 0) {
      return 0LL;
    }
    if (_NSIsNSArray())
    {
      if (a2)
      {
        [a3 addObject:v5];
        __int128 v17 = 0u;
        __int128 v18 = 0u;
        __int128 v15 = 0u;
        __int128 v16 = 0u;
        uint64_t v6 = [v5 countByEnumeratingWithState:&v15 objects:v14 count:16];
        if (v6)
        {
          uint64_t v7 = v6;
          uint64_t v8 = *(void *)v16;
LABEL_16:
          uint64_t v9 = 0LL;
          while (1)
          {
            if (*(void *)v16 != v8) {
              objc_enumerationMutation(v5);
            }
            if (!_NSIsPList(*(void *)(*((void *)&v15 + 1) + 8 * v9), 1LL, a3)) {
              break;
            }
            if (v7 == ++v9)
            {
              uint64_t v7 = [v5 countByEnumeratingWithState:&v15 objects:v14 count:16];
              if (v7) {
                goto LABEL_16;
              }
              goto LABEL_22;
            }
          }

CFStringRef NSStringFromBOOL(int a1)
{
  if (a1) {
    return @"YES";
  }
  else {
    return @"NO";
  }
}

objc_class *_NSToDoAtProcessStart()
{
  __NSCFStringClass Class = (uint64_t)objc_lookUpClass("__NSCFString");
  __NSMutableStringClass Class = (uint64_t)objc_lookUpClass("NSMutableString");
  class_setSuperclass((Class)__NSCFStringClass, (Class)__NSMutableStringClass);
  int v0 = objc_lookUpClass("NSError");
  uint64_t v1 = objc_lookUpClass("__NSCFError");
  class_setSuperclass(v1, v0);
  uint64_t v2 = objc_lookUpClass("__NSCFCharacterSet");
  uint64_t v3 = objc_lookUpClass("NSMutableCharacterSet");
  class_setSuperclass(v2, v3);
  uint64_t v4 = objc_lookUpClass("__NSCFAttributedString");
  unsigned int v5 = objc_lookUpClass("NSMutableAttributedString");
  class_setSuperclass(v4, v5);
  uint64_t v6 = objc_lookUpClass("NSNumber");
  uint64_t v7 = objc_lookUpClass("__NSCFBoolean");
  class_setSuperclass(v7, v6);
  uint64_t v8 = objc_lookUpClass("__NSCFNumber");
  class_setSuperclass(v8, v6);
  Class v9 = objc_lookUpClass("__CFNotification");
  if (v9)
  {
    int v10 = v9;
    char v11 = objc_lookUpClass("NSNotification");
    class_setSuperclass(v10, v11);
  }

  __NSStringClass Class = (uint64_t)objc_lookUpClass("NSString");
  __NSConcreteValueClass Class = (uint64_t)objc_lookUpClass("NSConcreteValue");
  __NSMutableStringClass Class = (uint64_t)objc_lookUpClass("NSMutableString");
  class_setVersion((Class)__NSStringClass, 1);
  class_setVersion((Class)__NSMutableStringClass, 1);
  uint64_t v12 = objc_lookUpClass("NSTimeZone");
  class_setVersion(v12, 0);
  uint64_t v13 = objc_lookUpClass("NSCountedSet");
  class_setVersion(v13, 1);
  unsigned int v14 = objc_lookUpClass("NSNumberFormatter");
  class_setVersion(v14, 4);
  __int128 v15 = objc_lookUpClass("NSDateFormatter");
  class_setVersion(v15, 41);
  __int128 v16 = objc_lookUpClass("NSAffineTransform");
  class_setVersion(v16, 1);

  uint64_t result = objc_lookUpClass("__SwiftNativeNSError");
  if (result) {
    return class_setSuperclass(result, v0);
  }
  return result;
}

void freeenv(void **a1, uint64_t a2)
{
  if (a2)
  {
    uint64_t v3 = a2;
    uint64_t v4 = a1;
    do
    {
      unsigned int v5 = *v4++;
      free(v5);
      --v3;
    }

    while (v3);
  }

  free(a1);
}

unint64_t _NSProcessInfoGetPowerState()
{
  if (_NSProcessInfoGetPowerState_once != -1) {
    dispatch_once(&_NSProcessInfoGetPowerState_once, &__block_literal_global_144);
  }
  return atomic_load(&_NSProcessInfoGetPowerState_powerState);
}

uint64_t _getCurrentNSHostName()
{
  return objc_msgSend((id)objc_msgSend(MEMORY[0x189601EA8], "currentHost"), "name");
}

uint64_t ___foundation_swift_process_info_enabled_block_invoke()
{
  uint64_t result = _os_feature_enabled_impl();
  if ((result & 1) != 0)
  {
    BOOL v1 = 1;
  }

  else
  {
    uint64_t result = (uint64_t)getenv("NSSwiftProcessInfo");
    BOOL v1 = result != 0;
  }

  byte_18C496A51 = v1;
  return result;
}

unint64_t _NSProcessInfoGetThermalState()
{
  if (_NSProcessInfoGetThermalState_once != -1) {
    dispatch_once(&_NSProcessInfoGetThermalState_once, &__block_literal_global_140);
  }
  return atomic_load(&_NSProcessInfoGetThermalState_currentState);
}

uint64_t NSProcessInfoNotifyThermalState(int a1)
{
  v5[1] = *MEMORY[0x1895F89C0];
  uint64_t result = notify_get_state(a1, v5);
  if ((_DWORD)result)
  {
    do
      __ldaxr(&_NSProcessInfoGetThermalState_currentState);
    while (__stlxr(0xFFFFFFFFFFFFFFFFLL, &_NSProcessInfoGetThermalState_currentState));
  }

  else
  {
    if ((uint64_t)v5[0] <= 29)
    {
      uint64_t v3 = 2LL;
      if (v5[0] != 20) {
        uint64_t v3 = 0LL;
      }
      if (v5[0] == 10) {
        unint64_t v2 = 1LL;
      }
      else {
        unint64_t v2 = v3;
      }
    }

    else if (v5[0] == 30 || v5[0] == 40 || v5[0] == 50)
    {
      unint64_t v2 = 3LL;
    }

    else
    {
      unint64_t v2 = 0LL;
    }

    uint64_t result = +[_NSSwiftProcessInfo updateThermalState:](&OBJC_CLASS____NSSwiftProcessInfo, "updateThermalState:");
    do
      unint64_t v4 = __ldaxr(&_NSProcessInfoGetThermalState_currentState);
    while (__stlxr(v2, &_NSProcessInfoGetThermalState_currentState));
    if (v4 != v2) {
      return -[NSNotificationCenter postNotificationName:object:]( +[NSNotificationCenter defaultCenter](&OBJC_CLASS___NSNotificationCenter, "defaultCenter"),  "postNotificationName:object:",  @"NSProcessInfoThermalStateDidChangeNotification",  +[NSProcessInfo processInfo](&OBJC_CLASS___NSProcessInfo, "processInfo"));
    }
  }

  return result;
}

uint64_t NSProcessInfoNotifyPowerState(int a1)
{
  v4[1] = *MEMORY[0x1895F89C0];
  uint64_t result = notify_get_state(a1, v4);
  if ((_DWORD)result)
  {
    do
      __ldaxr(&_NSProcessInfoGetPowerState_powerState);
    while (__stlxr(0xFFFFFFFFFFFFFFFFLL, &_NSProcessInfoGetPowerState_powerState));
  }

  else
  {
    unint64_t v2 = v4[0] != 0;
    uint64_t result = +[_NSSwiftProcessInfo updatePowerState:](&OBJC_CLASS____NSSwiftProcessInfo, "updatePowerState:");
    do
      unint64_t v3 = __ldaxr(&_NSProcessInfoGetPowerState_powerState);
    while (__stlxr(v2, &_NSProcessInfoGetPowerState_powerState));
    if (v3 != v2) {
      return -[NSNotificationCenter postNotificationName:object:]( +[NSNotificationCenter defaultCenter](&OBJC_CLASS___NSNotificationCenter, "defaultCenter"),  "postNotificationName:object:",  @"NSProcessInfoPowerStateDidChangeNotification",  +[NSProcessInfo processInfo](&OBJC_CLASS___NSProcessInfo, "processInfo"));
    }
  }

  return result;
}

uint64_t __NSPropertyListClasses_ForArchival_ErrorAndException()
{
  if (qword_18C496A80 != -1) {
    dispatch_once(&qword_18C496A80, &__block_literal_global_40);
  }
  return _MergedGlobals_116;
}

uint64_t _ASCII_recognize(void *a1, uint64_t a2, uint64_t a3, void *a4)
{
  a1[4] += a3;
  uint64_t v8 = [a1 maxSkipBytes];
  if (a3)
  {
    unint64_t v9 = v8;
    uint64_t v10 = 0LL;
    do
    {
      while (1)
      {
        unsigned __int8 v11 = *(_BYTE *)(a2 + v10);
        if ((v11 - 32) >= 0x5Fu
          && (*(unsigned __int8 *)(a2 + v10) > 0xDu || ((1 << v11) & 0x3700) == 0))
        {
          break;
        }

        ++a1[17];
        [a4 appendByte:v11];
        if (++v10 == a3) {
          goto LABEL_15;
        }
      }

      [a4 appendPlaceholder];
      unint64_t v13 = a1[8] + 1LL;
      a1[8] = v13;
      ++v10;
    }

    while (v13 <= v9 && v10 != a3);
  }

uint64_t _BigE_recognize(uint64_t a1, uint64_t a2, unint64_t a3, void *a4)
{
  uint64_t v27 = *MEMORY[0x1895F89C0];
  *(void *)(a1 + 32) += a3;
  uint64_t v8 = [(id)a1 maxSkipBytes];
  if (a3)
  {
    unint64_t v9 = v8;
    unint64_t v10 = 0LL;
    int v24 = 0;
    contentsDeallocator = (const __CFAllocator *)*MEMORY[0x189604DC8];
    while (1)
    {
      unint64_t v11 = v10;
      while (1)
      {
        unsigned __int8 v12 = *(_BYTE *)(a2 + v11);
        if ((v12 - 32) >= 0x5Fu
          && (*(unsigned __int8 *)(a2 + v11) > 0xDu || ((1 << v12) & 0x3700) == 0))
        {
          break;
        }

        ++v11;
        ++*(void *)(a1 + 56);
        [a4 appendByte:v12];
        if (v11 >= a3) {
          goto LABEL_36;
        }
      }

      unint64_t v10 = v11 + 1;
      if (v11 + 1 >= a3) {
        goto LABEL_34;
      }
      unsigned int v14 = *(unsigned __int8 *)(a2 + v11 + 1);
      unsigned int v15 = (v12 + 95);
      if ((v15 > 0x5D || v14 < 0x40 || v14 >= 0x7F)
        && (v15 > 0x5D || v14 < 0xA1 || v14 == 255)
        && ((v12 + 114) > 0x12u || v14 < 0x40 || v14 == 255)
        && ((v12 + 127) > 5u || v14 < 0x40 || v14 >= 0xE0))
      {
        goto LABEL_34;
      }

      unsigned int v20 = *(unsigned __int8 *)(a2 + v11 + 1);
      char v21 = (void *)qword_18C496A90;
      __int128 v16 = CFStringCreateWithBytesNoCopy( 0LL,  (const UInt8 *)(a2 + v11),  2LL,  *(_DWORD *)(a1 + 24),  0,  contentsDeallocator);
      if (!v16) {
        break;
      }
      CFTypeRef cf = v16;
      CharacterAtIndedouble x = CFStringGetCharacterAtIndex(v16, 0LL);
      if ([v21 indexForKey:&CharacterAtIndex length:1] != 0x7FFFFFFFFFFFFFFFLL) {
        ++*(void *)(a1 + 80);
      }
      CFRelease(cf);
      int v22 = CharacterAtIndex;
      if (!CharacterAtIndex) {
        break;
      }
      if (v24)
      {
        v26[0] = v24;
        v26[1] = CharacterAtIndex;
        if ([(id)qword_18C496A98 indexForKey:v26 length:2] != 0x7FFFFFFFFFFFFFFFLL) {
          ++*(void *)(a1 + 88);
        }
      }

      unint64_t v10 = v11 + 2;
      ++*(void *)(a1 + 48);
      [a4 appendByte1:v12 byte2:v20];
      int v24 = v22;
LABEL_35:
      if (v10 >= a3) {
        goto LABEL_36;
      }
    }

    int v24 = 0;
LABEL_34:
    [a4 appendPlaceholder];
    ++*(void *)(a1 + 96);
    unint64_t v17 = *(void *)(a1 + 64) + 1LL;
    *(void *)(a1 + 64) = v17;
    if (v17 > v9) {
      goto LABEL_36;
    }
    goto LABEL_35;
  }

uint64_t _Big5HKSCS_recognize(uint64_t a1, uint64_t a2, unint64_t a3, void *a4)
{
  uint64_t v26 = *MEMORY[0x1895F89C0];
  *(void *)(a1 + 32) += a3;
  uint64_t v8 = [(id)a1 maxSkipBytes];
  if (a3)
  {
    unint64_t v9 = v8;
    unint64_t v10 = 0LL;
    int v23 = 0;
    contentsDeallocator = (const __CFAllocator *)*MEMORY[0x189604DC8];
    while (1)
    {
      unint64_t v11 = v10;
      while (1)
      {
        unsigned __int8 v12 = *(_BYTE *)(a2 + v11);
        if ((v12 - 32) >= 0x5Fu
          && (*(unsigned __int8 *)(a2 + v11) > 0xDu || ((1 << v12) & 0x3700) == 0))
        {
          break;
        }

        ++v11;
        ++*(void *)(a1 + 56);
        [a4 appendByte:v12];
        if (v11 >= a3) {
          goto LABEL_26;
        }
      }

      unint64_t v10 = v11 + 1;
      if (v11 + 1 >= a3) {
        goto LABEL_24;
      }
      int v14 = *(unsigned __int8 *)(a2 + v11 + 1);
      unsigned int v19 = *(unsigned __int8 *)(a2 + v11 + 1);
      unsigned int v20 = (void *)qword_18C496A90;
      unsigned int v15 = CFStringCreateWithBytesNoCopy( 0LL,  (const UInt8 *)(a2 + v11),  2LL,  *(_DWORD *)(a1 + 24),  0,  contentsDeallocator);
      if (!v15) {
        break;
      }
      CFTypeRef cf = v15;
      CharacterAtIndedouble x = CFStringGetCharacterAtIndex(v15, 0LL);
      if ([v20 indexForKey:&CharacterAtIndex length:1] != 0x7FFFFFFFFFFFFFFFLL) {
        ++*(void *)(a1 + 80);
      }
      CFRelease(cf);
      int v21 = CharacterAtIndex;
      if (!CharacterAtIndex) {
        break;
      }
      if (v23)
      {
        v25[0] = v23;
        v25[1] = CharacterAtIndex;
        if ([(id)qword_18C496A98 indexForKey:v25 length:2] != 0x7FFFFFFFFFFFFFFFLL) {
          ++*(void *)(a1 + 88);
        }
      }

      unint64_t v10 = v11 + 2;
      ++*(void *)(a1 + 48);
      [a4 appendByte1:v12 byte2:v19];
      int v23 = v21;
LABEL_25:
      if (v10 >= a3) {
        goto LABEL_26;
      }
    }

    int v23 = 0;
LABEL_24:
    [a4 appendPlaceholder];
    ++*(void *)(a1 + 96);
    unint64_t v16 = *(void *)(a1 + 64) + 1LL;
    *(void *)(a1 + 64) = v16;
    if (v16 > v9) {
      goto LABEL_26;
    }
    goto LABEL_25;
  }

uint64_t _Big5_recognize(uint64_t a1, uint64_t a2, unint64_t a3, void *a4)
{
  uint64_t v26 = *MEMORY[0x1895F89C0];
  *(void *)(a1 + 32) += a3;
  uint64_t v8 = [(id)a1 maxSkipBytes];
  if (a3)
  {
    unint64_t v9 = v8;
    unint64_t v10 = 0LL;
    int v23 = 0;
    contentsDeallocator = (const __CFAllocator *)*MEMORY[0x189604DC8];
    while (1)
    {
      unint64_t v11 = v10;
      while (1)
      {
        unsigned __int8 v12 = *(_BYTE *)(a2 + v11);
        if ((v12 - 32) >= 0x5Fu
          && (*(unsigned __int8 *)(a2 + v11) > 0xDu || ((1 << v12) & 0x3700) == 0))
        {
          break;
        }

        ++v11;
        ++*(void *)(a1 + 56);
        [a4 appendByte:v12];
        if (v11 >= a3) {
          goto LABEL_26;
        }
      }

      unint64_t v10 = v11 + 1;
      if (v11 + 1 >= a3) {
        goto LABEL_24;
      }
      int v14 = *(unsigned __int8 *)(a2 + v11 + 1);
      unsigned int v19 = *(unsigned __int8 *)(a2 + v11 + 1);
      unsigned int v20 = (void *)qword_18C496A90;
      unsigned int v15 = CFStringCreateWithBytesNoCopy( 0LL,  (const UInt8 *)(a2 + v11),  2LL,  *(_DWORD *)(a1 + 24),  0,  contentsDeallocator);
      if (!v15) {
        break;
      }
      CFTypeRef cf = v15;
      CharacterAtIndedouble x = CFStringGetCharacterAtIndex(v15, 0LL);
      if ([v20 indexForKey:&CharacterAtIndex length:1] != 0x7FFFFFFFFFFFFFFFLL) {
        ++*(void *)(a1 + 80);
      }
      CFRelease(cf);
      int v21 = CharacterAtIndex;
      if (!CharacterAtIndex) {
        break;
      }
      if (v23)
      {
        v25[0] = v23;
        v25[1] = CharacterAtIndex;
        if ([(id)qword_18C496A98 indexForKey:v25 length:2] != 0x7FFFFFFFFFFFFFFFLL) {
          ++*(void *)(a1 + 88);
        }
      }

      unint64_t v10 = v11 + 2;
      ++*(void *)(a1 + 48);
      [a4 appendByte1:v12 byte2:v19];
      int v23 = v21;
LABEL_25:
      if (v10 >= a3) {
        goto LABEL_26;
      }
    }

    int v23 = 0;
LABEL_24:
    [a4 appendPlaceholder];
    ++*(void *)(a1 + 96);
    unint64_t v16 = *(void *)(a1 + 64) + 1LL;
    *(void *)(a1 + 64) = v16;
    if (v16 > v9) {
      goto LABEL_26;
    }
    goto LABEL_25;
  }

uint64_t _WINDOWS936_recognize(uint64_t a1, uint64_t a2, unint64_t a3, void *a4)
{
  uint64_t v26 = *MEMORY[0x1895F89C0];
  *(void *)(a1 + 32) += a3;
  uint64_t v8 = [(id)a1 maxSkipBytes];
  if (a3)
  {
    unint64_t v9 = v8;
    unint64_t v10 = 0LL;
    int v23 = 0;
    contentsDeallocator = (const __CFAllocator *)*MEMORY[0x189604DC8];
    while (1)
    {
      unint64_t v11 = v10;
      while (1)
      {
        unsigned __int8 v12 = *(_BYTE *)(a2 + v11);
        if ((v12 - 32) >= 0x61u
          && (*(unsigned __int8 *)(a2 + v11) > 0xDu || ((1 << v12) & 0x3700) == 0))
        {
          break;
        }

        ++v11;
        ++*(void *)(a1 + 56);
        [a4 appendByte:v12];
        if (v11 >= a3) {
          goto LABEL_26;
        }
      }

      unint64_t v10 = v11 + 1;
      if (v11 + 1 >= a3) {
        goto LABEL_24;
      }
      unsigned int v14 = *(unsigned __int8 *)(a2 + v11 + 1);
      if (v14 < 0x40 || v14 == 255) {
        goto LABEL_24;
      }
      unsigned int v19 = *(unsigned __int8 *)(a2 + v11 + 1);
      unsigned int v20 = (void *)qword_18C496A90;
      unsigned int v15 = CFStringCreateWithBytesNoCopy( 0LL,  (const UInt8 *)(a2 + v11),  2LL,  *(_DWORD *)(a1 + 24),  0,  contentsDeallocator);
      if (!v15) {
        break;
      }
      CFTypeRef cf = v15;
      CharacterAtIndedouble x = CFStringGetCharacterAtIndex(v15, 0LL);
      if ([v20 indexForKey:&CharacterAtIndex length:1] != 0x7FFFFFFFFFFFFFFFLL) {
        ++*(void *)(a1 + 80);
      }
      CFRelease(cf);
      int v21 = CharacterAtIndex;
      if (!CharacterAtIndex) {
        break;
      }
      if (v23)
      {
        v25[0] = v23;
        v25[1] = CharacterAtIndex;
        if ([(id)qword_18C496A98 indexForKey:v25 length:2] != 0x7FFFFFFFFFFFFFFFLL) {
          ++*(void *)(a1 + 88);
        }
      }

      unint64_t v10 = v11 + 2;
      ++*(void *)(a1 + 48);
      [a4 appendByte1:v12 byte2:v19];
      int v23 = v21;
LABEL_25:
      if (v10 >= a3) {
        goto LABEL_26;
      }
    }

    int v23 = 0;
LABEL_24:
    [a4 appendPlaceholder];
    ++*(void *)(a1 + 96);
    unint64_t v16 = *(void *)(a1 + 64) + 1LL;
    *(void *)(a1 + 64) = v16;
    if (v16 > v9) {
      goto LABEL_26;
    }
    goto LABEL_25;
  }

uint64_t _WINDOWS950_recognize(uint64_t a1, uint64_t a2, unint64_t a3, void *a4)
{
  uint64_t v26 = *MEMORY[0x1895F89C0];
  *(void *)(a1 + 32) += a3;
  uint64_t v8 = [(id)a1 maxSkipBytes];
  if (a3)
  {
    unint64_t v9 = v8;
    unint64_t v10 = 0LL;
    int v23 = 0;
    contentsDeallocator = (const __CFAllocator *)*MEMORY[0x189604DC8];
    while (1)
    {
      unint64_t v11 = v10;
      while (1)
      {
        unsigned __int8 v12 = *(_BYTE *)(a2 + v11);
        if ((v12 - 32) >= 0x5Fu
          && (*(unsigned __int8 *)(a2 + v11) > 0xDu || ((1 << v12) & 0x3700) == 0))
        {
          break;
        }

        ++v11;
        ++*(void *)(a1 + 56);
        [a4 appendByte:v12];
        if (v11 >= a3) {
          goto LABEL_27;
        }
      }

      unint64_t v10 = v11 + 1;
      if (v11 + 1 >= a3) {
        goto LABEL_25;
      }
      unsigned int v14 = *(unsigned __int8 *)(a2 + v11 + 1);
      if (v14 < 0x40 || v14 == 255) {
        goto LABEL_25;
      }
      unsigned int v19 = *(unsigned __int8 *)(a2 + v11 + 1);
      unsigned int v20 = (void *)qword_18C496A90;
      unsigned int v15 = CFStringCreateWithBytesNoCopy( 0LL,  (const UInt8 *)(a2 + v11),  2LL,  *(_DWORD *)(a1 + 24),  0,  contentsDeallocator);
      if (!v15) {
        break;
      }
      CFTypeRef cf = v15;
      CharacterAtIndedouble x = CFStringGetCharacterAtIndex(v15, 0LL);
      if ([v20 indexForKey:&CharacterAtIndex length:1] != 0x7FFFFFFFFFFFFFFFLL) {
        ++*(void *)(a1 + 80);
      }
      CFRelease(cf);
      int v21 = CharacterAtIndex;
      if (!CharacterAtIndex) {
        break;
      }
      if (v23)
      {
        v25[0] = v23;
        v25[1] = CharacterAtIndex;
        if ([(id)qword_18C496A98 indexForKey:v25 length:2] != 0x7FFFFFFFFFFFFFFFLL) {
          ++*(void *)(a1 + 88);
        }
      }

      unint64_t v10 = v11 + 2;
      ++*(void *)(a1 + 48);
      [a4 appendByte1:v12 byte2:v19];
      int v23 = v21;
LABEL_26:
      if (v10 >= a3) {
        goto LABEL_27;
      }
    }

    int v23 = 0;
LABEL_25:
    [a4 appendPlaceholder];
    ++*(void *)(a1 + 96);
    unint64_t v16 = *(void *)(a1 + 64) + 1LL;
    *(void *)(a1 + 64) = v16;
    if (v16 > v9) {
      goto LABEL_27;
    }
    goto LABEL_26;
  }

uint64_t _WINDOWS932_recognize(uint64_t a1, uint64_t a2, unint64_t a3, void *a4)
{
  uint64_t v26 = *MEMORY[0x1895F89C0];
  *(void *)(a1 + 32) += a3;
  uint64_t v8 = [(id)a1 maxSkipBytes];
  if (a3)
  {
    unint64_t v9 = v8;
    unint64_t v10 = 0LL;
    int v23 = 0;
    contentsDeallocator = (const __CFAllocator *)*MEMORY[0x189604DC8];
    while (1)
    {
      unint64_t v11 = v10;
      while (1)
      {
        unsigned __int8 v12 = *(_BYTE *)(a2 + v11);
        if ((v12 - 32) >= 0x5Fu
          && (v12 + 95) >= 0x3Fu
          && (*(unsigned __int8 *)(a2 + v11) > 0xDu || ((1 << v12) & 0x3700) == 0))
        {
          break;
        }

        ++v11;
        ++*(void *)(a1 + 56);
        [a4 appendByte:v12];
        if (v11 >= a3) {
          goto LABEL_29;
        }
      }

      unint64_t v10 = v11 + 1;
      if (v11 + 1 >= a3) {
        goto LABEL_27;
      }
      int v14 = *(char *)(a2 + v11 + 1);
      bytes[0] = *(_BYTE *)(a2 + v11);
      unsigned __int8 v19 = v14;
      bytes[1] = v14;
      unsigned int v20 = (void *)qword_18C496AA0;
      unsigned int v15 = CFStringCreateWithBytesNoCopy(0LL, bytes, 2LL, *(_DWORD *)(a1 + 24), 0, contentsDeallocator);
      if (!v15) {
        break;
      }
      CFTypeRef cf = v15;
      v25[0] = CFStringGetCharacterAtIndex(v15, 0LL);
      if ([v20 indexForKey:v25 length:1] != 0x7FFFFFFFFFFFFFFFLL) {
        ++*(void *)(a1 + 80);
      }
      CFRelease(cf);
      int v21 = v25[0];
      if (!v25[0]) {
        break;
      }
      if (v23)
      {
        v25[0] = v23;
        v25[1] = v21;
        if ([(id)qword_18C496AA8 indexForKey:v25 length:2] != 0x7FFFFFFFFFFFFFFFLL) {
          ++*(void *)(a1 + 88);
        }
      }

      unint64_t v10 = v11 + 2;
      ++*(void *)(a1 + 48);
      [a4 appendByte1:v12 byte2:v19];
      int v23 = v21;
LABEL_28:
      if (v10 >= a3) {
        goto LABEL_29;
      }
    }

    int v23 = 0;
LABEL_27:
    [a4 appendPlaceholder];
    ++*(void *)(a1 + 96);
    unint64_t v16 = *(void *)(a1 + 64) + 1LL;
    *(void *)(a1 + 64) = v16;
    if (v16 > v9) {
      goto LABEL_29;
    }
    goto LABEL_28;
  }

uint64_t _WINDOWS949_recognize(uint64_t a1, uint64_t a2, unint64_t a3, void *a4)
{
  uint64_t v26 = *MEMORY[0x1895F89C0];
  *(void *)(a1 + 32) += a3;
  uint64_t v8 = [(id)a1 maxSkipBytes];
  if (a3)
  {
    unint64_t v9 = v8;
    unint64_t v10 = 0LL;
    int v23 = 0;
    contentsDeallocator = (const __CFAllocator *)*MEMORY[0x189604DC8];
    while (1)
    {
      unint64_t v11 = v10;
      while (1)
      {
        unsigned __int8 v12 = *(_BYTE *)(a2 + v11);
        if ((v12 - 32) >= 0x5Fu
          && (*(unsigned __int8 *)(a2 + v11) > 0xDu || ((1 << v12) & 0x3700) == 0))
        {
          break;
        }

        ++v11;
        ++*(void *)(a1 + 56);
        [a4 appendByte:v12];
        if (v11 >= a3) {
          goto LABEL_26;
        }
      }

      unint64_t v10 = v11 + 1;
      if (v11 + 1 >= a3) {
        goto LABEL_24;
      }
      unsigned int v14 = *(unsigned __int8 *)(a2 + v11 + 1);
      if (v14 < 0x41 || v14 == 255) {
        goto LABEL_24;
      }
      unsigned int v19 = *(unsigned __int8 *)(a2 + v11 + 1);
      unsigned int v20 = (void *)qword_18C496AB0;
      unsigned int v15 = CFStringCreateWithBytesNoCopy( 0LL,  (const UInt8 *)(a2 + v11),  2LL,  *(_DWORD *)(a1 + 24),  0,  contentsDeallocator);
      if (!v15) {
        break;
      }
      CFTypeRef cf = v15;
      CharacterAtIndedouble x = CFStringGetCharacterAtIndex(v15, 0LL);
      if ([v20 indexForKey:&CharacterAtIndex length:1] != 0x7FFFFFFFFFFFFFFFLL) {
        ++*(void *)(a1 + 80);
      }
      CFRelease(cf);
      int v21 = CharacterAtIndex;
      if (!CharacterAtIndex) {
        break;
      }
      if (v23)
      {
        v25[0] = v23;
        v25[1] = CharacterAtIndex;
        if ([(id)qword_18C496AB8 indexForKey:v25 length:2] != 0x7FFFFFFFFFFFFFFFLL) {
          ++*(void *)(a1 + 88);
        }
      }

      unint64_t v10 = v11 + 2;
      ++*(void *)(a1 + 48);
      [a4 appendByte1:v12 byte2:v19];
      int v23 = v21;
LABEL_25:
      if (v10 >= a3) {
        goto LABEL_26;
      }
    }

    int v23 = 0;
LABEL_24:
    [a4 appendPlaceholder];
    ++*(void *)(a1 + 96);
    unint64_t v16 = *(void *)(a1 + 64) + 1LL;
    *(void *)(a1 + 64) = v16;
    if (v16 > v9) {
      goto LABEL_26;
    }
    goto LABEL_25;
  }

uint64_t _WINDOWS874_recognize(void *a1, char *a2, uint64_t a3, void *a4)
{
  uint64_t v5 = a3;
  uint64_t v19 = *MEMORY[0x1895F89C0];
  a1[4] += a3;
  unint64_t v17 = [a1 maxSkipBytes];
  if (v5)
  {
    unsigned __int8 v8 = 0;
    unsigned __int8 v9 = 0;
    do
    {
      int v11 = *a2++;
      unsigned __int8 v10 = v11;
      uint64_t v12 = v11;
      if (v11 < 0)
      {
      }

      else if (v12 > 0x1F)
      {
        if (v12 < 0x7F)
        {
LABEL_13:
          ++a1[17];
          if (v8 > 0x7Eu || v9 >= 0x7Fu) {
            goto LABEL_21;
          }
        }

        else
        {
LABEL_20:
          ++a1[18];
LABEL_21:
          v18[0] = v9;
          v18[1] = v8;
          void v18[2] = v12;
          if ([(id)qword_18C496AC0 indexForBytes:v18 length:3] != 0x7FFFFFFFFFFFFFFFLL) {
            ++a1[16];
          }
        }

        [a4 appendByte:v12];
        goto LABEL_24;
      }

      [a4 appendPlaceholder];
      unint64_t v15 = a1[8] + 1LL;
      a1[8] = v15;
      if (v15 > v17) {
        break;
      }
      unsigned __int8 v8 = 0;
      LOBYTE(v12) = 0;
LABEL_24:
      unsigned __int8 v9 = v8;
      unsigned __int8 v8 = v12;
      --v5;
    }

    while (v5);
  }

  a1[12] = a1[8];
  uint64_t result = a1[18] + a1[17];
  a1[5] = result;
  return result;
}

uint64_t _EUCGB2312_recognize(uint64_t a1, uint64_t a2, unint64_t a3, void *a4)
{
  uint64_t v26 = *MEMORY[0x1895F89C0];
  *(void *)(a1 + 32) += a3;
  uint64_t v8 = [(id)a1 maxSkipBytes];
  if (a3)
  {
    unint64_t v9 = v8;
    unint64_t v10 = 0LL;
    int v23 = 0;
    contentsDeallocator = (const __CFAllocator *)*MEMORY[0x189604DC8];
    while (1)
    {
      unint64_t v11 = v10;
      while (1)
      {
        unsigned __int8 v12 = *(_BYTE *)(a2 + v11);
        if ((v12 - 32) >= 0x5Fu
          && (*(unsigned __int8 *)(a2 + v11) > 0xDu || ((1 << v12) & 0x3700) == 0))
        {
          break;
        }

        ++v11;
        ++*(void *)(a1 + 56);
        [a4 appendByte:v12];
        if (v11 >= a3) {
          goto LABEL_26;
        }
      }

      unint64_t v10 = v11 + 1;
      if (v11 + 1 >= a3) {
        goto LABEL_24;
      }
      unsigned int v14 = *(unsigned __int8 *)(a2 + v11 + 1);
      if (v14 < 0xA1 || v14 == 255) {
        goto LABEL_24;
      }
      unsigned int v19 = *(unsigned __int8 *)(a2 + v11 + 1);
      unsigned int v20 = (void *)qword_18C496A90;
      unint64_t v15 = CFStringCreateWithBytesNoCopy( 0LL,  (const UInt8 *)(a2 + v11),  2LL,  *(_DWORD *)(a1 + 24),  0,  contentsDeallocator);
      if (!v15) {
        break;
      }
      CFTypeRef cf = v15;
      CharacterAtIndedouble x = CFStringGetCharacterAtIndex(v15, 0LL);
      if ([v20 indexForKey:&CharacterAtIndex length:1] != 0x7FFFFFFFFFFFFFFFLL) {
        ++*(void *)(a1 + 80);
      }
      CFRelease(cf);
      int v21 = CharacterAtIndex;
      if (!CharacterAtIndex) {
        break;
      }
      if (v23)
      {
        v25[0] = v23;
        v25[1] = CharacterAtIndex;
        if ([(id)qword_18C496A98 indexForKey:v25 length:2] != 0x7FFFFFFFFFFFFFFFLL) {
          ++*(void *)(a1 + 88);
        }
      }

      unint64_t v10 = v11 + 2;
      ++*(void *)(a1 + 48);
      [a4 appendByte1:v12 byte2:v19];
      int v23 = v21;
LABEL_25:
      if (v10 >= a3) {
        goto LABEL_26;
      }
    }

    int v23 = 0;
LABEL_24:
    [a4 appendPlaceholder];
    ++*(void *)(a1 + 96);
    unint64_t v16 = *(void *)(a1 + 64) + 1LL;
    *(void *)(a1 + 64) = v16;
    if (v16 > v9) {
      goto LABEL_26;
    }
    goto LABEL_25;
  }

uint64_t _EUCJP_recognize(uint64_t a1, uint64_t a2, unint64_t a3, void *a4)
{
  uint64_t v39 = *MEMORY[0x1895F89C0];
  *(void *)(a1 + 32) += a3;
  unint64_t v33 = [(id)a1 maxSkipBytes];
  if (a3)
  {
    unint64_t v8 = 0LL;
    uint64_t v9 = 0LL;
    LOBYTE(v32) = 0;
    contentsDeallocator = (const __CFAllocator *)*MEMORY[0x189604DC8];
    uint64_t v10 = a2 + 1;
    do
    {
      unint64_t v11 = v8;
      while (1)
      {
        unsigned __int8 v12 = *(_BYTE *)(v10 + v11 - 1);
        if ((v12 - 32) >= 0x5Fu
          && (*(unsigned __int8 *)(v10 + v11 - 1) > 0xDu || ((1 << v12) & 0x3700) == 0))
        {
          break;
        }

        ++v11;
        ++*(void *)(a1 + 56);
        [a4 appendByte:v12];
        if (v11 >= a3) {
          goto LABEL_52;
        }
      }

      unint64_t v8 = v11 + 1;
      if (v11 + 1 >= a3) {
        goto LABEL_34;
      }
      unsigned int v14 = *(unsigned __int8 *)(v10 + v11);
      unsigned int v32 = v14;
      if ((v12 + 95) <= 0x5Du && v14 >= 0xA1 && v14 != 255)
      {
        UInt8 bytes = *(_BYTE *)(v10 + v11 - 1);
        char v35 = v14;
        uint64_t v27 = (void *)qword_18C496AA0;
        unint64_t v15 = CFStringCreateWithBytesNoCopy(0LL, &bytes, 2LL, *(_DWORD *)(a1 + 24), 0, contentsDeallocator);
        if (!v15) {
          goto LABEL_49;
        }
        CFTypeRef cf = v15;
        CharacterAtIndedouble x = CFStringGetCharacterAtIndex(v15, 0LL);
        if ([v27 indexForKey:&CharacterAtIndex length:1] != 0x7FFFFFFFFFFFFFFFLL) {
          ++*(void *)(a1 + 80);
        }
        CFRelease(cf);
        unsigned int v28 = CharacterAtIndex;
        if (!CharacterAtIndex) {
          goto LABEL_49;
        }
        if ((_DWORD)v9)
        {
          CharacterAtIndedouble x = v9;
          __int16 v38 = v28;
          if ([(id)qword_18C496AA8 indexForKey:&CharacterAtIndex length:2] != 0x7FFFFFFFFFFFFFFFLL) {
            ++*(void *)(a1 + 88);
          }
        }

        ++*(void *)(a1 + 48);
        unint64_t v8 = v11 + 2;
        [a4 appendByte1:v12 byte2:v32];
        uint64_t v16 = v28;
        goto LABEL_51;
      }

      if (*(unsigned __int8 *)(v10 + v11 - 1) == 142 && v14 >= 0xA1 && v14 <= 0xDF)
      {
        UInt8 bytes = -114;
        char v35 = v14;
        uint64_t v29 = (void *)qword_18C496AA0;
        unint64_t v17 = CFStringCreateWithBytesNoCopy(0LL, &bytes, 2LL, *(_DWORD *)(a1 + 24), 0, contentsDeallocator);
        if (!v17) {
          goto LABEL_49;
        }
        __int128 v18 = v17;
        CharacterAtIndedouble x = CFStringGetCharacterAtIndex(v17, 0LL);
        if ([v29 indexForKey:&CharacterAtIndex length:1] != 0x7FFFFFFFFFFFFFFFLL) {
          ++*(void *)(a1 + 80);
        }
        CFRelease(v18);
        uint64_t v16 = CharacterAtIndex;
        if (!CharacterAtIndex) {
          goto LABEL_49;
        }
        if ((_DWORD)v9)
        {
          CharacterAtIndedouble x = v9;
          __int16 v38 = v16;
          if ([(id)qword_18C496AA8 indexForKey:&CharacterAtIndex length:2] != 0x7FFFFFFFFFFFFFFFLL) {
            ++*(void *)(a1 + 88);
          }
        }

        ++*(void *)(a1 + 48);
        unint64_t v8 = v11 + 2;
        [a4 appendByte1:142 byte2:v32];
      }

      else
      {
LABEL_34:
        unsigned int v20 = *(unsigned __int8 *)(v10 + v11 + 1);
        if (v20 < 0xA1 || v20 == 255) {
          goto LABEL_50;
        }
        UInt8 bytes = -113;
        char v35 = v32;
        unsigned int cfa = v20;
        char v36 = v20;
        char v30 = (void *)qword_18C496AA0;
        int v21 = CFStringCreateWithBytesNoCopy(0LL, &bytes, 3LL, *(_DWORD *)(a1 + 24), 0, contentsDeallocator);
        if (!v21) {
          goto LABEL_49;
        }
        int v22 = v21;
        CharacterAtIndedouble x = CFStringGetCharacterAtIndex(v21, 0LL);
        if ([v30 indexForKey:&CharacterAtIndex length:1] != 0x7FFFFFFFFFFFFFFFLL) {
          ++*(void *)(a1 + 80);
        }
        CFRelease(v22);
        uint64_t v16 = CharacterAtIndex;
        if (!CharacterAtIndex)
        {
LABEL_49:
          uint64_t v9 = 0LL;
LABEL_50:
          [a4 appendPlaceholder];
          ++*(void *)(a1 + 96);
          unint64_t v23 = *(void *)(a1 + 64) + 1LL;
          *(void *)(a1 + 64) = v23;
          uint64_t v16 = v9;
          if (v23 > v33) {
            break;
          }
          goto LABEL_51;
        }

        if ((_DWORD)v9)
        {
          CharacterAtIndedouble x = v9;
          __int16 v38 = v16;
          if ([(id)qword_18C496AA8 indexForKey:&CharacterAtIndex length:2] != 0x7FFFFFFFFFFFFFFFLL) {
            ++*(void *)(a1 + 88);
          }
        }

        ++*(void *)(a1 + 48);
        unint64_t v8 = v11 + 3;
        [a4 appendByte1:143 byte2:v32 byte3:cfa];
      }

uint64_t _EUCKR_recognize(uint64_t a1, uint64_t a2, unint64_t a3, void *a4)
{
  uint64_t v26 = *MEMORY[0x1895F89C0];
  *(void *)(a1 + 32) += a3;
  uint64_t v8 = [(id)a1 maxSkipBytes];
  if (a3)
  {
    unint64_t v9 = v8;
    unint64_t v10 = 0LL;
    int v23 = 0;
    contentsDeallocator = (const __CFAllocator *)*MEMORY[0x189604DC8];
    while (1)
    {
      unint64_t v11 = v10;
      while (1)
      {
        unsigned __int8 v12 = *(_BYTE *)(a2 + v11);
        if ((v12 - 32) >= 0x5Fu
          && (*(unsigned __int8 *)(a2 + v11) > 0xDu || ((1 << v12) & 0x3700) == 0))
        {
          break;
        }

        ++v11;
        ++*(void *)(a1 + 56);
        [a4 appendByte:v12];
        if (v11 >= a3) {
          goto LABEL_26;
        }
      }

      unint64_t v10 = v11 + 1;
      if (v11 + 1 >= a3) {
        goto LABEL_24;
      }
      unsigned int v14 = *(unsigned __int8 *)(a2 + v11 + 1);
      if (v14 < 0xA1 || v14 == 255) {
        goto LABEL_24;
      }
      unsigned int v19 = *(unsigned __int8 *)(a2 + v11 + 1);
      unsigned int v20 = (void *)qword_18C496AB0;
      unint64_t v15 = CFStringCreateWithBytesNoCopy( 0LL,  (const UInt8 *)(a2 + v11),  2LL,  *(_DWORD *)(a1 + 24),  0,  contentsDeallocator);
      if (!v15) {
        break;
      }
      CFTypeRef cf = v15;
      CharacterAtIndedouble x = CFStringGetCharacterAtIndex(v15, 0LL);
      if ([v20 indexForKey:&CharacterAtIndex length:1] != 0x7FFFFFFFFFFFFFFFLL) {
        ++*(void *)(a1 + 80);
      }
      CFRelease(cf);
      int v21 = CharacterAtIndex;
      if (!CharacterAtIndex) {
        break;
      }
      if (v23)
      {
        v25[0] = v23;
        v25[1] = CharacterAtIndex;
        if ([(id)qword_18C496AB8 indexForKey:v25 length:2] != 0x7FFFFFFFFFFFFFFFLL) {
          ++*(void *)(a1 + 88);
        }
      }

      unint64_t v10 = v11 + 2;
      [a4 appendByte1:v12 byte2:v19];
      ++*(void *)(a1 + 48);
      int v23 = v21;
LABEL_25:
      if (v10 >= a3) {
        goto LABEL_26;
      }
    }

    int v23 = 0;
LABEL_24:
    [a4 appendPlaceholder];
    ++*(void *)(a1 + 96);
    unint64_t v16 = *(void *)(a1 + 64) + 1LL;
    *(void *)(a1 + 64) = v16;
    if (v16 > v9) {
      goto LABEL_26;
    }
    goto LABEL_25;
  }

uint64_t _EUCTW_recognize(uint64_t a1, uint64_t a2, unint64_t a3, void *a4)
{
  uint64_t v37 = *MEMORY[0x1895F89C0];
  *(void *)(a1 + 32) += a3;
  uint64_t v8 = [(id)a1 maxSkipBytes];
  if (a3)
  {
    unint64_t v9 = v8;
    unint64_t v10 = 0LL;
    int v11 = 0;
    contentsDeallocator = (const __CFAllocator *)*MEMORY[0x189604DC8];
    do
    {
      v10 += 4LL;
      while (1)
      {
        unsigned __int8 v12 = *(_BYTE *)(a2 + v10 - 4);
        if ((v12 - 32) >= 0x5Fu
          && (*(unsigned __int8 *)(a2 + v10 - 4) > 0xDu || ((1 << v12) & 0x3700) == 0))
        {
          break;
        }

        ++*(void *)(a1 + 56);
        [a4 appendByte:v12];
        unint64_t v14 = v10 - 3;
        ++v10;
        if (v14 >= a3) {
          goto LABEL_44;
        }
      }

      unint64_t v15 = (const UInt8 *)(a2 + v10 - 4);
      if (v10 - 3 < a3 && (v12 + 95) <= 0x5Du)
      {
        unsigned int v16 = *(unsigned __int8 *)(a2 + v10 - 3);
        if (v16 >= 0xA1 && v16 != 255)
        {
          unsigned int v28 = *(unsigned __int8 *)(a2 + v10 - 3);
          double v31 = (void *)qword_18C496A90;
          unint64_t v17 = CFStringCreateWithBytesNoCopy(0LL, v15, 2LL, *(_DWORD *)(a1 + 24), 0, contentsDeallocator);
          if (v17)
          {
            CFTypeRef cf = v17;
            CharacterAtIndedouble x = CFStringGetCharacterAtIndex(v17, 0LL);
            if ([v31 indexForKey:&CharacterAtIndex length:1] != 0x7FFFFFFFFFFFFFFFLL) {
              ++*(void *)(a1 + 80);
            }
            CFRelease(cf);
            UniChar v18 = CharacterAtIndex;
            if (CharacterAtIndex)
            {
              int v33 = CharacterAtIndex;
              if (v11)
              {
                CharacterAtIndedouble x = v11;
                UniChar v36 = v18;
                if ([(id)qword_18C496A98 indexForKey:&CharacterAtIndex length:2] != 0x7FFFFFFFFFFFFFFFLL) {
                  ++*(void *)(a1 + 88);
                }
              }

              v10 -= 2LL;
              ++*(void *)(a1 + 48);
              objc_msgSend(a4, "appendByte1:byte2:", v12, v28, cf);
              goto LABEL_40;
            }
          }

          int v11 = 0;
          unint64_t v15 = (const UInt8 *)(a2 + v10 - 4);
        }
      }

      if (v10 - 1 >= a3) {
        goto LABEL_42;
      }
      if (v12 != 142) {
        goto LABEL_42;
      }
      uint64_t v19 = a2 + v10;
      uint64_t v20 = *(unsigned __int8 *)(a2 + v10 - 3);
      unsigned int v21 = *(unsigned __int8 *)(v19 - 2);
      if (v21 < 0xA1) {
        goto LABEL_42;
      }
      if (v21 == 255) {
        goto LABEL_42;
      }
      unsigned int v22 = *(unsigned __int8 *)(v19 - 1);
      if (v22 < 0xA1 || v22 == 255) {
        goto LABEL_42;
      }
      unsigned int v29 = v22;
      unsigned int bytes = v21;
      unsigned int v32 = (void *)qword_18C496A90;
      int v23 = CFStringCreateWithBytesNoCopy(0LL, v15, 4LL, *(_DWORD *)(a1 + 24), 0, contentsDeallocator);
      if (!v23) {
        goto LABEL_41;
      }
      CFTypeRef cf = v23;
      CharacterAtIndedouble x = CFStringGetCharacterAtIndex(v23, 0LL);
      if ([v32 indexForKey:&CharacterAtIndex length:1] != 0x7FFFFFFFFFFFFFFFLL) {
        ++*(void *)(a1 + 80);
      }
      CFRelease(cf);
      UniChar v24 = CharacterAtIndex;
      if (!CharacterAtIndex)
      {
LABEL_41:
        int v11 = 0;
LABEL_42:
        objc_msgSend(a4, "appendPlaceholder", cf);
        ++*(void *)(a1 + 96);
        unint64_t v25 = *(void *)(a1 + 64) + 1LL;
        *(void *)(a1 + 64) = v25;
        v10 -= 3LL;
        if (v25 > v9) {
          break;
        }
        continue;
      }

      int v33 = CharacterAtIndex;
      if (v11)
      {
        CharacterAtIndedouble x = v11;
        UniChar v36 = v24;
        if ([(id)qword_18C496A98 indexForKey:&CharacterAtIndex length:2] != 0x7FFFFFFFFFFFFFFFLL) {
          ++*(void *)(a1 + 88);
        }
      }

      ++*(void *)(a1 + 48);
      objc_msgSend(a4, "appendByte1:byte2:byte3:byte4:", 142, v20, bytes, v29, cf);
LABEL_40:
      int v11 = v33;
    }

    while (v10 < a3);
  }

uint64_t _GB18030_recognize(uint64_t a1, uint64_t a2, unint64_t a3, void *a4)
{
  uint64_t v39 = *MEMORY[0x1895F89C0];
  *(void *)(a1 + 32) += a3;
  uint64_t v8 = [(id)a1 maxSkipBytes];
  if (a3)
  {
    unint64_t v9 = v8;
    unint64_t v10 = 0LL;
    int v11 = 0;
    contentsDeallocator = (const __CFAllocator *)*MEMORY[0x189604DC8];
    do
    {
      v10 += 4LL;
      while (1)
      {
        int v12 = *(char *)(a2 + v10 - 4);
        ++*(void *)(a1 + 56);
        [a4 appendByte:v12];
        unint64_t v14 = v10 - 3;
        ++v10;
        if (v14 >= a3) {
          goto LABEL_44;
        }
      }

      unint64_t v15 = (const UInt8 *)(a2 + v10 - 4);
      if (v10 - 3 < a3 && (v12 + 127) <= 0x7D)
      {
        int v16 = *(char *)(a2 + v10 - 3);
        if (v16 < -1 || (v16 - 64) <= 0x3Eu)
        {
          unsigned __int8 v30 = *(_BYTE *)(a2 + v10 - 3);
          int v33 = (void *)qword_18C496A90;
          unint64_t v17 = CFStringCreateWithBytesNoCopy(0LL, v15, 2LL, *(_DWORD *)(a1 + 24), 0, contentsDeallocator);
          if (v17)
          {
            CFTypeRef cf = v17;
            CharacterAtIndedouble x = CFStringGetCharacterAtIndex(v17, 0LL);
            if ([v33 indexForKey:&CharacterAtIndex length:1] != 0x7FFFFFFFFFFFFFFFLL) {
              ++*(void *)(a1 + 80);
            }
            CFRelease(cf);
            UniChar v18 = CharacterAtIndex;
            if (CharacterAtIndex)
            {
              int v35 = CharacterAtIndex;
              if (v11)
              {
                CharacterAtIndedouble x = v11;
                UniChar v38 = v18;
                if ([(id)qword_18C496A98 indexForKey:&CharacterAtIndex length:2] != 0x7FFFFFFFFFFFFFFFLL) {
                  ++*(void *)(a1 + 88);
                }
              }

              v10 -= 2LL;
              ++*(void *)(a1 + 48);
              [a4 appendByte1:v12 byte2:v30];
              goto LABEL_40;
            }
          }

          int v11 = 0;
          unint64_t v15 = (const UInt8 *)(a2 + v10 - 4);
        }
      }

      if (v10 - 1 >= a3) {
        goto LABEL_42;
      }
      uint64_t v19 = a2 + v10;
      unsigned int v20 = *(unsigned __int8 *)(a2 + v10 - 3);
      if (v20 < 0x30) {
        goto LABEL_42;
      }
      if (v20 > 0x39) {
        goto LABEL_42;
      }
      unsigned int v21 = *(unsigned __int8 *)(v19 - 2);
      if (v21 < 0x81) {
        goto LABEL_42;
      }
      if (v21 == 255) {
        goto LABEL_42;
      }
      unsigned int v22 = *(unsigned __int8 *)(v19 - 1);
      if (v22 < 0x30 || v22 > 0x39) {
        goto LABEL_42;
      }
      unsigned int cfa = v22;
      unsigned int v31 = v21;
      unsigned int bytes = *(unsigned __int8 *)(a2 + v10 - 3);
      uint64_t v34 = (void *)qword_18C496A90;
      int v23 = CFStringCreateWithBytesNoCopy(0LL, v15, 4LL, *(_DWORD *)(a1 + 24), 0, contentsDeallocator);
      if (!v23) {
        goto LABEL_41;
      }
      uint64_t v27 = v23;
      CharacterAtIndedouble x = CFStringGetCharacterAtIndex(v23, 0LL);
      if ([v34 indexForKey:&CharacterAtIndex length:1] != 0x7FFFFFFFFFFFFFFFLL) {
        ++*(void *)(a1 + 80);
      }
      CFRelease(v27);
      UniChar v24 = CharacterAtIndex;
      if (!CharacterAtIndex)
      {
LABEL_41:
        int v11 = 0;
LABEL_42:
        [a4 appendPlaceholder];
        ++*(void *)(a1 + 96);
        unint64_t v25 = *(void *)(a1 + 64) + 1LL;
        *(void *)(a1 + 64) = v25;
        v10 -= 3LL;
        if (v25 > v9) {
          break;
        }
        continue;
      }

      int v35 = CharacterAtIndex;
      if (v11)
      {
        CharacterAtIndedouble x = v11;
        UniChar v38 = v24;
        if ([(id)qword_18C496A98 indexForKey:&CharacterAtIndex length:2] != 0x7FFFFFFFFFFFFFFFLL) {
          ++*(void *)(a1 + 88);
        }
      }

      ++*(void *)(a1 + 48);
      [a4 appendByte1:v12 byte2:bytes byte3:v31 byte4:cfa];
LABEL_40:
      int v11 = v35;
    }

    while (v10 < a3);
  }

uint64_t _GBK_recognize(uint64_t a1, uint64_t a2, unint64_t a3, void *a4)
{
  uint64_t v26 = *MEMORY[0x1895F89C0];
  *(void *)(a1 + 32) += a3;
  uint64_t v8 = [(id)a1 maxSkipBytes];
  if (a3)
  {
    unint64_t v9 = v8;
    unint64_t v10 = 0LL;
    int v23 = 0;
    contentsDeallocator = (const __CFAllocator *)*MEMORY[0x189604DC8];
    while (1)
    {
      unint64_t v11 = v10;
      while (1)
      {
        int v12 = *(char *)(a2 + v11);
        ++v11;
        ++*(void *)(a1 + 56);
        [a4 appendByte:v12];
        if (v11 >= a3) {
          goto LABEL_51;
        }
      }

      unint64_t v10 = v11 + 1;
      if (v11 + 1 >= a3) {
        goto LABEL_49;
      }
      unsigned int v14 = *(unsigned __int8 *)(a2 + v11 + 1);
      if (((v12 + 95) > 8 || v14 < 0xA1 || v14 == 255)
        && ((v12 + 80) > 0x47 || v14 < 0xA1 || v14 == 255)
        && ((v12 + 127) > 0x1Fu || v14 < 0x40 || v14 == 255 || v14 == 127)
        && ((v12 + 86) > 0x54 || v14 < 0x40 || v14 > 0xA0 || v14 == 127)
        && ((v12 & 0xFFFFFFFE) != 0xFFFFFFA8 || v14 < 0x40 || v14 > 0xA0 || v14 == 127)
        && ((v12 + 86) > 5u || v14 < 0xA1 || v14 == 255)
        && ((v12 + 8) > 6 || v14 < 0xA1 || v14 == 255)
        && ((v12 + 95) > 6u || v14 < 0x40 || v14 > 0xA0 || v14 == 127))
      {
        goto LABEL_49;
      }

      unsigned int v19 = *(unsigned __int8 *)(a2 + v11 + 1);
      unsigned int v20 = (void *)qword_18C496A90;
      unint64_t v15 = CFStringCreateWithBytesNoCopy( 0LL,  (const UInt8 *)(a2 + v11),  2LL,  *(_DWORD *)(a1 + 24),  0,  contentsDeallocator);
      if (!v15) {
        break;
      }
      CFTypeRef cf = v15;
      CharacterAtIndedouble x = CFStringGetCharacterAtIndex(v15, 0LL);
      if ([v20 indexForKey:&CharacterAtIndex length:1] != 0x7FFFFFFFFFFFFFFFLL) {
        ++*(void *)(a1 + 80);
      }
      CFRelease(cf);
      int v21 = CharacterAtIndex;
      if (!CharacterAtIndex) {
        break;
      }
      if (v23)
      {
        v25[0] = v23;
        v25[1] = CharacterAtIndex;
        if ([(id)qword_18C496A98 indexForKey:v25 length:2] != 0x7FFFFFFFFFFFFFFFLL) {
          ++*(void *)(a1 + 88);
        }
      }

      ++*(void *)(a1 + 48);
      unint64_t v10 = v11 + 2;
      [a4 appendByte1:v12 byte2:v19];
      int v23 = v21;
LABEL_50:
      if (v10 >= a3) {
        goto LABEL_51;
      }
    }

    int v23 = 0;
LABEL_49:
    [a4 appendPlaceholder];
    ++*(void *)(a1 + 96);
    unint64_t v16 = *(void *)(a1 + 64) + 1LL;
    *(void *)(a1 + 64) = v16;
    if (v16 > v9) {
      goto LABEL_51;
    }
    goto LABEL_50;
  }

uint64_t _HZGB2312_recognize(uint64_t a1, uint64_t a2, unint64_t a3, void *a4)
{
  uint64_t v31 = *MEMORY[0x1895F89C0];
  *(void *)(a1 + 32) += a3;
  *(_WORD *)unsigned int bytes = 31614;
  __int16 v29 = 32126;
  unint64_t v8 = [(id)a1 maxSkipBytes];
  char v9 = 0;
  int v25 = 0;
  unint64_t v10 = 0LL;
  contentsDeallocator = (const __CFAllocator *)*MEMORY[0x189604DC8];
  while (v10 < a3)
  {
    unsigned __int8 v11 = *(_BYTE *)(a2 + v10);
    if (v11 != 126 || v10 + 1 >= a3) {
      goto LABEL_15;
    }
    unsigned int v13 = *(unsigned __int8 *)(a2 + v10 + 1);
    if (v13 > 0x7C)
    {
      if (v13 == 126)
      {
LABEL_12:
        ++*(void *)(a1 + 48);
        v10 += 2LL;
        objc_msgSend(a4, "appendByte1:byte2:", 126);
      }

      else
      {
        if (v13 != 125) {
          goto LABEL_15;
        }
        v10 += 2LL;
        ++*(void *)(a1 + 120);
        objc_msgSend(a4, "appendByte1:byte2:", 126);
        char v9 = 0;
      }
    }

    else
    {
      if (v13 == 10) {
        goto LABEL_12;
      }
      if (v13 == 123)
      {
        v10 += 2LL;
        ++*(void *)(a1 + 120);
        objc_msgSend(a4, "appendByte1:byte2:", 126);
        char v9 = 1;
      }

      else
      {
LABEL_15:
        if ((v9 & 1) != 0)
        {
          unint64_t v14 = v10 + 1;
          if (v10 + 1 >= a3) {
            goto LABEL_33;
          }
          uint64_t v15 = *(unsigned __int8 *)(a2 + v10 + 1);
          char v27 = *(_BYTE *)(a2 + v10);
          char v28 = v15;
          unsigned int v22 = (void *)qword_18C496A90;
          unint64_t v23 = v8;
          unint64_t v16 = CFStringCreateWithBytesNoCopy(0LL, bytes, 6LL, *(_DWORD *)(a1 + 24), 0, contentsDeallocator);
          if (!v16) {
            goto LABEL_24;
          }
          unint64_t v17 = v16;
          v30[0] = CFStringGetCharacterAtIndex(v16, 0LL);
          if ([v22 indexForKey:v30 length:1] != 0x7FFFFFFFFFFFFFFFLL) {
            ++*(void *)(a1 + 80);
          }
          CFRelease(v17);
          int v18 = v30[0];
          if (!v30[0])
          {
LABEL_24:
            int v25 = 0;
            unint64_t v8 = v23;
            goto LABEL_33;
          }

          if (v25)
          {
            v30[0] = v25;
            v30[1] = v18;
            if ([(id)qword_18C496A98 indexForKey:v30 length:2] != 0x7FFFFFFFFFFFFFFFLL) {
              ++*(void *)(a1 + 88);
            }
          }

          ++*(void *)(a1 + 48);
          v10 += 2LL;
          objc_msgSend(a4, "appendByte1:byte2:", v11, v15, v22);
          char v9 = 1;
          int v25 = v18;
          unint64_t v8 = v23;
        }

        else if ((v11 - 32) >= 0x5Fu {
               && (*(unsigned __int8 *)(a2 + v10) <= 0xDu ? (BOOL v19 = ((1 << v11) & 0x3700) == 0) : (BOOL v19 = 1), v19))
        }
        {
          unint64_t v14 = v10 + 1;
LABEL_33:
          objc_msgSend(a4, "appendPlaceholder", v22);
          ++*(void *)(a1 + 96);
          unint64_t v20 = *(void *)(a1 + 64) + 1LL;
          *(void *)(a1 + 64) = v20;
          unint64_t v10 = v14;
          if (v20 > v8) {
            break;
          }
        }

        else
        {
          ++v10;
          ++*(void *)(a1 + 56);
          [a4 appendByte:v11];
          char v9 = 0;
        }
      }
    }
  }

  uint64_t result = *(void *)(a1 + 48) + *(void *)(a1 + 56);
  *(void *)(a1 + 40) = result;
  return result;
}

uint64_t _ISO2022CN_recognize(uint64_t a1, uint64_t a2, unint64_t a3, void *a4)
{
  uint64_t v38 = *MEMORY[0x1895F89C0];
  *(void *)(a1 + 32) += a3;
  char v34 = 14;
  char v37 = 15;
  uint64_t v8 = [(id)a1 maxSkipBytes];
  if (a3)
  {
    unint64_t v9 = v8;
    unint64_t v10 = 0LL;
    int v29 = 0;
    char v11 = 0;
    char v27 = a4;
    contentsDeallocator = (const __CFAllocator *)*MEMORY[0x189604DC8];
    uint64_t v26 = v8;
    while (1)
    {
      uint64_t v12 = *(unsigned __int8 *)(a2 + v10);
      if ((_DWORD)v12 == 15) {
        break;
      }
      if ((_DWORD)v12 == 14)
      {
        ++v10;
        ++*(void *)(a1 + 120);
        [a4 appendByte:14];
        char v11 = 1;
        goto LABEL_42;
      }

      if ((v11 & 1) == 0)
      {
        if ((v12 - 32) >= 0xDFu && (v12 > 0xD || ((1 << v12) & 0x3700) == 0))
        {
          unint64_t v13 = v10 + 1;
          goto LABEL_28;
        }

        ++v10;
        ++*(void *)(a1 + 56);
        unint64_t v20 = a4;
        uint64_t v21 = v12;
        goto LABEL_40;
      }

      unint64_t v13 = v10 + 1;
      if (v10 + 1 >= a3) {
        goto LABEL_28;
      }
      uint64_t v14 = *(unsigned __int8 *)(a2 + v13);
      if ((v12 - 33) > 0xDDu || v14 < 0x21 || (_DWORD)v14 == 255)
      {
        if ((_DWORD)v12 != 27 || (v14 & 0xFE) != 0x4E) {
          goto LABEL_28;
        }
        v10 += 2LL;
        ++*(void *)(a1 + 120);
        [a4 appendByte1:27 byte2:v14];
        char v11 = 1;
LABEL_42:
        if (v10 >= a3) {
          goto LABEL_49;
        }
      }

      else
      {
        char v35 = *(_BYTE *)(a2 + v10);
        char v36 = v14;
        uint64_t v15 = (void *)qword_18C496A90;
        unint64_t v16 = CFStringCreateWithBytesNoCopy(0LL, bytes, 8LL, *(_DWORD *)(a1 + 24), 0, contentsDeallocator);
        if (!v16)
        {
          int v29 = 0;
          a4 = v27;
          goto LABEL_27;
        }

        unint64_t v17 = v16;
        v30[0] = CFStringGetCharacterAtIndex(v16, 0LL);
        if ([v15 indexForKey:v30 length:1] != 0x7FFFFFFFFFFFFFFFLL) {
          ++*(void *)(a1 + 80);
        }
        CFRelease(v17);
        int v18 = v30[0];
        a4 = v27;
        if (v30[0])
        {
          if (v29)
          {
            v30[0] = v29;
            v30[1] = v18;
            if ([(id)qword_18C496A98 indexForKey:v30 length:2] != 0x7FFFFFFFFFFFFFFFLL) {
              ++*(void *)(a1 + 88);
            }
          }

          v10 += 2LL;
          ++*(void *)(a1 + 48);
          objc_msgSend(v27, "appendByte1:byte2:", v12, v14, v26);
          char v11 = 1;
          int v29 = v18;
          unint64_t v9 = v26;
          goto LABEL_42;
        }

        int v29 = 0;
LABEL_27:
        unint64_t v9 = v26;
LABEL_28:
        if (v10 + 3 < a3
          && (_DWORD)v12 == 27
          && *(_BYTE *)(a2 + v13) == 36
          && (char v22 = *(_BYTE *)(v10 + a2 + 2), (v22 - 41) <= 2u)
          && ((int v23 = *(unsigned __int8 *)(a2 + v10 + 3), (v23 - 71) < 7) || v23 == 69 || v23 == 65))
        {
          *(_WORD *)unsigned int bytes = 9243;
          char v32 = v22;
          char v33 = v23;
          unint64_t v13 = v10 + 4;
          ++*(void *)(a1 + 120);
          objc_msgSend(a4, "appendByte1:byte2:byte3:byte4:", 27, 36, v26);
        }

        else
        {
          objc_msgSend(a4, "appendPlaceholder", v26);
          ++*(void *)(a1 + 96);
          unint64_t v24 = *(void *)(a1 + 64) + 1LL;
          *(void *)(a1 + 64) = v24;
          if (v24 > v9) {
            goto LABEL_49;
          }
        }

        unint64_t v10 = v13;
        if (v13 >= a3) {
          goto LABEL_49;
        }
      }
    }

    ++v10;
    ++*(void *)(a1 + 120);
    unint64_t v20 = a4;
    uint64_t v21 = 15LL;
LABEL_40:
    objc_msgSend(v20, "appendByte:", v21, v26);
    char v11 = 0;
    goto LABEL_42;
  }

uint64_t _ISO2022JP1_recognize(uint64_t a1, uint64_t a2, unint64_t a3, void *a4)
{
  *(void *)(a1 + 32) += a3;
  return recognizeISO2022JP( a2,  a3,  (void *)(a1 + 40),  (void *)(a1 + 48),  (void *)(a1 + 56),  (void *)(a1 + 120),  (unint64_t *)(a1 + 64),  (uint64_t)&iso2022jpEscape,  8uLL,  3uLL,  (char *)&iso2022jp1Escape,  1,  *(_DWORD *)(a1 + 24),  (void *)(a1 + 80),  (void *)(a1 + 88),  (void *)(a1 + 96),  a4,  [(id)a1 maxSkipBytes]);
}

uint64_t _ISO2022JP2_recognize(uint64_t a1, uint64_t a2, unint64_t a3, void *a4)
{
  *(void *)(a1 + 32) += a3;
  return recognizeISO2022JP( a2,  a3,  (void *)(a1 + 40),  (void *)(a1 + 48),  (void *)(a1 + 56),  (void *)(a1 + 120),  (unint64_t *)(a1 + 64),  (uint64_t)&iso2022jp2_3Escape,  0xEuLL,  9uLL,  "DC",  2,  *(_DWORD *)(a1 + 24),  (void *)(a1 + 80),  (void *)(a1 + 88),  (void *)(a1 + 96),  a4,  [(id)a1 maxSkipBytes]);
}

uint64_t _ISO2022JP_recognize(uint64_t a1, uint64_t a2, unint64_t a3, void *a4)
{
  *(void *)(a1 + 32) += a3;
  return recognizeISO2022JP( a2,  a3,  (void *)(a1 + 40),  (void *)(a1 + 48),  (void *)(a1 + 56),  (void *)(a1 + 120),  (unint64_t *)(a1 + 64),  (uint64_t)&iso2022jpEscape,  8uLL,  3uLL,  0,  0,  *(_DWORD *)(a1 + 24),  (void *)(a1 + 80),  (void *)(a1 + 88),  (void *)(a1 + 96),  a4,  [(id)a1 maxSkipBytes]);
}

uint64_t _ISO2022KR_recognize(uint64_t a1, uint64_t a2, unint64_t a3, void *a4)
{
  uint64_t v32 = *MEMORY[0x1895F89C0];
  *(void *)(a1 + 32) += a3;
  *(_DWORD *)unsigned int bytes = 1126769691;
  unint64_t v8 = [(id)a1 maxSkipBytes];
  char v9 = 0;
  int v26 = 0;
  unint64_t v10 = 0LL;
  contentsDeallocator = (const __CFAllocator *)*MEMORY[0x189604DC8];
  while (1)
  {
    unint64_t v11 = v10;
LABEL_3:
    if (v11 >= a3) {
      goto LABEL_42;
    }
    unint64_t v10 = v11 + 2;
    while (1)
    {
      uint64_t v12 = *(unsigned __int8 *)(a2 + v10 - 2);
      if ((_DWORD)v12 != 27) {
        break;
      }
      if (v10 + 1 >= a3
        || *(_BYTE *)(a2 + v10 - 1) != 36
        || *(_BYTE *)(a2 + v10) != 41
        || *(_BYTE *)(a2 + v10 + 1) != 67)
      {
        goto LABEL_14;
      }

      ++*(void *)(a1 + 120);
      unint64_t v13 = v10 + 2;
      [a4 appendBytes:v10 + 2 + a2 count:4];
      v10 += 4LL;
      if (v13 >= a3) {
        goto LABEL_42;
      }
    }

    if ((_DWORD)v12 == 14)
    {
      --v10;
      ++*(void *)(a1 + 120);
      char v28 = 14;
      [a4 appendByte:14];
      char v9 = 1;
      continue;
    }

    if ((_DWORD)v12 == 15)
    {
      --v10;
      ++*(void *)(a1 + 120);
      char v28 = 15;
      unint64_t v20 = a4;
      uint64_t v21 = 15LL;
      goto LABEL_37;
    }

uint64_t _ISOLATIN1_recognize(void *a1, char *a2, uint64_t a3, void *a4)
{
  uint64_t v5 = a3;
  uint64_t v19 = *MEMORY[0x1895F89C0];
  a1[4] += a3;
  unint64_t v17 = [a1 maxSkipBytes];
  if (v5)
  {
    unsigned __int8 v8 = 0;
    unsigned __int8 v9 = 0;
    while (1)
    {
      int v11 = *a2++;
      unsigned __int8 v10 = v11;
      uint64_t v12 = v11;
      if (v11 < 0)
      {
        if (((isolatin1FrqChars[((unint64_t)v10 >> 3) & 0xF] >> (v12 & 7)) & 1) != 0)
        {
          BOOL v13 = 0;
          ++a1[10];
        }

        else
        {
          BOOL v13 = 0;
        }
      }

      else
      {
        BOOL v13 = (_DWORD)v12 != 127;
      }

      BOOL v14 = v12 > 0xD || ((1 << v12) & 0x3700) == 0;
      [a4 appendPlaceholder];
      unint64_t v15 = a1[8] + 1LL;
      a1[8] = v15;
      if (v15 > v17) {
        goto LABEL_26;
      }
      unsigned __int8 v8 = 0;
      LOBYTE(v12) = 0;
LABEL_21:
      unsigned __int8 v9 = v8;
      unsigned __int8 v8 = v12;
      if (!--v5) {
        goto LABEL_26;
      }
    }

    if (v13)
    {
      ++a1[17];
      if (v8 <= 0x7Eu && v9 < 0x7Fu)
      {
LABEL_20:
        [a4 appendByte:v12];
        goto LABEL_21;
      }
    }

    else
    {
      ++a1[18];
    }

    v18[0] = v9;
    v18[1] = v8;
    void v18[2] = v12;
    if ([(id)qword_18C496AC8 indexForBytes:v18 length:3] != 0x7FFFFFFFFFFFFFFFLL) {
      ++a1[16];
    }
    goto LABEL_20;
  }

uint64_t _ISOLATIN10_recognize(void *a1, char *a2, uint64_t a3, void *a4)
{
  uint64_t v5 = a3;
  uint64_t v19 = *MEMORY[0x1895F89C0];
  a1[4] += a3;
  unint64_t v17 = [a1 maxSkipBytes];
  if (v5)
  {
    unsigned __int8 v8 = 0;
    unsigned __int8 v9 = 0;
    while (1)
    {
      int v11 = *a2++;
      unsigned __int8 v10 = v11;
      uint64_t v12 = v11;
      if (v11 < 0)
      {
        if (((isolatin10FrqChars[((unint64_t)v10 >> 3) & 0xF] >> (v12 & 7)) & 1) != 0)
        {
          BOOL v13 = 0;
          ++a1[10];
        }

        else
        {
          BOOL v13 = 0;
        }
      }

      else
      {
        BOOL v13 = (_DWORD)v12 != 127;
      }

      BOOL v14 = v12 > 0xD || ((1 << v12) & 0x3700) == 0;
      [a4 appendPlaceholder];
      unint64_t v15 = a1[8] + 1LL;
      a1[8] = v15;
      if (v15 > v17) {
        goto LABEL_26;
      }
      unsigned __int8 v8 = 0;
      LOBYTE(v12) = 0;
LABEL_21:
      unsigned __int8 v9 = v8;
      unsigned __int8 v8 = v12;
      if (!--v5) {
        goto LABEL_26;
      }
    }

    if (v13)
    {
      ++a1[17];
      if (v8 <= 0x7Eu && v9 < 0x7Fu)
      {
LABEL_20:
        [a4 appendByte:v12];
        goto LABEL_21;
      }
    }

    else
    {
      ++a1[18];
    }

    v18[0] = v9;
    v18[1] = v8;
    void v18[2] = v12;
    if ([(id)qword_18C496AD0 indexForBytes:v18 length:3] != 0x7FFFFFFFFFFFFFFFLL) {
      ++a1[16];
    }
    goto LABEL_20;
  }

uint64_t _ISOLATIN2_recognize(void *a1, char *a2, uint64_t a3, void *a4)
{
  uint64_t v5 = a3;
  uint64_t v18 = *MEMORY[0x1895F89C0];
  a1[4] += a3;
  uint64_t v8 = [a1 maxSkipBytes];
  if (v5)
  {
    unint64_t v9 = v8;
    unsigned __int8 v10 = 0;
    unsigned __int8 v11 = 0;
    while (1)
    {
      int v13 = *a2++;
      unsigned __int8 v12 = v13;
      uint64_t v14 = v13;
      if ((vmaxv_u16((uint16x4_t)vceq_s16(vdup_n_s16(v14), (int16x4_t)0x9000C000A000DLL)) & 1) == 0
        && v11 != 8
        && v14 <= 0x9F
        && (v14 - 32) > 0x5Eu)
      {
        [a4 appendPlaceholder];
        unint64_t v15 = a1[8] + 1LL;
        a1[8] = v15;
        if (v15 > v9) {
          goto LABEL_21;
        }
        unsigned __int8 v10 = 0;
        LOBYTE(v14) = 0;
        goto LABEL_20;
      }

      ++a1[17];
      if (v10 > 0x7Eu || v11 >= 0x7Fu) {
        goto LABEL_17;
      }
LABEL_19:
      [a4 appendByte:v14];
LABEL_20:
      unsigned __int8 v11 = v10;
      unsigned __int8 v10 = v14;
      if (!--v5) {
        goto LABEL_21;
      }
    }

    ++a1[18];
LABEL_17:
    v17[0] = v11;
    v17[1] = v10;
    void v17[2] = v14;
    if ([(id)qword_18C496AD8 indexForBytes:v17 length:3] != 0x7FFFFFFFFFFFFFFFLL) {
      ++a1[16];
    }
    goto LABEL_19;
  }

uint64_t _ISOLATIN3_recognize(void *a1, char *a2, uint64_t a3, void *a4)
{
  uint64_t v5 = a3;
  uint64_t v21 = *MEMORY[0x1895F89C0];
  a1[4] += a3;
  uint64_t v8 = [a1 maxSkipBytes];
  if (v5)
  {
    unint64_t v9 = v8;
    unsigned __int8 v10 = 0;
    unsigned __int8 v11 = 0;
    do
    {
      int v13 = *a2++;
      unsigned __int8 v12 = v13;
      uint64_t v14 = v13;
      if (v13 < 0)
      {
        if (((isolatin3FrqChars[((unint64_t)v12 >> 3) & 0xF] >> (v14 & 7)) & 1) != 0)
        {
          BOOL v15 = 0;
          ++a1[10];
        }

        else
        {
          BOOL v15 = 0;
        }
      }

      else
      {
        BOOL v15 = (_DWORD)v14 != 127;
      }

      BOOL v16 = v14 > 0xD || ((1 << v14) & 0x3700) == 0;
      if (v16 && (v14 < 0xA0 || (_DWORD)v14 == 165))
      {
LABEL_18:
        [a4 appendPlaceholder];
        unint64_t v18 = a1[8] + 1LL;
        a1[8] = v18;
        if (v18 > v9) {
          break;
        }
        unsigned __int8 v10 = 0;
        LOBYTE(v14) = 0;
        goto LABEL_20;
      }

uint64_t _ISOLATIN4_recognize(void *a1, char *a2, uint64_t a3, void *a4)
{
  uint64_t v5 = a3;
  uint64_t v19 = *MEMORY[0x1895F89C0];
  a1[4] += a3;
  unint64_t v17 = [a1 maxSkipBytes];
  if (v5)
  {
    unsigned __int8 v8 = 0;
    unsigned __int8 v9 = 0;
    while (1)
    {
      int v11 = *a2++;
      unsigned __int8 v10 = v11;
      uint64_t v12 = v11;
      if (v11 < 0)
      {
        if (((isolatin4FrqChars[((unint64_t)v10 >> 3) & 0xF] >> (v12 & 7)) & 1) != 0)
        {
          BOOL v13 = 0;
          ++a1[10];
        }

        else
        {
          BOOL v13 = 0;
        }
      }

      else
      {
        BOOL v13 = (_DWORD)v12 != 127;
      }

      BOOL v14 = v12 > 0xD || ((1 << v12) & 0x3700) == 0;
      [a4 appendPlaceholder];
      unint64_t v15 = a1[8] + 1LL;
      a1[8] = v15;
      if (v15 > v17) {
        goto LABEL_26;
      }
      unsigned __int8 v8 = 0;
      LOBYTE(v12) = 0;
LABEL_21:
      unsigned __int8 v9 = v8;
      unsigned __int8 v8 = v12;
      if (!--v5) {
        goto LABEL_26;
      }
    }

    if (v13)
    {
      ++a1[17];
      if (v8 <= 0x7Eu && v9 < 0x7Fu)
      {
LABEL_20:
        [a4 appendByte:v12];
        goto LABEL_21;
      }
    }

    else
    {
      ++a1[18];
    }

    v18[0] = v9;
    v18[1] = v8;
    void v18[2] = v12;
    if ([(id)qword_18C496AE8 indexForBytes:v18 length:3] != 0x7FFFFFFFFFFFFFFFLL) {
      ++a1[16];
    }
    goto LABEL_20;
  }

uint64_t _ISOLATIN5_recognize(void *a1, char *a2, uint64_t a3, void *a4)
{
  uint64_t v5 = a3;
  uint64_t v19 = *MEMORY[0x1895F89C0];
  a1[4] += a3;
  unint64_t v17 = [a1 maxSkipBytes];
  if (v5)
  {
    unsigned __int8 v8 = 0;
    unsigned __int8 v9 = 0;
    while (1)
    {
      int v11 = *a2++;
      unsigned __int8 v10 = v11;
      uint64_t v12 = v11;
      if (v11 < 0)
      {
        if (((isolatin5FrqChars[((unint64_t)v10 >> 3) & 0xF] >> (v12 & 7)) & 1) != 0)
        {
          BOOL v13 = 0;
          ++a1[10];
        }

        else
        {
          BOOL v13 = 0;
        }
      }

      else
      {
        BOOL v13 = (_DWORD)v12 != 127;
      }

      BOOL v14 = v12 > 0xD || ((1 << v12) & 0x3700) == 0;
      [a4 appendPlaceholder];
      unint64_t v15 = a1[8] + 1LL;
      a1[8] = v15;
      if (v15 > v17) {
        goto LABEL_26;
      }
      unsigned __int8 v8 = 0;
      LOBYTE(v12) = 0;
LABEL_21:
      unsigned __int8 v9 = v8;
      unsigned __int8 v8 = v12;
      if (!--v5) {
        goto LABEL_26;
      }
    }

    if (v13)
    {
      ++a1[17];
      if (v8 <= 0x7Eu && v9 < 0x7Fu)
      {
LABEL_20:
        [a4 appendByte:v12];
        goto LABEL_21;
      }
    }

    else
    {
      ++a1[18];
    }

    v18[0] = v9;
    v18[1] = v8;
    void v18[2] = v12;
    if ([(id)qword_18C496AF0 indexForBytes:v18 length:3] != 0x7FFFFFFFFFFFFFFFLL) {
      ++a1[16];
    }
    goto LABEL_20;
  }

uint64_t _ISOLATIN6_recognize(void *a1, char *a2, uint64_t a3, void *a4)
{
  uint64_t v5 = a3;
  uint64_t v19 = *MEMORY[0x1895F89C0];
  a1[4] += a3;
  unint64_t v17 = [a1 maxSkipBytes];
  if (v5)
  {
    unsigned __int8 v8 = 0;
    unsigned __int8 v9 = 0;
    while (1)
    {
      int v11 = *a2++;
      unsigned __int8 v10 = v11;
      uint64_t v12 = v11;
      if (v11 < 0)
      {
        if (((isolatin6FrqChars[((unint64_t)v10 >> 3) & 0xF] >> (v12 & 7)) & 1) != 0)
        {
          BOOL v13 = 0;
          ++a1[10];
        }

        else
        {
          BOOL v13 = 0;
        }
      }

      else
      {
        BOOL v13 = (_DWORD)v12 != 127;
      }

      BOOL v14 = v12 > 0xD || ((1 << v12) & 0x3700) == 0;
      [a4 appendPlaceholder];
      unint64_t v15 = a1[8] + 1LL;
      a1[8] = v15;
      if (v15 > v17) {
        goto LABEL_26;
      }
      unsigned __int8 v8 = 0;
      LOBYTE(v12) = 0;
LABEL_21:
      unsigned __int8 v9 = v8;
      unsigned __int8 v8 = v12;
      if (!--v5) {
        goto LABEL_26;
      }
    }

    if (v13)
    {
      ++a1[17];
      if (v8 <= 0x7Eu && v9 < 0x7Fu)
      {
LABEL_20:
        [a4 appendByte:v12];
        goto LABEL_21;
      }
    }

    else
    {
      ++a1[18];
    }

    v18[0] = v9;
    v18[1] = v8;
    void v18[2] = v12;
    if ([(id)qword_18C496AF8 indexForBytes:v18 length:3] != 0x7FFFFFFFFFFFFFFFLL) {
      ++a1[16];
    }
    goto LABEL_20;
  }

uint64_t _ISOLATIN7_recognize(void *a1, char *a2, uint64_t a3, void *a4)
{
  uint64_t v5 = a3;
  uint64_t v19 = *MEMORY[0x1895F89C0];
  a1[4] += a3;
  unint64_t v17 = [a1 maxSkipBytes];
  if (v5)
  {
    unsigned __int8 v8 = 0;
    unsigned __int8 v9 = 0;
    while (1)
    {
      int v11 = *a2++;
      unsigned __int8 v10 = v11;
      uint64_t v12 = v11;
      if (v11 < 0)
      {
        if (((isolatin7FrqChars[((unint64_t)v10 >> 3) & 0xF] >> (v12 & 7)) & 1) != 0)
        {
          BOOL v13 = 0;
          ++a1[10];
        }

        else
        {
          BOOL v13 = 0;
        }
      }

      else
      {
        BOOL v13 = (_DWORD)v12 != 127;
      }

      BOOL v14 = v12 > 0xD || ((1 << v12) & 0x3700) == 0;
      [a4 appendPlaceholder];
      unint64_t v15 = a1[8] + 1LL;
      a1[8] = v15;
      if (v15 > v17) {
        goto LABEL_26;
      }
      unsigned __int8 v8 = 0;
      LOBYTE(v12) = 0;
LABEL_21:
      unsigned __int8 v9 = v8;
      unsigned __int8 v8 = v12;
      if (!--v5) {
        goto LABEL_26;
      }
    }

    if (v13)
    {
      ++a1[17];
      if (v8 <= 0x7Eu && v9 < 0x7Fu)
      {
LABEL_20:
        [a4 appendByte:v12];
        goto LABEL_21;
      }
    }

    else
    {
      ++a1[18];
    }

    v18[0] = v9;
    v18[1] = v8;
    void v18[2] = v12;
    if ([(id)qword_18C496B00 indexForBytes:v18 length:3] != 0x7FFFFFFFFFFFFFFFLL) {
      ++a1[16];
    }
    goto LABEL_20;
  }

uint64_t _ISOLATIN8_recognize(void *a1, char *a2, uint64_t a3, void *a4)
{
  uint64_t v5 = a3;
  uint64_t v19 = *MEMORY[0x1895F89C0];
  a1[4] += a3;
  unint64_t v17 = [a1 maxSkipBytes];
  if (v5)
  {
    unsigned __int8 v8 = 0;
    unsigned __int8 v9 = 0;
    while (1)
    {
      int v11 = *a2++;
      unsigned __int8 v10 = v11;
      uint64_t v12 = v11;
      if (v11 < 0)
      {
        if (((isolatin8FrqChars[((unint64_t)v10 >> 3) & 0xF] >> (v12 & 7)) & 1) != 0)
        {
          BOOL v13 = 0;
          ++a1[10];
        }

        else
        {
          BOOL v13 = 0;
        }
      }

      else
      {
        BOOL v13 = (_DWORD)v12 != 127;
      }

      BOOL v14 = v12 > 0xD || ((1 << v12) & 0x3700) == 0;
      [a4 appendPlaceholder];
      unint64_t v15 = a1[8] + 1LL;
      a1[8] = v15;
      if (v15 > v17) {
        goto LABEL_26;
      }
      unsigned __int8 v8 = 0;
      LOBYTE(v12) = 0;
LABEL_21:
      unsigned __int8 v9 = v8;
      unsigned __int8 v8 = v12;
      if (!--v5) {
        goto LABEL_26;
      }
    }

    if (v13)
    {
      ++a1[17];
      if (v8 <= 0x7Eu && v9 < 0x7Fu)
      {
LABEL_20:
        [a4 appendByte:v12];
        goto LABEL_21;
      }
    }

    else
    {
      ++a1[18];
    }

    v18[0] = v9;
    v18[1] = v8;
    void v18[2] = v12;
    if ([(id)qword_18C496B08 indexForBytes:v18 length:3] != 0x7FFFFFFFFFFFFFFFLL) {
      ++a1[16];
    }
    goto LABEL_20;
  }

uint64_t _ISOLATIN9_recognize(void *a1, char *a2, uint64_t a3, void *a4)
{
  uint64_t v5 = a3;
  uint64_t v19 = *MEMORY[0x1895F89C0];
  a1[4] += a3;
  unint64_t v17 = [a1 maxSkipBytes];
  if (v5)
  {
    unsigned __int8 v8 = 0;
    unsigned __int8 v9 = 0;
    while (1)
    {
      int v11 = *a2++;
      unsigned __int8 v10 = v11;
      uint64_t v12 = v11;
      if (v11 < 0)
      {
        if (((isolatin9FrqChars[((unint64_t)v10 >> 3) & 0xF] >> (v12 & 7)) & 1) != 0)
        {
          BOOL v13 = 0;
          ++a1[10];
        }

        else
        {
          BOOL v13 = 0;
        }
      }

      else
      {
        BOOL v13 = (_DWORD)v12 != 127;
      }

      BOOL v14 = v12 > 0xD || ((1 << v12) & 0x3700) == 0;
      [a4 appendPlaceholder];
      unint64_t v15 = a1[8] + 1LL;
      a1[8] = v15;
      if (v15 > v17) {
        goto LABEL_26;
      }
      unsigned __int8 v8 = 0;
      LOBYTE(v12) = 0;
LABEL_21:
      unsigned __int8 v9 = v8;
      unsigned __int8 v8 = v12;
      if (!--v5) {
        goto LABEL_26;
      }
    }

    if (v13)
    {
      ++a1[17];
      if (v8 <= 0x7Eu && v9 < 0x7Fu)
      {
LABEL_20:
        [a4 appendByte:v12];
        goto LABEL_21;
      }
    }

    else
    {
      ++a1[18];
    }

    v18[0] = v9;
    v18[1] = v8;
    void v18[2] = v12;
    if ([(id)qword_18C496B10 indexForBytes:v18 length:3] != 0x7FFFFFFFFFFFFFFFLL) {
      ++a1[16];
    }
    goto LABEL_20;
  }

uint64_t _ISO88596_recognize(void *a1, char *a2, uint64_t a3, void *a4)
{
  uint64_t v5 = a3;
  uint64_t v22 = *MEMORY[0x1895F89C0];
  a1[4] += a3;
  unint64_t v20 = [a1 maxSkipBytes];
  if (v5)
  {
    unsigned __int8 v8 = 0;
    unsigned __int8 v9 = 0;
    while (1)
    {
      int v11 = *a2++;
      int v10 = v11;
      unsigned int v12 = v11;
      if (v11 < 0)
      {
        BOOL v13 = 0;
      }

      else
      {
        BOOL v13 = v10 != 127;
      }

      BOOL v14 = v12 > 0xD || ((1 << v12) & 0x3700) == 0;
      BOOL v15 = v14 && (v10 + 63) >= 0x1A;
      unsigned int v17 = v12 - 160;
      if (v17 <= 0x1F && ((1 << v17) & 0x88003011) != 0) {
        break;
      }
      [a4 appendPlaceholder];
      unint64_t v18 = a1[8] + 1LL;
      a1[8] = v18;
      if (v18 > v20) {
        goto LABEL_32;
      }
      unsigned __int8 v8 = 0;
      LOBYTE(v10) = 0;
LABEL_26:
      unsigned __int8 v9 = v8;
      unsigned __int8 v8 = v10;
      if (!--v5) {
        goto LABEL_32;
      }
    }

    if (v13)
    {
      ++a1[17];
      if (v8 <= 0x7Eu && v9 < 0x7Fu)
      {
LABEL_25:
        [a4 appendByte:v10];
        goto LABEL_26;
      }
    }

    else
    {
      ++a1[18];
    }

    v21[0] = v9;
    v21[1] = v8;
    _DWORD v21[2] = v10;
    if ([(id)qword_18C496B18 indexForBytes:v21 length:3] != 0x7FFFFFFFFFFFFFFFLL) {
      ++a1[16];
    }
    goto LABEL_25;
  }

uint64_t _ISO88595_recognize(void *a1, char *a2, uint64_t a3, void *a4)
{
  uint64_t v5 = a3;
  uint64_t v19 = *MEMORY[0x1895F89C0];
  a1[4] += a3;
  unint64_t v17 = [a1 maxSkipBytes];
  if (v5)
  {
    unsigned __int8 v8 = 0;
    unsigned __int8 v9 = 0;
    while (1)
    {
      int v11 = *a2++;
      unsigned __int8 v10 = v11;
      uint64_t v12 = v11;
      if (v11 < 0)
      {
        if (((iso8859_5FrqChars[((unint64_t)v10 >> 3) & 0xF] >> (v12 & 7)) & 1) != 0)
        {
          BOOL v13 = 0;
          ++a1[10];
        }

        else
        {
          BOOL v13 = 0;
        }
      }

      else
      {
        BOOL v13 = (_DWORD)v12 != 127;
      }

      BOOL v14 = v12 > 0xD || ((1 << v12) & 0x3700) == 0;
      [a4 appendPlaceholder];
      unint64_t v15 = a1[8] + 1LL;
      a1[8] = v15;
      if (v15 > v17) {
        goto LABEL_26;
      }
      unsigned __int8 v8 = 0;
      LOBYTE(v12) = 0;
LABEL_21:
      unsigned __int8 v9 = v8;
      unsigned __int8 v8 = v12;
      if (!--v5) {
        goto LABEL_26;
      }
    }

    if (v13)
    {
      ++a1[17];
      if (v8 <= 0x7Eu && v9 < 0x7Fu)
      {
LABEL_20:
        [a4 appendByte:v12];
        goto LABEL_21;
      }
    }

    else
    {
      ++a1[18];
    }

    v18[0] = v9;
    v18[1] = v8;
    void v18[2] = v12;
    if ([(id)qword_18C496B20 indexForBytes:v18 length:3] != 0x7FFFFFFFFFFFFFFFLL) {
      ++a1[16];
    }
    goto LABEL_20;
  }

uint64_t _ISO88597_recognize(void *a1, char *a2, uint64_t a3, void *a4)
{
  uint64_t v5 = a3;
  uint64_t v19 = *MEMORY[0x1895F89C0];
  a1[4] += a3;
  unint64_t v17 = [a1 maxSkipBytes];
  if (v5)
  {
    unsigned __int8 v8 = 0;
    unsigned __int8 v9 = 0;
    while (1)
    {
      int v11 = *a2++;
      int v10 = v11;
      unsigned int v12 = v11;
      if (v11 < 0)
      {
        BOOL v13 = 0;
      }

      else
      {
        BOOL v13 = v10 != 127;
      }

      BOOL v14 = v12 > 0xD || ((1 << v12) & 0x3700) == 0;
      [a4 appendPlaceholder];
      unint64_t v15 = a1[8] + 1LL;
      a1[8] = v15;
      if (v15 > v17) {
        goto LABEL_27;
      }
      unsigned __int8 v8 = 0;
      LOBYTE(v10) = 0;
LABEL_20:
      unsigned __int8 v9 = v8;
      unsigned __int8 v8 = v10;
      if (!--v5) {
        goto LABEL_27;
      }
    }

    if (v13)
    {
      ++a1[17];
      if (v8 <= 0x7Eu && v9 < 0x7Fu)
      {
LABEL_19:
        [a4 appendByte:v10];
        goto LABEL_20;
      }
    }

    else
    {
      ++a1[18];
    }

    v18[0] = v9;
    v18[1] = v8;
    void v18[2] = v10;
    if ([(id)qword_18C496B28 indexForBytes:v18 length:3] != 0x7FFFFFFFFFFFFFFFLL) {
      ++a1[16];
    }
    goto LABEL_19;
  }

uint64_t _ISO88598_recognize(void *a1, char *a2, uint64_t a3, void *a4)
{
  uint64_t v5 = a3;
  uint64_t v21 = *MEMORY[0x1895F89C0];
  a1[4] += a3;
  unint64_t v19 = [a1 maxSkipBytes];
  if (v5)
  {
    unsigned __int8 v8 = 0;
    unsigned __int8 v9 = 0;
    while (1)
    {
      int v11 = *a2++;
      int v10 = v11;
      unsigned int v12 = v11;
      if (v11 < 0)
      {
        BOOL v13 = 0;
      }

      else
      {
        BOOL v13 = v10 != 127;
      }

      BOOL v14 = v12 > 0xD;
      int v15 = (1 << v12) & 0x3700;
      if (!v14 && v15 != 0) {
        break;
      }
      if ((v10 + 96) >= 0x1F)
      {
      }

      else if (v10 != -95)
      {
        break;
      }

      [a4 appendPlaceholder];
      unint64_t v17 = a1[8] + 1LL;
      a1[8] = v17;
      if (v17 > v19) {
        goto LABEL_29;
      }
      unsigned __int8 v8 = 0;
      LOBYTE(v10) = 0;
LABEL_20:
      unsigned __int8 v9 = v8;
      unsigned __int8 v8 = v10;
      if (!--v5) {
        goto LABEL_29;
      }
    }

    if (v13)
    {
      ++a1[17];
      if (v8 <= 0x7Eu && v9 < 0x7Fu)
      {
LABEL_19:
        [a4 appendByte:v10];
        goto LABEL_20;
      }
    }

    else
    {
      ++a1[18];
    }

    v20[0] = v9;
    v20[1] = v8;
    v20[2] = v10;
    if ([(id)qword_18C496B30 indexForBytes:v20 length:3] != 0x7FFFFFFFFFFFFFFFLL) {
      ++a1[16];
    }
    goto LABEL_19;
  }

uint64_t _ISO885911_recognize(void *a1, char *a2, uint64_t a3, void *a4)
{
  uint64_t v5 = a3;
  uint64_t v21 = *MEMORY[0x1895F89C0];
  a1[4] += a3;
  unint64_t v19 = [a1 maxSkipBytes];
  if (v5)
  {
    unsigned __int8 v8 = 0;
    unsigned __int8 v9 = 0;
    while (1)
    {
      int v11 = *a2++;
      int v10 = v11;
      unsigned int v12 = v11;
      if (v11 < 0)
      {
        BOOL v13 = 0;
      }

      else
      {
        BOOL v13 = v10 != 127;
      }

      BOOL v14 = v12 > 0xD;
      int v15 = (1 << v12) & 0x3700;
      BOOL v16 = v14 || v15 == 0;
      [a4 appendPlaceholder];
      unint64_t v17 = a1[8] + 1LL;
      a1[8] = v17;
      if (v17 > v19) {
        goto LABEL_26;
      }
      unsigned __int8 v8 = 0;
      LOBYTE(v10) = 0;
LABEL_20:
      unsigned __int8 v9 = v8;
      unsigned __int8 v8 = v10;
      if (!--v5) {
        goto LABEL_26;
      }
    }

    if (v13)
    {
      ++a1[17];
      if (v8 <= 0x7Eu && v9 < 0x7Fu)
      {
LABEL_19:
        [a4 appendByte:v10];
        goto LABEL_20;
      }
    }

    else
    {
      ++a1[18];
    }

    v20[0] = v9;
    v20[1] = v8;
    v20[2] = v10;
    if ([(id)qword_18C496B38 indexForBytes:v20 length:3] != 0x7FFFFFFFFFFFFFFFLL) {
      ++a1[16];
    }
    goto LABEL_19;
  }

uint64_t _SHIFTJISX0213_recognize(uint64_t a1, uint64_t a2, unint64_t a3, void *a4)
{
  uint64_t v26 = *MEMORY[0x1895F89C0];
  *(void *)(a1 + 32) += a3;
  uint64_t v8 = [(id)a1 maxSkipBytes];
  if (a3)
  {
    unint64_t v9 = v8;
    unint64_t v10 = 0LL;
    int v23 = 0;
    contentsDeallocator = (const __CFAllocator *)*MEMORY[0x189604DC8];
    while (1)
    {
      unint64_t v11 = v10;
      while (1)
      {
        unsigned __int8 v12 = *(_BYTE *)(a2 + v11);
        if ((v12 - 32) >= 0x5Fu
          && (v12 + 95) >= 0x3Fu
          && (*(unsigned __int8 *)(a2 + v11) > 0xDu || ((1 << v12) & 0x3700) == 0))
        {
          break;
        }

        ++v11;
        ++*(void *)(a1 + 56);
        [a4 appendByte:v12];
        if (v11 >= a3) {
          goto LABEL_28;
        }
      }

      unint64_t v10 = v11 + 1;
      if (v11 + 1 >= a3) {
        goto LABEL_26;
      }
      int v14 = *(char *)(a2 + v11 + 1);
      bytes[0] = *(_BYTE *)(a2 + v11);
      unsigned __int8 v19 = v14;
      bytes[1] = v14;
      unint64_t v20 = (void *)qword_18C496AA0;
      int v15 = CFStringCreateWithBytesNoCopy(0LL, bytes, 2LL, *(_DWORD *)(a1 + 24), 0, contentsDeallocator);
      if (!v15) {
        break;
      }
      CFTypeRef cf = v15;
      v25[0] = CFStringGetCharacterAtIndex(v15, 0LL);
      if ([v20 indexForKey:v25 length:1] != 0x7FFFFFFFFFFFFFFFLL) {
        ++*(void *)(a1 + 80);
      }
      CFRelease(cf);
      int v21 = v25[0];
      if (!v25[0]) {
        break;
      }
      if (v23)
      {
        v25[0] = v23;
        v25[1] = v21;
        if ([(id)qword_18C496AA8 indexForKey:v25 length:2] != 0x7FFFFFFFFFFFFFFFLL) {
          ++*(void *)(a1 + 88);
        }
      }

      ++*(void *)(a1 + 48);
      unint64_t v10 = v11 + 2;
      [a4 appendByte1:v12 byte2:v19];
      int v23 = v21;
LABEL_27:
      if (v10 >= a3) {
        goto LABEL_28;
      }
    }

    int v23 = 0;
LABEL_26:
    [a4 appendPlaceholder];
    ++*(void *)(a1 + 96);
    unint64_t v16 = *(void *)(a1 + 64) + 1LL;
    *(void *)(a1 + 64) = v16;
    if (v16 > v9) {
      goto LABEL_28;
    }
    goto LABEL_27;
  }

unint64_t _UTF16_recognize(uint64_t a1, unsigned __int16 *a2, unint64_t a3, void *a4)
{
  *(void *)(a1 + 32) += a3;
  if (a3 < 2) {
    return 0LL;
  }
  if ((__int16)*a2 == -2)
  {
    BOOL v5 = 1;
    *(_BYTE *)(a1 + 161) = 1;
  }

  else
  {
    BOOL v5 = *(_BYTE *)(a1 + 161) != 0;
  }

  return recognizeUTF16( a2,  a3,  v5,  (void *)(a1 + 40),  (void *)(a1 + 48),  (void *)(a1 + 64),  (void *)(a1 + 96),  (_BYTE *)(a1 + 162),  a4,  (void *)(a1 + 72));
}

unint64_t _UTF16BE_recognize(uint64_t a1, unsigned __int16 *a2, unint64_t a3, void *a4)
{
  *(void *)(a1 + 32) += a3;
  if (a3 < 2) {
    return 0LL;
  }
  *(_BYTE *)(a1 + 161) = 1;
  return recognizeUTF16( a2,  a3,  1,  (void *)(a1 + 40),  (void *)(a1 + 48),  (void *)(a1 + 64),  (void *)(a1 + 96),  (_BYTE *)(a1 + 162),  a4,  (void *)(a1 + 72));
}

unint64_t _UTF16LE_recognize(uint64_t a1, unsigned __int16 *a2, unint64_t a3, void *a4)
{
  *(void *)(a1 + 32) += a3;
  if (a3 < 2) {
    return 0LL;
  }
  *(_BYTE *)(a1 + 161) = 0;
  return recognizeUTF16( a2,  a3,  0,  (void *)(a1 + 40),  (void *)(a1 + 48),  (void *)(a1 + 64),  (void *)(a1 + 96),  (_BYTE *)(a1 + 162),  a4,  (void *)(a1 + 72));
}

unint64_t _UTF32_recognize(uint64_t a1, _DWORD *a2, unint64_t a3, void *a4)
{
  *(void *)(a1 + 32) += a3;
  if (a3 < 4) {
    return 0LL;
  }
  *(_BYTE *)(a1 + 161) = *a2 == 65534;
  [a4 appendUTF32Char:65279];
  return recognizeUTF32( a2,  a3,  *(unsigned __int8 *)(a1 + 161),  (void *)(a1 + 40),  (void *)(a1 + 64),  (void *)(a1 + 96),  (_BYTE *)(a1 + 162),  a4);
}

unint64_t _UTF32BE_recognize(uint64_t a1, _DWORD *a2, unint64_t a3, void *a4)
{
  *(void *)(a1 + 32) += a3;
  if (a3 < 4) {
    return 0LL;
  }
  *(_BYTE *)(a1 + 161) = 1;
  return recognizeUTF32( a2,  a3,  1,  (void *)(a1 + 40),  (void *)(a1 + 64),  (void *)(a1 + 96),  (_BYTE *)(a1 + 162),  a4);
}

unint64_t _UTF32LE_recognize(uint64_t a1, _DWORD *a2, unint64_t a3, void *a4)
{
  *(void *)(a1 + 32) += a3;
  if (a3 < 4) {
    return 0LL;
  }
  *(_BYTE *)(a1 + 161) = 0;
  return recognizeUTF32( a2,  a3,  0,  (void *)(a1 + 40),  (void *)(a1 + 64),  (void *)(a1 + 96),  (_BYTE *)(a1 + 162),  a4);
}

uint64_t _UTF7_recognize(uint64_t a1, uint64_t a2, unint64_t a3, void *a4)
{
  *(void *)(a1 + 32) += a3;
  uint64_t v8 = [(id)a1 maxSkipBytes];
  if (a3)
  {
    unint64_t v9 = v8;
    unint64_t v10 = 0LL;
    char v11 = 0;
    while (1)
    {
      uint64_t v12 = *(unsigned __int8 *)(a2 + v10);
      unint64_t v13 = v10 + 1;
      if ((_DWORD)v12 == 43 && v13 < a3)
      {
        int v18 = *(unsigned __int8 *)(a2 + v13);
        if (v18 == 45) {
          goto LABEL_34;
        }
        BOOL v19 = (v18 - 48) >= 0xA && (v18 & 0xFFFFFFDF) - 65 >= 0x1A;
        if (!v19 || (v18 | 4) == 0x2F) {
          break;
        }
      }

      if ((v11 & 1) != 0)
      {
        if (((v12 & 0xDF) - 65) < 0x1Au
          || ((_DWORD)v12 != 43 ? (BOOL v15 = (v12 - 47) > 0xAu) : (BOOL v15 = 0), !v15))
        {
          unint64_t v13 = v10 + 1;
          ++*(void *)(a1 + 112);
          char v11 = 1;
          goto LABEL_47;
        }

        BOOL v22 = (v12 - 32) < 0x5E || (v12 - 9) < 2 || (_DWORD)v12 == 13;
        if ((_DWORD)v12 != 45 && v22) {
          goto LABEL_46;
        }
        if ((_DWORD)v12 == 45)
        {
          unint64_t v13 = v10 + 1;
          if (v10 + 1 < a3)
          {
            if (*(_BYTE *)(a2 + v13) == 45)
            {
              unint64_t v13 = v10 + 2;
              *(void *)(a1 + 112) += 2LL;
              [a4 appendByte:45];
              char v11 = 0;
              uint64_t v12 = *(unsigned __int8 *)(v10 + a2 + 3);
            }

            else
            {
LABEL_55:
              ++*(void *)(a1 + 112);
              char v11 = 1;
              uint64_t v12 = 45LL;
            }

uint64_t _UTF8_recognize(uint64_t a1, unsigned __int8 *a2, unint64_t a3, void *a4)
{
  *(void *)(a1 + 32) += a3;
  if (a3 < 3)
  {
    *(_BYTE *)(a1 + 162) = 0;
    uint64_t v8 = [(id)a1 maxSkipBytes];
    if (!a3) {
      goto LABEL_54;
    }
  }

  else
  {
    BOOL v7 = *a2 == 239 && a2[1] == 187 && a2[2] == 191;
    *(_BYTE *)(a1 + 162) = v7;
    uint64_t v8 = [(id)a1 maxSkipBytes];
  }

  unint64_t v9 = v8;
  uint64_t v10 = 0LL;
  uint64_t v11 = 0LL;
  LOBYTE(v12) = 0;
  unsigned __int8 v13 = 0;
  unint64_t v14 = 0LL;
  unint64_t v15 = 0LL;
  unint64_t v16 = *(void *)(a1 + 64);
  while (v16 <= v9)
  {
    unsigned __int8 v17 = v13;
    unsigned __int8 v13 = v12;
    int v12 = (char)a2[v14];
    uint64_t v18 = v11 - 1;
    if ((unint64_t)(v11 - 1) >= 4)
    {
      if (v11 == 5)
      {
        uint64_t v11 = 0LL;
        if (v12 < 0 && (v12 + 64) >= 0x37u)
        {
          if (v14 + 1 < a3)
          {
            int v22 = (char)a2[v14 + 1];
            if ((v22 & 0x80000000) == 0 || (v22 + 64) <= 0x36u)
            {
              uint64_t v11 = 0LL;
              *(void *)(a1 + 64) = v16 + 1;
              goto LABEL_45;
            }
          }

uint64_t _WINDOWS1256_recognize(void *a1, char *a2, uint64_t a3, void *a4)
{
  uint64_t v5 = a3;
  uint64_t v18 = *MEMORY[0x1895F89C0];
  a1[4] += a3;
  unint64_t v16 = [a1 maxSkipBytes];
  if (v5)
  {
    unsigned __int8 v8 = 0;
    unsigned __int8 v9 = 0;
    while (1)
    {
      int v11 = *a2++;
      unsigned __int8 v10 = v11;
      uint64_t v12 = v11;
      if (v11 < 0) {
        break;
      }
      if (v12 > 0x1F)
      {
        if (v12 < 0x7F)
        {
LABEL_16:
          ++a1[17];
          if (v8 <= 0x7Eu && v9 < 0x7Fu)
          {
LABEL_18:
            [a4 appendByte:v12];
            goto LABEL_19;
          }

uint64_t _WINDOWS1257_recognize(void *a1, char *a2, uint64_t a3, void *a4)
{
  uint64_t v5 = a3;
  uint64_t v26 = *MEMORY[0x1895F89C0];
  a1[4] += a3;
  unint64_t v24 = [a1 maxSkipBytes];
  if (v5)
  {
    unsigned __int8 v8 = 0;
    unsigned __int8 v9 = 0;
    while (1)
    {
      int v11 = *a2++;
      unsigned __int8 v10 = v11;
      uint64_t v12 = v11;
      BOOL v13 = (v12 & 0xFFFFFFFD) == 0x81 || (v12 & 0xFFFFFFFD) == 136;
      BOOL v14 = v13 || (_DWORD)v12 == 140;
      BOOL v15 = v14 || (v12 & 0xFFFFFFF7) == 144;
      BOOL v16 = v15 || (_DWORD)v12 == 154;
      BOOL v17 = v16 || (_DWORD)v12 == 156;
      BOOL v18 = v17 || (_DWORD)v12 == 159;
      BOOL v19 = v18 || (v12 & 0xFFFFFFFB) == 161;
      objc_msgSend(a4, "appendPlaceholder", v24);
      unint64_t v22 = a1[8] + 1LL;
      a1[8] = v22;
      if (v22 > v24) {
        goto LABEL_47;
      }
      unsigned __int8 v8 = 0;
      LOBYTE(v12) = 0;
LABEL_43:
      unsigned __int8 v9 = v8;
      unsigned __int8 v8 = v12;
      if (!--v5) {
        goto LABEL_47;
      }
    }

    int v21 = a1 + 17;
    if ((v12 - 32) >= 0x5F) {
LABEL_36:
    }
      int v21 = a1 + 18;
    ++*v21;
    if (v8 > 0x7Eu || v9 > 0x7Eu || v12 >= 0x7F)
    {
      v25[0] = v9;
      v25[1] = v8;
      _WORD v25[2] = v12;
      if (objc_msgSend((id)qword_18C496B48, "indexForBytes:length:", v25, 3, v24) != 0x7FFFFFFFFFFFFFFFLL) {
        ++a1[16];
      }
    }

    objc_msgSend(a4, "appendByte:", v12, v24);
    goto LABEL_43;
  }

uint64_t _WINDOWS1251_recognize(void *a1, char *a2, uint64_t a3, void *a4)
{
  uint64_t v5 = a3;
  uint64_t v18 = *MEMORY[0x1895F89C0];
  a1[4] += a3;
  unint64_t v16 = [a1 maxSkipBytes];
  if (v5)
  {
    unsigned __int8 v8 = 0;
    unsigned __int8 v9 = 0;
    while (1)
    {
      int v11 = *a2++;
      unsigned __int8 v10 = v11;
      uint64_t v12 = v11;
      [a4 appendPlaceholder];
      unint64_t v14 = a1[8] + 1LL;
      a1[8] = v14;
      if (v14 > v16) {
        goto LABEL_23;
      }
      unsigned __int8 v8 = 0;
      LOBYTE(v12) = 0;
LABEL_19:
      unsigned __int8 v9 = v8;
      unsigned __int8 v8 = v12;
      if (!--v5) {
        goto LABEL_23;
      }
    }

    if (v12 < 0x7F)
    {
LABEL_14:
      ++a1[17];
      if (v8 <= 0x7Eu && v9 < 0x7Fu)
      {
LABEL_18:
        [a4 appendByte:v12];
        goto LABEL_19;
      }
    }

    else
    {
      ++a1[18];
    }

    v17[0] = v9;
    v17[1] = v8;
    void v17[2] = v12;
    if ([(id)qword_18C496B50 indexForBytes:v17 length:3] != 0x7FFFFFFFFFFFFFFFLL) {
      ++a1[16];
    }
    goto LABEL_18;
  }

uint64_t _WINDOWS1253_recognize(void *a1, char *a2, uint64_t a3, void *a4)
{
  uint64_t v5 = a3;
  uint64_t v23 = *MEMORY[0x1895F89C0];
  a1[4] += a3;
  uint64_t v8 = [a1 maxSkipBytes];
  if (v5)
  {
    unint64_t v9 = v8;
    unsigned __int8 v10 = 0;
    unsigned __int8 v11 = 0;
    while (1)
    {
      int v13 = *a2++;
      unsigned __int8 v12 = v13;
      uint64_t v14 = v13;
      BOOL v18 = (v14 - 32) < 0xDFu
         || (_DWORD)v14 == 13
         || (_DWORD)v14 == 10
         || (v14 & 0xFFFFFFFB) == 8
         || (_DWORD)v14 == 9;
      if (!v18
        || ((v14 - 129) <= 0x19 ? (BOOL v19 = ((1 << (v14 + 127)) & 0x280FA81) == 0) : (BOOL v19 = 1),
            !v19 || (v14 & 0xFC) == 0x9C || (_DWORD)v14 == 170 || (_DWORD)v14 == 210))
      {
        [a4 appendPlaceholder];
        unint64_t v20 = a1[8] + 1LL;
        a1[8] = v20;
        if (v20 > v9) {
          goto LABEL_39;
        }
        unsigned __int8 v10 = 0;
        LOBYTE(v14) = 0;
        goto LABEL_26;
      }

      ++a1[17];
      if (v10 > 0x7Eu || v11 >= 0x7Fu) {
        goto LABEL_36;
      }
LABEL_38:
      [a4 appendByte:v14];
LABEL_26:
      unsigned __int8 v11 = v10;
      unsigned __int8 v10 = v14;
      if (!--v5) {
        goto LABEL_39;
      }
    }

    ++a1[18];
LABEL_36:
    v22[0] = v11;
    v22[1] = v10;
    _DWORD v22[2] = v14;
    if ([(id)qword_18C496B58 indexForBytes:v22 length:3] != 0x7FFFFFFFFFFFFFFFLL) {
      ++a1[16];
    }
    goto LABEL_38;
  }

uint64_t _WINDOWS1255_recognize(void *a1, char *a2, uint64_t a3, void *a4)
{
  uint64_t v5 = a3;
  uint64_t v23 = *MEMORY[0x1895F89C0];
  a1[4] += a3;
  uint64_t v8 = [a1 maxSkipBytes];
  if (v5)
  {
    unint64_t v9 = v8;
    unsigned __int8 v10 = 0;
    unsigned __int8 v11 = 0;
    while (1)
    {
      int v13 = *a2++;
      unsigned __int8 v12 = v13;
      uint64_t v14 = v13;
      BOOL v18 = (v14 - 32) < 0xDFu
         || (_DWORD)v14 == 13
         || (_DWORD)v14 == 10
         || (v14 & 0xFFFFFFFB) == 8
         || (_DWORD)v14 == 9;
      if (!v18
        || ((v14 - 129) <= 0x19 ? (BOOL v19 = ((1 << (v14 + 127)) & 0x200FA81) == 0) : (BOOL v19 = 1),
            !v19
         || (_DWORD)v14 == 202
         || (v14 & 0xFC) == 0x9C
         || (v14 - 217) < 7
         || (v14 - 251) < 2))
      {
        [a4 appendPlaceholder];
        unint64_t v20 = a1[8] + 1LL;
        a1[8] = v20;
        if (v20 > v9) {
          goto LABEL_40;
        }
        unsigned __int8 v10 = 0;
        LOBYTE(v14) = 0;
        goto LABEL_26;
      }

      ++a1[17];
      if (v10 > 0x7Eu || v11 >= 0x7Fu) {
        goto LABEL_37;
      }
LABEL_39:
      [a4 appendByte:v14];
LABEL_26:
      unsigned __int8 v11 = v10;
      unsigned __int8 v10 = v14;
      if (!--v5) {
        goto LABEL_40;
      }
    }

    ++a1[18];
LABEL_37:
    v22[0] = v11;
    v22[1] = v10;
    _DWORD v22[2] = v14;
    if ([(id)qword_18C496B60 indexForBytes:v22 length:3] != 0x7FFFFFFFFFFFFFFFLL) {
      ++a1[16];
    }
    goto LABEL_39;
  }

uint64_t _WINDOWS1252_recognize(void *a1, char *a2, uint64_t a3, void *a4)
{
  uint64_t v5 = a3;
  uint64_t v20 = *MEMORY[0x1895F89C0];
  a1[4] += a3;
  uint64_t v8 = [a1 maxSkipBytes];
  if (v5)
  {
    unint64_t v9 = v8;
    unsigned __int8 v10 = 0;
    unsigned __int8 v11 = 0;
    do
    {
      int v13 = *a2++;
      unsigned __int8 v12 = v13;
      uint64_t v14 = v13;
      if (v13 < 0)
      {
      }

      else if (v14 <= 0x1F)
      {
        goto LABEL_9;
      }

      if ((v14 - 129) <= 0x1C && ((1 << (v14 + 127)) & 0x1000D001) != 0)
      {
LABEL_18:
        [a4 appendPlaceholder];
        unint64_t v17 = a1[8] + 1LL;
        a1[8] = v17;
        if (v17 > v9) {
          break;
        }
        unsigned __int8 v10 = 0;
        LOBYTE(v14) = 0;
        goto LABEL_25;
      }

      if (v14 >= 0x7F)
      {
        ++a1[18];
LABEL_22:
        v19[0] = v11;
        v19[1] = v10;
        void v19[2] = v14;
        if ([(id)qword_18C496B68 indexForBytes:v19 length:3] != 0x7FFFFFFFFFFFFFFFLL) {
          ++a1[16];
        }
        goto LABEL_24;
      }

uint64_t _WINDOWS1250_recognize(void *a1, char *a2, uint64_t a3, void *a4)
{
  uint64_t v5 = a3;
  uint64_t v20 = *MEMORY[0x1895F89C0];
  a1[4] += a3;
  uint64_t v8 = [a1 maxSkipBytes];
  if (v5)
  {
    unint64_t v9 = v8;
    unsigned __int8 v10 = 0;
    unsigned __int8 v11 = 0;
    do
    {
      int v13 = *a2++;
      unsigned __int8 v12 = v13;
      uint64_t v14 = v13;
      if (v13 < 0)
      {
      }

      else if (v14 <= 0x1F)
      {
        goto LABEL_9;
      }

      if ((v14 - 129) <= 0x17 && ((1 << (v14 + 127)) & 0x808085) != 0)
      {
LABEL_18:
        [a4 appendPlaceholder];
        unint64_t v17 = a1[8] + 1LL;
        a1[8] = v17;
        if (v17 > v9) {
          break;
        }
        unsigned __int8 v10 = 0;
        LOBYTE(v14) = 0;
        goto LABEL_25;
      }

      if (v14 >= 0x7F)
      {
        ++a1[18];
LABEL_22:
        v19[0] = v11;
        v19[1] = v10;
        void v19[2] = v14;
        if ([(id)qword_18C496B70 indexForBytes:v19 length:3] != 0x7FFFFFFFFFFFFFFFLL) {
          ++a1[16];
        }
        goto LABEL_24;
      }

uint64_t _WINDOWS1254_recognize(void *a1, char *a2, uint64_t a3, void *a4)
{
  uint64_t v5 = a3;
  uint64_t v25 = *MEMORY[0x1895F89C0];
  a1[4] += a3;
  uint64_t v8 = [a1 maxSkipBytes];
  if (v5)
  {
    unint64_t v9 = v8;
    unsigned __int8 v10 = 0;
    unsigned __int8 v11 = 0;
    while (1)
    {
      int v13 = *a2++;
      unsigned __int8 v12 = v13;
      uint64_t v14 = v13;
      BOOL v19 = (_DWORD)v14 == 13
         || (v14 - 32) < 0xDFu
         || (_DWORD)v14 == 10
         || (v14 & 0xFFFFFFFB) == 8
         || (_DWORD)v14 == 9;
      BOOL v20 = (_DWORD)v14 == 129 || !v19;
      if (v20 || ((v14 - 141) <= 0x11 ? (BOOL v21 = ((1 << (v14 + 115)) & 0x3000F) == 0) : (BOOL v21 = 1), !v21))
      {
        [a4 appendPlaceholder];
        unint64_t v22 = a1[8] + 1LL;
        a1[8] = v22;
        if (v22 > v9) {
          goto LABEL_41;
        }
        unsigned __int8 v10 = 0;
        LOBYTE(v14) = 0;
        goto LABEL_31;
      }

      ++a1[17];
      if (v10 > 0x7Eu || v11 >= 0x7Fu) {
        goto LABEL_38;
      }
LABEL_40:
      [a4 appendByte:v14];
LABEL_31:
      unsigned __int8 v11 = v10;
      unsigned __int8 v10 = v14;
      if (!--v5) {
        goto LABEL_41;
      }
    }

    ++a1[18];
LABEL_38:
    v24[0] = v11;
    v24[1] = v10;
    void v24[2] = v14;
    if ([(id)qword_18C496B78 indexForBytes:v24 length:3] != 0x7FFFFFFFFFFFFFFFLL) {
      ++a1[16];
    }
    goto LABEL_40;
  }

uint64_t _WINDOWS1258_recognize(void *a1, char *a2, uint64_t a3, void *a4)
{
  uint64_t v5 = a3;
  uint64_t v23 = *MEMORY[0x1895F89C0];
  a1[4] += a3;
  unint64_t v21 = [a1 maxSkipBytes];
  if (v5)
  {
    unsigned __int8 v8 = 0;
    unsigned __int8 v9 = 0;
    while (1)
    {
      int v11 = *a2++;
      unsigned __int8 v10 = v11;
      uint64_t v12 = v11;
      BOOL v13 = (v12 + 111) >= 0xFCu || (_DWORD)v12 == 138;
      BOOL v14 = v13 || (_DWORD)v12 == 129;
      BOOL v15 = v14 || (_DWORD)v12 == 154;
      BOOL v16 = v15 || (v12 + 97) >= 0xFEu;
      [a4 appendPlaceholder];
      unint64_t v19 = a1[8] + 1LL;
      a1[8] = v19;
      if (v19 > v21) {
        goto LABEL_38;
      }
      unsigned __int8 v8 = 0;
      LOBYTE(v12) = 0;
LABEL_34:
      unsigned __int8 v9 = v8;
      unsigned __int8 v8 = v12;
      if (!--v5) {
        goto LABEL_38;
      }
    }

    BOOL v18 = a1 + 17;
    if ((v12 - 32) >= 0x5F) {
LABEL_27:
    }
      BOOL v18 = a1 + 18;
    ++*v18;
    if (v8 > 0x7Eu || v9 > 0x7Eu || v12 >= 0x7F)
    {
      v22[0] = v9;
      v22[1] = v8;
      _DWORD v22[2] = v12;
      if ([(id)qword_18C496B80 indexForBytes:v22 length:3] != 0x7FFFFFFFFFFFFFFFLL) {
        ++a1[16];
      }
    }

    [a4 appendByte:v12];
    goto LABEL_34;
  }

uint64_t generateStringWithEncoding(void *a1, uint64_t a2, uint64_t a3, int a4, int a5, uint64_t a6, BOOL *a7)
{
  v28[1] = *MEMORY[0x1895F89C0];
  if (!a4)
  {
    BOOL v13 = 0LL;
    if (!a7) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }

  BOOL v13 =  -[NSString initWithBytes:length:encoding:]( [NSString alloc],  "initWithBytes:length:encoding:",  a2,  a3,  [a1 nsEncoding]);
  if (a7) {
LABEL_5:
  }
    *a7 = 0;
LABEL_6:
  if (a6) {
    BOOL v14 = v13 == 0LL;
  }
  else {
    BOOL v14 = 0;
  }
  if (v14) {
    uint64_t v15 = 0LL;
  }
  else {
    uint64_t v15 = (uint64_t)v13;
  }
  if (v14 && a5)
  {
    id v16 = +[NSEncodingDetectionPlaceholder placeholderForDetector:]( &OBJC_CLASS___NSEncodingDetectionPlaceholder,  "placeholderForDetector:",  a1);
    uint64_t v17 = a1[8];
    uint64_t v18 = [v16 bytesLength];
    v28[0] = v28;
    unint64_t v19 = a3 + (v18 + 7) * v17;
    MEMORY[0x1895F8858](v18);
    BOOL v20 = objc_alloc(&OBJC_CLASS___NSEncodingDetectionBuffer);
    uint64_t v21 = [a1 nsEncoding];
    uint64_t v22 = [a1 cfEncoding];
    if (v19 < 0x101)
    {
      uint64_t v23 = &v27;
      uint64_t v24 = 256LL;
    }

    else
    {
      uint64_t v23 = 0LL;
      uint64_t v24 = v19;
    }

    uint64_t v25 = -[NSEncodingDetectionBuffer initWithNSStringEncoding:CFStringEncoding:stackBuffer:bufferLength:placeholder:]( v20,  "initWithNSStringEncoding:CFStringEncoding:stackBuffer:bufferLength:placeholder:",  v21,  v22,  v23,  v24,  v16);
    [a1 softReset];
    [a1 recognizeString:a2 withDataLength:a3 intoBuffer:v25];
    uint64_t v15 = -[NSEncodingDetectionBuffer stringWithLossySubsitutionString:](v25, "stringWithLossySubsitutionString:", a6);

    if (a7) {
      *a7 = a1[12] != 0LL;
    }
  }

  return v15;
}

uint64_t checkSuggestedEncodings(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v12 = *MEMORY[0x1895F89C0];
  uint64_t v6 = 0LL;
  BOOL v7 = &v6;
  uint64_t v8 = 0x3052000000LL;
  unsigned __int8 v9 = __Block_byref_object_copy__12;
  unsigned __int8 v10 = __Block_byref_object_dispose__12;
  uint64_t v11 = 0LL;
  v5[0] = MEMORY[0x1895F87A8];
  v5[1] = 3221225472LL;
  uint64_t v5[2] = __checkSuggestedEncodings_block_invoke;
  v5[3] = &unk_189C9FF50;
  v5[5] = a1;
  _OWORD v5[6] = a2;
  v5[4] = &v6;
  [a3 enumerateKeysAndObjectsUsingBlock:v5];
  uint64_t v3 = v7[5];
  _Block_object_dispose(&v6, 8);
  return v3;
}

void sub_1835FDE90( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
}

uint64_t getAllDetectors(uint64_t a1, void *a2, unsigned int *a3, uint64_t a4, void *a5, void *a6, char a7)
{
  uint64_t v18 = a2;
  uint64_t v12 = 0LL;
  do
  {
    unsigned int v14 = *a3++;
    uint64_t v13 = v14;
    uint64_t v15 = +[NSNumber numberWithUnsignedInt:](&OBJC_CLASS___NSNumber, "numberWithUnsignedInt:", v14, v18);
    uint64_t result = [a6 objectForKey:v15];
    if (!result)
    {
      uint64_t result = objc_msgSend( a5,  "objectForKey:",  +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", v13));
      id v17 = (id)result;
      if (!result && (a7 & 1) == 0)
      {
        id v17 = +[NSEncodingDetector detectorForCFStringEncoding:allowBackupDetectors:]( &OBJC_CLASS___NSEncodingDetector,  "detectorForCFStringEncoding:allowBackupDetectors:",  v13,  0LL);
        uint64_t result = [a5 setObject:v17 forKey:v15];
      }

      if (v17) {
        *(void *)(a1 + 8 * v12++) = v17;
      }
    }

    --a4;
  }

  while (a4);
  void *v18 = v12;
  return result;
}

uint64_t increaseWeightsOfEncodings(uint64_t result, unsigned int *a2, uint64_t a3)
{
  if (a3 >= 1)
  {
    uint64_t v15 = v10;
    uint64_t v16 = v9;
    uint64_t v17 = v6;
    uint64_t v18 = v5;
    uint64_t v19 = v4;
    uint64_t v20 = v3;
    uint64_t v21 = v7;
    uint64_t v22 = v8;
    uint64_t v11 = a3;
    uint64_t v13 = (void *)result;
    do
    {
      unsigned int v14 = *a2++;
      uint64_t result = objc_msgSend( v13,  "objectForKey:",  +[NSNumber numberWithUnsignedInt:]( NSNumber,  "numberWithUnsignedInt:",  v14,  v15,  v16,  v17,  v18,  v19,  v20,  v21,  v22));
      if (result) {
        *(double *)(result + 152) = *(double *)(result + 152) * 5.0;
      }
      --v11;
    }

    while (v11);
  }

  return result;
}

uint64_t compareTwoDetectors(uint64_t a1, uint64_t a2)
{
  unsigned int v2 = *(_DWORD *)(*(void *)a1 + 164LL);
  unsigned int v3 = *(_DWORD *)(*(void *)a2 + 164LL);
  BOOL v4 = v2 > v3;
  BOOL v5 = v2 < v3;
  if (v4) {
    return 0xFFFFFFFFLL;
  }
  else {
    return v5;
  }
}

uint64_t recognizeISO2022JP( uint64_t a1, unint64_t a2, void *a3, void *a4, void *a5, void *a6, unint64_t *a7, uint64_t a8, unint64_t a9, unint64_t a10, char *a11, uint64_t a12, CFStringEncoding a13, void *a14, void *a15, void *a16, void *a17, unint64_t a18)
{
  unint64_t v19 = 0LL;
  char v57 = 0;
  unint64_t v20 = 0LL;
  uint64_t v48 = 0LL;
  uint64_t v51 = 0LL;
  uint64_t v54 = 0LL;
  uint64_t v21 = 0LL;
  int v42 = 0;
  uint64_t v56 = 0LL;
  uint64_t v39 = a15;
  uint64_t v65 = *MEMORY[0x1895F89C0];
  UInt8 bytes = 27;
  int v60 = 0;
  contentsDeallocator = (const __CFAllocator *)*MEMORY[0x189604DC8];
LABEL_2:
  BOOL v22 = 0;
LABEL_3:
  uint64_t v55 = v21;
  CFIndex v52 = v21 + 2;
  uint64_t v53 = v21 + 1;
  unint64_t v49 = v20;
LABEL_4:
  if (v19 <= a2) {
    unint64_t v23 = a2;
  }
  else {
    unint64_t v23 = v19;
  }
  unint64_t v50 = v19;
  while (v19 != v23)
  {
    UInt8 v24 = *(_BYTE *)(a1 + v19);
    if (v24 == 27)
    {
      if (a8 && v19 + 2 < a2)
      {
        unint64_t v25 = 0LL;
        uint64_t v26 = *(unsigned __int8 *)(v19 + a1 + 1);
        uint64_t v27 = *(unsigned __int8 *)(a1 + v19 + 2);
        while (__PAIR64__(v27, v26) != __PAIR64__(*(char *)(a8 + v25 + 1), *(char *)(a8 + v25)))
        {
          unint64_t v28 = v25 + 3;
          v25 += 2LL;
          if (v28 >= a9) {
            goto LABEL_16;
          }
        }

        BOOL v22 = v25 > a10;
        LOBYTE(v62) = *(_BYTE *)(v19 + a1 + 1);
        HIBYTE(v62) = v27;
        v19 += 3LL;
        [a17 appendByte1:27 byte2:v26 byte3:v27];
        LOBYTE(v60) = 27;
        BYTE1(v60) = v26;
        uint64_t v21 = 3LL;
        BYTE2(v60) = v27;
        goto LABEL_49;
      }

unint64_t recognizeUTF16( unsigned __int16 *a1, unint64_t a2, int a3, void *a4, void *a5, void *a6, void *a7, _BYTE *a8, void *a9, void *a10)
{
  int v16 = *a1;
  BOOL v17 = v16 == 65534 || v16 == 65279;
  if (v17)
  {
    objc_msgSend(a9, "appendUTF16Char:");
    unint64_t v19 = 1LL;
    *a8 = 1;
  }

  else
  {
    unint64_t v19 = 0LL;
  }

  if (v19 < a2 >> 1)
  {
    uint64_t v32 = a5;
    uint64_t v34 = 0LL;
    unint64_t v20 = a2 >> 1;
    unint64_t v21 = v19;
    while (1)
    {
      unsigned int v22 = __rev16(a1[v21]);
      if (!a3) {
        unsigned int v22 = a1[v21];
      }
      if (v22 <= 0xFFFD)
      {
        int v23 = v22 & 0xFC00;
        if ((unsigned __int16)(v22 + 560) >= 0x20u && v23 != 56320)
        {
          if (v23 == 55296)
          {
            unint64_t v25 = v21 + 1;
            if (v21 + 1 >= v20) {
              goto LABEL_18;
            }
            unsigned int v26 = bswap32(a1[v25]) >> 16;
            if (!a3) {
              LOWORD(v26) = a1[v25];
            }
            if ((unsigned __int16)v26 >> 10 == 55)
            {
              uint64_t v27 = 0LL;
              unsigned __int16 v28 = v26 & 0xFFFE;
              while (v28 != 57342 || v22 != (unsigned __int16)invalidUTF16Chars[v27])
              {
                if (++v27 == 16)
                {
                  ++v19;
                  ++*v32;
                  unint64_t v29 = v21 + 2;
                  [a9 appendUTF16Char:a1[v29]];
                  [a9 appendUTF16Char:a1[v25]];
                  unint64_t v25 = v29;
                  goto LABEL_18;
                }
              }
            }
          }

          else if ((unsigned __int16)((unsigned __int16)(v22 + 0x2000) >> 11) <= 0x1Eu)
          {
            BOOL v17 = v22 == 0;
            uint64_t v30 = v34;
            if (v17) {
              uint64_t v30 = v34 + 1;
            }
            uint64_t v34 = v30;
            ++v19;
            [a9 appendUTF16Char:v32];
            unint64_t v25 = v21 + 1;
            goto LABEL_18;
          }
        }
      }

      objc_msgSend(a9, "appendPlaceholder", v32);
      ++*a7;
      *a6 += 2LL;
      unint64_t v25 = v21 + 2;
LABEL_18:
      unint64_t v21 = v25;
      if (v25 >= v20) {
        goto LABEL_35;
      }
    }
  }

  uint64_t v34 = 0LL;
  unint64_t v19 = 1LL;
LABEL_35:
  *a4 += v19;
  *a10 = v34;
  return v19;
}

unint64_t recognizeUTF32( _DWORD *a1, unint64_t a2, int a3, void *a4, void *a5, void *a6, _BYTE *a7, void *a8)
{
  if (*a1 == 65534 || *a1 == 65279)
  {
    objc_msgSend(a8, "appendUTF32Char:");
    unint64_t v17 = 1LL;
    *a7 = 1;
  }

  else
  {
    unint64_t v17 = 0LL;
  }

  unint64_t v18 = a2 >> 2;
  uint64_t v19 = 0LL;
  unint64_t v20 = v18 - v17;
  if (v18 <= v17)
  {
    unint64_t v17 = 1LL;
  }

  else
  {
    unint64_t v21 = &a1[v17];
    do
    {
      unsigned int v23 = *v21++;
      unsigned int v22 = v23;
      unsigned int v24 = bswap32(v23);
      if (!a3) {
        unsigned int v24 = v22;
      }
      if (v24 >> 11 < 0x1B || (v24 - 57344) >> 13 <= 0x80)
      {
        ++v17;
        objc_msgSend(a8, "appendUTF32Char:");
      }

      else
      {
        [a8 appendPlaceholder];
        ++*a6;
        v19 += 4LL;
      }

      --v20;
    }

    while (v20);
  }

  *a4 += v17;
  *a5 = v19;
  return v17;
}

id __initializeResources_block_invoke()
{
  id result = (id)[MEMORY[0x189603F68] sharedKeySetForKeys:&unk_189D1CE00];
  _MergedGlobals_117 = (uint64_t)result;
  return result;
}

void *__initializeDics_block_invoke()
{
  qword_18C496A90 = (uint64_t)-[_NSSharedKeySetS initWithConfiguration:]( objc_alloc(&OBJC_CLASS____NSSharedKeySetS),  (uint64_t)&_NSMostCommonChineseCharsKeySetConfig);
  qword_18C496AA0 = (uint64_t)-[_NSSharedKeySetS initWithConfiguration:]( objc_alloc(&OBJC_CLASS____NSSharedKeySetS),  (uint64_t)&_NSMostCommonJapaneseCharsKeySetConfig);
  qword_18C496AB0 = (uint64_t)-[_NSSharedKeySetS initWithConfiguration:]( objc_alloc(&OBJC_CLASS____NSSharedKeySetS),  (uint64_t)&_NSMostCommonKoreanCharsKeySetConfig);
  qword_18C496A98 = (uint64_t)-[_NSSharedKeySetS initWithConfiguration:]( objc_alloc(&OBJC_CLASS____NSSharedKeySetS),  (uint64_t)&_NSChineseBigramKeySetConfig);
  qword_18C496AA8 = (uint64_t)-[_NSSharedKeySetS initWithConfiguration:]( objc_alloc(&OBJC_CLASS____NSSharedKeySetS),  (uint64_t)&_NSJapaneseBigramKeySetConfig);
  qword_18C496AB8 = (uint64_t)-[_NSSharedKeySetS initWithConfiguration:]( objc_alloc(&OBJC_CLASS____NSSharedKeySetS),  (uint64_t)&_NSKoreanBigramKeySetConfig);
  qword_18C496AC8 = (uint64_t)-[_NSSharedKeySetS initWithConfiguration:]( objc_alloc(&OBJC_CLASS____NSSharedKeySetS),  (uint64_t)&__NSISOLatin1TrigramKeySetConfig);
  qword_18C496AD8 = (uint64_t)-[_NSSharedKeySetS initWithConfiguration:]( objc_alloc(&OBJC_CLASS____NSSharedKeySetS),  (uint64_t)&__NSISOLatin2TrigramKeySetConfig);
  qword_18C496AE0 = (uint64_t)-[_NSSharedKeySetS initWithConfiguration:]( objc_alloc(&OBJC_CLASS____NSSharedKeySetS),  (uint64_t)&__NSISOLatin3TrigramKeySetConfig);
  qword_18C496AE8 = (uint64_t)-[_NSSharedKeySetS initWithConfiguration:]( objc_alloc(&OBJC_CLASS____NSSharedKeySetS),  (uint64_t)&__NSISOLatin4TrigramKeySetConfig);
  qword_18C496AF0 = (uint64_t)-[_NSSharedKeySetS initWithConfiguration:]( objc_alloc(&OBJC_CLASS____NSSharedKeySetS),  (uint64_t)&__NSISOLatin5TrigramKeySetConfig);
  qword_18C496AF8 = (uint64_t)-[_NSSharedKeySetS initWithConfiguration:]( objc_alloc(&OBJC_CLASS____NSSharedKeySetS),  (uint64_t)&__NSISOLatin6TrigramKeySetConfig);
  qword_18C496B00 = (uint64_t)-[_NSSharedKeySetS initWithConfiguration:]( objc_alloc(&OBJC_CLASS____NSSharedKeySetS),  (uint64_t)&__NSISOLatin7TrigramKeySetConfig);
  qword_18C496B08 = (uint64_t)-[_NSSharedKeySetS initWithConfiguration:]( objc_alloc(&OBJC_CLASS____NSSharedKeySetS),  (uint64_t)&__NSISOLatin8TrigramKeySetConfig);
  qword_18C496B10 = (uint64_t)-[_NSSharedKeySetS initWithConfiguration:]( objc_alloc(&OBJC_CLASS____NSSharedKeySetS),  (uint64_t)&__NSISOLatin9TrigramKeySetConfig);
  qword_18C496AD0 = (uint64_t)-[_NSSharedKeySetS initWithConfiguration:]( objc_alloc(&OBJC_CLASS____NSSharedKeySetS),  (uint64_t)&__NSISOLatin10TrigramKeySetConfig);
  qword_18C496B20 = (uint64_t)-[_NSSharedKeySetS initWithConfiguration:]( objc_alloc(&OBJC_CLASS____NSSharedKeySetS),  (uint64_t)&__NSISO88595TrigramKeySetConfig);
  qword_18C496B18 = (uint64_t)-[_NSSharedKeySetS initWithConfiguration:]( objc_alloc(&OBJC_CLASS____NSSharedKeySetS),  (uint64_t)&__NSISO88596TrigramKeySetConfig);
  qword_18C496B28 = (uint64_t)-[_NSSharedKeySetS initWithConfiguration:]( objc_alloc(&OBJC_CLASS____NSSharedKeySetS),  (uint64_t)&__NSISO88597TrigramKeySetConfig);
  qword_18C496B30 = (uint64_t)-[_NSSharedKeySetS initWithConfiguration:]( objc_alloc(&OBJC_CLASS____NSSharedKeySetS),  (uint64_t)&__NSISO88598TrigramKeySetConfig);
  qword_18C496B38 = (uint64_t)-[_NSSharedKeySetS initWithConfiguration:]( objc_alloc(&OBJC_CLASS____NSSharedKeySetS),  (uint64_t)&__NSISO885911TrigramKeySetConfig);
  qword_18C496AC0 = (uint64_t)-[_NSSharedKeySetS initWithConfiguration:]( objc_alloc(&OBJC_CLASS____NSSharedKeySetS),  (uint64_t)&__NSWindows874TrigramKeySetConfig);
  qword_18C496B50 = (uint64_t)-[_NSSharedKeySetS initWithConfiguration:]( objc_alloc(&OBJC_CLASS____NSSharedKeySetS),  (uint64_t)&__NSWindows1251TrigramKeySetConfig);
  qword_18C496B68 = (uint64_t)-[_NSSharedKeySetS initWithConfiguration:]( objc_alloc(&OBJC_CLASS____NSSharedKeySetS),  (uint64_t)&__NSWindows1252TrigramKeySetConfig);
  qword_18C496B70 = (uint64_t)-[_NSSharedKeySetS initWithConfiguration:]( objc_alloc(&OBJC_CLASS____NSSharedKeySetS),  (uint64_t)&__NSWindows1250TrigramKeySetConfig);
  qword_18C496B58 = (uint64_t)-[_NSSharedKeySetS initWithConfiguration:]( objc_alloc(&OBJC_CLASS____NSSharedKeySetS),  (uint64_t)&__NSWindows1253TrigramKeySetConfig);
  qword_18C496B78 = (uint64_t)-[_NSSharedKeySetS initWithConfiguration:]( objc_alloc(&OBJC_CLASS____NSSharedKeySetS),  (uint64_t)&__NSWindows1254TrigramKeySetConfig);
  qword_18C496B60 = (uint64_t)-[_NSSharedKeySetS initWithConfiguration:]( objc_alloc(&OBJC_CLASS____NSSharedKeySetS),  (uint64_t)&__NSWindows1255TrigramKeySetConfig);
  qword_18C496B40 = (uint64_t)-[_NSSharedKeySetS initWithConfiguration:]( objc_alloc(&OBJC_CLASS____NSSharedKeySetS),  (uint64_t)&__NSWindows1256TrigramKeySetConfig);
  qword_18C496B48 = (uint64_t)-[_NSSharedKeySetS initWithConfiguration:]( objc_alloc(&OBJC_CLASS____NSSharedKeySetS),  (uint64_t)&__NSWindows1257TrigramKeySetConfig);
  id result = -[_NSSharedKeySetS initWithConfiguration:]( objc_alloc(&OBJC_CLASS____NSSharedKeySetS),  (uint64_t)&__NSWindows1258TrigramKeySetConfig);
  qword_18C496B80 = (uint64_t)result;
  return result;
}

void __Block_byref_object_copy__12(uint64_t a1, uint64_t a2)
{
}

void __Block_byref_object_dispose__12(uint64_t a1)
{
}

{
  _Block_object_dispose(*(const void **)(a1 + 40), 135);
}

uint64_t __checkSuggestedEncodings_block_invoke(uint64_t result, uint64_t a2, uint64_t a3, _BYTE *a4)
{
  if (*(double *)(a3 + 152) > 1.0)
  {
    uint64_t v6 = result;
    if ([(id)a3 recognizeString:*(void *)(result + 40) withDataLength:*(void *)(result + 48) intoBuffer:0])
    {
      if (!*(void *)(a3 + 64))
      {
        *(void *)(*(void *)(*(void *)(v6 + 32) + 8LL) + 40LL) = a3;
        *a4 = 1;
      }
    }

    return [(id)a3 softReset];
  }

  return result;
}

void sub_1835FF5E8(_Unwind_Exception *a1)
{
}

void sub_1835FF660(_Unwind_Exception *a1)
{
}

void sub_1835FFE64( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, char a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, char a29, uint64_t a30, uint64_t a31, uint64_t a32, char a33)
{
}

void __Block_byref_object_copy__13(uint64_t a1, uint64_t a2)
{
}

void __Block_byref_object_dispose__13(uint64_t a1)
{
}

void __Block_byref_object_copy__32(uint64_t a1, uint64_t a2)
{
}

{
  _Block_object_assign((void *)(a1 + 40), *(const void **)(a2 + 40), 131);
}

void __Block_byref_object_dispose__33(uint64_t a1)
{
}

{
  _Block_object_dispose(*(const void **)(a1 + 40), 131);
}

void sub_18360026C(_Unwind_Exception *a1)
{
}

void sub_1836003CC(_Unwind_Exception *a1)
{
}

void sub_1836004F0(_Unwind_Exception *a1)
{
}

void sub_183600660(_Unwind_Exception *a1)
{
}

void sub_183600964(_Unwind_Exception *a1)
{
}

void sub_183600C20(_Unwind_Exception *a1)
{
}

void sub_183600D48(_Unwind_Exception *a1)
{
}

void sub_183600EC4(_Unwind_Exception *a1)
{
}

void sub_183601034(_Unwind_Exception *a1)
{
}

void sub_1836013CC(_Unwind_Exception *a1)
{
}

void sub_183601660(_Unwind_Exception *a1)
{
}

void sub_1836017A0(_Unwind_Exception *a1)
{
}

uint64_t _bestMatchConformingToTypes(void *a1, void *a2)
{
  uint64_t v35 = *MEMORY[0x1895F89C0];
  __int128 v31 = 0u;
  __int128 v32 = 0u;
  __int128 v33 = 0u;
  __int128 v34 = 0u;
  uint64_t v4 = [a1 countByEnumeratingWithState:&v31 objects:v30 count:16];
  if (v4)
  {
    uint64_t v5 = v4;
    uint64_t v6 = *(void *)v32;
LABEL_3:
    uint64_t v7 = 0LL;
    while (1)
    {
      if (*(void *)v32 != v6) {
        objc_enumerationMutation(a1);
      }
      uint64_t v8 = *(void *)(*((void *)&v31 + 1) + 8 * v7);
      if ([a2 containsObject:v8]) {
        break;
      }
      if (v5 == ++v7)
      {
        uint64_t v5 = [a1 countByEnumeratingWithState:&v31 objects:v30 count:16];
        if (v5) {
          goto LABEL_3;
        }
        goto LABEL_9;
      }
    }
  }

  else
  {
LABEL_9:
    __int128 v28 = 0u;
    __int128 v29 = 0u;
    __int128 v26 = 0u;
    __int128 v27 = 0u;
    uint64_t v9 = [a1 countByEnumeratingWithState:&v26 objects:v25 count:16];
    if (v9)
    {
      uint64_t v10 = v9;
      uint64_t v11 = *(void *)v27;
      uint64_t v19 = *(void *)v27;
      while (2)
      {
        for (uint64_t i = 0LL; i != v10; ++i)
        {
          if (*(void *)v27 != v11) {
            objc_enumerationMutation(a1);
          }
          uint64_t v13 = *(void *)(*((void *)&v26 + 1) + 8 * i);
          __int128 v21 = 0u;
          __int128 v22 = 0u;
          __int128 v23 = 0u;
          __int128 v24 = 0u;
          uint64_t v14 = [a2 countByEnumeratingWithState:&v21 objects:v20 count:16];
          if (v14)
          {
            uint64_t v15 = v14;
            uint64_t v16 = *(void *)v22;
LABEL_16:
            uint64_t v17 = 0LL;
            while (1)
            {
              if (*(void *)v22 != v16) {
                objc_enumerationMutation(a2);
              }
              uint64_t v8 = *(void *)(*((void *)&v21 + 1) + 8 * v17);
              if (v15 == ++v17)
              {
                uint64_t v15 = [a2 countByEnumeratingWithState:&v21 objects:v20 count:16];
                if (v15) {
                  goto LABEL_16;
                }
                break;
              }
            }
          }

          uint64_t v11 = v19;
        }

        uint64_t v10 = [a1 countByEnumeratingWithState:&v26 objects:v25 count:16];
        uint64_t v8 = 0LL;
        if (v10) {
          continue;
        }
        break;
      }
    }

    else
    {
      return 0LL;
    }
  }

  return v8;
}

void sub_183602AA8(_Unwind_Exception *a1)
{
}

void sub_183602D24(_Unwind_Exception *a1)
{
}

void sub_183602E38(_Unwind_Exception *a1)
{
}

void sub_1836030D0(_Unwind_Exception *a1)
{
}

void sub_1836031FC(_Unwind_Exception *a1)
{
}

void sub_183603370(_Unwind_Exception *a1)
{
}

void sub_1836034D0(_Unwind_Exception *a1)
{
}

void _asyncDispatchBlockWithOptions(void *a1, void *a2)
{
  if (objc_msgSend( (id)objc_msgSend(a1, "objectForKeyedSubscript:", @"NSItemProviderOptionsDispatchMode"),  "isEqualToString:",  @"NSItemProviderOptionsDispatchModeAsynchronous")) {
    dispatch_queue_global_t global_queue = dispatch_get_global_queue(0LL, 0LL);
  }
  else {
    dispatch_queue_global_t global_queue = (dispatch_queue_global_t)MEMORY[0x1895F8AE0];
  }
  dispatch_async(global_queue, a2);
}

void sub_1836041CC( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, id location)
{
}

void sub_1836048A4(_Unwind_Exception *a1)
{
}

void sub_183604AA0(_Unwind_Exception *a1)
{
}

uint64_t initUTTypeConformsTo_0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = MobileCoreServicesLibrary();
  uint64_t v5 = (uint64_t (*)(void))dlsym(v4, "UTTypeConformsTo");
  off_18C4917C0 = v5;
  if (!v5) {
    __assert_rtn("initUTTypeConformsTo", "NSItemProvider.m", 25, "softLinkUTTypeConformsTo");
  }
  return ((uint64_t (*)(uint64_t, uint64_t))v5)(a1, a2);
}

void *MobileCoreServicesLibrary()
{
  id result = (void *)MobileCoreServicesLibrary_frameworkLibrary_1;
  if (!MobileCoreServicesLibrary_frameworkLibrary_1)
  {
    id result = dlopen("/System/Library/Frameworks/MobileCoreServices.framework/MobileCoreServices", 2);
    MobileCoreServicesLibrary_frameworkLibrary_1 = (uint64_t)result;
    if (!result) {
      __assert_rtn("MobileCoreServicesLibrary", "NSItemProvider.m", 24, "frameworkLibrary");
    }
  }

  return result;
}

uint64_t initUTTypeCreatePreferredIdentifierForTag(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = MobileCoreServicesLibrary();
  uint64_t v7 = (uint64_t (*)())dlsym(v6, "UTTypeCreatePreferredIdentifierForTag");
  off_18C4917C8[0] = v7;
  if (!v7) {
    __assert_rtn( "initUTTypeCreatePreferredIdentifierForTag",  "NSItemProvider.m",  26,  "softLinkUTTypeCreatePreferredIdentifierForTag");
  }
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v7)(a1, a2, a3);
}

uint64_t initkUTTagClassFilenameExtension()
{
  int v0 = MobileCoreServicesLibrary();
  uint64_t v1 = (uint64_t *)dlsym(v0, "kUTTagClassFilenameExtension");
  if (!v1) {
    __assert_rtn("initkUTTagClassFilenameExtension", "NSItemProvider.m", 27, "constant");
  }
  uint64_t result = *v1;
  constantkUTTagClassFilenameExtension = result;
  _MergedGlobals_84[0] = kUTTagClassFilenameExtensionFunction;
  return result;
}

uint64_t kUTTagClassFilenameExtensionFunction()
{
  return constantkUTTagClassFilenameExtension;
}

uint64_t initkUTTypeData_0()
{
  int v0 = MobileCoreServicesLibrary();
  uint64_t v1 = (uint64_t *)dlsym(v0, "kUTTypeData");
  if (!v1) {
    __assert_rtn("initkUTTypeData", "NSItemProvider.m", 28, "constant");
  }
  uint64_t result = *v1;
  constantkUTTypeData_0 = result;
  off_18C4917B0[0] = kUTTypeDataFunction_0;
  return result;
}

uint64_t kUTTypeDataFunction_0()
{
  return constantkUTTypeData_0;
}

uint64_t initkUTTypeURL_0()
{
  int v0 = MobileCoreServicesLibrary();
  uint64_t v1 = (uint64_t *)dlsym(v0, "kUTTypeURL");
  if (!v1) {
    __assert_rtn("initkUTTypeURL", "NSItemProvider.m", 30, "constant");
  }
  uint64_t result = *v1;
  constantkUTTypeURL_0 = result;
  off_18C4917B8[0] = kUTTypeURLFunction_0;
  return result;
}

uint64_t kUTTypeURLFunction_0()
{
  return constantkUTTypeURL_0;
}

uint64_t _bestMatchType(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v17 = *MEMORY[0x1895F89C0];
  if ([a2 containsObject:a1]) {
    return a1;
  }
  __int128 v15 = 0u;
  __int128 v16 = 0u;
  __int128 v13 = 0u;
  __int128 v14 = 0u;
  uint64_t v7 = [a2 countByEnumeratingWithState:&v13 objects:v12 count:16];
  if (!v7) {
    return 0LL;
  }
  uint64_t v8 = v7;
  uint64_t v9 = *(void *)v14;
LABEL_5:
  uint64_t v10 = 0LL;
  while (1)
  {
    if (*(void *)v14 != v9) {
      objc_enumerationMutation(a2);
    }
    uint64_t v6 = *(void *)(*((void *)&v13 + 1) + 8 * v10);
    if (v8 == ++v10)
    {
      uint64_t v8 = [a2 countByEnumeratingWithState:&v13 objects:v12 count:16];
      uint64_t v6 = 0LL;
      if (v8) {
        goto LABEL_5;
      }
      return v6;
    }
  }

BOOL ___bestMatchConformingToType_block_invoke(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return off_18C4917C0(a3) != 0;
}

BOOL ___bestMatchToConformingType_block_invoke(uint64_t a1, uint64_t a2)
{
  return off_18C4917C0(a2) != 0;
}

id ___synchronousCoordinatedRead_block_invoke(void *a1)
{
  id result = (id)(*(uint64_t (**)(void))(a1[4] + 16LL))();
  *(void *)(*(void *)(a1[5] + 8LL) + 40LL) = result;
  *(_BYTE *)(*(void *)(a1[6] + 8LL) + 24LL) = 1;
  return result;
}

uint64_t sub_183605D04()
{
  return 0LL;
}

uint64_t sub_183605D44()
{
  return 0x7FFFFFFFFFFFFFFFLL;
}

uint64_t sub_183605D84()
{
  return 0x7FFFFFFFFFFFFFFFLL;
}

uint64_t sub_183605DC4()
{
  return 0LL;
}

uint64_t sub_1836065F4()
{
  return 0LL;
}

uint64_t sub_183606C58()
{
  return 0LL;
}

uint64_t sub_183606C98()
{
  return 0LL;
}

uint64_t sub_18360705C()
{
  return v0;
}

SEL __methodDescriptionForSelector(Class cls, SEL name)
{
  uint64_t v18 = *MEMORY[0x1895F89C0];
  if (cls)
  {
    Superclass = cls;
    while (1)
    {
      outuint64_t Count = 0;
      uint64_t v5 = class_copyProtocolList(Superclass, &outCount);
      uint64_t v6 = v5;
      if (outCount) {
        break;
      }
      if (v5) {
LABEL_10:
      }
        free(v6);
      Superclass = class_getSuperclass(Superclass);
      if (!Superclass) {
        goto LABEL_12;
      }
    }

    uint64_t v7 = 0LL;
    while (1)
    {
      uint64_t v8 = v6[v7];
      isMetaClass Class = class_isMetaClass(Superclass);
      SEL v10 = protocol_getMethodDescription(v8, name, 1, !isMetaClass).name;
      if (v10) {
        break;
      }
      uint64_t v11 = v6[v7];
      BOOL v12 = class_isMetaClass(Superclass);
      SEL v10 = protocol_getMethodDescription(v11, name, 0, !v12).name;
      if (v10) {
        break;
      }
    }

    SEL v15 = v10;
    free(v6);
  }

  else
  {
LABEL_12:
    Method InstanceMethod = class_getInstanceMethod(cls, name);
    if (InstanceMethod)
    {
      __int128 v14 = InstanceMethod;
      SEL v15 = method_getName(InstanceMethod);
      method_getTypeEncoding(v14);
    }

    else
    {
      return 0LL;
    }
  }

  return v15;
}

BOOL _NSIPGetExpectedClassFromCompletionBlock(void *a1, void *a2, NSError **a3)
{
  BOOL has_signature = _Block_has_signature(a1);
  if (has_signature)
  {
    uint64_t v7 = (void *)[MEMORY[0x189603FA0] signatureWithObjCTypes:_Block_signature(a1)];
    if (a2) {
      *a2 = [v7 _classForObjectAtArgumentIndex:1];
    }
  }

  else if (a3)
  {
    uint64_t v8 = [(id)_NSFoundationBundle() localizedStringForKey:@"Unable to get block signature." value:&stru_189CA6A28 table:@"Extension"];
    *a3 = _makeError(-1LL, v8, 0LL);
  }

  return has_signature;
}

void _NSIPDispatchAsyncCallback(dispatch_block_t block)
{
  if (qword_18C497F18 != -1) {
    dispatch_once(&qword_18C497F18, &__block_literal_global_61);
  }
  dispatch_async((dispatch_queue_t)qword_18C497F10, block);
}

uint64_t _NSIPItemQueue()
{
  if (qword_18C497F08 != -1) {
    dispatch_once(&qword_18C497F08, &__block_literal_global_43);
  }
  return _MergedGlobals_1;
}

NSProgress *_NSIPCoordinatedRead(uint64_t a1, uint64_t a2)
{
  return _coordinatedFileAccess( (uint64_t)+[NSFileAccessIntent readingIntentWithURL:options:]( &OBJC_CLASS___NSFileAccessIntent,  "readingIntentWithURL:options:",  a1,  1LL),  a1,  a2);
}

NSProgress *_coordinatedFileAccess(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void v8[8] = *MEMORY[0x1895F89C0];
  uint64_t v6 = +[NSProgress discreteProgressWithTotalUnitCount:]( &OBJC_CLASS___NSProgress,  "discreteProgressWithTotalUnitCount:",  100LL);
  if (qword_18C497F28 != -1) {
    dispatch_once(&qword_18C497F28, &__block_literal_global_67);
  }
  v8[0] = MEMORY[0x1895F87A8];
  v8[1] = 3221225472LL;
  _DWORD v8[2] = ___coordinatedFileAccess_block_invoke;
  void v8[3] = &unk_189CA0838;
  v8[4] = a2;
  v8[5] = a1;
  v8[6] = v6;
  v8[7] = a3;
  [(id)qword_18C497F20 addOperationWithBlock:v8];
  return v6;
}

NSProgress *_NSIPCoordinatedReadForUploading(uint64_t a1, uint64_t a2)
{
  return _coordinatedFileAccess( (uint64_t)+[NSFileAccessIntent readingIntentWithURL:options:]( &OBJC_CLASS___NSFileAccessIntent,  "readingIntentWithURL:options:",  a1,  8LL),  a1,  a2);
}

NSProgress *_NSIPCoordinatedDelete(uint64_t a1, uint64_t a2)
{
  return _coordinatedFileAccess( (uint64_t)+[NSFileAccessIntent writingIntentWithURL:options:]( &OBJC_CLASS___NSFileAccessIntent,  "writingIntentWithURL:options:",  a1,  1LL),  a1,  a2);
}

uint64_t _NSIPTemporaryFileName(const __CFString *a1, NSError **a2)
{
  unsigned int v3 = a1;
  uint64_t v15 = *MEMORY[0x1895F89C0];
  if (a1)
  {
    uint64_t v4 = _MergedGlobals_85[0]();
    unsigned int v3 = (const __CFString *)(id)((uint64_t (*)(uint64_t, uint64_t))off_18C4917D8[0])( (uint64_t)v3,  v4);
  }

  -[NSString UTF8String]( -[NSString stringByAppendingPathComponent:]( NSTemporaryDirectory(),  "stringByAppendingPathComponent:",  +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @".%@.XXXXXX",  @"com.apple.Foundation.NSItemProvider")),  "UTF8String");
  __strlcpy_chk();
  int v5 = mkstemp(v14);
  if (v5 == -1)
  {
    SEL v10 = __error();
    uint64_t v11 = +[NSString stringWithFormat:](&OBJC_CLASS___NSString, "stringWithFormat:", @"%s", strerror(*v10));
    TemporaryFileError = _NSIPCannotCreateTemporaryFileError((uint64_t)v11, 0LL);
    uint64_t v9 = 0LL;
    if (a2 && TemporaryFileError)
    {
      uint64_t v9 = 0LL;
      *a2 = TemporaryFileError;
    }
  }

  else
  {
    int v6 = v5;
    if (v3) {
      uint64_t v7 = v3;
    }
    else {
      uint64_t v7 = @"tmp";
    }
    uint64_t v8 = -[NSString stringByAppendingPathExtension:]( +[NSString stringWithUTF8String:](&OBJC_CLASS___NSString, "stringWithUTF8String:", v14),  "stringByAppendingPathExtension:",  v7);
    uint64_t v9 = [MEMORY[0x189604030] fileURLWithPath:v8 isDirectory:0 relativeToURL:0];
    unlink(v14);
    close(v6);
  }

  return v9;
}

NSError *_NSIPCannotCreateTemporaryFileError(uint64_t a1, uint64_t a2)
{
  if (a1) {
    unsigned int v3 = +[NSString stringWithFormat:]( NSString,  "stringWithFormat:",  [(id)_NSFoundationBundle() localizedStringForKey:@"Cannot create a temporary file. Error: %@" value:&stru_189CA6A28 table:@"Extension"],  a1);
  }
  else {
    unsigned int v3 = (NSString *)[(id)_NSFoundationBundle() localizedStringForKey:@"Cannot create a temporary file." value:&stru_189CA6A28 table:@"Extension"];
  }
  return _makeError(-1LL, (uint64_t)v3, a2);
}

uint64_t _NSIPCloneToTemporaryDir(void *a1, const __CFString *a2, NSError **a3)
{
  v11[1] = *(NSError **)MEMORY[0x1895F89C0];
  v11[0] = 0LL;
  uint64_t v5 = _NSIPTemporaryFileName(a2, v11);
  int v6 = v11[0];
  if (!v5 || v11[0])
  {
    uint64_t v9 = (uint64_t)a1;
    uint64_t v8 = 0LL;
LABEL_7:
    int v6 = _NSIPCannotCopyFileError(v9, (uint64_t)v8, 0LL);
LABEL_8:
    uint64_t v5 = 0LL;
    if (!a3) {
      return v5;
    }
    goto LABEL_9;
  }

  if (copyfile( (const char *)objc_msgSend((id)objc_msgSend(a1, "path"), "fileSystemRepresentation"),  (const char *)objc_msgSend((id)objc_msgSend((id)v5, "path"), "fileSystemRepresentation"),  0,  0x10C800Fu))
  {
    uint64_t v7 = __error();
    uint64_t v8 = +[NSString stringWithFormat:](&OBJC_CLASS___NSString, "stringWithFormat:", @"%s", strerror(*v7));
    uint64_t v9 = (uint64_t)a1;
    goto LABEL_7;
  }

  int v6 = v11[0];
  if (!a3) {
    return v5;
  }
LABEL_9:
  if (v6) {
    *a3 = v6;
  }
  return v5;
}

NSError *_NSIPCannotCopyFileError(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2)
  {
    int v6 = (void *)_NSFoundationBundle();
    if (a1)
    {
      uint64_t v7 = [v6 localizedStringForKey:@"Cannot copy file at URL %@. Error: %@" value:&stru_189CA6A28 table:@"Extension"];
      uint64_t v10 = a1;
      uint64_t v11 = a2;
    }

    else
    {
      uint64_t v7 = [v6 localizedStringForKey:@"Cannot copy file. Error: %@" value:&stru_189CA6A28 table:@"Extension"];
      uint64_t v10 = a2;
    }

    uint64_t v8 = +[NSString stringWithFormat:](&OBJC_CLASS___NSString, "stringWithFormat:", v7, v10, v11);
  }

  else if (a1)
  {
    uint64_t v8 = +[NSString stringWithFormat:]( NSString,  "stringWithFormat:",  [(id)_NSFoundationBundle() localizedStringForKey:@"Cannot copy file at URL %@." value:&stru_189CA6A28 table:@"Extension"],  a1,  v11);
  }

  else
  {
    uint64_t v8 = (NSString *)[(id)_NSFoundationBundle() localizedStringForKey:@"Cannot copy file." value:&stru_189CA6A28 table:@"Extension"];
  }

  return _makeError(-1LL, (uint64_t)v8, a3);
}

char *_NSIPCreateTemporaryFolder()
{
  uint64_t v2 = *MEMORY[0x1895F89C0];
  -[NSString getFileSystemRepresentation:maxLength:]( -[NSString stringByAppendingPathComponent:]( NSTemporaryDirectory(),  "stringByAppendingPathComponent:",  +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @".%@.XXXXXX",  @"com.apple.Foundation.NSItemProvider")),  "getFileSystemRepresentation:maxLength:",  v1,  1024LL);
  -[NSFileManager createDirectoryAtPath:withIntermediateDirectories:attributes:error:]( +[NSFileManager defaultManager](&OBJC_CLASS___NSFileManager, "defaultManager"),  "createDirectoryAtPath:withIntermediateDirectories:attributes:error:",  NSTemporaryDirectory(),  1LL,  0LL,  0LL);
  id result = mkdtemp(v1);
  if (result) {
    return (char *)[MEMORY[0x189604030] fileURLWithFileSystemRepresentation:v1 isDirectory:1 relativeToURL:0];
  }
  return result;
}

id _NSIPFilenameWithProperExtension(void *a1, uint64_t a2)
{
  id v3 = (id)[a1 copy];
  if (![v3 length]) {
    id v3 = (id)softLinkUTTypeCopyDescription(a2);
  }
  if (![v3 length])
  {
    uint64_t v4 = getkUTTypeItem();
    id v3 = (id)softLinkUTTypeCopyDescription(v4);
  }

  return (id)softLink_UTTypeCreateSuggestedFilename((uint64_t)v3, a2);
}

NSString *_NSIPSanitizedFilename(void *a1)
{
  uint64_t v5 = *MEMORY[0x1895F89C0];
  id result = (NSString *)[a1 length];
  if (result)
  {
    if (([a1 isEqualToString:@"."] & 1) != 0
      || ([a1 isEqualToString:@".."] & 1) != 0)
    {
      return 0LL;
    }

    id v3 = (void *)[a1 stringByReplacingOccurrencesOfString:@"/" withString:@":"];
    if (([v3 hasPrefix:@"."] & 1) != 0
      || [v3 hasPrefix:@"~"])
    {
      id v3 = (void *)objc_msgSend(v3, "stringByReplacingCharactersInRange:withString:", 0, 1, @"_");
    }

    else {
      return -[NSFileManager stringWithFileSystemRepresentation:length:]( +[NSFileManager defaultManager](&OBJC_CLASS___NSFileManager, "defaultManager"),  "stringWithFileSystemRepresentation:length:",  __s1,  strnlen(__s1, 0xFFuLL));
    }
  }

  return result;
}

void *_NSIPCloneURLToTemporaryFolder(void *a1, uint64_t a2, void *a3, char **a4, NSError **a5)
{
  uint64_t v10 = _NSIPCreateTemporaryFolder();
  if (!v10) {
    __assert_rtn("_NSIPCloneURLToTemporaryFolder", "_NSItemProviderUtilities_Internal.m", 297, "tempFolderURL");
  }
  uint64_t v11 = v10;
  if (a3) {
    BOOL v12 = a3;
  }
  else {
    BOOL v12 = (void *)[a1 lastPathComponent];
  }
  __int128 v13 = (void *)objc_msgSend(v11, "URLByAppendingPathComponent:", _NSIPFilenameWithProperExtension(v12, a2));
  if (copyfile( (const char *)objc_msgSend((id)objc_msgSend(a1, "path"), "fileSystemRepresentation"),  (const char *)objc_msgSend((id)objc_msgSend(v13, "path"), "fileSystemRepresentation"),  0,  0x10C800Fu))
  {
    -[NSFileManager removeItemAtURL:error:]( +[NSFileManager defaultManager](&OBJC_CLASS___NSFileManager, "defaultManager"),  "removeItemAtURL:error:",  v11,  0LL);
    __int128 v14 = __error();
    uint64_t v15 = +[NSString stringWithFormat:](&OBJC_CLASS___NSString, "stringWithFormat:", @"%s", strerror(*v14));
    TemporaryFileError = _NSIPCannotCreateTemporaryFileError((uint64_t)v15, 0LL);
    __int128 v13 = 0LL;
    if (a5 && TemporaryFileError)
    {
      __int128 v13 = 0LL;
      *a5 = TemporaryFileError;
    }
  }

  else if (a4)
  {
    *a4 = v11;
  }

  return v13;
}

NSError *_NSIPCannotLoadRepresentationError(uint64_t a1, uint64_t a2)
{
  id v3 = +[NSString stringWithFormat:]( NSString,  "stringWithFormat:",  [(id)_NSFoundationBundle() localizedStringForKey:@"Cannot load representation of type %@" value:&stru_189CA6A28 table:@"Extension"],  a1);
  return _makeError(-1000LL, (uint64_t)v3, a2);
}

NSError *_makeError(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v6 = (void *)[MEMORY[0x189603FC8] dictionary];
  uint64_t v7 = v6;
  if (a2) {
    [v6 setObject:a2 forKeyedSubscript:@"NSLocalizedDescription"];
  }
  if (a3) {
    [v7 setObject:a3 forKeyedSubscript:@"NSUnderlyingError"];
  }
  return +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  @"NSItemProviderErrorDomain",  a1,  v7);
}

NSError *_NSIPDataTransferCancelledError(uint64_t a1)
{
  uint64_t v2 = [(id)_NSFoundationBundle() localizedStringForKey:@"Data transfer has been cancelled." value:&stru_189CA6A28 table:@"Extension"];
  return _makeError(-1000LL, v2, a1);
}

NSError *_NSIPNoLoaderAvailableError(uint64_t a1, uint64_t a2)
{
  id v3 = +[NSString stringWithFormat:]( NSString,  "stringWithFormat:",  [(id)_NSFoundationBundle() localizedStringForKey:@"No loader block available for type %@." value:&stru_189CA6A28 table:@"Extension"],  a1);
  return _makeError(-1000LL, (uint64_t)v3, a2);
}

NSError *_NSIPCannotLoadPreviewError(uint64_t a1)
{
  uint64_t v2 = [(id)_NSFoundationBundle() localizedStringForKey:@"Cannot load preview." value:&stru_189CA6A28 table:@"Extension"];
  return _makeError(-1000LL, v2, a1);
}

NSError *_NSIPUnexpectedValueClassError(uint64_t a1, uint64_t a2)
{
  id v3 = +[NSString stringWithFormat:]( NSString,  "stringWithFormat:",  [(id)_NSFoundationBundle() localizedStringForKey:@"Cannot load an object of class %@" value:&stru_189CA6A28 table:@"Extension"],  a1);
  return _makeError(-1100LL, (uint64_t)v3, a2);
}

NSError *_NSIPUnavailableCoercionError(objc_class *a1, objc_class *a2, uint64_t a3)
{
  int v6 = (void *)_NSFoundationBundle();
  if (a1)
  {
    uint64_t v7 = [v6 localizedStringForKey:@"Could not coerce an item from class %@ to class %@" value:&stru_189CA6A28 table:@"Extension"];
    uint64_t v8 = NSStringFromClass(a1);
    uint64_t v9 = +[NSString stringWithFormat:](&OBJC_CLASS___NSString, "stringWithFormat:", v7, v8, NSStringFromClass(a2));
  }

  else
  {
    uint64_t v9 = +[NSString stringWithFormat:]( NSString,  "stringWithFormat:",  [v6 localizedStringForKey:@"Could not coerce an item to class %@" value:&stru_189CA6A28 table:@"Extension"],  NSStringFromClass(a2),  v11);
  }

  return _makeError(-1200LL, (uint64_t)v9, a3);
}

NSError *_NSIPCocoaErrorWithCode( uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  if (a3) {
    id v12 = (id)[a3 mutableCopy];
  }
  else {
    id v12 = (id)[MEMORY[0x189603FC8] dictionary];
  }
  __int128 v13 = v12;
  if (a4)
  {
    uint64_t v17 = &a9;
    __int128 v14 = -[NSString initWithFormat:arguments:]( objc_alloc(&OBJC_CLASS___NSString),  "initWithFormat:arguments:",  a4,  &a9);
    [v13 setObject:v14 forKeyedSubscript:@"NSDebugDescription"];
  }

  if (a2) {
    [v13 setObject:a2 forKeyedSubscript:@"NSUnderlyingError"];
  }
  if (objc_msgSend(v13, "count", v17)) {
    uint64_t v15 = v13;
  }
  else {
    uint64_t v15 = 0LL;
  }
  return +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  @"NSCocoaErrorDomain",  a1,  v15);
}

dispatch_queue_t __callbackQueue_block_invoke()
{
  dispatch_queue_t result = dispatch_queue_create("com.apple.Foundation.NSItemProvider-callback-queue", 0LL);
  qword_18C497F10 = (uint64_t)result;
  return result;
}

void ___coordinatedFileAccess_block_invoke(uint64_t a1)
{
  v11[1] = *MEMORY[0x1895F89C0];
  char v2 = [*(id *)(a1 + 32) startAccessingSecurityScopedResource];
  id v3 = -[NSFileCoordinator initWithFilePresenter:]( objc_alloc(&OBJC_CLASS___NSFileCoordinator),  "initWithFilePresenter:",  0LL);
  v11[0] = *(void *)(a1 + 40);
  uint64_t v4 = [MEMORY[0x189603F18] arrayWithObjects:v11 count:1];
  if (qword_18C497F28 != -1) {
    dispatch_once(&qword_18C497F28, &__block_literal_global_67);
  }
  v6[0] = MEMORY[0x1895F87A8];
  v6[1] = 3221225472LL;
  void v6[2] = ___coordinatedFileAccess_block_invoke_2;
  double v6[3] = &unk_189CA0810;
  uint64_t v5 = *(void *)(a1 + 56);
  int8x16_t v7 = vextq_s8(*(int8x16_t *)(a1 + 40), *(int8x16_t *)(a1 + 40), 8uLL);
  char v10 = v2;
  uint64_t v8 = *(void *)(a1 + 32);
  uint64_t v9 = v5;
  -[NSFileCoordinator coordinateAccessWithIntents:queue:byAccessor:]( v3,  "coordinateAccessWithIntents:queue:byAccessor:",  v4,  qword_18C497F20,  v6);
}

uint64_t ___coordinatedFileAccess_block_invoke_2(uint64_t a1, uint64_t a2)
{
  uint64_t result = (*(uint64_t (**)(void, uint64_t, uint64_t))(*(void *)(a1 + 56) + 16))( *(void *)(a1 + 56),  [*(id *)(a1 + 40) URL],  a2);
  if (*(_BYTE *)(a1 + 64)) {
    return [*(id *)(a1 + 48) stopAccessingSecurityScopedResource];
  }
  return result;
}

NSOperationQueue *___coordinationQueue_block_invoke()
{
  uint64_t result = objc_alloc_init(&OBJC_CLASS___NSOperationQueue);
  qword_18C497F20 = (uint64_t)result;
  return result;
}

uint64_t initUTTypeCopyPreferredTagWithClass(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = MobileCoreServicesLibrary_0();
  uint64_t v5 = (uint64_t (*)())dlsym(v4, "UTTypeCopyPreferredTagWithClass");
  off_18C4917D8[0] = v5;
  if (!v5) {
    __assert_rtn( "initUTTypeCopyPreferredTagWithClass",  "_NSItemProviderUtilities_Internal.m",  35,  "softLinkUTTypeCopyPreferredTagWithClass");
  }
  return ((uint64_t (*)(uint64_t, uint64_t))v5)(a1, a2);
}

void *MobileCoreServicesLibrary_0()
{
  uint64_t result = (void *)MobileCoreServicesLibrary_frameworkLibrary;
  if (!MobileCoreServicesLibrary_frameworkLibrary)
  {
    uint64_t result = dlopen("/System/Library/Frameworks/MobileCoreServices.framework/MobileCoreServices", 2);
    MobileCoreServicesLibrary_frameworkLibrardouble y = (uint64_t)result;
    if (!result) {
      __assert_rtn("MobileCoreServicesLibrary", "_NSItemProviderUtilities_Internal.m", 32, "frameworkLibrary");
    }
  }

  return result;
}

uint64_t initkUTTagClassFilenameExtension_0()
{
  uint64_t v0 = MobileCoreServicesLibrary_0();
  uint64_t v1 = (uint64_t *)dlsym(v0, "kUTTagClassFilenameExtension");
  if (!v1) {
    __assert_rtn("initkUTTagClassFilenameExtension", "_NSItemProviderUtilities_Internal.m", 38, "constant");
  }
  uint64_t result = *v1;
  constantkUTTagClassFilenameExtension_0 = result;
  _MergedGlobals_85[0] = kUTTagClassFilenameExtensionFunction_0;
  return result;
}

uint64_t kUTTagClassFilenameExtensionFunction_0()
{
  return constantkUTTagClassFilenameExtension_0;
}

uint64_t initUTTypeCopyDescription(uint64_t a1)
{
  char v2 = MobileCoreServicesLibrary_0();
  id v3 = (uint64_t (*)())dlsym(v2, "UTTypeCopyDescription");
  softLinkUTTypeCopyDescription = v3;
  if (!v3) {
    __assert_rtn( "initUTTypeCopyDescription",  "_NSItemProviderUtilities_Internal.m",  36,  "softLinkUTTypeCopyDescription");
  }
  return ((uint64_t (*)(uint64_t))v3)(a1);
}

uint64_t initkUTTypeItem()
{
  uint64_t v0 = MobileCoreServicesLibrary_0();
  uint64_t v1 = (uint64_t *)dlsym(v0, "kUTTypeItem");
  if (!v1) {
    __assert_rtn("initkUTTypeItem", "_NSItemProviderUtilities_Internal.m", 42, "constant");
  }
  uint64_t result = *v1;
  constantkUTTypeItem = result;
  getkUTTypeItem = kUTTypeItemFunction;
  return result;
}

uint64_t kUTTypeItemFunction()
{
  return constantkUTTypeItem;
}

uint64_t init_UTTypeCreateSuggestedFilename(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = MobileCoreServicesLibrary_0();
  uint64_t v5 = (uint64_t (*)())dlsym(v4, "_UTTypeCreateSuggestedFilename");
  softLink_UTTypeCreateSuggestedFilename = v5;
  if (!v5) {
    __assert_rtn( "init_UTTypeCreateSuggestedFilename",  "_NSItemProviderUtilities_Internal.m",  37,  "softLink_UTTypeCreateSuggestedFilename");
  }
  return ((uint64_t (*)(uint64_t, uint64_t))v5)(a1, a2);
}

NSString *__NSURLGetTopLevelDomain(void *a1)
{
  uint64_t result = (NSString *)_CFHostGetTopLevelDomain();
  if (result) {
    return -[NSString initWithCString:encoding:]( objc_alloc(&OBJC_CLASS___NSString),  "initWithCString:encoding:",  result,  4LL);
  }
  return result;
}

NSRange NSUnionRange(NSRange range1, NSRange range2)
{
  NSUInteger v2 = range1.location + range1.length;
  if (range1.location + range1.length <= range2.location + range2.length) {
    NSUInteger v2 = range2.location + range2.length;
  }
  if (range1.location >= range2.location) {
    range1.location = range2.location;
  }
  range1.length = v2 - range1.location;
  return range1;
}

NSRange NSIntersectionRange(NSRange range1, NSRange range2)
{
  NSUInteger v2 = range1.location + range1.length;
  if (range1.location + range1.length >= range2.location + range2.length) {
    NSUInteger v3 = range2.location + range2.length;
  }
  else {
    NSUInteger v3 = range1.location + range1.length;
  }
  if (range2.location > range1.location || range1.location >= range2.location + range2.length)
  {
    NSUInteger v4 = v3 - range2.location;
    BOOL v5 = range2.location >= v2;
    if (range2.location < v2) {
      NSUInteger location = range2.location;
    }
    else {
      NSUInteger location = 0LL;
    }
    if (v5) {
      NSUInteger v4 = 0LL;
    }
    BOOL v7 = range1.location > range2.location;
    if (range1.location <= range2.location) {
      range1.NSUInteger location = location;
    }
    else {
      range1.NSUInteger location = 0LL;
    }
    if (v7) {
      range1.length = 0LL;
    }
    else {
      range1.length = v4;
    }
  }

  else
  {
    range1.length = v3 - range1.location;
  }

  return range1;
}

BOOL NSIntersectsRange(unint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  return a1 < a3 + a4 && a3 < a1 + a2;
}

unint64_t NSSubtractRange( unint64_t result, uint64_t a2, unint64_t a3, uint64_t a4, unint64_t *a5, unint64_t *a6)
{
  unint64_t v6 = result + a2;
  unint64_t v7 = a3 + a4;
  BOOL v8 = a3 + a4 > result && v6 > a3;
  if (v8)
  {
    if (a3 <= result)
    {
      BOOL v10 = v6 >= v7;
      unint64_t v11 = v6 - v7;
      if (!v10) {
        unint64_t v11 = 0LL;
      }
      *a5 = v7;
      a5[1] = v11;
    }

    else
    {
      *a5 = result;
      a5[1] = a3 - result;
      BOOL v8 = v6 > v7;
      unint64_t v9 = v6 - v7;
      if (v8)
      {
        *a6 = v7;
        a6[1] = v9;
        return result;
      }
    }
  }

  else
  {
    *a5 = 0LL;
    a5[1] = 0LL;
  }

  *a6 = 0LL;
  a6[1] = 0LL;
  return result;
}

NSString *__cdecl NSStringFromRange(NSRange range)
{
  return +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"{%lu, %lu}",  range.location,  range.length);
}

NSRange NSRangeFromString(NSString *aString)
{
  uint64_t v1 = aString;
  uint64_t v13 = *MEMORY[0x1895F89C0];
  if (aString)
  {
    uint64_t v2 = (uint64_t)v12;
    if (!-[NSString getCString:maxLength:encoding:](aString, "getCString:maxLength:encoding:", v12, 100LL, 4LL)) {
      uint64_t v2 = [v1 UTF8String];
    }
    int v3 = *(unsigned __int8 *)v2;
    if (*(_BYTE *)v2)
    {
      uint64_t v4 = 0LL;
      while (v3 != 43 && (v3 - 48) >= 0xA)
      {
        uint64_t v5 = v4 + 1;
        int v3 = *(unsigned __int8 *)(v2 + 1 + v4++);
        if (!v3) {
          goto LABEL_13;
        }
      }

      uint64_t v5 = v4;
    }

    else
    {
      uint64_t v5 = 0LL;
    }

SEL _selectorForCoercion(uint64_t a1, void *a2)
{
  uint64_t v2 = _coercionClassStringFromClass(a2);
  int v3 = (void *)objc_opt_class();
  uint64_t v4 = +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"_NSItemProviderTypeCoercion_coerced%@ValueFrom%@Value:error:",  v2,  _coercionClassStringFromClass(v3));
  return NSSelectorFromString(v4);
}

NSString *_coercionClassStringFromClass(void *a1)
{
  uint64_t v13 = *MEMORY[0x1895F89C0];
  if (qword_18C496BA0 != -1) {
    dispatch_once(&qword_18C496BA0, &__block_literal_global_44);
  }
  __int128 v11 = 0u;
  __int128 v12 = 0u;
  __int128 v9 = 0u;
  __int128 v10 = 0u;
  uint64_t v2 = (void *)_MergedGlobals_118;
  NSRange result = (NSString *)[(id)_MergedGlobals_118 countByEnumeratingWithState:&v9 objects:v8 count:16];
  if (result)
  {
    uint64_t v4 = result;
    uint64_t v5 = *(void *)v10;
    while (2)
    {
      NSUInteger v6 = 0LL;
      do
      {
        if (*(void *)v10 != v5) {
          objc_enumerationMutation(v2);
        }
        unint64_t v7 = *(objc_class **)(*((void *)&v9 + 1) + 8LL * (void)v6);
        if ([a1 isSubclassOfClass:v7]) {
          return NSStringFromClass(v7);
        }
        NSUInteger v6 = (NSString *)((char *)v6 + 1);
      }

      while (v4 != v6);
      NSRange result = (NSString *)[v2 countByEnumeratingWithState:&v9 objects:v8 count:16];
      uint64_t v4 = result;
      if (result) {
        continue;
      }
      break;
    }
  }

  return result;
}

id ___coercionClassStringFromClass_block_invoke()
{
  uint64_t v13 = *MEMORY[0x1895F89C0];
  Class Class = objc_getClass("UIImage");
  uint64_t v1 = objc_opt_class();
  if (Class)
  {
    uint64_t v9 = v1;
    uint64_t v10 = objc_opt_class();
    uint64_t v11 = objc_opt_class();
    Class v12 = Class;
    uint64_t v2 = (void *)MEMORY[0x189603F18];
    int v3 = &v9;
    uint64_t v4 = 4LL;
  }

  else
  {
    uint64_t v6 = v1;
    uint64_t v7 = objc_opt_class();
    uint64_t v8 = objc_opt_class();
    uint64_t v2 = (void *)MEMORY[0x189603F18];
    int v3 = &v6;
    uint64_t v4 = 3LL;
  }

  _MergedGlobals_118 = objc_msgSend(v2, "arrayWithObjects:count:", v3, v4, v6, v7, v8, v9, v10, v11, v12, v13);
  return (id)_MergedGlobals_118;
}

void sub_183609F40(_Unwind_Exception *a1)
{
}

void sub_18360A098( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16)
{
}

void sub_18360A204(_Unwind_Exception *a1)
{
}

void sub_18360A3BC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
}

void sub_18360B5F0( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, id obj)
{
}

uint64_t __performOrderedCleanup(id *a1)
{
  free(a1);
  return _CFAutoreleasePoolPop();
}

uint64_t __NSFirePerformWithOrder(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v19 = *(const char **)(a3 + 8);
  unint64_t v20 = *(void **)a3;
  uint64_t v4 = *(void **)(a3 + 24);
  uint64_t v18 = *(void *)(a3 + 16);
  uint64_t v6 = *(const void **)(a3 + 32);
  uint64_t v5 = *(void **)(a3 + 40);
  _CFAutoreleasePoolPush();
  CFRetain(a1);
  objc_sync_enter(v5);
  uint64_t v7 = (void *)[v5 _perft];
  v21.length = [v7 count];
  v21.NSUInteger location = 0LL;
  FirstIndexOfid Value = CFArrayGetFirstIndexOfValue((CFArrayRef)v7, v21, v6);
  if (FirstIndexOfValue << 32 != 0xFFFFFFFF00000000LL) {
    CFArrayRemoveValueAtIndex((CFMutableArrayRef)v7, (int)FirstIndexOfValue);
  }
  int v9 = [v4 count];
  uint64_t v10 = (__CFString *)*MEMORY[0x189603B48];
  uint64_t v11 = (const __CFString *)*MEMORY[0x1896051A8];
  for (uint64_t i = v9 - 1LL; i != -1; --i)
  {
    uint64_t v13 = (__CFString *)[v4 objectAtIndex:i];
    __int128 v14 = v13;
    uint64_t v15 = v11;
    if (v13 != v10)
    {
      else {
        uint64_t v15 = v14;
      }
    }

    Current = CFRunLoopGetCurrent();
    CFRunLoopRemoveObserver(Current, (CFRunLoopObserverRef)a1, v15);
  }

  objc_sync_exit(v5);
  objc_msgSend(v20, v19, v18);
  CFRelease(a1);
  return _CFAutoreleasePoolPop();
}

void sub_18360B7A8(_Unwind_Exception *a1)
{
}

void sub_18360B9E4( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, id obj)
{
}

void sub_18360BC00( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, id obj)
{
}

uint64_t __NSFireDelayedPerform(void *a1, uint64_t *a2)
{
  uint64_t v20 = a2[1];
  uint64_t v22 = *a2;
  int v3 = (void *)a2[3];
  uint64_t v18 = a2[2];
  uint64_t v5 = (const void *)a2[4];
  uint64_t v4 = (void *)a2[5];
  uint64_t v6 = a2[6];
  _CFAutoreleasePoolPush();
  if (v6) {
    -[NSProcessInfo _reactivateActivity:]( +[NSProcessInfo processInfo](&OBJC_CLASS___NSProcessInfo, "processInfo"),  "_reactivateActivity:",  v6);
  }
  CFRetain(a1);
  objc_sync_enter(v4);
  uint64_t v7 = (const __CFArray *)[v4 _dperf];
  v24.length = objc_msgSend((id)objc_msgSend(v4, "_dperf"), "count");
  v24.NSUInteger location = 0LL;
  FirstIndexOfid Value = CFArrayGetFirstIndexOfValue(v7, v24, v5);
  if (FirstIndexOfValue << 32 != 0xFFFFFFFF00000000LL) {
    CFArrayRemoveValueAtIndex((CFMutableArrayRef)[v4 _dperf], (int)FirstIndexOfValue);
  }
  int v9 = objc_msgSend(v3, "count", v18, v20, v22);
  uint64_t v10 = (__CFString *)*MEMORY[0x189603B48];
  uint64_t v11 = (const __CFString *)*MEMORY[0x1896051A8];
  for (uint64_t i = v9 - 1LL; i != -1; --i)
  {
    uint64_t v13 = (__CFString *)[v3 objectAtIndex:i];
    __int128 v14 = v13;
    uint64_t v15 = v11;
    if (v13 != v10)
    {
      else {
        uint64_t v15 = v14;
      }
    }

    Current = CFRunLoopGetCurrent();
    CFRunLoopRemoveTimer(Current, (CFRunLoopTimerRef)a1, v15);
  }

  objc_sync_exit(v4);
  objc_msgSend(v23, v21, v19);
  CFRelease(a1);
  if (v6) {
    -[NSProcessInfo endActivity:]( +[NSProcessInfo processInfo](&OBJC_CLASS___NSProcessInfo, "processInfo"),  "endActivity:",  v6);
  }
  return _CFAutoreleasePoolPop();
}

void sub_18360BDB8(_Unwind_Exception *a1)
{
}

uint64_t __NSDescribeDelayedPerformCallout( uint64_t a1, uint64_t a2, char *a3, size_t a4, char *a5, size_t a6, uint64_t *a7)
{
  uint64_t v22 = *MEMORY[0x1895F89C0];
  id v12 = *(id *)a2;
  uint64_t v13 = *(const char **)(a2 + 8);
  ClassSEL Name = object_getClassName(*(id *)a2);
  SEL Name = sel_getName(v13);
  if (a7) {
    *a7 = object_getMethodImplementation();
  }
  __int128 v16 = "<unknown name>";
  if (ClassName) {
    __int128 v16 = ClassName;
  }
  uint64_t v17 = "<unknown selector>";
  if (Name) {
    uint64_t v17 = Name;
  }
  snprintf(a5, a6, "(Delayed Perform) %s %s", v16, v17);
  Class Class = object_getClass(v12);
  uint64_t result = dladdr(Class, &v21);
  if ((_DWORD)result)
  {
    dli_fname = v21.dli_fname;
    if (!v21.dli_fname) {
      dli_fname = "<unknown library>";
    }
    return snprintf(a3, a4, "%s", dli_fname);
  }

  return result;
}

void sub_18360C1E8( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id obj)
{
}

uint64_t __delayedPerformCleanup(id *a1)
{
  free(a1);
  return _CFAutoreleasePoolPop();
}

void sub_18360C4AC(_Unwind_Exception *a1)
{
}

uint64_t _NSScanIntFromString(void *a1, void *a2, int *a3, unint64_t *a4)
{
  uint64_t v50 = *MEMORY[0x1895F89C0];
  unint64_t v6 = *a4;
  unint64_t v7 = [a1 length];
  unint64_t v46 = v7;
  unint64_t v47 = v6;
  id v45 = a1;
  if (v7 <= v6)
  {
    unint64_t v43 = 0LL;
    int v9 = 0xFFFF;
  }

  else
  {
    if (v7 - v6 >= 0x20) {
      uint64_t v8 = 32LL;
    }
    else {
      uint64_t v8 = v7 - v6;
    }
    unint64_t v43 = v8;
    objc_msgSend(a1, sel_getUid("getCharacters:range:"), v48, v6, v8);
    int v9 = v48[0];
  }

  LOWORD(c) = v9;
  unint64_t v44 = 1LL;
  if (a2)
  {
    if (objc_msgSend(a2, "characterIsMember:"))
    {
      do
      {
        unint64_t v10 = v44;
        if (v44 - 1 >= v43) {
          break;
        }
        if (v44 >= v43)
        {
          uint64_t v12 = v47 + v43;
          if (v46 > v47 + v43)
          {
            if (v46 - (v47 + v43) >= 0x20) {
              uint64_t v13 = 32LL;
            }
            else {
              uint64_t v13 = v46 - (v47 + v43);
            }
            v47 += v43;
            unint64_t v43 = v13;
            objc_msgSend(v45, sel_getUid("getCharacters:range:"), v48, v12, v13);
            LOWORD(c) = v48[0];
            unint64_t v44 = 1LL;
            continue;
          }

          unint64_t v44 = v43 + 1;
          __int16 v11 = -1;
        }

        else
        {
          ++v44;
          __int16 v11 = v48[v10];
        }

        LOWORD(c) = v11;
      }

      while ((objc_msgSend(a2, "characterIsMember:") & 1) != 0);
    }

    int v9 = (unsigned __int16)c;
  }

  BOOL v42 = v9 == 45;
  if (v9 != 45 && v9 != 43) {
    goto LABEL_45;
  }
  unint64_t v14 = v44;
  if (v44 >= v43)
  {
    uint64_t v16 = v47 + v43;
    if (v46 > v47 + v43)
    {
      if (v46 - (v47 + v43) >= 0x20) {
        uint64_t v17 = 32LL;
      }
      else {
        uint64_t v17 = v46 - (v47 + v43);
      }
      v47 += v43;
      unint64_t v43 = v17;
      objc_msgSend(v45, sel_getUid("getCharacters:range:"), v48, v16, v17);
      LOWORD(c) = v48[0];
      unint64_t v44 = 1LL;
      if (!a2) {
        goto LABEL_45;
      }
      goto LABEL_33;
    }

    unint64_t v44 = v43 + 1;
    __int16 v15 = -1;
  }

  else
  {
    ++v44;
    __int16 v15 = v48[v14];
  }

  LOWORD(c) = v15;
  if (!a2) {
    goto LABEL_45;
  }
LABEL_33:
  if (objc_msgSend(a2, "characterIsMember:"))
  {
    do
    {
      unint64_t v18 = v44;
      if (v44 - 1 >= v43) {
        break;
      }
      if (v44 >= v43)
      {
        uint64_t v20 = v47 + v43;
        if (v46 > v47 + v43)
        {
          if (v46 - (v47 + v43) >= 0x20) {
            uint64_t v21 = 32LL;
          }
          else {
            uint64_t v21 = v46 - (v47 + v43);
          }
          v47 += v43;
          unint64_t v43 = v21;
          objc_msgSend(v45, sel_getUid("getCharacters:range:"), v48, v20, v21);
          LOWORD(c) = v48[0];
          unint64_t v44 = 1LL;
          continue;
        }

        unint64_t v44 = v43 + 1;
        __int16 v19 = -1;
      }

      else
      {
        ++v44;
        __int16 v19 = v48[v18];
      }

      LOWORD(c) = v19;
    }

    while ((objc_msgSend(a2, "characterIsMember:") & 1) != 0);
  }

uint64_t _NSCheckDecimalSeparator(uint64_t *a1, _WORD *a2, int a3, void *a4)
{
  if (a4) {
    unint64_t v8 = [a4 length];
  }
  else {
    unint64_t v8 = 1LL;
  }
  int v9 = (unsigned __int16)*a2;
  BOOL v10 = v9 == a3 && v8 == 1;
  if (v10) {
    return 1LL;
  }
  uint64_t result = 0LL;
  if (a4 && v9 == a3)
  {
    if (v8 >= 2)
    {
      uint64_t v12 = 2LL;
      while (1)
      {
        uint64_t v13 = *a1;
        unint64_t v14 = a1[1];
        if (v14 >= *a1)
        {
          unint64_t v16 = a1[3];
          unint64_t v17 = a1[4] + v13;
          if (v16 > v17)
          {
            a1[4] = v17;
            if (v16 - v17 >= 0x20) {
              uint64_t v18 = 32LL;
            }
            else {
              uint64_t v18 = v16 - v17;
            }
            *a1 = v18;
            objc_msgSend((id)a1[2], sel_getUid("getCharacters:range:"), a1 + 5, v17, v18);
            int v15 = *((unsigned __int16 *)a1 + 20);
            *((_WORD *)a1 + 52) = v15;
            a1[1] = 1LL;
            goto LABEL_21;
          }

          a1[1] = v13 + 1;
          int v15 = 0xFFFF;
        }

        else
        {
          a1[1] = v14 + 1;
          int v15 = *((unsigned __int16 *)a1 + v14 + 20);
        }

        *((_WORD *)a1 + 52) = v15;
LABEL_21:
        *a2 = v15;
        BOOL v10 = v15 == [a4 characterAtIndex:v12 - 1];
        uint64_t result = v10;
        if (!v10 || v8 == v12++) {
          return result;
        }
      }
    }

    return 1LL;
  }

  return result;
}

uint64_t _NSScanDoubleFromString(void *a1, void *a2, double *a3, unint64_t *a4, void *a5)
{
  uint64_t v49 = *MEMORY[0x1895F89C0];
  unsigned int v39 = (char *)&v41 + 15;
  int v9 = (void *)[a5 objectForKey:*MEMORY[0x189603AB0]];
  if (!v9)
  {
    int v9 = (void *)[a5 objectForKey:@"NSDecimalSeparator"];
    if (!v9)
    {
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) == 0)
      {
        int v9 = 0LL;
        goto LABEL_9;
      }

      int v9 = (void *)[a5 decimalSeparator];
      if (!v9) {
        goto LABEL_9;
      }
    }
  }

  if (![v9 length])
  {
LABEL_9:
    int v37 = 46;
    goto LABEL_10;
  }

  int v37 = [v9 characterAtIndex:0];
LABEL_10:
  unint64_t v10 = *a4;
  unint64_t v11 = [a1 length];
  unint64_t v45 = v11;
  unint64_t v46 = v10;
  id v44 = a1;
  if (v11 <= v10)
  {
    unint64_t v42 = 0LL;
    unsigned int v13 = 0xFFFF;
  }

  else
  {
    if (v11 - v10 >= 0x20) {
      unint64_t v12 = 32LL;
    }
    else {
      unint64_t v12 = v11 - v10;
    }
    unint64_t v42 = v12;
    objc_msgSend(a1, sel_getUid("getCharacters:range:"), v47, v10, v12);
    unsigned int v13 = v47[0];
  }

  unsigned __int16 v48 = v13;
  uint64_t v14 = 1LL;
  unint64_t v43 = 1LL;
  if (a2)
  {
    if (objc_msgSend(a2, "characterIsMember:"))
    {
      do
      {
        unint64_t v15 = v43;
        if (v43 - 1 >= v42) {
          break;
        }
        if (v43 >= v42)
        {
          uint64_t v17 = v46 + v42;
          if (v45 > v46 + v42)
          {
            if (v45 - (v46 + v42) >= 0x20) {
              unint64_t v18 = 32LL;
            }
            else {
              unint64_t v18 = v45 - (v46 + v42);
            }
            v46 += v42;
            unint64_t v42 = v18;
            objc_msgSend(v44, sel_getUid("getCharacters:range:"), v47, v17, v18);
            unsigned __int16 v48 = v47[0];
            unint64_t v43 = 1LL;
            continue;
          }

          unint64_t v43 = v42 + 1;
          __int16 v16 = -1;
        }

        else
        {
          ++v43;
          __int16 v16 = v47[v15];
        }

        unsigned __int16 v48 = v16;
      }

      while ((objc_msgSend(a2, "characterIsMember:") & 1) != 0);
    }

    unsigned int v13 = v48;
    uint64_t v14 = v43;
  }

  unint64_t v19 = *a4;
  __int16 v38 = v13;
  if (v13 <= 0x7F && (*(_DWORD *)(MEMORY[0x1895F8770] + 4LL * v13 + 60) & 0x4000) != 0) {
    return 0LL;
  }
  unint64_t v34 = v46;
  uint64_t v35 = v14;
  size_t v20 = 0LL;
  uint64_t v21 = 0LL;
  uint64_t v33 = ~v19;
  uint64_t v22 = (char *)v40;
  __int128 v23 = (char *)v40;
  while (1)
  {
    LOBYTE(v24) = v13;
    if ((unsigned __int16)v13 <= 0x7Fu)
    {
      goto LABEL_40;
    }

    int32_t v25 = u_charDigitValue((unsigned __int16)v13);
    if (v25 == -1) {
      break;
    }
    __int16 v24 = v25 + 48;
LABEL_41:
    __int16 v38 = v24;
LABEL_42:
    if (v23 >= v39)
    {
      v20 += 128LL;
      if (v21)
      {
        uint64_t result = __CFSafelyReallocate();
        if (!result) {
          return result;
        }
        uint64_t v22 = (char *)result;
        LOBYTE(v24) = v38;
      }

      else
      {
        uint64_t v22 = (char *)malloc(v20);
        __int128 v27 = v40[1];
        *(_OWORD *)uint64_t v22 = v40[0];
        *((_OWORD *)v22 + 1) = v27;
        __int128 v28 = v41;
        *((_OWORD *)v22 + 2) = v40[2];
        *((_OWORD *)v22 + 3) = v28;
        uint64_t v21 = (char *)v40;
      }

      __int128 v23 = &v22[v23 - v21];
      unsigned int v39 = &v22[v20 - 1];
      uint64_t v21 = v22;
    }

    *v23++ = v24;
    unint64_t v29 = v43;
    if (v43 < v42)
    {
      ++v43;
      LOWORD(v13) = v47[v29];
LABEL_56:
      unsigned __int16 v48 = v13;
      goto LABEL_57;
    }

    uint64_t v30 = v46 + v42;
    if (v45 <= v46 + v42)
    {
      unint64_t v43 = v42 + 1;
      LOWORD(v13) = -1;
      goto LABEL_56;
    }

    if (v45 - (v46 + v42) >= 0x20) {
      unint64_t v31 = 32LL;
    }
    else {
      unint64_t v31 = v45 - (v46 + v42);
    }
    v46 += v42;
    unint64_t v42 = v31;
    objc_msgSend(v44, sel_getUid("getCharacters:range:"), v47, v30, v31);
    LOWORD(v13) = v47[0];
    unsigned __int16 v48 = v47[0];
    unint64_t v43 = 1LL;
LABEL_57:
    __int16 v38 = v13;
  }

  if ((_NSCheckDecimalSeparator((uint64_t *)&v42, &v38, v37, v9) & 1) != 0)
  {
LABEL_40:
    __int16 v24 = 46;
    goto LABEL_41;
  }

uint64_t _NSScanHexDoubleFromString(void *a1, void *a2, void *a3, unint64_t *a4, void *a5)
{
  uint64_t v47 = *MEMORY[0x1895F89C0];
  int v9 = (void *)[a5 objectForKey:*MEMORY[0x189603AB0]];
  if (!v9)
  {
    int v9 = (void *)[a5 objectForKey:@"NSDecimalSeparator"];
    if (!v9)
    {
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) == 0)
      {
        int v9 = 0LL;
        goto LABEL_9;
      }

      int v9 = (void *)[a5 decimalSeparator];
      if (!v9) {
        goto LABEL_9;
      }
    }
  }

  if (![v9 length])
  {
LABEL_9:
    int v10 = 46;
    goto LABEL_10;
  }

  int v10 = [v9 characterAtIndex:0];
LABEL_10:
  unint64_t v11 = *a4;
  unint64_t v12 = [a1 length];
  unint64_t v43 = v12;
  unint64_t v44 = v11;
  id v42 = a1;
  if (v12 <= v11)
  {
    unint64_t v40 = 0LL;
    unsigned int v14 = 0xFFFF;
  }

  else
  {
    if (v12 - v11 >= 0x20) {
      unint64_t v13 = 32LL;
    }
    else {
      unint64_t v13 = v12 - v11;
    }
    unint64_t v40 = v13;
    objc_msgSend(a1, sel_getUid("getCharacters:range:"), v45, v11, v13);
    unsigned int v14 = v45[0];
  }

  unsigned __int16 v46 = v14;
  uint64_t v15 = 1LL;
  unint64_t v41 = 1LL;
  if (a2)
  {
    if (objc_msgSend(a2, "characterIsMember:"))
    {
      do
      {
        unint64_t v16 = v41;
        if (v41 - 1 >= v40) {
          break;
        }
        if (v41 >= v40)
        {
          uint64_t v18 = v44 + v40;
          if (v43 > v44 + v40)
          {
            if (v43 - (v44 + v40) >= 0x20) {
              unint64_t v19 = 32LL;
            }
            else {
              unint64_t v19 = v43 - (v44 + v40);
            }
            v44 += v40;
            unint64_t v40 = v19;
            objc_msgSend(v42, sel_getUid("getCharacters:range:"), v45, v18, v19);
            unsigned __int16 v46 = v45[0];
            unint64_t v41 = 1LL;
            continue;
          }

          unint64_t v41 = v40 + 1;
          __int16 v17 = -1;
        }

        else
        {
          ++v41;
          __int16 v17 = v45[v16];
        }

        unsigned __int16 v46 = v17;
      }

      while ((objc_msgSend(a2, "characterIsMember:") & 1) != 0);
    }

    unsigned int v14 = v46;
    uint64_t v15 = v41;
  }

  unint64_t v20 = *a4;
  unsigned __int16 v37 = v14;
  if (v14 <= 0x7F && (*(_DWORD *)(MEMORY[0x1895F8770] + 4LL * v14 + 60) & 0x4000) != 0) {
    return 0LL;
  }
  unint64_t v34 = a4;
  unint64_t v21 = 0LL;
  uint64_t v32 = v15 + v44 + ~v20;
  while (_NSCheckDecimalSeparator((uint64_t *)&v40, &v37, v10, v9))
  {
    if (v21 >= 0x3F) {
      goto LABEL_48;
    }
    char v22 = 46;
LABEL_38:
    *(&v38 + v21) = v22;
    unint64_t v23 = v41;
    if (v41 < v40)
    {
      ++v41;
      __int16 v24 = v45[v23];
LABEL_46:
      unsigned __int16 v46 = v24;
      goto LABEL_47;
    }

    uint64_t v25 = v44 + v40;
    if (v43 <= v44 + v40)
    {
      unint64_t v41 = v40 + 1;
      __int16 v24 = -1;
      goto LABEL_46;
    }

    if (v43 - (v44 + v40) >= 0x20) {
      unint64_t v26 = 32LL;
    }
    else {
      unint64_t v26 = v43 - (v44 + v40);
    }
    v44 += v40;
    unint64_t v40 = v26;
    objc_msgSend(v42, sel_getUid("getCharacters:range:"), v45, v25, v26);
    __int16 v24 = v45[0];
    unsigned __int16 v46 = v45[0];
    unint64_t v41 = 1LL;
LABEL_47:
    unsigned __int16 v37 = v24;
    ++v21;
  }

  char v22 = v37;
  if (v37 <= 0x7Fu && v21 <= 0x3E) {
    goto LABEL_38;
  }
LABEL_48:
  __int128 v27 = &v38;
  *(&v38 + v21) = 0;
  int v28 = v38;
  if (v38 == 45 || v38 == 43)
  {
    __int128 v27 = (char *)&v39;
    int v28 = v39;
  }

  int v29 = v27[2];
  if ((v29 - 48) >= 0xA)
  {
    uint64_t result = 0LL;
    unsigned int v31 = (unsigned __int16)v29 - 65;
    if (v31 > 0x25 || ((1LL << v31) & 0x3F0000003FLL) == 0) {
      return result;
    }
  }

  if (sscanf_l(&v38, 0LL, "%la%n", &v36, &v35) < 1) {
    return 0LL;
  }
  *v34 += v32 + v35;
  if (a3) {
    *a3 = v36;
  }
  return 1LL;
}

uint64_t sub_18360EA28()
{
  return 0LL;
}

uint64_t sub_18360EAA0()
{
  return 0LL;
}

NSCharacterSet *__defaultInvertedSkipSet_block_invoke()
{
  uint64_t result =  -[NSCharacterSet invertedSet]( +[NSCharacterSet whitespaceAndNewlineCharacterSet]( &OBJC_CLASS___NSCharacterSet,  "whitespaceAndNewlineCharacterSet"),  "invertedSet");
  qword_18C494A20 = (uint64_t)result;
  return result;
}

uint64_t _NSExtensionClass()
{
  if (qword_18C496BB0 != -1) {
    dispatch_once(&qword_18C496BB0, &__block_literal_global_46);
  }
  return _MergedGlobals_119;
}

uint64_t sub_18360F72C()
{
  return 0LL;
}

uint64_t sub_18360F774()
{
  return (*(uint64_t (**)(uint64_t, void, NSError *))(v0 + 16))( v0,  0LL,  +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  @"NSCocoaErrorDomain",  3072LL,  0LL));
}

uint64_t sub_18360F7EC()
{
  if (v0) {
    *uint64_t v0 = +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  @"NSCocoaErrorDomain",  3072LL,  0LL);
  }
  return 0LL;
}

uint64_t sub_18360F860()
{
  return (*(uint64_t (**)(uint64_t, void, NSError *))(v0 + 16))( v0,  0LL,  +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  @"NSCocoaErrorDomain",  3072LL,  0LL));
}

uint64_t sub_18360F8D8()
{
  return (*(uint64_t (**)(uint64_t, void, NSError *))(v0 + 16))( v0,  0LL,  +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  @"NSCocoaErrorDomain",  3072LL,  0LL));
}

uint64_t sub_18360F950()
{
  return (*(uint64_t (**)(uint64_t, void, NSError *))(v0 + 16))( v0,  0LL,  +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  @"NSCocoaErrorDomain",  3072LL,  0LL));
}

uint64_t sub_18360F9C0()
{
  return 0LL;
}

uint64_t sub_18360FA40()
{
  if (v0) {
    *uint64_t v0 = +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  @"NSCocoaErrorDomain",  3072LL,  0LL);
  }
  return 0LL;
}

uint64_t sub_18360FAB4()
{
  if (v0) {
    *uint64_t v0 = +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  @"NSCocoaErrorDomain",  3072LL,  0LL);
  }
  return 0LL;
}

uint64_t sub_18360FB58()
{
  return 0LL;
}

uint64_t sub_18360FB98()
{
  return 0xFFFFFFFFLL;
}

uint64_t sub_18360FBE0()
{
  return (*(uint64_t (**)(uint64_t, NSError *))(v0 + 16))( v0,  +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  @"NSCocoaErrorDomain",  3072LL,  0LL));
}

uint64_t sub_18360FC54()
{
  return (*(uint64_t (**)(uint64_t, NSError *))(v0 + 16))( v0,  +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  @"NSCocoaErrorDomain",  3072LL,  0LL));
}

uint64_t sub_18360FCC0()
{
  return 0LL;
}

uint64_t initEXGetExtensionClass()
{
  uint64_t v0 = (void *)ExtensionFoundationLibrary_frameworkLibrary_0;
  if ((ExtensionFoundationLibrary_frameworkLibrary_0
     || (uint64_t v0 = dlopen("/System/Library/Frameworks/ExtensionFoundation.framework/ExtensionFoundation", 2),
         (ExtensionFoundationLibrary_frameworkLibrary_0 = (uint64_t)v0) != 0))
    && (uint64_t v1 = (uint64_t (*)(void))dlsym(v0, "EXGetExtensionClass"), (softLinkEXGetExtensionClass = v1) != 0LL))
  {
    return v1();
  }

  else
  {
    return 0LL;
  }

uint64_t preferredTermOfAddressForLanguageFromList(uint64_t a1, void *a2)
{
  uint64_t v14 = *MEMORY[0x1895F89C0];
  __int128 v10 = 0u;
  __int128 v11 = 0u;
  __int128 v12 = 0u;
  __int128 v13 = 0u;
  uint64_t result = [a2 countByEnumeratingWithState:&v10 objects:v9 count:16];
  if (result)
  {
    uint64_t v5 = result;
    uint64_t v6 = *(void *)v11;
LABEL_3:
    uint64_t v7 = 0LL;
    while (1)
    {
      if (*(void *)v11 != v6) {
        objc_enumerationMutation(a2);
      }
      unint64_t v8 = *(void **)(*((void *)&v10 + 1) + 8 * v7);
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) != 0)
      {
        if ([v8 _isSupportedInLanguage:a1])
        {
          uint64_t result = [v8 _withExtrapolatedPronouns];
          if (result) {
            break;
          }
        }
      }

      if (v5 == ++v7)
      {
        uint64_t result = [a2 countByEnumeratingWithState:&v10 objects:v9 count:16];
        uint64_t v5 = result;
        if (result) {
          goto LABEL_3;
        }
        return result;
      }
    }
  }

  return result;
}

NSXPCInterface *_NSBundleResourceRequestServerInterface()
{
  uint64_t v0 = +[NSXPCInterface interfaceWithProtocol:](&OBJC_CLASS___NSXPCInterface, "interfaceWithProtocol:", &unk_18C68E9B8);
  uint64_t v1 = (void *)MEMORY[0x189604010];
  uint64_t v2 = objc_opt_class();
  uint64_t v3 = objc_opt_class();
  -[NSXPCInterface setClasses:forSelector:argumentIndex:ofReply:]( v0,  "setClasses:forSelector:argumentIndex:ofReply:",  objc_msgSend(v1, "setWithObjects:", v2, v3, objc_opt_class(), 0),  sel_tagStateInBundle_completionHandler_,  0,  1);
  uint64_t v4 = (void *)MEMORY[0x189604010];
  uint64_t v5 = objc_opt_class();
  -[NSXPCInterface setClasses:forSelector:argumentIndex:ofReply:]( v0,  "setClasses:forSelector:argumentIndex:ofReply:",  objc_msgSend(v4, "setWithObjects:", v5, objc_opt_class(), 0),  sel_beginODRSessionWithBundleURL_completionHandler_,  0,  1);
  uint64_t v6 = (void *)MEMORY[0x189604010];
  uint64_t v7 = objc_opt_class();
  -[NSXPCInterface setClasses:forSelector:argumentIndex:ofReply:]( v0,  "setClasses:forSelector:argumentIndex:ofReply:",  objc_msgSend(v6, "setWithObjects:", v7, objc_opt_class(), 0),  sel_beginWithBundleURL_completionHandler_,  0,  1);
  unint64_t v8 = (void *)MEMORY[0x189604010];
  uint64_t v9 = objc_opt_class();
  -[NSXPCInterface setClasses:forSelector:argumentIndex:ofReply:]( v0,  "setClasses:forSelector:argumentIndex:ofReply:",  objc_msgSend(v8, "setWithObjects:", v9, objc_opt_class(), 0),  sel_pinTags_inBundle_priority_completionHandler_,  0,  0);
  __int128 v10 = (void *)MEMORY[0x189604010];
  uint64_t v11 = objc_opt_class();
  uint64_t v12 = objc_opt_class();
  -[NSXPCInterface setClasses:forSelector:argumentIndex:ofReply:]( v0,  "setClasses:forSelector:argumentIndex:ofReply:",  objc_msgSend(v10, "setWithObjects:", v11, v12, objc_opt_class(), 0),  sel_pinTags_inBundle_priority_completionHandler_,  0,  1);
  __int128 v13 = (void *)MEMORY[0x189604010];
  uint64_t v14 = objc_opt_class();
  -[NSXPCInterface setClasses:forSelector:argumentIndex:ofReply:]( v0,  "setClasses:forSelector:argumentIndex:ofReply:",  objc_msgSend(v13, "setWithObjects:", v14, objc_opt_class(), 0),  sel_conditionallyPinTags_inBundle_completionHandler_,  0,  0);
  uint64_t v15 = (void *)MEMORY[0x189604010];
  uint64_t v16 = objc_opt_class();
  uint64_t v17 = objc_opt_class();
  -[NSXPCInterface setClasses:forSelector:argumentIndex:ofReply:]( v0,  "setClasses:forSelector:argumentIndex:ofReply:",  objc_msgSend(v15, "setWithObjects:", v16, v17, objc_opt_class(), 0),  sel_conditionallyPinTags_inBundle_completionHandler_,  1,  1);
  uint64_t v18 = (void *)MEMORY[0x189604010];
  uint64_t v19 = objc_opt_class();
  -[NSXPCInterface setClasses:forSelector:argumentIndex:ofReply:]( v0,  "setClasses:forSelector:argumentIndex:ofReply:",  objc_msgSend(v18, "setWithObjects:", v19, objc_opt_class(), 0),  sel_setLoadingPriority_forTags_inBundle_,  1,  0);
  unint64_t v20 = (void *)MEMORY[0x189604010];
  uint64_t v21 = objc_opt_class();
  -[NSXPCInterface setClasses:forSelector:argumentIndex:ofReply:]( v0,  "setClasses:forSelector:argumentIndex:ofReply:",  objc_msgSend(v20, "setWithObjects:", v21, objc_opt_class(), 0),  sel_unpinTags_inBundle_completionHandler_,  0,  0);
  char v22 = (void *)MEMORY[0x189604010];
  uint64_t v23 = objc_opt_class();
  uint64_t v24 = objc_opt_class();
  -[NSXPCInterface setClasses:forSelector:argumentIndex:ofReply:]( v0,  "setClasses:forSelector:argumentIndex:ofReply:",  objc_msgSend(v22, "setWithObjects:", v23, v24, objc_opt_class(), 0),  sel_unpinTags_inBundle_completionHandler_,  0,  1);
  uint64_t v25 = (void *)MEMORY[0x189604010];
  uint64_t v26 = objc_opt_class();
  -[NSXPCInterface setClasses:forSelector:argumentIndex:ofReply:]( v0,  "setClasses:forSelector:argumentIndex:ofReply:",  objc_msgSend(v25, "setWithObjects:", v26, objc_opt_class(), 0),  sel_okToPurgeAssetPacks_,  0,  0);
  __int128 v27 = (void *)MEMORY[0x189604010];
  uint64_t v28 = objc_opt_class();
  -[NSXPCInterface setClasses:forSelector:argumentIndex:ofReply:]( v0,  "setClasses:forSelector:argumentIndex:ofReply:",  objc_msgSend(v27, "setWithObjects:", v28, objc_opt_class(), 0),  sel_setPreservationPriority_forTags_inBundle_,  1,  0);
  int v29 = (void *)MEMORY[0x189604010];
  uint64_t v30 = objc_opt_class();
  -[NSXPCInterface setClasses:forSelector:argumentIndex:ofReply:]( v0,  "setClasses:forSelector:argumentIndex:ofReply:",  objc_msgSend(v29, "setWithObjects:", v30, objc_opt_class(), 0),  sel_setAlwaysPreserved_forTags_inBundle_,  1,  0);
  return v0;
}

NSXPCInterface *_NSBundleResourceRequestClientInterface()
{
  return +[NSXPCInterface interfaceWithProtocol:]( &OBJC_CLASS___NSXPCInterface,  "interfaceWithProtocol:",  &unk_18C671690);
}

void sub_18361206C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
}

void __Block_byref_object_copy__14(uint64_t a1, uint64_t a2)
{
}

void __Block_byref_object_dispose__14(uint64_t a1)
{
}

void sub_1836124A0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
}

void _setupConnection(void *a1)
{
  uint64_t v10 = *MEMORY[0x1895F89C0];
  [a1 setRemoteObjectInterface:_NSBundleResourceRequestServerInterface()];
  objc_msgSend( a1,  "setExportedInterface:",  +[NSXPCInterface interfaceWithProtocol:](NSXPCInterface, "interfaceWithProtocol:", &unk_18C671690));
  [a1 setExportedObject:(id)objc_opt_new()];
  [a1 resume];
  uint64_t v5 = 0LL;
  uint64_t v6 = &v5;
  uint64_t v7 = 0x2020000000LL;
  char v8 = 0;
  v4[0] = MEMORY[0x1895F87A8];
  v4[1] = 3221225472LL;
  uint64_t v4[2] = ___setupConnection_block_invoke;
  v4[3] = &unk_189CA0DF8;
  void v4[4] = &v5;
  v3[0] = MEMORY[0x1895F87A8];
  v3[1] = 3221225472LL;
  int v3[2] = ___setupConnection_block_invoke_2;
  void v3[3] = &unk_189CA0E20;
  v3[4] = &v5;
  objc_msgSend((id)objc_msgSend(a1, "synchronousRemoteObjectProxyWithErrorHandler:", v4), "hello:", v3);
  if (!*((_BYTE *)v6 + 24))
  {
    if (qword_18C497F90 != -1) {
      dispatch_once(&qword_18C497F90, &__block_literal_global_300);
    }
    uint64_t v2 = (os_log_s *)qword_18C497F88;
    if (os_log_type_enabled((os_log_t)qword_18C497F88, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_error_impl( &dword_182EB1000,  v2,  OS_LOG_TYPE_ERROR,  "NSBundleResourceRequest could not connect to its helper daemon",  buf,  2u);
    }
  }

  _Block_object_dispose(&v5, 8);
}

void sub_183613A10( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
}

NSXPCInterface *_appExtensionInterface()
{
  uint64_t v0 = +[NSXPCInterface interfaceWithProtocol:](&OBJC_CLASS___NSXPCInterface, "interfaceWithProtocol:", &unk_18C6717E8);
  uint64_t v1 = (void *)MEMORY[0x189604010];
  uint64_t v2 = objc_opt_class();
  uint64_t v3 = objc_opt_class();
  -[NSXPCInterface setClasses:forSelector:argumentIndex:ofReply:]( v0,  "setClasses:forSelector:argumentIndex:ofReply:",  objc_msgSend(v1, "setWithObjects:", v2, v3, objc_opt_class(), 0),  sel_hostApplicationAssetPacksBecameAvailable_,  0,  0);
  uint64_t v4 = (void *)MEMORY[0x189604010];
  uint64_t v5 = objc_opt_class();
  uint64_t v6 = objc_opt_class();
  -[NSXPCInterface setClasses:forSelector:argumentIndex:ofReply:]( v0,  "setClasses:forSelector:argumentIndex:ofReply:",  objc_msgSend(v4, "setWithObjects:", v5, v6, objc_opt_class(), 0),  sel_hostApplicationAssetPacksBecameUnavailable_,  0,  0);
  return v0;
}

uint64_t ___setupConnection_block_invoke(uint64_t result)
{
  *(_BYTE *)(*(void *)(*(void *)(result + 32) + 8LL) + 24LL) = 0;
  return result;
}

uint64_t ___setupConnection_block_invoke_2(uint64_t result)
{
  *(_BYTE *)(*(void *)(*(void *)(result + 32) + 8LL) + 24LL) = 1;
  return result;
}

void ___endAccessingResources_block_invoke(uint64_t a1)
{
}

void ___endAccessingResources_block_invoke_2(id *a1, void *a2)
{
}

void sub_18361620C(_Unwind_Exception *a1)
{
}

uint64_t isEqualCStringToString(unsigned __int8 *a1, unint64_t a2, void *a3)
{
  unint64_t v4 = a2;
  uint64_t v24 = *MEMORY[0x1895F89C0];
  if ([a3 length] != a2) {
    return 0LL;
  }
  unint64_t v20 = v4;
  uint64_t v21 = 0LL;
  id v19 = a3;
  if (v4)
  {
    if (v4 >= 0x20) {
      uint64_t v6 = 32LL;
    }
    else {
      uint64_t v6 = v4;
    }
    unint64_t v17 = v6;
    objc_msgSend(a3, sel_getUid("getCharacters:range:"), v22, 0, v6);
    int v7 = v22[0];
    uint64_t v18 = 1LL;
    __int16 v23 = v22[0];
    uint64_t v8 = _NSCStringCharToUnicharTable;
    unint64_t v9 = 1LL;
    while (1)
    {
      unsigned int v10 = *a1++;
      int v11 = *(unsigned __int16 *)(v8 + 2LL * v10);
      BOOL v12 = v11 == v7;
      if (v11 != v7) {
        return v12;
      }
      if (v9 >= v17)
      {
        uint64_t v14 = v21 + v17;
        if (v20 > v21 + v17)
        {
          if (v20 - (v21 + v17) >= 0x20) {
            uint64_t v15 = 32LL;
          }
          else {
            uint64_t v15 = v20 - (v21 + v17);
          }
          v21 += v17;
          unint64_t v17 = v15;
          objc_msgSend(v19, sel_getUid("getCharacters:range:"), v22, v14, v15);
          int v7 = v22[0];
          __int16 v23 = v22[0];
          uint64_t v18 = 1LL;
          uint64_t v8 = _NSCStringCharToUnicharTable;
          unint64_t v9 = 1LL;
          goto LABEL_17;
        }

        unint64_t v9 = v17 + 1;
        uint64_t v18 = v17 + 1;
        int v7 = 0xFFFF;
      }

      else
      {
        __int128 v13 = (char *)&v17 + 2 * v9++;
        uint64_t v18 = v9;
        int v7 = *((unsigned __int16 *)v13 + 20);
      }

      __int16 v23 = v7;
LABEL_17:
      if (!--v4) {
        return v12;
      }
    }
  }

  return 1LL;
}

void sub_183617C4C()
{
}

void sub_183617EB8()
{
}

uint64_t initkUTTypeUTF8PlainText()
{
  uint64_t v0 = MobileCoreServicesLibrary_1();
  uint64_t v1 = (uint64_t *)dlsym(v0, "kUTTypeUTF8PlainText");
  if (!v1) {
    __assert_rtn("initkUTTypeUTF8PlainText", "NSString+NSItemProvider.m", 19, "constant");
  }
  uint64_t result = *v1;
  constantkUTTypeUTF8PlainText = result;
  _MergedGlobals_86[0] = kUTTypeUTF8PlainTextFunction;
  return result;
}

void *MobileCoreServicesLibrary_1()
{
  uint64_t result = (void *)MobileCoreServicesLibrary_frameworkLibrary_2;
  if (!MobileCoreServicesLibrary_frameworkLibrary_2)
  {
    uint64_t result = dlopen("/System/Library/Frameworks/MobileCoreServices.framework/MobileCoreServices", 2);
    MobileCoreServicesLibrary_frameworkLibrary_2 = (uint64_t)result;
    if (!result) {
      __assert_rtn("MobileCoreServicesLibrary", "NSString+NSItemProvider.m", 16, "frameworkLibrary");
    }
  }

  return result;
}

uint64_t kUTTypeUTF8PlainTextFunction()
{
  return constantkUTTypeUTF8PlainText;
}

uint64_t initkUTTypeUTF16ExternalPlainText()
{
  uint64_t v0 = MobileCoreServicesLibrary_1();
  uint64_t v1 = (uint64_t *)dlsym(v0, "kUTTypeUTF16ExternalPlainText");
  if (!v1) {
    __assert_rtn("initkUTTypeUTF16ExternalPlainText", "NSString+NSItemProvider.m", 21, "constant");
  }
  uint64_t result = *v1;
  constantkUTTypeUTF16ExternalPlainText = result;
  off_18C4917E8[0] = kUTTypeUTF16ExternalPlainTextFunction;
  return result;
}

uint64_t kUTTypeUTF16ExternalPlainTextFunction()
{
  return constantkUTTypeUTF16ExternalPlainText;
}

uint64_t initkUTTypeUTF16PlainText()
{
  uint64_t v0 = MobileCoreServicesLibrary_1();
  uint64_t v1 = (uint64_t *)dlsym(v0, "kUTTypeUTF16PlainText");
  if (!v1) {
    __assert_rtn("initkUTTypeUTF16PlainText", "NSString+NSItemProvider.m", 20, "constant");
  }
  uint64_t result = *v1;
  constantkUTTypeUTF16PlainText = result;
  off_18C4917F0[0] = kUTTypeUTF16PlainTextFunction;
  return result;
}

uint64_t kUTTypeUTF16PlainTextFunction()
{
  return constantkUTTypeUTF16PlainText;
}

uint64_t initkUTTypePlainText()
{
  uint64_t v0 = MobileCoreServicesLibrary_1();
  uint64_t v1 = (uint64_t *)dlsym(v0, "kUTTypePlainText");
  if (!v1) {
    __assert_rtn("initkUTTypePlainText", "NSString+NSItemProvider.m", 22, "constant");
  }
  uint64_t result = *v1;
  constantkUTTypePlainText = result;
  off_18C4917F8[0] = kUTTypePlainTextFunction;
  return result;
}

uint64_t kUTTypePlainTextFunction()
{
  return constantkUTTypePlainText;
}

uint64_t initkUTTypeURL_1()
{
  uint64_t v0 = MobileCoreServicesLibrary_1();
  uint64_t v1 = (uint64_t *)dlsym(v0, "kUTTypeURL");
  if (!v1) {
    __assert_rtn("initkUTTypeURL", "NSString+NSItemProvider.m", 17, "constant");
  }
  uint64_t result = *v1;
  constantkUTTypeURL_1 = result;
  off_18C491800[0] = kUTTypeURLFunction_1;
  return result;
}

uint64_t kUTTypeURLFunction_1()
{
  return constantkUTTypeURL_1;
}

uint64_t initUTTypeConformsTo_1(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = MobileCoreServicesLibrary_1();
  uint64_t v5 = (uint64_t (*)())dlsym(v4, "UTTypeConformsTo");
  off_18C491810[0] = v5;
  if (!v5) {
    __assert_rtn("initUTTypeConformsTo", "NSString+NSItemProvider.m", 23, "softLinkUTTypeConformsTo");
  }
  return ((uint64_t (*)(uint64_t, uint64_t))v5)(a1, a2);
}

uint64_t initkUTTypeFileURL()
{
  uint64_t v0 = MobileCoreServicesLibrary_1();
  uint64_t v1 = (uint64_t *)dlsym(v0, "kUTTypeFileURL");
  if (!v1) {
    __assert_rtn("initkUTTypeFileURL", "NSString+NSItemProvider.m", 18, "constant");
  }
  uint64_t result = *v1;
  constantkUTTypeFileURL = result;
  off_18C491808[0] = kUTTypeFileURLFunction;
  return result;
}

uint64_t kUTTypeFileURLFunction()
{
  return constantkUTTypeFileURL;
}

uint64_t _NSNullCompare(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a3) {
    return -1LL;
  }
  else {
    return 0LL;
  }
}

uint64_t _NSCompareObject(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, int a6)
{
  if (a1 == a2) {
    return 0LL;
  }
  if (a1)
  {
    if (a2)
    {
      if (a4) {
        uint64_t result = ((uint64_t (*)(uint64_t, uint64_t))a3)(a1, a4);
      }
      else {
        uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(a3 + 16))(a3, a1);
      }
      if (!a5) {
        return -result;
      }
    }

    else
    {
      uint64_t v9 = 1LL;
      if (((a5 ^ 1) & a6) == 0) {
        uint64_t v9 = -1LL;
      }
      if (a5 ^ 1 | a6) {
        return v9;
      }
      else {
        return 1LL;
      }
    }
  }

  else
  {
    uint64_t v8 = -1LL;
    if (((a5 ^ 1) & a6) == 0) {
      uint64_t v8 = 1LL;
    }
    if (a5 ^ 1 | a6) {
      return v8;
    }
    else {
      return -1LL;
    }
  }

  return result;
}

void sub_1836193C0(_Unwind_Exception *a1)
{
}

void _sortedObjectsUsingDescriptors(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  uint64_t v8 = malloc(8 * a2);
  uint64_t v9 = [MEMORY[0x189603FE8] null];
  uint64_t v10 = v9;
  uint64_t v11 = 0LL;
  do
  {
    if (*(void *)(a1 + 8 * v11) == v9) {
      *(void *)(a1 + 8 * v11) = 0LL;
    }
    ++v11;
  }

  while (a2 != v11);
  size_t v12 = [a3 count];
  __int128 v13 = calloc(1uLL, 0x28uLL);
  *__int128 v13 = calloc(v12, 0x30uLL);
  if (v12)
  {
    uint64_t v14 = 0LL;
    uint64_t v15 = 8LL;
    while (1)
    {
      uint64_t v16 = [a3 objectAtIndex:v14];
      unint64_t v17 = (char *)*v13;
      if ((*(_BYTE *)(v16 + 8) & 4) != 0) {
        break;
      }
      *(void *)&v17[v15] = v16;
      ++v14;
      v15 += 48LL;
      if (v12 == v14) {
        goto LABEL_9;
      }
    }

    free(v17);
    free(v13);
    objc_exception_throw((id)[MEMORY[0x189603F70] exceptionWithName:*MEMORY[0x189603A58] reason:@"Sort descriptor was decoded from a secure archive and local evaluation is not enabled." userInfo:0]);
    -[NSArray(NSKeyValueSorting) sortedArrayUsingDescriptors:]();
  }

  else
  {
LABEL_9:
    unsigned int v31 = a3;
    _OWORD v13[3] = 0LL;
    _OWORD v13[4] = v12;
    v13[1] = a1;
    void v13[2] = a2;
    _NSInitializeCacheLine(0LL, v13);
    uint64_t v18 = (char *)*v13;
    if (!*(void *)(*v13 + 16LL))
    {
      uint64_t v19 = 0LL;
      unint64_t v20 = (uint64_t *)(*(void *)v18 + 8LL);
      do
      {
        uint64_t v21 = v13[1];
        uint64_t v22 = *(void *)(v21 + 8 * v19);
        if (*((void *)v18 + 3)) {
          uint64_t v22 = objc_msgSend(*(id *)(v21 + 8 * v19), "valueForKeyPath:");
        }
        if (v22 == [MEMORY[0x189603FE8] null]) {
          uint64_t v22 = 0LL;
        }
        if (v22)
        {
          if (*((void *)v18 + 5))
          {
            __int16 v23 = (objc_class *)objc_opt_class();
            MethodIMP Implementation = class_getMethodImplementation(v23, *((SEL *)v18 + 5));
          }

          else
          {
            MethodIMP Implementation = *(void **)(*((void *)v18 + 1) + 32LL);
          }
        }

        else
        {
          MethodIMP Implementation = _NSNullCompare;
        }

        *(v20 - 1) = (uint64_t)MethodImplementation;
        *unint64_t v20 = v22;
        ++v19;
        v20 += 2;
      }

      while (a2 != v19);
    }

    uint64_t v25 = 0LL;
    do
    {
      v8[v25] = v25;
      ++v25;
    }

    while (a2 != v25);
    [v31 count];
    CFMergeSortArray();
    uint64_t v26 = 0LL;
    do
    {
      uint64_t v27 = *(void *)(a1 + 8LL * v8[v26]);
      if (!v27) {
        uint64_t v27 = v10;
      }
      *(void *)(a4 + 8 * v26++) = v27;
    }

    while (a2 != v26);
    uint64_t v28 = v13[3];
    int v29 = (void *)*v13;
    if (v28)
    {
      uint64_t v30 = v29 + 2;
      do
      {
        if (!*v30) {
          free((void *)*(v30 - 2));
        }
        v30 += 6;
        --v28;
      }

      while (v28);
    }

    free(v29);
    free(v13);
    free(v8);
  }

void sub_1836198D4(_Unwind_Exception *a1)
{
}

void sub_183619D80(_Unwind_Exception *a1)
{
}

uint64_t _NSSortFunctionOne(uint64_t *a1, uint64_t *a2, void *a3)
{
  uint64_t v3 = *a1;
  uint64_t v4 = *a2;
  uint64_t v5 = *a3;
  uint64_t v6 = *(uint64_t (**)(void, char *, void, void))(*a3 + 16LL);
  if (v6) {
    return v6( *(void *)(v5 + 8),  sel_compareObject_toObject_,  *(void *)(a3[1] + 8 * v3),  *(void *)(a3[1] + 8 * v4));
  }
  uint64_t v8 = *(void *)v5 + 16 * v3;
  uint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))v8;
  uint64_t v9 = *(void *)(v8 + 8);
  else {
    uint64_t v11 = (uint64_t *)(v5 + 40);
  }
  return _NSCompareObject( v9,  *(void *)(*(void *)v5 + 16 * v4 + 8),  (uint64_t)v10,  *v11,  *(unsigned __int8 *)(v5 + 32),  *(unsigned __int8 *)(v5 + 33));
}

uint64_t _NSSortFunctionMany(uint64_t *a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3 = a3[4];
  if (v3)
  {
    uint64_t v5 = 0LL;
    unint64_t v6 = 0LL;
    uint64_t v7 = *a1;
    uint64_t v8 = *a2;
    unint64_t v9 = a3[3];
    uint64_t v28 = a3[4];
    uint64_t v29 = *a1;
    uint64_t v30 = *a2;
    do
    {
      if (v6 >= v9)
      {
        _NSInitializeCacheLine(v6, a3);
        ++v9;
      }

      uint64_t v10 = *a3;
      uint64_t v11 = *a3 + v5;
      size_t v12 = *(uint64_t (**)(void, char *, void, void))(v11 + 16);
      if (v12)
      {
        uint64_t result = v12( *(void *)(v11 + 8),  sel_compareObject_toObject_,  *(void *)(a3[1] + 8 * v7),  *(void *)(a3[1] + 8 * v8));
        if (result) {
          return result;
        }
      }

      else
      {
        uint64_t v14 = *(void *)(v10 + v5);
        uint64_t v15 = (uint64_t (**)(uint64_t, uint64_t, uint64_t))(v14 + 16 * v7);
        MethodIMP Implementation = *v15;
        if (!*v15)
        {
          uint64_t v17 = a3[1];
          uint64_t v18 = *(void *)(v17 + 8 * v29);
          if (*(void *)(v10 + v5 + 24)) {
            uint64_t v18 = objc_msgSend(*(id *)(v17 + 8 * v29), "valueForKeyPath:");
          }
          if (v18 == objc_msgSend(MEMORY[0x189603FE8], "null", v28)) {
            uint64_t v19 = 0LL;
          }
          else {
            uint64_t v19 = v18;
          }
          if (v19)
          {
            uint64_t v20 = v10 + v5;
            if (*(void *)(v10 + v5 + 40))
            {
              uint64_t v21 = (objc_class *)objc_opt_class();
              MethodIMP Implementation = (uint64_t (*)(uint64_t, uint64_t, uint64_t))class_getMethodImplementation( v21,  *(SEL *)(v20 + 40));
            }

            else
            {
              MethodIMP Implementation = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v20 + 8) + 32LL);
            }
          }

          else
          {
            MethodIMP Implementation = _NSNullCompare;
          }

          *uint64_t v15 = MethodImplementation;
          *(void *)(v14 + 16 * v29 + _Block_object_dispose(va, 8) = v19;
          uint64_t v8 = v30;
        }

        uint64_t v22 = (void *)(v14 + 16 * v8);
        if (*v22)
        {
          __int16 v23 = (void *)v22[1];
        }

        else
        {
          __int16 v23 = *(void **)(a3[1] + 8 * v8);
          if (*(void *)(v10 + v5 + 24)) {
            __int16 v23 = (void *)objc_msgSend(v23, "valueForKeyPath:");
          }
          if (v23)
          {
            uint64_t v24 = v10 + v5;
            if (*(void *)(v10 + v5 + 40))
            {
              uint64_t v25 = (objc_class *)objc_opt_class();
              uint64_t v26 = class_getMethodImplementation(v25, *(SEL *)(v24 + 40));
            }

            else
            {
              uint64_t v26 = *(void **)(*(void *)(v24 + 8) + 32LL);
            }
          }

          else
          {
            uint64_t v26 = _NSNullCompare;
          }

          uint64_t v3 = v28;
          *uint64_t v22 = v26;
          *(void *)(v14 + 16 * v30 + _Block_object_dispose(va, 8) = v23;
        }

        uint64_t v7 = v29;
        uint64_t v27 = (uint64_t *)(v10 + v5 + 40);
        if (MethodImplementation == _NSNullCompare) {
          uint64_t v27 = (uint64_t *)&selRef_compare_;
        }
        uint64_t result = _NSCompareObject( *(void *)(v14 + 16 * v29 + 8),  (uint64_t)v23,  (uint64_t)MethodImplementation,  *v27,  *(unsigned __int8 *)(v10 + v5 + 32),  *(unsigned __int8 *)(v10 + v5 + 33));
        uint64_t v8 = v30;
        if (result) {
          return result;
        }
      }

      ++v6;
      v5 += 48LL;
    }

    while (v3 != v6);
  }

  return 0LL;
}

void *_NSInitializeCacheLine(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  uint64_t v5 = *a2 + 48 * a1;
  unint64_t v6 = *(void **)(v5 + 8);
  *(_BYTE *)(v5 + 32) = [v6 ascending];
  *(_BYTE *)(v5 + 33) = [v6 reverseNullOrder];
  *(void *)(v5 + 40) = [v6 selector];
  *(void *)(v5 + 24) = [v6 key];
  uint64_t v7 = (objc_class *)objc_opt_class();
  MethodIMP Implementation = class_getMethodImplementation(v7, sel_compareObject_toObject_);
  unint64_t v9 = (IMP *)(v5 + 16);
  if (MethodImplementation == (IMP)_NSInternalCompareObject)
  {
    IMP *v9 = 0LL;
    uint64_t result = calloc(a2[2], 0x10uLL);
  }

  else
  {
    IMP v10 = MethodImplementation;
    uint64_t result = 0LL;
    IMP *v9 = v10;
  }

  *(void *)(v4 + 48 * a1) = result;
  ++a2[3];
  return result;
}

uint64_t sub_18361A4C8()
{
  return 0LL;
}

uint64_t sub_18361A540()
{
  return 0LL;
}

uint64_t sub_18361A580()
{
  return 0LL;
}

uint64_t sub_18361A630()
{
  return 7LL;
}

uint64_t sub_18361A670()
{
  return 0LL;
}

void _inputStreamCallbackFunc(uint64_t a1, uint64_t a2, void *a3)
{
  id v5 = (id)[a3 retainedDelegate];
  if ((objc_opt_respondsToSelector() & 1) != 0) {
    [v5 stream:a1 handleEvent:a2];
  }
}

void _outputStreamCallbackFunc(uint64_t a1, uint64_t a2, void *a3)
{
  id v5 = (id)[a3 retainedDelegate];
  if ((objc_opt_respondsToSelector() & 1) != 0) {
    [v5 stream:a1 handleEvent:a2];
  }
}

uint64_t sub_18361B1E4()
{
  return -1LL;
}

uint64_t sub_18361B224()
{
  return 0LL;
}

uint64_t sub_18361B264()
{
  return 0LL;
}

uint64_t sub_18361B2CC()
{
  return -1LL;
}

uint64_t sub_18361B30C()
{
  return 0LL;
}

void _NSAllocatorAllocateHALTIfUsed()
{
}

void _NSAllocatorDeallocateWithBlock(uint64_t a1, void (**a2)(void))
{
}

uint64_t sub_18361BB80()
{
  return 0LL;
}

uint64_t sub_18361BBA0()
{
  return 0LL;
}

void sub_18361EAD4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
}

uint64_t _NSEncodingToNewDataForExtendedAttribute(unint64_t a1)
{
  uint64_t v9 = *MEMORY[0x1895F89C0];
  CFStringEncoding v1 = CFStringConvertNSStringEncodingToEncoding(a1);
  if (v1 == -1) {
    return 0LL;
  }
  CFStringEncoding v2 = v1;
  CFIndex usedBufLen = 0LL;
  uint64_t v3 = CFStringConvertEncodingToIANACharSetName(v1);
  if (v3)
  {
    uint64_t v4 = v3;
    v10.length = CFStringGetLength(v3);
    v10.NSUInteger location = 0LL;
    if (CFStringGetBytes(v4, v10, 0x8000100u, 0x3Fu, 1u, buffer, 70LL, &usedBufLen))
    {
      CFIndex v5 = usedBufLen;
    }

    else
    {
      CFIndex v5 = 0LL;
      CFIndex usedBufLen = 0LL;
    }
  }

  else
  {
    CFIndex v5 = 0LL;
  }

  snprintf_l((char *)&buffer[v5], 0x63uLL, 0LL, ";%u", v2);
  return [objc_alloc(MEMORY[0x189603F48]) initWithBytes:buffer length:strlen((const char *)buffer)];
}

uint64_t _NSEncodingFromDataForExtendedAttribute(void *a1)
{
  uint64_t v15 = *MEMORY[0x1895F89C0];
  if (!a1) {
    return 0xFFFFFFFFLL;
  }
  CFStringEncoding v2 = (const UInt8 *)[a1 bytes];
  uint64_t v3 = [a1 length];
  uint64_t v4 = &v2[v3];
  CFIndex v5 = v2;
  if (v3 >= 1)
  {
    CFIndex v5 = v2;
    do
    {
      if (*v5 == 59) {
        break;
      }
      ++v5;
    }

    while (v5 < v4);
  }

  if (v5 >= v4 - 1
    || ((unint64_t v6 = v4 - (v5 + 1), v6 >= 0x63) ? (v7 = 99LL) : (v7 = v6),
        (__memcpy_chk(), v14[v7] = 0, sscanf_l(v14, 0LL, "%u", &encoding) != 1)
     || !CFStringIsEncodingAvailable(encoding)
     || (unint64_t v8 = CFStringConvertEncodingToNSStringEncoding(encoding), v8 == 0xFFFFFFFF)))
  {
    if (v5 > v2)
    {
      uint64_t v9 = CFStringCreateWithBytes(0LL, v2, v5 - v2, 0x8000100u, 1u);
      if (v9)
      {
        CFRange v10 = v9;
        CFStringEncoding v11 = CFStringConvertIANACharSetNameToEncoding(v9);
        if (v11 == -1) {
          unint64_t v8 = 0xFFFFFFFFLL;
        }
        else {
          unint64_t v8 = CFStringConvertEncodingToNSStringEncoding(v11);
        }
        CFRelease(v10);
        return v8;
      }
    }

    return 0xFFFFFFFFLL;
  }

  return v8;
}

uint64_t writeStringToURLOrPath(void *a1, void *a2, unsigned int a3, uint64_t a4, NSError **a5)
{
  v13[1] = *(id *)MEMORY[0x1895F89C0];
  uint64_t result = [a1 getExternalRepresentation:v13 extendedAttributes:&v12 forWritingToURLOrPath:a2 usingEncoding:a4 error:a5];
  if ((_DWORD)result)
  {
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0)
    {
      if (([a2 isFileURL] & 1) == 0) {
        return [v13[0] writeToURL:a2 options:a3 error:a5];
      }
      uint64_t v9 = [a2 path];
      if (!v9)
      {
        if (!a5) {
          return 0LL;
        }
        CFRange v10 = _NSErrorWithFilePath(4LL, (uint64_t)a2);
        uint64_t result = 0LL;
        *a5 = v10;
        return result;
      }
    }

    else
    {
      uint64_t v9 = (uint64_t)a2;
    }

    uint64_t v11 = [v12 objectForKey:@"com.apple.TextEncoding"];
    if (v11) {
      return [MEMORY[0x189603F48] _writeDataToPath:v9 data:v13[0] options:a3 stringEncodingAttributeData:v11 reportProgress:0 error:a5];
    }
    else {
      return [MEMORY[0x189603F48] _writeDataToPath:v9 data:v13[0] options:a3 reportProgress:0 error:a5];
    }
  }

  return result;
}

uint64_t sub_1836204AC()
{
  return v0;
}

uint64_t sub_1836204D0()
{
  return v0;
}

uint64_t sub_1836204F4()
{
  return v0;
}

uint64_t sub_183620518()
{
  return v0;
}

uint64_t sub_18362053C()
{
  return v0;
}

uint64_t sub_183620560()
{
  return v0;
}

uint64_t sub_183620648()
{
  return v0;
}

uint64_t sub_18362066C()
{
  return v0;
}

uint64_t sub_183620690()
{
  return v0;
}

uint64_t sub_183621158()
{
  return 0LL;
}

uint64_t sub_18362119C()
{
  return 0LL;
}

CFStringRef _NSNewInlineCString(const UInt8 *a1, CFIndex a2)
{
  uint64_t v4 = (const __CFAllocator *)*MEMORY[0x189604DB0];
  CFStringEncoding SystemEncoding = CFStringGetSystemEncoding();
  return CFStringCreateWithBytes(v4, a1, a2, SystemEncoding, 0);
}

uint64_t NSCompareCharacters@<X0>( unsigned __int16 *a1@<X0>, unsigned __int16 *a2@<X1>, unint64_t a3@<X2>, unint64_t a4@<X3>, char a5@<W4>, uint64_t a6@<X8>)
{
  if (a3 >= a4) {
    unint64_t v6 = a4;
  }
  else {
    unint64_t v6 = a3;
  }
  if (v6)
  {
    while (1)
    {
      int v8 = *a1++;
      int v7 = v8;
      int v10 = *a2++;
      int v9 = v10;
      if ((a5 & 1) != 0)
      {
      }

      if (!--v6) {
        goto LABEL_16;
      }
    }
  }

  else
  {
LABEL_16:
    a6 = a3 > a4;
    if (a3 < a4) {
      return -1LL;
    }
  }

  return a6;
}

uint64_t NSCompareCString( unsigned __int8 *a1, unsigned __int8 *a2, unint64_t a3, unint64_t a4, char a5)
{
  if (a3 >= a4) {
    unint64_t v5 = a4;
  }
  else {
    unint64_t v5 = a3;
  }
  if (v5)
  {
    uint64_t v6 = (uint64_t)&_qfqp2text;
    while (1)
    {
      unsigned int v7 = *a1++;
      int v8 = *(unsigned __int16 *)(_NSCStringCharToUnicharTable + 2LL * v7);
      unsigned int v9 = *a2++;
      int v10 = *(unsigned __int16 *)(_NSCStringCharToUnicharTable + 2LL * v9);
      if ((a5 & 1) != 0)
      {
      }

      if (!--v5) {
        goto LABEL_17;
      }
    }
  }

  else
  {
LABEL_17:
    uint64_t v6 = a3 > a4;
    if (a3 < a4) {
      return -1LL;
    }
  }

  return v6;
}

void __NSSetCStringCharToUnichar(uint64_t (*a1)(uint64_t a1))
{
  else {
    BOOL v2 = 0;
  }
  if (!v2)
  {
    if (_NSCStringCharToUnicharTable != MEMORY[0x189604988]
      && _NSCStringCharToUnicharTable != MEMORY[0x189604998]
      && _NSCStringCharToUnicharTable != 0)
    {
      free((void *)_NSCStringCharToUnicharTable);
    }

    unint64_t v5 = (_OWORD *)MEMORY[0x189604988];
    if (a1 && (char *)a1 != (char *)__NSASCIICharToUnichar)
    {
      if (a1 == __NSCharToUnicharCFWrapper && _NSDefaultStringEncoding == 30)
      {
        unint64_t v5 = (_OWORD *)MEMORY[0x189604998];
      }

      else
      {
        uint64_t v6 = malloc(0x200uLL);
        __int128 v7 = v5[13];
        v6[12] = v5[12];
        v6[13] = v7;
        __int128 v8 = v5[15];
        v6[14] = v5[14];
        v6[15] = v8;
        __int128 v9 = v5[9];
        v6[8] = v5[8];
        v6[9] = v9;
        __int128 v10 = v5[11];
        v6[10] = v5[10];
        v6[11] = v10;
        __int128 v11 = v5[5];
        void v6[4] = v5[4];
        _OWORD v6[5] = v11;
        __int128 v12 = v5[7];
        void v6[6] = v5[6];
        v6[7] = v12;
        __int128 v13 = v5[1];
        *uint64_t v6 = *v5;
        v6[1] = v13;
        __int128 v14 = v5[2];
        __int128 v15 = v5[3];
        uint64_t v16 = 128LL;
        void v6[2] = v14;
        double v6[3] = v15;
        do
        {
          *((_WORD *)v6 + v__swift_destroy_boxed_opaque_existential_1(v0 + 16) = a1(v16);
          ++v16;
        }

        while (v16 != 256);
        unint64_t v5 = v6;
      }
    }

    _NSCStringCharToUnicharTable = (uint64_t)v5;
  }

  _NSCStringCharToUnichar = (uint64_t)a1;
}

uint64_t __NSCharToUnicharCFWrapper(uint64_t a1)
{
  uint64_t v5 = *MEMORY[0x1895F89C0];
  int v1 = ((uint64_t (*)(void, uint64_t, unsigned __int16 *))*MEMORY[0x189604960])(0LL, a1, &v4);
  unsigned __int16 v2 = v4;
  if (!v1) {
    return (unsigned __int16)-3;
  }
  return v2;
}

uint64_t _NSDefaultCStringEncoding()
{
  CFStringEncoding SystemEncoding = CFStringGetSystemEncoding();
  unint64_t v1 = CFStringConvertEncodingToNSStringEncoding(SystemEncoding);
  _NSDefaultStringEncoding = v1;
  if (*MEMORY[0x189604960])
  {
    _NSCStringEncoding = v1;
    __NSSetCStringCharToUnichar(__NSCharToUnicharCFWrapper);
    __NSDefaultStringEncodingFullyInited = 1;
  }

  else
  {
    __NSDefaultStringEncodingFullyInited = CFStringGetSystemEncoding() != 0;
    _NSCStringEncoding = 1LL;
    __NSSetCStringCharToUnichar((uint64_t (*)(uint64_t))__NSASCIICharToUnichar);
  }

  return _NSDefaultStringEncoding;
}

uint64_t _NSConvertToASCIIorUnicode2( unsigned __int16 *a1, size_t size, unint64_t encoding, char a4, uint64_t a5, malloc_zone_t *zone)
{
  *(_BYTE *)a5 = a4 ^ 1;
  *(_BYTE *)(a5 + 1) = 0;
  *(void *)(a5 + _Block_object_dispose((const void *)(v10 - 88), 8) = 0LL;
  *(void *)(a5 + 24) = 0LL;
  if (!size) {
    return 1LL;
  }
  uint64_t v6 = zone;
  unsigned __int8 v9 = a1;
  if (encoding == 10 || !encoding)
  {
    int v10 = *a1;
    BOOL v11 = v10 == 65534 || v10 == 65279;
    if (v11) {
      __int128 v12 = a1 + 1;
    }
    else {
      __int128 v12 = a1;
    }
    if (v11) {
      int v13 = *a1;
    }
    else {
      int v13 = 0;
    }
    size_t v14 = (size >> 1) - (v13 != 0);
    *(_BYTE *)a5 = 0;
    *(void *)(a5 + 24) = v14;
    if (v14 <= 0x1F8)
    {
      __int128 v15 = (_WORD *)(a5 + 32);
    }

    else
    {
      if (!zone) {
        uint64_t v6 = malloc_default_zone();
      }
      __int128 v15 = malloc_zone_malloc(v6, 2 * v14);
    }

    *(void *)(a5 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = v15;
    *(_BYTE *)(a5 + 1) = v14 > 0x1F8;
    if (v13 == 65279)
    {
      memmove(v15, v12, 2 * v14);
    }

    else
    {
      for (; v14; --v14)
      {
        unsigned int v17 = *v12++;
        *v15++ = bswap32(v17) >> 16;
      }
    }

    return 1LL;
  }

  if (size >= 3
    && encoding == 4
    && *(unsigned __int8 *)a1 == 239
    && *((unsigned __int8 *)a1 + 1) == 187
    && *((unsigned __int8 *)a1 + 2) == 191)
  {
    if (size != 3)
    {
      unsigned __int8 v9 = (_BYTE)a1 + 3;
      goto LABEL_24;
    }

    return 1LL;
  }

uint64_t _NSConvertToASCIIorUnicode( unsigned __int16 *a1, size_t a2, unint64_t a3, void *a4, void *a5, _BYTE *a6, malloc_zone_t *zone)
{
  __int128 v7 = zone;
  uint64_t v23 = *MEMORY[0x1895F89C0];
  uint64_t v11 = _NSConvertToASCIIorUnicode2(a1, a2, a3, 0, (uint64_t)v19, zone);
  if ((_DWORD)v11)
  {
    char v12 = v19[0];
    int v13 = &v20;
    if (!v19[0]) {
      int v13 = &v21;
    }
    uint64_t v14 = *v13;
    if (v19[1])
    {
      *a4 = v14;
    }

    else if (v14)
    {
      size_t v15 = v22 << (v19[0] == 0);
      if (!v7) {
        __int128 v7 = malloc_default_zone();
      }
      CFStringEncoding v16 = malloc_zone_malloc(v7, v15);
      *a4 = v16;
      unsigned int v17 = (const void **)&v21;
      if (v19[0]) {
        unsigned int v17 = (const void **)&v20;
      }
      memmove(v16, *v17, v22 << (v19[0] == 0));
      char v12 = v19[0];
    }

    else
    {
      *a4 = 0LL;
    }

    *a5 = v22;
    *a6 = v12;
  }

  return v11;
}

uint64_t sub_183625C10()
{
  return 0LL;
}

uint64_t sub_183625C88()
{
  return 0LL;
}

uint64_t sub_183625CC8()
{
  return 0LL;
}

uint64_t sub_183625D08()
{
  return 0LL;
}

uint64_t sub_183625D80()
{
  return 0LL;
}

uint64_t sub_1836260D0()
{
  return 0LL;
}

uint64_t sub_183626110()
{
  return 0LL;
}

uint64_t sub_183626150()
{
  return 0LL;
}

uint64_t sub_183626190()
{
  return 0LL;
}

uint64_t sub_1836261D0()
{
  return 0LL;
}

uint64_t sub_183626210()
{
  return 0LL;
}

uint64_t sub_183626250()
{
  return 0LL;
}

uint64_t sub_183626290()
{
  return 0LL;
}

uint64_t sub_183626380()
{
  return 0LL;
}

uint64_t sub_1836263C0()
{
  return 0LL;
}

uint64_t sub_183626400()
{
  return 0LL;
}

void sub_183626A1C(_Unwind_Exception *a1)
{
}

void sub_183626B4C(_Unwind_Exception *a1)
{
}

void sub_183627EDC(_Unwind_Exception *a1)
{
}

void sub_183628160(_Unwind_Exception *a1)
{
}

void sub_183628470(_Unwind_Exception *a1)
{
}

void COPY_SETTER_IMPL(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  unint64_t v5 = atomic_load((unint64_t *)(a1 + 56));
  if ((v5 & 0x100000000LL) != 0)
  {
    char v12 = (void *)MEMORY[0x189603F70];
    uint64_t v13 = *MEMORY[0x189603A60];
    uint64_t v14 = (NSString *)@"task already launched";
    goto LABEL_8;
  }

  if (!a2)
  {
    uint64_t v14 = +[NSString stringWithFormat:](&OBJC_CLASS___NSString, "stringWithFormat:", @"%@", a4);
    char v12 = (void *)MEMORY[0x189603F70];
    uint64_t v13 = *MEMORY[0x189603A60];
LABEL_8:
    objc_exception_throw((id)[v12 exceptionWithName:v13 reason:v14 userInfo:0]);
    CFStringEncoding v16 = v15;
    os_unfair_lock_unlock(v4);
    _Unwind_Resume(v16);
  }

  unsigned __int8 v9 = (os_unfair_lock_s *)(a1 + 8);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 8));
  id v10 = *(id *)(a1 + 16);
  if (!v10)
  {
    id v10 = +[NSTask currentTaskDictionary](&OBJC_CLASS___NSTask, "currentTaskDictionary");
    *(void *)(a1 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = v10;
  }

  uint64_t v11 = (void *)[a2 copyWithZone:0];
  [v10 setObject:v11 forKey:a3];

  os_unfair_lock_unlock(v9);
}

id COPY_GETTER_IMPL(uint64_t a1, uint64_t a2)
{
  uint64_t v15 = *MEMORY[0x1895F89C0];
  uint64_t v9 = 0LL;
  id v10 = &v9;
  uint64_t v11 = 0x3052000000LL;
  char v12 = __Block_byref_object_copy__15;
  uint64_t v13 = __Block_byref_object_dispose__15;
  uint64_t v14 = 0LL;
  unsigned __int16 v4 = (os_unfair_lock_s *)(a1 + 8);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 8));
  id v5 = *(id *)(a1 + 16);
  if (!v5)
  {
    id v5 = +[NSTask currentTaskDictionary](&OBJC_CLASS___NSTask, "currentTaskDictionary");
    *(void *)(a1 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = v5;
  }

  uint64_t v6 = objc_msgSend((id)objc_msgSend(v5, "objectForKey:", a2), "copyWithZone:", 0);
  v10[5] = v6;
  os_unfair_lock_unlock(v4);
  id v7 = (id)v10[5];
  _Block_object_dispose(&v9, 8);
  return v7;
}

void sub_183628784(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

id GETTER_IMPL(uint64_t a1, uint64_t a2)
{
  uint64_t v15 = *MEMORY[0x1895F89C0];
  uint64_t v9 = 0LL;
  id v10 = &v9;
  uint64_t v11 = 0x3052000000LL;
  char v12 = __Block_byref_object_copy__15;
  uint64_t v13 = __Block_byref_object_dispose__15;
  uint64_t v14 = 0LL;
  unsigned __int16 v4 = (os_unfair_lock_s *)(a1 + 8);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 8));
  id v5 = *(id *)(a1 + 16);
  if (!v5)
  {
    id v5 = +[NSTask currentTaskDictionary](&OBJC_CLASS___NSTask, "currentTaskDictionary");
    *(void *)(a1 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = v5;
  }

  id v6 = (id)[v5 objectForKey:a2];
  v10[5] = (uint64_t)v6;
  os_unfair_lock_unlock(v4);
  id v7 = (id)v10[5];
  _Block_object_dispose(&v9, 8);
  return v7;
}

void sub_1836288F8(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

void NOCOPY_SETTER_IMPL(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4 = atomic_load((unint64_t *)(a1 + 56));
  if ((v4 & 0x100000000LL) != 0)
  {
    objc_exception_throw((id)[MEMORY[0x189603F70] exceptionWithName:*MEMORY[0x189603A60] reason:@"task already launched" userInfo:0]);
    uint64_t v11 = v10;
    os_unfair_lock_unlock(v3);
    _Unwind_Resume(v11);
  }

  __int128 v8 = (os_unfair_lock_s *)(a1 + 8);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 8));
  id v9 = *(id *)(a1 + 16);
  if (!v9)
  {
    id v9 = +[NSTask currentTaskDictionary](&OBJC_CLASS___NSTask, "currentTaskDictionary");
    *(void *)(a1 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = v9;
    if (a2) {
      goto LABEL_4;
    }
LABEL_6:
    [v9 removeObjectForKey:a3];
    goto LABEL_7;
  }

  if (!a2) {
    goto LABEL_6;
  }
LABEL_4:
  [v9 setObject:a2 forKey:a3];
LABEL_7:
  os_unfair_lock_unlock(v8);
}

void sub_183628D2C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
}

void __Block_byref_object_copy__15(uint64_t a1, uint64_t a2)
{
}

void __Block_byref_object_dispose__15(uint64_t a1)
{
}

void _signalRunningTask(uint64_t a1, const char *a2)
{
  unint64_t v2 = atomic_load((unint64_t *)(a1 + 56));
  if ((v2 & 0x100000000LL) == 0)
  {
    uint64_t v3 = (void *)[MEMORY[0x189603F70] exceptionWithName:*MEMORY[0x189603A60], +[NSString stringWithFormat:]( NSString, "stringWithFormat:", @"%@: task not launched", _NSMethodExceptionProem((objc_class *)a1, a2)), 0 reason userInfo];
    objc_exception_throw(v3);
    -[NSConcreteTask terminate](v4, v5);
  }

void __PTHREAD_SPAWN_EAGAIN_OVERLIMIT__()
{
  uint64_t v2 = *MEMORY[0x1895F89C0];
  uint64_t v0 = (os_log_s *)_NSOSLog();
  if (os_log_type_enabled(v0, OS_LOG_TYPE_FAULT))
  {
    *(_WORD *)uint64_t v1 = 0;
    _os_log_fault_impl( &dword_182EB1000,  v0,  OS_LOG_TYPE_FAULT,  "NSTask: Failed to spawn task due to receieving EAGAIN many times despite retrying; this means the system could not"
      " spawn a new process.",
      v1,
      2u);
  }

uint64_t sub_183629494()
{
  return 0LL;
}

uint64_t sub_1836294D4()
{
  return 0LL;
}

uint64_t sub_18362A530()
{
  return 0LL;
}

BOOL isBlock(void *a1)
{
  if (!a1) {
    return 0LL;
  }
  Class Class = object_getClass(a1);
  Class Superclass = class_getSuperclass(Class);
  if (!Superclass) {
    return 0LL;
  }
  uint64_t v3 = Superclass;
  do
  {
    uint64_t v4 = objc_opt_class();
    BOOL v5 = v3 == (objc_class *)v4;
    if (v3 == (objc_class *)v4) {
      break;
    }
    uint64_t v3 = class_getSuperclass(v3);
  }

  while (v3);
  return v5;
}

uint64_t threadRunLoop(_opaque_pthread_t *a1)
{
  if (pthread_equal(a1, 0LL)) {
    return 0LL;
  }
  else {
    return _CFRunLoopGet0();
  }
}

uint64_t __NSThread__block_start__(void *a1)
{
  if (qword_18C496418 != -1) {
    dispatch_once(&qword_18C496418, &__block_literal_global_219);
  }
  uint64_t v2 = pthread_setspecific(qword_18C496410, a1);
  uint64_t v3 = (void *)MEMORY[0x186E1FF60](v2);
  (*((void (**)(void *))a1 + 2))(a1);
  objc_autoreleasePoolPop(v3);
  return 0LL;
}

uint64_t __NSThread__start__(void *a1)
{
  uint64_t v31 = *MEMORY[0x1895F89C0];
  _CFSetTSD();
  _CFSetTSD();
  atomic_store(0xEu, (unsigned __int8 *)(a1[1] + 55LL));
  objc_sync_enter(a1);
  Current = CFRunLoopGetCurrent();
  __int128 v29 = 0u;
  __int128 v30 = 0u;
  __int128 v27 = 0u;
  __int128 v28 = 0u;
  id obj = *(id *)(a1[1] + 56LL);
  uint64_t v3 = [obj countByEnumeratingWithState:&v27 objects:v26 count:16];
  if (v3)
  {
    uint64_t v17 = *(void *)v28;
    uint64_t v4 = (const __CFAllocator *)*MEMORY[0x189604DD0];
    do
    {
      uint64_t v5 = 0LL;
      uint64_t v18 = v3;
      do
      {
        if (*(void *)v28 != v17) {
          objc_enumerationMutation(obj);
        }
        uint64_t v6 = *(void *)(*((void *)&v27 + 1) + 8 * v5);
        if (!*(void *)(a1[1] + 64LL)) {
          *(void *)(a1[1] + 64LL) = objc_opt_new();
        }
        __int128 v24 = 0u;
        __int128 v25 = 0u;
        __int128 v22 = 0u;
        __int128 v23 = 0u;
        if (v6) {
          id v7 = *(void **)(v6 + 32);
        }
        else {
          id v7 = 0LL;
        }
        uint64_t v8 = [v7 countByEnumeratingWithState:&v22 objects:v21 count:16];
        uint64_t v19 = v5;
        if (v8)
        {
          uint64_t v9 = *(void *)v23;
          do
          {
            for (uint64_t i = 0LL; i != v8; ++i)
            {
              if (*(void *)v23 != v9) {
                objc_enumerationMutation(v7);
              }
              uint64_t v11 = *(const __CFString **)(*((void *)&v22 + 1) + 8 * i);
              char v12 = (__CFRunLoopSource *)[*(id *)(a1[1] + 64) objectForKey:v11];
              if (!v12)
              {
                memset(&context, 0, 72);
                context.perform = (void (__cdecl *)(void *))__NSThreadPerformPerform;
                context.info = calloc(1uLL, 8uLL);
                char v12 = CFRunLoopSourceCreate(v4, 0LL, &context);
                *(void *)context.info = v12;
                CFRunLoopAddSource(Current, v12, v11);
                [*(id *)(a1[1] + 64) setObject:v12 forKey:v11];
                CFRelease(v12);
              }

              CFRunLoopSourceSignal(v12);
            }

            uint64_t v8 = [v7 countByEnumeratingWithState:&v22 objects:v21 count:16];
          }

          while (v8);
        }

        uint64_t v5 = v19 + 1;
      }

      while (v19 + 1 != v18);
      uint64_t v13 = [obj countByEnumeratingWithState:&v27 objects:v26 count:16];
      uint64_t v3 = v13;
    }

    while (v13);
  }

  objc_sync_exit(a1);
  _CFAutoreleasePoolPush();
  uint64_t v14 = (void *)[a1 name];
  if (v14) {
    pthread_setname_np((const char *)[v14 UTF8String]);
  }
  -[NSNotificationCenter postNotificationName:object:userInfo:]( +[NSNotificationCenter defaultCenter](&OBJC_CLASS___NSNotificationCenter, "defaultCenter"),  "postNotificationName:object:userInfo:",  @"_NSThreadDidStartNotification",  a1,  0LL);
  _CFAutoreleasePoolPop();
  if (!*(_BYTE *)(a1[1] + 54LL)) {
    [a1 main];
  }
  return +[NSThread exit](&OBJC_CLASS___NSThread, "exit");
}

void sub_18362C150(_Unwind_Exception *a1)
{
}

void sub_18362C3BC(_Unwind_Exception *a1)
{
}

uint64_t __NSThreadPerformPerform(__CFRunLoopSource **a1)
{
  uint64_t v2 = +[NSThread currentThread](&OBJC_CLASS___NSThread, "currentThread");
  objc_sync_enter(v2);
  unint64_t v3 = [*((id *)v2->_private + 7) count];
  uint64_t v4 = performQueueDequeue(v2, *((void **)v2->_private + 7), v3, *a1);
  uint64_t result = objc_sync_exit(v2);
  if (v4)
  {
    unint64_t v6 = v3 - 1;
    do
    {
      _CFAutoreleasePoolPush();
      [(id)v4[1] performSelector:v4[2] withObject:v4[3]];

      v4[1] = 0LL;
      v4[3] = 0LL;
      [v4 signal:2];

      _CFAutoreleasePoolPop();
      objc_sync_enter(v2);
      uint64_t v4 = performQueueDequeue(v2, *((void **)v2->_private + 7), v6, *a1);
      uint64_t result = objc_sync_exit(v2);
      --v6;
    }

    while (v4);
  }

  return result;
}

uint64_t __NSFinalizeThreadData()
{
  uint64_t v30 = *MEMORY[0x1895F89C0];
  _CFSetTSD();
  uint64_t result = _NSThreadGet0(1LL);
  uint64_t v1 = (void *)result;
  uint64_t v2 = *(void *)(result + 8);
  int v3 = *(unsigned __int8 *)(v2 + 52);
  if (v3 == 2)
  {
    *(_BYTE *)(v2 + 52) = 3;
    pthread_attr_destroy((pthread_attr_t *)(*(void *)(result + 8) + 72LL));

    return _CFSetTSD();
  }

  else if (v3 == 1)
  {
    *(_BYTE *)(v2 + 52) = 2;
    _CFAutoreleasePoolPush();

    *(void *)(v1[1] + 32LL) = 0LL;
    return _CFAutoreleasePoolPop();
  }

  else if (!*(_BYTE *)(v2 + 52))
  {
    *(_BYTE *)(v2 + 52) = 1;
    _CFAutoreleasePoolPush();
    objc_msgSend( +[NSNotificationCenter _defaultCenterWithoutCreating]( NSNotificationCenter,  "_defaultCenterWithoutCreating"),  "postNotificationName:object:userInfo:",  @"NSThreadWillExitNotification",  v1,  0);
    atomic_store(0xFu, (unsigned __int8 *)(v1[1] + 55LL));
    objc_sync_enter(v1);
    __int128 v26 = 0u;
    __int128 v27 = 0u;
    __int128 v28 = 0u;
    __int128 v29 = 0u;
    uint64_t v4 = *(void **)(v1[1] + 56LL);
    uint64_t v5 = [v4 countByEnumeratingWithState:&v26 objects:v25 count:16];
    if (v5)
    {
      uint64_t v6 = *(void *)v27;
      do
      {
        for (uint64_t i = 0LL; i != v5; ++i)
        {
          if (*(void *)v27 != v6) {
            objc_enumerationMutation(v4);
          }
          [*(id *)(*((void *)&v26 + 1) + 8 * i) signal:1];
        }

        uint64_t v5 = [v4 countByEnumeratingWithState:&v26 objects:v25 count:16];
      }

      while (v5);
    }

    uint64_t v8 = v1[1];
    uint64_t v9 = *(void **)(v8 + 64);
    if (v9)
    {
      __int128 v23 = 0u;
      __int128 v24 = 0u;
      __int128 v21 = 0u;
      __int128 v22 = 0u;
      uint64_t v10 = [v9 countByEnumeratingWithState:&v21 objects:v20 count:16];
      if (v10)
      {
        uint64_t v11 = *(void *)v22;
        do
        {
          for (uint64_t j = 0LL; j != v10; ++j)
          {
            if (*(void *)v22 != v11) {
              objc_enumerationMutation(v9);
            }
            uint64_t v13 = (__CFRunLoopSource *)[*(id *)(v1[1] + 64) objectForKey:*(void *)(*((void *)&v21 + 1) + 8 * j)];
            memset(&v19, 0, sizeof(v19));
            CFRunLoopSourceGetContext(v13, &v19);
            free(v19.info);
          }

          uint64_t v10 = [v9 countByEnumeratingWithState:&v21 objects:v20 count:16];
        }

        while (v10);
      }

      *(void *)(v1[1] + 64LL) = 0LL;
      uint64_t v8 = v1[1];
    }

    uint64_t v14 = *(void **)(v8 + 56);
    if (v14)
    {

      *(void *)(v1[1] + 56LL) = 0LL;
    }

    objc_sync_exit(v1);
    uint64_t v15 = (void *)v1[1];
    if (v15) {
      uint64_t v15 = (void *)v15[3];
    }

    CFStringEncoding v16 = (void *)v1[1];
    if (v16)
    {
      _OWORD v16[3] = 0LL;
      CFStringEncoding v16 = (void *)v1[1];
      if (v16) {
        CFStringEncoding v16 = (void *)v16[1];
      }
    }

    uint64_t v18 = v1[1];
    uint64_t v17 = v1 + 1;
    *(void *)(v18 + _Block_object_dispose(va, 8) = 0LL;

    *(void *)(*v17 + 32LL) = 0LL;
    return _CFAutoreleasePoolPop();
  }

  return result;
}

void sub_18362CDD8(_Unwind_Exception *a1)
{
}

uint64_t ____mainNSThread_block_invoke()
{
  uint64_t v0 = objc_opt_new();
  atomic_store(0xEu, (unsigned __int8 *)(*(void *)(v0 + 8) + 55LL));
  uint64_t result = pthread_main_thread_np();
  *(void *)(*(void *)(v0 + 8) + 136LL) = result;
  qword_18C496408 = v0;
  return result;
}

void *performQueueDequeue(void *a1, void *a2, unint64_t a3, __CFRunLoopSource *a4)
{
  uint64_t v29 = *MEMORY[0x1895F89C0];
  if (!a3) {
    return 0LL;
  }
  Current = CFRunLoopGetCurrent();
  CFRunLoopMode v9 = CFRunLoopCopyCurrentMode(Current);
  objc_sync_enter(a1);
  __int128 v25 = 0u;
  __int128 v26 = 0u;
  __int128 v27 = 0u;
  __int128 v28 = 0u;
  id obj = a1;
  uint64_t v10 = [a2 countByEnumeratingWithState:&v25 objects:v24 count:16];
  if (v10)
  {
    source = a4;
    uint64_t v11 = 0LL;
    uint64_t v12 = *(void *)v26;
    uint64_t v13 = *MEMORY[0x1896051A8];
    while (2)
    {
      uint64_t v14 = 0LL;
      uint64_t v22 = v10 + v11;
      do
      {
        if (*(void *)v26 != v12) {
          objc_enumerationMutation(a2);
        }
        uint64_t v15 = *(void **)(*((void *)&v25 + 1) + 8 * v14);
        if (v15) {
          CFStringEncoding v16 = (void *)v15[4];
        }
        else {
          CFStringEncoding v16 = 0LL;
        }
        if (([v16 containsObject:v9] & 1) != 0
          || (!v15 ? (uint64_t v17 = 0LL) : (uint64_t v17 = (void *)v15[4]),
              [v17 containsObject:v13] && _CFRunLoop01()))
        {
          CFRunLoopSourceContext v19 = v15;
          [a2 removeObjectAtIndex:v11 + v14];
          if (v19 && [a2 count]) {
            CFRunLoopSourceSignal(source);
          }
          goto LABEL_22;
        }

        if (v11 + v14 + 1 >= a3) {
          goto LABEL_21;
        }
        ++v14;
      }

      while (v10 != v14);
      uint64_t v18 = [a2 countByEnumeratingWithState:&v25 objects:v24 count:16];
      uint64_t v10 = v18;
      CFRunLoopSourceContext v19 = 0LL;
      uint64_t v11 = v22;
      if (v18) {
        continue;
      }
      break;
    }
  }

  else
  {
LABEL_21:
    CFRunLoopSourceContext v19 = 0LL;
  }

void sub_18362D064( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, id obj)
{
}

uint64_t sub_18362D958()
{
  return 0LL;
}

uint64_t sub_18362D9CC()
{
  return 0LL;
}

double sub_18362DA0C()
{
  return 0.0;
}

double sub_18362DA4C()
{
  return 0.0;
}

uint64_t sub_18362DAFC()
{
  return 0LL;
}

uint64_t __NSFireTimer(void *a1, uint64_t a2)
{
  int v3 = *(void **)(a2 + 8);
  uint64_t v4 = *(const char **)(a2 + 16);
  _CFAutoreleasePoolPush();
  id v5 = a1;
  id v6 = v3;
  objc_msgSend(v3, v4, a1);

  return _CFAutoreleasePoolPop();
}

void __NSDescribeTimerCallout(uint64_t a1, uint64_t a2, char *a3, size_t a4, char *a5, size_t a6, uint64_t *a7)
{
  uint64_t v21 = *MEMORY[0x1895F89C0];
  if (a2)
  {
    uint64_t v12 = *(void **)(a2 + 8);
    uint64_t v13 = *(const char **)(a2 + 16);
    ClassSEL Name = object_getClassName(v12);
    SEL Name = sel_getName(v13);
    *a7 = object_getMethodImplementation();
    CFStringEncoding v16 = "<unknown class name>";
    if (ClassName) {
      CFStringEncoding v16 = ClassName;
    }
    uint64_t v17 = "<unknown selector>";
    if (Name) {
      uint64_t v17 = Name;
    }
    snprintf(a5, a6, "(NSTimer) [%s %s]", v16, v17);
    Class Class = object_getClass(v12);
    if (dladdr(Class, &v20))
    {
      dli_fname = v20.dli_fname;
      if (!v20.dli_fname) {
        dli_fname = "<unknown library>";
      }
      snprintf(a3, a4, "%s", dli_fname);
    }
  }

unsigned int *_timerRetain(unsigned int *result)
{
  do
    unsigned int v1 = __ldxr(result);
  while (__stxr(v1 + 1, result));
  return result;
}

unsigned int *_timerRelease(unsigned int *result)
{
  unsigned int v1 = (id *)result;
  do
  {
    unsigned int v2 = __ldxr(result);
    BOOL v3 = __OFSUB__(v2, 1);
    signed int v4 = v2 - 1;
  }

  while (__stxr(v4, result));
  if ((v4 < 0) ^ v3 | (v4 == 0))
  {
    _CFAutoreleasePoolPush();

    free(v1);
    return (unsigned int *)_CFAutoreleasePoolPop();
  }

  return result;
}

void sub_183630460(_Unwind_Exception *a1)
{
}

void sub_183633208( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  uint64_t v11 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  uint64_t v17 = va_arg(va1, void);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

void __Block_byref_object_copy__16(uint64_t a1, uint64_t a2)
{
}

void __Block_byref_object_dispose__16(uint64_t a1)
{
}

void sub_183633514( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
}

uint64_t sub_1836339C0()
{
  return 0LL;
}

uint64_t sub_183633A80()
{
  return 0LL;
}

uint64_t sub_183633B40()
{
  return 0LL;
}

uint64_t sub_183633C00()
{
  return 0LL;
}

uint64_t sub_183633CC0()
{
  return 0LL;
}

uint64_t sub_183633D80()
{
  return 0LL;
}

uint64_t sub_183633E40()
{
  return 0LL;
}

uint64_t sub_183633F00()
{
  return 0LL;
}

uint64_t sub_183633FC0()
{
  return 0LL;
}

uint64_t sub_183634080()
{
  return 0LL;
}

uint64_t sub_1836340BC()
{
  return 0LL;
}

uint64_t sub_1836340F8()
{
  return 0LL;
}

uint64_t sub_183634134()
{
  return 0LL;
}

uint64_t sub_183634170()
{
  return 0LL;
}

uint64_t sub_1836341AC()
{
  return 0LL;
}

uint64_t sub_1836341E8()
{
  return 0LL;
}

CFStringRef sub_183634224()
{
  return &stru_189CA6A28;
}

uint64_t sub_183634264()
{
  return 0LL;
}

uint64_t sub_1836342A0()
{
  return 0LL;
}

uint64_t sub_1836342DC()
{
  return 0LL;
}

id sub_18363558C( int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, objc_super a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  v17.receiver = v15;
  v17.super_class = (Class)&OBJC_CLASS___NSURLComponents;
  return objc_msgSendSuper2(&v17, sel_init);
}

id sub_183635618( int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, objc_super a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  v17.receiver = v15;
  v17.super_class = (Class)&OBJC_CLASS___NSURLComponents;
  return objc_msgSendSuper2(&v17, sel_init);
}

id sub_1836356A4( int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, objc_super a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  v17.receiver = v15;
  v17.super_class = (Class)&OBJC_CLASS___NSURLComponents;
  return objc_msgSendSuper2(&v17, sel_init);
}

uint64_t sub_18363571C()
{
  return 0LL;
}

uint64_t sub_18363575C()
{
  return 0LL;
}

uint64_t sub_18363579C()
{
  return 0LL;
}

uint64_t sub_1836357DC()
{
  return 0LL;
}

uint64_t sub_183635854()
{
  return 0LL;
}

uint64_t sub_1836358CC()
{
  return 0LL;
}

uint64_t sub_183635944()
{
  return 0LL;
}

uint64_t sub_1836359BC()
{
  return 0LL;
}

uint64_t sub_183635A34()
{
  return 0LL;
}

uint64_t sub_183635AAC()
{
  return 0LL;
}

uint64_t sub_183635B24()
{
  return 0LL;
}

uint64_t sub_183635B9C()
{
  return 0LL;
}

uint64_t sub_183635C14()
{
  return 0LL;
}

uint64_t sub_183635C8C()
{
  return 0LL;
}

uint64_t sub_183635D04()
{
  return 0LL;
}

uint64_t sub_183635D7C()
{
  return 0LL;
}

uint64_t sub_183635DF4()
{
  return 0LL;
}

uint64_t sub_183635E6C()
{
  return 0LL;
}

uint64_t sub_183635EE4()
{
  return 0x7FFFFFFFFFFFFFFFLL;
}

uint64_t sub_183635F28()
{
  return 0x7FFFFFFFFFFFFFFFLL;
}

uint64_t sub_183635F6C()
{
  return 0x7FFFFFFFFFFFFFFFLL;
}

uint64_t sub_183635FB0()
{
  return 0x7FFFFFFFFFFFFFFFLL;
}

uint64_t sub_183635FF4()
{
  return 0x7FFFFFFFFFFFFFFFLL;
}

uint64_t sub_183636038()
{
  return 0x7FFFFFFFFFFFFFFFLL;
}

uint64_t sub_18363607C()
{
  return 0x7FFFFFFFFFFFFFFFLL;
}

uint64_t sub_1836360C0()
{
  return 0x7FFFFFFFFFFFFFFFLL;
}

uint64_t sub_183636104()
{
  return 0LL;
}

uint64_t sub_18363617C()
{
  return 0LL;
}

uint64_t ____immutablePlaceholderNSURL_block_invoke()
{
  uint64_t result = objc_msgSend(MEMORY[0x189604030], "__unurl");
  qword_18C496C40 = result;
  return result;
}

uint64_t __nsurlClass_block_invoke()
{
  uint64_t result = objc_opt_class();
  qword_18C496C50 = result;
  return result;
}

uint64_t NSURLReportAssertionFailure(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  signed int v4 = (FILE *)*MEMORY[0x1895F89D0];
  if (a4) {
    return fprintf(v4, "=================\nASSERTION FAILED: %s (%s:%ld %s)\n=================\n");
  }
  else {
    return fprintf(v4, "=================\nSHOULD NEVER BE REACHED (%s:%ld %s)\n=================\n");
  }
}

uint64_t NSURLReportAssertionFailureWithMessage( const char *a1, uint64_t a2, const char *a3, const char *a4, const char *a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  uint64_t v14 = (FILE **)MEMORY[0x1895F89D0];
  fwrite("=================\nASSERTION FAILED: ", 0x24uLL, 1uLL, (FILE *)*MEMORY[0x1895F89D0]);
  vfprintf_l(*v14, 0LL, a5, &a9);
  return fprintf(*v14, "\n%s (%s:%ld %s)\n=================\n", a4, a1, a2, a3);
}

uint64_t NSURLReportArgumentAssertionFailure( const char *a1, uint64_t a2, const char *a3, const char *a4, const char *a5)
{
  return fprintf( (FILE *)*MEMORY[0x1895F89D0],  "=================\nARGUMENT BAD: %s, %s (%s:%ld %s)\n=================\n",  a4,  a5,  a1,  a2,  a3);
}

uint64_t NSURLReportFatalError( const char *a1, uint64_t a2, const char *a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  uint64_t v13 = (FILE **)MEMORY[0x1895F89D0];
  fwrite("=================\nFATAL ERROR: ", 0x1FuLL, 1uLL, (FILE *)*MEMORY[0x1895F89D0]);
  vfprintf_l(*v13, 0LL, a4, &a9);
  return fprintf(*v13, "\n(%s:%ld %s)\n=================\n", a1, a2, a3);
}

uint64_t NSURLReportError( const char *a1, uint64_t a2, const char *a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  uint64_t v13 = (FILE **)MEMORY[0x1895F89D0];
  fwrite("=================\nERROR: ", 0x19uLL, 1uLL, (FILE *)*MEMORY[0x1895F89D0]);
  vfprintf_l(*v13, 0LL, a4, &a9);
  return fprintf(*v13, "\n(%s:%ld %s)\n=================\n", a1, a2, a3);
}

void NSURLLog( const char *a1, uint64_t a2, const char *a3, uint64_t a4, const char *a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  v18[1] = *MEMORY[0x1895F89C0];
  int v13 = *(_DWORD *)(a4 + 16);
  if (!v13)
  {
    *(_DWORD *)(a4 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = 1;
    uint64_t v15 = objc_msgSend( (id)objc_msgSend(MEMORY[0x189604038], "standardUserDefaults"),  "objectForKey:",  +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", *(void *)(a4 + 8)));
    if (v15)
    {
      uint64_t v16 = v15;
      if (!-[NSScanner scanHexInt:]( +[NSScanner scannerWithString:](&OBJC_CLASS___NSScanner, "scannerWithString:", v15),  "scanHexInt:",  v18)) {
        NSLog((NSString *)@"unable to parse hex value for %s (%@), logging is off", *(void *)(a4 + 8), v16);
      }
    }

    int v13 = *(_DWORD *)(a4 + 16);
  }

  if (v13 == 2)
  {
    objc_super v17 = (FILE **)MEMORY[0x1895F89D0];
    fprintf((FILE *)*MEMORY[0x1895F89D0], "- %s:%ld %s - ", a1, a2, a3);
    v18[0] = &a9;
    vfprintf_l(*v17, 0LL, a5, &a9);
    if (a5[strlen(a5) - 1] != 10) {
      putc(10, *v17);
    }
  }

Class UTTypeClass()
{
  Class result = NSClassFromString((NSString *)@"UTType");
  if (!result)
  {
    if (UTTypeClass_predicate != -1) {
      dispatch_once(&UTTypeClass_predicate, &__block_literal_global_1135);
    }
    return NSClassFromString((NSString *)@"UTType");
  }

  return result;
}

void *__UTTypeClass_block_invoke()
{
  return dlopen("/System/Library/Frameworks/UniformTypeIdentifiers.framework/UniformTypeIdentifiers", 256);
}

NSLock *NSURLHostNameAddressInfoInit()
{
  qword_18C496C78 = (uint64_t)objc_alloc_init(MEMORY[0x189603FC8]);
  Class result = objc_alloc_init(&OBJC_CLASS___NSLock);
  _MergedGlobals_125 = (uint64_t)result;
  return result;
}

uint64_t resolveHostName(void *a1)
{
  uint64_t v8 = *MEMORY[0x1895F89C0];
  pthread_setname_np("com.apple.NSURLHostNameAddressInfo.resolving");
  _CFAutoreleasePoolPush();
  unsigned int v2 = (void *)[a1 host];
  __int16 v7 = 0;
  BOOL v3 = +[NSString stringWithCharacters:length:](&OBJC_CLASS___NSString, "stringWithCharacters:length:", &v7, 1LL);
  if (v2 && [v2 rangeOfString:v3 options:2] == 0x7FFFFFFFFFFFFFFFLL)
  {
    signed int v4 = (char *)[v2 UTF8String];
    id v5 = doResolveHostName((uint64_t)v2, v4, 2);
    if (!v5) {
      id v5 = doResolveHostName((uint64_t)v2, v4, 30);
    }
  }

  else
  {
    id v5 = 0LL;
  }

  [a1 hostNameResolved:v5];

  _CFAutoreleasePoolPop();
  return 0LL;
}

hostent *doResolveHostName(uint64_t a1, char *a2, int a3)
{
  uint64_t v24 = *MEMORY[0x1895F89C0];
  signed int v4 = getipnodebyname(a2, a3, 0, &v23);
  id v5 = v4;
  if (!v4) {
    return v5;
  }
  int h_addrtype = v4->h_addrtype;
  BOOL v7 = h_addrtype == 30 || h_addrtype == 2;
  if (!v7 || !*v4->h_addr_list)
  {
LABEL_26:
    freehostent(v5);
    return 0LL;
  }

  uint64_t v8 = 0LL;
  CFRunLoopMode v9 = 0LL;
  uint64_t v10 = 0LL;
  char v11 = 0;
LABEL_9:
  uint64_t v12 = v9;
  int v13 = v8;
  uint64_t v14 = v10;
  do
  {
    uint64_t v15 = (addrinfo *)calloc(1uLL, 0x30uLL);
    CFRunLoopMode v9 = v15;
    uint64_t v8 = v15;
    if (v13)
    {
      v12->ai_next = v15;
      uint64_t v8 = v13;
    }

    int v16 = v5->h_addrtype;
    v15->ai_famildouble y = v16;
    *(void *)&v15->ai_socktype = 0x600000001LL;
    if (v16 != 2)
    {
      v15->ai_addrlen = 28;
      CFRunLoopSourceContext v19 = (char *)calloc(1uLL, 0x1CuLL);
      *CFRunLoopSourceContext v19 = v9->ai_addrlen;
      v19[1] = 30;
      *(_OWORD *)(v19 + _Block_object_dispose(va, 8) = *(_OWORD *)v5->h_addr_list[v14];
      goto LABEL_18;
    }

    int v17 = *(_DWORD *)v5->h_addr_list[v14];
    if (v17 != -1)
    {
      v15->ai_addrlen = 16;
      CFRunLoopSourceContext v19 = (char *)calloc(1uLL, 0x10uLL);
      *CFRunLoopSourceContext v19 = v9->ai_addrlen;
      v19[1] = 2;
      *((_DWORD *)v19 + 1) = v17;
LABEL_18:
      v9->ai_addr = (sockaddr *)v19;
      v9->ai_canonname = strdup(v5->h_name);
      uint64_t v10 = v14 + 1;
      char v11 = 1;
      if (v5->h_addr_list[v14 + 1]) {
        goto LABEL_9;
      }
      goto LABEL_21;
    }

    free(v15);
    uint64_t v18 = (uint64_t)&v5->h_addr_list[v14++];
    int v13 = v8;
  }

  while (*(void *)(v18 + 8));
  if ((v11 & 1) == 0)
  {
    if (v8) {
      freeaddrinfo(v8);
    }
    goto LABEL_26;
  }

uint64_t _hash_compare(void *a1, void *a2)
{
  if (*a1 >= *a2) {
    unsigned int v2 = 0;
  }
  else {
    unsigned int v2 = -1;
  }
  if (*a1 > *a2) {
    return 1LL;
  }
  else {
    return v2;
  }
}

uint64_t NSURLLocalizedString(const char *a1)
{
  unsigned int v2 = (void *)_NSFoundationBundle();
  CFStringRef v3 = CFStringCreateWithCStringNoCopy(0LL, a1, 0x8000100u, (CFAllocatorRef)*MEMORY[0x189604DC8]);
  uint64_t v4 = [v2 localizedStringForKey:v3 value:0 table:@"URL"];
  CFRelease(v3);
  return v4;
}

unint64_t escapeChars(unsigned __int8 *a1, uint64_t a2)
{
  unint64_t v3 = (unint64_t)&a1[a2];
  if (a2 >= 1)
  {
    uint64_t v4 = a1;
    do
    {
      unint64_t v5 = *v4;
      if ((v5 - 127) > 0xFFFFFFA1)
      {
        ++v4;
      }

      else
      {
        memmove(v4 + 3, v4 + 1, v3 - (void)v4);
        *uint64_t v4 = 37;
        v4[1] = a0123456789abcd[v5 >> 4];
        uint64_t v4[2] = a0123456789abcd[v5 & 0xF];
        v3 += 2LL;
        v4 += 3;
      }
    }

    while ((unint64_t)v4 < v3);
  }

  return v3 - (void)a1;
}

void _NSUserDefaults_Log_Nonsensical_Suites(uint64_t a1)
{
  v1[5] = *MEMORY[0x1895F89C0];
  v1[0] = MEMORY[0x1895F87A8];
  v1[1] = 3221225472LL;
  v1[2] = ___NSUserDefaults_Log_Nonsensical_Suites_block_invoke;
  v1[3] = &unk_189C9A030;
  v1[4] = a1;
  if (_NSUserDefaults_Log_Nonsensical_Suites_onceToken != -1) {
    dispatch_once(&_NSUserDefaults_Log_Nonsensical_Suites_onceToken, v1);
  }
}

uint64_t NSOpenStepDirectoryForUser()
{
  return 0LL;
}

NSData *encodeURLForDefaults(NSData *result)
{
  if (result)
  {
    uint64_t v1 = result;
    if (-[NSData isFileURL](result, "isFileURL")
      && !-[NSData isFileReferenceURL](v1, "isFileReferenceURL"))
    {
      return (NSData *)objc_msgSend((id)-[NSData path](v1, "path"), "stringByAbbreviatingWithTildeInPath");
    }

    else
    {
      return +[NSKeyedArchiver archivedDataWithRootObject:requiringSecureCoding:error:]( &OBJC_CLASS___NSKeyedArchiver,  "archivedDataWithRootObject:requiringSecureCoding:error:",  v1,  1LL,  0LL);
    }
  }

  return result;
}

void sub_18363DB2C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16)
{
}

void __Block_byref_object_copy__17(uint64_t a1, uint64_t a2)
{
}

void __Block_byref_object_dispose__17(uint64_t a1)
{
}

uint64_t findUnit(uint64_t *a1, double a2)
{
  uint64_t v4 = (char *)malloc(0x40uLL);
  for (uint64_t i = 0LL; i != 64; i += 16LL)
  {
    uint64_t v6 = *a1++;
    double v7 = convertUnitFromMeters(v6, a2);
    uint64_t v8 = &v4[i];
    *(double *)uint64_t v8 = v7;
    *((void *)v8 + 1) = v6;
  }

  qsort(v4, 4uLL, 0x10uLL, (int (__cdecl *)(const void *, const void *))compare);
  uint64_t v9 = 0LL;
  do
  {
    uint64_t v10 = v9 + 16;
    BOOL v11 = v9 == 48;
    v9 += 16LL;
  }

  while (!v11);
  uint64_t v12 = *(void *)&v4[v10 - 8];
  free(v4);
  return v12;
}

double convertUnitFromMeters(uint64_t a1, double a2)
{
  double v2 = 0.0;
  switch(a1)
  {
    case 8LL:
      double v4 = 0.001;
      goto LABEL_9;
    case 9LL:
      double v4 = 0.01;
      goto LABEL_9;
    case 10LL:
    case 12LL:
    case 13LL:
      return v2;
    case 11LL:
      return a2;
    case 14LL:
      double v4 = 1000.0;
LABEL_9:
      double v2 = a2 / v4;
      break;
    default:
      switch(a1)
      {
        case 1281LL:
          double v3 = 39.3701;
          goto LABEL_13;
        case 1282LL:
          double v3 = 3.28084;
          goto LABEL_13;
        case 1283LL:
          double v3 = 1.0936;
          goto LABEL_13;
        case 1284LL:
          double v3 = 0.00062137;
LABEL_13:
          double v2 = a2 * v3;
          break;
        default:
          return v2;
      }

      break;
  }

  return v2;
}

uint64_t compare(double *a1, double *a2)
{
  if (*a1 >= *a2) {
    unsigned int v2 = 0;
  }
  else {
    unsigned int v2 = -1;
  }
  if (*a1 > *a2) {
    return 1LL;
  }
  else {
    return v2;
  }
}

void *_NSNewValue(float32x2_t *p_callBacks, char *__s1, NSZone *a3)
{
  value[2] = *MEMORY[0x1895F89C0];
  if (!strcmp(__s1, "{_NSRange=II}"))
  {
    *(void *)&__int128 v7 = p_callBacks->u32[0];
    *((void *)&v7 + 1) = HIDWORD(*(unint64_t *)p_callBacks);
    *(_OWORD *)&callBacks.CFIndex version = v7;
    uint64_t v8 = &_NSCachedTypeInfoRange64;
    p_CFSetCallBacks callBacks = (float32x2_t *)&callBacks;
LABEL_24:
    uint64_t v9 = 4LL;
    goto LABEL_57;
  }

  if (!strcmp(__s1, "{_NSRange=QQ}"))
  {
    uint64_t v8 = &_NSCachedTypeInfoRange64;
    goto LABEL_24;
  }

  if (!strcmp(__s1, "{CGPoint=ff}"))
  {
    *(float64x2_t *)&callBacks.CFIndex version = vcvtq_f64_f32(*p_callBacks);
    uint64_t v8 = &_NSCachedTypeInfoPoint64;
    p_CFSetCallBacks callBacks = (float32x2_t *)&callBacks;
LABEL_27:
    uint64_t v9 = 1LL;
    goto LABEL_57;
  }

  if (!strcmp(__s1, "{CGPoint=dd}"))
  {
    uint64_t v8 = &_NSCachedTypeInfoPoint64;
    goto LABEL_27;
  }

  if (!strcmp(__s1, "{CGSize=ff}"))
  {
    *(float64x2_t *)&callBacks.CFIndex version = vcvtq_f64_f32(*p_callBacks);
    uint64_t v8 = &_NSCachedTypeInfoSize64;
    p_CFSetCallBacks callBacks = (float32x2_t *)&callBacks;
LABEL_30:
    uint64_t v9 = 2LL;
    goto LABEL_57;
  }

  if (!strcmp(__s1, "{CGSize=dd}"))
  {
    uint64_t v8 = &_NSCachedTypeInfoSize64;
    goto LABEL_30;
  }

  if (!strcmp(__s1, "{CGRect={CGPoint=ff}{CGSize=ff}}"))
  {
    float64x2_t v10 = vcvtq_f64_f32(p_callBacks[1]);
    *(float64x2_t *)&callBacks.CFIndex version = vcvtq_f64_f32(*p_callBacks);
    *(float64x2_t *)&callBacks.release = v10;
    uint64_t v8 = &_NSCachedTypeInfoRect64;
    p_CFSetCallBacks callBacks = (float32x2_t *)&callBacks;
LABEL_33:
    uint64_t v9 = 3LL;
    goto LABEL_57;
  }

  if (!strcmp(__s1, "{CGRect={CGPoint=dd}{CGSize=dd}}"))
  {
    uint64_t v8 = &_NSCachedTypeInfoRect64;
    goto LABEL_33;
  }

  if (!strcmp(__s1, "{CGAffineTransform=ffffff}"))
  {
    float64x2_t v11 = vcvtq_f64_f32(p_callBacks[1]);
    *(float64x2_t *)&callBacks.CFIndex version = vcvtq_f64_f32(*p_callBacks);
    *(float64x2_t *)&callBacks.release = v11;
    *(float64x2_t *)&callBacks.equal = vcvtq_f64_f32(p_callBacks[2]);
    uint64_t v8 = &_NSCachedTypeInfoCGAffineTransform64;
    p_CFSetCallBacks callBacks = (float32x2_t *)&callBacks;
LABEL_36:
    uint64_t v9 = 10LL;
    goto LABEL_57;
  }

  if (!strcmp(__s1, "{CGAffineTransform=dddddd}"))
  {
    uint64_t v8 = &_NSCachedTypeInfoCGAffineTransform64;
    goto LABEL_36;
  }

  if (!strcmp(__s1, "{UIEdgeInsets=ffff}"))
  {
    float64x2_t v12 = vcvtq_f64_f32(p_callBacks[1]);
    *(float64x2_t *)&callBacks.CFIndex version = vcvtq_f64_f32(*p_callBacks);
    *(float64x2_t *)&callBacks.release = v12;
    uint64_t v8 = &_NSCachedTypeInfoUIEdgeInsets64;
    p_CFSetCallBacks callBacks = (float32x2_t *)&callBacks;
LABEL_39:
    uint64_t v9 = 11LL;
    goto LABEL_57;
  }

  if (!strcmp(__s1, "{UIEdgeInsets=dddd}"))
  {
    uint64_t v8 = &_NSCachedTypeInfoUIEdgeInsets64;
    goto LABEL_39;
  }

  if (!strcmp(__s1, "{NSEdgeInsets=ffff}"))
  {
    float64x2_t v13 = vcvtq_f64_f32(p_callBacks[1]);
    *(float64x2_t *)&callBacks.CFIndex version = vcvtq_f64_f32(*p_callBacks);
    *(float64x2_t *)&callBacks.release = v13;
    uint64_t v8 = &_NSCachedTypeInfoNSEdgeInsets64;
    p_CFSetCallBacks callBacks = (float32x2_t *)&callBacks;
LABEL_42:
    uint64_t v9 = 12LL;
    goto LABEL_57;
  }

  if (!strcmp(__s1, "{NSEdgeInsets=dddd}"))
  {
    uint64_t v8 = &_NSCachedTypeInfoNSEdgeInsets64;
    goto LABEL_42;
  }

  if (!strcmp(__s1, "{NSDirectionalEdgeInsets=ffff}"))
  {
    float64x2_t v14 = vcvtq_f64_f32(p_callBacks[1]);
    *(float64x2_t *)&callBacks.CFIndex version = vcvtq_f64_f32(*p_callBacks);
    *(float64x2_t *)&callBacks.release = v14;
    uint64_t v8 = &_NSCachedTypeInfoNSDirectionalEdgeInsets64;
    p_CFSetCallBacks callBacks = (float32x2_t *)&callBacks;
LABEL_45:
    uint64_t v9 = 14LL;
    goto LABEL_57;
  }

  if (!strcmp(__s1, "{NSDirectionalEdgeInsets=dddd}"))
  {
    uint64_t v8 = &_NSCachedTypeInfoNSDirectionalEdgeInsets64;
    goto LABEL_45;
  }

  if (!strcmp(__s1, "{UIOffset=ff}"))
  {
    *(float64x2_t *)&callBacks.CFIndex version = vcvtq_f64_f32(*p_callBacks);
    uint64_t v8 = &_NSCachedTypeInfoUIOffset64;
    p_CFSetCallBacks callBacks = (float32x2_t *)&callBacks;
LABEL_48:
    uint64_t v9 = 13LL;
    goto LABEL_57;
  }

  if (!strcmp(__s1, "{UIOffset=dd}"))
  {
    uint64_t v8 = &_NSCachedTypeInfoUIOffset64;
    goto LABEL_48;
  }

  value[0] = 0LL;
  value[1] = __s1;
  os_unfair_lock_lock((os_unfair_lock_t)&_MergedGlobals_24);
  CFMutableSetRef v6 = (CFMutableSetRef)qword_18C495F70;
  if (!qword_18C495F70)
  {
    os_unfair_lock_unlock((os_unfair_lock_t)&_MergedGlobals_24);
    memset(&callBacks, 0, 32);
    callBacks.equal = (CFSetEqualCallBack)cachedObjCTypeInfoIsEqual;
    callBacks.hash = (CFSetHashCallBack)cachedObjCTypeInfoHash;
    CFMutableSetRef v6 = CFSetCreateMutable((CFAllocatorRef)*MEMORY[0x189604DD0], 0LL, &callBacks);
    os_unfair_lock_lock((os_unfair_lock_t)&_MergedGlobals_24);
    if (qword_18C495F70)
    {
      CFRelease(v6);
      CFMutableSetRef v6 = (CFMutableSetRef)qword_18C495F70;
    }

    else
    {
      qword_18C495F70 = (uint64_t)v6;
    }
  }

  uint64_t v8 = (uint64_t *)CFSetGetValue(v6, value);
  os_unfair_lock_unlock((os_unfair_lock_t)&_MergedGlobals_24);
  if (!v8)
  {
    NSGetSizeAndAlignment(__s1, (NSUInteger *)&callBacks, 0LL);
    CFIndex version = callBacks.version;
    size_t v16 = strlen(__s1);
    int v17 = (char *)malloc(v16 + 17);
    if (!v17) {
      return 0LL;
    }
    *(void *)int v17 = version;
    *((void *)v17 + 1) = v17 + 16;
    uint64_t v24 = v17;
    strlcpy(v17 + 16, __s1, v16 + 1);
    os_unfair_lock_lock((os_unfair_lock_t)&_MergedGlobals_24);
    uint64_t v8 = (uint64_t *)CFSetGetValue((CFSetRef)qword_18C495F70, value);
    if (v8)
    {
      free(v24);
    }

    else
    {
      CFSetSetValue((CFMutableSetRef)qword_18C495F70, v24);
      uint64_t v8 = (uint64_t *)v24;
    }

    os_unfair_lock_unlock((os_unfair_lock_t)&_MergedGlobals_24);
  }

  uint64_t v9 = 0LL;
LABEL_57:
  uint64_t v18 = (objc_class *)__NSConcreteValueClass;
  if (!__NSConcreteValueClass)
  {
    uint64_t v18 = (objc_class *)objc_opt_self();
    __NSConcreteValueClass Class = (uint64_t)v18;
  }

  size_t v19 = *v8;
  Dl_info v20 = (void *)objc_msgSend(NSAllocateObject(v18, *v8, a3), "init");
  uint64_t v21 = v20;
  if (v20)
  {
    v20[2] = v8;
    v20[1] = v9;
    IndexedIvars = object_getIndexedIvars(v20);
    memmove(IndexedIvars, p_callBacks, v19);
  }

  return v21;
}

uint64_t matchTypeEncoding(char *__s1, char *__s2, uint64_t a3)
{
  uint64_t result = 0LL;
  v13[1] = *(unsigned __int8 **)MEMORY[0x1895F89C0];
  float64x2_t v12 = (unsigned __int8 *)__s2;
  v13[0] = (unsigned __int8 *)__s1;
  if (__s1)
  {
    unint64_t v5 = __s2;
    if (__s2)
    {
      if (__s1 == __s2 || !strcmp(__s1, __s2)) {
        return 1LL;
      }
      NSUInteger alignp = 0LL;
      NSUInteger sizep = 0LL;
      NSGetSizeAndAlignment(__s1, &sizep, &alignp);
      NSUInteger v8 = 0LL;
      NSUInteger v9 = 0LL;
      NSGetSizeAndAlignment(v5, &v9, &v8);
      if (sizep == v9 && sizep == a3 && alignp == v8)
      {
        if (*__s1)
        {
          while (*v5)
          {
            if ((mungeUnionsAndStructures(v13) & 1) == 0) {
              return 0LL;
            }
            uint64_t result = mungeUnionsAndStructures(&v12);
            if (!(_DWORD)result) {
              return result;
            }
            if (*v13[0] != *v12) {
              return 0LL;
            }
            if (!*v13[0]) {
              break;
            }
            int v7 = v13[0][1];
            unint64_t v5 = (const char *)++v12;
            ++v13[0];
            uint64_t result = 1LL;
            if (!v7) {
              return result;
            }
          }
        }

        return 1LL;
      }

      return 0LL;
    }
  }

  return result;
}

NSString *_stringFromEdgeInsets(void *a1)
{
  _BYTE v2[4] = *MEMORY[0x1895F89C0];
  [a1 getValue:v2];
  return +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"{%.*g, %.*g, %.*g, %.*g}",  17LL,  v2[0],  17LL,  v2[1],  17LL,  v2[2],  17LL,  v2[3]);
}

uint64_t sub_183640860()
{
  return 0LL;
}

void sub_1836409E4(_Unwind_Exception *a1, int a2)
{
  if (a2)
  {
    objc_begin_catch(a1);
    objc_end_catch();
    JUMPOUT(0x1836409ACLL);
  }

  _Unwind_Resume(a1);
}

void sub_183640B30(_Unwind_Exception *a1, int a2)
{
  if (a2)
  {
    objc_begin_catch(a1);
    objc_end_catch();
    JUMPOUT(0x183640A58LL);
  }

  _Unwind_Resume(a1);
}

void sub_183640D7C(_Unwind_Exception *a1, int a2)
{
  if (a2)
  {
    objc_begin_catch(a1);
    objc_end_catch();
    JUMPOUT(0x183640D4CLL);
  }

  _Unwind_Resume(a1);
}

void sub_1836415A0(_Unwind_Exception *a1)
{
}

void sub_1836415AC(uint64_t a1, int a2)
{
  if (a2) {
    objc_terminate();
  }
  JUMPOUT(0x1836415B8LL);
}

NSValue *newDecodedValue(void *a1, NSZone *a2)
{
  uint64_t v43 = *MEMORY[0x1895F89C0];
  if ([a1 allowsKeyedCoding]
    && [a1 containsValueForKey:@"NS.special"])
  {
    int v4 = [a1 decodeIntForKey:@"NS.special"];
    switch(v4)
    {
      case 1:
        [a1 decodePointForKey:@"NS.pointval"];
        unint64_t v5 = +[NSValue valueWithPoint:](&OBJC_CLASS___NSValue, "valueWithPoint:");
        return v5;
      case 2:
        [a1 decodeSizeForKey:@"NS.sizeval"];
        unint64_t v5 = +[NSValue valueWithSize:](&OBJC_CLASS___NSValue, "valueWithSize:");
        return v5;
      case 3:
        [a1 decodeRectForKey:@"NS.rectval"];
        unint64_t v5 = +[NSValue valueWithRect:](&OBJC_CLASS___NSValue, "valueWithRect:");
        return v5;
      case 4:
        uint64_t v9 = objc_msgSend( (id)objc_msgSend(a1, "decodeObjectOfClass:forKey:", objc_opt_class(), @"NS.rangeval.length"),  "unsignedIntegerValue");
        unint64_t v5 = +[NSValue valueWithRange:]( NSValue,  "valueWithRange:",  objc_msgSend( (id)objc_msgSend(a1, "decodeObjectOfClass:forKey:", objc_opt_class(), @"NS.rangeval.location"),  "unsignedIntegerValue"),  v9);
        return v5;
      case 10:
        [a1 decodeDoubleForKey:@"NS.atval.a"];
        float32x2_t v37 = v11;
        [a1 decodeDoubleForKey:@"NS.atval.b"];
        uint64_t v38 = v12;
        [a1 decodeDoubleForKey:@"NS.atval.c"];
        uint64_t v39 = v13;
        [a1 decodeDoubleForKey:@"NS.atval.d"];
        uint64_t v40 = v14;
        [a1 decodeDoubleForKey:@"NS.atval.tx"];
        uint64_t v41 = v15;
        [a1 decodeDoubleForKey:@"NS.atval.ty"];
        uint64_t v42 = v16;
        int v17 = _NSNewValue(&v37, "{CGAffineTransform=dddddd}", 0LL);
        goto LABEL_23;
      case 11:
        [a1 decodeDoubleForKey:@"NS.edgeval.top"];
        float32x2_t v37 = v18;
        [a1 decodeDoubleForKey:@"NS.edgeval.left"];
        uint64_t v38 = v19;
        [a1 decodeDoubleForKey:@"NS.edgeval.bottom"];
        uint64_t v39 = v20;
        [a1 decodeDoubleForKey:@"NS.edgeval.right"];
        uint64_t v40 = v21;
        int v17 = _NSNewValue(&v37, "{UIEdgeInsets=dddd}", 0LL);
        goto LABEL_23;
      case 12:
        [a1 decodeDoubleForKey:@"NS.edgeval.top"];
        float32x2_t v37 = v22;
        [a1 decodeDoubleForKey:@"NS.edgeval.left"];
        uint64_t v38 = v23;
        [a1 decodeDoubleForKey:@"NS.edgeval.bottom"];
        uint64_t v39 = v24;
        [a1 decodeDoubleForKey:@"NS.edgeval.right"];
        uint64_t v40 = v25;
        int v17 = _NSNewValue(&v37, "{NSEdgeInsets=dddd}", 0LL);
        goto LABEL_23;
      case 13:
        [a1 decodeDoubleForKey:@"NS.offset.h"];
        float32x2_t v37 = v26;
        [a1 decodeDoubleForKey:@"NS.offset.v"];
        uint64_t v38 = v27;
        int v17 = _NSNewValue(&v37, "{UIOffset=dd}", 0LL);
        goto LABEL_23;
      case 14:
        [a1 decodeDoubleForKey:@"NS.dirEdgeVal.top"];
        float32x2_t v37 = v28;
        [a1 decodeDoubleForKey:@"NS.dirEdgeVal.leading"];
        uint64_t v38 = v29;
        [a1 decodeDoubleForKey:@"NS.dirEdgeVal.bottom"];
        uint64_t v39 = v30;
        [a1 decodeDoubleForKey:@"NS.dirEdgeVal.trailing"];
        uint64_t v40 = v31;
        int v17 = _NSNewValue(&v37, "{NSDirectionalEdgeInsets=dddd}", 0LL);
LABEL_23:
        NSUInteger v8 = v17;
        break;
      default:
        uint64_t v32 = +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"cannot decode special type '%lu'",  v4);
        objc_exception_throw((id)[MEMORY[0x189603F70] exceptionWithName:*MEMORY[0x189603A58] reason:v32 userInfo:0]);
        if (!v34) {
          _Unwind_Resume(v33);
        }
        objc_begin_catch(v33);
        objc_end_catch();
        return 0LL;
    }

    return (NSValue *)v8;
  }

  bzero(&v37, 0x400uLL);
  typePtr = 0LL;
  [a1 decodeValueOfObjCType:"*" at:&typePtr size:8];
  if (!typePtr || !*typePtr) {
    return 0LL;
  }
  NSGetSizeAndAlignment(typePtr, &sizep, 0LL);
  NSUInteger v6 = sizep;
  if (sizep < 0x401)
  {
    int v7 = &v37;
  }

  else
  {
    int v7 = (float32x2_t *)calloc(sizep, 1uLL);
    if (!v7) {
      return 0LL;
    }
  }

  [a1 decodeValueOfObjCType:typePtr at:v7 size:v6];
  NSUInteger v8 = _NSNewValue(v7, typePtr, a2);
  if (v7 != &v37) {
    free(v7);
  }
  free(typePtr);
  return (NSValue *)v8;
}

uint64_t sub_183641ADC()
{
  return v0;
}

NSPlaceholderNumber *newDecodedNumber(void *a1)
{
  sizep[128] = *MEMORY[0x1895F89C0];
  [a1 decodeValueOfObjCType:"*" at:&typePtr size:8];
  unsigned int v2 = typePtr;
  if (!typePtr) {
    return 0LL;
  }
  int v3 = *typePtr;
  if (!*typePtr || typePtr[1]) {
    goto LABEL_17;
  }
  if (v3 == 108)
  {
    char v4 = 105;
  }

  else
  {
    if (v3 != 76) {
      goto LABEL_9;
    }
    char v4 = 73;
  }

  char *typePtr = v4;
  unsigned int v2 = typePtr;
LABEL_9:
  NSGetSizeAndAlignment(v2, sizep, 0LL);
  NSUInteger v5 = sizep[0];
  if (sizep[0] < 0x401)
  {
    NSUInteger v6 = (unsigned __int8 *)sizep;
LABEL_13:
    [a1 decodeValueOfObjCType:typePtr at:v6 size:v5];
    int v7 = newNumber(*typePtr, v6, v8);
    if (v7) {
      goto LABEL_16;
    }
LABEL_17:
    uint64_t v9 = +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"*** -[NSNumber initWithCoder:] bad objCType: %@",  +[NSString stringWithUTF8String:](&OBJC_CLASS___NSString, "stringWithUTF8String:"));
    free(typePtr);
    objc_exception_throw((id)[MEMORY[0x189603F70] exceptionWithName:*MEMORY[0x189603A58] reason:v9 userInfo:0]);
    __break(1u);
    JUMPOUT(0x183643A60LL);
  }

  NSUInteger v6 = (unsigned __int8 *)malloc(sizep[0]);
  if (v6) {
    goto LABEL_13;
  }
  int v7 = 0LL;
LABEL_16:
  free(typePtr);
  return v7;
}

void sub_183643E3C(_Unwind_Exception *a1)
{
}

void sub_183643E48(uint64_t a1, int a2)
{
  if (a2) {
    objc_terminate();
  }
  JUMPOUT(0x183643E54LL);
}

void sub_183643F80(_Unwind_Exception *a1, int a2)
{
  if (a2)
  {
    objc_begin_catch(a1);
    objc_end_catch();
    JUMPOUT(0x183643EF4LL);
  }

  _Unwind_Resume(a1);
}

NSPlaceholderNumber *newNumber(char a1, unsigned __int8 *a2, double a3)
{
  if (a1 <= 80)
  {
    if (a1 > 72)
    {
      if (a1 == 73) {
        return -[NSPlaceholderNumber initWithUnsignedInt:]( &__placeholderNumber,  "initWithUnsignedInt:",  *(unsigned int *)a2);
      }
      if (a1 == 76) {
        return -[NSPlaceholderNumber initWithUnsignedLong:]( &__placeholderNumber,  "initWithUnsignedLong:",  *(void *)a2);
      }
    }

    else
    {
      if (a1 == 66) {
        return -[NSPlaceholderNumber initWithBool:](&__placeholderNumber, "initWithBool:", *a2);
      }
      if (a1 == 67) {
        return -[NSPlaceholderNumber initWithUnsignedChar:](&__placeholderNumber, "initWithUnsignedChar:", *a2);
      }
    }

    return 0LL;
  }

  else
  {
    switch(a1)
    {
      case 'c':
        return -[NSPlaceholderNumber initWithChar:](&__placeholderNumber, "initWithChar:", (char)*a2);
      case 'd':
        return -[NSPlaceholderNumber initWithDouble:](&__placeholderNumber, "initWithDouble:", *(double *)a2);
      case 'e':
      case 'g':
      case 'h':
      case 'j':
      case 'k':
      case 'm':
      case 'n':
      case 'o':
      case 'p':
      case 'r':
        return 0LL;
      case 'f':
        LODWORD(a3) = *(_DWORD *)a2;
        return -[NSPlaceholderNumber initWithFloat:](&__placeholderNumber, "initWithFloat:", a3);
      case 'i':
        return -[NSPlaceholderNumber initWithInt:](&__placeholderNumber, "initWithInt:", *(unsigned int *)a2);
      case 'l':
        return -[NSPlaceholderNumber initWithLong:](&__placeholderNumber, "initWithLong:", *(void *)a2);
      case 'q':
        return -[NSPlaceholderNumber initWithLongLong:](&__placeholderNumber, "initWithLongLong:", *(void *)a2);
      case 's':
        return -[NSPlaceholderNumber initWithShort:]( &__placeholderNumber,  "initWithShort:",  *(__int16 *)a2);
      default:
        if (a1 == 81)
        {
          uint64_t result = -[NSPlaceholderNumber initWithUnsignedLongLong:]( &__placeholderNumber,  "initWithUnsignedLongLong:",  *(void *)a2);
        }

        else
        {
          if (a1 != 83) {
            return 0LL;
          }
          uint64_t result = -[NSPlaceholderNumber initWithUnsignedShort:]( &__placeholderNumber,  "initWithUnsignedShort:",  *(unsigned __int16 *)a2);
        }

        break;
    }
  }

  return result;
}

uint64_t sub_1836440EC()
{
  return v0;
}

uint64_t sub_183644110()
{
  return v0;
}

uint64_t sub_183644134()
{
  return v0;
}

uint64_t sub_183644158()
{
  return v0;
}

uint64_t sub_18364417C()
{
  return v0;
}

uint64_t sub_1836441A0()
{
  return v0;
}

uint64_t sub_1836441C4()
{
  return v0;
}

uint64_t sub_1836441E8()
{
  return v0;
}

uint64_t sub_18364420C()
{
  return v0;
}

uint64_t sub_183644230()
{
  return v0;
}

uint64_t sub_183644254()
{
  return v0;
}

uint64_t sub_183644278()
{
  return v0;
}

uint64_t sub_18364429C()
{
  return v0;
}

uint64_t sub_1836442C0()
{
  return v0;
}

uint64_t sub_1836442E4()
{
  return v0;
}

uint64_t sub_1836446C4()
{
  return 0LL;
}

uint64_t cachedObjCTypeInfoHash(uint64_t a1)
{
  return CFStringHashISOLatin1CString();
}

BOOL cachedObjCTypeInfoIsEqual(uint64_t a1, uint64_t a2)
{
  return strcmp(*(const char **)(a1 + 8), *(const char **)(a2 + 8)) == 0;
}

uint64_t mungeUnionsAndStructures(unsigned __int8 **a1)
{
  for (uint64_t i = *a1; ; uint64_t i = v3 + 1)
  {
    unsigned int v2 = *i;
    if (v2 > 0x7A) {
      break;
    }
    int v3 = i;
    if (v2 == 40)
    {
      while ((_BYTE)v2)
      {
        char v4 = *++v3;
        LOBYTE(v2) = v4;
        if (v4 == 41) {
          goto LABEL_17;
        }
      }

      return 0LL;
    }

    if (v2 != 41) {
      goto LABEL_20;
    }
LABEL_17:
    int v3 = i;
LABEL_18:
    ;
  }

  if (v2 == 123)
  {
    int v3 = i;
    while ((_BYTE)v2)
    {
      char v5 = *++v3;
      LOBYTE(v2) = v5;
      if (v5 == 125) {
        goto LABEL_17;
      }
    }

    return 0LL;
  }

  if (v2 == 125) {
    goto LABEL_17;
  }
LABEL_20:
  *a1 = i;
  return 1LL;
}

uint64_t _getTransformerRegistry()
{
  uint64_t result = _transformerRegistry;
  if (!_transformerRegistry)
  {
    _transformerRegistrdouble y = [objc_alloc(MEMORY[0x189603FC8]) initWithCapacity:8];
    uint64_t v1 = objc_alloc_init(&OBJC_CLASS____NSNegateBooleanTransformer);
    [(id)_transformerRegistry setObject:v1 forKey:@"NSNegateBoolean"];

    unsigned int v2 = objc_alloc_init(&OBJC_CLASS____NSIsNilTransformer);
    [(id)_transformerRegistry setObject:v2 forKey:@"NSIsNil"];

    int v3 = objc_alloc_init(&OBJC_CLASS____NSIsNotNilTransformer);
    [(id)_transformerRegistry setObject:v3 forKey:@"NSIsNotNil"];

    id v4 = -[NSValueTransformer _initForFoundationOnly]( objc_alloc(&OBJC_CLASS____NSUnarchiveFromDataTransformer),  "_initForFoundationOnly");
    [(id)_transformerRegistry setObject:v4 forKey:@"NSUnarchiveFromData"];

    id v5 = -[NSValueTransformer _initForFoundationOnly]( objc_alloc(&OBJC_CLASS____NSKeyedUnarchiveFromDataTransformer),  "_initForFoundationOnly");
    [(id)_transformerRegistry setObject:v5 forKey:@"NSKeyedUnarchiveFromData"];

    NSUInteger v6 = objc_alloc_init(&OBJC_CLASS___NSSecureUnarchiveFromDataTransformer);
    [(id)_transformerRegistry setObject:v6 forKey:@"NSSecureUnarchiveFromData"];

    return _transformerRegistry;
  }

  return result;
}

uint64_t NSExtensionMain(uint64_t a1, uint64_t a2)
{
  uint64_t v11 = *MEMORY[0x1895F89C0];
  uint64_t v7 = 0LL;
  double v8 = &v7;
  uint64_t v9 = 0x2020000000LL;
  id v4 = (uint64_t (*)(uint64_t, uint64_t))_MergedGlobals_129;
  float64x2_t v10 = _MergedGlobals_129;
  if (!_MergedGlobals_129)
  {
    v6[0].super.unint64_t isa = (Class)MEMORY[0x1895F87A8];
    v6[1].super.unint64_t isa = (Class)3221225472LL;
    v6[2].super.unint64_t isa = (Class)__getEXExtensionMainSymbolLoc_block_invoke;
    v6[3].super.unint64_t isa = (Class)&unk_189CA0E20;
    v6[4].super.unint64_t isa = (Class)&v7;
    __getEXExtensionMainSymbolLoc_block_invoke(v6);
    id v4 = (uint64_t (*)(uint64_t, uint64_t))v8[3];
  }

  _Block_object_dispose(&v7, 8);
  if (!v4)
  {
    -[NSAssertionHandler handleFailureInFunction:file:lineNumber:description:]( +[NSAssertionHandler currentHandler](&OBJC_CLASS___NSAssertionHandler, "currentHandler"),  "handleFailureInFunction:file:lineNumber:description:",  +[NSString stringWithUTF8String:]( &OBJC_CLASS___NSString,  "stringWithUTF8String:",  "int _EXExtensionMain(int, const char **)"),  @"NSExtensionMain.m",  14LL,  @"%s",  dlerror());
    __break(1u);
  }

  return v4(a1, a2);
}

void sub_183646B7C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
}

objc_class *__getEXExtensionMainSymbolLoc_block_invoke(NSAssertionHandler *a1)
{
  if (!qword_18C496CD8) {
    qword_18C496CD8 = _sl_dlopen();
  }
  unsigned int v2 = (void *)qword_18C496CD8;
  if (!qword_18C496CD8)
  {
    a1 = +[NSAssertionHandler currentHandler](&OBJC_CLASS___NSAssertionHandler, "currentHandler");
    id v4 = (void *)-[NSAssertionHandler handleFailureInFunction:file:lineNumber:description:]( a1,  "handleFailureInFunction:file:lineNumber:description:",  +[NSString stringWithUTF8String:]( &OBJC_CLASS___NSString,  "stringWithUTF8String:",  "void *ExtensionFoundationLibrary(void)"),  @"NSExtensionMain.m",  13LL,  @"%s",  0LL);
    __break(1u);
    free(v4);
  }

  uint64_t result = (objc_class *)dlsym(v2, "EXExtensionMain");
  a1[4].super.isa[1].isa[3].unint64_t isa = result;
  _MergedGlobals_129 = a1[4].super.isa[1].isa[3].isa;
  return result;
}

uint64_t updateOffsetsForPosition( uint64_t result, unsigned __int8 *a2, uint64_t a3, uint64_t a4, unsigned __int8 **a5)
{
  if (a3 < 1 || a4 <= 0) {
    goto LABEL_50;
  }
  NSUInteger v6 = *a5;
  id v5 = a5[1];
  uint64_t v7 = a5[2];
  uint64_t v8 = (uint64_t)a5[3];
  uint64_t v10 = (uint64_t)a5[4];
  uint64_t v9 = (uint64_t)a5[5];
  if (*a5 == (unsigned __int8 *)0x7FFFFFFFFFFFFFFFLL
    || v5 == (unsigned __int8 *)0x7FFFFFFFFFFFFFFFLL
    || v7 == (unsigned __int8 *)0x7FFFFFFFFFFFFFFFLL
    || v8 == 0x7FFFFFFFFFFFFFFFLL
    || v10 < 1
    || v9 <= 0)
  {
    id v5 = 0LL;
    uint64_t v7 = 0LL;
    uint64_t v8 = 0LL;
    NSUInteger v6 = 0LL;
    *(_OWORD *)a5 = 0u;
    *((_OWORD *)a5 + 1) = 0u;
    uint64_t v10 = 1LL;
    *((int64x2_t *)a5 + 2) = vdupq_n_s64(1uLL);
    uint64_t v9 = 1LL;
  }

  if ((uint64_t)v6 >= (uint64_t)a2)
  {
LABEL_50:
    int64x2_t v23 = vdupq_n_s64(0x7FFFFFFFFFFFFFFFuLL);
    *(int64x2_t *)a5 = v23;
    *((int64x2_t *)a5 + 1) = v23;
    a5[4] = (unsigned __int8 *)a3;
    a5[5] = (unsigned __int8 *)a4;
    return result;
  }

  uint64_t v16 = (char *)&v6[result];
  while (1)
  {
    int v17 = (unsigned __int8 *)&v16[-result];
    if (&v16[-result] == (char *)v7)
    {
      uint64_t v18 = *v16;
      uint64_t v19 = trailingBytesForUTF8[v18];
      v5 += v8;
      uint64_t v8 = v18 < 0xF0 ? 1LL : 2LL;
      v7 += v19 + 1;
      if (v19 == -1) {
        uint64_t v8 = 0LL;
      }
    }

    if (v10 != a3)
    {
      unint64_t v20 = a2 - v17;
      if (v20)
      {
        int v21 = *v16;
        if (v21 == 10)
        {
          unint64_t v20 = 1LL;
        }

        else if (v21 == 13)
        {
          if (v20 != 1)
          {
            if (v16[1] == 10) {
              unint64_t v20 = 2LL;
            }
            else {
              unint64_t v20 = 1LL;
            }
          }
        }

        else
        {
          unint64_t v20 = 0LL;
        }
      }

      if (v20 <= 1) {
        uint64_t v22 = 1LL;
      }
      else {
        uint64_t v22 = v20;
      }
      if (v20) {
        uint64_t v9 = 1LL;
      }
      else {
        ++v9;
      }
      v16 += v22;
      if (v20) {
        ++v10;
      }
      goto LABEL_49;
    }

    if (v9 == a4) {
      break;
    }
    ++v9;
    ++v16;
    uint64_t v10 = a3;
LABEL_49:
  }

  a5[4] = (unsigned __int8 *)a3;
  a5[5] = (unsigned __int8 *)a4;
  *a5 = v17;
  a5[1] = v5;
  a5[2] = v7;
  a5[3] = (unsigned __int8 *)v8;
  return result;
}

id newAttributedStringFromMarkdown( uint64_t a1, uint64_t a2, NSAttributedStringMarkdownParsingOptions *a3, uint64_t a4, NSError **a5)
{
  uint64_t v10 = objc_alloc_init(&OBJC_CLASS____NSAttributedStringFromMarkdownCreatorConcrete);
  else {
    id v11 = 0LL;
  }

  return v11;
}

uint64_t _NSAttributedStringFromMarkdownWithCreator( void *a1, uint64_t a2, uint64_t a3, NSAttributedStringMarkdownParsingOptions *a4, uint64_t a5, NSError **a6)
{
  uint64_t v111 = *MEMORY[0x1895F89C0];
  if (_NSAttributedStringLoadCMarkIfNeeded_onceToken != -1) {
    dispatch_once(&_NSAttributedStringLoadCMarkIfNeeded_onceToken, &__block_literal_global_31);
  }
  if ((_NSAttributedStringLoadCMarkIfNeeded_cmarkLoaded & 1) == 0)
  {
    if (a6)
    {
      uint64_t v24 = 3328LL;
LABEL_27:
      uint64_t v22 = 0LL;
      *a6 = +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  @"NSCocoaErrorDomain",  v24,  0LL);
      return v22;
    }

    return 0LL;
  }

  double v104 = a1;
  uint64_t v12 = -[NSAttributedStringMarkdownParsingOptions interpretedSyntax](a4, "interpretedSyntax");
  if (v12 == 2) {
    uint64_t v13 = 786432LL;
  }
  else {
    uint64_t v13 = (v12 == 1) << 18;
  }
  uint64_t v14 = _NS_cmark_parser_new(v13);
  uint64_t syntax_extension = _NS_cmark_find_syntax_extension("table");
  if (syntax_extension) {
    _NS_cmark_parser_attach_syntax_extension(v14, syntax_extension);
  }
  uint64_t v16 = _NS_cmark_find_syntax_extension("autolink");
  if (v16) {
    _NS_cmark_parser_attach_syntax_extension(v14, v16);
  }
  uint64_t v17 = _NS_cmark_find_syntax_extension("strikethrough");
  if (v17) {
    _NS_cmark_parser_attach_syntax_extension(v14, v17);
  }
  uint64_t v18 = _NS_cmark_find_syntax_extension("extended-attrs");
  if (v18) {
    _NS_cmark_parser_attach_syntax_extension(v14, v18);
  }
  _NS_cmark_parser_feed(v14, a2, a3);
  uint64_t v19 = _NS_cmark_parser_finish(v14);
  if (!v19)
  {
    if (a6)
    {
      uint64_t v24 = 259LL;
      goto LABEL_27;
    }

    return 0LL;
  }

  uint64_t v102 = a2;
  uint64_t v103 = a3;
  uint64_t v101 = v19;
  uint64_t v20 = _NS_cmark_iter_new();
  if (!a4) {
    a4 = objc_alloc_init(&OBJC_CLASS___NSAttributedStringMarkdownParsingOptions);
  }
  uint64_t v106 = (void *)[MEMORY[0x189603FA8] arrayWithObject:MEMORY[0x189604A60]];
  memset(v109, 0, 32);
  v109[2] = vdupq_n_s64(1uLL);
  v110[2] = xmmword_183979980;
  v110[3] = unk_183979990;
  v110[4] = xmmword_1839799A0;
  v110[0] = xmmword_183979960;
  v110[1] = unk_183979970;
  int v21 = _NS_cmark_iter_next(v20);
  if (v21 == 1)
  {
LABEL_19:
    if ((objc_opt_respondsToSelector() & 1) != 0) {
      objc_msgSend( a1,  "finalizeWithLanguageIdentifier:",  -[NSAttributedStringMarkdownParsingOptions languageCode](a4, "languageCode"));
    }
    uint64_t v22 = 1LL;
    uint64_t v23 = v101;
    goto LABEL_22;
  }

  int v26 = v21;
  uint64_t v27 = 0LL;
  uint64_t v107 = 0LL;
  unint64_t v100 = 0LL;
  uint64_t v95 = 0LL;
  uint64_t v96 = 0LL;
  uint64_t v105 = 1LL;
  while (1)
  {
    uint64_t node = _NS_cmark_iter_get_node(v20);
    int type = _NS_cmark_node_get_type();
    if (-[NSAttributedStringMarkdownParsingOptions interpretedSyntax](a4, "interpretedSyntax") == NSAttributedStringMarkdownInterpretedSyntaxFull)
    {
      if (v26 == 3) {
        goto LABEL_114;
      }
      if (v26 == 2)
      {
        uint64_t v30 = v105 + 1;
        uint64_t v31 = +[NSPresentationIntent paragraphIntentWithIdentity:nestedInsideIntent:]( &OBJC_CLASS___NSPresentationIntent,  "paragraphIntentWithIdentity:nestedInsideIntent:");
LABEL_60:
        uint64_t v27 = v31;
LABEL_61:
        uint64_t v105 = v30;
        a1 = v104;
      }
    }

uint64_t __attributesFromKnownAttributeKeys_block_invoke(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id v6 = +[_NSAttributeDescriptor descriptorForAttributeKey:]( &OBJC_CLASS____NSAttributeDescriptor,  "descriptorForAttributeKey:",  a2);
  if (v6)
  {
    uint64_t v7 = v6;
    uint64_t result = [v6 attributeValueFromValue:a3];
    if (!result) {
      return result;
    }
    uint64_t v9 = result;
    uint64_t v10 = *(void **)(a1 + 32);
    uint64_t v11 = [v7 name];
    uint64_t v12 = v10;
    uint64_t v13 = v9;
  }

  else
  {
    uint64_t v12 = *(void **)(a1 + 32);
    uint64_t v13 = a3;
    uint64_t v11 = a2;
  }

  return [v12 setObject:v13 forKeyedSubscript:v11];
}

uint64_t appendNodeText( void *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6, uint64_t a7, uint64_t a8, uint64_t a9, NSError **a10)
{
  literal = (const char *)_NS_cmark_node_get_literal(a3);
  if (!literal) {
    return 1LL;
  }
  uint64_t v19 = -[NSString initWithBytesNoCopy:length:encoding:freeWhenDone:]( objc_alloc(&OBJC_CLASS___NSString),  "initWithBytesNoCopy:length:encoding:freeWhenDone:",  literal,  strlen(literal),  4LL,  0LL);
  if (v19)
  {
    uint64_t v20 = v19;
    if ([a2 appliesSourcePositionAttributes])
    {
      uint64_t v27 = objc_alloc(&OBJC_CLASS___NSAttributedStringMarkdownSourcePosition);
      uint64_t start_line = (int)_NS_cmark_node_get_start_line(a3);
      uint64_t start_column = (int)_NS_cmark_node_get_start_column(a3);
      uint64_t end_line = (int)_NS_cmark_node_get_end_line(a3);
      uint64_t v23 = -[NSAttributedStringMarkdownSourcePosition initWithStartLine:startColumn:endLine:endColumn:]( v27,  "initWithStartLine:startColumn:endLine:endColumn:",  start_line,  start_column,  end_line,  (int)_NS_cmark_node_get_end_column(a3));
      -[NSAttributedStringMarkdownSourcePosition setOffsetsFromUTF8:size:usingCache:]( v23,  "setOffsetsFromUTF8:size:usingCache:",  a7,  a8,  a9);
    }

    else
    {
      uint64_t v23 = 0LL;
    }

    appendStringWithSourcePosition(a1, (uint64_t)v20, a4, a5, a6, (uint64_t)v23);

    return 1LL;
  }

  if ([a2 failurePolicy]) {
    return 1LL;
  }
  if (!a10) {
    return 0LL;
  }
  uint64_t v24 = +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  @"NSCocoaErrorDomain",  259LL,  0LL);
  uint64_t result = 0LL;
  *a10 = v24;
  return result;
}

void appendStringWithSourcePosition(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, uint64_t a6)
{
  if (a6)
  {
    id v11 = (id)[a5 mutableCopy];
    [v11 setObject:a6 forKey:@"NSMarkdownSourcePosition"];
    objc_msgSend(a1, "appendString:with:", a2, attributesForIntents(a3, a4, v11));
  }

  else
  {
    objc_msgSend(a1, "appendString:with:", a2, attributesForIntents(a3, a4, a5));
  }

id attributesForIntents(uint64_t a1, uint64_t a2, void *a3)
{
  void v17[2] = *MEMORY[0x1895F89C0];
  if (a1 && a2)
  {
    v16[0] = @"NSInlinePresentationIntent";
    v16[1] = @"NSPresentationIntent";
    v17[0] = +[NSNumber numberWithUnsignedInteger:](&OBJC_CLASS___NSNumber, "numberWithUnsignedInteger:", a1);
    v17[1] = a2;
    id v5 = (void *)MEMORY[0x189603F68];
    id v6 = (NSNumber **)v17;
    uint64_t v7 = (const __CFString **)v16;
    uint64_t v8 = 2LL;
    goto LABEL_9;
  }

  if (a2)
  {
    uint64_t v14 = @"NSPresentationIntent";
    uint64_t v15 = a2;
    id v5 = (void *)MEMORY[0x189603F68];
    id v6 = (NSNumber **)&v15;
    uint64_t v7 = &v14;
LABEL_8:
    uint64_t v8 = 1LL;
LABEL_9:
    uint64_t v9 = (void *)[v5 dictionaryWithObjects:v6 forKeys:v7 count:v8];
    if (!a3) {
      return v9;
    }
    goto LABEL_10;
  }

  if (a1)
  {
    uint64_t v12 = @"NSInlinePresentationIntent";
    uint64_t v13 = +[NSNumber numberWithUnsignedInteger:](&OBJC_CLASS___NSNumber, "numberWithUnsignedInteger:", a1);
    id v5 = (void *)MEMORY[0x189603F68];
    id v6 = &v13;
    uint64_t v7 = &v12;
    goto LABEL_8;
  }

  uint64_t v9 = (void *)MEMORY[0x189604A60];
  if (!a3) {
    return v9;
  }
LABEL_10:
  if ([a3 count])
  {
    uint64_t v10 = (void *)[v9 mutableCopy];
    [v10 addEntriesFromDictionary:a3];
    return v10;
  }

  return v9;
}

uint64_t compare_0(double *a1, double *a2)
{
  if (*a1 >= *a2) {
    unsigned int v2 = 0;
  }
  else {
    unsigned int v2 = -1;
  }
  if (*a1 > *a2) {
    return 1LL;
  }
  else {
    return v2;
  }
}

uint64_t sub_18364A628()
{
  return 0LL;
}

uint64_t sub_18364A668()
{
  return 0LL;
}

uint64_t sub_18364A6A8()
{
  return 0LL;
}

uint64_t sub_18364A6E8()
{
  return 0LL;
}

double sub_18364A728()
{
  return 0.0;
}

void sub_18364B2E4(_Unwind_Exception *exception_object)
{
}

uint64_t initkUTTypeURL_2()
{
  uint64_t v0 = MobileCoreServicesLibrary_2();
  uint64_t v1 = (uint64_t *)dlsym(v0, "kUTTypeURL");
  if (!v1) {
    __assert_rtn("initkUTTypeURL", "NSURL+NSItemProvider.m", 18, "constant");
  }
  uint64_t result = *v1;
  constantkUTTypeURL_2 = result;
  _MergedGlobals_87[0] = kUTTypeURLFunction_2;
  return result;
}

void *MobileCoreServicesLibrary_2()
{
  uint64_t result = (void *)MobileCoreServicesLibrary_frameworkLibrary_3;
  if (!MobileCoreServicesLibrary_frameworkLibrary_3)
  {
    uint64_t result = dlopen("/System/Library/Frameworks/MobileCoreServices.framework/MobileCoreServices", 2);
    MobileCoreServicesLibrary_frameworkLibrary_3 = (uint64_t)result;
    if (!result) {
      __assert_rtn("MobileCoreServicesLibrary", "NSURL+NSItemProvider.m", 17, "frameworkLibrary");
    }
  }

  return result;
}

uint64_t kUTTypeURLFunction_2()
{
  return constantkUTTypeURL_2;
}

uint64_t initUTTypeConformsTo_2(uint64_t a1, uint64_t a2)
{
  id v4 = MobileCoreServicesLibrary_2();
  id v5 = (uint64_t (*)())dlsym(v4, "UTTypeConformsTo");
  off_18C491828 = v5;
  if (!v5) {
    __assert_rtn("initUTTypeConformsTo", "NSURL+NSItemProvider.m", 20, "softLinkUTTypeConformsTo");
  }
  return ((uint64_t (*)(uint64_t, uint64_t))v5)(a1, a2);
}

uint64_t initkUTTypeFileURL_0()
{
  uint64_t v0 = MobileCoreServicesLibrary_2();
  uint64_t v1 = (uint64_t *)dlsym(v0, "kUTTypeFileURL");
  if (!v1) {
    __assert_rtn("initkUTTypeFileURL", "NSURL+NSItemProvider.m", 19, "constant");
  }
  uint64_t result = *v1;
  constantkUTTypeFileURL_0 = result;
  off_18C491820[0] = kUTTypeFileURLFunction_0;
  return result;
}

uint64_t kUTTypeFileURLFunction_0()
{
  return constantkUTTypeFileURL_0;
}

void _NSSetupLibXML()
{
  if (_NSSetupLibXML_xmlInitGuard != -1) {
    dispatch_once(&_NSSetupLibXML_xmlInitGuard, &__block_literal_global_56);
  }
}

uint64_t _xmlExternalEntityLoader(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id v6 = +[NSXMLParser currentParser](&OBJC_CLASS___NSXMLParser, "currentParser");
  if (!v6) {
    return __originalLoader(a1, a2, a3);
  }
  if (v6[120]) {
    return 0LL;
  }
  return [v6 _xmlExternalEntityWithURL:a1 identifier:a2 context:a3 originalLoaderFunction:__originalLoader];
}

NSError *_NSErrorFromXMLError(uint64_t a1, uint64_t a2)
{
  if (*(_BYTE *)(a2 + 72))
  {
    id v4 = 0LL;
  }

  else
  {
    id v4 = (void *)[MEMORY[0x189603FC8] dictionary];
    if (!*(_BYTE *)(a2 + 72))
    {
      objc_msgSend( v4,  "setObject:forKey:",  +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(a1 + 32)),  @"NSXMLParserErrorLineNumber");
      objc_msgSend( v4,  "setObject:forKey:",  +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(a1 + 68)),  @"NSXMLParserErrorColumn");
      if (*(void *)(a1 + 8))
      {
        id v5 = -[NSString initWithUTF8String:]( objc_alloc(&OBJC_CLASS___NSString),  "initWithUTF8String:",  *(void *)(a1 + 8));
        if (v5)
        {
          id v6 = v5;
          [v4 setObject:v5 forKey:@"NSXMLParserErrorMessage"];
        }
      }
    }
  }

  if (*(_BYTE *)(a2 + 72)) {
    uint64_t v7 = 512LL;
  }
  else {
    uint64_t v7 = *(int *)(a1 + 4);
  }
  return +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  @"NSXMLParserErrorDomain",  v7,  v4);
}

void _structuredErrorFunc(uint64_t a1, uint64_t a2)
{
}

void sub_18364C54C(void *a1)
{
}

void _internalSubset2(uint64_t a1, const xmlChar *a2, const xmlChar *a3, const xmlChar *a4)
{
}

BOOL _isStandalone(uint64_t a1)
{
  return *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 16LL) + 76LL) == 1;
}

BOOL _hasInternalSubset2(uint64_t a1)
{
  return *(void *)(*(void *)(*(void *)(a1 + 32) + 16LL) + 80LL) != 0LL;
}

BOOL _hasExternalSubset2(uint64_t a1)
{
  return *(void *)(*(void *)(*(void *)(a1 + 32) + 16LL) + 88LL) != 0LL;
}

xmlEntityPtr _getEntity(uint64_t a1, xmlChar *a2)
{
  if (a1 && *(_BYTE *)(a1 + 120)) {
    return 0LL;
  }
  uint64_t v5 = *(void *)(a1 + 32);
  id v6 = (void *)[(id)a1 delegate];
  xmlEntityPtr result = xmlGetPredefinedEntity(a2);
  if (!result)
  {
    xmlEntityPtr result = xmlSAX2GetEntity((void *)v5, a2);
    if (result)
    {
      if (*(_DWORD *)(v5 + 272) == 7) {
        *(void *)(v5 + 424) = 1LL;
      }
    }

    else
    {
      if ((objc_opt_respondsToSelector() & 1) == 0) {
        return 0LL;
      }
      if (a2)
      {
        id Value = (void *)CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 64), a2);
        if (!Value) {
          id Value = __SlowPathNSXMLParserNSStringFromBytes(*(__CFDictionary **)(a1 + 64), (char *)a2);
        }
      }

      else
      {
        id Value = 0LL;
      }

      xmlEntityPtr result = (xmlEntityPtr)[v6 parser:a1 resolveExternalEntityName:Value systemID:0];
      if (result)
      {
        if (*(void *)(v5 + 16))
        {
          uint64_t v8 = -[NSString initWithData:encoding:]( objc_alloc(&OBJC_CLASS___NSString),  "initWithData:encoding:",  result,  4LL);
          uint64_t v9 = -[NSString UTF8String](v8, "UTF8String");
          if (v9)
          {
            uint64_t v10 = (const UInt8 *)v9;
            int v11 = strlen(v9);
            _characters(a1, v10, v11);
          }
        }

        return 0LL;
      }
    }
  }

  return result;
}

uint64_t _entityDecl(uint64_t result, xmlChar *a2, int a3, xmlChar *a4, xmlChar *a5, xmlChar *a6)
{
  uint64_t v11 = result;
  if (result && *(_BYTE *)(result + 120)) {
    return result;
  }
  uint64_t v12 = (void *)[(id)result delegate];
  xmlSAX2EntityDecl(*(void **)(v11 + 32), a2, a3, a4, a5, a6);
  if (a6)
  {
    id Value = (void *)CFDictionaryGetValue(*(CFDictionaryRef *)(v11 + 64), a6);
    if (!Value) {
      id Value = __SlowPathNSXMLParserNSStringFromBytes(*(__CFDictionary **)(v11 + 64), (char *)a6);
    }
    if (a2) {
      goto LABEL_8;
    }
  }

  else
  {
    id Value = 0LL;
    if (a2)
    {
LABEL_8:
      uint64_t v14 = (void *)CFDictionaryGetValue(*(CFDictionaryRef *)(v11 + 64), a2);
      if (!v14) {
        uint64_t v14 = __SlowPathNSXMLParserNSStringFromBytes(*(__CFDictionary **)(v11 + 64), (char *)a2);
      }
      goto LABEL_12;
    }
  }

  uint64_t v14 = 0LL;
LABEL_12:
  if ([Value length])
  {
    xmlEntityPtr result = objc_opt_respondsToSelector();
    if ((result & 1) != 0) {
      return [v12 parser:v11 foundInternalEntityDeclarationWithName:v14 value:Value];
    }
  }

  else
  {
    xmlEntityPtr result = [(id)v11 shouldResolveExternalEntities];
    if ((_DWORD)result)
    {
      xmlEntityPtr result = objc_opt_respondsToSelector();
      if ((result & 1) != 0)
      {
        if (a4)
        {
          uint64_t v15 = (void *)CFDictionaryGetValue(*(CFDictionaryRef *)(v11 + 64), a4);
          if (!v15) {
            uint64_t v15 = __SlowPathNSXMLParserNSStringFromBytes(*(__CFDictionary **)(v11 + 64), (char *)a4);
          }
        }

        else
        {
          uint64_t v15 = 0LL;
        }

        if (a5)
        {
          uint64_t v16 = (void *)CFDictionaryGetValue(*(CFDictionaryRef *)(v11 + 64), a5);
          if (!v16) {
            uint64_t v16 = __SlowPathNSXMLParserNSStringFromBytes(*(__CFDictionary **)(v11 + 64), (char *)a5);
          }
        }

        else
        {
          uint64_t v16 = 0LL;
        }

        return [v12 parser:v11 foundExternalEntityDeclarationWithName:v14 publicID:v15 systemID:v16];
      }
    }
  }

  return result;
}

uint64_t _notationDecl(uint64_t result, void *a2, void *a3, void *a4)
{
  uint64_t v7 = result;
  if (!result || !*(_BYTE *)(result + 120))
  {
    uint64_t v8 = (void *)[(id)result delegate];
    xmlEntityPtr result = objc_opt_respondsToSelector();
    if ((result & 1) != 0)
    {
      if (a2)
      {
        id Value = (void *)CFDictionaryGetValue(*(CFDictionaryRef *)(v7 + 64), a2);
        if (!Value) {
          id Value = __SlowPathNSXMLParserNSStringFromBytes(*(__CFDictionary **)(v7 + 64), (char *)a2);
        }
        if (a3)
        {
LABEL_8:
          uint64_t v10 = (void *)CFDictionaryGetValue(*(CFDictionaryRef *)(v7 + 64), a3);
          if (!v10) {
            uint64_t v10 = __SlowPathNSXMLParserNSStringFromBytes(*(__CFDictionary **)(v7 + 64), (char *)a3);
          }
          if (a4) {
            goto LABEL_11;
          }
          goto LABEL_16;
        }
      }

      else
      {
        id Value = 0LL;
        if (a3) {
          goto LABEL_8;
        }
      }

      uint64_t v10 = 0LL;
      if (a4)
      {
LABEL_11:
        uint64_t v11 = (void *)CFDictionaryGetValue(*(CFDictionaryRef *)(v7 + 64), a4);
        if (!v11) {
          uint64_t v11 = __SlowPathNSXMLParserNSStringFromBytes(*(__CFDictionary **)(v7 + 64), (char *)a4);
        }
        return [v8 parser:v7 foundNotationDeclarationWithName:Value publicID:v10 systemID:v11];
      }

void _attributeDecl(uint64_t a1, void *a2, void *a3, uint64_t a4, uint64_t a5, void *a6, xmlEnumeration *a7)
{
  if (!a1 || !*(_BYTE *)(a1 + 120))
  {
    uint64_t v12 = (void *)[(id)a1 delegate];
    if ((objc_opt_respondsToSelector() & 1) == 0)
    {
LABEL_17:
      xmlFreeEnumeration(a7);
      return;
    }

    if (a2)
    {
      id Value = (void *)CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 64), a2);
      if (!Value) {
        id Value = __SlowPathNSXMLParserNSStringFromBytes(*(__CFDictionary **)(a1 + 64), (char *)a2);
      }
      if (a3)
      {
LABEL_8:
        uint64_t v14 = (void *)CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 64), a3);
        if (!v14) {
          uint64_t v14 = __SlowPathNSXMLParserNSStringFromBytes(*(__CFDictionary **)(a1 + 64), (char *)a3);
        }
        if (a6) {
          goto LABEL_11;
        }
        goto LABEL_15;
      }
    }

    else
    {
      id Value = 0LL;
      if (a3) {
        goto LABEL_8;
      }
    }

    uint64_t v14 = 0LL;
    if (a6)
    {
LABEL_11:
      uint64_t v15 = (void *)CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 64), a6);
      if (!v15) {
        uint64_t v15 = __SlowPathNSXMLParserNSStringFromBytes(*(__CFDictionary **)(a1 + 64), (char *)a6);
      }
      goto LABEL_16;
    }

uint64_t _elementDecl(uint64_t result, void *a2)
{
  uint64_t v3 = result;
  if (!result || !*(_BYTE *)(result + 120))
  {
    id v4 = (void *)[(id)result delegate];
    xmlEntityPtr result = objc_opt_respondsToSelector();
    if ((result & 1) != 0)
    {
      if (a2)
      {
        id Value = (void *)CFDictionaryGetValue(*(CFDictionaryRef *)(v3 + 64), a2);
        if (!Value) {
          id Value = __SlowPathNSXMLParserNSStringFromBytes(*(__CFDictionary **)(v3 + 64), (char *)a2);
        }
      }

      else
      {
        id Value = 0LL;
      }

      return [v4 parser:v3 foundElementDeclarationWithName:Value model:&stru_189CA6A28];
    }
  }

  return result;
}

uint64_t _unparsedEntityDecl(uint64_t result, xmlChar *a2, xmlChar *a3, xmlChar *a4, xmlChar *a5)
{
  uint64_t v9 = result;
  if (!result || !*(_BYTE *)(result + 120))
  {
    uint64_t v10 = (void *)[(id)result delegate];
    xmlSAX2UnparsedEntityDecl(*(void **)(v9 + 32), a2, a3, a4, a5);
    xmlEntityPtr result = objc_opt_respondsToSelector();
    if ((result & 1) != 0)
    {
      if (a2)
      {
        id Value = (void *)CFDictionaryGetValue(*(CFDictionaryRef *)(v9 + 64), a2);
        if (!Value) {
          id Value = __SlowPathNSXMLParserNSStringFromBytes(*(__CFDictionary **)(v9 + 64), (char *)a2);
        }
        if (a3)
        {
LABEL_8:
          uint64_t v12 = (void *)CFDictionaryGetValue(*(CFDictionaryRef *)(v9 + 64), a3);
          if (!v12) {
            uint64_t v12 = __SlowPathNSXMLParserNSStringFromBytes(*(__CFDictionary **)(v9 + 64), (char *)a3);
          }
          if (a4)
          {
LABEL_11:
            uint64_t v13 = (void *)CFDictionaryGetValue(*(CFDictionaryRef *)(v9 + 64), a4);
            if (!v13) {
              uint64_t v13 = __SlowPathNSXMLParserNSStringFromBytes(*(__CFDictionary **)(v9 + 64), (char *)a4);
            }
            if (a5) {
              goto LABEL_14;
            }
            goto LABEL_20;
          }

uint64_t _startDocument(uint64_t result)
{
  uint64_t v1 = result;
  if (!result || !*(_BYTE *)(result + 120))
  {
    unsigned int v2 = (void *)[(id)result delegate];
    xmlEntityPtr result = objc_opt_respondsToSelector();
    if ((result & 1) != 0) {
      return [v2 parserDidStartDocument:v1];
    }
  }

  return result;
}

uint64_t _endDocument(uint64_t result)
{
  uint64_t v1 = result;
  if (!result || !*(_BYTE *)(result + 120))
  {
    unsigned int v2 = (void *)[(id)result delegate];
    xmlEntityPtr result = objc_opt_respondsToSelector();
    if ((result & 1) != 0) {
      return [v2 parserDidEndDocument:v1];
    }
  }

  return result;
}

void _startElementNs( uint64_t a1, void *key, char *__s, void *a4, int a5, uint64_t a6, int a7, int a8, uint64_t a9)
{
  uint64_t v80 = *MEMORY[0x1895F89C0];
  if (a1 && *(_BYTE *)(a1 + 120)) {
    return;
  }
  id v71 = *(id *)(a1 + 8);
  uint64_t v76 = *(void *)(a1 + 40);
  if (__s && (size_t v16 = strlen(__s)) != 0)
  {
    size_t v17 = v16;
    id Value = 0LL;
    if (key)
    {
      if ((v76 & 4) != 0)
      {
        id Value = (const __CFString *)CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 64), key);
        if (!Value) {
          id Value = (const __CFString *)__SlowPathNSXMLParserNSStringFromBytes(*(__CFDictionary **)(a1 + 64), (char *)key);
        }
      }
    }

    size_t v18 = strlen((const char *)key);
    uint64_t v19 = (const __CFString *)_cachedColonSeparatedStringFromPrefixAndSuffix(__s, v17, key, v18, a1);
  }

  else
  {
    if (key)
    {
      uint64_t v19 = (const __CFString *)CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 64), key);
      char v20 = v76;
      id Value = v19;
      if (!v19)
      {
        uint64_t v19 = (const __CFString *)__SlowPathNSXMLParserNSStringFromBytes(*(__CFDictionary **)(a1 + 64), (char *)key);
        id Value = v19;
      }

      goto LABEL_15;
    }

    id Value = 0LL;
    uint64_t v19 = 0LL;
  }

  char v20 = v76;
LABEL_15:
  uint64_t v72 = v19;
  int v21 = 0LL;
  if (a4)
  {
    if ((v20 & 4) != 0)
    {
      int v21 = (const __CFString *)CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 64), a4);
      if (!v21) {
        int v21 = (const __CFString *)__SlowPathNSXMLParserNSStringFromBytes(*(__CFDictionary **)(a1 + 64), (char *)a4);
      }
    }
  }

  __int128 v70 = v21;
  int v22 = a7 + a5;
  if (a7 + a5 < 0)
  {
    CFStringRef v67 = CFStringCreateWithFormat( 0LL,  0LL,  @"*** attempt to create a temporary id buffer which is too large or with a negative count (%lu) -- possibly data is corrupt",  2 * v22);
    __int128 v68 = (void *)[MEMORY[0x189603F70] exceptionWithName:*MEMORY[0x189603A48] reason:v67 userInfo:0];
    CFRelease(v67);
    objc_exception_throw(v68);
    _Unwind_Resume(v69);
  }

  int v74 = &v70;
  if (v22) {
    uint64_t v23 = 2 * v22;
  }
  else {
    uint64_t v23 = 1LL;
  }
  *(void *)&double v24 = MEMORY[0x1895F8858](v23).n128_u64[0];
  int v26 = (char *)&v70 - v25;
  if (v27 >= 0x101)
  {
    int v26 = (char *)_CFCreateArrayStorage();
    uint64_t v75 = v26;
  }

  else
  {
    uint64_t v75 = 0LL;
  }

  uint64_t v78 = &v26[8 * v22];
  uint64_t v79 = v26;
  if (v22)
  {
    if ((v20 & 8) != 0) {
      id v77 = (id)[objc_alloc(MEMORY[0x189603FC8]) initWithCapacity:a5];
    }
    else {
      id v77 = 0LL;
    }
    uint64_t v28 = 0LL;
    if (a5)
    {
      unint64_t v29 = 0LL;
      unint64_t v30 = 2 * a5;
      while (1)
      {
        uint64_t v31 = *(char **)(a6 + 8 * v29);
        if (v31)
        {
          if ((v20 & 8) != 0)
          {
            int v32 = (const __CFString *)CFDictionaryGetValue( *(CFDictionaryRef *)(a1 + 64),  *(const void **)(a6 + 8 * v29));
            if (!v32) {
              int v32 = (const __CFString *)__SlowPathNSXMLParserNSStringFromBytes(*(__CFDictionary **)(a1 + 64), v31);
            }
          }

          else
          {
            int v32 = 0LL;
          }

          size_t v34 = strlen(*(const char **)(a6 + 8 * v29));
          uint64_t v33 = (const __CFString *)_cachedColonSeparatedStringFromPrefixAndSuffix( "xmlns",  5uLL,  *(const void **)(a6 + 8 * v29),  v34,  a1);
        }

        else
        {
          uint64_t v33 = @"xmlns";
          int v32 = &stru_189CA6A28;
        }

        uint64_t v35 = a6 + 8 * v29;
        uint64_t v36 = *(char **)(v35 + 8);
        if (v36) {
          break;
        }
        uint64_t v38 = &stru_189CA6A28;
        if ((v20 & 8) != 0) {
          goto LABEL_49;
        }
LABEL_50:
        if ((v20 & 4) == 0)
        {
          *(void *)&v79[8 * v28] = v33;
          *(void *)&v78[8 * v28++] = v38;
        }

        v29 += 2LL;
        if (v29 >= v30) {
          goto LABEL_53;
        }
      }

      float32x2_t v37 = (const __CFString *)CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 64), *(const void **)(v35 + 8));
      if (!v37) {
        float32x2_t v37 = (const __CFString *)__SlowPathNSXMLParserNSStringFromBytes(*(__CFDictionary **)(a1 + 64), v36);
      }
      if (v37) {
        uint64_t v38 = v37;
      }
      else {
        uint64_t v38 = &stru_189CA6A28;
      }
      if ((v20 & 8) == 0) {
        goto LABEL_50;
      }
LABEL_49:
      objc_msgSend(v77, "setObject:forKey:", v38, v32, v70);
      goto LABEL_50;
    }
  }

  else
  {
    uint64_t v28 = 0LL;
    id v77 = 0LL;
  }

uint64_t _endElementNs(uint64_t result, void *key, char *__s, void *a4)
{
  uint64_t v7 = result;
  if (result && *(_BYTE *)(result + 120)) {
    return result;
  }
  uint64_t v8 = *(void **)(result + 8);
  uint64_t v9 = *(void *)(result + 40);
  if (__s)
  {
    int v10 = strlen(__s);
    if (v10)
    {
      id Value = 0LL;
      if (key)
      {
        if ((v9 & 4) != 0)
        {
          id Value = (const __CFString *)CFDictionaryGetValue(*(CFDictionaryRef *)(v7 + 64), key);
          if (!Value) {
            id Value = (const __CFString *)__SlowPathNSXMLParserNSStringFromBytes( *(__CFDictionary **)(v7 + 64),  (char *)key);
          }
        }
      }

      size_t v12 = strlen((const char *)key);
      uint64_t v13 = (const __CFString *)_cachedColonSeparatedStringFromPrefixAndSuffix(__s, v10, key, v12, v7);
LABEL_13:
      uint64_t v14 = v13;
      goto LABEL_15;
    }
  }

  if (key)
  {
    id Value = (const __CFString *)CFDictionaryGetValue(*(CFDictionaryRef *)(v7 + 64), key);
    uint64_t v14 = Value;
    if (Value) {
      goto LABEL_15;
    }
    uint64_t v13 = (const __CFString *)__SlowPathNSXMLParserNSStringFromBytes(*(__CFDictionary **)(v7 + 64), (char *)key);
    id Value = v13;
    goto LABEL_13;
  }

  id Value = 0LL;
  uint64_t v14 = 0LL;
LABEL_15:
  uint64_t v15 = 0LL;
  if (a4)
  {
    if ((v9 & 4) != 0)
    {
      uint64_t v15 = (const __CFString *)CFDictionaryGetValue(*(CFDictionaryRef *)(v7 + 64), a4);
      if (!v15) {
        uint64_t v15 = (const __CFString *)__SlowPathNSXMLParserNSStringFromBytes(*(__CFDictionary **)(v7 + 64), (char *)a4);
      }
    }
  }

  if ((*(_BYTE *)(v7 + 43) & 0x40) != 0)
  {
    if ((v9 & 4) != 0)
    {
      if (v15) {
        size_t v16 = v15;
      }
      else {
        size_t v16 = &stru_189CA6A28;
      }
      if (v14) {
        size_t v17 = v14;
      }
      else {
        size_t v17 = &stru_189CA6A28;
      }
      size_t v18 = v8;
      uint64_t v19 = v7;
      char v20 = Value;
    }

    else
    {
      size_t v18 = v8;
      uint64_t v19 = v7;
      char v20 = v14;
      size_t v16 = 0LL;
      size_t v17 = 0LL;
    }

    [v18 parser:v19 didEndElement:v20 namespaceURI:v16 qualifiedName:v17];
  }

  return [(id)v7 _popNamespaces];
}

void _characters(uint64_t a1, const UInt8 *a2, int a3)
{
  if (!a1 || !*(_BYTE *)(a1 + 120))
  {
    uint64_t v4 = *(void *)(a1 + 32);
    if (*(void *)(v4 + 424) == 1LL)
    {
      *(void *)(v4 + 424) = 0LL;
    }

    else if (*(void *)(a1 + 40) >> 31)
    {
      uint64_t v5 = *(void **)(a1 + 8);
      CFStringRef v6 = CFStringCreateWithBytes((CFAllocatorRef)*MEMORY[0x189604DB0], a2, a3, 0x8000100u, 0);
      if (v6)
      {
        CFStringRef v7 = v6;
        [v5 parser:a1 foundCharacters:v6];
        CFRelease(v7);
      }
    }
  }

uint64_t _processingInstruction(uint64_t result, void *a2, void *a3)
{
  uint64_t v5 = result;
  if (!result || !*(_BYTE *)(result + 120))
  {
    CFStringRef v6 = (void *)[(id)result delegate];
    xmlEntityPtr result = objc_opt_respondsToSelector();
    if ((result & 1) != 0)
    {
      if (a2)
      {
        id Value = (void *)CFDictionaryGetValue(*(CFDictionaryRef *)(v5 + 64), a2);
        if (!Value) {
          id Value = __SlowPathNSXMLParserNSStringFromBytes(*(__CFDictionary **)(v5 + 64), (char *)a2);
        }
        if (a3) {
          goto LABEL_8;
        }
      }

      else
      {
        id Value = 0LL;
        if (a3)
        {
LABEL_8:
          uint64_t v8 = (void *)CFDictionaryGetValue(*(CFDictionaryRef *)(v5 + 64), a3);
          if (!v8) {
            uint64_t v8 = __SlowPathNSXMLParserNSStringFromBytes(*(__CFDictionary **)(v5 + 64), (char *)a3);
          }
          return [v6 parser:v5 foundProcessingInstructionWithTarget:Value data:v8];
        }
      }

      uint64_t v8 = 0LL;
      return [v6 parser:v5 foundProcessingInstructionWithTarget:Value data:v8];
    }
  }

  return result;
}

void _errorCallback(uint64_t a1)
{
  xmlErrorPtr LastError = xmlCtxtGetLastError(*(void **)(a1 + 32));
  _reportError((uint64_t)LastError, a1, 0);
}

void _cdataBlock(_BYTE *a1, const UInt8 *a2, int a3)
{
  if (!a1 || !a1[120])
  {
    CFStringRef v6 = (void *)[a1 delegate];
    if ((objc_opt_respondsToSelector() & 1) != 0)
    {
      id v7 = (id)[objc_allocWithZone(MEMORY[0x189603F48]) initWithBytes:a2 length:a3];
      [v6 parser:a1 foundCDATA:v7];
    }

    else
    {
      _characters((uint64_t)a1, a2, a3);
    }
  }

uint64_t _comment(uint64_t result, void *a2)
{
  uint64_t v3 = result;
  if (!result || !*(_BYTE *)(result + 120))
  {
    uint64_t v4 = (void *)[(id)result delegate];
    xmlEntityPtr result = objc_opt_respondsToSelector();
    if ((result & 1) != 0)
    {
      if (a2)
      {
        id Value = (void *)CFDictionaryGetValue(*(CFDictionaryRef *)(v3 + 64), a2);
        if (!Value) {
          id Value = __SlowPathNSXMLParserNSStringFromBytes(*(__CFDictionary **)(v3 + 64), (char *)a2);
        }
      }

      else
      {
        id Value = 0LL;
      }

      return [v4 parser:v3 foundComment:Value];
    }
  }

  return result;
}

void _externalSubset2(uint64_t a1, const xmlChar *a2, const xmlChar *a3, const xmlChar *a4)
{
}

BOOL cStringEqual(const char *a1, const char *a2)
{
  return strcmp(a1, a2) == 0;
}

uint64_t cStringHash_0(const char *a1)
{
  return CFStringHashCString();
}

NSString *__SlowPathNSXMLParserNSStringFromBytes(__CFDictionary *a1, char *__s)
{
  uint64_t v4 = -[NSString initWithBytes:length:encoding:]( objc_alloc(&OBJC_CLASS___NSString),  "initWithBytes:length:encoding:",  __s,  strlen(__s),  4LL);
  uint64_t v5 = v4;
  if (((unint64_t)v4 & 0x8000000000000000LL) == 0)
  {
    CStringPtr = CFStringGetCStringPtr((CFStringRef)v4, 0x8000100u);
    if (!CStringPtr) {
      return v5;
    }
    id v7 = CStringPtr;
    if (strcmp(__s, CStringPtr)) {
      return v5;
    }
    CFDictionaryAddValue(a1, v7, v5);
  }

  return v5;
}

void *_cachedColonSeparatedStringFromPrefixAndSuffix( const void *a1, size_t a2, const void *a3, size_t a4, uint64_t a5)
{
  v16[1] = *MEMORY[0x1895F89C0];
  size_t v10 = a2 + a4 + 2;
  MEMORY[0x1895F8858](a1);
  size_t v12 = (char *)v16 - v11;
  if (v10 >= 0x101) {
    size_t v12 = (char *)malloc(v10);
  }
  memmove(v12, a1, a2);
  uint64_t v13 = &v12[a2];
  *v13++ = 58;
  memmove(v13, a3, a4);
  v13[a4] = 0;
  id Value = (void *)CFDictionaryGetValue(*(CFDictionaryRef *)(a5 + 64), v12);
  if (!Value) {
    id Value = __SlowPathNSXMLParserNSStringFromBytes(*(__CFDictionary **)(a5 + 64), v12);
  }
  if (v10 >= 0x101) {
    free(v12);
  }
  return Value;
}

uint64_t ___startElementNs_block_invoke()
{
  uint64_t result = _CFAppVersionCheckLessThan();
  _MergedGlobals_130 = (_DWORD)result != 0;
  return result;
}

void _reportError(uint64_t a1, uint64_t a2, int a3)
{
  if (a1)
  {
    if (*(_DWORD *)(a1 + 16) == 3)
    {
      uint64_t v6 = [(id)a2 delegate];
      if (!*(_BYTE *)(a2 + 120))
      {
        id v7 = (void *)v6;
        uint64_t v8 = _NSErrorFromXMLError(a1, a2);
        if ((objc_opt_respondsToSelector() & 1) != 0) {
          [v7 parser:a2 parseErrorOccurred:v8];
        }
        [(id)a2 _setExpandedParserError:v8];
        if (([(id)a2 shouldContinueAfterFatalError] & 1) == 0
          && *(_DWORD *)(a1 + 16) == 3
          && !*(_BYTE *)(a2 + 72))
        {
          else {
            xmlStopParser(*(xmlParserCtxtPtr *)(a2 + 32));
          }
        }
      }
    }
  }

void sub_18364E87C(_Unwind_Exception *a1)
{
}

void _localeDidChange()
{
  uint64_t v0 = (const void *)qword_18C496CF8;
  do
  {
    unint64_t v1 = __ldaxr((unint64_t *)&qword_18C496CF8);
    if ((const void *)v1 != v0)
    {
      __clrex();
      return;
    }
  }

  while (__stlxr(0LL, (unint64_t *)&qword_18C496CF8));
  CFRelease(+[_NSPredicateOperatorUtilities retainedLocale](&OBJC_CLASS____NSPredicateOperatorUtilities, "retainedLocale"));
  if (v0)
  {
  }

void sub_18364EB34(_Unwind_Exception *exception_object, int a2)
{
  if (a2 == 1)
  {
    objc_begin_catch(exception_object);
    if (v3) {
      free(v2);
    }
    objc_exception_rethrow();
    __break(1u);
    JUMPOUT(0x18364EB60LL);
  }

  _Unwind_Resume(exception_object);
}

void sub_18364F1A4(_Unwind_Exception *a1)
{
}

void _doPatternNormalization( const __CFString *a1, void **a2, unsigned __int8 *a3, int a4, CFStringRef *a5, CFStringCompareFlags a6, CFIndex *a7, size_t a8, CFStringNormalizationForm theForm)
{
  size_t v10 = a7;
  uint64_t v14 = a3;
  uint64_t v54 = *MEMORY[0x1895F89C0];
  size_t v45 = a2;
  size_t v16 = (UniChar *)*a2;
  int v17 = *a3;
  CFIndex v18 = *a7;
  bzero(*a2, a8);
  v55.NSUInteger location = 0LL;
  v55.length = v18;
  CFStringGetCharacters(a1, v55, v16);
  v16[v18] = 0;
  *a5 = CFStringCreateWithCharacters(0LL, v16, v18);
  if (a4)
  {
    +[_NSPredicateOperatorUtilities copyRegexFindSafePattern:toBuffer:]( &OBJC_CLASS____NSPredicateOperatorUtilities,  "copyRegexFindSafePattern:toBuffer:",  a1,  v16);
    CFIndex v18 = u_strlen(v16);
  }

  MutableWithExternalCharactersNoCopdouble y = CFStringCreateMutableWithExternalCharactersNoCopy( (CFAllocatorRef)*MEMORY[0x189604DB0],  v16,  v18,  a8,  (CFAllocatorRef)*MEMORY[0x189604DC8]);
  if (a6)
  {
    if ((a6 & 0x100) != 0)
    {
      objc_opt_self();
      CFIndex Length = CFStringGetLength(MutableWithExternalCharactersNoCopy);
      CFStringRef theString = MutableWithExternalCharactersNoCopy;
      uint64_t v50 = 0LL;
      CFIndex v51 = Length;
      CharactersPtr = CFStringGetCharactersPtr(MutableWithExternalCharactersNoCopy);
      size_t v44 = v14;
      unint64_t v43 = v10;
      if (CharactersPtr) {
        CStringPtr = 0LL;
      }
      else {
        CStringPtr = CFStringGetCStringPtr(MutableWithExternalCharactersNoCopy, 0x600u);
      }
      int64_t v52 = 0LL;
      int64_t v53 = 0LL;
      uint64_t v49 = CStringPtr;
      if (Length >= 1)
      {
        int64_t v22 = 0LL;
        CFIndex v23 = -Length;
        CFIndex v24 = Length + 64;
        unint64_t v25 = Length;
        do
        {
          int64_t v26 = v25;
          if (v25 >= 5) {
            uint64_t v27 = 5LL;
          }
          else {
            uint64_t v27 = v25;
          }
          --v25;
          CFIndex v28 = v51;
          if (v51 >= v26)
          {
            if (CharactersPtr)
            {
              UniChar v29 = CharactersPtr[v26 - 1 + v50];
            }

            else if (v49)
            {
              UniChar v29 = v49[v50 - 1 + v26];
            }

            else
            {
              BOOL v30 = v53 >= v26 && v22 < v26;
              if (!v30)
              {
                uint64_t v31 = v27 + v23;
                CFIndex v32 = v24 - v27;
                int64_t v33 = v26 - v27;
                CFIndex v34 = v33 + 64;
                if (v33 + 64 >= v51) {
                  CFIndex v34 = v51;
                }
                int64_t v52 = v33;
                int64_t v53 = v34;
                if (v51 >= v32) {
                  CFIndex v28 = v32;
                }
                v56.length = v28 + v31;
                v56.NSUInteger location = v33 + v50;
                CFStringGetCharacters(theString, v56, buffer);
                int64_t v22 = v52;
              }

              UniChar v29 = buffer[v26 - 1 - v22];
            }

            int v35 = v29;
            unsigned int v36 = v29 - 65284;
            BOOL v30 = v36 > 0x3A;
            uint64_t v37 = (1LL << v36) & 0x580000008000CF1LL;
            if (!v30 && v37 != 0 || (v35 - 65371) < 3)
            {
              CFStringInsert(MutableWithExternalCharactersNoCopy, v25, @"\\"");
              CFStringRef theString = MutableWithExternalCharactersNoCopy;
              uint64_t v50 = 0LL;
              CFIndex v51 = Length;
              CharactersPtr = CFStringGetCharactersPtr(MutableWithExternalCharactersNoCopy);
              if (CharactersPtr) {
                unint64_t v40 = 0LL;
              }
              else {
                unint64_t v40 = CFStringGetCStringPtr(MutableWithExternalCharactersNoCopy, 0x600u);
              }
              int64_t v22 = 0LL;
              uint64_t v49 = v40;
              int64_t v52 = 0LL;
              int64_t v53 = 0LL;
            }
          }

          ++v23;
          --v24;
        }

        while (v25 + 1 > 1);
      }

      uint64_t v14 = v44;
      size_t v10 = v43;
    }

    CFStringFold(MutableWithExternalCharactersNoCopy, a6, 0LL);
  }

  CFStringNormalize(MutableWithExternalCharactersNoCopy, theForm);
  if (CFStringGetCharactersPtr(MutableWithExternalCharactersNoCopy) == v16)
  {
    CFIndex v41 = CFStringGetLength(MutableWithExternalCharactersNoCopy);
  }

  else
  {
    if (v17) {
      free(v16);
    }
    CFIndex v41 = CFStringGetLength(MutableWithExternalCharactersNoCopy);
    uint64_t v42 = (UniChar *)malloc(2 * v41 + 2);
    void *v45 = v42;
    *uint64_t v14 = 1;
    v57.NSUInteger location = 0LL;
    v57.length = v41;
    CFStringGetCharacters(MutableWithExternalCharactersNoCopy, v57, v42);
    v42[v41] = 0;
  }

  *size_t v10 = v41;
  CFRelease(MutableWithExternalCharactersNoCopy);
}

void sub_18364F58C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, int a13, uint64_t a14)
{
  int v18 = v16;
  if (a2 == 1)
  {
    id v17 = objc_begin_catch(exception_object);
    if (v18) {
      free(v15);
    }
    *uint64_t v14 = 0;
    objc_exception_throw(v17);
    __break(1u);
    JUMPOUT(0x18364F5D8LL);
  }

  _Unwind_Resume(exception_object);
}

void sub_183650C98( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
  if (a2)
  {
    if (a2 == 2)
    {
      objc_begin_catch(exception_object);
      NSLog((NSString *)@"THIS SHOULD NOT HAVE HAPPENED: %@");
    }

    else
    {
      objc_begin_catch(exception_object);
      os_unfair_lock_unlock(v9);
    }

    objc_exception_rethrow();
    __break(1u);
    JUMPOUT(0x183650CECLL);
  }

  _Unwind_Resume(exception_object);
}

void sub_1836512C4( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
  if (a2)
  {
    if (a2 == 1)
    {
      objc_begin_catch(exception_object);
      NSLog((NSString *)@"THIS SHOULD NOT HAVE HAPPENED: %@");
    }

    else
    {
      objc_begin_catch(exception_object);
      os_unfair_lock_unlock(v9);
    }

    objc_exception_rethrow();
    __break(1u);
    JUMPOUT(0x183651318LL);
  }

  _Unwind_Resume(exception_object);
}

void sub_1836514F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
}

void __Block_byref_object_copy__18(uint64_t a1, uint64_t a2)
{
}

void __Block_byref_object_dispose__18(uint64_t a1)
{
}

void sub_183651CC4( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, char a24)
{
}

void sub_183652214( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
  if (a2)
  {
    if (a2 == 2)
    {
      objc_begin_catch(exception_object);
      NSLog((NSString *)@"THIS SHOULD NOT HAVE HAPPENED: %@");
    }

    else
    {
      objc_begin_catch(exception_object);
      os_unfair_lock_unlock(v9);
    }

    objc_exception_rethrow();
    __break(1u);
    JUMPOUT(0x183652268LL);
  }

  _Unwind_Resume(exception_object);
}

void sub_183652528(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
}

void sub_1836526DC( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
  if (a2)
  {
    if (a2 == 2)
    {
      objc_begin_catch(exception_object);
      NSLog((NSString *)@"THIS SHOULD NOT HAVE HAPPENED: %@");
    }

    else
    {
      objc_begin_catch(exception_object);
      os_unfair_lock_unlock(v9);
    }

    objc_exception_rethrow();
    __break(1u);
    JUMPOUT(0x183652730LL);
  }

  _Unwind_Resume(exception_object);
}

uint64_t setOperatorModifier(void *a1, uint64_t a2)
{
  if ((objc_opt_isKindOfClass() & 1) != 0)
  {
    objc_msgSend((id)objc_msgSend(a1, "predicateOperator"), "_setModifier:", a2);
    return (uint64_t)a1;
  }

  else
  {
    objc_exception_throw((id)[MEMORY[0x189603F70] exceptionWithName:*MEMORY[0x189603A60] reason:@"Tried to set a NSComparisonPredicateModifier on a compound predicate. This was probably the result of a predicate containing ANY/ALL BETWEEN." userInfo:0]);
    return NSStringForLexedIdentifier();
  }

NSString *NSStringForLexedIdentifier(void *a1)
{
  unsigned int v2 = -[NSString initWithUTF8String:](objc_alloc(&OBJC_CLASS___NSString), "initWithUTF8String:", a1);
  free(a1);
  return v2;
}

NSKeyPathExpression *CreateKVCExpression(uint64_t a1)
{
  unint64_t v1 = -[NSKeyPathSpecifierExpression initWithObject:]( objc_alloc(&OBJC_CLASS___NSKeyPathSpecifierExpression),  "initWithObject:",  a1);
  unsigned int v2 = -[NSKeyPathExpression initWithKeyPath:](objc_alloc(&OBJC_CLASS___NSKeyPathExpression), "initWithKeyPath:", v1);

  return v2;
}

NSKeyPathExpression *ResolveKeyPathsIntoExpressionSequence(void *a1, void *a2)
{
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {
    objc_opt_isKindOfClass();
    objc_opt_isKindOfClass();
    return -[NSKeyPathExpression initWithOperand:andKeyPath:]( objc_alloc(&OBJC_CLASS___NSKeyPathExpression),  "initWithOperand:andKeyPath:",  a1,  a2);
  }

  uint64_t v4 = [a2 pathExpression];
  if ((objc_opt_isKindOfClass() & 1) != 0) {
    a2 = (void *)v4;
  }
  if ((objc_opt_isKindOfClass() & 1) != 0)
  {
    uint64_t v5 = (void *)[a1 pathExpression];
    if ((objc_opt_isKindOfClass() & 1) != 0 && (objc_opt_isKindOfClass() & 1) != 0)
    {
      uint64_t v6 = -[NSString initWithFormat:]( [NSString alloc],  "initWithFormat:",  @"%@.%@",  [v5 keyPath],  objc_msgSend(a2, "keyPath"));
      id v7 = -[NSKeyPathSpecifierExpression initWithObject:]( objc_alloc(&OBJC_CLASS___NSKeyPathSpecifierExpression),  "initWithObject:",  v6);
      [a1 operand];
      isKindOfClass Class = objc_opt_isKindOfClass();
      uint64_t v9 = objc_alloc(&OBJC_CLASS___NSKeyPathExpression);
      uint64_t v10 = (uint64_t)((isKindOfClass & 1) != 0
                    ? -[NSKeyPathExpression initWithKeyPath:](v9, "initWithKeyPath:", v7)
                    : -[NSKeyPathExpression initWithOperand:andKeyPath:]( v9,  "initWithOperand:andKeyPath:",  [a1 operand],  v7));
      size_t v12 = (NSKeyPathExpression *)v10;

      if (v12) {
        return v12;
      }
    }

    return -[NSKeyPathExpression initWithOperand:andKeyPath:]( objc_alloc(&OBJC_CLASS___NSKeyPathExpression),  "initWithOperand:andKeyPath:",  a1,  a2);
  }

  if ((objc_opt_isKindOfClass() & 1) == 0) {
    return -[NSKeyPathExpression initWithOperand:andKeyPath:]( objc_alloc(&OBJC_CLASS___NSKeyPathExpression),  "initWithOperand:andKeyPath:",  a1,  a2);
  }
  if ((objc_opt_isKindOfClass() & 1) == 0) {
    return -[NSKeyPathExpression initWithOperand:andKeyPath:]( objc_alloc(&OBJC_CLASS___NSKeyPathExpression),  "initWithOperand:andKeyPath:",  a1,  a2);
  }
  size_t v12 = -[NSKeyPathExpression initWithKeyPath:](objc_alloc(&OBJC_CLASS___NSKeyPathExpression), "initWithKeyPath:", a2);
  if (!v12) {
    return -[NSKeyPathExpression initWithOperand:andKeyPath:]( objc_alloc(&OBJC_CLASS___NSKeyPathExpression),  "initWithOperand:andKeyPath:",  a1,  a2);
  }
  return v12;
}

NSComparisonPredicate *HandleStringAggregatePredicate(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  if (a3)
  {
    unsigned int v8 = [a3 rangeOfString:@"c" options:1] != 0x7FFFFFFFFFFFFFFFLL;
    if ([a3 rangeOfString:@"d" options:1] != 0x7FFFFFFFFFFFFFFFLL) {
      v8 |= 2u;
    }
    if ([a3 rangeOfString:@"n" options:1] != 0x7FFFFFFFFFFFFFFFLL) {
      v8 |= 4u;
    }
    if ([a3 rangeOfString:@"l" options:1] != 0x7FFFFFFFFFFFFFFFLL) {
      v8 |= 8u;
    }
    if ([a3 rangeOfString:@"w" options:1] == 0x7FFFFFFFFFFFFFFFLL) {
      uint64_t v9 = v8;
    }
    else {
      uint64_t v9 = v8 | 0x10;
    }
  }

  else
  {
    uint64_t v9 = 0LL;
  }

  id v10 = +[NSPredicateOperator _newOperatorWithType:modifier:options:]( &OBJC_CLASS___NSPredicateOperator,  "_newOperatorWithType:modifier:options:",  a2,  0LL,  v9);
  uint64_t v11 = -[NSComparisonPredicate initWithPredicateOperator:leftExpression:rightExpression:]( objc_alloc(&OBJC_CLASS___NSComparisonPredicate),  "initWithPredicateOperator:leftExpression:rightExpression:",  v10,  a1,  a4);

  return v11;
}

id PredicateOperatorForName(uint64_t a1, uint64_t a2)
{
  return +[NSPredicateOperator _newOperatorWithType:modifier:options:]( &OBJC_CLASS___NSPredicateOperator,  "_newOperatorWithType:modifier:options:",  a1,  0LL,  a2);
}

NSFunctionExpression *HandleUnaryMinus(void *a1)
{
  if ((objc_opt_isKindOfClass() & 1) == 0
    || (unsigned int v2 = (void *)[a1 constantValue], !_NSIsNSNumber()))
  {
LABEL_20:
    uint64_t v13 = -[NSNumber initWithLongLong:](objc_alloc(&OBJC_CLASS___NSNumber), "initWithLongLong:", 0LL);
    uint64_t v14 = -[NSConstantValueExpression initWithObject:]( objc_alloc(&OBJC_CLASS___NSConstantValueExpression),  "initWithObject:",  v13);
    uint64_t v15 = (void *)objc_msgSend(objc_alloc(MEMORY[0x189603F18]), "initWithObjects:", v14, a1, 0);
    FunctionExpression = CreateFunctionExpression((NSString *)@"from:subtract:", v15);

    return FunctionExpression;
  }

  int v3 = *(char *)[v2 objCType];
  if (v3 <= 80)
  {
    if (v3 == 67 || v3 == 73 || v3 == 76) {
      goto LABEL_16;
    }
  }

  else
  {
    if ((v3 - 99) <= 0x10)
    {
      if (((1 << (v3 - 99)) & 0x14241) != 0)
      {
        uint64_t v4 = objc_alloc(&OBJC_CLASS___NSNumber);
        uint64_t v5 = [v2 longLongValue];
LABEL_17:
        uint64_t v9 = -[NSNumber initWithLongLong:](v4, "initWithLongLong:", -v5);
        goto LABEL_18;
      }

      if (v3 == 100)
      {
        id v17 = objc_alloc(&OBJC_CLASS___NSNumber);
        [v2 doubleValue];
        uint64_t v9 = -[NSNumber initWithDouble:](v17, "initWithDouble:", 0.0 - v18);
LABEL_18:
        id v10 = (void *)v9;
        if (v9)
        {
          uint64_t v11 = -[NSConstantValueExpression initWithObject:]( objc_alloc(&OBJC_CLASS___NSConstantValueExpression),  "initWithObject:",  v9);

          return (NSFunctionExpression *)v11;
        }

        goto LABEL_20;
      }

      if (v3 == 102)
      {
        uint64_t v6 = objc_alloc(&OBJC_CLASS___NSNumber);
        [v2 floatValue];
        *(float *)&double v8 = 0.0 - v7;
        uint64_t v9 = -[NSNumber initWithFloat:](v6, "initWithFloat:", v8);
        goto LABEL_18;
      }
    }

    if (v3 == 81 || v3 == 83)
    {
LABEL_16:
      uint64_t v4 = objc_alloc(&OBJC_CLASS___NSNumber);
      uint64_t v5 = [v2 unsignedLongLongValue];
      goto LABEL_17;
    }
  }

  objc_exception_throw((id)[MEMORY[0x189603F70] exceptionWithName:*MEMORY[0x189603A58] reason:@"Unrecognized numeric type while processing unary minus syntax." userInfo:0]);
  return CreateFunctionExpression(v19, v20);
}

NSFunctionExpression *CreateFunctionExpression(NSString *a1, void *a2)
{
  p_super = a1;
  uint64_t v19 = *MEMORY[0x1895F89C0];
  uint64_t v4 = [@"tokenize" compare:a1 options:1];
  uint64_t v5 = [a2 count];
  if (v4)
  {
    if (v5 != 1 || -[NSString hasSuffix:](p_super, "hasSuffix:", @":"))
    {
      int v6 = 0;
      goto LABEL_9;
    }

    float v7 = -[NSString initWithString:](objc_alloc(&OBJC_CLASS___NSMutableString), "initWithString:", p_super);
    p_super = &v7->super;
    double v8 = @":";
  }

  else
  {
    if (v5 != 2)
    {
      uint64_t v14 = (void *)MEMORY[0x189603F70];
      uint64_t v15 = *MEMORY[0x189603A60];
      int v16 = @"Invalid number of parameters to tokenize";
      goto LABEL_22;
    }

    float v7 = -[NSString initWithString:](objc_alloc(&OBJC_CLASS___NSMutableString), "initWithString:", p_super);
    p_super = &v7->super;
    double v8 = @":using:";
  }

  -[NSMutableString appendString:](v7, "appendString:", v8);
  int v6 = 1;
LABEL_9:
  uint64_t v9 = NSSelectorFromString(p_super);
  objc_opt_self();
  if ([*(id *)_CFPredicatePolicyData() objectForKey:p_super])
  {
    LOBYTE(v10) = 0;
    if (!v9) {
      goto LABEL_19;
    }
  }

  else
  {
    objc_opt_self();
    uint64_t v11 = (os_log_s *)_NSOSLog();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 138543362;
      double v18 = p_super;
      _os_log_fault_impl( &dword_182EB1000,  v11,  OS_LOG_TYPE_FAULT,  "NSPredicate: Use of '%{public}@' as an NSExpression function is forbidden.",  buf,  0xCu);
    }

    objc_opt_self();
    unint64_t v10 = ((unint64_t)_CFPredicatePolicyData_getFlags() >> 3) & 1;
    if (!v9) {
      goto LABEL_19;
    }
  }

  if (v10 & 1 | ((objc_opt_respondsToSelector() & 1) == 0))
  {
LABEL_19:
    uint64_t v13 = +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"Unable to parse function name '%@' into supported selector (%s) ",  p_super,  sel_getName(v9));
    if (v6) {

    }
    uint64_t v14 = (void *)MEMORY[0x189603F70];
    uint64_t v15 = *MEMORY[0x189603A60];
    int v16 = (const __CFString *)v13;
LABEL_22:
    objc_exception_throw((id)[v14 exceptionWithName:v15 reason:v16 userInfo:0]);
  }

  if (v6) {

  }
  return -[NSFunctionExpression initWithSelector:argumentArray:]( objc_alloc(&OBJC_CLASS___NSFunctionExpression),  "initWithSelector:argumentArray:",  v9,  a2);
}

NSKeyPathExpression *ResolvePredicateArgument(void *a1, void *a2)
{
  v66[1] = *(ConstStr255Param *)MEMORY[0x1895F89C0];
  if (![a1 length])
  {
    id v60 = (void *)MEMORY[0x189603F70];
    uint64_t v61 = *MEMORY[0x189603A58];
    __int16 v62 = (NSString *)@"Illegal argument conversion character";
    goto LABEL_64;
  }

  uint64_t v4 = (void *)a2[2];
  uint64_t v5 = (void ***)a2[3];
  uint64_t v6 = a2[4];
  a2[4] = v6 + 1;
  char v7 = [a1 characterAtIndex:0];
  int v8 = 0;
  v66[0] = 0LL;
  uint64_t v9 = 1LL;
  while (v7 <= 107)
  {
    if (v7 != 104)
    {
      if (v7 != 76) {
        goto LABEL_13;
      }
      goto LABEL_12;
    }

    int v10 = -1;
LABEL_8:
    v8 += v10;
    char v7 = [a1 characterAtIndex:v9++];
  }

  if (v7 == 108)
  {
    int v10 = 1;
    goto LABEL_8;
  }

  if (v7 != 113) {
    goto LABEL_13;
  }
LABEL_12:
  char v7 = [a1 characterAtIndex:v9];
  int v8 = 2;
LABEL_13:
  if (v4)
  {
    unint64_t v11 = [v4 count];
    if ((v6 & 0x8000000000000000LL) == 0 && v6 + 1 <= v11)
    {
      uint64_t v12 = [v4 objectAtIndex:v6];
      uint64_t v13 = v7;
      uint64_t v65 = (__CFString *)v12;
      switch(v7)
      {
        case '@':
          if ((objc_opt_isKindOfClass() & 1) == 0) {
            goto LABEL_17;
          }
          return (NSKeyPathExpression *)v65;
        case 'A':
        case 'C':
        case 'D':
        case 'E':
        case 'F':
        case 'G':
        case 'O':
        case 'S':
        case 'U':
        case 'X':
        case 'a':
        case 'c':
        case 'd':
        case 'e':
        case 'f':
        case 'g':
        case 'i':
        case 'o':
        case 'p':
        case 's':
        case 'u':
        case 'x':
LABEL_17:
          uint64_t v14 = objc_alloc(&OBJC_CLASS___NSConstantValueExpression);
          uint64_t v15 = v65;
          goto LABEL_18;
        case 'B':
        case 'H':
        case 'I':
        case 'J':
        case 'L':
        case 'M':
        case 'N':
        case 'P':
        case 'Q':
        case 'R':
        case 'T':
        case 'V':
        case 'W':
        case 'Y':
        case 'Z':
        case '[':
        case '\\':
        case ']':
        case '^':
        case '_':
        case 'b':
        case 'h':
        case 'j':
        case 'k':
        case 'l':
        case 'm':
        case 'n':
        case 'q':
        case 'r':
        case 't':
        case 'v':
        case 'w':
          goto LABEL_65;
        case 'K':
          return CreateKVCExpression(v12);
        default:
          if ((_DWORD)v13 != 37) {
            goto LABEL_65;
          }
          uint64_t v14 = objc_alloc(&OBJC_CLASS___NSConstantValueExpression);
          uint64_t v15 = @"%";
LABEL_18:
          uint64_t result = -[NSConstantValueExpression initWithObject:](v14, "initWithObject:", v15);
          break;
      }

      return result;
    }

    id v60 = (void *)MEMORY[0x189603F70];
    uint64_t v61 = *MEMORY[0x189603A58];
    __int16 v62 = (NSString *)@"Insufficient arguments for conversion characters specified in format string.";
    while (1)
    {
LABEL_64:
      objc_exception_throw((id)[v60 exceptionWithName:v61 reason:v62 userInfo:0]);
LABEL_65:
      unint64_t v63 = (void *)MEMORY[0x189603F70];
      uint64_t v64 = *MEMORY[0x189603A58];
      __int16 v62 = +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"Unrecognized conversion specifier '%c' in format string.",  v13);
      id v60 = v63;
      uint64_t v61 = v64;
    }
  }

  uint64_t v13 = v7;
  switch(v7)
  {
    case '@':
      CFIndex v32 = (*v5)++;
      int64_t v33 = (__CFString *)*v32;
      if ((objc_opt_isKindOfClass() & 1) != 0)
      {
        KVCExpression = v33;
      }

      else
      {
        BOOL v30 = objc_alloc(&OBJC_CLASS___NSConstantValueExpression);
        uint64_t v31 = v33;
LABEL_60:
        KVCExpression = -[NSConstantValueExpression initWithObject:](v30, "initWithObject:", v31);
      }

NSFunctionExpression *HandleCastingOperation(void *a1)
{
  if ((unint64_t)[a1 count] <= 1)
  {
    objc_exception_throw((id)[MEMORY[0x189603F70] exceptionWithName:*MEMORY[0x189603A58] reason:@"CAST() requires two args." userInfo:0]);
    return (NSFunctionExpression *)CreateUserFunctionExpression();
  }

  else
  {
    unsigned int v2 = (void *)[a1 objectAtIndex:0];
    int v3 = (void *)[a1 objectAtIndex:1];
    if ((objc_opt_isKindOfClass() & 1) != 0
      && (objc_opt_isKindOfClass() & 1) != 0
      && (objc_msgSend((id)objc_msgSend(v3, "constantValue"), "isEqual:", @"Class") & 1) == 0)
    {
      return (NSFunctionExpression *)-[NSConstantValueExpression initWithObject:]( [NSConstantValueExpression alloc],  "initWithObject:",  +[_NSPredicateUtilities castObject:toType:]( _NSPredicateUtilities,  "castObject:toType:",  [v2 constantValue],  objc_msgSend((id)objc_msgSend(v3, "constantValue"), "description")));
    }

    else
    {
      return CreateFunctionExpression((NSString *)@"castObject:toType:", a1);
    }
  }

NSFunctionExpression *CreateUserFunctionExpression(void *a1)
{
  unint64_t v2 = [a1 count];
  if (v2 <= 1)
  {
    uint64_t v9 = (void *)MEMORY[0x189603F70];
    uint64_t v10 = *MEMORY[0x189603A60];
    unint64_t v11 = +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"User-defined function expressions must have at least a target and a selector; got (%@)",
            a1);
    uint64_t v12 = v9;
    uint64_t v13 = v10;
    goto LABEL_11;
  }

  unint64_t v3 = v2;
  uint64_t v4 = [a1 objectAtIndex:0];
  uint64_t v5 = [a1 objectAtIndex:1];
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {
    uint64_t v14 = (void *)MEMORY[0x189603F70];
    uint64_t v15 = *MEMORY[0x189603A60];
    int v16 = +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"User-defined function expressions must have a predefinedSelector; got (%@)",
            v5);
LABEL_9:
    unint64_t v11 = v16;
    uint64_t v12 = v14;
    uint64_t v13 = v15;
    goto LABEL_11;
  }

  uint64_t v6 = (NSString *)objc_msgSend( (id)objc_msgSend(a1, "objectAtIndex:", 1),  "expressionValueWithObject:context:",  0,  0);
  if ((_NSIsNSString() & 1) == 0)
  {
    uint64_t v14 = (void *)MEMORY[0x189603F70];
    uint64_t v15 = *MEMORY[0x189603A60];
    int v16 = +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"Can't get selector from non-string (%@)",  v6);
    goto LABEL_9;
  }

  SEL v7 = NSSelectorFromString(v6);
  if (v7) {
    return -[NSFunctionExpression initWithExpressionType:operand:selector:argumentArray:]( [NSFunctionExpression alloc],  "initWithExpressionType:operand:selector:argumentArray:",  4,  v4,  v7,  objc_msgSend(a1, "subarrayWithRange:", 2, v3 - 2));
  }
  unint64_t v11 = +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"Unable to parse function name '%@' into supported selector",  v6);
  uint64_t v12 = (void *)MEMORY[0x189603F70];
  uint64_t v13 = *MEMORY[0x189603A60];
LABEL_11:
  objc_exception_throw((id)[v12 exceptionWithName:v13 reason:v11 userInfo:0]);
  return (NSFunctionExpression *)HandleBetweenPredicate();
}

NSComparisonPredicate *HandleBetweenPredicate(uint64_t a1, uint64_t a2)
{
  id v4 = +[NSPredicateOperator _newOperatorWithType:modifier:options:]( &OBJC_CLASS___NSPredicateOperator,  "_newOperatorWithType:modifier:options:",  100LL,  0LL,  0LL);
  uint64_t v5 = -[NSComparisonPredicate initWithPredicateOperator:leftExpression:rightExpression:]( objc_alloc(&OBJC_CLASS___NSComparisonPredicate),  "initWithPredicateOperator:leftExpression:rightExpression:",  v4,  a1,  a2);

  return v5;
}

NSCompoundPredicate *buildANDPredicate(void *a1, void *a2)
{
  if ((objc_opt_isKindOfClass() & 1) != 0 && [a1 compoundPredicateType] == 1)
  {
    if ((objc_opt_isKindOfClass() & 1) == 0 || [a2 compoundPredicateType] != 1)
    {
      uint64_t v5 = (void *)objc_msgSend(objc_alloc(MEMORY[0x189603FA8]), "initWithArray:", objc_msgSend(a1, "subpredicates"));
      [v5 addObject:a2];
      goto LABEL_13;
    }

    uint64_t v4 = objc_msgSend(objc_alloc(MEMORY[0x189603FA8]), "initWithArray:", objc_msgSend(a1, "subpredicates"));
  }

  else
  {
    if ((objc_opt_isKindOfClass() & 1) == 0 || [a2 compoundPredicateType] != 1)
    {
      uint64_t v5 = (void *)objc_msgSend(objc_alloc(MEMORY[0x189603F18]), "initWithObjects:", a1, a2, 0);
      goto LABEL_13;
    }

    uint64_t v4 = objc_msgSend(objc_alloc(MEMORY[0x189603FA8]), "initWithObjects:", a1, 0);
  }

  uint64_t v5 = (void *)v4;
  uint64_t v6 = [a2 subpredicates];
  if (v6) {
    [v5 addObjectsFromArray:v6];
  }
LABEL_13:
  SEL v7 = -[NSCompoundPredicate initWithType:subpredicates:]( objc_alloc(&OBJC_CLASS___NSCompoundPredicate),  "initWithType:subpredicates:",  1LL,  v5);

  return v7;
}

NSCompoundPredicate *buildORPredicate(void *a1, void *a2)
{
  if ((objc_opt_isKindOfClass() & 1) != 0 && [a1 compoundPredicateType] == 2)
  {
    if ((objc_opt_isKindOfClass() & 1) == 0 || [a2 compoundPredicateType] != 2)
    {
      uint64_t v5 = (void *)objc_msgSend(objc_alloc(MEMORY[0x189603FA8]), "initWithArray:", objc_msgSend(a1, "subpredicates"));
      [v5 addObject:a2];
      goto LABEL_13;
    }

    uint64_t v4 = objc_msgSend(objc_alloc(MEMORY[0x189603FA8]), "initWithArray:", objc_msgSend(a1, "subpredicates"));
  }

  else
  {
    if ((objc_opt_isKindOfClass() & 1) == 0 || [a2 compoundPredicateType] != 2)
    {
      uint64_t v5 = (void *)objc_msgSend(objc_alloc(MEMORY[0x189603F18]), "initWithObjects:", a1, a2, 0);
      goto LABEL_13;
    }

    uint64_t v4 = objc_msgSend(objc_alloc(MEMORY[0x189603FA8]), "initWithObjects:", a1, 0);
  }

  uint64_t v5 = (void *)v4;
  uint64_t v6 = [a2 subpredicates];
  if (v6) {
    [v5 addObjectsFromArray:v6];
  }
LABEL_13:
  SEL v7 = -[NSCompoundPredicate initWithType:subpredicates:]( objc_alloc(&OBJC_CLASS___NSCompoundPredicate),  "initWithType:subpredicates:",  2LL,  v5);

  return v7;
}

NSCompoundPredicate *invertPredicate(void *a1)
{
  if ((objc_opt_isKindOfClass() & 1) != 0 && ![a1 compoundPredicateType]) {
    return (NSCompoundPredicate *)(id)objc_msgSend( (id)objc_msgSend(a1, "subpredicates"),  "objectAtIndex:",  0);
  }
  unint64_t v2 = (void *)objc_msgSend(objc_alloc(MEMORY[0x189603F18]), "initWithObjects:", a1, 0);
  unint64_t v3 = -[NSCompoundPredicate initWithType:subpredicates:]( objc_alloc(&OBJC_CLASS___NSCompoundPredicate),  "initWithType:subpredicates:",  0LL,  v2);

  return v3;
}

id CopyBasicOperatorAddOptions(void *a1, void *a2)
{
  unint64_t v2 = a2;
  if (a2)
  {
    unint64_t v4 = [a2 rangeOfString:@"c" options:1] != 0x7FFFFFFFFFFFFFFFLL;
    if ([v2 rangeOfString:@"d" options:1] != 0x7FFFFFFFFFFFFFFFLL) {
      v4 |= 2uLL;
    }
    if ([v2 rangeOfString:@"n" options:1] != 0x7FFFFFFFFFFFFFFFLL) {
      v4 |= 4uLL;
    }
    if ([v2 rangeOfString:@"l" options:1] == 0x7FFFFFFFFFFFFFFFLL) {
      unint64_t v2 = (void *)v4;
    }
    else {
      unint64_t v2 = (void *)(v4 | 8);
    }
  }

  return +[NSPredicateOperator _newOperatorWithType:modifier:options:]( NSPredicateOperator,  "_newOperatorWithType:modifier:options:",  [a1 operatorType],  objc_msgSend(a1, "modifier"),  v2);
}

NSCustomPredicateOperator *PredicateOperatorForCustomSelector(uint64_t a1)
{
  unint64_t v1 = -[NSString initWithString:](objc_alloc(&OBJC_CLASS___NSMutableString), "initWithString:", a1);
  -[NSMutableString appendString:](v1, "appendString:", @":");
  SEL v2 = NSSelectorFromString(&v1->super);

  return -[NSCustomPredicateOperator initWithCustomSelector:modifier:]( objc_alloc(&OBJC_CLASS___NSCustomPredicateOperator),  "initWithCustomSelector:modifier:",  v2,  0LL);
}

NSConstantValueExpression *expressionByReplacingArray(void *a1)
{
  if ([a1 expressionType]) {
    return (NSConstantValueExpression *)a1;
  }
  uint64_t v2 = [a1 constantValue];
  unint64_t v3 = -[NSConstantValueExpression initWithObject:]( objc_alloc(&OBJC_CLASS___NSConstantValueExpression),  "initWithObject:",  v2);

  return v3;
}

uint64_t CreateSetExpression(void *a1, uint64_t a2, void *a3)
{
  uint64_t v5 = expressionByReplacingArray(a1);
  uint64_t v6 = expressionByReplacingArray(a3);
  else {
    SEL v7 = -[NSSetExpression initWithType:leftExpression:rightExpression:]( objc_alloc(&OBJC_CLASS___NSSetExpression),  "initWithType:leftExpression:rightExpression:",  a2,  v5,  v6);
  }

  if (v7) {
    return (uint64_t)v7;
  }
  objc_exception_throw((id)[MEMORY[0x189603F70] exceptionWithName:*MEMORY[0x189603A58], +[NSString stringWithFormat:]( NSString, "stringWithFormat:", @"Unknown expression type %ld", a2), 0 reason userInfo]);
  return CreateFetchExpression();
}

NSConcreteObservationBuffer *CreateFetchExpression(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = objc_lookUpClass("NSFetchRequestExpression");
  if (v6) {
    return (NSConcreteObservationBuffer *)[[v6 alloc] initForFetch:a1 context:a2 countOnly:a3 != 0];
  }
  objc_exception_throw((id)[MEMORY[0x189603F70] exceptionWithName:*MEMORY[0x189603A60] reason:@"Can't find class for NSFetchRequestExpression" userInfo:0]);
  return -[NSConcreteObservationBuffer initWithMaximumObjectCount:fullPolicy:outputQueue:](v8, v9, v10, v11, v12);
}

__objc2_class **_popFront(uint64_t a1)
{
  if (!*(_DWORD *)(a1 + 64)) {
    return &_emptyValue;
  }
  pthread_mutex_lock((pthread_mutex_t *)(a1 + 72));
  id v2 = (id)[*(id *)(a1 + 136) objectAtIndex:0];
  [*(id *)(a1 + 136) removeObjectAtIndex:0];
  int updated = updateState(a1);
  pthread_mutex_unlock((pthread_mutex_t *)(a1 + 72));
  if (updated != 2)
  {
    if (updated != 1 || ![(id)a1 bufferFullHandler]) {
      return (__objc2_class **)v2;
    }
    goto LABEL_8;
  }

  if ([(id)a1 bufferFullHandler]) {
LABEL_8:
  }
    (*(void (**)(void))([(id)a1 bufferFullHandler] + 16))();
  return (__objc2_class **)v2;
}

void __Block_byref_object_copy__19(uint64_t a1, uint64_t a2)
{
}

void __Block_byref_object_dispose__19(uint64_t a1)
{
}

uint64_t updateState(uint64_t a1)
{
  int v2 = *(_DWORD *)(a1 + 64);
  if (v2 == 2)
  {
    uint64_t v5 = [*(id *)(a1 + 136) count];
    if (v5)
    {
      unint64_t v6 = v5;
      if (_pressureSensitiveMaxCount_onceToken != -1) {
        dispatch_once(&_pressureSensitiveMaxCount_onceToken, &__block_literal_global_58);
      }
      [(id)a1 isMemoryPressureSensitive];
      if (v6 >= *(void *)(a1 + 144)) {
        goto LABEL_26;
      }
      *(_DWORD *)(a1 + 64) = 1;
      dispatch_resume(*(dispatch_object_t *)(a1 + 40));
    }

    else
    {
      *(_DWORD *)(a1 + 64) = 0;
      dispatch_resume(*(dispatch_object_t *)(a1 + 40));
    }

    return 2LL;
  }

  if (v2 != 1)
  {
    if (v2) {
      return 0LL;
    }
    uint64_t result = [*(id *)(a1 + 136) count];
    if (!result) {
      return result;
    }
    unint64_t v4 = result;
    if (_pressureSensitiveMaxCount_onceToken != -1) {
      dispatch_once(&_pressureSensitiveMaxCount_onceToken, &__block_literal_global_58);
    }
    [(id)a1 isMemoryPressureSensitive];
    if (v4 >= *(void *)(a1 + 144))
    {
      *(_DWORD *)(a1 + 64) = 2;
      dispatch_suspend(*(dispatch_object_t *)(a1 + 40));
    }

    else
    {
      *(_DWORD *)(a1 + 64) = 1;
    }

uint64_t sub_183655350()
{
  return 0LL;
}

uint64_t sub_1836553C8()
{
  return 0LL;
}

uint64_t sub_183655440()
{
  return 0LL;
}

void ___pressureSensitiveMaxCount_block_invoke()
{
  pressureSource = (uint64_t)dispatch_source_create(MEMORY[0x1895F8B50], 0LL, 2uLL, 0LL);
  dispatch_source_set_event_handler((dispatch_source_t)pressureSource, &__block_literal_global_63);
  dispatch_resume((dispatch_object_t)pressureSource);
}

void __setupPressureTracking_block_invoke()
{
  unint64_t mask = dispatch_source_get_mask((dispatch_source_t)pressureSource);
  if ((mask & 1) == 0) {
    NSLog((NSString *)@"Unknown memory pressure status %lu", mask);
  }
}

uint64_t sub_18365A590()
{
  return 0LL;
}

uint64_t sub_18365A5F8()
{
  return 0LL;
}

uint64_t sub_18365A634()
{
  return 0LL;
}

uint64_t sub_18365A66C()
{
  return 0LL;
}

void sub_18365A988(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
}

uint64_t FormatterCacheKeyCopy(uint64_t a1, void *a2)
{
  return [a2 copy];
}

uint64_t FormatterCacheKeyEqual(void *a1, void *a2)
{
  uint64_t result = [a1 isEqual:a2];
  if ((_DWORD)result)
  {
    uint64_t result = objc_msgSend((id)objc_msgSend(a1, "decimalSeparator"), "isEqual:", objc_msgSend(a2, "decimalSeparator"));
    if ((_DWORD)result) {
      return objc_msgSend((id)objc_msgSend(a1, "groupingSeparator"), "isEqual:", objc_msgSend(a2, "groupingSeparator"));
    }
  }

  return result;
}

uint64_t FormatterCacheKeyHash(void *a1)
{
  uint64_t v2 = [a1 hash];
  uint64_t v3 = objc_msgSend((id)objc_msgSend(a1, "decimalSeparator"), "hash") ^ v2;
  return v3 ^ objc_msgSend((id)objc_msgSend(a1, "groupingSeparator"), "hash");
}

uint64_t _qfqp2lex(double *a1)
{
  *(void *)&v90[1] = *MEMORY[0x1895F89C0];
  uint64_t v2 = &_qfqp2text;
  uint64_t v3 = &off_18C497000;
  unint64_t v4 = &metadata instantiation cache for protocol conformance descriptor for _TimeZoneICU;
  uint64_t v5 = (const char **)&_qfqp2text;
  if ((_MergedGlobals_135 & 1) == 0)
  {
    _MergedGlobals_135 = 1;
    if (!dword_18C496D9C) {
      dword_18C496D9C = 1;
    }
    if (!_qfqp2in) {
      _qfqp2in = *MEMORY[0x1895F89D8];
    }
    if (!qword_18C496DA8) {
      qword_18C496DA8 = *MEMORY[0x1895F89E0];
    }
    if (!yy_buffer_stack || (uint64_t v6 = *(void *)yy_buffer_stack) == 0)
    {
      _qfqp2ensure_buffer_stack();
      unint64_t v7 = (FILE *)_qfqp2in;
      int v8 = malloc(0x48uLL);
      if (!v8 || (uint64_t v6 = (uint64_t)v8, v8[3] = 0x4000LL, v9 = malloc(0x4002uLL), (*(void *)(v6 + 8) = v9) == 0LL))
      {
        uint64_t v78 = (FILE *)*MEMORY[0x1895F89D0];
        uint64_t v79 = "out of dynamic memory in _qfqp2_create_buffer()";
        goto LABEL_229;
      }

      *(_DWORD *)(v6 + 40) = 1;
      _qfqp2_init_buffer(v6, v7);
      *(void *)yy_buffer_stack = v6;
      uint64_t v5 = (const char **)&_qfqp2text;
      uint64_t v2 = &_qfqp2text;
      uint64_t v3 = &off_18C497000;
    }

    yy_n_chars = *(void *)(v6 + 32);
    unint64_t v10 = *(_BYTE **)(v6 + 16);
    v2[1] = (uint64_t)v10;
    _qfqp2text = (uint64_t)v10;
    _qfqp2in = *(void *)v6;
    *((_BYTE *)v3 + 400_Block_object_dispose(va, 8) = *v10;
    unint64_t v4 = &metadata instantiation cache for protocol conformance descriptor for _TimeZoneICU;
  }

  uint64_t v85 = v90;
  uint64_t v86 = 0LL;
LABEL_15:
  uint64_t v11 = v2[1];
  *(_BYTE *)uint64_t v11 = *((_BYTE *)v3 + 4008);
  LODWORD(v12) = v4[871];
  uint64_t v87 = v11;
  do
  {
LABEL_16:
    uint64_t v13 = yy_ec[4 * *(unsigned __int8 *)v11];
    if (yy_accept[(int)v12])
    {
      dword_18C496DA0 = v12;
      qword_18C496DB0 = v11;
    }

    uint64_t v14 = (int)v12;
    int v15 = yy_base[(int)v12] + v13;
    if (yy_chk[v15] != (_DWORD)v12)
    {
      do
      {
        uint64_t v14 = yy_def[v14];
        int v15 = yy_base[v14] + v13;
      }

      while (yy_chk[v15] != (_DWORD)v14);
    }

    uint64_t v12 = (int)yy_nxt[v15];
    ++v11;
  }

  while (yy_base[v12] != 1346);
  signed int previous_state = yy_nxt[v15];
  while (2)
  {
    int v17 = yy_accept[previous_state];
    if (!v17)
    {
      uint64_t v11 = qword_18C496DB0;
      int v17 = yy_accept[dword_18C496DA0];
    }

    *uint64_t v5 = (const char *)v87;
    *((_BYTE *)v3 + 400_Block_object_dispose(va, 8) = *(_BYTE *)v11;
    *(_BYTE *)uint64_t v11 = 0;
    v2[1] = v11;
LABEL_27:
    switch(v17)
    {
      case 0:
        *(_BYTE *)uint64_t v11 = *((_BYTE *)v3 + 4008);
        uint64_t v11 = qword_18C496DB0;
        signed int previous_state = dword_18C496DA0;
        continue;
      case 1:
      case 2:
        goto LABEL_15;
      case 3:
        return 332LL;
      case 4:
        return 331LL;
      case 5:
        return 334LL;
      case 6:
        return 336LL;
      case 7:
        return 333LL;
      case 8:
        return 301LL;
      case 9:
        return 302LL;
      case 10:
        return 337LL;
      case 11:
        return 303LL;
      case 12:
        return 304LL;
      case 13:
        return 305LL;
      case 14:
        return 306LL;
      case 15:
        return 307LL;
      case 16:
        return 308LL;
      case 17:
        return 299LL;
      case 18:
        return 335LL;
      case 19:
        return 300LL;
      case 20:
        return 309LL;
      case 21:
        return 322LL;
      case 22:
      case 23:
        return 329LL;
      case 24:
      case 25:
        return 326LL;
      case 26:
      case 27:
        return 325LL;
      case 28:
      case 29:
        return 330LL;
      case 30:
        return 328LL;
      case 31:
        return 327LL;
      case 32:
        return 310LL;
      case 33:
        return 311LL;
      case 34:
        return 312LL;
      case 35:
        return 313LL;
      case 36:
        return 314LL;
      case 37:
        return 315LL;
      case 38:
        return 316LL;
      case 39:
        return 317LL;
      case 40:
        return 318LL;
      case 41:
        return 319LL;
      case 42:
        return 320LL;
      case 43:
      case 44:
        return 258LL;
      case 45:
      case 46:
        return 259LL;
      case 47:
        return 260LL;
      case 48:
      case 49:
        return 261LL;
      case 50:
        return 262LL;
      case 51:
        return 263LL;
      case 52:
        return 265LL;
      case 53:
        return 264LL;
      case 54:
        return 266LL;
      case 55:
        return 267LL;
      case 56:
        return 269LL;
      case 57:
        return 270LL;
      case 58:
        return 272LL;
      case 59:
        return 273LL;
      case 60:
      case 61:
        return 275LL;
      case 62:
        return 276LL;
      case 63:
        return 283LL;
      case 64:
        return 284LL;
      case 65:
      case 66:
        return 277LL;
      case 67:
      case 68:
        return 278LL;
      case 69:
        return 279LL;
      case 70:
        return 280LL;
      case 71:
        return 281LL;
      case 72:
        return 271LL;
      case 73:
        return 274LL;
      case 74:
        return 282LL;
      case 75:
        return 285LL;
      case 76:
        return 286LL;
      case 77:
        return 287LL;
      case 78:
        return 289LL;
      case 79:
        return 288LL;
      case 80:
        return 290LL;
      case 81:
        return 291LL;
      case 82:
        return 324LL;
      case 83:
        return 323LL;
      case 84:
        return 268LL;
      case 85:
        int v74 = *v5;
        uint64_t v75 = (uint64_t *)a1;
        int v76 = 10;
        return convertTextToInteger(v74, v75, v76);
      case 86:
        return convertTextToDecimal(*v5, a1);
      case 87:
        int v74 = *v5;
        uint64_t v75 = (uint64_t *)a1;
        int v76 = 16;
        return convertTextToInteger(v74, v75, v76);
      case 88:
        int v74 = *v5;
        uint64_t v75 = (uint64_t *)a1;
        int v76 = 8;
        return convertTextToInteger(v74, v75, v76);
      case 89:
        int v74 = *v5;
        uint64_t v75 = (uint64_t *)a1;
        int v76 = 2;
        return convertTextToInteger(v74, v75, v76);
      case 90:
        id v77 = *v5;
        goto LABEL_214;
      case 91:
        id v77 = *v5 + 1;
LABEL_214:
        *(void *)a1 = strdup(v77);
        return 295LL;
      case 92:
        int v58 = 3;
        goto LABEL_103;
      case 93:
        int v58 = 5;
        goto LABEL_103;
      case 94:
        int v58 = 7;
LABEL_103:
        v4[871] = v58;
        uint64_t v86 = v89;
        goto LABEL_15;
      case 95:
        v4[871] = 1;
        *uint64_t v86 = 0;
        *(void *)a1 = strdup(v89);
        return 296LL;
      case 96:
        v4[871] = 1;
        *uint64_t v86 = 0;
        *(void *)a1 = strdup(v89);
        return 297LL;
      case 97:
        v4[871] = 1;
        *uint64_t v86 = 0;
        *(void *)a1 = strdup(v89);
        return 298LL;
      case 98:
      case 102:
      case 118:
      case 119:
      case 120:
        goto LABEL_133;
      case 99:
        uint64_t v59 = *v5 + 1;
        int v60 = 8;
        goto LABEL_106;
      case 100:
        uint64_t v59 = *v5 + 2;
        int v60 = 16;
LABEL_106:
        char v61 = strtoul_l(v59, 0LL, v60, 0LL);
        __int16 v62 = v86;
        if (v86 + 1 > v85) {
          goto LABEL_133;
        }
        *uint64_t v86 = v61;
        uint64_t v86 = v62 + 1;
        goto LABEL_108;
      case 101:
        unint64_t v84 = a1;
        unint64_t v63 = -[NSString initWithFormat:]( objc_alloc(&OBJC_CLASS___NSString),  "initWithFormat:",  @"%C",  (unsigned __int16)strtoul_l(*v5 + 2, 0LL, 16, 0LL));
        uint64_t v64 = -[NSString lengthOfBytesUsingEncoding:](v63, "lengthOfBytesUsingEncoding:", 4LL);
        *(void *)&double v65 = MEMORY[0x1895F8858](v64).n128_u64[0];
        CFStringRef v67 = (char *)&v80 - v66;
        unint64_t v88 = 0LL;
        -[NSString getBytes:maxLength:usedLength:encoding:options:range:remainingRange:]( v63,  "getBytes:maxLength:usedLength:encoding:options:range:remainingRange:",  (char *)&v80 - v66,  v64,  &v88,  4LL,  0LL,  0LL,  -[NSString length](v63, "length", v65),  0LL);

        if (&v86[v88] <= v85)
        {
          if (v88)
          {
            unint64_t v68 = 0LL;
            a1 = v84;
            uint64_t v2 = &_qfqp2text;
            uint64_t v3 = &off_18C497000;
            __int128 v69 = v86;
            do
            {
              v69[v68] = v67[v68];
              ++v68;
            }

            while (v88 > v68);
            uint64_t v86 = &v69[v68];
            unint64_t v4 = (_DWORD *)&metadata instantiation cache for protocol conformance descriptor for _TimeZoneICU;
          }

          else
          {
            a1 = v84;
            unint64_t v4 = (_DWORD *)&metadata instantiation cache for protocol conformance descriptor for _TimeZoneICU;
            uint64_t v2 = &_qfqp2text;
            uint64_t v3 = &off_18C497000;
          }

          uint64_t v5 = (const char **)&_qfqp2text;
          goto LABEL_15;
        }

        dword_18C496D9C = 1;
        return 321LL;
      case 103:
        __int128 v70 = v86;
        id v71 = v86 + 1;
        if (v86 + 1 > v85) {
          goto LABEL_133;
        }
        char v72 = 10;
        goto LABEL_130;
      case 104:
        __int128 v70 = v86;
        id v71 = v86 + 1;
        if (v86 + 1 > v85) {
          goto LABEL_133;
        }
        char v72 = 9;
        goto LABEL_130;
      case 105:
        __int128 v70 = v86;
        id v71 = v86 + 1;
        if (v86 + 1 > v85) {
          goto LABEL_133;
        }
        char v72 = 13;
        goto LABEL_130;
      case 106:
        __int128 v70 = v86;
        id v71 = v86 + 1;
        if (v86 + 1 > v85) {
          goto LABEL_133;
        }
        char v72 = 8;
        goto LABEL_130;
      case 107:
        __int128 v70 = v86;
        id v71 = v86 + 1;
        if (v86 + 1 > v85) {
          goto LABEL_133;
        }
        char v72 = 12;
        goto LABEL_130;
      case 108:
        __int128 v70 = v86;
        id v71 = v86 + 1;
        if (v86 + 1 > v85) {
          goto LABEL_133;
        }
        char v72 = 7;
        goto LABEL_130;
      case 109:
        __int128 v70 = v86;
        id v71 = v86 + 1;
        if (v86 + 1 > v85) {
          goto LABEL_133;
        }
        char v72 = 11;
        goto LABEL_130;
      case 110:
        __int128 v70 = v86;
        id v71 = v86 + 1;
        if (v86 + 1 > v85) {
          goto LABEL_133;
        }
        char v72 = (*v5)[1];
LABEL_130:
        *__int128 v70 = v72;
        uint64_t v86 = v71;
        goto LABEL_15;
      case 111:
      case 112:
      case 113:
        CFRange v55 = *v5;
        size_t v56 = strlen(v55);
        CFRange v57 = &v86[(int)v56];
        if (v57 > v85)
        {
LABEL_133:
          v4[871] = 1;
          return 321LL;
        }

        strlcpy(v86, v55, (uint64_t)((v56 << 32) + 0x100000000LL) >> 32);
        uint64_t v86 = v57;
        uint64_t v5 = (const char **)&_qfqp2text;
LABEL_108:
        uint64_t v2 = &_qfqp2text;
        uint64_t v3 = &off_18C497000;
        goto LABEL_15;
      case 114:
        v4[871] = 1;
        return **v5;
      case 115:
        yy_fatal_error("flex scanner jammed");
      case 116:
        double v18 = *v5;
        *(_BYTE *)uint64_t v11 = *((_BYTE *)v3 + 4008);
        uint64_t v19 = yy_buffer_stack;
        uint64_t v20 = *(void *)yy_buffer_stack;
        int v21 = *(_DWORD *)(*(void *)yy_buffer_stack + 64LL);
        uint64_t v82 = v18;
        if (v21)
        {
          uint64_t v22 = yy_n_chars;
        }

        else
        {
          uint64_t v22 = *(void *)(v20 + 32);
          yy_n_chars = v22;
          *(void *)uint64_t v20 = _qfqp2in;
          uint64_t v20 = *(void *)v19;
          *(_DWORD *)(*(void *)v19 + 64LL) = 1;
        }

        unint64_t v23 = v2[1];
        CFIndex v24 = *(_BYTE **)(v20 + 8);
        if (v23 <= (unint64_t)&v24[v22])
        {
          uint64_t v5 = (const char **)&_qfqp2text;
          uint64_t v87 = _qfqp2text;
          uint64_t v11 = _qfqp2text + ~(_DWORD)v82 + (int)v11;
          v2[1] = v11;
          signed int previous_state = yy_get_previous_state();
          if (yy_accept[previous_state])
          {
            dword_18C496DA0 = previous_state;
            qword_18C496DB0 = v11;
          }

          uint64_t v52 = previous_state;
          uint64_t v53 = (int)yy_base[previous_state] + 1LL;
          unint64_t v4 = (_DWORD *)&metadata instantiation cache for protocol conformance descriptor for _TimeZoneICU;
          uint64_t v2 = &_qfqp2text;
          uint64_t v3 = &off_18C497000;
          if (yy_chk[v53] != previous_state)
          {
            do
            {
              uint64_t v52 = yy_def[v52];
              uint64_t v53 = (int)yy_base[v52] + 1LL;
            }

            while (yy_chk[v53] != (_DWORD)v52);
          }

          LODWORD(v12) = yy_nxt[v53];
          if (!(_DWORD)v12 || (_DWORD)v12 == 303) {
            continue;
          }
          yy_c_buf_p = ++v11;
          goto LABEL_16;
        }

        unint64_t v84 = a1;
        if (v23 > (unint64_t)&v24[v22 + 1])
        {
          uint64_t v78 = (FILE *)*MEMORY[0x1895F89D0];
          uint64_t v79 = "fatal flex scanner internal error--end of buffer missed";
          goto LABEL_229;
        }

        unint64_t v25 = (char *)_qfqp2text;
        unint64_t v26 = v23 - _qfqp2text;
        if (!*(_DWORD *)(v20 + 60))
        {
          unint64_t v4 = (_DWORD *)&metadata instantiation cache for protocol conformance descriptor for _TimeZoneICU;
          uint64_t v5 = (const char **)&_qfqp2text;
          if (v26 != 1) {
            goto LABEL_88;
          }
          goto LABEL_82;
        }

        uint64_t v27 = (v26 - 1);
        if ((int)v26 >= 2)
        {
          do
          {
            char v28 = *v25++;
            *v24++ = v28;
            LODWORD(v27) = v27 - 1;
          }

          while ((_DWORD)v27);
          uint64_t v20 = *(void *)v19;
          uint64_t v27 = (v26 - 1);
        }

        if (*(_DWORD *)(v20 + 64) == 2)
        {
          yy_n_chars = 0LL;
          goto LABEL_39;
        }

        uint64_t v81 = v27;
        uint64_t v83 = (int)v27;
        int v31 = ~(_DWORD)v27;
        unint64_t v32 = *(void *)(v20 + 24);
        int v33 = v32 + ~(_DWORD)v27;
        if (v33 <= 0)
        {
          while (*(_DWORD *)(v20 + 40))
          {
            CFIndex v34 = *(void **)(v20 + 8);
            uint64_t v35 = 2 * v32;
            uint64_t v36 = v32 + (v32 >> 3);
            *(void *)(v20 + 24) = v36;
            uint64_t v37 = realloc(v34, v36 + 2);
            *(void *)(v20 + _Block_object_dispose(va, 8) = v37;
            if (!v37) {
              goto LABEL_223;
            }
            unint64_t v23 = (unint64_t)v37 + (int)v23 - (int)v34;
            yy_c_buf_p = v23;
            uint64_t v20 = *(void *)yy_buffer_stack;
            unint64_t v32 = *(void *)(*(void *)yy_buffer_stack + 24LL);
            int v33 = v32 + v31;
          }

          *(void *)(v20 + _Block_object_dispose(va, 8) = 0LL;
LABEL_223:
          uint64_t v78 = (FILE *)*MEMORY[0x1895F89D0];
          uint64_t v79 = "fatal error - scanner input buffer overflow";
LABEL_229:
          fprintf(v78, "%s\n", v79);
          exit(2);
        }

char *_qfqp2ensure_buffer_stack()
{
  uint64_t result = (char *)yy_buffer_stack;
  if (!yy_buffer_stack)
  {
    uint64_t result = (char *)malloc(8uLL);
    yy_buffer_stack = (uint64_t)result;
    if (result)
    {
      *(void *)uint64_t result = 0LL;
      uint64_t v1 = 1LL;
      goto LABEL_7;
    }

uint64_t convertTextToInteger(const char *a1, uint64_t *a2, int a3)
{
  v13[1] = *(char **)MEMORY[0x1895F89C0];
  v13[0] = 0LL;
  *__error() = 0;
  uint64_t v6 = strtoll_l(a1, v13, a3, 0LL);
  if (*__error() != 34)
  {
    if (v13[0] && v13[0] != a1 && !*v13[0])
    {
      *a2 = v6;
      return 292LL;
    }

    goto LABEL_14;
  }

  uint64_t v12 = 0LL;
  *__error() = 0;
  unint64_t v7 = strtoull_l(a1, &v12, a3, 0LL);
  BOOL v9 = *__error() == 34 || v12 == 0LL || v12 == a1;
  if (v9 || *v12)
  {
LABEL_14:
    unint64_t v10 = -[NSString initWithCString:](objc_alloc(&OBJC_CLASS___NSString), "initWithCString:", a1);
    *a2 = (uint64_t)-[NSDecimalNumber initWithString:](objc_alloc(&OBJC_CLASS___NSDecimalNumber), "initWithString:", v10);

    return 294LL;
  }

  *a2 = (uint64_t)-[NSNumber initWithUnsignedLongLong:]( objc_alloc(&OBJC_CLASS___NSNumber),  "initWithUnsignedLongLong:",  v7);
  return 294LL;
}

uint64_t convertTextToDecimal(const char *a1, double *a2)
{
  v8[1] = *(char **)MEMORY[0x1895F89C0];
  v8[0] = 0LL;
  double v4 = strtod_l(a1, v8, 0LL);
  if (v8[0]) {
    BOOL v5 = v8[0] == a1;
  }
  else {
    BOOL v5 = 1;
  }
  if (v5 || *v8[0])
  {
    uint64_t v6 = -[NSString initWithCString:](objc_alloc(&OBJC_CLASS___NSString), "initWithCString:", a1);
    *(void *)a2 = -[NSDecimalNumber initWithString:](objc_alloc(&OBJC_CLASS___NSDecimalNumber), "initWithString:", v6);

    return 294LL;
  }

  else
  {
    *a2 = v4;
    return 293LL;
  }

void yy_fatal_error(const char *a1)
{
}

uint64_t yy_get_previous_state()
{
  uint64_t v0 = (_BYTE *)_qfqp2text;
  uint64_t result = dword_18C496D9C;
  if (_qfqp2text < (unint64_t)yy_c_buf_p)
  {
    do
    {
      if (*v0) {
        unsigned int v2 = yy_ec[4 * *v0];
      }
      else {
        unsigned int v2 = 1;
      }
      if (yy_accept[(int)result])
      {
        dword_18C496DA0 = result;
        qword_18C496DB0 = (uint64_t)v0;
      }

      uint64_t v3 = (int)result;
      int v4 = yy_base[(int)result] + v2;
      if (yy_chk[v4] != (_DWORD)result)
      {
        uint64_t v5 = v2;
        do
        {
          uint64_t v3 = yy_def[v3];
          int v4 = yy_base[v3] + v5;
        }

        while (yy_chk[v4] != (_DWORD)v3);
      }

      ++v0;
      uint64_t result = yy_nxt[v4];
    }

    while (v0 != (_BYTE *)yy_c_buf_p);
  }

  return result;
}

void _qfqp2_delete_buffer(void **a1)
{
  if (a1)
  {
    if (yy_buffer_stack) {
      unsigned int v2 = *(void ***)yy_buffer_stack;
    }
    else {
      unsigned int v2 = 0LL;
    }
    if (v2 == a1) {
      *(void *)yy_buffer_stack = 0LL;
    }
    if (*((_DWORD *)a1 + 10)) {
      free(a1[1]);
    }
    free(a1);
  }

uint64_t *_qfqp2_scan_bytes(const void *a1, int a2)
{
  size_t v4 = a2 + 2;
  uint64_t v5 = (char *)malloc(v4);
  if (!v5)
  {
    uint64_t v14 = (FILE *)*MEMORY[0x1895F89D0];
    int v15 = "out of dynamic memory in _qfqp2_scan_bytes()";
    goto LABEL_16;
  }

  uint64_t v6 = v5;
  if (a2 < 1)
  {
    *(_WORD *)&v5[a2] = 0;
    if (a2 > 0xFFFFFFFD)
    {
      uint64_t v14 = (FILE *)*MEMORY[0x1895F89D0];
      int v15 = "bad buffer in _qfqp2_scan_bytes()";
LABEL_16:
      fprintf(v14, "%s\n", v15);
      exit(2);
    }
  }

  else
  {
    memcpy(v5, a1, a2);
    *(_WORD *)&v6[a2] = 0;
  }

  unint64_t v7 = (uint64_t *)malloc(0x48uLL);
  if (!v7)
  {
    uint64_t v14 = (FILE *)*MEMORY[0x1895F89D0];
    int v15 = "out of dynamic memory in _qfqp2_scan_buffer()";
    goto LABEL_16;
  }

  int v8 = v7;
  uint64_t v9 = v4 - 2;
  void v7[2] = (uint64_t)v6;
  v7[3] = v9;
  uint64_t *v7 = 0LL;
  v7[1] = (uint64_t)v6;
  void v7[4] = v9;
  v7[5] = 0LL;
  *((_DWORD *)v7 + 12) = 1;
  *(uint64_t *)((char *)v7 + 60) = 0LL;
  _qfqp2ensure_buffer_stack();
  uint64_t v10 = yy_buffer_stack;
  if (!yy_buffer_stack)
  {
    uint64_t v11 = 0LL;
LABEL_11:
    *(void *)uint64_t v10 = v8;
    yy_n_chars = v9;
    yy_c_buf_p = (uint64_t)v6;
    _qfqp2text = (uint64_t)v6;
    _qfqp2in = v11;
    yy_hold_char = *v6;
    goto LABEL_12;
  }

  uint64_t v11 = *(void *)yy_buffer_stack;
  if (*(uint64_t **)yy_buffer_stack != v8)
  {
    if (v11)
    {
      uint64_t v12 = yy_c_buf_p;
      *(_BYTE *)yy_c_buf_p = yy_hold_char;
      *(void *)(*(void *)v10 + 16LL) = v12;
      *(void *)(*(void *)v10 + 32LL) = yy_n_chars;
      uint64_t v9 = v8[4];
      uint64_t v6 = (char *)v8[2];
      uint64_t v11 = *v8;
    }

    goto LABEL_11;
  }

int *_qfqp2_init_buffer(uint64_t a1, FILE *a2)
{
  int v4 = *__error();
  uint64_t v5 = yy_buffer_stack;
  if (a1)
  {
    *(void *)(a1 + 32) = 0LL;
    **(_BYTE **)(a1 + _Block_object_dispose(va, 8) = 0;
    *(_BYTE *)(*(void *)(a1 + 8) + 1LL) = 0;
    *(void *)(a1 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = *(void *)(a1 + 8);
    *(_DWORD *)(a1 + 4_Block_object_dispose(va, 8) = 1;
    *(_DWORD *)(a1 + 64) = 0;
    uint64_t v6 = v5 ? *(void *)v5 : 0LL;
    if (v6 == a1)
    {
      unint64_t v7 = *(uint64_t **)v5;
      yy_n_chars = *(void *)(*(void *)v5 + 32LL);
      yy_c_buf_p = v7[2];
      _qfqp2text = yy_c_buf_p;
      _qfqp2in = *v7;
      yy_hold_char = *(_BYTE *)yy_c_buf_p;
      *(void *)a1 = a2;
      *(_DWORD *)(a1 + 60) = 1;
      goto LABEL_9;
    }
  }

  *(void *)a1 = a2;
  *(_DWORD *)(a1 + 60) = 1;
  if (v5) {
LABEL_9:
  }
    uint64_t v5 = *(void *)v5;
  if (v5 != a1) {
    *(void *)(a1 + 52) = 1LL;
  }
  if (a2)
  {
    int v8 = fileno(a2);
    BOOL v9 = isatty(v8) > 0;
  }

  else
  {
    BOOL v9 = 0;
  }

  *(_DWORD *)(a1 + 44) = v9;
  uint64_t result = __error();
  *uint64_t result = v4;
  return result;
}

uint64_t *_qfqp2_performParsing(void *a1, void *a2, void *a3)
{
  uint64_t v80 = *MEMORY[0x1895F89C0];
  if ((_qfqp2_InitializedGlobals & 1) == 0) {
    _qfqp2_InitializedGlobalData();
  }
  if (!a1) {
    return 0LL;
  }
  uint64_t v6 = (const char *)[a1 UTF8String];
  int v7 = strlen(v6);
  uint64_t result = _qfqp2_scan_bytes(v6, v7);
  if (!result) {
    return result;
  }
  id v71 = a1;
  char v72 = (void **)result;
  int v73 = 0;
  int v9 = 0u;
  v76[0] = 0LL;
  v76[1] = a1;
  uint64_t v10 = (void **)v78;
  uint64_t v11 = 200LL;
  v76[2] = a2;
  _OWORD v76[3] = a3;
  v76[4] = 0LL;
  int __src = v78;
  uint64_t v12 = v79;
  uint64_t v13 = v79;
  int v14 = -2;
  while (1)
  {
    *(_WORD *)uint64_t v12 = v9;
    if (&v13[2 * v11 - 2] <= v12)
    {
      if ((unint64_t)v11 >> 4 > 0x270
        || ((unint64_t)(2 * v11) >= 0x2710 ? (uint64_t v11 = 10000LL) : (v11 *= 2LL),
            (int v15 = (char *)malloc(10 * v11 + 7)) == 0LL))
      {
        int v66 = 2;
        goto LABEL_145;
      }

      int v16 = v15;
      uint64_t v17 = (v12 - v13) >> 1;
      uint64_t v18 = v17 + 1;
      memcpy(v15, v13, 2 * (v17 + 1));
      memcpy(&v16[(2 * v11 + 7) & 0xFFFFFFFFFFFFFFF8LL], __src, 8 * (v17 + 1));
      if (v13 != v79) {
        free(v13);
      }
      uint64_t v12 = &v16[2 * v17];
      uint64_t v10 = (void **)&v16[8 * v18 - 8 + ((2 * v11 + 7) & 0xFFFFFFFFFFFFFFF8LL)];
      if (v11 <= v18)
      {
        int v66 = 1;
        uint64_t v13 = v16;
        goto LABEL_145;
      }

      int __src = &v16[(2 * v11 + 7) & 0xFFFFFFFFFFFFFFF8LL];
      uint64_t v13 = v16;
    }

    int v19 = yypact[v9];
    if (v19 == -58) {
      goto LABEL_32;
    }
    if (v14 == -2) {
      int v14 = _qfqp2lex((double *)&v77);
    }
    if (v14 < 1)
    {
      int v20 = 0;
      int v14 = 0u;
    }

    else
    {
      int v20 = v14 > 0x153 ? 2 : yytranslate[v14];
    }

    uint64_t v21 = (v20 + v19);
    int v73 = v20;
    if (v21 > 0x32A || v20 != (__int16)yycheck[v21])
    {
LABEL_32:
      unsigned int v23 = yydefact[v9];
      if (!yydefact[v9]) {
        goto LABEL_140;
      }
      goto LABEL_33;
    }

    int v22 = yytable[v21];
    if (v22 <= 0) {
      break;
    }
    if ((_DWORD)v21 == 71)
    {
      int v66 = 0;
      goto LABEL_145;
    }

    if (v14) {
      int v14 = -2;
    }
    else {
      int v14 = 0;
    }
    v10[1] = v77;
    ++v10;
LABEL_120:
    v12 += 2;
    int v9 = v22;
  }

  if (yytable[v21])
  {
    unsigned int v23 = -v22;
LABEL_33:
    uint64_t v24 = yyr2[v23];
    switch(v23)
    {
      case 2u:
      case 3u:
        v76[0] = *v10;
        goto LABEL_34;
      case 4u:
      case 5u:
      case 6u:
      case 7u:
      case 8u:
      case 0xDu:
      case 0xEu:
      case 0xFu:
      case 0x13u:
      case 0x14u:
      case 0x15u:
      case 0x1Bu:
      case 0x1Cu:
      case 0x1Du:
      case 0x2Fu:
      case 0x30u:
      case 0x31u:
      case 0x32u:
      case 0x33u:
      case 0x34u:
      case 0x35u:
      case 0x36u:
      case 0x37u:
      case 0x38u:
      case 0x39u:
      case 0x3Au:
      case 0x43u:
      case 0x44u:
      case 0x45u:
      case 0x46u:
      case 0x47u:
      case 0x54u:
      case 0x55u:
      case 0x5Du:
      case 0x6Bu:
LABEL_34:
        uint64_t SetExpression = (uint64_t)*v10;
        break;
      case 9u:
        size_t v38 = (void *)objc_msgSend(objc_alloc(MEMORY[0x189603F18]), "initWithObjects:", *(v10 - 2), *v10, 0);
        FunctionExpression = -[NSCompoundPredicate initWithType:subpredicates:]( objc_alloc(&OBJC_CLASS___NSCompoundPredicate),  "initWithType:subpredicates:",  1LL,  v38);

        goto LABEL_114;
      case 0xAu:
        uint64_t SetExpression = objc_alloc_init(&OBJC_CLASS___NSTruePredicate);
        break;
      case 0xBu:
        uint64_t SetExpression = objc_alloc_init(&OBJC_CLASS___NSFalsePredicate);
        break;
      case 0xCu:
      case 0x2Eu:
        uint64_t SetExpression = (uint64_t)*(v10 - 1);
        break;
      case 0x10u:
        FunctionExpression = (NSComparisonPredicate *)buildANDPredicate(*(v10 - 2), *v10);

        goto LABEL_114;
      case 0x11u:
        FunctionExpression = (NSComparisonPredicate *)buildORPredicate(*(v10 - 2), *v10);

        goto LABEL_114;
      case 0x12u:
        uint64_t v42 = (NSConstantValueExpression *)invertPredicate(*v10);
        goto LABEL_113;
      case 0x16u:
        FunctionExpression = -[NSComparisonPredicate initWithPredicateOperator:leftExpression:rightExpression:]( objc_alloc(&OBJC_CLASS___NSComparisonPredicate),  "initWithPredicateOperator:leftExpression:rightExpression:",  *(v10 - 1),  *(v10 - 2),  *v10);

        goto LABEL_114;
      case 0x17u:
        int v58 = NSStringForLexedIdentifier(*(v10 - 2));
        id v59 = CopyBasicOperatorAddOptions(*(v10 - 4), v58);
        FunctionExpression = -[NSComparisonPredicate initWithPredicateOperator:leftExpression:rightExpression:]( objc_alloc(&OBJC_CLASS___NSComparisonPredicate),  "initWithPredicateOperator:leftExpression:rightExpression:",  v59,  *(v10 - 5),  *v10);

        goto LABEL_114;
      case 0x18u:
        int v41 = objc_alloc_init(&OBJC_CLASS___NSAnyKeyExpression);
        FunctionExpression = -[NSComparisonPredicate initWithPredicateOperator:leftExpression:rightExpression:]( objc_alloc(&OBJC_CLASS___NSComparisonPredicate),  "initWithPredicateOperator:leftExpression:rightExpression:",  *(v10 - 1),  v41,  *v10);

        goto LABEL_114;
      case 0x19u:
        int v43 = NSStringForLexedIdentifier(*(v10 - 2));
        int v44 = PredicateOperatorForCustomSelector((uint64_t)v43);
        FunctionExpression = -[NSComparisonPredicate initWithPredicateOperator:leftExpression:rightExpression:]( objc_alloc(&OBJC_CLASS___NSComparisonPredicate),  "initWithPredicateOperator:leftExpression:rightExpression:",  v44,  *(v10 - 3),  *v10);

        goto LABEL_114;
      case 0x1Au:
        size_t v46 = NSStringForLexedIdentifier(*(v10 - 2));
        uint64_t v47 = PredicateOperatorForCustomSelector((uint64_t)v46);
        uint64_t v48 = objc_alloc_init(&OBJC_CLASS___NSAnyKeyExpression);
        FunctionExpression = -[NSComparisonPredicate initWithPredicateOperator:leftExpression:rightExpression:]( objc_alloc(&OBJC_CLASS___NSComparisonPredicate),  "initWithPredicateOperator:leftExpression:rightExpression:",  v47,  v48,  *v10);

        goto LABEL_114;
      case 0x1Eu:
        FunctionExpression = HandleStringAggregatePredicate( (uint64_t)*(v10 - 2),  (uint64_t)*(v10 - 1),  0LL,  (uint64_t)*v10);

        goto LABEL_114;
      case 0x1Fu:
        uint64_t v64 = objc_alloc_init(&OBJC_CLASS___NSAnyKeyExpression);
        FunctionExpression = HandleStringAggregatePredicate((uint64_t)v64, (uint64_t)*(v10 - 1), 0LL, (uint64_t)*v10);

        goto LABEL_114;
      case 0x20u:
        CFRange v57 = NSStringForLexedIdentifier(*(v10 - 2));
        FunctionExpression = HandleStringAggregatePredicate( (uint64_t)*(v10 - 5),  (uint64_t)*(v10 - 4),  v57,  (uint64_t)*v10);

        goto LABEL_114;
      case 0x21u:
        uint64_t v39 = NSStringForLexedIdentifier(*(v10 - 2));
        uint64_t v40 = objc_alloc_init(&OBJC_CLASS___NSAnyKeyExpression);
        FunctionExpression = HandleStringAggregatePredicate((uint64_t)v40, (uint64_t)*(v10 - 4), v39, (uint64_t)*v10);

        goto LABEL_114;
      case 0x22u:
        uint64_t SetExpression = 7LL;
        break;
      case 0x23u:
        uint64_t SetExpression = 6LL;
        break;
      case 0x24u:
        uint64_t SetExpression = 10LL;
        break;
      case 0x25u:
        uint64_t SetExpression = 99LL;
        break;
      case 0x26u:
        uint64_t SetExpression = 8LL;
        break;
      case 0x27u:
        uint64_t SetExpression = 9LL;
        break;
      case 0x28u:
        uint64_t SetExpression = 1000LL;
        break;
      case 0x29u:
        FunctionExpression = HandleBetweenPredicate((uint64_t)*(v10 - 2), (uint64_t)*v10);

        goto LABEL_114;
      case 0x2Au:
      case 0x2Bu:
        uint64_t SetExpression = setOperatorModifier(*v10, 2LL);
        break;
      case 0x2Cu:
        uint64_t SetExpression = setOperatorModifier(*v10, 1LL);
        break;
      case 0x2Du:
        uint64_t v49 = (void *)objc_msgSend( objc_alloc(MEMORY[0x189603F18]),  "initWithObjects:",  setOperatorModifier(*v10, 2),  0);
        FunctionExpression = -[NSCompoundPredicate initWithType:subpredicates:]( objc_alloc(&OBJC_CLASS___NSCompoundPredicate),  "initWithType:subpredicates:",  0LL,  v49);

        goto LABEL_114;
      case 0x3Bu:
        uint64_t SetExpression = (uint64_t)PredicateOperatorForName(4LL, 0LL);
        break;
      case 0x3Cu:
        uint64_t SetExpression = (uint64_t)PredicateOperatorForName(5LL, 0LL);
        break;
      case 0x3Du:
        uint64_t SetExpression = (uint64_t)PredicateOperatorForName(0LL, 0LL);
        break;
      case 0x3Eu:
        uint64_t SetExpression = (uint64_t)PredicateOperatorForName(2LL, 0LL);
        break;
      case 0x3Fu:
        uint64_t SetExpression = (uint64_t)PredicateOperatorForName(1LL, 0LL);
        break;
      case 0x40u:
        uint64_t SetExpression = (uint64_t)PredicateOperatorForName(3LL, 0LL);
        break;
      case 0x41u:
        uint64_t SetExpression = -[NSUTIPredicateOperator initForVariant:]( objc_alloc(&OBJC_CLASS___NSUTIPredicateOperator),  "initForVariant:",  0LL);
        break;
      case 0x42u:
        uint64_t SetExpression = -[NSUTIPredicateOperator initForVariant:]( objc_alloc(&OBJC_CLASS___NSUTIPredicateOperator),  "initForVariant:",  1LL);
        break;
      case 0x48u:
      case 0x49u:
        uint64_t v42 = -[NSConstantValueExpression initWithObject:]( objc_alloc(&OBJC_CLASS___NSConstantValueExpression),  "initWithObject:",  *v10);
        goto LABEL_113;
      case 0x4Au:
        uint64_t SetExpression = -[NSConstantValueExpression initWithObject:]( objc_alloc(&OBJC_CLASS___NSConstantValueExpression),  "initWithObject:",  0LL);
        break;
      case 0x4Bu:
        unint64_t v32 = objc_alloc(&OBJC_CLASS___NSConstantValueExpression);
        uint64_t SetExpression = -[NSConstantValueExpression initWithObject:](v32, "initWithObject:", _MergedGlobals_136);
        break;
      case 0x4Cu:
        double v65 = objc_alloc(&OBJC_CLASS___NSConstantValueExpression);
        uint64_t SetExpression = -[NSConstantValueExpression initWithObject:](v65, "initWithObject:", qword_18C496DC0);
        break;
      case 0x4Du:
        uint64_t SetExpression = objc_alloc_init(&OBJC_CLASS___NSSelfExpression);
        break;
      case 0x4Eu:
        uint64_t SetExpression = -[NSSymbolicExpression initWithString:]( objc_alloc(&OBJC_CLASS___NSSymbolicExpression),  "initWithString:",  @"FIRST");
        break;
      case 0x4Fu:
        uint64_t SetExpression = -[NSSymbolicExpression initWithString:]( objc_alloc(&OBJC_CLASS___NSSymbolicExpression),  "initWithString:",  @"LAST");
        break;
      case 0x50u:
        uint64_t SetExpression = -[NSSymbolicExpression initWithString:]( objc_alloc(&OBJC_CLASS___NSSymbolicExpression),  "initWithString:",  @"SIZE");
        break;
      case 0x51u:
        UserFunctionExpression = -[NSAggregateExpression initWithCollection:]( objc_alloc(&OBJC_CLASS___NSAggregateExpression),  "initWithCollection:",  *(v10 - 1));
        goto LABEL_129;
      case 0x52u:
      case 0x53u:
      case 0x67u:
        uint64_t SetExpression = (uint64_t)NSStringForLexedIdentifier(*v10);
        break;
      case 0x56u:
        uint64_t v50 = (uint64_t)*v10;
        int v51 = objc_alloc(&OBJC_CLASS___NSNumber);
        if (v50 > 0x7FFFFFFF) {
          uint64_t SetExpression = -[NSNumber initWithLongLong:](v51, "initWithLongLong:", v50);
        }
        else {
          uint64_t SetExpression = -[NSNumber initWithInt:](v51, "initWithInt:", v50);
        }
        break;
      case 0x57u:
        uint64_t SetExpression = -[NSNumber initWithDouble:]( objc_alloc(&OBJC_CLASS___NSNumber),  "initWithDouble:",  *(double *)v10);
        break;
      case 0x58u:
        int v31 = NSStringForLexedIdentifier(*v10);
        KVCExpression = -[NSVariableExpression initWithObject:]( objc_alloc(&OBJC_CLASS___NSVariableExpression),  "initWithObject:",  v31);
        goto LABEL_132;
      case 0x59u:
        int v31 = NSStringForLexedIdentifier(*v10);
        KVCExpression = (NSVariableExpression *)ResolvePredicateArgument(v31, v76);
        goto LABEL_132;
      case 0x5Au:
        uint64_t SetExpression = (uint64_t)ResolvePredicateArgument(@"@", v76);
        break;
      case 0x5Bu:
        uint64_t SetExpression = (uint64_t)ResolvePredicateArgument(@"%", v76);
        break;
      case 0x5Cu:
      case 0x6Au:
        uint64_t SetExpression = (uint64_t)objc_alloc_init(MEMORY[0x189603FA8]);
        break;
      case 0x5Eu:
      case 0x6Cu:
        int v33 = (NSComparisonPredicate *)objc_alloc_init(MEMORY[0x189603FA8]);
        -[NSComparisonPredicate addObject:](v33, "addObject:", *v10);
        FunctionExpression = v33;
        goto LABEL_114;
      case 0x5Fu:
      case 0x6Du:
        [*(v10 - 2) addObject:*v10];
        FunctionExpression = (NSComparisonPredicate *)*(v10 - 2);
        goto LABEL_114;
      case 0x60u:
        int v31 = NSStringForLexedIdentifier(*v10);
        KVCExpression = (NSVariableExpression *)CreateKVCExpression((uint64_t)v31);
        goto LABEL_132;
      case 0x61u:
        int v30 = NSStringForLexedIdentifier(*v10);
        int v31 = -[NSString initWithFormat:](objc_alloc(&OBJC_CLASS___NSString), "initWithFormat:", @"@%@", v30);
        FunctionExpression = (NSComparisonPredicate *)CreateKVCExpression((uint64_t)v31);

        goto LABEL_115;
      case 0x62u:
        FunctionExpression = (NSComparisonPredicate *)ResolveKeyPathsIntoExpressionSequence(*(v10 - 2), *v10);

        goto LABEL_114;
      case 0x63u:
        FunctionExpression = -[NSVariableAssignmentExpression initWithAssignmentVariable:expression:]( [NSVariableAssignmentExpression alloc],  "initWithAssignmentVariable:expression:",  [*(v10 - 2) variable],  *v10);

        goto LABEL_114;
      case 0x64u:
        FunctionExpression = (NSComparisonPredicate *)CreateFunctionExpression((NSString *)*(v10 - 3), *(v10 - 1));

        goto LABEL_135;
      case 0x65u:
        UserFunctionExpression = (NSAggregateExpression *)HandleCastingOperation(*(v10 - 1));
        goto LABEL_129;
      case 0x66u:
        UserFunctionExpression = (NSAggregateExpression *)CreateUserFunctionExpression(*(v10 - 1));
LABEL_129:
        FunctionExpression = (NSComparisonPredicate *)UserFunctionExpression;
        goto LABEL_135;
      case 0x68u:
        int v31 = NSStringForLexedIdentifier(*(v10 - 1));
        KVCExpression = -[NSString initWithFormat:]( objc_alloc(&OBJC_CLASS___NSString),  "initWithFormat:",  @"%@:",  v31);
LABEL_132:
        FunctionExpression = (NSComparisonPredicate *)KVCExpression;
        goto LABEL_115;
      case 0x69u:
        unint64_t v63 = NSStringForLexedIdentifier(*(v10 - 2));
        FunctionExpression = -[NSString initWithFormat:]( objc_alloc(&OBJC_CLASS___NSString),  "initWithFormat:",  @"%@:%@",  v63,  *v10);

        goto LABEL_114;
      case 0x6Eu:
        uint64_t v36 = (void *)objc_msgSend(objc_alloc(MEMORY[0x189603F18]), "initWithObjects:", *(v10 - 3), *(v10 - 1), 0);
        FunctionExpression = (NSComparisonPredicate *)CreateFunctionExpression( (NSString *)@"objectFrom:withIndex:",  v36);

        goto LABEL_135;
      case 0x6Fu:
        uint64_t v27 = (void *)objc_msgSend(objc_alloc(MEMORY[0x189603F18]), "initWithObjects:", *(v10 - 2), *v10, 0);
        FunctionExpression = (NSComparisonPredicate *)CreateFunctionExpression((NSString *)@"add:to:", v27);

        goto LABEL_114;
      case 0x70u:
        unint64_t v26 = (void *)objc_msgSend(objc_alloc(MEMORY[0x189603F18]), "initWithObjects:", *(v10 - 2), *v10, 0);
        FunctionExpression = (NSComparisonPredicate *)CreateFunctionExpression((NSString *)@"from:subtract:", v26);

        goto LABEL_114;
      case 0x71u:
        size_t v56 = (void *)objc_msgSend(objc_alloc(MEMORY[0x189603F18]), "initWithObjects:", *(v10 - 2), *v10, 0);
        FunctionExpression = (NSComparisonPredicate *)CreateFunctionExpression((NSString *)@"multiply:by:", v56);

        goto LABEL_114;
      case 0x72u:
        uint64_t v53 = (void *)objc_msgSend(objc_alloc(MEMORY[0x189603F18]), "initWithObjects:", *(v10 - 2), *v10, 0);
        FunctionExpression = (NSComparisonPredicate *)CreateFunctionExpression((NSString *)@"divide:by:", v53);

        goto LABEL_114;
      case 0x73u:
        uint64_t v37 = (void *)objc_msgSend(objc_alloc(MEMORY[0x189603F18]), "initWithObjects:", *(v10 - 2), *v10, 0);
        FunctionExpression = (NSComparisonPredicate *)CreateFunctionExpression((NSString *)@"raise:toPower:", v37);

        goto LABEL_114;
      case 0x74u:
        uint64_t v35 = (void *)objc_msgSend(objc_alloc(MEMORY[0x189603F18]), "initWithObjects:", *(v10 - 2), *v10, 0);
        FunctionExpression = (NSComparisonPredicate *)CreateFunctionExpression( (NSString *)@"bitwiseAnd:with:",  v35);

        goto LABEL_114;
      case 0x75u:
        uint64_t v52 = (void *)objc_msgSend(objc_alloc(MEMORY[0x189603F18]), "initWithObjects:", *(v10 - 2), *v10, 0);
        FunctionExpression = (NSComparisonPredicate *)CreateFunctionExpression( (NSString *)@"bitwiseOr:with:",  v52);

        goto LABEL_114;
      case 0x76u:
        CFRange v55 = (void *)objc_msgSend(objc_alloc(MEMORY[0x189603F18]), "initWithObjects:", *(v10 - 2), *v10, 0);
        FunctionExpression = (NSComparisonPredicate *)CreateFunctionExpression( (NSString *)@"bitwiseXor:with:",  v55);

        goto LABEL_114;
      case 0x77u:
        unint64_t v45 = (void *)objc_msgSend(objc_alloc(MEMORY[0x189603F18]), "initWithObjects:", *(v10 - 2), *v10, 0);
        FunctionExpression = (NSComparisonPredicate *)CreateFunctionExpression((NSString *)@"leftshift:by:", v45);

        goto LABEL_114;
      case 0x78u:
        int v54 = (void *)objc_msgSend(objc_alloc(MEMORY[0x189603F18]), "initWithObjects:", *(v10 - 2), *v10, 0);
        FunctionExpression = (NSComparisonPredicate *)CreateFunctionExpression((NSString *)@"rightshift:by:", v54);

        goto LABEL_114;
      case 0x79u:
        uint64_t v42 = (NSConstantValueExpression *)HandleUnaryMinus(*v10);
LABEL_113:
        FunctionExpression = (NSComparisonPredicate *)v42;
        goto LABEL_114;
      case 0x7Au:
        UniChar v29 = (void *)objc_msgSend(objc_alloc(MEMORY[0x189603F18]), "initWithObjects:", *v10, 0);
        FunctionExpression = (NSComparisonPredicate *)CreateFunctionExpression( (NSString *)@"onesComplement:",  v29);

LABEL_114:
        int v31 = (NSString *)*v10;
        goto LABEL_115;
      case 0x7Bu:
        FunctionExpression = -[NSSubqueryExpression initWithExpression:usingIteratorVariable:predicate:]( [NSSubqueryExpression alloc],  "initWithExpression:usingIteratorVariable:predicate:",  *(v10 - 5),  [*(v10 - 3) variable],  *(v10 - 1));

        goto LABEL_135;
      case 0x7Cu:
        uint64_t SetExpression = CreateSetExpression(*(v10 - 2), 5LL, *v10);
        break;
      case 0x7Du:
        uint64_t SetExpression = CreateSetExpression(*(v10 - 2), 6LL, *v10);
        break;
      case 0x7Eu:
        uint64_t SetExpression = CreateSetExpression(*(v10 - 2), 7LL, *v10);
        break;
      case 0x7Fu:
        FunctionExpression = (NSComparisonPredicate *)CreateFetchExpression( (uint64_t)*(v10 - 5),  (uint64_t)*(v10 - 3),  1LL);

        goto LABEL_88;
      case 0x80u:
        FunctionExpression = (NSComparisonPredicate *)CreateFetchExpression( (uint64_t)*(v10 - 5),  (uint64_t)*(v10 - 3),  0LL);

LABEL_88:
        int v31 = (NSString *)*(v10 - 3);
        goto LABEL_115;
      case 0x81u:
        FunctionExpression = -[NSTernaryExpression initWithPredicate:trueExpression:falseExpression:]( objc_alloc(&OBJC_CLASS___NSTernaryExpression),  "initWithPredicate:trueExpression:falseExpression:",  *(v10 - 5),  *(v10 - 3),  *(v10 - 1));

LABEL_135:
        int v31 = (NSString *)*(v10 - 1);
LABEL_115:

        uint64_t SetExpression = (uint64_t)FunctionExpression;
        break;
      default:
        uint64_t SetExpression = (uint64_t)v10[1 - v24];
        break;
    }

    int v60 = &v10[-v24];
    v12 -= 2 * v24;
    v60[1] = (void *)SetExpression;
    uint64_t v10 = v60 + 1;
    uint64_t v61 = yyr1[v23] - 85LL;
    uint64_t v62 = (*(__int16 *)v12 + yypgoto[v61]);
    else {
      int v22 = yydefgoto[v61];
    }
    goto LABEL_120;
  }

void sub_18365DDA4( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
}

void _qfqp2_InitializedGlobalData()
{
  if ((_qfqp2_InitializedGlobals & 1) == 0)
  {
    _MergedGlobals_136 = +[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", 1LL);
    qword_18C496DC0 = +[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", 0LL);
    _qfqp2_ReservedWords = (uint64_t)(id)objc_msgSend( MEMORY[0x189604010],  "setWithObjects:",  @"AND",  @"OR",  @"IN",  @"NOT",  @"ALL",  @"ANY",  @"SOME",  @"NONE",  @"LIKE",  @"MATCHES",  @"TOKENMATCHES",  @"CONTAINS",  @"BETWEEN",  @"BEGINSWITH",  @"ENDSWITH",  @"UTI-EQUALS",  @"UTI-CONFORMS-TO",  @"NULL",  @"NIL",  @"SELF",  @"TRUEPREDICATE",  @"FALSEPREDICATE",  @"TRUE",  @"YES",  @"FALSE",  @"NO",  @"FIRST",  @"LAST",  @"SIZE",  @"SUBQUERY",  @"ANYKEY",  @"CAST",  @"UNION",  @"INTERSECTION",  @"MINUS",  @"APPLY",  @"FUNCTION",  0);
    _qfqp2_InitializedGlobals = 1;
  }

void yydestruct(int a1, id *a2)
{
  switch(a1)
  {
    case 39:
    case 87:
    case 88:
    case 90:
    case 91:
    case 92:
    case 93:
    case 94:
    case 95:
    case 96:
    case 97:
    case 98:
    case 100:
    case 101:
    case 102:
    case 103:
    case 104:
    case 105:
    case 106:
    case 107:
    case 108:
    case 109:
    case 110:
    case 111:
    case 112:
    case 113:
    case 114:
    case 115:
    case 116:
    case 117:
    case 118:
    case 119:
    case 120:
    case 121:
    case 122:
    case 123:
    case 124:
    case 125:
    case 126:
    case 127:
    case 128:
    case 129:
    case 130:

      break;
    case 40:
    case 41:
    case 42:
    case 43:
      free(*a2);
      break;
    default:
      return;
  }

unint64_t NSOrthographyFlagsForScriptAndOrthographyIndexes( uint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4, unint64_t a5, unint64_t a6)
{
  uint64_t v6 = 0LL;
  if (a6 <= 0x1F && a6 - 11 >= 2 && a6 != 8 && a6 != a1 && a6 != 6)
  {
    if (a1 == 6 && !a2 || a1 == 8 && !a3 || a1 == 11 && !a4 || a1 == 12 && !a5) {
      return 0LL;
    }
    if (a2 >= 2)
    {
      if (a2 - 128 < 0xFFFFFFFFFFFFFF86LL) {
        return 0LL;
      }
      LODWORD(a2) = a2 - 4;
    }

    if (a3 >= 2)
    {
      if (a3 - 148 < 0xFFFFFFFFFFFFFFECLL) {
        return 0LL;
      }
      LOBYTE(a3) = a3 - 126;
    }

    if (a4 >= 2)
    {
      if (a4 - 188 < 0xFFFFFFFFFFFFFFE4LL) {
        return 0LL;
      }
      LOBYTE(a4) = a4 + 98;
    }

    if (a5 < 2) {
      return ((_DWORD)a1 << 27) | ((a6 & 0x1F) << 22) | a2 | ((a3 & 0x1F) << 8) | ((a4 & 0x1F) << 13) | ((a5 & 0xF) << 18);
    }
    if (a5 - 206 >= 0xFFFFFFFFFFFFFFF2LL)
    {
      LOBYTE(a5) = a5 + 66;
      return ((_DWORD)a1 << 27) | ((a6 & 0x1F) << 22) | a2 | ((a3 & 0x1F) << 8) | ((a4 & 0x1F) << 13) | ((a5 & 0xF) << 18);
    }

    return 0LL;
  }

  return v6;
}

unint64_t NSOrthographyGetScriptAndOrthographyIndexesForFlags( unint64_t result, void *a2, unint64_t *a3, unint64_t *a4, unint64_t *a5, uint64_t *a6, uint64_t *a7)
{
  if (a2) {
    *a2 = result >> 27;
  }
  if (a7) {
    *a7 = (result >> 22) & 0x1F;
  }
  if (a3)
  {
    unint64_t v7 = result;
    if (v7 > 1) {
      v7 += 4LL;
    }
    *a3 = v7;
  }

  if (a4)
  {
    unint64_t v8 = (result >> 8) & 0x1F;
    if (v8 > 0x15) {
      unint64_t v8 = 1LL;
    }
    if (v8 > 1) {
      v8 += 126LL;
    }
    *a4 = v8;
  }

  if (a5)
  {
    unint64_t v9 = (result >> 13) & 0x1F;
    if (v9 > 0x1D) {
      unint64_t v9 = 1LL;
    }
    if (v9 > 1) {
      v9 += 158LL;
    }
    *a5 = v9;
  }

  if (a6)
  {
    uint64_t v10 = (result >> 18) & 0xF;
    if (((result >> 18) & 0xE) != 0) {
      v10 += 190LL;
    }
    *a6 = v10;
  }

  return result;
}

uint64_t NSOrthographyFlagsForDominantScriptAndLanguageMap(uint64_t a1, void *a2)
{
  uint64_t v37 = *MEMORY[0x1895F89C0];
  int v4 = (void *)[a2 objectForKey:a1];
  uint64_t v5 = (void *)[a2 objectForKey:@"Latn"];
  uint64_t v6 = (void *)[a2 objectForKey:@"Cyrl"];
  unint64_t v7 = (void *)[a2 objectForKey:@"Arab"];
  unint64_t v8 = (void *)[a2 objectForKey:@"Deva"];
  uint64_t v9 = [&unk_189D1EB58 indexOfObject:a1];
  unint64_t v10 = v9;
  if (v4)
  {
    if ([v4 count] != 1) {
      return 0LL;
    }
  }

  if (v5 && [v5 count] != 1
    || v6 && [v6 count] != 1
    || v7 && [v7 count] != 1
    || v8 && [v8 count] != 1)
  {
    return 0LL;
  }

  uint64_t v11 = (void *)[v4 objectAtIndex:0];
  if (!v11
    || v10 <= 0xC && ((1LL << v10) & 0x1940) != 0
    || (uint64_t result = [v11 isEqualToString:NSOrthographyDefaultLanguageForScriptIndex(v10)], (_DWORD)result))
  {
    __int128 v35 = 0u;
    __int128 v36 = 0u;
    __int128 v33 = 0u;
    __int128 v34 = 0u;
    uint64_t v12 = [a2 countByEnumeratingWithState:&v33 objects:v32 count:16];
    if (v12)
    {
      uint64_t v13 = v12;
      int v31 = v5;
      char v28 = v7;
      UniChar v29 = v8;
      unint64_t v30 = v10;
      int v14 = 0LL;
      uint64_t v15 = *(void *)v34;
      do
      {
        for (uint64_t i = 0LL; i != v13; ++i)
        {
          if (*(void *)v34 != v15) {
            objc_enumerationMutation(a2);
          }
          uint64_t v17 = *(void **)(*((void *)&v33 + 1) + 8 * i);
          if (([v17 isEqualToString:a1] & 1) == 0
            && ([v17 isEqualToString:@"Latn"] & 1) == 0
            && ([v17 isEqualToString:@"Cyrl"] & 1) == 0
            && ([v17 isEqualToString:@"Arab"] & 1) == 0
            && ([v17 isEqualToString:@"Deva"] & 1) == 0)
          {
            if (v14)
            {
              uint64_t result = [v17 isEqualToString:v14];
              if (!(_DWORD)result) {
                return result;
              }
            }

            else
            {
              int v14 = v17;
            }
          }
        }

        uint64_t v13 = [a2 countByEnumeratingWithState:&v33 objects:v32 count:16];
      }

      while (v13);
      if (v14)
      {
        int v19 = (void *)[a2 objectForKey:v14];
        int v20 = v19;
        uint64_t v5 = v31;
        if (v19 && [v19 count] != 1) {
          return 0LL;
        }
        uint64_t v21 = [&unk_189D1EB70 indexOfObject:v14];
        unint64_t v22 = v21;
        uint64_t v27 = (void *)[v20 objectAtIndex:0];
        if (v27)
        {
          uint64_t result = [v27 isEqualToString:NSOrthographyDefaultLanguageForScriptIndex(v22)];
          unint64_t v8 = v29;
          unint64_t v10 = v30;
          unint64_t v7 = v28;
          if (!(_DWORD)result) {
            return result;
          }
        }

        else
        {
          unint64_t v8 = v29;
          unint64_t v10 = v30;
          unint64_t v7 = v28;
        }
      }

      else
      {
        unint64_t v22 = 0LL;
        unint64_t v8 = v29;
        unint64_t v10 = v30;
        unint64_t v7 = v28;
        uint64_t v5 = v31;
      }
    }

    else
    {
      unint64_t v22 = 0LL;
    }

    if (v5)
    {
      unint64_t v23 = objc_msgSend(&unk_189D1EB88, "indexOfObject:", objc_msgSend(v5, "objectAtIndex:", 0));
      if (v6) {
        goto LABEL_41;
      }
    }

    else
    {
      unint64_t v23 = v10 == 6;
      if (v6)
      {
LABEL_41:
        unint64_t v24 = objc_msgSend(&unk_189D1EBA0, "indexOfObject:", objc_msgSend(v6, "objectAtIndex:", 0));
        if (v7) {
          goto LABEL_42;
        }
        goto LABEL_46;
      }
    }

    unint64_t v24 = v10 == 8;
    if (v7)
    {
LABEL_42:
      unint64_t v25 = objc_msgSend(&unk_189D1EBB8, "indexOfObject:", objc_msgSend(v7, "objectAtIndex:", 0));
      if (v8)
      {
LABEL_43:
        unint64_t v26 = objc_msgSend(&unk_189D1EBD0, "indexOfObject:", objc_msgSend(v8, "objectAtIndex:", 0));
        return NSOrthographyFlagsForScriptAndOrthographyIndexes(v10, v23, v24, v25, v26, v22);
      }

CFStringRef NSOrthographyDefaultLanguageForScriptIndex(uint64_t a1)
{
  uint64_t v1 = a1;
  if ((unint64_t)(a1 - 2) <= 4)
  {
    unsigned int v2 = &unk_189D1ED08;
    return (const __CFString *)[v2 objectAtIndex:v1];
  }

  if (a1 == 29)
  {
    unsigned int v2 = &unk_189D1ED20;
    uint64_t v1 = 208LL;
    return (const __CFString *)[v2 objectAtIndex:v1];
  }

  if ((unint64_t)(a1 - 7) <= 0x18)
  {
    uint64_t v1 = a1 + 217;
    unsigned int v2 = &unk_189D1ED38;
    return (const __CFString *)[v2 objectAtIndex:v1];
  }

  return @"und";
}

CFStringRef NSOrthographyDominantScriptForFlags(unsigned int a1)
{
  uint64_t v1 = a1 >> 27;
  if (!(_DWORD)v1) {
    return 0LL;
  }
  if (v1 == 1) {
    return @"Zyyy";
  }
  return (const __CFString *)objc_msgSend(&unk_189D1ED50, "objectAtIndex:");
}

CFStringRef NSOrthographyDominantLanguageForFlagsAndScript(unsigned int a1, uint64_t a2)
{
  return NSOrthographyDominantLanguageForFlagsAndScriptIndex(a1, [&unk_189D1EBE8 indexOfObject:a2]);
}

CFStringRef NSOrthographyDominantLanguageForFlagsAndScriptIndex(unsigned int a1, uint64_t a2)
{
  switch(a2)
  {
    case 6LL:
      else {
        uint64_t v2 = a1;
      }
      else {
        uint64_t v3 = v2 + 4;
      }
      if (!v3) {
        return 0LL;
      }
      int v4 = &unk_189D1ED68;
      return (const __CFString *)objc_msgSend(v4, "objectAtIndex:");
    case 7LL:
    case 9LL:
    case 10LL:
      goto LABEL_12;
    case 8LL:
      LODWORD(v5) = (a1 >> 8) & 0x1F;
      else {
        uint64_t v5 = v5;
      }
      else {
        uint64_t v6 = v5 + 126;
      }
      if (!v6) {
        return 0LL;
      }
      int v4 = &unk_189D1ED80;
      return (const __CFString *)objc_msgSend(v4, "objectAtIndex:");
    case 11LL:
      LODWORD(v_Block_object_dispose(va, 8) = (a1 >> 13) & 0x1F;
      else {
        uint64_t v8 = v8;
      }
      else {
        uint64_t v9 = v8 + 158;
      }
      if (!v9) {
        return 0LL;
      }
      int v4 = &unk_189D1ED98;
      return (const __CFString *)objc_msgSend(v4, "objectAtIndex:");
    case 12LL:
      if (((a1 >> 18) & 0xE) != 0) {
        uint64_t v10 = ((a1 >> 18) & 0xF) + 190LL;
      }
      else {
        uint64_t v10 = (a1 >> 18) & 0xF;
      }
      if (!v10) {
        return 0LL;
      }
      int v4 = &unk_189D1EDB0;
      return (const __CFString *)objc_msgSend(v4, "objectAtIndex:");
    default:
      if (!a2) {
        return 0LL;
      }
LABEL_12:
      if (a1 >> 27 == a2 || ((a1 >> 22) & 0x1F) == a2) {
        return NSOrthographyDefaultLanguageForScriptIndex(a2);
      }
      else {
        return 0LL;
      }
  }

CFStringRef NSOrthographyDominantLanguageForFlags(unsigned int a1)
{
  return NSOrthographyDominantLanguageForFlagsAndScriptIndex(a1, a1 >> 27);
}

void *NSOrthographyAllScriptsForFlags(unsigned int a1)
{
  uint64_t v2 = (void *)[MEMORY[0x189603FA8] array];
  uint64_t v3 = a1 >> 27;
  if ((_DWORD)v3 == 1)
  {
    unint64_t v4 = (a1 >> 22) & 0x1F;
    uint64_t v5 = @"Zyyy";
LABEL_6:
    [v2 addObject:v5];
    goto LABEL_7;
  }

  if (!(a1 >> 27))
  {
    unint64_t v4 = (a1 >> 22) & 0x1F;
    goto LABEL_8;
  }

  uint64_t v5 = (const __CFString *)[&unk_189D1ED50 objectAtIndex:a1 >> 27];
  unint64_t v4 = (a1 >> 22) & 0x1F;
  if (v5) {
    goto LABEL_6;
  }
LABEL_7:
  if ((_DWORD)v3 != 6)
  {
LABEL_8:
    if ((_BYTE)a1) {
      objc_msgSend(v2, "addObject:", objc_msgSend(&unk_189D1EC00, "objectAtIndex:", 6));
    }
    if ((_DWORD)v3 == 8) {
      goto LABEL_14;
    }
  }

  if ((a1 & 0x1F00) != 0) {
    objc_msgSend(v2, "addObject:", objc_msgSend(&unk_189D1EC18, "objectAtIndex:", 8));
  }
  if ((_DWORD)v3 == 11) {
    goto LABEL_17;
  }
LABEL_14:
  if ((a1 & 0x3E000) != 0) {
    objc_msgSend(v2, "addObject:", objc_msgSend(&unk_189D1EC30, "objectAtIndex:", 11));
  }
  if ((_DWORD)v3 != 12)
  {
LABEL_17:
    if ((a1 & 0x3C0000) != 0) {
      objc_msgSend(v2, "addObject:", objc_msgSend(&unk_189D1EC48, "objectAtIndex:", 12));
    }
  }

  if (v4 && v4 != v3)
  {
    if (v4 > 0xC) {
      goto LABEL_26;
    }
    if (((1LL << v4) & 0x1940) != 0) {
      return v2;
    }
    if (v4 == 1)
    {
      unint64_t v7 = @"Zyyy";
    }

    else
    {
LABEL_26:
      unint64_t v7 = (const __CFString *)[&unk_189D1ED50 objectAtIndex:v4];
      if (!v7) {
        return v2;
      }
    }

    if (([v2 containsObject:v7] & 1) == 0) {
      [v2 addObject:v7];
    }
  }

  return v2;
}

void *NSOrthographyAllLanguagesForFlags(unsigned int a1)
{
  uint64_t v2 = (void *)[MEMORY[0x189603FA8] array];
  unsigned int v3 = a1 >> 27;
  unint64_t v4 = NSOrthographyDominantLanguageForFlagsAndScriptIndex(a1, a1 >> 27);
  unint64_t v5 = (a1 >> 22) & 0x1F;
  if (v4) {
    [v2 addObject:v4];
  }
  if (v3 == 6) {
    goto LABEL_25;
  }
  else {
    uint64_t v6 = a1;
  }
  else {
    uint64_t v7 = v6 + 4;
  }
  if (v7)
  {
    uint64_t v8 = objc_msgSend(&unk_189D1ED68, "objectAtIndex:");
    if (v8)
    {
      uint64_t v9 = v8;
      if (([v2 containsObject:v8] & 1) == 0) {
        [v2 addObject:v9];
      }
    }
  }

  if (v3 != 8)
  {
LABEL_25:
    LODWORD(v10) = (a1 >> 8) & 0x1F;
    else {
      uint64_t v10 = v10;
    }
    else {
      uint64_t v11 = v10 + 126;
    }
    if (v11)
    {
      uint64_t v12 = objc_msgSend(&unk_189D1ED80, "objectAtIndex:");
      if (v12)
      {
        uint64_t v13 = v12;
        if (([v2 containsObject:v12] & 1) == 0) {
          [v2 addObject:v13];
        }
      }
    }

    if (v3 == 11) {
      goto LABEL_37;
    }
  }

  LODWORD(v14) = (a1 >> 13) & 0x1F;
  else {
    uint64_t v14 = v14;
  }
  else {
    uint64_t v15 = v14 + 158;
  }
  if (v15)
  {
    uint64_t v16 = objc_msgSend(&unk_189D1ED98, "objectAtIndex:");
    if (v16)
    {
      uint64_t v17 = v16;
      if (([v2 containsObject:v16] & 1) == 0) {
        [v2 addObject:v17];
      }
    }
  }

  if (v3 != 12)
  {
LABEL_37:
    if (((a1 >> 18) & 0xE) != 0) {
      uint64_t v18 = ((a1 >> 18) & 0xF) + 190LL;
    }
    else {
      uint64_t v18 = (a1 >> 18) & 0xF;
    }
    if (v18)
    {
      uint64_t v19 = objc_msgSend(&unk_189D1EDB0, "objectAtIndex:");
      if (v19)
      {
        uint64_t v20 = v19;
        if (([v2 containsObject:v19] & 1) == 0) {
          [v2 addObject:v20];
        }
      }
    }
  }

  if ((_DWORD)v5 && (_DWORD)v5 != v3 && (v5 > 0xC || ((1LL << ((a1 >> 22) & 0x1F)) & 0x1940) == 0))
  {
    unint64_t v22 = NSOrthographyDominantLanguageForFlagsAndScriptIndex(a1, (a1 >> 22) & 0x1F);
    if (v22)
    {
      unint64_t v23 = v22;
      if (([v2 containsObject:v22] & 1) == 0) {
        [v2 addObject:v23];
      }
    }
  }

  return v2;
}

void *NSOrthographyLanguageMapForFlags(unsigned int a1)
{
  uint64_t v2 = (void *)[MEMORY[0x189603FC8] dictionary];
  uint64_t v3 = a1 >> 27;
  if ((_DWORD)v3)
  {
    if (v3 == 1) {
      unint64_t v4 = @"Zyyy";
    }
    else {
      unint64_t v4 = (const __CFString *)[&unk_189D1ED50 objectAtIndex:a1 >> 27];
    }
  }

  else
  {
    unint64_t v4 = 0LL;
  }

  unint64_t v5 = NSOrthographyDominantLanguageForFlagsAndScriptIndex(a1, a1 >> 27);
  unint64_t v6 = (a1 >> 22) & 0x1F;
  if (v4 && v5) {
    objc_msgSend(v2, "setObject:forKey:", objc_msgSend(MEMORY[0x189603F18], "arrayWithObject:", v5), v4);
  }
  if ((_DWORD)v3 == 6) {
    goto LABEL_29;
  }
  else {
    uint64_t v7 = a1;
  }
  else {
    uint64_t v8 = v7 + 4;
  }
  if (v8)
  {
    uint64_t v9 = objc_msgSend(&unk_189D1ED68, "objectAtIndex:");
    if (v9) {
      objc_msgSend( v2,  "setObject:forKey:",  objc_msgSend(MEMORY[0x189603F18], "arrayWithObject:", v9),  objc_msgSend(&unk_189D1EC60, "objectAtIndex:", 6));
    }
  }

  if ((_DWORD)v3 != 8)
  {
LABEL_29:
    LODWORD(v10) = (a1 >> 8) & 0x1F;
    else {
      uint64_t v10 = v10;
    }
    else {
      uint64_t v11 = v10 + 126;
    }
    if (v11)
    {
      uint64_t v12 = objc_msgSend(&unk_189D1ED80, "objectAtIndex:");
      if (v12) {
        objc_msgSend( v2,  "setObject:forKey:",  objc_msgSend(MEMORY[0x189603F18], "arrayWithObject:", v12),  objc_msgSend(&unk_189D1EC78, "objectAtIndex:", 8));
      }
    }

    if ((_DWORD)v3 == 11) {
      goto LABEL_40;
    }
  }

  LODWORD(v13) = (a1 >> 13) & 0x1F;
  else {
    uint64_t v13 = v13;
  }
  else {
    uint64_t v14 = v13 + 158;
  }
  if (v14)
  {
    uint64_t v15 = objc_msgSend(&unk_189D1ED98, "objectAtIndex:");
    if (v15) {
      objc_msgSend( v2,  "setObject:forKey:",  objc_msgSend(MEMORY[0x189603F18], "arrayWithObject:", v15),  objc_msgSend(&unk_189D1EC90, "objectAtIndex:", 11));
    }
  }

  if ((_DWORD)v3 != 12)
  {
LABEL_40:
    if (((a1 >> 18) & 0xE) != 0) {
      uint64_t v16 = ((a1 >> 18) & 0xF) + 190LL;
    }
    else {
      uint64_t v16 = (a1 >> 18) & 0xF;
    }
    if (v16)
    {
      uint64_t v17 = objc_msgSend(&unk_189D1EDB0, "objectAtIndex:");
      if (v17) {
        objc_msgSend( v2,  "setObject:forKey:",  objc_msgSend(MEMORY[0x189603F18], "arrayWithObject:", v17),  objc_msgSend(&unk_189D1ECA8, "objectAtIndex:", 12));
      }
    }
  }

  if ((_DWORD)v6 && (_DWORD)v6 != (_DWORD)v3)
  {
    if (v6 > 0xC) {
      goto LABEL_52;
    }
    if (((1LL << ((a1 >> 22) & 0x1F)) & 0x1940) != 0) {
      return v2;
    }
    if (v6 == 1)
    {
      uint64_t v18 = @"Zyyy";
    }

    else
    {
LABEL_52:
      uint64_t v18 = (const __CFString *)[&unk_189D1ED50 objectAtIndex:(a1 >> 22) & 0x1F];
      if (!v18) {
        return v2;
      }
    }

    uint64_t v19 = NSOrthographyDominantLanguageForFlagsAndScriptIndex(a1, (a1 >> 22) & 0x1F);
    if (v19) {
      objc_msgSend(v2, "setObject:forKey:", objc_msgSend(MEMORY[0x189603F18], "arrayWithObject:", v19), v18);
    }
  }

  return v2;
}

uint64_t sub_18365F05C()
{
  return v0;
}

uint64_t sub_18365F7F0()
{
  return 0LL;
}

uint64_t sub_18365F830()
{
  return 0LL;
}

uint64_t NSOrthographyScriptIndexForCharacters(uint64_t a1, unint64_t a2, uint64_t a3)
{
  if (a2)
  {
    uint64_t v3 = 0LL;
    unint64_t v4 = 0LL;
    while (1)
    {
      unsigned int v5 = *(unsigned __int16 *)(a1 + 2 * v3);
      if ((unsigned __int16)((v5 & 0xFFDF) - 65) >= 0x1Au)
      {
        uint64_t v6 = 0LL;
        BOOL v7 = v5 > 0x2E || ((1LL << v5) & 0x708000000000LL) == 0;
        if (!v7 || v5 == 173) {
          goto LABEL_9;
        }
        if (v5 - 48 < 0xA
          || (unsigned __int16)(v5 - 188) < 3u
          || v5 < 0x20
          || (unsigned __int16)(v5 - 127) < 0x21u
          || v5 < 0xC0
          || (v5 & 0xFFDF) == 0xD7)
        {
          goto LABEL_69;
        }

        if (v5 >= 0x2B0)
        {
          if (v5 < 0x370) {
            goto LABEL_30;
          }
          if (v5 < 0x400) {
            goto LABEL_32;
          }
          if (v5 < 0x530 || v5 == 7467)
          {
            uint64_t v6 = 8LL;
            goto LABEL_9;
          }

          if (v5 < 0x590 || (unsigned __int16)(v5 + 1261) < 5u)
          {
            uint64_t v6 = 9LL;
            goto LABEL_9;
          }

          if (v5 < 0x600 || (unsigned __int16)(v5 + 1251) < 0x33u)
          {
            uint64_t v6 = 10LL;
            goto LABEL_9;
          }

          if ((unsigned __int16)(v5 + 400) < 0x8Fu || v5 < 0x700 || (unsigned __int16)(v5 + 1200) < 0x2B0u)
          {
            uint64_t v6 = 11LL;
            goto LABEL_9;
          }

          if (v5 - 2304 <= 0x5FF)
          {
            if ((v5 & 0xFFFE) != 0x964)
            {
              uint64_t v6 = ((v5 - 2304) >> 7) + 12;
              goto LABEL_9;
            }

void *orthoIndexesForLanguageCodes()
{
  uint64_t result = (void *)orthoIndexesForLanguageCodes_result;
  if (!orthoIndexesForLanguageCodes_result)
  {
    int v1 = numberOfLanguageCodes_numCodes;
    if (numberOfLanguageCodes_numCodes < 0)
    {
      int v1 = langid_numlanguages();
      numberOfLanguageCodes_numCodes = v1;
    }

    if (v1 > 0)
    {
      uint64_t v2 = v1;
      uint64_t result = calloc(v1, 1uLL);
      orthoIndexesForLanguageCodes_uint64_t result = (uint64_t)result;
      if (!result) {
        return result;
      }
      for (uint64_t i = 0LL; i != v2; ++i)
      {
        uint64_t v4 = langid_languagecode();
        if (v4)
        {
          unsigned int v5 = (const char *)v4;
          uint64_t v6 = 0LL;
          uint64_t v7 = orthoIndexesForLanguageCodes_result;
          do
          {
            if (!strcmp(v5, langidLanguageCodes[v6])) {
              *(_BYTE *)(v7 + i) = langidOrthoIndexes[v6];
            }
            ++v6;
          }

          while (v6 != 33);
        }
      }
    }

    return (void *)orthoIndexesForLanguageCodes_result;
  }

  return result;
}

unint64_t scoreOrthographyForCharacters( unint64_t result, unint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = (unsigned __int16 *)result;
  uint64_t v78 = *MEMORY[0x1895F89C0];
  if (a3 == 8)
  {
    if ((byte_18C496DC9 & 1) == 0)
    {
      uint64_t result = _NSLinguisticDataPath();
      if (result)
      {
        uint64_t v21 = (void *)result;
        qword_18C496DE0 = objc_msgSend( objc_alloc(MEMORY[0x189603F48]),  "initWithContentsOfFile:options:error:",  objc_msgSend((id)result, "stringByAppendingPathComponent:", @"Cyrl/Dict1.dat"),  1,  0);
        uint64_t result = objc_msgSend( objc_alloc(MEMORY[0x189603F48]),  "initWithContentsOfFile:options:error:",  objc_msgSend(v21, "stringByAppendingPathComponent:", @"Cyrl/Dict2.dat"),  1,  0);
        qword_18C496DE8 = result;
      }

      byte_18C496DC9 = 1;
    }

    int16x4_t v10 = (void *)qword_18C496DE0;
    uint64_t v9 = (void *)qword_18C496DE8;
  }

  else
  {
    if (a3 != 6) {
      return result;
    }
    if ((_MergedGlobals_137 & 1) == 0)
    {
      uint64_t result = _NSLinguisticDataPath();
      if (result)
      {
        uint64_t v8 = (void *)result;
        qword_18C496DD0 = objc_msgSend( objc_alloc(MEMORY[0x189603F48]),  "initWithContentsOfFile:options:error:",  objc_msgSend((id)result, "stringByAppendingPathComponent:", @"Latn/Dict1.dat"),  1,  0);
        uint64_t result = objc_msgSend( objc_alloc(MEMORY[0x189603F48]),  "initWithContentsOfFile:options:error:",  objc_msgSend(v8, "stringByAppendingPathComponent:", @"Latn/Dict2.dat"),  1,  0);
        qword_18C496DD8 = result;
      }

      _MergedGlobals_137 = 1;
    }

    if (a2 < 2) {
      return result;
    }
    int16x4_t v10 = (void *)qword_18C496DD0;
    uint64_t v9 = (void *)qword_18C496DD8;
    int v11 = *v7;
    unsigned int v12 = v11 - 65;
    unsigned int v13 = v11 - 192;
    unsigned int v14 = v11 - 216;
    BOOL v15 = v12 >= 0x1A && v13 >= 0x17;
    if (!v15 || v14 <= 6)
    {
      int v17 = v7[1];
      else {
        unint64_t v20 = 450LL;
      }
      goto LABEL_30;
    }
  }

  unint64_t v20 = 450LL;
LABEL_30:
  if (a2 < 2) {
    return result;
  }
  if (!v10 || v9 == 0LL) {
    return result;
  }
  uint64_t v23 = [v10 bytes];
  uint64_t v24 = [v9 bytes];
  unint64_t v25 = [v10 length] / 5uLL;
  uint64_t result = [v9 length];
  if (a3 != 6)
  {
    unint64_t v26 = 0LL;
    uint64_t v27 = 0LL;
    while (1)
    {
      uint64_t v28 = v7[v27];
      if ((v28 - 1040) <= 0x1F)
      {
        char v29 = v28 - 64;
        BOOL v30 = (_DWORD)v28 == 1049;
LABEL_44:
        if (v30) {
          LOBYTE(v2_Block_object_dispose(va, 8) = -40;
        }
        else {
          LOBYTE(v2_Block_object_dispose(va, 8) = v29;
        }
LABEL_47:
        v77[v26++] = v28;
        goto LABEL_48;
      }

      if ((v28 - 1072) <= 0x1F)
      {
        char v29 = v28 - 96;
        BOOL v30 = (_DWORD)v28 == 1081;
        goto LABEL_44;
      }

      if ((v28 & 0xFFF0) == 0x450 || (v28 & 0xFFF0) == 0x400)
      {
        else {
          uint64_t v31 = -1104LL;
        }
        v28 += v31;
        if (((0xF1FBuLL >> v28) & 1) == 0) {
          goto LABEL_48;
        }
        LOBYTE(v2_Block_object_dispose(va, 8) = cyrl1[v28];
        goto LABEL_47;
      }

      LODWORD(v2_Block_object_dispose(va, 8) = v28 - 1162;
      if (v28 <= 0xF)
      {
        LOBYTE(v2_Block_object_dispose(va, 8) = cyrl2[v28];
        goto LABEL_47;
      }

unint64_t orthographyFlagsForScores(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = 0LL;
  unint64_t v5 = 0LL;
  unint64_t v6 = a1[2];
  uint64_t v7 = a1[6];
  unint64_t v8 = a1[8];
  uint64_t v9 = 2LL;
  uint64_t v11 = a1[11];
  uint64_t v10 = a1[12];
  do
  {
    if (a1[v9] > v5)
    {
      unint64_t v5 = a1[v9];
      uint64_t v4 = v9;
    }

    ++v9;
  }

  while (v9 != 32);
  if (!v4) {
    return 0x8000000LL;
  }
  unint64_t v12 = 0LL;
  for (unint64_t i = 2LL; i != 32; ++i)
  {
    if (a1[i]) {
      BOOL v14 = v4 == i;
    }
    else {
      BOOL v14 = 1;
    }
    if (!v14 && (i > 0xC || ((1LL << i) & 0x1940) == 0)) {
      unint64_t v12 = i;
    }
  }

  if (v6)
  {
    if (v6 < 5)
    {
      uint64_t v16 = 1LL;
    }

    else
    {
      unint64_t v15 = 0LL;
      uint64_t v16 = 1LL;
      for (uint64_t j = 2LL; j != 6; ++j)
      {
        if (*(void *)(a3 + 8 * j) > v15)
        {
          uint64_t v16 = j;
          unint64_t v15 = *(void *)(a3 + 8 * j);
        }
      }
    }

    if (v4 == 2) {
      uint64_t v4 = v16;
    }
    if (v12 == 2) {
      unint64_t v12 = v16;
    }
  }

  if (!v7)
  {
    unint64_t v20 = 0LL;
    goto LABEL_36;
  }

  if (*(void *)(a2 + 48) >= 2uLL)
  {
    unint64_t v19 = 0LL;
    unint64_t v20 = 1LL;
    for (uint64_t k = 6LL; k != 128; ++k)
    {
      if (*(void *)(a3 + 8 * k) > v19)
      {
        unint64_t v20 = k;
        unint64_t v19 = *(void *)(a3 + 8 * k);
      }
    }

uint64_t sub_183661748()
{
  return 0LL;
}

uint64_t sub_183661788()
{
  return 0LL;
}

uint64_t sub_1836617CC()
{
  return 0LL;
}

uint64_t sub_183664E30()
{
  return 0LL;
}

uint64_t sub_183664E70()
{
  return 0LL;
}

void sub_18366876C(_Unwind_Exception *a1)
{
}

void updateDateTemplate(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = objc_alloc_init(&OBJC_CLASS___NSDateFormatter);
  uint64_t v7 = *(void **)(a1 + 8);
  uint64_t v8 = *(void *)(a1 + 16);
  uint64_t v10 = v6;
  if (!v7)
  {
    uint64_t v7 = (void *)[MEMORY[0x189603F90] currentLocale];
    unint64_t v6 = v10;
  }

  -[NSDateFormatter setLocale:](v6, "setLocale:", v7);
  if (!v8) {
    uint64_t v8 = [v7 objectForKey:*MEMORY[0x189603A78]];
  }
  -[NSDateFormatter setCalendar:](v10, "setCalendar:", v8);
  -[NSDateFormatter setDateStyle:](v10, "setDateStyle:", a2);
  -[NSDateFormatter setTimeStyle:](v10, "setTimeStyle:", a3);
  uint64_t v9 = -[NSDateFormatter dateFormat](v10, "dateFormat");

  *(void *)(a1 + 40) = v9;
}

void sub_18366AA5C(_Unwind_Exception *exc_buf, int a2)
{
  if (a2)
  {
    objc_begin_catch(exc_buf);
    JUMPOUT(0x18366A9E4LL);
  }

  _Unwind_Resume(exc_buf);
}

uint64_t sub_18366B7FC()
{
  return 0LL;
}

uint64_t sub_18366B864()
{
  return 0LL;
}

uint64_t sub_18366B8A0()
{
  return 0LL;
}

NSString *__NSLocalizedFileSizeDescription(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  if (a3 & 0x70000000 | a1)
  {
    if ((_WORD)a3) {
      int v8 = (unsigned __int16)a3;
    }
    else {
      int v8 = 0xFFFF;
    }
    if ((a3 & 0x180000) != 0 && (a3 & 0x40000) == 0) {
      unint64_t v10 = 1024LL;
    }
    else {
      unint64_t v10 = 1000LL;
    }
    uint64_t v11 = [&unk_189D1EE70 count];
    uint64_t v12 = v11 - 1;
    if (v11 == 1)
    {
      double v16 = (double)v10;
LABEL_32:
      uint64_t v19 = v12;
    }

    else
    {
      uint64_t v13 = 0LL;
      if (a1 >= 0) {
        unint64_t v14 = a1;
      }
      else {
        unint64_t v14 = -a1;
      }
      double v15 = (double)v14;
      double v16 = (double)v10;
      if (a2) {
        uint64_t v17 = a2;
      }
      else {
        uint64_t v17 = v10;
      }
      double v18 = (double)v17;
      uint64_t v19 = 0x7FFFFFFFFFFFFFFFLL;
      while (1)
      {
        if ((v8 & (1 << v13)) != 0) {
          uint64_t v19 = v13;
        }
        double v20 = pow((double)v10, (double)(unint64_t)v13);
        if (fabs(roundedSize(v13, (a3 & 0x400000) == 0, v15 / v20)) < v18 && v19 != 0x7FFFFFFFFFFFFFFFLL) {
          break;
        }
        if (v12 == ++v13)
        {
          if (v19 == 0x7FFFFFFFFFFFFFFFLL) {
            goto LABEL_32;
          }
          break;
        }
      }
    }

    double v24 = pow(v16, (double)(unint64_t)v19);
    double v25 = (double)a1 / v24;
    double v26 = -v25;
    if (a1 >= 0) {
      double v26 = (double)a1 / v24;
    }
    if (v26 >= 1.0e15) {
      uint64_t v27 = +[NSNumber numberWithLongLong:](&OBJC_CLASS___NSNumber, "numberWithLongLong:", a1 / (unint64_t)v24);
    }
    else {
      uint64_t v27 = +[NSNumber numberWithDouble:](&OBJC_CLASS___NSNumber, "numberWithDouble:", v25, v24, v26);
    }
    return __NSLocalizedFileSizeDescriptionFormatNumber( v27,  v19,  (uint64_t)+[NSNumber numberWithLongLong:](&OBJC_CLASS___NSNumber, "numberWithLongLong:", a1),  a3,  a4);
  }

  else
  {
    unint64_t v22 = (void *)_NSFoundationBundle();
    if ((a3 & 1) != 0) {
      uint64_t v23 = @"Zero bytes";
    }
    else {
      uint64_t v23 = @"Zero KB";
    }
    return (NSString *)[v22 localizedStringForKey:v23 value:&stru_189CA6A28 table:@"FileSizeFormatting"];
  }

double roundedSize(uint64_t a1, int a2, double a3)
{
  double v3 = a3;
  if (a2)
  {
    LOBYTE(a3) = numberOfFractionDigits[a1];
    double v4 = (double)*(unint64_t *)&a3;
  }

  else
  {
    double v4 = 0.0;
    if (v3 >= 1.0e-20 && v3 < 100.0) {
      double v4 = (double)(uint64_t)(2 - vcvtmd_s64_f64(log10(v3)));
    }
  }

  double v6 = __exp10(v4);
  return round(v6 * v3) / v6;
}

NSString *__NSLocalizedFileSizeDescriptionFormatNumber( void *a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  if ((a4 & 0x10000) != 0) {
    uint64_t v9 = 3LL;
  }
  else {
    uint64_t v9 = 6LL;
  }
  if ((a4 & 0x40000000) != 0)
  {
    id v12 = 0LL;
    if ((a4 & 0x20000000) != 0) {
      return (NSString *)v12;
    }
  }

  else
  {
    if (a2)
    {
      if ((a4 & 0x400000) != 0)
      {
        [a1 doubleValue];
        double v17 = fabs(v16);
        if (v17 >= 1.0e-20 && v17 < 100.0) {
          uint64_t v11 = 2 - vcvtmd_s64_f64(log10(v17));
        }
        else {
          uint64_t v11 = 0LL;
        }
      }

      else
      {
        uint64_t v11 = numberOfFractionDigits[a2];
      }

      uint64_t v15 = (a4 >> 24) & 1;
      uint64_t v13 = v9;
      uint64_t v14 = a5;
    }

    else
    {
      uint64_t v11 = 0LL;
      uint64_t v13 = v9;
      uint64_t v14 = a5;
      LODWORD(v15) = 0;
    }

    id v12 = -[NSNumberFormatter stringForObjectValue:](fileSizeFormatter(v11, v13, v14, v15), "stringForObjectValue:", a1);
    if ((a4 & 0x20000000) != 0) {
      return (NSString *)v12;
    }
  }

  [a1 doubleValue];
  if (fabs(v19) == 1.0)
  {
    uint64_t v20 = objc_msgSend( (id)objc_msgSend(&unk_189D1EE70, "objectAtIndex:", a2),  "stringByAppendingString:",  @" Singular");
    uint64_t v21 = (void *)_NSFoundationBundle();
    uint64_t v22 = v20;
  }

  else
  {
    uint64_t v23 = _NSFoundationBundle();
    uint64_t v22 = [&unk_189D1EE70 objectAtIndex:a2];
    uint64_t v21 = (void *)v23;
  }

  uint64_t v24 = [v21 localizedStringForKey:v22 value:&stru_189CA6A28 table:@"FileSizeFormatting"];
  uint64_t v25 = v24;
  if ((a4 & 0x40000000) != 0) {
    return (NSString *)v24;
  }
  if (!a2 || (a4 & 0x4000000) == 0) {
    return +[NSString stringWithFormat:]( NSString,  "stringWithFormat:",  [(id)_NSFoundationBundle() localizedStringForKey:@"%@ %@" value:&stru_189CA6A28 table:@"FileSizeFormatting"],  v12,  v24,  v28);
  }
  id v26 = -[NSNumberFormatter stringForObjectValue:](fileSizeFormatter(0LL, v9, 1LL, 0), "stringForObjectValue:", a3);
  return +[NSString stringWithFormat:]( NSString,  "stringWithFormat:",  [(id)_NSFoundationBundle() localizedStringForKey:@"%@ %@ (%@ bytes)" value:&stru_189CA6A28 table:@"FileSizeFormatting"],  v12,  v25,  v26);
}

uint64_t __NSMeasurementConvertedForFileSizeDescription(void *a1, int a2, int a3, uint64_t a4, uint64_t *a5)
{
  if ((_WORD)a2) {
    unint64_t v9 = (unsigned __int16)a2;
  }
  else {
    unint64_t v9 = 65472LL;
  }
  unint64_t v10 = [&unk_189D1EE70 count];
  unint64_t v11 = __clz(__rbit64(v9));
  unint64_t v19 = v10;
  if (v10 <= v11) {
    unint64_t v12 = v11;
  }
  else {
    unint64_t v12 = v10;
  }
  uint64_t v13 = 0x7FFFFFFFFFFFFFFFLL;
  do
  {
    if (v12 == v11) {
      break;
    }
    objc_msgSend( (id)objc_msgSend( a1,  "measurementByConvertingToUnit:",  informationStorageUnitFromAllowedUnit(v9 & (1 << v11), a3)),  "doubleValue");
    double v15 = roundedSize(v11++, (*(void *)&a2 & 0x400000LL) == 0, v14);
  }

  while (fabs(v15) >= (double)a4 || v13 == 0x7FFFFFFFFFFFFFFFLL);
  uint64_t v17 = v19 - 1;
  if (v13 != 0x7FFFFFFFFFFFFFFFLL) {
    uint64_t v17 = v13;
  }
  if (a5) {
    *a5 = v17;
  }
  return objc_msgSend(a1, "measurementByConvertingToUnit:", informationStorageUnitFromAllowedUnit(1 << v17, a3));
}

NSUnitInformationStorage *informationStorageUnitFromAllowedUnit(uint64_t a1, int a2)
{
  if (a1 > 15)
  {
    if (a1 > 63)
    {
      if (a1 == 64)
      {
        if (a2) {
          return +[NSUnitInformationStorage exabytes](&OBJC_CLASS___NSUnitInformationStorage, "exabytes");
        }
        else {
          return +[NSUnitInformationStorage exbibytes](&OBJC_CLASS___NSUnitInformationStorage, "exbibytes");
        }
      }

      if (a1 == 128)
      {
        if (a2) {
          return +[NSUnitInformationStorage zettabytes](&OBJC_CLASS___NSUnitInformationStorage, "zettabytes");
        }
        else {
          return +[NSUnitInformationStorage zebibytes](&OBJC_CLASS___NSUnitInformationStorage, "zebibytes");
        }
      }
    }

    else
    {
      if (a1 == 16)
      {
        if (a2) {
          return +[NSUnitInformationStorage terabytes](&OBJC_CLASS___NSUnitInformationStorage, "terabytes");
        }
        else {
          return +[NSUnitInformationStorage tebibytes](&OBJC_CLASS___NSUnitInformationStorage, "tebibytes");
        }
      }

      if (a1 == 32)
      {
        if (a2) {
          return +[NSUnitInformationStorage petabytes](&OBJC_CLASS___NSUnitInformationStorage, "petabytes");
        }
        else {
          return +[NSUnitInformationStorage pebibytes](&OBJC_CLASS___NSUnitInformationStorage, "pebibytes");
        }
      }
    }

NSString *__NSLocalizedFileSizeDescriptionWithMeasurement(void *a1, unint64_t a2, uint64_t a3)
{
  v17[1] = *MEMORY[0x1895F89C0];
  if ((a2 & 0x180000) != 0) {
    int v6 = (a2 >> 18) & 1;
  }
  else {
    int v6 = 1;
  }
  if (v6) {
    uint64_t v7 = 1000LL;
  }
  else {
    uint64_t v7 = 1024LL;
  }
  char v8 = objc_msgSend( (id)objc_msgSend(a1, "unit"),  "isEqual:",  +[NSUnitInformationStorage bytes](NSUnitInformationStorage, "bytes"));
  unint64_t v9 = a1;
  if ((v8 & 1) == 0) {
    unint64_t v9 = (void *)objc_msgSend( a1,  "measurementByConvertingToUnit:",  +[NSUnitInformationStorage bytes](NSUnitInformationStorage, "bytes"));
  }
  [v9 doubleValue];
  double v11 = v10;
  double v12 = fabs(v10);
  if (v12 >= INFINITY && v12 <= INFINITY) {
    return __NSLocalizedFileSizeDescriptionFormatNumber( +[NSNumber numberWithDouble:](&OBJC_CLASS___NSNumber, "numberWithDouble:", v11),  0LL,  (uint64_t)+[NSNumber numberWithDouble:](&OBJC_CLASS___NSNumber, "numberWithDouble:", v11),  a2,  a3);
  }
  if (v11 < -9.22337204e18 || v11 > 9.22337204e18)
  {
    objc_msgSend((id)__NSMeasurementConvertedForFileSizeDescription(a1, a2, v6, v7, v17), "doubleValue");
    double v16 = +[NSNumber numberWithDouble:](&OBJC_CLASS___NSNumber, "numberWithDouble:");
    return __NSLocalizedFileSizeDescriptionFormatNumber( v16,  v17[0],  (uint64_t)+[NSNumber numberWithDouble:](&OBJC_CLASS___NSNumber, "numberWithDouble:", v11),  a2,  a3);
  }

  else
  {
    uint64_t v14 = 0x7FFFFFFFFFFFFFFFLL;
    if (v11 != 9.22337204e18) {
      uint64_t v14 = (uint64_t)v11;
    }
    if (v11 == -9.22337204e18) {
      uint64_t v15 = 0x8000000000000000LL;
    }
    else {
      uint64_t v15 = v14;
    }
    return __NSLocalizedFileSizeDescription(v15, v7, a2, a3);
  }

NSString *NSLocalizedFileSizeDescription(uint64_t a1, uint64_t a2, unint64_t a3)
{
  if ((a1 & 0x8000000000000000LL) == 0) {
    return __NSLocalizedFileSizeDescription(a1, a2, a3, 0LL);
  }
  if ((NSLocalizedFileSizeDescription_warned & 1) == 0)
  {
    NSLocalizedFileSizeDescription_warned = 1;
    NSLog((NSString *)@"Warning: NSLocalizedFileSizeDescription() cannot accept size argument greater than INT64_MAX");
  }

  return +[NSString stringWithFormat:](&OBJC_CLASS___NSString, "stringWithFormat:", @"%llu", a1);
}

NSString *_NSLocalizedFileSizeDescription(uint64_t a1, uint64_t a2, unint64_t a3)
{
  return __NSLocalizedFileSizeDescription(a1, a2, a3, 0LL);
}

NSNumberFormatter *fileSizeFormatter(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  if (!fileSizeFormatter_numberFormatterCache)
  {
    id v8 = objc_alloc_init(MEMORY[0x189603F30]);
    while (!__ldaxr((unint64_t *)&fileSizeFormatter_numberFormatterCache))
    {
    }

    __clrex();
  }

void sub_18366D320( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16)
{
}

void sub_18366D4B8( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16)
{
}

void sub_18366DE30( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, char a35, uint64_t a36, uint64_t a37, uint64_t a38, char a39, uint64_t a40, uint64_t a41, uint64_t a42, char a43, uint64_t a44, uint64_t a45, uint64_t a46, char a47, uint64_t a48, uint64_t a49, uint64_t a50,char a51,uint64_t a52,uint64_t a53,uint64_t a54,char a55,uint64_t a56,uint64_t a57,uint64_t a58,char a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
}

void __Block_byref_object_copy__20(uint64_t a1, uint64_t a2)
{
}

void __Block_byref_object_dispose__20(uint64_t a1)
{
}

uint64_t ___diffStr_block_invoke(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 24LL);
  if (*(void *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL) != v2) {
    objc_msgSend(*(id *)(a1 + 32), "appendFormat:", @",%lu", v2 + 1);
  }
  [*(id *)(a1 + 32) appendString:@"c"];
  objc_msgSend( *(id *)(a1 + 32),  "appendFormat:",  @"%lu",  *(void *)(*(void *)(*(void *)(a1 + 56) + 8) + 24) + 1);
  uint64_t v3 = *(void *)(*(void *)(*(void *)(a1 + 64) + 8LL) + 24LL);
  if (*(void *)(*(void *)(*(void *)(a1 + 56) + 8LL) + 24LL) != v3) {
    objc_msgSend(*(id *)(a1 + 32), "appendFormat:", @",%lu", v3 + 1);
  }
  [*(id *)(a1 + 32) appendString:@"\n"];
  uint64_t result = [*(id *)(a1 + 32) appendString:*(void *)(*(void *)(*(void *)(a1 + 72) + 8) + 40)];
  *(void *)(*(void *)(*(void *)(a1 + 72) + 8LL) + 40LL) = 0LL;
  return result;
}

uint64_t ___diffStr_block_invoke_2(void *a1, void *a2)
{
  uint64_t v4 = [a2 changeType];
  uint64_t v5 = [a2 index];
  uint64_t v6 = v5;
  if (v4 == 1)
  {
    uint64_t v7 = *(void *)(*(void *)(a1[5] + 8LL) + 24LL) + 1LL;
  }

  else
  {
    if (*(_BYTE *)(*(void *)(a1[7] + 8LL) + 24LL)) {
      BOOL v8 = *(void *)(*(void *)(a1[8] + 8LL) + 24LL) != 1LL;
    }
    else {
      BOOL v8 = 1LL;
    }
    uint64_t v7 = v8 + *(void *)(*(void *)(a1[6] + 8LL) + 24LL);
  }

  uint64_t v9 = *(void *)(*(void *)(a1[9] + 8LL) + 40LL);
  if (v9) {
    BOOL v10 = v5 == v7;
  }
  else {
    BOOL v10 = 1;
  }
  if (!v10)
  {
    (*(void (**)(void))(a1[4] + 16LL))();
    uint64_t v9 = *(void *)(*(void *)(a1[9] + 8LL) + 40LL);
  }

  if (!v9)
  {
    *(void *)(*(void *)(a1[9] + 8LL) + 40LL) = (id)objc_opt_new();
    if (v4 == 1)
    {
      *(void *)(*(void *)(a1[5] + 8LL) + 24LL) = v6;
      *(void *)(*(void *)(a1[10] + 8LL) + 24LL) = v6;
      uint64_t v11 = v6 - *(void *)(*(void *)(a1[12] + 8LL) + 24LL) + *(void *)(*(void *)(a1[13] + 8LL) + 24LL);
      uint64_t v12 = 1LL;
    }

    else
    {
      uint64_t v12 = 0LL;
      uint64_t v13 = *(void *)(*(void *)(a1[12] + 8LL) + 24LL) + v6 - *(void *)(*(void *)(a1[13] + 8LL) + 24LL);
      *(void *)(*(void *)(a1[5] + 8LL) + 24LL) = v13;
      *(void *)(*(void *)(a1[10] + 8LL) + 24LL) = v13;
      uint64_t v11 = v6;
    }

    *(void *)(*(void *)(a1[6] + 8LL) + 24LL) = v11;
    *(void *)(*(void *)(a1[11] + 8LL) + 24LL) = v11;
    *(void *)(*(void *)(a1[8] + 8LL) + 24LL) = v12;
    *(_BYTE *)(*(void *)(a1[7] + 8LL) + 24LL) = 1;
  }

  if (v4 == 1)
  {
    uint64_t result = [*(id *)(*(void *)(a1[9] + 8) + 40) appendFormat:@"< %@\n", objc_msgSend(a2, "object")];
    ++*(void *)(*(void *)(a1[12] + 8LL) + 24LL);
    uint64_t v15 = a1[5];
  }

  else
  {
    uint64_t v16 = *(void *)(a1[8] + 8LL);
    if (*(void *)(v16 + 24) != v4)
    {
      *(void *)(v16 + 24) = v4;
      [*(id *)(*(void *)(a1[9] + 8) + 40) appendString:@"---\n"];
    }

    ++*(void *)(*(void *)(a1[13] + 8LL) + 24LL);
    uint64_t result = [*(id *)(*(void *)(a1[9] + 8) + 40) appendFormat:@"> %@\n", objc_msgSend(a2, "object")];
    uint64_t v15 = a1[6];
  }

  *(void *)(*(void *)(v15 + 8) + 24LL) = v6;
  return result;
}

void sub_18366F038(_Unwind_Exception *a1)
{
}

void __Block_byref_object_copy__21(uint64_t a1, uint64_t a2)
{
}

void __Block_byref_object_dispose__21(uint64_t a1)
{
}

void *___loadCrashReporterSupport_block_invoke()
{
  uint64_t result = dlopen("/System/Library/PrivateFrameworks/CrashReporterSupport.framework/CrashReporterSupport", 256);
  if (result)
  {
    uint64_t result = dlsym(result, "SimulateCrash");
    off_18C496E10 = (uint64_t (*)(void, void, void))result;
  }

  return result;
}

Class ___loadAssertionServices_block_invoke()
{
  Class result = objc_lookUpClass("BKSProcessAssertion");
  _MergedGlobals_138 = result != 0LL;
  return result;
}

CFStringRef __CFBasicHashNullCallback(uint64_t a1, int a2, const __CFString *a3, const __CFString *a4)
{
  CFStringRef result = (CFStringRef)&CFBasicHashNullCallbacks;
  switch(a2)
  {
    case 8:
      return result;
    case 10:
    case 11:
    case 12:
    case 13:
    case 22:
    case 23:
      CFStringRef result = a3;
      break;
    case 18:
    case 19:
    case 20:
    case 21:
      CFStringRef result = (CFStringRef)(a3 == a4);
      break;
    case 24:
    case 25:
    case 26:
    case 27:
      CFStringRef result = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x189604DD0], 0LL, @"<%p>", a3);
      break;
    default:
      CFStringRef result = 0LL;
      break;
  }

  return result;
}

void *CFBasicHashGetBucket@<X0>(void *result@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  unint64_t v3 = result[2];
  uint64_t v4 = result[3];
  *a3 = a2;
  uint64_t v5 = *(void *)(result[5] + 8 * a2);
  a3[3] = v5;
  if ((v3 & 4) != 0) {
    uint64_t v6 = *(void *)(result[6] + 8 * a2);
  }
  else {
    uint64_t v6 = 0LL;
  }
  a3[4] = v6;
  if ((v3 & 0x18) != 0)
  {
    uint64_t v7 = (v3 >> 3) & 3;
    if (!v7) {
      goto LABEL_25;
    }
    uint64_t v5 = *(void *)(result[v7 + 5] + 8 * a2);
  }

  a3[1] = v5;
  if ((v3 & 0x60) != 0)
  {
    uint64_t v8 = (v3 >> 5) & 3;
    if (!v8) {
      goto LABEL_25;
    }
    uint64_t v9 = *(void *)(result[v8 + 5] + 8 * a2);
  }

  else
  {
    uint64_t v9 = 0LL;
  }

  a3[2] = v9;
  if ((v3 & 0x380) != 0)
  {
    uint64_t v10 = (v3 >> 7) & 7;
    if (!v10) {
      goto LABEL_25;
    }
    uint64_t v11 = *(void *)(result[v10 + 5] + 8 * a2);
  }

  else
  {
    *((void *)&v12 + 1) = v4;
    *(void *)&__int128 v12 = v3;
    uint64_t v13 = (v12 >> 32) & 0xFFFFFF0000000000LL;
    uint64_t v11 = v5 != v13 && v5 != ~v13;
  }

  a3[5] = v11;
  if ((v3 & 0x1C00) == 0)
  {
    uint64_t v16 = 0LL;
    goto LABEL_24;
  }

  uint64_t v15 = (v3 >> 10) & 7;
  if (v15)
  {
    uint64_t v16 = *(void *)(result[v15 + 5] + 8 * a2);
LABEL_24:
    a3[6] = v16;
    return result;
  }

void *CFBasicHashApply(void *result, uint64_t a2)
{
  uint64_t v18 = *MEMORY[0x1895F89C0];
  unint64_t v2 = result[2];
  uint64_t v3 = (v2 >> 16) & 0x3F;
  BOOL v4 = v2 < 0x400000 || v3 == 0;
  if (!v4 && v3 != 63)
  {
    uint64_t v6 = result;
    uint64_t v7 = __CFBasicHashTableSizes[v3];
    uint64_t v8 = v2 >> 22;
    uint64_t v9 = 1LL;
    do
    {
      CFStringRef result = CFBasicHashGetBucket(v6, v9 - 1, v15);
      if (*((void *)&v16 + 1))
      {
        uint64_t v10 = *(uint64_t (**)(uint64_t, _OWORD *))(a2 + 16);
        v13[0] = v15[0];
        v13[1] = v15[1];
        id v13[2] = v16;
        uint64_t v14 = v17;
        CFStringRef result = (void *)v10(a2, v13);
        if (!(_DWORD)result) {
          return result;
        }
        v8 -= (_DWORD)result != 0;
      }

      if (v8 >= 1)
      {
        BOOL v12 = __OFSUB__(v9, v7);
        BOOL v11 = v9 - v7 < 0;
      }

      else
      {
        BOOL v12 = 0;
        BOOL v11 = 0;
      }

      ++v9;
    }

    while (v11 != v12);
  }

  return result;
}

uint64_t __CFBasicHashGetCount_block_invoke(uint64_t a1, uint64_t a2)
{
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) += *(void *)(a2 + 40);
  return 1LL;
}

uint64_t CFBasicHashesAreEqual(void *a1, void *a2)
{
  uint64_t v12 = *MEMORY[0x1895F89C0];
  unint64_t Count = CFBasicHashGetCount(a1);
  if (Count != CFBasicHashGetCount(a2)) {
    return 0LL;
  }
  uint64_t v5 = 1LL;
  if (Count)
  {
    uint64_t v8 = 0LL;
    uint64_t v9 = &v8;
    uint64_t v10 = 0x2020000000LL;
    char v11 = 1;
    v7[0] = MEMORY[0x1895F87A8];
    v7[1] = 3221225472LL;
    void v7[2] = __CFBasicHashesAreEqual_block_invoke;
    v7[3] = &unk_189CA1E00;
    void v7[4] = &v8;
    v7[5] = a2;
    v7[6] = a1;
    CFBasicHashApply(a1, (uint64_t)v7);
    uint64_t v5 = *((unsigned __int8 *)v9 + 24);
    _Block_object_dispose(&v8, 8);
  }

  return v5;
}

void sub_18366FEA8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
}

uint64_t __CFBasicHashesAreEqual_block_invoke(void *a1, void *a2)
{
  uint64_t v12 = *MEMORY[0x1895F89C0];
  uint64_t result = a1[5];
  uint64_t v5 = *(void *)(result + 16);
  if ((v5 & 0x3F0000) != 0)
  {
    unint64_t v6 = a2[1];
    int v7 = v5 & 3;
    switch(v7)
    {
      case 3:
        ___CFBasicHashFindBucket3(result, v6, 0, v9);
        break;
      case 2:
        ___CFBasicHashFindBucket2(result, v6, 0, v9);
        break;
      case 1:
        ___CFBasicHashFindBucket1(result, v6, 0, v9);
        break;
      default:
        __break(1u);
        return result;
    }
  }

  else
  {
    __int128 v11 = 0u;
    __int128 v10 = 0u;
  }

  if (a2[5] == (void)v11)
  {
    uint64_t v8 = a1[6];
  }

  uint64_t result = 0LL;
  *(_BYTE *)(*(void *)(a1[4] + 8LL) + 24LL) = 0;
  return result;
}

void __CFBasicHashRehash(uint64_t a1, uint64_t a2)
{
  unint64_t v2 = 0LL;
  v82[7] = *MEMORY[0x1895F89C0];
  unint64_t v3 = *(void *)(a1 + 16);
  unint64_t v4 = *(void *)(a1 + 24);
  do
  {
    ++v2;
  }

  while (v2 != 64);
  while (1)
  {
    while (1)
    {
LABEL_4:
      __break(1u);
LABEL_5:
      uint64_t v5 = 0LL;
      uint64_t v6 = (v4 >> 3) & 1;
      if (a2 != 1) {
        uint64_t v6 = 0LL;
      }
      uint64_t v7 = (v3 >> 16) & 0x3F;
      uint64_t v8 = __CFBasicHashTableSizes[v7];
      unint64_t v9 = v6 + v2;
      uint64_t v10 = __CFBasicHashTableSizes[v6 + v2];
      CFTypeRef cf = (_BYTE *)a1;
      uint64_t v11 = 0LL;
      uint64_t v12 = 0LL;
      uint64_t v13 = 0LL;
      uint64_t v14 = 0LL;
      uint64_t v15 = 0LL;
      if (!(v6 + v2))
      {
        uint64_t v81 = 0LL;
        goto LABEL_63;
      }

      uint64_t v81 = 0LL;
      if (v9 != 63) {
        break;
      }
LABEL_63:
      unint64_t v71 = v11;
      unint64_t v2 = *(void *)(a1 + 16);
      uint64_t v26 = *(void *)(a1 + 24);
      *((void *)&v27 + 1) = v26;
      *(void *)&__int128 v27 = v2;
      uint64_t v28 = (v27 >> 32) & 0xFFFFFF0000000000LL;
      if (v9 && v9 != 63)
      {
        if (v10 <= 1) {
          uint64_t v29 = 1LL;
        }
        else {
          uint64_t v29 = v10;
        }
        BOOL v30 = v81;
        uint64_t v31 = v15;
        uint64_t v32 = v14;
        unint64_t v33 = v13;
        do
        {
          *BOOL v30 = v28;
          if (v15) {
            void *v31 = v28;
          }
          if (v14) {
            *uint64_t v32 = v28;
          }
          if (v13) {
            void *v33 = v28;
          }
          ++v33;
          ++v32;
          ++v31;
          ++v30;
          --v29;
        }

        while (v29);
        unint64_t v2 = *(void *)(a1 + 16);
        uint64_t v26 = *(void *)(a1 + 24);
      }

      unint64_t v4 = v2 & 0xFFFFFFFFFFC0FFFFLL | ((v9 & 0x3F) << 16);
      *(void *)(a1 + __swift_destroy_boxed_opaque_existential_1(v0 + 16) = v4;
      *(void *)(a1 + 24) = v26 & 0xFFFF0000FFFFFFFFLL;
      ptr = *(void **)(a1 + 40);
      unint64_t v3 = (unint64_t)v81;
      *(void *)(a1 + 40) = v81;
      if ((v2 & 4) != 0)
      {
        unint64_t v3 = *(void *)(a1 + 48);
        unint64_t v64 = (void *)v3;
        *(void *)(a1 + 4_Block_object_dispose(va, 8) = v15;
      }

      else
      {
        unint64_t v64 = 0LL;
      }

      if ((v2 & 0x18) == 0)
      {
        double v63 = 0LL;
        goto LABEL_84;
      }

      unint64_t v3 = (v2 >> 3) & 3;
      if (v3)
      {
        unint64_t v3 = a1 + 8 * v3;
        unint64_t v4 = *(void *)(v3 + 40);
        double v63 = (void *)v4;
        *(void *)(v3 + 40) = v14;
LABEL_84:
        if ((v2 & 0x60) != 0)
        {
          unint64_t v3 = (v2 >> 5) & 3;
          if (v3)
          {
            unint64_t v3 = a1 + 8 * v3;
            unint64_t v4 = *(void *)(v3 + 40);
            unint64_t v62 = (void *)v4;
            *(void *)(v3 + 40) = v13;
            goto LABEL_88;
          }
        }

        else
        {
          unint64_t v62 = 0LL;
LABEL_88:
          if ((v2 & 0x380) == 0)
          {
            int v61 = 0LL;
            goto LABEL_92;
          }

          unint64_t v3 = (v2 >> 7) & 7;
          if (v3)
          {
            unint64_t v3 = a1 + 8 * v3;
            unint64_t v4 = *(void *)(v3 + 40);
            int v61 = (void *)v4;
            *(void *)(v3 + 40) = v12;
LABEL_92:
            if ((v2 & 0x1C00) != 0)
            {
              unint64_t v3 = (v2 >> 10) & 7;
              if (v3)
              {
                unint64_t v3 = a1 + 8 * v3;
                unint64_t v4 = *(void *)(v3 + 40);
                unsigned int v60 = (void *)v4;
                *(void *)(v3 + 40) = v5;
                goto LABEL_96;
              }
            }

            else
            {
              unsigned int v60 = 0LL;
LABEL_96:
              unint64_t v67 = (unint64_t)v14;
              unint64_t v68 = (unint64_t)v15;
              unint64_t v66 = (unint64_t)v13;
              unint64_t v69 = v5;
              unint64_t v70 = v12;
              if ((v2 & 0xE000) == 0)
              {
                unsigned int v59 = 0LL;
                if (!v7)
                {
LABEL_167:
                  int v58 = CFGetAllocator((CFTypeRef)a1);
                  CFAllocatorDeallocate(v58, ptr);
                  CFAllocatorDeallocate(v58, v64);
                  CFAllocatorDeallocate(v58, v63);
                  CFAllocatorDeallocate(v58, v62);
                  CFAllocatorDeallocate(v58, v61);
                  CFAllocatorDeallocate(v58, v60);
                  CFAllocatorDeallocate(v58, v59);
                  return;
                }

unint64_t CFBasicHashAddValue(unint64_t result, unint64_t a2)
{
  uint64_t v3 = result;
  uint64_t v14 = *MEMORY[0x1895F89C0];
  uint64_t v4 = *(void *)(result + 16);
  if ((v4 & 0x3F0000) != 0)
  {
    int v5 = v4 & 3;
    switch(v5)
    {
      case 3:
        uint64_t result = ___CFBasicHashFindBucket3(result, a2, 0, (unint64_t *)&v11);
        break;
      case 2:
        uint64_t result = ___CFBasicHashFindBucket2(result, a2, 0, (unint64_t *)&v11);
        break;
      case 1:
        uint64_t result = ___CFBasicHashFindBucket1(result, a2, 0, (unint64_t *)&v11);
        break;
      default:
LABEL_15:
        __break(1u);
        return result;
    }
  }

  else
  {
    __int128 v6 = *(_OWORD *)(result + 16);
    *(void *)&__int128 v11 = -1LL;
    *((void *)&v11 + 1) = (v6 >> 32) & 0xFFFFFF0000000000LL;
    *(void *)uint64_t v12 = *((void *)&v11 + 1);
    *(_OWORD *)&v12[8] = 0u;
    __int128 v13 = 0u;
  }

  if ((void)v13)
  {
    unint64_t v7 = *(void *)(v3 + 16);
    *(_WORD *)(v3 + 30) = HIWORD(*(void *)(v3 + 24)) + 1;
    if ((v7 & 0x380) != 0)
    {
      uint64_t v8 = (v7 >> 7) & 7;
      if (v8)
      {
        ++*(void *)(*(void *)(v3 + 8 * v8 + 40) + 8 * v11);
        return result;
      }

      goto LABEL_15;
    }
  }

  else
  {
    v9[0] = v11;
    v9[1] = *(_OWORD *)v12;
    double v9[2] = *(unint64_t *)&v12[16];
    uint64_t v10 = *((void *)&v13 + 1);
    return __CFBasicHashAddValue(v3, (uint64_t)v9, a2);
  }

  return result;
}

uint64_t __CFBasicHashReplaceValue(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v6 = (**(uint64_t (***)(void))(a1 + 32))();
  uint64_t v9 = v6;
  uint64_t v10 = *(void *)(a1 + 16);
  if ((v10 & 0x18) != 0)
  {
    uint64_t v11 = (**(uint64_t (***)(uint64_t, uint64_t, uint64_t, void))(a1 + 32))(a1, 12LL, a3, 0LL);
    uint64_t v10 = *(void *)(a1 + 16);
    uint64_t v12 = *(void *)(a1 + 24);
    if ((v10 & 4) == 0)
    {
LABEL_3:
      uint64_t v13 = 0LL;
      goto LABEL_6;
    }
  }

  else
  {
    uint64_t v12 = *(void *)(a1 + 24);
    uint64_t v11 = v6;
    if ((v10 & 4) == 0) {
      goto LABEL_3;
    }
  }

  uint64_t v13 = (**(uint64_t (***)(uint64_t, uint64_t, void, void))(a1 + 32))(a1, 11LL, 0LL, 0LL);
  uint64_t v10 = *(void *)(a1 + 16);
  uint64_t v12 = *(void *)(a1 + 24);
LABEL_6:
  if ((v10 & 0x60) != 0)
  {
    uint64_t v14 = (**(uint64_t (***)(uint64_t, uint64_t, void, void))(a1 + 32))(a1, 13LL, 0LL, 0LL);
    uint64_t v15 = *(void *)(a1 + 20);
  }

  else
  {
    uint64_t v14 = 0LL;
    *((void *)&v16 + 1) = v12;
    *(void *)&__int128 v16 = v10;
    uint64_t v15 = v16 >> 32;
  }

  unint64_t v17 = v15 & 0xFFFFFF0000000000LL;
  if (v11 == v17 || v11 == ~v17) {
    __CFBasicHashFindNewMarker(a1, v11, v7, v8);
  }
  uint64_t v19 = *(void *)(a1 + 40);
  uint64_t v20 = *(void *)(v19 + 8LL * *a2);
  *(void *)(v19 + 8LL * *a2) = v9;
  uint64_t result = (**(uint64_t (***)(uint64_t, uint64_t, uint64_t, void))(a1 + 32))(a1, 14LL, v20, 0LL);
  unint64_t v22 = *(void *)(a1 + 16);
  if ((v22 & 4) != 0)
  {
    uint64_t v23 = *(void *)(a1 + 48);
    uint64_t v24 = *(void *)(v23 + 8LL * *a2);
    *(void *)(v23 + 8LL * *a2) = v13;
    uint64_t result = (**(uint64_t (***)(uint64_t, uint64_t, uint64_t, void))(a1 + 32))(a1, 15LL, v24, 0LL);
    unint64_t v22 = *(void *)(a1 + 16);
  }

  if ((v22 & 0x18) != 0)
  {
    uint64_t v25 = (v22 >> 3) & 3;
    if (!v25)
    {
LABEL_24:
      __break(1u);
      return result;
    }

    uint64_t v26 = *(void *)(a1 + 8 * v25 + 40);
    uint64_t v27 = *(void *)(v26 + 8LL * *a2);
    *(void *)(v26 + 8LL * *a2) = v11;
    uint64_t result = (**(uint64_t (***)(uint64_t, uint64_t, uint64_t, void))(a1 + 32))(a1, 16LL, v27, 0LL);
    unint64_t v22 = *(void *)(a1 + 16);
  }

  if ((v22 & 0x60) != 0)
  {
    uint64_t v28 = (v22 >> 5) & 3;
    if (v28)
    {
      uint64_t v29 = *(void *)(a1 + 8 * v28 + 40);
      uint64_t v30 = *(void *)(v29 + 8LL * *a2);
      *(void *)(v29 + 8LL * *a2) = v14;
      return (**(uint64_t (***)(uint64_t, uint64_t, uint64_t, void))(a1 + 32))(a1, 17LL, v30, 0LL);
    }

    goto LABEL_24;
  }

  return result;
}

void __CFBasicHashDrain(uint64_t a1, int a2)
{
  unint64_t v4 = *(void *)(a1 + 16);
  uint64_t v5 = *(void *)(a1 + 24);
  uint64_t v6 = (v4 >> 16) & 0x3F;
  uint64_t v7 = __CFBasicHashTableSizes[v6];
  uint64_t v8 = CFGetAllocator((CFTypeRef)a1);
  char v39 = 0LL;
  ptr = *(void **)(a1 + 40);
  *(void *)(a1 + 40) = 0LL;
  unint64_t v9 = *(void *)(a1 + 16);
  if ((v9 & 4) != 0)
  {
    char v39 = *(void **)(a1 + 48);
    *(void *)(a1 + 4_Block_object_dispose(va, 8) = 0LL;
  }

  unint64_t v10 = *(void *)(a1 + 24);
  if ((v9 & 0x18) != 0)
  {
    uint64_t v11 = (v9 >> 3) & 3;
    if (!v11) {
      goto LABEL_47;
    }
    uint64_t v12 = a1 + 8 * v11;
    int v40 = *(void **)(v12 + 40);
    *(void *)(v12 + 40) = 0LL;
  }

  else
  {
    int v40 = 0LL;
  }

  if ((v9 & 0x60) != 0)
  {
    uint64_t v13 = (v9 >> 5) & 3;
    if (!v13) {
      goto LABEL_47;
    }
    uint64_t v14 = a1 + 8 * v13;
    BOOL v38 = *(void **)(v14 + 40);
    *(void *)(v14 + 40) = 0LL;
  }

  else
  {
    BOOL v38 = 0LL;
  }

  if ((v9 & 0x380) != 0)
  {
    uint64_t v15 = (v9 >> 7) & 7;
    if (!v15) {
      goto LABEL_47;
    }
    uint64_t v16 = a1 + 8 * v15;
    unint64_t v17 = *(void **)(v16 + 40);
    *(void *)(v16 + 40) = 0LL;
  }

  else
  {
    unint64_t v17 = 0LL;
  }

  if ((v9 & 0x1C00) != 0)
  {
    uint64_t v18 = (v9 >> 10) & 7;
    if (!v18) {
      goto LABEL_47;
    }
    uint64_t v19 = a1 + 8 * v18;
    uint64_t v20 = *(void **)(v19 + 40);
    *(void *)(v19 + 40) = 0LL;
  }

  else
  {
    uint64_t v20 = 0LL;
  }

  int v36 = a2;
  uint64_t v34 = v20;
  uint64_t v35 = v17;
  if ((v9 & 0xE000) != 0)
  {
    if ((unsigned __int16)v9 >> 13)
    {
      uint64_t v21 = a1 + 8LL * ((unsigned __int16)v9 >> 13);
      unint64_t v33 = *(void **)(v21 + 40);
      *(void *)(v21 + 40) = 0LL;
      goto LABEL_23;
    }

uint64_t __CFBasicHashCopyDescription_block_invoke(uint64_t a1, uint64_t *a2)
{
  if (*(_BYTE *)(a1 + 56)) {
    unint64_t v4 = **(uint64_t (***)(void))(*(void *)(a1 + 32) + 32LL);
  }
  else {
    unint64_t v4 = (uint64_t (*)(void))__CFBasicHashNullCallback;
  }
  uint64_t v5 = (const void *)v4();
  uint64_t v6 = *(void *)(a1 + 32);
  uint64_t v7 = *(void *)(v6 + 16);
  if ((v7 & 0x18) != 0)
  {
    uint64_t v8 = (const void *)((uint64_t (*)(uint64_t, uint64_t, uint64_t, void, void))v4)( v6,  26LL,  a2[1],  0LL,  *(void *)(v6 + 32));
    uint64_t v7 = *(void *)(*(void *)(a1 + 32) + 16LL);
  }

  else
  {
    uint64_t v8 = 0LL;
  }

  uint64_t v9 = v7 & 0x18;
  uint64_t v10 = v7 & 0x380;
  uint64_t v11 = *(__CFString **)(a1 + 40);
  uint64_t v12 = *(void *)(a1 + 48);
  uint64_t v13 = *a2;
  if (v9) {
    BOOL v14 = v10 == 0;
  }
  else {
    BOOL v14 = 1;
  }
  if (v14)
  {
    if (v9)
    {
      CFStringAppendFormat(v11, 0LL, @"%@%ld : %@ = %@\n", v12, v13, v8, v5);
    }

    else if (v10)
    {
      CFStringAppendFormat(v11, 0LL, @"%@%ld : %@ (%ld)\n", v12, v13, v5, a2[5]);
    }

    else
    {
      CFStringAppendFormat(v11, 0LL, @"%@%ld : %@\n", v12, *a2, v5);
    }
  }

  else
  {
    CFStringAppendFormat(v11, 0LL, @"%@%ld : %@ = %@ (%ld)\n", v12, v13, v8, v5, a2[5]);
  }

  if (v8) {
    CFRelease(v8);
  }
  if (v5) {
    CFRelease(v5);
  }
  return 1LL;
}